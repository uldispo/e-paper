
e-paper_18x5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009614  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  080096d8  080096d8  0000a6d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b1c  08009b1c  0000b010  2**0
                  CONTENTS
  4 .ARM          00000008  08009b1c  08009b1c  0000ab1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b24  08009b24  0000b010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b24  08009b24  0000ab24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b28  08009b28  0000ab28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08009b2c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000010  08009b3c  0000b010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  08009b3c  0000b214  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000184d6  00000000  00000000  0000b038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003996  00000000  00000000  0002350e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001618  00000000  00000000  00026ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001112  00000000  00000000  000284c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020a3a  00000000  00000000  000295d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cfdf  00000000  00000000  0004a00c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c42c2  00000000  00000000  00066feb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012b2ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005228  00000000  00000000  0012b2f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00130518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080096bc 	.word	0x080096bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080096bc 	.word	0x080096bc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0010      	movs	r0, r2
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	0019      	movs	r1, r3
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f001 f891 	bl	800152c <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 ffd1 	bl	80013bc <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f001 f883 	bl	800152c <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 f879 	bl	800152c <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			@ (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 fffb 	bl	8001444 <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			@ (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 fff1 	bl	8001444 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			@ (mov r8, r8)

08000470 <__clzsi2>:
 8000470:	211c      	movs	r1, #28
 8000472:	2301      	movs	r3, #1
 8000474:	041b      	lsls	r3, r3, #16
 8000476:	4298      	cmp	r0, r3
 8000478:	d301      	bcc.n	800047e <__clzsi2+0xe>
 800047a:	0c00      	lsrs	r0, r0, #16
 800047c:	3910      	subs	r1, #16
 800047e:	0a1b      	lsrs	r3, r3, #8
 8000480:	4298      	cmp	r0, r3
 8000482:	d301      	bcc.n	8000488 <__clzsi2+0x18>
 8000484:	0a00      	lsrs	r0, r0, #8
 8000486:	3908      	subs	r1, #8
 8000488:	091b      	lsrs	r3, r3, #4
 800048a:	4298      	cmp	r0, r3
 800048c:	d301      	bcc.n	8000492 <__clzsi2+0x22>
 800048e:	0900      	lsrs	r0, r0, #4
 8000490:	3904      	subs	r1, #4
 8000492:	a202      	add	r2, pc, #8	@ (adr r2, 800049c <__clzsi2+0x2c>)
 8000494:	5c10      	ldrb	r0, [r2, r0]
 8000496:	1840      	adds	r0, r0, r1
 8000498:	4770      	bx	lr
 800049a:	46c0      	nop			@ (mov r8, r8)
 800049c:	02020304 	.word	0x02020304
 80004a0:	01010101 	.word	0x01010101
	...

080004ac <__aeabi_uldivmod>:
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d111      	bne.n	80004d4 <__aeabi_uldivmod+0x28>
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	d10f      	bne.n	80004d4 <__aeabi_uldivmod+0x28>
 80004b4:	2900      	cmp	r1, #0
 80004b6:	d100      	bne.n	80004ba <__aeabi_uldivmod+0xe>
 80004b8:	2800      	cmp	r0, #0
 80004ba:	d002      	beq.n	80004c2 <__aeabi_uldivmod+0x16>
 80004bc:	2100      	movs	r1, #0
 80004be:	43c9      	mvns	r1, r1
 80004c0:	0008      	movs	r0, r1
 80004c2:	b407      	push	{r0, r1, r2}
 80004c4:	4802      	ldr	r0, [pc, #8]	@ (80004d0 <__aeabi_uldivmod+0x24>)
 80004c6:	a102      	add	r1, pc, #8	@ (adr r1, 80004d0 <__aeabi_uldivmod+0x24>)
 80004c8:	1840      	adds	r0, r0, r1
 80004ca:	9002      	str	r0, [sp, #8]
 80004cc:	bd03      	pop	{r0, r1, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)
 80004d0:	ffffff21 	.word	0xffffff21
 80004d4:	b403      	push	{r0, r1}
 80004d6:	4668      	mov	r0, sp
 80004d8:	b501      	push	{r0, lr}
 80004da:	9802      	ldr	r0, [sp, #8]
 80004dc:	f000 f824 	bl	8000528 <__udivmoddi4>
 80004e0:	9b01      	ldr	r3, [sp, #4]
 80004e2:	469e      	mov	lr, r3
 80004e4:	b002      	add	sp, #8
 80004e6:	bc0c      	pop	{r2, r3}
 80004e8:	4770      	bx	lr
 80004ea:	46c0      	nop			@ (mov r8, r8)

080004ec <__aeabi_d2uiz>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	2200      	movs	r2, #0
 80004f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000524 <__aeabi_d2uiz+0x38>)
 80004f2:	0004      	movs	r4, r0
 80004f4:	000d      	movs	r5, r1
 80004f6:	f7ff ffb1 	bl	800045c <__aeabi_dcmpge>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	d104      	bne.n	8000508 <__aeabi_d2uiz+0x1c>
 80004fe:	0020      	movs	r0, r4
 8000500:	0029      	movs	r1, r5
 8000502:	f001 fee9 	bl	80022d8 <__aeabi_d2iz>
 8000506:	bd70      	pop	{r4, r5, r6, pc}
 8000508:	4b06      	ldr	r3, [pc, #24]	@ (8000524 <__aeabi_d2uiz+0x38>)
 800050a:	2200      	movs	r2, #0
 800050c:	0020      	movs	r0, r4
 800050e:	0029      	movs	r1, r5
 8000510:	f001 fb46 	bl	8001ba0 <__aeabi_dsub>
 8000514:	f001 fee0 	bl	80022d8 <__aeabi_d2iz>
 8000518:	2380      	movs	r3, #128	@ 0x80
 800051a:	061b      	lsls	r3, r3, #24
 800051c:	469c      	mov	ip, r3
 800051e:	4460      	add	r0, ip
 8000520:	e7f1      	b.n	8000506 <__aeabi_d2uiz+0x1a>
 8000522:	46c0      	nop			@ (mov r8, r8)
 8000524:	41e00000 	.word	0x41e00000

08000528 <__udivmoddi4>:
 8000528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800052a:	4657      	mov	r7, sl
 800052c:	464e      	mov	r6, r9
 800052e:	4645      	mov	r5, r8
 8000530:	46de      	mov	lr, fp
 8000532:	b5e0      	push	{r5, r6, r7, lr}
 8000534:	0004      	movs	r4, r0
 8000536:	000d      	movs	r5, r1
 8000538:	4692      	mov	sl, r2
 800053a:	4699      	mov	r9, r3
 800053c:	b083      	sub	sp, #12
 800053e:	428b      	cmp	r3, r1
 8000540:	d830      	bhi.n	80005a4 <__udivmoddi4+0x7c>
 8000542:	d02d      	beq.n	80005a0 <__udivmoddi4+0x78>
 8000544:	4649      	mov	r1, r9
 8000546:	4650      	mov	r0, sl
 8000548:	f001 ff54 	bl	80023f4 <__clzdi2>
 800054c:	0029      	movs	r1, r5
 800054e:	0006      	movs	r6, r0
 8000550:	0020      	movs	r0, r4
 8000552:	f001 ff4f 	bl	80023f4 <__clzdi2>
 8000556:	1a33      	subs	r3, r6, r0
 8000558:	4698      	mov	r8, r3
 800055a:	3b20      	subs	r3, #32
 800055c:	d434      	bmi.n	80005c8 <__udivmoddi4+0xa0>
 800055e:	469b      	mov	fp, r3
 8000560:	4653      	mov	r3, sl
 8000562:	465a      	mov	r2, fp
 8000564:	4093      	lsls	r3, r2
 8000566:	4642      	mov	r2, r8
 8000568:	001f      	movs	r7, r3
 800056a:	4653      	mov	r3, sl
 800056c:	4093      	lsls	r3, r2
 800056e:	001e      	movs	r6, r3
 8000570:	42af      	cmp	r7, r5
 8000572:	d83b      	bhi.n	80005ec <__udivmoddi4+0xc4>
 8000574:	42af      	cmp	r7, r5
 8000576:	d100      	bne.n	800057a <__udivmoddi4+0x52>
 8000578:	e079      	b.n	800066e <__udivmoddi4+0x146>
 800057a:	465b      	mov	r3, fp
 800057c:	1ba4      	subs	r4, r4, r6
 800057e:	41bd      	sbcs	r5, r7
 8000580:	2b00      	cmp	r3, #0
 8000582:	da00      	bge.n	8000586 <__udivmoddi4+0x5e>
 8000584:	e076      	b.n	8000674 <__udivmoddi4+0x14c>
 8000586:	2200      	movs	r2, #0
 8000588:	2300      	movs	r3, #0
 800058a:	9200      	str	r2, [sp, #0]
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	2301      	movs	r3, #1
 8000590:	465a      	mov	r2, fp
 8000592:	4093      	lsls	r3, r2
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	2301      	movs	r3, #1
 8000598:	4642      	mov	r2, r8
 800059a:	4093      	lsls	r3, r2
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	e029      	b.n	80005f4 <__udivmoddi4+0xcc>
 80005a0:	4282      	cmp	r2, r0
 80005a2:	d9cf      	bls.n	8000544 <__udivmoddi4+0x1c>
 80005a4:	2200      	movs	r2, #0
 80005a6:	2300      	movs	r3, #0
 80005a8:	9200      	str	r2, [sp, #0]
 80005aa:	9301      	str	r3, [sp, #4]
 80005ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <__udivmoddi4+0x8e>
 80005b2:	601c      	str	r4, [r3, #0]
 80005b4:	605d      	str	r5, [r3, #4]
 80005b6:	9800      	ldr	r0, [sp, #0]
 80005b8:	9901      	ldr	r1, [sp, #4]
 80005ba:	b003      	add	sp, #12
 80005bc:	bcf0      	pop	{r4, r5, r6, r7}
 80005be:	46bb      	mov	fp, r7
 80005c0:	46b2      	mov	sl, r6
 80005c2:	46a9      	mov	r9, r5
 80005c4:	46a0      	mov	r8, r4
 80005c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005c8:	4642      	mov	r2, r8
 80005ca:	469b      	mov	fp, r3
 80005cc:	2320      	movs	r3, #32
 80005ce:	1a9b      	subs	r3, r3, r2
 80005d0:	4652      	mov	r2, sl
 80005d2:	40da      	lsrs	r2, r3
 80005d4:	4641      	mov	r1, r8
 80005d6:	0013      	movs	r3, r2
 80005d8:	464a      	mov	r2, r9
 80005da:	408a      	lsls	r2, r1
 80005dc:	0017      	movs	r7, r2
 80005de:	4642      	mov	r2, r8
 80005e0:	431f      	orrs	r7, r3
 80005e2:	4653      	mov	r3, sl
 80005e4:	4093      	lsls	r3, r2
 80005e6:	001e      	movs	r6, r3
 80005e8:	42af      	cmp	r7, r5
 80005ea:	d9c3      	bls.n	8000574 <__udivmoddi4+0x4c>
 80005ec:	2200      	movs	r2, #0
 80005ee:	2300      	movs	r3, #0
 80005f0:	9200      	str	r2, [sp, #0]
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	4643      	mov	r3, r8
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d0d8      	beq.n	80005ac <__udivmoddi4+0x84>
 80005fa:	07fb      	lsls	r3, r7, #31
 80005fc:	0872      	lsrs	r2, r6, #1
 80005fe:	431a      	orrs	r2, r3
 8000600:	4646      	mov	r6, r8
 8000602:	087b      	lsrs	r3, r7, #1
 8000604:	e00e      	b.n	8000624 <__udivmoddi4+0xfc>
 8000606:	42ab      	cmp	r3, r5
 8000608:	d101      	bne.n	800060e <__udivmoddi4+0xe6>
 800060a:	42a2      	cmp	r2, r4
 800060c:	d80c      	bhi.n	8000628 <__udivmoddi4+0x100>
 800060e:	1aa4      	subs	r4, r4, r2
 8000610:	419d      	sbcs	r5, r3
 8000612:	2001      	movs	r0, #1
 8000614:	1924      	adds	r4, r4, r4
 8000616:	416d      	adcs	r5, r5
 8000618:	2100      	movs	r1, #0
 800061a:	3e01      	subs	r6, #1
 800061c:	1824      	adds	r4, r4, r0
 800061e:	414d      	adcs	r5, r1
 8000620:	2e00      	cmp	r6, #0
 8000622:	d006      	beq.n	8000632 <__udivmoddi4+0x10a>
 8000624:	42ab      	cmp	r3, r5
 8000626:	d9ee      	bls.n	8000606 <__udivmoddi4+0xde>
 8000628:	3e01      	subs	r6, #1
 800062a:	1924      	adds	r4, r4, r4
 800062c:	416d      	adcs	r5, r5
 800062e:	2e00      	cmp	r6, #0
 8000630:	d1f8      	bne.n	8000624 <__udivmoddi4+0xfc>
 8000632:	9800      	ldr	r0, [sp, #0]
 8000634:	9901      	ldr	r1, [sp, #4]
 8000636:	465b      	mov	r3, fp
 8000638:	1900      	adds	r0, r0, r4
 800063a:	4169      	adcs	r1, r5
 800063c:	2b00      	cmp	r3, #0
 800063e:	db24      	blt.n	800068a <__udivmoddi4+0x162>
 8000640:	002b      	movs	r3, r5
 8000642:	465a      	mov	r2, fp
 8000644:	4644      	mov	r4, r8
 8000646:	40d3      	lsrs	r3, r2
 8000648:	002a      	movs	r2, r5
 800064a:	40e2      	lsrs	r2, r4
 800064c:	001c      	movs	r4, r3
 800064e:	465b      	mov	r3, fp
 8000650:	0015      	movs	r5, r2
 8000652:	2b00      	cmp	r3, #0
 8000654:	db2a      	blt.n	80006ac <__udivmoddi4+0x184>
 8000656:	0026      	movs	r6, r4
 8000658:	409e      	lsls	r6, r3
 800065a:	0033      	movs	r3, r6
 800065c:	0026      	movs	r6, r4
 800065e:	4647      	mov	r7, r8
 8000660:	40be      	lsls	r6, r7
 8000662:	0032      	movs	r2, r6
 8000664:	1a80      	subs	r0, r0, r2
 8000666:	4199      	sbcs	r1, r3
 8000668:	9000      	str	r0, [sp, #0]
 800066a:	9101      	str	r1, [sp, #4]
 800066c:	e79e      	b.n	80005ac <__udivmoddi4+0x84>
 800066e:	42a3      	cmp	r3, r4
 8000670:	d8bc      	bhi.n	80005ec <__udivmoddi4+0xc4>
 8000672:	e782      	b.n	800057a <__udivmoddi4+0x52>
 8000674:	4642      	mov	r2, r8
 8000676:	2320      	movs	r3, #32
 8000678:	2100      	movs	r1, #0
 800067a:	1a9b      	subs	r3, r3, r2
 800067c:	2200      	movs	r2, #0
 800067e:	9100      	str	r1, [sp, #0]
 8000680:	9201      	str	r2, [sp, #4]
 8000682:	2201      	movs	r2, #1
 8000684:	40da      	lsrs	r2, r3
 8000686:	9201      	str	r2, [sp, #4]
 8000688:	e785      	b.n	8000596 <__udivmoddi4+0x6e>
 800068a:	4642      	mov	r2, r8
 800068c:	2320      	movs	r3, #32
 800068e:	1a9b      	subs	r3, r3, r2
 8000690:	002a      	movs	r2, r5
 8000692:	4646      	mov	r6, r8
 8000694:	409a      	lsls	r2, r3
 8000696:	0023      	movs	r3, r4
 8000698:	40f3      	lsrs	r3, r6
 800069a:	4644      	mov	r4, r8
 800069c:	4313      	orrs	r3, r2
 800069e:	002a      	movs	r2, r5
 80006a0:	40e2      	lsrs	r2, r4
 80006a2:	001c      	movs	r4, r3
 80006a4:	465b      	mov	r3, fp
 80006a6:	0015      	movs	r5, r2
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	dad4      	bge.n	8000656 <__udivmoddi4+0x12e>
 80006ac:	4642      	mov	r2, r8
 80006ae:	002f      	movs	r7, r5
 80006b0:	2320      	movs	r3, #32
 80006b2:	0026      	movs	r6, r4
 80006b4:	4097      	lsls	r7, r2
 80006b6:	1a9b      	subs	r3, r3, r2
 80006b8:	40de      	lsrs	r6, r3
 80006ba:	003b      	movs	r3, r7
 80006bc:	4333      	orrs	r3, r6
 80006be:	e7cd      	b.n	800065c <__udivmoddi4+0x134>

080006c0 <__aeabi_dadd>:
 80006c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006c2:	4657      	mov	r7, sl
 80006c4:	464e      	mov	r6, r9
 80006c6:	4645      	mov	r5, r8
 80006c8:	46de      	mov	lr, fp
 80006ca:	b5e0      	push	{r5, r6, r7, lr}
 80006cc:	b083      	sub	sp, #12
 80006ce:	9000      	str	r0, [sp, #0]
 80006d0:	9101      	str	r1, [sp, #4]
 80006d2:	030c      	lsls	r4, r1, #12
 80006d4:	004f      	lsls	r7, r1, #1
 80006d6:	0fce      	lsrs	r6, r1, #31
 80006d8:	0a61      	lsrs	r1, r4, #9
 80006da:	9c00      	ldr	r4, [sp, #0]
 80006dc:	031d      	lsls	r5, r3, #12
 80006de:	0f64      	lsrs	r4, r4, #29
 80006e0:	430c      	orrs	r4, r1
 80006e2:	9900      	ldr	r1, [sp, #0]
 80006e4:	9200      	str	r2, [sp, #0]
 80006e6:	9301      	str	r3, [sp, #4]
 80006e8:	00c8      	lsls	r0, r1, #3
 80006ea:	0059      	lsls	r1, r3, #1
 80006ec:	0d4b      	lsrs	r3, r1, #21
 80006ee:	4699      	mov	r9, r3
 80006f0:	9a00      	ldr	r2, [sp, #0]
 80006f2:	9b01      	ldr	r3, [sp, #4]
 80006f4:	0a6d      	lsrs	r5, r5, #9
 80006f6:	0fd9      	lsrs	r1, r3, #31
 80006f8:	0f53      	lsrs	r3, r2, #29
 80006fa:	432b      	orrs	r3, r5
 80006fc:	469a      	mov	sl, r3
 80006fe:	9b00      	ldr	r3, [sp, #0]
 8000700:	0d7f      	lsrs	r7, r7, #21
 8000702:	00da      	lsls	r2, r3, #3
 8000704:	4694      	mov	ip, r2
 8000706:	464a      	mov	r2, r9
 8000708:	46b0      	mov	r8, r6
 800070a:	1aba      	subs	r2, r7, r2
 800070c:	428e      	cmp	r6, r1
 800070e:	d100      	bne.n	8000712 <__aeabi_dadd+0x52>
 8000710:	e0b0      	b.n	8000874 <__aeabi_dadd+0x1b4>
 8000712:	2a00      	cmp	r2, #0
 8000714:	dc00      	bgt.n	8000718 <__aeabi_dadd+0x58>
 8000716:	e078      	b.n	800080a <__aeabi_dadd+0x14a>
 8000718:	4649      	mov	r1, r9
 800071a:	2900      	cmp	r1, #0
 800071c:	d100      	bne.n	8000720 <__aeabi_dadd+0x60>
 800071e:	e0e9      	b.n	80008f4 <__aeabi_dadd+0x234>
 8000720:	49c9      	ldr	r1, [pc, #804]	@ (8000a48 <__aeabi_dadd+0x388>)
 8000722:	428f      	cmp	r7, r1
 8000724:	d100      	bne.n	8000728 <__aeabi_dadd+0x68>
 8000726:	e195      	b.n	8000a54 <__aeabi_dadd+0x394>
 8000728:	2501      	movs	r5, #1
 800072a:	2a38      	cmp	r2, #56	@ 0x38
 800072c:	dc16      	bgt.n	800075c <__aeabi_dadd+0x9c>
 800072e:	2180      	movs	r1, #128	@ 0x80
 8000730:	4653      	mov	r3, sl
 8000732:	0409      	lsls	r1, r1, #16
 8000734:	430b      	orrs	r3, r1
 8000736:	469a      	mov	sl, r3
 8000738:	2a1f      	cmp	r2, #31
 800073a:	dd00      	ble.n	800073e <__aeabi_dadd+0x7e>
 800073c:	e1e7      	b.n	8000b0e <__aeabi_dadd+0x44e>
 800073e:	2120      	movs	r1, #32
 8000740:	4655      	mov	r5, sl
 8000742:	1a8b      	subs	r3, r1, r2
 8000744:	4661      	mov	r1, ip
 8000746:	409d      	lsls	r5, r3
 8000748:	40d1      	lsrs	r1, r2
 800074a:	430d      	orrs	r5, r1
 800074c:	4661      	mov	r1, ip
 800074e:	4099      	lsls	r1, r3
 8000750:	1e4b      	subs	r3, r1, #1
 8000752:	4199      	sbcs	r1, r3
 8000754:	4653      	mov	r3, sl
 8000756:	40d3      	lsrs	r3, r2
 8000758:	430d      	orrs	r5, r1
 800075a:	1ae4      	subs	r4, r4, r3
 800075c:	1b45      	subs	r5, r0, r5
 800075e:	42a8      	cmp	r0, r5
 8000760:	4180      	sbcs	r0, r0
 8000762:	4240      	negs	r0, r0
 8000764:	1a24      	subs	r4, r4, r0
 8000766:	0223      	lsls	r3, r4, #8
 8000768:	d400      	bmi.n	800076c <__aeabi_dadd+0xac>
 800076a:	e10f      	b.n	800098c <__aeabi_dadd+0x2cc>
 800076c:	0264      	lsls	r4, r4, #9
 800076e:	0a64      	lsrs	r4, r4, #9
 8000770:	2c00      	cmp	r4, #0
 8000772:	d100      	bne.n	8000776 <__aeabi_dadd+0xb6>
 8000774:	e139      	b.n	80009ea <__aeabi_dadd+0x32a>
 8000776:	0020      	movs	r0, r4
 8000778:	f7ff fe7a 	bl	8000470 <__clzsi2>
 800077c:	0003      	movs	r3, r0
 800077e:	3b08      	subs	r3, #8
 8000780:	2120      	movs	r1, #32
 8000782:	0028      	movs	r0, r5
 8000784:	1aca      	subs	r2, r1, r3
 8000786:	40d0      	lsrs	r0, r2
 8000788:	409c      	lsls	r4, r3
 800078a:	0002      	movs	r2, r0
 800078c:	409d      	lsls	r5, r3
 800078e:	4322      	orrs	r2, r4
 8000790:	429f      	cmp	r7, r3
 8000792:	dd00      	ble.n	8000796 <__aeabi_dadd+0xd6>
 8000794:	e173      	b.n	8000a7e <__aeabi_dadd+0x3be>
 8000796:	1bd8      	subs	r0, r3, r7
 8000798:	3001      	adds	r0, #1
 800079a:	1a09      	subs	r1, r1, r0
 800079c:	002c      	movs	r4, r5
 800079e:	408d      	lsls	r5, r1
 80007a0:	40c4      	lsrs	r4, r0
 80007a2:	1e6b      	subs	r3, r5, #1
 80007a4:	419d      	sbcs	r5, r3
 80007a6:	0013      	movs	r3, r2
 80007a8:	40c2      	lsrs	r2, r0
 80007aa:	408b      	lsls	r3, r1
 80007ac:	4325      	orrs	r5, r4
 80007ae:	2700      	movs	r7, #0
 80007b0:	0014      	movs	r4, r2
 80007b2:	431d      	orrs	r5, r3
 80007b4:	076b      	lsls	r3, r5, #29
 80007b6:	d009      	beq.n	80007cc <__aeabi_dadd+0x10c>
 80007b8:	230f      	movs	r3, #15
 80007ba:	402b      	ands	r3, r5
 80007bc:	2b04      	cmp	r3, #4
 80007be:	d005      	beq.n	80007cc <__aeabi_dadd+0x10c>
 80007c0:	1d2b      	adds	r3, r5, #4
 80007c2:	42ab      	cmp	r3, r5
 80007c4:	41ad      	sbcs	r5, r5
 80007c6:	426d      	negs	r5, r5
 80007c8:	1964      	adds	r4, r4, r5
 80007ca:	001d      	movs	r5, r3
 80007cc:	0223      	lsls	r3, r4, #8
 80007ce:	d400      	bmi.n	80007d2 <__aeabi_dadd+0x112>
 80007d0:	e12d      	b.n	8000a2e <__aeabi_dadd+0x36e>
 80007d2:	4a9d      	ldr	r2, [pc, #628]	@ (8000a48 <__aeabi_dadd+0x388>)
 80007d4:	3701      	adds	r7, #1
 80007d6:	4297      	cmp	r7, r2
 80007d8:	d100      	bne.n	80007dc <__aeabi_dadd+0x11c>
 80007da:	e0d3      	b.n	8000984 <__aeabi_dadd+0x2c4>
 80007dc:	4646      	mov	r6, r8
 80007de:	499b      	ldr	r1, [pc, #620]	@ (8000a4c <__aeabi_dadd+0x38c>)
 80007e0:	08ed      	lsrs	r5, r5, #3
 80007e2:	4021      	ands	r1, r4
 80007e4:	074a      	lsls	r2, r1, #29
 80007e6:	432a      	orrs	r2, r5
 80007e8:	057c      	lsls	r4, r7, #21
 80007ea:	024d      	lsls	r5, r1, #9
 80007ec:	0b2d      	lsrs	r5, r5, #12
 80007ee:	0d64      	lsrs	r4, r4, #21
 80007f0:	0524      	lsls	r4, r4, #20
 80007f2:	432c      	orrs	r4, r5
 80007f4:	07f6      	lsls	r6, r6, #31
 80007f6:	4334      	orrs	r4, r6
 80007f8:	0010      	movs	r0, r2
 80007fa:	0021      	movs	r1, r4
 80007fc:	b003      	add	sp, #12
 80007fe:	bcf0      	pop	{r4, r5, r6, r7}
 8000800:	46bb      	mov	fp, r7
 8000802:	46b2      	mov	sl, r6
 8000804:	46a9      	mov	r9, r5
 8000806:	46a0      	mov	r8, r4
 8000808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800080a:	2a00      	cmp	r2, #0
 800080c:	d100      	bne.n	8000810 <__aeabi_dadd+0x150>
 800080e:	e084      	b.n	800091a <__aeabi_dadd+0x25a>
 8000810:	464a      	mov	r2, r9
 8000812:	1bd2      	subs	r2, r2, r7
 8000814:	2f00      	cmp	r7, #0
 8000816:	d000      	beq.n	800081a <__aeabi_dadd+0x15a>
 8000818:	e16d      	b.n	8000af6 <__aeabi_dadd+0x436>
 800081a:	0025      	movs	r5, r4
 800081c:	4305      	orrs	r5, r0
 800081e:	d100      	bne.n	8000822 <__aeabi_dadd+0x162>
 8000820:	e127      	b.n	8000a72 <__aeabi_dadd+0x3b2>
 8000822:	1e56      	subs	r6, r2, #1
 8000824:	2a01      	cmp	r2, #1
 8000826:	d100      	bne.n	800082a <__aeabi_dadd+0x16a>
 8000828:	e23b      	b.n	8000ca2 <__aeabi_dadd+0x5e2>
 800082a:	4d87      	ldr	r5, [pc, #540]	@ (8000a48 <__aeabi_dadd+0x388>)
 800082c:	42aa      	cmp	r2, r5
 800082e:	d100      	bne.n	8000832 <__aeabi_dadd+0x172>
 8000830:	e26a      	b.n	8000d08 <__aeabi_dadd+0x648>
 8000832:	2501      	movs	r5, #1
 8000834:	2e38      	cmp	r6, #56	@ 0x38
 8000836:	dc12      	bgt.n	800085e <__aeabi_dadd+0x19e>
 8000838:	0032      	movs	r2, r6
 800083a:	2a1f      	cmp	r2, #31
 800083c:	dd00      	ble.n	8000840 <__aeabi_dadd+0x180>
 800083e:	e1f8      	b.n	8000c32 <__aeabi_dadd+0x572>
 8000840:	2620      	movs	r6, #32
 8000842:	0025      	movs	r5, r4
 8000844:	1ab6      	subs	r6, r6, r2
 8000846:	0007      	movs	r7, r0
 8000848:	4653      	mov	r3, sl
 800084a:	40b0      	lsls	r0, r6
 800084c:	40d4      	lsrs	r4, r2
 800084e:	40b5      	lsls	r5, r6
 8000850:	40d7      	lsrs	r7, r2
 8000852:	1e46      	subs	r6, r0, #1
 8000854:	41b0      	sbcs	r0, r6
 8000856:	1b1b      	subs	r3, r3, r4
 8000858:	469a      	mov	sl, r3
 800085a:	433d      	orrs	r5, r7
 800085c:	4305      	orrs	r5, r0
 800085e:	4662      	mov	r2, ip
 8000860:	1b55      	subs	r5, r2, r5
 8000862:	45ac      	cmp	ip, r5
 8000864:	4192      	sbcs	r2, r2
 8000866:	4653      	mov	r3, sl
 8000868:	4252      	negs	r2, r2
 800086a:	000e      	movs	r6, r1
 800086c:	464f      	mov	r7, r9
 800086e:	4688      	mov	r8, r1
 8000870:	1a9c      	subs	r4, r3, r2
 8000872:	e778      	b.n	8000766 <__aeabi_dadd+0xa6>
 8000874:	2a00      	cmp	r2, #0
 8000876:	dc00      	bgt.n	800087a <__aeabi_dadd+0x1ba>
 8000878:	e08e      	b.n	8000998 <__aeabi_dadd+0x2d8>
 800087a:	4649      	mov	r1, r9
 800087c:	2900      	cmp	r1, #0
 800087e:	d175      	bne.n	800096c <__aeabi_dadd+0x2ac>
 8000880:	4661      	mov	r1, ip
 8000882:	4653      	mov	r3, sl
 8000884:	4319      	orrs	r1, r3
 8000886:	d100      	bne.n	800088a <__aeabi_dadd+0x1ca>
 8000888:	e0f6      	b.n	8000a78 <__aeabi_dadd+0x3b8>
 800088a:	1e51      	subs	r1, r2, #1
 800088c:	2a01      	cmp	r2, #1
 800088e:	d100      	bne.n	8000892 <__aeabi_dadd+0x1d2>
 8000890:	e191      	b.n	8000bb6 <__aeabi_dadd+0x4f6>
 8000892:	4d6d      	ldr	r5, [pc, #436]	@ (8000a48 <__aeabi_dadd+0x388>)
 8000894:	42aa      	cmp	r2, r5
 8000896:	d100      	bne.n	800089a <__aeabi_dadd+0x1da>
 8000898:	e0dc      	b.n	8000a54 <__aeabi_dadd+0x394>
 800089a:	2501      	movs	r5, #1
 800089c:	2938      	cmp	r1, #56	@ 0x38
 800089e:	dc14      	bgt.n	80008ca <__aeabi_dadd+0x20a>
 80008a0:	000a      	movs	r2, r1
 80008a2:	2a1f      	cmp	r2, #31
 80008a4:	dd00      	ble.n	80008a8 <__aeabi_dadd+0x1e8>
 80008a6:	e1a2      	b.n	8000bee <__aeabi_dadd+0x52e>
 80008a8:	2120      	movs	r1, #32
 80008aa:	4653      	mov	r3, sl
 80008ac:	1a89      	subs	r1, r1, r2
 80008ae:	408b      	lsls	r3, r1
 80008b0:	001d      	movs	r5, r3
 80008b2:	4663      	mov	r3, ip
 80008b4:	40d3      	lsrs	r3, r2
 80008b6:	431d      	orrs	r5, r3
 80008b8:	4663      	mov	r3, ip
 80008ba:	408b      	lsls	r3, r1
 80008bc:	0019      	movs	r1, r3
 80008be:	1e4b      	subs	r3, r1, #1
 80008c0:	4199      	sbcs	r1, r3
 80008c2:	4653      	mov	r3, sl
 80008c4:	40d3      	lsrs	r3, r2
 80008c6:	430d      	orrs	r5, r1
 80008c8:	18e4      	adds	r4, r4, r3
 80008ca:	182d      	adds	r5, r5, r0
 80008cc:	4285      	cmp	r5, r0
 80008ce:	4180      	sbcs	r0, r0
 80008d0:	4240      	negs	r0, r0
 80008d2:	1824      	adds	r4, r4, r0
 80008d4:	0223      	lsls	r3, r4, #8
 80008d6:	d559      	bpl.n	800098c <__aeabi_dadd+0x2cc>
 80008d8:	4b5b      	ldr	r3, [pc, #364]	@ (8000a48 <__aeabi_dadd+0x388>)
 80008da:	3701      	adds	r7, #1
 80008dc:	429f      	cmp	r7, r3
 80008de:	d051      	beq.n	8000984 <__aeabi_dadd+0x2c4>
 80008e0:	2101      	movs	r1, #1
 80008e2:	4b5a      	ldr	r3, [pc, #360]	@ (8000a4c <__aeabi_dadd+0x38c>)
 80008e4:	086a      	lsrs	r2, r5, #1
 80008e6:	401c      	ands	r4, r3
 80008e8:	4029      	ands	r1, r5
 80008ea:	430a      	orrs	r2, r1
 80008ec:	07e5      	lsls	r5, r4, #31
 80008ee:	4315      	orrs	r5, r2
 80008f0:	0864      	lsrs	r4, r4, #1
 80008f2:	e75f      	b.n	80007b4 <__aeabi_dadd+0xf4>
 80008f4:	4661      	mov	r1, ip
 80008f6:	4653      	mov	r3, sl
 80008f8:	4319      	orrs	r1, r3
 80008fa:	d100      	bne.n	80008fe <__aeabi_dadd+0x23e>
 80008fc:	e0bc      	b.n	8000a78 <__aeabi_dadd+0x3b8>
 80008fe:	1e51      	subs	r1, r2, #1
 8000900:	2a01      	cmp	r2, #1
 8000902:	d100      	bne.n	8000906 <__aeabi_dadd+0x246>
 8000904:	e164      	b.n	8000bd0 <__aeabi_dadd+0x510>
 8000906:	4d50      	ldr	r5, [pc, #320]	@ (8000a48 <__aeabi_dadd+0x388>)
 8000908:	42aa      	cmp	r2, r5
 800090a:	d100      	bne.n	800090e <__aeabi_dadd+0x24e>
 800090c:	e16a      	b.n	8000be4 <__aeabi_dadd+0x524>
 800090e:	2501      	movs	r5, #1
 8000910:	2938      	cmp	r1, #56	@ 0x38
 8000912:	dd00      	ble.n	8000916 <__aeabi_dadd+0x256>
 8000914:	e722      	b.n	800075c <__aeabi_dadd+0x9c>
 8000916:	000a      	movs	r2, r1
 8000918:	e70e      	b.n	8000738 <__aeabi_dadd+0x78>
 800091a:	4a4d      	ldr	r2, [pc, #308]	@ (8000a50 <__aeabi_dadd+0x390>)
 800091c:	1c7d      	adds	r5, r7, #1
 800091e:	4215      	tst	r5, r2
 8000920:	d000      	beq.n	8000924 <__aeabi_dadd+0x264>
 8000922:	e0d0      	b.n	8000ac6 <__aeabi_dadd+0x406>
 8000924:	0025      	movs	r5, r4
 8000926:	4662      	mov	r2, ip
 8000928:	4653      	mov	r3, sl
 800092a:	4305      	orrs	r5, r0
 800092c:	431a      	orrs	r2, r3
 800092e:	2f00      	cmp	r7, #0
 8000930:	d000      	beq.n	8000934 <__aeabi_dadd+0x274>
 8000932:	e137      	b.n	8000ba4 <__aeabi_dadd+0x4e4>
 8000934:	2d00      	cmp	r5, #0
 8000936:	d100      	bne.n	800093a <__aeabi_dadd+0x27a>
 8000938:	e1a8      	b.n	8000c8c <__aeabi_dadd+0x5cc>
 800093a:	2a00      	cmp	r2, #0
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x280>
 800093e:	e16a      	b.n	8000c16 <__aeabi_dadd+0x556>
 8000940:	4663      	mov	r3, ip
 8000942:	1ac5      	subs	r5, r0, r3
 8000944:	4653      	mov	r3, sl
 8000946:	1ae2      	subs	r2, r4, r3
 8000948:	42a8      	cmp	r0, r5
 800094a:	419b      	sbcs	r3, r3
 800094c:	425b      	negs	r3, r3
 800094e:	1ad3      	subs	r3, r2, r3
 8000950:	021a      	lsls	r2, r3, #8
 8000952:	d400      	bmi.n	8000956 <__aeabi_dadd+0x296>
 8000954:	e203      	b.n	8000d5e <__aeabi_dadd+0x69e>
 8000956:	4663      	mov	r3, ip
 8000958:	1a1d      	subs	r5, r3, r0
 800095a:	45ac      	cmp	ip, r5
 800095c:	4192      	sbcs	r2, r2
 800095e:	4653      	mov	r3, sl
 8000960:	4252      	negs	r2, r2
 8000962:	1b1c      	subs	r4, r3, r4
 8000964:	000e      	movs	r6, r1
 8000966:	4688      	mov	r8, r1
 8000968:	1aa4      	subs	r4, r4, r2
 800096a:	e723      	b.n	80007b4 <__aeabi_dadd+0xf4>
 800096c:	4936      	ldr	r1, [pc, #216]	@ (8000a48 <__aeabi_dadd+0x388>)
 800096e:	428f      	cmp	r7, r1
 8000970:	d070      	beq.n	8000a54 <__aeabi_dadd+0x394>
 8000972:	2501      	movs	r5, #1
 8000974:	2a38      	cmp	r2, #56	@ 0x38
 8000976:	dca8      	bgt.n	80008ca <__aeabi_dadd+0x20a>
 8000978:	2180      	movs	r1, #128	@ 0x80
 800097a:	4653      	mov	r3, sl
 800097c:	0409      	lsls	r1, r1, #16
 800097e:	430b      	orrs	r3, r1
 8000980:	469a      	mov	sl, r3
 8000982:	e78e      	b.n	80008a2 <__aeabi_dadd+0x1e2>
 8000984:	003c      	movs	r4, r7
 8000986:	2500      	movs	r5, #0
 8000988:	2200      	movs	r2, #0
 800098a:	e731      	b.n	80007f0 <__aeabi_dadd+0x130>
 800098c:	2307      	movs	r3, #7
 800098e:	402b      	ands	r3, r5
 8000990:	2b00      	cmp	r3, #0
 8000992:	d000      	beq.n	8000996 <__aeabi_dadd+0x2d6>
 8000994:	e710      	b.n	80007b8 <__aeabi_dadd+0xf8>
 8000996:	e093      	b.n	8000ac0 <__aeabi_dadd+0x400>
 8000998:	2a00      	cmp	r2, #0
 800099a:	d074      	beq.n	8000a86 <__aeabi_dadd+0x3c6>
 800099c:	464a      	mov	r2, r9
 800099e:	1bd2      	subs	r2, r2, r7
 80009a0:	2f00      	cmp	r7, #0
 80009a2:	d100      	bne.n	80009a6 <__aeabi_dadd+0x2e6>
 80009a4:	e0c7      	b.n	8000b36 <__aeabi_dadd+0x476>
 80009a6:	4928      	ldr	r1, [pc, #160]	@ (8000a48 <__aeabi_dadd+0x388>)
 80009a8:	4589      	cmp	r9, r1
 80009aa:	d100      	bne.n	80009ae <__aeabi_dadd+0x2ee>
 80009ac:	e185      	b.n	8000cba <__aeabi_dadd+0x5fa>
 80009ae:	2501      	movs	r5, #1
 80009b0:	2a38      	cmp	r2, #56	@ 0x38
 80009b2:	dc12      	bgt.n	80009da <__aeabi_dadd+0x31a>
 80009b4:	2180      	movs	r1, #128	@ 0x80
 80009b6:	0409      	lsls	r1, r1, #16
 80009b8:	430c      	orrs	r4, r1
 80009ba:	2a1f      	cmp	r2, #31
 80009bc:	dd00      	ble.n	80009c0 <__aeabi_dadd+0x300>
 80009be:	e1ab      	b.n	8000d18 <__aeabi_dadd+0x658>
 80009c0:	2120      	movs	r1, #32
 80009c2:	0025      	movs	r5, r4
 80009c4:	1a89      	subs	r1, r1, r2
 80009c6:	0007      	movs	r7, r0
 80009c8:	4088      	lsls	r0, r1
 80009ca:	408d      	lsls	r5, r1
 80009cc:	40d7      	lsrs	r7, r2
 80009ce:	1e41      	subs	r1, r0, #1
 80009d0:	4188      	sbcs	r0, r1
 80009d2:	40d4      	lsrs	r4, r2
 80009d4:	433d      	orrs	r5, r7
 80009d6:	4305      	orrs	r5, r0
 80009d8:	44a2      	add	sl, r4
 80009da:	4465      	add	r5, ip
 80009dc:	4565      	cmp	r5, ip
 80009de:	4192      	sbcs	r2, r2
 80009e0:	4252      	negs	r2, r2
 80009e2:	4452      	add	r2, sl
 80009e4:	0014      	movs	r4, r2
 80009e6:	464f      	mov	r7, r9
 80009e8:	e774      	b.n	80008d4 <__aeabi_dadd+0x214>
 80009ea:	0028      	movs	r0, r5
 80009ec:	f7ff fd40 	bl	8000470 <__clzsi2>
 80009f0:	0003      	movs	r3, r0
 80009f2:	3318      	adds	r3, #24
 80009f4:	2b1f      	cmp	r3, #31
 80009f6:	dc00      	bgt.n	80009fa <__aeabi_dadd+0x33a>
 80009f8:	e6c2      	b.n	8000780 <__aeabi_dadd+0xc0>
 80009fa:	002a      	movs	r2, r5
 80009fc:	3808      	subs	r0, #8
 80009fe:	4082      	lsls	r2, r0
 8000a00:	429f      	cmp	r7, r3
 8000a02:	dd00      	ble.n	8000a06 <__aeabi_dadd+0x346>
 8000a04:	e0a9      	b.n	8000b5a <__aeabi_dadd+0x49a>
 8000a06:	1bdb      	subs	r3, r3, r7
 8000a08:	1c58      	adds	r0, r3, #1
 8000a0a:	281f      	cmp	r0, #31
 8000a0c:	dc00      	bgt.n	8000a10 <__aeabi_dadd+0x350>
 8000a0e:	e1ac      	b.n	8000d6a <__aeabi_dadd+0x6aa>
 8000a10:	0015      	movs	r5, r2
 8000a12:	3b1f      	subs	r3, #31
 8000a14:	40dd      	lsrs	r5, r3
 8000a16:	2820      	cmp	r0, #32
 8000a18:	d005      	beq.n	8000a26 <__aeabi_dadd+0x366>
 8000a1a:	2340      	movs	r3, #64	@ 0x40
 8000a1c:	1a1b      	subs	r3, r3, r0
 8000a1e:	409a      	lsls	r2, r3
 8000a20:	1e53      	subs	r3, r2, #1
 8000a22:	419a      	sbcs	r2, r3
 8000a24:	4315      	orrs	r5, r2
 8000a26:	2307      	movs	r3, #7
 8000a28:	2700      	movs	r7, #0
 8000a2a:	402b      	ands	r3, r5
 8000a2c:	e7b0      	b.n	8000990 <__aeabi_dadd+0x2d0>
 8000a2e:	08ed      	lsrs	r5, r5, #3
 8000a30:	4b05      	ldr	r3, [pc, #20]	@ (8000a48 <__aeabi_dadd+0x388>)
 8000a32:	0762      	lsls	r2, r4, #29
 8000a34:	432a      	orrs	r2, r5
 8000a36:	08e4      	lsrs	r4, r4, #3
 8000a38:	429f      	cmp	r7, r3
 8000a3a:	d00f      	beq.n	8000a5c <__aeabi_dadd+0x39c>
 8000a3c:	0324      	lsls	r4, r4, #12
 8000a3e:	0b25      	lsrs	r5, r4, #12
 8000a40:	057c      	lsls	r4, r7, #21
 8000a42:	0d64      	lsrs	r4, r4, #21
 8000a44:	e6d4      	b.n	80007f0 <__aeabi_dadd+0x130>
 8000a46:	46c0      	nop			@ (mov r8, r8)
 8000a48:	000007ff 	.word	0x000007ff
 8000a4c:	ff7fffff 	.word	0xff7fffff
 8000a50:	000007fe 	.word	0x000007fe
 8000a54:	08c0      	lsrs	r0, r0, #3
 8000a56:	0762      	lsls	r2, r4, #29
 8000a58:	4302      	orrs	r2, r0
 8000a5a:	08e4      	lsrs	r4, r4, #3
 8000a5c:	0013      	movs	r3, r2
 8000a5e:	4323      	orrs	r3, r4
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x3a4>
 8000a62:	e186      	b.n	8000d72 <__aeabi_dadd+0x6b2>
 8000a64:	2580      	movs	r5, #128	@ 0x80
 8000a66:	032d      	lsls	r5, r5, #12
 8000a68:	4325      	orrs	r5, r4
 8000a6a:	032d      	lsls	r5, r5, #12
 8000a6c:	4cc3      	ldr	r4, [pc, #780]	@ (8000d7c <__aeabi_dadd+0x6bc>)
 8000a6e:	0b2d      	lsrs	r5, r5, #12
 8000a70:	e6be      	b.n	80007f0 <__aeabi_dadd+0x130>
 8000a72:	4660      	mov	r0, ip
 8000a74:	4654      	mov	r4, sl
 8000a76:	000e      	movs	r6, r1
 8000a78:	0017      	movs	r7, r2
 8000a7a:	08c5      	lsrs	r5, r0, #3
 8000a7c:	e7d8      	b.n	8000a30 <__aeabi_dadd+0x370>
 8000a7e:	4cc0      	ldr	r4, [pc, #768]	@ (8000d80 <__aeabi_dadd+0x6c0>)
 8000a80:	1aff      	subs	r7, r7, r3
 8000a82:	4014      	ands	r4, r2
 8000a84:	e696      	b.n	80007b4 <__aeabi_dadd+0xf4>
 8000a86:	4abf      	ldr	r2, [pc, #764]	@ (8000d84 <__aeabi_dadd+0x6c4>)
 8000a88:	1c79      	adds	r1, r7, #1
 8000a8a:	4211      	tst	r1, r2
 8000a8c:	d16b      	bne.n	8000b66 <__aeabi_dadd+0x4a6>
 8000a8e:	0022      	movs	r2, r4
 8000a90:	4302      	orrs	r2, r0
 8000a92:	2f00      	cmp	r7, #0
 8000a94:	d000      	beq.n	8000a98 <__aeabi_dadd+0x3d8>
 8000a96:	e0db      	b.n	8000c50 <__aeabi_dadd+0x590>
 8000a98:	2a00      	cmp	r2, #0
 8000a9a:	d100      	bne.n	8000a9e <__aeabi_dadd+0x3de>
 8000a9c:	e12d      	b.n	8000cfa <__aeabi_dadd+0x63a>
 8000a9e:	4662      	mov	r2, ip
 8000aa0:	4653      	mov	r3, sl
 8000aa2:	431a      	orrs	r2, r3
 8000aa4:	d100      	bne.n	8000aa8 <__aeabi_dadd+0x3e8>
 8000aa6:	e0b6      	b.n	8000c16 <__aeabi_dadd+0x556>
 8000aa8:	4663      	mov	r3, ip
 8000aaa:	18c5      	adds	r5, r0, r3
 8000aac:	4285      	cmp	r5, r0
 8000aae:	4180      	sbcs	r0, r0
 8000ab0:	4454      	add	r4, sl
 8000ab2:	4240      	negs	r0, r0
 8000ab4:	1824      	adds	r4, r4, r0
 8000ab6:	0223      	lsls	r3, r4, #8
 8000ab8:	d502      	bpl.n	8000ac0 <__aeabi_dadd+0x400>
 8000aba:	000f      	movs	r7, r1
 8000abc:	4bb0      	ldr	r3, [pc, #704]	@ (8000d80 <__aeabi_dadd+0x6c0>)
 8000abe:	401c      	ands	r4, r3
 8000ac0:	003a      	movs	r2, r7
 8000ac2:	0028      	movs	r0, r5
 8000ac4:	e7d8      	b.n	8000a78 <__aeabi_dadd+0x3b8>
 8000ac6:	4662      	mov	r2, ip
 8000ac8:	1a85      	subs	r5, r0, r2
 8000aca:	42a8      	cmp	r0, r5
 8000acc:	4192      	sbcs	r2, r2
 8000ace:	4653      	mov	r3, sl
 8000ad0:	4252      	negs	r2, r2
 8000ad2:	4691      	mov	r9, r2
 8000ad4:	1ae3      	subs	r3, r4, r3
 8000ad6:	001a      	movs	r2, r3
 8000ad8:	464b      	mov	r3, r9
 8000ada:	1ad2      	subs	r2, r2, r3
 8000adc:	0013      	movs	r3, r2
 8000ade:	4691      	mov	r9, r2
 8000ae0:	021a      	lsls	r2, r3, #8
 8000ae2:	d454      	bmi.n	8000b8e <__aeabi_dadd+0x4ce>
 8000ae4:	464a      	mov	r2, r9
 8000ae6:	464c      	mov	r4, r9
 8000ae8:	432a      	orrs	r2, r5
 8000aea:	d000      	beq.n	8000aee <__aeabi_dadd+0x42e>
 8000aec:	e640      	b.n	8000770 <__aeabi_dadd+0xb0>
 8000aee:	2600      	movs	r6, #0
 8000af0:	2400      	movs	r4, #0
 8000af2:	2500      	movs	r5, #0
 8000af4:	e67c      	b.n	80007f0 <__aeabi_dadd+0x130>
 8000af6:	4da1      	ldr	r5, [pc, #644]	@ (8000d7c <__aeabi_dadd+0x6bc>)
 8000af8:	45a9      	cmp	r9, r5
 8000afa:	d100      	bne.n	8000afe <__aeabi_dadd+0x43e>
 8000afc:	e090      	b.n	8000c20 <__aeabi_dadd+0x560>
 8000afe:	2501      	movs	r5, #1
 8000b00:	2a38      	cmp	r2, #56	@ 0x38
 8000b02:	dd00      	ble.n	8000b06 <__aeabi_dadd+0x446>
 8000b04:	e6ab      	b.n	800085e <__aeabi_dadd+0x19e>
 8000b06:	2580      	movs	r5, #128	@ 0x80
 8000b08:	042d      	lsls	r5, r5, #16
 8000b0a:	432c      	orrs	r4, r5
 8000b0c:	e695      	b.n	800083a <__aeabi_dadd+0x17a>
 8000b0e:	0011      	movs	r1, r2
 8000b10:	4655      	mov	r5, sl
 8000b12:	3920      	subs	r1, #32
 8000b14:	40cd      	lsrs	r5, r1
 8000b16:	46a9      	mov	r9, r5
 8000b18:	2a20      	cmp	r2, #32
 8000b1a:	d006      	beq.n	8000b2a <__aeabi_dadd+0x46a>
 8000b1c:	2140      	movs	r1, #64	@ 0x40
 8000b1e:	4653      	mov	r3, sl
 8000b20:	1a8a      	subs	r2, r1, r2
 8000b22:	4093      	lsls	r3, r2
 8000b24:	4662      	mov	r2, ip
 8000b26:	431a      	orrs	r2, r3
 8000b28:	4694      	mov	ip, r2
 8000b2a:	4665      	mov	r5, ip
 8000b2c:	1e6b      	subs	r3, r5, #1
 8000b2e:	419d      	sbcs	r5, r3
 8000b30:	464b      	mov	r3, r9
 8000b32:	431d      	orrs	r5, r3
 8000b34:	e612      	b.n	800075c <__aeabi_dadd+0x9c>
 8000b36:	0021      	movs	r1, r4
 8000b38:	4301      	orrs	r1, r0
 8000b3a:	d100      	bne.n	8000b3e <__aeabi_dadd+0x47e>
 8000b3c:	e0c4      	b.n	8000cc8 <__aeabi_dadd+0x608>
 8000b3e:	1e51      	subs	r1, r2, #1
 8000b40:	2a01      	cmp	r2, #1
 8000b42:	d100      	bne.n	8000b46 <__aeabi_dadd+0x486>
 8000b44:	e0fb      	b.n	8000d3e <__aeabi_dadd+0x67e>
 8000b46:	4d8d      	ldr	r5, [pc, #564]	@ (8000d7c <__aeabi_dadd+0x6bc>)
 8000b48:	42aa      	cmp	r2, r5
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_dadd+0x48e>
 8000b4c:	e0b5      	b.n	8000cba <__aeabi_dadd+0x5fa>
 8000b4e:	2501      	movs	r5, #1
 8000b50:	2938      	cmp	r1, #56	@ 0x38
 8000b52:	dd00      	ble.n	8000b56 <__aeabi_dadd+0x496>
 8000b54:	e741      	b.n	80009da <__aeabi_dadd+0x31a>
 8000b56:	000a      	movs	r2, r1
 8000b58:	e72f      	b.n	80009ba <__aeabi_dadd+0x2fa>
 8000b5a:	4c89      	ldr	r4, [pc, #548]	@ (8000d80 <__aeabi_dadd+0x6c0>)
 8000b5c:	1aff      	subs	r7, r7, r3
 8000b5e:	4014      	ands	r4, r2
 8000b60:	0762      	lsls	r2, r4, #29
 8000b62:	08e4      	lsrs	r4, r4, #3
 8000b64:	e76a      	b.n	8000a3c <__aeabi_dadd+0x37c>
 8000b66:	4a85      	ldr	r2, [pc, #532]	@ (8000d7c <__aeabi_dadd+0x6bc>)
 8000b68:	4291      	cmp	r1, r2
 8000b6a:	d100      	bne.n	8000b6e <__aeabi_dadd+0x4ae>
 8000b6c:	e0e3      	b.n	8000d36 <__aeabi_dadd+0x676>
 8000b6e:	4663      	mov	r3, ip
 8000b70:	18c2      	adds	r2, r0, r3
 8000b72:	4282      	cmp	r2, r0
 8000b74:	4180      	sbcs	r0, r0
 8000b76:	0023      	movs	r3, r4
 8000b78:	4240      	negs	r0, r0
 8000b7a:	4453      	add	r3, sl
 8000b7c:	181b      	adds	r3, r3, r0
 8000b7e:	07dd      	lsls	r5, r3, #31
 8000b80:	085c      	lsrs	r4, r3, #1
 8000b82:	2307      	movs	r3, #7
 8000b84:	0852      	lsrs	r2, r2, #1
 8000b86:	4315      	orrs	r5, r2
 8000b88:	000f      	movs	r7, r1
 8000b8a:	402b      	ands	r3, r5
 8000b8c:	e700      	b.n	8000990 <__aeabi_dadd+0x2d0>
 8000b8e:	4663      	mov	r3, ip
 8000b90:	1a1d      	subs	r5, r3, r0
 8000b92:	45ac      	cmp	ip, r5
 8000b94:	4192      	sbcs	r2, r2
 8000b96:	4653      	mov	r3, sl
 8000b98:	4252      	negs	r2, r2
 8000b9a:	1b1c      	subs	r4, r3, r4
 8000b9c:	000e      	movs	r6, r1
 8000b9e:	4688      	mov	r8, r1
 8000ba0:	1aa4      	subs	r4, r4, r2
 8000ba2:	e5e5      	b.n	8000770 <__aeabi_dadd+0xb0>
 8000ba4:	2d00      	cmp	r5, #0
 8000ba6:	d000      	beq.n	8000baa <__aeabi_dadd+0x4ea>
 8000ba8:	e091      	b.n	8000cce <__aeabi_dadd+0x60e>
 8000baa:	2a00      	cmp	r2, #0
 8000bac:	d138      	bne.n	8000c20 <__aeabi_dadd+0x560>
 8000bae:	2480      	movs	r4, #128	@ 0x80
 8000bb0:	2600      	movs	r6, #0
 8000bb2:	0324      	lsls	r4, r4, #12
 8000bb4:	e756      	b.n	8000a64 <__aeabi_dadd+0x3a4>
 8000bb6:	4663      	mov	r3, ip
 8000bb8:	18c5      	adds	r5, r0, r3
 8000bba:	4285      	cmp	r5, r0
 8000bbc:	4180      	sbcs	r0, r0
 8000bbe:	4454      	add	r4, sl
 8000bc0:	4240      	negs	r0, r0
 8000bc2:	1824      	adds	r4, r4, r0
 8000bc4:	2701      	movs	r7, #1
 8000bc6:	0223      	lsls	r3, r4, #8
 8000bc8:	d400      	bmi.n	8000bcc <__aeabi_dadd+0x50c>
 8000bca:	e6df      	b.n	800098c <__aeabi_dadd+0x2cc>
 8000bcc:	2702      	movs	r7, #2
 8000bce:	e687      	b.n	80008e0 <__aeabi_dadd+0x220>
 8000bd0:	4663      	mov	r3, ip
 8000bd2:	1ac5      	subs	r5, r0, r3
 8000bd4:	42a8      	cmp	r0, r5
 8000bd6:	4180      	sbcs	r0, r0
 8000bd8:	4653      	mov	r3, sl
 8000bda:	4240      	negs	r0, r0
 8000bdc:	1ae4      	subs	r4, r4, r3
 8000bde:	2701      	movs	r7, #1
 8000be0:	1a24      	subs	r4, r4, r0
 8000be2:	e5c0      	b.n	8000766 <__aeabi_dadd+0xa6>
 8000be4:	0762      	lsls	r2, r4, #29
 8000be6:	08c0      	lsrs	r0, r0, #3
 8000be8:	4302      	orrs	r2, r0
 8000bea:	08e4      	lsrs	r4, r4, #3
 8000bec:	e736      	b.n	8000a5c <__aeabi_dadd+0x39c>
 8000bee:	0011      	movs	r1, r2
 8000bf0:	4653      	mov	r3, sl
 8000bf2:	3920      	subs	r1, #32
 8000bf4:	40cb      	lsrs	r3, r1
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	2a20      	cmp	r2, #32
 8000bfa:	d006      	beq.n	8000c0a <__aeabi_dadd+0x54a>
 8000bfc:	2140      	movs	r1, #64	@ 0x40
 8000bfe:	4653      	mov	r3, sl
 8000c00:	1a8a      	subs	r2, r1, r2
 8000c02:	4093      	lsls	r3, r2
 8000c04:	4662      	mov	r2, ip
 8000c06:	431a      	orrs	r2, r3
 8000c08:	4694      	mov	ip, r2
 8000c0a:	4665      	mov	r5, ip
 8000c0c:	1e6b      	subs	r3, r5, #1
 8000c0e:	419d      	sbcs	r5, r3
 8000c10:	464b      	mov	r3, r9
 8000c12:	431d      	orrs	r5, r3
 8000c14:	e659      	b.n	80008ca <__aeabi_dadd+0x20a>
 8000c16:	0762      	lsls	r2, r4, #29
 8000c18:	08c0      	lsrs	r0, r0, #3
 8000c1a:	4302      	orrs	r2, r0
 8000c1c:	08e4      	lsrs	r4, r4, #3
 8000c1e:	e70d      	b.n	8000a3c <__aeabi_dadd+0x37c>
 8000c20:	4653      	mov	r3, sl
 8000c22:	075a      	lsls	r2, r3, #29
 8000c24:	4663      	mov	r3, ip
 8000c26:	08d8      	lsrs	r0, r3, #3
 8000c28:	4653      	mov	r3, sl
 8000c2a:	000e      	movs	r6, r1
 8000c2c:	4302      	orrs	r2, r0
 8000c2e:	08dc      	lsrs	r4, r3, #3
 8000c30:	e714      	b.n	8000a5c <__aeabi_dadd+0x39c>
 8000c32:	0015      	movs	r5, r2
 8000c34:	0026      	movs	r6, r4
 8000c36:	3d20      	subs	r5, #32
 8000c38:	40ee      	lsrs	r6, r5
 8000c3a:	2a20      	cmp	r2, #32
 8000c3c:	d003      	beq.n	8000c46 <__aeabi_dadd+0x586>
 8000c3e:	2540      	movs	r5, #64	@ 0x40
 8000c40:	1aaa      	subs	r2, r5, r2
 8000c42:	4094      	lsls	r4, r2
 8000c44:	4320      	orrs	r0, r4
 8000c46:	1e42      	subs	r2, r0, #1
 8000c48:	4190      	sbcs	r0, r2
 8000c4a:	0005      	movs	r5, r0
 8000c4c:	4335      	orrs	r5, r6
 8000c4e:	e606      	b.n	800085e <__aeabi_dadd+0x19e>
 8000c50:	2a00      	cmp	r2, #0
 8000c52:	d07c      	beq.n	8000d4e <__aeabi_dadd+0x68e>
 8000c54:	4662      	mov	r2, ip
 8000c56:	4653      	mov	r3, sl
 8000c58:	08c0      	lsrs	r0, r0, #3
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	d100      	bne.n	8000c60 <__aeabi_dadd+0x5a0>
 8000c5e:	e6fa      	b.n	8000a56 <__aeabi_dadd+0x396>
 8000c60:	0762      	lsls	r2, r4, #29
 8000c62:	4310      	orrs	r0, r2
 8000c64:	2280      	movs	r2, #128	@ 0x80
 8000c66:	08e4      	lsrs	r4, r4, #3
 8000c68:	0312      	lsls	r2, r2, #12
 8000c6a:	4214      	tst	r4, r2
 8000c6c:	d008      	beq.n	8000c80 <__aeabi_dadd+0x5c0>
 8000c6e:	08d9      	lsrs	r1, r3, #3
 8000c70:	4211      	tst	r1, r2
 8000c72:	d105      	bne.n	8000c80 <__aeabi_dadd+0x5c0>
 8000c74:	4663      	mov	r3, ip
 8000c76:	08d8      	lsrs	r0, r3, #3
 8000c78:	4653      	mov	r3, sl
 8000c7a:	000c      	movs	r4, r1
 8000c7c:	075b      	lsls	r3, r3, #29
 8000c7e:	4318      	orrs	r0, r3
 8000c80:	0f42      	lsrs	r2, r0, #29
 8000c82:	00c0      	lsls	r0, r0, #3
 8000c84:	08c0      	lsrs	r0, r0, #3
 8000c86:	0752      	lsls	r2, r2, #29
 8000c88:	4302      	orrs	r2, r0
 8000c8a:	e6e7      	b.n	8000a5c <__aeabi_dadd+0x39c>
 8000c8c:	2a00      	cmp	r2, #0
 8000c8e:	d100      	bne.n	8000c92 <__aeabi_dadd+0x5d2>
 8000c90:	e72d      	b.n	8000aee <__aeabi_dadd+0x42e>
 8000c92:	4663      	mov	r3, ip
 8000c94:	08d8      	lsrs	r0, r3, #3
 8000c96:	4653      	mov	r3, sl
 8000c98:	075a      	lsls	r2, r3, #29
 8000c9a:	000e      	movs	r6, r1
 8000c9c:	4302      	orrs	r2, r0
 8000c9e:	08dc      	lsrs	r4, r3, #3
 8000ca0:	e6cc      	b.n	8000a3c <__aeabi_dadd+0x37c>
 8000ca2:	4663      	mov	r3, ip
 8000ca4:	1a1d      	subs	r5, r3, r0
 8000ca6:	45ac      	cmp	ip, r5
 8000ca8:	4192      	sbcs	r2, r2
 8000caa:	4653      	mov	r3, sl
 8000cac:	4252      	negs	r2, r2
 8000cae:	1b1c      	subs	r4, r3, r4
 8000cb0:	000e      	movs	r6, r1
 8000cb2:	4688      	mov	r8, r1
 8000cb4:	1aa4      	subs	r4, r4, r2
 8000cb6:	3701      	adds	r7, #1
 8000cb8:	e555      	b.n	8000766 <__aeabi_dadd+0xa6>
 8000cba:	4663      	mov	r3, ip
 8000cbc:	08d9      	lsrs	r1, r3, #3
 8000cbe:	4653      	mov	r3, sl
 8000cc0:	075a      	lsls	r2, r3, #29
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	08dc      	lsrs	r4, r3, #3
 8000cc6:	e6c9      	b.n	8000a5c <__aeabi_dadd+0x39c>
 8000cc8:	4660      	mov	r0, ip
 8000cca:	4654      	mov	r4, sl
 8000ccc:	e6d4      	b.n	8000a78 <__aeabi_dadd+0x3b8>
 8000cce:	08c0      	lsrs	r0, r0, #3
 8000cd0:	2a00      	cmp	r2, #0
 8000cd2:	d100      	bne.n	8000cd6 <__aeabi_dadd+0x616>
 8000cd4:	e6bf      	b.n	8000a56 <__aeabi_dadd+0x396>
 8000cd6:	0762      	lsls	r2, r4, #29
 8000cd8:	4310      	orrs	r0, r2
 8000cda:	2280      	movs	r2, #128	@ 0x80
 8000cdc:	08e4      	lsrs	r4, r4, #3
 8000cde:	0312      	lsls	r2, r2, #12
 8000ce0:	4214      	tst	r4, r2
 8000ce2:	d0cd      	beq.n	8000c80 <__aeabi_dadd+0x5c0>
 8000ce4:	08dd      	lsrs	r5, r3, #3
 8000ce6:	4215      	tst	r5, r2
 8000ce8:	d1ca      	bne.n	8000c80 <__aeabi_dadd+0x5c0>
 8000cea:	4663      	mov	r3, ip
 8000cec:	08d8      	lsrs	r0, r3, #3
 8000cee:	4653      	mov	r3, sl
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	000e      	movs	r6, r1
 8000cf4:	002c      	movs	r4, r5
 8000cf6:	4318      	orrs	r0, r3
 8000cf8:	e7c2      	b.n	8000c80 <__aeabi_dadd+0x5c0>
 8000cfa:	4663      	mov	r3, ip
 8000cfc:	08d9      	lsrs	r1, r3, #3
 8000cfe:	4653      	mov	r3, sl
 8000d00:	075a      	lsls	r2, r3, #29
 8000d02:	430a      	orrs	r2, r1
 8000d04:	08dc      	lsrs	r4, r3, #3
 8000d06:	e699      	b.n	8000a3c <__aeabi_dadd+0x37c>
 8000d08:	4663      	mov	r3, ip
 8000d0a:	08d8      	lsrs	r0, r3, #3
 8000d0c:	4653      	mov	r3, sl
 8000d0e:	075a      	lsls	r2, r3, #29
 8000d10:	000e      	movs	r6, r1
 8000d12:	4302      	orrs	r2, r0
 8000d14:	08dc      	lsrs	r4, r3, #3
 8000d16:	e6a1      	b.n	8000a5c <__aeabi_dadd+0x39c>
 8000d18:	0011      	movs	r1, r2
 8000d1a:	0027      	movs	r7, r4
 8000d1c:	3920      	subs	r1, #32
 8000d1e:	40cf      	lsrs	r7, r1
 8000d20:	2a20      	cmp	r2, #32
 8000d22:	d003      	beq.n	8000d2c <__aeabi_dadd+0x66c>
 8000d24:	2140      	movs	r1, #64	@ 0x40
 8000d26:	1a8a      	subs	r2, r1, r2
 8000d28:	4094      	lsls	r4, r2
 8000d2a:	4320      	orrs	r0, r4
 8000d2c:	1e42      	subs	r2, r0, #1
 8000d2e:	4190      	sbcs	r0, r2
 8000d30:	0005      	movs	r5, r0
 8000d32:	433d      	orrs	r5, r7
 8000d34:	e651      	b.n	80009da <__aeabi_dadd+0x31a>
 8000d36:	000c      	movs	r4, r1
 8000d38:	2500      	movs	r5, #0
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	e558      	b.n	80007f0 <__aeabi_dadd+0x130>
 8000d3e:	4460      	add	r0, ip
 8000d40:	4560      	cmp	r0, ip
 8000d42:	4192      	sbcs	r2, r2
 8000d44:	4454      	add	r4, sl
 8000d46:	4252      	negs	r2, r2
 8000d48:	0005      	movs	r5, r0
 8000d4a:	18a4      	adds	r4, r4, r2
 8000d4c:	e73a      	b.n	8000bc4 <__aeabi_dadd+0x504>
 8000d4e:	4653      	mov	r3, sl
 8000d50:	075a      	lsls	r2, r3, #29
 8000d52:	4663      	mov	r3, ip
 8000d54:	08d9      	lsrs	r1, r3, #3
 8000d56:	4653      	mov	r3, sl
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	08dc      	lsrs	r4, r3, #3
 8000d5c:	e67e      	b.n	8000a5c <__aeabi_dadd+0x39c>
 8000d5e:	001a      	movs	r2, r3
 8000d60:	001c      	movs	r4, r3
 8000d62:	432a      	orrs	r2, r5
 8000d64:	d000      	beq.n	8000d68 <__aeabi_dadd+0x6a8>
 8000d66:	e6ab      	b.n	8000ac0 <__aeabi_dadd+0x400>
 8000d68:	e6c1      	b.n	8000aee <__aeabi_dadd+0x42e>
 8000d6a:	2120      	movs	r1, #32
 8000d6c:	2500      	movs	r5, #0
 8000d6e:	1a09      	subs	r1, r1, r0
 8000d70:	e519      	b.n	80007a6 <__aeabi_dadd+0xe6>
 8000d72:	2200      	movs	r2, #0
 8000d74:	2500      	movs	r5, #0
 8000d76:	4c01      	ldr	r4, [pc, #4]	@ (8000d7c <__aeabi_dadd+0x6bc>)
 8000d78:	e53a      	b.n	80007f0 <__aeabi_dadd+0x130>
 8000d7a:	46c0      	nop			@ (mov r8, r8)
 8000d7c:	000007ff 	.word	0x000007ff
 8000d80:	ff7fffff 	.word	0xff7fffff
 8000d84:	000007fe 	.word	0x000007fe

08000d88 <__aeabi_ddiv>:
 8000d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d8a:	46de      	mov	lr, fp
 8000d8c:	4645      	mov	r5, r8
 8000d8e:	4657      	mov	r7, sl
 8000d90:	464e      	mov	r6, r9
 8000d92:	b5e0      	push	{r5, r6, r7, lr}
 8000d94:	b087      	sub	sp, #28
 8000d96:	9200      	str	r2, [sp, #0]
 8000d98:	9301      	str	r3, [sp, #4]
 8000d9a:	030b      	lsls	r3, r1, #12
 8000d9c:	0b1b      	lsrs	r3, r3, #12
 8000d9e:	469b      	mov	fp, r3
 8000da0:	0fca      	lsrs	r2, r1, #31
 8000da2:	004b      	lsls	r3, r1, #1
 8000da4:	0004      	movs	r4, r0
 8000da6:	4680      	mov	r8, r0
 8000da8:	0d5b      	lsrs	r3, r3, #21
 8000daa:	9202      	str	r2, [sp, #8]
 8000dac:	d100      	bne.n	8000db0 <__aeabi_ddiv+0x28>
 8000dae:	e16a      	b.n	8001086 <__aeabi_ddiv+0x2fe>
 8000db0:	4ad4      	ldr	r2, [pc, #848]	@ (8001104 <__aeabi_ddiv+0x37c>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d100      	bne.n	8000db8 <__aeabi_ddiv+0x30>
 8000db6:	e18c      	b.n	80010d2 <__aeabi_ddiv+0x34a>
 8000db8:	4659      	mov	r1, fp
 8000dba:	0f42      	lsrs	r2, r0, #29
 8000dbc:	00c9      	lsls	r1, r1, #3
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	2180      	movs	r1, #128	@ 0x80
 8000dc2:	0409      	lsls	r1, r1, #16
 8000dc4:	4311      	orrs	r1, r2
 8000dc6:	00c2      	lsls	r2, r0, #3
 8000dc8:	4690      	mov	r8, r2
 8000dca:	4acf      	ldr	r2, [pc, #828]	@ (8001108 <__aeabi_ddiv+0x380>)
 8000dcc:	4689      	mov	r9, r1
 8000dce:	4692      	mov	sl, r2
 8000dd0:	449a      	add	sl, r3
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	2400      	movs	r4, #0
 8000dd6:	9303      	str	r3, [sp, #12]
 8000dd8:	9e00      	ldr	r6, [sp, #0]
 8000dda:	9f01      	ldr	r7, [sp, #4]
 8000ddc:	033b      	lsls	r3, r7, #12
 8000dde:	0b1b      	lsrs	r3, r3, #12
 8000de0:	469b      	mov	fp, r3
 8000de2:	007b      	lsls	r3, r7, #1
 8000de4:	0030      	movs	r0, r6
 8000de6:	0d5b      	lsrs	r3, r3, #21
 8000de8:	0ffd      	lsrs	r5, r7, #31
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d100      	bne.n	8000df0 <__aeabi_ddiv+0x68>
 8000dee:	e128      	b.n	8001042 <__aeabi_ddiv+0x2ba>
 8000df0:	4ac4      	ldr	r2, [pc, #784]	@ (8001104 <__aeabi_ddiv+0x37c>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d100      	bne.n	8000df8 <__aeabi_ddiv+0x70>
 8000df6:	e177      	b.n	80010e8 <__aeabi_ddiv+0x360>
 8000df8:	4659      	mov	r1, fp
 8000dfa:	0f72      	lsrs	r2, r6, #29
 8000dfc:	00c9      	lsls	r1, r1, #3
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	2180      	movs	r1, #128	@ 0x80
 8000e02:	0409      	lsls	r1, r1, #16
 8000e04:	4311      	orrs	r1, r2
 8000e06:	468b      	mov	fp, r1
 8000e08:	49bf      	ldr	r1, [pc, #764]	@ (8001108 <__aeabi_ddiv+0x380>)
 8000e0a:	00f2      	lsls	r2, r6, #3
 8000e0c:	468c      	mov	ip, r1
 8000e0e:	4651      	mov	r1, sl
 8000e10:	4463      	add	r3, ip
 8000e12:	1acb      	subs	r3, r1, r3
 8000e14:	469a      	mov	sl, r3
 8000e16:	2300      	movs	r3, #0
 8000e18:	9e02      	ldr	r6, [sp, #8]
 8000e1a:	406e      	eors	r6, r5
 8000e1c:	2c0f      	cmp	r4, #15
 8000e1e:	d827      	bhi.n	8000e70 <__aeabi_ddiv+0xe8>
 8000e20:	49ba      	ldr	r1, [pc, #744]	@ (800110c <__aeabi_ddiv+0x384>)
 8000e22:	00a4      	lsls	r4, r4, #2
 8000e24:	5909      	ldr	r1, [r1, r4]
 8000e26:	468f      	mov	pc, r1
 8000e28:	46cb      	mov	fp, r9
 8000e2a:	4642      	mov	r2, r8
 8000e2c:	9e02      	ldr	r6, [sp, #8]
 8000e2e:	9b03      	ldr	r3, [sp, #12]
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d016      	beq.n	8000e62 <__aeabi_ddiv+0xda>
 8000e34:	2b03      	cmp	r3, #3
 8000e36:	d100      	bne.n	8000e3a <__aeabi_ddiv+0xb2>
 8000e38:	e2a6      	b.n	8001388 <__aeabi_ddiv+0x600>
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d000      	beq.n	8000e40 <__aeabi_ddiv+0xb8>
 8000e3e:	e0df      	b.n	8001000 <__aeabi_ddiv+0x278>
 8000e40:	2200      	movs	r2, #0
 8000e42:	2300      	movs	r3, #0
 8000e44:	2400      	movs	r4, #0
 8000e46:	4690      	mov	r8, r2
 8000e48:	051b      	lsls	r3, r3, #20
 8000e4a:	4323      	orrs	r3, r4
 8000e4c:	07f6      	lsls	r6, r6, #31
 8000e4e:	4333      	orrs	r3, r6
 8000e50:	4640      	mov	r0, r8
 8000e52:	0019      	movs	r1, r3
 8000e54:	b007      	add	sp, #28
 8000e56:	bcf0      	pop	{r4, r5, r6, r7}
 8000e58:	46bb      	mov	fp, r7
 8000e5a:	46b2      	mov	sl, r6
 8000e5c:	46a9      	mov	r9, r5
 8000e5e:	46a0      	mov	r8, r4
 8000e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e62:	2200      	movs	r2, #0
 8000e64:	2400      	movs	r4, #0
 8000e66:	4690      	mov	r8, r2
 8000e68:	4ba6      	ldr	r3, [pc, #664]	@ (8001104 <__aeabi_ddiv+0x37c>)
 8000e6a:	e7ed      	b.n	8000e48 <__aeabi_ddiv+0xc0>
 8000e6c:	002e      	movs	r6, r5
 8000e6e:	e7df      	b.n	8000e30 <__aeabi_ddiv+0xa8>
 8000e70:	45cb      	cmp	fp, r9
 8000e72:	d200      	bcs.n	8000e76 <__aeabi_ddiv+0xee>
 8000e74:	e1d4      	b.n	8001220 <__aeabi_ddiv+0x498>
 8000e76:	d100      	bne.n	8000e7a <__aeabi_ddiv+0xf2>
 8000e78:	e1cf      	b.n	800121a <__aeabi_ddiv+0x492>
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	425b      	negs	r3, r3
 8000e7e:	469c      	mov	ip, r3
 8000e80:	4644      	mov	r4, r8
 8000e82:	4648      	mov	r0, r9
 8000e84:	2700      	movs	r7, #0
 8000e86:	44e2      	add	sl, ip
 8000e88:	465b      	mov	r3, fp
 8000e8a:	0e15      	lsrs	r5, r2, #24
 8000e8c:	021b      	lsls	r3, r3, #8
 8000e8e:	431d      	orrs	r5, r3
 8000e90:	0c19      	lsrs	r1, r3, #16
 8000e92:	042b      	lsls	r3, r5, #16
 8000e94:	0212      	lsls	r2, r2, #8
 8000e96:	9500      	str	r5, [sp, #0]
 8000e98:	0c1d      	lsrs	r5, r3, #16
 8000e9a:	4691      	mov	r9, r2
 8000e9c:	9102      	str	r1, [sp, #8]
 8000e9e:	9503      	str	r5, [sp, #12]
 8000ea0:	f7ff f9b8 	bl	8000214 <__aeabi_uidivmod>
 8000ea4:	0002      	movs	r2, r0
 8000ea6:	436a      	muls	r2, r5
 8000ea8:	040b      	lsls	r3, r1, #16
 8000eaa:	0c21      	lsrs	r1, r4, #16
 8000eac:	4680      	mov	r8, r0
 8000eae:	4319      	orrs	r1, r3
 8000eb0:	428a      	cmp	r2, r1
 8000eb2:	d909      	bls.n	8000ec8 <__aeabi_ddiv+0x140>
 8000eb4:	9d00      	ldr	r5, [sp, #0]
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	46ac      	mov	ip, r5
 8000eba:	425b      	negs	r3, r3
 8000ebc:	4461      	add	r1, ip
 8000ebe:	469c      	mov	ip, r3
 8000ec0:	44e0      	add	r8, ip
 8000ec2:	428d      	cmp	r5, r1
 8000ec4:	d800      	bhi.n	8000ec8 <__aeabi_ddiv+0x140>
 8000ec6:	e1fb      	b.n	80012c0 <__aeabi_ddiv+0x538>
 8000ec8:	1a88      	subs	r0, r1, r2
 8000eca:	9902      	ldr	r1, [sp, #8]
 8000ecc:	f7ff f9a2 	bl	8000214 <__aeabi_uidivmod>
 8000ed0:	9a03      	ldr	r2, [sp, #12]
 8000ed2:	0424      	lsls	r4, r4, #16
 8000ed4:	4342      	muls	r2, r0
 8000ed6:	0409      	lsls	r1, r1, #16
 8000ed8:	0c24      	lsrs	r4, r4, #16
 8000eda:	0003      	movs	r3, r0
 8000edc:	430c      	orrs	r4, r1
 8000ede:	42a2      	cmp	r2, r4
 8000ee0:	d906      	bls.n	8000ef0 <__aeabi_ddiv+0x168>
 8000ee2:	9900      	ldr	r1, [sp, #0]
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	468c      	mov	ip, r1
 8000ee8:	4464      	add	r4, ip
 8000eea:	42a1      	cmp	r1, r4
 8000eec:	d800      	bhi.n	8000ef0 <__aeabi_ddiv+0x168>
 8000eee:	e1e1      	b.n	80012b4 <__aeabi_ddiv+0x52c>
 8000ef0:	1aa0      	subs	r0, r4, r2
 8000ef2:	4642      	mov	r2, r8
 8000ef4:	0412      	lsls	r2, r2, #16
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	4693      	mov	fp, r2
 8000efa:	464b      	mov	r3, r9
 8000efc:	4659      	mov	r1, fp
 8000efe:	0c1b      	lsrs	r3, r3, #16
 8000f00:	001d      	movs	r5, r3
 8000f02:	9304      	str	r3, [sp, #16]
 8000f04:	040b      	lsls	r3, r1, #16
 8000f06:	4649      	mov	r1, r9
 8000f08:	0409      	lsls	r1, r1, #16
 8000f0a:	0c09      	lsrs	r1, r1, #16
 8000f0c:	000c      	movs	r4, r1
 8000f0e:	0c1b      	lsrs	r3, r3, #16
 8000f10:	435c      	muls	r4, r3
 8000f12:	0c12      	lsrs	r2, r2, #16
 8000f14:	436b      	muls	r3, r5
 8000f16:	4688      	mov	r8, r1
 8000f18:	4351      	muls	r1, r2
 8000f1a:	436a      	muls	r2, r5
 8000f1c:	0c25      	lsrs	r5, r4, #16
 8000f1e:	46ac      	mov	ip, r5
 8000f20:	185b      	adds	r3, r3, r1
 8000f22:	4463      	add	r3, ip
 8000f24:	4299      	cmp	r1, r3
 8000f26:	d903      	bls.n	8000f30 <__aeabi_ddiv+0x1a8>
 8000f28:	2180      	movs	r1, #128	@ 0x80
 8000f2a:	0249      	lsls	r1, r1, #9
 8000f2c:	468c      	mov	ip, r1
 8000f2e:	4462      	add	r2, ip
 8000f30:	0c19      	lsrs	r1, r3, #16
 8000f32:	0424      	lsls	r4, r4, #16
 8000f34:	041b      	lsls	r3, r3, #16
 8000f36:	0c24      	lsrs	r4, r4, #16
 8000f38:	188a      	adds	r2, r1, r2
 8000f3a:	191c      	adds	r4, r3, r4
 8000f3c:	4290      	cmp	r0, r2
 8000f3e:	d302      	bcc.n	8000f46 <__aeabi_ddiv+0x1be>
 8000f40:	d116      	bne.n	8000f70 <__aeabi_ddiv+0x1e8>
 8000f42:	42a7      	cmp	r7, r4
 8000f44:	d214      	bcs.n	8000f70 <__aeabi_ddiv+0x1e8>
 8000f46:	465b      	mov	r3, fp
 8000f48:	9d00      	ldr	r5, [sp, #0]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	444f      	add	r7, r9
 8000f4e:	9305      	str	r3, [sp, #20]
 8000f50:	454f      	cmp	r7, r9
 8000f52:	419b      	sbcs	r3, r3
 8000f54:	46ac      	mov	ip, r5
 8000f56:	425b      	negs	r3, r3
 8000f58:	4463      	add	r3, ip
 8000f5a:	18c0      	adds	r0, r0, r3
 8000f5c:	4285      	cmp	r5, r0
 8000f5e:	d300      	bcc.n	8000f62 <__aeabi_ddiv+0x1da>
 8000f60:	e1a1      	b.n	80012a6 <__aeabi_ddiv+0x51e>
 8000f62:	4282      	cmp	r2, r0
 8000f64:	d900      	bls.n	8000f68 <__aeabi_ddiv+0x1e0>
 8000f66:	e1f6      	b.n	8001356 <__aeabi_ddiv+0x5ce>
 8000f68:	d100      	bne.n	8000f6c <__aeabi_ddiv+0x1e4>
 8000f6a:	e1f1      	b.n	8001350 <__aeabi_ddiv+0x5c8>
 8000f6c:	9b05      	ldr	r3, [sp, #20]
 8000f6e:	469b      	mov	fp, r3
 8000f70:	1b3c      	subs	r4, r7, r4
 8000f72:	42a7      	cmp	r7, r4
 8000f74:	41bf      	sbcs	r7, r7
 8000f76:	9d00      	ldr	r5, [sp, #0]
 8000f78:	1a80      	subs	r0, r0, r2
 8000f7a:	427f      	negs	r7, r7
 8000f7c:	1bc0      	subs	r0, r0, r7
 8000f7e:	4285      	cmp	r5, r0
 8000f80:	d100      	bne.n	8000f84 <__aeabi_ddiv+0x1fc>
 8000f82:	e1d0      	b.n	8001326 <__aeabi_ddiv+0x59e>
 8000f84:	9902      	ldr	r1, [sp, #8]
 8000f86:	f7ff f945 	bl	8000214 <__aeabi_uidivmod>
 8000f8a:	9a03      	ldr	r2, [sp, #12]
 8000f8c:	040b      	lsls	r3, r1, #16
 8000f8e:	4342      	muls	r2, r0
 8000f90:	0c21      	lsrs	r1, r4, #16
 8000f92:	0007      	movs	r7, r0
 8000f94:	4319      	orrs	r1, r3
 8000f96:	428a      	cmp	r2, r1
 8000f98:	d900      	bls.n	8000f9c <__aeabi_ddiv+0x214>
 8000f9a:	e178      	b.n	800128e <__aeabi_ddiv+0x506>
 8000f9c:	1a88      	subs	r0, r1, r2
 8000f9e:	9902      	ldr	r1, [sp, #8]
 8000fa0:	f7ff f938 	bl	8000214 <__aeabi_uidivmod>
 8000fa4:	9a03      	ldr	r2, [sp, #12]
 8000fa6:	0424      	lsls	r4, r4, #16
 8000fa8:	4342      	muls	r2, r0
 8000faa:	0409      	lsls	r1, r1, #16
 8000fac:	0c24      	lsrs	r4, r4, #16
 8000fae:	0003      	movs	r3, r0
 8000fb0:	430c      	orrs	r4, r1
 8000fb2:	42a2      	cmp	r2, r4
 8000fb4:	d900      	bls.n	8000fb8 <__aeabi_ddiv+0x230>
 8000fb6:	e15d      	b.n	8001274 <__aeabi_ddiv+0x4ec>
 8000fb8:	4641      	mov	r1, r8
 8000fba:	1aa4      	subs	r4, r4, r2
 8000fbc:	043a      	lsls	r2, r7, #16
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	9d04      	ldr	r5, [sp, #16]
 8000fc2:	0413      	lsls	r3, r2, #16
 8000fc4:	0c1b      	lsrs	r3, r3, #16
 8000fc6:	4359      	muls	r1, r3
 8000fc8:	4647      	mov	r7, r8
 8000fca:	436b      	muls	r3, r5
 8000fcc:	469c      	mov	ip, r3
 8000fce:	0c10      	lsrs	r0, r2, #16
 8000fd0:	4347      	muls	r7, r0
 8000fd2:	0c0b      	lsrs	r3, r1, #16
 8000fd4:	44bc      	add	ip, r7
 8000fd6:	4463      	add	r3, ip
 8000fd8:	4368      	muls	r0, r5
 8000fda:	429f      	cmp	r7, r3
 8000fdc:	d903      	bls.n	8000fe6 <__aeabi_ddiv+0x25e>
 8000fde:	2580      	movs	r5, #128	@ 0x80
 8000fe0:	026d      	lsls	r5, r5, #9
 8000fe2:	46ac      	mov	ip, r5
 8000fe4:	4460      	add	r0, ip
 8000fe6:	0c1f      	lsrs	r7, r3, #16
 8000fe8:	0409      	lsls	r1, r1, #16
 8000fea:	041b      	lsls	r3, r3, #16
 8000fec:	0c09      	lsrs	r1, r1, #16
 8000fee:	183f      	adds	r7, r7, r0
 8000ff0:	185b      	adds	r3, r3, r1
 8000ff2:	42bc      	cmp	r4, r7
 8000ff4:	d200      	bcs.n	8000ff8 <__aeabi_ddiv+0x270>
 8000ff6:	e102      	b.n	80011fe <__aeabi_ddiv+0x476>
 8000ff8:	d100      	bne.n	8000ffc <__aeabi_ddiv+0x274>
 8000ffa:	e0fd      	b.n	80011f8 <__aeabi_ddiv+0x470>
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	431a      	orrs	r2, r3
 8001000:	4b43      	ldr	r3, [pc, #268]	@ (8001110 <__aeabi_ddiv+0x388>)
 8001002:	4453      	add	r3, sl
 8001004:	2b00      	cmp	r3, #0
 8001006:	dc00      	bgt.n	800100a <__aeabi_ddiv+0x282>
 8001008:	e0ae      	b.n	8001168 <__aeabi_ddiv+0x3e0>
 800100a:	0751      	lsls	r1, r2, #29
 800100c:	d000      	beq.n	8001010 <__aeabi_ddiv+0x288>
 800100e:	e198      	b.n	8001342 <__aeabi_ddiv+0x5ba>
 8001010:	4659      	mov	r1, fp
 8001012:	01c9      	lsls	r1, r1, #7
 8001014:	d506      	bpl.n	8001024 <__aeabi_ddiv+0x29c>
 8001016:	4659      	mov	r1, fp
 8001018:	4b3e      	ldr	r3, [pc, #248]	@ (8001114 <__aeabi_ddiv+0x38c>)
 800101a:	4019      	ands	r1, r3
 800101c:	2380      	movs	r3, #128	@ 0x80
 800101e:	468b      	mov	fp, r1
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	4453      	add	r3, sl
 8001024:	493c      	ldr	r1, [pc, #240]	@ (8001118 <__aeabi_ddiv+0x390>)
 8001026:	428b      	cmp	r3, r1
 8001028:	dd00      	ble.n	800102c <__aeabi_ddiv+0x2a4>
 800102a:	e71a      	b.n	8000e62 <__aeabi_ddiv+0xda>
 800102c:	4659      	mov	r1, fp
 800102e:	08d2      	lsrs	r2, r2, #3
 8001030:	0749      	lsls	r1, r1, #29
 8001032:	4311      	orrs	r1, r2
 8001034:	465a      	mov	r2, fp
 8001036:	055b      	lsls	r3, r3, #21
 8001038:	0254      	lsls	r4, r2, #9
 800103a:	4688      	mov	r8, r1
 800103c:	0b24      	lsrs	r4, r4, #12
 800103e:	0d5b      	lsrs	r3, r3, #21
 8001040:	e702      	b.n	8000e48 <__aeabi_ddiv+0xc0>
 8001042:	465a      	mov	r2, fp
 8001044:	9b00      	ldr	r3, [sp, #0]
 8001046:	431a      	orrs	r2, r3
 8001048:	d100      	bne.n	800104c <__aeabi_ddiv+0x2c4>
 800104a:	e07e      	b.n	800114a <__aeabi_ddiv+0x3c2>
 800104c:	465b      	mov	r3, fp
 800104e:	2b00      	cmp	r3, #0
 8001050:	d100      	bne.n	8001054 <__aeabi_ddiv+0x2cc>
 8001052:	e100      	b.n	8001256 <__aeabi_ddiv+0x4ce>
 8001054:	4658      	mov	r0, fp
 8001056:	f7ff fa0b 	bl	8000470 <__clzsi2>
 800105a:	0002      	movs	r2, r0
 800105c:	0003      	movs	r3, r0
 800105e:	3a0b      	subs	r2, #11
 8001060:	271d      	movs	r7, #29
 8001062:	9e00      	ldr	r6, [sp, #0]
 8001064:	1aba      	subs	r2, r7, r2
 8001066:	0019      	movs	r1, r3
 8001068:	4658      	mov	r0, fp
 800106a:	40d6      	lsrs	r6, r2
 800106c:	3908      	subs	r1, #8
 800106e:	4088      	lsls	r0, r1
 8001070:	0032      	movs	r2, r6
 8001072:	4302      	orrs	r2, r0
 8001074:	4693      	mov	fp, r2
 8001076:	9a00      	ldr	r2, [sp, #0]
 8001078:	408a      	lsls	r2, r1
 800107a:	4928      	ldr	r1, [pc, #160]	@ (800111c <__aeabi_ddiv+0x394>)
 800107c:	4453      	add	r3, sl
 800107e:	468a      	mov	sl, r1
 8001080:	449a      	add	sl, r3
 8001082:	2300      	movs	r3, #0
 8001084:	e6c8      	b.n	8000e18 <__aeabi_ddiv+0x90>
 8001086:	465b      	mov	r3, fp
 8001088:	4303      	orrs	r3, r0
 800108a:	4699      	mov	r9, r3
 800108c:	d056      	beq.n	800113c <__aeabi_ddiv+0x3b4>
 800108e:	465b      	mov	r3, fp
 8001090:	2b00      	cmp	r3, #0
 8001092:	d100      	bne.n	8001096 <__aeabi_ddiv+0x30e>
 8001094:	e0cd      	b.n	8001232 <__aeabi_ddiv+0x4aa>
 8001096:	4658      	mov	r0, fp
 8001098:	f7ff f9ea 	bl	8000470 <__clzsi2>
 800109c:	230b      	movs	r3, #11
 800109e:	425b      	negs	r3, r3
 80010a0:	469c      	mov	ip, r3
 80010a2:	0002      	movs	r2, r0
 80010a4:	4484      	add	ip, r0
 80010a6:	4666      	mov	r6, ip
 80010a8:	231d      	movs	r3, #29
 80010aa:	1b9b      	subs	r3, r3, r6
 80010ac:	0026      	movs	r6, r4
 80010ae:	0011      	movs	r1, r2
 80010b0:	4658      	mov	r0, fp
 80010b2:	40de      	lsrs	r6, r3
 80010b4:	3908      	subs	r1, #8
 80010b6:	4088      	lsls	r0, r1
 80010b8:	0033      	movs	r3, r6
 80010ba:	4303      	orrs	r3, r0
 80010bc:	4699      	mov	r9, r3
 80010be:	0023      	movs	r3, r4
 80010c0:	408b      	lsls	r3, r1
 80010c2:	4698      	mov	r8, r3
 80010c4:	4b16      	ldr	r3, [pc, #88]	@ (8001120 <__aeabi_ddiv+0x398>)
 80010c6:	2400      	movs	r4, #0
 80010c8:	1a9b      	subs	r3, r3, r2
 80010ca:	469a      	mov	sl, r3
 80010cc:	2300      	movs	r3, #0
 80010ce:	9303      	str	r3, [sp, #12]
 80010d0:	e682      	b.n	8000dd8 <__aeabi_ddiv+0x50>
 80010d2:	465a      	mov	r2, fp
 80010d4:	4302      	orrs	r2, r0
 80010d6:	4691      	mov	r9, r2
 80010d8:	d12a      	bne.n	8001130 <__aeabi_ddiv+0x3a8>
 80010da:	2200      	movs	r2, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	2302      	movs	r3, #2
 80010e0:	4690      	mov	r8, r2
 80010e2:	2408      	movs	r4, #8
 80010e4:	9303      	str	r3, [sp, #12]
 80010e6:	e677      	b.n	8000dd8 <__aeabi_ddiv+0x50>
 80010e8:	465a      	mov	r2, fp
 80010ea:	9b00      	ldr	r3, [sp, #0]
 80010ec:	431a      	orrs	r2, r3
 80010ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001124 <__aeabi_ddiv+0x39c>)
 80010f0:	469c      	mov	ip, r3
 80010f2:	44e2      	add	sl, ip
 80010f4:	2a00      	cmp	r2, #0
 80010f6:	d117      	bne.n	8001128 <__aeabi_ddiv+0x3a0>
 80010f8:	2302      	movs	r3, #2
 80010fa:	431c      	orrs	r4, r3
 80010fc:	2300      	movs	r3, #0
 80010fe:	469b      	mov	fp, r3
 8001100:	3302      	adds	r3, #2
 8001102:	e689      	b.n	8000e18 <__aeabi_ddiv+0x90>
 8001104:	000007ff 	.word	0x000007ff
 8001108:	fffffc01 	.word	0xfffffc01
 800110c:	080097e8 	.word	0x080097e8
 8001110:	000003ff 	.word	0x000003ff
 8001114:	feffffff 	.word	0xfeffffff
 8001118:	000007fe 	.word	0x000007fe
 800111c:	000003f3 	.word	0x000003f3
 8001120:	fffffc0d 	.word	0xfffffc0d
 8001124:	fffff801 	.word	0xfffff801
 8001128:	2303      	movs	r3, #3
 800112a:	0032      	movs	r2, r6
 800112c:	431c      	orrs	r4, r3
 800112e:	e673      	b.n	8000e18 <__aeabi_ddiv+0x90>
 8001130:	469a      	mov	sl, r3
 8001132:	2303      	movs	r3, #3
 8001134:	46d9      	mov	r9, fp
 8001136:	240c      	movs	r4, #12
 8001138:	9303      	str	r3, [sp, #12]
 800113a:	e64d      	b.n	8000dd8 <__aeabi_ddiv+0x50>
 800113c:	2300      	movs	r3, #0
 800113e:	4698      	mov	r8, r3
 8001140:	469a      	mov	sl, r3
 8001142:	3301      	adds	r3, #1
 8001144:	2404      	movs	r4, #4
 8001146:	9303      	str	r3, [sp, #12]
 8001148:	e646      	b.n	8000dd8 <__aeabi_ddiv+0x50>
 800114a:	2301      	movs	r3, #1
 800114c:	431c      	orrs	r4, r3
 800114e:	2300      	movs	r3, #0
 8001150:	469b      	mov	fp, r3
 8001152:	3301      	adds	r3, #1
 8001154:	e660      	b.n	8000e18 <__aeabi_ddiv+0x90>
 8001156:	2300      	movs	r3, #0
 8001158:	2480      	movs	r4, #128	@ 0x80
 800115a:	4698      	mov	r8, r3
 800115c:	2600      	movs	r6, #0
 800115e:	4b92      	ldr	r3, [pc, #584]	@ (80013a8 <__aeabi_ddiv+0x620>)
 8001160:	0324      	lsls	r4, r4, #12
 8001162:	e671      	b.n	8000e48 <__aeabi_ddiv+0xc0>
 8001164:	2201      	movs	r2, #1
 8001166:	4252      	negs	r2, r2
 8001168:	2101      	movs	r1, #1
 800116a:	1ac9      	subs	r1, r1, r3
 800116c:	2938      	cmp	r1, #56	@ 0x38
 800116e:	dd00      	ble.n	8001172 <__aeabi_ddiv+0x3ea>
 8001170:	e666      	b.n	8000e40 <__aeabi_ddiv+0xb8>
 8001172:	291f      	cmp	r1, #31
 8001174:	dc00      	bgt.n	8001178 <__aeabi_ddiv+0x3f0>
 8001176:	e0ab      	b.n	80012d0 <__aeabi_ddiv+0x548>
 8001178:	201f      	movs	r0, #31
 800117a:	4240      	negs	r0, r0
 800117c:	1ac3      	subs	r3, r0, r3
 800117e:	4658      	mov	r0, fp
 8001180:	40d8      	lsrs	r0, r3
 8001182:	0003      	movs	r3, r0
 8001184:	2920      	cmp	r1, #32
 8001186:	d004      	beq.n	8001192 <__aeabi_ddiv+0x40a>
 8001188:	4658      	mov	r0, fp
 800118a:	4988      	ldr	r1, [pc, #544]	@ (80013ac <__aeabi_ddiv+0x624>)
 800118c:	4451      	add	r1, sl
 800118e:	4088      	lsls	r0, r1
 8001190:	4302      	orrs	r2, r0
 8001192:	1e51      	subs	r1, r2, #1
 8001194:	418a      	sbcs	r2, r1
 8001196:	431a      	orrs	r2, r3
 8001198:	2307      	movs	r3, #7
 800119a:	0019      	movs	r1, r3
 800119c:	2400      	movs	r4, #0
 800119e:	4011      	ands	r1, r2
 80011a0:	4213      	tst	r3, r2
 80011a2:	d00c      	beq.n	80011be <__aeabi_ddiv+0x436>
 80011a4:	230f      	movs	r3, #15
 80011a6:	4013      	ands	r3, r2
 80011a8:	2b04      	cmp	r3, #4
 80011aa:	d100      	bne.n	80011ae <__aeabi_ddiv+0x426>
 80011ac:	e0f9      	b.n	80013a2 <__aeabi_ddiv+0x61a>
 80011ae:	1d11      	adds	r1, r2, #4
 80011b0:	4291      	cmp	r1, r2
 80011b2:	419b      	sbcs	r3, r3
 80011b4:	000a      	movs	r2, r1
 80011b6:	425b      	negs	r3, r3
 80011b8:	0759      	lsls	r1, r3, #29
 80011ba:	025b      	lsls	r3, r3, #9
 80011bc:	0b1c      	lsrs	r4, r3, #12
 80011be:	08d2      	lsrs	r2, r2, #3
 80011c0:	430a      	orrs	r2, r1
 80011c2:	4690      	mov	r8, r2
 80011c4:	2300      	movs	r3, #0
 80011c6:	e63f      	b.n	8000e48 <__aeabi_ddiv+0xc0>
 80011c8:	2480      	movs	r4, #128	@ 0x80
 80011ca:	464b      	mov	r3, r9
 80011cc:	0324      	lsls	r4, r4, #12
 80011ce:	4223      	tst	r3, r4
 80011d0:	d009      	beq.n	80011e6 <__aeabi_ddiv+0x45e>
 80011d2:	465b      	mov	r3, fp
 80011d4:	4223      	tst	r3, r4
 80011d6:	d106      	bne.n	80011e6 <__aeabi_ddiv+0x45e>
 80011d8:	431c      	orrs	r4, r3
 80011da:	0324      	lsls	r4, r4, #12
 80011dc:	002e      	movs	r6, r5
 80011de:	4690      	mov	r8, r2
 80011e0:	4b71      	ldr	r3, [pc, #452]	@ (80013a8 <__aeabi_ddiv+0x620>)
 80011e2:	0b24      	lsrs	r4, r4, #12
 80011e4:	e630      	b.n	8000e48 <__aeabi_ddiv+0xc0>
 80011e6:	2480      	movs	r4, #128	@ 0x80
 80011e8:	464b      	mov	r3, r9
 80011ea:	0324      	lsls	r4, r4, #12
 80011ec:	431c      	orrs	r4, r3
 80011ee:	0324      	lsls	r4, r4, #12
 80011f0:	9e02      	ldr	r6, [sp, #8]
 80011f2:	4b6d      	ldr	r3, [pc, #436]	@ (80013a8 <__aeabi_ddiv+0x620>)
 80011f4:	0b24      	lsrs	r4, r4, #12
 80011f6:	e627      	b.n	8000e48 <__aeabi_ddiv+0xc0>
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d100      	bne.n	80011fe <__aeabi_ddiv+0x476>
 80011fc:	e700      	b.n	8001000 <__aeabi_ddiv+0x278>
 80011fe:	9800      	ldr	r0, [sp, #0]
 8001200:	1e51      	subs	r1, r2, #1
 8001202:	4684      	mov	ip, r0
 8001204:	4464      	add	r4, ip
 8001206:	4284      	cmp	r4, r0
 8001208:	d200      	bcs.n	800120c <__aeabi_ddiv+0x484>
 800120a:	e084      	b.n	8001316 <__aeabi_ddiv+0x58e>
 800120c:	42bc      	cmp	r4, r7
 800120e:	d200      	bcs.n	8001212 <__aeabi_ddiv+0x48a>
 8001210:	e0ae      	b.n	8001370 <__aeabi_ddiv+0x5e8>
 8001212:	d100      	bne.n	8001216 <__aeabi_ddiv+0x48e>
 8001214:	e0c1      	b.n	800139a <__aeabi_ddiv+0x612>
 8001216:	000a      	movs	r2, r1
 8001218:	e6f0      	b.n	8000ffc <__aeabi_ddiv+0x274>
 800121a:	4542      	cmp	r2, r8
 800121c:	d900      	bls.n	8001220 <__aeabi_ddiv+0x498>
 800121e:	e62c      	b.n	8000e7a <__aeabi_ddiv+0xf2>
 8001220:	464b      	mov	r3, r9
 8001222:	07dc      	lsls	r4, r3, #31
 8001224:	0858      	lsrs	r0, r3, #1
 8001226:	4643      	mov	r3, r8
 8001228:	085b      	lsrs	r3, r3, #1
 800122a:	431c      	orrs	r4, r3
 800122c:	4643      	mov	r3, r8
 800122e:	07df      	lsls	r7, r3, #31
 8001230:	e62a      	b.n	8000e88 <__aeabi_ddiv+0x100>
 8001232:	f7ff f91d 	bl	8000470 <__clzsi2>
 8001236:	2315      	movs	r3, #21
 8001238:	469c      	mov	ip, r3
 800123a:	4484      	add	ip, r0
 800123c:	0002      	movs	r2, r0
 800123e:	4663      	mov	r3, ip
 8001240:	3220      	adds	r2, #32
 8001242:	2b1c      	cmp	r3, #28
 8001244:	dc00      	bgt.n	8001248 <__aeabi_ddiv+0x4c0>
 8001246:	e72e      	b.n	80010a6 <__aeabi_ddiv+0x31e>
 8001248:	0023      	movs	r3, r4
 800124a:	3808      	subs	r0, #8
 800124c:	4083      	lsls	r3, r0
 800124e:	4699      	mov	r9, r3
 8001250:	2300      	movs	r3, #0
 8001252:	4698      	mov	r8, r3
 8001254:	e736      	b.n	80010c4 <__aeabi_ddiv+0x33c>
 8001256:	f7ff f90b 	bl	8000470 <__clzsi2>
 800125a:	0002      	movs	r2, r0
 800125c:	0003      	movs	r3, r0
 800125e:	3215      	adds	r2, #21
 8001260:	3320      	adds	r3, #32
 8001262:	2a1c      	cmp	r2, #28
 8001264:	dc00      	bgt.n	8001268 <__aeabi_ddiv+0x4e0>
 8001266:	e6fb      	b.n	8001060 <__aeabi_ddiv+0x2d8>
 8001268:	9900      	ldr	r1, [sp, #0]
 800126a:	3808      	subs	r0, #8
 800126c:	4081      	lsls	r1, r0
 800126e:	2200      	movs	r2, #0
 8001270:	468b      	mov	fp, r1
 8001272:	e702      	b.n	800107a <__aeabi_ddiv+0x2f2>
 8001274:	9900      	ldr	r1, [sp, #0]
 8001276:	3b01      	subs	r3, #1
 8001278:	468c      	mov	ip, r1
 800127a:	4464      	add	r4, ip
 800127c:	42a1      	cmp	r1, r4
 800127e:	d900      	bls.n	8001282 <__aeabi_ddiv+0x4fa>
 8001280:	e69a      	b.n	8000fb8 <__aeabi_ddiv+0x230>
 8001282:	42a2      	cmp	r2, r4
 8001284:	d800      	bhi.n	8001288 <__aeabi_ddiv+0x500>
 8001286:	e697      	b.n	8000fb8 <__aeabi_ddiv+0x230>
 8001288:	1e83      	subs	r3, r0, #2
 800128a:	4464      	add	r4, ip
 800128c:	e694      	b.n	8000fb8 <__aeabi_ddiv+0x230>
 800128e:	46ac      	mov	ip, r5
 8001290:	4461      	add	r1, ip
 8001292:	3f01      	subs	r7, #1
 8001294:	428d      	cmp	r5, r1
 8001296:	d900      	bls.n	800129a <__aeabi_ddiv+0x512>
 8001298:	e680      	b.n	8000f9c <__aeabi_ddiv+0x214>
 800129a:	428a      	cmp	r2, r1
 800129c:	d800      	bhi.n	80012a0 <__aeabi_ddiv+0x518>
 800129e:	e67d      	b.n	8000f9c <__aeabi_ddiv+0x214>
 80012a0:	1e87      	subs	r7, r0, #2
 80012a2:	4461      	add	r1, ip
 80012a4:	e67a      	b.n	8000f9c <__aeabi_ddiv+0x214>
 80012a6:	4285      	cmp	r5, r0
 80012a8:	d000      	beq.n	80012ac <__aeabi_ddiv+0x524>
 80012aa:	e65f      	b.n	8000f6c <__aeabi_ddiv+0x1e4>
 80012ac:	45b9      	cmp	r9, r7
 80012ae:	d900      	bls.n	80012b2 <__aeabi_ddiv+0x52a>
 80012b0:	e65c      	b.n	8000f6c <__aeabi_ddiv+0x1e4>
 80012b2:	e656      	b.n	8000f62 <__aeabi_ddiv+0x1da>
 80012b4:	42a2      	cmp	r2, r4
 80012b6:	d800      	bhi.n	80012ba <__aeabi_ddiv+0x532>
 80012b8:	e61a      	b.n	8000ef0 <__aeabi_ddiv+0x168>
 80012ba:	1e83      	subs	r3, r0, #2
 80012bc:	4464      	add	r4, ip
 80012be:	e617      	b.n	8000ef0 <__aeabi_ddiv+0x168>
 80012c0:	428a      	cmp	r2, r1
 80012c2:	d800      	bhi.n	80012c6 <__aeabi_ddiv+0x53e>
 80012c4:	e600      	b.n	8000ec8 <__aeabi_ddiv+0x140>
 80012c6:	46ac      	mov	ip, r5
 80012c8:	1e83      	subs	r3, r0, #2
 80012ca:	4698      	mov	r8, r3
 80012cc:	4461      	add	r1, ip
 80012ce:	e5fb      	b.n	8000ec8 <__aeabi_ddiv+0x140>
 80012d0:	4837      	ldr	r0, [pc, #220]	@ (80013b0 <__aeabi_ddiv+0x628>)
 80012d2:	0014      	movs	r4, r2
 80012d4:	4450      	add	r0, sl
 80012d6:	4082      	lsls	r2, r0
 80012d8:	465b      	mov	r3, fp
 80012da:	0017      	movs	r7, r2
 80012dc:	4083      	lsls	r3, r0
 80012de:	40cc      	lsrs	r4, r1
 80012e0:	1e7a      	subs	r2, r7, #1
 80012e2:	4197      	sbcs	r7, r2
 80012e4:	4323      	orrs	r3, r4
 80012e6:	433b      	orrs	r3, r7
 80012e8:	001a      	movs	r2, r3
 80012ea:	465b      	mov	r3, fp
 80012ec:	40cb      	lsrs	r3, r1
 80012ee:	0751      	lsls	r1, r2, #29
 80012f0:	d009      	beq.n	8001306 <__aeabi_ddiv+0x57e>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4011      	ands	r1, r2
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d005      	beq.n	8001306 <__aeabi_ddiv+0x57e>
 80012fa:	1d11      	adds	r1, r2, #4
 80012fc:	4291      	cmp	r1, r2
 80012fe:	4192      	sbcs	r2, r2
 8001300:	4252      	negs	r2, r2
 8001302:	189b      	adds	r3, r3, r2
 8001304:	000a      	movs	r2, r1
 8001306:	0219      	lsls	r1, r3, #8
 8001308:	d400      	bmi.n	800130c <__aeabi_ddiv+0x584>
 800130a:	e755      	b.n	80011b8 <__aeabi_ddiv+0x430>
 800130c:	2200      	movs	r2, #0
 800130e:	2301      	movs	r3, #1
 8001310:	2400      	movs	r4, #0
 8001312:	4690      	mov	r8, r2
 8001314:	e598      	b.n	8000e48 <__aeabi_ddiv+0xc0>
 8001316:	000a      	movs	r2, r1
 8001318:	42bc      	cmp	r4, r7
 800131a:	d000      	beq.n	800131e <__aeabi_ddiv+0x596>
 800131c:	e66e      	b.n	8000ffc <__aeabi_ddiv+0x274>
 800131e:	454b      	cmp	r3, r9
 8001320:	d000      	beq.n	8001324 <__aeabi_ddiv+0x59c>
 8001322:	e66b      	b.n	8000ffc <__aeabi_ddiv+0x274>
 8001324:	e66c      	b.n	8001000 <__aeabi_ddiv+0x278>
 8001326:	4b23      	ldr	r3, [pc, #140]	@ (80013b4 <__aeabi_ddiv+0x62c>)
 8001328:	4a23      	ldr	r2, [pc, #140]	@ (80013b8 <__aeabi_ddiv+0x630>)
 800132a:	4453      	add	r3, sl
 800132c:	4592      	cmp	sl, r2
 800132e:	da00      	bge.n	8001332 <__aeabi_ddiv+0x5aa>
 8001330:	e718      	b.n	8001164 <__aeabi_ddiv+0x3dc>
 8001332:	2101      	movs	r1, #1
 8001334:	4249      	negs	r1, r1
 8001336:	1d0a      	adds	r2, r1, #4
 8001338:	428a      	cmp	r2, r1
 800133a:	4189      	sbcs	r1, r1
 800133c:	4249      	negs	r1, r1
 800133e:	448b      	add	fp, r1
 8001340:	e666      	b.n	8001010 <__aeabi_ddiv+0x288>
 8001342:	210f      	movs	r1, #15
 8001344:	4011      	ands	r1, r2
 8001346:	2904      	cmp	r1, #4
 8001348:	d100      	bne.n	800134c <__aeabi_ddiv+0x5c4>
 800134a:	e661      	b.n	8001010 <__aeabi_ddiv+0x288>
 800134c:	0011      	movs	r1, r2
 800134e:	e7f2      	b.n	8001336 <__aeabi_ddiv+0x5ae>
 8001350:	42bc      	cmp	r4, r7
 8001352:	d800      	bhi.n	8001356 <__aeabi_ddiv+0x5ce>
 8001354:	e60a      	b.n	8000f6c <__aeabi_ddiv+0x1e4>
 8001356:	2302      	movs	r3, #2
 8001358:	425b      	negs	r3, r3
 800135a:	469c      	mov	ip, r3
 800135c:	9900      	ldr	r1, [sp, #0]
 800135e:	444f      	add	r7, r9
 8001360:	454f      	cmp	r7, r9
 8001362:	419b      	sbcs	r3, r3
 8001364:	44e3      	add	fp, ip
 8001366:	468c      	mov	ip, r1
 8001368:	425b      	negs	r3, r3
 800136a:	4463      	add	r3, ip
 800136c:	18c0      	adds	r0, r0, r3
 800136e:	e5ff      	b.n	8000f70 <__aeabi_ddiv+0x1e8>
 8001370:	4649      	mov	r1, r9
 8001372:	9d00      	ldr	r5, [sp, #0]
 8001374:	0048      	lsls	r0, r1, #1
 8001376:	4548      	cmp	r0, r9
 8001378:	4189      	sbcs	r1, r1
 800137a:	46ac      	mov	ip, r5
 800137c:	4249      	negs	r1, r1
 800137e:	4461      	add	r1, ip
 8001380:	4681      	mov	r9, r0
 8001382:	3a02      	subs	r2, #2
 8001384:	1864      	adds	r4, r4, r1
 8001386:	e7c7      	b.n	8001318 <__aeabi_ddiv+0x590>
 8001388:	2480      	movs	r4, #128	@ 0x80
 800138a:	465b      	mov	r3, fp
 800138c:	0324      	lsls	r4, r4, #12
 800138e:	431c      	orrs	r4, r3
 8001390:	0324      	lsls	r4, r4, #12
 8001392:	4690      	mov	r8, r2
 8001394:	4b04      	ldr	r3, [pc, #16]	@ (80013a8 <__aeabi_ddiv+0x620>)
 8001396:	0b24      	lsrs	r4, r4, #12
 8001398:	e556      	b.n	8000e48 <__aeabi_ddiv+0xc0>
 800139a:	4599      	cmp	r9, r3
 800139c:	d3e8      	bcc.n	8001370 <__aeabi_ddiv+0x5e8>
 800139e:	000a      	movs	r2, r1
 80013a0:	e7bd      	b.n	800131e <__aeabi_ddiv+0x596>
 80013a2:	2300      	movs	r3, #0
 80013a4:	e708      	b.n	80011b8 <__aeabi_ddiv+0x430>
 80013a6:	46c0      	nop			@ (mov r8, r8)
 80013a8:	000007ff 	.word	0x000007ff
 80013ac:	0000043e 	.word	0x0000043e
 80013b0:	0000041e 	.word	0x0000041e
 80013b4:	000003ff 	.word	0x000003ff
 80013b8:	fffffc02 	.word	0xfffffc02

080013bc <__eqdf2>:
 80013bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013be:	4657      	mov	r7, sl
 80013c0:	46de      	mov	lr, fp
 80013c2:	464e      	mov	r6, r9
 80013c4:	4645      	mov	r5, r8
 80013c6:	b5e0      	push	{r5, r6, r7, lr}
 80013c8:	000d      	movs	r5, r1
 80013ca:	0004      	movs	r4, r0
 80013cc:	0fe8      	lsrs	r0, r5, #31
 80013ce:	4683      	mov	fp, r0
 80013d0:	0309      	lsls	r1, r1, #12
 80013d2:	0fd8      	lsrs	r0, r3, #31
 80013d4:	0b09      	lsrs	r1, r1, #12
 80013d6:	4682      	mov	sl, r0
 80013d8:	4819      	ldr	r0, [pc, #100]	@ (8001440 <__eqdf2+0x84>)
 80013da:	468c      	mov	ip, r1
 80013dc:	031f      	lsls	r7, r3, #12
 80013de:	0069      	lsls	r1, r5, #1
 80013e0:	005e      	lsls	r6, r3, #1
 80013e2:	0d49      	lsrs	r1, r1, #21
 80013e4:	0b3f      	lsrs	r7, r7, #12
 80013e6:	0d76      	lsrs	r6, r6, #21
 80013e8:	4281      	cmp	r1, r0
 80013ea:	d018      	beq.n	800141e <__eqdf2+0x62>
 80013ec:	4286      	cmp	r6, r0
 80013ee:	d00f      	beq.n	8001410 <__eqdf2+0x54>
 80013f0:	2001      	movs	r0, #1
 80013f2:	42b1      	cmp	r1, r6
 80013f4:	d10d      	bne.n	8001412 <__eqdf2+0x56>
 80013f6:	45bc      	cmp	ip, r7
 80013f8:	d10b      	bne.n	8001412 <__eqdf2+0x56>
 80013fa:	4294      	cmp	r4, r2
 80013fc:	d109      	bne.n	8001412 <__eqdf2+0x56>
 80013fe:	45d3      	cmp	fp, sl
 8001400:	d01c      	beq.n	800143c <__eqdf2+0x80>
 8001402:	2900      	cmp	r1, #0
 8001404:	d105      	bne.n	8001412 <__eqdf2+0x56>
 8001406:	4660      	mov	r0, ip
 8001408:	4320      	orrs	r0, r4
 800140a:	1e43      	subs	r3, r0, #1
 800140c:	4198      	sbcs	r0, r3
 800140e:	e000      	b.n	8001412 <__eqdf2+0x56>
 8001410:	2001      	movs	r0, #1
 8001412:	bcf0      	pop	{r4, r5, r6, r7}
 8001414:	46bb      	mov	fp, r7
 8001416:	46b2      	mov	sl, r6
 8001418:	46a9      	mov	r9, r5
 800141a:	46a0      	mov	r8, r4
 800141c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800141e:	2001      	movs	r0, #1
 8001420:	428e      	cmp	r6, r1
 8001422:	d1f6      	bne.n	8001412 <__eqdf2+0x56>
 8001424:	4661      	mov	r1, ip
 8001426:	4339      	orrs	r1, r7
 8001428:	000f      	movs	r7, r1
 800142a:	4317      	orrs	r7, r2
 800142c:	4327      	orrs	r7, r4
 800142e:	d1f0      	bne.n	8001412 <__eqdf2+0x56>
 8001430:	465b      	mov	r3, fp
 8001432:	4652      	mov	r2, sl
 8001434:	1a98      	subs	r0, r3, r2
 8001436:	1e43      	subs	r3, r0, #1
 8001438:	4198      	sbcs	r0, r3
 800143a:	e7ea      	b.n	8001412 <__eqdf2+0x56>
 800143c:	2000      	movs	r0, #0
 800143e:	e7e8      	b.n	8001412 <__eqdf2+0x56>
 8001440:	000007ff 	.word	0x000007ff

08001444 <__gedf2>:
 8001444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001446:	4657      	mov	r7, sl
 8001448:	464e      	mov	r6, r9
 800144a:	4645      	mov	r5, r8
 800144c:	46de      	mov	lr, fp
 800144e:	b5e0      	push	{r5, r6, r7, lr}
 8001450:	000d      	movs	r5, r1
 8001452:	030f      	lsls	r7, r1, #12
 8001454:	0b39      	lsrs	r1, r7, #12
 8001456:	b083      	sub	sp, #12
 8001458:	0004      	movs	r4, r0
 800145a:	4680      	mov	r8, r0
 800145c:	9101      	str	r1, [sp, #4]
 800145e:	0058      	lsls	r0, r3, #1
 8001460:	0fe9      	lsrs	r1, r5, #31
 8001462:	4f31      	ldr	r7, [pc, #196]	@ (8001528 <__gedf2+0xe4>)
 8001464:	0d40      	lsrs	r0, r0, #21
 8001466:	468c      	mov	ip, r1
 8001468:	006e      	lsls	r6, r5, #1
 800146a:	0319      	lsls	r1, r3, #12
 800146c:	4682      	mov	sl, r0
 800146e:	4691      	mov	r9, r2
 8001470:	0d76      	lsrs	r6, r6, #21
 8001472:	0b09      	lsrs	r1, r1, #12
 8001474:	0fd8      	lsrs	r0, r3, #31
 8001476:	42be      	cmp	r6, r7
 8001478:	d01f      	beq.n	80014ba <__gedf2+0x76>
 800147a:	45ba      	cmp	sl, r7
 800147c:	d00f      	beq.n	800149e <__gedf2+0x5a>
 800147e:	2e00      	cmp	r6, #0
 8001480:	d12f      	bne.n	80014e2 <__gedf2+0x9e>
 8001482:	4655      	mov	r5, sl
 8001484:	9e01      	ldr	r6, [sp, #4]
 8001486:	4334      	orrs	r4, r6
 8001488:	2d00      	cmp	r5, #0
 800148a:	d127      	bne.n	80014dc <__gedf2+0x98>
 800148c:	430a      	orrs	r2, r1
 800148e:	d03a      	beq.n	8001506 <__gedf2+0xc2>
 8001490:	2c00      	cmp	r4, #0
 8001492:	d145      	bne.n	8001520 <__gedf2+0xdc>
 8001494:	2800      	cmp	r0, #0
 8001496:	d11a      	bne.n	80014ce <__gedf2+0x8a>
 8001498:	2001      	movs	r0, #1
 800149a:	4240      	negs	r0, r0
 800149c:	e017      	b.n	80014ce <__gedf2+0x8a>
 800149e:	4311      	orrs	r1, r2
 80014a0:	d13b      	bne.n	800151a <__gedf2+0xd6>
 80014a2:	2e00      	cmp	r6, #0
 80014a4:	d102      	bne.n	80014ac <__gedf2+0x68>
 80014a6:	9f01      	ldr	r7, [sp, #4]
 80014a8:	4327      	orrs	r7, r4
 80014aa:	d0f3      	beq.n	8001494 <__gedf2+0x50>
 80014ac:	4584      	cmp	ip, r0
 80014ae:	d109      	bne.n	80014c4 <__gedf2+0x80>
 80014b0:	4663      	mov	r3, ip
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f0      	beq.n	8001498 <__gedf2+0x54>
 80014b6:	4660      	mov	r0, ip
 80014b8:	e009      	b.n	80014ce <__gedf2+0x8a>
 80014ba:	9f01      	ldr	r7, [sp, #4]
 80014bc:	4327      	orrs	r7, r4
 80014be:	d12c      	bne.n	800151a <__gedf2+0xd6>
 80014c0:	45b2      	cmp	sl, r6
 80014c2:	d024      	beq.n	800150e <__gedf2+0xca>
 80014c4:	4663      	mov	r3, ip
 80014c6:	2002      	movs	r0, #2
 80014c8:	3b01      	subs	r3, #1
 80014ca:	4018      	ands	r0, r3
 80014cc:	3801      	subs	r0, #1
 80014ce:	b003      	add	sp, #12
 80014d0:	bcf0      	pop	{r4, r5, r6, r7}
 80014d2:	46bb      	mov	fp, r7
 80014d4:	46b2      	mov	sl, r6
 80014d6:	46a9      	mov	r9, r5
 80014d8:	46a0      	mov	r8, r4
 80014da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014dc:	2c00      	cmp	r4, #0
 80014de:	d0d9      	beq.n	8001494 <__gedf2+0x50>
 80014e0:	e7e4      	b.n	80014ac <__gedf2+0x68>
 80014e2:	4654      	mov	r4, sl
 80014e4:	2c00      	cmp	r4, #0
 80014e6:	d0ed      	beq.n	80014c4 <__gedf2+0x80>
 80014e8:	4584      	cmp	ip, r0
 80014ea:	d1eb      	bne.n	80014c4 <__gedf2+0x80>
 80014ec:	4556      	cmp	r6, sl
 80014ee:	dce9      	bgt.n	80014c4 <__gedf2+0x80>
 80014f0:	dbde      	blt.n	80014b0 <__gedf2+0x6c>
 80014f2:	9b01      	ldr	r3, [sp, #4]
 80014f4:	428b      	cmp	r3, r1
 80014f6:	d8e5      	bhi.n	80014c4 <__gedf2+0x80>
 80014f8:	d1da      	bne.n	80014b0 <__gedf2+0x6c>
 80014fa:	45c8      	cmp	r8, r9
 80014fc:	d8e2      	bhi.n	80014c4 <__gedf2+0x80>
 80014fe:	2000      	movs	r0, #0
 8001500:	45c8      	cmp	r8, r9
 8001502:	d2e4      	bcs.n	80014ce <__gedf2+0x8a>
 8001504:	e7d4      	b.n	80014b0 <__gedf2+0x6c>
 8001506:	2000      	movs	r0, #0
 8001508:	2c00      	cmp	r4, #0
 800150a:	d0e0      	beq.n	80014ce <__gedf2+0x8a>
 800150c:	e7da      	b.n	80014c4 <__gedf2+0x80>
 800150e:	4311      	orrs	r1, r2
 8001510:	d103      	bne.n	800151a <__gedf2+0xd6>
 8001512:	4584      	cmp	ip, r0
 8001514:	d1d6      	bne.n	80014c4 <__gedf2+0x80>
 8001516:	2000      	movs	r0, #0
 8001518:	e7d9      	b.n	80014ce <__gedf2+0x8a>
 800151a:	2002      	movs	r0, #2
 800151c:	4240      	negs	r0, r0
 800151e:	e7d6      	b.n	80014ce <__gedf2+0x8a>
 8001520:	4584      	cmp	ip, r0
 8001522:	d0e6      	beq.n	80014f2 <__gedf2+0xae>
 8001524:	e7ce      	b.n	80014c4 <__gedf2+0x80>
 8001526:	46c0      	nop			@ (mov r8, r8)
 8001528:	000007ff 	.word	0x000007ff

0800152c <__ledf2>:
 800152c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800152e:	4657      	mov	r7, sl
 8001530:	464e      	mov	r6, r9
 8001532:	4645      	mov	r5, r8
 8001534:	46de      	mov	lr, fp
 8001536:	b5e0      	push	{r5, r6, r7, lr}
 8001538:	000d      	movs	r5, r1
 800153a:	030f      	lsls	r7, r1, #12
 800153c:	0004      	movs	r4, r0
 800153e:	4680      	mov	r8, r0
 8001540:	0fe8      	lsrs	r0, r5, #31
 8001542:	0b39      	lsrs	r1, r7, #12
 8001544:	4684      	mov	ip, r0
 8001546:	b083      	sub	sp, #12
 8001548:	0058      	lsls	r0, r3, #1
 800154a:	4f30      	ldr	r7, [pc, #192]	@ (800160c <__ledf2+0xe0>)
 800154c:	0d40      	lsrs	r0, r0, #21
 800154e:	9101      	str	r1, [sp, #4]
 8001550:	031e      	lsls	r6, r3, #12
 8001552:	0069      	lsls	r1, r5, #1
 8001554:	4682      	mov	sl, r0
 8001556:	4691      	mov	r9, r2
 8001558:	0d49      	lsrs	r1, r1, #21
 800155a:	0b36      	lsrs	r6, r6, #12
 800155c:	0fd8      	lsrs	r0, r3, #31
 800155e:	42b9      	cmp	r1, r7
 8001560:	d020      	beq.n	80015a4 <__ledf2+0x78>
 8001562:	45ba      	cmp	sl, r7
 8001564:	d00f      	beq.n	8001586 <__ledf2+0x5a>
 8001566:	2900      	cmp	r1, #0
 8001568:	d12b      	bne.n	80015c2 <__ledf2+0x96>
 800156a:	9901      	ldr	r1, [sp, #4]
 800156c:	430c      	orrs	r4, r1
 800156e:	4651      	mov	r1, sl
 8001570:	2900      	cmp	r1, #0
 8001572:	d137      	bne.n	80015e4 <__ledf2+0xb8>
 8001574:	4332      	orrs	r2, r6
 8001576:	d038      	beq.n	80015ea <__ledf2+0xbe>
 8001578:	2c00      	cmp	r4, #0
 800157a:	d144      	bne.n	8001606 <__ledf2+0xda>
 800157c:	2800      	cmp	r0, #0
 800157e:	d119      	bne.n	80015b4 <__ledf2+0x88>
 8001580:	2001      	movs	r0, #1
 8001582:	4240      	negs	r0, r0
 8001584:	e016      	b.n	80015b4 <__ledf2+0x88>
 8001586:	4316      	orrs	r6, r2
 8001588:	d113      	bne.n	80015b2 <__ledf2+0x86>
 800158a:	2900      	cmp	r1, #0
 800158c:	d102      	bne.n	8001594 <__ledf2+0x68>
 800158e:	9f01      	ldr	r7, [sp, #4]
 8001590:	4327      	orrs	r7, r4
 8001592:	d0f3      	beq.n	800157c <__ledf2+0x50>
 8001594:	4584      	cmp	ip, r0
 8001596:	d020      	beq.n	80015da <__ledf2+0xae>
 8001598:	4663      	mov	r3, ip
 800159a:	2002      	movs	r0, #2
 800159c:	3b01      	subs	r3, #1
 800159e:	4018      	ands	r0, r3
 80015a0:	3801      	subs	r0, #1
 80015a2:	e007      	b.n	80015b4 <__ledf2+0x88>
 80015a4:	9f01      	ldr	r7, [sp, #4]
 80015a6:	4327      	orrs	r7, r4
 80015a8:	d103      	bne.n	80015b2 <__ledf2+0x86>
 80015aa:	458a      	cmp	sl, r1
 80015ac:	d1f4      	bne.n	8001598 <__ledf2+0x6c>
 80015ae:	4316      	orrs	r6, r2
 80015b0:	d01f      	beq.n	80015f2 <__ledf2+0xc6>
 80015b2:	2002      	movs	r0, #2
 80015b4:	b003      	add	sp, #12
 80015b6:	bcf0      	pop	{r4, r5, r6, r7}
 80015b8:	46bb      	mov	fp, r7
 80015ba:	46b2      	mov	sl, r6
 80015bc:	46a9      	mov	r9, r5
 80015be:	46a0      	mov	r8, r4
 80015c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015c2:	4654      	mov	r4, sl
 80015c4:	2c00      	cmp	r4, #0
 80015c6:	d0e7      	beq.n	8001598 <__ledf2+0x6c>
 80015c8:	4584      	cmp	ip, r0
 80015ca:	d1e5      	bne.n	8001598 <__ledf2+0x6c>
 80015cc:	4551      	cmp	r1, sl
 80015ce:	dce3      	bgt.n	8001598 <__ledf2+0x6c>
 80015d0:	db03      	blt.n	80015da <__ledf2+0xae>
 80015d2:	9b01      	ldr	r3, [sp, #4]
 80015d4:	42b3      	cmp	r3, r6
 80015d6:	d8df      	bhi.n	8001598 <__ledf2+0x6c>
 80015d8:	d00f      	beq.n	80015fa <__ledf2+0xce>
 80015da:	4663      	mov	r3, ip
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0cf      	beq.n	8001580 <__ledf2+0x54>
 80015e0:	4660      	mov	r0, ip
 80015e2:	e7e7      	b.n	80015b4 <__ledf2+0x88>
 80015e4:	2c00      	cmp	r4, #0
 80015e6:	d0c9      	beq.n	800157c <__ledf2+0x50>
 80015e8:	e7d4      	b.n	8001594 <__ledf2+0x68>
 80015ea:	2000      	movs	r0, #0
 80015ec:	2c00      	cmp	r4, #0
 80015ee:	d0e1      	beq.n	80015b4 <__ledf2+0x88>
 80015f0:	e7d2      	b.n	8001598 <__ledf2+0x6c>
 80015f2:	4584      	cmp	ip, r0
 80015f4:	d1d0      	bne.n	8001598 <__ledf2+0x6c>
 80015f6:	2000      	movs	r0, #0
 80015f8:	e7dc      	b.n	80015b4 <__ledf2+0x88>
 80015fa:	45c8      	cmp	r8, r9
 80015fc:	d8cc      	bhi.n	8001598 <__ledf2+0x6c>
 80015fe:	2000      	movs	r0, #0
 8001600:	45c8      	cmp	r8, r9
 8001602:	d2d7      	bcs.n	80015b4 <__ledf2+0x88>
 8001604:	e7e9      	b.n	80015da <__ledf2+0xae>
 8001606:	4584      	cmp	ip, r0
 8001608:	d0e3      	beq.n	80015d2 <__ledf2+0xa6>
 800160a:	e7c5      	b.n	8001598 <__ledf2+0x6c>
 800160c:	000007ff 	.word	0x000007ff

08001610 <__aeabi_dmul>:
 8001610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001612:	4657      	mov	r7, sl
 8001614:	46de      	mov	lr, fp
 8001616:	464e      	mov	r6, r9
 8001618:	4645      	mov	r5, r8
 800161a:	b5e0      	push	{r5, r6, r7, lr}
 800161c:	001f      	movs	r7, r3
 800161e:	030b      	lsls	r3, r1, #12
 8001620:	0b1b      	lsrs	r3, r3, #12
 8001622:	0016      	movs	r6, r2
 8001624:	469a      	mov	sl, r3
 8001626:	0fca      	lsrs	r2, r1, #31
 8001628:	004b      	lsls	r3, r1, #1
 800162a:	0004      	movs	r4, r0
 800162c:	4693      	mov	fp, r2
 800162e:	b087      	sub	sp, #28
 8001630:	0d5b      	lsrs	r3, r3, #21
 8001632:	d100      	bne.n	8001636 <__aeabi_dmul+0x26>
 8001634:	e0d5      	b.n	80017e2 <__aeabi_dmul+0x1d2>
 8001636:	4abb      	ldr	r2, [pc, #748]	@ (8001924 <__aeabi_dmul+0x314>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d100      	bne.n	800163e <__aeabi_dmul+0x2e>
 800163c:	e0f8      	b.n	8001830 <__aeabi_dmul+0x220>
 800163e:	4651      	mov	r1, sl
 8001640:	0f42      	lsrs	r2, r0, #29
 8001642:	00c9      	lsls	r1, r1, #3
 8001644:	430a      	orrs	r2, r1
 8001646:	2180      	movs	r1, #128	@ 0x80
 8001648:	0409      	lsls	r1, r1, #16
 800164a:	4311      	orrs	r1, r2
 800164c:	00c2      	lsls	r2, r0, #3
 800164e:	4691      	mov	r9, r2
 8001650:	4ab5      	ldr	r2, [pc, #724]	@ (8001928 <__aeabi_dmul+0x318>)
 8001652:	468a      	mov	sl, r1
 8001654:	189d      	adds	r5, r3, r2
 8001656:	2300      	movs	r3, #0
 8001658:	4698      	mov	r8, r3
 800165a:	9302      	str	r3, [sp, #8]
 800165c:	033c      	lsls	r4, r7, #12
 800165e:	007b      	lsls	r3, r7, #1
 8001660:	0ffa      	lsrs	r2, r7, #31
 8001662:	0030      	movs	r0, r6
 8001664:	0b24      	lsrs	r4, r4, #12
 8001666:	0d5b      	lsrs	r3, r3, #21
 8001668:	9200      	str	r2, [sp, #0]
 800166a:	d100      	bne.n	800166e <__aeabi_dmul+0x5e>
 800166c:	e096      	b.n	800179c <__aeabi_dmul+0x18c>
 800166e:	4aad      	ldr	r2, [pc, #692]	@ (8001924 <__aeabi_dmul+0x314>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d031      	beq.n	80016d8 <__aeabi_dmul+0xc8>
 8001674:	0f72      	lsrs	r2, r6, #29
 8001676:	00e4      	lsls	r4, r4, #3
 8001678:	4322      	orrs	r2, r4
 800167a:	2480      	movs	r4, #128	@ 0x80
 800167c:	0424      	lsls	r4, r4, #16
 800167e:	4314      	orrs	r4, r2
 8001680:	4aa9      	ldr	r2, [pc, #676]	@ (8001928 <__aeabi_dmul+0x318>)
 8001682:	00f0      	lsls	r0, r6, #3
 8001684:	4694      	mov	ip, r2
 8001686:	4463      	add	r3, ip
 8001688:	195b      	adds	r3, r3, r5
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	9201      	str	r2, [sp, #4]
 800168e:	4642      	mov	r2, r8
 8001690:	2600      	movs	r6, #0
 8001692:	2a0a      	cmp	r2, #10
 8001694:	dc42      	bgt.n	800171c <__aeabi_dmul+0x10c>
 8001696:	465a      	mov	r2, fp
 8001698:	9900      	ldr	r1, [sp, #0]
 800169a:	404a      	eors	r2, r1
 800169c:	4693      	mov	fp, r2
 800169e:	4642      	mov	r2, r8
 80016a0:	2a02      	cmp	r2, #2
 80016a2:	dc32      	bgt.n	800170a <__aeabi_dmul+0xfa>
 80016a4:	3a01      	subs	r2, #1
 80016a6:	2a01      	cmp	r2, #1
 80016a8:	d900      	bls.n	80016ac <__aeabi_dmul+0x9c>
 80016aa:	e149      	b.n	8001940 <__aeabi_dmul+0x330>
 80016ac:	2e02      	cmp	r6, #2
 80016ae:	d100      	bne.n	80016b2 <__aeabi_dmul+0xa2>
 80016b0:	e0ca      	b.n	8001848 <__aeabi_dmul+0x238>
 80016b2:	2e01      	cmp	r6, #1
 80016b4:	d13d      	bne.n	8001732 <__aeabi_dmul+0x122>
 80016b6:	2300      	movs	r3, #0
 80016b8:	2400      	movs	r4, #0
 80016ba:	2200      	movs	r2, #0
 80016bc:	0010      	movs	r0, r2
 80016be:	465a      	mov	r2, fp
 80016c0:	051b      	lsls	r3, r3, #20
 80016c2:	4323      	orrs	r3, r4
 80016c4:	07d2      	lsls	r2, r2, #31
 80016c6:	4313      	orrs	r3, r2
 80016c8:	0019      	movs	r1, r3
 80016ca:	b007      	add	sp, #28
 80016cc:	bcf0      	pop	{r4, r5, r6, r7}
 80016ce:	46bb      	mov	fp, r7
 80016d0:	46b2      	mov	sl, r6
 80016d2:	46a9      	mov	r9, r5
 80016d4:	46a0      	mov	r8, r4
 80016d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016d8:	4b92      	ldr	r3, [pc, #584]	@ (8001924 <__aeabi_dmul+0x314>)
 80016da:	4326      	orrs	r6, r4
 80016dc:	18eb      	adds	r3, r5, r3
 80016de:	2e00      	cmp	r6, #0
 80016e0:	d100      	bne.n	80016e4 <__aeabi_dmul+0xd4>
 80016e2:	e0bb      	b.n	800185c <__aeabi_dmul+0x24c>
 80016e4:	2203      	movs	r2, #3
 80016e6:	4641      	mov	r1, r8
 80016e8:	4311      	orrs	r1, r2
 80016ea:	465a      	mov	r2, fp
 80016ec:	4688      	mov	r8, r1
 80016ee:	9900      	ldr	r1, [sp, #0]
 80016f0:	404a      	eors	r2, r1
 80016f2:	2180      	movs	r1, #128	@ 0x80
 80016f4:	0109      	lsls	r1, r1, #4
 80016f6:	468c      	mov	ip, r1
 80016f8:	0029      	movs	r1, r5
 80016fa:	4461      	add	r1, ip
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	4641      	mov	r1, r8
 8001700:	290a      	cmp	r1, #10
 8001702:	dd00      	ble.n	8001706 <__aeabi_dmul+0xf6>
 8001704:	e233      	b.n	8001b6e <__aeabi_dmul+0x55e>
 8001706:	4693      	mov	fp, r2
 8001708:	2603      	movs	r6, #3
 800170a:	4642      	mov	r2, r8
 800170c:	2701      	movs	r7, #1
 800170e:	4097      	lsls	r7, r2
 8001710:	21a6      	movs	r1, #166	@ 0xa6
 8001712:	003a      	movs	r2, r7
 8001714:	00c9      	lsls	r1, r1, #3
 8001716:	400a      	ands	r2, r1
 8001718:	420f      	tst	r7, r1
 800171a:	d031      	beq.n	8001780 <__aeabi_dmul+0x170>
 800171c:	9e02      	ldr	r6, [sp, #8]
 800171e:	2e02      	cmp	r6, #2
 8001720:	d100      	bne.n	8001724 <__aeabi_dmul+0x114>
 8001722:	e235      	b.n	8001b90 <__aeabi_dmul+0x580>
 8001724:	2e03      	cmp	r6, #3
 8001726:	d100      	bne.n	800172a <__aeabi_dmul+0x11a>
 8001728:	e1d2      	b.n	8001ad0 <__aeabi_dmul+0x4c0>
 800172a:	4654      	mov	r4, sl
 800172c:	4648      	mov	r0, r9
 800172e:	2e01      	cmp	r6, #1
 8001730:	d0c1      	beq.n	80016b6 <__aeabi_dmul+0xa6>
 8001732:	9a01      	ldr	r2, [sp, #4]
 8001734:	4b7d      	ldr	r3, [pc, #500]	@ (800192c <__aeabi_dmul+0x31c>)
 8001736:	4694      	mov	ip, r2
 8001738:	4463      	add	r3, ip
 800173a:	2b00      	cmp	r3, #0
 800173c:	dc00      	bgt.n	8001740 <__aeabi_dmul+0x130>
 800173e:	e0c0      	b.n	80018c2 <__aeabi_dmul+0x2b2>
 8001740:	0742      	lsls	r2, r0, #29
 8001742:	d009      	beq.n	8001758 <__aeabi_dmul+0x148>
 8001744:	220f      	movs	r2, #15
 8001746:	4002      	ands	r2, r0
 8001748:	2a04      	cmp	r2, #4
 800174a:	d005      	beq.n	8001758 <__aeabi_dmul+0x148>
 800174c:	1d02      	adds	r2, r0, #4
 800174e:	4282      	cmp	r2, r0
 8001750:	4180      	sbcs	r0, r0
 8001752:	4240      	negs	r0, r0
 8001754:	1824      	adds	r4, r4, r0
 8001756:	0010      	movs	r0, r2
 8001758:	01e2      	lsls	r2, r4, #7
 800175a:	d506      	bpl.n	800176a <__aeabi_dmul+0x15a>
 800175c:	4b74      	ldr	r3, [pc, #464]	@ (8001930 <__aeabi_dmul+0x320>)
 800175e:	9a01      	ldr	r2, [sp, #4]
 8001760:	401c      	ands	r4, r3
 8001762:	2380      	movs	r3, #128	@ 0x80
 8001764:	4694      	mov	ip, r2
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	4463      	add	r3, ip
 800176a:	4a72      	ldr	r2, [pc, #456]	@ (8001934 <__aeabi_dmul+0x324>)
 800176c:	4293      	cmp	r3, r2
 800176e:	dc6b      	bgt.n	8001848 <__aeabi_dmul+0x238>
 8001770:	0762      	lsls	r2, r4, #29
 8001772:	08c0      	lsrs	r0, r0, #3
 8001774:	0264      	lsls	r4, r4, #9
 8001776:	055b      	lsls	r3, r3, #21
 8001778:	4302      	orrs	r2, r0
 800177a:	0b24      	lsrs	r4, r4, #12
 800177c:	0d5b      	lsrs	r3, r3, #21
 800177e:	e79d      	b.n	80016bc <__aeabi_dmul+0xac>
 8001780:	2190      	movs	r1, #144	@ 0x90
 8001782:	0089      	lsls	r1, r1, #2
 8001784:	420f      	tst	r7, r1
 8001786:	d163      	bne.n	8001850 <__aeabi_dmul+0x240>
 8001788:	2288      	movs	r2, #136	@ 0x88
 800178a:	423a      	tst	r2, r7
 800178c:	d100      	bne.n	8001790 <__aeabi_dmul+0x180>
 800178e:	e0d7      	b.n	8001940 <__aeabi_dmul+0x330>
 8001790:	9b00      	ldr	r3, [sp, #0]
 8001792:	46a2      	mov	sl, r4
 8001794:	469b      	mov	fp, r3
 8001796:	4681      	mov	r9, r0
 8001798:	9602      	str	r6, [sp, #8]
 800179a:	e7bf      	b.n	800171c <__aeabi_dmul+0x10c>
 800179c:	0023      	movs	r3, r4
 800179e:	4333      	orrs	r3, r6
 80017a0:	d100      	bne.n	80017a4 <__aeabi_dmul+0x194>
 80017a2:	e07f      	b.n	80018a4 <__aeabi_dmul+0x294>
 80017a4:	2c00      	cmp	r4, #0
 80017a6:	d100      	bne.n	80017aa <__aeabi_dmul+0x19a>
 80017a8:	e1ad      	b.n	8001b06 <__aeabi_dmul+0x4f6>
 80017aa:	0020      	movs	r0, r4
 80017ac:	f7fe fe60 	bl	8000470 <__clzsi2>
 80017b0:	0002      	movs	r2, r0
 80017b2:	0003      	movs	r3, r0
 80017b4:	3a0b      	subs	r2, #11
 80017b6:	201d      	movs	r0, #29
 80017b8:	0019      	movs	r1, r3
 80017ba:	1a82      	subs	r2, r0, r2
 80017bc:	0030      	movs	r0, r6
 80017be:	3908      	subs	r1, #8
 80017c0:	40d0      	lsrs	r0, r2
 80017c2:	408c      	lsls	r4, r1
 80017c4:	4304      	orrs	r4, r0
 80017c6:	0030      	movs	r0, r6
 80017c8:	4088      	lsls	r0, r1
 80017ca:	4a5b      	ldr	r2, [pc, #364]	@ (8001938 <__aeabi_dmul+0x328>)
 80017cc:	1aeb      	subs	r3, r5, r3
 80017ce:	4694      	mov	ip, r2
 80017d0:	4463      	add	r3, ip
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	9201      	str	r2, [sp, #4]
 80017d6:	4642      	mov	r2, r8
 80017d8:	2600      	movs	r6, #0
 80017da:	2a0a      	cmp	r2, #10
 80017dc:	dc00      	bgt.n	80017e0 <__aeabi_dmul+0x1d0>
 80017de:	e75a      	b.n	8001696 <__aeabi_dmul+0x86>
 80017e0:	e79c      	b.n	800171c <__aeabi_dmul+0x10c>
 80017e2:	4653      	mov	r3, sl
 80017e4:	4303      	orrs	r3, r0
 80017e6:	4699      	mov	r9, r3
 80017e8:	d054      	beq.n	8001894 <__aeabi_dmul+0x284>
 80017ea:	4653      	mov	r3, sl
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d100      	bne.n	80017f2 <__aeabi_dmul+0x1e2>
 80017f0:	e177      	b.n	8001ae2 <__aeabi_dmul+0x4d2>
 80017f2:	4650      	mov	r0, sl
 80017f4:	f7fe fe3c 	bl	8000470 <__clzsi2>
 80017f8:	230b      	movs	r3, #11
 80017fa:	425b      	negs	r3, r3
 80017fc:	469c      	mov	ip, r3
 80017fe:	0002      	movs	r2, r0
 8001800:	4484      	add	ip, r0
 8001802:	0011      	movs	r1, r2
 8001804:	4650      	mov	r0, sl
 8001806:	3908      	subs	r1, #8
 8001808:	4088      	lsls	r0, r1
 800180a:	231d      	movs	r3, #29
 800180c:	4680      	mov	r8, r0
 800180e:	4660      	mov	r0, ip
 8001810:	1a1b      	subs	r3, r3, r0
 8001812:	0020      	movs	r0, r4
 8001814:	40d8      	lsrs	r0, r3
 8001816:	0003      	movs	r3, r0
 8001818:	4640      	mov	r0, r8
 800181a:	4303      	orrs	r3, r0
 800181c:	469a      	mov	sl, r3
 800181e:	0023      	movs	r3, r4
 8001820:	408b      	lsls	r3, r1
 8001822:	4699      	mov	r9, r3
 8001824:	2300      	movs	r3, #0
 8001826:	4d44      	ldr	r5, [pc, #272]	@ (8001938 <__aeabi_dmul+0x328>)
 8001828:	4698      	mov	r8, r3
 800182a:	1aad      	subs	r5, r5, r2
 800182c:	9302      	str	r3, [sp, #8]
 800182e:	e715      	b.n	800165c <__aeabi_dmul+0x4c>
 8001830:	4652      	mov	r2, sl
 8001832:	4302      	orrs	r2, r0
 8001834:	4691      	mov	r9, r2
 8001836:	d126      	bne.n	8001886 <__aeabi_dmul+0x276>
 8001838:	2200      	movs	r2, #0
 800183a:	001d      	movs	r5, r3
 800183c:	2302      	movs	r3, #2
 800183e:	4692      	mov	sl, r2
 8001840:	3208      	adds	r2, #8
 8001842:	4690      	mov	r8, r2
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	e709      	b.n	800165c <__aeabi_dmul+0x4c>
 8001848:	2400      	movs	r4, #0
 800184a:	2200      	movs	r2, #0
 800184c:	4b35      	ldr	r3, [pc, #212]	@ (8001924 <__aeabi_dmul+0x314>)
 800184e:	e735      	b.n	80016bc <__aeabi_dmul+0xac>
 8001850:	2300      	movs	r3, #0
 8001852:	2480      	movs	r4, #128	@ 0x80
 8001854:	469b      	mov	fp, r3
 8001856:	0324      	lsls	r4, r4, #12
 8001858:	4b32      	ldr	r3, [pc, #200]	@ (8001924 <__aeabi_dmul+0x314>)
 800185a:	e72f      	b.n	80016bc <__aeabi_dmul+0xac>
 800185c:	2202      	movs	r2, #2
 800185e:	4641      	mov	r1, r8
 8001860:	4311      	orrs	r1, r2
 8001862:	2280      	movs	r2, #128	@ 0x80
 8001864:	0112      	lsls	r2, r2, #4
 8001866:	4694      	mov	ip, r2
 8001868:	002a      	movs	r2, r5
 800186a:	4462      	add	r2, ip
 800186c:	4688      	mov	r8, r1
 800186e:	9201      	str	r2, [sp, #4]
 8001870:	290a      	cmp	r1, #10
 8001872:	dd00      	ble.n	8001876 <__aeabi_dmul+0x266>
 8001874:	e752      	b.n	800171c <__aeabi_dmul+0x10c>
 8001876:	465a      	mov	r2, fp
 8001878:	2000      	movs	r0, #0
 800187a:	9900      	ldr	r1, [sp, #0]
 800187c:	0004      	movs	r4, r0
 800187e:	404a      	eors	r2, r1
 8001880:	4693      	mov	fp, r2
 8001882:	2602      	movs	r6, #2
 8001884:	e70b      	b.n	800169e <__aeabi_dmul+0x8e>
 8001886:	220c      	movs	r2, #12
 8001888:	001d      	movs	r5, r3
 800188a:	2303      	movs	r3, #3
 800188c:	4681      	mov	r9, r0
 800188e:	4690      	mov	r8, r2
 8001890:	9302      	str	r3, [sp, #8]
 8001892:	e6e3      	b.n	800165c <__aeabi_dmul+0x4c>
 8001894:	2300      	movs	r3, #0
 8001896:	469a      	mov	sl, r3
 8001898:	3304      	adds	r3, #4
 800189a:	4698      	mov	r8, r3
 800189c:	3b03      	subs	r3, #3
 800189e:	2500      	movs	r5, #0
 80018a0:	9302      	str	r3, [sp, #8]
 80018a2:	e6db      	b.n	800165c <__aeabi_dmul+0x4c>
 80018a4:	4642      	mov	r2, r8
 80018a6:	3301      	adds	r3, #1
 80018a8:	431a      	orrs	r2, r3
 80018aa:	002b      	movs	r3, r5
 80018ac:	4690      	mov	r8, r2
 80018ae:	1c5a      	adds	r2, r3, #1
 80018b0:	9201      	str	r2, [sp, #4]
 80018b2:	4642      	mov	r2, r8
 80018b4:	2400      	movs	r4, #0
 80018b6:	2000      	movs	r0, #0
 80018b8:	2601      	movs	r6, #1
 80018ba:	2a0a      	cmp	r2, #10
 80018bc:	dc00      	bgt.n	80018c0 <__aeabi_dmul+0x2b0>
 80018be:	e6ea      	b.n	8001696 <__aeabi_dmul+0x86>
 80018c0:	e72c      	b.n	800171c <__aeabi_dmul+0x10c>
 80018c2:	2201      	movs	r2, #1
 80018c4:	1ad2      	subs	r2, r2, r3
 80018c6:	2a38      	cmp	r2, #56	@ 0x38
 80018c8:	dd00      	ble.n	80018cc <__aeabi_dmul+0x2bc>
 80018ca:	e6f4      	b.n	80016b6 <__aeabi_dmul+0xa6>
 80018cc:	2a1f      	cmp	r2, #31
 80018ce:	dc00      	bgt.n	80018d2 <__aeabi_dmul+0x2c2>
 80018d0:	e12a      	b.n	8001b28 <__aeabi_dmul+0x518>
 80018d2:	211f      	movs	r1, #31
 80018d4:	4249      	negs	r1, r1
 80018d6:	1acb      	subs	r3, r1, r3
 80018d8:	0021      	movs	r1, r4
 80018da:	40d9      	lsrs	r1, r3
 80018dc:	000b      	movs	r3, r1
 80018de:	2a20      	cmp	r2, #32
 80018e0:	d005      	beq.n	80018ee <__aeabi_dmul+0x2de>
 80018e2:	4a16      	ldr	r2, [pc, #88]	@ (800193c <__aeabi_dmul+0x32c>)
 80018e4:	9d01      	ldr	r5, [sp, #4]
 80018e6:	4694      	mov	ip, r2
 80018e8:	4465      	add	r5, ip
 80018ea:	40ac      	lsls	r4, r5
 80018ec:	4320      	orrs	r0, r4
 80018ee:	1e42      	subs	r2, r0, #1
 80018f0:	4190      	sbcs	r0, r2
 80018f2:	4318      	orrs	r0, r3
 80018f4:	2307      	movs	r3, #7
 80018f6:	0019      	movs	r1, r3
 80018f8:	2400      	movs	r4, #0
 80018fa:	4001      	ands	r1, r0
 80018fc:	4203      	tst	r3, r0
 80018fe:	d00c      	beq.n	800191a <__aeabi_dmul+0x30a>
 8001900:	230f      	movs	r3, #15
 8001902:	4003      	ands	r3, r0
 8001904:	2b04      	cmp	r3, #4
 8001906:	d100      	bne.n	800190a <__aeabi_dmul+0x2fa>
 8001908:	e140      	b.n	8001b8c <__aeabi_dmul+0x57c>
 800190a:	1d03      	adds	r3, r0, #4
 800190c:	4283      	cmp	r3, r0
 800190e:	41a4      	sbcs	r4, r4
 8001910:	0018      	movs	r0, r3
 8001912:	4264      	negs	r4, r4
 8001914:	0761      	lsls	r1, r4, #29
 8001916:	0264      	lsls	r4, r4, #9
 8001918:	0b24      	lsrs	r4, r4, #12
 800191a:	08c2      	lsrs	r2, r0, #3
 800191c:	2300      	movs	r3, #0
 800191e:	430a      	orrs	r2, r1
 8001920:	e6cc      	b.n	80016bc <__aeabi_dmul+0xac>
 8001922:	46c0      	nop			@ (mov r8, r8)
 8001924:	000007ff 	.word	0x000007ff
 8001928:	fffffc01 	.word	0xfffffc01
 800192c:	000003ff 	.word	0x000003ff
 8001930:	feffffff 	.word	0xfeffffff
 8001934:	000007fe 	.word	0x000007fe
 8001938:	fffffc0d 	.word	0xfffffc0d
 800193c:	0000043e 	.word	0x0000043e
 8001940:	4649      	mov	r1, r9
 8001942:	464a      	mov	r2, r9
 8001944:	0409      	lsls	r1, r1, #16
 8001946:	0c09      	lsrs	r1, r1, #16
 8001948:	000d      	movs	r5, r1
 800194a:	0c16      	lsrs	r6, r2, #16
 800194c:	0c02      	lsrs	r2, r0, #16
 800194e:	0400      	lsls	r0, r0, #16
 8001950:	0c00      	lsrs	r0, r0, #16
 8001952:	4345      	muls	r5, r0
 8001954:	46ac      	mov	ip, r5
 8001956:	0005      	movs	r5, r0
 8001958:	4375      	muls	r5, r6
 800195a:	46a8      	mov	r8, r5
 800195c:	0015      	movs	r5, r2
 800195e:	000f      	movs	r7, r1
 8001960:	4375      	muls	r5, r6
 8001962:	9200      	str	r2, [sp, #0]
 8001964:	9502      	str	r5, [sp, #8]
 8001966:	002a      	movs	r2, r5
 8001968:	9d00      	ldr	r5, [sp, #0]
 800196a:	436f      	muls	r7, r5
 800196c:	4665      	mov	r5, ip
 800196e:	0c2d      	lsrs	r5, r5, #16
 8001970:	46a9      	mov	r9, r5
 8001972:	4447      	add	r7, r8
 8001974:	444f      	add	r7, r9
 8001976:	45b8      	cmp	r8, r7
 8001978:	d905      	bls.n	8001986 <__aeabi_dmul+0x376>
 800197a:	0015      	movs	r5, r2
 800197c:	2280      	movs	r2, #128	@ 0x80
 800197e:	0252      	lsls	r2, r2, #9
 8001980:	4690      	mov	r8, r2
 8001982:	4445      	add	r5, r8
 8001984:	9502      	str	r5, [sp, #8]
 8001986:	0c3d      	lsrs	r5, r7, #16
 8001988:	9503      	str	r5, [sp, #12]
 800198a:	4665      	mov	r5, ip
 800198c:	042d      	lsls	r5, r5, #16
 800198e:	043f      	lsls	r7, r7, #16
 8001990:	0c2d      	lsrs	r5, r5, #16
 8001992:	46ac      	mov	ip, r5
 8001994:	003d      	movs	r5, r7
 8001996:	4465      	add	r5, ip
 8001998:	9504      	str	r5, [sp, #16]
 800199a:	0c25      	lsrs	r5, r4, #16
 800199c:	0424      	lsls	r4, r4, #16
 800199e:	0c24      	lsrs	r4, r4, #16
 80019a0:	46ac      	mov	ip, r5
 80019a2:	0025      	movs	r5, r4
 80019a4:	4375      	muls	r5, r6
 80019a6:	46a8      	mov	r8, r5
 80019a8:	4665      	mov	r5, ip
 80019aa:	000f      	movs	r7, r1
 80019ac:	4369      	muls	r1, r5
 80019ae:	4441      	add	r1, r8
 80019b0:	4689      	mov	r9, r1
 80019b2:	4367      	muls	r7, r4
 80019b4:	0c39      	lsrs	r1, r7, #16
 80019b6:	4449      	add	r1, r9
 80019b8:	436e      	muls	r6, r5
 80019ba:	4588      	cmp	r8, r1
 80019bc:	d903      	bls.n	80019c6 <__aeabi_dmul+0x3b6>
 80019be:	2280      	movs	r2, #128	@ 0x80
 80019c0:	0252      	lsls	r2, r2, #9
 80019c2:	4690      	mov	r8, r2
 80019c4:	4446      	add	r6, r8
 80019c6:	0c0d      	lsrs	r5, r1, #16
 80019c8:	46a8      	mov	r8, r5
 80019ca:	0035      	movs	r5, r6
 80019cc:	4445      	add	r5, r8
 80019ce:	9505      	str	r5, [sp, #20]
 80019d0:	9d03      	ldr	r5, [sp, #12]
 80019d2:	043f      	lsls	r7, r7, #16
 80019d4:	46a8      	mov	r8, r5
 80019d6:	0c3f      	lsrs	r7, r7, #16
 80019d8:	0409      	lsls	r1, r1, #16
 80019da:	19c9      	adds	r1, r1, r7
 80019dc:	4488      	add	r8, r1
 80019de:	4645      	mov	r5, r8
 80019e0:	9503      	str	r5, [sp, #12]
 80019e2:	4655      	mov	r5, sl
 80019e4:	042e      	lsls	r6, r5, #16
 80019e6:	0c36      	lsrs	r6, r6, #16
 80019e8:	0c2f      	lsrs	r7, r5, #16
 80019ea:	0035      	movs	r5, r6
 80019ec:	4345      	muls	r5, r0
 80019ee:	4378      	muls	r0, r7
 80019f0:	4681      	mov	r9, r0
 80019f2:	0038      	movs	r0, r7
 80019f4:	46a8      	mov	r8, r5
 80019f6:	0c2d      	lsrs	r5, r5, #16
 80019f8:	46aa      	mov	sl, r5
 80019fa:	9a00      	ldr	r2, [sp, #0]
 80019fc:	4350      	muls	r0, r2
 80019fe:	4372      	muls	r2, r6
 8001a00:	444a      	add	r2, r9
 8001a02:	4452      	add	r2, sl
 8001a04:	4591      	cmp	r9, r2
 8001a06:	d903      	bls.n	8001a10 <__aeabi_dmul+0x400>
 8001a08:	2580      	movs	r5, #128	@ 0x80
 8001a0a:	026d      	lsls	r5, r5, #9
 8001a0c:	46a9      	mov	r9, r5
 8001a0e:	4448      	add	r0, r9
 8001a10:	0c15      	lsrs	r5, r2, #16
 8001a12:	46a9      	mov	r9, r5
 8001a14:	4645      	mov	r5, r8
 8001a16:	042d      	lsls	r5, r5, #16
 8001a18:	0c2d      	lsrs	r5, r5, #16
 8001a1a:	46a8      	mov	r8, r5
 8001a1c:	4665      	mov	r5, ip
 8001a1e:	437d      	muls	r5, r7
 8001a20:	0412      	lsls	r2, r2, #16
 8001a22:	4448      	add	r0, r9
 8001a24:	4490      	add	r8, r2
 8001a26:	46a9      	mov	r9, r5
 8001a28:	0032      	movs	r2, r6
 8001a2a:	4665      	mov	r5, ip
 8001a2c:	4362      	muls	r2, r4
 8001a2e:	436e      	muls	r6, r5
 8001a30:	437c      	muls	r4, r7
 8001a32:	0c17      	lsrs	r7, r2, #16
 8001a34:	1936      	adds	r6, r6, r4
 8001a36:	19bf      	adds	r7, r7, r6
 8001a38:	42bc      	cmp	r4, r7
 8001a3a:	d903      	bls.n	8001a44 <__aeabi_dmul+0x434>
 8001a3c:	2480      	movs	r4, #128	@ 0x80
 8001a3e:	0264      	lsls	r4, r4, #9
 8001a40:	46a4      	mov	ip, r4
 8001a42:	44e1      	add	r9, ip
 8001a44:	9c02      	ldr	r4, [sp, #8]
 8001a46:	9e03      	ldr	r6, [sp, #12]
 8001a48:	46a4      	mov	ip, r4
 8001a4a:	9d05      	ldr	r5, [sp, #20]
 8001a4c:	4466      	add	r6, ip
 8001a4e:	428e      	cmp	r6, r1
 8001a50:	4189      	sbcs	r1, r1
 8001a52:	46ac      	mov	ip, r5
 8001a54:	0412      	lsls	r2, r2, #16
 8001a56:	043c      	lsls	r4, r7, #16
 8001a58:	0c12      	lsrs	r2, r2, #16
 8001a5a:	18a2      	adds	r2, r4, r2
 8001a5c:	4462      	add	r2, ip
 8001a5e:	4249      	negs	r1, r1
 8001a60:	1854      	adds	r4, r2, r1
 8001a62:	4446      	add	r6, r8
 8001a64:	46a4      	mov	ip, r4
 8001a66:	4546      	cmp	r6, r8
 8001a68:	41a4      	sbcs	r4, r4
 8001a6a:	4682      	mov	sl, r0
 8001a6c:	4264      	negs	r4, r4
 8001a6e:	46a0      	mov	r8, r4
 8001a70:	42aa      	cmp	r2, r5
 8001a72:	4192      	sbcs	r2, r2
 8001a74:	458c      	cmp	ip, r1
 8001a76:	4189      	sbcs	r1, r1
 8001a78:	44e2      	add	sl, ip
 8001a7a:	44d0      	add	r8, sl
 8001a7c:	4249      	negs	r1, r1
 8001a7e:	4252      	negs	r2, r2
 8001a80:	430a      	orrs	r2, r1
 8001a82:	45a0      	cmp	r8, r4
 8001a84:	41a4      	sbcs	r4, r4
 8001a86:	4582      	cmp	sl, r0
 8001a88:	4189      	sbcs	r1, r1
 8001a8a:	4264      	negs	r4, r4
 8001a8c:	4249      	negs	r1, r1
 8001a8e:	430c      	orrs	r4, r1
 8001a90:	4641      	mov	r1, r8
 8001a92:	0c3f      	lsrs	r7, r7, #16
 8001a94:	19d2      	adds	r2, r2, r7
 8001a96:	1912      	adds	r2, r2, r4
 8001a98:	0dcc      	lsrs	r4, r1, #23
 8001a9a:	9904      	ldr	r1, [sp, #16]
 8001a9c:	0270      	lsls	r0, r6, #9
 8001a9e:	4308      	orrs	r0, r1
 8001aa0:	1e41      	subs	r1, r0, #1
 8001aa2:	4188      	sbcs	r0, r1
 8001aa4:	4641      	mov	r1, r8
 8001aa6:	444a      	add	r2, r9
 8001aa8:	0df6      	lsrs	r6, r6, #23
 8001aaa:	0252      	lsls	r2, r2, #9
 8001aac:	4330      	orrs	r0, r6
 8001aae:	0249      	lsls	r1, r1, #9
 8001ab0:	4314      	orrs	r4, r2
 8001ab2:	4308      	orrs	r0, r1
 8001ab4:	01d2      	lsls	r2, r2, #7
 8001ab6:	d535      	bpl.n	8001b24 <__aeabi_dmul+0x514>
 8001ab8:	2201      	movs	r2, #1
 8001aba:	0843      	lsrs	r3, r0, #1
 8001abc:	4002      	ands	r2, r0
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	07e0      	lsls	r0, r4, #31
 8001ac2:	4318      	orrs	r0, r3
 8001ac4:	0864      	lsrs	r4, r4, #1
 8001ac6:	e634      	b.n	8001732 <__aeabi_dmul+0x122>
 8001ac8:	9b00      	ldr	r3, [sp, #0]
 8001aca:	46a2      	mov	sl, r4
 8001acc:	469b      	mov	fp, r3
 8001ace:	4681      	mov	r9, r0
 8001ad0:	2480      	movs	r4, #128	@ 0x80
 8001ad2:	4653      	mov	r3, sl
 8001ad4:	0324      	lsls	r4, r4, #12
 8001ad6:	431c      	orrs	r4, r3
 8001ad8:	0324      	lsls	r4, r4, #12
 8001ada:	464a      	mov	r2, r9
 8001adc:	4b2e      	ldr	r3, [pc, #184]	@ (8001b98 <__aeabi_dmul+0x588>)
 8001ade:	0b24      	lsrs	r4, r4, #12
 8001ae0:	e5ec      	b.n	80016bc <__aeabi_dmul+0xac>
 8001ae2:	f7fe fcc5 	bl	8000470 <__clzsi2>
 8001ae6:	2315      	movs	r3, #21
 8001ae8:	469c      	mov	ip, r3
 8001aea:	4484      	add	ip, r0
 8001aec:	0002      	movs	r2, r0
 8001aee:	4663      	mov	r3, ip
 8001af0:	3220      	adds	r2, #32
 8001af2:	2b1c      	cmp	r3, #28
 8001af4:	dc00      	bgt.n	8001af8 <__aeabi_dmul+0x4e8>
 8001af6:	e684      	b.n	8001802 <__aeabi_dmul+0x1f2>
 8001af8:	2300      	movs	r3, #0
 8001afa:	4699      	mov	r9, r3
 8001afc:	0023      	movs	r3, r4
 8001afe:	3808      	subs	r0, #8
 8001b00:	4083      	lsls	r3, r0
 8001b02:	469a      	mov	sl, r3
 8001b04:	e68e      	b.n	8001824 <__aeabi_dmul+0x214>
 8001b06:	f7fe fcb3 	bl	8000470 <__clzsi2>
 8001b0a:	0002      	movs	r2, r0
 8001b0c:	0003      	movs	r3, r0
 8001b0e:	3215      	adds	r2, #21
 8001b10:	3320      	adds	r3, #32
 8001b12:	2a1c      	cmp	r2, #28
 8001b14:	dc00      	bgt.n	8001b18 <__aeabi_dmul+0x508>
 8001b16:	e64e      	b.n	80017b6 <__aeabi_dmul+0x1a6>
 8001b18:	0002      	movs	r2, r0
 8001b1a:	0034      	movs	r4, r6
 8001b1c:	3a08      	subs	r2, #8
 8001b1e:	2000      	movs	r0, #0
 8001b20:	4094      	lsls	r4, r2
 8001b22:	e652      	b.n	80017ca <__aeabi_dmul+0x1ba>
 8001b24:	9301      	str	r3, [sp, #4]
 8001b26:	e604      	b.n	8001732 <__aeabi_dmul+0x122>
 8001b28:	4b1c      	ldr	r3, [pc, #112]	@ (8001b9c <__aeabi_dmul+0x58c>)
 8001b2a:	0021      	movs	r1, r4
 8001b2c:	469c      	mov	ip, r3
 8001b2e:	0003      	movs	r3, r0
 8001b30:	9d01      	ldr	r5, [sp, #4]
 8001b32:	40d3      	lsrs	r3, r2
 8001b34:	4465      	add	r5, ip
 8001b36:	40a9      	lsls	r1, r5
 8001b38:	4319      	orrs	r1, r3
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	40ab      	lsls	r3, r5
 8001b3e:	1e58      	subs	r0, r3, #1
 8001b40:	4183      	sbcs	r3, r0
 8001b42:	4319      	orrs	r1, r3
 8001b44:	0008      	movs	r0, r1
 8001b46:	40d4      	lsrs	r4, r2
 8001b48:	074b      	lsls	r3, r1, #29
 8001b4a:	d009      	beq.n	8001b60 <__aeabi_dmul+0x550>
 8001b4c:	230f      	movs	r3, #15
 8001b4e:	400b      	ands	r3, r1
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d005      	beq.n	8001b60 <__aeabi_dmul+0x550>
 8001b54:	1d0b      	adds	r3, r1, #4
 8001b56:	428b      	cmp	r3, r1
 8001b58:	4180      	sbcs	r0, r0
 8001b5a:	4240      	negs	r0, r0
 8001b5c:	1824      	adds	r4, r4, r0
 8001b5e:	0018      	movs	r0, r3
 8001b60:	0223      	lsls	r3, r4, #8
 8001b62:	d400      	bmi.n	8001b66 <__aeabi_dmul+0x556>
 8001b64:	e6d6      	b.n	8001914 <__aeabi_dmul+0x304>
 8001b66:	2301      	movs	r3, #1
 8001b68:	2400      	movs	r4, #0
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	e5a6      	b.n	80016bc <__aeabi_dmul+0xac>
 8001b6e:	290f      	cmp	r1, #15
 8001b70:	d1aa      	bne.n	8001ac8 <__aeabi_dmul+0x4b8>
 8001b72:	2380      	movs	r3, #128	@ 0x80
 8001b74:	4652      	mov	r2, sl
 8001b76:	031b      	lsls	r3, r3, #12
 8001b78:	421a      	tst	r2, r3
 8001b7a:	d0a9      	beq.n	8001ad0 <__aeabi_dmul+0x4c0>
 8001b7c:	421c      	tst	r4, r3
 8001b7e:	d1a7      	bne.n	8001ad0 <__aeabi_dmul+0x4c0>
 8001b80:	431c      	orrs	r4, r3
 8001b82:	9b00      	ldr	r3, [sp, #0]
 8001b84:	0002      	movs	r2, r0
 8001b86:	469b      	mov	fp, r3
 8001b88:	4b03      	ldr	r3, [pc, #12]	@ (8001b98 <__aeabi_dmul+0x588>)
 8001b8a:	e597      	b.n	80016bc <__aeabi_dmul+0xac>
 8001b8c:	2400      	movs	r4, #0
 8001b8e:	e6c1      	b.n	8001914 <__aeabi_dmul+0x304>
 8001b90:	2400      	movs	r4, #0
 8001b92:	4b01      	ldr	r3, [pc, #4]	@ (8001b98 <__aeabi_dmul+0x588>)
 8001b94:	0022      	movs	r2, r4
 8001b96:	e591      	b.n	80016bc <__aeabi_dmul+0xac>
 8001b98:	000007ff 	.word	0x000007ff
 8001b9c:	0000041e 	.word	0x0000041e

08001ba0 <__aeabi_dsub>:
 8001ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ba2:	464e      	mov	r6, r9
 8001ba4:	4645      	mov	r5, r8
 8001ba6:	46de      	mov	lr, fp
 8001ba8:	4657      	mov	r7, sl
 8001baa:	b5e0      	push	{r5, r6, r7, lr}
 8001bac:	b085      	sub	sp, #20
 8001bae:	9000      	str	r0, [sp, #0]
 8001bb0:	9101      	str	r1, [sp, #4]
 8001bb2:	030c      	lsls	r4, r1, #12
 8001bb4:	004f      	lsls	r7, r1, #1
 8001bb6:	0fce      	lsrs	r6, r1, #31
 8001bb8:	0a61      	lsrs	r1, r4, #9
 8001bba:	9c00      	ldr	r4, [sp, #0]
 8001bbc:	46b0      	mov	r8, r6
 8001bbe:	0f64      	lsrs	r4, r4, #29
 8001bc0:	430c      	orrs	r4, r1
 8001bc2:	9900      	ldr	r1, [sp, #0]
 8001bc4:	0d7f      	lsrs	r7, r7, #21
 8001bc6:	00c8      	lsls	r0, r1, #3
 8001bc8:	0011      	movs	r1, r2
 8001bca:	001a      	movs	r2, r3
 8001bcc:	031b      	lsls	r3, r3, #12
 8001bce:	469c      	mov	ip, r3
 8001bd0:	9100      	str	r1, [sp, #0]
 8001bd2:	9201      	str	r2, [sp, #4]
 8001bd4:	0051      	lsls	r1, r2, #1
 8001bd6:	0d4b      	lsrs	r3, r1, #21
 8001bd8:	4699      	mov	r9, r3
 8001bda:	9b01      	ldr	r3, [sp, #4]
 8001bdc:	9d00      	ldr	r5, [sp, #0]
 8001bde:	0fd9      	lsrs	r1, r3, #31
 8001be0:	4663      	mov	r3, ip
 8001be2:	0f6a      	lsrs	r2, r5, #29
 8001be4:	0a5b      	lsrs	r3, r3, #9
 8001be6:	4313      	orrs	r3, r2
 8001be8:	00ea      	lsls	r2, r5, #3
 8001bea:	4694      	mov	ip, r2
 8001bec:	4693      	mov	fp, r2
 8001bee:	4ac1      	ldr	r2, [pc, #772]	@ (8001ef4 <__aeabi_dsub+0x354>)
 8001bf0:	9003      	str	r0, [sp, #12]
 8001bf2:	9302      	str	r3, [sp, #8]
 8001bf4:	4591      	cmp	r9, r2
 8001bf6:	d100      	bne.n	8001bfa <__aeabi_dsub+0x5a>
 8001bf8:	e0cd      	b.n	8001d96 <__aeabi_dsub+0x1f6>
 8001bfa:	2501      	movs	r5, #1
 8001bfc:	4069      	eors	r1, r5
 8001bfe:	464d      	mov	r5, r9
 8001c00:	1b7d      	subs	r5, r7, r5
 8001c02:	46aa      	mov	sl, r5
 8001c04:	428e      	cmp	r6, r1
 8001c06:	d100      	bne.n	8001c0a <__aeabi_dsub+0x6a>
 8001c08:	e080      	b.n	8001d0c <__aeabi_dsub+0x16c>
 8001c0a:	2d00      	cmp	r5, #0
 8001c0c:	dc00      	bgt.n	8001c10 <__aeabi_dsub+0x70>
 8001c0e:	e335      	b.n	800227c <__aeabi_dsub+0x6dc>
 8001c10:	4649      	mov	r1, r9
 8001c12:	2900      	cmp	r1, #0
 8001c14:	d100      	bne.n	8001c18 <__aeabi_dsub+0x78>
 8001c16:	e0df      	b.n	8001dd8 <__aeabi_dsub+0x238>
 8001c18:	4297      	cmp	r7, r2
 8001c1a:	d100      	bne.n	8001c1e <__aeabi_dsub+0x7e>
 8001c1c:	e194      	b.n	8001f48 <__aeabi_dsub+0x3a8>
 8001c1e:	4652      	mov	r2, sl
 8001c20:	2501      	movs	r5, #1
 8001c22:	2a38      	cmp	r2, #56	@ 0x38
 8001c24:	dc19      	bgt.n	8001c5a <__aeabi_dsub+0xba>
 8001c26:	2280      	movs	r2, #128	@ 0x80
 8001c28:	9b02      	ldr	r3, [sp, #8]
 8001c2a:	0412      	lsls	r2, r2, #16
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	9302      	str	r3, [sp, #8]
 8001c30:	4652      	mov	r2, sl
 8001c32:	2a1f      	cmp	r2, #31
 8001c34:	dd00      	ble.n	8001c38 <__aeabi_dsub+0x98>
 8001c36:	e1e3      	b.n	8002000 <__aeabi_dsub+0x460>
 8001c38:	4653      	mov	r3, sl
 8001c3a:	2220      	movs	r2, #32
 8001c3c:	4661      	mov	r1, ip
 8001c3e:	9d02      	ldr	r5, [sp, #8]
 8001c40:	1ad2      	subs	r2, r2, r3
 8001c42:	4095      	lsls	r5, r2
 8001c44:	40d9      	lsrs	r1, r3
 8001c46:	430d      	orrs	r5, r1
 8001c48:	4661      	mov	r1, ip
 8001c4a:	4091      	lsls	r1, r2
 8001c4c:	000a      	movs	r2, r1
 8001c4e:	1e51      	subs	r1, r2, #1
 8001c50:	418a      	sbcs	r2, r1
 8001c52:	4315      	orrs	r5, r2
 8001c54:	9a02      	ldr	r2, [sp, #8]
 8001c56:	40da      	lsrs	r2, r3
 8001c58:	1aa4      	subs	r4, r4, r2
 8001c5a:	1b45      	subs	r5, r0, r5
 8001c5c:	42a8      	cmp	r0, r5
 8001c5e:	4180      	sbcs	r0, r0
 8001c60:	4240      	negs	r0, r0
 8001c62:	1a24      	subs	r4, r4, r0
 8001c64:	0223      	lsls	r3, r4, #8
 8001c66:	d400      	bmi.n	8001c6a <__aeabi_dsub+0xca>
 8001c68:	e13d      	b.n	8001ee6 <__aeabi_dsub+0x346>
 8001c6a:	0264      	lsls	r4, r4, #9
 8001c6c:	0a64      	lsrs	r4, r4, #9
 8001c6e:	2c00      	cmp	r4, #0
 8001c70:	d100      	bne.n	8001c74 <__aeabi_dsub+0xd4>
 8001c72:	e147      	b.n	8001f04 <__aeabi_dsub+0x364>
 8001c74:	0020      	movs	r0, r4
 8001c76:	f7fe fbfb 	bl	8000470 <__clzsi2>
 8001c7a:	0003      	movs	r3, r0
 8001c7c:	3b08      	subs	r3, #8
 8001c7e:	2120      	movs	r1, #32
 8001c80:	0028      	movs	r0, r5
 8001c82:	1aca      	subs	r2, r1, r3
 8001c84:	40d0      	lsrs	r0, r2
 8001c86:	409c      	lsls	r4, r3
 8001c88:	0002      	movs	r2, r0
 8001c8a:	409d      	lsls	r5, r3
 8001c8c:	4322      	orrs	r2, r4
 8001c8e:	429f      	cmp	r7, r3
 8001c90:	dd00      	ble.n	8001c94 <__aeabi_dsub+0xf4>
 8001c92:	e177      	b.n	8001f84 <__aeabi_dsub+0x3e4>
 8001c94:	1bd8      	subs	r0, r3, r7
 8001c96:	3001      	adds	r0, #1
 8001c98:	1a09      	subs	r1, r1, r0
 8001c9a:	002c      	movs	r4, r5
 8001c9c:	408d      	lsls	r5, r1
 8001c9e:	40c4      	lsrs	r4, r0
 8001ca0:	1e6b      	subs	r3, r5, #1
 8001ca2:	419d      	sbcs	r5, r3
 8001ca4:	0013      	movs	r3, r2
 8001ca6:	40c2      	lsrs	r2, r0
 8001ca8:	408b      	lsls	r3, r1
 8001caa:	4325      	orrs	r5, r4
 8001cac:	2700      	movs	r7, #0
 8001cae:	0014      	movs	r4, r2
 8001cb0:	431d      	orrs	r5, r3
 8001cb2:	076b      	lsls	r3, r5, #29
 8001cb4:	d009      	beq.n	8001cca <__aeabi_dsub+0x12a>
 8001cb6:	230f      	movs	r3, #15
 8001cb8:	402b      	ands	r3, r5
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	d005      	beq.n	8001cca <__aeabi_dsub+0x12a>
 8001cbe:	1d2b      	adds	r3, r5, #4
 8001cc0:	42ab      	cmp	r3, r5
 8001cc2:	41ad      	sbcs	r5, r5
 8001cc4:	426d      	negs	r5, r5
 8001cc6:	1964      	adds	r4, r4, r5
 8001cc8:	001d      	movs	r5, r3
 8001cca:	0223      	lsls	r3, r4, #8
 8001ccc:	d400      	bmi.n	8001cd0 <__aeabi_dsub+0x130>
 8001cce:	e140      	b.n	8001f52 <__aeabi_dsub+0x3b2>
 8001cd0:	4a88      	ldr	r2, [pc, #544]	@ (8001ef4 <__aeabi_dsub+0x354>)
 8001cd2:	3701      	adds	r7, #1
 8001cd4:	4297      	cmp	r7, r2
 8001cd6:	d100      	bne.n	8001cda <__aeabi_dsub+0x13a>
 8001cd8:	e101      	b.n	8001ede <__aeabi_dsub+0x33e>
 8001cda:	2601      	movs	r6, #1
 8001cdc:	4643      	mov	r3, r8
 8001cde:	4986      	ldr	r1, [pc, #536]	@ (8001ef8 <__aeabi_dsub+0x358>)
 8001ce0:	08ed      	lsrs	r5, r5, #3
 8001ce2:	4021      	ands	r1, r4
 8001ce4:	074a      	lsls	r2, r1, #29
 8001ce6:	432a      	orrs	r2, r5
 8001ce8:	057c      	lsls	r4, r7, #21
 8001cea:	024d      	lsls	r5, r1, #9
 8001cec:	0b2d      	lsrs	r5, r5, #12
 8001cee:	0d64      	lsrs	r4, r4, #21
 8001cf0:	401e      	ands	r6, r3
 8001cf2:	0524      	lsls	r4, r4, #20
 8001cf4:	432c      	orrs	r4, r5
 8001cf6:	07f6      	lsls	r6, r6, #31
 8001cf8:	4334      	orrs	r4, r6
 8001cfa:	0010      	movs	r0, r2
 8001cfc:	0021      	movs	r1, r4
 8001cfe:	b005      	add	sp, #20
 8001d00:	bcf0      	pop	{r4, r5, r6, r7}
 8001d02:	46bb      	mov	fp, r7
 8001d04:	46b2      	mov	sl, r6
 8001d06:	46a9      	mov	r9, r5
 8001d08:	46a0      	mov	r8, r4
 8001d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d0c:	2d00      	cmp	r5, #0
 8001d0e:	dc00      	bgt.n	8001d12 <__aeabi_dsub+0x172>
 8001d10:	e2d0      	b.n	80022b4 <__aeabi_dsub+0x714>
 8001d12:	4649      	mov	r1, r9
 8001d14:	2900      	cmp	r1, #0
 8001d16:	d000      	beq.n	8001d1a <__aeabi_dsub+0x17a>
 8001d18:	e0d4      	b.n	8001ec4 <__aeabi_dsub+0x324>
 8001d1a:	4661      	mov	r1, ip
 8001d1c:	9b02      	ldr	r3, [sp, #8]
 8001d1e:	4319      	orrs	r1, r3
 8001d20:	d100      	bne.n	8001d24 <__aeabi_dsub+0x184>
 8001d22:	e12b      	b.n	8001f7c <__aeabi_dsub+0x3dc>
 8001d24:	1e69      	subs	r1, r5, #1
 8001d26:	2d01      	cmp	r5, #1
 8001d28:	d100      	bne.n	8001d2c <__aeabi_dsub+0x18c>
 8001d2a:	e1d9      	b.n	80020e0 <__aeabi_dsub+0x540>
 8001d2c:	4295      	cmp	r5, r2
 8001d2e:	d100      	bne.n	8001d32 <__aeabi_dsub+0x192>
 8001d30:	e10a      	b.n	8001f48 <__aeabi_dsub+0x3a8>
 8001d32:	2501      	movs	r5, #1
 8001d34:	2938      	cmp	r1, #56	@ 0x38
 8001d36:	dc17      	bgt.n	8001d68 <__aeabi_dsub+0x1c8>
 8001d38:	468a      	mov	sl, r1
 8001d3a:	4653      	mov	r3, sl
 8001d3c:	2b1f      	cmp	r3, #31
 8001d3e:	dd00      	ble.n	8001d42 <__aeabi_dsub+0x1a2>
 8001d40:	e1e7      	b.n	8002112 <__aeabi_dsub+0x572>
 8001d42:	2220      	movs	r2, #32
 8001d44:	1ad2      	subs	r2, r2, r3
 8001d46:	9b02      	ldr	r3, [sp, #8]
 8001d48:	4661      	mov	r1, ip
 8001d4a:	4093      	lsls	r3, r2
 8001d4c:	001d      	movs	r5, r3
 8001d4e:	4653      	mov	r3, sl
 8001d50:	40d9      	lsrs	r1, r3
 8001d52:	4663      	mov	r3, ip
 8001d54:	4093      	lsls	r3, r2
 8001d56:	001a      	movs	r2, r3
 8001d58:	430d      	orrs	r5, r1
 8001d5a:	1e51      	subs	r1, r2, #1
 8001d5c:	418a      	sbcs	r2, r1
 8001d5e:	4653      	mov	r3, sl
 8001d60:	4315      	orrs	r5, r2
 8001d62:	9a02      	ldr	r2, [sp, #8]
 8001d64:	40da      	lsrs	r2, r3
 8001d66:	18a4      	adds	r4, r4, r2
 8001d68:	182d      	adds	r5, r5, r0
 8001d6a:	4285      	cmp	r5, r0
 8001d6c:	4180      	sbcs	r0, r0
 8001d6e:	4240      	negs	r0, r0
 8001d70:	1824      	adds	r4, r4, r0
 8001d72:	0223      	lsls	r3, r4, #8
 8001d74:	d400      	bmi.n	8001d78 <__aeabi_dsub+0x1d8>
 8001d76:	e0b6      	b.n	8001ee6 <__aeabi_dsub+0x346>
 8001d78:	4b5e      	ldr	r3, [pc, #376]	@ (8001ef4 <__aeabi_dsub+0x354>)
 8001d7a:	3701      	adds	r7, #1
 8001d7c:	429f      	cmp	r7, r3
 8001d7e:	d100      	bne.n	8001d82 <__aeabi_dsub+0x1e2>
 8001d80:	e0ad      	b.n	8001ede <__aeabi_dsub+0x33e>
 8001d82:	2101      	movs	r1, #1
 8001d84:	4b5c      	ldr	r3, [pc, #368]	@ (8001ef8 <__aeabi_dsub+0x358>)
 8001d86:	086a      	lsrs	r2, r5, #1
 8001d88:	401c      	ands	r4, r3
 8001d8a:	4029      	ands	r1, r5
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	07e5      	lsls	r5, r4, #31
 8001d90:	4315      	orrs	r5, r2
 8001d92:	0864      	lsrs	r4, r4, #1
 8001d94:	e78d      	b.n	8001cb2 <__aeabi_dsub+0x112>
 8001d96:	4a59      	ldr	r2, [pc, #356]	@ (8001efc <__aeabi_dsub+0x35c>)
 8001d98:	9b02      	ldr	r3, [sp, #8]
 8001d9a:	4692      	mov	sl, r2
 8001d9c:	4662      	mov	r2, ip
 8001d9e:	44ba      	add	sl, r7
 8001da0:	431a      	orrs	r2, r3
 8001da2:	d02c      	beq.n	8001dfe <__aeabi_dsub+0x25e>
 8001da4:	428e      	cmp	r6, r1
 8001da6:	d02e      	beq.n	8001e06 <__aeabi_dsub+0x266>
 8001da8:	4652      	mov	r2, sl
 8001daa:	2a00      	cmp	r2, #0
 8001dac:	d060      	beq.n	8001e70 <__aeabi_dsub+0x2d0>
 8001dae:	2f00      	cmp	r7, #0
 8001db0:	d100      	bne.n	8001db4 <__aeabi_dsub+0x214>
 8001db2:	e0db      	b.n	8001f6c <__aeabi_dsub+0x3cc>
 8001db4:	4663      	mov	r3, ip
 8001db6:	000e      	movs	r6, r1
 8001db8:	9c02      	ldr	r4, [sp, #8]
 8001dba:	08d8      	lsrs	r0, r3, #3
 8001dbc:	0762      	lsls	r2, r4, #29
 8001dbe:	4302      	orrs	r2, r0
 8001dc0:	08e4      	lsrs	r4, r4, #3
 8001dc2:	0013      	movs	r3, r2
 8001dc4:	4323      	orrs	r3, r4
 8001dc6:	d100      	bne.n	8001dca <__aeabi_dsub+0x22a>
 8001dc8:	e254      	b.n	8002274 <__aeabi_dsub+0x6d4>
 8001dca:	2580      	movs	r5, #128	@ 0x80
 8001dcc:	032d      	lsls	r5, r5, #12
 8001dce:	4325      	orrs	r5, r4
 8001dd0:	032d      	lsls	r5, r5, #12
 8001dd2:	4c48      	ldr	r4, [pc, #288]	@ (8001ef4 <__aeabi_dsub+0x354>)
 8001dd4:	0b2d      	lsrs	r5, r5, #12
 8001dd6:	e78c      	b.n	8001cf2 <__aeabi_dsub+0x152>
 8001dd8:	4661      	mov	r1, ip
 8001dda:	9b02      	ldr	r3, [sp, #8]
 8001ddc:	4319      	orrs	r1, r3
 8001dde:	d100      	bne.n	8001de2 <__aeabi_dsub+0x242>
 8001de0:	e0cc      	b.n	8001f7c <__aeabi_dsub+0x3dc>
 8001de2:	0029      	movs	r1, r5
 8001de4:	3901      	subs	r1, #1
 8001de6:	2d01      	cmp	r5, #1
 8001de8:	d100      	bne.n	8001dec <__aeabi_dsub+0x24c>
 8001dea:	e188      	b.n	80020fe <__aeabi_dsub+0x55e>
 8001dec:	4295      	cmp	r5, r2
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x252>
 8001df0:	e0aa      	b.n	8001f48 <__aeabi_dsub+0x3a8>
 8001df2:	2501      	movs	r5, #1
 8001df4:	2938      	cmp	r1, #56	@ 0x38
 8001df6:	dd00      	ble.n	8001dfa <__aeabi_dsub+0x25a>
 8001df8:	e72f      	b.n	8001c5a <__aeabi_dsub+0xba>
 8001dfa:	468a      	mov	sl, r1
 8001dfc:	e718      	b.n	8001c30 <__aeabi_dsub+0x90>
 8001dfe:	2201      	movs	r2, #1
 8001e00:	4051      	eors	r1, r2
 8001e02:	428e      	cmp	r6, r1
 8001e04:	d1d0      	bne.n	8001da8 <__aeabi_dsub+0x208>
 8001e06:	4653      	mov	r3, sl
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d100      	bne.n	8001e0e <__aeabi_dsub+0x26e>
 8001e0c:	e0be      	b.n	8001f8c <__aeabi_dsub+0x3ec>
 8001e0e:	2f00      	cmp	r7, #0
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x274>
 8001e12:	e138      	b.n	8002086 <__aeabi_dsub+0x4e6>
 8001e14:	46ca      	mov	sl, r9
 8001e16:	0022      	movs	r2, r4
 8001e18:	4302      	orrs	r2, r0
 8001e1a:	d100      	bne.n	8001e1e <__aeabi_dsub+0x27e>
 8001e1c:	e1e2      	b.n	80021e4 <__aeabi_dsub+0x644>
 8001e1e:	4653      	mov	r3, sl
 8001e20:	1e59      	subs	r1, r3, #1
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d100      	bne.n	8001e28 <__aeabi_dsub+0x288>
 8001e26:	e20d      	b.n	8002244 <__aeabi_dsub+0x6a4>
 8001e28:	4a32      	ldr	r2, [pc, #200]	@ (8001ef4 <__aeabi_dsub+0x354>)
 8001e2a:	4592      	cmp	sl, r2
 8001e2c:	d100      	bne.n	8001e30 <__aeabi_dsub+0x290>
 8001e2e:	e1d2      	b.n	80021d6 <__aeabi_dsub+0x636>
 8001e30:	2701      	movs	r7, #1
 8001e32:	2938      	cmp	r1, #56	@ 0x38
 8001e34:	dc13      	bgt.n	8001e5e <__aeabi_dsub+0x2be>
 8001e36:	291f      	cmp	r1, #31
 8001e38:	dd00      	ble.n	8001e3c <__aeabi_dsub+0x29c>
 8001e3a:	e1ee      	b.n	800221a <__aeabi_dsub+0x67a>
 8001e3c:	2220      	movs	r2, #32
 8001e3e:	9b02      	ldr	r3, [sp, #8]
 8001e40:	1a52      	subs	r2, r2, r1
 8001e42:	0025      	movs	r5, r4
 8001e44:	0007      	movs	r7, r0
 8001e46:	469a      	mov	sl, r3
 8001e48:	40cc      	lsrs	r4, r1
 8001e4a:	4090      	lsls	r0, r2
 8001e4c:	4095      	lsls	r5, r2
 8001e4e:	40cf      	lsrs	r7, r1
 8001e50:	44a2      	add	sl, r4
 8001e52:	1e42      	subs	r2, r0, #1
 8001e54:	4190      	sbcs	r0, r2
 8001e56:	4653      	mov	r3, sl
 8001e58:	432f      	orrs	r7, r5
 8001e5a:	4307      	orrs	r7, r0
 8001e5c:	9302      	str	r3, [sp, #8]
 8001e5e:	003d      	movs	r5, r7
 8001e60:	4465      	add	r5, ip
 8001e62:	4565      	cmp	r5, ip
 8001e64:	4192      	sbcs	r2, r2
 8001e66:	9b02      	ldr	r3, [sp, #8]
 8001e68:	4252      	negs	r2, r2
 8001e6a:	464f      	mov	r7, r9
 8001e6c:	18d4      	adds	r4, r2, r3
 8001e6e:	e780      	b.n	8001d72 <__aeabi_dsub+0x1d2>
 8001e70:	4a23      	ldr	r2, [pc, #140]	@ (8001f00 <__aeabi_dsub+0x360>)
 8001e72:	1c7d      	adds	r5, r7, #1
 8001e74:	4215      	tst	r5, r2
 8001e76:	d000      	beq.n	8001e7a <__aeabi_dsub+0x2da>
 8001e78:	e0aa      	b.n	8001fd0 <__aeabi_dsub+0x430>
 8001e7a:	4662      	mov	r2, ip
 8001e7c:	0025      	movs	r5, r4
 8001e7e:	9b02      	ldr	r3, [sp, #8]
 8001e80:	4305      	orrs	r5, r0
 8001e82:	431a      	orrs	r2, r3
 8001e84:	2f00      	cmp	r7, #0
 8001e86:	d000      	beq.n	8001e8a <__aeabi_dsub+0x2ea>
 8001e88:	e0f5      	b.n	8002076 <__aeabi_dsub+0x4d6>
 8001e8a:	2d00      	cmp	r5, #0
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dsub+0x2f0>
 8001e8e:	e16b      	b.n	8002168 <__aeabi_dsub+0x5c8>
 8001e90:	2a00      	cmp	r2, #0
 8001e92:	d100      	bne.n	8001e96 <__aeabi_dsub+0x2f6>
 8001e94:	e152      	b.n	800213c <__aeabi_dsub+0x59c>
 8001e96:	4663      	mov	r3, ip
 8001e98:	1ac5      	subs	r5, r0, r3
 8001e9a:	9b02      	ldr	r3, [sp, #8]
 8001e9c:	1ae2      	subs	r2, r4, r3
 8001e9e:	42a8      	cmp	r0, r5
 8001ea0:	419b      	sbcs	r3, r3
 8001ea2:	425b      	negs	r3, r3
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	021a      	lsls	r2, r3, #8
 8001ea8:	d400      	bmi.n	8001eac <__aeabi_dsub+0x30c>
 8001eaa:	e1d5      	b.n	8002258 <__aeabi_dsub+0x6b8>
 8001eac:	4663      	mov	r3, ip
 8001eae:	1a1d      	subs	r5, r3, r0
 8001eb0:	45ac      	cmp	ip, r5
 8001eb2:	4192      	sbcs	r2, r2
 8001eb4:	2601      	movs	r6, #1
 8001eb6:	9b02      	ldr	r3, [sp, #8]
 8001eb8:	4252      	negs	r2, r2
 8001eba:	1b1c      	subs	r4, r3, r4
 8001ebc:	4688      	mov	r8, r1
 8001ebe:	1aa4      	subs	r4, r4, r2
 8001ec0:	400e      	ands	r6, r1
 8001ec2:	e6f6      	b.n	8001cb2 <__aeabi_dsub+0x112>
 8001ec4:	4297      	cmp	r7, r2
 8001ec6:	d03f      	beq.n	8001f48 <__aeabi_dsub+0x3a8>
 8001ec8:	4652      	mov	r2, sl
 8001eca:	2501      	movs	r5, #1
 8001ecc:	2a38      	cmp	r2, #56	@ 0x38
 8001ece:	dd00      	ble.n	8001ed2 <__aeabi_dsub+0x332>
 8001ed0:	e74a      	b.n	8001d68 <__aeabi_dsub+0x1c8>
 8001ed2:	2280      	movs	r2, #128	@ 0x80
 8001ed4:	9b02      	ldr	r3, [sp, #8]
 8001ed6:	0412      	lsls	r2, r2, #16
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	9302      	str	r3, [sp, #8]
 8001edc:	e72d      	b.n	8001d3a <__aeabi_dsub+0x19a>
 8001ede:	003c      	movs	r4, r7
 8001ee0:	2500      	movs	r5, #0
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	e705      	b.n	8001cf2 <__aeabi_dsub+0x152>
 8001ee6:	2307      	movs	r3, #7
 8001ee8:	402b      	ands	r3, r5
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d000      	beq.n	8001ef0 <__aeabi_dsub+0x350>
 8001eee:	e6e2      	b.n	8001cb6 <__aeabi_dsub+0x116>
 8001ef0:	e06b      	b.n	8001fca <__aeabi_dsub+0x42a>
 8001ef2:	46c0      	nop			@ (mov r8, r8)
 8001ef4:	000007ff 	.word	0x000007ff
 8001ef8:	ff7fffff 	.word	0xff7fffff
 8001efc:	fffff801 	.word	0xfffff801
 8001f00:	000007fe 	.word	0x000007fe
 8001f04:	0028      	movs	r0, r5
 8001f06:	f7fe fab3 	bl	8000470 <__clzsi2>
 8001f0a:	0003      	movs	r3, r0
 8001f0c:	3318      	adds	r3, #24
 8001f0e:	2b1f      	cmp	r3, #31
 8001f10:	dc00      	bgt.n	8001f14 <__aeabi_dsub+0x374>
 8001f12:	e6b4      	b.n	8001c7e <__aeabi_dsub+0xde>
 8001f14:	002a      	movs	r2, r5
 8001f16:	3808      	subs	r0, #8
 8001f18:	4082      	lsls	r2, r0
 8001f1a:	429f      	cmp	r7, r3
 8001f1c:	dd00      	ble.n	8001f20 <__aeabi_dsub+0x380>
 8001f1e:	e0b9      	b.n	8002094 <__aeabi_dsub+0x4f4>
 8001f20:	1bdb      	subs	r3, r3, r7
 8001f22:	1c58      	adds	r0, r3, #1
 8001f24:	281f      	cmp	r0, #31
 8001f26:	dc00      	bgt.n	8001f2a <__aeabi_dsub+0x38a>
 8001f28:	e1a0      	b.n	800226c <__aeabi_dsub+0x6cc>
 8001f2a:	0015      	movs	r5, r2
 8001f2c:	3b1f      	subs	r3, #31
 8001f2e:	40dd      	lsrs	r5, r3
 8001f30:	2820      	cmp	r0, #32
 8001f32:	d005      	beq.n	8001f40 <__aeabi_dsub+0x3a0>
 8001f34:	2340      	movs	r3, #64	@ 0x40
 8001f36:	1a1b      	subs	r3, r3, r0
 8001f38:	409a      	lsls	r2, r3
 8001f3a:	1e53      	subs	r3, r2, #1
 8001f3c:	419a      	sbcs	r2, r3
 8001f3e:	4315      	orrs	r5, r2
 8001f40:	2307      	movs	r3, #7
 8001f42:	2700      	movs	r7, #0
 8001f44:	402b      	ands	r3, r5
 8001f46:	e7d0      	b.n	8001eea <__aeabi_dsub+0x34a>
 8001f48:	08c0      	lsrs	r0, r0, #3
 8001f4a:	0762      	lsls	r2, r4, #29
 8001f4c:	4302      	orrs	r2, r0
 8001f4e:	08e4      	lsrs	r4, r4, #3
 8001f50:	e737      	b.n	8001dc2 <__aeabi_dsub+0x222>
 8001f52:	08ea      	lsrs	r2, r5, #3
 8001f54:	0763      	lsls	r3, r4, #29
 8001f56:	431a      	orrs	r2, r3
 8001f58:	4bd3      	ldr	r3, [pc, #844]	@ (80022a8 <__aeabi_dsub+0x708>)
 8001f5a:	08e4      	lsrs	r4, r4, #3
 8001f5c:	429f      	cmp	r7, r3
 8001f5e:	d100      	bne.n	8001f62 <__aeabi_dsub+0x3c2>
 8001f60:	e72f      	b.n	8001dc2 <__aeabi_dsub+0x222>
 8001f62:	0324      	lsls	r4, r4, #12
 8001f64:	0b25      	lsrs	r5, r4, #12
 8001f66:	057c      	lsls	r4, r7, #21
 8001f68:	0d64      	lsrs	r4, r4, #21
 8001f6a:	e6c2      	b.n	8001cf2 <__aeabi_dsub+0x152>
 8001f6c:	46ca      	mov	sl, r9
 8001f6e:	0022      	movs	r2, r4
 8001f70:	4302      	orrs	r2, r0
 8001f72:	d158      	bne.n	8002026 <__aeabi_dsub+0x486>
 8001f74:	4663      	mov	r3, ip
 8001f76:	000e      	movs	r6, r1
 8001f78:	9c02      	ldr	r4, [sp, #8]
 8001f7a:	9303      	str	r3, [sp, #12]
 8001f7c:	9b03      	ldr	r3, [sp, #12]
 8001f7e:	4657      	mov	r7, sl
 8001f80:	08da      	lsrs	r2, r3, #3
 8001f82:	e7e7      	b.n	8001f54 <__aeabi_dsub+0x3b4>
 8001f84:	4cc9      	ldr	r4, [pc, #804]	@ (80022ac <__aeabi_dsub+0x70c>)
 8001f86:	1aff      	subs	r7, r7, r3
 8001f88:	4014      	ands	r4, r2
 8001f8a:	e692      	b.n	8001cb2 <__aeabi_dsub+0x112>
 8001f8c:	4dc8      	ldr	r5, [pc, #800]	@ (80022b0 <__aeabi_dsub+0x710>)
 8001f8e:	1c7a      	adds	r2, r7, #1
 8001f90:	422a      	tst	r2, r5
 8001f92:	d000      	beq.n	8001f96 <__aeabi_dsub+0x3f6>
 8001f94:	e084      	b.n	80020a0 <__aeabi_dsub+0x500>
 8001f96:	0022      	movs	r2, r4
 8001f98:	4302      	orrs	r2, r0
 8001f9a:	2f00      	cmp	r7, #0
 8001f9c:	d000      	beq.n	8001fa0 <__aeabi_dsub+0x400>
 8001f9e:	e0ef      	b.n	8002180 <__aeabi_dsub+0x5e0>
 8001fa0:	2a00      	cmp	r2, #0
 8001fa2:	d100      	bne.n	8001fa6 <__aeabi_dsub+0x406>
 8001fa4:	e0e5      	b.n	8002172 <__aeabi_dsub+0x5d2>
 8001fa6:	4662      	mov	r2, ip
 8001fa8:	9902      	ldr	r1, [sp, #8]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_dsub+0x410>
 8001fae:	e0c5      	b.n	800213c <__aeabi_dsub+0x59c>
 8001fb0:	4663      	mov	r3, ip
 8001fb2:	18c5      	adds	r5, r0, r3
 8001fb4:	468c      	mov	ip, r1
 8001fb6:	4285      	cmp	r5, r0
 8001fb8:	4180      	sbcs	r0, r0
 8001fba:	4464      	add	r4, ip
 8001fbc:	4240      	negs	r0, r0
 8001fbe:	1824      	adds	r4, r4, r0
 8001fc0:	0223      	lsls	r3, r4, #8
 8001fc2:	d502      	bpl.n	8001fca <__aeabi_dsub+0x42a>
 8001fc4:	4bb9      	ldr	r3, [pc, #740]	@ (80022ac <__aeabi_dsub+0x70c>)
 8001fc6:	3701      	adds	r7, #1
 8001fc8:	401c      	ands	r4, r3
 8001fca:	46ba      	mov	sl, r7
 8001fcc:	9503      	str	r5, [sp, #12]
 8001fce:	e7d5      	b.n	8001f7c <__aeabi_dsub+0x3dc>
 8001fd0:	4662      	mov	r2, ip
 8001fd2:	1a85      	subs	r5, r0, r2
 8001fd4:	42a8      	cmp	r0, r5
 8001fd6:	4192      	sbcs	r2, r2
 8001fd8:	4252      	negs	r2, r2
 8001fda:	4691      	mov	r9, r2
 8001fdc:	9b02      	ldr	r3, [sp, #8]
 8001fde:	1ae3      	subs	r3, r4, r3
 8001fe0:	001a      	movs	r2, r3
 8001fe2:	464b      	mov	r3, r9
 8001fe4:	1ad2      	subs	r2, r2, r3
 8001fe6:	0013      	movs	r3, r2
 8001fe8:	4691      	mov	r9, r2
 8001fea:	021a      	lsls	r2, r3, #8
 8001fec:	d46c      	bmi.n	80020c8 <__aeabi_dsub+0x528>
 8001fee:	464a      	mov	r2, r9
 8001ff0:	464c      	mov	r4, r9
 8001ff2:	432a      	orrs	r2, r5
 8001ff4:	d000      	beq.n	8001ff8 <__aeabi_dsub+0x458>
 8001ff6:	e63a      	b.n	8001c6e <__aeabi_dsub+0xce>
 8001ff8:	2600      	movs	r6, #0
 8001ffa:	2400      	movs	r4, #0
 8001ffc:	2500      	movs	r5, #0
 8001ffe:	e678      	b.n	8001cf2 <__aeabi_dsub+0x152>
 8002000:	9902      	ldr	r1, [sp, #8]
 8002002:	4653      	mov	r3, sl
 8002004:	000d      	movs	r5, r1
 8002006:	3a20      	subs	r2, #32
 8002008:	40d5      	lsrs	r5, r2
 800200a:	2b20      	cmp	r3, #32
 800200c:	d006      	beq.n	800201c <__aeabi_dsub+0x47c>
 800200e:	2240      	movs	r2, #64	@ 0x40
 8002010:	1ad2      	subs	r2, r2, r3
 8002012:	000b      	movs	r3, r1
 8002014:	4093      	lsls	r3, r2
 8002016:	4662      	mov	r2, ip
 8002018:	431a      	orrs	r2, r3
 800201a:	4693      	mov	fp, r2
 800201c:	465b      	mov	r3, fp
 800201e:	1e5a      	subs	r2, r3, #1
 8002020:	4193      	sbcs	r3, r2
 8002022:	431d      	orrs	r5, r3
 8002024:	e619      	b.n	8001c5a <__aeabi_dsub+0xba>
 8002026:	4653      	mov	r3, sl
 8002028:	1e5a      	subs	r2, r3, #1
 800202a:	2b01      	cmp	r3, #1
 800202c:	d100      	bne.n	8002030 <__aeabi_dsub+0x490>
 800202e:	e0c6      	b.n	80021be <__aeabi_dsub+0x61e>
 8002030:	4e9d      	ldr	r6, [pc, #628]	@ (80022a8 <__aeabi_dsub+0x708>)
 8002032:	45b2      	cmp	sl, r6
 8002034:	d100      	bne.n	8002038 <__aeabi_dsub+0x498>
 8002036:	e6bd      	b.n	8001db4 <__aeabi_dsub+0x214>
 8002038:	4688      	mov	r8, r1
 800203a:	000e      	movs	r6, r1
 800203c:	2501      	movs	r5, #1
 800203e:	2a38      	cmp	r2, #56	@ 0x38
 8002040:	dc10      	bgt.n	8002064 <__aeabi_dsub+0x4c4>
 8002042:	2a1f      	cmp	r2, #31
 8002044:	dc7f      	bgt.n	8002146 <__aeabi_dsub+0x5a6>
 8002046:	2120      	movs	r1, #32
 8002048:	0025      	movs	r5, r4
 800204a:	1a89      	subs	r1, r1, r2
 800204c:	0007      	movs	r7, r0
 800204e:	4088      	lsls	r0, r1
 8002050:	408d      	lsls	r5, r1
 8002052:	40d7      	lsrs	r7, r2
 8002054:	40d4      	lsrs	r4, r2
 8002056:	1e41      	subs	r1, r0, #1
 8002058:	4188      	sbcs	r0, r1
 800205a:	9b02      	ldr	r3, [sp, #8]
 800205c:	433d      	orrs	r5, r7
 800205e:	1b1b      	subs	r3, r3, r4
 8002060:	4305      	orrs	r5, r0
 8002062:	9302      	str	r3, [sp, #8]
 8002064:	4662      	mov	r2, ip
 8002066:	1b55      	subs	r5, r2, r5
 8002068:	45ac      	cmp	ip, r5
 800206a:	4192      	sbcs	r2, r2
 800206c:	9b02      	ldr	r3, [sp, #8]
 800206e:	4252      	negs	r2, r2
 8002070:	464f      	mov	r7, r9
 8002072:	1a9c      	subs	r4, r3, r2
 8002074:	e5f6      	b.n	8001c64 <__aeabi_dsub+0xc4>
 8002076:	2d00      	cmp	r5, #0
 8002078:	d000      	beq.n	800207c <__aeabi_dsub+0x4dc>
 800207a:	e0b7      	b.n	80021ec <__aeabi_dsub+0x64c>
 800207c:	2a00      	cmp	r2, #0
 800207e:	d100      	bne.n	8002082 <__aeabi_dsub+0x4e2>
 8002080:	e0f0      	b.n	8002264 <__aeabi_dsub+0x6c4>
 8002082:	2601      	movs	r6, #1
 8002084:	400e      	ands	r6, r1
 8002086:	4663      	mov	r3, ip
 8002088:	9802      	ldr	r0, [sp, #8]
 800208a:	08d9      	lsrs	r1, r3, #3
 800208c:	0742      	lsls	r2, r0, #29
 800208e:	430a      	orrs	r2, r1
 8002090:	08c4      	lsrs	r4, r0, #3
 8002092:	e696      	b.n	8001dc2 <__aeabi_dsub+0x222>
 8002094:	4c85      	ldr	r4, [pc, #532]	@ (80022ac <__aeabi_dsub+0x70c>)
 8002096:	1aff      	subs	r7, r7, r3
 8002098:	4014      	ands	r4, r2
 800209a:	0762      	lsls	r2, r4, #29
 800209c:	08e4      	lsrs	r4, r4, #3
 800209e:	e760      	b.n	8001f62 <__aeabi_dsub+0x3c2>
 80020a0:	4981      	ldr	r1, [pc, #516]	@ (80022a8 <__aeabi_dsub+0x708>)
 80020a2:	428a      	cmp	r2, r1
 80020a4:	d100      	bne.n	80020a8 <__aeabi_dsub+0x508>
 80020a6:	e0c9      	b.n	800223c <__aeabi_dsub+0x69c>
 80020a8:	4663      	mov	r3, ip
 80020aa:	18c1      	adds	r1, r0, r3
 80020ac:	4281      	cmp	r1, r0
 80020ae:	4180      	sbcs	r0, r0
 80020b0:	9b02      	ldr	r3, [sp, #8]
 80020b2:	4240      	negs	r0, r0
 80020b4:	18e3      	adds	r3, r4, r3
 80020b6:	181b      	adds	r3, r3, r0
 80020b8:	07dd      	lsls	r5, r3, #31
 80020ba:	085c      	lsrs	r4, r3, #1
 80020bc:	2307      	movs	r3, #7
 80020be:	0849      	lsrs	r1, r1, #1
 80020c0:	430d      	orrs	r5, r1
 80020c2:	0017      	movs	r7, r2
 80020c4:	402b      	ands	r3, r5
 80020c6:	e710      	b.n	8001eea <__aeabi_dsub+0x34a>
 80020c8:	4663      	mov	r3, ip
 80020ca:	1a1d      	subs	r5, r3, r0
 80020cc:	45ac      	cmp	ip, r5
 80020ce:	4192      	sbcs	r2, r2
 80020d0:	2601      	movs	r6, #1
 80020d2:	9b02      	ldr	r3, [sp, #8]
 80020d4:	4252      	negs	r2, r2
 80020d6:	1b1c      	subs	r4, r3, r4
 80020d8:	4688      	mov	r8, r1
 80020da:	1aa4      	subs	r4, r4, r2
 80020dc:	400e      	ands	r6, r1
 80020de:	e5c6      	b.n	8001c6e <__aeabi_dsub+0xce>
 80020e0:	4663      	mov	r3, ip
 80020e2:	18c5      	adds	r5, r0, r3
 80020e4:	9b02      	ldr	r3, [sp, #8]
 80020e6:	4285      	cmp	r5, r0
 80020e8:	4180      	sbcs	r0, r0
 80020ea:	469c      	mov	ip, r3
 80020ec:	4240      	negs	r0, r0
 80020ee:	4464      	add	r4, ip
 80020f0:	1824      	adds	r4, r4, r0
 80020f2:	2701      	movs	r7, #1
 80020f4:	0223      	lsls	r3, r4, #8
 80020f6:	d400      	bmi.n	80020fa <__aeabi_dsub+0x55a>
 80020f8:	e6f5      	b.n	8001ee6 <__aeabi_dsub+0x346>
 80020fa:	2702      	movs	r7, #2
 80020fc:	e641      	b.n	8001d82 <__aeabi_dsub+0x1e2>
 80020fe:	4663      	mov	r3, ip
 8002100:	1ac5      	subs	r5, r0, r3
 8002102:	42a8      	cmp	r0, r5
 8002104:	4180      	sbcs	r0, r0
 8002106:	9b02      	ldr	r3, [sp, #8]
 8002108:	4240      	negs	r0, r0
 800210a:	1ae4      	subs	r4, r4, r3
 800210c:	2701      	movs	r7, #1
 800210e:	1a24      	subs	r4, r4, r0
 8002110:	e5a8      	b.n	8001c64 <__aeabi_dsub+0xc4>
 8002112:	9d02      	ldr	r5, [sp, #8]
 8002114:	4652      	mov	r2, sl
 8002116:	002b      	movs	r3, r5
 8002118:	3a20      	subs	r2, #32
 800211a:	40d3      	lsrs	r3, r2
 800211c:	0019      	movs	r1, r3
 800211e:	4653      	mov	r3, sl
 8002120:	2b20      	cmp	r3, #32
 8002122:	d006      	beq.n	8002132 <__aeabi_dsub+0x592>
 8002124:	2240      	movs	r2, #64	@ 0x40
 8002126:	1ad2      	subs	r2, r2, r3
 8002128:	002b      	movs	r3, r5
 800212a:	4093      	lsls	r3, r2
 800212c:	4662      	mov	r2, ip
 800212e:	431a      	orrs	r2, r3
 8002130:	4693      	mov	fp, r2
 8002132:	465d      	mov	r5, fp
 8002134:	1e6b      	subs	r3, r5, #1
 8002136:	419d      	sbcs	r5, r3
 8002138:	430d      	orrs	r5, r1
 800213a:	e615      	b.n	8001d68 <__aeabi_dsub+0x1c8>
 800213c:	0762      	lsls	r2, r4, #29
 800213e:	08c0      	lsrs	r0, r0, #3
 8002140:	4302      	orrs	r2, r0
 8002142:	08e4      	lsrs	r4, r4, #3
 8002144:	e70d      	b.n	8001f62 <__aeabi_dsub+0x3c2>
 8002146:	0011      	movs	r1, r2
 8002148:	0027      	movs	r7, r4
 800214a:	3920      	subs	r1, #32
 800214c:	40cf      	lsrs	r7, r1
 800214e:	2a20      	cmp	r2, #32
 8002150:	d005      	beq.n	800215e <__aeabi_dsub+0x5be>
 8002152:	2140      	movs	r1, #64	@ 0x40
 8002154:	1a8a      	subs	r2, r1, r2
 8002156:	4094      	lsls	r4, r2
 8002158:	0025      	movs	r5, r4
 800215a:	4305      	orrs	r5, r0
 800215c:	9503      	str	r5, [sp, #12]
 800215e:	9d03      	ldr	r5, [sp, #12]
 8002160:	1e6a      	subs	r2, r5, #1
 8002162:	4195      	sbcs	r5, r2
 8002164:	433d      	orrs	r5, r7
 8002166:	e77d      	b.n	8002064 <__aeabi_dsub+0x4c4>
 8002168:	2a00      	cmp	r2, #0
 800216a:	d100      	bne.n	800216e <__aeabi_dsub+0x5ce>
 800216c:	e744      	b.n	8001ff8 <__aeabi_dsub+0x458>
 800216e:	2601      	movs	r6, #1
 8002170:	400e      	ands	r6, r1
 8002172:	4663      	mov	r3, ip
 8002174:	08d9      	lsrs	r1, r3, #3
 8002176:	9b02      	ldr	r3, [sp, #8]
 8002178:	075a      	lsls	r2, r3, #29
 800217a:	430a      	orrs	r2, r1
 800217c:	08dc      	lsrs	r4, r3, #3
 800217e:	e6f0      	b.n	8001f62 <__aeabi_dsub+0x3c2>
 8002180:	2a00      	cmp	r2, #0
 8002182:	d028      	beq.n	80021d6 <__aeabi_dsub+0x636>
 8002184:	4662      	mov	r2, ip
 8002186:	9f02      	ldr	r7, [sp, #8]
 8002188:	08c0      	lsrs	r0, r0, #3
 800218a:	433a      	orrs	r2, r7
 800218c:	d100      	bne.n	8002190 <__aeabi_dsub+0x5f0>
 800218e:	e6dc      	b.n	8001f4a <__aeabi_dsub+0x3aa>
 8002190:	0762      	lsls	r2, r4, #29
 8002192:	4310      	orrs	r0, r2
 8002194:	2280      	movs	r2, #128	@ 0x80
 8002196:	08e4      	lsrs	r4, r4, #3
 8002198:	0312      	lsls	r2, r2, #12
 800219a:	4214      	tst	r4, r2
 800219c:	d009      	beq.n	80021b2 <__aeabi_dsub+0x612>
 800219e:	08fd      	lsrs	r5, r7, #3
 80021a0:	4215      	tst	r5, r2
 80021a2:	d106      	bne.n	80021b2 <__aeabi_dsub+0x612>
 80021a4:	4663      	mov	r3, ip
 80021a6:	2601      	movs	r6, #1
 80021a8:	002c      	movs	r4, r5
 80021aa:	08d8      	lsrs	r0, r3, #3
 80021ac:	077b      	lsls	r3, r7, #29
 80021ae:	4318      	orrs	r0, r3
 80021b0:	400e      	ands	r6, r1
 80021b2:	0f42      	lsrs	r2, r0, #29
 80021b4:	00c0      	lsls	r0, r0, #3
 80021b6:	08c0      	lsrs	r0, r0, #3
 80021b8:	0752      	lsls	r2, r2, #29
 80021ba:	4302      	orrs	r2, r0
 80021bc:	e601      	b.n	8001dc2 <__aeabi_dsub+0x222>
 80021be:	4663      	mov	r3, ip
 80021c0:	1a1d      	subs	r5, r3, r0
 80021c2:	45ac      	cmp	ip, r5
 80021c4:	4192      	sbcs	r2, r2
 80021c6:	9b02      	ldr	r3, [sp, #8]
 80021c8:	4252      	negs	r2, r2
 80021ca:	1b1c      	subs	r4, r3, r4
 80021cc:	000e      	movs	r6, r1
 80021ce:	4688      	mov	r8, r1
 80021d0:	2701      	movs	r7, #1
 80021d2:	1aa4      	subs	r4, r4, r2
 80021d4:	e546      	b.n	8001c64 <__aeabi_dsub+0xc4>
 80021d6:	4663      	mov	r3, ip
 80021d8:	08d9      	lsrs	r1, r3, #3
 80021da:	9b02      	ldr	r3, [sp, #8]
 80021dc:	075a      	lsls	r2, r3, #29
 80021de:	430a      	orrs	r2, r1
 80021e0:	08dc      	lsrs	r4, r3, #3
 80021e2:	e5ee      	b.n	8001dc2 <__aeabi_dsub+0x222>
 80021e4:	4663      	mov	r3, ip
 80021e6:	9c02      	ldr	r4, [sp, #8]
 80021e8:	9303      	str	r3, [sp, #12]
 80021ea:	e6c7      	b.n	8001f7c <__aeabi_dsub+0x3dc>
 80021ec:	08c0      	lsrs	r0, r0, #3
 80021ee:	2a00      	cmp	r2, #0
 80021f0:	d100      	bne.n	80021f4 <__aeabi_dsub+0x654>
 80021f2:	e6aa      	b.n	8001f4a <__aeabi_dsub+0x3aa>
 80021f4:	0762      	lsls	r2, r4, #29
 80021f6:	4310      	orrs	r0, r2
 80021f8:	2280      	movs	r2, #128	@ 0x80
 80021fa:	08e4      	lsrs	r4, r4, #3
 80021fc:	0312      	lsls	r2, r2, #12
 80021fe:	4214      	tst	r4, r2
 8002200:	d0d7      	beq.n	80021b2 <__aeabi_dsub+0x612>
 8002202:	9f02      	ldr	r7, [sp, #8]
 8002204:	08fd      	lsrs	r5, r7, #3
 8002206:	4215      	tst	r5, r2
 8002208:	d1d3      	bne.n	80021b2 <__aeabi_dsub+0x612>
 800220a:	4663      	mov	r3, ip
 800220c:	2601      	movs	r6, #1
 800220e:	08d8      	lsrs	r0, r3, #3
 8002210:	077b      	lsls	r3, r7, #29
 8002212:	002c      	movs	r4, r5
 8002214:	4318      	orrs	r0, r3
 8002216:	400e      	ands	r6, r1
 8002218:	e7cb      	b.n	80021b2 <__aeabi_dsub+0x612>
 800221a:	000a      	movs	r2, r1
 800221c:	0027      	movs	r7, r4
 800221e:	3a20      	subs	r2, #32
 8002220:	40d7      	lsrs	r7, r2
 8002222:	2920      	cmp	r1, #32
 8002224:	d005      	beq.n	8002232 <__aeabi_dsub+0x692>
 8002226:	2240      	movs	r2, #64	@ 0x40
 8002228:	1a52      	subs	r2, r2, r1
 800222a:	4094      	lsls	r4, r2
 800222c:	0025      	movs	r5, r4
 800222e:	4305      	orrs	r5, r0
 8002230:	9503      	str	r5, [sp, #12]
 8002232:	9d03      	ldr	r5, [sp, #12]
 8002234:	1e6a      	subs	r2, r5, #1
 8002236:	4195      	sbcs	r5, r2
 8002238:	432f      	orrs	r7, r5
 800223a:	e610      	b.n	8001e5e <__aeabi_dsub+0x2be>
 800223c:	0014      	movs	r4, r2
 800223e:	2500      	movs	r5, #0
 8002240:	2200      	movs	r2, #0
 8002242:	e556      	b.n	8001cf2 <__aeabi_dsub+0x152>
 8002244:	9b02      	ldr	r3, [sp, #8]
 8002246:	4460      	add	r0, ip
 8002248:	4699      	mov	r9, r3
 800224a:	4560      	cmp	r0, ip
 800224c:	4192      	sbcs	r2, r2
 800224e:	444c      	add	r4, r9
 8002250:	4252      	negs	r2, r2
 8002252:	0005      	movs	r5, r0
 8002254:	18a4      	adds	r4, r4, r2
 8002256:	e74c      	b.n	80020f2 <__aeabi_dsub+0x552>
 8002258:	001a      	movs	r2, r3
 800225a:	001c      	movs	r4, r3
 800225c:	432a      	orrs	r2, r5
 800225e:	d000      	beq.n	8002262 <__aeabi_dsub+0x6c2>
 8002260:	e6b3      	b.n	8001fca <__aeabi_dsub+0x42a>
 8002262:	e6c9      	b.n	8001ff8 <__aeabi_dsub+0x458>
 8002264:	2480      	movs	r4, #128	@ 0x80
 8002266:	2600      	movs	r6, #0
 8002268:	0324      	lsls	r4, r4, #12
 800226a:	e5ae      	b.n	8001dca <__aeabi_dsub+0x22a>
 800226c:	2120      	movs	r1, #32
 800226e:	2500      	movs	r5, #0
 8002270:	1a09      	subs	r1, r1, r0
 8002272:	e517      	b.n	8001ca4 <__aeabi_dsub+0x104>
 8002274:	2200      	movs	r2, #0
 8002276:	2500      	movs	r5, #0
 8002278:	4c0b      	ldr	r4, [pc, #44]	@ (80022a8 <__aeabi_dsub+0x708>)
 800227a:	e53a      	b.n	8001cf2 <__aeabi_dsub+0x152>
 800227c:	2d00      	cmp	r5, #0
 800227e:	d100      	bne.n	8002282 <__aeabi_dsub+0x6e2>
 8002280:	e5f6      	b.n	8001e70 <__aeabi_dsub+0x2d0>
 8002282:	464b      	mov	r3, r9
 8002284:	1bda      	subs	r2, r3, r7
 8002286:	4692      	mov	sl, r2
 8002288:	2f00      	cmp	r7, #0
 800228a:	d100      	bne.n	800228e <__aeabi_dsub+0x6ee>
 800228c:	e66f      	b.n	8001f6e <__aeabi_dsub+0x3ce>
 800228e:	2a38      	cmp	r2, #56	@ 0x38
 8002290:	dc05      	bgt.n	800229e <__aeabi_dsub+0x6fe>
 8002292:	2680      	movs	r6, #128	@ 0x80
 8002294:	0436      	lsls	r6, r6, #16
 8002296:	4334      	orrs	r4, r6
 8002298:	4688      	mov	r8, r1
 800229a:	000e      	movs	r6, r1
 800229c:	e6d1      	b.n	8002042 <__aeabi_dsub+0x4a2>
 800229e:	4688      	mov	r8, r1
 80022a0:	000e      	movs	r6, r1
 80022a2:	2501      	movs	r5, #1
 80022a4:	e6de      	b.n	8002064 <__aeabi_dsub+0x4c4>
 80022a6:	46c0      	nop			@ (mov r8, r8)
 80022a8:	000007ff 	.word	0x000007ff
 80022ac:	ff7fffff 	.word	0xff7fffff
 80022b0:	000007fe 	.word	0x000007fe
 80022b4:	2d00      	cmp	r5, #0
 80022b6:	d100      	bne.n	80022ba <__aeabi_dsub+0x71a>
 80022b8:	e668      	b.n	8001f8c <__aeabi_dsub+0x3ec>
 80022ba:	464b      	mov	r3, r9
 80022bc:	1bd9      	subs	r1, r3, r7
 80022be:	2f00      	cmp	r7, #0
 80022c0:	d101      	bne.n	80022c6 <__aeabi_dsub+0x726>
 80022c2:	468a      	mov	sl, r1
 80022c4:	e5a7      	b.n	8001e16 <__aeabi_dsub+0x276>
 80022c6:	2701      	movs	r7, #1
 80022c8:	2938      	cmp	r1, #56	@ 0x38
 80022ca:	dd00      	ble.n	80022ce <__aeabi_dsub+0x72e>
 80022cc:	e5c7      	b.n	8001e5e <__aeabi_dsub+0x2be>
 80022ce:	2280      	movs	r2, #128	@ 0x80
 80022d0:	0412      	lsls	r2, r2, #16
 80022d2:	4314      	orrs	r4, r2
 80022d4:	e5af      	b.n	8001e36 <__aeabi_dsub+0x296>
 80022d6:	46c0      	nop			@ (mov r8, r8)

080022d8 <__aeabi_d2iz>:
 80022d8:	000b      	movs	r3, r1
 80022da:	0002      	movs	r2, r0
 80022dc:	b570      	push	{r4, r5, r6, lr}
 80022de:	4d16      	ldr	r5, [pc, #88]	@ (8002338 <__aeabi_d2iz+0x60>)
 80022e0:	030c      	lsls	r4, r1, #12
 80022e2:	b082      	sub	sp, #8
 80022e4:	0049      	lsls	r1, r1, #1
 80022e6:	2000      	movs	r0, #0
 80022e8:	9200      	str	r2, [sp, #0]
 80022ea:	9301      	str	r3, [sp, #4]
 80022ec:	0b24      	lsrs	r4, r4, #12
 80022ee:	0d49      	lsrs	r1, r1, #21
 80022f0:	0fde      	lsrs	r6, r3, #31
 80022f2:	42a9      	cmp	r1, r5
 80022f4:	dd04      	ble.n	8002300 <__aeabi_d2iz+0x28>
 80022f6:	4811      	ldr	r0, [pc, #68]	@ (800233c <__aeabi_d2iz+0x64>)
 80022f8:	4281      	cmp	r1, r0
 80022fa:	dd03      	ble.n	8002304 <__aeabi_d2iz+0x2c>
 80022fc:	4b10      	ldr	r3, [pc, #64]	@ (8002340 <__aeabi_d2iz+0x68>)
 80022fe:	18f0      	adds	r0, r6, r3
 8002300:	b002      	add	sp, #8
 8002302:	bd70      	pop	{r4, r5, r6, pc}
 8002304:	2080      	movs	r0, #128	@ 0x80
 8002306:	0340      	lsls	r0, r0, #13
 8002308:	4320      	orrs	r0, r4
 800230a:	4c0e      	ldr	r4, [pc, #56]	@ (8002344 <__aeabi_d2iz+0x6c>)
 800230c:	1a64      	subs	r4, r4, r1
 800230e:	2c1f      	cmp	r4, #31
 8002310:	dd08      	ble.n	8002324 <__aeabi_d2iz+0x4c>
 8002312:	4b0d      	ldr	r3, [pc, #52]	@ (8002348 <__aeabi_d2iz+0x70>)
 8002314:	1a5b      	subs	r3, r3, r1
 8002316:	40d8      	lsrs	r0, r3
 8002318:	0003      	movs	r3, r0
 800231a:	4258      	negs	r0, r3
 800231c:	2e00      	cmp	r6, #0
 800231e:	d1ef      	bne.n	8002300 <__aeabi_d2iz+0x28>
 8002320:	0018      	movs	r0, r3
 8002322:	e7ed      	b.n	8002300 <__aeabi_d2iz+0x28>
 8002324:	4b09      	ldr	r3, [pc, #36]	@ (800234c <__aeabi_d2iz+0x74>)
 8002326:	9a00      	ldr	r2, [sp, #0]
 8002328:	469c      	mov	ip, r3
 800232a:	0003      	movs	r3, r0
 800232c:	4461      	add	r1, ip
 800232e:	408b      	lsls	r3, r1
 8002330:	40e2      	lsrs	r2, r4
 8002332:	4313      	orrs	r3, r2
 8002334:	e7f1      	b.n	800231a <__aeabi_d2iz+0x42>
 8002336:	46c0      	nop			@ (mov r8, r8)
 8002338:	000003fe 	.word	0x000003fe
 800233c:	0000041d 	.word	0x0000041d
 8002340:	7fffffff 	.word	0x7fffffff
 8002344:	00000433 	.word	0x00000433
 8002348:	00000413 	.word	0x00000413
 800234c:	fffffbed 	.word	0xfffffbed

08002350 <__aeabi_i2d>:
 8002350:	b570      	push	{r4, r5, r6, lr}
 8002352:	2800      	cmp	r0, #0
 8002354:	d016      	beq.n	8002384 <__aeabi_i2d+0x34>
 8002356:	17c3      	asrs	r3, r0, #31
 8002358:	18c5      	adds	r5, r0, r3
 800235a:	405d      	eors	r5, r3
 800235c:	0fc4      	lsrs	r4, r0, #31
 800235e:	0028      	movs	r0, r5
 8002360:	f7fe f886 	bl	8000470 <__clzsi2>
 8002364:	4b10      	ldr	r3, [pc, #64]	@ (80023a8 <__aeabi_i2d+0x58>)
 8002366:	1a1b      	subs	r3, r3, r0
 8002368:	055b      	lsls	r3, r3, #21
 800236a:	0d5b      	lsrs	r3, r3, #21
 800236c:	280a      	cmp	r0, #10
 800236e:	dc14      	bgt.n	800239a <__aeabi_i2d+0x4a>
 8002370:	0002      	movs	r2, r0
 8002372:	002e      	movs	r6, r5
 8002374:	3215      	adds	r2, #21
 8002376:	4096      	lsls	r6, r2
 8002378:	220b      	movs	r2, #11
 800237a:	1a12      	subs	r2, r2, r0
 800237c:	40d5      	lsrs	r5, r2
 800237e:	032d      	lsls	r5, r5, #12
 8002380:	0b2d      	lsrs	r5, r5, #12
 8002382:	e003      	b.n	800238c <__aeabi_i2d+0x3c>
 8002384:	2400      	movs	r4, #0
 8002386:	2300      	movs	r3, #0
 8002388:	2500      	movs	r5, #0
 800238a:	2600      	movs	r6, #0
 800238c:	051b      	lsls	r3, r3, #20
 800238e:	432b      	orrs	r3, r5
 8002390:	07e4      	lsls	r4, r4, #31
 8002392:	4323      	orrs	r3, r4
 8002394:	0030      	movs	r0, r6
 8002396:	0019      	movs	r1, r3
 8002398:	bd70      	pop	{r4, r5, r6, pc}
 800239a:	380b      	subs	r0, #11
 800239c:	4085      	lsls	r5, r0
 800239e:	032d      	lsls	r5, r5, #12
 80023a0:	2600      	movs	r6, #0
 80023a2:	0b2d      	lsrs	r5, r5, #12
 80023a4:	e7f2      	b.n	800238c <__aeabi_i2d+0x3c>
 80023a6:	46c0      	nop			@ (mov r8, r8)
 80023a8:	0000041e 	.word	0x0000041e

080023ac <__aeabi_ui2d>:
 80023ac:	b510      	push	{r4, lr}
 80023ae:	1e04      	subs	r4, r0, #0
 80023b0:	d010      	beq.n	80023d4 <__aeabi_ui2d+0x28>
 80023b2:	f7fe f85d 	bl	8000470 <__clzsi2>
 80023b6:	4b0e      	ldr	r3, [pc, #56]	@ (80023f0 <__aeabi_ui2d+0x44>)
 80023b8:	1a1b      	subs	r3, r3, r0
 80023ba:	055b      	lsls	r3, r3, #21
 80023bc:	0d5b      	lsrs	r3, r3, #21
 80023be:	280a      	cmp	r0, #10
 80023c0:	dc0f      	bgt.n	80023e2 <__aeabi_ui2d+0x36>
 80023c2:	220b      	movs	r2, #11
 80023c4:	0021      	movs	r1, r4
 80023c6:	1a12      	subs	r2, r2, r0
 80023c8:	40d1      	lsrs	r1, r2
 80023ca:	3015      	adds	r0, #21
 80023cc:	030a      	lsls	r2, r1, #12
 80023ce:	4084      	lsls	r4, r0
 80023d0:	0b12      	lsrs	r2, r2, #12
 80023d2:	e001      	b.n	80023d8 <__aeabi_ui2d+0x2c>
 80023d4:	2300      	movs	r3, #0
 80023d6:	2200      	movs	r2, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	4313      	orrs	r3, r2
 80023dc:	0020      	movs	r0, r4
 80023de:	0019      	movs	r1, r3
 80023e0:	bd10      	pop	{r4, pc}
 80023e2:	0022      	movs	r2, r4
 80023e4:	380b      	subs	r0, #11
 80023e6:	4082      	lsls	r2, r0
 80023e8:	0312      	lsls	r2, r2, #12
 80023ea:	2400      	movs	r4, #0
 80023ec:	0b12      	lsrs	r2, r2, #12
 80023ee:	e7f3      	b.n	80023d8 <__aeabi_ui2d+0x2c>
 80023f0:	0000041e 	.word	0x0000041e

080023f4 <__clzdi2>:
 80023f4:	b510      	push	{r4, lr}
 80023f6:	2900      	cmp	r1, #0
 80023f8:	d103      	bne.n	8002402 <__clzdi2+0xe>
 80023fa:	f7fe f839 	bl	8000470 <__clzsi2>
 80023fe:	3020      	adds	r0, #32
 8002400:	e002      	b.n	8002408 <__clzdi2+0x14>
 8002402:	0008      	movs	r0, r1
 8002404:	f7fe f834 	bl	8000470 <__clzsi2>
 8002408:	bd10      	pop	{r4, pc}
 800240a:	46c0      	nop			@ (mov r8, r8)

0800240c <spi_select_slave>:

bool ab1815_status_e_OK = 1;
bool ab1815_status_e_ERROR = 0;

void spi_select_slave(bool select) // 1 = high, 0 = low
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	0002      	movs	r2, r0
 8002414:	1dfb      	adds	r3, r7, #7
 8002416:	701a      	strb	r2, [r3, #0]
	if (select)
 8002418:	1dfb      	adds	r3, r7, #7
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d004      	beq.n	800242a <spi_select_slave+0x1e>
	{
		RTC_H();
 8002420:	4b06      	ldr	r3, [pc, #24]	@ (800243c <spi_select_slave+0x30>)
 8002422:	2280      	movs	r2, #128	@ 0x80
 8002424:	01d2      	lsls	r2, r2, #7
 8002426:	619a      	str	r2, [r3, #24]
	}
	else
	{
		RTC_L();
	}
}
 8002428:	e003      	b.n	8002432 <spi_select_slave+0x26>
		RTC_L();
 800242a:	4b04      	ldr	r3, [pc, #16]	@ (800243c <spi_select_slave+0x30>)
 800242c:	2280      	movs	r2, #128	@ 0x80
 800242e:	05d2      	lsls	r2, r2, #23
 8002430:	619a      	str	r2, [r3, #24]
}
 8002432:	46c0      	nop			@ (mov r8, r8)
 8002434:	46bd      	mov	sp, r7
 8002436:	b002      	add	sp, #8
 8002438:	bd80      	pop	{r7, pc}
 800243a:	46c0      	nop			@ (mov r8, r8)
 800243c:	50000400 	.word	0x50000400

08002440 <read>:

bool read(uint8_t offset, uint8_t *buf, uint8_t length)
{
 8002440:	b590      	push	{r4, r7, lr}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6039      	str	r1, [r7, #0]
 8002448:	0011      	movs	r1, r2
 800244a:	1dfb      	adds	r3, r7, #7
 800244c:	1c02      	adds	r2, r0, #0
 800244e:	701a      	strb	r2, [r3, #0]
 8002450:	1dbb      	adds	r3, r7, #6
 8002452:	1c0a      	adds	r2, r1, #0
 8002454:	701a      	strb	r2, [r3, #0]
	uint8_t address = AB1815_SPI_READ(offset);
 8002456:	1dfb      	adds	r3, r7, #7
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	227f      	movs	r2, #127	@ 0x7f
 800245c:	4013      	ands	r3, r2
 800245e:	b2da      	uxtb	r2, r3
 8002460:	240f      	movs	r4, #15
 8002462:	193b      	adds	r3, r7, r4
 8002464:	701a      	strb	r2, [r3, #0]

	spi_select_slave(0);
 8002466:	2000      	movs	r0, #0
 8002468:	f7ff ffd0 	bl	800240c <spi_select_slave>
	// SPI.transfer(address);
	// HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
	if (HAL_SPI_Transmit(&hspi1, &address, 1, 3000) != HAL_OK)
 800246c:	4b12      	ldr	r3, [pc, #72]	@ (80024b8 <read+0x78>)
 800246e:	1939      	adds	r1, r7, r4
 8002470:	4812      	ldr	r0, [pc, #72]	@ (80024bc <read+0x7c>)
 8002472:	2201      	movs	r2, #1
 8002474:	f005 fd18 	bl	8007ea8 <HAL_SPI_Transmit>
 8002478:	1e03      	subs	r3, r0, #0
 800247a:	d004      	beq.n	8002486 <read+0x46>
	{
		print_error(__func__, __LINE__);
 800247c:	4b10      	ldr	r3, [pc, #64]	@ (80024c0 <read+0x80>)
 800247e:	2134      	movs	r1, #52	@ 0x34
 8002480:	0018      	movs	r0, r3
 8002482:	f000 fd3b 	bl	8002efc <print_error>
	}

	if (HAL_SPI_Receive(&hspi1, buf, length, 3000) != HAL_OK)
 8002486:	1dbb      	adds	r3, r7, #6
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	b29a      	uxth	r2, r3
 800248c:	4b0a      	ldr	r3, [pc, #40]	@ (80024b8 <read+0x78>)
 800248e:	6839      	ldr	r1, [r7, #0]
 8002490:	480a      	ldr	r0, [pc, #40]	@ (80024bc <read+0x7c>)
 8002492:	f005 fe69 	bl	8008168 <HAL_SPI_Receive>
 8002496:	1e03      	subs	r3, r0, #0
 8002498:	d004      	beq.n	80024a4 <read+0x64>
	{
		print_error(__func__, __LINE__);
 800249a:	4b09      	ldr	r3, [pc, #36]	@ (80024c0 <read+0x80>)
 800249c:	2139      	movs	r1, #57	@ 0x39
 800249e:	0018      	movs	r0, r3
 80024a0:	f000 fd2c 	bl	8002efc <print_error>
	}

	spi_select_slave(1);
 80024a4:	2001      	movs	r0, #1
 80024a6:	f7ff ffb1 	bl	800240c <spi_select_slave>
	return ab1815_status_e_OK;
 80024aa:	4b06      	ldr	r3, [pc, #24]	@ (80024c4 <read+0x84>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
};
 80024ae:	0018      	movs	r0, r3
 80024b0:	46bd      	mov	sp, r7
 80024b2:	b005      	add	sp, #20
 80024b4:	bd90      	pop	{r4, r7, pc}
 80024b6:	46c0      	nop			@ (mov r8, r8)
 80024b8:	00000bb8 	.word	0x00000bb8
 80024bc:	20000118 	.word	0x20000118
 80024c0:	08009828 	.word	0x08009828
 80024c4:	20000000 	.word	0x20000000

080024c8 <write>:

bool write(uint8_t offset, uint8_t *buf, uint8_t length)
{
 80024c8:	b590      	push	{r4, r7, lr}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6039      	str	r1, [r7, #0]
 80024d0:	0011      	movs	r1, r2
 80024d2:	1dfb      	adds	r3, r7, #7
 80024d4:	1c02      	adds	r2, r0, #0
 80024d6:	701a      	strb	r2, [r3, #0]
 80024d8:	1dbb      	adds	r3, r7, #6
 80024da:	1c0a      	adds	r2, r1, #0
 80024dc:	701a      	strb	r2, [r3, #0]
	uint8_t address = AB1815_SPI_WRITE(offset);
 80024de:	1dfb      	adds	r3, r7, #7
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2280      	movs	r2, #128	@ 0x80
 80024e4:	4252      	negs	r2, r2
 80024e6:	4313      	orrs	r3, r2
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	240f      	movs	r4, #15
 80024ec:	193b      	adds	r3, r7, r4
 80024ee:	701a      	strb	r2, [r3, #0]
	spi_select_slave(0);
 80024f0:	2000      	movs	r0, #0
 80024f2:	f7ff ff8b 	bl	800240c <spi_select_slave>

	if (HAL_SPI_Transmit(&hspi1, &address, 1, 3000) != HAL_OK)
 80024f6:	4b12      	ldr	r3, [pc, #72]	@ (8002540 <write+0x78>)
 80024f8:	1939      	adds	r1, r7, r4
 80024fa:	4812      	ldr	r0, [pc, #72]	@ (8002544 <write+0x7c>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	f005 fcd3 	bl	8007ea8 <HAL_SPI_Transmit>
 8002502:	1e03      	subs	r3, r0, #0
 8002504:	d004      	beq.n	8002510 <write+0x48>
	{
		print_error(__func__, __LINE__);
 8002506:	4b10      	ldr	r3, [pc, #64]	@ (8002548 <write+0x80>)
 8002508:	2147      	movs	r1, #71	@ 0x47
 800250a:	0018      	movs	r0, r3
 800250c:	f000 fcf6 	bl	8002efc <print_error>
	}

	if (HAL_SPI_Transmit(&hspi1, buf, length, 3000) != HAL_OK)
 8002510:	1dbb      	adds	r3, r7, #6
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	b29a      	uxth	r2, r3
 8002516:	4b0a      	ldr	r3, [pc, #40]	@ (8002540 <write+0x78>)
 8002518:	6839      	ldr	r1, [r7, #0]
 800251a:	480a      	ldr	r0, [pc, #40]	@ (8002544 <write+0x7c>)
 800251c:	f005 fcc4 	bl	8007ea8 <HAL_SPI_Transmit>
 8002520:	1e03      	subs	r3, r0, #0
 8002522:	d004      	beq.n	800252e <write+0x66>
	{
		print_error(__func__, __LINE__);
 8002524:	4b08      	ldr	r3, [pc, #32]	@ (8002548 <write+0x80>)
 8002526:	214c      	movs	r1, #76	@ 0x4c
 8002528:	0018      	movs	r0, r3
 800252a:	f000 fce7 	bl	8002efc <print_error>
	}

	spi_select_slave(1); // set 1
 800252e:	2001      	movs	r0, #1
 8002530:	f7ff ff6c 	bl	800240c <spi_select_slave>
	return ab1815_status_e_OK;
 8002534:	4b05      	ldr	r3, [pc, #20]	@ (800254c <write+0x84>)
 8002536:	781b      	ldrb	r3, [r3, #0]
};
 8002538:	0018      	movs	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	b005      	add	sp, #20
 800253e:	bd90      	pop	{r4, r7, pc}
 8002540:	00000bb8 	.word	0x00000bb8
 8002544:	20000118 	.word	0x20000118
 8002548:	08009830 	.word	0x08009830
 800254c:	20000000 	.word	0x20000000

08002550 <clear_hundrdeds>:

// 	return result;
// };

bool clear_hundrdeds()
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
	uint8_t buf[1];
	buf[0] = 0;
 8002556:	1d3b      	adds	r3, r7, #4
 8002558:	2200      	movs	r2, #0
 800255a:	701a      	strb	r2, [r3, #0]
	return write(AB1815_REG_TIME_HUNDREDTHS, buf, 1);
 800255c:	1d3b      	adds	r3, r7, #4
 800255e:	2201      	movs	r2, #1
 8002560:	0019      	movs	r1, r3
 8002562:	2000      	movs	r0, #0
 8002564:	f7ff ffb0 	bl	80024c8 <write>
 8002568:	0003      	movs	r3, r0
};
 800256a:	0018      	movs	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	b002      	add	sp, #8
 8002570:	bd80      	pop	{r7, pc}

08002572 <set_control1>:
	return read(AB1815_REG_STATUS, &status->value, 1);
};

// 0x10
bool set_control1(control1_t *control1)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
	return write(AB1815_REG_CONTROL1, &control1->value, 1);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	0019      	movs	r1, r3
 8002580:	2010      	movs	r0, #16
 8002582:	f7ff ffa1 	bl	80024c8 <write>
 8002586:	0003      	movs	r3, r0
};
 8002588:	0018      	movs	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	b002      	add	sp, #8
 800258e:	bd80      	pop	{r7, pc}

08002590 <get_control1>:

bool get_control1(control1_t *control1)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	return read(AB1815_REG_CONTROL1, &control1->value, 1);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	0019      	movs	r1, r3
 800259e:	2010      	movs	r0, #16
 80025a0:	f7ff ff4e 	bl	8002440 <read>
 80025a4:	0003      	movs	r3, r0
};
 80025a6:	0018      	movs	r0, r3
 80025a8:	46bd      	mov	sp, r7
 80025aa:	b002      	add	sp, #8
 80025ac:	bd80      	pop	{r7, pc}

080025ae <set_control2>:

// 0x11
bool set_control2(control2_t *control2)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
	return write(AB1815_REG_CONTROL2, &control2->value, 1);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	0019      	movs	r1, r3
 80025bc:	2011      	movs	r0, #17
 80025be:	f7ff ff83 	bl	80024c8 <write>
 80025c2:	0003      	movs	r3, r0
};
 80025c4:	0018      	movs	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	b002      	add	sp, #8
 80025ca:	bd80      	pop	{r7, pc}

080025cc <set_interrupt_mask>:
	return read(AB1815_REG_CONTROL2, &control2->value, 1);
};

// 0x12
bool set_interrupt_mask(inturrupt_mask_t *inturrupt_mask)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
	return write(AB1815_REG_INTERRUPT_MASK, &inturrupt_mask->value, 1);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	0019      	movs	r1, r3
 80025da:	2012      	movs	r0, #18
 80025dc:	f7ff ff74 	bl	80024c8 <write>
 80025e0:	0003      	movs	r3, r0
};
 80025e2:	0018      	movs	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	b002      	add	sp, #8
 80025e8:	bd80      	pop	{r7, pc}

080025ea <get_interrupt_mask>:

bool get_interrupt_mask(inturrupt_mask_t *inturrupt_mask)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
	return read(AB1815_REG_INTERRUPT_MASK, &inturrupt_mask->value, 1);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	0019      	movs	r1, r3
 80025f8:	2012      	movs	r0, #18
 80025fa:	f7ff ff21 	bl	8002440 <read>
 80025fe:	0003      	movs	r3, r0
};
 8002600:	0018      	movs	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	b002      	add	sp, #8
 8002606:	bd80      	pop	{r7, pc}

08002608 <set_countdown_control>:
	return read(AB1815_REG_SLEEP_CONTROL, &sleep_control->value, 1);
};

// 0x18
bool set_countdown_control(countdown_control_t *countdown_control)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
	return write(AB1815_REG_COUNTDOWN_TIMER_CONTROL, &countdown_control->value, 1);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	0019      	movs	r1, r3
 8002616:	2018      	movs	r0, #24
 8002618:	f7ff ff56 	bl	80024c8 <write>
 800261c:	0003      	movs	r3, r0
};
 800261e:	0018      	movs	r0, r3
 8002620:	46bd      	mov	sp, r7
 8002622:	b002      	add	sp, #8
 8002624:	bd80      	pop	{r7, pc}

08002626 <set_countdown_timer>:
	return read(AB1815_REG_COUNTDOWN_TIMER_CONTROL, &countdown_control->value, 1);
};

// 0x19
bool set_countdown_timer(uint8_t timer_value)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b082      	sub	sp, #8
 800262a:	af00      	add	r7, sp, #0
 800262c:	0002      	movs	r2, r0
 800262e:	1dfb      	adds	r3, r7, #7
 8002630:	701a      	strb	r2, [r3, #0]
	return write(AB1815_REG_COUNTDOWN_TIMER, &timer_value, 1);
 8002632:	1dfb      	adds	r3, r7, #7
 8002634:	2201      	movs	r2, #1
 8002636:	0019      	movs	r1, r3
 8002638:	2019      	movs	r0, #25
 800263a:	f7ff ff45 	bl	80024c8 <write>
 800263e:	0003      	movs	r3, r0
}
 8002640:	0018      	movs	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	b002      	add	sp, #8
 8002646:	bd80      	pop	{r7, pc}

08002648 <get_oscillator_control>:
	return read(AB1815_REG_WATCHDOG_TIMER, &watchdog_timer->value, 1);
}

// 0x1C Get the oscillator control register
bool get_oscillator_control(oscillator_control_t *oscillator_control)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
	return read(AB1815_REG_OSCILLATOR_CONTROL, &oscillator_control->value, 1);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	0019      	movs	r1, r3
 8002656:	201c      	movs	r0, #28
 8002658:	f7ff fef2 	bl	8002440 <read>
 800265c:	0003      	movs	r3, r0
};
 800265e:	0018      	movs	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	b002      	add	sp, #8
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <set_oscillator_control>:

bool set_oscillator_control(oscillator_control_t *oscillator_control)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
	if (set_configuration_key(ab1815_oscillator_control) != ab1815_status_e_OK)
 8002670:	20a1      	movs	r0, #161	@ 0xa1
 8002672:	f000 f819 	bl	80026a8 <set_configuration_key>
 8002676:	0003      	movs	r3, r0
 8002678:	001a      	movs	r2, r3
 800267a:	4b09      	ldr	r3, [pc, #36]	@ (80026a0 <set_oscillator_control+0x38>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d002      	beq.n	8002688 <set_oscillator_control+0x20>
	{
		return ab1815_status_e_ERROR;
 8002682:	4b08      	ldr	r3, [pc, #32]	@ (80026a4 <set_oscillator_control+0x3c>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	e006      	b.n	8002696 <set_oscillator_control+0x2e>
	}
	return write(AB1815_REG_OSCILLATOR_CONTROL, &oscillator_control->value, 1);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	0019      	movs	r1, r3
 800268e:	201c      	movs	r0, #28
 8002690:	f7ff ff1a 	bl	80024c8 <write>
 8002694:	0003      	movs	r3, r0
};
 8002696:	0018      	movs	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	b002      	add	sp, #8
 800269c:	bd80      	pop	{r7, pc}
 800269e:	46c0      	nop			@ (mov r8, r8)
 80026a0:	20000000 	.word	0x20000000
 80026a4:	2000002c 	.word	0x2000002c

080026a8 <set_configuration_key>:
}

// 0x1E - Nothing on the AB1815
// 0x1F
bool set_configuration_key(configuration_key_e configuration_key)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	0002      	movs	r2, r0
 80026b0:	1dfb      	adds	r3, r7, #7
 80026b2:	701a      	strb	r2, [r3, #0]
	return write(AB1815_REG_CONFIGURATION_KEY, (uint8_t *)&configuration_key, 1);
 80026b4:	1dfb      	adds	r3, r7, #7
 80026b6:	2201      	movs	r2, #1
 80026b8:	0019      	movs	r1, r3
 80026ba:	201f      	movs	r0, #31
 80026bc:	f7ff ff04 	bl	80024c8 <write>
 80026c0:	0003      	movs	r3, r0
};
 80026c2:	0018      	movs	r0, r3
 80026c4:	46bd      	mov	sp, r7
 80026c6:	b002      	add	sp, #8
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <detectChip>:
		printf("# 0x%02x: 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x\r\n", pos, buffer[0], buffer[1], buffer[2], buffer[3], buffer[4], buffer[5], buffer[6], buffer[7]);
	}
}

bool detectChip()
{
 80026cc:	b590      	push	{r4, r7, lr}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
	bool bResult, finalResult = false;
 80026d2:	230f      	movs	r3, #15
 80026d4:	18fb      	adds	r3, r7, r3
 80026d6:	2200      	movs	r2, #0
 80026d8:	701a      	strb	r2, [r3, #0]
	uint8_t value = 0;
 80026da:	1d7b      	adds	r3, r7, #5
 80026dc:	2200      	movs	r2, #0
 80026de:	701a      	strb	r2, [r3, #0]

	// FOUT/nIRQ  will go HIGH when the chip is ready to respond

	uint32_t start = HAL_GetTick();
 80026e0:	f002 fb00 	bl	8004ce4 <HAL_GetTick>
 80026e4:	0003      	movs	r3, r0
 80026e6:	60bb      	str	r3, [r7, #8]
	bool ready = false;
 80026e8:	1dfb      	adds	r3, r7, #7
 80026ea:	2200      	movs	r2, #0
 80026ec:	701a      	strb	r2, [r3, #0]
	while (HAL_GetTick() - start < 2000)
 80026ee:	e011      	b.n	8002714 <detectChip+0x48>
	{
		if (HAL_GPIO_ReadPin(NIRQ_GPIO_Port, NIRQ_Pin) == GPIO_PIN_SET) // B12
 80026f0:	2380      	movs	r3, #128	@ 0x80
 80026f2:	015b      	lsls	r3, r3, #5
 80026f4:	4a30      	ldr	r2, [pc, #192]	@ (80027b8 <detectChip+0xec>)
 80026f6:	0019      	movs	r1, r3
 80026f8:	0010      	movs	r0, r2
 80026fa:	f003 f959 	bl	80059b0 <HAL_GPIO_ReadPin>
 80026fe:	0003      	movs	r3, r0
 8002700:	2b01      	cmp	r3, #1
 8002702:	d103      	bne.n	800270c <detectChip+0x40>
		{
			ready = true;
 8002704:	1dfb      	adds	r3, r7, #7
 8002706:	2201      	movs	r2, #1
 8002708:	701a      	strb	r2, [r3, #0]
			break;
 800270a:	e00c      	b.n	8002726 <detectChip+0x5a>
		}
		else
		{
			printf("FOUT did not go HIGH\n");
 800270c:	4b2b      	ldr	r3, [pc, #172]	@ (80027bc <detectChip+0xf0>)
 800270e:	0018      	movs	r0, r3
 8002710:	f002 f802 	bl	8004718 <printf_>
	while (HAL_GetTick() - start < 2000)
 8002714:	f002 fae6 	bl	8004ce4 <HAL_GetTick>
 8002718:	0002      	movs	r2, r0
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	1ad2      	subs	r2, r2, r3
 800271e:	23fa      	movs	r3, #250	@ 0xfa
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	429a      	cmp	r2, r3
 8002724:	d3e4      	bcc.n	80026f0 <detectChip+0x24>
			// May just want to return false here
		}
	}

	bResult = read(AB1815_REG_ID0, &value, 1); // REG_ID0 = 0x28, the upper RW bit indicating read (if 0) or write (if 1).
 8002726:	1dbc      	adds	r4, r7, #6
 8002728:	1d7b      	adds	r3, r7, #5
 800272a:	2201      	movs	r2, #1
 800272c:	0019      	movs	r1, r3
 800272e:	2028      	movs	r0, #40	@ 0x28
 8002730:	f7ff fe86 	bl	8002440 <read>
 8002734:	0003      	movs	r3, r0
 8002736:	7023      	strb	r3, [r4, #0]
	if (bResult && value == REG_ID0_AB18XX)
 8002738:	1dbb      	adds	r3, r7, #6
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d028      	beq.n	8002792 <detectChip+0xc6>
 8002740:	1d7b      	adds	r3, r7, #5
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b18      	cmp	r3, #24
 8002746:	d124      	bne.n	8002792 <detectChip+0xc6>
	{
		printf("REG_ID0 = %X", value);
 8002748:	1d7b      	adds	r3, r7, #5
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	001a      	movs	r2, r3
 800274e:	4b1c      	ldr	r3, [pc, #112]	@ (80027c0 <detectChip+0xf4>)
 8002750:	0011      	movs	r1, r2
 8002752:	0018      	movs	r0, r3
 8002754:	f001 ffe0 	bl	8004718 <printf_>
		bResult = read(AB1815_REG_ID1, &value, 1);
 8002758:	1dbc      	adds	r4, r7, #6
 800275a:	1d7b      	adds	r3, r7, #5
 800275c:	2201      	movs	r2, #1
 800275e:	0019      	movs	r1, r3
 8002760:	2029      	movs	r0, #41	@ 0x29
 8002762:	f7ff fe6d 	bl	8002440 <read>
 8002766:	0003      	movs	r3, r0
 8002768:	7023      	strb	r3, [r4, #0]
		if (bResult && value == REG_ID1_ABXX15)
 800276a:	1dbb      	adds	r3, r7, #6
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00f      	beq.n	8002792 <detectChip+0xc6>
 8002772:	1d7b      	adds	r3, r7, #5
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b15      	cmp	r3, #21
 8002778:	d10b      	bne.n	8002792 <detectChip+0xc6>
		{
			printf("%X\n", value);
 800277a:	1d7b      	adds	r3, r7, #5
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	001a      	movs	r2, r3
 8002780:	4b10      	ldr	r3, [pc, #64]	@ (80027c4 <detectChip+0xf8>)
 8002782:	0011      	movs	r1, r2
 8002784:	0018      	movs	r0, r3
 8002786:	f001 ffc7 	bl	8004718 <printf_>
			finalResult = true;
 800278a:	230f      	movs	r3, #15
 800278c:	18fb      	adds	r3, r7, r3
 800278e:	2201      	movs	r2, #1
 8002790:	701a      	strb	r2, [r3, #0]
		}
	}
	if (!finalResult)
 8002792:	230f      	movs	r3, #15
 8002794:	18fb      	adds	r3, r7, r3
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2201      	movs	r2, #1
 800279a:	4053      	eors	r3, r2
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <detectChip+0xde>
	{
		printf("not detected\n");
 80027a2:	4b09      	ldr	r3, [pc, #36]	@ (80027c8 <detectChip+0xfc>)
 80027a4:	0018      	movs	r0, r3
 80027a6:	f001 ffb7 	bl	8004718 <printf_>
	}

	return finalResult;
 80027aa:	230f      	movs	r3, #15
 80027ac:	18fb      	adds	r3, r7, r3
 80027ae:	781b      	ldrb	r3, [r3, #0]
}
 80027b0:	0018      	movs	r0, r3
 80027b2:	46bd      	mov	sp, r7
 80027b4:	b005      	add	sp, #20
 80027b6:	bd90      	pop	{r4, r7, pc}
 80027b8:	50000400 	.word	0x50000400
 80027bc:	0800971c 	.word	0x0800971c
 80027c0:	08009734 	.word	0x08009734
 80027c4:	08009744 	.word	0x08009744
 80027c8:	08009748 	.word	0x08009748

080027cc <initialize_clock>:

void initialize_clock(void)
{
 80027cc:	b590      	push	{r4, r7, lr}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
	oscillator_control_t oscillator_control;
	get_oscillator_control(&oscillator_control);
 80027d2:	240c      	movs	r4, #12
 80027d4:	193b      	adds	r3, r7, r4
 80027d6:	0018      	movs	r0, r3
 80027d8:	f7ff ff36 	bl	8002648 <get_oscillator_control>
	printf("# retrieved oscillator_control: %X\n", oscillator_control.value);
 80027dc:	193b      	adds	r3, r7, r4
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	001a      	movs	r2, r3
 80027e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002890 <initialize_clock+0xc4>)
 80027e4:	0011      	movs	r1, r2
 80027e6:	0018      	movs	r0, r3
 80027e8:	f001 ff96 	bl	8004718 <printf_>

	//  OSEL = 1 when using RC oscillator instead of XTAL
	oscillator_control.fields.OSEL = 1;
 80027ec:	0020      	movs	r0, r4
 80027ee:	183b      	adds	r3, r7, r0
 80027f0:	781a      	ldrb	r2, [r3, #0]
 80027f2:	2180      	movs	r1, #128	@ 0x80
 80027f4:	4249      	negs	r1, r1
 80027f6:	430a      	orrs	r2, r1
 80027f8:	701a      	strb	r2, [r3, #0]

	//  Disable I/O Interface during sleep to ensure the clock it not corrupted
	//  by floating pins and what not.
	oscillator_control.fields.PWGT = 1;
 80027fa:	183b      	adds	r3, r7, r0
 80027fc:	781a      	ldrb	r2, [r3, #0]
 80027fe:	2104      	movs	r1, #4
 8002800:	430a      	orrs	r2, r1
 8002802:	701a      	strb	r2, [r3, #0]
	printf("# set oscillator_control: %X\n", oscillator_control.value);
 8002804:	0004      	movs	r4, r0
 8002806:	183b      	adds	r3, r7, r0
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	001a      	movs	r2, r3
 800280c:	4b21      	ldr	r3, [pc, #132]	@ (8002894 <initialize_clock+0xc8>)
 800280e:	0011      	movs	r1, r2
 8002810:	0018      	movs	r0, r3
 8002812:	f001 ff81 	bl	8004718 <printf_>

	set_oscillator_control(&oscillator_control);
 8002816:	193b      	adds	r3, r7, r4
 8002818:	0018      	movs	r0, r3
 800281a:	f7ff ff25 	bl	8002668 <set_oscillator_control>

	//  Hundredths don't seem to tick over when using the RC clock source
	//  So I clear them
	clear_hundrdeds();
 800281e:	f7ff fe97 	bl	8002550 <clear_hundrdeds>

	control1_t control1;
	get_control1(&control1);
 8002822:	2408      	movs	r4, #8
 8002824:	193b      	adds	r3, r7, r4
 8002826:	0018      	movs	r0, r3
 8002828:	f7ff feb2 	bl	8002590 <get_control1>

	//	0 is 24 Hour Mode
	control1.fields._12_24 = 0;
 800282c:	0020      	movs	r0, r4
 800282e:	183b      	adds	r3, r7, r0
 8002830:	781a      	ldrb	r2, [r3, #0]
 8002832:	2140      	movs	r1, #64	@ 0x40
 8002834:	438a      	bics	r2, r1
 8002836:	701a      	strb	r2, [r3, #0]

	//  1 is Power Switch Mode
	control1.fields.PWR2 = 1;
 8002838:	183b      	adds	r3, r7, r0
 800283a:	781a      	ldrb	r2, [r3, #0]
 800283c:	2102      	movs	r1, #2
 800283e:	430a      	orrs	r2, r1
 8002840:	701a      	strb	r2, [r3, #0]
	set_control1(&control1);
 8002842:	183b      	adds	r3, r7, r0
 8002844:	0018      	movs	r0, r3
 8002846:	f7ff fe94 	bl	8002572 <set_control1>

	inturrupt_mask_t int_mask;
	get_interrupt_mask(&int_mask);
 800284a:	1d3b      	adds	r3, r7, #4
 800284c:	0018      	movs	r0, r3
 800284e:	f7ff fecc 	bl	80025ea <get_interrupt_mask>

	//  Alarm Interrupt Enable = true
	int_mask.fields.AIE = 1;
 8002852:	1d3b      	adds	r3, r7, #4
 8002854:	781a      	ldrb	r2, [r3, #0]
 8002856:	2104      	movs	r1, #4
 8002858:	430a      	orrs	r2, r1
 800285a:	701a      	strb	r2, [r3, #0]

	//  Set Interrupt Mode to be a Logic Level (opposed to a pulse)
	int_mask.fields.IM = ab1815_interrupt_im_level;
 800285c:	1d3b      	adds	r3, r7, #4
 800285e:	781a      	ldrb	r2, [r3, #0]
 8002860:	2160      	movs	r1, #96	@ 0x60
 8002862:	438a      	bics	r2, r1
 8002864:	701a      	strb	r2, [r3, #0]
	set_interrupt_mask(&int_mask);
 8002866:	1d3b      	adds	r3, r7, #4
 8002868:	0018      	movs	r0, r3
 800286a:	f7ff feaf 	bl	80025cc <set_interrupt_mask>

	//  Set NIRQ Pin to output NIRQ (since AIE is enabled)
	//    control2.fields.OUT1S = ab1815_fout_nIRQ_or_OUT;

	//  Set NIRQ2 pin to be power switched sleep
	control2.fields.OUT2S = ab1815_psw_SLEEP;
 800286e:	003b      	movs	r3, r7
 8002870:	781a      	ldrb	r2, [r3, #0]
 8002872:	211c      	movs	r1, #28
 8002874:	438a      	bics	r2, r1
 8002876:	1c11      	adds	r1, r2, #0
 8002878:	2218      	movs	r2, #24
 800287a:	430a      	orrs	r2, r1
 800287c:	701a      	strb	r2, [r3, #0]
	set_control2(&control2);
 800287e:	003b      	movs	r3, r7
 8002880:	0018      	movs	r0, r3
 8002882:	f7ff fe94 	bl	80025ae <set_control2>
}
 8002886:	46c0      	nop			@ (mov r8, r8)
 8002888:	46bd      	mov	sp, r7
 800288a:	b005      	add	sp, #20
 800288c:	bd90      	pop	{r4, r7, pc}
 800288e:	46c0      	nop			@ (mov r8, r8)
 8002890:	08009758 	.word	0x08009758
 8002894:	0800977c 	.word	0x0800977c

08002898 <set_timer>:

void set_timer(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
	countdown_control_t control;
	inturrupt_mask_t int_mask;
	int_mask.fields.TIE = 1;
 800289e:	003b      	movs	r3, r7
 80028a0:	781a      	ldrb	r2, [r3, #0]
 80028a2:	2108      	movs	r1, #8
 80028a4:	430a      	orrs	r2, r1
 80028a6:	701a      	strb	r2, [r3, #0]
	set_interrupt_mask(&int_mask);
 80028a8:	003b      	movs	r3, r7
 80028aa:	0018      	movs	r0, r3
 80028ac:	f7ff fe8e 	bl	80025cc <set_interrupt_mask>
	// Clear any pending interrupts
	write(AB1815_REG_STATUS, 0, 1); // REG_STATUS_DEFAULT= 0x00; //!< Status register, default
 80028b0:	2201      	movs	r2, #1
 80028b2:	2100      	movs	r1, #0
 80028b4:	200f      	movs	r0, #15
 80028b6:	f7ff fe07 	bl	80024c8 <write>
	// Stop countdown timer if already running since it can't be set while running
	// REG_TIMER_CTRL_DEFAULT   = 0x23; //!< Countdown timer control, 0b00100011 (TFPT + TFS = 1/60 Hz0)
	write(AB1815_REG_COUNTDOWN_TIMER_CONTROL, (uint8_t *)0x23, 1);
 80028ba:	2201      	movs	r2, #1
 80028bc:	2123      	movs	r1, #35	@ 0x23
 80028be:	2018      	movs	r0, #24
 80028c0:	f7ff fe02 	bl	80024c8 <write>

	control.fields.TM = 1;
 80028c4:	1d3b      	adds	r3, r7, #4
 80028c6:	781a      	ldrb	r2, [r3, #0]
 80028c8:	2140      	movs	r1, #64	@ 0x40
 80028ca:	430a      	orrs	r2, r1
 80028cc:	701a      	strb	r2, [r3, #0]
	control.fields.TRPT = 1;
 80028ce:	1d3b      	adds	r3, r7, #4
 80028d0:	781a      	ldrb	r2, [r3, #0]
 80028d2:	2120      	movs	r1, #32
 80028d4:	430a      	orrs	r2, r1
 80028d6:	701a      	strb	r2, [r3, #0]
	control.fields.TFS = 0b11;
 80028d8:	1d3b      	adds	r3, r7, #4
 80028da:	781a      	ldrb	r2, [r3, #0]
 80028dc:	2103      	movs	r1, #3
 80028de:	430a      	orrs	r2, r1
 80028e0:	701a      	strb	r2, [r3, #0]
	set_countdown_control(&control);
 80028e2:	1d3b      	adds	r3, r7, #4
 80028e4:	0018      	movs	r0, r3
 80028e6:	f7ff fe8f 	bl	8002608 <set_countdown_control>
	set_countdown_timer(60);
 80028ea:	203c      	movs	r0, #60	@ 0x3c
 80028ec:	f7ff fe9b 	bl	8002626 <set_countdown_timer>
}
 80028f0:	46c0      	nop			@ (mov r8, r8)
 80028f2:	46bd      	mov	sp, r7
 80028f4:	b002      	add	sp, #8
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <enable_countdown>:

void enable_countdown(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
	countdown_control_t control;
	control.fields.TE = 1;
 80028fe:	1d3b      	adds	r3, r7, #4
 8002900:	781a      	ldrb	r2, [r3, #0]
 8002902:	2180      	movs	r1, #128	@ 0x80
 8002904:	4249      	negs	r1, r1
 8002906:	430a      	orrs	r2, r1
 8002908:	701a      	strb	r2, [r3, #0]
	set_countdown_control(&control);
 800290a:	1d3b      	adds	r3, r7, #4
 800290c:	0018      	movs	r0, r3
 800290e:	f7ff fe7b 	bl	8002608 <set_countdown_control>
}
 8002912:	46c0      	nop			@ (mov r8, r8)
 8002914:	46bd      	mov	sp, r7
 8002916:	b002      	add	sp, #8
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002922:	1d3b      	adds	r3, r7, #4
 8002924:	0018      	movs	r0, r3
 8002926:	230c      	movs	r3, #12
 8002928:	001a      	movs	r2, r3
 800292a:	2100      	movs	r1, #0
 800292c:	f006 fe9a 	bl	8009664 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002930:	4b32      	ldr	r3, [pc, #200]	@ (80029fc <MX_ADC1_Init+0xe0>)
 8002932:	4a33      	ldr	r2, [pc, #204]	@ (8002a00 <MX_ADC1_Init+0xe4>)
 8002934:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002936:	4b31      	ldr	r3, [pc, #196]	@ (80029fc <MX_ADC1_Init+0xe0>)
 8002938:	22c0      	movs	r2, #192	@ 0xc0
 800293a:	0612      	lsls	r2, r2, #24
 800293c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800293e:	4b2f      	ldr	r3, [pc, #188]	@ (80029fc <MX_ADC1_Init+0xe0>)
 8002940:	2200      	movs	r2, #0
 8002942:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002944:	4b2d      	ldr	r3, [pc, #180]	@ (80029fc <MX_ADC1_Init+0xe0>)
 8002946:	2200      	movs	r2, #0
 8002948:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800294a:	4b2c      	ldr	r3, [pc, #176]	@ (80029fc <MX_ADC1_Init+0xe0>)
 800294c:	2200      	movs	r2, #0
 800294e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002950:	4b2a      	ldr	r3, [pc, #168]	@ (80029fc <MX_ADC1_Init+0xe0>)
 8002952:	2204      	movs	r2, #4
 8002954:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002956:	4b29      	ldr	r3, [pc, #164]	@ (80029fc <MX_ADC1_Init+0xe0>)
 8002958:	2200      	movs	r2, #0
 800295a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800295c:	4b27      	ldr	r3, [pc, #156]	@ (80029fc <MX_ADC1_Init+0xe0>)
 800295e:	2200      	movs	r2, #0
 8002960:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002962:	4b26      	ldr	r3, [pc, #152]	@ (80029fc <MX_ADC1_Init+0xe0>)
 8002964:	2200      	movs	r2, #0
 8002966:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8002968:	4b24      	ldr	r3, [pc, #144]	@ (80029fc <MX_ADC1_Init+0xe0>)
 800296a:	2201      	movs	r2, #1
 800296c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800296e:	4b23      	ldr	r3, [pc, #140]	@ (80029fc <MX_ADC1_Init+0xe0>)
 8002970:	2220      	movs	r2, #32
 8002972:	2100      	movs	r1, #0
 8002974:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002976:	4b21      	ldr	r3, [pc, #132]	@ (80029fc <MX_ADC1_Init+0xe0>)
 8002978:	2200      	movs	r2, #0
 800297a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800297c:	4b1f      	ldr	r3, [pc, #124]	@ (80029fc <MX_ADC1_Init+0xe0>)
 800297e:	2200      	movs	r2, #0
 8002980:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002982:	4b1e      	ldr	r3, [pc, #120]	@ (80029fc <MX_ADC1_Init+0xe0>)
 8002984:	222c      	movs	r2, #44	@ 0x2c
 8002986:	2100      	movs	r1, #0
 8002988:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800298a:	4b1c      	ldr	r3, [pc, #112]	@ (80029fc <MX_ADC1_Init+0xe0>)
 800298c:	2200      	movs	r2, #0
 800298e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_19CYCLES_5;
 8002990:	4b1a      	ldr	r3, [pc, #104]	@ (80029fc <MX_ADC1_Init+0xe0>)
 8002992:	2204      	movs	r2, #4
 8002994:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 8002996:	4b19      	ldr	r3, [pc, #100]	@ (80029fc <MX_ADC1_Init+0xe0>)
 8002998:	2206      	movs	r2, #6
 800299a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = ENABLE;
 800299c:	4b17      	ldr	r3, [pc, #92]	@ (80029fc <MX_ADC1_Init+0xe0>)
 800299e:	223c      	movs	r2, #60	@ 0x3c
 80029a0:	2101      	movs	r1, #1
 80029a2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_8;
 80029a4:	4b15      	ldr	r3, [pc, #84]	@ (80029fc <MX_ADC1_Init+0xe0>)
 80029a6:	2208      	movs	r2, #8
 80029a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_3;
 80029aa:	4b14      	ldr	r3, [pc, #80]	@ (80029fc <MX_ADC1_Init+0xe0>)
 80029ac:	2260      	movs	r2, #96	@ 0x60
 80029ae:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80029b0:	4b12      	ldr	r3, [pc, #72]	@ (80029fc <MX_ADC1_Init+0xe0>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80029b6:	4b11      	ldr	r3, [pc, #68]	@ (80029fc <MX_ADC1_Init+0xe0>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029bc:	4b0f      	ldr	r3, [pc, #60]	@ (80029fc <MX_ADC1_Init+0xe0>)
 80029be:	0018      	movs	r0, r3
 80029c0:	f002 faba 	bl	8004f38 <HAL_ADC_Init>
 80029c4:	1e03      	subs	r3, r0, #0
 80029c6:	d001      	beq.n	80029cc <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80029c8:	f000 faae 	bl	8002f28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 80029cc:	1d3b      	adds	r3, r7, #4
 80029ce:	4a0d      	ldr	r2, [pc, #52]	@ (8002a04 <MX_ADC1_Init+0xe8>)
 80029d0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80029d2:	1d3b      	adds	r3, r7, #4
 80029d4:	2200      	movs	r2, #0
 80029d6:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80029d8:	1d3b      	adds	r3, r7, #4
 80029da:	2200      	movs	r2, #0
 80029dc:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029de:	1d3a      	adds	r2, r7, #4
 80029e0:	4b06      	ldr	r3, [pc, #24]	@ (80029fc <MX_ADC1_Init+0xe0>)
 80029e2:	0011      	movs	r1, r2
 80029e4:	0018      	movs	r0, r3
 80029e6:	f002 fc4f 	bl	8005288 <HAL_ADC_ConfigChannel>
 80029ea:	1e03      	subs	r3, r0, #0
 80029ec:	d001      	beq.n	80029f2 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 80029ee:	f000 fa9b 	bl	8002f28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80029f2:	46c0      	nop			@ (mov r8, r8)
 80029f4:	46bd      	mov	sp, r7
 80029f6:	b004      	add	sp, #16
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	46c0      	nop			@ (mov r8, r8)
 80029fc:	20000030 	.word	0x20000030
 8002a00:	40012400 	.word	0x40012400
 8002a04:	b4002000 	.word	0xb4002000

08002a08 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002a08:	b590      	push	{r4, r7, lr}
 8002a0a:	b095      	sub	sp, #84	@ 0x54
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a10:	240c      	movs	r4, #12
 8002a12:	193b      	adds	r3, r7, r4
 8002a14:	0018      	movs	r0, r3
 8002a16:	2344      	movs	r3, #68	@ 0x44
 8002a18:	001a      	movs	r2, r3
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	f006 fe22 	bl	8009664 <memset>
  if(adcHandle->Instance==ADC1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a11      	ldr	r2, [pc, #68]	@ (8002a6c <HAL_ADC_MspInit+0x64>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d11c      	bne.n	8002a64 <HAL_ADC_MspInit+0x5c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002a2a:	193b      	adds	r3, r7, r4
 8002a2c:	2280      	movs	r2, #128	@ 0x80
 8002a2e:	01d2      	lsls	r2, r2, #7
 8002a30:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8002a32:	193b      	adds	r3, r7, r4
 8002a34:	2200      	movs	r2, #0
 8002a36:	63da      	str	r2, [r3, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a38:	193b      	adds	r3, r7, r4
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f003 ffdc 	bl	80069f8 <HAL_RCCEx_PeriphCLKConfig>
 8002a40:	1e03      	subs	r3, r0, #0
 8002a42:	d001      	beq.n	8002a48 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 8002a44:	f000 fa70 	bl	8002f28 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002a48:	4b09      	ldr	r3, [pc, #36]	@ (8002a70 <HAL_ADC_MspInit+0x68>)
 8002a4a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002a4c:	4b08      	ldr	r3, [pc, #32]	@ (8002a70 <HAL_ADC_MspInit+0x68>)
 8002a4e:	2180      	movs	r1, #128	@ 0x80
 8002a50:	0349      	lsls	r1, r1, #13
 8002a52:	430a      	orrs	r2, r1
 8002a54:	661a      	str	r2, [r3, #96]	@ 0x60
 8002a56:	4b06      	ldr	r3, [pc, #24]	@ (8002a70 <HAL_ADC_MspInit+0x68>)
 8002a58:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002a5a:	2380      	movs	r3, #128	@ 0x80
 8002a5c:	035b      	lsls	r3, r3, #13
 8002a5e:	4013      	ands	r3, r2
 8002a60:	60bb      	str	r3, [r7, #8]
 8002a62:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002a64:	46c0      	nop			@ (mov r8, r8)
 8002a66:	46bd      	mov	sp, r7
 8002a68:	b015      	add	sp, #84	@ 0x54
 8002a6a:	bd90      	pop	{r4, r7, pc}
 8002a6c:	40012400 	.word	0x40012400
 8002a70:	40021000 	.word	0x40021000

08002a74 <MX_GPIO_Init>:
/** Configure pins
     PA13 (SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8002a74:	b590      	push	{r4, r7, lr}
 8002a76:	b08b      	sub	sp, #44	@ 0x2c
 8002a78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a7a:	2414      	movs	r4, #20
 8002a7c:	193b      	adds	r3, r7, r4
 8002a7e:	0018      	movs	r0, r3
 8002a80:	2314      	movs	r3, #20
 8002a82:	001a      	movs	r2, r3
 8002a84:	2100      	movs	r1, #0
 8002a86:	f006 fded 	bl	8009664 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a8a:	4b78      	ldr	r3, [pc, #480]	@ (8002c6c <MX_GPIO_Init+0x1f8>)
 8002a8c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002a8e:	4b77      	ldr	r3, [pc, #476]	@ (8002c6c <MX_GPIO_Init+0x1f8>)
 8002a90:	2104      	movs	r1, #4
 8002a92:	430a      	orrs	r2, r1
 8002a94:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002a96:	4b75      	ldr	r3, [pc, #468]	@ (8002c6c <MX_GPIO_Init+0x1f8>)
 8002a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a9a:	2204      	movs	r2, #4
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002aa2:	4b72      	ldr	r3, [pc, #456]	@ (8002c6c <MX_GPIO_Init+0x1f8>)
 8002aa4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002aa6:	4b71      	ldr	r3, [pc, #452]	@ (8002c6c <MX_GPIO_Init+0x1f8>)
 8002aa8:	2120      	movs	r1, #32
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002aae:	4b6f      	ldr	r3, [pc, #444]	@ (8002c6c <MX_GPIO_Init+0x1f8>)
 8002ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aba:	4b6c      	ldr	r3, [pc, #432]	@ (8002c6c <MX_GPIO_Init+0x1f8>)
 8002abc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002abe:	4b6b      	ldr	r3, [pc, #428]	@ (8002c6c <MX_GPIO_Init+0x1f8>)
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002ac6:	4b69      	ldr	r3, [pc, #420]	@ (8002c6c <MX_GPIO_Init+0x1f8>)
 8002ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aca:	2201      	movs	r2, #1
 8002acc:	4013      	ands	r3, r2
 8002ace:	60bb      	str	r3, [r7, #8]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad2:	4b66      	ldr	r3, [pc, #408]	@ (8002c6c <MX_GPIO_Init+0x1f8>)
 8002ad4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002ad6:	4b65      	ldr	r3, [pc, #404]	@ (8002c6c <MX_GPIO_Init+0x1f8>)
 8002ad8:	2102      	movs	r1, #2
 8002ada:	430a      	orrs	r2, r1
 8002adc:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002ade:	4b63      	ldr	r3, [pc, #396]	@ (8002c6c <MX_GPIO_Init+0x1f8>)
 8002ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	607b      	str	r3, [r7, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|WDI_Pin|PAPER_ON_Pin, GPIO_PIN_RESET);
 8002aea:	4961      	ldr	r1, [pc, #388]	@ (8002c70 <MX_GPIO_Init+0x1fc>)
 8002aec:	4b61      	ldr	r3, [pc, #388]	@ (8002c74 <MX_GPIO_Init+0x200>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	0018      	movs	r0, r3
 8002af2:	f002 ff7a 	bl	80059ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_RTC_GPIO_Port, CE_RTC_Pin, GPIO_PIN_SET);
 8002af6:	2380      	movs	r3, #128	@ 0x80
 8002af8:	01db      	lsls	r3, r3, #7
 8002afa:	485e      	ldr	r0, [pc, #376]	@ (8002c74 <MX_GPIO_Init+0x200>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	0019      	movs	r1, r3
 8002b00:	f002 ff73 	bl	80059ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D_C_Pin|RST_Pin, GPIO_PIN_RESET);
 8002b04:	2390      	movs	r3, #144	@ 0x90
 8002b06:	0119      	lsls	r1, r3, #4
 8002b08:	23a0      	movs	r3, #160	@ 0xa0
 8002b0a:	05db      	lsls	r3, r3, #23
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f002 ff6b 	bl	80059ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSB_Pin|CS_Pin, GPIO_PIN_SET);
 8002b14:	23a0      	movs	r3, #160	@ 0xa0
 8002b16:	0159      	lsls	r1, r3, #5
 8002b18:	23a0      	movs	r3, #160	@ 0xa0
 8002b1a:	05db      	lsls	r3, r3, #23
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f002 ff63 	bl	80059ea <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002b24:	193b      	adds	r3, r7, r4
 8002b26:	22e0      	movs	r2, #224	@ 0xe0
 8002b28:	0212      	lsls	r2, r2, #8
 8002b2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b2c:	193b      	adds	r3, r7, r4
 8002b2e:	2203      	movs	r2, #3
 8002b30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	193b      	adds	r3, r7, r4
 8002b34:	2200      	movs	r2, #0
 8002b36:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b38:	193b      	adds	r3, r7, r4
 8002b3a:	4a4f      	ldr	r2, [pc, #316]	@ (8002c78 <MX_GPIO_Init+0x204>)
 8002b3c:	0019      	movs	r1, r3
 8002b3e:	0010      	movs	r0, r2
 8002b40:	f002 fdc2 	bl	80056c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002b44:	193b      	adds	r3, r7, r4
 8002b46:	220f      	movs	r2, #15
 8002b48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b4a:	193b      	adds	r3, r7, r4
 8002b4c:	2203      	movs	r2, #3
 8002b4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	193b      	adds	r3, r7, r4
 8002b52:	2200      	movs	r2, #0
 8002b54:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b56:	193b      	adds	r3, r7, r4
 8002b58:	4a48      	ldr	r2, [pc, #288]	@ (8002c7c <MX_GPIO_Init+0x208>)
 8002b5a:	0019      	movs	r1, r3
 8002b5c:	0010      	movs	r0, r2
 8002b5e:	f002 fdb3 	bl	80056c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15;
 8002b62:	193b      	adds	r3, r7, r4
 8002b64:	4a46      	ldr	r2, [pc, #280]	@ (8002c80 <MX_GPIO_Init+0x20c>)
 8002b66:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b68:	193b      	adds	r3, r7, r4
 8002b6a:	2203      	movs	r2, #3
 8002b6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6e:	193b      	adds	r3, r7, r4
 8002b70:	2200      	movs	r2, #0
 8002b72:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b74:	193a      	adds	r2, r7, r4
 8002b76:	23a0      	movs	r3, #160	@ 0xa0
 8002b78:	05db      	lsls	r3, r3, #23
 8002b7a:	0011      	movs	r1, r2
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f002 fda3 	bl	80056c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB10 PB11
                           PB3 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8002b82:	193b      	adds	r3, r7, r4
 8002b84:	4a3f      	ldr	r2, [pc, #252]	@ (8002c84 <MX_GPIO_Init+0x210>)
 8002b86:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b88:	193b      	adds	r3, r7, r4
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8e:	193b      	adds	r3, r7, r4
 8002b90:	2200      	movs	r2, #0
 8002b92:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b94:	193b      	adds	r3, r7, r4
 8002b96:	4a37      	ldr	r2, [pc, #220]	@ (8002c74 <MX_GPIO_Init+0x200>)
 8002b98:	0019      	movs	r1, r3
 8002b9a:	0010      	movs	r0, r2
 8002b9c:	f002 fd94 	bl	80056c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|WDI_Pin|PAPER_ON_Pin;
 8002ba0:	193b      	adds	r3, r7, r4
 8002ba2:	4a33      	ldr	r2, [pc, #204]	@ (8002c70 <MX_GPIO_Init+0x1fc>)
 8002ba4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ba6:	193b      	adds	r3, r7, r4
 8002ba8:	2201      	movs	r2, #1
 8002baa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bac:	193b      	adds	r3, r7, r4
 8002bae:	2200      	movs	r2, #0
 8002bb0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb2:	193b      	adds	r3, r7, r4
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb8:	193b      	adds	r3, r7, r4
 8002bba:	4a2e      	ldr	r2, [pc, #184]	@ (8002c74 <MX_GPIO_Init+0x200>)
 8002bbc:	0019      	movs	r1, r3
 8002bbe:	0010      	movs	r0, r2
 8002bc0:	f002 fd82 	bl	80056c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NIRQ_Pin;
 8002bc4:	0021      	movs	r1, r4
 8002bc6:	187b      	adds	r3, r7, r1
 8002bc8:	2280      	movs	r2, #128	@ 0x80
 8002bca:	0152      	lsls	r2, r2, #5
 8002bcc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bce:	000c      	movs	r4, r1
 8002bd0:	193b      	adds	r3, r7, r4
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd6:	193b      	adds	r3, r7, r4
 8002bd8:	2200      	movs	r2, #0
 8002bda:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NIRQ_GPIO_Port, &GPIO_InitStruct);
 8002bdc:	193b      	adds	r3, r7, r4
 8002bde:	4a25      	ldr	r2, [pc, #148]	@ (8002c74 <MX_GPIO_Init+0x200>)
 8002be0:	0019      	movs	r1, r3
 8002be2:	0010      	movs	r0, r2
 8002be4:	f002 fd70 	bl	80056c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_RTC_Pin;
 8002be8:	0021      	movs	r1, r4
 8002bea:	187b      	adds	r3, r7, r1
 8002bec:	2280      	movs	r2, #128	@ 0x80
 8002bee:	01d2      	lsls	r2, r2, #7
 8002bf0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bf2:	000c      	movs	r4, r1
 8002bf4:	193b      	adds	r3, r7, r4
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	193b      	adds	r3, r7, r4
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002c00:	193b      	adds	r3, r7, r4
 8002c02:	2201      	movs	r2, #1
 8002c04:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CE_RTC_GPIO_Port, &GPIO_InitStruct);
 8002c06:	193b      	adds	r3, r7, r4
 8002c08:	4a1a      	ldr	r2, [pc, #104]	@ (8002c74 <MX_GPIO_Init+0x200>)
 8002c0a:	0019      	movs	r1, r3
 8002c0c:	0010      	movs	r0, r2
 8002c0e:	f002 fd5b 	bl	80056c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = D_C_Pin|CSB_Pin|RST_Pin|CS_Pin;
 8002c12:	0021      	movs	r1, r4
 8002c14:	187b      	adds	r3, r7, r1
 8002c16:	22e8      	movs	r2, #232	@ 0xe8
 8002c18:	0152      	lsls	r2, r2, #5
 8002c1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c1c:	000c      	movs	r4, r1
 8002c1e:	193b      	adds	r3, r7, r4
 8002c20:	2201      	movs	r2, #1
 8002c22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	193b      	adds	r3, r7, r4
 8002c26:	2200      	movs	r2, #0
 8002c28:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2a:	193b      	adds	r3, r7, r4
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c30:	193a      	adds	r2, r7, r4
 8002c32:	23a0      	movs	r3, #160	@ 0xa0
 8002c34:	05db      	lsls	r3, r3, #23
 8002c36:	0011      	movs	r1, r2
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f002 fd45 	bl	80056c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 8002c3e:	0021      	movs	r1, r4
 8002c40:	187b      	adds	r3, r7, r1
 8002c42:	2280      	movs	r2, #128	@ 0x80
 8002c44:	0092      	lsls	r2, r2, #2
 8002c46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c48:	187b      	adds	r3, r7, r1
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	187b      	adds	r3, r7, r1
 8002c50:	2200      	movs	r2, #0
 8002c52:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 8002c54:	187a      	adds	r2, r7, r1
 8002c56:	23a0      	movs	r3, #160	@ 0xa0
 8002c58:	05db      	lsls	r3, r3, #23
 8002c5a:	0011      	movs	r1, r2
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f002 fd33 	bl	80056c8 <HAL_GPIO_Init>

}
 8002c62:	46c0      	nop			@ (mov r8, r8)
 8002c64:	46bd      	mov	sp, r7
 8002c66:	b00b      	add	sp, #44	@ 0x2c
 8002c68:	bd90      	pop	{r4, r7, pc}
 8002c6a:	46c0      	nop			@ (mov r8, r8)
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	0000a002 	.word	0x0000a002
 8002c74:	50000400 	.word	0x50000400
 8002c78:	50000800 	.word	0x50000800
 8002c7c:	50001400 	.word	0x50001400
 8002c80:	00008013 	.word	0x00008013
 8002c84:	00000f3d 	.word	0x00000f3d

08002c88 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cfc <MX_I2C1_Init+0x74>)
 8002c8e:	4a1c      	ldr	r2, [pc, #112]	@ (8002d00 <MX_I2C1_Init+0x78>)
 8002c90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8002c92:	4b1a      	ldr	r3, [pc, #104]	@ (8002cfc <MX_I2C1_Init+0x74>)
 8002c94:	4a1b      	ldr	r2, [pc, #108]	@ (8002d04 <MX_I2C1_Init+0x7c>)
 8002c96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002c98:	4b18      	ldr	r3, [pc, #96]	@ (8002cfc <MX_I2C1_Init+0x74>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c9e:	4b17      	ldr	r3, [pc, #92]	@ (8002cfc <MX_I2C1_Init+0x74>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ca4:	4b15      	ldr	r3, [pc, #84]	@ (8002cfc <MX_I2C1_Init+0x74>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002caa:	4b14      	ldr	r3, [pc, #80]	@ (8002cfc <MX_I2C1_Init+0x74>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002cb0:	4b12      	ldr	r3, [pc, #72]	@ (8002cfc <MX_I2C1_Init+0x74>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002cb6:	4b11      	ldr	r3, [pc, #68]	@ (8002cfc <MX_I2C1_Init+0x74>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8002cfc <MX_I2C1_Init+0x74>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002cfc <MX_I2C1_Init+0x74>)
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f002 fead 	bl	8005a24 <HAL_I2C_Init>
 8002cca:	1e03      	subs	r3, r0, #0
 8002ccc:	d001      	beq.n	8002cd2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002cce:	f000 f92b 	bl	8002f28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8002cfc <MX_I2C1_Init+0x74>)
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	f002 ff4a 	bl	8005b70 <HAL_I2CEx_ConfigAnalogFilter>
 8002cdc:	1e03      	subs	r3, r0, #0
 8002cde:	d001      	beq.n	8002ce4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002ce0:	f000 f922 	bl	8002f28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002ce4:	4b05      	ldr	r3, [pc, #20]	@ (8002cfc <MX_I2C1_Init+0x74>)
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f002 ff8d 	bl	8005c08 <HAL_I2CEx_ConfigDigitalFilter>
 8002cee:	1e03      	subs	r3, r0, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002cf2:	f000 f919 	bl	8002f28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002cf6:	46c0      	nop			@ (mov r8, r8)
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	20000094 	.word	0x20000094
 8002d00:	40005400 	.word	0x40005400
 8002d04:	00303d5b 	.word	0x00303d5b

08002d08 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002d08:	b590      	push	{r4, r7, lr}
 8002d0a:	b09b      	sub	sp, #108	@ 0x6c
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d10:	2354      	movs	r3, #84	@ 0x54
 8002d12:	18fb      	adds	r3, r7, r3
 8002d14:	0018      	movs	r0, r3
 8002d16:	2314      	movs	r3, #20
 8002d18:	001a      	movs	r2, r3
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	f006 fca2 	bl	8009664 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d20:	2410      	movs	r4, #16
 8002d22:	193b      	adds	r3, r7, r4
 8002d24:	0018      	movs	r0, r3
 8002d26:	2344      	movs	r3, #68	@ 0x44
 8002d28:	001a      	movs	r2, r3
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	f006 fc9a 	bl	8009664 <memset>
  if(i2cHandle->Instance==I2C1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a22      	ldr	r2, [pc, #136]	@ (8002dc0 <HAL_I2C_MspInit+0xb8>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d13d      	bne.n	8002db6 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002d3a:	193b      	adds	r3, r7, r4
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002d40:	193b      	adds	r3, r7, r4
 8002d42:	2200      	movs	r2, #0
 8002d44:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d46:	193b      	adds	r3, r7, r4
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f003 fe55 	bl	80069f8 <HAL_RCCEx_PeriphCLKConfig>
 8002d4e:	1e03      	subs	r3, r0, #0
 8002d50:	d001      	beq.n	8002d56 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002d52:	f000 f8e9 	bl	8002f28 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d56:	4b1b      	ldr	r3, [pc, #108]	@ (8002dc4 <HAL_I2C_MspInit+0xbc>)
 8002d58:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8002dc4 <HAL_I2C_MspInit+0xbc>)
 8002d5c:	2102      	movs	r1, #2
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002d62:	4b18      	ldr	r3, [pc, #96]	@ (8002dc4 <HAL_I2C_MspInit+0xbc>)
 8002d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d66:	2202      	movs	r2, #2
 8002d68:	4013      	ands	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d6e:	2154      	movs	r1, #84	@ 0x54
 8002d70:	187b      	adds	r3, r7, r1
 8002d72:	22c0      	movs	r2, #192	@ 0xc0
 8002d74:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d76:	187b      	adds	r3, r7, r1
 8002d78:	2212      	movs	r2, #18
 8002d7a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7c:	187b      	adds	r3, r7, r1
 8002d7e:	2200      	movs	r2, #0
 8002d80:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d82:	187b      	adds	r3, r7, r1
 8002d84:	2200      	movs	r2, #0
 8002d86:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d88:	187b      	adds	r3, r7, r1
 8002d8a:	2204      	movs	r2, #4
 8002d8c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d8e:	187b      	adds	r3, r7, r1
 8002d90:	4a0d      	ldr	r2, [pc, #52]	@ (8002dc8 <HAL_I2C_MspInit+0xc0>)
 8002d92:	0019      	movs	r1, r3
 8002d94:	0010      	movs	r0, r2
 8002d96:	f002 fc97 	bl	80056c8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc4 <HAL_I2C_MspInit+0xbc>)
 8002d9c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002d9e:	4b09      	ldr	r3, [pc, #36]	@ (8002dc4 <HAL_I2C_MspInit+0xbc>)
 8002da0:	2180      	movs	r1, #128	@ 0x80
 8002da2:	0389      	lsls	r1, r1, #14
 8002da4:	430a      	orrs	r2, r1
 8002da6:	659a      	str	r2, [r3, #88]	@ 0x58
 8002da8:	4b06      	ldr	r3, [pc, #24]	@ (8002dc4 <HAL_I2C_MspInit+0xbc>)
 8002daa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002dac:	2380      	movs	r3, #128	@ 0x80
 8002dae:	039b      	lsls	r3, r3, #14
 8002db0:	4013      	ands	r3, r2
 8002db2:	60bb      	str	r3, [r7, #8]
 8002db4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002db6:	46c0      	nop			@ (mov r8, r8)
 8002db8:	46bd      	mov	sp, r7
 8002dba:	b01b      	add	sp, #108	@ 0x6c
 8002dbc:	bd90      	pop	{r4, r7, pc}
 8002dbe:	46c0      	nop			@ (mov r8, r8)
 8002dc0:	40005400 	.word	0x40005400
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	50000400 	.word	0x50000400

08002dcc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002dd2:	f001 ff16 	bl	8004c02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002dd6:	f000 f849 	bl	8002e6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002dda:	f7ff fe4b 	bl	8002a74 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002dde:	f7ff fd9d 	bl	800291c <MX_ADC1_Init>
  MX_I2C1_Init();
 8002de2:	f7ff ff51 	bl	8002c88 <MX_I2C1_Init>
  MX_RTC_Init();
 8002de6:	f001 fccb 	bl	8004780 <MX_RTC_Init>
  MX_SPI1_Init();
 8002dea:	f001 fd43 	bl	8004874 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002dee:	f001 fe31 	bl	8004a54 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Detect power om mode. First time or after sleep!!

  detectChip();
 8002df2:	f7ff fc6b 	bl	80026cc <detectChip>
  uint32_t clk = HAL_RCC_GetSysClockFreq();
 8002df6:	f003 fcd5 	bl	80067a4 <HAL_RCC_GetSysClockFreq>
 8002dfa:	0003      	movs	r3, r0
 8002dfc:	603b      	str	r3, [r7, #0]
  printf("\nMAIN. Power ON.   %d\n", clk);
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	4b16      	ldr	r3, [pc, #88]	@ (8002e5c <main+0x90>)
 8002e02:	0011      	movs	r1, r2
 8002e04:	0018      	movs	r0, r3
 8002e06:	f001 fc87 	bl	8004718 <printf_>
  initialize_clock();
 8002e0a:	f7ff fcdf 	bl	80027cc <initialize_clock>
  set_timer();
 8002e0e:	f7ff fd43 	bl	8002898 <set_timer>
  // hex_dump();

  enable_countdown();
 8002e12:	f7ff fd71 	bl	80028f8 <enable_countdown>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t ii = 0;
 8002e16:	2300      	movs	r3, #0
 8002e18:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    printf("%d\n", ii);
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	4b10      	ldr	r3, [pc, #64]	@ (8002e60 <main+0x94>)
 8002e1e:	0011      	movs	r1, r2
 8002e20:	0018      	movs	r0, r3
 8002e22:	f001 fc79 	bl	8004718 <printf_>
    LED1_ON();
 8002e26:	4b0f      	ldr	r3, [pc, #60]	@ (8002e64 <main+0x98>)
 8002e28:	2202      	movs	r2, #2
 8002e2a:	619a      	str	r2, [r3, #24]
    HAL_Delay(3000);
 8002e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8002e68 <main+0x9c>)
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f001 ff62 	bl	8004cf8 <HAL_Delay>
    LED1_OFF();
 8002e34:	4b0b      	ldr	r3, [pc, #44]	@ (8002e64 <main+0x98>)
 8002e36:	2280      	movs	r2, #128	@ 0x80
 8002e38:	0292      	lsls	r2, r2, #10
 8002e3a:	619a      	str	r2, [r3, #24]
    printf("%d\n", ii++);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	607a      	str	r2, [r7, #4]
 8002e42:	4a07      	ldr	r2, [pc, #28]	@ (8002e60 <main+0x94>)
 8002e44:	0019      	movs	r1, r3
 8002e46:	0010      	movs	r0, r2
 8002e48:	f001 fc66 	bl	8004718 <printf_>
    HAL_Delay(1000);
 8002e4c:	23fa      	movs	r3, #250	@ 0xfa
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	0018      	movs	r0, r3
 8002e52:	f001 ff51 	bl	8004cf8 <HAL_Delay>
    printf("%d\n", ii);
 8002e56:	46c0      	nop			@ (mov r8, r8)
 8002e58:	e7df      	b.n	8002e1a <main+0x4e>
 8002e5a:	46c0      	nop			@ (mov r8, r8)
 8002e5c:	0800979c 	.word	0x0800979c
 8002e60:	080097b4 	.word	0x080097b4
 8002e64:	50000400 	.word	0x50000400
 8002e68:	00000bb8 	.word	0x00000bb8

08002e6c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002e6c:	b590      	push	{r4, r7, lr}
 8002e6e:	b099      	sub	sp, #100	@ 0x64
 8002e70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e72:	2414      	movs	r4, #20
 8002e74:	193b      	adds	r3, r7, r4
 8002e76:	0018      	movs	r0, r3
 8002e78:	234c      	movs	r3, #76	@ 0x4c
 8002e7a:	001a      	movs	r2, r3
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	f006 fbf1 	bl	8009664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e82:	1d3b      	adds	r3, r7, #4
 8002e84:	0018      	movs	r0, r3
 8002e86:	2310      	movs	r3, #16
 8002e88:	001a      	movs	r2, r3
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	f006 fbea 	bl	8009664 <memset>

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e90:	2380      	movs	r3, #128	@ 0x80
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	0018      	movs	r0, r3
 8002e96:	f002 ff03 	bl	8005ca0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
 8002e9a:	193b      	adds	r3, r7, r4
 8002e9c:	220a      	movs	r2, #10
 8002e9e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ea0:	193b      	adds	r3, r7, r4
 8002ea2:	2280      	movs	r2, #128	@ 0x80
 8002ea4:	0052      	lsls	r2, r2, #1
 8002ea6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ea8:	193b      	adds	r3, r7, r4
 8002eaa:	2240      	movs	r2, #64	@ 0x40
 8002eac:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002eae:	193b      	adds	r3, r7, r4
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002eb4:	193b      	adds	r3, r7, r4
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002eba:	193b      	adds	r3, r7, r4
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	f002 ff5b 	bl	8005d78 <HAL_RCC_OscConfig>
 8002ec2:	1e03      	subs	r3, r0, #0
 8002ec4:	d001      	beq.n	8002eca <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002ec6:	f000 f82f 	bl	8002f28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8002eca:	1d3b      	adds	r3, r7, #4
 8002ecc:	2207      	movs	r2, #7
 8002ece:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002ed0:	1d3b      	adds	r3, r7, #4
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ed6:	1d3b      	adds	r3, r7, #4
 8002ed8:	2200      	movs	r2, #0
 8002eda:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002edc:	1d3b      	adds	r3, r7, #4
 8002ede:	2200      	movs	r2, #0
 8002ee0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002ee2:	1d3b      	adds	r3, r7, #4
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	f003 fb70 	bl	80065cc <HAL_RCC_ClockConfig>
 8002eec:	1e03      	subs	r3, r0, #0
 8002eee:	d001      	beq.n	8002ef4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002ef0:	f000 f81a 	bl	8002f28 <Error_Handler>
  }
}
 8002ef4:	46c0      	nop			@ (mov r8, r8)
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	b019      	add	sp, #100	@ 0x64
 8002efa:	bd90      	pop	{r4, r7, pc}

08002efc <print_error>:

/* USER CODE BEGIN 4 */

void print_error(const char *func, uint32_t line)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  printf(" *** Error:  %s ,   %d\n", func, line);
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	4b06      	ldr	r3, [pc, #24]	@ (8002f24 <print_error+0x28>)
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f001 fc03 	bl	8004718 <printf_>
  HAL_Delay(1000);
 8002f12:	23fa      	movs	r3, #250	@ 0xfa
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	0018      	movs	r0, r3
 8002f18:	f001 feee 	bl	8004cf8 <HAL_Delay>
}
 8002f1c:	46c0      	nop			@ (mov r8, r8)
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b002      	add	sp, #8
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	080097b8 	.word	0x080097b8

08002f28 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f2c:	b672      	cpsid	i
}
 8002f2e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f30:	46c0      	nop			@ (mov r8, r8)
 8002f32:	e7fd      	b.n	8002f30 <Error_Handler+0x8>

08002f34 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	607a      	str	r2, [r7, #4]
 8002f3e:	603b      	str	r3, [r7, #0]
 8002f40:	230f      	movs	r3, #15
 8002f42:	18fb      	adds	r3, r7, r3
 8002f44:	1c02      	adds	r2, r0, #0
 8002f46:	701a      	strb	r2, [r3, #0]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8002f48:	46c0      	nop			@ (mov r8, r8)
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b004      	add	sp, #16
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	607a      	str	r2, [r7, #4]
 8002f5a:	603b      	str	r3, [r7, #0]
 8002f5c:	210f      	movs	r1, #15
 8002f5e:	187b      	adds	r3, r7, r1
 8002f60:	1c02      	adds	r2, r0, #0
 8002f62:	701a      	strb	r2, [r3, #0]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8002f64:	000a      	movs	r2, r1
 8002f66:	18bb      	adds	r3, r7, r2
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d004      	beq.n	8002f78 <_out_char+0x28>
    _putchar(character);
 8002f6e:	18bb      	adds	r3, r7, r2
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	0018      	movs	r0, r3
 8002f74:	f001 fbee 	bl	8004754 <_putchar>
  }
}
 8002f78:	46c0      	nop			@ (mov r8, r8)
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	b004      	add	sp, #16
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	e002      	b.n	8002f96 <_strnlen_s+0x16>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	3301      	adds	r3, #1
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d004      	beq.n	8002fa8 <_strnlen_s+0x28>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	1e5a      	subs	r2, r3, #1
 8002fa2:	603a      	str	r2, [r7, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1f3      	bne.n	8002f90 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	1ad3      	subs	r3, r2, r3
}
 8002fae:	0018      	movs	r0, r3
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	b004      	add	sp, #16
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b082      	sub	sp, #8
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	0002      	movs	r2, r0
 8002fbe:	1dfb      	adds	r3, r7, #7
 8002fc0:	701a      	strb	r2, [r3, #0]
  return (ch >= '0') && (ch <= '9');
 8002fc2:	1dfb      	adds	r3, r7, #7
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b2f      	cmp	r3, #47	@ 0x2f
 8002fc8:	d905      	bls.n	8002fd6 <_is_digit+0x20>
 8002fca:	1dfb      	adds	r3, r7, #7
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b39      	cmp	r3, #57	@ 0x39
 8002fd0:	d801      	bhi.n	8002fd6 <_is_digit+0x20>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e000      	b.n	8002fd8 <_is_digit+0x22>
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	1c1a      	adds	r2, r3, #0
 8002fda:	2301      	movs	r3, #1
 8002fdc:	4013      	ands	r3, r2
 8002fde:	b2db      	uxtb	r3, r3
}
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	b002      	add	sp, #8
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8002ff4:	e00e      	b.n	8003014 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	0013      	movs	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	189b      	adds	r3, r3, r2
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	0018      	movs	r0, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	1c59      	adds	r1, r3, #1
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6011      	str	r1, [r2, #0]
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	18c3      	adds	r3, r0, r3
 8003010:	3b30      	subs	r3, #48	@ 0x30
 8003012:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	0018      	movs	r0, r3
 800301c:	f7ff ffcb 	bl	8002fb6 <_is_digit>
 8003020:	1e03      	subs	r3, r0, #0
 8003022:	d1e8      	bne.n	8002ff6 <_atoi+0xe>
  }
  return i;
 8003024:	68fb      	ldr	r3, [r7, #12]
}
 8003026:	0018      	movs	r0, r3
 8003028:	46bd      	mov	sp, r7
 800302a:	b004      	add	sp, #16
 800302c:	bd80      	pop	{r7, pc}

0800302e <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800302e:	b590      	push	{r4, r7, lr}
 8003030:	b087      	sub	sp, #28
 8003032:	af00      	add	r7, sp, #0
 8003034:	60f8      	str	r0, [r7, #12]
 8003036:	60b9      	str	r1, [r7, #8]
 8003038:	607a      	str	r2, [r7, #4]
 800303a:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8003040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003042:	2202      	movs	r2, #2
 8003044:	4013      	ands	r3, r2
 8003046:	d124      	bne.n	8003092 <_out_rev+0x64>
 8003048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800304a:	2201      	movs	r2, #1
 800304c:	4013      	ands	r3, r2
 800304e:	d120      	bne.n	8003092 <_out_rev+0x64>
    for (size_t i = len; i < width; i++) {
 8003050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003052:	617b      	str	r3, [r7, #20]
 8003054:	e00a      	b.n	800306c <_out_rev+0x3e>
      out(' ', buffer, idx++, maxlen);
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	1c53      	adds	r3, r2, #1
 800305a:	607b      	str	r3, [r7, #4]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	68b9      	ldr	r1, [r7, #8]
 8003060:	68fc      	ldr	r4, [r7, #12]
 8003062:	2020      	movs	r0, #32
 8003064:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	3301      	adds	r3, #1
 800306a:	617b      	str	r3, [r7, #20]
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003070:	429a      	cmp	r2, r3
 8003072:	d3f0      	bcc.n	8003056 <_out_rev+0x28>
    }
  }

  // reverse string
  while (len) {
 8003074:	e00d      	b.n	8003092 <_out_rev+0x64>
    out(buf[--len], buffer, idx++, maxlen);
 8003076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003078:	3b01      	subs	r3, #1
 800307a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800307c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800307e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003080:	18d3      	adds	r3, r2, r3
 8003082:	7818      	ldrb	r0, [r3, #0]
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	1c53      	adds	r3, r2, #1
 8003088:	607b      	str	r3, [r7, #4]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	68b9      	ldr	r1, [r7, #8]
 800308e:	68fc      	ldr	r4, [r7, #12]
 8003090:	47a0      	blx	r4
  while (len) {
 8003092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1ee      	bne.n	8003076 <_out_rev+0x48>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8003098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800309a:	2202      	movs	r2, #2
 800309c:	4013      	ands	r3, r2
 800309e:	d00e      	beq.n	80030be <_out_rev+0x90>
    while (idx - start_idx < width) {
 80030a0:	e007      	b.n	80030b2 <_out_rev+0x84>
      out(' ', buffer, idx++, maxlen);
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	1c53      	adds	r3, r2, #1
 80030a6:	607b      	str	r3, [r7, #4]
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	68b9      	ldr	r1, [r7, #8]
 80030ac:	68fc      	ldr	r4, [r7, #12]
 80030ae:	2020      	movs	r0, #32
 80030b0:	47a0      	blx	r4
    while (idx - start_idx < width) {
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d8f1      	bhi.n	80030a2 <_out_rev+0x74>
    }
  }

  return idx;
 80030be:	687b      	ldr	r3, [r7, #4]
}
 80030c0:	0018      	movs	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	b007      	add	sp, #28
 80030c6:	bd90      	pop	{r4, r7, pc}

080030c8 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80030c8:	b590      	push	{r4, r7, lr}
 80030ca:	b089      	sub	sp, #36	@ 0x24
 80030cc:	af04      	add	r7, sp, #16
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
 80030d4:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 80030d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030d8:	2202      	movs	r2, #2
 80030da:	4013      	ands	r3, r2
 80030dc:	d134      	bne.n	8003148 <_ntoa_format+0x80>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80030de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d017      	beq.n	8003114 <_ntoa_format+0x4c>
 80030e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030e6:	2201      	movs	r2, #1
 80030e8:	4013      	ands	r3, r2
 80030ea:	d013      	beq.n	8003114 <_ntoa_format+0x4c>
 80030ec:	2328      	movs	r3, #40	@ 0x28
 80030ee:	18fb      	adds	r3, r7, r3
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d103      	bne.n	80030fe <_ntoa_format+0x36>
 80030f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030f8:	220c      	movs	r2, #12
 80030fa:	4013      	ands	r3, r2
 80030fc:	d00a      	beq.n	8003114 <_ntoa_format+0x4c>
      width--;
 80030fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003100:	3b01      	subs	r3, #1
 8003102:	637b      	str	r3, [r7, #52]	@ 0x34
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003104:	e006      	b.n	8003114 <_ntoa_format+0x4c>
      buf[len++] = '0';
 8003106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003108:	1c5a      	adds	r2, r3, #1
 800310a:	627a      	str	r2, [r7, #36]	@ 0x24
 800310c:	6a3a      	ldr	r2, [r7, #32]
 800310e:	18d3      	adds	r3, r2, r3
 8003110:	2230      	movs	r2, #48	@ 0x30
 8003112:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003114:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003118:	429a      	cmp	r2, r3
 800311a:	d20a      	bcs.n	8003132 <_ntoa_format+0x6a>
 800311c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311e:	2b1f      	cmp	r3, #31
 8003120:	d9f1      	bls.n	8003106 <_ntoa_format+0x3e>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003122:	e006      	b.n	8003132 <_ntoa_format+0x6a>
      buf[len++] = '0';
 8003124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003126:	1c5a      	adds	r2, r3, #1
 8003128:	627a      	str	r2, [r7, #36]	@ 0x24
 800312a:	6a3a      	ldr	r2, [r7, #32]
 800312c:	18d3      	adds	r3, r2, r3
 800312e:	2230      	movs	r2, #48	@ 0x30
 8003130:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003134:	2201      	movs	r2, #1
 8003136:	4013      	ands	r3, r2
 8003138:	d006      	beq.n	8003148 <_ntoa_format+0x80>
 800313a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800313c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800313e:	429a      	cmp	r2, r3
 8003140:	d202      	bcs.n	8003148 <_ntoa_format+0x80>
 8003142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003144:	2b1f      	cmp	r3, #31
 8003146:	d9ed      	bls.n	8003124 <_ntoa_format+0x5c>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8003148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800314a:	2210      	movs	r2, #16
 800314c:	4013      	ands	r3, r2
 800314e:	d056      	beq.n	80031fe <_ntoa_format+0x136>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8003150:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003152:	2380      	movs	r3, #128	@ 0x80
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	4013      	ands	r3, r2
 8003158:	d116      	bne.n	8003188 <_ntoa_format+0xc0>
 800315a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315c:	2b00      	cmp	r3, #0
 800315e:	d013      	beq.n	8003188 <_ntoa_format+0xc0>
 8003160:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003164:	429a      	cmp	r2, r3
 8003166:	d003      	beq.n	8003170 <_ntoa_format+0xa8>
 8003168:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800316a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800316c:	429a      	cmp	r2, r3
 800316e:	d10b      	bne.n	8003188 <_ntoa_format+0xc0>
      len--;
 8003170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003172:	3b01      	subs	r3, #1
 8003174:	627b      	str	r3, [r7, #36]	@ 0x24
      if (len && (base == 16U)) {
 8003176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003178:	2b00      	cmp	r3, #0
 800317a:	d005      	beq.n	8003188 <_ntoa_format+0xc0>
 800317c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800317e:	2b10      	cmp	r3, #16
 8003180:	d102      	bne.n	8003188 <_ntoa_format+0xc0>
        len--;
 8003182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003184:	3b01      	subs	r3, #1
 8003186:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800318a:	2b10      	cmp	r3, #16
 800318c:	d10e      	bne.n	80031ac <_ntoa_format+0xe4>
 800318e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003190:	2220      	movs	r2, #32
 8003192:	4013      	ands	r3, r2
 8003194:	d10a      	bne.n	80031ac <_ntoa_format+0xe4>
 8003196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003198:	2b1f      	cmp	r3, #31
 800319a:	d807      	bhi.n	80031ac <_ntoa_format+0xe4>
      buf[len++] = 'x';
 800319c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80031a2:	6a3a      	ldr	r2, [r7, #32]
 80031a4:	18d3      	adds	r3, r2, r3
 80031a6:	2278      	movs	r2, #120	@ 0x78
 80031a8:	701a      	strb	r2, [r3, #0]
 80031aa:	e01e      	b.n	80031ea <_ntoa_format+0x122>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80031ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ae:	2b10      	cmp	r3, #16
 80031b0:	d10e      	bne.n	80031d0 <_ntoa_format+0x108>
 80031b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031b4:	2220      	movs	r2, #32
 80031b6:	4013      	ands	r3, r2
 80031b8:	d00a      	beq.n	80031d0 <_ntoa_format+0x108>
 80031ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031bc:	2b1f      	cmp	r3, #31
 80031be:	d807      	bhi.n	80031d0 <_ntoa_format+0x108>
      buf[len++] = 'X';
 80031c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c2:	1c5a      	adds	r2, r3, #1
 80031c4:	627a      	str	r2, [r7, #36]	@ 0x24
 80031c6:	6a3a      	ldr	r2, [r7, #32]
 80031c8:	18d3      	adds	r3, r2, r3
 80031ca:	2258      	movs	r2, #88	@ 0x58
 80031cc:	701a      	strb	r2, [r3, #0]
 80031ce:	e00c      	b.n	80031ea <_ntoa_format+0x122>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80031d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d109      	bne.n	80031ea <_ntoa_format+0x122>
 80031d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d8:	2b1f      	cmp	r3, #31
 80031da:	d806      	bhi.n	80031ea <_ntoa_format+0x122>
      buf[len++] = 'b';
 80031dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031de:	1c5a      	adds	r2, r3, #1
 80031e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80031e2:	6a3a      	ldr	r2, [r7, #32]
 80031e4:	18d3      	adds	r3, r2, r3
 80031e6:	2262      	movs	r2, #98	@ 0x62
 80031e8:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80031ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ec:	2b1f      	cmp	r3, #31
 80031ee:	d806      	bhi.n	80031fe <_ntoa_format+0x136>
      buf[len++] = '0';
 80031f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80031f6:	6a3a      	ldr	r2, [r7, #32]
 80031f8:	18d3      	adds	r3, r2, r3
 80031fa:	2230      	movs	r2, #48	@ 0x30
 80031fc:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80031fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003200:	2b1f      	cmp	r3, #31
 8003202:	d823      	bhi.n	800324c <_ntoa_format+0x184>
    if (negative) {
 8003204:	2328      	movs	r3, #40	@ 0x28
 8003206:	18fb      	adds	r3, r7, r3
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d007      	beq.n	800321e <_ntoa_format+0x156>
      buf[len++] = '-';
 800320e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003210:	1c5a      	adds	r2, r3, #1
 8003212:	627a      	str	r2, [r7, #36]	@ 0x24
 8003214:	6a3a      	ldr	r2, [r7, #32]
 8003216:	18d3      	adds	r3, r2, r3
 8003218:	222d      	movs	r2, #45	@ 0x2d
 800321a:	701a      	strb	r2, [r3, #0]
 800321c:	e016      	b.n	800324c <_ntoa_format+0x184>
    }
    else if (flags & FLAGS_PLUS) {
 800321e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003220:	2204      	movs	r2, #4
 8003222:	4013      	ands	r3, r2
 8003224:	d007      	beq.n	8003236 <_ntoa_format+0x16e>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	627a      	str	r2, [r7, #36]	@ 0x24
 800322c:	6a3a      	ldr	r2, [r7, #32]
 800322e:	18d3      	adds	r3, r2, r3
 8003230:	222b      	movs	r2, #43	@ 0x2b
 8003232:	701a      	strb	r2, [r3, #0]
 8003234:	e00a      	b.n	800324c <_ntoa_format+0x184>
    }
    else if (flags & FLAGS_SPACE) {
 8003236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003238:	2208      	movs	r2, #8
 800323a:	4013      	ands	r3, r2
 800323c:	d006      	beq.n	800324c <_ntoa_format+0x184>
      buf[len++] = ' ';
 800323e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003240:	1c5a      	adds	r2, r3, #1
 8003242:	627a      	str	r2, [r7, #36]	@ 0x24
 8003244:	6a3a      	ldr	r2, [r7, #32]
 8003246:	18d3      	adds	r3, r2, r3
 8003248:	2220      	movs	r2, #32
 800324a:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800324c:	683c      	ldr	r4, [r7, #0]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	68b9      	ldr	r1, [r7, #8]
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003256:	9303      	str	r3, [sp, #12]
 8003258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800325a:	9302      	str	r3, [sp, #8]
 800325c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325e:	9301      	str	r3, [sp, #4]
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	0023      	movs	r3, r4
 8003266:	f7ff fee2 	bl	800302e <_out_rev>
 800326a:	0003      	movs	r3, r0
}
 800326c:	0018      	movs	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	b005      	add	sp, #20
 8003272:	bd90      	pop	{r4, r7, pc}

08003274 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003274:	b590      	push	{r4, r7, lr}
 8003276:	b097      	sub	sp, #92	@ 0x5c
 8003278:	af08      	add	r7, sp, #32
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
 8003280:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	637b      	str	r3, [r7, #52]	@ 0x34

  // no hash for 0 values
  if (!value) {
 8003286:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003288:	2b00      	cmp	r3, #0
 800328a:	d103      	bne.n	8003294 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 800328c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800328e:	2210      	movs	r2, #16
 8003290:	4393      	bics	r3, r2
 8003292:	65fb      	str	r3, [r7, #92]	@ 0x5c
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8003294:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003296:	2380      	movs	r3, #128	@ 0x80
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	4013      	ands	r3, r2
 800329c:	d002      	beq.n	80032a4 <_ntoa_long+0x30>
 800329e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d033      	beq.n	800330c <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 80032a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80032a8:	0018      	movs	r0, r3
 80032aa:	f7fc ffb3 	bl	8000214 <__aeabi_uidivmod>
 80032ae:	000b      	movs	r3, r1
 80032b0:	001a      	movs	r2, r3
 80032b2:	2133      	movs	r1, #51	@ 0x33
 80032b4:	187b      	adds	r3, r7, r1
 80032b6:	701a      	strb	r2, [r3, #0]
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80032b8:	000a      	movs	r2, r1
 80032ba:	18bb      	adds	r3, r7, r2
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b09      	cmp	r3, #9
 80032c0:	d804      	bhi.n	80032cc <_ntoa_long+0x58>
 80032c2:	18bb      	adds	r3, r7, r2
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	3330      	adds	r3, #48	@ 0x30
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	e00d      	b.n	80032e8 <_ntoa_long+0x74>
 80032cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032ce:	2220      	movs	r2, #32
 80032d0:	4013      	ands	r3, r2
 80032d2:	d001      	beq.n	80032d8 <_ntoa_long+0x64>
 80032d4:	2341      	movs	r3, #65	@ 0x41
 80032d6:	e000      	b.n	80032da <_ntoa_long+0x66>
 80032d8:	2361      	movs	r3, #97	@ 0x61
 80032da:	2233      	movs	r2, #51	@ 0x33
 80032dc:	18ba      	adds	r2, r7, r2
 80032de:	7812      	ldrb	r2, [r2, #0]
 80032e0:	189b      	adds	r3, r3, r2
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	3b0a      	subs	r3, #10
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ea:	1c59      	adds	r1, r3, #1
 80032ec:	6379      	str	r1, [r7, #52]	@ 0x34
 80032ee:	2110      	movs	r1, #16
 80032f0:	1879      	adds	r1, r7, r1
 80032f2:	54ca      	strb	r2, [r1, r3]
      value /= base;
 80032f4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80032f6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80032f8:	f7fc ff06 	bl	8000108 <__udivsi3>
 80032fc:	0003      	movs	r3, r0
 80032fe:	64bb      	str	r3, [r7, #72]	@ 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8003300:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <_ntoa_long+0x98>
 8003306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003308:	2b1f      	cmp	r3, #31
 800330a:	d9cb      	bls.n	80032a4 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800330c:	683c      	ldr	r4, [r7, #0]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	68b9      	ldr	r1, [r7, #8]
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003316:	9306      	str	r3, [sp, #24]
 8003318:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800331a:	9305      	str	r3, [sp, #20]
 800331c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800331e:	9304      	str	r3, [sp, #16]
 8003320:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003322:	9303      	str	r3, [sp, #12]
 8003324:	234c      	movs	r3, #76	@ 0x4c
 8003326:	18fb      	adds	r3, r7, r3
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	9302      	str	r3, [sp, #8]
 800332c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800332e:	9301      	str	r3, [sp, #4]
 8003330:	2310      	movs	r3, #16
 8003332:	18fb      	adds	r3, r7, r3
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	0023      	movs	r3, r4
 8003338:	f7ff fec6 	bl	80030c8 <_ntoa_format>
 800333c:	0003      	movs	r3, r0
}
 800333e:	0018      	movs	r0, r3
 8003340:	46bd      	mov	sp, r7
 8003342:	b00f      	add	sp, #60	@ 0x3c
 8003344:	bd90      	pop	{r4, r7, pc}

08003346 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003346:	b5b0      	push	{r4, r5, r7, lr}
 8003348:	b096      	sub	sp, #88	@ 0x58
 800334a:	af08      	add	r7, sp, #32
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	607a      	str	r2, [r7, #4]
 8003352:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	637b      	str	r3, [r7, #52]	@ 0x34

  // no hash for 0 values
  if (!value) {
 8003358:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800335a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800335c:	4313      	orrs	r3, r2
 800335e:	d103      	bne.n	8003368 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8003360:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003362:	2210      	movs	r2, #16
 8003364:	4393      	bics	r3, r2
 8003366:	66bb      	str	r3, [r7, #104]	@ 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8003368:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800336a:	2380      	movs	r3, #128	@ 0x80
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	4013      	ands	r3, r2
 8003370:	d003      	beq.n	800337a <_ntoa_long_long+0x34>
 8003372:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003374:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003376:	4313      	orrs	r3, r2
 8003378:	d03a      	beq.n	80033f0 <_ntoa_long_long+0xaa>
    do {
      const char digit = (char)(value % base);
 800337a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800337c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800337e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003380:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003382:	f7fd f893 	bl	80004ac <__aeabi_uldivmod>
 8003386:	0010      	movs	r0, r2
 8003388:	0019      	movs	r1, r3
 800338a:	2433      	movs	r4, #51	@ 0x33
 800338c:	193b      	adds	r3, r7, r4
 800338e:	1c02      	adds	r2, r0, #0
 8003390:	701a      	strb	r2, [r3, #0]
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8003392:	0022      	movs	r2, r4
 8003394:	18bb      	adds	r3, r7, r2
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b09      	cmp	r3, #9
 800339a:	d804      	bhi.n	80033a6 <_ntoa_long_long+0x60>
 800339c:	18bb      	adds	r3, r7, r2
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	3330      	adds	r3, #48	@ 0x30
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	e00d      	b.n	80033c2 <_ntoa_long_long+0x7c>
 80033a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033a8:	2220      	movs	r2, #32
 80033aa:	4013      	ands	r3, r2
 80033ac:	d001      	beq.n	80033b2 <_ntoa_long_long+0x6c>
 80033ae:	2341      	movs	r3, #65	@ 0x41
 80033b0:	e000      	b.n	80033b4 <_ntoa_long_long+0x6e>
 80033b2:	2361      	movs	r3, #97	@ 0x61
 80033b4:	2233      	movs	r2, #51	@ 0x33
 80033b6:	18ba      	adds	r2, r7, r2
 80033b8:	7812      	ldrb	r2, [r2, #0]
 80033ba:	189b      	adds	r3, r3, r2
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	3b0a      	subs	r3, #10
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033c4:	1c59      	adds	r1, r3, #1
 80033c6:	6379      	str	r1, [r7, #52]	@ 0x34
 80033c8:	2110      	movs	r1, #16
 80033ca:	1879      	adds	r1, r7, r1
 80033cc:	54ca      	strb	r2, [r1, r3]
      value /= base;
 80033ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033d2:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80033d4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80033d6:	f7fd f869 	bl	80004ac <__aeabi_uldivmod>
 80033da:	0002      	movs	r2, r0
 80033dc:	000b      	movs	r3, r1
 80033de:	64ba      	str	r2, [r7, #72]	@ 0x48
 80033e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80033e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033e6:	4313      	orrs	r3, r2
 80033e8:	d002      	beq.n	80033f0 <_ntoa_long_long+0xaa>
 80033ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ec:	2b1f      	cmp	r3, #31
 80033ee:	d9c4      	bls.n	800337a <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80033f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80033f2:	683d      	ldr	r5, [r7, #0]
 80033f4:	687c      	ldr	r4, [r7, #4]
 80033f6:	68b9      	ldr	r1, [r7, #8]
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80033fc:	9206      	str	r2, [sp, #24]
 80033fe:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003400:	9205      	str	r2, [sp, #20]
 8003402:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003404:	9204      	str	r2, [sp, #16]
 8003406:	9303      	str	r3, [sp, #12]
 8003408:	2350      	movs	r3, #80	@ 0x50
 800340a:	18fb      	adds	r3, r7, r3
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	9302      	str	r3, [sp, #8]
 8003410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003412:	9301      	str	r3, [sp, #4]
 8003414:	2310      	movs	r3, #16
 8003416:	18fb      	adds	r3, r7, r3
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	002b      	movs	r3, r5
 800341c:	0022      	movs	r2, r4
 800341e:	f7ff fe53 	bl	80030c8 <_ntoa_format>
 8003422:	0003      	movs	r3, r0
}
 8003424:	0018      	movs	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	b00e      	add	sp, #56	@ 0x38
 800342a:	bdb0      	pop	{r4, r5, r7, pc}

0800342c <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800342c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800342e:	b09d      	sub	sp, #116	@ 0x74
 8003430:	af06      	add	r7, sp, #24
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
 8003438:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800343a:	2300      	movs	r3, #0
 800343c:	657b      	str	r3, [r7, #84]	@ 0x54
  double diff = 0.0;
 800343e:	2200      	movs	r2, #0
 8003440:	2300      	movs	r3, #0
 8003442:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003444:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8003446:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003448:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800344a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800344c:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800344e:	f7fc ffe1 	bl	8000414 <__aeabi_dcmpeq>
 8003452:	1e03      	subs	r3, r0, #0
 8003454:	d112      	bne.n	800347c <_ftoa+0x50>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8003456:	683c      	ldr	r4, [r7, #0]
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	68b9      	ldr	r1, [r7, #8]
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	2380      	movs	r3, #128	@ 0x80
 8003460:	18fb      	adds	r3, r7, r3
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	9303      	str	r3, [sp, #12]
 8003466:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003468:	9302      	str	r3, [sp, #8]
 800346a:	2303      	movs	r3, #3
 800346c:	9301      	str	r3, [sp, #4]
 800346e:	4bbf      	ldr	r3, [pc, #764]	@ (800376c <_ftoa+0x340>)
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	0023      	movs	r3, r4
 8003474:	f7ff fddb 	bl	800302e <_out_rev>
 8003478:	0003      	movs	r3, r0
 800347a:	e211      	b.n	80038a0 <_ftoa+0x474>
  if (value < -DBL_MAX)
 800347c:	2201      	movs	r2, #1
 800347e:	4252      	negs	r2, r2
 8003480:	4bbb      	ldr	r3, [pc, #748]	@ (8003770 <_ftoa+0x344>)
 8003482:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8003484:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003486:	f7fc ffcb 	bl	8000420 <__aeabi_dcmplt>
 800348a:	1e03      	subs	r3, r0, #0
 800348c:	d012      	beq.n	80034b4 <_ftoa+0x88>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800348e:	683c      	ldr	r4, [r7, #0]
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	68b9      	ldr	r1, [r7, #8]
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	2380      	movs	r3, #128	@ 0x80
 8003498:	18fb      	adds	r3, r7, r3
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	9303      	str	r3, [sp, #12]
 800349e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034a0:	9302      	str	r3, [sp, #8]
 80034a2:	2304      	movs	r3, #4
 80034a4:	9301      	str	r3, [sp, #4]
 80034a6:	4bb3      	ldr	r3, [pc, #716]	@ (8003774 <_ftoa+0x348>)
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	0023      	movs	r3, r4
 80034ac:	f7ff fdbf 	bl	800302e <_out_rev>
 80034b0:	0003      	movs	r3, r0
 80034b2:	e1f5      	b.n	80038a0 <_ftoa+0x474>
  if (value > DBL_MAX)
 80034b4:	2201      	movs	r2, #1
 80034b6:	4252      	negs	r2, r2
 80034b8:	4baf      	ldr	r3, [pc, #700]	@ (8003778 <_ftoa+0x34c>)
 80034ba:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80034bc:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80034be:	f7fc ffc3 	bl	8000448 <__aeabi_dcmpgt>
 80034c2:	1e03      	subs	r3, r0, #0
 80034c4:	d024      	beq.n	8003510 <_ftoa+0xe4>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 80034c6:	2380      	movs	r3, #128	@ 0x80
 80034c8:	18fb      	adds	r3, r7, r3
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2204      	movs	r2, #4
 80034ce:	4013      	ands	r3, r2
 80034d0:	d001      	beq.n	80034d6 <_ftoa+0xaa>
 80034d2:	4baa      	ldr	r3, [pc, #680]	@ (800377c <_ftoa+0x350>)
 80034d4:	e000      	b.n	80034d8 <_ftoa+0xac>
 80034d6:	4baa      	ldr	r3, [pc, #680]	@ (8003780 <_ftoa+0x354>)
 80034d8:	2280      	movs	r2, #128	@ 0x80
 80034da:	18ba      	adds	r2, r7, r2
 80034dc:	6812      	ldr	r2, [r2, #0]
 80034de:	2104      	movs	r1, #4
 80034e0:	400a      	ands	r2, r1
 80034e2:	d001      	beq.n	80034e8 <_ftoa+0xbc>
 80034e4:	2204      	movs	r2, #4
 80034e6:	e000      	b.n	80034ea <_ftoa+0xbe>
 80034e8:	2203      	movs	r2, #3
 80034ea:	683e      	ldr	r6, [r7, #0]
 80034ec:	687d      	ldr	r5, [r7, #4]
 80034ee:	68bc      	ldr	r4, [r7, #8]
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	2180      	movs	r1, #128	@ 0x80
 80034f4:	1879      	adds	r1, r7, r1
 80034f6:	6809      	ldr	r1, [r1, #0]
 80034f8:	9103      	str	r1, [sp, #12]
 80034fa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80034fc:	9102      	str	r1, [sp, #8]
 80034fe:	9201      	str	r2, [sp, #4]
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	0033      	movs	r3, r6
 8003504:	002a      	movs	r2, r5
 8003506:	0021      	movs	r1, r4
 8003508:	f7ff fd91 	bl	800302e <_out_rev>
 800350c:	0003      	movs	r3, r0
 800350e:	e1c7      	b.n	80038a0 <_ftoa+0x474>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8003510:	2200      	movs	r2, #0
 8003512:	4b9c      	ldr	r3, [pc, #624]	@ (8003784 <_ftoa+0x358>)
 8003514:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8003516:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003518:	f7fc ff96 	bl	8000448 <__aeabi_dcmpgt>
 800351c:	1e03      	subs	r3, r0, #0
 800351e:	d107      	bne.n	8003530 <_ftoa+0x104>
 8003520:	2200      	movs	r2, #0
 8003522:	4b99      	ldr	r3, [pc, #612]	@ (8003788 <_ftoa+0x35c>)
 8003524:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8003526:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003528:	f7fc ff7a 	bl	8000420 <__aeabi_dcmplt>
 800352c:	1e03      	subs	r3, r0, #0
 800352e:	d015      	beq.n	800355c <_ftoa+0x130>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8003530:	683d      	ldr	r5, [r7, #0]
 8003532:	687c      	ldr	r4, [r7, #4]
 8003534:	68b9      	ldr	r1, [r7, #8]
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	2380      	movs	r3, #128	@ 0x80
 800353a:	18fb      	adds	r3, r7, r3
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	9304      	str	r3, [sp, #16]
 8003540:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003542:	9303      	str	r3, [sp, #12]
 8003544:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003546:	9302      	str	r3, [sp, #8]
 8003548:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800354a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800354c:	9200      	str	r2, [sp, #0]
 800354e:	9301      	str	r3, [sp, #4]
 8003550:	002b      	movs	r3, r5
 8003552:	0022      	movs	r2, r4
 8003554:	f000 f9a8 	bl	80038a8 <_etoa>
 8003558:	0003      	movs	r3, r0
 800355a:	e1a1      	b.n	80038a0 <_ftoa+0x474>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800355c:	2453      	movs	r4, #83	@ 0x53
 800355e:	193b      	adds	r3, r7, r4
 8003560:	2200      	movs	r2, #0
 8003562:	701a      	strb	r2, [r3, #0]
  if (value < 0) {
 8003564:	2200      	movs	r2, #0
 8003566:	2300      	movs	r3, #0
 8003568:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800356a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800356c:	f7fc ff58 	bl	8000420 <__aeabi_dcmplt>
 8003570:	1e03      	subs	r3, r0, #0
 8003572:	d00c      	beq.n	800358e <_ftoa+0x162>
    negative = true;
 8003574:	193b      	adds	r3, r7, r4
 8003576:	2201      	movs	r2, #1
 8003578:	701a      	strb	r2, [r3, #0]
    value = 0 - value;
 800357a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800357c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800357e:	2000      	movs	r0, #0
 8003580:	2100      	movs	r1, #0
 8003582:	f7fe fb0d 	bl	8001ba0 <__aeabi_dsub>
 8003586:	0002      	movs	r2, r0
 8003588:	000b      	movs	r3, r1
 800358a:	673a      	str	r2, [r7, #112]	@ 0x70
 800358c:	677b      	str	r3, [r7, #116]	@ 0x74
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800358e:	2380      	movs	r3, #128	@ 0x80
 8003590:	18fb      	adds	r3, r7, r3
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	2380      	movs	r3, #128	@ 0x80
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	4013      	ands	r3, r2
 800359a:	d10c      	bne.n	80035b6 <_ftoa+0x18a>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800359c:	2306      	movs	r3, #6
 800359e:	67bb      	str	r3, [r7, #120]	@ 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80035a0:	e009      	b.n	80035b6 <_ftoa+0x18a>
    buf[len++] = '0';
 80035a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	657a      	str	r2, [r7, #84]	@ 0x54
 80035a8:	2210      	movs	r2, #16
 80035aa:	18ba      	adds	r2, r7, r2
 80035ac:	2130      	movs	r1, #48	@ 0x30
 80035ae:	54d1      	strb	r1, [r2, r3]
    prec--;
 80035b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035b2:	3b01      	subs	r3, #1
 80035b4:	67bb      	str	r3, [r7, #120]	@ 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80035b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035b8:	2b1f      	cmp	r3, #31
 80035ba:	d802      	bhi.n	80035c2 <_ftoa+0x196>
 80035bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035be:	2b09      	cmp	r3, #9
 80035c0:	d8ef      	bhi.n	80035a2 <_ftoa+0x176>
  }

  int whole = (int)value;
 80035c2:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80035c4:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80035c6:	f7fe fe87 	bl	80022d8 <__aeabi_d2iz>
 80035ca:	0003      	movs	r3, r0
 80035cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  double tmp = (value - whole) * pow10[prec];
 80035ce:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80035d0:	f7fe febe 	bl	8002350 <__aeabi_i2d>
 80035d4:	0002      	movs	r2, r0
 80035d6:	000b      	movs	r3, r1
 80035d8:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80035da:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80035dc:	f7fe fae0 	bl	8001ba0 <__aeabi_dsub>
 80035e0:	0002      	movs	r2, r0
 80035e2:	000b      	movs	r3, r1
 80035e4:	0010      	movs	r0, r2
 80035e6:	0019      	movs	r1, r3
 80035e8:	4a68      	ldr	r2, [pc, #416]	@ (800378c <_ftoa+0x360>)
 80035ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	18d3      	adds	r3, r2, r3
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f7fe f80c 	bl	8001610 <__aeabi_dmul>
 80035f8:	0002      	movs	r2, r0
 80035fa:	000b      	movs	r3, r1
 80035fc:	633a      	str	r2, [r7, #48]	@ 0x30
 80035fe:	637b      	str	r3, [r7, #52]	@ 0x34
  unsigned long frac = (unsigned long)tmp;
 8003600:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003602:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003604:	f7fc ff72 	bl	80004ec <__aeabi_d2uiz>
 8003608:	0003      	movs	r3, r0
 800360a:	64bb      	str	r3, [r7, #72]	@ 0x48
  diff = tmp - frac;
 800360c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800360e:	f7fe fecd 	bl	80023ac <__aeabi_ui2d>
 8003612:	0002      	movs	r2, r0
 8003614:	000b      	movs	r3, r1
 8003616:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003618:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800361a:	f7fe fac1 	bl	8001ba0 <__aeabi_dsub>
 800361e:	0002      	movs	r2, r0
 8003620:	000b      	movs	r3, r1
 8003622:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003624:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (diff > 0.5) {
 8003626:	2200      	movs	r2, #0
 8003628:	4b59      	ldr	r3, [pc, #356]	@ (8003790 <_ftoa+0x364>)
 800362a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800362c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800362e:	f7fc ff0b 	bl	8000448 <__aeabi_dcmpgt>
 8003632:	1e03      	subs	r3, r0, #0
 8003634:	d015      	beq.n	8003662 <_ftoa+0x236>
    ++frac;
 8003636:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003638:	3301      	adds	r3, #1
 800363a:	64bb      	str	r3, [r7, #72]	@ 0x48
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800363c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800363e:	f7fe feb5 	bl	80023ac <__aeabi_ui2d>
 8003642:	4a52      	ldr	r2, [pc, #328]	@ (800378c <_ftoa+0x360>)
 8003644:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	18d3      	adds	r3, r2, r3
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f7fc ff05 	bl	800045c <__aeabi_dcmpge>
 8003652:	1e03      	subs	r3, r0, #0
 8003654:	d017      	beq.n	8003686 <_ftoa+0x25a>
      frac = 0;
 8003656:	2300      	movs	r3, #0
 8003658:	64bb      	str	r3, [r7, #72]	@ 0x48
      ++whole;
 800365a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800365c:	3301      	adds	r3, #1
 800365e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003660:	e011      	b.n	8003686 <_ftoa+0x25a>
    }
  }
  else if (diff < 0.5) {
 8003662:	2200      	movs	r2, #0
 8003664:	4b4a      	ldr	r3, [pc, #296]	@ (8003790 <_ftoa+0x364>)
 8003666:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003668:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800366a:	f7fc fed9 	bl	8000420 <__aeabi_dcmplt>
 800366e:	1e03      	subs	r3, r0, #0
 8003670:	d109      	bne.n	8003686 <_ftoa+0x25a>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8003672:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <_ftoa+0x254>
 8003678:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800367a:	2201      	movs	r2, #1
 800367c:	4013      	ands	r3, r2
 800367e:	d002      	beq.n	8003686 <_ftoa+0x25a>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8003680:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003682:	3301      	adds	r3, #1
 8003684:	64bb      	str	r3, [r7, #72]	@ 0x48
  }

  if (prec == 0U) {
 8003686:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003688:	2b00      	cmp	r3, #0
 800368a:	d12f      	bne.n	80036ec <_ftoa+0x2c0>
    diff = value - (double)whole;
 800368c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800368e:	f7fe fe5f 	bl	8002350 <__aeabi_i2d>
 8003692:	0002      	movs	r2, r0
 8003694:	000b      	movs	r3, r1
 8003696:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8003698:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800369a:	f7fe fa81 	bl	8001ba0 <__aeabi_dsub>
 800369e:	0002      	movs	r2, r0
 80036a0:	000b      	movs	r3, r1
 80036a2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80036a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 80036a6:	2301      	movs	r3, #1
 80036a8:	1c1c      	adds	r4, r3, #0
 80036aa:	2200      	movs	r2, #0
 80036ac:	4b38      	ldr	r3, [pc, #224]	@ (8003790 <_ftoa+0x364>)
 80036ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80036b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036b2:	f7fc feb5 	bl	8000420 <__aeabi_dcmplt>
 80036b6:	1e03      	subs	r3, r0, #0
 80036b8:	d101      	bne.n	80036be <_ftoa+0x292>
 80036ba:	2300      	movs	r3, #0
 80036bc:	1c1c      	adds	r4, r3, #0
 80036be:	b2e3      	uxtb	r3, r4
 80036c0:	2201      	movs	r2, #1
 80036c2:	4053      	eors	r3, r2
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d107      	bne.n	80036da <_ftoa+0x2ae>
 80036ca:	2200      	movs	r2, #0
 80036cc:	4b30      	ldr	r3, [pc, #192]	@ (8003790 <_ftoa+0x364>)
 80036ce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80036d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036d2:	f7fc feb9 	bl	8000448 <__aeabi_dcmpgt>
 80036d6:	1e03      	subs	r3, r0, #0
 80036d8:	d046      	beq.n	8003768 <_ftoa+0x33c>
 80036da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036dc:	2201      	movs	r2, #1
 80036de:	4013      	ands	r3, r2
 80036e0:	d100      	bne.n	80036e4 <_ftoa+0x2b8>
 80036e2:	e070      	b.n	80037c6 <_ftoa+0x39a>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 80036e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036e6:	3301      	adds	r3, #1
 80036e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036ea:	e06c      	b.n	80037c6 <_ftoa+0x39a>
    }
  }
  else {
    unsigned int count = prec;
 80036ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036ee:	647b      	str	r3, [r7, #68]	@ 0x44
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80036f0:	e01b      	b.n	800372a <_ftoa+0x2fe>
      --count;
 80036f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036f4:	3b01      	subs	r3, #1
 80036f6:	647b      	str	r3, [r7, #68]	@ 0x44
      buf[len++] = (char)(48U + (frac % 10U));
 80036f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036fa:	210a      	movs	r1, #10
 80036fc:	0018      	movs	r0, r3
 80036fe:	f7fc fd89 	bl	8000214 <__aeabi_uidivmod>
 8003702:	000b      	movs	r3, r1
 8003704:	b2da      	uxtb	r2, r3
 8003706:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003708:	1c59      	adds	r1, r3, #1
 800370a:	6579      	str	r1, [r7, #84]	@ 0x54
 800370c:	3230      	adds	r2, #48	@ 0x30
 800370e:	b2d1      	uxtb	r1, r2
 8003710:	2210      	movs	r2, #16
 8003712:	18ba      	adds	r2, r7, r2
 8003714:	54d1      	strb	r1, [r2, r3]
      if (!(frac /= 10U)) {
 8003716:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003718:	210a      	movs	r1, #10
 800371a:	0018      	movs	r0, r3
 800371c:	f7fc fcf4 	bl	8000108 <__udivsi3>
 8003720:	0003      	movs	r3, r0
 8003722:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003724:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <_ftoa+0x306>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800372a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800372c:	2b1f      	cmp	r3, #31
 800372e:	d9e0      	bls.n	80036f2 <_ftoa+0x2c6>
 8003730:	e008      	b.n	8003744 <_ftoa+0x318>
        break;
 8003732:	46c0      	nop			@ (mov r8, r8)
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003734:	e006      	b.n	8003744 <_ftoa+0x318>
      buf[len++] = '0';
 8003736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	657a      	str	r2, [r7, #84]	@ 0x54
 800373c:	2210      	movs	r2, #16
 800373e:	18ba      	adds	r2, r7, r2
 8003740:	2130      	movs	r1, #48	@ 0x30
 8003742:	54d1      	strb	r1, [r2, r3]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003744:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003746:	2b1f      	cmp	r3, #31
 8003748:	d804      	bhi.n	8003754 <_ftoa+0x328>
 800374a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800374c:	1e5a      	subs	r2, r3, #1
 800374e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1f0      	bne.n	8003736 <_ftoa+0x30a>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003754:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003756:	2b1f      	cmp	r3, #31
 8003758:	d835      	bhi.n	80037c6 <_ftoa+0x39a>
      // add decimal
      buf[len++] = '.';
 800375a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	657a      	str	r2, [r7, #84]	@ 0x54
 8003760:	2210      	movs	r2, #16
 8003762:	18ba      	adds	r2, r7, r2
 8003764:	212e      	movs	r1, #46	@ 0x2e
 8003766:	54d1      	strb	r1, [r2, r3]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003768:	e02d      	b.n	80037c6 <_ftoa+0x39a>
 800376a:	46c0      	nop			@ (mov r8, r8)
 800376c:	080097d0 	.word	0x080097d0
 8003770:	ffefffff 	.word	0xffefffff
 8003774:	080097d4 	.word	0x080097d4
 8003778:	7fefffff 	.word	0x7fefffff
 800377c:	080097dc 	.word	0x080097dc
 8003780:	080097e4 	.word	0x080097e4
 8003784:	41cdcd65 	.word	0x41cdcd65
 8003788:	c1cdcd65 	.word	0xc1cdcd65
 800378c:	080099d8 	.word	0x080099d8
 8003790:	3fe00000 	.word	0x3fe00000
    buf[len++] = (char)(48 + (whole % 10));
 8003794:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003796:	210a      	movs	r1, #10
 8003798:	0018      	movs	r0, r3
 800379a:	f7fc fe25 	bl	80003e8 <__aeabi_idivmod>
 800379e:	000b      	movs	r3, r1
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037a4:	1c59      	adds	r1, r3, #1
 80037a6:	6579      	str	r1, [r7, #84]	@ 0x54
 80037a8:	3230      	adds	r2, #48	@ 0x30
 80037aa:	b2d1      	uxtb	r1, r2
 80037ac:	2210      	movs	r2, #16
 80037ae:	18ba      	adds	r2, r7, r2
 80037b0:	54d1      	strb	r1, [r2, r3]
    if (!(whole /= 10)) {
 80037b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037b4:	210a      	movs	r1, #10
 80037b6:	0018      	movs	r0, r3
 80037b8:	f7fc fd30 	bl	800021c <__divsi3>
 80037bc:	0003      	movs	r3, r0
 80037be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <_ftoa+0x3a2>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80037c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037c8:	2b1f      	cmp	r3, #31
 80037ca:	d9e3      	bls.n	8003794 <_ftoa+0x368>
 80037cc:	e000      	b.n	80037d0 <_ftoa+0x3a4>
      break;
 80037ce:	46c0      	nop			@ (mov r8, r8)
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80037d0:	2180      	movs	r1, #128	@ 0x80
 80037d2:	187b      	adds	r3, r7, r1
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2202      	movs	r2, #2
 80037d8:	4013      	ands	r3, r2
 80037da:	d123      	bne.n	8003824 <_ftoa+0x3f8>
 80037dc:	187b      	adds	r3, r7, r1
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2201      	movs	r2, #1
 80037e2:	4013      	ands	r3, r2
 80037e4:	d01e      	beq.n	8003824 <_ftoa+0x3f8>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80037e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d014      	beq.n	8003816 <_ftoa+0x3ea>
 80037ec:	2353      	movs	r3, #83	@ 0x53
 80037ee:	18fb      	adds	r3, r7, r3
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d104      	bne.n	8003800 <_ftoa+0x3d4>
 80037f6:	187b      	adds	r3, r7, r1
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	220c      	movs	r2, #12
 80037fc:	4013      	ands	r3, r2
 80037fe:	d00a      	beq.n	8003816 <_ftoa+0x3ea>
      width--;
 8003800:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003802:	3b01      	subs	r3, #1
 8003804:	67fb      	str	r3, [r7, #124]	@ 0x7c
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8003806:	e006      	b.n	8003816 <_ftoa+0x3ea>
      buf[len++] = '0';
 8003808:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800380a:	1c5a      	adds	r2, r3, #1
 800380c:	657a      	str	r2, [r7, #84]	@ 0x54
 800380e:	2210      	movs	r2, #16
 8003810:	18ba      	adds	r2, r7, r2
 8003812:	2130      	movs	r1, #48	@ 0x30
 8003814:	54d1      	strb	r1, [r2, r3]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8003816:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003818:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800381a:	429a      	cmp	r2, r3
 800381c:	d202      	bcs.n	8003824 <_ftoa+0x3f8>
 800381e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003820:	2b1f      	cmp	r3, #31
 8003822:	d9f1      	bls.n	8003808 <_ftoa+0x3dc>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003826:	2b1f      	cmp	r3, #31
 8003828:	d827      	bhi.n	800387a <_ftoa+0x44e>
    if (negative) {
 800382a:	2353      	movs	r3, #83	@ 0x53
 800382c:	18fb      	adds	r3, r7, r3
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d007      	beq.n	8003844 <_ftoa+0x418>
      buf[len++] = '-';
 8003834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003836:	1c5a      	adds	r2, r3, #1
 8003838:	657a      	str	r2, [r7, #84]	@ 0x54
 800383a:	2210      	movs	r2, #16
 800383c:	18ba      	adds	r2, r7, r2
 800383e:	212d      	movs	r1, #45	@ 0x2d
 8003840:	54d1      	strb	r1, [r2, r3]
 8003842:	e01a      	b.n	800387a <_ftoa+0x44e>
    }
    else if (flags & FLAGS_PLUS) {
 8003844:	2380      	movs	r3, #128	@ 0x80
 8003846:	18fb      	adds	r3, r7, r3
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2204      	movs	r2, #4
 800384c:	4013      	ands	r3, r2
 800384e:	d007      	beq.n	8003860 <_ftoa+0x434>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003850:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003852:	1c5a      	adds	r2, r3, #1
 8003854:	657a      	str	r2, [r7, #84]	@ 0x54
 8003856:	2210      	movs	r2, #16
 8003858:	18ba      	adds	r2, r7, r2
 800385a:	212b      	movs	r1, #43	@ 0x2b
 800385c:	54d1      	strb	r1, [r2, r3]
 800385e:	e00c      	b.n	800387a <_ftoa+0x44e>
    }
    else if (flags & FLAGS_SPACE) {
 8003860:	2380      	movs	r3, #128	@ 0x80
 8003862:	18fb      	adds	r3, r7, r3
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2208      	movs	r2, #8
 8003868:	4013      	ands	r3, r2
 800386a:	d006      	beq.n	800387a <_ftoa+0x44e>
      buf[len++] = ' ';
 800386c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800386e:	1c5a      	adds	r2, r3, #1
 8003870:	657a      	str	r2, [r7, #84]	@ 0x54
 8003872:	2210      	movs	r2, #16
 8003874:	18ba      	adds	r2, r7, r2
 8003876:	2120      	movs	r1, #32
 8003878:	54d1      	strb	r1, [r2, r3]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800387a:	683c      	ldr	r4, [r7, #0]
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	68b9      	ldr	r1, [r7, #8]
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	2380      	movs	r3, #128	@ 0x80
 8003884:	18fb      	adds	r3, r7, r3
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	9303      	str	r3, [sp, #12]
 800388a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800388c:	9302      	str	r3, [sp, #8]
 800388e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003890:	9301      	str	r3, [sp, #4]
 8003892:	2310      	movs	r3, #16
 8003894:	18fb      	adds	r3, r7, r3
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	0023      	movs	r3, r4
 800389a:	f7ff fbc8 	bl	800302e <_out_rev>
 800389e:	0003      	movs	r3, r0
}
 80038a0:	0018      	movs	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	b017      	add	sp, #92	@ 0x5c
 80038a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038a8 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80038a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038aa:	b0a7      	sub	sp, #156	@ 0x9c
 80038ac:	af06      	add	r7, sp, #24
 80038ae:	6478      	str	r0, [r7, #68]	@ 0x44
 80038b0:	6439      	str	r1, [r7, #64]	@ 0x40
 80038b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80038b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 80038b6:	2698      	movs	r6, #152	@ 0x98
 80038b8:	19bb      	adds	r3, r7, r6
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	19b9      	adds	r1, r7, r6
 80038c0:	6808      	ldr	r0, [r1, #0]
 80038c2:	6849      	ldr	r1, [r1, #4]
 80038c4:	f7fc fda6 	bl	8000414 <__aeabi_dcmpeq>
 80038c8:	1e03      	subs	r3, r0, #0
 80038ca:	d013      	beq.n	80038f4 <_etoa+0x4c>
 80038cc:	2201      	movs	r2, #1
 80038ce:	4252      	negs	r2, r2
 80038d0:	4bda      	ldr	r3, [pc, #872]	@ (8003c3c <_etoa+0x394>)
 80038d2:	19b9      	adds	r1, r7, r6
 80038d4:	6808      	ldr	r0, [r1, #0]
 80038d6:	6849      	ldr	r1, [r1, #4]
 80038d8:	f7fc fdb6 	bl	8000448 <__aeabi_dcmpgt>
 80038dc:	1e03      	subs	r3, r0, #0
 80038de:	d109      	bne.n	80038f4 <_etoa+0x4c>
 80038e0:	2201      	movs	r2, #1
 80038e2:	4252      	negs	r2, r2
 80038e4:	4bd6      	ldr	r3, [pc, #856]	@ (8003c40 <_etoa+0x398>)
 80038e6:	19b9      	adds	r1, r7, r6
 80038e8:	6808      	ldr	r0, [r1, #0]
 80038ea:	6849      	ldr	r1, [r1, #4]
 80038ec:	f7fc fd98 	bl	8000420 <__aeabi_dcmplt>
 80038f0:	1e03      	subs	r3, r0, #0
 80038f2:	d01b      	beq.n	800392c <_etoa+0x84>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80038f4:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 80038f6:	6bfc      	ldr	r4, [r7, #60]	@ 0x3c
 80038f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80038fa:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80038fc:	23a8      	movs	r3, #168	@ 0xa8
 80038fe:	18fb      	adds	r3, r7, r3
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	9304      	str	r3, [sp, #16]
 8003904:	23a4      	movs	r3, #164	@ 0xa4
 8003906:	18fb      	adds	r3, r7, r3
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	9303      	str	r3, [sp, #12]
 800390c:	23a0      	movs	r3, #160	@ 0xa0
 800390e:	18fb      	adds	r3, r7, r3
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	9302      	str	r3, [sp, #8]
 8003914:	2398      	movs	r3, #152	@ 0x98
 8003916:	18fb      	adds	r3, r7, r3
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	9200      	str	r2, [sp, #0]
 800391e:	9301      	str	r3, [sp, #4]
 8003920:	002b      	movs	r3, r5
 8003922:	0022      	movs	r2, r4
 8003924:	f7ff fd82 	bl	800342c <_ftoa>
 8003928:	0003      	movs	r3, r0
 800392a:	e272      	b.n	8003e12 <_etoa+0x56a>
  }

  // determine the sign
  const bool negative = value < 0;
 800392c:	233b      	movs	r3, #59	@ 0x3b
 800392e:	2238      	movs	r2, #56	@ 0x38
 8003930:	189b      	adds	r3, r3, r2
 8003932:	19de      	adds	r6, r3, r7
 8003934:	2301      	movs	r3, #1
 8003936:	73fb      	strb	r3, [r7, #15]
 8003938:	2200      	movs	r2, #0
 800393a:	2300      	movs	r3, #0
 800393c:	2198      	movs	r1, #152	@ 0x98
 800393e:	1879      	adds	r1, r7, r1
 8003940:	6808      	ldr	r0, [r1, #0]
 8003942:	6849      	ldr	r1, [r1, #4]
 8003944:	f7fc fd6c 	bl	8000420 <__aeabi_dcmplt>
 8003948:	1e03      	subs	r3, r0, #0
 800394a:	d101      	bne.n	8003950 <_etoa+0xa8>
 800394c:	2300      	movs	r3, #0
 800394e:	73fb      	strb	r3, [r7, #15]
 8003950:	7bfb      	ldrb	r3, [r7, #15]
 8003952:	7033      	strb	r3, [r6, #0]
  if (negative) {
 8003954:	233b      	movs	r3, #59	@ 0x3b
 8003956:	2238      	movs	r2, #56	@ 0x38
 8003958:	189b      	adds	r3, r3, r2
 800395a:	19db      	adds	r3, r3, r7
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00f      	beq.n	8003982 <_etoa+0xda>
    value = -value;
 8003962:	2198      	movs	r1, #152	@ 0x98
 8003964:	187b      	adds	r3, r7, r1
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	603b      	str	r3, [r7, #0]
 800396a:	239c      	movs	r3, #156	@ 0x9c
 800396c:	18fb      	adds	r3, r7, r3
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	2380      	movs	r3, #128	@ 0x80
 8003972:	061b      	lsls	r3, r3, #24
 8003974:	4053      	eors	r3, r2
 8003976:	607b      	str	r3, [r7, #4]
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	1879      	adds	r1, r7, r1
 800397e:	600a      	str	r2, [r1, #0]
 8003980:	604b      	str	r3, [r1, #4]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8003982:	23a8      	movs	r3, #168	@ 0xa8
 8003984:	18fb      	adds	r3, r7, r3
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	2380      	movs	r3, #128	@ 0x80
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	4013      	ands	r3, r2
 800398e:	d103      	bne.n	8003998 <_etoa+0xf0>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003990:	2306      	movs	r3, #6
 8003992:	22a0      	movs	r2, #160	@ 0xa0
 8003994:	18ba      	adds	r2, r7, r2
 8003996:	6013      	str	r3, [r2, #0]
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8003998:	2698      	movs	r6, #152	@ 0x98
 800399a:	19bb      	adds	r3, r7, r6
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80039a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 80039a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039a8:	0d1b      	lsrs	r3, r3, #20
 80039aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039ac:	2300      	movs	r3, #0
 80039ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b2:	055b      	lsls	r3, r3, #21
 80039b4:	0d5b      	lsrs	r3, r3, #21
 80039b6:	4aa3      	ldr	r2, [pc, #652]	@ (8003c44 <_etoa+0x39c>)
 80039b8:	4694      	mov	ip, r2
 80039ba:	4463      	add	r3, ip
 80039bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 80039be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039c2:	2100      	movs	r1, #0
 80039c4:	0010      	movs	r0, r2
 80039c6:	4388      	bics	r0, r1
 80039c8:	0004      	movs	r4, r0
 80039ca:	031b      	lsls	r3, r3, #12
 80039cc:	0b1d      	lsrs	r5, r3, #12
 80039ce:	2300      	movs	r3, #0
 80039d0:	4323      	orrs	r3, r4
 80039d2:	623b      	str	r3, [r7, #32]
 80039d4:	4b9c      	ldr	r3, [pc, #624]	@ (8003c48 <_etoa+0x3a0>)
 80039d6:	432b      	orrs	r3, r5
 80039d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80039de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039e0:	64fc      	str	r4, [r7, #76]	@ 0x4c
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80039e2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80039e4:	f7fe fcb4 	bl	8002350 <__aeabi_i2d>
 80039e8:	4a98      	ldr	r2, [pc, #608]	@ (8003c4c <_etoa+0x3a4>)
 80039ea:	4b99      	ldr	r3, [pc, #612]	@ (8003c50 <_etoa+0x3a8>)
 80039ec:	f7fd fe10 	bl	8001610 <__aeabi_dmul>
 80039f0:	0002      	movs	r2, r0
 80039f2:	000b      	movs	r3, r1
 80039f4:	0010      	movs	r0, r2
 80039f6:	0019      	movs	r1, r3
 80039f8:	4a96      	ldr	r2, [pc, #600]	@ (8003c54 <_etoa+0x3ac>)
 80039fa:	4b97      	ldr	r3, [pc, #604]	@ (8003c58 <_etoa+0x3b0>)
 80039fc:	f7fc fe60 	bl	80006c0 <__aeabi_dadd>
 8003a00:	0002      	movs	r2, r0
 8003a02:	000b      	movs	r3, r1
 8003a04:	0014      	movs	r4, r2
 8003a06:	001d      	movs	r5, r3
 8003a08:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003a0a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	4b93      	ldr	r3, [pc, #588]	@ (8003c5c <_etoa+0x3b4>)
 8003a10:	f7fe f8c6 	bl	8001ba0 <__aeabi_dsub>
 8003a14:	0002      	movs	r2, r0
 8003a16:	000b      	movs	r3, r1
 8003a18:	0010      	movs	r0, r2
 8003a1a:	0019      	movs	r1, r3
 8003a1c:	4a90      	ldr	r2, [pc, #576]	@ (8003c60 <_etoa+0x3b8>)
 8003a1e:	4b91      	ldr	r3, [pc, #580]	@ (8003c64 <_etoa+0x3bc>)
 8003a20:	f7fd fdf6 	bl	8001610 <__aeabi_dmul>
 8003a24:	0002      	movs	r2, r0
 8003a26:	000b      	movs	r3, r1
 8003a28:	0020      	movs	r0, r4
 8003a2a:	0029      	movs	r1, r5
 8003a2c:	f7fc fe48 	bl	80006c0 <__aeabi_dadd>
 8003a30:	0002      	movs	r2, r0
 8003a32:	000b      	movs	r3, r1
 8003a34:	0010      	movs	r0, r2
 8003a36:	0019      	movs	r1, r3
 8003a38:	f7fe fc4e 	bl	80022d8 <__aeabi_d2iz>
 8003a3c:	0003      	movs	r3, r0
 8003a3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8003a40:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8003a42:	f7fe fc85 	bl	8002350 <__aeabi_i2d>
 8003a46:	4a88      	ldr	r2, [pc, #544]	@ (8003c68 <_etoa+0x3c0>)
 8003a48:	4b88      	ldr	r3, [pc, #544]	@ (8003c6c <_etoa+0x3c4>)
 8003a4a:	f7fd fde1 	bl	8001610 <__aeabi_dmul>
 8003a4e:	0002      	movs	r2, r0
 8003a50:	000b      	movs	r3, r1
 8003a52:	0010      	movs	r0, r2
 8003a54:	0019      	movs	r1, r3
 8003a56:	2200      	movs	r2, #0
 8003a58:	4b85      	ldr	r3, [pc, #532]	@ (8003c70 <_etoa+0x3c8>)
 8003a5a:	f7fc fe31 	bl	80006c0 <__aeabi_dadd>
 8003a5e:	0002      	movs	r2, r0
 8003a60:	000b      	movs	r3, r1
 8003a62:	0010      	movs	r0, r2
 8003a64:	0019      	movs	r1, r3
 8003a66:	f7fe fc37 	bl	80022d8 <__aeabi_d2iz>
 8003a6a:	0003      	movs	r3, r0
 8003a6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8003a6e:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8003a70:	f7fe fc6e 	bl	8002350 <__aeabi_i2d>
 8003a74:	4a7f      	ldr	r2, [pc, #508]	@ (8003c74 <_etoa+0x3cc>)
 8003a76:	4b80      	ldr	r3, [pc, #512]	@ (8003c78 <_etoa+0x3d0>)
 8003a78:	f7fd fdca 	bl	8001610 <__aeabi_dmul>
 8003a7c:	0002      	movs	r2, r0
 8003a7e:	000b      	movs	r3, r1
 8003a80:	0014      	movs	r4, r2
 8003a82:	001d      	movs	r5, r3
 8003a84:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003a86:	f7fe fc63 	bl	8002350 <__aeabi_i2d>
 8003a8a:	4a7c      	ldr	r2, [pc, #496]	@ (8003c7c <_etoa+0x3d4>)
 8003a8c:	4b7c      	ldr	r3, [pc, #496]	@ (8003c80 <_etoa+0x3d8>)
 8003a8e:	f7fd fdbf 	bl	8001610 <__aeabi_dmul>
 8003a92:	0002      	movs	r2, r0
 8003a94:	000b      	movs	r3, r1
 8003a96:	0020      	movs	r0, r4
 8003a98:	0029      	movs	r1, r5
 8003a9a:	f7fe f881 	bl	8001ba0 <__aeabi_dsub>
 8003a9e:	0002      	movs	r2, r0
 8003aa0:	000b      	movs	r3, r1
 8003aa2:	663a      	str	r2, [r7, #96]	@ 0x60
 8003aa4:	667b      	str	r3, [r7, #100]	@ 0x64
  const double z2 = z * z;
 8003aa6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003aa8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003aaa:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8003aac:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003aae:	f7fd fdaf 	bl	8001610 <__aeabi_dmul>
 8003ab2:	0002      	movs	r2, r0
 8003ab4:	000b      	movs	r3, r1
 8003ab6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003ab8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8003aba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003abc:	4a71      	ldr	r2, [pc, #452]	@ (8003c84 <_etoa+0x3dc>)
 8003abe:	4694      	mov	ip, r2
 8003ac0:	4463      	add	r3, ip
 8003ac2:	61bb      	str	r3, [r7, #24]
 8003ac4:	17db      	asrs	r3, r3, #31
 8003ac6:	61fb      	str	r3, [r7, #28]
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	051b      	lsls	r3, r3, #20
 8003acc:	617b      	str	r3, [r7, #20]
 8003ace:	2300      	movs	r3, #0
 8003ad0:	613b      	str	r3, [r7, #16]
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	697c      	ldr	r4, [r7, #20]
 8003ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ad8:	64fc      	str	r4, [r7, #76]	@ 0x4c
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8003ada:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 8003adc:	6cfd      	ldr	r5, [r7, #76]	@ 0x4c
 8003ade:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8003ae0:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003ae2:	0002      	movs	r2, r0
 8003ae4:	000b      	movs	r3, r1
 8003ae6:	f7fc fdeb 	bl	80006c0 <__aeabi_dadd>
 8003aea:	0002      	movs	r2, r0
 8003aec:	000b      	movs	r3, r1
 8003aee:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003af2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003af4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003af6:	2000      	movs	r0, #0
 8003af8:	2180      	movs	r1, #128	@ 0x80
 8003afa:	05c9      	lsls	r1, r1, #23
 8003afc:	f7fe f850 	bl	8001ba0 <__aeabi_dsub>
 8003b00:	0002      	movs	r2, r0
 8003b02:	000b      	movs	r3, r1
 8003b04:	623a      	str	r2, [r7, #32]
 8003b06:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b08:	2200      	movs	r2, #0
 8003b0a:	4b5f      	ldr	r3, [pc, #380]	@ (8003c88 <_etoa+0x3e0>)
 8003b0c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003b0e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003b10:	f7fd f93a 	bl	8000d88 <__aeabi_ddiv>
 8003b14:	0002      	movs	r2, r0
 8003b16:	000b      	movs	r3, r1
 8003b18:	0010      	movs	r0, r2
 8003b1a:	0019      	movs	r1, r3
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	4b5b      	ldr	r3, [pc, #364]	@ (8003c8c <_etoa+0x3e4>)
 8003b20:	f7fc fdce 	bl	80006c0 <__aeabi_dadd>
 8003b24:	0002      	movs	r2, r0
 8003b26:	000b      	movs	r3, r1
 8003b28:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003b2a:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003b2c:	f7fd f92c 	bl	8000d88 <__aeabi_ddiv>
 8003b30:	0002      	movs	r2, r0
 8003b32:	000b      	movs	r3, r1
 8003b34:	0010      	movs	r0, r2
 8003b36:	0019      	movs	r1, r3
 8003b38:	2200      	movs	r2, #0
 8003b3a:	4b55      	ldr	r3, [pc, #340]	@ (8003c90 <_etoa+0x3e8>)
 8003b3c:	f7fc fdc0 	bl	80006c0 <__aeabi_dadd>
 8003b40:	0002      	movs	r2, r0
 8003b42:	000b      	movs	r3, r1
 8003b44:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003b46:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003b48:	f7fd f91e 	bl	8000d88 <__aeabi_ddiv>
 8003b4c:	0002      	movs	r2, r0
 8003b4e:	000b      	movs	r3, r1
 8003b50:	6a38      	ldr	r0, [r7, #32]
 8003b52:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b54:	f7fc fdb4 	bl	80006c0 <__aeabi_dadd>
 8003b58:	0002      	movs	r2, r0
 8003b5a:	000b      	movs	r3, r1
 8003b5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b60:	f7fd f912 	bl	8000d88 <__aeabi_ddiv>
 8003b64:	0002      	movs	r2, r0
 8003b66:	000b      	movs	r3, r1
 8003b68:	0010      	movs	r0, r2
 8003b6a:	0019      	movs	r1, r3
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	4b36      	ldr	r3, [pc, #216]	@ (8003c48 <_etoa+0x3a0>)
 8003b70:	f7fc fda6 	bl	80006c0 <__aeabi_dadd>
 8003b74:	0002      	movs	r2, r0
 8003b76:	000b      	movs	r3, r1
 8003b78:	0020      	movs	r0, r4
 8003b7a:	0029      	movs	r1, r5
 8003b7c:	f7fd fd48 	bl	8001610 <__aeabi_dmul>
 8003b80:	0002      	movs	r2, r0
 8003b82:	000b      	movs	r3, r1
 8003b84:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  // correct for rounding errors
  if (value < conv.F) {
 8003b88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b8c:	19b9      	adds	r1, r7, r6
 8003b8e:	6808      	ldr	r0, [r1, #0]
 8003b90:	6849      	ldr	r1, [r1, #4]
 8003b92:	f7fc fc45 	bl	8000420 <__aeabi_dcmplt>
 8003b96:	1e03      	subs	r3, r0, #0
 8003b98:	d00c      	beq.n	8003bb4 <_etoa+0x30c>
    expval--;
 8003b9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    conv.F /= 10;
 8003ba0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003ba2:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	4b39      	ldr	r3, [pc, #228]	@ (8003c8c <_etoa+0x3e4>)
 8003ba8:	f7fd f8ee 	bl	8000d88 <__aeabi_ddiv>
 8003bac:	0002      	movs	r2, r0
 8003bae:	000b      	movs	r3, r1
 8003bb0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003bb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8003bb4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003bb6:	2b63      	cmp	r3, #99	@ 0x63
 8003bb8:	dc04      	bgt.n	8003bc4 <_etoa+0x31c>
 8003bba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003bbc:	3363      	adds	r3, #99	@ 0x63
 8003bbe:	db01      	blt.n	8003bc4 <_etoa+0x31c>
 8003bc0:	2304      	movs	r3, #4
 8003bc2:	e000      	b.n	8003bc6 <_etoa+0x31e>
 8003bc4:	2305      	movs	r3, #5
 8003bc6:	67bb      	str	r3, [r7, #120]	@ 0x78

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8003bc8:	23a8      	movs	r3, #168	@ 0xa8
 8003bca:	18fb      	adds	r3, r7, r3
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	2380      	movs	r3, #128	@ 0x80
 8003bd0:	011b      	lsls	r3, r3, #4
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	d100      	bne.n	8003bd8 <_etoa+0x330>
 8003bd6:	e074      	b.n	8003cc2 <_etoa+0x41a>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8003bd8:	4a2e      	ldr	r2, [pc, #184]	@ (8003c94 <_etoa+0x3ec>)
 8003bda:	4b2f      	ldr	r3, [pc, #188]	@ (8003c98 <_etoa+0x3f0>)
 8003bdc:	2498      	movs	r4, #152	@ 0x98
 8003bde:	1939      	adds	r1, r7, r4
 8003be0:	6808      	ldr	r0, [r1, #0]
 8003be2:	6849      	ldr	r1, [r1, #4]
 8003be4:	f7fc fc3a 	bl	800045c <__aeabi_dcmpge>
 8003be8:	1e03      	subs	r3, r0, #0
 8003bea:	d059      	beq.n	8003ca0 <_etoa+0x3f8>
 8003bec:	2200      	movs	r2, #0
 8003bee:	4b2b      	ldr	r3, [pc, #172]	@ (8003c9c <_etoa+0x3f4>)
 8003bf0:	1939      	adds	r1, r7, r4
 8003bf2:	6808      	ldr	r0, [r1, #0]
 8003bf4:	6849      	ldr	r1, [r1, #4]
 8003bf6:	f7fc fc13 	bl	8000420 <__aeabi_dcmplt>
 8003bfa:	1e03      	subs	r3, r0, #0
 8003bfc:	d050      	beq.n	8003ca0 <_etoa+0x3f8>
      if ((int)prec > expval) {
 8003bfe:	21a0      	movs	r1, #160	@ 0xa0
 8003c00:	187b      	adds	r3, r7, r1
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003c06:	429a      	cmp	r2, r3
 8003c08:	da07      	bge.n	8003c1a <_etoa+0x372>
        prec = (unsigned)((int)prec - expval - 1);
 8003c0a:	187b      	adds	r3, r7, r1
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	3b01      	subs	r3, #1
 8003c14:	187a      	adds	r2, r7, r1
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	e003      	b.n	8003c22 <_etoa+0x37a>
      }
      else {
        prec = 0;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	22a0      	movs	r2, #160	@ 0xa0
 8003c1e:	18ba      	adds	r2, r7, r2
 8003c20:	6013      	str	r3, [r2, #0]
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8003c22:	21a8      	movs	r1, #168	@ 0xa8
 8003c24:	187b      	adds	r3, r7, r1
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2280      	movs	r2, #128	@ 0x80
 8003c2a:	00d2      	lsls	r2, r2, #3
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	187a      	adds	r2, r7, r1
 8003c30:	6013      	str	r3, [r2, #0]
      // no characters in exponent
      minwidth = 0U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	67bb      	str	r3, [r7, #120]	@ 0x78
      expval   = 0;
 8003c36:	2300      	movs	r3, #0
 8003c38:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003c3a:	e042      	b.n	8003cc2 <_etoa+0x41a>
 8003c3c:	7fefffff 	.word	0x7fefffff
 8003c40:	ffefffff 	.word	0xffefffff
 8003c44:	fffffc01 	.word	0xfffffc01
 8003c48:	3ff00000 	.word	0x3ff00000
 8003c4c:	509f79fb 	.word	0x509f79fb
 8003c50:	3fd34413 	.word	0x3fd34413
 8003c54:	8b60c8b3 	.word	0x8b60c8b3
 8003c58:	3fc68a28 	.word	0x3fc68a28
 8003c5c:	3ff80000 	.word	0x3ff80000
 8003c60:	636f4361 	.word	0x636f4361
 8003c64:	3fd287a7 	.word	0x3fd287a7
 8003c68:	0979a371 	.word	0x0979a371
 8003c6c:	400a934f 	.word	0x400a934f
 8003c70:	3fe00000 	.word	0x3fe00000
 8003c74:	bbb55516 	.word	0xbbb55516
 8003c78:	40026bb1 	.word	0x40026bb1
 8003c7c:	fefa39ef 	.word	0xfefa39ef
 8003c80:	3fe62e42 	.word	0x3fe62e42
 8003c84:	000003ff 	.word	0x000003ff
 8003c88:	402c0000 	.word	0x402c0000
 8003c8c:	40240000 	.word	0x40240000
 8003c90:	40180000 	.word	0x40180000
 8003c94:	eb1c432d 	.word	0xeb1c432d
 8003c98:	3f1a36e2 	.word	0x3f1a36e2
 8003c9c:	412e8480 	.word	0x412e8480
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8003ca0:	21a0      	movs	r1, #160	@ 0xa0
 8003ca2:	187b      	adds	r3, r7, r1
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00b      	beq.n	8003cc2 <_etoa+0x41a>
 8003caa:	23a8      	movs	r3, #168	@ 0xa8
 8003cac:	18fb      	adds	r3, r7, r3
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	2380      	movs	r3, #128	@ 0x80
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	d004      	beq.n	8003cc2 <_etoa+0x41a>
        --prec;
 8003cb8:	187b      	adds	r3, r7, r1
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	187a      	adds	r2, r7, r1
 8003cc0:	6013      	str	r3, [r2, #0]
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8003cc2:	22a4      	movs	r2, #164	@ 0xa4
 8003cc4:	18bb      	adds	r3, r7, r2
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	677b      	str	r3, [r7, #116]	@ 0x74
  if (width > minwidth) {
 8003cca:	18bb      	adds	r3, r7, r2
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d904      	bls.n	8003cde <_etoa+0x436>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8003cd4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003cd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	677b      	str	r3, [r7, #116]	@ 0x74
 8003cdc:	e001      	b.n	8003ce2 <_etoa+0x43a>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	677b      	str	r3, [r7, #116]	@ 0x74
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8003ce2:	23a8      	movs	r3, #168	@ 0xa8
 8003ce4:	18fb      	adds	r3, r7, r3
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2202      	movs	r2, #2
 8003cea:	4013      	ands	r3, r2
 8003cec:	d004      	beq.n	8003cf8 <_etoa+0x450>
 8003cee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <_etoa+0x450>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	677b      	str	r3, [r7, #116]	@ 0x74
  }

  // rescale the float value
  if (expval) {
 8003cf8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00c      	beq.n	8003d18 <_etoa+0x470>
    value /= conv.F;
 8003cfe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d02:	2498      	movs	r4, #152	@ 0x98
 8003d04:	1939      	adds	r1, r7, r4
 8003d06:	6808      	ldr	r0, [r1, #0]
 8003d08:	6849      	ldr	r1, [r1, #4]
 8003d0a:	f7fd f83d 	bl	8000d88 <__aeabi_ddiv>
 8003d0e:	0002      	movs	r2, r0
 8003d10:	000b      	movs	r3, r1
 8003d12:	1939      	adds	r1, r7, r4
 8003d14:	600a      	str	r2, [r1, #0]
 8003d16:	604b      	str	r3, [r1, #4]
  }

  // output the floating part
  const size_t start_idx = idx;
 8003d18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d1a:	657b      	str	r3, [r7, #84]	@ 0x54
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8003d1c:	233b      	movs	r3, #59	@ 0x3b
 8003d1e:	2238      	movs	r2, #56	@ 0x38
 8003d20:	189b      	adds	r3, r3, r2
 8003d22:	19db      	adds	r3, r3, r7
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00b      	beq.n	8003d42 <_etoa+0x49a>
 8003d2a:	2398      	movs	r3, #152	@ 0x98
 8003d2c:	18fb      	adds	r3, r7, r3
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d32:	239c      	movs	r3, #156	@ 0x9c
 8003d34:	18fb      	adds	r3, r7, r3
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2280      	movs	r2, #128	@ 0x80
 8003d3a:	0612      	lsls	r2, r2, #24
 8003d3c:	405a      	eors	r2, r3
 8003d3e:	637a      	str	r2, [r7, #52]	@ 0x34
 8003d40:	e005      	b.n	8003d4e <_etoa+0x4a6>
 8003d42:	2398      	movs	r3, #152	@ 0x98
 8003d44:	18fb      	adds	r3, r7, r3
 8003d46:	685c      	ldr	r4, [r3, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d4c:	637c      	str	r4, [r7, #52]	@ 0x34
 8003d4e:	23a8      	movs	r3, #168	@ 0xa8
 8003d50:	18fa      	adds	r2, r7, r3
 8003d52:	6813      	ldr	r3, [r2, #0]
 8003d54:	4a31      	ldr	r2, [pc, #196]	@ (8003e1c <_etoa+0x574>)
 8003d56:	4013      	ands	r3, r2
 8003d58:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8003d5a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d5e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003d60:	9304      	str	r3, [sp, #16]
 8003d62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d64:	9303      	str	r3, [sp, #12]
 8003d66:	25a0      	movs	r5, #160	@ 0xa0
 8003d68:	197d      	adds	r5, r7, r5
 8003d6a:	682b      	ldr	r3, [r5, #0]
 8003d6c:	9302      	str	r3, [sp, #8]
 8003d6e:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
 8003d70:	6b7e      	ldr	r6, [r7, #52]	@ 0x34
 8003d72:	9500      	str	r5, [sp, #0]
 8003d74:	9601      	str	r6, [sp, #4]
 8003d76:	0023      	movs	r3, r4
 8003d78:	f7ff fb58 	bl	800342c <_ftoa>
 8003d7c:	0003      	movs	r3, r0
 8003d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // output the exponent part
  if (minwidth) {
 8003d80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d044      	beq.n	8003e10 <_etoa+0x568>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8003d86:	23a8      	movs	r3, #168	@ 0xa8
 8003d88:	18fb      	adds	r3, r7, r3
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	4013      	ands	r3, r2
 8003d90:	d001      	beq.n	8003d96 <_etoa+0x4ee>
 8003d92:	2045      	movs	r0, #69	@ 0x45
 8003d94:	e000      	b.n	8003d98 <_etoa+0x4f0>
 8003d96:	2065      	movs	r0, #101	@ 0x65
 8003d98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d9a:	1c53      	adds	r3, r2, #1
 8003d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003da0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003da2:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8003da4:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8003da6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003da8:	17da      	asrs	r2, r3, #31
 8003daa:	189b      	adds	r3, r3, r2
 8003dac:	4053      	eors	r3, r2
 8003dae:	469c      	mov	ip, r3
 8003db0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003db2:	0fdb      	lsrs	r3, r3, #31
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003db8:	3a01      	subs	r2, #1
 8003dba:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 8003dbc:	6bfc      	ldr	r4, [r7, #60]	@ 0x3c
 8003dbe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003dc0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003dc2:	2605      	movs	r6, #5
 8003dc4:	9605      	str	r6, [sp, #20]
 8003dc6:	9204      	str	r2, [sp, #16]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	9203      	str	r2, [sp, #12]
 8003dcc:	220a      	movs	r2, #10
 8003dce:	9202      	str	r2, [sp, #8]
 8003dd0:	9301      	str	r3, [sp, #4]
 8003dd2:	4663      	mov	r3, ip
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	002b      	movs	r3, r5
 8003dd8:	0022      	movs	r2, r4
 8003dda:	f7ff fa4b 	bl	8003274 <_ntoa_long>
 8003dde:	0003      	movs	r3, r0
 8003de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8003de2:	23a8      	movs	r3, #168	@ 0xa8
 8003de4:	18fb      	adds	r3, r7, r3
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2202      	movs	r2, #2
 8003dea:	4013      	ands	r3, r2
 8003dec:	d010      	beq.n	8003e10 <_etoa+0x568>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8003dee:	e007      	b.n	8003e00 <_etoa+0x558>
 8003df0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003df2:	1c53      	adds	r3, r2, #1
 8003df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003df8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003dfa:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8003dfc:	2020      	movs	r0, #32
 8003dfe:	47a0      	blx	r4
 8003e00:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	22a4      	movs	r2, #164	@ 0xa4
 8003e08:	18ba      	adds	r2, r7, r2
 8003e0a:	6812      	ldr	r2, [r2, #0]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d8ef      	bhi.n	8003df0 <_etoa+0x548>
    }
  }
  return idx;
 8003e10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003e12:	0018      	movs	r0, r3
 8003e14:	46bd      	mov	sp, r7
 8003e16:	b021      	add	sp, #132	@ 0x84
 8003e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e1a:	46c0      	nop			@ (mov r8, r8)
 8003e1c:	fffff7ff 	.word	0xfffff7ff

08003e20 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8003e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e22:	46c6      	mov	lr, r8
 8003e24:	b500      	push	{lr}
 8003e26:	b0a6      	sub	sp, #152	@ 0x98
 8003e28:	af0a      	add	r7, sp, #40	@ 0x28
 8003e2a:	6278      	str	r0, [r7, #36]	@ 0x24
 8003e2c:	6239      	str	r1, [r7, #32]
 8003e2e:	61fa      	str	r2, [r7, #28]
 8003e30:	61bb      	str	r3, [r7, #24]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	65fb      	str	r3, [r7, #92]	@ 0x5c

  if (!buffer) {
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <_vsnprintf+0x20>
 8003e3c:	f000 fc51 	bl	80046e2 <_vsnprintf+0x8c2>
    // use null output function
    out = _out_null;
 8003e40:	4bad      	ldr	r3, [pc, #692]	@ (80040f8 <_vsnprintf+0x2d8>)
 8003e42:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  while (*format)
 8003e44:	f000 fc4d 	bl	80046e2 <_vsnprintf+0x8c2>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	2b25      	cmp	r3, #37	@ 0x25
 8003e4e:	d00d      	beq.n	8003e6c <_vsnprintf+0x4c>
      // no
      out(*format, buffer, idx++, maxlen);
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	7818      	ldrb	r0, [r3, #0]
 8003e54:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003e56:	1c53      	adds	r3, r2, #1
 8003e58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	6a39      	ldr	r1, [r7, #32]
 8003e5e:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8003e60:	47a0      	blx	r4
      format++;
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	3301      	adds	r3, #1
 8003e66:	61bb      	str	r3, [r7, #24]
      continue;
 8003e68:	f000 fc3b 	bl	80046e2 <_vsnprintf+0x8c2>
    }
    else {
      // yes, evaluate it
      format++;
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	61bb      	str	r3, [r7, #24]
    }

    // evaluate flags
    flags = 0U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	66fb      	str	r3, [r7, #108]	@ 0x6c
    do {
      switch (*format) {
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	3b20      	subs	r3, #32
 8003e7c:	2b10      	cmp	r3, #16
 8003e7e:	d836      	bhi.n	8003eee <_vsnprintf+0xce>
 8003e80:	009a      	lsls	r2, r3, #2
 8003e82:	4b9e      	ldr	r3, [pc, #632]	@ (80040fc <_vsnprintf+0x2dc>)
 8003e84:	18d3      	adds	r3, r2, r3
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	469f      	mov	pc, r3
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8003e8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	3301      	adds	r3, #1
 8003e96:	61bb      	str	r3, [r7, #24]
 8003e98:	2301      	movs	r3, #1
 8003e9a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e9c:	e02a      	b.n	8003ef4 <_vsnprintf+0xd4>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8003e9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ea0:	2202      	movs	r2, #2
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	61bb      	str	r3, [r7, #24]
 8003eac:	2301      	movs	r3, #1
 8003eae:	663b      	str	r3, [r7, #96]	@ 0x60
 8003eb0:	e020      	b.n	8003ef4 <_vsnprintf+0xd4>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8003eb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003eb4:	2204      	movs	r2, #4
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	61bb      	str	r3, [r7, #24]
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ec4:	e016      	b.n	8003ef4 <_vsnprintf+0xd4>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8003ec6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ec8:	2208      	movs	r2, #8
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	61bb      	str	r3, [r7, #24]
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ed8:	e00c      	b.n	8003ef4 <_vsnprintf+0xd4>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8003eda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003edc:	2210      	movs	r2, #16
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	61bb      	str	r3, [r7, #24]
 8003ee8:	2301      	movs	r3, #1
 8003eea:	663b      	str	r3, [r7, #96]	@ 0x60
 8003eec:	e002      	b.n	8003ef4 <_vsnprintf+0xd4>
        default :                                   n = 0U; break;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ef2:	46c0      	nop			@ (mov r8, r8)
      }
    } while (n);
 8003ef4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1bd      	bne.n	8003e76 <_vsnprintf+0x56>

    // evaluate width field
    width = 0U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (_is_digit(*format)) {
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	0018      	movs	r0, r3
 8003f04:	f7ff f857 	bl	8002fb6 <_is_digit>
 8003f08:	1e03      	subs	r3, r0, #0
 8003f0a:	d007      	beq.n	8003f1c <_vsnprintf+0xfc>
      width = _atoi(&format);
 8003f0c:	2318      	movs	r3, #24
 8003f0e:	18fb      	adds	r3, r7, r3
 8003f10:	0018      	movs	r0, r3
 8003f12:	f7ff f869 	bl	8002fe8 <_atoi>
 8003f16:	0003      	movs	r3, r0
 8003f18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f1a:	e01c      	b.n	8003f56 <_vsnprintf+0x136>
    }
    else if (*format == '*') {
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f22:	d118      	bne.n	8003f56 <_vsnprintf+0x136>
      const int w = va_arg(va, int);
 8003f24:	2388      	movs	r3, #136	@ 0x88
 8003f26:	18fb      	adds	r3, r7, r3
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	1d1a      	adds	r2, r3, #4
 8003f2c:	2188      	movs	r1, #136	@ 0x88
 8003f2e:	1879      	adds	r1, r7, r1
 8003f30:	600a      	str	r2, [r1, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	64bb      	str	r3, [r7, #72]	@ 0x48
      if (w < 0) {
 8003f36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	da07      	bge.n	8003f4c <_vsnprintf+0x12c>
        flags |= FLAGS_LEFT;    // reverse padding
 8003f3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f3e:	2202      	movs	r2, #2
 8003f40:	4313      	orrs	r3, r2
 8003f42:	66fb      	str	r3, [r7, #108]	@ 0x6c
        width = (unsigned int)-w;
 8003f44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f46:	425b      	negs	r3, r3
 8003f48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f4a:	e001      	b.n	8003f50 <_vsnprintf+0x130>
      }
      else {
        width = (unsigned int)w;
 8003f4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f4e:	66bb      	str	r3, [r7, #104]	@ 0x68
      }
      format++;
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	3301      	adds	r3, #1
 8003f54:	61bb      	str	r3, [r7, #24]
    }

    // evaluate precision field
    precision = 0U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	667b      	str	r3, [r7, #100]	@ 0x64
    if (*format == '.') {
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f60:	d12b      	bne.n	8003fba <_vsnprintf+0x19a>
      flags |= FLAGS_PRECISION;
 8003f62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f64:	2280      	movs	r2, #128	@ 0x80
 8003f66:	00d2      	lsls	r2, r2, #3
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
      format++;
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	61bb      	str	r3, [r7, #24]
      if (_is_digit(*format)) {
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	0018      	movs	r0, r3
 8003f78:	f7ff f81d 	bl	8002fb6 <_is_digit>
 8003f7c:	1e03      	subs	r3, r0, #0
 8003f7e:	d007      	beq.n	8003f90 <_vsnprintf+0x170>
        precision = _atoi(&format);
 8003f80:	2318      	movs	r3, #24
 8003f82:	18fb      	adds	r3, r7, r3
 8003f84:	0018      	movs	r0, r3
 8003f86:	f7ff f82f 	bl	8002fe8 <_atoi>
 8003f8a:	0003      	movs	r3, r0
 8003f8c:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f8e:	e014      	b.n	8003fba <_vsnprintf+0x19a>
      }
      else if (*format == '*') {
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f96:	d110      	bne.n	8003fba <_vsnprintf+0x19a>
        const int prec = (int)va_arg(va, int);
 8003f98:	2388      	movs	r3, #136	@ 0x88
 8003f9a:	18fb      	adds	r3, r7, r3
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	1d1a      	adds	r2, r3, #4
 8003fa0:	2188      	movs	r1, #136	@ 0x88
 8003fa2:	1879      	adds	r1, r7, r1
 8003fa4:	600a      	str	r2, [r1, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	647b      	str	r3, [r7, #68]	@ 0x44
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8003faa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	da00      	bge.n	8003fb2 <_vsnprintf+0x192>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	667b      	str	r3, [r7, #100]	@ 0x64
        format++;
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	61bb      	str	r3, [r7, #24]
      }
    }

    // evaluate length field
    switch (*format) {
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	3b68      	subs	r3, #104	@ 0x68
 8003fc0:	2b12      	cmp	r3, #18
 8003fc2:	d847      	bhi.n	8004054 <_vsnprintf+0x234>
 8003fc4:	009a      	lsls	r2, r3, #2
 8003fc6:	4b4e      	ldr	r3, [pc, #312]	@ (8004100 <_vsnprintf+0x2e0>)
 8003fc8:	18d3      	adds	r3, r2, r3
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	469f      	mov	pc, r3
      case 'l' :
        flags |= FLAGS_LONG;
 8003fce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fd0:	2280      	movs	r2, #128	@ 0x80
 8003fd2:	0052      	lsls	r2, r2, #1
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
        format++;
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	3301      	adds	r3, #1
 8003fdc:	61bb      	str	r3, [r7, #24]
        if (*format == 'l') {
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b6c      	cmp	r3, #108	@ 0x6c
 8003fe4:	d138      	bne.n	8004058 <_vsnprintf+0x238>
          flags |= FLAGS_LONG_LONG;
 8003fe6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fe8:	2280      	movs	r2, #128	@ 0x80
 8003fea:	0092      	lsls	r2, r2, #2
 8003fec:	4313      	orrs	r3, r2
 8003fee:	66fb      	str	r3, [r7, #108]	@ 0x6c
          format++;
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	61bb      	str	r3, [r7, #24]
        }
        break;
 8003ff6:	e02f      	b.n	8004058 <_vsnprintf+0x238>
      case 'h' :
        flags |= FLAGS_SHORT;
 8003ff8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ffa:	2280      	movs	r2, #128	@ 0x80
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	66fb      	str	r3, [r7, #108]	@ 0x6c
        format++;
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	3301      	adds	r3, #1
 8004004:	61bb      	str	r3, [r7, #24]
        if (*format == 'h') {
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	2b68      	cmp	r3, #104	@ 0x68
 800400c:	d126      	bne.n	800405c <_vsnprintf+0x23c>
          flags |= FLAGS_CHAR;
 800400e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004010:	2240      	movs	r2, #64	@ 0x40
 8004012:	4313      	orrs	r3, r2
 8004014:	66fb      	str	r3, [r7, #108]	@ 0x6c
          format++;
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	3301      	adds	r3, #1
 800401a:	61bb      	str	r3, [r7, #24]
        }
        break;
 800401c:	e01e      	b.n	800405c <_vsnprintf+0x23c>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800401e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004020:	2280      	movs	r2, #128	@ 0x80
 8004022:	0052      	lsls	r2, r2, #1
 8004024:	4313      	orrs	r3, r2
 8004026:	66fb      	str	r3, [r7, #108]	@ 0x6c
        format++;
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	3301      	adds	r3, #1
 800402c:	61bb      	str	r3, [r7, #24]
        break;
 800402e:	e016      	b.n	800405e <_vsnprintf+0x23e>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004030:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004032:	2280      	movs	r2, #128	@ 0x80
 8004034:	0092      	lsls	r2, r2, #2
 8004036:	4313      	orrs	r3, r2
 8004038:	66fb      	str	r3, [r7, #108]	@ 0x6c
        format++;
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	3301      	adds	r3, #1
 800403e:	61bb      	str	r3, [r7, #24]
        break;
 8004040:	e00d      	b.n	800405e <_vsnprintf+0x23e>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004042:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004044:	2280      	movs	r2, #128	@ 0x80
 8004046:	0052      	lsls	r2, r2, #1
 8004048:	4313      	orrs	r3, r2
 800404a:	66fb      	str	r3, [r7, #108]	@ 0x6c
        format++;
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	3301      	adds	r3, #1
 8004050:	61bb      	str	r3, [r7, #24]
        break;
 8004052:	e004      	b.n	800405e <_vsnprintf+0x23e>
      default :
        break;
 8004054:	46c0      	nop			@ (mov r8, r8)
 8004056:	e002      	b.n	800405e <_vsnprintf+0x23e>
        break;
 8004058:	46c0      	nop			@ (mov r8, r8)
 800405a:	e000      	b.n	800405e <_vsnprintf+0x23e>
        break;
 800405c:	46c0      	nop			@ (mov r8, r8)
    }

    // evaluate specifier
    switch (*format) {
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	2b67      	cmp	r3, #103	@ 0x67
 8004064:	dc28      	bgt.n	80040b8 <_vsnprintf+0x298>
 8004066:	2b25      	cmp	r3, #37	@ 0x25
 8004068:	da1d      	bge.n	80040a6 <_vsnprintf+0x286>
 800406a:	e32d      	b.n	80046c8 <_vsnprintf+0x8a8>
 800406c:	3b69      	subs	r3, #105	@ 0x69
 800406e:	2201      	movs	r2, #1
 8004070:	409a      	lsls	r2, r3
 8004072:	0013      	movs	r3, r2
 8004074:	4a23      	ldr	r2, [pc, #140]	@ (8004104 <_vsnprintf+0x2e4>)
 8004076:	401a      	ands	r2, r3
 8004078:	1e51      	subs	r1, r2, #1
 800407a:	418a      	sbcs	r2, r1
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	2a00      	cmp	r2, #0
 8004080:	d120      	bne.n	80040c4 <_vsnprintf+0x2a4>
 8004082:	2280      	movs	r2, #128	@ 0x80
 8004084:	401a      	ands	r2, r3
 8004086:	1e51      	subs	r1, r2, #1
 8004088:	418a      	sbcs	r2, r1
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	2a00      	cmp	r2, #0
 800408e:	d000      	beq.n	8004092 <_vsnprintf+0x272>
 8004090:	e2b5      	b.n	80045fe <_vsnprintf+0x7de>
 8004092:	2280      	movs	r2, #128	@ 0x80
 8004094:	00d2      	lsls	r2, r2, #3
 8004096:	4013      	ands	r3, r2
 8004098:	1e5a      	subs	r2, r3, #1
 800409a:	4193      	sbcs	r3, r2
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d000      	beq.n	80040a4 <_vsnprintf+0x284>
 80040a2:	e246      	b.n	8004532 <_vsnprintf+0x712>
 80040a4:	e310      	b.n	80046c8 <_vsnprintf+0x8a8>
 80040a6:	3b25      	subs	r3, #37	@ 0x25
 80040a8:	2b42      	cmp	r3, #66	@ 0x42
 80040aa:	d900      	bls.n	80040ae <_vsnprintf+0x28e>
 80040ac:	e30c      	b.n	80046c8 <_vsnprintf+0x8a8>
 80040ae:	009a      	lsls	r2, r3, #2
 80040b0:	4b15      	ldr	r3, [pc, #84]	@ (8004108 <_vsnprintf+0x2e8>)
 80040b2:	18d3      	adds	r3, r2, r3
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	469f      	mov	pc, r3
 80040b8:	2b78      	cmp	r3, #120	@ 0x78
 80040ba:	dd00      	ble.n	80040be <_vsnprintf+0x29e>
 80040bc:	e304      	b.n	80046c8 <_vsnprintf+0x8a8>
 80040be:	2b69      	cmp	r3, #105	@ 0x69
 80040c0:	dad4      	bge.n	800406c <_vsnprintf+0x24c>
 80040c2:	e301      	b.n	80046c8 <_vsnprintf+0x8a8>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	2b78      	cmp	r3, #120	@ 0x78
 80040ca:	d003      	beq.n	80040d4 <_vsnprintf+0x2b4>
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b58      	cmp	r3, #88	@ 0x58
 80040d2:	d102      	bne.n	80040da <_vsnprintf+0x2ba>
          base = 16U;
 80040d4:	2310      	movs	r3, #16
 80040d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80040d8:	e01e      	b.n	8004118 <_vsnprintf+0x2f8>
        }
        else if (*format == 'o') {
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	2b6f      	cmp	r3, #111	@ 0x6f
 80040e0:	d102      	bne.n	80040e8 <_vsnprintf+0x2c8>
          base =  8U;
 80040e2:	2308      	movs	r3, #8
 80040e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80040e6:	e017      	b.n	8004118 <_vsnprintf+0x2f8>
        }
        else if (*format == 'b') {
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2b62      	cmp	r3, #98	@ 0x62
 80040ee:	d10d      	bne.n	800410c <_vsnprintf+0x2ec>
          base =  2U;
 80040f0:	2302      	movs	r3, #2
 80040f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80040f4:	e010      	b.n	8004118 <_vsnprintf+0x2f8>
 80040f6:	46c0      	nop			@ (mov r8, r8)
 80040f8:	08002f35 	.word	0x08002f35
 80040fc:	08009838 	.word	0x08009838
 8004100:	0800987c 	.word	0x0800987c
 8004104:	00009041 	.word	0x00009041
 8004108:	080098c8 	.word	0x080098c8
        }
        else {
          base = 10U;
 800410c:	230a      	movs	r3, #10
 800410e:	65bb      	str	r3, [r7, #88]	@ 0x58
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8004110:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004112:	2210      	movs	r2, #16
 8004114:	4393      	bics	r3, r2
 8004116:	66fb      	str	r3, [r7, #108]	@ 0x6c
        }
        // uppercase
        if (*format == 'X') {
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b58      	cmp	r3, #88	@ 0x58
 800411e:	d103      	bne.n	8004128 <_vsnprintf+0x308>
          flags |= FLAGS_UPPERCASE;
 8004120:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004122:	2220      	movs	r2, #32
 8004124:	4313      	orrs	r3, r2
 8004126:	66fb      	str	r3, [r7, #108]	@ 0x6c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	2b69      	cmp	r3, #105	@ 0x69
 800412e:	d007      	beq.n	8004140 <_vsnprintf+0x320>
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b64      	cmp	r3, #100	@ 0x64
 8004136:	d003      	beq.n	8004140 <_vsnprintf+0x320>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8004138:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800413a:	220c      	movs	r2, #12
 800413c:	4393      	bics	r3, r2
 800413e:	66fb      	str	r3, [r7, #108]	@ 0x6c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8004140:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004142:	2380      	movs	r3, #128	@ 0x80
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	4013      	ands	r3, r2
 8004148:	d003      	beq.n	8004152 <_vsnprintf+0x332>
          flags &= ~FLAGS_ZEROPAD;
 800414a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800414c:	2201      	movs	r2, #1
 800414e:	4393      	bics	r3, r2
 8004150:	66fb      	str	r3, [r7, #108]	@ 0x6c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b69      	cmp	r3, #105	@ 0x69
 8004158:	d004      	beq.n	8004164 <_vsnprintf+0x344>
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2b64      	cmp	r3, #100	@ 0x64
 8004160:	d000      	beq.n	8004164 <_vsnprintf+0x344>
 8004162:	e0af      	b.n	80042c4 <_vsnprintf+0x4a4>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8004164:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004166:	2380      	movs	r3, #128	@ 0x80
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4013      	ands	r3, r2
 800416c:	d03d      	beq.n	80041ea <_vsnprintf+0x3ca>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800416e:	2388      	movs	r3, #136	@ 0x88
 8004170:	18fb      	adds	r3, r7, r3
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	3307      	adds	r3, #7
 8004176:	2207      	movs	r2, #7
 8004178:	4393      	bics	r3, r2
 800417a:	001a      	movs	r2, r3
 800417c:	3208      	adds	r2, #8
 800417e:	2188      	movs	r1, #136	@ 0x88
 8004180:	1879      	adds	r1, r7, r1
 8004182:	600a      	str	r2, [r1, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	62ba      	str	r2, [r7, #40]	@ 0x28
 800418a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800418c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800418e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004190:	2b00      	cmp	r3, #0
 8004192:	da05      	bge.n	80041a0 <_vsnprintf+0x380>
 8004194:	2000      	movs	r0, #0
 8004196:	2100      	movs	r1, #0
 8004198:	1a80      	subs	r0, r0, r2
 800419a:	4199      	sbcs	r1, r3
 800419c:	0002      	movs	r2, r0
 800419e:	000b      	movs	r3, r1
 80041a0:	0010      	movs	r0, r2
 80041a2:	0019      	movs	r1, r3
 80041a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041a6:	0fdb      	lsrs	r3, r3, #31
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041ac:	613b      	str	r3, [r7, #16]
 80041ae:	2300      	movs	r3, #0
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	469c      	mov	ip, r3
 80041b6:	6dfe      	ldr	r6, [r7, #92]	@ 0x5c
 80041b8:	6a3d      	ldr	r5, [r7, #32]
 80041ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041bc:	4698      	mov	r8, r3
 80041be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041c0:	9308      	str	r3, [sp, #32]
 80041c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041c4:	9307      	str	r3, [sp, #28]
 80041c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041c8:	9306      	str	r3, [sp, #24]
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	697c      	ldr	r4, [r7, #20]
 80041ce:	9304      	str	r3, [sp, #16]
 80041d0:	9405      	str	r4, [sp, #20]
 80041d2:	9202      	str	r2, [sp, #8]
 80041d4:	9000      	str	r0, [sp, #0]
 80041d6:	9101      	str	r1, [sp, #4]
 80041d8:	4663      	mov	r3, ip
 80041da:	0032      	movs	r2, r6
 80041dc:	0029      	movs	r1, r5
 80041de:	4640      	mov	r0, r8
 80041e0:	f7ff f8b1 	bl	8003346 <_ntoa_long_long>
 80041e4:	0003      	movs	r3, r0
 80041e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
          if (flags & FLAGS_LONG_LONG) {
 80041e8:	e0fa      	b.n	80043e0 <_vsnprintf+0x5c0>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80041ea:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80041ec:	2380      	movs	r3, #128	@ 0x80
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	4013      	ands	r3, r2
 80041f2:	d025      	beq.n	8004240 <_vsnprintf+0x420>
            const long value = va_arg(va, long);
 80041f4:	2388      	movs	r3, #136	@ 0x88
 80041f6:	18fb      	adds	r3, r7, r3
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	1d1a      	adds	r2, r3, #4
 80041fc:	2188      	movs	r1, #136	@ 0x88
 80041fe:	1879      	adds	r1, r7, r1
 8004200:	600a      	str	r2, [r1, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	637b      	str	r3, [r7, #52]	@ 0x34
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004208:	17da      	asrs	r2, r3, #31
 800420a:	189b      	adds	r3, r3, r2
 800420c:	4053      	eors	r3, r2
 800420e:	001e      	movs	r6, r3
 8004210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004212:	0fdb      	lsrs	r3, r3, #31
 8004214:	b2da      	uxtb	r2, r3
 8004216:	69fd      	ldr	r5, [r7, #28]
 8004218:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 800421a:	6a39      	ldr	r1, [r7, #32]
 800421c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800421e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004220:	9305      	str	r3, [sp, #20]
 8004222:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004224:	9304      	str	r3, [sp, #16]
 8004226:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004228:	9303      	str	r3, [sp, #12]
 800422a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800422c:	9302      	str	r3, [sp, #8]
 800422e:	9201      	str	r2, [sp, #4]
 8004230:	9600      	str	r6, [sp, #0]
 8004232:	002b      	movs	r3, r5
 8004234:	0022      	movs	r2, r4
 8004236:	f7ff f81d 	bl	8003274 <_ntoa_long>
 800423a:	0003      	movs	r3, r0
 800423c:	65fb      	str	r3, [r7, #92]	@ 0x5c
          if (flags & FLAGS_LONG_LONG) {
 800423e:	e0cf      	b.n	80043e0 <_vsnprintf+0x5c0>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8004240:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004242:	2240      	movs	r2, #64	@ 0x40
 8004244:	4013      	ands	r3, r2
 8004246:	d009      	beq.n	800425c <_vsnprintf+0x43c>
 8004248:	2388      	movs	r3, #136	@ 0x88
 800424a:	18fb      	adds	r3, r7, r3
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	1d1a      	adds	r2, r3, #4
 8004250:	2188      	movs	r1, #136	@ 0x88
 8004252:	1879      	adds	r1, r7, r1
 8004254:	600a      	str	r2, [r1, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	b2db      	uxtb	r3, r3
 800425a:	e015      	b.n	8004288 <_vsnprintf+0x468>
 800425c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800425e:	2280      	movs	r2, #128	@ 0x80
 8004260:	4013      	ands	r3, r2
 8004262:	d009      	beq.n	8004278 <_vsnprintf+0x458>
 8004264:	2388      	movs	r3, #136	@ 0x88
 8004266:	18fb      	adds	r3, r7, r3
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	1d1a      	adds	r2, r3, #4
 800426c:	2188      	movs	r1, #136	@ 0x88
 800426e:	1879      	adds	r1, r7, r1
 8004270:	600a      	str	r2, [r1, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	b21b      	sxth	r3, r3
 8004276:	e007      	b.n	8004288 <_vsnprintf+0x468>
 8004278:	2388      	movs	r3, #136	@ 0x88
 800427a:	18fb      	adds	r3, r7, r3
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	1d1a      	adds	r2, r3, #4
 8004280:	2188      	movs	r1, #136	@ 0x88
 8004282:	1879      	adds	r1, r7, r1
 8004284:	600a      	str	r2, [r1, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	63bb      	str	r3, [r7, #56]	@ 0x38
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800428a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800428c:	17da      	asrs	r2, r3, #31
 800428e:	189b      	adds	r3, r3, r2
 8004290:	4053      	eors	r3, r2
 8004292:	001e      	movs	r6, r3
 8004294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004296:	0fdb      	lsrs	r3, r3, #31
 8004298:	b2da      	uxtb	r2, r3
 800429a:	69fd      	ldr	r5, [r7, #28]
 800429c:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 800429e:	6a39      	ldr	r1, [r7, #32]
 80042a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80042a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042a4:	9305      	str	r3, [sp, #20]
 80042a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042a8:	9304      	str	r3, [sp, #16]
 80042aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042ac:	9303      	str	r3, [sp, #12]
 80042ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042b0:	9302      	str	r3, [sp, #8]
 80042b2:	9201      	str	r2, [sp, #4]
 80042b4:	9600      	str	r6, [sp, #0]
 80042b6:	002b      	movs	r3, r5
 80042b8:	0022      	movs	r2, r4
 80042ba:	f7fe ffdb 	bl	8003274 <_ntoa_long>
 80042be:	0003      	movs	r3, r0
 80042c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
          if (flags & FLAGS_LONG_LONG) {
 80042c2:	e08d      	b.n	80043e0 <_vsnprintf+0x5c0>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 80042c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80042c6:	2380      	movs	r3, #128	@ 0x80
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	4013      	ands	r3, r2
 80042cc:	d02b      	beq.n	8004326 <_vsnprintf+0x506>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80042ce:	2388      	movs	r3, #136	@ 0x88
 80042d0:	18fb      	adds	r3, r7, r3
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3307      	adds	r3, #7
 80042d6:	2207      	movs	r2, #7
 80042d8:	4393      	bics	r3, r2
 80042da:	001a      	movs	r2, r3
 80042dc:	3208      	adds	r2, #8
 80042de:	2188      	movs	r1, #136	@ 0x88
 80042e0:	1879      	adds	r1, r7, r1
 80042e2:	600a      	str	r2, [r1, #0]
 80042e4:	6818      	ldr	r0, [r3, #0]
 80042e6:	6859      	ldr	r1, [r3, #4]
 80042e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042ea:	60bb      	str	r3, [r7, #8]
 80042ec:	2300      	movs	r3, #0
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	69fe      	ldr	r6, [r7, #28]
 80042f2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80042f4:	6a3d      	ldr	r5, [r7, #32]
 80042f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f8:	469c      	mov	ip, r3
 80042fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042fc:	9308      	str	r3, [sp, #32]
 80042fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004300:	9307      	str	r3, [sp, #28]
 8004302:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004304:	9306      	str	r3, [sp, #24]
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	68fc      	ldr	r4, [r7, #12]
 800430a:	9304      	str	r3, [sp, #16]
 800430c:	9405      	str	r4, [sp, #20]
 800430e:	2300      	movs	r3, #0
 8004310:	9302      	str	r3, [sp, #8]
 8004312:	9000      	str	r0, [sp, #0]
 8004314:	9101      	str	r1, [sp, #4]
 8004316:	0033      	movs	r3, r6
 8004318:	0029      	movs	r1, r5
 800431a:	4660      	mov	r0, ip
 800431c:	f7ff f813 	bl	8003346 <_ntoa_long_long>
 8004320:	0003      	movs	r3, r0
 8004322:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004324:	e05c      	b.n	80043e0 <_vsnprintf+0x5c0>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8004326:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004328:	2380      	movs	r3, #128	@ 0x80
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	4013      	ands	r3, r2
 800432e:	d01d      	beq.n	800436c <_vsnprintf+0x54c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8004330:	2388      	movs	r3, #136	@ 0x88
 8004332:	18fb      	adds	r3, r7, r3
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	1d1a      	adds	r2, r3, #4
 8004338:	2188      	movs	r1, #136	@ 0x88
 800433a:	1879      	adds	r1, r7, r1
 800433c:	600a      	str	r2, [r1, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	69fd      	ldr	r5, [r7, #28]
 8004342:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 8004344:	6a39      	ldr	r1, [r7, #32]
 8004346:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004348:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800434a:	9205      	str	r2, [sp, #20]
 800434c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800434e:	9204      	str	r2, [sp, #16]
 8004350:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004352:	9203      	str	r2, [sp, #12]
 8004354:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004356:	9202      	str	r2, [sp, #8]
 8004358:	2200      	movs	r2, #0
 800435a:	9201      	str	r2, [sp, #4]
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	002b      	movs	r3, r5
 8004360:	0022      	movs	r2, r4
 8004362:	f7fe ff87 	bl	8003274 <_ntoa_long>
 8004366:	0003      	movs	r3, r0
 8004368:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800436a:	e039      	b.n	80043e0 <_vsnprintf+0x5c0>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800436c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800436e:	2240      	movs	r2, #64	@ 0x40
 8004370:	4013      	ands	r3, r2
 8004372:	d009      	beq.n	8004388 <_vsnprintf+0x568>
 8004374:	2388      	movs	r3, #136	@ 0x88
 8004376:	18fb      	adds	r3, r7, r3
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	1d1a      	adds	r2, r3, #4
 800437c:	2188      	movs	r1, #136	@ 0x88
 800437e:	1879      	adds	r1, r7, r1
 8004380:	600a      	str	r2, [r1, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	b2db      	uxtb	r3, r3
 8004386:	e015      	b.n	80043b4 <_vsnprintf+0x594>
 8004388:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800438a:	2280      	movs	r2, #128	@ 0x80
 800438c:	4013      	ands	r3, r2
 800438e:	d009      	beq.n	80043a4 <_vsnprintf+0x584>
 8004390:	2388      	movs	r3, #136	@ 0x88
 8004392:	18fb      	adds	r3, r7, r3
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	1d1a      	adds	r2, r3, #4
 8004398:	2188      	movs	r1, #136	@ 0x88
 800439a:	1879      	adds	r1, r7, r1
 800439c:	600a      	str	r2, [r1, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	e007      	b.n	80043b4 <_vsnprintf+0x594>
 80043a4:	2388      	movs	r3, #136	@ 0x88
 80043a6:	18fb      	adds	r3, r7, r3
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	1d1a      	adds	r2, r3, #4
 80043ac:	2188      	movs	r1, #136	@ 0x88
 80043ae:	1879      	adds	r1, r7, r1
 80043b0:	600a      	str	r2, [r1, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80043b6:	69fc      	ldr	r4, [r7, #28]
 80043b8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80043ba:	6a39      	ldr	r1, [r7, #32]
 80043bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80043be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043c0:	9305      	str	r3, [sp, #20]
 80043c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043c4:	9304      	str	r3, [sp, #16]
 80043c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043c8:	9303      	str	r3, [sp, #12]
 80043ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043cc:	9302      	str	r3, [sp, #8]
 80043ce:	2300      	movs	r3, #0
 80043d0:	9301      	str	r3, [sp, #4]
 80043d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	0023      	movs	r3, r4
 80043d8:	f7fe ff4c 	bl	8003274 <_ntoa_long>
 80043dc:	0003      	movs	r3, r0
 80043de:	65fb      	str	r3, [r7, #92]	@ 0x5c
          }
        }
        format++;
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	3301      	adds	r3, #1
 80043e4:	61bb      	str	r3, [r7, #24]
        break;
 80043e6:	e17c      	b.n	80046e2 <_vsnprintf+0x8c2>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	2b46      	cmp	r3, #70	@ 0x46
 80043ee:	d103      	bne.n	80043f8 <_vsnprintf+0x5d8>
 80043f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043f2:	2220      	movs	r2, #32
 80043f4:	4313      	orrs	r3, r2
 80043f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80043f8:	2388      	movs	r3, #136	@ 0x88
 80043fa:	18fb      	adds	r3, r7, r3
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	3307      	adds	r3, #7
 8004400:	2207      	movs	r2, #7
 8004402:	4393      	bics	r3, r2
 8004404:	001a      	movs	r2, r3
 8004406:	3208      	adds	r2, #8
 8004408:	2188      	movs	r1, #136	@ 0x88
 800440a:	1879      	adds	r1, r7, r1
 800440c:	600a      	str	r2, [r1, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	69fe      	ldr	r6, [r7, #28]
 8004414:	6dfd      	ldr	r5, [r7, #92]	@ 0x5c
 8004416:	6a3c      	ldr	r4, [r7, #32]
 8004418:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800441a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800441c:	9104      	str	r1, [sp, #16]
 800441e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004420:	9103      	str	r1, [sp, #12]
 8004422:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8004424:	9102      	str	r1, [sp, #8]
 8004426:	9200      	str	r2, [sp, #0]
 8004428:	9301      	str	r3, [sp, #4]
 800442a:	0033      	movs	r3, r6
 800442c:	002a      	movs	r2, r5
 800442e:	0021      	movs	r1, r4
 8004430:	f7fe fffc 	bl	800342c <_ftoa>
 8004434:	0003      	movs	r3, r0
 8004436:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	3301      	adds	r3, #1
 800443c:	61bb      	str	r3, [r7, #24]
        break;
 800443e:	e150      	b.n	80046e2 <_vsnprintf+0x8c2>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	2b67      	cmp	r3, #103	@ 0x67
 8004446:	d003      	beq.n	8004450 <_vsnprintf+0x630>
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b47      	cmp	r3, #71	@ 0x47
 800444e:	d104      	bne.n	800445a <_vsnprintf+0x63a>
 8004450:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004452:	2280      	movs	r2, #128	@ 0x80
 8004454:	0112      	lsls	r2, r2, #4
 8004456:	4313      	orrs	r3, r2
 8004458:	66fb      	str	r3, [r7, #108]	@ 0x6c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b45      	cmp	r3, #69	@ 0x45
 8004460:	d003      	beq.n	800446a <_vsnprintf+0x64a>
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	2b47      	cmp	r3, #71	@ 0x47
 8004468:	d103      	bne.n	8004472 <_vsnprintf+0x652>
 800446a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800446c:	2220      	movs	r2, #32
 800446e:	4313      	orrs	r3, r2
 8004470:	66fb      	str	r3, [r7, #108]	@ 0x6c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8004472:	2388      	movs	r3, #136	@ 0x88
 8004474:	18fb      	adds	r3, r7, r3
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3307      	adds	r3, #7
 800447a:	2207      	movs	r2, #7
 800447c:	4393      	bics	r3, r2
 800447e:	001a      	movs	r2, r3
 8004480:	3208      	adds	r2, #8
 8004482:	2188      	movs	r1, #136	@ 0x88
 8004484:	1879      	adds	r1, r7, r1
 8004486:	600a      	str	r2, [r1, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	69fe      	ldr	r6, [r7, #28]
 800448e:	6dfd      	ldr	r5, [r7, #92]	@ 0x5c
 8004490:	6a3c      	ldr	r4, [r7, #32]
 8004492:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004494:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004496:	9104      	str	r1, [sp, #16]
 8004498:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800449a:	9103      	str	r1, [sp, #12]
 800449c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800449e:	9102      	str	r1, [sp, #8]
 80044a0:	9200      	str	r2, [sp, #0]
 80044a2:	9301      	str	r3, [sp, #4]
 80044a4:	0033      	movs	r3, r6
 80044a6:	002a      	movs	r2, r5
 80044a8:	0021      	movs	r1, r4
 80044aa:	f7ff f9fd 	bl	80038a8 <_etoa>
 80044ae:	0003      	movs	r3, r0
 80044b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	3301      	adds	r3, #1
 80044b6:	61bb      	str	r3, [r7, #24]
        break;
 80044b8:	e113      	b.n	80046e2 <_vsnprintf+0x8c2>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 80044ba:	2301      	movs	r3, #1
 80044bc:	657b      	str	r3, [r7, #84]	@ 0x54
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 80044be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044c0:	2202      	movs	r2, #2
 80044c2:	4013      	ands	r3, r2
 80044c4:	d10e      	bne.n	80044e4 <_vsnprintf+0x6c4>
          while (l++ < width) {
 80044c6:	e007      	b.n	80044d8 <_vsnprintf+0x6b8>
            out(' ', buffer, idx++, maxlen);
 80044c8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80044ca:	1c53      	adds	r3, r2, #1
 80044cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	6a39      	ldr	r1, [r7, #32]
 80044d2:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80044d4:	2020      	movs	r0, #32
 80044d6:	47a0      	blx	r4
          while (l++ < width) {
 80044d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044da:	1c5a      	adds	r2, r3, #1
 80044dc:	657a      	str	r2, [r7, #84]	@ 0x54
 80044de:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d8f1      	bhi.n	80044c8 <_vsnprintf+0x6a8>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 80044e4:	2388      	movs	r3, #136	@ 0x88
 80044e6:	18fb      	adds	r3, r7, r3
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	1d1a      	adds	r2, r3, #4
 80044ec:	2188      	movs	r1, #136	@ 0x88
 80044ee:	1879      	adds	r1, r7, r1
 80044f0:	600a      	str	r2, [r1, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	b2d8      	uxtb	r0, r3
 80044f6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80044f8:	1c53      	adds	r3, r2, #1
 80044fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	6a39      	ldr	r1, [r7, #32]
 8004500:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8004502:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8004504:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004506:	2202      	movs	r2, #2
 8004508:	4013      	ands	r3, r2
 800450a:	d00e      	beq.n	800452a <_vsnprintf+0x70a>
          while (l++ < width) {
 800450c:	e007      	b.n	800451e <_vsnprintf+0x6fe>
            out(' ', buffer, idx++, maxlen);
 800450e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004510:	1c53      	adds	r3, r2, #1
 8004512:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	6a39      	ldr	r1, [r7, #32]
 8004518:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800451a:	2020      	movs	r0, #32
 800451c:	47a0      	blx	r4
          while (l++ < width) {
 800451e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	657a      	str	r2, [r7, #84]	@ 0x54
 8004524:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004526:	429a      	cmp	r2, r3
 8004528:	d8f1      	bhi.n	800450e <_vsnprintf+0x6ee>
          }
        }
        format++;
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	3301      	adds	r3, #1
 800452e:	61bb      	str	r3, [r7, #24]
        break;
 8004530:	e0d7      	b.n	80046e2 <_vsnprintf+0x8c2>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8004532:	2388      	movs	r3, #136	@ 0x88
 8004534:	18fb      	adds	r3, r7, r3
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	1d1a      	adds	r2, r3, #4
 800453a:	2188      	movs	r1, #136	@ 0x88
 800453c:	1879      	adds	r1, r7, r1
 800453e:	600a      	str	r2, [r1, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	653b      	str	r3, [r7, #80]	@ 0x50
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8004544:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <_vsnprintf+0x72e>
 800454a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800454c:	e001      	b.n	8004552 <_vsnprintf+0x732>
 800454e:	2301      	movs	r3, #1
 8004550:	425b      	negs	r3, r3
 8004552:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004554:	0019      	movs	r1, r3
 8004556:	0010      	movs	r0, r2
 8004558:	f7fe fd12 	bl	8002f80 <_strnlen_s>
 800455c:	0003      	movs	r3, r0
 800455e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8004560:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004562:	2380      	movs	r3, #128	@ 0x80
 8004564:	00db      	lsls	r3, r3, #3
 8004566:	4013      	ands	r3, r2
 8004568:	d005      	beq.n	8004576 <_vsnprintf+0x756>
          l = (l < precision ? l : precision);
 800456a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800456c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800456e:	4293      	cmp	r3, r2
 8004570:	d900      	bls.n	8004574 <_vsnprintf+0x754>
 8004572:	0013      	movs	r3, r2
 8004574:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }
        if (!(flags & FLAGS_LEFT)) {
 8004576:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004578:	2202      	movs	r2, #2
 800457a:	4013      	ands	r3, r2
 800457c:	d11a      	bne.n	80045b4 <_vsnprintf+0x794>
          while (l++ < width) {
 800457e:	e007      	b.n	8004590 <_vsnprintf+0x770>
            out(' ', buffer, idx++, maxlen);
 8004580:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004582:	1c53      	adds	r3, r2, #1
 8004584:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	6a39      	ldr	r1, [r7, #32]
 800458a:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800458c:	2020      	movs	r0, #32
 800458e:	47a0      	blx	r4
          while (l++ < width) {
 8004590:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004592:	1c5a      	adds	r2, r3, #1
 8004594:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004596:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004598:	429a      	cmp	r2, r3
 800459a:	d8f1      	bhi.n	8004580 <_vsnprintf+0x760>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800459c:	e00a      	b.n	80045b4 <_vsnprintf+0x794>
          out(*(p++), buffer, idx++, maxlen);
 800459e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045a0:	1c5a      	adds	r2, r3, #1
 80045a2:	653a      	str	r2, [r7, #80]	@ 0x50
 80045a4:	7818      	ldrb	r0, [r3, #0]
 80045a6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80045a8:	1c53      	adds	r3, r2, #1
 80045aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	6a39      	ldr	r1, [r7, #32]
 80045b0:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80045b2:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80045b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d009      	beq.n	80045d0 <_vsnprintf+0x7b0>
 80045bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80045be:	2380      	movs	r3, #128	@ 0x80
 80045c0:	00db      	lsls	r3, r3, #3
 80045c2:	4013      	ands	r3, r2
 80045c4:	d0eb      	beq.n	800459e <_vsnprintf+0x77e>
 80045c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045c8:	1e5a      	subs	r2, r3, #1
 80045ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1e6      	bne.n	800459e <_vsnprintf+0x77e>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 80045d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045d2:	2202      	movs	r2, #2
 80045d4:	4013      	ands	r3, r2
 80045d6:	d00e      	beq.n	80045f6 <_vsnprintf+0x7d6>
          while (l++ < width) {
 80045d8:	e007      	b.n	80045ea <_vsnprintf+0x7ca>
            out(' ', buffer, idx++, maxlen);
 80045da:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80045dc:	1c53      	adds	r3, r2, #1
 80045de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	6a39      	ldr	r1, [r7, #32]
 80045e4:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80045e6:	2020      	movs	r0, #32
 80045e8:	47a0      	blx	r4
          while (l++ < width) {
 80045ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045ec:	1c5a      	adds	r2, r3, #1
 80045ee:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80045f0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d8f1      	bhi.n	80045da <_vsnprintf+0x7ba>
          }
        }
        format++;
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	3301      	adds	r3, #1
 80045fa:	61bb      	str	r3, [r7, #24]
        break;
 80045fc:	e071      	b.n	80046e2 <_vsnprintf+0x8c2>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 80045fe:	2308      	movs	r3, #8
 8004600:	66bb      	str	r3, [r7, #104]	@ 0x68
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8004602:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004604:	2221      	movs	r2, #33	@ 0x21
 8004606:	4313      	orrs	r3, r2
 8004608:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 800460a:	212b      	movs	r1, #43	@ 0x2b
 800460c:	2318      	movs	r3, #24
 800460e:	18cb      	adds	r3, r1, r3
 8004610:	19db      	adds	r3, r3, r7
 8004612:	2200      	movs	r2, #0
 8004614:	701a      	strb	r2, [r3, #0]
        if (is_ll) {
 8004616:	2318      	movs	r3, #24
 8004618:	18cb      	adds	r3, r1, r3
 800461a:	19db      	adds	r3, r3, r7
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d025      	beq.n	800466e <_vsnprintf+0x84e>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8004622:	2388      	movs	r3, #136	@ 0x88
 8004624:	18fb      	adds	r3, r7, r3
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	1d1a      	adds	r2, r3, #4
 800462a:	2188      	movs	r1, #136	@ 0x88
 800462c:	1879      	adds	r1, r7, r1
 800462e:	600a      	str	r2, [r1, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	603b      	str	r3, [r7, #0]
 8004634:	2300      	movs	r3, #0
 8004636:	607b      	str	r3, [r7, #4]
 8004638:	69fd      	ldr	r5, [r7, #28]
 800463a:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 800463c:	6a39      	ldr	r1, [r7, #32]
 800463e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004640:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004642:	9308      	str	r3, [sp, #32]
 8004644:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004646:	9307      	str	r3, [sp, #28]
 8004648:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800464a:	9306      	str	r3, [sp, #24]
 800464c:	2210      	movs	r2, #16
 800464e:	2300      	movs	r3, #0
 8004650:	9204      	str	r2, [sp, #16]
 8004652:	9305      	str	r3, [sp, #20]
 8004654:	2300      	movs	r3, #0
 8004656:	9302      	str	r3, [sp, #8]
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	9200      	str	r2, [sp, #0]
 800465e:	9301      	str	r3, [sp, #4]
 8004660:	002b      	movs	r3, r5
 8004662:	0022      	movs	r2, r4
 8004664:	f7fe fe6f 	bl	8003346 <_ntoa_long_long>
 8004668:	0003      	movs	r3, r0
 800466a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800466c:	e01c      	b.n	80046a8 <_vsnprintf+0x888>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800466e:	2388      	movs	r3, #136	@ 0x88
 8004670:	18fb      	adds	r3, r7, r3
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	1d1a      	adds	r2, r3, #4
 8004676:	2188      	movs	r1, #136	@ 0x88
 8004678:	1879      	adds	r1, r7, r1
 800467a:	600a      	str	r2, [r1, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	001d      	movs	r5, r3
 8004680:	69fc      	ldr	r4, [r7, #28]
 8004682:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004684:	6a39      	ldr	r1, [r7, #32]
 8004686:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004688:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800468a:	9305      	str	r3, [sp, #20]
 800468c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800468e:	9304      	str	r3, [sp, #16]
 8004690:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004692:	9303      	str	r3, [sp, #12]
 8004694:	2310      	movs	r3, #16
 8004696:	9302      	str	r3, [sp, #8]
 8004698:	2300      	movs	r3, #0
 800469a:	9301      	str	r3, [sp, #4]
 800469c:	9500      	str	r5, [sp, #0]
 800469e:	0023      	movs	r3, r4
 80046a0:	f7fe fde8 	bl	8003274 <_ntoa_long>
 80046a4:	0003      	movs	r3, r0
 80046a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	3301      	adds	r3, #1
 80046ac:	61bb      	str	r3, [r7, #24]
        break;
 80046ae:	e018      	b.n	80046e2 <_vsnprintf+0x8c2>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 80046b0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80046b2:	1c53      	adds	r3, r2, #1
 80046b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	6a39      	ldr	r1, [r7, #32]
 80046ba:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80046bc:	2025      	movs	r0, #37	@ 0x25
 80046be:	47a0      	blx	r4
        format++;
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	3301      	adds	r3, #1
 80046c4:	61bb      	str	r3, [r7, #24]
        break;
 80046c6:	e00c      	b.n	80046e2 <_vsnprintf+0x8c2>

      default :
        out(*format, buffer, idx++, maxlen);
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	7818      	ldrb	r0, [r3, #0]
 80046cc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80046ce:	1c53      	adds	r3, r2, #1
 80046d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	6a39      	ldr	r1, [r7, #32]
 80046d6:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80046d8:	47a0      	blx	r4
        format++;
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	3301      	adds	r3, #1
 80046de:	61bb      	str	r3, [r7, #24]
        break;
 80046e0:	46c0      	nop			@ (mov r8, r8)
  while (*format)
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <_vsnprintf+0x8ce>
 80046ea:	f7ff fbad 	bl	8003e48 <_vsnprintf+0x28>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 80046ee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d302      	bcc.n	80046fc <_vsnprintf+0x8dc>
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	1e5a      	subs	r2, r3, #1
 80046fa:	e000      	b.n	80046fe <_vsnprintf+0x8de>
 80046fc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	6a39      	ldr	r1, [r7, #32]
 8004702:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8004704:	2000      	movs	r0, #0
 8004706:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8004708:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 800470a:	0018      	movs	r0, r3
 800470c:	46bd      	mov	sp, r7
 800470e:	b01c      	add	sp, #112	@ 0x70
 8004710:	bc80      	pop	{r7}
 8004712:	46b8      	mov	r8, r7
 8004714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004716:	46c0      	nop			@ (mov r8, r8)

08004718 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8004718:	b40f      	push	{r0, r1, r2, r3}
 800471a:	b590      	push	{r4, r7, lr}
 800471c:	b087      	sub	sp, #28
 800471e:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8004720:	2324      	movs	r3, #36	@ 0x24
 8004722:	18fb      	adds	r3, r7, r3
 8004724:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8004726:	6a3c      	ldr	r4, [r7, #32]
 8004728:	2301      	movs	r3, #1
 800472a:	425a      	negs	r2, r3
 800472c:	1d39      	adds	r1, r7, #4
 800472e:	4808      	ldr	r0, [pc, #32]	@ (8004750 <printf_+0x38>)
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	0023      	movs	r3, r4
 8004736:	f7ff fb73 	bl	8003e20 <_vsnprintf>
 800473a:	0003      	movs	r3, r0
 800473c:	60fb      	str	r3, [r7, #12]
  va_end(va);
  return ret;
 800473e:	68fb      	ldr	r3, [r7, #12]
}
 8004740:	0018      	movs	r0, r3
 8004742:	46bd      	mov	sp, r7
 8004744:	b005      	add	sp, #20
 8004746:	bc90      	pop	{r4, r7}
 8004748:	bc08      	pop	{r3}
 800474a:	b004      	add	sp, #16
 800474c:	4718      	bx	r3
 800474e:	46c0      	nop			@ (mov r8, r8)
 8004750:	08002f51 	.word	0x08002f51

08004754 <_putchar>:
  va_end(va);
  return ret;
}


void _putchar(char character) {
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	0002      	movs	r2, r0
 800475c:	1dfb      	adds	r3, r7, #7
 800475e:	701a      	strb	r2, [r3, #0]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	while( !( USART2->ISR & USART_ISR_TXE_TXFNF ) ) {};
 8004760:	46c0      	nop			@ (mov r8, r8)
 8004762:	4b06      	ldr	r3, [pc, #24]	@ (800477c <_putchar+0x28>)
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	2280      	movs	r2, #128	@ 0x80
 8004768:	4013      	ands	r3, r2
 800476a:	d0fa      	beq.n	8004762 <_putchar+0xe>
      USART2->TDR = character;
 800476c:	4b03      	ldr	r3, [pc, #12]	@ (800477c <_putchar+0x28>)
 800476e:	1dfa      	adds	r2, r7, #7
 8004770:	7812      	ldrb	r2, [r2, #0]
 8004772:	629a      	str	r2, [r3, #40]	@ 0x28
		
}
 8004774:	46c0      	nop			@ (mov r8, r8)
 8004776:	46bd      	mov	sp, r7
 8004778:	b002      	add	sp, #8
 800477a:	bd80      	pop	{r7, pc}
 800477c:	40004400 	.word	0x40004400

08004780 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004784:	4b19      	ldr	r3, [pc, #100]	@ (80047ec <MX_RTC_Init+0x6c>)
 8004786:	4a1a      	ldr	r2, [pc, #104]	@ (80047f0 <MX_RTC_Init+0x70>)
 8004788:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800478a:	4b18      	ldr	r3, [pc, #96]	@ (80047ec <MX_RTC_Init+0x6c>)
 800478c:	2200      	movs	r2, #0
 800478e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004790:	4b16      	ldr	r3, [pc, #88]	@ (80047ec <MX_RTC_Init+0x6c>)
 8004792:	227f      	movs	r2, #127	@ 0x7f
 8004794:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004796:	4b15      	ldr	r3, [pc, #84]	@ (80047ec <MX_RTC_Init+0x6c>)
 8004798:	22ff      	movs	r2, #255	@ 0xff
 800479a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800479c:	4b13      	ldr	r3, [pc, #76]	@ (80047ec <MX_RTC_Init+0x6c>)
 800479e:	2200      	movs	r2, #0
 80047a0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80047a2:	4b12      	ldr	r3, [pc, #72]	@ (80047ec <MX_RTC_Init+0x6c>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80047a8:	4b10      	ldr	r3, [pc, #64]	@ (80047ec <MX_RTC_Init+0x6c>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80047ae:	4b0f      	ldr	r3, [pc, #60]	@ (80047ec <MX_RTC_Init+0x6c>)
 80047b0:	2280      	movs	r2, #128	@ 0x80
 80047b2:	05d2      	lsls	r2, r2, #23
 80047b4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80047b6:	4b0d      	ldr	r3, [pc, #52]	@ (80047ec <MX_RTC_Init+0x6c>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80047bc:	4b0b      	ldr	r3, [pc, #44]	@ (80047ec <MX_RTC_Init+0x6c>)
 80047be:	2200      	movs	r2, #0
 80047c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80047c2:	4b0a      	ldr	r3, [pc, #40]	@ (80047ec <MX_RTC_Init+0x6c>)
 80047c4:	0018      	movs	r0, r3
 80047c6:	f003 f947 	bl	8007a58 <HAL_RTC_Init>
 80047ca:	1e03      	subs	r3, r0, #0
 80047cc:	d001      	beq.n	80047d2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80047ce:	f7fe fbab 	bl	8002f28 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 60, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80047d2:	4b06      	ldr	r3, [pc, #24]	@ (80047ec <MX_RTC_Init+0x6c>)
 80047d4:	2204      	movs	r2, #4
 80047d6:	213c      	movs	r1, #60	@ 0x3c
 80047d8:	0018      	movs	r0, r3
 80047da:	f003 fa35 	bl	8007c48 <HAL_RTCEx_SetWakeUpTimer>
 80047de:	1e03      	subs	r3, r0, #0
 80047e0:	d001      	beq.n	80047e6 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80047e2:	f7fe fba1 	bl	8002f28 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80047e6:	46c0      	nop			@ (mov r8, r8)
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	200000e8 	.word	0x200000e8
 80047f0:	40002800 	.word	0x40002800

080047f4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80047f4:	b590      	push	{r4, r7, lr}
 80047f6:	b095      	sub	sp, #84	@ 0x54
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80047fc:	240c      	movs	r4, #12
 80047fe:	193b      	adds	r3, r7, r4
 8004800:	0018      	movs	r0, r3
 8004802:	2344      	movs	r3, #68	@ 0x44
 8004804:	001a      	movs	r2, r3
 8004806:	2100      	movs	r1, #0
 8004808:	f004 ff2c 	bl	8009664 <memset>
  if(rtcHandle->Instance==RTC)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a16      	ldr	r2, [pc, #88]	@ (800486c <HAL_RTC_MspInit+0x78>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d126      	bne.n	8004864 <HAL_RTC_MspInit+0x70>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004816:	193b      	adds	r3, r7, r4
 8004818:	2280      	movs	r2, #128	@ 0x80
 800481a:	0212      	lsls	r2, r2, #8
 800481c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800481e:	193b      	adds	r3, r7, r4
 8004820:	2280      	movs	r2, #128	@ 0x80
 8004822:	0092      	lsls	r2, r2, #2
 8004824:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004826:	193b      	adds	r3, r7, r4
 8004828:	0018      	movs	r0, r3
 800482a:	f002 f8e5 	bl	80069f8 <HAL_RCCEx_PeriphCLKConfig>
 800482e:	1e03      	subs	r3, r0, #0
 8004830:	d001      	beq.n	8004836 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8004832:	f7fe fb79 	bl	8002f28 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004836:	4a0e      	ldr	r2, [pc, #56]	@ (8004870 <HAL_RTC_MspInit+0x7c>)
 8004838:	2390      	movs	r3, #144	@ 0x90
 800483a:	58d3      	ldr	r3, [r2, r3]
 800483c:	490c      	ldr	r1, [pc, #48]	@ (8004870 <HAL_RTC_MspInit+0x7c>)
 800483e:	2280      	movs	r2, #128	@ 0x80
 8004840:	0212      	lsls	r2, r2, #8
 8004842:	4313      	orrs	r3, r2
 8004844:	2290      	movs	r2, #144	@ 0x90
 8004846:	508b      	str	r3, [r1, r2]
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8004848:	4b09      	ldr	r3, [pc, #36]	@ (8004870 <HAL_RTC_MspInit+0x7c>)
 800484a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800484c:	4b08      	ldr	r3, [pc, #32]	@ (8004870 <HAL_RTC_MspInit+0x7c>)
 800484e:	2180      	movs	r1, #128	@ 0x80
 8004850:	00c9      	lsls	r1, r1, #3
 8004852:	430a      	orrs	r2, r1
 8004854:	659a      	str	r2, [r3, #88]	@ 0x58
 8004856:	4b06      	ldr	r3, [pc, #24]	@ (8004870 <HAL_RTC_MspInit+0x7c>)
 8004858:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800485a:	2380      	movs	r3, #128	@ 0x80
 800485c:	00db      	lsls	r3, r3, #3
 800485e:	4013      	ands	r3, r2
 8004860:	60bb      	str	r3, [r7, #8]
 8004862:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004864:	46c0      	nop			@ (mov r8, r8)
 8004866:	46bd      	mov	sp, r7
 8004868:	b015      	add	sp, #84	@ 0x54
 800486a:	bd90      	pop	{r4, r7, pc}
 800486c:	40002800 	.word	0x40002800
 8004870:	40021000 	.word	0x40021000

08004874 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004878:	4b1b      	ldr	r3, [pc, #108]	@ (80048e8 <MX_SPI1_Init+0x74>)
 800487a:	4a1c      	ldr	r2, [pc, #112]	@ (80048ec <MX_SPI1_Init+0x78>)
 800487c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800487e:	4b1a      	ldr	r3, [pc, #104]	@ (80048e8 <MX_SPI1_Init+0x74>)
 8004880:	2282      	movs	r2, #130	@ 0x82
 8004882:	0052      	lsls	r2, r2, #1
 8004884:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004886:	4b18      	ldr	r3, [pc, #96]	@ (80048e8 <MX_SPI1_Init+0x74>)
 8004888:	2200      	movs	r2, #0
 800488a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800488c:	4b16      	ldr	r3, [pc, #88]	@ (80048e8 <MX_SPI1_Init+0x74>)
 800488e:	22e0      	movs	r2, #224	@ 0xe0
 8004890:	00d2      	lsls	r2, r2, #3
 8004892:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004894:	4b14      	ldr	r3, [pc, #80]	@ (80048e8 <MX_SPI1_Init+0x74>)
 8004896:	2200      	movs	r2, #0
 8004898:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800489a:	4b13      	ldr	r3, [pc, #76]	@ (80048e8 <MX_SPI1_Init+0x74>)
 800489c:	2200      	movs	r2, #0
 800489e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80048a0:	4b11      	ldr	r3, [pc, #68]	@ (80048e8 <MX_SPI1_Init+0x74>)
 80048a2:	2280      	movs	r2, #128	@ 0x80
 80048a4:	0092      	lsls	r2, r2, #2
 80048a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80048a8:	4b0f      	ldr	r3, [pc, #60]	@ (80048e8 <MX_SPI1_Init+0x74>)
 80048aa:	2210      	movs	r2, #16
 80048ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80048ae:	4b0e      	ldr	r3, [pc, #56]	@ (80048e8 <MX_SPI1_Init+0x74>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80048b4:	4b0c      	ldr	r3, [pc, #48]	@ (80048e8 <MX_SPI1_Init+0x74>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048ba:	4b0b      	ldr	r3, [pc, #44]	@ (80048e8 <MX_SPI1_Init+0x74>)
 80048bc:	2200      	movs	r2, #0
 80048be:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80048c0:	4b09      	ldr	r3, [pc, #36]	@ (80048e8 <MX_SPI1_Init+0x74>)
 80048c2:	2207      	movs	r2, #7
 80048c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80048c6:	4b08      	ldr	r3, [pc, #32]	@ (80048e8 <MX_SPI1_Init+0x74>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80048cc:	4b06      	ldr	r3, [pc, #24]	@ (80048e8 <MX_SPI1_Init+0x74>)
 80048ce:	2208      	movs	r2, #8
 80048d0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80048d2:	4b05      	ldr	r3, [pc, #20]	@ (80048e8 <MX_SPI1_Init+0x74>)
 80048d4:	0018      	movs	r0, r3
 80048d6:	f003 fa39 	bl	8007d4c <HAL_SPI_Init>
 80048da:	1e03      	subs	r3, r0, #0
 80048dc:	d001      	beq.n	80048e2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80048de:	f7fe fb23 	bl	8002f28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80048e2:	46c0      	nop			@ (mov r8, r8)
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	20000118 	.word	0x20000118
 80048ec:	40013000 	.word	0x40013000

080048f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80048f0:	b590      	push	{r4, r7, lr}
 80048f2:	b08b      	sub	sp, #44	@ 0x2c
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048f8:	2414      	movs	r4, #20
 80048fa:	193b      	adds	r3, r7, r4
 80048fc:	0018      	movs	r0, r3
 80048fe:	2314      	movs	r3, #20
 8004900:	001a      	movs	r2, r3
 8004902:	2100      	movs	r1, #0
 8004904:	f004 feae 	bl	8009664 <memset>
  if(spiHandle->Instance==SPI1)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a1b      	ldr	r2, [pc, #108]	@ (800497c <HAL_SPI_MspInit+0x8c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d130      	bne.n	8004974 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004912:	4b1b      	ldr	r3, [pc, #108]	@ (8004980 <HAL_SPI_MspInit+0x90>)
 8004914:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004916:	4b1a      	ldr	r3, [pc, #104]	@ (8004980 <HAL_SPI_MspInit+0x90>)
 8004918:	2180      	movs	r1, #128	@ 0x80
 800491a:	0149      	lsls	r1, r1, #5
 800491c:	430a      	orrs	r2, r1
 800491e:	661a      	str	r2, [r3, #96]	@ 0x60
 8004920:	4b17      	ldr	r3, [pc, #92]	@ (8004980 <HAL_SPI_MspInit+0x90>)
 8004922:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004924:	2380      	movs	r3, #128	@ 0x80
 8004926:	015b      	lsls	r3, r3, #5
 8004928:	4013      	ands	r3, r2
 800492a:	613b      	str	r3, [r7, #16]
 800492c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800492e:	4b14      	ldr	r3, [pc, #80]	@ (8004980 <HAL_SPI_MspInit+0x90>)
 8004930:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004932:	4b13      	ldr	r3, [pc, #76]	@ (8004980 <HAL_SPI_MspInit+0x90>)
 8004934:	2101      	movs	r1, #1
 8004936:	430a      	orrs	r2, r1
 8004938:	64da      	str	r2, [r3, #76]	@ 0x4c
 800493a:	4b11      	ldr	r3, [pc, #68]	@ (8004980 <HAL_SPI_MspInit+0x90>)
 800493c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800493e:	2201      	movs	r2, #1
 8004940:	4013      	ands	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004946:	0021      	movs	r1, r4
 8004948:	187b      	adds	r3, r7, r1
 800494a:	22e0      	movs	r2, #224	@ 0xe0
 800494c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800494e:	187b      	adds	r3, r7, r1
 8004950:	2202      	movs	r2, #2
 8004952:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004954:	187b      	adds	r3, r7, r1
 8004956:	2200      	movs	r2, #0
 8004958:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800495a:	187b      	adds	r3, r7, r1
 800495c:	2200      	movs	r2, #0
 800495e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004960:	187b      	adds	r3, r7, r1
 8004962:	2205      	movs	r2, #5
 8004964:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004966:	187a      	adds	r2, r7, r1
 8004968:	23a0      	movs	r3, #160	@ 0xa0
 800496a:	05db      	lsls	r3, r3, #23
 800496c:	0011      	movs	r1, r2
 800496e:	0018      	movs	r0, r3
 8004970:	f000 feaa 	bl	80056c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004974:	46c0      	nop			@ (mov r8, r8)
 8004976:	46bd      	mov	sp, r7
 8004978:	b00b      	add	sp, #44	@ 0x2c
 800497a:	bd90      	pop	{r4, r7, pc}
 800497c:	40013000 	.word	0x40013000
 8004980:	40021000 	.word	0x40021000

08004984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800498a:	4b0f      	ldr	r3, [pc, #60]	@ (80049c8 <HAL_MspInit+0x44>)
 800498c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800498e:	4b0e      	ldr	r3, [pc, #56]	@ (80049c8 <HAL_MspInit+0x44>)
 8004990:	2180      	movs	r1, #128	@ 0x80
 8004992:	0549      	lsls	r1, r1, #21
 8004994:	430a      	orrs	r2, r1
 8004996:	659a      	str	r2, [r3, #88]	@ 0x58
 8004998:	4b0b      	ldr	r3, [pc, #44]	@ (80049c8 <HAL_MspInit+0x44>)
 800499a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800499c:	2380      	movs	r3, #128	@ 0x80
 800499e:	055b      	lsls	r3, r3, #21
 80049a0:	4013      	ands	r3, r2
 80049a2:	607b      	str	r3, [r7, #4]
 80049a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049a6:	4b08      	ldr	r3, [pc, #32]	@ (80049c8 <HAL_MspInit+0x44>)
 80049a8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80049aa:	4b07      	ldr	r3, [pc, #28]	@ (80049c8 <HAL_MspInit+0x44>)
 80049ac:	2101      	movs	r1, #1
 80049ae:	430a      	orrs	r2, r1
 80049b0:	661a      	str	r2, [r3, #96]	@ 0x60
 80049b2:	4b05      	ldr	r3, [pc, #20]	@ (80049c8 <HAL_MspInit+0x44>)
 80049b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049b6:	2201      	movs	r2, #1
 80049b8:	4013      	ands	r3, r2
 80049ba:	603b      	str	r3, [r7, #0]
 80049bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049be:	46c0      	nop			@ (mov r8, r8)
 80049c0:	46bd      	mov	sp, r7
 80049c2:	b002      	add	sp, #8
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	46c0      	nop			@ (mov r8, r8)
 80049c8:	40021000 	.word	0x40021000

080049cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80049d0:	46c0      	nop			@ (mov r8, r8)
 80049d2:	e7fd      	b.n	80049d0 <NMI_Handler+0x4>

080049d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049d8:	46c0      	nop			@ (mov r8, r8)
 80049da:	e7fd      	b.n	80049d8 <HardFault_Handler+0x4>

080049dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80049e0:	46c0      	nop			@ (mov r8, r8)
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049ea:	46c0      	nop			@ (mov r8, r8)
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049f4:	f000 f966 	bl	8004cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049f8:	46c0      	nop			@ (mov r8, r8)
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
	...

08004a00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004a04:	4b11      	ldr	r3, [pc, #68]	@ (8004a4c <SystemInit+0x4c>)
 8004a06:	2280      	movs	r2, #128	@ 0x80
 8004a08:	0512      	lsls	r2, r2, #20
 8004a0a:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  if (((FLASH->SECR & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)           \
 8004a0c:	4a10      	ldr	r2, [pc, #64]	@ (8004a50 <SystemInit+0x50>)
 8004a0e:	2380      	movs	r3, #128	@ 0x80
 8004a10:	58d2      	ldr	r2, [r2, r3]
 8004a12:	2380      	movs	r3, #128	@ 0x80
 8004a14:	025b      	lsls	r3, r3, #9
 8004a16:	401a      	ands	r2, r3
 8004a18:	2380      	movs	r3, #128	@ 0x80
 8004a1a:	025b      	lsls	r3, r3, #9
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d112      	bne.n	8004a46 <SystemInit+0x46>
      && (((FLASH->OPTR & FLASH_OPTR_RDP) != 0xCCU)                            \
 8004a20:	4b0b      	ldr	r3, [pc, #44]	@ (8004a50 <SystemInit+0x50>)
 8004a22:	6a1b      	ldr	r3, [r3, #32]
 8004a24:	22ff      	movs	r2, #255	@ 0xff
 8004a26:	4013      	ands	r3, r2
 8004a28:	2bcc      	cmp	r3, #204	@ 0xcc
 8004a2a:	d00c      	beq.n	8004a46 <SystemInit+0x46>
          && ((FLASH->OPTR & FLASH_OPTR_RDP) != 0xAAU)))
 8004a2c:	4b08      	ldr	r3, [pc, #32]	@ (8004a50 <SystemInit+0x50>)
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	22ff      	movs	r2, #255	@ 0xff
 8004a32:	4013      	ands	r3, r2
 8004a34:	2baa      	cmp	r3, #170	@ 0xaa
 8004a36:	d006      	beq.n	8004a46 <SystemInit+0x46>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 8004a38:	4b05      	ldr	r3, [pc, #20]	@ (8004a50 <SystemInit+0x50>)
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	4b04      	ldr	r3, [pc, #16]	@ (8004a50 <SystemInit+0x50>)
 8004a3e:	2180      	movs	r1, #128	@ 0x80
 8004a40:	02c9      	lsls	r1, r1, #11
 8004a42:	430a      	orrs	r2, r1
 8004a44:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 8004a46:	46c0      	nop			@ (mov r8, r8)
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	e000ed00 	.word	0xe000ed00
 8004a50:	40022000 	.word	0x40022000

08004a54 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004a58:	4b22      	ldr	r3, [pc, #136]	@ (8004ae4 <MX_USART2_UART_Init+0x90>)
 8004a5a:	4a23      	ldr	r2, [pc, #140]	@ (8004ae8 <MX_USART2_UART_Init+0x94>)
 8004a5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8004a5e:	4b21      	ldr	r3, [pc, #132]	@ (8004ae4 <MX_USART2_UART_Init+0x90>)
 8004a60:	4a22      	ldr	r2, [pc, #136]	@ (8004aec <MX_USART2_UART_Init+0x98>)
 8004a62:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004a64:	4b1f      	ldr	r3, [pc, #124]	@ (8004ae4 <MX_USART2_UART_Init+0x90>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ae4 <MX_USART2_UART_Init+0x90>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004a70:	4b1c      	ldr	r3, [pc, #112]	@ (8004ae4 <MX_USART2_UART_Init+0x90>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004a76:	4b1b      	ldr	r3, [pc, #108]	@ (8004ae4 <MX_USART2_UART_Init+0x90>)
 8004a78:	220c      	movs	r2, #12
 8004a7a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a7c:	4b19      	ldr	r3, [pc, #100]	@ (8004ae4 <MX_USART2_UART_Init+0x90>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a82:	4b18      	ldr	r3, [pc, #96]	@ (8004ae4 <MX_USART2_UART_Init+0x90>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004a88:	4b16      	ldr	r3, [pc, #88]	@ (8004ae4 <MX_USART2_UART_Init+0x90>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004a8e:	4b15      	ldr	r3, [pc, #84]	@ (8004ae4 <MX_USART2_UART_Init+0x90>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004a94:	4b13      	ldr	r3, [pc, #76]	@ (8004ae4 <MX_USART2_UART_Init+0x90>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004a9a:	4b12      	ldr	r3, [pc, #72]	@ (8004ae4 <MX_USART2_UART_Init+0x90>)
 8004a9c:	0018      	movs	r0, r3
 8004a9e:	f004 f86b 	bl	8008b78 <HAL_UART_Init>
 8004aa2:	1e03      	subs	r3, r0, #0
 8004aa4:	d001      	beq.n	8004aaa <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8004aa6:	f7fe fa3f 	bl	8002f28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8004ae4 <MX_USART2_UART_Init+0x90>)
 8004aac:	2100      	movs	r1, #0
 8004aae:	0018      	movs	r0, r3
 8004ab0:	f004 fcf8 	bl	80094a4 <HAL_UARTEx_SetTxFifoThreshold>
 8004ab4:	1e03      	subs	r3, r0, #0
 8004ab6:	d001      	beq.n	8004abc <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8004ab8:	f7fe fa36 	bl	8002f28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004abc:	4b09      	ldr	r3, [pc, #36]	@ (8004ae4 <MX_USART2_UART_Init+0x90>)
 8004abe:	2100      	movs	r1, #0
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f004 fd2f 	bl	8009524 <HAL_UARTEx_SetRxFifoThreshold>
 8004ac6:	1e03      	subs	r3, r0, #0
 8004ac8:	d001      	beq.n	8004ace <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8004aca:	f7fe fa2d 	bl	8002f28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004ace:	4b05      	ldr	r3, [pc, #20]	@ (8004ae4 <MX_USART2_UART_Init+0x90>)
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	f004 fcad 	bl	8009430 <HAL_UARTEx_DisableFifoMode>
 8004ad6:	1e03      	subs	r3, r0, #0
 8004ad8:	d001      	beq.n	8004ade <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8004ada:	f7fe fa25 	bl	8002f28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004ade:	46c0      	nop			@ (mov r8, r8)
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	2000017c 	.word	0x2000017c
 8004ae8:	40004400 	.word	0x40004400
 8004aec:	000f4240 	.word	0x000f4240

08004af0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004af0:	b590      	push	{r4, r7, lr}
 8004af2:	b09b      	sub	sp, #108	@ 0x6c
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004af8:	2354      	movs	r3, #84	@ 0x54
 8004afa:	18fb      	adds	r3, r7, r3
 8004afc:	0018      	movs	r0, r3
 8004afe:	2314      	movs	r3, #20
 8004b00:	001a      	movs	r2, r3
 8004b02:	2100      	movs	r1, #0
 8004b04:	f004 fdae 	bl	8009664 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b08:	2410      	movs	r4, #16
 8004b0a:	193b      	adds	r3, r7, r4
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	2344      	movs	r3, #68	@ 0x44
 8004b10:	001a      	movs	r2, r3
 8004b12:	2100      	movs	r1, #0
 8004b14:	f004 fda6 	bl	8009664 <memset>
  if(uartHandle->Instance==USART2)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a22      	ldr	r2, [pc, #136]	@ (8004ba8 <HAL_UART_MspInit+0xb8>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d13e      	bne.n	8004ba0 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004b22:	193b      	adds	r3, r7, r4
 8004b24:	2202      	movs	r2, #2
 8004b26:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004b28:	193b      	adds	r3, r7, r4
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b2e:	193b      	adds	r3, r7, r4
 8004b30:	0018      	movs	r0, r3
 8004b32:	f001 ff61 	bl	80069f8 <HAL_RCCEx_PeriphCLKConfig>
 8004b36:	1e03      	subs	r3, r0, #0
 8004b38:	d001      	beq.n	8004b3e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004b3a:	f7fe f9f5 	bl	8002f28 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8004bac <HAL_UART_MspInit+0xbc>)
 8004b40:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004b42:	4b1a      	ldr	r3, [pc, #104]	@ (8004bac <HAL_UART_MspInit+0xbc>)
 8004b44:	2180      	movs	r1, #128	@ 0x80
 8004b46:	0289      	lsls	r1, r1, #10
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	659a      	str	r2, [r3, #88]	@ 0x58
 8004b4c:	4b17      	ldr	r3, [pc, #92]	@ (8004bac <HAL_UART_MspInit+0xbc>)
 8004b4e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004b50:	2380      	movs	r3, #128	@ 0x80
 8004b52:	029b      	lsls	r3, r3, #10
 8004b54:	4013      	ands	r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b5a:	4b14      	ldr	r3, [pc, #80]	@ (8004bac <HAL_UART_MspInit+0xbc>)
 8004b5c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b5e:	4b13      	ldr	r3, [pc, #76]	@ (8004bac <HAL_UART_MspInit+0xbc>)
 8004b60:	2101      	movs	r1, #1
 8004b62:	430a      	orrs	r2, r1
 8004b64:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004b66:	4b11      	ldr	r3, [pc, #68]	@ (8004bac <HAL_UART_MspInit+0xbc>)
 8004b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	60bb      	str	r3, [r7, #8]
 8004b70:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004b72:	2154      	movs	r1, #84	@ 0x54
 8004b74:	187b      	adds	r3, r7, r1
 8004b76:	220c      	movs	r2, #12
 8004b78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b7a:	187b      	adds	r3, r7, r1
 8004b7c:	2202      	movs	r2, #2
 8004b7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b80:	187b      	adds	r3, r7, r1
 8004b82:	2200      	movs	r2, #0
 8004b84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b86:	187b      	adds	r3, r7, r1
 8004b88:	2200      	movs	r2, #0
 8004b8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004b8c:	187b      	adds	r3, r7, r1
 8004b8e:	2207      	movs	r2, #7
 8004b90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b92:	187a      	adds	r2, r7, r1
 8004b94:	23a0      	movs	r3, #160	@ 0xa0
 8004b96:	05db      	lsls	r3, r3, #23
 8004b98:	0011      	movs	r1, r2
 8004b9a:	0018      	movs	r0, r3
 8004b9c:	f000 fd94 	bl	80056c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004ba0:	46c0      	nop			@ (mov r8, r8)
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	b01b      	add	sp, #108	@ 0x6c
 8004ba6:	bd90      	pop	{r4, r7, pc}
 8004ba8:	40004400 	.word	0x40004400
 8004bac:	40021000 	.word	0x40021000

08004bb0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004bb0:	480d      	ldr	r0, [pc, #52]	@ (8004be8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004bb2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004bb4:	f7ff ff24 	bl	8004a00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004bb8:	480c      	ldr	r0, [pc, #48]	@ (8004bec <LoopForever+0x6>)
  ldr r1, =_edata
 8004bba:	490d      	ldr	r1, [pc, #52]	@ (8004bf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004bbc:	4a0d      	ldr	r2, [pc, #52]	@ (8004bf4 <LoopForever+0xe>)
  movs r3, #0
 8004bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004bc0:	e002      	b.n	8004bc8 <LoopCopyDataInit>

08004bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004bc6:	3304      	adds	r3, #4

08004bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004bcc:	d3f9      	bcc.n	8004bc2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004bce:	4a0a      	ldr	r2, [pc, #40]	@ (8004bf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004bd0:	4c0a      	ldr	r4, [pc, #40]	@ (8004bfc <LoopForever+0x16>)
  movs r3, #0
 8004bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004bd4:	e001      	b.n	8004bda <LoopFillZerobss>

08004bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004bd8:	3204      	adds	r2, #4

08004bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004bdc:	d3fb      	bcc.n	8004bd6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004bde:	f004 fd49 	bl	8009674 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004be2:	f7fe f8f3 	bl	8002dcc <main>

08004be6 <LoopForever>:

LoopForever:
  b LoopForever
 8004be6:	e7fe      	b.n	8004be6 <LoopForever>
  ldr   r0, =_estack
 8004be8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8004bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004bf0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8004bf4:	08009b2c 	.word	0x08009b2c
  ldr r2, =_sbss
 8004bf8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8004bfc:	20000214 	.word	0x20000214

08004c00 <ADC_COMP1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004c00:	e7fe      	b.n	8004c00 <ADC_COMP1_2_IRQHandler>

08004c02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b082      	sub	sp, #8
 8004c06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004c08:	1dfb      	adds	r3, r7, #7
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004c0e:	2003      	movs	r0, #3
 8004c10:	f000 f80e 	bl	8004c30 <HAL_InitTick>
 8004c14:	1e03      	subs	r3, r0, #0
 8004c16:	d003      	beq.n	8004c20 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8004c18:	1dfb      	adds	r3, r7, #7
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	701a      	strb	r2, [r3, #0]
 8004c1e:	e001      	b.n	8004c24 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004c20:	f7ff feb0 	bl	8004984 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004c24:	1dfb      	adds	r3, r7, #7
 8004c26:	781b      	ldrb	r3, [r3, #0]
}
 8004c28:	0018      	movs	r0, r3
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	b002      	add	sp, #8
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c30:	b590      	push	{r4, r7, lr}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004c38:	230f      	movs	r3, #15
 8004c3a:	18fb      	adds	r3, r7, r3
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8004c40:	4b1d      	ldr	r3, [pc, #116]	@ (8004cb8 <HAL_InitTick+0x88>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d02b      	beq.n	8004ca0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004c48:	4b1c      	ldr	r3, [pc, #112]	@ (8004cbc <HAL_InitTick+0x8c>)
 8004c4a:	681c      	ldr	r4, [r3, #0]
 8004c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8004cb8 <HAL_InitTick+0x88>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	0019      	movs	r1, r3
 8004c52:	23fa      	movs	r3, #250	@ 0xfa
 8004c54:	0098      	lsls	r0, r3, #2
 8004c56:	f7fb fa57 	bl	8000108 <__udivsi3>
 8004c5a:	0003      	movs	r3, r0
 8004c5c:	0019      	movs	r1, r3
 8004c5e:	0020      	movs	r0, r4
 8004c60:	f7fb fa52 	bl	8000108 <__udivsi3>
 8004c64:	0003      	movs	r3, r0
 8004c66:	0018      	movs	r0, r3
 8004c68:	f000 fd21 	bl	80056ae <HAL_SYSTICK_Config>
 8004c6c:	1e03      	subs	r3, r0, #0
 8004c6e:	d112      	bne.n	8004c96 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b03      	cmp	r3, #3
 8004c74:	d80a      	bhi.n	8004c8c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c76:	6879      	ldr	r1, [r7, #4]
 8004c78:	2301      	movs	r3, #1
 8004c7a:	425b      	negs	r3, r3
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	0018      	movs	r0, r3
 8004c80:	f000 fd00 	bl	8005684 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004c84:	4b0e      	ldr	r3, [pc, #56]	@ (8004cc0 <HAL_InitTick+0x90>)
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	e00d      	b.n	8004ca8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004c8c:	230f      	movs	r3, #15
 8004c8e:	18fb      	adds	r3, r7, r3
 8004c90:	2201      	movs	r2, #1
 8004c92:	701a      	strb	r2, [r3, #0]
 8004c94:	e008      	b.n	8004ca8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004c96:	230f      	movs	r3, #15
 8004c98:	18fb      	adds	r3, r7, r3
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	701a      	strb	r2, [r3, #0]
 8004c9e:	e003      	b.n	8004ca8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004ca0:	230f      	movs	r3, #15
 8004ca2:	18fb      	adds	r3, r7, r3
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004ca8:	230f      	movs	r3, #15
 8004caa:	18fb      	adds	r3, r7, r3
 8004cac:	781b      	ldrb	r3, [r3, #0]
}
 8004cae:	0018      	movs	r0, r3
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	b005      	add	sp, #20
 8004cb4:	bd90      	pop	{r4, r7, pc}
 8004cb6:	46c0      	nop			@ (mov r8, r8)
 8004cb8:	2000000c 	.word	0x2000000c
 8004cbc:	20000004 	.word	0x20000004
 8004cc0:	20000008 	.word	0x20000008

08004cc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004cc8:	4b04      	ldr	r3, [pc, #16]	@ (8004cdc <HAL_IncTick+0x18>)
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	4b04      	ldr	r3, [pc, #16]	@ (8004ce0 <HAL_IncTick+0x1c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	18d2      	adds	r2, r2, r3
 8004cd2:	4b02      	ldr	r3, [pc, #8]	@ (8004cdc <HAL_IncTick+0x18>)
 8004cd4:	601a      	str	r2, [r3, #0]
}
 8004cd6:	46c0      	nop			@ (mov r8, r8)
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	20000210 	.word	0x20000210
 8004ce0:	2000000c 	.word	0x2000000c

08004ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8004ce8:	4b02      	ldr	r3, [pc, #8]	@ (8004cf4 <HAL_GetTick+0x10>)
 8004cea:	681b      	ldr	r3, [r3, #0]
}
 8004cec:	0018      	movs	r0, r3
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	46c0      	nop			@ (mov r8, r8)
 8004cf4:	20000210 	.word	0x20000210

08004cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d00:	f7ff fff0 	bl	8004ce4 <HAL_GetTick>
 8004d04:	0003      	movs	r3, r0
 8004d06:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	d004      	beq.n	8004d1c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d12:	4b09      	ldr	r3, [pc, #36]	@ (8004d38 <HAL_Delay+0x40>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	18d3      	adds	r3, r2, r3
 8004d1a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004d1c:	46c0      	nop			@ (mov r8, r8)
 8004d1e:	f7ff ffe1 	bl	8004ce4 <HAL_GetTick>
 8004d22:	0002      	movs	r2, r0
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d8f7      	bhi.n	8004d1e <HAL_Delay+0x26>
  {
  }
}
 8004d2e:	46c0      	nop			@ (mov r8, r8)
 8004d30:	46c0      	nop			@ (mov r8, r8)
 8004d32:	46bd      	mov	sp, r7
 8004d34:	b004      	add	sp, #16
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	2000000c 	.word	0x2000000c

08004d3c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a05      	ldr	r2, [pc, #20]	@ (8004d60 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8004d4c:	401a      	ands	r2, r3
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	431a      	orrs	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	601a      	str	r2, [r3, #0]
}
 8004d56:	46c0      	nop			@ (mov r8, r8)
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	b002      	add	sp, #8
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	46c0      	nop			@ (mov r8, r8)
 8004d60:	fe3fffff 	.word	0xfe3fffff

08004d64 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	23e0      	movs	r3, #224	@ 0xe0
 8004d72:	045b      	lsls	r3, r3, #17
 8004d74:	4013      	ands	r3, r2
}
 8004d76:	0018      	movs	r0, r3
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	b002      	add	sp, #8
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b084      	sub	sp, #16
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	60f8      	str	r0, [r7, #12]
 8004d86:	60b9      	str	r1, [r7, #8]
 8004d88:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	2104      	movs	r1, #4
 8004d92:	400a      	ands	r2, r1
 8004d94:	2107      	movs	r1, #7
 8004d96:	4091      	lsls	r1, r2
 8004d98:	000a      	movs	r2, r1
 8004d9a:	43d2      	mvns	r2, r2
 8004d9c:	401a      	ands	r2, r3
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	2104      	movs	r1, #4
 8004da2:	400b      	ands	r3, r1
 8004da4:	6879      	ldr	r1, [r7, #4]
 8004da6:	4099      	lsls	r1, r3
 8004da8:	000b      	movs	r3, r1
 8004daa:	431a      	orrs	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8004db0:	46c0      	nop			@ (mov r8, r8)
 8004db2:	46bd      	mov	sp, r7
 8004db4:	b004      	add	sp, #16
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	2104      	movs	r1, #4
 8004dca:	400a      	ands	r2, r1
 8004dcc:	2107      	movs	r1, #7
 8004dce:	4091      	lsls	r1, r2
 8004dd0:	000a      	movs	r2, r1
 8004dd2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	2104      	movs	r1, #4
 8004dd8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004dda:	40da      	lsrs	r2, r3
 8004ddc:	0013      	movs	r3, r2
}
 8004dde:	0018      	movs	r0, r3
 8004de0:	46bd      	mov	sp, r7
 8004de2:	b002      	add	sp, #8
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <LL_ADC_REG_SetSequencerRanks>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b084      	sub	sp, #16
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	60f8      	str	r0, [r7, #12]
 8004dee:	60b9      	str	r1, [r7, #8]
 8004df0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	211f      	movs	r1, #31
 8004dfa:	400a      	ands	r2, r1
 8004dfc:	210f      	movs	r1, #15
 8004dfe:	4091      	lsls	r1, r2
 8004e00:	000a      	movs	r2, r1
 8004e02:	43d2      	mvns	r2, r2
 8004e04:	401a      	ands	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	0e9b      	lsrs	r3, r3, #26
 8004e0a:	210f      	movs	r1, #15
 8004e0c:	4019      	ands	r1, r3
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	201f      	movs	r0, #31
 8004e12:	4003      	ands	r3, r0
 8004e14:	4099      	lsls	r1, r3
 8004e16:	000b      	movs	r3, r1
 8004e18:	431a      	orrs	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004e1e:	46c0      	nop			@ (mov r8, r8)
 8004e20:	46bd      	mov	sp, r7
 8004e22:	b004      	add	sp, #16
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <LL_ADC_REG_SetSequencerChAdd>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b082      	sub	sp, #8
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
 8004e2e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	025b      	lsls	r3, r3, #9
 8004e38:	0a5b      	lsrs	r3, r3, #9
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004e40:	46c0      	nop			@ (mov r8, r8)
 8004e42:	46bd      	mov	sp, r7
 8004e44:	b002      	add	sp, #8
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <LL_ADC_REG_SetSequencerChRem>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	0252      	lsls	r2, r2, #9
 8004e5a:	0a52      	lsrs	r2, r2, #9
 8004e5c:	43d2      	mvns	r2, r2
 8004e5e:	401a      	ands	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004e64:	46c0      	nop			@ (mov r8, r8)
 8004e66:	46bd      	mov	sp, r7
 8004e68:	b002      	add	sp, #8
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	0212      	lsls	r2, r2, #8
 8004e80:	43d2      	mvns	r2, r2
 8004e82:	401a      	ands	r2, r3
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	021b      	lsls	r3, r3, #8
 8004e88:	6879      	ldr	r1, [r7, #4]
 8004e8a:	400b      	ands	r3, r1
 8004e8c:	4904      	ldr	r1, [pc, #16]	@ (8004ea0 <LL_ADC_SetChannelSamplingTime+0x34>)
 8004e8e:	400b      	ands	r3, r1
 8004e90:	431a      	orrs	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8004e96:	46c0      	nop			@ (mov r8, r8)
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	b004      	add	sp, #16
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	46c0      	nop			@ (mov r8, r8)
 8004ea0:	7fffff00 	.word	0x7fffff00

08004ea4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	4a05      	ldr	r2, [pc, #20]	@ (8004ec8 <LL_ADC_EnableInternalRegulator+0x24>)
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	2280      	movs	r2, #128	@ 0x80
 8004eb6:	0552      	lsls	r2, r2, #21
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004ebe:	46c0      	nop			@ (mov r8, r8)
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	b002      	add	sp, #8
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	46c0      	nop			@ (mov r8, r8)
 8004ec8:	6fffffe8 	.word	0x6fffffe8

08004ecc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	2380      	movs	r3, #128	@ 0x80
 8004eda:	055b      	lsls	r3, r3, #21
 8004edc:	401a      	ands	r2, r3
 8004ede:	2380      	movs	r3, #128	@ 0x80
 8004ee0:	055b      	lsls	r3, r3, #21
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d101      	bne.n	8004eea <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e000      	b.n	8004eec <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	0018      	movs	r0, r3
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	b002      	add	sp, #8
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	2201      	movs	r2, #1
 8004f02:	4013      	ands	r3, r2
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d101      	bne.n	8004f0c <LL_ADC_IsEnabled+0x18>
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e000      	b.n	8004f0e <LL_ADC_IsEnabled+0x1a>
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	0018      	movs	r0, r3
 8004f10:	46bd      	mov	sp, r7
 8004f12:	b002      	add	sp, #8
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b082      	sub	sp, #8
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	2204      	movs	r2, #4
 8004f24:	4013      	ands	r3, r2
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d101      	bne.n	8004f2e <LL_ADC_REG_IsConversionOngoing+0x18>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e000      	b.n	8004f30 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	0018      	movs	r0, r3
 8004f32:	46bd      	mov	sp, r7
 8004f34:	b002      	add	sp, #8
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b088      	sub	sp, #32
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f40:	231f      	movs	r3, #31
 8004f42:	18fb      	adds	r3, r7, r3
 8004f44:	2200      	movs	r2, #0
 8004f46:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004f50:	2300      	movs	r3, #0
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e17f      	b.n	800525e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10a      	bne.n	8004f7c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	0018      	movs	r0, r3
 8004f6a:	f7fd fd4d 	bl	8002a08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2254      	movs	r2, #84	@ 0x54
 8004f78:	2100      	movs	r1, #0
 8004f7a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	0018      	movs	r0, r3
 8004f82:	f7ff ffa3 	bl	8004ecc <LL_ADC_IsInternalRegulatorEnabled>
 8004f86:	1e03      	subs	r3, r0, #0
 8004f88:	d115      	bne.n	8004fb6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	0018      	movs	r0, r3
 8004f90:	f7ff ff88 	bl	8004ea4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f94:	4bb4      	ldr	r3, [pc, #720]	@ (8005268 <HAL_ADC_Init+0x330>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	49b4      	ldr	r1, [pc, #720]	@ (800526c <HAL_ADC_Init+0x334>)
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	f7fb f8b4 	bl	8000108 <__udivsi3>
 8004fa0:	0003      	movs	r3, r0
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	005b      	lsls	r3, r3, #1
 8004fa6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004fa8:	e002      	b.n	8004fb0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	3b01      	subs	r3, #1
 8004fae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1f9      	bne.n	8004faa <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	0018      	movs	r0, r3
 8004fbc:	f7ff ff86 	bl	8004ecc <LL_ADC_IsInternalRegulatorEnabled>
 8004fc0:	1e03      	subs	r3, r0, #0
 8004fc2:	d10f      	bne.n	8004fe4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fc8:	2210      	movs	r2, #16
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004fdc:	231f      	movs	r3, #31
 8004fde:	18fb      	adds	r3, r7, r3
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	0018      	movs	r0, r3
 8004fea:	f7ff ff94 	bl	8004f16 <LL_ADC_REG_IsConversionOngoing>
 8004fee:	0003      	movs	r3, r0
 8004ff0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ff6:	2210      	movs	r2, #16
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	d000      	beq.n	8004ffe <HAL_ADC_Init+0xc6>
 8004ffc:	e122      	b.n	8005244 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d000      	beq.n	8005006 <HAL_ADC_Init+0xce>
 8005004:	e11e      	b.n	8005244 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800500a:	4a99      	ldr	r2, [pc, #612]	@ (8005270 <HAL_ADC_Init+0x338>)
 800500c:	4013      	ands	r3, r2
 800500e:	2202      	movs	r2, #2
 8005010:	431a      	orrs	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	0018      	movs	r0, r3
 800501c:	f7ff ff6a 	bl	8004ef4 <LL_ADC_IsEnabled>
 8005020:	1e03      	subs	r3, r0, #0
 8005022:	d000      	beq.n	8005026 <HAL_ADC_Init+0xee>
 8005024:	e0ad      	b.n	8005182 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	7e1b      	ldrb	r3, [r3, #24]
 800502e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8005030:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	7e5b      	ldrb	r3, [r3, #25]
 8005036:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005038:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	7e9b      	ldrb	r3, [r3, #26]
 800503e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005040:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005046:	2b00      	cmp	r3, #0
 8005048:	d002      	beq.n	8005050 <HAL_ADC_Init+0x118>
 800504a:	2380      	movs	r3, #128	@ 0x80
 800504c:	015b      	lsls	r3, r3, #5
 800504e:	e000      	b.n	8005052 <HAL_ADC_Init+0x11a>
 8005050:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005052:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005058:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	2b00      	cmp	r3, #0
 8005060:	da04      	bge.n	800506c <HAL_ADC_Init+0x134>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	005b      	lsls	r3, r3, #1
 8005068:	085b      	lsrs	r3, r3, #1
 800506a:	e001      	b.n	8005070 <HAL_ADC_Init+0x138>
 800506c:	2380      	movs	r3, #128	@ 0x80
 800506e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8005070:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	212c      	movs	r1, #44	@ 0x2c
 8005076:	5c5b      	ldrb	r3, [r3, r1]
 8005078:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800507a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	4313      	orrs	r3, r2
 8005080:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2220      	movs	r2, #32
 8005086:	5c9b      	ldrb	r3, [r3, r2]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d115      	bne.n	80050b8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	7e9b      	ldrb	r3, [r3, #26]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d105      	bne.n	80050a0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	2280      	movs	r2, #128	@ 0x80
 8005098:	0252      	lsls	r2, r2, #9
 800509a:	4313      	orrs	r3, r2
 800509c:	61bb      	str	r3, [r7, #24]
 800509e:	e00b      	b.n	80050b8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050a4:	2220      	movs	r2, #32
 80050a6:	431a      	orrs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050b0:	2201      	movs	r2, #1
 80050b2:	431a      	orrs	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00a      	beq.n	80050d6 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050c4:	23e0      	movs	r3, #224	@ 0xe0
 80050c6:	005b      	lsls	r3, r3, #1
 80050c8:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80050ce:	4313      	orrs	r3, r2
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	4a65      	ldr	r2, [pc, #404]	@ (8005274 <HAL_ADC_Init+0x33c>)
 80050de:	4013      	ands	r3, r2
 80050e0:	0019      	movs	r1, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	0f9b      	lsrs	r3, r3, #30
 80050f2:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80050f8:	4313      	orrs	r3, r2
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	223c      	movs	r2, #60	@ 0x3c
 8005104:	5c9b      	ldrb	r3, [r3, r2]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d111      	bne.n	800512e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	0f9b      	lsrs	r3, r3, #30
 8005110:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005116:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 800511c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8005122:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	4313      	orrs	r3, r2
 8005128:	2201      	movs	r2, #1
 800512a:	4313      	orrs	r3, r2
 800512c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	4a50      	ldr	r2, [pc, #320]	@ (8005278 <HAL_ADC_Init+0x340>)
 8005136:	4013      	ands	r3, r2
 8005138:	0019      	movs	r1, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	430a      	orrs	r2, r1
 8005142:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	23c0      	movs	r3, #192	@ 0xc0
 800514a:	061b      	lsls	r3, r3, #24
 800514c:	429a      	cmp	r2, r3
 800514e:	d018      	beq.n	8005182 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005154:	2380      	movs	r3, #128	@ 0x80
 8005156:	05db      	lsls	r3, r3, #23
 8005158:	429a      	cmp	r2, r3
 800515a:	d012      	beq.n	8005182 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005160:	2380      	movs	r3, #128	@ 0x80
 8005162:	061b      	lsls	r3, r3, #24
 8005164:	429a      	cmp	r2, r3
 8005166:	d00c      	beq.n	8005182 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8005168:	4b44      	ldr	r3, [pc, #272]	@ (800527c <HAL_ADC_Init+0x344>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a44      	ldr	r2, [pc, #272]	@ (8005280 <HAL_ADC_Init+0x348>)
 800516e:	4013      	ands	r3, r2
 8005170:	0019      	movs	r1, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	23f0      	movs	r3, #240	@ 0xf0
 8005178:	039b      	lsls	r3, r3, #14
 800517a:	401a      	ands	r2, r3
 800517c:	4b3f      	ldr	r3, [pc, #252]	@ (800527c <HAL_ADC_Init+0x344>)
 800517e:	430a      	orrs	r2, r1
 8005180:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6818      	ldr	r0, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800518a:	001a      	movs	r2, r3
 800518c:	2100      	movs	r1, #0
 800518e:	f7ff fdf6 	bl	8004d7e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6818      	ldr	r0, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800519a:	493a      	ldr	r1, [pc, #232]	@ (8005284 <HAL_ADC_Init+0x34c>)
 800519c:	001a      	movs	r2, r3
 800519e:	f7ff fdee 	bl	8004d7e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d109      	bne.n	80051be <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2110      	movs	r1, #16
 80051b6:	4249      	negs	r1, r1
 80051b8:	430a      	orrs	r2, r1
 80051ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80051bc:	e018      	b.n	80051f0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	691a      	ldr	r2, [r3, #16]
 80051c2:	2380      	movs	r3, #128	@ 0x80
 80051c4:	039b      	lsls	r3, r3, #14
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d112      	bne.n	80051f0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	69db      	ldr	r3, [r3, #28]
 80051d4:	3b01      	subs	r3, #1
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	221c      	movs	r2, #28
 80051da:	4013      	ands	r3, r2
 80051dc:	2210      	movs	r2, #16
 80051de:	4252      	negs	r2, r2
 80051e0:	409a      	lsls	r2, r3
 80051e2:	0011      	movs	r1, r2
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2100      	movs	r1, #0
 80051f6:	0018      	movs	r0, r3
 80051f8:	f7ff fdde 	bl	8004db8 <LL_ADC_GetSamplingTimeCommonChannels>
 80051fc:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005202:	429a      	cmp	r2, r3
 8005204:	d10b      	bne.n	800521e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005210:	2203      	movs	r2, #3
 8005212:	4393      	bics	r3, r2
 8005214:	2201      	movs	r2, #1
 8005216:	431a      	orrs	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800521c:	e01c      	b.n	8005258 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005222:	2212      	movs	r2, #18
 8005224:	4393      	bics	r3, r2
 8005226:	2210      	movs	r2, #16
 8005228:	431a      	orrs	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005232:	2201      	movs	r2, #1
 8005234:	431a      	orrs	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800523a:	231f      	movs	r3, #31
 800523c:	18fb      	adds	r3, r7, r3
 800523e:	2201      	movs	r2, #1
 8005240:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005242:	e009      	b.n	8005258 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005248:	2210      	movs	r2, #16
 800524a:	431a      	orrs	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005250:	231f      	movs	r3, #31
 8005252:	18fb      	adds	r3, r7, r3
 8005254:	2201      	movs	r2, #1
 8005256:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8005258:	231f      	movs	r3, #31
 800525a:	18fb      	adds	r3, r7, r3
 800525c:	781b      	ldrb	r3, [r3, #0]
}
 800525e:	0018      	movs	r0, r3
 8005260:	46bd      	mov	sp, r7
 8005262:	b008      	add	sp, #32
 8005264:	bd80      	pop	{r7, pc}
 8005266:	46c0      	nop			@ (mov r8, r8)
 8005268:	20000004 	.word	0x20000004
 800526c:	00030d40 	.word	0x00030d40
 8005270:	fffffefd 	.word	0xfffffefd
 8005274:	ffde0201 	.word	0xffde0201
 8005278:	1ffffc02 	.word	0x1ffffc02
 800527c:	40012708 	.word	0x40012708
 8005280:	ffc3ffff 	.word	0xffc3ffff
 8005284:	7fffff04 	.word	0x7fffff04

08005288 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005288:	b590      	push	{r4, r7, lr}
 800528a:	b08b      	sub	sp, #44	@ 0x2c
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005292:	2327      	movs	r3, #39	@ 0x27
 8005294:	18fb      	adds	r3, r7, r3
 8005296:	2200      	movs	r2, #0
 8005298:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800529a:	2300      	movs	r3, #0
 800529c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2254      	movs	r2, #84	@ 0x54
 80052a2:	5c9b      	ldrb	r3, [r3, r2]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d101      	bne.n	80052ac <HAL_ADC_ConfigChannel+0x24>
 80052a8:	2302      	movs	r3, #2
 80052aa:	e141      	b.n	8005530 <HAL_ADC_ConfigChannel+0x2a8>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2254      	movs	r2, #84	@ 0x54
 80052b0:	2101      	movs	r1, #1
 80052b2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	0018      	movs	r0, r3
 80052ba:	f7ff fe2c 	bl	8004f16 <LL_ADC_REG_IsConversionOngoing>
 80052be:	1e03      	subs	r3, r0, #0
 80052c0:	d000      	beq.n	80052c4 <HAL_ADC_ConfigChannel+0x3c>
 80052c2:	e124      	b.n	800550e <HAL_ADC_ConfigChannel+0x286>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d100      	bne.n	80052ce <HAL_ADC_ConfigChannel+0x46>
 80052cc:	e0d8      	b.n	8005480 <HAL_ADC_ConfigChannel+0x1f8>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	691a      	ldr	r2, [r3, #16]
 80052d2:	2380      	movs	r3, #128	@ 0x80
 80052d4:	061b      	lsls	r3, r3, #24
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d004      	beq.n	80052e4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80052de:	4a96      	ldr	r2, [pc, #600]	@ (8005538 <HAL_ADC_ConfigChannel+0x2b0>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d108      	bne.n	80052f6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	0019      	movs	r1, r3
 80052ee:	0010      	movs	r0, r2
 80052f0:	f7ff fd99 	bl	8004e26 <LL_ADC_REG_SetSequencerChAdd>
 80052f4:	e060      	b.n	80053b8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	211f      	movs	r1, #31
 8005300:	400b      	ands	r3, r1
 8005302:	210f      	movs	r1, #15
 8005304:	4099      	lsls	r1, r3
 8005306:	000b      	movs	r3, r1
 8005308:	43db      	mvns	r3, r3
 800530a:	4013      	ands	r3, r2
 800530c:	001c      	movs	r4, r3
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	025b      	lsls	r3, r3, #9
 8005314:	0a5b      	lsrs	r3, r3, #9
 8005316:	d105      	bne.n	8005324 <HAL_ADC_ConfigChannel+0x9c>
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	0e9b      	lsrs	r3, r3, #26
 800531e:	221f      	movs	r2, #31
 8005320:	401a      	ands	r2, r3
 8005322:	e02e      	b.n	8005382 <HAL_ADC_ConfigChannel+0xfa>
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 800532a:	231f      	movs	r3, #31
 800532c:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	085b      	lsrs	r3, r3, #1
 8005336:	61bb      	str	r3, [r7, #24]
 8005338:	e00e      	b.n	8005358 <HAL_ADC_ConfigChannel+0xd0>
    result <<= 1U;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	2201      	movs	r2, #1
 8005344:	4013      	ands	r3, r2
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	4313      	orrs	r3, r2
 800534a:	613b      	str	r3, [r7, #16]
    s--;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	3b01      	subs	r3, #1
 8005350:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	085b      	lsrs	r3, r3, #1
 8005356:	61bb      	str	r3, [r7, #24]
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1ed      	bne.n	800533a <HAL_ADC_ConfigChannel+0xb2>
  result <<= s;                        /* shift when v's highest bits are zero */
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	409a      	lsls	r2, r3
 8005364:	0013      	movs	r3, r2
 8005366:	613b      	str	r3, [r7, #16]
  return result;
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_ADC_ConfigChannel+0xee>
    return 32U;
 8005372:	2320      	movs	r3, #32
 8005374:	e004      	b.n	8005380 <HAL_ADC_ConfigChannel+0xf8>
  return __builtin_clz(value);
 8005376:	69f8      	ldr	r0, [r7, #28]
 8005378:	f7fb f87a 	bl	8000470 <__clzsi2>
 800537c:	0003      	movs	r3, r0
 800537e:	b2db      	uxtb	r3, r3
 8005380:	001a      	movs	r2, r3
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	211f      	movs	r1, #31
 8005388:	400b      	ands	r3, r1
 800538a:	409a      	lsls	r2, r3
 800538c:	0013      	movs	r3, r2
 800538e:	0022      	movs	r2, r4
 8005390:	431a      	orrs	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	089b      	lsrs	r3, r3, #2
 800539c:	1c5a      	adds	r2, r3, #1
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d808      	bhi.n	80053b8 <HAL_ADC_ConfigChannel+0x130>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6818      	ldr	r0, [r3, #0]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	6859      	ldr	r1, [r3, #4]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	001a      	movs	r2, r3
 80053b4:	f7ff fd17 	bl	8004de6 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6818      	ldr	r0, [r3, #0]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	6819      	ldr	r1, [r3, #0]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	001a      	movs	r2, r3
 80053c6:	f7ff fd51 	bl	8004e6c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	db00      	blt.n	80053d4 <HAL_ADC_ConfigChannel+0x14c>
 80053d2:	e0a6      	b.n	8005522 <HAL_ADC_ConfigChannel+0x29a>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80053d4:	4b59      	ldr	r3, [pc, #356]	@ (800553c <HAL_ADC_ConfigChannel+0x2b4>)
 80053d6:	0018      	movs	r0, r3
 80053d8:	f7ff fcc4 	bl	8004d64 <LL_ADC_GetCommonPathInternalCh>
 80053dc:	0003      	movs	r3, r0
 80053de:	623b      	str	r3, [r7, #32]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a56      	ldr	r2, [pc, #344]	@ (8005540 <HAL_ADC_ConfigChannel+0x2b8>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d122      	bne.n	8005430 <HAL_ADC_ConfigChannel+0x1a8>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80053ea:	6a3a      	ldr	r2, [r7, #32]
 80053ec:	2380      	movs	r3, #128	@ 0x80
 80053ee:	041b      	lsls	r3, r3, #16
 80053f0:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80053f2:	d11d      	bne.n	8005430 <HAL_ADC_ConfigChannel+0x1a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	2280      	movs	r2, #128	@ 0x80
 80053f8:	0412      	lsls	r2, r2, #16
 80053fa:	4313      	orrs	r3, r2
 80053fc:	4a4f      	ldr	r2, [pc, #316]	@ (800553c <HAL_ADC_ConfigChannel+0x2b4>)
 80053fe:	0019      	movs	r1, r3
 8005400:	0010      	movs	r0, r2
 8005402:	f7ff fc9b 	bl	8004d3c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005406:	4b4f      	ldr	r3, [pc, #316]	@ (8005544 <HAL_ADC_ConfigChannel+0x2bc>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	494f      	ldr	r1, [pc, #316]	@ (8005548 <HAL_ADC_ConfigChannel+0x2c0>)
 800540c:	0018      	movs	r0, r3
 800540e:	f7fa fe7b 	bl	8000108 <__udivsi3>
 8005412:	0003      	movs	r3, r0
 8005414:	1c5a      	adds	r2, r3, #1
 8005416:	0013      	movs	r3, r2
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	189b      	adds	r3, r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005420:	e002      	b.n	8005428 <HAL_ADC_ConfigChannel+0x1a0>
          {
            wait_loop_index--;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	3b01      	subs	r3, #1
 8005426:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1f9      	bne.n	8005422 <HAL_ADC_ConfigChannel+0x19a>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800542e:	e078      	b.n	8005522 <HAL_ADC_ConfigChannel+0x29a>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a45      	ldr	r2, [pc, #276]	@ (800554c <HAL_ADC_ConfigChannel+0x2c4>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d10e      	bne.n	8005458 <HAL_ADC_ConfigChannel+0x1d0>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800543a:	6a3a      	ldr	r2, [r7, #32]
 800543c:	2380      	movs	r3, #128	@ 0x80
 800543e:	045b      	lsls	r3, r3, #17
 8005440:	4013      	ands	r3, r2
 8005442:	d109      	bne.n	8005458 <HAL_ADC_ConfigChannel+0x1d0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005444:	6a3b      	ldr	r3, [r7, #32]
 8005446:	2280      	movs	r2, #128	@ 0x80
 8005448:	0452      	lsls	r2, r2, #17
 800544a:	4313      	orrs	r3, r2
 800544c:	4a3b      	ldr	r2, [pc, #236]	@ (800553c <HAL_ADC_ConfigChannel+0x2b4>)
 800544e:	0019      	movs	r1, r3
 8005450:	0010      	movs	r0, r2
 8005452:	f7ff fc73 	bl	8004d3c <LL_ADC_SetCommonPathInternalCh>
 8005456:	e064      	b.n	8005522 <HAL_ADC_ConfigChannel+0x29a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a3c      	ldr	r2, [pc, #240]	@ (8005550 <HAL_ADC_ConfigChannel+0x2c8>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d15f      	bne.n	8005522 <HAL_ADC_ConfigChannel+0x29a>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005462:	6a3a      	ldr	r2, [r7, #32]
 8005464:	2380      	movs	r3, #128	@ 0x80
 8005466:	03db      	lsls	r3, r3, #15
 8005468:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800546a:	d15a      	bne.n	8005522 <HAL_ADC_ConfigChannel+0x29a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	2280      	movs	r2, #128	@ 0x80
 8005470:	03d2      	lsls	r2, r2, #15
 8005472:	4313      	orrs	r3, r2
 8005474:	4a31      	ldr	r2, [pc, #196]	@ (800553c <HAL_ADC_ConfigChannel+0x2b4>)
 8005476:	0019      	movs	r1, r3
 8005478:	0010      	movs	r0, r2
 800547a:	f7ff fc5f 	bl	8004d3c <LL_ADC_SetCommonPathInternalCh>
 800547e:	e050      	b.n	8005522 <HAL_ADC_ConfigChannel+0x29a>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	691a      	ldr	r2, [r3, #16]
 8005484:	2380      	movs	r3, #128	@ 0x80
 8005486:	061b      	lsls	r3, r3, #24
 8005488:	429a      	cmp	r2, r3
 800548a:	d004      	beq.n	8005496 <HAL_ADC_ConfigChannel+0x20e>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005490:	4a29      	ldr	r2, [pc, #164]	@ (8005538 <HAL_ADC_ConfigChannel+0x2b0>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d107      	bne.n	80054a6 <HAL_ADC_ConfigChannel+0x21e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	0019      	movs	r1, r3
 80054a0:	0010      	movs	r0, r2
 80054a2:	f7ff fcd1 	bl	8004e48 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	da39      	bge.n	8005522 <HAL_ADC_ConfigChannel+0x29a>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80054ae:	4b23      	ldr	r3, [pc, #140]	@ (800553c <HAL_ADC_ConfigChannel+0x2b4>)
 80054b0:	0018      	movs	r0, r3
 80054b2:	f7ff fc57 	bl	8004d64 <LL_ADC_GetCommonPathInternalCh>
 80054b6:	0003      	movs	r3, r0
 80054b8:	623b      	str	r3, [r7, #32]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a20      	ldr	r2, [pc, #128]	@ (8005540 <HAL_ADC_ConfigChannel+0x2b8>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d108      	bne.n	80054d6 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80054c4:	6a3b      	ldr	r3, [r7, #32]
 80054c6:	4a23      	ldr	r2, [pc, #140]	@ (8005554 <HAL_ADC_ConfigChannel+0x2cc>)
 80054c8:	4013      	ands	r3, r2
 80054ca:	4a1c      	ldr	r2, [pc, #112]	@ (800553c <HAL_ADC_ConfigChannel+0x2b4>)
 80054cc:	0019      	movs	r1, r3
 80054ce:	0010      	movs	r0, r2
 80054d0:	f7ff fc34 	bl	8004d3c <LL_ADC_SetCommonPathInternalCh>
 80054d4:	e025      	b.n	8005522 <HAL_ADC_ConfigChannel+0x29a>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a1c      	ldr	r2, [pc, #112]	@ (800554c <HAL_ADC_ConfigChannel+0x2c4>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d108      	bne.n	80054f2 <HAL_ADC_ConfigChannel+0x26a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	4a1d      	ldr	r2, [pc, #116]	@ (8005558 <HAL_ADC_ConfigChannel+0x2d0>)
 80054e4:	4013      	ands	r3, r2
 80054e6:	4a15      	ldr	r2, [pc, #84]	@ (800553c <HAL_ADC_ConfigChannel+0x2b4>)
 80054e8:	0019      	movs	r1, r3
 80054ea:	0010      	movs	r0, r2
 80054ec:	f7ff fc26 	bl	8004d3c <LL_ADC_SetCommonPathInternalCh>
 80054f0:	e017      	b.n	8005522 <HAL_ADC_ConfigChannel+0x29a>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a16      	ldr	r2, [pc, #88]	@ (8005550 <HAL_ADC_ConfigChannel+0x2c8>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d112      	bne.n	8005522 <HAL_ADC_ConfigChannel+0x29a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80054fc:	6a3b      	ldr	r3, [r7, #32]
 80054fe:	4a17      	ldr	r2, [pc, #92]	@ (800555c <HAL_ADC_ConfigChannel+0x2d4>)
 8005500:	4013      	ands	r3, r2
 8005502:	4a0e      	ldr	r2, [pc, #56]	@ (800553c <HAL_ADC_ConfigChannel+0x2b4>)
 8005504:	0019      	movs	r1, r3
 8005506:	0010      	movs	r0, r2
 8005508:	f7ff fc18 	bl	8004d3c <LL_ADC_SetCommonPathInternalCh>
 800550c:	e009      	b.n	8005522 <HAL_ADC_ConfigChannel+0x29a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005512:	2220      	movs	r2, #32
 8005514:	431a      	orrs	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800551a:	2327      	movs	r3, #39	@ 0x27
 800551c:	18fb      	adds	r3, r7, r3
 800551e:	2201      	movs	r2, #1
 8005520:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2254      	movs	r2, #84	@ 0x54
 8005526:	2100      	movs	r1, #0
 8005528:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800552a:	2327      	movs	r3, #39	@ 0x27
 800552c:	18fb      	adds	r3, r7, r3
 800552e:	781b      	ldrb	r3, [r3, #0]
}
 8005530:	0018      	movs	r0, r3
 8005532:	46bd      	mov	sp, r7
 8005534:	b00b      	add	sp, #44	@ 0x2c
 8005536:	bd90      	pop	{r4, r7, pc}
 8005538:	80000004 	.word	0x80000004
 800553c:	40012708 	.word	0x40012708
 8005540:	ac000800 	.word	0xac000800
 8005544:	20000004 	.word	0x20000004
 8005548:	00030d40 	.word	0x00030d40
 800554c:	b4002000 	.word	0xb4002000
 8005550:	b0001000 	.word	0xb0001000
 8005554:	ff7fffff 	.word	0xff7fffff
 8005558:	feffffff 	.word	0xfeffffff
 800555c:	ffbfffff 	.word	0xffbfffff

08005560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005560:	b590      	push	{r4, r7, lr}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	0002      	movs	r2, r0
 8005568:	6039      	str	r1, [r7, #0]
 800556a:	1dfb      	adds	r3, r7, #7
 800556c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800556e:	1dfb      	adds	r3, r7, #7
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	2b7f      	cmp	r3, #127	@ 0x7f
 8005574:	d828      	bhi.n	80055c8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005576:	4a2f      	ldr	r2, [pc, #188]	@ (8005634 <__NVIC_SetPriority+0xd4>)
 8005578:	1dfb      	adds	r3, r7, #7
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	b25b      	sxtb	r3, r3
 800557e:	089b      	lsrs	r3, r3, #2
 8005580:	33c0      	adds	r3, #192	@ 0xc0
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	589b      	ldr	r3, [r3, r2]
 8005586:	1dfa      	adds	r2, r7, #7
 8005588:	7812      	ldrb	r2, [r2, #0]
 800558a:	0011      	movs	r1, r2
 800558c:	2203      	movs	r2, #3
 800558e:	400a      	ands	r2, r1
 8005590:	00d2      	lsls	r2, r2, #3
 8005592:	21ff      	movs	r1, #255	@ 0xff
 8005594:	4091      	lsls	r1, r2
 8005596:	000a      	movs	r2, r1
 8005598:	43d2      	mvns	r2, r2
 800559a:	401a      	ands	r2, r3
 800559c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	019b      	lsls	r3, r3, #6
 80055a2:	22ff      	movs	r2, #255	@ 0xff
 80055a4:	401a      	ands	r2, r3
 80055a6:	1dfb      	adds	r3, r7, #7
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	0018      	movs	r0, r3
 80055ac:	2303      	movs	r3, #3
 80055ae:	4003      	ands	r3, r0
 80055b0:	00db      	lsls	r3, r3, #3
 80055b2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80055b4:	481f      	ldr	r0, [pc, #124]	@ (8005634 <__NVIC_SetPriority+0xd4>)
 80055b6:	1dfb      	adds	r3, r7, #7
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	b25b      	sxtb	r3, r3
 80055bc:	089b      	lsrs	r3, r3, #2
 80055be:	430a      	orrs	r2, r1
 80055c0:	33c0      	adds	r3, #192	@ 0xc0
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80055c6:	e031      	b.n	800562c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80055c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005638 <__NVIC_SetPriority+0xd8>)
 80055ca:	1dfb      	adds	r3, r7, #7
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	0019      	movs	r1, r3
 80055d0:	230f      	movs	r3, #15
 80055d2:	400b      	ands	r3, r1
 80055d4:	3b08      	subs	r3, #8
 80055d6:	089b      	lsrs	r3, r3, #2
 80055d8:	3306      	adds	r3, #6
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	18d3      	adds	r3, r2, r3
 80055de:	3304      	adds	r3, #4
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	1dfa      	adds	r2, r7, #7
 80055e4:	7812      	ldrb	r2, [r2, #0]
 80055e6:	0011      	movs	r1, r2
 80055e8:	2203      	movs	r2, #3
 80055ea:	400a      	ands	r2, r1
 80055ec:	00d2      	lsls	r2, r2, #3
 80055ee:	21ff      	movs	r1, #255	@ 0xff
 80055f0:	4091      	lsls	r1, r2
 80055f2:	000a      	movs	r2, r1
 80055f4:	43d2      	mvns	r2, r2
 80055f6:	401a      	ands	r2, r3
 80055f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	019b      	lsls	r3, r3, #6
 80055fe:	22ff      	movs	r2, #255	@ 0xff
 8005600:	401a      	ands	r2, r3
 8005602:	1dfb      	adds	r3, r7, #7
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	0018      	movs	r0, r3
 8005608:	2303      	movs	r3, #3
 800560a:	4003      	ands	r3, r0
 800560c:	00db      	lsls	r3, r3, #3
 800560e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005610:	4809      	ldr	r0, [pc, #36]	@ (8005638 <__NVIC_SetPriority+0xd8>)
 8005612:	1dfb      	adds	r3, r7, #7
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	001c      	movs	r4, r3
 8005618:	230f      	movs	r3, #15
 800561a:	4023      	ands	r3, r4
 800561c:	3b08      	subs	r3, #8
 800561e:	089b      	lsrs	r3, r3, #2
 8005620:	430a      	orrs	r2, r1
 8005622:	3306      	adds	r3, #6
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	18c3      	adds	r3, r0, r3
 8005628:	3304      	adds	r3, #4
 800562a:	601a      	str	r2, [r3, #0]
}
 800562c:	46c0      	nop			@ (mov r8, r8)
 800562e:	46bd      	mov	sp, r7
 8005630:	b003      	add	sp, #12
 8005632:	bd90      	pop	{r4, r7, pc}
 8005634:	e000e100 	.word	0xe000e100
 8005638:	e000ed00 	.word	0xe000ed00

0800563c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	1e5a      	subs	r2, r3, #1
 8005648:	2380      	movs	r3, #128	@ 0x80
 800564a:	045b      	lsls	r3, r3, #17
 800564c:	429a      	cmp	r2, r3
 800564e:	d301      	bcc.n	8005654 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005650:	2301      	movs	r3, #1
 8005652:	e010      	b.n	8005676 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005654:	4b0a      	ldr	r3, [pc, #40]	@ (8005680 <SysTick_Config+0x44>)
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	3a01      	subs	r2, #1
 800565a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800565c:	2301      	movs	r3, #1
 800565e:	425b      	negs	r3, r3
 8005660:	2103      	movs	r1, #3
 8005662:	0018      	movs	r0, r3
 8005664:	f7ff ff7c 	bl	8005560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005668:	4b05      	ldr	r3, [pc, #20]	@ (8005680 <SysTick_Config+0x44>)
 800566a:	2200      	movs	r2, #0
 800566c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800566e:	4b04      	ldr	r3, [pc, #16]	@ (8005680 <SysTick_Config+0x44>)
 8005670:	2207      	movs	r2, #7
 8005672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005674:	2300      	movs	r3, #0
}
 8005676:	0018      	movs	r0, r3
 8005678:	46bd      	mov	sp, r7
 800567a:	b002      	add	sp, #8
 800567c:	bd80      	pop	{r7, pc}
 800567e:	46c0      	nop			@ (mov r8, r8)
 8005680:	e000e010 	.word	0xe000e010

08005684 <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	60b9      	str	r1, [r7, #8]
 800568c:	607a      	str	r2, [r7, #4]
 800568e:	210f      	movs	r1, #15
 8005690:	187b      	adds	r3, r7, r1
 8005692:	1c02      	adds	r2, r0, #0
 8005694:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	187b      	adds	r3, r7, r1
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	b25b      	sxtb	r3, r3
 800569e:	0011      	movs	r1, r2
 80056a0:	0018      	movs	r0, r3
 80056a2:	f7ff ff5d 	bl	8005560 <__NVIC_SetPriority>
}
 80056a6:	46c0      	nop			@ (mov r8, r8)
 80056a8:	46bd      	mov	sp, r7
 80056aa:	b004      	add	sp, #16
 80056ac:	bd80      	pop	{r7, pc}

080056ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b082      	sub	sp, #8
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	0018      	movs	r0, r3
 80056ba:	f7ff ffbf 	bl	800563c <SysTick_Config>
 80056be:	0003      	movs	r3, r0
}
 80056c0:	0018      	movs	r0, r3
 80056c2:	46bd      	mov	sp, r7
 80056c4:	b002      	add	sp, #8
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80056d2:	2300      	movs	r3, #0
 80056d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056d6:	e153      	b.n	8005980 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2101      	movs	r1, #1
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	4091      	lsls	r1, r2
 80056e2:	000a      	movs	r2, r1
 80056e4:	4013      	ands	r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d100      	bne.n	80056f0 <HAL_GPIO_Init+0x28>
 80056ee:	e144      	b.n	800597a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	2203      	movs	r2, #3
 80056f6:	4013      	ands	r3, r2
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d005      	beq.n	8005708 <HAL_GPIO_Init+0x40>
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	2203      	movs	r2, #3
 8005702:	4013      	ands	r3, r2
 8005704:	2b02      	cmp	r3, #2
 8005706:	d130      	bne.n	800576a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	2203      	movs	r2, #3
 8005714:	409a      	lsls	r2, r3
 8005716:	0013      	movs	r3, r2
 8005718:	43da      	mvns	r2, r3
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	4013      	ands	r3, r2
 800571e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	68da      	ldr	r2, [r3, #12]
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	005b      	lsls	r3, r3, #1
 8005728:	409a      	lsls	r2, r3
 800572a:	0013      	movs	r3, r2
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800573e:	2201      	movs	r2, #1
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	409a      	lsls	r2, r3
 8005744:	0013      	movs	r3, r2
 8005746:	43da      	mvns	r2, r3
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	4013      	ands	r3, r2
 800574c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	091b      	lsrs	r3, r3, #4
 8005754:	2201      	movs	r2, #1
 8005756:	401a      	ands	r2, r3
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	409a      	lsls	r2, r3
 800575c:	0013      	movs	r3, r2
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	4313      	orrs	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	2203      	movs	r2, #3
 8005770:	4013      	ands	r3, r2
 8005772:	2b03      	cmp	r3, #3
 8005774:	d017      	beq.n	80057a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	2203      	movs	r2, #3
 8005782:	409a      	lsls	r2, r3
 8005784:	0013      	movs	r3, r2
 8005786:	43da      	mvns	r2, r3
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	4013      	ands	r3, r2
 800578c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	689a      	ldr	r2, [r3, #8]
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	409a      	lsls	r2, r3
 8005798:	0013      	movs	r3, r2
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	4313      	orrs	r3, r2
 800579e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	2203      	movs	r2, #3
 80057ac:	4013      	ands	r3, r2
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d123      	bne.n	80057fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	08da      	lsrs	r2, r3, #3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	3208      	adds	r2, #8
 80057ba:	0092      	lsls	r2, r2, #2
 80057bc:	58d3      	ldr	r3, [r2, r3]
 80057be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	2207      	movs	r2, #7
 80057c4:	4013      	ands	r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	220f      	movs	r2, #15
 80057ca:	409a      	lsls	r2, r3
 80057cc:	0013      	movs	r3, r2
 80057ce:	43da      	mvns	r2, r3
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	4013      	ands	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	691a      	ldr	r2, [r3, #16]
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	2107      	movs	r1, #7
 80057de:	400b      	ands	r3, r1
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	409a      	lsls	r2, r3
 80057e4:	0013      	movs	r3, r2
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	08da      	lsrs	r2, r3, #3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3208      	adds	r2, #8
 80057f4:	0092      	lsls	r2, r2, #2
 80057f6:	6939      	ldr	r1, [r7, #16]
 80057f8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	2203      	movs	r2, #3
 8005806:	409a      	lsls	r2, r3
 8005808:	0013      	movs	r3, r2
 800580a:	43da      	mvns	r2, r3
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	4013      	ands	r3, r2
 8005810:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	2203      	movs	r2, #3
 8005818:	401a      	ands	r2, r3
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	409a      	lsls	r2, r3
 8005820:	0013      	movs	r3, r2
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	4313      	orrs	r3, r2
 8005826:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	685a      	ldr	r2, [r3, #4]
 8005832:	23c0      	movs	r3, #192	@ 0xc0
 8005834:	029b      	lsls	r3, r3, #10
 8005836:	4013      	ands	r3, r2
 8005838:	d100      	bne.n	800583c <HAL_GPIO_Init+0x174>
 800583a:	e09e      	b.n	800597a <HAL_GPIO_Init+0x2b2>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800583c:	4a56      	ldr	r2, [pc, #344]	@ (8005998 <HAL_GPIO_Init+0x2d0>)
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	089b      	lsrs	r3, r3, #2
 8005842:	3318      	adds	r3, #24
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	589b      	ldr	r3, [r3, r2]
 8005848:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2203      	movs	r2, #3
 800584e:	4013      	ands	r3, r2
 8005850:	00db      	lsls	r3, r3, #3
 8005852:	220f      	movs	r2, #15
 8005854:	409a      	lsls	r2, r3
 8005856:	0013      	movs	r3, r2
 8005858:	43da      	mvns	r2, r3
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	4013      	ands	r3, r2
 800585e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	23a0      	movs	r3, #160	@ 0xa0
 8005864:	05db      	lsls	r3, r3, #23
 8005866:	429a      	cmp	r2, r3
 8005868:	d01f      	beq.n	80058aa <HAL_GPIO_Init+0x1e2>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a4b      	ldr	r2, [pc, #300]	@ (800599c <HAL_GPIO_Init+0x2d4>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d019      	beq.n	80058a6 <HAL_GPIO_Init+0x1de>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a4a      	ldr	r2, [pc, #296]	@ (80059a0 <HAL_GPIO_Init+0x2d8>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d013      	beq.n	80058a2 <HAL_GPIO_Init+0x1da>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a49      	ldr	r2, [pc, #292]	@ (80059a4 <HAL_GPIO_Init+0x2dc>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d00d      	beq.n	800589e <HAL_GPIO_Init+0x1d6>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a48      	ldr	r2, [pc, #288]	@ (80059a8 <HAL_GPIO_Init+0x2e0>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d007      	beq.n	800589a <HAL_GPIO_Init+0x1d2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a47      	ldr	r2, [pc, #284]	@ (80059ac <HAL_GPIO_Init+0x2e4>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d101      	bne.n	8005896 <HAL_GPIO_Init+0x1ce>
 8005892:	2305      	movs	r3, #5
 8005894:	e00a      	b.n	80058ac <HAL_GPIO_Init+0x1e4>
 8005896:	2306      	movs	r3, #6
 8005898:	e008      	b.n	80058ac <HAL_GPIO_Init+0x1e4>
 800589a:	2304      	movs	r3, #4
 800589c:	e006      	b.n	80058ac <HAL_GPIO_Init+0x1e4>
 800589e:	2303      	movs	r3, #3
 80058a0:	e004      	b.n	80058ac <HAL_GPIO_Init+0x1e4>
 80058a2:	2302      	movs	r3, #2
 80058a4:	e002      	b.n	80058ac <HAL_GPIO_Init+0x1e4>
 80058a6:	2301      	movs	r3, #1
 80058a8:	e000      	b.n	80058ac <HAL_GPIO_Init+0x1e4>
 80058aa:	2300      	movs	r3, #0
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	2103      	movs	r1, #3
 80058b0:	400a      	ands	r2, r1
 80058b2:	00d2      	lsls	r2, r2, #3
 80058b4:	4093      	lsls	r3, r2
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80058bc:	4936      	ldr	r1, [pc, #216]	@ (8005998 <HAL_GPIO_Init+0x2d0>)
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	089b      	lsrs	r3, r3, #2
 80058c2:	3318      	adds	r3, #24
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80058ca:	4b33      	ldr	r3, [pc, #204]	@ (8005998 <HAL_GPIO_Init+0x2d0>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	43da      	mvns	r2, r3
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	4013      	ands	r3, r2
 80058d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	2380      	movs	r3, #128	@ 0x80
 80058e0:	035b      	lsls	r3, r3, #13
 80058e2:	4013      	ands	r3, r2
 80058e4:	d003      	beq.n	80058ee <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80058ee:	4b2a      	ldr	r3, [pc, #168]	@ (8005998 <HAL_GPIO_Init+0x2d0>)
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80058f4:	4b28      	ldr	r3, [pc, #160]	@ (8005998 <HAL_GPIO_Init+0x2d0>)
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	43da      	mvns	r2, r3
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	4013      	ands	r3, r2
 8005902:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	2380      	movs	r3, #128	@ 0x80
 800590a:	039b      	lsls	r3, r3, #14
 800590c:	4013      	ands	r3, r2
 800590e:	d003      	beq.n	8005918 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	4313      	orrs	r3, r2
 8005916:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005918:	4b1f      	ldr	r3, [pc, #124]	@ (8005998 <HAL_GPIO_Init+0x2d0>)
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800591e:	4a1e      	ldr	r2, [pc, #120]	@ (8005998 <HAL_GPIO_Init+0x2d0>)
 8005920:	2384      	movs	r3, #132	@ 0x84
 8005922:	58d3      	ldr	r3, [r2, r3]
 8005924:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	43da      	mvns	r2, r3
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	4013      	ands	r3, r2
 800592e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	2380      	movs	r3, #128	@ 0x80
 8005936:	029b      	lsls	r3, r3, #10
 8005938:	4013      	ands	r3, r2
 800593a:	d003      	beq.n	8005944 <HAL_GPIO_Init+0x27c>
        {
          temp |= iocurrent;
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	4313      	orrs	r3, r2
 8005942:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005944:	4914      	ldr	r1, [pc, #80]	@ (8005998 <HAL_GPIO_Init+0x2d0>)
 8005946:	2284      	movs	r2, #132	@ 0x84
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800594c:	4a12      	ldr	r2, [pc, #72]	@ (8005998 <HAL_GPIO_Init+0x2d0>)
 800594e:	2380      	movs	r3, #128	@ 0x80
 8005950:	58d3      	ldr	r3, [r2, r3]
 8005952:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	43da      	mvns	r2, r3
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	4013      	ands	r3, r2
 800595c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	2380      	movs	r3, #128	@ 0x80
 8005964:	025b      	lsls	r3, r3, #9
 8005966:	4013      	ands	r3, r2
 8005968:	d003      	beq.n	8005972 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4313      	orrs	r3, r2
 8005970:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005972:	4909      	ldr	r1, [pc, #36]	@ (8005998 <HAL_GPIO_Init+0x2d0>)
 8005974:	2280      	movs	r2, #128	@ 0x80
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	3301      	adds	r3, #1
 800597e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	40da      	lsrs	r2, r3
 8005988:	1e13      	subs	r3, r2, #0
 800598a:	d000      	beq.n	800598e <HAL_GPIO_Init+0x2c6>
 800598c:	e6a4      	b.n	80056d8 <HAL_GPIO_Init+0x10>
  }
}
 800598e:	46c0      	nop			@ (mov r8, r8)
 8005990:	46c0      	nop			@ (mov r8, r8)
 8005992:	46bd      	mov	sp, r7
 8005994:	b006      	add	sp, #24
 8005996:	bd80      	pop	{r7, pc}
 8005998:	40021800 	.word	0x40021800
 800599c:	50000400 	.word	0x50000400
 80059a0:	50000800 	.word	0x50000800
 80059a4:	50000c00 	.word	0x50000c00
 80059a8:	50001000 	.word	0x50001000
 80059ac:	50001400 	.word	0x50001400

080059b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	000a      	movs	r2, r1
 80059ba:	1cbb      	adds	r3, r7, #2
 80059bc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	1cba      	adds	r2, r7, #2
 80059c4:	8812      	ldrh	r2, [r2, #0]
 80059c6:	4013      	ands	r3, r2
 80059c8:	d004      	beq.n	80059d4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80059ca:	230f      	movs	r3, #15
 80059cc:	18fb      	adds	r3, r7, r3
 80059ce:	2201      	movs	r2, #1
 80059d0:	701a      	strb	r2, [r3, #0]
 80059d2:	e003      	b.n	80059dc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80059d4:	230f      	movs	r3, #15
 80059d6:	18fb      	adds	r3, r7, r3
 80059d8:	2200      	movs	r2, #0
 80059da:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80059dc:	230f      	movs	r3, #15
 80059de:	18fb      	adds	r3, r7, r3
 80059e0:	781b      	ldrb	r3, [r3, #0]
}
 80059e2:	0018      	movs	r0, r3
 80059e4:	46bd      	mov	sp, r7
 80059e6:	b004      	add	sp, #16
 80059e8:	bd80      	pop	{r7, pc}

080059ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b082      	sub	sp, #8
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
 80059f2:	0008      	movs	r0, r1
 80059f4:	0011      	movs	r1, r2
 80059f6:	1cbb      	adds	r3, r7, #2
 80059f8:	1c02      	adds	r2, r0, #0
 80059fa:	801a      	strh	r2, [r3, #0]
 80059fc:	1c7b      	adds	r3, r7, #1
 80059fe:	1c0a      	adds	r2, r1, #0
 8005a00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a02:	1c7b      	adds	r3, r7, #1
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d004      	beq.n	8005a14 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005a0a:	1cbb      	adds	r3, r7, #2
 8005a0c:	881a      	ldrh	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005a12:	e003      	b.n	8005a1c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005a14:	1cbb      	adds	r3, r7, #2
 8005a16:	881a      	ldrh	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005a1c:	46c0      	nop			@ (mov r8, r8)
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	b002      	add	sp, #8
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d101      	bne.n	8005a36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e08f      	b.n	8005b56 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2241      	movs	r2, #65	@ 0x41
 8005a3a:	5c9b      	ldrb	r3, [r3, r2]
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d107      	bne.n	8005a52 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2240      	movs	r2, #64	@ 0x40
 8005a46:	2100      	movs	r1, #0
 8005a48:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	0018      	movs	r0, r3
 8005a4e:	f7fd f95b 	bl	8002d08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2241      	movs	r2, #65	@ 0x41
 8005a56:	2124      	movs	r1, #36	@ 0x24
 8005a58:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2101      	movs	r1, #1
 8005a66:	438a      	bics	r2, r1
 8005a68:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	493b      	ldr	r1, [pc, #236]	@ (8005b60 <HAL_I2C_Init+0x13c>)
 8005a74:	400a      	ands	r2, r1
 8005a76:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	689a      	ldr	r2, [r3, #8]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4938      	ldr	r1, [pc, #224]	@ (8005b64 <HAL_I2C_Init+0x140>)
 8005a84:	400a      	ands	r2, r1
 8005a86:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d108      	bne.n	8005aa2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689a      	ldr	r2, [r3, #8]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2180      	movs	r1, #128	@ 0x80
 8005a9a:	0209      	lsls	r1, r1, #8
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	609a      	str	r2, [r3, #8]
 8005aa0:	e007      	b.n	8005ab2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	689a      	ldr	r2, [r3, #8]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2184      	movs	r1, #132	@ 0x84
 8005aac:	0209      	lsls	r1, r1, #8
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d109      	bne.n	8005ace <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2180      	movs	r1, #128	@ 0x80
 8005ac6:	0109      	lsls	r1, r1, #4
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	605a      	str	r2, [r3, #4]
 8005acc:	e007      	b.n	8005ade <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4923      	ldr	r1, [pc, #140]	@ (8005b68 <HAL_I2C_Init+0x144>)
 8005ada:	400a      	ands	r2, r1
 8005adc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	685a      	ldr	r2, [r3, #4]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4920      	ldr	r1, [pc, #128]	@ (8005b6c <HAL_I2C_Init+0x148>)
 8005aea:	430a      	orrs	r2, r1
 8005aec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68da      	ldr	r2, [r3, #12]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	491a      	ldr	r1, [pc, #104]	@ (8005b64 <HAL_I2C_Init+0x140>)
 8005afa:	400a      	ands	r2, r1
 8005afc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	691a      	ldr	r2, [r3, #16]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	431a      	orrs	r2, r3
 8005b08:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	430a      	orrs	r2, r1
 8005b16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	69d9      	ldr	r1, [r3, #28]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a1a      	ldr	r2, [r3, #32]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	430a      	orrs	r2, r1
 8005b26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2101      	movs	r1, #1
 8005b34:	430a      	orrs	r2, r1
 8005b36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2241      	movs	r2, #65	@ 0x41
 8005b42:	2120      	movs	r1, #32
 8005b44:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2242      	movs	r2, #66	@ 0x42
 8005b50:	2100      	movs	r1, #0
 8005b52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	0018      	movs	r0, r3
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	b002      	add	sp, #8
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	46c0      	nop			@ (mov r8, r8)
 8005b60:	f0ffffff 	.word	0xf0ffffff
 8005b64:	ffff7fff 	.word	0xffff7fff
 8005b68:	fffff7ff 	.word	0xfffff7ff
 8005b6c:	02008000 	.word	0x02008000

08005b70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2241      	movs	r2, #65	@ 0x41
 8005b7e:	5c9b      	ldrb	r3, [r3, r2]
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b20      	cmp	r3, #32
 8005b84:	d138      	bne.n	8005bf8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2240      	movs	r2, #64	@ 0x40
 8005b8a:	5c9b      	ldrb	r3, [r3, r2]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d101      	bne.n	8005b94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005b90:	2302      	movs	r3, #2
 8005b92:	e032      	b.n	8005bfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2240      	movs	r2, #64	@ 0x40
 8005b98:	2101      	movs	r1, #1
 8005b9a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2241      	movs	r2, #65	@ 0x41
 8005ba0:	2124      	movs	r1, #36	@ 0x24
 8005ba2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2101      	movs	r1, #1
 8005bb0:	438a      	bics	r2, r1
 8005bb2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4911      	ldr	r1, [pc, #68]	@ (8005c04 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005bc0:	400a      	ands	r2, r1
 8005bc2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6819      	ldr	r1, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2101      	movs	r1, #1
 8005be0:	430a      	orrs	r2, r1
 8005be2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2241      	movs	r2, #65	@ 0x41
 8005be8:	2120      	movs	r1, #32
 8005bea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2240      	movs	r2, #64	@ 0x40
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	e000      	b.n	8005bfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005bf8:	2302      	movs	r3, #2
  }
}
 8005bfa:	0018      	movs	r0, r3
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	b002      	add	sp, #8
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	46c0      	nop			@ (mov r8, r8)
 8005c04:	ffffefff 	.word	0xffffefff

08005c08 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2241      	movs	r2, #65	@ 0x41
 8005c16:	5c9b      	ldrb	r3, [r3, r2]
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b20      	cmp	r3, #32
 8005c1c:	d139      	bne.n	8005c92 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2240      	movs	r2, #64	@ 0x40
 8005c22:	5c9b      	ldrb	r3, [r3, r2]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d101      	bne.n	8005c2c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005c28:	2302      	movs	r3, #2
 8005c2a:	e033      	b.n	8005c94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2240      	movs	r2, #64	@ 0x40
 8005c30:	2101      	movs	r1, #1
 8005c32:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2241      	movs	r2, #65	@ 0x41
 8005c38:	2124      	movs	r1, #36	@ 0x24
 8005c3a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2101      	movs	r1, #1
 8005c48:	438a      	bics	r2, r1
 8005c4a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	4a11      	ldr	r2, [pc, #68]	@ (8005c9c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005c58:	4013      	ands	r3, r2
 8005c5a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	021b      	lsls	r3, r3, #8
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2101      	movs	r1, #1
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2241      	movs	r2, #65	@ 0x41
 8005c82:	2120      	movs	r1, #32
 8005c84:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2240      	movs	r2, #64	@ 0x40
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	e000      	b.n	8005c94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005c92:	2302      	movs	r3, #2
  }
}
 8005c94:	0018      	movs	r0, r3
 8005c96:	46bd      	mov	sp, r7
 8005c98:	b004      	add	sp, #16
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	fffff0ff 	.word	0xfffff0ff

08005ca0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	2380      	movs	r3, #128	@ 0x80
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d137      	bne.n	8005d22 <HAL_PWREx_ControlVoltageScaling+0x82>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005cb2:	4b27      	ldr	r3, [pc, #156]	@ (8005d50 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	23c0      	movs	r3, #192	@ 0xc0
 8005cb8:	00db      	lsls	r3, r3, #3
 8005cba:	401a      	ands	r2, r3
 8005cbc:	2380      	movs	r3, #128	@ 0x80
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d040      	beq.n	8005d46 <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005cc4:	4b22      	ldr	r3, [pc, #136]	@ (8005d50 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a22      	ldr	r2, [pc, #136]	@ (8005d54 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8005cca:	401a      	ands	r2, r3
 8005ccc:	4b20      	ldr	r3, [pc, #128]	@ (8005d50 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8005cce:	2180      	movs	r1, #128	@ 0x80
 8005cd0:	0089      	lsls	r1, r1, #2
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005cd6:	4b20      	ldr	r3, [pc, #128]	@ (8005d58 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2232      	movs	r2, #50	@ 0x32
 8005cdc:	4353      	muls	r3, r2
 8005cde:	491f      	ldr	r1, [pc, #124]	@ (8005d5c <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8005ce0:	0018      	movs	r0, r3
 8005ce2:	f7fa fa11 	bl	8000108 <__udivsi3>
 8005ce6:	0003      	movs	r3, r0
 8005ce8:	3301      	adds	r3, #1
 8005cea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005cec:	e002      	b.n	8005cf4 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        wait_loop_index--;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005cf4:	4b16      	ldr	r3, [pc, #88]	@ (8005d50 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8005cf6:	695a      	ldr	r2, [r3, #20]
 8005cf8:	2380      	movs	r3, #128	@ 0x80
 8005cfa:	00db      	lsls	r3, r3, #3
 8005cfc:	401a      	ands	r2, r3
 8005cfe:	2380      	movs	r3, #128	@ 0x80
 8005d00:	00db      	lsls	r3, r3, #3
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d102      	bne.n	8005d0c <HAL_PWREx_ControlVoltageScaling+0x6c>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1f0      	bne.n	8005cee <HAL_PWREx_ControlVoltageScaling+0x4e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d0c:	4b10      	ldr	r3, [pc, #64]	@ (8005d50 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8005d0e:	695a      	ldr	r2, [r3, #20]
 8005d10:	2380      	movs	r3, #128	@ 0x80
 8005d12:	00db      	lsls	r3, r3, #3
 8005d14:	401a      	ands	r2, r3
 8005d16:	2380      	movs	r3, #128	@ 0x80
 8005d18:	00db      	lsls	r3, r3, #3
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d113      	bne.n	8005d46 <HAL_PWREx_ControlVoltageScaling+0xa6>
      {
        return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e012      	b.n	8005d48 <HAL_PWREx_ControlVoltageScaling+0xa8>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d22:	4b0b      	ldr	r3, [pc, #44]	@ (8005d50 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	23c0      	movs	r3, #192	@ 0xc0
 8005d28:	00db      	lsls	r3, r3, #3
 8005d2a:	401a      	ands	r2, r3
 8005d2c:	2380      	movs	r3, #128	@ 0x80
 8005d2e:	00db      	lsls	r3, r3, #3
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d008      	beq.n	8005d46 <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005d34:	4b06      	ldr	r3, [pc, #24]	@ (8005d50 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a06      	ldr	r2, [pc, #24]	@ (8005d54 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8005d3a:	401a      	ands	r2, r3
 8005d3c:	4b04      	ldr	r3, [pc, #16]	@ (8005d50 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8005d3e:	2180      	movs	r1, #128	@ 0x80
 8005d40:	00c9      	lsls	r1, r1, #3
 8005d42:	430a      	orrs	r2, r1
 8005d44:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	0018      	movs	r0, r3
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	b004      	add	sp, #16
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	40007000 	.word	0x40007000
 8005d54:	fffff9ff 	.word	0xfffff9ff
 8005d58:	20000004 	.word	0x20000004
 8005d5c:	000f4240 	.word	0x000f4240

08005d60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005d64:	4b03      	ldr	r3, [pc, #12]	@ (8005d74 <HAL_PWREx_GetVoltageRange+0x14>)
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	23c0      	movs	r3, #192	@ 0xc0
 8005d6a:	00db      	lsls	r3, r3, #3
 8005d6c:	4013      	ands	r3, r2
}
 8005d6e:	0018      	movs	r0, r3
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	40007000 	.word	0x40007000

08005d78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d78:	b5b0      	push	{r4, r5, r7, lr}
 8005d7a:	b088      	sub	sp, #32
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d80:	4bc9      	ldr	r3, [pc, #804]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	2238      	movs	r2, #56	@ 0x38
 8005d86:	4013      	ands	r3, r2
 8005d88:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d8a:	4bc7      	ldr	r3, [pc, #796]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	2203      	movs	r2, #3
 8005d90:	4013      	ands	r3, r2
 8005d92:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2210      	movs	r2, #16
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	d100      	bne.n	8005da0 <HAL_RCC_OscConfig+0x28>
 8005d9e:	e0ef      	b.n	8005f80 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d007      	beq.n	8005db6 <HAL_RCC_OscConfig+0x3e>
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	2b18      	cmp	r3, #24
 8005daa:	d000      	beq.n	8005dae <HAL_RCC_OscConfig+0x36>
 8005dac:	e093      	b.n	8005ed6 <HAL_RCC_OscConfig+0x15e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d000      	beq.n	8005db6 <HAL_RCC_OscConfig+0x3e>
 8005db4:	e08f      	b.n	8005ed6 <HAL_RCC_OscConfig+0x15e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005db6:	4bbc      	ldr	r3, [pc, #752]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	d006      	beq.n	8005dce <HAL_RCC_OscConfig+0x56>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	69db      	ldr	r3, [r3, #28]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d102      	bne.n	8005dce <HAL_RCC_OscConfig+0x56>
      {
        return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	f000 fbf2 	bl	80065b2 <HAL_RCC_OscConfig+0x83a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005dd2:	4bb5      	ldr	r3, [pc, #724]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2108      	movs	r1, #8
 8005dd8:	400b      	ands	r3, r1
 8005dda:	d004      	beq.n	8005de6 <HAL_RCC_OscConfig+0x6e>
 8005ddc:	4bb2      	ldr	r3, [pc, #712]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	21f0      	movs	r1, #240	@ 0xf0
 8005de2:	400b      	ands	r3, r1
 8005de4:	e005      	b.n	8005df2 <HAL_RCC_OscConfig+0x7a>
 8005de6:	49b0      	ldr	r1, [pc, #704]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005de8:	2394      	movs	r3, #148	@ 0x94
 8005dea:	58cb      	ldr	r3, [r1, r3]
 8005dec:	091b      	lsrs	r3, r3, #4
 8005dee:	21f0      	movs	r1, #240	@ 0xf0
 8005df0:	400b      	ands	r3, r1
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d225      	bcs.n	8005e42 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfa:	0018      	movs	r0, r3
 8005dfc:	f000 fd90 	bl	8006920 <RCC_SetFlashLatencyFromMSIRange>
 8005e00:	1e03      	subs	r3, r0, #0
 8005e02:	d002      	beq.n	8005e0a <HAL_RCC_OscConfig+0x92>
          {
            return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	f000 fbd4 	bl	80065b2 <HAL_RCC_OscConfig+0x83a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e0a:	4ba7      	ldr	r3, [pc, #668]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	4ba6      	ldr	r3, [pc, #664]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005e10:	2108      	movs	r1, #8
 8005e12:	430a      	orrs	r2, r1
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	4ba4      	ldr	r3, [pc, #656]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	22f0      	movs	r2, #240	@ 0xf0
 8005e1c:	4393      	bics	r3, r2
 8005e1e:	0019      	movs	r1, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e24:	4ba0      	ldr	r3, [pc, #640]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005e26:	430a      	orrs	r2, r1
 8005e28:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e2a:	4b9f      	ldr	r3, [pc, #636]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	4a9f      	ldr	r2, [pc, #636]	@ (80060ac <HAL_RCC_OscConfig+0x334>)
 8005e30:	4013      	ands	r3, r2
 8005e32:	0019      	movs	r1, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a1b      	ldr	r3, [r3, #32]
 8005e38:	021a      	lsls	r2, r3, #8
 8005e3a:	4b9b      	ldr	r3, [pc, #620]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	605a      	str	r2, [r3, #4]
 8005e40:	e027      	b.n	8005e92 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e42:	4b99      	ldr	r3, [pc, #612]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	4b98      	ldr	r3, [pc, #608]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005e48:	2108      	movs	r1, #8
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	601a      	str	r2, [r3, #0]
 8005e4e:	4b96      	ldr	r3, [pc, #600]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	22f0      	movs	r2, #240	@ 0xf0
 8005e54:	4393      	bics	r3, r2
 8005e56:	0019      	movs	r1, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e5c:	4b92      	ldr	r3, [pc, #584]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e62:	4b91      	ldr	r3, [pc, #580]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	4a91      	ldr	r2, [pc, #580]	@ (80060ac <HAL_RCC_OscConfig+0x334>)
 8005e68:	4013      	ands	r3, r2
 8005e6a:	0019      	movs	r1, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a1b      	ldr	r3, [r3, #32]
 8005e70:	021a      	lsls	r2, r3, #8
 8005e72:	4b8d      	ldr	r3, [pc, #564]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005e74:	430a      	orrs	r2, r1
 8005e76:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d109      	bne.n	8005e92 <HAL_RCC_OscConfig+0x11a>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e82:	0018      	movs	r0, r3
 8005e84:	f000 fd4c 	bl	8006920 <RCC_SetFlashLatencyFromMSIRange>
 8005e88:	1e03      	subs	r3, r0, #0
 8005e8a:	d002      	beq.n	8005e92 <HAL_RCC_OscConfig+0x11a>
            {
              return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	f000 fb90 	bl	80065b2 <HAL_RCC_OscConfig+0x83a>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8005e92:	f000 fc87 	bl	80067a4 <HAL_RCC_GetSysClockFreq>
 8005e96:	0001      	movs	r1, r0
 8005e98:	4b83      	ldr	r3, [pc, #524]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005e9a:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e9c:	0a1b      	lsrs	r3, r3, #8
 8005e9e:	220f      	movs	r2, #15
 8005ea0:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8005ea2:	4a83      	ldr	r2, [pc, #524]	@ (80060b0 <HAL_RCC_OscConfig+0x338>)
 8005ea4:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ea6:	001a      	movs	r2, r3
 8005ea8:	231f      	movs	r3, #31
 8005eaa:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8005eac:	000a      	movs	r2, r1
 8005eae:	40da      	lsrs	r2, r3
 8005eb0:	4b80      	ldr	r3, [pc, #512]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 8005eb2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005eb4:	4b80      	ldr	r3, [pc, #512]	@ (80060b8 <HAL_RCC_OscConfig+0x340>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	250f      	movs	r5, #15
 8005eba:	197c      	adds	r4, r7, r5
 8005ebc:	0018      	movs	r0, r3
 8005ebe:	f7fe feb7 	bl	8004c30 <HAL_InitTick>
 8005ec2:	0003      	movs	r3, r0
 8005ec4:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 8005ec6:	197b      	adds	r3, r7, r5
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d057      	beq.n	8005f7e <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8005ece:	197b      	adds	r3, r7, r5
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	f000 fb6e 	bl	80065b2 <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	69db      	ldr	r3, [r3, #28]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d035      	beq.n	8005f4a <HAL_RCC_OscConfig+0x1d2>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005ede:	4b72      	ldr	r3, [pc, #456]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	4b71      	ldr	r3, [pc, #452]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005eea:	f7fe fefb 	bl	8004ce4 <HAL_GetTick>
 8005eee:	0003      	movs	r3, r0
 8005ef0:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ef2:	e009      	b.n	8005f08 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8005ef4:	f7fe fef6 	bl	8004ce4 <HAL_GetTick>
 8005ef8:	0002      	movs	r2, r0
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d902      	bls.n	8005f08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	f000 fb55 	bl	80065b2 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005f08:	4b67      	ldr	r3, [pc, #412]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	4013      	ands	r3, r2
 8005f10:	d0f0      	beq.n	8005ef4 <HAL_RCC_OscConfig+0x17c>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f12:	4b65      	ldr	r3, [pc, #404]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	4b64      	ldr	r3, [pc, #400]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005f18:	2108      	movs	r1, #8
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	601a      	str	r2, [r3, #0]
 8005f1e:	4b62      	ldr	r3, [pc, #392]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	22f0      	movs	r2, #240	@ 0xf0
 8005f24:	4393      	bics	r3, r2
 8005f26:	0019      	movs	r1, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f2c:	4b5e      	ldr	r3, [pc, #376]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f32:	4b5d      	ldr	r3, [pc, #372]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	4a5d      	ldr	r2, [pc, #372]	@ (80060ac <HAL_RCC_OscConfig+0x334>)
 8005f38:	4013      	ands	r3, r2
 8005f3a:	0019      	movs	r1, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	021a      	lsls	r2, r3, #8
 8005f42:	4b59      	ldr	r3, [pc, #356]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005f44:	430a      	orrs	r2, r1
 8005f46:	605a      	str	r2, [r3, #4]
 8005f48:	e01a      	b.n	8005f80 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005f4a:	4b57      	ldr	r3, [pc, #348]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	4b56      	ldr	r3, [pc, #344]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005f50:	2101      	movs	r1, #1
 8005f52:	438a      	bics	r2, r1
 8005f54:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f56:	f7fe fec5 	bl	8004ce4 <HAL_GetTick>
 8005f5a:	0003      	movs	r3, r0
 8005f5c:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005f5e:	e008      	b.n	8005f72 <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8005f60:	f7fe fec0 	bl	8004ce4 <HAL_GetTick>
 8005f64:	0002      	movs	r2, r0
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d901      	bls.n	8005f72 <HAL_RCC_OscConfig+0x1fa>
          {
            return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e31f      	b.n	80065b2 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005f72:	4b4d      	ldr	r3, [pc, #308]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2202      	movs	r2, #2
 8005f78:	4013      	ands	r3, r2
 8005f7a:	d1f1      	bne.n	8005f60 <HAL_RCC_OscConfig+0x1e8>
 8005f7c:	e000      	b.n	8005f80 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005f7e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2201      	movs	r2, #1
 8005f86:	4013      	ands	r3, r2
 8005f88:	d100      	bne.n	8005f8c <HAL_RCC_OscConfig+0x214>
 8005f8a:	e065      	b.n	8006058 <HAL_RCC_OscConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	2b10      	cmp	r3, #16
 8005f90:	d005      	beq.n	8005f9e <HAL_RCC_OscConfig+0x226>
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	2b18      	cmp	r3, #24
 8005f96:	d10e      	bne.n	8005fb6 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	2b03      	cmp	r3, #3
 8005f9c:	d10b      	bne.n	8005fb6 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f9e:	4b42      	ldr	r3, [pc, #264]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	2380      	movs	r3, #128	@ 0x80
 8005fa4:	029b      	lsls	r3, r3, #10
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	d055      	beq.n	8006056 <HAL_RCC_OscConfig+0x2de>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d151      	bne.n	8006056 <HAL_RCC_OscConfig+0x2de>
      {
        return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e2fd      	b.n	80065b2 <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	2380      	movs	r3, #128	@ 0x80
 8005fbc:	025b      	lsls	r3, r3, #9
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d107      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x25a>
 8005fc2:	4b39      	ldr	r3, [pc, #228]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	4b38      	ldr	r3, [pc, #224]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005fc8:	2180      	movs	r1, #128	@ 0x80
 8005fca:	0249      	lsls	r1, r1, #9
 8005fcc:	430a      	orrs	r2, r1
 8005fce:	601a      	str	r2, [r3, #0]
 8005fd0:	e013      	b.n	8005ffa <HAL_RCC_OscConfig+0x282>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685a      	ldr	r2, [r3, #4]
 8005fd6:	23a0      	movs	r3, #160	@ 0xa0
 8005fd8:	02db      	lsls	r3, r3, #11
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d107      	bne.n	8005fee <HAL_RCC_OscConfig+0x276>
 8005fde:	4b32      	ldr	r3, [pc, #200]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	4b31      	ldr	r3, [pc, #196]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005fe4:	21a0      	movs	r1, #160	@ 0xa0
 8005fe6:	02c9      	lsls	r1, r1, #11
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	601a      	str	r2, [r3, #0]
 8005fec:	e005      	b.n	8005ffa <HAL_RCC_OscConfig+0x282>
 8005fee:	4b2e      	ldr	r3, [pc, #184]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	4b2d      	ldr	r3, [pc, #180]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8005ff4:	4931      	ldr	r1, [pc, #196]	@ (80060bc <HAL_RCC_OscConfig+0x344>)
 8005ff6:	400a      	ands	r2, r1
 8005ff8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d014      	beq.n	800602c <HAL_RCC_OscConfig+0x2b4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006002:	f7fe fe6f 	bl	8004ce4 <HAL_GetTick>
 8006006:	0003      	movs	r3, r0
 8006008:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800600a:	e008      	b.n	800601e <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800600c:	f7fe fe6a 	bl	8004ce4 <HAL_GetTick>
 8006010:	0002      	movs	r2, r0
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b64      	cmp	r3, #100	@ 0x64
 8006018:	d901      	bls.n	800601e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e2c9      	b.n	80065b2 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800601e:	4b22      	ldr	r3, [pc, #136]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	2380      	movs	r3, #128	@ 0x80
 8006024:	029b      	lsls	r3, r3, #10
 8006026:	4013      	ands	r3, r2
 8006028:	d0f0      	beq.n	800600c <HAL_RCC_OscConfig+0x294>
 800602a:	e015      	b.n	8006058 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800602c:	f7fe fe5a 	bl	8004ce4 <HAL_GetTick>
 8006030:	0003      	movs	r3, r0
 8006032:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006034:	e008      	b.n	8006048 <HAL_RCC_OscConfig+0x2d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8006036:	f7fe fe55 	bl	8004ce4 <HAL_GetTick>
 800603a:	0002      	movs	r2, r0
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	2b64      	cmp	r3, #100	@ 0x64
 8006042:	d901      	bls.n	8006048 <HAL_RCC_OscConfig+0x2d0>
          {
            return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e2b4      	b.n	80065b2 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006048:	4b17      	ldr	r3, [pc, #92]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	2380      	movs	r3, #128	@ 0x80
 800604e:	029b      	lsls	r3, r3, #10
 8006050:	4013      	ands	r3, r2
 8006052:	d1f0      	bne.n	8006036 <HAL_RCC_OscConfig+0x2be>
 8006054:	e000      	b.n	8006058 <HAL_RCC_OscConfig+0x2e0>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006056:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2202      	movs	r2, #2
 800605e:	4013      	ands	r3, r2
 8006060:	d100      	bne.n	8006064 <HAL_RCC_OscConfig+0x2ec>
 8006062:	e074      	b.n	800614e <HAL_RCC_OscConfig+0x3d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	2b08      	cmp	r3, #8
 8006068:	d005      	beq.n	8006076 <HAL_RCC_OscConfig+0x2fe>
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	2b18      	cmp	r3, #24
 800606e:	d129      	bne.n	80060c4 <HAL_RCC_OscConfig+0x34c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	2b02      	cmp	r3, #2
 8006074:	d126      	bne.n	80060c4 <HAL_RCC_OscConfig+0x34c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006076:	4b0c      	ldr	r3, [pc, #48]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	2380      	movs	r3, #128	@ 0x80
 800607c:	00db      	lsls	r3, r3, #3
 800607e:	4013      	ands	r3, r2
 8006080:	d005      	beq.n	800608e <HAL_RCC_OscConfig+0x316>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <HAL_RCC_OscConfig+0x316>
      {
        return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e291      	b.n	80065b2 <HAL_RCC_OscConfig+0x83a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800608e:	4b06      	ldr	r3, [pc, #24]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	4a0b      	ldr	r2, [pc, #44]	@ (80060c0 <HAL_RCC_OscConfig+0x348>)
 8006094:	4013      	ands	r3, r2
 8006096:	0019      	movs	r1, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	061a      	lsls	r2, r3, #24
 800609e:	4b02      	ldr	r3, [pc, #8]	@ (80060a8 <HAL_RCC_OscConfig+0x330>)
 80060a0:	430a      	orrs	r2, r1
 80060a2:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060a4:	e053      	b.n	800614e <HAL_RCC_OscConfig+0x3d6>
 80060a6:	46c0      	nop			@ (mov r8, r8)
 80060a8:	40021000 	.word	0x40021000
 80060ac:	ffff00ff 	.word	0xffff00ff
 80060b0:	08009a28 	.word	0x08009a28
 80060b4:	20000004 	.word	0x20000004
 80060b8:	20000008 	.word	0x20000008
 80060bc:	fffaffff 	.word	0xfffaffff
 80060c0:	80ffffff 	.word	0x80ffffff
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d026      	beq.n	800611a <HAL_RCC_OscConfig+0x3a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060cc:	4bc7      	ldr	r3, [pc, #796]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	4bc6      	ldr	r3, [pc, #792]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 80060d2:	2180      	movs	r1, #128	@ 0x80
 80060d4:	0049      	lsls	r1, r1, #1
 80060d6:	430a      	orrs	r2, r1
 80060d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060da:	f7fe fe03 	bl	8004ce4 <HAL_GetTick>
 80060de:	0003      	movs	r3, r0
 80060e0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060e2:	e008      	b.n	80060f6 <HAL_RCC_OscConfig+0x37e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80060e4:	f7fe fdfe 	bl	8004ce4 <HAL_GetTick>
 80060e8:	0002      	movs	r2, r0
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d901      	bls.n	80060f6 <HAL_RCC_OscConfig+0x37e>
          {
            return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e25d      	b.n	80065b2 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060f6:	4bbd      	ldr	r3, [pc, #756]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	2380      	movs	r3, #128	@ 0x80
 80060fc:	00db      	lsls	r3, r3, #3
 80060fe:	4013      	ands	r3, r2
 8006100:	d0f0      	beq.n	80060e4 <HAL_RCC_OscConfig+0x36c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006102:	4bba      	ldr	r3, [pc, #744]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	4aba      	ldr	r2, [pc, #744]	@ (80063f0 <HAL_RCC_OscConfig+0x678>)
 8006108:	4013      	ands	r3, r2
 800610a:	0019      	movs	r1, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	061a      	lsls	r2, r3, #24
 8006112:	4bb6      	ldr	r3, [pc, #728]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 8006114:	430a      	orrs	r2, r1
 8006116:	605a      	str	r2, [r3, #4]
 8006118:	e019      	b.n	800614e <HAL_RCC_OscConfig+0x3d6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800611a:	4bb4      	ldr	r3, [pc, #720]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	4bb3      	ldr	r3, [pc, #716]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 8006120:	49b4      	ldr	r1, [pc, #720]	@ (80063f4 <HAL_RCC_OscConfig+0x67c>)
 8006122:	400a      	ands	r2, r1
 8006124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006126:	f7fe fddd 	bl	8004ce4 <HAL_GetTick>
 800612a:	0003      	movs	r3, r0
 800612c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800612e:	e008      	b.n	8006142 <HAL_RCC_OscConfig+0x3ca>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006130:	f7fe fdd8 	bl	8004ce4 <HAL_GetTick>
 8006134:	0002      	movs	r2, r0
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	2b02      	cmp	r3, #2
 800613c:	d901      	bls.n	8006142 <HAL_RCC_OscConfig+0x3ca>
          {
            return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e237      	b.n	80065b2 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006142:	4baa      	ldr	r3, [pc, #680]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	2380      	movs	r3, #128	@ 0x80
 8006148:	00db      	lsls	r3, r3, #3
 800614a:	4013      	ands	r3, r2
 800614c:	d1f0      	bne.n	8006130 <HAL_RCC_OscConfig+0x3b8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2208      	movs	r2, #8
 8006154:	4013      	ands	r3, r2
 8006156:	d051      	beq.n	80061fc <HAL_RCC_OscConfig+0x484>
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d031      	beq.n	80061c4 <HAL_RCC_OscConfig+0x44c>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d108      	bne.n	800617a <HAL_RCC_OscConfig+0x402>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8006168:	4aa0      	ldr	r2, [pc, #640]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 800616a:	2394      	movs	r3, #148	@ 0x94
 800616c:	58d3      	ldr	r3, [r2, r3]
 800616e:	499f      	ldr	r1, [pc, #636]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 8006170:	2204      	movs	r2, #4
 8006172:	4393      	bics	r3, r2
 8006174:	2294      	movs	r2, #148	@ 0x94
 8006176:	508b      	str	r3, [r1, r2]
 8006178:	e007      	b.n	800618a <HAL_RCC_OscConfig+0x412>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 800617a:	4a9c      	ldr	r2, [pc, #624]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 800617c:	2394      	movs	r3, #148	@ 0x94
 800617e:	58d3      	ldr	r3, [r2, r3]
 8006180:	499a      	ldr	r1, [pc, #616]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 8006182:	2204      	movs	r2, #4
 8006184:	4313      	orrs	r3, r2
 8006186:	2294      	movs	r2, #148	@ 0x94
 8006188:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800618a:	4a98      	ldr	r2, [pc, #608]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 800618c:	2394      	movs	r3, #148	@ 0x94
 800618e:	58d3      	ldr	r3, [r2, r3]
 8006190:	4996      	ldr	r1, [pc, #600]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 8006192:	2201      	movs	r2, #1
 8006194:	4313      	orrs	r3, r2
 8006196:	2294      	movs	r2, #148	@ 0x94
 8006198:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800619a:	f7fe fda3 	bl	8004ce4 <HAL_GetTick>
 800619e:	0003      	movs	r3, r0
 80061a0:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80061a2:	e008      	b.n	80061b6 <HAL_RCC_OscConfig+0x43e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061a4:	f7fe fd9e 	bl	8004ce4 <HAL_GetTick>
 80061a8:	0002      	movs	r2, r0
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	2b11      	cmp	r3, #17
 80061b0:	d901      	bls.n	80061b6 <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e1fd      	b.n	80065b2 <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80061b6:	4a8d      	ldr	r2, [pc, #564]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 80061b8:	2394      	movs	r3, #148	@ 0x94
 80061ba:	58d3      	ldr	r3, [r2, r3]
 80061bc:	2202      	movs	r2, #2
 80061be:	4013      	ands	r3, r2
 80061c0:	d0f0      	beq.n	80061a4 <HAL_RCC_OscConfig+0x42c>
 80061c2:	e01b      	b.n	80061fc <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061c4:	4a89      	ldr	r2, [pc, #548]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 80061c6:	2394      	movs	r3, #148	@ 0x94
 80061c8:	58d3      	ldr	r3, [r2, r3]
 80061ca:	4988      	ldr	r1, [pc, #544]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 80061cc:	2201      	movs	r2, #1
 80061ce:	4393      	bics	r3, r2
 80061d0:	2294      	movs	r2, #148	@ 0x94
 80061d2:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061d4:	f7fe fd86 	bl	8004ce4 <HAL_GetTick>
 80061d8:	0003      	movs	r3, r0
 80061da:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80061dc:	e008      	b.n	80061f0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061de:	f7fe fd81 	bl	8004ce4 <HAL_GetTick>
 80061e2:	0002      	movs	r2, r0
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	2b11      	cmp	r3, #17
 80061ea:	d901      	bls.n	80061f0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e1e0      	b.n	80065b2 <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80061f0:	4a7e      	ldr	r2, [pc, #504]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 80061f2:	2394      	movs	r3, #148	@ 0x94
 80061f4:	58d3      	ldr	r3, [r2, r3]
 80061f6:	2202      	movs	r2, #2
 80061f8:	4013      	ands	r3, r2
 80061fa:	d1f0      	bne.n	80061de <HAL_RCC_OscConfig+0x466>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2204      	movs	r2, #4
 8006202:	4013      	ands	r3, r2
 8006204:	d100      	bne.n	8006208 <HAL_RCC_OscConfig+0x490>
 8006206:	e10d      	b.n	8006424 <HAL_RCC_OscConfig+0x6ac>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006208:	201f      	movs	r0, #31
 800620a:	183b      	adds	r3, r7, r0
 800620c:	2200      	movs	r2, #0
 800620e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8006210:	4b76      	ldr	r3, [pc, #472]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 8006212:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006214:	2380      	movs	r3, #128	@ 0x80
 8006216:	055b      	lsls	r3, r3, #21
 8006218:	4013      	ands	r3, r2
 800621a:	d110      	bne.n	800623e <HAL_RCC_OscConfig+0x4c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800621c:	4b73      	ldr	r3, [pc, #460]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 800621e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006220:	4b72      	ldr	r3, [pc, #456]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 8006222:	2180      	movs	r1, #128	@ 0x80
 8006224:	0549      	lsls	r1, r1, #21
 8006226:	430a      	orrs	r2, r1
 8006228:	659a      	str	r2, [r3, #88]	@ 0x58
 800622a:	4b70      	ldr	r3, [pc, #448]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 800622c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800622e:	2380      	movs	r3, #128	@ 0x80
 8006230:	055b      	lsls	r3, r3, #21
 8006232:	4013      	ands	r3, r2
 8006234:	60bb      	str	r3, [r7, #8]
 8006236:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006238:	183b      	adds	r3, r7, r0
 800623a:	2201      	movs	r2, #1
 800623c:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800623e:	4b6e      	ldr	r3, [pc, #440]	@ (80063f8 <HAL_RCC_OscConfig+0x680>)
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	2380      	movs	r3, #128	@ 0x80
 8006244:	005b      	lsls	r3, r3, #1
 8006246:	4013      	ands	r3, r2
 8006248:	d11a      	bne.n	8006280 <HAL_RCC_OscConfig+0x508>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800624a:	4b6b      	ldr	r3, [pc, #428]	@ (80063f8 <HAL_RCC_OscConfig+0x680>)
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	4b6a      	ldr	r3, [pc, #424]	@ (80063f8 <HAL_RCC_OscConfig+0x680>)
 8006250:	2180      	movs	r1, #128	@ 0x80
 8006252:	0049      	lsls	r1, r1, #1
 8006254:	430a      	orrs	r2, r1
 8006256:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006258:	f7fe fd44 	bl	8004ce4 <HAL_GetTick>
 800625c:	0003      	movs	r3, r0
 800625e:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006260:	e008      	b.n	8006274 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006262:	f7fe fd3f 	bl	8004ce4 <HAL_GetTick>
 8006266:	0002      	movs	r2, r0
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	2b02      	cmp	r3, #2
 800626e:	d901      	bls.n	8006274 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e19e      	b.n	80065b2 <HAL_RCC_OscConfig+0x83a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006274:	4b60      	ldr	r3, [pc, #384]	@ (80063f8 <HAL_RCC_OscConfig+0x680>)
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	2380      	movs	r3, #128	@ 0x80
 800627a:	005b      	lsls	r3, r3, #1
 800627c:	4013      	ands	r3, r2
 800627e:	d0f0      	beq.n	8006262 <HAL_RCC_OscConfig+0x4ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	2201      	movs	r2, #1
 8006286:	4013      	ands	r3, r2
 8006288:	d01e      	beq.n	80062c8 <HAL_RCC_OscConfig+0x550>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	2204      	movs	r2, #4
 8006290:	4013      	ands	r3, r2
 8006292:	d010      	beq.n	80062b6 <HAL_RCC_OscConfig+0x53e>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006294:	4a55      	ldr	r2, [pc, #340]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 8006296:	2390      	movs	r3, #144	@ 0x90
 8006298:	58d3      	ldr	r3, [r2, r3]
 800629a:	4954      	ldr	r1, [pc, #336]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 800629c:	2204      	movs	r2, #4
 800629e:	4313      	orrs	r3, r2
 80062a0:	2290      	movs	r2, #144	@ 0x90
 80062a2:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80062a4:	4a51      	ldr	r2, [pc, #324]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 80062a6:	2390      	movs	r3, #144	@ 0x90
 80062a8:	58d3      	ldr	r3, [r2, r3]
 80062aa:	4950      	ldr	r1, [pc, #320]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 80062ac:	2201      	movs	r2, #1
 80062ae:	4313      	orrs	r3, r2
 80062b0:	2290      	movs	r2, #144	@ 0x90
 80062b2:	508b      	str	r3, [r1, r2]
 80062b4:	e018      	b.n	80062e8 <HAL_RCC_OscConfig+0x570>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80062b6:	4a4d      	ldr	r2, [pc, #308]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 80062b8:	2390      	movs	r3, #144	@ 0x90
 80062ba:	58d3      	ldr	r3, [r2, r3]
 80062bc:	494b      	ldr	r1, [pc, #300]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 80062be:	2201      	movs	r2, #1
 80062c0:	4313      	orrs	r3, r2
 80062c2:	2290      	movs	r2, #144	@ 0x90
 80062c4:	508b      	str	r3, [r1, r2]
 80062c6:	e00f      	b.n	80062e8 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80062c8:	4a48      	ldr	r2, [pc, #288]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 80062ca:	2390      	movs	r3, #144	@ 0x90
 80062cc:	58d3      	ldr	r3, [r2, r3]
 80062ce:	4947      	ldr	r1, [pc, #284]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 80062d0:	2201      	movs	r2, #1
 80062d2:	4393      	bics	r3, r2
 80062d4:	2290      	movs	r2, #144	@ 0x90
 80062d6:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80062d8:	4a44      	ldr	r2, [pc, #272]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 80062da:	2390      	movs	r3, #144	@ 0x90
 80062dc:	58d3      	ldr	r3, [r2, r3]
 80062de:	4943      	ldr	r1, [pc, #268]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 80062e0:	2204      	movs	r2, #4
 80062e2:	4393      	bics	r3, r2
 80062e4:	2290      	movs	r2, #144	@ 0x90
 80062e6:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d04f      	beq.n	8006390 <HAL_RCC_OscConfig+0x618>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062f0:	f7fe fcf8 	bl	8004ce4 <HAL_GetTick>
 80062f4:	0003      	movs	r3, r0
 80062f6:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062f8:	e009      	b.n	800630e <HAL_RCC_OscConfig+0x596>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062fa:	f7fe fcf3 	bl	8004ce4 <HAL_GetTick>
 80062fe:	0002      	movs	r2, r0
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	4a3d      	ldr	r2, [pc, #244]	@ (80063fc <HAL_RCC_OscConfig+0x684>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d901      	bls.n	800630e <HAL_RCC_OscConfig+0x596>
        {
          return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e151      	b.n	80065b2 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800630e:	4a37      	ldr	r2, [pc, #220]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 8006310:	2390      	movs	r3, #144	@ 0x90
 8006312:	58d3      	ldr	r3, [r2, r3]
 8006314:	2202      	movs	r2, #2
 8006316:	4013      	ands	r3, r2
 8006318:	d0ef      	beq.n	80062fa <HAL_RCC_OscConfig+0x582>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	2280      	movs	r2, #128	@ 0x80
 8006320:	4013      	ands	r3, r2
 8006322:	d01a      	beq.n	800635a <HAL_RCC_OscConfig+0x5e2>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006324:	4a31      	ldr	r2, [pc, #196]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 8006326:	2390      	movs	r3, #144	@ 0x90
 8006328:	58d3      	ldr	r3, [r2, r3]
 800632a:	4930      	ldr	r1, [pc, #192]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 800632c:	2280      	movs	r2, #128	@ 0x80
 800632e:	4313      	orrs	r3, r2
 8006330:	2290      	movs	r2, #144	@ 0x90
 8006332:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006334:	e009      	b.n	800634a <HAL_RCC_OscConfig+0x5d2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006336:	f7fe fcd5 	bl	8004ce4 <HAL_GetTick>
 800633a:	0002      	movs	r2, r0
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	4a2e      	ldr	r2, [pc, #184]	@ (80063fc <HAL_RCC_OscConfig+0x684>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d901      	bls.n	800634a <HAL_RCC_OscConfig+0x5d2>
          {
            return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e133      	b.n	80065b2 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800634a:	4a28      	ldr	r2, [pc, #160]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 800634c:	2390      	movs	r3, #144	@ 0x90
 800634e:	58d2      	ldr	r2, [r2, r3]
 8006350:	2380      	movs	r3, #128	@ 0x80
 8006352:	011b      	lsls	r3, r3, #4
 8006354:	4013      	ands	r3, r2
 8006356:	d0ee      	beq.n	8006336 <HAL_RCC_OscConfig+0x5be>
 8006358:	e059      	b.n	800640e <HAL_RCC_OscConfig+0x696>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800635a:	4a24      	ldr	r2, [pc, #144]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 800635c:	2390      	movs	r3, #144	@ 0x90
 800635e:	58d3      	ldr	r3, [r2, r3]
 8006360:	4922      	ldr	r1, [pc, #136]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 8006362:	2280      	movs	r2, #128	@ 0x80
 8006364:	4393      	bics	r3, r2
 8006366:	2290      	movs	r2, #144	@ 0x90
 8006368:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800636a:	e009      	b.n	8006380 <HAL_RCC_OscConfig+0x608>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800636c:	f7fe fcba 	bl	8004ce4 <HAL_GetTick>
 8006370:	0002      	movs	r2, r0
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	4a21      	ldr	r2, [pc, #132]	@ (80063fc <HAL_RCC_OscConfig+0x684>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d901      	bls.n	8006380 <HAL_RCC_OscConfig+0x608>
          {
            return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e118      	b.n	80065b2 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006380:	4a1a      	ldr	r2, [pc, #104]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 8006382:	2390      	movs	r3, #144	@ 0x90
 8006384:	58d2      	ldr	r2, [r2, r3]
 8006386:	2380      	movs	r3, #128	@ 0x80
 8006388:	011b      	lsls	r3, r3, #4
 800638a:	4013      	ands	r3, r2
 800638c:	d1ee      	bne.n	800636c <HAL_RCC_OscConfig+0x5f4>
 800638e:	e03e      	b.n	800640e <HAL_RCC_OscConfig+0x696>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006390:	f7fe fca8 	bl	8004ce4 <HAL_GetTick>
 8006394:	0003      	movs	r3, r0
 8006396:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006398:	e009      	b.n	80063ae <HAL_RCC_OscConfig+0x636>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800639a:	f7fe fca3 	bl	8004ce4 <HAL_GetTick>
 800639e:	0002      	movs	r2, r0
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	4a15      	ldr	r2, [pc, #84]	@ (80063fc <HAL_RCC_OscConfig+0x684>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d901      	bls.n	80063ae <HAL_RCC_OscConfig+0x636>
        {
          return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e101      	b.n	80065b2 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80063ae:	4a0f      	ldr	r2, [pc, #60]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 80063b0:	2390      	movs	r3, #144	@ 0x90
 80063b2:	58d3      	ldr	r3, [r2, r3]
 80063b4:	2202      	movs	r2, #2
 80063b6:	4013      	ands	r3, r2
 80063b8:	d1ef      	bne.n	800639a <HAL_RCC_OscConfig+0x622>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80063ba:	4a0c      	ldr	r2, [pc, #48]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 80063bc:	2390      	movs	r3, #144	@ 0x90
 80063be:	58d3      	ldr	r3, [r2, r3]
 80063c0:	2280      	movs	r2, #128	@ 0x80
 80063c2:	4013      	ands	r3, r2
 80063c4:	d023      	beq.n	800640e <HAL_RCC_OscConfig+0x696>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80063c6:	4a09      	ldr	r2, [pc, #36]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 80063c8:	2390      	movs	r3, #144	@ 0x90
 80063ca:	58d3      	ldr	r3, [r2, r3]
 80063cc:	4907      	ldr	r1, [pc, #28]	@ (80063ec <HAL_RCC_OscConfig+0x674>)
 80063ce:	2280      	movs	r2, #128	@ 0x80
 80063d0:	4393      	bics	r3, r2
 80063d2:	2290      	movs	r2, #144	@ 0x90
 80063d4:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80063d6:	e013      	b.n	8006400 <HAL_RCC_OscConfig+0x688>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063d8:	f7fe fc84 	bl	8004ce4 <HAL_GetTick>
 80063dc:	0002      	movs	r2, r0
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	4a06      	ldr	r2, [pc, #24]	@ (80063fc <HAL_RCC_OscConfig+0x684>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d90b      	bls.n	8006400 <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e0e2      	b.n	80065b2 <HAL_RCC_OscConfig+0x83a>
 80063ec:	40021000 	.word	0x40021000
 80063f0:	80ffffff 	.word	0x80ffffff
 80063f4:	fffffeff 	.word	0xfffffeff
 80063f8:	40007000 	.word	0x40007000
 80063fc:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006400:	4a6e      	ldr	r2, [pc, #440]	@ (80065bc <HAL_RCC_OscConfig+0x844>)
 8006402:	2390      	movs	r3, #144	@ 0x90
 8006404:	58d2      	ldr	r2, [r2, r3]
 8006406:	2380      	movs	r3, #128	@ 0x80
 8006408:	011b      	lsls	r3, r3, #4
 800640a:	4013      	ands	r3, r2
 800640c:	d1e4      	bne.n	80063d8 <HAL_RCC_OscConfig+0x660>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800640e:	231f      	movs	r3, #31
 8006410:	18fb      	adds	r3, r7, r3
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	2b01      	cmp	r3, #1
 8006416:	d105      	bne.n	8006424 <HAL_RCC_OscConfig+0x6ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006418:	4b68      	ldr	r3, [pc, #416]	@ (80065bc <HAL_RCC_OscConfig+0x844>)
 800641a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800641c:	4b67      	ldr	r3, [pc, #412]	@ (80065bc <HAL_RCC_OscConfig+0x844>)
 800641e:	4968      	ldr	r1, [pc, #416]	@ (80065c0 <HAL_RCC_OscConfig+0x848>)
 8006420:	400a      	ands	r2, r1
 8006422:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
#if defined(RCC_CRRCR_HSI48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2220      	movs	r2, #32
 800642a:	4013      	ands	r3, r2
 800642c:	d03c      	beq.n	80064a8 <HAL_RCC_OscConfig+0x730>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006432:	2b00      	cmp	r3, #0
 8006434:	d01c      	beq.n	8006470 <HAL_RCC_OscConfig+0x6f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006436:	4a61      	ldr	r2, [pc, #388]	@ (80065bc <HAL_RCC_OscConfig+0x844>)
 8006438:	2398      	movs	r3, #152	@ 0x98
 800643a:	58d3      	ldr	r3, [r2, r3]
 800643c:	495f      	ldr	r1, [pc, #380]	@ (80065bc <HAL_RCC_OscConfig+0x844>)
 800643e:	2201      	movs	r2, #1
 8006440:	4313      	orrs	r3, r2
 8006442:	2298      	movs	r2, #152	@ 0x98
 8006444:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006446:	f7fe fc4d 	bl	8004ce4 <HAL_GetTick>
 800644a:	0003      	movs	r3, r0
 800644c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800644e:	e008      	b.n	8006462 <HAL_RCC_OscConfig+0x6ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006450:	f7fe fc48 	bl	8004ce4 <HAL_GetTick>
 8006454:	0002      	movs	r2, r0
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	2b02      	cmp	r3, #2
 800645c:	d901      	bls.n	8006462 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e0a7      	b.n	80065b2 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006462:	4a56      	ldr	r2, [pc, #344]	@ (80065bc <HAL_RCC_OscConfig+0x844>)
 8006464:	2398      	movs	r3, #152	@ 0x98
 8006466:	58d3      	ldr	r3, [r2, r3]
 8006468:	2202      	movs	r2, #2
 800646a:	4013      	ands	r3, r2
 800646c:	d0f0      	beq.n	8006450 <HAL_RCC_OscConfig+0x6d8>
 800646e:	e01b      	b.n	80064a8 <HAL_RCC_OscConfig+0x730>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006470:	4a52      	ldr	r2, [pc, #328]	@ (80065bc <HAL_RCC_OscConfig+0x844>)
 8006472:	2398      	movs	r3, #152	@ 0x98
 8006474:	58d3      	ldr	r3, [r2, r3]
 8006476:	4951      	ldr	r1, [pc, #324]	@ (80065bc <HAL_RCC_OscConfig+0x844>)
 8006478:	2201      	movs	r2, #1
 800647a:	4393      	bics	r3, r2
 800647c:	2298      	movs	r2, #152	@ 0x98
 800647e:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006480:	f7fe fc30 	bl	8004ce4 <HAL_GetTick>
 8006484:	0003      	movs	r3, r0
 8006486:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 8006488:	e008      	b.n	800649c <HAL_RCC_OscConfig+0x724>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800648a:	f7fe fc2b 	bl	8004ce4 <HAL_GetTick>
 800648e:	0002      	movs	r2, r0
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	2b02      	cmp	r3, #2
 8006496:	d901      	bls.n	800649c <HAL_RCC_OscConfig+0x724>
        {
          return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e08a      	b.n	80065b2 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 800649c:	4a47      	ldr	r2, [pc, #284]	@ (80065bc <HAL_RCC_OscConfig+0x844>)
 800649e:	2398      	movs	r3, #152	@ 0x98
 80064a0:	58d3      	ldr	r3, [r2, r3]
 80064a2:	2202      	movs	r2, #2
 80064a4:	4013      	ands	r3, r2
 80064a6:	d1f0      	bne.n	800648a <HAL_RCC_OscConfig+0x712>
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d100      	bne.n	80064b2 <HAL_RCC_OscConfig+0x73a>
 80064b0:	e07e      	b.n	80065b0 <HAL_RCC_OscConfig+0x838>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80064b2:	4b42      	ldr	r3, [pc, #264]	@ (80065bc <HAL_RCC_OscConfig+0x844>)
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	2238      	movs	r2, #56	@ 0x38
 80064b8:	4013      	ands	r3, r2
 80064ba:	2b18      	cmp	r3, #24
 80064bc:	d100      	bne.n	80064c0 <HAL_RCC_OscConfig+0x748>
 80064be:	e075      	b.n	80065ac <HAL_RCC_OscConfig+0x834>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d156      	bne.n	8006576 <HAL_RCC_OscConfig+0x7fe>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064c8:	4b3c      	ldr	r3, [pc, #240]	@ (80065bc <HAL_RCC_OscConfig+0x844>)
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	4b3b      	ldr	r3, [pc, #236]	@ (80065bc <HAL_RCC_OscConfig+0x844>)
 80064ce:	493d      	ldr	r1, [pc, #244]	@ (80065c4 <HAL_RCC_OscConfig+0x84c>)
 80064d0:	400a      	ands	r2, r1
 80064d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d4:	f7fe fc06 	bl	8004ce4 <HAL_GetTick>
 80064d8:	0003      	movs	r3, r0
 80064da:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064dc:	e008      	b.n	80064f0 <HAL_RCC_OscConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064de:	f7fe fc01 	bl	8004ce4 <HAL_GetTick>
 80064e2:	0002      	movs	r2, r0
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d901      	bls.n	80064f0 <HAL_RCC_OscConfig+0x778>
          {
            return HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e060      	b.n	80065b2 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064f0:	4b32      	ldr	r3, [pc, #200]	@ (80065bc <HAL_RCC_OscConfig+0x844>)
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	2380      	movs	r3, #128	@ 0x80
 80064f6:	049b      	lsls	r3, r3, #18
 80064f8:	4013      	ands	r3, r2
 80064fa:	d1f0      	bne.n	80064de <HAL_RCC_OscConfig+0x766>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064fc:	4b2f      	ldr	r3, [pc, #188]	@ (80065bc <HAL_RCC_OscConfig+0x844>)
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	4a31      	ldr	r2, [pc, #196]	@ (80065c8 <HAL_RCC_OscConfig+0x850>)
 8006502:	4013      	ands	r3, r2
 8006504:	0019      	movs	r1, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800650e:	431a      	orrs	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006514:	021b      	lsls	r3, r3, #8
 8006516:	431a      	orrs	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800651c:	431a      	orrs	r2, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006522:	431a      	orrs	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006528:	431a      	orrs	r2, r3
 800652a:	4b24      	ldr	r3, [pc, #144]	@ (80065bc <HAL_RCC_OscConfig+0x844>)
 800652c:	430a      	orrs	r2, r1
 800652e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 8006530:	4b22      	ldr	r3, [pc, #136]	@ (80065bc <HAL_RCC_OscConfig+0x844>)
 8006532:	68da      	ldr	r2, [r3, #12]
 8006534:	4b21      	ldr	r3, [pc, #132]	@ (80065bc <HAL_RCC_OscConfig+0x844>)
 8006536:	2180      	movs	r1, #128	@ 0x80
 8006538:	0549      	lsls	r1, r1, #21
 800653a:	430a      	orrs	r2, r1
 800653c:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800653e:	4b1f      	ldr	r3, [pc, #124]	@ (80065bc <HAL_RCC_OscConfig+0x844>)
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	4b1e      	ldr	r3, [pc, #120]	@ (80065bc <HAL_RCC_OscConfig+0x844>)
 8006544:	2180      	movs	r1, #128	@ 0x80
 8006546:	0449      	lsls	r1, r1, #17
 8006548:	430a      	orrs	r2, r1
 800654a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800654c:	f7fe fbca 	bl	8004ce4 <HAL_GetTick>
 8006550:	0003      	movs	r3, r0
 8006552:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006554:	e008      	b.n	8006568 <HAL_RCC_OscConfig+0x7f0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006556:	f7fe fbc5 	bl	8004ce4 <HAL_GetTick>
 800655a:	0002      	movs	r2, r0
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	2b02      	cmp	r3, #2
 8006562:	d901      	bls.n	8006568 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e024      	b.n	80065b2 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006568:	4b14      	ldr	r3, [pc, #80]	@ (80065bc <HAL_RCC_OscConfig+0x844>)
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	2380      	movs	r3, #128	@ 0x80
 800656e:	049b      	lsls	r3, r3, #18
 8006570:	4013      	ands	r3, r2
 8006572:	d0f0      	beq.n	8006556 <HAL_RCC_OscConfig+0x7de>
 8006574:	e01c      	b.n	80065b0 <HAL_RCC_OscConfig+0x838>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006576:	4b11      	ldr	r3, [pc, #68]	@ (80065bc <HAL_RCC_OscConfig+0x844>)
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	4b10      	ldr	r3, [pc, #64]	@ (80065bc <HAL_RCC_OscConfig+0x844>)
 800657c:	4911      	ldr	r1, [pc, #68]	@ (80065c4 <HAL_RCC_OscConfig+0x84c>)
 800657e:	400a      	ands	r2, r1
 8006580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006582:	f7fe fbaf 	bl	8004ce4 <HAL_GetTick>
 8006586:	0003      	movs	r3, r0
 8006588:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800658a:	e008      	b.n	800659e <HAL_RCC_OscConfig+0x826>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800658c:	f7fe fbaa 	bl	8004ce4 <HAL_GetTick>
 8006590:	0002      	movs	r2, r0
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	2b02      	cmp	r3, #2
 8006598:	d901      	bls.n	800659e <HAL_RCC_OscConfig+0x826>
          {
            return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e009      	b.n	80065b2 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800659e:	4b07      	ldr	r3, [pc, #28]	@ (80065bc <HAL_RCC_OscConfig+0x844>)
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	2380      	movs	r3, #128	@ 0x80
 80065a4:	049b      	lsls	r3, r3, #18
 80065a6:	4013      	ands	r3, r2
 80065a8:	d1f0      	bne.n	800658c <HAL_RCC_OscConfig+0x814>
 80065aa:	e001      	b.n	80065b0 <HAL_RCC_OscConfig+0x838>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e000      	b.n	80065b2 <HAL_RCC_OscConfig+0x83a>
    }
  }
  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	0018      	movs	r0, r3
 80065b4:	46bd      	mov	sp, r7
 80065b6:	b008      	add	sp, #32
 80065b8:	bdb0      	pop	{r4, r5, r7, pc}
 80065ba:	46c0      	nop			@ (mov r8, r8)
 80065bc:	40021000 	.word	0x40021000
 80065c0:	efffffff 	.word	0xefffffff
 80065c4:	feffffff 	.word	0xfeffffff
 80065c8:	11c1808c 	.word	0x11c1808c

080065cc <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 80065cc:	b5b0      	push	{r4, r5, r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065d6:	4b6c      	ldr	r3, [pc, #432]	@ (8006788 <HAL_RCC_ClockConfig+0x1bc>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2207      	movs	r2, #7
 80065dc:	4013      	ands	r3, r2
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d911      	bls.n	8006608 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065e4:	4b68      	ldr	r3, [pc, #416]	@ (8006788 <HAL_RCC_ClockConfig+0x1bc>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2207      	movs	r2, #7
 80065ea:	4393      	bics	r3, r2
 80065ec:	0019      	movs	r1, r3
 80065ee:	4b66      	ldr	r3, [pc, #408]	@ (8006788 <HAL_RCC_ClockConfig+0x1bc>)
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	430a      	orrs	r2, r1
 80065f4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065f6:	4b64      	ldr	r3, [pc, #400]	@ (8006788 <HAL_RCC_ClockConfig+0x1bc>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2207      	movs	r2, #7
 80065fc:	4013      	ands	r3, r2
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	429a      	cmp	r2, r3
 8006602:	d001      	beq.n	8006608 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e0bb      	b.n	8006780 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2201      	movs	r2, #1
 800660e:	4013      	ands	r3, r2
 8006610:	d100      	bne.n	8006614 <HAL_RCC_ClockConfig+0x48>
 8006612:	e064      	b.n	80066de <HAL_RCC_ClockConfig+0x112>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	2b03      	cmp	r3, #3
 800661a:	d107      	bne.n	800662c <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800661c:	4b5b      	ldr	r3, [pc, #364]	@ (800678c <HAL_RCC_ClockConfig+0x1c0>)
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	2380      	movs	r3, #128	@ 0x80
 8006622:	049b      	lsls	r3, r3, #18
 8006624:	4013      	ands	r3, r2
 8006626:	d138      	bne.n	800669a <HAL_RCC_ClockConfig+0xce>
      {
        return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e0a9      	b.n	8006780 <HAL_RCC_ClockConfig+0x1b4>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	2b02      	cmp	r3, #2
 8006632:	d107      	bne.n	8006644 <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006634:	4b55      	ldr	r3, [pc, #340]	@ (800678c <HAL_RCC_ClockConfig+0x1c0>)
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	2380      	movs	r3, #128	@ 0x80
 800663a:	029b      	lsls	r3, r3, #10
 800663c:	4013      	ands	r3, r2
 800663e:	d12c      	bne.n	800669a <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e09d      	b.n	8006780 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d106      	bne.n	800665a <HAL_RCC_ClockConfig+0x8e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800664c:	4b4f      	ldr	r3, [pc, #316]	@ (800678c <HAL_RCC_ClockConfig+0x1c0>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2202      	movs	r2, #2
 8006652:	4013      	ands	r3, r2
 8006654:	d121      	bne.n	800669a <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e092      	b.n	8006780 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d107      	bne.n	8006672 <HAL_RCC_ClockConfig+0xa6>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006662:	4b4a      	ldr	r3, [pc, #296]	@ (800678c <HAL_RCC_ClockConfig+0x1c0>)
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	2380      	movs	r3, #128	@ 0x80
 8006668:	00db      	lsls	r3, r3, #3
 800666a:	4013      	ands	r3, r2
 800666c:	d115      	bne.n	800669a <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e086      	b.n	8006780 <HAL_RCC_ClockConfig+0x1b4>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	2b04      	cmp	r3, #4
 8006678:	d107      	bne.n	800668a <HAL_RCC_ClockConfig+0xbe>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800667a:	4a44      	ldr	r2, [pc, #272]	@ (800678c <HAL_RCC_ClockConfig+0x1c0>)
 800667c:	2394      	movs	r3, #148	@ 0x94
 800667e:	58d3      	ldr	r3, [r2, r3]
 8006680:	2202      	movs	r2, #2
 8006682:	4013      	ands	r3, r2
 8006684:	d109      	bne.n	800669a <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e07a      	b.n	8006780 <HAL_RCC_ClockConfig+0x1b4>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800668a:	4a40      	ldr	r2, [pc, #256]	@ (800678c <HAL_RCC_ClockConfig+0x1c0>)
 800668c:	2390      	movs	r3, #144	@ 0x90
 800668e:	58d3      	ldr	r3, [r2, r3]
 8006690:	2202      	movs	r2, #2
 8006692:	4013      	ands	r3, r2
 8006694:	d101      	bne.n	800669a <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e072      	b.n	8006780 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800669a:	4b3c      	ldr	r3, [pc, #240]	@ (800678c <HAL_RCC_ClockConfig+0x1c0>)
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	2207      	movs	r2, #7
 80066a0:	4393      	bics	r3, r2
 80066a2:	0019      	movs	r1, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685a      	ldr	r2, [r3, #4]
 80066a8:	4b38      	ldr	r3, [pc, #224]	@ (800678c <HAL_RCC_ClockConfig+0x1c0>)
 80066aa:	430a      	orrs	r2, r1
 80066ac:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80066ae:	f7fe fb19 	bl	8004ce4 <HAL_GetTick>
 80066b2:	0003      	movs	r3, r0
 80066b4:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066b6:	e009      	b.n	80066cc <HAL_RCC_ClockConfig+0x100>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066b8:	f7fe fb14 	bl	8004ce4 <HAL_GetTick>
 80066bc:	0002      	movs	r2, r0
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	4a33      	ldr	r2, [pc, #204]	@ (8006790 <HAL_RCC_ClockConfig+0x1c4>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d901      	bls.n	80066cc <HAL_RCC_ClockConfig+0x100>
      {
        return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e059      	b.n	8006780 <HAL_RCC_ClockConfig+0x1b4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066cc:	4b2f      	ldr	r3, [pc, #188]	@ (800678c <HAL_RCC_ClockConfig+0x1c0>)
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	2238      	movs	r2, #56	@ 0x38
 80066d2:	401a      	ands	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	00db      	lsls	r3, r3, #3
 80066da:	429a      	cmp	r2, r3
 80066dc:	d1ec      	bne.n	80066b8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2202      	movs	r2, #2
 80066e4:	4013      	ands	r3, r2
 80066e6:	d009      	beq.n	80066fc <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066e8:	4b28      	ldr	r3, [pc, #160]	@ (800678c <HAL_RCC_ClockConfig+0x1c0>)
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	4a29      	ldr	r2, [pc, #164]	@ (8006794 <HAL_RCC_ClockConfig+0x1c8>)
 80066ee:	4013      	ands	r3, r2
 80066f0:	0019      	movs	r1, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	689a      	ldr	r2, [r3, #8]
 80066f6:	4b25      	ldr	r3, [pc, #148]	@ (800678c <HAL_RCC_ClockConfig+0x1c0>)
 80066f8:	430a      	orrs	r2, r1
 80066fa:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80066fc:	4b22      	ldr	r3, [pc, #136]	@ (8006788 <HAL_RCC_ClockConfig+0x1bc>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2207      	movs	r2, #7
 8006702:	4013      	ands	r3, r2
 8006704:	683a      	ldr	r2, [r7, #0]
 8006706:	429a      	cmp	r2, r3
 8006708:	d211      	bcs.n	800672e <HAL_RCC_ClockConfig+0x162>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800670a:	4b1f      	ldr	r3, [pc, #124]	@ (8006788 <HAL_RCC_ClockConfig+0x1bc>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2207      	movs	r2, #7
 8006710:	4393      	bics	r3, r2
 8006712:	0019      	movs	r1, r3
 8006714:	4b1c      	ldr	r3, [pc, #112]	@ (8006788 <HAL_RCC_ClockConfig+0x1bc>)
 8006716:	683a      	ldr	r2, [r7, #0]
 8006718:	430a      	orrs	r2, r1
 800671a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800671c:	4b1a      	ldr	r3, [pc, #104]	@ (8006788 <HAL_RCC_ClockConfig+0x1bc>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2207      	movs	r2, #7
 8006722:	4013      	ands	r3, r2
 8006724:	683a      	ldr	r2, [r7, #0]
 8006726:	429a      	cmp	r2, r3
 8006728:	d001      	beq.n	800672e <HAL_RCC_ClockConfig+0x162>
    {
      return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e028      	b.n	8006780 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2204      	movs	r2, #4
 8006734:	4013      	ands	r3, r2
 8006736:	d009      	beq.n	800674c <HAL_RCC_ClockConfig+0x180>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006738:	4b14      	ldr	r3, [pc, #80]	@ (800678c <HAL_RCC_ClockConfig+0x1c0>)
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	4a16      	ldr	r2, [pc, #88]	@ (8006798 <HAL_RCC_ClockConfig+0x1cc>)
 800673e:	4013      	ands	r3, r2
 8006740:	0019      	movs	r1, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68da      	ldr	r2, [r3, #12]
 8006746:	4b11      	ldr	r3, [pc, #68]	@ (800678c <HAL_RCC_ClockConfig+0x1c0>)
 8006748:	430a      	orrs	r2, r1
 800674a:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 800674c:	f000 f82a 	bl	80067a4 <HAL_RCC_GetSysClockFreq>
 8006750:	0001      	movs	r1, r0
 8006752:	4b0e      	ldr	r3, [pc, #56]	@ (800678c <HAL_RCC_ClockConfig+0x1c0>)
 8006754:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006756:	0a1b      	lsrs	r3, r3, #8
 8006758:	220f      	movs	r2, #15
 800675a:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 800675c:	4a0f      	ldr	r2, [pc, #60]	@ (800679c <HAL_RCC_ClockConfig+0x1d0>)
 800675e:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006760:	001a      	movs	r2, r3
 8006762:	231f      	movs	r3, #31
 8006764:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8006766:	000a      	movs	r2, r1
 8006768:	40da      	lsrs	r2, r3
 800676a:	4b0d      	ldr	r3, [pc, #52]	@ (80067a0 <HAL_RCC_ClockConfig+0x1d4>)
 800676c:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 800676e:	250b      	movs	r5, #11
 8006770:	197c      	adds	r4, r7, r5
 8006772:	2003      	movs	r0, #3
 8006774:	f7fe fa5c 	bl	8004c30 <HAL_InitTick>
 8006778:	0003      	movs	r3, r0
 800677a:	7023      	strb	r3, [r4, #0]

  return halstatus;
 800677c:	197b      	adds	r3, r7, r5
 800677e:	781b      	ldrb	r3, [r3, #0]
}
 8006780:	0018      	movs	r0, r3
 8006782:	46bd      	mov	sp, r7
 8006784:	b004      	add	sp, #16
 8006786:	bdb0      	pop	{r4, r5, r7, pc}
 8006788:	40022000 	.word	0x40022000
 800678c:	40021000 	.word	0x40021000
 8006790:	00001388 	.word	0x00001388
 8006794:	fffff0ff 	.word	0xfffff0ff
 8006798:	ffff8fff 	.word	0xffff8fff
 800679c:	08009a28 	.word	0x08009a28
 80067a0:	20000004 	.word	0x20000004

080067a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b08a      	sub	sp, #40	@ 0x28
 80067a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80067aa:	2300      	movs	r3, #0
 80067ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 80067ae:	2300      	movs	r3, #0
 80067b0:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067b2:	4b46      	ldr	r3, [pc, #280]	@ (80068cc <HAL_RCC_GetSysClockFreq+0x128>)
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	2238      	movs	r2, #56	@ 0x38
 80067b8:	4013      	ands	r3, r2
 80067ba:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067bc:	4b43      	ldr	r3, [pc, #268]	@ (80068cc <HAL_RCC_GetSysClockFreq+0x128>)
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	2203      	movs	r2, #3
 80067c2:	4013      	ands	r3, r2
 80067c4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d005      	beq.n	80067d8 <HAL_RCC_GetSysClockFreq+0x34>
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	2b18      	cmp	r3, #24
 80067d0:	d125      	bne.n	800681e <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d122      	bne.n	800681e <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80067d8:	4b3c      	ldr	r3, [pc, #240]	@ (80068cc <HAL_RCC_GetSysClockFreq+0x128>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2208      	movs	r2, #8
 80067de:	4013      	ands	r3, r2
 80067e0:	d107      	bne.n	80067f2 <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 80067e2:	4a3a      	ldr	r2, [pc, #232]	@ (80068cc <HAL_RCC_GetSysClockFreq+0x128>)
 80067e4:	2394      	movs	r3, #148	@ 0x94
 80067e6:	58d3      	ldr	r3, [r2, r3]
 80067e8:	0a1b      	lsrs	r3, r3, #8
 80067ea:	220f      	movs	r2, #15
 80067ec:	4013      	ands	r3, r2
 80067ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80067f0:	e005      	b.n	80067fe <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80067f2:	4b36      	ldr	r3, [pc, #216]	@ (80068cc <HAL_RCC_GetSysClockFreq+0x128>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	091b      	lsrs	r3, r3, #4
 80067f8:	220f      	movs	r2, #15
 80067fa:	4013      	ands	r3, r2
 80067fc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 80067fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006800:	2b0b      	cmp	r3, #11
 8006802:	d901      	bls.n	8006808 <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 8006804:	2300      	movs	r3, #0
 8006806:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 8006808:	4b31      	ldr	r3, [pc, #196]	@ (80068d0 <HAL_RCC_GetSysClockFreq+0x12c>)
 800680a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800680c:	0092      	lsls	r2, r2, #2
 800680e:	58d3      	ldr	r3, [r2, r3]
 8006810:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d11b      	bne.n	8006850 <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800681c:	e018      	b.n	8006850 <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	2b08      	cmp	r3, #8
 8006822:	d102      	bne.n	800682a <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006824:	4b2b      	ldr	r3, [pc, #172]	@ (80068d4 <HAL_RCC_GetSysClockFreq+0x130>)
 8006826:	623b      	str	r3, [r7, #32]
 8006828:	e012      	b.n	8006850 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	2b10      	cmp	r3, #16
 800682e:	d102      	bne.n	8006836 <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006830:	4b29      	ldr	r3, [pc, #164]	@ (80068d8 <HAL_RCC_GetSysClockFreq+0x134>)
 8006832:	623b      	str	r3, [r7, #32]
 8006834:	e00c      	b.n	8006850 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	2b20      	cmp	r3, #32
 800683a:	d103      	bne.n	8006844 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800683c:	23fa      	movs	r3, #250	@ 0xfa
 800683e:	01db      	lsls	r3, r3, #7
 8006840:	623b      	str	r3, [r7, #32]
 8006842:	e005      	b.n	8006850 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	2b28      	cmp	r3, #40	@ 0x28
 8006848:	d102      	bne.n	8006850 <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800684a:	2380      	movs	r3, #128	@ 0x80
 800684c:	021b      	lsls	r3, r3, #8
 800684e:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	2b18      	cmp	r3, #24
 8006854:	d135      	bne.n	80068c2 <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006856:	4b1d      	ldr	r3, [pc, #116]	@ (80068cc <HAL_RCC_GetSysClockFreq+0x128>)
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	2203      	movs	r2, #3
 800685c:	4013      	ands	r3, r2
 800685e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006860:	4b1a      	ldr	r3, [pc, #104]	@ (80068cc <HAL_RCC_GetSysClockFreq+0x128>)
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	091b      	lsrs	r3, r3, #4
 8006866:	2207      	movs	r2, #7
 8006868:	4013      	ands	r3, r2
 800686a:	3301      	adds	r3, #1
 800686c:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	2b02      	cmp	r3, #2
 8006872:	d003      	beq.n	800687c <HAL_RCC_GetSysClockFreq+0xd8>
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	2b03      	cmp	r3, #3
 8006878:	d003      	beq.n	8006882 <HAL_RCC_GetSysClockFreq+0xde>
 800687a:	e005      	b.n	8006888 <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 800687c:	4b15      	ldr	r3, [pc, #84]	@ (80068d4 <HAL_RCC_GetSysClockFreq+0x130>)
 800687e:	61fb      	str	r3, [r7, #28]
        break;
 8006880:	e005      	b.n	800688e <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 8006882:	4b15      	ldr	r3, [pc, #84]	@ (80068d8 <HAL_RCC_GetSysClockFreq+0x134>)
 8006884:	61fb      	str	r3, [r7, #28]
        break;
 8006886:	e002      	b.n	800688e <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 8006888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688a:	61fb      	str	r3, [r7, #28]
        break;
 800688c:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 800688e:	4b0f      	ldr	r3, [pc, #60]	@ (80068cc <HAL_RCC_GetSysClockFreq+0x128>)
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	0a1b      	lsrs	r3, r3, #8
 8006894:	227f      	movs	r2, #127	@ 0x7f
 8006896:	4013      	ands	r3, r2
 8006898:	69fa      	ldr	r2, [r7, #28]
 800689a:	4353      	muls	r3, r2
 800689c:	68f9      	ldr	r1, [r7, #12]
 800689e:	0018      	movs	r0, r3
 80068a0:	f7f9 fc32 	bl	8000108 <__udivsi3>
 80068a4:	0003      	movs	r3, r0
 80068a6:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80068a8:	4b08      	ldr	r3, [pc, #32]	@ (80068cc <HAL_RCC_GetSysClockFreq+0x128>)
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	0f5b      	lsrs	r3, r3, #29
 80068ae:	2207      	movs	r2, #7
 80068b0:	4013      	ands	r3, r2
 80068b2:	3301      	adds	r3, #1
 80068b4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80068b6:	6879      	ldr	r1, [r7, #4]
 80068b8:	68b8      	ldr	r0, [r7, #8]
 80068ba:	f7f9 fc25 	bl	8000108 <__udivsi3>
 80068be:	0003      	movs	r3, r0
 80068c0:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80068c2:	6a3b      	ldr	r3, [r7, #32]
}
 80068c4:	0018      	movs	r0, r3
 80068c6:	46bd      	mov	sp, r7
 80068c8:	b00a      	add	sp, #40	@ 0x28
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	40021000 	.word	0x40021000
 80068d0:	08009a40 	.word	0x08009a40
 80068d4:	00f42400 	.word	0x00f42400
 80068d8:	003d0900 	.word	0x003d0900

080068dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068e0:	4b02      	ldr	r3, [pc, #8]	@ (80068ec <HAL_RCC_GetHCLKFreq+0x10>)
 80068e2:	681b      	ldr	r3, [r3, #0]
}
 80068e4:	0018      	movs	r0, r3
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	46c0      	nop			@ (mov r8, r8)
 80068ec:	20000004 	.word	0x20000004

080068f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 80068f4:	f7ff fff2 	bl	80068dc <HAL_RCC_GetHCLKFreq>
 80068f8:	0001      	movs	r1, r0
 80068fa:	4b07      	ldr	r3, [pc, #28]	@ (8006918 <HAL_RCC_GetPCLK1Freq+0x28>)
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	0b1b      	lsrs	r3, r3, #12
 8006900:	2207      	movs	r2, #7
 8006902:	4013      	ands	r3, r2
 8006904:	4a05      	ldr	r2, [pc, #20]	@ (800691c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8006906:	5cd3      	ldrb	r3, [r2, r3]
 8006908:	001a      	movs	r2, r3
 800690a:	231f      	movs	r3, #31
 800690c:	4013      	ands	r3, r2
 800690e:	40d9      	lsrs	r1, r3
 8006910:	000b      	movs	r3, r1
}
 8006912:	0018      	movs	r0, r3
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}
 8006918:	40021000 	.word	0x40021000
 800691c:	08009a38 	.word	0x08009a38

08006920 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006928:	2300      	movs	r3, #0
 800692a:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800692c:	4b2f      	ldr	r3, [pc, #188]	@ (80069ec <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 800692e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006930:	2380      	movs	r3, #128	@ 0x80
 8006932:	055b      	lsls	r3, r3, #21
 8006934:	4013      	ands	r3, r2
 8006936:	d004      	beq.n	8006942 <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006938:	f7ff fa12 	bl	8005d60 <HAL_PWREx_GetVoltageRange>
 800693c:	0003      	movs	r3, r0
 800693e:	617b      	str	r3, [r7, #20]
 8006940:	e017      	b.n	8006972 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006942:	4b2a      	ldr	r3, [pc, #168]	@ (80069ec <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8006944:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006946:	4b29      	ldr	r3, [pc, #164]	@ (80069ec <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8006948:	2180      	movs	r1, #128	@ 0x80
 800694a:	0549      	lsls	r1, r1, #21
 800694c:	430a      	orrs	r2, r1
 800694e:	659a      	str	r2, [r3, #88]	@ 0x58
 8006950:	4b26      	ldr	r3, [pc, #152]	@ (80069ec <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8006952:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006954:	2380      	movs	r3, #128	@ 0x80
 8006956:	055b      	lsls	r3, r3, #21
 8006958:	4013      	ands	r3, r2
 800695a:	60fb      	str	r3, [r7, #12]
 800695c:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800695e:	f7ff f9ff 	bl	8005d60 <HAL_PWREx_GetVoltageRange>
 8006962:	0003      	movs	r3, r0
 8006964:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006966:	4b21      	ldr	r3, [pc, #132]	@ (80069ec <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8006968:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800696a:	4b20      	ldr	r3, [pc, #128]	@ (80069ec <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 800696c:	4920      	ldr	r1, [pc, #128]	@ (80069f0 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 800696e:	400a      	ands	r2, r1
 8006970:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	2380      	movs	r3, #128	@ 0x80
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	429a      	cmp	r2, r3
 800697a:	d111      	bne.n	80069a0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b80      	cmp	r3, #128	@ 0x80
 8006980:	d91c      	bls.n	80069bc <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2bb0      	cmp	r3, #176	@ 0xb0
 8006986:	d902      	bls.n	800698e <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006988:	2302      	movs	r3, #2
 800698a:	613b      	str	r3, [r7, #16]
 800698c:	e016      	b.n	80069bc <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2b90      	cmp	r3, #144	@ 0x90
 8006992:	d902      	bls.n	800699a <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006994:	2301      	movs	r3, #1
 8006996:	613b      	str	r3, [r7, #16]
 8006998:	e010      	b.n	80069bc <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 800699a:	2300      	movs	r3, #0
 800699c:	613b      	str	r3, [r7, #16]
 800699e:	e00d      	b.n	80069bc <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80069a4:	d902      	bls.n	80069ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 80069a6:	2302      	movs	r3, #2
 80069a8:	613b      	str	r3, [r7, #16]
 80069aa:	e007      	b.n	80069bc <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b70      	cmp	r3, #112	@ 0x70
 80069b0:	d102      	bne.n	80069b8 <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80069b2:	2301      	movs	r3, #1
 80069b4:	613b      	str	r3, [r7, #16]
 80069b6:	e001      	b.n	80069bc <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80069b8:	2300      	movs	r3, #0
 80069ba:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80069bc:	4b0d      	ldr	r3, [pc, #52]	@ (80069f4 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2207      	movs	r2, #7
 80069c2:	4393      	bics	r3, r2
 80069c4:	0019      	movs	r1, r3
 80069c6:	4b0b      	ldr	r3, [pc, #44]	@ (80069f4 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 80069c8:	693a      	ldr	r2, [r7, #16]
 80069ca:	430a      	orrs	r2, r1
 80069cc:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80069ce:	4b09      	ldr	r3, [pc, #36]	@ (80069f4 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2207      	movs	r2, #7
 80069d4:	4013      	ands	r3, r2
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d001      	beq.n	80069e0 <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e000      	b.n	80069e2 <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	0018      	movs	r0, r3
 80069e4:	46bd      	mov	sp, r7
 80069e6:	b006      	add	sp, #24
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	46c0      	nop			@ (mov r8, r8)
 80069ec:	40021000 	.word	0x40021000
 80069f0:	efffffff 	.word	0xefffffff
 80069f4:	40022000 	.word	0x40022000

080069f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006a00:	2313      	movs	r3, #19
 8006a02:	18fb      	adds	r3, r7, r3
 8006a04:	2200      	movs	r2, #0
 8006a06:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a08:	2312      	movs	r3, #18
 8006a0a:	18fb      	adds	r3, r7, r3
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	2380      	movs	r3, #128	@ 0x80
 8006a16:	021b      	lsls	r3, r3, #8
 8006a18:	4013      	ands	r3, r2
 8006a1a:	d100      	bne.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006a1c:	e0b7      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a1e:	2011      	movs	r0, #17
 8006a20:	183b      	adds	r3, r7, r0
 8006a22:	2200      	movs	r2, #0
 8006a24:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a26:	4b4c      	ldr	r3, [pc, #304]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a28:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006a2a:	2380      	movs	r3, #128	@ 0x80
 8006a2c:	055b      	lsls	r3, r3, #21
 8006a2e:	4013      	ands	r3, r2
 8006a30:	d110      	bne.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a32:	4b49      	ldr	r3, [pc, #292]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a34:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006a36:	4b48      	ldr	r3, [pc, #288]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a38:	2180      	movs	r1, #128	@ 0x80
 8006a3a:	0549      	lsls	r1, r1, #21
 8006a3c:	430a      	orrs	r2, r1
 8006a3e:	659a      	str	r2, [r3, #88]	@ 0x58
 8006a40:	4b45      	ldr	r3, [pc, #276]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a42:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006a44:	2380      	movs	r3, #128	@ 0x80
 8006a46:	055b      	lsls	r3, r3, #21
 8006a48:	4013      	ands	r3, r2
 8006a4a:	60bb      	str	r3, [r7, #8]
 8006a4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a4e:	183b      	adds	r3, r7, r0
 8006a50:	2201      	movs	r2, #1
 8006a52:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a54:	4b41      	ldr	r3, [pc, #260]	@ (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	4b40      	ldr	r3, [pc, #256]	@ (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a5a:	2180      	movs	r1, #128	@ 0x80
 8006a5c:	0049      	lsls	r1, r1, #1
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a62:	f7fe f93f 	bl	8004ce4 <HAL_GetTick>
 8006a66:	0003      	movs	r3, r0
 8006a68:	60fb      	str	r3, [r7, #12]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006a6a:	e00b      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a6c:	f7fe f93a 	bl	8004ce4 <HAL_GetTick>
 8006a70:	0002      	movs	r2, r0
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d904      	bls.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8006a7a:	2313      	movs	r3, #19
 8006a7c:	18fb      	adds	r3, r7, r3
 8006a7e:	2203      	movs	r2, #3
 8006a80:	701a      	strb	r2, [r3, #0]
        break;
 8006a82:	e005      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006a84:	4b35      	ldr	r3, [pc, #212]	@ (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	2380      	movs	r3, #128	@ 0x80
 8006a8a:	005b      	lsls	r3, r3, #1
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	d0ed      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006a90:	2313      	movs	r3, #19
 8006a92:	18fb      	adds	r3, r7, r3
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d168      	bne.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006a9a:	4a2f      	ldr	r2, [pc, #188]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a9c:	2390      	movs	r3, #144	@ 0x90
 8006a9e:	58d2      	ldr	r2, [r2, r3]
 8006aa0:	23c0      	movs	r3, #192	@ 0xc0
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d01f      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab2:	697a      	ldr	r2, [r7, #20]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d01a      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0xf6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006ab8:	4a27      	ldr	r2, [pc, #156]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006aba:	2390      	movs	r3, #144	@ 0x90
 8006abc:	58d3      	ldr	r3, [r2, r3]
 8006abe:	4a28      	ldr	r2, [pc, #160]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ac4:	4a24      	ldr	r2, [pc, #144]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ac6:	2390      	movs	r3, #144	@ 0x90
 8006ac8:	58d3      	ldr	r3, [r2, r3]
 8006aca:	4923      	ldr	r1, [pc, #140]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006acc:	2280      	movs	r2, #128	@ 0x80
 8006ace:	0252      	lsls	r2, r2, #9
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	2290      	movs	r2, #144	@ 0x90
 8006ad4:	508b      	str	r3, [r1, r2]
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ad6:	4a20      	ldr	r2, [pc, #128]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ad8:	2390      	movs	r3, #144	@ 0x90
 8006ada:	58d3      	ldr	r3, [r2, r3]
 8006adc:	491e      	ldr	r1, [pc, #120]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ade:	4a21      	ldr	r2, [pc, #132]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	2290      	movs	r2, #144	@ 0x90
 8006ae4:	508b      	str	r3, [r1, r2]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006ae6:	491c      	ldr	r1, [pc, #112]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ae8:	2290      	movs	r2, #144	@ 0x90
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	508b      	str	r3, [r1, r2]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	2201      	movs	r2, #1
 8006af2:	4013      	ands	r3, r2
 8006af4:	d017      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x12e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006af6:	f7fe f8f5 	bl	8004ce4 <HAL_GetTick>
 8006afa:	0003      	movs	r3, r0
 8006afc:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006afe:	e00c      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b00:	f7fe f8f0 	bl	8004ce4 <HAL_GetTick>
 8006b04:	0002      	movs	r2, r0
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	4a17      	ldr	r2, [pc, #92]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d904      	bls.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x122>
          {
            ret = HAL_TIMEOUT;
 8006b10:	2313      	movs	r3, #19
 8006b12:	18fb      	adds	r3, r7, r3
 8006b14:	2203      	movs	r2, #3
 8006b16:	701a      	strb	r2, [r3, #0]
            break;
 8006b18:	e005      	b.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x12e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b1a:	4a0f      	ldr	r2, [pc, #60]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b1c:	2390      	movs	r3, #144	@ 0x90
 8006b1e:	58d3      	ldr	r3, [r2, r3]
 8006b20:	2202      	movs	r2, #2
 8006b22:	4013      	ands	r3, r2
 8006b24:	d0ec      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x108>
          }
        }
      }

      if (ret == HAL_OK)
 8006b26:	2313      	movs	r3, #19
 8006b28:	18fb      	adds	r3, r7, r3
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d10b      	bne.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b30:	4a09      	ldr	r2, [pc, #36]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b32:	2390      	movs	r3, #144	@ 0x90
 8006b34:	58d3      	ldr	r3, [r2, r3]
 8006b36:	4a0a      	ldr	r2, [pc, #40]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006b38:	401a      	ands	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b3e:	4906      	ldr	r1, [pc, #24]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	2290      	movs	r2, #144	@ 0x90
 8006b44:	508b      	str	r3, [r1, r2]
 8006b46:	e017      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b48:	2312      	movs	r3, #18
 8006b4a:	18fb      	adds	r3, r7, r3
 8006b4c:	2213      	movs	r2, #19
 8006b4e:	18ba      	adds	r2, r7, r2
 8006b50:	7812      	ldrb	r2, [r2, #0]
 8006b52:	701a      	strb	r2, [r3, #0]
 8006b54:	e010      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006b56:	46c0      	nop			@ (mov r8, r8)
 8006b58:	40021000 	.word	0x40021000
 8006b5c:	40007000 	.word	0x40007000
 8006b60:	fffffcff 	.word	0xfffffcff
 8006b64:	fffeffff 	.word	0xfffeffff
 8006b68:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b6c:	2312      	movs	r3, #18
 8006b6e:	18fb      	adds	r3, r7, r3
 8006b70:	2213      	movs	r2, #19
 8006b72:	18ba      	adds	r2, r7, r2
 8006b74:	7812      	ldrb	r2, [r2, #0]
 8006b76:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006b78:	2311      	movs	r3, #17
 8006b7a:	18fb      	adds	r3, r7, r3
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d105      	bne.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b82:	4ba4      	ldr	r3, [pc, #656]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006b84:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006b86:	4ba3      	ldr	r3, [pc, #652]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006b88:	49a3      	ldr	r1, [pc, #652]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8006b8a:	400a      	ands	r2, r1
 8006b8c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2201      	movs	r2, #1
 8006b94:	4013      	ands	r3, r2
 8006b96:	d00b      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b98:	4a9e      	ldr	r2, [pc, #632]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006b9a:	2388      	movs	r3, #136	@ 0x88
 8006b9c:	58d3      	ldr	r3, [r2, r3]
 8006b9e:	2203      	movs	r2, #3
 8006ba0:	4393      	bics	r3, r2
 8006ba2:	001a      	movs	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	499a      	ldr	r1, [pc, #616]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006baa:	4313      	orrs	r3, r2
 8006bac:	2288      	movs	r2, #136	@ 0x88
 8006bae:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2202      	movs	r2, #2
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	d00b      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006bba:	4a96      	ldr	r2, [pc, #600]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006bbc:	2388      	movs	r3, #136	@ 0x88
 8006bbe:	58d3      	ldr	r3, [r2, r3]
 8006bc0:	220c      	movs	r2, #12
 8006bc2:	4393      	bics	r3, r2
 8006bc4:	001a      	movs	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	4992      	ldr	r1, [pc, #584]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	2288      	movs	r2, #136	@ 0x88
 8006bd0:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2210      	movs	r2, #16
 8006bd8:	4013      	ands	r3, r2
 8006bda:	d00a      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006bdc:	4a8d      	ldr	r2, [pc, #564]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006bde:	2388      	movs	r3, #136	@ 0x88
 8006be0:	58d3      	ldr	r3, [r2, r3]
 8006be2:	4a8e      	ldr	r2, [pc, #568]	@ (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006be4:	401a      	ands	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	498a      	ldr	r1, [pc, #552]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006bec:	4313      	orrs	r3, r2
 8006bee:	2288      	movs	r2, #136	@ 0x88
 8006bf0:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2208      	movs	r2, #8
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	d00a      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8006bfc:	4a85      	ldr	r2, [pc, #532]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006bfe:	2388      	movs	r3, #136	@ 0x88
 8006c00:	58d3      	ldr	r3, [r2, r3]
 8006c02:	4a87      	ldr	r2, [pc, #540]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8006c04:	401a      	ands	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	4982      	ldr	r1, [pc, #520]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	2288      	movs	r2, #136	@ 0x88
 8006c10:	508b      	str	r3, [r1, r2]
  }
#if defined (LPUART3)
  /*-------------------------- LPUART3 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART3) == RCC_PERIPHCLK_LPUART3)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2204      	movs	r2, #4
 8006c18:	4013      	ands	r3, r2
 8006c1a:	d00b      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART3CLKSOURCE(PeriphClkInit->Lpuart3ClockSelection));

    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
 8006c1c:	4a7d      	ldr	r2, [pc, #500]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006c1e:	2388      	movs	r3, #136	@ 0x88
 8006c20:	58d3      	ldr	r3, [r2, r3]
 8006c22:	22c0      	movs	r2, #192	@ 0xc0
 8006c24:	4393      	bics	r3, r2
 8006c26:	001a      	movs	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	4979      	ldr	r1, [pc, #484]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	2288      	movs	r2, #136	@ 0x88
 8006c32:	508b      	str	r3, [r1, r2]
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2220      	movs	r2, #32
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	d00a      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c3e:	4a75      	ldr	r2, [pc, #468]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006c40:	2388      	movs	r3, #136	@ 0x88
 8006c42:	58d3      	ldr	r3, [r2, r3]
 8006c44:	4a77      	ldr	r2, [pc, #476]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006c46:	401a      	ands	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	4971      	ldr	r1, [pc, #452]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	2288      	movs	r2, #136	@ 0x88
 8006c52:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2240      	movs	r2, #64	@ 0x40
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	d00a      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c5e:	4a6d      	ldr	r2, [pc, #436]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006c60:	2388      	movs	r3, #136	@ 0x88
 8006c62:	58d3      	ldr	r3, [r2, r3]
 8006c64:	4a70      	ldr	r2, [pc, #448]	@ (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8006c66:	401a      	ands	r2, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	69db      	ldr	r3, [r3, #28]
 8006c6c:	4969      	ldr	r1, [pc, #420]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	2288      	movs	r2, #136	@ 0x88
 8006c72:	508b      	str	r3, [r1, r2]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2280      	movs	r2, #128	@ 0x80
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	d00a      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c7e:	4a65      	ldr	r2, [pc, #404]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006c80:	2388      	movs	r3, #136	@ 0x88
 8006c82:	58d3      	ldr	r3, [r2, r3]
 8006c84:	4a69      	ldr	r2, [pc, #420]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006c86:	401a      	ands	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a1b      	ldr	r3, [r3, #32]
 8006c8c:	4961      	ldr	r1, [pc, #388]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	2288      	movs	r2, #136	@ 0x88
 8006c92:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	2380      	movs	r3, #128	@ 0x80
 8006c9a:	005b      	lsls	r3, r3, #1
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	d00a      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006ca0:	4a5c      	ldr	r2, [pc, #368]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006ca2:	2388      	movs	r3, #136	@ 0x88
 8006ca4:	58d3      	ldr	r3, [r2, r3]
 8006ca6:	4a62      	ldr	r2, [pc, #392]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006ca8:	401a      	ands	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cae:	4959      	ldr	r1, [pc, #356]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	2288      	movs	r2, #136	@ 0x88
 8006cb4:	508b      	str	r3, [r1, r2]
  }
#if defined (LPTIM3)
  /*----------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	2380      	movs	r3, #128	@ 0x80
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	d00a      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006cc2:	4a54      	ldr	r2, [pc, #336]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006cc4:	2388      	movs	r3, #136	@ 0x88
 8006cc6:	58d3      	ldr	r3, [r2, r3]
 8006cc8:	4a5a      	ldr	r2, [pc, #360]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8006cca:	401a      	ands	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cd0:	4950      	ldr	r1, [pc, #320]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	2288      	movs	r2, #136	@ 0x88
 8006cd6:	508b      	str	r3, [r1, r2]
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	2380      	movs	r3, #128	@ 0x80
 8006cde:	01db      	lsls	r3, r3, #7
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	d017      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ce8:	2380      	movs	r3, #128	@ 0x80
 8006cea:	055b      	lsls	r3, r3, #21
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d106      	bne.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x306>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 8006cf0:	4b48      	ldr	r3, [pc, #288]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006cf2:	68da      	ldr	r2, [r3, #12]
 8006cf4:	4b47      	ldr	r3, [pc, #284]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006cf6:	2180      	movs	r1, #128	@ 0x80
 8006cf8:	0249      	lsls	r1, r1, #9
 8006cfa:	430a      	orrs	r2, r1
 8006cfc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006cfe:	4a45      	ldr	r2, [pc, #276]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006d00:	2388      	movs	r3, #136	@ 0x88
 8006d02:	58d3      	ldr	r3, [r2, r3]
 8006d04:	4a4c      	ldr	r2, [pc, #304]	@ (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x440>)
 8006d06:	401a      	ands	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d0c:	4941      	ldr	r1, [pc, #260]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	2288      	movs	r2, #136	@ 0x88
 8006d12:	508b      	str	r3, [r1, r2]
  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	2380      	movs	r3, #128	@ 0x80
 8006d1a:	015b      	lsls	r3, r3, #5
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	d017      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLQ)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d24:	2380      	movs	r3, #128	@ 0x80
 8006d26:	051b      	lsls	r3, r3, #20
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d106      	bne.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8006d2c:	4b39      	ldr	r3, [pc, #228]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006d2e:	68da      	ldr	r2, [r3, #12]
 8006d30:	4b38      	ldr	r3, [pc, #224]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006d32:	2180      	movs	r1, #128	@ 0x80
 8006d34:	0449      	lsls	r1, r1, #17
 8006d36:	430a      	orrs	r2, r1
 8006d38:	60da      	str	r2, [r3, #12]
    }
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d3a:	4a36      	ldr	r2, [pc, #216]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006d3c:	2388      	movs	r3, #136	@ 0x88
 8006d3e:	58d3      	ldr	r3, [r2, r3]
 8006d40:	4a3e      	ldr	r2, [pc, #248]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006d42:	401a      	ands	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d48:	4932      	ldr	r1, [pc, #200]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	2288      	movs	r2, #136	@ 0x88
 8006d4e:	508b      	str	r3, [r1, r2]

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	2380      	movs	r3, #128	@ 0x80
 8006d56:	019b      	lsls	r3, r3, #6
 8006d58:	4013      	ands	r3, r2
 8006d5a:	d017      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d60:	2380      	movs	r3, #128	@ 0x80
 8006d62:	051b      	lsls	r3, r3, #20
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d106      	bne.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x37e>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8006d68:	4b2a      	ldr	r3, [pc, #168]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006d6a:	68da      	ldr	r2, [r3, #12]
 8006d6c:	4b29      	ldr	r3, [pc, #164]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006d6e:	2180      	movs	r1, #128	@ 0x80
 8006d70:	0449      	lsls	r1, r1, #17
 8006d72:	430a      	orrs	r2, r1
 8006d74:	60da      	str	r2, [r3, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d76:	4a27      	ldr	r2, [pc, #156]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006d78:	2388      	movs	r3, #136	@ 0x88
 8006d7a:	58d3      	ldr	r3, [r2, r3]
 8006d7c:	4a2f      	ldr	r2, [pc, #188]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006d7e:	401a      	ands	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d84:	4923      	ldr	r1, [pc, #140]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	2288      	movs	r2, #136	@ 0x88
 8006d8a:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	2380      	movs	r3, #128	@ 0x80
 8006d92:	00db      	lsls	r3, r3, #3
 8006d94:	4013      	ands	r3, r2
 8006d96:	d017      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d9c:	2380      	movs	r3, #128	@ 0x80
 8006d9e:	045b      	lsls	r3, r3, #17
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d106      	bne.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8006da4:	4b1b      	ldr	r3, [pc, #108]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006da6:	68da      	ldr	r2, [r3, #12]
 8006da8:	4b1a      	ldr	r3, [pc, #104]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006daa:	2180      	movs	r1, #128	@ 0x80
 8006dac:	0449      	lsls	r1, r1, #17
 8006dae:	430a      	orrs	r2, r1
 8006db0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006db2:	4a18      	ldr	r2, [pc, #96]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006db4:	2388      	movs	r3, #136	@ 0x88
 8006db6:	58d3      	ldr	r3, [r2, r3]
 8006db8:	4a21      	ldr	r2, [pc, #132]	@ (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8006dba:	401a      	ands	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc0:	4914      	ldr	r1, [pc, #80]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	2288      	movs	r2, #136	@ 0x88
 8006dc6:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	2380      	movs	r3, #128	@ 0x80
 8006dce:	011b      	lsls	r3, r3, #4
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	d017      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006dd8:	2380      	movs	r3, #128	@ 0x80
 8006dda:	049b      	lsls	r3, r3, #18
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d106      	bne.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8006de0:	4b0c      	ldr	r3, [pc, #48]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006de2:	68da      	ldr	r2, [r3, #12]
 8006de4:	4b0b      	ldr	r3, [pc, #44]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006de6:	2180      	movs	r1, #128	@ 0x80
 8006de8:	0449      	lsls	r1, r1, #17
 8006dea:	430a      	orrs	r2, r1
 8006dec:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006dee:	4a09      	ldr	r2, [pc, #36]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006df0:	2388      	movs	r3, #136	@ 0x88
 8006df2:	58d3      	ldr	r3, [r2, r3]
 8006df4:	4a12      	ldr	r2, [pc, #72]	@ (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8006df6:	401a      	ands	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dfc:	4905      	ldr	r1, [pc, #20]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	2288      	movs	r2, #136	@ 0x88
 8006e02:	508b      	str	r3, [r1, r2]

  }

  return status;
 8006e04:	2312      	movs	r3, #18
 8006e06:	18fb      	adds	r3, r7, r3
 8006e08:	781b      	ldrb	r3, [r3, #0]
}
 8006e0a:	0018      	movs	r0, r3
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	b006      	add	sp, #24
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	46c0      	nop			@ (mov r8, r8)
 8006e14:	40021000 	.word	0x40021000
 8006e18:	efffffff 	.word	0xefffffff
 8006e1c:	fffff3ff 	.word	0xfffff3ff
 8006e20:	fffffcff 	.word	0xfffffcff
 8006e24:	ffffcfff 	.word	0xffffcfff
 8006e28:	fffcffff 	.word	0xfffcffff
 8006e2c:	fff3ffff 	.word	0xfff3ffff
 8006e30:	ffcfffff 	.word	0xffcfffff
 8006e34:	ff3fffff 	.word	0xff3fffff
 8006e38:	cfffffff 	.word	0xcfffffff
 8006e3c:	f3ffffff 	.word	0xf3ffffff
 8006e40:	feffffff 	.word	0xfeffffff

08006e44 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM1  TIM1 peripheral clock (only for devices with TIM1)
  *            @arg @ref RCC_PERIPHCLK_TIM15  TIM15 peripheral clock (only for devices with TIM15)
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006e44:	b590      	push	{r4, r7, lr}
 8006e46:	b089      	sub	sp, #36	@ 0x24
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	61fb      	str	r3, [r7, #28]
  PLL_ClocksTypeDef pll_freq;
  uint32_t msirange;
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	2380      	movs	r3, #128	@ 0x80
 8006e54:	021b      	lsls	r3, r3, #8
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d154      	bne.n	8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
  {
    /* Get the current RCC_PERIPHCLK_RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006e5a:	4ad5      	ldr	r2, [pc, #852]	@ (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8006e5c:	2390      	movs	r3, #144	@ 0x90
 8006e5e:	58d2      	ldr	r2, [r2, r3]
 8006e60:	23c0      	movs	r3, #192	@ 0xc0
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	4013      	ands	r3, r2
 8006e66:	617b      	str	r3, [r7, #20]

    switch (srcclk)
 8006e68:	697a      	ldr	r2, [r7, #20]
 8006e6a:	23c0      	movs	r3, #192	@ 0xc0
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d039      	beq.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	23c0      	movs	r3, #192	@ 0xc0
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d901      	bls.n	8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006e7c:	f000 fd1a 	bl	80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8006e80:	697a      	ldr	r2, [r7, #20]
 8006e82:	2380      	movs	r3, #128	@ 0x80
 8006e84:	005b      	lsls	r3, r3, #1
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d006      	beq.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	2380      	movs	r3, #128	@ 0x80
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d00f      	beq.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 8006e94:	f000 fd0e 	bl	80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006e98:	4ac5      	ldr	r2, [pc, #788]	@ (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8006e9a:	2390      	movs	r3, #144	@ 0x90
 8006e9c:	58d3      	ldr	r3, [r2, r3]
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	d001      	beq.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 8006ea6:	f000 fd07 	bl	80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
          frequency = LSE_VALUE;
 8006eaa:	2380      	movs	r3, #128	@ 0x80
 8006eac:	021b      	lsls	r3, r3, #8
 8006eae:	61fb      	str	r3, [r7, #28]
        break;
 8006eb0:	f000 fd02 	bl	80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006eb4:	4abe      	ldr	r2, [pc, #760]	@ (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8006eb6:	2394      	movs	r3, #148	@ 0x94
 8006eb8:	58d3      	ldr	r3, [r2, r3]
 8006eba:	2202      	movs	r2, #2
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d001      	beq.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 8006ec2:	f000 fcfb 	bl	80078bc <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8006ec6:	4aba      	ldr	r2, [pc, #744]	@ (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8006ec8:	2394      	movs	r3, #148	@ 0x94
 8006eca:	58d3      	ldr	r3, [r2, r3]
 8006ecc:	2204      	movs	r2, #4
 8006ece:	4013      	ands	r3, r2
 8006ed0:	2b04      	cmp	r3, #4
 8006ed2:	d103      	bne.n	8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSI_VALUE / 128U;
 8006ed4:	23fa      	movs	r3, #250	@ 0xfa
 8006ed6:	61fb      	str	r3, [r7, #28]
        break;
 8006ed8:	f000 fcf0 	bl	80078bc <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
            frequency = LSI_VALUE;
 8006edc:	23fa      	movs	r3, #250	@ 0xfa
 8006ede:	01db      	lsls	r3, r3, #7
 8006ee0:	61fb      	str	r3, [r7, #28]
        break;
 8006ee2:	f000 fceb 	bl	80078bc <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006ee6:	4bb2      	ldr	r3, [pc, #712]	@ (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	2380      	movs	r3, #128	@ 0x80
 8006eec:	029b      	lsls	r3, r3, #10
 8006eee:	401a      	ands	r2, r3
 8006ef0:	2380      	movs	r3, #128	@ 0x80
 8006ef2:	029b      	lsls	r3, r3, #10
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d001      	beq.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8006ef8:	f000 fce2 	bl	80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
          frequency = HSE_VALUE / 32U;
 8006efc:	4bad      	ldr	r3, [pc, #692]	@ (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 8006efe:	61fb      	str	r3, [r7, #28]
        break;
 8006f00:	f000 fcde 	bl	80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	2380      	movs	r3, #128	@ 0x80
 8006f08:	029b      	lsls	r3, r3, #10
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d100      	bne.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8006f0e:	e11a      	b.n	8007146 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	2380      	movs	r3, #128	@ 0x80
 8006f14:	029b      	lsls	r3, r3, #10
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d901      	bls.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8006f1a:	f000 fcd3 	bl	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	2380      	movs	r3, #128	@ 0x80
 8006f22:	025b      	lsls	r3, r3, #9
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d100      	bne.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8006f28:	e10d      	b.n	8007146 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	2380      	movs	r3, #128	@ 0x80
 8006f2e:	025b      	lsls	r3, r3, #9
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d901      	bls.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006f34:	f000 fcc6 	bl	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	2380      	movs	r3, #128	@ 0x80
 8006f3c:	01db      	lsls	r3, r3, #7
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d100      	bne.n	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006f42:	e1eb      	b.n	800731c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	2380      	movs	r3, #128	@ 0x80
 8006f48:	01db      	lsls	r3, r3, #7
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d901      	bls.n	8006f52 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8006f4e:	f000 fcb9 	bl	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	2380      	movs	r3, #128	@ 0x80
 8006f56:	019b      	lsls	r3, r3, #6
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d101      	bne.n	8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 8006f5c:	f000 fc50 	bl	8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	2380      	movs	r3, #128	@ 0x80
 8006f64:	019b      	lsls	r3, r3, #6
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d901      	bls.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8006f6a:	f000 fcab 	bl	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	2380      	movs	r3, #128	@ 0x80
 8006f72:	015b      	lsls	r3, r3, #5
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d101      	bne.n	8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006f78:	f000 fbe2 	bl	8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	2380      	movs	r3, #128	@ 0x80
 8006f80:	015b      	lsls	r3, r3, #5
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d901      	bls.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006f86:	f000 fc9d 	bl	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	2380      	movs	r3, #128	@ 0x80
 8006f8e:	011b      	lsls	r3, r3, #4
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d101      	bne.n	8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8006f94:	f000 fba9 	bl	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	2380      	movs	r3, #128	@ 0x80
 8006f9c:	011b      	lsls	r3, r3, #4
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d901      	bls.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8006fa2:	f000 fc8f 	bl	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	2380      	movs	r3, #128	@ 0x80
 8006faa:	00db      	lsls	r3, r3, #3
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d101      	bne.n	8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8006fb0:	f000 fb70 	bl	8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	2380      	movs	r3, #128	@ 0x80
 8006fb8:	00db      	lsls	r3, r3, #3
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d901      	bls.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8006fbe:	f000 fc81 	bl	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	2380      	movs	r3, #128	@ 0x80
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d100      	bne.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 8006fcc:	e305      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x796>
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	2380      	movs	r3, #128	@ 0x80
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d901      	bls.n	8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 8006fd8:	f000 fc74 	bl	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	2380      	movs	r3, #128	@ 0x80
 8006fe0:	005b      	lsls	r3, r3, #1
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d100      	bne.n	8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8006fe6:	e29b      	b.n	8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	2380      	movs	r3, #128	@ 0x80
 8006fec:	005b      	lsls	r3, r3, #1
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d901      	bls.n	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 8006ff2:	f000 fc67 	bl	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2b80      	cmp	r3, #128	@ 0x80
 8006ffa:	d100      	bne.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 8006ffc:	e22f      	b.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2b80      	cmp	r3, #128	@ 0x80
 8007002:	d901      	bls.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8007004:	f000 fc5e 	bl	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b20      	cmp	r3, #32
 800700c:	d80f      	bhi.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d101      	bne.n	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 8007014:	f000 fc56 	bl	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2b20      	cmp	r3, #32
 800701c:	d901      	bls.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 800701e:	f000 fc51 	bl	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	009a      	lsls	r2, r3, #2
 8007026:	4b64      	ldr	r3, [pc, #400]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 8007028:	18d3      	adds	r3, r2, r3
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	469f      	mov	pc, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2b40      	cmp	r3, #64	@ 0x40
 8007032:	d100      	bne.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 8007034:	e1df      	b.n	80073f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            break;
        }
        break;
      }
      default:
        break;
 8007036:	f000 fc45 	bl	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800703a:	4a5d      	ldr	r2, [pc, #372]	@ (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800703c:	2388      	movs	r3, #136	@ 0x88
 800703e:	58d3      	ldr	r3, [r2, r3]
 8007040:	2203      	movs	r2, #3
 8007042:	4013      	ands	r3, r2
 8007044:	617b      	str	r3, [r7, #20]
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	2b03      	cmp	r3, #3
 800704a:	d025      	beq.n	8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	2b03      	cmp	r3, #3
 8007050:	d82d      	bhi.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	2b02      	cmp	r3, #2
 8007056:	d013      	beq.n	8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	2b02      	cmp	r3, #2
 800705c:	d827      	bhi.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d003      	beq.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d005      	beq.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
            break;
 800706a:	e020      	b.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
            frequency = HAL_RCC_GetPCLK1Freq();
 800706c:	f7ff fc40 	bl	80068f0 <HAL_RCC_GetPCLK1Freq>
 8007070:	0003      	movs	r3, r0
 8007072:	61fb      	str	r3, [r7, #28]
            break;
 8007074:	e022      	b.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            frequency = HAL_RCC_GetSysClockFreq();
 8007076:	f7ff fb95 	bl	80067a4 <HAL_RCC_GetSysClockFreq>
 800707a:	0003      	movs	r3, r0
 800707c:	61fb      	str	r3, [r7, #28]
            break;
 800707e:	e01d      	b.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007080:	4b4b      	ldr	r3, [pc, #300]	@ (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	2380      	movs	r3, #128	@ 0x80
 8007086:	00db      	lsls	r3, r3, #3
 8007088:	401a      	ands	r2, r3
 800708a:	2380      	movs	r3, #128	@ 0x80
 800708c:	00db      	lsls	r3, r3, #3
 800708e:	429a      	cmp	r2, r3
 8007090:	d110      	bne.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
              frequency = HSI_VALUE;
 8007092:	4b4a      	ldr	r3, [pc, #296]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 8007094:	61fb      	str	r3, [r7, #28]
            break;
 8007096:	e00d      	b.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007098:	4a45      	ldr	r2, [pc, #276]	@ (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800709a:	2390      	movs	r3, #144	@ 0x90
 800709c:	58d3      	ldr	r3, [r2, r3]
 800709e:	2202      	movs	r2, #2
 80070a0:	4013      	ands	r3, r2
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d109      	bne.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0x276>
              frequency = LSE_VALUE;
 80070a6:	2380      	movs	r3, #128	@ 0x80
 80070a8:	021b      	lsls	r3, r3, #8
 80070aa:	61fb      	str	r3, [r7, #28]
            break;
 80070ac:	e005      	b.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0x276>
            break;
 80070ae:	46c0      	nop			@ (mov r8, r8)
 80070b0:	f000 fc09 	bl	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80070b4:	46c0      	nop			@ (mov r8, r8)
 80070b6:	f000 fc06 	bl	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80070ba:	46c0      	nop			@ (mov r8, r8)
        break;
 80070bc:	f000 fc03 	bl	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80070c0:	4a3b      	ldr	r2, [pc, #236]	@ (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80070c2:	2388      	movs	r3, #136	@ 0x88
 80070c4:	58d3      	ldr	r3, [r2, r3]
 80070c6:	220c      	movs	r2, #12
 80070c8:	4013      	ands	r3, r2
 80070ca:	617b      	str	r3, [r7, #20]
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	2b0c      	cmp	r3, #12
 80070d0:	d025      	beq.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0x2da>
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	2b0c      	cmp	r3, #12
 80070d6:	d82d      	bhi.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	2b08      	cmp	r3, #8
 80070dc:	d013      	beq.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	2b08      	cmp	r3, #8
 80070e2:	d827      	bhi.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d003      	beq.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	2b04      	cmp	r3, #4
 80070ee:	d005      	beq.n	80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
            break;
 80070f0:	e020      	b.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
            frequency = HAL_RCC_GetPCLK1Freq();
 80070f2:	f7ff fbfd 	bl	80068f0 <HAL_RCC_GetPCLK1Freq>
 80070f6:	0003      	movs	r3, r0
 80070f8:	61fb      	str	r3, [r7, #28]
            break;
 80070fa:	e022      	b.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            frequency = HAL_RCC_GetSysClockFreq();
 80070fc:	f7ff fb52 	bl	80067a4 <HAL_RCC_GetSysClockFreq>
 8007100:	0003      	movs	r3, r0
 8007102:	61fb      	str	r3, [r7, #28]
            break;
 8007104:	e01d      	b.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007106:	4b2a      	ldr	r3, [pc, #168]	@ (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	2380      	movs	r3, #128	@ 0x80
 800710c:	00db      	lsls	r3, r3, #3
 800710e:	401a      	ands	r2, r3
 8007110:	2380      	movs	r3, #128	@ 0x80
 8007112:	00db      	lsls	r3, r3, #3
 8007114:	429a      	cmp	r2, r3
 8007116:	d110      	bne.n	800713a <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
              frequency = HSI_VALUE;
 8007118:	4b28      	ldr	r3, [pc, #160]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 800711a:	61fb      	str	r3, [r7, #28]
            break;
 800711c:	e00d      	b.n	800713a <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800711e:	4a24      	ldr	r2, [pc, #144]	@ (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007120:	2390      	movs	r3, #144	@ 0x90
 8007122:	58d3      	ldr	r3, [r2, r3]
 8007124:	2202      	movs	r2, #2
 8007126:	4013      	ands	r3, r2
 8007128:	2b02      	cmp	r3, #2
 800712a:	d109      	bne.n	8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
              frequency = LSE_VALUE;
 800712c:	2380      	movs	r3, #128	@ 0x80
 800712e:	021b      	lsls	r3, r3, #8
 8007130:	61fb      	str	r3, [r7, #28]
            break;
 8007132:	e005      	b.n	8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
            break;
 8007134:	46c0      	nop			@ (mov r8, r8)
 8007136:	f000 fbc6 	bl	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800713a:	46c0      	nop			@ (mov r8, r8)
 800713c:	f000 fbc3 	bl	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007140:	46c0      	nop			@ (mov r8, r8)
        break;
 8007142:	f000 fbc0 	bl	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        frequency = HAL_RCC_GetPCLK1Freq();
 8007146:	f7ff fbd3 	bl	80068f0 <HAL_RCC_GetPCLK1Freq>
 800714a:	0003      	movs	r3, r0
 800714c:	61fb      	str	r3, [r7, #28]
        break;
 800714e:	f000 fbba 	bl	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007152:	4a17      	ldr	r2, [pc, #92]	@ (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007154:	2388      	movs	r3, #136	@ 0x88
 8007156:	58d2      	ldr	r2, [r2, r3]
 8007158:	23c0      	movs	r3, #192	@ 0xc0
 800715a:	011b      	lsls	r3, r3, #4
 800715c:	4013      	ands	r3, r2
 800715e:	617b      	str	r3, [r7, #20]
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	23c0      	movs	r3, #192	@ 0xc0
 8007164:	011b      	lsls	r3, r3, #4
 8007166:	429a      	cmp	r2, r3
 8007168:	d036      	beq.n	80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	23c0      	movs	r3, #192	@ 0xc0
 800716e:	011b      	lsls	r3, r3, #4
 8007170:	429a      	cmp	r2, r3
 8007172:	d83c      	bhi.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	2380      	movs	r3, #128	@ 0x80
 8007178:	011b      	lsls	r3, r3, #4
 800717a:	429a      	cmp	r2, r3
 800717c:	d020      	beq.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	2380      	movs	r3, #128	@ 0x80
 8007182:	011b      	lsls	r3, r3, #4
 8007184:	429a      	cmp	r2, r3
 8007186:	d832      	bhi.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d005      	beq.n	800719a <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	2380      	movs	r3, #128	@ 0x80
 8007192:	00db      	lsls	r3, r3, #3
 8007194:	429a      	cmp	r2, r3
 8007196:	d005      	beq.n	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
            break;
 8007198:	e029      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 800719a:	f7ff fba9 	bl	80068f0 <HAL_RCC_GetPCLK1Freq>
 800719e:	0003      	movs	r3, r0
 80071a0:	61fb      	str	r3, [r7, #28]
            break;
 80071a2:	e02b      	b.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
            frequency = HAL_RCC_GetSysClockFreq();
 80071a4:	f7ff fafe 	bl	80067a4 <HAL_RCC_GetSysClockFreq>
 80071a8:	0003      	movs	r3, r0
 80071aa:	61fb      	str	r3, [r7, #28]
            break;
 80071ac:	e026      	b.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80071ae:	46c0      	nop			@ (mov r8, r8)
 80071b0:	40021000 	.word	0x40021000
 80071b4:	0001e848 	.word	0x0001e848
 80071b8:	08009a70 	.word	0x08009a70
 80071bc:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80071c0:	4bbb      	ldr	r3, [pc, #748]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	2380      	movs	r3, #128	@ 0x80
 80071c6:	00db      	lsls	r3, r3, #3
 80071c8:	401a      	ands	r2, r3
 80071ca:	2380      	movs	r3, #128	@ 0x80
 80071cc:	00db      	lsls	r3, r3, #3
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d110      	bne.n	80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
              frequency = HSI_VALUE;
 80071d2:	4bb8      	ldr	r3, [pc, #736]	@ (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 80071d4:	61fb      	str	r3, [r7, #28]
            break;
 80071d6:	e00d      	b.n	80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80071d8:	4ab5      	ldr	r2, [pc, #724]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80071da:	2390      	movs	r3, #144	@ 0x90
 80071dc:	58d3      	ldr	r3, [r2, r3]
 80071de:	2202      	movs	r2, #2
 80071e0:	4013      	ands	r3, r2
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d109      	bne.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
              frequency = LSE_VALUE;
 80071e6:	2380      	movs	r3, #128	@ 0x80
 80071e8:	021b      	lsls	r3, r3, #8
 80071ea:	61fb      	str	r3, [r7, #28]
            break;
 80071ec:	e005      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
            break;
 80071ee:	46c0      	nop			@ (mov r8, r8)
 80071f0:	f000 fb69 	bl	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80071f4:	46c0      	nop			@ (mov r8, r8)
 80071f6:	f000 fb66 	bl	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80071fa:	46c0      	nop			@ (mov r8, r8)
        break;
 80071fc:	f000 fb63 	bl	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 8007200:	4aab      	ldr	r2, [pc, #684]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8007202:	2388      	movs	r3, #136	@ 0x88
 8007204:	58d2      	ldr	r2, [r2, r3]
 8007206:	23c0      	movs	r3, #192	@ 0xc0
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4013      	ands	r3, r2
 800720c:	617b      	str	r3, [r7, #20]
 800720e:	697a      	ldr	r2, [r7, #20]
 8007210:	23c0      	movs	r3, #192	@ 0xc0
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	429a      	cmp	r2, r3
 8007216:	d02d      	beq.n	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	23c0      	movs	r3, #192	@ 0xc0
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	429a      	cmp	r2, r3
 8007220:	d833      	bhi.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	2380      	movs	r3, #128	@ 0x80
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	429a      	cmp	r2, r3
 800722a:	d017      	beq.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	2380      	movs	r3, #128	@ 0x80
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	429a      	cmp	r2, r3
 8007234:	d829      	bhi.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d005      	beq.n	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 800723c:	697a      	ldr	r2, [r7, #20]
 800723e:	2380      	movs	r3, #128	@ 0x80
 8007240:	005b      	lsls	r3, r3, #1
 8007242:	429a      	cmp	r2, r3
 8007244:	d005      	beq.n	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            break;
 8007246:	e020      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
            frequency = HAL_RCC_GetPCLK1Freq();
 8007248:	f7ff fb52 	bl	80068f0 <HAL_RCC_GetPCLK1Freq>
 800724c:	0003      	movs	r3, r0
 800724e:	61fb      	str	r3, [r7, #28]
            break;
 8007250:	e022      	b.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            frequency = HAL_RCC_GetSysClockFreq();
 8007252:	f7ff faa7 	bl	80067a4 <HAL_RCC_GetSysClockFreq>
 8007256:	0003      	movs	r3, r0
 8007258:	61fb      	str	r3, [r7, #28]
            break;
 800725a:	e01d      	b.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800725c:	4b94      	ldr	r3, [pc, #592]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	2380      	movs	r3, #128	@ 0x80
 8007262:	00db      	lsls	r3, r3, #3
 8007264:	401a      	ands	r2, r3
 8007266:	2380      	movs	r3, #128	@ 0x80
 8007268:	00db      	lsls	r3, r3, #3
 800726a:	429a      	cmp	r2, r3
 800726c:	d110      	bne.n	8007290 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
              frequency = HSI_VALUE;
 800726e:	4b91      	ldr	r3, [pc, #580]	@ (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8007270:	61fb      	str	r3, [r7, #28]
            break;
 8007272:	e00d      	b.n	8007290 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007274:	4a8e      	ldr	r2, [pc, #568]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8007276:	2390      	movs	r3, #144	@ 0x90
 8007278:	58d3      	ldr	r3, [r2, r3]
 800727a:	2202      	movs	r2, #2
 800727c:	4013      	ands	r3, r2
 800727e:	2b02      	cmp	r3, #2
 8007280:	d109      	bne.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
              frequency = LSE_VALUE;
 8007282:	2380      	movs	r3, #128	@ 0x80
 8007284:	021b      	lsls	r3, r3, #8
 8007286:	61fb      	str	r3, [r7, #28]
            break;
 8007288:	e005      	b.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            break;
 800728a:	46c0      	nop			@ (mov r8, r8)
 800728c:	f000 fb1b 	bl	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007290:	46c0      	nop			@ (mov r8, r8)
 8007292:	f000 fb18 	bl	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007296:	46c0      	nop			@ (mov r8, r8)
        break;
 8007298:	f000 fb15 	bl	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART3_SOURCE();
 800729c:	4a84      	ldr	r2, [pc, #528]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800729e:	2388      	movs	r3, #136	@ 0x88
 80072a0:	58d3      	ldr	r3, [r2, r3]
 80072a2:	22c0      	movs	r2, #192	@ 0xc0
 80072a4:	4013      	ands	r3, r2
 80072a6:	617b      	str	r3, [r7, #20]
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80072ac:	d025      	beq.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	2bc0      	cmp	r3, #192	@ 0xc0
 80072b2:	d82d      	bhi.n	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	2b80      	cmp	r3, #128	@ 0x80
 80072b8:	d013      	beq.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	2b80      	cmp	r3, #128	@ 0x80
 80072be:	d827      	bhi.n	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d003      	beq.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	2b40      	cmp	r3, #64	@ 0x40
 80072ca:	d005      	beq.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            break;
 80072cc:	e020      	b.n	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 80072ce:	f7ff fb0f 	bl	80068f0 <HAL_RCC_GetPCLK1Freq>
 80072d2:	0003      	movs	r3, r0
 80072d4:	61fb      	str	r3, [r7, #28]
            break;
 80072d6:	e020      	b.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            frequency = HAL_RCC_GetSysClockFreq();
 80072d8:	f7ff fa64 	bl	80067a4 <HAL_RCC_GetSysClockFreq>
 80072dc:	0003      	movs	r3, r0
 80072de:	61fb      	str	r3, [r7, #28]
            break;
 80072e0:	e01b      	b.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80072e2:	4b73      	ldr	r3, [pc, #460]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	2380      	movs	r3, #128	@ 0x80
 80072e8:	00db      	lsls	r3, r3, #3
 80072ea:	401a      	ands	r2, r3
 80072ec:	2380      	movs	r3, #128	@ 0x80
 80072ee:	00db      	lsls	r3, r3, #3
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d10f      	bne.n	8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
              frequency = HSI_VALUE;
 80072f4:	4b6f      	ldr	r3, [pc, #444]	@ (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 80072f6:	61fb      	str	r3, [r7, #28]
            break;
 80072f8:	e00c      	b.n	8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80072fa:	4a6d      	ldr	r2, [pc, #436]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80072fc:	2390      	movs	r3, #144	@ 0x90
 80072fe:	58d3      	ldr	r3, [r2, r3]
 8007300:	2202      	movs	r2, #2
 8007302:	4013      	ands	r3, r2
 8007304:	2b02      	cmp	r3, #2
 8007306:	d107      	bne.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
              frequency = LSE_VALUE;
 8007308:	2380      	movs	r3, #128	@ 0x80
 800730a:	021b      	lsls	r3, r3, #8
 800730c:	61fb      	str	r3, [r7, #28]
            break;
 800730e:	e003      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
            break;
 8007310:	46c0      	nop			@ (mov r8, r8)
 8007312:	e2d8      	b.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007314:	46c0      	nop			@ (mov r8, r8)
 8007316:	e2d6      	b.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007318:	46c0      	nop			@ (mov r8, r8)
        break;
 800731a:	e2d4      	b.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800731c:	4a64      	ldr	r2, [pc, #400]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800731e:	2388      	movs	r3, #136	@ 0x88
 8007320:	58d2      	ldr	r2, [r2, r3]
 8007322:	23c0      	movs	r3, #192	@ 0xc0
 8007324:	059b      	lsls	r3, r3, #22
 8007326:	4013      	ands	r3, r2
 8007328:	617b      	str	r3, [r7, #20]
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	2380      	movs	r3, #128	@ 0x80
 800732e:	059b      	lsls	r3, r3, #22
 8007330:	429a      	cmp	r2, r3
 8007332:	d012      	beq.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8007334:	697a      	ldr	r2, [r7, #20]
 8007336:	2380      	movs	r3, #128	@ 0x80
 8007338:	059b      	lsls	r3, r3, #22
 800733a:	429a      	cmp	r2, r3
 800733c:	d825      	bhi.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d005      	beq.n	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	2380      	movs	r3, #128	@ 0x80
 8007348:	055b      	lsls	r3, r3, #21
 800734a:	429a      	cmp	r2, r3
 800734c:	d014      	beq.n	8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
            break;
 800734e:	e01c      	b.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0x546>
            frequency = HAL_RCC_GetSysClockFreq();
 8007350:	f7ff fa28 	bl	80067a4 <HAL_RCC_GetSysClockFreq>
 8007354:	0003      	movs	r3, r0
 8007356:	61fb      	str	r3, [r7, #28]
            break;
 8007358:	e018      	b.n	800738c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800735a:	4b55      	ldr	r3, [pc, #340]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	2380      	movs	r3, #128	@ 0x80
 8007360:	00db      	lsls	r3, r3, #3
 8007362:	401a      	ands	r2, r3
 8007364:	2380      	movs	r3, #128	@ 0x80
 8007366:	00db      	lsls	r3, r3, #3
 8007368:	429a      	cmp	r2, r3
 800736a:	d102      	bne.n	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
              frequency = HSI_VALUE;
 800736c:	4b51      	ldr	r3, [pc, #324]	@ (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 800736e:	61fb      	str	r3, [r7, #28]
            break;
 8007370:	e00c      	b.n	800738c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
              frequency = 0U;
 8007372:	2300      	movs	r3, #0
 8007374:	61fb      	str	r3, [r7, #28]
            break;
 8007376:	e009      	b.n	800738c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8007378:	2408      	movs	r4, #8
 800737a:	193b      	adds	r3, r7, r4
 800737c:	0018      	movs	r0, r3
 800737e:	f000 faad 	bl	80078dc <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_P_Frequency;
 8007382:	193b      	adds	r3, r7, r4
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	61fb      	str	r3, [r7, #28]
            break;
 8007388:	e000      	b.n	800738c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            break;
 800738a:	46c0      	nop			@ (mov r8, r8)
        break;
 800738c:	e29b      	b.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800738e:	4a48      	ldr	r2, [pc, #288]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8007390:	2388      	movs	r3, #136	@ 0x88
 8007392:	58d2      	ldr	r2, [r2, r3]
 8007394:	23c0      	movs	r3, #192	@ 0xc0
 8007396:	019b      	lsls	r3, r3, #6
 8007398:	4013      	ands	r3, r2
 800739a:	617b      	str	r3, [r7, #20]
 800739c:	697a      	ldr	r2, [r7, #20]
 800739e:	2380      	movs	r3, #128	@ 0x80
 80073a0:	019b      	lsls	r3, r3, #6
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d017      	beq.n	80073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	2380      	movs	r3, #128	@ 0x80
 80073aa:	019b      	lsls	r3, r3, #6
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d81e      	bhi.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d005      	beq.n	80073c2 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 80073b6:	697a      	ldr	r2, [r7, #20]
 80073b8:	2380      	movs	r3, #128	@ 0x80
 80073ba:	015b      	lsls	r3, r3, #5
 80073bc:	429a      	cmp	r2, r3
 80073be:	d005      	beq.n	80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x588>
            break;
 80073c0:	e015      	b.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 80073c2:	f7ff fa95 	bl	80068f0 <HAL_RCC_GetPCLK1Freq>
 80073c6:	0003      	movs	r3, r0
 80073c8:	61fb      	str	r3, [r7, #28]
            break;
 80073ca:	e013      	b.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            frequency = HAL_RCC_GetSysClockFreq();
 80073cc:	f7ff f9ea 	bl	80067a4 <HAL_RCC_GetSysClockFreq>
 80073d0:	0003      	movs	r3, r0
 80073d2:	61fb      	str	r3, [r7, #28]
            break;
 80073d4:	e00e      	b.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80073d6:	4b36      	ldr	r3, [pc, #216]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	2380      	movs	r3, #128	@ 0x80
 80073dc:	00db      	lsls	r3, r3, #3
 80073de:	401a      	ands	r2, r3
 80073e0:	2380      	movs	r3, #128	@ 0x80
 80073e2:	00db      	lsls	r3, r3, #3
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d104      	bne.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
              frequency = HSI_VALUE;
 80073e8:	4b32      	ldr	r3, [pc, #200]	@ (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 80073ea:	61fb      	str	r3, [r7, #28]
            break;
 80073ec:	e001      	b.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
            break;
 80073ee:	46c0      	nop			@ (mov r8, r8)
 80073f0:	e269      	b.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80073f2:	46c0      	nop			@ (mov r8, r8)
        break;
 80073f4:	e267      	b.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80073f6:	4a2e      	ldr	r2, [pc, #184]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80073f8:	2388      	movs	r3, #136	@ 0x88
 80073fa:	58d2      	ldr	r2, [r2, r3]
 80073fc:	23c0      	movs	r3, #192	@ 0xc0
 80073fe:	029b      	lsls	r3, r3, #10
 8007400:	4013      	ands	r3, r2
 8007402:	617b      	str	r3, [r7, #20]
 8007404:	697a      	ldr	r2, [r7, #20]
 8007406:	2380      	movs	r3, #128	@ 0x80
 8007408:	029b      	lsls	r3, r3, #10
 800740a:	429a      	cmp	r2, r3
 800740c:	d017      	beq.n	800743e <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
 800740e:	697a      	ldr	r2, [r7, #20]
 8007410:	2380      	movs	r3, #128	@ 0x80
 8007412:	029b      	lsls	r3, r3, #10
 8007414:	429a      	cmp	r2, r3
 8007416:	d81e      	bhi.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d005      	beq.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	2380      	movs	r3, #128	@ 0x80
 8007422:	025b      	lsls	r3, r3, #9
 8007424:	429a      	cmp	r2, r3
 8007426:	d005      	beq.n	8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
            break;
 8007428:	e015      	b.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
            frequency = HAL_RCC_GetPCLK1Freq();
 800742a:	f7ff fa61 	bl	80068f0 <HAL_RCC_GetPCLK1Freq>
 800742e:	0003      	movs	r3, r0
 8007430:	61fb      	str	r3, [r7, #28]
            break;
 8007432:	e013      	b.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HAL_RCC_GetSysClockFreq();
 8007434:	f7ff f9b6 	bl	80067a4 <HAL_RCC_GetSysClockFreq>
 8007438:	0003      	movs	r3, r0
 800743a:	61fb      	str	r3, [r7, #28]
            break;
 800743c:	e00e      	b.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800743e:	4b1c      	ldr	r3, [pc, #112]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	2380      	movs	r3, #128	@ 0x80
 8007444:	00db      	lsls	r3, r3, #3
 8007446:	401a      	ands	r2, r3
 8007448:	2380      	movs	r3, #128	@ 0x80
 800744a:	00db      	lsls	r3, r3, #3
 800744c:	429a      	cmp	r2, r3
 800744e:	d104      	bne.n	800745a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
              frequency = HSI_VALUE;
 8007450:	4b18      	ldr	r3, [pc, #96]	@ (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8007452:	61fb      	str	r3, [r7, #28]
            break;
 8007454:	e001      	b.n	800745a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
            break;
 8007456:	46c0      	nop			@ (mov r8, r8)
 8007458:	e235      	b.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800745a:	46c0      	nop			@ (mov r8, r8)
        break;
 800745c:	e233      	b.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800745e:	4a14      	ldr	r2, [pc, #80]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8007460:	2388      	movs	r3, #136	@ 0x88
 8007462:	58d2      	ldr	r2, [r2, r3]
 8007464:	23c0      	movs	r3, #192	@ 0xc0
 8007466:	031b      	lsls	r3, r3, #12
 8007468:	4013      	ands	r3, r2
 800746a:	617b      	str	r3, [r7, #20]
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	23c0      	movs	r3, #192	@ 0xc0
 8007470:	031b      	lsls	r3, r3, #12
 8007472:	429a      	cmp	r2, r3
 8007474:	d041      	beq.n	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	23c0      	movs	r3, #192	@ 0xc0
 800747a:	031b      	lsls	r3, r3, #12
 800747c:	429a      	cmp	r2, r3
 800747e:	d847      	bhi.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8007480:	697a      	ldr	r2, [r7, #20]
 8007482:	2380      	movs	r3, #128	@ 0x80
 8007484:	031b      	lsls	r3, r3, #12
 8007486:	429a      	cmp	r2, r3
 8007488:	d02b      	beq.n	80074e2 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	2380      	movs	r3, #128	@ 0x80
 800748e:	031b      	lsls	r3, r3, #12
 8007490:	429a      	cmp	r2, r3
 8007492:	d83d      	bhi.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d005      	beq.n	80074a6 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 800749a:	697a      	ldr	r2, [r7, #20]
 800749c:	2380      	movs	r3, #128	@ 0x80
 800749e:	02db      	lsls	r3, r3, #11
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d009      	beq.n	80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            break;
 80074a4:	e034      	b.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 80074a6:	f7ff fa23 	bl	80068f0 <HAL_RCC_GetPCLK1Freq>
 80074aa:	0003      	movs	r3, r0
 80074ac:	61fb      	str	r3, [r7, #28]
            break;
 80074ae:	e036      	b.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 80074b0:	40021000 	.word	0x40021000
 80074b4:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80074b8:	4abd      	ldr	r2, [pc, #756]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80074ba:	2394      	movs	r3, #148	@ 0x94
 80074bc:	58d3      	ldr	r3, [r2, r3]
 80074be:	2202      	movs	r2, #2
 80074c0:	4013      	ands	r3, r2
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d126      	bne.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80074c6:	4aba      	ldr	r2, [pc, #744]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80074c8:	2394      	movs	r3, #148	@ 0x94
 80074ca:	58d3      	ldr	r3, [r2, r3]
 80074cc:	2204      	movs	r2, #4
 80074ce:	4013      	ands	r3, r2
 80074d0:	2b04      	cmp	r3, #4
 80074d2:	d102      	bne.n	80074da <HAL_RCCEx_GetPeriphCLKFreq+0x696>
                frequency = LSI_VALUE / 128U;
 80074d4:	23fa      	movs	r3, #250	@ 0xfa
 80074d6:	61fb      	str	r3, [r7, #28]
            break;
 80074d8:	e01c      	b.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
                frequency = LSI_VALUE;
 80074da:	23fa      	movs	r3, #250	@ 0xfa
 80074dc:	01db      	lsls	r3, r3, #7
 80074de:	61fb      	str	r3, [r7, #28]
            break;
 80074e0:	e018      	b.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80074e2:	4bb3      	ldr	r3, [pc, #716]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	2380      	movs	r3, #128	@ 0x80
 80074e8:	00db      	lsls	r3, r3, #3
 80074ea:	401a      	ands	r2, r3
 80074ec:	2380      	movs	r3, #128	@ 0x80
 80074ee:	00db      	lsls	r3, r3, #3
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d111      	bne.n	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
              frequency = HSI_VALUE;
 80074f4:	4baf      	ldr	r3, [pc, #700]	@ (80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 80074f6:	61fb      	str	r3, [r7, #28]
            break;
 80074f8:	e00e      	b.n	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80074fa:	4aad      	ldr	r2, [pc, #692]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80074fc:	2390      	movs	r3, #144	@ 0x90
 80074fe:	58d3      	ldr	r3, [r2, r3]
 8007500:	2202      	movs	r2, #2
 8007502:	4013      	ands	r3, r2
 8007504:	2b02      	cmp	r3, #2
 8007506:	d109      	bne.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
              frequency = LSE_VALUE;
 8007508:	2380      	movs	r3, #128	@ 0x80
 800750a:	021b      	lsls	r3, r3, #8
 800750c:	61fb      	str	r3, [r7, #28]
            break;
 800750e:	e005      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
            break;
 8007510:	46c0      	nop			@ (mov r8, r8)
 8007512:	e1d8      	b.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007514:	46c0      	nop			@ (mov r8, r8)
 8007516:	e1d6      	b.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007518:	46c0      	nop			@ (mov r8, r8)
 800751a:	e1d4      	b.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800751c:	46c0      	nop			@ (mov r8, r8)
        break;
 800751e:	e1d2      	b.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007520:	4aa3      	ldr	r2, [pc, #652]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007522:	2388      	movs	r3, #136	@ 0x88
 8007524:	58d2      	ldr	r2, [r2, r3]
 8007526:	23c0      	movs	r3, #192	@ 0xc0
 8007528:	039b      	lsls	r3, r3, #14
 800752a:	4013      	ands	r3, r2
 800752c:	617b      	str	r3, [r7, #20]
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	23c0      	movs	r3, #192	@ 0xc0
 8007532:	039b      	lsls	r3, r3, #14
 8007534:	429a      	cmp	r2, r3
 8007536:	d03d      	beq.n	80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8007538:	697a      	ldr	r2, [r7, #20]
 800753a:	23c0      	movs	r3, #192	@ 0xc0
 800753c:	039b      	lsls	r3, r3, #14
 800753e:	429a      	cmp	r2, r3
 8007540:	d843      	bhi.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8007542:	697a      	ldr	r2, [r7, #20]
 8007544:	2380      	movs	r3, #128	@ 0x80
 8007546:	039b      	lsls	r3, r3, #14
 8007548:	429a      	cmp	r2, r3
 800754a:	d027      	beq.n	800759c <HAL_RCCEx_GetPeriphCLKFreq+0x758>
 800754c:	697a      	ldr	r2, [r7, #20]
 800754e:	2380      	movs	r3, #128	@ 0x80
 8007550:	039b      	lsls	r3, r3, #14
 8007552:	429a      	cmp	r2, r3
 8007554:	d839      	bhi.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d005      	beq.n	8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800755c:	697a      	ldr	r2, [r7, #20]
 800755e:	2380      	movs	r3, #128	@ 0x80
 8007560:	035b      	lsls	r3, r3, #13
 8007562:	429a      	cmp	r2, r3
 8007564:	d005      	beq.n	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
            break;
 8007566:	e030      	b.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x786>
            frequency = HAL_RCC_GetPCLK1Freq();
 8007568:	f7ff f9c2 	bl	80068f0 <HAL_RCC_GetPCLK1Freq>
 800756c:	0003      	movs	r3, r0
 800756e:	61fb      	str	r3, [r7, #28]
            break;
 8007570:	e032      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007572:	4a8f      	ldr	r2, [pc, #572]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007574:	2394      	movs	r3, #148	@ 0x94
 8007576:	58d3      	ldr	r3, [r2, r3]
 8007578:	2202      	movs	r2, #2
 800757a:	4013      	ands	r3, r2
 800757c:	2b02      	cmp	r3, #2
 800757e:	d126      	bne.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8007580:	4a8b      	ldr	r2, [pc, #556]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007582:	2394      	movs	r3, #148	@ 0x94
 8007584:	58d3      	ldr	r3, [r2, r3]
 8007586:	2204      	movs	r2, #4
 8007588:	4013      	ands	r3, r2
 800758a:	2b04      	cmp	r3, #4
 800758c:	d102      	bne.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
                frequency = LSI_VALUE / 128U;
 800758e:	23fa      	movs	r3, #250	@ 0xfa
 8007590:	61fb      	str	r3, [r7, #28]
            break;
 8007592:	e01c      	b.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
                frequency = LSI_VALUE;
 8007594:	23fa      	movs	r3, #250	@ 0xfa
 8007596:	01db      	lsls	r3, r3, #7
 8007598:	61fb      	str	r3, [r7, #28]
            break;
 800759a:	e018      	b.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800759c:	4b84      	ldr	r3, [pc, #528]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	2380      	movs	r3, #128	@ 0x80
 80075a2:	00db      	lsls	r3, r3, #3
 80075a4:	401a      	ands	r2, r3
 80075a6:	2380      	movs	r3, #128	@ 0x80
 80075a8:	00db      	lsls	r3, r3, #3
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d111      	bne.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
              frequency = HSI_VALUE;
 80075ae:	4b81      	ldr	r3, [pc, #516]	@ (80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 80075b0:	61fb      	str	r3, [r7, #28]
            break;
 80075b2:	e00e      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80075b4:	4a7e      	ldr	r2, [pc, #504]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80075b6:	2390      	movs	r3, #144	@ 0x90
 80075b8:	58d3      	ldr	r3, [r2, r3]
 80075ba:	2202      	movs	r2, #2
 80075bc:	4013      	ands	r3, r2
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d109      	bne.n	80075d6 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
              frequency = LSE_VALUE;
 80075c2:	2380      	movs	r3, #128	@ 0x80
 80075c4:	021b      	lsls	r3, r3, #8
 80075c6:	61fb      	str	r3, [r7, #28]
            break;
 80075c8:	e005      	b.n	80075d6 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
            break;
 80075ca:	46c0      	nop			@ (mov r8, r8)
 80075cc:	e17b      	b.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80075ce:	46c0      	nop			@ (mov r8, r8)
 80075d0:	e179      	b.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80075d2:	46c0      	nop			@ (mov r8, r8)
 80075d4:	e177      	b.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80075d6:	46c0      	nop			@ (mov r8, r8)
        break;
 80075d8:	e175      	b.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80075da:	4a75      	ldr	r2, [pc, #468]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80075dc:	2388      	movs	r3, #136	@ 0x88
 80075de:	58d2      	ldr	r2, [r2, r3]
 80075e0:	23c0      	movs	r3, #192	@ 0xc0
 80075e2:	041b      	lsls	r3, r3, #16
 80075e4:	4013      	ands	r3, r2
 80075e6:	617b      	str	r3, [r7, #20]
 80075e8:	697a      	ldr	r2, [r7, #20]
 80075ea:	23c0      	movs	r3, #192	@ 0xc0
 80075ec:	041b      	lsls	r3, r3, #16
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d03d      	beq.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 80075f2:	697a      	ldr	r2, [r7, #20]
 80075f4:	23c0      	movs	r3, #192	@ 0xc0
 80075f6:	041b      	lsls	r3, r3, #16
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d843      	bhi.n	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80075fc:	697a      	ldr	r2, [r7, #20]
 80075fe:	2380      	movs	r3, #128	@ 0x80
 8007600:	041b      	lsls	r3, r3, #16
 8007602:	429a      	cmp	r2, r3
 8007604:	d027      	beq.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	2380      	movs	r3, #128	@ 0x80
 800760a:	041b      	lsls	r3, r3, #16
 800760c:	429a      	cmp	r2, r3
 800760e:	d839      	bhi.n	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d005      	beq.n	8007622 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	2380      	movs	r3, #128	@ 0x80
 800761a:	03db      	lsls	r3, r3, #15
 800761c:	429a      	cmp	r2, r3
 800761e:	d005      	beq.n	800762c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
            break;
 8007620:	e030      	b.n	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
            frequency = HAL_RCC_GetPCLK1Freq();
 8007622:	f7ff f965 	bl	80068f0 <HAL_RCC_GetPCLK1Freq>
 8007626:	0003      	movs	r3, r0
 8007628:	61fb      	str	r3, [r7, #28]
            break;
 800762a:	e032      	b.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800762c:	4a60      	ldr	r2, [pc, #384]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800762e:	2394      	movs	r3, #148	@ 0x94
 8007630:	58d3      	ldr	r3, [r2, r3]
 8007632:	2202      	movs	r2, #2
 8007634:	4013      	ands	r3, r2
 8007636:	2b02      	cmp	r3, #2
 8007638:	d126      	bne.n	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 800763a:	4a5d      	ldr	r2, [pc, #372]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800763c:	2394      	movs	r3, #148	@ 0x94
 800763e:	58d3      	ldr	r3, [r2, r3]
 8007640:	2204      	movs	r2, #4
 8007642:	4013      	ands	r3, r2
 8007644:	2b04      	cmp	r3, #4
 8007646:	d102      	bne.n	800764e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
                frequency = LSI_VALUE / 128U;
 8007648:	23fa      	movs	r3, #250	@ 0xfa
 800764a:	61fb      	str	r3, [r7, #28]
            break;
 800764c:	e01c      	b.n	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
                frequency = LSI_VALUE;
 800764e:	23fa      	movs	r3, #250	@ 0xfa
 8007650:	01db      	lsls	r3, r3, #7
 8007652:	61fb      	str	r3, [r7, #28]
            break;
 8007654:	e018      	b.n	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007656:	4b56      	ldr	r3, [pc, #344]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	2380      	movs	r3, #128	@ 0x80
 800765c:	00db      	lsls	r3, r3, #3
 800765e:	401a      	ands	r2, r3
 8007660:	2380      	movs	r3, #128	@ 0x80
 8007662:	00db      	lsls	r3, r3, #3
 8007664:	429a      	cmp	r2, r3
 8007666:	d111      	bne.n	800768c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
              frequency = HSI_VALUE;
 8007668:	4b52      	ldr	r3, [pc, #328]	@ (80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 800766a:	61fb      	str	r3, [r7, #28]
            break;
 800766c:	e00e      	b.n	800768c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800766e:	4a50      	ldr	r2, [pc, #320]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007670:	2390      	movs	r3, #144	@ 0x90
 8007672:	58d3      	ldr	r3, [r2, r3]
 8007674:	2202      	movs	r2, #2
 8007676:	4013      	ands	r3, r2
 8007678:	2b02      	cmp	r3, #2
 800767a:	d109      	bne.n	8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
              frequency = LSE_VALUE;
 800767c:	2380      	movs	r3, #128	@ 0x80
 800767e:	021b      	lsls	r3, r3, #8
 8007680:	61fb      	str	r3, [r7, #28]
            break;
 8007682:	e005      	b.n	8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
            break;
 8007684:	46c0      	nop			@ (mov r8, r8)
 8007686:	e11e      	b.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007688:	46c0      	nop			@ (mov r8, r8)
 800768a:	e11c      	b.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800768c:	46c0      	nop			@ (mov r8, r8)
 800768e:	e11a      	b.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007690:	46c0      	nop			@ (mov r8, r8)
        break;
 8007692:	e118      	b.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 8007694:	4a46      	ldr	r2, [pc, #280]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007696:	2388      	movs	r3, #136	@ 0x88
 8007698:	58d2      	ldr	r2, [r2, r3]
 800769a:	2380      	movs	r3, #128	@ 0x80
 800769c:	045b      	lsls	r3, r3, #17
 800769e:	4013      	ands	r3, r2
 80076a0:	617b      	str	r3, [r7, #20]
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d005      	beq.n	80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 80076a8:	697a      	ldr	r2, [r7, #20]
 80076aa:	2380      	movs	r3, #128	@ 0x80
 80076ac:	045b      	lsls	r3, r3, #17
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d011      	beq.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
            break;
 80076b2:	e019      	b.n	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 80076b4:	4b3e      	ldr	r3, [pc, #248]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80076b6:	689a      	ldr	r2, [r3, #8]
 80076b8:	23e0      	movs	r3, #224	@ 0xe0
 80076ba:	01db      	lsls	r3, r3, #7
 80076bc:	4013      	ands	r3, r2
 80076be:	d104      	bne.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0x886>
              frequency = HAL_RCC_GetPCLK1Freq();
 80076c0:	f7ff f916 	bl	80068f0 <HAL_RCC_GetPCLK1Freq>
 80076c4:	0003      	movs	r3, r0
 80076c6:	61fb      	str	r3, [r7, #28]
            break;
 80076c8:	e00e      	b.n	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 80076ca:	f7ff f911 	bl	80068f0 <HAL_RCC_GetPCLK1Freq>
 80076ce:	0003      	movs	r3, r0
 80076d0:	005b      	lsls	r3, r3, #1
 80076d2:	61fb      	str	r3, [r7, #28]
            break;
 80076d4:	e008      	b.n	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80076d6:	2408      	movs	r4, #8
 80076d8:	193b      	adds	r3, r7, r4
 80076da:	0018      	movs	r0, r3
 80076dc:	f000 f8fe 	bl	80078dc <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 80076e0:	193b      	adds	r3, r7, r4
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	61fb      	str	r3, [r7, #28]
            break;
 80076e6:	46c0      	nop			@ (mov r8, r8)
        break;
 80076e8:	e0ed      	b.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 80076ea:	4a31      	ldr	r2, [pc, #196]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80076ec:	2388      	movs	r3, #136	@ 0x88
 80076ee:	58d2      	ldr	r2, [r2, r3]
 80076f0:	2380      	movs	r3, #128	@ 0x80
 80076f2:	049b      	lsls	r3, r3, #18
 80076f4:	4013      	ands	r3, r2
 80076f6:	617b      	str	r3, [r7, #20]
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d005      	beq.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	2380      	movs	r3, #128	@ 0x80
 8007702:	049b      	lsls	r3, r3, #18
 8007704:	429a      	cmp	r2, r3
 8007706:	d011      	beq.n	800772c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
            break;
 8007708:	e019      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 800770a:	4b29      	ldr	r3, [pc, #164]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800770c:	689a      	ldr	r2, [r3, #8]
 800770e:	23e0      	movs	r3, #224	@ 0xe0
 8007710:	01db      	lsls	r3, r3, #7
 8007712:	4013      	ands	r3, r2
 8007714:	d104      	bne.n	8007720 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
              frequency = HAL_RCC_GetPCLK1Freq();
 8007716:	f7ff f8eb 	bl	80068f0 <HAL_RCC_GetPCLK1Freq>
 800771a:	0003      	movs	r3, r0
 800771c:	61fb      	str	r3, [r7, #28]
            break;
 800771e:	e00e      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8007720:	f7ff f8e6 	bl	80068f0 <HAL_RCC_GetPCLK1Freq>
 8007724:	0003      	movs	r3, r0
 8007726:	005b      	lsls	r3, r3, #1
 8007728:	61fb      	str	r3, [r7, #28]
            break;
 800772a:	e008      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 800772c:	2408      	movs	r4, #8
 800772e:	193b      	adds	r3, r7, r4
 8007730:	0018      	movs	r0, r3
 8007732:	f000 f8d3 	bl	80078dc <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8007736:	193b      	adds	r3, r7, r4
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	61fb      	str	r3, [r7, #28]
            break;
 800773c:	46c0      	nop			@ (mov r8, r8)
        break;
 800773e:	e0c2      	b.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8007740:	4a1b      	ldr	r2, [pc, #108]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007742:	2388      	movs	r3, #136	@ 0x88
 8007744:	58d2      	ldr	r2, [r2, r3]
 8007746:	23c0      	movs	r3, #192	@ 0xc0
 8007748:	051b      	lsls	r3, r3, #20
 800774a:	4013      	ands	r3, r2
 800774c:	617b      	str	r3, [r7, #20]
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	23c0      	movs	r3, #192	@ 0xc0
 8007752:	051b      	lsls	r3, r3, #20
 8007754:	429a      	cmp	r2, r3
 8007756:	d017      	beq.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8007758:	697a      	ldr	r2, [r7, #20]
 800775a:	23c0      	movs	r3, #192	@ 0xc0
 800775c:	051b      	lsls	r3, r3, #20
 800775e:	429a      	cmp	r2, r3
 8007760:	d84a      	bhi.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8007762:	697a      	ldr	r2, [r7, #20]
 8007764:	2380      	movs	r3, #128	@ 0x80
 8007766:	051b      	lsls	r3, r3, #20
 8007768:	429a      	cmp	r2, r3
 800776a:	d039      	beq.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	2380      	movs	r3, #128	@ 0x80
 8007770:	051b      	lsls	r3, r3, #20
 8007772:	429a      	cmp	r2, r3
 8007774:	d840      	bhi.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d03a      	beq.n	80077f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ae>
 800777c:	697a      	ldr	r2, [r7, #20]
 800777e:	2380      	movs	r3, #128	@ 0x80
 8007780:	04db      	lsls	r3, r3, #19
 8007782:	429a      	cmp	r2, r3
 8007784:	d003      	beq.n	800778e <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
            break;
 8007786:	e037      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
            frequency = HSI48_VALUE;
 8007788:	4b0b      	ldr	r3, [pc, #44]	@ (80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x974>)
 800778a:	61fb      	str	r3, [r7, #28]
            break;
 800778c:	e037      	b.n	80077fe <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800778e:	4b08      	ldr	r3, [pc, #32]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2202      	movs	r2, #2
 8007794:	4013      	ands	r3, r2
 8007796:	2b02      	cmp	r3, #2
 8007798:	d130      	bne.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 800779a:	4b05      	ldr	r3, [pc, #20]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2208      	movs	r2, #8
 80077a0:	4013      	ands	r3, r2
 80077a2:	d00b      	beq.n	80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 80077a4:	4b02      	ldr	r3, [pc, #8]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	091b      	lsrs	r3, r3, #4
 80077aa:	220f      	movs	r2, #15
 80077ac:	4013      	ands	r3, r2
 80077ae:	e00b      	b.n	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
 80077b0:	40021000 	.word	0x40021000
 80077b4:	00f42400 	.word	0x00f42400
 80077b8:	02dc6c00 	.word	0x02dc6c00
 80077bc:	4a44      	ldr	r2, [pc, #272]	@ (80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80077be:	2394      	movs	r3, #148	@ 0x94
 80077c0:	58d3      	ldr	r3, [r2, r3]
 80077c2:	0a1b      	lsrs	r3, r3, #8
 80077c4:	220f      	movs	r2, #15
 80077c6:	4013      	ands	r3, r2
 80077c8:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	2b0b      	cmp	r3, #11
 80077ce:	d901      	bls.n	80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
                msirange = 11U;
 80077d0:	230b      	movs	r3, #11
 80077d2:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 80077d4:	4b3f      	ldr	r3, [pc, #252]	@ (80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 80077d6:	69ba      	ldr	r2, [r7, #24]
 80077d8:	0092      	lsls	r2, r2, #2
 80077da:	58d3      	ldr	r3, [r2, r3]
 80077dc:	61fb      	str	r3, [r7, #28]
            break;
 80077de:	e00d      	b.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80077e0:	2408      	movs	r4, #8
 80077e2:	193b      	adds	r3, r7, r4
 80077e4:	0018      	movs	r0, r3
 80077e6:	f000 f879 	bl	80078dc <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 80077ea:	193b      	adds	r3, r7, r4
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	61fb      	str	r3, [r7, #28]
            break;
 80077f0:	e005      	b.n	80077fe <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            frequency = 0U;
 80077f2:	2300      	movs	r3, #0
 80077f4:	61fb      	str	r3, [r7, #28]
            break;
 80077f6:	e002      	b.n	80077fe <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            break;
 80077f8:	46c0      	nop			@ (mov r8, r8)
 80077fa:	e064      	b.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80077fc:	46c0      	nop			@ (mov r8, r8)
        break;
 80077fe:	e062      	b.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007800:	4a33      	ldr	r2, [pc, #204]	@ (80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8007802:	2388      	movs	r3, #136	@ 0x88
 8007804:	58d2      	ldr	r2, [r2, r3]
 8007806:	23c0      	movs	r3, #192	@ 0xc0
 8007808:	051b      	lsls	r3, r3, #20
 800780a:	4013      	ands	r3, r2
 800780c:	617b      	str	r3, [r7, #20]
 800780e:	697a      	ldr	r2, [r7, #20]
 8007810:	23c0      	movs	r3, #192	@ 0xc0
 8007812:	051b      	lsls	r3, r3, #20
 8007814:	429a      	cmp	r2, r3
 8007816:	d017      	beq.n	8007848 <HAL_RCCEx_GetPeriphCLKFreq+0xa04>
 8007818:	697a      	ldr	r2, [r7, #20]
 800781a:	23c0      	movs	r3, #192	@ 0xc0
 800781c:	051b      	lsls	r3, r3, #20
 800781e:	429a      	cmp	r2, r3
 8007820:	d844      	bhi.n	80078ac <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8007822:	697a      	ldr	r2, [r7, #20]
 8007824:	2380      	movs	r3, #128	@ 0x80
 8007826:	051b      	lsls	r3, r3, #20
 8007828:	429a      	cmp	r2, r3
 800782a:	d033      	beq.n	8007894 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800782c:	697a      	ldr	r2, [r7, #20]
 800782e:	2380      	movs	r3, #128	@ 0x80
 8007830:	051b      	lsls	r3, r3, #20
 8007832:	429a      	cmp	r2, r3
 8007834:	d83a      	bhi.n	80078ac <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d034      	beq.n	80078a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 800783c:	697a      	ldr	r2, [r7, #20]
 800783e:	2380      	movs	r3, #128	@ 0x80
 8007840:	04db      	lsls	r3, r3, #19
 8007842:	429a      	cmp	r2, r3
 8007844:	d003      	beq.n	800784e <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
            break;
 8007846:	e031      	b.n	80078ac <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            frequency = HSI48_VALUE;
 8007848:	4b23      	ldr	r3, [pc, #140]	@ (80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 800784a:	61fb      	str	r3, [r7, #28]
            break;
 800784c:	e031      	b.n	80078b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800784e:	4b20      	ldr	r3, [pc, #128]	@ (80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2202      	movs	r2, #2
 8007854:	4013      	ands	r3, r2
 8007856:	2b02      	cmp	r3, #2
 8007858:	d12a      	bne.n	80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 800785a:	4b1d      	ldr	r3, [pc, #116]	@ (80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2208      	movs	r2, #8
 8007860:	4013      	ands	r3, r2
 8007862:	d005      	beq.n	8007870 <HAL_RCCEx_GetPeriphCLKFreq+0xa2c>
 8007864:	4b1a      	ldr	r3, [pc, #104]	@ (80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	091b      	lsrs	r3, r3, #4
 800786a:	220f      	movs	r2, #15
 800786c:	4013      	ands	r3, r2
 800786e:	e005      	b.n	800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8007870:	4a17      	ldr	r2, [pc, #92]	@ (80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8007872:	2394      	movs	r3, #148	@ 0x94
 8007874:	58d3      	ldr	r3, [r2, r3]
 8007876:	0a1b      	lsrs	r3, r3, #8
 8007878:	220f      	movs	r2, #15
 800787a:	4013      	ands	r3, r2
 800787c:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	2b0b      	cmp	r3, #11
 8007882:	d901      	bls.n	8007888 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
                msirange = 11U;
 8007884:	230b      	movs	r3, #11
 8007886:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 8007888:	4b12      	ldr	r3, [pc, #72]	@ (80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 800788a:	69ba      	ldr	r2, [r7, #24]
 800788c:	0092      	lsls	r2, r2, #2
 800788e:	58d3      	ldr	r3, [r2, r3]
 8007890:	61fb      	str	r3, [r7, #28]
            break;
 8007892:	e00d      	b.n	80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8007894:	2408      	movs	r4, #8
 8007896:	193b      	adds	r3, r7, r4
 8007898:	0018      	movs	r0, r3
 800789a:	f000 f81f 	bl	80078dc <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 800789e:	193b      	adds	r3, r7, r4
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	61fb      	str	r3, [r7, #28]
            break;
 80078a4:	e005      	b.n	80078b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = 0U;
 80078a6:	2300      	movs	r3, #0
 80078a8:	61fb      	str	r3, [r7, #28]
            break;
 80078aa:	e002      	b.n	80078b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            break;
 80078ac:	46c0      	nop			@ (mov r8, r8)
 80078ae:	e00a      	b.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80078b0:	46c0      	nop			@ (mov r8, r8)
        break;
 80078b2:	e008      	b.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80078b4:	46c0      	nop			@ (mov r8, r8)
 80078b6:	e006      	b.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80078b8:	46c0      	nop			@ (mov r8, r8)
 80078ba:	e004      	b.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80078bc:	46c0      	nop			@ (mov r8, r8)
 80078be:	e002      	b.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80078c0:	46c0      	nop			@ (mov r8, r8)
 80078c2:	e000      	b.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80078c4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return (frequency);
 80078c6:	69fb      	ldr	r3, [r7, #28]
}
 80078c8:	0018      	movs	r0, r3
 80078ca:	46bd      	mov	sp, r7
 80078cc:	b009      	add	sp, #36	@ 0x24
 80078ce:	bd90      	pop	{r4, r7, pc}
 80078d0:	40021000 	.word	0x40021000
 80078d4:	08009a40 	.word	0x08009a40
 80078d8:	02dc6c00 	.word	0x02dc6c00

080078dc <HAL_RCCEx_GetPLLClockFreq>:
  * @param  PLL_Clocks structure.
  * @retval None
  */

void HAL_RCCEx_GetPLLClockFreq(PLL_ClocksTypeDef *PLL_Clocks)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b088      	sub	sp, #32
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  uint32_t pllm;
  uint32_t plln;
  uint32_t pllvco;
  uint32_t msirange;

  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078e4:	4b58      	ldr	r3, [pc, #352]	@ (8007a48 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	0a1b      	lsrs	r3, r3, #8
 80078ea:	227f      	movs	r2, #127	@ 0x7f
 80078ec:	4013      	ands	r3, r2
 80078ee:	617b      	str	r3, [r7, #20]
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80078f0:	4b55      	ldr	r3, [pc, #340]	@ (8007a48 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	2203      	movs	r2, #3
 80078f6:	4013      	ands	r3, r2
 80078f8:	613b      	str	r3, [r7, #16]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 80078fa:	4b53      	ldr	r3, [pc, #332]	@ (8007a48 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	091b      	lsrs	r3, r3, #4
 8007900:	2207      	movs	r2, #7
 8007902:	4013      	ands	r3, r2
 8007904:	3301      	adds	r3, #1
 8007906:	60fb      	str	r3, [r7, #12]
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8007908:	4b4f      	ldr	r3, [pc, #316]	@ (8007a48 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2208      	movs	r2, #8
 800790e:	4013      	ands	r3, r2
 8007910:	d005      	beq.n	800791e <HAL_RCCEx_GetPLLClockFreq+0x42>
 8007912:	4b4d      	ldr	r3, [pc, #308]	@ (8007a48 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	091b      	lsrs	r3, r3, #4
 8007918:	220f      	movs	r2, #15
 800791a:	4013      	ands	r3, r2
 800791c:	e005      	b.n	800792a <HAL_RCCEx_GetPLLClockFreq+0x4e>
 800791e:	4a4a      	ldr	r2, [pc, #296]	@ (8007a48 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8007920:	2394      	movs	r3, #148	@ 0x94
 8007922:	58d3      	ldr	r3, [r2, r3]
 8007924:	0a1b      	lsrs	r3, r3, #8
 8007926:	220f      	movs	r2, #15
 8007928:	4013      	ands	r3, r2
 800792a:	61bb      	str	r3, [r7, #24]
  if (msirange > 11U)
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	2b0b      	cmp	r3, #11
 8007930:	d901      	bls.n	8007936 <HAL_RCCEx_GetPLLClockFreq+0x5a>
  {
    msirange = 11U;
 8007932:	230b      	movs	r3, #11
 8007934:	61bb      	str	r3, [r7, #24]
  }
  switch (pllsource)
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	2b03      	cmp	r3, #3
 800793a:	d020      	beq.n	800797e <HAL_RCCEx_GetPLLClockFreq+0xa2>
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	2b03      	cmp	r3, #3
 8007940:	d827      	bhi.n	8007992 <HAL_RCCEx_GetPLLClockFreq+0xb6>
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	2b01      	cmp	r3, #1
 8007946:	d00c      	beq.n	8007962 <HAL_RCCEx_GetPLLClockFreq+0x86>
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	2b02      	cmp	r3, #2
 800794c:	d121      	bne.n	8007992 <HAL_RCCEx_GetPLLClockFreq+0xb6>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * plln;
 800794e:	68f9      	ldr	r1, [r7, #12]
 8007950:	483e      	ldr	r0, [pc, #248]	@ (8007a4c <HAL_RCCEx_GetPLLClockFreq+0x170>)
 8007952:	f7f8 fbd9 	bl	8000108 <__udivsi3>
 8007956:	0003      	movs	r3, r0
 8007958:	001a      	movs	r2, r3
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	4353      	muls	r3, r2
 800795e:	61fb      	str	r3, [r7, #28]
      break;
 8007960:	e025      	b.n	80079ae <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8007962:	4b3b      	ldr	r3, [pc, #236]	@ (8007a50 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8007964:	69ba      	ldr	r2, [r7, #24]
 8007966:	0092      	lsls	r2, r2, #2
 8007968:	58d3      	ldr	r3, [r2, r3]
 800796a:	68f9      	ldr	r1, [r7, #12]
 800796c:	0018      	movs	r0, r3
 800796e:	f7f8 fbcb 	bl	8000108 <__udivsi3>
 8007972:	0003      	movs	r3, r0
 8007974:	001a      	movs	r2, r3
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	4353      	muls	r3, r2
 800797a:	61fb      	str	r3, [r7, #28]
      break;
 800797c:	e017      	b.n	80079ae <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * plln;
 800797e:	68f9      	ldr	r1, [r7, #12]
 8007980:	4834      	ldr	r0, [pc, #208]	@ (8007a54 <HAL_RCCEx_GetPLLClockFreq+0x178>)
 8007982:	f7f8 fbc1 	bl	8000108 <__udivsi3>
 8007986:	0003      	movs	r3, r0
 8007988:	001a      	movs	r2, r3
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	4353      	muls	r3, r2
 800798e:	61fb      	str	r3, [r7, #28]
      break;
 8007990:	e00d      	b.n	80079ae <HAL_RCCEx_GetPLLClockFreq+0xd2>

    default:
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8007992:	4b2f      	ldr	r3, [pc, #188]	@ (8007a50 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8007994:	69ba      	ldr	r2, [r7, #24]
 8007996:	0092      	lsls	r2, r2, #2
 8007998:	58d3      	ldr	r3, [r2, r3]
 800799a:	68f9      	ldr	r1, [r7, #12]
 800799c:	0018      	movs	r0, r3
 800799e:	f7f8 fbb3 	bl	8000108 <__udivsi3>
 80079a2:	0003      	movs	r3, r0
 80079a4:	001a      	movs	r2, r3
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	4353      	muls	r3, r2
 80079aa:	61fb      	str	r3, [r7, #28]
      break;
 80079ac:	46c0      	nop			@ (mov r8, r8)
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 80079ae:	4b26      	ldr	r3, [pc, #152]	@ (8007a48 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80079b0:	68da      	ldr	r2, [r3, #12]
 80079b2:	2380      	movs	r3, #128	@ 0x80
 80079b4:	025b      	lsls	r3, r3, #9
 80079b6:	4013      	ands	r3, r2
 80079b8:	d00e      	beq.n	80079d8 <HAL_RCCEx_GetPLLClockFreq+0xfc>
  {
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 80079ba:	4b23      	ldr	r3, [pc, #140]	@ (8007a48 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80079bc:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLP_Pos) + 1U));
 80079be:	0c5b      	lsrs	r3, r3, #17
 80079c0:	221f      	movs	r2, #31
 80079c2:	4013      	ands	r3, r2
 80079c4:	3301      	adds	r3, #1
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 80079c6:	0019      	movs	r1, r3
 80079c8:	69f8      	ldr	r0, [r7, #28]
 80079ca:	f7f8 fb9d 	bl	8000108 <__udivsi3>
 80079ce:	0003      	movs	r3, r0
 80079d0:	001a      	movs	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	601a      	str	r2, [r3, #0]
 80079d6:	e002      	b.n	80079de <HAL_RCCEx_GetPLLClockFreq+0x102>
  }
  else
  {
    PLL_Clocks->PLL_P_Frequency = 0;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVQ) != 0U)
 80079de:	4b1a      	ldr	r3, [pc, #104]	@ (8007a48 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80079e0:	68da      	ldr	r2, [r3, #12]
 80079e2:	2380      	movs	r3, #128	@ 0x80
 80079e4:	045b      	lsls	r3, r3, #17
 80079e6:	4013      	ands	r3, r2
 80079e8:	d00e      	beq.n	8007a08 <HAL_RCCEx_GetPLLClockFreq+0x12c>
  {
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 80079ea:	4b17      	ldr	r3, [pc, #92]	@ (8007a48 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80079ec:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLQ_Pos) + 1U));
 80079ee:	0e5b      	lsrs	r3, r3, #25
 80079f0:	2207      	movs	r2, #7
 80079f2:	4013      	ands	r3, r2
 80079f4:	3301      	adds	r3, #1
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 80079f6:	0019      	movs	r1, r3
 80079f8:	69f8      	ldr	r0, [r7, #28]
 80079fa:	f7f8 fb85 	bl	8000108 <__udivsi3>
 80079fe:	0003      	movs	r3, r0
 8007a00:	001a      	movs	r2, r3
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	605a      	str	r2, [r3, #4]
 8007a06:	e002      	b.n	8007a0e <HAL_RCCEx_GetPLLClockFreq+0x132>
  }
  else
  {
    PLL_Clocks->PLL_Q_Frequency = 0;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVR) != 0U)
 8007a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8007a48 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8007a10:	68da      	ldr	r2, [r3, #12]
 8007a12:	2380      	movs	r3, #128	@ 0x80
 8007a14:	055b      	lsls	r3, r3, #21
 8007a16:	4013      	ands	r3, r2
 8007a18:	d00e      	beq.n	8007a38 <HAL_RCCEx_GetPLLClockFreq+0x15c>
  {
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8007a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8007a48 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8007a1c:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLR_Pos) + 1U));
 8007a1e:	0f5b      	lsrs	r3, r3, #29
 8007a20:	2207      	movs	r2, #7
 8007a22:	4013      	ands	r3, r2
 8007a24:	3301      	adds	r3, #1
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8007a26:	0019      	movs	r1, r3
 8007a28:	69f8      	ldr	r0, [r7, #28]
 8007a2a:	f7f8 fb6d 	bl	8000108 <__udivsi3>
 8007a2e:	0003      	movs	r3, r0
 8007a30:	001a      	movs	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL_Clocks->PLL_R_Frequency = 0;
  }
}
 8007a36:	e002      	b.n	8007a3e <HAL_RCCEx_GetPLLClockFreq+0x162>
    PLL_Clocks->PLL_R_Frequency = 0;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	609a      	str	r2, [r3, #8]
}
 8007a3e:	46c0      	nop			@ (mov r8, r8)
 8007a40:	46bd      	mov	sp, r7
 8007a42:	b008      	add	sp, #32
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	46c0      	nop			@ (mov r8, r8)
 8007a48:	40021000 	.word	0x40021000
 8007a4c:	00f42400 	.word	0x00f42400
 8007a50:	08009a40 	.word	0x08009a40
 8007a54:	003d0900 	.word	0x003d0900

08007a58 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007a60:	210f      	movs	r1, #15
 8007a62:	187b      	adds	r3, r7, r1
 8007a64:	2201      	movs	r2, #1
 8007a66:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d100      	bne.n	8007a70 <HAL_RTC_Init+0x18>
 8007a6e:	e08b      	b.n	8007b88 <HAL_RTC_Init+0x130>
  {
    status = HAL_OK;
 8007a70:	187b      	adds	r3, r7, r1
 8007a72:	2200      	movs	r2, #0
 8007a74:	701a      	strb	r2, [r3, #0]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	222d      	movs	r2, #45	@ 0x2d
 8007a7a:	5c9b      	ldrb	r3, [r3, r2]
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d107      	bne.n	8007a92 <HAL_RTC_Init+0x3a>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	222c      	movs	r2, #44	@ 0x2c
 8007a86:	2100      	movs	r1, #0
 8007a88:	5499      	strb	r1, [r3, r2]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	0018      	movs	r0, r3
 8007a8e:	f7fc feb1 	bl	80047f4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	222d      	movs	r2, #45	@ 0x2d
 8007a96:	2102      	movs	r1, #2
 8007a98:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a9a:	4b3f      	ldr	r3, [pc, #252]	@ (8007b98 <HAL_RTC_Init+0x140>)
 8007a9c:	22ca      	movs	r2, #202	@ 0xca
 8007a9e:	625a      	str	r2, [r3, #36]	@ 0x24
 8007aa0:	4b3d      	ldr	r3, [pc, #244]	@ (8007b98 <HAL_RTC_Init+0x140>)
 8007aa2:	2253      	movs	r2, #83	@ 0x53
 8007aa4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	0018      	movs	r0, r3
 8007aaa:	f000 f8a1 	bl	8007bf0 <RTC_EnterInitMode>
 8007aae:	1e03      	subs	r3, r0, #0
 8007ab0:	d00b      	beq.n	8007aca <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ab2:	4b39      	ldr	r3, [pc, #228]	@ (8007b98 <HAL_RTC_Init+0x140>)
 8007ab4:	22ff      	movs	r2, #255	@ 0xff
 8007ab6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	222d      	movs	r2, #45	@ 0x2d
 8007abc:	2104      	movs	r1, #4
 8007abe:	5499      	strb	r1, [r3, r2]

      status = HAL_ERROR;
 8007ac0:	230f      	movs	r3, #15
 8007ac2:	18fb      	adds	r3, r7, r3
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	701a      	strb	r2, [r3, #0]
 8007ac8:	e05e      	b.n	8007b88 <HAL_RTC_Init+0x130>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8007aca:	4b33      	ldr	r3, [pc, #204]	@ (8007b98 <HAL_RTC_Init+0x140>)
 8007acc:	699a      	ldr	r2, [r3, #24]
 8007ace:	4b32      	ldr	r3, [pc, #200]	@ (8007b98 <HAL_RTC_Init+0x140>)
 8007ad0:	4932      	ldr	r1, [pc, #200]	@ (8007b9c <HAL_RTC_Init+0x144>)
 8007ad2:	400a      	ands	r2, r1
 8007ad4:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8007ad6:	4b30      	ldr	r3, [pc, #192]	@ (8007b98 <HAL_RTC_Init+0x140>)
 8007ad8:	6999      	ldr	r1, [r3, #24]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	685a      	ldr	r2, [r3, #4]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	431a      	orrs	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	431a      	orrs	r2, r3
 8007aea:	4b2b      	ldr	r3, [pc, #172]	@ (8007b98 <HAL_RTC_Init+0x140>)
 8007aec:	430a      	orrs	r2, r1
 8007aee:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	68d9      	ldr	r1, [r3, #12]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	041a      	lsls	r2, r3, #16
 8007afa:	4b27      	ldr	r3, [pc, #156]	@ (8007b98 <HAL_RTC_Init+0x140>)
 8007afc:	430a      	orrs	r2, r1
 8007afe:	611a      	str	r2, [r3, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8007b00:	4b25      	ldr	r3, [pc, #148]	@ (8007b98 <HAL_RTC_Init+0x140>)
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	4a26      	ldr	r2, [pc, #152]	@ (8007ba0 <HAL_RTC_Init+0x148>)
 8007b06:	4013      	ands	r3, r2
 8007b08:	0019      	movs	r1, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b12:	431a      	orrs	r2, r3
 8007b14:	4b20      	ldr	r3, [pc, #128]	@ (8007b98 <HAL_RTC_Init+0x140>)
 8007b16:	430a      	orrs	r2, r1
 8007b18:	60da      	str	r2, [r3, #12]

      /* Exit Initialization mode */
      CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007b1a:	4b1f      	ldr	r3, [pc, #124]	@ (8007b98 <HAL_RTC_Init+0x140>)
 8007b1c:	68da      	ldr	r2, [r3, #12]
 8007b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8007b98 <HAL_RTC_Init+0x140>)
 8007b20:	2180      	movs	r1, #128	@ 0x80
 8007b22:	438a      	bics	r2, r1
 8007b24:	60da      	str	r2, [r3, #12]

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007b26:	4b1c      	ldr	r3, [pc, #112]	@ (8007b98 <HAL_RTC_Init+0x140>)
 8007b28:	699b      	ldr	r3, [r3, #24]
 8007b2a:	2220      	movs	r2, #32
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	d110      	bne.n	8007b52 <HAL_RTC_Init+0xfa>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	0018      	movs	r0, r3
 8007b34:	f000 f836 	bl	8007ba4 <HAL_RTC_WaitForSynchro>
 8007b38:	1e03      	subs	r3, r0, #0
 8007b3a:	d00a      	beq.n	8007b52 <HAL_RTC_Init+0xfa>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b3c:	4b16      	ldr	r3, [pc, #88]	@ (8007b98 <HAL_RTC_Init+0x140>)
 8007b3e:	22ff      	movs	r2, #255	@ 0xff
 8007b40:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	222d      	movs	r2, #45	@ 0x2d
 8007b46:	2104      	movs	r1, #4
 8007b48:	5499      	strb	r1, [r3, r2]
          status = HAL_ERROR;
 8007b4a:	230f      	movs	r3, #15
 8007b4c:	18fb      	adds	r3, r7, r3
 8007b4e:	2201      	movs	r2, #1
 8007b50:	701a      	strb	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 8007b52:	230f      	movs	r3, #15
 8007b54:	18fb      	adds	r3, r7, r3
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d115      	bne.n	8007b88 <HAL_RTC_Init+0x130>
      {
        MODIFY_REG(RTC->CR, \
 8007b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8007b98 <HAL_RTC_Init+0x140>)
 8007b5e:	699b      	ldr	r3, [r3, #24]
 8007b60:	00db      	lsls	r3, r3, #3
 8007b62:	08d9      	lsrs	r1, r3, #3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a1a      	ldr	r2, [r3, #32]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	69db      	ldr	r3, [r3, #28]
 8007b6c:	431a      	orrs	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	695b      	ldr	r3, [r3, #20]
 8007b72:	431a      	orrs	r2, r3
 8007b74:	4b08      	ldr	r3, [pc, #32]	@ (8007b98 <HAL_RTC_Init+0x140>)
 8007b76:	430a      	orrs	r2, r1
 8007b78:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b7a:	4b07      	ldr	r3, [pc, #28]	@ (8007b98 <HAL_RTC_Init+0x140>)
 8007b7c:	22ff      	movs	r2, #255	@ 0xff
 8007b7e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	222d      	movs	r2, #45	@ 0x2d
 8007b84:	2101      	movs	r1, #1
 8007b86:	5499      	strb	r1, [r3, r2]
      }
    }
  }

  return status;
 8007b88:	230f      	movs	r3, #15
 8007b8a:	18fb      	adds	r3, r7, r3
 8007b8c:	781b      	ldrb	r3, [r3, #0]
}
 8007b8e:	0018      	movs	r0, r3
 8007b90:	46bd      	mov	sp, r7
 8007b92:	b004      	add	sp, #16
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	46c0      	nop			@ (mov r8, r8)
 8007b98:	40002800 	.word	0x40002800
 8007b9c:	fb8fffbf 	.word	0xfb8fffbf
 8007ba0:	ffffe0ff 	.word	0xffffe0ff

08007ba4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(const RTC_HandleTypeDef *hrtc)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8007bac:	4b0f      	ldr	r3, [pc, #60]	@ (8007bec <HAL_RTC_WaitForSynchro+0x48>)
 8007bae:	68da      	ldr	r2, [r3, #12]
 8007bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8007bec <HAL_RTC_WaitForSynchro+0x48>)
 8007bb2:	2120      	movs	r1, #32
 8007bb4:	438a      	bics	r2, r1
 8007bb6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007bb8:	f7fd f894 	bl	8004ce4 <HAL_GetTick>
 8007bbc:	0003      	movs	r3, r0
 8007bbe:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007bc0:	e00a      	b.n	8007bd8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007bc2:	f7fd f88f 	bl	8004ce4 <HAL_GetTick>
 8007bc6:	0002      	movs	r2, r0
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	1ad2      	subs	r2, r2, r3
 8007bcc:	23fa      	movs	r3, #250	@ 0xfa
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d901      	bls.n	8007bd8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	e005      	b.n	8007be4 <HAL_RTC_WaitForSynchro+0x40>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007bd8:	4b04      	ldr	r3, [pc, #16]	@ (8007bec <HAL_RTC_WaitForSynchro+0x48>)
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	2220      	movs	r2, #32
 8007bde:	4013      	ands	r3, r2
 8007be0:	d0ef      	beq.n	8007bc2 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	0018      	movs	r0, r3
 8007be6:	46bd      	mov	sp, r7
 8007be8:	b004      	add	sp, #16
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	40002800 	.word	0x40002800

08007bf0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(const RTC_HandleTypeDef *hrtc)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007bf8:	4b12      	ldr	r3, [pc, #72]	@ (8007c44 <RTC_EnterInitMode+0x54>)
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	2240      	movs	r2, #64	@ 0x40
 8007bfe:	4013      	ands	r3, r2
 8007c00:	d11a      	bne.n	8007c38 <RTC_EnterInitMode+0x48>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007c02:	4b10      	ldr	r3, [pc, #64]	@ (8007c44 <RTC_EnterInitMode+0x54>)
 8007c04:	68da      	ldr	r2, [r3, #12]
 8007c06:	4b0f      	ldr	r3, [pc, #60]	@ (8007c44 <RTC_EnterInitMode+0x54>)
 8007c08:	2180      	movs	r1, #128	@ 0x80
 8007c0a:	430a      	orrs	r2, r1
 8007c0c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007c0e:	f7fd f869 	bl	8004ce4 <HAL_GetTick>
 8007c12:	0003      	movs	r3, r0
 8007c14:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007c16:	e00a      	b.n	8007c2e <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007c18:	f7fd f864 	bl	8004ce4 <HAL_GetTick>
 8007c1c:	0002      	movs	r2, r0
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	1ad2      	subs	r2, r2, r3
 8007c22:	23fa      	movs	r3, #250	@ 0xfa
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d901      	bls.n	8007c2e <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	e005      	b.n	8007c3a <RTC_EnterInitMode+0x4a>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007c2e:	4b05      	ldr	r3, [pc, #20]	@ (8007c44 <RTC_EnterInitMode+0x54>)
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	2240      	movs	r2, #64	@ 0x40
 8007c34:	4013      	ands	r3, r2
 8007c36:	d0ef      	beq.n	8007c18 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	0018      	movs	r0, r3
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	b004      	add	sp, #16
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	46c0      	nop			@ (mov r8, r8)
 8007c44:	40002800 	.word	0x40002800

08007c48 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b086      	sub	sp, #24
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	222c      	movs	r2, #44	@ 0x2c
 8007c58:	5c9b      	ldrb	r3, [r3, r2]
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d101      	bne.n	8007c62 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8007c5e:	2302      	movs	r3, #2
 8007c60:	e06c      	b.n	8007d3c <HAL_RTCEx_SetWakeUpTimer+0xf4>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	222c      	movs	r2, #44	@ 0x2c
 8007c66:	2101      	movs	r1, #1
 8007c68:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	222d      	movs	r2, #45	@ 0x2d
 8007c6e:	2102      	movs	r1, #2
 8007c70:	5499      	strb	r1, [r3, r2]

  /* Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if (READ_BIT(RTC->CR, RTC_CR_WUTE) != 0U)
 8007c72:	4b34      	ldr	r3, [pc, #208]	@ (8007d44 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8007c74:	699a      	ldr	r2, [r3, #24]
 8007c76:	2380      	movs	r3, #128	@ 0x80
 8007c78:	00db      	lsls	r3, r3, #3
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	d01c      	beq.n	8007cb8 <HAL_RTCEx_SetWakeUpTimer+0x70>
  {
    tickstart = HAL_GetTick();
 8007c7e:	f7fd f831 	bl	8004ce4 <HAL_GetTick>
 8007c82:	0003      	movs	r3, r0
 8007c84:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 8007c86:	e012      	b.n	8007cae <HAL_RTCEx_SetWakeUpTimer+0x66>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007c88:	f7fd f82c 	bl	8004ce4 <HAL_GetTick>
 8007c8c:	0002      	movs	r2, r0
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	1ad2      	subs	r2, r2, r3
 8007c92:	23fa      	movs	r3, #250	@ 0xfa
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d909      	bls.n	8007cae <HAL_RTCEx_SetWakeUpTimer+0x66>
      {
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	222d      	movs	r2, #45	@ 0x2d
 8007c9e:	2103      	movs	r1, #3
 8007ca0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	222c      	movs	r2, #44	@ 0x2c
 8007ca6:	2100      	movs	r1, #0
 8007ca8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e046      	b.n	8007d3c <HAL_RTCEx_SetWakeUpTimer+0xf4>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 8007cae:	4b25      	ldr	r3, [pc, #148]	@ (8007d44 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	2204      	movs	r2, #4
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	d1e7      	bne.n	8007c88 <HAL_RTCEx_SetWakeUpTimer+0x40>
      }
    }
  }

  /* Disable Wake Up timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8007cb8:	4b22      	ldr	r3, [pc, #136]	@ (8007d44 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8007cba:	699a      	ldr	r2, [r3, #24]
 8007cbc:	4b21      	ldr	r3, [pc, #132]	@ (8007d44 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8007cbe:	4922      	ldr	r1, [pc, #136]	@ (8007d48 <HAL_RTCEx_SetWakeUpTimer+0x100>)
 8007cc0:	400a      	ands	r2, r1
 8007cc2:	619a      	str	r2, [r3, #24]

  tickstart = HAL_GetTick();
 8007cc4:	f7fd f80e 	bl	8004ce4 <HAL_GetTick>
 8007cc8:	0003      	movs	r3, r0
 8007cca:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8007ccc:	e012      	b.n	8007cf4 <HAL_RTCEx_SetWakeUpTimer+0xac>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007cce:	f7fd f809 	bl	8004ce4 <HAL_GetTick>
 8007cd2:	0002      	movs	r2, r0
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	1ad2      	subs	r2, r2, r3
 8007cd8:	23fa      	movs	r3, #250	@ 0xfa
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d909      	bls.n	8007cf4 <HAL_RTCEx_SetWakeUpTimer+0xac>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	222d      	movs	r2, #45	@ 0x2d
 8007ce4:	2103      	movs	r1, #3
 8007ce6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	222c      	movs	r2, #44	@ 0x2c
 8007cec:	2100      	movs	r1, #0
 8007cee:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	e023      	b.n	8007d3c <HAL_RTCEx_SetWakeUpTimer+0xf4>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8007cf4:	4b13      	ldr	r3, [pc, #76]	@ (8007d44 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	2204      	movs	r2, #4
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	d0e7      	beq.n	8007cce <HAL_RTCEx_SetWakeUpTimer+0x86>
    }
  }

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8007cfe:	4b11      	ldr	r3, [pc, #68]	@ (8007d44 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8007d00:	699b      	ldr	r3, [r3, #24]
 8007d02:	2207      	movs	r2, #7
 8007d04:	4393      	bics	r3, r2
 8007d06:	0019      	movs	r1, r3
 8007d08:	4b0e      	ldr	r3, [pc, #56]	@ (8007d44 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	430a      	orrs	r2, r1
 8007d0e:	619a      	str	r2, [r3, #24]

  /* Configure the Wakeup Timer counter */
  WRITE_REG(RTC->WUTR, (uint32_t)WakeUpCounter);
 8007d10:	4b0c      	ldr	r3, [pc, #48]	@ (8007d44 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  SET_BIT(RTC->CR, RTC_CR_WUTE);
 8007d16:	4b0b      	ldr	r3, [pc, #44]	@ (8007d44 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8007d18:	699a      	ldr	r2, [r3, #24]
 8007d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8007d44 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8007d1c:	2180      	movs	r1, #128	@ 0x80
 8007d1e:	00c9      	lsls	r1, r1, #3
 8007d20:	430a      	orrs	r2, r1
 8007d22:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d24:	4b07      	ldr	r3, [pc, #28]	@ (8007d44 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8007d26:	22ff      	movs	r2, #255	@ 0xff
 8007d28:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	222d      	movs	r2, #45	@ 0x2d
 8007d2e:	2101      	movs	r1, #1
 8007d30:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	222c      	movs	r2, #44	@ 0x2c
 8007d36:	2100      	movs	r1, #0
 8007d38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	0018      	movs	r0, r3
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	b006      	add	sp, #24
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	40002800 	.word	0x40002800
 8007d48:	fffffbff 	.word	0xfffffbff

08007d4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d101      	bne.n	8007d5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e0a0      	b.n	8007ea0 <HAL_SPI_Init+0x154>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d109      	bne.n	8007d7a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	685a      	ldr	r2, [r3, #4]
 8007d6a:	2382      	movs	r3, #130	@ 0x82
 8007d6c:	005b      	lsls	r3, r3, #1
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d009      	beq.n	8007d86 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	61da      	str	r2, [r3, #28]
 8007d78:	e005      	b.n	8007d86 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	225d      	movs	r2, #93	@ 0x5d
 8007d90:	5c9b      	ldrb	r3, [r3, r2]
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d107      	bne.n	8007da8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	225c      	movs	r2, #92	@ 0x5c
 8007d9c:	2100      	movs	r1, #0
 8007d9e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	0018      	movs	r0, r3
 8007da4:	f7fc fda4 	bl	80048f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	225d      	movs	r2, #93	@ 0x5d
 8007dac:	2102      	movs	r1, #2
 8007dae:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2140      	movs	r1, #64	@ 0x40
 8007dbc:	438a      	bics	r2, r1
 8007dbe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	68da      	ldr	r2, [r3, #12]
 8007dc4:	23e0      	movs	r3, #224	@ 0xe0
 8007dc6:	00db      	lsls	r3, r3, #3
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d902      	bls.n	8007dd2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	60fb      	str	r3, [r7, #12]
 8007dd0:	e002      	b.n	8007dd8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007dd2:	2380      	movs	r3, #128	@ 0x80
 8007dd4:	015b      	lsls	r3, r3, #5
 8007dd6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	68da      	ldr	r2, [r3, #12]
 8007ddc:	23f0      	movs	r3, #240	@ 0xf0
 8007dde:	011b      	lsls	r3, r3, #4
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d008      	beq.n	8007df6 <HAL_SPI_Init+0xaa>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	68da      	ldr	r2, [r3, #12]
 8007de8:	23e0      	movs	r3, #224	@ 0xe0
 8007dea:	00db      	lsls	r3, r3, #3
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d002      	beq.n	8007df6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	685a      	ldr	r2, [r3, #4]
 8007dfa:	2382      	movs	r3, #130	@ 0x82
 8007dfc:	005b      	lsls	r3, r3, #1
 8007dfe:	401a      	ands	r2, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6899      	ldr	r1, [r3, #8]
 8007e04:	2384      	movs	r3, #132	@ 0x84
 8007e06:	021b      	lsls	r3, r3, #8
 8007e08:	400b      	ands	r3, r1
 8007e0a:	431a      	orrs	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	691b      	ldr	r3, [r3, #16]
 8007e10:	2102      	movs	r1, #2
 8007e12:	400b      	ands	r3, r1
 8007e14:	431a      	orrs	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	695b      	ldr	r3, [r3, #20]
 8007e1a:	2101      	movs	r1, #1
 8007e1c:	400b      	ands	r3, r1
 8007e1e:	431a      	orrs	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6999      	ldr	r1, [r3, #24]
 8007e24:	2380      	movs	r3, #128	@ 0x80
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	400b      	ands	r3, r1
 8007e2a:	431a      	orrs	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	69db      	ldr	r3, [r3, #28]
 8007e30:	2138      	movs	r1, #56	@ 0x38
 8007e32:	400b      	ands	r3, r1
 8007e34:	431a      	orrs	r2, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a1b      	ldr	r3, [r3, #32]
 8007e3a:	2180      	movs	r1, #128	@ 0x80
 8007e3c:	400b      	ands	r3, r1
 8007e3e:	431a      	orrs	r2, r3
 8007e40:	0011      	movs	r1, r2
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007e46:	2380      	movs	r3, #128	@ 0x80
 8007e48:	019b      	lsls	r3, r3, #6
 8007e4a:	401a      	ands	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	430a      	orrs	r2, r1
 8007e52:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	699b      	ldr	r3, [r3, #24]
 8007e58:	0c1b      	lsrs	r3, r3, #16
 8007e5a:	2204      	movs	r2, #4
 8007e5c:	401a      	ands	r2, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e62:	2110      	movs	r1, #16
 8007e64:	400b      	ands	r3, r1
 8007e66:	431a      	orrs	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e6c:	2108      	movs	r1, #8
 8007e6e:	400b      	ands	r3, r1
 8007e70:	431a      	orrs	r2, r3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	68d9      	ldr	r1, [r3, #12]
 8007e76:	23f0      	movs	r3, #240	@ 0xf0
 8007e78:	011b      	lsls	r3, r3, #4
 8007e7a:	400b      	ands	r3, r1
 8007e7c:	431a      	orrs	r2, r3
 8007e7e:	0011      	movs	r1, r2
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	2380      	movs	r3, #128	@ 0x80
 8007e84:	015b      	lsls	r3, r3, #5
 8007e86:	401a      	ands	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	430a      	orrs	r2, r1
 8007e8e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	225d      	movs	r2, #93	@ 0x5d
 8007e9a:	2101      	movs	r1, #1
 8007e9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	0018      	movs	r0, r3
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	b004      	add	sp, #16
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b088      	sub	sp, #32
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	603b      	str	r3, [r7, #0]
 8007eb4:	1dbb      	adds	r3, r7, #6
 8007eb6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007eb8:	231f      	movs	r3, #31
 8007eba:	18fb      	adds	r3, r7, r3
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	225c      	movs	r2, #92	@ 0x5c
 8007ec4:	5c9b      	ldrb	r3, [r3, r2]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d101      	bne.n	8007ece <HAL_SPI_Transmit+0x26>
 8007eca:	2302      	movs	r3, #2
 8007ecc:	e147      	b.n	800815e <HAL_SPI_Transmit+0x2b6>
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	225c      	movs	r2, #92	@ 0x5c
 8007ed2:	2101      	movs	r1, #1
 8007ed4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ed6:	f7fc ff05 	bl	8004ce4 <HAL_GetTick>
 8007eda:	0003      	movs	r3, r0
 8007edc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007ede:	2316      	movs	r3, #22
 8007ee0:	18fb      	adds	r3, r7, r3
 8007ee2:	1dba      	adds	r2, r7, #6
 8007ee4:	8812      	ldrh	r2, [r2, #0]
 8007ee6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	225d      	movs	r2, #93	@ 0x5d
 8007eec:	5c9b      	ldrb	r3, [r3, r2]
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d004      	beq.n	8007efe <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8007ef4:	231f      	movs	r3, #31
 8007ef6:	18fb      	adds	r3, r7, r3
 8007ef8:	2202      	movs	r2, #2
 8007efa:	701a      	strb	r2, [r3, #0]
    goto error;
 8007efc:	e128      	b.n	8008150 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d003      	beq.n	8007f0c <HAL_SPI_Transmit+0x64>
 8007f04:	1dbb      	adds	r3, r7, #6
 8007f06:	881b      	ldrh	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d104      	bne.n	8007f16 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8007f0c:	231f      	movs	r3, #31
 8007f0e:	18fb      	adds	r3, r7, r3
 8007f10:	2201      	movs	r2, #1
 8007f12:	701a      	strb	r2, [r3, #0]
    goto error;
 8007f14:	e11c      	b.n	8008150 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	225d      	movs	r2, #93	@ 0x5d
 8007f1a:	2103      	movs	r1, #3
 8007f1c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2200      	movs	r2, #0
 8007f22:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	68ba      	ldr	r2, [r7, #8]
 8007f28:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	1dba      	adds	r2, r7, #6
 8007f2e:	8812      	ldrh	r2, [r2, #0]
 8007f30:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	1dba      	adds	r2, r7, #6
 8007f36:	8812      	ldrh	r2, [r2, #0]
 8007f38:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2244      	movs	r2, #68	@ 0x44
 8007f44:	2100      	movs	r1, #0
 8007f46:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2246      	movs	r2, #70	@ 0x46
 8007f4c:	2100      	movs	r1, #0
 8007f4e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	689a      	ldr	r2, [r3, #8]
 8007f60:	2380      	movs	r3, #128	@ 0x80
 8007f62:	021b      	lsls	r3, r3, #8
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d110      	bne.n	8007f8a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2140      	movs	r1, #64	@ 0x40
 8007f74:	438a      	bics	r2, r1
 8007f76:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2180      	movs	r1, #128	@ 0x80
 8007f84:	01c9      	lsls	r1, r1, #7
 8007f86:	430a      	orrs	r2, r1
 8007f88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2240      	movs	r2, #64	@ 0x40
 8007f92:	4013      	ands	r3, r2
 8007f94:	2b40      	cmp	r3, #64	@ 0x40
 8007f96:	d007      	beq.n	8007fa8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2140      	movs	r1, #64	@ 0x40
 8007fa4:	430a      	orrs	r2, r1
 8007fa6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	68da      	ldr	r2, [r3, #12]
 8007fac:	23e0      	movs	r3, #224	@ 0xe0
 8007fae:	00db      	lsls	r3, r3, #3
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d952      	bls.n	800805a <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d004      	beq.n	8007fc6 <HAL_SPI_Transmit+0x11e>
 8007fbc:	2316      	movs	r3, #22
 8007fbe:	18fb      	adds	r3, r7, r3
 8007fc0:	881b      	ldrh	r3, [r3, #0]
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d143      	bne.n	800804e <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fca:	881a      	ldrh	r2, [r3, #0]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fd6:	1c9a      	adds	r2, r3, #2
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	3b01      	subs	r3, #1
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007fea:	e030      	b.n	800804e <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	2202      	movs	r2, #2
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d112      	bne.n	8008020 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ffe:	881a      	ldrh	r2, [r3, #0]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800800a:	1c9a      	adds	r2, r3, #2
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008014:	b29b      	uxth	r3, r3
 8008016:	3b01      	subs	r3, #1
 8008018:	b29a      	uxth	r2, r3
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800801e:	e016      	b.n	800804e <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008020:	f7fc fe60 	bl	8004ce4 <HAL_GetTick>
 8008024:	0002      	movs	r2, r0
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	683a      	ldr	r2, [r7, #0]
 800802c:	429a      	cmp	r2, r3
 800802e:	d802      	bhi.n	8008036 <HAL_SPI_Transmit+0x18e>
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	3301      	adds	r3, #1
 8008034:	d102      	bne.n	800803c <HAL_SPI_Transmit+0x194>
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d108      	bne.n	800804e <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 800803c:	231f      	movs	r3, #31
 800803e:	18fb      	adds	r3, r7, r3
 8008040:	2203      	movs	r2, #3
 8008042:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	225d      	movs	r2, #93	@ 0x5d
 8008048:	2101      	movs	r1, #1
 800804a:	5499      	strb	r1, [r3, r2]
          goto error;
 800804c:	e080      	b.n	8008150 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008052:	b29b      	uxth	r3, r3
 8008054:	2b00      	cmp	r3, #0
 8008056:	d1c9      	bne.n	8007fec <HAL_SPI_Transmit+0x144>
 8008058:	e053      	b.n	8008102 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d004      	beq.n	800806c <HAL_SPI_Transmit+0x1c4>
 8008062:	2316      	movs	r3, #22
 8008064:	18fb      	adds	r3, r7, r3
 8008066:	881b      	ldrh	r3, [r3, #0]
 8008068:	2b01      	cmp	r3, #1
 800806a:	d145      	bne.n	80080f8 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	330c      	adds	r3, #12
 8008076:	7812      	ldrb	r2, [r2, #0]
 8008078:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800807e:	1c5a      	adds	r2, r3, #1
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008088:	b29b      	uxth	r3, r3
 800808a:	3b01      	subs	r3, #1
 800808c:	b29a      	uxth	r2, r3
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8008092:	e031      	b.n	80080f8 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	2202      	movs	r2, #2
 800809c:	4013      	ands	r3, r2
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d113      	bne.n	80080ca <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	330c      	adds	r3, #12
 80080ac:	7812      	ldrb	r2, [r2, #0]
 80080ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080b4:	1c5a      	adds	r2, r3, #1
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080be:	b29b      	uxth	r3, r3
 80080c0:	3b01      	subs	r3, #1
 80080c2:	b29a      	uxth	r2, r3
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80080c8:	e016      	b.n	80080f8 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080ca:	f7fc fe0b 	bl	8004ce4 <HAL_GetTick>
 80080ce:	0002      	movs	r2, r0
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	1ad3      	subs	r3, r2, r3
 80080d4:	683a      	ldr	r2, [r7, #0]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d802      	bhi.n	80080e0 <HAL_SPI_Transmit+0x238>
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	3301      	adds	r3, #1
 80080de:	d102      	bne.n	80080e6 <HAL_SPI_Transmit+0x23e>
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d108      	bne.n	80080f8 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80080e6:	231f      	movs	r3, #31
 80080e8:	18fb      	adds	r3, r7, r3
 80080ea:	2203      	movs	r2, #3
 80080ec:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	225d      	movs	r2, #93	@ 0x5d
 80080f2:	2101      	movs	r1, #1
 80080f4:	5499      	strb	r1, [r3, r2]
          goto error;
 80080f6:	e02b      	b.n	8008150 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d1c8      	bne.n	8008094 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008102:	69ba      	ldr	r2, [r7, #24]
 8008104:	6839      	ldr	r1, [r7, #0]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	0018      	movs	r0, r3
 800810a:	f000 fcef 	bl	8008aec <SPI_EndRxTxTransaction>
 800810e:	1e03      	subs	r3, r0, #0
 8008110:	d002      	beq.n	8008118 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2220      	movs	r2, #32
 8008116:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d10a      	bne.n	8008136 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008120:	2300      	movs	r3, #0
 8008122:	613b      	str	r3, [r7, #16]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	613b      	str	r3, [r7, #16]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	613b      	str	r3, [r7, #16]
 8008134:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800813a:	2b00      	cmp	r3, #0
 800813c:	d004      	beq.n	8008148 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800813e:	231f      	movs	r3, #31
 8008140:	18fb      	adds	r3, r7, r3
 8008142:	2201      	movs	r2, #1
 8008144:	701a      	strb	r2, [r3, #0]
 8008146:	e003      	b.n	8008150 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	225d      	movs	r2, #93	@ 0x5d
 800814c:	2101      	movs	r1, #1
 800814e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	225c      	movs	r2, #92	@ 0x5c
 8008154:	2100      	movs	r1, #0
 8008156:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008158:	231f      	movs	r3, #31
 800815a:	18fb      	adds	r3, r7, r3
 800815c:	781b      	ldrb	r3, [r3, #0]
}
 800815e:	0018      	movs	r0, r3
 8008160:	46bd      	mov	sp, r7
 8008162:	b008      	add	sp, #32
 8008164:	bd80      	pop	{r7, pc}
	...

08008168 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008168:	b590      	push	{r4, r7, lr}
 800816a:	b089      	sub	sp, #36	@ 0x24
 800816c:	af02      	add	r7, sp, #8
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	603b      	str	r3, [r7, #0]
 8008174:	1dbb      	adds	r3, r7, #6
 8008176:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008178:	2117      	movs	r1, #23
 800817a:	187b      	adds	r3, r7, r1
 800817c:	2200      	movs	r2, #0
 800817e:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	225d      	movs	r2, #93	@ 0x5d
 8008184:	5c9b      	ldrb	r3, [r3, r2]
 8008186:	b2db      	uxtb	r3, r3
 8008188:	2b01      	cmp	r3, #1
 800818a:	d003      	beq.n	8008194 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 800818c:	187b      	adds	r3, r7, r1
 800818e:	2202      	movs	r2, #2
 8008190:	701a      	strb	r2, [r3, #0]
    goto error;
 8008192:	e12b      	b.n	80083ec <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	685a      	ldr	r2, [r3, #4]
 8008198:	2382      	movs	r3, #130	@ 0x82
 800819a:	005b      	lsls	r3, r3, #1
 800819c:	429a      	cmp	r2, r3
 800819e:	d113      	bne.n	80081c8 <HAL_SPI_Receive+0x60>
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d10f      	bne.n	80081c8 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	225d      	movs	r2, #93	@ 0x5d
 80081ac:	2104      	movs	r1, #4
 80081ae:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80081b0:	1dbb      	adds	r3, r7, #6
 80081b2:	881c      	ldrh	r4, [r3, #0]
 80081b4:	68ba      	ldr	r2, [r7, #8]
 80081b6:	68b9      	ldr	r1, [r7, #8]
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	9300      	str	r3, [sp, #0]
 80081be:	0023      	movs	r3, r4
 80081c0:	f000 f924 	bl	800840c <HAL_SPI_TransmitReceive>
 80081c4:	0003      	movs	r3, r0
 80081c6:	e118      	b.n	80083fa <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	225c      	movs	r2, #92	@ 0x5c
 80081cc:	5c9b      	ldrb	r3, [r3, r2]
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d101      	bne.n	80081d6 <HAL_SPI_Receive+0x6e>
 80081d2:	2302      	movs	r3, #2
 80081d4:	e111      	b.n	80083fa <HAL_SPI_Receive+0x292>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	225c      	movs	r2, #92	@ 0x5c
 80081da:	2101      	movs	r1, #1
 80081dc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081de:	f7fc fd81 	bl	8004ce4 <HAL_GetTick>
 80081e2:	0003      	movs	r3, r0
 80081e4:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d003      	beq.n	80081f4 <HAL_SPI_Receive+0x8c>
 80081ec:	1dbb      	adds	r3, r7, #6
 80081ee:	881b      	ldrh	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d104      	bne.n	80081fe <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 80081f4:	2317      	movs	r3, #23
 80081f6:	18fb      	adds	r3, r7, r3
 80081f8:	2201      	movs	r2, #1
 80081fa:	701a      	strb	r2, [r3, #0]
    goto error;
 80081fc:	e0f6      	b.n	80083ec <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	225d      	movs	r2, #93	@ 0x5d
 8008202:	2104      	movs	r1, #4
 8008204:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2200      	movs	r2, #0
 800820a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	1dba      	adds	r2, r7, #6
 8008216:	2144      	movs	r1, #68	@ 0x44
 8008218:	8812      	ldrh	r2, [r2, #0]
 800821a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	1dba      	adds	r2, r7, #6
 8008220:	2146      	movs	r1, #70	@ 0x46
 8008222:	8812      	ldrh	r2, [r2, #0]
 8008224:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2200      	movs	r2, #0
 800822a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2200      	movs	r2, #0
 8008230:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2200      	movs	r2, #0
 8008236:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2200      	movs	r2, #0
 800823c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2200      	movs	r2, #0
 8008242:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	68da      	ldr	r2, [r3, #12]
 8008248:	23e0      	movs	r3, #224	@ 0xe0
 800824a:	00db      	lsls	r3, r3, #3
 800824c:	429a      	cmp	r2, r3
 800824e:	d908      	bls.n	8008262 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	685a      	ldr	r2, [r3, #4]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	496a      	ldr	r1, [pc, #424]	@ (8008404 <HAL_SPI_Receive+0x29c>)
 800825c:	400a      	ands	r2, r1
 800825e:	605a      	str	r2, [r3, #4]
 8008260:	e008      	b.n	8008274 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	685a      	ldr	r2, [r3, #4]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2180      	movs	r1, #128	@ 0x80
 800826e:	0149      	lsls	r1, r1, #5
 8008270:	430a      	orrs	r2, r1
 8008272:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	689a      	ldr	r2, [r3, #8]
 8008278:	2380      	movs	r3, #128	@ 0x80
 800827a:	021b      	lsls	r3, r3, #8
 800827c:	429a      	cmp	r2, r3
 800827e:	d10f      	bne.n	80082a0 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2140      	movs	r1, #64	@ 0x40
 800828c:	438a      	bics	r2, r1
 800828e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	495b      	ldr	r1, [pc, #364]	@ (8008408 <HAL_SPI_Receive+0x2a0>)
 800829c:	400a      	ands	r2, r1
 800829e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2240      	movs	r2, #64	@ 0x40
 80082a8:	4013      	ands	r3, r2
 80082aa:	2b40      	cmp	r3, #64	@ 0x40
 80082ac:	d007      	beq.n	80082be <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2140      	movs	r1, #64	@ 0x40
 80082ba:	430a      	orrs	r2, r1
 80082bc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	68da      	ldr	r2, [r3, #12]
 80082c2:	23e0      	movs	r3, #224	@ 0xe0
 80082c4:	00db      	lsls	r3, r3, #3
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d900      	bls.n	80082cc <HAL_SPI_Receive+0x164>
 80082ca:	e071      	b.n	80083b0 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80082cc:	e035      	b.n	800833a <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	2201      	movs	r2, #1
 80082d6:	4013      	ands	r3, r2
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d117      	bne.n	800830c <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	330c      	adds	r3, #12
 80082e2:	001a      	movs	r2, r3
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082e8:	7812      	ldrb	r2, [r2, #0]
 80082ea:	b2d2      	uxtb	r2, r2
 80082ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082f2:	1c5a      	adds	r2, r3, #1
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2246      	movs	r2, #70	@ 0x46
 80082fc:	5a9b      	ldrh	r3, [r3, r2]
 80082fe:	b29b      	uxth	r3, r3
 8008300:	3b01      	subs	r3, #1
 8008302:	b299      	uxth	r1, r3
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2246      	movs	r2, #70	@ 0x46
 8008308:	5299      	strh	r1, [r3, r2]
 800830a:	e016      	b.n	800833a <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800830c:	f7fc fcea 	bl	8004ce4 <HAL_GetTick>
 8008310:	0002      	movs	r2, r0
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	1ad3      	subs	r3, r2, r3
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	429a      	cmp	r2, r3
 800831a:	d802      	bhi.n	8008322 <HAL_SPI_Receive+0x1ba>
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	3301      	adds	r3, #1
 8008320:	d102      	bne.n	8008328 <HAL_SPI_Receive+0x1c0>
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d108      	bne.n	800833a <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8008328:	2317      	movs	r3, #23
 800832a:	18fb      	adds	r3, r7, r3
 800832c:	2203      	movs	r2, #3
 800832e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	225d      	movs	r2, #93	@ 0x5d
 8008334:	2101      	movs	r1, #1
 8008336:	5499      	strb	r1, [r3, r2]
          goto error;
 8008338:	e058      	b.n	80083ec <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2246      	movs	r2, #70	@ 0x46
 800833e:	5a9b      	ldrh	r3, [r3, r2]
 8008340:	b29b      	uxth	r3, r3
 8008342:	2b00      	cmp	r3, #0
 8008344:	d1c3      	bne.n	80082ce <HAL_SPI_Receive+0x166>
 8008346:	e039      	b.n	80083bc <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	2201      	movs	r2, #1
 8008350:	4013      	ands	r3, r2
 8008352:	2b01      	cmp	r3, #1
 8008354:	d115      	bne.n	8008382 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	68da      	ldr	r2, [r3, #12]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008360:	b292      	uxth	r2, r2
 8008362:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008368:	1c9a      	adds	r2, r3, #2
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2246      	movs	r2, #70	@ 0x46
 8008372:	5a9b      	ldrh	r3, [r3, r2]
 8008374:	b29b      	uxth	r3, r3
 8008376:	3b01      	subs	r3, #1
 8008378:	b299      	uxth	r1, r3
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2246      	movs	r2, #70	@ 0x46
 800837e:	5299      	strh	r1, [r3, r2]
 8008380:	e016      	b.n	80083b0 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008382:	f7fc fcaf 	bl	8004ce4 <HAL_GetTick>
 8008386:	0002      	movs	r2, r0
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	1ad3      	subs	r3, r2, r3
 800838c:	683a      	ldr	r2, [r7, #0]
 800838e:	429a      	cmp	r2, r3
 8008390:	d802      	bhi.n	8008398 <HAL_SPI_Receive+0x230>
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	3301      	adds	r3, #1
 8008396:	d102      	bne.n	800839e <HAL_SPI_Receive+0x236>
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d108      	bne.n	80083b0 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 800839e:	2317      	movs	r3, #23
 80083a0:	18fb      	adds	r3, r7, r3
 80083a2:	2203      	movs	r2, #3
 80083a4:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	225d      	movs	r2, #93	@ 0x5d
 80083aa:	2101      	movs	r1, #1
 80083ac:	5499      	strb	r1, [r3, r2]
          goto error;
 80083ae:	e01d      	b.n	80083ec <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2246      	movs	r2, #70	@ 0x46
 80083b4:	5a9b      	ldrh	r3, [r3, r2]
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d1c5      	bne.n	8008348 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80083bc:	693a      	ldr	r2, [r7, #16]
 80083be:	6839      	ldr	r1, [r7, #0]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	0018      	movs	r0, r3
 80083c4:	f000 fb34 	bl	8008a30 <SPI_EndRxTransaction>
 80083c8:	1e03      	subs	r3, r0, #0
 80083ca:	d002      	beq.n	80083d2 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2220      	movs	r2, #32
 80083d0:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d004      	beq.n	80083e4 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 80083da:	2317      	movs	r3, #23
 80083dc:	18fb      	adds	r3, r7, r3
 80083de:	2201      	movs	r2, #1
 80083e0:	701a      	strb	r2, [r3, #0]
 80083e2:	e003      	b.n	80083ec <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	225d      	movs	r2, #93	@ 0x5d
 80083e8:	2101      	movs	r1, #1
 80083ea:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	225c      	movs	r2, #92	@ 0x5c
 80083f0:	2100      	movs	r1, #0
 80083f2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80083f4:	2317      	movs	r3, #23
 80083f6:	18fb      	adds	r3, r7, r3
 80083f8:	781b      	ldrb	r3, [r3, #0]
}
 80083fa:	0018      	movs	r0, r3
 80083fc:	46bd      	mov	sp, r7
 80083fe:	b007      	add	sp, #28
 8008400:	bd90      	pop	{r4, r7, pc}
 8008402:	46c0      	nop			@ (mov r8, r8)
 8008404:	ffffefff 	.word	0xffffefff
 8008408:	ffffbfff 	.word	0xffffbfff

0800840c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b08a      	sub	sp, #40	@ 0x28
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	607a      	str	r2, [r7, #4]
 8008418:	001a      	movs	r2, r3
 800841a:	1cbb      	adds	r3, r7, #2
 800841c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800841e:	2301      	movs	r3, #1
 8008420:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008422:	2323      	movs	r3, #35	@ 0x23
 8008424:	18fb      	adds	r3, r7, r3
 8008426:	2200      	movs	r2, #0
 8008428:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	225c      	movs	r2, #92	@ 0x5c
 800842e:	5c9b      	ldrb	r3, [r3, r2]
 8008430:	2b01      	cmp	r3, #1
 8008432:	d101      	bne.n	8008438 <HAL_SPI_TransmitReceive+0x2c>
 8008434:	2302      	movs	r3, #2
 8008436:	e1c4      	b.n	80087c2 <HAL_SPI_TransmitReceive+0x3b6>
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	225c      	movs	r2, #92	@ 0x5c
 800843c:	2101      	movs	r1, #1
 800843e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008440:	f7fc fc50 	bl	8004ce4 <HAL_GetTick>
 8008444:	0003      	movs	r3, r0
 8008446:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008448:	201b      	movs	r0, #27
 800844a:	183b      	adds	r3, r7, r0
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	215d      	movs	r1, #93	@ 0x5d
 8008450:	5c52      	ldrb	r2, [r2, r1]
 8008452:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800845a:	2312      	movs	r3, #18
 800845c:	18fb      	adds	r3, r7, r3
 800845e:	1cba      	adds	r2, r7, #2
 8008460:	8812      	ldrh	r2, [r2, #0]
 8008462:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008464:	183b      	adds	r3, r7, r0
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	2b01      	cmp	r3, #1
 800846a:	d011      	beq.n	8008490 <HAL_SPI_TransmitReceive+0x84>
 800846c:	697a      	ldr	r2, [r7, #20]
 800846e:	2382      	movs	r3, #130	@ 0x82
 8008470:	005b      	lsls	r3, r3, #1
 8008472:	429a      	cmp	r2, r3
 8008474:	d107      	bne.n	8008486 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d103      	bne.n	8008486 <HAL_SPI_TransmitReceive+0x7a>
 800847e:	183b      	adds	r3, r7, r0
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	2b04      	cmp	r3, #4
 8008484:	d004      	beq.n	8008490 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8008486:	2323      	movs	r3, #35	@ 0x23
 8008488:	18fb      	adds	r3, r7, r3
 800848a:	2202      	movs	r2, #2
 800848c:	701a      	strb	r2, [r3, #0]
    goto error;
 800848e:	e191      	b.n	80087b4 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d006      	beq.n	80084a4 <HAL_SPI_TransmitReceive+0x98>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d003      	beq.n	80084a4 <HAL_SPI_TransmitReceive+0x98>
 800849c:	1cbb      	adds	r3, r7, #2
 800849e:	881b      	ldrh	r3, [r3, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d104      	bne.n	80084ae <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80084a4:	2323      	movs	r3, #35	@ 0x23
 80084a6:	18fb      	adds	r3, r7, r3
 80084a8:	2201      	movs	r2, #1
 80084aa:	701a      	strb	r2, [r3, #0]
    goto error;
 80084ac:	e182      	b.n	80087b4 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	225d      	movs	r2, #93	@ 0x5d
 80084b2:	5c9b      	ldrb	r3, [r3, r2]
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	2b04      	cmp	r3, #4
 80084b8:	d003      	beq.n	80084c2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	225d      	movs	r2, #93	@ 0x5d
 80084be:	2105      	movs	r1, #5
 80084c0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2200      	movs	r2, #0
 80084c6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	1cba      	adds	r2, r7, #2
 80084d2:	2146      	movs	r1, #70	@ 0x46
 80084d4:	8812      	ldrh	r2, [r2, #0]
 80084d6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	1cba      	adds	r2, r7, #2
 80084dc:	2144      	movs	r1, #68	@ 0x44
 80084de:	8812      	ldrh	r2, [r2, #0]
 80084e0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	68ba      	ldr	r2, [r7, #8]
 80084e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	1cba      	adds	r2, r7, #2
 80084ec:	8812      	ldrh	r2, [r2, #0]
 80084ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	1cba      	adds	r2, r7, #2
 80084f4:	8812      	ldrh	r2, [r2, #0]
 80084f6:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2200      	movs	r2, #0
 80084fc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2200      	movs	r2, #0
 8008502:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	68da      	ldr	r2, [r3, #12]
 8008508:	23e0      	movs	r3, #224	@ 0xe0
 800850a:	00db      	lsls	r3, r3, #3
 800850c:	429a      	cmp	r2, r3
 800850e:	d908      	bls.n	8008522 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	685a      	ldr	r2, [r3, #4]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	49ac      	ldr	r1, [pc, #688]	@ (80087cc <HAL_SPI_TransmitReceive+0x3c0>)
 800851c:	400a      	ands	r2, r1
 800851e:	605a      	str	r2, [r3, #4]
 8008520:	e008      	b.n	8008534 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	685a      	ldr	r2, [r3, #4]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2180      	movs	r1, #128	@ 0x80
 800852e:	0149      	lsls	r1, r1, #5
 8008530:	430a      	orrs	r2, r1
 8008532:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2240      	movs	r2, #64	@ 0x40
 800853c:	4013      	ands	r3, r2
 800853e:	2b40      	cmp	r3, #64	@ 0x40
 8008540:	d007      	beq.n	8008552 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2140      	movs	r1, #64	@ 0x40
 800854e:	430a      	orrs	r2, r1
 8008550:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	68da      	ldr	r2, [r3, #12]
 8008556:	23e0      	movs	r3, #224	@ 0xe0
 8008558:	00db      	lsls	r3, r3, #3
 800855a:	429a      	cmp	r2, r3
 800855c:	d800      	bhi.n	8008560 <HAL_SPI_TransmitReceive+0x154>
 800855e:	e083      	b.n	8008668 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d005      	beq.n	8008574 <HAL_SPI_TransmitReceive+0x168>
 8008568:	2312      	movs	r3, #18
 800856a:	18fb      	adds	r3, r7, r3
 800856c:	881b      	ldrh	r3, [r3, #0]
 800856e:	2b01      	cmp	r3, #1
 8008570:	d000      	beq.n	8008574 <HAL_SPI_TransmitReceive+0x168>
 8008572:	e06d      	b.n	8008650 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008578:	881a      	ldrh	r2, [r3, #0]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008584:	1c9a      	adds	r2, r3, #2
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800858e:	b29b      	uxth	r3, r3
 8008590:	3b01      	subs	r3, #1
 8008592:	b29a      	uxth	r2, r3
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008598:	e05a      	b.n	8008650 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	2202      	movs	r2, #2
 80085a2:	4013      	ands	r3, r2
 80085a4:	2b02      	cmp	r3, #2
 80085a6:	d11b      	bne.n	80085e0 <HAL_SPI_TransmitReceive+0x1d4>
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d016      	beq.n	80085e0 <HAL_SPI_TransmitReceive+0x1d4>
 80085b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d113      	bne.n	80085e0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085bc:	881a      	ldrh	r2, [r3, #0]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085c8:	1c9a      	adds	r2, r3, #2
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	3b01      	subs	r3, #1
 80085d6:	b29a      	uxth	r2, r3
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80085dc:	2300      	movs	r3, #0
 80085de:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	2201      	movs	r2, #1
 80085e8:	4013      	ands	r3, r2
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d11c      	bne.n	8008628 <HAL_SPI_TransmitReceive+0x21c>
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2246      	movs	r2, #70	@ 0x46
 80085f2:	5a9b      	ldrh	r3, [r3, r2]
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d016      	beq.n	8008628 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68da      	ldr	r2, [r3, #12]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008604:	b292      	uxth	r2, r2
 8008606:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800860c:	1c9a      	adds	r2, r3, #2
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2246      	movs	r2, #70	@ 0x46
 8008616:	5a9b      	ldrh	r3, [r3, r2]
 8008618:	b29b      	uxth	r3, r3
 800861a:	3b01      	subs	r3, #1
 800861c:	b299      	uxth	r1, r3
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2246      	movs	r2, #70	@ 0x46
 8008622:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008624:	2301      	movs	r3, #1
 8008626:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008628:	f7fc fb5c 	bl	8004ce4 <HAL_GetTick>
 800862c:	0002      	movs	r2, r0
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	1ad3      	subs	r3, r2, r3
 8008632:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008634:	429a      	cmp	r2, r3
 8008636:	d80b      	bhi.n	8008650 <HAL_SPI_TransmitReceive+0x244>
 8008638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800863a:	3301      	adds	r3, #1
 800863c:	d008      	beq.n	8008650 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800863e:	2323      	movs	r3, #35	@ 0x23
 8008640:	18fb      	adds	r3, r7, r3
 8008642:	2203      	movs	r2, #3
 8008644:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	225d      	movs	r2, #93	@ 0x5d
 800864a:	2101      	movs	r1, #1
 800864c:	5499      	strb	r1, [r3, r2]
        goto error;
 800864e:	e0b1      	b.n	80087b4 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008654:	b29b      	uxth	r3, r3
 8008656:	2b00      	cmp	r3, #0
 8008658:	d19f      	bne.n	800859a <HAL_SPI_TransmitReceive+0x18e>
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2246      	movs	r2, #70	@ 0x46
 800865e:	5a9b      	ldrh	r3, [r3, r2]
 8008660:	b29b      	uxth	r3, r3
 8008662:	2b00      	cmp	r3, #0
 8008664:	d199      	bne.n	800859a <HAL_SPI_TransmitReceive+0x18e>
 8008666:	e089      	b.n	800877c <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d005      	beq.n	800867c <HAL_SPI_TransmitReceive+0x270>
 8008670:	2312      	movs	r3, #18
 8008672:	18fb      	adds	r3, r7, r3
 8008674:	881b      	ldrh	r3, [r3, #0]
 8008676:	2b01      	cmp	r3, #1
 8008678:	d000      	beq.n	800867c <HAL_SPI_TransmitReceive+0x270>
 800867a:	e074      	b.n	8008766 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	330c      	adds	r3, #12
 8008686:	7812      	ldrb	r2, [r2, #0]
 8008688:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800868e:	1c5a      	adds	r2, r3, #1
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008698:	b29b      	uxth	r3, r3
 800869a:	3b01      	subs	r3, #1
 800869c:	b29a      	uxth	r2, r3
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086a2:	e060      	b.n	8008766 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	2202      	movs	r2, #2
 80086ac:	4013      	ands	r3, r2
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d11c      	bne.n	80086ec <HAL_SPI_TransmitReceive+0x2e0>
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d017      	beq.n	80086ec <HAL_SPI_TransmitReceive+0x2e0>
 80086bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d114      	bne.n	80086ec <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	330c      	adds	r3, #12
 80086cc:	7812      	ldrb	r2, [r2, #0]
 80086ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086d4:	1c5a      	adds	r2, r3, #1
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086de:	b29b      	uxth	r3, r3
 80086e0:	3b01      	subs	r3, #1
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80086e8:	2300      	movs	r3, #0
 80086ea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	2201      	movs	r2, #1
 80086f4:	4013      	ands	r3, r2
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d11e      	bne.n	8008738 <HAL_SPI_TransmitReceive+0x32c>
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2246      	movs	r2, #70	@ 0x46
 80086fe:	5a9b      	ldrh	r3, [r3, r2]
 8008700:	b29b      	uxth	r3, r3
 8008702:	2b00      	cmp	r3, #0
 8008704:	d018      	beq.n	8008738 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	330c      	adds	r3, #12
 800870c:	001a      	movs	r2, r3
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008712:	7812      	ldrb	r2, [r2, #0]
 8008714:	b2d2      	uxtb	r2, r2
 8008716:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800871c:	1c5a      	adds	r2, r3, #1
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2246      	movs	r2, #70	@ 0x46
 8008726:	5a9b      	ldrh	r3, [r3, r2]
 8008728:	b29b      	uxth	r3, r3
 800872a:	3b01      	subs	r3, #1
 800872c:	b299      	uxth	r1, r3
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2246      	movs	r2, #70	@ 0x46
 8008732:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008734:	2301      	movs	r3, #1
 8008736:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008738:	f7fc fad4 	bl	8004ce4 <HAL_GetTick>
 800873c:	0002      	movs	r2, r0
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008744:	429a      	cmp	r2, r3
 8008746:	d802      	bhi.n	800874e <HAL_SPI_TransmitReceive+0x342>
 8008748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800874a:	3301      	adds	r3, #1
 800874c:	d102      	bne.n	8008754 <HAL_SPI_TransmitReceive+0x348>
 800874e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008750:	2b00      	cmp	r3, #0
 8008752:	d108      	bne.n	8008766 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8008754:	2323      	movs	r3, #35	@ 0x23
 8008756:	18fb      	adds	r3, r7, r3
 8008758:	2203      	movs	r2, #3
 800875a:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	225d      	movs	r2, #93	@ 0x5d
 8008760:	2101      	movs	r1, #1
 8008762:	5499      	strb	r1, [r3, r2]
        goto error;
 8008764:	e026      	b.n	80087b4 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800876a:	b29b      	uxth	r3, r3
 800876c:	2b00      	cmp	r3, #0
 800876e:	d199      	bne.n	80086a4 <HAL_SPI_TransmitReceive+0x298>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2246      	movs	r2, #70	@ 0x46
 8008774:	5a9b      	ldrh	r3, [r3, r2]
 8008776:	b29b      	uxth	r3, r3
 8008778:	2b00      	cmp	r3, #0
 800877a:	d193      	bne.n	80086a4 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800877c:	69fa      	ldr	r2, [r7, #28]
 800877e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	0018      	movs	r0, r3
 8008784:	f000 f9b2 	bl	8008aec <SPI_EndRxTxTransaction>
 8008788:	1e03      	subs	r3, r0, #0
 800878a:	d006      	beq.n	800879a <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 800878c:	2323      	movs	r3, #35	@ 0x23
 800878e:	18fb      	adds	r3, r7, r3
 8008790:	2201      	movs	r2, #1
 8008792:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2220      	movs	r2, #32
 8008798:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d004      	beq.n	80087ac <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80087a2:	2323      	movs	r3, #35	@ 0x23
 80087a4:	18fb      	adds	r3, r7, r3
 80087a6:	2201      	movs	r2, #1
 80087a8:	701a      	strb	r2, [r3, #0]
 80087aa:	e003      	b.n	80087b4 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	225d      	movs	r2, #93	@ 0x5d
 80087b0:	2101      	movs	r1, #1
 80087b2:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	225c      	movs	r2, #92	@ 0x5c
 80087b8:	2100      	movs	r1, #0
 80087ba:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80087bc:	2323      	movs	r3, #35	@ 0x23
 80087be:	18fb      	adds	r3, r7, r3
 80087c0:	781b      	ldrb	r3, [r3, #0]
}
 80087c2:	0018      	movs	r0, r3
 80087c4:	46bd      	mov	sp, r7
 80087c6:	b00a      	add	sp, #40	@ 0x28
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	46c0      	nop			@ (mov r8, r8)
 80087cc:	ffffefff 	.word	0xffffefff

080087d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b088      	sub	sp, #32
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	603b      	str	r3, [r7, #0]
 80087dc:	1dfb      	adds	r3, r7, #7
 80087de:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80087e0:	f7fc fa80 	bl	8004ce4 <HAL_GetTick>
 80087e4:	0002      	movs	r2, r0
 80087e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087e8:	1a9b      	subs	r3, r3, r2
 80087ea:	683a      	ldr	r2, [r7, #0]
 80087ec:	18d3      	adds	r3, r2, r3
 80087ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80087f0:	f7fc fa78 	bl	8004ce4 <HAL_GetTick>
 80087f4:	0003      	movs	r3, r0
 80087f6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80087f8:	4b3a      	ldr	r3, [pc, #232]	@ (80088e4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	015b      	lsls	r3, r3, #5
 80087fe:	0d1b      	lsrs	r3, r3, #20
 8008800:	69fa      	ldr	r2, [r7, #28]
 8008802:	4353      	muls	r3, r2
 8008804:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008806:	e058      	b.n	80088ba <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	3301      	adds	r3, #1
 800880c:	d055      	beq.n	80088ba <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800880e:	f7fc fa69 	bl	8004ce4 <HAL_GetTick>
 8008812:	0002      	movs	r2, r0
 8008814:	69bb      	ldr	r3, [r7, #24]
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	69fa      	ldr	r2, [r7, #28]
 800881a:	429a      	cmp	r2, r3
 800881c:	d902      	bls.n	8008824 <SPI_WaitFlagStateUntilTimeout+0x54>
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d142      	bne.n	80088aa <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	685a      	ldr	r2, [r3, #4]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	21e0      	movs	r1, #224	@ 0xe0
 8008830:	438a      	bics	r2, r1
 8008832:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	685a      	ldr	r2, [r3, #4]
 8008838:	2382      	movs	r3, #130	@ 0x82
 800883a:	005b      	lsls	r3, r3, #1
 800883c:	429a      	cmp	r2, r3
 800883e:	d113      	bne.n	8008868 <SPI_WaitFlagStateUntilTimeout+0x98>
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	689a      	ldr	r2, [r3, #8]
 8008844:	2380      	movs	r3, #128	@ 0x80
 8008846:	021b      	lsls	r3, r3, #8
 8008848:	429a      	cmp	r2, r3
 800884a:	d005      	beq.n	8008858 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	689a      	ldr	r2, [r3, #8]
 8008850:	2380      	movs	r3, #128	@ 0x80
 8008852:	00db      	lsls	r3, r3, #3
 8008854:	429a      	cmp	r2, r3
 8008856:	d107      	bne.n	8008868 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2140      	movs	r1, #64	@ 0x40
 8008864:	438a      	bics	r2, r1
 8008866:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800886c:	2380      	movs	r3, #128	@ 0x80
 800886e:	019b      	lsls	r3, r3, #6
 8008870:	429a      	cmp	r2, r3
 8008872:	d110      	bne.n	8008896 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	491a      	ldr	r1, [pc, #104]	@ (80088e8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8008880:	400a      	ands	r2, r1
 8008882:	601a      	str	r2, [r3, #0]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2180      	movs	r1, #128	@ 0x80
 8008890:	0189      	lsls	r1, r1, #6
 8008892:	430a      	orrs	r2, r1
 8008894:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	225d      	movs	r2, #93	@ 0x5d
 800889a:	2101      	movs	r1, #1
 800889c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	225c      	movs	r2, #92	@ 0x5c
 80088a2:	2100      	movs	r1, #0
 80088a4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80088a6:	2303      	movs	r3, #3
 80088a8:	e017      	b.n	80088da <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d101      	bne.n	80088b4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80088b0:	2300      	movs	r3, #0
 80088b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	3b01      	subs	r3, #1
 80088b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	68ba      	ldr	r2, [r7, #8]
 80088c2:	4013      	ands	r3, r2
 80088c4:	68ba      	ldr	r2, [r7, #8]
 80088c6:	1ad3      	subs	r3, r2, r3
 80088c8:	425a      	negs	r2, r3
 80088ca:	4153      	adcs	r3, r2
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	001a      	movs	r2, r3
 80088d0:	1dfb      	adds	r3, r7, #7
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d197      	bne.n	8008808 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	0018      	movs	r0, r3
 80088dc:	46bd      	mov	sp, r7
 80088de:	b008      	add	sp, #32
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	46c0      	nop			@ (mov r8, r8)
 80088e4:	20000004 	.word	0x20000004
 80088e8:	ffffdfff 	.word	0xffffdfff

080088ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b08a      	sub	sp, #40	@ 0x28
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
 80088f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80088fa:	2317      	movs	r3, #23
 80088fc:	18fb      	adds	r3, r7, r3
 80088fe:	2200      	movs	r2, #0
 8008900:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008902:	f7fc f9ef 	bl	8004ce4 <HAL_GetTick>
 8008906:	0002      	movs	r2, r0
 8008908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800890a:	1a9b      	subs	r3, r3, r2
 800890c:	683a      	ldr	r2, [r7, #0]
 800890e:	18d3      	adds	r3, r2, r3
 8008910:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008912:	f7fc f9e7 	bl	8004ce4 <HAL_GetTick>
 8008916:	0003      	movs	r3, r0
 8008918:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	330c      	adds	r3, #12
 8008920:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008922:	4b41      	ldr	r3, [pc, #260]	@ (8008a28 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	0013      	movs	r3, r2
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	189b      	adds	r3, r3, r2
 800892c:	00da      	lsls	r2, r3, #3
 800892e:	1ad3      	subs	r3, r2, r3
 8008930:	0d1b      	lsrs	r3, r3, #20
 8008932:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008934:	4353      	muls	r3, r2
 8008936:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008938:	e068      	b.n	8008a0c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800893a:	68ba      	ldr	r2, [r7, #8]
 800893c:	23c0      	movs	r3, #192	@ 0xc0
 800893e:	00db      	lsls	r3, r3, #3
 8008940:	429a      	cmp	r2, r3
 8008942:	d10a      	bne.n	800895a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d107      	bne.n	800895a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	b2da      	uxtb	r2, r3
 8008950:	2117      	movs	r1, #23
 8008952:	187b      	adds	r3, r7, r1
 8008954:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008956:	187b      	adds	r3, r7, r1
 8008958:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	3301      	adds	r3, #1
 800895e:	d055      	beq.n	8008a0c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008960:	f7fc f9c0 	bl	8004ce4 <HAL_GetTick>
 8008964:	0002      	movs	r2, r0
 8008966:	6a3b      	ldr	r3, [r7, #32]
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800896c:	429a      	cmp	r2, r3
 800896e:	d902      	bls.n	8008976 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8008970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008972:	2b00      	cmp	r3, #0
 8008974:	d142      	bne.n	80089fc <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	685a      	ldr	r2, [r3, #4]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	21e0      	movs	r1, #224	@ 0xe0
 8008982:	438a      	bics	r2, r1
 8008984:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	685a      	ldr	r2, [r3, #4]
 800898a:	2382      	movs	r3, #130	@ 0x82
 800898c:	005b      	lsls	r3, r3, #1
 800898e:	429a      	cmp	r2, r3
 8008990:	d113      	bne.n	80089ba <SPI_WaitFifoStateUntilTimeout+0xce>
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	689a      	ldr	r2, [r3, #8]
 8008996:	2380      	movs	r3, #128	@ 0x80
 8008998:	021b      	lsls	r3, r3, #8
 800899a:	429a      	cmp	r2, r3
 800899c:	d005      	beq.n	80089aa <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	689a      	ldr	r2, [r3, #8]
 80089a2:	2380      	movs	r3, #128	@ 0x80
 80089a4:	00db      	lsls	r3, r3, #3
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d107      	bne.n	80089ba <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2140      	movs	r1, #64	@ 0x40
 80089b6:	438a      	bics	r2, r1
 80089b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80089be:	2380      	movs	r3, #128	@ 0x80
 80089c0:	019b      	lsls	r3, r3, #6
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d110      	bne.n	80089e8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4916      	ldr	r1, [pc, #88]	@ (8008a2c <SPI_WaitFifoStateUntilTimeout+0x140>)
 80089d2:	400a      	ands	r2, r1
 80089d4:	601a      	str	r2, [r3, #0]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	2180      	movs	r1, #128	@ 0x80
 80089e2:	0189      	lsls	r1, r1, #6
 80089e4:	430a      	orrs	r2, r1
 80089e6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	225d      	movs	r2, #93	@ 0x5d
 80089ec:	2101      	movs	r1, #1
 80089ee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	225c      	movs	r2, #92	@ 0x5c
 80089f4:	2100      	movs	r1, #0
 80089f6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80089f8:	2303      	movs	r3, #3
 80089fa:	e010      	b.n	8008a1e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d101      	bne.n	8008a06 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8008a02:	2300      	movs	r3, #0
 8008a04:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008a06:	69bb      	ldr	r3, [r7, #24]
 8008a08:	3b01      	subs	r3, #1
 8008a0a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	68ba      	ldr	r2, [r7, #8]
 8008a14:	4013      	ands	r3, r2
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d18e      	bne.n	800893a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	0018      	movs	r0, r3
 8008a20:	46bd      	mov	sp, r7
 8008a22:	b00a      	add	sp, #40	@ 0x28
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	46c0      	nop			@ (mov r8, r8)
 8008a28:	20000004 	.word	0x20000004
 8008a2c:	ffffdfff 	.word	0xffffdfff

08008a30 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b086      	sub	sp, #24
 8008a34:	af02      	add	r7, sp, #8
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	685a      	ldr	r2, [r3, #4]
 8008a40:	2382      	movs	r3, #130	@ 0x82
 8008a42:	005b      	lsls	r3, r3, #1
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d113      	bne.n	8008a70 <SPI_EndRxTransaction+0x40>
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	689a      	ldr	r2, [r3, #8]
 8008a4c:	2380      	movs	r3, #128	@ 0x80
 8008a4e:	021b      	lsls	r3, r3, #8
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d005      	beq.n	8008a60 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	689a      	ldr	r2, [r3, #8]
 8008a58:	2380      	movs	r3, #128	@ 0x80
 8008a5a:	00db      	lsls	r3, r3, #3
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d107      	bne.n	8008a70 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	2140      	movs	r1, #64	@ 0x40
 8008a6c:	438a      	bics	r2, r1
 8008a6e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008a70:	68ba      	ldr	r2, [r7, #8]
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	9300      	str	r3, [sp, #0]
 8008a78:	0013      	movs	r3, r2
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	2180      	movs	r1, #128	@ 0x80
 8008a7e:	f7ff fea7 	bl	80087d0 <SPI_WaitFlagStateUntilTimeout>
 8008a82:	1e03      	subs	r3, r0, #0
 8008a84:	d007      	beq.n	8008a96 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a8a:	2220      	movs	r2, #32
 8008a8c:	431a      	orrs	r2, r3
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008a92:	2303      	movs	r3, #3
 8008a94:	e026      	b.n	8008ae4 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	685a      	ldr	r2, [r3, #4]
 8008a9a:	2382      	movs	r3, #130	@ 0x82
 8008a9c:	005b      	lsls	r3, r3, #1
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d11f      	bne.n	8008ae2 <SPI_EndRxTransaction+0xb2>
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	689a      	ldr	r2, [r3, #8]
 8008aa6:	2380      	movs	r3, #128	@ 0x80
 8008aa8:	021b      	lsls	r3, r3, #8
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d005      	beq.n	8008aba <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	689a      	ldr	r2, [r3, #8]
 8008ab2:	2380      	movs	r3, #128	@ 0x80
 8008ab4:	00db      	lsls	r3, r3, #3
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d113      	bne.n	8008ae2 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008aba:	68ba      	ldr	r2, [r7, #8]
 8008abc:	23c0      	movs	r3, #192	@ 0xc0
 8008abe:	00d9      	lsls	r1, r3, #3
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	9300      	str	r3, [sp, #0]
 8008ac6:	0013      	movs	r3, r2
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f7ff ff0f 	bl	80088ec <SPI_WaitFifoStateUntilTimeout>
 8008ace:	1e03      	subs	r3, r0, #0
 8008ad0:	d007      	beq.n	8008ae2 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ad6:	2220      	movs	r2, #32
 8008ad8:	431a      	orrs	r2, r3
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8008ade:	2303      	movs	r3, #3
 8008ae0:	e000      	b.n	8008ae4 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8008ae2:	2300      	movs	r3, #0
}
 8008ae4:	0018      	movs	r0, r3
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	b004      	add	sp, #16
 8008aea:	bd80      	pop	{r7, pc}

08008aec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b086      	sub	sp, #24
 8008af0:	af02      	add	r7, sp, #8
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008af8:	68ba      	ldr	r2, [r7, #8]
 8008afa:	23c0      	movs	r3, #192	@ 0xc0
 8008afc:	0159      	lsls	r1, r3, #5
 8008afe:	68f8      	ldr	r0, [r7, #12]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	0013      	movs	r3, r2
 8008b06:	2200      	movs	r2, #0
 8008b08:	f7ff fef0 	bl	80088ec <SPI_WaitFifoStateUntilTimeout>
 8008b0c:	1e03      	subs	r3, r0, #0
 8008b0e:	d007      	beq.n	8008b20 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b14:	2220      	movs	r2, #32
 8008b16:	431a      	orrs	r2, r3
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008b1c:	2303      	movs	r3, #3
 8008b1e:	e027      	b.n	8008b70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008b20:	68ba      	ldr	r2, [r7, #8]
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	9300      	str	r3, [sp, #0]
 8008b28:	0013      	movs	r3, r2
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	2180      	movs	r1, #128	@ 0x80
 8008b2e:	f7ff fe4f 	bl	80087d0 <SPI_WaitFlagStateUntilTimeout>
 8008b32:	1e03      	subs	r3, r0, #0
 8008b34:	d007      	beq.n	8008b46 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b3a:	2220      	movs	r2, #32
 8008b3c:	431a      	orrs	r2, r3
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008b42:	2303      	movs	r3, #3
 8008b44:	e014      	b.n	8008b70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008b46:	68ba      	ldr	r2, [r7, #8]
 8008b48:	23c0      	movs	r3, #192	@ 0xc0
 8008b4a:	00d9      	lsls	r1, r3, #3
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	9300      	str	r3, [sp, #0]
 8008b52:	0013      	movs	r3, r2
 8008b54:	2200      	movs	r2, #0
 8008b56:	f7ff fec9 	bl	80088ec <SPI_WaitFifoStateUntilTimeout>
 8008b5a:	1e03      	subs	r3, r0, #0
 8008b5c:	d007      	beq.n	8008b6e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b62:	2220      	movs	r2, #32
 8008b64:	431a      	orrs	r2, r3
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008b6a:	2303      	movs	r3, #3
 8008b6c:	e000      	b.n	8008b70 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	0018      	movs	r0, r3
 8008b72:	46bd      	mov	sp, r7
 8008b74:	b004      	add	sp, #16
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d101      	bne.n	8008b8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	e046      	b.n	8008c18 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2288      	movs	r2, #136	@ 0x88
 8008b8e:	589b      	ldr	r3, [r3, r2]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d107      	bne.n	8008ba4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2284      	movs	r2, #132	@ 0x84
 8008b98:	2100      	movs	r1, #0
 8008b9a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	0018      	movs	r0, r3
 8008ba0:	f7fb ffa6 	bl	8004af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2288      	movs	r2, #136	@ 0x88
 8008ba8:	2124      	movs	r1, #36	@ 0x24
 8008baa:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2101      	movs	r1, #1
 8008bb8:	438a      	bics	r2, r1
 8008bba:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d003      	beq.n	8008bcc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	0018      	movs	r0, r3
 8008bc8:	f000 f9fe 	bl	8008fc8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	0018      	movs	r0, r3
 8008bd0:	f000 f828 	bl	8008c24 <UART_SetConfig>
 8008bd4:	0003      	movs	r3, r0
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d101      	bne.n	8008bde <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e01c      	b.n	8008c18 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	685a      	ldr	r2, [r3, #4]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	490d      	ldr	r1, [pc, #52]	@ (8008c20 <HAL_UART_Init+0xa8>)
 8008bea:	400a      	ands	r2, r1
 8008bec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	689a      	ldr	r2, [r3, #8]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	212a      	movs	r1, #42	@ 0x2a
 8008bfa:	438a      	bics	r2, r1
 8008bfc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2101      	movs	r1, #1
 8008c0a:	430a      	orrs	r2, r1
 8008c0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	0018      	movs	r0, r3
 8008c12:	f000 fa8d 	bl	8009130 <UART_CheckIdleState>
 8008c16:	0003      	movs	r3, r0
}
 8008c18:	0018      	movs	r0, r3
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	b002      	add	sp, #8
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	ffffb7ff 	.word	0xffffb7ff

08008c24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c24:	b5b0      	push	{r4, r5, r7, lr}
 8008c26:	b092      	sub	sp, #72	@ 0x48
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008c2c:	231f      	movs	r3, #31
 8008c2e:	2220      	movs	r2, #32
 8008c30:	189b      	adds	r3, r3, r2
 8008c32:	19db      	adds	r3, r3, r7
 8008c34:	2200      	movs	r2, #0
 8008c36:	701a      	strb	r2, [r3, #0]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4ac8      	ldr	r2, [pc, #800]	@ (8008f60 <UART_SetConfig+0x33c>)
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c40:	689a      	ldr	r2, [r3, #8]
 8008c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	431a      	orrs	r2, r3
 8008c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c4a:	695b      	ldr	r3, [r3, #20]
 8008c4c:	431a      	orrs	r2, r3
 8008c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c50:	69db      	ldr	r3, [r3, #28]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4ac1      	ldr	r2, [pc, #772]	@ (8008f64 <UART_SetConfig+0x340>)
 8008c5e:	4013      	ands	r3, r2
 8008c60:	0019      	movs	r1, r3
 8008c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c68:	430b      	orrs	r3, r1
 8008c6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	4abd      	ldr	r2, [pc, #756]	@ (8008f68 <UART_SetConfig+0x344>)
 8008c74:	4013      	ands	r3, r2
 8008c76:	0018      	movs	r0, r3
 8008c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c7a:	68d9      	ldr	r1, [r3, #12]
 8008c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	0003      	movs	r3, r0
 8008c82:	430b      	orrs	r3, r1
 8008c84:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c88:	699b      	ldr	r3, [r3, #24]
 8008c8a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4ab3      	ldr	r2, [pc, #716]	@ (8008f60 <UART_SetConfig+0x33c>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d00e      	beq.n	8008cb4 <UART_SetConfig+0x90>
 8008c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4ab4      	ldr	r2, [pc, #720]	@ (8008f6c <UART_SetConfig+0x348>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d009      	beq.n	8008cb4 <UART_SetConfig+0x90>
 8008ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4ab2      	ldr	r2, [pc, #712]	@ (8008f70 <UART_SetConfig+0x34c>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d004      	beq.n	8008cb4 <UART_SetConfig+0x90>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cac:	6a1b      	ldr	r3, [r3, #32]
 8008cae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	4aae      	ldr	r2, [pc, #696]	@ (8008f74 <UART_SetConfig+0x350>)
 8008cbc:	4013      	ands	r3, r2
 8008cbe:	0019      	movs	r1, r3
 8008cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008cc6:	430b      	orrs	r3, r1
 8008cc8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd0:	220f      	movs	r2, #15
 8008cd2:	4393      	bics	r3, r2
 8008cd4:	0018      	movs	r0, r3
 8008cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	0003      	movs	r3, r0
 8008ce0:	430b      	orrs	r3, r1
 8008ce2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4aa3      	ldr	r2, [pc, #652]	@ (8008f78 <UART_SetConfig+0x354>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d102      	bne.n	8008cf4 <UART_SetConfig+0xd0>
 8008cee:	2301      	movs	r3, #1
 8008cf0:	643b      	str	r3, [r7, #64]	@ 0x40
 8008cf2:	e033      	b.n	8008d5c <UART_SetConfig+0x138>
 8008cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4aa0      	ldr	r2, [pc, #640]	@ (8008f7c <UART_SetConfig+0x358>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d102      	bne.n	8008d04 <UART_SetConfig+0xe0>
 8008cfe:	2302      	movs	r3, #2
 8008d00:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d02:	e02b      	b.n	8008d5c <UART_SetConfig+0x138>
 8008d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a9d      	ldr	r2, [pc, #628]	@ (8008f80 <UART_SetConfig+0x35c>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d103      	bne.n	8008d16 <UART_SetConfig+0xf2>
 8008d0e:	2380      	movs	r3, #128	@ 0x80
 8008d10:	025b      	lsls	r3, r3, #9
 8008d12:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d14:	e022      	b.n	8008d5c <UART_SetConfig+0x138>
 8008d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a9a      	ldr	r2, [pc, #616]	@ (8008f84 <UART_SetConfig+0x360>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d103      	bne.n	8008d28 <UART_SetConfig+0x104>
 8008d20:	2380      	movs	r3, #128	@ 0x80
 8008d22:	029b      	lsls	r3, r3, #10
 8008d24:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d26:	e019      	b.n	8008d5c <UART_SetConfig+0x138>
 8008d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a8c      	ldr	r2, [pc, #560]	@ (8008f60 <UART_SetConfig+0x33c>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d102      	bne.n	8008d38 <UART_SetConfig+0x114>
 8008d32:	2310      	movs	r3, #16
 8008d34:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d36:	e011      	b.n	8008d5c <UART_SetConfig+0x138>
 8008d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a8b      	ldr	r2, [pc, #556]	@ (8008f6c <UART_SetConfig+0x348>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d102      	bne.n	8008d48 <UART_SetConfig+0x124>
 8008d42:	2308      	movs	r3, #8
 8008d44:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d46:	e009      	b.n	8008d5c <UART_SetConfig+0x138>
 8008d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a88      	ldr	r2, [pc, #544]	@ (8008f70 <UART_SetConfig+0x34c>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d102      	bne.n	8008d58 <UART_SetConfig+0x134>
 8008d52:	2304      	movs	r3, #4
 8008d54:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d56:	e001      	b.n	8008d5c <UART_SetConfig+0x138>
 8008d58:	2300      	movs	r3, #0
 8008d5a:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a7f      	ldr	r2, [pc, #508]	@ (8008f60 <UART_SetConfig+0x33c>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d00a      	beq.n	8008d7c <UART_SetConfig+0x158>
 8008d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a80      	ldr	r2, [pc, #512]	@ (8008f6c <UART_SetConfig+0x348>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d005      	beq.n	8008d7c <UART_SetConfig+0x158>
 8008d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a7e      	ldr	r2, [pc, #504]	@ (8008f70 <UART_SetConfig+0x34c>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d000      	beq.n	8008d7c <UART_SetConfig+0x158>
 8008d7a:	e06f      	b.n	8008e5c <UART_SetConfig+0x238>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008d7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d7e:	0018      	movs	r0, r3
 8008d80:	f7fe f860 	bl	8006e44 <HAL_RCCEx_GetPeriphCLKFreq>
 8008d84:	0003      	movs	r3, r0
 8008d86:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* If proper clock source reported */
    if (pclk != 0U)
 8008d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d100      	bne.n	8008d90 <UART_SetConfig+0x16c>
 8008d8e:	e103      	b.n	8008f98 <UART_SetConfig+0x374>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d94:	4b7c      	ldr	r3, [pc, #496]	@ (8008f88 <UART_SetConfig+0x364>)
 8008d96:	0052      	lsls	r2, r2, #1
 8008d98:	5ad3      	ldrh	r3, [r2, r3]
 8008d9a:	0019      	movs	r1, r3
 8008d9c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008d9e:	f7f7 f9b3 	bl	8000108 <__udivsi3>
 8008da2:	0003      	movs	r3, r0
 8008da4:	62fb      	str	r3, [r7, #44]	@ 0x2c

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da8:	685a      	ldr	r2, [r3, #4]
 8008daa:	0013      	movs	r3, r2
 8008dac:	005b      	lsls	r3, r3, #1
 8008dae:	189b      	adds	r3, r3, r2
 8008db0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d305      	bcc.n	8008dc2 <UART_SetConfig+0x19e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008dbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d906      	bls.n	8008dd0 <UART_SetConfig+0x1ac>
      {
        ret = HAL_ERROR;
 8008dc2:	231f      	movs	r3, #31
 8008dc4:	2220      	movs	r2, #32
 8008dc6:	189b      	adds	r3, r3, r2
 8008dc8:	19db      	adds	r3, r3, r7
 8008dca:	2201      	movs	r2, #1
 8008dcc:	701a      	strb	r2, [r3, #0]
 8008dce:	e044      	b.n	8008e5a <UART_SetConfig+0x236>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd2:	61bb      	str	r3, [r7, #24]
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	61fb      	str	r3, [r7, #28]
 8008dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ddc:	4b6a      	ldr	r3, [pc, #424]	@ (8008f88 <UART_SetConfig+0x364>)
 8008dde:	0052      	lsls	r2, r2, #1
 8008de0:	5ad3      	ldrh	r3, [r2, r3]
 8008de2:	613b      	str	r3, [r7, #16]
 8008de4:	2300      	movs	r3, #0
 8008de6:	617b      	str	r3, [r7, #20]
 8008de8:	693a      	ldr	r2, [r7, #16]
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	69b8      	ldr	r0, [r7, #24]
 8008dee:	69f9      	ldr	r1, [r7, #28]
 8008df0:	f7f7 fb5c 	bl	80004ac <__aeabi_uldivmod>
 8008df4:	0002      	movs	r2, r0
 8008df6:	000b      	movs	r3, r1
 8008df8:	0e11      	lsrs	r1, r2, #24
 8008dfa:	021d      	lsls	r5, r3, #8
 8008dfc:	430d      	orrs	r5, r1
 8008dfe:	0214      	lsls	r4, r2, #8
 8008e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	085b      	lsrs	r3, r3, #1
 8008e06:	60bb      	str	r3, [r7, #8]
 8008e08:	2300      	movs	r3, #0
 8008e0a:	60fb      	str	r3, [r7, #12]
 8008e0c:	68b8      	ldr	r0, [r7, #8]
 8008e0e:	68f9      	ldr	r1, [r7, #12]
 8008e10:	1900      	adds	r0, r0, r4
 8008e12:	4169      	adcs	r1, r5
 8008e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	603b      	str	r3, [r7, #0]
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	607b      	str	r3, [r7, #4]
 8008e1e:	683a      	ldr	r2, [r7, #0]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f7f7 fb43 	bl	80004ac <__aeabi_uldivmod>
 8008e26:	0002      	movs	r2, r0
 8008e28:	000b      	movs	r3, r1
 8008e2a:	0013      	movs	r3, r2
 8008e2c:	637b      	str	r3, [r7, #52]	@ 0x34
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008e30:	23c0      	movs	r3, #192	@ 0xc0
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d309      	bcc.n	8008e4c <UART_SetConfig+0x228>
 8008e38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008e3a:	2380      	movs	r3, #128	@ 0x80
 8008e3c:	035b      	lsls	r3, r3, #13
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d204      	bcs.n	8008e4c <UART_SetConfig+0x228>
        {
          huart->Instance->BRR = usartdiv;
 8008e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008e48:	60da      	str	r2, [r3, #12]
 8008e4a:	e006      	b.n	8008e5a <UART_SetConfig+0x236>
        }
        else
        {
          ret = HAL_ERROR;
 8008e4c:	231f      	movs	r3, #31
 8008e4e:	2220      	movs	r2, #32
 8008e50:	189b      	adds	r3, r3, r2
 8008e52:	19db      	adds	r3, r3, r7
 8008e54:	2201      	movs	r2, #1
 8008e56:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8008e58:	e09e      	b.n	8008f98 <UART_SetConfig+0x374>
 8008e5a:	e09d      	b.n	8008f98 <UART_SetConfig+0x374>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e5e:	69da      	ldr	r2, [r3, #28]
 8008e60:	2380      	movs	r3, #128	@ 0x80
 8008e62:	021b      	lsls	r3, r3, #8
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d14c      	bne.n	8008f02 <UART_SetConfig+0x2de>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008e68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e6a:	0018      	movs	r0, r3
 8008e6c:	f7fd ffea 	bl	8006e44 <HAL_RCCEx_GetPeriphCLKFreq>
 8008e70:	0003      	movs	r3, r0
 8008e72:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d100      	bne.n	8008e7c <UART_SetConfig+0x258>
 8008e7a:	e08d      	b.n	8008f98 <UART_SetConfig+0x374>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008e80:	4b41      	ldr	r3, [pc, #260]	@ (8008f88 <UART_SetConfig+0x364>)
 8008e82:	0052      	lsls	r2, r2, #1
 8008e84:	5ad3      	ldrh	r3, [r2, r3]
 8008e86:	0019      	movs	r1, r3
 8008e88:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008e8a:	f7f7 f93d 	bl	8000108 <__udivsi3>
 8008e8e:	0003      	movs	r3, r0
 8008e90:	005a      	lsls	r2, r3, #1
 8008e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	085b      	lsrs	r3, r3, #1
 8008e98:	18d2      	adds	r2, r2, r3
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	0019      	movs	r1, r3
 8008ea0:	0010      	movs	r0, r2
 8008ea2:	f7f7 f931 	bl	8000108 <__udivsi3>
 8008ea6:	0003      	movs	r3, r0
 8008ea8:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eac:	2b0f      	cmp	r3, #15
 8008eae:	d921      	bls.n	8008ef4 <UART_SetConfig+0x2d0>
 8008eb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008eb2:	2380      	movs	r3, #128	@ 0x80
 8008eb4:	025b      	lsls	r3, r3, #9
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d21c      	bcs.n	8008ef4 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ebc:	b29a      	uxth	r2, r3
 8008ebe:	2012      	movs	r0, #18
 8008ec0:	2420      	movs	r4, #32
 8008ec2:	1903      	adds	r3, r0, r4
 8008ec4:	19db      	adds	r3, r3, r7
 8008ec6:	210f      	movs	r1, #15
 8008ec8:	438a      	bics	r2, r1
 8008eca:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ece:	085b      	lsrs	r3, r3, #1
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	2207      	movs	r2, #7
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	b299      	uxth	r1, r3
 8008ed8:	1903      	adds	r3, r0, r4
 8008eda:	19db      	adds	r3, r3, r7
 8008edc:	1902      	adds	r2, r0, r4
 8008ede:	19d2      	adds	r2, r2, r7
 8008ee0:	8812      	ldrh	r2, [r2, #0]
 8008ee2:	430a      	orrs	r2, r1
 8008ee4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	1902      	adds	r2, r0, r4
 8008eec:	19d2      	adds	r2, r2, r7
 8008eee:	8812      	ldrh	r2, [r2, #0]
 8008ef0:	60da      	str	r2, [r3, #12]
 8008ef2:	e051      	b.n	8008f98 <UART_SetConfig+0x374>
      }
      else
      {
        ret = HAL_ERROR;
 8008ef4:	231f      	movs	r3, #31
 8008ef6:	2220      	movs	r2, #32
 8008ef8:	189b      	adds	r3, r3, r2
 8008efa:	19db      	adds	r3, r3, r7
 8008efc:	2201      	movs	r2, #1
 8008efe:	701a      	strb	r2, [r3, #0]
 8008f00:	e04a      	b.n	8008f98 <UART_SetConfig+0x374>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008f02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f04:	0018      	movs	r0, r3
 8008f06:	f7fd ff9d 	bl	8006e44 <HAL_RCCEx_GetPeriphCLKFreq>
 8008f0a:	0003      	movs	r3, r0
 8008f0c:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (pclk != 0U)
 8008f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d041      	beq.n	8008f98 <UART_SetConfig+0x374>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008f18:	4b1b      	ldr	r3, [pc, #108]	@ (8008f88 <UART_SetConfig+0x364>)
 8008f1a:	0052      	lsls	r2, r2, #1
 8008f1c:	5ad3      	ldrh	r3, [r2, r3]
 8008f1e:	0019      	movs	r1, r3
 8008f20:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008f22:	f7f7 f8f1 	bl	8000108 <__udivsi3>
 8008f26:	0003      	movs	r3, r0
 8008f28:	001a      	movs	r2, r3
 8008f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	085b      	lsrs	r3, r3, #1
 8008f30:	18d2      	adds	r2, r2, r3
 8008f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	0019      	movs	r1, r3
 8008f38:	0010      	movs	r0, r2
 8008f3a:	f7f7 f8e5 	bl	8000108 <__udivsi3>
 8008f3e:	0003      	movs	r3, r0
 8008f40:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f44:	2b0f      	cmp	r3, #15
 8008f46:	d921      	bls.n	8008f8c <UART_SetConfig+0x368>
 8008f48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008f4a:	2380      	movs	r3, #128	@ 0x80
 8008f4c:	025b      	lsls	r3, r3, #9
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d21c      	bcs.n	8008f8c <UART_SetConfig+0x368>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f54:	b29a      	uxth	r2, r3
 8008f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	60da      	str	r2, [r3, #12]
 8008f5c:	e01c      	b.n	8008f98 <UART_SetConfig+0x374>
 8008f5e:	46c0      	nop			@ (mov r8, r8)
 8008f60:	40008000 	.word	0x40008000
 8008f64:	cfff69f3 	.word	0xcfff69f3
 8008f68:	ffffcfff 	.word	0xffffcfff
 8008f6c:	40008400 	.word	0x40008400
 8008f70:	40008c00 	.word	0x40008c00
 8008f74:	11fff4ff 	.word	0x11fff4ff
 8008f78:	40013800 	.word	0x40013800
 8008f7c:	40004400 	.word	0x40004400
 8008f80:	40004800 	.word	0x40004800
 8008f84:	40004c00 	.word	0x40004c00
 8008f88:	08009af4 	.word	0x08009af4
      }
      else
      {
        ret = HAL_ERROR;
 8008f8c:	231f      	movs	r3, #31
 8008f8e:	2220      	movs	r2, #32
 8008f90:	189b      	adds	r3, r3, r2
 8008f92:	19db      	adds	r3, r3, r7
 8008f94:	2201      	movs	r2, #1
 8008f96:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f9a:	226a      	movs	r2, #106	@ 0x6a
 8008f9c:	2101      	movs	r1, #1
 8008f9e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8008fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa2:	2268      	movs	r2, #104	@ 0x68
 8008fa4:	2101      	movs	r1, #1
 8008fa6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008faa:	2200      	movs	r2, #0
 8008fac:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008fb4:	231f      	movs	r3, #31
 8008fb6:	2220      	movs	r2, #32
 8008fb8:	189b      	adds	r3, r3, r2
 8008fba:	19db      	adds	r3, r3, r7
 8008fbc:	781b      	ldrb	r3, [r3, #0]
}
 8008fbe:	0018      	movs	r0, r3
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	b012      	add	sp, #72	@ 0x48
 8008fc4:	bdb0      	pop	{r4, r5, r7, pc}
 8008fc6:	46c0      	nop			@ (mov r8, r8)

08008fc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fd4:	2208      	movs	r2, #8
 8008fd6:	4013      	ands	r3, r2
 8008fd8:	d00b      	beq.n	8008ff2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	4a4a      	ldr	r2, [pc, #296]	@ (800910c <UART_AdvFeatureConfig+0x144>)
 8008fe2:	4013      	ands	r3, r2
 8008fe4:	0019      	movs	r1, r3
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	430a      	orrs	r2, r1
 8008ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	4013      	ands	r3, r2
 8008ffa:	d00b      	beq.n	8009014 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	4a43      	ldr	r2, [pc, #268]	@ (8009110 <UART_AdvFeatureConfig+0x148>)
 8009004:	4013      	ands	r3, r2
 8009006:	0019      	movs	r1, r3
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	430a      	orrs	r2, r1
 8009012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009018:	2202      	movs	r2, #2
 800901a:	4013      	ands	r3, r2
 800901c:	d00b      	beq.n	8009036 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	4a3b      	ldr	r2, [pc, #236]	@ (8009114 <UART_AdvFeatureConfig+0x14c>)
 8009026:	4013      	ands	r3, r2
 8009028:	0019      	movs	r1, r3
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	430a      	orrs	r2, r1
 8009034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800903a:	2204      	movs	r2, #4
 800903c:	4013      	ands	r3, r2
 800903e:	d00b      	beq.n	8009058 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	4a34      	ldr	r2, [pc, #208]	@ (8009118 <UART_AdvFeatureConfig+0x150>)
 8009048:	4013      	ands	r3, r2
 800904a:	0019      	movs	r1, r3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	430a      	orrs	r2, r1
 8009056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800905c:	2210      	movs	r2, #16
 800905e:	4013      	ands	r3, r2
 8009060:	d00b      	beq.n	800907a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	4a2c      	ldr	r2, [pc, #176]	@ (800911c <UART_AdvFeatureConfig+0x154>)
 800906a:	4013      	ands	r3, r2
 800906c:	0019      	movs	r1, r3
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	430a      	orrs	r2, r1
 8009078:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800907e:	2220      	movs	r2, #32
 8009080:	4013      	ands	r3, r2
 8009082:	d00b      	beq.n	800909c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	4a25      	ldr	r2, [pc, #148]	@ (8009120 <UART_AdvFeatureConfig+0x158>)
 800908c:	4013      	ands	r3, r2
 800908e:	0019      	movs	r1, r3
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	430a      	orrs	r2, r1
 800909a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090a0:	2240      	movs	r2, #64	@ 0x40
 80090a2:	4013      	ands	r3, r2
 80090a4:	d01d      	beq.n	80090e2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	4a1d      	ldr	r2, [pc, #116]	@ (8009124 <UART_AdvFeatureConfig+0x15c>)
 80090ae:	4013      	ands	r3, r2
 80090b0:	0019      	movs	r1, r3
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	430a      	orrs	r2, r1
 80090bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090c2:	2380      	movs	r3, #128	@ 0x80
 80090c4:	035b      	lsls	r3, r3, #13
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d10b      	bne.n	80090e2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	4a15      	ldr	r2, [pc, #84]	@ (8009128 <UART_AdvFeatureConfig+0x160>)
 80090d2:	4013      	ands	r3, r2
 80090d4:	0019      	movs	r1, r3
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	430a      	orrs	r2, r1
 80090e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090e6:	2280      	movs	r2, #128	@ 0x80
 80090e8:	4013      	ands	r3, r2
 80090ea:	d00b      	beq.n	8009104 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	4a0e      	ldr	r2, [pc, #56]	@ (800912c <UART_AdvFeatureConfig+0x164>)
 80090f4:	4013      	ands	r3, r2
 80090f6:	0019      	movs	r1, r3
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	430a      	orrs	r2, r1
 8009102:	605a      	str	r2, [r3, #4]
  }
}
 8009104:	46c0      	nop			@ (mov r8, r8)
 8009106:	46bd      	mov	sp, r7
 8009108:	b002      	add	sp, #8
 800910a:	bd80      	pop	{r7, pc}
 800910c:	ffff7fff 	.word	0xffff7fff
 8009110:	fffdffff 	.word	0xfffdffff
 8009114:	fffeffff 	.word	0xfffeffff
 8009118:	fffbffff 	.word	0xfffbffff
 800911c:	ffffefff 	.word	0xffffefff
 8009120:	ffffdfff 	.word	0xffffdfff
 8009124:	ffefffff 	.word	0xffefffff
 8009128:	ff9fffff 	.word	0xff9fffff
 800912c:	fff7ffff 	.word	0xfff7ffff

08009130 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b092      	sub	sp, #72	@ 0x48
 8009134:	af02      	add	r7, sp, #8
 8009136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2290      	movs	r2, #144	@ 0x90
 800913c:	2100      	movs	r1, #0
 800913e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009140:	f7fb fdd0 	bl	8004ce4 <HAL_GetTick>
 8009144:	0003      	movs	r3, r0
 8009146:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	2208      	movs	r2, #8
 8009150:	4013      	ands	r3, r2
 8009152:	2b08      	cmp	r3, #8
 8009154:	d12d      	bne.n	80091b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009158:	2280      	movs	r2, #128	@ 0x80
 800915a:	0391      	lsls	r1, r2, #14
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	4a47      	ldr	r2, [pc, #284]	@ (800927c <UART_CheckIdleState+0x14c>)
 8009160:	9200      	str	r2, [sp, #0]
 8009162:	2200      	movs	r2, #0
 8009164:	f000 f88e 	bl	8009284 <UART_WaitOnFlagUntilTimeout>
 8009168:	1e03      	subs	r3, r0, #0
 800916a:	d022      	beq.n	80091b2 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800916c:	f3ef 8310 	mrs	r3, PRIMASK
 8009170:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009174:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009176:	2301      	movs	r3, #1
 8009178:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800917a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800917c:	f383 8810 	msr	PRIMASK, r3
}
 8009180:	46c0      	nop			@ (mov r8, r8)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2180      	movs	r1, #128	@ 0x80
 800918e:	438a      	bics	r2, r1
 8009190:	601a      	str	r2, [r3, #0]
 8009192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009194:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009198:	f383 8810 	msr	PRIMASK, r3
}
 800919c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2288      	movs	r2, #136	@ 0x88
 80091a2:	2120      	movs	r1, #32
 80091a4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2284      	movs	r2, #132	@ 0x84
 80091aa:	2100      	movs	r1, #0
 80091ac:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091ae:	2303      	movs	r3, #3
 80091b0:	e060      	b.n	8009274 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	2204      	movs	r2, #4
 80091ba:	4013      	ands	r3, r2
 80091bc:	2b04      	cmp	r3, #4
 80091be:	d146      	bne.n	800924e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091c2:	2280      	movs	r2, #128	@ 0x80
 80091c4:	03d1      	lsls	r1, r2, #15
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	4a2c      	ldr	r2, [pc, #176]	@ (800927c <UART_CheckIdleState+0x14c>)
 80091ca:	9200      	str	r2, [sp, #0]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f000 f859 	bl	8009284 <UART_WaitOnFlagUntilTimeout>
 80091d2:	1e03      	subs	r3, r0, #0
 80091d4:	d03b      	beq.n	800924e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80091d6:	f3ef 8310 	mrs	r3, PRIMASK
 80091da:	60fb      	str	r3, [r7, #12]
  return(result);
 80091dc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091de:	637b      	str	r3, [r7, #52]	@ 0x34
 80091e0:	2301      	movs	r3, #1
 80091e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	f383 8810 	msr	PRIMASK, r3
}
 80091ea:	46c0      	nop			@ (mov r8, r8)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4922      	ldr	r1, [pc, #136]	@ (8009280 <UART_CheckIdleState+0x150>)
 80091f8:	400a      	ands	r2, r1
 80091fa:	601a      	str	r2, [r3, #0]
 80091fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	f383 8810 	msr	PRIMASK, r3
}
 8009206:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009208:	f3ef 8310 	mrs	r3, PRIMASK
 800920c:	61bb      	str	r3, [r7, #24]
  return(result);
 800920e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009210:	633b      	str	r3, [r7, #48]	@ 0x30
 8009212:	2301      	movs	r3, #1
 8009214:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009216:	69fb      	ldr	r3, [r7, #28]
 8009218:	f383 8810 	msr	PRIMASK, r3
}
 800921c:	46c0      	nop			@ (mov r8, r8)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	689a      	ldr	r2, [r3, #8]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2101      	movs	r1, #1
 800922a:	438a      	bics	r2, r1
 800922c:	609a      	str	r2, [r3, #8]
 800922e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009230:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009232:	6a3b      	ldr	r3, [r7, #32]
 8009234:	f383 8810 	msr	PRIMASK, r3
}
 8009238:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	228c      	movs	r2, #140	@ 0x8c
 800923e:	2120      	movs	r1, #32
 8009240:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2284      	movs	r2, #132	@ 0x84
 8009246:	2100      	movs	r1, #0
 8009248:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800924a:	2303      	movs	r3, #3
 800924c:	e012      	b.n	8009274 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2288      	movs	r2, #136	@ 0x88
 8009252:	2120      	movs	r1, #32
 8009254:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	228c      	movs	r2, #140	@ 0x8c
 800925a:	2120      	movs	r1, #32
 800925c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2200      	movs	r2, #0
 8009262:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2200      	movs	r2, #0
 8009268:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2284      	movs	r2, #132	@ 0x84
 800926e:	2100      	movs	r1, #0
 8009270:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009272:	2300      	movs	r3, #0
}
 8009274:	0018      	movs	r0, r3
 8009276:	46bd      	mov	sp, r7
 8009278:	b010      	add	sp, #64	@ 0x40
 800927a:	bd80      	pop	{r7, pc}
 800927c:	01ffffff 	.word	0x01ffffff
 8009280:	fffffedf 	.word	0xfffffedf

08009284 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	603b      	str	r3, [r7, #0]
 8009290:	1dfb      	adds	r3, r7, #7
 8009292:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009294:	e051      	b.n	800933a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	3301      	adds	r3, #1
 800929a:	d04e      	beq.n	800933a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800929c:	f7fb fd22 	bl	8004ce4 <HAL_GetTick>
 80092a0:	0002      	movs	r2, r0
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	1ad3      	subs	r3, r2, r3
 80092a6:	69ba      	ldr	r2, [r7, #24]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d302      	bcc.n	80092b2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80092ac:	69bb      	ldr	r3, [r7, #24]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d101      	bne.n	80092b6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80092b2:	2303      	movs	r3, #3
 80092b4:	e051      	b.n	800935a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2204      	movs	r2, #4
 80092be:	4013      	ands	r3, r2
 80092c0:	d03b      	beq.n	800933a <UART_WaitOnFlagUntilTimeout+0xb6>
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	2b80      	cmp	r3, #128	@ 0x80
 80092c6:	d038      	beq.n	800933a <UART_WaitOnFlagUntilTimeout+0xb6>
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	2b40      	cmp	r3, #64	@ 0x40
 80092cc:	d035      	beq.n	800933a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	69db      	ldr	r3, [r3, #28]
 80092d4:	2208      	movs	r2, #8
 80092d6:	4013      	ands	r3, r2
 80092d8:	2b08      	cmp	r3, #8
 80092da:	d111      	bne.n	8009300 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2208      	movs	r2, #8
 80092e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	0018      	movs	r0, r3
 80092e8:	f000 f83c 	bl	8009364 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2290      	movs	r2, #144	@ 0x90
 80092f0:	2108      	movs	r1, #8
 80092f2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2284      	movs	r2, #132	@ 0x84
 80092f8:	2100      	movs	r1, #0
 80092fa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80092fc:	2301      	movs	r3, #1
 80092fe:	e02c      	b.n	800935a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	69da      	ldr	r2, [r3, #28]
 8009306:	2380      	movs	r3, #128	@ 0x80
 8009308:	011b      	lsls	r3, r3, #4
 800930a:	401a      	ands	r2, r3
 800930c:	2380      	movs	r3, #128	@ 0x80
 800930e:	011b      	lsls	r3, r3, #4
 8009310:	429a      	cmp	r2, r3
 8009312:	d112      	bne.n	800933a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2280      	movs	r2, #128	@ 0x80
 800931a:	0112      	lsls	r2, r2, #4
 800931c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	0018      	movs	r0, r3
 8009322:	f000 f81f 	bl	8009364 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2290      	movs	r2, #144	@ 0x90
 800932a:	2120      	movs	r1, #32
 800932c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2284      	movs	r2, #132	@ 0x84
 8009332:	2100      	movs	r1, #0
 8009334:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009336:	2303      	movs	r3, #3
 8009338:	e00f      	b.n	800935a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	69db      	ldr	r3, [r3, #28]
 8009340:	68ba      	ldr	r2, [r7, #8]
 8009342:	4013      	ands	r3, r2
 8009344:	68ba      	ldr	r2, [r7, #8]
 8009346:	1ad3      	subs	r3, r2, r3
 8009348:	425a      	negs	r2, r3
 800934a:	4153      	adcs	r3, r2
 800934c:	b2db      	uxtb	r3, r3
 800934e:	001a      	movs	r2, r3
 8009350:	1dfb      	adds	r3, r7, #7
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	429a      	cmp	r2, r3
 8009356:	d09e      	beq.n	8009296 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009358:	2300      	movs	r3, #0
}
 800935a:	0018      	movs	r0, r3
 800935c:	46bd      	mov	sp, r7
 800935e:	b004      	add	sp, #16
 8009360:	bd80      	pop	{r7, pc}
	...

08009364 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b08e      	sub	sp, #56	@ 0x38
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800936c:	f3ef 8310 	mrs	r3, PRIMASK
 8009370:	617b      	str	r3, [r7, #20]
  return(result);
 8009372:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009374:	637b      	str	r3, [r7, #52]	@ 0x34
 8009376:	2301      	movs	r3, #1
 8009378:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800937a:	69bb      	ldr	r3, [r7, #24]
 800937c:	f383 8810 	msr	PRIMASK, r3
}
 8009380:	46c0      	nop			@ (mov r8, r8)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4926      	ldr	r1, [pc, #152]	@ (8009428 <UART_EndRxTransfer+0xc4>)
 800938e:	400a      	ands	r2, r1
 8009390:	601a      	str	r2, [r3, #0]
 8009392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009394:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009396:	69fb      	ldr	r3, [r7, #28]
 8009398:	f383 8810 	msr	PRIMASK, r3
}
 800939c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800939e:	f3ef 8310 	mrs	r3, PRIMASK
 80093a2:	623b      	str	r3, [r7, #32]
  return(result);
 80093a4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80093a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80093a8:	2301      	movs	r3, #1
 80093aa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ae:	f383 8810 	msr	PRIMASK, r3
}
 80093b2:	46c0      	nop			@ (mov r8, r8)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	689a      	ldr	r2, [r3, #8]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	491b      	ldr	r1, [pc, #108]	@ (800942c <UART_EndRxTransfer+0xc8>)
 80093c0:	400a      	ands	r2, r1
 80093c2:	609a      	str	r2, [r3, #8]
 80093c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ca:	f383 8810 	msr	PRIMASK, r3
}
 80093ce:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d118      	bne.n	800940a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80093d8:	f3ef 8310 	mrs	r3, PRIMASK
 80093dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80093de:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80093e2:	2301      	movs	r3, #1
 80093e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f383 8810 	msr	PRIMASK, r3
}
 80093ec:	46c0      	nop			@ (mov r8, r8)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2110      	movs	r1, #16
 80093fa:	438a      	bics	r2, r1
 80093fc:	601a      	str	r2, [r3, #0]
 80093fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009400:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	f383 8810 	msr	PRIMASK, r3
}
 8009408:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	228c      	movs	r2, #140	@ 0x8c
 800940e:	2120      	movs	r1, #32
 8009410:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800941e:	46c0      	nop			@ (mov r8, r8)
 8009420:	46bd      	mov	sp, r7
 8009422:	b00e      	add	sp, #56	@ 0x38
 8009424:	bd80      	pop	{r7, pc}
 8009426:	46c0      	nop			@ (mov r8, r8)
 8009428:	fffffedf 	.word	0xfffffedf
 800942c:	effffffe 	.word	0xeffffffe

08009430 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2284      	movs	r2, #132	@ 0x84
 800943c:	5c9b      	ldrb	r3, [r3, r2]
 800943e:	2b01      	cmp	r3, #1
 8009440:	d101      	bne.n	8009446 <HAL_UARTEx_DisableFifoMode+0x16>
 8009442:	2302      	movs	r3, #2
 8009444:	e027      	b.n	8009496 <HAL_UARTEx_DisableFifoMode+0x66>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2284      	movs	r2, #132	@ 0x84
 800944a:	2101      	movs	r1, #1
 800944c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2288      	movs	r2, #136	@ 0x88
 8009452:	2124      	movs	r1, #36	@ 0x24
 8009454:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2101      	movs	r1, #1
 800946a:	438a      	bics	r2, r1
 800946c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	4a0b      	ldr	r2, [pc, #44]	@ (80094a0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8009472:	4013      	ands	r3, r2
 8009474:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	68fa      	ldr	r2, [r7, #12]
 8009482:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2288      	movs	r2, #136	@ 0x88
 8009488:	2120      	movs	r1, #32
 800948a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2284      	movs	r2, #132	@ 0x84
 8009490:	2100      	movs	r1, #0
 8009492:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009494:	2300      	movs	r3, #0
}
 8009496:	0018      	movs	r0, r3
 8009498:	46bd      	mov	sp, r7
 800949a:	b004      	add	sp, #16
 800949c:	bd80      	pop	{r7, pc}
 800949e:	46c0      	nop			@ (mov r8, r8)
 80094a0:	dfffffff 	.word	0xdfffffff

080094a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2284      	movs	r2, #132	@ 0x84
 80094b2:	5c9b      	ldrb	r3, [r3, r2]
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d101      	bne.n	80094bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80094b8:	2302      	movs	r3, #2
 80094ba:	e02e      	b.n	800951a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2284      	movs	r2, #132	@ 0x84
 80094c0:	2101      	movs	r1, #1
 80094c2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2288      	movs	r2, #136	@ 0x88
 80094c8:	2124      	movs	r1, #36	@ 0x24
 80094ca:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2101      	movs	r1, #1
 80094e0:	438a      	bics	r2, r1
 80094e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	00db      	lsls	r3, r3, #3
 80094ec:	08d9      	lsrs	r1, r3, #3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	683a      	ldr	r2, [r7, #0]
 80094f4:	430a      	orrs	r2, r1
 80094f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	0018      	movs	r0, r3
 80094fc:	f000 f854 	bl	80095a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	68fa      	ldr	r2, [r7, #12]
 8009506:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2288      	movs	r2, #136	@ 0x88
 800950c:	2120      	movs	r1, #32
 800950e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2284      	movs	r2, #132	@ 0x84
 8009514:	2100      	movs	r1, #0
 8009516:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009518:	2300      	movs	r3, #0
}
 800951a:	0018      	movs	r0, r3
 800951c:	46bd      	mov	sp, r7
 800951e:	b004      	add	sp, #16
 8009520:	bd80      	pop	{r7, pc}
	...

08009524 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2284      	movs	r2, #132	@ 0x84
 8009532:	5c9b      	ldrb	r3, [r3, r2]
 8009534:	2b01      	cmp	r3, #1
 8009536:	d101      	bne.n	800953c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009538:	2302      	movs	r3, #2
 800953a:	e02f      	b.n	800959c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2284      	movs	r2, #132	@ 0x84
 8009540:	2101      	movs	r1, #1
 8009542:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2288      	movs	r2, #136	@ 0x88
 8009548:	2124      	movs	r1, #36	@ 0x24
 800954a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2101      	movs	r1, #1
 8009560:	438a      	bics	r2, r1
 8009562:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	689b      	ldr	r3, [r3, #8]
 800956a:	4a0e      	ldr	r2, [pc, #56]	@ (80095a4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800956c:	4013      	ands	r3, r2
 800956e:	0019      	movs	r1, r3
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	683a      	ldr	r2, [r7, #0]
 8009576:	430a      	orrs	r2, r1
 8009578:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	0018      	movs	r0, r3
 800957e:	f000 f813 	bl	80095a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	68fa      	ldr	r2, [r7, #12]
 8009588:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2288      	movs	r2, #136	@ 0x88
 800958e:	2120      	movs	r1, #32
 8009590:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2284      	movs	r2, #132	@ 0x84
 8009596:	2100      	movs	r1, #0
 8009598:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800959a:	2300      	movs	r3, #0
}
 800959c:	0018      	movs	r0, r3
 800959e:	46bd      	mov	sp, r7
 80095a0:	b004      	add	sp, #16
 80095a2:	bd80      	pop	{r7, pc}
 80095a4:	f1ffffff 	.word	0xf1ffffff

080095a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80095a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d108      	bne.n	80095ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	226a      	movs	r2, #106	@ 0x6a
 80095bc:	2101      	movs	r1, #1
 80095be:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2268      	movs	r2, #104	@ 0x68
 80095c4:	2101      	movs	r1, #1
 80095c6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80095c8:	e043      	b.n	8009652 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80095ca:	260f      	movs	r6, #15
 80095cc:	19bb      	adds	r3, r7, r6
 80095ce:	2208      	movs	r2, #8
 80095d0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80095d2:	200e      	movs	r0, #14
 80095d4:	183b      	adds	r3, r7, r0
 80095d6:	2208      	movs	r2, #8
 80095d8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	689b      	ldr	r3, [r3, #8]
 80095e0:	0e5b      	lsrs	r3, r3, #25
 80095e2:	b2da      	uxtb	r2, r3
 80095e4:	240d      	movs	r4, #13
 80095e6:	193b      	adds	r3, r7, r4
 80095e8:	2107      	movs	r1, #7
 80095ea:	400a      	ands	r2, r1
 80095ec:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	0f5b      	lsrs	r3, r3, #29
 80095f6:	b2da      	uxtb	r2, r3
 80095f8:	250c      	movs	r5, #12
 80095fa:	197b      	adds	r3, r7, r5
 80095fc:	2107      	movs	r1, #7
 80095fe:	400a      	ands	r2, r1
 8009600:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009602:	183b      	adds	r3, r7, r0
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	197a      	adds	r2, r7, r5
 8009608:	7812      	ldrb	r2, [r2, #0]
 800960a:	4914      	ldr	r1, [pc, #80]	@ (800965c <UARTEx_SetNbDataToProcess+0xb4>)
 800960c:	5c8a      	ldrb	r2, [r1, r2]
 800960e:	435a      	muls	r2, r3
 8009610:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8009612:	197b      	adds	r3, r7, r5
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	4a12      	ldr	r2, [pc, #72]	@ (8009660 <UARTEx_SetNbDataToProcess+0xb8>)
 8009618:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800961a:	0019      	movs	r1, r3
 800961c:	f7f6 fdfe 	bl	800021c <__divsi3>
 8009620:	0003      	movs	r3, r0
 8009622:	b299      	uxth	r1, r3
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	226a      	movs	r2, #106	@ 0x6a
 8009628:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800962a:	19bb      	adds	r3, r7, r6
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	193a      	adds	r2, r7, r4
 8009630:	7812      	ldrb	r2, [r2, #0]
 8009632:	490a      	ldr	r1, [pc, #40]	@ (800965c <UARTEx_SetNbDataToProcess+0xb4>)
 8009634:	5c8a      	ldrb	r2, [r1, r2]
 8009636:	435a      	muls	r2, r3
 8009638:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800963a:	193b      	adds	r3, r7, r4
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	4a08      	ldr	r2, [pc, #32]	@ (8009660 <UARTEx_SetNbDataToProcess+0xb8>)
 8009640:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009642:	0019      	movs	r1, r3
 8009644:	f7f6 fdea 	bl	800021c <__divsi3>
 8009648:	0003      	movs	r3, r0
 800964a:	b299      	uxth	r1, r3
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2268      	movs	r2, #104	@ 0x68
 8009650:	5299      	strh	r1, [r3, r2]
}
 8009652:	46c0      	nop			@ (mov r8, r8)
 8009654:	46bd      	mov	sp, r7
 8009656:	b005      	add	sp, #20
 8009658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800965a:	46c0      	nop			@ (mov r8, r8)
 800965c:	08009b0c 	.word	0x08009b0c
 8009660:	08009b14 	.word	0x08009b14

08009664 <memset>:
 8009664:	0003      	movs	r3, r0
 8009666:	1882      	adds	r2, r0, r2
 8009668:	4293      	cmp	r3, r2
 800966a:	d100      	bne.n	800966e <memset+0xa>
 800966c:	4770      	bx	lr
 800966e:	7019      	strb	r1, [r3, #0]
 8009670:	3301      	adds	r3, #1
 8009672:	e7f9      	b.n	8009668 <memset+0x4>

08009674 <__libc_init_array>:
 8009674:	b570      	push	{r4, r5, r6, lr}
 8009676:	2600      	movs	r6, #0
 8009678:	4c0c      	ldr	r4, [pc, #48]	@ (80096ac <__libc_init_array+0x38>)
 800967a:	4d0d      	ldr	r5, [pc, #52]	@ (80096b0 <__libc_init_array+0x3c>)
 800967c:	1b64      	subs	r4, r4, r5
 800967e:	10a4      	asrs	r4, r4, #2
 8009680:	42a6      	cmp	r6, r4
 8009682:	d109      	bne.n	8009698 <__libc_init_array+0x24>
 8009684:	2600      	movs	r6, #0
 8009686:	f000 f819 	bl	80096bc <_init>
 800968a:	4c0a      	ldr	r4, [pc, #40]	@ (80096b4 <__libc_init_array+0x40>)
 800968c:	4d0a      	ldr	r5, [pc, #40]	@ (80096b8 <__libc_init_array+0x44>)
 800968e:	1b64      	subs	r4, r4, r5
 8009690:	10a4      	asrs	r4, r4, #2
 8009692:	42a6      	cmp	r6, r4
 8009694:	d105      	bne.n	80096a2 <__libc_init_array+0x2e>
 8009696:	bd70      	pop	{r4, r5, r6, pc}
 8009698:	00b3      	lsls	r3, r6, #2
 800969a:	58eb      	ldr	r3, [r5, r3]
 800969c:	4798      	blx	r3
 800969e:	3601      	adds	r6, #1
 80096a0:	e7ee      	b.n	8009680 <__libc_init_array+0xc>
 80096a2:	00b3      	lsls	r3, r6, #2
 80096a4:	58eb      	ldr	r3, [r5, r3]
 80096a6:	4798      	blx	r3
 80096a8:	3601      	adds	r6, #1
 80096aa:	e7f2      	b.n	8009692 <__libc_init_array+0x1e>
 80096ac:	08009b24 	.word	0x08009b24
 80096b0:	08009b24 	.word	0x08009b24
 80096b4:	08009b28 	.word	0x08009b28
 80096b8:	08009b24 	.word	0x08009b24

080096bc <_init>:
 80096bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096be:	46c0      	nop			@ (mov r8, r8)
 80096c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096c2:	bc08      	pop	{r3}
 80096c4:	469e      	mov	lr, r3
 80096c6:	4770      	bx	lr

080096c8 <_fini>:
 80096c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ca:	46c0      	nop			@ (mov r8, r8)
 80096cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ce:	bc08      	pop	{r3}
 80096d0:	469e      	mov	lr, r3
 80096d2:	4770      	bx	lr
