
e-paper_18x5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd4c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000950  0800be10  0800be10  0000ce10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c760  0800c760  0000e1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c760  0800c760  0000d760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c768  0800c768  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c768  0800c768  0000d768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c76c  0800c76c  0000d76c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800c770  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  200001d8  0800c948  0000e1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  0800c948  0000e530  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000195a9  00000000  00000000  0000e200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d97  00000000  00000000  000277a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f8  00000000  00000000  0002b540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011d9  00000000  00000000  0002cc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000212b2  00000000  00000000  0002de11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e28e  00000000  00000000  0004f0c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c558b  00000000  00000000  0006d351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001328dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062dc  00000000  00000000  00132920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00138bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d8 	.word	0x200001d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800bdf4 	.word	0x0800bdf4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001dc 	.word	0x200001dc
 8000104:	0800bdf4 	.word	0x0800bdf4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f891 	bl	8001564 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ffd1 	bl	80013f4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f883 	bl	8001564 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f879 	bl	8001564 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fffb 	bl	800147c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fff1 	bl	800147c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__clzsi2>:
 80004a8:	211c      	movs	r1, #28
 80004aa:	2301      	movs	r3, #1
 80004ac:	041b      	lsls	r3, r3, #16
 80004ae:	4298      	cmp	r0, r3
 80004b0:	d301      	bcc.n	80004b6 <__clzsi2+0xe>
 80004b2:	0c00      	lsrs	r0, r0, #16
 80004b4:	3910      	subs	r1, #16
 80004b6:	0a1b      	lsrs	r3, r3, #8
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d301      	bcc.n	80004c0 <__clzsi2+0x18>
 80004bc:	0a00      	lsrs	r0, r0, #8
 80004be:	3908      	subs	r1, #8
 80004c0:	091b      	lsrs	r3, r3, #4
 80004c2:	4298      	cmp	r0, r3
 80004c4:	d301      	bcc.n	80004ca <__clzsi2+0x22>
 80004c6:	0900      	lsrs	r0, r0, #4
 80004c8:	3904      	subs	r1, #4
 80004ca:	a202      	add	r2, pc, #8	@ (adr r2, 80004d4 <__clzsi2+0x2c>)
 80004cc:	5c10      	ldrb	r0, [r2, r0]
 80004ce:	1840      	adds	r0, r0, r1
 80004d0:	4770      	bx	lr
 80004d2:	46c0      	nop			@ (mov r8, r8)
 80004d4:	02020304 	.word	0x02020304
 80004d8:	01010101 	.word	0x01010101
	...

080004e4 <__aeabi_uldivmod>:
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d111      	bne.n	800050c <__aeabi_uldivmod+0x28>
 80004e8:	2a00      	cmp	r2, #0
 80004ea:	d10f      	bne.n	800050c <__aeabi_uldivmod+0x28>
 80004ec:	2900      	cmp	r1, #0
 80004ee:	d100      	bne.n	80004f2 <__aeabi_uldivmod+0xe>
 80004f0:	2800      	cmp	r0, #0
 80004f2:	d002      	beq.n	80004fa <__aeabi_uldivmod+0x16>
 80004f4:	2100      	movs	r1, #0
 80004f6:	43c9      	mvns	r1, r1
 80004f8:	0008      	movs	r0, r1
 80004fa:	b407      	push	{r0, r1, r2}
 80004fc:	4802      	ldr	r0, [pc, #8]	@ (8000508 <__aeabi_uldivmod+0x24>)
 80004fe:	a102      	add	r1, pc, #8	@ (adr r1, 8000508 <__aeabi_uldivmod+0x24>)
 8000500:	1840      	adds	r0, r0, r1
 8000502:	9002      	str	r0, [sp, #8]
 8000504:	bd03      	pop	{r0, r1, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)
 8000508:	ffffff21 	.word	0xffffff21
 800050c:	b403      	push	{r0, r1}
 800050e:	4668      	mov	r0, sp
 8000510:	b501      	push	{r0, lr}
 8000512:	9802      	ldr	r0, [sp, #8]
 8000514:	f000 f824 	bl	8000560 <__udivmoddi4>
 8000518:	9b01      	ldr	r3, [sp, #4]
 800051a:	469e      	mov	lr, r3
 800051c:	b002      	add	sp, #8
 800051e:	bc0c      	pop	{r2, r3}
 8000520:	4770      	bx	lr
 8000522:	46c0      	nop			@ (mov r8, r8)

08000524 <__aeabi_d2uiz>:
 8000524:	b570      	push	{r4, r5, r6, lr}
 8000526:	2200      	movs	r2, #0
 8000528:	4b0c      	ldr	r3, [pc, #48]	@ (800055c <__aeabi_d2uiz+0x38>)
 800052a:	0004      	movs	r4, r0
 800052c:	000d      	movs	r5, r1
 800052e:	f7ff ffb1 	bl	8000494 <__aeabi_dcmpge>
 8000532:	2800      	cmp	r0, #0
 8000534:	d104      	bne.n	8000540 <__aeabi_d2uiz+0x1c>
 8000536:	0020      	movs	r0, r4
 8000538:	0029      	movs	r1, r5
 800053a:	f001 ff0b 	bl	8002354 <__aeabi_d2iz>
 800053e:	bd70      	pop	{r4, r5, r6, pc}
 8000540:	4b06      	ldr	r3, [pc, #24]	@ (800055c <__aeabi_d2uiz+0x38>)
 8000542:	2200      	movs	r2, #0
 8000544:	0020      	movs	r0, r4
 8000546:	0029      	movs	r1, r5
 8000548:	f001 fb46 	bl	8001bd8 <__aeabi_dsub>
 800054c:	f001 ff02 	bl	8002354 <__aeabi_d2iz>
 8000550:	2380      	movs	r3, #128	@ 0x80
 8000552:	061b      	lsls	r3, r3, #24
 8000554:	469c      	mov	ip, r3
 8000556:	4460      	add	r0, ip
 8000558:	e7f1      	b.n	800053e <__aeabi_d2uiz+0x1a>
 800055a:	46c0      	nop			@ (mov r8, r8)
 800055c:	41e00000 	.word	0x41e00000

08000560 <__udivmoddi4>:
 8000560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000562:	4657      	mov	r7, sl
 8000564:	464e      	mov	r6, r9
 8000566:	4645      	mov	r5, r8
 8000568:	46de      	mov	lr, fp
 800056a:	b5e0      	push	{r5, r6, r7, lr}
 800056c:	0004      	movs	r4, r0
 800056e:	000d      	movs	r5, r1
 8000570:	4692      	mov	sl, r2
 8000572:	4699      	mov	r9, r3
 8000574:	b083      	sub	sp, #12
 8000576:	428b      	cmp	r3, r1
 8000578:	d830      	bhi.n	80005dc <__udivmoddi4+0x7c>
 800057a:	d02d      	beq.n	80005d8 <__udivmoddi4+0x78>
 800057c:	4649      	mov	r1, r9
 800057e:	4650      	mov	r0, sl
 8000580:	f001 ff76 	bl	8002470 <__clzdi2>
 8000584:	0029      	movs	r1, r5
 8000586:	0006      	movs	r6, r0
 8000588:	0020      	movs	r0, r4
 800058a:	f001 ff71 	bl	8002470 <__clzdi2>
 800058e:	1a33      	subs	r3, r6, r0
 8000590:	4698      	mov	r8, r3
 8000592:	3b20      	subs	r3, #32
 8000594:	d434      	bmi.n	8000600 <__udivmoddi4+0xa0>
 8000596:	469b      	mov	fp, r3
 8000598:	4653      	mov	r3, sl
 800059a:	465a      	mov	r2, fp
 800059c:	4093      	lsls	r3, r2
 800059e:	4642      	mov	r2, r8
 80005a0:	001f      	movs	r7, r3
 80005a2:	4653      	mov	r3, sl
 80005a4:	4093      	lsls	r3, r2
 80005a6:	001e      	movs	r6, r3
 80005a8:	42af      	cmp	r7, r5
 80005aa:	d83b      	bhi.n	8000624 <__udivmoddi4+0xc4>
 80005ac:	42af      	cmp	r7, r5
 80005ae:	d100      	bne.n	80005b2 <__udivmoddi4+0x52>
 80005b0:	e079      	b.n	80006a6 <__udivmoddi4+0x146>
 80005b2:	465b      	mov	r3, fp
 80005b4:	1ba4      	subs	r4, r4, r6
 80005b6:	41bd      	sbcs	r5, r7
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	da00      	bge.n	80005be <__udivmoddi4+0x5e>
 80005bc:	e076      	b.n	80006ac <__udivmoddi4+0x14c>
 80005be:	2200      	movs	r2, #0
 80005c0:	2300      	movs	r3, #0
 80005c2:	9200      	str	r2, [sp, #0]
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2301      	movs	r3, #1
 80005c8:	465a      	mov	r2, fp
 80005ca:	4093      	lsls	r3, r2
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2301      	movs	r3, #1
 80005d0:	4642      	mov	r2, r8
 80005d2:	4093      	lsls	r3, r2
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	e029      	b.n	800062c <__udivmoddi4+0xcc>
 80005d8:	4282      	cmp	r2, r0
 80005da:	d9cf      	bls.n	800057c <__udivmoddi4+0x1c>
 80005dc:	2200      	movs	r2, #0
 80005de:	2300      	movs	r3, #0
 80005e0:	9200      	str	r2, [sp, #0]
 80005e2:	9301      	str	r3, [sp, #4]
 80005e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <__udivmoddi4+0x8e>
 80005ea:	601c      	str	r4, [r3, #0]
 80005ec:	605d      	str	r5, [r3, #4]
 80005ee:	9800      	ldr	r0, [sp, #0]
 80005f0:	9901      	ldr	r1, [sp, #4]
 80005f2:	b003      	add	sp, #12
 80005f4:	bcf0      	pop	{r4, r5, r6, r7}
 80005f6:	46bb      	mov	fp, r7
 80005f8:	46b2      	mov	sl, r6
 80005fa:	46a9      	mov	r9, r5
 80005fc:	46a0      	mov	r8, r4
 80005fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000600:	4642      	mov	r2, r8
 8000602:	469b      	mov	fp, r3
 8000604:	2320      	movs	r3, #32
 8000606:	1a9b      	subs	r3, r3, r2
 8000608:	4652      	mov	r2, sl
 800060a:	40da      	lsrs	r2, r3
 800060c:	4641      	mov	r1, r8
 800060e:	0013      	movs	r3, r2
 8000610:	464a      	mov	r2, r9
 8000612:	408a      	lsls	r2, r1
 8000614:	0017      	movs	r7, r2
 8000616:	4642      	mov	r2, r8
 8000618:	431f      	orrs	r7, r3
 800061a:	4653      	mov	r3, sl
 800061c:	4093      	lsls	r3, r2
 800061e:	001e      	movs	r6, r3
 8000620:	42af      	cmp	r7, r5
 8000622:	d9c3      	bls.n	80005ac <__udivmoddi4+0x4c>
 8000624:	2200      	movs	r2, #0
 8000626:	2300      	movs	r3, #0
 8000628:	9200      	str	r2, [sp, #0]
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	4643      	mov	r3, r8
 800062e:	2b00      	cmp	r3, #0
 8000630:	d0d8      	beq.n	80005e4 <__udivmoddi4+0x84>
 8000632:	07fb      	lsls	r3, r7, #31
 8000634:	0872      	lsrs	r2, r6, #1
 8000636:	431a      	orrs	r2, r3
 8000638:	4646      	mov	r6, r8
 800063a:	087b      	lsrs	r3, r7, #1
 800063c:	e00e      	b.n	800065c <__udivmoddi4+0xfc>
 800063e:	42ab      	cmp	r3, r5
 8000640:	d101      	bne.n	8000646 <__udivmoddi4+0xe6>
 8000642:	42a2      	cmp	r2, r4
 8000644:	d80c      	bhi.n	8000660 <__udivmoddi4+0x100>
 8000646:	1aa4      	subs	r4, r4, r2
 8000648:	419d      	sbcs	r5, r3
 800064a:	2001      	movs	r0, #1
 800064c:	1924      	adds	r4, r4, r4
 800064e:	416d      	adcs	r5, r5
 8000650:	2100      	movs	r1, #0
 8000652:	3e01      	subs	r6, #1
 8000654:	1824      	adds	r4, r4, r0
 8000656:	414d      	adcs	r5, r1
 8000658:	2e00      	cmp	r6, #0
 800065a:	d006      	beq.n	800066a <__udivmoddi4+0x10a>
 800065c:	42ab      	cmp	r3, r5
 800065e:	d9ee      	bls.n	800063e <__udivmoddi4+0xde>
 8000660:	3e01      	subs	r6, #1
 8000662:	1924      	adds	r4, r4, r4
 8000664:	416d      	adcs	r5, r5
 8000666:	2e00      	cmp	r6, #0
 8000668:	d1f8      	bne.n	800065c <__udivmoddi4+0xfc>
 800066a:	9800      	ldr	r0, [sp, #0]
 800066c:	9901      	ldr	r1, [sp, #4]
 800066e:	465b      	mov	r3, fp
 8000670:	1900      	adds	r0, r0, r4
 8000672:	4169      	adcs	r1, r5
 8000674:	2b00      	cmp	r3, #0
 8000676:	db24      	blt.n	80006c2 <__udivmoddi4+0x162>
 8000678:	002b      	movs	r3, r5
 800067a:	465a      	mov	r2, fp
 800067c:	4644      	mov	r4, r8
 800067e:	40d3      	lsrs	r3, r2
 8000680:	002a      	movs	r2, r5
 8000682:	40e2      	lsrs	r2, r4
 8000684:	001c      	movs	r4, r3
 8000686:	465b      	mov	r3, fp
 8000688:	0015      	movs	r5, r2
 800068a:	2b00      	cmp	r3, #0
 800068c:	db2a      	blt.n	80006e4 <__udivmoddi4+0x184>
 800068e:	0026      	movs	r6, r4
 8000690:	409e      	lsls	r6, r3
 8000692:	0033      	movs	r3, r6
 8000694:	0026      	movs	r6, r4
 8000696:	4647      	mov	r7, r8
 8000698:	40be      	lsls	r6, r7
 800069a:	0032      	movs	r2, r6
 800069c:	1a80      	subs	r0, r0, r2
 800069e:	4199      	sbcs	r1, r3
 80006a0:	9000      	str	r0, [sp, #0]
 80006a2:	9101      	str	r1, [sp, #4]
 80006a4:	e79e      	b.n	80005e4 <__udivmoddi4+0x84>
 80006a6:	42a3      	cmp	r3, r4
 80006a8:	d8bc      	bhi.n	8000624 <__udivmoddi4+0xc4>
 80006aa:	e782      	b.n	80005b2 <__udivmoddi4+0x52>
 80006ac:	4642      	mov	r2, r8
 80006ae:	2320      	movs	r3, #32
 80006b0:	2100      	movs	r1, #0
 80006b2:	1a9b      	subs	r3, r3, r2
 80006b4:	2200      	movs	r2, #0
 80006b6:	9100      	str	r1, [sp, #0]
 80006b8:	9201      	str	r2, [sp, #4]
 80006ba:	2201      	movs	r2, #1
 80006bc:	40da      	lsrs	r2, r3
 80006be:	9201      	str	r2, [sp, #4]
 80006c0:	e785      	b.n	80005ce <__udivmoddi4+0x6e>
 80006c2:	4642      	mov	r2, r8
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	002a      	movs	r2, r5
 80006ca:	4646      	mov	r6, r8
 80006cc:	409a      	lsls	r2, r3
 80006ce:	0023      	movs	r3, r4
 80006d0:	40f3      	lsrs	r3, r6
 80006d2:	4644      	mov	r4, r8
 80006d4:	4313      	orrs	r3, r2
 80006d6:	002a      	movs	r2, r5
 80006d8:	40e2      	lsrs	r2, r4
 80006da:	001c      	movs	r4, r3
 80006dc:	465b      	mov	r3, fp
 80006de:	0015      	movs	r5, r2
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	dad4      	bge.n	800068e <__udivmoddi4+0x12e>
 80006e4:	4642      	mov	r2, r8
 80006e6:	002f      	movs	r7, r5
 80006e8:	2320      	movs	r3, #32
 80006ea:	0026      	movs	r6, r4
 80006ec:	4097      	lsls	r7, r2
 80006ee:	1a9b      	subs	r3, r3, r2
 80006f0:	40de      	lsrs	r6, r3
 80006f2:	003b      	movs	r3, r7
 80006f4:	4333      	orrs	r3, r6
 80006f6:	e7cd      	b.n	8000694 <__udivmoddi4+0x134>

080006f8 <__aeabi_dadd>:
 80006f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006fa:	4657      	mov	r7, sl
 80006fc:	464e      	mov	r6, r9
 80006fe:	4645      	mov	r5, r8
 8000700:	46de      	mov	lr, fp
 8000702:	b5e0      	push	{r5, r6, r7, lr}
 8000704:	b083      	sub	sp, #12
 8000706:	9000      	str	r0, [sp, #0]
 8000708:	9101      	str	r1, [sp, #4]
 800070a:	030c      	lsls	r4, r1, #12
 800070c:	004f      	lsls	r7, r1, #1
 800070e:	0fce      	lsrs	r6, r1, #31
 8000710:	0a61      	lsrs	r1, r4, #9
 8000712:	9c00      	ldr	r4, [sp, #0]
 8000714:	031d      	lsls	r5, r3, #12
 8000716:	0f64      	lsrs	r4, r4, #29
 8000718:	430c      	orrs	r4, r1
 800071a:	9900      	ldr	r1, [sp, #0]
 800071c:	9200      	str	r2, [sp, #0]
 800071e:	9301      	str	r3, [sp, #4]
 8000720:	00c8      	lsls	r0, r1, #3
 8000722:	0059      	lsls	r1, r3, #1
 8000724:	0d4b      	lsrs	r3, r1, #21
 8000726:	4699      	mov	r9, r3
 8000728:	9a00      	ldr	r2, [sp, #0]
 800072a:	9b01      	ldr	r3, [sp, #4]
 800072c:	0a6d      	lsrs	r5, r5, #9
 800072e:	0fd9      	lsrs	r1, r3, #31
 8000730:	0f53      	lsrs	r3, r2, #29
 8000732:	432b      	orrs	r3, r5
 8000734:	469a      	mov	sl, r3
 8000736:	9b00      	ldr	r3, [sp, #0]
 8000738:	0d7f      	lsrs	r7, r7, #21
 800073a:	00da      	lsls	r2, r3, #3
 800073c:	4694      	mov	ip, r2
 800073e:	464a      	mov	r2, r9
 8000740:	46b0      	mov	r8, r6
 8000742:	1aba      	subs	r2, r7, r2
 8000744:	428e      	cmp	r6, r1
 8000746:	d100      	bne.n	800074a <__aeabi_dadd+0x52>
 8000748:	e0b0      	b.n	80008ac <__aeabi_dadd+0x1b4>
 800074a:	2a00      	cmp	r2, #0
 800074c:	dc00      	bgt.n	8000750 <__aeabi_dadd+0x58>
 800074e:	e078      	b.n	8000842 <__aeabi_dadd+0x14a>
 8000750:	4649      	mov	r1, r9
 8000752:	2900      	cmp	r1, #0
 8000754:	d100      	bne.n	8000758 <__aeabi_dadd+0x60>
 8000756:	e0e9      	b.n	800092c <__aeabi_dadd+0x234>
 8000758:	49c9      	ldr	r1, [pc, #804]	@ (8000a80 <__aeabi_dadd+0x388>)
 800075a:	428f      	cmp	r7, r1
 800075c:	d100      	bne.n	8000760 <__aeabi_dadd+0x68>
 800075e:	e195      	b.n	8000a8c <__aeabi_dadd+0x394>
 8000760:	2501      	movs	r5, #1
 8000762:	2a38      	cmp	r2, #56	@ 0x38
 8000764:	dc16      	bgt.n	8000794 <__aeabi_dadd+0x9c>
 8000766:	2180      	movs	r1, #128	@ 0x80
 8000768:	4653      	mov	r3, sl
 800076a:	0409      	lsls	r1, r1, #16
 800076c:	430b      	orrs	r3, r1
 800076e:	469a      	mov	sl, r3
 8000770:	2a1f      	cmp	r2, #31
 8000772:	dd00      	ble.n	8000776 <__aeabi_dadd+0x7e>
 8000774:	e1e7      	b.n	8000b46 <__aeabi_dadd+0x44e>
 8000776:	2120      	movs	r1, #32
 8000778:	4655      	mov	r5, sl
 800077a:	1a8b      	subs	r3, r1, r2
 800077c:	4661      	mov	r1, ip
 800077e:	409d      	lsls	r5, r3
 8000780:	40d1      	lsrs	r1, r2
 8000782:	430d      	orrs	r5, r1
 8000784:	4661      	mov	r1, ip
 8000786:	4099      	lsls	r1, r3
 8000788:	1e4b      	subs	r3, r1, #1
 800078a:	4199      	sbcs	r1, r3
 800078c:	4653      	mov	r3, sl
 800078e:	40d3      	lsrs	r3, r2
 8000790:	430d      	orrs	r5, r1
 8000792:	1ae4      	subs	r4, r4, r3
 8000794:	1b45      	subs	r5, r0, r5
 8000796:	42a8      	cmp	r0, r5
 8000798:	4180      	sbcs	r0, r0
 800079a:	4240      	negs	r0, r0
 800079c:	1a24      	subs	r4, r4, r0
 800079e:	0223      	lsls	r3, r4, #8
 80007a0:	d400      	bmi.n	80007a4 <__aeabi_dadd+0xac>
 80007a2:	e10f      	b.n	80009c4 <__aeabi_dadd+0x2cc>
 80007a4:	0264      	lsls	r4, r4, #9
 80007a6:	0a64      	lsrs	r4, r4, #9
 80007a8:	2c00      	cmp	r4, #0
 80007aa:	d100      	bne.n	80007ae <__aeabi_dadd+0xb6>
 80007ac:	e139      	b.n	8000a22 <__aeabi_dadd+0x32a>
 80007ae:	0020      	movs	r0, r4
 80007b0:	f7ff fe7a 	bl	80004a8 <__clzsi2>
 80007b4:	0003      	movs	r3, r0
 80007b6:	3b08      	subs	r3, #8
 80007b8:	2120      	movs	r1, #32
 80007ba:	0028      	movs	r0, r5
 80007bc:	1aca      	subs	r2, r1, r3
 80007be:	40d0      	lsrs	r0, r2
 80007c0:	409c      	lsls	r4, r3
 80007c2:	0002      	movs	r2, r0
 80007c4:	409d      	lsls	r5, r3
 80007c6:	4322      	orrs	r2, r4
 80007c8:	429f      	cmp	r7, r3
 80007ca:	dd00      	ble.n	80007ce <__aeabi_dadd+0xd6>
 80007cc:	e173      	b.n	8000ab6 <__aeabi_dadd+0x3be>
 80007ce:	1bd8      	subs	r0, r3, r7
 80007d0:	3001      	adds	r0, #1
 80007d2:	1a09      	subs	r1, r1, r0
 80007d4:	002c      	movs	r4, r5
 80007d6:	408d      	lsls	r5, r1
 80007d8:	40c4      	lsrs	r4, r0
 80007da:	1e6b      	subs	r3, r5, #1
 80007dc:	419d      	sbcs	r5, r3
 80007de:	0013      	movs	r3, r2
 80007e0:	40c2      	lsrs	r2, r0
 80007e2:	408b      	lsls	r3, r1
 80007e4:	4325      	orrs	r5, r4
 80007e6:	2700      	movs	r7, #0
 80007e8:	0014      	movs	r4, r2
 80007ea:	431d      	orrs	r5, r3
 80007ec:	076b      	lsls	r3, r5, #29
 80007ee:	d009      	beq.n	8000804 <__aeabi_dadd+0x10c>
 80007f0:	230f      	movs	r3, #15
 80007f2:	402b      	ands	r3, r5
 80007f4:	2b04      	cmp	r3, #4
 80007f6:	d005      	beq.n	8000804 <__aeabi_dadd+0x10c>
 80007f8:	1d2b      	adds	r3, r5, #4
 80007fa:	42ab      	cmp	r3, r5
 80007fc:	41ad      	sbcs	r5, r5
 80007fe:	426d      	negs	r5, r5
 8000800:	1964      	adds	r4, r4, r5
 8000802:	001d      	movs	r5, r3
 8000804:	0223      	lsls	r3, r4, #8
 8000806:	d400      	bmi.n	800080a <__aeabi_dadd+0x112>
 8000808:	e12d      	b.n	8000a66 <__aeabi_dadd+0x36e>
 800080a:	4a9d      	ldr	r2, [pc, #628]	@ (8000a80 <__aeabi_dadd+0x388>)
 800080c:	3701      	adds	r7, #1
 800080e:	4297      	cmp	r7, r2
 8000810:	d100      	bne.n	8000814 <__aeabi_dadd+0x11c>
 8000812:	e0d3      	b.n	80009bc <__aeabi_dadd+0x2c4>
 8000814:	4646      	mov	r6, r8
 8000816:	499b      	ldr	r1, [pc, #620]	@ (8000a84 <__aeabi_dadd+0x38c>)
 8000818:	08ed      	lsrs	r5, r5, #3
 800081a:	4021      	ands	r1, r4
 800081c:	074a      	lsls	r2, r1, #29
 800081e:	432a      	orrs	r2, r5
 8000820:	057c      	lsls	r4, r7, #21
 8000822:	024d      	lsls	r5, r1, #9
 8000824:	0b2d      	lsrs	r5, r5, #12
 8000826:	0d64      	lsrs	r4, r4, #21
 8000828:	0524      	lsls	r4, r4, #20
 800082a:	432c      	orrs	r4, r5
 800082c:	07f6      	lsls	r6, r6, #31
 800082e:	4334      	orrs	r4, r6
 8000830:	0010      	movs	r0, r2
 8000832:	0021      	movs	r1, r4
 8000834:	b003      	add	sp, #12
 8000836:	bcf0      	pop	{r4, r5, r6, r7}
 8000838:	46bb      	mov	fp, r7
 800083a:	46b2      	mov	sl, r6
 800083c:	46a9      	mov	r9, r5
 800083e:	46a0      	mov	r8, r4
 8000840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000842:	2a00      	cmp	r2, #0
 8000844:	d100      	bne.n	8000848 <__aeabi_dadd+0x150>
 8000846:	e084      	b.n	8000952 <__aeabi_dadd+0x25a>
 8000848:	464a      	mov	r2, r9
 800084a:	1bd2      	subs	r2, r2, r7
 800084c:	2f00      	cmp	r7, #0
 800084e:	d000      	beq.n	8000852 <__aeabi_dadd+0x15a>
 8000850:	e16d      	b.n	8000b2e <__aeabi_dadd+0x436>
 8000852:	0025      	movs	r5, r4
 8000854:	4305      	orrs	r5, r0
 8000856:	d100      	bne.n	800085a <__aeabi_dadd+0x162>
 8000858:	e127      	b.n	8000aaa <__aeabi_dadd+0x3b2>
 800085a:	1e56      	subs	r6, r2, #1
 800085c:	2a01      	cmp	r2, #1
 800085e:	d100      	bne.n	8000862 <__aeabi_dadd+0x16a>
 8000860:	e23b      	b.n	8000cda <__aeabi_dadd+0x5e2>
 8000862:	4d87      	ldr	r5, [pc, #540]	@ (8000a80 <__aeabi_dadd+0x388>)
 8000864:	42aa      	cmp	r2, r5
 8000866:	d100      	bne.n	800086a <__aeabi_dadd+0x172>
 8000868:	e26a      	b.n	8000d40 <__aeabi_dadd+0x648>
 800086a:	2501      	movs	r5, #1
 800086c:	2e38      	cmp	r6, #56	@ 0x38
 800086e:	dc12      	bgt.n	8000896 <__aeabi_dadd+0x19e>
 8000870:	0032      	movs	r2, r6
 8000872:	2a1f      	cmp	r2, #31
 8000874:	dd00      	ble.n	8000878 <__aeabi_dadd+0x180>
 8000876:	e1f8      	b.n	8000c6a <__aeabi_dadd+0x572>
 8000878:	2620      	movs	r6, #32
 800087a:	0025      	movs	r5, r4
 800087c:	1ab6      	subs	r6, r6, r2
 800087e:	0007      	movs	r7, r0
 8000880:	4653      	mov	r3, sl
 8000882:	40b0      	lsls	r0, r6
 8000884:	40d4      	lsrs	r4, r2
 8000886:	40b5      	lsls	r5, r6
 8000888:	40d7      	lsrs	r7, r2
 800088a:	1e46      	subs	r6, r0, #1
 800088c:	41b0      	sbcs	r0, r6
 800088e:	1b1b      	subs	r3, r3, r4
 8000890:	469a      	mov	sl, r3
 8000892:	433d      	orrs	r5, r7
 8000894:	4305      	orrs	r5, r0
 8000896:	4662      	mov	r2, ip
 8000898:	1b55      	subs	r5, r2, r5
 800089a:	45ac      	cmp	ip, r5
 800089c:	4192      	sbcs	r2, r2
 800089e:	4653      	mov	r3, sl
 80008a0:	4252      	negs	r2, r2
 80008a2:	000e      	movs	r6, r1
 80008a4:	464f      	mov	r7, r9
 80008a6:	4688      	mov	r8, r1
 80008a8:	1a9c      	subs	r4, r3, r2
 80008aa:	e778      	b.n	800079e <__aeabi_dadd+0xa6>
 80008ac:	2a00      	cmp	r2, #0
 80008ae:	dc00      	bgt.n	80008b2 <__aeabi_dadd+0x1ba>
 80008b0:	e08e      	b.n	80009d0 <__aeabi_dadd+0x2d8>
 80008b2:	4649      	mov	r1, r9
 80008b4:	2900      	cmp	r1, #0
 80008b6:	d175      	bne.n	80009a4 <__aeabi_dadd+0x2ac>
 80008b8:	4661      	mov	r1, ip
 80008ba:	4653      	mov	r3, sl
 80008bc:	4319      	orrs	r1, r3
 80008be:	d100      	bne.n	80008c2 <__aeabi_dadd+0x1ca>
 80008c0:	e0f6      	b.n	8000ab0 <__aeabi_dadd+0x3b8>
 80008c2:	1e51      	subs	r1, r2, #1
 80008c4:	2a01      	cmp	r2, #1
 80008c6:	d100      	bne.n	80008ca <__aeabi_dadd+0x1d2>
 80008c8:	e191      	b.n	8000bee <__aeabi_dadd+0x4f6>
 80008ca:	4d6d      	ldr	r5, [pc, #436]	@ (8000a80 <__aeabi_dadd+0x388>)
 80008cc:	42aa      	cmp	r2, r5
 80008ce:	d100      	bne.n	80008d2 <__aeabi_dadd+0x1da>
 80008d0:	e0dc      	b.n	8000a8c <__aeabi_dadd+0x394>
 80008d2:	2501      	movs	r5, #1
 80008d4:	2938      	cmp	r1, #56	@ 0x38
 80008d6:	dc14      	bgt.n	8000902 <__aeabi_dadd+0x20a>
 80008d8:	000a      	movs	r2, r1
 80008da:	2a1f      	cmp	r2, #31
 80008dc:	dd00      	ble.n	80008e0 <__aeabi_dadd+0x1e8>
 80008de:	e1a2      	b.n	8000c26 <__aeabi_dadd+0x52e>
 80008e0:	2120      	movs	r1, #32
 80008e2:	4653      	mov	r3, sl
 80008e4:	1a89      	subs	r1, r1, r2
 80008e6:	408b      	lsls	r3, r1
 80008e8:	001d      	movs	r5, r3
 80008ea:	4663      	mov	r3, ip
 80008ec:	40d3      	lsrs	r3, r2
 80008ee:	431d      	orrs	r5, r3
 80008f0:	4663      	mov	r3, ip
 80008f2:	408b      	lsls	r3, r1
 80008f4:	0019      	movs	r1, r3
 80008f6:	1e4b      	subs	r3, r1, #1
 80008f8:	4199      	sbcs	r1, r3
 80008fa:	4653      	mov	r3, sl
 80008fc:	40d3      	lsrs	r3, r2
 80008fe:	430d      	orrs	r5, r1
 8000900:	18e4      	adds	r4, r4, r3
 8000902:	182d      	adds	r5, r5, r0
 8000904:	4285      	cmp	r5, r0
 8000906:	4180      	sbcs	r0, r0
 8000908:	4240      	negs	r0, r0
 800090a:	1824      	adds	r4, r4, r0
 800090c:	0223      	lsls	r3, r4, #8
 800090e:	d559      	bpl.n	80009c4 <__aeabi_dadd+0x2cc>
 8000910:	4b5b      	ldr	r3, [pc, #364]	@ (8000a80 <__aeabi_dadd+0x388>)
 8000912:	3701      	adds	r7, #1
 8000914:	429f      	cmp	r7, r3
 8000916:	d051      	beq.n	80009bc <__aeabi_dadd+0x2c4>
 8000918:	2101      	movs	r1, #1
 800091a:	4b5a      	ldr	r3, [pc, #360]	@ (8000a84 <__aeabi_dadd+0x38c>)
 800091c:	086a      	lsrs	r2, r5, #1
 800091e:	401c      	ands	r4, r3
 8000920:	4029      	ands	r1, r5
 8000922:	430a      	orrs	r2, r1
 8000924:	07e5      	lsls	r5, r4, #31
 8000926:	4315      	orrs	r5, r2
 8000928:	0864      	lsrs	r4, r4, #1
 800092a:	e75f      	b.n	80007ec <__aeabi_dadd+0xf4>
 800092c:	4661      	mov	r1, ip
 800092e:	4653      	mov	r3, sl
 8000930:	4319      	orrs	r1, r3
 8000932:	d100      	bne.n	8000936 <__aeabi_dadd+0x23e>
 8000934:	e0bc      	b.n	8000ab0 <__aeabi_dadd+0x3b8>
 8000936:	1e51      	subs	r1, r2, #1
 8000938:	2a01      	cmp	r2, #1
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x246>
 800093c:	e164      	b.n	8000c08 <__aeabi_dadd+0x510>
 800093e:	4d50      	ldr	r5, [pc, #320]	@ (8000a80 <__aeabi_dadd+0x388>)
 8000940:	42aa      	cmp	r2, r5
 8000942:	d100      	bne.n	8000946 <__aeabi_dadd+0x24e>
 8000944:	e16a      	b.n	8000c1c <__aeabi_dadd+0x524>
 8000946:	2501      	movs	r5, #1
 8000948:	2938      	cmp	r1, #56	@ 0x38
 800094a:	dd00      	ble.n	800094e <__aeabi_dadd+0x256>
 800094c:	e722      	b.n	8000794 <__aeabi_dadd+0x9c>
 800094e:	000a      	movs	r2, r1
 8000950:	e70e      	b.n	8000770 <__aeabi_dadd+0x78>
 8000952:	4a4d      	ldr	r2, [pc, #308]	@ (8000a88 <__aeabi_dadd+0x390>)
 8000954:	1c7d      	adds	r5, r7, #1
 8000956:	4215      	tst	r5, r2
 8000958:	d000      	beq.n	800095c <__aeabi_dadd+0x264>
 800095a:	e0d0      	b.n	8000afe <__aeabi_dadd+0x406>
 800095c:	0025      	movs	r5, r4
 800095e:	4662      	mov	r2, ip
 8000960:	4653      	mov	r3, sl
 8000962:	4305      	orrs	r5, r0
 8000964:	431a      	orrs	r2, r3
 8000966:	2f00      	cmp	r7, #0
 8000968:	d000      	beq.n	800096c <__aeabi_dadd+0x274>
 800096a:	e137      	b.n	8000bdc <__aeabi_dadd+0x4e4>
 800096c:	2d00      	cmp	r5, #0
 800096e:	d100      	bne.n	8000972 <__aeabi_dadd+0x27a>
 8000970:	e1a8      	b.n	8000cc4 <__aeabi_dadd+0x5cc>
 8000972:	2a00      	cmp	r2, #0
 8000974:	d100      	bne.n	8000978 <__aeabi_dadd+0x280>
 8000976:	e16a      	b.n	8000c4e <__aeabi_dadd+0x556>
 8000978:	4663      	mov	r3, ip
 800097a:	1ac5      	subs	r5, r0, r3
 800097c:	4653      	mov	r3, sl
 800097e:	1ae2      	subs	r2, r4, r3
 8000980:	42a8      	cmp	r0, r5
 8000982:	419b      	sbcs	r3, r3
 8000984:	425b      	negs	r3, r3
 8000986:	1ad3      	subs	r3, r2, r3
 8000988:	021a      	lsls	r2, r3, #8
 800098a:	d400      	bmi.n	800098e <__aeabi_dadd+0x296>
 800098c:	e203      	b.n	8000d96 <__aeabi_dadd+0x69e>
 800098e:	4663      	mov	r3, ip
 8000990:	1a1d      	subs	r5, r3, r0
 8000992:	45ac      	cmp	ip, r5
 8000994:	4192      	sbcs	r2, r2
 8000996:	4653      	mov	r3, sl
 8000998:	4252      	negs	r2, r2
 800099a:	1b1c      	subs	r4, r3, r4
 800099c:	000e      	movs	r6, r1
 800099e:	4688      	mov	r8, r1
 80009a0:	1aa4      	subs	r4, r4, r2
 80009a2:	e723      	b.n	80007ec <__aeabi_dadd+0xf4>
 80009a4:	4936      	ldr	r1, [pc, #216]	@ (8000a80 <__aeabi_dadd+0x388>)
 80009a6:	428f      	cmp	r7, r1
 80009a8:	d070      	beq.n	8000a8c <__aeabi_dadd+0x394>
 80009aa:	2501      	movs	r5, #1
 80009ac:	2a38      	cmp	r2, #56	@ 0x38
 80009ae:	dca8      	bgt.n	8000902 <__aeabi_dadd+0x20a>
 80009b0:	2180      	movs	r1, #128	@ 0x80
 80009b2:	4653      	mov	r3, sl
 80009b4:	0409      	lsls	r1, r1, #16
 80009b6:	430b      	orrs	r3, r1
 80009b8:	469a      	mov	sl, r3
 80009ba:	e78e      	b.n	80008da <__aeabi_dadd+0x1e2>
 80009bc:	003c      	movs	r4, r7
 80009be:	2500      	movs	r5, #0
 80009c0:	2200      	movs	r2, #0
 80009c2:	e731      	b.n	8000828 <__aeabi_dadd+0x130>
 80009c4:	2307      	movs	r3, #7
 80009c6:	402b      	ands	r3, r5
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d000      	beq.n	80009ce <__aeabi_dadd+0x2d6>
 80009cc:	e710      	b.n	80007f0 <__aeabi_dadd+0xf8>
 80009ce:	e093      	b.n	8000af8 <__aeabi_dadd+0x400>
 80009d0:	2a00      	cmp	r2, #0
 80009d2:	d074      	beq.n	8000abe <__aeabi_dadd+0x3c6>
 80009d4:	464a      	mov	r2, r9
 80009d6:	1bd2      	subs	r2, r2, r7
 80009d8:	2f00      	cmp	r7, #0
 80009da:	d100      	bne.n	80009de <__aeabi_dadd+0x2e6>
 80009dc:	e0c7      	b.n	8000b6e <__aeabi_dadd+0x476>
 80009de:	4928      	ldr	r1, [pc, #160]	@ (8000a80 <__aeabi_dadd+0x388>)
 80009e0:	4589      	cmp	r9, r1
 80009e2:	d100      	bne.n	80009e6 <__aeabi_dadd+0x2ee>
 80009e4:	e185      	b.n	8000cf2 <__aeabi_dadd+0x5fa>
 80009e6:	2501      	movs	r5, #1
 80009e8:	2a38      	cmp	r2, #56	@ 0x38
 80009ea:	dc12      	bgt.n	8000a12 <__aeabi_dadd+0x31a>
 80009ec:	2180      	movs	r1, #128	@ 0x80
 80009ee:	0409      	lsls	r1, r1, #16
 80009f0:	430c      	orrs	r4, r1
 80009f2:	2a1f      	cmp	r2, #31
 80009f4:	dd00      	ble.n	80009f8 <__aeabi_dadd+0x300>
 80009f6:	e1ab      	b.n	8000d50 <__aeabi_dadd+0x658>
 80009f8:	2120      	movs	r1, #32
 80009fa:	0025      	movs	r5, r4
 80009fc:	1a89      	subs	r1, r1, r2
 80009fe:	0007      	movs	r7, r0
 8000a00:	4088      	lsls	r0, r1
 8000a02:	408d      	lsls	r5, r1
 8000a04:	40d7      	lsrs	r7, r2
 8000a06:	1e41      	subs	r1, r0, #1
 8000a08:	4188      	sbcs	r0, r1
 8000a0a:	40d4      	lsrs	r4, r2
 8000a0c:	433d      	orrs	r5, r7
 8000a0e:	4305      	orrs	r5, r0
 8000a10:	44a2      	add	sl, r4
 8000a12:	4465      	add	r5, ip
 8000a14:	4565      	cmp	r5, ip
 8000a16:	4192      	sbcs	r2, r2
 8000a18:	4252      	negs	r2, r2
 8000a1a:	4452      	add	r2, sl
 8000a1c:	0014      	movs	r4, r2
 8000a1e:	464f      	mov	r7, r9
 8000a20:	e774      	b.n	800090c <__aeabi_dadd+0x214>
 8000a22:	0028      	movs	r0, r5
 8000a24:	f7ff fd40 	bl	80004a8 <__clzsi2>
 8000a28:	0003      	movs	r3, r0
 8000a2a:	3318      	adds	r3, #24
 8000a2c:	2b1f      	cmp	r3, #31
 8000a2e:	dc00      	bgt.n	8000a32 <__aeabi_dadd+0x33a>
 8000a30:	e6c2      	b.n	80007b8 <__aeabi_dadd+0xc0>
 8000a32:	002a      	movs	r2, r5
 8000a34:	3808      	subs	r0, #8
 8000a36:	4082      	lsls	r2, r0
 8000a38:	429f      	cmp	r7, r3
 8000a3a:	dd00      	ble.n	8000a3e <__aeabi_dadd+0x346>
 8000a3c:	e0a9      	b.n	8000b92 <__aeabi_dadd+0x49a>
 8000a3e:	1bdb      	subs	r3, r3, r7
 8000a40:	1c58      	adds	r0, r3, #1
 8000a42:	281f      	cmp	r0, #31
 8000a44:	dc00      	bgt.n	8000a48 <__aeabi_dadd+0x350>
 8000a46:	e1ac      	b.n	8000da2 <__aeabi_dadd+0x6aa>
 8000a48:	0015      	movs	r5, r2
 8000a4a:	3b1f      	subs	r3, #31
 8000a4c:	40dd      	lsrs	r5, r3
 8000a4e:	2820      	cmp	r0, #32
 8000a50:	d005      	beq.n	8000a5e <__aeabi_dadd+0x366>
 8000a52:	2340      	movs	r3, #64	@ 0x40
 8000a54:	1a1b      	subs	r3, r3, r0
 8000a56:	409a      	lsls	r2, r3
 8000a58:	1e53      	subs	r3, r2, #1
 8000a5a:	419a      	sbcs	r2, r3
 8000a5c:	4315      	orrs	r5, r2
 8000a5e:	2307      	movs	r3, #7
 8000a60:	2700      	movs	r7, #0
 8000a62:	402b      	ands	r3, r5
 8000a64:	e7b0      	b.n	80009c8 <__aeabi_dadd+0x2d0>
 8000a66:	08ed      	lsrs	r5, r5, #3
 8000a68:	4b05      	ldr	r3, [pc, #20]	@ (8000a80 <__aeabi_dadd+0x388>)
 8000a6a:	0762      	lsls	r2, r4, #29
 8000a6c:	432a      	orrs	r2, r5
 8000a6e:	08e4      	lsrs	r4, r4, #3
 8000a70:	429f      	cmp	r7, r3
 8000a72:	d00f      	beq.n	8000a94 <__aeabi_dadd+0x39c>
 8000a74:	0324      	lsls	r4, r4, #12
 8000a76:	0b25      	lsrs	r5, r4, #12
 8000a78:	057c      	lsls	r4, r7, #21
 8000a7a:	0d64      	lsrs	r4, r4, #21
 8000a7c:	e6d4      	b.n	8000828 <__aeabi_dadd+0x130>
 8000a7e:	46c0      	nop			@ (mov r8, r8)
 8000a80:	000007ff 	.word	0x000007ff
 8000a84:	ff7fffff 	.word	0xff7fffff
 8000a88:	000007fe 	.word	0x000007fe
 8000a8c:	08c0      	lsrs	r0, r0, #3
 8000a8e:	0762      	lsls	r2, r4, #29
 8000a90:	4302      	orrs	r2, r0
 8000a92:	08e4      	lsrs	r4, r4, #3
 8000a94:	0013      	movs	r3, r2
 8000a96:	4323      	orrs	r3, r4
 8000a98:	d100      	bne.n	8000a9c <__aeabi_dadd+0x3a4>
 8000a9a:	e186      	b.n	8000daa <__aeabi_dadd+0x6b2>
 8000a9c:	2580      	movs	r5, #128	@ 0x80
 8000a9e:	032d      	lsls	r5, r5, #12
 8000aa0:	4325      	orrs	r5, r4
 8000aa2:	032d      	lsls	r5, r5, #12
 8000aa4:	4cc3      	ldr	r4, [pc, #780]	@ (8000db4 <__aeabi_dadd+0x6bc>)
 8000aa6:	0b2d      	lsrs	r5, r5, #12
 8000aa8:	e6be      	b.n	8000828 <__aeabi_dadd+0x130>
 8000aaa:	4660      	mov	r0, ip
 8000aac:	4654      	mov	r4, sl
 8000aae:	000e      	movs	r6, r1
 8000ab0:	0017      	movs	r7, r2
 8000ab2:	08c5      	lsrs	r5, r0, #3
 8000ab4:	e7d8      	b.n	8000a68 <__aeabi_dadd+0x370>
 8000ab6:	4cc0      	ldr	r4, [pc, #768]	@ (8000db8 <__aeabi_dadd+0x6c0>)
 8000ab8:	1aff      	subs	r7, r7, r3
 8000aba:	4014      	ands	r4, r2
 8000abc:	e696      	b.n	80007ec <__aeabi_dadd+0xf4>
 8000abe:	4abf      	ldr	r2, [pc, #764]	@ (8000dbc <__aeabi_dadd+0x6c4>)
 8000ac0:	1c79      	adds	r1, r7, #1
 8000ac2:	4211      	tst	r1, r2
 8000ac4:	d16b      	bne.n	8000b9e <__aeabi_dadd+0x4a6>
 8000ac6:	0022      	movs	r2, r4
 8000ac8:	4302      	orrs	r2, r0
 8000aca:	2f00      	cmp	r7, #0
 8000acc:	d000      	beq.n	8000ad0 <__aeabi_dadd+0x3d8>
 8000ace:	e0db      	b.n	8000c88 <__aeabi_dadd+0x590>
 8000ad0:	2a00      	cmp	r2, #0
 8000ad2:	d100      	bne.n	8000ad6 <__aeabi_dadd+0x3de>
 8000ad4:	e12d      	b.n	8000d32 <__aeabi_dadd+0x63a>
 8000ad6:	4662      	mov	r2, ip
 8000ad8:	4653      	mov	r3, sl
 8000ada:	431a      	orrs	r2, r3
 8000adc:	d100      	bne.n	8000ae0 <__aeabi_dadd+0x3e8>
 8000ade:	e0b6      	b.n	8000c4e <__aeabi_dadd+0x556>
 8000ae0:	4663      	mov	r3, ip
 8000ae2:	18c5      	adds	r5, r0, r3
 8000ae4:	4285      	cmp	r5, r0
 8000ae6:	4180      	sbcs	r0, r0
 8000ae8:	4454      	add	r4, sl
 8000aea:	4240      	negs	r0, r0
 8000aec:	1824      	adds	r4, r4, r0
 8000aee:	0223      	lsls	r3, r4, #8
 8000af0:	d502      	bpl.n	8000af8 <__aeabi_dadd+0x400>
 8000af2:	000f      	movs	r7, r1
 8000af4:	4bb0      	ldr	r3, [pc, #704]	@ (8000db8 <__aeabi_dadd+0x6c0>)
 8000af6:	401c      	ands	r4, r3
 8000af8:	003a      	movs	r2, r7
 8000afa:	0028      	movs	r0, r5
 8000afc:	e7d8      	b.n	8000ab0 <__aeabi_dadd+0x3b8>
 8000afe:	4662      	mov	r2, ip
 8000b00:	1a85      	subs	r5, r0, r2
 8000b02:	42a8      	cmp	r0, r5
 8000b04:	4192      	sbcs	r2, r2
 8000b06:	4653      	mov	r3, sl
 8000b08:	4252      	negs	r2, r2
 8000b0a:	4691      	mov	r9, r2
 8000b0c:	1ae3      	subs	r3, r4, r3
 8000b0e:	001a      	movs	r2, r3
 8000b10:	464b      	mov	r3, r9
 8000b12:	1ad2      	subs	r2, r2, r3
 8000b14:	0013      	movs	r3, r2
 8000b16:	4691      	mov	r9, r2
 8000b18:	021a      	lsls	r2, r3, #8
 8000b1a:	d454      	bmi.n	8000bc6 <__aeabi_dadd+0x4ce>
 8000b1c:	464a      	mov	r2, r9
 8000b1e:	464c      	mov	r4, r9
 8000b20:	432a      	orrs	r2, r5
 8000b22:	d000      	beq.n	8000b26 <__aeabi_dadd+0x42e>
 8000b24:	e640      	b.n	80007a8 <__aeabi_dadd+0xb0>
 8000b26:	2600      	movs	r6, #0
 8000b28:	2400      	movs	r4, #0
 8000b2a:	2500      	movs	r5, #0
 8000b2c:	e67c      	b.n	8000828 <__aeabi_dadd+0x130>
 8000b2e:	4da1      	ldr	r5, [pc, #644]	@ (8000db4 <__aeabi_dadd+0x6bc>)
 8000b30:	45a9      	cmp	r9, r5
 8000b32:	d100      	bne.n	8000b36 <__aeabi_dadd+0x43e>
 8000b34:	e090      	b.n	8000c58 <__aeabi_dadd+0x560>
 8000b36:	2501      	movs	r5, #1
 8000b38:	2a38      	cmp	r2, #56	@ 0x38
 8000b3a:	dd00      	ble.n	8000b3e <__aeabi_dadd+0x446>
 8000b3c:	e6ab      	b.n	8000896 <__aeabi_dadd+0x19e>
 8000b3e:	2580      	movs	r5, #128	@ 0x80
 8000b40:	042d      	lsls	r5, r5, #16
 8000b42:	432c      	orrs	r4, r5
 8000b44:	e695      	b.n	8000872 <__aeabi_dadd+0x17a>
 8000b46:	0011      	movs	r1, r2
 8000b48:	4655      	mov	r5, sl
 8000b4a:	3920      	subs	r1, #32
 8000b4c:	40cd      	lsrs	r5, r1
 8000b4e:	46a9      	mov	r9, r5
 8000b50:	2a20      	cmp	r2, #32
 8000b52:	d006      	beq.n	8000b62 <__aeabi_dadd+0x46a>
 8000b54:	2140      	movs	r1, #64	@ 0x40
 8000b56:	4653      	mov	r3, sl
 8000b58:	1a8a      	subs	r2, r1, r2
 8000b5a:	4093      	lsls	r3, r2
 8000b5c:	4662      	mov	r2, ip
 8000b5e:	431a      	orrs	r2, r3
 8000b60:	4694      	mov	ip, r2
 8000b62:	4665      	mov	r5, ip
 8000b64:	1e6b      	subs	r3, r5, #1
 8000b66:	419d      	sbcs	r5, r3
 8000b68:	464b      	mov	r3, r9
 8000b6a:	431d      	orrs	r5, r3
 8000b6c:	e612      	b.n	8000794 <__aeabi_dadd+0x9c>
 8000b6e:	0021      	movs	r1, r4
 8000b70:	4301      	orrs	r1, r0
 8000b72:	d100      	bne.n	8000b76 <__aeabi_dadd+0x47e>
 8000b74:	e0c4      	b.n	8000d00 <__aeabi_dadd+0x608>
 8000b76:	1e51      	subs	r1, r2, #1
 8000b78:	2a01      	cmp	r2, #1
 8000b7a:	d100      	bne.n	8000b7e <__aeabi_dadd+0x486>
 8000b7c:	e0fb      	b.n	8000d76 <__aeabi_dadd+0x67e>
 8000b7e:	4d8d      	ldr	r5, [pc, #564]	@ (8000db4 <__aeabi_dadd+0x6bc>)
 8000b80:	42aa      	cmp	r2, r5
 8000b82:	d100      	bne.n	8000b86 <__aeabi_dadd+0x48e>
 8000b84:	e0b5      	b.n	8000cf2 <__aeabi_dadd+0x5fa>
 8000b86:	2501      	movs	r5, #1
 8000b88:	2938      	cmp	r1, #56	@ 0x38
 8000b8a:	dd00      	ble.n	8000b8e <__aeabi_dadd+0x496>
 8000b8c:	e741      	b.n	8000a12 <__aeabi_dadd+0x31a>
 8000b8e:	000a      	movs	r2, r1
 8000b90:	e72f      	b.n	80009f2 <__aeabi_dadd+0x2fa>
 8000b92:	4c89      	ldr	r4, [pc, #548]	@ (8000db8 <__aeabi_dadd+0x6c0>)
 8000b94:	1aff      	subs	r7, r7, r3
 8000b96:	4014      	ands	r4, r2
 8000b98:	0762      	lsls	r2, r4, #29
 8000b9a:	08e4      	lsrs	r4, r4, #3
 8000b9c:	e76a      	b.n	8000a74 <__aeabi_dadd+0x37c>
 8000b9e:	4a85      	ldr	r2, [pc, #532]	@ (8000db4 <__aeabi_dadd+0x6bc>)
 8000ba0:	4291      	cmp	r1, r2
 8000ba2:	d100      	bne.n	8000ba6 <__aeabi_dadd+0x4ae>
 8000ba4:	e0e3      	b.n	8000d6e <__aeabi_dadd+0x676>
 8000ba6:	4663      	mov	r3, ip
 8000ba8:	18c2      	adds	r2, r0, r3
 8000baa:	4282      	cmp	r2, r0
 8000bac:	4180      	sbcs	r0, r0
 8000bae:	0023      	movs	r3, r4
 8000bb0:	4240      	negs	r0, r0
 8000bb2:	4453      	add	r3, sl
 8000bb4:	181b      	adds	r3, r3, r0
 8000bb6:	07dd      	lsls	r5, r3, #31
 8000bb8:	085c      	lsrs	r4, r3, #1
 8000bba:	2307      	movs	r3, #7
 8000bbc:	0852      	lsrs	r2, r2, #1
 8000bbe:	4315      	orrs	r5, r2
 8000bc0:	000f      	movs	r7, r1
 8000bc2:	402b      	ands	r3, r5
 8000bc4:	e700      	b.n	80009c8 <__aeabi_dadd+0x2d0>
 8000bc6:	4663      	mov	r3, ip
 8000bc8:	1a1d      	subs	r5, r3, r0
 8000bca:	45ac      	cmp	ip, r5
 8000bcc:	4192      	sbcs	r2, r2
 8000bce:	4653      	mov	r3, sl
 8000bd0:	4252      	negs	r2, r2
 8000bd2:	1b1c      	subs	r4, r3, r4
 8000bd4:	000e      	movs	r6, r1
 8000bd6:	4688      	mov	r8, r1
 8000bd8:	1aa4      	subs	r4, r4, r2
 8000bda:	e5e5      	b.n	80007a8 <__aeabi_dadd+0xb0>
 8000bdc:	2d00      	cmp	r5, #0
 8000bde:	d000      	beq.n	8000be2 <__aeabi_dadd+0x4ea>
 8000be0:	e091      	b.n	8000d06 <__aeabi_dadd+0x60e>
 8000be2:	2a00      	cmp	r2, #0
 8000be4:	d138      	bne.n	8000c58 <__aeabi_dadd+0x560>
 8000be6:	2480      	movs	r4, #128	@ 0x80
 8000be8:	2600      	movs	r6, #0
 8000bea:	0324      	lsls	r4, r4, #12
 8000bec:	e756      	b.n	8000a9c <__aeabi_dadd+0x3a4>
 8000bee:	4663      	mov	r3, ip
 8000bf0:	18c5      	adds	r5, r0, r3
 8000bf2:	4285      	cmp	r5, r0
 8000bf4:	4180      	sbcs	r0, r0
 8000bf6:	4454      	add	r4, sl
 8000bf8:	4240      	negs	r0, r0
 8000bfa:	1824      	adds	r4, r4, r0
 8000bfc:	2701      	movs	r7, #1
 8000bfe:	0223      	lsls	r3, r4, #8
 8000c00:	d400      	bmi.n	8000c04 <__aeabi_dadd+0x50c>
 8000c02:	e6df      	b.n	80009c4 <__aeabi_dadd+0x2cc>
 8000c04:	2702      	movs	r7, #2
 8000c06:	e687      	b.n	8000918 <__aeabi_dadd+0x220>
 8000c08:	4663      	mov	r3, ip
 8000c0a:	1ac5      	subs	r5, r0, r3
 8000c0c:	42a8      	cmp	r0, r5
 8000c0e:	4180      	sbcs	r0, r0
 8000c10:	4653      	mov	r3, sl
 8000c12:	4240      	negs	r0, r0
 8000c14:	1ae4      	subs	r4, r4, r3
 8000c16:	2701      	movs	r7, #1
 8000c18:	1a24      	subs	r4, r4, r0
 8000c1a:	e5c0      	b.n	800079e <__aeabi_dadd+0xa6>
 8000c1c:	0762      	lsls	r2, r4, #29
 8000c1e:	08c0      	lsrs	r0, r0, #3
 8000c20:	4302      	orrs	r2, r0
 8000c22:	08e4      	lsrs	r4, r4, #3
 8000c24:	e736      	b.n	8000a94 <__aeabi_dadd+0x39c>
 8000c26:	0011      	movs	r1, r2
 8000c28:	4653      	mov	r3, sl
 8000c2a:	3920      	subs	r1, #32
 8000c2c:	40cb      	lsrs	r3, r1
 8000c2e:	4699      	mov	r9, r3
 8000c30:	2a20      	cmp	r2, #32
 8000c32:	d006      	beq.n	8000c42 <__aeabi_dadd+0x54a>
 8000c34:	2140      	movs	r1, #64	@ 0x40
 8000c36:	4653      	mov	r3, sl
 8000c38:	1a8a      	subs	r2, r1, r2
 8000c3a:	4093      	lsls	r3, r2
 8000c3c:	4662      	mov	r2, ip
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	4694      	mov	ip, r2
 8000c42:	4665      	mov	r5, ip
 8000c44:	1e6b      	subs	r3, r5, #1
 8000c46:	419d      	sbcs	r5, r3
 8000c48:	464b      	mov	r3, r9
 8000c4a:	431d      	orrs	r5, r3
 8000c4c:	e659      	b.n	8000902 <__aeabi_dadd+0x20a>
 8000c4e:	0762      	lsls	r2, r4, #29
 8000c50:	08c0      	lsrs	r0, r0, #3
 8000c52:	4302      	orrs	r2, r0
 8000c54:	08e4      	lsrs	r4, r4, #3
 8000c56:	e70d      	b.n	8000a74 <__aeabi_dadd+0x37c>
 8000c58:	4653      	mov	r3, sl
 8000c5a:	075a      	lsls	r2, r3, #29
 8000c5c:	4663      	mov	r3, ip
 8000c5e:	08d8      	lsrs	r0, r3, #3
 8000c60:	4653      	mov	r3, sl
 8000c62:	000e      	movs	r6, r1
 8000c64:	4302      	orrs	r2, r0
 8000c66:	08dc      	lsrs	r4, r3, #3
 8000c68:	e714      	b.n	8000a94 <__aeabi_dadd+0x39c>
 8000c6a:	0015      	movs	r5, r2
 8000c6c:	0026      	movs	r6, r4
 8000c6e:	3d20      	subs	r5, #32
 8000c70:	40ee      	lsrs	r6, r5
 8000c72:	2a20      	cmp	r2, #32
 8000c74:	d003      	beq.n	8000c7e <__aeabi_dadd+0x586>
 8000c76:	2540      	movs	r5, #64	@ 0x40
 8000c78:	1aaa      	subs	r2, r5, r2
 8000c7a:	4094      	lsls	r4, r2
 8000c7c:	4320      	orrs	r0, r4
 8000c7e:	1e42      	subs	r2, r0, #1
 8000c80:	4190      	sbcs	r0, r2
 8000c82:	0005      	movs	r5, r0
 8000c84:	4335      	orrs	r5, r6
 8000c86:	e606      	b.n	8000896 <__aeabi_dadd+0x19e>
 8000c88:	2a00      	cmp	r2, #0
 8000c8a:	d07c      	beq.n	8000d86 <__aeabi_dadd+0x68e>
 8000c8c:	4662      	mov	r2, ip
 8000c8e:	4653      	mov	r3, sl
 8000c90:	08c0      	lsrs	r0, r0, #3
 8000c92:	431a      	orrs	r2, r3
 8000c94:	d100      	bne.n	8000c98 <__aeabi_dadd+0x5a0>
 8000c96:	e6fa      	b.n	8000a8e <__aeabi_dadd+0x396>
 8000c98:	0762      	lsls	r2, r4, #29
 8000c9a:	4310      	orrs	r0, r2
 8000c9c:	2280      	movs	r2, #128	@ 0x80
 8000c9e:	08e4      	lsrs	r4, r4, #3
 8000ca0:	0312      	lsls	r2, r2, #12
 8000ca2:	4214      	tst	r4, r2
 8000ca4:	d008      	beq.n	8000cb8 <__aeabi_dadd+0x5c0>
 8000ca6:	08d9      	lsrs	r1, r3, #3
 8000ca8:	4211      	tst	r1, r2
 8000caa:	d105      	bne.n	8000cb8 <__aeabi_dadd+0x5c0>
 8000cac:	4663      	mov	r3, ip
 8000cae:	08d8      	lsrs	r0, r3, #3
 8000cb0:	4653      	mov	r3, sl
 8000cb2:	000c      	movs	r4, r1
 8000cb4:	075b      	lsls	r3, r3, #29
 8000cb6:	4318      	orrs	r0, r3
 8000cb8:	0f42      	lsrs	r2, r0, #29
 8000cba:	00c0      	lsls	r0, r0, #3
 8000cbc:	08c0      	lsrs	r0, r0, #3
 8000cbe:	0752      	lsls	r2, r2, #29
 8000cc0:	4302      	orrs	r2, r0
 8000cc2:	e6e7      	b.n	8000a94 <__aeabi_dadd+0x39c>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	d100      	bne.n	8000cca <__aeabi_dadd+0x5d2>
 8000cc8:	e72d      	b.n	8000b26 <__aeabi_dadd+0x42e>
 8000cca:	4663      	mov	r3, ip
 8000ccc:	08d8      	lsrs	r0, r3, #3
 8000cce:	4653      	mov	r3, sl
 8000cd0:	075a      	lsls	r2, r3, #29
 8000cd2:	000e      	movs	r6, r1
 8000cd4:	4302      	orrs	r2, r0
 8000cd6:	08dc      	lsrs	r4, r3, #3
 8000cd8:	e6cc      	b.n	8000a74 <__aeabi_dadd+0x37c>
 8000cda:	4663      	mov	r3, ip
 8000cdc:	1a1d      	subs	r5, r3, r0
 8000cde:	45ac      	cmp	ip, r5
 8000ce0:	4192      	sbcs	r2, r2
 8000ce2:	4653      	mov	r3, sl
 8000ce4:	4252      	negs	r2, r2
 8000ce6:	1b1c      	subs	r4, r3, r4
 8000ce8:	000e      	movs	r6, r1
 8000cea:	4688      	mov	r8, r1
 8000cec:	1aa4      	subs	r4, r4, r2
 8000cee:	3701      	adds	r7, #1
 8000cf0:	e555      	b.n	800079e <__aeabi_dadd+0xa6>
 8000cf2:	4663      	mov	r3, ip
 8000cf4:	08d9      	lsrs	r1, r3, #3
 8000cf6:	4653      	mov	r3, sl
 8000cf8:	075a      	lsls	r2, r3, #29
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	08dc      	lsrs	r4, r3, #3
 8000cfe:	e6c9      	b.n	8000a94 <__aeabi_dadd+0x39c>
 8000d00:	4660      	mov	r0, ip
 8000d02:	4654      	mov	r4, sl
 8000d04:	e6d4      	b.n	8000ab0 <__aeabi_dadd+0x3b8>
 8000d06:	08c0      	lsrs	r0, r0, #3
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	d100      	bne.n	8000d0e <__aeabi_dadd+0x616>
 8000d0c:	e6bf      	b.n	8000a8e <__aeabi_dadd+0x396>
 8000d0e:	0762      	lsls	r2, r4, #29
 8000d10:	4310      	orrs	r0, r2
 8000d12:	2280      	movs	r2, #128	@ 0x80
 8000d14:	08e4      	lsrs	r4, r4, #3
 8000d16:	0312      	lsls	r2, r2, #12
 8000d18:	4214      	tst	r4, r2
 8000d1a:	d0cd      	beq.n	8000cb8 <__aeabi_dadd+0x5c0>
 8000d1c:	08dd      	lsrs	r5, r3, #3
 8000d1e:	4215      	tst	r5, r2
 8000d20:	d1ca      	bne.n	8000cb8 <__aeabi_dadd+0x5c0>
 8000d22:	4663      	mov	r3, ip
 8000d24:	08d8      	lsrs	r0, r3, #3
 8000d26:	4653      	mov	r3, sl
 8000d28:	075b      	lsls	r3, r3, #29
 8000d2a:	000e      	movs	r6, r1
 8000d2c:	002c      	movs	r4, r5
 8000d2e:	4318      	orrs	r0, r3
 8000d30:	e7c2      	b.n	8000cb8 <__aeabi_dadd+0x5c0>
 8000d32:	4663      	mov	r3, ip
 8000d34:	08d9      	lsrs	r1, r3, #3
 8000d36:	4653      	mov	r3, sl
 8000d38:	075a      	lsls	r2, r3, #29
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	08dc      	lsrs	r4, r3, #3
 8000d3e:	e699      	b.n	8000a74 <__aeabi_dadd+0x37c>
 8000d40:	4663      	mov	r3, ip
 8000d42:	08d8      	lsrs	r0, r3, #3
 8000d44:	4653      	mov	r3, sl
 8000d46:	075a      	lsls	r2, r3, #29
 8000d48:	000e      	movs	r6, r1
 8000d4a:	4302      	orrs	r2, r0
 8000d4c:	08dc      	lsrs	r4, r3, #3
 8000d4e:	e6a1      	b.n	8000a94 <__aeabi_dadd+0x39c>
 8000d50:	0011      	movs	r1, r2
 8000d52:	0027      	movs	r7, r4
 8000d54:	3920      	subs	r1, #32
 8000d56:	40cf      	lsrs	r7, r1
 8000d58:	2a20      	cmp	r2, #32
 8000d5a:	d003      	beq.n	8000d64 <__aeabi_dadd+0x66c>
 8000d5c:	2140      	movs	r1, #64	@ 0x40
 8000d5e:	1a8a      	subs	r2, r1, r2
 8000d60:	4094      	lsls	r4, r2
 8000d62:	4320      	orrs	r0, r4
 8000d64:	1e42      	subs	r2, r0, #1
 8000d66:	4190      	sbcs	r0, r2
 8000d68:	0005      	movs	r5, r0
 8000d6a:	433d      	orrs	r5, r7
 8000d6c:	e651      	b.n	8000a12 <__aeabi_dadd+0x31a>
 8000d6e:	000c      	movs	r4, r1
 8000d70:	2500      	movs	r5, #0
 8000d72:	2200      	movs	r2, #0
 8000d74:	e558      	b.n	8000828 <__aeabi_dadd+0x130>
 8000d76:	4460      	add	r0, ip
 8000d78:	4560      	cmp	r0, ip
 8000d7a:	4192      	sbcs	r2, r2
 8000d7c:	4454      	add	r4, sl
 8000d7e:	4252      	negs	r2, r2
 8000d80:	0005      	movs	r5, r0
 8000d82:	18a4      	adds	r4, r4, r2
 8000d84:	e73a      	b.n	8000bfc <__aeabi_dadd+0x504>
 8000d86:	4653      	mov	r3, sl
 8000d88:	075a      	lsls	r2, r3, #29
 8000d8a:	4663      	mov	r3, ip
 8000d8c:	08d9      	lsrs	r1, r3, #3
 8000d8e:	4653      	mov	r3, sl
 8000d90:	430a      	orrs	r2, r1
 8000d92:	08dc      	lsrs	r4, r3, #3
 8000d94:	e67e      	b.n	8000a94 <__aeabi_dadd+0x39c>
 8000d96:	001a      	movs	r2, r3
 8000d98:	001c      	movs	r4, r3
 8000d9a:	432a      	orrs	r2, r5
 8000d9c:	d000      	beq.n	8000da0 <__aeabi_dadd+0x6a8>
 8000d9e:	e6ab      	b.n	8000af8 <__aeabi_dadd+0x400>
 8000da0:	e6c1      	b.n	8000b26 <__aeabi_dadd+0x42e>
 8000da2:	2120      	movs	r1, #32
 8000da4:	2500      	movs	r5, #0
 8000da6:	1a09      	subs	r1, r1, r0
 8000da8:	e519      	b.n	80007de <__aeabi_dadd+0xe6>
 8000daa:	2200      	movs	r2, #0
 8000dac:	2500      	movs	r5, #0
 8000dae:	4c01      	ldr	r4, [pc, #4]	@ (8000db4 <__aeabi_dadd+0x6bc>)
 8000db0:	e53a      	b.n	8000828 <__aeabi_dadd+0x130>
 8000db2:	46c0      	nop			@ (mov r8, r8)
 8000db4:	000007ff 	.word	0x000007ff
 8000db8:	ff7fffff 	.word	0xff7fffff
 8000dbc:	000007fe 	.word	0x000007fe

08000dc0 <__aeabi_ddiv>:
 8000dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dc2:	46de      	mov	lr, fp
 8000dc4:	4645      	mov	r5, r8
 8000dc6:	4657      	mov	r7, sl
 8000dc8:	464e      	mov	r6, r9
 8000dca:	b5e0      	push	{r5, r6, r7, lr}
 8000dcc:	b087      	sub	sp, #28
 8000dce:	9200      	str	r2, [sp, #0]
 8000dd0:	9301      	str	r3, [sp, #4]
 8000dd2:	030b      	lsls	r3, r1, #12
 8000dd4:	0b1b      	lsrs	r3, r3, #12
 8000dd6:	469b      	mov	fp, r3
 8000dd8:	0fca      	lsrs	r2, r1, #31
 8000dda:	004b      	lsls	r3, r1, #1
 8000ddc:	0004      	movs	r4, r0
 8000dde:	4680      	mov	r8, r0
 8000de0:	0d5b      	lsrs	r3, r3, #21
 8000de2:	9202      	str	r2, [sp, #8]
 8000de4:	d100      	bne.n	8000de8 <__aeabi_ddiv+0x28>
 8000de6:	e16a      	b.n	80010be <__aeabi_ddiv+0x2fe>
 8000de8:	4ad4      	ldr	r2, [pc, #848]	@ (800113c <__aeabi_ddiv+0x37c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d100      	bne.n	8000df0 <__aeabi_ddiv+0x30>
 8000dee:	e18c      	b.n	800110a <__aeabi_ddiv+0x34a>
 8000df0:	4659      	mov	r1, fp
 8000df2:	0f42      	lsrs	r2, r0, #29
 8000df4:	00c9      	lsls	r1, r1, #3
 8000df6:	430a      	orrs	r2, r1
 8000df8:	2180      	movs	r1, #128	@ 0x80
 8000dfa:	0409      	lsls	r1, r1, #16
 8000dfc:	4311      	orrs	r1, r2
 8000dfe:	00c2      	lsls	r2, r0, #3
 8000e00:	4690      	mov	r8, r2
 8000e02:	4acf      	ldr	r2, [pc, #828]	@ (8001140 <__aeabi_ddiv+0x380>)
 8000e04:	4689      	mov	r9, r1
 8000e06:	4692      	mov	sl, r2
 8000e08:	449a      	add	sl, r3
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	2400      	movs	r4, #0
 8000e0e:	9303      	str	r3, [sp, #12]
 8000e10:	9e00      	ldr	r6, [sp, #0]
 8000e12:	9f01      	ldr	r7, [sp, #4]
 8000e14:	033b      	lsls	r3, r7, #12
 8000e16:	0b1b      	lsrs	r3, r3, #12
 8000e18:	469b      	mov	fp, r3
 8000e1a:	007b      	lsls	r3, r7, #1
 8000e1c:	0030      	movs	r0, r6
 8000e1e:	0d5b      	lsrs	r3, r3, #21
 8000e20:	0ffd      	lsrs	r5, r7, #31
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d100      	bne.n	8000e28 <__aeabi_ddiv+0x68>
 8000e26:	e128      	b.n	800107a <__aeabi_ddiv+0x2ba>
 8000e28:	4ac4      	ldr	r2, [pc, #784]	@ (800113c <__aeabi_ddiv+0x37c>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_ddiv+0x70>
 8000e2e:	e177      	b.n	8001120 <__aeabi_ddiv+0x360>
 8000e30:	4659      	mov	r1, fp
 8000e32:	0f72      	lsrs	r2, r6, #29
 8000e34:	00c9      	lsls	r1, r1, #3
 8000e36:	430a      	orrs	r2, r1
 8000e38:	2180      	movs	r1, #128	@ 0x80
 8000e3a:	0409      	lsls	r1, r1, #16
 8000e3c:	4311      	orrs	r1, r2
 8000e3e:	468b      	mov	fp, r1
 8000e40:	49bf      	ldr	r1, [pc, #764]	@ (8001140 <__aeabi_ddiv+0x380>)
 8000e42:	00f2      	lsls	r2, r6, #3
 8000e44:	468c      	mov	ip, r1
 8000e46:	4651      	mov	r1, sl
 8000e48:	4463      	add	r3, ip
 8000e4a:	1acb      	subs	r3, r1, r3
 8000e4c:	469a      	mov	sl, r3
 8000e4e:	2300      	movs	r3, #0
 8000e50:	9e02      	ldr	r6, [sp, #8]
 8000e52:	406e      	eors	r6, r5
 8000e54:	2c0f      	cmp	r4, #15
 8000e56:	d827      	bhi.n	8000ea8 <__aeabi_ddiv+0xe8>
 8000e58:	49ba      	ldr	r1, [pc, #744]	@ (8001144 <__aeabi_ddiv+0x384>)
 8000e5a:	00a4      	lsls	r4, r4, #2
 8000e5c:	5909      	ldr	r1, [r1, r4]
 8000e5e:	468f      	mov	pc, r1
 8000e60:	46cb      	mov	fp, r9
 8000e62:	4642      	mov	r2, r8
 8000e64:	9e02      	ldr	r6, [sp, #8]
 8000e66:	9b03      	ldr	r3, [sp, #12]
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d016      	beq.n	8000e9a <__aeabi_ddiv+0xda>
 8000e6c:	2b03      	cmp	r3, #3
 8000e6e:	d100      	bne.n	8000e72 <__aeabi_ddiv+0xb2>
 8000e70:	e2a6      	b.n	80013c0 <__aeabi_ddiv+0x600>
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d000      	beq.n	8000e78 <__aeabi_ddiv+0xb8>
 8000e76:	e0df      	b.n	8001038 <__aeabi_ddiv+0x278>
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	2400      	movs	r4, #0
 8000e7e:	4690      	mov	r8, r2
 8000e80:	051b      	lsls	r3, r3, #20
 8000e82:	4323      	orrs	r3, r4
 8000e84:	07f6      	lsls	r6, r6, #31
 8000e86:	4333      	orrs	r3, r6
 8000e88:	4640      	mov	r0, r8
 8000e8a:	0019      	movs	r1, r3
 8000e8c:	b007      	add	sp, #28
 8000e8e:	bcf0      	pop	{r4, r5, r6, r7}
 8000e90:	46bb      	mov	fp, r7
 8000e92:	46b2      	mov	sl, r6
 8000e94:	46a9      	mov	r9, r5
 8000e96:	46a0      	mov	r8, r4
 8000e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2400      	movs	r4, #0
 8000e9e:	4690      	mov	r8, r2
 8000ea0:	4ba6      	ldr	r3, [pc, #664]	@ (800113c <__aeabi_ddiv+0x37c>)
 8000ea2:	e7ed      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 8000ea4:	002e      	movs	r6, r5
 8000ea6:	e7df      	b.n	8000e68 <__aeabi_ddiv+0xa8>
 8000ea8:	45cb      	cmp	fp, r9
 8000eaa:	d200      	bcs.n	8000eae <__aeabi_ddiv+0xee>
 8000eac:	e1d4      	b.n	8001258 <__aeabi_ddiv+0x498>
 8000eae:	d100      	bne.n	8000eb2 <__aeabi_ddiv+0xf2>
 8000eb0:	e1cf      	b.n	8001252 <__aeabi_ddiv+0x492>
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	425b      	negs	r3, r3
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	4644      	mov	r4, r8
 8000eba:	4648      	mov	r0, r9
 8000ebc:	2700      	movs	r7, #0
 8000ebe:	44e2      	add	sl, ip
 8000ec0:	465b      	mov	r3, fp
 8000ec2:	0e15      	lsrs	r5, r2, #24
 8000ec4:	021b      	lsls	r3, r3, #8
 8000ec6:	431d      	orrs	r5, r3
 8000ec8:	0c19      	lsrs	r1, r3, #16
 8000eca:	042b      	lsls	r3, r5, #16
 8000ecc:	0212      	lsls	r2, r2, #8
 8000ece:	9500      	str	r5, [sp, #0]
 8000ed0:	0c1d      	lsrs	r5, r3, #16
 8000ed2:	4691      	mov	r9, r2
 8000ed4:	9102      	str	r1, [sp, #8]
 8000ed6:	9503      	str	r5, [sp, #12]
 8000ed8:	f7ff f9b8 	bl	800024c <__aeabi_uidivmod>
 8000edc:	0002      	movs	r2, r0
 8000ede:	436a      	muls	r2, r5
 8000ee0:	040b      	lsls	r3, r1, #16
 8000ee2:	0c21      	lsrs	r1, r4, #16
 8000ee4:	4680      	mov	r8, r0
 8000ee6:	4319      	orrs	r1, r3
 8000ee8:	428a      	cmp	r2, r1
 8000eea:	d909      	bls.n	8000f00 <__aeabi_ddiv+0x140>
 8000eec:	9d00      	ldr	r5, [sp, #0]
 8000eee:	2301      	movs	r3, #1
 8000ef0:	46ac      	mov	ip, r5
 8000ef2:	425b      	negs	r3, r3
 8000ef4:	4461      	add	r1, ip
 8000ef6:	469c      	mov	ip, r3
 8000ef8:	44e0      	add	r8, ip
 8000efa:	428d      	cmp	r5, r1
 8000efc:	d800      	bhi.n	8000f00 <__aeabi_ddiv+0x140>
 8000efe:	e1fb      	b.n	80012f8 <__aeabi_ddiv+0x538>
 8000f00:	1a88      	subs	r0, r1, r2
 8000f02:	9902      	ldr	r1, [sp, #8]
 8000f04:	f7ff f9a2 	bl	800024c <__aeabi_uidivmod>
 8000f08:	9a03      	ldr	r2, [sp, #12]
 8000f0a:	0424      	lsls	r4, r4, #16
 8000f0c:	4342      	muls	r2, r0
 8000f0e:	0409      	lsls	r1, r1, #16
 8000f10:	0c24      	lsrs	r4, r4, #16
 8000f12:	0003      	movs	r3, r0
 8000f14:	430c      	orrs	r4, r1
 8000f16:	42a2      	cmp	r2, r4
 8000f18:	d906      	bls.n	8000f28 <__aeabi_ddiv+0x168>
 8000f1a:	9900      	ldr	r1, [sp, #0]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	468c      	mov	ip, r1
 8000f20:	4464      	add	r4, ip
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	d800      	bhi.n	8000f28 <__aeabi_ddiv+0x168>
 8000f26:	e1e1      	b.n	80012ec <__aeabi_ddiv+0x52c>
 8000f28:	1aa0      	subs	r0, r4, r2
 8000f2a:	4642      	mov	r2, r8
 8000f2c:	0412      	lsls	r2, r2, #16
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	4693      	mov	fp, r2
 8000f32:	464b      	mov	r3, r9
 8000f34:	4659      	mov	r1, fp
 8000f36:	0c1b      	lsrs	r3, r3, #16
 8000f38:	001d      	movs	r5, r3
 8000f3a:	9304      	str	r3, [sp, #16]
 8000f3c:	040b      	lsls	r3, r1, #16
 8000f3e:	4649      	mov	r1, r9
 8000f40:	0409      	lsls	r1, r1, #16
 8000f42:	0c09      	lsrs	r1, r1, #16
 8000f44:	000c      	movs	r4, r1
 8000f46:	0c1b      	lsrs	r3, r3, #16
 8000f48:	435c      	muls	r4, r3
 8000f4a:	0c12      	lsrs	r2, r2, #16
 8000f4c:	436b      	muls	r3, r5
 8000f4e:	4688      	mov	r8, r1
 8000f50:	4351      	muls	r1, r2
 8000f52:	436a      	muls	r2, r5
 8000f54:	0c25      	lsrs	r5, r4, #16
 8000f56:	46ac      	mov	ip, r5
 8000f58:	185b      	adds	r3, r3, r1
 8000f5a:	4463      	add	r3, ip
 8000f5c:	4299      	cmp	r1, r3
 8000f5e:	d903      	bls.n	8000f68 <__aeabi_ddiv+0x1a8>
 8000f60:	2180      	movs	r1, #128	@ 0x80
 8000f62:	0249      	lsls	r1, r1, #9
 8000f64:	468c      	mov	ip, r1
 8000f66:	4462      	add	r2, ip
 8000f68:	0c19      	lsrs	r1, r3, #16
 8000f6a:	0424      	lsls	r4, r4, #16
 8000f6c:	041b      	lsls	r3, r3, #16
 8000f6e:	0c24      	lsrs	r4, r4, #16
 8000f70:	188a      	adds	r2, r1, r2
 8000f72:	191c      	adds	r4, r3, r4
 8000f74:	4290      	cmp	r0, r2
 8000f76:	d302      	bcc.n	8000f7e <__aeabi_ddiv+0x1be>
 8000f78:	d116      	bne.n	8000fa8 <__aeabi_ddiv+0x1e8>
 8000f7a:	42a7      	cmp	r7, r4
 8000f7c:	d214      	bcs.n	8000fa8 <__aeabi_ddiv+0x1e8>
 8000f7e:	465b      	mov	r3, fp
 8000f80:	9d00      	ldr	r5, [sp, #0]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	444f      	add	r7, r9
 8000f86:	9305      	str	r3, [sp, #20]
 8000f88:	454f      	cmp	r7, r9
 8000f8a:	419b      	sbcs	r3, r3
 8000f8c:	46ac      	mov	ip, r5
 8000f8e:	425b      	negs	r3, r3
 8000f90:	4463      	add	r3, ip
 8000f92:	18c0      	adds	r0, r0, r3
 8000f94:	4285      	cmp	r5, r0
 8000f96:	d300      	bcc.n	8000f9a <__aeabi_ddiv+0x1da>
 8000f98:	e1a1      	b.n	80012de <__aeabi_ddiv+0x51e>
 8000f9a:	4282      	cmp	r2, r0
 8000f9c:	d900      	bls.n	8000fa0 <__aeabi_ddiv+0x1e0>
 8000f9e:	e1f6      	b.n	800138e <__aeabi_ddiv+0x5ce>
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_ddiv+0x1e4>
 8000fa2:	e1f1      	b.n	8001388 <__aeabi_ddiv+0x5c8>
 8000fa4:	9b05      	ldr	r3, [sp, #20]
 8000fa6:	469b      	mov	fp, r3
 8000fa8:	1b3c      	subs	r4, r7, r4
 8000faa:	42a7      	cmp	r7, r4
 8000fac:	41bf      	sbcs	r7, r7
 8000fae:	9d00      	ldr	r5, [sp, #0]
 8000fb0:	1a80      	subs	r0, r0, r2
 8000fb2:	427f      	negs	r7, r7
 8000fb4:	1bc0      	subs	r0, r0, r7
 8000fb6:	4285      	cmp	r5, r0
 8000fb8:	d100      	bne.n	8000fbc <__aeabi_ddiv+0x1fc>
 8000fba:	e1d0      	b.n	800135e <__aeabi_ddiv+0x59e>
 8000fbc:	9902      	ldr	r1, [sp, #8]
 8000fbe:	f7ff f945 	bl	800024c <__aeabi_uidivmod>
 8000fc2:	9a03      	ldr	r2, [sp, #12]
 8000fc4:	040b      	lsls	r3, r1, #16
 8000fc6:	4342      	muls	r2, r0
 8000fc8:	0c21      	lsrs	r1, r4, #16
 8000fca:	0007      	movs	r7, r0
 8000fcc:	4319      	orrs	r1, r3
 8000fce:	428a      	cmp	r2, r1
 8000fd0:	d900      	bls.n	8000fd4 <__aeabi_ddiv+0x214>
 8000fd2:	e178      	b.n	80012c6 <__aeabi_ddiv+0x506>
 8000fd4:	1a88      	subs	r0, r1, r2
 8000fd6:	9902      	ldr	r1, [sp, #8]
 8000fd8:	f7ff f938 	bl	800024c <__aeabi_uidivmod>
 8000fdc:	9a03      	ldr	r2, [sp, #12]
 8000fde:	0424      	lsls	r4, r4, #16
 8000fe0:	4342      	muls	r2, r0
 8000fe2:	0409      	lsls	r1, r1, #16
 8000fe4:	0c24      	lsrs	r4, r4, #16
 8000fe6:	0003      	movs	r3, r0
 8000fe8:	430c      	orrs	r4, r1
 8000fea:	42a2      	cmp	r2, r4
 8000fec:	d900      	bls.n	8000ff0 <__aeabi_ddiv+0x230>
 8000fee:	e15d      	b.n	80012ac <__aeabi_ddiv+0x4ec>
 8000ff0:	4641      	mov	r1, r8
 8000ff2:	1aa4      	subs	r4, r4, r2
 8000ff4:	043a      	lsls	r2, r7, #16
 8000ff6:	431a      	orrs	r2, r3
 8000ff8:	9d04      	ldr	r5, [sp, #16]
 8000ffa:	0413      	lsls	r3, r2, #16
 8000ffc:	0c1b      	lsrs	r3, r3, #16
 8000ffe:	4359      	muls	r1, r3
 8001000:	4647      	mov	r7, r8
 8001002:	436b      	muls	r3, r5
 8001004:	469c      	mov	ip, r3
 8001006:	0c10      	lsrs	r0, r2, #16
 8001008:	4347      	muls	r7, r0
 800100a:	0c0b      	lsrs	r3, r1, #16
 800100c:	44bc      	add	ip, r7
 800100e:	4463      	add	r3, ip
 8001010:	4368      	muls	r0, r5
 8001012:	429f      	cmp	r7, r3
 8001014:	d903      	bls.n	800101e <__aeabi_ddiv+0x25e>
 8001016:	2580      	movs	r5, #128	@ 0x80
 8001018:	026d      	lsls	r5, r5, #9
 800101a:	46ac      	mov	ip, r5
 800101c:	4460      	add	r0, ip
 800101e:	0c1f      	lsrs	r7, r3, #16
 8001020:	0409      	lsls	r1, r1, #16
 8001022:	041b      	lsls	r3, r3, #16
 8001024:	0c09      	lsrs	r1, r1, #16
 8001026:	183f      	adds	r7, r7, r0
 8001028:	185b      	adds	r3, r3, r1
 800102a:	42bc      	cmp	r4, r7
 800102c:	d200      	bcs.n	8001030 <__aeabi_ddiv+0x270>
 800102e:	e102      	b.n	8001236 <__aeabi_ddiv+0x476>
 8001030:	d100      	bne.n	8001034 <__aeabi_ddiv+0x274>
 8001032:	e0fd      	b.n	8001230 <__aeabi_ddiv+0x470>
 8001034:	2301      	movs	r3, #1
 8001036:	431a      	orrs	r2, r3
 8001038:	4b43      	ldr	r3, [pc, #268]	@ (8001148 <__aeabi_ddiv+0x388>)
 800103a:	4453      	add	r3, sl
 800103c:	2b00      	cmp	r3, #0
 800103e:	dc00      	bgt.n	8001042 <__aeabi_ddiv+0x282>
 8001040:	e0ae      	b.n	80011a0 <__aeabi_ddiv+0x3e0>
 8001042:	0751      	lsls	r1, r2, #29
 8001044:	d000      	beq.n	8001048 <__aeabi_ddiv+0x288>
 8001046:	e198      	b.n	800137a <__aeabi_ddiv+0x5ba>
 8001048:	4659      	mov	r1, fp
 800104a:	01c9      	lsls	r1, r1, #7
 800104c:	d506      	bpl.n	800105c <__aeabi_ddiv+0x29c>
 800104e:	4659      	mov	r1, fp
 8001050:	4b3e      	ldr	r3, [pc, #248]	@ (800114c <__aeabi_ddiv+0x38c>)
 8001052:	4019      	ands	r1, r3
 8001054:	2380      	movs	r3, #128	@ 0x80
 8001056:	468b      	mov	fp, r1
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	4453      	add	r3, sl
 800105c:	493c      	ldr	r1, [pc, #240]	@ (8001150 <__aeabi_ddiv+0x390>)
 800105e:	428b      	cmp	r3, r1
 8001060:	dd00      	ble.n	8001064 <__aeabi_ddiv+0x2a4>
 8001062:	e71a      	b.n	8000e9a <__aeabi_ddiv+0xda>
 8001064:	4659      	mov	r1, fp
 8001066:	08d2      	lsrs	r2, r2, #3
 8001068:	0749      	lsls	r1, r1, #29
 800106a:	4311      	orrs	r1, r2
 800106c:	465a      	mov	r2, fp
 800106e:	055b      	lsls	r3, r3, #21
 8001070:	0254      	lsls	r4, r2, #9
 8001072:	4688      	mov	r8, r1
 8001074:	0b24      	lsrs	r4, r4, #12
 8001076:	0d5b      	lsrs	r3, r3, #21
 8001078:	e702      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 800107a:	465a      	mov	r2, fp
 800107c:	9b00      	ldr	r3, [sp, #0]
 800107e:	431a      	orrs	r2, r3
 8001080:	d100      	bne.n	8001084 <__aeabi_ddiv+0x2c4>
 8001082:	e07e      	b.n	8001182 <__aeabi_ddiv+0x3c2>
 8001084:	465b      	mov	r3, fp
 8001086:	2b00      	cmp	r3, #0
 8001088:	d100      	bne.n	800108c <__aeabi_ddiv+0x2cc>
 800108a:	e100      	b.n	800128e <__aeabi_ddiv+0x4ce>
 800108c:	4658      	mov	r0, fp
 800108e:	f7ff fa0b 	bl	80004a8 <__clzsi2>
 8001092:	0002      	movs	r2, r0
 8001094:	0003      	movs	r3, r0
 8001096:	3a0b      	subs	r2, #11
 8001098:	271d      	movs	r7, #29
 800109a:	9e00      	ldr	r6, [sp, #0]
 800109c:	1aba      	subs	r2, r7, r2
 800109e:	0019      	movs	r1, r3
 80010a0:	4658      	mov	r0, fp
 80010a2:	40d6      	lsrs	r6, r2
 80010a4:	3908      	subs	r1, #8
 80010a6:	4088      	lsls	r0, r1
 80010a8:	0032      	movs	r2, r6
 80010aa:	4302      	orrs	r2, r0
 80010ac:	4693      	mov	fp, r2
 80010ae:	9a00      	ldr	r2, [sp, #0]
 80010b0:	408a      	lsls	r2, r1
 80010b2:	4928      	ldr	r1, [pc, #160]	@ (8001154 <__aeabi_ddiv+0x394>)
 80010b4:	4453      	add	r3, sl
 80010b6:	468a      	mov	sl, r1
 80010b8:	449a      	add	sl, r3
 80010ba:	2300      	movs	r3, #0
 80010bc:	e6c8      	b.n	8000e50 <__aeabi_ddiv+0x90>
 80010be:	465b      	mov	r3, fp
 80010c0:	4303      	orrs	r3, r0
 80010c2:	4699      	mov	r9, r3
 80010c4:	d056      	beq.n	8001174 <__aeabi_ddiv+0x3b4>
 80010c6:	465b      	mov	r3, fp
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d100      	bne.n	80010ce <__aeabi_ddiv+0x30e>
 80010cc:	e0cd      	b.n	800126a <__aeabi_ddiv+0x4aa>
 80010ce:	4658      	mov	r0, fp
 80010d0:	f7ff f9ea 	bl	80004a8 <__clzsi2>
 80010d4:	230b      	movs	r3, #11
 80010d6:	425b      	negs	r3, r3
 80010d8:	469c      	mov	ip, r3
 80010da:	0002      	movs	r2, r0
 80010dc:	4484      	add	ip, r0
 80010de:	4666      	mov	r6, ip
 80010e0:	231d      	movs	r3, #29
 80010e2:	1b9b      	subs	r3, r3, r6
 80010e4:	0026      	movs	r6, r4
 80010e6:	0011      	movs	r1, r2
 80010e8:	4658      	mov	r0, fp
 80010ea:	40de      	lsrs	r6, r3
 80010ec:	3908      	subs	r1, #8
 80010ee:	4088      	lsls	r0, r1
 80010f0:	0033      	movs	r3, r6
 80010f2:	4303      	orrs	r3, r0
 80010f4:	4699      	mov	r9, r3
 80010f6:	0023      	movs	r3, r4
 80010f8:	408b      	lsls	r3, r1
 80010fa:	4698      	mov	r8, r3
 80010fc:	4b16      	ldr	r3, [pc, #88]	@ (8001158 <__aeabi_ddiv+0x398>)
 80010fe:	2400      	movs	r4, #0
 8001100:	1a9b      	subs	r3, r3, r2
 8001102:	469a      	mov	sl, r3
 8001104:	2300      	movs	r3, #0
 8001106:	9303      	str	r3, [sp, #12]
 8001108:	e682      	b.n	8000e10 <__aeabi_ddiv+0x50>
 800110a:	465a      	mov	r2, fp
 800110c:	4302      	orrs	r2, r0
 800110e:	4691      	mov	r9, r2
 8001110:	d12a      	bne.n	8001168 <__aeabi_ddiv+0x3a8>
 8001112:	2200      	movs	r2, #0
 8001114:	469a      	mov	sl, r3
 8001116:	2302      	movs	r3, #2
 8001118:	4690      	mov	r8, r2
 800111a:	2408      	movs	r4, #8
 800111c:	9303      	str	r3, [sp, #12]
 800111e:	e677      	b.n	8000e10 <__aeabi_ddiv+0x50>
 8001120:	465a      	mov	r2, fp
 8001122:	9b00      	ldr	r3, [sp, #0]
 8001124:	431a      	orrs	r2, r3
 8001126:	4b0d      	ldr	r3, [pc, #52]	@ (800115c <__aeabi_ddiv+0x39c>)
 8001128:	469c      	mov	ip, r3
 800112a:	44e2      	add	sl, ip
 800112c:	2a00      	cmp	r2, #0
 800112e:	d117      	bne.n	8001160 <__aeabi_ddiv+0x3a0>
 8001130:	2302      	movs	r3, #2
 8001132:	431c      	orrs	r4, r3
 8001134:	2300      	movs	r3, #0
 8001136:	469b      	mov	fp, r3
 8001138:	3302      	adds	r3, #2
 800113a:	e689      	b.n	8000e50 <__aeabi_ddiv+0x90>
 800113c:	000007ff 	.word	0x000007ff
 8001140:	fffffc01 	.word	0xfffffc01
 8001144:	0800c0b8 	.word	0x0800c0b8
 8001148:	000003ff 	.word	0x000003ff
 800114c:	feffffff 	.word	0xfeffffff
 8001150:	000007fe 	.word	0x000007fe
 8001154:	000003f3 	.word	0x000003f3
 8001158:	fffffc0d 	.word	0xfffffc0d
 800115c:	fffff801 	.word	0xfffff801
 8001160:	2303      	movs	r3, #3
 8001162:	0032      	movs	r2, r6
 8001164:	431c      	orrs	r4, r3
 8001166:	e673      	b.n	8000e50 <__aeabi_ddiv+0x90>
 8001168:	469a      	mov	sl, r3
 800116a:	2303      	movs	r3, #3
 800116c:	46d9      	mov	r9, fp
 800116e:	240c      	movs	r4, #12
 8001170:	9303      	str	r3, [sp, #12]
 8001172:	e64d      	b.n	8000e10 <__aeabi_ddiv+0x50>
 8001174:	2300      	movs	r3, #0
 8001176:	4698      	mov	r8, r3
 8001178:	469a      	mov	sl, r3
 800117a:	3301      	adds	r3, #1
 800117c:	2404      	movs	r4, #4
 800117e:	9303      	str	r3, [sp, #12]
 8001180:	e646      	b.n	8000e10 <__aeabi_ddiv+0x50>
 8001182:	2301      	movs	r3, #1
 8001184:	431c      	orrs	r4, r3
 8001186:	2300      	movs	r3, #0
 8001188:	469b      	mov	fp, r3
 800118a:	3301      	adds	r3, #1
 800118c:	e660      	b.n	8000e50 <__aeabi_ddiv+0x90>
 800118e:	2300      	movs	r3, #0
 8001190:	2480      	movs	r4, #128	@ 0x80
 8001192:	4698      	mov	r8, r3
 8001194:	2600      	movs	r6, #0
 8001196:	4b92      	ldr	r3, [pc, #584]	@ (80013e0 <__aeabi_ddiv+0x620>)
 8001198:	0324      	lsls	r4, r4, #12
 800119a:	e671      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 800119c:	2201      	movs	r2, #1
 800119e:	4252      	negs	r2, r2
 80011a0:	2101      	movs	r1, #1
 80011a2:	1ac9      	subs	r1, r1, r3
 80011a4:	2938      	cmp	r1, #56	@ 0x38
 80011a6:	dd00      	ble.n	80011aa <__aeabi_ddiv+0x3ea>
 80011a8:	e666      	b.n	8000e78 <__aeabi_ddiv+0xb8>
 80011aa:	291f      	cmp	r1, #31
 80011ac:	dc00      	bgt.n	80011b0 <__aeabi_ddiv+0x3f0>
 80011ae:	e0ab      	b.n	8001308 <__aeabi_ddiv+0x548>
 80011b0:	201f      	movs	r0, #31
 80011b2:	4240      	negs	r0, r0
 80011b4:	1ac3      	subs	r3, r0, r3
 80011b6:	4658      	mov	r0, fp
 80011b8:	40d8      	lsrs	r0, r3
 80011ba:	0003      	movs	r3, r0
 80011bc:	2920      	cmp	r1, #32
 80011be:	d004      	beq.n	80011ca <__aeabi_ddiv+0x40a>
 80011c0:	4658      	mov	r0, fp
 80011c2:	4988      	ldr	r1, [pc, #544]	@ (80013e4 <__aeabi_ddiv+0x624>)
 80011c4:	4451      	add	r1, sl
 80011c6:	4088      	lsls	r0, r1
 80011c8:	4302      	orrs	r2, r0
 80011ca:	1e51      	subs	r1, r2, #1
 80011cc:	418a      	sbcs	r2, r1
 80011ce:	431a      	orrs	r2, r3
 80011d0:	2307      	movs	r3, #7
 80011d2:	0019      	movs	r1, r3
 80011d4:	2400      	movs	r4, #0
 80011d6:	4011      	ands	r1, r2
 80011d8:	4213      	tst	r3, r2
 80011da:	d00c      	beq.n	80011f6 <__aeabi_ddiv+0x436>
 80011dc:	230f      	movs	r3, #15
 80011de:	4013      	ands	r3, r2
 80011e0:	2b04      	cmp	r3, #4
 80011e2:	d100      	bne.n	80011e6 <__aeabi_ddiv+0x426>
 80011e4:	e0f9      	b.n	80013da <__aeabi_ddiv+0x61a>
 80011e6:	1d11      	adds	r1, r2, #4
 80011e8:	4291      	cmp	r1, r2
 80011ea:	419b      	sbcs	r3, r3
 80011ec:	000a      	movs	r2, r1
 80011ee:	425b      	negs	r3, r3
 80011f0:	0759      	lsls	r1, r3, #29
 80011f2:	025b      	lsls	r3, r3, #9
 80011f4:	0b1c      	lsrs	r4, r3, #12
 80011f6:	08d2      	lsrs	r2, r2, #3
 80011f8:	430a      	orrs	r2, r1
 80011fa:	4690      	mov	r8, r2
 80011fc:	2300      	movs	r3, #0
 80011fe:	e63f      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 8001200:	2480      	movs	r4, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	0324      	lsls	r4, r4, #12
 8001206:	4223      	tst	r3, r4
 8001208:	d009      	beq.n	800121e <__aeabi_ddiv+0x45e>
 800120a:	465b      	mov	r3, fp
 800120c:	4223      	tst	r3, r4
 800120e:	d106      	bne.n	800121e <__aeabi_ddiv+0x45e>
 8001210:	431c      	orrs	r4, r3
 8001212:	0324      	lsls	r4, r4, #12
 8001214:	002e      	movs	r6, r5
 8001216:	4690      	mov	r8, r2
 8001218:	4b71      	ldr	r3, [pc, #452]	@ (80013e0 <__aeabi_ddiv+0x620>)
 800121a:	0b24      	lsrs	r4, r4, #12
 800121c:	e630      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 800121e:	2480      	movs	r4, #128	@ 0x80
 8001220:	464b      	mov	r3, r9
 8001222:	0324      	lsls	r4, r4, #12
 8001224:	431c      	orrs	r4, r3
 8001226:	0324      	lsls	r4, r4, #12
 8001228:	9e02      	ldr	r6, [sp, #8]
 800122a:	4b6d      	ldr	r3, [pc, #436]	@ (80013e0 <__aeabi_ddiv+0x620>)
 800122c:	0b24      	lsrs	r4, r4, #12
 800122e:	e627      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 8001230:	2b00      	cmp	r3, #0
 8001232:	d100      	bne.n	8001236 <__aeabi_ddiv+0x476>
 8001234:	e700      	b.n	8001038 <__aeabi_ddiv+0x278>
 8001236:	9800      	ldr	r0, [sp, #0]
 8001238:	1e51      	subs	r1, r2, #1
 800123a:	4684      	mov	ip, r0
 800123c:	4464      	add	r4, ip
 800123e:	4284      	cmp	r4, r0
 8001240:	d200      	bcs.n	8001244 <__aeabi_ddiv+0x484>
 8001242:	e084      	b.n	800134e <__aeabi_ddiv+0x58e>
 8001244:	42bc      	cmp	r4, r7
 8001246:	d200      	bcs.n	800124a <__aeabi_ddiv+0x48a>
 8001248:	e0ae      	b.n	80013a8 <__aeabi_ddiv+0x5e8>
 800124a:	d100      	bne.n	800124e <__aeabi_ddiv+0x48e>
 800124c:	e0c1      	b.n	80013d2 <__aeabi_ddiv+0x612>
 800124e:	000a      	movs	r2, r1
 8001250:	e6f0      	b.n	8001034 <__aeabi_ddiv+0x274>
 8001252:	4542      	cmp	r2, r8
 8001254:	d900      	bls.n	8001258 <__aeabi_ddiv+0x498>
 8001256:	e62c      	b.n	8000eb2 <__aeabi_ddiv+0xf2>
 8001258:	464b      	mov	r3, r9
 800125a:	07dc      	lsls	r4, r3, #31
 800125c:	0858      	lsrs	r0, r3, #1
 800125e:	4643      	mov	r3, r8
 8001260:	085b      	lsrs	r3, r3, #1
 8001262:	431c      	orrs	r4, r3
 8001264:	4643      	mov	r3, r8
 8001266:	07df      	lsls	r7, r3, #31
 8001268:	e62a      	b.n	8000ec0 <__aeabi_ddiv+0x100>
 800126a:	f7ff f91d 	bl	80004a8 <__clzsi2>
 800126e:	2315      	movs	r3, #21
 8001270:	469c      	mov	ip, r3
 8001272:	4484      	add	ip, r0
 8001274:	0002      	movs	r2, r0
 8001276:	4663      	mov	r3, ip
 8001278:	3220      	adds	r2, #32
 800127a:	2b1c      	cmp	r3, #28
 800127c:	dc00      	bgt.n	8001280 <__aeabi_ddiv+0x4c0>
 800127e:	e72e      	b.n	80010de <__aeabi_ddiv+0x31e>
 8001280:	0023      	movs	r3, r4
 8001282:	3808      	subs	r0, #8
 8001284:	4083      	lsls	r3, r0
 8001286:	4699      	mov	r9, r3
 8001288:	2300      	movs	r3, #0
 800128a:	4698      	mov	r8, r3
 800128c:	e736      	b.n	80010fc <__aeabi_ddiv+0x33c>
 800128e:	f7ff f90b 	bl	80004a8 <__clzsi2>
 8001292:	0002      	movs	r2, r0
 8001294:	0003      	movs	r3, r0
 8001296:	3215      	adds	r2, #21
 8001298:	3320      	adds	r3, #32
 800129a:	2a1c      	cmp	r2, #28
 800129c:	dc00      	bgt.n	80012a0 <__aeabi_ddiv+0x4e0>
 800129e:	e6fb      	b.n	8001098 <__aeabi_ddiv+0x2d8>
 80012a0:	9900      	ldr	r1, [sp, #0]
 80012a2:	3808      	subs	r0, #8
 80012a4:	4081      	lsls	r1, r0
 80012a6:	2200      	movs	r2, #0
 80012a8:	468b      	mov	fp, r1
 80012aa:	e702      	b.n	80010b2 <__aeabi_ddiv+0x2f2>
 80012ac:	9900      	ldr	r1, [sp, #0]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	468c      	mov	ip, r1
 80012b2:	4464      	add	r4, ip
 80012b4:	42a1      	cmp	r1, r4
 80012b6:	d900      	bls.n	80012ba <__aeabi_ddiv+0x4fa>
 80012b8:	e69a      	b.n	8000ff0 <__aeabi_ddiv+0x230>
 80012ba:	42a2      	cmp	r2, r4
 80012bc:	d800      	bhi.n	80012c0 <__aeabi_ddiv+0x500>
 80012be:	e697      	b.n	8000ff0 <__aeabi_ddiv+0x230>
 80012c0:	1e83      	subs	r3, r0, #2
 80012c2:	4464      	add	r4, ip
 80012c4:	e694      	b.n	8000ff0 <__aeabi_ddiv+0x230>
 80012c6:	46ac      	mov	ip, r5
 80012c8:	4461      	add	r1, ip
 80012ca:	3f01      	subs	r7, #1
 80012cc:	428d      	cmp	r5, r1
 80012ce:	d900      	bls.n	80012d2 <__aeabi_ddiv+0x512>
 80012d0:	e680      	b.n	8000fd4 <__aeabi_ddiv+0x214>
 80012d2:	428a      	cmp	r2, r1
 80012d4:	d800      	bhi.n	80012d8 <__aeabi_ddiv+0x518>
 80012d6:	e67d      	b.n	8000fd4 <__aeabi_ddiv+0x214>
 80012d8:	1e87      	subs	r7, r0, #2
 80012da:	4461      	add	r1, ip
 80012dc:	e67a      	b.n	8000fd4 <__aeabi_ddiv+0x214>
 80012de:	4285      	cmp	r5, r0
 80012e0:	d000      	beq.n	80012e4 <__aeabi_ddiv+0x524>
 80012e2:	e65f      	b.n	8000fa4 <__aeabi_ddiv+0x1e4>
 80012e4:	45b9      	cmp	r9, r7
 80012e6:	d900      	bls.n	80012ea <__aeabi_ddiv+0x52a>
 80012e8:	e65c      	b.n	8000fa4 <__aeabi_ddiv+0x1e4>
 80012ea:	e656      	b.n	8000f9a <__aeabi_ddiv+0x1da>
 80012ec:	42a2      	cmp	r2, r4
 80012ee:	d800      	bhi.n	80012f2 <__aeabi_ddiv+0x532>
 80012f0:	e61a      	b.n	8000f28 <__aeabi_ddiv+0x168>
 80012f2:	1e83      	subs	r3, r0, #2
 80012f4:	4464      	add	r4, ip
 80012f6:	e617      	b.n	8000f28 <__aeabi_ddiv+0x168>
 80012f8:	428a      	cmp	r2, r1
 80012fa:	d800      	bhi.n	80012fe <__aeabi_ddiv+0x53e>
 80012fc:	e600      	b.n	8000f00 <__aeabi_ddiv+0x140>
 80012fe:	46ac      	mov	ip, r5
 8001300:	1e83      	subs	r3, r0, #2
 8001302:	4698      	mov	r8, r3
 8001304:	4461      	add	r1, ip
 8001306:	e5fb      	b.n	8000f00 <__aeabi_ddiv+0x140>
 8001308:	4837      	ldr	r0, [pc, #220]	@ (80013e8 <__aeabi_ddiv+0x628>)
 800130a:	0014      	movs	r4, r2
 800130c:	4450      	add	r0, sl
 800130e:	4082      	lsls	r2, r0
 8001310:	465b      	mov	r3, fp
 8001312:	0017      	movs	r7, r2
 8001314:	4083      	lsls	r3, r0
 8001316:	40cc      	lsrs	r4, r1
 8001318:	1e7a      	subs	r2, r7, #1
 800131a:	4197      	sbcs	r7, r2
 800131c:	4323      	orrs	r3, r4
 800131e:	433b      	orrs	r3, r7
 8001320:	001a      	movs	r2, r3
 8001322:	465b      	mov	r3, fp
 8001324:	40cb      	lsrs	r3, r1
 8001326:	0751      	lsls	r1, r2, #29
 8001328:	d009      	beq.n	800133e <__aeabi_ddiv+0x57e>
 800132a:	210f      	movs	r1, #15
 800132c:	4011      	ands	r1, r2
 800132e:	2904      	cmp	r1, #4
 8001330:	d005      	beq.n	800133e <__aeabi_ddiv+0x57e>
 8001332:	1d11      	adds	r1, r2, #4
 8001334:	4291      	cmp	r1, r2
 8001336:	4192      	sbcs	r2, r2
 8001338:	4252      	negs	r2, r2
 800133a:	189b      	adds	r3, r3, r2
 800133c:	000a      	movs	r2, r1
 800133e:	0219      	lsls	r1, r3, #8
 8001340:	d400      	bmi.n	8001344 <__aeabi_ddiv+0x584>
 8001342:	e755      	b.n	80011f0 <__aeabi_ddiv+0x430>
 8001344:	2200      	movs	r2, #0
 8001346:	2301      	movs	r3, #1
 8001348:	2400      	movs	r4, #0
 800134a:	4690      	mov	r8, r2
 800134c:	e598      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 800134e:	000a      	movs	r2, r1
 8001350:	42bc      	cmp	r4, r7
 8001352:	d000      	beq.n	8001356 <__aeabi_ddiv+0x596>
 8001354:	e66e      	b.n	8001034 <__aeabi_ddiv+0x274>
 8001356:	454b      	cmp	r3, r9
 8001358:	d000      	beq.n	800135c <__aeabi_ddiv+0x59c>
 800135a:	e66b      	b.n	8001034 <__aeabi_ddiv+0x274>
 800135c:	e66c      	b.n	8001038 <__aeabi_ddiv+0x278>
 800135e:	4b23      	ldr	r3, [pc, #140]	@ (80013ec <__aeabi_ddiv+0x62c>)
 8001360:	4a23      	ldr	r2, [pc, #140]	@ (80013f0 <__aeabi_ddiv+0x630>)
 8001362:	4453      	add	r3, sl
 8001364:	4592      	cmp	sl, r2
 8001366:	da00      	bge.n	800136a <__aeabi_ddiv+0x5aa>
 8001368:	e718      	b.n	800119c <__aeabi_ddiv+0x3dc>
 800136a:	2101      	movs	r1, #1
 800136c:	4249      	negs	r1, r1
 800136e:	1d0a      	adds	r2, r1, #4
 8001370:	428a      	cmp	r2, r1
 8001372:	4189      	sbcs	r1, r1
 8001374:	4249      	negs	r1, r1
 8001376:	448b      	add	fp, r1
 8001378:	e666      	b.n	8001048 <__aeabi_ddiv+0x288>
 800137a:	210f      	movs	r1, #15
 800137c:	4011      	ands	r1, r2
 800137e:	2904      	cmp	r1, #4
 8001380:	d100      	bne.n	8001384 <__aeabi_ddiv+0x5c4>
 8001382:	e661      	b.n	8001048 <__aeabi_ddiv+0x288>
 8001384:	0011      	movs	r1, r2
 8001386:	e7f2      	b.n	800136e <__aeabi_ddiv+0x5ae>
 8001388:	42bc      	cmp	r4, r7
 800138a:	d800      	bhi.n	800138e <__aeabi_ddiv+0x5ce>
 800138c:	e60a      	b.n	8000fa4 <__aeabi_ddiv+0x1e4>
 800138e:	2302      	movs	r3, #2
 8001390:	425b      	negs	r3, r3
 8001392:	469c      	mov	ip, r3
 8001394:	9900      	ldr	r1, [sp, #0]
 8001396:	444f      	add	r7, r9
 8001398:	454f      	cmp	r7, r9
 800139a:	419b      	sbcs	r3, r3
 800139c:	44e3      	add	fp, ip
 800139e:	468c      	mov	ip, r1
 80013a0:	425b      	negs	r3, r3
 80013a2:	4463      	add	r3, ip
 80013a4:	18c0      	adds	r0, r0, r3
 80013a6:	e5ff      	b.n	8000fa8 <__aeabi_ddiv+0x1e8>
 80013a8:	4649      	mov	r1, r9
 80013aa:	9d00      	ldr	r5, [sp, #0]
 80013ac:	0048      	lsls	r0, r1, #1
 80013ae:	4548      	cmp	r0, r9
 80013b0:	4189      	sbcs	r1, r1
 80013b2:	46ac      	mov	ip, r5
 80013b4:	4249      	negs	r1, r1
 80013b6:	4461      	add	r1, ip
 80013b8:	4681      	mov	r9, r0
 80013ba:	3a02      	subs	r2, #2
 80013bc:	1864      	adds	r4, r4, r1
 80013be:	e7c7      	b.n	8001350 <__aeabi_ddiv+0x590>
 80013c0:	2480      	movs	r4, #128	@ 0x80
 80013c2:	465b      	mov	r3, fp
 80013c4:	0324      	lsls	r4, r4, #12
 80013c6:	431c      	orrs	r4, r3
 80013c8:	0324      	lsls	r4, r4, #12
 80013ca:	4690      	mov	r8, r2
 80013cc:	4b04      	ldr	r3, [pc, #16]	@ (80013e0 <__aeabi_ddiv+0x620>)
 80013ce:	0b24      	lsrs	r4, r4, #12
 80013d0:	e556      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 80013d2:	4599      	cmp	r9, r3
 80013d4:	d3e8      	bcc.n	80013a8 <__aeabi_ddiv+0x5e8>
 80013d6:	000a      	movs	r2, r1
 80013d8:	e7bd      	b.n	8001356 <__aeabi_ddiv+0x596>
 80013da:	2300      	movs	r3, #0
 80013dc:	e708      	b.n	80011f0 <__aeabi_ddiv+0x430>
 80013de:	46c0      	nop			@ (mov r8, r8)
 80013e0:	000007ff 	.word	0x000007ff
 80013e4:	0000043e 	.word	0x0000043e
 80013e8:	0000041e 	.word	0x0000041e
 80013ec:	000003ff 	.word	0x000003ff
 80013f0:	fffffc02 	.word	0xfffffc02

080013f4 <__eqdf2>:
 80013f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f6:	4657      	mov	r7, sl
 80013f8:	46de      	mov	lr, fp
 80013fa:	464e      	mov	r6, r9
 80013fc:	4645      	mov	r5, r8
 80013fe:	b5e0      	push	{r5, r6, r7, lr}
 8001400:	000d      	movs	r5, r1
 8001402:	0004      	movs	r4, r0
 8001404:	0fe8      	lsrs	r0, r5, #31
 8001406:	4683      	mov	fp, r0
 8001408:	0309      	lsls	r1, r1, #12
 800140a:	0fd8      	lsrs	r0, r3, #31
 800140c:	0b09      	lsrs	r1, r1, #12
 800140e:	4682      	mov	sl, r0
 8001410:	4819      	ldr	r0, [pc, #100]	@ (8001478 <__eqdf2+0x84>)
 8001412:	468c      	mov	ip, r1
 8001414:	031f      	lsls	r7, r3, #12
 8001416:	0069      	lsls	r1, r5, #1
 8001418:	005e      	lsls	r6, r3, #1
 800141a:	0d49      	lsrs	r1, r1, #21
 800141c:	0b3f      	lsrs	r7, r7, #12
 800141e:	0d76      	lsrs	r6, r6, #21
 8001420:	4281      	cmp	r1, r0
 8001422:	d018      	beq.n	8001456 <__eqdf2+0x62>
 8001424:	4286      	cmp	r6, r0
 8001426:	d00f      	beq.n	8001448 <__eqdf2+0x54>
 8001428:	2001      	movs	r0, #1
 800142a:	42b1      	cmp	r1, r6
 800142c:	d10d      	bne.n	800144a <__eqdf2+0x56>
 800142e:	45bc      	cmp	ip, r7
 8001430:	d10b      	bne.n	800144a <__eqdf2+0x56>
 8001432:	4294      	cmp	r4, r2
 8001434:	d109      	bne.n	800144a <__eqdf2+0x56>
 8001436:	45d3      	cmp	fp, sl
 8001438:	d01c      	beq.n	8001474 <__eqdf2+0x80>
 800143a:	2900      	cmp	r1, #0
 800143c:	d105      	bne.n	800144a <__eqdf2+0x56>
 800143e:	4660      	mov	r0, ip
 8001440:	4320      	orrs	r0, r4
 8001442:	1e43      	subs	r3, r0, #1
 8001444:	4198      	sbcs	r0, r3
 8001446:	e000      	b.n	800144a <__eqdf2+0x56>
 8001448:	2001      	movs	r0, #1
 800144a:	bcf0      	pop	{r4, r5, r6, r7}
 800144c:	46bb      	mov	fp, r7
 800144e:	46b2      	mov	sl, r6
 8001450:	46a9      	mov	r9, r5
 8001452:	46a0      	mov	r8, r4
 8001454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001456:	2001      	movs	r0, #1
 8001458:	428e      	cmp	r6, r1
 800145a:	d1f6      	bne.n	800144a <__eqdf2+0x56>
 800145c:	4661      	mov	r1, ip
 800145e:	4339      	orrs	r1, r7
 8001460:	000f      	movs	r7, r1
 8001462:	4317      	orrs	r7, r2
 8001464:	4327      	orrs	r7, r4
 8001466:	d1f0      	bne.n	800144a <__eqdf2+0x56>
 8001468:	465b      	mov	r3, fp
 800146a:	4652      	mov	r2, sl
 800146c:	1a98      	subs	r0, r3, r2
 800146e:	1e43      	subs	r3, r0, #1
 8001470:	4198      	sbcs	r0, r3
 8001472:	e7ea      	b.n	800144a <__eqdf2+0x56>
 8001474:	2000      	movs	r0, #0
 8001476:	e7e8      	b.n	800144a <__eqdf2+0x56>
 8001478:	000007ff 	.word	0x000007ff

0800147c <__gedf2>:
 800147c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147e:	4657      	mov	r7, sl
 8001480:	464e      	mov	r6, r9
 8001482:	4645      	mov	r5, r8
 8001484:	46de      	mov	lr, fp
 8001486:	b5e0      	push	{r5, r6, r7, lr}
 8001488:	000d      	movs	r5, r1
 800148a:	030f      	lsls	r7, r1, #12
 800148c:	0b39      	lsrs	r1, r7, #12
 800148e:	b083      	sub	sp, #12
 8001490:	0004      	movs	r4, r0
 8001492:	4680      	mov	r8, r0
 8001494:	9101      	str	r1, [sp, #4]
 8001496:	0058      	lsls	r0, r3, #1
 8001498:	0fe9      	lsrs	r1, r5, #31
 800149a:	4f31      	ldr	r7, [pc, #196]	@ (8001560 <__gedf2+0xe4>)
 800149c:	0d40      	lsrs	r0, r0, #21
 800149e:	468c      	mov	ip, r1
 80014a0:	006e      	lsls	r6, r5, #1
 80014a2:	0319      	lsls	r1, r3, #12
 80014a4:	4682      	mov	sl, r0
 80014a6:	4691      	mov	r9, r2
 80014a8:	0d76      	lsrs	r6, r6, #21
 80014aa:	0b09      	lsrs	r1, r1, #12
 80014ac:	0fd8      	lsrs	r0, r3, #31
 80014ae:	42be      	cmp	r6, r7
 80014b0:	d01f      	beq.n	80014f2 <__gedf2+0x76>
 80014b2:	45ba      	cmp	sl, r7
 80014b4:	d00f      	beq.n	80014d6 <__gedf2+0x5a>
 80014b6:	2e00      	cmp	r6, #0
 80014b8:	d12f      	bne.n	800151a <__gedf2+0x9e>
 80014ba:	4655      	mov	r5, sl
 80014bc:	9e01      	ldr	r6, [sp, #4]
 80014be:	4334      	orrs	r4, r6
 80014c0:	2d00      	cmp	r5, #0
 80014c2:	d127      	bne.n	8001514 <__gedf2+0x98>
 80014c4:	430a      	orrs	r2, r1
 80014c6:	d03a      	beq.n	800153e <__gedf2+0xc2>
 80014c8:	2c00      	cmp	r4, #0
 80014ca:	d145      	bne.n	8001558 <__gedf2+0xdc>
 80014cc:	2800      	cmp	r0, #0
 80014ce:	d11a      	bne.n	8001506 <__gedf2+0x8a>
 80014d0:	2001      	movs	r0, #1
 80014d2:	4240      	negs	r0, r0
 80014d4:	e017      	b.n	8001506 <__gedf2+0x8a>
 80014d6:	4311      	orrs	r1, r2
 80014d8:	d13b      	bne.n	8001552 <__gedf2+0xd6>
 80014da:	2e00      	cmp	r6, #0
 80014dc:	d102      	bne.n	80014e4 <__gedf2+0x68>
 80014de:	9f01      	ldr	r7, [sp, #4]
 80014e0:	4327      	orrs	r7, r4
 80014e2:	d0f3      	beq.n	80014cc <__gedf2+0x50>
 80014e4:	4584      	cmp	ip, r0
 80014e6:	d109      	bne.n	80014fc <__gedf2+0x80>
 80014e8:	4663      	mov	r3, ip
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f0      	beq.n	80014d0 <__gedf2+0x54>
 80014ee:	4660      	mov	r0, ip
 80014f0:	e009      	b.n	8001506 <__gedf2+0x8a>
 80014f2:	9f01      	ldr	r7, [sp, #4]
 80014f4:	4327      	orrs	r7, r4
 80014f6:	d12c      	bne.n	8001552 <__gedf2+0xd6>
 80014f8:	45b2      	cmp	sl, r6
 80014fa:	d024      	beq.n	8001546 <__gedf2+0xca>
 80014fc:	4663      	mov	r3, ip
 80014fe:	2002      	movs	r0, #2
 8001500:	3b01      	subs	r3, #1
 8001502:	4018      	ands	r0, r3
 8001504:	3801      	subs	r0, #1
 8001506:	b003      	add	sp, #12
 8001508:	bcf0      	pop	{r4, r5, r6, r7}
 800150a:	46bb      	mov	fp, r7
 800150c:	46b2      	mov	sl, r6
 800150e:	46a9      	mov	r9, r5
 8001510:	46a0      	mov	r8, r4
 8001512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001514:	2c00      	cmp	r4, #0
 8001516:	d0d9      	beq.n	80014cc <__gedf2+0x50>
 8001518:	e7e4      	b.n	80014e4 <__gedf2+0x68>
 800151a:	4654      	mov	r4, sl
 800151c:	2c00      	cmp	r4, #0
 800151e:	d0ed      	beq.n	80014fc <__gedf2+0x80>
 8001520:	4584      	cmp	ip, r0
 8001522:	d1eb      	bne.n	80014fc <__gedf2+0x80>
 8001524:	4556      	cmp	r6, sl
 8001526:	dce9      	bgt.n	80014fc <__gedf2+0x80>
 8001528:	dbde      	blt.n	80014e8 <__gedf2+0x6c>
 800152a:	9b01      	ldr	r3, [sp, #4]
 800152c:	428b      	cmp	r3, r1
 800152e:	d8e5      	bhi.n	80014fc <__gedf2+0x80>
 8001530:	d1da      	bne.n	80014e8 <__gedf2+0x6c>
 8001532:	45c8      	cmp	r8, r9
 8001534:	d8e2      	bhi.n	80014fc <__gedf2+0x80>
 8001536:	2000      	movs	r0, #0
 8001538:	45c8      	cmp	r8, r9
 800153a:	d2e4      	bcs.n	8001506 <__gedf2+0x8a>
 800153c:	e7d4      	b.n	80014e8 <__gedf2+0x6c>
 800153e:	2000      	movs	r0, #0
 8001540:	2c00      	cmp	r4, #0
 8001542:	d0e0      	beq.n	8001506 <__gedf2+0x8a>
 8001544:	e7da      	b.n	80014fc <__gedf2+0x80>
 8001546:	4311      	orrs	r1, r2
 8001548:	d103      	bne.n	8001552 <__gedf2+0xd6>
 800154a:	4584      	cmp	ip, r0
 800154c:	d1d6      	bne.n	80014fc <__gedf2+0x80>
 800154e:	2000      	movs	r0, #0
 8001550:	e7d9      	b.n	8001506 <__gedf2+0x8a>
 8001552:	2002      	movs	r0, #2
 8001554:	4240      	negs	r0, r0
 8001556:	e7d6      	b.n	8001506 <__gedf2+0x8a>
 8001558:	4584      	cmp	ip, r0
 800155a:	d0e6      	beq.n	800152a <__gedf2+0xae>
 800155c:	e7ce      	b.n	80014fc <__gedf2+0x80>
 800155e:	46c0      	nop			@ (mov r8, r8)
 8001560:	000007ff 	.word	0x000007ff

08001564 <__ledf2>:
 8001564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001566:	4657      	mov	r7, sl
 8001568:	464e      	mov	r6, r9
 800156a:	4645      	mov	r5, r8
 800156c:	46de      	mov	lr, fp
 800156e:	b5e0      	push	{r5, r6, r7, lr}
 8001570:	000d      	movs	r5, r1
 8001572:	030f      	lsls	r7, r1, #12
 8001574:	0004      	movs	r4, r0
 8001576:	4680      	mov	r8, r0
 8001578:	0fe8      	lsrs	r0, r5, #31
 800157a:	0b39      	lsrs	r1, r7, #12
 800157c:	4684      	mov	ip, r0
 800157e:	b083      	sub	sp, #12
 8001580:	0058      	lsls	r0, r3, #1
 8001582:	4f30      	ldr	r7, [pc, #192]	@ (8001644 <__ledf2+0xe0>)
 8001584:	0d40      	lsrs	r0, r0, #21
 8001586:	9101      	str	r1, [sp, #4]
 8001588:	031e      	lsls	r6, r3, #12
 800158a:	0069      	lsls	r1, r5, #1
 800158c:	4682      	mov	sl, r0
 800158e:	4691      	mov	r9, r2
 8001590:	0d49      	lsrs	r1, r1, #21
 8001592:	0b36      	lsrs	r6, r6, #12
 8001594:	0fd8      	lsrs	r0, r3, #31
 8001596:	42b9      	cmp	r1, r7
 8001598:	d020      	beq.n	80015dc <__ledf2+0x78>
 800159a:	45ba      	cmp	sl, r7
 800159c:	d00f      	beq.n	80015be <__ledf2+0x5a>
 800159e:	2900      	cmp	r1, #0
 80015a0:	d12b      	bne.n	80015fa <__ledf2+0x96>
 80015a2:	9901      	ldr	r1, [sp, #4]
 80015a4:	430c      	orrs	r4, r1
 80015a6:	4651      	mov	r1, sl
 80015a8:	2900      	cmp	r1, #0
 80015aa:	d137      	bne.n	800161c <__ledf2+0xb8>
 80015ac:	4332      	orrs	r2, r6
 80015ae:	d038      	beq.n	8001622 <__ledf2+0xbe>
 80015b0:	2c00      	cmp	r4, #0
 80015b2:	d144      	bne.n	800163e <__ledf2+0xda>
 80015b4:	2800      	cmp	r0, #0
 80015b6:	d119      	bne.n	80015ec <__ledf2+0x88>
 80015b8:	2001      	movs	r0, #1
 80015ba:	4240      	negs	r0, r0
 80015bc:	e016      	b.n	80015ec <__ledf2+0x88>
 80015be:	4316      	orrs	r6, r2
 80015c0:	d113      	bne.n	80015ea <__ledf2+0x86>
 80015c2:	2900      	cmp	r1, #0
 80015c4:	d102      	bne.n	80015cc <__ledf2+0x68>
 80015c6:	9f01      	ldr	r7, [sp, #4]
 80015c8:	4327      	orrs	r7, r4
 80015ca:	d0f3      	beq.n	80015b4 <__ledf2+0x50>
 80015cc:	4584      	cmp	ip, r0
 80015ce:	d020      	beq.n	8001612 <__ledf2+0xae>
 80015d0:	4663      	mov	r3, ip
 80015d2:	2002      	movs	r0, #2
 80015d4:	3b01      	subs	r3, #1
 80015d6:	4018      	ands	r0, r3
 80015d8:	3801      	subs	r0, #1
 80015da:	e007      	b.n	80015ec <__ledf2+0x88>
 80015dc:	9f01      	ldr	r7, [sp, #4]
 80015de:	4327      	orrs	r7, r4
 80015e0:	d103      	bne.n	80015ea <__ledf2+0x86>
 80015e2:	458a      	cmp	sl, r1
 80015e4:	d1f4      	bne.n	80015d0 <__ledf2+0x6c>
 80015e6:	4316      	orrs	r6, r2
 80015e8:	d01f      	beq.n	800162a <__ledf2+0xc6>
 80015ea:	2002      	movs	r0, #2
 80015ec:	b003      	add	sp, #12
 80015ee:	bcf0      	pop	{r4, r5, r6, r7}
 80015f0:	46bb      	mov	fp, r7
 80015f2:	46b2      	mov	sl, r6
 80015f4:	46a9      	mov	r9, r5
 80015f6:	46a0      	mov	r8, r4
 80015f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015fa:	4654      	mov	r4, sl
 80015fc:	2c00      	cmp	r4, #0
 80015fe:	d0e7      	beq.n	80015d0 <__ledf2+0x6c>
 8001600:	4584      	cmp	ip, r0
 8001602:	d1e5      	bne.n	80015d0 <__ledf2+0x6c>
 8001604:	4551      	cmp	r1, sl
 8001606:	dce3      	bgt.n	80015d0 <__ledf2+0x6c>
 8001608:	db03      	blt.n	8001612 <__ledf2+0xae>
 800160a:	9b01      	ldr	r3, [sp, #4]
 800160c:	42b3      	cmp	r3, r6
 800160e:	d8df      	bhi.n	80015d0 <__ledf2+0x6c>
 8001610:	d00f      	beq.n	8001632 <__ledf2+0xce>
 8001612:	4663      	mov	r3, ip
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0cf      	beq.n	80015b8 <__ledf2+0x54>
 8001618:	4660      	mov	r0, ip
 800161a:	e7e7      	b.n	80015ec <__ledf2+0x88>
 800161c:	2c00      	cmp	r4, #0
 800161e:	d0c9      	beq.n	80015b4 <__ledf2+0x50>
 8001620:	e7d4      	b.n	80015cc <__ledf2+0x68>
 8001622:	2000      	movs	r0, #0
 8001624:	2c00      	cmp	r4, #0
 8001626:	d0e1      	beq.n	80015ec <__ledf2+0x88>
 8001628:	e7d2      	b.n	80015d0 <__ledf2+0x6c>
 800162a:	4584      	cmp	ip, r0
 800162c:	d1d0      	bne.n	80015d0 <__ledf2+0x6c>
 800162e:	2000      	movs	r0, #0
 8001630:	e7dc      	b.n	80015ec <__ledf2+0x88>
 8001632:	45c8      	cmp	r8, r9
 8001634:	d8cc      	bhi.n	80015d0 <__ledf2+0x6c>
 8001636:	2000      	movs	r0, #0
 8001638:	45c8      	cmp	r8, r9
 800163a:	d2d7      	bcs.n	80015ec <__ledf2+0x88>
 800163c:	e7e9      	b.n	8001612 <__ledf2+0xae>
 800163e:	4584      	cmp	ip, r0
 8001640:	d0e3      	beq.n	800160a <__ledf2+0xa6>
 8001642:	e7c5      	b.n	80015d0 <__ledf2+0x6c>
 8001644:	000007ff 	.word	0x000007ff

08001648 <__aeabi_dmul>:
 8001648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800164a:	4657      	mov	r7, sl
 800164c:	46de      	mov	lr, fp
 800164e:	464e      	mov	r6, r9
 8001650:	4645      	mov	r5, r8
 8001652:	b5e0      	push	{r5, r6, r7, lr}
 8001654:	001f      	movs	r7, r3
 8001656:	030b      	lsls	r3, r1, #12
 8001658:	0b1b      	lsrs	r3, r3, #12
 800165a:	0016      	movs	r6, r2
 800165c:	469a      	mov	sl, r3
 800165e:	0fca      	lsrs	r2, r1, #31
 8001660:	004b      	lsls	r3, r1, #1
 8001662:	0004      	movs	r4, r0
 8001664:	4693      	mov	fp, r2
 8001666:	b087      	sub	sp, #28
 8001668:	0d5b      	lsrs	r3, r3, #21
 800166a:	d100      	bne.n	800166e <__aeabi_dmul+0x26>
 800166c:	e0d5      	b.n	800181a <__aeabi_dmul+0x1d2>
 800166e:	4abb      	ldr	r2, [pc, #748]	@ (800195c <__aeabi_dmul+0x314>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d100      	bne.n	8001676 <__aeabi_dmul+0x2e>
 8001674:	e0f8      	b.n	8001868 <__aeabi_dmul+0x220>
 8001676:	4651      	mov	r1, sl
 8001678:	0f42      	lsrs	r2, r0, #29
 800167a:	00c9      	lsls	r1, r1, #3
 800167c:	430a      	orrs	r2, r1
 800167e:	2180      	movs	r1, #128	@ 0x80
 8001680:	0409      	lsls	r1, r1, #16
 8001682:	4311      	orrs	r1, r2
 8001684:	00c2      	lsls	r2, r0, #3
 8001686:	4691      	mov	r9, r2
 8001688:	4ab5      	ldr	r2, [pc, #724]	@ (8001960 <__aeabi_dmul+0x318>)
 800168a:	468a      	mov	sl, r1
 800168c:	189d      	adds	r5, r3, r2
 800168e:	2300      	movs	r3, #0
 8001690:	4698      	mov	r8, r3
 8001692:	9302      	str	r3, [sp, #8]
 8001694:	033c      	lsls	r4, r7, #12
 8001696:	007b      	lsls	r3, r7, #1
 8001698:	0ffa      	lsrs	r2, r7, #31
 800169a:	0030      	movs	r0, r6
 800169c:	0b24      	lsrs	r4, r4, #12
 800169e:	0d5b      	lsrs	r3, r3, #21
 80016a0:	9200      	str	r2, [sp, #0]
 80016a2:	d100      	bne.n	80016a6 <__aeabi_dmul+0x5e>
 80016a4:	e096      	b.n	80017d4 <__aeabi_dmul+0x18c>
 80016a6:	4aad      	ldr	r2, [pc, #692]	@ (800195c <__aeabi_dmul+0x314>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d031      	beq.n	8001710 <__aeabi_dmul+0xc8>
 80016ac:	0f72      	lsrs	r2, r6, #29
 80016ae:	00e4      	lsls	r4, r4, #3
 80016b0:	4322      	orrs	r2, r4
 80016b2:	2480      	movs	r4, #128	@ 0x80
 80016b4:	0424      	lsls	r4, r4, #16
 80016b6:	4314      	orrs	r4, r2
 80016b8:	4aa9      	ldr	r2, [pc, #676]	@ (8001960 <__aeabi_dmul+0x318>)
 80016ba:	00f0      	lsls	r0, r6, #3
 80016bc:	4694      	mov	ip, r2
 80016be:	4463      	add	r3, ip
 80016c0:	195b      	adds	r3, r3, r5
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	9201      	str	r2, [sp, #4]
 80016c6:	4642      	mov	r2, r8
 80016c8:	2600      	movs	r6, #0
 80016ca:	2a0a      	cmp	r2, #10
 80016cc:	dc42      	bgt.n	8001754 <__aeabi_dmul+0x10c>
 80016ce:	465a      	mov	r2, fp
 80016d0:	9900      	ldr	r1, [sp, #0]
 80016d2:	404a      	eors	r2, r1
 80016d4:	4693      	mov	fp, r2
 80016d6:	4642      	mov	r2, r8
 80016d8:	2a02      	cmp	r2, #2
 80016da:	dc32      	bgt.n	8001742 <__aeabi_dmul+0xfa>
 80016dc:	3a01      	subs	r2, #1
 80016de:	2a01      	cmp	r2, #1
 80016e0:	d900      	bls.n	80016e4 <__aeabi_dmul+0x9c>
 80016e2:	e149      	b.n	8001978 <__aeabi_dmul+0x330>
 80016e4:	2e02      	cmp	r6, #2
 80016e6:	d100      	bne.n	80016ea <__aeabi_dmul+0xa2>
 80016e8:	e0ca      	b.n	8001880 <__aeabi_dmul+0x238>
 80016ea:	2e01      	cmp	r6, #1
 80016ec:	d13d      	bne.n	800176a <__aeabi_dmul+0x122>
 80016ee:	2300      	movs	r3, #0
 80016f0:	2400      	movs	r4, #0
 80016f2:	2200      	movs	r2, #0
 80016f4:	0010      	movs	r0, r2
 80016f6:	465a      	mov	r2, fp
 80016f8:	051b      	lsls	r3, r3, #20
 80016fa:	4323      	orrs	r3, r4
 80016fc:	07d2      	lsls	r2, r2, #31
 80016fe:	4313      	orrs	r3, r2
 8001700:	0019      	movs	r1, r3
 8001702:	b007      	add	sp, #28
 8001704:	bcf0      	pop	{r4, r5, r6, r7}
 8001706:	46bb      	mov	fp, r7
 8001708:	46b2      	mov	sl, r6
 800170a:	46a9      	mov	r9, r5
 800170c:	46a0      	mov	r8, r4
 800170e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001710:	4b92      	ldr	r3, [pc, #584]	@ (800195c <__aeabi_dmul+0x314>)
 8001712:	4326      	orrs	r6, r4
 8001714:	18eb      	adds	r3, r5, r3
 8001716:	2e00      	cmp	r6, #0
 8001718:	d100      	bne.n	800171c <__aeabi_dmul+0xd4>
 800171a:	e0bb      	b.n	8001894 <__aeabi_dmul+0x24c>
 800171c:	2203      	movs	r2, #3
 800171e:	4641      	mov	r1, r8
 8001720:	4311      	orrs	r1, r2
 8001722:	465a      	mov	r2, fp
 8001724:	4688      	mov	r8, r1
 8001726:	9900      	ldr	r1, [sp, #0]
 8001728:	404a      	eors	r2, r1
 800172a:	2180      	movs	r1, #128	@ 0x80
 800172c:	0109      	lsls	r1, r1, #4
 800172e:	468c      	mov	ip, r1
 8001730:	0029      	movs	r1, r5
 8001732:	4461      	add	r1, ip
 8001734:	9101      	str	r1, [sp, #4]
 8001736:	4641      	mov	r1, r8
 8001738:	290a      	cmp	r1, #10
 800173a:	dd00      	ble.n	800173e <__aeabi_dmul+0xf6>
 800173c:	e233      	b.n	8001ba6 <__aeabi_dmul+0x55e>
 800173e:	4693      	mov	fp, r2
 8001740:	2603      	movs	r6, #3
 8001742:	4642      	mov	r2, r8
 8001744:	2701      	movs	r7, #1
 8001746:	4097      	lsls	r7, r2
 8001748:	21a6      	movs	r1, #166	@ 0xa6
 800174a:	003a      	movs	r2, r7
 800174c:	00c9      	lsls	r1, r1, #3
 800174e:	400a      	ands	r2, r1
 8001750:	420f      	tst	r7, r1
 8001752:	d031      	beq.n	80017b8 <__aeabi_dmul+0x170>
 8001754:	9e02      	ldr	r6, [sp, #8]
 8001756:	2e02      	cmp	r6, #2
 8001758:	d100      	bne.n	800175c <__aeabi_dmul+0x114>
 800175a:	e235      	b.n	8001bc8 <__aeabi_dmul+0x580>
 800175c:	2e03      	cmp	r6, #3
 800175e:	d100      	bne.n	8001762 <__aeabi_dmul+0x11a>
 8001760:	e1d2      	b.n	8001b08 <__aeabi_dmul+0x4c0>
 8001762:	4654      	mov	r4, sl
 8001764:	4648      	mov	r0, r9
 8001766:	2e01      	cmp	r6, #1
 8001768:	d0c1      	beq.n	80016ee <__aeabi_dmul+0xa6>
 800176a:	9a01      	ldr	r2, [sp, #4]
 800176c:	4b7d      	ldr	r3, [pc, #500]	@ (8001964 <__aeabi_dmul+0x31c>)
 800176e:	4694      	mov	ip, r2
 8001770:	4463      	add	r3, ip
 8001772:	2b00      	cmp	r3, #0
 8001774:	dc00      	bgt.n	8001778 <__aeabi_dmul+0x130>
 8001776:	e0c0      	b.n	80018fa <__aeabi_dmul+0x2b2>
 8001778:	0742      	lsls	r2, r0, #29
 800177a:	d009      	beq.n	8001790 <__aeabi_dmul+0x148>
 800177c:	220f      	movs	r2, #15
 800177e:	4002      	ands	r2, r0
 8001780:	2a04      	cmp	r2, #4
 8001782:	d005      	beq.n	8001790 <__aeabi_dmul+0x148>
 8001784:	1d02      	adds	r2, r0, #4
 8001786:	4282      	cmp	r2, r0
 8001788:	4180      	sbcs	r0, r0
 800178a:	4240      	negs	r0, r0
 800178c:	1824      	adds	r4, r4, r0
 800178e:	0010      	movs	r0, r2
 8001790:	01e2      	lsls	r2, r4, #7
 8001792:	d506      	bpl.n	80017a2 <__aeabi_dmul+0x15a>
 8001794:	4b74      	ldr	r3, [pc, #464]	@ (8001968 <__aeabi_dmul+0x320>)
 8001796:	9a01      	ldr	r2, [sp, #4]
 8001798:	401c      	ands	r4, r3
 800179a:	2380      	movs	r3, #128	@ 0x80
 800179c:	4694      	mov	ip, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	4463      	add	r3, ip
 80017a2:	4a72      	ldr	r2, [pc, #456]	@ (800196c <__aeabi_dmul+0x324>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	dc6b      	bgt.n	8001880 <__aeabi_dmul+0x238>
 80017a8:	0762      	lsls	r2, r4, #29
 80017aa:	08c0      	lsrs	r0, r0, #3
 80017ac:	0264      	lsls	r4, r4, #9
 80017ae:	055b      	lsls	r3, r3, #21
 80017b0:	4302      	orrs	r2, r0
 80017b2:	0b24      	lsrs	r4, r4, #12
 80017b4:	0d5b      	lsrs	r3, r3, #21
 80017b6:	e79d      	b.n	80016f4 <__aeabi_dmul+0xac>
 80017b8:	2190      	movs	r1, #144	@ 0x90
 80017ba:	0089      	lsls	r1, r1, #2
 80017bc:	420f      	tst	r7, r1
 80017be:	d163      	bne.n	8001888 <__aeabi_dmul+0x240>
 80017c0:	2288      	movs	r2, #136	@ 0x88
 80017c2:	423a      	tst	r2, r7
 80017c4:	d100      	bne.n	80017c8 <__aeabi_dmul+0x180>
 80017c6:	e0d7      	b.n	8001978 <__aeabi_dmul+0x330>
 80017c8:	9b00      	ldr	r3, [sp, #0]
 80017ca:	46a2      	mov	sl, r4
 80017cc:	469b      	mov	fp, r3
 80017ce:	4681      	mov	r9, r0
 80017d0:	9602      	str	r6, [sp, #8]
 80017d2:	e7bf      	b.n	8001754 <__aeabi_dmul+0x10c>
 80017d4:	0023      	movs	r3, r4
 80017d6:	4333      	orrs	r3, r6
 80017d8:	d100      	bne.n	80017dc <__aeabi_dmul+0x194>
 80017da:	e07f      	b.n	80018dc <__aeabi_dmul+0x294>
 80017dc:	2c00      	cmp	r4, #0
 80017de:	d100      	bne.n	80017e2 <__aeabi_dmul+0x19a>
 80017e0:	e1ad      	b.n	8001b3e <__aeabi_dmul+0x4f6>
 80017e2:	0020      	movs	r0, r4
 80017e4:	f7fe fe60 	bl	80004a8 <__clzsi2>
 80017e8:	0002      	movs	r2, r0
 80017ea:	0003      	movs	r3, r0
 80017ec:	3a0b      	subs	r2, #11
 80017ee:	201d      	movs	r0, #29
 80017f0:	0019      	movs	r1, r3
 80017f2:	1a82      	subs	r2, r0, r2
 80017f4:	0030      	movs	r0, r6
 80017f6:	3908      	subs	r1, #8
 80017f8:	40d0      	lsrs	r0, r2
 80017fa:	408c      	lsls	r4, r1
 80017fc:	4304      	orrs	r4, r0
 80017fe:	0030      	movs	r0, r6
 8001800:	4088      	lsls	r0, r1
 8001802:	4a5b      	ldr	r2, [pc, #364]	@ (8001970 <__aeabi_dmul+0x328>)
 8001804:	1aeb      	subs	r3, r5, r3
 8001806:	4694      	mov	ip, r2
 8001808:	4463      	add	r3, ip
 800180a:	1c5a      	adds	r2, r3, #1
 800180c:	9201      	str	r2, [sp, #4]
 800180e:	4642      	mov	r2, r8
 8001810:	2600      	movs	r6, #0
 8001812:	2a0a      	cmp	r2, #10
 8001814:	dc00      	bgt.n	8001818 <__aeabi_dmul+0x1d0>
 8001816:	e75a      	b.n	80016ce <__aeabi_dmul+0x86>
 8001818:	e79c      	b.n	8001754 <__aeabi_dmul+0x10c>
 800181a:	4653      	mov	r3, sl
 800181c:	4303      	orrs	r3, r0
 800181e:	4699      	mov	r9, r3
 8001820:	d054      	beq.n	80018cc <__aeabi_dmul+0x284>
 8001822:	4653      	mov	r3, sl
 8001824:	2b00      	cmp	r3, #0
 8001826:	d100      	bne.n	800182a <__aeabi_dmul+0x1e2>
 8001828:	e177      	b.n	8001b1a <__aeabi_dmul+0x4d2>
 800182a:	4650      	mov	r0, sl
 800182c:	f7fe fe3c 	bl	80004a8 <__clzsi2>
 8001830:	230b      	movs	r3, #11
 8001832:	425b      	negs	r3, r3
 8001834:	469c      	mov	ip, r3
 8001836:	0002      	movs	r2, r0
 8001838:	4484      	add	ip, r0
 800183a:	0011      	movs	r1, r2
 800183c:	4650      	mov	r0, sl
 800183e:	3908      	subs	r1, #8
 8001840:	4088      	lsls	r0, r1
 8001842:	231d      	movs	r3, #29
 8001844:	4680      	mov	r8, r0
 8001846:	4660      	mov	r0, ip
 8001848:	1a1b      	subs	r3, r3, r0
 800184a:	0020      	movs	r0, r4
 800184c:	40d8      	lsrs	r0, r3
 800184e:	0003      	movs	r3, r0
 8001850:	4640      	mov	r0, r8
 8001852:	4303      	orrs	r3, r0
 8001854:	469a      	mov	sl, r3
 8001856:	0023      	movs	r3, r4
 8001858:	408b      	lsls	r3, r1
 800185a:	4699      	mov	r9, r3
 800185c:	2300      	movs	r3, #0
 800185e:	4d44      	ldr	r5, [pc, #272]	@ (8001970 <__aeabi_dmul+0x328>)
 8001860:	4698      	mov	r8, r3
 8001862:	1aad      	subs	r5, r5, r2
 8001864:	9302      	str	r3, [sp, #8]
 8001866:	e715      	b.n	8001694 <__aeabi_dmul+0x4c>
 8001868:	4652      	mov	r2, sl
 800186a:	4302      	orrs	r2, r0
 800186c:	4691      	mov	r9, r2
 800186e:	d126      	bne.n	80018be <__aeabi_dmul+0x276>
 8001870:	2200      	movs	r2, #0
 8001872:	001d      	movs	r5, r3
 8001874:	2302      	movs	r3, #2
 8001876:	4692      	mov	sl, r2
 8001878:	3208      	adds	r2, #8
 800187a:	4690      	mov	r8, r2
 800187c:	9302      	str	r3, [sp, #8]
 800187e:	e709      	b.n	8001694 <__aeabi_dmul+0x4c>
 8001880:	2400      	movs	r4, #0
 8001882:	2200      	movs	r2, #0
 8001884:	4b35      	ldr	r3, [pc, #212]	@ (800195c <__aeabi_dmul+0x314>)
 8001886:	e735      	b.n	80016f4 <__aeabi_dmul+0xac>
 8001888:	2300      	movs	r3, #0
 800188a:	2480      	movs	r4, #128	@ 0x80
 800188c:	469b      	mov	fp, r3
 800188e:	0324      	lsls	r4, r4, #12
 8001890:	4b32      	ldr	r3, [pc, #200]	@ (800195c <__aeabi_dmul+0x314>)
 8001892:	e72f      	b.n	80016f4 <__aeabi_dmul+0xac>
 8001894:	2202      	movs	r2, #2
 8001896:	4641      	mov	r1, r8
 8001898:	4311      	orrs	r1, r2
 800189a:	2280      	movs	r2, #128	@ 0x80
 800189c:	0112      	lsls	r2, r2, #4
 800189e:	4694      	mov	ip, r2
 80018a0:	002a      	movs	r2, r5
 80018a2:	4462      	add	r2, ip
 80018a4:	4688      	mov	r8, r1
 80018a6:	9201      	str	r2, [sp, #4]
 80018a8:	290a      	cmp	r1, #10
 80018aa:	dd00      	ble.n	80018ae <__aeabi_dmul+0x266>
 80018ac:	e752      	b.n	8001754 <__aeabi_dmul+0x10c>
 80018ae:	465a      	mov	r2, fp
 80018b0:	2000      	movs	r0, #0
 80018b2:	9900      	ldr	r1, [sp, #0]
 80018b4:	0004      	movs	r4, r0
 80018b6:	404a      	eors	r2, r1
 80018b8:	4693      	mov	fp, r2
 80018ba:	2602      	movs	r6, #2
 80018bc:	e70b      	b.n	80016d6 <__aeabi_dmul+0x8e>
 80018be:	220c      	movs	r2, #12
 80018c0:	001d      	movs	r5, r3
 80018c2:	2303      	movs	r3, #3
 80018c4:	4681      	mov	r9, r0
 80018c6:	4690      	mov	r8, r2
 80018c8:	9302      	str	r3, [sp, #8]
 80018ca:	e6e3      	b.n	8001694 <__aeabi_dmul+0x4c>
 80018cc:	2300      	movs	r3, #0
 80018ce:	469a      	mov	sl, r3
 80018d0:	3304      	adds	r3, #4
 80018d2:	4698      	mov	r8, r3
 80018d4:	3b03      	subs	r3, #3
 80018d6:	2500      	movs	r5, #0
 80018d8:	9302      	str	r3, [sp, #8]
 80018da:	e6db      	b.n	8001694 <__aeabi_dmul+0x4c>
 80018dc:	4642      	mov	r2, r8
 80018de:	3301      	adds	r3, #1
 80018e0:	431a      	orrs	r2, r3
 80018e2:	002b      	movs	r3, r5
 80018e4:	4690      	mov	r8, r2
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	9201      	str	r2, [sp, #4]
 80018ea:	4642      	mov	r2, r8
 80018ec:	2400      	movs	r4, #0
 80018ee:	2000      	movs	r0, #0
 80018f0:	2601      	movs	r6, #1
 80018f2:	2a0a      	cmp	r2, #10
 80018f4:	dc00      	bgt.n	80018f8 <__aeabi_dmul+0x2b0>
 80018f6:	e6ea      	b.n	80016ce <__aeabi_dmul+0x86>
 80018f8:	e72c      	b.n	8001754 <__aeabi_dmul+0x10c>
 80018fa:	2201      	movs	r2, #1
 80018fc:	1ad2      	subs	r2, r2, r3
 80018fe:	2a38      	cmp	r2, #56	@ 0x38
 8001900:	dd00      	ble.n	8001904 <__aeabi_dmul+0x2bc>
 8001902:	e6f4      	b.n	80016ee <__aeabi_dmul+0xa6>
 8001904:	2a1f      	cmp	r2, #31
 8001906:	dc00      	bgt.n	800190a <__aeabi_dmul+0x2c2>
 8001908:	e12a      	b.n	8001b60 <__aeabi_dmul+0x518>
 800190a:	211f      	movs	r1, #31
 800190c:	4249      	negs	r1, r1
 800190e:	1acb      	subs	r3, r1, r3
 8001910:	0021      	movs	r1, r4
 8001912:	40d9      	lsrs	r1, r3
 8001914:	000b      	movs	r3, r1
 8001916:	2a20      	cmp	r2, #32
 8001918:	d005      	beq.n	8001926 <__aeabi_dmul+0x2de>
 800191a:	4a16      	ldr	r2, [pc, #88]	@ (8001974 <__aeabi_dmul+0x32c>)
 800191c:	9d01      	ldr	r5, [sp, #4]
 800191e:	4694      	mov	ip, r2
 8001920:	4465      	add	r5, ip
 8001922:	40ac      	lsls	r4, r5
 8001924:	4320      	orrs	r0, r4
 8001926:	1e42      	subs	r2, r0, #1
 8001928:	4190      	sbcs	r0, r2
 800192a:	4318      	orrs	r0, r3
 800192c:	2307      	movs	r3, #7
 800192e:	0019      	movs	r1, r3
 8001930:	2400      	movs	r4, #0
 8001932:	4001      	ands	r1, r0
 8001934:	4203      	tst	r3, r0
 8001936:	d00c      	beq.n	8001952 <__aeabi_dmul+0x30a>
 8001938:	230f      	movs	r3, #15
 800193a:	4003      	ands	r3, r0
 800193c:	2b04      	cmp	r3, #4
 800193e:	d100      	bne.n	8001942 <__aeabi_dmul+0x2fa>
 8001940:	e140      	b.n	8001bc4 <__aeabi_dmul+0x57c>
 8001942:	1d03      	adds	r3, r0, #4
 8001944:	4283      	cmp	r3, r0
 8001946:	41a4      	sbcs	r4, r4
 8001948:	0018      	movs	r0, r3
 800194a:	4264      	negs	r4, r4
 800194c:	0761      	lsls	r1, r4, #29
 800194e:	0264      	lsls	r4, r4, #9
 8001950:	0b24      	lsrs	r4, r4, #12
 8001952:	08c2      	lsrs	r2, r0, #3
 8001954:	2300      	movs	r3, #0
 8001956:	430a      	orrs	r2, r1
 8001958:	e6cc      	b.n	80016f4 <__aeabi_dmul+0xac>
 800195a:	46c0      	nop			@ (mov r8, r8)
 800195c:	000007ff 	.word	0x000007ff
 8001960:	fffffc01 	.word	0xfffffc01
 8001964:	000003ff 	.word	0x000003ff
 8001968:	feffffff 	.word	0xfeffffff
 800196c:	000007fe 	.word	0x000007fe
 8001970:	fffffc0d 	.word	0xfffffc0d
 8001974:	0000043e 	.word	0x0000043e
 8001978:	4649      	mov	r1, r9
 800197a:	464a      	mov	r2, r9
 800197c:	0409      	lsls	r1, r1, #16
 800197e:	0c09      	lsrs	r1, r1, #16
 8001980:	000d      	movs	r5, r1
 8001982:	0c16      	lsrs	r6, r2, #16
 8001984:	0c02      	lsrs	r2, r0, #16
 8001986:	0400      	lsls	r0, r0, #16
 8001988:	0c00      	lsrs	r0, r0, #16
 800198a:	4345      	muls	r5, r0
 800198c:	46ac      	mov	ip, r5
 800198e:	0005      	movs	r5, r0
 8001990:	4375      	muls	r5, r6
 8001992:	46a8      	mov	r8, r5
 8001994:	0015      	movs	r5, r2
 8001996:	000f      	movs	r7, r1
 8001998:	4375      	muls	r5, r6
 800199a:	9200      	str	r2, [sp, #0]
 800199c:	9502      	str	r5, [sp, #8]
 800199e:	002a      	movs	r2, r5
 80019a0:	9d00      	ldr	r5, [sp, #0]
 80019a2:	436f      	muls	r7, r5
 80019a4:	4665      	mov	r5, ip
 80019a6:	0c2d      	lsrs	r5, r5, #16
 80019a8:	46a9      	mov	r9, r5
 80019aa:	4447      	add	r7, r8
 80019ac:	444f      	add	r7, r9
 80019ae:	45b8      	cmp	r8, r7
 80019b0:	d905      	bls.n	80019be <__aeabi_dmul+0x376>
 80019b2:	0015      	movs	r5, r2
 80019b4:	2280      	movs	r2, #128	@ 0x80
 80019b6:	0252      	lsls	r2, r2, #9
 80019b8:	4690      	mov	r8, r2
 80019ba:	4445      	add	r5, r8
 80019bc:	9502      	str	r5, [sp, #8]
 80019be:	0c3d      	lsrs	r5, r7, #16
 80019c0:	9503      	str	r5, [sp, #12]
 80019c2:	4665      	mov	r5, ip
 80019c4:	042d      	lsls	r5, r5, #16
 80019c6:	043f      	lsls	r7, r7, #16
 80019c8:	0c2d      	lsrs	r5, r5, #16
 80019ca:	46ac      	mov	ip, r5
 80019cc:	003d      	movs	r5, r7
 80019ce:	4465      	add	r5, ip
 80019d0:	9504      	str	r5, [sp, #16]
 80019d2:	0c25      	lsrs	r5, r4, #16
 80019d4:	0424      	lsls	r4, r4, #16
 80019d6:	0c24      	lsrs	r4, r4, #16
 80019d8:	46ac      	mov	ip, r5
 80019da:	0025      	movs	r5, r4
 80019dc:	4375      	muls	r5, r6
 80019de:	46a8      	mov	r8, r5
 80019e0:	4665      	mov	r5, ip
 80019e2:	000f      	movs	r7, r1
 80019e4:	4369      	muls	r1, r5
 80019e6:	4441      	add	r1, r8
 80019e8:	4689      	mov	r9, r1
 80019ea:	4367      	muls	r7, r4
 80019ec:	0c39      	lsrs	r1, r7, #16
 80019ee:	4449      	add	r1, r9
 80019f0:	436e      	muls	r6, r5
 80019f2:	4588      	cmp	r8, r1
 80019f4:	d903      	bls.n	80019fe <__aeabi_dmul+0x3b6>
 80019f6:	2280      	movs	r2, #128	@ 0x80
 80019f8:	0252      	lsls	r2, r2, #9
 80019fa:	4690      	mov	r8, r2
 80019fc:	4446      	add	r6, r8
 80019fe:	0c0d      	lsrs	r5, r1, #16
 8001a00:	46a8      	mov	r8, r5
 8001a02:	0035      	movs	r5, r6
 8001a04:	4445      	add	r5, r8
 8001a06:	9505      	str	r5, [sp, #20]
 8001a08:	9d03      	ldr	r5, [sp, #12]
 8001a0a:	043f      	lsls	r7, r7, #16
 8001a0c:	46a8      	mov	r8, r5
 8001a0e:	0c3f      	lsrs	r7, r7, #16
 8001a10:	0409      	lsls	r1, r1, #16
 8001a12:	19c9      	adds	r1, r1, r7
 8001a14:	4488      	add	r8, r1
 8001a16:	4645      	mov	r5, r8
 8001a18:	9503      	str	r5, [sp, #12]
 8001a1a:	4655      	mov	r5, sl
 8001a1c:	042e      	lsls	r6, r5, #16
 8001a1e:	0c36      	lsrs	r6, r6, #16
 8001a20:	0c2f      	lsrs	r7, r5, #16
 8001a22:	0035      	movs	r5, r6
 8001a24:	4345      	muls	r5, r0
 8001a26:	4378      	muls	r0, r7
 8001a28:	4681      	mov	r9, r0
 8001a2a:	0038      	movs	r0, r7
 8001a2c:	46a8      	mov	r8, r5
 8001a2e:	0c2d      	lsrs	r5, r5, #16
 8001a30:	46aa      	mov	sl, r5
 8001a32:	9a00      	ldr	r2, [sp, #0]
 8001a34:	4350      	muls	r0, r2
 8001a36:	4372      	muls	r2, r6
 8001a38:	444a      	add	r2, r9
 8001a3a:	4452      	add	r2, sl
 8001a3c:	4591      	cmp	r9, r2
 8001a3e:	d903      	bls.n	8001a48 <__aeabi_dmul+0x400>
 8001a40:	2580      	movs	r5, #128	@ 0x80
 8001a42:	026d      	lsls	r5, r5, #9
 8001a44:	46a9      	mov	r9, r5
 8001a46:	4448      	add	r0, r9
 8001a48:	0c15      	lsrs	r5, r2, #16
 8001a4a:	46a9      	mov	r9, r5
 8001a4c:	4645      	mov	r5, r8
 8001a4e:	042d      	lsls	r5, r5, #16
 8001a50:	0c2d      	lsrs	r5, r5, #16
 8001a52:	46a8      	mov	r8, r5
 8001a54:	4665      	mov	r5, ip
 8001a56:	437d      	muls	r5, r7
 8001a58:	0412      	lsls	r2, r2, #16
 8001a5a:	4448      	add	r0, r9
 8001a5c:	4490      	add	r8, r2
 8001a5e:	46a9      	mov	r9, r5
 8001a60:	0032      	movs	r2, r6
 8001a62:	4665      	mov	r5, ip
 8001a64:	4362      	muls	r2, r4
 8001a66:	436e      	muls	r6, r5
 8001a68:	437c      	muls	r4, r7
 8001a6a:	0c17      	lsrs	r7, r2, #16
 8001a6c:	1936      	adds	r6, r6, r4
 8001a6e:	19bf      	adds	r7, r7, r6
 8001a70:	42bc      	cmp	r4, r7
 8001a72:	d903      	bls.n	8001a7c <__aeabi_dmul+0x434>
 8001a74:	2480      	movs	r4, #128	@ 0x80
 8001a76:	0264      	lsls	r4, r4, #9
 8001a78:	46a4      	mov	ip, r4
 8001a7a:	44e1      	add	r9, ip
 8001a7c:	9c02      	ldr	r4, [sp, #8]
 8001a7e:	9e03      	ldr	r6, [sp, #12]
 8001a80:	46a4      	mov	ip, r4
 8001a82:	9d05      	ldr	r5, [sp, #20]
 8001a84:	4466      	add	r6, ip
 8001a86:	428e      	cmp	r6, r1
 8001a88:	4189      	sbcs	r1, r1
 8001a8a:	46ac      	mov	ip, r5
 8001a8c:	0412      	lsls	r2, r2, #16
 8001a8e:	043c      	lsls	r4, r7, #16
 8001a90:	0c12      	lsrs	r2, r2, #16
 8001a92:	18a2      	adds	r2, r4, r2
 8001a94:	4462      	add	r2, ip
 8001a96:	4249      	negs	r1, r1
 8001a98:	1854      	adds	r4, r2, r1
 8001a9a:	4446      	add	r6, r8
 8001a9c:	46a4      	mov	ip, r4
 8001a9e:	4546      	cmp	r6, r8
 8001aa0:	41a4      	sbcs	r4, r4
 8001aa2:	4682      	mov	sl, r0
 8001aa4:	4264      	negs	r4, r4
 8001aa6:	46a0      	mov	r8, r4
 8001aa8:	42aa      	cmp	r2, r5
 8001aaa:	4192      	sbcs	r2, r2
 8001aac:	458c      	cmp	ip, r1
 8001aae:	4189      	sbcs	r1, r1
 8001ab0:	44e2      	add	sl, ip
 8001ab2:	44d0      	add	r8, sl
 8001ab4:	4249      	negs	r1, r1
 8001ab6:	4252      	negs	r2, r2
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	45a0      	cmp	r8, r4
 8001abc:	41a4      	sbcs	r4, r4
 8001abe:	4582      	cmp	sl, r0
 8001ac0:	4189      	sbcs	r1, r1
 8001ac2:	4264      	negs	r4, r4
 8001ac4:	4249      	negs	r1, r1
 8001ac6:	430c      	orrs	r4, r1
 8001ac8:	4641      	mov	r1, r8
 8001aca:	0c3f      	lsrs	r7, r7, #16
 8001acc:	19d2      	adds	r2, r2, r7
 8001ace:	1912      	adds	r2, r2, r4
 8001ad0:	0dcc      	lsrs	r4, r1, #23
 8001ad2:	9904      	ldr	r1, [sp, #16]
 8001ad4:	0270      	lsls	r0, r6, #9
 8001ad6:	4308      	orrs	r0, r1
 8001ad8:	1e41      	subs	r1, r0, #1
 8001ada:	4188      	sbcs	r0, r1
 8001adc:	4641      	mov	r1, r8
 8001ade:	444a      	add	r2, r9
 8001ae0:	0df6      	lsrs	r6, r6, #23
 8001ae2:	0252      	lsls	r2, r2, #9
 8001ae4:	4330      	orrs	r0, r6
 8001ae6:	0249      	lsls	r1, r1, #9
 8001ae8:	4314      	orrs	r4, r2
 8001aea:	4308      	orrs	r0, r1
 8001aec:	01d2      	lsls	r2, r2, #7
 8001aee:	d535      	bpl.n	8001b5c <__aeabi_dmul+0x514>
 8001af0:	2201      	movs	r2, #1
 8001af2:	0843      	lsrs	r3, r0, #1
 8001af4:	4002      	ands	r2, r0
 8001af6:	4313      	orrs	r3, r2
 8001af8:	07e0      	lsls	r0, r4, #31
 8001afa:	4318      	orrs	r0, r3
 8001afc:	0864      	lsrs	r4, r4, #1
 8001afe:	e634      	b.n	800176a <__aeabi_dmul+0x122>
 8001b00:	9b00      	ldr	r3, [sp, #0]
 8001b02:	46a2      	mov	sl, r4
 8001b04:	469b      	mov	fp, r3
 8001b06:	4681      	mov	r9, r0
 8001b08:	2480      	movs	r4, #128	@ 0x80
 8001b0a:	4653      	mov	r3, sl
 8001b0c:	0324      	lsls	r4, r4, #12
 8001b0e:	431c      	orrs	r4, r3
 8001b10:	0324      	lsls	r4, r4, #12
 8001b12:	464a      	mov	r2, r9
 8001b14:	4b2e      	ldr	r3, [pc, #184]	@ (8001bd0 <__aeabi_dmul+0x588>)
 8001b16:	0b24      	lsrs	r4, r4, #12
 8001b18:	e5ec      	b.n	80016f4 <__aeabi_dmul+0xac>
 8001b1a:	f7fe fcc5 	bl	80004a8 <__clzsi2>
 8001b1e:	2315      	movs	r3, #21
 8001b20:	469c      	mov	ip, r3
 8001b22:	4484      	add	ip, r0
 8001b24:	0002      	movs	r2, r0
 8001b26:	4663      	mov	r3, ip
 8001b28:	3220      	adds	r2, #32
 8001b2a:	2b1c      	cmp	r3, #28
 8001b2c:	dc00      	bgt.n	8001b30 <__aeabi_dmul+0x4e8>
 8001b2e:	e684      	b.n	800183a <__aeabi_dmul+0x1f2>
 8001b30:	2300      	movs	r3, #0
 8001b32:	4699      	mov	r9, r3
 8001b34:	0023      	movs	r3, r4
 8001b36:	3808      	subs	r0, #8
 8001b38:	4083      	lsls	r3, r0
 8001b3a:	469a      	mov	sl, r3
 8001b3c:	e68e      	b.n	800185c <__aeabi_dmul+0x214>
 8001b3e:	f7fe fcb3 	bl	80004a8 <__clzsi2>
 8001b42:	0002      	movs	r2, r0
 8001b44:	0003      	movs	r3, r0
 8001b46:	3215      	adds	r2, #21
 8001b48:	3320      	adds	r3, #32
 8001b4a:	2a1c      	cmp	r2, #28
 8001b4c:	dc00      	bgt.n	8001b50 <__aeabi_dmul+0x508>
 8001b4e:	e64e      	b.n	80017ee <__aeabi_dmul+0x1a6>
 8001b50:	0002      	movs	r2, r0
 8001b52:	0034      	movs	r4, r6
 8001b54:	3a08      	subs	r2, #8
 8001b56:	2000      	movs	r0, #0
 8001b58:	4094      	lsls	r4, r2
 8001b5a:	e652      	b.n	8001802 <__aeabi_dmul+0x1ba>
 8001b5c:	9301      	str	r3, [sp, #4]
 8001b5e:	e604      	b.n	800176a <__aeabi_dmul+0x122>
 8001b60:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd4 <__aeabi_dmul+0x58c>)
 8001b62:	0021      	movs	r1, r4
 8001b64:	469c      	mov	ip, r3
 8001b66:	0003      	movs	r3, r0
 8001b68:	9d01      	ldr	r5, [sp, #4]
 8001b6a:	40d3      	lsrs	r3, r2
 8001b6c:	4465      	add	r5, ip
 8001b6e:	40a9      	lsls	r1, r5
 8001b70:	4319      	orrs	r1, r3
 8001b72:	0003      	movs	r3, r0
 8001b74:	40ab      	lsls	r3, r5
 8001b76:	1e58      	subs	r0, r3, #1
 8001b78:	4183      	sbcs	r3, r0
 8001b7a:	4319      	orrs	r1, r3
 8001b7c:	0008      	movs	r0, r1
 8001b7e:	40d4      	lsrs	r4, r2
 8001b80:	074b      	lsls	r3, r1, #29
 8001b82:	d009      	beq.n	8001b98 <__aeabi_dmul+0x550>
 8001b84:	230f      	movs	r3, #15
 8001b86:	400b      	ands	r3, r1
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d005      	beq.n	8001b98 <__aeabi_dmul+0x550>
 8001b8c:	1d0b      	adds	r3, r1, #4
 8001b8e:	428b      	cmp	r3, r1
 8001b90:	4180      	sbcs	r0, r0
 8001b92:	4240      	negs	r0, r0
 8001b94:	1824      	adds	r4, r4, r0
 8001b96:	0018      	movs	r0, r3
 8001b98:	0223      	lsls	r3, r4, #8
 8001b9a:	d400      	bmi.n	8001b9e <__aeabi_dmul+0x556>
 8001b9c:	e6d6      	b.n	800194c <__aeabi_dmul+0x304>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	2400      	movs	r4, #0
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	e5a6      	b.n	80016f4 <__aeabi_dmul+0xac>
 8001ba6:	290f      	cmp	r1, #15
 8001ba8:	d1aa      	bne.n	8001b00 <__aeabi_dmul+0x4b8>
 8001baa:	2380      	movs	r3, #128	@ 0x80
 8001bac:	4652      	mov	r2, sl
 8001bae:	031b      	lsls	r3, r3, #12
 8001bb0:	421a      	tst	r2, r3
 8001bb2:	d0a9      	beq.n	8001b08 <__aeabi_dmul+0x4c0>
 8001bb4:	421c      	tst	r4, r3
 8001bb6:	d1a7      	bne.n	8001b08 <__aeabi_dmul+0x4c0>
 8001bb8:	431c      	orrs	r4, r3
 8001bba:	9b00      	ldr	r3, [sp, #0]
 8001bbc:	0002      	movs	r2, r0
 8001bbe:	469b      	mov	fp, r3
 8001bc0:	4b03      	ldr	r3, [pc, #12]	@ (8001bd0 <__aeabi_dmul+0x588>)
 8001bc2:	e597      	b.n	80016f4 <__aeabi_dmul+0xac>
 8001bc4:	2400      	movs	r4, #0
 8001bc6:	e6c1      	b.n	800194c <__aeabi_dmul+0x304>
 8001bc8:	2400      	movs	r4, #0
 8001bca:	4b01      	ldr	r3, [pc, #4]	@ (8001bd0 <__aeabi_dmul+0x588>)
 8001bcc:	0022      	movs	r2, r4
 8001bce:	e591      	b.n	80016f4 <__aeabi_dmul+0xac>
 8001bd0:	000007ff 	.word	0x000007ff
 8001bd4:	0000041e 	.word	0x0000041e

08001bd8 <__aeabi_dsub>:
 8001bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bda:	464e      	mov	r6, r9
 8001bdc:	4645      	mov	r5, r8
 8001bde:	46de      	mov	lr, fp
 8001be0:	4657      	mov	r7, sl
 8001be2:	b5e0      	push	{r5, r6, r7, lr}
 8001be4:	b085      	sub	sp, #20
 8001be6:	9000      	str	r0, [sp, #0]
 8001be8:	9101      	str	r1, [sp, #4]
 8001bea:	030c      	lsls	r4, r1, #12
 8001bec:	004f      	lsls	r7, r1, #1
 8001bee:	0fce      	lsrs	r6, r1, #31
 8001bf0:	0a61      	lsrs	r1, r4, #9
 8001bf2:	9c00      	ldr	r4, [sp, #0]
 8001bf4:	46b0      	mov	r8, r6
 8001bf6:	0f64      	lsrs	r4, r4, #29
 8001bf8:	430c      	orrs	r4, r1
 8001bfa:	9900      	ldr	r1, [sp, #0]
 8001bfc:	0d7f      	lsrs	r7, r7, #21
 8001bfe:	00c8      	lsls	r0, r1, #3
 8001c00:	0011      	movs	r1, r2
 8001c02:	001a      	movs	r2, r3
 8001c04:	031b      	lsls	r3, r3, #12
 8001c06:	469c      	mov	ip, r3
 8001c08:	9100      	str	r1, [sp, #0]
 8001c0a:	9201      	str	r2, [sp, #4]
 8001c0c:	0051      	lsls	r1, r2, #1
 8001c0e:	0d4b      	lsrs	r3, r1, #21
 8001c10:	4699      	mov	r9, r3
 8001c12:	9b01      	ldr	r3, [sp, #4]
 8001c14:	9d00      	ldr	r5, [sp, #0]
 8001c16:	0fd9      	lsrs	r1, r3, #31
 8001c18:	4663      	mov	r3, ip
 8001c1a:	0f6a      	lsrs	r2, r5, #29
 8001c1c:	0a5b      	lsrs	r3, r3, #9
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	00ea      	lsls	r2, r5, #3
 8001c22:	4694      	mov	ip, r2
 8001c24:	4693      	mov	fp, r2
 8001c26:	4ac1      	ldr	r2, [pc, #772]	@ (8001f2c <__aeabi_dsub+0x354>)
 8001c28:	9003      	str	r0, [sp, #12]
 8001c2a:	9302      	str	r3, [sp, #8]
 8001c2c:	4591      	cmp	r9, r2
 8001c2e:	d100      	bne.n	8001c32 <__aeabi_dsub+0x5a>
 8001c30:	e0cd      	b.n	8001dce <__aeabi_dsub+0x1f6>
 8001c32:	2501      	movs	r5, #1
 8001c34:	4069      	eors	r1, r5
 8001c36:	464d      	mov	r5, r9
 8001c38:	1b7d      	subs	r5, r7, r5
 8001c3a:	46aa      	mov	sl, r5
 8001c3c:	428e      	cmp	r6, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x6a>
 8001c40:	e080      	b.n	8001d44 <__aeabi_dsub+0x16c>
 8001c42:	2d00      	cmp	r5, #0
 8001c44:	dc00      	bgt.n	8001c48 <__aeabi_dsub+0x70>
 8001c46:	e335      	b.n	80022b4 <__aeabi_dsub+0x6dc>
 8001c48:	4649      	mov	r1, r9
 8001c4a:	2900      	cmp	r1, #0
 8001c4c:	d100      	bne.n	8001c50 <__aeabi_dsub+0x78>
 8001c4e:	e0df      	b.n	8001e10 <__aeabi_dsub+0x238>
 8001c50:	4297      	cmp	r7, r2
 8001c52:	d100      	bne.n	8001c56 <__aeabi_dsub+0x7e>
 8001c54:	e194      	b.n	8001f80 <__aeabi_dsub+0x3a8>
 8001c56:	4652      	mov	r2, sl
 8001c58:	2501      	movs	r5, #1
 8001c5a:	2a38      	cmp	r2, #56	@ 0x38
 8001c5c:	dc19      	bgt.n	8001c92 <__aeabi_dsub+0xba>
 8001c5e:	2280      	movs	r2, #128	@ 0x80
 8001c60:	9b02      	ldr	r3, [sp, #8]
 8001c62:	0412      	lsls	r2, r2, #16
 8001c64:	4313      	orrs	r3, r2
 8001c66:	9302      	str	r3, [sp, #8]
 8001c68:	4652      	mov	r2, sl
 8001c6a:	2a1f      	cmp	r2, #31
 8001c6c:	dd00      	ble.n	8001c70 <__aeabi_dsub+0x98>
 8001c6e:	e1e3      	b.n	8002038 <__aeabi_dsub+0x460>
 8001c70:	4653      	mov	r3, sl
 8001c72:	2220      	movs	r2, #32
 8001c74:	4661      	mov	r1, ip
 8001c76:	9d02      	ldr	r5, [sp, #8]
 8001c78:	1ad2      	subs	r2, r2, r3
 8001c7a:	4095      	lsls	r5, r2
 8001c7c:	40d9      	lsrs	r1, r3
 8001c7e:	430d      	orrs	r5, r1
 8001c80:	4661      	mov	r1, ip
 8001c82:	4091      	lsls	r1, r2
 8001c84:	000a      	movs	r2, r1
 8001c86:	1e51      	subs	r1, r2, #1
 8001c88:	418a      	sbcs	r2, r1
 8001c8a:	4315      	orrs	r5, r2
 8001c8c:	9a02      	ldr	r2, [sp, #8]
 8001c8e:	40da      	lsrs	r2, r3
 8001c90:	1aa4      	subs	r4, r4, r2
 8001c92:	1b45      	subs	r5, r0, r5
 8001c94:	42a8      	cmp	r0, r5
 8001c96:	4180      	sbcs	r0, r0
 8001c98:	4240      	negs	r0, r0
 8001c9a:	1a24      	subs	r4, r4, r0
 8001c9c:	0223      	lsls	r3, r4, #8
 8001c9e:	d400      	bmi.n	8001ca2 <__aeabi_dsub+0xca>
 8001ca0:	e13d      	b.n	8001f1e <__aeabi_dsub+0x346>
 8001ca2:	0264      	lsls	r4, r4, #9
 8001ca4:	0a64      	lsrs	r4, r4, #9
 8001ca6:	2c00      	cmp	r4, #0
 8001ca8:	d100      	bne.n	8001cac <__aeabi_dsub+0xd4>
 8001caa:	e147      	b.n	8001f3c <__aeabi_dsub+0x364>
 8001cac:	0020      	movs	r0, r4
 8001cae:	f7fe fbfb 	bl	80004a8 <__clzsi2>
 8001cb2:	0003      	movs	r3, r0
 8001cb4:	3b08      	subs	r3, #8
 8001cb6:	2120      	movs	r1, #32
 8001cb8:	0028      	movs	r0, r5
 8001cba:	1aca      	subs	r2, r1, r3
 8001cbc:	40d0      	lsrs	r0, r2
 8001cbe:	409c      	lsls	r4, r3
 8001cc0:	0002      	movs	r2, r0
 8001cc2:	409d      	lsls	r5, r3
 8001cc4:	4322      	orrs	r2, r4
 8001cc6:	429f      	cmp	r7, r3
 8001cc8:	dd00      	ble.n	8001ccc <__aeabi_dsub+0xf4>
 8001cca:	e177      	b.n	8001fbc <__aeabi_dsub+0x3e4>
 8001ccc:	1bd8      	subs	r0, r3, r7
 8001cce:	3001      	adds	r0, #1
 8001cd0:	1a09      	subs	r1, r1, r0
 8001cd2:	002c      	movs	r4, r5
 8001cd4:	408d      	lsls	r5, r1
 8001cd6:	40c4      	lsrs	r4, r0
 8001cd8:	1e6b      	subs	r3, r5, #1
 8001cda:	419d      	sbcs	r5, r3
 8001cdc:	0013      	movs	r3, r2
 8001cde:	40c2      	lsrs	r2, r0
 8001ce0:	408b      	lsls	r3, r1
 8001ce2:	4325      	orrs	r5, r4
 8001ce4:	2700      	movs	r7, #0
 8001ce6:	0014      	movs	r4, r2
 8001ce8:	431d      	orrs	r5, r3
 8001cea:	076b      	lsls	r3, r5, #29
 8001cec:	d009      	beq.n	8001d02 <__aeabi_dsub+0x12a>
 8001cee:	230f      	movs	r3, #15
 8001cf0:	402b      	ands	r3, r5
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d005      	beq.n	8001d02 <__aeabi_dsub+0x12a>
 8001cf6:	1d2b      	adds	r3, r5, #4
 8001cf8:	42ab      	cmp	r3, r5
 8001cfa:	41ad      	sbcs	r5, r5
 8001cfc:	426d      	negs	r5, r5
 8001cfe:	1964      	adds	r4, r4, r5
 8001d00:	001d      	movs	r5, r3
 8001d02:	0223      	lsls	r3, r4, #8
 8001d04:	d400      	bmi.n	8001d08 <__aeabi_dsub+0x130>
 8001d06:	e140      	b.n	8001f8a <__aeabi_dsub+0x3b2>
 8001d08:	4a88      	ldr	r2, [pc, #544]	@ (8001f2c <__aeabi_dsub+0x354>)
 8001d0a:	3701      	adds	r7, #1
 8001d0c:	4297      	cmp	r7, r2
 8001d0e:	d100      	bne.n	8001d12 <__aeabi_dsub+0x13a>
 8001d10:	e101      	b.n	8001f16 <__aeabi_dsub+0x33e>
 8001d12:	2601      	movs	r6, #1
 8001d14:	4643      	mov	r3, r8
 8001d16:	4986      	ldr	r1, [pc, #536]	@ (8001f30 <__aeabi_dsub+0x358>)
 8001d18:	08ed      	lsrs	r5, r5, #3
 8001d1a:	4021      	ands	r1, r4
 8001d1c:	074a      	lsls	r2, r1, #29
 8001d1e:	432a      	orrs	r2, r5
 8001d20:	057c      	lsls	r4, r7, #21
 8001d22:	024d      	lsls	r5, r1, #9
 8001d24:	0b2d      	lsrs	r5, r5, #12
 8001d26:	0d64      	lsrs	r4, r4, #21
 8001d28:	401e      	ands	r6, r3
 8001d2a:	0524      	lsls	r4, r4, #20
 8001d2c:	432c      	orrs	r4, r5
 8001d2e:	07f6      	lsls	r6, r6, #31
 8001d30:	4334      	orrs	r4, r6
 8001d32:	0010      	movs	r0, r2
 8001d34:	0021      	movs	r1, r4
 8001d36:	b005      	add	sp, #20
 8001d38:	bcf0      	pop	{r4, r5, r6, r7}
 8001d3a:	46bb      	mov	fp, r7
 8001d3c:	46b2      	mov	sl, r6
 8001d3e:	46a9      	mov	r9, r5
 8001d40:	46a0      	mov	r8, r4
 8001d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d44:	2d00      	cmp	r5, #0
 8001d46:	dc00      	bgt.n	8001d4a <__aeabi_dsub+0x172>
 8001d48:	e2d0      	b.n	80022ec <__aeabi_dsub+0x714>
 8001d4a:	4649      	mov	r1, r9
 8001d4c:	2900      	cmp	r1, #0
 8001d4e:	d000      	beq.n	8001d52 <__aeabi_dsub+0x17a>
 8001d50:	e0d4      	b.n	8001efc <__aeabi_dsub+0x324>
 8001d52:	4661      	mov	r1, ip
 8001d54:	9b02      	ldr	r3, [sp, #8]
 8001d56:	4319      	orrs	r1, r3
 8001d58:	d100      	bne.n	8001d5c <__aeabi_dsub+0x184>
 8001d5a:	e12b      	b.n	8001fb4 <__aeabi_dsub+0x3dc>
 8001d5c:	1e69      	subs	r1, r5, #1
 8001d5e:	2d01      	cmp	r5, #1
 8001d60:	d100      	bne.n	8001d64 <__aeabi_dsub+0x18c>
 8001d62:	e1d9      	b.n	8002118 <__aeabi_dsub+0x540>
 8001d64:	4295      	cmp	r5, r2
 8001d66:	d100      	bne.n	8001d6a <__aeabi_dsub+0x192>
 8001d68:	e10a      	b.n	8001f80 <__aeabi_dsub+0x3a8>
 8001d6a:	2501      	movs	r5, #1
 8001d6c:	2938      	cmp	r1, #56	@ 0x38
 8001d6e:	dc17      	bgt.n	8001da0 <__aeabi_dsub+0x1c8>
 8001d70:	468a      	mov	sl, r1
 8001d72:	4653      	mov	r3, sl
 8001d74:	2b1f      	cmp	r3, #31
 8001d76:	dd00      	ble.n	8001d7a <__aeabi_dsub+0x1a2>
 8001d78:	e1e7      	b.n	800214a <__aeabi_dsub+0x572>
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	1ad2      	subs	r2, r2, r3
 8001d7e:	9b02      	ldr	r3, [sp, #8]
 8001d80:	4661      	mov	r1, ip
 8001d82:	4093      	lsls	r3, r2
 8001d84:	001d      	movs	r5, r3
 8001d86:	4653      	mov	r3, sl
 8001d88:	40d9      	lsrs	r1, r3
 8001d8a:	4663      	mov	r3, ip
 8001d8c:	4093      	lsls	r3, r2
 8001d8e:	001a      	movs	r2, r3
 8001d90:	430d      	orrs	r5, r1
 8001d92:	1e51      	subs	r1, r2, #1
 8001d94:	418a      	sbcs	r2, r1
 8001d96:	4653      	mov	r3, sl
 8001d98:	4315      	orrs	r5, r2
 8001d9a:	9a02      	ldr	r2, [sp, #8]
 8001d9c:	40da      	lsrs	r2, r3
 8001d9e:	18a4      	adds	r4, r4, r2
 8001da0:	182d      	adds	r5, r5, r0
 8001da2:	4285      	cmp	r5, r0
 8001da4:	4180      	sbcs	r0, r0
 8001da6:	4240      	negs	r0, r0
 8001da8:	1824      	adds	r4, r4, r0
 8001daa:	0223      	lsls	r3, r4, #8
 8001dac:	d400      	bmi.n	8001db0 <__aeabi_dsub+0x1d8>
 8001dae:	e0b6      	b.n	8001f1e <__aeabi_dsub+0x346>
 8001db0:	4b5e      	ldr	r3, [pc, #376]	@ (8001f2c <__aeabi_dsub+0x354>)
 8001db2:	3701      	adds	r7, #1
 8001db4:	429f      	cmp	r7, r3
 8001db6:	d100      	bne.n	8001dba <__aeabi_dsub+0x1e2>
 8001db8:	e0ad      	b.n	8001f16 <__aeabi_dsub+0x33e>
 8001dba:	2101      	movs	r1, #1
 8001dbc:	4b5c      	ldr	r3, [pc, #368]	@ (8001f30 <__aeabi_dsub+0x358>)
 8001dbe:	086a      	lsrs	r2, r5, #1
 8001dc0:	401c      	ands	r4, r3
 8001dc2:	4029      	ands	r1, r5
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	07e5      	lsls	r5, r4, #31
 8001dc8:	4315      	orrs	r5, r2
 8001dca:	0864      	lsrs	r4, r4, #1
 8001dcc:	e78d      	b.n	8001cea <__aeabi_dsub+0x112>
 8001dce:	4a59      	ldr	r2, [pc, #356]	@ (8001f34 <__aeabi_dsub+0x35c>)
 8001dd0:	9b02      	ldr	r3, [sp, #8]
 8001dd2:	4692      	mov	sl, r2
 8001dd4:	4662      	mov	r2, ip
 8001dd6:	44ba      	add	sl, r7
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	d02c      	beq.n	8001e36 <__aeabi_dsub+0x25e>
 8001ddc:	428e      	cmp	r6, r1
 8001dde:	d02e      	beq.n	8001e3e <__aeabi_dsub+0x266>
 8001de0:	4652      	mov	r2, sl
 8001de2:	2a00      	cmp	r2, #0
 8001de4:	d060      	beq.n	8001ea8 <__aeabi_dsub+0x2d0>
 8001de6:	2f00      	cmp	r7, #0
 8001de8:	d100      	bne.n	8001dec <__aeabi_dsub+0x214>
 8001dea:	e0db      	b.n	8001fa4 <__aeabi_dsub+0x3cc>
 8001dec:	4663      	mov	r3, ip
 8001dee:	000e      	movs	r6, r1
 8001df0:	9c02      	ldr	r4, [sp, #8]
 8001df2:	08d8      	lsrs	r0, r3, #3
 8001df4:	0762      	lsls	r2, r4, #29
 8001df6:	4302      	orrs	r2, r0
 8001df8:	08e4      	lsrs	r4, r4, #3
 8001dfa:	0013      	movs	r3, r2
 8001dfc:	4323      	orrs	r3, r4
 8001dfe:	d100      	bne.n	8001e02 <__aeabi_dsub+0x22a>
 8001e00:	e254      	b.n	80022ac <__aeabi_dsub+0x6d4>
 8001e02:	2580      	movs	r5, #128	@ 0x80
 8001e04:	032d      	lsls	r5, r5, #12
 8001e06:	4325      	orrs	r5, r4
 8001e08:	032d      	lsls	r5, r5, #12
 8001e0a:	4c48      	ldr	r4, [pc, #288]	@ (8001f2c <__aeabi_dsub+0x354>)
 8001e0c:	0b2d      	lsrs	r5, r5, #12
 8001e0e:	e78c      	b.n	8001d2a <__aeabi_dsub+0x152>
 8001e10:	4661      	mov	r1, ip
 8001e12:	9b02      	ldr	r3, [sp, #8]
 8001e14:	4319      	orrs	r1, r3
 8001e16:	d100      	bne.n	8001e1a <__aeabi_dsub+0x242>
 8001e18:	e0cc      	b.n	8001fb4 <__aeabi_dsub+0x3dc>
 8001e1a:	0029      	movs	r1, r5
 8001e1c:	3901      	subs	r1, #1
 8001e1e:	2d01      	cmp	r5, #1
 8001e20:	d100      	bne.n	8001e24 <__aeabi_dsub+0x24c>
 8001e22:	e188      	b.n	8002136 <__aeabi_dsub+0x55e>
 8001e24:	4295      	cmp	r5, r2
 8001e26:	d100      	bne.n	8001e2a <__aeabi_dsub+0x252>
 8001e28:	e0aa      	b.n	8001f80 <__aeabi_dsub+0x3a8>
 8001e2a:	2501      	movs	r5, #1
 8001e2c:	2938      	cmp	r1, #56	@ 0x38
 8001e2e:	dd00      	ble.n	8001e32 <__aeabi_dsub+0x25a>
 8001e30:	e72f      	b.n	8001c92 <__aeabi_dsub+0xba>
 8001e32:	468a      	mov	sl, r1
 8001e34:	e718      	b.n	8001c68 <__aeabi_dsub+0x90>
 8001e36:	2201      	movs	r2, #1
 8001e38:	4051      	eors	r1, r2
 8001e3a:	428e      	cmp	r6, r1
 8001e3c:	d1d0      	bne.n	8001de0 <__aeabi_dsub+0x208>
 8001e3e:	4653      	mov	r3, sl
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d100      	bne.n	8001e46 <__aeabi_dsub+0x26e>
 8001e44:	e0be      	b.n	8001fc4 <__aeabi_dsub+0x3ec>
 8001e46:	2f00      	cmp	r7, #0
 8001e48:	d000      	beq.n	8001e4c <__aeabi_dsub+0x274>
 8001e4a:	e138      	b.n	80020be <__aeabi_dsub+0x4e6>
 8001e4c:	46ca      	mov	sl, r9
 8001e4e:	0022      	movs	r2, r4
 8001e50:	4302      	orrs	r2, r0
 8001e52:	d100      	bne.n	8001e56 <__aeabi_dsub+0x27e>
 8001e54:	e1e2      	b.n	800221c <__aeabi_dsub+0x644>
 8001e56:	4653      	mov	r3, sl
 8001e58:	1e59      	subs	r1, r3, #1
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d100      	bne.n	8001e60 <__aeabi_dsub+0x288>
 8001e5e:	e20d      	b.n	800227c <__aeabi_dsub+0x6a4>
 8001e60:	4a32      	ldr	r2, [pc, #200]	@ (8001f2c <__aeabi_dsub+0x354>)
 8001e62:	4592      	cmp	sl, r2
 8001e64:	d100      	bne.n	8001e68 <__aeabi_dsub+0x290>
 8001e66:	e1d2      	b.n	800220e <__aeabi_dsub+0x636>
 8001e68:	2701      	movs	r7, #1
 8001e6a:	2938      	cmp	r1, #56	@ 0x38
 8001e6c:	dc13      	bgt.n	8001e96 <__aeabi_dsub+0x2be>
 8001e6e:	291f      	cmp	r1, #31
 8001e70:	dd00      	ble.n	8001e74 <__aeabi_dsub+0x29c>
 8001e72:	e1ee      	b.n	8002252 <__aeabi_dsub+0x67a>
 8001e74:	2220      	movs	r2, #32
 8001e76:	9b02      	ldr	r3, [sp, #8]
 8001e78:	1a52      	subs	r2, r2, r1
 8001e7a:	0025      	movs	r5, r4
 8001e7c:	0007      	movs	r7, r0
 8001e7e:	469a      	mov	sl, r3
 8001e80:	40cc      	lsrs	r4, r1
 8001e82:	4090      	lsls	r0, r2
 8001e84:	4095      	lsls	r5, r2
 8001e86:	40cf      	lsrs	r7, r1
 8001e88:	44a2      	add	sl, r4
 8001e8a:	1e42      	subs	r2, r0, #1
 8001e8c:	4190      	sbcs	r0, r2
 8001e8e:	4653      	mov	r3, sl
 8001e90:	432f      	orrs	r7, r5
 8001e92:	4307      	orrs	r7, r0
 8001e94:	9302      	str	r3, [sp, #8]
 8001e96:	003d      	movs	r5, r7
 8001e98:	4465      	add	r5, ip
 8001e9a:	4565      	cmp	r5, ip
 8001e9c:	4192      	sbcs	r2, r2
 8001e9e:	9b02      	ldr	r3, [sp, #8]
 8001ea0:	4252      	negs	r2, r2
 8001ea2:	464f      	mov	r7, r9
 8001ea4:	18d4      	adds	r4, r2, r3
 8001ea6:	e780      	b.n	8001daa <__aeabi_dsub+0x1d2>
 8001ea8:	4a23      	ldr	r2, [pc, #140]	@ (8001f38 <__aeabi_dsub+0x360>)
 8001eaa:	1c7d      	adds	r5, r7, #1
 8001eac:	4215      	tst	r5, r2
 8001eae:	d000      	beq.n	8001eb2 <__aeabi_dsub+0x2da>
 8001eb0:	e0aa      	b.n	8002008 <__aeabi_dsub+0x430>
 8001eb2:	4662      	mov	r2, ip
 8001eb4:	0025      	movs	r5, r4
 8001eb6:	9b02      	ldr	r3, [sp, #8]
 8001eb8:	4305      	orrs	r5, r0
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	2f00      	cmp	r7, #0
 8001ebe:	d000      	beq.n	8001ec2 <__aeabi_dsub+0x2ea>
 8001ec0:	e0f5      	b.n	80020ae <__aeabi_dsub+0x4d6>
 8001ec2:	2d00      	cmp	r5, #0
 8001ec4:	d100      	bne.n	8001ec8 <__aeabi_dsub+0x2f0>
 8001ec6:	e16b      	b.n	80021a0 <__aeabi_dsub+0x5c8>
 8001ec8:	2a00      	cmp	r2, #0
 8001eca:	d100      	bne.n	8001ece <__aeabi_dsub+0x2f6>
 8001ecc:	e152      	b.n	8002174 <__aeabi_dsub+0x59c>
 8001ece:	4663      	mov	r3, ip
 8001ed0:	1ac5      	subs	r5, r0, r3
 8001ed2:	9b02      	ldr	r3, [sp, #8]
 8001ed4:	1ae2      	subs	r2, r4, r3
 8001ed6:	42a8      	cmp	r0, r5
 8001ed8:	419b      	sbcs	r3, r3
 8001eda:	425b      	negs	r3, r3
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	021a      	lsls	r2, r3, #8
 8001ee0:	d400      	bmi.n	8001ee4 <__aeabi_dsub+0x30c>
 8001ee2:	e1d5      	b.n	8002290 <__aeabi_dsub+0x6b8>
 8001ee4:	4663      	mov	r3, ip
 8001ee6:	1a1d      	subs	r5, r3, r0
 8001ee8:	45ac      	cmp	ip, r5
 8001eea:	4192      	sbcs	r2, r2
 8001eec:	2601      	movs	r6, #1
 8001eee:	9b02      	ldr	r3, [sp, #8]
 8001ef0:	4252      	negs	r2, r2
 8001ef2:	1b1c      	subs	r4, r3, r4
 8001ef4:	4688      	mov	r8, r1
 8001ef6:	1aa4      	subs	r4, r4, r2
 8001ef8:	400e      	ands	r6, r1
 8001efa:	e6f6      	b.n	8001cea <__aeabi_dsub+0x112>
 8001efc:	4297      	cmp	r7, r2
 8001efe:	d03f      	beq.n	8001f80 <__aeabi_dsub+0x3a8>
 8001f00:	4652      	mov	r2, sl
 8001f02:	2501      	movs	r5, #1
 8001f04:	2a38      	cmp	r2, #56	@ 0x38
 8001f06:	dd00      	ble.n	8001f0a <__aeabi_dsub+0x332>
 8001f08:	e74a      	b.n	8001da0 <__aeabi_dsub+0x1c8>
 8001f0a:	2280      	movs	r2, #128	@ 0x80
 8001f0c:	9b02      	ldr	r3, [sp, #8]
 8001f0e:	0412      	lsls	r2, r2, #16
 8001f10:	4313      	orrs	r3, r2
 8001f12:	9302      	str	r3, [sp, #8]
 8001f14:	e72d      	b.n	8001d72 <__aeabi_dsub+0x19a>
 8001f16:	003c      	movs	r4, r7
 8001f18:	2500      	movs	r5, #0
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	e705      	b.n	8001d2a <__aeabi_dsub+0x152>
 8001f1e:	2307      	movs	r3, #7
 8001f20:	402b      	ands	r3, r5
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d000      	beq.n	8001f28 <__aeabi_dsub+0x350>
 8001f26:	e6e2      	b.n	8001cee <__aeabi_dsub+0x116>
 8001f28:	e06b      	b.n	8002002 <__aeabi_dsub+0x42a>
 8001f2a:	46c0      	nop			@ (mov r8, r8)
 8001f2c:	000007ff 	.word	0x000007ff
 8001f30:	ff7fffff 	.word	0xff7fffff
 8001f34:	fffff801 	.word	0xfffff801
 8001f38:	000007fe 	.word	0x000007fe
 8001f3c:	0028      	movs	r0, r5
 8001f3e:	f7fe fab3 	bl	80004a8 <__clzsi2>
 8001f42:	0003      	movs	r3, r0
 8001f44:	3318      	adds	r3, #24
 8001f46:	2b1f      	cmp	r3, #31
 8001f48:	dc00      	bgt.n	8001f4c <__aeabi_dsub+0x374>
 8001f4a:	e6b4      	b.n	8001cb6 <__aeabi_dsub+0xde>
 8001f4c:	002a      	movs	r2, r5
 8001f4e:	3808      	subs	r0, #8
 8001f50:	4082      	lsls	r2, r0
 8001f52:	429f      	cmp	r7, r3
 8001f54:	dd00      	ble.n	8001f58 <__aeabi_dsub+0x380>
 8001f56:	e0b9      	b.n	80020cc <__aeabi_dsub+0x4f4>
 8001f58:	1bdb      	subs	r3, r3, r7
 8001f5a:	1c58      	adds	r0, r3, #1
 8001f5c:	281f      	cmp	r0, #31
 8001f5e:	dc00      	bgt.n	8001f62 <__aeabi_dsub+0x38a>
 8001f60:	e1a0      	b.n	80022a4 <__aeabi_dsub+0x6cc>
 8001f62:	0015      	movs	r5, r2
 8001f64:	3b1f      	subs	r3, #31
 8001f66:	40dd      	lsrs	r5, r3
 8001f68:	2820      	cmp	r0, #32
 8001f6a:	d005      	beq.n	8001f78 <__aeabi_dsub+0x3a0>
 8001f6c:	2340      	movs	r3, #64	@ 0x40
 8001f6e:	1a1b      	subs	r3, r3, r0
 8001f70:	409a      	lsls	r2, r3
 8001f72:	1e53      	subs	r3, r2, #1
 8001f74:	419a      	sbcs	r2, r3
 8001f76:	4315      	orrs	r5, r2
 8001f78:	2307      	movs	r3, #7
 8001f7a:	2700      	movs	r7, #0
 8001f7c:	402b      	ands	r3, r5
 8001f7e:	e7d0      	b.n	8001f22 <__aeabi_dsub+0x34a>
 8001f80:	08c0      	lsrs	r0, r0, #3
 8001f82:	0762      	lsls	r2, r4, #29
 8001f84:	4302      	orrs	r2, r0
 8001f86:	08e4      	lsrs	r4, r4, #3
 8001f88:	e737      	b.n	8001dfa <__aeabi_dsub+0x222>
 8001f8a:	08ea      	lsrs	r2, r5, #3
 8001f8c:	0763      	lsls	r3, r4, #29
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	4bd3      	ldr	r3, [pc, #844]	@ (80022e0 <__aeabi_dsub+0x708>)
 8001f92:	08e4      	lsrs	r4, r4, #3
 8001f94:	429f      	cmp	r7, r3
 8001f96:	d100      	bne.n	8001f9a <__aeabi_dsub+0x3c2>
 8001f98:	e72f      	b.n	8001dfa <__aeabi_dsub+0x222>
 8001f9a:	0324      	lsls	r4, r4, #12
 8001f9c:	0b25      	lsrs	r5, r4, #12
 8001f9e:	057c      	lsls	r4, r7, #21
 8001fa0:	0d64      	lsrs	r4, r4, #21
 8001fa2:	e6c2      	b.n	8001d2a <__aeabi_dsub+0x152>
 8001fa4:	46ca      	mov	sl, r9
 8001fa6:	0022      	movs	r2, r4
 8001fa8:	4302      	orrs	r2, r0
 8001faa:	d158      	bne.n	800205e <__aeabi_dsub+0x486>
 8001fac:	4663      	mov	r3, ip
 8001fae:	000e      	movs	r6, r1
 8001fb0:	9c02      	ldr	r4, [sp, #8]
 8001fb2:	9303      	str	r3, [sp, #12]
 8001fb4:	9b03      	ldr	r3, [sp, #12]
 8001fb6:	4657      	mov	r7, sl
 8001fb8:	08da      	lsrs	r2, r3, #3
 8001fba:	e7e7      	b.n	8001f8c <__aeabi_dsub+0x3b4>
 8001fbc:	4cc9      	ldr	r4, [pc, #804]	@ (80022e4 <__aeabi_dsub+0x70c>)
 8001fbe:	1aff      	subs	r7, r7, r3
 8001fc0:	4014      	ands	r4, r2
 8001fc2:	e692      	b.n	8001cea <__aeabi_dsub+0x112>
 8001fc4:	4dc8      	ldr	r5, [pc, #800]	@ (80022e8 <__aeabi_dsub+0x710>)
 8001fc6:	1c7a      	adds	r2, r7, #1
 8001fc8:	422a      	tst	r2, r5
 8001fca:	d000      	beq.n	8001fce <__aeabi_dsub+0x3f6>
 8001fcc:	e084      	b.n	80020d8 <__aeabi_dsub+0x500>
 8001fce:	0022      	movs	r2, r4
 8001fd0:	4302      	orrs	r2, r0
 8001fd2:	2f00      	cmp	r7, #0
 8001fd4:	d000      	beq.n	8001fd8 <__aeabi_dsub+0x400>
 8001fd6:	e0ef      	b.n	80021b8 <__aeabi_dsub+0x5e0>
 8001fd8:	2a00      	cmp	r2, #0
 8001fda:	d100      	bne.n	8001fde <__aeabi_dsub+0x406>
 8001fdc:	e0e5      	b.n	80021aa <__aeabi_dsub+0x5d2>
 8001fde:	4662      	mov	r2, ip
 8001fe0:	9902      	ldr	r1, [sp, #8]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	d100      	bne.n	8001fe8 <__aeabi_dsub+0x410>
 8001fe6:	e0c5      	b.n	8002174 <__aeabi_dsub+0x59c>
 8001fe8:	4663      	mov	r3, ip
 8001fea:	18c5      	adds	r5, r0, r3
 8001fec:	468c      	mov	ip, r1
 8001fee:	4285      	cmp	r5, r0
 8001ff0:	4180      	sbcs	r0, r0
 8001ff2:	4464      	add	r4, ip
 8001ff4:	4240      	negs	r0, r0
 8001ff6:	1824      	adds	r4, r4, r0
 8001ff8:	0223      	lsls	r3, r4, #8
 8001ffa:	d502      	bpl.n	8002002 <__aeabi_dsub+0x42a>
 8001ffc:	4bb9      	ldr	r3, [pc, #740]	@ (80022e4 <__aeabi_dsub+0x70c>)
 8001ffe:	3701      	adds	r7, #1
 8002000:	401c      	ands	r4, r3
 8002002:	46ba      	mov	sl, r7
 8002004:	9503      	str	r5, [sp, #12]
 8002006:	e7d5      	b.n	8001fb4 <__aeabi_dsub+0x3dc>
 8002008:	4662      	mov	r2, ip
 800200a:	1a85      	subs	r5, r0, r2
 800200c:	42a8      	cmp	r0, r5
 800200e:	4192      	sbcs	r2, r2
 8002010:	4252      	negs	r2, r2
 8002012:	4691      	mov	r9, r2
 8002014:	9b02      	ldr	r3, [sp, #8]
 8002016:	1ae3      	subs	r3, r4, r3
 8002018:	001a      	movs	r2, r3
 800201a:	464b      	mov	r3, r9
 800201c:	1ad2      	subs	r2, r2, r3
 800201e:	0013      	movs	r3, r2
 8002020:	4691      	mov	r9, r2
 8002022:	021a      	lsls	r2, r3, #8
 8002024:	d46c      	bmi.n	8002100 <__aeabi_dsub+0x528>
 8002026:	464a      	mov	r2, r9
 8002028:	464c      	mov	r4, r9
 800202a:	432a      	orrs	r2, r5
 800202c:	d000      	beq.n	8002030 <__aeabi_dsub+0x458>
 800202e:	e63a      	b.n	8001ca6 <__aeabi_dsub+0xce>
 8002030:	2600      	movs	r6, #0
 8002032:	2400      	movs	r4, #0
 8002034:	2500      	movs	r5, #0
 8002036:	e678      	b.n	8001d2a <__aeabi_dsub+0x152>
 8002038:	9902      	ldr	r1, [sp, #8]
 800203a:	4653      	mov	r3, sl
 800203c:	000d      	movs	r5, r1
 800203e:	3a20      	subs	r2, #32
 8002040:	40d5      	lsrs	r5, r2
 8002042:	2b20      	cmp	r3, #32
 8002044:	d006      	beq.n	8002054 <__aeabi_dsub+0x47c>
 8002046:	2240      	movs	r2, #64	@ 0x40
 8002048:	1ad2      	subs	r2, r2, r3
 800204a:	000b      	movs	r3, r1
 800204c:	4093      	lsls	r3, r2
 800204e:	4662      	mov	r2, ip
 8002050:	431a      	orrs	r2, r3
 8002052:	4693      	mov	fp, r2
 8002054:	465b      	mov	r3, fp
 8002056:	1e5a      	subs	r2, r3, #1
 8002058:	4193      	sbcs	r3, r2
 800205a:	431d      	orrs	r5, r3
 800205c:	e619      	b.n	8001c92 <__aeabi_dsub+0xba>
 800205e:	4653      	mov	r3, sl
 8002060:	1e5a      	subs	r2, r3, #1
 8002062:	2b01      	cmp	r3, #1
 8002064:	d100      	bne.n	8002068 <__aeabi_dsub+0x490>
 8002066:	e0c6      	b.n	80021f6 <__aeabi_dsub+0x61e>
 8002068:	4e9d      	ldr	r6, [pc, #628]	@ (80022e0 <__aeabi_dsub+0x708>)
 800206a:	45b2      	cmp	sl, r6
 800206c:	d100      	bne.n	8002070 <__aeabi_dsub+0x498>
 800206e:	e6bd      	b.n	8001dec <__aeabi_dsub+0x214>
 8002070:	4688      	mov	r8, r1
 8002072:	000e      	movs	r6, r1
 8002074:	2501      	movs	r5, #1
 8002076:	2a38      	cmp	r2, #56	@ 0x38
 8002078:	dc10      	bgt.n	800209c <__aeabi_dsub+0x4c4>
 800207a:	2a1f      	cmp	r2, #31
 800207c:	dc7f      	bgt.n	800217e <__aeabi_dsub+0x5a6>
 800207e:	2120      	movs	r1, #32
 8002080:	0025      	movs	r5, r4
 8002082:	1a89      	subs	r1, r1, r2
 8002084:	0007      	movs	r7, r0
 8002086:	4088      	lsls	r0, r1
 8002088:	408d      	lsls	r5, r1
 800208a:	40d7      	lsrs	r7, r2
 800208c:	40d4      	lsrs	r4, r2
 800208e:	1e41      	subs	r1, r0, #1
 8002090:	4188      	sbcs	r0, r1
 8002092:	9b02      	ldr	r3, [sp, #8]
 8002094:	433d      	orrs	r5, r7
 8002096:	1b1b      	subs	r3, r3, r4
 8002098:	4305      	orrs	r5, r0
 800209a:	9302      	str	r3, [sp, #8]
 800209c:	4662      	mov	r2, ip
 800209e:	1b55      	subs	r5, r2, r5
 80020a0:	45ac      	cmp	ip, r5
 80020a2:	4192      	sbcs	r2, r2
 80020a4:	9b02      	ldr	r3, [sp, #8]
 80020a6:	4252      	negs	r2, r2
 80020a8:	464f      	mov	r7, r9
 80020aa:	1a9c      	subs	r4, r3, r2
 80020ac:	e5f6      	b.n	8001c9c <__aeabi_dsub+0xc4>
 80020ae:	2d00      	cmp	r5, #0
 80020b0:	d000      	beq.n	80020b4 <__aeabi_dsub+0x4dc>
 80020b2:	e0b7      	b.n	8002224 <__aeabi_dsub+0x64c>
 80020b4:	2a00      	cmp	r2, #0
 80020b6:	d100      	bne.n	80020ba <__aeabi_dsub+0x4e2>
 80020b8:	e0f0      	b.n	800229c <__aeabi_dsub+0x6c4>
 80020ba:	2601      	movs	r6, #1
 80020bc:	400e      	ands	r6, r1
 80020be:	4663      	mov	r3, ip
 80020c0:	9802      	ldr	r0, [sp, #8]
 80020c2:	08d9      	lsrs	r1, r3, #3
 80020c4:	0742      	lsls	r2, r0, #29
 80020c6:	430a      	orrs	r2, r1
 80020c8:	08c4      	lsrs	r4, r0, #3
 80020ca:	e696      	b.n	8001dfa <__aeabi_dsub+0x222>
 80020cc:	4c85      	ldr	r4, [pc, #532]	@ (80022e4 <__aeabi_dsub+0x70c>)
 80020ce:	1aff      	subs	r7, r7, r3
 80020d0:	4014      	ands	r4, r2
 80020d2:	0762      	lsls	r2, r4, #29
 80020d4:	08e4      	lsrs	r4, r4, #3
 80020d6:	e760      	b.n	8001f9a <__aeabi_dsub+0x3c2>
 80020d8:	4981      	ldr	r1, [pc, #516]	@ (80022e0 <__aeabi_dsub+0x708>)
 80020da:	428a      	cmp	r2, r1
 80020dc:	d100      	bne.n	80020e0 <__aeabi_dsub+0x508>
 80020de:	e0c9      	b.n	8002274 <__aeabi_dsub+0x69c>
 80020e0:	4663      	mov	r3, ip
 80020e2:	18c1      	adds	r1, r0, r3
 80020e4:	4281      	cmp	r1, r0
 80020e6:	4180      	sbcs	r0, r0
 80020e8:	9b02      	ldr	r3, [sp, #8]
 80020ea:	4240      	negs	r0, r0
 80020ec:	18e3      	adds	r3, r4, r3
 80020ee:	181b      	adds	r3, r3, r0
 80020f0:	07dd      	lsls	r5, r3, #31
 80020f2:	085c      	lsrs	r4, r3, #1
 80020f4:	2307      	movs	r3, #7
 80020f6:	0849      	lsrs	r1, r1, #1
 80020f8:	430d      	orrs	r5, r1
 80020fa:	0017      	movs	r7, r2
 80020fc:	402b      	ands	r3, r5
 80020fe:	e710      	b.n	8001f22 <__aeabi_dsub+0x34a>
 8002100:	4663      	mov	r3, ip
 8002102:	1a1d      	subs	r5, r3, r0
 8002104:	45ac      	cmp	ip, r5
 8002106:	4192      	sbcs	r2, r2
 8002108:	2601      	movs	r6, #1
 800210a:	9b02      	ldr	r3, [sp, #8]
 800210c:	4252      	negs	r2, r2
 800210e:	1b1c      	subs	r4, r3, r4
 8002110:	4688      	mov	r8, r1
 8002112:	1aa4      	subs	r4, r4, r2
 8002114:	400e      	ands	r6, r1
 8002116:	e5c6      	b.n	8001ca6 <__aeabi_dsub+0xce>
 8002118:	4663      	mov	r3, ip
 800211a:	18c5      	adds	r5, r0, r3
 800211c:	9b02      	ldr	r3, [sp, #8]
 800211e:	4285      	cmp	r5, r0
 8002120:	4180      	sbcs	r0, r0
 8002122:	469c      	mov	ip, r3
 8002124:	4240      	negs	r0, r0
 8002126:	4464      	add	r4, ip
 8002128:	1824      	adds	r4, r4, r0
 800212a:	2701      	movs	r7, #1
 800212c:	0223      	lsls	r3, r4, #8
 800212e:	d400      	bmi.n	8002132 <__aeabi_dsub+0x55a>
 8002130:	e6f5      	b.n	8001f1e <__aeabi_dsub+0x346>
 8002132:	2702      	movs	r7, #2
 8002134:	e641      	b.n	8001dba <__aeabi_dsub+0x1e2>
 8002136:	4663      	mov	r3, ip
 8002138:	1ac5      	subs	r5, r0, r3
 800213a:	42a8      	cmp	r0, r5
 800213c:	4180      	sbcs	r0, r0
 800213e:	9b02      	ldr	r3, [sp, #8]
 8002140:	4240      	negs	r0, r0
 8002142:	1ae4      	subs	r4, r4, r3
 8002144:	2701      	movs	r7, #1
 8002146:	1a24      	subs	r4, r4, r0
 8002148:	e5a8      	b.n	8001c9c <__aeabi_dsub+0xc4>
 800214a:	9d02      	ldr	r5, [sp, #8]
 800214c:	4652      	mov	r2, sl
 800214e:	002b      	movs	r3, r5
 8002150:	3a20      	subs	r2, #32
 8002152:	40d3      	lsrs	r3, r2
 8002154:	0019      	movs	r1, r3
 8002156:	4653      	mov	r3, sl
 8002158:	2b20      	cmp	r3, #32
 800215a:	d006      	beq.n	800216a <__aeabi_dsub+0x592>
 800215c:	2240      	movs	r2, #64	@ 0x40
 800215e:	1ad2      	subs	r2, r2, r3
 8002160:	002b      	movs	r3, r5
 8002162:	4093      	lsls	r3, r2
 8002164:	4662      	mov	r2, ip
 8002166:	431a      	orrs	r2, r3
 8002168:	4693      	mov	fp, r2
 800216a:	465d      	mov	r5, fp
 800216c:	1e6b      	subs	r3, r5, #1
 800216e:	419d      	sbcs	r5, r3
 8002170:	430d      	orrs	r5, r1
 8002172:	e615      	b.n	8001da0 <__aeabi_dsub+0x1c8>
 8002174:	0762      	lsls	r2, r4, #29
 8002176:	08c0      	lsrs	r0, r0, #3
 8002178:	4302      	orrs	r2, r0
 800217a:	08e4      	lsrs	r4, r4, #3
 800217c:	e70d      	b.n	8001f9a <__aeabi_dsub+0x3c2>
 800217e:	0011      	movs	r1, r2
 8002180:	0027      	movs	r7, r4
 8002182:	3920      	subs	r1, #32
 8002184:	40cf      	lsrs	r7, r1
 8002186:	2a20      	cmp	r2, #32
 8002188:	d005      	beq.n	8002196 <__aeabi_dsub+0x5be>
 800218a:	2140      	movs	r1, #64	@ 0x40
 800218c:	1a8a      	subs	r2, r1, r2
 800218e:	4094      	lsls	r4, r2
 8002190:	0025      	movs	r5, r4
 8002192:	4305      	orrs	r5, r0
 8002194:	9503      	str	r5, [sp, #12]
 8002196:	9d03      	ldr	r5, [sp, #12]
 8002198:	1e6a      	subs	r2, r5, #1
 800219a:	4195      	sbcs	r5, r2
 800219c:	433d      	orrs	r5, r7
 800219e:	e77d      	b.n	800209c <__aeabi_dsub+0x4c4>
 80021a0:	2a00      	cmp	r2, #0
 80021a2:	d100      	bne.n	80021a6 <__aeabi_dsub+0x5ce>
 80021a4:	e744      	b.n	8002030 <__aeabi_dsub+0x458>
 80021a6:	2601      	movs	r6, #1
 80021a8:	400e      	ands	r6, r1
 80021aa:	4663      	mov	r3, ip
 80021ac:	08d9      	lsrs	r1, r3, #3
 80021ae:	9b02      	ldr	r3, [sp, #8]
 80021b0:	075a      	lsls	r2, r3, #29
 80021b2:	430a      	orrs	r2, r1
 80021b4:	08dc      	lsrs	r4, r3, #3
 80021b6:	e6f0      	b.n	8001f9a <__aeabi_dsub+0x3c2>
 80021b8:	2a00      	cmp	r2, #0
 80021ba:	d028      	beq.n	800220e <__aeabi_dsub+0x636>
 80021bc:	4662      	mov	r2, ip
 80021be:	9f02      	ldr	r7, [sp, #8]
 80021c0:	08c0      	lsrs	r0, r0, #3
 80021c2:	433a      	orrs	r2, r7
 80021c4:	d100      	bne.n	80021c8 <__aeabi_dsub+0x5f0>
 80021c6:	e6dc      	b.n	8001f82 <__aeabi_dsub+0x3aa>
 80021c8:	0762      	lsls	r2, r4, #29
 80021ca:	4310      	orrs	r0, r2
 80021cc:	2280      	movs	r2, #128	@ 0x80
 80021ce:	08e4      	lsrs	r4, r4, #3
 80021d0:	0312      	lsls	r2, r2, #12
 80021d2:	4214      	tst	r4, r2
 80021d4:	d009      	beq.n	80021ea <__aeabi_dsub+0x612>
 80021d6:	08fd      	lsrs	r5, r7, #3
 80021d8:	4215      	tst	r5, r2
 80021da:	d106      	bne.n	80021ea <__aeabi_dsub+0x612>
 80021dc:	4663      	mov	r3, ip
 80021de:	2601      	movs	r6, #1
 80021e0:	002c      	movs	r4, r5
 80021e2:	08d8      	lsrs	r0, r3, #3
 80021e4:	077b      	lsls	r3, r7, #29
 80021e6:	4318      	orrs	r0, r3
 80021e8:	400e      	ands	r6, r1
 80021ea:	0f42      	lsrs	r2, r0, #29
 80021ec:	00c0      	lsls	r0, r0, #3
 80021ee:	08c0      	lsrs	r0, r0, #3
 80021f0:	0752      	lsls	r2, r2, #29
 80021f2:	4302      	orrs	r2, r0
 80021f4:	e601      	b.n	8001dfa <__aeabi_dsub+0x222>
 80021f6:	4663      	mov	r3, ip
 80021f8:	1a1d      	subs	r5, r3, r0
 80021fa:	45ac      	cmp	ip, r5
 80021fc:	4192      	sbcs	r2, r2
 80021fe:	9b02      	ldr	r3, [sp, #8]
 8002200:	4252      	negs	r2, r2
 8002202:	1b1c      	subs	r4, r3, r4
 8002204:	000e      	movs	r6, r1
 8002206:	4688      	mov	r8, r1
 8002208:	2701      	movs	r7, #1
 800220a:	1aa4      	subs	r4, r4, r2
 800220c:	e546      	b.n	8001c9c <__aeabi_dsub+0xc4>
 800220e:	4663      	mov	r3, ip
 8002210:	08d9      	lsrs	r1, r3, #3
 8002212:	9b02      	ldr	r3, [sp, #8]
 8002214:	075a      	lsls	r2, r3, #29
 8002216:	430a      	orrs	r2, r1
 8002218:	08dc      	lsrs	r4, r3, #3
 800221a:	e5ee      	b.n	8001dfa <__aeabi_dsub+0x222>
 800221c:	4663      	mov	r3, ip
 800221e:	9c02      	ldr	r4, [sp, #8]
 8002220:	9303      	str	r3, [sp, #12]
 8002222:	e6c7      	b.n	8001fb4 <__aeabi_dsub+0x3dc>
 8002224:	08c0      	lsrs	r0, r0, #3
 8002226:	2a00      	cmp	r2, #0
 8002228:	d100      	bne.n	800222c <__aeabi_dsub+0x654>
 800222a:	e6aa      	b.n	8001f82 <__aeabi_dsub+0x3aa>
 800222c:	0762      	lsls	r2, r4, #29
 800222e:	4310      	orrs	r0, r2
 8002230:	2280      	movs	r2, #128	@ 0x80
 8002232:	08e4      	lsrs	r4, r4, #3
 8002234:	0312      	lsls	r2, r2, #12
 8002236:	4214      	tst	r4, r2
 8002238:	d0d7      	beq.n	80021ea <__aeabi_dsub+0x612>
 800223a:	9f02      	ldr	r7, [sp, #8]
 800223c:	08fd      	lsrs	r5, r7, #3
 800223e:	4215      	tst	r5, r2
 8002240:	d1d3      	bne.n	80021ea <__aeabi_dsub+0x612>
 8002242:	4663      	mov	r3, ip
 8002244:	2601      	movs	r6, #1
 8002246:	08d8      	lsrs	r0, r3, #3
 8002248:	077b      	lsls	r3, r7, #29
 800224a:	002c      	movs	r4, r5
 800224c:	4318      	orrs	r0, r3
 800224e:	400e      	ands	r6, r1
 8002250:	e7cb      	b.n	80021ea <__aeabi_dsub+0x612>
 8002252:	000a      	movs	r2, r1
 8002254:	0027      	movs	r7, r4
 8002256:	3a20      	subs	r2, #32
 8002258:	40d7      	lsrs	r7, r2
 800225a:	2920      	cmp	r1, #32
 800225c:	d005      	beq.n	800226a <__aeabi_dsub+0x692>
 800225e:	2240      	movs	r2, #64	@ 0x40
 8002260:	1a52      	subs	r2, r2, r1
 8002262:	4094      	lsls	r4, r2
 8002264:	0025      	movs	r5, r4
 8002266:	4305      	orrs	r5, r0
 8002268:	9503      	str	r5, [sp, #12]
 800226a:	9d03      	ldr	r5, [sp, #12]
 800226c:	1e6a      	subs	r2, r5, #1
 800226e:	4195      	sbcs	r5, r2
 8002270:	432f      	orrs	r7, r5
 8002272:	e610      	b.n	8001e96 <__aeabi_dsub+0x2be>
 8002274:	0014      	movs	r4, r2
 8002276:	2500      	movs	r5, #0
 8002278:	2200      	movs	r2, #0
 800227a:	e556      	b.n	8001d2a <__aeabi_dsub+0x152>
 800227c:	9b02      	ldr	r3, [sp, #8]
 800227e:	4460      	add	r0, ip
 8002280:	4699      	mov	r9, r3
 8002282:	4560      	cmp	r0, ip
 8002284:	4192      	sbcs	r2, r2
 8002286:	444c      	add	r4, r9
 8002288:	4252      	negs	r2, r2
 800228a:	0005      	movs	r5, r0
 800228c:	18a4      	adds	r4, r4, r2
 800228e:	e74c      	b.n	800212a <__aeabi_dsub+0x552>
 8002290:	001a      	movs	r2, r3
 8002292:	001c      	movs	r4, r3
 8002294:	432a      	orrs	r2, r5
 8002296:	d000      	beq.n	800229a <__aeabi_dsub+0x6c2>
 8002298:	e6b3      	b.n	8002002 <__aeabi_dsub+0x42a>
 800229a:	e6c9      	b.n	8002030 <__aeabi_dsub+0x458>
 800229c:	2480      	movs	r4, #128	@ 0x80
 800229e:	2600      	movs	r6, #0
 80022a0:	0324      	lsls	r4, r4, #12
 80022a2:	e5ae      	b.n	8001e02 <__aeabi_dsub+0x22a>
 80022a4:	2120      	movs	r1, #32
 80022a6:	2500      	movs	r5, #0
 80022a8:	1a09      	subs	r1, r1, r0
 80022aa:	e517      	b.n	8001cdc <__aeabi_dsub+0x104>
 80022ac:	2200      	movs	r2, #0
 80022ae:	2500      	movs	r5, #0
 80022b0:	4c0b      	ldr	r4, [pc, #44]	@ (80022e0 <__aeabi_dsub+0x708>)
 80022b2:	e53a      	b.n	8001d2a <__aeabi_dsub+0x152>
 80022b4:	2d00      	cmp	r5, #0
 80022b6:	d100      	bne.n	80022ba <__aeabi_dsub+0x6e2>
 80022b8:	e5f6      	b.n	8001ea8 <__aeabi_dsub+0x2d0>
 80022ba:	464b      	mov	r3, r9
 80022bc:	1bda      	subs	r2, r3, r7
 80022be:	4692      	mov	sl, r2
 80022c0:	2f00      	cmp	r7, #0
 80022c2:	d100      	bne.n	80022c6 <__aeabi_dsub+0x6ee>
 80022c4:	e66f      	b.n	8001fa6 <__aeabi_dsub+0x3ce>
 80022c6:	2a38      	cmp	r2, #56	@ 0x38
 80022c8:	dc05      	bgt.n	80022d6 <__aeabi_dsub+0x6fe>
 80022ca:	2680      	movs	r6, #128	@ 0x80
 80022cc:	0436      	lsls	r6, r6, #16
 80022ce:	4334      	orrs	r4, r6
 80022d0:	4688      	mov	r8, r1
 80022d2:	000e      	movs	r6, r1
 80022d4:	e6d1      	b.n	800207a <__aeabi_dsub+0x4a2>
 80022d6:	4688      	mov	r8, r1
 80022d8:	000e      	movs	r6, r1
 80022da:	2501      	movs	r5, #1
 80022dc:	e6de      	b.n	800209c <__aeabi_dsub+0x4c4>
 80022de:	46c0      	nop			@ (mov r8, r8)
 80022e0:	000007ff 	.word	0x000007ff
 80022e4:	ff7fffff 	.word	0xff7fffff
 80022e8:	000007fe 	.word	0x000007fe
 80022ec:	2d00      	cmp	r5, #0
 80022ee:	d100      	bne.n	80022f2 <__aeabi_dsub+0x71a>
 80022f0:	e668      	b.n	8001fc4 <__aeabi_dsub+0x3ec>
 80022f2:	464b      	mov	r3, r9
 80022f4:	1bd9      	subs	r1, r3, r7
 80022f6:	2f00      	cmp	r7, #0
 80022f8:	d101      	bne.n	80022fe <__aeabi_dsub+0x726>
 80022fa:	468a      	mov	sl, r1
 80022fc:	e5a7      	b.n	8001e4e <__aeabi_dsub+0x276>
 80022fe:	2701      	movs	r7, #1
 8002300:	2938      	cmp	r1, #56	@ 0x38
 8002302:	dd00      	ble.n	8002306 <__aeabi_dsub+0x72e>
 8002304:	e5c7      	b.n	8001e96 <__aeabi_dsub+0x2be>
 8002306:	2280      	movs	r2, #128	@ 0x80
 8002308:	0412      	lsls	r2, r2, #16
 800230a:	4314      	orrs	r4, r2
 800230c:	e5af      	b.n	8001e6e <__aeabi_dsub+0x296>
 800230e:	46c0      	nop			@ (mov r8, r8)

08002310 <__aeabi_dcmpun>:
 8002310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002312:	46c6      	mov	lr, r8
 8002314:	031e      	lsls	r6, r3, #12
 8002316:	0b36      	lsrs	r6, r6, #12
 8002318:	46b0      	mov	r8, r6
 800231a:	4e0d      	ldr	r6, [pc, #52]	@ (8002350 <__aeabi_dcmpun+0x40>)
 800231c:	030c      	lsls	r4, r1, #12
 800231e:	004d      	lsls	r5, r1, #1
 8002320:	005f      	lsls	r7, r3, #1
 8002322:	b500      	push	{lr}
 8002324:	0b24      	lsrs	r4, r4, #12
 8002326:	0d6d      	lsrs	r5, r5, #21
 8002328:	0d7f      	lsrs	r7, r7, #21
 800232a:	42b5      	cmp	r5, r6
 800232c:	d00b      	beq.n	8002346 <__aeabi_dcmpun+0x36>
 800232e:	4908      	ldr	r1, [pc, #32]	@ (8002350 <__aeabi_dcmpun+0x40>)
 8002330:	2000      	movs	r0, #0
 8002332:	428f      	cmp	r7, r1
 8002334:	d104      	bne.n	8002340 <__aeabi_dcmpun+0x30>
 8002336:	4646      	mov	r6, r8
 8002338:	4316      	orrs	r6, r2
 800233a:	0030      	movs	r0, r6
 800233c:	1e43      	subs	r3, r0, #1
 800233e:	4198      	sbcs	r0, r3
 8002340:	bc80      	pop	{r7}
 8002342:	46b8      	mov	r8, r7
 8002344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002346:	4304      	orrs	r4, r0
 8002348:	2001      	movs	r0, #1
 800234a:	2c00      	cmp	r4, #0
 800234c:	d1f8      	bne.n	8002340 <__aeabi_dcmpun+0x30>
 800234e:	e7ee      	b.n	800232e <__aeabi_dcmpun+0x1e>
 8002350:	000007ff 	.word	0x000007ff

08002354 <__aeabi_d2iz>:
 8002354:	000b      	movs	r3, r1
 8002356:	0002      	movs	r2, r0
 8002358:	b570      	push	{r4, r5, r6, lr}
 800235a:	4d16      	ldr	r5, [pc, #88]	@ (80023b4 <__aeabi_d2iz+0x60>)
 800235c:	030c      	lsls	r4, r1, #12
 800235e:	b082      	sub	sp, #8
 8002360:	0049      	lsls	r1, r1, #1
 8002362:	2000      	movs	r0, #0
 8002364:	9200      	str	r2, [sp, #0]
 8002366:	9301      	str	r3, [sp, #4]
 8002368:	0b24      	lsrs	r4, r4, #12
 800236a:	0d49      	lsrs	r1, r1, #21
 800236c:	0fde      	lsrs	r6, r3, #31
 800236e:	42a9      	cmp	r1, r5
 8002370:	dd04      	ble.n	800237c <__aeabi_d2iz+0x28>
 8002372:	4811      	ldr	r0, [pc, #68]	@ (80023b8 <__aeabi_d2iz+0x64>)
 8002374:	4281      	cmp	r1, r0
 8002376:	dd03      	ble.n	8002380 <__aeabi_d2iz+0x2c>
 8002378:	4b10      	ldr	r3, [pc, #64]	@ (80023bc <__aeabi_d2iz+0x68>)
 800237a:	18f0      	adds	r0, r6, r3
 800237c:	b002      	add	sp, #8
 800237e:	bd70      	pop	{r4, r5, r6, pc}
 8002380:	2080      	movs	r0, #128	@ 0x80
 8002382:	0340      	lsls	r0, r0, #13
 8002384:	4320      	orrs	r0, r4
 8002386:	4c0e      	ldr	r4, [pc, #56]	@ (80023c0 <__aeabi_d2iz+0x6c>)
 8002388:	1a64      	subs	r4, r4, r1
 800238a:	2c1f      	cmp	r4, #31
 800238c:	dd08      	ble.n	80023a0 <__aeabi_d2iz+0x4c>
 800238e:	4b0d      	ldr	r3, [pc, #52]	@ (80023c4 <__aeabi_d2iz+0x70>)
 8002390:	1a5b      	subs	r3, r3, r1
 8002392:	40d8      	lsrs	r0, r3
 8002394:	0003      	movs	r3, r0
 8002396:	4258      	negs	r0, r3
 8002398:	2e00      	cmp	r6, #0
 800239a:	d1ef      	bne.n	800237c <__aeabi_d2iz+0x28>
 800239c:	0018      	movs	r0, r3
 800239e:	e7ed      	b.n	800237c <__aeabi_d2iz+0x28>
 80023a0:	4b09      	ldr	r3, [pc, #36]	@ (80023c8 <__aeabi_d2iz+0x74>)
 80023a2:	9a00      	ldr	r2, [sp, #0]
 80023a4:	469c      	mov	ip, r3
 80023a6:	0003      	movs	r3, r0
 80023a8:	4461      	add	r1, ip
 80023aa:	408b      	lsls	r3, r1
 80023ac:	40e2      	lsrs	r2, r4
 80023ae:	4313      	orrs	r3, r2
 80023b0:	e7f1      	b.n	8002396 <__aeabi_d2iz+0x42>
 80023b2:	46c0      	nop			@ (mov r8, r8)
 80023b4:	000003fe 	.word	0x000003fe
 80023b8:	0000041d 	.word	0x0000041d
 80023bc:	7fffffff 	.word	0x7fffffff
 80023c0:	00000433 	.word	0x00000433
 80023c4:	00000413 	.word	0x00000413
 80023c8:	fffffbed 	.word	0xfffffbed

080023cc <__aeabi_i2d>:
 80023cc:	b570      	push	{r4, r5, r6, lr}
 80023ce:	2800      	cmp	r0, #0
 80023d0:	d016      	beq.n	8002400 <__aeabi_i2d+0x34>
 80023d2:	17c3      	asrs	r3, r0, #31
 80023d4:	18c5      	adds	r5, r0, r3
 80023d6:	405d      	eors	r5, r3
 80023d8:	0fc4      	lsrs	r4, r0, #31
 80023da:	0028      	movs	r0, r5
 80023dc:	f7fe f864 	bl	80004a8 <__clzsi2>
 80023e0:	4b10      	ldr	r3, [pc, #64]	@ (8002424 <__aeabi_i2d+0x58>)
 80023e2:	1a1b      	subs	r3, r3, r0
 80023e4:	055b      	lsls	r3, r3, #21
 80023e6:	0d5b      	lsrs	r3, r3, #21
 80023e8:	280a      	cmp	r0, #10
 80023ea:	dc14      	bgt.n	8002416 <__aeabi_i2d+0x4a>
 80023ec:	0002      	movs	r2, r0
 80023ee:	002e      	movs	r6, r5
 80023f0:	3215      	adds	r2, #21
 80023f2:	4096      	lsls	r6, r2
 80023f4:	220b      	movs	r2, #11
 80023f6:	1a12      	subs	r2, r2, r0
 80023f8:	40d5      	lsrs	r5, r2
 80023fa:	032d      	lsls	r5, r5, #12
 80023fc:	0b2d      	lsrs	r5, r5, #12
 80023fe:	e003      	b.n	8002408 <__aeabi_i2d+0x3c>
 8002400:	2400      	movs	r4, #0
 8002402:	2300      	movs	r3, #0
 8002404:	2500      	movs	r5, #0
 8002406:	2600      	movs	r6, #0
 8002408:	051b      	lsls	r3, r3, #20
 800240a:	432b      	orrs	r3, r5
 800240c:	07e4      	lsls	r4, r4, #31
 800240e:	4323      	orrs	r3, r4
 8002410:	0030      	movs	r0, r6
 8002412:	0019      	movs	r1, r3
 8002414:	bd70      	pop	{r4, r5, r6, pc}
 8002416:	380b      	subs	r0, #11
 8002418:	4085      	lsls	r5, r0
 800241a:	032d      	lsls	r5, r5, #12
 800241c:	2600      	movs	r6, #0
 800241e:	0b2d      	lsrs	r5, r5, #12
 8002420:	e7f2      	b.n	8002408 <__aeabi_i2d+0x3c>
 8002422:	46c0      	nop			@ (mov r8, r8)
 8002424:	0000041e 	.word	0x0000041e

08002428 <__aeabi_ui2d>:
 8002428:	b510      	push	{r4, lr}
 800242a:	1e04      	subs	r4, r0, #0
 800242c:	d010      	beq.n	8002450 <__aeabi_ui2d+0x28>
 800242e:	f7fe f83b 	bl	80004a8 <__clzsi2>
 8002432:	4b0e      	ldr	r3, [pc, #56]	@ (800246c <__aeabi_ui2d+0x44>)
 8002434:	1a1b      	subs	r3, r3, r0
 8002436:	055b      	lsls	r3, r3, #21
 8002438:	0d5b      	lsrs	r3, r3, #21
 800243a:	280a      	cmp	r0, #10
 800243c:	dc0f      	bgt.n	800245e <__aeabi_ui2d+0x36>
 800243e:	220b      	movs	r2, #11
 8002440:	0021      	movs	r1, r4
 8002442:	1a12      	subs	r2, r2, r0
 8002444:	40d1      	lsrs	r1, r2
 8002446:	3015      	adds	r0, #21
 8002448:	030a      	lsls	r2, r1, #12
 800244a:	4084      	lsls	r4, r0
 800244c:	0b12      	lsrs	r2, r2, #12
 800244e:	e001      	b.n	8002454 <__aeabi_ui2d+0x2c>
 8002450:	2300      	movs	r3, #0
 8002452:	2200      	movs	r2, #0
 8002454:	051b      	lsls	r3, r3, #20
 8002456:	4313      	orrs	r3, r2
 8002458:	0020      	movs	r0, r4
 800245a:	0019      	movs	r1, r3
 800245c:	bd10      	pop	{r4, pc}
 800245e:	0022      	movs	r2, r4
 8002460:	380b      	subs	r0, #11
 8002462:	4082      	lsls	r2, r0
 8002464:	0312      	lsls	r2, r2, #12
 8002466:	2400      	movs	r4, #0
 8002468:	0b12      	lsrs	r2, r2, #12
 800246a:	e7f3      	b.n	8002454 <__aeabi_ui2d+0x2c>
 800246c:	0000041e 	.word	0x0000041e

08002470 <__clzdi2>:
 8002470:	b510      	push	{r4, lr}
 8002472:	2900      	cmp	r1, #0
 8002474:	d103      	bne.n	800247e <__clzdi2+0xe>
 8002476:	f7fe f817 	bl	80004a8 <__clzsi2>
 800247a:	3020      	adds	r0, #32
 800247c:	e002      	b.n	8002484 <__clzdi2+0x14>
 800247e:	0008      	movs	r0, r1
 8002480:	f7fe f812 	bl	80004a8 <__clzsi2>
 8002484:	bd10      	pop	{r4, pc}
 8002486:	46c0      	nop			@ (mov r8, r8)

08002488 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2201      	movs	r2, #1
 8002496:	4013      	ands	r3, r2
 8002498:	2b01      	cmp	r3, #1
 800249a:	d101      	bne.n	80024a0 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800249c:	2301      	movs	r3, #1
 800249e:	e000      	b.n	80024a2 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	0018      	movs	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	b002      	add	sp, #8
 80024a8:	bd80      	pop	{r7, pc}

080024aa <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2202      	movs	r2, #2
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d101      	bne.n	80024c2 <LL_SPI_IsActiveFlag_TXE+0x18>
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	0018      	movs	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b002      	add	sp, #8
 80024ca:	bd80      	pop	{r7, pc}

080024cc <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	330c      	adds	r3, #12
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	b2db      	uxtb	r3, r3
}
 80024dc:	0018      	movs	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	b002      	add	sp, #8
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	000a      	movs	r2, r1
 80024ee:	1cfb      	adds	r3, r7, #3
 80024f0:	701a      	strb	r2, [r3, #0]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	330c      	adds	r3, #12
 80024f6:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	1cfa      	adds	r2, r7, #3
 80024fc:	7812      	ldrb	r2, [r2, #0]
 80024fe:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8002500:	46c0      	nop			@ (mov r8, r8)
 8002502:	46bd      	mov	sp, r7
 8002504:	b004      	add	sp, #16
 8002506:	bd80      	pop	{r7, pc}

08002508 <spi_select_slave>:
 * @brief True if we've set the RTC from the cloud time
 */
// bool timeSet = false;

static inline void spi_select_slave(bool select)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	0002      	movs	r2, r0
 8002510:	1dfb      	adds	r3, r7, #7
 8002512:	701a      	strb	r2, [r3, #0]
    if (select)
 8002514:	1dfb      	adds	r3, r7, #7
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d004      	beq.n	8002526 <spi_select_slave+0x1e>
    {
        RTC_H();
 800251c:	4b06      	ldr	r3, [pc, #24]	@ (8002538 <spi_select_slave+0x30>)
 800251e:	2280      	movs	r2, #128	@ 0x80
 8002520:	01d2      	lsls	r2, r2, #7
 8002522:	619a      	str	r2, [r3, #24]
    }
    else
    {
        RTC_L();
    }
}
 8002524:	e003      	b.n	800252e <spi_select_slave+0x26>
        RTC_L();
 8002526:	4b04      	ldr	r3, [pc, #16]	@ (8002538 <spi_select_slave+0x30>)
 8002528:	2280      	movs	r2, #128	@ 0x80
 800252a:	05d2      	lsls	r2, r2, #23
 800252c:	619a      	str	r2, [r3, #24]
}
 800252e:	46c0      	nop			@ (mov r8, r8)
 8002530:	46bd      	mov	sp, r7
 8002532:	b002      	add	sp, #8
 8002534:	bd80      	pop	{r7, pc}
 8002536:	46c0      	nop			@ (mov r8, r8)
 8002538:	50000400 	.word	0x50000400

0800253c <resetConfig>:

    return (value & REG_OSC_STATUS_OMODE) != 0;
}

bool resetConfig(uint32_t flags)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
    printf("resetConfig(0x%08lx)\n", flags);
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	4b3f      	ldr	r3, [pc, #252]	@ (8002644 <resetConfig+0x108>)
 8002548:	0011      	movs	r1, r2
 800254a:	0018      	movs	r0, r3
 800254c:	f002 fd36 	bl	8004fbc <printf_>

    // Reset configuration registers to default values
    write_rtc_register(REG_STATUS, REG_STATUS_DEFAULT);
 8002550:	230f      	movs	r3, #15
 8002552:	2200      	movs	r2, #0
 8002554:	0011      	movs	r1, r2
 8002556:	0018      	movs	r0, r3
 8002558:	f000 fb6a 	bl	8002c30 <write_rtc_register>
    write_rtc_register(REG_CTRL_1, REG_CTRL_1_DEFAULT);
 800255c:	2310      	movs	r3, #16
 800255e:	2212      	movs	r2, #18
 8002560:	0011      	movs	r1, r2
 8002562:	0018      	movs	r0, r3
 8002564:	f000 fb64 	bl	8002c30 <write_rtc_register>
    write_rtc_register(REG_CTRL_2, REG_CTRL_2_DEFAULT);
 8002568:	2311      	movs	r3, #17
 800256a:	223c      	movs	r2, #60	@ 0x3c
 800256c:	0011      	movs	r1, r2
 800256e:	0018      	movs	r0, r3
 8002570:	f000 fb5e 	bl	8002c30 <write_rtc_register>
    write_rtc_register(REG_INT_MASK, REG_INT_MASK_DEFAULT);
 8002574:	2312      	movs	r3, #18
 8002576:	22e0      	movs	r2, #224	@ 0xe0
 8002578:	0011      	movs	r1, r2
 800257a:	0018      	movs	r0, r3
 800257c:	f000 fb58 	bl	8002c30 <write_rtc_register>
    write_rtc_register(REG_SQW, REG_SQW_DEFAULT);
 8002580:	2313      	movs	r3, #19
 8002582:	2226      	movs	r2, #38	@ 0x26
 8002584:	0011      	movs	r1, r2
 8002586:	0018      	movs	r0, r3
 8002588:	f000 fb52 	bl	8002c30 <write_rtc_register>
    write_rtc_register(REG_SLEEP_CTRL, REG_SLEEP_CTRL_DEFAULT);
 800258c:	2317      	movs	r3, #23
 800258e:	2200      	movs	r2, #0
 8002590:	0011      	movs	r1, r2
 8002592:	0018      	movs	r0, r3
 8002594:	f000 fb4c 	bl	8002c30 <write_rtc_register>

    if ((flags & RESET_PRESERVE_REPEATING_TIMER) != 0)
 8002598:	2201      	movs	r2, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4013      	ands	r3, r2
 800259e:	d010      	beq.n	80025c2 <resetConfig+0x86>
    {
        maskRegister(REG_TIMER_CTRL, ~REG_TIMER_CTRL_RPT_MASK, REG_TIMER_CTRL_DEFAULT & ~REG_TIMER_CTRL_RPT_MASK, false);
 80025a0:	2018      	movs	r0, #24
 80025a2:	231c      	movs	r3, #28
 80025a4:	43db      	mvns	r3, r3
 80025a6:	b2d9      	uxtb	r1, r3
 80025a8:	231c      	movs	r3, #28
 80025aa:	b25b      	sxtb	r3, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	b25b      	sxtb	r3, r3
 80025b0:	2223      	movs	r2, #35	@ 0x23
 80025b2:	b252      	sxtb	r2, r2
 80025b4:	4013      	ands	r3, r2
 80025b6:	b25b      	sxtb	r3, r3
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	2300      	movs	r3, #0
 80025bc:	f000 fa56 	bl	8002a6c <maskRegister>
 80025c0:	e005      	b.n	80025ce <resetConfig+0x92>
    }
    else
    {
        write_rtc_register(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
 80025c2:	2318      	movs	r3, #24
 80025c4:	2223      	movs	r2, #35	@ 0x23
 80025c6:	0011      	movs	r1, r2
 80025c8:	0018      	movs	r0, r3
 80025ca:	f000 fb31 	bl	8002c30 <write_rtc_register>
    }

    write_rtc_register(REG_TIMER, REG_TIMER_DEFAULT);
 80025ce:	2319      	movs	r3, #25
 80025d0:	2200      	movs	r2, #0
 80025d2:	0011      	movs	r1, r2
 80025d4:	0018      	movs	r0, r3
 80025d6:	f000 fb2b 	bl	8002c30 <write_rtc_register>
    write_rtc_register(REG_TIMER_INITIAL, REG_TIMER_INITIAL_DEFAULT);
 80025da:	231a      	movs	r3, #26
 80025dc:	2200      	movs	r2, #0
 80025de:	0011      	movs	r1, r2
 80025e0:	0018      	movs	r0, r3
 80025e2:	f000 fb25 	bl	8002c30 <write_rtc_register>
    write_rtc_register(REG_WDT, REG_WDT_DEFAULT);
 80025e6:	231b      	movs	r3, #27
 80025e8:	2200      	movs	r2, #0
 80025ea:	0011      	movs	r1, r2
 80025ec:	0018      	movs	r0, r3
 80025ee:	f000 fb1f 	bl	8002c30 <write_rtc_register>

    uint8_t oscCtrl = REG_OSC_CTRL_DEFAULT;
 80025f2:	200f      	movs	r0, #15
 80025f4:	183b      	adds	r3, r7, r0
 80025f6:	2200      	movs	r2, #0
 80025f8:	701a      	strb	r2, [r3, #0]
    if ((flags & RESET_DISABLE_XT) != 0)
 80025fa:	2202      	movs	r2, #2
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4013      	ands	r3, r2
 8002600:	d008      	beq.n	8002614 <resetConfig+0xd8>
    {
        // If disabling XT oscillator, set OSEL to 1 (RC oscillator)
        // Also enable FOS so if the XT oscillator fails, it will switch to RC (just in case)
        // and ACAL to 0 (however REG_OSC_CTRL_DEFAULT already sets ACAL to 0)
        oscCtrl |= REG_OSC_CTRL_OSEL | REG_OSC_CTRL_FOS;
 8002602:	2280      	movs	r2, #128	@ 0x80
 8002604:	2308      	movs	r3, #8
 8002606:	4313      	orrs	r3, r2
 8002608:	b2d9      	uxtb	r1, r3
 800260a:	183b      	adds	r3, r7, r0
 800260c:	183a      	adds	r2, r7, r0
 800260e:	7812      	ldrb	r2, [r2, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	701a      	strb	r2, [r3, #0]
    }
    // write_rtc_register(REG_OSC_CTRL, oscCtrl);
    // write_rtc_register(REG_TRICKLE, REG_TRICKLE_DEFAULT);
    write_rtc_register(REG_BREF_CTRL, REG_BREF_CTRL_DEFAULT);
 8002614:	2321      	movs	r3, #33	@ 0x21
 8002616:	22f0      	movs	r2, #240	@ 0xf0
 8002618:	0011      	movs	r1, r2
 800261a:	0018      	movs	r0, r3
 800261c:	f000 fb08 	bl	8002c30 <write_rtc_register>
    write_rtc_register(REG_AFCTRL, REG_AFCTRL_DEFAULT);
 8002620:	2326      	movs	r3, #38	@ 0x26
 8002622:	2200      	movs	r2, #0
 8002624:	0011      	movs	r1, r2
 8002626:	0018      	movs	r0, r3
 8002628:	f000 fb02 	bl	8002c30 <write_rtc_register>
    // write_rtc_register(REG_BATMODE_IO, REG_BATMODE_IO_DEFAULT);
    write_rtc_register(REG_OCTRL, REG_OCTRL_DEFAULT);
 800262c:	2330      	movs	r3, #48	@ 0x30
 800262e:	2200      	movs	r2, #0
 8002630:	0011      	movs	r1, r2
 8002632:	0018      	movs	r0, r3
 8002634:	f000 fafc 	bl	8002c30 <write_rtc_register>

    return true;
 8002638:	2301      	movs	r3, #1
}
 800263a:	0018      	movs	r0, r3
 800263c:	46bd      	mov	sp, r7
 800263e:	b004      	add	sp, #16
 8002640:	bd80      	pop	{r7, pc}
 8002642:	46c0      	nop			@ (mov r8, r8)
 8002644:	0800be54 	.word	0x0800be54

08002648 <setWDT>:

    return true;
}

bool setWDT(int seconds)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
    bool bResult = false;
 8002650:	230f      	movs	r3, #15
 8002652:	18fb      	adds	r3, r7, r3
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
    // printf("setWDT %d\n", seconds);

    if (seconds < 0)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	da02      	bge.n	8002664 <setWDT+0x1c>
    {
        seconds = watchdogSecs;
 800265e:	4b2d      	ldr	r3, [pc, #180]	@ (8002714 <setWDT+0xcc>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	607b      	str	r3, [r7, #4]
    }

    if (seconds == 0)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d112      	bne.n	8002690 <setWDT+0x48>
    {
        // Disable WDT
        bResult = write_rtc_register(REG_WDT, 0x00);
 800266a:	231b      	movs	r3, #27
 800266c:	2100      	movs	r1, #0
 800266e:	0018      	movs	r0, r3
 8002670:	f000 fade 	bl	8002c30 <write_rtc_register>
 8002674:	0003      	movs	r3, r0
 8002676:	001a      	movs	r2, r3
 8002678:	230f      	movs	r3, #15
 800267a:	18fb      	adds	r3, r7, r3
 800267c:	1e51      	subs	r1, r2, #1
 800267e:	418a      	sbcs	r2, r1
 8002680:	701a      	strb	r2, [r3, #0]

        watchdogSecs = 0;
 8002682:	4b24      	ldr	r3, [pc, #144]	@ (8002714 <setWDT+0xcc>)
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
        watchdogUpdatePeriod = 0;
 8002688:	4b23      	ldr	r3, [pc, #140]	@ (8002718 <setWDT+0xd0>)
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	e03a      	b.n	8002706 <setWDT+0xbe>
    }
    else
    {
        // Use 1/4 Hz clock
        int fourSecs = seconds / 4;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	da00      	bge.n	8002698 <setWDT+0x50>
 8002696:	3303      	adds	r3, #3
 8002698:	109b      	asrs	r3, r3, #2
 800269a:	60bb      	str	r3, [r7, #8]
        if (fourSecs < 1)
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	dc01      	bgt.n	80026a6 <setWDT+0x5e>
        {
            fourSecs = 1;
 80026a2:	2301      	movs	r3, #1
 80026a4:	60bb      	str	r3, [r7, #8]
        }
        if (fourSecs > 31)
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2b1f      	cmp	r3, #31
 80026aa:	dd01      	ble.n	80026b0 <setWDT+0x68>
        {
            fourSecs = 31;
 80026ac:	231f      	movs	r3, #31
 80026ae:	60bb      	str	r3, [r7, #8]
        }
        bResult = write_rtc_register(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
 80026b0:	201b      	movs	r0, #27
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	b25a      	sxtb	r2, r3
 80026b8:	2380      	movs	r3, #128	@ 0x80
 80026ba:	b25b      	sxtb	r3, r3
 80026bc:	4313      	orrs	r3, r2
 80026be:	b25a      	sxtb	r2, r3
 80026c0:	2303      	movs	r3, #3
 80026c2:	b25b      	sxtb	r3, r3
 80026c4:	4313      	orrs	r3, r2
 80026c6:	b25b      	sxtb	r3, r3
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	0019      	movs	r1, r3
 80026cc:	f000 fab0 	bl	8002c30 <write_rtc_register>
 80026d0:	0003      	movs	r3, r0
 80026d2:	001a      	movs	r2, r3
 80026d4:	200f      	movs	r0, #15
 80026d6:	183b      	adds	r3, r7, r0
 80026d8:	1e51      	subs	r1, r2, #1
 80026da:	418a      	sbcs	r2, r1
 80026dc:	701a      	strb	r2, [r3, #0]

        printf("watchdog set fourSecs=%d bResult=%d\n", fourSecs, bResult);
 80026de:	183b      	adds	r3, r7, r0
 80026e0:	781a      	ldrb	r2, [r3, #0]
 80026e2:	68b9      	ldr	r1, [r7, #8]
 80026e4:	4b0d      	ldr	r3, [pc, #52]	@ (800271c <setWDT+0xd4>)
 80026e6:	0018      	movs	r0, r3
 80026e8:	f002 fc68 	bl	8004fbc <printf_>

        watchdogSecs = seconds;
 80026ec:	4b09      	ldr	r3, [pc, #36]	@ (8002714 <setWDT+0xcc>)
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	601a      	str	r2, [r3, #0]

        // Update watchdog half way through period
        watchdogUpdatePeriod = (fourSecs * 2000);
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	0013      	movs	r3, r2
 80026f6:	015b      	lsls	r3, r3, #5
 80026f8:	1a9b      	subs	r3, r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	189b      	adds	r3, r3, r2
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	001a      	movs	r2, r3
 8002702:	4b05      	ldr	r3, [pc, #20]	@ (8002718 <setWDT+0xd0>)
 8002704:	601a      	str	r2, [r3, #0]
    }

    return bResult;
 8002706:	230f      	movs	r3, #15
 8002708:	18fb      	adds	r3, r7, r3
 800270a:	781b      	ldrb	r3, [r3, #0]
}
 800270c:	0018      	movs	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	b004      	add	sp, #16
 8002712:	bd80      	pop	{r7, pc}
 8002714:	200001f4 	.word	0x200001f4
 8002718:	200001f8 	.word	0x200001f8
 800271c:	0800beb4 	.word	0x0800beb4

08002720 <deepPowerDown>:

    return true;
}

bool deepPowerDown(int seconds)
{
 8002720:	b5b0      	push	{r4, r5, r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
    const char *errorMsg = "failure in deepPowerDown %d\n";
 8002728:	4b6f      	ldr	r3, [pc, #444]	@ (80028e8 <deepPowerDown+0x1c8>)
 800272a:	617b      	str	r3, [r7, #20]
    bool bResult;

    printf("deepPowerDown %d\n", seconds);
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	4b6f      	ldr	r3, [pc, #444]	@ (80028ec <deepPowerDown+0x1cc>)
 8002730:	0011      	movs	r1, r2
 8002732:	0018      	movs	r0, r3
 8002734:	f002 fc42 	bl	8004fbc <printf_>

    // Disable watchdog
    bResult = setWDT(0);
 8002738:	2513      	movs	r5, #19
 800273a:	197c      	adds	r4, r7, r5
 800273c:	2000      	movs	r0, #0
 800273e:	f7ff ff83 	bl	8002648 <setWDT>
 8002742:	0003      	movs	r3, r0
 8002744:	7023      	strb	r3, [r4, #0]
    if (!bResult)
 8002746:	197b      	adds	r3, r7, r5
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2201      	movs	r2, #1
 800274c:	4053      	eors	r3, r2
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	d009      	beq.n	8002768 <deepPowerDown+0x48>
    {
        printf(errorMsg, __LINE__);
 8002754:	2346      	movs	r3, #70	@ 0x46
 8002756:	33ff      	adds	r3, #255	@ 0xff
 8002758:	001a      	movs	r2, r3
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	0011      	movs	r1, r2
 800275e:	0018      	movs	r0, r3
 8002760:	f002 fc2c 	bl	8004fbc <printf_>
        return false;
 8002764:	2300      	movs	r3, #0
 8002766:	e0ba      	b.n	80028de <deepPowerDown+0x1be>
    }

    bResult = setCountdownTimer(seconds, false);
 8002768:	2513      	movs	r5, #19
 800276a:	197c      	adds	r4, r7, r5
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2100      	movs	r1, #0
 8002770:	0018      	movs	r0, r3
 8002772:	f000 f8c1 	bl	80028f8 <setCountdownTimer>
 8002776:	0003      	movs	r3, r0
 8002778:	7023      	strb	r3, [r4, #0]
    if (!bResult)
 800277a:	197b      	adds	r3, r7, r5
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2201      	movs	r2, #1
 8002780:	4053      	eors	r3, r2
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d008      	beq.n	800279a <deepPowerDown+0x7a>
    {
        printf(errorMsg, __LINE__);
 8002788:	23a6      	movs	r3, #166	@ 0xa6
 800278a:	005a      	lsls	r2, r3, #1
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	0011      	movs	r1, r2
 8002790:	0018      	movs	r0, r3
 8002792:	f002 fc13 	bl	8004fbc <printf_>
        return false;
 8002796:	2300      	movs	r3, #0
 8002798:	e0a1      	b.n	80028de <deepPowerDown+0x1be>
    }

    // Make sure STOP (stop clocking system is 0, otherwise sleep mode cannot be entered)
    // PWR2 = 1 (low resistance power switch)
    // (also would probably work with PWR2 = 0, as nIRQ2 should be high-true for sleep mode)
    bResult = maskRegister(REG_CTRL_1, (uint8_t) ~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2, 0);
 800279a:	2010      	movs	r0, #16
 800279c:	2280      	movs	r2, #128	@ 0x80
 800279e:	2308      	movs	r3, #8
 80027a0:	4313      	orrs	r3, r2
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	b2d9      	uxtb	r1, r3
 80027a8:	2202      	movs	r2, #2
 80027aa:	2513      	movs	r5, #19
 80027ac:	197c      	adds	r4, r7, r5
 80027ae:	2300      	movs	r3, #0
 80027b0:	f000 f95c 	bl	8002a6c <maskRegister>
 80027b4:	0003      	movs	r3, r0
 80027b6:	7023      	strb	r3, [r4, #0]
    if (!bResult)
 80027b8:	197b      	adds	r3, r7, r5
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2201      	movs	r2, #1
 80027be:	4053      	eors	r3, r2
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d008      	beq.n	80027d8 <deepPowerDown+0xb8>
    {
        printf(errorMsg, __LINE__);
 80027c6:	23ab      	movs	r3, #171	@ 0xab
 80027c8:	005a      	lsls	r2, r3, #1
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	0011      	movs	r1, r2
 80027ce:	0018      	movs	r0, r3
 80027d0:	f002 fbf4 	bl	8004fbc <printf_>
        return false;
 80027d4:	2300      	movs	r3, #0
 80027d6:	e082      	b.n	80028de <deepPowerDown+0x1be>
    }

    // Disable the I/O interface in sleep
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT, 0);
 80027d8:	231c      	movs	r3, #28
 80027da:	2104      	movs	r1, #4
 80027dc:	2513      	movs	r5, #19
 80027de:	197c      	adds	r4, r7, r5
 80027e0:	2200      	movs	r2, #0
 80027e2:	0018      	movs	r0, r3
 80027e4:	f000 f982 	bl	8002aec <setRegisterBit>
 80027e8:	0003      	movs	r3, r0
 80027ea:	7023      	strb	r3, [r4, #0]
    if (!bResult)
 80027ec:	197b      	adds	r3, r7, r5
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2201      	movs	r2, #1
 80027f2:	4053      	eors	r3, r2
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d008      	beq.n	800280c <deepPowerDown+0xec>
    {
        printf(errorMsg, __LINE__);
 80027fa:	23af      	movs	r3, #175	@ 0xaf
 80027fc:	005a      	lsls	r2, r3, #1
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	0011      	movs	r1, r2
 8002802:	0018      	movs	r0, r3
 8002804:	f002 fbda 	bl	8004fbc <printf_>
        return false;
 8002808:	2300      	movs	r3, #0
 800280a:	e068      	b.n	80028de <deepPowerDown+0x1be>
    }

    // OUT2S = 6 to enable sleep mode
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP, 0);
 800280c:	2011      	movs	r0, #17
 800280e:	231c      	movs	r3, #28
 8002810:	43db      	mvns	r3, r3
 8002812:	b2d9      	uxtb	r1, r3
 8002814:	2218      	movs	r2, #24
 8002816:	2513      	movs	r5, #19
 8002818:	197c      	adds	r4, r7, r5
 800281a:	2300      	movs	r3, #0
 800281c:	f000 f926 	bl	8002a6c <maskRegister>
 8002820:	0003      	movs	r3, r0
 8002822:	7023      	strb	r3, [r4, #0]
    if (!bResult)
 8002824:	197b      	adds	r3, r7, r5
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2201      	movs	r2, #1
 800282a:	4053      	eors	r3, r2
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d008      	beq.n	8002844 <deepPowerDown+0x124>
    {
        printf(errorMsg, __LINE__);
 8002832:	23b3      	movs	r3, #179	@ 0xb3
 8002834:	005a      	lsls	r2, r3, #1
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	0011      	movs	r1, r2
 800283a:	0018      	movs	r0, r3
 800283c:	f002 fbbe 	bl	8004fbc <printf_>
        return false;
 8002840:	2300      	movs	r3, #0
 8002842:	e04c      	b.n	80028de <deepPowerDown+0x1be>
    }
    hex_dump();
 8002844:	f000 fa30 	bl	8002ca8 <hex_dump>
    HAL_Delay(1);
 8002848:	2001      	movs	r0, #1
 800284a:	f002 ff65 	bl	8005718 <HAL_Delay>
    // Enter sleep mode
    bResult = write_rtc_register(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES); // REG_SLEEP_CTRL_SLP | 0x01
 800284e:	2017      	movs	r0, #23
 8002850:	2280      	movs	r2, #128	@ 0x80
 8002852:	2340      	movs	r3, #64	@ 0x40
 8002854:	4313      	orrs	r3, r2
 8002856:	b2db      	uxtb	r3, r3
 8002858:	0019      	movs	r1, r3
 800285a:	f000 f9e9 	bl	8002c30 <write_rtc_register>
 800285e:	0003      	movs	r3, r0
 8002860:	001a      	movs	r2, r3
 8002862:	2013      	movs	r0, #19
 8002864:	183b      	adds	r3, r7, r0
 8002866:	1e51      	subs	r1, r2, #1
 8002868:	418a      	sbcs	r2, r1
 800286a:	701a      	strb	r2, [r3, #0]
    if (!bResult)
 800286c:	183b      	adds	r3, r7, r0
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2201      	movs	r2, #1
 8002872:	4053      	eors	r3, r2
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d009      	beq.n	800288e <deepPowerDown+0x16e>
    {
        printf(errorMsg, __LINE__);
 800287a:	2370      	movs	r3, #112	@ 0x70
 800287c:	33ff      	adds	r3, #255	@ 0xff
 800287e:	001a      	movs	r2, r3
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	0011      	movs	r1, r2
 8002884:	0018      	movs	r0, r3
 8002886:	f002 fb99 	bl	8004fbc <printf_>
        return false;
 800288a:	2300      	movs	r3, #0
 800288c:	e027      	b.n	80028de <deepPowerDown+0x1be>
    }
    // bResult = write_rtc_register(REG_TIMER_CTRL, 0xc2); // enable
    // _log.trace("delay in case we didn't power down");
    uint32_t start = HAL_GetTick();
 800288e:	f002 ff39 	bl	8005704 <HAL_GetTick>
 8002892:	0003      	movs	r3, r0
 8002894:	60fb      	str	r3, [r7, #12]
    while ((HAL_GetTick() - start) < (uint32_t)(seconds * 1000))
 8002896:	e00f      	b.n	80028b8 <deepPowerDown+0x198>
    {
        printf("REG_SLEEP_CTRL=0x%2x\n", read_rtc_register(REG_SLEEP_CTRL));
 8002898:	2317      	movs	r3, #23
 800289a:	0018      	movs	r0, r3
 800289c:	f000 f996 	bl	8002bcc <read_rtc_register>
 80028a0:	0003      	movs	r3, r0
 80028a2:	001a      	movs	r2, r3
 80028a4:	4b12      	ldr	r3, [pc, #72]	@ (80028f0 <deepPowerDown+0x1d0>)
 80028a6:	0011      	movs	r1, r2
 80028a8:	0018      	movs	r0, r3
 80028aa:	f002 fb87 	bl	8004fbc <printf_>
        HAL_Delay(1000);
 80028ae:	23fa      	movs	r3, #250	@ 0xfa
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	0018      	movs	r0, r3
 80028b4:	f002 ff30 	bl	8005718 <HAL_Delay>
    while ((HAL_GetTick() - start) < (uint32_t)(seconds * 1000))
 80028b8:	f002 ff24 	bl	8005704 <HAL_GetTick>
 80028bc:	0002      	movs	r2, r0
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	1ad1      	subs	r1, r2, r3
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	0013      	movs	r3, r2
 80028c6:	015b      	lsls	r3, r3, #5
 80028c8:	1a9b      	subs	r3, r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	189b      	adds	r3, r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	4299      	cmp	r1, r3
 80028d2:	d3e1      	bcc.n	8002898 <deepPowerDown+0x178>
    }

    printf("didn't power down\n");
 80028d4:	4b07      	ldr	r3, [pc, #28]	@ (80028f4 <deepPowerDown+0x1d4>)
 80028d6:	0018      	movs	r0, r3
 80028d8:	f002 fb70 	bl	8004fbc <printf_>

    return true;
 80028dc:	2301      	movs	r3, #1
}
 80028de:	0018      	movs	r0, r3
 80028e0:	46bd      	mov	sp, r7
 80028e2:	b006      	add	sp, #24
 80028e4:	bdb0      	pop	{r4, r5, r7, pc}
 80028e6:	46c0      	nop			@ (mov r8, r8)
 80028e8:	0800bf2c 	.word	0x0800bf2c
 80028ec:	0800bf4c 	.word	0x0800bf4c
 80028f0:	0800bf60 	.word	0x0800bf60
 80028f4:	0800bf78 	.word	0x0800bf78

080028f8 <setCountdownTimer>:

bool setCountdownTimer(int value, bool minutes)
{
 80028f8:	b5b0      	push	{r4, r5, r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	000a      	movs	r2, r1
 8002902:	1cfb      	adds	r3, r7, #3
 8002904:	701a      	strb	r2, [r3, #0]
    const char *errorMsg = "failure in setCountdownTimer %d\n";
 8002906:	4b58      	ldr	r3, [pc, #352]	@ (8002a68 <setCountdownTimer+0x170>)
 8002908:	60fb      	str	r3, [r7, #12]
    bool bResult;

    // Clear any pending interrupts
    bResult = write_rtc_register(REG_STATUS, REG_STATUS_DEFAULT);
 800290a:	230f      	movs	r3, #15
 800290c:	2200      	movs	r2, #0
 800290e:	0011      	movs	r1, r2
 8002910:	0018      	movs	r0, r3
 8002912:	f000 f98d 	bl	8002c30 <write_rtc_register>
 8002916:	0003      	movs	r3, r0
 8002918:	001a      	movs	r2, r3
 800291a:	200b      	movs	r0, #11
 800291c:	183b      	adds	r3, r7, r0
 800291e:	1e51      	subs	r1, r2, #1
 8002920:	418a      	sbcs	r2, r1
 8002922:	701a      	strb	r2, [r3, #0]
    if (!bResult)
 8002924:	183b      	adds	r3, r7, r0
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2201      	movs	r2, #1
 800292a:	4053      	eors	r3, r2
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d009      	beq.n	8002946 <setCountdownTimer+0x4e>
    {
        printf(errorMsg, __LINE__);
 8002932:	238a      	movs	r3, #138	@ 0x8a
 8002934:	33ff      	adds	r3, #255	@ 0xff
 8002936:	001a      	movs	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	0011      	movs	r1, r2
 800293c:	0018      	movs	r0, r3
 800293e:	f002 fb3d 	bl	8004fbc <printf_>
        return false;
 8002942:	2300      	movs	r3, #0
 8002944:	e08c      	b.n	8002a60 <setCountdownTimer+0x168>
    }

    // Stop countdown timer if already running since it can't be set while running
    bResult = write_rtc_register(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
 8002946:	2318      	movs	r3, #24
 8002948:	2223      	movs	r2, #35	@ 0x23
 800294a:	0011      	movs	r1, r2
 800294c:	0018      	movs	r0, r3
 800294e:	f000 f96f 	bl	8002c30 <write_rtc_register>
 8002952:	0003      	movs	r3, r0
 8002954:	001a      	movs	r2, r3
 8002956:	200b      	movs	r0, #11
 8002958:	183b      	adds	r3, r7, r0
 800295a:	1e51      	subs	r1, r2, #1
 800295c:	418a      	sbcs	r2, r1
 800295e:	701a      	strb	r2, [r3, #0]
    if (!bResult)
 8002960:	183b      	adds	r3, r7, r0
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2201      	movs	r2, #1
 8002966:	4053      	eors	r3, r2
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d009      	beq.n	8002982 <setCountdownTimer+0x8a>
    {
        printf(errorMsg, __LINE__);
 800296e:	2392      	movs	r3, #146	@ 0x92
 8002970:	33ff      	adds	r3, #255	@ 0xff
 8002972:	001a      	movs	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	0011      	movs	r1, r2
 8002978:	0018      	movs	r0, r3
 800297a:	f002 fb1f 	bl	8004fbc <printf_>
        return false;
 800297e:	2300      	movs	r3, #0
 8002980:	e06e      	b.n	8002a60 <setCountdownTimer+0x168>
    }

    // Set countdown timer duration
    if (value < 1)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	dc01      	bgt.n	800298c <setCountdownTimer+0x94>
    {
        value = 1;
 8002988:	2301      	movs	r3, #1
 800298a:	607b      	str	r3, [r7, #4]
    }
    if (value > 255)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2bff      	cmp	r3, #255	@ 0xff
 8002990:	dd01      	ble.n	8002996 <setCountdownTimer+0x9e>
    {
        value = 255;
 8002992:	23ff      	movs	r3, #255	@ 0xff
 8002994:	607b      	str	r3, [r7, #4]
    }
    bResult = write_rtc_register(REG_TIMER, (uint8_t)value);
 8002996:	2219      	movs	r2, #25
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	b2db      	uxtb	r3, r3
 800299c:	0019      	movs	r1, r3
 800299e:	0010      	movs	r0, r2
 80029a0:	f000 f946 	bl	8002c30 <write_rtc_register>
 80029a4:	0003      	movs	r3, r0
 80029a6:	001a      	movs	r2, r3
 80029a8:	200b      	movs	r0, #11
 80029aa:	183b      	adds	r3, r7, r0
 80029ac:	1e51      	subs	r1, r2, #1
 80029ae:	418a      	sbcs	r2, r1
 80029b0:	701a      	strb	r2, [r3, #0]
    if (!bResult)
 80029b2:	183b      	adds	r3, r7, r0
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2201      	movs	r2, #1
 80029b8:	4053      	eors	r3, r2
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d009      	beq.n	80029d4 <setCountdownTimer+0xdc>
    {
        printf(errorMsg, __LINE__);
 80029c0:	23a2      	movs	r3, #162	@ 0xa2
 80029c2:	33ff      	adds	r3, #255	@ 0xff
 80029c4:	001a      	movs	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	0011      	movs	r1, r2
 80029ca:	0018      	movs	r0, r3
 80029cc:	f002 faf6 	bl	8004fbc <printf_>
        return false;
 80029d0:	2300      	movs	r3, #0
 80029d2:	e045      	b.n	8002a60 <setCountdownTimer+0x168>
    }

    // Enable countdown timer interrupt (TIE = 1) in IntMask
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE, 0);
 80029d4:	2312      	movs	r3, #18
 80029d6:	2108      	movs	r1, #8
 80029d8:	250b      	movs	r5, #11
 80029da:	197c      	adds	r4, r7, r5
 80029dc:	2200      	movs	r2, #0
 80029de:	0018      	movs	r0, r3
 80029e0:	f000 f884 	bl	8002aec <setRegisterBit>
 80029e4:	0003      	movs	r3, r0
 80029e6:	7023      	strb	r3, [r4, #0]
    if (!bResult)
 80029e8:	197b      	adds	r3, r7, r5
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2201      	movs	r2, #1
 80029ee:	4053      	eors	r3, r2
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d009      	beq.n	8002a0a <setCountdownTimer+0x112>
    {
        printf(errorMsg, __LINE__);
 80029f6:	23aa      	movs	r3, #170	@ 0xaa
 80029f8:	33ff      	adds	r3, #255	@ 0xff
 80029fa:	001a      	movs	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	0011      	movs	r1, r2
 8002a00:	0018      	movs	r0, r3
 8002a02:	f002 fadb 	bl	8004fbc <printf_>
        return false;
 8002a06:	2300      	movs	r3, #0
 8002a08:	e02a      	b.n	8002a60 <setCountdownTimer+0x168>
    }

    // Set the TFS frequency to 1/60 Hz for minutes or 1 Hz for seconds
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
 8002a0a:	1cfb      	adds	r3, r7, #3
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <setCountdownTimer+0x11e>
 8002a12:	2203      	movs	r2, #3
 8002a14:	e000      	b.n	8002a18 <setCountdownTimer+0x120>
 8002a16:	2202      	movs	r2, #2
 8002a18:	210a      	movs	r1, #10
 8002a1a:	187b      	adds	r3, r7, r1
 8002a1c:	701a      	strb	r2, [r3, #0]

    // Enable countdown timer (TE = 1) in countdown timer control register
    bResult = write_rtc_register(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
 8002a1e:	2018      	movs	r0, #24
 8002a20:	2280      	movs	r2, #128	@ 0x80
 8002a22:	187b      	adds	r3, r7, r1
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	0019      	movs	r1, r3
 8002a2c:	f000 f900 	bl	8002c30 <write_rtc_register>
 8002a30:	0003      	movs	r3, r0
 8002a32:	001a      	movs	r2, r3
 8002a34:	200b      	movs	r0, #11
 8002a36:	183b      	adds	r3, r7, r0
 8002a38:	1e51      	subs	r1, r2, #1
 8002a3a:	418a      	sbcs	r2, r1
 8002a3c:	701a      	strb	r2, [r3, #0]
    // bResult = write_rtc_register(REG_TIMER_CTRL, 0x42); // 0xc2

    if (!bResult)
 8002a3e:	183b      	adds	r3, r7, r0
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2201      	movs	r2, #1
 8002a44:	4053      	eors	r3, r2
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <setCountdownTimer+0x166>
    {
        printf(errorMsg, __LINE__);
 8002a4c:	23db      	movs	r3, #219	@ 0xdb
 8002a4e:	005a      	lsls	r2, r3, #1
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	0011      	movs	r1, r2
 8002a54:	0018      	movs	r0, r3
 8002a56:	f002 fab1 	bl	8004fbc <printf_>
        return false;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	e000      	b.n	8002a60 <setCountdownTimer+0x168>
    }

    return true;
 8002a5e:	2301      	movs	r3, #1
}
 8002a60:	0018      	movs	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b004      	add	sp, #16
 8002a66:	bdb0      	pop	{r4, r5, r7, pc}
 8002a68:	0800bf8c 	.word	0x0800bf8c

08002a6c <maskRegister>:

bool maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock)
{
 8002a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	0005      	movs	r5, r0
 8002a74:	000c      	movs	r4, r1
 8002a76:	0010      	movs	r0, r2
 8002a78:	0019      	movs	r1, r3
 8002a7a:	1dfb      	adds	r3, r7, #7
 8002a7c:	1c2a      	adds	r2, r5, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
 8002a80:	1dbb      	adds	r3, r7, #6
 8002a82:	1c22      	adds	r2, r4, #0
 8002a84:	701a      	strb	r2, [r3, #0]
 8002a86:	1d7b      	adds	r3, r7, #5
 8002a88:	1c02      	adds	r2, r0, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
 8002a8c:	1d3b      	adds	r3, r7, #4
 8002a8e:	1c0a      	adds	r2, r1, #0
 8002a90:	701a      	strb	r2, [r3, #0]
    bool bResult = false;
 8002a92:	250f      	movs	r5, #15
 8002a94:	197b      	adds	r3, r7, r5
 8002a96:	2200      	movs	r2, #0
 8002a98:	701a      	strb	r2, [r3, #0]

    uint8_t value;

    value = read_rtc_register(regAddr);
 8002a9a:	260e      	movs	r6, #14
 8002a9c:	19bc      	adds	r4, r7, r6
 8002a9e:	1dfb      	adds	r3, r7, #7
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f000 f892 	bl	8002bcc <read_rtc_register>
 8002aa8:	0003      	movs	r3, r0
 8002aaa:	7023      	strb	r3, [r4, #0]

    uint8_t newValue = (value & andValue) | orValue;
 8002aac:	19bb      	adds	r3, r7, r6
 8002aae:	1dba      	adds	r2, r7, #6
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	7812      	ldrb	r2, [r2, #0]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	b2d9      	uxtb	r1, r3
 8002ab8:	200d      	movs	r0, #13
 8002aba:	183b      	adds	r3, r7, r0
 8002abc:	1d7a      	adds	r2, r7, #5
 8002abe:	7812      	ldrb	r2, [r2, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	701a      	strb	r2, [r3, #0]

    bResult = write_rtc_register(regAddr, newValue);
 8002ac4:	183b      	adds	r3, r7, r0
 8002ac6:	781a      	ldrb	r2, [r3, #0]
 8002ac8:	1dfb      	adds	r3, r7, #7
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	0011      	movs	r1, r2
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f000 f8ae 	bl	8002c30 <write_rtc_register>
 8002ad4:	0003      	movs	r3, r0
 8002ad6:	001a      	movs	r2, r3
 8002ad8:	197b      	adds	r3, r7, r5
 8002ada:	1e51      	subs	r1, r2, #1
 8002adc:	418a      	sbcs	r2, r1
 8002ade:	701a      	strb	r2, [r3, #0]

    return bResult;
 8002ae0:	197b      	adds	r3, r7, r5
 8002ae2:	781b      	ldrb	r3, [r3, #0]
}
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	b005      	add	sp, #20
 8002aea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002aec <setRegisterBit>:
{
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
}

bool setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock)
{
 8002aec:	b590      	push	{r4, r7, lr}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	0004      	movs	r4, r0
 8002af4:	0008      	movs	r0, r1
 8002af6:	0011      	movs	r1, r2
 8002af8:	1dfb      	adds	r3, r7, #7
 8002afa:	1c22      	adds	r2, r4, #0
 8002afc:	701a      	strb	r2, [r3, #0]
 8002afe:	1dbb      	adds	r3, r7, #6
 8002b00:	1c02      	adds	r2, r0, #0
 8002b02:	701a      	strb	r2, [r3, #0]
 8002b04:	1d7b      	adds	r3, r7, #5
 8002b06:	1c0a      	adds	r2, r1, #0
 8002b08:	701a      	strb	r2, [r3, #0]
    return maskRegister(regAddr, 0xff, bitMask, lock);
 8002b0a:	1d7b      	adds	r3, r7, #5
 8002b0c:	7819      	ldrb	r1, [r3, #0]
 8002b0e:	1dbb      	adds	r3, r7, #6
 8002b10:	781a      	ldrb	r2, [r3, #0]
 8002b12:	1dfb      	adds	r3, r7, #7
 8002b14:	7818      	ldrb	r0, [r3, #0]
 8002b16:	000b      	movs	r3, r1
 8002b18:	21ff      	movs	r1, #255	@ 0xff
 8002b1a:	f7ff ffa7 	bl	8002a6c <maskRegister>
 8002b1e:	0003      	movs	r3, r0
}
 8002b20:	0018      	movs	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b003      	add	sp, #12
 8002b26:	bd90      	pop	{r4, r7, pc}

08002b28 <SPI1_SendByte>:
{
    return wakeReason;
};

inline static uint8_t SPI1_SendByte(uint8_t data)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	0002      	movs	r2, r0
 8002b30:	1dfb      	adds	r3, r7, #7
 8002b32:	701a      	strb	r2, [r3, #0]
    uint32_t start_time = HAL_GetTick();
 8002b34:	f002 fde6 	bl	8005704 <HAL_GetTick>
 8002b38:	0003      	movs	r3, r0
 8002b3a:	60fb      	str	r3, [r7, #12]
    while (LL_SPI_IsActiveFlag_TXE(SPI1) == RESET)
 8002b3c:	e00e      	b.n	8002b5c <SPI1_SendByte+0x34>
    {
        if ((HAL_GetTick() - start_time) > 1000)
 8002b3e:	f002 fde1 	bl	8005704 <HAL_GetTick>
 8002b42:	0002      	movs	r2, r0
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	1ad2      	subs	r2, r2, r3
 8002b48:	23fa      	movs	r3, #250	@ 0xfa
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d905      	bls.n	8002b5c <SPI1_SendByte+0x34>
        {
            print_error(__func__, __LINE__);
 8002b50:	4a1a      	ldr	r2, [pc, #104]	@ (8002bbc <SPI1_SendByte+0x94>)
 8002b52:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc0 <SPI1_SendByte+0x98>)
 8002b54:	0011      	movs	r1, r2
 8002b56:	0018      	movs	r0, r3
 8002b58:	f000 fe18 	bl	800378c <print_error>
    while (LL_SPI_IsActiveFlag_TXE(SPI1) == RESET)
 8002b5c:	4b19      	ldr	r3, [pc, #100]	@ (8002bc4 <SPI1_SendByte+0x9c>)
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f7ff fca3 	bl	80024aa <LL_SPI_IsActiveFlag_TXE>
 8002b64:	1e03      	subs	r3, r0, #0
 8002b66:	d0ea      	beq.n	8002b3e <SPI1_SendByte+0x16>
        }
    }

    LL_SPI_TransmitData8(SPI1, data);
 8002b68:	1dfb      	adds	r3, r7, #7
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	4a15      	ldr	r2, [pc, #84]	@ (8002bc4 <SPI1_SendByte+0x9c>)
 8002b6e:	0019      	movs	r1, r3
 8002b70:	0010      	movs	r0, r2
 8002b72:	f7ff fcb7 	bl	80024e4 <LL_SPI_TransmitData8>

    start_time = HAL_GetTick();
 8002b76:	f002 fdc5 	bl	8005704 <HAL_GetTick>
 8002b7a:	0003      	movs	r3, r0
 8002b7c:	60fb      	str	r3, [r7, #12]
    while (LL_SPI_IsActiveFlag_RXNE(SPI1) == RESET)
 8002b7e:	e00e      	b.n	8002b9e <SPI1_SendByte+0x76>
    {
        if ((HAL_GetTick() - start_time) > 1000)
 8002b80:	f002 fdc0 	bl	8005704 <HAL_GetTick>
 8002b84:	0002      	movs	r2, r0
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	1ad2      	subs	r2, r2, r3
 8002b8a:	23fa      	movs	r3, #250	@ 0xfa
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d905      	bls.n	8002b9e <SPI1_SendByte+0x76>
        {
            print_error(__func__, __LINE__);
 8002b92:	4a0d      	ldr	r2, [pc, #52]	@ (8002bc8 <SPI1_SendByte+0xa0>)
 8002b94:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc0 <SPI1_SendByte+0x98>)
 8002b96:	0011      	movs	r1, r2
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f000 fdf7 	bl	800378c <print_error>
    while (LL_SPI_IsActiveFlag_RXNE(SPI1) == RESET)
 8002b9e:	4b09      	ldr	r3, [pc, #36]	@ (8002bc4 <SPI1_SendByte+0x9c>)
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f7ff fc71 	bl	8002488 <LL_SPI_IsActiveFlag_RXNE>
 8002ba6:	1e03      	subs	r3, r0, #0
 8002ba8:	d0ea      	beq.n	8002b80 <SPI1_SendByte+0x58>
        }
    }

    return LL_SPI_ReceiveData8(SPI1);
 8002baa:	4b06      	ldr	r3, [pc, #24]	@ (8002bc4 <SPI1_SendByte+0x9c>)
 8002bac:	0018      	movs	r0, r3
 8002bae:	f7ff fc8d 	bl	80024cc <LL_SPI_ReceiveData8>
 8002bb2:	0003      	movs	r3, r0
}
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	b004      	add	sp, #16
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	0000027a 	.word	0x0000027a
 8002bc0:	0800c0fc 	.word	0x0800c0fc
 8002bc4:	40013000 	.word	0x40013000
 8002bc8:	00000285 	.word	0x00000285

08002bcc <read_rtc_register>:

inline static uint8_t read_rtc_register(uint8_t reg_addr)
{
 8002bcc:	b5b0      	push	{r4, r5, r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	0002      	movs	r2, r0
 8002bd4:	1dfb      	adds	r3, r7, #7
 8002bd6:	701a      	strb	r2, [r3, #0]
    uint8_t val;
    uint32_t primask_bit = utils_enter_critical_section();
 8002bd8:	f000 f8d0 	bl	8002d7c <utils_enter_critical_section>
 8002bdc:	0003      	movs	r3, r0
 8002bde:	60fb      	str	r3, [r7, #12]

    // #define AB1815_SPI_READ(offset) (127 & offset)		127 - 0x7F
    // #define AB1815_SPI_WRITE(offset) (128 | offset)  	128 - 0x80
    uint8_t addr = AB1815_SPI_READ(reg_addr);
 8002be0:	200b      	movs	r0, #11
 8002be2:	183b      	adds	r3, r7, r0
 8002be4:	1dfa      	adds	r2, r7, #7
 8002be6:	7812      	ldrb	r2, [r2, #0]
 8002be8:	217f      	movs	r1, #127	@ 0x7f
 8002bea:	400a      	ands	r2, r1
 8002bec:	701a      	strb	r2, [r3, #0]
    RTC_L();
 8002bee:	4b0f      	ldr	r3, [pc, #60]	@ (8002c2c <read_rtc_register+0x60>)
 8002bf0:	2280      	movs	r2, #128	@ 0x80
 8002bf2:	05d2      	lsls	r2, r2, #23
 8002bf4:	619a      	str	r2, [r3, #24]
    SPI1_SendByte(addr);
 8002bf6:	183b      	adds	r3, r7, r0
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f7ff ff94 	bl	8002b28 <SPI1_SendByte>
    val = SPI1_SendByte(0x00); // Send DUMMY to read data
 8002c00:	250a      	movs	r5, #10
 8002c02:	197c      	adds	r4, r7, r5
 8002c04:	2000      	movs	r0, #0
 8002c06:	f7ff ff8f 	bl	8002b28 <SPI1_SendByte>
 8002c0a:	0003      	movs	r3, r0
 8002c0c:	7023      	strb	r3, [r4, #0]
    RTC_H();
 8002c0e:	4b07      	ldr	r3, [pc, #28]	@ (8002c2c <read_rtc_register+0x60>)
 8002c10:	2280      	movs	r2, #128	@ 0x80
 8002c12:	01d2      	lsls	r2, r2, #7
 8002c14:	619a      	str	r2, [r3, #24]
    utils_exit_critical_section(primask_bit);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f000 f8be 	bl	8002d9a <utils_exit_critical_section>

    return val;
 8002c1e:	197b      	adds	r3, r7, r5
 8002c20:	781b      	ldrb	r3, [r3, #0]
}
 8002c22:	0018      	movs	r0, r3
 8002c24:	46bd      	mov	sp, r7
 8002c26:	b004      	add	sp, #16
 8002c28:	bdb0      	pop	{r4, r5, r7, pc}
 8002c2a:	46c0      	nop			@ (mov r8, r8)
 8002c2c:	50000400 	.word	0x50000400

08002c30 <write_rtc_register>:

inline static uint8_t write_rtc_register(uint8_t offset, uint8_t buf)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	0002      	movs	r2, r0
 8002c38:	1dfb      	adds	r3, r7, #7
 8002c3a:	701a      	strb	r2, [r3, #0]
 8002c3c:	1dbb      	adds	r3, r7, #6
 8002c3e:	1c0a      	adds	r2, r1, #0
 8002c40:	701a      	strb	r2, [r3, #0]
    // uint8_t address = AB1815_SPI_WRITE(offset);
    uint8_t address = offset | 0x80;
 8002c42:	230f      	movs	r3, #15
 8002c44:	18fb      	adds	r3, r7, r3
 8002c46:	1dfa      	adds	r2, r7, #7
 8002c48:	7812      	ldrb	r2, [r2, #0]
 8002c4a:	2180      	movs	r1, #128	@ 0x80
 8002c4c:	4249      	negs	r1, r1
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	701a      	strb	r2, [r3, #0]
    uint32_t primask_bit = utils_enter_critical_section();
 8002c52:	f000 f893 	bl	8002d7c <utils_enter_critical_section>
 8002c56:	0003      	movs	r3, r0
 8002c58:	60bb      	str	r3, [r7, #8]

    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 8002c5a:	4b12      	ldr	r3, [pc, #72]	@ (8002ca4 <write_rtc_register+0x74>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2240      	movs	r2, #64	@ 0x40
 8002c60:	4013      	ands	r3, r2
 8002c62:	d105      	bne.n	8002c70 <write_rtc_register+0x40>
    {
        SPI1->CR1 |= SPI_CR1_SPE;
 8002c64:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca4 <write_rtc_register+0x74>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca4 <write_rtc_register+0x74>)
 8002c6a:	2140      	movs	r1, #64	@ 0x40
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	601a      	str	r2, [r3, #0]
    }
    spi_select_slave(0);
 8002c70:	2000      	movs	r0, #0
 8002c72:	f7ff fc49 	bl	8002508 <spi_select_slave>
    SPI1_SendByte(address);
 8002c76:	230f      	movs	r3, #15
 8002c78:	18fb      	adds	r3, r7, r3
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f7ff ff53 	bl	8002b28 <SPI1_SendByte>
    SPI1_SendByte(buf); // Send Data to write
 8002c82:	1dbb      	adds	r3, r7, #6
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	0018      	movs	r0, r3
 8002c88:	f7ff ff4e 	bl	8002b28 <SPI1_SendByte>

    spi_select_slave(1);
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	f7ff fc3b 	bl	8002508 <spi_select_slave>
    utils_exit_critical_section(primask_bit);
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	0018      	movs	r0, r3
 8002c96:	f000 f880 	bl	8002d9a <utils_exit_critical_section>
    return 1;
 8002c9a:	2301      	movs	r3, #1
};
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	b004      	add	sp, #16
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40013000 	.word	0x40013000

08002ca8 <hex_dump>:

void hex_dump(void)
{
 8002ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002caa:	46ce      	mov	lr, r9
 8002cac:	4647      	mov	r7, r8
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b08b      	sub	sp, #44	@ 0x2c
 8002cb2:	af06      	add	r7, sp, #24
    uint8_t buffer[9];
    for (uint8_t pos = 0; pos < 0x3F; pos += 8) // 0x7f
 8002cb4:	230f      	movs	r3, #15
 8002cb6:	18fb      	adds	r3, r7, r3
 8002cb8:	2200      	movs	r2, #0
 8002cba:	701a      	strb	r2, [r3, #0]
 8002cbc:	e04e      	b.n	8002d5c <hex_dump+0xb4>
    {

        uint8_t ii = 0;
 8002cbe:	210e      	movs	r1, #14
 8002cc0:	187b      	adds	r3, r7, r1
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	701a      	strb	r2, [r3, #0]
        for (ii = 0; ii < 7; ii++)
 8002cc6:	187b      	adds	r3, r7, r1
 8002cc8:	2200      	movs	r2, #0
 8002cca:	701a      	strb	r2, [r3, #0]
 8002ccc:	e015      	b.n	8002cfa <hex_dump+0x52>
        {
            buffer[ii] = read_rtc_register(pos + ii);
 8002cce:	230f      	movs	r3, #15
 8002cd0:	18fa      	adds	r2, r7, r3
 8002cd2:	250e      	movs	r5, #14
 8002cd4:	197b      	adds	r3, r7, r5
 8002cd6:	7812      	ldrb	r2, [r2, #0]
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	18d3      	adds	r3, r2, r3
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	197b      	adds	r3, r7, r5
 8002ce0:	781c      	ldrb	r4, [r3, #0]
 8002ce2:	0010      	movs	r0, r2
 8002ce4:	f7ff ff72 	bl	8002bcc <read_rtc_register>
 8002ce8:	0003      	movs	r3, r0
 8002cea:	001a      	movs	r2, r3
 8002cec:	1d3b      	adds	r3, r7, #4
 8002cee:	551a      	strb	r2, [r3, r4]
        for (ii = 0; ii < 7; ii++)
 8002cf0:	197b      	adds	r3, r7, r5
 8002cf2:	781a      	ldrb	r2, [r3, #0]
 8002cf4:	197b      	adds	r3, r7, r5
 8002cf6:	3201      	adds	r2, #1
 8002cf8:	701a      	strb	r2, [r3, #0]
 8002cfa:	230e      	movs	r3, #14
 8002cfc:	18fb      	adds	r3, r7, r3
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b06      	cmp	r3, #6
 8002d02:	d9e4      	bls.n	8002cce <hex_dump+0x26>
        }
        printf("# 0x%02x: 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x\r\n", pos, buffer[0], buffer[1], buffer[2], buffer[3], buffer[4], buffer[5], buffer[6], buffer[7]);
 8002d04:	220f      	movs	r2, #15
 8002d06:	18bb      	adds	r3, r7, r2
 8002d08:	7819      	ldrb	r1, [r3, #0]
 8002d0a:	1d3b      	adds	r3, r7, #4
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	4698      	mov	r8, r3
 8002d10:	1d3b      	adds	r3, r7, #4
 8002d12:	785b      	ldrb	r3, [r3, #1]
 8002d14:	4699      	mov	r9, r3
 8002d16:	1d3b      	adds	r3, r7, #4
 8002d18:	789b      	ldrb	r3, [r3, #2]
 8002d1a:	001a      	movs	r2, r3
 8002d1c:	1d3b      	adds	r3, r7, #4
 8002d1e:	78db      	ldrb	r3, [r3, #3]
 8002d20:	001c      	movs	r4, r3
 8002d22:	1d3b      	adds	r3, r7, #4
 8002d24:	791b      	ldrb	r3, [r3, #4]
 8002d26:	001d      	movs	r5, r3
 8002d28:	1d3b      	adds	r3, r7, #4
 8002d2a:	795b      	ldrb	r3, [r3, #5]
 8002d2c:	001e      	movs	r6, r3
 8002d2e:	1d3b      	adds	r3, r7, #4
 8002d30:	799b      	ldrb	r3, [r3, #6]
 8002d32:	469c      	mov	ip, r3
 8002d34:	1d3b      	adds	r3, r7, #4
 8002d36:	79db      	ldrb	r3, [r3, #7]
 8002d38:	480f      	ldr	r0, [pc, #60]	@ (8002d78 <hex_dump+0xd0>)
 8002d3a:	9305      	str	r3, [sp, #20]
 8002d3c:	4663      	mov	r3, ip
 8002d3e:	9304      	str	r3, [sp, #16]
 8002d40:	9603      	str	r6, [sp, #12]
 8002d42:	9502      	str	r5, [sp, #8]
 8002d44:	9401      	str	r4, [sp, #4]
 8002d46:	9200      	str	r2, [sp, #0]
 8002d48:	464b      	mov	r3, r9
 8002d4a:	4642      	mov	r2, r8
 8002d4c:	f002 f936 	bl	8004fbc <printf_>
    for (uint8_t pos = 0; pos < 0x3F; pos += 8) // 0x7f
 8002d50:	220f      	movs	r2, #15
 8002d52:	18bb      	adds	r3, r7, r2
 8002d54:	18ba      	adds	r2, r7, r2
 8002d56:	7812      	ldrb	r2, [r2, #0]
 8002d58:	3208      	adds	r2, #8
 8002d5a:	701a      	strb	r2, [r3, #0]
 8002d5c:	230f      	movs	r3, #15
 8002d5e:	18fb      	adds	r3, r7, r3
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b3e      	cmp	r3, #62	@ 0x3e
 8002d64:	d9ab      	bls.n	8002cbe <hex_dump+0x16>
    }
}
 8002d66:	46c0      	nop			@ (mov r8, r8)
 8002d68:	46c0      	nop			@ (mov r8, r8)
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	b005      	add	sp, #20
 8002d6e:	bcc0      	pop	{r6, r7}
 8002d70:	46b9      	mov	r9, r7
 8002d72:	46b0      	mov	r8, r6
 8002d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d76:	46c0      	nop			@ (mov r8, r8)
 8002d78:	0800bfc8 	.word	0x0800bfc8

08002d7c <utils_enter_critical_section>:

static inline uint32_t utils_enter_critical_section(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002d82:	f3ef 8310 	mrs	r3, PRIMASK
 8002d86:	603b      	str	r3, [r7, #0]
  return(result);
 8002d88:	683b      	ldr	r3, [r7, #0]
    uint32_t primask_bit = __get_PRIMASK();
 8002d8a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d8c:	b672      	cpsid	i
}
 8002d8e:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();
    return primask_bit;
 8002d90:	687b      	ldr	r3, [r7, #4]
}
 8002d92:	0018      	movs	r0, r3
 8002d94:	46bd      	mov	sp, r7
 8002d96:	b002      	add	sp, #8
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <utils_exit_critical_section>:

static inline void utils_exit_critical_section(uint32_t primask_bit)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b084      	sub	sp, #16
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f383 8810 	msr	PRIMASK, r3
}
 8002dac:	46c0      	nop			@ (mov r8, r8)
    __set_PRIMASK(primask_bit);
}
 8002dae:	46c0      	nop			@ (mov r8, r8)
 8002db0:	46bd      	mov	sp, r7
 8002db2:	b004      	add	sp, #16
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <read>:
{
    return setWDT(-1);
}

uint8_t read(uint8_t reg)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b082      	sub	sp, #8
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	0002      	movs	r2, r0
 8002dbe:	1dfb      	adds	r3, r7, #7
 8002dc0:	701a      	strb	r2, [r3, #0]
    return read_rtc_register(reg);
 8002dc2:	1dfb      	adds	r3, r7, #7
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f7ff ff00 	bl	8002bcc <read_rtc_register>
 8002dcc:	0003      	movs	r3, r0
}
 8002dce:	0018      	movs	r0, r3
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	b002      	add	sp, #8
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <write>:

uint8_t write(uint8_t reg, uint8_t value)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b082      	sub	sp, #8
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	0002      	movs	r2, r0
 8002dde:	1dfb      	adds	r3, r7, #7
 8002de0:	701a      	strb	r2, [r3, #0]
 8002de2:	1dbb      	adds	r3, r7, #6
 8002de4:	1c0a      	adds	r2, r1, #0
 8002de6:	701a      	strb	r2, [r3, #0]
    return write_rtc_register(reg, value);
 8002de8:	1dbb      	adds	r3, r7, #6
 8002dea:	781a      	ldrb	r2, [r3, #0]
 8002dec:	1dfb      	adds	r3, r7, #7
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	0011      	movs	r1, r2
 8002df2:	0018      	movs	r0, r3
 8002df4:	f7ff ff1c 	bl	8002c30 <write_rtc_register>
 8002df8:	0003      	movs	r3, r0
}
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	b002      	add	sp, #8
 8002e00:	bd80      	pop	{r7, pc}
	...

08002e04 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	4a05      	ldr	r2, [pc, #20]	@ (8002e28 <LL_ADC_EnableInternalRegulator+0x24>)
 8002e12:	4013      	ands	r3, r2
 8002e14:	2280      	movs	r2, #128	@ 0x80
 8002e16:	0552      	lsls	r2, r2, #21
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002e1e:	46c0      	nop			@ (mov r8, r8)
 8002e20:	46bd      	mov	sp, r7
 8002e22:	b002      	add	sp, #8
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	46c0      	nop			@ (mov r8, r8)
 8002e28:	6fffffe8 	.word	0x6fffffe8

08002e2c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	4a04      	ldr	r2, [pc, #16]	@ (8002e4c <LL_ADC_Enable+0x20>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002e44:	46c0      	nop			@ (mov r8, r8)
 8002e46:	46bd      	mov	sp, r7
 8002e48:	b002      	add	sp, #8
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	7fffffe8 	.word	0x7fffffe8

08002e50 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	4013      	ands	r3, r2
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <LL_ADC_IsEnabled+0x18>
 8002e64:	2301      	movs	r3, #1
 8002e66:	e000      	b.n	8002e6a <LL_ADC_IsEnabled+0x1a>
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	b002      	add	sp, #8
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b082      	sub	sp, #8
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	4013      	ands	r3, r2
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d101      	bne.n	8002e8a <LL_ADC_IsDisableOngoing+0x18>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <LL_ADC_IsDisableOngoing+0x1a>
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	b002      	add	sp, #8
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <LL_ADC_StartCalibration>:
  * @rmtoll CR       ADCAL          LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	4a05      	ldr	r2, [pc, #20]	@ (8002eb8 <LL_ADC_StartCalibration+0x24>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2280      	movs	r2, #128	@ 0x80
 8002ea6:	0612      	lsls	r2, r2, #24
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL);
}
 8002eae:	46c0      	nop			@ (mov r8, r8)
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	b002      	add	sp, #8
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	46c0      	nop			@ (mov r8, r8)
 8002eb8:	7fffffe8 	.word	0x7fffffe8

08002ebc <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(const ADC_TypeDef *ADCx)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	0fdb      	lsrs	r3, r3, #31
 8002eca:	07da      	lsls	r2, r3, #31
 8002ecc:	2380      	movs	r3, #128	@ 0x80
 8002ece:	061b      	lsls	r3, r3, #24
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d101      	bne.n	8002ed8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e000      	b.n	8002eda <LL_ADC_IsCalibrationOnGoing+0x1e>
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	0018      	movs	r0, r3
 8002edc:	46bd      	mov	sp, r7
 8002ede:	b002      	add	sp, #8
 8002ee0:	bd80      	pop	{r7, pc}
	...

08002ee4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	4a04      	ldr	r2, [pc, #16]	@ (8002f04 <LL_ADC_REG_StartConversion+0x20>)
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	2204      	movs	r2, #4
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002efc:	46c0      	nop			@ (mov r8, r8)
 8002efe:	46bd      	mov	sp, r7
 8002f00:	b002      	add	sp, #8
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	7fffffe8 	.word	0x7fffffe8

08002f08 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	2204      	movs	r2, #4
 8002f16:	4013      	ands	r3, r2
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	d101      	bne.n	8002f20 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e000      	b.n	8002f22 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	0018      	movs	r0, r3
 8002f24:	46bd      	mov	sp, r7
 8002f26:	b002      	add	sp, #8
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       DATA           LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(const ADC_TypeDef *ADCx)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b082      	sub	sp, #8
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA) & 0x00000FFFUL);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	051b      	lsls	r3, r3, #20
 8002f3a:	0d1b      	lsrs	r3, r3, #20
 8002f3c:	b29b      	uxth	r3, r3
}
 8002f3e:	0018      	movs	r0, r3
 8002f40:	46bd      	mov	sp, r7
 8002f42:	b002      	add	sp, #8
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <LL_ADC_IsActiveFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(const ADC_TypeDef *ADCx)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b082      	sub	sp, #8
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2201      	movs	r2, #1
 8002f54:	4013      	ands	r3, r2
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <LL_ADC_IsActiveFlag_ADRDY+0x18>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <LL_ADC_IsActiveFlag_ADRDY+0x1a>
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	0018      	movs	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	b002      	add	sp, #8
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(const ADC_TypeDef *ADCx)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2204      	movs	r2, #4
 8002f76:	4013      	ands	r3, r2
 8002f78:	2b04      	cmp	r3, #4
 8002f7a:	d101      	bne.n	8002f80 <LL_ADC_IsActiveFlag_EOC+0x18>
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <LL_ADC_IsActiveFlag_EOC+0x1a>
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	0018      	movs	r0, r3
 8002f84:	46bd      	mov	sp, r7
 8002f86:	b002      	add	sp, #8
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2204      	movs	r2, #4
 8002f96:	601a      	str	r2, [r3, #0]
}
 8002f98:	46c0      	nop			@ (mov r8, r8)
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	b002      	add	sp, #8
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002fa6:	1d3b      	adds	r3, r7, #4
 8002fa8:	0018      	movs	r0, r3
 8002faa:	230c      	movs	r3, #12
 8002fac:	001a      	movs	r2, r3
 8002fae:	2100      	movs	r1, #0
 8002fb0:	f006 ff56 	bl	8009e60 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 8002fb4:	4b32      	ldr	r3, [pc, #200]	@ (8003080 <MX_ADC1_Init+0xe0>)
 8002fb6:	4a33      	ldr	r2, [pc, #204]	@ (8003084 <MX_ADC1_Init+0xe4>)
 8002fb8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002fba:	4b31      	ldr	r3, [pc, #196]	@ (8003080 <MX_ADC1_Init+0xe0>)
 8002fbc:	22c0      	movs	r2, #192	@ 0xc0
 8002fbe:	0612      	lsls	r2, r2, #24
 8002fc0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002fc2:	4b2f      	ldr	r3, [pc, #188]	@ (8003080 <MX_ADC1_Init+0xe0>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002fc8:	4b2d      	ldr	r3, [pc, #180]	@ (8003080 <MX_ADC1_Init+0xe0>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002fce:	4b2c      	ldr	r3, [pc, #176]	@ (8003080 <MX_ADC1_Init+0xe0>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002fd4:	4b2a      	ldr	r3, [pc, #168]	@ (8003080 <MX_ADC1_Init+0xe0>)
 8002fd6:	2204      	movs	r2, #4
 8002fd8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002fda:	4b29      	ldr	r3, [pc, #164]	@ (8003080 <MX_ADC1_Init+0xe0>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002fe0:	4b27      	ldr	r3, [pc, #156]	@ (8003080 <MX_ADC1_Init+0xe0>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002fe6:	4b26      	ldr	r3, [pc, #152]	@ (8003080 <MX_ADC1_Init+0xe0>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8002fec:	4b24      	ldr	r3, [pc, #144]	@ (8003080 <MX_ADC1_Init+0xe0>)
 8002fee:	2201      	movs	r2, #1
 8002ff0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002ff2:	4b23      	ldr	r3, [pc, #140]	@ (8003080 <MX_ADC1_Init+0xe0>)
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ffa:	4b21      	ldr	r3, [pc, #132]	@ (8003080 <MX_ADC1_Init+0xe0>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003000:	4b1f      	ldr	r3, [pc, #124]	@ (8003080 <MX_ADC1_Init+0xe0>)
 8003002:	2200      	movs	r2, #0
 8003004:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003006:	4b1e      	ldr	r3, [pc, #120]	@ (8003080 <MX_ADC1_Init+0xe0>)
 8003008:	222c      	movs	r2, #44	@ 0x2c
 800300a:	2100      	movs	r1, #0
 800300c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800300e:	4b1c      	ldr	r3, [pc, #112]	@ (8003080 <MX_ADC1_Init+0xe0>)
 8003010:	2200      	movs	r2, #0
 8003012:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_19CYCLES_5;
 8003014:	4b1a      	ldr	r3, [pc, #104]	@ (8003080 <MX_ADC1_Init+0xe0>)
 8003016:	2204      	movs	r2, #4
 8003018:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 800301a:	4b19      	ldr	r3, [pc, #100]	@ (8003080 <MX_ADC1_Init+0xe0>)
 800301c:	2206      	movs	r2, #6
 800301e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = ENABLE;
 8003020:	4b17      	ldr	r3, [pc, #92]	@ (8003080 <MX_ADC1_Init+0xe0>)
 8003022:	223c      	movs	r2, #60	@ 0x3c
 8003024:	2101      	movs	r1, #1
 8003026:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_8;
 8003028:	4b15      	ldr	r3, [pc, #84]	@ (8003080 <MX_ADC1_Init+0xe0>)
 800302a:	2208      	movs	r2, #8
 800302c:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_3;
 800302e:	4b14      	ldr	r3, [pc, #80]	@ (8003080 <MX_ADC1_Init+0xe0>)
 8003030:	2260      	movs	r2, #96	@ 0x60
 8003032:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8003034:	4b12      	ldr	r3, [pc, #72]	@ (8003080 <MX_ADC1_Init+0xe0>)
 8003036:	2200      	movs	r2, #0
 8003038:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800303a:	4b11      	ldr	r3, [pc, #68]	@ (8003080 <MX_ADC1_Init+0xe0>)
 800303c:	2200      	movs	r2, #0
 800303e:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003040:	4b0f      	ldr	r3, [pc, #60]	@ (8003080 <MX_ADC1_Init+0xe0>)
 8003042:	0018      	movs	r0, r3
 8003044:	f002 fc88 	bl	8005958 <HAL_ADC_Init>
 8003048:	1e03      	subs	r3, r0, #0
 800304a:	d001      	beq.n	8003050 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800304c:	f000 fbbd 	bl	80037ca <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8003050:	1d3b      	adds	r3, r7, #4
 8003052:	4a0d      	ldr	r2, [pc, #52]	@ (8003088 <MX_ADC1_Init+0xe8>)
 8003054:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003056:	1d3b      	adds	r3, r7, #4
 8003058:	2200      	movs	r2, #0
 800305a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800305c:	1d3b      	adds	r3, r7, #4
 800305e:	2200      	movs	r2, #0
 8003060:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003062:	1d3a      	adds	r2, r7, #4
 8003064:	4b06      	ldr	r3, [pc, #24]	@ (8003080 <MX_ADC1_Init+0xe0>)
 8003066:	0011      	movs	r1, r2
 8003068:	0018      	movs	r0, r3
 800306a:	f002 fe1d 	bl	8005ca8 <HAL_ADC_ConfigChannel>
 800306e:	1e03      	subs	r3, r0, #0
 8003070:	d001      	beq.n	8003076 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8003072:	f000 fbaa 	bl	80037ca <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8003076:	46c0      	nop			@ (mov r8, r8)
 8003078:	46bd      	mov	sp, r7
 800307a:	b004      	add	sp, #16
 800307c:	bd80      	pop	{r7, pc}
 800307e:	46c0      	nop			@ (mov r8, r8)
 8003080:	200001fc 	.word	0x200001fc
 8003084:	40012400 	.word	0x40012400
 8003088:	b0001000 	.word	0xb0001000

0800308c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{
 800308c:	b590      	push	{r4, r7, lr}
 800308e:	b095      	sub	sp, #84	@ 0x54
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003094:	240c      	movs	r4, #12
 8003096:	193b      	adds	r3, r7, r4
 8003098:	0018      	movs	r0, r3
 800309a:	2344      	movs	r3, #68	@ 0x44
 800309c:	001a      	movs	r2, r3
 800309e:	2100      	movs	r1, #0
 80030a0:	f006 fede 	bl	8009e60 <memset>
  if (adcHandle->Instance == ADC1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a11      	ldr	r2, [pc, #68]	@ (80030f0 <HAL_ADC_MspInit+0x64>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d11c      	bne.n	80030e8 <HAL_ADC_MspInit+0x5c>

    /* USER CODE END ADC1_MspInit 0 */

    /** Initializes the peripherals clocks
     */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80030ae:	193b      	adds	r3, r7, r4
 80030b0:	2280      	movs	r2, #128	@ 0x80
 80030b2:	01d2      	lsls	r2, r2, #7
 80030b4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80030b6:	193b      	adds	r3, r7, r4
 80030b8:	2200      	movs	r2, #0
 80030ba:	63da      	str	r2, [r3, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030bc:	193b      	adds	r3, r7, r4
 80030be:	0018      	movs	r0, r3
 80030c0:	f004 f98e 	bl	80073e0 <HAL_RCCEx_PeriphCLKConfig>
 80030c4:	1e03      	subs	r3, r0, #0
 80030c6:	d001      	beq.n	80030cc <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 80030c8:	f000 fb7f 	bl	80037ca <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80030cc:	4b09      	ldr	r3, [pc, #36]	@ (80030f4 <HAL_ADC_MspInit+0x68>)
 80030ce:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80030d0:	4b08      	ldr	r3, [pc, #32]	@ (80030f4 <HAL_ADC_MspInit+0x68>)
 80030d2:	2180      	movs	r1, #128	@ 0x80
 80030d4:	0349      	lsls	r1, r1, #13
 80030d6:	430a      	orrs	r2, r1
 80030d8:	661a      	str	r2, [r3, #96]	@ 0x60
 80030da:	4b06      	ldr	r3, [pc, #24]	@ (80030f4 <HAL_ADC_MspInit+0x68>)
 80030dc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80030de:	2380      	movs	r3, #128	@ 0x80
 80030e0:	035b      	lsls	r3, r3, #13
 80030e2:	4013      	ands	r3, r2
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	68bb      	ldr	r3, [r7, #8]
    /* USER CODE BEGIN ADC1_MspInit 1 */

    /* USER CODE END ADC1_MspInit 1 */
  }
}
 80030e8:	46c0      	nop			@ (mov r8, r8)
 80030ea:	46bd      	mov	sp, r7
 80030ec:	b015      	add	sp, #84	@ 0x54
 80030ee:	bd90      	pop	{r4, r7, pc}
 80030f0:	40012400 	.word	0x40012400
 80030f4:	40021000 	.word	0x40021000

080030f8 <get_vbat>:
/* USER CODE BEGIN 1 */

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

uint32_t get_vbat(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
  printf("get_vbat\n");
 80030fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003178 <get_vbat+0x80>)
 8003100:	0018      	movs	r0, r3
 8003102:	f001 ff5b 	bl	8004fbc <printf_>
  /* Reset status variable of ADC unitary conversion before performing      */
  /* a new ADC conversion start.                                            */
  /* Note: Optionally, for this example purpose, check ADC unitary          */
  /*       conversion status before starting another ADC conversion.        */

  if (ubAdcGrpRegularUnitaryConvStatus != 0)
 8003106:	4b1d      	ldr	r3, [pc, #116]	@ (800317c <get_vbat+0x84>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <get_vbat+0x20>
  {
    ubAdcGrpRegularUnitaryConvStatus = 0;
 8003110:	4b1a      	ldr	r3, [pc, #104]	@ (800317c <get_vbat+0x84>)
 8003112:	2200      	movs	r2, #0
 8003114:	701a      	strb	r2, [r3, #0]
 8003116:	e001      	b.n	800311c <get_vbat+0x24>
  }
  else
  {
    Error_Handler();
 8003118:	f000 fb57 	bl	80037ca <Error_Handler>
  }

  /* Init variable containing ADC conversion data */
  uhADCxConvertedData = VAR_CONVERTED_DATA_INIT_VALUE; // VAR_CONVERTED_DATA_INIT_VALUE
 800311c:	4b18      	ldr	r3, [pc, #96]	@ (8003180 <get_vbat+0x88>)
 800311e:	2280      	movs	r2, #128	@ 0x80
 8003120:	0152      	lsls	r2, r2, #5
 8003122:	801a      	strh	r2, [r3, #0]

  /* Perform ADC group regular conversion start, poll for conversion        */
  /* completion.                                                            */
  ConversionStartPoll_ADC_GrpRegular();
 8003124:	f000 f888 	bl	8003238 <ConversionStartPoll_ADC_GrpRegular>

  /* Retrieve ADC conversion data */
  /* (data scale corresponds to ADC resolution: 12 bits) */
  uhADCxConvertedData = LL_ADC_REG_ReadConversionData12(ADC1);
 8003128:	4b16      	ldr	r3, [pc, #88]	@ (8003184 <get_vbat+0x8c>)
 800312a:	0018      	movs	r0, r3
 800312c:	f7ff fefd 	bl	8002f2a <LL_ADC_REG_ReadConversionData12>
 8003130:	0003      	movs	r3, r0
 8003132:	001a      	movs	r2, r3
 8003134:	4b12      	ldr	r3, [pc, #72]	@ (8003180 <get_vbat+0x88>)
 8003136:	801a      	strh	r2, [r3, #0]

  /* Update status variable of ADC unitary conversion */
  ubAdcGrpRegularUnitaryConvStatus = 1;
 8003138:	4b10      	ldr	r3, [pc, #64]	@ (800317c <get_vbat+0x84>)
 800313a:	2201      	movs	r2, #1
 800313c:	701a      	strb	r2, [r3, #0]

  /* Computation of ADC conversions raw data to physical values           */
  /* using LL ADC driver helper macro.                                    */
  printf("uhADCxConvertedData:  %d\n", uhADCxConvertedData);
 800313e:	4b10      	ldr	r3, [pc, #64]	@ (8003180 <get_vbat+0x88>)
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	b29b      	uxth	r3, r3
 8003144:	001a      	movs	r2, r3
 8003146:	4b10      	ldr	r3, [pc, #64]	@ (8003188 <get_vbat+0x90>)
 8003148:	0011      	movs	r1, r2
 800314a:	0018      	movs	r0, r3
 800314c:	f001 ff36 	bl	8004fbc <printf_>

  /* Note: ADC conversion data is stored into variable                      */
  /*       "uhADCxConvertedData".                                           */
  /*       (for debug: see variable content into watch window).             */

  Vdda = 1220 * 4096 / uhADCxConvertedData;
 8003150:	4b0b      	ldr	r3, [pc, #44]	@ (8003180 <get_vbat+0x88>)
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	b29b      	uxth	r3, r3
 8003156:	0019      	movs	r1, r3
 8003158:	480c      	ldr	r0, [pc, #48]	@ (800318c <get_vbat+0x94>)
 800315a:	f7fd f87b 	bl	8000254 <__divsi3>
 800315e:	0003      	movs	r3, r0
 8003160:	607b      	str	r3, [r7, #4]
  printf("Vdda = %d\n", Vdda);
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	4b0a      	ldr	r3, [pc, #40]	@ (8003190 <get_vbat+0x98>)
 8003166:	0011      	movs	r1, r2
 8003168:	0018      	movs	r0, r3
 800316a:	f001 ff27 	bl	8004fbc <printf_>
  return Vdda;
 800316e:	687b      	ldr	r3, [r7, #4]
}
 8003170:	0018      	movs	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	b002      	add	sp, #8
 8003176:	bd80      	pop	{r7, pc}
 8003178:	0800c00c 	.word	0x0800c00c
 800317c:	20000002 	.word	0x20000002
 8003180:	20000000 	.word	0x20000000
 8003184:	40012400 	.word	0x40012400
 8003188:	0800c018 	.word	0x0800c018
 800318c:	004c4000 	.word	0x004c4000
 8003190:	0800c034 	.word	0x0800c034

08003194 <Activate_ADC>:
 *                 after this function
 * @param  None
 * @retval None
 */
void Activate_ADC(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
  __IO uint32_t wait_loop_index = 0;
 800319a:	2300      	movs	r3, #0
 800319c:	607b      	str	r3, [r7, #4]
  /*       implemented anyway to show the best practice usages                */
  /*       corresponding to reference manual procedure.                       */
  /*       Software can be optimized by removing some of these checks, if     */
  /*       they are not relevant considering previous settings and actions    */
  /*       in user application.                                               */
  if (LL_ADC_IsEnabled(ADC1) == 0)
 800319e:	4b23      	ldr	r3, [pc, #140]	@ (800322c <Activate_ADC+0x98>)
 80031a0:	0018      	movs	r0, r3
 80031a2:	f7ff fe55 	bl	8002e50 <LL_ADC_IsEnabled>
 80031a6:	1e03      	subs	r3, r0, #0
 80031a8:	d13b      	bne.n	8003222 <Activate_ADC+0x8e>
  {
    /* Disable ADC deep power down (enabled by default after reset state) */
    // LL_ADC_DisableDeepPowerDown(ADC1);

    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(ADC1);
 80031aa:	4b20      	ldr	r3, [pc, #128]	@ (800322c <Activate_ADC+0x98>)
 80031ac:	0018      	movs	r0, r3
 80031ae:	f7ff fe29 	bl	8002e04 <LL_ADC_EnableInternalRegulator>
    /* Compute number of CPU cycles to wait for, from delay in us.            */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles (depends on compilation optimization).     */
    /* Note: If system core clock frequency is below 200kHz, wait time        */
    /*       is only a few CPU processing cycles.                             */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 80031b2:	4b1f      	ldr	r3, [pc, #124]	@ (8003230 <Activate_ADC+0x9c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	491f      	ldr	r1, [pc, #124]	@ (8003234 <Activate_ADC+0xa0>)
 80031b8:	0018      	movs	r0, r3
 80031ba:	f7fc ffc1 	bl	8000140 <__udivsi3>
 80031be:	0003      	movs	r3, r0
 80031c0:	001a      	movs	r2, r3
 80031c2:	0013      	movs	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	189b      	adds	r3, r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	210a      	movs	r1, #10
 80031cc:	0018      	movs	r0, r3
 80031ce:	f7fc ffb7 	bl	8000140 <__udivsi3>
 80031d2:	0003      	movs	r3, r0
 80031d4:	607b      	str	r3, [r7, #4]
    while (wait_loop_index != 0)
 80031d6:	e002      	b.n	80031de <Activate_ADC+0x4a>
    {
      wait_loop_index--;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3b01      	subs	r3, #1
 80031dc:	607b      	str	r3, [r7, #4]
    while (wait_loop_index != 0)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1f9      	bne.n	80031d8 <Activate_ADC+0x44>
    }

    /* Run ADC self calibration */
    LL_ADC_StartCalibration(ADC1);
 80031e4:	4b11      	ldr	r3, [pc, #68]	@ (800322c <Activate_ADC+0x98>)
 80031e6:	0018      	movs	r0, r3
 80031e8:	f7ff fe54 	bl	8002e94 <LL_ADC_StartCalibration>
/* Poll for ADC effectively calibrated */
#if (USE_TIMEOUT == 1)
    Timeout = ADC_CALIBRATION_TIMEOUT_MS;
#endif /* USE_TIMEOUT */

    while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0)
 80031ec:	46c0      	nop			@ (mov r8, r8)
 80031ee:	4b0f      	ldr	r3, [pc, #60]	@ (800322c <Activate_ADC+0x98>)
 80031f0:	0018      	movs	r0, r3
 80031f2:	f7ff fe63 	bl	8002ebc <LL_ADC_IsCalibrationOnGoing>
 80031f6:	1e03      	subs	r3, r0, #0
 80031f8:	d1f9      	bne.n	80031ee <Activate_ADC+0x5a>
    }

    /* Delay between ADC end of calibration and ADC enable.                   */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles (depends on compilation optimization).     */
    wait_loop_index = (ADC_DELAY_CALIB_ENABLE_CPU_CYCLES >> 1);
 80031fa:	2320      	movs	r3, #32
 80031fc:	607b      	str	r3, [r7, #4]
    while (wait_loop_index != 0)
 80031fe:	e002      	b.n	8003206 <Activate_ADC+0x72>
    {
      wait_loop_index--;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3b01      	subs	r3, #1
 8003204:	607b      	str	r3, [r7, #4]
    while (wait_loop_index != 0)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1f9      	bne.n	8003200 <Activate_ADC+0x6c>
    }

    /* Enable ADC */
    LL_ADC_Enable(ADC1);
 800320c:	4b07      	ldr	r3, [pc, #28]	@ (800322c <Activate_ADC+0x98>)
 800320e:	0018      	movs	r0, r3
 8003210:	f7ff fe0c 	bl	8002e2c <LL_ADC_Enable>
/* Poll for ADC ready to convert */
#if (USE_TIMEOUT == 1)
    Timeout = ADC_ENABLE_TIMEOUT_MS;
#endif /* USE_TIMEOUT */

    while (LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0)
 8003214:	46c0      	nop			@ (mov r8, r8)
 8003216:	4b05      	ldr	r3, [pc, #20]	@ (800322c <Activate_ADC+0x98>)
 8003218:	0018      	movs	r0, r3
 800321a:	f7ff fe94 	bl	8002f46 <LL_ADC_IsActiveFlag_ADRDY>
 800321e:	1e03      	subs	r3, r0, #0
 8003220:	d0f9      	beq.n	8003216 <Activate_ADC+0x82>
  /*## Operation on ADC hierarchical scope: ADC group injected ###############*/
  /* Note: No operation on ADC group injected performed here.                 */
  /*       ADC group injected conversions to be performed after this function */
  /*       using function:                                                    */
  /*   																		*/
}
 8003222:	46c0      	nop			@ (mov r8, r8)
 8003224:	46bd      	mov	sp, r7
 8003226:	b002      	add	sp, #8
 8003228:	bd80      	pop	{r7, pc}
 800322a:	46c0      	nop			@ (mov r8, r8)
 800322c:	40012400 	.word	0x40012400
 8003230:	20000004 	.word	0x20000004
 8003234:	00030d40 	.word	0x00030d40

08003238 <ConversionStartPoll_ADC_GrpRegular>:
 *         external trigger, ADC group regular conversion stop must be added.
 * @param  None
 * @retval None
 */
void ConversionStartPoll_ADC_GrpRegular(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /*       implemented anyway to show the best practice usages                */
  /*       corresponding to reference manual procedure.                       */
  /*       Software can be optimized by removing some of these checks, if     */
  /*       they are not relevant considering previous settings and actions    */
  /*       in user application.                                               */
  if ((LL_ADC_IsEnabled(ADC1) == 1) &&
 800323c:	4b13      	ldr	r3, [pc, #76]	@ (800328c <ConversionStartPoll_ADC_GrpRegular+0x54>)
 800323e:	0018      	movs	r0, r3
 8003240:	f7ff fe06 	bl	8002e50 <LL_ADC_IsEnabled>
 8003244:	0003      	movs	r3, r0
 8003246:	2b01      	cmp	r3, #1
 8003248:	d110      	bne.n	800326c <ConversionStartPoll_ADC_GrpRegular+0x34>
      (LL_ADC_IsDisableOngoing(ADC1) == 0) &&
 800324a:	4b10      	ldr	r3, [pc, #64]	@ (800328c <ConversionStartPoll_ADC_GrpRegular+0x54>)
 800324c:	0018      	movs	r0, r3
 800324e:	f7ff fe10 	bl	8002e72 <LL_ADC_IsDisableOngoing>
 8003252:	1e03      	subs	r3, r0, #0
  if ((LL_ADC_IsEnabled(ADC1) == 1) &&
 8003254:	d10a      	bne.n	800326c <ConversionStartPoll_ADC_GrpRegular+0x34>
      (LL_ADC_REG_IsConversionOngoing(ADC1) == 0))
 8003256:	4b0d      	ldr	r3, [pc, #52]	@ (800328c <ConversionStartPoll_ADC_GrpRegular+0x54>)
 8003258:	0018      	movs	r0, r3
 800325a:	f7ff fe55 	bl	8002f08 <LL_ADC_REG_IsConversionOngoing>
 800325e:	1e03      	subs	r3, r0, #0
      (LL_ADC_IsDisableOngoing(ADC1) == 0) &&
 8003260:	d104      	bne.n	800326c <ConversionStartPoll_ADC_GrpRegular+0x34>
  {
    LL_ADC_REG_StartConversion(ADC1);
 8003262:	4b0a      	ldr	r3, [pc, #40]	@ (800328c <ConversionStartPoll_ADC_GrpRegular+0x54>)
 8003264:	0018      	movs	r0, r3
 8003266:	f7ff fe3d 	bl	8002ee4 <LL_ADC_REG_StartConversion>
 800326a:	e001      	b.n	8003270 <ConversionStartPoll_ADC_GrpRegular+0x38>
  }
  else
  {
    /* Error: ADC conversion start could not be performed */
    Error_Handler();
 800326c:	f000 faad 	bl	80037ca <Error_Handler>

#if (USE_TIMEOUT == 1)
  Timeout = ADC_UNITARY_CONVERSION_TIMEOUT_MS;
#endif /* USE_TIMEOUT */

  while (LL_ADC_IsActiveFlag_EOC(ADC1) == 0)
 8003270:	46c0      	nop			@ (mov r8, r8)
 8003272:	4b06      	ldr	r3, [pc, #24]	@ (800328c <ConversionStartPoll_ADC_GrpRegular+0x54>)
 8003274:	0018      	movs	r0, r3
 8003276:	f7ff fe77 	bl	8002f68 <LL_ADC_IsActiveFlag_EOC>
 800327a:	1e03      	subs	r3, r0, #0
 800327c:	d0f9      	beq.n	8003272 <ConversionStartPoll_ADC_GrpRegular+0x3a>
      }
    }
#endif /* USE_TIMEOUT */
  }

  LL_ADC_ClearFlag_EOC(ADC1);
 800327e:	4b03      	ldr	r3, [pc, #12]	@ (800328c <ConversionStartPoll_ADC_GrpRegular+0x54>)
 8003280:	0018      	movs	r0, r3
 8003282:	f7ff fe82 	bl	8002f8a <LL_ADC_ClearFlag_EOC>
}
 8003286:	46c0      	nop			@ (mov r8, r8)
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40012400 	.word	0x40012400

08003290 <MX_GPIO_Init>:
/** Configure pins
     PA13 (SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8003290:	b590      	push	{r4, r7, lr}
 8003292:	b08b      	sub	sp, #44	@ 0x2c
 8003294:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003296:	2414      	movs	r4, #20
 8003298:	193b      	adds	r3, r7, r4
 800329a:	0018      	movs	r0, r3
 800329c:	2314      	movs	r3, #20
 800329e:	001a      	movs	r2, r3
 80032a0:	2100      	movs	r1, #0
 80032a2:	f006 fddd 	bl	8009e60 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032a6:	4b78      	ldr	r3, [pc, #480]	@ (8003488 <MX_GPIO_Init+0x1f8>)
 80032a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80032aa:	4b77      	ldr	r3, [pc, #476]	@ (8003488 <MX_GPIO_Init+0x1f8>)
 80032ac:	2104      	movs	r1, #4
 80032ae:	430a      	orrs	r2, r1
 80032b0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80032b2:	4b75      	ldr	r3, [pc, #468]	@ (8003488 <MX_GPIO_Init+0x1f8>)
 80032b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032b6:	2204      	movs	r2, #4
 80032b8:	4013      	ands	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]
 80032bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80032be:	4b72      	ldr	r3, [pc, #456]	@ (8003488 <MX_GPIO_Init+0x1f8>)
 80032c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80032c2:	4b71      	ldr	r3, [pc, #452]	@ (8003488 <MX_GPIO_Init+0x1f8>)
 80032c4:	2120      	movs	r1, #32
 80032c6:	430a      	orrs	r2, r1
 80032c8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80032ca:	4b6f      	ldr	r3, [pc, #444]	@ (8003488 <MX_GPIO_Init+0x1f8>)
 80032cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ce:	2220      	movs	r2, #32
 80032d0:	4013      	ands	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032d6:	4b6c      	ldr	r3, [pc, #432]	@ (8003488 <MX_GPIO_Init+0x1f8>)
 80032d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80032da:	4b6b      	ldr	r3, [pc, #428]	@ (8003488 <MX_GPIO_Init+0x1f8>)
 80032dc:	2101      	movs	r1, #1
 80032de:	430a      	orrs	r2, r1
 80032e0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80032e2:	4b69      	ldr	r3, [pc, #420]	@ (8003488 <MX_GPIO_Init+0x1f8>)
 80032e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032e6:	2201      	movs	r2, #1
 80032e8:	4013      	ands	r3, r2
 80032ea:	60bb      	str	r3, [r7, #8]
 80032ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ee:	4b66      	ldr	r3, [pc, #408]	@ (8003488 <MX_GPIO_Init+0x1f8>)
 80032f0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80032f2:	4b65      	ldr	r3, [pc, #404]	@ (8003488 <MX_GPIO_Init+0x1f8>)
 80032f4:	2102      	movs	r1, #2
 80032f6:	430a      	orrs	r2, r1
 80032f8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80032fa:	4b63      	ldr	r3, [pc, #396]	@ (8003488 <MX_GPIO_Init+0x1f8>)
 80032fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032fe:	2202      	movs	r2, #2
 8003300:	4013      	ands	r3, r2
 8003302:	607b      	str	r3, [r7, #4]
 8003304:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|WDI_Pin|PAPER_ON_Pin, GPIO_PIN_RESET);
 8003306:	4961      	ldr	r1, [pc, #388]	@ (800348c <MX_GPIO_Init+0x1fc>)
 8003308:	4b61      	ldr	r3, [pc, #388]	@ (8003490 <MX_GPIO_Init+0x200>)
 800330a:	2200      	movs	r2, #0
 800330c:	0018      	movs	r0, r3
 800330e:	f003 f85f 	bl	80063d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_RTC_GPIO_Port, CE_RTC_Pin, GPIO_PIN_SET);
 8003312:	2380      	movs	r3, #128	@ 0x80
 8003314:	01db      	lsls	r3, r3, #7
 8003316:	485e      	ldr	r0, [pc, #376]	@ (8003490 <MX_GPIO_Init+0x200>)
 8003318:	2201      	movs	r2, #1
 800331a:	0019      	movs	r1, r3
 800331c:	f003 f858 	bl	80063d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D_C_Pin|RST_Pin, GPIO_PIN_RESET);
 8003320:	2390      	movs	r3, #144	@ 0x90
 8003322:	0119      	lsls	r1, r3, #4
 8003324:	23a0      	movs	r3, #160	@ 0xa0
 8003326:	05db      	lsls	r3, r3, #23
 8003328:	2200      	movs	r2, #0
 800332a:	0018      	movs	r0, r3
 800332c:	f003 f850 	bl	80063d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSB_Pin|CS_Pin, GPIO_PIN_SET);
 8003330:	23a0      	movs	r3, #160	@ 0xa0
 8003332:	0159      	lsls	r1, r3, #5
 8003334:	23a0      	movs	r3, #160	@ 0xa0
 8003336:	05db      	lsls	r3, r3, #23
 8003338:	2201      	movs	r2, #1
 800333a:	0018      	movs	r0, r3
 800333c:	f003 f848 	bl	80063d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003340:	193b      	adds	r3, r7, r4
 8003342:	22e0      	movs	r2, #224	@ 0xe0
 8003344:	0212      	lsls	r2, r2, #8
 8003346:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003348:	193b      	adds	r3, r7, r4
 800334a:	2203      	movs	r2, #3
 800334c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334e:	193b      	adds	r3, r7, r4
 8003350:	2200      	movs	r2, #0
 8003352:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003354:	193b      	adds	r3, r7, r4
 8003356:	4a4f      	ldr	r2, [pc, #316]	@ (8003494 <MX_GPIO_Init+0x204>)
 8003358:	0019      	movs	r1, r3
 800335a:	0010      	movs	r0, r2
 800335c:	f002 fec4 	bl	80060e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003360:	193b      	adds	r3, r7, r4
 8003362:	220f      	movs	r2, #15
 8003364:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003366:	193b      	adds	r3, r7, r4
 8003368:	2203      	movs	r2, #3
 800336a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336c:	193b      	adds	r3, r7, r4
 800336e:	2200      	movs	r2, #0
 8003370:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003372:	193b      	adds	r3, r7, r4
 8003374:	4a48      	ldr	r2, [pc, #288]	@ (8003498 <MX_GPIO_Init+0x208>)
 8003376:	0019      	movs	r1, r3
 8003378:	0010      	movs	r0, r2
 800337a:	f002 feb5 	bl	80060e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15;
 800337e:	193b      	adds	r3, r7, r4
 8003380:	4a46      	ldr	r2, [pc, #280]	@ (800349c <MX_GPIO_Init+0x20c>)
 8003382:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003384:	193b      	adds	r3, r7, r4
 8003386:	2203      	movs	r2, #3
 8003388:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338a:	193b      	adds	r3, r7, r4
 800338c:	2200      	movs	r2, #0
 800338e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003390:	193a      	adds	r2, r7, r4
 8003392:	23a0      	movs	r3, #160	@ 0xa0
 8003394:	05db      	lsls	r3, r3, #23
 8003396:	0011      	movs	r1, r2
 8003398:	0018      	movs	r0, r3
 800339a:	f002 fea5 	bl	80060e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB10 PB11
                           PB3 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 800339e:	193b      	adds	r3, r7, r4
 80033a0:	4a3f      	ldr	r2, [pc, #252]	@ (80034a0 <MX_GPIO_Init+0x210>)
 80033a2:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033a4:	193b      	adds	r3, r7, r4
 80033a6:	2203      	movs	r2, #3
 80033a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033aa:	193b      	adds	r3, r7, r4
 80033ac:	2200      	movs	r2, #0
 80033ae:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033b0:	193b      	adds	r3, r7, r4
 80033b2:	4a37      	ldr	r2, [pc, #220]	@ (8003490 <MX_GPIO_Init+0x200>)
 80033b4:	0019      	movs	r1, r3
 80033b6:	0010      	movs	r0, r2
 80033b8:	f002 fe96 	bl	80060e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|WDI_Pin|PAPER_ON_Pin;
 80033bc:	193b      	adds	r3, r7, r4
 80033be:	4a33      	ldr	r2, [pc, #204]	@ (800348c <MX_GPIO_Init+0x1fc>)
 80033c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033c2:	193b      	adds	r3, r7, r4
 80033c4:	2201      	movs	r2, #1
 80033c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c8:	193b      	adds	r3, r7, r4
 80033ca:	2200      	movs	r2, #0
 80033cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ce:	193b      	adds	r3, r7, r4
 80033d0:	2200      	movs	r2, #0
 80033d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033d4:	193b      	adds	r3, r7, r4
 80033d6:	4a2e      	ldr	r2, [pc, #184]	@ (8003490 <MX_GPIO_Init+0x200>)
 80033d8:	0019      	movs	r1, r3
 80033da:	0010      	movs	r0, r2
 80033dc:	f002 fe84 	bl	80060e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NIRQ_Pin;
 80033e0:	0021      	movs	r1, r4
 80033e2:	187b      	adds	r3, r7, r1
 80033e4:	2280      	movs	r2, #128	@ 0x80
 80033e6:	0152      	lsls	r2, r2, #5
 80033e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033ea:	000c      	movs	r4, r1
 80033ec:	193b      	adds	r3, r7, r4
 80033ee:	2200      	movs	r2, #0
 80033f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f2:	193b      	adds	r3, r7, r4
 80033f4:	2200      	movs	r2, #0
 80033f6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NIRQ_GPIO_Port, &GPIO_InitStruct);
 80033f8:	193b      	adds	r3, r7, r4
 80033fa:	4a25      	ldr	r2, [pc, #148]	@ (8003490 <MX_GPIO_Init+0x200>)
 80033fc:	0019      	movs	r1, r3
 80033fe:	0010      	movs	r0, r2
 8003400:	f002 fe72 	bl	80060e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_RTC_Pin;
 8003404:	0021      	movs	r1, r4
 8003406:	187b      	adds	r3, r7, r1
 8003408:	2280      	movs	r2, #128	@ 0x80
 800340a:	01d2      	lsls	r2, r2, #7
 800340c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800340e:	000c      	movs	r4, r1
 8003410:	193b      	adds	r3, r7, r4
 8003412:	2201      	movs	r2, #1
 8003414:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003416:	193b      	adds	r3, r7, r4
 8003418:	2200      	movs	r2, #0
 800341a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800341c:	193b      	adds	r3, r7, r4
 800341e:	2201      	movs	r2, #1
 8003420:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CE_RTC_GPIO_Port, &GPIO_InitStruct);
 8003422:	193b      	adds	r3, r7, r4
 8003424:	4a1a      	ldr	r2, [pc, #104]	@ (8003490 <MX_GPIO_Init+0x200>)
 8003426:	0019      	movs	r1, r3
 8003428:	0010      	movs	r0, r2
 800342a:	f002 fe5d 	bl	80060e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = D_C_Pin|CSB_Pin|RST_Pin|CS_Pin;
 800342e:	0021      	movs	r1, r4
 8003430:	187b      	adds	r3, r7, r1
 8003432:	22e8      	movs	r2, #232	@ 0xe8
 8003434:	0152      	lsls	r2, r2, #5
 8003436:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003438:	000c      	movs	r4, r1
 800343a:	193b      	adds	r3, r7, r4
 800343c:	2201      	movs	r2, #1
 800343e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003440:	193b      	adds	r3, r7, r4
 8003442:	2200      	movs	r2, #0
 8003444:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003446:	193b      	adds	r3, r7, r4
 8003448:	2200      	movs	r2, #0
 800344a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800344c:	193a      	adds	r2, r7, r4
 800344e:	23a0      	movs	r3, #160	@ 0xa0
 8003450:	05db      	lsls	r3, r3, #23
 8003452:	0011      	movs	r1, r2
 8003454:	0018      	movs	r0, r3
 8003456:	f002 fe47 	bl	80060e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 800345a:	0021      	movs	r1, r4
 800345c:	187b      	adds	r3, r7, r1
 800345e:	2280      	movs	r2, #128	@ 0x80
 8003460:	0092      	lsls	r2, r2, #2
 8003462:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003464:	187b      	adds	r3, r7, r1
 8003466:	2200      	movs	r2, #0
 8003468:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346a:	187b      	adds	r3, r7, r1
 800346c:	2200      	movs	r2, #0
 800346e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 8003470:	187a      	adds	r2, r7, r1
 8003472:	23a0      	movs	r3, #160	@ 0xa0
 8003474:	05db      	lsls	r3, r3, #23
 8003476:	0011      	movs	r1, r2
 8003478:	0018      	movs	r0, r3
 800347a:	f002 fe35 	bl	80060e8 <HAL_GPIO_Init>

}
 800347e:	46c0      	nop			@ (mov r8, r8)
 8003480:	46bd      	mov	sp, r7
 8003482:	b00b      	add	sp, #44	@ 0x2c
 8003484:	bd90      	pop	{r4, r7, pc}
 8003486:	46c0      	nop			@ (mov r8, r8)
 8003488:	40021000 	.word	0x40021000
 800348c:	0000a002 	.word	0x0000a002
 8003490:	50000400 	.word	0x50000400
 8003494:	50000800 	.word	0x50000800
 8003498:	50001400 	.word	0x50001400
 800349c:	00008013 	.word	0x00008013
 80034a0:	00000f3d 	.word	0x00000f3d

080034a4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80034a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003518 <MX_I2C1_Init+0x74>)
 80034aa:	4a1c      	ldr	r2, [pc, #112]	@ (800351c <MX_I2C1_Init+0x78>)
 80034ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80034ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003518 <MX_I2C1_Init+0x74>)
 80034b0:	4a1b      	ldr	r2, [pc, #108]	@ (8003520 <MX_I2C1_Init+0x7c>)
 80034b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80034b4:	4b18      	ldr	r3, [pc, #96]	@ (8003518 <MX_I2C1_Init+0x74>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034ba:	4b17      	ldr	r3, [pc, #92]	@ (8003518 <MX_I2C1_Init+0x74>)
 80034bc:	2201      	movs	r2, #1
 80034be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034c0:	4b15      	ldr	r3, [pc, #84]	@ (8003518 <MX_I2C1_Init+0x74>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80034c6:	4b14      	ldr	r3, [pc, #80]	@ (8003518 <MX_I2C1_Init+0x74>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80034cc:	4b12      	ldr	r3, [pc, #72]	@ (8003518 <MX_I2C1_Init+0x74>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034d2:	4b11      	ldr	r3, [pc, #68]	@ (8003518 <MX_I2C1_Init+0x74>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003518 <MX_I2C1_Init+0x74>)
 80034da:	2200      	movs	r2, #0
 80034dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80034de:	4b0e      	ldr	r3, [pc, #56]	@ (8003518 <MX_I2C1_Init+0x74>)
 80034e0:	0018      	movs	r0, r3
 80034e2:	f002 ff93 	bl	800640c <HAL_I2C_Init>
 80034e6:	1e03      	subs	r3, r0, #0
 80034e8:	d001      	beq.n	80034ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80034ea:	f000 f96e 	bl	80037ca <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80034ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003518 <MX_I2C1_Init+0x74>)
 80034f0:	2100      	movs	r1, #0
 80034f2:	0018      	movs	r0, r3
 80034f4:	f003 f830 	bl	8006558 <HAL_I2CEx_ConfigAnalogFilter>
 80034f8:	1e03      	subs	r3, r0, #0
 80034fa:	d001      	beq.n	8003500 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80034fc:	f000 f965 	bl	80037ca <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003500:	4b05      	ldr	r3, [pc, #20]	@ (8003518 <MX_I2C1_Init+0x74>)
 8003502:	2100      	movs	r1, #0
 8003504:	0018      	movs	r0, r3
 8003506:	f003 f873 	bl	80065f0 <HAL_I2CEx_ConfigDigitalFilter>
 800350a:	1e03      	subs	r3, r0, #0
 800350c:	d001      	beq.n	8003512 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800350e:	f000 f95c 	bl	80037ca <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003512:	46c0      	nop			@ (mov r8, r8)
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20000260 	.word	0x20000260
 800351c:	40005400 	.word	0x40005400
 8003520:	00303d5b 	.word	0x00303d5b

08003524 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003524:	b590      	push	{r4, r7, lr}
 8003526:	b09b      	sub	sp, #108	@ 0x6c
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800352c:	2354      	movs	r3, #84	@ 0x54
 800352e:	18fb      	adds	r3, r7, r3
 8003530:	0018      	movs	r0, r3
 8003532:	2314      	movs	r3, #20
 8003534:	001a      	movs	r2, r3
 8003536:	2100      	movs	r1, #0
 8003538:	f006 fc92 	bl	8009e60 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800353c:	2410      	movs	r4, #16
 800353e:	193b      	adds	r3, r7, r4
 8003540:	0018      	movs	r0, r3
 8003542:	2344      	movs	r3, #68	@ 0x44
 8003544:	001a      	movs	r2, r3
 8003546:	2100      	movs	r1, #0
 8003548:	f006 fc8a 	bl	8009e60 <memset>
  if(i2cHandle->Instance==I2C1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a22      	ldr	r2, [pc, #136]	@ (80035dc <HAL_I2C_MspInit+0xb8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d13d      	bne.n	80035d2 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003556:	193b      	adds	r3, r7, r4
 8003558:	2220      	movs	r2, #32
 800355a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800355c:	193b      	adds	r3, r7, r4
 800355e:	2200      	movs	r2, #0
 8003560:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003562:	193b      	adds	r3, r7, r4
 8003564:	0018      	movs	r0, r3
 8003566:	f003 ff3b 	bl	80073e0 <HAL_RCCEx_PeriphCLKConfig>
 800356a:	1e03      	subs	r3, r0, #0
 800356c:	d001      	beq.n	8003572 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800356e:	f000 f92c 	bl	80037ca <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003572:	4b1b      	ldr	r3, [pc, #108]	@ (80035e0 <HAL_I2C_MspInit+0xbc>)
 8003574:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003576:	4b1a      	ldr	r3, [pc, #104]	@ (80035e0 <HAL_I2C_MspInit+0xbc>)
 8003578:	2102      	movs	r1, #2
 800357a:	430a      	orrs	r2, r1
 800357c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800357e:	4b18      	ldr	r3, [pc, #96]	@ (80035e0 <HAL_I2C_MspInit+0xbc>)
 8003580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003582:	2202      	movs	r2, #2
 8003584:	4013      	ands	r3, r2
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800358a:	2154      	movs	r1, #84	@ 0x54
 800358c:	187b      	adds	r3, r7, r1
 800358e:	22c0      	movs	r2, #192	@ 0xc0
 8003590:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003592:	187b      	adds	r3, r7, r1
 8003594:	2212      	movs	r2, #18
 8003596:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003598:	187b      	adds	r3, r7, r1
 800359a:	2200      	movs	r2, #0
 800359c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800359e:	187b      	adds	r3, r7, r1
 80035a0:	2200      	movs	r2, #0
 80035a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80035a4:	187b      	adds	r3, r7, r1
 80035a6:	2204      	movs	r2, #4
 80035a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035aa:	187b      	adds	r3, r7, r1
 80035ac:	4a0d      	ldr	r2, [pc, #52]	@ (80035e4 <HAL_I2C_MspInit+0xc0>)
 80035ae:	0019      	movs	r1, r3
 80035b0:	0010      	movs	r0, r2
 80035b2:	f002 fd99 	bl	80060e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035b6:	4b0a      	ldr	r3, [pc, #40]	@ (80035e0 <HAL_I2C_MspInit+0xbc>)
 80035b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80035ba:	4b09      	ldr	r3, [pc, #36]	@ (80035e0 <HAL_I2C_MspInit+0xbc>)
 80035bc:	2180      	movs	r1, #128	@ 0x80
 80035be:	0389      	lsls	r1, r1, #14
 80035c0:	430a      	orrs	r2, r1
 80035c2:	659a      	str	r2, [r3, #88]	@ 0x58
 80035c4:	4b06      	ldr	r3, [pc, #24]	@ (80035e0 <HAL_I2C_MspInit+0xbc>)
 80035c6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80035c8:	2380      	movs	r3, #128	@ 0x80
 80035ca:	039b      	lsls	r3, r3, #14
 80035cc:	4013      	ands	r3, r2
 80035ce:	60bb      	str	r3, [r7, #8]
 80035d0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80035d2:	46c0      	nop			@ (mov r8, r8)
 80035d4:	46bd      	mov	sp, r7
 80035d6:	b01b      	add	sp, #108	@ 0x6c
 80035d8:	bd90      	pop	{r4, r7, pc}
 80035da:	46c0      	nop			@ (mov r8, r8)
 80035dc:	40005400 	.word	0x40005400
 80035e0:	40021000 	.word	0x40021000
 80035e4:	50000400 	.word	0x50000400

080035e8 <LL_PWR_ClearFlag_CSB>:
  * @brief  Clear standby and stop Flags
  * @rmtoll SCR          CSBF          LL_PWR_ClearFlag_CSB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_CSB(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CSBF);
 80035ec:	4b03      	ldr	r3, [pc, #12]	@ (80035fc <LL_PWR_ClearFlag_CSB+0x14>)
 80035ee:	2280      	movs	r2, #128	@ 0x80
 80035f0:	0052      	lsls	r2, r2, #1
 80035f2:	619a      	str	r2, [r3, #24]
}
 80035f4:	46c0      	nop			@ (mov r8, r8)
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	46c0      	nop			@ (mov r8, r8)
 80035fc:	40007000 	.word	0x40007000

08003600 <LL_SPI_Enable>:
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2240      	movs	r2, #64	@ 0x40
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	601a      	str	r2, [r3, #0]
}
 8003614:	46c0      	nop			@ (mov r8, r8)
 8003616:	46bd      	mov	sp, r7
 8003618:	b002      	add	sp, #8
 800361a:	bd80      	pop	{r7, pc}

0800361c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800361c:	b5b0      	push	{r4, r5, r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003622:	f001 fffe 	bl	8005622 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003626:	f000 f869 	bl	80036fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800362a:	f7ff fe31 	bl	8003290 <MX_GPIO_Init>
  MX_ADC1_Init();
 800362e:	f7ff fcb7 	bl	8002fa0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8003632:	f7ff ff37 	bl	80034a4 <MX_I2C1_Init>
  MX_RTC_Init();
 8003636:	f001 fcf5 	bl	8005024 <MX_RTC_Init>
  MX_SPI1_Init();
 800363a:	f001 fd6d 	bl	8005118 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800363e:	f001 ff19 	bl	8005474 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  LL_SPI_Enable(SPI1);
 8003642:	4b28      	ldr	r3, [pc, #160]	@ (80036e4 <main+0xc8>)
 8003644:	0018      	movs	r0, r3
 8003646:	f7ff ffdb 	bl	8003600 <LL_SPI_Enable>
  LED1_ON();
 800364a:	4b27      	ldr	r3, [pc, #156]	@ (80036e8 <main+0xcc>)
 800364c:	2202      	movs	r2, #2
 800364e:	619a      	str	r2, [r3, #24]

  uint8_t wdalarm = read(REG_WEEKDAY_ALARM); // REG_WEEKDAY_ALARM  0x0e;
 8003650:	4b26      	ldr	r3, [pc, #152]	@ (80036ec <main+0xd0>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	250f      	movs	r5, #15
 8003656:	197c      	adds	r4, r7, r5
 8003658:	0018      	movs	r0, r3
 800365a:	f7ff fbac 	bl	8002db6 <read>
 800365e:	0003      	movs	r3, r0
 8003660:	7023      	strb	r3, [r4, #0]
  if ((wdalarm & 0xf8) != 0xa0)              // Startup from power up.
 8003662:	197b      	adds	r3, r7, r5
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	22f8      	movs	r2, #248	@ 0xf8
 8003668:	4013      	ands	r3, r2
 800366a:	2ba0      	cmp	r3, #160	@ 0xa0
 800366c:	d014      	beq.n	8003698 <main+0x7c>
  {
    uint32_t clk = HAL_RCC_GetSysClockFreq();
 800366e:	f003 fd8d 	bl	800718c <HAL_RCC_GetSysClockFreq>
 8003672:	0003      	movs	r3, r0
 8003674:	60bb      	str	r3, [r7, #8]
    printf("\nMAIN. First power ON.   %d\n", clk);
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	4b1d      	ldr	r3, [pc, #116]	@ (80036f0 <main+0xd4>)
 800367a:	0011      	movs	r1, r2
 800367c:	0018      	movs	r0, r3
 800367e:	f001 fc9d 	bl	8004fbc <printf_>
    resetConfig(0);
 8003682:	2000      	movs	r0, #0
 8003684:	f7fe ff5a 	bl	800253c <resetConfig>
    write(REG_WEEKDAY_ALARM, 0xa0); // Magic 0xa0
 8003688:	4b18      	ldr	r3, [pc, #96]	@ (80036ec <main+0xd0>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	21a0      	movs	r1, #160	@ 0xa0
 800368e:	0018      	movs	r0, r3
 8003690:	f7ff fba1 	bl	8002dd6 <write>
    // deepPowerDown(30);
    hex_dump();
 8003694:	f7ff fb08 	bl	8002ca8 <hex_dump>
  }

  printf("\nMAIN. Startup from RTC\n"); // Startup from RTC
 8003698:	4b16      	ldr	r3, [pc, #88]	@ (80036f4 <main+0xd8>)
 800369a:	0018      	movs	r0, r3
 800369c:	f001 fc8e 	bl	8004fbc <printf_>
  Activate_ADC();
 80036a0:	f7ff fd78 	bl	8003194 <Activate_ADC>
  int32_t vBat = get_vbat();
 80036a4:	f7ff fd28 	bl	80030f8 <get_vbat>
 80036a8:	0003      	movs	r3, r0
 80036aa:	607b      	str	r3, [r7, #4]
  printf("vBat = %d\n", vBat);
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	4b12      	ldr	r3, [pc, #72]	@ (80036f8 <main+0xdc>)
 80036b0:	0011      	movs	r1, r2
 80036b2:	0018      	movs	r0, r3
 80036b4:	f001 fc82 	bl	8004fbc <printf_>
  // vBat = vBat / 10.0; // go with 3 digits
  // vBat = ((uint32_t)vBat * 6554 + 2) >> 16; // fast_divide_by_10
  HAL_Delay(5);
 80036b8:	2005      	movs	r0, #5
 80036ba:	f002 f82d 	bl	8005718 <HAL_Delay>
  deepPowerDown(30);
 80036be:	201e      	movs	r0, #30
 80036c0:	f7ff f82e 	bl	8002720 <deepPowerDown>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    LED1_ON();
 80036c4:	4b08      	ldr	r3, [pc, #32]	@ (80036e8 <main+0xcc>)
 80036c6:	2202      	movs	r2, #2
 80036c8:	619a      	str	r2, [r3, #24]
    HAL_Delay(100);
 80036ca:	2064      	movs	r0, #100	@ 0x64
 80036cc:	f002 f824 	bl	8005718 <HAL_Delay>
    LED1_OFF();
 80036d0:	4b05      	ldr	r3, [pc, #20]	@ (80036e8 <main+0xcc>)
 80036d2:	2280      	movs	r2, #128	@ 0x80
 80036d4:	0292      	lsls	r2, r2, #10
 80036d6:	619a      	str	r2, [r3, #24]
    HAL_Delay(100);
 80036d8:	2064      	movs	r0, #100	@ 0x64
 80036da:	f002 f81d 	bl	8005718 <HAL_Delay>
    LED1_ON();
 80036de:	46c0      	nop			@ (mov r8, r8)
 80036e0:	e7f0      	b.n	80036c4 <main+0xa8>
 80036e2:	46c0      	nop			@ (mov r8, r8)
 80036e4:	40013000 	.word	0x40013000
 80036e8:	50000400 	.word	0x50000400
 80036ec:	0800c0f8 	.word	0x0800c0f8
 80036f0:	0800c040 	.word	0x0800c040
 80036f4:	0800c060 	.word	0x0800c060
 80036f8:	0800c07c 	.word	0x0800c07c

080036fc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80036fc:	b590      	push	{r4, r7, lr}
 80036fe:	b099      	sub	sp, #100	@ 0x64
 8003700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003702:	2414      	movs	r4, #20
 8003704:	193b      	adds	r3, r7, r4
 8003706:	0018      	movs	r0, r3
 8003708:	234c      	movs	r3, #76	@ 0x4c
 800370a:	001a      	movs	r2, r3
 800370c:	2100      	movs	r1, #0
 800370e:	f006 fba7 	bl	8009e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003712:	1d3b      	adds	r3, r7, #4
 8003714:	0018      	movs	r0, r3
 8003716:	2310      	movs	r3, #16
 8003718:	001a      	movs	r2, r3
 800371a:	2100      	movs	r1, #0
 800371c:	f006 fba0 	bl	8009e60 <memset>

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003720:	2380      	movs	r3, #128	@ 0x80
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	0018      	movs	r0, r3
 8003726:	f002 ffaf 	bl	8006688 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
 800372a:	193b      	adds	r3, r7, r4
 800372c:	220a      	movs	r2, #10
 800372e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003730:	193b      	adds	r3, r7, r4
 8003732:	2280      	movs	r2, #128	@ 0x80
 8003734:	0052      	lsls	r2, r2, #1
 8003736:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003738:	193b      	adds	r3, r7, r4
 800373a:	2240      	movs	r2, #64	@ 0x40
 800373c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800373e:	193b      	adds	r3, r7, r4
 8003740:	2201      	movs	r2, #1
 8003742:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003744:	193b      	adds	r3, r7, r4
 8003746:	2200      	movs	r2, #0
 8003748:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800374a:	193b      	adds	r3, r7, r4
 800374c:	0018      	movs	r0, r3
 800374e:	f003 f807 	bl	8006760 <HAL_RCC_OscConfig>
 8003752:	1e03      	subs	r3, r0, #0
 8003754:	d001      	beq.n	800375a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8003756:	f000 f838 	bl	80037ca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 800375a:	1d3b      	adds	r3, r7, #4
 800375c:	2207      	movs	r2, #7
 800375e:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003760:	1d3b      	adds	r3, r7, #4
 8003762:	2201      	movs	r2, #1
 8003764:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003766:	1d3b      	adds	r3, r7, #4
 8003768:	2200      	movs	r2, #0
 800376a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800376c:	1d3b      	adds	r3, r7, #4
 800376e:	2200      	movs	r2, #0
 8003770:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003772:	1d3b      	adds	r3, r7, #4
 8003774:	2101      	movs	r1, #1
 8003776:	0018      	movs	r0, r3
 8003778:	f003 fc1c 	bl	8006fb4 <HAL_RCC_ClockConfig>
 800377c:	1e03      	subs	r3, r0, #0
 800377e:	d001      	beq.n	8003784 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003780:	f000 f823 	bl	80037ca <Error_Handler>
  }
}
 8003784:	46c0      	nop			@ (mov r8, r8)
 8003786:	46bd      	mov	sp, r7
 8003788:	b019      	add	sp, #100	@ 0x64
 800378a:	bd90      	pop	{r4, r7, pc}

0800378c <print_error>:

/* USER CODE BEGIN 4 */

void print_error(const char *func, uint32_t line)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  printf(" *** Error:  %s ,   %d\n", func, line);
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	4b06      	ldr	r3, [pc, #24]	@ (80037b4 <print_error+0x28>)
 800379c:	0018      	movs	r0, r3
 800379e:	f001 fc0d 	bl	8004fbc <printf_>
  HAL_Delay(100);
 80037a2:	2064      	movs	r0, #100	@ 0x64
 80037a4:	f001 ffb8 	bl	8005718 <HAL_Delay>
  timeout_reset();
 80037a8:	f000 f806 	bl	80037b8 <timeout_reset>
}
 80037ac:	46c0      	nop			@ (mov r8, r8)
 80037ae:	46bd      	mov	sp, r7
 80037b0:	b002      	add	sp, #8
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	0800c088 	.word	0x0800c088

080037b8 <timeout_reset>:

void timeout_reset(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  LL_PWR_ClearFlag_CSB(); // Clear standby flag
 80037bc:	f7ff ff14 	bl	80035e8 <LL_PWR_ClearFlag_CSB>
  // printf(" *** timeout_reset:  %s    %d\n", func, line);
  HAL_Delay(100);
 80037c0:	2064      	movs	r0, #100	@ 0x64
 80037c2:	f001 ffa9 	bl	8005718 <HAL_Delay>
  // NVIC_SystemReset();
  while (1)
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	e7fd      	b.n	80037c6 <timeout_reset+0xe>

080037ca <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80037ce:	b672      	cpsid	i
}
 80037d0:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037d2:	46c0      	nop			@ (mov r8, r8)
 80037d4:	e7fd      	b.n	80037d2 <Error_Handler+0x8>

080037d6 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b084      	sub	sp, #16
 80037da:	af00      	add	r7, sp, #0
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	603b      	str	r3, [r7, #0]
 80037e2:	230f      	movs	r3, #15
 80037e4:	18fb      	adds	r3, r7, r3
 80037e6:	1c02      	adds	r2, r0, #0
 80037e8:	701a      	strb	r2, [r3, #0]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 80037ea:	46c0      	nop			@ (mov r8, r8)
 80037ec:	46bd      	mov	sp, r7
 80037ee:	b004      	add	sp, #16
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b084      	sub	sp, #16
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
 80037fc:	603b      	str	r3, [r7, #0]
 80037fe:	210f      	movs	r1, #15
 8003800:	187b      	adds	r3, r7, r1
 8003802:	1c02      	adds	r2, r0, #0
 8003804:	701a      	strb	r2, [r3, #0]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8003806:	000a      	movs	r2, r1
 8003808:	18bb      	adds	r3, r7, r2
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d004      	beq.n	800381a <_out_char+0x28>
    _putchar(character);
 8003810:	18bb      	adds	r3, r7, r2
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	0018      	movs	r0, r3
 8003816:	f001 fbef 	bl	8004ff8 <_putchar>
  }
}
 800381a:	46c0      	nop			@ (mov r8, r8)
 800381c:	46bd      	mov	sp, r7
 800381e:	b004      	add	sp, #16
 8003820:	bd80      	pop	{r7, pc}

08003822 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b084      	sub	sp, #16
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
 800382a:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	e002      	b.n	8003838 <_strnlen_s+0x16>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	3301      	adds	r3, #1
 8003836:	60fb      	str	r3, [r7, #12]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d004      	beq.n	800384a <_strnlen_s+0x28>
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	1e5a      	subs	r2, r3, #1
 8003844:	603a      	str	r2, [r7, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f3      	bne.n	8003832 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	1ad3      	subs	r3, r2, r3
}
 8003850:	0018      	movs	r0, r3
 8003852:	46bd      	mov	sp, r7
 8003854:	b004      	add	sp, #16
 8003856:	bd80      	pop	{r7, pc}

08003858 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	0002      	movs	r2, r0
 8003860:	1dfb      	adds	r3, r7, #7
 8003862:	701a      	strb	r2, [r3, #0]
  return (ch >= '0') && (ch <= '9');
 8003864:	1dfb      	adds	r3, r7, #7
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	2b2f      	cmp	r3, #47	@ 0x2f
 800386a:	d905      	bls.n	8003878 <_is_digit+0x20>
 800386c:	1dfb      	adds	r3, r7, #7
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	2b39      	cmp	r3, #57	@ 0x39
 8003872:	d801      	bhi.n	8003878 <_is_digit+0x20>
 8003874:	2301      	movs	r3, #1
 8003876:	e000      	b.n	800387a <_is_digit+0x22>
 8003878:	2300      	movs	r3, #0
 800387a:	1c1a      	adds	r2, r3, #0
 800387c:	2301      	movs	r3, #1
 800387e:	4013      	ands	r3, r2
 8003880:	b2db      	uxtb	r3, r3
}
 8003882:	0018      	movs	r0, r3
 8003884:	46bd      	mov	sp, r7
 8003886:	b002      	add	sp, #8
 8003888:	bd80      	pop	{r7, pc}

0800388a <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b084      	sub	sp, #16
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8003892:	2300      	movs	r3, #0
 8003894:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8003896:	e00e      	b.n	80038b6 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	0013      	movs	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	189b      	adds	r3, r3, r2
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	0018      	movs	r0, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	1c59      	adds	r1, r3, #1
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	6011      	str	r1, [r2, #0]
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	18c3      	adds	r3, r0, r3
 80038b2:	3b30      	subs	r3, #48	@ 0x30
 80038b4:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	0018      	movs	r0, r3
 80038be:	f7ff ffcb 	bl	8003858 <_is_digit>
 80038c2:	1e03      	subs	r3, r0, #0
 80038c4:	d1e8      	bne.n	8003898 <_atoi+0xe>
  }
  return i;
 80038c6:	68fb      	ldr	r3, [r7, #12]
}
 80038c8:	0018      	movs	r0, r3
 80038ca:	46bd      	mov	sp, r7
 80038cc:	b004      	add	sp, #16
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 80038d0:	b590      	push	{r4, r7, lr}
 80038d2:	b087      	sub	sp, #28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
 80038dc:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 80038e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038e4:	2202      	movs	r2, #2
 80038e6:	4013      	ands	r3, r2
 80038e8:	d124      	bne.n	8003934 <_out_rev+0x64>
 80038ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038ec:	2201      	movs	r2, #1
 80038ee:	4013      	ands	r3, r2
 80038f0:	d120      	bne.n	8003934 <_out_rev+0x64>
    for (size_t i = len; i < width; i++) {
 80038f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	e00a      	b.n	800390e <_out_rev+0x3e>
      out(' ', buffer, idx++, maxlen);
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	1c53      	adds	r3, r2, #1
 80038fc:	607b      	str	r3, [r7, #4]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68b9      	ldr	r1, [r7, #8]
 8003902:	68fc      	ldr	r4, [r7, #12]
 8003904:	2020      	movs	r0, #32
 8003906:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	3301      	adds	r3, #1
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003912:	429a      	cmp	r2, r3
 8003914:	d3f0      	bcc.n	80038f8 <_out_rev+0x28>
    }
  }

  // reverse string
  while (len) {
 8003916:	e00d      	b.n	8003934 <_out_rev+0x64>
    out(buf[--len], buffer, idx++, maxlen);
 8003918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800391a:	3b01      	subs	r3, #1
 800391c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800391e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003922:	18d3      	adds	r3, r2, r3
 8003924:	7818      	ldrb	r0, [r3, #0]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	1c53      	adds	r3, r2, #1
 800392a:	607b      	str	r3, [r7, #4]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	68b9      	ldr	r1, [r7, #8]
 8003930:	68fc      	ldr	r4, [r7, #12]
 8003932:	47a0      	blx	r4
  while (len) {
 8003934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1ee      	bne.n	8003918 <_out_rev+0x48>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800393a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800393c:	2202      	movs	r2, #2
 800393e:	4013      	ands	r3, r2
 8003940:	d00e      	beq.n	8003960 <_out_rev+0x90>
    while (idx - start_idx < width) {
 8003942:	e007      	b.n	8003954 <_out_rev+0x84>
      out(' ', buffer, idx++, maxlen);
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	1c53      	adds	r3, r2, #1
 8003948:	607b      	str	r3, [r7, #4]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	68fc      	ldr	r4, [r7, #12]
 8003950:	2020      	movs	r0, #32
 8003952:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800395c:	429a      	cmp	r2, r3
 800395e:	d8f1      	bhi.n	8003944 <_out_rev+0x74>
    }
  }

  return idx;
 8003960:	687b      	ldr	r3, [r7, #4]
}
 8003962:	0018      	movs	r0, r3
 8003964:	46bd      	mov	sp, r7
 8003966:	b007      	add	sp, #28
 8003968:	bd90      	pop	{r4, r7, pc}

0800396a <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800396a:	b590      	push	{r4, r7, lr}
 800396c:	b089      	sub	sp, #36	@ 0x24
 800396e:	af04      	add	r7, sp, #16
 8003970:	60f8      	str	r0, [r7, #12]
 8003972:	60b9      	str	r1, [r7, #8]
 8003974:	607a      	str	r2, [r7, #4]
 8003976:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8003978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800397a:	2202      	movs	r2, #2
 800397c:	4013      	ands	r3, r2
 800397e:	d134      	bne.n	80039ea <_ntoa_format+0x80>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8003980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003982:	2b00      	cmp	r3, #0
 8003984:	d017      	beq.n	80039b6 <_ntoa_format+0x4c>
 8003986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003988:	2201      	movs	r2, #1
 800398a:	4013      	ands	r3, r2
 800398c:	d013      	beq.n	80039b6 <_ntoa_format+0x4c>
 800398e:	2328      	movs	r3, #40	@ 0x28
 8003990:	18fb      	adds	r3, r7, r3
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d103      	bne.n	80039a0 <_ntoa_format+0x36>
 8003998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800399a:	220c      	movs	r2, #12
 800399c:	4013      	ands	r3, r2
 800399e:	d00a      	beq.n	80039b6 <_ntoa_format+0x4c>
      width--;
 80039a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039a2:	3b01      	subs	r3, #1
 80039a4:	637b      	str	r3, [r7, #52]	@ 0x34
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80039a6:	e006      	b.n	80039b6 <_ntoa_format+0x4c>
      buf[len++] = '0';
 80039a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80039ae:	6a3a      	ldr	r2, [r7, #32]
 80039b0:	18d3      	adds	r3, r2, r3
 80039b2:	2230      	movs	r2, #48	@ 0x30
 80039b4:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80039b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d20a      	bcs.n	80039d4 <_ntoa_format+0x6a>
 80039be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c0:	2b1f      	cmp	r3, #31
 80039c2:	d9f1      	bls.n	80039a8 <_ntoa_format+0x3e>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80039c4:	e006      	b.n	80039d4 <_ntoa_format+0x6a>
      buf[len++] = '0';
 80039c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	627a      	str	r2, [r7, #36]	@ 0x24
 80039cc:	6a3a      	ldr	r2, [r7, #32]
 80039ce:	18d3      	adds	r3, r2, r3
 80039d0:	2230      	movs	r2, #48	@ 0x30
 80039d2:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80039d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039d6:	2201      	movs	r2, #1
 80039d8:	4013      	ands	r3, r2
 80039da:	d006      	beq.n	80039ea <_ntoa_format+0x80>
 80039dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d202      	bcs.n	80039ea <_ntoa_format+0x80>
 80039e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e6:	2b1f      	cmp	r3, #31
 80039e8:	d9ed      	bls.n	80039c6 <_ntoa_format+0x5c>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 80039ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ec:	2210      	movs	r2, #16
 80039ee:	4013      	ands	r3, r2
 80039f0:	d056      	beq.n	8003aa0 <_ntoa_format+0x136>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80039f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80039f4:	2380      	movs	r3, #128	@ 0x80
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	4013      	ands	r3, r2
 80039fa:	d116      	bne.n	8003a2a <_ntoa_format+0xc0>
 80039fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d013      	beq.n	8003a2a <_ntoa_format+0xc0>
 8003a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d003      	beq.n	8003a12 <_ntoa_format+0xa8>
 8003a0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d10b      	bne.n	8003a2a <_ntoa_format+0xc0>
      len--;
 8003a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a14:	3b01      	subs	r3, #1
 8003a16:	627b      	str	r3, [r7, #36]	@ 0x24
      if (len && (base == 16U)) {
 8003a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d005      	beq.n	8003a2a <_ntoa_format+0xc0>
 8003a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a20:	2b10      	cmp	r3, #16
 8003a22:	d102      	bne.n	8003a2a <_ntoa_format+0xc0>
        len--;
 8003a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a26:	3b01      	subs	r3, #1
 8003a28:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a2c:	2b10      	cmp	r3, #16
 8003a2e:	d10e      	bne.n	8003a4e <_ntoa_format+0xe4>
 8003a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a32:	2220      	movs	r2, #32
 8003a34:	4013      	ands	r3, r2
 8003a36:	d10a      	bne.n	8003a4e <_ntoa_format+0xe4>
 8003a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3a:	2b1f      	cmp	r3, #31
 8003a3c:	d807      	bhi.n	8003a4e <_ntoa_format+0xe4>
      buf[len++] = 'x';
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a44:	6a3a      	ldr	r2, [r7, #32]
 8003a46:	18d3      	adds	r3, r2, r3
 8003a48:	2278      	movs	r2, #120	@ 0x78
 8003a4a:	701a      	strb	r2, [r3, #0]
 8003a4c:	e01e      	b.n	8003a8c <_ntoa_format+0x122>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a50:	2b10      	cmp	r3, #16
 8003a52:	d10e      	bne.n	8003a72 <_ntoa_format+0x108>
 8003a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a56:	2220      	movs	r2, #32
 8003a58:	4013      	ands	r3, r2
 8003a5a:	d00a      	beq.n	8003a72 <_ntoa_format+0x108>
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5e:	2b1f      	cmp	r3, #31
 8003a60:	d807      	bhi.n	8003a72 <_ntoa_format+0x108>
      buf[len++] = 'X';
 8003a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a64:	1c5a      	adds	r2, r3, #1
 8003a66:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a68:	6a3a      	ldr	r2, [r7, #32]
 8003a6a:	18d3      	adds	r3, r2, r3
 8003a6c:	2258      	movs	r2, #88	@ 0x58
 8003a6e:	701a      	strb	r2, [r3, #0]
 8003a70:	e00c      	b.n	8003a8c <_ntoa_format+0x122>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d109      	bne.n	8003a8c <_ntoa_format+0x122>
 8003a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7a:	2b1f      	cmp	r3, #31
 8003a7c:	d806      	bhi.n	8003a8c <_ntoa_format+0x122>
      buf[len++] = 'b';
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a84:	6a3a      	ldr	r2, [r7, #32]
 8003a86:	18d3      	adds	r3, r2, r3
 8003a88:	2262      	movs	r2, #98	@ 0x62
 8003a8a:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8e:	2b1f      	cmp	r3, #31
 8003a90:	d806      	bhi.n	8003aa0 <_ntoa_format+0x136>
      buf[len++] = '0';
 8003a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a94:	1c5a      	adds	r2, r3, #1
 8003a96:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a98:	6a3a      	ldr	r2, [r7, #32]
 8003a9a:	18d3      	adds	r3, r2, r3
 8003a9c:	2230      	movs	r2, #48	@ 0x30
 8003a9e:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa2:	2b1f      	cmp	r3, #31
 8003aa4:	d823      	bhi.n	8003aee <_ntoa_format+0x184>
    if (negative) {
 8003aa6:	2328      	movs	r3, #40	@ 0x28
 8003aa8:	18fb      	adds	r3, r7, r3
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d007      	beq.n	8003ac0 <_ntoa_format+0x156>
      buf[len++] = '-';
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab2:	1c5a      	adds	r2, r3, #1
 8003ab4:	627a      	str	r2, [r7, #36]	@ 0x24
 8003ab6:	6a3a      	ldr	r2, [r7, #32]
 8003ab8:	18d3      	adds	r3, r2, r3
 8003aba:	222d      	movs	r2, #45	@ 0x2d
 8003abc:	701a      	strb	r2, [r3, #0]
 8003abe:	e016      	b.n	8003aee <_ntoa_format+0x184>
    }
    else if (flags & FLAGS_PLUS) {
 8003ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ac2:	2204      	movs	r2, #4
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	d007      	beq.n	8003ad8 <_ntoa_format+0x16e>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aca:	1c5a      	adds	r2, r3, #1
 8003acc:	627a      	str	r2, [r7, #36]	@ 0x24
 8003ace:	6a3a      	ldr	r2, [r7, #32]
 8003ad0:	18d3      	adds	r3, r2, r3
 8003ad2:	222b      	movs	r2, #43	@ 0x2b
 8003ad4:	701a      	strb	r2, [r3, #0]
 8003ad6:	e00a      	b.n	8003aee <_ntoa_format+0x184>
    }
    else if (flags & FLAGS_SPACE) {
 8003ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ada:	2208      	movs	r2, #8
 8003adc:	4013      	ands	r3, r2
 8003ade:	d006      	beq.n	8003aee <_ntoa_format+0x184>
      buf[len++] = ' ';
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae2:	1c5a      	adds	r2, r3, #1
 8003ae4:	627a      	str	r2, [r7, #36]	@ 0x24
 8003ae6:	6a3a      	ldr	r2, [r7, #32]
 8003ae8:	18d3      	adds	r3, r2, r3
 8003aea:	2220      	movs	r2, #32
 8003aec:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8003aee:	683c      	ldr	r4, [r7, #0]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	68b9      	ldr	r1, [r7, #8]
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003af8:	9303      	str	r3, [sp, #12]
 8003afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003afc:	9302      	str	r3, [sp, #8]
 8003afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b00:	9301      	str	r3, [sp, #4]
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	0023      	movs	r3, r4
 8003b08:	f7ff fee2 	bl	80038d0 <_out_rev>
 8003b0c:	0003      	movs	r3, r0
}
 8003b0e:	0018      	movs	r0, r3
 8003b10:	46bd      	mov	sp, r7
 8003b12:	b005      	add	sp, #20
 8003b14:	bd90      	pop	{r4, r7, pc}

08003b16 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003b16:	b590      	push	{r4, r7, lr}
 8003b18:	b097      	sub	sp, #92	@ 0x5c
 8003b1a:	af08      	add	r7, sp, #32
 8003b1c:	60f8      	str	r0, [r7, #12]
 8003b1e:	60b9      	str	r1, [r7, #8]
 8003b20:	607a      	str	r2, [r7, #4]
 8003b22:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8003b24:	2300      	movs	r3, #0
 8003b26:	637b      	str	r3, [r7, #52]	@ 0x34

  // no hash for 0 values
  if (!value) {
 8003b28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d103      	bne.n	8003b36 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8003b2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b30:	2210      	movs	r2, #16
 8003b32:	4393      	bics	r3, r2
 8003b34:	65fb      	str	r3, [r7, #92]	@ 0x5c
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8003b36:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003b38:	2380      	movs	r3, #128	@ 0x80
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	d002      	beq.n	8003b46 <_ntoa_long+0x30>
 8003b40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d033      	beq.n	8003bae <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 8003b46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b48:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003b4a:	0018      	movs	r0, r3
 8003b4c:	f7fc fb7e 	bl	800024c <__aeabi_uidivmod>
 8003b50:	000b      	movs	r3, r1
 8003b52:	001a      	movs	r2, r3
 8003b54:	2133      	movs	r1, #51	@ 0x33
 8003b56:	187b      	adds	r3, r7, r1
 8003b58:	701a      	strb	r2, [r3, #0]
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8003b5a:	000a      	movs	r2, r1
 8003b5c:	18bb      	adds	r3, r7, r2
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b09      	cmp	r3, #9
 8003b62:	d804      	bhi.n	8003b6e <_ntoa_long+0x58>
 8003b64:	18bb      	adds	r3, r7, r2
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	3330      	adds	r3, #48	@ 0x30
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	e00d      	b.n	8003b8a <_ntoa_long+0x74>
 8003b6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b70:	2220      	movs	r2, #32
 8003b72:	4013      	ands	r3, r2
 8003b74:	d001      	beq.n	8003b7a <_ntoa_long+0x64>
 8003b76:	2341      	movs	r3, #65	@ 0x41
 8003b78:	e000      	b.n	8003b7c <_ntoa_long+0x66>
 8003b7a:	2361      	movs	r3, #97	@ 0x61
 8003b7c:	2233      	movs	r2, #51	@ 0x33
 8003b7e:	18ba      	adds	r2, r7, r2
 8003b80:	7812      	ldrb	r2, [r2, #0]
 8003b82:	189b      	adds	r3, r3, r2
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	3b0a      	subs	r3, #10
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b8c:	1c59      	adds	r1, r3, #1
 8003b8e:	6379      	str	r1, [r7, #52]	@ 0x34
 8003b90:	2110      	movs	r1, #16
 8003b92:	1879      	adds	r1, r7, r1
 8003b94:	54ca      	strb	r2, [r1, r3]
      value /= base;
 8003b96:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003b98:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003b9a:	f7fc fad1 	bl	8000140 <__udivsi3>
 8003b9e:	0003      	movs	r3, r0
 8003ba0:	64bb      	str	r3, [r7, #72]	@ 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8003ba2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d002      	beq.n	8003bae <_ntoa_long+0x98>
 8003ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003baa:	2b1f      	cmp	r3, #31
 8003bac:	d9cb      	bls.n	8003b46 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8003bae:	683c      	ldr	r4, [r7, #0]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	68b9      	ldr	r1, [r7, #8]
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bb8:	9306      	str	r3, [sp, #24]
 8003bba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bbc:	9305      	str	r3, [sp, #20]
 8003bbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bc0:	9304      	str	r3, [sp, #16]
 8003bc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bc4:	9303      	str	r3, [sp, #12]
 8003bc6:	234c      	movs	r3, #76	@ 0x4c
 8003bc8:	18fb      	adds	r3, r7, r3
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	9302      	str	r3, [sp, #8]
 8003bce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bd0:	9301      	str	r3, [sp, #4]
 8003bd2:	2310      	movs	r3, #16
 8003bd4:	18fb      	adds	r3, r7, r3
 8003bd6:	9300      	str	r3, [sp, #0]
 8003bd8:	0023      	movs	r3, r4
 8003bda:	f7ff fec6 	bl	800396a <_ntoa_format>
 8003bde:	0003      	movs	r3, r0
}
 8003be0:	0018      	movs	r0, r3
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b00f      	add	sp, #60	@ 0x3c
 8003be6:	bd90      	pop	{r4, r7, pc}

08003be8 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003be8:	b5b0      	push	{r4, r5, r7, lr}
 8003bea:	b096      	sub	sp, #88	@ 0x58
 8003bec:	af08      	add	r7, sp, #32
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	637b      	str	r3, [r7, #52]	@ 0x34

  // no hash for 0 values
  if (!value) {
 8003bfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bfc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	d103      	bne.n	8003c0a <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8003c02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c04:	2210      	movs	r2, #16
 8003c06:	4393      	bics	r3, r2
 8003c08:	66bb      	str	r3, [r7, #104]	@ 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8003c0a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003c0c:	2380      	movs	r3, #128	@ 0x80
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	4013      	ands	r3, r2
 8003c12:	d003      	beq.n	8003c1c <_ntoa_long_long+0x34>
 8003c14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	d03a      	beq.n	8003c92 <_ntoa_long_long+0xaa>
    do {
      const char digit = (char)(value % base);
 8003c1c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003c1e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003c20:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c24:	f7fc fc5e 	bl	80004e4 <__aeabi_uldivmod>
 8003c28:	0010      	movs	r0, r2
 8003c2a:	0019      	movs	r1, r3
 8003c2c:	2433      	movs	r4, #51	@ 0x33
 8003c2e:	193b      	adds	r3, r7, r4
 8003c30:	1c02      	adds	r2, r0, #0
 8003c32:	701a      	strb	r2, [r3, #0]
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8003c34:	0022      	movs	r2, r4
 8003c36:	18bb      	adds	r3, r7, r2
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	2b09      	cmp	r3, #9
 8003c3c:	d804      	bhi.n	8003c48 <_ntoa_long_long+0x60>
 8003c3e:	18bb      	adds	r3, r7, r2
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	3330      	adds	r3, #48	@ 0x30
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	e00d      	b.n	8003c64 <_ntoa_long_long+0x7c>
 8003c48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	d001      	beq.n	8003c54 <_ntoa_long_long+0x6c>
 8003c50:	2341      	movs	r3, #65	@ 0x41
 8003c52:	e000      	b.n	8003c56 <_ntoa_long_long+0x6e>
 8003c54:	2361      	movs	r3, #97	@ 0x61
 8003c56:	2233      	movs	r2, #51	@ 0x33
 8003c58:	18ba      	adds	r2, r7, r2
 8003c5a:	7812      	ldrb	r2, [r2, #0]
 8003c5c:	189b      	adds	r3, r3, r2
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	3b0a      	subs	r3, #10
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c66:	1c59      	adds	r1, r3, #1
 8003c68:	6379      	str	r1, [r7, #52]	@ 0x34
 8003c6a:	2110      	movs	r1, #16
 8003c6c:	1879      	adds	r1, r7, r1
 8003c6e:	54ca      	strb	r2, [r1, r3]
      value /= base;
 8003c70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c74:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003c76:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003c78:	f7fc fc34 	bl	80004e4 <__aeabi_uldivmod>
 8003c7c:	0002      	movs	r2, r0
 8003c7e:	000b      	movs	r3, r1
 8003c80:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8003c84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	d002      	beq.n	8003c92 <_ntoa_long_long+0xaa>
 8003c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c8e:	2b1f      	cmp	r3, #31
 8003c90:	d9c4      	bls.n	8003c1c <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8003c92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c94:	683d      	ldr	r5, [r7, #0]
 8003c96:	687c      	ldr	r4, [r7, #4]
 8003c98:	68b9      	ldr	r1, [r7, #8]
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003c9e:	9206      	str	r2, [sp, #24]
 8003ca0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003ca2:	9205      	str	r2, [sp, #20]
 8003ca4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003ca6:	9204      	str	r2, [sp, #16]
 8003ca8:	9303      	str	r3, [sp, #12]
 8003caa:	2350      	movs	r3, #80	@ 0x50
 8003cac:	18fb      	adds	r3, r7, r3
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	9302      	str	r3, [sp, #8]
 8003cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cb4:	9301      	str	r3, [sp, #4]
 8003cb6:	2310      	movs	r3, #16
 8003cb8:	18fb      	adds	r3, r7, r3
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	002b      	movs	r3, r5
 8003cbe:	0022      	movs	r2, r4
 8003cc0:	f7ff fe53 	bl	800396a <_ntoa_format>
 8003cc4:	0003      	movs	r3, r0
}
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	b00e      	add	sp, #56	@ 0x38
 8003ccc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003cd0 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cd2:	b09d      	sub	sp, #116	@ 0x74
 8003cd4:	af06      	add	r7, sp, #24
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
 8003cdc:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	657b      	str	r3, [r7, #84]	@ 0x54
  double diff = 0.0;
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8003cea:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003cec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cee:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8003cf0:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003cf2:	f7fc fbab 	bl	800044c <__aeabi_dcmpeq>
 8003cf6:	1e03      	subs	r3, r0, #0
 8003cf8:	d112      	bne.n	8003d20 <_ftoa+0x50>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8003cfa:	683c      	ldr	r4, [r7, #0]
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	68b9      	ldr	r1, [r7, #8]
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	2380      	movs	r3, #128	@ 0x80
 8003d04:	18fb      	adds	r3, r7, r3
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	9303      	str	r3, [sp, #12]
 8003d0a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d0c:	9302      	str	r3, [sp, #8]
 8003d0e:	2303      	movs	r3, #3
 8003d10:	9301      	str	r3, [sp, #4]
 8003d12:	4bbf      	ldr	r3, [pc, #764]	@ (8004010 <_ftoa+0x340>)
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	0023      	movs	r3, r4
 8003d18:	f7ff fdda 	bl	80038d0 <_out_rev>
 8003d1c:	0003      	movs	r3, r0
 8003d1e:	e211      	b.n	8004144 <_ftoa+0x474>
  if (value < -DBL_MAX)
 8003d20:	2201      	movs	r2, #1
 8003d22:	4252      	negs	r2, r2
 8003d24:	4bbb      	ldr	r3, [pc, #748]	@ (8004014 <_ftoa+0x344>)
 8003d26:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8003d28:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003d2a:	f7fc fb95 	bl	8000458 <__aeabi_dcmplt>
 8003d2e:	1e03      	subs	r3, r0, #0
 8003d30:	d012      	beq.n	8003d58 <_ftoa+0x88>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8003d32:	683c      	ldr	r4, [r7, #0]
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	68b9      	ldr	r1, [r7, #8]
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	2380      	movs	r3, #128	@ 0x80
 8003d3c:	18fb      	adds	r3, r7, r3
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	9303      	str	r3, [sp, #12]
 8003d42:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d44:	9302      	str	r3, [sp, #8]
 8003d46:	2304      	movs	r3, #4
 8003d48:	9301      	str	r3, [sp, #4]
 8003d4a:	4bb3      	ldr	r3, [pc, #716]	@ (8004018 <_ftoa+0x348>)
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	0023      	movs	r3, r4
 8003d50:	f7ff fdbe 	bl	80038d0 <_out_rev>
 8003d54:	0003      	movs	r3, r0
 8003d56:	e1f5      	b.n	8004144 <_ftoa+0x474>
  if (value > DBL_MAX)
 8003d58:	2201      	movs	r2, #1
 8003d5a:	4252      	negs	r2, r2
 8003d5c:	4baf      	ldr	r3, [pc, #700]	@ (800401c <_ftoa+0x34c>)
 8003d5e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8003d60:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003d62:	f7fc fb8d 	bl	8000480 <__aeabi_dcmpgt>
 8003d66:	1e03      	subs	r3, r0, #0
 8003d68:	d024      	beq.n	8003db4 <_ftoa+0xe4>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8003d6a:	2380      	movs	r3, #128	@ 0x80
 8003d6c:	18fb      	adds	r3, r7, r3
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2204      	movs	r2, #4
 8003d72:	4013      	ands	r3, r2
 8003d74:	d001      	beq.n	8003d7a <_ftoa+0xaa>
 8003d76:	4baa      	ldr	r3, [pc, #680]	@ (8004020 <_ftoa+0x350>)
 8003d78:	e000      	b.n	8003d7c <_ftoa+0xac>
 8003d7a:	4baa      	ldr	r3, [pc, #680]	@ (8004024 <_ftoa+0x354>)
 8003d7c:	2280      	movs	r2, #128	@ 0x80
 8003d7e:	18ba      	adds	r2, r7, r2
 8003d80:	6812      	ldr	r2, [r2, #0]
 8003d82:	2104      	movs	r1, #4
 8003d84:	400a      	ands	r2, r1
 8003d86:	d001      	beq.n	8003d8c <_ftoa+0xbc>
 8003d88:	2204      	movs	r2, #4
 8003d8a:	e000      	b.n	8003d8e <_ftoa+0xbe>
 8003d8c:	2203      	movs	r2, #3
 8003d8e:	683e      	ldr	r6, [r7, #0]
 8003d90:	687d      	ldr	r5, [r7, #4]
 8003d92:	68bc      	ldr	r4, [r7, #8]
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	2180      	movs	r1, #128	@ 0x80
 8003d98:	1879      	adds	r1, r7, r1
 8003d9a:	6809      	ldr	r1, [r1, #0]
 8003d9c:	9103      	str	r1, [sp, #12]
 8003d9e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003da0:	9102      	str	r1, [sp, #8]
 8003da2:	9201      	str	r2, [sp, #4]
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	0033      	movs	r3, r6
 8003da8:	002a      	movs	r2, r5
 8003daa:	0021      	movs	r1, r4
 8003dac:	f7ff fd90 	bl	80038d0 <_out_rev>
 8003db0:	0003      	movs	r3, r0
 8003db2:	e1c7      	b.n	8004144 <_ftoa+0x474>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8003db4:	2200      	movs	r2, #0
 8003db6:	4b9c      	ldr	r3, [pc, #624]	@ (8004028 <_ftoa+0x358>)
 8003db8:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8003dba:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003dbc:	f7fc fb60 	bl	8000480 <__aeabi_dcmpgt>
 8003dc0:	1e03      	subs	r3, r0, #0
 8003dc2:	d107      	bne.n	8003dd4 <_ftoa+0x104>
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	4b99      	ldr	r3, [pc, #612]	@ (800402c <_ftoa+0x35c>)
 8003dc8:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8003dca:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003dcc:	f7fc fb44 	bl	8000458 <__aeabi_dcmplt>
 8003dd0:	1e03      	subs	r3, r0, #0
 8003dd2:	d015      	beq.n	8003e00 <_ftoa+0x130>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8003dd4:	683d      	ldr	r5, [r7, #0]
 8003dd6:	687c      	ldr	r4, [r7, #4]
 8003dd8:	68b9      	ldr	r1, [r7, #8]
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	2380      	movs	r3, #128	@ 0x80
 8003dde:	18fb      	adds	r3, r7, r3
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	9304      	str	r3, [sp, #16]
 8003de4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003de6:	9303      	str	r3, [sp, #12]
 8003de8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003dea:	9302      	str	r3, [sp, #8]
 8003dec:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003dee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003df0:	9200      	str	r2, [sp, #0]
 8003df2:	9301      	str	r3, [sp, #4]
 8003df4:	002b      	movs	r3, r5
 8003df6:	0022      	movs	r2, r4
 8003df8:	f000 f9a8 	bl	800414c <_etoa>
 8003dfc:	0003      	movs	r3, r0
 8003dfe:	e1a1      	b.n	8004144 <_ftoa+0x474>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8003e00:	2453      	movs	r4, #83	@ 0x53
 8003e02:	193b      	adds	r3, r7, r4
 8003e04:	2200      	movs	r2, #0
 8003e06:	701a      	strb	r2, [r3, #0]
  if (value < 0) {
 8003e08:	2200      	movs	r2, #0
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8003e0e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003e10:	f7fc fb22 	bl	8000458 <__aeabi_dcmplt>
 8003e14:	1e03      	subs	r3, r0, #0
 8003e16:	d00c      	beq.n	8003e32 <_ftoa+0x162>
    negative = true;
 8003e18:	193b      	adds	r3, r7, r4
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	701a      	strb	r2, [r3, #0]
    value = 0 - value;
 8003e1e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003e20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e22:	2000      	movs	r0, #0
 8003e24:	2100      	movs	r1, #0
 8003e26:	f7fd fed7 	bl	8001bd8 <__aeabi_dsub>
 8003e2a:	0002      	movs	r2, r0
 8003e2c:	000b      	movs	r3, r1
 8003e2e:	673a      	str	r2, [r7, #112]	@ 0x70
 8003e30:	677b      	str	r3, [r7, #116]	@ 0x74
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8003e32:	2380      	movs	r3, #128	@ 0x80
 8003e34:	18fb      	adds	r3, r7, r3
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	2380      	movs	r3, #128	@ 0x80
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	d10c      	bne.n	8003e5a <_ftoa+0x18a>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003e40:	2306      	movs	r3, #6
 8003e42:	67bb      	str	r3, [r7, #120]	@ 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8003e44:	e009      	b.n	8003e5a <_ftoa+0x18a>
    buf[len++] = '0';
 8003e46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	657a      	str	r2, [r7, #84]	@ 0x54
 8003e4c:	2210      	movs	r2, #16
 8003e4e:	18ba      	adds	r2, r7, r2
 8003e50:	2130      	movs	r1, #48	@ 0x30
 8003e52:	54d1      	strb	r1, [r2, r3]
    prec--;
 8003e54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e56:	3b01      	subs	r3, #1
 8003e58:	67bb      	str	r3, [r7, #120]	@ 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8003e5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e5c:	2b1f      	cmp	r3, #31
 8003e5e:	d802      	bhi.n	8003e66 <_ftoa+0x196>
 8003e60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e62:	2b09      	cmp	r3, #9
 8003e64:	d8ef      	bhi.n	8003e46 <_ftoa+0x176>
  }

  int whole = (int)value;
 8003e66:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8003e68:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003e6a:	f7fe fa73 	bl	8002354 <__aeabi_d2iz>
 8003e6e:	0003      	movs	r3, r0
 8003e70:	64fb      	str	r3, [r7, #76]	@ 0x4c
  double tmp = (value - whole) * pow10[prec];
 8003e72:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003e74:	f7fe faaa 	bl	80023cc <__aeabi_i2d>
 8003e78:	0002      	movs	r2, r0
 8003e7a:	000b      	movs	r3, r1
 8003e7c:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8003e7e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003e80:	f7fd feaa 	bl	8001bd8 <__aeabi_dsub>
 8003e84:	0002      	movs	r2, r0
 8003e86:	000b      	movs	r3, r1
 8003e88:	0010      	movs	r0, r2
 8003e8a:	0019      	movs	r1, r3
 8003e8c:	4a68      	ldr	r2, [pc, #416]	@ (8004030 <_ftoa+0x360>)
 8003e8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	18d3      	adds	r3, r2, r3
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f7fd fbd6 	bl	8001648 <__aeabi_dmul>
 8003e9c:	0002      	movs	r2, r0
 8003e9e:	000b      	movs	r3, r1
 8003ea0:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ea2:	637b      	str	r3, [r7, #52]	@ 0x34
  unsigned long frac = (unsigned long)tmp;
 8003ea4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ea6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003ea8:	f7fc fb3c 	bl	8000524 <__aeabi_d2uiz>
 8003eac:	0003      	movs	r3, r0
 8003eae:	64bb      	str	r3, [r7, #72]	@ 0x48
  diff = tmp - frac;
 8003eb0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003eb2:	f7fe fab9 	bl	8002428 <__aeabi_ui2d>
 8003eb6:	0002      	movs	r2, r0
 8003eb8:	000b      	movs	r3, r1
 8003eba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ebc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003ebe:	f7fd fe8b 	bl	8001bd8 <__aeabi_dsub>
 8003ec2:	0002      	movs	r2, r0
 8003ec4:	000b      	movs	r3, r1
 8003ec6:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (diff > 0.5) {
 8003eca:	2200      	movs	r2, #0
 8003ecc:	4b59      	ldr	r3, [pc, #356]	@ (8004034 <_ftoa+0x364>)
 8003ece:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003ed0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ed2:	f7fc fad5 	bl	8000480 <__aeabi_dcmpgt>
 8003ed6:	1e03      	subs	r3, r0, #0
 8003ed8:	d015      	beq.n	8003f06 <_ftoa+0x236>
    ++frac;
 8003eda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003edc:	3301      	adds	r3, #1
 8003ede:	64bb      	str	r3, [r7, #72]	@ 0x48
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8003ee0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003ee2:	f7fe faa1 	bl	8002428 <__aeabi_ui2d>
 8003ee6:	4a52      	ldr	r2, [pc, #328]	@ (8004030 <_ftoa+0x360>)
 8003ee8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	18d3      	adds	r3, r2, r3
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f7fc facf 	bl	8000494 <__aeabi_dcmpge>
 8003ef6:	1e03      	subs	r3, r0, #0
 8003ef8:	d017      	beq.n	8003f2a <_ftoa+0x25a>
      frac = 0;
 8003efa:	2300      	movs	r3, #0
 8003efc:	64bb      	str	r3, [r7, #72]	@ 0x48
      ++whole;
 8003efe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f00:	3301      	adds	r3, #1
 8003f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f04:	e011      	b.n	8003f2a <_ftoa+0x25a>
    }
  }
  else if (diff < 0.5) {
 8003f06:	2200      	movs	r2, #0
 8003f08:	4b4a      	ldr	r3, [pc, #296]	@ (8004034 <_ftoa+0x364>)
 8003f0a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003f0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f0e:	f7fc faa3 	bl	8000458 <__aeabi_dcmplt>
 8003f12:	1e03      	subs	r3, r0, #0
 8003f14:	d109      	bne.n	8003f2a <_ftoa+0x25a>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8003f16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d003      	beq.n	8003f24 <_ftoa+0x254>
 8003f1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f1e:	2201      	movs	r2, #1
 8003f20:	4013      	ands	r3, r2
 8003f22:	d002      	beq.n	8003f2a <_ftoa+0x25a>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8003f24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f26:	3301      	adds	r3, #1
 8003f28:	64bb      	str	r3, [r7, #72]	@ 0x48
  }

  if (prec == 0U) {
 8003f2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d12f      	bne.n	8003f90 <_ftoa+0x2c0>
    diff = value - (double)whole;
 8003f30:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003f32:	f7fe fa4b 	bl	80023cc <__aeabi_i2d>
 8003f36:	0002      	movs	r2, r0
 8003f38:	000b      	movs	r3, r1
 8003f3a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8003f3c:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003f3e:	f7fd fe4b 	bl	8001bd8 <__aeabi_dsub>
 8003f42:	0002      	movs	r2, r0
 8003f44:	000b      	movs	r3, r1
 8003f46:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	1c1c      	adds	r4, r3, #0
 8003f4e:	2200      	movs	r2, #0
 8003f50:	4b38      	ldr	r3, [pc, #224]	@ (8004034 <_ftoa+0x364>)
 8003f52:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003f54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f56:	f7fc fa7f 	bl	8000458 <__aeabi_dcmplt>
 8003f5a:	1e03      	subs	r3, r0, #0
 8003f5c:	d101      	bne.n	8003f62 <_ftoa+0x292>
 8003f5e:	2300      	movs	r3, #0
 8003f60:	1c1c      	adds	r4, r3, #0
 8003f62:	b2e3      	uxtb	r3, r4
 8003f64:	2201      	movs	r2, #1
 8003f66:	4053      	eors	r3, r2
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d107      	bne.n	8003f7e <_ftoa+0x2ae>
 8003f6e:	2200      	movs	r2, #0
 8003f70:	4b30      	ldr	r3, [pc, #192]	@ (8004034 <_ftoa+0x364>)
 8003f72:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003f74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f76:	f7fc fa83 	bl	8000480 <__aeabi_dcmpgt>
 8003f7a:	1e03      	subs	r3, r0, #0
 8003f7c:	d046      	beq.n	800400c <_ftoa+0x33c>
 8003f7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f80:	2201      	movs	r2, #1
 8003f82:	4013      	ands	r3, r2
 8003f84:	d100      	bne.n	8003f88 <_ftoa+0x2b8>
 8003f86:	e070      	b.n	800406a <_ftoa+0x39a>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8003f88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f8e:	e06c      	b.n	800406a <_ftoa+0x39a>
    }
  }
  else {
    unsigned int count = prec;
 8003f90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f92:	647b      	str	r3, [r7, #68]	@ 0x44
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003f94:	e01b      	b.n	8003fce <_ftoa+0x2fe>
      --count;
 8003f96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	647b      	str	r3, [r7, #68]	@ 0x44
      buf[len++] = (char)(48U + (frac % 10U));
 8003f9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f9e:	210a      	movs	r1, #10
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	f7fc f953 	bl	800024c <__aeabi_uidivmod>
 8003fa6:	000b      	movs	r3, r1
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fac:	1c59      	adds	r1, r3, #1
 8003fae:	6579      	str	r1, [r7, #84]	@ 0x54
 8003fb0:	3230      	adds	r2, #48	@ 0x30
 8003fb2:	b2d1      	uxtb	r1, r2
 8003fb4:	2210      	movs	r2, #16
 8003fb6:	18ba      	adds	r2, r7, r2
 8003fb8:	54d1      	strb	r1, [r2, r3]
      if (!(frac /= 10U)) {
 8003fba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fbc:	210a      	movs	r1, #10
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	f7fc f8be 	bl	8000140 <__udivsi3>
 8003fc4:	0003      	movs	r3, r0
 8003fc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <_ftoa+0x306>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003fce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fd0:	2b1f      	cmp	r3, #31
 8003fd2:	d9e0      	bls.n	8003f96 <_ftoa+0x2c6>
 8003fd4:	e008      	b.n	8003fe8 <_ftoa+0x318>
        break;
 8003fd6:	46c0      	nop			@ (mov r8, r8)
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003fd8:	e006      	b.n	8003fe8 <_ftoa+0x318>
      buf[len++] = '0';
 8003fda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	657a      	str	r2, [r7, #84]	@ 0x54
 8003fe0:	2210      	movs	r2, #16
 8003fe2:	18ba      	adds	r2, r7, r2
 8003fe4:	2130      	movs	r1, #48	@ 0x30
 8003fe6:	54d1      	strb	r1, [r2, r3]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003fe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fea:	2b1f      	cmp	r3, #31
 8003fec:	d804      	bhi.n	8003ff8 <_ftoa+0x328>
 8003fee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ff0:	1e5a      	subs	r2, r3, #1
 8003ff2:	647a      	str	r2, [r7, #68]	@ 0x44
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1f0      	bne.n	8003fda <_ftoa+0x30a>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ffa:	2b1f      	cmp	r3, #31
 8003ffc:	d835      	bhi.n	800406a <_ftoa+0x39a>
      // add decimal
      buf[len++] = '.';
 8003ffe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	657a      	str	r2, [r7, #84]	@ 0x54
 8004004:	2210      	movs	r2, #16
 8004006:	18ba      	adds	r2, r7, r2
 8004008:	212e      	movs	r1, #46	@ 0x2e
 800400a:	54d1      	strb	r1, [r2, r3]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800400c:	e02d      	b.n	800406a <_ftoa+0x39a>
 800400e:	46c0      	nop			@ (mov r8, r8)
 8004010:	0800c0a0 	.word	0x0800c0a0
 8004014:	ffefffff 	.word	0xffefffff
 8004018:	0800c0a4 	.word	0x0800c0a4
 800401c:	7fefffff 	.word	0x7fefffff
 8004020:	0800c0ac 	.word	0x0800c0ac
 8004024:	0800c0b4 	.word	0x0800c0b4
 8004028:	41cdcd65 	.word	0x41cdcd65
 800402c:	c1cdcd65 	.word	0xc1cdcd65
 8004030:	0800c2a8 	.word	0x0800c2a8
 8004034:	3fe00000 	.word	0x3fe00000
    buf[len++] = (char)(48 + (whole % 10));
 8004038:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800403a:	210a      	movs	r1, #10
 800403c:	0018      	movs	r0, r3
 800403e:	f7fc f9ef 	bl	8000420 <__aeabi_idivmod>
 8004042:	000b      	movs	r3, r1
 8004044:	b2da      	uxtb	r2, r3
 8004046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004048:	1c59      	adds	r1, r3, #1
 800404a:	6579      	str	r1, [r7, #84]	@ 0x54
 800404c:	3230      	adds	r2, #48	@ 0x30
 800404e:	b2d1      	uxtb	r1, r2
 8004050:	2210      	movs	r2, #16
 8004052:	18ba      	adds	r2, r7, r2
 8004054:	54d1      	strb	r1, [r2, r3]
    if (!(whole /= 10)) {
 8004056:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004058:	210a      	movs	r1, #10
 800405a:	0018      	movs	r0, r3
 800405c:	f7fc f8fa 	bl	8000254 <__divsi3>
 8004060:	0003      	movs	r3, r0
 8004062:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004064:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <_ftoa+0x3a2>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800406a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800406c:	2b1f      	cmp	r3, #31
 800406e:	d9e3      	bls.n	8004038 <_ftoa+0x368>
 8004070:	e000      	b.n	8004074 <_ftoa+0x3a4>
      break;
 8004072:	46c0      	nop			@ (mov r8, r8)
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8004074:	2180      	movs	r1, #128	@ 0x80
 8004076:	187b      	adds	r3, r7, r1
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2202      	movs	r2, #2
 800407c:	4013      	ands	r3, r2
 800407e:	d123      	bne.n	80040c8 <_ftoa+0x3f8>
 8004080:	187b      	adds	r3, r7, r1
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2201      	movs	r2, #1
 8004086:	4013      	ands	r3, r2
 8004088:	d01e      	beq.n	80040c8 <_ftoa+0x3f8>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800408a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800408c:	2b00      	cmp	r3, #0
 800408e:	d014      	beq.n	80040ba <_ftoa+0x3ea>
 8004090:	2353      	movs	r3, #83	@ 0x53
 8004092:	18fb      	adds	r3, r7, r3
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d104      	bne.n	80040a4 <_ftoa+0x3d4>
 800409a:	187b      	adds	r3, r7, r1
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	220c      	movs	r2, #12
 80040a0:	4013      	ands	r3, r2
 80040a2:	d00a      	beq.n	80040ba <_ftoa+0x3ea>
      width--;
 80040a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040a6:	3b01      	subs	r3, #1
 80040a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80040aa:	e006      	b.n	80040ba <_ftoa+0x3ea>
      buf[len++] = '0';
 80040ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040ae:	1c5a      	adds	r2, r3, #1
 80040b0:	657a      	str	r2, [r7, #84]	@ 0x54
 80040b2:	2210      	movs	r2, #16
 80040b4:	18ba      	adds	r2, r7, r2
 80040b6:	2130      	movs	r1, #48	@ 0x30
 80040b8:	54d1      	strb	r1, [r2, r3]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80040ba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80040bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040be:	429a      	cmp	r2, r3
 80040c0:	d202      	bcs.n	80040c8 <_ftoa+0x3f8>
 80040c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040c4:	2b1f      	cmp	r3, #31
 80040c6:	d9f1      	bls.n	80040ac <_ftoa+0x3dc>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80040c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040ca:	2b1f      	cmp	r3, #31
 80040cc:	d827      	bhi.n	800411e <_ftoa+0x44e>
    if (negative) {
 80040ce:	2353      	movs	r3, #83	@ 0x53
 80040d0:	18fb      	adds	r3, r7, r3
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d007      	beq.n	80040e8 <_ftoa+0x418>
      buf[len++] = '-';
 80040d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	657a      	str	r2, [r7, #84]	@ 0x54
 80040de:	2210      	movs	r2, #16
 80040e0:	18ba      	adds	r2, r7, r2
 80040e2:	212d      	movs	r1, #45	@ 0x2d
 80040e4:	54d1      	strb	r1, [r2, r3]
 80040e6:	e01a      	b.n	800411e <_ftoa+0x44e>
    }
    else if (flags & FLAGS_PLUS) {
 80040e8:	2380      	movs	r3, #128	@ 0x80
 80040ea:	18fb      	adds	r3, r7, r3
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2204      	movs	r2, #4
 80040f0:	4013      	ands	r3, r2
 80040f2:	d007      	beq.n	8004104 <_ftoa+0x434>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80040f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040f6:	1c5a      	adds	r2, r3, #1
 80040f8:	657a      	str	r2, [r7, #84]	@ 0x54
 80040fa:	2210      	movs	r2, #16
 80040fc:	18ba      	adds	r2, r7, r2
 80040fe:	212b      	movs	r1, #43	@ 0x2b
 8004100:	54d1      	strb	r1, [r2, r3]
 8004102:	e00c      	b.n	800411e <_ftoa+0x44e>
    }
    else if (flags & FLAGS_SPACE) {
 8004104:	2380      	movs	r3, #128	@ 0x80
 8004106:	18fb      	adds	r3, r7, r3
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2208      	movs	r2, #8
 800410c:	4013      	ands	r3, r2
 800410e:	d006      	beq.n	800411e <_ftoa+0x44e>
      buf[len++] = ' ';
 8004110:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004112:	1c5a      	adds	r2, r3, #1
 8004114:	657a      	str	r2, [r7, #84]	@ 0x54
 8004116:	2210      	movs	r2, #16
 8004118:	18ba      	adds	r2, r7, r2
 800411a:	2120      	movs	r1, #32
 800411c:	54d1      	strb	r1, [r2, r3]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800411e:	683c      	ldr	r4, [r7, #0]
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	68b9      	ldr	r1, [r7, #8]
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	2380      	movs	r3, #128	@ 0x80
 8004128:	18fb      	adds	r3, r7, r3
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	9303      	str	r3, [sp, #12]
 800412e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004130:	9302      	str	r3, [sp, #8]
 8004132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004134:	9301      	str	r3, [sp, #4]
 8004136:	2310      	movs	r3, #16
 8004138:	18fb      	adds	r3, r7, r3
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	0023      	movs	r3, r4
 800413e:	f7ff fbc7 	bl	80038d0 <_out_rev>
 8004142:	0003      	movs	r3, r0
}
 8004144:	0018      	movs	r0, r3
 8004146:	46bd      	mov	sp, r7
 8004148:	b017      	add	sp, #92	@ 0x5c
 800414a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800414c <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800414c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800414e:	b0a7      	sub	sp, #156	@ 0x9c
 8004150:	af06      	add	r7, sp, #24
 8004152:	6478      	str	r0, [r7, #68]	@ 0x44
 8004154:	6439      	str	r1, [r7, #64]	@ 0x40
 8004156:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004158:	63bb      	str	r3, [r7, #56]	@ 0x38
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800415a:	2698      	movs	r6, #152	@ 0x98
 800415c:	19bb      	adds	r3, r7, r6
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	19b9      	adds	r1, r7, r6
 8004164:	6808      	ldr	r0, [r1, #0]
 8004166:	6849      	ldr	r1, [r1, #4]
 8004168:	f7fc f970 	bl	800044c <__aeabi_dcmpeq>
 800416c:	1e03      	subs	r3, r0, #0
 800416e:	d013      	beq.n	8004198 <_etoa+0x4c>
 8004170:	2201      	movs	r2, #1
 8004172:	4252      	negs	r2, r2
 8004174:	4bda      	ldr	r3, [pc, #872]	@ (80044e0 <_etoa+0x394>)
 8004176:	19b9      	adds	r1, r7, r6
 8004178:	6808      	ldr	r0, [r1, #0]
 800417a:	6849      	ldr	r1, [r1, #4]
 800417c:	f7fc f980 	bl	8000480 <__aeabi_dcmpgt>
 8004180:	1e03      	subs	r3, r0, #0
 8004182:	d109      	bne.n	8004198 <_etoa+0x4c>
 8004184:	2201      	movs	r2, #1
 8004186:	4252      	negs	r2, r2
 8004188:	4bd6      	ldr	r3, [pc, #856]	@ (80044e4 <_etoa+0x398>)
 800418a:	19b9      	adds	r1, r7, r6
 800418c:	6808      	ldr	r0, [r1, #0]
 800418e:	6849      	ldr	r1, [r1, #4]
 8004190:	f7fc f962 	bl	8000458 <__aeabi_dcmplt>
 8004194:	1e03      	subs	r3, r0, #0
 8004196:	d01b      	beq.n	80041d0 <_etoa+0x84>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8004198:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 800419a:	6bfc      	ldr	r4, [r7, #60]	@ 0x3c
 800419c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800419e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80041a0:	23a8      	movs	r3, #168	@ 0xa8
 80041a2:	18fb      	adds	r3, r7, r3
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	9304      	str	r3, [sp, #16]
 80041a8:	23a4      	movs	r3, #164	@ 0xa4
 80041aa:	18fb      	adds	r3, r7, r3
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	9303      	str	r3, [sp, #12]
 80041b0:	23a0      	movs	r3, #160	@ 0xa0
 80041b2:	18fb      	adds	r3, r7, r3
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	9302      	str	r3, [sp, #8]
 80041b8:	2398      	movs	r3, #152	@ 0x98
 80041ba:	18fb      	adds	r3, r7, r3
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	9200      	str	r2, [sp, #0]
 80041c2:	9301      	str	r3, [sp, #4]
 80041c4:	002b      	movs	r3, r5
 80041c6:	0022      	movs	r2, r4
 80041c8:	f7ff fd82 	bl	8003cd0 <_ftoa>
 80041cc:	0003      	movs	r3, r0
 80041ce:	e272      	b.n	80046b6 <_etoa+0x56a>
  }

  // determine the sign
  const bool negative = value < 0;
 80041d0:	233b      	movs	r3, #59	@ 0x3b
 80041d2:	2238      	movs	r2, #56	@ 0x38
 80041d4:	189b      	adds	r3, r3, r2
 80041d6:	19de      	adds	r6, r3, r7
 80041d8:	2301      	movs	r3, #1
 80041da:	73fb      	strb	r3, [r7, #15]
 80041dc:	2200      	movs	r2, #0
 80041de:	2300      	movs	r3, #0
 80041e0:	2198      	movs	r1, #152	@ 0x98
 80041e2:	1879      	adds	r1, r7, r1
 80041e4:	6808      	ldr	r0, [r1, #0]
 80041e6:	6849      	ldr	r1, [r1, #4]
 80041e8:	f7fc f936 	bl	8000458 <__aeabi_dcmplt>
 80041ec:	1e03      	subs	r3, r0, #0
 80041ee:	d101      	bne.n	80041f4 <_etoa+0xa8>
 80041f0:	2300      	movs	r3, #0
 80041f2:	73fb      	strb	r3, [r7, #15]
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
 80041f6:	7033      	strb	r3, [r6, #0]
  if (negative) {
 80041f8:	233b      	movs	r3, #59	@ 0x3b
 80041fa:	2238      	movs	r2, #56	@ 0x38
 80041fc:	189b      	adds	r3, r3, r2
 80041fe:	19db      	adds	r3, r3, r7
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00f      	beq.n	8004226 <_etoa+0xda>
    value = -value;
 8004206:	2198      	movs	r1, #152	@ 0x98
 8004208:	187b      	adds	r3, r7, r1
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	603b      	str	r3, [r7, #0]
 800420e:	239c      	movs	r3, #156	@ 0x9c
 8004210:	18fb      	adds	r3, r7, r3
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	2380      	movs	r3, #128	@ 0x80
 8004216:	061b      	lsls	r3, r3, #24
 8004218:	4053      	eors	r3, r2
 800421a:	607b      	str	r3, [r7, #4]
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	1879      	adds	r1, r7, r1
 8004222:	600a      	str	r2, [r1, #0]
 8004224:	604b      	str	r3, [r1, #4]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8004226:	23a8      	movs	r3, #168	@ 0xa8
 8004228:	18fb      	adds	r3, r7, r3
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	2380      	movs	r3, #128	@ 0x80
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	4013      	ands	r3, r2
 8004232:	d103      	bne.n	800423c <_etoa+0xf0>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8004234:	2306      	movs	r3, #6
 8004236:	22a0      	movs	r2, #160	@ 0xa0
 8004238:	18ba      	adds	r2, r7, r2
 800423a:	6013      	str	r3, [r2, #0]
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800423c:	2698      	movs	r6, #152	@ 0x98
 800423e:	19bb      	adds	r3, r7, r6
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004246:	64fb      	str	r3, [r7, #76]	@ 0x4c
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8004248:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800424a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800424c:	0d1b      	lsrs	r3, r3, #20
 800424e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004250:	2300      	movs	r3, #0
 8004252:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004256:	055b      	lsls	r3, r3, #21
 8004258:	0d5b      	lsrs	r3, r3, #21
 800425a:	4aa3      	ldr	r2, [pc, #652]	@ (80044e8 <_etoa+0x39c>)
 800425c:	4694      	mov	ip, r2
 800425e:	4463      	add	r3, ip
 8004260:	66fb      	str	r3, [r7, #108]	@ 0x6c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8004262:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004264:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004266:	2100      	movs	r1, #0
 8004268:	0010      	movs	r0, r2
 800426a:	4388      	bics	r0, r1
 800426c:	0004      	movs	r4, r0
 800426e:	031b      	lsls	r3, r3, #12
 8004270:	0b1d      	lsrs	r5, r3, #12
 8004272:	2300      	movs	r3, #0
 8004274:	4323      	orrs	r3, r4
 8004276:	623b      	str	r3, [r7, #32]
 8004278:	4b9c      	ldr	r3, [pc, #624]	@ (80044ec <_etoa+0x3a0>)
 800427a:	432b      	orrs	r3, r5
 800427c:	627b      	str	r3, [r7, #36]	@ 0x24
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8004282:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004284:	64fc      	str	r4, [r7, #76]	@ 0x4c
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8004286:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004288:	f7fe f8a0 	bl	80023cc <__aeabi_i2d>
 800428c:	4a98      	ldr	r2, [pc, #608]	@ (80044f0 <_etoa+0x3a4>)
 800428e:	4b99      	ldr	r3, [pc, #612]	@ (80044f4 <_etoa+0x3a8>)
 8004290:	f7fd f9da 	bl	8001648 <__aeabi_dmul>
 8004294:	0002      	movs	r2, r0
 8004296:	000b      	movs	r3, r1
 8004298:	0010      	movs	r0, r2
 800429a:	0019      	movs	r1, r3
 800429c:	4a96      	ldr	r2, [pc, #600]	@ (80044f8 <_etoa+0x3ac>)
 800429e:	4b97      	ldr	r3, [pc, #604]	@ (80044fc <_etoa+0x3b0>)
 80042a0:	f7fc fa2a 	bl	80006f8 <__aeabi_dadd>
 80042a4:	0002      	movs	r2, r0
 80042a6:	000b      	movs	r3, r1
 80042a8:	0014      	movs	r4, r2
 80042aa:	001d      	movs	r5, r3
 80042ac:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80042ae:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80042b0:	2200      	movs	r2, #0
 80042b2:	4b93      	ldr	r3, [pc, #588]	@ (8004500 <_etoa+0x3b4>)
 80042b4:	f7fd fc90 	bl	8001bd8 <__aeabi_dsub>
 80042b8:	0002      	movs	r2, r0
 80042ba:	000b      	movs	r3, r1
 80042bc:	0010      	movs	r0, r2
 80042be:	0019      	movs	r1, r3
 80042c0:	4a90      	ldr	r2, [pc, #576]	@ (8004504 <_etoa+0x3b8>)
 80042c2:	4b91      	ldr	r3, [pc, #580]	@ (8004508 <_etoa+0x3bc>)
 80042c4:	f7fd f9c0 	bl	8001648 <__aeabi_dmul>
 80042c8:	0002      	movs	r2, r0
 80042ca:	000b      	movs	r3, r1
 80042cc:	0020      	movs	r0, r4
 80042ce:	0029      	movs	r1, r5
 80042d0:	f7fc fa12 	bl	80006f8 <__aeabi_dadd>
 80042d4:	0002      	movs	r2, r0
 80042d6:	000b      	movs	r3, r1
 80042d8:	0010      	movs	r0, r2
 80042da:	0019      	movs	r1, r3
 80042dc:	f7fe f83a 	bl	8002354 <__aeabi_d2iz>
 80042e0:	0003      	movs	r3, r0
 80042e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 80042e4:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80042e6:	f7fe f871 	bl	80023cc <__aeabi_i2d>
 80042ea:	4a88      	ldr	r2, [pc, #544]	@ (800450c <_etoa+0x3c0>)
 80042ec:	4b88      	ldr	r3, [pc, #544]	@ (8004510 <_etoa+0x3c4>)
 80042ee:	f7fd f9ab 	bl	8001648 <__aeabi_dmul>
 80042f2:	0002      	movs	r2, r0
 80042f4:	000b      	movs	r3, r1
 80042f6:	0010      	movs	r0, r2
 80042f8:	0019      	movs	r1, r3
 80042fa:	2200      	movs	r2, #0
 80042fc:	4b85      	ldr	r3, [pc, #532]	@ (8004514 <_etoa+0x3c8>)
 80042fe:	f7fc f9fb 	bl	80006f8 <__aeabi_dadd>
 8004302:	0002      	movs	r2, r0
 8004304:	000b      	movs	r3, r1
 8004306:	0010      	movs	r0, r2
 8004308:	0019      	movs	r1, r3
 800430a:	f7fe f823 	bl	8002354 <__aeabi_d2iz>
 800430e:	0003      	movs	r3, r0
 8004310:	66fb      	str	r3, [r7, #108]	@ 0x6c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8004312:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8004314:	f7fe f85a 	bl	80023cc <__aeabi_i2d>
 8004318:	4a7f      	ldr	r2, [pc, #508]	@ (8004518 <_etoa+0x3cc>)
 800431a:	4b80      	ldr	r3, [pc, #512]	@ (800451c <_etoa+0x3d0>)
 800431c:	f7fd f994 	bl	8001648 <__aeabi_dmul>
 8004320:	0002      	movs	r2, r0
 8004322:	000b      	movs	r3, r1
 8004324:	0014      	movs	r4, r2
 8004326:	001d      	movs	r5, r3
 8004328:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800432a:	f7fe f84f 	bl	80023cc <__aeabi_i2d>
 800432e:	4a7c      	ldr	r2, [pc, #496]	@ (8004520 <_etoa+0x3d4>)
 8004330:	4b7c      	ldr	r3, [pc, #496]	@ (8004524 <_etoa+0x3d8>)
 8004332:	f7fd f989 	bl	8001648 <__aeabi_dmul>
 8004336:	0002      	movs	r2, r0
 8004338:	000b      	movs	r3, r1
 800433a:	0020      	movs	r0, r4
 800433c:	0029      	movs	r1, r5
 800433e:	f7fd fc4b 	bl	8001bd8 <__aeabi_dsub>
 8004342:	0002      	movs	r2, r0
 8004344:	000b      	movs	r3, r1
 8004346:	663a      	str	r2, [r7, #96]	@ 0x60
 8004348:	667b      	str	r3, [r7, #100]	@ 0x64
  const double z2 = z * z;
 800434a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800434c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800434e:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8004350:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8004352:	f7fd f979 	bl	8001648 <__aeabi_dmul>
 8004356:	0002      	movs	r2, r0
 8004358:	000b      	movs	r3, r1
 800435a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800435c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800435e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004360:	4a71      	ldr	r2, [pc, #452]	@ (8004528 <_etoa+0x3dc>)
 8004362:	4694      	mov	ip, r2
 8004364:	4463      	add	r3, ip
 8004366:	61bb      	str	r3, [r7, #24]
 8004368:	17db      	asrs	r3, r3, #31
 800436a:	61fb      	str	r3, [r7, #28]
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	051b      	lsls	r3, r3, #20
 8004370:	617b      	str	r3, [r7, #20]
 8004372:	2300      	movs	r3, #0
 8004374:	613b      	str	r3, [r7, #16]
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	697c      	ldr	r4, [r7, #20]
 800437a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800437c:	64fc      	str	r4, [r7, #76]	@ 0x4c
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800437e:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 8004380:	6cfd      	ldr	r5, [r7, #76]	@ 0x4c
 8004382:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8004384:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8004386:	0002      	movs	r2, r0
 8004388:	000b      	movs	r3, r1
 800438a:	f7fc f9b5 	bl	80006f8 <__aeabi_dadd>
 800438e:	0002      	movs	r2, r0
 8004390:	000b      	movs	r3, r1
 8004392:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004394:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004396:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004398:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800439a:	2000      	movs	r0, #0
 800439c:	2180      	movs	r1, #128	@ 0x80
 800439e:	05c9      	lsls	r1, r1, #23
 80043a0:	f7fd fc1a 	bl	8001bd8 <__aeabi_dsub>
 80043a4:	0002      	movs	r2, r0
 80043a6:	000b      	movs	r3, r1
 80043a8:	623a      	str	r2, [r7, #32]
 80043aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ac:	2200      	movs	r2, #0
 80043ae:	4b5f      	ldr	r3, [pc, #380]	@ (800452c <_etoa+0x3e0>)
 80043b0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80043b2:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80043b4:	f7fc fd04 	bl	8000dc0 <__aeabi_ddiv>
 80043b8:	0002      	movs	r2, r0
 80043ba:	000b      	movs	r3, r1
 80043bc:	0010      	movs	r0, r2
 80043be:	0019      	movs	r1, r3
 80043c0:	2200      	movs	r2, #0
 80043c2:	4b5b      	ldr	r3, [pc, #364]	@ (8004530 <_etoa+0x3e4>)
 80043c4:	f7fc f998 	bl	80006f8 <__aeabi_dadd>
 80043c8:	0002      	movs	r2, r0
 80043ca:	000b      	movs	r3, r1
 80043cc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80043ce:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80043d0:	f7fc fcf6 	bl	8000dc0 <__aeabi_ddiv>
 80043d4:	0002      	movs	r2, r0
 80043d6:	000b      	movs	r3, r1
 80043d8:	0010      	movs	r0, r2
 80043da:	0019      	movs	r1, r3
 80043dc:	2200      	movs	r2, #0
 80043de:	4b55      	ldr	r3, [pc, #340]	@ (8004534 <_etoa+0x3e8>)
 80043e0:	f7fc f98a 	bl	80006f8 <__aeabi_dadd>
 80043e4:	0002      	movs	r2, r0
 80043e6:	000b      	movs	r3, r1
 80043e8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80043ea:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80043ec:	f7fc fce8 	bl	8000dc0 <__aeabi_ddiv>
 80043f0:	0002      	movs	r2, r0
 80043f2:	000b      	movs	r3, r1
 80043f4:	6a38      	ldr	r0, [r7, #32]
 80043f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80043f8:	f7fc f97e 	bl	80006f8 <__aeabi_dadd>
 80043fc:	0002      	movs	r2, r0
 80043fe:	000b      	movs	r3, r1
 8004400:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004402:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004404:	f7fc fcdc 	bl	8000dc0 <__aeabi_ddiv>
 8004408:	0002      	movs	r2, r0
 800440a:	000b      	movs	r3, r1
 800440c:	0010      	movs	r0, r2
 800440e:	0019      	movs	r1, r3
 8004410:	2200      	movs	r2, #0
 8004412:	4b36      	ldr	r3, [pc, #216]	@ (80044ec <_etoa+0x3a0>)
 8004414:	f7fc f970 	bl	80006f8 <__aeabi_dadd>
 8004418:	0002      	movs	r2, r0
 800441a:	000b      	movs	r3, r1
 800441c:	0020      	movs	r0, r4
 800441e:	0029      	movs	r1, r5
 8004420:	f7fd f912 	bl	8001648 <__aeabi_dmul>
 8004424:	0002      	movs	r2, r0
 8004426:	000b      	movs	r3, r1
 8004428:	64ba      	str	r2, [r7, #72]	@ 0x48
 800442a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  // correct for rounding errors
  if (value < conv.F) {
 800442c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800442e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004430:	19b9      	adds	r1, r7, r6
 8004432:	6808      	ldr	r0, [r1, #0]
 8004434:	6849      	ldr	r1, [r1, #4]
 8004436:	f7fc f80f 	bl	8000458 <__aeabi_dcmplt>
 800443a:	1e03      	subs	r3, r0, #0
 800443c:	d00c      	beq.n	8004458 <_etoa+0x30c>
    expval--;
 800443e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004440:	3b01      	subs	r3, #1
 8004442:	67fb      	str	r3, [r7, #124]	@ 0x7c
    conv.F /= 10;
 8004444:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8004446:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004448:	2200      	movs	r2, #0
 800444a:	4b39      	ldr	r3, [pc, #228]	@ (8004530 <_etoa+0x3e4>)
 800444c:	f7fc fcb8 	bl	8000dc0 <__aeabi_ddiv>
 8004450:	0002      	movs	r2, r0
 8004452:	000b      	movs	r3, r1
 8004454:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004456:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8004458:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800445a:	2b63      	cmp	r3, #99	@ 0x63
 800445c:	dc04      	bgt.n	8004468 <_etoa+0x31c>
 800445e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004460:	3363      	adds	r3, #99	@ 0x63
 8004462:	db01      	blt.n	8004468 <_etoa+0x31c>
 8004464:	2304      	movs	r3, #4
 8004466:	e000      	b.n	800446a <_etoa+0x31e>
 8004468:	2305      	movs	r3, #5
 800446a:	67bb      	str	r3, [r7, #120]	@ 0x78

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 800446c:	23a8      	movs	r3, #168	@ 0xa8
 800446e:	18fb      	adds	r3, r7, r3
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	2380      	movs	r3, #128	@ 0x80
 8004474:	011b      	lsls	r3, r3, #4
 8004476:	4013      	ands	r3, r2
 8004478:	d100      	bne.n	800447c <_etoa+0x330>
 800447a:	e074      	b.n	8004566 <_etoa+0x41a>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800447c:	4a2e      	ldr	r2, [pc, #184]	@ (8004538 <_etoa+0x3ec>)
 800447e:	4b2f      	ldr	r3, [pc, #188]	@ (800453c <_etoa+0x3f0>)
 8004480:	2498      	movs	r4, #152	@ 0x98
 8004482:	1939      	adds	r1, r7, r4
 8004484:	6808      	ldr	r0, [r1, #0]
 8004486:	6849      	ldr	r1, [r1, #4]
 8004488:	f7fc f804 	bl	8000494 <__aeabi_dcmpge>
 800448c:	1e03      	subs	r3, r0, #0
 800448e:	d059      	beq.n	8004544 <_etoa+0x3f8>
 8004490:	2200      	movs	r2, #0
 8004492:	4b2b      	ldr	r3, [pc, #172]	@ (8004540 <_etoa+0x3f4>)
 8004494:	1939      	adds	r1, r7, r4
 8004496:	6808      	ldr	r0, [r1, #0]
 8004498:	6849      	ldr	r1, [r1, #4]
 800449a:	f7fb ffdd 	bl	8000458 <__aeabi_dcmplt>
 800449e:	1e03      	subs	r3, r0, #0
 80044a0:	d050      	beq.n	8004544 <_etoa+0x3f8>
      if ((int)prec > expval) {
 80044a2:	21a0      	movs	r1, #160	@ 0xa0
 80044a4:	187b      	adds	r3, r7, r1
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80044aa:	429a      	cmp	r2, r3
 80044ac:	da07      	bge.n	80044be <_etoa+0x372>
        prec = (unsigned)((int)prec - expval - 1);
 80044ae:	187b      	adds	r3, r7, r1
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	3b01      	subs	r3, #1
 80044b8:	187a      	adds	r2, r7, r1
 80044ba:	6013      	str	r3, [r2, #0]
 80044bc:	e003      	b.n	80044c6 <_etoa+0x37a>
      }
      else {
        prec = 0;
 80044be:	2300      	movs	r3, #0
 80044c0:	22a0      	movs	r2, #160	@ 0xa0
 80044c2:	18ba      	adds	r2, r7, r2
 80044c4:	6013      	str	r3, [r2, #0]
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 80044c6:	21a8      	movs	r1, #168	@ 0xa8
 80044c8:	187b      	adds	r3, r7, r1
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2280      	movs	r2, #128	@ 0x80
 80044ce:	00d2      	lsls	r2, r2, #3
 80044d0:	4313      	orrs	r3, r2
 80044d2:	187a      	adds	r2, r7, r1
 80044d4:	6013      	str	r3, [r2, #0]
      // no characters in exponent
      minwidth = 0U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	67bb      	str	r3, [r7, #120]	@ 0x78
      expval   = 0;
 80044da:	2300      	movs	r3, #0
 80044dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80044de:	e042      	b.n	8004566 <_etoa+0x41a>
 80044e0:	7fefffff 	.word	0x7fefffff
 80044e4:	ffefffff 	.word	0xffefffff
 80044e8:	fffffc01 	.word	0xfffffc01
 80044ec:	3ff00000 	.word	0x3ff00000
 80044f0:	509f79fb 	.word	0x509f79fb
 80044f4:	3fd34413 	.word	0x3fd34413
 80044f8:	8b60c8b3 	.word	0x8b60c8b3
 80044fc:	3fc68a28 	.word	0x3fc68a28
 8004500:	3ff80000 	.word	0x3ff80000
 8004504:	636f4361 	.word	0x636f4361
 8004508:	3fd287a7 	.word	0x3fd287a7
 800450c:	0979a371 	.word	0x0979a371
 8004510:	400a934f 	.word	0x400a934f
 8004514:	3fe00000 	.word	0x3fe00000
 8004518:	bbb55516 	.word	0xbbb55516
 800451c:	40026bb1 	.word	0x40026bb1
 8004520:	fefa39ef 	.word	0xfefa39ef
 8004524:	3fe62e42 	.word	0x3fe62e42
 8004528:	000003ff 	.word	0x000003ff
 800452c:	402c0000 	.word	0x402c0000
 8004530:	40240000 	.word	0x40240000
 8004534:	40180000 	.word	0x40180000
 8004538:	eb1c432d 	.word	0xeb1c432d
 800453c:	3f1a36e2 	.word	0x3f1a36e2
 8004540:	412e8480 	.word	0x412e8480
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8004544:	21a0      	movs	r1, #160	@ 0xa0
 8004546:	187b      	adds	r3, r7, r1
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00b      	beq.n	8004566 <_etoa+0x41a>
 800454e:	23a8      	movs	r3, #168	@ 0xa8
 8004550:	18fb      	adds	r3, r7, r3
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	2380      	movs	r3, #128	@ 0x80
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	4013      	ands	r3, r2
 800455a:	d004      	beq.n	8004566 <_etoa+0x41a>
        --prec;
 800455c:	187b      	adds	r3, r7, r1
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	3b01      	subs	r3, #1
 8004562:	187a      	adds	r2, r7, r1
 8004564:	6013      	str	r3, [r2, #0]
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8004566:	22a4      	movs	r2, #164	@ 0xa4
 8004568:	18bb      	adds	r3, r7, r2
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (width > minwidth) {
 800456e:	18bb      	adds	r3, r7, r2
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004574:	429a      	cmp	r2, r3
 8004576:	d904      	bls.n	8004582 <_etoa+0x436>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8004578:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800457a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004580:	e001      	b.n	8004586 <_etoa+0x43a>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8004582:	2300      	movs	r3, #0
 8004584:	677b      	str	r3, [r7, #116]	@ 0x74
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8004586:	23a8      	movs	r3, #168	@ 0xa8
 8004588:	18fb      	adds	r3, r7, r3
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2202      	movs	r2, #2
 800458e:	4013      	ands	r3, r2
 8004590:	d004      	beq.n	800459c <_etoa+0x450>
 8004592:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <_etoa+0x450>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	677b      	str	r3, [r7, #116]	@ 0x74
  }

  // rescale the float value
  if (expval) {
 800459c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00c      	beq.n	80045bc <_etoa+0x470>
    value /= conv.F;
 80045a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045a6:	2498      	movs	r4, #152	@ 0x98
 80045a8:	1939      	adds	r1, r7, r4
 80045aa:	6808      	ldr	r0, [r1, #0]
 80045ac:	6849      	ldr	r1, [r1, #4]
 80045ae:	f7fc fc07 	bl	8000dc0 <__aeabi_ddiv>
 80045b2:	0002      	movs	r2, r0
 80045b4:	000b      	movs	r3, r1
 80045b6:	1939      	adds	r1, r7, r4
 80045b8:	600a      	str	r2, [r1, #0]
 80045ba:	604b      	str	r3, [r1, #4]
  }

  // output the floating part
  const size_t start_idx = idx;
 80045bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045be:	657b      	str	r3, [r7, #84]	@ 0x54
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 80045c0:	233b      	movs	r3, #59	@ 0x3b
 80045c2:	2238      	movs	r2, #56	@ 0x38
 80045c4:	189b      	adds	r3, r3, r2
 80045c6:	19db      	adds	r3, r3, r7
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00b      	beq.n	80045e6 <_etoa+0x49a>
 80045ce:	2398      	movs	r3, #152	@ 0x98
 80045d0:	18fb      	adds	r3, r7, r3
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80045d6:	239c      	movs	r3, #156	@ 0x9c
 80045d8:	18fb      	adds	r3, r7, r3
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2280      	movs	r2, #128	@ 0x80
 80045de:	0612      	lsls	r2, r2, #24
 80045e0:	405a      	eors	r2, r3
 80045e2:	637a      	str	r2, [r7, #52]	@ 0x34
 80045e4:	e005      	b.n	80045f2 <_etoa+0x4a6>
 80045e6:	2398      	movs	r3, #152	@ 0x98
 80045e8:	18fb      	adds	r3, r7, r3
 80045ea:	685c      	ldr	r4, [r3, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80045f0:	637c      	str	r4, [r7, #52]	@ 0x34
 80045f2:	23a8      	movs	r3, #168	@ 0xa8
 80045f4:	18fa      	adds	r2, r7, r3
 80045f6:	6813      	ldr	r3, [r2, #0]
 80045f8:	4a31      	ldr	r2, [pc, #196]	@ (80046c0 <_etoa+0x574>)
 80045fa:	4013      	ands	r3, r2
 80045fc:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 80045fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004600:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004602:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8004604:	9304      	str	r3, [sp, #16]
 8004606:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004608:	9303      	str	r3, [sp, #12]
 800460a:	25a0      	movs	r5, #160	@ 0xa0
 800460c:	197d      	adds	r5, r7, r5
 800460e:	682b      	ldr	r3, [r5, #0]
 8004610:	9302      	str	r3, [sp, #8]
 8004612:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
 8004614:	6b7e      	ldr	r6, [r7, #52]	@ 0x34
 8004616:	9500      	str	r5, [sp, #0]
 8004618:	9601      	str	r6, [sp, #4]
 800461a:	0023      	movs	r3, r4
 800461c:	f7ff fb58 	bl	8003cd0 <_ftoa>
 8004620:	0003      	movs	r3, r0
 8004622:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // output the exponent part
  if (minwidth) {
 8004624:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004626:	2b00      	cmp	r3, #0
 8004628:	d044      	beq.n	80046b4 <_etoa+0x568>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800462a:	23a8      	movs	r3, #168	@ 0xa8
 800462c:	18fb      	adds	r3, r7, r3
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2220      	movs	r2, #32
 8004632:	4013      	ands	r3, r2
 8004634:	d001      	beq.n	800463a <_etoa+0x4ee>
 8004636:	2045      	movs	r0, #69	@ 0x45
 8004638:	e000      	b.n	800463c <_etoa+0x4f0>
 800463a:	2065      	movs	r0, #101	@ 0x65
 800463c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800463e:	1c53      	adds	r3, r2, #1
 8004640:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004644:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004646:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8004648:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800464a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800464c:	17da      	asrs	r2, r3, #31
 800464e:	189b      	adds	r3, r3, r2
 8004650:	4053      	eors	r3, r2
 8004652:	469c      	mov	ip, r3
 8004654:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004656:	0fdb      	lsrs	r3, r3, #31
 8004658:	b2db      	uxtb	r3, r3
 800465a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800465c:	3a01      	subs	r2, #1
 800465e:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 8004660:	6bfc      	ldr	r4, [r7, #60]	@ 0x3c
 8004662:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004664:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8004666:	2605      	movs	r6, #5
 8004668:	9605      	str	r6, [sp, #20]
 800466a:	9204      	str	r2, [sp, #16]
 800466c:	2200      	movs	r2, #0
 800466e:	9203      	str	r2, [sp, #12]
 8004670:	220a      	movs	r2, #10
 8004672:	9202      	str	r2, [sp, #8]
 8004674:	9301      	str	r3, [sp, #4]
 8004676:	4663      	mov	r3, ip
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	002b      	movs	r3, r5
 800467c:	0022      	movs	r2, r4
 800467e:	f7ff fa4a 	bl	8003b16 <_ntoa_long>
 8004682:	0003      	movs	r3, r0
 8004684:	63fb      	str	r3, [r7, #60]	@ 0x3c
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8004686:	23a8      	movs	r3, #168	@ 0xa8
 8004688:	18fb      	adds	r3, r7, r3
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2202      	movs	r2, #2
 800468e:	4013      	ands	r3, r2
 8004690:	d010      	beq.n	80046b4 <_etoa+0x568>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8004692:	e007      	b.n	80046a4 <_etoa+0x558>
 8004694:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004696:	1c53      	adds	r3, r2, #1
 8004698:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800469a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800469c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800469e:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80046a0:	2020      	movs	r0, #32
 80046a2:	47a0      	blx	r4
 80046a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80046a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	22a4      	movs	r2, #164	@ 0xa4
 80046ac:	18ba      	adds	r2, r7, r2
 80046ae:	6812      	ldr	r2, [r2, #0]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d8ef      	bhi.n	8004694 <_etoa+0x548>
    }
  }
  return idx;
 80046b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80046b6:	0018      	movs	r0, r3
 80046b8:	46bd      	mov	sp, r7
 80046ba:	b021      	add	sp, #132	@ 0x84
 80046bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046be:	46c0      	nop			@ (mov r8, r8)
 80046c0:	fffff7ff 	.word	0xfffff7ff

080046c4 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 80046c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046c6:	46c6      	mov	lr, r8
 80046c8:	b500      	push	{lr}
 80046ca:	b0a6      	sub	sp, #152	@ 0x98
 80046cc:	af0a      	add	r7, sp, #40	@ 0x28
 80046ce:	6278      	str	r0, [r7, #36]	@ 0x24
 80046d0:	6239      	str	r1, [r7, #32]
 80046d2:	61fa      	str	r2, [r7, #28]
 80046d4:	61bb      	str	r3, [r7, #24]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 80046d6:	2300      	movs	r3, #0
 80046d8:	65fb      	str	r3, [r7, #92]	@ 0x5c

  if (!buffer) {
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d001      	beq.n	80046e4 <_vsnprintf+0x20>
 80046e0:	f000 fc51 	bl	8004f86 <_vsnprintf+0x8c2>
    // use null output function
    out = _out_null;
 80046e4:	4bad      	ldr	r3, [pc, #692]	@ (800499c <_vsnprintf+0x2d8>)
 80046e6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  while (*format)
 80046e8:	f000 fc4d 	bl	8004f86 <_vsnprintf+0x8c2>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	2b25      	cmp	r3, #37	@ 0x25
 80046f2:	d00d      	beq.n	8004710 <_vsnprintf+0x4c>
      // no
      out(*format, buffer, idx++, maxlen);
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	7818      	ldrb	r0, [r3, #0]
 80046f8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80046fa:	1c53      	adds	r3, r2, #1
 80046fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	6a39      	ldr	r1, [r7, #32]
 8004702:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8004704:	47a0      	blx	r4
      format++;
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	3301      	adds	r3, #1
 800470a:	61bb      	str	r3, [r7, #24]
      continue;
 800470c:	f000 fc3b 	bl	8004f86 <_vsnprintf+0x8c2>
    }
    else {
      // yes, evaluate it
      format++;
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	3301      	adds	r3, #1
 8004714:	61bb      	str	r3, [r7, #24]
    }

    // evaluate flags
    flags = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	66fb      	str	r3, [r7, #108]	@ 0x6c
    do {
      switch (*format) {
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	3b20      	subs	r3, #32
 8004720:	2b10      	cmp	r3, #16
 8004722:	d836      	bhi.n	8004792 <_vsnprintf+0xce>
 8004724:	009a      	lsls	r2, r3, #2
 8004726:	4b9e      	ldr	r3, [pc, #632]	@ (80049a0 <_vsnprintf+0x2dc>)
 8004728:	18d3      	adds	r3, r2, r3
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	469f      	mov	pc, r3
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800472e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004730:	2201      	movs	r2, #1
 8004732:	4313      	orrs	r3, r2
 8004734:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	3301      	adds	r3, #1
 800473a:	61bb      	str	r3, [r7, #24]
 800473c:	2301      	movs	r3, #1
 800473e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004740:	e02a      	b.n	8004798 <_vsnprintf+0xd4>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8004742:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004744:	2202      	movs	r2, #2
 8004746:	4313      	orrs	r3, r2
 8004748:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	3301      	adds	r3, #1
 800474e:	61bb      	str	r3, [r7, #24]
 8004750:	2301      	movs	r3, #1
 8004752:	663b      	str	r3, [r7, #96]	@ 0x60
 8004754:	e020      	b.n	8004798 <_vsnprintf+0xd4>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8004756:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004758:	2204      	movs	r2, #4
 800475a:	4313      	orrs	r3, r2
 800475c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	3301      	adds	r3, #1
 8004762:	61bb      	str	r3, [r7, #24]
 8004764:	2301      	movs	r3, #1
 8004766:	663b      	str	r3, [r7, #96]	@ 0x60
 8004768:	e016      	b.n	8004798 <_vsnprintf+0xd4>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800476a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800476c:	2208      	movs	r2, #8
 800476e:	4313      	orrs	r3, r2
 8004770:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	3301      	adds	r3, #1
 8004776:	61bb      	str	r3, [r7, #24]
 8004778:	2301      	movs	r3, #1
 800477a:	663b      	str	r3, [r7, #96]	@ 0x60
 800477c:	e00c      	b.n	8004798 <_vsnprintf+0xd4>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800477e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004780:	2210      	movs	r2, #16
 8004782:	4313      	orrs	r3, r2
 8004784:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	3301      	adds	r3, #1
 800478a:	61bb      	str	r3, [r7, #24]
 800478c:	2301      	movs	r3, #1
 800478e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004790:	e002      	b.n	8004798 <_vsnprintf+0xd4>
        default :                                   n = 0U; break;
 8004792:	2300      	movs	r3, #0
 8004794:	663b      	str	r3, [r7, #96]	@ 0x60
 8004796:	46c0      	nop			@ (mov r8, r8)
      }
    } while (n);
 8004798:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1bd      	bne.n	800471a <_vsnprintf+0x56>

    // evaluate width field
    width = 0U;
 800479e:	2300      	movs	r3, #0
 80047a0:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (_is_digit(*format)) {
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	0018      	movs	r0, r3
 80047a8:	f7ff f856 	bl	8003858 <_is_digit>
 80047ac:	1e03      	subs	r3, r0, #0
 80047ae:	d007      	beq.n	80047c0 <_vsnprintf+0xfc>
      width = _atoi(&format);
 80047b0:	2318      	movs	r3, #24
 80047b2:	18fb      	adds	r3, r7, r3
 80047b4:	0018      	movs	r0, r3
 80047b6:	f7ff f868 	bl	800388a <_atoi>
 80047ba:	0003      	movs	r3, r0
 80047bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047be:	e01c      	b.n	80047fa <_vsnprintf+0x136>
    }
    else if (*format == '*') {
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80047c6:	d118      	bne.n	80047fa <_vsnprintf+0x136>
      const int w = va_arg(va, int);
 80047c8:	2388      	movs	r3, #136	@ 0x88
 80047ca:	18fb      	adds	r3, r7, r3
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	1d1a      	adds	r2, r3, #4
 80047d0:	2188      	movs	r1, #136	@ 0x88
 80047d2:	1879      	adds	r1, r7, r1
 80047d4:	600a      	str	r2, [r1, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      if (w < 0) {
 80047da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047dc:	2b00      	cmp	r3, #0
 80047de:	da07      	bge.n	80047f0 <_vsnprintf+0x12c>
        flags |= FLAGS_LEFT;    // reverse padding
 80047e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047e2:	2202      	movs	r2, #2
 80047e4:	4313      	orrs	r3, r2
 80047e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
        width = (unsigned int)-w;
 80047e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047ea:	425b      	negs	r3, r3
 80047ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047ee:	e001      	b.n	80047f4 <_vsnprintf+0x130>
      }
      else {
        width = (unsigned int)w;
 80047f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047f2:	66bb      	str	r3, [r7, #104]	@ 0x68
      }
      format++;
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	3301      	adds	r3, #1
 80047f8:	61bb      	str	r3, [r7, #24]
    }

    // evaluate precision field
    precision = 0U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	667b      	str	r3, [r7, #100]	@ 0x64
    if (*format == '.') {
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	2b2e      	cmp	r3, #46	@ 0x2e
 8004804:	d12b      	bne.n	800485e <_vsnprintf+0x19a>
      flags |= FLAGS_PRECISION;
 8004806:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004808:	2280      	movs	r2, #128	@ 0x80
 800480a:	00d2      	lsls	r2, r2, #3
 800480c:	4313      	orrs	r3, r2
 800480e:	66fb      	str	r3, [r7, #108]	@ 0x6c
      format++;
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	3301      	adds	r3, #1
 8004814:	61bb      	str	r3, [r7, #24]
      if (_is_digit(*format)) {
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	0018      	movs	r0, r3
 800481c:	f7ff f81c 	bl	8003858 <_is_digit>
 8004820:	1e03      	subs	r3, r0, #0
 8004822:	d007      	beq.n	8004834 <_vsnprintf+0x170>
        precision = _atoi(&format);
 8004824:	2318      	movs	r3, #24
 8004826:	18fb      	adds	r3, r7, r3
 8004828:	0018      	movs	r0, r3
 800482a:	f7ff f82e 	bl	800388a <_atoi>
 800482e:	0003      	movs	r3, r0
 8004830:	667b      	str	r3, [r7, #100]	@ 0x64
 8004832:	e014      	b.n	800485e <_vsnprintf+0x19a>
      }
      else if (*format == '*') {
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	2b2a      	cmp	r3, #42	@ 0x2a
 800483a:	d110      	bne.n	800485e <_vsnprintf+0x19a>
        const int prec = (int)va_arg(va, int);
 800483c:	2388      	movs	r3, #136	@ 0x88
 800483e:	18fb      	adds	r3, r7, r3
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	1d1a      	adds	r2, r3, #4
 8004844:	2188      	movs	r1, #136	@ 0x88
 8004846:	1879      	adds	r1, r7, r1
 8004848:	600a      	str	r2, [r1, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	647b      	str	r3, [r7, #68]	@ 0x44
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800484e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004850:	2b00      	cmp	r3, #0
 8004852:	da00      	bge.n	8004856 <_vsnprintf+0x192>
 8004854:	2300      	movs	r3, #0
 8004856:	667b      	str	r3, [r7, #100]	@ 0x64
        format++;
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	3301      	adds	r3, #1
 800485c:	61bb      	str	r3, [r7, #24]
      }
    }

    // evaluate length field
    switch (*format) {
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	3b68      	subs	r3, #104	@ 0x68
 8004864:	2b12      	cmp	r3, #18
 8004866:	d847      	bhi.n	80048f8 <_vsnprintf+0x234>
 8004868:	009a      	lsls	r2, r3, #2
 800486a:	4b4e      	ldr	r3, [pc, #312]	@ (80049a4 <_vsnprintf+0x2e0>)
 800486c:	18d3      	adds	r3, r2, r3
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	469f      	mov	pc, r3
      case 'l' :
        flags |= FLAGS_LONG;
 8004872:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004874:	2280      	movs	r2, #128	@ 0x80
 8004876:	0052      	lsls	r2, r2, #1
 8004878:	4313      	orrs	r3, r2
 800487a:	66fb      	str	r3, [r7, #108]	@ 0x6c
        format++;
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	3301      	adds	r3, #1
 8004880:	61bb      	str	r3, [r7, #24]
        if (*format == 'l') {
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	2b6c      	cmp	r3, #108	@ 0x6c
 8004888:	d138      	bne.n	80048fc <_vsnprintf+0x238>
          flags |= FLAGS_LONG_LONG;
 800488a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800488c:	2280      	movs	r2, #128	@ 0x80
 800488e:	0092      	lsls	r2, r2, #2
 8004890:	4313      	orrs	r3, r2
 8004892:	66fb      	str	r3, [r7, #108]	@ 0x6c
          format++;
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	3301      	adds	r3, #1
 8004898:	61bb      	str	r3, [r7, #24]
        }
        break;
 800489a:	e02f      	b.n	80048fc <_vsnprintf+0x238>
      case 'h' :
        flags |= FLAGS_SHORT;
 800489c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800489e:	2280      	movs	r2, #128	@ 0x80
 80048a0:	4313      	orrs	r3, r2
 80048a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
        format++;
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	3301      	adds	r3, #1
 80048a8:	61bb      	str	r3, [r7, #24]
        if (*format == 'h') {
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	2b68      	cmp	r3, #104	@ 0x68
 80048b0:	d126      	bne.n	8004900 <_vsnprintf+0x23c>
          flags |= FLAGS_CHAR;
 80048b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048b4:	2240      	movs	r2, #64	@ 0x40
 80048b6:	4313      	orrs	r3, r2
 80048b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
          format++;
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	3301      	adds	r3, #1
 80048be:	61bb      	str	r3, [r7, #24]
        }
        break;
 80048c0:	e01e      	b.n	8004900 <_vsnprintf+0x23c>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80048c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048c4:	2280      	movs	r2, #128	@ 0x80
 80048c6:	0052      	lsls	r2, r2, #1
 80048c8:	4313      	orrs	r3, r2
 80048ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
        format++;
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	3301      	adds	r3, #1
 80048d0:	61bb      	str	r3, [r7, #24]
        break;
 80048d2:	e016      	b.n	8004902 <_vsnprintf+0x23e>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80048d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048d6:	2280      	movs	r2, #128	@ 0x80
 80048d8:	0092      	lsls	r2, r2, #2
 80048da:	4313      	orrs	r3, r2
 80048dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
        format++;
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	3301      	adds	r3, #1
 80048e2:	61bb      	str	r3, [r7, #24]
        break;
 80048e4:	e00d      	b.n	8004902 <_vsnprintf+0x23e>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80048e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048e8:	2280      	movs	r2, #128	@ 0x80
 80048ea:	0052      	lsls	r2, r2, #1
 80048ec:	4313      	orrs	r3, r2
 80048ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
        format++;
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	3301      	adds	r3, #1
 80048f4:	61bb      	str	r3, [r7, #24]
        break;
 80048f6:	e004      	b.n	8004902 <_vsnprintf+0x23e>
      default :
        break;
 80048f8:	46c0      	nop			@ (mov r8, r8)
 80048fa:	e002      	b.n	8004902 <_vsnprintf+0x23e>
        break;
 80048fc:	46c0      	nop			@ (mov r8, r8)
 80048fe:	e000      	b.n	8004902 <_vsnprintf+0x23e>
        break;
 8004900:	46c0      	nop			@ (mov r8, r8)
    }

    // evaluate specifier
    switch (*format) {
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	2b67      	cmp	r3, #103	@ 0x67
 8004908:	dc28      	bgt.n	800495c <_vsnprintf+0x298>
 800490a:	2b25      	cmp	r3, #37	@ 0x25
 800490c:	da1d      	bge.n	800494a <_vsnprintf+0x286>
 800490e:	e32d      	b.n	8004f6c <_vsnprintf+0x8a8>
 8004910:	3b69      	subs	r3, #105	@ 0x69
 8004912:	2201      	movs	r2, #1
 8004914:	409a      	lsls	r2, r3
 8004916:	0013      	movs	r3, r2
 8004918:	4a23      	ldr	r2, [pc, #140]	@ (80049a8 <_vsnprintf+0x2e4>)
 800491a:	401a      	ands	r2, r3
 800491c:	1e51      	subs	r1, r2, #1
 800491e:	418a      	sbcs	r2, r1
 8004920:	b2d2      	uxtb	r2, r2
 8004922:	2a00      	cmp	r2, #0
 8004924:	d120      	bne.n	8004968 <_vsnprintf+0x2a4>
 8004926:	2280      	movs	r2, #128	@ 0x80
 8004928:	401a      	ands	r2, r3
 800492a:	1e51      	subs	r1, r2, #1
 800492c:	418a      	sbcs	r2, r1
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	2a00      	cmp	r2, #0
 8004932:	d000      	beq.n	8004936 <_vsnprintf+0x272>
 8004934:	e2b5      	b.n	8004ea2 <_vsnprintf+0x7de>
 8004936:	2280      	movs	r2, #128	@ 0x80
 8004938:	00d2      	lsls	r2, r2, #3
 800493a:	4013      	ands	r3, r2
 800493c:	1e5a      	subs	r2, r3, #1
 800493e:	4193      	sbcs	r3, r2
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d000      	beq.n	8004948 <_vsnprintf+0x284>
 8004946:	e246      	b.n	8004dd6 <_vsnprintf+0x712>
 8004948:	e310      	b.n	8004f6c <_vsnprintf+0x8a8>
 800494a:	3b25      	subs	r3, #37	@ 0x25
 800494c:	2b42      	cmp	r3, #66	@ 0x42
 800494e:	d900      	bls.n	8004952 <_vsnprintf+0x28e>
 8004950:	e30c      	b.n	8004f6c <_vsnprintf+0x8a8>
 8004952:	009a      	lsls	r2, r3, #2
 8004954:	4b15      	ldr	r3, [pc, #84]	@ (80049ac <_vsnprintf+0x2e8>)
 8004956:	18d3      	adds	r3, r2, r3
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	469f      	mov	pc, r3
 800495c:	2b78      	cmp	r3, #120	@ 0x78
 800495e:	dd00      	ble.n	8004962 <_vsnprintf+0x29e>
 8004960:	e304      	b.n	8004f6c <_vsnprintf+0x8a8>
 8004962:	2b69      	cmp	r3, #105	@ 0x69
 8004964:	dad4      	bge.n	8004910 <_vsnprintf+0x24c>
 8004966:	e301      	b.n	8004f6c <_vsnprintf+0x8a8>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	2b78      	cmp	r3, #120	@ 0x78
 800496e:	d003      	beq.n	8004978 <_vsnprintf+0x2b4>
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	2b58      	cmp	r3, #88	@ 0x58
 8004976:	d102      	bne.n	800497e <_vsnprintf+0x2ba>
          base = 16U;
 8004978:	2310      	movs	r3, #16
 800497a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800497c:	e01e      	b.n	80049bc <_vsnprintf+0x2f8>
        }
        else if (*format == 'o') {
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	2b6f      	cmp	r3, #111	@ 0x6f
 8004984:	d102      	bne.n	800498c <_vsnprintf+0x2c8>
          base =  8U;
 8004986:	2308      	movs	r3, #8
 8004988:	65bb      	str	r3, [r7, #88]	@ 0x58
 800498a:	e017      	b.n	80049bc <_vsnprintf+0x2f8>
        }
        else if (*format == 'b') {
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	2b62      	cmp	r3, #98	@ 0x62
 8004992:	d10d      	bne.n	80049b0 <_vsnprintf+0x2ec>
          base =  2U;
 8004994:	2302      	movs	r3, #2
 8004996:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004998:	e010      	b.n	80049bc <_vsnprintf+0x2f8>
 800499a:	46c0      	nop			@ (mov r8, r8)
 800499c:	080037d7 	.word	0x080037d7
 80049a0:	0800c10c 	.word	0x0800c10c
 80049a4:	0800c150 	.word	0x0800c150
 80049a8:	00009041 	.word	0x00009041
 80049ac:	0800c19c 	.word	0x0800c19c
        }
        else {
          base = 10U;
 80049b0:	230a      	movs	r3, #10
 80049b2:	65bb      	str	r3, [r7, #88]	@ 0x58
          flags &= ~FLAGS_HASH;   // no hash for dec format
 80049b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049b6:	2210      	movs	r2, #16
 80049b8:	4393      	bics	r3, r2
 80049ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
        }
        // uppercase
        if (*format == 'X') {
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	2b58      	cmp	r3, #88	@ 0x58
 80049c2:	d103      	bne.n	80049cc <_vsnprintf+0x308>
          flags |= FLAGS_UPPERCASE;
 80049c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049c6:	2220      	movs	r2, #32
 80049c8:	4313      	orrs	r3, r2
 80049ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	2b69      	cmp	r3, #105	@ 0x69
 80049d2:	d007      	beq.n	80049e4 <_vsnprintf+0x320>
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	2b64      	cmp	r3, #100	@ 0x64
 80049da:	d003      	beq.n	80049e4 <_vsnprintf+0x320>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80049dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049de:	220c      	movs	r2, #12
 80049e0:	4393      	bics	r3, r2
 80049e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 80049e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80049e6:	2380      	movs	r3, #128	@ 0x80
 80049e8:	00db      	lsls	r3, r3, #3
 80049ea:	4013      	ands	r3, r2
 80049ec:	d003      	beq.n	80049f6 <_vsnprintf+0x332>
          flags &= ~FLAGS_ZEROPAD;
 80049ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049f0:	2201      	movs	r2, #1
 80049f2:	4393      	bics	r3, r2
 80049f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	2b69      	cmp	r3, #105	@ 0x69
 80049fc:	d004      	beq.n	8004a08 <_vsnprintf+0x344>
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	2b64      	cmp	r3, #100	@ 0x64
 8004a04:	d000      	beq.n	8004a08 <_vsnprintf+0x344>
 8004a06:	e0af      	b.n	8004b68 <_vsnprintf+0x4a4>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8004a08:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004a0a:	2380      	movs	r3, #128	@ 0x80
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4013      	ands	r3, r2
 8004a10:	d03d      	beq.n	8004a8e <_vsnprintf+0x3ca>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8004a12:	2388      	movs	r3, #136	@ 0x88
 8004a14:	18fb      	adds	r3, r7, r3
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	3307      	adds	r3, #7
 8004a1a:	2207      	movs	r2, #7
 8004a1c:	4393      	bics	r3, r2
 8004a1e:	001a      	movs	r2, r3
 8004a20:	3208      	adds	r2, #8
 8004a22:	2188      	movs	r1, #136	@ 0x88
 8004a24:	1879      	adds	r1, r7, r1
 8004a26:	600a      	str	r2, [r1, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004a30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	da05      	bge.n	8004a44 <_vsnprintf+0x380>
 8004a38:	2000      	movs	r0, #0
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	1a80      	subs	r0, r0, r2
 8004a3e:	4199      	sbcs	r1, r3
 8004a40:	0002      	movs	r2, r0
 8004a42:	000b      	movs	r3, r1
 8004a44:	0010      	movs	r0, r2
 8004a46:	0019      	movs	r1, r3
 8004a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a4a:	0fdb      	lsrs	r3, r3, #31
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a50:	613b      	str	r3, [r7, #16]
 8004a52:	2300      	movs	r3, #0
 8004a54:	617b      	str	r3, [r7, #20]
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	469c      	mov	ip, r3
 8004a5a:	6dfe      	ldr	r6, [r7, #92]	@ 0x5c
 8004a5c:	6a3d      	ldr	r5, [r7, #32]
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a60:	4698      	mov	r8, r3
 8004a62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a64:	9308      	str	r3, [sp, #32]
 8004a66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a68:	9307      	str	r3, [sp, #28]
 8004a6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a6c:	9306      	str	r3, [sp, #24]
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	697c      	ldr	r4, [r7, #20]
 8004a72:	9304      	str	r3, [sp, #16]
 8004a74:	9405      	str	r4, [sp, #20]
 8004a76:	9202      	str	r2, [sp, #8]
 8004a78:	9000      	str	r0, [sp, #0]
 8004a7a:	9101      	str	r1, [sp, #4]
 8004a7c:	4663      	mov	r3, ip
 8004a7e:	0032      	movs	r2, r6
 8004a80:	0029      	movs	r1, r5
 8004a82:	4640      	mov	r0, r8
 8004a84:	f7ff f8b0 	bl	8003be8 <_ntoa_long_long>
 8004a88:	0003      	movs	r3, r0
 8004a8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
          if (flags & FLAGS_LONG_LONG) {
 8004a8c:	e0fa      	b.n	8004c84 <_vsnprintf+0x5c0>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8004a8e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004a90:	2380      	movs	r3, #128	@ 0x80
 8004a92:	005b      	lsls	r3, r3, #1
 8004a94:	4013      	ands	r3, r2
 8004a96:	d025      	beq.n	8004ae4 <_vsnprintf+0x420>
            const long value = va_arg(va, long);
 8004a98:	2388      	movs	r3, #136	@ 0x88
 8004a9a:	18fb      	adds	r3, r7, r3
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	1d1a      	adds	r2, r3, #4
 8004aa0:	2188      	movs	r1, #136	@ 0x88
 8004aa2:	1879      	adds	r1, r7, r1
 8004aa4:	600a      	str	r2, [r1, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	637b      	str	r3, [r7, #52]	@ 0x34
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aac:	17da      	asrs	r2, r3, #31
 8004aae:	189b      	adds	r3, r3, r2
 8004ab0:	4053      	eors	r3, r2
 8004ab2:	001e      	movs	r6, r3
 8004ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ab6:	0fdb      	lsrs	r3, r3, #31
 8004ab8:	b2da      	uxtb	r2, r3
 8004aba:	69fd      	ldr	r5, [r7, #28]
 8004abc:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 8004abe:	6a39      	ldr	r1, [r7, #32]
 8004ac0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ac2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ac4:	9305      	str	r3, [sp, #20]
 8004ac6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ac8:	9304      	str	r3, [sp, #16]
 8004aca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004acc:	9303      	str	r3, [sp, #12]
 8004ace:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ad0:	9302      	str	r3, [sp, #8]
 8004ad2:	9201      	str	r2, [sp, #4]
 8004ad4:	9600      	str	r6, [sp, #0]
 8004ad6:	002b      	movs	r3, r5
 8004ad8:	0022      	movs	r2, r4
 8004ada:	f7ff f81c 	bl	8003b16 <_ntoa_long>
 8004ade:	0003      	movs	r3, r0
 8004ae0:	65fb      	str	r3, [r7, #92]	@ 0x5c
          if (flags & FLAGS_LONG_LONG) {
 8004ae2:	e0cf      	b.n	8004c84 <_vsnprintf+0x5c0>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8004ae4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ae6:	2240      	movs	r2, #64	@ 0x40
 8004ae8:	4013      	ands	r3, r2
 8004aea:	d009      	beq.n	8004b00 <_vsnprintf+0x43c>
 8004aec:	2388      	movs	r3, #136	@ 0x88
 8004aee:	18fb      	adds	r3, r7, r3
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	1d1a      	adds	r2, r3, #4
 8004af4:	2188      	movs	r1, #136	@ 0x88
 8004af6:	1879      	adds	r1, r7, r1
 8004af8:	600a      	str	r2, [r1, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	e015      	b.n	8004b2c <_vsnprintf+0x468>
 8004b00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b02:	2280      	movs	r2, #128	@ 0x80
 8004b04:	4013      	ands	r3, r2
 8004b06:	d009      	beq.n	8004b1c <_vsnprintf+0x458>
 8004b08:	2388      	movs	r3, #136	@ 0x88
 8004b0a:	18fb      	adds	r3, r7, r3
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	1d1a      	adds	r2, r3, #4
 8004b10:	2188      	movs	r1, #136	@ 0x88
 8004b12:	1879      	adds	r1, r7, r1
 8004b14:	600a      	str	r2, [r1, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	b21b      	sxth	r3, r3
 8004b1a:	e007      	b.n	8004b2c <_vsnprintf+0x468>
 8004b1c:	2388      	movs	r3, #136	@ 0x88
 8004b1e:	18fb      	adds	r3, r7, r3
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	1d1a      	adds	r2, r3, #4
 8004b24:	2188      	movs	r1, #136	@ 0x88
 8004b26:	1879      	adds	r1, r7, r1
 8004b28:	600a      	str	r2, [r1, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	63bb      	str	r3, [r7, #56]	@ 0x38
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b30:	17da      	asrs	r2, r3, #31
 8004b32:	189b      	adds	r3, r3, r2
 8004b34:	4053      	eors	r3, r2
 8004b36:	001e      	movs	r6, r3
 8004b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b3a:	0fdb      	lsrs	r3, r3, #31
 8004b3c:	b2da      	uxtb	r2, r3
 8004b3e:	69fd      	ldr	r5, [r7, #28]
 8004b40:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 8004b42:	6a39      	ldr	r1, [r7, #32]
 8004b44:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004b46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b48:	9305      	str	r3, [sp, #20]
 8004b4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b4c:	9304      	str	r3, [sp, #16]
 8004b4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b50:	9303      	str	r3, [sp, #12]
 8004b52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b54:	9302      	str	r3, [sp, #8]
 8004b56:	9201      	str	r2, [sp, #4]
 8004b58:	9600      	str	r6, [sp, #0]
 8004b5a:	002b      	movs	r3, r5
 8004b5c:	0022      	movs	r2, r4
 8004b5e:	f7fe ffda 	bl	8003b16 <_ntoa_long>
 8004b62:	0003      	movs	r3, r0
 8004b64:	65fb      	str	r3, [r7, #92]	@ 0x5c
          if (flags & FLAGS_LONG_LONG) {
 8004b66:	e08d      	b.n	8004c84 <_vsnprintf+0x5c0>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8004b68:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b6a:	2380      	movs	r3, #128	@ 0x80
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4013      	ands	r3, r2
 8004b70:	d02b      	beq.n	8004bca <_vsnprintf+0x506>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8004b72:	2388      	movs	r3, #136	@ 0x88
 8004b74:	18fb      	adds	r3, r7, r3
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	3307      	adds	r3, #7
 8004b7a:	2207      	movs	r2, #7
 8004b7c:	4393      	bics	r3, r2
 8004b7e:	001a      	movs	r2, r3
 8004b80:	3208      	adds	r2, #8
 8004b82:	2188      	movs	r1, #136	@ 0x88
 8004b84:	1879      	adds	r1, r7, r1
 8004b86:	600a      	str	r2, [r1, #0]
 8004b88:	6818      	ldr	r0, [r3, #0]
 8004b8a:	6859      	ldr	r1, [r3, #4]
 8004b8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b8e:	60bb      	str	r3, [r7, #8]
 8004b90:	2300      	movs	r3, #0
 8004b92:	60fb      	str	r3, [r7, #12]
 8004b94:	69fe      	ldr	r6, [r7, #28]
 8004b96:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004b98:	6a3d      	ldr	r5, [r7, #32]
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9c:	469c      	mov	ip, r3
 8004b9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ba0:	9308      	str	r3, [sp, #32]
 8004ba2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ba4:	9307      	str	r3, [sp, #28]
 8004ba6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ba8:	9306      	str	r3, [sp, #24]
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	68fc      	ldr	r4, [r7, #12]
 8004bae:	9304      	str	r3, [sp, #16]
 8004bb0:	9405      	str	r4, [sp, #20]
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	9302      	str	r3, [sp, #8]
 8004bb6:	9000      	str	r0, [sp, #0]
 8004bb8:	9101      	str	r1, [sp, #4]
 8004bba:	0033      	movs	r3, r6
 8004bbc:	0029      	movs	r1, r5
 8004bbe:	4660      	mov	r0, ip
 8004bc0:	f7ff f812 	bl	8003be8 <_ntoa_long_long>
 8004bc4:	0003      	movs	r3, r0
 8004bc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bc8:	e05c      	b.n	8004c84 <_vsnprintf+0x5c0>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8004bca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004bcc:	2380      	movs	r3, #128	@ 0x80
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	d01d      	beq.n	8004c10 <_vsnprintf+0x54c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8004bd4:	2388      	movs	r3, #136	@ 0x88
 8004bd6:	18fb      	adds	r3, r7, r3
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	1d1a      	adds	r2, r3, #4
 8004bdc:	2188      	movs	r1, #136	@ 0x88
 8004bde:	1879      	adds	r1, r7, r1
 8004be0:	600a      	str	r2, [r1, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	69fd      	ldr	r5, [r7, #28]
 8004be6:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 8004be8:	6a39      	ldr	r1, [r7, #32]
 8004bea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004bec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004bee:	9205      	str	r2, [sp, #20]
 8004bf0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004bf2:	9204      	str	r2, [sp, #16]
 8004bf4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004bf6:	9203      	str	r2, [sp, #12]
 8004bf8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004bfa:	9202      	str	r2, [sp, #8]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	9201      	str	r2, [sp, #4]
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	002b      	movs	r3, r5
 8004c04:	0022      	movs	r2, r4
 8004c06:	f7fe ff86 	bl	8003b16 <_ntoa_long>
 8004c0a:	0003      	movs	r3, r0
 8004c0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c0e:	e039      	b.n	8004c84 <_vsnprintf+0x5c0>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8004c10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c12:	2240      	movs	r2, #64	@ 0x40
 8004c14:	4013      	ands	r3, r2
 8004c16:	d009      	beq.n	8004c2c <_vsnprintf+0x568>
 8004c18:	2388      	movs	r3, #136	@ 0x88
 8004c1a:	18fb      	adds	r3, r7, r3
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	1d1a      	adds	r2, r3, #4
 8004c20:	2188      	movs	r1, #136	@ 0x88
 8004c22:	1879      	adds	r1, r7, r1
 8004c24:	600a      	str	r2, [r1, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	e015      	b.n	8004c58 <_vsnprintf+0x594>
 8004c2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c2e:	2280      	movs	r2, #128	@ 0x80
 8004c30:	4013      	ands	r3, r2
 8004c32:	d009      	beq.n	8004c48 <_vsnprintf+0x584>
 8004c34:	2388      	movs	r3, #136	@ 0x88
 8004c36:	18fb      	adds	r3, r7, r3
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	1d1a      	adds	r2, r3, #4
 8004c3c:	2188      	movs	r1, #136	@ 0x88
 8004c3e:	1879      	adds	r1, r7, r1
 8004c40:	600a      	str	r2, [r1, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	e007      	b.n	8004c58 <_vsnprintf+0x594>
 8004c48:	2388      	movs	r3, #136	@ 0x88
 8004c4a:	18fb      	adds	r3, r7, r3
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	1d1a      	adds	r2, r3, #4
 8004c50:	2188      	movs	r1, #136	@ 0x88
 8004c52:	1879      	adds	r1, r7, r1
 8004c54:	600a      	str	r2, [r1, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8004c5a:	69fc      	ldr	r4, [r7, #28]
 8004c5c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004c5e:	6a39      	ldr	r1, [r7, #32]
 8004c60:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c64:	9305      	str	r3, [sp, #20]
 8004c66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c68:	9304      	str	r3, [sp, #16]
 8004c6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c6c:	9303      	str	r3, [sp, #12]
 8004c6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c70:	9302      	str	r3, [sp, #8]
 8004c72:	2300      	movs	r3, #0
 8004c74:	9301      	str	r3, [sp, #4]
 8004c76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	0023      	movs	r3, r4
 8004c7c:	f7fe ff4b 	bl	8003b16 <_ntoa_long>
 8004c80:	0003      	movs	r3, r0
 8004c82:	65fb      	str	r3, [r7, #92]	@ 0x5c
          }
        }
        format++;
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	3301      	adds	r3, #1
 8004c88:	61bb      	str	r3, [r7, #24]
        break;
 8004c8a:	e17c      	b.n	8004f86 <_vsnprintf+0x8c2>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	2b46      	cmp	r3, #70	@ 0x46
 8004c92:	d103      	bne.n	8004c9c <_vsnprintf+0x5d8>
 8004c94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c96:	2220      	movs	r2, #32
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8004c9c:	2388      	movs	r3, #136	@ 0x88
 8004c9e:	18fb      	adds	r3, r7, r3
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	3307      	adds	r3, #7
 8004ca4:	2207      	movs	r2, #7
 8004ca6:	4393      	bics	r3, r2
 8004ca8:	001a      	movs	r2, r3
 8004caa:	3208      	adds	r2, #8
 8004cac:	2188      	movs	r1, #136	@ 0x88
 8004cae:	1879      	adds	r1, r7, r1
 8004cb0:	600a      	str	r2, [r1, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	69fe      	ldr	r6, [r7, #28]
 8004cb8:	6dfd      	ldr	r5, [r7, #92]	@ 0x5c
 8004cba:	6a3c      	ldr	r4, [r7, #32]
 8004cbc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004cbe:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004cc0:	9104      	str	r1, [sp, #16]
 8004cc2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004cc4:	9103      	str	r1, [sp, #12]
 8004cc6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8004cc8:	9102      	str	r1, [sp, #8]
 8004cca:	9200      	str	r2, [sp, #0]
 8004ccc:	9301      	str	r3, [sp, #4]
 8004cce:	0033      	movs	r3, r6
 8004cd0:	002a      	movs	r2, r5
 8004cd2:	0021      	movs	r1, r4
 8004cd4:	f7fe fffc 	bl	8003cd0 <_ftoa>
 8004cd8:	0003      	movs	r3, r0
 8004cda:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	61bb      	str	r3, [r7, #24]
        break;
 8004ce2:	e150      	b.n	8004f86 <_vsnprintf+0x8c2>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	2b67      	cmp	r3, #103	@ 0x67
 8004cea:	d003      	beq.n	8004cf4 <_vsnprintf+0x630>
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2b47      	cmp	r3, #71	@ 0x47
 8004cf2:	d104      	bne.n	8004cfe <_vsnprintf+0x63a>
 8004cf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cf6:	2280      	movs	r2, #128	@ 0x80
 8004cf8:	0112      	lsls	r2, r2, #4
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	66fb      	str	r3, [r7, #108]	@ 0x6c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	2b45      	cmp	r3, #69	@ 0x45
 8004d04:	d003      	beq.n	8004d0e <_vsnprintf+0x64a>
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	2b47      	cmp	r3, #71	@ 0x47
 8004d0c:	d103      	bne.n	8004d16 <_vsnprintf+0x652>
 8004d0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d10:	2220      	movs	r2, #32
 8004d12:	4313      	orrs	r3, r2
 8004d14:	66fb      	str	r3, [r7, #108]	@ 0x6c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8004d16:	2388      	movs	r3, #136	@ 0x88
 8004d18:	18fb      	adds	r3, r7, r3
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3307      	adds	r3, #7
 8004d1e:	2207      	movs	r2, #7
 8004d20:	4393      	bics	r3, r2
 8004d22:	001a      	movs	r2, r3
 8004d24:	3208      	adds	r2, #8
 8004d26:	2188      	movs	r1, #136	@ 0x88
 8004d28:	1879      	adds	r1, r7, r1
 8004d2a:	600a      	str	r2, [r1, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	69fe      	ldr	r6, [r7, #28]
 8004d32:	6dfd      	ldr	r5, [r7, #92]	@ 0x5c
 8004d34:	6a3c      	ldr	r4, [r7, #32]
 8004d36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d38:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004d3a:	9104      	str	r1, [sp, #16]
 8004d3c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004d3e:	9103      	str	r1, [sp, #12]
 8004d40:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8004d42:	9102      	str	r1, [sp, #8]
 8004d44:	9200      	str	r2, [sp, #0]
 8004d46:	9301      	str	r3, [sp, #4]
 8004d48:	0033      	movs	r3, r6
 8004d4a:	002a      	movs	r2, r5
 8004d4c:	0021      	movs	r1, r4
 8004d4e:	f7ff f9fd 	bl	800414c <_etoa>
 8004d52:	0003      	movs	r3, r0
 8004d54:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	61bb      	str	r3, [r7, #24]
        break;
 8004d5c:	e113      	b.n	8004f86 <_vsnprintf+0x8c2>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	657b      	str	r3, [r7, #84]	@ 0x54
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8004d62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d64:	2202      	movs	r2, #2
 8004d66:	4013      	ands	r3, r2
 8004d68:	d10e      	bne.n	8004d88 <_vsnprintf+0x6c4>
          while (l++ < width) {
 8004d6a:	e007      	b.n	8004d7c <_vsnprintf+0x6b8>
            out(' ', buffer, idx++, maxlen);
 8004d6c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004d6e:	1c53      	adds	r3, r2, #1
 8004d70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	6a39      	ldr	r1, [r7, #32]
 8004d76:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8004d78:	2020      	movs	r0, #32
 8004d7a:	47a0      	blx	r4
          while (l++ < width) {
 8004d7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	657a      	str	r2, [r7, #84]	@ 0x54
 8004d82:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d8f1      	bhi.n	8004d6c <_vsnprintf+0x6a8>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8004d88:	2388      	movs	r3, #136	@ 0x88
 8004d8a:	18fb      	adds	r3, r7, r3
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	1d1a      	adds	r2, r3, #4
 8004d90:	2188      	movs	r1, #136	@ 0x88
 8004d92:	1879      	adds	r1, r7, r1
 8004d94:	600a      	str	r2, [r1, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	b2d8      	uxtb	r0, r3
 8004d9a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004d9c:	1c53      	adds	r3, r2, #1
 8004d9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	6a39      	ldr	r1, [r7, #32]
 8004da4:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8004da6:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8004da8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004daa:	2202      	movs	r2, #2
 8004dac:	4013      	ands	r3, r2
 8004dae:	d00e      	beq.n	8004dce <_vsnprintf+0x70a>
          while (l++ < width) {
 8004db0:	e007      	b.n	8004dc2 <_vsnprintf+0x6fe>
            out(' ', buffer, idx++, maxlen);
 8004db2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004db4:	1c53      	adds	r3, r2, #1
 8004db6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	6a39      	ldr	r1, [r7, #32]
 8004dbc:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8004dbe:	2020      	movs	r0, #32
 8004dc0:	47a0      	blx	r4
          while (l++ < width) {
 8004dc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dc4:	1c5a      	adds	r2, r3, #1
 8004dc6:	657a      	str	r2, [r7, #84]	@ 0x54
 8004dc8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d8f1      	bhi.n	8004db2 <_vsnprintf+0x6ee>
          }
        }
        format++;
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	61bb      	str	r3, [r7, #24]
        break;
 8004dd4:	e0d7      	b.n	8004f86 <_vsnprintf+0x8c2>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8004dd6:	2388      	movs	r3, #136	@ 0x88
 8004dd8:	18fb      	adds	r3, r7, r3
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	1d1a      	adds	r2, r3, #4
 8004dde:	2188      	movs	r1, #136	@ 0x88
 8004de0:	1879      	adds	r1, r7, r1
 8004de2:	600a      	str	r2, [r1, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	653b      	str	r3, [r7, #80]	@ 0x50
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8004de8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <_vsnprintf+0x72e>
 8004dee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004df0:	e001      	b.n	8004df6 <_vsnprintf+0x732>
 8004df2:	2301      	movs	r3, #1
 8004df4:	425b      	negs	r3, r3
 8004df6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004df8:	0019      	movs	r1, r3
 8004dfa:	0010      	movs	r0, r2
 8004dfc:	f7fe fd11 	bl	8003822 <_strnlen_s>
 8004e00:	0003      	movs	r3, r0
 8004e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8004e04:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004e06:	2380      	movs	r3, #128	@ 0x80
 8004e08:	00db      	lsls	r3, r3, #3
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	d005      	beq.n	8004e1a <_vsnprintf+0x756>
          l = (l < precision ? l : precision);
 8004e0e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d900      	bls.n	8004e18 <_vsnprintf+0x754>
 8004e16:	0013      	movs	r3, r2
 8004e18:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }
        if (!(flags & FLAGS_LEFT)) {
 8004e1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	4013      	ands	r3, r2
 8004e20:	d11a      	bne.n	8004e58 <_vsnprintf+0x794>
          while (l++ < width) {
 8004e22:	e007      	b.n	8004e34 <_vsnprintf+0x770>
            out(' ', buffer, idx++, maxlen);
 8004e24:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004e26:	1c53      	adds	r3, r2, #1
 8004e28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	6a39      	ldr	r1, [r7, #32]
 8004e2e:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8004e30:	2020      	movs	r0, #32
 8004e32:	47a0      	blx	r4
          while (l++ < width) {
 8004e34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e36:	1c5a      	adds	r2, r3, #1
 8004e38:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004e3a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d8f1      	bhi.n	8004e24 <_vsnprintf+0x760>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8004e40:	e00a      	b.n	8004e58 <_vsnprintf+0x794>
          out(*(p++), buffer, idx++, maxlen);
 8004e42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e44:	1c5a      	adds	r2, r3, #1
 8004e46:	653a      	str	r2, [r7, #80]	@ 0x50
 8004e48:	7818      	ldrb	r0, [r3, #0]
 8004e4a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004e4c:	1c53      	adds	r3, r2, #1
 8004e4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	6a39      	ldr	r1, [r7, #32]
 8004e54:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8004e56:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8004e58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d009      	beq.n	8004e74 <_vsnprintf+0x7b0>
 8004e60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004e62:	2380      	movs	r3, #128	@ 0x80
 8004e64:	00db      	lsls	r3, r3, #3
 8004e66:	4013      	ands	r3, r2
 8004e68:	d0eb      	beq.n	8004e42 <_vsnprintf+0x77e>
 8004e6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e6c:	1e5a      	subs	r2, r3, #1
 8004e6e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1e6      	bne.n	8004e42 <_vsnprintf+0x77e>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8004e74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e76:	2202      	movs	r2, #2
 8004e78:	4013      	ands	r3, r2
 8004e7a:	d00e      	beq.n	8004e9a <_vsnprintf+0x7d6>
          while (l++ < width) {
 8004e7c:	e007      	b.n	8004e8e <_vsnprintf+0x7ca>
            out(' ', buffer, idx++, maxlen);
 8004e7e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004e80:	1c53      	adds	r3, r2, #1
 8004e82:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	6a39      	ldr	r1, [r7, #32]
 8004e88:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8004e8a:	2020      	movs	r0, #32
 8004e8c:	47a0      	blx	r4
          while (l++ < width) {
 8004e8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e90:	1c5a      	adds	r2, r3, #1
 8004e92:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004e94:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d8f1      	bhi.n	8004e7e <_vsnprintf+0x7ba>
          }
        }
        format++;
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	61bb      	str	r3, [r7, #24]
        break;
 8004ea0:	e071      	b.n	8004f86 <_vsnprintf+0x8c2>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8004ea2:	2308      	movs	r3, #8
 8004ea4:	66bb      	str	r3, [r7, #104]	@ 0x68
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8004ea6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ea8:	2221      	movs	r2, #33	@ 0x21
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8004eae:	212b      	movs	r1, #43	@ 0x2b
 8004eb0:	2318      	movs	r3, #24
 8004eb2:	18cb      	adds	r3, r1, r3
 8004eb4:	19db      	adds	r3, r3, r7
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	701a      	strb	r2, [r3, #0]
        if (is_ll) {
 8004eba:	2318      	movs	r3, #24
 8004ebc:	18cb      	adds	r3, r1, r3
 8004ebe:	19db      	adds	r3, r3, r7
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d025      	beq.n	8004f12 <_vsnprintf+0x84e>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8004ec6:	2388      	movs	r3, #136	@ 0x88
 8004ec8:	18fb      	adds	r3, r7, r3
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	1d1a      	adds	r2, r3, #4
 8004ece:	2188      	movs	r1, #136	@ 0x88
 8004ed0:	1879      	adds	r1, r7, r1
 8004ed2:	600a      	str	r2, [r1, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	603b      	str	r3, [r7, #0]
 8004ed8:	2300      	movs	r3, #0
 8004eda:	607b      	str	r3, [r7, #4]
 8004edc:	69fd      	ldr	r5, [r7, #28]
 8004ede:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 8004ee0:	6a39      	ldr	r1, [r7, #32]
 8004ee2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ee4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ee6:	9308      	str	r3, [sp, #32]
 8004ee8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004eea:	9307      	str	r3, [sp, #28]
 8004eec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004eee:	9306      	str	r3, [sp, #24]
 8004ef0:	2210      	movs	r2, #16
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	9204      	str	r2, [sp, #16]
 8004ef6:	9305      	str	r3, [sp, #20]
 8004ef8:	2300      	movs	r3, #0
 8004efa:	9302      	str	r3, [sp, #8]
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	9200      	str	r2, [sp, #0]
 8004f02:	9301      	str	r3, [sp, #4]
 8004f04:	002b      	movs	r3, r5
 8004f06:	0022      	movs	r2, r4
 8004f08:	f7fe fe6e 	bl	8003be8 <_ntoa_long_long>
 8004f0c:	0003      	movs	r3, r0
 8004f0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f10:	e01c      	b.n	8004f4c <_vsnprintf+0x888>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8004f12:	2388      	movs	r3, #136	@ 0x88
 8004f14:	18fb      	adds	r3, r7, r3
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	1d1a      	adds	r2, r3, #4
 8004f1a:	2188      	movs	r1, #136	@ 0x88
 8004f1c:	1879      	adds	r1, r7, r1
 8004f1e:	600a      	str	r2, [r1, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	001d      	movs	r5, r3
 8004f24:	69fc      	ldr	r4, [r7, #28]
 8004f26:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004f28:	6a39      	ldr	r1, [r7, #32]
 8004f2a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f2e:	9305      	str	r3, [sp, #20]
 8004f30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f32:	9304      	str	r3, [sp, #16]
 8004f34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f36:	9303      	str	r3, [sp, #12]
 8004f38:	2310      	movs	r3, #16
 8004f3a:	9302      	str	r3, [sp, #8]
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	9301      	str	r3, [sp, #4]
 8004f40:	9500      	str	r5, [sp, #0]
 8004f42:	0023      	movs	r3, r4
 8004f44:	f7fe fde7 	bl	8003b16 <_ntoa_long>
 8004f48:	0003      	movs	r3, r0
 8004f4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	61bb      	str	r3, [r7, #24]
        break;
 8004f52:	e018      	b.n	8004f86 <_vsnprintf+0x8c2>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8004f54:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004f56:	1c53      	adds	r3, r2, #1
 8004f58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	6a39      	ldr	r1, [r7, #32]
 8004f5e:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8004f60:	2025      	movs	r0, #37	@ 0x25
 8004f62:	47a0      	blx	r4
        format++;
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	3301      	adds	r3, #1
 8004f68:	61bb      	str	r3, [r7, #24]
        break;
 8004f6a:	e00c      	b.n	8004f86 <_vsnprintf+0x8c2>

      default :
        out(*format, buffer, idx++, maxlen);
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	7818      	ldrb	r0, [r3, #0]
 8004f70:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004f72:	1c53      	adds	r3, r2, #1
 8004f74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	6a39      	ldr	r1, [r7, #32]
 8004f7a:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8004f7c:	47a0      	blx	r4
        format++;
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	3301      	adds	r3, #1
 8004f82:	61bb      	str	r3, [r7, #24]
        break;
 8004f84:	46c0      	nop			@ (mov r8, r8)
  while (*format)
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <_vsnprintf+0x8ce>
 8004f8e:	f7ff fbad 	bl	80046ec <_vsnprintf+0x28>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8004f92:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d302      	bcc.n	8004fa0 <_vsnprintf+0x8dc>
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	1e5a      	subs	r2, r3, #1
 8004f9e:	e000      	b.n	8004fa2 <_vsnprintf+0x8de>
 8004fa0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	6a39      	ldr	r1, [r7, #32]
 8004fa6:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8004fa8:	2000      	movs	r0, #0
 8004faa:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8004fac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8004fae:	0018      	movs	r0, r3
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	b01c      	add	sp, #112	@ 0x70
 8004fb4:	bc80      	pop	{r7}
 8004fb6:	46b8      	mov	r8, r7
 8004fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fba:	46c0      	nop			@ (mov r8, r8)

08004fbc <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8004fbc:	b40f      	push	{r0, r1, r2, r3}
 8004fbe:	b590      	push	{r4, r7, lr}
 8004fc0:	b087      	sub	sp, #28
 8004fc2:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8004fc4:	2324      	movs	r3, #36	@ 0x24
 8004fc6:	18fb      	adds	r3, r7, r3
 8004fc8:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8004fca:	6a3c      	ldr	r4, [r7, #32]
 8004fcc:	2301      	movs	r3, #1
 8004fce:	425a      	negs	r2, r3
 8004fd0:	1d39      	adds	r1, r7, #4
 8004fd2:	4808      	ldr	r0, [pc, #32]	@ (8004ff4 <printf_+0x38>)
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	9300      	str	r3, [sp, #0]
 8004fd8:	0023      	movs	r3, r4
 8004fda:	f7ff fb73 	bl	80046c4 <_vsnprintf>
 8004fde:	0003      	movs	r3, r0
 8004fe0:	60fb      	str	r3, [r7, #12]
  va_end(va);
  return ret;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
}
 8004fe4:	0018      	movs	r0, r3
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	b005      	add	sp, #20
 8004fea:	bc90      	pop	{r4, r7}
 8004fec:	bc08      	pop	{r3}
 8004fee:	b004      	add	sp, #16
 8004ff0:	4718      	bx	r3
 8004ff2:	46c0      	nop			@ (mov r8, r8)
 8004ff4:	080037f3 	.word	0x080037f3

08004ff8 <_putchar>:
  va_end(va);
  return ret;
}


void _putchar(char character) {
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	0002      	movs	r2, r0
 8005000:	1dfb      	adds	r3, r7, #7
 8005002:	701a      	strb	r2, [r3, #0]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	while( !( USART2->ISR & USART_ISR_TXE_TXFNF ) ) {};
 8005004:	46c0      	nop			@ (mov r8, r8)
 8005006:	4b06      	ldr	r3, [pc, #24]	@ (8005020 <_putchar+0x28>)
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	2280      	movs	r2, #128	@ 0x80
 800500c:	4013      	ands	r3, r2
 800500e:	d0fa      	beq.n	8005006 <_putchar+0xe>
      USART2->TDR = character;
 8005010:	4b03      	ldr	r3, [pc, #12]	@ (8005020 <_putchar+0x28>)
 8005012:	1dfa      	adds	r2, r7, #7
 8005014:	7812      	ldrb	r2, [r2, #0]
 8005016:	629a      	str	r2, [r3, #40]	@ 0x28
		
}
 8005018:	46c0      	nop			@ (mov r8, r8)
 800501a:	46bd      	mov	sp, r7
 800501c:	b002      	add	sp, #8
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40004400 	.word	0x40004400

08005024 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8005028:	4b19      	ldr	r3, [pc, #100]	@ (8005090 <MX_RTC_Init+0x6c>)
 800502a:	4a1a      	ldr	r2, [pc, #104]	@ (8005094 <MX_RTC_Init+0x70>)
 800502c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800502e:	4b18      	ldr	r3, [pc, #96]	@ (8005090 <MX_RTC_Init+0x6c>)
 8005030:	2200      	movs	r2, #0
 8005032:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8005034:	4b16      	ldr	r3, [pc, #88]	@ (8005090 <MX_RTC_Init+0x6c>)
 8005036:	227f      	movs	r2, #127	@ 0x7f
 8005038:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800503a:	4b15      	ldr	r3, [pc, #84]	@ (8005090 <MX_RTC_Init+0x6c>)
 800503c:	22ff      	movs	r2, #255	@ 0xff
 800503e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005040:	4b13      	ldr	r3, [pc, #76]	@ (8005090 <MX_RTC_Init+0x6c>)
 8005042:	2200      	movs	r2, #0
 8005044:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8005046:	4b12      	ldr	r3, [pc, #72]	@ (8005090 <MX_RTC_Init+0x6c>)
 8005048:	2200      	movs	r2, #0
 800504a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800504c:	4b10      	ldr	r3, [pc, #64]	@ (8005090 <MX_RTC_Init+0x6c>)
 800504e:	2200      	movs	r2, #0
 8005050:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005052:	4b0f      	ldr	r3, [pc, #60]	@ (8005090 <MX_RTC_Init+0x6c>)
 8005054:	2280      	movs	r2, #128	@ 0x80
 8005056:	05d2      	lsls	r2, r2, #23
 8005058:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800505a:	4b0d      	ldr	r3, [pc, #52]	@ (8005090 <MX_RTC_Init+0x6c>)
 800505c:	2200      	movs	r2, #0
 800505e:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8005060:	4b0b      	ldr	r3, [pc, #44]	@ (8005090 <MX_RTC_Init+0x6c>)
 8005062:	2200      	movs	r2, #0
 8005064:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005066:	4b0a      	ldr	r3, [pc, #40]	@ (8005090 <MX_RTC_Init+0x6c>)
 8005068:	0018      	movs	r0, r3
 800506a:	f003 f9e9 	bl	8008440 <HAL_RTC_Init>
 800506e:	1e03      	subs	r3, r0, #0
 8005070:	d001      	beq.n	8005076 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8005072:	f7fe fbaa 	bl	80037ca <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 60, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8005076:	4b06      	ldr	r3, [pc, #24]	@ (8005090 <MX_RTC_Init+0x6c>)
 8005078:	2204      	movs	r2, #4
 800507a:	213c      	movs	r1, #60	@ 0x3c
 800507c:	0018      	movs	r0, r3
 800507e:	f003 fad7 	bl	8008630 <HAL_RTCEx_SetWakeUpTimer>
 8005082:	1e03      	subs	r3, r0, #0
 8005084:	d001      	beq.n	800508a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8005086:	f7fe fba0 	bl	80037ca <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800508a:	46c0      	nop			@ (mov r8, r8)
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	200002b4 	.word	0x200002b4
 8005094:	40002800 	.word	0x40002800

08005098 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8005098:	b590      	push	{r4, r7, lr}
 800509a:	b095      	sub	sp, #84	@ 0x54
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80050a0:	240c      	movs	r4, #12
 80050a2:	193b      	adds	r3, r7, r4
 80050a4:	0018      	movs	r0, r3
 80050a6:	2344      	movs	r3, #68	@ 0x44
 80050a8:	001a      	movs	r2, r3
 80050aa:	2100      	movs	r1, #0
 80050ac:	f004 fed8 	bl	8009e60 <memset>
  if(rtcHandle->Instance==RTC)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a16      	ldr	r2, [pc, #88]	@ (8005110 <HAL_RTC_MspInit+0x78>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d126      	bne.n	8005108 <HAL_RTC_MspInit+0x70>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80050ba:	193b      	adds	r3, r7, r4
 80050bc:	2280      	movs	r2, #128	@ 0x80
 80050be:	0212      	lsls	r2, r2, #8
 80050c0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80050c2:	193b      	adds	r3, r7, r4
 80050c4:	2280      	movs	r2, #128	@ 0x80
 80050c6:	0092      	lsls	r2, r2, #2
 80050c8:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80050ca:	193b      	adds	r3, r7, r4
 80050cc:	0018      	movs	r0, r3
 80050ce:	f002 f987 	bl	80073e0 <HAL_RCCEx_PeriphCLKConfig>
 80050d2:	1e03      	subs	r3, r0, #0
 80050d4:	d001      	beq.n	80050da <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80050d6:	f7fe fb78 	bl	80037ca <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80050da:	4a0e      	ldr	r2, [pc, #56]	@ (8005114 <HAL_RTC_MspInit+0x7c>)
 80050dc:	2390      	movs	r3, #144	@ 0x90
 80050de:	58d3      	ldr	r3, [r2, r3]
 80050e0:	490c      	ldr	r1, [pc, #48]	@ (8005114 <HAL_RTC_MspInit+0x7c>)
 80050e2:	2280      	movs	r2, #128	@ 0x80
 80050e4:	0212      	lsls	r2, r2, #8
 80050e6:	4313      	orrs	r3, r2
 80050e8:	2290      	movs	r2, #144	@ 0x90
 80050ea:	508b      	str	r3, [r1, r2]
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80050ec:	4b09      	ldr	r3, [pc, #36]	@ (8005114 <HAL_RTC_MspInit+0x7c>)
 80050ee:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80050f0:	4b08      	ldr	r3, [pc, #32]	@ (8005114 <HAL_RTC_MspInit+0x7c>)
 80050f2:	2180      	movs	r1, #128	@ 0x80
 80050f4:	00c9      	lsls	r1, r1, #3
 80050f6:	430a      	orrs	r2, r1
 80050f8:	659a      	str	r2, [r3, #88]	@ 0x58
 80050fa:	4b06      	ldr	r3, [pc, #24]	@ (8005114 <HAL_RTC_MspInit+0x7c>)
 80050fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80050fe:	2380      	movs	r3, #128	@ 0x80
 8005100:	00db      	lsls	r3, r3, #3
 8005102:	4013      	ands	r3, r2
 8005104:	60bb      	str	r3, [r7, #8]
 8005106:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8005108:	46c0      	nop			@ (mov r8, r8)
 800510a:	46bd      	mov	sp, r7
 800510c:	b015      	add	sp, #84	@ 0x54
 800510e:	bd90      	pop	{r4, r7, pc}
 8005110:	40002800 	.word	0x40002800
 8005114:	40021000 	.word	0x40021000

08005118 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800511c:	4b1b      	ldr	r3, [pc, #108]	@ (800518c <MX_SPI1_Init+0x74>)
 800511e:	4a1c      	ldr	r2, [pc, #112]	@ (8005190 <MX_SPI1_Init+0x78>)
 8005120:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005122:	4b1a      	ldr	r3, [pc, #104]	@ (800518c <MX_SPI1_Init+0x74>)
 8005124:	2282      	movs	r2, #130	@ 0x82
 8005126:	0052      	lsls	r2, r2, #1
 8005128:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800512a:	4b18      	ldr	r3, [pc, #96]	@ (800518c <MX_SPI1_Init+0x74>)
 800512c:	2200      	movs	r2, #0
 800512e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005130:	4b16      	ldr	r3, [pc, #88]	@ (800518c <MX_SPI1_Init+0x74>)
 8005132:	22e0      	movs	r2, #224	@ 0xe0
 8005134:	00d2      	lsls	r2, r2, #3
 8005136:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005138:	4b14      	ldr	r3, [pc, #80]	@ (800518c <MX_SPI1_Init+0x74>)
 800513a:	2200      	movs	r2, #0
 800513c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800513e:	4b13      	ldr	r3, [pc, #76]	@ (800518c <MX_SPI1_Init+0x74>)
 8005140:	2200      	movs	r2, #0
 8005142:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005144:	4b11      	ldr	r3, [pc, #68]	@ (800518c <MX_SPI1_Init+0x74>)
 8005146:	2280      	movs	r2, #128	@ 0x80
 8005148:	0092      	lsls	r2, r2, #2
 800514a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800514c:	4b0f      	ldr	r3, [pc, #60]	@ (800518c <MX_SPI1_Init+0x74>)
 800514e:	2210      	movs	r2, #16
 8005150:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005152:	4b0e      	ldr	r3, [pc, #56]	@ (800518c <MX_SPI1_Init+0x74>)
 8005154:	2200      	movs	r2, #0
 8005156:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005158:	4b0c      	ldr	r3, [pc, #48]	@ (800518c <MX_SPI1_Init+0x74>)
 800515a:	2200      	movs	r2, #0
 800515c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800515e:	4b0b      	ldr	r3, [pc, #44]	@ (800518c <MX_SPI1_Init+0x74>)
 8005160:	2200      	movs	r2, #0
 8005162:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005164:	4b09      	ldr	r3, [pc, #36]	@ (800518c <MX_SPI1_Init+0x74>)
 8005166:	2207      	movs	r2, #7
 8005168:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800516a:	4b08      	ldr	r3, [pc, #32]	@ (800518c <MX_SPI1_Init+0x74>)
 800516c:	2200      	movs	r2, #0
 800516e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005170:	4b06      	ldr	r3, [pc, #24]	@ (800518c <MX_SPI1_Init+0x74>)
 8005172:	2208      	movs	r2, #8
 8005174:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005176:	4b05      	ldr	r3, [pc, #20]	@ (800518c <MX_SPI1_Init+0x74>)
 8005178:	0018      	movs	r0, r3
 800517a:	f003 fadb 	bl	8008734 <HAL_SPI_Init>
 800517e:	1e03      	subs	r3, r0, #0
 8005180:	d001      	beq.n	8005186 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8005182:	f7fe fb22 	bl	80037ca <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005186:	46c0      	nop			@ (mov r8, r8)
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	200002e4 	.word	0x200002e4
 8005190:	40013000 	.word	0x40013000

08005194 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005194:	b590      	push	{r4, r7, lr}
 8005196:	b08b      	sub	sp, #44	@ 0x2c
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800519c:	2414      	movs	r4, #20
 800519e:	193b      	adds	r3, r7, r4
 80051a0:	0018      	movs	r0, r3
 80051a2:	2314      	movs	r3, #20
 80051a4:	001a      	movs	r2, r3
 80051a6:	2100      	movs	r1, #0
 80051a8:	f004 fe5a 	bl	8009e60 <memset>
  if(spiHandle->Instance==SPI1)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a1b      	ldr	r2, [pc, #108]	@ (8005220 <HAL_SPI_MspInit+0x8c>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d130      	bne.n	8005218 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80051b6:	4b1b      	ldr	r3, [pc, #108]	@ (8005224 <HAL_SPI_MspInit+0x90>)
 80051b8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80051ba:	4b1a      	ldr	r3, [pc, #104]	@ (8005224 <HAL_SPI_MspInit+0x90>)
 80051bc:	2180      	movs	r1, #128	@ 0x80
 80051be:	0149      	lsls	r1, r1, #5
 80051c0:	430a      	orrs	r2, r1
 80051c2:	661a      	str	r2, [r3, #96]	@ 0x60
 80051c4:	4b17      	ldr	r3, [pc, #92]	@ (8005224 <HAL_SPI_MspInit+0x90>)
 80051c6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80051c8:	2380      	movs	r3, #128	@ 0x80
 80051ca:	015b      	lsls	r3, r3, #5
 80051cc:	4013      	ands	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]
 80051d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051d2:	4b14      	ldr	r3, [pc, #80]	@ (8005224 <HAL_SPI_MspInit+0x90>)
 80051d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80051d6:	4b13      	ldr	r3, [pc, #76]	@ (8005224 <HAL_SPI_MspInit+0x90>)
 80051d8:	2101      	movs	r1, #1
 80051da:	430a      	orrs	r2, r1
 80051dc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80051de:	4b11      	ldr	r3, [pc, #68]	@ (8005224 <HAL_SPI_MspInit+0x90>)
 80051e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051e2:	2201      	movs	r2, #1
 80051e4:	4013      	ands	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]
 80051e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80051ea:	0021      	movs	r1, r4
 80051ec:	187b      	adds	r3, r7, r1
 80051ee:	22e0      	movs	r2, #224	@ 0xe0
 80051f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051f2:	187b      	adds	r3, r7, r1
 80051f4:	2202      	movs	r2, #2
 80051f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051f8:	187b      	adds	r3, r7, r1
 80051fa:	2200      	movs	r2, #0
 80051fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051fe:	187b      	adds	r3, r7, r1
 8005200:	2200      	movs	r2, #0
 8005202:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005204:	187b      	adds	r3, r7, r1
 8005206:	2205      	movs	r2, #5
 8005208:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800520a:	187a      	adds	r2, r7, r1
 800520c:	23a0      	movs	r3, #160	@ 0xa0
 800520e:	05db      	lsls	r3, r3, #23
 8005210:	0011      	movs	r1, r2
 8005212:	0018      	movs	r0, r3
 8005214:	f000 ff68 	bl	80060e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005218:	46c0      	nop			@ (mov r8, r8)
 800521a:	46bd      	mov	sp, r7
 800521c:	b00b      	add	sp, #44	@ 0x2c
 800521e:	bd90      	pop	{r4, r7, pc}
 8005220:	40013000 	.word	0x40013000
 8005224:	40021000 	.word	0x40021000

08005228 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800522e:	4b0f      	ldr	r3, [pc, #60]	@ (800526c <HAL_MspInit+0x44>)
 8005230:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005232:	4b0e      	ldr	r3, [pc, #56]	@ (800526c <HAL_MspInit+0x44>)
 8005234:	2180      	movs	r1, #128	@ 0x80
 8005236:	0549      	lsls	r1, r1, #21
 8005238:	430a      	orrs	r2, r1
 800523a:	659a      	str	r2, [r3, #88]	@ 0x58
 800523c:	4b0b      	ldr	r3, [pc, #44]	@ (800526c <HAL_MspInit+0x44>)
 800523e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005240:	2380      	movs	r3, #128	@ 0x80
 8005242:	055b      	lsls	r3, r3, #21
 8005244:	4013      	ands	r3, r2
 8005246:	607b      	str	r3, [r7, #4]
 8005248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800524a:	4b08      	ldr	r3, [pc, #32]	@ (800526c <HAL_MspInit+0x44>)
 800524c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800524e:	4b07      	ldr	r3, [pc, #28]	@ (800526c <HAL_MspInit+0x44>)
 8005250:	2101      	movs	r1, #1
 8005252:	430a      	orrs	r2, r1
 8005254:	661a      	str	r2, [r3, #96]	@ 0x60
 8005256:	4b05      	ldr	r3, [pc, #20]	@ (800526c <HAL_MspInit+0x44>)
 8005258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800525a:	2201      	movs	r2, #1
 800525c:	4013      	ands	r3, r2
 800525e:	603b      	str	r3, [r7, #0]
 8005260:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005262:	46c0      	nop			@ (mov r8, r8)
 8005264:	46bd      	mov	sp, r7
 8005266:	b002      	add	sp, #8
 8005268:	bd80      	pop	{r7, pc}
 800526a:	46c0      	nop			@ (mov r8, r8)
 800526c:	40021000 	.word	0x40021000

08005270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005274:	46c0      	nop			@ (mov r8, r8)
 8005276:	e7fd      	b.n	8005274 <NMI_Handler+0x4>

08005278 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800527c:	46c0      	nop			@ (mov r8, r8)
 800527e:	e7fd      	b.n	800527c <HardFault_Handler+0x4>

08005280 <SVC_Handler>:

/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005284:	46c0      	nop			@ (mov r8, r8)
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800528e:	46c0      	nop			@ (mov r8, r8)
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005298:	f000 fa24 	bl	80056e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800529c:	46c0      	nop			@ (mov r8, r8)
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	af00      	add	r7, sp, #0
  return 1;
 80052a6:	2301      	movs	r3, #1
}
 80052a8:	0018      	movs	r0, r3
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <_kill>:

int _kill(int pid, int sig)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b082      	sub	sp, #8
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
 80052b6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80052b8:	f004 fe2c 	bl	8009f14 <__errno>
 80052bc:	0003      	movs	r3, r0
 80052be:	2216      	movs	r2, #22
 80052c0:	601a      	str	r2, [r3, #0]
  return -1;
 80052c2:	2301      	movs	r3, #1
 80052c4:	425b      	negs	r3, r3
}
 80052c6:	0018      	movs	r0, r3
 80052c8:	46bd      	mov	sp, r7
 80052ca:	b002      	add	sp, #8
 80052cc:	bd80      	pop	{r7, pc}

080052ce <_exit>:

void _exit (int status)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b082      	sub	sp, #8
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80052d6:	2301      	movs	r3, #1
 80052d8:	425a      	negs	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	0011      	movs	r1, r2
 80052de:	0018      	movs	r0, r3
 80052e0:	f7ff ffe5 	bl	80052ae <_kill>
  while (1) {}    /* Make sure we hang here */
 80052e4:	46c0      	nop			@ (mov r8, r8)
 80052e6:	e7fd      	b.n	80052e4 <_exit+0x16>

080052e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b086      	sub	sp, #24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052f4:	2300      	movs	r3, #0
 80052f6:	617b      	str	r3, [r7, #20]
 80052f8:	e00a      	b.n	8005310 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80052fa:	e000      	b.n	80052fe <_read+0x16>
 80052fc:	bf00      	nop
 80052fe:	0001      	movs	r1, r0
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	1c5a      	adds	r2, r3, #1
 8005304:	60ba      	str	r2, [r7, #8]
 8005306:	b2ca      	uxtb	r2, r1
 8005308:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	3301      	adds	r3, #1
 800530e:	617b      	str	r3, [r7, #20]
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	429a      	cmp	r2, r3
 8005316:	dbf0      	blt.n	80052fa <_read+0x12>
  }

  return len;
 8005318:	687b      	ldr	r3, [r7, #4]
}
 800531a:	0018      	movs	r0, r3
 800531c:	46bd      	mov	sp, r7
 800531e:	b006      	add	sp, #24
 8005320:	bd80      	pop	{r7, pc}

08005322 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b086      	sub	sp, #24
 8005326:	af00      	add	r7, sp, #0
 8005328:	60f8      	str	r0, [r7, #12]
 800532a:	60b9      	str	r1, [r7, #8]
 800532c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800532e:	2300      	movs	r3, #0
 8005330:	617b      	str	r3, [r7, #20]
 8005332:	e009      	b.n	8005348 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	1c5a      	adds	r2, r3, #1
 8005338:	60ba      	str	r2, [r7, #8]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	0018      	movs	r0, r3
 800533e:	e000      	b.n	8005342 <_write+0x20>
 8005340:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	3301      	adds	r3, #1
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	429a      	cmp	r2, r3
 800534e:	dbf1      	blt.n	8005334 <_write+0x12>
  }
  return len;
 8005350:	687b      	ldr	r3, [r7, #4]
}
 8005352:	0018      	movs	r0, r3
 8005354:	46bd      	mov	sp, r7
 8005356:	b006      	add	sp, #24
 8005358:	bd80      	pop	{r7, pc}

0800535a <_close>:

int _close(int file)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b082      	sub	sp, #8
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005362:	2301      	movs	r3, #1
 8005364:	425b      	negs	r3, r3
}
 8005366:	0018      	movs	r0, r3
 8005368:	46bd      	mov	sp, r7
 800536a:	b002      	add	sp, #8
 800536c:	bd80      	pop	{r7, pc}

0800536e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b082      	sub	sp, #8
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	2280      	movs	r2, #128	@ 0x80
 800537c:	0192      	lsls	r2, r2, #6
 800537e:	605a      	str	r2, [r3, #4]
  return 0;
 8005380:	2300      	movs	r3, #0
}
 8005382:	0018      	movs	r0, r3
 8005384:	46bd      	mov	sp, r7
 8005386:	b002      	add	sp, #8
 8005388:	bd80      	pop	{r7, pc}

0800538a <_isatty>:

int _isatty(int file)
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b082      	sub	sp, #8
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005392:	2301      	movs	r3, #1
}
 8005394:	0018      	movs	r0, r3
 8005396:	46bd      	mov	sp, r7
 8005398:	b002      	add	sp, #8
 800539a:	bd80      	pop	{r7, pc}

0800539c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	0018      	movs	r0, r3
 80053ac:	46bd      	mov	sp, r7
 80053ae:	b004      	add	sp, #16
 80053b0:	bd80      	pop	{r7, pc}
	...

080053b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b086      	sub	sp, #24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80053bc:	4a14      	ldr	r2, [pc, #80]	@ (8005410 <_sbrk+0x5c>)
 80053be:	4b15      	ldr	r3, [pc, #84]	@ (8005414 <_sbrk+0x60>)
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80053c8:	4b13      	ldr	r3, [pc, #76]	@ (8005418 <_sbrk+0x64>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d102      	bne.n	80053d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80053d0:	4b11      	ldr	r3, [pc, #68]	@ (8005418 <_sbrk+0x64>)
 80053d2:	4a12      	ldr	r2, [pc, #72]	@ (800541c <_sbrk+0x68>)
 80053d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80053d6:	4b10      	ldr	r3, [pc, #64]	@ (8005418 <_sbrk+0x64>)
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	18d3      	adds	r3, r2, r3
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d207      	bcs.n	80053f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80053e4:	f004 fd96 	bl	8009f14 <__errno>
 80053e8:	0003      	movs	r3, r0
 80053ea:	220c      	movs	r2, #12
 80053ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80053ee:	2301      	movs	r3, #1
 80053f0:	425b      	negs	r3, r3
 80053f2:	e009      	b.n	8005408 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80053f4:	4b08      	ldr	r3, [pc, #32]	@ (8005418 <_sbrk+0x64>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80053fa:	4b07      	ldr	r3, [pc, #28]	@ (8005418 <_sbrk+0x64>)
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	18d2      	adds	r2, r2, r3
 8005402:	4b05      	ldr	r3, [pc, #20]	@ (8005418 <_sbrk+0x64>)
 8005404:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8005406:	68fb      	ldr	r3, [r7, #12]
}
 8005408:	0018      	movs	r0, r3
 800540a:	46bd      	mov	sp, r7
 800540c:	b006      	add	sp, #24
 800540e:	bd80      	pop	{r7, pc}
 8005410:	20008000 	.word	0x20008000
 8005414:	00000400 	.word	0x00000400
 8005418:	20000348 	.word	0x20000348
 800541c:	20000530 	.word	0x20000530

08005420 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005424:	4b11      	ldr	r3, [pc, #68]	@ (800546c <SystemInit+0x4c>)
 8005426:	2280      	movs	r2, #128	@ 0x80
 8005428:	0512      	lsls	r2, r2, #20
 800542a:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  if (((FLASH->SECR & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)           \
 800542c:	4a10      	ldr	r2, [pc, #64]	@ (8005470 <SystemInit+0x50>)
 800542e:	2380      	movs	r3, #128	@ 0x80
 8005430:	58d2      	ldr	r2, [r2, r3]
 8005432:	2380      	movs	r3, #128	@ 0x80
 8005434:	025b      	lsls	r3, r3, #9
 8005436:	401a      	ands	r2, r3
 8005438:	2380      	movs	r3, #128	@ 0x80
 800543a:	025b      	lsls	r3, r3, #9
 800543c:	429a      	cmp	r2, r3
 800543e:	d112      	bne.n	8005466 <SystemInit+0x46>
      && (((FLASH->OPTR & FLASH_OPTR_RDP) != 0xCCU)                            \
 8005440:	4b0b      	ldr	r3, [pc, #44]	@ (8005470 <SystemInit+0x50>)
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	22ff      	movs	r2, #255	@ 0xff
 8005446:	4013      	ands	r3, r2
 8005448:	2bcc      	cmp	r3, #204	@ 0xcc
 800544a:	d00c      	beq.n	8005466 <SystemInit+0x46>
          && ((FLASH->OPTR & FLASH_OPTR_RDP) != 0xAAU)))
 800544c:	4b08      	ldr	r3, [pc, #32]	@ (8005470 <SystemInit+0x50>)
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	22ff      	movs	r2, #255	@ 0xff
 8005452:	4013      	ands	r3, r2
 8005454:	2baa      	cmp	r3, #170	@ 0xaa
 8005456:	d006      	beq.n	8005466 <SystemInit+0x46>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 8005458:	4b05      	ldr	r3, [pc, #20]	@ (8005470 <SystemInit+0x50>)
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	4b04      	ldr	r3, [pc, #16]	@ (8005470 <SystemInit+0x50>)
 800545e:	2180      	movs	r1, #128	@ 0x80
 8005460:	02c9      	lsls	r1, r1, #11
 8005462:	430a      	orrs	r2, r1
 8005464:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 8005466:	46c0      	nop			@ (mov r8, r8)
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	e000ed00 	.word	0xe000ed00
 8005470:	40022000 	.word	0x40022000

08005474 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005478:	4b22      	ldr	r3, [pc, #136]	@ (8005504 <MX_USART2_UART_Init+0x90>)
 800547a:	4a23      	ldr	r2, [pc, #140]	@ (8005508 <MX_USART2_UART_Init+0x94>)
 800547c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 800547e:	4b21      	ldr	r3, [pc, #132]	@ (8005504 <MX_USART2_UART_Init+0x90>)
 8005480:	4a22      	ldr	r2, [pc, #136]	@ (800550c <MX_USART2_UART_Init+0x98>)
 8005482:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005484:	4b1f      	ldr	r3, [pc, #124]	@ (8005504 <MX_USART2_UART_Init+0x90>)
 8005486:	2200      	movs	r2, #0
 8005488:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800548a:	4b1e      	ldr	r3, [pc, #120]	@ (8005504 <MX_USART2_UART_Init+0x90>)
 800548c:	2200      	movs	r2, #0
 800548e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005490:	4b1c      	ldr	r3, [pc, #112]	@ (8005504 <MX_USART2_UART_Init+0x90>)
 8005492:	2200      	movs	r2, #0
 8005494:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005496:	4b1b      	ldr	r3, [pc, #108]	@ (8005504 <MX_USART2_UART_Init+0x90>)
 8005498:	220c      	movs	r2, #12
 800549a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800549c:	4b19      	ldr	r3, [pc, #100]	@ (8005504 <MX_USART2_UART_Init+0x90>)
 800549e:	2200      	movs	r2, #0
 80054a0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80054a2:	4b18      	ldr	r3, [pc, #96]	@ (8005504 <MX_USART2_UART_Init+0x90>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80054a8:	4b16      	ldr	r3, [pc, #88]	@ (8005504 <MX_USART2_UART_Init+0x90>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80054ae:	4b15      	ldr	r3, [pc, #84]	@ (8005504 <MX_USART2_UART_Init+0x90>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80054b4:	4b13      	ldr	r3, [pc, #76]	@ (8005504 <MX_USART2_UART_Init+0x90>)
 80054b6:	2200      	movs	r2, #0
 80054b8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80054ba:	4b12      	ldr	r3, [pc, #72]	@ (8005504 <MX_USART2_UART_Init+0x90>)
 80054bc:	0018      	movs	r0, r3
 80054be:	f003 f9e7 	bl	8008890 <HAL_UART_Init>
 80054c2:	1e03      	subs	r3, r0, #0
 80054c4:	d001      	beq.n	80054ca <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 80054c6:	f7fe f980 	bl	80037ca <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80054ca:	4b0e      	ldr	r3, [pc, #56]	@ (8005504 <MX_USART2_UART_Init+0x90>)
 80054cc:	2100      	movs	r1, #0
 80054ce:	0018      	movs	r0, r3
 80054d0:	f003 fe74 	bl	80091bc <HAL_UARTEx_SetTxFifoThreshold>
 80054d4:	1e03      	subs	r3, r0, #0
 80054d6:	d001      	beq.n	80054dc <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 80054d8:	f7fe f977 	bl	80037ca <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80054dc:	4b09      	ldr	r3, [pc, #36]	@ (8005504 <MX_USART2_UART_Init+0x90>)
 80054de:	2100      	movs	r1, #0
 80054e0:	0018      	movs	r0, r3
 80054e2:	f003 feab 	bl	800923c <HAL_UARTEx_SetRxFifoThreshold>
 80054e6:	1e03      	subs	r3, r0, #0
 80054e8:	d001      	beq.n	80054ee <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 80054ea:	f7fe f96e 	bl	80037ca <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80054ee:	4b05      	ldr	r3, [pc, #20]	@ (8005504 <MX_USART2_UART_Init+0x90>)
 80054f0:	0018      	movs	r0, r3
 80054f2:	f003 fe29 	bl	8009148 <HAL_UARTEx_DisableFifoMode>
 80054f6:	1e03      	subs	r3, r0, #0
 80054f8:	d001      	beq.n	80054fe <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 80054fa:	f7fe f966 	bl	80037ca <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80054fe:	46c0      	nop			@ (mov r8, r8)
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	2000034c 	.word	0x2000034c
 8005508:	40004400 	.word	0x40004400
 800550c:	000f4240 	.word	0x000f4240

08005510 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005510:	b590      	push	{r4, r7, lr}
 8005512:	b09b      	sub	sp, #108	@ 0x6c
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005518:	2354      	movs	r3, #84	@ 0x54
 800551a:	18fb      	adds	r3, r7, r3
 800551c:	0018      	movs	r0, r3
 800551e:	2314      	movs	r3, #20
 8005520:	001a      	movs	r2, r3
 8005522:	2100      	movs	r1, #0
 8005524:	f004 fc9c 	bl	8009e60 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005528:	2410      	movs	r4, #16
 800552a:	193b      	adds	r3, r7, r4
 800552c:	0018      	movs	r0, r3
 800552e:	2344      	movs	r3, #68	@ 0x44
 8005530:	001a      	movs	r2, r3
 8005532:	2100      	movs	r1, #0
 8005534:	f004 fc94 	bl	8009e60 <memset>
  if(uartHandle->Instance==USART2)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a22      	ldr	r2, [pc, #136]	@ (80055c8 <HAL_UART_MspInit+0xb8>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d13e      	bne.n	80055c0 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005542:	193b      	adds	r3, r7, r4
 8005544:	2202      	movs	r2, #2
 8005546:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005548:	193b      	adds	r3, r7, r4
 800554a:	2200      	movs	r2, #0
 800554c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800554e:	193b      	adds	r3, r7, r4
 8005550:	0018      	movs	r0, r3
 8005552:	f001 ff45 	bl	80073e0 <HAL_RCCEx_PeriphCLKConfig>
 8005556:	1e03      	subs	r3, r0, #0
 8005558:	d001      	beq.n	800555e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800555a:	f7fe f936 	bl	80037ca <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800555e:	4b1b      	ldr	r3, [pc, #108]	@ (80055cc <HAL_UART_MspInit+0xbc>)
 8005560:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005562:	4b1a      	ldr	r3, [pc, #104]	@ (80055cc <HAL_UART_MspInit+0xbc>)
 8005564:	2180      	movs	r1, #128	@ 0x80
 8005566:	0289      	lsls	r1, r1, #10
 8005568:	430a      	orrs	r2, r1
 800556a:	659a      	str	r2, [r3, #88]	@ 0x58
 800556c:	4b17      	ldr	r3, [pc, #92]	@ (80055cc <HAL_UART_MspInit+0xbc>)
 800556e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005570:	2380      	movs	r3, #128	@ 0x80
 8005572:	029b      	lsls	r3, r3, #10
 8005574:	4013      	ands	r3, r2
 8005576:	60fb      	str	r3, [r7, #12]
 8005578:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800557a:	4b14      	ldr	r3, [pc, #80]	@ (80055cc <HAL_UART_MspInit+0xbc>)
 800557c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800557e:	4b13      	ldr	r3, [pc, #76]	@ (80055cc <HAL_UART_MspInit+0xbc>)
 8005580:	2101      	movs	r1, #1
 8005582:	430a      	orrs	r2, r1
 8005584:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005586:	4b11      	ldr	r3, [pc, #68]	@ (80055cc <HAL_UART_MspInit+0xbc>)
 8005588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800558a:	2201      	movs	r2, #1
 800558c:	4013      	ands	r3, r2
 800558e:	60bb      	str	r3, [r7, #8]
 8005590:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005592:	2154      	movs	r1, #84	@ 0x54
 8005594:	187b      	adds	r3, r7, r1
 8005596:	220c      	movs	r2, #12
 8005598:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800559a:	187b      	adds	r3, r7, r1
 800559c:	2202      	movs	r2, #2
 800559e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055a0:	187b      	adds	r3, r7, r1
 80055a2:	2200      	movs	r2, #0
 80055a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055a6:	187b      	adds	r3, r7, r1
 80055a8:	2200      	movs	r2, #0
 80055aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80055ac:	187b      	adds	r3, r7, r1
 80055ae:	2207      	movs	r2, #7
 80055b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055b2:	187a      	adds	r2, r7, r1
 80055b4:	23a0      	movs	r3, #160	@ 0xa0
 80055b6:	05db      	lsls	r3, r3, #23
 80055b8:	0011      	movs	r1, r2
 80055ba:	0018      	movs	r0, r3
 80055bc:	f000 fd94 	bl	80060e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80055c0:	46c0      	nop			@ (mov r8, r8)
 80055c2:	46bd      	mov	sp, r7
 80055c4:	b01b      	add	sp, #108	@ 0x6c
 80055c6:	bd90      	pop	{r4, r7, pc}
 80055c8:	40004400 	.word	0x40004400
 80055cc:	40021000 	.word	0x40021000

080055d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80055d0:	480d      	ldr	r0, [pc, #52]	@ (8005608 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80055d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80055d4:	f7ff ff24 	bl	8005420 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80055d8:	480c      	ldr	r0, [pc, #48]	@ (800560c <LoopForever+0x6>)
  ldr r1, =_edata
 80055da:	490d      	ldr	r1, [pc, #52]	@ (8005610 <LoopForever+0xa>)
  ldr r2, =_sidata
 80055dc:	4a0d      	ldr	r2, [pc, #52]	@ (8005614 <LoopForever+0xe>)
  movs r3, #0
 80055de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055e0:	e002      	b.n	80055e8 <LoopCopyDataInit>

080055e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055e6:	3304      	adds	r3, #4

080055e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055ec:	d3f9      	bcc.n	80055e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055ee:	4a0a      	ldr	r2, [pc, #40]	@ (8005618 <LoopForever+0x12>)
  ldr r4, =_ebss
 80055f0:	4c0a      	ldr	r4, [pc, #40]	@ (800561c <LoopForever+0x16>)
  movs r3, #0
 80055f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055f4:	e001      	b.n	80055fa <LoopFillZerobss>

080055f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055f8:	3204      	adds	r2, #4

080055fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055fc:	d3fb      	bcc.n	80055f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80055fe:	f004 fc8f 	bl	8009f20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005602:	f7fe f80b 	bl	800361c <main>

08005606 <LoopForever>:

LoopForever:
  b LoopForever
 8005606:	e7fe      	b.n	8005606 <LoopForever>
  ldr   r0, =_estack
 8005608:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800560c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005610:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8005614:	0800c770 	.word	0x0800c770
  ldr r2, =_sbss
 8005618:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800561c:	20000530 	.word	0x20000530

08005620 <ADC_COMP1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005620:	e7fe      	b.n	8005620 <ADC_COMP1_2_IRQHandler>

08005622 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b082      	sub	sp, #8
 8005626:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005628:	1dfb      	adds	r3, r7, #7
 800562a:	2200      	movs	r2, #0
 800562c:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800562e:	2003      	movs	r0, #3
 8005630:	f000 f80e 	bl	8005650 <HAL_InitTick>
 8005634:	1e03      	subs	r3, r0, #0
 8005636:	d003      	beq.n	8005640 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8005638:	1dfb      	adds	r3, r7, #7
 800563a:	2201      	movs	r2, #1
 800563c:	701a      	strb	r2, [r3, #0]
 800563e:	e001      	b.n	8005644 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005640:	f7ff fdf2 	bl	8005228 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005644:	1dfb      	adds	r3, r7, #7
 8005646:	781b      	ldrb	r3, [r3, #0]
}
 8005648:	0018      	movs	r0, r3
 800564a:	46bd      	mov	sp, r7
 800564c:	b002      	add	sp, #8
 800564e:	bd80      	pop	{r7, pc}

08005650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005650:	b590      	push	{r4, r7, lr}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005658:	230f      	movs	r3, #15
 800565a:	18fb      	adds	r3, r7, r3
 800565c:	2200      	movs	r2, #0
 800565e:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8005660:	4b1d      	ldr	r3, [pc, #116]	@ (80056d8 <HAL_InitTick+0x88>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d02b      	beq.n	80056c0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005668:	4b1c      	ldr	r3, [pc, #112]	@ (80056dc <HAL_InitTick+0x8c>)
 800566a:	681c      	ldr	r4, [r3, #0]
 800566c:	4b1a      	ldr	r3, [pc, #104]	@ (80056d8 <HAL_InitTick+0x88>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	0019      	movs	r1, r3
 8005672:	23fa      	movs	r3, #250	@ 0xfa
 8005674:	0098      	lsls	r0, r3, #2
 8005676:	f7fa fd63 	bl	8000140 <__udivsi3>
 800567a:	0003      	movs	r3, r0
 800567c:	0019      	movs	r1, r3
 800567e:	0020      	movs	r0, r4
 8005680:	f7fa fd5e 	bl	8000140 <__udivsi3>
 8005684:	0003      	movs	r3, r0
 8005686:	0018      	movs	r0, r3
 8005688:	f000 fd21 	bl	80060ce <HAL_SYSTICK_Config>
 800568c:	1e03      	subs	r3, r0, #0
 800568e:	d112      	bne.n	80056b6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b03      	cmp	r3, #3
 8005694:	d80a      	bhi.n	80056ac <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005696:	6879      	ldr	r1, [r7, #4]
 8005698:	2301      	movs	r3, #1
 800569a:	425b      	negs	r3, r3
 800569c:	2200      	movs	r2, #0
 800569e:	0018      	movs	r0, r3
 80056a0:	f000 fd00 	bl	80060a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80056a4:	4b0e      	ldr	r3, [pc, #56]	@ (80056e0 <HAL_InitTick+0x90>)
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	601a      	str	r2, [r3, #0]
 80056aa:	e00d      	b.n	80056c8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80056ac:	230f      	movs	r3, #15
 80056ae:	18fb      	adds	r3, r7, r3
 80056b0:	2201      	movs	r2, #1
 80056b2:	701a      	strb	r2, [r3, #0]
 80056b4:	e008      	b.n	80056c8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80056b6:	230f      	movs	r3, #15
 80056b8:	18fb      	adds	r3, r7, r3
 80056ba:	2201      	movs	r2, #1
 80056bc:	701a      	strb	r2, [r3, #0]
 80056be:	e003      	b.n	80056c8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80056c0:	230f      	movs	r3, #15
 80056c2:	18fb      	adds	r3, r7, r3
 80056c4:	2201      	movs	r2, #1
 80056c6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80056c8:	230f      	movs	r3, #15
 80056ca:	18fb      	adds	r3, r7, r3
 80056cc:	781b      	ldrb	r3, [r3, #0]
}
 80056ce:	0018      	movs	r0, r3
 80056d0:	46bd      	mov	sp, r7
 80056d2:	b005      	add	sp, #20
 80056d4:	bd90      	pop	{r4, r7, pc}
 80056d6:	46c0      	nop			@ (mov r8, r8)
 80056d8:	2000000c 	.word	0x2000000c
 80056dc:	20000004 	.word	0x20000004
 80056e0:	20000008 	.word	0x20000008

080056e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80056e8:	4b04      	ldr	r3, [pc, #16]	@ (80056fc <HAL_IncTick+0x18>)
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	4b04      	ldr	r3, [pc, #16]	@ (8005700 <HAL_IncTick+0x1c>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	18d2      	adds	r2, r2, r3
 80056f2:	4b02      	ldr	r3, [pc, #8]	@ (80056fc <HAL_IncTick+0x18>)
 80056f4:	601a      	str	r2, [r3, #0]
}
 80056f6:	46c0      	nop			@ (mov r8, r8)
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	200003e0 	.word	0x200003e0
 8005700:	2000000c 	.word	0x2000000c

08005704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	af00      	add	r7, sp, #0
  return uwTick;
 8005708:	4b02      	ldr	r3, [pc, #8]	@ (8005714 <HAL_GetTick+0x10>)
 800570a:	681b      	ldr	r3, [r3, #0]
}
 800570c:	0018      	movs	r0, r3
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	46c0      	nop			@ (mov r8, r8)
 8005714:	200003e0 	.word	0x200003e0

08005718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005720:	f7ff fff0 	bl	8005704 <HAL_GetTick>
 8005724:	0003      	movs	r3, r0
 8005726:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	3301      	adds	r3, #1
 8005730:	d004      	beq.n	800573c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005732:	4b09      	ldr	r3, [pc, #36]	@ (8005758 <HAL_Delay+0x40>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	18d3      	adds	r3, r2, r3
 800573a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800573c:	46c0      	nop			@ (mov r8, r8)
 800573e:	f7ff ffe1 	bl	8005704 <HAL_GetTick>
 8005742:	0002      	movs	r2, r0
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	429a      	cmp	r2, r3
 800574c:	d8f7      	bhi.n	800573e <HAL_Delay+0x26>
  {
  }
}
 800574e:	46c0      	nop			@ (mov r8, r8)
 8005750:	46c0      	nop			@ (mov r8, r8)
 8005752:	46bd      	mov	sp, r7
 8005754:	b004      	add	sp, #16
 8005756:	bd80      	pop	{r7, pc}
 8005758:	2000000c 	.word	0x2000000c

0800575c <LL_ADC_SetCommonPathInternalCh>:
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a05      	ldr	r2, [pc, #20]	@ (8005780 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800576c:	401a      	ands	r2, r3
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	431a      	orrs	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	601a      	str	r2, [r3, #0]
}
 8005776:	46c0      	nop			@ (mov r8, r8)
 8005778:	46bd      	mov	sp, r7
 800577a:	b002      	add	sp, #8
 800577c:	bd80      	pop	{r7, pc}
 800577e:	46c0      	nop			@ (mov r8, r8)
 8005780:	fe3fffff 	.word	0xfe3fffff

08005784 <LL_ADC_GetCommonPathInternalCh>:
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	23e0      	movs	r3, #224	@ 0xe0
 8005792:	045b      	lsls	r3, r3, #17
 8005794:	4013      	ands	r3, r2
}
 8005796:	0018      	movs	r0, r3
 8005798:	46bd      	mov	sp, r7
 800579a:	b002      	add	sp, #8
 800579c:	bd80      	pop	{r7, pc}

0800579e <LL_ADC_SetSamplingTimeCommonChannels>:
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b084      	sub	sp, #16
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	60f8      	str	r0, [r7, #12]
 80057a6:	60b9      	str	r1, [r7, #8]
 80057a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	2104      	movs	r1, #4
 80057b2:	400a      	ands	r2, r1
 80057b4:	2107      	movs	r1, #7
 80057b6:	4091      	lsls	r1, r2
 80057b8:	000a      	movs	r2, r1
 80057ba:	43d2      	mvns	r2, r2
 80057bc:	401a      	ands	r2, r3
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	2104      	movs	r1, #4
 80057c2:	400b      	ands	r3, r1
 80057c4:	6879      	ldr	r1, [r7, #4]
 80057c6:	4099      	lsls	r1, r3
 80057c8:	000b      	movs	r3, r1
 80057ca:	431a      	orrs	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	615a      	str	r2, [r3, #20]
}
 80057d0:	46c0      	nop			@ (mov r8, r8)
 80057d2:	46bd      	mov	sp, r7
 80057d4:	b004      	add	sp, #16
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <LL_ADC_GetSamplingTimeCommonChannels>:
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	683a      	ldr	r2, [r7, #0]
 80057e8:	2104      	movs	r1, #4
 80057ea:	400a      	ands	r2, r1
 80057ec:	2107      	movs	r1, #7
 80057ee:	4091      	lsls	r1, r2
 80057f0:	000a      	movs	r2, r1
 80057f2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	2104      	movs	r1, #4
 80057f8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80057fa:	40da      	lsrs	r2, r3
 80057fc:	0013      	movs	r3, r2
}
 80057fe:	0018      	movs	r0, r3
 8005800:	46bd      	mov	sp, r7
 8005802:	b002      	add	sp, #8
 8005804:	bd80      	pop	{r7, pc}

08005806 <LL_ADC_REG_SetSequencerRanks>:
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b084      	sub	sp, #16
 800580a:	af00      	add	r7, sp, #0
 800580c:	60f8      	str	r0, [r7, #12]
 800580e:	60b9      	str	r1, [r7, #8]
 8005810:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CHSELR,
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	211f      	movs	r1, #31
 800581a:	400a      	ands	r2, r1
 800581c:	210f      	movs	r1, #15
 800581e:	4091      	lsls	r1, r2
 8005820:	000a      	movs	r2, r1
 8005822:	43d2      	mvns	r2, r2
 8005824:	401a      	ands	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	0e9b      	lsrs	r3, r3, #26
 800582a:	210f      	movs	r1, #15
 800582c:	4019      	ands	r1, r3
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	201f      	movs	r0, #31
 8005832:	4003      	ands	r3, r0
 8005834:	4099      	lsls	r1, r3
 8005836:	000b      	movs	r3, r1
 8005838:	431a      	orrs	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800583e:	46c0      	nop			@ (mov r8, r8)
 8005840:	46bd      	mov	sp, r7
 8005842:	b004      	add	sp, #16
 8005844:	bd80      	pop	{r7, pc}

08005846 <LL_ADC_REG_SetSequencerChAdd>:
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b082      	sub	sp, #8
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
 800584e:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	025b      	lsls	r3, r3, #9
 8005858:	0a5b      	lsrs	r3, r3, #9
 800585a:	431a      	orrs	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005860:	46c0      	nop			@ (mov r8, r8)
 8005862:	46bd      	mov	sp, r7
 8005864:	b002      	add	sp, #8
 8005866:	bd80      	pop	{r7, pc}

08005868 <LL_ADC_REG_SetSequencerChRem>:
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	0252      	lsls	r2, r2, #9
 800587a:	0a52      	lsrs	r2, r2, #9
 800587c:	43d2      	mvns	r2, r2
 800587e:	401a      	ands	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005884:	46c0      	nop			@ (mov r8, r8)
 8005886:	46bd      	mov	sp, r7
 8005888:	b002      	add	sp, #8
 800588a:	bd80      	pop	{r7, pc}

0800588c <LL_ADC_SetChannelSamplingTime>:
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	695b      	ldr	r3, [r3, #20]
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	0212      	lsls	r2, r2, #8
 80058a0:	43d2      	mvns	r2, r2
 80058a2:	401a      	ands	r2, r3
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	021b      	lsls	r3, r3, #8
 80058a8:	6879      	ldr	r1, [r7, #4]
 80058aa:	400b      	ands	r3, r1
 80058ac:	4904      	ldr	r1, [pc, #16]	@ (80058c0 <LL_ADC_SetChannelSamplingTime+0x34>)
 80058ae:	400b      	ands	r3, r1
 80058b0:	431a      	orrs	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	615a      	str	r2, [r3, #20]
}
 80058b6:	46c0      	nop			@ (mov r8, r8)
 80058b8:	46bd      	mov	sp, r7
 80058ba:	b004      	add	sp, #16
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	46c0      	nop			@ (mov r8, r8)
 80058c0:	7fffff00 	.word	0x7fffff00

080058c4 <LL_ADC_EnableInternalRegulator>:
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	4a05      	ldr	r2, [pc, #20]	@ (80058e8 <LL_ADC_EnableInternalRegulator+0x24>)
 80058d2:	4013      	ands	r3, r2
 80058d4:	2280      	movs	r2, #128	@ 0x80
 80058d6:	0552      	lsls	r2, r2, #21
 80058d8:	431a      	orrs	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	609a      	str	r2, [r3, #8]
}
 80058de:	46c0      	nop			@ (mov r8, r8)
 80058e0:	46bd      	mov	sp, r7
 80058e2:	b002      	add	sp, #8
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	46c0      	nop			@ (mov r8, r8)
 80058e8:	6fffffe8 	.word	0x6fffffe8

080058ec <LL_ADC_IsInternalRegulatorEnabled>:
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	2380      	movs	r3, #128	@ 0x80
 80058fa:	055b      	lsls	r3, r3, #21
 80058fc:	401a      	ands	r2, r3
 80058fe:	2380      	movs	r3, #128	@ 0x80
 8005900:	055b      	lsls	r3, r3, #21
 8005902:	429a      	cmp	r2, r3
 8005904:	d101      	bne.n	800590a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8005906:	2301      	movs	r3, #1
 8005908:	e000      	b.n	800590c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800590a:	2300      	movs	r3, #0
}
 800590c:	0018      	movs	r0, r3
 800590e:	46bd      	mov	sp, r7
 8005910:	b002      	add	sp, #8
 8005912:	bd80      	pop	{r7, pc}

08005914 <LL_ADC_IsEnabled>:
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	2201      	movs	r2, #1
 8005922:	4013      	ands	r3, r2
 8005924:	2b01      	cmp	r3, #1
 8005926:	d101      	bne.n	800592c <LL_ADC_IsEnabled+0x18>
 8005928:	2301      	movs	r3, #1
 800592a:	e000      	b.n	800592e <LL_ADC_IsEnabled+0x1a>
 800592c:	2300      	movs	r3, #0
}
 800592e:	0018      	movs	r0, r3
 8005930:	46bd      	mov	sp, r7
 8005932:	b002      	add	sp, #8
 8005934:	bd80      	pop	{r7, pc}

08005936 <LL_ADC_REG_IsConversionOngoing>:
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b082      	sub	sp, #8
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	2204      	movs	r2, #4
 8005944:	4013      	ands	r3, r2
 8005946:	2b04      	cmp	r3, #4
 8005948:	d101      	bne.n	800594e <LL_ADC_REG_IsConversionOngoing+0x18>
 800594a:	2301      	movs	r3, #1
 800594c:	e000      	b.n	8005950 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800594e:	2300      	movs	r3, #0
}
 8005950:	0018      	movs	r0, r3
 8005952:	46bd      	mov	sp, r7
 8005954:	b002      	add	sp, #8
 8005956:	bd80      	pop	{r7, pc}

08005958 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b088      	sub	sp, #32
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005960:	231f      	movs	r3, #31
 8005962:	18fb      	adds	r3, r7, r3
 8005964:	2200      	movs	r2, #0
 8005966:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8005968:	2300      	movs	r3, #0
 800596a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 800596c:	2300      	movs	r3, #0
 800596e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005970:	2300      	movs	r3, #0
 8005972:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e17f      	b.n	8005c7e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10a      	bne.n	800599c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	0018      	movs	r0, r3
 800598a:	f7fd fb7f 	bl	800308c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2254      	movs	r2, #84	@ 0x54
 8005998:	2100      	movs	r1, #0
 800599a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	0018      	movs	r0, r3
 80059a2:	f7ff ffa3 	bl	80058ec <LL_ADC_IsInternalRegulatorEnabled>
 80059a6:	1e03      	subs	r3, r0, #0
 80059a8:	d115      	bne.n	80059d6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	0018      	movs	r0, r3
 80059b0:	f7ff ff88 	bl	80058c4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80059b4:	4bb4      	ldr	r3, [pc, #720]	@ (8005c88 <HAL_ADC_Init+0x330>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	49b4      	ldr	r1, [pc, #720]	@ (8005c8c <HAL_ADC_Init+0x334>)
 80059ba:	0018      	movs	r0, r3
 80059bc:	f7fa fbc0 	bl	8000140 <__udivsi3>
 80059c0:	0003      	movs	r3, r0
 80059c2:	3301      	adds	r3, #1
 80059c4:	005b      	lsls	r3, r3, #1
 80059c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80059c8:	e002      	b.n	80059d0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	3b01      	subs	r3, #1
 80059ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1f9      	bne.n	80059ca <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	0018      	movs	r0, r3
 80059dc:	f7ff ff86 	bl	80058ec <LL_ADC_IsInternalRegulatorEnabled>
 80059e0:	1e03      	subs	r3, r0, #0
 80059e2:	d10f      	bne.n	8005a04 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059e8:	2210      	movs	r2, #16
 80059ea:	431a      	orrs	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059f4:	2201      	movs	r2, #1
 80059f6:	431a      	orrs	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80059fc:	231f      	movs	r3, #31
 80059fe:	18fb      	adds	r3, r7, r3
 8005a00:	2201      	movs	r2, #1
 8005a02:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	0018      	movs	r0, r3
 8005a0a:	f7ff ff94 	bl	8005936 <LL_ADC_REG_IsConversionOngoing>
 8005a0e:	0003      	movs	r3, r0
 8005a10:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a16:	2210      	movs	r2, #16
 8005a18:	4013      	ands	r3, r2
 8005a1a:	d000      	beq.n	8005a1e <HAL_ADC_Init+0xc6>
 8005a1c:	e122      	b.n	8005c64 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d000      	beq.n	8005a26 <HAL_ADC_Init+0xce>
 8005a24:	e11e      	b.n	8005c64 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a2a:	4a99      	ldr	r2, [pc, #612]	@ (8005c90 <HAL_ADC_Init+0x338>)
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	2202      	movs	r2, #2
 8005a30:	431a      	orrs	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	0018      	movs	r0, r3
 8005a3c:	f7ff ff6a 	bl	8005914 <LL_ADC_IsEnabled>
 8005a40:	1e03      	subs	r3, r0, #0
 8005a42:	d000      	beq.n	8005a46 <HAL_ADC_Init+0xee>
 8005a44:	e0ad      	b.n	8005ba2 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	7e1b      	ldrb	r3, [r3, #24]
 8005a4e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8005a50:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	7e5b      	ldrb	r3, [r3, #25]
 8005a56:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005a58:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	7e9b      	ldrb	r3, [r3, #26]
 8005a5e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005a60:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <HAL_ADC_Init+0x118>
 8005a6a:	2380      	movs	r3, #128	@ 0x80
 8005a6c:	015b      	lsls	r3, r3, #5
 8005a6e:	e000      	b.n	8005a72 <HAL_ADC_Init+0x11a>
 8005a70:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005a72:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005a78:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	da04      	bge.n	8005a8c <HAL_ADC_Init+0x134>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	005b      	lsls	r3, r3, #1
 8005a88:	085b      	lsrs	r3, r3, #1
 8005a8a:	e001      	b.n	8005a90 <HAL_ADC_Init+0x138>
 8005a8c:	2380      	movs	r3, #128	@ 0x80
 8005a8e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8005a90:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	212c      	movs	r1, #44	@ 0x2c
 8005a96:	5c5b      	ldrb	r3, [r3, r1]
 8005a98:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005a9a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	5c9b      	ldrb	r3, [r3, r2]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d115      	bne.n	8005ad8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	7e9b      	ldrb	r3, [r3, #26]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d105      	bne.n	8005ac0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	2280      	movs	r2, #128	@ 0x80
 8005ab8:	0252      	lsls	r2, r2, #9
 8005aba:	4313      	orrs	r3, r2
 8005abc:	61bb      	str	r3, [r7, #24]
 8005abe:	e00b      	b.n	8005ad8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ac4:	2220      	movs	r2, #32
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00a      	beq.n	8005af6 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ae4:	23e0      	movs	r3, #224	@ 0xe0
 8005ae6:	005b      	lsls	r3, r3, #1
 8005ae8:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005aee:	4313      	orrs	r3, r2
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	4a65      	ldr	r2, [pc, #404]	@ (8005c94 <HAL_ADC_Init+0x33c>)
 8005afe:	4013      	ands	r3, r2
 8005b00:	0019      	movs	r1, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	0f9b      	lsrs	r3, r3, #30
 8005b12:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	223c      	movs	r2, #60	@ 0x3c
 8005b24:	5c9b      	ldrb	r3, [r3, r2]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d111      	bne.n	8005b4e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	0f9b      	lsrs	r3, r3, #30
 8005b30:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005b36:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8005b3c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8005b42:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	2201      	movs	r2, #1
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	4a50      	ldr	r2, [pc, #320]	@ (8005c98 <HAL_ADC_Init+0x340>)
 8005b56:	4013      	ands	r3, r2
 8005b58:	0019      	movs	r1, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	430a      	orrs	r2, r1
 8005b62:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685a      	ldr	r2, [r3, #4]
 8005b68:	23c0      	movs	r3, #192	@ 0xc0
 8005b6a:	061b      	lsls	r3, r3, #24
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d018      	beq.n	8005ba2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005b74:	2380      	movs	r3, #128	@ 0x80
 8005b76:	05db      	lsls	r3, r3, #23
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d012      	beq.n	8005ba2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005b80:	2380      	movs	r3, #128	@ 0x80
 8005b82:	061b      	lsls	r3, r3, #24
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d00c      	beq.n	8005ba2 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8005b88:	4b44      	ldr	r3, [pc, #272]	@ (8005c9c <HAL_ADC_Init+0x344>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a44      	ldr	r2, [pc, #272]	@ (8005ca0 <HAL_ADC_Init+0x348>)
 8005b8e:	4013      	ands	r3, r2
 8005b90:	0019      	movs	r1, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	23f0      	movs	r3, #240	@ 0xf0
 8005b98:	039b      	lsls	r3, r3, #14
 8005b9a:	401a      	ands	r2, r3
 8005b9c:	4b3f      	ldr	r3, [pc, #252]	@ (8005c9c <HAL_ADC_Init+0x344>)
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6818      	ldr	r0, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005baa:	001a      	movs	r2, r3
 8005bac:	2100      	movs	r1, #0
 8005bae:	f7ff fdf6 	bl	800579e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6818      	ldr	r0, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bba:	493a      	ldr	r1, [pc, #232]	@ (8005ca4 <HAL_ADC_Init+0x34c>)
 8005bbc:	001a      	movs	r2, r3
 8005bbe:	f7ff fdee 	bl	800579e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d109      	bne.n	8005bde <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2110      	movs	r1, #16
 8005bd6:	4249      	negs	r1, r1
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	629a      	str	r2, [r3, #40]	@ 0x28
 8005bdc:	e018      	b.n	8005c10 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	691a      	ldr	r2, [r3, #16]
 8005be2:	2380      	movs	r3, #128	@ 0x80
 8005be4:	039b      	lsls	r3, r3, #14
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d112      	bne.n	8005c10 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	69db      	ldr	r3, [r3, #28]
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	221c      	movs	r2, #28
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	2210      	movs	r2, #16
 8005bfe:	4252      	negs	r2, r2
 8005c00:	409a      	lsls	r2, r3
 8005c02:	0011      	movs	r1, r2
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2100      	movs	r1, #0
 8005c16:	0018      	movs	r0, r3
 8005c18:	f7ff fdde 	bl	80057d8 <LL_ADC_GetSamplingTimeCommonChannels>
 8005c1c:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d10b      	bne.n	8005c3e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c30:	2203      	movs	r2, #3
 8005c32:	4393      	bics	r3, r2
 8005c34:	2201      	movs	r2, #1
 8005c36:	431a      	orrs	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005c3c:	e01c      	b.n	8005c78 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c42:	2212      	movs	r2, #18
 8005c44:	4393      	bics	r3, r2
 8005c46:	2210      	movs	r2, #16
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c52:	2201      	movs	r2, #1
 8005c54:	431a      	orrs	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8005c5a:	231f      	movs	r3, #31
 8005c5c:	18fb      	adds	r3, r7, r3
 8005c5e:	2201      	movs	r2, #1
 8005c60:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005c62:	e009      	b.n	8005c78 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c68:	2210      	movs	r2, #16
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005c70:	231f      	movs	r3, #31
 8005c72:	18fb      	adds	r3, r7, r3
 8005c74:	2201      	movs	r2, #1
 8005c76:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8005c78:	231f      	movs	r3, #31
 8005c7a:	18fb      	adds	r3, r7, r3
 8005c7c:	781b      	ldrb	r3, [r3, #0]
}
 8005c7e:	0018      	movs	r0, r3
 8005c80:	46bd      	mov	sp, r7
 8005c82:	b008      	add	sp, #32
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	46c0      	nop			@ (mov r8, r8)
 8005c88:	20000004 	.word	0x20000004
 8005c8c:	00030d40 	.word	0x00030d40
 8005c90:	fffffefd 	.word	0xfffffefd
 8005c94:	ffde0201 	.word	0xffde0201
 8005c98:	1ffffc02 	.word	0x1ffffc02
 8005c9c:	40012708 	.word	0x40012708
 8005ca0:	ffc3ffff 	.word	0xffc3ffff
 8005ca4:	7fffff04 	.word	0x7fffff04

08005ca8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005ca8:	b590      	push	{r4, r7, lr}
 8005caa:	b08b      	sub	sp, #44	@ 0x2c
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005cb2:	2327      	movs	r3, #39	@ 0x27
 8005cb4:	18fb      	adds	r3, r7, r3
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2254      	movs	r2, #84	@ 0x54
 8005cc2:	5c9b      	ldrb	r3, [r3, r2]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d101      	bne.n	8005ccc <HAL_ADC_ConfigChannel+0x24>
 8005cc8:	2302      	movs	r3, #2
 8005cca:	e141      	b.n	8005f50 <HAL_ADC_ConfigChannel+0x2a8>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2254      	movs	r2, #84	@ 0x54
 8005cd0:	2101      	movs	r1, #1
 8005cd2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	0018      	movs	r0, r3
 8005cda:	f7ff fe2c 	bl	8005936 <LL_ADC_REG_IsConversionOngoing>
 8005cde:	1e03      	subs	r3, r0, #0
 8005ce0:	d000      	beq.n	8005ce4 <HAL_ADC_ConfigChannel+0x3c>
 8005ce2:	e124      	b.n	8005f2e <HAL_ADC_ConfigChannel+0x286>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d100      	bne.n	8005cee <HAL_ADC_ConfigChannel+0x46>
 8005cec:	e0d8      	b.n	8005ea0 <HAL_ADC_ConfigChannel+0x1f8>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	691a      	ldr	r2, [r3, #16]
 8005cf2:	2380      	movs	r3, #128	@ 0x80
 8005cf4:	061b      	lsls	r3, r3, #24
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d004      	beq.n	8005d04 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005cfe:	4a96      	ldr	r2, [pc, #600]	@ (8005f58 <HAL_ADC_ConfigChannel+0x2b0>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d108      	bne.n	8005d16 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	0019      	movs	r1, r3
 8005d0e:	0010      	movs	r0, r2
 8005d10:	f7ff fd99 	bl	8005846 <LL_ADC_REG_SetSequencerChAdd>
 8005d14:	e060      	b.n	8005dd8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	211f      	movs	r1, #31
 8005d20:	400b      	ands	r3, r1
 8005d22:	210f      	movs	r1, #15
 8005d24:	4099      	lsls	r1, r3
 8005d26:	000b      	movs	r3, r1
 8005d28:	43db      	mvns	r3, r3
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	001c      	movs	r4, r3
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	025b      	lsls	r3, r3, #9
 8005d34:	0a5b      	lsrs	r3, r3, #9
 8005d36:	d105      	bne.n	8005d44 <HAL_ADC_ConfigChannel+0x9c>
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	0e9b      	lsrs	r3, r3, #26
 8005d3e:	221f      	movs	r2, #31
 8005d40:	401a      	ands	r2, r3
 8005d42:	e02e      	b.n	8005da2 <HAL_ADC_ConfigChannel+0xfa>
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8005d4a:	231f      	movs	r3, #31
 8005d4c:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	085b      	lsrs	r3, r3, #1
 8005d56:	61bb      	str	r3, [r7, #24]
 8005d58:	e00e      	b.n	8005d78 <HAL_ADC_ConfigChannel+0xd0>
    result <<= 1U;
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	2201      	movs	r2, #1
 8005d64:	4013      	ands	r3, r2
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	613b      	str	r3, [r7, #16]
    s--;
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	085b      	lsrs	r3, r3, #1
 8005d76:	61bb      	str	r3, [r7, #24]
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1ed      	bne.n	8005d5a <HAL_ADC_ConfigChannel+0xb2>
  result <<= s;                        /* shift when v's highest bits are zero */
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	409a      	lsls	r2, r3
 8005d84:	0013      	movs	r3, r2
 8005d86:	613b      	str	r3, [r7, #16]
  return result;
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <HAL_ADC_ConfigChannel+0xee>
    return 32U;
 8005d92:	2320      	movs	r3, #32
 8005d94:	e004      	b.n	8005da0 <HAL_ADC_ConfigChannel+0xf8>
  return __builtin_clz(value);
 8005d96:	69f8      	ldr	r0, [r7, #28]
 8005d98:	f7fa fb86 	bl	80004a8 <__clzsi2>
 8005d9c:	0003      	movs	r3, r0
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	001a      	movs	r2, r3
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	211f      	movs	r1, #31
 8005da8:	400b      	ands	r3, r1
 8005daa:	409a      	lsls	r2, r3
 8005dac:	0013      	movs	r3, r2
 8005dae:	0022      	movs	r2, r4
 8005db0:	431a      	orrs	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	089b      	lsrs	r3, r3, #2
 8005dbc:	1c5a      	adds	r2, r3, #1
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d808      	bhi.n	8005dd8 <HAL_ADC_ConfigChannel+0x130>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6818      	ldr	r0, [r3, #0]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	6859      	ldr	r1, [r3, #4]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	001a      	movs	r2, r3
 8005dd4:	f7ff fd17 	bl	8005806 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6818      	ldr	r0, [r3, #0]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	6819      	ldr	r1, [r3, #0]
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	001a      	movs	r2, r3
 8005de6:	f7ff fd51 	bl	800588c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	db00      	blt.n	8005df4 <HAL_ADC_ConfigChannel+0x14c>
 8005df2:	e0a6      	b.n	8005f42 <HAL_ADC_ConfigChannel+0x29a>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005df4:	4b59      	ldr	r3, [pc, #356]	@ (8005f5c <HAL_ADC_ConfigChannel+0x2b4>)
 8005df6:	0018      	movs	r0, r3
 8005df8:	f7ff fcc4 	bl	8005784 <LL_ADC_GetCommonPathInternalCh>
 8005dfc:	0003      	movs	r3, r0
 8005dfe:	623b      	str	r3, [r7, #32]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a56      	ldr	r2, [pc, #344]	@ (8005f60 <HAL_ADC_ConfigChannel+0x2b8>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d122      	bne.n	8005e50 <HAL_ADC_ConfigChannel+0x1a8>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005e0a:	6a3a      	ldr	r2, [r7, #32]
 8005e0c:	2380      	movs	r3, #128	@ 0x80
 8005e0e:	041b      	lsls	r3, r3, #16
 8005e10:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005e12:	d11d      	bne.n	8005e50 <HAL_ADC_ConfigChannel+0x1a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005e14:	6a3b      	ldr	r3, [r7, #32]
 8005e16:	2280      	movs	r2, #128	@ 0x80
 8005e18:	0412      	lsls	r2, r2, #16
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	4a4f      	ldr	r2, [pc, #316]	@ (8005f5c <HAL_ADC_ConfigChannel+0x2b4>)
 8005e1e:	0019      	movs	r1, r3
 8005e20:	0010      	movs	r0, r2
 8005e22:	f7ff fc9b 	bl	800575c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005e26:	4b4f      	ldr	r3, [pc, #316]	@ (8005f64 <HAL_ADC_ConfigChannel+0x2bc>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	494f      	ldr	r1, [pc, #316]	@ (8005f68 <HAL_ADC_ConfigChannel+0x2c0>)
 8005e2c:	0018      	movs	r0, r3
 8005e2e:	f7fa f987 	bl	8000140 <__udivsi3>
 8005e32:	0003      	movs	r3, r0
 8005e34:	1c5a      	adds	r2, r3, #1
 8005e36:	0013      	movs	r3, r2
 8005e38:	005b      	lsls	r3, r3, #1
 8005e3a:	189b      	adds	r3, r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005e40:	e002      	b.n	8005e48 <HAL_ADC_ConfigChannel+0x1a0>
          {
            wait_loop_index--;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	3b01      	subs	r3, #1
 8005e46:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1f9      	bne.n	8005e42 <HAL_ADC_ConfigChannel+0x19a>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005e4e:	e078      	b.n	8005f42 <HAL_ADC_ConfigChannel+0x29a>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a45      	ldr	r2, [pc, #276]	@ (8005f6c <HAL_ADC_ConfigChannel+0x2c4>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d10e      	bne.n	8005e78 <HAL_ADC_ConfigChannel+0x1d0>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005e5a:	6a3a      	ldr	r2, [r7, #32]
 8005e5c:	2380      	movs	r3, #128	@ 0x80
 8005e5e:	045b      	lsls	r3, r3, #17
 8005e60:	4013      	ands	r3, r2
 8005e62:	d109      	bne.n	8005e78 <HAL_ADC_ConfigChannel+0x1d0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005e64:	6a3b      	ldr	r3, [r7, #32]
 8005e66:	2280      	movs	r2, #128	@ 0x80
 8005e68:	0452      	lsls	r2, r2, #17
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	4a3b      	ldr	r2, [pc, #236]	@ (8005f5c <HAL_ADC_ConfigChannel+0x2b4>)
 8005e6e:	0019      	movs	r1, r3
 8005e70:	0010      	movs	r0, r2
 8005e72:	f7ff fc73 	bl	800575c <LL_ADC_SetCommonPathInternalCh>
 8005e76:	e064      	b.n	8005f42 <HAL_ADC_ConfigChannel+0x29a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a3c      	ldr	r2, [pc, #240]	@ (8005f70 <HAL_ADC_ConfigChannel+0x2c8>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d15f      	bne.n	8005f42 <HAL_ADC_ConfigChannel+0x29a>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005e82:	6a3a      	ldr	r2, [r7, #32]
 8005e84:	2380      	movs	r3, #128	@ 0x80
 8005e86:	03db      	lsls	r3, r3, #15
 8005e88:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005e8a:	d15a      	bne.n	8005f42 <HAL_ADC_ConfigChannel+0x29a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005e8c:	6a3b      	ldr	r3, [r7, #32]
 8005e8e:	2280      	movs	r2, #128	@ 0x80
 8005e90:	03d2      	lsls	r2, r2, #15
 8005e92:	4313      	orrs	r3, r2
 8005e94:	4a31      	ldr	r2, [pc, #196]	@ (8005f5c <HAL_ADC_ConfigChannel+0x2b4>)
 8005e96:	0019      	movs	r1, r3
 8005e98:	0010      	movs	r0, r2
 8005e9a:	f7ff fc5f 	bl	800575c <LL_ADC_SetCommonPathInternalCh>
 8005e9e:	e050      	b.n	8005f42 <HAL_ADC_ConfigChannel+0x29a>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	691a      	ldr	r2, [r3, #16]
 8005ea4:	2380      	movs	r3, #128	@ 0x80
 8005ea6:	061b      	lsls	r3, r3, #24
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d004      	beq.n	8005eb6 <HAL_ADC_ConfigChannel+0x20e>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005eb0:	4a29      	ldr	r2, [pc, #164]	@ (8005f58 <HAL_ADC_ConfigChannel+0x2b0>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d107      	bne.n	8005ec6 <HAL_ADC_ConfigChannel+0x21e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	0019      	movs	r1, r3
 8005ec0:	0010      	movs	r0, r2
 8005ec2:	f7ff fcd1 	bl	8005868 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	da39      	bge.n	8005f42 <HAL_ADC_ConfigChannel+0x29a>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005ece:	4b23      	ldr	r3, [pc, #140]	@ (8005f5c <HAL_ADC_ConfigChannel+0x2b4>)
 8005ed0:	0018      	movs	r0, r3
 8005ed2:	f7ff fc57 	bl	8005784 <LL_ADC_GetCommonPathInternalCh>
 8005ed6:	0003      	movs	r3, r0
 8005ed8:	623b      	str	r3, [r7, #32]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a20      	ldr	r2, [pc, #128]	@ (8005f60 <HAL_ADC_ConfigChannel+0x2b8>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d108      	bne.n	8005ef6 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	4a23      	ldr	r2, [pc, #140]	@ (8005f74 <HAL_ADC_ConfigChannel+0x2cc>)
 8005ee8:	4013      	ands	r3, r2
 8005eea:	4a1c      	ldr	r2, [pc, #112]	@ (8005f5c <HAL_ADC_ConfigChannel+0x2b4>)
 8005eec:	0019      	movs	r1, r3
 8005eee:	0010      	movs	r0, r2
 8005ef0:	f7ff fc34 	bl	800575c <LL_ADC_SetCommonPathInternalCh>
 8005ef4:	e025      	b.n	8005f42 <HAL_ADC_ConfigChannel+0x29a>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a1c      	ldr	r2, [pc, #112]	@ (8005f6c <HAL_ADC_ConfigChannel+0x2c4>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d108      	bne.n	8005f12 <HAL_ADC_ConfigChannel+0x26a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	4a1d      	ldr	r2, [pc, #116]	@ (8005f78 <HAL_ADC_ConfigChannel+0x2d0>)
 8005f04:	4013      	ands	r3, r2
 8005f06:	4a15      	ldr	r2, [pc, #84]	@ (8005f5c <HAL_ADC_ConfigChannel+0x2b4>)
 8005f08:	0019      	movs	r1, r3
 8005f0a:	0010      	movs	r0, r2
 8005f0c:	f7ff fc26 	bl	800575c <LL_ADC_SetCommonPathInternalCh>
 8005f10:	e017      	b.n	8005f42 <HAL_ADC_ConfigChannel+0x29a>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a16      	ldr	r2, [pc, #88]	@ (8005f70 <HAL_ADC_ConfigChannel+0x2c8>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d112      	bne.n	8005f42 <HAL_ADC_ConfigChannel+0x29a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	4a17      	ldr	r2, [pc, #92]	@ (8005f7c <HAL_ADC_ConfigChannel+0x2d4>)
 8005f20:	4013      	ands	r3, r2
 8005f22:	4a0e      	ldr	r2, [pc, #56]	@ (8005f5c <HAL_ADC_ConfigChannel+0x2b4>)
 8005f24:	0019      	movs	r1, r3
 8005f26:	0010      	movs	r0, r2
 8005f28:	f7ff fc18 	bl	800575c <LL_ADC_SetCommonPathInternalCh>
 8005f2c:	e009      	b.n	8005f42 <HAL_ADC_ConfigChannel+0x29a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f32:	2220      	movs	r2, #32
 8005f34:	431a      	orrs	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005f3a:	2327      	movs	r3, #39	@ 0x27
 8005f3c:	18fb      	adds	r3, r7, r3
 8005f3e:	2201      	movs	r2, #1
 8005f40:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2254      	movs	r2, #84	@ 0x54
 8005f46:	2100      	movs	r1, #0
 8005f48:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8005f4a:	2327      	movs	r3, #39	@ 0x27
 8005f4c:	18fb      	adds	r3, r7, r3
 8005f4e:	781b      	ldrb	r3, [r3, #0]
}
 8005f50:	0018      	movs	r0, r3
 8005f52:	46bd      	mov	sp, r7
 8005f54:	b00b      	add	sp, #44	@ 0x2c
 8005f56:	bd90      	pop	{r4, r7, pc}
 8005f58:	80000004 	.word	0x80000004
 8005f5c:	40012708 	.word	0x40012708
 8005f60:	ac000800 	.word	0xac000800
 8005f64:	20000004 	.word	0x20000004
 8005f68:	00030d40 	.word	0x00030d40
 8005f6c:	b4002000 	.word	0xb4002000
 8005f70:	b0001000 	.word	0xb0001000
 8005f74:	ff7fffff 	.word	0xff7fffff
 8005f78:	feffffff 	.word	0xfeffffff
 8005f7c:	ffbfffff 	.word	0xffbfffff

08005f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f80:	b590      	push	{r4, r7, lr}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	0002      	movs	r2, r0
 8005f88:	6039      	str	r1, [r7, #0]
 8005f8a:	1dfb      	adds	r3, r7, #7
 8005f8c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005f8e:	1dfb      	adds	r3, r7, #7
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f94:	d828      	bhi.n	8005fe8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005f96:	4a2f      	ldr	r2, [pc, #188]	@ (8006054 <__NVIC_SetPriority+0xd4>)
 8005f98:	1dfb      	adds	r3, r7, #7
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	b25b      	sxtb	r3, r3
 8005f9e:	089b      	lsrs	r3, r3, #2
 8005fa0:	33c0      	adds	r3, #192	@ 0xc0
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	589b      	ldr	r3, [r3, r2]
 8005fa6:	1dfa      	adds	r2, r7, #7
 8005fa8:	7812      	ldrb	r2, [r2, #0]
 8005faa:	0011      	movs	r1, r2
 8005fac:	2203      	movs	r2, #3
 8005fae:	400a      	ands	r2, r1
 8005fb0:	00d2      	lsls	r2, r2, #3
 8005fb2:	21ff      	movs	r1, #255	@ 0xff
 8005fb4:	4091      	lsls	r1, r2
 8005fb6:	000a      	movs	r2, r1
 8005fb8:	43d2      	mvns	r2, r2
 8005fba:	401a      	ands	r2, r3
 8005fbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	019b      	lsls	r3, r3, #6
 8005fc2:	22ff      	movs	r2, #255	@ 0xff
 8005fc4:	401a      	ands	r2, r3
 8005fc6:	1dfb      	adds	r3, r7, #7
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	0018      	movs	r0, r3
 8005fcc:	2303      	movs	r3, #3
 8005fce:	4003      	ands	r3, r0
 8005fd0:	00db      	lsls	r3, r3, #3
 8005fd2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005fd4:	481f      	ldr	r0, [pc, #124]	@ (8006054 <__NVIC_SetPriority+0xd4>)
 8005fd6:	1dfb      	adds	r3, r7, #7
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	b25b      	sxtb	r3, r3
 8005fdc:	089b      	lsrs	r3, r3, #2
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	33c0      	adds	r3, #192	@ 0xc0
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005fe6:	e031      	b.n	800604c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005fe8:	4a1b      	ldr	r2, [pc, #108]	@ (8006058 <__NVIC_SetPriority+0xd8>)
 8005fea:	1dfb      	adds	r3, r7, #7
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	0019      	movs	r1, r3
 8005ff0:	230f      	movs	r3, #15
 8005ff2:	400b      	ands	r3, r1
 8005ff4:	3b08      	subs	r3, #8
 8005ff6:	089b      	lsrs	r3, r3, #2
 8005ff8:	3306      	adds	r3, #6
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	18d3      	adds	r3, r2, r3
 8005ffe:	3304      	adds	r3, #4
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	1dfa      	adds	r2, r7, #7
 8006004:	7812      	ldrb	r2, [r2, #0]
 8006006:	0011      	movs	r1, r2
 8006008:	2203      	movs	r2, #3
 800600a:	400a      	ands	r2, r1
 800600c:	00d2      	lsls	r2, r2, #3
 800600e:	21ff      	movs	r1, #255	@ 0xff
 8006010:	4091      	lsls	r1, r2
 8006012:	000a      	movs	r2, r1
 8006014:	43d2      	mvns	r2, r2
 8006016:	401a      	ands	r2, r3
 8006018:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	019b      	lsls	r3, r3, #6
 800601e:	22ff      	movs	r2, #255	@ 0xff
 8006020:	401a      	ands	r2, r3
 8006022:	1dfb      	adds	r3, r7, #7
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	0018      	movs	r0, r3
 8006028:	2303      	movs	r3, #3
 800602a:	4003      	ands	r3, r0
 800602c:	00db      	lsls	r3, r3, #3
 800602e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006030:	4809      	ldr	r0, [pc, #36]	@ (8006058 <__NVIC_SetPriority+0xd8>)
 8006032:	1dfb      	adds	r3, r7, #7
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	001c      	movs	r4, r3
 8006038:	230f      	movs	r3, #15
 800603a:	4023      	ands	r3, r4
 800603c:	3b08      	subs	r3, #8
 800603e:	089b      	lsrs	r3, r3, #2
 8006040:	430a      	orrs	r2, r1
 8006042:	3306      	adds	r3, #6
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	18c3      	adds	r3, r0, r3
 8006048:	3304      	adds	r3, #4
 800604a:	601a      	str	r2, [r3, #0]
}
 800604c:	46c0      	nop			@ (mov r8, r8)
 800604e:	46bd      	mov	sp, r7
 8006050:	b003      	add	sp, #12
 8006052:	bd90      	pop	{r4, r7, pc}
 8006054:	e000e100 	.word	0xe000e100
 8006058:	e000ed00 	.word	0xe000ed00

0800605c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	1e5a      	subs	r2, r3, #1
 8006068:	2380      	movs	r3, #128	@ 0x80
 800606a:	045b      	lsls	r3, r3, #17
 800606c:	429a      	cmp	r2, r3
 800606e:	d301      	bcc.n	8006074 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006070:	2301      	movs	r3, #1
 8006072:	e010      	b.n	8006096 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006074:	4b0a      	ldr	r3, [pc, #40]	@ (80060a0 <SysTick_Config+0x44>)
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	3a01      	subs	r2, #1
 800607a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800607c:	2301      	movs	r3, #1
 800607e:	425b      	negs	r3, r3
 8006080:	2103      	movs	r1, #3
 8006082:	0018      	movs	r0, r3
 8006084:	f7ff ff7c 	bl	8005f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006088:	4b05      	ldr	r3, [pc, #20]	@ (80060a0 <SysTick_Config+0x44>)
 800608a:	2200      	movs	r2, #0
 800608c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800608e:	4b04      	ldr	r3, [pc, #16]	@ (80060a0 <SysTick_Config+0x44>)
 8006090:	2207      	movs	r2, #7
 8006092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006094:	2300      	movs	r3, #0
}
 8006096:	0018      	movs	r0, r3
 8006098:	46bd      	mov	sp, r7
 800609a:	b002      	add	sp, #8
 800609c:	bd80      	pop	{r7, pc}
 800609e:	46c0      	nop			@ (mov r8, r8)
 80060a0:	e000e010 	.word	0xe000e010

080060a4 <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60b9      	str	r1, [r7, #8]
 80060ac:	607a      	str	r2, [r7, #4]
 80060ae:	210f      	movs	r1, #15
 80060b0:	187b      	adds	r3, r7, r1
 80060b2:	1c02      	adds	r2, r0, #0
 80060b4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	187b      	adds	r3, r7, r1
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	b25b      	sxtb	r3, r3
 80060be:	0011      	movs	r1, r2
 80060c0:	0018      	movs	r0, r3
 80060c2:	f7ff ff5d 	bl	8005f80 <__NVIC_SetPriority>
}
 80060c6:	46c0      	nop			@ (mov r8, r8)
 80060c8:	46bd      	mov	sp, r7
 80060ca:	b004      	add	sp, #16
 80060cc:	bd80      	pop	{r7, pc}

080060ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b082      	sub	sp, #8
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	0018      	movs	r0, r3
 80060da:	f7ff ffbf 	bl	800605c <SysTick_Config>
 80060de:	0003      	movs	r3, r0
}
 80060e0:	0018      	movs	r0, r3
 80060e2:	46bd      	mov	sp, r7
 80060e4:	b002      	add	sp, #8
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80060f2:	2300      	movs	r3, #0
 80060f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80060f6:	e153      	b.n	80063a0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2101      	movs	r1, #1
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	4091      	lsls	r1, r2
 8006102:	000a      	movs	r2, r1
 8006104:	4013      	ands	r3, r2
 8006106:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d100      	bne.n	8006110 <HAL_GPIO_Init+0x28>
 800610e:	e144      	b.n	800639a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	2203      	movs	r2, #3
 8006116:	4013      	ands	r3, r2
 8006118:	2b01      	cmp	r3, #1
 800611a:	d005      	beq.n	8006128 <HAL_GPIO_Init+0x40>
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	2203      	movs	r2, #3
 8006122:	4013      	ands	r3, r2
 8006124:	2b02      	cmp	r3, #2
 8006126:	d130      	bne.n	800618a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	005b      	lsls	r3, r3, #1
 8006132:	2203      	movs	r2, #3
 8006134:	409a      	lsls	r2, r3
 8006136:	0013      	movs	r3, r2
 8006138:	43da      	mvns	r2, r3
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	4013      	ands	r3, r2
 800613e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	68da      	ldr	r2, [r3, #12]
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	005b      	lsls	r3, r3, #1
 8006148:	409a      	lsls	r2, r3
 800614a:	0013      	movs	r3, r2
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	4313      	orrs	r3, r2
 8006150:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800615e:	2201      	movs	r2, #1
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	409a      	lsls	r2, r3
 8006164:	0013      	movs	r3, r2
 8006166:	43da      	mvns	r2, r3
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	4013      	ands	r3, r2
 800616c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	091b      	lsrs	r3, r3, #4
 8006174:	2201      	movs	r2, #1
 8006176:	401a      	ands	r2, r3
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	409a      	lsls	r2, r3
 800617c:	0013      	movs	r3, r2
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	4313      	orrs	r3, r2
 8006182:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	2203      	movs	r2, #3
 8006190:	4013      	ands	r3, r2
 8006192:	2b03      	cmp	r3, #3
 8006194:	d017      	beq.n	80061c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	005b      	lsls	r3, r3, #1
 80061a0:	2203      	movs	r2, #3
 80061a2:	409a      	lsls	r2, r3
 80061a4:	0013      	movs	r3, r2
 80061a6:	43da      	mvns	r2, r3
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	4013      	ands	r3, r2
 80061ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	689a      	ldr	r2, [r3, #8]
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	409a      	lsls	r2, r3
 80061b8:	0013      	movs	r3, r2
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	4313      	orrs	r3, r2
 80061be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	2203      	movs	r2, #3
 80061cc:	4013      	ands	r3, r2
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d123      	bne.n	800621a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	08da      	lsrs	r2, r3, #3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	3208      	adds	r2, #8
 80061da:	0092      	lsls	r2, r2, #2
 80061dc:	58d3      	ldr	r3, [r2, r3]
 80061de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	2207      	movs	r2, #7
 80061e4:	4013      	ands	r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	220f      	movs	r2, #15
 80061ea:	409a      	lsls	r2, r3
 80061ec:	0013      	movs	r3, r2
 80061ee:	43da      	mvns	r2, r3
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	4013      	ands	r3, r2
 80061f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	691a      	ldr	r2, [r3, #16]
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	2107      	movs	r1, #7
 80061fe:	400b      	ands	r3, r1
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	409a      	lsls	r2, r3
 8006204:	0013      	movs	r3, r2
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	4313      	orrs	r3, r2
 800620a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	08da      	lsrs	r2, r3, #3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	3208      	adds	r2, #8
 8006214:	0092      	lsls	r2, r2, #2
 8006216:	6939      	ldr	r1, [r7, #16]
 8006218:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	2203      	movs	r2, #3
 8006226:	409a      	lsls	r2, r3
 8006228:	0013      	movs	r3, r2
 800622a:	43da      	mvns	r2, r3
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	4013      	ands	r3, r2
 8006230:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	2203      	movs	r2, #3
 8006238:	401a      	ands	r2, r3
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	005b      	lsls	r3, r3, #1
 800623e:	409a      	lsls	r2, r3
 8006240:	0013      	movs	r3, r2
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	4313      	orrs	r3, r2
 8006246:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	685a      	ldr	r2, [r3, #4]
 8006252:	23c0      	movs	r3, #192	@ 0xc0
 8006254:	029b      	lsls	r3, r3, #10
 8006256:	4013      	ands	r3, r2
 8006258:	d100      	bne.n	800625c <HAL_GPIO_Init+0x174>
 800625a:	e09e      	b.n	800639a <HAL_GPIO_Init+0x2b2>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800625c:	4a56      	ldr	r2, [pc, #344]	@ (80063b8 <HAL_GPIO_Init+0x2d0>)
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	089b      	lsrs	r3, r3, #2
 8006262:	3318      	adds	r3, #24
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	589b      	ldr	r3, [r3, r2]
 8006268:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	2203      	movs	r2, #3
 800626e:	4013      	ands	r3, r2
 8006270:	00db      	lsls	r3, r3, #3
 8006272:	220f      	movs	r2, #15
 8006274:	409a      	lsls	r2, r3
 8006276:	0013      	movs	r3, r2
 8006278:	43da      	mvns	r2, r3
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	4013      	ands	r3, r2
 800627e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	23a0      	movs	r3, #160	@ 0xa0
 8006284:	05db      	lsls	r3, r3, #23
 8006286:	429a      	cmp	r2, r3
 8006288:	d01f      	beq.n	80062ca <HAL_GPIO_Init+0x1e2>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a4b      	ldr	r2, [pc, #300]	@ (80063bc <HAL_GPIO_Init+0x2d4>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d019      	beq.n	80062c6 <HAL_GPIO_Init+0x1de>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a4a      	ldr	r2, [pc, #296]	@ (80063c0 <HAL_GPIO_Init+0x2d8>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d013      	beq.n	80062c2 <HAL_GPIO_Init+0x1da>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a49      	ldr	r2, [pc, #292]	@ (80063c4 <HAL_GPIO_Init+0x2dc>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d00d      	beq.n	80062be <HAL_GPIO_Init+0x1d6>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a48      	ldr	r2, [pc, #288]	@ (80063c8 <HAL_GPIO_Init+0x2e0>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d007      	beq.n	80062ba <HAL_GPIO_Init+0x1d2>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a47      	ldr	r2, [pc, #284]	@ (80063cc <HAL_GPIO_Init+0x2e4>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d101      	bne.n	80062b6 <HAL_GPIO_Init+0x1ce>
 80062b2:	2305      	movs	r3, #5
 80062b4:	e00a      	b.n	80062cc <HAL_GPIO_Init+0x1e4>
 80062b6:	2306      	movs	r3, #6
 80062b8:	e008      	b.n	80062cc <HAL_GPIO_Init+0x1e4>
 80062ba:	2304      	movs	r3, #4
 80062bc:	e006      	b.n	80062cc <HAL_GPIO_Init+0x1e4>
 80062be:	2303      	movs	r3, #3
 80062c0:	e004      	b.n	80062cc <HAL_GPIO_Init+0x1e4>
 80062c2:	2302      	movs	r3, #2
 80062c4:	e002      	b.n	80062cc <HAL_GPIO_Init+0x1e4>
 80062c6:	2301      	movs	r3, #1
 80062c8:	e000      	b.n	80062cc <HAL_GPIO_Init+0x1e4>
 80062ca:	2300      	movs	r3, #0
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	2103      	movs	r1, #3
 80062d0:	400a      	ands	r2, r1
 80062d2:	00d2      	lsls	r2, r2, #3
 80062d4:	4093      	lsls	r3, r2
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	4313      	orrs	r3, r2
 80062da:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80062dc:	4936      	ldr	r1, [pc, #216]	@ (80063b8 <HAL_GPIO_Init+0x2d0>)
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	089b      	lsrs	r3, r3, #2
 80062e2:	3318      	adds	r3, #24
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80062ea:	4b33      	ldr	r3, [pc, #204]	@ (80063b8 <HAL_GPIO_Init+0x2d0>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	43da      	mvns	r2, r3
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	4013      	ands	r3, r2
 80062f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	685a      	ldr	r2, [r3, #4]
 80062fe:	2380      	movs	r3, #128	@ 0x80
 8006300:	035b      	lsls	r3, r3, #13
 8006302:	4013      	ands	r3, r2
 8006304:	d003      	beq.n	800630e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	4313      	orrs	r3, r2
 800630c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800630e:	4b2a      	ldr	r3, [pc, #168]	@ (80063b8 <HAL_GPIO_Init+0x2d0>)
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8006314:	4b28      	ldr	r3, [pc, #160]	@ (80063b8 <HAL_GPIO_Init+0x2d0>)
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	43da      	mvns	r2, r3
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	4013      	ands	r3, r2
 8006322:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	2380      	movs	r3, #128	@ 0x80
 800632a:	039b      	lsls	r3, r3, #14
 800632c:	4013      	ands	r3, r2
 800632e:	d003      	beq.n	8006338 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	4313      	orrs	r3, r2
 8006336:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006338:	4b1f      	ldr	r3, [pc, #124]	@ (80063b8 <HAL_GPIO_Init+0x2d0>)
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800633e:	4a1e      	ldr	r2, [pc, #120]	@ (80063b8 <HAL_GPIO_Init+0x2d0>)
 8006340:	2384      	movs	r3, #132	@ 0x84
 8006342:	58d3      	ldr	r3, [r2, r3]
 8006344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	43da      	mvns	r2, r3
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	4013      	ands	r3, r2
 800634e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	2380      	movs	r3, #128	@ 0x80
 8006356:	029b      	lsls	r3, r3, #10
 8006358:	4013      	ands	r3, r2
 800635a:	d003      	beq.n	8006364 <HAL_GPIO_Init+0x27c>
        {
          temp |= iocurrent;
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4313      	orrs	r3, r2
 8006362:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006364:	4914      	ldr	r1, [pc, #80]	@ (80063b8 <HAL_GPIO_Init+0x2d0>)
 8006366:	2284      	movs	r2, #132	@ 0x84
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800636c:	4a12      	ldr	r2, [pc, #72]	@ (80063b8 <HAL_GPIO_Init+0x2d0>)
 800636e:	2380      	movs	r3, #128	@ 0x80
 8006370:	58d3      	ldr	r3, [r2, r3]
 8006372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	43da      	mvns	r2, r3
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	4013      	ands	r3, r2
 800637c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	2380      	movs	r3, #128	@ 0x80
 8006384:	025b      	lsls	r3, r3, #9
 8006386:	4013      	ands	r3, r2
 8006388:	d003      	beq.n	8006392 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	4313      	orrs	r3, r2
 8006390:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006392:	4909      	ldr	r1, [pc, #36]	@ (80063b8 <HAL_GPIO_Init+0x2d0>)
 8006394:	2280      	movs	r2, #128	@ 0x80
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	3301      	adds	r3, #1
 800639e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	40da      	lsrs	r2, r3
 80063a8:	1e13      	subs	r3, r2, #0
 80063aa:	d000      	beq.n	80063ae <HAL_GPIO_Init+0x2c6>
 80063ac:	e6a4      	b.n	80060f8 <HAL_GPIO_Init+0x10>
  }
}
 80063ae:	46c0      	nop			@ (mov r8, r8)
 80063b0:	46c0      	nop			@ (mov r8, r8)
 80063b2:	46bd      	mov	sp, r7
 80063b4:	b006      	add	sp, #24
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	40021800 	.word	0x40021800
 80063bc:	50000400 	.word	0x50000400
 80063c0:	50000800 	.word	0x50000800
 80063c4:	50000c00 	.word	0x50000c00
 80063c8:	50001000 	.word	0x50001000
 80063cc:	50001400 	.word	0x50001400

080063d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	0008      	movs	r0, r1
 80063da:	0011      	movs	r1, r2
 80063dc:	1cbb      	adds	r3, r7, #2
 80063de:	1c02      	adds	r2, r0, #0
 80063e0:	801a      	strh	r2, [r3, #0]
 80063e2:	1c7b      	adds	r3, r7, #1
 80063e4:	1c0a      	adds	r2, r1, #0
 80063e6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80063e8:	1c7b      	adds	r3, r7, #1
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d004      	beq.n	80063fa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80063f0:	1cbb      	adds	r3, r7, #2
 80063f2:	881a      	ldrh	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80063f8:	e003      	b.n	8006402 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80063fa:	1cbb      	adds	r3, r7, #2
 80063fc:	881a      	ldrh	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006402:	46c0      	nop			@ (mov r8, r8)
 8006404:	46bd      	mov	sp, r7
 8006406:	b002      	add	sp, #8
 8006408:	bd80      	pop	{r7, pc}
	...

0800640c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e08f      	b.n	800653e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2241      	movs	r2, #65	@ 0x41
 8006422:	5c9b      	ldrb	r3, [r3, r2]
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d107      	bne.n	800643a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2240      	movs	r2, #64	@ 0x40
 800642e:	2100      	movs	r1, #0
 8006430:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	0018      	movs	r0, r3
 8006436:	f7fd f875 	bl	8003524 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2241      	movs	r2, #65	@ 0x41
 800643e:	2124      	movs	r1, #36	@ 0x24
 8006440:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2101      	movs	r1, #1
 800644e:	438a      	bics	r2, r1
 8006450:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	493b      	ldr	r1, [pc, #236]	@ (8006548 <HAL_I2C_Init+0x13c>)
 800645c:	400a      	ands	r2, r1
 800645e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	689a      	ldr	r2, [r3, #8]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4938      	ldr	r1, [pc, #224]	@ (800654c <HAL_I2C_Init+0x140>)
 800646c:	400a      	ands	r2, r1
 800646e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d108      	bne.n	800648a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2180      	movs	r1, #128	@ 0x80
 8006482:	0209      	lsls	r1, r1, #8
 8006484:	430a      	orrs	r2, r1
 8006486:	609a      	str	r2, [r3, #8]
 8006488:	e007      	b.n	800649a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	689a      	ldr	r2, [r3, #8]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2184      	movs	r1, #132	@ 0x84
 8006494:	0209      	lsls	r1, r1, #8
 8006496:	430a      	orrs	r2, r1
 8006498:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d109      	bne.n	80064b6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	685a      	ldr	r2, [r3, #4]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2180      	movs	r1, #128	@ 0x80
 80064ae:	0109      	lsls	r1, r1, #4
 80064b0:	430a      	orrs	r2, r1
 80064b2:	605a      	str	r2, [r3, #4]
 80064b4:	e007      	b.n	80064c6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4923      	ldr	r1, [pc, #140]	@ (8006550 <HAL_I2C_Init+0x144>)
 80064c2:	400a      	ands	r2, r1
 80064c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4920      	ldr	r1, [pc, #128]	@ (8006554 <HAL_I2C_Init+0x148>)
 80064d2:	430a      	orrs	r2, r1
 80064d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68da      	ldr	r2, [r3, #12]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	491a      	ldr	r1, [pc, #104]	@ (800654c <HAL_I2C_Init+0x140>)
 80064e2:	400a      	ands	r2, r1
 80064e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	691a      	ldr	r2, [r3, #16]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	431a      	orrs	r2, r3
 80064f0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	430a      	orrs	r2, r1
 80064fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	69d9      	ldr	r1, [r3, #28]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a1a      	ldr	r2, [r3, #32]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	430a      	orrs	r2, r1
 800650e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2101      	movs	r1, #1
 800651c:	430a      	orrs	r2, r1
 800651e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2241      	movs	r2, #65	@ 0x41
 800652a:	2120      	movs	r1, #32
 800652c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2242      	movs	r2, #66	@ 0x42
 8006538:	2100      	movs	r1, #0
 800653a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	0018      	movs	r0, r3
 8006540:	46bd      	mov	sp, r7
 8006542:	b002      	add	sp, #8
 8006544:	bd80      	pop	{r7, pc}
 8006546:	46c0      	nop			@ (mov r8, r8)
 8006548:	f0ffffff 	.word	0xf0ffffff
 800654c:	ffff7fff 	.word	0xffff7fff
 8006550:	fffff7ff 	.word	0xfffff7ff
 8006554:	02008000 	.word	0x02008000

08006558 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2241      	movs	r2, #65	@ 0x41
 8006566:	5c9b      	ldrb	r3, [r3, r2]
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b20      	cmp	r3, #32
 800656c:	d138      	bne.n	80065e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2240      	movs	r2, #64	@ 0x40
 8006572:	5c9b      	ldrb	r3, [r3, r2]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d101      	bne.n	800657c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006578:	2302      	movs	r3, #2
 800657a:	e032      	b.n	80065e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2240      	movs	r2, #64	@ 0x40
 8006580:	2101      	movs	r1, #1
 8006582:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2241      	movs	r2, #65	@ 0x41
 8006588:	2124      	movs	r1, #36	@ 0x24
 800658a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2101      	movs	r1, #1
 8006598:	438a      	bics	r2, r1
 800659a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4911      	ldr	r1, [pc, #68]	@ (80065ec <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80065a8:	400a      	ands	r2, r1
 80065aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6819      	ldr	r1, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	683a      	ldr	r2, [r7, #0]
 80065b8:	430a      	orrs	r2, r1
 80065ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2101      	movs	r1, #1
 80065c8:	430a      	orrs	r2, r1
 80065ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2241      	movs	r2, #65	@ 0x41
 80065d0:	2120      	movs	r1, #32
 80065d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2240      	movs	r2, #64	@ 0x40
 80065d8:	2100      	movs	r1, #0
 80065da:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80065dc:	2300      	movs	r3, #0
 80065de:	e000      	b.n	80065e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80065e0:	2302      	movs	r3, #2
  }
}
 80065e2:	0018      	movs	r0, r3
 80065e4:	46bd      	mov	sp, r7
 80065e6:	b002      	add	sp, #8
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	46c0      	nop			@ (mov r8, r8)
 80065ec:	ffffefff 	.word	0xffffefff

080065f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2241      	movs	r2, #65	@ 0x41
 80065fe:	5c9b      	ldrb	r3, [r3, r2]
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b20      	cmp	r3, #32
 8006604:	d139      	bne.n	800667a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2240      	movs	r2, #64	@ 0x40
 800660a:	5c9b      	ldrb	r3, [r3, r2]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d101      	bne.n	8006614 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006610:	2302      	movs	r3, #2
 8006612:	e033      	b.n	800667c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2240      	movs	r2, #64	@ 0x40
 8006618:	2101      	movs	r1, #1
 800661a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2241      	movs	r2, #65	@ 0x41
 8006620:	2124      	movs	r1, #36	@ 0x24
 8006622:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2101      	movs	r1, #1
 8006630:	438a      	bics	r2, r1
 8006632:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4a11      	ldr	r2, [pc, #68]	@ (8006684 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006640:	4013      	ands	r3, r2
 8006642:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	021b      	lsls	r3, r3, #8
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	4313      	orrs	r3, r2
 800664c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2101      	movs	r1, #1
 8006662:	430a      	orrs	r2, r1
 8006664:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2241      	movs	r2, #65	@ 0x41
 800666a:	2120      	movs	r1, #32
 800666c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2240      	movs	r2, #64	@ 0x40
 8006672:	2100      	movs	r1, #0
 8006674:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006676:	2300      	movs	r3, #0
 8006678:	e000      	b.n	800667c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800667a:	2302      	movs	r3, #2
  }
}
 800667c:	0018      	movs	r0, r3
 800667e:	46bd      	mov	sp, r7
 8006680:	b004      	add	sp, #16
 8006682:	bd80      	pop	{r7, pc}
 8006684:	fffff0ff 	.word	0xfffff0ff

08006688 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	2380      	movs	r3, #128	@ 0x80
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	429a      	cmp	r2, r3
 8006698:	d137      	bne.n	800670a <HAL_PWREx_ControlVoltageScaling+0x82>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800669a:	4b27      	ldr	r3, [pc, #156]	@ (8006738 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	23c0      	movs	r3, #192	@ 0xc0
 80066a0:	00db      	lsls	r3, r3, #3
 80066a2:	401a      	ands	r2, r3
 80066a4:	2380      	movs	r3, #128	@ 0x80
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d040      	beq.n	800672e <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80066ac:	4b22      	ldr	r3, [pc, #136]	@ (8006738 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a22      	ldr	r2, [pc, #136]	@ (800673c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80066b2:	401a      	ands	r2, r3
 80066b4:	4b20      	ldr	r3, [pc, #128]	@ (8006738 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80066b6:	2180      	movs	r1, #128	@ 0x80
 80066b8:	0089      	lsls	r1, r1, #2
 80066ba:	430a      	orrs	r2, r1
 80066bc:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80066be:	4b20      	ldr	r3, [pc, #128]	@ (8006740 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2232      	movs	r2, #50	@ 0x32
 80066c4:	4353      	muls	r3, r2
 80066c6:	491f      	ldr	r1, [pc, #124]	@ (8006744 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 80066c8:	0018      	movs	r0, r3
 80066ca:	f7f9 fd39 	bl	8000140 <__udivsi3>
 80066ce:	0003      	movs	r3, r0
 80066d0:	3301      	adds	r3, #1
 80066d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80066d4:	e002      	b.n	80066dc <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        wait_loop_index--;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	3b01      	subs	r3, #1
 80066da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80066dc:	4b16      	ldr	r3, [pc, #88]	@ (8006738 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80066de:	695a      	ldr	r2, [r3, #20]
 80066e0:	2380      	movs	r3, #128	@ 0x80
 80066e2:	00db      	lsls	r3, r3, #3
 80066e4:	401a      	ands	r2, r3
 80066e6:	2380      	movs	r3, #128	@ 0x80
 80066e8:	00db      	lsls	r3, r3, #3
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d102      	bne.n	80066f4 <HAL_PWREx_ControlVoltageScaling+0x6c>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1f0      	bne.n	80066d6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80066f4:	4b10      	ldr	r3, [pc, #64]	@ (8006738 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80066f6:	695a      	ldr	r2, [r3, #20]
 80066f8:	2380      	movs	r3, #128	@ 0x80
 80066fa:	00db      	lsls	r3, r3, #3
 80066fc:	401a      	ands	r2, r3
 80066fe:	2380      	movs	r3, #128	@ 0x80
 8006700:	00db      	lsls	r3, r3, #3
 8006702:	429a      	cmp	r2, r3
 8006704:	d113      	bne.n	800672e <HAL_PWREx_ControlVoltageScaling+0xa6>
      {
        return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e012      	b.n	8006730 <HAL_PWREx_ControlVoltageScaling+0xa8>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800670a:	4b0b      	ldr	r3, [pc, #44]	@ (8006738 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	23c0      	movs	r3, #192	@ 0xc0
 8006710:	00db      	lsls	r3, r3, #3
 8006712:	401a      	ands	r2, r3
 8006714:	2380      	movs	r3, #128	@ 0x80
 8006716:	00db      	lsls	r3, r3, #3
 8006718:	429a      	cmp	r2, r3
 800671a:	d008      	beq.n	800672e <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800671c:	4b06      	ldr	r3, [pc, #24]	@ (8006738 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a06      	ldr	r2, [pc, #24]	@ (800673c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8006722:	401a      	ands	r2, r3
 8006724:	4b04      	ldr	r3, [pc, #16]	@ (8006738 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006726:	2180      	movs	r1, #128	@ 0x80
 8006728:	00c9      	lsls	r1, r1, #3
 800672a:	430a      	orrs	r2, r1
 800672c:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	0018      	movs	r0, r3
 8006732:	46bd      	mov	sp, r7
 8006734:	b004      	add	sp, #16
 8006736:	bd80      	pop	{r7, pc}
 8006738:	40007000 	.word	0x40007000
 800673c:	fffff9ff 	.word	0xfffff9ff
 8006740:	20000004 	.word	0x20000004
 8006744:	000f4240 	.word	0x000f4240

08006748 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800674c:	4b03      	ldr	r3, [pc, #12]	@ (800675c <HAL_PWREx_GetVoltageRange+0x14>)
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	23c0      	movs	r3, #192	@ 0xc0
 8006752:	00db      	lsls	r3, r3, #3
 8006754:	4013      	ands	r3, r2
}
 8006756:	0018      	movs	r0, r3
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	40007000 	.word	0x40007000

08006760 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006760:	b5b0      	push	{r4, r5, r7, lr}
 8006762:	b088      	sub	sp, #32
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006768:	4bc9      	ldr	r3, [pc, #804]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	2238      	movs	r2, #56	@ 0x38
 800676e:	4013      	ands	r3, r2
 8006770:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006772:	4bc7      	ldr	r3, [pc, #796]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	2203      	movs	r2, #3
 8006778:	4013      	ands	r3, r2
 800677a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2210      	movs	r2, #16
 8006782:	4013      	ands	r3, r2
 8006784:	d100      	bne.n	8006788 <HAL_RCC_OscConfig+0x28>
 8006786:	e0ef      	b.n	8006968 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d007      	beq.n	800679e <HAL_RCC_OscConfig+0x3e>
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	2b18      	cmp	r3, #24
 8006792:	d000      	beq.n	8006796 <HAL_RCC_OscConfig+0x36>
 8006794:	e093      	b.n	80068be <HAL_RCC_OscConfig+0x15e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	2b01      	cmp	r3, #1
 800679a:	d000      	beq.n	800679e <HAL_RCC_OscConfig+0x3e>
 800679c:	e08f      	b.n	80068be <HAL_RCC_OscConfig+0x15e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800679e:	4bbc      	ldr	r3, [pc, #752]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2202      	movs	r2, #2
 80067a4:	4013      	ands	r3, r2
 80067a6:	d006      	beq.n	80067b6 <HAL_RCC_OscConfig+0x56>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	69db      	ldr	r3, [r3, #28]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d102      	bne.n	80067b6 <HAL_RCC_OscConfig+0x56>
      {
        return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	f000 fbf2 	bl	8006f9a <HAL_RCC_OscConfig+0x83a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067ba:	4bb5      	ldr	r3, [pc, #724]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2108      	movs	r1, #8
 80067c0:	400b      	ands	r3, r1
 80067c2:	d004      	beq.n	80067ce <HAL_RCC_OscConfig+0x6e>
 80067c4:	4bb2      	ldr	r3, [pc, #712]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	21f0      	movs	r1, #240	@ 0xf0
 80067ca:	400b      	ands	r3, r1
 80067cc:	e005      	b.n	80067da <HAL_RCC_OscConfig+0x7a>
 80067ce:	49b0      	ldr	r1, [pc, #704]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 80067d0:	2394      	movs	r3, #148	@ 0x94
 80067d2:	58cb      	ldr	r3, [r1, r3]
 80067d4:	091b      	lsrs	r3, r3, #4
 80067d6:	21f0      	movs	r1, #240	@ 0xf0
 80067d8:	400b      	ands	r3, r1
 80067da:	4293      	cmp	r3, r2
 80067dc:	d225      	bcs.n	800682a <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e2:	0018      	movs	r0, r3
 80067e4:	f000 fd90 	bl	8007308 <RCC_SetFlashLatencyFromMSIRange>
 80067e8:	1e03      	subs	r3, r0, #0
 80067ea:	d002      	beq.n	80067f2 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	f000 fbd4 	bl	8006f9a <HAL_RCC_OscConfig+0x83a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80067f2:	4ba7      	ldr	r3, [pc, #668]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	4ba6      	ldr	r3, [pc, #664]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 80067f8:	2108      	movs	r1, #8
 80067fa:	430a      	orrs	r2, r1
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	4ba4      	ldr	r3, [pc, #656]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	22f0      	movs	r2, #240	@ 0xf0
 8006804:	4393      	bics	r3, r2
 8006806:	0019      	movs	r1, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800680c:	4ba0      	ldr	r3, [pc, #640]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 800680e:	430a      	orrs	r2, r1
 8006810:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006812:	4b9f      	ldr	r3, [pc, #636]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	4a9f      	ldr	r2, [pc, #636]	@ (8006a94 <HAL_RCC_OscConfig+0x334>)
 8006818:	4013      	ands	r3, r2
 800681a:	0019      	movs	r1, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a1b      	ldr	r3, [r3, #32]
 8006820:	021a      	lsls	r2, r3, #8
 8006822:	4b9b      	ldr	r3, [pc, #620]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 8006824:	430a      	orrs	r2, r1
 8006826:	605a      	str	r2, [r3, #4]
 8006828:	e027      	b.n	800687a <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800682a:	4b99      	ldr	r3, [pc, #612]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	4b98      	ldr	r3, [pc, #608]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 8006830:	2108      	movs	r1, #8
 8006832:	430a      	orrs	r2, r1
 8006834:	601a      	str	r2, [r3, #0]
 8006836:	4b96      	ldr	r3, [pc, #600]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	22f0      	movs	r2, #240	@ 0xf0
 800683c:	4393      	bics	r3, r2
 800683e:	0019      	movs	r1, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006844:	4b92      	ldr	r3, [pc, #584]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 8006846:	430a      	orrs	r2, r1
 8006848:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800684a:	4b91      	ldr	r3, [pc, #580]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	4a91      	ldr	r2, [pc, #580]	@ (8006a94 <HAL_RCC_OscConfig+0x334>)
 8006850:	4013      	ands	r3, r2
 8006852:	0019      	movs	r1, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a1b      	ldr	r3, [r3, #32]
 8006858:	021a      	lsls	r2, r3, #8
 800685a:	4b8d      	ldr	r3, [pc, #564]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 800685c:	430a      	orrs	r2, r1
 800685e:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d109      	bne.n	800687a <HAL_RCC_OscConfig+0x11a>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800686a:	0018      	movs	r0, r3
 800686c:	f000 fd4c 	bl	8007308 <RCC_SetFlashLatencyFromMSIRange>
 8006870:	1e03      	subs	r3, r0, #0
 8006872:	d002      	beq.n	800687a <HAL_RCC_OscConfig+0x11a>
            {
              return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	f000 fb90 	bl	8006f9a <HAL_RCC_OscConfig+0x83a>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 800687a:	f000 fc87 	bl	800718c <HAL_RCC_GetSysClockFreq>
 800687e:	0001      	movs	r1, r0
 8006880:	4b83      	ldr	r3, [pc, #524]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 8006882:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006884:	0a1b      	lsrs	r3, r3, #8
 8006886:	220f      	movs	r2, #15
 8006888:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 800688a:	4a83      	ldr	r2, [pc, #524]	@ (8006a98 <HAL_RCC_OscConfig+0x338>)
 800688c:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800688e:	001a      	movs	r2, r3
 8006890:	231f      	movs	r3, #31
 8006892:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8006894:	000a      	movs	r2, r1
 8006896:	40da      	lsrs	r2, r3
 8006898:	4b80      	ldr	r3, [pc, #512]	@ (8006a9c <HAL_RCC_OscConfig+0x33c>)
 800689a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800689c:	4b80      	ldr	r3, [pc, #512]	@ (8006aa0 <HAL_RCC_OscConfig+0x340>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	250f      	movs	r5, #15
 80068a2:	197c      	adds	r4, r7, r5
 80068a4:	0018      	movs	r0, r3
 80068a6:	f7fe fed3 	bl	8005650 <HAL_InitTick>
 80068aa:	0003      	movs	r3, r0
 80068ac:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 80068ae:	197b      	adds	r3, r7, r5
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d057      	beq.n	8006966 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 80068b6:	197b      	adds	r3, r7, r5
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	f000 fb6e 	bl	8006f9a <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d035      	beq.n	8006932 <HAL_RCC_OscConfig+0x1d2>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80068c6:	4b72      	ldr	r3, [pc, #456]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	4b71      	ldr	r3, [pc, #452]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 80068cc:	2101      	movs	r1, #1
 80068ce:	430a      	orrs	r2, r1
 80068d0:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80068d2:	f7fe ff17 	bl	8005704 <HAL_GetTick>
 80068d6:	0003      	movs	r3, r0
 80068d8:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80068da:	e009      	b.n	80068f0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 80068dc:	f7fe ff12 	bl	8005704 <HAL_GetTick>
 80068e0:	0002      	movs	r2, r0
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d902      	bls.n	80068f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	f000 fb55 	bl	8006f9a <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80068f0:	4b67      	ldr	r3, [pc, #412]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2202      	movs	r2, #2
 80068f6:	4013      	ands	r3, r2
 80068f8:	d0f0      	beq.n	80068dc <HAL_RCC_OscConfig+0x17c>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80068fa:	4b65      	ldr	r3, [pc, #404]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	4b64      	ldr	r3, [pc, #400]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 8006900:	2108      	movs	r1, #8
 8006902:	430a      	orrs	r2, r1
 8006904:	601a      	str	r2, [r3, #0]
 8006906:	4b62      	ldr	r3, [pc, #392]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	22f0      	movs	r2, #240	@ 0xf0
 800690c:	4393      	bics	r3, r2
 800690e:	0019      	movs	r1, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006914:	4b5e      	ldr	r3, [pc, #376]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 8006916:	430a      	orrs	r2, r1
 8006918:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800691a:	4b5d      	ldr	r3, [pc, #372]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	4a5d      	ldr	r2, [pc, #372]	@ (8006a94 <HAL_RCC_OscConfig+0x334>)
 8006920:	4013      	ands	r3, r2
 8006922:	0019      	movs	r1, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a1b      	ldr	r3, [r3, #32]
 8006928:	021a      	lsls	r2, r3, #8
 800692a:	4b59      	ldr	r3, [pc, #356]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 800692c:	430a      	orrs	r2, r1
 800692e:	605a      	str	r2, [r3, #4]
 8006930:	e01a      	b.n	8006968 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006932:	4b57      	ldr	r3, [pc, #348]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	4b56      	ldr	r3, [pc, #344]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 8006938:	2101      	movs	r1, #1
 800693a:	438a      	bics	r2, r1
 800693c:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800693e:	f7fe fee1 	bl	8005704 <HAL_GetTick>
 8006942:	0003      	movs	r3, r0
 8006944:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006946:	e008      	b.n	800695a <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8006948:	f7fe fedc 	bl	8005704 <HAL_GetTick>
 800694c:	0002      	movs	r2, r0
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	2b02      	cmp	r3, #2
 8006954:	d901      	bls.n	800695a <HAL_RCC_OscConfig+0x1fa>
          {
            return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e31f      	b.n	8006f9a <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800695a:	4b4d      	ldr	r3, [pc, #308]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2202      	movs	r2, #2
 8006960:	4013      	ands	r3, r2
 8006962:	d1f1      	bne.n	8006948 <HAL_RCC_OscConfig+0x1e8>
 8006964:	e000      	b.n	8006968 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006966:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2201      	movs	r2, #1
 800696e:	4013      	ands	r3, r2
 8006970:	d100      	bne.n	8006974 <HAL_RCC_OscConfig+0x214>
 8006972:	e065      	b.n	8006a40 <HAL_RCC_OscConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	2b10      	cmp	r3, #16
 8006978:	d005      	beq.n	8006986 <HAL_RCC_OscConfig+0x226>
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	2b18      	cmp	r3, #24
 800697e:	d10e      	bne.n	800699e <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	2b03      	cmp	r3, #3
 8006984:	d10b      	bne.n	800699e <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006986:	4b42      	ldr	r3, [pc, #264]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	2380      	movs	r3, #128	@ 0x80
 800698c:	029b      	lsls	r3, r3, #10
 800698e:	4013      	ands	r3, r2
 8006990:	d055      	beq.n	8006a3e <HAL_RCC_OscConfig+0x2de>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d151      	bne.n	8006a3e <HAL_RCC_OscConfig+0x2de>
      {
        return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e2fd      	b.n	8006f9a <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685a      	ldr	r2, [r3, #4]
 80069a2:	2380      	movs	r3, #128	@ 0x80
 80069a4:	025b      	lsls	r3, r3, #9
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d107      	bne.n	80069ba <HAL_RCC_OscConfig+0x25a>
 80069aa:	4b39      	ldr	r3, [pc, #228]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	4b38      	ldr	r3, [pc, #224]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 80069b0:	2180      	movs	r1, #128	@ 0x80
 80069b2:	0249      	lsls	r1, r1, #9
 80069b4:	430a      	orrs	r2, r1
 80069b6:	601a      	str	r2, [r3, #0]
 80069b8:	e013      	b.n	80069e2 <HAL_RCC_OscConfig+0x282>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	685a      	ldr	r2, [r3, #4]
 80069be:	23a0      	movs	r3, #160	@ 0xa0
 80069c0:	02db      	lsls	r3, r3, #11
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d107      	bne.n	80069d6 <HAL_RCC_OscConfig+0x276>
 80069c6:	4b32      	ldr	r3, [pc, #200]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	4b31      	ldr	r3, [pc, #196]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 80069cc:	21a0      	movs	r1, #160	@ 0xa0
 80069ce:	02c9      	lsls	r1, r1, #11
 80069d0:	430a      	orrs	r2, r1
 80069d2:	601a      	str	r2, [r3, #0]
 80069d4:	e005      	b.n	80069e2 <HAL_RCC_OscConfig+0x282>
 80069d6:	4b2e      	ldr	r3, [pc, #184]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	4b2d      	ldr	r3, [pc, #180]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 80069dc:	4931      	ldr	r1, [pc, #196]	@ (8006aa4 <HAL_RCC_OscConfig+0x344>)
 80069de:	400a      	ands	r2, r1
 80069e0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d014      	beq.n	8006a14 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ea:	f7fe fe8b 	bl	8005704 <HAL_GetTick>
 80069ee:	0003      	movs	r3, r0
 80069f0:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069f2:	e008      	b.n	8006a06 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80069f4:	f7fe fe86 	bl	8005704 <HAL_GetTick>
 80069f8:	0002      	movs	r2, r0
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	2b64      	cmp	r3, #100	@ 0x64
 8006a00:	d901      	bls.n	8006a06 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e2c9      	b.n	8006f9a <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a06:	4b22      	ldr	r3, [pc, #136]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	2380      	movs	r3, #128	@ 0x80
 8006a0c:	029b      	lsls	r3, r3, #10
 8006a0e:	4013      	ands	r3, r2
 8006a10:	d0f0      	beq.n	80069f4 <HAL_RCC_OscConfig+0x294>
 8006a12:	e015      	b.n	8006a40 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a14:	f7fe fe76 	bl	8005704 <HAL_GetTick>
 8006a18:	0003      	movs	r3, r0
 8006a1a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a1c:	e008      	b.n	8006a30 <HAL_RCC_OscConfig+0x2d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8006a1e:	f7fe fe71 	bl	8005704 <HAL_GetTick>
 8006a22:	0002      	movs	r2, r0
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	2b64      	cmp	r3, #100	@ 0x64
 8006a2a:	d901      	bls.n	8006a30 <HAL_RCC_OscConfig+0x2d0>
          {
            return HAL_TIMEOUT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e2b4      	b.n	8006f9a <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a30:	4b17      	ldr	r3, [pc, #92]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	2380      	movs	r3, #128	@ 0x80
 8006a36:	029b      	lsls	r3, r3, #10
 8006a38:	4013      	ands	r3, r2
 8006a3a:	d1f0      	bne.n	8006a1e <HAL_RCC_OscConfig+0x2be>
 8006a3c:	e000      	b.n	8006a40 <HAL_RCC_OscConfig+0x2e0>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a3e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2202      	movs	r2, #2
 8006a46:	4013      	ands	r3, r2
 8006a48:	d100      	bne.n	8006a4c <HAL_RCC_OscConfig+0x2ec>
 8006a4a:	e074      	b.n	8006b36 <HAL_RCC_OscConfig+0x3d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	2b08      	cmp	r3, #8
 8006a50:	d005      	beq.n	8006a5e <HAL_RCC_OscConfig+0x2fe>
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	2b18      	cmp	r3, #24
 8006a56:	d129      	bne.n	8006aac <HAL_RCC_OscConfig+0x34c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d126      	bne.n	8006aac <HAL_RCC_OscConfig+0x34c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	2380      	movs	r3, #128	@ 0x80
 8006a64:	00db      	lsls	r3, r3, #3
 8006a66:	4013      	ands	r3, r2
 8006a68:	d005      	beq.n	8006a76 <HAL_RCC_OscConfig+0x316>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d101      	bne.n	8006a76 <HAL_RCC_OscConfig+0x316>
      {
        return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e291      	b.n	8006f9a <HAL_RCC_OscConfig+0x83a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a76:	4b06      	ldr	r3, [pc, #24]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	4a0b      	ldr	r2, [pc, #44]	@ (8006aa8 <HAL_RCC_OscConfig+0x348>)
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	0019      	movs	r1, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	061a      	lsls	r2, r3, #24
 8006a86:	4b02      	ldr	r3, [pc, #8]	@ (8006a90 <HAL_RCC_OscConfig+0x330>)
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a8c:	e053      	b.n	8006b36 <HAL_RCC_OscConfig+0x3d6>
 8006a8e:	46c0      	nop			@ (mov r8, r8)
 8006a90:	40021000 	.word	0x40021000
 8006a94:	ffff00ff 	.word	0xffff00ff
 8006a98:	0800c2f8 	.word	0x0800c2f8
 8006a9c:	20000004 	.word	0x20000004
 8006aa0:	20000008 	.word	0x20000008
 8006aa4:	fffaffff 	.word	0xfffaffff
 8006aa8:	80ffffff 	.word	0x80ffffff
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d026      	beq.n	8006b02 <HAL_RCC_OscConfig+0x3a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ab4:	4bc7      	ldr	r3, [pc, #796]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	4bc6      	ldr	r3, [pc, #792]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006aba:	2180      	movs	r1, #128	@ 0x80
 8006abc:	0049      	lsls	r1, r1, #1
 8006abe:	430a      	orrs	r2, r1
 8006ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ac2:	f7fe fe1f 	bl	8005704 <HAL_GetTick>
 8006ac6:	0003      	movs	r3, r0
 8006ac8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006aca:	e008      	b.n	8006ade <HAL_RCC_OscConfig+0x37e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006acc:	f7fe fe1a 	bl	8005704 <HAL_GetTick>
 8006ad0:	0002      	movs	r2, r0
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d901      	bls.n	8006ade <HAL_RCC_OscConfig+0x37e>
          {
            return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e25d      	b.n	8006f9a <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ade:	4bbd      	ldr	r3, [pc, #756]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	2380      	movs	r3, #128	@ 0x80
 8006ae4:	00db      	lsls	r3, r3, #3
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	d0f0      	beq.n	8006acc <HAL_RCC_OscConfig+0x36c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006aea:	4bba      	ldr	r3, [pc, #744]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	4aba      	ldr	r2, [pc, #744]	@ (8006dd8 <HAL_RCC_OscConfig+0x678>)
 8006af0:	4013      	ands	r3, r2
 8006af2:	0019      	movs	r1, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	061a      	lsls	r2, r3, #24
 8006afa:	4bb6      	ldr	r3, [pc, #728]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006afc:	430a      	orrs	r2, r1
 8006afe:	605a      	str	r2, [r3, #4]
 8006b00:	e019      	b.n	8006b36 <HAL_RCC_OscConfig+0x3d6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b02:	4bb4      	ldr	r3, [pc, #720]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	4bb3      	ldr	r3, [pc, #716]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006b08:	49b4      	ldr	r1, [pc, #720]	@ (8006ddc <HAL_RCC_OscConfig+0x67c>)
 8006b0a:	400a      	ands	r2, r1
 8006b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b0e:	f7fe fdf9 	bl	8005704 <HAL_GetTick>
 8006b12:	0003      	movs	r3, r0
 8006b14:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b16:	e008      	b.n	8006b2a <HAL_RCC_OscConfig+0x3ca>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006b18:	f7fe fdf4 	bl	8005704 <HAL_GetTick>
 8006b1c:	0002      	movs	r2, r0
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d901      	bls.n	8006b2a <HAL_RCC_OscConfig+0x3ca>
          {
            return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e237      	b.n	8006f9a <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b2a:	4baa      	ldr	r3, [pc, #680]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	2380      	movs	r3, #128	@ 0x80
 8006b30:	00db      	lsls	r3, r3, #3
 8006b32:	4013      	ands	r3, r2
 8006b34:	d1f0      	bne.n	8006b18 <HAL_RCC_OscConfig+0x3b8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2208      	movs	r2, #8
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	d051      	beq.n	8006be4 <HAL_RCC_OscConfig+0x484>
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	695b      	ldr	r3, [r3, #20]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d031      	beq.n	8006bac <HAL_RCC_OscConfig+0x44c>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d108      	bne.n	8006b62 <HAL_RCC_OscConfig+0x402>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8006b50:	4aa0      	ldr	r2, [pc, #640]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006b52:	2394      	movs	r3, #148	@ 0x94
 8006b54:	58d3      	ldr	r3, [r2, r3]
 8006b56:	499f      	ldr	r1, [pc, #636]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006b58:	2204      	movs	r2, #4
 8006b5a:	4393      	bics	r3, r2
 8006b5c:	2294      	movs	r2, #148	@ 0x94
 8006b5e:	508b      	str	r3, [r1, r2]
 8006b60:	e007      	b.n	8006b72 <HAL_RCC_OscConfig+0x412>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8006b62:	4a9c      	ldr	r2, [pc, #624]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006b64:	2394      	movs	r3, #148	@ 0x94
 8006b66:	58d3      	ldr	r3, [r2, r3]
 8006b68:	499a      	ldr	r1, [pc, #616]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006b6a:	2204      	movs	r2, #4
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	2294      	movs	r2, #148	@ 0x94
 8006b70:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b72:	4a98      	ldr	r2, [pc, #608]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006b74:	2394      	movs	r3, #148	@ 0x94
 8006b76:	58d3      	ldr	r3, [r2, r3]
 8006b78:	4996      	ldr	r1, [pc, #600]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	2294      	movs	r2, #148	@ 0x94
 8006b80:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b82:	f7fe fdbf 	bl	8005704 <HAL_GetTick>
 8006b86:	0003      	movs	r3, r0
 8006b88:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006b8a:	e008      	b.n	8006b9e <HAL_RCC_OscConfig+0x43e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b8c:	f7fe fdba 	bl	8005704 <HAL_GetTick>
 8006b90:	0002      	movs	r2, r0
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	2b11      	cmp	r3, #17
 8006b98:	d901      	bls.n	8006b9e <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e1fd      	b.n	8006f9a <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006b9e:	4a8d      	ldr	r2, [pc, #564]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006ba0:	2394      	movs	r3, #148	@ 0x94
 8006ba2:	58d3      	ldr	r3, [r2, r3]
 8006ba4:	2202      	movs	r2, #2
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	d0f0      	beq.n	8006b8c <HAL_RCC_OscConfig+0x42c>
 8006baa:	e01b      	b.n	8006be4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bac:	4a89      	ldr	r2, [pc, #548]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006bae:	2394      	movs	r3, #148	@ 0x94
 8006bb0:	58d3      	ldr	r3, [r2, r3]
 8006bb2:	4988      	ldr	r1, [pc, #544]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	4393      	bics	r3, r2
 8006bb8:	2294      	movs	r2, #148	@ 0x94
 8006bba:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bbc:	f7fe fda2 	bl	8005704 <HAL_GetTick>
 8006bc0:	0003      	movs	r3, r0
 8006bc2:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006bc4:	e008      	b.n	8006bd8 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bc6:	f7fe fd9d 	bl	8005704 <HAL_GetTick>
 8006bca:	0002      	movs	r2, r0
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	2b11      	cmp	r3, #17
 8006bd2:	d901      	bls.n	8006bd8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e1e0      	b.n	8006f9a <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006bd8:	4a7e      	ldr	r2, [pc, #504]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006bda:	2394      	movs	r3, #148	@ 0x94
 8006bdc:	58d3      	ldr	r3, [r2, r3]
 8006bde:	2202      	movs	r2, #2
 8006be0:	4013      	ands	r3, r2
 8006be2:	d1f0      	bne.n	8006bc6 <HAL_RCC_OscConfig+0x466>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2204      	movs	r2, #4
 8006bea:	4013      	ands	r3, r2
 8006bec:	d100      	bne.n	8006bf0 <HAL_RCC_OscConfig+0x490>
 8006bee:	e10d      	b.n	8006e0c <HAL_RCC_OscConfig+0x6ac>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bf0:	201f      	movs	r0, #31
 8006bf2:	183b      	adds	r3, r7, r0
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8006bf8:	4b76      	ldr	r3, [pc, #472]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006bfa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006bfc:	2380      	movs	r3, #128	@ 0x80
 8006bfe:	055b      	lsls	r3, r3, #21
 8006c00:	4013      	ands	r3, r2
 8006c02:	d110      	bne.n	8006c26 <HAL_RCC_OscConfig+0x4c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c04:	4b73      	ldr	r3, [pc, #460]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006c06:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006c08:	4b72      	ldr	r3, [pc, #456]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006c0a:	2180      	movs	r1, #128	@ 0x80
 8006c0c:	0549      	lsls	r1, r1, #21
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	659a      	str	r2, [r3, #88]	@ 0x58
 8006c12:	4b70      	ldr	r3, [pc, #448]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006c14:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006c16:	2380      	movs	r3, #128	@ 0x80
 8006c18:	055b      	lsls	r3, r3, #21
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	60bb      	str	r3, [r7, #8]
 8006c1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c20:	183b      	adds	r3, r7, r0
 8006c22:	2201      	movs	r2, #1
 8006c24:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c26:	4b6e      	ldr	r3, [pc, #440]	@ (8006de0 <HAL_RCC_OscConfig+0x680>)
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	2380      	movs	r3, #128	@ 0x80
 8006c2c:	005b      	lsls	r3, r3, #1
 8006c2e:	4013      	ands	r3, r2
 8006c30:	d11a      	bne.n	8006c68 <HAL_RCC_OscConfig+0x508>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c32:	4b6b      	ldr	r3, [pc, #428]	@ (8006de0 <HAL_RCC_OscConfig+0x680>)
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	4b6a      	ldr	r3, [pc, #424]	@ (8006de0 <HAL_RCC_OscConfig+0x680>)
 8006c38:	2180      	movs	r1, #128	@ 0x80
 8006c3a:	0049      	lsls	r1, r1, #1
 8006c3c:	430a      	orrs	r2, r1
 8006c3e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c40:	f7fe fd60 	bl	8005704 <HAL_GetTick>
 8006c44:	0003      	movs	r3, r0
 8006c46:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c48:	e008      	b.n	8006c5c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c4a:	f7fe fd5b 	bl	8005704 <HAL_GetTick>
 8006c4e:	0002      	movs	r2, r0
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	1ad3      	subs	r3, r2, r3
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d901      	bls.n	8006c5c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8006c58:	2303      	movs	r3, #3
 8006c5a:	e19e      	b.n	8006f9a <HAL_RCC_OscConfig+0x83a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c5c:	4b60      	ldr	r3, [pc, #384]	@ (8006de0 <HAL_RCC_OscConfig+0x680>)
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	2380      	movs	r3, #128	@ 0x80
 8006c62:	005b      	lsls	r3, r3, #1
 8006c64:	4013      	ands	r3, r2
 8006c66:	d0f0      	beq.n	8006c4a <HAL_RCC_OscConfig+0x4ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	4013      	ands	r3, r2
 8006c70:	d01e      	beq.n	8006cb0 <HAL_RCC_OscConfig+0x550>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	2204      	movs	r2, #4
 8006c78:	4013      	ands	r3, r2
 8006c7a:	d010      	beq.n	8006c9e <HAL_RCC_OscConfig+0x53e>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006c7c:	4a55      	ldr	r2, [pc, #340]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006c7e:	2390      	movs	r3, #144	@ 0x90
 8006c80:	58d3      	ldr	r3, [r2, r3]
 8006c82:	4954      	ldr	r1, [pc, #336]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006c84:	2204      	movs	r2, #4
 8006c86:	4313      	orrs	r3, r2
 8006c88:	2290      	movs	r2, #144	@ 0x90
 8006c8a:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006c8c:	4a51      	ldr	r2, [pc, #324]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006c8e:	2390      	movs	r3, #144	@ 0x90
 8006c90:	58d3      	ldr	r3, [r2, r3]
 8006c92:	4950      	ldr	r1, [pc, #320]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006c94:	2201      	movs	r2, #1
 8006c96:	4313      	orrs	r3, r2
 8006c98:	2290      	movs	r2, #144	@ 0x90
 8006c9a:	508b      	str	r3, [r1, r2]
 8006c9c:	e018      	b.n	8006cd0 <HAL_RCC_OscConfig+0x570>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006c9e:	4a4d      	ldr	r2, [pc, #308]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006ca0:	2390      	movs	r3, #144	@ 0x90
 8006ca2:	58d3      	ldr	r3, [r2, r3]
 8006ca4:	494b      	ldr	r1, [pc, #300]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	2290      	movs	r2, #144	@ 0x90
 8006cac:	508b      	str	r3, [r1, r2]
 8006cae:	e00f      	b.n	8006cd0 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006cb0:	4a48      	ldr	r2, [pc, #288]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006cb2:	2390      	movs	r3, #144	@ 0x90
 8006cb4:	58d3      	ldr	r3, [r2, r3]
 8006cb6:	4947      	ldr	r1, [pc, #284]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006cb8:	2201      	movs	r2, #1
 8006cba:	4393      	bics	r3, r2
 8006cbc:	2290      	movs	r2, #144	@ 0x90
 8006cbe:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006cc0:	4a44      	ldr	r2, [pc, #272]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006cc2:	2390      	movs	r3, #144	@ 0x90
 8006cc4:	58d3      	ldr	r3, [r2, r3]
 8006cc6:	4943      	ldr	r1, [pc, #268]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006cc8:	2204      	movs	r2, #4
 8006cca:	4393      	bics	r3, r2
 8006ccc:	2290      	movs	r2, #144	@ 0x90
 8006cce:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d04f      	beq.n	8006d78 <HAL_RCC_OscConfig+0x618>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cd8:	f7fe fd14 	bl	8005704 <HAL_GetTick>
 8006cdc:	0003      	movs	r3, r0
 8006cde:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ce0:	e009      	b.n	8006cf6 <HAL_RCC_OscConfig+0x596>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ce2:	f7fe fd0f 	bl	8005704 <HAL_GetTick>
 8006ce6:	0002      	movs	r2, r0
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	4a3d      	ldr	r2, [pc, #244]	@ (8006de4 <HAL_RCC_OscConfig+0x684>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d901      	bls.n	8006cf6 <HAL_RCC_OscConfig+0x596>
        {
          return HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e151      	b.n	8006f9a <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cf6:	4a37      	ldr	r2, [pc, #220]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006cf8:	2390      	movs	r3, #144	@ 0x90
 8006cfa:	58d3      	ldr	r3, [r2, r3]
 8006cfc:	2202      	movs	r2, #2
 8006cfe:	4013      	ands	r3, r2
 8006d00:	d0ef      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x582>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	2280      	movs	r2, #128	@ 0x80
 8006d08:	4013      	ands	r3, r2
 8006d0a:	d01a      	beq.n	8006d42 <HAL_RCC_OscConfig+0x5e2>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006d0c:	4a31      	ldr	r2, [pc, #196]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006d0e:	2390      	movs	r3, #144	@ 0x90
 8006d10:	58d3      	ldr	r3, [r2, r3]
 8006d12:	4930      	ldr	r1, [pc, #192]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006d14:	2280      	movs	r2, #128	@ 0x80
 8006d16:	4313      	orrs	r3, r2
 8006d18:	2290      	movs	r2, #144	@ 0x90
 8006d1a:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006d1c:	e009      	b.n	8006d32 <HAL_RCC_OscConfig+0x5d2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d1e:	f7fe fcf1 	bl	8005704 <HAL_GetTick>
 8006d22:	0002      	movs	r2, r0
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	4a2e      	ldr	r2, [pc, #184]	@ (8006de4 <HAL_RCC_OscConfig+0x684>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d901      	bls.n	8006d32 <HAL_RCC_OscConfig+0x5d2>
          {
            return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e133      	b.n	8006f9a <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006d32:	4a28      	ldr	r2, [pc, #160]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006d34:	2390      	movs	r3, #144	@ 0x90
 8006d36:	58d2      	ldr	r2, [r2, r3]
 8006d38:	2380      	movs	r3, #128	@ 0x80
 8006d3a:	011b      	lsls	r3, r3, #4
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	d0ee      	beq.n	8006d1e <HAL_RCC_OscConfig+0x5be>
 8006d40:	e059      	b.n	8006df6 <HAL_RCC_OscConfig+0x696>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006d42:	4a24      	ldr	r2, [pc, #144]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006d44:	2390      	movs	r3, #144	@ 0x90
 8006d46:	58d3      	ldr	r3, [r2, r3]
 8006d48:	4922      	ldr	r1, [pc, #136]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006d4a:	2280      	movs	r2, #128	@ 0x80
 8006d4c:	4393      	bics	r3, r2
 8006d4e:	2290      	movs	r2, #144	@ 0x90
 8006d50:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006d52:	e009      	b.n	8006d68 <HAL_RCC_OscConfig+0x608>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d54:	f7fe fcd6 	bl	8005704 <HAL_GetTick>
 8006d58:	0002      	movs	r2, r0
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	4a21      	ldr	r2, [pc, #132]	@ (8006de4 <HAL_RCC_OscConfig+0x684>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d901      	bls.n	8006d68 <HAL_RCC_OscConfig+0x608>
          {
            return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e118      	b.n	8006f9a <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006d68:	4a1a      	ldr	r2, [pc, #104]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006d6a:	2390      	movs	r3, #144	@ 0x90
 8006d6c:	58d2      	ldr	r2, [r2, r3]
 8006d6e:	2380      	movs	r3, #128	@ 0x80
 8006d70:	011b      	lsls	r3, r3, #4
 8006d72:	4013      	ands	r3, r2
 8006d74:	d1ee      	bne.n	8006d54 <HAL_RCC_OscConfig+0x5f4>
 8006d76:	e03e      	b.n	8006df6 <HAL_RCC_OscConfig+0x696>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d78:	f7fe fcc4 	bl	8005704 <HAL_GetTick>
 8006d7c:	0003      	movs	r3, r0
 8006d7e:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d80:	e009      	b.n	8006d96 <HAL_RCC_OscConfig+0x636>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d82:	f7fe fcbf 	bl	8005704 <HAL_GetTick>
 8006d86:	0002      	movs	r2, r0
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	4a15      	ldr	r2, [pc, #84]	@ (8006de4 <HAL_RCC_OscConfig+0x684>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d901      	bls.n	8006d96 <HAL_RCC_OscConfig+0x636>
        {
          return HAL_TIMEOUT;
 8006d92:	2303      	movs	r3, #3
 8006d94:	e101      	b.n	8006f9a <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d96:	4a0f      	ldr	r2, [pc, #60]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006d98:	2390      	movs	r3, #144	@ 0x90
 8006d9a:	58d3      	ldr	r3, [r2, r3]
 8006d9c:	2202      	movs	r2, #2
 8006d9e:	4013      	ands	r3, r2
 8006da0:	d1ef      	bne.n	8006d82 <HAL_RCC_OscConfig+0x622>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8006da2:	4a0c      	ldr	r2, [pc, #48]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006da4:	2390      	movs	r3, #144	@ 0x90
 8006da6:	58d3      	ldr	r3, [r2, r3]
 8006da8:	2280      	movs	r2, #128	@ 0x80
 8006daa:	4013      	ands	r3, r2
 8006dac:	d023      	beq.n	8006df6 <HAL_RCC_OscConfig+0x696>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006dae:	4a09      	ldr	r2, [pc, #36]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006db0:	2390      	movs	r3, #144	@ 0x90
 8006db2:	58d3      	ldr	r3, [r2, r3]
 8006db4:	4907      	ldr	r1, [pc, #28]	@ (8006dd4 <HAL_RCC_OscConfig+0x674>)
 8006db6:	2280      	movs	r2, #128	@ 0x80
 8006db8:	4393      	bics	r3, r2
 8006dba:	2290      	movs	r2, #144	@ 0x90
 8006dbc:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006dbe:	e013      	b.n	8006de8 <HAL_RCC_OscConfig+0x688>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dc0:	f7fe fca0 	bl	8005704 <HAL_GetTick>
 8006dc4:	0002      	movs	r2, r0
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	4a06      	ldr	r2, [pc, #24]	@ (8006de4 <HAL_RCC_OscConfig+0x684>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d90b      	bls.n	8006de8 <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e0e2      	b.n	8006f9a <HAL_RCC_OscConfig+0x83a>
 8006dd4:	40021000 	.word	0x40021000
 8006dd8:	80ffffff 	.word	0x80ffffff
 8006ddc:	fffffeff 	.word	0xfffffeff
 8006de0:	40007000 	.word	0x40007000
 8006de4:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006de8:	4a6e      	ldr	r2, [pc, #440]	@ (8006fa4 <HAL_RCC_OscConfig+0x844>)
 8006dea:	2390      	movs	r3, #144	@ 0x90
 8006dec:	58d2      	ldr	r2, [r2, r3]
 8006dee:	2380      	movs	r3, #128	@ 0x80
 8006df0:	011b      	lsls	r3, r3, #4
 8006df2:	4013      	ands	r3, r2
 8006df4:	d1e4      	bne.n	8006dc0 <HAL_RCC_OscConfig+0x660>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006df6:	231f      	movs	r3, #31
 8006df8:	18fb      	adds	r3, r7, r3
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d105      	bne.n	8006e0c <HAL_RCC_OscConfig+0x6ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e00:	4b68      	ldr	r3, [pc, #416]	@ (8006fa4 <HAL_RCC_OscConfig+0x844>)
 8006e02:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006e04:	4b67      	ldr	r3, [pc, #412]	@ (8006fa4 <HAL_RCC_OscConfig+0x844>)
 8006e06:	4968      	ldr	r1, [pc, #416]	@ (8006fa8 <HAL_RCC_OscConfig+0x848>)
 8006e08:	400a      	ands	r2, r1
 8006e0a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
#if defined(RCC_CRRCR_HSI48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2220      	movs	r2, #32
 8006e12:	4013      	ands	r3, r2
 8006e14:	d03c      	beq.n	8006e90 <HAL_RCC_OscConfig+0x730>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d01c      	beq.n	8006e58 <HAL_RCC_OscConfig+0x6f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006e1e:	4a61      	ldr	r2, [pc, #388]	@ (8006fa4 <HAL_RCC_OscConfig+0x844>)
 8006e20:	2398      	movs	r3, #152	@ 0x98
 8006e22:	58d3      	ldr	r3, [r2, r3]
 8006e24:	495f      	ldr	r1, [pc, #380]	@ (8006fa4 <HAL_RCC_OscConfig+0x844>)
 8006e26:	2201      	movs	r2, #1
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	2298      	movs	r2, #152	@ 0x98
 8006e2c:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e2e:	f7fe fc69 	bl	8005704 <HAL_GetTick>
 8006e32:	0003      	movs	r3, r0
 8006e34:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006e36:	e008      	b.n	8006e4a <HAL_RCC_OscConfig+0x6ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e38:	f7fe fc64 	bl	8005704 <HAL_GetTick>
 8006e3c:	0002      	movs	r2, r0
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d901      	bls.n	8006e4a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e0a7      	b.n	8006f9a <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006e4a:	4a56      	ldr	r2, [pc, #344]	@ (8006fa4 <HAL_RCC_OscConfig+0x844>)
 8006e4c:	2398      	movs	r3, #152	@ 0x98
 8006e4e:	58d3      	ldr	r3, [r2, r3]
 8006e50:	2202      	movs	r2, #2
 8006e52:	4013      	ands	r3, r2
 8006e54:	d0f0      	beq.n	8006e38 <HAL_RCC_OscConfig+0x6d8>
 8006e56:	e01b      	b.n	8006e90 <HAL_RCC_OscConfig+0x730>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006e58:	4a52      	ldr	r2, [pc, #328]	@ (8006fa4 <HAL_RCC_OscConfig+0x844>)
 8006e5a:	2398      	movs	r3, #152	@ 0x98
 8006e5c:	58d3      	ldr	r3, [r2, r3]
 8006e5e:	4951      	ldr	r1, [pc, #324]	@ (8006fa4 <HAL_RCC_OscConfig+0x844>)
 8006e60:	2201      	movs	r2, #1
 8006e62:	4393      	bics	r3, r2
 8006e64:	2298      	movs	r2, #152	@ 0x98
 8006e66:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e68:	f7fe fc4c 	bl	8005704 <HAL_GetTick>
 8006e6c:	0003      	movs	r3, r0
 8006e6e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 8006e70:	e008      	b.n	8006e84 <HAL_RCC_OscConfig+0x724>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e72:	f7fe fc47 	bl	8005704 <HAL_GetTick>
 8006e76:	0002      	movs	r2, r0
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d901      	bls.n	8006e84 <HAL_RCC_OscConfig+0x724>
        {
          return HAL_TIMEOUT;
 8006e80:	2303      	movs	r3, #3
 8006e82:	e08a      	b.n	8006f9a <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 8006e84:	4a47      	ldr	r2, [pc, #284]	@ (8006fa4 <HAL_RCC_OscConfig+0x844>)
 8006e86:	2398      	movs	r3, #152	@ 0x98
 8006e88:	58d3      	ldr	r3, [r2, r3]
 8006e8a:	2202      	movs	r2, #2
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	d1f0      	bne.n	8006e72 <HAL_RCC_OscConfig+0x712>
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d100      	bne.n	8006e9a <HAL_RCC_OscConfig+0x73a>
 8006e98:	e07e      	b.n	8006f98 <HAL_RCC_OscConfig+0x838>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e9a:	4b42      	ldr	r3, [pc, #264]	@ (8006fa4 <HAL_RCC_OscConfig+0x844>)
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	2238      	movs	r2, #56	@ 0x38
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	2b18      	cmp	r3, #24
 8006ea4:	d100      	bne.n	8006ea8 <HAL_RCC_OscConfig+0x748>
 8006ea6:	e075      	b.n	8006f94 <HAL_RCC_OscConfig+0x834>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	d156      	bne.n	8006f5e <HAL_RCC_OscConfig+0x7fe>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eb0:	4b3c      	ldr	r3, [pc, #240]	@ (8006fa4 <HAL_RCC_OscConfig+0x844>)
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	4b3b      	ldr	r3, [pc, #236]	@ (8006fa4 <HAL_RCC_OscConfig+0x844>)
 8006eb6:	493d      	ldr	r1, [pc, #244]	@ (8006fac <HAL_RCC_OscConfig+0x84c>)
 8006eb8:	400a      	ands	r2, r1
 8006eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ebc:	f7fe fc22 	bl	8005704 <HAL_GetTick>
 8006ec0:	0003      	movs	r3, r0
 8006ec2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ec4:	e008      	b.n	8006ed8 <HAL_RCC_OscConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ec6:	f7fe fc1d 	bl	8005704 <HAL_GetTick>
 8006eca:	0002      	movs	r2, r0
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d901      	bls.n	8006ed8 <HAL_RCC_OscConfig+0x778>
          {
            return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e060      	b.n	8006f9a <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ed8:	4b32      	ldr	r3, [pc, #200]	@ (8006fa4 <HAL_RCC_OscConfig+0x844>)
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	2380      	movs	r3, #128	@ 0x80
 8006ede:	049b      	lsls	r3, r3, #18
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	d1f0      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x766>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ee4:	4b2f      	ldr	r3, [pc, #188]	@ (8006fa4 <HAL_RCC_OscConfig+0x844>)
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	4a31      	ldr	r2, [pc, #196]	@ (8006fb0 <HAL_RCC_OscConfig+0x850>)
 8006eea:	4013      	ands	r3, r2
 8006eec:	0019      	movs	r1, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ef6:	431a      	orrs	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006efc:	021b      	lsls	r3, r3, #8
 8006efe:	431a      	orrs	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f04:	431a      	orrs	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f0a:	431a      	orrs	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f10:	431a      	orrs	r2, r3
 8006f12:	4b24      	ldr	r3, [pc, #144]	@ (8006fa4 <HAL_RCC_OscConfig+0x844>)
 8006f14:	430a      	orrs	r2, r1
 8006f16:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 8006f18:	4b22      	ldr	r3, [pc, #136]	@ (8006fa4 <HAL_RCC_OscConfig+0x844>)
 8006f1a:	68da      	ldr	r2, [r3, #12]
 8006f1c:	4b21      	ldr	r3, [pc, #132]	@ (8006fa4 <HAL_RCC_OscConfig+0x844>)
 8006f1e:	2180      	movs	r1, #128	@ 0x80
 8006f20:	0549      	lsls	r1, r1, #21
 8006f22:	430a      	orrs	r2, r1
 8006f24:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f26:	4b1f      	ldr	r3, [pc, #124]	@ (8006fa4 <HAL_RCC_OscConfig+0x844>)
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8006fa4 <HAL_RCC_OscConfig+0x844>)
 8006f2c:	2180      	movs	r1, #128	@ 0x80
 8006f2e:	0449      	lsls	r1, r1, #17
 8006f30:	430a      	orrs	r2, r1
 8006f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f34:	f7fe fbe6 	bl	8005704 <HAL_GetTick>
 8006f38:	0003      	movs	r3, r0
 8006f3a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f3c:	e008      	b.n	8006f50 <HAL_RCC_OscConfig+0x7f0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f3e:	f7fe fbe1 	bl	8005704 <HAL_GetTick>
 8006f42:	0002      	movs	r2, r0
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d901      	bls.n	8006f50 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e024      	b.n	8006f9a <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f50:	4b14      	ldr	r3, [pc, #80]	@ (8006fa4 <HAL_RCC_OscConfig+0x844>)
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	2380      	movs	r3, #128	@ 0x80
 8006f56:	049b      	lsls	r3, r3, #18
 8006f58:	4013      	ands	r3, r2
 8006f5a:	d0f0      	beq.n	8006f3e <HAL_RCC_OscConfig+0x7de>
 8006f5c:	e01c      	b.n	8006f98 <HAL_RCC_OscConfig+0x838>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f5e:	4b11      	ldr	r3, [pc, #68]	@ (8006fa4 <HAL_RCC_OscConfig+0x844>)
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	4b10      	ldr	r3, [pc, #64]	@ (8006fa4 <HAL_RCC_OscConfig+0x844>)
 8006f64:	4911      	ldr	r1, [pc, #68]	@ (8006fac <HAL_RCC_OscConfig+0x84c>)
 8006f66:	400a      	ands	r2, r1
 8006f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f6a:	f7fe fbcb 	bl	8005704 <HAL_GetTick>
 8006f6e:	0003      	movs	r3, r0
 8006f70:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f72:	e008      	b.n	8006f86 <HAL_RCC_OscConfig+0x826>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f74:	f7fe fbc6 	bl	8005704 <HAL_GetTick>
 8006f78:	0002      	movs	r2, r0
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d901      	bls.n	8006f86 <HAL_RCC_OscConfig+0x826>
          {
            return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e009      	b.n	8006f9a <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f86:	4b07      	ldr	r3, [pc, #28]	@ (8006fa4 <HAL_RCC_OscConfig+0x844>)
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	2380      	movs	r3, #128	@ 0x80
 8006f8c:	049b      	lsls	r3, r3, #18
 8006f8e:	4013      	ands	r3, r2
 8006f90:	d1f0      	bne.n	8006f74 <HAL_RCC_OscConfig+0x814>
 8006f92:	e001      	b.n	8006f98 <HAL_RCC_OscConfig+0x838>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e000      	b.n	8006f9a <HAL_RCC_OscConfig+0x83a>
    }
  }
  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	0018      	movs	r0, r3
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	b008      	add	sp, #32
 8006fa0:	bdb0      	pop	{r4, r5, r7, pc}
 8006fa2:	46c0      	nop			@ (mov r8, r8)
 8006fa4:	40021000 	.word	0x40021000
 8006fa8:	efffffff 	.word	0xefffffff
 8006fac:	feffffff 	.word	0xfeffffff
 8006fb0:	11c1808c 	.word	0x11c1808c

08006fb4 <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fb4:	b5b0      	push	{r4, r5, r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006fbe:	4b6c      	ldr	r3, [pc, #432]	@ (8007170 <HAL_RCC_ClockConfig+0x1bc>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2207      	movs	r2, #7
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	683a      	ldr	r2, [r7, #0]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d911      	bls.n	8006ff0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fcc:	4b68      	ldr	r3, [pc, #416]	@ (8007170 <HAL_RCC_ClockConfig+0x1bc>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2207      	movs	r2, #7
 8006fd2:	4393      	bics	r3, r2
 8006fd4:	0019      	movs	r1, r3
 8006fd6:	4b66      	ldr	r3, [pc, #408]	@ (8007170 <HAL_RCC_ClockConfig+0x1bc>)
 8006fd8:	683a      	ldr	r2, [r7, #0]
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fde:	4b64      	ldr	r3, [pc, #400]	@ (8007170 <HAL_RCC_ClockConfig+0x1bc>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2207      	movs	r2, #7
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d001      	beq.n	8006ff0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e0bb      	b.n	8007168 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	d100      	bne.n	8006ffc <HAL_RCC_ClockConfig+0x48>
 8006ffa:	e064      	b.n	80070c6 <HAL_RCC_ClockConfig+0x112>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	2b03      	cmp	r3, #3
 8007002:	d107      	bne.n	8007014 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007004:	4b5b      	ldr	r3, [pc, #364]	@ (8007174 <HAL_RCC_ClockConfig+0x1c0>)
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	2380      	movs	r3, #128	@ 0x80
 800700a:	049b      	lsls	r3, r3, #18
 800700c:	4013      	ands	r3, r2
 800700e:	d138      	bne.n	8007082 <HAL_RCC_ClockConfig+0xce>
      {
        return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e0a9      	b.n	8007168 <HAL_RCC_ClockConfig+0x1b4>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	2b02      	cmp	r3, #2
 800701a:	d107      	bne.n	800702c <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800701c:	4b55      	ldr	r3, [pc, #340]	@ (8007174 <HAL_RCC_ClockConfig+0x1c0>)
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	2380      	movs	r3, #128	@ 0x80
 8007022:	029b      	lsls	r3, r3, #10
 8007024:	4013      	ands	r3, r2
 8007026:	d12c      	bne.n	8007082 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e09d      	b.n	8007168 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d106      	bne.n	8007042 <HAL_RCC_ClockConfig+0x8e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007034:	4b4f      	ldr	r3, [pc, #316]	@ (8007174 <HAL_RCC_ClockConfig+0x1c0>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2202      	movs	r2, #2
 800703a:	4013      	ands	r3, r2
 800703c:	d121      	bne.n	8007082 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e092      	b.n	8007168 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	2b01      	cmp	r3, #1
 8007048:	d107      	bne.n	800705a <HAL_RCC_ClockConfig+0xa6>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800704a:	4b4a      	ldr	r3, [pc, #296]	@ (8007174 <HAL_RCC_ClockConfig+0x1c0>)
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	2380      	movs	r3, #128	@ 0x80
 8007050:	00db      	lsls	r3, r3, #3
 8007052:	4013      	ands	r3, r2
 8007054:	d115      	bne.n	8007082 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e086      	b.n	8007168 <HAL_RCC_ClockConfig+0x1b4>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	2b04      	cmp	r3, #4
 8007060:	d107      	bne.n	8007072 <HAL_RCC_ClockConfig+0xbe>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007062:	4a44      	ldr	r2, [pc, #272]	@ (8007174 <HAL_RCC_ClockConfig+0x1c0>)
 8007064:	2394      	movs	r3, #148	@ 0x94
 8007066:	58d3      	ldr	r3, [r2, r3]
 8007068:	2202      	movs	r2, #2
 800706a:	4013      	ands	r3, r2
 800706c:	d109      	bne.n	8007082 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e07a      	b.n	8007168 <HAL_RCC_ClockConfig+0x1b4>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007072:	4a40      	ldr	r2, [pc, #256]	@ (8007174 <HAL_RCC_ClockConfig+0x1c0>)
 8007074:	2390      	movs	r3, #144	@ 0x90
 8007076:	58d3      	ldr	r3, [r2, r3]
 8007078:	2202      	movs	r2, #2
 800707a:	4013      	ands	r3, r2
 800707c:	d101      	bne.n	8007082 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e072      	b.n	8007168 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007082:	4b3c      	ldr	r3, [pc, #240]	@ (8007174 <HAL_RCC_ClockConfig+0x1c0>)
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	2207      	movs	r2, #7
 8007088:	4393      	bics	r3, r2
 800708a:	0019      	movs	r1, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685a      	ldr	r2, [r3, #4]
 8007090:	4b38      	ldr	r3, [pc, #224]	@ (8007174 <HAL_RCC_ClockConfig+0x1c0>)
 8007092:	430a      	orrs	r2, r1
 8007094:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007096:	f7fe fb35 	bl	8005704 <HAL_GetTick>
 800709a:	0003      	movs	r3, r0
 800709c:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800709e:	e009      	b.n	80070b4 <HAL_RCC_ClockConfig+0x100>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070a0:	f7fe fb30 	bl	8005704 <HAL_GetTick>
 80070a4:	0002      	movs	r2, r0
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	4a33      	ldr	r2, [pc, #204]	@ (8007178 <HAL_RCC_ClockConfig+0x1c4>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d901      	bls.n	80070b4 <HAL_RCC_ClockConfig+0x100>
      {
        return HAL_TIMEOUT;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e059      	b.n	8007168 <HAL_RCC_ClockConfig+0x1b4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070b4:	4b2f      	ldr	r3, [pc, #188]	@ (8007174 <HAL_RCC_ClockConfig+0x1c0>)
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	2238      	movs	r2, #56	@ 0x38
 80070ba:	401a      	ands	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	00db      	lsls	r3, r3, #3
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d1ec      	bne.n	80070a0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2202      	movs	r2, #2
 80070cc:	4013      	ands	r3, r2
 80070ce:	d009      	beq.n	80070e4 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070d0:	4b28      	ldr	r3, [pc, #160]	@ (8007174 <HAL_RCC_ClockConfig+0x1c0>)
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	4a29      	ldr	r2, [pc, #164]	@ (800717c <HAL_RCC_ClockConfig+0x1c8>)
 80070d6:	4013      	ands	r3, r2
 80070d8:	0019      	movs	r1, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	689a      	ldr	r2, [r3, #8]
 80070de:	4b25      	ldr	r3, [pc, #148]	@ (8007174 <HAL_RCC_ClockConfig+0x1c0>)
 80070e0:	430a      	orrs	r2, r1
 80070e2:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80070e4:	4b22      	ldr	r3, [pc, #136]	@ (8007170 <HAL_RCC_ClockConfig+0x1bc>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2207      	movs	r2, #7
 80070ea:	4013      	ands	r3, r2
 80070ec:	683a      	ldr	r2, [r7, #0]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d211      	bcs.n	8007116 <HAL_RCC_ClockConfig+0x162>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070f2:	4b1f      	ldr	r3, [pc, #124]	@ (8007170 <HAL_RCC_ClockConfig+0x1bc>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2207      	movs	r2, #7
 80070f8:	4393      	bics	r3, r2
 80070fa:	0019      	movs	r1, r3
 80070fc:	4b1c      	ldr	r3, [pc, #112]	@ (8007170 <HAL_RCC_ClockConfig+0x1bc>)
 80070fe:	683a      	ldr	r2, [r7, #0]
 8007100:	430a      	orrs	r2, r1
 8007102:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007104:	4b1a      	ldr	r3, [pc, #104]	@ (8007170 <HAL_RCC_ClockConfig+0x1bc>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2207      	movs	r2, #7
 800710a:	4013      	ands	r3, r2
 800710c:	683a      	ldr	r2, [r7, #0]
 800710e:	429a      	cmp	r2, r3
 8007110:	d001      	beq.n	8007116 <HAL_RCC_ClockConfig+0x162>
    {
      return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e028      	b.n	8007168 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2204      	movs	r2, #4
 800711c:	4013      	ands	r3, r2
 800711e:	d009      	beq.n	8007134 <HAL_RCC_ClockConfig+0x180>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007120:	4b14      	ldr	r3, [pc, #80]	@ (8007174 <HAL_RCC_ClockConfig+0x1c0>)
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	4a16      	ldr	r2, [pc, #88]	@ (8007180 <HAL_RCC_ClockConfig+0x1cc>)
 8007126:	4013      	ands	r3, r2
 8007128:	0019      	movs	r1, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	68da      	ldr	r2, [r3, #12]
 800712e:	4b11      	ldr	r3, [pc, #68]	@ (8007174 <HAL_RCC_ClockConfig+0x1c0>)
 8007130:	430a      	orrs	r2, r1
 8007132:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8007134:	f000 f82a 	bl	800718c <HAL_RCC_GetSysClockFreq>
 8007138:	0001      	movs	r1, r0
 800713a:	4b0e      	ldr	r3, [pc, #56]	@ (8007174 <HAL_RCC_ClockConfig+0x1c0>)
 800713c:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800713e:	0a1b      	lsrs	r3, r3, #8
 8007140:	220f      	movs	r2, #15
 8007142:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8007144:	4a0f      	ldr	r2, [pc, #60]	@ (8007184 <HAL_RCC_ClockConfig+0x1d0>)
 8007146:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007148:	001a      	movs	r2, r3
 800714a:	231f      	movs	r3, #31
 800714c:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 800714e:	000a      	movs	r2, r1
 8007150:	40da      	lsrs	r2, r3
 8007152:	4b0d      	ldr	r3, [pc, #52]	@ (8007188 <HAL_RCC_ClockConfig+0x1d4>)
 8007154:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 8007156:	250b      	movs	r5, #11
 8007158:	197c      	adds	r4, r7, r5
 800715a:	2003      	movs	r0, #3
 800715c:	f7fe fa78 	bl	8005650 <HAL_InitTick>
 8007160:	0003      	movs	r3, r0
 8007162:	7023      	strb	r3, [r4, #0]

  return halstatus;
 8007164:	197b      	adds	r3, r7, r5
 8007166:	781b      	ldrb	r3, [r3, #0]
}
 8007168:	0018      	movs	r0, r3
 800716a:	46bd      	mov	sp, r7
 800716c:	b004      	add	sp, #16
 800716e:	bdb0      	pop	{r4, r5, r7, pc}
 8007170:	40022000 	.word	0x40022000
 8007174:	40021000 	.word	0x40021000
 8007178:	00001388 	.word	0x00001388
 800717c:	fffff0ff 	.word	0xfffff0ff
 8007180:	ffff8fff 	.word	0xffff8fff
 8007184:	0800c2f8 	.word	0x0800c2f8
 8007188:	20000004 	.word	0x20000004

0800718c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b08a      	sub	sp, #40	@ 0x28
 8007190:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8007192:	2300      	movs	r3, #0
 8007194:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8007196:	2300      	movs	r3, #0
 8007198:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800719a:	4b46      	ldr	r3, [pc, #280]	@ (80072b4 <HAL_RCC_GetSysClockFreq+0x128>)
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	2238      	movs	r2, #56	@ 0x38
 80071a0:	4013      	ands	r3, r2
 80071a2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80071a4:	4b43      	ldr	r3, [pc, #268]	@ (80072b4 <HAL_RCC_GetSysClockFreq+0x128>)
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	2203      	movs	r2, #3
 80071aa:	4013      	ands	r3, r2
 80071ac:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d005      	beq.n	80071c0 <HAL_RCC_GetSysClockFreq+0x34>
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	2b18      	cmp	r3, #24
 80071b8:	d125      	bne.n	8007206 <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d122      	bne.n	8007206 <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80071c0:	4b3c      	ldr	r3, [pc, #240]	@ (80072b4 <HAL_RCC_GetSysClockFreq+0x128>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2208      	movs	r2, #8
 80071c6:	4013      	ands	r3, r2
 80071c8:	d107      	bne.n	80071da <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 80071ca:	4a3a      	ldr	r2, [pc, #232]	@ (80072b4 <HAL_RCC_GetSysClockFreq+0x128>)
 80071cc:	2394      	movs	r3, #148	@ 0x94
 80071ce:	58d3      	ldr	r3, [r2, r3]
 80071d0:	0a1b      	lsrs	r3, r3, #8
 80071d2:	220f      	movs	r2, #15
 80071d4:	4013      	ands	r3, r2
 80071d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80071d8:	e005      	b.n	80071e6 <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80071da:	4b36      	ldr	r3, [pc, #216]	@ (80072b4 <HAL_RCC_GetSysClockFreq+0x128>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	091b      	lsrs	r3, r3, #4
 80071e0:	220f      	movs	r2, #15
 80071e2:	4013      	ands	r3, r2
 80071e4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 80071e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e8:	2b0b      	cmp	r3, #11
 80071ea:	d901      	bls.n	80071f0 <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 80071ec:	2300      	movs	r3, #0
 80071ee:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 80071f0:	4b31      	ldr	r3, [pc, #196]	@ (80072b8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80071f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071f4:	0092      	lsls	r2, r2, #2
 80071f6:	58d3      	ldr	r3, [r2, r3]
 80071f8:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d11b      	bne.n	8007238 <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007202:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007204:	e018      	b.n	8007238 <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	2b08      	cmp	r3, #8
 800720a:	d102      	bne.n	8007212 <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800720c:	4b2b      	ldr	r3, [pc, #172]	@ (80072bc <HAL_RCC_GetSysClockFreq+0x130>)
 800720e:	623b      	str	r3, [r7, #32]
 8007210:	e012      	b.n	8007238 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	2b10      	cmp	r3, #16
 8007216:	d102      	bne.n	800721e <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007218:	4b29      	ldr	r3, [pc, #164]	@ (80072c0 <HAL_RCC_GetSysClockFreq+0x134>)
 800721a:	623b      	str	r3, [r7, #32]
 800721c:	e00c      	b.n	8007238 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	2b20      	cmp	r3, #32
 8007222:	d103      	bne.n	800722c <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8007224:	23fa      	movs	r3, #250	@ 0xfa
 8007226:	01db      	lsls	r3, r3, #7
 8007228:	623b      	str	r3, [r7, #32]
 800722a:	e005      	b.n	8007238 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	2b28      	cmp	r3, #40	@ 0x28
 8007230:	d102      	bne.n	8007238 <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8007232:	2380      	movs	r3, #128	@ 0x80
 8007234:	021b      	lsls	r3, r3, #8
 8007236:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	2b18      	cmp	r3, #24
 800723c:	d135      	bne.n	80072aa <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800723e:	4b1d      	ldr	r3, [pc, #116]	@ (80072b4 <HAL_RCC_GetSysClockFreq+0x128>)
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	2203      	movs	r2, #3
 8007244:	4013      	ands	r3, r2
 8007246:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007248:	4b1a      	ldr	r3, [pc, #104]	@ (80072b4 <HAL_RCC_GetSysClockFreq+0x128>)
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	091b      	lsrs	r3, r3, #4
 800724e:	2207      	movs	r2, #7
 8007250:	4013      	ands	r3, r2
 8007252:	3301      	adds	r3, #1
 8007254:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	2b02      	cmp	r3, #2
 800725a:	d003      	beq.n	8007264 <HAL_RCC_GetSysClockFreq+0xd8>
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	2b03      	cmp	r3, #3
 8007260:	d003      	beq.n	800726a <HAL_RCC_GetSysClockFreq+0xde>
 8007262:	e005      	b.n	8007270 <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 8007264:	4b15      	ldr	r3, [pc, #84]	@ (80072bc <HAL_RCC_GetSysClockFreq+0x130>)
 8007266:	61fb      	str	r3, [r7, #28]
        break;
 8007268:	e005      	b.n	8007276 <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 800726a:	4b15      	ldr	r3, [pc, #84]	@ (80072c0 <HAL_RCC_GetSysClockFreq+0x134>)
 800726c:	61fb      	str	r3, [r7, #28]
        break;
 800726e:	e002      	b.n	8007276 <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 8007270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007272:	61fb      	str	r3, [r7, #28]
        break;
 8007274:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 8007276:	4b0f      	ldr	r3, [pc, #60]	@ (80072b4 <HAL_RCC_GetSysClockFreq+0x128>)
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	0a1b      	lsrs	r3, r3, #8
 800727c:	227f      	movs	r2, #127	@ 0x7f
 800727e:	4013      	ands	r3, r2
 8007280:	69fa      	ldr	r2, [r7, #28]
 8007282:	4353      	muls	r3, r2
 8007284:	68f9      	ldr	r1, [r7, #12]
 8007286:	0018      	movs	r0, r3
 8007288:	f7f8 ff5a 	bl	8000140 <__udivsi3>
 800728c:	0003      	movs	r3, r0
 800728e:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8007290:	4b08      	ldr	r3, [pc, #32]	@ (80072b4 <HAL_RCC_GetSysClockFreq+0x128>)
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	0f5b      	lsrs	r3, r3, #29
 8007296:	2207      	movs	r2, #7
 8007298:	4013      	ands	r3, r2
 800729a:	3301      	adds	r3, #1
 800729c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800729e:	6879      	ldr	r1, [r7, #4]
 80072a0:	68b8      	ldr	r0, [r7, #8]
 80072a2:	f7f8 ff4d 	bl	8000140 <__udivsi3>
 80072a6:	0003      	movs	r3, r0
 80072a8:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80072aa:	6a3b      	ldr	r3, [r7, #32]
}
 80072ac:	0018      	movs	r0, r3
 80072ae:	46bd      	mov	sp, r7
 80072b0:	b00a      	add	sp, #40	@ 0x28
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	40021000 	.word	0x40021000
 80072b8:	0800c310 	.word	0x0800c310
 80072bc:	00f42400 	.word	0x00f42400
 80072c0:	003d0900 	.word	0x003d0900

080072c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072c8:	4b02      	ldr	r3, [pc, #8]	@ (80072d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80072ca:	681b      	ldr	r3, [r3, #0]
}
 80072cc:	0018      	movs	r0, r3
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	46c0      	nop			@ (mov r8, r8)
 80072d4:	20000004 	.word	0x20000004

080072d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 80072dc:	f7ff fff2 	bl	80072c4 <HAL_RCC_GetHCLKFreq>
 80072e0:	0001      	movs	r1, r0
 80072e2:	4b07      	ldr	r3, [pc, #28]	@ (8007300 <HAL_RCC_GetPCLK1Freq+0x28>)
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	0b1b      	lsrs	r3, r3, #12
 80072e8:	2207      	movs	r2, #7
 80072ea:	4013      	ands	r3, r2
 80072ec:	4a05      	ldr	r2, [pc, #20]	@ (8007304 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80072ee:	5cd3      	ldrb	r3, [r2, r3]
 80072f0:	001a      	movs	r2, r3
 80072f2:	231f      	movs	r3, #31
 80072f4:	4013      	ands	r3, r2
 80072f6:	40d9      	lsrs	r1, r3
 80072f8:	000b      	movs	r3, r1
}
 80072fa:	0018      	movs	r0, r3
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	40021000 	.word	0x40021000
 8007304:	0800c308 	.word	0x0800c308

08007308 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b086      	sub	sp, #24
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007310:	2300      	movs	r3, #0
 8007312:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007314:	4b2f      	ldr	r3, [pc, #188]	@ (80073d4 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007316:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007318:	2380      	movs	r3, #128	@ 0x80
 800731a:	055b      	lsls	r3, r3, #21
 800731c:	4013      	ands	r3, r2
 800731e:	d004      	beq.n	800732a <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007320:	f7ff fa12 	bl	8006748 <HAL_PWREx_GetVoltageRange>
 8007324:	0003      	movs	r3, r0
 8007326:	617b      	str	r3, [r7, #20]
 8007328:	e017      	b.n	800735a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800732a:	4b2a      	ldr	r3, [pc, #168]	@ (80073d4 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 800732c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800732e:	4b29      	ldr	r3, [pc, #164]	@ (80073d4 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007330:	2180      	movs	r1, #128	@ 0x80
 8007332:	0549      	lsls	r1, r1, #21
 8007334:	430a      	orrs	r2, r1
 8007336:	659a      	str	r2, [r3, #88]	@ 0x58
 8007338:	4b26      	ldr	r3, [pc, #152]	@ (80073d4 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 800733a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800733c:	2380      	movs	r3, #128	@ 0x80
 800733e:	055b      	lsls	r3, r3, #21
 8007340:	4013      	ands	r3, r2
 8007342:	60fb      	str	r3, [r7, #12]
 8007344:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007346:	f7ff f9ff 	bl	8006748 <HAL_PWREx_GetVoltageRange>
 800734a:	0003      	movs	r3, r0
 800734c:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800734e:	4b21      	ldr	r3, [pc, #132]	@ (80073d4 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007350:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007352:	4b20      	ldr	r3, [pc, #128]	@ (80073d4 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007354:	4920      	ldr	r1, [pc, #128]	@ (80073d8 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 8007356:	400a      	ands	r2, r1
 8007358:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800735a:	697a      	ldr	r2, [r7, #20]
 800735c:	2380      	movs	r3, #128	@ 0x80
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	429a      	cmp	r2, r3
 8007362:	d111      	bne.n	8007388 <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2b80      	cmp	r3, #128	@ 0x80
 8007368:	d91c      	bls.n	80073a4 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2bb0      	cmp	r3, #176	@ 0xb0
 800736e:	d902      	bls.n	8007376 <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007370:	2302      	movs	r3, #2
 8007372:	613b      	str	r3, [r7, #16]
 8007374:	e016      	b.n	80073a4 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2b90      	cmp	r3, #144	@ 0x90
 800737a:	d902      	bls.n	8007382 <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800737c:	2301      	movs	r3, #1
 800737e:	613b      	str	r3, [r7, #16]
 8007380:	e010      	b.n	80073a4 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 8007382:	2300      	movs	r3, #0
 8007384:	613b      	str	r3, [r7, #16]
 8007386:	e00d      	b.n	80073a4 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2b7f      	cmp	r3, #127	@ 0x7f
 800738c:	d902      	bls.n	8007394 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 800738e:	2302      	movs	r3, #2
 8007390:	613b      	str	r3, [r7, #16]
 8007392:	e007      	b.n	80073a4 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b70      	cmp	r3, #112	@ 0x70
 8007398:	d102      	bne.n	80073a0 <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800739a:	2301      	movs	r3, #1
 800739c:	613b      	str	r3, [r7, #16]
 800739e:	e001      	b.n	80073a4 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80073a0:	2300      	movs	r3, #0
 80073a2:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80073a4:	4b0d      	ldr	r3, [pc, #52]	@ (80073dc <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2207      	movs	r2, #7
 80073aa:	4393      	bics	r3, r2
 80073ac:	0019      	movs	r1, r3
 80073ae:	4b0b      	ldr	r3, [pc, #44]	@ (80073dc <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	430a      	orrs	r2, r1
 80073b4:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80073b6:	4b09      	ldr	r3, [pc, #36]	@ (80073dc <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2207      	movs	r2, #7
 80073bc:	4013      	ands	r3, r2
 80073be:	693a      	ldr	r2, [r7, #16]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d001      	beq.n	80073c8 <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	e000      	b.n	80073ca <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	0018      	movs	r0, r3
 80073cc:	46bd      	mov	sp, r7
 80073ce:	b006      	add	sp, #24
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	46c0      	nop			@ (mov r8, r8)
 80073d4:	40021000 	.word	0x40021000
 80073d8:	efffffff 	.word	0xefffffff
 80073dc:	40022000 	.word	0x40022000

080073e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b086      	sub	sp, #24
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80073e8:	2313      	movs	r3, #19
 80073ea:	18fb      	adds	r3, r7, r3
 80073ec:	2200      	movs	r2, #0
 80073ee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80073f0:	2312      	movs	r3, #18
 80073f2:	18fb      	adds	r3, r7, r3
 80073f4:	2200      	movs	r2, #0
 80073f6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	2380      	movs	r3, #128	@ 0x80
 80073fe:	021b      	lsls	r3, r3, #8
 8007400:	4013      	ands	r3, r2
 8007402:	d100      	bne.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8007404:	e0b7      	b.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007406:	2011      	movs	r0, #17
 8007408:	183b      	adds	r3, r7, r0
 800740a:	2200      	movs	r2, #0
 800740c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800740e:	4b4c      	ldr	r3, [pc, #304]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007410:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007412:	2380      	movs	r3, #128	@ 0x80
 8007414:	055b      	lsls	r3, r3, #21
 8007416:	4013      	ands	r3, r2
 8007418:	d110      	bne.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800741a:	4b49      	ldr	r3, [pc, #292]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800741c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800741e:	4b48      	ldr	r3, [pc, #288]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007420:	2180      	movs	r1, #128	@ 0x80
 8007422:	0549      	lsls	r1, r1, #21
 8007424:	430a      	orrs	r2, r1
 8007426:	659a      	str	r2, [r3, #88]	@ 0x58
 8007428:	4b45      	ldr	r3, [pc, #276]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800742a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800742c:	2380      	movs	r3, #128	@ 0x80
 800742e:	055b      	lsls	r3, r3, #21
 8007430:	4013      	ands	r3, r2
 8007432:	60bb      	str	r3, [r7, #8]
 8007434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007436:	183b      	adds	r3, r7, r0
 8007438:	2201      	movs	r2, #1
 800743a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800743c:	4b41      	ldr	r3, [pc, #260]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	4b40      	ldr	r3, [pc, #256]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007442:	2180      	movs	r1, #128	@ 0x80
 8007444:	0049      	lsls	r1, r1, #1
 8007446:	430a      	orrs	r2, r1
 8007448:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800744a:	f7fe f95b 	bl	8005704 <HAL_GetTick>
 800744e:	0003      	movs	r3, r0
 8007450:	60fb      	str	r3, [r7, #12]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007452:	e00b      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007454:	f7fe f956 	bl	8005704 <HAL_GetTick>
 8007458:	0002      	movs	r2, r0
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	2b02      	cmp	r3, #2
 8007460:	d904      	bls.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8007462:	2313      	movs	r3, #19
 8007464:	18fb      	adds	r3, r7, r3
 8007466:	2203      	movs	r2, #3
 8007468:	701a      	strb	r2, [r3, #0]
        break;
 800746a:	e005      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800746c:	4b35      	ldr	r3, [pc, #212]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	2380      	movs	r3, #128	@ 0x80
 8007472:	005b      	lsls	r3, r3, #1
 8007474:	4013      	ands	r3, r2
 8007476:	d0ed      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8007478:	2313      	movs	r3, #19
 800747a:	18fb      	adds	r3, r7, r3
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d168      	bne.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007482:	4a2f      	ldr	r2, [pc, #188]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007484:	2390      	movs	r3, #144	@ 0x90
 8007486:	58d2      	ldr	r2, [r2, r3]
 8007488:	23c0      	movs	r3, #192	@ 0xc0
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4013      	ands	r3, r2
 800748e:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d01f      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800749a:	697a      	ldr	r2, [r7, #20]
 800749c:	429a      	cmp	r2, r3
 800749e:	d01a      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80074a0:	4a27      	ldr	r2, [pc, #156]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074a2:	2390      	movs	r3, #144	@ 0x90
 80074a4:	58d3      	ldr	r3, [r2, r3]
 80074a6:	4a28      	ldr	r2, [pc, #160]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80074a8:	4013      	ands	r3, r2
 80074aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80074ac:	4a24      	ldr	r2, [pc, #144]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074ae:	2390      	movs	r3, #144	@ 0x90
 80074b0:	58d3      	ldr	r3, [r2, r3]
 80074b2:	4923      	ldr	r1, [pc, #140]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074b4:	2280      	movs	r2, #128	@ 0x80
 80074b6:	0252      	lsls	r2, r2, #9
 80074b8:	4313      	orrs	r3, r2
 80074ba:	2290      	movs	r2, #144	@ 0x90
 80074bc:	508b      	str	r3, [r1, r2]
        __HAL_RCC_BACKUPRESET_RELEASE();
 80074be:	4a20      	ldr	r2, [pc, #128]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074c0:	2390      	movs	r3, #144	@ 0x90
 80074c2:	58d3      	ldr	r3, [r2, r3]
 80074c4:	491e      	ldr	r1, [pc, #120]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074c6:	4a21      	ldr	r2, [pc, #132]	@ (800754c <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 80074c8:	4013      	ands	r3, r2
 80074ca:	2290      	movs	r2, #144	@ 0x90
 80074cc:	508b      	str	r3, [r1, r2]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80074ce:	491c      	ldr	r1, [pc, #112]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074d0:	2290      	movs	r2, #144	@ 0x90
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	508b      	str	r3, [r1, r2]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	2201      	movs	r2, #1
 80074da:	4013      	ands	r3, r2
 80074dc:	d017      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x12e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074de:	f7fe f911 	bl	8005704 <HAL_GetTick>
 80074e2:	0003      	movs	r3, r0
 80074e4:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074e6:	e00c      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074e8:	f7fe f90c 	bl	8005704 <HAL_GetTick>
 80074ec:	0002      	movs	r2, r0
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	4a17      	ldr	r2, [pc, #92]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d904      	bls.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x122>
          {
            ret = HAL_TIMEOUT;
 80074f8:	2313      	movs	r3, #19
 80074fa:	18fb      	adds	r3, r7, r3
 80074fc:	2203      	movs	r2, #3
 80074fe:	701a      	strb	r2, [r3, #0]
            break;
 8007500:	e005      	b.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x12e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007502:	4a0f      	ldr	r2, [pc, #60]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007504:	2390      	movs	r3, #144	@ 0x90
 8007506:	58d3      	ldr	r3, [r2, r3]
 8007508:	2202      	movs	r2, #2
 800750a:	4013      	ands	r3, r2
 800750c:	d0ec      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          }
        }
      }

      if (ret == HAL_OK)
 800750e:	2313      	movs	r3, #19
 8007510:	18fb      	adds	r3, r7, r3
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d10b      	bne.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007518:	4a09      	ldr	r2, [pc, #36]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800751a:	2390      	movs	r3, #144	@ 0x90
 800751c:	58d3      	ldr	r3, [r2, r3]
 800751e:	4a0a      	ldr	r2, [pc, #40]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007520:	401a      	ands	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007526:	4906      	ldr	r1, [pc, #24]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007528:	4313      	orrs	r3, r2
 800752a:	2290      	movs	r2, #144	@ 0x90
 800752c:	508b      	str	r3, [r1, r2]
 800752e:	e017      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007530:	2312      	movs	r3, #18
 8007532:	18fb      	adds	r3, r7, r3
 8007534:	2213      	movs	r2, #19
 8007536:	18ba      	adds	r2, r7, r2
 8007538:	7812      	ldrb	r2, [r2, #0]
 800753a:	701a      	strb	r2, [r3, #0]
 800753c:	e010      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800753e:	46c0      	nop			@ (mov r8, r8)
 8007540:	40021000 	.word	0x40021000
 8007544:	40007000 	.word	0x40007000
 8007548:	fffffcff 	.word	0xfffffcff
 800754c:	fffeffff 	.word	0xfffeffff
 8007550:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007554:	2312      	movs	r3, #18
 8007556:	18fb      	adds	r3, r7, r3
 8007558:	2213      	movs	r2, #19
 800755a:	18ba      	adds	r2, r7, r2
 800755c:	7812      	ldrb	r2, [r2, #0]
 800755e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007560:	2311      	movs	r3, #17
 8007562:	18fb      	adds	r3, r7, r3
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d105      	bne.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800756a:	4ba4      	ldr	r3, [pc, #656]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800756c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800756e:	4ba3      	ldr	r3, [pc, #652]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007570:	49a3      	ldr	r1, [pc, #652]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8007572:	400a      	ands	r2, r1
 8007574:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2201      	movs	r2, #1
 800757c:	4013      	ands	r3, r2
 800757e:	d00b      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007580:	4a9e      	ldr	r2, [pc, #632]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007582:	2388      	movs	r3, #136	@ 0x88
 8007584:	58d3      	ldr	r3, [r2, r3]
 8007586:	2203      	movs	r2, #3
 8007588:	4393      	bics	r3, r2
 800758a:	001a      	movs	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	499a      	ldr	r1, [pc, #616]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007592:	4313      	orrs	r3, r2
 8007594:	2288      	movs	r2, #136	@ 0x88
 8007596:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2202      	movs	r2, #2
 800759e:	4013      	ands	r3, r2
 80075a0:	d00b      	beq.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80075a2:	4a96      	ldr	r2, [pc, #600]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80075a4:	2388      	movs	r3, #136	@ 0x88
 80075a6:	58d3      	ldr	r3, [r2, r3]
 80075a8:	220c      	movs	r2, #12
 80075aa:	4393      	bics	r3, r2
 80075ac:	001a      	movs	r2, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	4992      	ldr	r1, [pc, #584]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	2288      	movs	r2, #136	@ 0x88
 80075b8:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2210      	movs	r2, #16
 80075c0:	4013      	ands	r3, r2
 80075c2:	d00a      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80075c4:	4a8d      	ldr	r2, [pc, #564]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80075c6:	2388      	movs	r3, #136	@ 0x88
 80075c8:	58d3      	ldr	r3, [r2, r3]
 80075ca:	4a8e      	ldr	r2, [pc, #568]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80075cc:	401a      	ands	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	695b      	ldr	r3, [r3, #20]
 80075d2:	498a      	ldr	r1, [pc, #552]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80075d4:	4313      	orrs	r3, r2
 80075d6:	2288      	movs	r2, #136	@ 0x88
 80075d8:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2208      	movs	r2, #8
 80075e0:	4013      	ands	r3, r2
 80075e2:	d00a      	beq.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80075e4:	4a85      	ldr	r2, [pc, #532]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80075e6:	2388      	movs	r3, #136	@ 0x88
 80075e8:	58d3      	ldr	r3, [r2, r3]
 80075ea:	4a87      	ldr	r2, [pc, #540]	@ (8007808 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80075ec:	401a      	ands	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	4982      	ldr	r1, [pc, #520]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80075f4:	4313      	orrs	r3, r2
 80075f6:	2288      	movs	r2, #136	@ 0x88
 80075f8:	508b      	str	r3, [r1, r2]
  }
#if defined (LPUART3)
  /*-------------------------- LPUART3 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART3) == RCC_PERIPHCLK_LPUART3)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2204      	movs	r2, #4
 8007600:	4013      	ands	r3, r2
 8007602:	d00b      	beq.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART3CLKSOURCE(PeriphClkInit->Lpuart3ClockSelection));

    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
 8007604:	4a7d      	ldr	r2, [pc, #500]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007606:	2388      	movs	r3, #136	@ 0x88
 8007608:	58d3      	ldr	r3, [r2, r3]
 800760a:	22c0      	movs	r2, #192	@ 0xc0
 800760c:	4393      	bics	r3, r2
 800760e:	001a      	movs	r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	4979      	ldr	r1, [pc, #484]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007616:	4313      	orrs	r3, r2
 8007618:	2288      	movs	r2, #136	@ 0x88
 800761a:	508b      	str	r3, [r1, r2]
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2220      	movs	r2, #32
 8007622:	4013      	ands	r3, r2
 8007624:	d00a      	beq.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007626:	4a75      	ldr	r2, [pc, #468]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007628:	2388      	movs	r3, #136	@ 0x88
 800762a:	58d3      	ldr	r3, [r2, r3]
 800762c:	4a77      	ldr	r2, [pc, #476]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800762e:	401a      	ands	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	4971      	ldr	r1, [pc, #452]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007636:	4313      	orrs	r3, r2
 8007638:	2288      	movs	r2, #136	@ 0x88
 800763a:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2240      	movs	r2, #64	@ 0x40
 8007642:	4013      	ands	r3, r2
 8007644:	d00a      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007646:	4a6d      	ldr	r2, [pc, #436]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007648:	2388      	movs	r3, #136	@ 0x88
 800764a:	58d3      	ldr	r3, [r2, r3]
 800764c:	4a70      	ldr	r2, [pc, #448]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 800764e:	401a      	ands	r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	69db      	ldr	r3, [r3, #28]
 8007654:	4969      	ldr	r1, [pc, #420]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007656:	4313      	orrs	r3, r2
 8007658:	2288      	movs	r2, #136	@ 0x88
 800765a:	508b      	str	r3, [r1, r2]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2280      	movs	r2, #128	@ 0x80
 8007662:	4013      	ands	r3, r2
 8007664:	d00a      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007666:	4a65      	ldr	r2, [pc, #404]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007668:	2388      	movs	r3, #136	@ 0x88
 800766a:	58d3      	ldr	r3, [r2, r3]
 800766c:	4a69      	ldr	r2, [pc, #420]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800766e:	401a      	ands	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a1b      	ldr	r3, [r3, #32]
 8007674:	4961      	ldr	r1, [pc, #388]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007676:	4313      	orrs	r3, r2
 8007678:	2288      	movs	r2, #136	@ 0x88
 800767a:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	2380      	movs	r3, #128	@ 0x80
 8007682:	005b      	lsls	r3, r3, #1
 8007684:	4013      	ands	r3, r2
 8007686:	d00a      	beq.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007688:	4a5c      	ldr	r2, [pc, #368]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800768a:	2388      	movs	r3, #136	@ 0x88
 800768c:	58d3      	ldr	r3, [r2, r3]
 800768e:	4a62      	ldr	r2, [pc, #392]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007690:	401a      	ands	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007696:	4959      	ldr	r1, [pc, #356]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007698:	4313      	orrs	r3, r2
 800769a:	2288      	movs	r2, #136	@ 0x88
 800769c:	508b      	str	r3, [r1, r2]
  }
#if defined (LPTIM3)
  /*----------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	2380      	movs	r3, #128	@ 0x80
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	4013      	ands	r3, r2
 80076a8:	d00a      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80076aa:	4a54      	ldr	r2, [pc, #336]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80076ac:	2388      	movs	r3, #136	@ 0x88
 80076ae:	58d3      	ldr	r3, [r2, r3]
 80076b0:	4a5a      	ldr	r2, [pc, #360]	@ (800781c <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 80076b2:	401a      	ands	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b8:	4950      	ldr	r1, [pc, #320]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80076ba:	4313      	orrs	r3, r2
 80076bc:	2288      	movs	r2, #136	@ 0x88
 80076be:	508b      	str	r3, [r1, r2]
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	2380      	movs	r3, #128	@ 0x80
 80076c6:	01db      	lsls	r3, r3, #7
 80076c8:	4013      	ands	r3, r2
 80076ca:	d017      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80076d0:	2380      	movs	r3, #128	@ 0x80
 80076d2:	055b      	lsls	r3, r3, #21
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d106      	bne.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x306>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 80076d8:	4b48      	ldr	r3, [pc, #288]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80076da:	68da      	ldr	r2, [r3, #12]
 80076dc:	4b47      	ldr	r3, [pc, #284]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80076de:	2180      	movs	r1, #128	@ 0x80
 80076e0:	0249      	lsls	r1, r1, #9
 80076e2:	430a      	orrs	r2, r1
 80076e4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80076e6:	4a45      	ldr	r2, [pc, #276]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80076e8:	2388      	movs	r3, #136	@ 0x88
 80076ea:	58d3      	ldr	r3, [r2, r3]
 80076ec:	4a4c      	ldr	r2, [pc, #304]	@ (8007820 <HAL_RCCEx_PeriphCLKConfig+0x440>)
 80076ee:	401a      	ands	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076f4:	4941      	ldr	r1, [pc, #260]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80076f6:	4313      	orrs	r3, r2
 80076f8:	2288      	movs	r2, #136	@ 0x88
 80076fa:	508b      	str	r3, [r1, r2]
  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	2380      	movs	r3, #128	@ 0x80
 8007702:	015b      	lsls	r3, r3, #5
 8007704:	4013      	ands	r3, r2
 8007706:	d017      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLQ)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800770c:	2380      	movs	r3, #128	@ 0x80
 800770e:	051b      	lsls	r3, r3, #20
 8007710:	429a      	cmp	r2, r3
 8007712:	d106      	bne.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8007714:	4b39      	ldr	r3, [pc, #228]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007716:	68da      	ldr	r2, [r3, #12]
 8007718:	4b38      	ldr	r3, [pc, #224]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800771a:	2180      	movs	r1, #128	@ 0x80
 800771c:	0449      	lsls	r1, r1, #17
 800771e:	430a      	orrs	r2, r1
 8007720:	60da      	str	r2, [r3, #12]
    }
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007722:	4a36      	ldr	r2, [pc, #216]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007724:	2388      	movs	r3, #136	@ 0x88
 8007726:	58d3      	ldr	r3, [r2, r3]
 8007728:	4a3e      	ldr	r2, [pc, #248]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800772a:	401a      	ands	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007730:	4932      	ldr	r1, [pc, #200]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007732:	4313      	orrs	r3, r2
 8007734:	2288      	movs	r2, #136	@ 0x88
 8007736:	508b      	str	r3, [r1, r2]

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	2380      	movs	r3, #128	@ 0x80
 800773e:	019b      	lsls	r3, r3, #6
 8007740:	4013      	ands	r3, r2
 8007742:	d017      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007748:	2380      	movs	r3, #128	@ 0x80
 800774a:	051b      	lsls	r3, r3, #20
 800774c:	429a      	cmp	r2, r3
 800774e:	d106      	bne.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x37e>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8007750:	4b2a      	ldr	r3, [pc, #168]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007752:	68da      	ldr	r2, [r3, #12]
 8007754:	4b29      	ldr	r3, [pc, #164]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007756:	2180      	movs	r1, #128	@ 0x80
 8007758:	0449      	lsls	r1, r1, #17
 800775a:	430a      	orrs	r2, r1
 800775c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800775e:	4a27      	ldr	r2, [pc, #156]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007760:	2388      	movs	r3, #136	@ 0x88
 8007762:	58d3      	ldr	r3, [r2, r3]
 8007764:	4a2f      	ldr	r2, [pc, #188]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007766:	401a      	ands	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800776c:	4923      	ldr	r1, [pc, #140]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800776e:	4313      	orrs	r3, r2
 8007770:	2288      	movs	r2, #136	@ 0x88
 8007772:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	2380      	movs	r3, #128	@ 0x80
 800777a:	00db      	lsls	r3, r3, #3
 800777c:	4013      	ands	r3, r2
 800777e:	d017      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007784:	2380      	movs	r3, #128	@ 0x80
 8007786:	045b      	lsls	r3, r3, #17
 8007788:	429a      	cmp	r2, r3
 800778a:	d106      	bne.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 800778c:	4b1b      	ldr	r3, [pc, #108]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800778e:	68da      	ldr	r2, [r3, #12]
 8007790:	4b1a      	ldr	r3, [pc, #104]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007792:	2180      	movs	r1, #128	@ 0x80
 8007794:	0449      	lsls	r1, r1, #17
 8007796:	430a      	orrs	r2, r1
 8007798:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800779a:	4a18      	ldr	r2, [pc, #96]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800779c:	2388      	movs	r3, #136	@ 0x88
 800779e:	58d3      	ldr	r3, [r2, r3]
 80077a0:	4a21      	ldr	r2, [pc, #132]	@ (8007828 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 80077a2:	401a      	ands	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077a8:	4914      	ldr	r1, [pc, #80]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80077aa:	4313      	orrs	r3, r2
 80077ac:	2288      	movs	r2, #136	@ 0x88
 80077ae:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	2380      	movs	r3, #128	@ 0x80
 80077b6:	011b      	lsls	r3, r3, #4
 80077b8:	4013      	ands	r3, r2
 80077ba:	d017      	beq.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077c0:	2380      	movs	r3, #128	@ 0x80
 80077c2:	049b      	lsls	r3, r3, #18
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d106      	bne.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 80077c8:	4b0c      	ldr	r3, [pc, #48]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80077ca:	68da      	ldr	r2, [r3, #12]
 80077cc:	4b0b      	ldr	r3, [pc, #44]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80077ce:	2180      	movs	r1, #128	@ 0x80
 80077d0:	0449      	lsls	r1, r1, #17
 80077d2:	430a      	orrs	r2, r1
 80077d4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80077d6:	4a09      	ldr	r2, [pc, #36]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80077d8:	2388      	movs	r3, #136	@ 0x88
 80077da:	58d3      	ldr	r3, [r2, r3]
 80077dc:	4a12      	ldr	r2, [pc, #72]	@ (8007828 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 80077de:	401a      	ands	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077e4:	4905      	ldr	r1, [pc, #20]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80077e6:	4313      	orrs	r3, r2
 80077e8:	2288      	movs	r2, #136	@ 0x88
 80077ea:	508b      	str	r3, [r1, r2]

  }

  return status;
 80077ec:	2312      	movs	r3, #18
 80077ee:	18fb      	adds	r3, r7, r3
 80077f0:	781b      	ldrb	r3, [r3, #0]
}
 80077f2:	0018      	movs	r0, r3
 80077f4:	46bd      	mov	sp, r7
 80077f6:	b006      	add	sp, #24
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	46c0      	nop			@ (mov r8, r8)
 80077fc:	40021000 	.word	0x40021000
 8007800:	efffffff 	.word	0xefffffff
 8007804:	fffff3ff 	.word	0xfffff3ff
 8007808:	fffffcff 	.word	0xfffffcff
 800780c:	ffffcfff 	.word	0xffffcfff
 8007810:	fffcffff 	.word	0xfffcffff
 8007814:	fff3ffff 	.word	0xfff3ffff
 8007818:	ffcfffff 	.word	0xffcfffff
 800781c:	ff3fffff 	.word	0xff3fffff
 8007820:	cfffffff 	.word	0xcfffffff
 8007824:	f3ffffff 	.word	0xf3ffffff
 8007828:	feffffff 	.word	0xfeffffff

0800782c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM1  TIM1 peripheral clock (only for devices with TIM1)
  *            @arg @ref RCC_PERIPHCLK_TIM15  TIM15 peripheral clock (only for devices with TIM15)
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800782c:	b590      	push	{r4, r7, lr}
 800782e:	b089      	sub	sp, #36	@ 0x24
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8007834:	2300      	movs	r3, #0
 8007836:	61fb      	str	r3, [r7, #28]
  PLL_ClocksTypeDef pll_freq;
  uint32_t msirange;
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	2380      	movs	r3, #128	@ 0x80
 800783c:	021b      	lsls	r3, r3, #8
 800783e:	429a      	cmp	r2, r3
 8007840:	d154      	bne.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
  {
    /* Get the current RCC_PERIPHCLK_RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007842:	4ad5      	ldr	r2, [pc, #852]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007844:	2390      	movs	r3, #144	@ 0x90
 8007846:	58d2      	ldr	r2, [r2, r3]
 8007848:	23c0      	movs	r3, #192	@ 0xc0
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4013      	ands	r3, r2
 800784e:	617b      	str	r3, [r7, #20]

    switch (srcclk)
 8007850:	697a      	ldr	r2, [r7, #20]
 8007852:	23c0      	movs	r3, #192	@ 0xc0
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	429a      	cmp	r2, r3
 8007858:	d039      	beq.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 800785a:	697a      	ldr	r2, [r7, #20]
 800785c:	23c0      	movs	r3, #192	@ 0xc0
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	429a      	cmp	r2, r3
 8007862:	d901      	bls.n	8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8007864:	f000 fd1a 	bl	800829c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8007868:	697a      	ldr	r2, [r7, #20]
 800786a:	2380      	movs	r3, #128	@ 0x80
 800786c:	005b      	lsls	r3, r3, #1
 800786e:	429a      	cmp	r2, r3
 8007870:	d006      	beq.n	8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8007872:	697a      	ldr	r2, [r7, #20]
 8007874:	2380      	movs	r3, #128	@ 0x80
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	429a      	cmp	r2, r3
 800787a:	d00f      	beq.n	800789c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 800787c:	f000 fd0e 	bl	800829c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007880:	4ac5      	ldr	r2, [pc, #788]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007882:	2390      	movs	r3, #144	@ 0x90
 8007884:	58d3      	ldr	r3, [r2, r3]
 8007886:	2202      	movs	r2, #2
 8007888:	4013      	ands	r3, r2
 800788a:	2b02      	cmp	r3, #2
 800788c:	d001      	beq.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 800788e:	f000 fd07 	bl	80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
          frequency = LSE_VALUE;
 8007892:	2380      	movs	r3, #128	@ 0x80
 8007894:	021b      	lsls	r3, r3, #8
 8007896:	61fb      	str	r3, [r7, #28]
        break;
 8007898:	f000 fd02 	bl	80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800789c:	4abe      	ldr	r2, [pc, #760]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800789e:	2394      	movs	r3, #148	@ 0x94
 80078a0:	58d3      	ldr	r3, [r2, r3]
 80078a2:	2202      	movs	r2, #2
 80078a4:	4013      	ands	r3, r2
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d001      	beq.n	80078ae <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 80078aa:	f000 fcfb 	bl	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80078ae:	4aba      	ldr	r2, [pc, #744]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80078b0:	2394      	movs	r3, #148	@ 0x94
 80078b2:	58d3      	ldr	r3, [r2, r3]
 80078b4:	2204      	movs	r2, #4
 80078b6:	4013      	ands	r3, r2
 80078b8:	2b04      	cmp	r3, #4
 80078ba:	d103      	bne.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSI_VALUE / 128U;
 80078bc:	23fa      	movs	r3, #250	@ 0xfa
 80078be:	61fb      	str	r3, [r7, #28]
        break;
 80078c0:	f000 fcf0 	bl	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
            frequency = LSI_VALUE;
 80078c4:	23fa      	movs	r3, #250	@ 0xfa
 80078c6:	01db      	lsls	r3, r3, #7
 80078c8:	61fb      	str	r3, [r7, #28]
        break;
 80078ca:	f000 fceb 	bl	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80078ce:	4bb2      	ldr	r3, [pc, #712]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	2380      	movs	r3, #128	@ 0x80
 80078d4:	029b      	lsls	r3, r3, #10
 80078d6:	401a      	ands	r2, r3
 80078d8:	2380      	movs	r3, #128	@ 0x80
 80078da:	029b      	lsls	r3, r3, #10
 80078dc:	429a      	cmp	r2, r3
 80078de:	d001      	beq.n	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 80078e0:	f000 fce2 	bl	80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
          frequency = HSE_VALUE / 32U;
 80078e4:	4bad      	ldr	r3, [pc, #692]	@ (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 80078e6:	61fb      	str	r3, [r7, #28]
        break;
 80078e8:	f000 fcde 	bl	80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	2380      	movs	r3, #128	@ 0x80
 80078f0:	029b      	lsls	r3, r3, #10
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d100      	bne.n	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 80078f6:	e11a      	b.n	8007b2e <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	2380      	movs	r3, #128	@ 0x80
 80078fc:	029b      	lsls	r3, r3, #10
 80078fe:	429a      	cmp	r2, r3
 8007900:	d901      	bls.n	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8007902:	f000 fcd3 	bl	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	2380      	movs	r3, #128	@ 0x80
 800790a:	025b      	lsls	r3, r3, #9
 800790c:	429a      	cmp	r2, r3
 800790e:	d100      	bne.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8007910:	e10d      	b.n	8007b2e <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	2380      	movs	r3, #128	@ 0x80
 8007916:	025b      	lsls	r3, r3, #9
 8007918:	429a      	cmp	r2, r3
 800791a:	d901      	bls.n	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800791c:	f000 fcc6 	bl	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	2380      	movs	r3, #128	@ 0x80
 8007924:	01db      	lsls	r3, r3, #7
 8007926:	429a      	cmp	r2, r3
 8007928:	d100      	bne.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800792a:	e1eb      	b.n	8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	2380      	movs	r3, #128	@ 0x80
 8007930:	01db      	lsls	r3, r3, #7
 8007932:	429a      	cmp	r2, r3
 8007934:	d901      	bls.n	800793a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8007936:	f000 fcb9 	bl	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	2380      	movs	r3, #128	@ 0x80
 800793e:	019b      	lsls	r3, r3, #6
 8007940:	429a      	cmp	r2, r3
 8007942:	d101      	bne.n	8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 8007944:	f000 fc50 	bl	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	2380      	movs	r3, #128	@ 0x80
 800794c:	019b      	lsls	r3, r3, #6
 800794e:	429a      	cmp	r2, r3
 8007950:	d901      	bls.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8007952:	f000 fcab 	bl	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	2380      	movs	r3, #128	@ 0x80
 800795a:	015b      	lsls	r3, r3, #5
 800795c:	429a      	cmp	r2, r3
 800795e:	d101      	bne.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007960:	f000 fbe2 	bl	8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	2380      	movs	r3, #128	@ 0x80
 8007968:	015b      	lsls	r3, r3, #5
 800796a:	429a      	cmp	r2, r3
 800796c:	d901      	bls.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800796e:	f000 fc9d 	bl	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	2380      	movs	r3, #128	@ 0x80
 8007976:	011b      	lsls	r3, r3, #4
 8007978:	429a      	cmp	r2, r3
 800797a:	d101      	bne.n	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800797c:	f000 fba9 	bl	80080d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	2380      	movs	r3, #128	@ 0x80
 8007984:	011b      	lsls	r3, r3, #4
 8007986:	429a      	cmp	r2, r3
 8007988:	d901      	bls.n	800798e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 800798a:	f000 fc8f 	bl	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	2380      	movs	r3, #128	@ 0x80
 8007992:	00db      	lsls	r3, r3, #3
 8007994:	429a      	cmp	r2, r3
 8007996:	d101      	bne.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8007998:	f000 fb70 	bl	800807c <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	2380      	movs	r3, #128	@ 0x80
 80079a0:	00db      	lsls	r3, r3, #3
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d901      	bls.n	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 80079a6:	f000 fc81 	bl	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	2380      	movs	r3, #128	@ 0x80
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d100      	bne.n	80079b6 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 80079b4:	e305      	b.n	8007fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x796>
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	2380      	movs	r3, #128	@ 0x80
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	429a      	cmp	r2, r3
 80079be:	d901      	bls.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 80079c0:	f000 fc74 	bl	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	2380      	movs	r3, #128	@ 0x80
 80079c8:	005b      	lsls	r3, r3, #1
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d100      	bne.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80079ce:	e29b      	b.n	8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	2380      	movs	r3, #128	@ 0x80
 80079d4:	005b      	lsls	r3, r3, #1
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d901      	bls.n	80079de <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 80079da:	f000 fc67 	bl	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2b80      	cmp	r3, #128	@ 0x80
 80079e2:	d100      	bne.n	80079e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 80079e4:	e22f      	b.n	8007e46 <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2b80      	cmp	r3, #128	@ 0x80
 80079ea:	d901      	bls.n	80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 80079ec:	f000 fc5e 	bl	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b20      	cmp	r3, #32
 80079f4:	d80f      	bhi.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d101      	bne.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 80079fc:	f000 fc56 	bl	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2b20      	cmp	r3, #32
 8007a04:	d901      	bls.n	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 8007a06:	f000 fc51 	bl	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	009a      	lsls	r2, r3, #2
 8007a0e:	4b64      	ldr	r3, [pc, #400]	@ (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 8007a10:	18d3      	adds	r3, r2, r3
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	469f      	mov	pc, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2b40      	cmp	r3, #64	@ 0x40
 8007a1a:	d100      	bne.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 8007a1c:	e1df      	b.n	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            break;
        }
        break;
      }
      default:
        break;
 8007a1e:	f000 fc45 	bl	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007a22:	4a5d      	ldr	r2, [pc, #372]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007a24:	2388      	movs	r3, #136	@ 0x88
 8007a26:	58d3      	ldr	r3, [r2, r3]
 8007a28:	2203      	movs	r2, #3
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	617b      	str	r3, [r7, #20]
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	2b03      	cmp	r3, #3
 8007a32:	d025      	beq.n	8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	2b03      	cmp	r3, #3
 8007a38:	d82d      	bhi.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	d013      	beq.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d827      	bhi.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d003      	beq.n	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d005      	beq.n	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0x232>
            break;
 8007a52:	e020      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
            frequency = HAL_RCC_GetPCLK1Freq();
 8007a54:	f7ff fc40 	bl	80072d8 <HAL_RCC_GetPCLK1Freq>
 8007a58:	0003      	movs	r3, r0
 8007a5a:	61fb      	str	r3, [r7, #28]
            break;
 8007a5c:	e022      	b.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            frequency = HAL_RCC_GetSysClockFreq();
 8007a5e:	f7ff fb95 	bl	800718c <HAL_RCC_GetSysClockFreq>
 8007a62:	0003      	movs	r3, r0
 8007a64:	61fb      	str	r3, [r7, #28]
            break;
 8007a66:	e01d      	b.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a68:	4b4b      	ldr	r3, [pc, #300]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	2380      	movs	r3, #128	@ 0x80
 8007a6e:	00db      	lsls	r3, r3, #3
 8007a70:	401a      	ands	r2, r3
 8007a72:	2380      	movs	r3, #128	@ 0x80
 8007a74:	00db      	lsls	r3, r3, #3
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d110      	bne.n	8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
              frequency = HSI_VALUE;
 8007a7a:	4b4a      	ldr	r3, [pc, #296]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 8007a7c:	61fb      	str	r3, [r7, #28]
            break;
 8007a7e:	e00d      	b.n	8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007a80:	4a45      	ldr	r2, [pc, #276]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007a82:	2390      	movs	r3, #144	@ 0x90
 8007a84:	58d3      	ldr	r3, [r2, r3]
 8007a86:	2202      	movs	r2, #2
 8007a88:	4013      	ands	r3, r2
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d109      	bne.n	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
              frequency = LSE_VALUE;
 8007a8e:	2380      	movs	r3, #128	@ 0x80
 8007a90:	021b      	lsls	r3, r3, #8
 8007a92:	61fb      	str	r3, [r7, #28]
            break;
 8007a94:	e005      	b.n	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
            break;
 8007a96:	46c0      	nop			@ (mov r8, r8)
 8007a98:	f000 fc09 	bl	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007a9c:	46c0      	nop			@ (mov r8, r8)
 8007a9e:	f000 fc06 	bl	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007aa2:	46c0      	nop			@ (mov r8, r8)
        break;
 8007aa4:	f000 fc03 	bl	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007aa8:	4a3b      	ldr	r2, [pc, #236]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007aaa:	2388      	movs	r3, #136	@ 0x88
 8007aac:	58d3      	ldr	r3, [r2, r3]
 8007aae:	220c      	movs	r2, #12
 8007ab0:	4013      	ands	r3, r2
 8007ab2:	617b      	str	r3, [r7, #20]
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	2b0c      	cmp	r3, #12
 8007ab8:	d025      	beq.n	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0x2da>
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	2b0c      	cmp	r3, #12
 8007abe:	d82d      	bhi.n	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	2b08      	cmp	r3, #8
 8007ac4:	d013      	beq.n	8007aee <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	2b08      	cmp	r3, #8
 8007aca:	d827      	bhi.n	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d003      	beq.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	2b04      	cmp	r3, #4
 8007ad6:	d005      	beq.n	8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
            break;
 8007ad8:	e020      	b.n	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
            frequency = HAL_RCC_GetPCLK1Freq();
 8007ada:	f7ff fbfd 	bl	80072d8 <HAL_RCC_GetPCLK1Freq>
 8007ade:	0003      	movs	r3, r0
 8007ae0:	61fb      	str	r3, [r7, #28]
            break;
 8007ae2:	e022      	b.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            frequency = HAL_RCC_GetSysClockFreq();
 8007ae4:	f7ff fb52 	bl	800718c <HAL_RCC_GetSysClockFreq>
 8007ae8:	0003      	movs	r3, r0
 8007aea:	61fb      	str	r3, [r7, #28]
            break;
 8007aec:	e01d      	b.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007aee:	4b2a      	ldr	r3, [pc, #168]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	2380      	movs	r3, #128	@ 0x80
 8007af4:	00db      	lsls	r3, r3, #3
 8007af6:	401a      	ands	r2, r3
 8007af8:	2380      	movs	r3, #128	@ 0x80
 8007afa:	00db      	lsls	r3, r3, #3
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d110      	bne.n	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
              frequency = HSI_VALUE;
 8007b00:	4b28      	ldr	r3, [pc, #160]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 8007b02:	61fb      	str	r3, [r7, #28]
            break;
 8007b04:	e00d      	b.n	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007b06:	4a24      	ldr	r2, [pc, #144]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007b08:	2390      	movs	r3, #144	@ 0x90
 8007b0a:	58d3      	ldr	r3, [r2, r3]
 8007b0c:	2202      	movs	r2, #2
 8007b0e:	4013      	ands	r3, r2
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d109      	bne.n	8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
              frequency = LSE_VALUE;
 8007b14:	2380      	movs	r3, #128	@ 0x80
 8007b16:	021b      	lsls	r3, r3, #8
 8007b18:	61fb      	str	r3, [r7, #28]
            break;
 8007b1a:	e005      	b.n	8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
            break;
 8007b1c:	46c0      	nop			@ (mov r8, r8)
 8007b1e:	f000 fbc6 	bl	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007b22:	46c0      	nop			@ (mov r8, r8)
 8007b24:	f000 fbc3 	bl	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007b28:	46c0      	nop			@ (mov r8, r8)
        break;
 8007b2a:	f000 fbc0 	bl	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        frequency = HAL_RCC_GetPCLK1Freq();
 8007b2e:	f7ff fbd3 	bl	80072d8 <HAL_RCC_GetPCLK1Freq>
 8007b32:	0003      	movs	r3, r0
 8007b34:	61fb      	str	r3, [r7, #28]
        break;
 8007b36:	f000 fbba 	bl	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007b3a:	4a17      	ldr	r2, [pc, #92]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007b3c:	2388      	movs	r3, #136	@ 0x88
 8007b3e:	58d2      	ldr	r2, [r2, r3]
 8007b40:	23c0      	movs	r3, #192	@ 0xc0
 8007b42:	011b      	lsls	r3, r3, #4
 8007b44:	4013      	ands	r3, r2
 8007b46:	617b      	str	r3, [r7, #20]
 8007b48:	697a      	ldr	r2, [r7, #20]
 8007b4a:	23c0      	movs	r3, #192	@ 0xc0
 8007b4c:	011b      	lsls	r3, r3, #4
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d036      	beq.n	8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8007b52:	697a      	ldr	r2, [r7, #20]
 8007b54:	23c0      	movs	r3, #192	@ 0xc0
 8007b56:	011b      	lsls	r3, r3, #4
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d83c      	bhi.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8007b5c:	697a      	ldr	r2, [r7, #20]
 8007b5e:	2380      	movs	r3, #128	@ 0x80
 8007b60:	011b      	lsls	r3, r3, #4
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d020      	beq.n	8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	2380      	movs	r3, #128	@ 0x80
 8007b6a:	011b      	lsls	r3, r3, #4
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d832      	bhi.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d005      	beq.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8007b76:	697a      	ldr	r2, [r7, #20]
 8007b78:	2380      	movs	r3, #128	@ 0x80
 8007b7a:	00db      	lsls	r3, r3, #3
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d005      	beq.n	8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
            break;
 8007b80:	e029      	b.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 8007b82:	f7ff fba9 	bl	80072d8 <HAL_RCC_GetPCLK1Freq>
 8007b86:	0003      	movs	r3, r0
 8007b88:	61fb      	str	r3, [r7, #28]
            break;
 8007b8a:	e02b      	b.n	8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
            frequency = HAL_RCC_GetSysClockFreq();
 8007b8c:	f7ff fafe 	bl	800718c <HAL_RCC_GetSysClockFreq>
 8007b90:	0003      	movs	r3, r0
 8007b92:	61fb      	str	r3, [r7, #28]
            break;
 8007b94:	e026      	b.n	8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8007b96:	46c0      	nop			@ (mov r8, r8)
 8007b98:	40021000 	.word	0x40021000
 8007b9c:	0001e848 	.word	0x0001e848
 8007ba0:	0800c340 	.word	0x0800c340
 8007ba4:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ba8:	4bbb      	ldr	r3, [pc, #748]	@ (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	2380      	movs	r3, #128	@ 0x80
 8007bae:	00db      	lsls	r3, r3, #3
 8007bb0:	401a      	ands	r2, r3
 8007bb2:	2380      	movs	r3, #128	@ 0x80
 8007bb4:	00db      	lsls	r3, r3, #3
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d110      	bne.n	8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
              frequency = HSI_VALUE;
 8007bba:	4bb8      	ldr	r3, [pc, #736]	@ (8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8007bbc:	61fb      	str	r3, [r7, #28]
            break;
 8007bbe:	e00d      	b.n	8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007bc0:	4ab5      	ldr	r2, [pc, #724]	@ (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8007bc2:	2390      	movs	r3, #144	@ 0x90
 8007bc4:	58d3      	ldr	r3, [r2, r3]
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	4013      	ands	r3, r2
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d109      	bne.n	8007be2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
              frequency = LSE_VALUE;
 8007bce:	2380      	movs	r3, #128	@ 0x80
 8007bd0:	021b      	lsls	r3, r3, #8
 8007bd2:	61fb      	str	r3, [r7, #28]
            break;
 8007bd4:	e005      	b.n	8007be2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
            break;
 8007bd6:	46c0      	nop			@ (mov r8, r8)
 8007bd8:	f000 fb69 	bl	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007bdc:	46c0      	nop			@ (mov r8, r8)
 8007bde:	f000 fb66 	bl	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007be2:	46c0      	nop			@ (mov r8, r8)
        break;
 8007be4:	f000 fb63 	bl	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 8007be8:	4aab      	ldr	r2, [pc, #684]	@ (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8007bea:	2388      	movs	r3, #136	@ 0x88
 8007bec:	58d2      	ldr	r2, [r2, r3]
 8007bee:	23c0      	movs	r3, #192	@ 0xc0
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	617b      	str	r3, [r7, #20]
 8007bf6:	697a      	ldr	r2, [r7, #20]
 8007bf8:	23c0      	movs	r3, #192	@ 0xc0
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d02d      	beq.n	8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0x430>
 8007c00:	697a      	ldr	r2, [r7, #20]
 8007c02:	23c0      	movs	r3, #192	@ 0xc0
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d833      	bhi.n	8007c72 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8007c0a:	697a      	ldr	r2, [r7, #20]
 8007c0c:	2380      	movs	r3, #128	@ 0x80
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d017      	beq.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8007c14:	697a      	ldr	r2, [r7, #20]
 8007c16:	2380      	movs	r3, #128	@ 0x80
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d829      	bhi.n	8007c72 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d005      	beq.n	8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 8007c24:	697a      	ldr	r2, [r7, #20]
 8007c26:	2380      	movs	r3, #128	@ 0x80
 8007c28:	005b      	lsls	r3, r3, #1
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d005      	beq.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            break;
 8007c2e:	e020      	b.n	8007c72 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
            frequency = HAL_RCC_GetPCLK1Freq();
 8007c30:	f7ff fb52 	bl	80072d8 <HAL_RCC_GetPCLK1Freq>
 8007c34:	0003      	movs	r3, r0
 8007c36:	61fb      	str	r3, [r7, #28]
            break;
 8007c38:	e022      	b.n	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            frequency = HAL_RCC_GetSysClockFreq();
 8007c3a:	f7ff faa7 	bl	800718c <HAL_RCC_GetSysClockFreq>
 8007c3e:	0003      	movs	r3, r0
 8007c40:	61fb      	str	r3, [r7, #28]
            break;
 8007c42:	e01d      	b.n	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007c44:	4b94      	ldr	r3, [pc, #592]	@ (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	2380      	movs	r3, #128	@ 0x80
 8007c4a:	00db      	lsls	r3, r3, #3
 8007c4c:	401a      	ands	r2, r3
 8007c4e:	2380      	movs	r3, #128	@ 0x80
 8007c50:	00db      	lsls	r3, r3, #3
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d110      	bne.n	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
              frequency = HSI_VALUE;
 8007c56:	4b91      	ldr	r3, [pc, #580]	@ (8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8007c58:	61fb      	str	r3, [r7, #28]
            break;
 8007c5a:	e00d      	b.n	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007c5c:	4a8e      	ldr	r2, [pc, #568]	@ (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8007c5e:	2390      	movs	r3, #144	@ 0x90
 8007c60:	58d3      	ldr	r3, [r2, r3]
 8007c62:	2202      	movs	r2, #2
 8007c64:	4013      	ands	r3, r2
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d109      	bne.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
              frequency = LSE_VALUE;
 8007c6a:	2380      	movs	r3, #128	@ 0x80
 8007c6c:	021b      	lsls	r3, r3, #8
 8007c6e:	61fb      	str	r3, [r7, #28]
            break;
 8007c70:	e005      	b.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            break;
 8007c72:	46c0      	nop			@ (mov r8, r8)
 8007c74:	f000 fb1b 	bl	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007c78:	46c0      	nop			@ (mov r8, r8)
 8007c7a:	f000 fb18 	bl	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007c7e:	46c0      	nop			@ (mov r8, r8)
        break;
 8007c80:	f000 fb15 	bl	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART3_SOURCE();
 8007c84:	4a84      	ldr	r2, [pc, #528]	@ (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8007c86:	2388      	movs	r3, #136	@ 0x88
 8007c88:	58d3      	ldr	r3, [r2, r3]
 8007c8a:	22c0      	movs	r2, #192	@ 0xc0
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	617b      	str	r3, [r7, #20]
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	2bc0      	cmp	r3, #192	@ 0xc0
 8007c94:	d025      	beq.n	8007ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	2bc0      	cmp	r3, #192	@ 0xc0
 8007c9a:	d82d      	bhi.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	2b80      	cmp	r3, #128	@ 0x80
 8007ca0:	d013      	beq.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	2b80      	cmp	r3, #128	@ 0x80
 8007ca6:	d827      	bhi.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d003      	beq.n	8007cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	2b40      	cmp	r3, #64	@ 0x40
 8007cb2:	d005      	beq.n	8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            break;
 8007cb4:	e020      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 8007cb6:	f7ff fb0f 	bl	80072d8 <HAL_RCC_GetPCLK1Freq>
 8007cba:	0003      	movs	r3, r0
 8007cbc:	61fb      	str	r3, [r7, #28]
            break;
 8007cbe:	e020      	b.n	8007d02 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            frequency = HAL_RCC_GetSysClockFreq();
 8007cc0:	f7ff fa64 	bl	800718c <HAL_RCC_GetSysClockFreq>
 8007cc4:	0003      	movs	r3, r0
 8007cc6:	61fb      	str	r3, [r7, #28]
            break;
 8007cc8:	e01b      	b.n	8007d02 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007cca:	4b73      	ldr	r3, [pc, #460]	@ (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	2380      	movs	r3, #128	@ 0x80
 8007cd0:	00db      	lsls	r3, r3, #3
 8007cd2:	401a      	ands	r2, r3
 8007cd4:	2380      	movs	r3, #128	@ 0x80
 8007cd6:	00db      	lsls	r3, r3, #3
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d10f      	bne.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
              frequency = HSI_VALUE;
 8007cdc:	4b6f      	ldr	r3, [pc, #444]	@ (8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8007cde:	61fb      	str	r3, [r7, #28]
            break;
 8007ce0:	e00c      	b.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007ce2:	4a6d      	ldr	r2, [pc, #436]	@ (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8007ce4:	2390      	movs	r3, #144	@ 0x90
 8007ce6:	58d3      	ldr	r3, [r2, r3]
 8007ce8:	2202      	movs	r2, #2
 8007cea:	4013      	ands	r3, r2
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d107      	bne.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
              frequency = LSE_VALUE;
 8007cf0:	2380      	movs	r3, #128	@ 0x80
 8007cf2:	021b      	lsls	r3, r3, #8
 8007cf4:	61fb      	str	r3, [r7, #28]
            break;
 8007cf6:	e003      	b.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
            break;
 8007cf8:	46c0      	nop			@ (mov r8, r8)
 8007cfa:	e2d8      	b.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007cfc:	46c0      	nop			@ (mov r8, r8)
 8007cfe:	e2d6      	b.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007d00:	46c0      	nop			@ (mov r8, r8)
        break;
 8007d02:	e2d4      	b.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007d04:	4a64      	ldr	r2, [pc, #400]	@ (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8007d06:	2388      	movs	r3, #136	@ 0x88
 8007d08:	58d2      	ldr	r2, [r2, r3]
 8007d0a:	23c0      	movs	r3, #192	@ 0xc0
 8007d0c:	059b      	lsls	r3, r3, #22
 8007d0e:	4013      	ands	r3, r2
 8007d10:	617b      	str	r3, [r7, #20]
 8007d12:	697a      	ldr	r2, [r7, #20]
 8007d14:	2380      	movs	r3, #128	@ 0x80
 8007d16:	059b      	lsls	r3, r3, #22
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d012      	beq.n	8007d42 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8007d1c:	697a      	ldr	r2, [r7, #20]
 8007d1e:	2380      	movs	r3, #128	@ 0x80
 8007d20:	059b      	lsls	r3, r3, #22
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d825      	bhi.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d005      	beq.n	8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 8007d2c:	697a      	ldr	r2, [r7, #20]
 8007d2e:	2380      	movs	r3, #128	@ 0x80
 8007d30:	055b      	lsls	r3, r3, #21
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d014      	beq.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
            break;
 8007d36:	e01c      	b.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
            frequency = HAL_RCC_GetSysClockFreq();
 8007d38:	f7ff fa28 	bl	800718c <HAL_RCC_GetSysClockFreq>
 8007d3c:	0003      	movs	r3, r0
 8007d3e:	61fb      	str	r3, [r7, #28]
            break;
 8007d40:	e018      	b.n	8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007d42:	4b55      	ldr	r3, [pc, #340]	@ (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	2380      	movs	r3, #128	@ 0x80
 8007d48:	00db      	lsls	r3, r3, #3
 8007d4a:	401a      	ands	r2, r3
 8007d4c:	2380      	movs	r3, #128	@ 0x80
 8007d4e:	00db      	lsls	r3, r3, #3
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d102      	bne.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
              frequency = HSI_VALUE;
 8007d54:	4b51      	ldr	r3, [pc, #324]	@ (8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8007d56:	61fb      	str	r3, [r7, #28]
            break;
 8007d58:	e00c      	b.n	8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
              frequency = 0U;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	61fb      	str	r3, [r7, #28]
            break;
 8007d5e:	e009      	b.n	8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8007d60:	2408      	movs	r4, #8
 8007d62:	193b      	adds	r3, r7, r4
 8007d64:	0018      	movs	r0, r3
 8007d66:	f000 faad 	bl	80082c4 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_P_Frequency;
 8007d6a:	193b      	adds	r3, r7, r4
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	61fb      	str	r3, [r7, #28]
            break;
 8007d70:	e000      	b.n	8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            break;
 8007d72:	46c0      	nop			@ (mov r8, r8)
        break;
 8007d74:	e29b      	b.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007d76:	4a48      	ldr	r2, [pc, #288]	@ (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8007d78:	2388      	movs	r3, #136	@ 0x88
 8007d7a:	58d2      	ldr	r2, [r2, r3]
 8007d7c:	23c0      	movs	r3, #192	@ 0xc0
 8007d7e:	019b      	lsls	r3, r3, #6
 8007d80:	4013      	ands	r3, r2
 8007d82:	617b      	str	r3, [r7, #20]
 8007d84:	697a      	ldr	r2, [r7, #20]
 8007d86:	2380      	movs	r3, #128	@ 0x80
 8007d88:	019b      	lsls	r3, r3, #6
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d017      	beq.n	8007dbe <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 8007d8e:	697a      	ldr	r2, [r7, #20]
 8007d90:	2380      	movs	r3, #128	@ 0x80
 8007d92:	019b      	lsls	r3, r3, #6
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d81e      	bhi.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d005      	beq.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8007d9e:	697a      	ldr	r2, [r7, #20]
 8007da0:	2380      	movs	r3, #128	@ 0x80
 8007da2:	015b      	lsls	r3, r3, #5
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d005      	beq.n	8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
            break;
 8007da8:	e015      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 8007daa:	f7ff fa95 	bl	80072d8 <HAL_RCC_GetPCLK1Freq>
 8007dae:	0003      	movs	r3, r0
 8007db0:	61fb      	str	r3, [r7, #28]
            break;
 8007db2:	e013      	b.n	8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            frequency = HAL_RCC_GetSysClockFreq();
 8007db4:	f7ff f9ea 	bl	800718c <HAL_RCC_GetSysClockFreq>
 8007db8:	0003      	movs	r3, r0
 8007dba:	61fb      	str	r3, [r7, #28]
            break;
 8007dbc:	e00e      	b.n	8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007dbe:	4b36      	ldr	r3, [pc, #216]	@ (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	2380      	movs	r3, #128	@ 0x80
 8007dc4:	00db      	lsls	r3, r3, #3
 8007dc6:	401a      	ands	r2, r3
 8007dc8:	2380      	movs	r3, #128	@ 0x80
 8007dca:	00db      	lsls	r3, r3, #3
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d104      	bne.n	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
              frequency = HSI_VALUE;
 8007dd0:	4b32      	ldr	r3, [pc, #200]	@ (8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8007dd2:	61fb      	str	r3, [r7, #28]
            break;
 8007dd4:	e001      	b.n	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
            break;
 8007dd6:	46c0      	nop			@ (mov r8, r8)
 8007dd8:	e269      	b.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007dda:	46c0      	nop			@ (mov r8, r8)
        break;
 8007ddc:	e267      	b.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007dde:	4a2e      	ldr	r2, [pc, #184]	@ (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8007de0:	2388      	movs	r3, #136	@ 0x88
 8007de2:	58d2      	ldr	r2, [r2, r3]
 8007de4:	23c0      	movs	r3, #192	@ 0xc0
 8007de6:	029b      	lsls	r3, r3, #10
 8007de8:	4013      	ands	r3, r2
 8007dea:	617b      	str	r3, [r7, #20]
 8007dec:	697a      	ldr	r2, [r7, #20]
 8007dee:	2380      	movs	r3, #128	@ 0x80
 8007df0:	029b      	lsls	r3, r3, #10
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d017      	beq.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
 8007df6:	697a      	ldr	r2, [r7, #20]
 8007df8:	2380      	movs	r3, #128	@ 0x80
 8007dfa:	029b      	lsls	r3, r3, #10
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d81e      	bhi.n	8007e3e <HAL_RCCEx_GetPeriphCLKFreq+0x612>
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d005      	beq.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8007e06:	697a      	ldr	r2, [r7, #20]
 8007e08:	2380      	movs	r3, #128	@ 0x80
 8007e0a:	025b      	lsls	r3, r3, #9
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d005      	beq.n	8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
            break;
 8007e10:	e015      	b.n	8007e3e <HAL_RCCEx_GetPeriphCLKFreq+0x612>
            frequency = HAL_RCC_GetPCLK1Freq();
 8007e12:	f7ff fa61 	bl	80072d8 <HAL_RCC_GetPCLK1Freq>
 8007e16:	0003      	movs	r3, r0
 8007e18:	61fb      	str	r3, [r7, #28]
            break;
 8007e1a:	e013      	b.n	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HAL_RCC_GetSysClockFreq();
 8007e1c:	f7ff f9b6 	bl	800718c <HAL_RCC_GetSysClockFreq>
 8007e20:	0003      	movs	r3, r0
 8007e22:	61fb      	str	r3, [r7, #28]
            break;
 8007e24:	e00e      	b.n	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007e26:	4b1c      	ldr	r3, [pc, #112]	@ (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	2380      	movs	r3, #128	@ 0x80
 8007e2c:	00db      	lsls	r3, r3, #3
 8007e2e:	401a      	ands	r2, r3
 8007e30:	2380      	movs	r3, #128	@ 0x80
 8007e32:	00db      	lsls	r3, r3, #3
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d104      	bne.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
              frequency = HSI_VALUE;
 8007e38:	4b18      	ldr	r3, [pc, #96]	@ (8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8007e3a:	61fb      	str	r3, [r7, #28]
            break;
 8007e3c:	e001      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
            break;
 8007e3e:	46c0      	nop			@ (mov r8, r8)
 8007e40:	e235      	b.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007e42:	46c0      	nop			@ (mov r8, r8)
        break;
 8007e44:	e233      	b.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007e46:	4a14      	ldr	r2, [pc, #80]	@ (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8007e48:	2388      	movs	r3, #136	@ 0x88
 8007e4a:	58d2      	ldr	r2, [r2, r3]
 8007e4c:	23c0      	movs	r3, #192	@ 0xc0
 8007e4e:	031b      	lsls	r3, r3, #12
 8007e50:	4013      	ands	r3, r2
 8007e52:	617b      	str	r3, [r7, #20]
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	23c0      	movs	r3, #192	@ 0xc0
 8007e58:	031b      	lsls	r3, r3, #12
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d041      	beq.n	8007ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8007e5e:	697a      	ldr	r2, [r7, #20]
 8007e60:	23c0      	movs	r3, #192	@ 0xc0
 8007e62:	031b      	lsls	r3, r3, #12
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d847      	bhi.n	8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8007e68:	697a      	ldr	r2, [r7, #20]
 8007e6a:	2380      	movs	r3, #128	@ 0x80
 8007e6c:	031b      	lsls	r3, r3, #12
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d02b      	beq.n	8007eca <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
 8007e72:	697a      	ldr	r2, [r7, #20]
 8007e74:	2380      	movs	r3, #128	@ 0x80
 8007e76:	031b      	lsls	r3, r3, #12
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d83d      	bhi.n	8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d005      	beq.n	8007e8e <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	2380      	movs	r3, #128	@ 0x80
 8007e86:	02db      	lsls	r3, r3, #11
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d009      	beq.n	8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            break;
 8007e8c:	e034      	b.n	8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 8007e8e:	f7ff fa23 	bl	80072d8 <HAL_RCC_GetPCLK1Freq>
 8007e92:	0003      	movs	r3, r0
 8007e94:	61fb      	str	r3, [r7, #28]
            break;
 8007e96:	e036      	b.n	8007f06 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8007e98:	40021000 	.word	0x40021000
 8007e9c:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007ea0:	4abd      	ldr	r2, [pc, #756]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007ea2:	2394      	movs	r3, #148	@ 0x94
 8007ea4:	58d3      	ldr	r3, [r2, r3]
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	4013      	ands	r3, r2
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	d126      	bne.n	8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8007eae:	4aba      	ldr	r2, [pc, #744]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007eb0:	2394      	movs	r3, #148	@ 0x94
 8007eb2:	58d3      	ldr	r3, [r2, r3]
 8007eb4:	2204      	movs	r2, #4
 8007eb6:	4013      	ands	r3, r2
 8007eb8:	2b04      	cmp	r3, #4
 8007eba:	d102      	bne.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
                frequency = LSI_VALUE / 128U;
 8007ebc:	23fa      	movs	r3, #250	@ 0xfa
 8007ebe:	61fb      	str	r3, [r7, #28]
            break;
 8007ec0:	e01c      	b.n	8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
                frequency = LSI_VALUE;
 8007ec2:	23fa      	movs	r3, #250	@ 0xfa
 8007ec4:	01db      	lsls	r3, r3, #7
 8007ec6:	61fb      	str	r3, [r7, #28]
            break;
 8007ec8:	e018      	b.n	8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007eca:	4bb3      	ldr	r3, [pc, #716]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	2380      	movs	r3, #128	@ 0x80
 8007ed0:	00db      	lsls	r3, r3, #3
 8007ed2:	401a      	ands	r2, r3
 8007ed4:	2380      	movs	r3, #128	@ 0x80
 8007ed6:	00db      	lsls	r3, r3, #3
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d111      	bne.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
              frequency = HSI_VALUE;
 8007edc:	4baf      	ldr	r3, [pc, #700]	@ (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 8007ede:	61fb      	str	r3, [r7, #28]
            break;
 8007ee0:	e00e      	b.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007ee2:	4aad      	ldr	r2, [pc, #692]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007ee4:	2390      	movs	r3, #144	@ 0x90
 8007ee6:	58d3      	ldr	r3, [r2, r3]
 8007ee8:	2202      	movs	r2, #2
 8007eea:	4013      	ands	r3, r2
 8007eec:	2b02      	cmp	r3, #2
 8007eee:	d109      	bne.n	8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
              frequency = LSE_VALUE;
 8007ef0:	2380      	movs	r3, #128	@ 0x80
 8007ef2:	021b      	lsls	r3, r3, #8
 8007ef4:	61fb      	str	r3, [r7, #28]
            break;
 8007ef6:	e005      	b.n	8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
            break;
 8007ef8:	46c0      	nop			@ (mov r8, r8)
 8007efa:	e1d8      	b.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007efc:	46c0      	nop			@ (mov r8, r8)
 8007efe:	e1d6      	b.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007f00:	46c0      	nop			@ (mov r8, r8)
 8007f02:	e1d4      	b.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007f04:	46c0      	nop			@ (mov r8, r8)
        break;
 8007f06:	e1d2      	b.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007f08:	4aa3      	ldr	r2, [pc, #652]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007f0a:	2388      	movs	r3, #136	@ 0x88
 8007f0c:	58d2      	ldr	r2, [r2, r3]
 8007f0e:	23c0      	movs	r3, #192	@ 0xc0
 8007f10:	039b      	lsls	r3, r3, #14
 8007f12:	4013      	ands	r3, r2
 8007f14:	617b      	str	r3, [r7, #20]
 8007f16:	697a      	ldr	r2, [r7, #20]
 8007f18:	23c0      	movs	r3, #192	@ 0xc0
 8007f1a:	039b      	lsls	r3, r3, #14
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d03d      	beq.n	8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8007f20:	697a      	ldr	r2, [r7, #20]
 8007f22:	23c0      	movs	r3, #192	@ 0xc0
 8007f24:	039b      	lsls	r3, r3, #14
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d843      	bhi.n	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8007f2a:	697a      	ldr	r2, [r7, #20]
 8007f2c:	2380      	movs	r3, #128	@ 0x80
 8007f2e:	039b      	lsls	r3, r3, #14
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d027      	beq.n	8007f84 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
 8007f34:	697a      	ldr	r2, [r7, #20]
 8007f36:	2380      	movs	r3, #128	@ 0x80
 8007f38:	039b      	lsls	r3, r3, #14
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d839      	bhi.n	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d005      	beq.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007f44:	697a      	ldr	r2, [r7, #20]
 8007f46:	2380      	movs	r3, #128	@ 0x80
 8007f48:	035b      	lsls	r3, r3, #13
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d005      	beq.n	8007f5a <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
            break;
 8007f4e:	e030      	b.n	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
            frequency = HAL_RCC_GetPCLK1Freq();
 8007f50:	f7ff f9c2 	bl	80072d8 <HAL_RCC_GetPCLK1Freq>
 8007f54:	0003      	movs	r3, r0
 8007f56:	61fb      	str	r3, [r7, #28]
            break;
 8007f58:	e032      	b.n	8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007f5a:	4a8f      	ldr	r2, [pc, #572]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007f5c:	2394      	movs	r3, #148	@ 0x94
 8007f5e:	58d3      	ldr	r3, [r2, r3]
 8007f60:	2202      	movs	r2, #2
 8007f62:	4013      	ands	r3, r2
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	d126      	bne.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8007f68:	4a8b      	ldr	r2, [pc, #556]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007f6a:	2394      	movs	r3, #148	@ 0x94
 8007f6c:	58d3      	ldr	r3, [r2, r3]
 8007f6e:	2204      	movs	r2, #4
 8007f70:	4013      	ands	r3, r2
 8007f72:	2b04      	cmp	r3, #4
 8007f74:	d102      	bne.n	8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
                frequency = LSI_VALUE / 128U;
 8007f76:	23fa      	movs	r3, #250	@ 0xfa
 8007f78:	61fb      	str	r3, [r7, #28]
            break;
 8007f7a:	e01c      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
                frequency = LSI_VALUE;
 8007f7c:	23fa      	movs	r3, #250	@ 0xfa
 8007f7e:	01db      	lsls	r3, r3, #7
 8007f80:	61fb      	str	r3, [r7, #28]
            break;
 8007f82:	e018      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007f84:	4b84      	ldr	r3, [pc, #528]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	2380      	movs	r3, #128	@ 0x80
 8007f8a:	00db      	lsls	r3, r3, #3
 8007f8c:	401a      	ands	r2, r3
 8007f8e:	2380      	movs	r3, #128	@ 0x80
 8007f90:	00db      	lsls	r3, r3, #3
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d111      	bne.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
              frequency = HSI_VALUE;
 8007f96:	4b81      	ldr	r3, [pc, #516]	@ (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 8007f98:	61fb      	str	r3, [r7, #28]
            break;
 8007f9a:	e00e      	b.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007f9c:	4a7e      	ldr	r2, [pc, #504]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007f9e:	2390      	movs	r3, #144	@ 0x90
 8007fa0:	58d3      	ldr	r3, [r2, r3]
 8007fa2:	2202      	movs	r2, #2
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	d109      	bne.n	8007fbe <HAL_RCCEx_GetPeriphCLKFreq+0x792>
              frequency = LSE_VALUE;
 8007faa:	2380      	movs	r3, #128	@ 0x80
 8007fac:	021b      	lsls	r3, r3, #8
 8007fae:	61fb      	str	r3, [r7, #28]
            break;
 8007fb0:	e005      	b.n	8007fbe <HAL_RCCEx_GetPeriphCLKFreq+0x792>
            break;
 8007fb2:	46c0      	nop			@ (mov r8, r8)
 8007fb4:	e17b      	b.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007fb6:	46c0      	nop			@ (mov r8, r8)
 8007fb8:	e179      	b.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007fba:	46c0      	nop			@ (mov r8, r8)
 8007fbc:	e177      	b.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007fbe:	46c0      	nop			@ (mov r8, r8)
        break;
 8007fc0:	e175      	b.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8007fc2:	4a75      	ldr	r2, [pc, #468]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007fc4:	2388      	movs	r3, #136	@ 0x88
 8007fc6:	58d2      	ldr	r2, [r2, r3]
 8007fc8:	23c0      	movs	r3, #192	@ 0xc0
 8007fca:	041b      	lsls	r3, r3, #16
 8007fcc:	4013      	ands	r3, r2
 8007fce:	617b      	str	r3, [r7, #20]
 8007fd0:	697a      	ldr	r2, [r7, #20]
 8007fd2:	23c0      	movs	r3, #192	@ 0xc0
 8007fd4:	041b      	lsls	r3, r3, #16
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d03d      	beq.n	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 8007fda:	697a      	ldr	r2, [r7, #20]
 8007fdc:	23c0      	movs	r3, #192	@ 0xc0
 8007fde:	041b      	lsls	r3, r3, #16
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d843      	bhi.n	800806c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8007fe4:	697a      	ldr	r2, [r7, #20]
 8007fe6:	2380      	movs	r3, #128	@ 0x80
 8007fe8:	041b      	lsls	r3, r3, #16
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d027      	beq.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8007fee:	697a      	ldr	r2, [r7, #20]
 8007ff0:	2380      	movs	r3, #128	@ 0x80
 8007ff2:	041b      	lsls	r3, r3, #16
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d839      	bhi.n	800806c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d005      	beq.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	2380      	movs	r3, #128	@ 0x80
 8008002:	03db      	lsls	r3, r3, #15
 8008004:	429a      	cmp	r2, r3
 8008006:	d005      	beq.n	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
            break;
 8008008:	e030      	b.n	800806c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
            frequency = HAL_RCC_GetPCLK1Freq();
 800800a:	f7ff f965 	bl	80072d8 <HAL_RCC_GetPCLK1Freq>
 800800e:	0003      	movs	r3, r0
 8008010:	61fb      	str	r3, [r7, #28]
            break;
 8008012:	e032      	b.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008014:	4a60      	ldr	r2, [pc, #384]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008016:	2394      	movs	r3, #148	@ 0x94
 8008018:	58d3      	ldr	r3, [r2, r3]
 800801a:	2202      	movs	r2, #2
 800801c:	4013      	ands	r3, r2
 800801e:	2b02      	cmp	r3, #2
 8008020:	d126      	bne.n	8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8008022:	4a5d      	ldr	r2, [pc, #372]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008024:	2394      	movs	r3, #148	@ 0x94
 8008026:	58d3      	ldr	r3, [r2, r3]
 8008028:	2204      	movs	r2, #4
 800802a:	4013      	ands	r3, r2
 800802c:	2b04      	cmp	r3, #4
 800802e:	d102      	bne.n	8008036 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
                frequency = LSI_VALUE / 128U;
 8008030:	23fa      	movs	r3, #250	@ 0xfa
 8008032:	61fb      	str	r3, [r7, #28]
            break;
 8008034:	e01c      	b.n	8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
                frequency = LSI_VALUE;
 8008036:	23fa      	movs	r3, #250	@ 0xfa
 8008038:	01db      	lsls	r3, r3, #7
 800803a:	61fb      	str	r3, [r7, #28]
            break;
 800803c:	e018      	b.n	8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800803e:	4b56      	ldr	r3, [pc, #344]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	2380      	movs	r3, #128	@ 0x80
 8008044:	00db      	lsls	r3, r3, #3
 8008046:	401a      	ands	r2, r3
 8008048:	2380      	movs	r3, #128	@ 0x80
 800804a:	00db      	lsls	r3, r3, #3
 800804c:	429a      	cmp	r2, r3
 800804e:	d111      	bne.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
              frequency = HSI_VALUE;
 8008050:	4b52      	ldr	r3, [pc, #328]	@ (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 8008052:	61fb      	str	r3, [r7, #28]
            break;
 8008054:	e00e      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008056:	4a50      	ldr	r2, [pc, #320]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008058:	2390      	movs	r3, #144	@ 0x90
 800805a:	58d3      	ldr	r3, [r2, r3]
 800805c:	2202      	movs	r2, #2
 800805e:	4013      	ands	r3, r2
 8008060:	2b02      	cmp	r3, #2
 8008062:	d109      	bne.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
              frequency = LSE_VALUE;
 8008064:	2380      	movs	r3, #128	@ 0x80
 8008066:	021b      	lsls	r3, r3, #8
 8008068:	61fb      	str	r3, [r7, #28]
            break;
 800806a:	e005      	b.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
            break;
 800806c:	46c0      	nop			@ (mov r8, r8)
 800806e:	e11e      	b.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008070:	46c0      	nop			@ (mov r8, r8)
 8008072:	e11c      	b.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008074:	46c0      	nop			@ (mov r8, r8)
 8008076:	e11a      	b.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008078:	46c0      	nop			@ (mov r8, r8)
        break;
 800807a:	e118      	b.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 800807c:	4a46      	ldr	r2, [pc, #280]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800807e:	2388      	movs	r3, #136	@ 0x88
 8008080:	58d2      	ldr	r2, [r2, r3]
 8008082:	2380      	movs	r3, #128	@ 0x80
 8008084:	045b      	lsls	r3, r3, #17
 8008086:	4013      	ands	r3, r2
 8008088:	617b      	str	r3, [r7, #20]
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d005      	beq.n	800809c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8008090:	697a      	ldr	r2, [r7, #20]
 8008092:	2380      	movs	r3, #128	@ 0x80
 8008094:	045b      	lsls	r3, r3, #17
 8008096:	429a      	cmp	r2, r3
 8008098:	d011      	beq.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0x892>
            break;
 800809a:	e019      	b.n	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 800809c:	4b3e      	ldr	r3, [pc, #248]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800809e:	689a      	ldr	r2, [r3, #8]
 80080a0:	23e0      	movs	r3, #224	@ 0xe0
 80080a2:	01db      	lsls	r3, r3, #7
 80080a4:	4013      	ands	r3, r2
 80080a6:	d104      	bne.n	80080b2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
              frequency = HAL_RCC_GetPCLK1Freq();
 80080a8:	f7ff f916 	bl	80072d8 <HAL_RCC_GetPCLK1Freq>
 80080ac:	0003      	movs	r3, r0
 80080ae:	61fb      	str	r3, [r7, #28]
            break;
 80080b0:	e00e      	b.n	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 80080b2:	f7ff f911 	bl	80072d8 <HAL_RCC_GetPCLK1Freq>
 80080b6:	0003      	movs	r3, r0
 80080b8:	005b      	lsls	r3, r3, #1
 80080ba:	61fb      	str	r3, [r7, #28]
            break;
 80080bc:	e008      	b.n	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80080be:	2408      	movs	r4, #8
 80080c0:	193b      	adds	r3, r7, r4
 80080c2:	0018      	movs	r0, r3
 80080c4:	f000 f8fe 	bl	80082c4 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 80080c8:	193b      	adds	r3, r7, r4
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	61fb      	str	r3, [r7, #28]
            break;
 80080ce:	46c0      	nop			@ (mov r8, r8)
        break;
 80080d0:	e0ed      	b.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 80080d2:	4a31      	ldr	r2, [pc, #196]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80080d4:	2388      	movs	r3, #136	@ 0x88
 80080d6:	58d2      	ldr	r2, [r2, r3]
 80080d8:	2380      	movs	r3, #128	@ 0x80
 80080da:	049b      	lsls	r3, r3, #18
 80080dc:	4013      	ands	r3, r2
 80080de:	617b      	str	r3, [r7, #20]
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d005      	beq.n	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 80080e6:	697a      	ldr	r2, [r7, #20]
 80080e8:	2380      	movs	r3, #128	@ 0x80
 80080ea:	049b      	lsls	r3, r3, #18
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d011      	beq.n	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
            break;
 80080f0:	e019      	b.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 80080f2:	4b29      	ldr	r3, [pc, #164]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80080f4:	689a      	ldr	r2, [r3, #8]
 80080f6:	23e0      	movs	r3, #224	@ 0xe0
 80080f8:	01db      	lsls	r3, r3, #7
 80080fa:	4013      	ands	r3, r2
 80080fc:	d104      	bne.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
              frequency = HAL_RCC_GetPCLK1Freq();
 80080fe:	f7ff f8eb 	bl	80072d8 <HAL_RCC_GetPCLK1Freq>
 8008102:	0003      	movs	r3, r0
 8008104:	61fb      	str	r3, [r7, #28]
            break;
 8008106:	e00e      	b.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8008108:	f7ff f8e6 	bl	80072d8 <HAL_RCC_GetPCLK1Freq>
 800810c:	0003      	movs	r3, r0
 800810e:	005b      	lsls	r3, r3, #1
 8008110:	61fb      	str	r3, [r7, #28]
            break;
 8008112:	e008      	b.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8008114:	2408      	movs	r4, #8
 8008116:	193b      	adds	r3, r7, r4
 8008118:	0018      	movs	r0, r3
 800811a:	f000 f8d3 	bl	80082c4 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 800811e:	193b      	adds	r3, r7, r4
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	61fb      	str	r3, [r7, #28]
            break;
 8008124:	46c0      	nop			@ (mov r8, r8)
        break;
 8008126:	e0c2      	b.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8008128:	4a1b      	ldr	r2, [pc, #108]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800812a:	2388      	movs	r3, #136	@ 0x88
 800812c:	58d2      	ldr	r2, [r2, r3]
 800812e:	23c0      	movs	r3, #192	@ 0xc0
 8008130:	051b      	lsls	r3, r3, #20
 8008132:	4013      	ands	r3, r2
 8008134:	617b      	str	r3, [r7, #20]
 8008136:	697a      	ldr	r2, [r7, #20]
 8008138:	23c0      	movs	r3, #192	@ 0xc0
 800813a:	051b      	lsls	r3, r3, #20
 800813c:	429a      	cmp	r2, r3
 800813e:	d017      	beq.n	8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8008140:	697a      	ldr	r2, [r7, #20]
 8008142:	23c0      	movs	r3, #192	@ 0xc0
 8008144:	051b      	lsls	r3, r3, #20
 8008146:	429a      	cmp	r2, r3
 8008148:	d84a      	bhi.n	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 800814a:	697a      	ldr	r2, [r7, #20]
 800814c:	2380      	movs	r3, #128	@ 0x80
 800814e:	051b      	lsls	r3, r3, #20
 8008150:	429a      	cmp	r2, r3
 8008152:	d039      	beq.n	80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8008154:	697a      	ldr	r2, [r7, #20]
 8008156:	2380      	movs	r3, #128	@ 0x80
 8008158:	051b      	lsls	r3, r3, #20
 800815a:	429a      	cmp	r2, r3
 800815c:	d840      	bhi.n	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d03a      	beq.n	80081da <HAL_RCCEx_GetPeriphCLKFreq+0x9ae>
 8008164:	697a      	ldr	r2, [r7, #20]
 8008166:	2380      	movs	r3, #128	@ 0x80
 8008168:	04db      	lsls	r3, r3, #19
 800816a:	429a      	cmp	r2, r3
 800816c:	d003      	beq.n	8008176 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
            break;
 800816e:	e037      	b.n	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
            frequency = HSI48_VALUE;
 8008170:	4b0b      	ldr	r3, [pc, #44]	@ (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x974>)
 8008172:	61fb      	str	r3, [r7, #28]
            break;
 8008174:	e037      	b.n	80081e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8008176:	4b08      	ldr	r3, [pc, #32]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2202      	movs	r2, #2
 800817c:	4013      	ands	r3, r2
 800817e:	2b02      	cmp	r3, #2
 8008180:	d130      	bne.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8008182:	4b05      	ldr	r3, [pc, #20]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2208      	movs	r2, #8
 8008188:	4013      	ands	r3, r2
 800818a:	d00b      	beq.n	80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 800818c:	4b02      	ldr	r3, [pc, #8]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	091b      	lsrs	r3, r3, #4
 8008192:	220f      	movs	r2, #15
 8008194:	4013      	ands	r3, r2
 8008196:	e00b      	b.n	80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
 8008198:	40021000 	.word	0x40021000
 800819c:	00f42400 	.word	0x00f42400
 80081a0:	02dc6c00 	.word	0x02dc6c00
 80081a4:	4a44      	ldr	r2, [pc, #272]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80081a6:	2394      	movs	r3, #148	@ 0x94
 80081a8:	58d3      	ldr	r3, [r2, r3]
 80081aa:	0a1b      	lsrs	r3, r3, #8
 80081ac:	220f      	movs	r2, #15
 80081ae:	4013      	ands	r3, r2
 80081b0:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	2b0b      	cmp	r3, #11
 80081b6:	d901      	bls.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x990>
                msirange = 11U;
 80081b8:	230b      	movs	r3, #11
 80081ba:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 80081bc:	4b3f      	ldr	r3, [pc, #252]	@ (80082bc <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 80081be:	69ba      	ldr	r2, [r7, #24]
 80081c0:	0092      	lsls	r2, r2, #2
 80081c2:	58d3      	ldr	r3, [r2, r3]
 80081c4:	61fb      	str	r3, [r7, #28]
            break;
 80081c6:	e00d      	b.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80081c8:	2408      	movs	r4, #8
 80081ca:	193b      	adds	r3, r7, r4
 80081cc:	0018      	movs	r0, r3
 80081ce:	f000 f879 	bl	80082c4 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 80081d2:	193b      	adds	r3, r7, r4
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	61fb      	str	r3, [r7, #28]
            break;
 80081d8:	e005      	b.n	80081e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            frequency = 0U;
 80081da:	2300      	movs	r3, #0
 80081dc:	61fb      	str	r3, [r7, #28]
            break;
 80081de:	e002      	b.n	80081e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            break;
 80081e0:	46c0      	nop			@ (mov r8, r8)
 80081e2:	e064      	b.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80081e4:	46c0      	nop			@ (mov r8, r8)
        break;
 80081e6:	e062      	b.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80081e8:	4a33      	ldr	r2, [pc, #204]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80081ea:	2388      	movs	r3, #136	@ 0x88
 80081ec:	58d2      	ldr	r2, [r2, r3]
 80081ee:	23c0      	movs	r3, #192	@ 0xc0
 80081f0:	051b      	lsls	r3, r3, #20
 80081f2:	4013      	ands	r3, r2
 80081f4:	617b      	str	r3, [r7, #20]
 80081f6:	697a      	ldr	r2, [r7, #20]
 80081f8:	23c0      	movs	r3, #192	@ 0xc0
 80081fa:	051b      	lsls	r3, r3, #20
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d017      	beq.n	8008230 <HAL_RCCEx_GetPeriphCLKFreq+0xa04>
 8008200:	697a      	ldr	r2, [r7, #20]
 8008202:	23c0      	movs	r3, #192	@ 0xc0
 8008204:	051b      	lsls	r3, r3, #20
 8008206:	429a      	cmp	r2, r3
 8008208:	d844      	bhi.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 800820a:	697a      	ldr	r2, [r7, #20]
 800820c:	2380      	movs	r3, #128	@ 0x80
 800820e:	051b      	lsls	r3, r3, #20
 8008210:	429a      	cmp	r2, r3
 8008212:	d033      	beq.n	800827c <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8008214:	697a      	ldr	r2, [r7, #20]
 8008216:	2380      	movs	r3, #128	@ 0x80
 8008218:	051b      	lsls	r3, r3, #20
 800821a:	429a      	cmp	r2, r3
 800821c:	d83a      	bhi.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d034      	beq.n	800828e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8008224:	697a      	ldr	r2, [r7, #20]
 8008226:	2380      	movs	r3, #128	@ 0x80
 8008228:	04db      	lsls	r3, r3, #19
 800822a:	429a      	cmp	r2, r3
 800822c:	d003      	beq.n	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
            break;
 800822e:	e031      	b.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            frequency = HSI48_VALUE;
 8008230:	4b23      	ldr	r3, [pc, #140]	@ (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 8008232:	61fb      	str	r3, [r7, #28]
            break;
 8008234:	e031      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8008236:	4b20      	ldr	r3, [pc, #128]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2202      	movs	r2, #2
 800823c:	4013      	ands	r3, r2
 800823e:	2b02      	cmp	r3, #2
 8008240:	d12a      	bne.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8008242:	4b1d      	ldr	r3, [pc, #116]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2208      	movs	r2, #8
 8008248:	4013      	ands	r3, r2
 800824a:	d005      	beq.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0xa2c>
 800824c:	4b1a      	ldr	r3, [pc, #104]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	091b      	lsrs	r3, r3, #4
 8008252:	220f      	movs	r2, #15
 8008254:	4013      	ands	r3, r2
 8008256:	e005      	b.n	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8008258:	4a17      	ldr	r2, [pc, #92]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 800825a:	2394      	movs	r3, #148	@ 0x94
 800825c:	58d3      	ldr	r3, [r2, r3]
 800825e:	0a1b      	lsrs	r3, r3, #8
 8008260:	220f      	movs	r2, #15
 8008262:	4013      	ands	r3, r2
 8008264:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	2b0b      	cmp	r3, #11
 800826a:	d901      	bls.n	8008270 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
                msirange = 11U;
 800826c:	230b      	movs	r3, #11
 800826e:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 8008270:	4b12      	ldr	r3, [pc, #72]	@ (80082bc <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 8008272:	69ba      	ldr	r2, [r7, #24]
 8008274:	0092      	lsls	r2, r2, #2
 8008276:	58d3      	ldr	r3, [r2, r3]
 8008278:	61fb      	str	r3, [r7, #28]
            break;
 800827a:	e00d      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 800827c:	2408      	movs	r4, #8
 800827e:	193b      	adds	r3, r7, r4
 8008280:	0018      	movs	r0, r3
 8008282:	f000 f81f 	bl	80082c4 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8008286:	193b      	adds	r3, r7, r4
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	61fb      	str	r3, [r7, #28]
            break;
 800828c:	e005      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = 0U;
 800828e:	2300      	movs	r3, #0
 8008290:	61fb      	str	r3, [r7, #28]
            break;
 8008292:	e002      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            break;
 8008294:	46c0      	nop			@ (mov r8, r8)
 8008296:	e00a      	b.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008298:	46c0      	nop			@ (mov r8, r8)
        break;
 800829a:	e008      	b.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 800829c:	46c0      	nop			@ (mov r8, r8)
 800829e:	e006      	b.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80082a0:	46c0      	nop			@ (mov r8, r8)
 80082a2:	e004      	b.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80082a4:	46c0      	nop			@ (mov r8, r8)
 80082a6:	e002      	b.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80082a8:	46c0      	nop			@ (mov r8, r8)
 80082aa:	e000      	b.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80082ac:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return (frequency);
 80082ae:	69fb      	ldr	r3, [r7, #28]
}
 80082b0:	0018      	movs	r0, r3
 80082b2:	46bd      	mov	sp, r7
 80082b4:	b009      	add	sp, #36	@ 0x24
 80082b6:	bd90      	pop	{r4, r7, pc}
 80082b8:	40021000 	.word	0x40021000
 80082bc:	0800c310 	.word	0x0800c310
 80082c0:	02dc6c00 	.word	0x02dc6c00

080082c4 <HAL_RCCEx_GetPLLClockFreq>:
  * @param  PLL_Clocks structure.
  * @retval None
  */

void HAL_RCCEx_GetPLLClockFreq(PLL_ClocksTypeDef *PLL_Clocks)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b088      	sub	sp, #32
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  uint32_t pllm;
  uint32_t plln;
  uint32_t pllvco;
  uint32_t msirange;

  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80082cc:	4b58      	ldr	r3, [pc, #352]	@ (8008430 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	0a1b      	lsrs	r3, r3, #8
 80082d2:	227f      	movs	r2, #127	@ 0x7f
 80082d4:	4013      	ands	r3, r2
 80082d6:	617b      	str	r3, [r7, #20]
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80082d8:	4b55      	ldr	r3, [pc, #340]	@ (8008430 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	2203      	movs	r2, #3
 80082de:	4013      	ands	r3, r2
 80082e0:	613b      	str	r3, [r7, #16]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 80082e2:	4b53      	ldr	r3, [pc, #332]	@ (8008430 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	091b      	lsrs	r3, r3, #4
 80082e8:	2207      	movs	r2, #7
 80082ea:	4013      	ands	r3, r2
 80082ec:	3301      	adds	r3, #1
 80082ee:	60fb      	str	r3, [r7, #12]
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 80082f0:	4b4f      	ldr	r3, [pc, #316]	@ (8008430 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	2208      	movs	r2, #8
 80082f6:	4013      	ands	r3, r2
 80082f8:	d005      	beq.n	8008306 <HAL_RCCEx_GetPLLClockFreq+0x42>
 80082fa:	4b4d      	ldr	r3, [pc, #308]	@ (8008430 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	091b      	lsrs	r3, r3, #4
 8008300:	220f      	movs	r2, #15
 8008302:	4013      	ands	r3, r2
 8008304:	e005      	b.n	8008312 <HAL_RCCEx_GetPLLClockFreq+0x4e>
 8008306:	4a4a      	ldr	r2, [pc, #296]	@ (8008430 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008308:	2394      	movs	r3, #148	@ 0x94
 800830a:	58d3      	ldr	r3, [r2, r3]
 800830c:	0a1b      	lsrs	r3, r3, #8
 800830e:	220f      	movs	r2, #15
 8008310:	4013      	ands	r3, r2
 8008312:	61bb      	str	r3, [r7, #24]
  if (msirange > 11U)
 8008314:	69bb      	ldr	r3, [r7, #24]
 8008316:	2b0b      	cmp	r3, #11
 8008318:	d901      	bls.n	800831e <HAL_RCCEx_GetPLLClockFreq+0x5a>
  {
    msirange = 11U;
 800831a:	230b      	movs	r3, #11
 800831c:	61bb      	str	r3, [r7, #24]
  }
  switch (pllsource)
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	2b03      	cmp	r3, #3
 8008322:	d020      	beq.n	8008366 <HAL_RCCEx_GetPLLClockFreq+0xa2>
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	2b03      	cmp	r3, #3
 8008328:	d827      	bhi.n	800837a <HAL_RCCEx_GetPLLClockFreq+0xb6>
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	2b01      	cmp	r3, #1
 800832e:	d00c      	beq.n	800834a <HAL_RCCEx_GetPLLClockFreq+0x86>
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	2b02      	cmp	r3, #2
 8008334:	d121      	bne.n	800837a <HAL_RCCEx_GetPLLClockFreq+0xb6>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * plln;
 8008336:	68f9      	ldr	r1, [r7, #12]
 8008338:	483e      	ldr	r0, [pc, #248]	@ (8008434 <HAL_RCCEx_GetPLLClockFreq+0x170>)
 800833a:	f7f7 ff01 	bl	8000140 <__udivsi3>
 800833e:	0003      	movs	r3, r0
 8008340:	001a      	movs	r2, r3
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	4353      	muls	r3, r2
 8008346:	61fb      	str	r3, [r7, #28]
      break;
 8008348:	e025      	b.n	8008396 <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 800834a:	4b3b      	ldr	r3, [pc, #236]	@ (8008438 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 800834c:	69ba      	ldr	r2, [r7, #24]
 800834e:	0092      	lsls	r2, r2, #2
 8008350:	58d3      	ldr	r3, [r2, r3]
 8008352:	68f9      	ldr	r1, [r7, #12]
 8008354:	0018      	movs	r0, r3
 8008356:	f7f7 fef3 	bl	8000140 <__udivsi3>
 800835a:	0003      	movs	r3, r0
 800835c:	001a      	movs	r2, r3
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	4353      	muls	r3, r2
 8008362:	61fb      	str	r3, [r7, #28]
      break;
 8008364:	e017      	b.n	8008396 <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * plln;
 8008366:	68f9      	ldr	r1, [r7, #12]
 8008368:	4834      	ldr	r0, [pc, #208]	@ (800843c <HAL_RCCEx_GetPLLClockFreq+0x178>)
 800836a:	f7f7 fee9 	bl	8000140 <__udivsi3>
 800836e:	0003      	movs	r3, r0
 8008370:	001a      	movs	r2, r3
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	4353      	muls	r3, r2
 8008376:	61fb      	str	r3, [r7, #28]
      break;
 8008378:	e00d      	b.n	8008396 <HAL_RCCEx_GetPLLClockFreq+0xd2>

    default:
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 800837a:	4b2f      	ldr	r3, [pc, #188]	@ (8008438 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 800837c:	69ba      	ldr	r2, [r7, #24]
 800837e:	0092      	lsls	r2, r2, #2
 8008380:	58d3      	ldr	r3, [r2, r3]
 8008382:	68f9      	ldr	r1, [r7, #12]
 8008384:	0018      	movs	r0, r3
 8008386:	f7f7 fedb 	bl	8000140 <__udivsi3>
 800838a:	0003      	movs	r3, r0
 800838c:	001a      	movs	r2, r3
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	4353      	muls	r3, r2
 8008392:	61fb      	str	r3, [r7, #28]
      break;
 8008394:	46c0      	nop			@ (mov r8, r8)
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 8008396:	4b26      	ldr	r3, [pc, #152]	@ (8008430 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008398:	68da      	ldr	r2, [r3, #12]
 800839a:	2380      	movs	r3, #128	@ 0x80
 800839c:	025b      	lsls	r3, r3, #9
 800839e:	4013      	ands	r3, r2
 80083a0:	d00e      	beq.n	80083c0 <HAL_RCCEx_GetPLLClockFreq+0xfc>
  {
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 80083a2:	4b23      	ldr	r3, [pc, #140]	@ (8008430 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80083a4:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLP_Pos) + 1U));
 80083a6:	0c5b      	lsrs	r3, r3, #17
 80083a8:	221f      	movs	r2, #31
 80083aa:	4013      	ands	r3, r2
 80083ac:	3301      	adds	r3, #1
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 80083ae:	0019      	movs	r1, r3
 80083b0:	69f8      	ldr	r0, [r7, #28]
 80083b2:	f7f7 fec5 	bl	8000140 <__udivsi3>
 80083b6:	0003      	movs	r3, r0
 80083b8:	001a      	movs	r2, r3
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	601a      	str	r2, [r3, #0]
 80083be:	e002      	b.n	80083c6 <HAL_RCCEx_GetPLLClockFreq+0x102>
  }
  else
  {
    PLL_Clocks->PLL_P_Frequency = 0;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVQ) != 0U)
 80083c6:	4b1a      	ldr	r3, [pc, #104]	@ (8008430 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80083c8:	68da      	ldr	r2, [r3, #12]
 80083ca:	2380      	movs	r3, #128	@ 0x80
 80083cc:	045b      	lsls	r3, r3, #17
 80083ce:	4013      	ands	r3, r2
 80083d0:	d00e      	beq.n	80083f0 <HAL_RCCEx_GetPLLClockFreq+0x12c>
  {
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 80083d2:	4b17      	ldr	r3, [pc, #92]	@ (8008430 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80083d4:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLQ_Pos) + 1U));
 80083d6:	0e5b      	lsrs	r3, r3, #25
 80083d8:	2207      	movs	r2, #7
 80083da:	4013      	ands	r3, r2
 80083dc:	3301      	adds	r3, #1
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 80083de:	0019      	movs	r1, r3
 80083e0:	69f8      	ldr	r0, [r7, #28]
 80083e2:	f7f7 fead 	bl	8000140 <__udivsi3>
 80083e6:	0003      	movs	r3, r0
 80083e8:	001a      	movs	r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	605a      	str	r2, [r3, #4]
 80083ee:	e002      	b.n	80083f6 <HAL_RCCEx_GetPLLClockFreq+0x132>
  }
  else
  {
    PLL_Clocks->PLL_Q_Frequency = 0;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVR) != 0U)
 80083f6:	4b0e      	ldr	r3, [pc, #56]	@ (8008430 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80083f8:	68da      	ldr	r2, [r3, #12]
 80083fa:	2380      	movs	r3, #128	@ 0x80
 80083fc:	055b      	lsls	r3, r3, #21
 80083fe:	4013      	ands	r3, r2
 8008400:	d00e      	beq.n	8008420 <HAL_RCCEx_GetPLLClockFreq+0x15c>
  {
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8008402:	4b0b      	ldr	r3, [pc, #44]	@ (8008430 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008404:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLR_Pos) + 1U));
 8008406:	0f5b      	lsrs	r3, r3, #29
 8008408:	2207      	movs	r2, #7
 800840a:	4013      	ands	r3, r2
 800840c:	3301      	adds	r3, #1
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 800840e:	0019      	movs	r1, r3
 8008410:	69f8      	ldr	r0, [r7, #28]
 8008412:	f7f7 fe95 	bl	8000140 <__udivsi3>
 8008416:	0003      	movs	r3, r0
 8008418:	001a      	movs	r2, r3
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL_Clocks->PLL_R_Frequency = 0;
  }
}
 800841e:	e002      	b.n	8008426 <HAL_RCCEx_GetPLLClockFreq+0x162>
    PLL_Clocks->PLL_R_Frequency = 0;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	609a      	str	r2, [r3, #8]
}
 8008426:	46c0      	nop			@ (mov r8, r8)
 8008428:	46bd      	mov	sp, r7
 800842a:	b008      	add	sp, #32
 800842c:	bd80      	pop	{r7, pc}
 800842e:	46c0      	nop			@ (mov r8, r8)
 8008430:	40021000 	.word	0x40021000
 8008434:	00f42400 	.word	0x00f42400
 8008438:	0800c310 	.word	0x0800c310
 800843c:	003d0900 	.word	0x003d0900

08008440 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008448:	210f      	movs	r1, #15
 800844a:	187b      	adds	r3, r7, r1
 800844c:	2201      	movs	r2, #1
 800844e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d100      	bne.n	8008458 <HAL_RTC_Init+0x18>
 8008456:	e08b      	b.n	8008570 <HAL_RTC_Init+0x130>
  {
    status = HAL_OK;
 8008458:	187b      	adds	r3, r7, r1
 800845a:	2200      	movs	r2, #0
 800845c:	701a      	strb	r2, [r3, #0]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	222d      	movs	r2, #45	@ 0x2d
 8008462:	5c9b      	ldrb	r3, [r3, r2]
 8008464:	b2db      	uxtb	r3, r3
 8008466:	2b00      	cmp	r3, #0
 8008468:	d107      	bne.n	800847a <HAL_RTC_Init+0x3a>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	222c      	movs	r2, #44	@ 0x2c
 800846e:	2100      	movs	r1, #0
 8008470:	5499      	strb	r1, [r3, r2]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	0018      	movs	r0, r3
 8008476:	f7fc fe0f 	bl	8005098 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	222d      	movs	r2, #45	@ 0x2d
 800847e:	2102      	movs	r1, #2
 8008480:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008482:	4b3f      	ldr	r3, [pc, #252]	@ (8008580 <HAL_RTC_Init+0x140>)
 8008484:	22ca      	movs	r2, #202	@ 0xca
 8008486:	625a      	str	r2, [r3, #36]	@ 0x24
 8008488:	4b3d      	ldr	r3, [pc, #244]	@ (8008580 <HAL_RTC_Init+0x140>)
 800848a:	2253      	movs	r2, #83	@ 0x53
 800848c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	0018      	movs	r0, r3
 8008492:	f000 f8a1 	bl	80085d8 <RTC_EnterInitMode>
 8008496:	1e03      	subs	r3, r0, #0
 8008498:	d00b      	beq.n	80084b2 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800849a:	4b39      	ldr	r3, [pc, #228]	@ (8008580 <HAL_RTC_Init+0x140>)
 800849c:	22ff      	movs	r2, #255	@ 0xff
 800849e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	222d      	movs	r2, #45	@ 0x2d
 80084a4:	2104      	movs	r1, #4
 80084a6:	5499      	strb	r1, [r3, r2]

      status = HAL_ERROR;
 80084a8:	230f      	movs	r3, #15
 80084aa:	18fb      	adds	r3, r7, r3
 80084ac:	2201      	movs	r2, #1
 80084ae:	701a      	strb	r2, [r3, #0]
 80084b0:	e05e      	b.n	8008570 <HAL_RTC_Init+0x130>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80084b2:	4b33      	ldr	r3, [pc, #204]	@ (8008580 <HAL_RTC_Init+0x140>)
 80084b4:	699a      	ldr	r2, [r3, #24]
 80084b6:	4b32      	ldr	r3, [pc, #200]	@ (8008580 <HAL_RTC_Init+0x140>)
 80084b8:	4932      	ldr	r1, [pc, #200]	@ (8008584 <HAL_RTC_Init+0x144>)
 80084ba:	400a      	ands	r2, r1
 80084bc:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80084be:	4b30      	ldr	r3, [pc, #192]	@ (8008580 <HAL_RTC_Init+0x140>)
 80084c0:	6999      	ldr	r1, [r3, #24]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	685a      	ldr	r2, [r3, #4]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	431a      	orrs	r2, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	699b      	ldr	r3, [r3, #24]
 80084d0:	431a      	orrs	r2, r3
 80084d2:	4b2b      	ldr	r3, [pc, #172]	@ (8008580 <HAL_RTC_Init+0x140>)
 80084d4:	430a      	orrs	r2, r1
 80084d6:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	68d9      	ldr	r1, [r3, #12]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	041a      	lsls	r2, r3, #16
 80084e2:	4b27      	ldr	r3, [pc, #156]	@ (8008580 <HAL_RTC_Init+0x140>)
 80084e4:	430a      	orrs	r2, r1
 80084e6:	611a      	str	r2, [r3, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80084e8:	4b25      	ldr	r3, [pc, #148]	@ (8008580 <HAL_RTC_Init+0x140>)
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	4a26      	ldr	r2, [pc, #152]	@ (8008588 <HAL_RTC_Init+0x148>)
 80084ee:	4013      	ands	r3, r2
 80084f0:	0019      	movs	r1, r3
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084fa:	431a      	orrs	r2, r3
 80084fc:	4b20      	ldr	r3, [pc, #128]	@ (8008580 <HAL_RTC_Init+0x140>)
 80084fe:	430a      	orrs	r2, r1
 8008500:	60da      	str	r2, [r3, #12]

      /* Exit Initialization mode */
      CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008502:	4b1f      	ldr	r3, [pc, #124]	@ (8008580 <HAL_RTC_Init+0x140>)
 8008504:	68da      	ldr	r2, [r3, #12]
 8008506:	4b1e      	ldr	r3, [pc, #120]	@ (8008580 <HAL_RTC_Init+0x140>)
 8008508:	2180      	movs	r1, #128	@ 0x80
 800850a:	438a      	bics	r2, r1
 800850c:	60da      	str	r2, [r3, #12]

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800850e:	4b1c      	ldr	r3, [pc, #112]	@ (8008580 <HAL_RTC_Init+0x140>)
 8008510:	699b      	ldr	r3, [r3, #24]
 8008512:	2220      	movs	r2, #32
 8008514:	4013      	ands	r3, r2
 8008516:	d110      	bne.n	800853a <HAL_RTC_Init+0xfa>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	0018      	movs	r0, r3
 800851c:	f000 f836 	bl	800858c <HAL_RTC_WaitForSynchro>
 8008520:	1e03      	subs	r3, r0, #0
 8008522:	d00a      	beq.n	800853a <HAL_RTC_Init+0xfa>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008524:	4b16      	ldr	r3, [pc, #88]	@ (8008580 <HAL_RTC_Init+0x140>)
 8008526:	22ff      	movs	r2, #255	@ 0xff
 8008528:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	222d      	movs	r2, #45	@ 0x2d
 800852e:	2104      	movs	r1, #4
 8008530:	5499      	strb	r1, [r3, r2]
          status = HAL_ERROR;
 8008532:	230f      	movs	r3, #15
 8008534:	18fb      	adds	r3, r7, r3
 8008536:	2201      	movs	r2, #1
 8008538:	701a      	strb	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 800853a:	230f      	movs	r3, #15
 800853c:	18fb      	adds	r3, r7, r3
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d115      	bne.n	8008570 <HAL_RTC_Init+0x130>
      {
        MODIFY_REG(RTC->CR, \
 8008544:	4b0e      	ldr	r3, [pc, #56]	@ (8008580 <HAL_RTC_Init+0x140>)
 8008546:	699b      	ldr	r3, [r3, #24]
 8008548:	00db      	lsls	r3, r3, #3
 800854a:	08d9      	lsrs	r1, r3, #3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6a1a      	ldr	r2, [r3, #32]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	69db      	ldr	r3, [r3, #28]
 8008554:	431a      	orrs	r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	695b      	ldr	r3, [r3, #20]
 800855a:	431a      	orrs	r2, r3
 800855c:	4b08      	ldr	r3, [pc, #32]	@ (8008580 <HAL_RTC_Init+0x140>)
 800855e:	430a      	orrs	r2, r1
 8008560:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008562:	4b07      	ldr	r3, [pc, #28]	@ (8008580 <HAL_RTC_Init+0x140>)
 8008564:	22ff      	movs	r2, #255	@ 0xff
 8008566:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	222d      	movs	r2, #45	@ 0x2d
 800856c:	2101      	movs	r1, #1
 800856e:	5499      	strb	r1, [r3, r2]
      }
    }
  }

  return status;
 8008570:	230f      	movs	r3, #15
 8008572:	18fb      	adds	r3, r7, r3
 8008574:	781b      	ldrb	r3, [r3, #0]
}
 8008576:	0018      	movs	r0, r3
 8008578:	46bd      	mov	sp, r7
 800857a:	b004      	add	sp, #16
 800857c:	bd80      	pop	{r7, pc}
 800857e:	46c0      	nop			@ (mov r8, r8)
 8008580:	40002800 	.word	0x40002800
 8008584:	fb8fffbf 	.word	0xfb8fffbf
 8008588:	ffffe0ff 	.word	0xffffe0ff

0800858c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(const RTC_HandleTypeDef *hrtc)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8008594:	4b0f      	ldr	r3, [pc, #60]	@ (80085d4 <HAL_RTC_WaitForSynchro+0x48>)
 8008596:	68da      	ldr	r2, [r3, #12]
 8008598:	4b0e      	ldr	r3, [pc, #56]	@ (80085d4 <HAL_RTC_WaitForSynchro+0x48>)
 800859a:	2120      	movs	r1, #32
 800859c:	438a      	bics	r2, r1
 800859e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80085a0:	f7fd f8b0 	bl	8005704 <HAL_GetTick>
 80085a4:	0003      	movs	r3, r0
 80085a6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80085a8:	e00a      	b.n	80085c0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80085aa:	f7fd f8ab 	bl	8005704 <HAL_GetTick>
 80085ae:	0002      	movs	r2, r0
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	1ad2      	subs	r2, r2, r3
 80085b4:	23fa      	movs	r3, #250	@ 0xfa
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d901      	bls.n	80085c0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80085bc:	2303      	movs	r3, #3
 80085be:	e005      	b.n	80085cc <HAL_RTC_WaitForSynchro+0x40>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80085c0:	4b04      	ldr	r3, [pc, #16]	@ (80085d4 <HAL_RTC_WaitForSynchro+0x48>)
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	2220      	movs	r2, #32
 80085c6:	4013      	ands	r3, r2
 80085c8:	d0ef      	beq.n	80085aa <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	0018      	movs	r0, r3
 80085ce:	46bd      	mov	sp, r7
 80085d0:	b004      	add	sp, #16
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	40002800 	.word	0x40002800

080085d8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(const RTC_HandleTypeDef *hrtc)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80085e0:	4b12      	ldr	r3, [pc, #72]	@ (800862c <RTC_EnterInitMode+0x54>)
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	2240      	movs	r2, #64	@ 0x40
 80085e6:	4013      	ands	r3, r2
 80085e8:	d11a      	bne.n	8008620 <RTC_EnterInitMode+0x48>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80085ea:	4b10      	ldr	r3, [pc, #64]	@ (800862c <RTC_EnterInitMode+0x54>)
 80085ec:	68da      	ldr	r2, [r3, #12]
 80085ee:	4b0f      	ldr	r3, [pc, #60]	@ (800862c <RTC_EnterInitMode+0x54>)
 80085f0:	2180      	movs	r1, #128	@ 0x80
 80085f2:	430a      	orrs	r2, r1
 80085f4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80085f6:	f7fd f885 	bl	8005704 <HAL_GetTick>
 80085fa:	0003      	movs	r3, r0
 80085fc:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80085fe:	e00a      	b.n	8008616 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008600:	f7fd f880 	bl	8005704 <HAL_GetTick>
 8008604:	0002      	movs	r2, r0
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	1ad2      	subs	r2, r2, r3
 800860a:	23fa      	movs	r3, #250	@ 0xfa
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	429a      	cmp	r2, r3
 8008610:	d901      	bls.n	8008616 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8008612:	2303      	movs	r3, #3
 8008614:	e005      	b.n	8008622 <RTC_EnterInitMode+0x4a>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008616:	4b05      	ldr	r3, [pc, #20]	@ (800862c <RTC_EnterInitMode+0x54>)
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	2240      	movs	r2, #64	@ 0x40
 800861c:	4013      	ands	r3, r2
 800861e:	d0ef      	beq.n	8008600 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	0018      	movs	r0, r3
 8008624:	46bd      	mov	sp, r7
 8008626:	b004      	add	sp, #16
 8008628:	bd80      	pop	{r7, pc}
 800862a:	46c0      	nop			@ (mov r8, r8)
 800862c:	40002800 	.word	0x40002800

08008630 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	222c      	movs	r2, #44	@ 0x2c
 8008640:	5c9b      	ldrb	r3, [r3, r2]
 8008642:	2b01      	cmp	r3, #1
 8008644:	d101      	bne.n	800864a <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8008646:	2302      	movs	r3, #2
 8008648:	e06c      	b.n	8008724 <HAL_RTCEx_SetWakeUpTimer+0xf4>
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	222c      	movs	r2, #44	@ 0x2c
 800864e:	2101      	movs	r1, #1
 8008650:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	222d      	movs	r2, #45	@ 0x2d
 8008656:	2102      	movs	r1, #2
 8008658:	5499      	strb	r1, [r3, r2]

  /* Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if (READ_BIT(RTC->CR, RTC_CR_WUTE) != 0U)
 800865a:	4b34      	ldr	r3, [pc, #208]	@ (800872c <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 800865c:	699a      	ldr	r2, [r3, #24]
 800865e:	2380      	movs	r3, #128	@ 0x80
 8008660:	00db      	lsls	r3, r3, #3
 8008662:	4013      	ands	r3, r2
 8008664:	d01c      	beq.n	80086a0 <HAL_RTCEx_SetWakeUpTimer+0x70>
  {
    tickstart = HAL_GetTick();
 8008666:	f7fd f84d 	bl	8005704 <HAL_GetTick>
 800866a:	0003      	movs	r3, r0
 800866c:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 800866e:	e012      	b.n	8008696 <HAL_RTCEx_SetWakeUpTimer+0x66>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008670:	f7fd f848 	bl	8005704 <HAL_GetTick>
 8008674:	0002      	movs	r2, r0
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	1ad2      	subs	r2, r2, r3
 800867a:	23fa      	movs	r3, #250	@ 0xfa
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	429a      	cmp	r2, r3
 8008680:	d909      	bls.n	8008696 <HAL_RTCEx_SetWakeUpTimer+0x66>
      {
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	222d      	movs	r2, #45	@ 0x2d
 8008686:	2103      	movs	r1, #3
 8008688:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	222c      	movs	r2, #44	@ 0x2c
 800868e:	2100      	movs	r1, #0
 8008690:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008692:	2303      	movs	r3, #3
 8008694:	e046      	b.n	8008724 <HAL_RTCEx_SetWakeUpTimer+0xf4>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 8008696:	4b25      	ldr	r3, [pc, #148]	@ (800872c <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	2204      	movs	r2, #4
 800869c:	4013      	ands	r3, r2
 800869e:	d1e7      	bne.n	8008670 <HAL_RTCEx_SetWakeUpTimer+0x40>
      }
    }
  }

  /* Disable Wake Up timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 80086a0:	4b22      	ldr	r3, [pc, #136]	@ (800872c <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 80086a2:	699a      	ldr	r2, [r3, #24]
 80086a4:	4b21      	ldr	r3, [pc, #132]	@ (800872c <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 80086a6:	4922      	ldr	r1, [pc, #136]	@ (8008730 <HAL_RTCEx_SetWakeUpTimer+0x100>)
 80086a8:	400a      	ands	r2, r1
 80086aa:	619a      	str	r2, [r3, #24]

  tickstart = HAL_GetTick();
 80086ac:	f7fd f82a 	bl	8005704 <HAL_GetTick>
 80086b0:	0003      	movs	r3, r0
 80086b2:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80086b4:	e012      	b.n	80086dc <HAL_RTCEx_SetWakeUpTimer+0xac>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80086b6:	f7fd f825 	bl	8005704 <HAL_GetTick>
 80086ba:	0002      	movs	r2, r0
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	1ad2      	subs	r2, r2, r3
 80086c0:	23fa      	movs	r3, #250	@ 0xfa
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d909      	bls.n	80086dc <HAL_RTCEx_SetWakeUpTimer+0xac>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	222d      	movs	r2, #45	@ 0x2d
 80086cc:	2103      	movs	r1, #3
 80086ce:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	222c      	movs	r2, #44	@ 0x2c
 80086d4:	2100      	movs	r1, #0
 80086d6:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80086d8:	2303      	movs	r3, #3
 80086da:	e023      	b.n	8008724 <HAL_RTCEx_SetWakeUpTimer+0xf4>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80086dc:	4b13      	ldr	r3, [pc, #76]	@ (800872c <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	2204      	movs	r2, #4
 80086e2:	4013      	ands	r3, r2
 80086e4:	d0e7      	beq.n	80086b6 <HAL_RTCEx_SetWakeUpTimer+0x86>
    }
  }

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80086e6:	4b11      	ldr	r3, [pc, #68]	@ (800872c <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 80086e8:	699b      	ldr	r3, [r3, #24]
 80086ea:	2207      	movs	r2, #7
 80086ec:	4393      	bics	r3, r2
 80086ee:	0019      	movs	r1, r3
 80086f0:	4b0e      	ldr	r3, [pc, #56]	@ (800872c <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	430a      	orrs	r2, r1
 80086f6:	619a      	str	r2, [r3, #24]

  /* Configure the Wakeup Timer counter */
  WRITE_REG(RTC->WUTR, (uint32_t)WakeUpCounter);
 80086f8:	4b0c      	ldr	r3, [pc, #48]	@ (800872c <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 80086fa:	68ba      	ldr	r2, [r7, #8]
 80086fc:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  SET_BIT(RTC->CR, RTC_CR_WUTE);
 80086fe:	4b0b      	ldr	r3, [pc, #44]	@ (800872c <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008700:	699a      	ldr	r2, [r3, #24]
 8008702:	4b0a      	ldr	r3, [pc, #40]	@ (800872c <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008704:	2180      	movs	r1, #128	@ 0x80
 8008706:	00c9      	lsls	r1, r1, #3
 8008708:	430a      	orrs	r2, r1
 800870a:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800870c:	4b07      	ldr	r3, [pc, #28]	@ (800872c <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 800870e:	22ff      	movs	r2, #255	@ 0xff
 8008710:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	222d      	movs	r2, #45	@ 0x2d
 8008716:	2101      	movs	r1, #1
 8008718:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	222c      	movs	r2, #44	@ 0x2c
 800871e:	2100      	movs	r1, #0
 8008720:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008722:	2300      	movs	r3, #0
}
 8008724:	0018      	movs	r0, r3
 8008726:	46bd      	mov	sp, r7
 8008728:	b006      	add	sp, #24
 800872a:	bd80      	pop	{r7, pc}
 800872c:	40002800 	.word	0x40002800
 8008730:	fffffbff 	.word	0xfffffbff

08008734 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d101      	bne.n	8008746 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	e0a0      	b.n	8008888 <HAL_SPI_Init+0x154>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800874a:	2b00      	cmp	r3, #0
 800874c:	d109      	bne.n	8008762 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	685a      	ldr	r2, [r3, #4]
 8008752:	2382      	movs	r3, #130	@ 0x82
 8008754:	005b      	lsls	r3, r3, #1
 8008756:	429a      	cmp	r2, r3
 8008758:	d009      	beq.n	800876e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	61da      	str	r2, [r3, #28]
 8008760:	e005      	b.n	800876e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	225d      	movs	r2, #93	@ 0x5d
 8008778:	5c9b      	ldrb	r3, [r3, r2]
 800877a:	b2db      	uxtb	r3, r3
 800877c:	2b00      	cmp	r3, #0
 800877e:	d107      	bne.n	8008790 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	225c      	movs	r2, #92	@ 0x5c
 8008784:	2100      	movs	r1, #0
 8008786:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	0018      	movs	r0, r3
 800878c:	f7fc fd02 	bl	8005194 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	225d      	movs	r2, #93	@ 0x5d
 8008794:	2102      	movs	r1, #2
 8008796:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2140      	movs	r1, #64	@ 0x40
 80087a4:	438a      	bics	r2, r1
 80087a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	68da      	ldr	r2, [r3, #12]
 80087ac:	23e0      	movs	r3, #224	@ 0xe0
 80087ae:	00db      	lsls	r3, r3, #3
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d902      	bls.n	80087ba <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80087b4:	2300      	movs	r3, #0
 80087b6:	60fb      	str	r3, [r7, #12]
 80087b8:	e002      	b.n	80087c0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80087ba:	2380      	movs	r3, #128	@ 0x80
 80087bc:	015b      	lsls	r3, r3, #5
 80087be:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	68da      	ldr	r2, [r3, #12]
 80087c4:	23f0      	movs	r3, #240	@ 0xf0
 80087c6:	011b      	lsls	r3, r3, #4
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d008      	beq.n	80087de <HAL_SPI_Init+0xaa>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	68da      	ldr	r2, [r3, #12]
 80087d0:	23e0      	movs	r3, #224	@ 0xe0
 80087d2:	00db      	lsls	r3, r3, #3
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d002      	beq.n	80087de <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	685a      	ldr	r2, [r3, #4]
 80087e2:	2382      	movs	r3, #130	@ 0x82
 80087e4:	005b      	lsls	r3, r3, #1
 80087e6:	401a      	ands	r2, r3
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6899      	ldr	r1, [r3, #8]
 80087ec:	2384      	movs	r3, #132	@ 0x84
 80087ee:	021b      	lsls	r3, r3, #8
 80087f0:	400b      	ands	r3, r1
 80087f2:	431a      	orrs	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	2102      	movs	r1, #2
 80087fa:	400b      	ands	r3, r1
 80087fc:	431a      	orrs	r2, r3
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	695b      	ldr	r3, [r3, #20]
 8008802:	2101      	movs	r1, #1
 8008804:	400b      	ands	r3, r1
 8008806:	431a      	orrs	r2, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6999      	ldr	r1, [r3, #24]
 800880c:	2380      	movs	r3, #128	@ 0x80
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	400b      	ands	r3, r1
 8008812:	431a      	orrs	r2, r3
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	69db      	ldr	r3, [r3, #28]
 8008818:	2138      	movs	r1, #56	@ 0x38
 800881a:	400b      	ands	r3, r1
 800881c:	431a      	orrs	r2, r3
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a1b      	ldr	r3, [r3, #32]
 8008822:	2180      	movs	r1, #128	@ 0x80
 8008824:	400b      	ands	r3, r1
 8008826:	431a      	orrs	r2, r3
 8008828:	0011      	movs	r1, r2
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800882e:	2380      	movs	r3, #128	@ 0x80
 8008830:	019b      	lsls	r3, r3, #6
 8008832:	401a      	ands	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	430a      	orrs	r2, r1
 800883a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	699b      	ldr	r3, [r3, #24]
 8008840:	0c1b      	lsrs	r3, r3, #16
 8008842:	2204      	movs	r2, #4
 8008844:	401a      	ands	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800884a:	2110      	movs	r1, #16
 800884c:	400b      	ands	r3, r1
 800884e:	431a      	orrs	r2, r3
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008854:	2108      	movs	r1, #8
 8008856:	400b      	ands	r3, r1
 8008858:	431a      	orrs	r2, r3
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	68d9      	ldr	r1, [r3, #12]
 800885e:	23f0      	movs	r3, #240	@ 0xf0
 8008860:	011b      	lsls	r3, r3, #4
 8008862:	400b      	ands	r3, r1
 8008864:	431a      	orrs	r2, r3
 8008866:	0011      	movs	r1, r2
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	2380      	movs	r3, #128	@ 0x80
 800886c:	015b      	lsls	r3, r3, #5
 800886e:	401a      	ands	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	430a      	orrs	r2, r1
 8008876:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	225d      	movs	r2, #93	@ 0x5d
 8008882:	2101      	movs	r1, #1
 8008884:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008886:	2300      	movs	r3, #0
}
 8008888:	0018      	movs	r0, r3
 800888a:	46bd      	mov	sp, r7
 800888c:	b004      	add	sp, #16
 800888e:	bd80      	pop	{r7, pc}

08008890 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d101      	bne.n	80088a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	e046      	b.n	8008930 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2288      	movs	r2, #136	@ 0x88
 80088a6:	589b      	ldr	r3, [r3, r2]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d107      	bne.n	80088bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2284      	movs	r2, #132	@ 0x84
 80088b0:	2100      	movs	r1, #0
 80088b2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	0018      	movs	r0, r3
 80088b8:	f7fc fe2a 	bl	8005510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2288      	movs	r2, #136	@ 0x88
 80088c0:	2124      	movs	r1, #36	@ 0x24
 80088c2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2101      	movs	r1, #1
 80088d0:	438a      	bics	r2, r1
 80088d2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d003      	beq.n	80088e4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	0018      	movs	r0, r3
 80088e0:	f000 f9fe 	bl	8008ce0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	0018      	movs	r0, r3
 80088e8:	f000 f828 	bl	800893c <UART_SetConfig>
 80088ec:	0003      	movs	r3, r0
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d101      	bne.n	80088f6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e01c      	b.n	8008930 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	685a      	ldr	r2, [r3, #4]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	490d      	ldr	r1, [pc, #52]	@ (8008938 <HAL_UART_Init+0xa8>)
 8008902:	400a      	ands	r2, r1
 8008904:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	689a      	ldr	r2, [r3, #8]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	212a      	movs	r1, #42	@ 0x2a
 8008912:	438a      	bics	r2, r1
 8008914:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	2101      	movs	r1, #1
 8008922:	430a      	orrs	r2, r1
 8008924:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	0018      	movs	r0, r3
 800892a:	f000 fa8d 	bl	8008e48 <UART_CheckIdleState>
 800892e:	0003      	movs	r3, r0
}
 8008930:	0018      	movs	r0, r3
 8008932:	46bd      	mov	sp, r7
 8008934:	b002      	add	sp, #8
 8008936:	bd80      	pop	{r7, pc}
 8008938:	ffffb7ff 	.word	0xffffb7ff

0800893c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800893c:	b5b0      	push	{r4, r5, r7, lr}
 800893e:	b092      	sub	sp, #72	@ 0x48
 8008940:	af00      	add	r7, sp, #0
 8008942:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008944:	231f      	movs	r3, #31
 8008946:	2220      	movs	r2, #32
 8008948:	189b      	adds	r3, r3, r2
 800894a:	19db      	adds	r3, r3, r7
 800894c:	2200      	movs	r2, #0
 800894e:	701a      	strb	r2, [r3, #0]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4ac8      	ldr	r2, [pc, #800]	@ (8008c78 <UART_SetConfig+0x33c>)
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008958:	689a      	ldr	r2, [r3, #8]
 800895a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	431a      	orrs	r2, r3
 8008960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008962:	695b      	ldr	r3, [r3, #20]
 8008964:	431a      	orrs	r2, r3
 8008966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008968:	69db      	ldr	r3, [r3, #28]
 800896a:	4313      	orrs	r3, r2
 800896c:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800896e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4ac1      	ldr	r2, [pc, #772]	@ (8008c7c <UART_SetConfig+0x340>)
 8008976:	4013      	ands	r3, r2
 8008978:	0019      	movs	r1, r3
 800897a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008980:	430b      	orrs	r3, r1
 8008982:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	4abd      	ldr	r2, [pc, #756]	@ (8008c80 <UART_SetConfig+0x344>)
 800898c:	4013      	ands	r3, r2
 800898e:	0018      	movs	r0, r3
 8008990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008992:	68d9      	ldr	r1, [r3, #12]
 8008994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	0003      	movs	r3, r0
 800899a:	430b      	orrs	r3, r1
 800899c:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800899e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a0:	699b      	ldr	r3, [r3, #24]
 80089a2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80089a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4ab3      	ldr	r2, [pc, #716]	@ (8008c78 <UART_SetConfig+0x33c>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d00e      	beq.n	80089cc <UART_SetConfig+0x90>
 80089ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4ab4      	ldr	r2, [pc, #720]	@ (8008c84 <UART_SetConfig+0x348>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d009      	beq.n	80089cc <UART_SetConfig+0x90>
 80089b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4ab2      	ldr	r2, [pc, #712]	@ (8008c88 <UART_SetConfig+0x34c>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d004      	beq.n	80089cc <UART_SetConfig+0x90>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80089c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c4:	6a1b      	ldr	r3, [r3, #32]
 80089c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80089c8:	4313      	orrs	r3, r2
 80089ca:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	4aae      	ldr	r2, [pc, #696]	@ (8008c8c <UART_SetConfig+0x350>)
 80089d4:	4013      	ands	r3, r2
 80089d6:	0019      	movs	r1, r3
 80089d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089de:	430b      	orrs	r3, r1
 80089e0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80089e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089e8:	220f      	movs	r2, #15
 80089ea:	4393      	bics	r3, r2
 80089ec:	0018      	movs	r0, r3
 80089ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80089f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	0003      	movs	r3, r0
 80089f8:	430b      	orrs	r3, r1
 80089fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4aa3      	ldr	r2, [pc, #652]	@ (8008c90 <UART_SetConfig+0x354>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d102      	bne.n	8008a0c <UART_SetConfig+0xd0>
 8008a06:	2301      	movs	r3, #1
 8008a08:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a0a:	e033      	b.n	8008a74 <UART_SetConfig+0x138>
 8008a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4aa0      	ldr	r2, [pc, #640]	@ (8008c94 <UART_SetConfig+0x358>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d102      	bne.n	8008a1c <UART_SetConfig+0xe0>
 8008a16:	2302      	movs	r3, #2
 8008a18:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a1a:	e02b      	b.n	8008a74 <UART_SetConfig+0x138>
 8008a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a9d      	ldr	r2, [pc, #628]	@ (8008c98 <UART_SetConfig+0x35c>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d103      	bne.n	8008a2e <UART_SetConfig+0xf2>
 8008a26:	2380      	movs	r3, #128	@ 0x80
 8008a28:	025b      	lsls	r3, r3, #9
 8008a2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a2c:	e022      	b.n	8008a74 <UART_SetConfig+0x138>
 8008a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a9a      	ldr	r2, [pc, #616]	@ (8008c9c <UART_SetConfig+0x360>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d103      	bne.n	8008a40 <UART_SetConfig+0x104>
 8008a38:	2380      	movs	r3, #128	@ 0x80
 8008a3a:	029b      	lsls	r3, r3, #10
 8008a3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a3e:	e019      	b.n	8008a74 <UART_SetConfig+0x138>
 8008a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a8c      	ldr	r2, [pc, #560]	@ (8008c78 <UART_SetConfig+0x33c>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d102      	bne.n	8008a50 <UART_SetConfig+0x114>
 8008a4a:	2310      	movs	r3, #16
 8008a4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a4e:	e011      	b.n	8008a74 <UART_SetConfig+0x138>
 8008a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a8b      	ldr	r2, [pc, #556]	@ (8008c84 <UART_SetConfig+0x348>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d102      	bne.n	8008a60 <UART_SetConfig+0x124>
 8008a5a:	2308      	movs	r3, #8
 8008a5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a5e:	e009      	b.n	8008a74 <UART_SetConfig+0x138>
 8008a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a88      	ldr	r2, [pc, #544]	@ (8008c88 <UART_SetConfig+0x34c>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d102      	bne.n	8008a70 <UART_SetConfig+0x134>
 8008a6a:	2304      	movs	r3, #4
 8008a6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a6e:	e001      	b.n	8008a74 <UART_SetConfig+0x138>
 8008a70:	2300      	movs	r3, #0
 8008a72:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a7f      	ldr	r2, [pc, #508]	@ (8008c78 <UART_SetConfig+0x33c>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d00a      	beq.n	8008a94 <UART_SetConfig+0x158>
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a80      	ldr	r2, [pc, #512]	@ (8008c84 <UART_SetConfig+0x348>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d005      	beq.n	8008a94 <UART_SetConfig+0x158>
 8008a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a7e      	ldr	r2, [pc, #504]	@ (8008c88 <UART_SetConfig+0x34c>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d000      	beq.n	8008a94 <UART_SetConfig+0x158>
 8008a92:	e06f      	b.n	8008b74 <UART_SetConfig+0x238>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008a94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a96:	0018      	movs	r0, r3
 8008a98:	f7fe fec8 	bl	800782c <HAL_RCCEx_GetPeriphCLKFreq>
 8008a9c:	0003      	movs	r3, r0
 8008a9e:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* If proper clock source reported */
    if (pclk != 0U)
 8008aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d100      	bne.n	8008aa8 <UART_SetConfig+0x16c>
 8008aa6:	e103      	b.n	8008cb0 <UART_SetConfig+0x374>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aaa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008aac:	4b7c      	ldr	r3, [pc, #496]	@ (8008ca0 <UART_SetConfig+0x364>)
 8008aae:	0052      	lsls	r2, r2, #1
 8008ab0:	5ad3      	ldrh	r3, [r2, r3]
 8008ab2:	0019      	movs	r1, r3
 8008ab4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008ab6:	f7f7 fb43 	bl	8000140 <__udivsi3>
 8008aba:	0003      	movs	r3, r0
 8008abc:	62fb      	str	r3, [r7, #44]	@ 0x2c

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac0:	685a      	ldr	r2, [r3, #4]
 8008ac2:	0013      	movs	r3, r2
 8008ac4:	005b      	lsls	r3, r3, #1
 8008ac6:	189b      	adds	r3, r3, r2
 8008ac8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d305      	bcc.n	8008ada <UART_SetConfig+0x19e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ad4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d906      	bls.n	8008ae8 <UART_SetConfig+0x1ac>
      {
        ret = HAL_ERROR;
 8008ada:	231f      	movs	r3, #31
 8008adc:	2220      	movs	r2, #32
 8008ade:	189b      	adds	r3, r3, r2
 8008ae0:	19db      	adds	r3, r3, r7
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	701a      	strb	r2, [r3, #0]
 8008ae6:	e044      	b.n	8008b72 <UART_SetConfig+0x236>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aea:	61bb      	str	r3, [r7, #24]
 8008aec:	2300      	movs	r3, #0
 8008aee:	61fb      	str	r3, [r7, #28]
 8008af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008af4:	4b6a      	ldr	r3, [pc, #424]	@ (8008ca0 <UART_SetConfig+0x364>)
 8008af6:	0052      	lsls	r2, r2, #1
 8008af8:	5ad3      	ldrh	r3, [r2, r3]
 8008afa:	613b      	str	r3, [r7, #16]
 8008afc:	2300      	movs	r3, #0
 8008afe:	617b      	str	r3, [r7, #20]
 8008b00:	693a      	ldr	r2, [r7, #16]
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	69b8      	ldr	r0, [r7, #24]
 8008b06:	69f9      	ldr	r1, [r7, #28]
 8008b08:	f7f7 fcec 	bl	80004e4 <__aeabi_uldivmod>
 8008b0c:	0002      	movs	r2, r0
 8008b0e:	000b      	movs	r3, r1
 8008b10:	0e11      	lsrs	r1, r2, #24
 8008b12:	021d      	lsls	r5, r3, #8
 8008b14:	430d      	orrs	r5, r1
 8008b16:	0214      	lsls	r4, r2, #8
 8008b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	085b      	lsrs	r3, r3, #1
 8008b1e:	60bb      	str	r3, [r7, #8]
 8008b20:	2300      	movs	r3, #0
 8008b22:	60fb      	str	r3, [r7, #12]
 8008b24:	68b8      	ldr	r0, [r7, #8]
 8008b26:	68f9      	ldr	r1, [r7, #12]
 8008b28:	1900      	adds	r0, r0, r4
 8008b2a:	4169      	adcs	r1, r5
 8008b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	603b      	str	r3, [r7, #0]
 8008b32:	2300      	movs	r3, #0
 8008b34:	607b      	str	r3, [r7, #4]
 8008b36:	683a      	ldr	r2, [r7, #0]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f7f7 fcd3 	bl	80004e4 <__aeabi_uldivmod>
 8008b3e:	0002      	movs	r2, r0
 8008b40:	000b      	movs	r3, r1
 8008b42:	0013      	movs	r3, r2
 8008b44:	637b      	str	r3, [r7, #52]	@ 0x34
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b48:	23c0      	movs	r3, #192	@ 0xc0
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d309      	bcc.n	8008b64 <UART_SetConfig+0x228>
 8008b50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b52:	2380      	movs	r3, #128	@ 0x80
 8008b54:	035b      	lsls	r3, r3, #13
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d204      	bcs.n	8008b64 <UART_SetConfig+0x228>
        {
          huart->Instance->BRR = usartdiv;
 8008b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b60:	60da      	str	r2, [r3, #12]
 8008b62:	e006      	b.n	8008b72 <UART_SetConfig+0x236>
        }
        else
        {
          ret = HAL_ERROR;
 8008b64:	231f      	movs	r3, #31
 8008b66:	2220      	movs	r2, #32
 8008b68:	189b      	adds	r3, r3, r2
 8008b6a:	19db      	adds	r3, r3, r7
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8008b70:	e09e      	b.n	8008cb0 <UART_SetConfig+0x374>
 8008b72:	e09d      	b.n	8008cb0 <UART_SetConfig+0x374>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b76:	69da      	ldr	r2, [r3, #28]
 8008b78:	2380      	movs	r3, #128	@ 0x80
 8008b7a:	021b      	lsls	r3, r3, #8
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d14c      	bne.n	8008c1a <UART_SetConfig+0x2de>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008b80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b82:	0018      	movs	r0, r3
 8008b84:	f7fe fe52 	bl	800782c <HAL_RCCEx_GetPeriphCLKFreq>
 8008b88:	0003      	movs	r3, r0
 8008b8a:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d100      	bne.n	8008b94 <UART_SetConfig+0x258>
 8008b92:	e08d      	b.n	8008cb0 <UART_SetConfig+0x374>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008b98:	4b41      	ldr	r3, [pc, #260]	@ (8008ca0 <UART_SetConfig+0x364>)
 8008b9a:	0052      	lsls	r2, r2, #1
 8008b9c:	5ad3      	ldrh	r3, [r2, r3]
 8008b9e:	0019      	movs	r1, r3
 8008ba0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008ba2:	f7f7 facd 	bl	8000140 <__udivsi3>
 8008ba6:	0003      	movs	r3, r0
 8008ba8:	005a      	lsls	r2, r3, #1
 8008baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	085b      	lsrs	r3, r3, #1
 8008bb0:	18d2      	adds	r2, r2, r3
 8008bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	0019      	movs	r1, r3
 8008bb8:	0010      	movs	r0, r2
 8008bba:	f7f7 fac1 	bl	8000140 <__udivsi3>
 8008bbe:	0003      	movs	r3, r0
 8008bc0:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bc4:	2b0f      	cmp	r3, #15
 8008bc6:	d921      	bls.n	8008c0c <UART_SetConfig+0x2d0>
 8008bc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008bca:	2380      	movs	r3, #128	@ 0x80
 8008bcc:	025b      	lsls	r3, r3, #9
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d21c      	bcs.n	8008c0c <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bd4:	b29a      	uxth	r2, r3
 8008bd6:	2012      	movs	r0, #18
 8008bd8:	2420      	movs	r4, #32
 8008bda:	1903      	adds	r3, r0, r4
 8008bdc:	19db      	adds	r3, r3, r7
 8008bde:	210f      	movs	r1, #15
 8008be0:	438a      	bics	r2, r1
 8008be2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008be6:	085b      	lsrs	r3, r3, #1
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	2207      	movs	r2, #7
 8008bec:	4013      	ands	r3, r2
 8008bee:	b299      	uxth	r1, r3
 8008bf0:	1903      	adds	r3, r0, r4
 8008bf2:	19db      	adds	r3, r3, r7
 8008bf4:	1902      	adds	r2, r0, r4
 8008bf6:	19d2      	adds	r2, r2, r7
 8008bf8:	8812      	ldrh	r2, [r2, #0]
 8008bfa:	430a      	orrs	r2, r1
 8008bfc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	1902      	adds	r2, r0, r4
 8008c04:	19d2      	adds	r2, r2, r7
 8008c06:	8812      	ldrh	r2, [r2, #0]
 8008c08:	60da      	str	r2, [r3, #12]
 8008c0a:	e051      	b.n	8008cb0 <UART_SetConfig+0x374>
      }
      else
      {
        ret = HAL_ERROR;
 8008c0c:	231f      	movs	r3, #31
 8008c0e:	2220      	movs	r2, #32
 8008c10:	189b      	adds	r3, r3, r2
 8008c12:	19db      	adds	r3, r3, r7
 8008c14:	2201      	movs	r2, #1
 8008c16:	701a      	strb	r2, [r3, #0]
 8008c18:	e04a      	b.n	8008cb0 <UART_SetConfig+0x374>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008c1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c1c:	0018      	movs	r0, r3
 8008c1e:	f7fe fe05 	bl	800782c <HAL_RCCEx_GetPeriphCLKFreq>
 8008c22:	0003      	movs	r3, r0
 8008c24:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (pclk != 0U)
 8008c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d041      	beq.n	8008cb0 <UART_SetConfig+0x374>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008c30:	4b1b      	ldr	r3, [pc, #108]	@ (8008ca0 <UART_SetConfig+0x364>)
 8008c32:	0052      	lsls	r2, r2, #1
 8008c34:	5ad3      	ldrh	r3, [r2, r3]
 8008c36:	0019      	movs	r1, r3
 8008c38:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008c3a:	f7f7 fa81 	bl	8000140 <__udivsi3>
 8008c3e:	0003      	movs	r3, r0
 8008c40:	001a      	movs	r2, r3
 8008c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	085b      	lsrs	r3, r3, #1
 8008c48:	18d2      	adds	r2, r2, r3
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	0019      	movs	r1, r3
 8008c50:	0010      	movs	r0, r2
 8008c52:	f7f7 fa75 	bl	8000140 <__udivsi3>
 8008c56:	0003      	movs	r3, r0
 8008c58:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c5c:	2b0f      	cmp	r3, #15
 8008c5e:	d921      	bls.n	8008ca4 <UART_SetConfig+0x368>
 8008c60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c62:	2380      	movs	r3, #128	@ 0x80
 8008c64:	025b      	lsls	r3, r3, #9
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d21c      	bcs.n	8008ca4 <UART_SetConfig+0x368>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	60da      	str	r2, [r3, #12]
 8008c74:	e01c      	b.n	8008cb0 <UART_SetConfig+0x374>
 8008c76:	46c0      	nop			@ (mov r8, r8)
 8008c78:	40008000 	.word	0x40008000
 8008c7c:	cfff69f3 	.word	0xcfff69f3
 8008c80:	ffffcfff 	.word	0xffffcfff
 8008c84:	40008400 	.word	0x40008400
 8008c88:	40008c00 	.word	0x40008c00
 8008c8c:	11fff4ff 	.word	0x11fff4ff
 8008c90:	40013800 	.word	0x40013800
 8008c94:	40004400 	.word	0x40004400
 8008c98:	40004800 	.word	0x40004800
 8008c9c:	40004c00 	.word	0x40004c00
 8008ca0:	0800c3c4 	.word	0x0800c3c4
      }
      else
      {
        ret = HAL_ERROR;
 8008ca4:	231f      	movs	r3, #31
 8008ca6:	2220      	movs	r2, #32
 8008ca8:	189b      	adds	r3, r3, r2
 8008caa:	19db      	adds	r3, r3, r7
 8008cac:	2201      	movs	r2, #1
 8008cae:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb2:	226a      	movs	r2, #106	@ 0x6a
 8008cb4:	2101      	movs	r1, #1
 8008cb6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8008cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cba:	2268      	movs	r2, #104	@ 0x68
 8008cbc:	2101      	movs	r1, #1
 8008cbe:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc8:	2200      	movs	r2, #0
 8008cca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008ccc:	231f      	movs	r3, #31
 8008cce:	2220      	movs	r2, #32
 8008cd0:	189b      	adds	r3, r3, r2
 8008cd2:	19db      	adds	r3, r3, r7
 8008cd4:	781b      	ldrb	r3, [r3, #0]
}
 8008cd6:	0018      	movs	r0, r3
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	b012      	add	sp, #72	@ 0x48
 8008cdc:	bdb0      	pop	{r4, r5, r7, pc}
 8008cde:	46c0      	nop			@ (mov r8, r8)

08008ce0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cec:	2208      	movs	r2, #8
 8008cee:	4013      	ands	r3, r2
 8008cf0:	d00b      	beq.n	8008d0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	4a4a      	ldr	r2, [pc, #296]	@ (8008e24 <UART_AdvFeatureConfig+0x144>)
 8008cfa:	4013      	ands	r3, r2
 8008cfc:	0019      	movs	r1, r3
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	430a      	orrs	r2, r1
 8008d08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d0e:	2201      	movs	r2, #1
 8008d10:	4013      	ands	r3, r2
 8008d12:	d00b      	beq.n	8008d2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	4a43      	ldr	r2, [pc, #268]	@ (8008e28 <UART_AdvFeatureConfig+0x148>)
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	0019      	movs	r1, r3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	430a      	orrs	r2, r1
 8008d2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d30:	2202      	movs	r2, #2
 8008d32:	4013      	ands	r3, r2
 8008d34:	d00b      	beq.n	8008d4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	4a3b      	ldr	r2, [pc, #236]	@ (8008e2c <UART_AdvFeatureConfig+0x14c>)
 8008d3e:	4013      	ands	r3, r2
 8008d40:	0019      	movs	r1, r3
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	430a      	orrs	r2, r1
 8008d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d52:	2204      	movs	r2, #4
 8008d54:	4013      	ands	r3, r2
 8008d56:	d00b      	beq.n	8008d70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	4a34      	ldr	r2, [pc, #208]	@ (8008e30 <UART_AdvFeatureConfig+0x150>)
 8008d60:	4013      	ands	r3, r2
 8008d62:	0019      	movs	r1, r3
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	430a      	orrs	r2, r1
 8008d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d74:	2210      	movs	r2, #16
 8008d76:	4013      	ands	r3, r2
 8008d78:	d00b      	beq.n	8008d92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	4a2c      	ldr	r2, [pc, #176]	@ (8008e34 <UART_AdvFeatureConfig+0x154>)
 8008d82:	4013      	ands	r3, r2
 8008d84:	0019      	movs	r1, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	430a      	orrs	r2, r1
 8008d90:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d96:	2220      	movs	r2, #32
 8008d98:	4013      	ands	r3, r2
 8008d9a:	d00b      	beq.n	8008db4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	4a25      	ldr	r2, [pc, #148]	@ (8008e38 <UART_AdvFeatureConfig+0x158>)
 8008da4:	4013      	ands	r3, r2
 8008da6:	0019      	movs	r1, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	430a      	orrs	r2, r1
 8008db2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008db8:	2240      	movs	r2, #64	@ 0x40
 8008dba:	4013      	ands	r3, r2
 8008dbc:	d01d      	beq.n	8008dfa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8008e3c <UART_AdvFeatureConfig+0x15c>)
 8008dc6:	4013      	ands	r3, r2
 8008dc8:	0019      	movs	r1, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	430a      	orrs	r2, r1
 8008dd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008dda:	2380      	movs	r3, #128	@ 0x80
 8008ddc:	035b      	lsls	r3, r3, #13
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d10b      	bne.n	8008dfa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	4a15      	ldr	r2, [pc, #84]	@ (8008e40 <UART_AdvFeatureConfig+0x160>)
 8008dea:	4013      	ands	r3, r2
 8008dec:	0019      	movs	r1, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	430a      	orrs	r2, r1
 8008df8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dfe:	2280      	movs	r2, #128	@ 0x80
 8008e00:	4013      	ands	r3, r2
 8008e02:	d00b      	beq.n	8008e1c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	4a0e      	ldr	r2, [pc, #56]	@ (8008e44 <UART_AdvFeatureConfig+0x164>)
 8008e0c:	4013      	ands	r3, r2
 8008e0e:	0019      	movs	r1, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	430a      	orrs	r2, r1
 8008e1a:	605a      	str	r2, [r3, #4]
  }
}
 8008e1c:	46c0      	nop			@ (mov r8, r8)
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	b002      	add	sp, #8
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	ffff7fff 	.word	0xffff7fff
 8008e28:	fffdffff 	.word	0xfffdffff
 8008e2c:	fffeffff 	.word	0xfffeffff
 8008e30:	fffbffff 	.word	0xfffbffff
 8008e34:	ffffefff 	.word	0xffffefff
 8008e38:	ffffdfff 	.word	0xffffdfff
 8008e3c:	ffefffff 	.word	0xffefffff
 8008e40:	ff9fffff 	.word	0xff9fffff
 8008e44:	fff7ffff 	.word	0xfff7ffff

08008e48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b092      	sub	sp, #72	@ 0x48
 8008e4c:	af02      	add	r7, sp, #8
 8008e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2290      	movs	r2, #144	@ 0x90
 8008e54:	2100      	movs	r1, #0
 8008e56:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e58:	f7fc fc54 	bl	8005704 <HAL_GetTick>
 8008e5c:	0003      	movs	r3, r0
 8008e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2208      	movs	r2, #8
 8008e68:	4013      	ands	r3, r2
 8008e6a:	2b08      	cmp	r3, #8
 8008e6c:	d12d      	bne.n	8008eca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e70:	2280      	movs	r2, #128	@ 0x80
 8008e72:	0391      	lsls	r1, r2, #14
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	4a47      	ldr	r2, [pc, #284]	@ (8008f94 <UART_CheckIdleState+0x14c>)
 8008e78:	9200      	str	r2, [sp, #0]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f000 f88e 	bl	8008f9c <UART_WaitOnFlagUntilTimeout>
 8008e80:	1e03      	subs	r3, r0, #0
 8008e82:	d022      	beq.n	8008eca <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008e84:	f3ef 8310 	mrs	r3, PRIMASK
 8008e88:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008e8e:	2301      	movs	r3, #1
 8008e90:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e94:	f383 8810 	msr	PRIMASK, r3
}
 8008e98:	46c0      	nop			@ (mov r8, r8)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	2180      	movs	r1, #128	@ 0x80
 8008ea6:	438a      	bics	r2, r1
 8008ea8:	601a      	str	r2, [r3, #0]
 8008eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eb0:	f383 8810 	msr	PRIMASK, r3
}
 8008eb4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2288      	movs	r2, #136	@ 0x88
 8008eba:	2120      	movs	r1, #32
 8008ebc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2284      	movs	r2, #132	@ 0x84
 8008ec2:	2100      	movs	r1, #0
 8008ec4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ec6:	2303      	movs	r3, #3
 8008ec8:	e060      	b.n	8008f8c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2204      	movs	r2, #4
 8008ed2:	4013      	ands	r3, r2
 8008ed4:	2b04      	cmp	r3, #4
 8008ed6:	d146      	bne.n	8008f66 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ed8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008eda:	2280      	movs	r2, #128	@ 0x80
 8008edc:	03d1      	lsls	r1, r2, #15
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	4a2c      	ldr	r2, [pc, #176]	@ (8008f94 <UART_CheckIdleState+0x14c>)
 8008ee2:	9200      	str	r2, [sp, #0]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f000 f859 	bl	8008f9c <UART_WaitOnFlagUntilTimeout>
 8008eea:	1e03      	subs	r3, r0, #0
 8008eec:	d03b      	beq.n	8008f66 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008eee:	f3ef 8310 	mrs	r3, PRIMASK
 8008ef2:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ef6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ef8:	2301      	movs	r3, #1
 8008efa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	f383 8810 	msr	PRIMASK, r3
}
 8008f02:	46c0      	nop			@ (mov r8, r8)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4922      	ldr	r1, [pc, #136]	@ (8008f98 <UART_CheckIdleState+0x150>)
 8008f10:	400a      	ands	r2, r1
 8008f12:	601a      	str	r2, [r3, #0]
 8008f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	f383 8810 	msr	PRIMASK, r3
}
 8008f1e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008f20:	f3ef 8310 	mrs	r3, PRIMASK
 8008f24:	61bb      	str	r3, [r7, #24]
  return(result);
 8008f26:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f28:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	f383 8810 	msr	PRIMASK, r3
}
 8008f34:	46c0      	nop			@ (mov r8, r8)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	689a      	ldr	r2, [r3, #8]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2101      	movs	r1, #1
 8008f42:	438a      	bics	r2, r1
 8008f44:	609a      	str	r2, [r3, #8]
 8008f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f48:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f4a:	6a3b      	ldr	r3, [r7, #32]
 8008f4c:	f383 8810 	msr	PRIMASK, r3
}
 8008f50:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	228c      	movs	r2, #140	@ 0x8c
 8008f56:	2120      	movs	r1, #32
 8008f58:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2284      	movs	r2, #132	@ 0x84
 8008f5e:	2100      	movs	r1, #0
 8008f60:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f62:	2303      	movs	r3, #3
 8008f64:	e012      	b.n	8008f8c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2288      	movs	r2, #136	@ 0x88
 8008f6a:	2120      	movs	r1, #32
 8008f6c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	228c      	movs	r2, #140	@ 0x8c
 8008f72:	2120      	movs	r1, #32
 8008f74:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2284      	movs	r2, #132	@ 0x84
 8008f86:	2100      	movs	r1, #0
 8008f88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	0018      	movs	r0, r3
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	b010      	add	sp, #64	@ 0x40
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	01ffffff 	.word	0x01ffffff
 8008f98:	fffffedf 	.word	0xfffffedf

08008f9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	603b      	str	r3, [r7, #0]
 8008fa8:	1dfb      	adds	r3, r7, #7
 8008faa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fac:	e051      	b.n	8009052 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	d04e      	beq.n	8009052 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fb4:	f7fc fba6 	bl	8005704 <HAL_GetTick>
 8008fb8:	0002      	movs	r2, r0
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	1ad3      	subs	r3, r2, r3
 8008fbe:	69ba      	ldr	r2, [r7, #24]
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d302      	bcc.n	8008fca <UART_WaitOnFlagUntilTimeout+0x2e>
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d101      	bne.n	8008fce <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8008fca:	2303      	movs	r3, #3
 8008fcc:	e051      	b.n	8009072 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2204      	movs	r2, #4
 8008fd6:	4013      	ands	r3, r2
 8008fd8:	d03b      	beq.n	8009052 <UART_WaitOnFlagUntilTimeout+0xb6>
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	2b80      	cmp	r3, #128	@ 0x80
 8008fde:	d038      	beq.n	8009052 <UART_WaitOnFlagUntilTimeout+0xb6>
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	2b40      	cmp	r3, #64	@ 0x40
 8008fe4:	d035      	beq.n	8009052 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	69db      	ldr	r3, [r3, #28]
 8008fec:	2208      	movs	r2, #8
 8008fee:	4013      	ands	r3, r2
 8008ff0:	2b08      	cmp	r3, #8
 8008ff2:	d111      	bne.n	8009018 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2208      	movs	r2, #8
 8008ffa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	0018      	movs	r0, r3
 8009000:	f000 f83c 	bl	800907c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2290      	movs	r2, #144	@ 0x90
 8009008:	2108      	movs	r1, #8
 800900a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2284      	movs	r2, #132	@ 0x84
 8009010:	2100      	movs	r1, #0
 8009012:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8009014:	2301      	movs	r3, #1
 8009016:	e02c      	b.n	8009072 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	69da      	ldr	r2, [r3, #28]
 800901e:	2380      	movs	r3, #128	@ 0x80
 8009020:	011b      	lsls	r3, r3, #4
 8009022:	401a      	ands	r2, r3
 8009024:	2380      	movs	r3, #128	@ 0x80
 8009026:	011b      	lsls	r3, r3, #4
 8009028:	429a      	cmp	r2, r3
 800902a:	d112      	bne.n	8009052 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2280      	movs	r2, #128	@ 0x80
 8009032:	0112      	lsls	r2, r2, #4
 8009034:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	0018      	movs	r0, r3
 800903a:	f000 f81f 	bl	800907c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2290      	movs	r2, #144	@ 0x90
 8009042:	2120      	movs	r1, #32
 8009044:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2284      	movs	r2, #132	@ 0x84
 800904a:	2100      	movs	r1, #0
 800904c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800904e:	2303      	movs	r3, #3
 8009050:	e00f      	b.n	8009072 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	69db      	ldr	r3, [r3, #28]
 8009058:	68ba      	ldr	r2, [r7, #8]
 800905a:	4013      	ands	r3, r2
 800905c:	68ba      	ldr	r2, [r7, #8]
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	425a      	negs	r2, r3
 8009062:	4153      	adcs	r3, r2
 8009064:	b2db      	uxtb	r3, r3
 8009066:	001a      	movs	r2, r3
 8009068:	1dfb      	adds	r3, r7, #7
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	429a      	cmp	r2, r3
 800906e:	d09e      	beq.n	8008fae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009070:	2300      	movs	r3, #0
}
 8009072:	0018      	movs	r0, r3
 8009074:	46bd      	mov	sp, r7
 8009076:	b004      	add	sp, #16
 8009078:	bd80      	pop	{r7, pc}
	...

0800907c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b08e      	sub	sp, #56	@ 0x38
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009084:	f3ef 8310 	mrs	r3, PRIMASK
 8009088:	617b      	str	r3, [r7, #20]
  return(result);
 800908a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800908c:	637b      	str	r3, [r7, #52]	@ 0x34
 800908e:	2301      	movs	r3, #1
 8009090:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009092:	69bb      	ldr	r3, [r7, #24]
 8009094:	f383 8810 	msr	PRIMASK, r3
}
 8009098:	46c0      	nop			@ (mov r8, r8)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4926      	ldr	r1, [pc, #152]	@ (8009140 <UART_EndRxTransfer+0xc4>)
 80090a6:	400a      	ands	r2, r1
 80090a8:	601a      	str	r2, [r3, #0]
 80090aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090ae:	69fb      	ldr	r3, [r7, #28]
 80090b0:	f383 8810 	msr	PRIMASK, r3
}
 80090b4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80090b6:	f3ef 8310 	mrs	r3, PRIMASK
 80090ba:	623b      	str	r3, [r7, #32]
  return(result);
 80090bc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090be:	633b      	str	r3, [r7, #48]	@ 0x30
 80090c0:	2301      	movs	r3, #1
 80090c2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c6:	f383 8810 	msr	PRIMASK, r3
}
 80090ca:	46c0      	nop			@ (mov r8, r8)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	689a      	ldr	r2, [r3, #8]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	491b      	ldr	r1, [pc, #108]	@ (8009144 <UART_EndRxTransfer+0xc8>)
 80090d8:	400a      	ands	r2, r1
 80090da:	609a      	str	r2, [r3, #8]
 80090dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090de:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090e2:	f383 8810 	msr	PRIMASK, r3
}
 80090e6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d118      	bne.n	8009122 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80090f0:	f3ef 8310 	mrs	r3, PRIMASK
 80090f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80090f6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80090fa:	2301      	movs	r3, #1
 80090fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f383 8810 	msr	PRIMASK, r3
}
 8009104:	46c0      	nop			@ (mov r8, r8)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2110      	movs	r1, #16
 8009112:	438a      	bics	r2, r1
 8009114:	601a      	str	r2, [r3, #0]
 8009116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009118:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	f383 8810 	msr	PRIMASK, r3
}
 8009120:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	228c      	movs	r2, #140	@ 0x8c
 8009126:	2120      	movs	r1, #32
 8009128:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009136:	46c0      	nop			@ (mov r8, r8)
 8009138:	46bd      	mov	sp, r7
 800913a:	b00e      	add	sp, #56	@ 0x38
 800913c:	bd80      	pop	{r7, pc}
 800913e:	46c0      	nop			@ (mov r8, r8)
 8009140:	fffffedf 	.word	0xfffffedf
 8009144:	effffffe 	.word	0xeffffffe

08009148 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2284      	movs	r2, #132	@ 0x84
 8009154:	5c9b      	ldrb	r3, [r3, r2]
 8009156:	2b01      	cmp	r3, #1
 8009158:	d101      	bne.n	800915e <HAL_UARTEx_DisableFifoMode+0x16>
 800915a:	2302      	movs	r3, #2
 800915c:	e027      	b.n	80091ae <HAL_UARTEx_DisableFifoMode+0x66>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2284      	movs	r2, #132	@ 0x84
 8009162:	2101      	movs	r1, #1
 8009164:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2288      	movs	r2, #136	@ 0x88
 800916a:	2124      	movs	r1, #36	@ 0x24
 800916c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2101      	movs	r1, #1
 8009182:	438a      	bics	r2, r1
 8009184:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	4a0b      	ldr	r2, [pc, #44]	@ (80091b8 <HAL_UARTEx_DisableFifoMode+0x70>)
 800918a:	4013      	ands	r3, r2
 800918c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2200      	movs	r2, #0
 8009192:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	68fa      	ldr	r2, [r7, #12]
 800919a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2288      	movs	r2, #136	@ 0x88
 80091a0:	2120      	movs	r1, #32
 80091a2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2284      	movs	r2, #132	@ 0x84
 80091a8:	2100      	movs	r1, #0
 80091aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80091ac:	2300      	movs	r3, #0
}
 80091ae:	0018      	movs	r0, r3
 80091b0:	46bd      	mov	sp, r7
 80091b2:	b004      	add	sp, #16
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	46c0      	nop			@ (mov r8, r8)
 80091b8:	dfffffff 	.word	0xdfffffff

080091bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2284      	movs	r2, #132	@ 0x84
 80091ca:	5c9b      	ldrb	r3, [r3, r2]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d101      	bne.n	80091d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80091d0:	2302      	movs	r3, #2
 80091d2:	e02e      	b.n	8009232 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2284      	movs	r2, #132	@ 0x84
 80091d8:	2101      	movs	r1, #1
 80091da:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2288      	movs	r2, #136	@ 0x88
 80091e0:	2124      	movs	r1, #36	@ 0x24
 80091e2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2101      	movs	r1, #1
 80091f8:	438a      	bics	r2, r1
 80091fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	00db      	lsls	r3, r3, #3
 8009204:	08d9      	lsrs	r1, r3, #3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	683a      	ldr	r2, [r7, #0]
 800920c:	430a      	orrs	r2, r1
 800920e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	0018      	movs	r0, r3
 8009214:	f000 f854 	bl	80092c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	68fa      	ldr	r2, [r7, #12]
 800921e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2288      	movs	r2, #136	@ 0x88
 8009224:	2120      	movs	r1, #32
 8009226:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2284      	movs	r2, #132	@ 0x84
 800922c:	2100      	movs	r1, #0
 800922e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009230:	2300      	movs	r3, #0
}
 8009232:	0018      	movs	r0, r3
 8009234:	46bd      	mov	sp, r7
 8009236:	b004      	add	sp, #16
 8009238:	bd80      	pop	{r7, pc}
	...

0800923c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2284      	movs	r2, #132	@ 0x84
 800924a:	5c9b      	ldrb	r3, [r3, r2]
 800924c:	2b01      	cmp	r3, #1
 800924e:	d101      	bne.n	8009254 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009250:	2302      	movs	r3, #2
 8009252:	e02f      	b.n	80092b4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2284      	movs	r2, #132	@ 0x84
 8009258:	2101      	movs	r1, #1
 800925a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2288      	movs	r2, #136	@ 0x88
 8009260:	2124      	movs	r1, #36	@ 0x24
 8009262:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2101      	movs	r1, #1
 8009278:	438a      	bics	r2, r1
 800927a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	4a0e      	ldr	r2, [pc, #56]	@ (80092bc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8009284:	4013      	ands	r3, r2
 8009286:	0019      	movs	r1, r3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	683a      	ldr	r2, [r7, #0]
 800928e:	430a      	orrs	r2, r1
 8009290:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	0018      	movs	r0, r3
 8009296:	f000 f813 	bl	80092c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	68fa      	ldr	r2, [r7, #12]
 80092a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2288      	movs	r2, #136	@ 0x88
 80092a6:	2120      	movs	r1, #32
 80092a8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2284      	movs	r2, #132	@ 0x84
 80092ae:	2100      	movs	r1, #0
 80092b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80092b2:	2300      	movs	r3, #0
}
 80092b4:	0018      	movs	r0, r3
 80092b6:	46bd      	mov	sp, r7
 80092b8:	b004      	add	sp, #16
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	f1ffffff 	.word	0xf1ffffff

080092c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80092c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092c2:	b085      	sub	sp, #20
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d108      	bne.n	80092e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	226a      	movs	r2, #106	@ 0x6a
 80092d4:	2101      	movs	r1, #1
 80092d6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2268      	movs	r2, #104	@ 0x68
 80092dc:	2101      	movs	r1, #1
 80092de:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80092e0:	e043      	b.n	800936a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80092e2:	260f      	movs	r6, #15
 80092e4:	19bb      	adds	r3, r7, r6
 80092e6:	2208      	movs	r2, #8
 80092e8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80092ea:	200e      	movs	r0, #14
 80092ec:	183b      	adds	r3, r7, r0
 80092ee:	2208      	movs	r2, #8
 80092f0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	0e5b      	lsrs	r3, r3, #25
 80092fa:	b2da      	uxtb	r2, r3
 80092fc:	240d      	movs	r4, #13
 80092fe:	193b      	adds	r3, r7, r4
 8009300:	2107      	movs	r1, #7
 8009302:	400a      	ands	r2, r1
 8009304:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	0f5b      	lsrs	r3, r3, #29
 800930e:	b2da      	uxtb	r2, r3
 8009310:	250c      	movs	r5, #12
 8009312:	197b      	adds	r3, r7, r5
 8009314:	2107      	movs	r1, #7
 8009316:	400a      	ands	r2, r1
 8009318:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800931a:	183b      	adds	r3, r7, r0
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	197a      	adds	r2, r7, r5
 8009320:	7812      	ldrb	r2, [r2, #0]
 8009322:	4914      	ldr	r1, [pc, #80]	@ (8009374 <UARTEx_SetNbDataToProcess+0xb4>)
 8009324:	5c8a      	ldrb	r2, [r1, r2]
 8009326:	435a      	muls	r2, r3
 8009328:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800932a:	197b      	adds	r3, r7, r5
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	4a12      	ldr	r2, [pc, #72]	@ (8009378 <UARTEx_SetNbDataToProcess+0xb8>)
 8009330:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009332:	0019      	movs	r1, r3
 8009334:	f7f6 ff8e 	bl	8000254 <__divsi3>
 8009338:	0003      	movs	r3, r0
 800933a:	b299      	uxth	r1, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	226a      	movs	r2, #106	@ 0x6a
 8009340:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009342:	19bb      	adds	r3, r7, r6
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	193a      	adds	r2, r7, r4
 8009348:	7812      	ldrb	r2, [r2, #0]
 800934a:	490a      	ldr	r1, [pc, #40]	@ (8009374 <UARTEx_SetNbDataToProcess+0xb4>)
 800934c:	5c8a      	ldrb	r2, [r1, r2]
 800934e:	435a      	muls	r2, r3
 8009350:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8009352:	193b      	adds	r3, r7, r4
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	4a08      	ldr	r2, [pc, #32]	@ (8009378 <UARTEx_SetNbDataToProcess+0xb8>)
 8009358:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800935a:	0019      	movs	r1, r3
 800935c:	f7f6 ff7a 	bl	8000254 <__divsi3>
 8009360:	0003      	movs	r3, r0
 8009362:	b299      	uxth	r1, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2268      	movs	r2, #104	@ 0x68
 8009368:	5299      	strh	r1, [r3, r2]
}
 800936a:	46c0      	nop			@ (mov r8, r8)
 800936c:	46bd      	mov	sp, r7
 800936e:	b005      	add	sp, #20
 8009370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009372:	46c0      	nop			@ (mov r8, r8)
 8009374:	0800c3dc 	.word	0x0800c3dc
 8009378:	0800c3e4 	.word	0x0800c3e4

0800937c <__cvt>:
 800937c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800937e:	001f      	movs	r7, r3
 8009380:	2300      	movs	r3, #0
 8009382:	0016      	movs	r6, r2
 8009384:	b08b      	sub	sp, #44	@ 0x2c
 8009386:	429f      	cmp	r7, r3
 8009388:	da04      	bge.n	8009394 <__cvt+0x18>
 800938a:	2180      	movs	r1, #128	@ 0x80
 800938c:	0609      	lsls	r1, r1, #24
 800938e:	187b      	adds	r3, r7, r1
 8009390:	001f      	movs	r7, r3
 8009392:	232d      	movs	r3, #45	@ 0x2d
 8009394:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009396:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8009398:	7013      	strb	r3, [r2, #0]
 800939a:	2320      	movs	r3, #32
 800939c:	2203      	movs	r2, #3
 800939e:	439d      	bics	r5, r3
 80093a0:	2d46      	cmp	r5, #70	@ 0x46
 80093a2:	d007      	beq.n	80093b4 <__cvt+0x38>
 80093a4:	002b      	movs	r3, r5
 80093a6:	3b45      	subs	r3, #69	@ 0x45
 80093a8:	4259      	negs	r1, r3
 80093aa:	414b      	adcs	r3, r1
 80093ac:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80093ae:	3a01      	subs	r2, #1
 80093b0:	18cb      	adds	r3, r1, r3
 80093b2:	9310      	str	r3, [sp, #64]	@ 0x40
 80093b4:	ab09      	add	r3, sp, #36	@ 0x24
 80093b6:	9304      	str	r3, [sp, #16]
 80093b8:	ab08      	add	r3, sp, #32
 80093ba:	9303      	str	r3, [sp, #12]
 80093bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80093be:	9200      	str	r2, [sp, #0]
 80093c0:	9302      	str	r3, [sp, #8]
 80093c2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80093c4:	0032      	movs	r2, r6
 80093c6:	9301      	str	r3, [sp, #4]
 80093c8:	003b      	movs	r3, r7
 80093ca:	f000 fe69 	bl	800a0a0 <_dtoa_r>
 80093ce:	0004      	movs	r4, r0
 80093d0:	2d47      	cmp	r5, #71	@ 0x47
 80093d2:	d11b      	bne.n	800940c <__cvt+0x90>
 80093d4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80093d6:	07db      	lsls	r3, r3, #31
 80093d8:	d511      	bpl.n	80093fe <__cvt+0x82>
 80093da:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80093dc:	18c3      	adds	r3, r0, r3
 80093de:	9307      	str	r3, [sp, #28]
 80093e0:	2200      	movs	r2, #0
 80093e2:	2300      	movs	r3, #0
 80093e4:	0030      	movs	r0, r6
 80093e6:	0039      	movs	r1, r7
 80093e8:	f7f7 f830 	bl	800044c <__aeabi_dcmpeq>
 80093ec:	2800      	cmp	r0, #0
 80093ee:	d001      	beq.n	80093f4 <__cvt+0x78>
 80093f0:	9b07      	ldr	r3, [sp, #28]
 80093f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80093f4:	2230      	movs	r2, #48	@ 0x30
 80093f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093f8:	9907      	ldr	r1, [sp, #28]
 80093fa:	428b      	cmp	r3, r1
 80093fc:	d320      	bcc.n	8009440 <__cvt+0xc4>
 80093fe:	0020      	movs	r0, r4
 8009400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009402:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009404:	1b1b      	subs	r3, r3, r4
 8009406:	6013      	str	r3, [r2, #0]
 8009408:	b00b      	add	sp, #44	@ 0x2c
 800940a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800940c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800940e:	18c3      	adds	r3, r0, r3
 8009410:	9307      	str	r3, [sp, #28]
 8009412:	2d46      	cmp	r5, #70	@ 0x46
 8009414:	d1e4      	bne.n	80093e0 <__cvt+0x64>
 8009416:	7803      	ldrb	r3, [r0, #0]
 8009418:	2b30      	cmp	r3, #48	@ 0x30
 800941a:	d10c      	bne.n	8009436 <__cvt+0xba>
 800941c:	2200      	movs	r2, #0
 800941e:	2300      	movs	r3, #0
 8009420:	0030      	movs	r0, r6
 8009422:	0039      	movs	r1, r7
 8009424:	f7f7 f812 	bl	800044c <__aeabi_dcmpeq>
 8009428:	2800      	cmp	r0, #0
 800942a:	d104      	bne.n	8009436 <__cvt+0xba>
 800942c:	2301      	movs	r3, #1
 800942e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8009430:	1a9b      	subs	r3, r3, r2
 8009432:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009434:	6013      	str	r3, [r2, #0]
 8009436:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009438:	9a07      	ldr	r2, [sp, #28]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	18d3      	adds	r3, r2, r3
 800943e:	e7ce      	b.n	80093de <__cvt+0x62>
 8009440:	1c59      	adds	r1, r3, #1
 8009442:	9109      	str	r1, [sp, #36]	@ 0x24
 8009444:	701a      	strb	r2, [r3, #0]
 8009446:	e7d6      	b.n	80093f6 <__cvt+0x7a>

08009448 <__exponent>:
 8009448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800944a:	232b      	movs	r3, #43	@ 0x2b
 800944c:	0005      	movs	r5, r0
 800944e:	000c      	movs	r4, r1
 8009450:	b085      	sub	sp, #20
 8009452:	7002      	strb	r2, [r0, #0]
 8009454:	2900      	cmp	r1, #0
 8009456:	da01      	bge.n	800945c <__exponent+0x14>
 8009458:	424c      	negs	r4, r1
 800945a:	3302      	adds	r3, #2
 800945c:	706b      	strb	r3, [r5, #1]
 800945e:	2c09      	cmp	r4, #9
 8009460:	dd2c      	ble.n	80094bc <__exponent+0x74>
 8009462:	ab02      	add	r3, sp, #8
 8009464:	1dde      	adds	r6, r3, #7
 8009466:	0020      	movs	r0, r4
 8009468:	210a      	movs	r1, #10
 800946a:	f7f6 ffd9 	bl	8000420 <__aeabi_idivmod>
 800946e:	0037      	movs	r7, r6
 8009470:	3130      	adds	r1, #48	@ 0x30
 8009472:	3e01      	subs	r6, #1
 8009474:	0020      	movs	r0, r4
 8009476:	7031      	strb	r1, [r6, #0]
 8009478:	210a      	movs	r1, #10
 800947a:	9401      	str	r4, [sp, #4]
 800947c:	f7f6 feea 	bl	8000254 <__divsi3>
 8009480:	9b01      	ldr	r3, [sp, #4]
 8009482:	0004      	movs	r4, r0
 8009484:	2b63      	cmp	r3, #99	@ 0x63
 8009486:	dcee      	bgt.n	8009466 <__exponent+0x1e>
 8009488:	1eba      	subs	r2, r7, #2
 800948a:	1ca8      	adds	r0, r5, #2
 800948c:	0001      	movs	r1, r0
 800948e:	0013      	movs	r3, r2
 8009490:	3430      	adds	r4, #48	@ 0x30
 8009492:	7014      	strb	r4, [r2, #0]
 8009494:	ac02      	add	r4, sp, #8
 8009496:	3407      	adds	r4, #7
 8009498:	429c      	cmp	r4, r3
 800949a:	d80a      	bhi.n	80094b2 <__exponent+0x6a>
 800949c:	2300      	movs	r3, #0
 800949e:	42a2      	cmp	r2, r4
 80094a0:	d803      	bhi.n	80094aa <__exponent+0x62>
 80094a2:	3309      	adds	r3, #9
 80094a4:	aa02      	add	r2, sp, #8
 80094a6:	189b      	adds	r3, r3, r2
 80094a8:	1bdb      	subs	r3, r3, r7
 80094aa:	18c0      	adds	r0, r0, r3
 80094ac:	1b40      	subs	r0, r0, r5
 80094ae:	b005      	add	sp, #20
 80094b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094b2:	781c      	ldrb	r4, [r3, #0]
 80094b4:	3301      	adds	r3, #1
 80094b6:	700c      	strb	r4, [r1, #0]
 80094b8:	3101      	adds	r1, #1
 80094ba:	e7eb      	b.n	8009494 <__exponent+0x4c>
 80094bc:	2330      	movs	r3, #48	@ 0x30
 80094be:	18e4      	adds	r4, r4, r3
 80094c0:	70ab      	strb	r3, [r5, #2]
 80094c2:	1d28      	adds	r0, r5, #4
 80094c4:	70ec      	strb	r4, [r5, #3]
 80094c6:	e7f1      	b.n	80094ac <__exponent+0x64>

080094c8 <_printf_float>:
 80094c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094ca:	b097      	sub	sp, #92	@ 0x5c
 80094cc:	000d      	movs	r5, r1
 80094ce:	920a      	str	r2, [sp, #40]	@ 0x28
 80094d0:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80094d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80094d4:	9009      	str	r0, [sp, #36]	@ 0x24
 80094d6:	f000 fccb 	bl	8009e70 <_localeconv_r>
 80094da:	6803      	ldr	r3, [r0, #0]
 80094dc:	0018      	movs	r0, r3
 80094de:	930d      	str	r3, [sp, #52]	@ 0x34
 80094e0:	f7f6 fe12 	bl	8000108 <strlen>
 80094e4:	2300      	movs	r3, #0
 80094e6:	900f      	str	r0, [sp, #60]	@ 0x3c
 80094e8:	9314      	str	r3, [sp, #80]	@ 0x50
 80094ea:	7e2b      	ldrb	r3, [r5, #24]
 80094ec:	2207      	movs	r2, #7
 80094ee:	930c      	str	r3, [sp, #48]	@ 0x30
 80094f0:	682b      	ldr	r3, [r5, #0]
 80094f2:	930e      	str	r3, [sp, #56]	@ 0x38
 80094f4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80094f6:	6823      	ldr	r3, [r4, #0]
 80094f8:	05c9      	lsls	r1, r1, #23
 80094fa:	d545      	bpl.n	8009588 <_printf_float+0xc0>
 80094fc:	189b      	adds	r3, r3, r2
 80094fe:	4393      	bics	r3, r2
 8009500:	001a      	movs	r2, r3
 8009502:	3208      	adds	r2, #8
 8009504:	6022      	str	r2, [r4, #0]
 8009506:	2201      	movs	r2, #1
 8009508:	681e      	ldr	r6, [r3, #0]
 800950a:	685f      	ldr	r7, [r3, #4]
 800950c:	007b      	lsls	r3, r7, #1
 800950e:	085b      	lsrs	r3, r3, #1
 8009510:	9311      	str	r3, [sp, #68]	@ 0x44
 8009512:	9610      	str	r6, [sp, #64]	@ 0x40
 8009514:	64ae      	str	r6, [r5, #72]	@ 0x48
 8009516:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8009518:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800951a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800951c:	4ba7      	ldr	r3, [pc, #668]	@ (80097bc <_printf_float+0x2f4>)
 800951e:	4252      	negs	r2, r2
 8009520:	f7f8 fef6 	bl	8002310 <__aeabi_dcmpun>
 8009524:	2800      	cmp	r0, #0
 8009526:	d131      	bne.n	800958c <_printf_float+0xc4>
 8009528:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800952a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800952c:	2201      	movs	r2, #1
 800952e:	4ba3      	ldr	r3, [pc, #652]	@ (80097bc <_printf_float+0x2f4>)
 8009530:	4252      	negs	r2, r2
 8009532:	f7f6 ff9b 	bl	800046c <__aeabi_dcmple>
 8009536:	2800      	cmp	r0, #0
 8009538:	d128      	bne.n	800958c <_printf_float+0xc4>
 800953a:	2200      	movs	r2, #0
 800953c:	2300      	movs	r3, #0
 800953e:	0030      	movs	r0, r6
 8009540:	0039      	movs	r1, r7
 8009542:	f7f6 ff89 	bl	8000458 <__aeabi_dcmplt>
 8009546:	2800      	cmp	r0, #0
 8009548:	d003      	beq.n	8009552 <_printf_float+0x8a>
 800954a:	002b      	movs	r3, r5
 800954c:	222d      	movs	r2, #45	@ 0x2d
 800954e:	3343      	adds	r3, #67	@ 0x43
 8009550:	701a      	strb	r2, [r3, #0]
 8009552:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009554:	4f9a      	ldr	r7, [pc, #616]	@ (80097c0 <_printf_float+0x2f8>)
 8009556:	2b47      	cmp	r3, #71	@ 0x47
 8009558:	d900      	bls.n	800955c <_printf_float+0x94>
 800955a:	4f9a      	ldr	r7, [pc, #616]	@ (80097c4 <_printf_float+0x2fc>)
 800955c:	2303      	movs	r3, #3
 800955e:	2400      	movs	r4, #0
 8009560:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009562:	612b      	str	r3, [r5, #16]
 8009564:	3301      	adds	r3, #1
 8009566:	439a      	bics	r2, r3
 8009568:	602a      	str	r2, [r5, #0]
 800956a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800956c:	0029      	movs	r1, r5
 800956e:	9300      	str	r3, [sp, #0]
 8009570:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009572:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009574:	aa15      	add	r2, sp, #84	@ 0x54
 8009576:	f000 f9e5 	bl	8009944 <_printf_common>
 800957a:	3001      	adds	r0, #1
 800957c:	d000      	beq.n	8009580 <_printf_float+0xb8>
 800957e:	e09f      	b.n	80096c0 <_printf_float+0x1f8>
 8009580:	2001      	movs	r0, #1
 8009582:	4240      	negs	r0, r0
 8009584:	b017      	add	sp, #92	@ 0x5c
 8009586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009588:	3307      	adds	r3, #7
 800958a:	e7b8      	b.n	80094fe <_printf_float+0x36>
 800958c:	0032      	movs	r2, r6
 800958e:	003b      	movs	r3, r7
 8009590:	0030      	movs	r0, r6
 8009592:	0039      	movs	r1, r7
 8009594:	f7f8 febc 	bl	8002310 <__aeabi_dcmpun>
 8009598:	2800      	cmp	r0, #0
 800959a:	d00b      	beq.n	80095b4 <_printf_float+0xec>
 800959c:	2f00      	cmp	r7, #0
 800959e:	da03      	bge.n	80095a8 <_printf_float+0xe0>
 80095a0:	002b      	movs	r3, r5
 80095a2:	222d      	movs	r2, #45	@ 0x2d
 80095a4:	3343      	adds	r3, #67	@ 0x43
 80095a6:	701a      	strb	r2, [r3, #0]
 80095a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80095aa:	4f87      	ldr	r7, [pc, #540]	@ (80097c8 <_printf_float+0x300>)
 80095ac:	2b47      	cmp	r3, #71	@ 0x47
 80095ae:	d9d5      	bls.n	800955c <_printf_float+0x94>
 80095b0:	4f86      	ldr	r7, [pc, #536]	@ (80097cc <_printf_float+0x304>)
 80095b2:	e7d3      	b.n	800955c <_printf_float+0x94>
 80095b4:	2220      	movs	r2, #32
 80095b6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80095b8:	686b      	ldr	r3, [r5, #4]
 80095ba:	4394      	bics	r4, r2
 80095bc:	1c5a      	adds	r2, r3, #1
 80095be:	d146      	bne.n	800964e <_printf_float+0x186>
 80095c0:	3307      	adds	r3, #7
 80095c2:	606b      	str	r3, [r5, #4]
 80095c4:	2380      	movs	r3, #128	@ 0x80
 80095c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80095c8:	00db      	lsls	r3, r3, #3
 80095ca:	4313      	orrs	r3, r2
 80095cc:	2200      	movs	r2, #0
 80095ce:	602b      	str	r3, [r5, #0]
 80095d0:	9206      	str	r2, [sp, #24]
 80095d2:	aa14      	add	r2, sp, #80	@ 0x50
 80095d4:	9205      	str	r2, [sp, #20]
 80095d6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80095d8:	a90a      	add	r1, sp, #40	@ 0x28
 80095da:	9204      	str	r2, [sp, #16]
 80095dc:	aa13      	add	r2, sp, #76	@ 0x4c
 80095de:	9203      	str	r2, [sp, #12]
 80095e0:	2223      	movs	r2, #35	@ 0x23
 80095e2:	1852      	adds	r2, r2, r1
 80095e4:	9202      	str	r2, [sp, #8]
 80095e6:	9301      	str	r3, [sp, #4]
 80095e8:	686b      	ldr	r3, [r5, #4]
 80095ea:	0032      	movs	r2, r6
 80095ec:	9300      	str	r3, [sp, #0]
 80095ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80095f0:	003b      	movs	r3, r7
 80095f2:	f7ff fec3 	bl	800937c <__cvt>
 80095f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80095f8:	0007      	movs	r7, r0
 80095fa:	2c47      	cmp	r4, #71	@ 0x47
 80095fc:	d12d      	bne.n	800965a <_printf_float+0x192>
 80095fe:	1cd3      	adds	r3, r2, #3
 8009600:	db02      	blt.n	8009608 <_printf_float+0x140>
 8009602:	686b      	ldr	r3, [r5, #4]
 8009604:	429a      	cmp	r2, r3
 8009606:	dd48      	ble.n	800969a <_printf_float+0x1d2>
 8009608:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800960a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800960c:	3b02      	subs	r3, #2
 800960e:	b2db      	uxtb	r3, r3
 8009610:	930c      	str	r3, [sp, #48]	@ 0x30
 8009612:	0028      	movs	r0, r5
 8009614:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009616:	3901      	subs	r1, #1
 8009618:	3050      	adds	r0, #80	@ 0x50
 800961a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800961c:	f7ff ff14 	bl	8009448 <__exponent>
 8009620:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009622:	0004      	movs	r4, r0
 8009624:	1813      	adds	r3, r2, r0
 8009626:	612b      	str	r3, [r5, #16]
 8009628:	2a01      	cmp	r2, #1
 800962a:	dc02      	bgt.n	8009632 <_printf_float+0x16a>
 800962c:	682a      	ldr	r2, [r5, #0]
 800962e:	07d2      	lsls	r2, r2, #31
 8009630:	d501      	bpl.n	8009636 <_printf_float+0x16e>
 8009632:	3301      	adds	r3, #1
 8009634:	612b      	str	r3, [r5, #16]
 8009636:	2323      	movs	r3, #35	@ 0x23
 8009638:	aa0a      	add	r2, sp, #40	@ 0x28
 800963a:	189b      	adds	r3, r3, r2
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d100      	bne.n	8009644 <_printf_float+0x17c>
 8009642:	e792      	b.n	800956a <_printf_float+0xa2>
 8009644:	002b      	movs	r3, r5
 8009646:	222d      	movs	r2, #45	@ 0x2d
 8009648:	3343      	adds	r3, #67	@ 0x43
 800964a:	701a      	strb	r2, [r3, #0]
 800964c:	e78d      	b.n	800956a <_printf_float+0xa2>
 800964e:	2c47      	cmp	r4, #71	@ 0x47
 8009650:	d1b8      	bne.n	80095c4 <_printf_float+0xfc>
 8009652:	2b00      	cmp	r3, #0
 8009654:	d1b6      	bne.n	80095c4 <_printf_float+0xfc>
 8009656:	3301      	adds	r3, #1
 8009658:	e7b3      	b.n	80095c2 <_printf_float+0xfa>
 800965a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800965c:	0011      	movs	r1, r2
 800965e:	2b65      	cmp	r3, #101	@ 0x65
 8009660:	d9d7      	bls.n	8009612 <_printf_float+0x14a>
 8009662:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009664:	2b66      	cmp	r3, #102	@ 0x66
 8009666:	d11a      	bne.n	800969e <_printf_float+0x1d6>
 8009668:	686b      	ldr	r3, [r5, #4]
 800966a:	2a00      	cmp	r2, #0
 800966c:	dd09      	ble.n	8009682 <_printf_float+0x1ba>
 800966e:	612a      	str	r2, [r5, #16]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d102      	bne.n	800967a <_printf_float+0x1b2>
 8009674:	6829      	ldr	r1, [r5, #0]
 8009676:	07c9      	lsls	r1, r1, #31
 8009678:	d50b      	bpl.n	8009692 <_printf_float+0x1ca>
 800967a:	3301      	adds	r3, #1
 800967c:	189b      	adds	r3, r3, r2
 800967e:	612b      	str	r3, [r5, #16]
 8009680:	e007      	b.n	8009692 <_printf_float+0x1ca>
 8009682:	2b00      	cmp	r3, #0
 8009684:	d103      	bne.n	800968e <_printf_float+0x1c6>
 8009686:	2201      	movs	r2, #1
 8009688:	6829      	ldr	r1, [r5, #0]
 800968a:	4211      	tst	r1, r2
 800968c:	d000      	beq.n	8009690 <_printf_float+0x1c8>
 800968e:	1c9a      	adds	r2, r3, #2
 8009690:	612a      	str	r2, [r5, #16]
 8009692:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009694:	2400      	movs	r4, #0
 8009696:	65ab      	str	r3, [r5, #88]	@ 0x58
 8009698:	e7cd      	b.n	8009636 <_printf_float+0x16e>
 800969a:	2367      	movs	r3, #103	@ 0x67
 800969c:	930c      	str	r3, [sp, #48]	@ 0x30
 800969e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80096a0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80096a2:	4299      	cmp	r1, r3
 80096a4:	db06      	blt.n	80096b4 <_printf_float+0x1ec>
 80096a6:	682b      	ldr	r3, [r5, #0]
 80096a8:	6129      	str	r1, [r5, #16]
 80096aa:	07db      	lsls	r3, r3, #31
 80096ac:	d5f1      	bpl.n	8009692 <_printf_float+0x1ca>
 80096ae:	3101      	adds	r1, #1
 80096b0:	6129      	str	r1, [r5, #16]
 80096b2:	e7ee      	b.n	8009692 <_printf_float+0x1ca>
 80096b4:	2201      	movs	r2, #1
 80096b6:	2900      	cmp	r1, #0
 80096b8:	dce0      	bgt.n	800967c <_printf_float+0x1b4>
 80096ba:	1892      	adds	r2, r2, r2
 80096bc:	1a52      	subs	r2, r2, r1
 80096be:	e7dd      	b.n	800967c <_printf_float+0x1b4>
 80096c0:	682a      	ldr	r2, [r5, #0]
 80096c2:	0553      	lsls	r3, r2, #21
 80096c4:	d408      	bmi.n	80096d8 <_printf_float+0x210>
 80096c6:	692b      	ldr	r3, [r5, #16]
 80096c8:	003a      	movs	r2, r7
 80096ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80096cc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80096ce:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80096d0:	47a0      	blx	r4
 80096d2:	3001      	adds	r0, #1
 80096d4:	d129      	bne.n	800972a <_printf_float+0x262>
 80096d6:	e753      	b.n	8009580 <_printf_float+0xb8>
 80096d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80096da:	2b65      	cmp	r3, #101	@ 0x65
 80096dc:	d800      	bhi.n	80096e0 <_printf_float+0x218>
 80096de:	e0da      	b.n	8009896 <_printf_float+0x3ce>
 80096e0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80096e2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80096e4:	2200      	movs	r2, #0
 80096e6:	2300      	movs	r3, #0
 80096e8:	f7f6 feb0 	bl	800044c <__aeabi_dcmpeq>
 80096ec:	2800      	cmp	r0, #0
 80096ee:	d033      	beq.n	8009758 <_printf_float+0x290>
 80096f0:	2301      	movs	r3, #1
 80096f2:	4a37      	ldr	r2, [pc, #220]	@ (80097d0 <_printf_float+0x308>)
 80096f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80096f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80096f8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80096fa:	47a0      	blx	r4
 80096fc:	3001      	adds	r0, #1
 80096fe:	d100      	bne.n	8009702 <_printf_float+0x23a>
 8009700:	e73e      	b.n	8009580 <_printf_float+0xb8>
 8009702:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8009704:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009706:	42b3      	cmp	r3, r6
 8009708:	db02      	blt.n	8009710 <_printf_float+0x248>
 800970a:	682b      	ldr	r3, [r5, #0]
 800970c:	07db      	lsls	r3, r3, #31
 800970e:	d50c      	bpl.n	800972a <_printf_float+0x262>
 8009710:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009712:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009714:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009716:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009718:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800971a:	47a0      	blx	r4
 800971c:	2400      	movs	r4, #0
 800971e:	3001      	adds	r0, #1
 8009720:	d100      	bne.n	8009724 <_printf_float+0x25c>
 8009722:	e72d      	b.n	8009580 <_printf_float+0xb8>
 8009724:	1e73      	subs	r3, r6, #1
 8009726:	42a3      	cmp	r3, r4
 8009728:	dc0a      	bgt.n	8009740 <_printf_float+0x278>
 800972a:	682b      	ldr	r3, [r5, #0]
 800972c:	079b      	lsls	r3, r3, #30
 800972e:	d500      	bpl.n	8009732 <_printf_float+0x26a>
 8009730:	e105      	b.n	800993e <_printf_float+0x476>
 8009732:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009734:	68e8      	ldr	r0, [r5, #12]
 8009736:	4298      	cmp	r0, r3
 8009738:	db00      	blt.n	800973c <_printf_float+0x274>
 800973a:	e723      	b.n	8009584 <_printf_float+0xbc>
 800973c:	0018      	movs	r0, r3
 800973e:	e721      	b.n	8009584 <_printf_float+0xbc>
 8009740:	002a      	movs	r2, r5
 8009742:	2301      	movs	r3, #1
 8009744:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009746:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009748:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800974a:	321a      	adds	r2, #26
 800974c:	47b8      	blx	r7
 800974e:	3001      	adds	r0, #1
 8009750:	d100      	bne.n	8009754 <_printf_float+0x28c>
 8009752:	e715      	b.n	8009580 <_printf_float+0xb8>
 8009754:	3401      	adds	r4, #1
 8009756:	e7e5      	b.n	8009724 <_printf_float+0x25c>
 8009758:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800975a:	2b00      	cmp	r3, #0
 800975c:	dc3a      	bgt.n	80097d4 <_printf_float+0x30c>
 800975e:	2301      	movs	r3, #1
 8009760:	4a1b      	ldr	r2, [pc, #108]	@ (80097d0 <_printf_float+0x308>)
 8009762:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009764:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009766:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009768:	47a0      	blx	r4
 800976a:	3001      	adds	r0, #1
 800976c:	d100      	bne.n	8009770 <_printf_float+0x2a8>
 800976e:	e707      	b.n	8009580 <_printf_float+0xb8>
 8009770:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8009772:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009774:	4333      	orrs	r3, r6
 8009776:	d102      	bne.n	800977e <_printf_float+0x2b6>
 8009778:	682b      	ldr	r3, [r5, #0]
 800977a:	07db      	lsls	r3, r3, #31
 800977c:	d5d5      	bpl.n	800972a <_printf_float+0x262>
 800977e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009780:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009782:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009784:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009786:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009788:	47a0      	blx	r4
 800978a:	2300      	movs	r3, #0
 800978c:	3001      	adds	r0, #1
 800978e:	d100      	bne.n	8009792 <_printf_float+0x2ca>
 8009790:	e6f6      	b.n	8009580 <_printf_float+0xb8>
 8009792:	930c      	str	r3, [sp, #48]	@ 0x30
 8009794:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009796:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009798:	425b      	negs	r3, r3
 800979a:	4293      	cmp	r3, r2
 800979c:	dc01      	bgt.n	80097a2 <_printf_float+0x2da>
 800979e:	0033      	movs	r3, r6
 80097a0:	e792      	b.n	80096c8 <_printf_float+0x200>
 80097a2:	002a      	movs	r2, r5
 80097a4:	2301      	movs	r3, #1
 80097a6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80097a8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80097aa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80097ac:	321a      	adds	r2, #26
 80097ae:	47a0      	blx	r4
 80097b0:	3001      	adds	r0, #1
 80097b2:	d100      	bne.n	80097b6 <_printf_float+0x2ee>
 80097b4:	e6e4      	b.n	8009580 <_printf_float+0xb8>
 80097b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80097b8:	3301      	adds	r3, #1
 80097ba:	e7ea      	b.n	8009792 <_printf_float+0x2ca>
 80097bc:	7fefffff 	.word	0x7fefffff
 80097c0:	0800c3ec 	.word	0x0800c3ec
 80097c4:	0800c3f0 	.word	0x0800c3f0
 80097c8:	0800c3f4 	.word	0x0800c3f4
 80097cc:	0800c3f8 	.word	0x0800c3f8
 80097d0:	0800c3fc 	.word	0x0800c3fc
 80097d4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80097d6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80097d8:	930c      	str	r3, [sp, #48]	@ 0x30
 80097da:	429e      	cmp	r6, r3
 80097dc:	dd00      	ble.n	80097e0 <_printf_float+0x318>
 80097de:	001e      	movs	r6, r3
 80097e0:	2e00      	cmp	r6, #0
 80097e2:	dc31      	bgt.n	8009848 <_printf_float+0x380>
 80097e4:	43f3      	mvns	r3, r6
 80097e6:	2400      	movs	r4, #0
 80097e8:	17db      	asrs	r3, r3, #31
 80097ea:	4033      	ands	r3, r6
 80097ec:	930e      	str	r3, [sp, #56]	@ 0x38
 80097ee:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80097f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097f2:	1af3      	subs	r3, r6, r3
 80097f4:	42a3      	cmp	r3, r4
 80097f6:	dc30      	bgt.n	800985a <_printf_float+0x392>
 80097f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80097fa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80097fc:	429a      	cmp	r2, r3
 80097fe:	dc38      	bgt.n	8009872 <_printf_float+0x3aa>
 8009800:	682b      	ldr	r3, [r5, #0]
 8009802:	07db      	lsls	r3, r3, #31
 8009804:	d435      	bmi.n	8009872 <_printf_float+0x3aa>
 8009806:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8009808:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800980a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800980c:	1b9b      	subs	r3, r3, r6
 800980e:	1b14      	subs	r4, r2, r4
 8009810:	429c      	cmp	r4, r3
 8009812:	dd00      	ble.n	8009816 <_printf_float+0x34e>
 8009814:	001c      	movs	r4, r3
 8009816:	2c00      	cmp	r4, #0
 8009818:	dc34      	bgt.n	8009884 <_printf_float+0x3bc>
 800981a:	43e3      	mvns	r3, r4
 800981c:	2600      	movs	r6, #0
 800981e:	17db      	asrs	r3, r3, #31
 8009820:	401c      	ands	r4, r3
 8009822:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009824:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009826:	1ad3      	subs	r3, r2, r3
 8009828:	1b1b      	subs	r3, r3, r4
 800982a:	42b3      	cmp	r3, r6
 800982c:	dc00      	bgt.n	8009830 <_printf_float+0x368>
 800982e:	e77c      	b.n	800972a <_printf_float+0x262>
 8009830:	002a      	movs	r2, r5
 8009832:	2301      	movs	r3, #1
 8009834:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009836:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009838:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800983a:	321a      	adds	r2, #26
 800983c:	47b8      	blx	r7
 800983e:	3001      	adds	r0, #1
 8009840:	d100      	bne.n	8009844 <_printf_float+0x37c>
 8009842:	e69d      	b.n	8009580 <_printf_float+0xb8>
 8009844:	3601      	adds	r6, #1
 8009846:	e7ec      	b.n	8009822 <_printf_float+0x35a>
 8009848:	0033      	movs	r3, r6
 800984a:	003a      	movs	r2, r7
 800984c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800984e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009850:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009852:	47a0      	blx	r4
 8009854:	3001      	adds	r0, #1
 8009856:	d1c5      	bne.n	80097e4 <_printf_float+0x31c>
 8009858:	e692      	b.n	8009580 <_printf_float+0xb8>
 800985a:	002a      	movs	r2, r5
 800985c:	2301      	movs	r3, #1
 800985e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009860:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009862:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009864:	321a      	adds	r2, #26
 8009866:	47b0      	blx	r6
 8009868:	3001      	adds	r0, #1
 800986a:	d100      	bne.n	800986e <_printf_float+0x3a6>
 800986c:	e688      	b.n	8009580 <_printf_float+0xb8>
 800986e:	3401      	adds	r4, #1
 8009870:	e7bd      	b.n	80097ee <_printf_float+0x326>
 8009872:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009874:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009876:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009878:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800987a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800987c:	47a0      	blx	r4
 800987e:	3001      	adds	r0, #1
 8009880:	d1c1      	bne.n	8009806 <_printf_float+0x33e>
 8009882:	e67d      	b.n	8009580 <_printf_float+0xb8>
 8009884:	19ba      	adds	r2, r7, r6
 8009886:	0023      	movs	r3, r4
 8009888:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800988a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800988c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800988e:	47b0      	blx	r6
 8009890:	3001      	adds	r0, #1
 8009892:	d1c2      	bne.n	800981a <_printf_float+0x352>
 8009894:	e674      	b.n	8009580 <_printf_float+0xb8>
 8009896:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009898:	930c      	str	r3, [sp, #48]	@ 0x30
 800989a:	2b01      	cmp	r3, #1
 800989c:	dc02      	bgt.n	80098a4 <_printf_float+0x3dc>
 800989e:	2301      	movs	r3, #1
 80098a0:	421a      	tst	r2, r3
 80098a2:	d039      	beq.n	8009918 <_printf_float+0x450>
 80098a4:	2301      	movs	r3, #1
 80098a6:	003a      	movs	r2, r7
 80098a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80098aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098ac:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80098ae:	47b0      	blx	r6
 80098b0:	3001      	adds	r0, #1
 80098b2:	d100      	bne.n	80098b6 <_printf_float+0x3ee>
 80098b4:	e664      	b.n	8009580 <_printf_float+0xb8>
 80098b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80098ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80098bc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098be:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80098c0:	47b0      	blx	r6
 80098c2:	3001      	adds	r0, #1
 80098c4:	d100      	bne.n	80098c8 <_printf_float+0x400>
 80098c6:	e65b      	b.n	8009580 <_printf_float+0xb8>
 80098c8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80098ca:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80098cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80098ce:	2200      	movs	r2, #0
 80098d0:	3b01      	subs	r3, #1
 80098d2:	930c      	str	r3, [sp, #48]	@ 0x30
 80098d4:	2300      	movs	r3, #0
 80098d6:	f7f6 fdb9 	bl	800044c <__aeabi_dcmpeq>
 80098da:	2800      	cmp	r0, #0
 80098dc:	d11a      	bne.n	8009914 <_printf_float+0x44c>
 80098de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80098e0:	1c7a      	adds	r2, r7, #1
 80098e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80098e4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098e6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80098e8:	47b0      	blx	r6
 80098ea:	3001      	adds	r0, #1
 80098ec:	d10e      	bne.n	800990c <_printf_float+0x444>
 80098ee:	e647      	b.n	8009580 <_printf_float+0xb8>
 80098f0:	002a      	movs	r2, r5
 80098f2:	2301      	movs	r3, #1
 80098f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80098f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098f8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80098fa:	321a      	adds	r2, #26
 80098fc:	47b8      	blx	r7
 80098fe:	3001      	adds	r0, #1
 8009900:	d100      	bne.n	8009904 <_printf_float+0x43c>
 8009902:	e63d      	b.n	8009580 <_printf_float+0xb8>
 8009904:	3601      	adds	r6, #1
 8009906:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009908:	429e      	cmp	r6, r3
 800990a:	dbf1      	blt.n	80098f0 <_printf_float+0x428>
 800990c:	002a      	movs	r2, r5
 800990e:	0023      	movs	r3, r4
 8009910:	3250      	adds	r2, #80	@ 0x50
 8009912:	e6da      	b.n	80096ca <_printf_float+0x202>
 8009914:	2600      	movs	r6, #0
 8009916:	e7f6      	b.n	8009906 <_printf_float+0x43e>
 8009918:	003a      	movs	r2, r7
 800991a:	e7e2      	b.n	80098e2 <_printf_float+0x41a>
 800991c:	002a      	movs	r2, r5
 800991e:	2301      	movs	r3, #1
 8009920:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009922:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009924:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009926:	3219      	adds	r2, #25
 8009928:	47b0      	blx	r6
 800992a:	3001      	adds	r0, #1
 800992c:	d100      	bne.n	8009930 <_printf_float+0x468>
 800992e:	e627      	b.n	8009580 <_printf_float+0xb8>
 8009930:	3401      	adds	r4, #1
 8009932:	68eb      	ldr	r3, [r5, #12]
 8009934:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009936:	1a9b      	subs	r3, r3, r2
 8009938:	42a3      	cmp	r3, r4
 800993a:	dcef      	bgt.n	800991c <_printf_float+0x454>
 800993c:	e6f9      	b.n	8009732 <_printf_float+0x26a>
 800993e:	2400      	movs	r4, #0
 8009940:	e7f7      	b.n	8009932 <_printf_float+0x46a>
 8009942:	46c0      	nop			@ (mov r8, r8)

08009944 <_printf_common>:
 8009944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009946:	0016      	movs	r6, r2
 8009948:	9301      	str	r3, [sp, #4]
 800994a:	688a      	ldr	r2, [r1, #8]
 800994c:	690b      	ldr	r3, [r1, #16]
 800994e:	000c      	movs	r4, r1
 8009950:	9000      	str	r0, [sp, #0]
 8009952:	4293      	cmp	r3, r2
 8009954:	da00      	bge.n	8009958 <_printf_common+0x14>
 8009956:	0013      	movs	r3, r2
 8009958:	0022      	movs	r2, r4
 800995a:	6033      	str	r3, [r6, #0]
 800995c:	3243      	adds	r2, #67	@ 0x43
 800995e:	7812      	ldrb	r2, [r2, #0]
 8009960:	2a00      	cmp	r2, #0
 8009962:	d001      	beq.n	8009968 <_printf_common+0x24>
 8009964:	3301      	adds	r3, #1
 8009966:	6033      	str	r3, [r6, #0]
 8009968:	6823      	ldr	r3, [r4, #0]
 800996a:	069b      	lsls	r3, r3, #26
 800996c:	d502      	bpl.n	8009974 <_printf_common+0x30>
 800996e:	6833      	ldr	r3, [r6, #0]
 8009970:	3302      	adds	r3, #2
 8009972:	6033      	str	r3, [r6, #0]
 8009974:	6822      	ldr	r2, [r4, #0]
 8009976:	2306      	movs	r3, #6
 8009978:	0015      	movs	r5, r2
 800997a:	401d      	ands	r5, r3
 800997c:	421a      	tst	r2, r3
 800997e:	d027      	beq.n	80099d0 <_printf_common+0x8c>
 8009980:	0023      	movs	r3, r4
 8009982:	3343      	adds	r3, #67	@ 0x43
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	1e5a      	subs	r2, r3, #1
 8009988:	4193      	sbcs	r3, r2
 800998a:	6822      	ldr	r2, [r4, #0]
 800998c:	0692      	lsls	r2, r2, #26
 800998e:	d430      	bmi.n	80099f2 <_printf_common+0xae>
 8009990:	0022      	movs	r2, r4
 8009992:	9901      	ldr	r1, [sp, #4]
 8009994:	9800      	ldr	r0, [sp, #0]
 8009996:	9d08      	ldr	r5, [sp, #32]
 8009998:	3243      	adds	r2, #67	@ 0x43
 800999a:	47a8      	blx	r5
 800999c:	3001      	adds	r0, #1
 800999e:	d025      	beq.n	80099ec <_printf_common+0xa8>
 80099a0:	2206      	movs	r2, #6
 80099a2:	6823      	ldr	r3, [r4, #0]
 80099a4:	2500      	movs	r5, #0
 80099a6:	4013      	ands	r3, r2
 80099a8:	2b04      	cmp	r3, #4
 80099aa:	d105      	bne.n	80099b8 <_printf_common+0x74>
 80099ac:	6833      	ldr	r3, [r6, #0]
 80099ae:	68e5      	ldr	r5, [r4, #12]
 80099b0:	1aed      	subs	r5, r5, r3
 80099b2:	43eb      	mvns	r3, r5
 80099b4:	17db      	asrs	r3, r3, #31
 80099b6:	401d      	ands	r5, r3
 80099b8:	68a3      	ldr	r3, [r4, #8]
 80099ba:	6922      	ldr	r2, [r4, #16]
 80099bc:	4293      	cmp	r3, r2
 80099be:	dd01      	ble.n	80099c4 <_printf_common+0x80>
 80099c0:	1a9b      	subs	r3, r3, r2
 80099c2:	18ed      	adds	r5, r5, r3
 80099c4:	2600      	movs	r6, #0
 80099c6:	42b5      	cmp	r5, r6
 80099c8:	d120      	bne.n	8009a0c <_printf_common+0xc8>
 80099ca:	2000      	movs	r0, #0
 80099cc:	e010      	b.n	80099f0 <_printf_common+0xac>
 80099ce:	3501      	adds	r5, #1
 80099d0:	68e3      	ldr	r3, [r4, #12]
 80099d2:	6832      	ldr	r2, [r6, #0]
 80099d4:	1a9b      	subs	r3, r3, r2
 80099d6:	42ab      	cmp	r3, r5
 80099d8:	ddd2      	ble.n	8009980 <_printf_common+0x3c>
 80099da:	0022      	movs	r2, r4
 80099dc:	2301      	movs	r3, #1
 80099de:	9901      	ldr	r1, [sp, #4]
 80099e0:	9800      	ldr	r0, [sp, #0]
 80099e2:	9f08      	ldr	r7, [sp, #32]
 80099e4:	3219      	adds	r2, #25
 80099e6:	47b8      	blx	r7
 80099e8:	3001      	adds	r0, #1
 80099ea:	d1f0      	bne.n	80099ce <_printf_common+0x8a>
 80099ec:	2001      	movs	r0, #1
 80099ee:	4240      	negs	r0, r0
 80099f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80099f2:	2030      	movs	r0, #48	@ 0x30
 80099f4:	18e1      	adds	r1, r4, r3
 80099f6:	3143      	adds	r1, #67	@ 0x43
 80099f8:	7008      	strb	r0, [r1, #0]
 80099fa:	0021      	movs	r1, r4
 80099fc:	1c5a      	adds	r2, r3, #1
 80099fe:	3145      	adds	r1, #69	@ 0x45
 8009a00:	7809      	ldrb	r1, [r1, #0]
 8009a02:	18a2      	adds	r2, r4, r2
 8009a04:	3243      	adds	r2, #67	@ 0x43
 8009a06:	3302      	adds	r3, #2
 8009a08:	7011      	strb	r1, [r2, #0]
 8009a0a:	e7c1      	b.n	8009990 <_printf_common+0x4c>
 8009a0c:	0022      	movs	r2, r4
 8009a0e:	2301      	movs	r3, #1
 8009a10:	9901      	ldr	r1, [sp, #4]
 8009a12:	9800      	ldr	r0, [sp, #0]
 8009a14:	9f08      	ldr	r7, [sp, #32]
 8009a16:	321a      	adds	r2, #26
 8009a18:	47b8      	blx	r7
 8009a1a:	3001      	adds	r0, #1
 8009a1c:	d0e6      	beq.n	80099ec <_printf_common+0xa8>
 8009a1e:	3601      	adds	r6, #1
 8009a20:	e7d1      	b.n	80099c6 <_printf_common+0x82>
	...

08009a24 <_printf_i>:
 8009a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a26:	b08b      	sub	sp, #44	@ 0x2c
 8009a28:	9206      	str	r2, [sp, #24]
 8009a2a:	000a      	movs	r2, r1
 8009a2c:	3243      	adds	r2, #67	@ 0x43
 8009a2e:	9307      	str	r3, [sp, #28]
 8009a30:	9005      	str	r0, [sp, #20]
 8009a32:	9203      	str	r2, [sp, #12]
 8009a34:	7e0a      	ldrb	r2, [r1, #24]
 8009a36:	000c      	movs	r4, r1
 8009a38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009a3a:	2a78      	cmp	r2, #120	@ 0x78
 8009a3c:	d809      	bhi.n	8009a52 <_printf_i+0x2e>
 8009a3e:	2a62      	cmp	r2, #98	@ 0x62
 8009a40:	d80b      	bhi.n	8009a5a <_printf_i+0x36>
 8009a42:	2a00      	cmp	r2, #0
 8009a44:	d100      	bne.n	8009a48 <_printf_i+0x24>
 8009a46:	e0bc      	b.n	8009bc2 <_printf_i+0x19e>
 8009a48:	497b      	ldr	r1, [pc, #492]	@ (8009c38 <_printf_i+0x214>)
 8009a4a:	9104      	str	r1, [sp, #16]
 8009a4c:	2a58      	cmp	r2, #88	@ 0x58
 8009a4e:	d100      	bne.n	8009a52 <_printf_i+0x2e>
 8009a50:	e090      	b.n	8009b74 <_printf_i+0x150>
 8009a52:	0025      	movs	r5, r4
 8009a54:	3542      	adds	r5, #66	@ 0x42
 8009a56:	702a      	strb	r2, [r5, #0]
 8009a58:	e022      	b.n	8009aa0 <_printf_i+0x7c>
 8009a5a:	0010      	movs	r0, r2
 8009a5c:	3863      	subs	r0, #99	@ 0x63
 8009a5e:	2815      	cmp	r0, #21
 8009a60:	d8f7      	bhi.n	8009a52 <_printf_i+0x2e>
 8009a62:	f7f6 fb63 	bl	800012c <__gnu_thumb1_case_shi>
 8009a66:	0016      	.short	0x0016
 8009a68:	fff6001f 	.word	0xfff6001f
 8009a6c:	fff6fff6 	.word	0xfff6fff6
 8009a70:	001ffff6 	.word	0x001ffff6
 8009a74:	fff6fff6 	.word	0xfff6fff6
 8009a78:	fff6fff6 	.word	0xfff6fff6
 8009a7c:	003600a1 	.word	0x003600a1
 8009a80:	fff60080 	.word	0xfff60080
 8009a84:	00b2fff6 	.word	0x00b2fff6
 8009a88:	0036fff6 	.word	0x0036fff6
 8009a8c:	fff6fff6 	.word	0xfff6fff6
 8009a90:	0084      	.short	0x0084
 8009a92:	0025      	movs	r5, r4
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	3542      	adds	r5, #66	@ 0x42
 8009a98:	1d11      	adds	r1, r2, #4
 8009a9a:	6019      	str	r1, [r3, #0]
 8009a9c:	6813      	ldr	r3, [r2, #0]
 8009a9e:	702b      	strb	r3, [r5, #0]
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	e0a0      	b.n	8009be6 <_printf_i+0x1c2>
 8009aa4:	6818      	ldr	r0, [r3, #0]
 8009aa6:	6809      	ldr	r1, [r1, #0]
 8009aa8:	1d02      	adds	r2, r0, #4
 8009aaa:	060d      	lsls	r5, r1, #24
 8009aac:	d50b      	bpl.n	8009ac6 <_printf_i+0xa2>
 8009aae:	6806      	ldr	r6, [r0, #0]
 8009ab0:	601a      	str	r2, [r3, #0]
 8009ab2:	2e00      	cmp	r6, #0
 8009ab4:	da03      	bge.n	8009abe <_printf_i+0x9a>
 8009ab6:	232d      	movs	r3, #45	@ 0x2d
 8009ab8:	9a03      	ldr	r2, [sp, #12]
 8009aba:	4276      	negs	r6, r6
 8009abc:	7013      	strb	r3, [r2, #0]
 8009abe:	4b5e      	ldr	r3, [pc, #376]	@ (8009c38 <_printf_i+0x214>)
 8009ac0:	270a      	movs	r7, #10
 8009ac2:	9304      	str	r3, [sp, #16]
 8009ac4:	e018      	b.n	8009af8 <_printf_i+0xd4>
 8009ac6:	6806      	ldr	r6, [r0, #0]
 8009ac8:	601a      	str	r2, [r3, #0]
 8009aca:	0649      	lsls	r1, r1, #25
 8009acc:	d5f1      	bpl.n	8009ab2 <_printf_i+0x8e>
 8009ace:	b236      	sxth	r6, r6
 8009ad0:	e7ef      	b.n	8009ab2 <_printf_i+0x8e>
 8009ad2:	6808      	ldr	r0, [r1, #0]
 8009ad4:	6819      	ldr	r1, [r3, #0]
 8009ad6:	c940      	ldmia	r1!, {r6}
 8009ad8:	0605      	lsls	r5, r0, #24
 8009ada:	d402      	bmi.n	8009ae2 <_printf_i+0xbe>
 8009adc:	0640      	lsls	r0, r0, #25
 8009ade:	d500      	bpl.n	8009ae2 <_printf_i+0xbe>
 8009ae0:	b2b6      	uxth	r6, r6
 8009ae2:	6019      	str	r1, [r3, #0]
 8009ae4:	4b54      	ldr	r3, [pc, #336]	@ (8009c38 <_printf_i+0x214>)
 8009ae6:	270a      	movs	r7, #10
 8009ae8:	9304      	str	r3, [sp, #16]
 8009aea:	2a6f      	cmp	r2, #111	@ 0x6f
 8009aec:	d100      	bne.n	8009af0 <_printf_i+0xcc>
 8009aee:	3f02      	subs	r7, #2
 8009af0:	0023      	movs	r3, r4
 8009af2:	2200      	movs	r2, #0
 8009af4:	3343      	adds	r3, #67	@ 0x43
 8009af6:	701a      	strb	r2, [r3, #0]
 8009af8:	6863      	ldr	r3, [r4, #4]
 8009afa:	60a3      	str	r3, [r4, #8]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	db03      	blt.n	8009b08 <_printf_i+0xe4>
 8009b00:	2104      	movs	r1, #4
 8009b02:	6822      	ldr	r2, [r4, #0]
 8009b04:	438a      	bics	r2, r1
 8009b06:	6022      	str	r2, [r4, #0]
 8009b08:	2e00      	cmp	r6, #0
 8009b0a:	d102      	bne.n	8009b12 <_printf_i+0xee>
 8009b0c:	9d03      	ldr	r5, [sp, #12]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d00c      	beq.n	8009b2c <_printf_i+0x108>
 8009b12:	9d03      	ldr	r5, [sp, #12]
 8009b14:	0030      	movs	r0, r6
 8009b16:	0039      	movs	r1, r7
 8009b18:	f7f6 fb98 	bl	800024c <__aeabi_uidivmod>
 8009b1c:	9b04      	ldr	r3, [sp, #16]
 8009b1e:	3d01      	subs	r5, #1
 8009b20:	5c5b      	ldrb	r3, [r3, r1]
 8009b22:	702b      	strb	r3, [r5, #0]
 8009b24:	0033      	movs	r3, r6
 8009b26:	0006      	movs	r6, r0
 8009b28:	429f      	cmp	r7, r3
 8009b2a:	d9f3      	bls.n	8009b14 <_printf_i+0xf0>
 8009b2c:	2f08      	cmp	r7, #8
 8009b2e:	d109      	bne.n	8009b44 <_printf_i+0x120>
 8009b30:	6823      	ldr	r3, [r4, #0]
 8009b32:	07db      	lsls	r3, r3, #31
 8009b34:	d506      	bpl.n	8009b44 <_printf_i+0x120>
 8009b36:	6862      	ldr	r2, [r4, #4]
 8009b38:	6923      	ldr	r3, [r4, #16]
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	dc02      	bgt.n	8009b44 <_printf_i+0x120>
 8009b3e:	2330      	movs	r3, #48	@ 0x30
 8009b40:	3d01      	subs	r5, #1
 8009b42:	702b      	strb	r3, [r5, #0]
 8009b44:	9b03      	ldr	r3, [sp, #12]
 8009b46:	1b5b      	subs	r3, r3, r5
 8009b48:	6123      	str	r3, [r4, #16]
 8009b4a:	9b07      	ldr	r3, [sp, #28]
 8009b4c:	0021      	movs	r1, r4
 8009b4e:	9300      	str	r3, [sp, #0]
 8009b50:	9805      	ldr	r0, [sp, #20]
 8009b52:	9b06      	ldr	r3, [sp, #24]
 8009b54:	aa09      	add	r2, sp, #36	@ 0x24
 8009b56:	f7ff fef5 	bl	8009944 <_printf_common>
 8009b5a:	3001      	adds	r0, #1
 8009b5c:	d148      	bne.n	8009bf0 <_printf_i+0x1cc>
 8009b5e:	2001      	movs	r0, #1
 8009b60:	4240      	negs	r0, r0
 8009b62:	b00b      	add	sp, #44	@ 0x2c
 8009b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b66:	2220      	movs	r2, #32
 8009b68:	6809      	ldr	r1, [r1, #0]
 8009b6a:	430a      	orrs	r2, r1
 8009b6c:	6022      	str	r2, [r4, #0]
 8009b6e:	2278      	movs	r2, #120	@ 0x78
 8009b70:	4932      	ldr	r1, [pc, #200]	@ (8009c3c <_printf_i+0x218>)
 8009b72:	9104      	str	r1, [sp, #16]
 8009b74:	0021      	movs	r1, r4
 8009b76:	3145      	adds	r1, #69	@ 0x45
 8009b78:	700a      	strb	r2, [r1, #0]
 8009b7a:	6819      	ldr	r1, [r3, #0]
 8009b7c:	6822      	ldr	r2, [r4, #0]
 8009b7e:	c940      	ldmia	r1!, {r6}
 8009b80:	0610      	lsls	r0, r2, #24
 8009b82:	d402      	bmi.n	8009b8a <_printf_i+0x166>
 8009b84:	0650      	lsls	r0, r2, #25
 8009b86:	d500      	bpl.n	8009b8a <_printf_i+0x166>
 8009b88:	b2b6      	uxth	r6, r6
 8009b8a:	6019      	str	r1, [r3, #0]
 8009b8c:	07d3      	lsls	r3, r2, #31
 8009b8e:	d502      	bpl.n	8009b96 <_printf_i+0x172>
 8009b90:	2320      	movs	r3, #32
 8009b92:	4313      	orrs	r3, r2
 8009b94:	6023      	str	r3, [r4, #0]
 8009b96:	2e00      	cmp	r6, #0
 8009b98:	d001      	beq.n	8009b9e <_printf_i+0x17a>
 8009b9a:	2710      	movs	r7, #16
 8009b9c:	e7a8      	b.n	8009af0 <_printf_i+0xcc>
 8009b9e:	2220      	movs	r2, #32
 8009ba0:	6823      	ldr	r3, [r4, #0]
 8009ba2:	4393      	bics	r3, r2
 8009ba4:	6023      	str	r3, [r4, #0]
 8009ba6:	e7f8      	b.n	8009b9a <_printf_i+0x176>
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	680d      	ldr	r5, [r1, #0]
 8009bac:	1d10      	adds	r0, r2, #4
 8009bae:	6949      	ldr	r1, [r1, #20]
 8009bb0:	6018      	str	r0, [r3, #0]
 8009bb2:	6813      	ldr	r3, [r2, #0]
 8009bb4:	062e      	lsls	r6, r5, #24
 8009bb6:	d501      	bpl.n	8009bbc <_printf_i+0x198>
 8009bb8:	6019      	str	r1, [r3, #0]
 8009bba:	e002      	b.n	8009bc2 <_printf_i+0x19e>
 8009bbc:	066d      	lsls	r5, r5, #25
 8009bbe:	d5fb      	bpl.n	8009bb8 <_printf_i+0x194>
 8009bc0:	8019      	strh	r1, [r3, #0]
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	9d03      	ldr	r5, [sp, #12]
 8009bc6:	6123      	str	r3, [r4, #16]
 8009bc8:	e7bf      	b.n	8009b4a <_printf_i+0x126>
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	1d11      	adds	r1, r2, #4
 8009bce:	6019      	str	r1, [r3, #0]
 8009bd0:	6815      	ldr	r5, [r2, #0]
 8009bd2:	2100      	movs	r1, #0
 8009bd4:	0028      	movs	r0, r5
 8009bd6:	6862      	ldr	r2, [r4, #4]
 8009bd8:	f000 f9c9 	bl	8009f6e <memchr>
 8009bdc:	2800      	cmp	r0, #0
 8009bde:	d001      	beq.n	8009be4 <_printf_i+0x1c0>
 8009be0:	1b40      	subs	r0, r0, r5
 8009be2:	6060      	str	r0, [r4, #4]
 8009be4:	6863      	ldr	r3, [r4, #4]
 8009be6:	6123      	str	r3, [r4, #16]
 8009be8:	2300      	movs	r3, #0
 8009bea:	9a03      	ldr	r2, [sp, #12]
 8009bec:	7013      	strb	r3, [r2, #0]
 8009bee:	e7ac      	b.n	8009b4a <_printf_i+0x126>
 8009bf0:	002a      	movs	r2, r5
 8009bf2:	6923      	ldr	r3, [r4, #16]
 8009bf4:	9906      	ldr	r1, [sp, #24]
 8009bf6:	9805      	ldr	r0, [sp, #20]
 8009bf8:	9d07      	ldr	r5, [sp, #28]
 8009bfa:	47a8      	blx	r5
 8009bfc:	3001      	adds	r0, #1
 8009bfe:	d0ae      	beq.n	8009b5e <_printf_i+0x13a>
 8009c00:	6823      	ldr	r3, [r4, #0]
 8009c02:	079b      	lsls	r3, r3, #30
 8009c04:	d415      	bmi.n	8009c32 <_printf_i+0x20e>
 8009c06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c08:	68e0      	ldr	r0, [r4, #12]
 8009c0a:	4298      	cmp	r0, r3
 8009c0c:	daa9      	bge.n	8009b62 <_printf_i+0x13e>
 8009c0e:	0018      	movs	r0, r3
 8009c10:	e7a7      	b.n	8009b62 <_printf_i+0x13e>
 8009c12:	0022      	movs	r2, r4
 8009c14:	2301      	movs	r3, #1
 8009c16:	9906      	ldr	r1, [sp, #24]
 8009c18:	9805      	ldr	r0, [sp, #20]
 8009c1a:	9e07      	ldr	r6, [sp, #28]
 8009c1c:	3219      	adds	r2, #25
 8009c1e:	47b0      	blx	r6
 8009c20:	3001      	adds	r0, #1
 8009c22:	d09c      	beq.n	8009b5e <_printf_i+0x13a>
 8009c24:	3501      	adds	r5, #1
 8009c26:	68e3      	ldr	r3, [r4, #12]
 8009c28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c2a:	1a9b      	subs	r3, r3, r2
 8009c2c:	42ab      	cmp	r3, r5
 8009c2e:	dcf0      	bgt.n	8009c12 <_printf_i+0x1ee>
 8009c30:	e7e9      	b.n	8009c06 <_printf_i+0x1e2>
 8009c32:	2500      	movs	r5, #0
 8009c34:	e7f7      	b.n	8009c26 <_printf_i+0x202>
 8009c36:	46c0      	nop			@ (mov r8, r8)
 8009c38:	0800c3fe 	.word	0x0800c3fe
 8009c3c:	0800c40f 	.word	0x0800c40f

08009c40 <std>:
 8009c40:	2300      	movs	r3, #0
 8009c42:	b510      	push	{r4, lr}
 8009c44:	0004      	movs	r4, r0
 8009c46:	6003      	str	r3, [r0, #0]
 8009c48:	6043      	str	r3, [r0, #4]
 8009c4a:	6083      	str	r3, [r0, #8]
 8009c4c:	8181      	strh	r1, [r0, #12]
 8009c4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009c50:	81c2      	strh	r2, [r0, #14]
 8009c52:	6103      	str	r3, [r0, #16]
 8009c54:	6143      	str	r3, [r0, #20]
 8009c56:	6183      	str	r3, [r0, #24]
 8009c58:	0019      	movs	r1, r3
 8009c5a:	2208      	movs	r2, #8
 8009c5c:	305c      	adds	r0, #92	@ 0x5c
 8009c5e:	f000 f8ff 	bl	8009e60 <memset>
 8009c62:	4b0b      	ldr	r3, [pc, #44]	@ (8009c90 <std+0x50>)
 8009c64:	6224      	str	r4, [r4, #32]
 8009c66:	6263      	str	r3, [r4, #36]	@ 0x24
 8009c68:	4b0a      	ldr	r3, [pc, #40]	@ (8009c94 <std+0x54>)
 8009c6a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8009c98 <std+0x58>)
 8009c6e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009c70:	4b0a      	ldr	r3, [pc, #40]	@ (8009c9c <std+0x5c>)
 8009c72:	6323      	str	r3, [r4, #48]	@ 0x30
 8009c74:	4b0a      	ldr	r3, [pc, #40]	@ (8009ca0 <std+0x60>)
 8009c76:	429c      	cmp	r4, r3
 8009c78:	d005      	beq.n	8009c86 <std+0x46>
 8009c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8009ca4 <std+0x64>)
 8009c7c:	429c      	cmp	r4, r3
 8009c7e:	d002      	beq.n	8009c86 <std+0x46>
 8009c80:	4b09      	ldr	r3, [pc, #36]	@ (8009ca8 <std+0x68>)
 8009c82:	429c      	cmp	r4, r3
 8009c84:	d103      	bne.n	8009c8e <std+0x4e>
 8009c86:	0020      	movs	r0, r4
 8009c88:	3058      	adds	r0, #88	@ 0x58
 8009c8a:	f000 f96d 	bl	8009f68 <__retarget_lock_init_recursive>
 8009c8e:	bd10      	pop	{r4, pc}
 8009c90:	08009dc9 	.word	0x08009dc9
 8009c94:	08009df1 	.word	0x08009df1
 8009c98:	08009e29 	.word	0x08009e29
 8009c9c:	08009e55 	.word	0x08009e55
 8009ca0:	200003e4 	.word	0x200003e4
 8009ca4:	2000044c 	.word	0x2000044c
 8009ca8:	200004b4 	.word	0x200004b4

08009cac <stdio_exit_handler>:
 8009cac:	b510      	push	{r4, lr}
 8009cae:	4a03      	ldr	r2, [pc, #12]	@ (8009cbc <stdio_exit_handler+0x10>)
 8009cb0:	4903      	ldr	r1, [pc, #12]	@ (8009cc0 <stdio_exit_handler+0x14>)
 8009cb2:	4804      	ldr	r0, [pc, #16]	@ (8009cc4 <stdio_exit_handler+0x18>)
 8009cb4:	f000 f86c 	bl	8009d90 <_fwalk_sglue>
 8009cb8:	bd10      	pop	{r4, pc}
 8009cba:	46c0      	nop			@ (mov r8, r8)
 8009cbc:	20000010 	.word	0x20000010
 8009cc0:	0800b6e9 	.word	0x0800b6e9
 8009cc4:	20000020 	.word	0x20000020

08009cc8 <cleanup_stdio>:
 8009cc8:	6841      	ldr	r1, [r0, #4]
 8009cca:	4b0b      	ldr	r3, [pc, #44]	@ (8009cf8 <cleanup_stdio+0x30>)
 8009ccc:	b510      	push	{r4, lr}
 8009cce:	0004      	movs	r4, r0
 8009cd0:	4299      	cmp	r1, r3
 8009cd2:	d001      	beq.n	8009cd8 <cleanup_stdio+0x10>
 8009cd4:	f001 fd08 	bl	800b6e8 <_fflush_r>
 8009cd8:	68a1      	ldr	r1, [r4, #8]
 8009cda:	4b08      	ldr	r3, [pc, #32]	@ (8009cfc <cleanup_stdio+0x34>)
 8009cdc:	4299      	cmp	r1, r3
 8009cde:	d002      	beq.n	8009ce6 <cleanup_stdio+0x1e>
 8009ce0:	0020      	movs	r0, r4
 8009ce2:	f001 fd01 	bl	800b6e8 <_fflush_r>
 8009ce6:	68e1      	ldr	r1, [r4, #12]
 8009ce8:	4b05      	ldr	r3, [pc, #20]	@ (8009d00 <cleanup_stdio+0x38>)
 8009cea:	4299      	cmp	r1, r3
 8009cec:	d002      	beq.n	8009cf4 <cleanup_stdio+0x2c>
 8009cee:	0020      	movs	r0, r4
 8009cf0:	f001 fcfa 	bl	800b6e8 <_fflush_r>
 8009cf4:	bd10      	pop	{r4, pc}
 8009cf6:	46c0      	nop			@ (mov r8, r8)
 8009cf8:	200003e4 	.word	0x200003e4
 8009cfc:	2000044c 	.word	0x2000044c
 8009d00:	200004b4 	.word	0x200004b4

08009d04 <global_stdio_init.part.0>:
 8009d04:	b510      	push	{r4, lr}
 8009d06:	4b09      	ldr	r3, [pc, #36]	@ (8009d2c <global_stdio_init.part.0+0x28>)
 8009d08:	4a09      	ldr	r2, [pc, #36]	@ (8009d30 <global_stdio_init.part.0+0x2c>)
 8009d0a:	2104      	movs	r1, #4
 8009d0c:	601a      	str	r2, [r3, #0]
 8009d0e:	4809      	ldr	r0, [pc, #36]	@ (8009d34 <global_stdio_init.part.0+0x30>)
 8009d10:	2200      	movs	r2, #0
 8009d12:	f7ff ff95 	bl	8009c40 <std>
 8009d16:	2201      	movs	r2, #1
 8009d18:	2109      	movs	r1, #9
 8009d1a:	4807      	ldr	r0, [pc, #28]	@ (8009d38 <global_stdio_init.part.0+0x34>)
 8009d1c:	f7ff ff90 	bl	8009c40 <std>
 8009d20:	2202      	movs	r2, #2
 8009d22:	2112      	movs	r1, #18
 8009d24:	4805      	ldr	r0, [pc, #20]	@ (8009d3c <global_stdio_init.part.0+0x38>)
 8009d26:	f7ff ff8b 	bl	8009c40 <std>
 8009d2a:	bd10      	pop	{r4, pc}
 8009d2c:	2000051c 	.word	0x2000051c
 8009d30:	08009cad 	.word	0x08009cad
 8009d34:	200003e4 	.word	0x200003e4
 8009d38:	2000044c 	.word	0x2000044c
 8009d3c:	200004b4 	.word	0x200004b4

08009d40 <__sfp_lock_acquire>:
 8009d40:	b510      	push	{r4, lr}
 8009d42:	4802      	ldr	r0, [pc, #8]	@ (8009d4c <__sfp_lock_acquire+0xc>)
 8009d44:	f000 f911 	bl	8009f6a <__retarget_lock_acquire_recursive>
 8009d48:	bd10      	pop	{r4, pc}
 8009d4a:	46c0      	nop			@ (mov r8, r8)
 8009d4c:	20000525 	.word	0x20000525

08009d50 <__sfp_lock_release>:
 8009d50:	b510      	push	{r4, lr}
 8009d52:	4802      	ldr	r0, [pc, #8]	@ (8009d5c <__sfp_lock_release+0xc>)
 8009d54:	f000 f90a 	bl	8009f6c <__retarget_lock_release_recursive>
 8009d58:	bd10      	pop	{r4, pc}
 8009d5a:	46c0      	nop			@ (mov r8, r8)
 8009d5c:	20000525 	.word	0x20000525

08009d60 <__sinit>:
 8009d60:	b510      	push	{r4, lr}
 8009d62:	0004      	movs	r4, r0
 8009d64:	f7ff ffec 	bl	8009d40 <__sfp_lock_acquire>
 8009d68:	6a23      	ldr	r3, [r4, #32]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d002      	beq.n	8009d74 <__sinit+0x14>
 8009d6e:	f7ff ffef 	bl	8009d50 <__sfp_lock_release>
 8009d72:	bd10      	pop	{r4, pc}
 8009d74:	4b04      	ldr	r3, [pc, #16]	@ (8009d88 <__sinit+0x28>)
 8009d76:	6223      	str	r3, [r4, #32]
 8009d78:	4b04      	ldr	r3, [pc, #16]	@ (8009d8c <__sinit+0x2c>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d1f6      	bne.n	8009d6e <__sinit+0xe>
 8009d80:	f7ff ffc0 	bl	8009d04 <global_stdio_init.part.0>
 8009d84:	e7f3      	b.n	8009d6e <__sinit+0xe>
 8009d86:	46c0      	nop			@ (mov r8, r8)
 8009d88:	08009cc9 	.word	0x08009cc9
 8009d8c:	2000051c 	.word	0x2000051c

08009d90 <_fwalk_sglue>:
 8009d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d92:	0014      	movs	r4, r2
 8009d94:	2600      	movs	r6, #0
 8009d96:	9000      	str	r0, [sp, #0]
 8009d98:	9101      	str	r1, [sp, #4]
 8009d9a:	68a5      	ldr	r5, [r4, #8]
 8009d9c:	6867      	ldr	r7, [r4, #4]
 8009d9e:	3f01      	subs	r7, #1
 8009da0:	d504      	bpl.n	8009dac <_fwalk_sglue+0x1c>
 8009da2:	6824      	ldr	r4, [r4, #0]
 8009da4:	2c00      	cmp	r4, #0
 8009da6:	d1f8      	bne.n	8009d9a <_fwalk_sglue+0xa>
 8009da8:	0030      	movs	r0, r6
 8009daa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009dac:	89ab      	ldrh	r3, [r5, #12]
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d908      	bls.n	8009dc4 <_fwalk_sglue+0x34>
 8009db2:	220e      	movs	r2, #14
 8009db4:	5eab      	ldrsh	r3, [r5, r2]
 8009db6:	3301      	adds	r3, #1
 8009db8:	d004      	beq.n	8009dc4 <_fwalk_sglue+0x34>
 8009dba:	0029      	movs	r1, r5
 8009dbc:	9800      	ldr	r0, [sp, #0]
 8009dbe:	9b01      	ldr	r3, [sp, #4]
 8009dc0:	4798      	blx	r3
 8009dc2:	4306      	orrs	r6, r0
 8009dc4:	3568      	adds	r5, #104	@ 0x68
 8009dc6:	e7ea      	b.n	8009d9e <_fwalk_sglue+0xe>

08009dc8 <__sread>:
 8009dc8:	b570      	push	{r4, r5, r6, lr}
 8009dca:	000c      	movs	r4, r1
 8009dcc:	250e      	movs	r5, #14
 8009dce:	5f49      	ldrsh	r1, [r1, r5]
 8009dd0:	f000 f878 	bl	8009ec4 <_read_r>
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	db03      	blt.n	8009de0 <__sread+0x18>
 8009dd8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009dda:	181b      	adds	r3, r3, r0
 8009ddc:	6563      	str	r3, [r4, #84]	@ 0x54
 8009dde:	bd70      	pop	{r4, r5, r6, pc}
 8009de0:	89a3      	ldrh	r3, [r4, #12]
 8009de2:	4a02      	ldr	r2, [pc, #8]	@ (8009dec <__sread+0x24>)
 8009de4:	4013      	ands	r3, r2
 8009de6:	81a3      	strh	r3, [r4, #12]
 8009de8:	e7f9      	b.n	8009dde <__sread+0x16>
 8009dea:	46c0      	nop			@ (mov r8, r8)
 8009dec:	ffffefff 	.word	0xffffefff

08009df0 <__swrite>:
 8009df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009df2:	001f      	movs	r7, r3
 8009df4:	898b      	ldrh	r3, [r1, #12]
 8009df6:	0005      	movs	r5, r0
 8009df8:	000c      	movs	r4, r1
 8009dfa:	0016      	movs	r6, r2
 8009dfc:	05db      	lsls	r3, r3, #23
 8009dfe:	d505      	bpl.n	8009e0c <__swrite+0x1c>
 8009e00:	230e      	movs	r3, #14
 8009e02:	5ec9      	ldrsh	r1, [r1, r3]
 8009e04:	2200      	movs	r2, #0
 8009e06:	2302      	movs	r3, #2
 8009e08:	f000 f848 	bl	8009e9c <_lseek_r>
 8009e0c:	89a3      	ldrh	r3, [r4, #12]
 8009e0e:	4a05      	ldr	r2, [pc, #20]	@ (8009e24 <__swrite+0x34>)
 8009e10:	0028      	movs	r0, r5
 8009e12:	4013      	ands	r3, r2
 8009e14:	81a3      	strh	r3, [r4, #12]
 8009e16:	0032      	movs	r2, r6
 8009e18:	230e      	movs	r3, #14
 8009e1a:	5ee1      	ldrsh	r1, [r4, r3]
 8009e1c:	003b      	movs	r3, r7
 8009e1e:	f000 f865 	bl	8009eec <_write_r>
 8009e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e24:	ffffefff 	.word	0xffffefff

08009e28 <__sseek>:
 8009e28:	b570      	push	{r4, r5, r6, lr}
 8009e2a:	000c      	movs	r4, r1
 8009e2c:	250e      	movs	r5, #14
 8009e2e:	5f49      	ldrsh	r1, [r1, r5]
 8009e30:	f000 f834 	bl	8009e9c <_lseek_r>
 8009e34:	89a3      	ldrh	r3, [r4, #12]
 8009e36:	1c42      	adds	r2, r0, #1
 8009e38:	d103      	bne.n	8009e42 <__sseek+0x1a>
 8009e3a:	4a05      	ldr	r2, [pc, #20]	@ (8009e50 <__sseek+0x28>)
 8009e3c:	4013      	ands	r3, r2
 8009e3e:	81a3      	strh	r3, [r4, #12]
 8009e40:	bd70      	pop	{r4, r5, r6, pc}
 8009e42:	2280      	movs	r2, #128	@ 0x80
 8009e44:	0152      	lsls	r2, r2, #5
 8009e46:	4313      	orrs	r3, r2
 8009e48:	81a3      	strh	r3, [r4, #12]
 8009e4a:	6560      	str	r0, [r4, #84]	@ 0x54
 8009e4c:	e7f8      	b.n	8009e40 <__sseek+0x18>
 8009e4e:	46c0      	nop			@ (mov r8, r8)
 8009e50:	ffffefff 	.word	0xffffefff

08009e54 <__sclose>:
 8009e54:	b510      	push	{r4, lr}
 8009e56:	230e      	movs	r3, #14
 8009e58:	5ec9      	ldrsh	r1, [r1, r3]
 8009e5a:	f000 f80d 	bl	8009e78 <_close_r>
 8009e5e:	bd10      	pop	{r4, pc}

08009e60 <memset>:
 8009e60:	0003      	movs	r3, r0
 8009e62:	1882      	adds	r2, r0, r2
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d100      	bne.n	8009e6a <memset+0xa>
 8009e68:	4770      	bx	lr
 8009e6a:	7019      	strb	r1, [r3, #0]
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	e7f9      	b.n	8009e64 <memset+0x4>

08009e70 <_localeconv_r>:
 8009e70:	4800      	ldr	r0, [pc, #0]	@ (8009e74 <_localeconv_r+0x4>)
 8009e72:	4770      	bx	lr
 8009e74:	2000015c 	.word	0x2000015c

08009e78 <_close_r>:
 8009e78:	2300      	movs	r3, #0
 8009e7a:	b570      	push	{r4, r5, r6, lr}
 8009e7c:	4d06      	ldr	r5, [pc, #24]	@ (8009e98 <_close_r+0x20>)
 8009e7e:	0004      	movs	r4, r0
 8009e80:	0008      	movs	r0, r1
 8009e82:	602b      	str	r3, [r5, #0]
 8009e84:	f7fb fa69 	bl	800535a <_close>
 8009e88:	1c43      	adds	r3, r0, #1
 8009e8a:	d103      	bne.n	8009e94 <_close_r+0x1c>
 8009e8c:	682b      	ldr	r3, [r5, #0]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d000      	beq.n	8009e94 <_close_r+0x1c>
 8009e92:	6023      	str	r3, [r4, #0]
 8009e94:	bd70      	pop	{r4, r5, r6, pc}
 8009e96:	46c0      	nop			@ (mov r8, r8)
 8009e98:	20000520 	.word	0x20000520

08009e9c <_lseek_r>:
 8009e9c:	b570      	push	{r4, r5, r6, lr}
 8009e9e:	0004      	movs	r4, r0
 8009ea0:	0008      	movs	r0, r1
 8009ea2:	0011      	movs	r1, r2
 8009ea4:	001a      	movs	r2, r3
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	4d05      	ldr	r5, [pc, #20]	@ (8009ec0 <_lseek_r+0x24>)
 8009eaa:	602b      	str	r3, [r5, #0]
 8009eac:	f7fb fa76 	bl	800539c <_lseek>
 8009eb0:	1c43      	adds	r3, r0, #1
 8009eb2:	d103      	bne.n	8009ebc <_lseek_r+0x20>
 8009eb4:	682b      	ldr	r3, [r5, #0]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d000      	beq.n	8009ebc <_lseek_r+0x20>
 8009eba:	6023      	str	r3, [r4, #0]
 8009ebc:	bd70      	pop	{r4, r5, r6, pc}
 8009ebe:	46c0      	nop			@ (mov r8, r8)
 8009ec0:	20000520 	.word	0x20000520

08009ec4 <_read_r>:
 8009ec4:	b570      	push	{r4, r5, r6, lr}
 8009ec6:	0004      	movs	r4, r0
 8009ec8:	0008      	movs	r0, r1
 8009eca:	0011      	movs	r1, r2
 8009ecc:	001a      	movs	r2, r3
 8009ece:	2300      	movs	r3, #0
 8009ed0:	4d05      	ldr	r5, [pc, #20]	@ (8009ee8 <_read_r+0x24>)
 8009ed2:	602b      	str	r3, [r5, #0]
 8009ed4:	f7fb fa08 	bl	80052e8 <_read>
 8009ed8:	1c43      	adds	r3, r0, #1
 8009eda:	d103      	bne.n	8009ee4 <_read_r+0x20>
 8009edc:	682b      	ldr	r3, [r5, #0]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d000      	beq.n	8009ee4 <_read_r+0x20>
 8009ee2:	6023      	str	r3, [r4, #0]
 8009ee4:	bd70      	pop	{r4, r5, r6, pc}
 8009ee6:	46c0      	nop			@ (mov r8, r8)
 8009ee8:	20000520 	.word	0x20000520

08009eec <_write_r>:
 8009eec:	b570      	push	{r4, r5, r6, lr}
 8009eee:	0004      	movs	r4, r0
 8009ef0:	0008      	movs	r0, r1
 8009ef2:	0011      	movs	r1, r2
 8009ef4:	001a      	movs	r2, r3
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	4d05      	ldr	r5, [pc, #20]	@ (8009f10 <_write_r+0x24>)
 8009efa:	602b      	str	r3, [r5, #0]
 8009efc:	f7fb fa11 	bl	8005322 <_write>
 8009f00:	1c43      	adds	r3, r0, #1
 8009f02:	d103      	bne.n	8009f0c <_write_r+0x20>
 8009f04:	682b      	ldr	r3, [r5, #0]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d000      	beq.n	8009f0c <_write_r+0x20>
 8009f0a:	6023      	str	r3, [r4, #0]
 8009f0c:	bd70      	pop	{r4, r5, r6, pc}
 8009f0e:	46c0      	nop			@ (mov r8, r8)
 8009f10:	20000520 	.word	0x20000520

08009f14 <__errno>:
 8009f14:	4b01      	ldr	r3, [pc, #4]	@ (8009f1c <__errno+0x8>)
 8009f16:	6818      	ldr	r0, [r3, #0]
 8009f18:	4770      	bx	lr
 8009f1a:	46c0      	nop			@ (mov r8, r8)
 8009f1c:	2000001c 	.word	0x2000001c

08009f20 <__libc_init_array>:
 8009f20:	b570      	push	{r4, r5, r6, lr}
 8009f22:	2600      	movs	r6, #0
 8009f24:	4c0c      	ldr	r4, [pc, #48]	@ (8009f58 <__libc_init_array+0x38>)
 8009f26:	4d0d      	ldr	r5, [pc, #52]	@ (8009f5c <__libc_init_array+0x3c>)
 8009f28:	1b64      	subs	r4, r4, r5
 8009f2a:	10a4      	asrs	r4, r4, #2
 8009f2c:	42a6      	cmp	r6, r4
 8009f2e:	d109      	bne.n	8009f44 <__libc_init_array+0x24>
 8009f30:	2600      	movs	r6, #0
 8009f32:	f001 ff5f 	bl	800bdf4 <_init>
 8009f36:	4c0a      	ldr	r4, [pc, #40]	@ (8009f60 <__libc_init_array+0x40>)
 8009f38:	4d0a      	ldr	r5, [pc, #40]	@ (8009f64 <__libc_init_array+0x44>)
 8009f3a:	1b64      	subs	r4, r4, r5
 8009f3c:	10a4      	asrs	r4, r4, #2
 8009f3e:	42a6      	cmp	r6, r4
 8009f40:	d105      	bne.n	8009f4e <__libc_init_array+0x2e>
 8009f42:	bd70      	pop	{r4, r5, r6, pc}
 8009f44:	00b3      	lsls	r3, r6, #2
 8009f46:	58eb      	ldr	r3, [r5, r3]
 8009f48:	4798      	blx	r3
 8009f4a:	3601      	adds	r6, #1
 8009f4c:	e7ee      	b.n	8009f2c <__libc_init_array+0xc>
 8009f4e:	00b3      	lsls	r3, r6, #2
 8009f50:	58eb      	ldr	r3, [r5, r3]
 8009f52:	4798      	blx	r3
 8009f54:	3601      	adds	r6, #1
 8009f56:	e7f2      	b.n	8009f3e <__libc_init_array+0x1e>
 8009f58:	0800c768 	.word	0x0800c768
 8009f5c:	0800c768 	.word	0x0800c768
 8009f60:	0800c76c 	.word	0x0800c76c
 8009f64:	0800c768 	.word	0x0800c768

08009f68 <__retarget_lock_init_recursive>:
 8009f68:	4770      	bx	lr

08009f6a <__retarget_lock_acquire_recursive>:
 8009f6a:	4770      	bx	lr

08009f6c <__retarget_lock_release_recursive>:
 8009f6c:	4770      	bx	lr

08009f6e <memchr>:
 8009f6e:	b2c9      	uxtb	r1, r1
 8009f70:	1882      	adds	r2, r0, r2
 8009f72:	4290      	cmp	r0, r2
 8009f74:	d101      	bne.n	8009f7a <memchr+0xc>
 8009f76:	2000      	movs	r0, #0
 8009f78:	4770      	bx	lr
 8009f7a:	7803      	ldrb	r3, [r0, #0]
 8009f7c:	428b      	cmp	r3, r1
 8009f7e:	d0fb      	beq.n	8009f78 <memchr+0xa>
 8009f80:	3001      	adds	r0, #1
 8009f82:	e7f6      	b.n	8009f72 <memchr+0x4>

08009f84 <quorem>:
 8009f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f86:	6902      	ldr	r2, [r0, #16]
 8009f88:	690f      	ldr	r7, [r1, #16]
 8009f8a:	b087      	sub	sp, #28
 8009f8c:	0006      	movs	r6, r0
 8009f8e:	000b      	movs	r3, r1
 8009f90:	2000      	movs	r0, #0
 8009f92:	9102      	str	r1, [sp, #8]
 8009f94:	42ba      	cmp	r2, r7
 8009f96:	db6d      	blt.n	800a074 <quorem+0xf0>
 8009f98:	3f01      	subs	r7, #1
 8009f9a:	00bc      	lsls	r4, r7, #2
 8009f9c:	3314      	adds	r3, #20
 8009f9e:	9305      	str	r3, [sp, #20]
 8009fa0:	191b      	adds	r3, r3, r4
 8009fa2:	9303      	str	r3, [sp, #12]
 8009fa4:	0033      	movs	r3, r6
 8009fa6:	3314      	adds	r3, #20
 8009fa8:	191c      	adds	r4, r3, r4
 8009faa:	9301      	str	r3, [sp, #4]
 8009fac:	6823      	ldr	r3, [r4, #0]
 8009fae:	9304      	str	r3, [sp, #16]
 8009fb0:	9b03      	ldr	r3, [sp, #12]
 8009fb2:	9804      	ldr	r0, [sp, #16]
 8009fb4:	681d      	ldr	r5, [r3, #0]
 8009fb6:	3501      	adds	r5, #1
 8009fb8:	0029      	movs	r1, r5
 8009fba:	f7f6 f8c1 	bl	8000140 <__udivsi3>
 8009fbe:	9b04      	ldr	r3, [sp, #16]
 8009fc0:	9000      	str	r0, [sp, #0]
 8009fc2:	42ab      	cmp	r3, r5
 8009fc4:	d32b      	bcc.n	800a01e <quorem+0x9a>
 8009fc6:	9b05      	ldr	r3, [sp, #20]
 8009fc8:	9d01      	ldr	r5, [sp, #4]
 8009fca:	469c      	mov	ip, r3
 8009fcc:	2300      	movs	r3, #0
 8009fce:	9305      	str	r3, [sp, #20]
 8009fd0:	9304      	str	r3, [sp, #16]
 8009fd2:	4662      	mov	r2, ip
 8009fd4:	ca08      	ldmia	r2!, {r3}
 8009fd6:	6828      	ldr	r0, [r5, #0]
 8009fd8:	4694      	mov	ip, r2
 8009fda:	9a00      	ldr	r2, [sp, #0]
 8009fdc:	b299      	uxth	r1, r3
 8009fde:	4351      	muls	r1, r2
 8009fe0:	9a05      	ldr	r2, [sp, #20]
 8009fe2:	0c1b      	lsrs	r3, r3, #16
 8009fe4:	1889      	adds	r1, r1, r2
 8009fe6:	9a00      	ldr	r2, [sp, #0]
 8009fe8:	4353      	muls	r3, r2
 8009fea:	0c0a      	lsrs	r2, r1, #16
 8009fec:	189b      	adds	r3, r3, r2
 8009fee:	0c1a      	lsrs	r2, r3, #16
 8009ff0:	b289      	uxth	r1, r1
 8009ff2:	9205      	str	r2, [sp, #20]
 8009ff4:	b282      	uxth	r2, r0
 8009ff6:	1a52      	subs	r2, r2, r1
 8009ff8:	9904      	ldr	r1, [sp, #16]
 8009ffa:	0c00      	lsrs	r0, r0, #16
 8009ffc:	1852      	adds	r2, r2, r1
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	1411      	asrs	r1, r2, #16
 800a002:	1ac3      	subs	r3, r0, r3
 800a004:	185b      	adds	r3, r3, r1
 800a006:	1419      	asrs	r1, r3, #16
 800a008:	b292      	uxth	r2, r2
 800a00a:	041b      	lsls	r3, r3, #16
 800a00c:	431a      	orrs	r2, r3
 800a00e:	9b03      	ldr	r3, [sp, #12]
 800a010:	9104      	str	r1, [sp, #16]
 800a012:	c504      	stmia	r5!, {r2}
 800a014:	4563      	cmp	r3, ip
 800a016:	d2dc      	bcs.n	8009fd2 <quorem+0x4e>
 800a018:	6823      	ldr	r3, [r4, #0]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d030      	beq.n	800a080 <quorem+0xfc>
 800a01e:	0030      	movs	r0, r6
 800a020:	9902      	ldr	r1, [sp, #8]
 800a022:	f001 f9c5 	bl	800b3b0 <__mcmp>
 800a026:	2800      	cmp	r0, #0
 800a028:	db23      	blt.n	800a072 <quorem+0xee>
 800a02a:	0034      	movs	r4, r6
 800a02c:	2500      	movs	r5, #0
 800a02e:	9902      	ldr	r1, [sp, #8]
 800a030:	3414      	adds	r4, #20
 800a032:	3114      	adds	r1, #20
 800a034:	6823      	ldr	r3, [r4, #0]
 800a036:	c901      	ldmia	r1!, {r0}
 800a038:	9302      	str	r3, [sp, #8]
 800a03a:	466b      	mov	r3, sp
 800a03c:	891b      	ldrh	r3, [r3, #8]
 800a03e:	b282      	uxth	r2, r0
 800a040:	1a9a      	subs	r2, r3, r2
 800a042:	9b02      	ldr	r3, [sp, #8]
 800a044:	1952      	adds	r2, r2, r5
 800a046:	0c00      	lsrs	r0, r0, #16
 800a048:	0c1b      	lsrs	r3, r3, #16
 800a04a:	1a1b      	subs	r3, r3, r0
 800a04c:	1410      	asrs	r0, r2, #16
 800a04e:	181b      	adds	r3, r3, r0
 800a050:	141d      	asrs	r5, r3, #16
 800a052:	b292      	uxth	r2, r2
 800a054:	041b      	lsls	r3, r3, #16
 800a056:	431a      	orrs	r2, r3
 800a058:	9b03      	ldr	r3, [sp, #12]
 800a05a:	c404      	stmia	r4!, {r2}
 800a05c:	428b      	cmp	r3, r1
 800a05e:	d2e9      	bcs.n	800a034 <quorem+0xb0>
 800a060:	9a01      	ldr	r2, [sp, #4]
 800a062:	00bb      	lsls	r3, r7, #2
 800a064:	18d3      	adds	r3, r2, r3
 800a066:	681a      	ldr	r2, [r3, #0]
 800a068:	2a00      	cmp	r2, #0
 800a06a:	d013      	beq.n	800a094 <quorem+0x110>
 800a06c:	9b00      	ldr	r3, [sp, #0]
 800a06e:	3301      	adds	r3, #1
 800a070:	9300      	str	r3, [sp, #0]
 800a072:	9800      	ldr	r0, [sp, #0]
 800a074:	b007      	add	sp, #28
 800a076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a078:	6823      	ldr	r3, [r4, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d104      	bne.n	800a088 <quorem+0x104>
 800a07e:	3f01      	subs	r7, #1
 800a080:	9b01      	ldr	r3, [sp, #4]
 800a082:	3c04      	subs	r4, #4
 800a084:	42a3      	cmp	r3, r4
 800a086:	d3f7      	bcc.n	800a078 <quorem+0xf4>
 800a088:	6137      	str	r7, [r6, #16]
 800a08a:	e7c8      	b.n	800a01e <quorem+0x9a>
 800a08c:	681a      	ldr	r2, [r3, #0]
 800a08e:	2a00      	cmp	r2, #0
 800a090:	d104      	bne.n	800a09c <quorem+0x118>
 800a092:	3f01      	subs	r7, #1
 800a094:	9a01      	ldr	r2, [sp, #4]
 800a096:	3b04      	subs	r3, #4
 800a098:	429a      	cmp	r2, r3
 800a09a:	d3f7      	bcc.n	800a08c <quorem+0x108>
 800a09c:	6137      	str	r7, [r6, #16]
 800a09e:	e7e5      	b.n	800a06c <quorem+0xe8>

0800a0a0 <_dtoa_r>:
 800a0a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0a2:	0014      	movs	r4, r2
 800a0a4:	001d      	movs	r5, r3
 800a0a6:	69c6      	ldr	r6, [r0, #28]
 800a0a8:	b09d      	sub	sp, #116	@ 0x74
 800a0aa:	940a      	str	r4, [sp, #40]	@ 0x28
 800a0ac:	950b      	str	r5, [sp, #44]	@ 0x2c
 800a0ae:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800a0b0:	9003      	str	r0, [sp, #12]
 800a0b2:	2e00      	cmp	r6, #0
 800a0b4:	d10f      	bne.n	800a0d6 <_dtoa_r+0x36>
 800a0b6:	2010      	movs	r0, #16
 800a0b8:	f000 fe30 	bl	800ad1c <malloc>
 800a0bc:	9b03      	ldr	r3, [sp, #12]
 800a0be:	1e02      	subs	r2, r0, #0
 800a0c0:	61d8      	str	r0, [r3, #28]
 800a0c2:	d104      	bne.n	800a0ce <_dtoa_r+0x2e>
 800a0c4:	21ef      	movs	r1, #239	@ 0xef
 800a0c6:	4bc7      	ldr	r3, [pc, #796]	@ (800a3e4 <_dtoa_r+0x344>)
 800a0c8:	48c7      	ldr	r0, [pc, #796]	@ (800a3e8 <_dtoa_r+0x348>)
 800a0ca:	f001 fb55 	bl	800b778 <__assert_func>
 800a0ce:	6046      	str	r6, [r0, #4]
 800a0d0:	6086      	str	r6, [r0, #8]
 800a0d2:	6006      	str	r6, [r0, #0]
 800a0d4:	60c6      	str	r6, [r0, #12]
 800a0d6:	9b03      	ldr	r3, [sp, #12]
 800a0d8:	69db      	ldr	r3, [r3, #28]
 800a0da:	6819      	ldr	r1, [r3, #0]
 800a0dc:	2900      	cmp	r1, #0
 800a0de:	d00b      	beq.n	800a0f8 <_dtoa_r+0x58>
 800a0e0:	685a      	ldr	r2, [r3, #4]
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	4093      	lsls	r3, r2
 800a0e6:	604a      	str	r2, [r1, #4]
 800a0e8:	608b      	str	r3, [r1, #8]
 800a0ea:	9803      	ldr	r0, [sp, #12]
 800a0ec:	f000 ff16 	bl	800af1c <_Bfree>
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	9b03      	ldr	r3, [sp, #12]
 800a0f4:	69db      	ldr	r3, [r3, #28]
 800a0f6:	601a      	str	r2, [r3, #0]
 800a0f8:	2d00      	cmp	r5, #0
 800a0fa:	da1e      	bge.n	800a13a <_dtoa_r+0x9a>
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	603b      	str	r3, [r7, #0]
 800a100:	006b      	lsls	r3, r5, #1
 800a102:	085b      	lsrs	r3, r3, #1
 800a104:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a106:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a108:	4bb8      	ldr	r3, [pc, #736]	@ (800a3ec <_dtoa_r+0x34c>)
 800a10a:	4ab8      	ldr	r2, [pc, #736]	@ (800a3ec <_dtoa_r+0x34c>)
 800a10c:	403b      	ands	r3, r7
 800a10e:	4293      	cmp	r3, r2
 800a110:	d116      	bne.n	800a140 <_dtoa_r+0xa0>
 800a112:	4bb7      	ldr	r3, [pc, #732]	@ (800a3f0 <_dtoa_r+0x350>)
 800a114:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a116:	6013      	str	r3, [r2, #0]
 800a118:	033b      	lsls	r3, r7, #12
 800a11a:	0b1b      	lsrs	r3, r3, #12
 800a11c:	4323      	orrs	r3, r4
 800a11e:	d101      	bne.n	800a124 <_dtoa_r+0x84>
 800a120:	f000 fd83 	bl	800ac2a <_dtoa_r+0xb8a>
 800a124:	4bb3      	ldr	r3, [pc, #716]	@ (800a3f4 <_dtoa_r+0x354>)
 800a126:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800a128:	9308      	str	r3, [sp, #32]
 800a12a:	2a00      	cmp	r2, #0
 800a12c:	d002      	beq.n	800a134 <_dtoa_r+0x94>
 800a12e:	4bb2      	ldr	r3, [pc, #712]	@ (800a3f8 <_dtoa_r+0x358>)
 800a130:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800a132:	6013      	str	r3, [r2, #0]
 800a134:	9808      	ldr	r0, [sp, #32]
 800a136:	b01d      	add	sp, #116	@ 0x74
 800a138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a13a:	2300      	movs	r3, #0
 800a13c:	603b      	str	r3, [r7, #0]
 800a13e:	e7e2      	b.n	800a106 <_dtoa_r+0x66>
 800a140:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a142:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a144:	9212      	str	r2, [sp, #72]	@ 0x48
 800a146:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a148:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a14a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a14c:	2200      	movs	r2, #0
 800a14e:	2300      	movs	r3, #0
 800a150:	f7f6 f97c 	bl	800044c <__aeabi_dcmpeq>
 800a154:	1e06      	subs	r6, r0, #0
 800a156:	d00b      	beq.n	800a170 <_dtoa_r+0xd0>
 800a158:	2301      	movs	r3, #1
 800a15a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a15c:	6013      	str	r3, [r2, #0]
 800a15e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800a160:	2b00      	cmp	r3, #0
 800a162:	d002      	beq.n	800a16a <_dtoa_r+0xca>
 800a164:	4ba5      	ldr	r3, [pc, #660]	@ (800a3fc <_dtoa_r+0x35c>)
 800a166:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800a168:	6013      	str	r3, [r2, #0]
 800a16a:	4ba5      	ldr	r3, [pc, #660]	@ (800a400 <_dtoa_r+0x360>)
 800a16c:	9308      	str	r3, [sp, #32]
 800a16e:	e7e1      	b.n	800a134 <_dtoa_r+0x94>
 800a170:	ab1a      	add	r3, sp, #104	@ 0x68
 800a172:	9301      	str	r3, [sp, #4]
 800a174:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a176:	9300      	str	r3, [sp, #0]
 800a178:	9803      	ldr	r0, [sp, #12]
 800a17a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a17c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a17e:	f001 f9cd 	bl	800b51c <__d2b>
 800a182:	007a      	lsls	r2, r7, #1
 800a184:	9005      	str	r0, [sp, #20]
 800a186:	0d52      	lsrs	r2, r2, #21
 800a188:	d100      	bne.n	800a18c <_dtoa_r+0xec>
 800a18a:	e07b      	b.n	800a284 <_dtoa_r+0x1e4>
 800a18c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a18e:	9618      	str	r6, [sp, #96]	@ 0x60
 800a190:	0319      	lsls	r1, r3, #12
 800a192:	4b9c      	ldr	r3, [pc, #624]	@ (800a404 <_dtoa_r+0x364>)
 800a194:	0b09      	lsrs	r1, r1, #12
 800a196:	430b      	orrs	r3, r1
 800a198:	499b      	ldr	r1, [pc, #620]	@ (800a408 <_dtoa_r+0x368>)
 800a19a:	1857      	adds	r7, r2, r1
 800a19c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a19e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a1a0:	0019      	movs	r1, r3
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	4b99      	ldr	r3, [pc, #612]	@ (800a40c <_dtoa_r+0x36c>)
 800a1a6:	f7f7 fd17 	bl	8001bd8 <__aeabi_dsub>
 800a1aa:	4a99      	ldr	r2, [pc, #612]	@ (800a410 <_dtoa_r+0x370>)
 800a1ac:	4b99      	ldr	r3, [pc, #612]	@ (800a414 <_dtoa_r+0x374>)
 800a1ae:	f7f7 fa4b 	bl	8001648 <__aeabi_dmul>
 800a1b2:	4a99      	ldr	r2, [pc, #612]	@ (800a418 <_dtoa_r+0x378>)
 800a1b4:	4b99      	ldr	r3, [pc, #612]	@ (800a41c <_dtoa_r+0x37c>)
 800a1b6:	f7f6 fa9f 	bl	80006f8 <__aeabi_dadd>
 800a1ba:	0004      	movs	r4, r0
 800a1bc:	0038      	movs	r0, r7
 800a1be:	000d      	movs	r5, r1
 800a1c0:	f7f8 f904 	bl	80023cc <__aeabi_i2d>
 800a1c4:	4a96      	ldr	r2, [pc, #600]	@ (800a420 <_dtoa_r+0x380>)
 800a1c6:	4b97      	ldr	r3, [pc, #604]	@ (800a424 <_dtoa_r+0x384>)
 800a1c8:	f7f7 fa3e 	bl	8001648 <__aeabi_dmul>
 800a1cc:	0002      	movs	r2, r0
 800a1ce:	000b      	movs	r3, r1
 800a1d0:	0020      	movs	r0, r4
 800a1d2:	0029      	movs	r1, r5
 800a1d4:	f7f6 fa90 	bl	80006f8 <__aeabi_dadd>
 800a1d8:	0004      	movs	r4, r0
 800a1da:	000d      	movs	r5, r1
 800a1dc:	f7f8 f8ba 	bl	8002354 <__aeabi_d2iz>
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	9004      	str	r0, [sp, #16]
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	0020      	movs	r0, r4
 800a1e8:	0029      	movs	r1, r5
 800a1ea:	f7f6 f935 	bl	8000458 <__aeabi_dcmplt>
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	d00b      	beq.n	800a20a <_dtoa_r+0x16a>
 800a1f2:	9804      	ldr	r0, [sp, #16]
 800a1f4:	f7f8 f8ea 	bl	80023cc <__aeabi_i2d>
 800a1f8:	002b      	movs	r3, r5
 800a1fa:	0022      	movs	r2, r4
 800a1fc:	f7f6 f926 	bl	800044c <__aeabi_dcmpeq>
 800a200:	4243      	negs	r3, r0
 800a202:	4158      	adcs	r0, r3
 800a204:	9b04      	ldr	r3, [sp, #16]
 800a206:	1a1b      	subs	r3, r3, r0
 800a208:	9304      	str	r3, [sp, #16]
 800a20a:	2301      	movs	r3, #1
 800a20c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a20e:	9b04      	ldr	r3, [sp, #16]
 800a210:	2b16      	cmp	r3, #22
 800a212:	d810      	bhi.n	800a236 <_dtoa_r+0x196>
 800a214:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a216:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a218:	9a04      	ldr	r2, [sp, #16]
 800a21a:	4b83      	ldr	r3, [pc, #524]	@ (800a428 <_dtoa_r+0x388>)
 800a21c:	00d2      	lsls	r2, r2, #3
 800a21e:	189b      	adds	r3, r3, r2
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	f7f6 f918 	bl	8000458 <__aeabi_dcmplt>
 800a228:	2800      	cmp	r0, #0
 800a22a:	d047      	beq.n	800a2bc <_dtoa_r+0x21c>
 800a22c:	9b04      	ldr	r3, [sp, #16]
 800a22e:	3b01      	subs	r3, #1
 800a230:	9304      	str	r3, [sp, #16]
 800a232:	2300      	movs	r3, #0
 800a234:	9315      	str	r3, [sp, #84]	@ 0x54
 800a236:	2200      	movs	r2, #0
 800a238:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800a23a:	9206      	str	r2, [sp, #24]
 800a23c:	1bdb      	subs	r3, r3, r7
 800a23e:	1e5a      	subs	r2, r3, #1
 800a240:	d53e      	bpl.n	800a2c0 <_dtoa_r+0x220>
 800a242:	2201      	movs	r2, #1
 800a244:	1ad3      	subs	r3, r2, r3
 800a246:	9306      	str	r3, [sp, #24]
 800a248:	2300      	movs	r3, #0
 800a24a:	930d      	str	r3, [sp, #52]	@ 0x34
 800a24c:	9b04      	ldr	r3, [sp, #16]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	db38      	blt.n	800a2c4 <_dtoa_r+0x224>
 800a252:	9a04      	ldr	r2, [sp, #16]
 800a254:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a256:	4694      	mov	ip, r2
 800a258:	4463      	add	r3, ip
 800a25a:	930d      	str	r3, [sp, #52]	@ 0x34
 800a25c:	2300      	movs	r3, #0
 800a25e:	9214      	str	r2, [sp, #80]	@ 0x50
 800a260:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a262:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a264:	2401      	movs	r4, #1
 800a266:	2b09      	cmp	r3, #9
 800a268:	d867      	bhi.n	800a33a <_dtoa_r+0x29a>
 800a26a:	2b05      	cmp	r3, #5
 800a26c:	dd02      	ble.n	800a274 <_dtoa_r+0x1d4>
 800a26e:	2400      	movs	r4, #0
 800a270:	3b04      	subs	r3, #4
 800a272:	9322      	str	r3, [sp, #136]	@ 0x88
 800a274:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a276:	1e98      	subs	r0, r3, #2
 800a278:	2803      	cmp	r0, #3
 800a27a:	d867      	bhi.n	800a34c <_dtoa_r+0x2ac>
 800a27c:	f7f5 ff4c 	bl	8000118 <__gnu_thumb1_case_uqi>
 800a280:	5b383a2b 	.word	0x5b383a2b
 800a284:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800a286:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800a288:	18f6      	adds	r6, r6, r3
 800a28a:	4b68      	ldr	r3, [pc, #416]	@ (800a42c <_dtoa_r+0x38c>)
 800a28c:	18f2      	adds	r2, r6, r3
 800a28e:	2a20      	cmp	r2, #32
 800a290:	dd0f      	ble.n	800a2b2 <_dtoa_r+0x212>
 800a292:	2340      	movs	r3, #64	@ 0x40
 800a294:	1a9b      	subs	r3, r3, r2
 800a296:	409f      	lsls	r7, r3
 800a298:	4b65      	ldr	r3, [pc, #404]	@ (800a430 <_dtoa_r+0x390>)
 800a29a:	0038      	movs	r0, r7
 800a29c:	18f3      	adds	r3, r6, r3
 800a29e:	40dc      	lsrs	r4, r3
 800a2a0:	4320      	orrs	r0, r4
 800a2a2:	f7f8 f8c1 	bl	8002428 <__aeabi_ui2d>
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	4b62      	ldr	r3, [pc, #392]	@ (800a434 <_dtoa_r+0x394>)
 800a2aa:	1e77      	subs	r7, r6, #1
 800a2ac:	18cb      	adds	r3, r1, r3
 800a2ae:	9218      	str	r2, [sp, #96]	@ 0x60
 800a2b0:	e776      	b.n	800a1a0 <_dtoa_r+0x100>
 800a2b2:	2320      	movs	r3, #32
 800a2b4:	0020      	movs	r0, r4
 800a2b6:	1a9b      	subs	r3, r3, r2
 800a2b8:	4098      	lsls	r0, r3
 800a2ba:	e7f2      	b.n	800a2a2 <_dtoa_r+0x202>
 800a2bc:	9015      	str	r0, [sp, #84]	@ 0x54
 800a2be:	e7ba      	b.n	800a236 <_dtoa_r+0x196>
 800a2c0:	920d      	str	r2, [sp, #52]	@ 0x34
 800a2c2:	e7c3      	b.n	800a24c <_dtoa_r+0x1ac>
 800a2c4:	9b06      	ldr	r3, [sp, #24]
 800a2c6:	9a04      	ldr	r2, [sp, #16]
 800a2c8:	1a9b      	subs	r3, r3, r2
 800a2ca:	9306      	str	r3, [sp, #24]
 800a2cc:	4253      	negs	r3, r2
 800a2ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	9314      	str	r3, [sp, #80]	@ 0x50
 800a2d4:	e7c5      	b.n	800a262 <_dtoa_r+0x1c2>
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	9310      	str	r3, [sp, #64]	@ 0x40
 800a2da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a2dc:	930e      	str	r3, [sp, #56]	@ 0x38
 800a2de:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	dc13      	bgt.n	800a30c <_dtoa_r+0x26c>
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	001a      	movs	r2, r3
 800a2e8:	930e      	str	r3, [sp, #56]	@ 0x38
 800a2ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2ec:	9223      	str	r2, [sp, #140]	@ 0x8c
 800a2ee:	e00d      	b.n	800a30c <_dtoa_r+0x26c>
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	e7f1      	b.n	800a2d8 <_dtoa_r+0x238>
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a2f8:	9310      	str	r3, [sp, #64]	@ 0x40
 800a2fa:	4694      	mov	ip, r2
 800a2fc:	9b04      	ldr	r3, [sp, #16]
 800a2fe:	4463      	add	r3, ip
 800a300:	930e      	str	r3, [sp, #56]	@ 0x38
 800a302:	3301      	adds	r3, #1
 800a304:	9309      	str	r3, [sp, #36]	@ 0x24
 800a306:	2b00      	cmp	r3, #0
 800a308:	dc00      	bgt.n	800a30c <_dtoa_r+0x26c>
 800a30a:	2301      	movs	r3, #1
 800a30c:	9a03      	ldr	r2, [sp, #12]
 800a30e:	2100      	movs	r1, #0
 800a310:	69d0      	ldr	r0, [r2, #28]
 800a312:	2204      	movs	r2, #4
 800a314:	0015      	movs	r5, r2
 800a316:	3514      	adds	r5, #20
 800a318:	429d      	cmp	r5, r3
 800a31a:	d91b      	bls.n	800a354 <_dtoa_r+0x2b4>
 800a31c:	6041      	str	r1, [r0, #4]
 800a31e:	9803      	ldr	r0, [sp, #12]
 800a320:	f000 fdb8 	bl	800ae94 <_Balloc>
 800a324:	9008      	str	r0, [sp, #32]
 800a326:	2800      	cmp	r0, #0
 800a328:	d117      	bne.n	800a35a <_dtoa_r+0x2ba>
 800a32a:	21b0      	movs	r1, #176	@ 0xb0
 800a32c:	4b42      	ldr	r3, [pc, #264]	@ (800a438 <_dtoa_r+0x398>)
 800a32e:	482e      	ldr	r0, [pc, #184]	@ (800a3e8 <_dtoa_r+0x348>)
 800a330:	9a08      	ldr	r2, [sp, #32]
 800a332:	31ff      	adds	r1, #255	@ 0xff
 800a334:	e6c9      	b.n	800a0ca <_dtoa_r+0x2a>
 800a336:	2301      	movs	r3, #1
 800a338:	e7dd      	b.n	800a2f6 <_dtoa_r+0x256>
 800a33a:	2300      	movs	r3, #0
 800a33c:	9410      	str	r4, [sp, #64]	@ 0x40
 800a33e:	9322      	str	r3, [sp, #136]	@ 0x88
 800a340:	3b01      	subs	r3, #1
 800a342:	930e      	str	r3, [sp, #56]	@ 0x38
 800a344:	9309      	str	r3, [sp, #36]	@ 0x24
 800a346:	2200      	movs	r2, #0
 800a348:	3313      	adds	r3, #19
 800a34a:	e7cf      	b.n	800a2ec <_dtoa_r+0x24c>
 800a34c:	2301      	movs	r3, #1
 800a34e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a350:	3b02      	subs	r3, #2
 800a352:	e7f6      	b.n	800a342 <_dtoa_r+0x2a2>
 800a354:	3101      	adds	r1, #1
 800a356:	0052      	lsls	r2, r2, #1
 800a358:	e7dc      	b.n	800a314 <_dtoa_r+0x274>
 800a35a:	9b03      	ldr	r3, [sp, #12]
 800a35c:	9a08      	ldr	r2, [sp, #32]
 800a35e:	69db      	ldr	r3, [r3, #28]
 800a360:	601a      	str	r2, [r3, #0]
 800a362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a364:	2b0e      	cmp	r3, #14
 800a366:	d900      	bls.n	800a36a <_dtoa_r+0x2ca>
 800a368:	e0d9      	b.n	800a51e <_dtoa_r+0x47e>
 800a36a:	2c00      	cmp	r4, #0
 800a36c:	d100      	bne.n	800a370 <_dtoa_r+0x2d0>
 800a36e:	e0d6      	b.n	800a51e <_dtoa_r+0x47e>
 800a370:	9b04      	ldr	r3, [sp, #16]
 800a372:	2b00      	cmp	r3, #0
 800a374:	dd64      	ble.n	800a440 <_dtoa_r+0x3a0>
 800a376:	210f      	movs	r1, #15
 800a378:	9a04      	ldr	r2, [sp, #16]
 800a37a:	4b2b      	ldr	r3, [pc, #172]	@ (800a428 <_dtoa_r+0x388>)
 800a37c:	400a      	ands	r2, r1
 800a37e:	00d2      	lsls	r2, r2, #3
 800a380:	189b      	adds	r3, r3, r2
 800a382:	681e      	ldr	r6, [r3, #0]
 800a384:	685f      	ldr	r7, [r3, #4]
 800a386:	9b04      	ldr	r3, [sp, #16]
 800a388:	2402      	movs	r4, #2
 800a38a:	111d      	asrs	r5, r3, #4
 800a38c:	05db      	lsls	r3, r3, #23
 800a38e:	d50a      	bpl.n	800a3a6 <_dtoa_r+0x306>
 800a390:	4b2a      	ldr	r3, [pc, #168]	@ (800a43c <_dtoa_r+0x39c>)
 800a392:	400d      	ands	r5, r1
 800a394:	6a1a      	ldr	r2, [r3, #32]
 800a396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a398:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a39a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a39c:	f7f6 fd10 	bl	8000dc0 <__aeabi_ddiv>
 800a3a0:	900a      	str	r0, [sp, #40]	@ 0x28
 800a3a2:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a3a4:	3401      	adds	r4, #1
 800a3a6:	4b25      	ldr	r3, [pc, #148]	@ (800a43c <_dtoa_r+0x39c>)
 800a3a8:	930c      	str	r3, [sp, #48]	@ 0x30
 800a3aa:	2d00      	cmp	r5, #0
 800a3ac:	d108      	bne.n	800a3c0 <_dtoa_r+0x320>
 800a3ae:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a3b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a3b2:	0032      	movs	r2, r6
 800a3b4:	003b      	movs	r3, r7
 800a3b6:	f7f6 fd03 	bl	8000dc0 <__aeabi_ddiv>
 800a3ba:	900a      	str	r0, [sp, #40]	@ 0x28
 800a3bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a3be:	e05a      	b.n	800a476 <_dtoa_r+0x3d6>
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	421d      	tst	r5, r3
 800a3c4:	d009      	beq.n	800a3da <_dtoa_r+0x33a>
 800a3c6:	18e4      	adds	r4, r4, r3
 800a3c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a3ca:	0030      	movs	r0, r6
 800a3cc:	681a      	ldr	r2, [r3, #0]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	0039      	movs	r1, r7
 800a3d2:	f7f7 f939 	bl	8001648 <__aeabi_dmul>
 800a3d6:	0006      	movs	r6, r0
 800a3d8:	000f      	movs	r7, r1
 800a3da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a3dc:	106d      	asrs	r5, r5, #1
 800a3de:	3308      	adds	r3, #8
 800a3e0:	e7e2      	b.n	800a3a8 <_dtoa_r+0x308>
 800a3e2:	46c0      	nop			@ (mov r8, r8)
 800a3e4:	0800c42d 	.word	0x0800c42d
 800a3e8:	0800c444 	.word	0x0800c444
 800a3ec:	7ff00000 	.word	0x7ff00000
 800a3f0:	0000270f 	.word	0x0000270f
 800a3f4:	0800c429 	.word	0x0800c429
 800a3f8:	0800c42c 	.word	0x0800c42c
 800a3fc:	0800c3fd 	.word	0x0800c3fd
 800a400:	0800c3fc 	.word	0x0800c3fc
 800a404:	3ff00000 	.word	0x3ff00000
 800a408:	fffffc01 	.word	0xfffffc01
 800a40c:	3ff80000 	.word	0x3ff80000
 800a410:	636f4361 	.word	0x636f4361
 800a414:	3fd287a7 	.word	0x3fd287a7
 800a418:	8b60c8b3 	.word	0x8b60c8b3
 800a41c:	3fc68a28 	.word	0x3fc68a28
 800a420:	509f79fb 	.word	0x509f79fb
 800a424:	3fd34413 	.word	0x3fd34413
 800a428:	0800c540 	.word	0x0800c540
 800a42c:	00000432 	.word	0x00000432
 800a430:	00000412 	.word	0x00000412
 800a434:	fe100000 	.word	0xfe100000
 800a438:	0800c49c 	.word	0x0800c49c
 800a43c:	0800c518 	.word	0x0800c518
 800a440:	9b04      	ldr	r3, [sp, #16]
 800a442:	2402      	movs	r4, #2
 800a444:	2b00      	cmp	r3, #0
 800a446:	d016      	beq.n	800a476 <_dtoa_r+0x3d6>
 800a448:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a44a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a44c:	220f      	movs	r2, #15
 800a44e:	425d      	negs	r5, r3
 800a450:	402a      	ands	r2, r5
 800a452:	4bd7      	ldr	r3, [pc, #860]	@ (800a7b0 <_dtoa_r+0x710>)
 800a454:	00d2      	lsls	r2, r2, #3
 800a456:	189b      	adds	r3, r3, r2
 800a458:	681a      	ldr	r2, [r3, #0]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	f7f7 f8f4 	bl	8001648 <__aeabi_dmul>
 800a460:	2701      	movs	r7, #1
 800a462:	2300      	movs	r3, #0
 800a464:	900a      	str	r0, [sp, #40]	@ 0x28
 800a466:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a468:	4ed2      	ldr	r6, [pc, #840]	@ (800a7b4 <_dtoa_r+0x714>)
 800a46a:	112d      	asrs	r5, r5, #4
 800a46c:	2d00      	cmp	r5, #0
 800a46e:	d000      	beq.n	800a472 <_dtoa_r+0x3d2>
 800a470:	e0ba      	b.n	800a5e8 <_dtoa_r+0x548>
 800a472:	2b00      	cmp	r3, #0
 800a474:	d1a1      	bne.n	800a3ba <_dtoa_r+0x31a>
 800a476:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a478:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a47a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d100      	bne.n	800a482 <_dtoa_r+0x3e2>
 800a480:	e0bd      	b.n	800a5fe <_dtoa_r+0x55e>
 800a482:	2200      	movs	r2, #0
 800a484:	0030      	movs	r0, r6
 800a486:	0039      	movs	r1, r7
 800a488:	4bcb      	ldr	r3, [pc, #812]	@ (800a7b8 <_dtoa_r+0x718>)
 800a48a:	f7f5 ffe5 	bl	8000458 <__aeabi_dcmplt>
 800a48e:	2800      	cmp	r0, #0
 800a490:	d100      	bne.n	800a494 <_dtoa_r+0x3f4>
 800a492:	e0b4      	b.n	800a5fe <_dtoa_r+0x55e>
 800a494:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a496:	2b00      	cmp	r3, #0
 800a498:	d100      	bne.n	800a49c <_dtoa_r+0x3fc>
 800a49a:	e0b0      	b.n	800a5fe <_dtoa_r+0x55e>
 800a49c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	dd39      	ble.n	800a516 <_dtoa_r+0x476>
 800a4a2:	9b04      	ldr	r3, [sp, #16]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	930c      	str	r3, [sp, #48]	@ 0x30
 800a4aa:	0030      	movs	r0, r6
 800a4ac:	4bc3      	ldr	r3, [pc, #780]	@ (800a7bc <_dtoa_r+0x71c>)
 800a4ae:	0039      	movs	r1, r7
 800a4b0:	f7f7 f8ca 	bl	8001648 <__aeabi_dmul>
 800a4b4:	900a      	str	r0, [sp, #40]	@ 0x28
 800a4b6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a4b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4ba:	3401      	adds	r4, #1
 800a4bc:	0020      	movs	r0, r4
 800a4be:	9311      	str	r3, [sp, #68]	@ 0x44
 800a4c0:	f7f7 ff84 	bl	80023cc <__aeabi_i2d>
 800a4c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a4c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4c8:	f7f7 f8be 	bl	8001648 <__aeabi_dmul>
 800a4cc:	4bbc      	ldr	r3, [pc, #752]	@ (800a7c0 <_dtoa_r+0x720>)
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f7f6 f912 	bl	80006f8 <__aeabi_dadd>
 800a4d4:	4bbb      	ldr	r3, [pc, #748]	@ (800a7c4 <_dtoa_r+0x724>)
 800a4d6:	0006      	movs	r6, r0
 800a4d8:	18cf      	adds	r7, r1, r3
 800a4da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d000      	beq.n	800a4e2 <_dtoa_r+0x442>
 800a4e0:	e091      	b.n	800a606 <_dtoa_r+0x566>
 800a4e2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a4e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	4bb7      	ldr	r3, [pc, #732]	@ (800a7c8 <_dtoa_r+0x728>)
 800a4ea:	f7f7 fb75 	bl	8001bd8 <__aeabi_dsub>
 800a4ee:	0032      	movs	r2, r6
 800a4f0:	003b      	movs	r3, r7
 800a4f2:	0004      	movs	r4, r0
 800a4f4:	000d      	movs	r5, r1
 800a4f6:	f7f5 ffc3 	bl	8000480 <__aeabi_dcmpgt>
 800a4fa:	2800      	cmp	r0, #0
 800a4fc:	d000      	beq.n	800a500 <_dtoa_r+0x460>
 800a4fe:	e29d      	b.n	800aa3c <_dtoa_r+0x99c>
 800a500:	2180      	movs	r1, #128	@ 0x80
 800a502:	0609      	lsls	r1, r1, #24
 800a504:	187b      	adds	r3, r7, r1
 800a506:	0032      	movs	r2, r6
 800a508:	0020      	movs	r0, r4
 800a50a:	0029      	movs	r1, r5
 800a50c:	f7f5 ffa4 	bl	8000458 <__aeabi_dcmplt>
 800a510:	2800      	cmp	r0, #0
 800a512:	d000      	beq.n	800a516 <_dtoa_r+0x476>
 800a514:	e130      	b.n	800a778 <_dtoa_r+0x6d8>
 800a516:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a518:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800a51a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a51c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a51e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800a520:	2b00      	cmp	r3, #0
 800a522:	da00      	bge.n	800a526 <_dtoa_r+0x486>
 800a524:	e177      	b.n	800a816 <_dtoa_r+0x776>
 800a526:	9a04      	ldr	r2, [sp, #16]
 800a528:	2a0e      	cmp	r2, #14
 800a52a:	dd00      	ble.n	800a52e <_dtoa_r+0x48e>
 800a52c:	e173      	b.n	800a816 <_dtoa_r+0x776>
 800a52e:	4ba0      	ldr	r3, [pc, #640]	@ (800a7b0 <_dtoa_r+0x710>)
 800a530:	00d2      	lsls	r2, r2, #3
 800a532:	189b      	adds	r3, r3, r2
 800a534:	685c      	ldr	r4, [r3, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	9306      	str	r3, [sp, #24]
 800a53a:	9407      	str	r4, [sp, #28]
 800a53c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a53e:	2b00      	cmp	r3, #0
 800a540:	da03      	bge.n	800a54a <_dtoa_r+0x4aa>
 800a542:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a544:	2b00      	cmp	r3, #0
 800a546:	dc00      	bgt.n	800a54a <_dtoa_r+0x4aa>
 800a548:	e106      	b.n	800a758 <_dtoa_r+0x6b8>
 800a54a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a54c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a54e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a550:	9d08      	ldr	r5, [sp, #32]
 800a552:	3b01      	subs	r3, #1
 800a554:	195b      	adds	r3, r3, r5
 800a556:	930a      	str	r3, [sp, #40]	@ 0x28
 800a558:	9a06      	ldr	r2, [sp, #24]
 800a55a:	9b07      	ldr	r3, [sp, #28]
 800a55c:	0030      	movs	r0, r6
 800a55e:	0039      	movs	r1, r7
 800a560:	f7f6 fc2e 	bl	8000dc0 <__aeabi_ddiv>
 800a564:	f7f7 fef6 	bl	8002354 <__aeabi_d2iz>
 800a568:	9009      	str	r0, [sp, #36]	@ 0x24
 800a56a:	f7f7 ff2f 	bl	80023cc <__aeabi_i2d>
 800a56e:	9a06      	ldr	r2, [sp, #24]
 800a570:	9b07      	ldr	r3, [sp, #28]
 800a572:	f7f7 f869 	bl	8001648 <__aeabi_dmul>
 800a576:	0002      	movs	r2, r0
 800a578:	000b      	movs	r3, r1
 800a57a:	0030      	movs	r0, r6
 800a57c:	0039      	movs	r1, r7
 800a57e:	f7f7 fb2b 	bl	8001bd8 <__aeabi_dsub>
 800a582:	002b      	movs	r3, r5
 800a584:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a586:	3501      	adds	r5, #1
 800a588:	3230      	adds	r2, #48	@ 0x30
 800a58a:	701a      	strb	r2, [r3, #0]
 800a58c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a58e:	002c      	movs	r4, r5
 800a590:	429a      	cmp	r2, r3
 800a592:	d000      	beq.n	800a596 <_dtoa_r+0x4f6>
 800a594:	e131      	b.n	800a7fa <_dtoa_r+0x75a>
 800a596:	0002      	movs	r2, r0
 800a598:	000b      	movs	r3, r1
 800a59a:	f7f6 f8ad 	bl	80006f8 <__aeabi_dadd>
 800a59e:	9a06      	ldr	r2, [sp, #24]
 800a5a0:	9b07      	ldr	r3, [sp, #28]
 800a5a2:	0006      	movs	r6, r0
 800a5a4:	000f      	movs	r7, r1
 800a5a6:	f7f5 ff6b 	bl	8000480 <__aeabi_dcmpgt>
 800a5aa:	2800      	cmp	r0, #0
 800a5ac:	d000      	beq.n	800a5b0 <_dtoa_r+0x510>
 800a5ae:	e10f      	b.n	800a7d0 <_dtoa_r+0x730>
 800a5b0:	9a06      	ldr	r2, [sp, #24]
 800a5b2:	9b07      	ldr	r3, [sp, #28]
 800a5b4:	0030      	movs	r0, r6
 800a5b6:	0039      	movs	r1, r7
 800a5b8:	f7f5 ff48 	bl	800044c <__aeabi_dcmpeq>
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	d003      	beq.n	800a5c8 <_dtoa_r+0x528>
 800a5c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5c2:	07dd      	lsls	r5, r3, #31
 800a5c4:	d500      	bpl.n	800a5c8 <_dtoa_r+0x528>
 800a5c6:	e103      	b.n	800a7d0 <_dtoa_r+0x730>
 800a5c8:	9905      	ldr	r1, [sp, #20]
 800a5ca:	9803      	ldr	r0, [sp, #12]
 800a5cc:	f000 fca6 	bl	800af1c <_Bfree>
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	7023      	strb	r3, [r4, #0]
 800a5d4:	9b04      	ldr	r3, [sp, #16]
 800a5d6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a5d8:	3301      	adds	r3, #1
 800a5da:	6013      	str	r3, [r2, #0]
 800a5dc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d100      	bne.n	800a5e4 <_dtoa_r+0x544>
 800a5e2:	e5a7      	b.n	800a134 <_dtoa_r+0x94>
 800a5e4:	601c      	str	r4, [r3, #0]
 800a5e6:	e5a5      	b.n	800a134 <_dtoa_r+0x94>
 800a5e8:	423d      	tst	r5, r7
 800a5ea:	d005      	beq.n	800a5f8 <_dtoa_r+0x558>
 800a5ec:	6832      	ldr	r2, [r6, #0]
 800a5ee:	6873      	ldr	r3, [r6, #4]
 800a5f0:	f7f7 f82a 	bl	8001648 <__aeabi_dmul>
 800a5f4:	003b      	movs	r3, r7
 800a5f6:	3401      	adds	r4, #1
 800a5f8:	106d      	asrs	r5, r5, #1
 800a5fa:	3608      	adds	r6, #8
 800a5fc:	e736      	b.n	800a46c <_dtoa_r+0x3cc>
 800a5fe:	9b04      	ldr	r3, [sp, #16]
 800a600:	930c      	str	r3, [sp, #48]	@ 0x30
 800a602:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a604:	e75a      	b.n	800a4bc <_dtoa_r+0x41c>
 800a606:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a608:	4b69      	ldr	r3, [pc, #420]	@ (800a7b0 <_dtoa_r+0x710>)
 800a60a:	3a01      	subs	r2, #1
 800a60c:	00d2      	lsls	r2, r2, #3
 800a60e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800a610:	189b      	adds	r3, r3, r2
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	2900      	cmp	r1, #0
 800a618:	d04c      	beq.n	800a6b4 <_dtoa_r+0x614>
 800a61a:	2000      	movs	r0, #0
 800a61c:	496b      	ldr	r1, [pc, #428]	@ (800a7cc <_dtoa_r+0x72c>)
 800a61e:	f7f6 fbcf 	bl	8000dc0 <__aeabi_ddiv>
 800a622:	0032      	movs	r2, r6
 800a624:	003b      	movs	r3, r7
 800a626:	f7f7 fad7 	bl	8001bd8 <__aeabi_dsub>
 800a62a:	9a08      	ldr	r2, [sp, #32]
 800a62c:	0006      	movs	r6, r0
 800a62e:	4694      	mov	ip, r2
 800a630:	000f      	movs	r7, r1
 800a632:	9b08      	ldr	r3, [sp, #32]
 800a634:	9316      	str	r3, [sp, #88]	@ 0x58
 800a636:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a638:	4463      	add	r3, ip
 800a63a:	9311      	str	r3, [sp, #68]	@ 0x44
 800a63c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a63e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a640:	f7f7 fe88 	bl	8002354 <__aeabi_d2iz>
 800a644:	0005      	movs	r5, r0
 800a646:	f7f7 fec1 	bl	80023cc <__aeabi_i2d>
 800a64a:	0002      	movs	r2, r0
 800a64c:	000b      	movs	r3, r1
 800a64e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a650:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a652:	f7f7 fac1 	bl	8001bd8 <__aeabi_dsub>
 800a656:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a658:	3530      	adds	r5, #48	@ 0x30
 800a65a:	1c5c      	adds	r4, r3, #1
 800a65c:	701d      	strb	r5, [r3, #0]
 800a65e:	0032      	movs	r2, r6
 800a660:	003b      	movs	r3, r7
 800a662:	900a      	str	r0, [sp, #40]	@ 0x28
 800a664:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a666:	f7f5 fef7 	bl	8000458 <__aeabi_dcmplt>
 800a66a:	2800      	cmp	r0, #0
 800a66c:	d16a      	bne.n	800a744 <_dtoa_r+0x6a4>
 800a66e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a670:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a672:	2000      	movs	r0, #0
 800a674:	4950      	ldr	r1, [pc, #320]	@ (800a7b8 <_dtoa_r+0x718>)
 800a676:	f7f7 faaf 	bl	8001bd8 <__aeabi_dsub>
 800a67a:	0032      	movs	r2, r6
 800a67c:	003b      	movs	r3, r7
 800a67e:	f7f5 feeb 	bl	8000458 <__aeabi_dcmplt>
 800a682:	2800      	cmp	r0, #0
 800a684:	d000      	beq.n	800a688 <_dtoa_r+0x5e8>
 800a686:	e0a5      	b.n	800a7d4 <_dtoa_r+0x734>
 800a688:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a68a:	42a3      	cmp	r3, r4
 800a68c:	d100      	bne.n	800a690 <_dtoa_r+0x5f0>
 800a68e:	e742      	b.n	800a516 <_dtoa_r+0x476>
 800a690:	2200      	movs	r2, #0
 800a692:	0030      	movs	r0, r6
 800a694:	0039      	movs	r1, r7
 800a696:	4b49      	ldr	r3, [pc, #292]	@ (800a7bc <_dtoa_r+0x71c>)
 800a698:	f7f6 ffd6 	bl	8001648 <__aeabi_dmul>
 800a69c:	2200      	movs	r2, #0
 800a69e:	0006      	movs	r6, r0
 800a6a0:	000f      	movs	r7, r1
 800a6a2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a6a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a6a6:	4b45      	ldr	r3, [pc, #276]	@ (800a7bc <_dtoa_r+0x71c>)
 800a6a8:	f7f6 ffce 	bl	8001648 <__aeabi_dmul>
 800a6ac:	9416      	str	r4, [sp, #88]	@ 0x58
 800a6ae:	900a      	str	r0, [sp, #40]	@ 0x28
 800a6b0:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a6b2:	e7c3      	b.n	800a63c <_dtoa_r+0x59c>
 800a6b4:	0030      	movs	r0, r6
 800a6b6:	0039      	movs	r1, r7
 800a6b8:	f7f6 ffc6 	bl	8001648 <__aeabi_dmul>
 800a6bc:	9d08      	ldr	r5, [sp, #32]
 800a6be:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a6c0:	002b      	movs	r3, r5
 800a6c2:	4694      	mov	ip, r2
 800a6c4:	9016      	str	r0, [sp, #88]	@ 0x58
 800a6c6:	9117      	str	r1, [sp, #92]	@ 0x5c
 800a6c8:	4463      	add	r3, ip
 800a6ca:	9319      	str	r3, [sp, #100]	@ 0x64
 800a6cc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a6ce:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a6d0:	f7f7 fe40 	bl	8002354 <__aeabi_d2iz>
 800a6d4:	0004      	movs	r4, r0
 800a6d6:	f7f7 fe79 	bl	80023cc <__aeabi_i2d>
 800a6da:	000b      	movs	r3, r1
 800a6dc:	0002      	movs	r2, r0
 800a6de:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a6e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a6e2:	f7f7 fa79 	bl	8001bd8 <__aeabi_dsub>
 800a6e6:	3430      	adds	r4, #48	@ 0x30
 800a6e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a6ea:	702c      	strb	r4, [r5, #0]
 800a6ec:	3501      	adds	r5, #1
 800a6ee:	0006      	movs	r6, r0
 800a6f0:	000f      	movs	r7, r1
 800a6f2:	42ab      	cmp	r3, r5
 800a6f4:	d129      	bne.n	800a74a <_dtoa_r+0x6aa>
 800a6f6:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800a6f8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800a6fa:	9b08      	ldr	r3, [sp, #32]
 800a6fc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800a6fe:	469c      	mov	ip, r3
 800a700:	2200      	movs	r2, #0
 800a702:	4b32      	ldr	r3, [pc, #200]	@ (800a7cc <_dtoa_r+0x72c>)
 800a704:	4464      	add	r4, ip
 800a706:	f7f5 fff7 	bl	80006f8 <__aeabi_dadd>
 800a70a:	0002      	movs	r2, r0
 800a70c:	000b      	movs	r3, r1
 800a70e:	0030      	movs	r0, r6
 800a710:	0039      	movs	r1, r7
 800a712:	f7f5 feb5 	bl	8000480 <__aeabi_dcmpgt>
 800a716:	2800      	cmp	r0, #0
 800a718:	d15c      	bne.n	800a7d4 <_dtoa_r+0x734>
 800a71a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a71c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a71e:	2000      	movs	r0, #0
 800a720:	492a      	ldr	r1, [pc, #168]	@ (800a7cc <_dtoa_r+0x72c>)
 800a722:	f7f7 fa59 	bl	8001bd8 <__aeabi_dsub>
 800a726:	0002      	movs	r2, r0
 800a728:	000b      	movs	r3, r1
 800a72a:	0030      	movs	r0, r6
 800a72c:	0039      	movs	r1, r7
 800a72e:	f7f5 fe93 	bl	8000458 <__aeabi_dcmplt>
 800a732:	2800      	cmp	r0, #0
 800a734:	d100      	bne.n	800a738 <_dtoa_r+0x698>
 800a736:	e6ee      	b.n	800a516 <_dtoa_r+0x476>
 800a738:	0023      	movs	r3, r4
 800a73a:	3c01      	subs	r4, #1
 800a73c:	7822      	ldrb	r2, [r4, #0]
 800a73e:	2a30      	cmp	r2, #48	@ 0x30
 800a740:	d0fa      	beq.n	800a738 <_dtoa_r+0x698>
 800a742:	001c      	movs	r4, r3
 800a744:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a746:	9304      	str	r3, [sp, #16]
 800a748:	e73e      	b.n	800a5c8 <_dtoa_r+0x528>
 800a74a:	2200      	movs	r2, #0
 800a74c:	4b1b      	ldr	r3, [pc, #108]	@ (800a7bc <_dtoa_r+0x71c>)
 800a74e:	f7f6 ff7b 	bl	8001648 <__aeabi_dmul>
 800a752:	900a      	str	r0, [sp, #40]	@ 0x28
 800a754:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a756:	e7b9      	b.n	800a6cc <_dtoa_r+0x62c>
 800a758:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d10c      	bne.n	800a778 <_dtoa_r+0x6d8>
 800a75e:	9806      	ldr	r0, [sp, #24]
 800a760:	9907      	ldr	r1, [sp, #28]
 800a762:	2200      	movs	r2, #0
 800a764:	4b18      	ldr	r3, [pc, #96]	@ (800a7c8 <_dtoa_r+0x728>)
 800a766:	f7f6 ff6f 	bl	8001648 <__aeabi_dmul>
 800a76a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a76c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a76e:	f7f5 fe91 	bl	8000494 <__aeabi_dcmpge>
 800a772:	2800      	cmp	r0, #0
 800a774:	d100      	bne.n	800a778 <_dtoa_r+0x6d8>
 800a776:	e164      	b.n	800aa42 <_dtoa_r+0x9a2>
 800a778:	2600      	movs	r6, #0
 800a77a:	0037      	movs	r7, r6
 800a77c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a77e:	9c08      	ldr	r4, [sp, #32]
 800a780:	43db      	mvns	r3, r3
 800a782:	930c      	str	r3, [sp, #48]	@ 0x30
 800a784:	2300      	movs	r3, #0
 800a786:	9304      	str	r3, [sp, #16]
 800a788:	0031      	movs	r1, r6
 800a78a:	9803      	ldr	r0, [sp, #12]
 800a78c:	f000 fbc6 	bl	800af1c <_Bfree>
 800a790:	2f00      	cmp	r7, #0
 800a792:	d0d7      	beq.n	800a744 <_dtoa_r+0x6a4>
 800a794:	9b04      	ldr	r3, [sp, #16]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d005      	beq.n	800a7a6 <_dtoa_r+0x706>
 800a79a:	42bb      	cmp	r3, r7
 800a79c:	d003      	beq.n	800a7a6 <_dtoa_r+0x706>
 800a79e:	0019      	movs	r1, r3
 800a7a0:	9803      	ldr	r0, [sp, #12]
 800a7a2:	f000 fbbb 	bl	800af1c <_Bfree>
 800a7a6:	0039      	movs	r1, r7
 800a7a8:	9803      	ldr	r0, [sp, #12]
 800a7aa:	f000 fbb7 	bl	800af1c <_Bfree>
 800a7ae:	e7c9      	b.n	800a744 <_dtoa_r+0x6a4>
 800a7b0:	0800c540 	.word	0x0800c540
 800a7b4:	0800c518 	.word	0x0800c518
 800a7b8:	3ff00000 	.word	0x3ff00000
 800a7bc:	40240000 	.word	0x40240000
 800a7c0:	401c0000 	.word	0x401c0000
 800a7c4:	fcc00000 	.word	0xfcc00000
 800a7c8:	40140000 	.word	0x40140000
 800a7cc:	3fe00000 	.word	0x3fe00000
 800a7d0:	9b04      	ldr	r3, [sp, #16]
 800a7d2:	930c      	str	r3, [sp, #48]	@ 0x30
 800a7d4:	0023      	movs	r3, r4
 800a7d6:	001c      	movs	r4, r3
 800a7d8:	3b01      	subs	r3, #1
 800a7da:	781a      	ldrb	r2, [r3, #0]
 800a7dc:	2a39      	cmp	r2, #57	@ 0x39
 800a7de:	d108      	bne.n	800a7f2 <_dtoa_r+0x752>
 800a7e0:	9a08      	ldr	r2, [sp, #32]
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d1f7      	bne.n	800a7d6 <_dtoa_r+0x736>
 800a7e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a7e8:	9908      	ldr	r1, [sp, #32]
 800a7ea:	3201      	adds	r2, #1
 800a7ec:	920c      	str	r2, [sp, #48]	@ 0x30
 800a7ee:	2230      	movs	r2, #48	@ 0x30
 800a7f0:	700a      	strb	r2, [r1, #0]
 800a7f2:	781a      	ldrb	r2, [r3, #0]
 800a7f4:	3201      	adds	r2, #1
 800a7f6:	701a      	strb	r2, [r3, #0]
 800a7f8:	e7a4      	b.n	800a744 <_dtoa_r+0x6a4>
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	4bc6      	ldr	r3, [pc, #792]	@ (800ab18 <_dtoa_r+0xa78>)
 800a7fe:	f7f6 ff23 	bl	8001648 <__aeabi_dmul>
 800a802:	2200      	movs	r2, #0
 800a804:	2300      	movs	r3, #0
 800a806:	0006      	movs	r6, r0
 800a808:	000f      	movs	r7, r1
 800a80a:	f7f5 fe1f 	bl	800044c <__aeabi_dcmpeq>
 800a80e:	2800      	cmp	r0, #0
 800a810:	d100      	bne.n	800a814 <_dtoa_r+0x774>
 800a812:	e6a1      	b.n	800a558 <_dtoa_r+0x4b8>
 800a814:	e6d8      	b.n	800a5c8 <_dtoa_r+0x528>
 800a816:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800a818:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800a81a:	9c06      	ldr	r4, [sp, #24]
 800a81c:	2f00      	cmp	r7, #0
 800a81e:	d014      	beq.n	800a84a <_dtoa_r+0x7aa>
 800a820:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a822:	2a01      	cmp	r2, #1
 800a824:	dd00      	ble.n	800a828 <_dtoa_r+0x788>
 800a826:	e0c8      	b.n	800a9ba <_dtoa_r+0x91a>
 800a828:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800a82a:	2a00      	cmp	r2, #0
 800a82c:	d100      	bne.n	800a830 <_dtoa_r+0x790>
 800a82e:	e0be      	b.n	800a9ae <_dtoa_r+0x90e>
 800a830:	4aba      	ldr	r2, [pc, #744]	@ (800ab1c <_dtoa_r+0xa7c>)
 800a832:	189b      	adds	r3, r3, r2
 800a834:	9a06      	ldr	r2, [sp, #24]
 800a836:	2101      	movs	r1, #1
 800a838:	18d2      	adds	r2, r2, r3
 800a83a:	9206      	str	r2, [sp, #24]
 800a83c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a83e:	9803      	ldr	r0, [sp, #12]
 800a840:	18d3      	adds	r3, r2, r3
 800a842:	930d      	str	r3, [sp, #52]	@ 0x34
 800a844:	f000 fc22 	bl	800b08c <__i2b>
 800a848:	0007      	movs	r7, r0
 800a84a:	2c00      	cmp	r4, #0
 800a84c:	d00e      	beq.n	800a86c <_dtoa_r+0x7cc>
 800a84e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a850:	2b00      	cmp	r3, #0
 800a852:	dd0b      	ble.n	800a86c <_dtoa_r+0x7cc>
 800a854:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a856:	0023      	movs	r3, r4
 800a858:	4294      	cmp	r4, r2
 800a85a:	dd00      	ble.n	800a85e <_dtoa_r+0x7be>
 800a85c:	0013      	movs	r3, r2
 800a85e:	9a06      	ldr	r2, [sp, #24]
 800a860:	1ae4      	subs	r4, r4, r3
 800a862:	1ad2      	subs	r2, r2, r3
 800a864:	9206      	str	r2, [sp, #24]
 800a866:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a868:	1ad3      	subs	r3, r2, r3
 800a86a:	930d      	str	r3, [sp, #52]	@ 0x34
 800a86c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d01f      	beq.n	800a8b2 <_dtoa_r+0x812>
 800a872:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a874:	2b00      	cmp	r3, #0
 800a876:	d100      	bne.n	800a87a <_dtoa_r+0x7da>
 800a878:	e0b5      	b.n	800a9e6 <_dtoa_r+0x946>
 800a87a:	2d00      	cmp	r5, #0
 800a87c:	d010      	beq.n	800a8a0 <_dtoa_r+0x800>
 800a87e:	0039      	movs	r1, r7
 800a880:	002a      	movs	r2, r5
 800a882:	9803      	ldr	r0, [sp, #12]
 800a884:	f000 fccc 	bl	800b220 <__pow5mult>
 800a888:	9a05      	ldr	r2, [sp, #20]
 800a88a:	0001      	movs	r1, r0
 800a88c:	0007      	movs	r7, r0
 800a88e:	9803      	ldr	r0, [sp, #12]
 800a890:	f000 fc14 	bl	800b0bc <__multiply>
 800a894:	0006      	movs	r6, r0
 800a896:	9905      	ldr	r1, [sp, #20]
 800a898:	9803      	ldr	r0, [sp, #12]
 800a89a:	f000 fb3f 	bl	800af1c <_Bfree>
 800a89e:	9605      	str	r6, [sp, #20]
 800a8a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8a2:	1b5a      	subs	r2, r3, r5
 800a8a4:	42ab      	cmp	r3, r5
 800a8a6:	d004      	beq.n	800a8b2 <_dtoa_r+0x812>
 800a8a8:	9905      	ldr	r1, [sp, #20]
 800a8aa:	9803      	ldr	r0, [sp, #12]
 800a8ac:	f000 fcb8 	bl	800b220 <__pow5mult>
 800a8b0:	9005      	str	r0, [sp, #20]
 800a8b2:	2101      	movs	r1, #1
 800a8b4:	9803      	ldr	r0, [sp, #12]
 800a8b6:	f000 fbe9 	bl	800b08c <__i2b>
 800a8ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a8bc:	0006      	movs	r6, r0
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d100      	bne.n	800a8c4 <_dtoa_r+0x824>
 800a8c2:	e1bc      	b.n	800ac3e <_dtoa_r+0xb9e>
 800a8c4:	001a      	movs	r2, r3
 800a8c6:	0001      	movs	r1, r0
 800a8c8:	9803      	ldr	r0, [sp, #12]
 800a8ca:	f000 fca9 	bl	800b220 <__pow5mult>
 800a8ce:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a8d0:	0006      	movs	r6, r0
 800a8d2:	2500      	movs	r5, #0
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	dc16      	bgt.n	800a906 <_dtoa_r+0x866>
 800a8d8:	2500      	movs	r5, #0
 800a8da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8dc:	42ab      	cmp	r3, r5
 800a8de:	d10e      	bne.n	800a8fe <_dtoa_r+0x85e>
 800a8e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a8e2:	031b      	lsls	r3, r3, #12
 800a8e4:	42ab      	cmp	r3, r5
 800a8e6:	d10a      	bne.n	800a8fe <_dtoa_r+0x85e>
 800a8e8:	4b8d      	ldr	r3, [pc, #564]	@ (800ab20 <_dtoa_r+0xa80>)
 800a8ea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a8ec:	4213      	tst	r3, r2
 800a8ee:	d006      	beq.n	800a8fe <_dtoa_r+0x85e>
 800a8f0:	9b06      	ldr	r3, [sp, #24]
 800a8f2:	3501      	adds	r5, #1
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	9306      	str	r3, [sp, #24]
 800a8f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	930d      	str	r3, [sp, #52]	@ 0x34
 800a8fe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a900:	2001      	movs	r0, #1
 800a902:	2b00      	cmp	r3, #0
 800a904:	d008      	beq.n	800a918 <_dtoa_r+0x878>
 800a906:	6933      	ldr	r3, [r6, #16]
 800a908:	3303      	adds	r3, #3
 800a90a:	009b      	lsls	r3, r3, #2
 800a90c:	18f3      	adds	r3, r6, r3
 800a90e:	6858      	ldr	r0, [r3, #4]
 800a910:	f000 fb6c 	bl	800afec <__hi0bits>
 800a914:	2320      	movs	r3, #32
 800a916:	1a18      	subs	r0, r3, r0
 800a918:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a91a:	1818      	adds	r0, r3, r0
 800a91c:	0002      	movs	r2, r0
 800a91e:	231f      	movs	r3, #31
 800a920:	401a      	ands	r2, r3
 800a922:	4218      	tst	r0, r3
 800a924:	d065      	beq.n	800a9f2 <_dtoa_r+0x952>
 800a926:	3301      	adds	r3, #1
 800a928:	1a9b      	subs	r3, r3, r2
 800a92a:	2b04      	cmp	r3, #4
 800a92c:	dd5d      	ble.n	800a9ea <_dtoa_r+0x94a>
 800a92e:	231c      	movs	r3, #28
 800a930:	1a9b      	subs	r3, r3, r2
 800a932:	9a06      	ldr	r2, [sp, #24]
 800a934:	18e4      	adds	r4, r4, r3
 800a936:	18d2      	adds	r2, r2, r3
 800a938:	9206      	str	r2, [sp, #24]
 800a93a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a93c:	18d3      	adds	r3, r2, r3
 800a93e:	930d      	str	r3, [sp, #52]	@ 0x34
 800a940:	9b06      	ldr	r3, [sp, #24]
 800a942:	2b00      	cmp	r3, #0
 800a944:	dd05      	ble.n	800a952 <_dtoa_r+0x8b2>
 800a946:	001a      	movs	r2, r3
 800a948:	9905      	ldr	r1, [sp, #20]
 800a94a:	9803      	ldr	r0, [sp, #12]
 800a94c:	f000 fcc4 	bl	800b2d8 <__lshift>
 800a950:	9005      	str	r0, [sp, #20]
 800a952:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a954:	2b00      	cmp	r3, #0
 800a956:	dd05      	ble.n	800a964 <_dtoa_r+0x8c4>
 800a958:	0031      	movs	r1, r6
 800a95a:	001a      	movs	r2, r3
 800a95c:	9803      	ldr	r0, [sp, #12]
 800a95e:	f000 fcbb 	bl	800b2d8 <__lshift>
 800a962:	0006      	movs	r6, r0
 800a964:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a966:	2b00      	cmp	r3, #0
 800a968:	d045      	beq.n	800a9f6 <_dtoa_r+0x956>
 800a96a:	0031      	movs	r1, r6
 800a96c:	9805      	ldr	r0, [sp, #20]
 800a96e:	f000 fd1f 	bl	800b3b0 <__mcmp>
 800a972:	2800      	cmp	r0, #0
 800a974:	da3f      	bge.n	800a9f6 <_dtoa_r+0x956>
 800a976:	9b04      	ldr	r3, [sp, #16]
 800a978:	220a      	movs	r2, #10
 800a97a:	3b01      	subs	r3, #1
 800a97c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a97e:	9905      	ldr	r1, [sp, #20]
 800a980:	2300      	movs	r3, #0
 800a982:	9803      	ldr	r0, [sp, #12]
 800a984:	f000 faee 	bl	800af64 <__multadd>
 800a988:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a98a:	9005      	str	r0, [sp, #20]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d100      	bne.n	800a992 <_dtoa_r+0x8f2>
 800a990:	e15c      	b.n	800ac4c <_dtoa_r+0xbac>
 800a992:	2300      	movs	r3, #0
 800a994:	0039      	movs	r1, r7
 800a996:	220a      	movs	r2, #10
 800a998:	9803      	ldr	r0, [sp, #12]
 800a99a:	f000 fae3 	bl	800af64 <__multadd>
 800a99e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9a0:	0007      	movs	r7, r0
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	dc55      	bgt.n	800aa52 <_dtoa_r+0x9b2>
 800a9a6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a9a8:	2b02      	cmp	r3, #2
 800a9aa:	dc2d      	bgt.n	800aa08 <_dtoa_r+0x968>
 800a9ac:	e051      	b.n	800aa52 <_dtoa_r+0x9b2>
 800a9ae:	2336      	movs	r3, #54	@ 0x36
 800a9b0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a9b2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800a9b4:	9c06      	ldr	r4, [sp, #24]
 800a9b6:	1a9b      	subs	r3, r3, r2
 800a9b8:	e73c      	b.n	800a834 <_dtoa_r+0x794>
 800a9ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9bc:	1e5d      	subs	r5, r3, #1
 800a9be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9c0:	42ab      	cmp	r3, r5
 800a9c2:	db08      	blt.n	800a9d6 <_dtoa_r+0x936>
 800a9c4:	1b5d      	subs	r5, r3, r5
 800a9c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9c8:	9c06      	ldr	r4, [sp, #24]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	db00      	blt.n	800a9d0 <_dtoa_r+0x930>
 800a9ce:	e731      	b.n	800a834 <_dtoa_r+0x794>
 800a9d0:	1ae4      	subs	r4, r4, r3
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	e72e      	b.n	800a834 <_dtoa_r+0x794>
 800a9d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9d8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a9da:	1aeb      	subs	r3, r5, r3
 800a9dc:	18d3      	adds	r3, r2, r3
 800a9de:	950f      	str	r5, [sp, #60]	@ 0x3c
 800a9e0:	9314      	str	r3, [sp, #80]	@ 0x50
 800a9e2:	2500      	movs	r5, #0
 800a9e4:	e7ef      	b.n	800a9c6 <_dtoa_r+0x926>
 800a9e6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a9e8:	e75e      	b.n	800a8a8 <_dtoa_r+0x808>
 800a9ea:	2b04      	cmp	r3, #4
 800a9ec:	d0a8      	beq.n	800a940 <_dtoa_r+0x8a0>
 800a9ee:	331c      	adds	r3, #28
 800a9f0:	e79f      	b.n	800a932 <_dtoa_r+0x892>
 800a9f2:	0013      	movs	r3, r2
 800a9f4:	e7fb      	b.n	800a9ee <_dtoa_r+0x94e>
 800a9f6:	9b04      	ldr	r3, [sp, #16]
 800a9f8:	930c      	str	r3, [sp, #48]	@ 0x30
 800a9fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9fc:	930e      	str	r3, [sp, #56]	@ 0x38
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	dc23      	bgt.n	800aa4a <_dtoa_r+0x9aa>
 800aa02:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800aa04:	2b02      	cmp	r3, #2
 800aa06:	dd20      	ble.n	800aa4a <_dtoa_r+0x9aa>
 800aa08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d000      	beq.n	800aa10 <_dtoa_r+0x970>
 800aa0e:	e6b5      	b.n	800a77c <_dtoa_r+0x6dc>
 800aa10:	0031      	movs	r1, r6
 800aa12:	2205      	movs	r2, #5
 800aa14:	9803      	ldr	r0, [sp, #12]
 800aa16:	f000 faa5 	bl	800af64 <__multadd>
 800aa1a:	0006      	movs	r6, r0
 800aa1c:	0001      	movs	r1, r0
 800aa1e:	9805      	ldr	r0, [sp, #20]
 800aa20:	f000 fcc6 	bl	800b3b0 <__mcmp>
 800aa24:	2800      	cmp	r0, #0
 800aa26:	dc00      	bgt.n	800aa2a <_dtoa_r+0x98a>
 800aa28:	e6a8      	b.n	800a77c <_dtoa_r+0x6dc>
 800aa2a:	9b08      	ldr	r3, [sp, #32]
 800aa2c:	9a08      	ldr	r2, [sp, #32]
 800aa2e:	1c5c      	adds	r4, r3, #1
 800aa30:	2331      	movs	r3, #49	@ 0x31
 800aa32:	7013      	strb	r3, [r2, #0]
 800aa34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aa36:	3301      	adds	r3, #1
 800aa38:	930c      	str	r3, [sp, #48]	@ 0x30
 800aa3a:	e6a3      	b.n	800a784 <_dtoa_r+0x6e4>
 800aa3c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800aa3e:	0037      	movs	r7, r6
 800aa40:	e7f3      	b.n	800aa2a <_dtoa_r+0x98a>
 800aa42:	9b04      	ldr	r3, [sp, #16]
 800aa44:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800aa46:	930c      	str	r3, [sp, #48]	@ 0x30
 800aa48:	e7f9      	b.n	800aa3e <_dtoa_r+0x99e>
 800aa4a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d100      	bne.n	800aa52 <_dtoa_r+0x9b2>
 800aa50:	e100      	b.n	800ac54 <_dtoa_r+0xbb4>
 800aa52:	2c00      	cmp	r4, #0
 800aa54:	dd05      	ble.n	800aa62 <_dtoa_r+0x9c2>
 800aa56:	0039      	movs	r1, r7
 800aa58:	0022      	movs	r2, r4
 800aa5a:	9803      	ldr	r0, [sp, #12]
 800aa5c:	f000 fc3c 	bl	800b2d8 <__lshift>
 800aa60:	0007      	movs	r7, r0
 800aa62:	0038      	movs	r0, r7
 800aa64:	2d00      	cmp	r5, #0
 800aa66:	d018      	beq.n	800aa9a <_dtoa_r+0x9fa>
 800aa68:	6879      	ldr	r1, [r7, #4]
 800aa6a:	9803      	ldr	r0, [sp, #12]
 800aa6c:	f000 fa12 	bl	800ae94 <_Balloc>
 800aa70:	1e04      	subs	r4, r0, #0
 800aa72:	d105      	bne.n	800aa80 <_dtoa_r+0x9e0>
 800aa74:	0022      	movs	r2, r4
 800aa76:	4b2b      	ldr	r3, [pc, #172]	@ (800ab24 <_dtoa_r+0xa84>)
 800aa78:	482b      	ldr	r0, [pc, #172]	@ (800ab28 <_dtoa_r+0xa88>)
 800aa7a:	492c      	ldr	r1, [pc, #176]	@ (800ab2c <_dtoa_r+0xa8c>)
 800aa7c:	f7ff fb25 	bl	800a0ca <_dtoa_r+0x2a>
 800aa80:	0039      	movs	r1, r7
 800aa82:	693a      	ldr	r2, [r7, #16]
 800aa84:	310c      	adds	r1, #12
 800aa86:	3202      	adds	r2, #2
 800aa88:	0092      	lsls	r2, r2, #2
 800aa8a:	300c      	adds	r0, #12
 800aa8c:	f000 fe6a 	bl	800b764 <memcpy>
 800aa90:	2201      	movs	r2, #1
 800aa92:	0021      	movs	r1, r4
 800aa94:	9803      	ldr	r0, [sp, #12]
 800aa96:	f000 fc1f 	bl	800b2d8 <__lshift>
 800aa9a:	9b08      	ldr	r3, [sp, #32]
 800aa9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa9e:	9306      	str	r3, [sp, #24]
 800aaa0:	3b01      	subs	r3, #1
 800aaa2:	189b      	adds	r3, r3, r2
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	9704      	str	r7, [sp, #16]
 800aaa8:	0007      	movs	r7, r0
 800aaaa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aaac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aaae:	4013      	ands	r3, r2
 800aab0:	930e      	str	r3, [sp, #56]	@ 0x38
 800aab2:	0031      	movs	r1, r6
 800aab4:	9805      	ldr	r0, [sp, #20]
 800aab6:	f7ff fa65 	bl	8009f84 <quorem>
 800aaba:	9904      	ldr	r1, [sp, #16]
 800aabc:	0005      	movs	r5, r0
 800aabe:	900a      	str	r0, [sp, #40]	@ 0x28
 800aac0:	9805      	ldr	r0, [sp, #20]
 800aac2:	f000 fc75 	bl	800b3b0 <__mcmp>
 800aac6:	003a      	movs	r2, r7
 800aac8:	900d      	str	r0, [sp, #52]	@ 0x34
 800aaca:	0031      	movs	r1, r6
 800aacc:	9803      	ldr	r0, [sp, #12]
 800aace:	f000 fc8b 	bl	800b3e8 <__mdiff>
 800aad2:	2201      	movs	r2, #1
 800aad4:	68c3      	ldr	r3, [r0, #12]
 800aad6:	0004      	movs	r4, r0
 800aad8:	3530      	adds	r5, #48	@ 0x30
 800aada:	9209      	str	r2, [sp, #36]	@ 0x24
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d104      	bne.n	800aaea <_dtoa_r+0xa4a>
 800aae0:	0001      	movs	r1, r0
 800aae2:	9805      	ldr	r0, [sp, #20]
 800aae4:	f000 fc64 	bl	800b3b0 <__mcmp>
 800aae8:	9009      	str	r0, [sp, #36]	@ 0x24
 800aaea:	0021      	movs	r1, r4
 800aaec:	9803      	ldr	r0, [sp, #12]
 800aaee:	f000 fa15 	bl	800af1c <_Bfree>
 800aaf2:	9b06      	ldr	r3, [sp, #24]
 800aaf4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aaf6:	1c5c      	adds	r4, r3, #1
 800aaf8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800aafa:	4313      	orrs	r3, r2
 800aafc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aafe:	4313      	orrs	r3, r2
 800ab00:	d116      	bne.n	800ab30 <_dtoa_r+0xa90>
 800ab02:	2d39      	cmp	r5, #57	@ 0x39
 800ab04:	d02f      	beq.n	800ab66 <_dtoa_r+0xac6>
 800ab06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	dd01      	ble.n	800ab10 <_dtoa_r+0xa70>
 800ab0c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800ab0e:	3531      	adds	r5, #49	@ 0x31
 800ab10:	9b06      	ldr	r3, [sp, #24]
 800ab12:	701d      	strb	r5, [r3, #0]
 800ab14:	e638      	b.n	800a788 <_dtoa_r+0x6e8>
 800ab16:	46c0      	nop			@ (mov r8, r8)
 800ab18:	40240000 	.word	0x40240000
 800ab1c:	00000433 	.word	0x00000433
 800ab20:	7ff00000 	.word	0x7ff00000
 800ab24:	0800c49c 	.word	0x0800c49c
 800ab28:	0800c444 	.word	0x0800c444
 800ab2c:	000002ef 	.word	0x000002ef
 800ab30:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	db04      	blt.n	800ab40 <_dtoa_r+0xaa0>
 800ab36:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	d11e      	bne.n	800ab7e <_dtoa_r+0xade>
 800ab40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	dde4      	ble.n	800ab10 <_dtoa_r+0xa70>
 800ab46:	9905      	ldr	r1, [sp, #20]
 800ab48:	2201      	movs	r2, #1
 800ab4a:	9803      	ldr	r0, [sp, #12]
 800ab4c:	f000 fbc4 	bl	800b2d8 <__lshift>
 800ab50:	0031      	movs	r1, r6
 800ab52:	9005      	str	r0, [sp, #20]
 800ab54:	f000 fc2c 	bl	800b3b0 <__mcmp>
 800ab58:	2800      	cmp	r0, #0
 800ab5a:	dc02      	bgt.n	800ab62 <_dtoa_r+0xac2>
 800ab5c:	d1d8      	bne.n	800ab10 <_dtoa_r+0xa70>
 800ab5e:	07eb      	lsls	r3, r5, #31
 800ab60:	d5d6      	bpl.n	800ab10 <_dtoa_r+0xa70>
 800ab62:	2d39      	cmp	r5, #57	@ 0x39
 800ab64:	d1d2      	bne.n	800ab0c <_dtoa_r+0xa6c>
 800ab66:	2339      	movs	r3, #57	@ 0x39
 800ab68:	9a06      	ldr	r2, [sp, #24]
 800ab6a:	7013      	strb	r3, [r2, #0]
 800ab6c:	0023      	movs	r3, r4
 800ab6e:	001c      	movs	r4, r3
 800ab70:	3b01      	subs	r3, #1
 800ab72:	781a      	ldrb	r2, [r3, #0]
 800ab74:	2a39      	cmp	r2, #57	@ 0x39
 800ab76:	d04f      	beq.n	800ac18 <_dtoa_r+0xb78>
 800ab78:	3201      	adds	r2, #1
 800ab7a:	701a      	strb	r2, [r3, #0]
 800ab7c:	e604      	b.n	800a788 <_dtoa_r+0x6e8>
 800ab7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	dd03      	ble.n	800ab8c <_dtoa_r+0xaec>
 800ab84:	2d39      	cmp	r5, #57	@ 0x39
 800ab86:	d0ee      	beq.n	800ab66 <_dtoa_r+0xac6>
 800ab88:	3501      	adds	r5, #1
 800ab8a:	e7c1      	b.n	800ab10 <_dtoa_r+0xa70>
 800ab8c:	9b06      	ldr	r3, [sp, #24]
 800ab8e:	9a06      	ldr	r2, [sp, #24]
 800ab90:	701d      	strb	r5, [r3, #0]
 800ab92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d02a      	beq.n	800abee <_dtoa_r+0xb4e>
 800ab98:	2300      	movs	r3, #0
 800ab9a:	220a      	movs	r2, #10
 800ab9c:	9905      	ldr	r1, [sp, #20]
 800ab9e:	9803      	ldr	r0, [sp, #12]
 800aba0:	f000 f9e0 	bl	800af64 <__multadd>
 800aba4:	9b04      	ldr	r3, [sp, #16]
 800aba6:	9005      	str	r0, [sp, #20]
 800aba8:	42bb      	cmp	r3, r7
 800abaa:	d109      	bne.n	800abc0 <_dtoa_r+0xb20>
 800abac:	2300      	movs	r3, #0
 800abae:	220a      	movs	r2, #10
 800abb0:	9904      	ldr	r1, [sp, #16]
 800abb2:	9803      	ldr	r0, [sp, #12]
 800abb4:	f000 f9d6 	bl	800af64 <__multadd>
 800abb8:	9004      	str	r0, [sp, #16]
 800abba:	0007      	movs	r7, r0
 800abbc:	9406      	str	r4, [sp, #24]
 800abbe:	e778      	b.n	800aab2 <_dtoa_r+0xa12>
 800abc0:	9904      	ldr	r1, [sp, #16]
 800abc2:	2300      	movs	r3, #0
 800abc4:	220a      	movs	r2, #10
 800abc6:	9803      	ldr	r0, [sp, #12]
 800abc8:	f000 f9cc 	bl	800af64 <__multadd>
 800abcc:	2300      	movs	r3, #0
 800abce:	9004      	str	r0, [sp, #16]
 800abd0:	220a      	movs	r2, #10
 800abd2:	0039      	movs	r1, r7
 800abd4:	9803      	ldr	r0, [sp, #12]
 800abd6:	f000 f9c5 	bl	800af64 <__multadd>
 800abda:	e7ee      	b.n	800abba <_dtoa_r+0xb1a>
 800abdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abde:	2401      	movs	r4, #1
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	dd00      	ble.n	800abe6 <_dtoa_r+0xb46>
 800abe4:	001c      	movs	r4, r3
 800abe6:	9b08      	ldr	r3, [sp, #32]
 800abe8:	191c      	adds	r4, r3, r4
 800abea:	2300      	movs	r3, #0
 800abec:	9304      	str	r3, [sp, #16]
 800abee:	9905      	ldr	r1, [sp, #20]
 800abf0:	2201      	movs	r2, #1
 800abf2:	9803      	ldr	r0, [sp, #12]
 800abf4:	f000 fb70 	bl	800b2d8 <__lshift>
 800abf8:	0031      	movs	r1, r6
 800abfa:	9005      	str	r0, [sp, #20]
 800abfc:	f000 fbd8 	bl	800b3b0 <__mcmp>
 800ac00:	2800      	cmp	r0, #0
 800ac02:	dcb3      	bgt.n	800ab6c <_dtoa_r+0xacc>
 800ac04:	d101      	bne.n	800ac0a <_dtoa_r+0xb6a>
 800ac06:	07ed      	lsls	r5, r5, #31
 800ac08:	d4b0      	bmi.n	800ab6c <_dtoa_r+0xacc>
 800ac0a:	0023      	movs	r3, r4
 800ac0c:	001c      	movs	r4, r3
 800ac0e:	3b01      	subs	r3, #1
 800ac10:	781a      	ldrb	r2, [r3, #0]
 800ac12:	2a30      	cmp	r2, #48	@ 0x30
 800ac14:	d0fa      	beq.n	800ac0c <_dtoa_r+0xb6c>
 800ac16:	e5b7      	b.n	800a788 <_dtoa_r+0x6e8>
 800ac18:	9a08      	ldr	r2, [sp, #32]
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d1a7      	bne.n	800ab6e <_dtoa_r+0xace>
 800ac1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac20:	3301      	adds	r3, #1
 800ac22:	930c      	str	r3, [sp, #48]	@ 0x30
 800ac24:	2331      	movs	r3, #49	@ 0x31
 800ac26:	7013      	strb	r3, [r2, #0]
 800ac28:	e5ae      	b.n	800a788 <_dtoa_r+0x6e8>
 800ac2a:	4b15      	ldr	r3, [pc, #84]	@ (800ac80 <_dtoa_r+0xbe0>)
 800ac2c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800ac2e:	9308      	str	r3, [sp, #32]
 800ac30:	4b14      	ldr	r3, [pc, #80]	@ (800ac84 <_dtoa_r+0xbe4>)
 800ac32:	2a00      	cmp	r2, #0
 800ac34:	d001      	beq.n	800ac3a <_dtoa_r+0xb9a>
 800ac36:	f7ff fa7b 	bl	800a130 <_dtoa_r+0x90>
 800ac3a:	f7ff fa7b 	bl	800a134 <_dtoa_r+0x94>
 800ac3e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	dc00      	bgt.n	800ac46 <_dtoa_r+0xba6>
 800ac44:	e648      	b.n	800a8d8 <_dtoa_r+0x838>
 800ac46:	2001      	movs	r0, #1
 800ac48:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800ac4a:	e665      	b.n	800a918 <_dtoa_r+0x878>
 800ac4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	dc00      	bgt.n	800ac54 <_dtoa_r+0xbb4>
 800ac52:	e6d6      	b.n	800aa02 <_dtoa_r+0x962>
 800ac54:	2400      	movs	r4, #0
 800ac56:	0031      	movs	r1, r6
 800ac58:	9805      	ldr	r0, [sp, #20]
 800ac5a:	f7ff f993 	bl	8009f84 <quorem>
 800ac5e:	9b08      	ldr	r3, [sp, #32]
 800ac60:	3030      	adds	r0, #48	@ 0x30
 800ac62:	5518      	strb	r0, [r3, r4]
 800ac64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac66:	3401      	adds	r4, #1
 800ac68:	0005      	movs	r5, r0
 800ac6a:	429c      	cmp	r4, r3
 800ac6c:	dab6      	bge.n	800abdc <_dtoa_r+0xb3c>
 800ac6e:	2300      	movs	r3, #0
 800ac70:	220a      	movs	r2, #10
 800ac72:	9905      	ldr	r1, [sp, #20]
 800ac74:	9803      	ldr	r0, [sp, #12]
 800ac76:	f000 f975 	bl	800af64 <__multadd>
 800ac7a:	9005      	str	r0, [sp, #20]
 800ac7c:	e7eb      	b.n	800ac56 <_dtoa_r+0xbb6>
 800ac7e:	46c0      	nop			@ (mov r8, r8)
 800ac80:	0800c420 	.word	0x0800c420
 800ac84:	0800c428 	.word	0x0800c428

0800ac88 <_free_r>:
 800ac88:	b570      	push	{r4, r5, r6, lr}
 800ac8a:	0005      	movs	r5, r0
 800ac8c:	1e0c      	subs	r4, r1, #0
 800ac8e:	d010      	beq.n	800acb2 <_free_r+0x2a>
 800ac90:	3c04      	subs	r4, #4
 800ac92:	6823      	ldr	r3, [r4, #0]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	da00      	bge.n	800ac9a <_free_r+0x12>
 800ac98:	18e4      	adds	r4, r4, r3
 800ac9a:	0028      	movs	r0, r5
 800ac9c:	f000 f8ea 	bl	800ae74 <__malloc_lock>
 800aca0:	4a1d      	ldr	r2, [pc, #116]	@ (800ad18 <_free_r+0x90>)
 800aca2:	6813      	ldr	r3, [r2, #0]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d105      	bne.n	800acb4 <_free_r+0x2c>
 800aca8:	6063      	str	r3, [r4, #4]
 800acaa:	6014      	str	r4, [r2, #0]
 800acac:	0028      	movs	r0, r5
 800acae:	f000 f8e9 	bl	800ae84 <__malloc_unlock>
 800acb2:	bd70      	pop	{r4, r5, r6, pc}
 800acb4:	42a3      	cmp	r3, r4
 800acb6:	d908      	bls.n	800acca <_free_r+0x42>
 800acb8:	6820      	ldr	r0, [r4, #0]
 800acba:	1821      	adds	r1, r4, r0
 800acbc:	428b      	cmp	r3, r1
 800acbe:	d1f3      	bne.n	800aca8 <_free_r+0x20>
 800acc0:	6819      	ldr	r1, [r3, #0]
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	1809      	adds	r1, r1, r0
 800acc6:	6021      	str	r1, [r4, #0]
 800acc8:	e7ee      	b.n	800aca8 <_free_r+0x20>
 800acca:	001a      	movs	r2, r3
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d001      	beq.n	800acd6 <_free_r+0x4e>
 800acd2:	42a3      	cmp	r3, r4
 800acd4:	d9f9      	bls.n	800acca <_free_r+0x42>
 800acd6:	6811      	ldr	r1, [r2, #0]
 800acd8:	1850      	adds	r0, r2, r1
 800acda:	42a0      	cmp	r0, r4
 800acdc:	d10b      	bne.n	800acf6 <_free_r+0x6e>
 800acde:	6820      	ldr	r0, [r4, #0]
 800ace0:	1809      	adds	r1, r1, r0
 800ace2:	1850      	adds	r0, r2, r1
 800ace4:	6011      	str	r1, [r2, #0]
 800ace6:	4283      	cmp	r3, r0
 800ace8:	d1e0      	bne.n	800acac <_free_r+0x24>
 800acea:	6818      	ldr	r0, [r3, #0]
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	1841      	adds	r1, r0, r1
 800acf0:	6011      	str	r1, [r2, #0]
 800acf2:	6053      	str	r3, [r2, #4]
 800acf4:	e7da      	b.n	800acac <_free_r+0x24>
 800acf6:	42a0      	cmp	r0, r4
 800acf8:	d902      	bls.n	800ad00 <_free_r+0x78>
 800acfa:	230c      	movs	r3, #12
 800acfc:	602b      	str	r3, [r5, #0]
 800acfe:	e7d5      	b.n	800acac <_free_r+0x24>
 800ad00:	6820      	ldr	r0, [r4, #0]
 800ad02:	1821      	adds	r1, r4, r0
 800ad04:	428b      	cmp	r3, r1
 800ad06:	d103      	bne.n	800ad10 <_free_r+0x88>
 800ad08:	6819      	ldr	r1, [r3, #0]
 800ad0a:	685b      	ldr	r3, [r3, #4]
 800ad0c:	1809      	adds	r1, r1, r0
 800ad0e:	6021      	str	r1, [r4, #0]
 800ad10:	6063      	str	r3, [r4, #4]
 800ad12:	6054      	str	r4, [r2, #4]
 800ad14:	e7ca      	b.n	800acac <_free_r+0x24>
 800ad16:	46c0      	nop			@ (mov r8, r8)
 800ad18:	2000052c 	.word	0x2000052c

0800ad1c <malloc>:
 800ad1c:	b510      	push	{r4, lr}
 800ad1e:	4b03      	ldr	r3, [pc, #12]	@ (800ad2c <malloc+0x10>)
 800ad20:	0001      	movs	r1, r0
 800ad22:	6818      	ldr	r0, [r3, #0]
 800ad24:	f000 f826 	bl	800ad74 <_malloc_r>
 800ad28:	bd10      	pop	{r4, pc}
 800ad2a:	46c0      	nop			@ (mov r8, r8)
 800ad2c:	2000001c 	.word	0x2000001c

0800ad30 <sbrk_aligned>:
 800ad30:	b570      	push	{r4, r5, r6, lr}
 800ad32:	4e0f      	ldr	r6, [pc, #60]	@ (800ad70 <sbrk_aligned+0x40>)
 800ad34:	000d      	movs	r5, r1
 800ad36:	6831      	ldr	r1, [r6, #0]
 800ad38:	0004      	movs	r4, r0
 800ad3a:	2900      	cmp	r1, #0
 800ad3c:	d102      	bne.n	800ad44 <sbrk_aligned+0x14>
 800ad3e:	f000 fcff 	bl	800b740 <_sbrk_r>
 800ad42:	6030      	str	r0, [r6, #0]
 800ad44:	0029      	movs	r1, r5
 800ad46:	0020      	movs	r0, r4
 800ad48:	f000 fcfa 	bl	800b740 <_sbrk_r>
 800ad4c:	1c43      	adds	r3, r0, #1
 800ad4e:	d103      	bne.n	800ad58 <sbrk_aligned+0x28>
 800ad50:	2501      	movs	r5, #1
 800ad52:	426d      	negs	r5, r5
 800ad54:	0028      	movs	r0, r5
 800ad56:	bd70      	pop	{r4, r5, r6, pc}
 800ad58:	2303      	movs	r3, #3
 800ad5a:	1cc5      	adds	r5, r0, #3
 800ad5c:	439d      	bics	r5, r3
 800ad5e:	42a8      	cmp	r0, r5
 800ad60:	d0f8      	beq.n	800ad54 <sbrk_aligned+0x24>
 800ad62:	1a29      	subs	r1, r5, r0
 800ad64:	0020      	movs	r0, r4
 800ad66:	f000 fceb 	bl	800b740 <_sbrk_r>
 800ad6a:	3001      	adds	r0, #1
 800ad6c:	d1f2      	bne.n	800ad54 <sbrk_aligned+0x24>
 800ad6e:	e7ef      	b.n	800ad50 <sbrk_aligned+0x20>
 800ad70:	20000528 	.word	0x20000528

0800ad74 <_malloc_r>:
 800ad74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad76:	2203      	movs	r2, #3
 800ad78:	1ccb      	adds	r3, r1, #3
 800ad7a:	4393      	bics	r3, r2
 800ad7c:	3308      	adds	r3, #8
 800ad7e:	0005      	movs	r5, r0
 800ad80:	001f      	movs	r7, r3
 800ad82:	2b0c      	cmp	r3, #12
 800ad84:	d234      	bcs.n	800adf0 <_malloc_r+0x7c>
 800ad86:	270c      	movs	r7, #12
 800ad88:	42b9      	cmp	r1, r7
 800ad8a:	d833      	bhi.n	800adf4 <_malloc_r+0x80>
 800ad8c:	0028      	movs	r0, r5
 800ad8e:	f000 f871 	bl	800ae74 <__malloc_lock>
 800ad92:	4e37      	ldr	r6, [pc, #220]	@ (800ae70 <_malloc_r+0xfc>)
 800ad94:	6833      	ldr	r3, [r6, #0]
 800ad96:	001c      	movs	r4, r3
 800ad98:	2c00      	cmp	r4, #0
 800ad9a:	d12f      	bne.n	800adfc <_malloc_r+0x88>
 800ad9c:	0039      	movs	r1, r7
 800ad9e:	0028      	movs	r0, r5
 800ada0:	f7ff ffc6 	bl	800ad30 <sbrk_aligned>
 800ada4:	0004      	movs	r4, r0
 800ada6:	1c43      	adds	r3, r0, #1
 800ada8:	d15f      	bne.n	800ae6a <_malloc_r+0xf6>
 800adaa:	6834      	ldr	r4, [r6, #0]
 800adac:	9400      	str	r4, [sp, #0]
 800adae:	9b00      	ldr	r3, [sp, #0]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d14a      	bne.n	800ae4a <_malloc_r+0xd6>
 800adb4:	2c00      	cmp	r4, #0
 800adb6:	d052      	beq.n	800ae5e <_malloc_r+0xea>
 800adb8:	6823      	ldr	r3, [r4, #0]
 800adba:	0028      	movs	r0, r5
 800adbc:	18e3      	adds	r3, r4, r3
 800adbe:	9900      	ldr	r1, [sp, #0]
 800adc0:	9301      	str	r3, [sp, #4]
 800adc2:	f000 fcbd 	bl	800b740 <_sbrk_r>
 800adc6:	9b01      	ldr	r3, [sp, #4]
 800adc8:	4283      	cmp	r3, r0
 800adca:	d148      	bne.n	800ae5e <_malloc_r+0xea>
 800adcc:	6823      	ldr	r3, [r4, #0]
 800adce:	0028      	movs	r0, r5
 800add0:	1aff      	subs	r7, r7, r3
 800add2:	0039      	movs	r1, r7
 800add4:	f7ff ffac 	bl	800ad30 <sbrk_aligned>
 800add8:	3001      	adds	r0, #1
 800adda:	d040      	beq.n	800ae5e <_malloc_r+0xea>
 800addc:	6823      	ldr	r3, [r4, #0]
 800adde:	19db      	adds	r3, r3, r7
 800ade0:	6023      	str	r3, [r4, #0]
 800ade2:	6833      	ldr	r3, [r6, #0]
 800ade4:	685a      	ldr	r2, [r3, #4]
 800ade6:	2a00      	cmp	r2, #0
 800ade8:	d133      	bne.n	800ae52 <_malloc_r+0xde>
 800adea:	9b00      	ldr	r3, [sp, #0]
 800adec:	6033      	str	r3, [r6, #0]
 800adee:	e019      	b.n	800ae24 <_malloc_r+0xb0>
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	dac9      	bge.n	800ad88 <_malloc_r+0x14>
 800adf4:	230c      	movs	r3, #12
 800adf6:	602b      	str	r3, [r5, #0]
 800adf8:	2000      	movs	r0, #0
 800adfa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800adfc:	6821      	ldr	r1, [r4, #0]
 800adfe:	1bc9      	subs	r1, r1, r7
 800ae00:	d420      	bmi.n	800ae44 <_malloc_r+0xd0>
 800ae02:	290b      	cmp	r1, #11
 800ae04:	d90a      	bls.n	800ae1c <_malloc_r+0xa8>
 800ae06:	19e2      	adds	r2, r4, r7
 800ae08:	6027      	str	r7, [r4, #0]
 800ae0a:	42a3      	cmp	r3, r4
 800ae0c:	d104      	bne.n	800ae18 <_malloc_r+0xa4>
 800ae0e:	6032      	str	r2, [r6, #0]
 800ae10:	6863      	ldr	r3, [r4, #4]
 800ae12:	6011      	str	r1, [r2, #0]
 800ae14:	6053      	str	r3, [r2, #4]
 800ae16:	e005      	b.n	800ae24 <_malloc_r+0xb0>
 800ae18:	605a      	str	r2, [r3, #4]
 800ae1a:	e7f9      	b.n	800ae10 <_malloc_r+0x9c>
 800ae1c:	6862      	ldr	r2, [r4, #4]
 800ae1e:	42a3      	cmp	r3, r4
 800ae20:	d10e      	bne.n	800ae40 <_malloc_r+0xcc>
 800ae22:	6032      	str	r2, [r6, #0]
 800ae24:	0028      	movs	r0, r5
 800ae26:	f000 f82d 	bl	800ae84 <__malloc_unlock>
 800ae2a:	0020      	movs	r0, r4
 800ae2c:	2207      	movs	r2, #7
 800ae2e:	300b      	adds	r0, #11
 800ae30:	1d23      	adds	r3, r4, #4
 800ae32:	4390      	bics	r0, r2
 800ae34:	1ac2      	subs	r2, r0, r3
 800ae36:	4298      	cmp	r0, r3
 800ae38:	d0df      	beq.n	800adfa <_malloc_r+0x86>
 800ae3a:	1a1b      	subs	r3, r3, r0
 800ae3c:	50a3      	str	r3, [r4, r2]
 800ae3e:	e7dc      	b.n	800adfa <_malloc_r+0x86>
 800ae40:	605a      	str	r2, [r3, #4]
 800ae42:	e7ef      	b.n	800ae24 <_malloc_r+0xb0>
 800ae44:	0023      	movs	r3, r4
 800ae46:	6864      	ldr	r4, [r4, #4]
 800ae48:	e7a6      	b.n	800ad98 <_malloc_r+0x24>
 800ae4a:	9c00      	ldr	r4, [sp, #0]
 800ae4c:	6863      	ldr	r3, [r4, #4]
 800ae4e:	9300      	str	r3, [sp, #0]
 800ae50:	e7ad      	b.n	800adae <_malloc_r+0x3a>
 800ae52:	001a      	movs	r2, r3
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	42a3      	cmp	r3, r4
 800ae58:	d1fb      	bne.n	800ae52 <_malloc_r+0xde>
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	e7da      	b.n	800ae14 <_malloc_r+0xa0>
 800ae5e:	230c      	movs	r3, #12
 800ae60:	0028      	movs	r0, r5
 800ae62:	602b      	str	r3, [r5, #0]
 800ae64:	f000 f80e 	bl	800ae84 <__malloc_unlock>
 800ae68:	e7c6      	b.n	800adf8 <_malloc_r+0x84>
 800ae6a:	6007      	str	r7, [r0, #0]
 800ae6c:	e7da      	b.n	800ae24 <_malloc_r+0xb0>
 800ae6e:	46c0      	nop			@ (mov r8, r8)
 800ae70:	2000052c 	.word	0x2000052c

0800ae74 <__malloc_lock>:
 800ae74:	b510      	push	{r4, lr}
 800ae76:	4802      	ldr	r0, [pc, #8]	@ (800ae80 <__malloc_lock+0xc>)
 800ae78:	f7ff f877 	bl	8009f6a <__retarget_lock_acquire_recursive>
 800ae7c:	bd10      	pop	{r4, pc}
 800ae7e:	46c0      	nop			@ (mov r8, r8)
 800ae80:	20000524 	.word	0x20000524

0800ae84 <__malloc_unlock>:
 800ae84:	b510      	push	{r4, lr}
 800ae86:	4802      	ldr	r0, [pc, #8]	@ (800ae90 <__malloc_unlock+0xc>)
 800ae88:	f7ff f870 	bl	8009f6c <__retarget_lock_release_recursive>
 800ae8c:	bd10      	pop	{r4, pc}
 800ae8e:	46c0      	nop			@ (mov r8, r8)
 800ae90:	20000524 	.word	0x20000524

0800ae94 <_Balloc>:
 800ae94:	b570      	push	{r4, r5, r6, lr}
 800ae96:	69c5      	ldr	r5, [r0, #28]
 800ae98:	0006      	movs	r6, r0
 800ae9a:	000c      	movs	r4, r1
 800ae9c:	2d00      	cmp	r5, #0
 800ae9e:	d10e      	bne.n	800aebe <_Balloc+0x2a>
 800aea0:	2010      	movs	r0, #16
 800aea2:	f7ff ff3b 	bl	800ad1c <malloc>
 800aea6:	1e02      	subs	r2, r0, #0
 800aea8:	61f0      	str	r0, [r6, #28]
 800aeaa:	d104      	bne.n	800aeb6 <_Balloc+0x22>
 800aeac:	216b      	movs	r1, #107	@ 0x6b
 800aeae:	4b19      	ldr	r3, [pc, #100]	@ (800af14 <_Balloc+0x80>)
 800aeb0:	4819      	ldr	r0, [pc, #100]	@ (800af18 <_Balloc+0x84>)
 800aeb2:	f000 fc61 	bl	800b778 <__assert_func>
 800aeb6:	6045      	str	r5, [r0, #4]
 800aeb8:	6085      	str	r5, [r0, #8]
 800aeba:	6005      	str	r5, [r0, #0]
 800aebc:	60c5      	str	r5, [r0, #12]
 800aebe:	69f5      	ldr	r5, [r6, #28]
 800aec0:	68eb      	ldr	r3, [r5, #12]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d013      	beq.n	800aeee <_Balloc+0x5a>
 800aec6:	69f3      	ldr	r3, [r6, #28]
 800aec8:	00a2      	lsls	r2, r4, #2
 800aeca:	68db      	ldr	r3, [r3, #12]
 800aecc:	189b      	adds	r3, r3, r2
 800aece:	6818      	ldr	r0, [r3, #0]
 800aed0:	2800      	cmp	r0, #0
 800aed2:	d118      	bne.n	800af06 <_Balloc+0x72>
 800aed4:	2101      	movs	r1, #1
 800aed6:	000d      	movs	r5, r1
 800aed8:	40a5      	lsls	r5, r4
 800aeda:	1d6a      	adds	r2, r5, #5
 800aedc:	0030      	movs	r0, r6
 800aede:	0092      	lsls	r2, r2, #2
 800aee0:	f000 fc68 	bl	800b7b4 <_calloc_r>
 800aee4:	2800      	cmp	r0, #0
 800aee6:	d00c      	beq.n	800af02 <_Balloc+0x6e>
 800aee8:	6044      	str	r4, [r0, #4]
 800aeea:	6085      	str	r5, [r0, #8]
 800aeec:	e00d      	b.n	800af0a <_Balloc+0x76>
 800aeee:	2221      	movs	r2, #33	@ 0x21
 800aef0:	2104      	movs	r1, #4
 800aef2:	0030      	movs	r0, r6
 800aef4:	f000 fc5e 	bl	800b7b4 <_calloc_r>
 800aef8:	69f3      	ldr	r3, [r6, #28]
 800aefa:	60e8      	str	r0, [r5, #12]
 800aefc:	68db      	ldr	r3, [r3, #12]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d1e1      	bne.n	800aec6 <_Balloc+0x32>
 800af02:	2000      	movs	r0, #0
 800af04:	bd70      	pop	{r4, r5, r6, pc}
 800af06:	6802      	ldr	r2, [r0, #0]
 800af08:	601a      	str	r2, [r3, #0]
 800af0a:	2300      	movs	r3, #0
 800af0c:	6103      	str	r3, [r0, #16]
 800af0e:	60c3      	str	r3, [r0, #12]
 800af10:	e7f8      	b.n	800af04 <_Balloc+0x70>
 800af12:	46c0      	nop			@ (mov r8, r8)
 800af14:	0800c42d 	.word	0x0800c42d
 800af18:	0800c4ad 	.word	0x0800c4ad

0800af1c <_Bfree>:
 800af1c:	b570      	push	{r4, r5, r6, lr}
 800af1e:	69c6      	ldr	r6, [r0, #28]
 800af20:	0005      	movs	r5, r0
 800af22:	000c      	movs	r4, r1
 800af24:	2e00      	cmp	r6, #0
 800af26:	d10e      	bne.n	800af46 <_Bfree+0x2a>
 800af28:	2010      	movs	r0, #16
 800af2a:	f7ff fef7 	bl	800ad1c <malloc>
 800af2e:	1e02      	subs	r2, r0, #0
 800af30:	61e8      	str	r0, [r5, #28]
 800af32:	d104      	bne.n	800af3e <_Bfree+0x22>
 800af34:	218f      	movs	r1, #143	@ 0x8f
 800af36:	4b09      	ldr	r3, [pc, #36]	@ (800af5c <_Bfree+0x40>)
 800af38:	4809      	ldr	r0, [pc, #36]	@ (800af60 <_Bfree+0x44>)
 800af3a:	f000 fc1d 	bl	800b778 <__assert_func>
 800af3e:	6046      	str	r6, [r0, #4]
 800af40:	6086      	str	r6, [r0, #8]
 800af42:	6006      	str	r6, [r0, #0]
 800af44:	60c6      	str	r6, [r0, #12]
 800af46:	2c00      	cmp	r4, #0
 800af48:	d007      	beq.n	800af5a <_Bfree+0x3e>
 800af4a:	69eb      	ldr	r3, [r5, #28]
 800af4c:	6862      	ldr	r2, [r4, #4]
 800af4e:	68db      	ldr	r3, [r3, #12]
 800af50:	0092      	lsls	r2, r2, #2
 800af52:	189b      	adds	r3, r3, r2
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	6022      	str	r2, [r4, #0]
 800af58:	601c      	str	r4, [r3, #0]
 800af5a:	bd70      	pop	{r4, r5, r6, pc}
 800af5c:	0800c42d 	.word	0x0800c42d
 800af60:	0800c4ad 	.word	0x0800c4ad

0800af64 <__multadd>:
 800af64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af66:	000f      	movs	r7, r1
 800af68:	9001      	str	r0, [sp, #4]
 800af6a:	000c      	movs	r4, r1
 800af6c:	001e      	movs	r6, r3
 800af6e:	2000      	movs	r0, #0
 800af70:	690d      	ldr	r5, [r1, #16]
 800af72:	3714      	adds	r7, #20
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	3001      	adds	r0, #1
 800af78:	b299      	uxth	r1, r3
 800af7a:	4351      	muls	r1, r2
 800af7c:	0c1b      	lsrs	r3, r3, #16
 800af7e:	4353      	muls	r3, r2
 800af80:	1989      	adds	r1, r1, r6
 800af82:	0c0e      	lsrs	r6, r1, #16
 800af84:	199b      	adds	r3, r3, r6
 800af86:	0c1e      	lsrs	r6, r3, #16
 800af88:	b289      	uxth	r1, r1
 800af8a:	041b      	lsls	r3, r3, #16
 800af8c:	185b      	adds	r3, r3, r1
 800af8e:	c708      	stmia	r7!, {r3}
 800af90:	4285      	cmp	r5, r0
 800af92:	dcef      	bgt.n	800af74 <__multadd+0x10>
 800af94:	2e00      	cmp	r6, #0
 800af96:	d022      	beq.n	800afde <__multadd+0x7a>
 800af98:	68a3      	ldr	r3, [r4, #8]
 800af9a:	42ab      	cmp	r3, r5
 800af9c:	dc19      	bgt.n	800afd2 <__multadd+0x6e>
 800af9e:	6861      	ldr	r1, [r4, #4]
 800afa0:	9801      	ldr	r0, [sp, #4]
 800afa2:	3101      	adds	r1, #1
 800afa4:	f7ff ff76 	bl	800ae94 <_Balloc>
 800afa8:	1e07      	subs	r7, r0, #0
 800afaa:	d105      	bne.n	800afb8 <__multadd+0x54>
 800afac:	003a      	movs	r2, r7
 800afae:	21ba      	movs	r1, #186	@ 0xba
 800afb0:	4b0c      	ldr	r3, [pc, #48]	@ (800afe4 <__multadd+0x80>)
 800afb2:	480d      	ldr	r0, [pc, #52]	@ (800afe8 <__multadd+0x84>)
 800afb4:	f000 fbe0 	bl	800b778 <__assert_func>
 800afb8:	0021      	movs	r1, r4
 800afba:	6922      	ldr	r2, [r4, #16]
 800afbc:	310c      	adds	r1, #12
 800afbe:	3202      	adds	r2, #2
 800afc0:	0092      	lsls	r2, r2, #2
 800afc2:	300c      	adds	r0, #12
 800afc4:	f000 fbce 	bl	800b764 <memcpy>
 800afc8:	0021      	movs	r1, r4
 800afca:	9801      	ldr	r0, [sp, #4]
 800afcc:	f7ff ffa6 	bl	800af1c <_Bfree>
 800afd0:	003c      	movs	r4, r7
 800afd2:	1d2b      	adds	r3, r5, #4
 800afd4:	009b      	lsls	r3, r3, #2
 800afd6:	18e3      	adds	r3, r4, r3
 800afd8:	3501      	adds	r5, #1
 800afda:	605e      	str	r6, [r3, #4]
 800afdc:	6125      	str	r5, [r4, #16]
 800afde:	0020      	movs	r0, r4
 800afe0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800afe2:	46c0      	nop			@ (mov r8, r8)
 800afe4:	0800c49c 	.word	0x0800c49c
 800afe8:	0800c4ad 	.word	0x0800c4ad

0800afec <__hi0bits>:
 800afec:	2280      	movs	r2, #128	@ 0x80
 800afee:	0003      	movs	r3, r0
 800aff0:	0252      	lsls	r2, r2, #9
 800aff2:	2000      	movs	r0, #0
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d201      	bcs.n	800affc <__hi0bits+0x10>
 800aff8:	041b      	lsls	r3, r3, #16
 800affa:	3010      	adds	r0, #16
 800affc:	2280      	movs	r2, #128	@ 0x80
 800affe:	0452      	lsls	r2, r2, #17
 800b000:	4293      	cmp	r3, r2
 800b002:	d201      	bcs.n	800b008 <__hi0bits+0x1c>
 800b004:	3008      	adds	r0, #8
 800b006:	021b      	lsls	r3, r3, #8
 800b008:	2280      	movs	r2, #128	@ 0x80
 800b00a:	0552      	lsls	r2, r2, #21
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d201      	bcs.n	800b014 <__hi0bits+0x28>
 800b010:	3004      	adds	r0, #4
 800b012:	011b      	lsls	r3, r3, #4
 800b014:	2280      	movs	r2, #128	@ 0x80
 800b016:	05d2      	lsls	r2, r2, #23
 800b018:	4293      	cmp	r3, r2
 800b01a:	d201      	bcs.n	800b020 <__hi0bits+0x34>
 800b01c:	3002      	adds	r0, #2
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	2b00      	cmp	r3, #0
 800b022:	db03      	blt.n	800b02c <__hi0bits+0x40>
 800b024:	3001      	adds	r0, #1
 800b026:	4213      	tst	r3, r2
 800b028:	d100      	bne.n	800b02c <__hi0bits+0x40>
 800b02a:	2020      	movs	r0, #32
 800b02c:	4770      	bx	lr

0800b02e <__lo0bits>:
 800b02e:	6803      	ldr	r3, [r0, #0]
 800b030:	0001      	movs	r1, r0
 800b032:	2207      	movs	r2, #7
 800b034:	0018      	movs	r0, r3
 800b036:	4010      	ands	r0, r2
 800b038:	4213      	tst	r3, r2
 800b03a:	d00d      	beq.n	800b058 <__lo0bits+0x2a>
 800b03c:	3a06      	subs	r2, #6
 800b03e:	2000      	movs	r0, #0
 800b040:	4213      	tst	r3, r2
 800b042:	d105      	bne.n	800b050 <__lo0bits+0x22>
 800b044:	3002      	adds	r0, #2
 800b046:	4203      	tst	r3, r0
 800b048:	d003      	beq.n	800b052 <__lo0bits+0x24>
 800b04a:	40d3      	lsrs	r3, r2
 800b04c:	0010      	movs	r0, r2
 800b04e:	600b      	str	r3, [r1, #0]
 800b050:	4770      	bx	lr
 800b052:	089b      	lsrs	r3, r3, #2
 800b054:	600b      	str	r3, [r1, #0]
 800b056:	e7fb      	b.n	800b050 <__lo0bits+0x22>
 800b058:	b29a      	uxth	r2, r3
 800b05a:	2a00      	cmp	r2, #0
 800b05c:	d101      	bne.n	800b062 <__lo0bits+0x34>
 800b05e:	2010      	movs	r0, #16
 800b060:	0c1b      	lsrs	r3, r3, #16
 800b062:	b2da      	uxtb	r2, r3
 800b064:	2a00      	cmp	r2, #0
 800b066:	d101      	bne.n	800b06c <__lo0bits+0x3e>
 800b068:	3008      	adds	r0, #8
 800b06a:	0a1b      	lsrs	r3, r3, #8
 800b06c:	071a      	lsls	r2, r3, #28
 800b06e:	d101      	bne.n	800b074 <__lo0bits+0x46>
 800b070:	3004      	adds	r0, #4
 800b072:	091b      	lsrs	r3, r3, #4
 800b074:	079a      	lsls	r2, r3, #30
 800b076:	d101      	bne.n	800b07c <__lo0bits+0x4e>
 800b078:	3002      	adds	r0, #2
 800b07a:	089b      	lsrs	r3, r3, #2
 800b07c:	07da      	lsls	r2, r3, #31
 800b07e:	d4e9      	bmi.n	800b054 <__lo0bits+0x26>
 800b080:	3001      	adds	r0, #1
 800b082:	085b      	lsrs	r3, r3, #1
 800b084:	d1e6      	bne.n	800b054 <__lo0bits+0x26>
 800b086:	2020      	movs	r0, #32
 800b088:	e7e2      	b.n	800b050 <__lo0bits+0x22>
	...

0800b08c <__i2b>:
 800b08c:	b510      	push	{r4, lr}
 800b08e:	000c      	movs	r4, r1
 800b090:	2101      	movs	r1, #1
 800b092:	f7ff feff 	bl	800ae94 <_Balloc>
 800b096:	2800      	cmp	r0, #0
 800b098:	d107      	bne.n	800b0aa <__i2b+0x1e>
 800b09a:	2146      	movs	r1, #70	@ 0x46
 800b09c:	4c05      	ldr	r4, [pc, #20]	@ (800b0b4 <__i2b+0x28>)
 800b09e:	0002      	movs	r2, r0
 800b0a0:	4b05      	ldr	r3, [pc, #20]	@ (800b0b8 <__i2b+0x2c>)
 800b0a2:	0020      	movs	r0, r4
 800b0a4:	31ff      	adds	r1, #255	@ 0xff
 800b0a6:	f000 fb67 	bl	800b778 <__assert_func>
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	6144      	str	r4, [r0, #20]
 800b0ae:	6103      	str	r3, [r0, #16]
 800b0b0:	bd10      	pop	{r4, pc}
 800b0b2:	46c0      	nop			@ (mov r8, r8)
 800b0b4:	0800c4ad 	.word	0x0800c4ad
 800b0b8:	0800c49c 	.word	0x0800c49c

0800b0bc <__multiply>:
 800b0bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0be:	0014      	movs	r4, r2
 800b0c0:	690a      	ldr	r2, [r1, #16]
 800b0c2:	6923      	ldr	r3, [r4, #16]
 800b0c4:	000d      	movs	r5, r1
 800b0c6:	b08b      	sub	sp, #44	@ 0x2c
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	db02      	blt.n	800b0d2 <__multiply+0x16>
 800b0cc:	0023      	movs	r3, r4
 800b0ce:	000c      	movs	r4, r1
 800b0d0:	001d      	movs	r5, r3
 800b0d2:	6927      	ldr	r7, [r4, #16]
 800b0d4:	692e      	ldr	r6, [r5, #16]
 800b0d6:	6861      	ldr	r1, [r4, #4]
 800b0d8:	19bb      	adds	r3, r7, r6
 800b0da:	9303      	str	r3, [sp, #12]
 800b0dc:	68a3      	ldr	r3, [r4, #8]
 800b0de:	19ba      	adds	r2, r7, r6
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	da00      	bge.n	800b0e6 <__multiply+0x2a>
 800b0e4:	3101      	adds	r1, #1
 800b0e6:	f7ff fed5 	bl	800ae94 <_Balloc>
 800b0ea:	9002      	str	r0, [sp, #8]
 800b0ec:	2800      	cmp	r0, #0
 800b0ee:	d106      	bne.n	800b0fe <__multiply+0x42>
 800b0f0:	21b1      	movs	r1, #177	@ 0xb1
 800b0f2:	4b49      	ldr	r3, [pc, #292]	@ (800b218 <__multiply+0x15c>)
 800b0f4:	4849      	ldr	r0, [pc, #292]	@ (800b21c <__multiply+0x160>)
 800b0f6:	9a02      	ldr	r2, [sp, #8]
 800b0f8:	0049      	lsls	r1, r1, #1
 800b0fa:	f000 fb3d 	bl	800b778 <__assert_func>
 800b0fe:	9b02      	ldr	r3, [sp, #8]
 800b100:	2200      	movs	r2, #0
 800b102:	3314      	adds	r3, #20
 800b104:	469c      	mov	ip, r3
 800b106:	19bb      	adds	r3, r7, r6
 800b108:	009b      	lsls	r3, r3, #2
 800b10a:	4463      	add	r3, ip
 800b10c:	9304      	str	r3, [sp, #16]
 800b10e:	4663      	mov	r3, ip
 800b110:	9904      	ldr	r1, [sp, #16]
 800b112:	428b      	cmp	r3, r1
 800b114:	d32a      	bcc.n	800b16c <__multiply+0xb0>
 800b116:	0023      	movs	r3, r4
 800b118:	00bf      	lsls	r7, r7, #2
 800b11a:	3314      	adds	r3, #20
 800b11c:	3514      	adds	r5, #20
 800b11e:	9308      	str	r3, [sp, #32]
 800b120:	00b6      	lsls	r6, r6, #2
 800b122:	19db      	adds	r3, r3, r7
 800b124:	9305      	str	r3, [sp, #20]
 800b126:	19ab      	adds	r3, r5, r6
 800b128:	9309      	str	r3, [sp, #36]	@ 0x24
 800b12a:	2304      	movs	r3, #4
 800b12c:	9306      	str	r3, [sp, #24]
 800b12e:	0023      	movs	r3, r4
 800b130:	9a05      	ldr	r2, [sp, #20]
 800b132:	3315      	adds	r3, #21
 800b134:	9501      	str	r5, [sp, #4]
 800b136:	429a      	cmp	r2, r3
 800b138:	d305      	bcc.n	800b146 <__multiply+0x8a>
 800b13a:	1b13      	subs	r3, r2, r4
 800b13c:	3b15      	subs	r3, #21
 800b13e:	089b      	lsrs	r3, r3, #2
 800b140:	3301      	adds	r3, #1
 800b142:	009b      	lsls	r3, r3, #2
 800b144:	9306      	str	r3, [sp, #24]
 800b146:	9b01      	ldr	r3, [sp, #4]
 800b148:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d310      	bcc.n	800b170 <__multiply+0xb4>
 800b14e:	9b03      	ldr	r3, [sp, #12]
 800b150:	2b00      	cmp	r3, #0
 800b152:	dd05      	ble.n	800b160 <__multiply+0xa4>
 800b154:	9b04      	ldr	r3, [sp, #16]
 800b156:	3b04      	subs	r3, #4
 800b158:	9304      	str	r3, [sp, #16]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d056      	beq.n	800b20e <__multiply+0x152>
 800b160:	9b02      	ldr	r3, [sp, #8]
 800b162:	9a03      	ldr	r2, [sp, #12]
 800b164:	0018      	movs	r0, r3
 800b166:	611a      	str	r2, [r3, #16]
 800b168:	b00b      	add	sp, #44	@ 0x2c
 800b16a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b16c:	c304      	stmia	r3!, {r2}
 800b16e:	e7cf      	b.n	800b110 <__multiply+0x54>
 800b170:	9b01      	ldr	r3, [sp, #4]
 800b172:	6818      	ldr	r0, [r3, #0]
 800b174:	b280      	uxth	r0, r0
 800b176:	2800      	cmp	r0, #0
 800b178:	d01e      	beq.n	800b1b8 <__multiply+0xfc>
 800b17a:	4667      	mov	r7, ip
 800b17c:	2500      	movs	r5, #0
 800b17e:	9e08      	ldr	r6, [sp, #32]
 800b180:	ce02      	ldmia	r6!, {r1}
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	9307      	str	r3, [sp, #28]
 800b186:	b28b      	uxth	r3, r1
 800b188:	4343      	muls	r3, r0
 800b18a:	001a      	movs	r2, r3
 800b18c:	466b      	mov	r3, sp
 800b18e:	0c09      	lsrs	r1, r1, #16
 800b190:	8b9b      	ldrh	r3, [r3, #28]
 800b192:	4341      	muls	r1, r0
 800b194:	18d3      	adds	r3, r2, r3
 800b196:	9a07      	ldr	r2, [sp, #28]
 800b198:	195b      	adds	r3, r3, r5
 800b19a:	0c12      	lsrs	r2, r2, #16
 800b19c:	1889      	adds	r1, r1, r2
 800b19e:	0c1a      	lsrs	r2, r3, #16
 800b1a0:	188a      	adds	r2, r1, r2
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	0c15      	lsrs	r5, r2, #16
 800b1a6:	0412      	lsls	r2, r2, #16
 800b1a8:	431a      	orrs	r2, r3
 800b1aa:	9b05      	ldr	r3, [sp, #20]
 800b1ac:	c704      	stmia	r7!, {r2}
 800b1ae:	42b3      	cmp	r3, r6
 800b1b0:	d8e6      	bhi.n	800b180 <__multiply+0xc4>
 800b1b2:	4663      	mov	r3, ip
 800b1b4:	9a06      	ldr	r2, [sp, #24]
 800b1b6:	509d      	str	r5, [r3, r2]
 800b1b8:	9b01      	ldr	r3, [sp, #4]
 800b1ba:	6818      	ldr	r0, [r3, #0]
 800b1bc:	0c00      	lsrs	r0, r0, #16
 800b1be:	d020      	beq.n	800b202 <__multiply+0x146>
 800b1c0:	4663      	mov	r3, ip
 800b1c2:	0025      	movs	r5, r4
 800b1c4:	4661      	mov	r1, ip
 800b1c6:	2700      	movs	r7, #0
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	3514      	adds	r5, #20
 800b1cc:	682a      	ldr	r2, [r5, #0]
 800b1ce:	680e      	ldr	r6, [r1, #0]
 800b1d0:	b292      	uxth	r2, r2
 800b1d2:	4342      	muls	r2, r0
 800b1d4:	0c36      	lsrs	r6, r6, #16
 800b1d6:	1992      	adds	r2, r2, r6
 800b1d8:	19d2      	adds	r2, r2, r7
 800b1da:	0416      	lsls	r6, r2, #16
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	431e      	orrs	r6, r3
 800b1e0:	600e      	str	r6, [r1, #0]
 800b1e2:	cd40      	ldmia	r5!, {r6}
 800b1e4:	684b      	ldr	r3, [r1, #4]
 800b1e6:	0c36      	lsrs	r6, r6, #16
 800b1e8:	4346      	muls	r6, r0
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	0c12      	lsrs	r2, r2, #16
 800b1ee:	18f3      	adds	r3, r6, r3
 800b1f0:	189b      	adds	r3, r3, r2
 800b1f2:	9a05      	ldr	r2, [sp, #20]
 800b1f4:	0c1f      	lsrs	r7, r3, #16
 800b1f6:	3104      	adds	r1, #4
 800b1f8:	42aa      	cmp	r2, r5
 800b1fa:	d8e7      	bhi.n	800b1cc <__multiply+0x110>
 800b1fc:	4662      	mov	r2, ip
 800b1fe:	9906      	ldr	r1, [sp, #24]
 800b200:	5053      	str	r3, [r2, r1]
 800b202:	9b01      	ldr	r3, [sp, #4]
 800b204:	3304      	adds	r3, #4
 800b206:	9301      	str	r3, [sp, #4]
 800b208:	2304      	movs	r3, #4
 800b20a:	449c      	add	ip, r3
 800b20c:	e79b      	b.n	800b146 <__multiply+0x8a>
 800b20e:	9b03      	ldr	r3, [sp, #12]
 800b210:	3b01      	subs	r3, #1
 800b212:	9303      	str	r3, [sp, #12]
 800b214:	e79b      	b.n	800b14e <__multiply+0x92>
 800b216:	46c0      	nop			@ (mov r8, r8)
 800b218:	0800c49c 	.word	0x0800c49c
 800b21c:	0800c4ad 	.word	0x0800c4ad

0800b220 <__pow5mult>:
 800b220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b222:	2303      	movs	r3, #3
 800b224:	0015      	movs	r5, r2
 800b226:	0007      	movs	r7, r0
 800b228:	000e      	movs	r6, r1
 800b22a:	401a      	ands	r2, r3
 800b22c:	421d      	tst	r5, r3
 800b22e:	d008      	beq.n	800b242 <__pow5mult+0x22>
 800b230:	4925      	ldr	r1, [pc, #148]	@ (800b2c8 <__pow5mult+0xa8>)
 800b232:	3a01      	subs	r2, #1
 800b234:	0092      	lsls	r2, r2, #2
 800b236:	5852      	ldr	r2, [r2, r1]
 800b238:	2300      	movs	r3, #0
 800b23a:	0031      	movs	r1, r6
 800b23c:	f7ff fe92 	bl	800af64 <__multadd>
 800b240:	0006      	movs	r6, r0
 800b242:	10ad      	asrs	r5, r5, #2
 800b244:	d03d      	beq.n	800b2c2 <__pow5mult+0xa2>
 800b246:	69fc      	ldr	r4, [r7, #28]
 800b248:	2c00      	cmp	r4, #0
 800b24a:	d10f      	bne.n	800b26c <__pow5mult+0x4c>
 800b24c:	2010      	movs	r0, #16
 800b24e:	f7ff fd65 	bl	800ad1c <malloc>
 800b252:	1e02      	subs	r2, r0, #0
 800b254:	61f8      	str	r0, [r7, #28]
 800b256:	d105      	bne.n	800b264 <__pow5mult+0x44>
 800b258:	21b4      	movs	r1, #180	@ 0xb4
 800b25a:	4b1c      	ldr	r3, [pc, #112]	@ (800b2cc <__pow5mult+0xac>)
 800b25c:	481c      	ldr	r0, [pc, #112]	@ (800b2d0 <__pow5mult+0xb0>)
 800b25e:	31ff      	adds	r1, #255	@ 0xff
 800b260:	f000 fa8a 	bl	800b778 <__assert_func>
 800b264:	6044      	str	r4, [r0, #4]
 800b266:	6084      	str	r4, [r0, #8]
 800b268:	6004      	str	r4, [r0, #0]
 800b26a:	60c4      	str	r4, [r0, #12]
 800b26c:	69fb      	ldr	r3, [r7, #28]
 800b26e:	689c      	ldr	r4, [r3, #8]
 800b270:	9301      	str	r3, [sp, #4]
 800b272:	2c00      	cmp	r4, #0
 800b274:	d108      	bne.n	800b288 <__pow5mult+0x68>
 800b276:	0038      	movs	r0, r7
 800b278:	4916      	ldr	r1, [pc, #88]	@ (800b2d4 <__pow5mult+0xb4>)
 800b27a:	f7ff ff07 	bl	800b08c <__i2b>
 800b27e:	9b01      	ldr	r3, [sp, #4]
 800b280:	0004      	movs	r4, r0
 800b282:	6098      	str	r0, [r3, #8]
 800b284:	2300      	movs	r3, #0
 800b286:	6003      	str	r3, [r0, #0]
 800b288:	2301      	movs	r3, #1
 800b28a:	421d      	tst	r5, r3
 800b28c:	d00a      	beq.n	800b2a4 <__pow5mult+0x84>
 800b28e:	0031      	movs	r1, r6
 800b290:	0022      	movs	r2, r4
 800b292:	0038      	movs	r0, r7
 800b294:	f7ff ff12 	bl	800b0bc <__multiply>
 800b298:	0031      	movs	r1, r6
 800b29a:	9001      	str	r0, [sp, #4]
 800b29c:	0038      	movs	r0, r7
 800b29e:	f7ff fe3d 	bl	800af1c <_Bfree>
 800b2a2:	9e01      	ldr	r6, [sp, #4]
 800b2a4:	106d      	asrs	r5, r5, #1
 800b2a6:	d00c      	beq.n	800b2c2 <__pow5mult+0xa2>
 800b2a8:	6820      	ldr	r0, [r4, #0]
 800b2aa:	2800      	cmp	r0, #0
 800b2ac:	d107      	bne.n	800b2be <__pow5mult+0x9e>
 800b2ae:	0022      	movs	r2, r4
 800b2b0:	0021      	movs	r1, r4
 800b2b2:	0038      	movs	r0, r7
 800b2b4:	f7ff ff02 	bl	800b0bc <__multiply>
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	6020      	str	r0, [r4, #0]
 800b2bc:	6003      	str	r3, [r0, #0]
 800b2be:	0004      	movs	r4, r0
 800b2c0:	e7e2      	b.n	800b288 <__pow5mult+0x68>
 800b2c2:	0030      	movs	r0, r6
 800b2c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b2c6:	46c0      	nop			@ (mov r8, r8)
 800b2c8:	0800c508 	.word	0x0800c508
 800b2cc:	0800c42d 	.word	0x0800c42d
 800b2d0:	0800c4ad 	.word	0x0800c4ad
 800b2d4:	00000271 	.word	0x00000271

0800b2d8 <__lshift>:
 800b2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2da:	000c      	movs	r4, r1
 800b2dc:	0016      	movs	r6, r2
 800b2de:	6923      	ldr	r3, [r4, #16]
 800b2e0:	1157      	asrs	r7, r2, #5
 800b2e2:	b085      	sub	sp, #20
 800b2e4:	18fb      	adds	r3, r7, r3
 800b2e6:	9301      	str	r3, [sp, #4]
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	9300      	str	r3, [sp, #0]
 800b2ec:	6849      	ldr	r1, [r1, #4]
 800b2ee:	68a3      	ldr	r3, [r4, #8]
 800b2f0:	9002      	str	r0, [sp, #8]
 800b2f2:	9a00      	ldr	r2, [sp, #0]
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	db10      	blt.n	800b31a <__lshift+0x42>
 800b2f8:	9802      	ldr	r0, [sp, #8]
 800b2fa:	f7ff fdcb 	bl	800ae94 <_Balloc>
 800b2fe:	2300      	movs	r3, #0
 800b300:	0001      	movs	r1, r0
 800b302:	0005      	movs	r5, r0
 800b304:	001a      	movs	r2, r3
 800b306:	3114      	adds	r1, #20
 800b308:	4298      	cmp	r0, r3
 800b30a:	d10c      	bne.n	800b326 <__lshift+0x4e>
 800b30c:	21ef      	movs	r1, #239	@ 0xef
 800b30e:	002a      	movs	r2, r5
 800b310:	4b25      	ldr	r3, [pc, #148]	@ (800b3a8 <__lshift+0xd0>)
 800b312:	4826      	ldr	r0, [pc, #152]	@ (800b3ac <__lshift+0xd4>)
 800b314:	0049      	lsls	r1, r1, #1
 800b316:	f000 fa2f 	bl	800b778 <__assert_func>
 800b31a:	3101      	adds	r1, #1
 800b31c:	005b      	lsls	r3, r3, #1
 800b31e:	e7e8      	b.n	800b2f2 <__lshift+0x1a>
 800b320:	0098      	lsls	r0, r3, #2
 800b322:	500a      	str	r2, [r1, r0]
 800b324:	3301      	adds	r3, #1
 800b326:	42bb      	cmp	r3, r7
 800b328:	dbfa      	blt.n	800b320 <__lshift+0x48>
 800b32a:	43fb      	mvns	r3, r7
 800b32c:	17db      	asrs	r3, r3, #31
 800b32e:	401f      	ands	r7, r3
 800b330:	00bf      	lsls	r7, r7, #2
 800b332:	0023      	movs	r3, r4
 800b334:	201f      	movs	r0, #31
 800b336:	19c9      	adds	r1, r1, r7
 800b338:	0037      	movs	r7, r6
 800b33a:	6922      	ldr	r2, [r4, #16]
 800b33c:	3314      	adds	r3, #20
 800b33e:	0092      	lsls	r2, r2, #2
 800b340:	189a      	adds	r2, r3, r2
 800b342:	4007      	ands	r7, r0
 800b344:	4206      	tst	r6, r0
 800b346:	d029      	beq.n	800b39c <__lshift+0xc4>
 800b348:	3001      	adds	r0, #1
 800b34a:	1bc0      	subs	r0, r0, r7
 800b34c:	9003      	str	r0, [sp, #12]
 800b34e:	468c      	mov	ip, r1
 800b350:	2000      	movs	r0, #0
 800b352:	681e      	ldr	r6, [r3, #0]
 800b354:	40be      	lsls	r6, r7
 800b356:	4306      	orrs	r6, r0
 800b358:	4660      	mov	r0, ip
 800b35a:	c040      	stmia	r0!, {r6}
 800b35c:	4684      	mov	ip, r0
 800b35e:	9e03      	ldr	r6, [sp, #12]
 800b360:	cb01      	ldmia	r3!, {r0}
 800b362:	40f0      	lsrs	r0, r6
 800b364:	429a      	cmp	r2, r3
 800b366:	d8f4      	bhi.n	800b352 <__lshift+0x7a>
 800b368:	0026      	movs	r6, r4
 800b36a:	3615      	adds	r6, #21
 800b36c:	2304      	movs	r3, #4
 800b36e:	42b2      	cmp	r2, r6
 800b370:	d304      	bcc.n	800b37c <__lshift+0xa4>
 800b372:	1b13      	subs	r3, r2, r4
 800b374:	3b15      	subs	r3, #21
 800b376:	089b      	lsrs	r3, r3, #2
 800b378:	3301      	adds	r3, #1
 800b37a:	009b      	lsls	r3, r3, #2
 800b37c:	50c8      	str	r0, [r1, r3]
 800b37e:	2800      	cmp	r0, #0
 800b380:	d002      	beq.n	800b388 <__lshift+0xb0>
 800b382:	9b01      	ldr	r3, [sp, #4]
 800b384:	3302      	adds	r3, #2
 800b386:	9300      	str	r3, [sp, #0]
 800b388:	9b00      	ldr	r3, [sp, #0]
 800b38a:	9802      	ldr	r0, [sp, #8]
 800b38c:	3b01      	subs	r3, #1
 800b38e:	0021      	movs	r1, r4
 800b390:	612b      	str	r3, [r5, #16]
 800b392:	f7ff fdc3 	bl	800af1c <_Bfree>
 800b396:	0028      	movs	r0, r5
 800b398:	b005      	add	sp, #20
 800b39a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b39c:	cb01      	ldmia	r3!, {r0}
 800b39e:	c101      	stmia	r1!, {r0}
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d8fb      	bhi.n	800b39c <__lshift+0xc4>
 800b3a4:	e7f0      	b.n	800b388 <__lshift+0xb0>
 800b3a6:	46c0      	nop			@ (mov r8, r8)
 800b3a8:	0800c49c 	.word	0x0800c49c
 800b3ac:	0800c4ad 	.word	0x0800c4ad

0800b3b0 <__mcmp>:
 800b3b0:	b530      	push	{r4, r5, lr}
 800b3b2:	690b      	ldr	r3, [r1, #16]
 800b3b4:	6904      	ldr	r4, [r0, #16]
 800b3b6:	0002      	movs	r2, r0
 800b3b8:	1ae0      	subs	r0, r4, r3
 800b3ba:	429c      	cmp	r4, r3
 800b3bc:	d10f      	bne.n	800b3de <__mcmp+0x2e>
 800b3be:	3214      	adds	r2, #20
 800b3c0:	009b      	lsls	r3, r3, #2
 800b3c2:	3114      	adds	r1, #20
 800b3c4:	0014      	movs	r4, r2
 800b3c6:	18c9      	adds	r1, r1, r3
 800b3c8:	18d2      	adds	r2, r2, r3
 800b3ca:	3a04      	subs	r2, #4
 800b3cc:	3904      	subs	r1, #4
 800b3ce:	6815      	ldr	r5, [r2, #0]
 800b3d0:	680b      	ldr	r3, [r1, #0]
 800b3d2:	429d      	cmp	r5, r3
 800b3d4:	d004      	beq.n	800b3e0 <__mcmp+0x30>
 800b3d6:	2001      	movs	r0, #1
 800b3d8:	429d      	cmp	r5, r3
 800b3da:	d200      	bcs.n	800b3de <__mcmp+0x2e>
 800b3dc:	3802      	subs	r0, #2
 800b3de:	bd30      	pop	{r4, r5, pc}
 800b3e0:	4294      	cmp	r4, r2
 800b3e2:	d3f2      	bcc.n	800b3ca <__mcmp+0x1a>
 800b3e4:	e7fb      	b.n	800b3de <__mcmp+0x2e>
	...

0800b3e8 <__mdiff>:
 800b3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3ea:	000c      	movs	r4, r1
 800b3ec:	b087      	sub	sp, #28
 800b3ee:	9000      	str	r0, [sp, #0]
 800b3f0:	0011      	movs	r1, r2
 800b3f2:	0020      	movs	r0, r4
 800b3f4:	0017      	movs	r7, r2
 800b3f6:	f7ff ffdb 	bl	800b3b0 <__mcmp>
 800b3fa:	1e05      	subs	r5, r0, #0
 800b3fc:	d110      	bne.n	800b420 <__mdiff+0x38>
 800b3fe:	0001      	movs	r1, r0
 800b400:	9800      	ldr	r0, [sp, #0]
 800b402:	f7ff fd47 	bl	800ae94 <_Balloc>
 800b406:	1e02      	subs	r2, r0, #0
 800b408:	d104      	bne.n	800b414 <__mdiff+0x2c>
 800b40a:	4b40      	ldr	r3, [pc, #256]	@ (800b50c <__mdiff+0x124>)
 800b40c:	4840      	ldr	r0, [pc, #256]	@ (800b510 <__mdiff+0x128>)
 800b40e:	4941      	ldr	r1, [pc, #260]	@ (800b514 <__mdiff+0x12c>)
 800b410:	f000 f9b2 	bl	800b778 <__assert_func>
 800b414:	2301      	movs	r3, #1
 800b416:	6145      	str	r5, [r0, #20]
 800b418:	6103      	str	r3, [r0, #16]
 800b41a:	0010      	movs	r0, r2
 800b41c:	b007      	add	sp, #28
 800b41e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b420:	2600      	movs	r6, #0
 800b422:	42b0      	cmp	r0, r6
 800b424:	da03      	bge.n	800b42e <__mdiff+0x46>
 800b426:	0023      	movs	r3, r4
 800b428:	003c      	movs	r4, r7
 800b42a:	001f      	movs	r7, r3
 800b42c:	3601      	adds	r6, #1
 800b42e:	6861      	ldr	r1, [r4, #4]
 800b430:	9800      	ldr	r0, [sp, #0]
 800b432:	f7ff fd2f 	bl	800ae94 <_Balloc>
 800b436:	1e02      	subs	r2, r0, #0
 800b438:	d103      	bne.n	800b442 <__mdiff+0x5a>
 800b43a:	4b34      	ldr	r3, [pc, #208]	@ (800b50c <__mdiff+0x124>)
 800b43c:	4834      	ldr	r0, [pc, #208]	@ (800b510 <__mdiff+0x128>)
 800b43e:	4936      	ldr	r1, [pc, #216]	@ (800b518 <__mdiff+0x130>)
 800b440:	e7e6      	b.n	800b410 <__mdiff+0x28>
 800b442:	6923      	ldr	r3, [r4, #16]
 800b444:	3414      	adds	r4, #20
 800b446:	9300      	str	r3, [sp, #0]
 800b448:	009b      	lsls	r3, r3, #2
 800b44a:	18e3      	adds	r3, r4, r3
 800b44c:	0021      	movs	r1, r4
 800b44e:	9401      	str	r4, [sp, #4]
 800b450:	003c      	movs	r4, r7
 800b452:	9302      	str	r3, [sp, #8]
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	3414      	adds	r4, #20
 800b458:	009b      	lsls	r3, r3, #2
 800b45a:	18e3      	adds	r3, r4, r3
 800b45c:	9303      	str	r3, [sp, #12]
 800b45e:	0003      	movs	r3, r0
 800b460:	60c6      	str	r6, [r0, #12]
 800b462:	468c      	mov	ip, r1
 800b464:	2000      	movs	r0, #0
 800b466:	3314      	adds	r3, #20
 800b468:	9304      	str	r3, [sp, #16]
 800b46a:	9305      	str	r3, [sp, #20]
 800b46c:	4663      	mov	r3, ip
 800b46e:	cb20      	ldmia	r3!, {r5}
 800b470:	b2a9      	uxth	r1, r5
 800b472:	000e      	movs	r6, r1
 800b474:	469c      	mov	ip, r3
 800b476:	cc08      	ldmia	r4!, {r3}
 800b478:	0c2d      	lsrs	r5, r5, #16
 800b47a:	b299      	uxth	r1, r3
 800b47c:	1a71      	subs	r1, r6, r1
 800b47e:	1809      	adds	r1, r1, r0
 800b480:	0c1b      	lsrs	r3, r3, #16
 800b482:	1408      	asrs	r0, r1, #16
 800b484:	1aeb      	subs	r3, r5, r3
 800b486:	181b      	adds	r3, r3, r0
 800b488:	1418      	asrs	r0, r3, #16
 800b48a:	b289      	uxth	r1, r1
 800b48c:	041b      	lsls	r3, r3, #16
 800b48e:	4319      	orrs	r1, r3
 800b490:	9b05      	ldr	r3, [sp, #20]
 800b492:	c302      	stmia	r3!, {r1}
 800b494:	9305      	str	r3, [sp, #20]
 800b496:	9b03      	ldr	r3, [sp, #12]
 800b498:	42a3      	cmp	r3, r4
 800b49a:	d8e7      	bhi.n	800b46c <__mdiff+0x84>
 800b49c:	0039      	movs	r1, r7
 800b49e:	9c03      	ldr	r4, [sp, #12]
 800b4a0:	3115      	adds	r1, #21
 800b4a2:	2304      	movs	r3, #4
 800b4a4:	428c      	cmp	r4, r1
 800b4a6:	d304      	bcc.n	800b4b2 <__mdiff+0xca>
 800b4a8:	1be3      	subs	r3, r4, r7
 800b4aa:	3b15      	subs	r3, #21
 800b4ac:	089b      	lsrs	r3, r3, #2
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	009b      	lsls	r3, r3, #2
 800b4b2:	9901      	ldr	r1, [sp, #4]
 800b4b4:	18cd      	adds	r5, r1, r3
 800b4b6:	9904      	ldr	r1, [sp, #16]
 800b4b8:	002e      	movs	r6, r5
 800b4ba:	18cb      	adds	r3, r1, r3
 800b4bc:	001f      	movs	r7, r3
 800b4be:	9902      	ldr	r1, [sp, #8]
 800b4c0:	428e      	cmp	r6, r1
 800b4c2:	d311      	bcc.n	800b4e8 <__mdiff+0x100>
 800b4c4:	9c02      	ldr	r4, [sp, #8]
 800b4c6:	1ee9      	subs	r1, r5, #3
 800b4c8:	2000      	movs	r0, #0
 800b4ca:	428c      	cmp	r4, r1
 800b4cc:	d304      	bcc.n	800b4d8 <__mdiff+0xf0>
 800b4ce:	0021      	movs	r1, r4
 800b4d0:	3103      	adds	r1, #3
 800b4d2:	1b49      	subs	r1, r1, r5
 800b4d4:	0889      	lsrs	r1, r1, #2
 800b4d6:	0088      	lsls	r0, r1, #2
 800b4d8:	181b      	adds	r3, r3, r0
 800b4da:	3b04      	subs	r3, #4
 800b4dc:	6819      	ldr	r1, [r3, #0]
 800b4de:	2900      	cmp	r1, #0
 800b4e0:	d010      	beq.n	800b504 <__mdiff+0x11c>
 800b4e2:	9b00      	ldr	r3, [sp, #0]
 800b4e4:	6113      	str	r3, [r2, #16]
 800b4e6:	e798      	b.n	800b41a <__mdiff+0x32>
 800b4e8:	4684      	mov	ip, r0
 800b4ea:	ce02      	ldmia	r6!, {r1}
 800b4ec:	b288      	uxth	r0, r1
 800b4ee:	4460      	add	r0, ip
 800b4f0:	1400      	asrs	r0, r0, #16
 800b4f2:	0c0c      	lsrs	r4, r1, #16
 800b4f4:	1904      	adds	r4, r0, r4
 800b4f6:	4461      	add	r1, ip
 800b4f8:	1420      	asrs	r0, r4, #16
 800b4fa:	b289      	uxth	r1, r1
 800b4fc:	0424      	lsls	r4, r4, #16
 800b4fe:	4321      	orrs	r1, r4
 800b500:	c702      	stmia	r7!, {r1}
 800b502:	e7dc      	b.n	800b4be <__mdiff+0xd6>
 800b504:	9900      	ldr	r1, [sp, #0]
 800b506:	3901      	subs	r1, #1
 800b508:	9100      	str	r1, [sp, #0]
 800b50a:	e7e6      	b.n	800b4da <__mdiff+0xf2>
 800b50c:	0800c49c 	.word	0x0800c49c
 800b510:	0800c4ad 	.word	0x0800c4ad
 800b514:	00000237 	.word	0x00000237
 800b518:	00000245 	.word	0x00000245

0800b51c <__d2b>:
 800b51c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b51e:	2101      	movs	r1, #1
 800b520:	0016      	movs	r6, r2
 800b522:	001f      	movs	r7, r3
 800b524:	f7ff fcb6 	bl	800ae94 <_Balloc>
 800b528:	1e04      	subs	r4, r0, #0
 800b52a:	d105      	bne.n	800b538 <__d2b+0x1c>
 800b52c:	0022      	movs	r2, r4
 800b52e:	4b25      	ldr	r3, [pc, #148]	@ (800b5c4 <__d2b+0xa8>)
 800b530:	4825      	ldr	r0, [pc, #148]	@ (800b5c8 <__d2b+0xac>)
 800b532:	4926      	ldr	r1, [pc, #152]	@ (800b5cc <__d2b+0xb0>)
 800b534:	f000 f920 	bl	800b778 <__assert_func>
 800b538:	033b      	lsls	r3, r7, #12
 800b53a:	007d      	lsls	r5, r7, #1
 800b53c:	0b1b      	lsrs	r3, r3, #12
 800b53e:	0d6d      	lsrs	r5, r5, #21
 800b540:	d002      	beq.n	800b548 <__d2b+0x2c>
 800b542:	2280      	movs	r2, #128	@ 0x80
 800b544:	0352      	lsls	r2, r2, #13
 800b546:	4313      	orrs	r3, r2
 800b548:	9301      	str	r3, [sp, #4]
 800b54a:	2e00      	cmp	r6, #0
 800b54c:	d025      	beq.n	800b59a <__d2b+0x7e>
 800b54e:	4668      	mov	r0, sp
 800b550:	9600      	str	r6, [sp, #0]
 800b552:	f7ff fd6c 	bl	800b02e <__lo0bits>
 800b556:	9b01      	ldr	r3, [sp, #4]
 800b558:	9900      	ldr	r1, [sp, #0]
 800b55a:	2800      	cmp	r0, #0
 800b55c:	d01b      	beq.n	800b596 <__d2b+0x7a>
 800b55e:	2220      	movs	r2, #32
 800b560:	001e      	movs	r6, r3
 800b562:	1a12      	subs	r2, r2, r0
 800b564:	4096      	lsls	r6, r2
 800b566:	0032      	movs	r2, r6
 800b568:	40c3      	lsrs	r3, r0
 800b56a:	430a      	orrs	r2, r1
 800b56c:	6162      	str	r2, [r4, #20]
 800b56e:	9301      	str	r3, [sp, #4]
 800b570:	9e01      	ldr	r6, [sp, #4]
 800b572:	61a6      	str	r6, [r4, #24]
 800b574:	1e73      	subs	r3, r6, #1
 800b576:	419e      	sbcs	r6, r3
 800b578:	3601      	adds	r6, #1
 800b57a:	6126      	str	r6, [r4, #16]
 800b57c:	2d00      	cmp	r5, #0
 800b57e:	d014      	beq.n	800b5aa <__d2b+0x8e>
 800b580:	2635      	movs	r6, #53	@ 0x35
 800b582:	4b13      	ldr	r3, [pc, #76]	@ (800b5d0 <__d2b+0xb4>)
 800b584:	18ed      	adds	r5, r5, r3
 800b586:	9b08      	ldr	r3, [sp, #32]
 800b588:	182d      	adds	r5, r5, r0
 800b58a:	601d      	str	r5, [r3, #0]
 800b58c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b58e:	1a36      	subs	r6, r6, r0
 800b590:	601e      	str	r6, [r3, #0]
 800b592:	0020      	movs	r0, r4
 800b594:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b596:	6161      	str	r1, [r4, #20]
 800b598:	e7ea      	b.n	800b570 <__d2b+0x54>
 800b59a:	a801      	add	r0, sp, #4
 800b59c:	f7ff fd47 	bl	800b02e <__lo0bits>
 800b5a0:	9b01      	ldr	r3, [sp, #4]
 800b5a2:	2601      	movs	r6, #1
 800b5a4:	6163      	str	r3, [r4, #20]
 800b5a6:	3020      	adds	r0, #32
 800b5a8:	e7e7      	b.n	800b57a <__d2b+0x5e>
 800b5aa:	4b0a      	ldr	r3, [pc, #40]	@ (800b5d4 <__d2b+0xb8>)
 800b5ac:	18c0      	adds	r0, r0, r3
 800b5ae:	9b08      	ldr	r3, [sp, #32]
 800b5b0:	6018      	str	r0, [r3, #0]
 800b5b2:	4b09      	ldr	r3, [pc, #36]	@ (800b5d8 <__d2b+0xbc>)
 800b5b4:	18f3      	adds	r3, r6, r3
 800b5b6:	009b      	lsls	r3, r3, #2
 800b5b8:	18e3      	adds	r3, r4, r3
 800b5ba:	6958      	ldr	r0, [r3, #20]
 800b5bc:	f7ff fd16 	bl	800afec <__hi0bits>
 800b5c0:	0176      	lsls	r6, r6, #5
 800b5c2:	e7e3      	b.n	800b58c <__d2b+0x70>
 800b5c4:	0800c49c 	.word	0x0800c49c
 800b5c8:	0800c4ad 	.word	0x0800c4ad
 800b5cc:	0000030f 	.word	0x0000030f
 800b5d0:	fffffbcd 	.word	0xfffffbcd
 800b5d4:	fffffbce 	.word	0xfffffbce
 800b5d8:	3fffffff 	.word	0x3fffffff

0800b5dc <__sflush_r>:
 800b5dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5de:	220c      	movs	r2, #12
 800b5e0:	5e8b      	ldrsh	r3, [r1, r2]
 800b5e2:	0005      	movs	r5, r0
 800b5e4:	000c      	movs	r4, r1
 800b5e6:	071a      	lsls	r2, r3, #28
 800b5e8:	d456      	bmi.n	800b698 <__sflush_r+0xbc>
 800b5ea:	684a      	ldr	r2, [r1, #4]
 800b5ec:	2a00      	cmp	r2, #0
 800b5ee:	dc02      	bgt.n	800b5f6 <__sflush_r+0x1a>
 800b5f0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800b5f2:	2a00      	cmp	r2, #0
 800b5f4:	dd4e      	ble.n	800b694 <__sflush_r+0xb8>
 800b5f6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800b5f8:	2f00      	cmp	r7, #0
 800b5fa:	d04b      	beq.n	800b694 <__sflush_r+0xb8>
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	2080      	movs	r0, #128	@ 0x80
 800b600:	682e      	ldr	r6, [r5, #0]
 800b602:	602a      	str	r2, [r5, #0]
 800b604:	001a      	movs	r2, r3
 800b606:	0140      	lsls	r0, r0, #5
 800b608:	6a21      	ldr	r1, [r4, #32]
 800b60a:	4002      	ands	r2, r0
 800b60c:	4203      	tst	r3, r0
 800b60e:	d033      	beq.n	800b678 <__sflush_r+0x9c>
 800b610:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b612:	89a3      	ldrh	r3, [r4, #12]
 800b614:	075b      	lsls	r3, r3, #29
 800b616:	d506      	bpl.n	800b626 <__sflush_r+0x4a>
 800b618:	6863      	ldr	r3, [r4, #4]
 800b61a:	1ad2      	subs	r2, r2, r3
 800b61c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d001      	beq.n	800b626 <__sflush_r+0x4a>
 800b622:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b624:	1ad2      	subs	r2, r2, r3
 800b626:	2300      	movs	r3, #0
 800b628:	0028      	movs	r0, r5
 800b62a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800b62c:	6a21      	ldr	r1, [r4, #32]
 800b62e:	47b8      	blx	r7
 800b630:	89a2      	ldrh	r2, [r4, #12]
 800b632:	1c43      	adds	r3, r0, #1
 800b634:	d106      	bne.n	800b644 <__sflush_r+0x68>
 800b636:	6829      	ldr	r1, [r5, #0]
 800b638:	291d      	cmp	r1, #29
 800b63a:	d846      	bhi.n	800b6ca <__sflush_r+0xee>
 800b63c:	4b29      	ldr	r3, [pc, #164]	@ (800b6e4 <__sflush_r+0x108>)
 800b63e:	410b      	asrs	r3, r1
 800b640:	07db      	lsls	r3, r3, #31
 800b642:	d442      	bmi.n	800b6ca <__sflush_r+0xee>
 800b644:	2300      	movs	r3, #0
 800b646:	6063      	str	r3, [r4, #4]
 800b648:	6923      	ldr	r3, [r4, #16]
 800b64a:	6023      	str	r3, [r4, #0]
 800b64c:	04d2      	lsls	r2, r2, #19
 800b64e:	d505      	bpl.n	800b65c <__sflush_r+0x80>
 800b650:	1c43      	adds	r3, r0, #1
 800b652:	d102      	bne.n	800b65a <__sflush_r+0x7e>
 800b654:	682b      	ldr	r3, [r5, #0]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d100      	bne.n	800b65c <__sflush_r+0x80>
 800b65a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b65c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b65e:	602e      	str	r6, [r5, #0]
 800b660:	2900      	cmp	r1, #0
 800b662:	d017      	beq.n	800b694 <__sflush_r+0xb8>
 800b664:	0023      	movs	r3, r4
 800b666:	3344      	adds	r3, #68	@ 0x44
 800b668:	4299      	cmp	r1, r3
 800b66a:	d002      	beq.n	800b672 <__sflush_r+0x96>
 800b66c:	0028      	movs	r0, r5
 800b66e:	f7ff fb0b 	bl	800ac88 <_free_r>
 800b672:	2300      	movs	r3, #0
 800b674:	6363      	str	r3, [r4, #52]	@ 0x34
 800b676:	e00d      	b.n	800b694 <__sflush_r+0xb8>
 800b678:	2301      	movs	r3, #1
 800b67a:	0028      	movs	r0, r5
 800b67c:	47b8      	blx	r7
 800b67e:	0002      	movs	r2, r0
 800b680:	1c43      	adds	r3, r0, #1
 800b682:	d1c6      	bne.n	800b612 <__sflush_r+0x36>
 800b684:	682b      	ldr	r3, [r5, #0]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d0c3      	beq.n	800b612 <__sflush_r+0x36>
 800b68a:	2b1d      	cmp	r3, #29
 800b68c:	d001      	beq.n	800b692 <__sflush_r+0xb6>
 800b68e:	2b16      	cmp	r3, #22
 800b690:	d11a      	bne.n	800b6c8 <__sflush_r+0xec>
 800b692:	602e      	str	r6, [r5, #0]
 800b694:	2000      	movs	r0, #0
 800b696:	e01e      	b.n	800b6d6 <__sflush_r+0xfa>
 800b698:	690e      	ldr	r6, [r1, #16]
 800b69a:	2e00      	cmp	r6, #0
 800b69c:	d0fa      	beq.n	800b694 <__sflush_r+0xb8>
 800b69e:	680f      	ldr	r7, [r1, #0]
 800b6a0:	600e      	str	r6, [r1, #0]
 800b6a2:	1bba      	subs	r2, r7, r6
 800b6a4:	9201      	str	r2, [sp, #4]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	079b      	lsls	r3, r3, #30
 800b6aa:	d100      	bne.n	800b6ae <__sflush_r+0xd2>
 800b6ac:	694a      	ldr	r2, [r1, #20]
 800b6ae:	60a2      	str	r2, [r4, #8]
 800b6b0:	9b01      	ldr	r3, [sp, #4]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	ddee      	ble.n	800b694 <__sflush_r+0xb8>
 800b6b6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b6b8:	0032      	movs	r2, r6
 800b6ba:	001f      	movs	r7, r3
 800b6bc:	0028      	movs	r0, r5
 800b6be:	9b01      	ldr	r3, [sp, #4]
 800b6c0:	6a21      	ldr	r1, [r4, #32]
 800b6c2:	47b8      	blx	r7
 800b6c4:	2800      	cmp	r0, #0
 800b6c6:	dc07      	bgt.n	800b6d8 <__sflush_r+0xfc>
 800b6c8:	89a2      	ldrh	r2, [r4, #12]
 800b6ca:	2340      	movs	r3, #64	@ 0x40
 800b6cc:	2001      	movs	r0, #1
 800b6ce:	4313      	orrs	r3, r2
 800b6d0:	b21b      	sxth	r3, r3
 800b6d2:	81a3      	strh	r3, [r4, #12]
 800b6d4:	4240      	negs	r0, r0
 800b6d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b6d8:	9b01      	ldr	r3, [sp, #4]
 800b6da:	1836      	adds	r6, r6, r0
 800b6dc:	1a1b      	subs	r3, r3, r0
 800b6de:	9301      	str	r3, [sp, #4]
 800b6e0:	e7e6      	b.n	800b6b0 <__sflush_r+0xd4>
 800b6e2:	46c0      	nop			@ (mov r8, r8)
 800b6e4:	dfbffffe 	.word	0xdfbffffe

0800b6e8 <_fflush_r>:
 800b6e8:	690b      	ldr	r3, [r1, #16]
 800b6ea:	b570      	push	{r4, r5, r6, lr}
 800b6ec:	0005      	movs	r5, r0
 800b6ee:	000c      	movs	r4, r1
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d102      	bne.n	800b6fa <_fflush_r+0x12>
 800b6f4:	2500      	movs	r5, #0
 800b6f6:	0028      	movs	r0, r5
 800b6f8:	bd70      	pop	{r4, r5, r6, pc}
 800b6fa:	2800      	cmp	r0, #0
 800b6fc:	d004      	beq.n	800b708 <_fflush_r+0x20>
 800b6fe:	6a03      	ldr	r3, [r0, #32]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d101      	bne.n	800b708 <_fflush_r+0x20>
 800b704:	f7fe fb2c 	bl	8009d60 <__sinit>
 800b708:	220c      	movs	r2, #12
 800b70a:	5ea3      	ldrsh	r3, [r4, r2]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d0f1      	beq.n	800b6f4 <_fflush_r+0xc>
 800b710:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b712:	07d2      	lsls	r2, r2, #31
 800b714:	d404      	bmi.n	800b720 <_fflush_r+0x38>
 800b716:	059b      	lsls	r3, r3, #22
 800b718:	d402      	bmi.n	800b720 <_fflush_r+0x38>
 800b71a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b71c:	f7fe fc25 	bl	8009f6a <__retarget_lock_acquire_recursive>
 800b720:	0028      	movs	r0, r5
 800b722:	0021      	movs	r1, r4
 800b724:	f7ff ff5a 	bl	800b5dc <__sflush_r>
 800b728:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b72a:	0005      	movs	r5, r0
 800b72c:	07db      	lsls	r3, r3, #31
 800b72e:	d4e2      	bmi.n	800b6f6 <_fflush_r+0xe>
 800b730:	89a3      	ldrh	r3, [r4, #12]
 800b732:	059b      	lsls	r3, r3, #22
 800b734:	d4df      	bmi.n	800b6f6 <_fflush_r+0xe>
 800b736:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b738:	f7fe fc18 	bl	8009f6c <__retarget_lock_release_recursive>
 800b73c:	e7db      	b.n	800b6f6 <_fflush_r+0xe>
	...

0800b740 <_sbrk_r>:
 800b740:	2300      	movs	r3, #0
 800b742:	b570      	push	{r4, r5, r6, lr}
 800b744:	4d06      	ldr	r5, [pc, #24]	@ (800b760 <_sbrk_r+0x20>)
 800b746:	0004      	movs	r4, r0
 800b748:	0008      	movs	r0, r1
 800b74a:	602b      	str	r3, [r5, #0]
 800b74c:	f7f9 fe32 	bl	80053b4 <_sbrk>
 800b750:	1c43      	adds	r3, r0, #1
 800b752:	d103      	bne.n	800b75c <_sbrk_r+0x1c>
 800b754:	682b      	ldr	r3, [r5, #0]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d000      	beq.n	800b75c <_sbrk_r+0x1c>
 800b75a:	6023      	str	r3, [r4, #0]
 800b75c:	bd70      	pop	{r4, r5, r6, pc}
 800b75e:	46c0      	nop			@ (mov r8, r8)
 800b760:	20000520 	.word	0x20000520

0800b764 <memcpy>:
 800b764:	2300      	movs	r3, #0
 800b766:	b510      	push	{r4, lr}
 800b768:	429a      	cmp	r2, r3
 800b76a:	d100      	bne.n	800b76e <memcpy+0xa>
 800b76c:	bd10      	pop	{r4, pc}
 800b76e:	5ccc      	ldrb	r4, [r1, r3]
 800b770:	54c4      	strb	r4, [r0, r3]
 800b772:	3301      	adds	r3, #1
 800b774:	e7f8      	b.n	800b768 <memcpy+0x4>
	...

0800b778 <__assert_func>:
 800b778:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b77a:	0014      	movs	r4, r2
 800b77c:	001a      	movs	r2, r3
 800b77e:	4b09      	ldr	r3, [pc, #36]	@ (800b7a4 <__assert_func+0x2c>)
 800b780:	0005      	movs	r5, r0
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	000e      	movs	r6, r1
 800b786:	68d8      	ldr	r0, [r3, #12]
 800b788:	4b07      	ldr	r3, [pc, #28]	@ (800b7a8 <__assert_func+0x30>)
 800b78a:	2c00      	cmp	r4, #0
 800b78c:	d101      	bne.n	800b792 <__assert_func+0x1a>
 800b78e:	4b07      	ldr	r3, [pc, #28]	@ (800b7ac <__assert_func+0x34>)
 800b790:	001c      	movs	r4, r3
 800b792:	4907      	ldr	r1, [pc, #28]	@ (800b7b0 <__assert_func+0x38>)
 800b794:	9301      	str	r3, [sp, #4]
 800b796:	9402      	str	r4, [sp, #8]
 800b798:	002b      	movs	r3, r5
 800b79a:	9600      	str	r6, [sp, #0]
 800b79c:	f000 f856 	bl	800b84c <fiprintf>
 800b7a0:	f000 f864 	bl	800b86c <abort>
 800b7a4:	2000001c 	.word	0x2000001c
 800b7a8:	0800c612 	.word	0x0800c612
 800b7ac:	0800c64d 	.word	0x0800c64d
 800b7b0:	0800c61f 	.word	0x0800c61f

0800b7b4 <_calloc_r>:
 800b7b4:	b570      	push	{r4, r5, r6, lr}
 800b7b6:	0c0b      	lsrs	r3, r1, #16
 800b7b8:	0c15      	lsrs	r5, r2, #16
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d11e      	bne.n	800b7fc <_calloc_r+0x48>
 800b7be:	2d00      	cmp	r5, #0
 800b7c0:	d10c      	bne.n	800b7dc <_calloc_r+0x28>
 800b7c2:	b289      	uxth	r1, r1
 800b7c4:	b294      	uxth	r4, r2
 800b7c6:	434c      	muls	r4, r1
 800b7c8:	0021      	movs	r1, r4
 800b7ca:	f7ff fad3 	bl	800ad74 <_malloc_r>
 800b7ce:	1e05      	subs	r5, r0, #0
 800b7d0:	d01a      	beq.n	800b808 <_calloc_r+0x54>
 800b7d2:	0022      	movs	r2, r4
 800b7d4:	2100      	movs	r1, #0
 800b7d6:	f7fe fb43 	bl	8009e60 <memset>
 800b7da:	e016      	b.n	800b80a <_calloc_r+0x56>
 800b7dc:	1c2b      	adds	r3, r5, #0
 800b7de:	1c0c      	adds	r4, r1, #0
 800b7e0:	b289      	uxth	r1, r1
 800b7e2:	b292      	uxth	r2, r2
 800b7e4:	434a      	muls	r2, r1
 800b7e6:	b29b      	uxth	r3, r3
 800b7e8:	b2a1      	uxth	r1, r4
 800b7ea:	4359      	muls	r1, r3
 800b7ec:	0c14      	lsrs	r4, r2, #16
 800b7ee:	190c      	adds	r4, r1, r4
 800b7f0:	0c23      	lsrs	r3, r4, #16
 800b7f2:	d107      	bne.n	800b804 <_calloc_r+0x50>
 800b7f4:	0424      	lsls	r4, r4, #16
 800b7f6:	b292      	uxth	r2, r2
 800b7f8:	4314      	orrs	r4, r2
 800b7fa:	e7e5      	b.n	800b7c8 <_calloc_r+0x14>
 800b7fc:	2d00      	cmp	r5, #0
 800b7fe:	d101      	bne.n	800b804 <_calloc_r+0x50>
 800b800:	1c14      	adds	r4, r2, #0
 800b802:	e7ed      	b.n	800b7e0 <_calloc_r+0x2c>
 800b804:	230c      	movs	r3, #12
 800b806:	6003      	str	r3, [r0, #0]
 800b808:	2500      	movs	r5, #0
 800b80a:	0028      	movs	r0, r5
 800b80c:	bd70      	pop	{r4, r5, r6, pc}

0800b80e <__ascii_mbtowc>:
 800b80e:	b082      	sub	sp, #8
 800b810:	2900      	cmp	r1, #0
 800b812:	d100      	bne.n	800b816 <__ascii_mbtowc+0x8>
 800b814:	a901      	add	r1, sp, #4
 800b816:	1e10      	subs	r0, r2, #0
 800b818:	d006      	beq.n	800b828 <__ascii_mbtowc+0x1a>
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d006      	beq.n	800b82c <__ascii_mbtowc+0x1e>
 800b81e:	7813      	ldrb	r3, [r2, #0]
 800b820:	600b      	str	r3, [r1, #0]
 800b822:	7810      	ldrb	r0, [r2, #0]
 800b824:	1e43      	subs	r3, r0, #1
 800b826:	4198      	sbcs	r0, r3
 800b828:	b002      	add	sp, #8
 800b82a:	4770      	bx	lr
 800b82c:	2002      	movs	r0, #2
 800b82e:	4240      	negs	r0, r0
 800b830:	e7fa      	b.n	800b828 <__ascii_mbtowc+0x1a>

0800b832 <__ascii_wctomb>:
 800b832:	0003      	movs	r3, r0
 800b834:	1e08      	subs	r0, r1, #0
 800b836:	d005      	beq.n	800b844 <__ascii_wctomb+0x12>
 800b838:	2aff      	cmp	r2, #255	@ 0xff
 800b83a:	d904      	bls.n	800b846 <__ascii_wctomb+0x14>
 800b83c:	228a      	movs	r2, #138	@ 0x8a
 800b83e:	2001      	movs	r0, #1
 800b840:	601a      	str	r2, [r3, #0]
 800b842:	4240      	negs	r0, r0
 800b844:	4770      	bx	lr
 800b846:	2001      	movs	r0, #1
 800b848:	700a      	strb	r2, [r1, #0]
 800b84a:	e7fb      	b.n	800b844 <__ascii_wctomb+0x12>

0800b84c <fiprintf>:
 800b84c:	b40e      	push	{r1, r2, r3}
 800b84e:	b517      	push	{r0, r1, r2, r4, lr}
 800b850:	4c05      	ldr	r4, [pc, #20]	@ (800b868 <fiprintf+0x1c>)
 800b852:	ab05      	add	r3, sp, #20
 800b854:	cb04      	ldmia	r3!, {r2}
 800b856:	0001      	movs	r1, r0
 800b858:	6820      	ldr	r0, [r4, #0]
 800b85a:	9301      	str	r3, [sp, #4]
 800b85c:	f000 f834 	bl	800b8c8 <_vfiprintf_r>
 800b860:	bc1e      	pop	{r1, r2, r3, r4}
 800b862:	bc08      	pop	{r3}
 800b864:	b003      	add	sp, #12
 800b866:	4718      	bx	r3
 800b868:	2000001c 	.word	0x2000001c

0800b86c <abort>:
 800b86c:	2006      	movs	r0, #6
 800b86e:	b510      	push	{r4, lr}
 800b870:	f000 fa10 	bl	800bc94 <raise>
 800b874:	2001      	movs	r0, #1
 800b876:	f7f9 fd2a 	bl	80052ce <_exit>

0800b87a <__sfputc_r>:
 800b87a:	6893      	ldr	r3, [r2, #8]
 800b87c:	b510      	push	{r4, lr}
 800b87e:	3b01      	subs	r3, #1
 800b880:	6093      	str	r3, [r2, #8]
 800b882:	2b00      	cmp	r3, #0
 800b884:	da04      	bge.n	800b890 <__sfputc_r+0x16>
 800b886:	6994      	ldr	r4, [r2, #24]
 800b888:	42a3      	cmp	r3, r4
 800b88a:	db07      	blt.n	800b89c <__sfputc_r+0x22>
 800b88c:	290a      	cmp	r1, #10
 800b88e:	d005      	beq.n	800b89c <__sfputc_r+0x22>
 800b890:	6813      	ldr	r3, [r2, #0]
 800b892:	1c58      	adds	r0, r3, #1
 800b894:	6010      	str	r0, [r2, #0]
 800b896:	7019      	strb	r1, [r3, #0]
 800b898:	0008      	movs	r0, r1
 800b89a:	bd10      	pop	{r4, pc}
 800b89c:	f000 f930 	bl	800bb00 <__swbuf_r>
 800b8a0:	0001      	movs	r1, r0
 800b8a2:	e7f9      	b.n	800b898 <__sfputc_r+0x1e>

0800b8a4 <__sfputs_r>:
 800b8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8a6:	0006      	movs	r6, r0
 800b8a8:	000f      	movs	r7, r1
 800b8aa:	0014      	movs	r4, r2
 800b8ac:	18d5      	adds	r5, r2, r3
 800b8ae:	42ac      	cmp	r4, r5
 800b8b0:	d101      	bne.n	800b8b6 <__sfputs_r+0x12>
 800b8b2:	2000      	movs	r0, #0
 800b8b4:	e007      	b.n	800b8c6 <__sfputs_r+0x22>
 800b8b6:	7821      	ldrb	r1, [r4, #0]
 800b8b8:	003a      	movs	r2, r7
 800b8ba:	0030      	movs	r0, r6
 800b8bc:	f7ff ffdd 	bl	800b87a <__sfputc_r>
 800b8c0:	3401      	adds	r4, #1
 800b8c2:	1c43      	adds	r3, r0, #1
 800b8c4:	d1f3      	bne.n	800b8ae <__sfputs_r+0xa>
 800b8c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b8c8 <_vfiprintf_r>:
 800b8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8ca:	b0a1      	sub	sp, #132	@ 0x84
 800b8cc:	000f      	movs	r7, r1
 800b8ce:	0015      	movs	r5, r2
 800b8d0:	001e      	movs	r6, r3
 800b8d2:	9003      	str	r0, [sp, #12]
 800b8d4:	2800      	cmp	r0, #0
 800b8d6:	d004      	beq.n	800b8e2 <_vfiprintf_r+0x1a>
 800b8d8:	6a03      	ldr	r3, [r0, #32]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d101      	bne.n	800b8e2 <_vfiprintf_r+0x1a>
 800b8de:	f7fe fa3f 	bl	8009d60 <__sinit>
 800b8e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b8e4:	07db      	lsls	r3, r3, #31
 800b8e6:	d405      	bmi.n	800b8f4 <_vfiprintf_r+0x2c>
 800b8e8:	89bb      	ldrh	r3, [r7, #12]
 800b8ea:	059b      	lsls	r3, r3, #22
 800b8ec:	d402      	bmi.n	800b8f4 <_vfiprintf_r+0x2c>
 800b8ee:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b8f0:	f7fe fb3b 	bl	8009f6a <__retarget_lock_acquire_recursive>
 800b8f4:	89bb      	ldrh	r3, [r7, #12]
 800b8f6:	071b      	lsls	r3, r3, #28
 800b8f8:	d502      	bpl.n	800b900 <_vfiprintf_r+0x38>
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d113      	bne.n	800b928 <_vfiprintf_r+0x60>
 800b900:	0039      	movs	r1, r7
 800b902:	9803      	ldr	r0, [sp, #12]
 800b904:	f000 f93e 	bl	800bb84 <__swsetup_r>
 800b908:	2800      	cmp	r0, #0
 800b90a:	d00d      	beq.n	800b928 <_vfiprintf_r+0x60>
 800b90c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b90e:	07db      	lsls	r3, r3, #31
 800b910:	d503      	bpl.n	800b91a <_vfiprintf_r+0x52>
 800b912:	2001      	movs	r0, #1
 800b914:	4240      	negs	r0, r0
 800b916:	b021      	add	sp, #132	@ 0x84
 800b918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b91a:	89bb      	ldrh	r3, [r7, #12]
 800b91c:	059b      	lsls	r3, r3, #22
 800b91e:	d4f8      	bmi.n	800b912 <_vfiprintf_r+0x4a>
 800b920:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b922:	f7fe fb23 	bl	8009f6c <__retarget_lock_release_recursive>
 800b926:	e7f4      	b.n	800b912 <_vfiprintf_r+0x4a>
 800b928:	2300      	movs	r3, #0
 800b92a:	ac08      	add	r4, sp, #32
 800b92c:	6163      	str	r3, [r4, #20]
 800b92e:	3320      	adds	r3, #32
 800b930:	7663      	strb	r3, [r4, #25]
 800b932:	3310      	adds	r3, #16
 800b934:	76a3      	strb	r3, [r4, #26]
 800b936:	9607      	str	r6, [sp, #28]
 800b938:	002e      	movs	r6, r5
 800b93a:	7833      	ldrb	r3, [r6, #0]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d001      	beq.n	800b944 <_vfiprintf_r+0x7c>
 800b940:	2b25      	cmp	r3, #37	@ 0x25
 800b942:	d148      	bne.n	800b9d6 <_vfiprintf_r+0x10e>
 800b944:	1b73      	subs	r3, r6, r5
 800b946:	9305      	str	r3, [sp, #20]
 800b948:	42ae      	cmp	r6, r5
 800b94a:	d00b      	beq.n	800b964 <_vfiprintf_r+0x9c>
 800b94c:	002a      	movs	r2, r5
 800b94e:	0039      	movs	r1, r7
 800b950:	9803      	ldr	r0, [sp, #12]
 800b952:	f7ff ffa7 	bl	800b8a4 <__sfputs_r>
 800b956:	3001      	adds	r0, #1
 800b958:	d100      	bne.n	800b95c <_vfiprintf_r+0x94>
 800b95a:	e0ae      	b.n	800baba <_vfiprintf_r+0x1f2>
 800b95c:	6963      	ldr	r3, [r4, #20]
 800b95e:	9a05      	ldr	r2, [sp, #20]
 800b960:	189b      	adds	r3, r3, r2
 800b962:	6163      	str	r3, [r4, #20]
 800b964:	7833      	ldrb	r3, [r6, #0]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d100      	bne.n	800b96c <_vfiprintf_r+0xa4>
 800b96a:	e0a6      	b.n	800baba <_vfiprintf_r+0x1f2>
 800b96c:	2201      	movs	r2, #1
 800b96e:	2300      	movs	r3, #0
 800b970:	4252      	negs	r2, r2
 800b972:	6062      	str	r2, [r4, #4]
 800b974:	a904      	add	r1, sp, #16
 800b976:	3254      	adds	r2, #84	@ 0x54
 800b978:	1852      	adds	r2, r2, r1
 800b97a:	1c75      	adds	r5, r6, #1
 800b97c:	6023      	str	r3, [r4, #0]
 800b97e:	60e3      	str	r3, [r4, #12]
 800b980:	60a3      	str	r3, [r4, #8]
 800b982:	7013      	strb	r3, [r2, #0]
 800b984:	65a3      	str	r3, [r4, #88]	@ 0x58
 800b986:	4b59      	ldr	r3, [pc, #356]	@ (800baec <_vfiprintf_r+0x224>)
 800b988:	2205      	movs	r2, #5
 800b98a:	0018      	movs	r0, r3
 800b98c:	7829      	ldrb	r1, [r5, #0]
 800b98e:	9305      	str	r3, [sp, #20]
 800b990:	f7fe faed 	bl	8009f6e <memchr>
 800b994:	1c6e      	adds	r6, r5, #1
 800b996:	2800      	cmp	r0, #0
 800b998:	d11f      	bne.n	800b9da <_vfiprintf_r+0x112>
 800b99a:	6822      	ldr	r2, [r4, #0]
 800b99c:	06d3      	lsls	r3, r2, #27
 800b99e:	d504      	bpl.n	800b9aa <_vfiprintf_r+0xe2>
 800b9a0:	2353      	movs	r3, #83	@ 0x53
 800b9a2:	a904      	add	r1, sp, #16
 800b9a4:	185b      	adds	r3, r3, r1
 800b9a6:	2120      	movs	r1, #32
 800b9a8:	7019      	strb	r1, [r3, #0]
 800b9aa:	0713      	lsls	r3, r2, #28
 800b9ac:	d504      	bpl.n	800b9b8 <_vfiprintf_r+0xf0>
 800b9ae:	2353      	movs	r3, #83	@ 0x53
 800b9b0:	a904      	add	r1, sp, #16
 800b9b2:	185b      	adds	r3, r3, r1
 800b9b4:	212b      	movs	r1, #43	@ 0x2b
 800b9b6:	7019      	strb	r1, [r3, #0]
 800b9b8:	782b      	ldrb	r3, [r5, #0]
 800b9ba:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9bc:	d016      	beq.n	800b9ec <_vfiprintf_r+0x124>
 800b9be:	002e      	movs	r6, r5
 800b9c0:	2100      	movs	r1, #0
 800b9c2:	200a      	movs	r0, #10
 800b9c4:	68e3      	ldr	r3, [r4, #12]
 800b9c6:	7832      	ldrb	r2, [r6, #0]
 800b9c8:	1c75      	adds	r5, r6, #1
 800b9ca:	3a30      	subs	r2, #48	@ 0x30
 800b9cc:	2a09      	cmp	r2, #9
 800b9ce:	d950      	bls.n	800ba72 <_vfiprintf_r+0x1aa>
 800b9d0:	2900      	cmp	r1, #0
 800b9d2:	d111      	bne.n	800b9f8 <_vfiprintf_r+0x130>
 800b9d4:	e017      	b.n	800ba06 <_vfiprintf_r+0x13e>
 800b9d6:	3601      	adds	r6, #1
 800b9d8:	e7af      	b.n	800b93a <_vfiprintf_r+0x72>
 800b9da:	9b05      	ldr	r3, [sp, #20]
 800b9dc:	6822      	ldr	r2, [r4, #0]
 800b9de:	1ac0      	subs	r0, r0, r3
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	4083      	lsls	r3, r0
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	0035      	movs	r5, r6
 800b9e8:	6023      	str	r3, [r4, #0]
 800b9ea:	e7cc      	b.n	800b986 <_vfiprintf_r+0xbe>
 800b9ec:	9b07      	ldr	r3, [sp, #28]
 800b9ee:	1d19      	adds	r1, r3, #4
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	9107      	str	r1, [sp, #28]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	db01      	blt.n	800b9fc <_vfiprintf_r+0x134>
 800b9f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b9fa:	e004      	b.n	800ba06 <_vfiprintf_r+0x13e>
 800b9fc:	425b      	negs	r3, r3
 800b9fe:	60e3      	str	r3, [r4, #12]
 800ba00:	2302      	movs	r3, #2
 800ba02:	4313      	orrs	r3, r2
 800ba04:	6023      	str	r3, [r4, #0]
 800ba06:	7833      	ldrb	r3, [r6, #0]
 800ba08:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba0a:	d10c      	bne.n	800ba26 <_vfiprintf_r+0x15e>
 800ba0c:	7873      	ldrb	r3, [r6, #1]
 800ba0e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba10:	d134      	bne.n	800ba7c <_vfiprintf_r+0x1b4>
 800ba12:	9b07      	ldr	r3, [sp, #28]
 800ba14:	3602      	adds	r6, #2
 800ba16:	1d1a      	adds	r2, r3, #4
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	9207      	str	r2, [sp, #28]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	da01      	bge.n	800ba24 <_vfiprintf_r+0x15c>
 800ba20:	2301      	movs	r3, #1
 800ba22:	425b      	negs	r3, r3
 800ba24:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba26:	4d32      	ldr	r5, [pc, #200]	@ (800baf0 <_vfiprintf_r+0x228>)
 800ba28:	2203      	movs	r2, #3
 800ba2a:	0028      	movs	r0, r5
 800ba2c:	7831      	ldrb	r1, [r6, #0]
 800ba2e:	f7fe fa9e 	bl	8009f6e <memchr>
 800ba32:	2800      	cmp	r0, #0
 800ba34:	d006      	beq.n	800ba44 <_vfiprintf_r+0x17c>
 800ba36:	2340      	movs	r3, #64	@ 0x40
 800ba38:	1b40      	subs	r0, r0, r5
 800ba3a:	4083      	lsls	r3, r0
 800ba3c:	6822      	ldr	r2, [r4, #0]
 800ba3e:	3601      	adds	r6, #1
 800ba40:	4313      	orrs	r3, r2
 800ba42:	6023      	str	r3, [r4, #0]
 800ba44:	7831      	ldrb	r1, [r6, #0]
 800ba46:	2206      	movs	r2, #6
 800ba48:	482a      	ldr	r0, [pc, #168]	@ (800baf4 <_vfiprintf_r+0x22c>)
 800ba4a:	1c75      	adds	r5, r6, #1
 800ba4c:	7621      	strb	r1, [r4, #24]
 800ba4e:	f7fe fa8e 	bl	8009f6e <memchr>
 800ba52:	2800      	cmp	r0, #0
 800ba54:	d040      	beq.n	800bad8 <_vfiprintf_r+0x210>
 800ba56:	4b28      	ldr	r3, [pc, #160]	@ (800baf8 <_vfiprintf_r+0x230>)
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d122      	bne.n	800baa2 <_vfiprintf_r+0x1da>
 800ba5c:	2207      	movs	r2, #7
 800ba5e:	9b07      	ldr	r3, [sp, #28]
 800ba60:	3307      	adds	r3, #7
 800ba62:	4393      	bics	r3, r2
 800ba64:	3308      	adds	r3, #8
 800ba66:	9307      	str	r3, [sp, #28]
 800ba68:	6963      	ldr	r3, [r4, #20]
 800ba6a:	9a04      	ldr	r2, [sp, #16]
 800ba6c:	189b      	adds	r3, r3, r2
 800ba6e:	6163      	str	r3, [r4, #20]
 800ba70:	e762      	b.n	800b938 <_vfiprintf_r+0x70>
 800ba72:	4343      	muls	r3, r0
 800ba74:	002e      	movs	r6, r5
 800ba76:	2101      	movs	r1, #1
 800ba78:	189b      	adds	r3, r3, r2
 800ba7a:	e7a4      	b.n	800b9c6 <_vfiprintf_r+0xfe>
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	200a      	movs	r0, #10
 800ba80:	0019      	movs	r1, r3
 800ba82:	3601      	adds	r6, #1
 800ba84:	6063      	str	r3, [r4, #4]
 800ba86:	7832      	ldrb	r2, [r6, #0]
 800ba88:	1c75      	adds	r5, r6, #1
 800ba8a:	3a30      	subs	r2, #48	@ 0x30
 800ba8c:	2a09      	cmp	r2, #9
 800ba8e:	d903      	bls.n	800ba98 <_vfiprintf_r+0x1d0>
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d0c8      	beq.n	800ba26 <_vfiprintf_r+0x15e>
 800ba94:	9109      	str	r1, [sp, #36]	@ 0x24
 800ba96:	e7c6      	b.n	800ba26 <_vfiprintf_r+0x15e>
 800ba98:	4341      	muls	r1, r0
 800ba9a:	002e      	movs	r6, r5
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	1889      	adds	r1, r1, r2
 800baa0:	e7f1      	b.n	800ba86 <_vfiprintf_r+0x1be>
 800baa2:	aa07      	add	r2, sp, #28
 800baa4:	9200      	str	r2, [sp, #0]
 800baa6:	0021      	movs	r1, r4
 800baa8:	003a      	movs	r2, r7
 800baaa:	4b14      	ldr	r3, [pc, #80]	@ (800bafc <_vfiprintf_r+0x234>)
 800baac:	9803      	ldr	r0, [sp, #12]
 800baae:	f7fd fd0b 	bl	80094c8 <_printf_float>
 800bab2:	9004      	str	r0, [sp, #16]
 800bab4:	9b04      	ldr	r3, [sp, #16]
 800bab6:	3301      	adds	r3, #1
 800bab8:	d1d6      	bne.n	800ba68 <_vfiprintf_r+0x1a0>
 800baba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800babc:	07db      	lsls	r3, r3, #31
 800babe:	d405      	bmi.n	800bacc <_vfiprintf_r+0x204>
 800bac0:	89bb      	ldrh	r3, [r7, #12]
 800bac2:	059b      	lsls	r3, r3, #22
 800bac4:	d402      	bmi.n	800bacc <_vfiprintf_r+0x204>
 800bac6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800bac8:	f7fe fa50 	bl	8009f6c <__retarget_lock_release_recursive>
 800bacc:	89bb      	ldrh	r3, [r7, #12]
 800bace:	065b      	lsls	r3, r3, #25
 800bad0:	d500      	bpl.n	800bad4 <_vfiprintf_r+0x20c>
 800bad2:	e71e      	b.n	800b912 <_vfiprintf_r+0x4a>
 800bad4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800bad6:	e71e      	b.n	800b916 <_vfiprintf_r+0x4e>
 800bad8:	aa07      	add	r2, sp, #28
 800bada:	9200      	str	r2, [sp, #0]
 800badc:	0021      	movs	r1, r4
 800bade:	003a      	movs	r2, r7
 800bae0:	4b06      	ldr	r3, [pc, #24]	@ (800bafc <_vfiprintf_r+0x234>)
 800bae2:	9803      	ldr	r0, [sp, #12]
 800bae4:	f7fd ff9e 	bl	8009a24 <_printf_i>
 800bae8:	e7e3      	b.n	800bab2 <_vfiprintf_r+0x1ea>
 800baea:	46c0      	nop			@ (mov r8, r8)
 800baec:	0800c74f 	.word	0x0800c74f
 800baf0:	0800c755 	.word	0x0800c755
 800baf4:	0800c759 	.word	0x0800c759
 800baf8:	080094c9 	.word	0x080094c9
 800bafc:	0800b8a5 	.word	0x0800b8a5

0800bb00 <__swbuf_r>:
 800bb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb02:	0006      	movs	r6, r0
 800bb04:	000d      	movs	r5, r1
 800bb06:	0014      	movs	r4, r2
 800bb08:	2800      	cmp	r0, #0
 800bb0a:	d004      	beq.n	800bb16 <__swbuf_r+0x16>
 800bb0c:	6a03      	ldr	r3, [r0, #32]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d101      	bne.n	800bb16 <__swbuf_r+0x16>
 800bb12:	f7fe f925 	bl	8009d60 <__sinit>
 800bb16:	69a3      	ldr	r3, [r4, #24]
 800bb18:	60a3      	str	r3, [r4, #8]
 800bb1a:	89a3      	ldrh	r3, [r4, #12]
 800bb1c:	071b      	lsls	r3, r3, #28
 800bb1e:	d502      	bpl.n	800bb26 <__swbuf_r+0x26>
 800bb20:	6923      	ldr	r3, [r4, #16]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d109      	bne.n	800bb3a <__swbuf_r+0x3a>
 800bb26:	0021      	movs	r1, r4
 800bb28:	0030      	movs	r0, r6
 800bb2a:	f000 f82b 	bl	800bb84 <__swsetup_r>
 800bb2e:	2800      	cmp	r0, #0
 800bb30:	d003      	beq.n	800bb3a <__swbuf_r+0x3a>
 800bb32:	2501      	movs	r5, #1
 800bb34:	426d      	negs	r5, r5
 800bb36:	0028      	movs	r0, r5
 800bb38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb3a:	6923      	ldr	r3, [r4, #16]
 800bb3c:	6820      	ldr	r0, [r4, #0]
 800bb3e:	b2ef      	uxtb	r7, r5
 800bb40:	1ac0      	subs	r0, r0, r3
 800bb42:	6963      	ldr	r3, [r4, #20]
 800bb44:	b2ed      	uxtb	r5, r5
 800bb46:	4283      	cmp	r3, r0
 800bb48:	dc05      	bgt.n	800bb56 <__swbuf_r+0x56>
 800bb4a:	0021      	movs	r1, r4
 800bb4c:	0030      	movs	r0, r6
 800bb4e:	f7ff fdcb 	bl	800b6e8 <_fflush_r>
 800bb52:	2800      	cmp	r0, #0
 800bb54:	d1ed      	bne.n	800bb32 <__swbuf_r+0x32>
 800bb56:	68a3      	ldr	r3, [r4, #8]
 800bb58:	3001      	adds	r0, #1
 800bb5a:	3b01      	subs	r3, #1
 800bb5c:	60a3      	str	r3, [r4, #8]
 800bb5e:	6823      	ldr	r3, [r4, #0]
 800bb60:	1c5a      	adds	r2, r3, #1
 800bb62:	6022      	str	r2, [r4, #0]
 800bb64:	701f      	strb	r7, [r3, #0]
 800bb66:	6963      	ldr	r3, [r4, #20]
 800bb68:	4283      	cmp	r3, r0
 800bb6a:	d004      	beq.n	800bb76 <__swbuf_r+0x76>
 800bb6c:	89a3      	ldrh	r3, [r4, #12]
 800bb6e:	07db      	lsls	r3, r3, #31
 800bb70:	d5e1      	bpl.n	800bb36 <__swbuf_r+0x36>
 800bb72:	2d0a      	cmp	r5, #10
 800bb74:	d1df      	bne.n	800bb36 <__swbuf_r+0x36>
 800bb76:	0021      	movs	r1, r4
 800bb78:	0030      	movs	r0, r6
 800bb7a:	f7ff fdb5 	bl	800b6e8 <_fflush_r>
 800bb7e:	2800      	cmp	r0, #0
 800bb80:	d0d9      	beq.n	800bb36 <__swbuf_r+0x36>
 800bb82:	e7d6      	b.n	800bb32 <__swbuf_r+0x32>

0800bb84 <__swsetup_r>:
 800bb84:	4b2d      	ldr	r3, [pc, #180]	@ (800bc3c <__swsetup_r+0xb8>)
 800bb86:	b570      	push	{r4, r5, r6, lr}
 800bb88:	0005      	movs	r5, r0
 800bb8a:	6818      	ldr	r0, [r3, #0]
 800bb8c:	000c      	movs	r4, r1
 800bb8e:	2800      	cmp	r0, #0
 800bb90:	d004      	beq.n	800bb9c <__swsetup_r+0x18>
 800bb92:	6a03      	ldr	r3, [r0, #32]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d101      	bne.n	800bb9c <__swsetup_r+0x18>
 800bb98:	f7fe f8e2 	bl	8009d60 <__sinit>
 800bb9c:	230c      	movs	r3, #12
 800bb9e:	5ee2      	ldrsh	r2, [r4, r3]
 800bba0:	0713      	lsls	r3, r2, #28
 800bba2:	d423      	bmi.n	800bbec <__swsetup_r+0x68>
 800bba4:	06d3      	lsls	r3, r2, #27
 800bba6:	d407      	bmi.n	800bbb8 <__swsetup_r+0x34>
 800bba8:	2309      	movs	r3, #9
 800bbaa:	602b      	str	r3, [r5, #0]
 800bbac:	2340      	movs	r3, #64	@ 0x40
 800bbae:	2001      	movs	r0, #1
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	81a3      	strh	r3, [r4, #12]
 800bbb4:	4240      	negs	r0, r0
 800bbb6:	e03a      	b.n	800bc2e <__swsetup_r+0xaa>
 800bbb8:	0752      	lsls	r2, r2, #29
 800bbba:	d513      	bpl.n	800bbe4 <__swsetup_r+0x60>
 800bbbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bbbe:	2900      	cmp	r1, #0
 800bbc0:	d008      	beq.n	800bbd4 <__swsetup_r+0x50>
 800bbc2:	0023      	movs	r3, r4
 800bbc4:	3344      	adds	r3, #68	@ 0x44
 800bbc6:	4299      	cmp	r1, r3
 800bbc8:	d002      	beq.n	800bbd0 <__swsetup_r+0x4c>
 800bbca:	0028      	movs	r0, r5
 800bbcc:	f7ff f85c 	bl	800ac88 <_free_r>
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	6363      	str	r3, [r4, #52]	@ 0x34
 800bbd4:	2224      	movs	r2, #36	@ 0x24
 800bbd6:	89a3      	ldrh	r3, [r4, #12]
 800bbd8:	4393      	bics	r3, r2
 800bbda:	81a3      	strh	r3, [r4, #12]
 800bbdc:	2300      	movs	r3, #0
 800bbde:	6063      	str	r3, [r4, #4]
 800bbe0:	6923      	ldr	r3, [r4, #16]
 800bbe2:	6023      	str	r3, [r4, #0]
 800bbe4:	2308      	movs	r3, #8
 800bbe6:	89a2      	ldrh	r2, [r4, #12]
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	81a3      	strh	r3, [r4, #12]
 800bbec:	6923      	ldr	r3, [r4, #16]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d10b      	bne.n	800bc0a <__swsetup_r+0x86>
 800bbf2:	21a0      	movs	r1, #160	@ 0xa0
 800bbf4:	2280      	movs	r2, #128	@ 0x80
 800bbf6:	89a3      	ldrh	r3, [r4, #12]
 800bbf8:	0089      	lsls	r1, r1, #2
 800bbfa:	0092      	lsls	r2, r2, #2
 800bbfc:	400b      	ands	r3, r1
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d003      	beq.n	800bc0a <__swsetup_r+0x86>
 800bc02:	0021      	movs	r1, r4
 800bc04:	0028      	movs	r0, r5
 800bc06:	f000 f88f 	bl	800bd28 <__smakebuf_r>
 800bc0a:	230c      	movs	r3, #12
 800bc0c:	5ee2      	ldrsh	r2, [r4, r3]
 800bc0e:	2101      	movs	r1, #1
 800bc10:	0013      	movs	r3, r2
 800bc12:	400b      	ands	r3, r1
 800bc14:	420a      	tst	r2, r1
 800bc16:	d00b      	beq.n	800bc30 <__swsetup_r+0xac>
 800bc18:	2300      	movs	r3, #0
 800bc1a:	60a3      	str	r3, [r4, #8]
 800bc1c:	6963      	ldr	r3, [r4, #20]
 800bc1e:	425b      	negs	r3, r3
 800bc20:	61a3      	str	r3, [r4, #24]
 800bc22:	2000      	movs	r0, #0
 800bc24:	6923      	ldr	r3, [r4, #16]
 800bc26:	4283      	cmp	r3, r0
 800bc28:	d101      	bne.n	800bc2e <__swsetup_r+0xaa>
 800bc2a:	0613      	lsls	r3, r2, #24
 800bc2c:	d4be      	bmi.n	800bbac <__swsetup_r+0x28>
 800bc2e:	bd70      	pop	{r4, r5, r6, pc}
 800bc30:	0791      	lsls	r1, r2, #30
 800bc32:	d400      	bmi.n	800bc36 <__swsetup_r+0xb2>
 800bc34:	6963      	ldr	r3, [r4, #20]
 800bc36:	60a3      	str	r3, [r4, #8]
 800bc38:	e7f3      	b.n	800bc22 <__swsetup_r+0x9e>
 800bc3a:	46c0      	nop			@ (mov r8, r8)
 800bc3c:	2000001c 	.word	0x2000001c

0800bc40 <_raise_r>:
 800bc40:	b570      	push	{r4, r5, r6, lr}
 800bc42:	0004      	movs	r4, r0
 800bc44:	000d      	movs	r5, r1
 800bc46:	291f      	cmp	r1, #31
 800bc48:	d904      	bls.n	800bc54 <_raise_r+0x14>
 800bc4a:	2316      	movs	r3, #22
 800bc4c:	6003      	str	r3, [r0, #0]
 800bc4e:	2001      	movs	r0, #1
 800bc50:	4240      	negs	r0, r0
 800bc52:	bd70      	pop	{r4, r5, r6, pc}
 800bc54:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d004      	beq.n	800bc64 <_raise_r+0x24>
 800bc5a:	008a      	lsls	r2, r1, #2
 800bc5c:	189b      	adds	r3, r3, r2
 800bc5e:	681a      	ldr	r2, [r3, #0]
 800bc60:	2a00      	cmp	r2, #0
 800bc62:	d108      	bne.n	800bc76 <_raise_r+0x36>
 800bc64:	0020      	movs	r0, r4
 800bc66:	f000 f831 	bl	800bccc <_getpid_r>
 800bc6a:	002a      	movs	r2, r5
 800bc6c:	0001      	movs	r1, r0
 800bc6e:	0020      	movs	r0, r4
 800bc70:	f000 f81a 	bl	800bca8 <_kill_r>
 800bc74:	e7ed      	b.n	800bc52 <_raise_r+0x12>
 800bc76:	2a01      	cmp	r2, #1
 800bc78:	d009      	beq.n	800bc8e <_raise_r+0x4e>
 800bc7a:	1c51      	adds	r1, r2, #1
 800bc7c:	d103      	bne.n	800bc86 <_raise_r+0x46>
 800bc7e:	2316      	movs	r3, #22
 800bc80:	6003      	str	r3, [r0, #0]
 800bc82:	2001      	movs	r0, #1
 800bc84:	e7e5      	b.n	800bc52 <_raise_r+0x12>
 800bc86:	2100      	movs	r1, #0
 800bc88:	0028      	movs	r0, r5
 800bc8a:	6019      	str	r1, [r3, #0]
 800bc8c:	4790      	blx	r2
 800bc8e:	2000      	movs	r0, #0
 800bc90:	e7df      	b.n	800bc52 <_raise_r+0x12>
	...

0800bc94 <raise>:
 800bc94:	b510      	push	{r4, lr}
 800bc96:	4b03      	ldr	r3, [pc, #12]	@ (800bca4 <raise+0x10>)
 800bc98:	0001      	movs	r1, r0
 800bc9a:	6818      	ldr	r0, [r3, #0]
 800bc9c:	f7ff ffd0 	bl	800bc40 <_raise_r>
 800bca0:	bd10      	pop	{r4, pc}
 800bca2:	46c0      	nop			@ (mov r8, r8)
 800bca4:	2000001c 	.word	0x2000001c

0800bca8 <_kill_r>:
 800bca8:	2300      	movs	r3, #0
 800bcaa:	b570      	push	{r4, r5, r6, lr}
 800bcac:	4d06      	ldr	r5, [pc, #24]	@ (800bcc8 <_kill_r+0x20>)
 800bcae:	0004      	movs	r4, r0
 800bcb0:	0008      	movs	r0, r1
 800bcb2:	0011      	movs	r1, r2
 800bcb4:	602b      	str	r3, [r5, #0]
 800bcb6:	f7f9 fafa 	bl	80052ae <_kill>
 800bcba:	1c43      	adds	r3, r0, #1
 800bcbc:	d103      	bne.n	800bcc6 <_kill_r+0x1e>
 800bcbe:	682b      	ldr	r3, [r5, #0]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d000      	beq.n	800bcc6 <_kill_r+0x1e>
 800bcc4:	6023      	str	r3, [r4, #0]
 800bcc6:	bd70      	pop	{r4, r5, r6, pc}
 800bcc8:	20000520 	.word	0x20000520

0800bccc <_getpid_r>:
 800bccc:	b510      	push	{r4, lr}
 800bcce:	f7f9 fae8 	bl	80052a2 <_getpid>
 800bcd2:	bd10      	pop	{r4, pc}

0800bcd4 <__swhatbuf_r>:
 800bcd4:	b570      	push	{r4, r5, r6, lr}
 800bcd6:	000e      	movs	r6, r1
 800bcd8:	001d      	movs	r5, r3
 800bcda:	230e      	movs	r3, #14
 800bcdc:	5ec9      	ldrsh	r1, [r1, r3]
 800bcde:	0014      	movs	r4, r2
 800bce0:	b096      	sub	sp, #88	@ 0x58
 800bce2:	2900      	cmp	r1, #0
 800bce4:	da0c      	bge.n	800bd00 <__swhatbuf_r+0x2c>
 800bce6:	89b2      	ldrh	r2, [r6, #12]
 800bce8:	2380      	movs	r3, #128	@ 0x80
 800bcea:	0011      	movs	r1, r2
 800bcec:	4019      	ands	r1, r3
 800bcee:	421a      	tst	r2, r3
 800bcf0:	d114      	bne.n	800bd1c <__swhatbuf_r+0x48>
 800bcf2:	2380      	movs	r3, #128	@ 0x80
 800bcf4:	00db      	lsls	r3, r3, #3
 800bcf6:	2000      	movs	r0, #0
 800bcf8:	6029      	str	r1, [r5, #0]
 800bcfa:	6023      	str	r3, [r4, #0]
 800bcfc:	b016      	add	sp, #88	@ 0x58
 800bcfe:	bd70      	pop	{r4, r5, r6, pc}
 800bd00:	466a      	mov	r2, sp
 800bd02:	f000 f853 	bl	800bdac <_fstat_r>
 800bd06:	2800      	cmp	r0, #0
 800bd08:	dbed      	blt.n	800bce6 <__swhatbuf_r+0x12>
 800bd0a:	23f0      	movs	r3, #240	@ 0xf0
 800bd0c:	9901      	ldr	r1, [sp, #4]
 800bd0e:	021b      	lsls	r3, r3, #8
 800bd10:	4019      	ands	r1, r3
 800bd12:	4b04      	ldr	r3, [pc, #16]	@ (800bd24 <__swhatbuf_r+0x50>)
 800bd14:	18c9      	adds	r1, r1, r3
 800bd16:	424b      	negs	r3, r1
 800bd18:	4159      	adcs	r1, r3
 800bd1a:	e7ea      	b.n	800bcf2 <__swhatbuf_r+0x1e>
 800bd1c:	2100      	movs	r1, #0
 800bd1e:	2340      	movs	r3, #64	@ 0x40
 800bd20:	e7e9      	b.n	800bcf6 <__swhatbuf_r+0x22>
 800bd22:	46c0      	nop			@ (mov r8, r8)
 800bd24:	ffffe000 	.word	0xffffe000

0800bd28 <__smakebuf_r>:
 800bd28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd2a:	2602      	movs	r6, #2
 800bd2c:	898b      	ldrh	r3, [r1, #12]
 800bd2e:	0005      	movs	r5, r0
 800bd30:	000c      	movs	r4, r1
 800bd32:	b085      	sub	sp, #20
 800bd34:	4233      	tst	r3, r6
 800bd36:	d007      	beq.n	800bd48 <__smakebuf_r+0x20>
 800bd38:	0023      	movs	r3, r4
 800bd3a:	3347      	adds	r3, #71	@ 0x47
 800bd3c:	6023      	str	r3, [r4, #0]
 800bd3e:	6123      	str	r3, [r4, #16]
 800bd40:	2301      	movs	r3, #1
 800bd42:	6163      	str	r3, [r4, #20]
 800bd44:	b005      	add	sp, #20
 800bd46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd48:	ab03      	add	r3, sp, #12
 800bd4a:	aa02      	add	r2, sp, #8
 800bd4c:	f7ff ffc2 	bl	800bcd4 <__swhatbuf_r>
 800bd50:	9f02      	ldr	r7, [sp, #8]
 800bd52:	9001      	str	r0, [sp, #4]
 800bd54:	0039      	movs	r1, r7
 800bd56:	0028      	movs	r0, r5
 800bd58:	f7ff f80c 	bl	800ad74 <_malloc_r>
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	d108      	bne.n	800bd72 <__smakebuf_r+0x4a>
 800bd60:	220c      	movs	r2, #12
 800bd62:	5ea3      	ldrsh	r3, [r4, r2]
 800bd64:	059a      	lsls	r2, r3, #22
 800bd66:	d4ed      	bmi.n	800bd44 <__smakebuf_r+0x1c>
 800bd68:	2203      	movs	r2, #3
 800bd6a:	4393      	bics	r3, r2
 800bd6c:	431e      	orrs	r6, r3
 800bd6e:	81a6      	strh	r6, [r4, #12]
 800bd70:	e7e2      	b.n	800bd38 <__smakebuf_r+0x10>
 800bd72:	2380      	movs	r3, #128	@ 0x80
 800bd74:	89a2      	ldrh	r2, [r4, #12]
 800bd76:	6020      	str	r0, [r4, #0]
 800bd78:	4313      	orrs	r3, r2
 800bd7a:	81a3      	strh	r3, [r4, #12]
 800bd7c:	9b03      	ldr	r3, [sp, #12]
 800bd7e:	6120      	str	r0, [r4, #16]
 800bd80:	6167      	str	r7, [r4, #20]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d00c      	beq.n	800bda0 <__smakebuf_r+0x78>
 800bd86:	0028      	movs	r0, r5
 800bd88:	230e      	movs	r3, #14
 800bd8a:	5ee1      	ldrsh	r1, [r4, r3]
 800bd8c:	f000 f820 	bl	800bdd0 <_isatty_r>
 800bd90:	2800      	cmp	r0, #0
 800bd92:	d005      	beq.n	800bda0 <__smakebuf_r+0x78>
 800bd94:	2303      	movs	r3, #3
 800bd96:	89a2      	ldrh	r2, [r4, #12]
 800bd98:	439a      	bics	r2, r3
 800bd9a:	3b02      	subs	r3, #2
 800bd9c:	4313      	orrs	r3, r2
 800bd9e:	81a3      	strh	r3, [r4, #12]
 800bda0:	89a3      	ldrh	r3, [r4, #12]
 800bda2:	9a01      	ldr	r2, [sp, #4]
 800bda4:	4313      	orrs	r3, r2
 800bda6:	81a3      	strh	r3, [r4, #12]
 800bda8:	e7cc      	b.n	800bd44 <__smakebuf_r+0x1c>
	...

0800bdac <_fstat_r>:
 800bdac:	2300      	movs	r3, #0
 800bdae:	b570      	push	{r4, r5, r6, lr}
 800bdb0:	4d06      	ldr	r5, [pc, #24]	@ (800bdcc <_fstat_r+0x20>)
 800bdb2:	0004      	movs	r4, r0
 800bdb4:	0008      	movs	r0, r1
 800bdb6:	0011      	movs	r1, r2
 800bdb8:	602b      	str	r3, [r5, #0]
 800bdba:	f7f9 fad8 	bl	800536e <_fstat>
 800bdbe:	1c43      	adds	r3, r0, #1
 800bdc0:	d103      	bne.n	800bdca <_fstat_r+0x1e>
 800bdc2:	682b      	ldr	r3, [r5, #0]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d000      	beq.n	800bdca <_fstat_r+0x1e>
 800bdc8:	6023      	str	r3, [r4, #0]
 800bdca:	bd70      	pop	{r4, r5, r6, pc}
 800bdcc:	20000520 	.word	0x20000520

0800bdd0 <_isatty_r>:
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	b570      	push	{r4, r5, r6, lr}
 800bdd4:	4d06      	ldr	r5, [pc, #24]	@ (800bdf0 <_isatty_r+0x20>)
 800bdd6:	0004      	movs	r4, r0
 800bdd8:	0008      	movs	r0, r1
 800bdda:	602b      	str	r3, [r5, #0]
 800bddc:	f7f9 fad5 	bl	800538a <_isatty>
 800bde0:	1c43      	adds	r3, r0, #1
 800bde2:	d103      	bne.n	800bdec <_isatty_r+0x1c>
 800bde4:	682b      	ldr	r3, [r5, #0]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d000      	beq.n	800bdec <_isatty_r+0x1c>
 800bdea:	6023      	str	r3, [r4, #0]
 800bdec:	bd70      	pop	{r4, r5, r6, pc}
 800bdee:	46c0      	nop			@ (mov r8, r8)
 800bdf0:	20000520 	.word	0x20000520

0800bdf4 <_init>:
 800bdf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdf6:	46c0      	nop			@ (mov r8, r8)
 800bdf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdfa:	bc08      	pop	{r3}
 800bdfc:	469e      	mov	lr, r3
 800bdfe:	4770      	bx	lr

0800be00 <_fini>:
 800be00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be02:	46c0      	nop			@ (mov r8, r8)
 800be04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be06:	bc08      	pop	{r3}
 800be08:	469e      	mov	lr, r3
 800be0a:	4770      	bx	lr
