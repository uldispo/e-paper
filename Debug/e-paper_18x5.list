
e-paper_18x5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000919c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000060c  08009260  08009260  0000a260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800986c  0800986c  0000b010  2**0
                  CONTENTS
  4 .ARM          00000008  0800986c  0800986c  0000a86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009874  08009874  0000b010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009874  08009874  0000a874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009878  08009878  0000a878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800987c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000010  0800988c  0000b010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  0800988c  0000b21c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018dad  00000000  00000000  0000b038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b25  00000000  00000000  00023de5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001630  00000000  00000000  00027910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000114d  00000000  00000000  00028f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020332  00000000  00000000  0002a08d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d47b  00000000  00000000  0004a3bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3576  00000000  00000000  0006783a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012adb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005290  00000000  00000000  0012adf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00130084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009244 	.word	0x08009244

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08009244 	.word	0x08009244

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0010      	movs	r0, r2
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	0019      	movs	r1, r3
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f001 f891 	bl	800152c <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 ffd1 	bl	80013bc <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f001 f883 	bl	800152c <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 f879 	bl	800152c <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			@ (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 fffb 	bl	8001444 <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			@ (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 fff1 	bl	8001444 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			@ (mov r8, r8)

08000470 <__clzsi2>:
 8000470:	211c      	movs	r1, #28
 8000472:	2301      	movs	r3, #1
 8000474:	041b      	lsls	r3, r3, #16
 8000476:	4298      	cmp	r0, r3
 8000478:	d301      	bcc.n	800047e <__clzsi2+0xe>
 800047a:	0c00      	lsrs	r0, r0, #16
 800047c:	3910      	subs	r1, #16
 800047e:	0a1b      	lsrs	r3, r3, #8
 8000480:	4298      	cmp	r0, r3
 8000482:	d301      	bcc.n	8000488 <__clzsi2+0x18>
 8000484:	0a00      	lsrs	r0, r0, #8
 8000486:	3908      	subs	r1, #8
 8000488:	091b      	lsrs	r3, r3, #4
 800048a:	4298      	cmp	r0, r3
 800048c:	d301      	bcc.n	8000492 <__clzsi2+0x22>
 800048e:	0900      	lsrs	r0, r0, #4
 8000490:	3904      	subs	r1, #4
 8000492:	a202      	add	r2, pc, #8	@ (adr r2, 800049c <__clzsi2+0x2c>)
 8000494:	5c10      	ldrb	r0, [r2, r0]
 8000496:	1840      	adds	r0, r0, r1
 8000498:	4770      	bx	lr
 800049a:	46c0      	nop			@ (mov r8, r8)
 800049c:	02020304 	.word	0x02020304
 80004a0:	01010101 	.word	0x01010101
	...

080004ac <__aeabi_uldivmod>:
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d111      	bne.n	80004d4 <__aeabi_uldivmod+0x28>
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	d10f      	bne.n	80004d4 <__aeabi_uldivmod+0x28>
 80004b4:	2900      	cmp	r1, #0
 80004b6:	d100      	bne.n	80004ba <__aeabi_uldivmod+0xe>
 80004b8:	2800      	cmp	r0, #0
 80004ba:	d002      	beq.n	80004c2 <__aeabi_uldivmod+0x16>
 80004bc:	2100      	movs	r1, #0
 80004be:	43c9      	mvns	r1, r1
 80004c0:	0008      	movs	r0, r1
 80004c2:	b407      	push	{r0, r1, r2}
 80004c4:	4802      	ldr	r0, [pc, #8]	@ (80004d0 <__aeabi_uldivmod+0x24>)
 80004c6:	a102      	add	r1, pc, #8	@ (adr r1, 80004d0 <__aeabi_uldivmod+0x24>)
 80004c8:	1840      	adds	r0, r0, r1
 80004ca:	9002      	str	r0, [sp, #8]
 80004cc:	bd03      	pop	{r0, r1, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)
 80004d0:	ffffff21 	.word	0xffffff21
 80004d4:	b403      	push	{r0, r1}
 80004d6:	4668      	mov	r0, sp
 80004d8:	b501      	push	{r0, lr}
 80004da:	9802      	ldr	r0, [sp, #8]
 80004dc:	f000 f824 	bl	8000528 <__udivmoddi4>
 80004e0:	9b01      	ldr	r3, [sp, #4]
 80004e2:	469e      	mov	lr, r3
 80004e4:	b002      	add	sp, #8
 80004e6:	bc0c      	pop	{r2, r3}
 80004e8:	4770      	bx	lr
 80004ea:	46c0      	nop			@ (mov r8, r8)

080004ec <__aeabi_d2uiz>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	2200      	movs	r2, #0
 80004f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000524 <__aeabi_d2uiz+0x38>)
 80004f2:	0004      	movs	r4, r0
 80004f4:	000d      	movs	r5, r1
 80004f6:	f7ff ffb1 	bl	800045c <__aeabi_dcmpge>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	d104      	bne.n	8000508 <__aeabi_d2uiz+0x1c>
 80004fe:	0020      	movs	r0, r4
 8000500:	0029      	movs	r1, r5
 8000502:	f001 fee9 	bl	80022d8 <__aeabi_d2iz>
 8000506:	bd70      	pop	{r4, r5, r6, pc}
 8000508:	4b06      	ldr	r3, [pc, #24]	@ (8000524 <__aeabi_d2uiz+0x38>)
 800050a:	2200      	movs	r2, #0
 800050c:	0020      	movs	r0, r4
 800050e:	0029      	movs	r1, r5
 8000510:	f001 fb46 	bl	8001ba0 <__aeabi_dsub>
 8000514:	f001 fee0 	bl	80022d8 <__aeabi_d2iz>
 8000518:	2380      	movs	r3, #128	@ 0x80
 800051a:	061b      	lsls	r3, r3, #24
 800051c:	469c      	mov	ip, r3
 800051e:	4460      	add	r0, ip
 8000520:	e7f1      	b.n	8000506 <__aeabi_d2uiz+0x1a>
 8000522:	46c0      	nop			@ (mov r8, r8)
 8000524:	41e00000 	.word	0x41e00000

08000528 <__udivmoddi4>:
 8000528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800052a:	4657      	mov	r7, sl
 800052c:	464e      	mov	r6, r9
 800052e:	4645      	mov	r5, r8
 8000530:	46de      	mov	lr, fp
 8000532:	b5e0      	push	{r5, r6, r7, lr}
 8000534:	0004      	movs	r4, r0
 8000536:	000d      	movs	r5, r1
 8000538:	4692      	mov	sl, r2
 800053a:	4699      	mov	r9, r3
 800053c:	b083      	sub	sp, #12
 800053e:	428b      	cmp	r3, r1
 8000540:	d830      	bhi.n	80005a4 <__udivmoddi4+0x7c>
 8000542:	d02d      	beq.n	80005a0 <__udivmoddi4+0x78>
 8000544:	4649      	mov	r1, r9
 8000546:	4650      	mov	r0, sl
 8000548:	f001 ff54 	bl	80023f4 <__clzdi2>
 800054c:	0029      	movs	r1, r5
 800054e:	0006      	movs	r6, r0
 8000550:	0020      	movs	r0, r4
 8000552:	f001 ff4f 	bl	80023f4 <__clzdi2>
 8000556:	1a33      	subs	r3, r6, r0
 8000558:	4698      	mov	r8, r3
 800055a:	3b20      	subs	r3, #32
 800055c:	d434      	bmi.n	80005c8 <__udivmoddi4+0xa0>
 800055e:	469b      	mov	fp, r3
 8000560:	4653      	mov	r3, sl
 8000562:	465a      	mov	r2, fp
 8000564:	4093      	lsls	r3, r2
 8000566:	4642      	mov	r2, r8
 8000568:	001f      	movs	r7, r3
 800056a:	4653      	mov	r3, sl
 800056c:	4093      	lsls	r3, r2
 800056e:	001e      	movs	r6, r3
 8000570:	42af      	cmp	r7, r5
 8000572:	d83b      	bhi.n	80005ec <__udivmoddi4+0xc4>
 8000574:	42af      	cmp	r7, r5
 8000576:	d100      	bne.n	800057a <__udivmoddi4+0x52>
 8000578:	e079      	b.n	800066e <__udivmoddi4+0x146>
 800057a:	465b      	mov	r3, fp
 800057c:	1ba4      	subs	r4, r4, r6
 800057e:	41bd      	sbcs	r5, r7
 8000580:	2b00      	cmp	r3, #0
 8000582:	da00      	bge.n	8000586 <__udivmoddi4+0x5e>
 8000584:	e076      	b.n	8000674 <__udivmoddi4+0x14c>
 8000586:	2200      	movs	r2, #0
 8000588:	2300      	movs	r3, #0
 800058a:	9200      	str	r2, [sp, #0]
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	2301      	movs	r3, #1
 8000590:	465a      	mov	r2, fp
 8000592:	4093      	lsls	r3, r2
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	2301      	movs	r3, #1
 8000598:	4642      	mov	r2, r8
 800059a:	4093      	lsls	r3, r2
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	e029      	b.n	80005f4 <__udivmoddi4+0xcc>
 80005a0:	4282      	cmp	r2, r0
 80005a2:	d9cf      	bls.n	8000544 <__udivmoddi4+0x1c>
 80005a4:	2200      	movs	r2, #0
 80005a6:	2300      	movs	r3, #0
 80005a8:	9200      	str	r2, [sp, #0]
 80005aa:	9301      	str	r3, [sp, #4]
 80005ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <__udivmoddi4+0x8e>
 80005b2:	601c      	str	r4, [r3, #0]
 80005b4:	605d      	str	r5, [r3, #4]
 80005b6:	9800      	ldr	r0, [sp, #0]
 80005b8:	9901      	ldr	r1, [sp, #4]
 80005ba:	b003      	add	sp, #12
 80005bc:	bcf0      	pop	{r4, r5, r6, r7}
 80005be:	46bb      	mov	fp, r7
 80005c0:	46b2      	mov	sl, r6
 80005c2:	46a9      	mov	r9, r5
 80005c4:	46a0      	mov	r8, r4
 80005c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005c8:	4642      	mov	r2, r8
 80005ca:	469b      	mov	fp, r3
 80005cc:	2320      	movs	r3, #32
 80005ce:	1a9b      	subs	r3, r3, r2
 80005d0:	4652      	mov	r2, sl
 80005d2:	40da      	lsrs	r2, r3
 80005d4:	4641      	mov	r1, r8
 80005d6:	0013      	movs	r3, r2
 80005d8:	464a      	mov	r2, r9
 80005da:	408a      	lsls	r2, r1
 80005dc:	0017      	movs	r7, r2
 80005de:	4642      	mov	r2, r8
 80005e0:	431f      	orrs	r7, r3
 80005e2:	4653      	mov	r3, sl
 80005e4:	4093      	lsls	r3, r2
 80005e6:	001e      	movs	r6, r3
 80005e8:	42af      	cmp	r7, r5
 80005ea:	d9c3      	bls.n	8000574 <__udivmoddi4+0x4c>
 80005ec:	2200      	movs	r2, #0
 80005ee:	2300      	movs	r3, #0
 80005f0:	9200      	str	r2, [sp, #0]
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	4643      	mov	r3, r8
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d0d8      	beq.n	80005ac <__udivmoddi4+0x84>
 80005fa:	07fb      	lsls	r3, r7, #31
 80005fc:	0872      	lsrs	r2, r6, #1
 80005fe:	431a      	orrs	r2, r3
 8000600:	4646      	mov	r6, r8
 8000602:	087b      	lsrs	r3, r7, #1
 8000604:	e00e      	b.n	8000624 <__udivmoddi4+0xfc>
 8000606:	42ab      	cmp	r3, r5
 8000608:	d101      	bne.n	800060e <__udivmoddi4+0xe6>
 800060a:	42a2      	cmp	r2, r4
 800060c:	d80c      	bhi.n	8000628 <__udivmoddi4+0x100>
 800060e:	1aa4      	subs	r4, r4, r2
 8000610:	419d      	sbcs	r5, r3
 8000612:	2001      	movs	r0, #1
 8000614:	1924      	adds	r4, r4, r4
 8000616:	416d      	adcs	r5, r5
 8000618:	2100      	movs	r1, #0
 800061a:	3e01      	subs	r6, #1
 800061c:	1824      	adds	r4, r4, r0
 800061e:	414d      	adcs	r5, r1
 8000620:	2e00      	cmp	r6, #0
 8000622:	d006      	beq.n	8000632 <__udivmoddi4+0x10a>
 8000624:	42ab      	cmp	r3, r5
 8000626:	d9ee      	bls.n	8000606 <__udivmoddi4+0xde>
 8000628:	3e01      	subs	r6, #1
 800062a:	1924      	adds	r4, r4, r4
 800062c:	416d      	adcs	r5, r5
 800062e:	2e00      	cmp	r6, #0
 8000630:	d1f8      	bne.n	8000624 <__udivmoddi4+0xfc>
 8000632:	9800      	ldr	r0, [sp, #0]
 8000634:	9901      	ldr	r1, [sp, #4]
 8000636:	465b      	mov	r3, fp
 8000638:	1900      	adds	r0, r0, r4
 800063a:	4169      	adcs	r1, r5
 800063c:	2b00      	cmp	r3, #0
 800063e:	db24      	blt.n	800068a <__udivmoddi4+0x162>
 8000640:	002b      	movs	r3, r5
 8000642:	465a      	mov	r2, fp
 8000644:	4644      	mov	r4, r8
 8000646:	40d3      	lsrs	r3, r2
 8000648:	002a      	movs	r2, r5
 800064a:	40e2      	lsrs	r2, r4
 800064c:	001c      	movs	r4, r3
 800064e:	465b      	mov	r3, fp
 8000650:	0015      	movs	r5, r2
 8000652:	2b00      	cmp	r3, #0
 8000654:	db2a      	blt.n	80006ac <__udivmoddi4+0x184>
 8000656:	0026      	movs	r6, r4
 8000658:	409e      	lsls	r6, r3
 800065a:	0033      	movs	r3, r6
 800065c:	0026      	movs	r6, r4
 800065e:	4647      	mov	r7, r8
 8000660:	40be      	lsls	r6, r7
 8000662:	0032      	movs	r2, r6
 8000664:	1a80      	subs	r0, r0, r2
 8000666:	4199      	sbcs	r1, r3
 8000668:	9000      	str	r0, [sp, #0]
 800066a:	9101      	str	r1, [sp, #4]
 800066c:	e79e      	b.n	80005ac <__udivmoddi4+0x84>
 800066e:	42a3      	cmp	r3, r4
 8000670:	d8bc      	bhi.n	80005ec <__udivmoddi4+0xc4>
 8000672:	e782      	b.n	800057a <__udivmoddi4+0x52>
 8000674:	4642      	mov	r2, r8
 8000676:	2320      	movs	r3, #32
 8000678:	2100      	movs	r1, #0
 800067a:	1a9b      	subs	r3, r3, r2
 800067c:	2200      	movs	r2, #0
 800067e:	9100      	str	r1, [sp, #0]
 8000680:	9201      	str	r2, [sp, #4]
 8000682:	2201      	movs	r2, #1
 8000684:	40da      	lsrs	r2, r3
 8000686:	9201      	str	r2, [sp, #4]
 8000688:	e785      	b.n	8000596 <__udivmoddi4+0x6e>
 800068a:	4642      	mov	r2, r8
 800068c:	2320      	movs	r3, #32
 800068e:	1a9b      	subs	r3, r3, r2
 8000690:	002a      	movs	r2, r5
 8000692:	4646      	mov	r6, r8
 8000694:	409a      	lsls	r2, r3
 8000696:	0023      	movs	r3, r4
 8000698:	40f3      	lsrs	r3, r6
 800069a:	4644      	mov	r4, r8
 800069c:	4313      	orrs	r3, r2
 800069e:	002a      	movs	r2, r5
 80006a0:	40e2      	lsrs	r2, r4
 80006a2:	001c      	movs	r4, r3
 80006a4:	465b      	mov	r3, fp
 80006a6:	0015      	movs	r5, r2
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	dad4      	bge.n	8000656 <__udivmoddi4+0x12e>
 80006ac:	4642      	mov	r2, r8
 80006ae:	002f      	movs	r7, r5
 80006b0:	2320      	movs	r3, #32
 80006b2:	0026      	movs	r6, r4
 80006b4:	4097      	lsls	r7, r2
 80006b6:	1a9b      	subs	r3, r3, r2
 80006b8:	40de      	lsrs	r6, r3
 80006ba:	003b      	movs	r3, r7
 80006bc:	4333      	orrs	r3, r6
 80006be:	e7cd      	b.n	800065c <__udivmoddi4+0x134>

080006c0 <__aeabi_dadd>:
 80006c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006c2:	4657      	mov	r7, sl
 80006c4:	464e      	mov	r6, r9
 80006c6:	4645      	mov	r5, r8
 80006c8:	46de      	mov	lr, fp
 80006ca:	b5e0      	push	{r5, r6, r7, lr}
 80006cc:	b083      	sub	sp, #12
 80006ce:	9000      	str	r0, [sp, #0]
 80006d0:	9101      	str	r1, [sp, #4]
 80006d2:	030c      	lsls	r4, r1, #12
 80006d4:	004f      	lsls	r7, r1, #1
 80006d6:	0fce      	lsrs	r6, r1, #31
 80006d8:	0a61      	lsrs	r1, r4, #9
 80006da:	9c00      	ldr	r4, [sp, #0]
 80006dc:	031d      	lsls	r5, r3, #12
 80006de:	0f64      	lsrs	r4, r4, #29
 80006e0:	430c      	orrs	r4, r1
 80006e2:	9900      	ldr	r1, [sp, #0]
 80006e4:	9200      	str	r2, [sp, #0]
 80006e6:	9301      	str	r3, [sp, #4]
 80006e8:	00c8      	lsls	r0, r1, #3
 80006ea:	0059      	lsls	r1, r3, #1
 80006ec:	0d4b      	lsrs	r3, r1, #21
 80006ee:	4699      	mov	r9, r3
 80006f0:	9a00      	ldr	r2, [sp, #0]
 80006f2:	9b01      	ldr	r3, [sp, #4]
 80006f4:	0a6d      	lsrs	r5, r5, #9
 80006f6:	0fd9      	lsrs	r1, r3, #31
 80006f8:	0f53      	lsrs	r3, r2, #29
 80006fa:	432b      	orrs	r3, r5
 80006fc:	469a      	mov	sl, r3
 80006fe:	9b00      	ldr	r3, [sp, #0]
 8000700:	0d7f      	lsrs	r7, r7, #21
 8000702:	00da      	lsls	r2, r3, #3
 8000704:	4694      	mov	ip, r2
 8000706:	464a      	mov	r2, r9
 8000708:	46b0      	mov	r8, r6
 800070a:	1aba      	subs	r2, r7, r2
 800070c:	428e      	cmp	r6, r1
 800070e:	d100      	bne.n	8000712 <__aeabi_dadd+0x52>
 8000710:	e0b0      	b.n	8000874 <__aeabi_dadd+0x1b4>
 8000712:	2a00      	cmp	r2, #0
 8000714:	dc00      	bgt.n	8000718 <__aeabi_dadd+0x58>
 8000716:	e078      	b.n	800080a <__aeabi_dadd+0x14a>
 8000718:	4649      	mov	r1, r9
 800071a:	2900      	cmp	r1, #0
 800071c:	d100      	bne.n	8000720 <__aeabi_dadd+0x60>
 800071e:	e0e9      	b.n	80008f4 <__aeabi_dadd+0x234>
 8000720:	49c9      	ldr	r1, [pc, #804]	@ (8000a48 <__aeabi_dadd+0x388>)
 8000722:	428f      	cmp	r7, r1
 8000724:	d100      	bne.n	8000728 <__aeabi_dadd+0x68>
 8000726:	e195      	b.n	8000a54 <__aeabi_dadd+0x394>
 8000728:	2501      	movs	r5, #1
 800072a:	2a38      	cmp	r2, #56	@ 0x38
 800072c:	dc16      	bgt.n	800075c <__aeabi_dadd+0x9c>
 800072e:	2180      	movs	r1, #128	@ 0x80
 8000730:	4653      	mov	r3, sl
 8000732:	0409      	lsls	r1, r1, #16
 8000734:	430b      	orrs	r3, r1
 8000736:	469a      	mov	sl, r3
 8000738:	2a1f      	cmp	r2, #31
 800073a:	dd00      	ble.n	800073e <__aeabi_dadd+0x7e>
 800073c:	e1e7      	b.n	8000b0e <__aeabi_dadd+0x44e>
 800073e:	2120      	movs	r1, #32
 8000740:	4655      	mov	r5, sl
 8000742:	1a8b      	subs	r3, r1, r2
 8000744:	4661      	mov	r1, ip
 8000746:	409d      	lsls	r5, r3
 8000748:	40d1      	lsrs	r1, r2
 800074a:	430d      	orrs	r5, r1
 800074c:	4661      	mov	r1, ip
 800074e:	4099      	lsls	r1, r3
 8000750:	1e4b      	subs	r3, r1, #1
 8000752:	4199      	sbcs	r1, r3
 8000754:	4653      	mov	r3, sl
 8000756:	40d3      	lsrs	r3, r2
 8000758:	430d      	orrs	r5, r1
 800075a:	1ae4      	subs	r4, r4, r3
 800075c:	1b45      	subs	r5, r0, r5
 800075e:	42a8      	cmp	r0, r5
 8000760:	4180      	sbcs	r0, r0
 8000762:	4240      	negs	r0, r0
 8000764:	1a24      	subs	r4, r4, r0
 8000766:	0223      	lsls	r3, r4, #8
 8000768:	d400      	bmi.n	800076c <__aeabi_dadd+0xac>
 800076a:	e10f      	b.n	800098c <__aeabi_dadd+0x2cc>
 800076c:	0264      	lsls	r4, r4, #9
 800076e:	0a64      	lsrs	r4, r4, #9
 8000770:	2c00      	cmp	r4, #0
 8000772:	d100      	bne.n	8000776 <__aeabi_dadd+0xb6>
 8000774:	e139      	b.n	80009ea <__aeabi_dadd+0x32a>
 8000776:	0020      	movs	r0, r4
 8000778:	f7ff fe7a 	bl	8000470 <__clzsi2>
 800077c:	0003      	movs	r3, r0
 800077e:	3b08      	subs	r3, #8
 8000780:	2120      	movs	r1, #32
 8000782:	0028      	movs	r0, r5
 8000784:	1aca      	subs	r2, r1, r3
 8000786:	40d0      	lsrs	r0, r2
 8000788:	409c      	lsls	r4, r3
 800078a:	0002      	movs	r2, r0
 800078c:	409d      	lsls	r5, r3
 800078e:	4322      	orrs	r2, r4
 8000790:	429f      	cmp	r7, r3
 8000792:	dd00      	ble.n	8000796 <__aeabi_dadd+0xd6>
 8000794:	e173      	b.n	8000a7e <__aeabi_dadd+0x3be>
 8000796:	1bd8      	subs	r0, r3, r7
 8000798:	3001      	adds	r0, #1
 800079a:	1a09      	subs	r1, r1, r0
 800079c:	002c      	movs	r4, r5
 800079e:	408d      	lsls	r5, r1
 80007a0:	40c4      	lsrs	r4, r0
 80007a2:	1e6b      	subs	r3, r5, #1
 80007a4:	419d      	sbcs	r5, r3
 80007a6:	0013      	movs	r3, r2
 80007a8:	40c2      	lsrs	r2, r0
 80007aa:	408b      	lsls	r3, r1
 80007ac:	4325      	orrs	r5, r4
 80007ae:	2700      	movs	r7, #0
 80007b0:	0014      	movs	r4, r2
 80007b2:	431d      	orrs	r5, r3
 80007b4:	076b      	lsls	r3, r5, #29
 80007b6:	d009      	beq.n	80007cc <__aeabi_dadd+0x10c>
 80007b8:	230f      	movs	r3, #15
 80007ba:	402b      	ands	r3, r5
 80007bc:	2b04      	cmp	r3, #4
 80007be:	d005      	beq.n	80007cc <__aeabi_dadd+0x10c>
 80007c0:	1d2b      	adds	r3, r5, #4
 80007c2:	42ab      	cmp	r3, r5
 80007c4:	41ad      	sbcs	r5, r5
 80007c6:	426d      	negs	r5, r5
 80007c8:	1964      	adds	r4, r4, r5
 80007ca:	001d      	movs	r5, r3
 80007cc:	0223      	lsls	r3, r4, #8
 80007ce:	d400      	bmi.n	80007d2 <__aeabi_dadd+0x112>
 80007d0:	e12d      	b.n	8000a2e <__aeabi_dadd+0x36e>
 80007d2:	4a9d      	ldr	r2, [pc, #628]	@ (8000a48 <__aeabi_dadd+0x388>)
 80007d4:	3701      	adds	r7, #1
 80007d6:	4297      	cmp	r7, r2
 80007d8:	d100      	bne.n	80007dc <__aeabi_dadd+0x11c>
 80007da:	e0d3      	b.n	8000984 <__aeabi_dadd+0x2c4>
 80007dc:	4646      	mov	r6, r8
 80007de:	499b      	ldr	r1, [pc, #620]	@ (8000a4c <__aeabi_dadd+0x38c>)
 80007e0:	08ed      	lsrs	r5, r5, #3
 80007e2:	4021      	ands	r1, r4
 80007e4:	074a      	lsls	r2, r1, #29
 80007e6:	432a      	orrs	r2, r5
 80007e8:	057c      	lsls	r4, r7, #21
 80007ea:	024d      	lsls	r5, r1, #9
 80007ec:	0b2d      	lsrs	r5, r5, #12
 80007ee:	0d64      	lsrs	r4, r4, #21
 80007f0:	0524      	lsls	r4, r4, #20
 80007f2:	432c      	orrs	r4, r5
 80007f4:	07f6      	lsls	r6, r6, #31
 80007f6:	4334      	orrs	r4, r6
 80007f8:	0010      	movs	r0, r2
 80007fa:	0021      	movs	r1, r4
 80007fc:	b003      	add	sp, #12
 80007fe:	bcf0      	pop	{r4, r5, r6, r7}
 8000800:	46bb      	mov	fp, r7
 8000802:	46b2      	mov	sl, r6
 8000804:	46a9      	mov	r9, r5
 8000806:	46a0      	mov	r8, r4
 8000808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800080a:	2a00      	cmp	r2, #0
 800080c:	d100      	bne.n	8000810 <__aeabi_dadd+0x150>
 800080e:	e084      	b.n	800091a <__aeabi_dadd+0x25a>
 8000810:	464a      	mov	r2, r9
 8000812:	1bd2      	subs	r2, r2, r7
 8000814:	2f00      	cmp	r7, #0
 8000816:	d000      	beq.n	800081a <__aeabi_dadd+0x15a>
 8000818:	e16d      	b.n	8000af6 <__aeabi_dadd+0x436>
 800081a:	0025      	movs	r5, r4
 800081c:	4305      	orrs	r5, r0
 800081e:	d100      	bne.n	8000822 <__aeabi_dadd+0x162>
 8000820:	e127      	b.n	8000a72 <__aeabi_dadd+0x3b2>
 8000822:	1e56      	subs	r6, r2, #1
 8000824:	2a01      	cmp	r2, #1
 8000826:	d100      	bne.n	800082a <__aeabi_dadd+0x16a>
 8000828:	e23b      	b.n	8000ca2 <__aeabi_dadd+0x5e2>
 800082a:	4d87      	ldr	r5, [pc, #540]	@ (8000a48 <__aeabi_dadd+0x388>)
 800082c:	42aa      	cmp	r2, r5
 800082e:	d100      	bne.n	8000832 <__aeabi_dadd+0x172>
 8000830:	e26a      	b.n	8000d08 <__aeabi_dadd+0x648>
 8000832:	2501      	movs	r5, #1
 8000834:	2e38      	cmp	r6, #56	@ 0x38
 8000836:	dc12      	bgt.n	800085e <__aeabi_dadd+0x19e>
 8000838:	0032      	movs	r2, r6
 800083a:	2a1f      	cmp	r2, #31
 800083c:	dd00      	ble.n	8000840 <__aeabi_dadd+0x180>
 800083e:	e1f8      	b.n	8000c32 <__aeabi_dadd+0x572>
 8000840:	2620      	movs	r6, #32
 8000842:	0025      	movs	r5, r4
 8000844:	1ab6      	subs	r6, r6, r2
 8000846:	0007      	movs	r7, r0
 8000848:	4653      	mov	r3, sl
 800084a:	40b0      	lsls	r0, r6
 800084c:	40d4      	lsrs	r4, r2
 800084e:	40b5      	lsls	r5, r6
 8000850:	40d7      	lsrs	r7, r2
 8000852:	1e46      	subs	r6, r0, #1
 8000854:	41b0      	sbcs	r0, r6
 8000856:	1b1b      	subs	r3, r3, r4
 8000858:	469a      	mov	sl, r3
 800085a:	433d      	orrs	r5, r7
 800085c:	4305      	orrs	r5, r0
 800085e:	4662      	mov	r2, ip
 8000860:	1b55      	subs	r5, r2, r5
 8000862:	45ac      	cmp	ip, r5
 8000864:	4192      	sbcs	r2, r2
 8000866:	4653      	mov	r3, sl
 8000868:	4252      	negs	r2, r2
 800086a:	000e      	movs	r6, r1
 800086c:	464f      	mov	r7, r9
 800086e:	4688      	mov	r8, r1
 8000870:	1a9c      	subs	r4, r3, r2
 8000872:	e778      	b.n	8000766 <__aeabi_dadd+0xa6>
 8000874:	2a00      	cmp	r2, #0
 8000876:	dc00      	bgt.n	800087a <__aeabi_dadd+0x1ba>
 8000878:	e08e      	b.n	8000998 <__aeabi_dadd+0x2d8>
 800087a:	4649      	mov	r1, r9
 800087c:	2900      	cmp	r1, #0
 800087e:	d175      	bne.n	800096c <__aeabi_dadd+0x2ac>
 8000880:	4661      	mov	r1, ip
 8000882:	4653      	mov	r3, sl
 8000884:	4319      	orrs	r1, r3
 8000886:	d100      	bne.n	800088a <__aeabi_dadd+0x1ca>
 8000888:	e0f6      	b.n	8000a78 <__aeabi_dadd+0x3b8>
 800088a:	1e51      	subs	r1, r2, #1
 800088c:	2a01      	cmp	r2, #1
 800088e:	d100      	bne.n	8000892 <__aeabi_dadd+0x1d2>
 8000890:	e191      	b.n	8000bb6 <__aeabi_dadd+0x4f6>
 8000892:	4d6d      	ldr	r5, [pc, #436]	@ (8000a48 <__aeabi_dadd+0x388>)
 8000894:	42aa      	cmp	r2, r5
 8000896:	d100      	bne.n	800089a <__aeabi_dadd+0x1da>
 8000898:	e0dc      	b.n	8000a54 <__aeabi_dadd+0x394>
 800089a:	2501      	movs	r5, #1
 800089c:	2938      	cmp	r1, #56	@ 0x38
 800089e:	dc14      	bgt.n	80008ca <__aeabi_dadd+0x20a>
 80008a0:	000a      	movs	r2, r1
 80008a2:	2a1f      	cmp	r2, #31
 80008a4:	dd00      	ble.n	80008a8 <__aeabi_dadd+0x1e8>
 80008a6:	e1a2      	b.n	8000bee <__aeabi_dadd+0x52e>
 80008a8:	2120      	movs	r1, #32
 80008aa:	4653      	mov	r3, sl
 80008ac:	1a89      	subs	r1, r1, r2
 80008ae:	408b      	lsls	r3, r1
 80008b0:	001d      	movs	r5, r3
 80008b2:	4663      	mov	r3, ip
 80008b4:	40d3      	lsrs	r3, r2
 80008b6:	431d      	orrs	r5, r3
 80008b8:	4663      	mov	r3, ip
 80008ba:	408b      	lsls	r3, r1
 80008bc:	0019      	movs	r1, r3
 80008be:	1e4b      	subs	r3, r1, #1
 80008c0:	4199      	sbcs	r1, r3
 80008c2:	4653      	mov	r3, sl
 80008c4:	40d3      	lsrs	r3, r2
 80008c6:	430d      	orrs	r5, r1
 80008c8:	18e4      	adds	r4, r4, r3
 80008ca:	182d      	adds	r5, r5, r0
 80008cc:	4285      	cmp	r5, r0
 80008ce:	4180      	sbcs	r0, r0
 80008d0:	4240      	negs	r0, r0
 80008d2:	1824      	adds	r4, r4, r0
 80008d4:	0223      	lsls	r3, r4, #8
 80008d6:	d559      	bpl.n	800098c <__aeabi_dadd+0x2cc>
 80008d8:	4b5b      	ldr	r3, [pc, #364]	@ (8000a48 <__aeabi_dadd+0x388>)
 80008da:	3701      	adds	r7, #1
 80008dc:	429f      	cmp	r7, r3
 80008de:	d051      	beq.n	8000984 <__aeabi_dadd+0x2c4>
 80008e0:	2101      	movs	r1, #1
 80008e2:	4b5a      	ldr	r3, [pc, #360]	@ (8000a4c <__aeabi_dadd+0x38c>)
 80008e4:	086a      	lsrs	r2, r5, #1
 80008e6:	401c      	ands	r4, r3
 80008e8:	4029      	ands	r1, r5
 80008ea:	430a      	orrs	r2, r1
 80008ec:	07e5      	lsls	r5, r4, #31
 80008ee:	4315      	orrs	r5, r2
 80008f0:	0864      	lsrs	r4, r4, #1
 80008f2:	e75f      	b.n	80007b4 <__aeabi_dadd+0xf4>
 80008f4:	4661      	mov	r1, ip
 80008f6:	4653      	mov	r3, sl
 80008f8:	4319      	orrs	r1, r3
 80008fa:	d100      	bne.n	80008fe <__aeabi_dadd+0x23e>
 80008fc:	e0bc      	b.n	8000a78 <__aeabi_dadd+0x3b8>
 80008fe:	1e51      	subs	r1, r2, #1
 8000900:	2a01      	cmp	r2, #1
 8000902:	d100      	bne.n	8000906 <__aeabi_dadd+0x246>
 8000904:	e164      	b.n	8000bd0 <__aeabi_dadd+0x510>
 8000906:	4d50      	ldr	r5, [pc, #320]	@ (8000a48 <__aeabi_dadd+0x388>)
 8000908:	42aa      	cmp	r2, r5
 800090a:	d100      	bne.n	800090e <__aeabi_dadd+0x24e>
 800090c:	e16a      	b.n	8000be4 <__aeabi_dadd+0x524>
 800090e:	2501      	movs	r5, #1
 8000910:	2938      	cmp	r1, #56	@ 0x38
 8000912:	dd00      	ble.n	8000916 <__aeabi_dadd+0x256>
 8000914:	e722      	b.n	800075c <__aeabi_dadd+0x9c>
 8000916:	000a      	movs	r2, r1
 8000918:	e70e      	b.n	8000738 <__aeabi_dadd+0x78>
 800091a:	4a4d      	ldr	r2, [pc, #308]	@ (8000a50 <__aeabi_dadd+0x390>)
 800091c:	1c7d      	adds	r5, r7, #1
 800091e:	4215      	tst	r5, r2
 8000920:	d000      	beq.n	8000924 <__aeabi_dadd+0x264>
 8000922:	e0d0      	b.n	8000ac6 <__aeabi_dadd+0x406>
 8000924:	0025      	movs	r5, r4
 8000926:	4662      	mov	r2, ip
 8000928:	4653      	mov	r3, sl
 800092a:	4305      	orrs	r5, r0
 800092c:	431a      	orrs	r2, r3
 800092e:	2f00      	cmp	r7, #0
 8000930:	d000      	beq.n	8000934 <__aeabi_dadd+0x274>
 8000932:	e137      	b.n	8000ba4 <__aeabi_dadd+0x4e4>
 8000934:	2d00      	cmp	r5, #0
 8000936:	d100      	bne.n	800093a <__aeabi_dadd+0x27a>
 8000938:	e1a8      	b.n	8000c8c <__aeabi_dadd+0x5cc>
 800093a:	2a00      	cmp	r2, #0
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x280>
 800093e:	e16a      	b.n	8000c16 <__aeabi_dadd+0x556>
 8000940:	4663      	mov	r3, ip
 8000942:	1ac5      	subs	r5, r0, r3
 8000944:	4653      	mov	r3, sl
 8000946:	1ae2      	subs	r2, r4, r3
 8000948:	42a8      	cmp	r0, r5
 800094a:	419b      	sbcs	r3, r3
 800094c:	425b      	negs	r3, r3
 800094e:	1ad3      	subs	r3, r2, r3
 8000950:	021a      	lsls	r2, r3, #8
 8000952:	d400      	bmi.n	8000956 <__aeabi_dadd+0x296>
 8000954:	e203      	b.n	8000d5e <__aeabi_dadd+0x69e>
 8000956:	4663      	mov	r3, ip
 8000958:	1a1d      	subs	r5, r3, r0
 800095a:	45ac      	cmp	ip, r5
 800095c:	4192      	sbcs	r2, r2
 800095e:	4653      	mov	r3, sl
 8000960:	4252      	negs	r2, r2
 8000962:	1b1c      	subs	r4, r3, r4
 8000964:	000e      	movs	r6, r1
 8000966:	4688      	mov	r8, r1
 8000968:	1aa4      	subs	r4, r4, r2
 800096a:	e723      	b.n	80007b4 <__aeabi_dadd+0xf4>
 800096c:	4936      	ldr	r1, [pc, #216]	@ (8000a48 <__aeabi_dadd+0x388>)
 800096e:	428f      	cmp	r7, r1
 8000970:	d070      	beq.n	8000a54 <__aeabi_dadd+0x394>
 8000972:	2501      	movs	r5, #1
 8000974:	2a38      	cmp	r2, #56	@ 0x38
 8000976:	dca8      	bgt.n	80008ca <__aeabi_dadd+0x20a>
 8000978:	2180      	movs	r1, #128	@ 0x80
 800097a:	4653      	mov	r3, sl
 800097c:	0409      	lsls	r1, r1, #16
 800097e:	430b      	orrs	r3, r1
 8000980:	469a      	mov	sl, r3
 8000982:	e78e      	b.n	80008a2 <__aeabi_dadd+0x1e2>
 8000984:	003c      	movs	r4, r7
 8000986:	2500      	movs	r5, #0
 8000988:	2200      	movs	r2, #0
 800098a:	e731      	b.n	80007f0 <__aeabi_dadd+0x130>
 800098c:	2307      	movs	r3, #7
 800098e:	402b      	ands	r3, r5
 8000990:	2b00      	cmp	r3, #0
 8000992:	d000      	beq.n	8000996 <__aeabi_dadd+0x2d6>
 8000994:	e710      	b.n	80007b8 <__aeabi_dadd+0xf8>
 8000996:	e093      	b.n	8000ac0 <__aeabi_dadd+0x400>
 8000998:	2a00      	cmp	r2, #0
 800099a:	d074      	beq.n	8000a86 <__aeabi_dadd+0x3c6>
 800099c:	464a      	mov	r2, r9
 800099e:	1bd2      	subs	r2, r2, r7
 80009a0:	2f00      	cmp	r7, #0
 80009a2:	d100      	bne.n	80009a6 <__aeabi_dadd+0x2e6>
 80009a4:	e0c7      	b.n	8000b36 <__aeabi_dadd+0x476>
 80009a6:	4928      	ldr	r1, [pc, #160]	@ (8000a48 <__aeabi_dadd+0x388>)
 80009a8:	4589      	cmp	r9, r1
 80009aa:	d100      	bne.n	80009ae <__aeabi_dadd+0x2ee>
 80009ac:	e185      	b.n	8000cba <__aeabi_dadd+0x5fa>
 80009ae:	2501      	movs	r5, #1
 80009b0:	2a38      	cmp	r2, #56	@ 0x38
 80009b2:	dc12      	bgt.n	80009da <__aeabi_dadd+0x31a>
 80009b4:	2180      	movs	r1, #128	@ 0x80
 80009b6:	0409      	lsls	r1, r1, #16
 80009b8:	430c      	orrs	r4, r1
 80009ba:	2a1f      	cmp	r2, #31
 80009bc:	dd00      	ble.n	80009c0 <__aeabi_dadd+0x300>
 80009be:	e1ab      	b.n	8000d18 <__aeabi_dadd+0x658>
 80009c0:	2120      	movs	r1, #32
 80009c2:	0025      	movs	r5, r4
 80009c4:	1a89      	subs	r1, r1, r2
 80009c6:	0007      	movs	r7, r0
 80009c8:	4088      	lsls	r0, r1
 80009ca:	408d      	lsls	r5, r1
 80009cc:	40d7      	lsrs	r7, r2
 80009ce:	1e41      	subs	r1, r0, #1
 80009d0:	4188      	sbcs	r0, r1
 80009d2:	40d4      	lsrs	r4, r2
 80009d4:	433d      	orrs	r5, r7
 80009d6:	4305      	orrs	r5, r0
 80009d8:	44a2      	add	sl, r4
 80009da:	4465      	add	r5, ip
 80009dc:	4565      	cmp	r5, ip
 80009de:	4192      	sbcs	r2, r2
 80009e0:	4252      	negs	r2, r2
 80009e2:	4452      	add	r2, sl
 80009e4:	0014      	movs	r4, r2
 80009e6:	464f      	mov	r7, r9
 80009e8:	e774      	b.n	80008d4 <__aeabi_dadd+0x214>
 80009ea:	0028      	movs	r0, r5
 80009ec:	f7ff fd40 	bl	8000470 <__clzsi2>
 80009f0:	0003      	movs	r3, r0
 80009f2:	3318      	adds	r3, #24
 80009f4:	2b1f      	cmp	r3, #31
 80009f6:	dc00      	bgt.n	80009fa <__aeabi_dadd+0x33a>
 80009f8:	e6c2      	b.n	8000780 <__aeabi_dadd+0xc0>
 80009fa:	002a      	movs	r2, r5
 80009fc:	3808      	subs	r0, #8
 80009fe:	4082      	lsls	r2, r0
 8000a00:	429f      	cmp	r7, r3
 8000a02:	dd00      	ble.n	8000a06 <__aeabi_dadd+0x346>
 8000a04:	e0a9      	b.n	8000b5a <__aeabi_dadd+0x49a>
 8000a06:	1bdb      	subs	r3, r3, r7
 8000a08:	1c58      	adds	r0, r3, #1
 8000a0a:	281f      	cmp	r0, #31
 8000a0c:	dc00      	bgt.n	8000a10 <__aeabi_dadd+0x350>
 8000a0e:	e1ac      	b.n	8000d6a <__aeabi_dadd+0x6aa>
 8000a10:	0015      	movs	r5, r2
 8000a12:	3b1f      	subs	r3, #31
 8000a14:	40dd      	lsrs	r5, r3
 8000a16:	2820      	cmp	r0, #32
 8000a18:	d005      	beq.n	8000a26 <__aeabi_dadd+0x366>
 8000a1a:	2340      	movs	r3, #64	@ 0x40
 8000a1c:	1a1b      	subs	r3, r3, r0
 8000a1e:	409a      	lsls	r2, r3
 8000a20:	1e53      	subs	r3, r2, #1
 8000a22:	419a      	sbcs	r2, r3
 8000a24:	4315      	orrs	r5, r2
 8000a26:	2307      	movs	r3, #7
 8000a28:	2700      	movs	r7, #0
 8000a2a:	402b      	ands	r3, r5
 8000a2c:	e7b0      	b.n	8000990 <__aeabi_dadd+0x2d0>
 8000a2e:	08ed      	lsrs	r5, r5, #3
 8000a30:	4b05      	ldr	r3, [pc, #20]	@ (8000a48 <__aeabi_dadd+0x388>)
 8000a32:	0762      	lsls	r2, r4, #29
 8000a34:	432a      	orrs	r2, r5
 8000a36:	08e4      	lsrs	r4, r4, #3
 8000a38:	429f      	cmp	r7, r3
 8000a3a:	d00f      	beq.n	8000a5c <__aeabi_dadd+0x39c>
 8000a3c:	0324      	lsls	r4, r4, #12
 8000a3e:	0b25      	lsrs	r5, r4, #12
 8000a40:	057c      	lsls	r4, r7, #21
 8000a42:	0d64      	lsrs	r4, r4, #21
 8000a44:	e6d4      	b.n	80007f0 <__aeabi_dadd+0x130>
 8000a46:	46c0      	nop			@ (mov r8, r8)
 8000a48:	000007ff 	.word	0x000007ff
 8000a4c:	ff7fffff 	.word	0xff7fffff
 8000a50:	000007fe 	.word	0x000007fe
 8000a54:	08c0      	lsrs	r0, r0, #3
 8000a56:	0762      	lsls	r2, r4, #29
 8000a58:	4302      	orrs	r2, r0
 8000a5a:	08e4      	lsrs	r4, r4, #3
 8000a5c:	0013      	movs	r3, r2
 8000a5e:	4323      	orrs	r3, r4
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x3a4>
 8000a62:	e186      	b.n	8000d72 <__aeabi_dadd+0x6b2>
 8000a64:	2580      	movs	r5, #128	@ 0x80
 8000a66:	032d      	lsls	r5, r5, #12
 8000a68:	4325      	orrs	r5, r4
 8000a6a:	032d      	lsls	r5, r5, #12
 8000a6c:	4cc3      	ldr	r4, [pc, #780]	@ (8000d7c <__aeabi_dadd+0x6bc>)
 8000a6e:	0b2d      	lsrs	r5, r5, #12
 8000a70:	e6be      	b.n	80007f0 <__aeabi_dadd+0x130>
 8000a72:	4660      	mov	r0, ip
 8000a74:	4654      	mov	r4, sl
 8000a76:	000e      	movs	r6, r1
 8000a78:	0017      	movs	r7, r2
 8000a7a:	08c5      	lsrs	r5, r0, #3
 8000a7c:	e7d8      	b.n	8000a30 <__aeabi_dadd+0x370>
 8000a7e:	4cc0      	ldr	r4, [pc, #768]	@ (8000d80 <__aeabi_dadd+0x6c0>)
 8000a80:	1aff      	subs	r7, r7, r3
 8000a82:	4014      	ands	r4, r2
 8000a84:	e696      	b.n	80007b4 <__aeabi_dadd+0xf4>
 8000a86:	4abf      	ldr	r2, [pc, #764]	@ (8000d84 <__aeabi_dadd+0x6c4>)
 8000a88:	1c79      	adds	r1, r7, #1
 8000a8a:	4211      	tst	r1, r2
 8000a8c:	d16b      	bne.n	8000b66 <__aeabi_dadd+0x4a6>
 8000a8e:	0022      	movs	r2, r4
 8000a90:	4302      	orrs	r2, r0
 8000a92:	2f00      	cmp	r7, #0
 8000a94:	d000      	beq.n	8000a98 <__aeabi_dadd+0x3d8>
 8000a96:	e0db      	b.n	8000c50 <__aeabi_dadd+0x590>
 8000a98:	2a00      	cmp	r2, #0
 8000a9a:	d100      	bne.n	8000a9e <__aeabi_dadd+0x3de>
 8000a9c:	e12d      	b.n	8000cfa <__aeabi_dadd+0x63a>
 8000a9e:	4662      	mov	r2, ip
 8000aa0:	4653      	mov	r3, sl
 8000aa2:	431a      	orrs	r2, r3
 8000aa4:	d100      	bne.n	8000aa8 <__aeabi_dadd+0x3e8>
 8000aa6:	e0b6      	b.n	8000c16 <__aeabi_dadd+0x556>
 8000aa8:	4663      	mov	r3, ip
 8000aaa:	18c5      	adds	r5, r0, r3
 8000aac:	4285      	cmp	r5, r0
 8000aae:	4180      	sbcs	r0, r0
 8000ab0:	4454      	add	r4, sl
 8000ab2:	4240      	negs	r0, r0
 8000ab4:	1824      	adds	r4, r4, r0
 8000ab6:	0223      	lsls	r3, r4, #8
 8000ab8:	d502      	bpl.n	8000ac0 <__aeabi_dadd+0x400>
 8000aba:	000f      	movs	r7, r1
 8000abc:	4bb0      	ldr	r3, [pc, #704]	@ (8000d80 <__aeabi_dadd+0x6c0>)
 8000abe:	401c      	ands	r4, r3
 8000ac0:	003a      	movs	r2, r7
 8000ac2:	0028      	movs	r0, r5
 8000ac4:	e7d8      	b.n	8000a78 <__aeabi_dadd+0x3b8>
 8000ac6:	4662      	mov	r2, ip
 8000ac8:	1a85      	subs	r5, r0, r2
 8000aca:	42a8      	cmp	r0, r5
 8000acc:	4192      	sbcs	r2, r2
 8000ace:	4653      	mov	r3, sl
 8000ad0:	4252      	negs	r2, r2
 8000ad2:	4691      	mov	r9, r2
 8000ad4:	1ae3      	subs	r3, r4, r3
 8000ad6:	001a      	movs	r2, r3
 8000ad8:	464b      	mov	r3, r9
 8000ada:	1ad2      	subs	r2, r2, r3
 8000adc:	0013      	movs	r3, r2
 8000ade:	4691      	mov	r9, r2
 8000ae0:	021a      	lsls	r2, r3, #8
 8000ae2:	d454      	bmi.n	8000b8e <__aeabi_dadd+0x4ce>
 8000ae4:	464a      	mov	r2, r9
 8000ae6:	464c      	mov	r4, r9
 8000ae8:	432a      	orrs	r2, r5
 8000aea:	d000      	beq.n	8000aee <__aeabi_dadd+0x42e>
 8000aec:	e640      	b.n	8000770 <__aeabi_dadd+0xb0>
 8000aee:	2600      	movs	r6, #0
 8000af0:	2400      	movs	r4, #0
 8000af2:	2500      	movs	r5, #0
 8000af4:	e67c      	b.n	80007f0 <__aeabi_dadd+0x130>
 8000af6:	4da1      	ldr	r5, [pc, #644]	@ (8000d7c <__aeabi_dadd+0x6bc>)
 8000af8:	45a9      	cmp	r9, r5
 8000afa:	d100      	bne.n	8000afe <__aeabi_dadd+0x43e>
 8000afc:	e090      	b.n	8000c20 <__aeabi_dadd+0x560>
 8000afe:	2501      	movs	r5, #1
 8000b00:	2a38      	cmp	r2, #56	@ 0x38
 8000b02:	dd00      	ble.n	8000b06 <__aeabi_dadd+0x446>
 8000b04:	e6ab      	b.n	800085e <__aeabi_dadd+0x19e>
 8000b06:	2580      	movs	r5, #128	@ 0x80
 8000b08:	042d      	lsls	r5, r5, #16
 8000b0a:	432c      	orrs	r4, r5
 8000b0c:	e695      	b.n	800083a <__aeabi_dadd+0x17a>
 8000b0e:	0011      	movs	r1, r2
 8000b10:	4655      	mov	r5, sl
 8000b12:	3920      	subs	r1, #32
 8000b14:	40cd      	lsrs	r5, r1
 8000b16:	46a9      	mov	r9, r5
 8000b18:	2a20      	cmp	r2, #32
 8000b1a:	d006      	beq.n	8000b2a <__aeabi_dadd+0x46a>
 8000b1c:	2140      	movs	r1, #64	@ 0x40
 8000b1e:	4653      	mov	r3, sl
 8000b20:	1a8a      	subs	r2, r1, r2
 8000b22:	4093      	lsls	r3, r2
 8000b24:	4662      	mov	r2, ip
 8000b26:	431a      	orrs	r2, r3
 8000b28:	4694      	mov	ip, r2
 8000b2a:	4665      	mov	r5, ip
 8000b2c:	1e6b      	subs	r3, r5, #1
 8000b2e:	419d      	sbcs	r5, r3
 8000b30:	464b      	mov	r3, r9
 8000b32:	431d      	orrs	r5, r3
 8000b34:	e612      	b.n	800075c <__aeabi_dadd+0x9c>
 8000b36:	0021      	movs	r1, r4
 8000b38:	4301      	orrs	r1, r0
 8000b3a:	d100      	bne.n	8000b3e <__aeabi_dadd+0x47e>
 8000b3c:	e0c4      	b.n	8000cc8 <__aeabi_dadd+0x608>
 8000b3e:	1e51      	subs	r1, r2, #1
 8000b40:	2a01      	cmp	r2, #1
 8000b42:	d100      	bne.n	8000b46 <__aeabi_dadd+0x486>
 8000b44:	e0fb      	b.n	8000d3e <__aeabi_dadd+0x67e>
 8000b46:	4d8d      	ldr	r5, [pc, #564]	@ (8000d7c <__aeabi_dadd+0x6bc>)
 8000b48:	42aa      	cmp	r2, r5
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_dadd+0x48e>
 8000b4c:	e0b5      	b.n	8000cba <__aeabi_dadd+0x5fa>
 8000b4e:	2501      	movs	r5, #1
 8000b50:	2938      	cmp	r1, #56	@ 0x38
 8000b52:	dd00      	ble.n	8000b56 <__aeabi_dadd+0x496>
 8000b54:	e741      	b.n	80009da <__aeabi_dadd+0x31a>
 8000b56:	000a      	movs	r2, r1
 8000b58:	e72f      	b.n	80009ba <__aeabi_dadd+0x2fa>
 8000b5a:	4c89      	ldr	r4, [pc, #548]	@ (8000d80 <__aeabi_dadd+0x6c0>)
 8000b5c:	1aff      	subs	r7, r7, r3
 8000b5e:	4014      	ands	r4, r2
 8000b60:	0762      	lsls	r2, r4, #29
 8000b62:	08e4      	lsrs	r4, r4, #3
 8000b64:	e76a      	b.n	8000a3c <__aeabi_dadd+0x37c>
 8000b66:	4a85      	ldr	r2, [pc, #532]	@ (8000d7c <__aeabi_dadd+0x6bc>)
 8000b68:	4291      	cmp	r1, r2
 8000b6a:	d100      	bne.n	8000b6e <__aeabi_dadd+0x4ae>
 8000b6c:	e0e3      	b.n	8000d36 <__aeabi_dadd+0x676>
 8000b6e:	4663      	mov	r3, ip
 8000b70:	18c2      	adds	r2, r0, r3
 8000b72:	4282      	cmp	r2, r0
 8000b74:	4180      	sbcs	r0, r0
 8000b76:	0023      	movs	r3, r4
 8000b78:	4240      	negs	r0, r0
 8000b7a:	4453      	add	r3, sl
 8000b7c:	181b      	adds	r3, r3, r0
 8000b7e:	07dd      	lsls	r5, r3, #31
 8000b80:	085c      	lsrs	r4, r3, #1
 8000b82:	2307      	movs	r3, #7
 8000b84:	0852      	lsrs	r2, r2, #1
 8000b86:	4315      	orrs	r5, r2
 8000b88:	000f      	movs	r7, r1
 8000b8a:	402b      	ands	r3, r5
 8000b8c:	e700      	b.n	8000990 <__aeabi_dadd+0x2d0>
 8000b8e:	4663      	mov	r3, ip
 8000b90:	1a1d      	subs	r5, r3, r0
 8000b92:	45ac      	cmp	ip, r5
 8000b94:	4192      	sbcs	r2, r2
 8000b96:	4653      	mov	r3, sl
 8000b98:	4252      	negs	r2, r2
 8000b9a:	1b1c      	subs	r4, r3, r4
 8000b9c:	000e      	movs	r6, r1
 8000b9e:	4688      	mov	r8, r1
 8000ba0:	1aa4      	subs	r4, r4, r2
 8000ba2:	e5e5      	b.n	8000770 <__aeabi_dadd+0xb0>
 8000ba4:	2d00      	cmp	r5, #0
 8000ba6:	d000      	beq.n	8000baa <__aeabi_dadd+0x4ea>
 8000ba8:	e091      	b.n	8000cce <__aeabi_dadd+0x60e>
 8000baa:	2a00      	cmp	r2, #0
 8000bac:	d138      	bne.n	8000c20 <__aeabi_dadd+0x560>
 8000bae:	2480      	movs	r4, #128	@ 0x80
 8000bb0:	2600      	movs	r6, #0
 8000bb2:	0324      	lsls	r4, r4, #12
 8000bb4:	e756      	b.n	8000a64 <__aeabi_dadd+0x3a4>
 8000bb6:	4663      	mov	r3, ip
 8000bb8:	18c5      	adds	r5, r0, r3
 8000bba:	4285      	cmp	r5, r0
 8000bbc:	4180      	sbcs	r0, r0
 8000bbe:	4454      	add	r4, sl
 8000bc0:	4240      	negs	r0, r0
 8000bc2:	1824      	adds	r4, r4, r0
 8000bc4:	2701      	movs	r7, #1
 8000bc6:	0223      	lsls	r3, r4, #8
 8000bc8:	d400      	bmi.n	8000bcc <__aeabi_dadd+0x50c>
 8000bca:	e6df      	b.n	800098c <__aeabi_dadd+0x2cc>
 8000bcc:	2702      	movs	r7, #2
 8000bce:	e687      	b.n	80008e0 <__aeabi_dadd+0x220>
 8000bd0:	4663      	mov	r3, ip
 8000bd2:	1ac5      	subs	r5, r0, r3
 8000bd4:	42a8      	cmp	r0, r5
 8000bd6:	4180      	sbcs	r0, r0
 8000bd8:	4653      	mov	r3, sl
 8000bda:	4240      	negs	r0, r0
 8000bdc:	1ae4      	subs	r4, r4, r3
 8000bde:	2701      	movs	r7, #1
 8000be0:	1a24      	subs	r4, r4, r0
 8000be2:	e5c0      	b.n	8000766 <__aeabi_dadd+0xa6>
 8000be4:	0762      	lsls	r2, r4, #29
 8000be6:	08c0      	lsrs	r0, r0, #3
 8000be8:	4302      	orrs	r2, r0
 8000bea:	08e4      	lsrs	r4, r4, #3
 8000bec:	e736      	b.n	8000a5c <__aeabi_dadd+0x39c>
 8000bee:	0011      	movs	r1, r2
 8000bf0:	4653      	mov	r3, sl
 8000bf2:	3920      	subs	r1, #32
 8000bf4:	40cb      	lsrs	r3, r1
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	2a20      	cmp	r2, #32
 8000bfa:	d006      	beq.n	8000c0a <__aeabi_dadd+0x54a>
 8000bfc:	2140      	movs	r1, #64	@ 0x40
 8000bfe:	4653      	mov	r3, sl
 8000c00:	1a8a      	subs	r2, r1, r2
 8000c02:	4093      	lsls	r3, r2
 8000c04:	4662      	mov	r2, ip
 8000c06:	431a      	orrs	r2, r3
 8000c08:	4694      	mov	ip, r2
 8000c0a:	4665      	mov	r5, ip
 8000c0c:	1e6b      	subs	r3, r5, #1
 8000c0e:	419d      	sbcs	r5, r3
 8000c10:	464b      	mov	r3, r9
 8000c12:	431d      	orrs	r5, r3
 8000c14:	e659      	b.n	80008ca <__aeabi_dadd+0x20a>
 8000c16:	0762      	lsls	r2, r4, #29
 8000c18:	08c0      	lsrs	r0, r0, #3
 8000c1a:	4302      	orrs	r2, r0
 8000c1c:	08e4      	lsrs	r4, r4, #3
 8000c1e:	e70d      	b.n	8000a3c <__aeabi_dadd+0x37c>
 8000c20:	4653      	mov	r3, sl
 8000c22:	075a      	lsls	r2, r3, #29
 8000c24:	4663      	mov	r3, ip
 8000c26:	08d8      	lsrs	r0, r3, #3
 8000c28:	4653      	mov	r3, sl
 8000c2a:	000e      	movs	r6, r1
 8000c2c:	4302      	orrs	r2, r0
 8000c2e:	08dc      	lsrs	r4, r3, #3
 8000c30:	e714      	b.n	8000a5c <__aeabi_dadd+0x39c>
 8000c32:	0015      	movs	r5, r2
 8000c34:	0026      	movs	r6, r4
 8000c36:	3d20      	subs	r5, #32
 8000c38:	40ee      	lsrs	r6, r5
 8000c3a:	2a20      	cmp	r2, #32
 8000c3c:	d003      	beq.n	8000c46 <__aeabi_dadd+0x586>
 8000c3e:	2540      	movs	r5, #64	@ 0x40
 8000c40:	1aaa      	subs	r2, r5, r2
 8000c42:	4094      	lsls	r4, r2
 8000c44:	4320      	orrs	r0, r4
 8000c46:	1e42      	subs	r2, r0, #1
 8000c48:	4190      	sbcs	r0, r2
 8000c4a:	0005      	movs	r5, r0
 8000c4c:	4335      	orrs	r5, r6
 8000c4e:	e606      	b.n	800085e <__aeabi_dadd+0x19e>
 8000c50:	2a00      	cmp	r2, #0
 8000c52:	d07c      	beq.n	8000d4e <__aeabi_dadd+0x68e>
 8000c54:	4662      	mov	r2, ip
 8000c56:	4653      	mov	r3, sl
 8000c58:	08c0      	lsrs	r0, r0, #3
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	d100      	bne.n	8000c60 <__aeabi_dadd+0x5a0>
 8000c5e:	e6fa      	b.n	8000a56 <__aeabi_dadd+0x396>
 8000c60:	0762      	lsls	r2, r4, #29
 8000c62:	4310      	orrs	r0, r2
 8000c64:	2280      	movs	r2, #128	@ 0x80
 8000c66:	08e4      	lsrs	r4, r4, #3
 8000c68:	0312      	lsls	r2, r2, #12
 8000c6a:	4214      	tst	r4, r2
 8000c6c:	d008      	beq.n	8000c80 <__aeabi_dadd+0x5c0>
 8000c6e:	08d9      	lsrs	r1, r3, #3
 8000c70:	4211      	tst	r1, r2
 8000c72:	d105      	bne.n	8000c80 <__aeabi_dadd+0x5c0>
 8000c74:	4663      	mov	r3, ip
 8000c76:	08d8      	lsrs	r0, r3, #3
 8000c78:	4653      	mov	r3, sl
 8000c7a:	000c      	movs	r4, r1
 8000c7c:	075b      	lsls	r3, r3, #29
 8000c7e:	4318      	orrs	r0, r3
 8000c80:	0f42      	lsrs	r2, r0, #29
 8000c82:	00c0      	lsls	r0, r0, #3
 8000c84:	08c0      	lsrs	r0, r0, #3
 8000c86:	0752      	lsls	r2, r2, #29
 8000c88:	4302      	orrs	r2, r0
 8000c8a:	e6e7      	b.n	8000a5c <__aeabi_dadd+0x39c>
 8000c8c:	2a00      	cmp	r2, #0
 8000c8e:	d100      	bne.n	8000c92 <__aeabi_dadd+0x5d2>
 8000c90:	e72d      	b.n	8000aee <__aeabi_dadd+0x42e>
 8000c92:	4663      	mov	r3, ip
 8000c94:	08d8      	lsrs	r0, r3, #3
 8000c96:	4653      	mov	r3, sl
 8000c98:	075a      	lsls	r2, r3, #29
 8000c9a:	000e      	movs	r6, r1
 8000c9c:	4302      	orrs	r2, r0
 8000c9e:	08dc      	lsrs	r4, r3, #3
 8000ca0:	e6cc      	b.n	8000a3c <__aeabi_dadd+0x37c>
 8000ca2:	4663      	mov	r3, ip
 8000ca4:	1a1d      	subs	r5, r3, r0
 8000ca6:	45ac      	cmp	ip, r5
 8000ca8:	4192      	sbcs	r2, r2
 8000caa:	4653      	mov	r3, sl
 8000cac:	4252      	negs	r2, r2
 8000cae:	1b1c      	subs	r4, r3, r4
 8000cb0:	000e      	movs	r6, r1
 8000cb2:	4688      	mov	r8, r1
 8000cb4:	1aa4      	subs	r4, r4, r2
 8000cb6:	3701      	adds	r7, #1
 8000cb8:	e555      	b.n	8000766 <__aeabi_dadd+0xa6>
 8000cba:	4663      	mov	r3, ip
 8000cbc:	08d9      	lsrs	r1, r3, #3
 8000cbe:	4653      	mov	r3, sl
 8000cc0:	075a      	lsls	r2, r3, #29
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	08dc      	lsrs	r4, r3, #3
 8000cc6:	e6c9      	b.n	8000a5c <__aeabi_dadd+0x39c>
 8000cc8:	4660      	mov	r0, ip
 8000cca:	4654      	mov	r4, sl
 8000ccc:	e6d4      	b.n	8000a78 <__aeabi_dadd+0x3b8>
 8000cce:	08c0      	lsrs	r0, r0, #3
 8000cd0:	2a00      	cmp	r2, #0
 8000cd2:	d100      	bne.n	8000cd6 <__aeabi_dadd+0x616>
 8000cd4:	e6bf      	b.n	8000a56 <__aeabi_dadd+0x396>
 8000cd6:	0762      	lsls	r2, r4, #29
 8000cd8:	4310      	orrs	r0, r2
 8000cda:	2280      	movs	r2, #128	@ 0x80
 8000cdc:	08e4      	lsrs	r4, r4, #3
 8000cde:	0312      	lsls	r2, r2, #12
 8000ce0:	4214      	tst	r4, r2
 8000ce2:	d0cd      	beq.n	8000c80 <__aeabi_dadd+0x5c0>
 8000ce4:	08dd      	lsrs	r5, r3, #3
 8000ce6:	4215      	tst	r5, r2
 8000ce8:	d1ca      	bne.n	8000c80 <__aeabi_dadd+0x5c0>
 8000cea:	4663      	mov	r3, ip
 8000cec:	08d8      	lsrs	r0, r3, #3
 8000cee:	4653      	mov	r3, sl
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	000e      	movs	r6, r1
 8000cf4:	002c      	movs	r4, r5
 8000cf6:	4318      	orrs	r0, r3
 8000cf8:	e7c2      	b.n	8000c80 <__aeabi_dadd+0x5c0>
 8000cfa:	4663      	mov	r3, ip
 8000cfc:	08d9      	lsrs	r1, r3, #3
 8000cfe:	4653      	mov	r3, sl
 8000d00:	075a      	lsls	r2, r3, #29
 8000d02:	430a      	orrs	r2, r1
 8000d04:	08dc      	lsrs	r4, r3, #3
 8000d06:	e699      	b.n	8000a3c <__aeabi_dadd+0x37c>
 8000d08:	4663      	mov	r3, ip
 8000d0a:	08d8      	lsrs	r0, r3, #3
 8000d0c:	4653      	mov	r3, sl
 8000d0e:	075a      	lsls	r2, r3, #29
 8000d10:	000e      	movs	r6, r1
 8000d12:	4302      	orrs	r2, r0
 8000d14:	08dc      	lsrs	r4, r3, #3
 8000d16:	e6a1      	b.n	8000a5c <__aeabi_dadd+0x39c>
 8000d18:	0011      	movs	r1, r2
 8000d1a:	0027      	movs	r7, r4
 8000d1c:	3920      	subs	r1, #32
 8000d1e:	40cf      	lsrs	r7, r1
 8000d20:	2a20      	cmp	r2, #32
 8000d22:	d003      	beq.n	8000d2c <__aeabi_dadd+0x66c>
 8000d24:	2140      	movs	r1, #64	@ 0x40
 8000d26:	1a8a      	subs	r2, r1, r2
 8000d28:	4094      	lsls	r4, r2
 8000d2a:	4320      	orrs	r0, r4
 8000d2c:	1e42      	subs	r2, r0, #1
 8000d2e:	4190      	sbcs	r0, r2
 8000d30:	0005      	movs	r5, r0
 8000d32:	433d      	orrs	r5, r7
 8000d34:	e651      	b.n	80009da <__aeabi_dadd+0x31a>
 8000d36:	000c      	movs	r4, r1
 8000d38:	2500      	movs	r5, #0
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	e558      	b.n	80007f0 <__aeabi_dadd+0x130>
 8000d3e:	4460      	add	r0, ip
 8000d40:	4560      	cmp	r0, ip
 8000d42:	4192      	sbcs	r2, r2
 8000d44:	4454      	add	r4, sl
 8000d46:	4252      	negs	r2, r2
 8000d48:	0005      	movs	r5, r0
 8000d4a:	18a4      	adds	r4, r4, r2
 8000d4c:	e73a      	b.n	8000bc4 <__aeabi_dadd+0x504>
 8000d4e:	4653      	mov	r3, sl
 8000d50:	075a      	lsls	r2, r3, #29
 8000d52:	4663      	mov	r3, ip
 8000d54:	08d9      	lsrs	r1, r3, #3
 8000d56:	4653      	mov	r3, sl
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	08dc      	lsrs	r4, r3, #3
 8000d5c:	e67e      	b.n	8000a5c <__aeabi_dadd+0x39c>
 8000d5e:	001a      	movs	r2, r3
 8000d60:	001c      	movs	r4, r3
 8000d62:	432a      	orrs	r2, r5
 8000d64:	d000      	beq.n	8000d68 <__aeabi_dadd+0x6a8>
 8000d66:	e6ab      	b.n	8000ac0 <__aeabi_dadd+0x400>
 8000d68:	e6c1      	b.n	8000aee <__aeabi_dadd+0x42e>
 8000d6a:	2120      	movs	r1, #32
 8000d6c:	2500      	movs	r5, #0
 8000d6e:	1a09      	subs	r1, r1, r0
 8000d70:	e519      	b.n	80007a6 <__aeabi_dadd+0xe6>
 8000d72:	2200      	movs	r2, #0
 8000d74:	2500      	movs	r5, #0
 8000d76:	4c01      	ldr	r4, [pc, #4]	@ (8000d7c <__aeabi_dadd+0x6bc>)
 8000d78:	e53a      	b.n	80007f0 <__aeabi_dadd+0x130>
 8000d7a:	46c0      	nop			@ (mov r8, r8)
 8000d7c:	000007ff 	.word	0x000007ff
 8000d80:	ff7fffff 	.word	0xff7fffff
 8000d84:	000007fe 	.word	0x000007fe

08000d88 <__aeabi_ddiv>:
 8000d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d8a:	46de      	mov	lr, fp
 8000d8c:	4645      	mov	r5, r8
 8000d8e:	4657      	mov	r7, sl
 8000d90:	464e      	mov	r6, r9
 8000d92:	b5e0      	push	{r5, r6, r7, lr}
 8000d94:	b087      	sub	sp, #28
 8000d96:	9200      	str	r2, [sp, #0]
 8000d98:	9301      	str	r3, [sp, #4]
 8000d9a:	030b      	lsls	r3, r1, #12
 8000d9c:	0b1b      	lsrs	r3, r3, #12
 8000d9e:	469b      	mov	fp, r3
 8000da0:	0fca      	lsrs	r2, r1, #31
 8000da2:	004b      	lsls	r3, r1, #1
 8000da4:	0004      	movs	r4, r0
 8000da6:	4680      	mov	r8, r0
 8000da8:	0d5b      	lsrs	r3, r3, #21
 8000daa:	9202      	str	r2, [sp, #8]
 8000dac:	d100      	bne.n	8000db0 <__aeabi_ddiv+0x28>
 8000dae:	e16a      	b.n	8001086 <__aeabi_ddiv+0x2fe>
 8000db0:	4ad4      	ldr	r2, [pc, #848]	@ (8001104 <__aeabi_ddiv+0x37c>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d100      	bne.n	8000db8 <__aeabi_ddiv+0x30>
 8000db6:	e18c      	b.n	80010d2 <__aeabi_ddiv+0x34a>
 8000db8:	4659      	mov	r1, fp
 8000dba:	0f42      	lsrs	r2, r0, #29
 8000dbc:	00c9      	lsls	r1, r1, #3
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	2180      	movs	r1, #128	@ 0x80
 8000dc2:	0409      	lsls	r1, r1, #16
 8000dc4:	4311      	orrs	r1, r2
 8000dc6:	00c2      	lsls	r2, r0, #3
 8000dc8:	4690      	mov	r8, r2
 8000dca:	4acf      	ldr	r2, [pc, #828]	@ (8001108 <__aeabi_ddiv+0x380>)
 8000dcc:	4689      	mov	r9, r1
 8000dce:	4692      	mov	sl, r2
 8000dd0:	449a      	add	sl, r3
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	2400      	movs	r4, #0
 8000dd6:	9303      	str	r3, [sp, #12]
 8000dd8:	9e00      	ldr	r6, [sp, #0]
 8000dda:	9f01      	ldr	r7, [sp, #4]
 8000ddc:	033b      	lsls	r3, r7, #12
 8000dde:	0b1b      	lsrs	r3, r3, #12
 8000de0:	469b      	mov	fp, r3
 8000de2:	007b      	lsls	r3, r7, #1
 8000de4:	0030      	movs	r0, r6
 8000de6:	0d5b      	lsrs	r3, r3, #21
 8000de8:	0ffd      	lsrs	r5, r7, #31
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d100      	bne.n	8000df0 <__aeabi_ddiv+0x68>
 8000dee:	e128      	b.n	8001042 <__aeabi_ddiv+0x2ba>
 8000df0:	4ac4      	ldr	r2, [pc, #784]	@ (8001104 <__aeabi_ddiv+0x37c>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d100      	bne.n	8000df8 <__aeabi_ddiv+0x70>
 8000df6:	e177      	b.n	80010e8 <__aeabi_ddiv+0x360>
 8000df8:	4659      	mov	r1, fp
 8000dfa:	0f72      	lsrs	r2, r6, #29
 8000dfc:	00c9      	lsls	r1, r1, #3
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	2180      	movs	r1, #128	@ 0x80
 8000e02:	0409      	lsls	r1, r1, #16
 8000e04:	4311      	orrs	r1, r2
 8000e06:	468b      	mov	fp, r1
 8000e08:	49bf      	ldr	r1, [pc, #764]	@ (8001108 <__aeabi_ddiv+0x380>)
 8000e0a:	00f2      	lsls	r2, r6, #3
 8000e0c:	468c      	mov	ip, r1
 8000e0e:	4651      	mov	r1, sl
 8000e10:	4463      	add	r3, ip
 8000e12:	1acb      	subs	r3, r1, r3
 8000e14:	469a      	mov	sl, r3
 8000e16:	2300      	movs	r3, #0
 8000e18:	9e02      	ldr	r6, [sp, #8]
 8000e1a:	406e      	eors	r6, r5
 8000e1c:	2c0f      	cmp	r4, #15
 8000e1e:	d827      	bhi.n	8000e70 <__aeabi_ddiv+0xe8>
 8000e20:	49ba      	ldr	r1, [pc, #744]	@ (800110c <__aeabi_ddiv+0x384>)
 8000e22:	00a4      	lsls	r4, r4, #2
 8000e24:	5909      	ldr	r1, [r1, r4]
 8000e26:	468f      	mov	pc, r1
 8000e28:	46cb      	mov	fp, r9
 8000e2a:	4642      	mov	r2, r8
 8000e2c:	9e02      	ldr	r6, [sp, #8]
 8000e2e:	9b03      	ldr	r3, [sp, #12]
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d016      	beq.n	8000e62 <__aeabi_ddiv+0xda>
 8000e34:	2b03      	cmp	r3, #3
 8000e36:	d100      	bne.n	8000e3a <__aeabi_ddiv+0xb2>
 8000e38:	e2a6      	b.n	8001388 <__aeabi_ddiv+0x600>
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d000      	beq.n	8000e40 <__aeabi_ddiv+0xb8>
 8000e3e:	e0df      	b.n	8001000 <__aeabi_ddiv+0x278>
 8000e40:	2200      	movs	r2, #0
 8000e42:	2300      	movs	r3, #0
 8000e44:	2400      	movs	r4, #0
 8000e46:	4690      	mov	r8, r2
 8000e48:	051b      	lsls	r3, r3, #20
 8000e4a:	4323      	orrs	r3, r4
 8000e4c:	07f6      	lsls	r6, r6, #31
 8000e4e:	4333      	orrs	r3, r6
 8000e50:	4640      	mov	r0, r8
 8000e52:	0019      	movs	r1, r3
 8000e54:	b007      	add	sp, #28
 8000e56:	bcf0      	pop	{r4, r5, r6, r7}
 8000e58:	46bb      	mov	fp, r7
 8000e5a:	46b2      	mov	sl, r6
 8000e5c:	46a9      	mov	r9, r5
 8000e5e:	46a0      	mov	r8, r4
 8000e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e62:	2200      	movs	r2, #0
 8000e64:	2400      	movs	r4, #0
 8000e66:	4690      	mov	r8, r2
 8000e68:	4ba6      	ldr	r3, [pc, #664]	@ (8001104 <__aeabi_ddiv+0x37c>)
 8000e6a:	e7ed      	b.n	8000e48 <__aeabi_ddiv+0xc0>
 8000e6c:	002e      	movs	r6, r5
 8000e6e:	e7df      	b.n	8000e30 <__aeabi_ddiv+0xa8>
 8000e70:	45cb      	cmp	fp, r9
 8000e72:	d200      	bcs.n	8000e76 <__aeabi_ddiv+0xee>
 8000e74:	e1d4      	b.n	8001220 <__aeabi_ddiv+0x498>
 8000e76:	d100      	bne.n	8000e7a <__aeabi_ddiv+0xf2>
 8000e78:	e1cf      	b.n	800121a <__aeabi_ddiv+0x492>
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	425b      	negs	r3, r3
 8000e7e:	469c      	mov	ip, r3
 8000e80:	4644      	mov	r4, r8
 8000e82:	4648      	mov	r0, r9
 8000e84:	2700      	movs	r7, #0
 8000e86:	44e2      	add	sl, ip
 8000e88:	465b      	mov	r3, fp
 8000e8a:	0e15      	lsrs	r5, r2, #24
 8000e8c:	021b      	lsls	r3, r3, #8
 8000e8e:	431d      	orrs	r5, r3
 8000e90:	0c19      	lsrs	r1, r3, #16
 8000e92:	042b      	lsls	r3, r5, #16
 8000e94:	0212      	lsls	r2, r2, #8
 8000e96:	9500      	str	r5, [sp, #0]
 8000e98:	0c1d      	lsrs	r5, r3, #16
 8000e9a:	4691      	mov	r9, r2
 8000e9c:	9102      	str	r1, [sp, #8]
 8000e9e:	9503      	str	r5, [sp, #12]
 8000ea0:	f7ff f9b8 	bl	8000214 <__aeabi_uidivmod>
 8000ea4:	0002      	movs	r2, r0
 8000ea6:	436a      	muls	r2, r5
 8000ea8:	040b      	lsls	r3, r1, #16
 8000eaa:	0c21      	lsrs	r1, r4, #16
 8000eac:	4680      	mov	r8, r0
 8000eae:	4319      	orrs	r1, r3
 8000eb0:	428a      	cmp	r2, r1
 8000eb2:	d909      	bls.n	8000ec8 <__aeabi_ddiv+0x140>
 8000eb4:	9d00      	ldr	r5, [sp, #0]
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	46ac      	mov	ip, r5
 8000eba:	425b      	negs	r3, r3
 8000ebc:	4461      	add	r1, ip
 8000ebe:	469c      	mov	ip, r3
 8000ec0:	44e0      	add	r8, ip
 8000ec2:	428d      	cmp	r5, r1
 8000ec4:	d800      	bhi.n	8000ec8 <__aeabi_ddiv+0x140>
 8000ec6:	e1fb      	b.n	80012c0 <__aeabi_ddiv+0x538>
 8000ec8:	1a88      	subs	r0, r1, r2
 8000eca:	9902      	ldr	r1, [sp, #8]
 8000ecc:	f7ff f9a2 	bl	8000214 <__aeabi_uidivmod>
 8000ed0:	9a03      	ldr	r2, [sp, #12]
 8000ed2:	0424      	lsls	r4, r4, #16
 8000ed4:	4342      	muls	r2, r0
 8000ed6:	0409      	lsls	r1, r1, #16
 8000ed8:	0c24      	lsrs	r4, r4, #16
 8000eda:	0003      	movs	r3, r0
 8000edc:	430c      	orrs	r4, r1
 8000ede:	42a2      	cmp	r2, r4
 8000ee0:	d906      	bls.n	8000ef0 <__aeabi_ddiv+0x168>
 8000ee2:	9900      	ldr	r1, [sp, #0]
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	468c      	mov	ip, r1
 8000ee8:	4464      	add	r4, ip
 8000eea:	42a1      	cmp	r1, r4
 8000eec:	d800      	bhi.n	8000ef0 <__aeabi_ddiv+0x168>
 8000eee:	e1e1      	b.n	80012b4 <__aeabi_ddiv+0x52c>
 8000ef0:	1aa0      	subs	r0, r4, r2
 8000ef2:	4642      	mov	r2, r8
 8000ef4:	0412      	lsls	r2, r2, #16
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	4693      	mov	fp, r2
 8000efa:	464b      	mov	r3, r9
 8000efc:	4659      	mov	r1, fp
 8000efe:	0c1b      	lsrs	r3, r3, #16
 8000f00:	001d      	movs	r5, r3
 8000f02:	9304      	str	r3, [sp, #16]
 8000f04:	040b      	lsls	r3, r1, #16
 8000f06:	4649      	mov	r1, r9
 8000f08:	0409      	lsls	r1, r1, #16
 8000f0a:	0c09      	lsrs	r1, r1, #16
 8000f0c:	000c      	movs	r4, r1
 8000f0e:	0c1b      	lsrs	r3, r3, #16
 8000f10:	435c      	muls	r4, r3
 8000f12:	0c12      	lsrs	r2, r2, #16
 8000f14:	436b      	muls	r3, r5
 8000f16:	4688      	mov	r8, r1
 8000f18:	4351      	muls	r1, r2
 8000f1a:	436a      	muls	r2, r5
 8000f1c:	0c25      	lsrs	r5, r4, #16
 8000f1e:	46ac      	mov	ip, r5
 8000f20:	185b      	adds	r3, r3, r1
 8000f22:	4463      	add	r3, ip
 8000f24:	4299      	cmp	r1, r3
 8000f26:	d903      	bls.n	8000f30 <__aeabi_ddiv+0x1a8>
 8000f28:	2180      	movs	r1, #128	@ 0x80
 8000f2a:	0249      	lsls	r1, r1, #9
 8000f2c:	468c      	mov	ip, r1
 8000f2e:	4462      	add	r2, ip
 8000f30:	0c19      	lsrs	r1, r3, #16
 8000f32:	0424      	lsls	r4, r4, #16
 8000f34:	041b      	lsls	r3, r3, #16
 8000f36:	0c24      	lsrs	r4, r4, #16
 8000f38:	188a      	adds	r2, r1, r2
 8000f3a:	191c      	adds	r4, r3, r4
 8000f3c:	4290      	cmp	r0, r2
 8000f3e:	d302      	bcc.n	8000f46 <__aeabi_ddiv+0x1be>
 8000f40:	d116      	bne.n	8000f70 <__aeabi_ddiv+0x1e8>
 8000f42:	42a7      	cmp	r7, r4
 8000f44:	d214      	bcs.n	8000f70 <__aeabi_ddiv+0x1e8>
 8000f46:	465b      	mov	r3, fp
 8000f48:	9d00      	ldr	r5, [sp, #0]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	444f      	add	r7, r9
 8000f4e:	9305      	str	r3, [sp, #20]
 8000f50:	454f      	cmp	r7, r9
 8000f52:	419b      	sbcs	r3, r3
 8000f54:	46ac      	mov	ip, r5
 8000f56:	425b      	negs	r3, r3
 8000f58:	4463      	add	r3, ip
 8000f5a:	18c0      	adds	r0, r0, r3
 8000f5c:	4285      	cmp	r5, r0
 8000f5e:	d300      	bcc.n	8000f62 <__aeabi_ddiv+0x1da>
 8000f60:	e1a1      	b.n	80012a6 <__aeabi_ddiv+0x51e>
 8000f62:	4282      	cmp	r2, r0
 8000f64:	d900      	bls.n	8000f68 <__aeabi_ddiv+0x1e0>
 8000f66:	e1f6      	b.n	8001356 <__aeabi_ddiv+0x5ce>
 8000f68:	d100      	bne.n	8000f6c <__aeabi_ddiv+0x1e4>
 8000f6a:	e1f1      	b.n	8001350 <__aeabi_ddiv+0x5c8>
 8000f6c:	9b05      	ldr	r3, [sp, #20]
 8000f6e:	469b      	mov	fp, r3
 8000f70:	1b3c      	subs	r4, r7, r4
 8000f72:	42a7      	cmp	r7, r4
 8000f74:	41bf      	sbcs	r7, r7
 8000f76:	9d00      	ldr	r5, [sp, #0]
 8000f78:	1a80      	subs	r0, r0, r2
 8000f7a:	427f      	negs	r7, r7
 8000f7c:	1bc0      	subs	r0, r0, r7
 8000f7e:	4285      	cmp	r5, r0
 8000f80:	d100      	bne.n	8000f84 <__aeabi_ddiv+0x1fc>
 8000f82:	e1d0      	b.n	8001326 <__aeabi_ddiv+0x59e>
 8000f84:	9902      	ldr	r1, [sp, #8]
 8000f86:	f7ff f945 	bl	8000214 <__aeabi_uidivmod>
 8000f8a:	9a03      	ldr	r2, [sp, #12]
 8000f8c:	040b      	lsls	r3, r1, #16
 8000f8e:	4342      	muls	r2, r0
 8000f90:	0c21      	lsrs	r1, r4, #16
 8000f92:	0007      	movs	r7, r0
 8000f94:	4319      	orrs	r1, r3
 8000f96:	428a      	cmp	r2, r1
 8000f98:	d900      	bls.n	8000f9c <__aeabi_ddiv+0x214>
 8000f9a:	e178      	b.n	800128e <__aeabi_ddiv+0x506>
 8000f9c:	1a88      	subs	r0, r1, r2
 8000f9e:	9902      	ldr	r1, [sp, #8]
 8000fa0:	f7ff f938 	bl	8000214 <__aeabi_uidivmod>
 8000fa4:	9a03      	ldr	r2, [sp, #12]
 8000fa6:	0424      	lsls	r4, r4, #16
 8000fa8:	4342      	muls	r2, r0
 8000faa:	0409      	lsls	r1, r1, #16
 8000fac:	0c24      	lsrs	r4, r4, #16
 8000fae:	0003      	movs	r3, r0
 8000fb0:	430c      	orrs	r4, r1
 8000fb2:	42a2      	cmp	r2, r4
 8000fb4:	d900      	bls.n	8000fb8 <__aeabi_ddiv+0x230>
 8000fb6:	e15d      	b.n	8001274 <__aeabi_ddiv+0x4ec>
 8000fb8:	4641      	mov	r1, r8
 8000fba:	1aa4      	subs	r4, r4, r2
 8000fbc:	043a      	lsls	r2, r7, #16
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	9d04      	ldr	r5, [sp, #16]
 8000fc2:	0413      	lsls	r3, r2, #16
 8000fc4:	0c1b      	lsrs	r3, r3, #16
 8000fc6:	4359      	muls	r1, r3
 8000fc8:	4647      	mov	r7, r8
 8000fca:	436b      	muls	r3, r5
 8000fcc:	469c      	mov	ip, r3
 8000fce:	0c10      	lsrs	r0, r2, #16
 8000fd0:	4347      	muls	r7, r0
 8000fd2:	0c0b      	lsrs	r3, r1, #16
 8000fd4:	44bc      	add	ip, r7
 8000fd6:	4463      	add	r3, ip
 8000fd8:	4368      	muls	r0, r5
 8000fda:	429f      	cmp	r7, r3
 8000fdc:	d903      	bls.n	8000fe6 <__aeabi_ddiv+0x25e>
 8000fde:	2580      	movs	r5, #128	@ 0x80
 8000fe0:	026d      	lsls	r5, r5, #9
 8000fe2:	46ac      	mov	ip, r5
 8000fe4:	4460      	add	r0, ip
 8000fe6:	0c1f      	lsrs	r7, r3, #16
 8000fe8:	0409      	lsls	r1, r1, #16
 8000fea:	041b      	lsls	r3, r3, #16
 8000fec:	0c09      	lsrs	r1, r1, #16
 8000fee:	183f      	adds	r7, r7, r0
 8000ff0:	185b      	adds	r3, r3, r1
 8000ff2:	42bc      	cmp	r4, r7
 8000ff4:	d200      	bcs.n	8000ff8 <__aeabi_ddiv+0x270>
 8000ff6:	e102      	b.n	80011fe <__aeabi_ddiv+0x476>
 8000ff8:	d100      	bne.n	8000ffc <__aeabi_ddiv+0x274>
 8000ffa:	e0fd      	b.n	80011f8 <__aeabi_ddiv+0x470>
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	431a      	orrs	r2, r3
 8001000:	4b43      	ldr	r3, [pc, #268]	@ (8001110 <__aeabi_ddiv+0x388>)
 8001002:	4453      	add	r3, sl
 8001004:	2b00      	cmp	r3, #0
 8001006:	dc00      	bgt.n	800100a <__aeabi_ddiv+0x282>
 8001008:	e0ae      	b.n	8001168 <__aeabi_ddiv+0x3e0>
 800100a:	0751      	lsls	r1, r2, #29
 800100c:	d000      	beq.n	8001010 <__aeabi_ddiv+0x288>
 800100e:	e198      	b.n	8001342 <__aeabi_ddiv+0x5ba>
 8001010:	4659      	mov	r1, fp
 8001012:	01c9      	lsls	r1, r1, #7
 8001014:	d506      	bpl.n	8001024 <__aeabi_ddiv+0x29c>
 8001016:	4659      	mov	r1, fp
 8001018:	4b3e      	ldr	r3, [pc, #248]	@ (8001114 <__aeabi_ddiv+0x38c>)
 800101a:	4019      	ands	r1, r3
 800101c:	2380      	movs	r3, #128	@ 0x80
 800101e:	468b      	mov	fp, r1
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	4453      	add	r3, sl
 8001024:	493c      	ldr	r1, [pc, #240]	@ (8001118 <__aeabi_ddiv+0x390>)
 8001026:	428b      	cmp	r3, r1
 8001028:	dd00      	ble.n	800102c <__aeabi_ddiv+0x2a4>
 800102a:	e71a      	b.n	8000e62 <__aeabi_ddiv+0xda>
 800102c:	4659      	mov	r1, fp
 800102e:	08d2      	lsrs	r2, r2, #3
 8001030:	0749      	lsls	r1, r1, #29
 8001032:	4311      	orrs	r1, r2
 8001034:	465a      	mov	r2, fp
 8001036:	055b      	lsls	r3, r3, #21
 8001038:	0254      	lsls	r4, r2, #9
 800103a:	4688      	mov	r8, r1
 800103c:	0b24      	lsrs	r4, r4, #12
 800103e:	0d5b      	lsrs	r3, r3, #21
 8001040:	e702      	b.n	8000e48 <__aeabi_ddiv+0xc0>
 8001042:	465a      	mov	r2, fp
 8001044:	9b00      	ldr	r3, [sp, #0]
 8001046:	431a      	orrs	r2, r3
 8001048:	d100      	bne.n	800104c <__aeabi_ddiv+0x2c4>
 800104a:	e07e      	b.n	800114a <__aeabi_ddiv+0x3c2>
 800104c:	465b      	mov	r3, fp
 800104e:	2b00      	cmp	r3, #0
 8001050:	d100      	bne.n	8001054 <__aeabi_ddiv+0x2cc>
 8001052:	e100      	b.n	8001256 <__aeabi_ddiv+0x4ce>
 8001054:	4658      	mov	r0, fp
 8001056:	f7ff fa0b 	bl	8000470 <__clzsi2>
 800105a:	0002      	movs	r2, r0
 800105c:	0003      	movs	r3, r0
 800105e:	3a0b      	subs	r2, #11
 8001060:	271d      	movs	r7, #29
 8001062:	9e00      	ldr	r6, [sp, #0]
 8001064:	1aba      	subs	r2, r7, r2
 8001066:	0019      	movs	r1, r3
 8001068:	4658      	mov	r0, fp
 800106a:	40d6      	lsrs	r6, r2
 800106c:	3908      	subs	r1, #8
 800106e:	4088      	lsls	r0, r1
 8001070:	0032      	movs	r2, r6
 8001072:	4302      	orrs	r2, r0
 8001074:	4693      	mov	fp, r2
 8001076:	9a00      	ldr	r2, [sp, #0]
 8001078:	408a      	lsls	r2, r1
 800107a:	4928      	ldr	r1, [pc, #160]	@ (800111c <__aeabi_ddiv+0x394>)
 800107c:	4453      	add	r3, sl
 800107e:	468a      	mov	sl, r1
 8001080:	449a      	add	sl, r3
 8001082:	2300      	movs	r3, #0
 8001084:	e6c8      	b.n	8000e18 <__aeabi_ddiv+0x90>
 8001086:	465b      	mov	r3, fp
 8001088:	4303      	orrs	r3, r0
 800108a:	4699      	mov	r9, r3
 800108c:	d056      	beq.n	800113c <__aeabi_ddiv+0x3b4>
 800108e:	465b      	mov	r3, fp
 8001090:	2b00      	cmp	r3, #0
 8001092:	d100      	bne.n	8001096 <__aeabi_ddiv+0x30e>
 8001094:	e0cd      	b.n	8001232 <__aeabi_ddiv+0x4aa>
 8001096:	4658      	mov	r0, fp
 8001098:	f7ff f9ea 	bl	8000470 <__clzsi2>
 800109c:	230b      	movs	r3, #11
 800109e:	425b      	negs	r3, r3
 80010a0:	469c      	mov	ip, r3
 80010a2:	0002      	movs	r2, r0
 80010a4:	4484      	add	ip, r0
 80010a6:	4666      	mov	r6, ip
 80010a8:	231d      	movs	r3, #29
 80010aa:	1b9b      	subs	r3, r3, r6
 80010ac:	0026      	movs	r6, r4
 80010ae:	0011      	movs	r1, r2
 80010b0:	4658      	mov	r0, fp
 80010b2:	40de      	lsrs	r6, r3
 80010b4:	3908      	subs	r1, #8
 80010b6:	4088      	lsls	r0, r1
 80010b8:	0033      	movs	r3, r6
 80010ba:	4303      	orrs	r3, r0
 80010bc:	4699      	mov	r9, r3
 80010be:	0023      	movs	r3, r4
 80010c0:	408b      	lsls	r3, r1
 80010c2:	4698      	mov	r8, r3
 80010c4:	4b16      	ldr	r3, [pc, #88]	@ (8001120 <__aeabi_ddiv+0x398>)
 80010c6:	2400      	movs	r4, #0
 80010c8:	1a9b      	subs	r3, r3, r2
 80010ca:	469a      	mov	sl, r3
 80010cc:	2300      	movs	r3, #0
 80010ce:	9303      	str	r3, [sp, #12]
 80010d0:	e682      	b.n	8000dd8 <__aeabi_ddiv+0x50>
 80010d2:	465a      	mov	r2, fp
 80010d4:	4302      	orrs	r2, r0
 80010d6:	4691      	mov	r9, r2
 80010d8:	d12a      	bne.n	8001130 <__aeabi_ddiv+0x3a8>
 80010da:	2200      	movs	r2, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	2302      	movs	r3, #2
 80010e0:	4690      	mov	r8, r2
 80010e2:	2408      	movs	r4, #8
 80010e4:	9303      	str	r3, [sp, #12]
 80010e6:	e677      	b.n	8000dd8 <__aeabi_ddiv+0x50>
 80010e8:	465a      	mov	r2, fp
 80010ea:	9b00      	ldr	r3, [sp, #0]
 80010ec:	431a      	orrs	r2, r3
 80010ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001124 <__aeabi_ddiv+0x39c>)
 80010f0:	469c      	mov	ip, r3
 80010f2:	44e2      	add	sl, ip
 80010f4:	2a00      	cmp	r2, #0
 80010f6:	d117      	bne.n	8001128 <__aeabi_ddiv+0x3a0>
 80010f8:	2302      	movs	r3, #2
 80010fa:	431c      	orrs	r4, r3
 80010fc:	2300      	movs	r3, #0
 80010fe:	469b      	mov	fp, r3
 8001100:	3302      	adds	r3, #2
 8001102:	e689      	b.n	8000e18 <__aeabi_ddiv+0x90>
 8001104:	000007ff 	.word	0x000007ff
 8001108:	fffffc01 	.word	0xfffffc01
 800110c:	08009534 	.word	0x08009534
 8001110:	000003ff 	.word	0x000003ff
 8001114:	feffffff 	.word	0xfeffffff
 8001118:	000007fe 	.word	0x000007fe
 800111c:	000003f3 	.word	0x000003f3
 8001120:	fffffc0d 	.word	0xfffffc0d
 8001124:	fffff801 	.word	0xfffff801
 8001128:	2303      	movs	r3, #3
 800112a:	0032      	movs	r2, r6
 800112c:	431c      	orrs	r4, r3
 800112e:	e673      	b.n	8000e18 <__aeabi_ddiv+0x90>
 8001130:	469a      	mov	sl, r3
 8001132:	2303      	movs	r3, #3
 8001134:	46d9      	mov	r9, fp
 8001136:	240c      	movs	r4, #12
 8001138:	9303      	str	r3, [sp, #12]
 800113a:	e64d      	b.n	8000dd8 <__aeabi_ddiv+0x50>
 800113c:	2300      	movs	r3, #0
 800113e:	4698      	mov	r8, r3
 8001140:	469a      	mov	sl, r3
 8001142:	3301      	adds	r3, #1
 8001144:	2404      	movs	r4, #4
 8001146:	9303      	str	r3, [sp, #12]
 8001148:	e646      	b.n	8000dd8 <__aeabi_ddiv+0x50>
 800114a:	2301      	movs	r3, #1
 800114c:	431c      	orrs	r4, r3
 800114e:	2300      	movs	r3, #0
 8001150:	469b      	mov	fp, r3
 8001152:	3301      	adds	r3, #1
 8001154:	e660      	b.n	8000e18 <__aeabi_ddiv+0x90>
 8001156:	2300      	movs	r3, #0
 8001158:	2480      	movs	r4, #128	@ 0x80
 800115a:	4698      	mov	r8, r3
 800115c:	2600      	movs	r6, #0
 800115e:	4b92      	ldr	r3, [pc, #584]	@ (80013a8 <__aeabi_ddiv+0x620>)
 8001160:	0324      	lsls	r4, r4, #12
 8001162:	e671      	b.n	8000e48 <__aeabi_ddiv+0xc0>
 8001164:	2201      	movs	r2, #1
 8001166:	4252      	negs	r2, r2
 8001168:	2101      	movs	r1, #1
 800116a:	1ac9      	subs	r1, r1, r3
 800116c:	2938      	cmp	r1, #56	@ 0x38
 800116e:	dd00      	ble.n	8001172 <__aeabi_ddiv+0x3ea>
 8001170:	e666      	b.n	8000e40 <__aeabi_ddiv+0xb8>
 8001172:	291f      	cmp	r1, #31
 8001174:	dc00      	bgt.n	8001178 <__aeabi_ddiv+0x3f0>
 8001176:	e0ab      	b.n	80012d0 <__aeabi_ddiv+0x548>
 8001178:	201f      	movs	r0, #31
 800117a:	4240      	negs	r0, r0
 800117c:	1ac3      	subs	r3, r0, r3
 800117e:	4658      	mov	r0, fp
 8001180:	40d8      	lsrs	r0, r3
 8001182:	0003      	movs	r3, r0
 8001184:	2920      	cmp	r1, #32
 8001186:	d004      	beq.n	8001192 <__aeabi_ddiv+0x40a>
 8001188:	4658      	mov	r0, fp
 800118a:	4988      	ldr	r1, [pc, #544]	@ (80013ac <__aeabi_ddiv+0x624>)
 800118c:	4451      	add	r1, sl
 800118e:	4088      	lsls	r0, r1
 8001190:	4302      	orrs	r2, r0
 8001192:	1e51      	subs	r1, r2, #1
 8001194:	418a      	sbcs	r2, r1
 8001196:	431a      	orrs	r2, r3
 8001198:	2307      	movs	r3, #7
 800119a:	0019      	movs	r1, r3
 800119c:	2400      	movs	r4, #0
 800119e:	4011      	ands	r1, r2
 80011a0:	4213      	tst	r3, r2
 80011a2:	d00c      	beq.n	80011be <__aeabi_ddiv+0x436>
 80011a4:	230f      	movs	r3, #15
 80011a6:	4013      	ands	r3, r2
 80011a8:	2b04      	cmp	r3, #4
 80011aa:	d100      	bne.n	80011ae <__aeabi_ddiv+0x426>
 80011ac:	e0f9      	b.n	80013a2 <__aeabi_ddiv+0x61a>
 80011ae:	1d11      	adds	r1, r2, #4
 80011b0:	4291      	cmp	r1, r2
 80011b2:	419b      	sbcs	r3, r3
 80011b4:	000a      	movs	r2, r1
 80011b6:	425b      	negs	r3, r3
 80011b8:	0759      	lsls	r1, r3, #29
 80011ba:	025b      	lsls	r3, r3, #9
 80011bc:	0b1c      	lsrs	r4, r3, #12
 80011be:	08d2      	lsrs	r2, r2, #3
 80011c0:	430a      	orrs	r2, r1
 80011c2:	4690      	mov	r8, r2
 80011c4:	2300      	movs	r3, #0
 80011c6:	e63f      	b.n	8000e48 <__aeabi_ddiv+0xc0>
 80011c8:	2480      	movs	r4, #128	@ 0x80
 80011ca:	464b      	mov	r3, r9
 80011cc:	0324      	lsls	r4, r4, #12
 80011ce:	4223      	tst	r3, r4
 80011d0:	d009      	beq.n	80011e6 <__aeabi_ddiv+0x45e>
 80011d2:	465b      	mov	r3, fp
 80011d4:	4223      	tst	r3, r4
 80011d6:	d106      	bne.n	80011e6 <__aeabi_ddiv+0x45e>
 80011d8:	431c      	orrs	r4, r3
 80011da:	0324      	lsls	r4, r4, #12
 80011dc:	002e      	movs	r6, r5
 80011de:	4690      	mov	r8, r2
 80011e0:	4b71      	ldr	r3, [pc, #452]	@ (80013a8 <__aeabi_ddiv+0x620>)
 80011e2:	0b24      	lsrs	r4, r4, #12
 80011e4:	e630      	b.n	8000e48 <__aeabi_ddiv+0xc0>
 80011e6:	2480      	movs	r4, #128	@ 0x80
 80011e8:	464b      	mov	r3, r9
 80011ea:	0324      	lsls	r4, r4, #12
 80011ec:	431c      	orrs	r4, r3
 80011ee:	0324      	lsls	r4, r4, #12
 80011f0:	9e02      	ldr	r6, [sp, #8]
 80011f2:	4b6d      	ldr	r3, [pc, #436]	@ (80013a8 <__aeabi_ddiv+0x620>)
 80011f4:	0b24      	lsrs	r4, r4, #12
 80011f6:	e627      	b.n	8000e48 <__aeabi_ddiv+0xc0>
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d100      	bne.n	80011fe <__aeabi_ddiv+0x476>
 80011fc:	e700      	b.n	8001000 <__aeabi_ddiv+0x278>
 80011fe:	9800      	ldr	r0, [sp, #0]
 8001200:	1e51      	subs	r1, r2, #1
 8001202:	4684      	mov	ip, r0
 8001204:	4464      	add	r4, ip
 8001206:	4284      	cmp	r4, r0
 8001208:	d200      	bcs.n	800120c <__aeabi_ddiv+0x484>
 800120a:	e084      	b.n	8001316 <__aeabi_ddiv+0x58e>
 800120c:	42bc      	cmp	r4, r7
 800120e:	d200      	bcs.n	8001212 <__aeabi_ddiv+0x48a>
 8001210:	e0ae      	b.n	8001370 <__aeabi_ddiv+0x5e8>
 8001212:	d100      	bne.n	8001216 <__aeabi_ddiv+0x48e>
 8001214:	e0c1      	b.n	800139a <__aeabi_ddiv+0x612>
 8001216:	000a      	movs	r2, r1
 8001218:	e6f0      	b.n	8000ffc <__aeabi_ddiv+0x274>
 800121a:	4542      	cmp	r2, r8
 800121c:	d900      	bls.n	8001220 <__aeabi_ddiv+0x498>
 800121e:	e62c      	b.n	8000e7a <__aeabi_ddiv+0xf2>
 8001220:	464b      	mov	r3, r9
 8001222:	07dc      	lsls	r4, r3, #31
 8001224:	0858      	lsrs	r0, r3, #1
 8001226:	4643      	mov	r3, r8
 8001228:	085b      	lsrs	r3, r3, #1
 800122a:	431c      	orrs	r4, r3
 800122c:	4643      	mov	r3, r8
 800122e:	07df      	lsls	r7, r3, #31
 8001230:	e62a      	b.n	8000e88 <__aeabi_ddiv+0x100>
 8001232:	f7ff f91d 	bl	8000470 <__clzsi2>
 8001236:	2315      	movs	r3, #21
 8001238:	469c      	mov	ip, r3
 800123a:	4484      	add	ip, r0
 800123c:	0002      	movs	r2, r0
 800123e:	4663      	mov	r3, ip
 8001240:	3220      	adds	r2, #32
 8001242:	2b1c      	cmp	r3, #28
 8001244:	dc00      	bgt.n	8001248 <__aeabi_ddiv+0x4c0>
 8001246:	e72e      	b.n	80010a6 <__aeabi_ddiv+0x31e>
 8001248:	0023      	movs	r3, r4
 800124a:	3808      	subs	r0, #8
 800124c:	4083      	lsls	r3, r0
 800124e:	4699      	mov	r9, r3
 8001250:	2300      	movs	r3, #0
 8001252:	4698      	mov	r8, r3
 8001254:	e736      	b.n	80010c4 <__aeabi_ddiv+0x33c>
 8001256:	f7ff f90b 	bl	8000470 <__clzsi2>
 800125a:	0002      	movs	r2, r0
 800125c:	0003      	movs	r3, r0
 800125e:	3215      	adds	r2, #21
 8001260:	3320      	adds	r3, #32
 8001262:	2a1c      	cmp	r2, #28
 8001264:	dc00      	bgt.n	8001268 <__aeabi_ddiv+0x4e0>
 8001266:	e6fb      	b.n	8001060 <__aeabi_ddiv+0x2d8>
 8001268:	9900      	ldr	r1, [sp, #0]
 800126a:	3808      	subs	r0, #8
 800126c:	4081      	lsls	r1, r0
 800126e:	2200      	movs	r2, #0
 8001270:	468b      	mov	fp, r1
 8001272:	e702      	b.n	800107a <__aeabi_ddiv+0x2f2>
 8001274:	9900      	ldr	r1, [sp, #0]
 8001276:	3b01      	subs	r3, #1
 8001278:	468c      	mov	ip, r1
 800127a:	4464      	add	r4, ip
 800127c:	42a1      	cmp	r1, r4
 800127e:	d900      	bls.n	8001282 <__aeabi_ddiv+0x4fa>
 8001280:	e69a      	b.n	8000fb8 <__aeabi_ddiv+0x230>
 8001282:	42a2      	cmp	r2, r4
 8001284:	d800      	bhi.n	8001288 <__aeabi_ddiv+0x500>
 8001286:	e697      	b.n	8000fb8 <__aeabi_ddiv+0x230>
 8001288:	1e83      	subs	r3, r0, #2
 800128a:	4464      	add	r4, ip
 800128c:	e694      	b.n	8000fb8 <__aeabi_ddiv+0x230>
 800128e:	46ac      	mov	ip, r5
 8001290:	4461      	add	r1, ip
 8001292:	3f01      	subs	r7, #1
 8001294:	428d      	cmp	r5, r1
 8001296:	d900      	bls.n	800129a <__aeabi_ddiv+0x512>
 8001298:	e680      	b.n	8000f9c <__aeabi_ddiv+0x214>
 800129a:	428a      	cmp	r2, r1
 800129c:	d800      	bhi.n	80012a0 <__aeabi_ddiv+0x518>
 800129e:	e67d      	b.n	8000f9c <__aeabi_ddiv+0x214>
 80012a0:	1e87      	subs	r7, r0, #2
 80012a2:	4461      	add	r1, ip
 80012a4:	e67a      	b.n	8000f9c <__aeabi_ddiv+0x214>
 80012a6:	4285      	cmp	r5, r0
 80012a8:	d000      	beq.n	80012ac <__aeabi_ddiv+0x524>
 80012aa:	e65f      	b.n	8000f6c <__aeabi_ddiv+0x1e4>
 80012ac:	45b9      	cmp	r9, r7
 80012ae:	d900      	bls.n	80012b2 <__aeabi_ddiv+0x52a>
 80012b0:	e65c      	b.n	8000f6c <__aeabi_ddiv+0x1e4>
 80012b2:	e656      	b.n	8000f62 <__aeabi_ddiv+0x1da>
 80012b4:	42a2      	cmp	r2, r4
 80012b6:	d800      	bhi.n	80012ba <__aeabi_ddiv+0x532>
 80012b8:	e61a      	b.n	8000ef0 <__aeabi_ddiv+0x168>
 80012ba:	1e83      	subs	r3, r0, #2
 80012bc:	4464      	add	r4, ip
 80012be:	e617      	b.n	8000ef0 <__aeabi_ddiv+0x168>
 80012c0:	428a      	cmp	r2, r1
 80012c2:	d800      	bhi.n	80012c6 <__aeabi_ddiv+0x53e>
 80012c4:	e600      	b.n	8000ec8 <__aeabi_ddiv+0x140>
 80012c6:	46ac      	mov	ip, r5
 80012c8:	1e83      	subs	r3, r0, #2
 80012ca:	4698      	mov	r8, r3
 80012cc:	4461      	add	r1, ip
 80012ce:	e5fb      	b.n	8000ec8 <__aeabi_ddiv+0x140>
 80012d0:	4837      	ldr	r0, [pc, #220]	@ (80013b0 <__aeabi_ddiv+0x628>)
 80012d2:	0014      	movs	r4, r2
 80012d4:	4450      	add	r0, sl
 80012d6:	4082      	lsls	r2, r0
 80012d8:	465b      	mov	r3, fp
 80012da:	0017      	movs	r7, r2
 80012dc:	4083      	lsls	r3, r0
 80012de:	40cc      	lsrs	r4, r1
 80012e0:	1e7a      	subs	r2, r7, #1
 80012e2:	4197      	sbcs	r7, r2
 80012e4:	4323      	orrs	r3, r4
 80012e6:	433b      	orrs	r3, r7
 80012e8:	001a      	movs	r2, r3
 80012ea:	465b      	mov	r3, fp
 80012ec:	40cb      	lsrs	r3, r1
 80012ee:	0751      	lsls	r1, r2, #29
 80012f0:	d009      	beq.n	8001306 <__aeabi_ddiv+0x57e>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4011      	ands	r1, r2
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d005      	beq.n	8001306 <__aeabi_ddiv+0x57e>
 80012fa:	1d11      	adds	r1, r2, #4
 80012fc:	4291      	cmp	r1, r2
 80012fe:	4192      	sbcs	r2, r2
 8001300:	4252      	negs	r2, r2
 8001302:	189b      	adds	r3, r3, r2
 8001304:	000a      	movs	r2, r1
 8001306:	0219      	lsls	r1, r3, #8
 8001308:	d400      	bmi.n	800130c <__aeabi_ddiv+0x584>
 800130a:	e755      	b.n	80011b8 <__aeabi_ddiv+0x430>
 800130c:	2200      	movs	r2, #0
 800130e:	2301      	movs	r3, #1
 8001310:	2400      	movs	r4, #0
 8001312:	4690      	mov	r8, r2
 8001314:	e598      	b.n	8000e48 <__aeabi_ddiv+0xc0>
 8001316:	000a      	movs	r2, r1
 8001318:	42bc      	cmp	r4, r7
 800131a:	d000      	beq.n	800131e <__aeabi_ddiv+0x596>
 800131c:	e66e      	b.n	8000ffc <__aeabi_ddiv+0x274>
 800131e:	454b      	cmp	r3, r9
 8001320:	d000      	beq.n	8001324 <__aeabi_ddiv+0x59c>
 8001322:	e66b      	b.n	8000ffc <__aeabi_ddiv+0x274>
 8001324:	e66c      	b.n	8001000 <__aeabi_ddiv+0x278>
 8001326:	4b23      	ldr	r3, [pc, #140]	@ (80013b4 <__aeabi_ddiv+0x62c>)
 8001328:	4a23      	ldr	r2, [pc, #140]	@ (80013b8 <__aeabi_ddiv+0x630>)
 800132a:	4453      	add	r3, sl
 800132c:	4592      	cmp	sl, r2
 800132e:	da00      	bge.n	8001332 <__aeabi_ddiv+0x5aa>
 8001330:	e718      	b.n	8001164 <__aeabi_ddiv+0x3dc>
 8001332:	2101      	movs	r1, #1
 8001334:	4249      	negs	r1, r1
 8001336:	1d0a      	adds	r2, r1, #4
 8001338:	428a      	cmp	r2, r1
 800133a:	4189      	sbcs	r1, r1
 800133c:	4249      	negs	r1, r1
 800133e:	448b      	add	fp, r1
 8001340:	e666      	b.n	8001010 <__aeabi_ddiv+0x288>
 8001342:	210f      	movs	r1, #15
 8001344:	4011      	ands	r1, r2
 8001346:	2904      	cmp	r1, #4
 8001348:	d100      	bne.n	800134c <__aeabi_ddiv+0x5c4>
 800134a:	e661      	b.n	8001010 <__aeabi_ddiv+0x288>
 800134c:	0011      	movs	r1, r2
 800134e:	e7f2      	b.n	8001336 <__aeabi_ddiv+0x5ae>
 8001350:	42bc      	cmp	r4, r7
 8001352:	d800      	bhi.n	8001356 <__aeabi_ddiv+0x5ce>
 8001354:	e60a      	b.n	8000f6c <__aeabi_ddiv+0x1e4>
 8001356:	2302      	movs	r3, #2
 8001358:	425b      	negs	r3, r3
 800135a:	469c      	mov	ip, r3
 800135c:	9900      	ldr	r1, [sp, #0]
 800135e:	444f      	add	r7, r9
 8001360:	454f      	cmp	r7, r9
 8001362:	419b      	sbcs	r3, r3
 8001364:	44e3      	add	fp, ip
 8001366:	468c      	mov	ip, r1
 8001368:	425b      	negs	r3, r3
 800136a:	4463      	add	r3, ip
 800136c:	18c0      	adds	r0, r0, r3
 800136e:	e5ff      	b.n	8000f70 <__aeabi_ddiv+0x1e8>
 8001370:	4649      	mov	r1, r9
 8001372:	9d00      	ldr	r5, [sp, #0]
 8001374:	0048      	lsls	r0, r1, #1
 8001376:	4548      	cmp	r0, r9
 8001378:	4189      	sbcs	r1, r1
 800137a:	46ac      	mov	ip, r5
 800137c:	4249      	negs	r1, r1
 800137e:	4461      	add	r1, ip
 8001380:	4681      	mov	r9, r0
 8001382:	3a02      	subs	r2, #2
 8001384:	1864      	adds	r4, r4, r1
 8001386:	e7c7      	b.n	8001318 <__aeabi_ddiv+0x590>
 8001388:	2480      	movs	r4, #128	@ 0x80
 800138a:	465b      	mov	r3, fp
 800138c:	0324      	lsls	r4, r4, #12
 800138e:	431c      	orrs	r4, r3
 8001390:	0324      	lsls	r4, r4, #12
 8001392:	4690      	mov	r8, r2
 8001394:	4b04      	ldr	r3, [pc, #16]	@ (80013a8 <__aeabi_ddiv+0x620>)
 8001396:	0b24      	lsrs	r4, r4, #12
 8001398:	e556      	b.n	8000e48 <__aeabi_ddiv+0xc0>
 800139a:	4599      	cmp	r9, r3
 800139c:	d3e8      	bcc.n	8001370 <__aeabi_ddiv+0x5e8>
 800139e:	000a      	movs	r2, r1
 80013a0:	e7bd      	b.n	800131e <__aeabi_ddiv+0x596>
 80013a2:	2300      	movs	r3, #0
 80013a4:	e708      	b.n	80011b8 <__aeabi_ddiv+0x430>
 80013a6:	46c0      	nop			@ (mov r8, r8)
 80013a8:	000007ff 	.word	0x000007ff
 80013ac:	0000043e 	.word	0x0000043e
 80013b0:	0000041e 	.word	0x0000041e
 80013b4:	000003ff 	.word	0x000003ff
 80013b8:	fffffc02 	.word	0xfffffc02

080013bc <__eqdf2>:
 80013bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013be:	4657      	mov	r7, sl
 80013c0:	46de      	mov	lr, fp
 80013c2:	464e      	mov	r6, r9
 80013c4:	4645      	mov	r5, r8
 80013c6:	b5e0      	push	{r5, r6, r7, lr}
 80013c8:	000d      	movs	r5, r1
 80013ca:	0004      	movs	r4, r0
 80013cc:	0fe8      	lsrs	r0, r5, #31
 80013ce:	4683      	mov	fp, r0
 80013d0:	0309      	lsls	r1, r1, #12
 80013d2:	0fd8      	lsrs	r0, r3, #31
 80013d4:	0b09      	lsrs	r1, r1, #12
 80013d6:	4682      	mov	sl, r0
 80013d8:	4819      	ldr	r0, [pc, #100]	@ (8001440 <__eqdf2+0x84>)
 80013da:	468c      	mov	ip, r1
 80013dc:	031f      	lsls	r7, r3, #12
 80013de:	0069      	lsls	r1, r5, #1
 80013e0:	005e      	lsls	r6, r3, #1
 80013e2:	0d49      	lsrs	r1, r1, #21
 80013e4:	0b3f      	lsrs	r7, r7, #12
 80013e6:	0d76      	lsrs	r6, r6, #21
 80013e8:	4281      	cmp	r1, r0
 80013ea:	d018      	beq.n	800141e <__eqdf2+0x62>
 80013ec:	4286      	cmp	r6, r0
 80013ee:	d00f      	beq.n	8001410 <__eqdf2+0x54>
 80013f0:	2001      	movs	r0, #1
 80013f2:	42b1      	cmp	r1, r6
 80013f4:	d10d      	bne.n	8001412 <__eqdf2+0x56>
 80013f6:	45bc      	cmp	ip, r7
 80013f8:	d10b      	bne.n	8001412 <__eqdf2+0x56>
 80013fa:	4294      	cmp	r4, r2
 80013fc:	d109      	bne.n	8001412 <__eqdf2+0x56>
 80013fe:	45d3      	cmp	fp, sl
 8001400:	d01c      	beq.n	800143c <__eqdf2+0x80>
 8001402:	2900      	cmp	r1, #0
 8001404:	d105      	bne.n	8001412 <__eqdf2+0x56>
 8001406:	4660      	mov	r0, ip
 8001408:	4320      	orrs	r0, r4
 800140a:	1e43      	subs	r3, r0, #1
 800140c:	4198      	sbcs	r0, r3
 800140e:	e000      	b.n	8001412 <__eqdf2+0x56>
 8001410:	2001      	movs	r0, #1
 8001412:	bcf0      	pop	{r4, r5, r6, r7}
 8001414:	46bb      	mov	fp, r7
 8001416:	46b2      	mov	sl, r6
 8001418:	46a9      	mov	r9, r5
 800141a:	46a0      	mov	r8, r4
 800141c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800141e:	2001      	movs	r0, #1
 8001420:	428e      	cmp	r6, r1
 8001422:	d1f6      	bne.n	8001412 <__eqdf2+0x56>
 8001424:	4661      	mov	r1, ip
 8001426:	4339      	orrs	r1, r7
 8001428:	000f      	movs	r7, r1
 800142a:	4317      	orrs	r7, r2
 800142c:	4327      	orrs	r7, r4
 800142e:	d1f0      	bne.n	8001412 <__eqdf2+0x56>
 8001430:	465b      	mov	r3, fp
 8001432:	4652      	mov	r2, sl
 8001434:	1a98      	subs	r0, r3, r2
 8001436:	1e43      	subs	r3, r0, #1
 8001438:	4198      	sbcs	r0, r3
 800143a:	e7ea      	b.n	8001412 <__eqdf2+0x56>
 800143c:	2000      	movs	r0, #0
 800143e:	e7e8      	b.n	8001412 <__eqdf2+0x56>
 8001440:	000007ff 	.word	0x000007ff

08001444 <__gedf2>:
 8001444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001446:	4657      	mov	r7, sl
 8001448:	464e      	mov	r6, r9
 800144a:	4645      	mov	r5, r8
 800144c:	46de      	mov	lr, fp
 800144e:	b5e0      	push	{r5, r6, r7, lr}
 8001450:	000d      	movs	r5, r1
 8001452:	030f      	lsls	r7, r1, #12
 8001454:	0b39      	lsrs	r1, r7, #12
 8001456:	b083      	sub	sp, #12
 8001458:	0004      	movs	r4, r0
 800145a:	4680      	mov	r8, r0
 800145c:	9101      	str	r1, [sp, #4]
 800145e:	0058      	lsls	r0, r3, #1
 8001460:	0fe9      	lsrs	r1, r5, #31
 8001462:	4f31      	ldr	r7, [pc, #196]	@ (8001528 <__gedf2+0xe4>)
 8001464:	0d40      	lsrs	r0, r0, #21
 8001466:	468c      	mov	ip, r1
 8001468:	006e      	lsls	r6, r5, #1
 800146a:	0319      	lsls	r1, r3, #12
 800146c:	4682      	mov	sl, r0
 800146e:	4691      	mov	r9, r2
 8001470:	0d76      	lsrs	r6, r6, #21
 8001472:	0b09      	lsrs	r1, r1, #12
 8001474:	0fd8      	lsrs	r0, r3, #31
 8001476:	42be      	cmp	r6, r7
 8001478:	d01f      	beq.n	80014ba <__gedf2+0x76>
 800147a:	45ba      	cmp	sl, r7
 800147c:	d00f      	beq.n	800149e <__gedf2+0x5a>
 800147e:	2e00      	cmp	r6, #0
 8001480:	d12f      	bne.n	80014e2 <__gedf2+0x9e>
 8001482:	4655      	mov	r5, sl
 8001484:	9e01      	ldr	r6, [sp, #4]
 8001486:	4334      	orrs	r4, r6
 8001488:	2d00      	cmp	r5, #0
 800148a:	d127      	bne.n	80014dc <__gedf2+0x98>
 800148c:	430a      	orrs	r2, r1
 800148e:	d03a      	beq.n	8001506 <__gedf2+0xc2>
 8001490:	2c00      	cmp	r4, #0
 8001492:	d145      	bne.n	8001520 <__gedf2+0xdc>
 8001494:	2800      	cmp	r0, #0
 8001496:	d11a      	bne.n	80014ce <__gedf2+0x8a>
 8001498:	2001      	movs	r0, #1
 800149a:	4240      	negs	r0, r0
 800149c:	e017      	b.n	80014ce <__gedf2+0x8a>
 800149e:	4311      	orrs	r1, r2
 80014a0:	d13b      	bne.n	800151a <__gedf2+0xd6>
 80014a2:	2e00      	cmp	r6, #0
 80014a4:	d102      	bne.n	80014ac <__gedf2+0x68>
 80014a6:	9f01      	ldr	r7, [sp, #4]
 80014a8:	4327      	orrs	r7, r4
 80014aa:	d0f3      	beq.n	8001494 <__gedf2+0x50>
 80014ac:	4584      	cmp	ip, r0
 80014ae:	d109      	bne.n	80014c4 <__gedf2+0x80>
 80014b0:	4663      	mov	r3, ip
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f0      	beq.n	8001498 <__gedf2+0x54>
 80014b6:	4660      	mov	r0, ip
 80014b8:	e009      	b.n	80014ce <__gedf2+0x8a>
 80014ba:	9f01      	ldr	r7, [sp, #4]
 80014bc:	4327      	orrs	r7, r4
 80014be:	d12c      	bne.n	800151a <__gedf2+0xd6>
 80014c0:	45b2      	cmp	sl, r6
 80014c2:	d024      	beq.n	800150e <__gedf2+0xca>
 80014c4:	4663      	mov	r3, ip
 80014c6:	2002      	movs	r0, #2
 80014c8:	3b01      	subs	r3, #1
 80014ca:	4018      	ands	r0, r3
 80014cc:	3801      	subs	r0, #1
 80014ce:	b003      	add	sp, #12
 80014d0:	bcf0      	pop	{r4, r5, r6, r7}
 80014d2:	46bb      	mov	fp, r7
 80014d4:	46b2      	mov	sl, r6
 80014d6:	46a9      	mov	r9, r5
 80014d8:	46a0      	mov	r8, r4
 80014da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014dc:	2c00      	cmp	r4, #0
 80014de:	d0d9      	beq.n	8001494 <__gedf2+0x50>
 80014e0:	e7e4      	b.n	80014ac <__gedf2+0x68>
 80014e2:	4654      	mov	r4, sl
 80014e4:	2c00      	cmp	r4, #0
 80014e6:	d0ed      	beq.n	80014c4 <__gedf2+0x80>
 80014e8:	4584      	cmp	ip, r0
 80014ea:	d1eb      	bne.n	80014c4 <__gedf2+0x80>
 80014ec:	4556      	cmp	r6, sl
 80014ee:	dce9      	bgt.n	80014c4 <__gedf2+0x80>
 80014f0:	dbde      	blt.n	80014b0 <__gedf2+0x6c>
 80014f2:	9b01      	ldr	r3, [sp, #4]
 80014f4:	428b      	cmp	r3, r1
 80014f6:	d8e5      	bhi.n	80014c4 <__gedf2+0x80>
 80014f8:	d1da      	bne.n	80014b0 <__gedf2+0x6c>
 80014fa:	45c8      	cmp	r8, r9
 80014fc:	d8e2      	bhi.n	80014c4 <__gedf2+0x80>
 80014fe:	2000      	movs	r0, #0
 8001500:	45c8      	cmp	r8, r9
 8001502:	d2e4      	bcs.n	80014ce <__gedf2+0x8a>
 8001504:	e7d4      	b.n	80014b0 <__gedf2+0x6c>
 8001506:	2000      	movs	r0, #0
 8001508:	2c00      	cmp	r4, #0
 800150a:	d0e0      	beq.n	80014ce <__gedf2+0x8a>
 800150c:	e7da      	b.n	80014c4 <__gedf2+0x80>
 800150e:	4311      	orrs	r1, r2
 8001510:	d103      	bne.n	800151a <__gedf2+0xd6>
 8001512:	4584      	cmp	ip, r0
 8001514:	d1d6      	bne.n	80014c4 <__gedf2+0x80>
 8001516:	2000      	movs	r0, #0
 8001518:	e7d9      	b.n	80014ce <__gedf2+0x8a>
 800151a:	2002      	movs	r0, #2
 800151c:	4240      	negs	r0, r0
 800151e:	e7d6      	b.n	80014ce <__gedf2+0x8a>
 8001520:	4584      	cmp	ip, r0
 8001522:	d0e6      	beq.n	80014f2 <__gedf2+0xae>
 8001524:	e7ce      	b.n	80014c4 <__gedf2+0x80>
 8001526:	46c0      	nop			@ (mov r8, r8)
 8001528:	000007ff 	.word	0x000007ff

0800152c <__ledf2>:
 800152c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800152e:	4657      	mov	r7, sl
 8001530:	464e      	mov	r6, r9
 8001532:	4645      	mov	r5, r8
 8001534:	46de      	mov	lr, fp
 8001536:	b5e0      	push	{r5, r6, r7, lr}
 8001538:	000d      	movs	r5, r1
 800153a:	030f      	lsls	r7, r1, #12
 800153c:	0004      	movs	r4, r0
 800153e:	4680      	mov	r8, r0
 8001540:	0fe8      	lsrs	r0, r5, #31
 8001542:	0b39      	lsrs	r1, r7, #12
 8001544:	4684      	mov	ip, r0
 8001546:	b083      	sub	sp, #12
 8001548:	0058      	lsls	r0, r3, #1
 800154a:	4f30      	ldr	r7, [pc, #192]	@ (800160c <__ledf2+0xe0>)
 800154c:	0d40      	lsrs	r0, r0, #21
 800154e:	9101      	str	r1, [sp, #4]
 8001550:	031e      	lsls	r6, r3, #12
 8001552:	0069      	lsls	r1, r5, #1
 8001554:	4682      	mov	sl, r0
 8001556:	4691      	mov	r9, r2
 8001558:	0d49      	lsrs	r1, r1, #21
 800155a:	0b36      	lsrs	r6, r6, #12
 800155c:	0fd8      	lsrs	r0, r3, #31
 800155e:	42b9      	cmp	r1, r7
 8001560:	d020      	beq.n	80015a4 <__ledf2+0x78>
 8001562:	45ba      	cmp	sl, r7
 8001564:	d00f      	beq.n	8001586 <__ledf2+0x5a>
 8001566:	2900      	cmp	r1, #0
 8001568:	d12b      	bne.n	80015c2 <__ledf2+0x96>
 800156a:	9901      	ldr	r1, [sp, #4]
 800156c:	430c      	orrs	r4, r1
 800156e:	4651      	mov	r1, sl
 8001570:	2900      	cmp	r1, #0
 8001572:	d137      	bne.n	80015e4 <__ledf2+0xb8>
 8001574:	4332      	orrs	r2, r6
 8001576:	d038      	beq.n	80015ea <__ledf2+0xbe>
 8001578:	2c00      	cmp	r4, #0
 800157a:	d144      	bne.n	8001606 <__ledf2+0xda>
 800157c:	2800      	cmp	r0, #0
 800157e:	d119      	bne.n	80015b4 <__ledf2+0x88>
 8001580:	2001      	movs	r0, #1
 8001582:	4240      	negs	r0, r0
 8001584:	e016      	b.n	80015b4 <__ledf2+0x88>
 8001586:	4316      	orrs	r6, r2
 8001588:	d113      	bne.n	80015b2 <__ledf2+0x86>
 800158a:	2900      	cmp	r1, #0
 800158c:	d102      	bne.n	8001594 <__ledf2+0x68>
 800158e:	9f01      	ldr	r7, [sp, #4]
 8001590:	4327      	orrs	r7, r4
 8001592:	d0f3      	beq.n	800157c <__ledf2+0x50>
 8001594:	4584      	cmp	ip, r0
 8001596:	d020      	beq.n	80015da <__ledf2+0xae>
 8001598:	4663      	mov	r3, ip
 800159a:	2002      	movs	r0, #2
 800159c:	3b01      	subs	r3, #1
 800159e:	4018      	ands	r0, r3
 80015a0:	3801      	subs	r0, #1
 80015a2:	e007      	b.n	80015b4 <__ledf2+0x88>
 80015a4:	9f01      	ldr	r7, [sp, #4]
 80015a6:	4327      	orrs	r7, r4
 80015a8:	d103      	bne.n	80015b2 <__ledf2+0x86>
 80015aa:	458a      	cmp	sl, r1
 80015ac:	d1f4      	bne.n	8001598 <__ledf2+0x6c>
 80015ae:	4316      	orrs	r6, r2
 80015b0:	d01f      	beq.n	80015f2 <__ledf2+0xc6>
 80015b2:	2002      	movs	r0, #2
 80015b4:	b003      	add	sp, #12
 80015b6:	bcf0      	pop	{r4, r5, r6, r7}
 80015b8:	46bb      	mov	fp, r7
 80015ba:	46b2      	mov	sl, r6
 80015bc:	46a9      	mov	r9, r5
 80015be:	46a0      	mov	r8, r4
 80015c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015c2:	4654      	mov	r4, sl
 80015c4:	2c00      	cmp	r4, #0
 80015c6:	d0e7      	beq.n	8001598 <__ledf2+0x6c>
 80015c8:	4584      	cmp	ip, r0
 80015ca:	d1e5      	bne.n	8001598 <__ledf2+0x6c>
 80015cc:	4551      	cmp	r1, sl
 80015ce:	dce3      	bgt.n	8001598 <__ledf2+0x6c>
 80015d0:	db03      	blt.n	80015da <__ledf2+0xae>
 80015d2:	9b01      	ldr	r3, [sp, #4]
 80015d4:	42b3      	cmp	r3, r6
 80015d6:	d8df      	bhi.n	8001598 <__ledf2+0x6c>
 80015d8:	d00f      	beq.n	80015fa <__ledf2+0xce>
 80015da:	4663      	mov	r3, ip
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0cf      	beq.n	8001580 <__ledf2+0x54>
 80015e0:	4660      	mov	r0, ip
 80015e2:	e7e7      	b.n	80015b4 <__ledf2+0x88>
 80015e4:	2c00      	cmp	r4, #0
 80015e6:	d0c9      	beq.n	800157c <__ledf2+0x50>
 80015e8:	e7d4      	b.n	8001594 <__ledf2+0x68>
 80015ea:	2000      	movs	r0, #0
 80015ec:	2c00      	cmp	r4, #0
 80015ee:	d0e1      	beq.n	80015b4 <__ledf2+0x88>
 80015f0:	e7d2      	b.n	8001598 <__ledf2+0x6c>
 80015f2:	4584      	cmp	ip, r0
 80015f4:	d1d0      	bne.n	8001598 <__ledf2+0x6c>
 80015f6:	2000      	movs	r0, #0
 80015f8:	e7dc      	b.n	80015b4 <__ledf2+0x88>
 80015fa:	45c8      	cmp	r8, r9
 80015fc:	d8cc      	bhi.n	8001598 <__ledf2+0x6c>
 80015fe:	2000      	movs	r0, #0
 8001600:	45c8      	cmp	r8, r9
 8001602:	d2d7      	bcs.n	80015b4 <__ledf2+0x88>
 8001604:	e7e9      	b.n	80015da <__ledf2+0xae>
 8001606:	4584      	cmp	ip, r0
 8001608:	d0e3      	beq.n	80015d2 <__ledf2+0xa6>
 800160a:	e7c5      	b.n	8001598 <__ledf2+0x6c>
 800160c:	000007ff 	.word	0x000007ff

08001610 <__aeabi_dmul>:
 8001610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001612:	4657      	mov	r7, sl
 8001614:	46de      	mov	lr, fp
 8001616:	464e      	mov	r6, r9
 8001618:	4645      	mov	r5, r8
 800161a:	b5e0      	push	{r5, r6, r7, lr}
 800161c:	001f      	movs	r7, r3
 800161e:	030b      	lsls	r3, r1, #12
 8001620:	0b1b      	lsrs	r3, r3, #12
 8001622:	0016      	movs	r6, r2
 8001624:	469a      	mov	sl, r3
 8001626:	0fca      	lsrs	r2, r1, #31
 8001628:	004b      	lsls	r3, r1, #1
 800162a:	0004      	movs	r4, r0
 800162c:	4693      	mov	fp, r2
 800162e:	b087      	sub	sp, #28
 8001630:	0d5b      	lsrs	r3, r3, #21
 8001632:	d100      	bne.n	8001636 <__aeabi_dmul+0x26>
 8001634:	e0d5      	b.n	80017e2 <__aeabi_dmul+0x1d2>
 8001636:	4abb      	ldr	r2, [pc, #748]	@ (8001924 <__aeabi_dmul+0x314>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d100      	bne.n	800163e <__aeabi_dmul+0x2e>
 800163c:	e0f8      	b.n	8001830 <__aeabi_dmul+0x220>
 800163e:	4651      	mov	r1, sl
 8001640:	0f42      	lsrs	r2, r0, #29
 8001642:	00c9      	lsls	r1, r1, #3
 8001644:	430a      	orrs	r2, r1
 8001646:	2180      	movs	r1, #128	@ 0x80
 8001648:	0409      	lsls	r1, r1, #16
 800164a:	4311      	orrs	r1, r2
 800164c:	00c2      	lsls	r2, r0, #3
 800164e:	4691      	mov	r9, r2
 8001650:	4ab5      	ldr	r2, [pc, #724]	@ (8001928 <__aeabi_dmul+0x318>)
 8001652:	468a      	mov	sl, r1
 8001654:	189d      	adds	r5, r3, r2
 8001656:	2300      	movs	r3, #0
 8001658:	4698      	mov	r8, r3
 800165a:	9302      	str	r3, [sp, #8]
 800165c:	033c      	lsls	r4, r7, #12
 800165e:	007b      	lsls	r3, r7, #1
 8001660:	0ffa      	lsrs	r2, r7, #31
 8001662:	0030      	movs	r0, r6
 8001664:	0b24      	lsrs	r4, r4, #12
 8001666:	0d5b      	lsrs	r3, r3, #21
 8001668:	9200      	str	r2, [sp, #0]
 800166a:	d100      	bne.n	800166e <__aeabi_dmul+0x5e>
 800166c:	e096      	b.n	800179c <__aeabi_dmul+0x18c>
 800166e:	4aad      	ldr	r2, [pc, #692]	@ (8001924 <__aeabi_dmul+0x314>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d031      	beq.n	80016d8 <__aeabi_dmul+0xc8>
 8001674:	0f72      	lsrs	r2, r6, #29
 8001676:	00e4      	lsls	r4, r4, #3
 8001678:	4322      	orrs	r2, r4
 800167a:	2480      	movs	r4, #128	@ 0x80
 800167c:	0424      	lsls	r4, r4, #16
 800167e:	4314      	orrs	r4, r2
 8001680:	4aa9      	ldr	r2, [pc, #676]	@ (8001928 <__aeabi_dmul+0x318>)
 8001682:	00f0      	lsls	r0, r6, #3
 8001684:	4694      	mov	ip, r2
 8001686:	4463      	add	r3, ip
 8001688:	195b      	adds	r3, r3, r5
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	9201      	str	r2, [sp, #4]
 800168e:	4642      	mov	r2, r8
 8001690:	2600      	movs	r6, #0
 8001692:	2a0a      	cmp	r2, #10
 8001694:	dc42      	bgt.n	800171c <__aeabi_dmul+0x10c>
 8001696:	465a      	mov	r2, fp
 8001698:	9900      	ldr	r1, [sp, #0]
 800169a:	404a      	eors	r2, r1
 800169c:	4693      	mov	fp, r2
 800169e:	4642      	mov	r2, r8
 80016a0:	2a02      	cmp	r2, #2
 80016a2:	dc32      	bgt.n	800170a <__aeabi_dmul+0xfa>
 80016a4:	3a01      	subs	r2, #1
 80016a6:	2a01      	cmp	r2, #1
 80016a8:	d900      	bls.n	80016ac <__aeabi_dmul+0x9c>
 80016aa:	e149      	b.n	8001940 <__aeabi_dmul+0x330>
 80016ac:	2e02      	cmp	r6, #2
 80016ae:	d100      	bne.n	80016b2 <__aeabi_dmul+0xa2>
 80016b0:	e0ca      	b.n	8001848 <__aeabi_dmul+0x238>
 80016b2:	2e01      	cmp	r6, #1
 80016b4:	d13d      	bne.n	8001732 <__aeabi_dmul+0x122>
 80016b6:	2300      	movs	r3, #0
 80016b8:	2400      	movs	r4, #0
 80016ba:	2200      	movs	r2, #0
 80016bc:	0010      	movs	r0, r2
 80016be:	465a      	mov	r2, fp
 80016c0:	051b      	lsls	r3, r3, #20
 80016c2:	4323      	orrs	r3, r4
 80016c4:	07d2      	lsls	r2, r2, #31
 80016c6:	4313      	orrs	r3, r2
 80016c8:	0019      	movs	r1, r3
 80016ca:	b007      	add	sp, #28
 80016cc:	bcf0      	pop	{r4, r5, r6, r7}
 80016ce:	46bb      	mov	fp, r7
 80016d0:	46b2      	mov	sl, r6
 80016d2:	46a9      	mov	r9, r5
 80016d4:	46a0      	mov	r8, r4
 80016d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016d8:	4b92      	ldr	r3, [pc, #584]	@ (8001924 <__aeabi_dmul+0x314>)
 80016da:	4326      	orrs	r6, r4
 80016dc:	18eb      	adds	r3, r5, r3
 80016de:	2e00      	cmp	r6, #0
 80016e0:	d100      	bne.n	80016e4 <__aeabi_dmul+0xd4>
 80016e2:	e0bb      	b.n	800185c <__aeabi_dmul+0x24c>
 80016e4:	2203      	movs	r2, #3
 80016e6:	4641      	mov	r1, r8
 80016e8:	4311      	orrs	r1, r2
 80016ea:	465a      	mov	r2, fp
 80016ec:	4688      	mov	r8, r1
 80016ee:	9900      	ldr	r1, [sp, #0]
 80016f0:	404a      	eors	r2, r1
 80016f2:	2180      	movs	r1, #128	@ 0x80
 80016f4:	0109      	lsls	r1, r1, #4
 80016f6:	468c      	mov	ip, r1
 80016f8:	0029      	movs	r1, r5
 80016fa:	4461      	add	r1, ip
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	4641      	mov	r1, r8
 8001700:	290a      	cmp	r1, #10
 8001702:	dd00      	ble.n	8001706 <__aeabi_dmul+0xf6>
 8001704:	e233      	b.n	8001b6e <__aeabi_dmul+0x55e>
 8001706:	4693      	mov	fp, r2
 8001708:	2603      	movs	r6, #3
 800170a:	4642      	mov	r2, r8
 800170c:	2701      	movs	r7, #1
 800170e:	4097      	lsls	r7, r2
 8001710:	21a6      	movs	r1, #166	@ 0xa6
 8001712:	003a      	movs	r2, r7
 8001714:	00c9      	lsls	r1, r1, #3
 8001716:	400a      	ands	r2, r1
 8001718:	420f      	tst	r7, r1
 800171a:	d031      	beq.n	8001780 <__aeabi_dmul+0x170>
 800171c:	9e02      	ldr	r6, [sp, #8]
 800171e:	2e02      	cmp	r6, #2
 8001720:	d100      	bne.n	8001724 <__aeabi_dmul+0x114>
 8001722:	e235      	b.n	8001b90 <__aeabi_dmul+0x580>
 8001724:	2e03      	cmp	r6, #3
 8001726:	d100      	bne.n	800172a <__aeabi_dmul+0x11a>
 8001728:	e1d2      	b.n	8001ad0 <__aeabi_dmul+0x4c0>
 800172a:	4654      	mov	r4, sl
 800172c:	4648      	mov	r0, r9
 800172e:	2e01      	cmp	r6, #1
 8001730:	d0c1      	beq.n	80016b6 <__aeabi_dmul+0xa6>
 8001732:	9a01      	ldr	r2, [sp, #4]
 8001734:	4b7d      	ldr	r3, [pc, #500]	@ (800192c <__aeabi_dmul+0x31c>)
 8001736:	4694      	mov	ip, r2
 8001738:	4463      	add	r3, ip
 800173a:	2b00      	cmp	r3, #0
 800173c:	dc00      	bgt.n	8001740 <__aeabi_dmul+0x130>
 800173e:	e0c0      	b.n	80018c2 <__aeabi_dmul+0x2b2>
 8001740:	0742      	lsls	r2, r0, #29
 8001742:	d009      	beq.n	8001758 <__aeabi_dmul+0x148>
 8001744:	220f      	movs	r2, #15
 8001746:	4002      	ands	r2, r0
 8001748:	2a04      	cmp	r2, #4
 800174a:	d005      	beq.n	8001758 <__aeabi_dmul+0x148>
 800174c:	1d02      	adds	r2, r0, #4
 800174e:	4282      	cmp	r2, r0
 8001750:	4180      	sbcs	r0, r0
 8001752:	4240      	negs	r0, r0
 8001754:	1824      	adds	r4, r4, r0
 8001756:	0010      	movs	r0, r2
 8001758:	01e2      	lsls	r2, r4, #7
 800175a:	d506      	bpl.n	800176a <__aeabi_dmul+0x15a>
 800175c:	4b74      	ldr	r3, [pc, #464]	@ (8001930 <__aeabi_dmul+0x320>)
 800175e:	9a01      	ldr	r2, [sp, #4]
 8001760:	401c      	ands	r4, r3
 8001762:	2380      	movs	r3, #128	@ 0x80
 8001764:	4694      	mov	ip, r2
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	4463      	add	r3, ip
 800176a:	4a72      	ldr	r2, [pc, #456]	@ (8001934 <__aeabi_dmul+0x324>)
 800176c:	4293      	cmp	r3, r2
 800176e:	dc6b      	bgt.n	8001848 <__aeabi_dmul+0x238>
 8001770:	0762      	lsls	r2, r4, #29
 8001772:	08c0      	lsrs	r0, r0, #3
 8001774:	0264      	lsls	r4, r4, #9
 8001776:	055b      	lsls	r3, r3, #21
 8001778:	4302      	orrs	r2, r0
 800177a:	0b24      	lsrs	r4, r4, #12
 800177c:	0d5b      	lsrs	r3, r3, #21
 800177e:	e79d      	b.n	80016bc <__aeabi_dmul+0xac>
 8001780:	2190      	movs	r1, #144	@ 0x90
 8001782:	0089      	lsls	r1, r1, #2
 8001784:	420f      	tst	r7, r1
 8001786:	d163      	bne.n	8001850 <__aeabi_dmul+0x240>
 8001788:	2288      	movs	r2, #136	@ 0x88
 800178a:	423a      	tst	r2, r7
 800178c:	d100      	bne.n	8001790 <__aeabi_dmul+0x180>
 800178e:	e0d7      	b.n	8001940 <__aeabi_dmul+0x330>
 8001790:	9b00      	ldr	r3, [sp, #0]
 8001792:	46a2      	mov	sl, r4
 8001794:	469b      	mov	fp, r3
 8001796:	4681      	mov	r9, r0
 8001798:	9602      	str	r6, [sp, #8]
 800179a:	e7bf      	b.n	800171c <__aeabi_dmul+0x10c>
 800179c:	0023      	movs	r3, r4
 800179e:	4333      	orrs	r3, r6
 80017a0:	d100      	bne.n	80017a4 <__aeabi_dmul+0x194>
 80017a2:	e07f      	b.n	80018a4 <__aeabi_dmul+0x294>
 80017a4:	2c00      	cmp	r4, #0
 80017a6:	d100      	bne.n	80017aa <__aeabi_dmul+0x19a>
 80017a8:	e1ad      	b.n	8001b06 <__aeabi_dmul+0x4f6>
 80017aa:	0020      	movs	r0, r4
 80017ac:	f7fe fe60 	bl	8000470 <__clzsi2>
 80017b0:	0002      	movs	r2, r0
 80017b2:	0003      	movs	r3, r0
 80017b4:	3a0b      	subs	r2, #11
 80017b6:	201d      	movs	r0, #29
 80017b8:	0019      	movs	r1, r3
 80017ba:	1a82      	subs	r2, r0, r2
 80017bc:	0030      	movs	r0, r6
 80017be:	3908      	subs	r1, #8
 80017c0:	40d0      	lsrs	r0, r2
 80017c2:	408c      	lsls	r4, r1
 80017c4:	4304      	orrs	r4, r0
 80017c6:	0030      	movs	r0, r6
 80017c8:	4088      	lsls	r0, r1
 80017ca:	4a5b      	ldr	r2, [pc, #364]	@ (8001938 <__aeabi_dmul+0x328>)
 80017cc:	1aeb      	subs	r3, r5, r3
 80017ce:	4694      	mov	ip, r2
 80017d0:	4463      	add	r3, ip
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	9201      	str	r2, [sp, #4]
 80017d6:	4642      	mov	r2, r8
 80017d8:	2600      	movs	r6, #0
 80017da:	2a0a      	cmp	r2, #10
 80017dc:	dc00      	bgt.n	80017e0 <__aeabi_dmul+0x1d0>
 80017de:	e75a      	b.n	8001696 <__aeabi_dmul+0x86>
 80017e0:	e79c      	b.n	800171c <__aeabi_dmul+0x10c>
 80017e2:	4653      	mov	r3, sl
 80017e4:	4303      	orrs	r3, r0
 80017e6:	4699      	mov	r9, r3
 80017e8:	d054      	beq.n	8001894 <__aeabi_dmul+0x284>
 80017ea:	4653      	mov	r3, sl
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d100      	bne.n	80017f2 <__aeabi_dmul+0x1e2>
 80017f0:	e177      	b.n	8001ae2 <__aeabi_dmul+0x4d2>
 80017f2:	4650      	mov	r0, sl
 80017f4:	f7fe fe3c 	bl	8000470 <__clzsi2>
 80017f8:	230b      	movs	r3, #11
 80017fa:	425b      	negs	r3, r3
 80017fc:	469c      	mov	ip, r3
 80017fe:	0002      	movs	r2, r0
 8001800:	4484      	add	ip, r0
 8001802:	0011      	movs	r1, r2
 8001804:	4650      	mov	r0, sl
 8001806:	3908      	subs	r1, #8
 8001808:	4088      	lsls	r0, r1
 800180a:	231d      	movs	r3, #29
 800180c:	4680      	mov	r8, r0
 800180e:	4660      	mov	r0, ip
 8001810:	1a1b      	subs	r3, r3, r0
 8001812:	0020      	movs	r0, r4
 8001814:	40d8      	lsrs	r0, r3
 8001816:	0003      	movs	r3, r0
 8001818:	4640      	mov	r0, r8
 800181a:	4303      	orrs	r3, r0
 800181c:	469a      	mov	sl, r3
 800181e:	0023      	movs	r3, r4
 8001820:	408b      	lsls	r3, r1
 8001822:	4699      	mov	r9, r3
 8001824:	2300      	movs	r3, #0
 8001826:	4d44      	ldr	r5, [pc, #272]	@ (8001938 <__aeabi_dmul+0x328>)
 8001828:	4698      	mov	r8, r3
 800182a:	1aad      	subs	r5, r5, r2
 800182c:	9302      	str	r3, [sp, #8]
 800182e:	e715      	b.n	800165c <__aeabi_dmul+0x4c>
 8001830:	4652      	mov	r2, sl
 8001832:	4302      	orrs	r2, r0
 8001834:	4691      	mov	r9, r2
 8001836:	d126      	bne.n	8001886 <__aeabi_dmul+0x276>
 8001838:	2200      	movs	r2, #0
 800183a:	001d      	movs	r5, r3
 800183c:	2302      	movs	r3, #2
 800183e:	4692      	mov	sl, r2
 8001840:	3208      	adds	r2, #8
 8001842:	4690      	mov	r8, r2
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	e709      	b.n	800165c <__aeabi_dmul+0x4c>
 8001848:	2400      	movs	r4, #0
 800184a:	2200      	movs	r2, #0
 800184c:	4b35      	ldr	r3, [pc, #212]	@ (8001924 <__aeabi_dmul+0x314>)
 800184e:	e735      	b.n	80016bc <__aeabi_dmul+0xac>
 8001850:	2300      	movs	r3, #0
 8001852:	2480      	movs	r4, #128	@ 0x80
 8001854:	469b      	mov	fp, r3
 8001856:	0324      	lsls	r4, r4, #12
 8001858:	4b32      	ldr	r3, [pc, #200]	@ (8001924 <__aeabi_dmul+0x314>)
 800185a:	e72f      	b.n	80016bc <__aeabi_dmul+0xac>
 800185c:	2202      	movs	r2, #2
 800185e:	4641      	mov	r1, r8
 8001860:	4311      	orrs	r1, r2
 8001862:	2280      	movs	r2, #128	@ 0x80
 8001864:	0112      	lsls	r2, r2, #4
 8001866:	4694      	mov	ip, r2
 8001868:	002a      	movs	r2, r5
 800186a:	4462      	add	r2, ip
 800186c:	4688      	mov	r8, r1
 800186e:	9201      	str	r2, [sp, #4]
 8001870:	290a      	cmp	r1, #10
 8001872:	dd00      	ble.n	8001876 <__aeabi_dmul+0x266>
 8001874:	e752      	b.n	800171c <__aeabi_dmul+0x10c>
 8001876:	465a      	mov	r2, fp
 8001878:	2000      	movs	r0, #0
 800187a:	9900      	ldr	r1, [sp, #0]
 800187c:	0004      	movs	r4, r0
 800187e:	404a      	eors	r2, r1
 8001880:	4693      	mov	fp, r2
 8001882:	2602      	movs	r6, #2
 8001884:	e70b      	b.n	800169e <__aeabi_dmul+0x8e>
 8001886:	220c      	movs	r2, #12
 8001888:	001d      	movs	r5, r3
 800188a:	2303      	movs	r3, #3
 800188c:	4681      	mov	r9, r0
 800188e:	4690      	mov	r8, r2
 8001890:	9302      	str	r3, [sp, #8]
 8001892:	e6e3      	b.n	800165c <__aeabi_dmul+0x4c>
 8001894:	2300      	movs	r3, #0
 8001896:	469a      	mov	sl, r3
 8001898:	3304      	adds	r3, #4
 800189a:	4698      	mov	r8, r3
 800189c:	3b03      	subs	r3, #3
 800189e:	2500      	movs	r5, #0
 80018a0:	9302      	str	r3, [sp, #8]
 80018a2:	e6db      	b.n	800165c <__aeabi_dmul+0x4c>
 80018a4:	4642      	mov	r2, r8
 80018a6:	3301      	adds	r3, #1
 80018a8:	431a      	orrs	r2, r3
 80018aa:	002b      	movs	r3, r5
 80018ac:	4690      	mov	r8, r2
 80018ae:	1c5a      	adds	r2, r3, #1
 80018b0:	9201      	str	r2, [sp, #4]
 80018b2:	4642      	mov	r2, r8
 80018b4:	2400      	movs	r4, #0
 80018b6:	2000      	movs	r0, #0
 80018b8:	2601      	movs	r6, #1
 80018ba:	2a0a      	cmp	r2, #10
 80018bc:	dc00      	bgt.n	80018c0 <__aeabi_dmul+0x2b0>
 80018be:	e6ea      	b.n	8001696 <__aeabi_dmul+0x86>
 80018c0:	e72c      	b.n	800171c <__aeabi_dmul+0x10c>
 80018c2:	2201      	movs	r2, #1
 80018c4:	1ad2      	subs	r2, r2, r3
 80018c6:	2a38      	cmp	r2, #56	@ 0x38
 80018c8:	dd00      	ble.n	80018cc <__aeabi_dmul+0x2bc>
 80018ca:	e6f4      	b.n	80016b6 <__aeabi_dmul+0xa6>
 80018cc:	2a1f      	cmp	r2, #31
 80018ce:	dc00      	bgt.n	80018d2 <__aeabi_dmul+0x2c2>
 80018d0:	e12a      	b.n	8001b28 <__aeabi_dmul+0x518>
 80018d2:	211f      	movs	r1, #31
 80018d4:	4249      	negs	r1, r1
 80018d6:	1acb      	subs	r3, r1, r3
 80018d8:	0021      	movs	r1, r4
 80018da:	40d9      	lsrs	r1, r3
 80018dc:	000b      	movs	r3, r1
 80018de:	2a20      	cmp	r2, #32
 80018e0:	d005      	beq.n	80018ee <__aeabi_dmul+0x2de>
 80018e2:	4a16      	ldr	r2, [pc, #88]	@ (800193c <__aeabi_dmul+0x32c>)
 80018e4:	9d01      	ldr	r5, [sp, #4]
 80018e6:	4694      	mov	ip, r2
 80018e8:	4465      	add	r5, ip
 80018ea:	40ac      	lsls	r4, r5
 80018ec:	4320      	orrs	r0, r4
 80018ee:	1e42      	subs	r2, r0, #1
 80018f0:	4190      	sbcs	r0, r2
 80018f2:	4318      	orrs	r0, r3
 80018f4:	2307      	movs	r3, #7
 80018f6:	0019      	movs	r1, r3
 80018f8:	2400      	movs	r4, #0
 80018fa:	4001      	ands	r1, r0
 80018fc:	4203      	tst	r3, r0
 80018fe:	d00c      	beq.n	800191a <__aeabi_dmul+0x30a>
 8001900:	230f      	movs	r3, #15
 8001902:	4003      	ands	r3, r0
 8001904:	2b04      	cmp	r3, #4
 8001906:	d100      	bne.n	800190a <__aeabi_dmul+0x2fa>
 8001908:	e140      	b.n	8001b8c <__aeabi_dmul+0x57c>
 800190a:	1d03      	adds	r3, r0, #4
 800190c:	4283      	cmp	r3, r0
 800190e:	41a4      	sbcs	r4, r4
 8001910:	0018      	movs	r0, r3
 8001912:	4264      	negs	r4, r4
 8001914:	0761      	lsls	r1, r4, #29
 8001916:	0264      	lsls	r4, r4, #9
 8001918:	0b24      	lsrs	r4, r4, #12
 800191a:	08c2      	lsrs	r2, r0, #3
 800191c:	2300      	movs	r3, #0
 800191e:	430a      	orrs	r2, r1
 8001920:	e6cc      	b.n	80016bc <__aeabi_dmul+0xac>
 8001922:	46c0      	nop			@ (mov r8, r8)
 8001924:	000007ff 	.word	0x000007ff
 8001928:	fffffc01 	.word	0xfffffc01
 800192c:	000003ff 	.word	0x000003ff
 8001930:	feffffff 	.word	0xfeffffff
 8001934:	000007fe 	.word	0x000007fe
 8001938:	fffffc0d 	.word	0xfffffc0d
 800193c:	0000043e 	.word	0x0000043e
 8001940:	4649      	mov	r1, r9
 8001942:	464a      	mov	r2, r9
 8001944:	0409      	lsls	r1, r1, #16
 8001946:	0c09      	lsrs	r1, r1, #16
 8001948:	000d      	movs	r5, r1
 800194a:	0c16      	lsrs	r6, r2, #16
 800194c:	0c02      	lsrs	r2, r0, #16
 800194e:	0400      	lsls	r0, r0, #16
 8001950:	0c00      	lsrs	r0, r0, #16
 8001952:	4345      	muls	r5, r0
 8001954:	46ac      	mov	ip, r5
 8001956:	0005      	movs	r5, r0
 8001958:	4375      	muls	r5, r6
 800195a:	46a8      	mov	r8, r5
 800195c:	0015      	movs	r5, r2
 800195e:	000f      	movs	r7, r1
 8001960:	4375      	muls	r5, r6
 8001962:	9200      	str	r2, [sp, #0]
 8001964:	9502      	str	r5, [sp, #8]
 8001966:	002a      	movs	r2, r5
 8001968:	9d00      	ldr	r5, [sp, #0]
 800196a:	436f      	muls	r7, r5
 800196c:	4665      	mov	r5, ip
 800196e:	0c2d      	lsrs	r5, r5, #16
 8001970:	46a9      	mov	r9, r5
 8001972:	4447      	add	r7, r8
 8001974:	444f      	add	r7, r9
 8001976:	45b8      	cmp	r8, r7
 8001978:	d905      	bls.n	8001986 <__aeabi_dmul+0x376>
 800197a:	0015      	movs	r5, r2
 800197c:	2280      	movs	r2, #128	@ 0x80
 800197e:	0252      	lsls	r2, r2, #9
 8001980:	4690      	mov	r8, r2
 8001982:	4445      	add	r5, r8
 8001984:	9502      	str	r5, [sp, #8]
 8001986:	0c3d      	lsrs	r5, r7, #16
 8001988:	9503      	str	r5, [sp, #12]
 800198a:	4665      	mov	r5, ip
 800198c:	042d      	lsls	r5, r5, #16
 800198e:	043f      	lsls	r7, r7, #16
 8001990:	0c2d      	lsrs	r5, r5, #16
 8001992:	46ac      	mov	ip, r5
 8001994:	003d      	movs	r5, r7
 8001996:	4465      	add	r5, ip
 8001998:	9504      	str	r5, [sp, #16]
 800199a:	0c25      	lsrs	r5, r4, #16
 800199c:	0424      	lsls	r4, r4, #16
 800199e:	0c24      	lsrs	r4, r4, #16
 80019a0:	46ac      	mov	ip, r5
 80019a2:	0025      	movs	r5, r4
 80019a4:	4375      	muls	r5, r6
 80019a6:	46a8      	mov	r8, r5
 80019a8:	4665      	mov	r5, ip
 80019aa:	000f      	movs	r7, r1
 80019ac:	4369      	muls	r1, r5
 80019ae:	4441      	add	r1, r8
 80019b0:	4689      	mov	r9, r1
 80019b2:	4367      	muls	r7, r4
 80019b4:	0c39      	lsrs	r1, r7, #16
 80019b6:	4449      	add	r1, r9
 80019b8:	436e      	muls	r6, r5
 80019ba:	4588      	cmp	r8, r1
 80019bc:	d903      	bls.n	80019c6 <__aeabi_dmul+0x3b6>
 80019be:	2280      	movs	r2, #128	@ 0x80
 80019c0:	0252      	lsls	r2, r2, #9
 80019c2:	4690      	mov	r8, r2
 80019c4:	4446      	add	r6, r8
 80019c6:	0c0d      	lsrs	r5, r1, #16
 80019c8:	46a8      	mov	r8, r5
 80019ca:	0035      	movs	r5, r6
 80019cc:	4445      	add	r5, r8
 80019ce:	9505      	str	r5, [sp, #20]
 80019d0:	9d03      	ldr	r5, [sp, #12]
 80019d2:	043f      	lsls	r7, r7, #16
 80019d4:	46a8      	mov	r8, r5
 80019d6:	0c3f      	lsrs	r7, r7, #16
 80019d8:	0409      	lsls	r1, r1, #16
 80019da:	19c9      	adds	r1, r1, r7
 80019dc:	4488      	add	r8, r1
 80019de:	4645      	mov	r5, r8
 80019e0:	9503      	str	r5, [sp, #12]
 80019e2:	4655      	mov	r5, sl
 80019e4:	042e      	lsls	r6, r5, #16
 80019e6:	0c36      	lsrs	r6, r6, #16
 80019e8:	0c2f      	lsrs	r7, r5, #16
 80019ea:	0035      	movs	r5, r6
 80019ec:	4345      	muls	r5, r0
 80019ee:	4378      	muls	r0, r7
 80019f0:	4681      	mov	r9, r0
 80019f2:	0038      	movs	r0, r7
 80019f4:	46a8      	mov	r8, r5
 80019f6:	0c2d      	lsrs	r5, r5, #16
 80019f8:	46aa      	mov	sl, r5
 80019fa:	9a00      	ldr	r2, [sp, #0]
 80019fc:	4350      	muls	r0, r2
 80019fe:	4372      	muls	r2, r6
 8001a00:	444a      	add	r2, r9
 8001a02:	4452      	add	r2, sl
 8001a04:	4591      	cmp	r9, r2
 8001a06:	d903      	bls.n	8001a10 <__aeabi_dmul+0x400>
 8001a08:	2580      	movs	r5, #128	@ 0x80
 8001a0a:	026d      	lsls	r5, r5, #9
 8001a0c:	46a9      	mov	r9, r5
 8001a0e:	4448      	add	r0, r9
 8001a10:	0c15      	lsrs	r5, r2, #16
 8001a12:	46a9      	mov	r9, r5
 8001a14:	4645      	mov	r5, r8
 8001a16:	042d      	lsls	r5, r5, #16
 8001a18:	0c2d      	lsrs	r5, r5, #16
 8001a1a:	46a8      	mov	r8, r5
 8001a1c:	4665      	mov	r5, ip
 8001a1e:	437d      	muls	r5, r7
 8001a20:	0412      	lsls	r2, r2, #16
 8001a22:	4448      	add	r0, r9
 8001a24:	4490      	add	r8, r2
 8001a26:	46a9      	mov	r9, r5
 8001a28:	0032      	movs	r2, r6
 8001a2a:	4665      	mov	r5, ip
 8001a2c:	4362      	muls	r2, r4
 8001a2e:	436e      	muls	r6, r5
 8001a30:	437c      	muls	r4, r7
 8001a32:	0c17      	lsrs	r7, r2, #16
 8001a34:	1936      	adds	r6, r6, r4
 8001a36:	19bf      	adds	r7, r7, r6
 8001a38:	42bc      	cmp	r4, r7
 8001a3a:	d903      	bls.n	8001a44 <__aeabi_dmul+0x434>
 8001a3c:	2480      	movs	r4, #128	@ 0x80
 8001a3e:	0264      	lsls	r4, r4, #9
 8001a40:	46a4      	mov	ip, r4
 8001a42:	44e1      	add	r9, ip
 8001a44:	9c02      	ldr	r4, [sp, #8]
 8001a46:	9e03      	ldr	r6, [sp, #12]
 8001a48:	46a4      	mov	ip, r4
 8001a4a:	9d05      	ldr	r5, [sp, #20]
 8001a4c:	4466      	add	r6, ip
 8001a4e:	428e      	cmp	r6, r1
 8001a50:	4189      	sbcs	r1, r1
 8001a52:	46ac      	mov	ip, r5
 8001a54:	0412      	lsls	r2, r2, #16
 8001a56:	043c      	lsls	r4, r7, #16
 8001a58:	0c12      	lsrs	r2, r2, #16
 8001a5a:	18a2      	adds	r2, r4, r2
 8001a5c:	4462      	add	r2, ip
 8001a5e:	4249      	negs	r1, r1
 8001a60:	1854      	adds	r4, r2, r1
 8001a62:	4446      	add	r6, r8
 8001a64:	46a4      	mov	ip, r4
 8001a66:	4546      	cmp	r6, r8
 8001a68:	41a4      	sbcs	r4, r4
 8001a6a:	4682      	mov	sl, r0
 8001a6c:	4264      	negs	r4, r4
 8001a6e:	46a0      	mov	r8, r4
 8001a70:	42aa      	cmp	r2, r5
 8001a72:	4192      	sbcs	r2, r2
 8001a74:	458c      	cmp	ip, r1
 8001a76:	4189      	sbcs	r1, r1
 8001a78:	44e2      	add	sl, ip
 8001a7a:	44d0      	add	r8, sl
 8001a7c:	4249      	negs	r1, r1
 8001a7e:	4252      	negs	r2, r2
 8001a80:	430a      	orrs	r2, r1
 8001a82:	45a0      	cmp	r8, r4
 8001a84:	41a4      	sbcs	r4, r4
 8001a86:	4582      	cmp	sl, r0
 8001a88:	4189      	sbcs	r1, r1
 8001a8a:	4264      	negs	r4, r4
 8001a8c:	4249      	negs	r1, r1
 8001a8e:	430c      	orrs	r4, r1
 8001a90:	4641      	mov	r1, r8
 8001a92:	0c3f      	lsrs	r7, r7, #16
 8001a94:	19d2      	adds	r2, r2, r7
 8001a96:	1912      	adds	r2, r2, r4
 8001a98:	0dcc      	lsrs	r4, r1, #23
 8001a9a:	9904      	ldr	r1, [sp, #16]
 8001a9c:	0270      	lsls	r0, r6, #9
 8001a9e:	4308      	orrs	r0, r1
 8001aa0:	1e41      	subs	r1, r0, #1
 8001aa2:	4188      	sbcs	r0, r1
 8001aa4:	4641      	mov	r1, r8
 8001aa6:	444a      	add	r2, r9
 8001aa8:	0df6      	lsrs	r6, r6, #23
 8001aaa:	0252      	lsls	r2, r2, #9
 8001aac:	4330      	orrs	r0, r6
 8001aae:	0249      	lsls	r1, r1, #9
 8001ab0:	4314      	orrs	r4, r2
 8001ab2:	4308      	orrs	r0, r1
 8001ab4:	01d2      	lsls	r2, r2, #7
 8001ab6:	d535      	bpl.n	8001b24 <__aeabi_dmul+0x514>
 8001ab8:	2201      	movs	r2, #1
 8001aba:	0843      	lsrs	r3, r0, #1
 8001abc:	4002      	ands	r2, r0
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	07e0      	lsls	r0, r4, #31
 8001ac2:	4318      	orrs	r0, r3
 8001ac4:	0864      	lsrs	r4, r4, #1
 8001ac6:	e634      	b.n	8001732 <__aeabi_dmul+0x122>
 8001ac8:	9b00      	ldr	r3, [sp, #0]
 8001aca:	46a2      	mov	sl, r4
 8001acc:	469b      	mov	fp, r3
 8001ace:	4681      	mov	r9, r0
 8001ad0:	2480      	movs	r4, #128	@ 0x80
 8001ad2:	4653      	mov	r3, sl
 8001ad4:	0324      	lsls	r4, r4, #12
 8001ad6:	431c      	orrs	r4, r3
 8001ad8:	0324      	lsls	r4, r4, #12
 8001ada:	464a      	mov	r2, r9
 8001adc:	4b2e      	ldr	r3, [pc, #184]	@ (8001b98 <__aeabi_dmul+0x588>)
 8001ade:	0b24      	lsrs	r4, r4, #12
 8001ae0:	e5ec      	b.n	80016bc <__aeabi_dmul+0xac>
 8001ae2:	f7fe fcc5 	bl	8000470 <__clzsi2>
 8001ae6:	2315      	movs	r3, #21
 8001ae8:	469c      	mov	ip, r3
 8001aea:	4484      	add	ip, r0
 8001aec:	0002      	movs	r2, r0
 8001aee:	4663      	mov	r3, ip
 8001af0:	3220      	adds	r2, #32
 8001af2:	2b1c      	cmp	r3, #28
 8001af4:	dc00      	bgt.n	8001af8 <__aeabi_dmul+0x4e8>
 8001af6:	e684      	b.n	8001802 <__aeabi_dmul+0x1f2>
 8001af8:	2300      	movs	r3, #0
 8001afa:	4699      	mov	r9, r3
 8001afc:	0023      	movs	r3, r4
 8001afe:	3808      	subs	r0, #8
 8001b00:	4083      	lsls	r3, r0
 8001b02:	469a      	mov	sl, r3
 8001b04:	e68e      	b.n	8001824 <__aeabi_dmul+0x214>
 8001b06:	f7fe fcb3 	bl	8000470 <__clzsi2>
 8001b0a:	0002      	movs	r2, r0
 8001b0c:	0003      	movs	r3, r0
 8001b0e:	3215      	adds	r2, #21
 8001b10:	3320      	adds	r3, #32
 8001b12:	2a1c      	cmp	r2, #28
 8001b14:	dc00      	bgt.n	8001b18 <__aeabi_dmul+0x508>
 8001b16:	e64e      	b.n	80017b6 <__aeabi_dmul+0x1a6>
 8001b18:	0002      	movs	r2, r0
 8001b1a:	0034      	movs	r4, r6
 8001b1c:	3a08      	subs	r2, #8
 8001b1e:	2000      	movs	r0, #0
 8001b20:	4094      	lsls	r4, r2
 8001b22:	e652      	b.n	80017ca <__aeabi_dmul+0x1ba>
 8001b24:	9301      	str	r3, [sp, #4]
 8001b26:	e604      	b.n	8001732 <__aeabi_dmul+0x122>
 8001b28:	4b1c      	ldr	r3, [pc, #112]	@ (8001b9c <__aeabi_dmul+0x58c>)
 8001b2a:	0021      	movs	r1, r4
 8001b2c:	469c      	mov	ip, r3
 8001b2e:	0003      	movs	r3, r0
 8001b30:	9d01      	ldr	r5, [sp, #4]
 8001b32:	40d3      	lsrs	r3, r2
 8001b34:	4465      	add	r5, ip
 8001b36:	40a9      	lsls	r1, r5
 8001b38:	4319      	orrs	r1, r3
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	40ab      	lsls	r3, r5
 8001b3e:	1e58      	subs	r0, r3, #1
 8001b40:	4183      	sbcs	r3, r0
 8001b42:	4319      	orrs	r1, r3
 8001b44:	0008      	movs	r0, r1
 8001b46:	40d4      	lsrs	r4, r2
 8001b48:	074b      	lsls	r3, r1, #29
 8001b4a:	d009      	beq.n	8001b60 <__aeabi_dmul+0x550>
 8001b4c:	230f      	movs	r3, #15
 8001b4e:	400b      	ands	r3, r1
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d005      	beq.n	8001b60 <__aeabi_dmul+0x550>
 8001b54:	1d0b      	adds	r3, r1, #4
 8001b56:	428b      	cmp	r3, r1
 8001b58:	4180      	sbcs	r0, r0
 8001b5a:	4240      	negs	r0, r0
 8001b5c:	1824      	adds	r4, r4, r0
 8001b5e:	0018      	movs	r0, r3
 8001b60:	0223      	lsls	r3, r4, #8
 8001b62:	d400      	bmi.n	8001b66 <__aeabi_dmul+0x556>
 8001b64:	e6d6      	b.n	8001914 <__aeabi_dmul+0x304>
 8001b66:	2301      	movs	r3, #1
 8001b68:	2400      	movs	r4, #0
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	e5a6      	b.n	80016bc <__aeabi_dmul+0xac>
 8001b6e:	290f      	cmp	r1, #15
 8001b70:	d1aa      	bne.n	8001ac8 <__aeabi_dmul+0x4b8>
 8001b72:	2380      	movs	r3, #128	@ 0x80
 8001b74:	4652      	mov	r2, sl
 8001b76:	031b      	lsls	r3, r3, #12
 8001b78:	421a      	tst	r2, r3
 8001b7a:	d0a9      	beq.n	8001ad0 <__aeabi_dmul+0x4c0>
 8001b7c:	421c      	tst	r4, r3
 8001b7e:	d1a7      	bne.n	8001ad0 <__aeabi_dmul+0x4c0>
 8001b80:	431c      	orrs	r4, r3
 8001b82:	9b00      	ldr	r3, [sp, #0]
 8001b84:	0002      	movs	r2, r0
 8001b86:	469b      	mov	fp, r3
 8001b88:	4b03      	ldr	r3, [pc, #12]	@ (8001b98 <__aeabi_dmul+0x588>)
 8001b8a:	e597      	b.n	80016bc <__aeabi_dmul+0xac>
 8001b8c:	2400      	movs	r4, #0
 8001b8e:	e6c1      	b.n	8001914 <__aeabi_dmul+0x304>
 8001b90:	2400      	movs	r4, #0
 8001b92:	4b01      	ldr	r3, [pc, #4]	@ (8001b98 <__aeabi_dmul+0x588>)
 8001b94:	0022      	movs	r2, r4
 8001b96:	e591      	b.n	80016bc <__aeabi_dmul+0xac>
 8001b98:	000007ff 	.word	0x000007ff
 8001b9c:	0000041e 	.word	0x0000041e

08001ba0 <__aeabi_dsub>:
 8001ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ba2:	464e      	mov	r6, r9
 8001ba4:	4645      	mov	r5, r8
 8001ba6:	46de      	mov	lr, fp
 8001ba8:	4657      	mov	r7, sl
 8001baa:	b5e0      	push	{r5, r6, r7, lr}
 8001bac:	b085      	sub	sp, #20
 8001bae:	9000      	str	r0, [sp, #0]
 8001bb0:	9101      	str	r1, [sp, #4]
 8001bb2:	030c      	lsls	r4, r1, #12
 8001bb4:	004f      	lsls	r7, r1, #1
 8001bb6:	0fce      	lsrs	r6, r1, #31
 8001bb8:	0a61      	lsrs	r1, r4, #9
 8001bba:	9c00      	ldr	r4, [sp, #0]
 8001bbc:	46b0      	mov	r8, r6
 8001bbe:	0f64      	lsrs	r4, r4, #29
 8001bc0:	430c      	orrs	r4, r1
 8001bc2:	9900      	ldr	r1, [sp, #0]
 8001bc4:	0d7f      	lsrs	r7, r7, #21
 8001bc6:	00c8      	lsls	r0, r1, #3
 8001bc8:	0011      	movs	r1, r2
 8001bca:	001a      	movs	r2, r3
 8001bcc:	031b      	lsls	r3, r3, #12
 8001bce:	469c      	mov	ip, r3
 8001bd0:	9100      	str	r1, [sp, #0]
 8001bd2:	9201      	str	r2, [sp, #4]
 8001bd4:	0051      	lsls	r1, r2, #1
 8001bd6:	0d4b      	lsrs	r3, r1, #21
 8001bd8:	4699      	mov	r9, r3
 8001bda:	9b01      	ldr	r3, [sp, #4]
 8001bdc:	9d00      	ldr	r5, [sp, #0]
 8001bde:	0fd9      	lsrs	r1, r3, #31
 8001be0:	4663      	mov	r3, ip
 8001be2:	0f6a      	lsrs	r2, r5, #29
 8001be4:	0a5b      	lsrs	r3, r3, #9
 8001be6:	4313      	orrs	r3, r2
 8001be8:	00ea      	lsls	r2, r5, #3
 8001bea:	4694      	mov	ip, r2
 8001bec:	4693      	mov	fp, r2
 8001bee:	4ac1      	ldr	r2, [pc, #772]	@ (8001ef4 <__aeabi_dsub+0x354>)
 8001bf0:	9003      	str	r0, [sp, #12]
 8001bf2:	9302      	str	r3, [sp, #8]
 8001bf4:	4591      	cmp	r9, r2
 8001bf6:	d100      	bne.n	8001bfa <__aeabi_dsub+0x5a>
 8001bf8:	e0cd      	b.n	8001d96 <__aeabi_dsub+0x1f6>
 8001bfa:	2501      	movs	r5, #1
 8001bfc:	4069      	eors	r1, r5
 8001bfe:	464d      	mov	r5, r9
 8001c00:	1b7d      	subs	r5, r7, r5
 8001c02:	46aa      	mov	sl, r5
 8001c04:	428e      	cmp	r6, r1
 8001c06:	d100      	bne.n	8001c0a <__aeabi_dsub+0x6a>
 8001c08:	e080      	b.n	8001d0c <__aeabi_dsub+0x16c>
 8001c0a:	2d00      	cmp	r5, #0
 8001c0c:	dc00      	bgt.n	8001c10 <__aeabi_dsub+0x70>
 8001c0e:	e335      	b.n	800227c <__aeabi_dsub+0x6dc>
 8001c10:	4649      	mov	r1, r9
 8001c12:	2900      	cmp	r1, #0
 8001c14:	d100      	bne.n	8001c18 <__aeabi_dsub+0x78>
 8001c16:	e0df      	b.n	8001dd8 <__aeabi_dsub+0x238>
 8001c18:	4297      	cmp	r7, r2
 8001c1a:	d100      	bne.n	8001c1e <__aeabi_dsub+0x7e>
 8001c1c:	e194      	b.n	8001f48 <__aeabi_dsub+0x3a8>
 8001c1e:	4652      	mov	r2, sl
 8001c20:	2501      	movs	r5, #1
 8001c22:	2a38      	cmp	r2, #56	@ 0x38
 8001c24:	dc19      	bgt.n	8001c5a <__aeabi_dsub+0xba>
 8001c26:	2280      	movs	r2, #128	@ 0x80
 8001c28:	9b02      	ldr	r3, [sp, #8]
 8001c2a:	0412      	lsls	r2, r2, #16
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	9302      	str	r3, [sp, #8]
 8001c30:	4652      	mov	r2, sl
 8001c32:	2a1f      	cmp	r2, #31
 8001c34:	dd00      	ble.n	8001c38 <__aeabi_dsub+0x98>
 8001c36:	e1e3      	b.n	8002000 <__aeabi_dsub+0x460>
 8001c38:	4653      	mov	r3, sl
 8001c3a:	2220      	movs	r2, #32
 8001c3c:	4661      	mov	r1, ip
 8001c3e:	9d02      	ldr	r5, [sp, #8]
 8001c40:	1ad2      	subs	r2, r2, r3
 8001c42:	4095      	lsls	r5, r2
 8001c44:	40d9      	lsrs	r1, r3
 8001c46:	430d      	orrs	r5, r1
 8001c48:	4661      	mov	r1, ip
 8001c4a:	4091      	lsls	r1, r2
 8001c4c:	000a      	movs	r2, r1
 8001c4e:	1e51      	subs	r1, r2, #1
 8001c50:	418a      	sbcs	r2, r1
 8001c52:	4315      	orrs	r5, r2
 8001c54:	9a02      	ldr	r2, [sp, #8]
 8001c56:	40da      	lsrs	r2, r3
 8001c58:	1aa4      	subs	r4, r4, r2
 8001c5a:	1b45      	subs	r5, r0, r5
 8001c5c:	42a8      	cmp	r0, r5
 8001c5e:	4180      	sbcs	r0, r0
 8001c60:	4240      	negs	r0, r0
 8001c62:	1a24      	subs	r4, r4, r0
 8001c64:	0223      	lsls	r3, r4, #8
 8001c66:	d400      	bmi.n	8001c6a <__aeabi_dsub+0xca>
 8001c68:	e13d      	b.n	8001ee6 <__aeabi_dsub+0x346>
 8001c6a:	0264      	lsls	r4, r4, #9
 8001c6c:	0a64      	lsrs	r4, r4, #9
 8001c6e:	2c00      	cmp	r4, #0
 8001c70:	d100      	bne.n	8001c74 <__aeabi_dsub+0xd4>
 8001c72:	e147      	b.n	8001f04 <__aeabi_dsub+0x364>
 8001c74:	0020      	movs	r0, r4
 8001c76:	f7fe fbfb 	bl	8000470 <__clzsi2>
 8001c7a:	0003      	movs	r3, r0
 8001c7c:	3b08      	subs	r3, #8
 8001c7e:	2120      	movs	r1, #32
 8001c80:	0028      	movs	r0, r5
 8001c82:	1aca      	subs	r2, r1, r3
 8001c84:	40d0      	lsrs	r0, r2
 8001c86:	409c      	lsls	r4, r3
 8001c88:	0002      	movs	r2, r0
 8001c8a:	409d      	lsls	r5, r3
 8001c8c:	4322      	orrs	r2, r4
 8001c8e:	429f      	cmp	r7, r3
 8001c90:	dd00      	ble.n	8001c94 <__aeabi_dsub+0xf4>
 8001c92:	e177      	b.n	8001f84 <__aeabi_dsub+0x3e4>
 8001c94:	1bd8      	subs	r0, r3, r7
 8001c96:	3001      	adds	r0, #1
 8001c98:	1a09      	subs	r1, r1, r0
 8001c9a:	002c      	movs	r4, r5
 8001c9c:	408d      	lsls	r5, r1
 8001c9e:	40c4      	lsrs	r4, r0
 8001ca0:	1e6b      	subs	r3, r5, #1
 8001ca2:	419d      	sbcs	r5, r3
 8001ca4:	0013      	movs	r3, r2
 8001ca6:	40c2      	lsrs	r2, r0
 8001ca8:	408b      	lsls	r3, r1
 8001caa:	4325      	orrs	r5, r4
 8001cac:	2700      	movs	r7, #0
 8001cae:	0014      	movs	r4, r2
 8001cb0:	431d      	orrs	r5, r3
 8001cb2:	076b      	lsls	r3, r5, #29
 8001cb4:	d009      	beq.n	8001cca <__aeabi_dsub+0x12a>
 8001cb6:	230f      	movs	r3, #15
 8001cb8:	402b      	ands	r3, r5
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	d005      	beq.n	8001cca <__aeabi_dsub+0x12a>
 8001cbe:	1d2b      	adds	r3, r5, #4
 8001cc0:	42ab      	cmp	r3, r5
 8001cc2:	41ad      	sbcs	r5, r5
 8001cc4:	426d      	negs	r5, r5
 8001cc6:	1964      	adds	r4, r4, r5
 8001cc8:	001d      	movs	r5, r3
 8001cca:	0223      	lsls	r3, r4, #8
 8001ccc:	d400      	bmi.n	8001cd0 <__aeabi_dsub+0x130>
 8001cce:	e140      	b.n	8001f52 <__aeabi_dsub+0x3b2>
 8001cd0:	4a88      	ldr	r2, [pc, #544]	@ (8001ef4 <__aeabi_dsub+0x354>)
 8001cd2:	3701      	adds	r7, #1
 8001cd4:	4297      	cmp	r7, r2
 8001cd6:	d100      	bne.n	8001cda <__aeabi_dsub+0x13a>
 8001cd8:	e101      	b.n	8001ede <__aeabi_dsub+0x33e>
 8001cda:	2601      	movs	r6, #1
 8001cdc:	4643      	mov	r3, r8
 8001cde:	4986      	ldr	r1, [pc, #536]	@ (8001ef8 <__aeabi_dsub+0x358>)
 8001ce0:	08ed      	lsrs	r5, r5, #3
 8001ce2:	4021      	ands	r1, r4
 8001ce4:	074a      	lsls	r2, r1, #29
 8001ce6:	432a      	orrs	r2, r5
 8001ce8:	057c      	lsls	r4, r7, #21
 8001cea:	024d      	lsls	r5, r1, #9
 8001cec:	0b2d      	lsrs	r5, r5, #12
 8001cee:	0d64      	lsrs	r4, r4, #21
 8001cf0:	401e      	ands	r6, r3
 8001cf2:	0524      	lsls	r4, r4, #20
 8001cf4:	432c      	orrs	r4, r5
 8001cf6:	07f6      	lsls	r6, r6, #31
 8001cf8:	4334      	orrs	r4, r6
 8001cfa:	0010      	movs	r0, r2
 8001cfc:	0021      	movs	r1, r4
 8001cfe:	b005      	add	sp, #20
 8001d00:	bcf0      	pop	{r4, r5, r6, r7}
 8001d02:	46bb      	mov	fp, r7
 8001d04:	46b2      	mov	sl, r6
 8001d06:	46a9      	mov	r9, r5
 8001d08:	46a0      	mov	r8, r4
 8001d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d0c:	2d00      	cmp	r5, #0
 8001d0e:	dc00      	bgt.n	8001d12 <__aeabi_dsub+0x172>
 8001d10:	e2d0      	b.n	80022b4 <__aeabi_dsub+0x714>
 8001d12:	4649      	mov	r1, r9
 8001d14:	2900      	cmp	r1, #0
 8001d16:	d000      	beq.n	8001d1a <__aeabi_dsub+0x17a>
 8001d18:	e0d4      	b.n	8001ec4 <__aeabi_dsub+0x324>
 8001d1a:	4661      	mov	r1, ip
 8001d1c:	9b02      	ldr	r3, [sp, #8]
 8001d1e:	4319      	orrs	r1, r3
 8001d20:	d100      	bne.n	8001d24 <__aeabi_dsub+0x184>
 8001d22:	e12b      	b.n	8001f7c <__aeabi_dsub+0x3dc>
 8001d24:	1e69      	subs	r1, r5, #1
 8001d26:	2d01      	cmp	r5, #1
 8001d28:	d100      	bne.n	8001d2c <__aeabi_dsub+0x18c>
 8001d2a:	e1d9      	b.n	80020e0 <__aeabi_dsub+0x540>
 8001d2c:	4295      	cmp	r5, r2
 8001d2e:	d100      	bne.n	8001d32 <__aeabi_dsub+0x192>
 8001d30:	e10a      	b.n	8001f48 <__aeabi_dsub+0x3a8>
 8001d32:	2501      	movs	r5, #1
 8001d34:	2938      	cmp	r1, #56	@ 0x38
 8001d36:	dc17      	bgt.n	8001d68 <__aeabi_dsub+0x1c8>
 8001d38:	468a      	mov	sl, r1
 8001d3a:	4653      	mov	r3, sl
 8001d3c:	2b1f      	cmp	r3, #31
 8001d3e:	dd00      	ble.n	8001d42 <__aeabi_dsub+0x1a2>
 8001d40:	e1e7      	b.n	8002112 <__aeabi_dsub+0x572>
 8001d42:	2220      	movs	r2, #32
 8001d44:	1ad2      	subs	r2, r2, r3
 8001d46:	9b02      	ldr	r3, [sp, #8]
 8001d48:	4661      	mov	r1, ip
 8001d4a:	4093      	lsls	r3, r2
 8001d4c:	001d      	movs	r5, r3
 8001d4e:	4653      	mov	r3, sl
 8001d50:	40d9      	lsrs	r1, r3
 8001d52:	4663      	mov	r3, ip
 8001d54:	4093      	lsls	r3, r2
 8001d56:	001a      	movs	r2, r3
 8001d58:	430d      	orrs	r5, r1
 8001d5a:	1e51      	subs	r1, r2, #1
 8001d5c:	418a      	sbcs	r2, r1
 8001d5e:	4653      	mov	r3, sl
 8001d60:	4315      	orrs	r5, r2
 8001d62:	9a02      	ldr	r2, [sp, #8]
 8001d64:	40da      	lsrs	r2, r3
 8001d66:	18a4      	adds	r4, r4, r2
 8001d68:	182d      	adds	r5, r5, r0
 8001d6a:	4285      	cmp	r5, r0
 8001d6c:	4180      	sbcs	r0, r0
 8001d6e:	4240      	negs	r0, r0
 8001d70:	1824      	adds	r4, r4, r0
 8001d72:	0223      	lsls	r3, r4, #8
 8001d74:	d400      	bmi.n	8001d78 <__aeabi_dsub+0x1d8>
 8001d76:	e0b6      	b.n	8001ee6 <__aeabi_dsub+0x346>
 8001d78:	4b5e      	ldr	r3, [pc, #376]	@ (8001ef4 <__aeabi_dsub+0x354>)
 8001d7a:	3701      	adds	r7, #1
 8001d7c:	429f      	cmp	r7, r3
 8001d7e:	d100      	bne.n	8001d82 <__aeabi_dsub+0x1e2>
 8001d80:	e0ad      	b.n	8001ede <__aeabi_dsub+0x33e>
 8001d82:	2101      	movs	r1, #1
 8001d84:	4b5c      	ldr	r3, [pc, #368]	@ (8001ef8 <__aeabi_dsub+0x358>)
 8001d86:	086a      	lsrs	r2, r5, #1
 8001d88:	401c      	ands	r4, r3
 8001d8a:	4029      	ands	r1, r5
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	07e5      	lsls	r5, r4, #31
 8001d90:	4315      	orrs	r5, r2
 8001d92:	0864      	lsrs	r4, r4, #1
 8001d94:	e78d      	b.n	8001cb2 <__aeabi_dsub+0x112>
 8001d96:	4a59      	ldr	r2, [pc, #356]	@ (8001efc <__aeabi_dsub+0x35c>)
 8001d98:	9b02      	ldr	r3, [sp, #8]
 8001d9a:	4692      	mov	sl, r2
 8001d9c:	4662      	mov	r2, ip
 8001d9e:	44ba      	add	sl, r7
 8001da0:	431a      	orrs	r2, r3
 8001da2:	d02c      	beq.n	8001dfe <__aeabi_dsub+0x25e>
 8001da4:	428e      	cmp	r6, r1
 8001da6:	d02e      	beq.n	8001e06 <__aeabi_dsub+0x266>
 8001da8:	4652      	mov	r2, sl
 8001daa:	2a00      	cmp	r2, #0
 8001dac:	d060      	beq.n	8001e70 <__aeabi_dsub+0x2d0>
 8001dae:	2f00      	cmp	r7, #0
 8001db0:	d100      	bne.n	8001db4 <__aeabi_dsub+0x214>
 8001db2:	e0db      	b.n	8001f6c <__aeabi_dsub+0x3cc>
 8001db4:	4663      	mov	r3, ip
 8001db6:	000e      	movs	r6, r1
 8001db8:	9c02      	ldr	r4, [sp, #8]
 8001dba:	08d8      	lsrs	r0, r3, #3
 8001dbc:	0762      	lsls	r2, r4, #29
 8001dbe:	4302      	orrs	r2, r0
 8001dc0:	08e4      	lsrs	r4, r4, #3
 8001dc2:	0013      	movs	r3, r2
 8001dc4:	4323      	orrs	r3, r4
 8001dc6:	d100      	bne.n	8001dca <__aeabi_dsub+0x22a>
 8001dc8:	e254      	b.n	8002274 <__aeabi_dsub+0x6d4>
 8001dca:	2580      	movs	r5, #128	@ 0x80
 8001dcc:	032d      	lsls	r5, r5, #12
 8001dce:	4325      	orrs	r5, r4
 8001dd0:	032d      	lsls	r5, r5, #12
 8001dd2:	4c48      	ldr	r4, [pc, #288]	@ (8001ef4 <__aeabi_dsub+0x354>)
 8001dd4:	0b2d      	lsrs	r5, r5, #12
 8001dd6:	e78c      	b.n	8001cf2 <__aeabi_dsub+0x152>
 8001dd8:	4661      	mov	r1, ip
 8001dda:	9b02      	ldr	r3, [sp, #8]
 8001ddc:	4319      	orrs	r1, r3
 8001dde:	d100      	bne.n	8001de2 <__aeabi_dsub+0x242>
 8001de0:	e0cc      	b.n	8001f7c <__aeabi_dsub+0x3dc>
 8001de2:	0029      	movs	r1, r5
 8001de4:	3901      	subs	r1, #1
 8001de6:	2d01      	cmp	r5, #1
 8001de8:	d100      	bne.n	8001dec <__aeabi_dsub+0x24c>
 8001dea:	e188      	b.n	80020fe <__aeabi_dsub+0x55e>
 8001dec:	4295      	cmp	r5, r2
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x252>
 8001df0:	e0aa      	b.n	8001f48 <__aeabi_dsub+0x3a8>
 8001df2:	2501      	movs	r5, #1
 8001df4:	2938      	cmp	r1, #56	@ 0x38
 8001df6:	dd00      	ble.n	8001dfa <__aeabi_dsub+0x25a>
 8001df8:	e72f      	b.n	8001c5a <__aeabi_dsub+0xba>
 8001dfa:	468a      	mov	sl, r1
 8001dfc:	e718      	b.n	8001c30 <__aeabi_dsub+0x90>
 8001dfe:	2201      	movs	r2, #1
 8001e00:	4051      	eors	r1, r2
 8001e02:	428e      	cmp	r6, r1
 8001e04:	d1d0      	bne.n	8001da8 <__aeabi_dsub+0x208>
 8001e06:	4653      	mov	r3, sl
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d100      	bne.n	8001e0e <__aeabi_dsub+0x26e>
 8001e0c:	e0be      	b.n	8001f8c <__aeabi_dsub+0x3ec>
 8001e0e:	2f00      	cmp	r7, #0
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x274>
 8001e12:	e138      	b.n	8002086 <__aeabi_dsub+0x4e6>
 8001e14:	46ca      	mov	sl, r9
 8001e16:	0022      	movs	r2, r4
 8001e18:	4302      	orrs	r2, r0
 8001e1a:	d100      	bne.n	8001e1e <__aeabi_dsub+0x27e>
 8001e1c:	e1e2      	b.n	80021e4 <__aeabi_dsub+0x644>
 8001e1e:	4653      	mov	r3, sl
 8001e20:	1e59      	subs	r1, r3, #1
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d100      	bne.n	8001e28 <__aeabi_dsub+0x288>
 8001e26:	e20d      	b.n	8002244 <__aeabi_dsub+0x6a4>
 8001e28:	4a32      	ldr	r2, [pc, #200]	@ (8001ef4 <__aeabi_dsub+0x354>)
 8001e2a:	4592      	cmp	sl, r2
 8001e2c:	d100      	bne.n	8001e30 <__aeabi_dsub+0x290>
 8001e2e:	e1d2      	b.n	80021d6 <__aeabi_dsub+0x636>
 8001e30:	2701      	movs	r7, #1
 8001e32:	2938      	cmp	r1, #56	@ 0x38
 8001e34:	dc13      	bgt.n	8001e5e <__aeabi_dsub+0x2be>
 8001e36:	291f      	cmp	r1, #31
 8001e38:	dd00      	ble.n	8001e3c <__aeabi_dsub+0x29c>
 8001e3a:	e1ee      	b.n	800221a <__aeabi_dsub+0x67a>
 8001e3c:	2220      	movs	r2, #32
 8001e3e:	9b02      	ldr	r3, [sp, #8]
 8001e40:	1a52      	subs	r2, r2, r1
 8001e42:	0025      	movs	r5, r4
 8001e44:	0007      	movs	r7, r0
 8001e46:	469a      	mov	sl, r3
 8001e48:	40cc      	lsrs	r4, r1
 8001e4a:	4090      	lsls	r0, r2
 8001e4c:	4095      	lsls	r5, r2
 8001e4e:	40cf      	lsrs	r7, r1
 8001e50:	44a2      	add	sl, r4
 8001e52:	1e42      	subs	r2, r0, #1
 8001e54:	4190      	sbcs	r0, r2
 8001e56:	4653      	mov	r3, sl
 8001e58:	432f      	orrs	r7, r5
 8001e5a:	4307      	orrs	r7, r0
 8001e5c:	9302      	str	r3, [sp, #8]
 8001e5e:	003d      	movs	r5, r7
 8001e60:	4465      	add	r5, ip
 8001e62:	4565      	cmp	r5, ip
 8001e64:	4192      	sbcs	r2, r2
 8001e66:	9b02      	ldr	r3, [sp, #8]
 8001e68:	4252      	negs	r2, r2
 8001e6a:	464f      	mov	r7, r9
 8001e6c:	18d4      	adds	r4, r2, r3
 8001e6e:	e780      	b.n	8001d72 <__aeabi_dsub+0x1d2>
 8001e70:	4a23      	ldr	r2, [pc, #140]	@ (8001f00 <__aeabi_dsub+0x360>)
 8001e72:	1c7d      	adds	r5, r7, #1
 8001e74:	4215      	tst	r5, r2
 8001e76:	d000      	beq.n	8001e7a <__aeabi_dsub+0x2da>
 8001e78:	e0aa      	b.n	8001fd0 <__aeabi_dsub+0x430>
 8001e7a:	4662      	mov	r2, ip
 8001e7c:	0025      	movs	r5, r4
 8001e7e:	9b02      	ldr	r3, [sp, #8]
 8001e80:	4305      	orrs	r5, r0
 8001e82:	431a      	orrs	r2, r3
 8001e84:	2f00      	cmp	r7, #0
 8001e86:	d000      	beq.n	8001e8a <__aeabi_dsub+0x2ea>
 8001e88:	e0f5      	b.n	8002076 <__aeabi_dsub+0x4d6>
 8001e8a:	2d00      	cmp	r5, #0
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dsub+0x2f0>
 8001e8e:	e16b      	b.n	8002168 <__aeabi_dsub+0x5c8>
 8001e90:	2a00      	cmp	r2, #0
 8001e92:	d100      	bne.n	8001e96 <__aeabi_dsub+0x2f6>
 8001e94:	e152      	b.n	800213c <__aeabi_dsub+0x59c>
 8001e96:	4663      	mov	r3, ip
 8001e98:	1ac5      	subs	r5, r0, r3
 8001e9a:	9b02      	ldr	r3, [sp, #8]
 8001e9c:	1ae2      	subs	r2, r4, r3
 8001e9e:	42a8      	cmp	r0, r5
 8001ea0:	419b      	sbcs	r3, r3
 8001ea2:	425b      	negs	r3, r3
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	021a      	lsls	r2, r3, #8
 8001ea8:	d400      	bmi.n	8001eac <__aeabi_dsub+0x30c>
 8001eaa:	e1d5      	b.n	8002258 <__aeabi_dsub+0x6b8>
 8001eac:	4663      	mov	r3, ip
 8001eae:	1a1d      	subs	r5, r3, r0
 8001eb0:	45ac      	cmp	ip, r5
 8001eb2:	4192      	sbcs	r2, r2
 8001eb4:	2601      	movs	r6, #1
 8001eb6:	9b02      	ldr	r3, [sp, #8]
 8001eb8:	4252      	negs	r2, r2
 8001eba:	1b1c      	subs	r4, r3, r4
 8001ebc:	4688      	mov	r8, r1
 8001ebe:	1aa4      	subs	r4, r4, r2
 8001ec0:	400e      	ands	r6, r1
 8001ec2:	e6f6      	b.n	8001cb2 <__aeabi_dsub+0x112>
 8001ec4:	4297      	cmp	r7, r2
 8001ec6:	d03f      	beq.n	8001f48 <__aeabi_dsub+0x3a8>
 8001ec8:	4652      	mov	r2, sl
 8001eca:	2501      	movs	r5, #1
 8001ecc:	2a38      	cmp	r2, #56	@ 0x38
 8001ece:	dd00      	ble.n	8001ed2 <__aeabi_dsub+0x332>
 8001ed0:	e74a      	b.n	8001d68 <__aeabi_dsub+0x1c8>
 8001ed2:	2280      	movs	r2, #128	@ 0x80
 8001ed4:	9b02      	ldr	r3, [sp, #8]
 8001ed6:	0412      	lsls	r2, r2, #16
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	9302      	str	r3, [sp, #8]
 8001edc:	e72d      	b.n	8001d3a <__aeabi_dsub+0x19a>
 8001ede:	003c      	movs	r4, r7
 8001ee0:	2500      	movs	r5, #0
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	e705      	b.n	8001cf2 <__aeabi_dsub+0x152>
 8001ee6:	2307      	movs	r3, #7
 8001ee8:	402b      	ands	r3, r5
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d000      	beq.n	8001ef0 <__aeabi_dsub+0x350>
 8001eee:	e6e2      	b.n	8001cb6 <__aeabi_dsub+0x116>
 8001ef0:	e06b      	b.n	8001fca <__aeabi_dsub+0x42a>
 8001ef2:	46c0      	nop			@ (mov r8, r8)
 8001ef4:	000007ff 	.word	0x000007ff
 8001ef8:	ff7fffff 	.word	0xff7fffff
 8001efc:	fffff801 	.word	0xfffff801
 8001f00:	000007fe 	.word	0x000007fe
 8001f04:	0028      	movs	r0, r5
 8001f06:	f7fe fab3 	bl	8000470 <__clzsi2>
 8001f0a:	0003      	movs	r3, r0
 8001f0c:	3318      	adds	r3, #24
 8001f0e:	2b1f      	cmp	r3, #31
 8001f10:	dc00      	bgt.n	8001f14 <__aeabi_dsub+0x374>
 8001f12:	e6b4      	b.n	8001c7e <__aeabi_dsub+0xde>
 8001f14:	002a      	movs	r2, r5
 8001f16:	3808      	subs	r0, #8
 8001f18:	4082      	lsls	r2, r0
 8001f1a:	429f      	cmp	r7, r3
 8001f1c:	dd00      	ble.n	8001f20 <__aeabi_dsub+0x380>
 8001f1e:	e0b9      	b.n	8002094 <__aeabi_dsub+0x4f4>
 8001f20:	1bdb      	subs	r3, r3, r7
 8001f22:	1c58      	adds	r0, r3, #1
 8001f24:	281f      	cmp	r0, #31
 8001f26:	dc00      	bgt.n	8001f2a <__aeabi_dsub+0x38a>
 8001f28:	e1a0      	b.n	800226c <__aeabi_dsub+0x6cc>
 8001f2a:	0015      	movs	r5, r2
 8001f2c:	3b1f      	subs	r3, #31
 8001f2e:	40dd      	lsrs	r5, r3
 8001f30:	2820      	cmp	r0, #32
 8001f32:	d005      	beq.n	8001f40 <__aeabi_dsub+0x3a0>
 8001f34:	2340      	movs	r3, #64	@ 0x40
 8001f36:	1a1b      	subs	r3, r3, r0
 8001f38:	409a      	lsls	r2, r3
 8001f3a:	1e53      	subs	r3, r2, #1
 8001f3c:	419a      	sbcs	r2, r3
 8001f3e:	4315      	orrs	r5, r2
 8001f40:	2307      	movs	r3, #7
 8001f42:	2700      	movs	r7, #0
 8001f44:	402b      	ands	r3, r5
 8001f46:	e7d0      	b.n	8001eea <__aeabi_dsub+0x34a>
 8001f48:	08c0      	lsrs	r0, r0, #3
 8001f4a:	0762      	lsls	r2, r4, #29
 8001f4c:	4302      	orrs	r2, r0
 8001f4e:	08e4      	lsrs	r4, r4, #3
 8001f50:	e737      	b.n	8001dc2 <__aeabi_dsub+0x222>
 8001f52:	08ea      	lsrs	r2, r5, #3
 8001f54:	0763      	lsls	r3, r4, #29
 8001f56:	431a      	orrs	r2, r3
 8001f58:	4bd3      	ldr	r3, [pc, #844]	@ (80022a8 <__aeabi_dsub+0x708>)
 8001f5a:	08e4      	lsrs	r4, r4, #3
 8001f5c:	429f      	cmp	r7, r3
 8001f5e:	d100      	bne.n	8001f62 <__aeabi_dsub+0x3c2>
 8001f60:	e72f      	b.n	8001dc2 <__aeabi_dsub+0x222>
 8001f62:	0324      	lsls	r4, r4, #12
 8001f64:	0b25      	lsrs	r5, r4, #12
 8001f66:	057c      	lsls	r4, r7, #21
 8001f68:	0d64      	lsrs	r4, r4, #21
 8001f6a:	e6c2      	b.n	8001cf2 <__aeabi_dsub+0x152>
 8001f6c:	46ca      	mov	sl, r9
 8001f6e:	0022      	movs	r2, r4
 8001f70:	4302      	orrs	r2, r0
 8001f72:	d158      	bne.n	8002026 <__aeabi_dsub+0x486>
 8001f74:	4663      	mov	r3, ip
 8001f76:	000e      	movs	r6, r1
 8001f78:	9c02      	ldr	r4, [sp, #8]
 8001f7a:	9303      	str	r3, [sp, #12]
 8001f7c:	9b03      	ldr	r3, [sp, #12]
 8001f7e:	4657      	mov	r7, sl
 8001f80:	08da      	lsrs	r2, r3, #3
 8001f82:	e7e7      	b.n	8001f54 <__aeabi_dsub+0x3b4>
 8001f84:	4cc9      	ldr	r4, [pc, #804]	@ (80022ac <__aeabi_dsub+0x70c>)
 8001f86:	1aff      	subs	r7, r7, r3
 8001f88:	4014      	ands	r4, r2
 8001f8a:	e692      	b.n	8001cb2 <__aeabi_dsub+0x112>
 8001f8c:	4dc8      	ldr	r5, [pc, #800]	@ (80022b0 <__aeabi_dsub+0x710>)
 8001f8e:	1c7a      	adds	r2, r7, #1
 8001f90:	422a      	tst	r2, r5
 8001f92:	d000      	beq.n	8001f96 <__aeabi_dsub+0x3f6>
 8001f94:	e084      	b.n	80020a0 <__aeabi_dsub+0x500>
 8001f96:	0022      	movs	r2, r4
 8001f98:	4302      	orrs	r2, r0
 8001f9a:	2f00      	cmp	r7, #0
 8001f9c:	d000      	beq.n	8001fa0 <__aeabi_dsub+0x400>
 8001f9e:	e0ef      	b.n	8002180 <__aeabi_dsub+0x5e0>
 8001fa0:	2a00      	cmp	r2, #0
 8001fa2:	d100      	bne.n	8001fa6 <__aeabi_dsub+0x406>
 8001fa4:	e0e5      	b.n	8002172 <__aeabi_dsub+0x5d2>
 8001fa6:	4662      	mov	r2, ip
 8001fa8:	9902      	ldr	r1, [sp, #8]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_dsub+0x410>
 8001fae:	e0c5      	b.n	800213c <__aeabi_dsub+0x59c>
 8001fb0:	4663      	mov	r3, ip
 8001fb2:	18c5      	adds	r5, r0, r3
 8001fb4:	468c      	mov	ip, r1
 8001fb6:	4285      	cmp	r5, r0
 8001fb8:	4180      	sbcs	r0, r0
 8001fba:	4464      	add	r4, ip
 8001fbc:	4240      	negs	r0, r0
 8001fbe:	1824      	adds	r4, r4, r0
 8001fc0:	0223      	lsls	r3, r4, #8
 8001fc2:	d502      	bpl.n	8001fca <__aeabi_dsub+0x42a>
 8001fc4:	4bb9      	ldr	r3, [pc, #740]	@ (80022ac <__aeabi_dsub+0x70c>)
 8001fc6:	3701      	adds	r7, #1
 8001fc8:	401c      	ands	r4, r3
 8001fca:	46ba      	mov	sl, r7
 8001fcc:	9503      	str	r5, [sp, #12]
 8001fce:	e7d5      	b.n	8001f7c <__aeabi_dsub+0x3dc>
 8001fd0:	4662      	mov	r2, ip
 8001fd2:	1a85      	subs	r5, r0, r2
 8001fd4:	42a8      	cmp	r0, r5
 8001fd6:	4192      	sbcs	r2, r2
 8001fd8:	4252      	negs	r2, r2
 8001fda:	4691      	mov	r9, r2
 8001fdc:	9b02      	ldr	r3, [sp, #8]
 8001fde:	1ae3      	subs	r3, r4, r3
 8001fe0:	001a      	movs	r2, r3
 8001fe2:	464b      	mov	r3, r9
 8001fe4:	1ad2      	subs	r2, r2, r3
 8001fe6:	0013      	movs	r3, r2
 8001fe8:	4691      	mov	r9, r2
 8001fea:	021a      	lsls	r2, r3, #8
 8001fec:	d46c      	bmi.n	80020c8 <__aeabi_dsub+0x528>
 8001fee:	464a      	mov	r2, r9
 8001ff0:	464c      	mov	r4, r9
 8001ff2:	432a      	orrs	r2, r5
 8001ff4:	d000      	beq.n	8001ff8 <__aeabi_dsub+0x458>
 8001ff6:	e63a      	b.n	8001c6e <__aeabi_dsub+0xce>
 8001ff8:	2600      	movs	r6, #0
 8001ffa:	2400      	movs	r4, #0
 8001ffc:	2500      	movs	r5, #0
 8001ffe:	e678      	b.n	8001cf2 <__aeabi_dsub+0x152>
 8002000:	9902      	ldr	r1, [sp, #8]
 8002002:	4653      	mov	r3, sl
 8002004:	000d      	movs	r5, r1
 8002006:	3a20      	subs	r2, #32
 8002008:	40d5      	lsrs	r5, r2
 800200a:	2b20      	cmp	r3, #32
 800200c:	d006      	beq.n	800201c <__aeabi_dsub+0x47c>
 800200e:	2240      	movs	r2, #64	@ 0x40
 8002010:	1ad2      	subs	r2, r2, r3
 8002012:	000b      	movs	r3, r1
 8002014:	4093      	lsls	r3, r2
 8002016:	4662      	mov	r2, ip
 8002018:	431a      	orrs	r2, r3
 800201a:	4693      	mov	fp, r2
 800201c:	465b      	mov	r3, fp
 800201e:	1e5a      	subs	r2, r3, #1
 8002020:	4193      	sbcs	r3, r2
 8002022:	431d      	orrs	r5, r3
 8002024:	e619      	b.n	8001c5a <__aeabi_dsub+0xba>
 8002026:	4653      	mov	r3, sl
 8002028:	1e5a      	subs	r2, r3, #1
 800202a:	2b01      	cmp	r3, #1
 800202c:	d100      	bne.n	8002030 <__aeabi_dsub+0x490>
 800202e:	e0c6      	b.n	80021be <__aeabi_dsub+0x61e>
 8002030:	4e9d      	ldr	r6, [pc, #628]	@ (80022a8 <__aeabi_dsub+0x708>)
 8002032:	45b2      	cmp	sl, r6
 8002034:	d100      	bne.n	8002038 <__aeabi_dsub+0x498>
 8002036:	e6bd      	b.n	8001db4 <__aeabi_dsub+0x214>
 8002038:	4688      	mov	r8, r1
 800203a:	000e      	movs	r6, r1
 800203c:	2501      	movs	r5, #1
 800203e:	2a38      	cmp	r2, #56	@ 0x38
 8002040:	dc10      	bgt.n	8002064 <__aeabi_dsub+0x4c4>
 8002042:	2a1f      	cmp	r2, #31
 8002044:	dc7f      	bgt.n	8002146 <__aeabi_dsub+0x5a6>
 8002046:	2120      	movs	r1, #32
 8002048:	0025      	movs	r5, r4
 800204a:	1a89      	subs	r1, r1, r2
 800204c:	0007      	movs	r7, r0
 800204e:	4088      	lsls	r0, r1
 8002050:	408d      	lsls	r5, r1
 8002052:	40d7      	lsrs	r7, r2
 8002054:	40d4      	lsrs	r4, r2
 8002056:	1e41      	subs	r1, r0, #1
 8002058:	4188      	sbcs	r0, r1
 800205a:	9b02      	ldr	r3, [sp, #8]
 800205c:	433d      	orrs	r5, r7
 800205e:	1b1b      	subs	r3, r3, r4
 8002060:	4305      	orrs	r5, r0
 8002062:	9302      	str	r3, [sp, #8]
 8002064:	4662      	mov	r2, ip
 8002066:	1b55      	subs	r5, r2, r5
 8002068:	45ac      	cmp	ip, r5
 800206a:	4192      	sbcs	r2, r2
 800206c:	9b02      	ldr	r3, [sp, #8]
 800206e:	4252      	negs	r2, r2
 8002070:	464f      	mov	r7, r9
 8002072:	1a9c      	subs	r4, r3, r2
 8002074:	e5f6      	b.n	8001c64 <__aeabi_dsub+0xc4>
 8002076:	2d00      	cmp	r5, #0
 8002078:	d000      	beq.n	800207c <__aeabi_dsub+0x4dc>
 800207a:	e0b7      	b.n	80021ec <__aeabi_dsub+0x64c>
 800207c:	2a00      	cmp	r2, #0
 800207e:	d100      	bne.n	8002082 <__aeabi_dsub+0x4e2>
 8002080:	e0f0      	b.n	8002264 <__aeabi_dsub+0x6c4>
 8002082:	2601      	movs	r6, #1
 8002084:	400e      	ands	r6, r1
 8002086:	4663      	mov	r3, ip
 8002088:	9802      	ldr	r0, [sp, #8]
 800208a:	08d9      	lsrs	r1, r3, #3
 800208c:	0742      	lsls	r2, r0, #29
 800208e:	430a      	orrs	r2, r1
 8002090:	08c4      	lsrs	r4, r0, #3
 8002092:	e696      	b.n	8001dc2 <__aeabi_dsub+0x222>
 8002094:	4c85      	ldr	r4, [pc, #532]	@ (80022ac <__aeabi_dsub+0x70c>)
 8002096:	1aff      	subs	r7, r7, r3
 8002098:	4014      	ands	r4, r2
 800209a:	0762      	lsls	r2, r4, #29
 800209c:	08e4      	lsrs	r4, r4, #3
 800209e:	e760      	b.n	8001f62 <__aeabi_dsub+0x3c2>
 80020a0:	4981      	ldr	r1, [pc, #516]	@ (80022a8 <__aeabi_dsub+0x708>)
 80020a2:	428a      	cmp	r2, r1
 80020a4:	d100      	bne.n	80020a8 <__aeabi_dsub+0x508>
 80020a6:	e0c9      	b.n	800223c <__aeabi_dsub+0x69c>
 80020a8:	4663      	mov	r3, ip
 80020aa:	18c1      	adds	r1, r0, r3
 80020ac:	4281      	cmp	r1, r0
 80020ae:	4180      	sbcs	r0, r0
 80020b0:	9b02      	ldr	r3, [sp, #8]
 80020b2:	4240      	negs	r0, r0
 80020b4:	18e3      	adds	r3, r4, r3
 80020b6:	181b      	adds	r3, r3, r0
 80020b8:	07dd      	lsls	r5, r3, #31
 80020ba:	085c      	lsrs	r4, r3, #1
 80020bc:	2307      	movs	r3, #7
 80020be:	0849      	lsrs	r1, r1, #1
 80020c0:	430d      	orrs	r5, r1
 80020c2:	0017      	movs	r7, r2
 80020c4:	402b      	ands	r3, r5
 80020c6:	e710      	b.n	8001eea <__aeabi_dsub+0x34a>
 80020c8:	4663      	mov	r3, ip
 80020ca:	1a1d      	subs	r5, r3, r0
 80020cc:	45ac      	cmp	ip, r5
 80020ce:	4192      	sbcs	r2, r2
 80020d0:	2601      	movs	r6, #1
 80020d2:	9b02      	ldr	r3, [sp, #8]
 80020d4:	4252      	negs	r2, r2
 80020d6:	1b1c      	subs	r4, r3, r4
 80020d8:	4688      	mov	r8, r1
 80020da:	1aa4      	subs	r4, r4, r2
 80020dc:	400e      	ands	r6, r1
 80020de:	e5c6      	b.n	8001c6e <__aeabi_dsub+0xce>
 80020e0:	4663      	mov	r3, ip
 80020e2:	18c5      	adds	r5, r0, r3
 80020e4:	9b02      	ldr	r3, [sp, #8]
 80020e6:	4285      	cmp	r5, r0
 80020e8:	4180      	sbcs	r0, r0
 80020ea:	469c      	mov	ip, r3
 80020ec:	4240      	negs	r0, r0
 80020ee:	4464      	add	r4, ip
 80020f0:	1824      	adds	r4, r4, r0
 80020f2:	2701      	movs	r7, #1
 80020f4:	0223      	lsls	r3, r4, #8
 80020f6:	d400      	bmi.n	80020fa <__aeabi_dsub+0x55a>
 80020f8:	e6f5      	b.n	8001ee6 <__aeabi_dsub+0x346>
 80020fa:	2702      	movs	r7, #2
 80020fc:	e641      	b.n	8001d82 <__aeabi_dsub+0x1e2>
 80020fe:	4663      	mov	r3, ip
 8002100:	1ac5      	subs	r5, r0, r3
 8002102:	42a8      	cmp	r0, r5
 8002104:	4180      	sbcs	r0, r0
 8002106:	9b02      	ldr	r3, [sp, #8]
 8002108:	4240      	negs	r0, r0
 800210a:	1ae4      	subs	r4, r4, r3
 800210c:	2701      	movs	r7, #1
 800210e:	1a24      	subs	r4, r4, r0
 8002110:	e5a8      	b.n	8001c64 <__aeabi_dsub+0xc4>
 8002112:	9d02      	ldr	r5, [sp, #8]
 8002114:	4652      	mov	r2, sl
 8002116:	002b      	movs	r3, r5
 8002118:	3a20      	subs	r2, #32
 800211a:	40d3      	lsrs	r3, r2
 800211c:	0019      	movs	r1, r3
 800211e:	4653      	mov	r3, sl
 8002120:	2b20      	cmp	r3, #32
 8002122:	d006      	beq.n	8002132 <__aeabi_dsub+0x592>
 8002124:	2240      	movs	r2, #64	@ 0x40
 8002126:	1ad2      	subs	r2, r2, r3
 8002128:	002b      	movs	r3, r5
 800212a:	4093      	lsls	r3, r2
 800212c:	4662      	mov	r2, ip
 800212e:	431a      	orrs	r2, r3
 8002130:	4693      	mov	fp, r2
 8002132:	465d      	mov	r5, fp
 8002134:	1e6b      	subs	r3, r5, #1
 8002136:	419d      	sbcs	r5, r3
 8002138:	430d      	orrs	r5, r1
 800213a:	e615      	b.n	8001d68 <__aeabi_dsub+0x1c8>
 800213c:	0762      	lsls	r2, r4, #29
 800213e:	08c0      	lsrs	r0, r0, #3
 8002140:	4302      	orrs	r2, r0
 8002142:	08e4      	lsrs	r4, r4, #3
 8002144:	e70d      	b.n	8001f62 <__aeabi_dsub+0x3c2>
 8002146:	0011      	movs	r1, r2
 8002148:	0027      	movs	r7, r4
 800214a:	3920      	subs	r1, #32
 800214c:	40cf      	lsrs	r7, r1
 800214e:	2a20      	cmp	r2, #32
 8002150:	d005      	beq.n	800215e <__aeabi_dsub+0x5be>
 8002152:	2140      	movs	r1, #64	@ 0x40
 8002154:	1a8a      	subs	r2, r1, r2
 8002156:	4094      	lsls	r4, r2
 8002158:	0025      	movs	r5, r4
 800215a:	4305      	orrs	r5, r0
 800215c:	9503      	str	r5, [sp, #12]
 800215e:	9d03      	ldr	r5, [sp, #12]
 8002160:	1e6a      	subs	r2, r5, #1
 8002162:	4195      	sbcs	r5, r2
 8002164:	433d      	orrs	r5, r7
 8002166:	e77d      	b.n	8002064 <__aeabi_dsub+0x4c4>
 8002168:	2a00      	cmp	r2, #0
 800216a:	d100      	bne.n	800216e <__aeabi_dsub+0x5ce>
 800216c:	e744      	b.n	8001ff8 <__aeabi_dsub+0x458>
 800216e:	2601      	movs	r6, #1
 8002170:	400e      	ands	r6, r1
 8002172:	4663      	mov	r3, ip
 8002174:	08d9      	lsrs	r1, r3, #3
 8002176:	9b02      	ldr	r3, [sp, #8]
 8002178:	075a      	lsls	r2, r3, #29
 800217a:	430a      	orrs	r2, r1
 800217c:	08dc      	lsrs	r4, r3, #3
 800217e:	e6f0      	b.n	8001f62 <__aeabi_dsub+0x3c2>
 8002180:	2a00      	cmp	r2, #0
 8002182:	d028      	beq.n	80021d6 <__aeabi_dsub+0x636>
 8002184:	4662      	mov	r2, ip
 8002186:	9f02      	ldr	r7, [sp, #8]
 8002188:	08c0      	lsrs	r0, r0, #3
 800218a:	433a      	orrs	r2, r7
 800218c:	d100      	bne.n	8002190 <__aeabi_dsub+0x5f0>
 800218e:	e6dc      	b.n	8001f4a <__aeabi_dsub+0x3aa>
 8002190:	0762      	lsls	r2, r4, #29
 8002192:	4310      	orrs	r0, r2
 8002194:	2280      	movs	r2, #128	@ 0x80
 8002196:	08e4      	lsrs	r4, r4, #3
 8002198:	0312      	lsls	r2, r2, #12
 800219a:	4214      	tst	r4, r2
 800219c:	d009      	beq.n	80021b2 <__aeabi_dsub+0x612>
 800219e:	08fd      	lsrs	r5, r7, #3
 80021a0:	4215      	tst	r5, r2
 80021a2:	d106      	bne.n	80021b2 <__aeabi_dsub+0x612>
 80021a4:	4663      	mov	r3, ip
 80021a6:	2601      	movs	r6, #1
 80021a8:	002c      	movs	r4, r5
 80021aa:	08d8      	lsrs	r0, r3, #3
 80021ac:	077b      	lsls	r3, r7, #29
 80021ae:	4318      	orrs	r0, r3
 80021b0:	400e      	ands	r6, r1
 80021b2:	0f42      	lsrs	r2, r0, #29
 80021b4:	00c0      	lsls	r0, r0, #3
 80021b6:	08c0      	lsrs	r0, r0, #3
 80021b8:	0752      	lsls	r2, r2, #29
 80021ba:	4302      	orrs	r2, r0
 80021bc:	e601      	b.n	8001dc2 <__aeabi_dsub+0x222>
 80021be:	4663      	mov	r3, ip
 80021c0:	1a1d      	subs	r5, r3, r0
 80021c2:	45ac      	cmp	ip, r5
 80021c4:	4192      	sbcs	r2, r2
 80021c6:	9b02      	ldr	r3, [sp, #8]
 80021c8:	4252      	negs	r2, r2
 80021ca:	1b1c      	subs	r4, r3, r4
 80021cc:	000e      	movs	r6, r1
 80021ce:	4688      	mov	r8, r1
 80021d0:	2701      	movs	r7, #1
 80021d2:	1aa4      	subs	r4, r4, r2
 80021d4:	e546      	b.n	8001c64 <__aeabi_dsub+0xc4>
 80021d6:	4663      	mov	r3, ip
 80021d8:	08d9      	lsrs	r1, r3, #3
 80021da:	9b02      	ldr	r3, [sp, #8]
 80021dc:	075a      	lsls	r2, r3, #29
 80021de:	430a      	orrs	r2, r1
 80021e0:	08dc      	lsrs	r4, r3, #3
 80021e2:	e5ee      	b.n	8001dc2 <__aeabi_dsub+0x222>
 80021e4:	4663      	mov	r3, ip
 80021e6:	9c02      	ldr	r4, [sp, #8]
 80021e8:	9303      	str	r3, [sp, #12]
 80021ea:	e6c7      	b.n	8001f7c <__aeabi_dsub+0x3dc>
 80021ec:	08c0      	lsrs	r0, r0, #3
 80021ee:	2a00      	cmp	r2, #0
 80021f0:	d100      	bne.n	80021f4 <__aeabi_dsub+0x654>
 80021f2:	e6aa      	b.n	8001f4a <__aeabi_dsub+0x3aa>
 80021f4:	0762      	lsls	r2, r4, #29
 80021f6:	4310      	orrs	r0, r2
 80021f8:	2280      	movs	r2, #128	@ 0x80
 80021fa:	08e4      	lsrs	r4, r4, #3
 80021fc:	0312      	lsls	r2, r2, #12
 80021fe:	4214      	tst	r4, r2
 8002200:	d0d7      	beq.n	80021b2 <__aeabi_dsub+0x612>
 8002202:	9f02      	ldr	r7, [sp, #8]
 8002204:	08fd      	lsrs	r5, r7, #3
 8002206:	4215      	tst	r5, r2
 8002208:	d1d3      	bne.n	80021b2 <__aeabi_dsub+0x612>
 800220a:	4663      	mov	r3, ip
 800220c:	2601      	movs	r6, #1
 800220e:	08d8      	lsrs	r0, r3, #3
 8002210:	077b      	lsls	r3, r7, #29
 8002212:	002c      	movs	r4, r5
 8002214:	4318      	orrs	r0, r3
 8002216:	400e      	ands	r6, r1
 8002218:	e7cb      	b.n	80021b2 <__aeabi_dsub+0x612>
 800221a:	000a      	movs	r2, r1
 800221c:	0027      	movs	r7, r4
 800221e:	3a20      	subs	r2, #32
 8002220:	40d7      	lsrs	r7, r2
 8002222:	2920      	cmp	r1, #32
 8002224:	d005      	beq.n	8002232 <__aeabi_dsub+0x692>
 8002226:	2240      	movs	r2, #64	@ 0x40
 8002228:	1a52      	subs	r2, r2, r1
 800222a:	4094      	lsls	r4, r2
 800222c:	0025      	movs	r5, r4
 800222e:	4305      	orrs	r5, r0
 8002230:	9503      	str	r5, [sp, #12]
 8002232:	9d03      	ldr	r5, [sp, #12]
 8002234:	1e6a      	subs	r2, r5, #1
 8002236:	4195      	sbcs	r5, r2
 8002238:	432f      	orrs	r7, r5
 800223a:	e610      	b.n	8001e5e <__aeabi_dsub+0x2be>
 800223c:	0014      	movs	r4, r2
 800223e:	2500      	movs	r5, #0
 8002240:	2200      	movs	r2, #0
 8002242:	e556      	b.n	8001cf2 <__aeabi_dsub+0x152>
 8002244:	9b02      	ldr	r3, [sp, #8]
 8002246:	4460      	add	r0, ip
 8002248:	4699      	mov	r9, r3
 800224a:	4560      	cmp	r0, ip
 800224c:	4192      	sbcs	r2, r2
 800224e:	444c      	add	r4, r9
 8002250:	4252      	negs	r2, r2
 8002252:	0005      	movs	r5, r0
 8002254:	18a4      	adds	r4, r4, r2
 8002256:	e74c      	b.n	80020f2 <__aeabi_dsub+0x552>
 8002258:	001a      	movs	r2, r3
 800225a:	001c      	movs	r4, r3
 800225c:	432a      	orrs	r2, r5
 800225e:	d000      	beq.n	8002262 <__aeabi_dsub+0x6c2>
 8002260:	e6b3      	b.n	8001fca <__aeabi_dsub+0x42a>
 8002262:	e6c9      	b.n	8001ff8 <__aeabi_dsub+0x458>
 8002264:	2480      	movs	r4, #128	@ 0x80
 8002266:	2600      	movs	r6, #0
 8002268:	0324      	lsls	r4, r4, #12
 800226a:	e5ae      	b.n	8001dca <__aeabi_dsub+0x22a>
 800226c:	2120      	movs	r1, #32
 800226e:	2500      	movs	r5, #0
 8002270:	1a09      	subs	r1, r1, r0
 8002272:	e517      	b.n	8001ca4 <__aeabi_dsub+0x104>
 8002274:	2200      	movs	r2, #0
 8002276:	2500      	movs	r5, #0
 8002278:	4c0b      	ldr	r4, [pc, #44]	@ (80022a8 <__aeabi_dsub+0x708>)
 800227a:	e53a      	b.n	8001cf2 <__aeabi_dsub+0x152>
 800227c:	2d00      	cmp	r5, #0
 800227e:	d100      	bne.n	8002282 <__aeabi_dsub+0x6e2>
 8002280:	e5f6      	b.n	8001e70 <__aeabi_dsub+0x2d0>
 8002282:	464b      	mov	r3, r9
 8002284:	1bda      	subs	r2, r3, r7
 8002286:	4692      	mov	sl, r2
 8002288:	2f00      	cmp	r7, #0
 800228a:	d100      	bne.n	800228e <__aeabi_dsub+0x6ee>
 800228c:	e66f      	b.n	8001f6e <__aeabi_dsub+0x3ce>
 800228e:	2a38      	cmp	r2, #56	@ 0x38
 8002290:	dc05      	bgt.n	800229e <__aeabi_dsub+0x6fe>
 8002292:	2680      	movs	r6, #128	@ 0x80
 8002294:	0436      	lsls	r6, r6, #16
 8002296:	4334      	orrs	r4, r6
 8002298:	4688      	mov	r8, r1
 800229a:	000e      	movs	r6, r1
 800229c:	e6d1      	b.n	8002042 <__aeabi_dsub+0x4a2>
 800229e:	4688      	mov	r8, r1
 80022a0:	000e      	movs	r6, r1
 80022a2:	2501      	movs	r5, #1
 80022a4:	e6de      	b.n	8002064 <__aeabi_dsub+0x4c4>
 80022a6:	46c0      	nop			@ (mov r8, r8)
 80022a8:	000007ff 	.word	0x000007ff
 80022ac:	ff7fffff 	.word	0xff7fffff
 80022b0:	000007fe 	.word	0x000007fe
 80022b4:	2d00      	cmp	r5, #0
 80022b6:	d100      	bne.n	80022ba <__aeabi_dsub+0x71a>
 80022b8:	e668      	b.n	8001f8c <__aeabi_dsub+0x3ec>
 80022ba:	464b      	mov	r3, r9
 80022bc:	1bd9      	subs	r1, r3, r7
 80022be:	2f00      	cmp	r7, #0
 80022c0:	d101      	bne.n	80022c6 <__aeabi_dsub+0x726>
 80022c2:	468a      	mov	sl, r1
 80022c4:	e5a7      	b.n	8001e16 <__aeabi_dsub+0x276>
 80022c6:	2701      	movs	r7, #1
 80022c8:	2938      	cmp	r1, #56	@ 0x38
 80022ca:	dd00      	ble.n	80022ce <__aeabi_dsub+0x72e>
 80022cc:	e5c7      	b.n	8001e5e <__aeabi_dsub+0x2be>
 80022ce:	2280      	movs	r2, #128	@ 0x80
 80022d0:	0412      	lsls	r2, r2, #16
 80022d2:	4314      	orrs	r4, r2
 80022d4:	e5af      	b.n	8001e36 <__aeabi_dsub+0x296>
 80022d6:	46c0      	nop			@ (mov r8, r8)

080022d8 <__aeabi_d2iz>:
 80022d8:	000b      	movs	r3, r1
 80022da:	0002      	movs	r2, r0
 80022dc:	b570      	push	{r4, r5, r6, lr}
 80022de:	4d16      	ldr	r5, [pc, #88]	@ (8002338 <__aeabi_d2iz+0x60>)
 80022e0:	030c      	lsls	r4, r1, #12
 80022e2:	b082      	sub	sp, #8
 80022e4:	0049      	lsls	r1, r1, #1
 80022e6:	2000      	movs	r0, #0
 80022e8:	9200      	str	r2, [sp, #0]
 80022ea:	9301      	str	r3, [sp, #4]
 80022ec:	0b24      	lsrs	r4, r4, #12
 80022ee:	0d49      	lsrs	r1, r1, #21
 80022f0:	0fde      	lsrs	r6, r3, #31
 80022f2:	42a9      	cmp	r1, r5
 80022f4:	dd04      	ble.n	8002300 <__aeabi_d2iz+0x28>
 80022f6:	4811      	ldr	r0, [pc, #68]	@ (800233c <__aeabi_d2iz+0x64>)
 80022f8:	4281      	cmp	r1, r0
 80022fa:	dd03      	ble.n	8002304 <__aeabi_d2iz+0x2c>
 80022fc:	4b10      	ldr	r3, [pc, #64]	@ (8002340 <__aeabi_d2iz+0x68>)
 80022fe:	18f0      	adds	r0, r6, r3
 8002300:	b002      	add	sp, #8
 8002302:	bd70      	pop	{r4, r5, r6, pc}
 8002304:	2080      	movs	r0, #128	@ 0x80
 8002306:	0340      	lsls	r0, r0, #13
 8002308:	4320      	orrs	r0, r4
 800230a:	4c0e      	ldr	r4, [pc, #56]	@ (8002344 <__aeabi_d2iz+0x6c>)
 800230c:	1a64      	subs	r4, r4, r1
 800230e:	2c1f      	cmp	r4, #31
 8002310:	dd08      	ble.n	8002324 <__aeabi_d2iz+0x4c>
 8002312:	4b0d      	ldr	r3, [pc, #52]	@ (8002348 <__aeabi_d2iz+0x70>)
 8002314:	1a5b      	subs	r3, r3, r1
 8002316:	40d8      	lsrs	r0, r3
 8002318:	0003      	movs	r3, r0
 800231a:	4258      	negs	r0, r3
 800231c:	2e00      	cmp	r6, #0
 800231e:	d1ef      	bne.n	8002300 <__aeabi_d2iz+0x28>
 8002320:	0018      	movs	r0, r3
 8002322:	e7ed      	b.n	8002300 <__aeabi_d2iz+0x28>
 8002324:	4b09      	ldr	r3, [pc, #36]	@ (800234c <__aeabi_d2iz+0x74>)
 8002326:	9a00      	ldr	r2, [sp, #0]
 8002328:	469c      	mov	ip, r3
 800232a:	0003      	movs	r3, r0
 800232c:	4461      	add	r1, ip
 800232e:	408b      	lsls	r3, r1
 8002330:	40e2      	lsrs	r2, r4
 8002332:	4313      	orrs	r3, r2
 8002334:	e7f1      	b.n	800231a <__aeabi_d2iz+0x42>
 8002336:	46c0      	nop			@ (mov r8, r8)
 8002338:	000003fe 	.word	0x000003fe
 800233c:	0000041d 	.word	0x0000041d
 8002340:	7fffffff 	.word	0x7fffffff
 8002344:	00000433 	.word	0x00000433
 8002348:	00000413 	.word	0x00000413
 800234c:	fffffbed 	.word	0xfffffbed

08002350 <__aeabi_i2d>:
 8002350:	b570      	push	{r4, r5, r6, lr}
 8002352:	2800      	cmp	r0, #0
 8002354:	d016      	beq.n	8002384 <__aeabi_i2d+0x34>
 8002356:	17c3      	asrs	r3, r0, #31
 8002358:	18c5      	adds	r5, r0, r3
 800235a:	405d      	eors	r5, r3
 800235c:	0fc4      	lsrs	r4, r0, #31
 800235e:	0028      	movs	r0, r5
 8002360:	f7fe f886 	bl	8000470 <__clzsi2>
 8002364:	4b10      	ldr	r3, [pc, #64]	@ (80023a8 <__aeabi_i2d+0x58>)
 8002366:	1a1b      	subs	r3, r3, r0
 8002368:	055b      	lsls	r3, r3, #21
 800236a:	0d5b      	lsrs	r3, r3, #21
 800236c:	280a      	cmp	r0, #10
 800236e:	dc14      	bgt.n	800239a <__aeabi_i2d+0x4a>
 8002370:	0002      	movs	r2, r0
 8002372:	002e      	movs	r6, r5
 8002374:	3215      	adds	r2, #21
 8002376:	4096      	lsls	r6, r2
 8002378:	220b      	movs	r2, #11
 800237a:	1a12      	subs	r2, r2, r0
 800237c:	40d5      	lsrs	r5, r2
 800237e:	032d      	lsls	r5, r5, #12
 8002380:	0b2d      	lsrs	r5, r5, #12
 8002382:	e003      	b.n	800238c <__aeabi_i2d+0x3c>
 8002384:	2400      	movs	r4, #0
 8002386:	2300      	movs	r3, #0
 8002388:	2500      	movs	r5, #0
 800238a:	2600      	movs	r6, #0
 800238c:	051b      	lsls	r3, r3, #20
 800238e:	432b      	orrs	r3, r5
 8002390:	07e4      	lsls	r4, r4, #31
 8002392:	4323      	orrs	r3, r4
 8002394:	0030      	movs	r0, r6
 8002396:	0019      	movs	r1, r3
 8002398:	bd70      	pop	{r4, r5, r6, pc}
 800239a:	380b      	subs	r0, #11
 800239c:	4085      	lsls	r5, r0
 800239e:	032d      	lsls	r5, r5, #12
 80023a0:	2600      	movs	r6, #0
 80023a2:	0b2d      	lsrs	r5, r5, #12
 80023a4:	e7f2      	b.n	800238c <__aeabi_i2d+0x3c>
 80023a6:	46c0      	nop			@ (mov r8, r8)
 80023a8:	0000041e 	.word	0x0000041e

080023ac <__aeabi_ui2d>:
 80023ac:	b510      	push	{r4, lr}
 80023ae:	1e04      	subs	r4, r0, #0
 80023b0:	d010      	beq.n	80023d4 <__aeabi_ui2d+0x28>
 80023b2:	f7fe f85d 	bl	8000470 <__clzsi2>
 80023b6:	4b0e      	ldr	r3, [pc, #56]	@ (80023f0 <__aeabi_ui2d+0x44>)
 80023b8:	1a1b      	subs	r3, r3, r0
 80023ba:	055b      	lsls	r3, r3, #21
 80023bc:	0d5b      	lsrs	r3, r3, #21
 80023be:	280a      	cmp	r0, #10
 80023c0:	dc0f      	bgt.n	80023e2 <__aeabi_ui2d+0x36>
 80023c2:	220b      	movs	r2, #11
 80023c4:	0021      	movs	r1, r4
 80023c6:	1a12      	subs	r2, r2, r0
 80023c8:	40d1      	lsrs	r1, r2
 80023ca:	3015      	adds	r0, #21
 80023cc:	030a      	lsls	r2, r1, #12
 80023ce:	4084      	lsls	r4, r0
 80023d0:	0b12      	lsrs	r2, r2, #12
 80023d2:	e001      	b.n	80023d8 <__aeabi_ui2d+0x2c>
 80023d4:	2300      	movs	r3, #0
 80023d6:	2200      	movs	r2, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	4313      	orrs	r3, r2
 80023dc:	0020      	movs	r0, r4
 80023de:	0019      	movs	r1, r3
 80023e0:	bd10      	pop	{r4, pc}
 80023e2:	0022      	movs	r2, r4
 80023e4:	380b      	subs	r0, #11
 80023e6:	4082      	lsls	r2, r0
 80023e8:	0312      	lsls	r2, r2, #12
 80023ea:	2400      	movs	r4, #0
 80023ec:	0b12      	lsrs	r2, r2, #12
 80023ee:	e7f3      	b.n	80023d8 <__aeabi_ui2d+0x2c>
 80023f0:	0000041e 	.word	0x0000041e

080023f4 <__clzdi2>:
 80023f4:	b510      	push	{r4, lr}
 80023f6:	2900      	cmp	r1, #0
 80023f8:	d103      	bne.n	8002402 <__clzdi2+0xe>
 80023fa:	f7fe f839 	bl	8000470 <__clzsi2>
 80023fe:	3020      	adds	r0, #32
 8002400:	e002      	b.n	8002408 <__clzdi2+0x14>
 8002402:	0008      	movs	r0, r1
 8002404:	f7fe f834 	bl	8000470 <__clzsi2>
 8002408:	bd10      	pop	{r4, pc}
 800240a:	46c0      	nop			@ (mov r8, r8)

0800240c <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	2201      	movs	r2, #1
 800241a:	4013      	ands	r3, r2
 800241c:	2b01      	cmp	r3, #1
 800241e:	d101      	bne.n	8002424 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8002420:	2301      	movs	r3, #1
 8002422:	e000      	b.n	8002426 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8002424:	2300      	movs	r3, #0
}
 8002426:	0018      	movs	r0, r3
 8002428:	46bd      	mov	sp, r7
 800242a:	b002      	add	sp, #8
 800242c:	bd80      	pop	{r7, pc}

0800242e <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2202      	movs	r2, #2
 800243c:	4013      	ands	r3, r2
 800243e:	2b02      	cmp	r3, #2
 8002440:	d101      	bne.n	8002446 <LL_SPI_IsActiveFlag_TXE+0x18>
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8002446:	2300      	movs	r3, #0
}
 8002448:	0018      	movs	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	b002      	add	sp, #8
 800244e:	bd80      	pop	{r7, pc}

08002450 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	330c      	adds	r3, #12
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	b2db      	uxtb	r3, r3
}
 8002460:	0018      	movs	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	b002      	add	sp, #8
 8002466:	bd80      	pop	{r7, pc}

08002468 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	000a      	movs	r2, r1
 8002472:	1cfb      	adds	r3, r7, #3
 8002474:	701a      	strb	r2, [r3, #0]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	330c      	adds	r3, #12
 800247a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	1cfa      	adds	r2, r7, #3
 8002480:	7812      	ldrb	r2, [r2, #0]
 8002482:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8002484:	46c0      	nop			@ (mov r8, r8)
 8002486:	46bd      	mov	sp, r7
 8002488:	b004      	add	sp, #16
 800248a:	bd80      	pop	{r7, pc}

0800248c <spi_select_slave>:
 * @brief True if we've set the RTC from the cloud time
 */
// bool timeSet = false;

static inline void spi_select_slave(bool select)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	0002      	movs	r2, r0
 8002494:	1dfb      	adds	r3, r7, #7
 8002496:	701a      	strb	r2, [r3, #0]
    if (select)
 8002498:	1dfb      	adds	r3, r7, #7
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d004      	beq.n	80024aa <spi_select_slave+0x1e>
    {
        RTC_H();
 80024a0:	4b06      	ldr	r3, [pc, #24]	@ (80024bc <spi_select_slave+0x30>)
 80024a2:	2280      	movs	r2, #128	@ 0x80
 80024a4:	01d2      	lsls	r2, r2, #7
 80024a6:	619a      	str	r2, [r3, #24]
    }
    else
    {
        RTC_L();
    }
}
 80024a8:	e003      	b.n	80024b2 <spi_select_slave+0x26>
        RTC_L();
 80024aa:	4b04      	ldr	r3, [pc, #16]	@ (80024bc <spi_select_slave+0x30>)
 80024ac:	2280      	movs	r2, #128	@ 0x80
 80024ae:	05d2      	lsls	r2, r2, #23
 80024b0:	619a      	str	r2, [r3, #24]
}
 80024b2:	46c0      	nop			@ (mov r8, r8)
 80024b4:	46bd      	mov	sp, r7
 80024b6:	b002      	add	sp, #8
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	46c0      	nop			@ (mov r8, r8)
 80024bc:	50000400 	.word	0x50000400

080024c0 <resetConfig>:

    return (value & REG_OSC_STATUS_OMODE) != 0;
}

bool resetConfig(uint32_t flags)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
    printf("resetConfig(0x%08lx)\n", flags);
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	4b3f      	ldr	r3, [pc, #252]	@ (80025c8 <resetConfig+0x108>)
 80024cc:	0011      	movs	r1, r2
 80024ce:	0018      	movs	r0, r3
 80024d0:	f002 fd6a 	bl	8004fa8 <printf_>

    // Reset configuration registers to default values
    write_rtc_register(REG_STATUS, REG_STATUS_DEFAULT);
 80024d4:	230f      	movs	r3, #15
 80024d6:	2200      	movs	r2, #0
 80024d8:	0011      	movs	r1, r2
 80024da:	0018      	movs	r0, r3
 80024dc:	f000 fb6a 	bl	8002bb4 <write_rtc_register>
    write_rtc_register(REG_CTRL_1, REG_CTRL_1_DEFAULT);
 80024e0:	2310      	movs	r3, #16
 80024e2:	2212      	movs	r2, #18
 80024e4:	0011      	movs	r1, r2
 80024e6:	0018      	movs	r0, r3
 80024e8:	f000 fb64 	bl	8002bb4 <write_rtc_register>
    write_rtc_register(REG_CTRL_2, REG_CTRL_2_DEFAULT);
 80024ec:	2311      	movs	r3, #17
 80024ee:	223c      	movs	r2, #60	@ 0x3c
 80024f0:	0011      	movs	r1, r2
 80024f2:	0018      	movs	r0, r3
 80024f4:	f000 fb5e 	bl	8002bb4 <write_rtc_register>
    write_rtc_register(REG_INT_MASK, REG_INT_MASK_DEFAULT);
 80024f8:	2312      	movs	r3, #18
 80024fa:	22e0      	movs	r2, #224	@ 0xe0
 80024fc:	0011      	movs	r1, r2
 80024fe:	0018      	movs	r0, r3
 8002500:	f000 fb58 	bl	8002bb4 <write_rtc_register>
    write_rtc_register(REG_SQW, REG_SQW_DEFAULT);
 8002504:	2313      	movs	r3, #19
 8002506:	2226      	movs	r2, #38	@ 0x26
 8002508:	0011      	movs	r1, r2
 800250a:	0018      	movs	r0, r3
 800250c:	f000 fb52 	bl	8002bb4 <write_rtc_register>
    write_rtc_register(REG_SLEEP_CTRL, REG_SLEEP_CTRL_DEFAULT);
 8002510:	2317      	movs	r3, #23
 8002512:	2200      	movs	r2, #0
 8002514:	0011      	movs	r1, r2
 8002516:	0018      	movs	r0, r3
 8002518:	f000 fb4c 	bl	8002bb4 <write_rtc_register>

    if ((flags & RESET_PRESERVE_REPEATING_TIMER) != 0)
 800251c:	2201      	movs	r2, #1
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4013      	ands	r3, r2
 8002522:	d010      	beq.n	8002546 <resetConfig+0x86>
    {
        maskRegister(REG_TIMER_CTRL, ~REG_TIMER_CTRL_RPT_MASK, REG_TIMER_CTRL_DEFAULT & ~REG_TIMER_CTRL_RPT_MASK, false);
 8002524:	2018      	movs	r0, #24
 8002526:	231c      	movs	r3, #28
 8002528:	43db      	mvns	r3, r3
 800252a:	b2d9      	uxtb	r1, r3
 800252c:	231c      	movs	r3, #28
 800252e:	b25b      	sxtb	r3, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	b25b      	sxtb	r3, r3
 8002534:	2223      	movs	r2, #35	@ 0x23
 8002536:	b252      	sxtb	r2, r2
 8002538:	4013      	ands	r3, r2
 800253a:	b25b      	sxtb	r3, r3
 800253c:	b2da      	uxtb	r2, r3
 800253e:	2300      	movs	r3, #0
 8002540:	f000 fa56 	bl	80029f0 <maskRegister>
 8002544:	e005      	b.n	8002552 <resetConfig+0x92>
    }
    else
    {
        write_rtc_register(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
 8002546:	2318      	movs	r3, #24
 8002548:	2223      	movs	r2, #35	@ 0x23
 800254a:	0011      	movs	r1, r2
 800254c:	0018      	movs	r0, r3
 800254e:	f000 fb31 	bl	8002bb4 <write_rtc_register>
    }

    write_rtc_register(REG_TIMER, REG_TIMER_DEFAULT);
 8002552:	2319      	movs	r3, #25
 8002554:	2200      	movs	r2, #0
 8002556:	0011      	movs	r1, r2
 8002558:	0018      	movs	r0, r3
 800255a:	f000 fb2b 	bl	8002bb4 <write_rtc_register>
    write_rtc_register(REG_TIMER_INITIAL, REG_TIMER_INITIAL_DEFAULT);
 800255e:	231a      	movs	r3, #26
 8002560:	2200      	movs	r2, #0
 8002562:	0011      	movs	r1, r2
 8002564:	0018      	movs	r0, r3
 8002566:	f000 fb25 	bl	8002bb4 <write_rtc_register>
    write_rtc_register(REG_WDT, REG_WDT_DEFAULT);
 800256a:	231b      	movs	r3, #27
 800256c:	2200      	movs	r2, #0
 800256e:	0011      	movs	r1, r2
 8002570:	0018      	movs	r0, r3
 8002572:	f000 fb1f 	bl	8002bb4 <write_rtc_register>

    uint8_t oscCtrl = REG_OSC_CTRL_DEFAULT;
 8002576:	200f      	movs	r0, #15
 8002578:	183b      	adds	r3, r7, r0
 800257a:	2200      	movs	r2, #0
 800257c:	701a      	strb	r2, [r3, #0]
    if ((flags & RESET_DISABLE_XT) != 0)
 800257e:	2202      	movs	r2, #2
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4013      	ands	r3, r2
 8002584:	d008      	beq.n	8002598 <resetConfig+0xd8>
    {
        // If disabling XT oscillator, set OSEL to 1 (RC oscillator)
        // Also enable FOS so if the XT oscillator fails, it will switch to RC (just in case)
        // and ACAL to 0 (however REG_OSC_CTRL_DEFAULT already sets ACAL to 0)
        oscCtrl |= REG_OSC_CTRL_OSEL | REG_OSC_CTRL_FOS;
 8002586:	2280      	movs	r2, #128	@ 0x80
 8002588:	2308      	movs	r3, #8
 800258a:	4313      	orrs	r3, r2
 800258c:	b2d9      	uxtb	r1, r3
 800258e:	183b      	adds	r3, r7, r0
 8002590:	183a      	adds	r2, r7, r0
 8002592:	7812      	ldrb	r2, [r2, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	701a      	strb	r2, [r3, #0]
    }
    // write_rtc_register(REG_OSC_CTRL, oscCtrl);
    // write_rtc_register(REG_TRICKLE, REG_TRICKLE_DEFAULT);
    write_rtc_register(REG_BREF_CTRL, REG_BREF_CTRL_DEFAULT);
 8002598:	2321      	movs	r3, #33	@ 0x21
 800259a:	22f0      	movs	r2, #240	@ 0xf0
 800259c:	0011      	movs	r1, r2
 800259e:	0018      	movs	r0, r3
 80025a0:	f000 fb08 	bl	8002bb4 <write_rtc_register>
    write_rtc_register(REG_AFCTRL, REG_AFCTRL_DEFAULT);
 80025a4:	2326      	movs	r3, #38	@ 0x26
 80025a6:	2200      	movs	r2, #0
 80025a8:	0011      	movs	r1, r2
 80025aa:	0018      	movs	r0, r3
 80025ac:	f000 fb02 	bl	8002bb4 <write_rtc_register>
    // write_rtc_register(REG_BATMODE_IO, REG_BATMODE_IO_DEFAULT);
    write_rtc_register(REG_OCTRL, REG_OCTRL_DEFAULT);
 80025b0:	2330      	movs	r3, #48	@ 0x30
 80025b2:	2200      	movs	r2, #0
 80025b4:	0011      	movs	r1, r2
 80025b6:	0018      	movs	r0, r3
 80025b8:	f000 fafc 	bl	8002bb4 <write_rtc_register>

    return true;
 80025bc:	2301      	movs	r3, #1
}
 80025be:	0018      	movs	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	b004      	add	sp, #16
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	46c0      	nop			@ (mov r8, r8)
 80025c8:	080092a4 	.word	0x080092a4

080025cc <setWDT>:

    return true;
}

bool setWDT(int seconds)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
    bool bResult = false;
 80025d4:	230f      	movs	r3, #15
 80025d6:	18fb      	adds	r3, r7, r3
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]
    // printf("setWDT %d\n", seconds);

    if (seconds < 0)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	da02      	bge.n	80025e8 <setWDT+0x1c>
    {
        seconds = watchdogSecs;
 80025e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002698 <setWDT+0xcc>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	607b      	str	r3, [r7, #4]
    }

    if (seconds == 0)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d112      	bne.n	8002614 <setWDT+0x48>
    {
        // Disable WDT
        bResult = write_rtc_register(REG_WDT, 0x00);
 80025ee:	231b      	movs	r3, #27
 80025f0:	2100      	movs	r1, #0
 80025f2:	0018      	movs	r0, r3
 80025f4:	f000 fade 	bl	8002bb4 <write_rtc_register>
 80025f8:	0003      	movs	r3, r0
 80025fa:	001a      	movs	r2, r3
 80025fc:	230f      	movs	r3, #15
 80025fe:	18fb      	adds	r3, r7, r3
 8002600:	1e51      	subs	r1, r2, #1
 8002602:	418a      	sbcs	r2, r1
 8002604:	701a      	strb	r2, [r3, #0]

        watchdogSecs = 0;
 8002606:	4b24      	ldr	r3, [pc, #144]	@ (8002698 <setWDT+0xcc>)
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
        watchdogUpdatePeriod = 0;
 800260c:	4b23      	ldr	r3, [pc, #140]	@ (800269c <setWDT+0xd0>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	e03a      	b.n	800268a <setWDT+0xbe>
    }
    else
    {
        // Use 1/4 Hz clock
        int fourSecs = seconds / 4;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	da00      	bge.n	800261c <setWDT+0x50>
 800261a:	3303      	adds	r3, #3
 800261c:	109b      	asrs	r3, r3, #2
 800261e:	60bb      	str	r3, [r7, #8]
        if (fourSecs < 1)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2b00      	cmp	r3, #0
 8002624:	dc01      	bgt.n	800262a <setWDT+0x5e>
        {
            fourSecs = 1;
 8002626:	2301      	movs	r3, #1
 8002628:	60bb      	str	r3, [r7, #8]
        }
        if (fourSecs > 31)
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2b1f      	cmp	r3, #31
 800262e:	dd01      	ble.n	8002634 <setWDT+0x68>
        {
            fourSecs = 31;
 8002630:	231f      	movs	r3, #31
 8002632:	60bb      	str	r3, [r7, #8]
        }
        bResult = write_rtc_register(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
 8002634:	201b      	movs	r0, #27
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	b25a      	sxtb	r2, r3
 800263c:	2380      	movs	r3, #128	@ 0x80
 800263e:	b25b      	sxtb	r3, r3
 8002640:	4313      	orrs	r3, r2
 8002642:	b25a      	sxtb	r2, r3
 8002644:	2303      	movs	r3, #3
 8002646:	b25b      	sxtb	r3, r3
 8002648:	4313      	orrs	r3, r2
 800264a:	b25b      	sxtb	r3, r3
 800264c:	b2db      	uxtb	r3, r3
 800264e:	0019      	movs	r1, r3
 8002650:	f000 fab0 	bl	8002bb4 <write_rtc_register>
 8002654:	0003      	movs	r3, r0
 8002656:	001a      	movs	r2, r3
 8002658:	200f      	movs	r0, #15
 800265a:	183b      	adds	r3, r7, r0
 800265c:	1e51      	subs	r1, r2, #1
 800265e:	418a      	sbcs	r2, r1
 8002660:	701a      	strb	r2, [r3, #0]

        printf("watchdog set fourSecs=%d bResult=%d\n", fourSecs, bResult);
 8002662:	183b      	adds	r3, r7, r0
 8002664:	781a      	ldrb	r2, [r3, #0]
 8002666:	68b9      	ldr	r1, [r7, #8]
 8002668:	4b0d      	ldr	r3, [pc, #52]	@ (80026a0 <setWDT+0xd4>)
 800266a:	0018      	movs	r0, r3
 800266c:	f002 fc9c 	bl	8004fa8 <printf_>

        watchdogSecs = seconds;
 8002670:	4b09      	ldr	r3, [pc, #36]	@ (8002698 <setWDT+0xcc>)
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	601a      	str	r2, [r3, #0]

        // Update watchdog half way through period
        watchdogUpdatePeriod = (fourSecs * 2000);
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	0013      	movs	r3, r2
 800267a:	015b      	lsls	r3, r3, #5
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	189b      	adds	r3, r3, r2
 8002682:	011b      	lsls	r3, r3, #4
 8002684:	001a      	movs	r2, r3
 8002686:	4b05      	ldr	r3, [pc, #20]	@ (800269c <setWDT+0xd0>)
 8002688:	601a      	str	r2, [r3, #0]
    }

    return bResult;
 800268a:	230f      	movs	r3, #15
 800268c:	18fb      	adds	r3, r7, r3
 800268e:	781b      	ldrb	r3, [r3, #0]
}
 8002690:	0018      	movs	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	b004      	add	sp, #16
 8002696:	bd80      	pop	{r7, pc}
 8002698:	2000002c 	.word	0x2000002c
 800269c:	20000030 	.word	0x20000030
 80026a0:	08009304 	.word	0x08009304

080026a4 <deepPowerDown>:

    return true;
}

bool deepPowerDown(int seconds)
{
 80026a4:	b5b0      	push	{r4, r5, r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
    const char *errorMsg = "failure in deepPowerDown %d\n";
 80026ac:	4b6f      	ldr	r3, [pc, #444]	@ (800286c <deepPowerDown+0x1c8>)
 80026ae:	617b      	str	r3, [r7, #20]
    bool bResult;

    printf("deepPowerDown %d\n", seconds);
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	4b6f      	ldr	r3, [pc, #444]	@ (8002870 <deepPowerDown+0x1cc>)
 80026b4:	0011      	movs	r1, r2
 80026b6:	0018      	movs	r0, r3
 80026b8:	f002 fc76 	bl	8004fa8 <printf_>

    // Disable watchdog
    bResult = setWDT(0);
 80026bc:	2513      	movs	r5, #19
 80026be:	197c      	adds	r4, r7, r5
 80026c0:	2000      	movs	r0, #0
 80026c2:	f7ff ff83 	bl	80025cc <setWDT>
 80026c6:	0003      	movs	r3, r0
 80026c8:	7023      	strb	r3, [r4, #0]
    if (!bResult)
 80026ca:	197b      	adds	r3, r7, r5
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2201      	movs	r2, #1
 80026d0:	4053      	eors	r3, r2
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d009      	beq.n	80026ec <deepPowerDown+0x48>
    {
        printf(errorMsg, __LINE__);
 80026d8:	2346      	movs	r3, #70	@ 0x46
 80026da:	33ff      	adds	r3, #255	@ 0xff
 80026dc:	001a      	movs	r2, r3
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	0011      	movs	r1, r2
 80026e2:	0018      	movs	r0, r3
 80026e4:	f002 fc60 	bl	8004fa8 <printf_>
        return false;
 80026e8:	2300      	movs	r3, #0
 80026ea:	e0ba      	b.n	8002862 <deepPowerDown+0x1be>
    }

    bResult = setCountdownTimer(seconds, false);
 80026ec:	2513      	movs	r5, #19
 80026ee:	197c      	adds	r4, r7, r5
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2100      	movs	r1, #0
 80026f4:	0018      	movs	r0, r3
 80026f6:	f000 f8c1 	bl	800287c <setCountdownTimer>
 80026fa:	0003      	movs	r3, r0
 80026fc:	7023      	strb	r3, [r4, #0]
    if (!bResult)
 80026fe:	197b      	adds	r3, r7, r5
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2201      	movs	r2, #1
 8002704:	4053      	eors	r3, r2
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	d008      	beq.n	800271e <deepPowerDown+0x7a>
    {
        printf(errorMsg, __LINE__);
 800270c:	23a6      	movs	r3, #166	@ 0xa6
 800270e:	005a      	lsls	r2, r3, #1
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	0011      	movs	r1, r2
 8002714:	0018      	movs	r0, r3
 8002716:	f002 fc47 	bl	8004fa8 <printf_>
        return false;
 800271a:	2300      	movs	r3, #0
 800271c:	e0a1      	b.n	8002862 <deepPowerDown+0x1be>
    }

    // Make sure STOP (stop clocking system is 0, otherwise sleep mode cannot be entered)
    // PWR2 = 1 (low resistance power switch)
    // (also would probably work with PWR2 = 0, as nIRQ2 should be high-true for sleep mode)
    bResult = maskRegister(REG_CTRL_1, (uint8_t) ~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2, 0);
 800271e:	2010      	movs	r0, #16
 8002720:	2280      	movs	r2, #128	@ 0x80
 8002722:	2308      	movs	r3, #8
 8002724:	4313      	orrs	r3, r2
 8002726:	b2db      	uxtb	r3, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	b2d9      	uxtb	r1, r3
 800272c:	2202      	movs	r2, #2
 800272e:	2513      	movs	r5, #19
 8002730:	197c      	adds	r4, r7, r5
 8002732:	2300      	movs	r3, #0
 8002734:	f000 f95c 	bl	80029f0 <maskRegister>
 8002738:	0003      	movs	r3, r0
 800273a:	7023      	strb	r3, [r4, #0]
    if (!bResult)
 800273c:	197b      	adds	r3, r7, r5
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2201      	movs	r2, #1
 8002742:	4053      	eors	r3, r2
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d008      	beq.n	800275c <deepPowerDown+0xb8>
    {
        printf(errorMsg, __LINE__);
 800274a:	23ab      	movs	r3, #171	@ 0xab
 800274c:	005a      	lsls	r2, r3, #1
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	0011      	movs	r1, r2
 8002752:	0018      	movs	r0, r3
 8002754:	f002 fc28 	bl	8004fa8 <printf_>
        return false;
 8002758:	2300      	movs	r3, #0
 800275a:	e082      	b.n	8002862 <deepPowerDown+0x1be>
    }

    // Disable the I/O interface in sleep
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT, 0);
 800275c:	231c      	movs	r3, #28
 800275e:	2104      	movs	r1, #4
 8002760:	2513      	movs	r5, #19
 8002762:	197c      	adds	r4, r7, r5
 8002764:	2200      	movs	r2, #0
 8002766:	0018      	movs	r0, r3
 8002768:	f000 f982 	bl	8002a70 <setRegisterBit>
 800276c:	0003      	movs	r3, r0
 800276e:	7023      	strb	r3, [r4, #0]
    if (!bResult)
 8002770:	197b      	adds	r3, r7, r5
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2201      	movs	r2, #1
 8002776:	4053      	eors	r3, r2
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d008      	beq.n	8002790 <deepPowerDown+0xec>
    {
        printf(errorMsg, __LINE__);
 800277e:	23af      	movs	r3, #175	@ 0xaf
 8002780:	005a      	lsls	r2, r3, #1
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	0011      	movs	r1, r2
 8002786:	0018      	movs	r0, r3
 8002788:	f002 fc0e 	bl	8004fa8 <printf_>
        return false;
 800278c:	2300      	movs	r3, #0
 800278e:	e068      	b.n	8002862 <deepPowerDown+0x1be>
    }

    // OUT2S = 6 to enable sleep mode
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP, 0);
 8002790:	2011      	movs	r0, #17
 8002792:	231c      	movs	r3, #28
 8002794:	43db      	mvns	r3, r3
 8002796:	b2d9      	uxtb	r1, r3
 8002798:	2218      	movs	r2, #24
 800279a:	2513      	movs	r5, #19
 800279c:	197c      	adds	r4, r7, r5
 800279e:	2300      	movs	r3, #0
 80027a0:	f000 f926 	bl	80029f0 <maskRegister>
 80027a4:	0003      	movs	r3, r0
 80027a6:	7023      	strb	r3, [r4, #0]
    if (!bResult)
 80027a8:	197b      	adds	r3, r7, r5
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2201      	movs	r2, #1
 80027ae:	4053      	eors	r3, r2
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d008      	beq.n	80027c8 <deepPowerDown+0x124>
    {
        printf(errorMsg, __LINE__);
 80027b6:	23b3      	movs	r3, #179	@ 0xb3
 80027b8:	005a      	lsls	r2, r3, #1
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	0011      	movs	r1, r2
 80027be:	0018      	movs	r0, r3
 80027c0:	f002 fbf2 	bl	8004fa8 <printf_>
        return false;
 80027c4:	2300      	movs	r3, #0
 80027c6:	e04c      	b.n	8002862 <deepPowerDown+0x1be>
    }
    hex_dump();
 80027c8:	f000 fa30 	bl	8002c2c <hex_dump>
    HAL_Delay(1);
 80027cc:	2001      	movs	r0, #1
 80027ce:	f002 fedb 	bl	8005588 <HAL_Delay>
    // Enter sleep mode
    bResult = write_rtc_register(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES); // REG_SLEEP_CTRL_SLP | 0x01
 80027d2:	2017      	movs	r0, #23
 80027d4:	2280      	movs	r2, #128	@ 0x80
 80027d6:	2340      	movs	r3, #64	@ 0x40
 80027d8:	4313      	orrs	r3, r2
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	0019      	movs	r1, r3
 80027de:	f000 f9e9 	bl	8002bb4 <write_rtc_register>
 80027e2:	0003      	movs	r3, r0
 80027e4:	001a      	movs	r2, r3
 80027e6:	2013      	movs	r0, #19
 80027e8:	183b      	adds	r3, r7, r0
 80027ea:	1e51      	subs	r1, r2, #1
 80027ec:	418a      	sbcs	r2, r1
 80027ee:	701a      	strb	r2, [r3, #0]
    if (!bResult)
 80027f0:	183b      	adds	r3, r7, r0
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2201      	movs	r2, #1
 80027f6:	4053      	eors	r3, r2
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d009      	beq.n	8002812 <deepPowerDown+0x16e>
    {
        printf(errorMsg, __LINE__);
 80027fe:	2370      	movs	r3, #112	@ 0x70
 8002800:	33ff      	adds	r3, #255	@ 0xff
 8002802:	001a      	movs	r2, r3
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	0011      	movs	r1, r2
 8002808:	0018      	movs	r0, r3
 800280a:	f002 fbcd 	bl	8004fa8 <printf_>
        return false;
 800280e:	2300      	movs	r3, #0
 8002810:	e027      	b.n	8002862 <deepPowerDown+0x1be>
    }
    // bResult = write_rtc_register(REG_TIMER_CTRL, 0xc2); // enable
    // _log.trace("delay in case we didn't power down");
    uint32_t start = HAL_GetTick();
 8002812:	f002 feaf 	bl	8005574 <HAL_GetTick>
 8002816:	0003      	movs	r3, r0
 8002818:	60fb      	str	r3, [r7, #12]
    while ((HAL_GetTick() - start) < (uint32_t)(seconds * 1000))
 800281a:	e00f      	b.n	800283c <deepPowerDown+0x198>
    {
        printf("REG_SLEEP_CTRL=0x%2x\n", read_rtc_register(REG_SLEEP_CTRL));
 800281c:	2317      	movs	r3, #23
 800281e:	0018      	movs	r0, r3
 8002820:	f000 f996 	bl	8002b50 <read_rtc_register>
 8002824:	0003      	movs	r3, r0
 8002826:	001a      	movs	r2, r3
 8002828:	4b12      	ldr	r3, [pc, #72]	@ (8002874 <deepPowerDown+0x1d0>)
 800282a:	0011      	movs	r1, r2
 800282c:	0018      	movs	r0, r3
 800282e:	f002 fbbb 	bl	8004fa8 <printf_>
        HAL_Delay(1000);
 8002832:	23fa      	movs	r3, #250	@ 0xfa
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	0018      	movs	r0, r3
 8002838:	f002 fea6 	bl	8005588 <HAL_Delay>
    while ((HAL_GetTick() - start) < (uint32_t)(seconds * 1000))
 800283c:	f002 fe9a 	bl	8005574 <HAL_GetTick>
 8002840:	0002      	movs	r2, r0
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1ad1      	subs	r1, r2, r3
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	0013      	movs	r3, r2
 800284a:	015b      	lsls	r3, r3, #5
 800284c:	1a9b      	subs	r3, r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	189b      	adds	r3, r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	4299      	cmp	r1, r3
 8002856:	d3e1      	bcc.n	800281c <deepPowerDown+0x178>
    }

    printf("didn't power down\n");
 8002858:	4b07      	ldr	r3, [pc, #28]	@ (8002878 <deepPowerDown+0x1d4>)
 800285a:	0018      	movs	r0, r3
 800285c:	f002 fba4 	bl	8004fa8 <printf_>

    return true;
 8002860:	2301      	movs	r3, #1
}
 8002862:	0018      	movs	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	b006      	add	sp, #24
 8002868:	bdb0      	pop	{r4, r5, r7, pc}
 800286a:	46c0      	nop			@ (mov r8, r8)
 800286c:	0800937c 	.word	0x0800937c
 8002870:	0800939c 	.word	0x0800939c
 8002874:	080093b0 	.word	0x080093b0
 8002878:	080093c8 	.word	0x080093c8

0800287c <setCountdownTimer>:

bool setCountdownTimer(int value, bool minutes)
{
 800287c:	b5b0      	push	{r4, r5, r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	000a      	movs	r2, r1
 8002886:	1cfb      	adds	r3, r7, #3
 8002888:	701a      	strb	r2, [r3, #0]
    const char *errorMsg = "failure in setCountdownTimer %d\n";
 800288a:	4b58      	ldr	r3, [pc, #352]	@ (80029ec <setCountdownTimer+0x170>)
 800288c:	60fb      	str	r3, [r7, #12]
    bool bResult;

    // Clear any pending interrupts
    bResult = write_rtc_register(REG_STATUS, REG_STATUS_DEFAULT);
 800288e:	230f      	movs	r3, #15
 8002890:	2200      	movs	r2, #0
 8002892:	0011      	movs	r1, r2
 8002894:	0018      	movs	r0, r3
 8002896:	f000 f98d 	bl	8002bb4 <write_rtc_register>
 800289a:	0003      	movs	r3, r0
 800289c:	001a      	movs	r2, r3
 800289e:	200b      	movs	r0, #11
 80028a0:	183b      	adds	r3, r7, r0
 80028a2:	1e51      	subs	r1, r2, #1
 80028a4:	418a      	sbcs	r2, r1
 80028a6:	701a      	strb	r2, [r3, #0]
    if (!bResult)
 80028a8:	183b      	adds	r3, r7, r0
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2201      	movs	r2, #1
 80028ae:	4053      	eors	r3, r2
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d009      	beq.n	80028ca <setCountdownTimer+0x4e>
    {
        printf(errorMsg, __LINE__);
 80028b6:	238a      	movs	r3, #138	@ 0x8a
 80028b8:	33ff      	adds	r3, #255	@ 0xff
 80028ba:	001a      	movs	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	0011      	movs	r1, r2
 80028c0:	0018      	movs	r0, r3
 80028c2:	f002 fb71 	bl	8004fa8 <printf_>
        return false;
 80028c6:	2300      	movs	r3, #0
 80028c8:	e08c      	b.n	80029e4 <setCountdownTimer+0x168>
    }

    // Stop countdown timer if already running since it can't be set while running
    bResult = write_rtc_register(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
 80028ca:	2318      	movs	r3, #24
 80028cc:	2223      	movs	r2, #35	@ 0x23
 80028ce:	0011      	movs	r1, r2
 80028d0:	0018      	movs	r0, r3
 80028d2:	f000 f96f 	bl	8002bb4 <write_rtc_register>
 80028d6:	0003      	movs	r3, r0
 80028d8:	001a      	movs	r2, r3
 80028da:	200b      	movs	r0, #11
 80028dc:	183b      	adds	r3, r7, r0
 80028de:	1e51      	subs	r1, r2, #1
 80028e0:	418a      	sbcs	r2, r1
 80028e2:	701a      	strb	r2, [r3, #0]
    if (!bResult)
 80028e4:	183b      	adds	r3, r7, r0
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2201      	movs	r2, #1
 80028ea:	4053      	eors	r3, r2
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d009      	beq.n	8002906 <setCountdownTimer+0x8a>
    {
        printf(errorMsg, __LINE__);
 80028f2:	2392      	movs	r3, #146	@ 0x92
 80028f4:	33ff      	adds	r3, #255	@ 0xff
 80028f6:	001a      	movs	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	0011      	movs	r1, r2
 80028fc:	0018      	movs	r0, r3
 80028fe:	f002 fb53 	bl	8004fa8 <printf_>
        return false;
 8002902:	2300      	movs	r3, #0
 8002904:	e06e      	b.n	80029e4 <setCountdownTimer+0x168>
    }

    // Set countdown timer duration
    if (value < 1)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	dc01      	bgt.n	8002910 <setCountdownTimer+0x94>
    {
        value = 1;
 800290c:	2301      	movs	r3, #1
 800290e:	607b      	str	r3, [r7, #4]
    }
    if (value > 255)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2bff      	cmp	r3, #255	@ 0xff
 8002914:	dd01      	ble.n	800291a <setCountdownTimer+0x9e>
    {
        value = 255;
 8002916:	23ff      	movs	r3, #255	@ 0xff
 8002918:	607b      	str	r3, [r7, #4]
    }
    bResult = write_rtc_register(REG_TIMER, (uint8_t)value);
 800291a:	2219      	movs	r2, #25
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	b2db      	uxtb	r3, r3
 8002920:	0019      	movs	r1, r3
 8002922:	0010      	movs	r0, r2
 8002924:	f000 f946 	bl	8002bb4 <write_rtc_register>
 8002928:	0003      	movs	r3, r0
 800292a:	001a      	movs	r2, r3
 800292c:	200b      	movs	r0, #11
 800292e:	183b      	adds	r3, r7, r0
 8002930:	1e51      	subs	r1, r2, #1
 8002932:	418a      	sbcs	r2, r1
 8002934:	701a      	strb	r2, [r3, #0]
    if (!bResult)
 8002936:	183b      	adds	r3, r7, r0
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2201      	movs	r2, #1
 800293c:	4053      	eors	r3, r2
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b00      	cmp	r3, #0
 8002942:	d009      	beq.n	8002958 <setCountdownTimer+0xdc>
    {
        printf(errorMsg, __LINE__);
 8002944:	23a2      	movs	r3, #162	@ 0xa2
 8002946:	33ff      	adds	r3, #255	@ 0xff
 8002948:	001a      	movs	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	0011      	movs	r1, r2
 800294e:	0018      	movs	r0, r3
 8002950:	f002 fb2a 	bl	8004fa8 <printf_>
        return false;
 8002954:	2300      	movs	r3, #0
 8002956:	e045      	b.n	80029e4 <setCountdownTimer+0x168>
    }

    // Enable countdown timer interrupt (TIE = 1) in IntMask
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE, 0);
 8002958:	2312      	movs	r3, #18
 800295a:	2108      	movs	r1, #8
 800295c:	250b      	movs	r5, #11
 800295e:	197c      	adds	r4, r7, r5
 8002960:	2200      	movs	r2, #0
 8002962:	0018      	movs	r0, r3
 8002964:	f000 f884 	bl	8002a70 <setRegisterBit>
 8002968:	0003      	movs	r3, r0
 800296a:	7023      	strb	r3, [r4, #0]
    if (!bResult)
 800296c:	197b      	adds	r3, r7, r5
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2201      	movs	r2, #1
 8002972:	4053      	eors	r3, r2
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d009      	beq.n	800298e <setCountdownTimer+0x112>
    {
        printf(errorMsg, __LINE__);
 800297a:	23aa      	movs	r3, #170	@ 0xaa
 800297c:	33ff      	adds	r3, #255	@ 0xff
 800297e:	001a      	movs	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	0011      	movs	r1, r2
 8002984:	0018      	movs	r0, r3
 8002986:	f002 fb0f 	bl	8004fa8 <printf_>
        return false;
 800298a:	2300      	movs	r3, #0
 800298c:	e02a      	b.n	80029e4 <setCountdownTimer+0x168>
    }

    // Set the TFS frequency to 1/60 Hz for minutes or 1 Hz for seconds
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
 800298e:	1cfb      	adds	r3, r7, #3
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <setCountdownTimer+0x11e>
 8002996:	2203      	movs	r2, #3
 8002998:	e000      	b.n	800299c <setCountdownTimer+0x120>
 800299a:	2202      	movs	r2, #2
 800299c:	210a      	movs	r1, #10
 800299e:	187b      	adds	r3, r7, r1
 80029a0:	701a      	strb	r2, [r3, #0]

    // Enable countdown timer (TE = 1) in countdown timer control register
    bResult = write_rtc_register(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
 80029a2:	2018      	movs	r0, #24
 80029a4:	2280      	movs	r2, #128	@ 0x80
 80029a6:	187b      	adds	r3, r7, r1
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	0019      	movs	r1, r3
 80029b0:	f000 f900 	bl	8002bb4 <write_rtc_register>
 80029b4:	0003      	movs	r3, r0
 80029b6:	001a      	movs	r2, r3
 80029b8:	200b      	movs	r0, #11
 80029ba:	183b      	adds	r3, r7, r0
 80029bc:	1e51      	subs	r1, r2, #1
 80029be:	418a      	sbcs	r2, r1
 80029c0:	701a      	strb	r2, [r3, #0]
    // bResult = write_rtc_register(REG_TIMER_CTRL, 0x42); // 0xc2

    if (!bResult)
 80029c2:	183b      	adds	r3, r7, r0
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2201      	movs	r2, #1
 80029c8:	4053      	eors	r3, r2
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d008      	beq.n	80029e2 <setCountdownTimer+0x166>
    {
        printf(errorMsg, __LINE__);
 80029d0:	23db      	movs	r3, #219	@ 0xdb
 80029d2:	005a      	lsls	r2, r3, #1
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	0011      	movs	r1, r2
 80029d8:	0018      	movs	r0, r3
 80029da:	f002 fae5 	bl	8004fa8 <printf_>
        return false;
 80029de:	2300      	movs	r3, #0
 80029e0:	e000      	b.n	80029e4 <setCountdownTimer+0x168>
    }

    return true;
 80029e2:	2301      	movs	r3, #1
}
 80029e4:	0018      	movs	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	b004      	add	sp, #16
 80029ea:	bdb0      	pop	{r4, r5, r7, pc}
 80029ec:	080093dc 	.word	0x080093dc

080029f0 <maskRegister>:

bool maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock)
{
 80029f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	0005      	movs	r5, r0
 80029f8:	000c      	movs	r4, r1
 80029fa:	0010      	movs	r0, r2
 80029fc:	0019      	movs	r1, r3
 80029fe:	1dfb      	adds	r3, r7, #7
 8002a00:	1c2a      	adds	r2, r5, #0
 8002a02:	701a      	strb	r2, [r3, #0]
 8002a04:	1dbb      	adds	r3, r7, #6
 8002a06:	1c22      	adds	r2, r4, #0
 8002a08:	701a      	strb	r2, [r3, #0]
 8002a0a:	1d7b      	adds	r3, r7, #5
 8002a0c:	1c02      	adds	r2, r0, #0
 8002a0e:	701a      	strb	r2, [r3, #0]
 8002a10:	1d3b      	adds	r3, r7, #4
 8002a12:	1c0a      	adds	r2, r1, #0
 8002a14:	701a      	strb	r2, [r3, #0]
    bool bResult = false;
 8002a16:	250f      	movs	r5, #15
 8002a18:	197b      	adds	r3, r7, r5
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]

    uint8_t value;

    value = read_rtc_register(regAddr);
 8002a1e:	260e      	movs	r6, #14
 8002a20:	19bc      	adds	r4, r7, r6
 8002a22:	1dfb      	adds	r3, r7, #7
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	0018      	movs	r0, r3
 8002a28:	f000 f892 	bl	8002b50 <read_rtc_register>
 8002a2c:	0003      	movs	r3, r0
 8002a2e:	7023      	strb	r3, [r4, #0]

    uint8_t newValue = (value & andValue) | orValue;
 8002a30:	19bb      	adds	r3, r7, r6
 8002a32:	1dba      	adds	r2, r7, #6
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	7812      	ldrb	r2, [r2, #0]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	b2d9      	uxtb	r1, r3
 8002a3c:	200d      	movs	r0, #13
 8002a3e:	183b      	adds	r3, r7, r0
 8002a40:	1d7a      	adds	r2, r7, #5
 8002a42:	7812      	ldrb	r2, [r2, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	701a      	strb	r2, [r3, #0]

    bResult = write_rtc_register(regAddr, newValue);
 8002a48:	183b      	adds	r3, r7, r0
 8002a4a:	781a      	ldrb	r2, [r3, #0]
 8002a4c:	1dfb      	adds	r3, r7, #7
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	0011      	movs	r1, r2
 8002a52:	0018      	movs	r0, r3
 8002a54:	f000 f8ae 	bl	8002bb4 <write_rtc_register>
 8002a58:	0003      	movs	r3, r0
 8002a5a:	001a      	movs	r2, r3
 8002a5c:	197b      	adds	r3, r7, r5
 8002a5e:	1e51      	subs	r1, r2, #1
 8002a60:	418a      	sbcs	r2, r1
 8002a62:	701a      	strb	r2, [r3, #0]

    return bResult;
 8002a64:	197b      	adds	r3, r7, r5
 8002a66:	781b      	ldrb	r3, [r3, #0]
}
 8002a68:	0018      	movs	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	b005      	add	sp, #20
 8002a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a70 <setRegisterBit>:
{
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
}

bool setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock)
{
 8002a70:	b590      	push	{r4, r7, lr}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	0004      	movs	r4, r0
 8002a78:	0008      	movs	r0, r1
 8002a7a:	0011      	movs	r1, r2
 8002a7c:	1dfb      	adds	r3, r7, #7
 8002a7e:	1c22      	adds	r2, r4, #0
 8002a80:	701a      	strb	r2, [r3, #0]
 8002a82:	1dbb      	adds	r3, r7, #6
 8002a84:	1c02      	adds	r2, r0, #0
 8002a86:	701a      	strb	r2, [r3, #0]
 8002a88:	1d7b      	adds	r3, r7, #5
 8002a8a:	1c0a      	adds	r2, r1, #0
 8002a8c:	701a      	strb	r2, [r3, #0]
    return maskRegister(regAddr, 0xff, bitMask, lock);
 8002a8e:	1d7b      	adds	r3, r7, #5
 8002a90:	7819      	ldrb	r1, [r3, #0]
 8002a92:	1dbb      	adds	r3, r7, #6
 8002a94:	781a      	ldrb	r2, [r3, #0]
 8002a96:	1dfb      	adds	r3, r7, #7
 8002a98:	7818      	ldrb	r0, [r3, #0]
 8002a9a:	000b      	movs	r3, r1
 8002a9c:	21ff      	movs	r1, #255	@ 0xff
 8002a9e:	f7ff ffa7 	bl	80029f0 <maskRegister>
 8002aa2:	0003      	movs	r3, r0
}
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b003      	add	sp, #12
 8002aaa:	bd90      	pop	{r4, r7, pc}

08002aac <SPI1_SendByte>:
{
    return wakeReason;
};

inline static uint8_t SPI1_SendByte(uint8_t data)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	0002      	movs	r2, r0
 8002ab4:	1dfb      	adds	r3, r7, #7
 8002ab6:	701a      	strb	r2, [r3, #0]
    uint32_t start_time = HAL_GetTick();
 8002ab8:	f002 fd5c 	bl	8005574 <HAL_GetTick>
 8002abc:	0003      	movs	r3, r0
 8002abe:	60fb      	str	r3, [r7, #12]
    while (LL_SPI_IsActiveFlag_TXE(SPI1) == RESET)
 8002ac0:	e00e      	b.n	8002ae0 <SPI1_SendByte+0x34>
    {
        if ((HAL_GetTick() - start_time) > 1000)
 8002ac2:	f002 fd57 	bl	8005574 <HAL_GetTick>
 8002ac6:	0002      	movs	r2, r0
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	1ad2      	subs	r2, r2, r3
 8002acc:	23fa      	movs	r3, #250	@ 0xfa
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d905      	bls.n	8002ae0 <SPI1_SendByte+0x34>
        {
            print_error(__func__, __LINE__);
 8002ad4:	4a1a      	ldr	r2, [pc, #104]	@ (8002b40 <SPI1_SendByte+0x94>)
 8002ad6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b44 <SPI1_SendByte+0x98>)
 8002ad8:	0011      	movs	r1, r2
 8002ada:	0018      	movs	r0, r3
 8002adc:	f000 fe4c 	bl	8003778 <print_error>
    while (LL_SPI_IsActiveFlag_TXE(SPI1) == RESET)
 8002ae0:	4b19      	ldr	r3, [pc, #100]	@ (8002b48 <SPI1_SendByte+0x9c>)
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f7ff fca3 	bl	800242e <LL_SPI_IsActiveFlag_TXE>
 8002ae8:	1e03      	subs	r3, r0, #0
 8002aea:	d0ea      	beq.n	8002ac2 <SPI1_SendByte+0x16>
        }
    }

    LL_SPI_TransmitData8(SPI1, data);
 8002aec:	1dfb      	adds	r3, r7, #7
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	4a15      	ldr	r2, [pc, #84]	@ (8002b48 <SPI1_SendByte+0x9c>)
 8002af2:	0019      	movs	r1, r3
 8002af4:	0010      	movs	r0, r2
 8002af6:	f7ff fcb7 	bl	8002468 <LL_SPI_TransmitData8>

    start_time = HAL_GetTick();
 8002afa:	f002 fd3b 	bl	8005574 <HAL_GetTick>
 8002afe:	0003      	movs	r3, r0
 8002b00:	60fb      	str	r3, [r7, #12]
    while (LL_SPI_IsActiveFlag_RXNE(SPI1) == RESET)
 8002b02:	e00e      	b.n	8002b22 <SPI1_SendByte+0x76>
    {
        if ((HAL_GetTick() - start_time) > 1000)
 8002b04:	f002 fd36 	bl	8005574 <HAL_GetTick>
 8002b08:	0002      	movs	r2, r0
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	1ad2      	subs	r2, r2, r3
 8002b0e:	23fa      	movs	r3, #250	@ 0xfa
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d905      	bls.n	8002b22 <SPI1_SendByte+0x76>
        {
            print_error(__func__, __LINE__);
 8002b16:	4a0d      	ldr	r2, [pc, #52]	@ (8002b4c <SPI1_SendByte+0xa0>)
 8002b18:	4b0a      	ldr	r3, [pc, #40]	@ (8002b44 <SPI1_SendByte+0x98>)
 8002b1a:	0011      	movs	r1, r2
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f000 fe2b 	bl	8003778 <print_error>
    while (LL_SPI_IsActiveFlag_RXNE(SPI1) == RESET)
 8002b22:	4b09      	ldr	r3, [pc, #36]	@ (8002b48 <SPI1_SendByte+0x9c>)
 8002b24:	0018      	movs	r0, r3
 8002b26:	f7ff fc71 	bl	800240c <LL_SPI_IsActiveFlag_RXNE>
 8002b2a:	1e03      	subs	r3, r0, #0
 8002b2c:	d0ea      	beq.n	8002b04 <SPI1_SendByte+0x58>
        }
    }

    return LL_SPI_ReceiveData8(SPI1);
 8002b2e:	4b06      	ldr	r3, [pc, #24]	@ (8002b48 <SPI1_SendByte+0x9c>)
 8002b30:	0018      	movs	r0, r3
 8002b32:	f7ff fc8d 	bl	8002450 <LL_SPI_ReceiveData8>
 8002b36:	0003      	movs	r3, r0
}
 8002b38:	0018      	movs	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	b004      	add	sp, #16
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	0000027a 	.word	0x0000027a
 8002b44:	08009578 	.word	0x08009578
 8002b48:	40013000 	.word	0x40013000
 8002b4c:	00000285 	.word	0x00000285

08002b50 <read_rtc_register>:

inline static uint8_t read_rtc_register(uint8_t reg_addr)
{
 8002b50:	b5b0      	push	{r4, r5, r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	0002      	movs	r2, r0
 8002b58:	1dfb      	adds	r3, r7, #7
 8002b5a:	701a      	strb	r2, [r3, #0]
    uint8_t val;
    uint32_t primask_bit = utils_enter_critical_section();
 8002b5c:	f000 f8d0 	bl	8002d00 <utils_enter_critical_section>
 8002b60:	0003      	movs	r3, r0
 8002b62:	60fb      	str	r3, [r7, #12]

    // #define AB1815_SPI_READ(offset) (127 & offset)		127 - 0x7F
    // #define AB1815_SPI_WRITE(offset) (128 | offset)  	128 - 0x80
    uint8_t addr = AB1815_SPI_READ(reg_addr);
 8002b64:	200b      	movs	r0, #11
 8002b66:	183b      	adds	r3, r7, r0
 8002b68:	1dfa      	adds	r2, r7, #7
 8002b6a:	7812      	ldrb	r2, [r2, #0]
 8002b6c:	217f      	movs	r1, #127	@ 0x7f
 8002b6e:	400a      	ands	r2, r1
 8002b70:	701a      	strb	r2, [r3, #0]
    RTC_L();
 8002b72:	4b0f      	ldr	r3, [pc, #60]	@ (8002bb0 <read_rtc_register+0x60>)
 8002b74:	2280      	movs	r2, #128	@ 0x80
 8002b76:	05d2      	lsls	r2, r2, #23
 8002b78:	619a      	str	r2, [r3, #24]
    SPI1_SendByte(addr);
 8002b7a:	183b      	adds	r3, r7, r0
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f7ff ff94 	bl	8002aac <SPI1_SendByte>
    val = SPI1_SendByte(0x00); // Send DUMMY to read data
 8002b84:	250a      	movs	r5, #10
 8002b86:	197c      	adds	r4, r7, r5
 8002b88:	2000      	movs	r0, #0
 8002b8a:	f7ff ff8f 	bl	8002aac <SPI1_SendByte>
 8002b8e:	0003      	movs	r3, r0
 8002b90:	7023      	strb	r3, [r4, #0]
    RTC_H();
 8002b92:	4b07      	ldr	r3, [pc, #28]	@ (8002bb0 <read_rtc_register+0x60>)
 8002b94:	2280      	movs	r2, #128	@ 0x80
 8002b96:	01d2      	lsls	r2, r2, #7
 8002b98:	619a      	str	r2, [r3, #24]
    utils_exit_critical_section(primask_bit);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f000 f8be 	bl	8002d1e <utils_exit_critical_section>

    return val;
 8002ba2:	197b      	adds	r3, r7, r5
 8002ba4:	781b      	ldrb	r3, [r3, #0]
}
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	b004      	add	sp, #16
 8002bac:	bdb0      	pop	{r4, r5, r7, pc}
 8002bae:	46c0      	nop			@ (mov r8, r8)
 8002bb0:	50000400 	.word	0x50000400

08002bb4 <write_rtc_register>:

inline static uint8_t write_rtc_register(uint8_t offset, uint8_t buf)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	0002      	movs	r2, r0
 8002bbc:	1dfb      	adds	r3, r7, #7
 8002bbe:	701a      	strb	r2, [r3, #0]
 8002bc0:	1dbb      	adds	r3, r7, #6
 8002bc2:	1c0a      	adds	r2, r1, #0
 8002bc4:	701a      	strb	r2, [r3, #0]
    // uint8_t address = AB1815_SPI_WRITE(offset);
    uint8_t address = offset | 0x80;
 8002bc6:	230f      	movs	r3, #15
 8002bc8:	18fb      	adds	r3, r7, r3
 8002bca:	1dfa      	adds	r2, r7, #7
 8002bcc:	7812      	ldrb	r2, [r2, #0]
 8002bce:	2180      	movs	r1, #128	@ 0x80
 8002bd0:	4249      	negs	r1, r1
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	701a      	strb	r2, [r3, #0]
    uint32_t primask_bit = utils_enter_critical_section();
 8002bd6:	f000 f893 	bl	8002d00 <utils_enter_critical_section>
 8002bda:	0003      	movs	r3, r0
 8002bdc:	60bb      	str	r3, [r7, #8]

    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 8002bde:	4b12      	ldr	r3, [pc, #72]	@ (8002c28 <write_rtc_register+0x74>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2240      	movs	r2, #64	@ 0x40
 8002be4:	4013      	ands	r3, r2
 8002be6:	d105      	bne.n	8002bf4 <write_rtc_register+0x40>
    {
        SPI1->CR1 |= SPI_CR1_SPE;
 8002be8:	4b0f      	ldr	r3, [pc, #60]	@ (8002c28 <write_rtc_register+0x74>)
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	4b0e      	ldr	r3, [pc, #56]	@ (8002c28 <write_rtc_register+0x74>)
 8002bee:	2140      	movs	r1, #64	@ 0x40
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	601a      	str	r2, [r3, #0]
    }
    spi_select_slave(0);
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	f7ff fc49 	bl	800248c <spi_select_slave>
    SPI1_SendByte(address);
 8002bfa:	230f      	movs	r3, #15
 8002bfc:	18fb      	adds	r3, r7, r3
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	0018      	movs	r0, r3
 8002c02:	f7ff ff53 	bl	8002aac <SPI1_SendByte>
    SPI1_SendByte(buf); // Send Data to write
 8002c06:	1dbb      	adds	r3, r7, #6
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	f7ff ff4e 	bl	8002aac <SPI1_SendByte>

    spi_select_slave(1);
 8002c10:	2001      	movs	r0, #1
 8002c12:	f7ff fc3b 	bl	800248c <spi_select_slave>
    utils_exit_critical_section(primask_bit);
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f000 f880 	bl	8002d1e <utils_exit_critical_section>
    return 1;
 8002c1e:	2301      	movs	r3, #1
};
 8002c20:	0018      	movs	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b004      	add	sp, #16
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40013000 	.word	0x40013000

08002c2c <hex_dump>:

void hex_dump(void)
{
 8002c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c2e:	46ce      	mov	lr, r9
 8002c30:	4647      	mov	r7, r8
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b08b      	sub	sp, #44	@ 0x2c
 8002c36:	af06      	add	r7, sp, #24
    uint8_t buffer[9];
    for (uint8_t pos = 0; pos < 0x3F; pos += 8) // 0x7f
 8002c38:	230f      	movs	r3, #15
 8002c3a:	18fb      	adds	r3, r7, r3
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]
 8002c40:	e04e      	b.n	8002ce0 <hex_dump+0xb4>
    {

        uint8_t ii = 0;
 8002c42:	210e      	movs	r1, #14
 8002c44:	187b      	adds	r3, r7, r1
 8002c46:	2200      	movs	r2, #0
 8002c48:	701a      	strb	r2, [r3, #0]
        for (ii = 0; ii < 7; ii++)
 8002c4a:	187b      	adds	r3, r7, r1
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	701a      	strb	r2, [r3, #0]
 8002c50:	e015      	b.n	8002c7e <hex_dump+0x52>
        {
            buffer[ii] = read_rtc_register(pos + ii);
 8002c52:	230f      	movs	r3, #15
 8002c54:	18fa      	adds	r2, r7, r3
 8002c56:	250e      	movs	r5, #14
 8002c58:	197b      	adds	r3, r7, r5
 8002c5a:	7812      	ldrb	r2, [r2, #0]
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	18d3      	adds	r3, r2, r3
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	197b      	adds	r3, r7, r5
 8002c64:	781c      	ldrb	r4, [r3, #0]
 8002c66:	0010      	movs	r0, r2
 8002c68:	f7ff ff72 	bl	8002b50 <read_rtc_register>
 8002c6c:	0003      	movs	r3, r0
 8002c6e:	001a      	movs	r2, r3
 8002c70:	1d3b      	adds	r3, r7, #4
 8002c72:	551a      	strb	r2, [r3, r4]
        for (ii = 0; ii < 7; ii++)
 8002c74:	197b      	adds	r3, r7, r5
 8002c76:	781a      	ldrb	r2, [r3, #0]
 8002c78:	197b      	adds	r3, r7, r5
 8002c7a:	3201      	adds	r2, #1
 8002c7c:	701a      	strb	r2, [r3, #0]
 8002c7e:	230e      	movs	r3, #14
 8002c80:	18fb      	adds	r3, r7, r3
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b06      	cmp	r3, #6
 8002c86:	d9e4      	bls.n	8002c52 <hex_dump+0x26>
        }
        printf("# 0x%02x: 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x\r\n", pos, buffer[0], buffer[1], buffer[2], buffer[3], buffer[4], buffer[5], buffer[6], buffer[7]);
 8002c88:	220f      	movs	r2, #15
 8002c8a:	18bb      	adds	r3, r7, r2
 8002c8c:	7819      	ldrb	r1, [r3, #0]
 8002c8e:	1d3b      	adds	r3, r7, #4
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	4698      	mov	r8, r3
 8002c94:	1d3b      	adds	r3, r7, #4
 8002c96:	785b      	ldrb	r3, [r3, #1]
 8002c98:	4699      	mov	r9, r3
 8002c9a:	1d3b      	adds	r3, r7, #4
 8002c9c:	789b      	ldrb	r3, [r3, #2]
 8002c9e:	001a      	movs	r2, r3
 8002ca0:	1d3b      	adds	r3, r7, #4
 8002ca2:	78db      	ldrb	r3, [r3, #3]
 8002ca4:	001c      	movs	r4, r3
 8002ca6:	1d3b      	adds	r3, r7, #4
 8002ca8:	791b      	ldrb	r3, [r3, #4]
 8002caa:	001d      	movs	r5, r3
 8002cac:	1d3b      	adds	r3, r7, #4
 8002cae:	795b      	ldrb	r3, [r3, #5]
 8002cb0:	001e      	movs	r6, r3
 8002cb2:	1d3b      	adds	r3, r7, #4
 8002cb4:	799b      	ldrb	r3, [r3, #6]
 8002cb6:	469c      	mov	ip, r3
 8002cb8:	1d3b      	adds	r3, r7, #4
 8002cba:	79db      	ldrb	r3, [r3, #7]
 8002cbc:	480f      	ldr	r0, [pc, #60]	@ (8002cfc <hex_dump+0xd0>)
 8002cbe:	9305      	str	r3, [sp, #20]
 8002cc0:	4663      	mov	r3, ip
 8002cc2:	9304      	str	r3, [sp, #16]
 8002cc4:	9603      	str	r6, [sp, #12]
 8002cc6:	9502      	str	r5, [sp, #8]
 8002cc8:	9401      	str	r4, [sp, #4]
 8002cca:	9200      	str	r2, [sp, #0]
 8002ccc:	464b      	mov	r3, r9
 8002cce:	4642      	mov	r2, r8
 8002cd0:	f002 f96a 	bl	8004fa8 <printf_>
    for (uint8_t pos = 0; pos < 0x3F; pos += 8) // 0x7f
 8002cd4:	220f      	movs	r2, #15
 8002cd6:	18bb      	adds	r3, r7, r2
 8002cd8:	18ba      	adds	r2, r7, r2
 8002cda:	7812      	ldrb	r2, [r2, #0]
 8002cdc:	3208      	adds	r2, #8
 8002cde:	701a      	strb	r2, [r3, #0]
 8002ce0:	230f      	movs	r3, #15
 8002ce2:	18fb      	adds	r3, r7, r3
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	2b3e      	cmp	r3, #62	@ 0x3e
 8002ce8:	d9ab      	bls.n	8002c42 <hex_dump+0x16>
    }
}
 8002cea:	46c0      	nop			@ (mov r8, r8)
 8002cec:	46c0      	nop			@ (mov r8, r8)
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	b005      	add	sp, #20
 8002cf2:	bcc0      	pop	{r6, r7}
 8002cf4:	46b9      	mov	r9, r7
 8002cf6:	46b0      	mov	r8, r6
 8002cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cfa:	46c0      	nop			@ (mov r8, r8)
 8002cfc:	08009418 	.word	0x08009418

08002d00 <utils_enter_critical_section>:

static inline uint32_t utils_enter_critical_section(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002d06:	f3ef 8310 	mrs	r3, PRIMASK
 8002d0a:	603b      	str	r3, [r7, #0]
  return(result);
 8002d0c:	683b      	ldr	r3, [r7, #0]
    uint32_t primask_bit = __get_PRIMASK();
 8002d0e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d10:	b672      	cpsid	i
}
 8002d12:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();
    return primask_bit;
 8002d14:	687b      	ldr	r3, [r7, #4]
}
 8002d16:	0018      	movs	r0, r3
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b002      	add	sp, #8
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <utils_exit_critical_section>:

static inline void utils_exit_critical_section(uint32_t primask_bit)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b084      	sub	sp, #16
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f383 8810 	msr	PRIMASK, r3
}
 8002d30:	46c0      	nop			@ (mov r8, r8)
    __set_PRIMASK(primask_bit);
}
 8002d32:	46c0      	nop			@ (mov r8, r8)
 8002d34:	46bd      	mov	sp, r7
 8002d36:	b004      	add	sp, #16
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <read>:
{
    return setWDT(-1);
}

uint8_t read(uint8_t reg)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	0002      	movs	r2, r0
 8002d42:	1dfb      	adds	r3, r7, #7
 8002d44:	701a      	strb	r2, [r3, #0]
    return read_rtc_register(reg);
 8002d46:	1dfb      	adds	r3, r7, #7
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f7ff ff00 	bl	8002b50 <read_rtc_register>
 8002d50:	0003      	movs	r3, r0
}
 8002d52:	0018      	movs	r0, r3
 8002d54:	46bd      	mov	sp, r7
 8002d56:	b002      	add	sp, #8
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <write>:

uint8_t write(uint8_t reg, uint8_t value)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b082      	sub	sp, #8
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	0002      	movs	r2, r0
 8002d62:	1dfb      	adds	r3, r7, #7
 8002d64:	701a      	strb	r2, [r3, #0]
 8002d66:	1dbb      	adds	r3, r7, #6
 8002d68:	1c0a      	adds	r2, r1, #0
 8002d6a:	701a      	strb	r2, [r3, #0]
    return write_rtc_register(reg, value);
 8002d6c:	1dbb      	adds	r3, r7, #6
 8002d6e:	781a      	ldrb	r2, [r3, #0]
 8002d70:	1dfb      	adds	r3, r7, #7
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	0011      	movs	r1, r2
 8002d76:	0018      	movs	r0, r3
 8002d78:	f7ff ff1c 	bl	8002bb4 <write_rtc_register>
 8002d7c:	0003      	movs	r3, r0
}
 8002d7e:	0018      	movs	r0, r3
 8002d80:	46bd      	mov	sp, r7
 8002d82:	b002      	add	sp, #8
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	4a05      	ldr	r2, [pc, #20]	@ (8002dac <LL_ADC_EnableInternalRegulator+0x24>)
 8002d96:	4013      	ands	r3, r2
 8002d98:	2280      	movs	r2, #128	@ 0x80
 8002d9a:	0552      	lsls	r2, r2, #21
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002da2:	46c0      	nop			@ (mov r8, r8)
 8002da4:	46bd      	mov	sp, r7
 8002da6:	b002      	add	sp, #8
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	46c0      	nop			@ (mov r8, r8)
 8002dac:	6fffffe8 	.word	0x6fffffe8

08002db0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	4a04      	ldr	r2, [pc, #16]	@ (8002dd0 <LL_ADC_Enable+0x20>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002dc8:	46c0      	nop			@ (mov r8, r8)
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	b002      	add	sp, #8
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	7fffffe8 	.word	0x7fffffe8

08002dd4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	2201      	movs	r2, #1
 8002de2:	4013      	ands	r3, r2
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <LL_ADC_IsEnabled+0x18>
 8002de8:	2301      	movs	r3, #1
 8002dea:	e000      	b.n	8002dee <LL_ADC_IsEnabled+0x1a>
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	0018      	movs	r0, r3
 8002df0:	46bd      	mov	sp, r7
 8002df2:	b002      	add	sp, #8
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b082      	sub	sp, #8
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	2202      	movs	r2, #2
 8002e04:	4013      	ands	r3, r2
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d101      	bne.n	8002e0e <LL_ADC_IsDisableOngoing+0x18>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <LL_ADC_IsDisableOngoing+0x1a>
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	0018      	movs	r0, r3
 8002e12:	46bd      	mov	sp, r7
 8002e14:	b002      	add	sp, #8
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <LL_ADC_StartCalibration>:
  * @rmtoll CR       ADCAL          LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	4a05      	ldr	r2, [pc, #20]	@ (8002e3c <LL_ADC_StartCalibration+0x24>)
 8002e26:	4013      	ands	r3, r2
 8002e28:	2280      	movs	r2, #128	@ 0x80
 8002e2a:	0612      	lsls	r2, r2, #24
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL);
}
 8002e32:	46c0      	nop			@ (mov r8, r8)
 8002e34:	46bd      	mov	sp, r7
 8002e36:	b002      	add	sp, #8
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	46c0      	nop			@ (mov r8, r8)
 8002e3c:	7fffffe8 	.word	0x7fffffe8

08002e40 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(const ADC_TypeDef *ADCx)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	0fdb      	lsrs	r3, r3, #31
 8002e4e:	07da      	lsls	r2, r3, #31
 8002e50:	2380      	movs	r3, #128	@ 0x80
 8002e52:	061b      	lsls	r3, r3, #24
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d101      	bne.n	8002e5c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e000      	b.n	8002e5e <LL_ADC_IsCalibrationOnGoing+0x1e>
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	0018      	movs	r0, r3
 8002e60:	46bd      	mov	sp, r7
 8002e62:	b002      	add	sp, #8
 8002e64:	bd80      	pop	{r7, pc}
	...

08002e68 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	4a04      	ldr	r2, [pc, #16]	@ (8002e88 <LL_ADC_REG_StartConversion+0x20>)
 8002e76:	4013      	ands	r3, r2
 8002e78:	2204      	movs	r2, #4
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e80:	46c0      	nop			@ (mov r8, r8)
 8002e82:	46bd      	mov	sp, r7
 8002e84:	b002      	add	sp, #8
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	7fffffe8 	.word	0x7fffffe8

08002e8c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	2204      	movs	r2, #4
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	d101      	bne.n	8002ea4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e000      	b.n	8002ea6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	b002      	add	sp, #8
 8002eac:	bd80      	pop	{r7, pc}

08002eae <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       DATA           LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(const ADC_TypeDef *ADCx)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA) & 0x00000FFFUL);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	051b      	lsls	r3, r3, #20
 8002ebe:	0d1b      	lsrs	r3, r3, #20
 8002ec0:	b29b      	uxth	r3, r3
}
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	b002      	add	sp, #8
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <LL_ADC_IsActiveFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(const ADC_TypeDef *ADCx)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	4013      	ands	r3, r2
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d101      	bne.n	8002ee2 <LL_ADC_IsActiveFlag_ADRDY+0x18>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <LL_ADC_IsActiveFlag_ADRDY+0x1a>
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b002      	add	sp, #8
 8002eea:	bd80      	pop	{r7, pc}

08002eec <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(const ADC_TypeDef *ADCx)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2204      	movs	r2, #4
 8002efa:	4013      	ands	r3, r2
 8002efc:	2b04      	cmp	r3, #4
 8002efe:	d101      	bne.n	8002f04 <LL_ADC_IsActiveFlag_EOC+0x18>
 8002f00:	2301      	movs	r3, #1
 8002f02:	e000      	b.n	8002f06 <LL_ADC_IsActiveFlag_EOC+0x1a>
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	0018      	movs	r0, r3
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	b002      	add	sp, #8
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2204      	movs	r2, #4
 8002f1a:	601a      	str	r2, [r3, #0]
}
 8002f1c:	46c0      	nop			@ (mov r8, r8)
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b002      	add	sp, #8
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002f2a:	1d3b      	adds	r3, r7, #4
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	230c      	movs	r3, #12
 8002f30:	001a      	movs	r2, r3
 8002f32:	2100      	movs	r1, #0
 8002f34:	f006 f95a 	bl	80091ec <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 8002f38:	4b32      	ldr	r3, [pc, #200]	@ (8003004 <MX_ADC1_Init+0xe0>)
 8002f3a:	4a33      	ldr	r2, [pc, #204]	@ (8003008 <MX_ADC1_Init+0xe4>)
 8002f3c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002f3e:	4b31      	ldr	r3, [pc, #196]	@ (8003004 <MX_ADC1_Init+0xe0>)
 8002f40:	22c0      	movs	r2, #192	@ 0xc0
 8002f42:	0612      	lsls	r2, r2, #24
 8002f44:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002f46:	4b2f      	ldr	r3, [pc, #188]	@ (8003004 <MX_ADC1_Init+0xe0>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f4c:	4b2d      	ldr	r3, [pc, #180]	@ (8003004 <MX_ADC1_Init+0xe0>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002f52:	4b2c      	ldr	r3, [pc, #176]	@ (8003004 <MX_ADC1_Init+0xe0>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002f58:	4b2a      	ldr	r3, [pc, #168]	@ (8003004 <MX_ADC1_Init+0xe0>)
 8002f5a:	2204      	movs	r2, #4
 8002f5c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002f5e:	4b29      	ldr	r3, [pc, #164]	@ (8003004 <MX_ADC1_Init+0xe0>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002f64:	4b27      	ldr	r3, [pc, #156]	@ (8003004 <MX_ADC1_Init+0xe0>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002f6a:	4b26      	ldr	r3, [pc, #152]	@ (8003004 <MX_ADC1_Init+0xe0>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8002f70:	4b24      	ldr	r3, [pc, #144]	@ (8003004 <MX_ADC1_Init+0xe0>)
 8002f72:	2201      	movs	r2, #1
 8002f74:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002f76:	4b23      	ldr	r3, [pc, #140]	@ (8003004 <MX_ADC1_Init+0xe0>)
 8002f78:	2220      	movs	r2, #32
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f7e:	4b21      	ldr	r3, [pc, #132]	@ (8003004 <MX_ADC1_Init+0xe0>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f84:	4b1f      	ldr	r3, [pc, #124]	@ (8003004 <MX_ADC1_Init+0xe0>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8003004 <MX_ADC1_Init+0xe0>)
 8002f8c:	222c      	movs	r2, #44	@ 0x2c
 8002f8e:	2100      	movs	r1, #0
 8002f90:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002f92:	4b1c      	ldr	r3, [pc, #112]	@ (8003004 <MX_ADC1_Init+0xe0>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_19CYCLES_5;
 8002f98:	4b1a      	ldr	r3, [pc, #104]	@ (8003004 <MX_ADC1_Init+0xe0>)
 8002f9a:	2204      	movs	r2, #4
 8002f9c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 8002f9e:	4b19      	ldr	r3, [pc, #100]	@ (8003004 <MX_ADC1_Init+0xe0>)
 8002fa0:	2206      	movs	r2, #6
 8002fa2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = ENABLE;
 8002fa4:	4b17      	ldr	r3, [pc, #92]	@ (8003004 <MX_ADC1_Init+0xe0>)
 8002fa6:	223c      	movs	r2, #60	@ 0x3c
 8002fa8:	2101      	movs	r1, #1
 8002faa:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_8;
 8002fac:	4b15      	ldr	r3, [pc, #84]	@ (8003004 <MX_ADC1_Init+0xe0>)
 8002fae:	2208      	movs	r2, #8
 8002fb0:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_3;
 8002fb2:	4b14      	ldr	r3, [pc, #80]	@ (8003004 <MX_ADC1_Init+0xe0>)
 8002fb4:	2260      	movs	r2, #96	@ 0x60
 8002fb6:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8002fb8:	4b12      	ldr	r3, [pc, #72]	@ (8003004 <MX_ADC1_Init+0xe0>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002fbe:	4b11      	ldr	r3, [pc, #68]	@ (8003004 <MX_ADC1_Init+0xe0>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8003004 <MX_ADC1_Init+0xe0>)
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	f002 fbfe 	bl	80057c8 <HAL_ADC_Init>
 8002fcc:	1e03      	subs	r3, r0, #0
 8002fce:	d001      	beq.n	8002fd4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8002fd0:	f000 fbf1 	bl	80037b6 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002fd4:	1d3b      	adds	r3, r7, #4
 8002fd6:	4a0d      	ldr	r2, [pc, #52]	@ (800300c <MX_ADC1_Init+0xe8>)
 8002fd8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002fda:	1d3b      	adds	r3, r7, #4
 8002fdc:	2200      	movs	r2, #0
 8002fde:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002fe0:	1d3b      	adds	r3, r7, #4
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fe6:	1d3a      	adds	r2, r7, #4
 8002fe8:	4b06      	ldr	r3, [pc, #24]	@ (8003004 <MX_ADC1_Init+0xe0>)
 8002fea:	0011      	movs	r1, r2
 8002fec:	0018      	movs	r0, r3
 8002fee:	f002 fd93 	bl	8005b18 <HAL_ADC_ConfigChannel>
 8002ff2:	1e03      	subs	r3, r0, #0
 8002ff4:	d001      	beq.n	8002ffa <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8002ff6:	f000 fbde 	bl	80037b6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8002ffa:	46c0      	nop			@ (mov r8, r8)
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	b004      	add	sp, #16
 8003000:	bd80      	pop	{r7, pc}
 8003002:	46c0      	nop			@ (mov r8, r8)
 8003004:	20000038 	.word	0x20000038
 8003008:	40012400 	.word	0x40012400
 800300c:	b0001000 	.word	0xb0001000

08003010 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{
 8003010:	b590      	push	{r4, r7, lr}
 8003012:	b095      	sub	sp, #84	@ 0x54
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003018:	240c      	movs	r4, #12
 800301a:	193b      	adds	r3, r7, r4
 800301c:	0018      	movs	r0, r3
 800301e:	2344      	movs	r3, #68	@ 0x44
 8003020:	001a      	movs	r2, r3
 8003022:	2100      	movs	r1, #0
 8003024:	f006 f8e2 	bl	80091ec <memset>
  if (adcHandle->Instance == ADC1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a11      	ldr	r2, [pc, #68]	@ (8003074 <HAL_ADC_MspInit+0x64>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d11c      	bne.n	800306c <HAL_ADC_MspInit+0x5c>

    /* USER CODE END ADC1_MspInit 0 */

    /** Initializes the peripherals clocks
     */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003032:	193b      	adds	r3, r7, r4
 8003034:	2280      	movs	r2, #128	@ 0x80
 8003036:	01d2      	lsls	r2, r2, #7
 8003038:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800303a:	193b      	adds	r3, r7, r4
 800303c:	2200      	movs	r2, #0
 800303e:	63da      	str	r2, [r3, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003040:	193b      	adds	r3, r7, r4
 8003042:	0018      	movs	r0, r3
 8003044:	f004 f904 	bl	8007250 <HAL_RCCEx_PeriphCLKConfig>
 8003048:	1e03      	subs	r3, r0, #0
 800304a:	d001      	beq.n	8003050 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 800304c:	f000 fbb3 	bl	80037b6 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003050:	4b09      	ldr	r3, [pc, #36]	@ (8003078 <HAL_ADC_MspInit+0x68>)
 8003052:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003054:	4b08      	ldr	r3, [pc, #32]	@ (8003078 <HAL_ADC_MspInit+0x68>)
 8003056:	2180      	movs	r1, #128	@ 0x80
 8003058:	0349      	lsls	r1, r1, #13
 800305a:	430a      	orrs	r2, r1
 800305c:	661a      	str	r2, [r3, #96]	@ 0x60
 800305e:	4b06      	ldr	r3, [pc, #24]	@ (8003078 <HAL_ADC_MspInit+0x68>)
 8003060:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003062:	2380      	movs	r3, #128	@ 0x80
 8003064:	035b      	lsls	r3, r3, #13
 8003066:	4013      	ands	r3, r2
 8003068:	60bb      	str	r3, [r7, #8]
 800306a:	68bb      	ldr	r3, [r7, #8]
    /* USER CODE BEGIN ADC1_MspInit 1 */

    /* USER CODE END ADC1_MspInit 1 */
  }
}
 800306c:	46c0      	nop			@ (mov r8, r8)
 800306e:	46bd      	mov	sp, r7
 8003070:	b015      	add	sp, #84	@ 0x54
 8003072:	bd90      	pop	{r4, r7, pc}
 8003074:	40012400 	.word	0x40012400
 8003078:	40021000 	.word	0x40021000

0800307c <get_vbat>:
/* USER CODE BEGIN 1 */

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

uint32_t get_vbat(void)
{
 800307c:	b5b0      	push	{r4, r5, r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
	printf("get_vbat\n");
 8003082:	4b31      	ldr	r3, [pc, #196]	@ (8003148 <get_vbat+0xcc>)
 8003084:	0018      	movs	r0, r3
 8003086:	f001 ff8f 	bl	8004fa8 <printf_>
  uint32_t Vdda;
  uint16_t Vrefcal = (*(uint16_t *)0x1FFF6EA4);
 800308a:	4a30      	ldr	r2, [pc, #192]	@ (800314c <get_vbat+0xd0>)
 800308c:	1dbb      	adds	r3, r7, #6
 800308e:	8812      	ldrh	r2, [r2, #0]
 8003090:	801a      	strh	r2, [r3, #0]

  printf("Vrefcal = %d\n", Vrefcal);
 8003092:	1dbb      	adds	r3, r7, #6
 8003094:	881a      	ldrh	r2, [r3, #0]
 8003096:	4b2e      	ldr	r3, [pc, #184]	@ (8003150 <get_vbat+0xd4>)
 8003098:	0011      	movs	r1, r2
 800309a:	0018      	movs	r0, r3
 800309c:	f001 ff84 	bl	8004fa8 <printf_>
  /* Reset status variable of ADC unitary conversion before performing      */
  /* a new ADC conversion start.                                            */
  /* Note: Optionally, for this example purpose, check ADC unitary          */
  /*       conversion status before starting another ADC conversion.        */

  if (ubAdcGrpRegularUnitaryConvStatus != 0)
 80030a0:	4b2c      	ldr	r3, [pc, #176]	@ (8003154 <get_vbat+0xd8>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <get_vbat+0x36>
  {
    ubAdcGrpRegularUnitaryConvStatus = 0;
 80030aa:	4b2a      	ldr	r3, [pc, #168]	@ (8003154 <get_vbat+0xd8>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	701a      	strb	r2, [r3, #0]
 80030b0:	e001      	b.n	80030b6 <get_vbat+0x3a>
  }
  else
  {
    Error_Handler();
 80030b2:	f000 fb80 	bl	80037b6 <Error_Handler>
  }

  /* Init variable containing ADC conversion data */
  uhADCxConvertedData = VAR_CONVERTED_DATA_INIT_VALUE; // VAR_CONVERTED_DATA_INIT_VALUE
 80030b6:	4b28      	ldr	r3, [pc, #160]	@ (8003158 <get_vbat+0xdc>)
 80030b8:	2280      	movs	r2, #128	@ 0x80
 80030ba:	0152      	lsls	r2, r2, #5
 80030bc:	801a      	strh	r2, [r3, #0]

  /* Perform ADC group regular conversion start, poll for conversion        */
  /* completion.                                                            */
  ConversionStartPoll_ADC_GrpRegular();
 80030be:	f000 f8a9 	bl	8003214 <ConversionStartPoll_ADC_GrpRegular>

  /* Retrieve ADC conversion data */
  /* (data scale corresponds to ADC resolution: 12 bits) */
  uhADCxConvertedData = LL_ADC_REG_ReadConversionData12(ADC1);
 80030c2:	4b26      	ldr	r3, [pc, #152]	@ (800315c <get_vbat+0xe0>)
 80030c4:	0018      	movs	r0, r3
 80030c6:	f7ff fef2 	bl	8002eae <LL_ADC_REG_ReadConversionData12>
 80030ca:	0003      	movs	r3, r0
 80030cc:	001a      	movs	r2, r3
 80030ce:	4b22      	ldr	r3, [pc, #136]	@ (8003158 <get_vbat+0xdc>)
 80030d0:	801a      	strh	r2, [r3, #0]

  /* Update status variable of ADC unitary conversion */
  ubAdcGrpRegularUnitaryConvStatus = 1;
 80030d2:	4b20      	ldr	r3, [pc, #128]	@ (8003154 <get_vbat+0xd8>)
 80030d4:	2201      	movs	r2, #1
 80030d6:	701a      	strb	r2, [r3, #0]

  /* Computation of ADC conversions raw data to physical values           */
  /* using LL ADC driver helper macro.                                    */
  printf("uhADCxConvertedData:  %d\n", uhADCxConvertedData);
 80030d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003158 <get_vbat+0xdc>)
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	b29b      	uxth	r3, r3
 80030de:	001a      	movs	r2, r3
 80030e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003160 <get_vbat+0xe4>)
 80030e2:	0011      	movs	r1, r2
 80030e4:	0018      	movs	r0, r3
 80030e6:	f001 ff5f 	bl	8004fa8 <printf_>

		// #define VDDA_APPLI ((uint32_t)3300)


  printf("uhADCxConvertedData_Voltage_mVolt:  %d\n", uhADCxConvertedData_Voltage_mVolt);
 80030ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003164 <get_vbat+0xe8>)
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	001a      	movs	r2, r3
 80030f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003168 <get_vbat+0xec>)
 80030f4:	0011      	movs	r1, r2
 80030f6:	0018      	movs	r0, r3
 80030f8:	f001 ff56 	bl	8004fa8 <printf_>
  /* Note: ADC conversion data is stored into variable                      */
  /*       "uhADCxConvertedData".                                           */
  /*       (for debug: see variable content into watch window).             */

  Vdda = (3000.0*Vrefcal)/uhADCxConvertedData;;
 80030fc:	1dbb      	adds	r3, r7, #6
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	0018      	movs	r0, r3
 8003102:	f7ff f925 	bl	8002350 <__aeabi_i2d>
 8003106:	2200      	movs	r2, #0
 8003108:	4b18      	ldr	r3, [pc, #96]	@ (800316c <get_vbat+0xf0>)
 800310a:	f7fe fa81 	bl	8001610 <__aeabi_dmul>
 800310e:	0002      	movs	r2, r0
 8003110:	000b      	movs	r3, r1
 8003112:	0014      	movs	r4, r2
 8003114:	001d      	movs	r5, r3
 8003116:	4b10      	ldr	r3, [pc, #64]	@ (8003158 <get_vbat+0xdc>)
 8003118:	881b      	ldrh	r3, [r3, #0]
 800311a:	b29b      	uxth	r3, r3
 800311c:	0018      	movs	r0, r3
 800311e:	f7ff f917 	bl	8002350 <__aeabi_i2d>
 8003122:	0002      	movs	r2, r0
 8003124:	000b      	movs	r3, r1
 8003126:	0020      	movs	r0, r4
 8003128:	0029      	movs	r1, r5
 800312a:	f7fd fe2d 	bl	8000d88 <__aeabi_ddiv>
 800312e:	0002      	movs	r2, r0
 8003130:	000b      	movs	r3, r1
 8003132:	0010      	movs	r0, r2
 8003134:	0019      	movs	r1, r3
 8003136:	f7fd f9d9 	bl	80004ec <__aeabi_d2uiz>
 800313a:	0003      	movs	r3, r0
 800313c:	603b      	str	r3, [r7, #0]

  return Vdda;
 800313e:	683b      	ldr	r3, [r7, #0]
}
 8003140:	0018      	movs	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	b002      	add	sp, #8
 8003146:	bdb0      	pop	{r4, r5, r7, pc}
 8003148:	0800945c 	.word	0x0800945c
 800314c:	1fff6ea4 	.word	0x1fff6ea4
 8003150:	08009468 	.word	0x08009468
 8003154:	20000002 	.word	0x20000002
 8003158:	20000000 	.word	0x20000000
 800315c:	40012400 	.word	0x40012400
 8003160:	08009478 	.word	0x08009478
 8003164:	20000034 	.word	0x20000034
 8003168:	08009494 	.word	0x08009494
 800316c:	40a77000 	.word	0x40a77000

08003170 <Activate_ADC>:
 *                 after this function
 * @param  None
 * @retval None
 */
void Activate_ADC(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
  __IO uint32_t wait_loop_index = 0;
 8003176:	2300      	movs	r3, #0
 8003178:	607b      	str	r3, [r7, #4]
  /*       implemented anyway to show the best practice usages                */
  /*       corresponding to reference manual procedure.                       */
  /*       Software can be optimized by removing some of these checks, if     */
  /*       they are not relevant considering previous settings and actions    */
  /*       in user application.                                               */
  if (LL_ADC_IsEnabled(ADC1) == 0)
 800317a:	4b23      	ldr	r3, [pc, #140]	@ (8003208 <Activate_ADC+0x98>)
 800317c:	0018      	movs	r0, r3
 800317e:	f7ff fe29 	bl	8002dd4 <LL_ADC_IsEnabled>
 8003182:	1e03      	subs	r3, r0, #0
 8003184:	d13b      	bne.n	80031fe <Activate_ADC+0x8e>
  {
    /* Disable ADC deep power down (enabled by default after reset state) */
    // LL_ADC_DisableDeepPowerDown(ADC1);

    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(ADC1);
 8003186:	4b20      	ldr	r3, [pc, #128]	@ (8003208 <Activate_ADC+0x98>)
 8003188:	0018      	movs	r0, r3
 800318a:	f7ff fdfd 	bl	8002d88 <LL_ADC_EnableInternalRegulator>
    /* Compute number of CPU cycles to wait for, from delay in us.            */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles (depends on compilation optimization).     */
    /* Note: If system core clock frequency is below 200kHz, wait time        */
    /*       is only a few CPU processing cycles.                             */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 800318e:	4b1f      	ldr	r3, [pc, #124]	@ (800320c <Activate_ADC+0x9c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	491f      	ldr	r1, [pc, #124]	@ (8003210 <Activate_ADC+0xa0>)
 8003194:	0018      	movs	r0, r3
 8003196:	f7fc ffb7 	bl	8000108 <__udivsi3>
 800319a:	0003      	movs	r3, r0
 800319c:	001a      	movs	r2, r3
 800319e:	0013      	movs	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	189b      	adds	r3, r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	210a      	movs	r1, #10
 80031a8:	0018      	movs	r0, r3
 80031aa:	f7fc ffad 	bl	8000108 <__udivsi3>
 80031ae:	0003      	movs	r3, r0
 80031b0:	607b      	str	r3, [r7, #4]
    while (wait_loop_index != 0)
 80031b2:	e002      	b.n	80031ba <Activate_ADC+0x4a>
    {
      wait_loop_index--;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	607b      	str	r3, [r7, #4]
    while (wait_loop_index != 0)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1f9      	bne.n	80031b4 <Activate_ADC+0x44>
    }

    /* Run ADC self calibration */
    LL_ADC_StartCalibration(ADC1);
 80031c0:	4b11      	ldr	r3, [pc, #68]	@ (8003208 <Activate_ADC+0x98>)
 80031c2:	0018      	movs	r0, r3
 80031c4:	f7ff fe28 	bl	8002e18 <LL_ADC_StartCalibration>
/* Poll for ADC effectively calibrated */
#if (USE_TIMEOUT == 1)
    Timeout = ADC_CALIBRATION_TIMEOUT_MS;
#endif /* USE_TIMEOUT */

    while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0)
 80031c8:	46c0      	nop			@ (mov r8, r8)
 80031ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003208 <Activate_ADC+0x98>)
 80031cc:	0018      	movs	r0, r3
 80031ce:	f7ff fe37 	bl	8002e40 <LL_ADC_IsCalibrationOnGoing>
 80031d2:	1e03      	subs	r3, r0, #0
 80031d4:	d1f9      	bne.n	80031ca <Activate_ADC+0x5a>
    }

    /* Delay between ADC end of calibration and ADC enable.                   */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles (depends on compilation optimization).     */
    wait_loop_index = (ADC_DELAY_CALIB_ENABLE_CPU_CYCLES >> 1);
 80031d6:	2320      	movs	r3, #32
 80031d8:	607b      	str	r3, [r7, #4]
    while (wait_loop_index != 0)
 80031da:	e002      	b.n	80031e2 <Activate_ADC+0x72>
    {
      wait_loop_index--;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3b01      	subs	r3, #1
 80031e0:	607b      	str	r3, [r7, #4]
    while (wait_loop_index != 0)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1f9      	bne.n	80031dc <Activate_ADC+0x6c>
    }

    /* Enable ADC */
    LL_ADC_Enable(ADC1);
 80031e8:	4b07      	ldr	r3, [pc, #28]	@ (8003208 <Activate_ADC+0x98>)
 80031ea:	0018      	movs	r0, r3
 80031ec:	f7ff fde0 	bl	8002db0 <LL_ADC_Enable>
/* Poll for ADC ready to convert */
#if (USE_TIMEOUT == 1)
    Timeout = ADC_ENABLE_TIMEOUT_MS;
#endif /* USE_TIMEOUT */

    while (LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0)
 80031f0:	46c0      	nop			@ (mov r8, r8)
 80031f2:	4b05      	ldr	r3, [pc, #20]	@ (8003208 <Activate_ADC+0x98>)
 80031f4:	0018      	movs	r0, r3
 80031f6:	f7ff fe68 	bl	8002eca <LL_ADC_IsActiveFlag_ADRDY>
 80031fa:	1e03      	subs	r3, r0, #0
 80031fc:	d0f9      	beq.n	80031f2 <Activate_ADC+0x82>
  /*## Operation on ADC hierarchical scope: ADC group injected ###############*/
  /* Note: No operation on ADC group injected performed here.                 */
  /*       ADC group injected conversions to be performed after this function */
  /*       using function:                                                    */
  /*   																		*/
}
 80031fe:	46c0      	nop			@ (mov r8, r8)
 8003200:	46bd      	mov	sp, r7
 8003202:	b002      	add	sp, #8
 8003204:	bd80      	pop	{r7, pc}
 8003206:	46c0      	nop			@ (mov r8, r8)
 8003208:	40012400 	.word	0x40012400
 800320c:	20000004 	.word	0x20000004
 8003210:	00030d40 	.word	0x00030d40

08003214 <ConversionStartPoll_ADC_GrpRegular>:
 *         external trigger, ADC group regular conversion stop must be added.
 * @param  None
 * @retval None
 */
void ConversionStartPoll_ADC_GrpRegular(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /*       implemented anyway to show the best practice usages                */
  /*       corresponding to reference manual procedure.                       */
  /*       Software can be optimized by removing some of these checks, if     */
  /*       they are not relevant considering previous settings and actions    */
  /*       in user application.                                               */
  if ((LL_ADC_IsEnabled(ADC1) == 1) &&
 8003218:	4b13      	ldr	r3, [pc, #76]	@ (8003268 <ConversionStartPoll_ADC_GrpRegular+0x54>)
 800321a:	0018      	movs	r0, r3
 800321c:	f7ff fdda 	bl	8002dd4 <LL_ADC_IsEnabled>
 8003220:	0003      	movs	r3, r0
 8003222:	2b01      	cmp	r3, #1
 8003224:	d110      	bne.n	8003248 <ConversionStartPoll_ADC_GrpRegular+0x34>
      (LL_ADC_IsDisableOngoing(ADC1) == 0) &&
 8003226:	4b10      	ldr	r3, [pc, #64]	@ (8003268 <ConversionStartPoll_ADC_GrpRegular+0x54>)
 8003228:	0018      	movs	r0, r3
 800322a:	f7ff fde4 	bl	8002df6 <LL_ADC_IsDisableOngoing>
 800322e:	1e03      	subs	r3, r0, #0
  if ((LL_ADC_IsEnabled(ADC1) == 1) &&
 8003230:	d10a      	bne.n	8003248 <ConversionStartPoll_ADC_GrpRegular+0x34>
      (LL_ADC_REG_IsConversionOngoing(ADC1) == 0))
 8003232:	4b0d      	ldr	r3, [pc, #52]	@ (8003268 <ConversionStartPoll_ADC_GrpRegular+0x54>)
 8003234:	0018      	movs	r0, r3
 8003236:	f7ff fe29 	bl	8002e8c <LL_ADC_REG_IsConversionOngoing>
 800323a:	1e03      	subs	r3, r0, #0
      (LL_ADC_IsDisableOngoing(ADC1) == 0) &&
 800323c:	d104      	bne.n	8003248 <ConversionStartPoll_ADC_GrpRegular+0x34>
  {
    LL_ADC_REG_StartConversion(ADC1);
 800323e:	4b0a      	ldr	r3, [pc, #40]	@ (8003268 <ConversionStartPoll_ADC_GrpRegular+0x54>)
 8003240:	0018      	movs	r0, r3
 8003242:	f7ff fe11 	bl	8002e68 <LL_ADC_REG_StartConversion>
 8003246:	e001      	b.n	800324c <ConversionStartPoll_ADC_GrpRegular+0x38>
  }
  else
  {
    /* Error: ADC conversion start could not be performed */
    Error_Handler();
 8003248:	f000 fab5 	bl	80037b6 <Error_Handler>

#if (USE_TIMEOUT == 1)
  Timeout = ADC_UNITARY_CONVERSION_TIMEOUT_MS;
#endif /* USE_TIMEOUT */

  while (LL_ADC_IsActiveFlag_EOC(ADC1) == 0)
 800324c:	46c0      	nop			@ (mov r8, r8)
 800324e:	4b06      	ldr	r3, [pc, #24]	@ (8003268 <ConversionStartPoll_ADC_GrpRegular+0x54>)
 8003250:	0018      	movs	r0, r3
 8003252:	f7ff fe4b 	bl	8002eec <LL_ADC_IsActiveFlag_EOC>
 8003256:	1e03      	subs	r3, r0, #0
 8003258:	d0f9      	beq.n	800324e <ConversionStartPoll_ADC_GrpRegular+0x3a>
      }
    }
#endif /* USE_TIMEOUT */
  }

  LL_ADC_ClearFlag_EOC(ADC1);
 800325a:	4b03      	ldr	r3, [pc, #12]	@ (8003268 <ConversionStartPoll_ADC_GrpRegular+0x54>)
 800325c:	0018      	movs	r0, r3
 800325e:	f7ff fe56 	bl	8002f0e <LL_ADC_ClearFlag_EOC>
}
 8003262:	46c0      	nop			@ (mov r8, r8)
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40012400 	.word	0x40012400

0800326c <MX_GPIO_Init>:
/** Configure pins
     PA13 (SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 800326c:	b590      	push	{r4, r7, lr}
 800326e:	b08b      	sub	sp, #44	@ 0x2c
 8003270:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003272:	2414      	movs	r4, #20
 8003274:	193b      	adds	r3, r7, r4
 8003276:	0018      	movs	r0, r3
 8003278:	2314      	movs	r3, #20
 800327a:	001a      	movs	r2, r3
 800327c:	2100      	movs	r1, #0
 800327e:	f005 ffb5 	bl	80091ec <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003282:	4b78      	ldr	r3, [pc, #480]	@ (8003464 <MX_GPIO_Init+0x1f8>)
 8003284:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003286:	4b77      	ldr	r3, [pc, #476]	@ (8003464 <MX_GPIO_Init+0x1f8>)
 8003288:	2104      	movs	r1, #4
 800328a:	430a      	orrs	r2, r1
 800328c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800328e:	4b75      	ldr	r3, [pc, #468]	@ (8003464 <MX_GPIO_Init+0x1f8>)
 8003290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003292:	2204      	movs	r2, #4
 8003294:	4013      	ands	r3, r2
 8003296:	613b      	str	r3, [r7, #16]
 8003298:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800329a:	4b72      	ldr	r3, [pc, #456]	@ (8003464 <MX_GPIO_Init+0x1f8>)
 800329c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800329e:	4b71      	ldr	r3, [pc, #452]	@ (8003464 <MX_GPIO_Init+0x1f8>)
 80032a0:	2120      	movs	r1, #32
 80032a2:	430a      	orrs	r2, r1
 80032a4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80032a6:	4b6f      	ldr	r3, [pc, #444]	@ (8003464 <MX_GPIO_Init+0x1f8>)
 80032a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032aa:	2220      	movs	r2, #32
 80032ac:	4013      	ands	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032b2:	4b6c      	ldr	r3, [pc, #432]	@ (8003464 <MX_GPIO_Init+0x1f8>)
 80032b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80032b6:	4b6b      	ldr	r3, [pc, #428]	@ (8003464 <MX_GPIO_Init+0x1f8>)
 80032b8:	2101      	movs	r1, #1
 80032ba:	430a      	orrs	r2, r1
 80032bc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80032be:	4b69      	ldr	r3, [pc, #420]	@ (8003464 <MX_GPIO_Init+0x1f8>)
 80032c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032c2:	2201      	movs	r2, #1
 80032c4:	4013      	ands	r3, r2
 80032c6:	60bb      	str	r3, [r7, #8]
 80032c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ca:	4b66      	ldr	r3, [pc, #408]	@ (8003464 <MX_GPIO_Init+0x1f8>)
 80032cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80032ce:	4b65      	ldr	r3, [pc, #404]	@ (8003464 <MX_GPIO_Init+0x1f8>)
 80032d0:	2102      	movs	r1, #2
 80032d2:	430a      	orrs	r2, r1
 80032d4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80032d6:	4b63      	ldr	r3, [pc, #396]	@ (8003464 <MX_GPIO_Init+0x1f8>)
 80032d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032da:	2202      	movs	r2, #2
 80032dc:	4013      	ands	r3, r2
 80032de:	607b      	str	r3, [r7, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|WDI_Pin|PAPER_ON_Pin, GPIO_PIN_RESET);
 80032e2:	4961      	ldr	r1, [pc, #388]	@ (8003468 <MX_GPIO_Init+0x1fc>)
 80032e4:	4b61      	ldr	r3, [pc, #388]	@ (800346c <MX_GPIO_Init+0x200>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	0018      	movs	r0, r3
 80032ea:	f002 ffa9 	bl	8006240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_RTC_GPIO_Port, CE_RTC_Pin, GPIO_PIN_SET);
 80032ee:	2380      	movs	r3, #128	@ 0x80
 80032f0:	01db      	lsls	r3, r3, #7
 80032f2:	485e      	ldr	r0, [pc, #376]	@ (800346c <MX_GPIO_Init+0x200>)
 80032f4:	2201      	movs	r2, #1
 80032f6:	0019      	movs	r1, r3
 80032f8:	f002 ffa2 	bl	8006240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D_C_Pin|RST_Pin, GPIO_PIN_RESET);
 80032fc:	2390      	movs	r3, #144	@ 0x90
 80032fe:	0119      	lsls	r1, r3, #4
 8003300:	23a0      	movs	r3, #160	@ 0xa0
 8003302:	05db      	lsls	r3, r3, #23
 8003304:	2200      	movs	r2, #0
 8003306:	0018      	movs	r0, r3
 8003308:	f002 ff9a 	bl	8006240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSB_Pin|CS_Pin, GPIO_PIN_SET);
 800330c:	23a0      	movs	r3, #160	@ 0xa0
 800330e:	0159      	lsls	r1, r3, #5
 8003310:	23a0      	movs	r3, #160	@ 0xa0
 8003312:	05db      	lsls	r3, r3, #23
 8003314:	2201      	movs	r2, #1
 8003316:	0018      	movs	r0, r3
 8003318:	f002 ff92 	bl	8006240 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800331c:	193b      	adds	r3, r7, r4
 800331e:	22e0      	movs	r2, #224	@ 0xe0
 8003320:	0212      	lsls	r2, r2, #8
 8003322:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003324:	193b      	adds	r3, r7, r4
 8003326:	2203      	movs	r2, #3
 8003328:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332a:	193b      	adds	r3, r7, r4
 800332c:	2200      	movs	r2, #0
 800332e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003330:	193b      	adds	r3, r7, r4
 8003332:	4a4f      	ldr	r2, [pc, #316]	@ (8003470 <MX_GPIO_Init+0x204>)
 8003334:	0019      	movs	r1, r3
 8003336:	0010      	movs	r0, r2
 8003338:	f002 fe0e 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800333c:	193b      	adds	r3, r7, r4
 800333e:	220f      	movs	r2, #15
 8003340:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003342:	193b      	adds	r3, r7, r4
 8003344:	2203      	movs	r2, #3
 8003346:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003348:	193b      	adds	r3, r7, r4
 800334a:	2200      	movs	r2, #0
 800334c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800334e:	193b      	adds	r3, r7, r4
 8003350:	4a48      	ldr	r2, [pc, #288]	@ (8003474 <MX_GPIO_Init+0x208>)
 8003352:	0019      	movs	r1, r3
 8003354:	0010      	movs	r0, r2
 8003356:	f002 fdff 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15;
 800335a:	193b      	adds	r3, r7, r4
 800335c:	4a46      	ldr	r2, [pc, #280]	@ (8003478 <MX_GPIO_Init+0x20c>)
 800335e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003360:	193b      	adds	r3, r7, r4
 8003362:	2203      	movs	r2, #3
 8003364:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003366:	193b      	adds	r3, r7, r4
 8003368:	2200      	movs	r2, #0
 800336a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800336c:	193a      	adds	r2, r7, r4
 800336e:	23a0      	movs	r3, #160	@ 0xa0
 8003370:	05db      	lsls	r3, r3, #23
 8003372:	0011      	movs	r1, r2
 8003374:	0018      	movs	r0, r3
 8003376:	f002 fdef 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB10 PB11
                           PB3 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 800337a:	193b      	adds	r3, r7, r4
 800337c:	4a3f      	ldr	r2, [pc, #252]	@ (800347c <MX_GPIO_Init+0x210>)
 800337e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003380:	193b      	adds	r3, r7, r4
 8003382:	2203      	movs	r2, #3
 8003384:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003386:	193b      	adds	r3, r7, r4
 8003388:	2200      	movs	r2, #0
 800338a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800338c:	193b      	adds	r3, r7, r4
 800338e:	4a37      	ldr	r2, [pc, #220]	@ (800346c <MX_GPIO_Init+0x200>)
 8003390:	0019      	movs	r1, r3
 8003392:	0010      	movs	r0, r2
 8003394:	f002 fde0 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|WDI_Pin|PAPER_ON_Pin;
 8003398:	193b      	adds	r3, r7, r4
 800339a:	4a33      	ldr	r2, [pc, #204]	@ (8003468 <MX_GPIO_Init+0x1fc>)
 800339c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800339e:	193b      	adds	r3, r7, r4
 80033a0:	2201      	movs	r2, #1
 80033a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a4:	193b      	adds	r3, r7, r4
 80033a6:	2200      	movs	r2, #0
 80033a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033aa:	193b      	adds	r3, r7, r4
 80033ac:	2200      	movs	r2, #0
 80033ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033b0:	193b      	adds	r3, r7, r4
 80033b2:	4a2e      	ldr	r2, [pc, #184]	@ (800346c <MX_GPIO_Init+0x200>)
 80033b4:	0019      	movs	r1, r3
 80033b6:	0010      	movs	r0, r2
 80033b8:	f002 fdce 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NIRQ_Pin;
 80033bc:	0021      	movs	r1, r4
 80033be:	187b      	adds	r3, r7, r1
 80033c0:	2280      	movs	r2, #128	@ 0x80
 80033c2:	0152      	lsls	r2, r2, #5
 80033c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033c6:	000c      	movs	r4, r1
 80033c8:	193b      	adds	r3, r7, r4
 80033ca:	2200      	movs	r2, #0
 80033cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ce:	193b      	adds	r3, r7, r4
 80033d0:	2200      	movs	r2, #0
 80033d2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NIRQ_GPIO_Port, &GPIO_InitStruct);
 80033d4:	193b      	adds	r3, r7, r4
 80033d6:	4a25      	ldr	r2, [pc, #148]	@ (800346c <MX_GPIO_Init+0x200>)
 80033d8:	0019      	movs	r1, r3
 80033da:	0010      	movs	r0, r2
 80033dc:	f002 fdbc 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_RTC_Pin;
 80033e0:	0021      	movs	r1, r4
 80033e2:	187b      	adds	r3, r7, r1
 80033e4:	2280      	movs	r2, #128	@ 0x80
 80033e6:	01d2      	lsls	r2, r2, #7
 80033e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033ea:	000c      	movs	r4, r1
 80033ec:	193b      	adds	r3, r7, r4
 80033ee:	2201      	movs	r2, #1
 80033f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f2:	193b      	adds	r3, r7, r4
 80033f4:	2200      	movs	r2, #0
 80033f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80033f8:	193b      	adds	r3, r7, r4
 80033fa:	2201      	movs	r2, #1
 80033fc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CE_RTC_GPIO_Port, &GPIO_InitStruct);
 80033fe:	193b      	adds	r3, r7, r4
 8003400:	4a1a      	ldr	r2, [pc, #104]	@ (800346c <MX_GPIO_Init+0x200>)
 8003402:	0019      	movs	r1, r3
 8003404:	0010      	movs	r0, r2
 8003406:	f002 fda7 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = D_C_Pin|CSB_Pin|RST_Pin|CS_Pin;
 800340a:	0021      	movs	r1, r4
 800340c:	187b      	adds	r3, r7, r1
 800340e:	22e8      	movs	r2, #232	@ 0xe8
 8003410:	0152      	lsls	r2, r2, #5
 8003412:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003414:	000c      	movs	r4, r1
 8003416:	193b      	adds	r3, r7, r4
 8003418:	2201      	movs	r2, #1
 800341a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341c:	193b      	adds	r3, r7, r4
 800341e:	2200      	movs	r2, #0
 8003420:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003422:	193b      	adds	r3, r7, r4
 8003424:	2200      	movs	r2, #0
 8003426:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003428:	193a      	adds	r2, r7, r4
 800342a:	23a0      	movs	r3, #160	@ 0xa0
 800342c:	05db      	lsls	r3, r3, #23
 800342e:	0011      	movs	r1, r2
 8003430:	0018      	movs	r0, r3
 8003432:	f002 fd91 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 8003436:	0021      	movs	r1, r4
 8003438:	187b      	adds	r3, r7, r1
 800343a:	2280      	movs	r2, #128	@ 0x80
 800343c:	0092      	lsls	r2, r2, #2
 800343e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003440:	187b      	adds	r3, r7, r1
 8003442:	2200      	movs	r2, #0
 8003444:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003446:	187b      	adds	r3, r7, r1
 8003448:	2200      	movs	r2, #0
 800344a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 800344c:	187a      	adds	r2, r7, r1
 800344e:	23a0      	movs	r3, #160	@ 0xa0
 8003450:	05db      	lsls	r3, r3, #23
 8003452:	0011      	movs	r1, r2
 8003454:	0018      	movs	r0, r3
 8003456:	f002 fd7f 	bl	8005f58 <HAL_GPIO_Init>

}
 800345a:	46c0      	nop			@ (mov r8, r8)
 800345c:	46bd      	mov	sp, r7
 800345e:	b00b      	add	sp, #44	@ 0x2c
 8003460:	bd90      	pop	{r4, r7, pc}
 8003462:	46c0      	nop			@ (mov r8, r8)
 8003464:	40021000 	.word	0x40021000
 8003468:	0000a002 	.word	0x0000a002
 800346c:	50000400 	.word	0x50000400
 8003470:	50000800 	.word	0x50000800
 8003474:	50001400 	.word	0x50001400
 8003478:	00008013 	.word	0x00008013
 800347c:	00000f3d 	.word	0x00000f3d

08003480 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003484:	4b1b      	ldr	r3, [pc, #108]	@ (80034f4 <MX_I2C1_Init+0x74>)
 8003486:	4a1c      	ldr	r2, [pc, #112]	@ (80034f8 <MX_I2C1_Init+0x78>)
 8003488:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800348a:	4b1a      	ldr	r3, [pc, #104]	@ (80034f4 <MX_I2C1_Init+0x74>)
 800348c:	4a1b      	ldr	r2, [pc, #108]	@ (80034fc <MX_I2C1_Init+0x7c>)
 800348e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003490:	4b18      	ldr	r3, [pc, #96]	@ (80034f4 <MX_I2C1_Init+0x74>)
 8003492:	2200      	movs	r2, #0
 8003494:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003496:	4b17      	ldr	r3, [pc, #92]	@ (80034f4 <MX_I2C1_Init+0x74>)
 8003498:	2201      	movs	r2, #1
 800349a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800349c:	4b15      	ldr	r3, [pc, #84]	@ (80034f4 <MX_I2C1_Init+0x74>)
 800349e:	2200      	movs	r2, #0
 80034a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80034a2:	4b14      	ldr	r3, [pc, #80]	@ (80034f4 <MX_I2C1_Init+0x74>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80034a8:	4b12      	ldr	r3, [pc, #72]	@ (80034f4 <MX_I2C1_Init+0x74>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034ae:	4b11      	ldr	r3, [pc, #68]	@ (80034f4 <MX_I2C1_Init+0x74>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034b4:	4b0f      	ldr	r3, [pc, #60]	@ (80034f4 <MX_I2C1_Init+0x74>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80034ba:	4b0e      	ldr	r3, [pc, #56]	@ (80034f4 <MX_I2C1_Init+0x74>)
 80034bc:	0018      	movs	r0, r3
 80034be:	f002 fedd 	bl	800627c <HAL_I2C_Init>
 80034c2:	1e03      	subs	r3, r0, #0
 80034c4:	d001      	beq.n	80034ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80034c6:	f000 f976 	bl	80037b6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80034ca:	4b0a      	ldr	r3, [pc, #40]	@ (80034f4 <MX_I2C1_Init+0x74>)
 80034cc:	2100      	movs	r1, #0
 80034ce:	0018      	movs	r0, r3
 80034d0:	f002 ff7a 	bl	80063c8 <HAL_I2CEx_ConfigAnalogFilter>
 80034d4:	1e03      	subs	r3, r0, #0
 80034d6:	d001      	beq.n	80034dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80034d8:	f000 f96d 	bl	80037b6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80034dc:	4b05      	ldr	r3, [pc, #20]	@ (80034f4 <MX_I2C1_Init+0x74>)
 80034de:	2100      	movs	r1, #0
 80034e0:	0018      	movs	r0, r3
 80034e2:	f002 ffbd 	bl	8006460 <HAL_I2CEx_ConfigDigitalFilter>
 80034e6:	1e03      	subs	r3, r0, #0
 80034e8:	d001      	beq.n	80034ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80034ea:	f000 f964 	bl	80037b6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80034ee:	46c0      	nop			@ (mov r8, r8)
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	2000009c 	.word	0x2000009c
 80034f8:	40005400 	.word	0x40005400
 80034fc:	00303d5b 	.word	0x00303d5b

08003500 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003500:	b590      	push	{r4, r7, lr}
 8003502:	b09b      	sub	sp, #108	@ 0x6c
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003508:	2354      	movs	r3, #84	@ 0x54
 800350a:	18fb      	adds	r3, r7, r3
 800350c:	0018      	movs	r0, r3
 800350e:	2314      	movs	r3, #20
 8003510:	001a      	movs	r2, r3
 8003512:	2100      	movs	r1, #0
 8003514:	f005 fe6a 	bl	80091ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003518:	2410      	movs	r4, #16
 800351a:	193b      	adds	r3, r7, r4
 800351c:	0018      	movs	r0, r3
 800351e:	2344      	movs	r3, #68	@ 0x44
 8003520:	001a      	movs	r2, r3
 8003522:	2100      	movs	r1, #0
 8003524:	f005 fe62 	bl	80091ec <memset>
  if(i2cHandle->Instance==I2C1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a22      	ldr	r2, [pc, #136]	@ (80035b8 <HAL_I2C_MspInit+0xb8>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d13d      	bne.n	80035ae <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003532:	193b      	adds	r3, r7, r4
 8003534:	2220      	movs	r2, #32
 8003536:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003538:	193b      	adds	r3, r7, r4
 800353a:	2200      	movs	r2, #0
 800353c:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800353e:	193b      	adds	r3, r7, r4
 8003540:	0018      	movs	r0, r3
 8003542:	f003 fe85 	bl	8007250 <HAL_RCCEx_PeriphCLKConfig>
 8003546:	1e03      	subs	r3, r0, #0
 8003548:	d001      	beq.n	800354e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800354a:	f000 f934 	bl	80037b6 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800354e:	4b1b      	ldr	r3, [pc, #108]	@ (80035bc <HAL_I2C_MspInit+0xbc>)
 8003550:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003552:	4b1a      	ldr	r3, [pc, #104]	@ (80035bc <HAL_I2C_MspInit+0xbc>)
 8003554:	2102      	movs	r1, #2
 8003556:	430a      	orrs	r2, r1
 8003558:	64da      	str	r2, [r3, #76]	@ 0x4c
 800355a:	4b18      	ldr	r3, [pc, #96]	@ (80035bc <HAL_I2C_MspInit+0xbc>)
 800355c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800355e:	2202      	movs	r2, #2
 8003560:	4013      	ands	r3, r2
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003566:	2154      	movs	r1, #84	@ 0x54
 8003568:	187b      	adds	r3, r7, r1
 800356a:	22c0      	movs	r2, #192	@ 0xc0
 800356c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800356e:	187b      	adds	r3, r7, r1
 8003570:	2212      	movs	r2, #18
 8003572:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003574:	187b      	adds	r3, r7, r1
 8003576:	2200      	movs	r2, #0
 8003578:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357a:	187b      	adds	r3, r7, r1
 800357c:	2200      	movs	r2, #0
 800357e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003580:	187b      	adds	r3, r7, r1
 8003582:	2204      	movs	r2, #4
 8003584:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003586:	187b      	adds	r3, r7, r1
 8003588:	4a0d      	ldr	r2, [pc, #52]	@ (80035c0 <HAL_I2C_MspInit+0xc0>)
 800358a:	0019      	movs	r1, r3
 800358c:	0010      	movs	r0, r2
 800358e:	f002 fce3 	bl	8005f58 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003592:	4b0a      	ldr	r3, [pc, #40]	@ (80035bc <HAL_I2C_MspInit+0xbc>)
 8003594:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003596:	4b09      	ldr	r3, [pc, #36]	@ (80035bc <HAL_I2C_MspInit+0xbc>)
 8003598:	2180      	movs	r1, #128	@ 0x80
 800359a:	0389      	lsls	r1, r1, #14
 800359c:	430a      	orrs	r2, r1
 800359e:	659a      	str	r2, [r3, #88]	@ 0x58
 80035a0:	4b06      	ldr	r3, [pc, #24]	@ (80035bc <HAL_I2C_MspInit+0xbc>)
 80035a2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80035a4:	2380      	movs	r3, #128	@ 0x80
 80035a6:	039b      	lsls	r3, r3, #14
 80035a8:	4013      	ands	r3, r2
 80035aa:	60bb      	str	r3, [r7, #8]
 80035ac:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80035ae:	46c0      	nop			@ (mov r8, r8)
 80035b0:	46bd      	mov	sp, r7
 80035b2:	b01b      	add	sp, #108	@ 0x6c
 80035b4:	bd90      	pop	{r4, r7, pc}
 80035b6:	46c0      	nop			@ (mov r8, r8)
 80035b8:	40005400 	.word	0x40005400
 80035bc:	40021000 	.word	0x40021000
 80035c0:	50000400 	.word	0x50000400

080035c4 <LL_PWR_ClearFlag_CSB>:
  * @brief  Clear standby and stop Flags
  * @rmtoll SCR          CSBF          LL_PWR_ClearFlag_CSB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_CSB(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CSBF);
 80035c8:	4b03      	ldr	r3, [pc, #12]	@ (80035d8 <LL_PWR_ClearFlag_CSB+0x14>)
 80035ca:	2280      	movs	r2, #128	@ 0x80
 80035cc:	0052      	lsls	r2, r2, #1
 80035ce:	619a      	str	r2, [r3, #24]
}
 80035d0:	46c0      	nop			@ (mov r8, r8)
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	46c0      	nop			@ (mov r8, r8)
 80035d8:	40007000 	.word	0x40007000

080035dc <LL_SPI_Enable>:
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2240      	movs	r2, #64	@ 0x40
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	601a      	str	r2, [r3, #0]
}
 80035f0:	46c0      	nop			@ (mov r8, r8)
 80035f2:	46bd      	mov	sp, r7
 80035f4:	b002      	add	sp, #8
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80035f8:	b5b0      	push	{r4, r5, r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035fe:	f001 ff48 	bl	8005492 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003602:	f000 f871 	bl	80036e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003606:	f7ff fe31 	bl	800326c <MX_GPIO_Init>
  MX_ADC1_Init();
 800360a:	f7ff fc8b 	bl	8002f24 <MX_ADC1_Init>
  MX_I2C1_Init();
 800360e:	f7ff ff37 	bl	8003480 <MX_I2C1_Init>
  MX_RTC_Init();
 8003612:	f001 fcfd 	bl	8005010 <MX_RTC_Init>
  MX_SPI1_Init();
 8003616:	f001 fd75 	bl	8005104 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800361a:	f001 fe63 	bl	80052e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  LL_SPI_Enable(SPI1);
 800361e:	4b2b      	ldr	r3, [pc, #172]	@ (80036cc <main+0xd4>)
 8003620:	0018      	movs	r0, r3
 8003622:	f7ff ffdb 	bl	80035dc <LL_SPI_Enable>
  LED1_ON();
 8003626:	4b2a      	ldr	r3, [pc, #168]	@ (80036d0 <main+0xd8>)
 8003628:	2202      	movs	r2, #2
 800362a:	619a      	str	r2, [r3, #24]

  uint8_t wdalarm = read(REG_WEEKDAY_ALARM); // REG_WEEKDAY_ALARM  0x0e;
 800362c:	4b29      	ldr	r3, [pc, #164]	@ (80036d4 <main+0xdc>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	250f      	movs	r5, #15
 8003632:	197c      	adds	r4, r7, r5
 8003634:	0018      	movs	r0, r3
 8003636:	f7ff fb80 	bl	8002d3a <read>
 800363a:	0003      	movs	r3, r0
 800363c:	7023      	strb	r3, [r4, #0]
  if ((wdalarm & 0xf8) != 0xa0)              // Startup from power up.
 800363e:	197b      	adds	r3, r7, r5
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	22f8      	movs	r2, #248	@ 0xf8
 8003644:	4013      	ands	r3, r2
 8003646:	2ba0      	cmp	r3, #160	@ 0xa0
 8003648:	d014      	beq.n	8003674 <main+0x7c>
  {
    uint32_t clk = HAL_RCC_GetSysClockFreq();
 800364a:	f003 fcd7 	bl	8006ffc <HAL_RCC_GetSysClockFreq>
 800364e:	0003      	movs	r3, r0
 8003650:	60bb      	str	r3, [r7, #8]
    printf("\nMAIN. First power ON.   %d\n", clk);
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	4b20      	ldr	r3, [pc, #128]	@ (80036d8 <main+0xe0>)
 8003656:	0011      	movs	r1, r2
 8003658:	0018      	movs	r0, r3
 800365a:	f001 fca5 	bl	8004fa8 <printf_>
    resetConfig(0);
 800365e:	2000      	movs	r0, #0
 8003660:	f7fe ff2e 	bl	80024c0 <resetConfig>
    write(REG_WEEKDAY_ALARM, 0xa0); // Magic 0xa0
 8003664:	4b1b      	ldr	r3, [pc, #108]	@ (80036d4 <main+0xdc>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	21a0      	movs	r1, #160	@ 0xa0
 800366a:	0018      	movs	r0, r3
 800366c:	f7ff fb75 	bl	8002d5a <write>
    // deepPowerDown(30);
    hex_dump();
 8003670:	f7ff fadc 	bl	8002c2c <hex_dump>
  }

  printf("\nMAIN. Startup from RTC\n"); // Startup from RTC
 8003674:	4b19      	ldr	r3, [pc, #100]	@ (80036dc <main+0xe4>)
 8003676:	0018      	movs	r0, r3
 8003678:	f001 fc96 	bl	8004fa8 <printf_>
  Activate_ADC();
 800367c:	f7ff fd78 	bl	8003170 <Activate_ADC>
  int32_t vBat = get_vbat();
 8003680:	f7ff fcfc 	bl	800307c <get_vbat>
 8003684:	0003      	movs	r3, r0
 8003686:	607b      	str	r3, [r7, #4]
  printf("vBat = %d\n", vBat);
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	4b15      	ldr	r3, [pc, #84]	@ (80036e0 <main+0xe8>)
 800368c:	0011      	movs	r1, r2
 800368e:	0018      	movs	r0, r3
 8003690:	f001 fc8a 	bl	8004fa8 <printf_>
  // vBat = vBat / 10.0; // go with 3 digits
  vBat = ((uint32_t)vBat * 6554 + 2) >> 16; // fast_divide_by_10
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a13      	ldr	r2, [pc, #76]	@ (80036e4 <main+0xec>)
 8003698:	4353      	muls	r3, r2
 800369a:	3302      	adds	r3, #2
 800369c:	0c1b      	lsrs	r3, r3, #16
 800369e:	607b      	str	r3, [r7, #4]
  HAL_Delay(5);
 80036a0:	2005      	movs	r0, #5
 80036a2:	f001 ff71 	bl	8005588 <HAL_Delay>
  deepPowerDown(30);
 80036a6:	201e      	movs	r0, #30
 80036a8:	f7fe fffc 	bl	80026a4 <deepPowerDown>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    LED1_ON();
 80036ac:	4b08      	ldr	r3, [pc, #32]	@ (80036d0 <main+0xd8>)
 80036ae:	2202      	movs	r2, #2
 80036b0:	619a      	str	r2, [r3, #24]
    HAL_Delay(100);
 80036b2:	2064      	movs	r0, #100	@ 0x64
 80036b4:	f001 ff68 	bl	8005588 <HAL_Delay>
    LED1_OFF();
 80036b8:	4b05      	ldr	r3, [pc, #20]	@ (80036d0 <main+0xd8>)
 80036ba:	2280      	movs	r2, #128	@ 0x80
 80036bc:	0292      	lsls	r2, r2, #10
 80036be:	619a      	str	r2, [r3, #24]
    HAL_Delay(100);
 80036c0:	2064      	movs	r0, #100	@ 0x64
 80036c2:	f001 ff61 	bl	8005588 <HAL_Delay>
    LED1_ON();
 80036c6:	46c0      	nop			@ (mov r8, r8)
 80036c8:	e7f0      	b.n	80036ac <main+0xb4>
 80036ca:	46c0      	nop			@ (mov r8, r8)
 80036cc:	40013000 	.word	0x40013000
 80036d0:	50000400 	.word	0x50000400
 80036d4:	08009574 	.word	0x08009574
 80036d8:	080094bc 	.word	0x080094bc
 80036dc:	080094dc 	.word	0x080094dc
 80036e0:	080094f8 	.word	0x080094f8
 80036e4:	0000199a 	.word	0x0000199a

080036e8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80036e8:	b590      	push	{r4, r7, lr}
 80036ea:	b099      	sub	sp, #100	@ 0x64
 80036ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036ee:	2414      	movs	r4, #20
 80036f0:	193b      	adds	r3, r7, r4
 80036f2:	0018      	movs	r0, r3
 80036f4:	234c      	movs	r3, #76	@ 0x4c
 80036f6:	001a      	movs	r2, r3
 80036f8:	2100      	movs	r1, #0
 80036fa:	f005 fd77 	bl	80091ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036fe:	1d3b      	adds	r3, r7, #4
 8003700:	0018      	movs	r0, r3
 8003702:	2310      	movs	r3, #16
 8003704:	001a      	movs	r2, r3
 8003706:	2100      	movs	r1, #0
 8003708:	f005 fd70 	bl	80091ec <memset>

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);
 800370c:	2380      	movs	r3, #128	@ 0x80
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	0018      	movs	r0, r3
 8003712:	f002 fef1 	bl	80064f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
 8003716:	193b      	adds	r3, r7, r4
 8003718:	220a      	movs	r2, #10
 800371a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800371c:	193b      	adds	r3, r7, r4
 800371e:	2280      	movs	r2, #128	@ 0x80
 8003720:	0052      	lsls	r2, r2, #1
 8003722:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003724:	193b      	adds	r3, r7, r4
 8003726:	2240      	movs	r2, #64	@ 0x40
 8003728:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800372a:	193b      	adds	r3, r7, r4
 800372c:	2201      	movs	r2, #1
 800372e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003730:	193b      	adds	r3, r7, r4
 8003732:	2200      	movs	r2, #0
 8003734:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003736:	193b      	adds	r3, r7, r4
 8003738:	0018      	movs	r0, r3
 800373a:	f002 ff49 	bl	80065d0 <HAL_RCC_OscConfig>
 800373e:	1e03      	subs	r3, r0, #0
 8003740:	d001      	beq.n	8003746 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8003742:	f000 f838 	bl	80037b6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8003746:	1d3b      	adds	r3, r7, #4
 8003748:	2207      	movs	r2, #7
 800374a:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800374c:	1d3b      	adds	r3, r7, #4
 800374e:	2201      	movs	r2, #1
 8003750:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003752:	1d3b      	adds	r3, r7, #4
 8003754:	2200      	movs	r2, #0
 8003756:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003758:	1d3b      	adds	r3, r7, #4
 800375a:	2200      	movs	r2, #0
 800375c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800375e:	1d3b      	adds	r3, r7, #4
 8003760:	2101      	movs	r1, #1
 8003762:	0018      	movs	r0, r3
 8003764:	f003 fb5e 	bl	8006e24 <HAL_RCC_ClockConfig>
 8003768:	1e03      	subs	r3, r0, #0
 800376a:	d001      	beq.n	8003770 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800376c:	f000 f823 	bl	80037b6 <Error_Handler>
  }
}
 8003770:	46c0      	nop			@ (mov r8, r8)
 8003772:	46bd      	mov	sp, r7
 8003774:	b019      	add	sp, #100	@ 0x64
 8003776:	bd90      	pop	{r4, r7, pc}

08003778 <print_error>:

/* USER CODE BEGIN 4 */

void print_error(const char *func, uint32_t line)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  printf(" *** Error:  %s ,   %d\n", func, line);
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	4b06      	ldr	r3, [pc, #24]	@ (80037a0 <print_error+0x28>)
 8003788:	0018      	movs	r0, r3
 800378a:	f001 fc0d 	bl	8004fa8 <printf_>
  HAL_Delay(100);
 800378e:	2064      	movs	r0, #100	@ 0x64
 8003790:	f001 fefa 	bl	8005588 <HAL_Delay>
  timeout_reset();
 8003794:	f000 f806 	bl	80037a4 <timeout_reset>
}
 8003798:	46c0      	nop			@ (mov r8, r8)
 800379a:	46bd      	mov	sp, r7
 800379c:	b002      	add	sp, #8
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	08009504 	.word	0x08009504

080037a4 <timeout_reset>:

void timeout_reset(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  LL_PWR_ClearFlag_CSB(); // Clear standby flag
 80037a8:	f7ff ff0c 	bl	80035c4 <LL_PWR_ClearFlag_CSB>
  // printf(" *** timeout_reset:  %s    %d\n", func, line);
  HAL_Delay(100);
 80037ac:	2064      	movs	r0, #100	@ 0x64
 80037ae:	f001 feeb 	bl	8005588 <HAL_Delay>
  // NVIC_SystemReset();
  while (1)
 80037b2:	46c0      	nop			@ (mov r8, r8)
 80037b4:	e7fd      	b.n	80037b2 <timeout_reset+0xe>

080037b6 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80037ba:	b672      	cpsid	i
}
 80037bc:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037be:	46c0      	nop			@ (mov r8, r8)
 80037c0:	e7fd      	b.n	80037be <Error_Handler+0x8>

080037c2 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b084      	sub	sp, #16
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
 80037cc:	603b      	str	r3, [r7, #0]
 80037ce:	230f      	movs	r3, #15
 80037d0:	18fb      	adds	r3, r7, r3
 80037d2:	1c02      	adds	r2, r0, #0
 80037d4:	701a      	strb	r2, [r3, #0]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 80037d6:	46c0      	nop			@ (mov r8, r8)
 80037d8:	46bd      	mov	sp, r7
 80037da:	b004      	add	sp, #16
 80037dc:	bd80      	pop	{r7, pc}

080037de <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b084      	sub	sp, #16
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	603b      	str	r3, [r7, #0]
 80037ea:	210f      	movs	r1, #15
 80037ec:	187b      	adds	r3, r7, r1
 80037ee:	1c02      	adds	r2, r0, #0
 80037f0:	701a      	strb	r2, [r3, #0]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 80037f2:	000a      	movs	r2, r1
 80037f4:	18bb      	adds	r3, r7, r2
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d004      	beq.n	8003806 <_out_char+0x28>
    _putchar(character);
 80037fc:	18bb      	adds	r3, r7, r2
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	0018      	movs	r0, r3
 8003802:	f001 fbef 	bl	8004fe4 <_putchar>
  }
}
 8003806:	46c0      	nop			@ (mov r8, r8)
 8003808:	46bd      	mov	sp, r7
 800380a:	b004      	add	sp, #16
 800380c:	bd80      	pop	{r7, pc}

0800380e <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b084      	sub	sp, #16
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
 8003816:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	e002      	b.n	8003824 <_strnlen_s+0x16>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	3301      	adds	r3, #1
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d004      	beq.n	8003836 <_strnlen_s+0x28>
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	1e5a      	subs	r2, r3, #1
 8003830:	603a      	str	r2, [r7, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1f3      	bne.n	800381e <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	1ad3      	subs	r3, r2, r3
}
 800383c:	0018      	movs	r0, r3
 800383e:	46bd      	mov	sp, r7
 8003840:	b004      	add	sp, #16
 8003842:	bd80      	pop	{r7, pc}

08003844 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	0002      	movs	r2, r0
 800384c:	1dfb      	adds	r3, r7, #7
 800384e:	701a      	strb	r2, [r3, #0]
  return (ch >= '0') && (ch <= '9');
 8003850:	1dfb      	adds	r3, r7, #7
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2b2f      	cmp	r3, #47	@ 0x2f
 8003856:	d905      	bls.n	8003864 <_is_digit+0x20>
 8003858:	1dfb      	adds	r3, r7, #7
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b39      	cmp	r3, #57	@ 0x39
 800385e:	d801      	bhi.n	8003864 <_is_digit+0x20>
 8003860:	2301      	movs	r3, #1
 8003862:	e000      	b.n	8003866 <_is_digit+0x22>
 8003864:	2300      	movs	r3, #0
 8003866:	1c1a      	adds	r2, r3, #0
 8003868:	2301      	movs	r3, #1
 800386a:	4013      	ands	r3, r2
 800386c:	b2db      	uxtb	r3, r3
}
 800386e:	0018      	movs	r0, r3
 8003870:	46bd      	mov	sp, r7
 8003872:	b002      	add	sp, #8
 8003874:	bd80      	pop	{r7, pc}

08003876 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b084      	sub	sp, #16
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800387e:	2300      	movs	r3, #0
 8003880:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8003882:	e00e      	b.n	80038a2 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	0013      	movs	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	189b      	adds	r3, r3, r2
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	0018      	movs	r0, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	1c59      	adds	r1, r3, #1
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6011      	str	r1, [r2, #0]
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	18c3      	adds	r3, r0, r3
 800389e:	3b30      	subs	r3, #48	@ 0x30
 80038a0:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	0018      	movs	r0, r3
 80038aa:	f7ff ffcb 	bl	8003844 <_is_digit>
 80038ae:	1e03      	subs	r3, r0, #0
 80038b0:	d1e8      	bne.n	8003884 <_atoi+0xe>
  }
  return i;
 80038b2:	68fb      	ldr	r3, [r7, #12]
}
 80038b4:	0018      	movs	r0, r3
 80038b6:	46bd      	mov	sp, r7
 80038b8:	b004      	add	sp, #16
 80038ba:	bd80      	pop	{r7, pc}

080038bc <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 80038bc:	b590      	push	{r4, r7, lr}
 80038be:	b087      	sub	sp, #28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
 80038c8:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 80038ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038d0:	2202      	movs	r2, #2
 80038d2:	4013      	ands	r3, r2
 80038d4:	d124      	bne.n	8003920 <_out_rev+0x64>
 80038d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038d8:	2201      	movs	r2, #1
 80038da:	4013      	ands	r3, r2
 80038dc:	d120      	bne.n	8003920 <_out_rev+0x64>
    for (size_t i = len; i < width; i++) {
 80038de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	e00a      	b.n	80038fa <_out_rev+0x3e>
      out(' ', buffer, idx++, maxlen);
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	1c53      	adds	r3, r2, #1
 80038e8:	607b      	str	r3, [r7, #4]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	68b9      	ldr	r1, [r7, #8]
 80038ee:	68fc      	ldr	r4, [r7, #12]
 80038f0:	2020      	movs	r0, #32
 80038f2:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	3301      	adds	r3, #1
 80038f8:	617b      	str	r3, [r7, #20]
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038fe:	429a      	cmp	r2, r3
 8003900:	d3f0      	bcc.n	80038e4 <_out_rev+0x28>
    }
  }

  // reverse string
  while (len) {
 8003902:	e00d      	b.n	8003920 <_out_rev+0x64>
    out(buf[--len], buffer, idx++, maxlen);
 8003904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003906:	3b01      	subs	r3, #1
 8003908:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800390a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800390c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800390e:	18d3      	adds	r3, r2, r3
 8003910:	7818      	ldrb	r0, [r3, #0]
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	1c53      	adds	r3, r2, #1
 8003916:	607b      	str	r3, [r7, #4]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	68b9      	ldr	r1, [r7, #8]
 800391c:	68fc      	ldr	r4, [r7, #12]
 800391e:	47a0      	blx	r4
  while (len) {
 8003920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1ee      	bne.n	8003904 <_out_rev+0x48>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8003926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003928:	2202      	movs	r2, #2
 800392a:	4013      	ands	r3, r2
 800392c:	d00e      	beq.n	800394c <_out_rev+0x90>
    while (idx - start_idx < width) {
 800392e:	e007      	b.n	8003940 <_out_rev+0x84>
      out(' ', buffer, idx++, maxlen);
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	1c53      	adds	r3, r2, #1
 8003934:	607b      	str	r3, [r7, #4]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68b9      	ldr	r1, [r7, #8]
 800393a:	68fc      	ldr	r4, [r7, #12]
 800393c:	2020      	movs	r0, #32
 800393e:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003948:	429a      	cmp	r2, r3
 800394a:	d8f1      	bhi.n	8003930 <_out_rev+0x74>
    }
  }

  return idx;
 800394c:	687b      	ldr	r3, [r7, #4]
}
 800394e:	0018      	movs	r0, r3
 8003950:	46bd      	mov	sp, r7
 8003952:	b007      	add	sp, #28
 8003954:	bd90      	pop	{r4, r7, pc}

08003956 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003956:	b590      	push	{r4, r7, lr}
 8003958:	b089      	sub	sp, #36	@ 0x24
 800395a:	af04      	add	r7, sp, #16
 800395c:	60f8      	str	r0, [r7, #12]
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	607a      	str	r2, [r7, #4]
 8003962:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8003964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003966:	2202      	movs	r2, #2
 8003968:	4013      	ands	r3, r2
 800396a:	d134      	bne.n	80039d6 <_ntoa_format+0x80>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800396c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800396e:	2b00      	cmp	r3, #0
 8003970:	d017      	beq.n	80039a2 <_ntoa_format+0x4c>
 8003972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003974:	2201      	movs	r2, #1
 8003976:	4013      	ands	r3, r2
 8003978:	d013      	beq.n	80039a2 <_ntoa_format+0x4c>
 800397a:	2328      	movs	r3, #40	@ 0x28
 800397c:	18fb      	adds	r3, r7, r3
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d103      	bne.n	800398c <_ntoa_format+0x36>
 8003984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003986:	220c      	movs	r2, #12
 8003988:	4013      	ands	r3, r2
 800398a:	d00a      	beq.n	80039a2 <_ntoa_format+0x4c>
      width--;
 800398c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800398e:	3b01      	subs	r3, #1
 8003990:	637b      	str	r3, [r7, #52]	@ 0x34
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003992:	e006      	b.n	80039a2 <_ntoa_format+0x4c>
      buf[len++] = '0';
 8003994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003996:	1c5a      	adds	r2, r3, #1
 8003998:	627a      	str	r2, [r7, #36]	@ 0x24
 800399a:	6a3a      	ldr	r2, [r7, #32]
 800399c:	18d3      	adds	r3, r2, r3
 800399e:	2230      	movs	r2, #48	@ 0x30
 80039a0:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80039a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d20a      	bcs.n	80039c0 <_ntoa_format+0x6a>
 80039aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ac:	2b1f      	cmp	r3, #31
 80039ae:	d9f1      	bls.n	8003994 <_ntoa_format+0x3e>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80039b0:	e006      	b.n	80039c0 <_ntoa_format+0x6a>
      buf[len++] = '0';
 80039b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	627a      	str	r2, [r7, #36]	@ 0x24
 80039b8:	6a3a      	ldr	r2, [r7, #32]
 80039ba:	18d3      	adds	r3, r2, r3
 80039bc:	2230      	movs	r2, #48	@ 0x30
 80039be:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80039c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039c2:	2201      	movs	r2, #1
 80039c4:	4013      	ands	r3, r2
 80039c6:	d006      	beq.n	80039d6 <_ntoa_format+0x80>
 80039c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d202      	bcs.n	80039d6 <_ntoa_format+0x80>
 80039d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d2:	2b1f      	cmp	r3, #31
 80039d4:	d9ed      	bls.n	80039b2 <_ntoa_format+0x5c>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 80039d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039d8:	2210      	movs	r2, #16
 80039da:	4013      	ands	r3, r2
 80039dc:	d056      	beq.n	8003a8c <_ntoa_format+0x136>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80039de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80039e0:	2380      	movs	r3, #128	@ 0x80
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	4013      	ands	r3, r2
 80039e6:	d116      	bne.n	8003a16 <_ntoa_format+0xc0>
 80039e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d013      	beq.n	8003a16 <_ntoa_format+0xc0>
 80039ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d003      	beq.n	80039fe <_ntoa_format+0xa8>
 80039f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d10b      	bne.n	8003a16 <_ntoa_format+0xc0>
      len--;
 80039fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a00:	3b01      	subs	r3, #1
 8003a02:	627b      	str	r3, [r7, #36]	@ 0x24
      if (len && (base == 16U)) {
 8003a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d005      	beq.n	8003a16 <_ntoa_format+0xc0>
 8003a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a0c:	2b10      	cmp	r3, #16
 8003a0e:	d102      	bne.n	8003a16 <_ntoa_format+0xc0>
        len--;
 8003a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a12:	3b01      	subs	r3, #1
 8003a14:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a18:	2b10      	cmp	r3, #16
 8003a1a:	d10e      	bne.n	8003a3a <_ntoa_format+0xe4>
 8003a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a1e:	2220      	movs	r2, #32
 8003a20:	4013      	ands	r3, r2
 8003a22:	d10a      	bne.n	8003a3a <_ntoa_format+0xe4>
 8003a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a26:	2b1f      	cmp	r3, #31
 8003a28:	d807      	bhi.n	8003a3a <_ntoa_format+0xe4>
      buf[len++] = 'x';
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2c:	1c5a      	adds	r2, r3, #1
 8003a2e:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a30:	6a3a      	ldr	r2, [r7, #32]
 8003a32:	18d3      	adds	r3, r2, r3
 8003a34:	2278      	movs	r2, #120	@ 0x78
 8003a36:	701a      	strb	r2, [r3, #0]
 8003a38:	e01e      	b.n	8003a78 <_ntoa_format+0x122>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a3c:	2b10      	cmp	r3, #16
 8003a3e:	d10e      	bne.n	8003a5e <_ntoa_format+0x108>
 8003a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a42:	2220      	movs	r2, #32
 8003a44:	4013      	ands	r3, r2
 8003a46:	d00a      	beq.n	8003a5e <_ntoa_format+0x108>
 8003a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4a:	2b1f      	cmp	r3, #31
 8003a4c:	d807      	bhi.n	8003a5e <_ntoa_format+0x108>
      buf[len++] = 'X';
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a50:	1c5a      	adds	r2, r3, #1
 8003a52:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a54:	6a3a      	ldr	r2, [r7, #32]
 8003a56:	18d3      	adds	r3, r2, r3
 8003a58:	2258      	movs	r2, #88	@ 0x58
 8003a5a:	701a      	strb	r2, [r3, #0]
 8003a5c:	e00c      	b.n	8003a78 <_ntoa_format+0x122>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d109      	bne.n	8003a78 <_ntoa_format+0x122>
 8003a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a66:	2b1f      	cmp	r3, #31
 8003a68:	d806      	bhi.n	8003a78 <_ntoa_format+0x122>
      buf[len++] = 'b';
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6c:	1c5a      	adds	r2, r3, #1
 8003a6e:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a70:	6a3a      	ldr	r2, [r7, #32]
 8003a72:	18d3      	adds	r3, r2, r3
 8003a74:	2262      	movs	r2, #98	@ 0x62
 8003a76:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8003a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7a:	2b1f      	cmp	r3, #31
 8003a7c:	d806      	bhi.n	8003a8c <_ntoa_format+0x136>
      buf[len++] = '0';
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a84:	6a3a      	ldr	r2, [r7, #32]
 8003a86:	18d3      	adds	r3, r2, r3
 8003a88:	2230      	movs	r2, #48	@ 0x30
 8003a8a:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8e:	2b1f      	cmp	r3, #31
 8003a90:	d823      	bhi.n	8003ada <_ntoa_format+0x184>
    if (negative) {
 8003a92:	2328      	movs	r3, #40	@ 0x28
 8003a94:	18fb      	adds	r3, r7, r3
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d007      	beq.n	8003aac <_ntoa_format+0x156>
      buf[len++] = '-';
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9e:	1c5a      	adds	r2, r3, #1
 8003aa0:	627a      	str	r2, [r7, #36]	@ 0x24
 8003aa2:	6a3a      	ldr	r2, [r7, #32]
 8003aa4:	18d3      	adds	r3, r2, r3
 8003aa6:	222d      	movs	r2, #45	@ 0x2d
 8003aa8:	701a      	strb	r2, [r3, #0]
 8003aaa:	e016      	b.n	8003ada <_ntoa_format+0x184>
    }
    else if (flags & FLAGS_PLUS) {
 8003aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aae:	2204      	movs	r2, #4
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	d007      	beq.n	8003ac4 <_ntoa_format+0x16e>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab6:	1c5a      	adds	r2, r3, #1
 8003ab8:	627a      	str	r2, [r7, #36]	@ 0x24
 8003aba:	6a3a      	ldr	r2, [r7, #32]
 8003abc:	18d3      	adds	r3, r2, r3
 8003abe:	222b      	movs	r2, #43	@ 0x2b
 8003ac0:	701a      	strb	r2, [r3, #0]
 8003ac2:	e00a      	b.n	8003ada <_ntoa_format+0x184>
    }
    else if (flags & FLAGS_SPACE) {
 8003ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ac6:	2208      	movs	r2, #8
 8003ac8:	4013      	ands	r3, r2
 8003aca:	d006      	beq.n	8003ada <_ntoa_format+0x184>
      buf[len++] = ' ';
 8003acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	627a      	str	r2, [r7, #36]	@ 0x24
 8003ad2:	6a3a      	ldr	r2, [r7, #32]
 8003ad4:	18d3      	adds	r3, r2, r3
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8003ada:	683c      	ldr	r4, [r7, #0]
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	68b9      	ldr	r1, [r7, #8]
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ae4:	9303      	str	r3, [sp, #12]
 8003ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ae8:	9302      	str	r3, [sp, #8]
 8003aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aec:	9301      	str	r3, [sp, #4]
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	0023      	movs	r3, r4
 8003af4:	f7ff fee2 	bl	80038bc <_out_rev>
 8003af8:	0003      	movs	r3, r0
}
 8003afa:	0018      	movs	r0, r3
 8003afc:	46bd      	mov	sp, r7
 8003afe:	b005      	add	sp, #20
 8003b00:	bd90      	pop	{r4, r7, pc}

08003b02 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003b02:	b590      	push	{r4, r7, lr}
 8003b04:	b097      	sub	sp, #92	@ 0x5c
 8003b06:	af08      	add	r7, sp, #32
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	607a      	str	r2, [r7, #4]
 8003b0e:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	637b      	str	r3, [r7, #52]	@ 0x34

  // no hash for 0 values
  if (!value) {
 8003b14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d103      	bne.n	8003b22 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8003b1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b1c:	2210      	movs	r2, #16
 8003b1e:	4393      	bics	r3, r2
 8003b20:	65fb      	str	r3, [r7, #92]	@ 0x5c
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8003b22:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003b24:	2380      	movs	r3, #128	@ 0x80
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	4013      	ands	r3, r2
 8003b2a:	d002      	beq.n	8003b32 <_ntoa_long+0x30>
 8003b2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d033      	beq.n	8003b9a <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 8003b32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b34:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003b36:	0018      	movs	r0, r3
 8003b38:	f7fc fb6c 	bl	8000214 <__aeabi_uidivmod>
 8003b3c:	000b      	movs	r3, r1
 8003b3e:	001a      	movs	r2, r3
 8003b40:	2133      	movs	r1, #51	@ 0x33
 8003b42:	187b      	adds	r3, r7, r1
 8003b44:	701a      	strb	r2, [r3, #0]
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8003b46:	000a      	movs	r2, r1
 8003b48:	18bb      	adds	r3, r7, r2
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2b09      	cmp	r3, #9
 8003b4e:	d804      	bhi.n	8003b5a <_ntoa_long+0x58>
 8003b50:	18bb      	adds	r3, r7, r2
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	3330      	adds	r3, #48	@ 0x30
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	e00d      	b.n	8003b76 <_ntoa_long+0x74>
 8003b5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	4013      	ands	r3, r2
 8003b60:	d001      	beq.n	8003b66 <_ntoa_long+0x64>
 8003b62:	2341      	movs	r3, #65	@ 0x41
 8003b64:	e000      	b.n	8003b68 <_ntoa_long+0x66>
 8003b66:	2361      	movs	r3, #97	@ 0x61
 8003b68:	2233      	movs	r2, #51	@ 0x33
 8003b6a:	18ba      	adds	r2, r7, r2
 8003b6c:	7812      	ldrb	r2, [r2, #0]
 8003b6e:	189b      	adds	r3, r3, r2
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	3b0a      	subs	r3, #10
 8003b74:	b2da      	uxtb	r2, r3
 8003b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b78:	1c59      	adds	r1, r3, #1
 8003b7a:	6379      	str	r1, [r7, #52]	@ 0x34
 8003b7c:	2110      	movs	r1, #16
 8003b7e:	1879      	adds	r1, r7, r1
 8003b80:	54ca      	strb	r2, [r1, r3]
      value /= base;
 8003b82:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003b84:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003b86:	f7fc fabf 	bl	8000108 <__udivsi3>
 8003b8a:	0003      	movs	r3, r0
 8003b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8003b8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d002      	beq.n	8003b9a <_ntoa_long+0x98>
 8003b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b96:	2b1f      	cmp	r3, #31
 8003b98:	d9cb      	bls.n	8003b32 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8003b9a:	683c      	ldr	r4, [r7, #0]
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	68b9      	ldr	r1, [r7, #8]
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ba4:	9306      	str	r3, [sp, #24]
 8003ba6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ba8:	9305      	str	r3, [sp, #20]
 8003baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bac:	9304      	str	r3, [sp, #16]
 8003bae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bb0:	9303      	str	r3, [sp, #12]
 8003bb2:	234c      	movs	r3, #76	@ 0x4c
 8003bb4:	18fb      	adds	r3, r7, r3
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	9302      	str	r3, [sp, #8]
 8003bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bbc:	9301      	str	r3, [sp, #4]
 8003bbe:	2310      	movs	r3, #16
 8003bc0:	18fb      	adds	r3, r7, r3
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	0023      	movs	r3, r4
 8003bc6:	f7ff fec6 	bl	8003956 <_ntoa_format>
 8003bca:	0003      	movs	r3, r0
}
 8003bcc:	0018      	movs	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	b00f      	add	sp, #60	@ 0x3c
 8003bd2:	bd90      	pop	{r4, r7, pc}

08003bd4 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003bd4:	b5b0      	push	{r4, r5, r7, lr}
 8003bd6:	b096      	sub	sp, #88	@ 0x58
 8003bd8:	af08      	add	r7, sp, #32
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
 8003be0:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	637b      	str	r3, [r7, #52]	@ 0x34

  // no hash for 0 values
  if (!value) {
 8003be6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003be8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bea:	4313      	orrs	r3, r2
 8003bec:	d103      	bne.n	8003bf6 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8003bee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bf0:	2210      	movs	r2, #16
 8003bf2:	4393      	bics	r3, r2
 8003bf4:	66bb      	str	r3, [r7, #104]	@ 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8003bf6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003bf8:	2380      	movs	r3, #128	@ 0x80
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	d003      	beq.n	8003c08 <_ntoa_long_long+0x34>
 8003c00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c04:	4313      	orrs	r3, r2
 8003c06:	d03a      	beq.n	8003c7e <_ntoa_long_long+0xaa>
    do {
      const char digit = (char)(value % base);
 8003c08:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003c0a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003c0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c10:	f7fc fc4c 	bl	80004ac <__aeabi_uldivmod>
 8003c14:	0010      	movs	r0, r2
 8003c16:	0019      	movs	r1, r3
 8003c18:	2433      	movs	r4, #51	@ 0x33
 8003c1a:	193b      	adds	r3, r7, r4
 8003c1c:	1c02      	adds	r2, r0, #0
 8003c1e:	701a      	strb	r2, [r3, #0]
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8003c20:	0022      	movs	r2, r4
 8003c22:	18bb      	adds	r3, r7, r2
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	2b09      	cmp	r3, #9
 8003c28:	d804      	bhi.n	8003c34 <_ntoa_long_long+0x60>
 8003c2a:	18bb      	adds	r3, r7, r2
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	3330      	adds	r3, #48	@ 0x30
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	e00d      	b.n	8003c50 <_ntoa_long_long+0x7c>
 8003c34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c36:	2220      	movs	r2, #32
 8003c38:	4013      	ands	r3, r2
 8003c3a:	d001      	beq.n	8003c40 <_ntoa_long_long+0x6c>
 8003c3c:	2341      	movs	r3, #65	@ 0x41
 8003c3e:	e000      	b.n	8003c42 <_ntoa_long_long+0x6e>
 8003c40:	2361      	movs	r3, #97	@ 0x61
 8003c42:	2233      	movs	r2, #51	@ 0x33
 8003c44:	18ba      	adds	r2, r7, r2
 8003c46:	7812      	ldrb	r2, [r2, #0]
 8003c48:	189b      	adds	r3, r3, r2
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	3b0a      	subs	r3, #10
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c52:	1c59      	adds	r1, r3, #1
 8003c54:	6379      	str	r1, [r7, #52]	@ 0x34
 8003c56:	2110      	movs	r1, #16
 8003c58:	1879      	adds	r1, r7, r1
 8003c5a:	54ca      	strb	r2, [r1, r3]
      value /= base;
 8003c5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c60:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003c62:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003c64:	f7fc fc22 	bl	80004ac <__aeabi_uldivmod>
 8003c68:	0002      	movs	r2, r0
 8003c6a:	000b      	movs	r3, r1
 8003c6c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8003c70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c74:	4313      	orrs	r3, r2
 8003c76:	d002      	beq.n	8003c7e <_ntoa_long_long+0xaa>
 8003c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c7a:	2b1f      	cmp	r3, #31
 8003c7c:	d9c4      	bls.n	8003c08 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8003c7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c80:	683d      	ldr	r5, [r7, #0]
 8003c82:	687c      	ldr	r4, [r7, #4]
 8003c84:	68b9      	ldr	r1, [r7, #8]
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003c8a:	9206      	str	r2, [sp, #24]
 8003c8c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003c8e:	9205      	str	r2, [sp, #20]
 8003c90:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003c92:	9204      	str	r2, [sp, #16]
 8003c94:	9303      	str	r3, [sp, #12]
 8003c96:	2350      	movs	r3, #80	@ 0x50
 8003c98:	18fb      	adds	r3, r7, r3
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	9302      	str	r3, [sp, #8]
 8003c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ca0:	9301      	str	r3, [sp, #4]
 8003ca2:	2310      	movs	r3, #16
 8003ca4:	18fb      	adds	r3, r7, r3
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	002b      	movs	r3, r5
 8003caa:	0022      	movs	r2, r4
 8003cac:	f7ff fe53 	bl	8003956 <_ntoa_format>
 8003cb0:	0003      	movs	r3, r0
}
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	b00e      	add	sp, #56	@ 0x38
 8003cb8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003cbc <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cbe:	b09d      	sub	sp, #116	@ 0x74
 8003cc0:	af06      	add	r7, sp, #24
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
 8003cc8:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	657b      	str	r3, [r7, #84]	@ 0x54
  double diff = 0.0;
 8003cce:	2200      	movs	r2, #0
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8003cd6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003cd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cda:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8003cdc:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003cde:	f7fc fb99 	bl	8000414 <__aeabi_dcmpeq>
 8003ce2:	1e03      	subs	r3, r0, #0
 8003ce4:	d112      	bne.n	8003d0c <_ftoa+0x50>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8003ce6:	683c      	ldr	r4, [r7, #0]
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	68b9      	ldr	r1, [r7, #8]
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	2380      	movs	r3, #128	@ 0x80
 8003cf0:	18fb      	adds	r3, r7, r3
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	9303      	str	r3, [sp, #12]
 8003cf6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003cf8:	9302      	str	r3, [sp, #8]
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	9301      	str	r3, [sp, #4]
 8003cfe:	4bbf      	ldr	r3, [pc, #764]	@ (8003ffc <_ftoa+0x340>)
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	0023      	movs	r3, r4
 8003d04:	f7ff fdda 	bl	80038bc <_out_rev>
 8003d08:	0003      	movs	r3, r0
 8003d0a:	e211      	b.n	8004130 <_ftoa+0x474>
  if (value < -DBL_MAX)
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	4252      	negs	r2, r2
 8003d10:	4bbb      	ldr	r3, [pc, #748]	@ (8004000 <_ftoa+0x344>)
 8003d12:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8003d14:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003d16:	f7fc fb83 	bl	8000420 <__aeabi_dcmplt>
 8003d1a:	1e03      	subs	r3, r0, #0
 8003d1c:	d012      	beq.n	8003d44 <_ftoa+0x88>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8003d1e:	683c      	ldr	r4, [r7, #0]
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	68b9      	ldr	r1, [r7, #8]
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	2380      	movs	r3, #128	@ 0x80
 8003d28:	18fb      	adds	r3, r7, r3
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	9303      	str	r3, [sp, #12]
 8003d2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d30:	9302      	str	r3, [sp, #8]
 8003d32:	2304      	movs	r3, #4
 8003d34:	9301      	str	r3, [sp, #4]
 8003d36:	4bb3      	ldr	r3, [pc, #716]	@ (8004004 <_ftoa+0x348>)
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	0023      	movs	r3, r4
 8003d3c:	f7ff fdbe 	bl	80038bc <_out_rev>
 8003d40:	0003      	movs	r3, r0
 8003d42:	e1f5      	b.n	8004130 <_ftoa+0x474>
  if (value > DBL_MAX)
 8003d44:	2201      	movs	r2, #1
 8003d46:	4252      	negs	r2, r2
 8003d48:	4baf      	ldr	r3, [pc, #700]	@ (8004008 <_ftoa+0x34c>)
 8003d4a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8003d4c:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003d4e:	f7fc fb7b 	bl	8000448 <__aeabi_dcmpgt>
 8003d52:	1e03      	subs	r3, r0, #0
 8003d54:	d024      	beq.n	8003da0 <_ftoa+0xe4>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8003d56:	2380      	movs	r3, #128	@ 0x80
 8003d58:	18fb      	adds	r3, r7, r3
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2204      	movs	r2, #4
 8003d5e:	4013      	ands	r3, r2
 8003d60:	d001      	beq.n	8003d66 <_ftoa+0xaa>
 8003d62:	4baa      	ldr	r3, [pc, #680]	@ (800400c <_ftoa+0x350>)
 8003d64:	e000      	b.n	8003d68 <_ftoa+0xac>
 8003d66:	4baa      	ldr	r3, [pc, #680]	@ (8004010 <_ftoa+0x354>)
 8003d68:	2280      	movs	r2, #128	@ 0x80
 8003d6a:	18ba      	adds	r2, r7, r2
 8003d6c:	6812      	ldr	r2, [r2, #0]
 8003d6e:	2104      	movs	r1, #4
 8003d70:	400a      	ands	r2, r1
 8003d72:	d001      	beq.n	8003d78 <_ftoa+0xbc>
 8003d74:	2204      	movs	r2, #4
 8003d76:	e000      	b.n	8003d7a <_ftoa+0xbe>
 8003d78:	2203      	movs	r2, #3
 8003d7a:	683e      	ldr	r6, [r7, #0]
 8003d7c:	687d      	ldr	r5, [r7, #4]
 8003d7e:	68bc      	ldr	r4, [r7, #8]
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	2180      	movs	r1, #128	@ 0x80
 8003d84:	1879      	adds	r1, r7, r1
 8003d86:	6809      	ldr	r1, [r1, #0]
 8003d88:	9103      	str	r1, [sp, #12]
 8003d8a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003d8c:	9102      	str	r1, [sp, #8]
 8003d8e:	9201      	str	r2, [sp, #4]
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	0033      	movs	r3, r6
 8003d94:	002a      	movs	r2, r5
 8003d96:	0021      	movs	r1, r4
 8003d98:	f7ff fd90 	bl	80038bc <_out_rev>
 8003d9c:	0003      	movs	r3, r0
 8003d9e:	e1c7      	b.n	8004130 <_ftoa+0x474>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8003da0:	2200      	movs	r2, #0
 8003da2:	4b9c      	ldr	r3, [pc, #624]	@ (8004014 <_ftoa+0x358>)
 8003da4:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8003da6:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003da8:	f7fc fb4e 	bl	8000448 <__aeabi_dcmpgt>
 8003dac:	1e03      	subs	r3, r0, #0
 8003dae:	d107      	bne.n	8003dc0 <_ftoa+0x104>
 8003db0:	2200      	movs	r2, #0
 8003db2:	4b99      	ldr	r3, [pc, #612]	@ (8004018 <_ftoa+0x35c>)
 8003db4:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8003db6:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003db8:	f7fc fb32 	bl	8000420 <__aeabi_dcmplt>
 8003dbc:	1e03      	subs	r3, r0, #0
 8003dbe:	d015      	beq.n	8003dec <_ftoa+0x130>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8003dc0:	683d      	ldr	r5, [r7, #0]
 8003dc2:	687c      	ldr	r4, [r7, #4]
 8003dc4:	68b9      	ldr	r1, [r7, #8]
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	2380      	movs	r3, #128	@ 0x80
 8003dca:	18fb      	adds	r3, r7, r3
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	9304      	str	r3, [sp, #16]
 8003dd0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003dd2:	9303      	str	r3, [sp, #12]
 8003dd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003dd6:	9302      	str	r3, [sp, #8]
 8003dd8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003dda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ddc:	9200      	str	r2, [sp, #0]
 8003dde:	9301      	str	r3, [sp, #4]
 8003de0:	002b      	movs	r3, r5
 8003de2:	0022      	movs	r2, r4
 8003de4:	f000 f9a8 	bl	8004138 <_etoa>
 8003de8:	0003      	movs	r3, r0
 8003dea:	e1a1      	b.n	8004130 <_ftoa+0x474>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8003dec:	2453      	movs	r4, #83	@ 0x53
 8003dee:	193b      	adds	r3, r7, r4
 8003df0:	2200      	movs	r2, #0
 8003df2:	701a      	strb	r2, [r3, #0]
  if (value < 0) {
 8003df4:	2200      	movs	r2, #0
 8003df6:	2300      	movs	r3, #0
 8003df8:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8003dfa:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003dfc:	f7fc fb10 	bl	8000420 <__aeabi_dcmplt>
 8003e00:	1e03      	subs	r3, r0, #0
 8003e02:	d00c      	beq.n	8003e1e <_ftoa+0x162>
    negative = true;
 8003e04:	193b      	adds	r3, r7, r4
 8003e06:	2201      	movs	r2, #1
 8003e08:	701a      	strb	r2, [r3, #0]
    value = 0 - value;
 8003e0a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003e0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e0e:	2000      	movs	r0, #0
 8003e10:	2100      	movs	r1, #0
 8003e12:	f7fd fec5 	bl	8001ba0 <__aeabi_dsub>
 8003e16:	0002      	movs	r2, r0
 8003e18:	000b      	movs	r3, r1
 8003e1a:	673a      	str	r2, [r7, #112]	@ 0x70
 8003e1c:	677b      	str	r3, [r7, #116]	@ 0x74
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8003e1e:	2380      	movs	r3, #128	@ 0x80
 8003e20:	18fb      	adds	r3, r7, r3
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	2380      	movs	r3, #128	@ 0x80
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	4013      	ands	r3, r2
 8003e2a:	d10c      	bne.n	8003e46 <_ftoa+0x18a>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003e2c:	2306      	movs	r3, #6
 8003e2e:	67bb      	str	r3, [r7, #120]	@ 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8003e30:	e009      	b.n	8003e46 <_ftoa+0x18a>
    buf[len++] = '0';
 8003e32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	657a      	str	r2, [r7, #84]	@ 0x54
 8003e38:	2210      	movs	r2, #16
 8003e3a:	18ba      	adds	r2, r7, r2
 8003e3c:	2130      	movs	r1, #48	@ 0x30
 8003e3e:	54d1      	strb	r1, [r2, r3]
    prec--;
 8003e40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e42:	3b01      	subs	r3, #1
 8003e44:	67bb      	str	r3, [r7, #120]	@ 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8003e46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e48:	2b1f      	cmp	r3, #31
 8003e4a:	d802      	bhi.n	8003e52 <_ftoa+0x196>
 8003e4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e4e:	2b09      	cmp	r3, #9
 8003e50:	d8ef      	bhi.n	8003e32 <_ftoa+0x176>
  }

  int whole = (int)value;
 8003e52:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8003e54:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003e56:	f7fe fa3f 	bl	80022d8 <__aeabi_d2iz>
 8003e5a:	0003      	movs	r3, r0
 8003e5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  double tmp = (value - whole) * pow10[prec];
 8003e5e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003e60:	f7fe fa76 	bl	8002350 <__aeabi_i2d>
 8003e64:	0002      	movs	r2, r0
 8003e66:	000b      	movs	r3, r1
 8003e68:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8003e6a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003e6c:	f7fd fe98 	bl	8001ba0 <__aeabi_dsub>
 8003e70:	0002      	movs	r2, r0
 8003e72:	000b      	movs	r3, r1
 8003e74:	0010      	movs	r0, r2
 8003e76:	0019      	movs	r1, r3
 8003e78:	4a68      	ldr	r2, [pc, #416]	@ (800401c <_ftoa+0x360>)
 8003e7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	18d3      	adds	r3, r2, r3
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f7fd fbc4 	bl	8001610 <__aeabi_dmul>
 8003e88:	0002      	movs	r2, r0
 8003e8a:	000b      	movs	r3, r1
 8003e8c:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e8e:	637b      	str	r3, [r7, #52]	@ 0x34
  unsigned long frac = (unsigned long)tmp;
 8003e90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e92:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003e94:	f7fc fb2a 	bl	80004ec <__aeabi_d2uiz>
 8003e98:	0003      	movs	r3, r0
 8003e9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  diff = tmp - frac;
 8003e9c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003e9e:	f7fe fa85 	bl	80023ac <__aeabi_ui2d>
 8003ea2:	0002      	movs	r2, r0
 8003ea4:	000b      	movs	r3, r1
 8003ea6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ea8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003eaa:	f7fd fe79 	bl	8001ba0 <__aeabi_dsub>
 8003eae:	0002      	movs	r2, r0
 8003eb0:	000b      	movs	r3, r1
 8003eb2:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (diff > 0.5) {
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	4b59      	ldr	r3, [pc, #356]	@ (8004020 <_ftoa+0x364>)
 8003eba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003ebc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ebe:	f7fc fac3 	bl	8000448 <__aeabi_dcmpgt>
 8003ec2:	1e03      	subs	r3, r0, #0
 8003ec4:	d015      	beq.n	8003ef2 <_ftoa+0x236>
    ++frac;
 8003ec6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ec8:	3301      	adds	r3, #1
 8003eca:	64bb      	str	r3, [r7, #72]	@ 0x48
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8003ecc:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003ece:	f7fe fa6d 	bl	80023ac <__aeabi_ui2d>
 8003ed2:	4a52      	ldr	r2, [pc, #328]	@ (800401c <_ftoa+0x360>)
 8003ed4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	18d3      	adds	r3, r2, r3
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f7fc fabd 	bl	800045c <__aeabi_dcmpge>
 8003ee2:	1e03      	subs	r3, r0, #0
 8003ee4:	d017      	beq.n	8003f16 <_ftoa+0x25a>
      frac = 0;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
      ++whole;
 8003eea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003eec:	3301      	adds	r3, #1
 8003eee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ef0:	e011      	b.n	8003f16 <_ftoa+0x25a>
    }
  }
  else if (diff < 0.5) {
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	4b4a      	ldr	r3, [pc, #296]	@ (8004020 <_ftoa+0x364>)
 8003ef6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003ef8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003efa:	f7fc fa91 	bl	8000420 <__aeabi_dcmplt>
 8003efe:	1e03      	subs	r3, r0, #0
 8003f00:	d109      	bne.n	8003f16 <_ftoa+0x25a>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8003f02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <_ftoa+0x254>
 8003f08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	d002      	beq.n	8003f16 <_ftoa+0x25a>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8003f10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f12:	3301      	adds	r3, #1
 8003f14:	64bb      	str	r3, [r7, #72]	@ 0x48
  }

  if (prec == 0U) {
 8003f16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d12f      	bne.n	8003f7c <_ftoa+0x2c0>
    diff = value - (double)whole;
 8003f1c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003f1e:	f7fe fa17 	bl	8002350 <__aeabi_i2d>
 8003f22:	0002      	movs	r2, r0
 8003f24:	000b      	movs	r3, r1
 8003f26:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8003f28:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003f2a:	f7fd fe39 	bl	8001ba0 <__aeabi_dsub>
 8003f2e:	0002      	movs	r2, r0
 8003f30:	000b      	movs	r3, r1
 8003f32:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8003f36:	2301      	movs	r3, #1
 8003f38:	1c1c      	adds	r4, r3, #0
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	4b38      	ldr	r3, [pc, #224]	@ (8004020 <_ftoa+0x364>)
 8003f3e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003f40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f42:	f7fc fa6d 	bl	8000420 <__aeabi_dcmplt>
 8003f46:	1e03      	subs	r3, r0, #0
 8003f48:	d101      	bne.n	8003f4e <_ftoa+0x292>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	1c1c      	adds	r4, r3, #0
 8003f4e:	b2e3      	uxtb	r3, r4
 8003f50:	2201      	movs	r2, #1
 8003f52:	4053      	eors	r3, r2
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d107      	bne.n	8003f6a <_ftoa+0x2ae>
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	4b30      	ldr	r3, [pc, #192]	@ (8004020 <_ftoa+0x364>)
 8003f5e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003f60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f62:	f7fc fa71 	bl	8000448 <__aeabi_dcmpgt>
 8003f66:	1e03      	subs	r3, r0, #0
 8003f68:	d046      	beq.n	8003ff8 <_ftoa+0x33c>
 8003f6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	4013      	ands	r3, r2
 8003f70:	d100      	bne.n	8003f74 <_ftoa+0x2b8>
 8003f72:	e070      	b.n	8004056 <_ftoa+0x39a>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8003f74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f76:	3301      	adds	r3, #1
 8003f78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f7a:	e06c      	b.n	8004056 <_ftoa+0x39a>
    }
  }
  else {
    unsigned int count = prec;
 8003f7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f7e:	647b      	str	r3, [r7, #68]	@ 0x44
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003f80:	e01b      	b.n	8003fba <_ftoa+0x2fe>
      --count;
 8003f82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f84:	3b01      	subs	r3, #1
 8003f86:	647b      	str	r3, [r7, #68]	@ 0x44
      buf[len++] = (char)(48U + (frac % 10U));
 8003f88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f8a:	210a      	movs	r1, #10
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	f7fc f941 	bl	8000214 <__aeabi_uidivmod>
 8003f92:	000b      	movs	r3, r1
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f98:	1c59      	adds	r1, r3, #1
 8003f9a:	6579      	str	r1, [r7, #84]	@ 0x54
 8003f9c:	3230      	adds	r2, #48	@ 0x30
 8003f9e:	b2d1      	uxtb	r1, r2
 8003fa0:	2210      	movs	r2, #16
 8003fa2:	18ba      	adds	r2, r7, r2
 8003fa4:	54d1      	strb	r1, [r2, r3]
      if (!(frac /= 10U)) {
 8003fa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fa8:	210a      	movs	r1, #10
 8003faa:	0018      	movs	r0, r3
 8003fac:	f7fc f8ac 	bl	8000108 <__udivsi3>
 8003fb0:	0003      	movs	r3, r0
 8003fb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <_ftoa+0x306>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003fba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fbc:	2b1f      	cmp	r3, #31
 8003fbe:	d9e0      	bls.n	8003f82 <_ftoa+0x2c6>
 8003fc0:	e008      	b.n	8003fd4 <_ftoa+0x318>
        break;
 8003fc2:	46c0      	nop			@ (mov r8, r8)
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003fc4:	e006      	b.n	8003fd4 <_ftoa+0x318>
      buf[len++] = '0';
 8003fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fc8:	1c5a      	adds	r2, r3, #1
 8003fca:	657a      	str	r2, [r7, #84]	@ 0x54
 8003fcc:	2210      	movs	r2, #16
 8003fce:	18ba      	adds	r2, r7, r2
 8003fd0:	2130      	movs	r1, #48	@ 0x30
 8003fd2:	54d1      	strb	r1, [r2, r3]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003fd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fd6:	2b1f      	cmp	r3, #31
 8003fd8:	d804      	bhi.n	8003fe4 <_ftoa+0x328>
 8003fda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fdc:	1e5a      	subs	r2, r3, #1
 8003fde:	647a      	str	r2, [r7, #68]	@ 0x44
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1f0      	bne.n	8003fc6 <_ftoa+0x30a>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003fe4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fe6:	2b1f      	cmp	r3, #31
 8003fe8:	d835      	bhi.n	8004056 <_ftoa+0x39a>
      // add decimal
      buf[len++] = '.';
 8003fea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fec:	1c5a      	adds	r2, r3, #1
 8003fee:	657a      	str	r2, [r7, #84]	@ 0x54
 8003ff0:	2210      	movs	r2, #16
 8003ff2:	18ba      	adds	r2, r7, r2
 8003ff4:	212e      	movs	r1, #46	@ 0x2e
 8003ff6:	54d1      	strb	r1, [r2, r3]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003ff8:	e02d      	b.n	8004056 <_ftoa+0x39a>
 8003ffa:	46c0      	nop			@ (mov r8, r8)
 8003ffc:	0800951c 	.word	0x0800951c
 8004000:	ffefffff 	.word	0xffefffff
 8004004:	08009520 	.word	0x08009520
 8004008:	7fefffff 	.word	0x7fefffff
 800400c:	08009528 	.word	0x08009528
 8004010:	08009530 	.word	0x08009530
 8004014:	41cdcd65 	.word	0x41cdcd65
 8004018:	c1cdcd65 	.word	0xc1cdcd65
 800401c:	08009728 	.word	0x08009728
 8004020:	3fe00000 	.word	0x3fe00000
    buf[len++] = (char)(48 + (whole % 10));
 8004024:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004026:	210a      	movs	r1, #10
 8004028:	0018      	movs	r0, r3
 800402a:	f7fc f9dd 	bl	80003e8 <__aeabi_idivmod>
 800402e:	000b      	movs	r3, r1
 8004030:	b2da      	uxtb	r2, r3
 8004032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004034:	1c59      	adds	r1, r3, #1
 8004036:	6579      	str	r1, [r7, #84]	@ 0x54
 8004038:	3230      	adds	r2, #48	@ 0x30
 800403a:	b2d1      	uxtb	r1, r2
 800403c:	2210      	movs	r2, #16
 800403e:	18ba      	adds	r2, r7, r2
 8004040:	54d1      	strb	r1, [r2, r3]
    if (!(whole /= 10)) {
 8004042:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004044:	210a      	movs	r1, #10
 8004046:	0018      	movs	r0, r3
 8004048:	f7fc f8e8 	bl	800021c <__divsi3>
 800404c:	0003      	movs	r3, r0
 800404e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004050:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <_ftoa+0x3a2>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004056:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004058:	2b1f      	cmp	r3, #31
 800405a:	d9e3      	bls.n	8004024 <_ftoa+0x368>
 800405c:	e000      	b.n	8004060 <_ftoa+0x3a4>
      break;
 800405e:	46c0      	nop			@ (mov r8, r8)
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8004060:	2180      	movs	r1, #128	@ 0x80
 8004062:	187b      	adds	r3, r7, r1
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2202      	movs	r2, #2
 8004068:	4013      	ands	r3, r2
 800406a:	d123      	bne.n	80040b4 <_ftoa+0x3f8>
 800406c:	187b      	adds	r3, r7, r1
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2201      	movs	r2, #1
 8004072:	4013      	ands	r3, r2
 8004074:	d01e      	beq.n	80040b4 <_ftoa+0x3f8>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8004076:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004078:	2b00      	cmp	r3, #0
 800407a:	d014      	beq.n	80040a6 <_ftoa+0x3ea>
 800407c:	2353      	movs	r3, #83	@ 0x53
 800407e:	18fb      	adds	r3, r7, r3
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d104      	bne.n	8004090 <_ftoa+0x3d4>
 8004086:	187b      	adds	r3, r7, r1
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	220c      	movs	r2, #12
 800408c:	4013      	ands	r3, r2
 800408e:	d00a      	beq.n	80040a6 <_ftoa+0x3ea>
      width--;
 8004090:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004092:	3b01      	subs	r3, #1
 8004094:	67fb      	str	r3, [r7, #124]	@ 0x7c
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8004096:	e006      	b.n	80040a6 <_ftoa+0x3ea>
      buf[len++] = '0';
 8004098:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800409a:	1c5a      	adds	r2, r3, #1
 800409c:	657a      	str	r2, [r7, #84]	@ 0x54
 800409e:	2210      	movs	r2, #16
 80040a0:	18ba      	adds	r2, r7, r2
 80040a2:	2130      	movs	r1, #48	@ 0x30
 80040a4:	54d1      	strb	r1, [r2, r3]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80040a6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80040a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d202      	bcs.n	80040b4 <_ftoa+0x3f8>
 80040ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040b0:	2b1f      	cmp	r3, #31
 80040b2:	d9f1      	bls.n	8004098 <_ftoa+0x3dc>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80040b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040b6:	2b1f      	cmp	r3, #31
 80040b8:	d827      	bhi.n	800410a <_ftoa+0x44e>
    if (negative) {
 80040ba:	2353      	movs	r3, #83	@ 0x53
 80040bc:	18fb      	adds	r3, r7, r3
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d007      	beq.n	80040d4 <_ftoa+0x418>
      buf[len++] = '-';
 80040c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040c6:	1c5a      	adds	r2, r3, #1
 80040c8:	657a      	str	r2, [r7, #84]	@ 0x54
 80040ca:	2210      	movs	r2, #16
 80040cc:	18ba      	adds	r2, r7, r2
 80040ce:	212d      	movs	r1, #45	@ 0x2d
 80040d0:	54d1      	strb	r1, [r2, r3]
 80040d2:	e01a      	b.n	800410a <_ftoa+0x44e>
    }
    else if (flags & FLAGS_PLUS) {
 80040d4:	2380      	movs	r3, #128	@ 0x80
 80040d6:	18fb      	adds	r3, r7, r3
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2204      	movs	r2, #4
 80040dc:	4013      	ands	r3, r2
 80040de:	d007      	beq.n	80040f0 <_ftoa+0x434>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80040e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040e2:	1c5a      	adds	r2, r3, #1
 80040e4:	657a      	str	r2, [r7, #84]	@ 0x54
 80040e6:	2210      	movs	r2, #16
 80040e8:	18ba      	adds	r2, r7, r2
 80040ea:	212b      	movs	r1, #43	@ 0x2b
 80040ec:	54d1      	strb	r1, [r2, r3]
 80040ee:	e00c      	b.n	800410a <_ftoa+0x44e>
    }
    else if (flags & FLAGS_SPACE) {
 80040f0:	2380      	movs	r3, #128	@ 0x80
 80040f2:	18fb      	adds	r3, r7, r3
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2208      	movs	r2, #8
 80040f8:	4013      	ands	r3, r2
 80040fa:	d006      	beq.n	800410a <_ftoa+0x44e>
      buf[len++] = ' ';
 80040fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040fe:	1c5a      	adds	r2, r3, #1
 8004100:	657a      	str	r2, [r7, #84]	@ 0x54
 8004102:	2210      	movs	r2, #16
 8004104:	18ba      	adds	r2, r7, r2
 8004106:	2120      	movs	r1, #32
 8004108:	54d1      	strb	r1, [r2, r3]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800410a:	683c      	ldr	r4, [r7, #0]
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	68b9      	ldr	r1, [r7, #8]
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	2380      	movs	r3, #128	@ 0x80
 8004114:	18fb      	adds	r3, r7, r3
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	9303      	str	r3, [sp, #12]
 800411a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800411c:	9302      	str	r3, [sp, #8]
 800411e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004120:	9301      	str	r3, [sp, #4]
 8004122:	2310      	movs	r3, #16
 8004124:	18fb      	adds	r3, r7, r3
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	0023      	movs	r3, r4
 800412a:	f7ff fbc7 	bl	80038bc <_out_rev>
 800412e:	0003      	movs	r3, r0
}
 8004130:	0018      	movs	r0, r3
 8004132:	46bd      	mov	sp, r7
 8004134:	b017      	add	sp, #92	@ 0x5c
 8004136:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004138 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800413a:	b0a7      	sub	sp, #156	@ 0x9c
 800413c:	af06      	add	r7, sp, #24
 800413e:	6478      	str	r0, [r7, #68]	@ 0x44
 8004140:	6439      	str	r1, [r7, #64]	@ 0x40
 8004142:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004144:	63bb      	str	r3, [r7, #56]	@ 0x38
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8004146:	2698      	movs	r6, #152	@ 0x98
 8004148:	19bb      	adds	r3, r7, r6
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	19b9      	adds	r1, r7, r6
 8004150:	6808      	ldr	r0, [r1, #0]
 8004152:	6849      	ldr	r1, [r1, #4]
 8004154:	f7fc f95e 	bl	8000414 <__aeabi_dcmpeq>
 8004158:	1e03      	subs	r3, r0, #0
 800415a:	d013      	beq.n	8004184 <_etoa+0x4c>
 800415c:	2201      	movs	r2, #1
 800415e:	4252      	negs	r2, r2
 8004160:	4bda      	ldr	r3, [pc, #872]	@ (80044cc <_etoa+0x394>)
 8004162:	19b9      	adds	r1, r7, r6
 8004164:	6808      	ldr	r0, [r1, #0]
 8004166:	6849      	ldr	r1, [r1, #4]
 8004168:	f7fc f96e 	bl	8000448 <__aeabi_dcmpgt>
 800416c:	1e03      	subs	r3, r0, #0
 800416e:	d109      	bne.n	8004184 <_etoa+0x4c>
 8004170:	2201      	movs	r2, #1
 8004172:	4252      	negs	r2, r2
 8004174:	4bd6      	ldr	r3, [pc, #856]	@ (80044d0 <_etoa+0x398>)
 8004176:	19b9      	adds	r1, r7, r6
 8004178:	6808      	ldr	r0, [r1, #0]
 800417a:	6849      	ldr	r1, [r1, #4]
 800417c:	f7fc f950 	bl	8000420 <__aeabi_dcmplt>
 8004180:	1e03      	subs	r3, r0, #0
 8004182:	d01b      	beq.n	80041bc <_etoa+0x84>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8004184:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 8004186:	6bfc      	ldr	r4, [r7, #60]	@ 0x3c
 8004188:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800418a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800418c:	23a8      	movs	r3, #168	@ 0xa8
 800418e:	18fb      	adds	r3, r7, r3
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	9304      	str	r3, [sp, #16]
 8004194:	23a4      	movs	r3, #164	@ 0xa4
 8004196:	18fb      	adds	r3, r7, r3
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	9303      	str	r3, [sp, #12]
 800419c:	23a0      	movs	r3, #160	@ 0xa0
 800419e:	18fb      	adds	r3, r7, r3
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	9302      	str	r3, [sp, #8]
 80041a4:	2398      	movs	r3, #152	@ 0x98
 80041a6:	18fb      	adds	r3, r7, r3
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	9200      	str	r2, [sp, #0]
 80041ae:	9301      	str	r3, [sp, #4]
 80041b0:	002b      	movs	r3, r5
 80041b2:	0022      	movs	r2, r4
 80041b4:	f7ff fd82 	bl	8003cbc <_ftoa>
 80041b8:	0003      	movs	r3, r0
 80041ba:	e272      	b.n	80046a2 <_etoa+0x56a>
  }

  // determine the sign
  const bool negative = value < 0;
 80041bc:	233b      	movs	r3, #59	@ 0x3b
 80041be:	2238      	movs	r2, #56	@ 0x38
 80041c0:	189b      	adds	r3, r3, r2
 80041c2:	19de      	adds	r6, r3, r7
 80041c4:	2301      	movs	r3, #1
 80041c6:	73fb      	strb	r3, [r7, #15]
 80041c8:	2200      	movs	r2, #0
 80041ca:	2300      	movs	r3, #0
 80041cc:	2198      	movs	r1, #152	@ 0x98
 80041ce:	1879      	adds	r1, r7, r1
 80041d0:	6808      	ldr	r0, [r1, #0]
 80041d2:	6849      	ldr	r1, [r1, #4]
 80041d4:	f7fc f924 	bl	8000420 <__aeabi_dcmplt>
 80041d8:	1e03      	subs	r3, r0, #0
 80041da:	d101      	bne.n	80041e0 <_etoa+0xa8>
 80041dc:	2300      	movs	r3, #0
 80041de:	73fb      	strb	r3, [r7, #15]
 80041e0:	7bfb      	ldrb	r3, [r7, #15]
 80041e2:	7033      	strb	r3, [r6, #0]
  if (negative) {
 80041e4:	233b      	movs	r3, #59	@ 0x3b
 80041e6:	2238      	movs	r2, #56	@ 0x38
 80041e8:	189b      	adds	r3, r3, r2
 80041ea:	19db      	adds	r3, r3, r7
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00f      	beq.n	8004212 <_etoa+0xda>
    value = -value;
 80041f2:	2198      	movs	r1, #152	@ 0x98
 80041f4:	187b      	adds	r3, r7, r1
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	603b      	str	r3, [r7, #0]
 80041fa:	239c      	movs	r3, #156	@ 0x9c
 80041fc:	18fb      	adds	r3, r7, r3
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	2380      	movs	r3, #128	@ 0x80
 8004202:	061b      	lsls	r3, r3, #24
 8004204:	4053      	eors	r3, r2
 8004206:	607b      	str	r3, [r7, #4]
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	1879      	adds	r1, r7, r1
 800420e:	600a      	str	r2, [r1, #0]
 8004210:	604b      	str	r3, [r1, #4]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8004212:	23a8      	movs	r3, #168	@ 0xa8
 8004214:	18fb      	adds	r3, r7, r3
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	2380      	movs	r3, #128	@ 0x80
 800421a:	00db      	lsls	r3, r3, #3
 800421c:	4013      	ands	r3, r2
 800421e:	d103      	bne.n	8004228 <_etoa+0xf0>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8004220:	2306      	movs	r3, #6
 8004222:	22a0      	movs	r2, #160	@ 0xa0
 8004224:	18ba      	adds	r2, r7, r2
 8004226:	6013      	str	r3, [r2, #0]
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8004228:	2698      	movs	r6, #152	@ 0x98
 800422a:	19bb      	adds	r3, r7, r6
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004232:	64fb      	str	r3, [r7, #76]	@ 0x4c
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8004234:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004236:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004238:	0d1b      	lsrs	r3, r3, #20
 800423a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800423c:	2300      	movs	r3, #0
 800423e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004242:	055b      	lsls	r3, r3, #21
 8004244:	0d5b      	lsrs	r3, r3, #21
 8004246:	4aa3      	ldr	r2, [pc, #652]	@ (80044d4 <_etoa+0x39c>)
 8004248:	4694      	mov	ip, r2
 800424a:	4463      	add	r3, ip
 800424c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800424e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004250:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004252:	2100      	movs	r1, #0
 8004254:	0010      	movs	r0, r2
 8004256:	4388      	bics	r0, r1
 8004258:	0004      	movs	r4, r0
 800425a:	031b      	lsls	r3, r3, #12
 800425c:	0b1d      	lsrs	r5, r3, #12
 800425e:	2300      	movs	r3, #0
 8004260:	4323      	orrs	r3, r4
 8004262:	623b      	str	r3, [r7, #32]
 8004264:	4b9c      	ldr	r3, [pc, #624]	@ (80044d8 <_etoa+0x3a0>)
 8004266:	432b      	orrs	r3, r5
 8004268:	627b      	str	r3, [r7, #36]	@ 0x24
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800426e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004270:	64fc      	str	r4, [r7, #76]	@ 0x4c
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8004272:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004274:	f7fe f86c 	bl	8002350 <__aeabi_i2d>
 8004278:	4a98      	ldr	r2, [pc, #608]	@ (80044dc <_etoa+0x3a4>)
 800427a:	4b99      	ldr	r3, [pc, #612]	@ (80044e0 <_etoa+0x3a8>)
 800427c:	f7fd f9c8 	bl	8001610 <__aeabi_dmul>
 8004280:	0002      	movs	r2, r0
 8004282:	000b      	movs	r3, r1
 8004284:	0010      	movs	r0, r2
 8004286:	0019      	movs	r1, r3
 8004288:	4a96      	ldr	r2, [pc, #600]	@ (80044e4 <_etoa+0x3ac>)
 800428a:	4b97      	ldr	r3, [pc, #604]	@ (80044e8 <_etoa+0x3b0>)
 800428c:	f7fc fa18 	bl	80006c0 <__aeabi_dadd>
 8004290:	0002      	movs	r2, r0
 8004292:	000b      	movs	r3, r1
 8004294:	0014      	movs	r4, r2
 8004296:	001d      	movs	r5, r3
 8004298:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800429a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800429c:	2200      	movs	r2, #0
 800429e:	4b93      	ldr	r3, [pc, #588]	@ (80044ec <_etoa+0x3b4>)
 80042a0:	f7fd fc7e 	bl	8001ba0 <__aeabi_dsub>
 80042a4:	0002      	movs	r2, r0
 80042a6:	000b      	movs	r3, r1
 80042a8:	0010      	movs	r0, r2
 80042aa:	0019      	movs	r1, r3
 80042ac:	4a90      	ldr	r2, [pc, #576]	@ (80044f0 <_etoa+0x3b8>)
 80042ae:	4b91      	ldr	r3, [pc, #580]	@ (80044f4 <_etoa+0x3bc>)
 80042b0:	f7fd f9ae 	bl	8001610 <__aeabi_dmul>
 80042b4:	0002      	movs	r2, r0
 80042b6:	000b      	movs	r3, r1
 80042b8:	0020      	movs	r0, r4
 80042ba:	0029      	movs	r1, r5
 80042bc:	f7fc fa00 	bl	80006c0 <__aeabi_dadd>
 80042c0:	0002      	movs	r2, r0
 80042c2:	000b      	movs	r3, r1
 80042c4:	0010      	movs	r0, r2
 80042c6:	0019      	movs	r1, r3
 80042c8:	f7fe f806 	bl	80022d8 <__aeabi_d2iz>
 80042cc:	0003      	movs	r3, r0
 80042ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 80042d0:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80042d2:	f7fe f83d 	bl	8002350 <__aeabi_i2d>
 80042d6:	4a88      	ldr	r2, [pc, #544]	@ (80044f8 <_etoa+0x3c0>)
 80042d8:	4b88      	ldr	r3, [pc, #544]	@ (80044fc <_etoa+0x3c4>)
 80042da:	f7fd f999 	bl	8001610 <__aeabi_dmul>
 80042de:	0002      	movs	r2, r0
 80042e0:	000b      	movs	r3, r1
 80042e2:	0010      	movs	r0, r2
 80042e4:	0019      	movs	r1, r3
 80042e6:	2200      	movs	r2, #0
 80042e8:	4b85      	ldr	r3, [pc, #532]	@ (8004500 <_etoa+0x3c8>)
 80042ea:	f7fc f9e9 	bl	80006c0 <__aeabi_dadd>
 80042ee:	0002      	movs	r2, r0
 80042f0:	000b      	movs	r3, r1
 80042f2:	0010      	movs	r0, r2
 80042f4:	0019      	movs	r1, r3
 80042f6:	f7fd ffef 	bl	80022d8 <__aeabi_d2iz>
 80042fa:	0003      	movs	r3, r0
 80042fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 80042fe:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8004300:	f7fe f826 	bl	8002350 <__aeabi_i2d>
 8004304:	4a7f      	ldr	r2, [pc, #508]	@ (8004504 <_etoa+0x3cc>)
 8004306:	4b80      	ldr	r3, [pc, #512]	@ (8004508 <_etoa+0x3d0>)
 8004308:	f7fd f982 	bl	8001610 <__aeabi_dmul>
 800430c:	0002      	movs	r2, r0
 800430e:	000b      	movs	r3, r1
 8004310:	0014      	movs	r4, r2
 8004312:	001d      	movs	r5, r3
 8004314:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004316:	f7fe f81b 	bl	8002350 <__aeabi_i2d>
 800431a:	4a7c      	ldr	r2, [pc, #496]	@ (800450c <_etoa+0x3d4>)
 800431c:	4b7c      	ldr	r3, [pc, #496]	@ (8004510 <_etoa+0x3d8>)
 800431e:	f7fd f977 	bl	8001610 <__aeabi_dmul>
 8004322:	0002      	movs	r2, r0
 8004324:	000b      	movs	r3, r1
 8004326:	0020      	movs	r0, r4
 8004328:	0029      	movs	r1, r5
 800432a:	f7fd fc39 	bl	8001ba0 <__aeabi_dsub>
 800432e:	0002      	movs	r2, r0
 8004330:	000b      	movs	r3, r1
 8004332:	663a      	str	r2, [r7, #96]	@ 0x60
 8004334:	667b      	str	r3, [r7, #100]	@ 0x64
  const double z2 = z * z;
 8004336:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004338:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800433a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800433c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800433e:	f7fd f967 	bl	8001610 <__aeabi_dmul>
 8004342:	0002      	movs	r2, r0
 8004344:	000b      	movs	r3, r1
 8004346:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004348:	65fb      	str	r3, [r7, #92]	@ 0x5c
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800434a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800434c:	4a71      	ldr	r2, [pc, #452]	@ (8004514 <_etoa+0x3dc>)
 800434e:	4694      	mov	ip, r2
 8004350:	4463      	add	r3, ip
 8004352:	61bb      	str	r3, [r7, #24]
 8004354:	17db      	asrs	r3, r3, #31
 8004356:	61fb      	str	r3, [r7, #28]
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	051b      	lsls	r3, r3, #20
 800435c:	617b      	str	r3, [r7, #20]
 800435e:	2300      	movs	r3, #0
 8004360:	613b      	str	r3, [r7, #16]
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	697c      	ldr	r4, [r7, #20]
 8004366:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004368:	64fc      	str	r4, [r7, #76]	@ 0x4c
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800436a:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 800436c:	6cfd      	ldr	r5, [r7, #76]	@ 0x4c
 800436e:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8004370:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8004372:	0002      	movs	r2, r0
 8004374:	000b      	movs	r3, r1
 8004376:	f7fc f9a3 	bl	80006c0 <__aeabi_dadd>
 800437a:	0002      	movs	r2, r0
 800437c:	000b      	movs	r3, r1
 800437e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004380:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004382:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004384:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004386:	2000      	movs	r0, #0
 8004388:	2180      	movs	r1, #128	@ 0x80
 800438a:	05c9      	lsls	r1, r1, #23
 800438c:	f7fd fc08 	bl	8001ba0 <__aeabi_dsub>
 8004390:	0002      	movs	r2, r0
 8004392:	000b      	movs	r3, r1
 8004394:	623a      	str	r2, [r7, #32]
 8004396:	627b      	str	r3, [r7, #36]	@ 0x24
 8004398:	2200      	movs	r2, #0
 800439a:	4b5f      	ldr	r3, [pc, #380]	@ (8004518 <_etoa+0x3e0>)
 800439c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800439e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80043a0:	f7fc fcf2 	bl	8000d88 <__aeabi_ddiv>
 80043a4:	0002      	movs	r2, r0
 80043a6:	000b      	movs	r3, r1
 80043a8:	0010      	movs	r0, r2
 80043aa:	0019      	movs	r1, r3
 80043ac:	2200      	movs	r2, #0
 80043ae:	4b5b      	ldr	r3, [pc, #364]	@ (800451c <_etoa+0x3e4>)
 80043b0:	f7fc f986 	bl	80006c0 <__aeabi_dadd>
 80043b4:	0002      	movs	r2, r0
 80043b6:	000b      	movs	r3, r1
 80043b8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80043ba:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80043bc:	f7fc fce4 	bl	8000d88 <__aeabi_ddiv>
 80043c0:	0002      	movs	r2, r0
 80043c2:	000b      	movs	r3, r1
 80043c4:	0010      	movs	r0, r2
 80043c6:	0019      	movs	r1, r3
 80043c8:	2200      	movs	r2, #0
 80043ca:	4b55      	ldr	r3, [pc, #340]	@ (8004520 <_etoa+0x3e8>)
 80043cc:	f7fc f978 	bl	80006c0 <__aeabi_dadd>
 80043d0:	0002      	movs	r2, r0
 80043d2:	000b      	movs	r3, r1
 80043d4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80043d6:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80043d8:	f7fc fcd6 	bl	8000d88 <__aeabi_ddiv>
 80043dc:	0002      	movs	r2, r0
 80043de:	000b      	movs	r3, r1
 80043e0:	6a38      	ldr	r0, [r7, #32]
 80043e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80043e4:	f7fc f96c 	bl	80006c0 <__aeabi_dadd>
 80043e8:	0002      	movs	r2, r0
 80043ea:	000b      	movs	r3, r1
 80043ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043f0:	f7fc fcca 	bl	8000d88 <__aeabi_ddiv>
 80043f4:	0002      	movs	r2, r0
 80043f6:	000b      	movs	r3, r1
 80043f8:	0010      	movs	r0, r2
 80043fa:	0019      	movs	r1, r3
 80043fc:	2200      	movs	r2, #0
 80043fe:	4b36      	ldr	r3, [pc, #216]	@ (80044d8 <_etoa+0x3a0>)
 8004400:	f7fc f95e 	bl	80006c0 <__aeabi_dadd>
 8004404:	0002      	movs	r2, r0
 8004406:	000b      	movs	r3, r1
 8004408:	0020      	movs	r0, r4
 800440a:	0029      	movs	r1, r5
 800440c:	f7fd f900 	bl	8001610 <__aeabi_dmul>
 8004410:	0002      	movs	r2, r0
 8004412:	000b      	movs	r3, r1
 8004414:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004416:	64fb      	str	r3, [r7, #76]	@ 0x4c
  // correct for rounding errors
  if (value < conv.F) {
 8004418:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800441a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800441c:	19b9      	adds	r1, r7, r6
 800441e:	6808      	ldr	r0, [r1, #0]
 8004420:	6849      	ldr	r1, [r1, #4]
 8004422:	f7fb fffd 	bl	8000420 <__aeabi_dcmplt>
 8004426:	1e03      	subs	r3, r0, #0
 8004428:	d00c      	beq.n	8004444 <_etoa+0x30c>
    expval--;
 800442a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800442c:	3b01      	subs	r3, #1
 800442e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    conv.F /= 10;
 8004430:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8004432:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004434:	2200      	movs	r2, #0
 8004436:	4b39      	ldr	r3, [pc, #228]	@ (800451c <_etoa+0x3e4>)
 8004438:	f7fc fca6 	bl	8000d88 <__aeabi_ddiv>
 800443c:	0002      	movs	r2, r0
 800443e:	000b      	movs	r3, r1
 8004440:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004442:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8004444:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004446:	2b63      	cmp	r3, #99	@ 0x63
 8004448:	dc04      	bgt.n	8004454 <_etoa+0x31c>
 800444a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800444c:	3363      	adds	r3, #99	@ 0x63
 800444e:	db01      	blt.n	8004454 <_etoa+0x31c>
 8004450:	2304      	movs	r3, #4
 8004452:	e000      	b.n	8004456 <_etoa+0x31e>
 8004454:	2305      	movs	r3, #5
 8004456:	67bb      	str	r3, [r7, #120]	@ 0x78

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8004458:	23a8      	movs	r3, #168	@ 0xa8
 800445a:	18fb      	adds	r3, r7, r3
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	2380      	movs	r3, #128	@ 0x80
 8004460:	011b      	lsls	r3, r3, #4
 8004462:	4013      	ands	r3, r2
 8004464:	d100      	bne.n	8004468 <_etoa+0x330>
 8004466:	e074      	b.n	8004552 <_etoa+0x41a>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8004468:	4a2e      	ldr	r2, [pc, #184]	@ (8004524 <_etoa+0x3ec>)
 800446a:	4b2f      	ldr	r3, [pc, #188]	@ (8004528 <_etoa+0x3f0>)
 800446c:	2498      	movs	r4, #152	@ 0x98
 800446e:	1939      	adds	r1, r7, r4
 8004470:	6808      	ldr	r0, [r1, #0]
 8004472:	6849      	ldr	r1, [r1, #4]
 8004474:	f7fb fff2 	bl	800045c <__aeabi_dcmpge>
 8004478:	1e03      	subs	r3, r0, #0
 800447a:	d059      	beq.n	8004530 <_etoa+0x3f8>
 800447c:	2200      	movs	r2, #0
 800447e:	4b2b      	ldr	r3, [pc, #172]	@ (800452c <_etoa+0x3f4>)
 8004480:	1939      	adds	r1, r7, r4
 8004482:	6808      	ldr	r0, [r1, #0]
 8004484:	6849      	ldr	r1, [r1, #4]
 8004486:	f7fb ffcb 	bl	8000420 <__aeabi_dcmplt>
 800448a:	1e03      	subs	r3, r0, #0
 800448c:	d050      	beq.n	8004530 <_etoa+0x3f8>
      if ((int)prec > expval) {
 800448e:	21a0      	movs	r1, #160	@ 0xa0
 8004490:	187b      	adds	r3, r7, r1
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004496:	429a      	cmp	r2, r3
 8004498:	da07      	bge.n	80044aa <_etoa+0x372>
        prec = (unsigned)((int)prec - expval - 1);
 800449a:	187b      	adds	r3, r7, r1
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	3b01      	subs	r3, #1
 80044a4:	187a      	adds	r2, r7, r1
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	e003      	b.n	80044b2 <_etoa+0x37a>
      }
      else {
        prec = 0;
 80044aa:	2300      	movs	r3, #0
 80044ac:	22a0      	movs	r2, #160	@ 0xa0
 80044ae:	18ba      	adds	r2, r7, r2
 80044b0:	6013      	str	r3, [r2, #0]
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 80044b2:	21a8      	movs	r1, #168	@ 0xa8
 80044b4:	187b      	adds	r3, r7, r1
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2280      	movs	r2, #128	@ 0x80
 80044ba:	00d2      	lsls	r2, r2, #3
 80044bc:	4313      	orrs	r3, r2
 80044be:	187a      	adds	r2, r7, r1
 80044c0:	6013      	str	r3, [r2, #0]
      // no characters in exponent
      minwidth = 0U;
 80044c2:	2300      	movs	r3, #0
 80044c4:	67bb      	str	r3, [r7, #120]	@ 0x78
      expval   = 0;
 80044c6:	2300      	movs	r3, #0
 80044c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80044ca:	e042      	b.n	8004552 <_etoa+0x41a>
 80044cc:	7fefffff 	.word	0x7fefffff
 80044d0:	ffefffff 	.word	0xffefffff
 80044d4:	fffffc01 	.word	0xfffffc01
 80044d8:	3ff00000 	.word	0x3ff00000
 80044dc:	509f79fb 	.word	0x509f79fb
 80044e0:	3fd34413 	.word	0x3fd34413
 80044e4:	8b60c8b3 	.word	0x8b60c8b3
 80044e8:	3fc68a28 	.word	0x3fc68a28
 80044ec:	3ff80000 	.word	0x3ff80000
 80044f0:	636f4361 	.word	0x636f4361
 80044f4:	3fd287a7 	.word	0x3fd287a7
 80044f8:	0979a371 	.word	0x0979a371
 80044fc:	400a934f 	.word	0x400a934f
 8004500:	3fe00000 	.word	0x3fe00000
 8004504:	bbb55516 	.word	0xbbb55516
 8004508:	40026bb1 	.word	0x40026bb1
 800450c:	fefa39ef 	.word	0xfefa39ef
 8004510:	3fe62e42 	.word	0x3fe62e42
 8004514:	000003ff 	.word	0x000003ff
 8004518:	402c0000 	.word	0x402c0000
 800451c:	40240000 	.word	0x40240000
 8004520:	40180000 	.word	0x40180000
 8004524:	eb1c432d 	.word	0xeb1c432d
 8004528:	3f1a36e2 	.word	0x3f1a36e2
 800452c:	412e8480 	.word	0x412e8480
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8004530:	21a0      	movs	r1, #160	@ 0xa0
 8004532:	187b      	adds	r3, r7, r1
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00b      	beq.n	8004552 <_etoa+0x41a>
 800453a:	23a8      	movs	r3, #168	@ 0xa8
 800453c:	18fb      	adds	r3, r7, r3
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	2380      	movs	r3, #128	@ 0x80
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	4013      	ands	r3, r2
 8004546:	d004      	beq.n	8004552 <_etoa+0x41a>
        --prec;
 8004548:	187b      	adds	r3, r7, r1
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3b01      	subs	r3, #1
 800454e:	187a      	adds	r2, r7, r1
 8004550:	6013      	str	r3, [r2, #0]
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8004552:	22a4      	movs	r2, #164	@ 0xa4
 8004554:	18bb      	adds	r3, r7, r2
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	677b      	str	r3, [r7, #116]	@ 0x74
  if (width > minwidth) {
 800455a:	18bb      	adds	r3, r7, r2
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004560:	429a      	cmp	r2, r3
 8004562:	d904      	bls.n	800456e <_etoa+0x436>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8004564:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004566:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	677b      	str	r3, [r7, #116]	@ 0x74
 800456c:	e001      	b.n	8004572 <_etoa+0x43a>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	677b      	str	r3, [r7, #116]	@ 0x74
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8004572:	23a8      	movs	r3, #168	@ 0xa8
 8004574:	18fb      	adds	r3, r7, r3
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2202      	movs	r2, #2
 800457a:	4013      	ands	r3, r2
 800457c:	d004      	beq.n	8004588 <_etoa+0x450>
 800457e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <_etoa+0x450>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8004584:	2300      	movs	r3, #0
 8004586:	677b      	str	r3, [r7, #116]	@ 0x74
  }

  // rescale the float value
  if (expval) {
 8004588:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00c      	beq.n	80045a8 <_etoa+0x470>
    value /= conv.F;
 800458e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004590:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004592:	2498      	movs	r4, #152	@ 0x98
 8004594:	1939      	adds	r1, r7, r4
 8004596:	6808      	ldr	r0, [r1, #0]
 8004598:	6849      	ldr	r1, [r1, #4]
 800459a:	f7fc fbf5 	bl	8000d88 <__aeabi_ddiv>
 800459e:	0002      	movs	r2, r0
 80045a0:	000b      	movs	r3, r1
 80045a2:	1939      	adds	r1, r7, r4
 80045a4:	600a      	str	r2, [r1, #0]
 80045a6:	604b      	str	r3, [r1, #4]
  }

  // output the floating part
  const size_t start_idx = idx;
 80045a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045aa:	657b      	str	r3, [r7, #84]	@ 0x54
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 80045ac:	233b      	movs	r3, #59	@ 0x3b
 80045ae:	2238      	movs	r2, #56	@ 0x38
 80045b0:	189b      	adds	r3, r3, r2
 80045b2:	19db      	adds	r3, r3, r7
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00b      	beq.n	80045d2 <_etoa+0x49a>
 80045ba:	2398      	movs	r3, #152	@ 0x98
 80045bc:	18fb      	adds	r3, r7, r3
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80045c2:	239c      	movs	r3, #156	@ 0x9c
 80045c4:	18fb      	adds	r3, r7, r3
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2280      	movs	r2, #128	@ 0x80
 80045ca:	0612      	lsls	r2, r2, #24
 80045cc:	405a      	eors	r2, r3
 80045ce:	637a      	str	r2, [r7, #52]	@ 0x34
 80045d0:	e005      	b.n	80045de <_etoa+0x4a6>
 80045d2:	2398      	movs	r3, #152	@ 0x98
 80045d4:	18fb      	adds	r3, r7, r3
 80045d6:	685c      	ldr	r4, [r3, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	633b      	str	r3, [r7, #48]	@ 0x30
 80045dc:	637c      	str	r4, [r7, #52]	@ 0x34
 80045de:	23a8      	movs	r3, #168	@ 0xa8
 80045e0:	18fa      	adds	r2, r7, r3
 80045e2:	6813      	ldr	r3, [r2, #0]
 80045e4:	4a31      	ldr	r2, [pc, #196]	@ (80046ac <_etoa+0x574>)
 80045e6:	4013      	ands	r3, r2
 80045e8:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 80045ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80045ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045ee:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80045f0:	9304      	str	r3, [sp, #16]
 80045f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045f4:	9303      	str	r3, [sp, #12]
 80045f6:	25a0      	movs	r5, #160	@ 0xa0
 80045f8:	197d      	adds	r5, r7, r5
 80045fa:	682b      	ldr	r3, [r5, #0]
 80045fc:	9302      	str	r3, [sp, #8]
 80045fe:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
 8004600:	6b7e      	ldr	r6, [r7, #52]	@ 0x34
 8004602:	9500      	str	r5, [sp, #0]
 8004604:	9601      	str	r6, [sp, #4]
 8004606:	0023      	movs	r3, r4
 8004608:	f7ff fb58 	bl	8003cbc <_ftoa>
 800460c:	0003      	movs	r3, r0
 800460e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // output the exponent part
  if (minwidth) {
 8004610:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004612:	2b00      	cmp	r3, #0
 8004614:	d044      	beq.n	80046a0 <_etoa+0x568>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8004616:	23a8      	movs	r3, #168	@ 0xa8
 8004618:	18fb      	adds	r3, r7, r3
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2220      	movs	r2, #32
 800461e:	4013      	ands	r3, r2
 8004620:	d001      	beq.n	8004626 <_etoa+0x4ee>
 8004622:	2045      	movs	r0, #69	@ 0x45
 8004624:	e000      	b.n	8004628 <_etoa+0x4f0>
 8004626:	2065      	movs	r0, #101	@ 0x65
 8004628:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800462a:	1c53      	adds	r3, r2, #1
 800462c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800462e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004630:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004632:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8004634:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8004636:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004638:	17da      	asrs	r2, r3, #31
 800463a:	189b      	adds	r3, r3, r2
 800463c:	4053      	eors	r3, r2
 800463e:	469c      	mov	ip, r3
 8004640:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004642:	0fdb      	lsrs	r3, r3, #31
 8004644:	b2db      	uxtb	r3, r3
 8004646:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004648:	3a01      	subs	r2, #1
 800464a:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 800464c:	6bfc      	ldr	r4, [r7, #60]	@ 0x3c
 800464e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004650:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8004652:	2605      	movs	r6, #5
 8004654:	9605      	str	r6, [sp, #20]
 8004656:	9204      	str	r2, [sp, #16]
 8004658:	2200      	movs	r2, #0
 800465a:	9203      	str	r2, [sp, #12]
 800465c:	220a      	movs	r2, #10
 800465e:	9202      	str	r2, [sp, #8]
 8004660:	9301      	str	r3, [sp, #4]
 8004662:	4663      	mov	r3, ip
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	002b      	movs	r3, r5
 8004668:	0022      	movs	r2, r4
 800466a:	f7ff fa4a 	bl	8003b02 <_ntoa_long>
 800466e:	0003      	movs	r3, r0
 8004670:	63fb      	str	r3, [r7, #60]	@ 0x3c
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8004672:	23a8      	movs	r3, #168	@ 0xa8
 8004674:	18fb      	adds	r3, r7, r3
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2202      	movs	r2, #2
 800467a:	4013      	ands	r3, r2
 800467c:	d010      	beq.n	80046a0 <_etoa+0x568>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800467e:	e007      	b.n	8004690 <_etoa+0x558>
 8004680:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004682:	1c53      	adds	r3, r2, #1
 8004684:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004688:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800468a:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800468c:	2020      	movs	r0, #32
 800468e:	47a0      	blx	r4
 8004690:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004692:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	22a4      	movs	r2, #164	@ 0xa4
 8004698:	18ba      	adds	r2, r7, r2
 800469a:	6812      	ldr	r2, [r2, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d8ef      	bhi.n	8004680 <_etoa+0x548>
    }
  }
  return idx;
 80046a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80046a2:	0018      	movs	r0, r3
 80046a4:	46bd      	mov	sp, r7
 80046a6:	b021      	add	sp, #132	@ 0x84
 80046a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046aa:	46c0      	nop			@ (mov r8, r8)
 80046ac:	fffff7ff 	.word	0xfffff7ff

080046b0 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 80046b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046b2:	46c6      	mov	lr, r8
 80046b4:	b500      	push	{lr}
 80046b6:	b0a6      	sub	sp, #152	@ 0x98
 80046b8:	af0a      	add	r7, sp, #40	@ 0x28
 80046ba:	6278      	str	r0, [r7, #36]	@ 0x24
 80046bc:	6239      	str	r1, [r7, #32]
 80046be:	61fa      	str	r2, [r7, #28]
 80046c0:	61bb      	str	r3, [r7, #24]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 80046c2:	2300      	movs	r3, #0
 80046c4:	65fb      	str	r3, [r7, #92]	@ 0x5c

  if (!buffer) {
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <_vsnprintf+0x20>
 80046cc:	f000 fc51 	bl	8004f72 <_vsnprintf+0x8c2>
    // use null output function
    out = _out_null;
 80046d0:	4bad      	ldr	r3, [pc, #692]	@ (8004988 <_vsnprintf+0x2d8>)
 80046d2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  while (*format)
 80046d4:	f000 fc4d 	bl	8004f72 <_vsnprintf+0x8c2>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	2b25      	cmp	r3, #37	@ 0x25
 80046de:	d00d      	beq.n	80046fc <_vsnprintf+0x4c>
      // no
      out(*format, buffer, idx++, maxlen);
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	7818      	ldrb	r0, [r3, #0]
 80046e4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80046e6:	1c53      	adds	r3, r2, #1
 80046e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	6a39      	ldr	r1, [r7, #32]
 80046ee:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80046f0:	47a0      	blx	r4
      format++;
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	3301      	adds	r3, #1
 80046f6:	61bb      	str	r3, [r7, #24]
      continue;
 80046f8:	f000 fc3b 	bl	8004f72 <_vsnprintf+0x8c2>
    }
    else {
      // yes, evaluate it
      format++;
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	3301      	adds	r3, #1
 8004700:	61bb      	str	r3, [r7, #24]
    }

    // evaluate flags
    flags = 0U;
 8004702:	2300      	movs	r3, #0
 8004704:	66fb      	str	r3, [r7, #108]	@ 0x6c
    do {
      switch (*format) {
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	3b20      	subs	r3, #32
 800470c:	2b10      	cmp	r3, #16
 800470e:	d836      	bhi.n	800477e <_vsnprintf+0xce>
 8004710:	009a      	lsls	r2, r3, #2
 8004712:	4b9e      	ldr	r3, [pc, #632]	@ (800498c <_vsnprintf+0x2dc>)
 8004714:	18d3      	adds	r3, r2, r3
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	469f      	mov	pc, r3
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800471a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800471c:	2201      	movs	r2, #1
 800471e:	4313      	orrs	r3, r2
 8004720:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	3301      	adds	r3, #1
 8004726:	61bb      	str	r3, [r7, #24]
 8004728:	2301      	movs	r3, #1
 800472a:	663b      	str	r3, [r7, #96]	@ 0x60
 800472c:	e02a      	b.n	8004784 <_vsnprintf+0xd4>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800472e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004730:	2202      	movs	r2, #2
 8004732:	4313      	orrs	r3, r2
 8004734:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	3301      	adds	r3, #1
 800473a:	61bb      	str	r3, [r7, #24]
 800473c:	2301      	movs	r3, #1
 800473e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004740:	e020      	b.n	8004784 <_vsnprintf+0xd4>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8004742:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004744:	2204      	movs	r2, #4
 8004746:	4313      	orrs	r3, r2
 8004748:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	3301      	adds	r3, #1
 800474e:	61bb      	str	r3, [r7, #24]
 8004750:	2301      	movs	r3, #1
 8004752:	663b      	str	r3, [r7, #96]	@ 0x60
 8004754:	e016      	b.n	8004784 <_vsnprintf+0xd4>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8004756:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004758:	2208      	movs	r2, #8
 800475a:	4313      	orrs	r3, r2
 800475c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	3301      	adds	r3, #1
 8004762:	61bb      	str	r3, [r7, #24]
 8004764:	2301      	movs	r3, #1
 8004766:	663b      	str	r3, [r7, #96]	@ 0x60
 8004768:	e00c      	b.n	8004784 <_vsnprintf+0xd4>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800476a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800476c:	2210      	movs	r2, #16
 800476e:	4313      	orrs	r3, r2
 8004770:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	3301      	adds	r3, #1
 8004776:	61bb      	str	r3, [r7, #24]
 8004778:	2301      	movs	r3, #1
 800477a:	663b      	str	r3, [r7, #96]	@ 0x60
 800477c:	e002      	b.n	8004784 <_vsnprintf+0xd4>
        default :                                   n = 0U; break;
 800477e:	2300      	movs	r3, #0
 8004780:	663b      	str	r3, [r7, #96]	@ 0x60
 8004782:	46c0      	nop			@ (mov r8, r8)
      }
    } while (n);
 8004784:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1bd      	bne.n	8004706 <_vsnprintf+0x56>

    // evaluate width field
    width = 0U;
 800478a:	2300      	movs	r3, #0
 800478c:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (_is_digit(*format)) {
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	0018      	movs	r0, r3
 8004794:	f7ff f856 	bl	8003844 <_is_digit>
 8004798:	1e03      	subs	r3, r0, #0
 800479a:	d007      	beq.n	80047ac <_vsnprintf+0xfc>
      width = _atoi(&format);
 800479c:	2318      	movs	r3, #24
 800479e:	18fb      	adds	r3, r7, r3
 80047a0:	0018      	movs	r0, r3
 80047a2:	f7ff f868 	bl	8003876 <_atoi>
 80047a6:	0003      	movs	r3, r0
 80047a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047aa:	e01c      	b.n	80047e6 <_vsnprintf+0x136>
    }
    else if (*format == '*') {
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80047b2:	d118      	bne.n	80047e6 <_vsnprintf+0x136>
      const int w = va_arg(va, int);
 80047b4:	2388      	movs	r3, #136	@ 0x88
 80047b6:	18fb      	adds	r3, r7, r3
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	1d1a      	adds	r2, r3, #4
 80047bc:	2188      	movs	r1, #136	@ 0x88
 80047be:	1879      	adds	r1, r7, r1
 80047c0:	600a      	str	r2, [r1, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      if (w < 0) {
 80047c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	da07      	bge.n	80047dc <_vsnprintf+0x12c>
        flags |= FLAGS_LEFT;    // reverse padding
 80047cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047ce:	2202      	movs	r2, #2
 80047d0:	4313      	orrs	r3, r2
 80047d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
        width = (unsigned int)-w;
 80047d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047d6:	425b      	negs	r3, r3
 80047d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047da:	e001      	b.n	80047e0 <_vsnprintf+0x130>
      }
      else {
        width = (unsigned int)w;
 80047dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047de:	66bb      	str	r3, [r7, #104]	@ 0x68
      }
      format++;
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	3301      	adds	r3, #1
 80047e4:	61bb      	str	r3, [r7, #24]
    }

    // evaluate precision field
    precision = 0U;
 80047e6:	2300      	movs	r3, #0
 80047e8:	667b      	str	r3, [r7, #100]	@ 0x64
    if (*format == '.') {
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80047f0:	d12b      	bne.n	800484a <_vsnprintf+0x19a>
      flags |= FLAGS_PRECISION;
 80047f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047f4:	2280      	movs	r2, #128	@ 0x80
 80047f6:	00d2      	lsls	r2, r2, #3
 80047f8:	4313      	orrs	r3, r2
 80047fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
      format++;
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	3301      	adds	r3, #1
 8004800:	61bb      	str	r3, [r7, #24]
      if (_is_digit(*format)) {
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	0018      	movs	r0, r3
 8004808:	f7ff f81c 	bl	8003844 <_is_digit>
 800480c:	1e03      	subs	r3, r0, #0
 800480e:	d007      	beq.n	8004820 <_vsnprintf+0x170>
        precision = _atoi(&format);
 8004810:	2318      	movs	r3, #24
 8004812:	18fb      	adds	r3, r7, r3
 8004814:	0018      	movs	r0, r3
 8004816:	f7ff f82e 	bl	8003876 <_atoi>
 800481a:	0003      	movs	r3, r0
 800481c:	667b      	str	r3, [r7, #100]	@ 0x64
 800481e:	e014      	b.n	800484a <_vsnprintf+0x19a>
      }
      else if (*format == '*') {
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	2b2a      	cmp	r3, #42	@ 0x2a
 8004826:	d110      	bne.n	800484a <_vsnprintf+0x19a>
        const int prec = (int)va_arg(va, int);
 8004828:	2388      	movs	r3, #136	@ 0x88
 800482a:	18fb      	adds	r3, r7, r3
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	1d1a      	adds	r2, r3, #4
 8004830:	2188      	movs	r1, #136	@ 0x88
 8004832:	1879      	adds	r1, r7, r1
 8004834:	600a      	str	r2, [r1, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	647b      	str	r3, [r7, #68]	@ 0x44
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800483a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800483c:	2b00      	cmp	r3, #0
 800483e:	da00      	bge.n	8004842 <_vsnprintf+0x192>
 8004840:	2300      	movs	r3, #0
 8004842:	667b      	str	r3, [r7, #100]	@ 0x64
        format++;
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	3301      	adds	r3, #1
 8004848:	61bb      	str	r3, [r7, #24]
      }
    }

    // evaluate length field
    switch (*format) {
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	3b68      	subs	r3, #104	@ 0x68
 8004850:	2b12      	cmp	r3, #18
 8004852:	d847      	bhi.n	80048e4 <_vsnprintf+0x234>
 8004854:	009a      	lsls	r2, r3, #2
 8004856:	4b4e      	ldr	r3, [pc, #312]	@ (8004990 <_vsnprintf+0x2e0>)
 8004858:	18d3      	adds	r3, r2, r3
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	469f      	mov	pc, r3
      case 'l' :
        flags |= FLAGS_LONG;
 800485e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004860:	2280      	movs	r2, #128	@ 0x80
 8004862:	0052      	lsls	r2, r2, #1
 8004864:	4313      	orrs	r3, r2
 8004866:	66fb      	str	r3, [r7, #108]	@ 0x6c
        format++;
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	3301      	adds	r3, #1
 800486c:	61bb      	str	r3, [r7, #24]
        if (*format == 'l') {
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	2b6c      	cmp	r3, #108	@ 0x6c
 8004874:	d138      	bne.n	80048e8 <_vsnprintf+0x238>
          flags |= FLAGS_LONG_LONG;
 8004876:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004878:	2280      	movs	r2, #128	@ 0x80
 800487a:	0092      	lsls	r2, r2, #2
 800487c:	4313      	orrs	r3, r2
 800487e:	66fb      	str	r3, [r7, #108]	@ 0x6c
          format++;
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	3301      	adds	r3, #1
 8004884:	61bb      	str	r3, [r7, #24]
        }
        break;
 8004886:	e02f      	b.n	80048e8 <_vsnprintf+0x238>
      case 'h' :
        flags |= FLAGS_SHORT;
 8004888:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800488a:	2280      	movs	r2, #128	@ 0x80
 800488c:	4313      	orrs	r3, r2
 800488e:	66fb      	str	r3, [r7, #108]	@ 0x6c
        format++;
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	3301      	adds	r3, #1
 8004894:	61bb      	str	r3, [r7, #24]
        if (*format == 'h') {
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	2b68      	cmp	r3, #104	@ 0x68
 800489c:	d126      	bne.n	80048ec <_vsnprintf+0x23c>
          flags |= FLAGS_CHAR;
 800489e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048a0:	2240      	movs	r2, #64	@ 0x40
 80048a2:	4313      	orrs	r3, r2
 80048a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
          format++;
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	3301      	adds	r3, #1
 80048aa:	61bb      	str	r3, [r7, #24]
        }
        break;
 80048ac:	e01e      	b.n	80048ec <_vsnprintf+0x23c>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80048ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048b0:	2280      	movs	r2, #128	@ 0x80
 80048b2:	0052      	lsls	r2, r2, #1
 80048b4:	4313      	orrs	r3, r2
 80048b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
        format++;
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	3301      	adds	r3, #1
 80048bc:	61bb      	str	r3, [r7, #24]
        break;
 80048be:	e016      	b.n	80048ee <_vsnprintf+0x23e>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80048c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048c2:	2280      	movs	r2, #128	@ 0x80
 80048c4:	0092      	lsls	r2, r2, #2
 80048c6:	4313      	orrs	r3, r2
 80048c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
        format++;
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	3301      	adds	r3, #1
 80048ce:	61bb      	str	r3, [r7, #24]
        break;
 80048d0:	e00d      	b.n	80048ee <_vsnprintf+0x23e>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80048d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048d4:	2280      	movs	r2, #128	@ 0x80
 80048d6:	0052      	lsls	r2, r2, #1
 80048d8:	4313      	orrs	r3, r2
 80048da:	66fb      	str	r3, [r7, #108]	@ 0x6c
        format++;
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	3301      	adds	r3, #1
 80048e0:	61bb      	str	r3, [r7, #24]
        break;
 80048e2:	e004      	b.n	80048ee <_vsnprintf+0x23e>
      default :
        break;
 80048e4:	46c0      	nop			@ (mov r8, r8)
 80048e6:	e002      	b.n	80048ee <_vsnprintf+0x23e>
        break;
 80048e8:	46c0      	nop			@ (mov r8, r8)
 80048ea:	e000      	b.n	80048ee <_vsnprintf+0x23e>
        break;
 80048ec:	46c0      	nop			@ (mov r8, r8)
    }

    // evaluate specifier
    switch (*format) {
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	2b67      	cmp	r3, #103	@ 0x67
 80048f4:	dc28      	bgt.n	8004948 <_vsnprintf+0x298>
 80048f6:	2b25      	cmp	r3, #37	@ 0x25
 80048f8:	da1d      	bge.n	8004936 <_vsnprintf+0x286>
 80048fa:	e32d      	b.n	8004f58 <_vsnprintf+0x8a8>
 80048fc:	3b69      	subs	r3, #105	@ 0x69
 80048fe:	2201      	movs	r2, #1
 8004900:	409a      	lsls	r2, r3
 8004902:	0013      	movs	r3, r2
 8004904:	4a23      	ldr	r2, [pc, #140]	@ (8004994 <_vsnprintf+0x2e4>)
 8004906:	401a      	ands	r2, r3
 8004908:	1e51      	subs	r1, r2, #1
 800490a:	418a      	sbcs	r2, r1
 800490c:	b2d2      	uxtb	r2, r2
 800490e:	2a00      	cmp	r2, #0
 8004910:	d120      	bne.n	8004954 <_vsnprintf+0x2a4>
 8004912:	2280      	movs	r2, #128	@ 0x80
 8004914:	401a      	ands	r2, r3
 8004916:	1e51      	subs	r1, r2, #1
 8004918:	418a      	sbcs	r2, r1
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	2a00      	cmp	r2, #0
 800491e:	d000      	beq.n	8004922 <_vsnprintf+0x272>
 8004920:	e2b5      	b.n	8004e8e <_vsnprintf+0x7de>
 8004922:	2280      	movs	r2, #128	@ 0x80
 8004924:	00d2      	lsls	r2, r2, #3
 8004926:	4013      	ands	r3, r2
 8004928:	1e5a      	subs	r2, r3, #1
 800492a:	4193      	sbcs	r3, r2
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d000      	beq.n	8004934 <_vsnprintf+0x284>
 8004932:	e246      	b.n	8004dc2 <_vsnprintf+0x712>
 8004934:	e310      	b.n	8004f58 <_vsnprintf+0x8a8>
 8004936:	3b25      	subs	r3, #37	@ 0x25
 8004938:	2b42      	cmp	r3, #66	@ 0x42
 800493a:	d900      	bls.n	800493e <_vsnprintf+0x28e>
 800493c:	e30c      	b.n	8004f58 <_vsnprintf+0x8a8>
 800493e:	009a      	lsls	r2, r3, #2
 8004940:	4b15      	ldr	r3, [pc, #84]	@ (8004998 <_vsnprintf+0x2e8>)
 8004942:	18d3      	adds	r3, r2, r3
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	469f      	mov	pc, r3
 8004948:	2b78      	cmp	r3, #120	@ 0x78
 800494a:	dd00      	ble.n	800494e <_vsnprintf+0x29e>
 800494c:	e304      	b.n	8004f58 <_vsnprintf+0x8a8>
 800494e:	2b69      	cmp	r3, #105	@ 0x69
 8004950:	dad4      	bge.n	80048fc <_vsnprintf+0x24c>
 8004952:	e301      	b.n	8004f58 <_vsnprintf+0x8a8>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	2b78      	cmp	r3, #120	@ 0x78
 800495a:	d003      	beq.n	8004964 <_vsnprintf+0x2b4>
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	2b58      	cmp	r3, #88	@ 0x58
 8004962:	d102      	bne.n	800496a <_vsnprintf+0x2ba>
          base = 16U;
 8004964:	2310      	movs	r3, #16
 8004966:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004968:	e01e      	b.n	80049a8 <_vsnprintf+0x2f8>
        }
        else if (*format == 'o') {
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	2b6f      	cmp	r3, #111	@ 0x6f
 8004970:	d102      	bne.n	8004978 <_vsnprintf+0x2c8>
          base =  8U;
 8004972:	2308      	movs	r3, #8
 8004974:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004976:	e017      	b.n	80049a8 <_vsnprintf+0x2f8>
        }
        else if (*format == 'b') {
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	2b62      	cmp	r3, #98	@ 0x62
 800497e:	d10d      	bne.n	800499c <_vsnprintf+0x2ec>
          base =  2U;
 8004980:	2302      	movs	r3, #2
 8004982:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004984:	e010      	b.n	80049a8 <_vsnprintf+0x2f8>
 8004986:	46c0      	nop			@ (mov r8, r8)
 8004988:	080037c3 	.word	0x080037c3
 800498c:	08009588 	.word	0x08009588
 8004990:	080095cc 	.word	0x080095cc
 8004994:	00009041 	.word	0x00009041
 8004998:	08009618 	.word	0x08009618
        }
        else {
          base = 10U;
 800499c:	230a      	movs	r3, #10
 800499e:	65bb      	str	r3, [r7, #88]	@ 0x58
          flags &= ~FLAGS_HASH;   // no hash for dec format
 80049a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049a2:	2210      	movs	r2, #16
 80049a4:	4393      	bics	r3, r2
 80049a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
        }
        // uppercase
        if (*format == 'X') {
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	2b58      	cmp	r3, #88	@ 0x58
 80049ae:	d103      	bne.n	80049b8 <_vsnprintf+0x308>
          flags |= FLAGS_UPPERCASE;
 80049b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049b2:	2220      	movs	r2, #32
 80049b4:	4313      	orrs	r3, r2
 80049b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	2b69      	cmp	r3, #105	@ 0x69
 80049be:	d007      	beq.n	80049d0 <_vsnprintf+0x320>
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	2b64      	cmp	r3, #100	@ 0x64
 80049c6:	d003      	beq.n	80049d0 <_vsnprintf+0x320>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80049c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049ca:	220c      	movs	r2, #12
 80049cc:	4393      	bics	r3, r2
 80049ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 80049d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80049d2:	2380      	movs	r3, #128	@ 0x80
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	4013      	ands	r3, r2
 80049d8:	d003      	beq.n	80049e2 <_vsnprintf+0x332>
          flags &= ~FLAGS_ZEROPAD;
 80049da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049dc:	2201      	movs	r2, #1
 80049de:	4393      	bics	r3, r2
 80049e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	2b69      	cmp	r3, #105	@ 0x69
 80049e8:	d004      	beq.n	80049f4 <_vsnprintf+0x344>
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	2b64      	cmp	r3, #100	@ 0x64
 80049f0:	d000      	beq.n	80049f4 <_vsnprintf+0x344>
 80049f2:	e0af      	b.n	8004b54 <_vsnprintf+0x4a4>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 80049f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80049f6:	2380      	movs	r3, #128	@ 0x80
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4013      	ands	r3, r2
 80049fc:	d03d      	beq.n	8004a7a <_vsnprintf+0x3ca>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 80049fe:	2388      	movs	r3, #136	@ 0x88
 8004a00:	18fb      	adds	r3, r7, r3
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	3307      	adds	r3, #7
 8004a06:	2207      	movs	r2, #7
 8004a08:	4393      	bics	r3, r2
 8004a0a:	001a      	movs	r2, r3
 8004a0c:	3208      	adds	r2, #8
 8004a0e:	2188      	movs	r1, #136	@ 0x88
 8004a10:	1879      	adds	r1, r7, r1
 8004a12:	600a      	str	r2, [r1, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004a1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	da05      	bge.n	8004a30 <_vsnprintf+0x380>
 8004a24:	2000      	movs	r0, #0
 8004a26:	2100      	movs	r1, #0
 8004a28:	1a80      	subs	r0, r0, r2
 8004a2a:	4199      	sbcs	r1, r3
 8004a2c:	0002      	movs	r2, r0
 8004a2e:	000b      	movs	r3, r1
 8004a30:	0010      	movs	r0, r2
 8004a32:	0019      	movs	r1, r3
 8004a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a36:	0fdb      	lsrs	r3, r3, #31
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a3c:	613b      	str	r3, [r7, #16]
 8004a3e:	2300      	movs	r3, #0
 8004a40:	617b      	str	r3, [r7, #20]
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	469c      	mov	ip, r3
 8004a46:	6dfe      	ldr	r6, [r7, #92]	@ 0x5c
 8004a48:	6a3d      	ldr	r5, [r7, #32]
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4c:	4698      	mov	r8, r3
 8004a4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a50:	9308      	str	r3, [sp, #32]
 8004a52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a54:	9307      	str	r3, [sp, #28]
 8004a56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a58:	9306      	str	r3, [sp, #24]
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	697c      	ldr	r4, [r7, #20]
 8004a5e:	9304      	str	r3, [sp, #16]
 8004a60:	9405      	str	r4, [sp, #20]
 8004a62:	9202      	str	r2, [sp, #8]
 8004a64:	9000      	str	r0, [sp, #0]
 8004a66:	9101      	str	r1, [sp, #4]
 8004a68:	4663      	mov	r3, ip
 8004a6a:	0032      	movs	r2, r6
 8004a6c:	0029      	movs	r1, r5
 8004a6e:	4640      	mov	r0, r8
 8004a70:	f7ff f8b0 	bl	8003bd4 <_ntoa_long_long>
 8004a74:	0003      	movs	r3, r0
 8004a76:	65fb      	str	r3, [r7, #92]	@ 0x5c
          if (flags & FLAGS_LONG_LONG) {
 8004a78:	e0fa      	b.n	8004c70 <_vsnprintf+0x5c0>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8004a7a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004a7c:	2380      	movs	r3, #128	@ 0x80
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	4013      	ands	r3, r2
 8004a82:	d025      	beq.n	8004ad0 <_vsnprintf+0x420>
            const long value = va_arg(va, long);
 8004a84:	2388      	movs	r3, #136	@ 0x88
 8004a86:	18fb      	adds	r3, r7, r3
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	1d1a      	adds	r2, r3, #4
 8004a8c:	2188      	movs	r1, #136	@ 0x88
 8004a8e:	1879      	adds	r1, r7, r1
 8004a90:	600a      	str	r2, [r1, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	637b      	str	r3, [r7, #52]	@ 0x34
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a98:	17da      	asrs	r2, r3, #31
 8004a9a:	189b      	adds	r3, r3, r2
 8004a9c:	4053      	eors	r3, r2
 8004a9e:	001e      	movs	r6, r3
 8004aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aa2:	0fdb      	lsrs	r3, r3, #31
 8004aa4:	b2da      	uxtb	r2, r3
 8004aa6:	69fd      	ldr	r5, [r7, #28]
 8004aa8:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 8004aaa:	6a39      	ldr	r1, [r7, #32]
 8004aac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004aae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ab0:	9305      	str	r3, [sp, #20]
 8004ab2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ab4:	9304      	str	r3, [sp, #16]
 8004ab6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ab8:	9303      	str	r3, [sp, #12]
 8004aba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004abc:	9302      	str	r3, [sp, #8]
 8004abe:	9201      	str	r2, [sp, #4]
 8004ac0:	9600      	str	r6, [sp, #0]
 8004ac2:	002b      	movs	r3, r5
 8004ac4:	0022      	movs	r2, r4
 8004ac6:	f7ff f81c 	bl	8003b02 <_ntoa_long>
 8004aca:	0003      	movs	r3, r0
 8004acc:	65fb      	str	r3, [r7, #92]	@ 0x5c
          if (flags & FLAGS_LONG_LONG) {
 8004ace:	e0cf      	b.n	8004c70 <_vsnprintf+0x5c0>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8004ad0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ad2:	2240      	movs	r2, #64	@ 0x40
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	d009      	beq.n	8004aec <_vsnprintf+0x43c>
 8004ad8:	2388      	movs	r3, #136	@ 0x88
 8004ada:	18fb      	adds	r3, r7, r3
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	1d1a      	adds	r2, r3, #4
 8004ae0:	2188      	movs	r1, #136	@ 0x88
 8004ae2:	1879      	adds	r1, r7, r1
 8004ae4:	600a      	str	r2, [r1, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	e015      	b.n	8004b18 <_vsnprintf+0x468>
 8004aec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004aee:	2280      	movs	r2, #128	@ 0x80
 8004af0:	4013      	ands	r3, r2
 8004af2:	d009      	beq.n	8004b08 <_vsnprintf+0x458>
 8004af4:	2388      	movs	r3, #136	@ 0x88
 8004af6:	18fb      	adds	r3, r7, r3
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	1d1a      	adds	r2, r3, #4
 8004afc:	2188      	movs	r1, #136	@ 0x88
 8004afe:	1879      	adds	r1, r7, r1
 8004b00:	600a      	str	r2, [r1, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	b21b      	sxth	r3, r3
 8004b06:	e007      	b.n	8004b18 <_vsnprintf+0x468>
 8004b08:	2388      	movs	r3, #136	@ 0x88
 8004b0a:	18fb      	adds	r3, r7, r3
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	1d1a      	adds	r2, r3, #4
 8004b10:	2188      	movs	r1, #136	@ 0x88
 8004b12:	1879      	adds	r1, r7, r1
 8004b14:	600a      	str	r2, [r1, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	63bb      	str	r3, [r7, #56]	@ 0x38
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b1c:	17da      	asrs	r2, r3, #31
 8004b1e:	189b      	adds	r3, r3, r2
 8004b20:	4053      	eors	r3, r2
 8004b22:	001e      	movs	r6, r3
 8004b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b26:	0fdb      	lsrs	r3, r3, #31
 8004b28:	b2da      	uxtb	r2, r3
 8004b2a:	69fd      	ldr	r5, [r7, #28]
 8004b2c:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 8004b2e:	6a39      	ldr	r1, [r7, #32]
 8004b30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004b32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b34:	9305      	str	r3, [sp, #20]
 8004b36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b38:	9304      	str	r3, [sp, #16]
 8004b3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b3c:	9303      	str	r3, [sp, #12]
 8004b3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b40:	9302      	str	r3, [sp, #8]
 8004b42:	9201      	str	r2, [sp, #4]
 8004b44:	9600      	str	r6, [sp, #0]
 8004b46:	002b      	movs	r3, r5
 8004b48:	0022      	movs	r2, r4
 8004b4a:	f7fe ffda 	bl	8003b02 <_ntoa_long>
 8004b4e:	0003      	movs	r3, r0
 8004b50:	65fb      	str	r3, [r7, #92]	@ 0x5c
          if (flags & FLAGS_LONG_LONG) {
 8004b52:	e08d      	b.n	8004c70 <_vsnprintf+0x5c0>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8004b54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b56:	2380      	movs	r3, #128	@ 0x80
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	d02b      	beq.n	8004bb6 <_vsnprintf+0x506>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8004b5e:	2388      	movs	r3, #136	@ 0x88
 8004b60:	18fb      	adds	r3, r7, r3
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	3307      	adds	r3, #7
 8004b66:	2207      	movs	r2, #7
 8004b68:	4393      	bics	r3, r2
 8004b6a:	001a      	movs	r2, r3
 8004b6c:	3208      	adds	r2, #8
 8004b6e:	2188      	movs	r1, #136	@ 0x88
 8004b70:	1879      	adds	r1, r7, r1
 8004b72:	600a      	str	r2, [r1, #0]
 8004b74:	6818      	ldr	r0, [r3, #0]
 8004b76:	6859      	ldr	r1, [r3, #4]
 8004b78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b7a:	60bb      	str	r3, [r7, #8]
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	69fe      	ldr	r6, [r7, #28]
 8004b82:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004b84:	6a3d      	ldr	r5, [r7, #32]
 8004b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b88:	469c      	mov	ip, r3
 8004b8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b8c:	9308      	str	r3, [sp, #32]
 8004b8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b90:	9307      	str	r3, [sp, #28]
 8004b92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b94:	9306      	str	r3, [sp, #24]
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	68fc      	ldr	r4, [r7, #12]
 8004b9a:	9304      	str	r3, [sp, #16]
 8004b9c:	9405      	str	r4, [sp, #20]
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	9302      	str	r3, [sp, #8]
 8004ba2:	9000      	str	r0, [sp, #0]
 8004ba4:	9101      	str	r1, [sp, #4]
 8004ba6:	0033      	movs	r3, r6
 8004ba8:	0029      	movs	r1, r5
 8004baa:	4660      	mov	r0, ip
 8004bac:	f7ff f812 	bl	8003bd4 <_ntoa_long_long>
 8004bb0:	0003      	movs	r3, r0
 8004bb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bb4:	e05c      	b.n	8004c70 <_vsnprintf+0x5c0>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8004bb6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004bb8:	2380      	movs	r3, #128	@ 0x80
 8004bba:	005b      	lsls	r3, r3, #1
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	d01d      	beq.n	8004bfc <_vsnprintf+0x54c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8004bc0:	2388      	movs	r3, #136	@ 0x88
 8004bc2:	18fb      	adds	r3, r7, r3
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	1d1a      	adds	r2, r3, #4
 8004bc8:	2188      	movs	r1, #136	@ 0x88
 8004bca:	1879      	adds	r1, r7, r1
 8004bcc:	600a      	str	r2, [r1, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	69fd      	ldr	r5, [r7, #28]
 8004bd2:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 8004bd4:	6a39      	ldr	r1, [r7, #32]
 8004bd6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004bd8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004bda:	9205      	str	r2, [sp, #20]
 8004bdc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004bde:	9204      	str	r2, [sp, #16]
 8004be0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004be2:	9203      	str	r2, [sp, #12]
 8004be4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004be6:	9202      	str	r2, [sp, #8]
 8004be8:	2200      	movs	r2, #0
 8004bea:	9201      	str	r2, [sp, #4]
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	002b      	movs	r3, r5
 8004bf0:	0022      	movs	r2, r4
 8004bf2:	f7fe ff86 	bl	8003b02 <_ntoa_long>
 8004bf6:	0003      	movs	r3, r0
 8004bf8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bfa:	e039      	b.n	8004c70 <_vsnprintf+0x5c0>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8004bfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bfe:	2240      	movs	r2, #64	@ 0x40
 8004c00:	4013      	ands	r3, r2
 8004c02:	d009      	beq.n	8004c18 <_vsnprintf+0x568>
 8004c04:	2388      	movs	r3, #136	@ 0x88
 8004c06:	18fb      	adds	r3, r7, r3
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	1d1a      	adds	r2, r3, #4
 8004c0c:	2188      	movs	r1, #136	@ 0x88
 8004c0e:	1879      	adds	r1, r7, r1
 8004c10:	600a      	str	r2, [r1, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	e015      	b.n	8004c44 <_vsnprintf+0x594>
 8004c18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c1a:	2280      	movs	r2, #128	@ 0x80
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	d009      	beq.n	8004c34 <_vsnprintf+0x584>
 8004c20:	2388      	movs	r3, #136	@ 0x88
 8004c22:	18fb      	adds	r3, r7, r3
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	1d1a      	adds	r2, r3, #4
 8004c28:	2188      	movs	r1, #136	@ 0x88
 8004c2a:	1879      	adds	r1, r7, r1
 8004c2c:	600a      	str	r2, [r1, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	e007      	b.n	8004c44 <_vsnprintf+0x594>
 8004c34:	2388      	movs	r3, #136	@ 0x88
 8004c36:	18fb      	adds	r3, r7, r3
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	1d1a      	adds	r2, r3, #4
 8004c3c:	2188      	movs	r1, #136	@ 0x88
 8004c3e:	1879      	adds	r1, r7, r1
 8004c40:	600a      	str	r2, [r1, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8004c46:	69fc      	ldr	r4, [r7, #28]
 8004c48:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004c4a:	6a39      	ldr	r1, [r7, #32]
 8004c4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c50:	9305      	str	r3, [sp, #20]
 8004c52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c54:	9304      	str	r3, [sp, #16]
 8004c56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c58:	9303      	str	r3, [sp, #12]
 8004c5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c5c:	9302      	str	r3, [sp, #8]
 8004c5e:	2300      	movs	r3, #0
 8004c60:	9301      	str	r3, [sp, #4]
 8004c62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	0023      	movs	r3, r4
 8004c68:	f7fe ff4b 	bl	8003b02 <_ntoa_long>
 8004c6c:	0003      	movs	r3, r0
 8004c6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
          }
        }
        format++;
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	3301      	adds	r3, #1
 8004c74:	61bb      	str	r3, [r7, #24]
        break;
 8004c76:	e17c      	b.n	8004f72 <_vsnprintf+0x8c2>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	2b46      	cmp	r3, #70	@ 0x46
 8004c7e:	d103      	bne.n	8004c88 <_vsnprintf+0x5d8>
 8004c80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c82:	2220      	movs	r2, #32
 8004c84:	4313      	orrs	r3, r2
 8004c86:	66fb      	str	r3, [r7, #108]	@ 0x6c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8004c88:	2388      	movs	r3, #136	@ 0x88
 8004c8a:	18fb      	adds	r3, r7, r3
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	3307      	adds	r3, #7
 8004c90:	2207      	movs	r2, #7
 8004c92:	4393      	bics	r3, r2
 8004c94:	001a      	movs	r2, r3
 8004c96:	3208      	adds	r2, #8
 8004c98:	2188      	movs	r1, #136	@ 0x88
 8004c9a:	1879      	adds	r1, r7, r1
 8004c9c:	600a      	str	r2, [r1, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	69fe      	ldr	r6, [r7, #28]
 8004ca4:	6dfd      	ldr	r5, [r7, #92]	@ 0x5c
 8004ca6:	6a3c      	ldr	r4, [r7, #32]
 8004ca8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004caa:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004cac:	9104      	str	r1, [sp, #16]
 8004cae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004cb0:	9103      	str	r1, [sp, #12]
 8004cb2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8004cb4:	9102      	str	r1, [sp, #8]
 8004cb6:	9200      	str	r2, [sp, #0]
 8004cb8:	9301      	str	r3, [sp, #4]
 8004cba:	0033      	movs	r3, r6
 8004cbc:	002a      	movs	r2, r5
 8004cbe:	0021      	movs	r1, r4
 8004cc0:	f7fe fffc 	bl	8003cbc <_ftoa>
 8004cc4:	0003      	movs	r3, r0
 8004cc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	61bb      	str	r3, [r7, #24]
        break;
 8004cce:	e150      	b.n	8004f72 <_vsnprintf+0x8c2>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2b67      	cmp	r3, #103	@ 0x67
 8004cd6:	d003      	beq.n	8004ce0 <_vsnprintf+0x630>
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b47      	cmp	r3, #71	@ 0x47
 8004cde:	d104      	bne.n	8004cea <_vsnprintf+0x63a>
 8004ce0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ce2:	2280      	movs	r2, #128	@ 0x80
 8004ce4:	0112      	lsls	r2, r2, #4
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	66fb      	str	r3, [r7, #108]	@ 0x6c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	2b45      	cmp	r3, #69	@ 0x45
 8004cf0:	d003      	beq.n	8004cfa <_vsnprintf+0x64a>
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	2b47      	cmp	r3, #71	@ 0x47
 8004cf8:	d103      	bne.n	8004d02 <_vsnprintf+0x652>
 8004cfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	66fb      	str	r3, [r7, #108]	@ 0x6c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8004d02:	2388      	movs	r3, #136	@ 0x88
 8004d04:	18fb      	adds	r3, r7, r3
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	3307      	adds	r3, #7
 8004d0a:	2207      	movs	r2, #7
 8004d0c:	4393      	bics	r3, r2
 8004d0e:	001a      	movs	r2, r3
 8004d10:	3208      	adds	r2, #8
 8004d12:	2188      	movs	r1, #136	@ 0x88
 8004d14:	1879      	adds	r1, r7, r1
 8004d16:	600a      	str	r2, [r1, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	69fe      	ldr	r6, [r7, #28]
 8004d1e:	6dfd      	ldr	r5, [r7, #92]	@ 0x5c
 8004d20:	6a3c      	ldr	r4, [r7, #32]
 8004d22:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d24:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004d26:	9104      	str	r1, [sp, #16]
 8004d28:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004d2a:	9103      	str	r1, [sp, #12]
 8004d2c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8004d2e:	9102      	str	r1, [sp, #8]
 8004d30:	9200      	str	r2, [sp, #0]
 8004d32:	9301      	str	r3, [sp, #4]
 8004d34:	0033      	movs	r3, r6
 8004d36:	002a      	movs	r2, r5
 8004d38:	0021      	movs	r1, r4
 8004d3a:	f7ff f9fd 	bl	8004138 <_etoa>
 8004d3e:	0003      	movs	r3, r0
 8004d40:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	3301      	adds	r3, #1
 8004d46:	61bb      	str	r3, [r7, #24]
        break;
 8004d48:	e113      	b.n	8004f72 <_vsnprintf+0x8c2>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	657b      	str	r3, [r7, #84]	@ 0x54
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8004d4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d50:	2202      	movs	r2, #2
 8004d52:	4013      	ands	r3, r2
 8004d54:	d10e      	bne.n	8004d74 <_vsnprintf+0x6c4>
          while (l++ < width) {
 8004d56:	e007      	b.n	8004d68 <_vsnprintf+0x6b8>
            out(' ', buffer, idx++, maxlen);
 8004d58:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004d5a:	1c53      	adds	r3, r2, #1
 8004d5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	6a39      	ldr	r1, [r7, #32]
 8004d62:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8004d64:	2020      	movs	r0, #32
 8004d66:	47a0      	blx	r4
          while (l++ < width) {
 8004d68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d6a:	1c5a      	adds	r2, r3, #1
 8004d6c:	657a      	str	r2, [r7, #84]	@ 0x54
 8004d6e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d8f1      	bhi.n	8004d58 <_vsnprintf+0x6a8>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8004d74:	2388      	movs	r3, #136	@ 0x88
 8004d76:	18fb      	adds	r3, r7, r3
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	1d1a      	adds	r2, r3, #4
 8004d7c:	2188      	movs	r1, #136	@ 0x88
 8004d7e:	1879      	adds	r1, r7, r1
 8004d80:	600a      	str	r2, [r1, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	b2d8      	uxtb	r0, r3
 8004d86:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004d88:	1c53      	adds	r3, r2, #1
 8004d8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	6a39      	ldr	r1, [r7, #32]
 8004d90:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8004d92:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8004d94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d96:	2202      	movs	r2, #2
 8004d98:	4013      	ands	r3, r2
 8004d9a:	d00e      	beq.n	8004dba <_vsnprintf+0x70a>
          while (l++ < width) {
 8004d9c:	e007      	b.n	8004dae <_vsnprintf+0x6fe>
            out(' ', buffer, idx++, maxlen);
 8004d9e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004da0:	1c53      	adds	r3, r2, #1
 8004da2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	6a39      	ldr	r1, [r7, #32]
 8004da8:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8004daa:	2020      	movs	r0, #32
 8004dac:	47a0      	blx	r4
          while (l++ < width) {
 8004dae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004db0:	1c5a      	adds	r2, r3, #1
 8004db2:	657a      	str	r2, [r7, #84]	@ 0x54
 8004db4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d8f1      	bhi.n	8004d9e <_vsnprintf+0x6ee>
          }
        }
        format++;
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	61bb      	str	r3, [r7, #24]
        break;
 8004dc0:	e0d7      	b.n	8004f72 <_vsnprintf+0x8c2>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8004dc2:	2388      	movs	r3, #136	@ 0x88
 8004dc4:	18fb      	adds	r3, r7, r3
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	1d1a      	adds	r2, r3, #4
 8004dca:	2188      	movs	r1, #136	@ 0x88
 8004dcc:	1879      	adds	r1, r7, r1
 8004dce:	600a      	str	r2, [r1, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	653b      	str	r3, [r7, #80]	@ 0x50
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8004dd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <_vsnprintf+0x72e>
 8004dda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ddc:	e001      	b.n	8004de2 <_vsnprintf+0x732>
 8004dde:	2301      	movs	r3, #1
 8004de0:	425b      	negs	r3, r3
 8004de2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004de4:	0019      	movs	r1, r3
 8004de6:	0010      	movs	r0, r2
 8004de8:	f7fe fd11 	bl	800380e <_strnlen_s>
 8004dec:	0003      	movs	r3, r0
 8004dee:	64fb      	str	r3, [r7, #76]	@ 0x4c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8004df0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004df2:	2380      	movs	r3, #128	@ 0x80
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	4013      	ands	r3, r2
 8004df8:	d005      	beq.n	8004e06 <_vsnprintf+0x756>
          l = (l < precision ? l : precision);
 8004dfa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004dfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d900      	bls.n	8004e04 <_vsnprintf+0x754>
 8004e02:	0013      	movs	r3, r2
 8004e04:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }
        if (!(flags & FLAGS_LEFT)) {
 8004e06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e08:	2202      	movs	r2, #2
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	d11a      	bne.n	8004e44 <_vsnprintf+0x794>
          while (l++ < width) {
 8004e0e:	e007      	b.n	8004e20 <_vsnprintf+0x770>
            out(' ', buffer, idx++, maxlen);
 8004e10:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004e12:	1c53      	adds	r3, r2, #1
 8004e14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	6a39      	ldr	r1, [r7, #32]
 8004e1a:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8004e1c:	2020      	movs	r0, #32
 8004e1e:	47a0      	blx	r4
          while (l++ < width) {
 8004e20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e22:	1c5a      	adds	r2, r3, #1
 8004e24:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004e26:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d8f1      	bhi.n	8004e10 <_vsnprintf+0x760>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8004e2c:	e00a      	b.n	8004e44 <_vsnprintf+0x794>
          out(*(p++), buffer, idx++, maxlen);
 8004e2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e30:	1c5a      	adds	r2, r3, #1
 8004e32:	653a      	str	r2, [r7, #80]	@ 0x50
 8004e34:	7818      	ldrb	r0, [r3, #0]
 8004e36:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004e38:	1c53      	adds	r3, r2, #1
 8004e3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	6a39      	ldr	r1, [r7, #32]
 8004e40:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8004e42:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8004e44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d009      	beq.n	8004e60 <_vsnprintf+0x7b0>
 8004e4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004e4e:	2380      	movs	r3, #128	@ 0x80
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	4013      	ands	r3, r2
 8004e54:	d0eb      	beq.n	8004e2e <_vsnprintf+0x77e>
 8004e56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e58:	1e5a      	subs	r2, r3, #1
 8004e5a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1e6      	bne.n	8004e2e <_vsnprintf+0x77e>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8004e60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e62:	2202      	movs	r2, #2
 8004e64:	4013      	ands	r3, r2
 8004e66:	d00e      	beq.n	8004e86 <_vsnprintf+0x7d6>
          while (l++ < width) {
 8004e68:	e007      	b.n	8004e7a <_vsnprintf+0x7ca>
            out(' ', buffer, idx++, maxlen);
 8004e6a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004e6c:	1c53      	adds	r3, r2, #1
 8004e6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	6a39      	ldr	r1, [r7, #32]
 8004e74:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8004e76:	2020      	movs	r0, #32
 8004e78:	47a0      	blx	r4
          while (l++ < width) {
 8004e7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e7c:	1c5a      	adds	r2, r3, #1
 8004e7e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004e80:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d8f1      	bhi.n	8004e6a <_vsnprintf+0x7ba>
          }
        }
        format++;
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	61bb      	str	r3, [r7, #24]
        break;
 8004e8c:	e071      	b.n	8004f72 <_vsnprintf+0x8c2>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8004e8e:	2308      	movs	r3, #8
 8004e90:	66bb      	str	r3, [r7, #104]	@ 0x68
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8004e92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e94:	2221      	movs	r2, #33	@ 0x21
 8004e96:	4313      	orrs	r3, r2
 8004e98:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8004e9a:	212b      	movs	r1, #43	@ 0x2b
 8004e9c:	2318      	movs	r3, #24
 8004e9e:	18cb      	adds	r3, r1, r3
 8004ea0:	19db      	adds	r3, r3, r7
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	701a      	strb	r2, [r3, #0]
        if (is_ll) {
 8004ea6:	2318      	movs	r3, #24
 8004ea8:	18cb      	adds	r3, r1, r3
 8004eaa:	19db      	adds	r3, r3, r7
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d025      	beq.n	8004efe <_vsnprintf+0x84e>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8004eb2:	2388      	movs	r3, #136	@ 0x88
 8004eb4:	18fb      	adds	r3, r7, r3
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	1d1a      	adds	r2, r3, #4
 8004eba:	2188      	movs	r1, #136	@ 0x88
 8004ebc:	1879      	adds	r1, r7, r1
 8004ebe:	600a      	str	r2, [r1, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	603b      	str	r3, [r7, #0]
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	607b      	str	r3, [r7, #4]
 8004ec8:	69fd      	ldr	r5, [r7, #28]
 8004eca:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 8004ecc:	6a39      	ldr	r1, [r7, #32]
 8004ece:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ed0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ed2:	9308      	str	r3, [sp, #32]
 8004ed4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ed6:	9307      	str	r3, [sp, #28]
 8004ed8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004eda:	9306      	str	r3, [sp, #24]
 8004edc:	2210      	movs	r2, #16
 8004ede:	2300      	movs	r3, #0
 8004ee0:	9204      	str	r2, [sp, #16]
 8004ee2:	9305      	str	r3, [sp, #20]
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	9302      	str	r3, [sp, #8]
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	9200      	str	r2, [sp, #0]
 8004eee:	9301      	str	r3, [sp, #4]
 8004ef0:	002b      	movs	r3, r5
 8004ef2:	0022      	movs	r2, r4
 8004ef4:	f7fe fe6e 	bl	8003bd4 <_ntoa_long_long>
 8004ef8:	0003      	movs	r3, r0
 8004efa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004efc:	e01c      	b.n	8004f38 <_vsnprintf+0x888>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8004efe:	2388      	movs	r3, #136	@ 0x88
 8004f00:	18fb      	adds	r3, r7, r3
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	1d1a      	adds	r2, r3, #4
 8004f06:	2188      	movs	r1, #136	@ 0x88
 8004f08:	1879      	adds	r1, r7, r1
 8004f0a:	600a      	str	r2, [r1, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	001d      	movs	r5, r3
 8004f10:	69fc      	ldr	r4, [r7, #28]
 8004f12:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004f14:	6a39      	ldr	r1, [r7, #32]
 8004f16:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f1a:	9305      	str	r3, [sp, #20]
 8004f1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f1e:	9304      	str	r3, [sp, #16]
 8004f20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f22:	9303      	str	r3, [sp, #12]
 8004f24:	2310      	movs	r3, #16
 8004f26:	9302      	str	r3, [sp, #8]
 8004f28:	2300      	movs	r3, #0
 8004f2a:	9301      	str	r3, [sp, #4]
 8004f2c:	9500      	str	r5, [sp, #0]
 8004f2e:	0023      	movs	r3, r4
 8004f30:	f7fe fde7 	bl	8003b02 <_ntoa_long>
 8004f34:	0003      	movs	r3, r0
 8004f36:	65fb      	str	r3, [r7, #92]	@ 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	61bb      	str	r3, [r7, #24]
        break;
 8004f3e:	e018      	b.n	8004f72 <_vsnprintf+0x8c2>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8004f40:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004f42:	1c53      	adds	r3, r2, #1
 8004f44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	6a39      	ldr	r1, [r7, #32]
 8004f4a:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8004f4c:	2025      	movs	r0, #37	@ 0x25
 8004f4e:	47a0      	blx	r4
        format++;
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	3301      	adds	r3, #1
 8004f54:	61bb      	str	r3, [r7, #24]
        break;
 8004f56:	e00c      	b.n	8004f72 <_vsnprintf+0x8c2>

      default :
        out(*format, buffer, idx++, maxlen);
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	7818      	ldrb	r0, [r3, #0]
 8004f5c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004f5e:	1c53      	adds	r3, r2, #1
 8004f60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	6a39      	ldr	r1, [r7, #32]
 8004f66:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8004f68:	47a0      	blx	r4
        format++;
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	61bb      	str	r3, [r7, #24]
        break;
 8004f70:	46c0      	nop			@ (mov r8, r8)
  while (*format)
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <_vsnprintf+0x8ce>
 8004f7a:	f7ff fbad 	bl	80046d8 <_vsnprintf+0x28>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8004f7e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d302      	bcc.n	8004f8c <_vsnprintf+0x8dc>
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	1e5a      	subs	r2, r3, #1
 8004f8a:	e000      	b.n	8004f8e <_vsnprintf+0x8de>
 8004f8c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	6a39      	ldr	r1, [r7, #32]
 8004f92:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8004f94:	2000      	movs	r0, #0
 8004f96:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8004f98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	b01c      	add	sp, #112	@ 0x70
 8004fa0:	bc80      	pop	{r7}
 8004fa2:	46b8      	mov	r8, r7
 8004fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fa6:	46c0      	nop			@ (mov r8, r8)

08004fa8 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8004fa8:	b40f      	push	{r0, r1, r2, r3}
 8004faa:	b590      	push	{r4, r7, lr}
 8004fac:	b087      	sub	sp, #28
 8004fae:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8004fb0:	2324      	movs	r3, #36	@ 0x24
 8004fb2:	18fb      	adds	r3, r7, r3
 8004fb4:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8004fb6:	6a3c      	ldr	r4, [r7, #32]
 8004fb8:	2301      	movs	r3, #1
 8004fba:	425a      	negs	r2, r3
 8004fbc:	1d39      	adds	r1, r7, #4
 8004fbe:	4808      	ldr	r0, [pc, #32]	@ (8004fe0 <printf_+0x38>)
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	9300      	str	r3, [sp, #0]
 8004fc4:	0023      	movs	r3, r4
 8004fc6:	f7ff fb73 	bl	80046b0 <_vsnprintf>
 8004fca:	0003      	movs	r3, r0
 8004fcc:	60fb      	str	r3, [r7, #12]
  va_end(va);
  return ret;
 8004fce:	68fb      	ldr	r3, [r7, #12]
}
 8004fd0:	0018      	movs	r0, r3
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	b005      	add	sp, #20
 8004fd6:	bc90      	pop	{r4, r7}
 8004fd8:	bc08      	pop	{r3}
 8004fda:	b004      	add	sp, #16
 8004fdc:	4718      	bx	r3
 8004fde:	46c0      	nop			@ (mov r8, r8)
 8004fe0:	080037df 	.word	0x080037df

08004fe4 <_putchar>:
  va_end(va);
  return ret;
}


void _putchar(char character) {
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	0002      	movs	r2, r0
 8004fec:	1dfb      	adds	r3, r7, #7
 8004fee:	701a      	strb	r2, [r3, #0]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	while( !( USART2->ISR & USART_ISR_TXE_TXFNF ) ) {};
 8004ff0:	46c0      	nop			@ (mov r8, r8)
 8004ff2:	4b06      	ldr	r3, [pc, #24]	@ (800500c <_putchar+0x28>)
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	2280      	movs	r2, #128	@ 0x80
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	d0fa      	beq.n	8004ff2 <_putchar+0xe>
      USART2->TDR = character;
 8004ffc:	4b03      	ldr	r3, [pc, #12]	@ (800500c <_putchar+0x28>)
 8004ffe:	1dfa      	adds	r2, r7, #7
 8005000:	7812      	ldrb	r2, [r2, #0]
 8005002:	629a      	str	r2, [r3, #40]	@ 0x28
		
}
 8005004:	46c0      	nop			@ (mov r8, r8)
 8005006:	46bd      	mov	sp, r7
 8005008:	b002      	add	sp, #8
 800500a:	bd80      	pop	{r7, pc}
 800500c:	40004400 	.word	0x40004400

08005010 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8005014:	4b19      	ldr	r3, [pc, #100]	@ (800507c <MX_RTC_Init+0x6c>)
 8005016:	4a1a      	ldr	r2, [pc, #104]	@ (8005080 <MX_RTC_Init+0x70>)
 8005018:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800501a:	4b18      	ldr	r3, [pc, #96]	@ (800507c <MX_RTC_Init+0x6c>)
 800501c:	2200      	movs	r2, #0
 800501e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8005020:	4b16      	ldr	r3, [pc, #88]	@ (800507c <MX_RTC_Init+0x6c>)
 8005022:	227f      	movs	r2, #127	@ 0x7f
 8005024:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8005026:	4b15      	ldr	r3, [pc, #84]	@ (800507c <MX_RTC_Init+0x6c>)
 8005028:	22ff      	movs	r2, #255	@ 0xff
 800502a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800502c:	4b13      	ldr	r3, [pc, #76]	@ (800507c <MX_RTC_Init+0x6c>)
 800502e:	2200      	movs	r2, #0
 8005030:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8005032:	4b12      	ldr	r3, [pc, #72]	@ (800507c <MX_RTC_Init+0x6c>)
 8005034:	2200      	movs	r2, #0
 8005036:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005038:	4b10      	ldr	r3, [pc, #64]	@ (800507c <MX_RTC_Init+0x6c>)
 800503a:	2200      	movs	r2, #0
 800503c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800503e:	4b0f      	ldr	r3, [pc, #60]	@ (800507c <MX_RTC_Init+0x6c>)
 8005040:	2280      	movs	r2, #128	@ 0x80
 8005042:	05d2      	lsls	r2, r2, #23
 8005044:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8005046:	4b0d      	ldr	r3, [pc, #52]	@ (800507c <MX_RTC_Init+0x6c>)
 8005048:	2200      	movs	r2, #0
 800504a:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800504c:	4b0b      	ldr	r3, [pc, #44]	@ (800507c <MX_RTC_Init+0x6c>)
 800504e:	2200      	movs	r2, #0
 8005050:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005052:	4b0a      	ldr	r3, [pc, #40]	@ (800507c <MX_RTC_Init+0x6c>)
 8005054:	0018      	movs	r0, r3
 8005056:	f003 f92b 	bl	80082b0 <HAL_RTC_Init>
 800505a:	1e03      	subs	r3, r0, #0
 800505c:	d001      	beq.n	8005062 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800505e:	f7fe fbaa 	bl	80037b6 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 60, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8005062:	4b06      	ldr	r3, [pc, #24]	@ (800507c <MX_RTC_Init+0x6c>)
 8005064:	2204      	movs	r2, #4
 8005066:	213c      	movs	r1, #60	@ 0x3c
 8005068:	0018      	movs	r0, r3
 800506a:	f003 fa19 	bl	80084a0 <HAL_RTCEx_SetWakeUpTimer>
 800506e:	1e03      	subs	r3, r0, #0
 8005070:	d001      	beq.n	8005076 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8005072:	f7fe fba0 	bl	80037b6 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8005076:	46c0      	nop			@ (mov r8, r8)
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	200000f0 	.word	0x200000f0
 8005080:	40002800 	.word	0x40002800

08005084 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8005084:	b590      	push	{r4, r7, lr}
 8005086:	b095      	sub	sp, #84	@ 0x54
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800508c:	240c      	movs	r4, #12
 800508e:	193b      	adds	r3, r7, r4
 8005090:	0018      	movs	r0, r3
 8005092:	2344      	movs	r3, #68	@ 0x44
 8005094:	001a      	movs	r2, r3
 8005096:	2100      	movs	r1, #0
 8005098:	f004 f8a8 	bl	80091ec <memset>
  if(rtcHandle->Instance==RTC)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a16      	ldr	r2, [pc, #88]	@ (80050fc <HAL_RTC_MspInit+0x78>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d126      	bne.n	80050f4 <HAL_RTC_MspInit+0x70>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80050a6:	193b      	adds	r3, r7, r4
 80050a8:	2280      	movs	r2, #128	@ 0x80
 80050aa:	0212      	lsls	r2, r2, #8
 80050ac:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80050ae:	193b      	adds	r3, r7, r4
 80050b0:	2280      	movs	r2, #128	@ 0x80
 80050b2:	0092      	lsls	r2, r2, #2
 80050b4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80050b6:	193b      	adds	r3, r7, r4
 80050b8:	0018      	movs	r0, r3
 80050ba:	f002 f8c9 	bl	8007250 <HAL_RCCEx_PeriphCLKConfig>
 80050be:	1e03      	subs	r3, r0, #0
 80050c0:	d001      	beq.n	80050c6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80050c2:	f7fe fb78 	bl	80037b6 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80050c6:	4a0e      	ldr	r2, [pc, #56]	@ (8005100 <HAL_RTC_MspInit+0x7c>)
 80050c8:	2390      	movs	r3, #144	@ 0x90
 80050ca:	58d3      	ldr	r3, [r2, r3]
 80050cc:	490c      	ldr	r1, [pc, #48]	@ (8005100 <HAL_RTC_MspInit+0x7c>)
 80050ce:	2280      	movs	r2, #128	@ 0x80
 80050d0:	0212      	lsls	r2, r2, #8
 80050d2:	4313      	orrs	r3, r2
 80050d4:	2290      	movs	r2, #144	@ 0x90
 80050d6:	508b      	str	r3, [r1, r2]
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80050d8:	4b09      	ldr	r3, [pc, #36]	@ (8005100 <HAL_RTC_MspInit+0x7c>)
 80050da:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80050dc:	4b08      	ldr	r3, [pc, #32]	@ (8005100 <HAL_RTC_MspInit+0x7c>)
 80050de:	2180      	movs	r1, #128	@ 0x80
 80050e0:	00c9      	lsls	r1, r1, #3
 80050e2:	430a      	orrs	r2, r1
 80050e4:	659a      	str	r2, [r3, #88]	@ 0x58
 80050e6:	4b06      	ldr	r3, [pc, #24]	@ (8005100 <HAL_RTC_MspInit+0x7c>)
 80050e8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80050ea:	2380      	movs	r3, #128	@ 0x80
 80050ec:	00db      	lsls	r3, r3, #3
 80050ee:	4013      	ands	r3, r2
 80050f0:	60bb      	str	r3, [r7, #8]
 80050f2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80050f4:	46c0      	nop			@ (mov r8, r8)
 80050f6:	46bd      	mov	sp, r7
 80050f8:	b015      	add	sp, #84	@ 0x54
 80050fa:	bd90      	pop	{r4, r7, pc}
 80050fc:	40002800 	.word	0x40002800
 8005100:	40021000 	.word	0x40021000

08005104 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005108:	4b1b      	ldr	r3, [pc, #108]	@ (8005178 <MX_SPI1_Init+0x74>)
 800510a:	4a1c      	ldr	r2, [pc, #112]	@ (800517c <MX_SPI1_Init+0x78>)
 800510c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800510e:	4b1a      	ldr	r3, [pc, #104]	@ (8005178 <MX_SPI1_Init+0x74>)
 8005110:	2282      	movs	r2, #130	@ 0x82
 8005112:	0052      	lsls	r2, r2, #1
 8005114:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005116:	4b18      	ldr	r3, [pc, #96]	@ (8005178 <MX_SPI1_Init+0x74>)
 8005118:	2200      	movs	r2, #0
 800511a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800511c:	4b16      	ldr	r3, [pc, #88]	@ (8005178 <MX_SPI1_Init+0x74>)
 800511e:	22e0      	movs	r2, #224	@ 0xe0
 8005120:	00d2      	lsls	r2, r2, #3
 8005122:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005124:	4b14      	ldr	r3, [pc, #80]	@ (8005178 <MX_SPI1_Init+0x74>)
 8005126:	2200      	movs	r2, #0
 8005128:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800512a:	4b13      	ldr	r3, [pc, #76]	@ (8005178 <MX_SPI1_Init+0x74>)
 800512c:	2200      	movs	r2, #0
 800512e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005130:	4b11      	ldr	r3, [pc, #68]	@ (8005178 <MX_SPI1_Init+0x74>)
 8005132:	2280      	movs	r2, #128	@ 0x80
 8005134:	0092      	lsls	r2, r2, #2
 8005136:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8005138:	4b0f      	ldr	r3, [pc, #60]	@ (8005178 <MX_SPI1_Init+0x74>)
 800513a:	2210      	movs	r2, #16
 800513c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800513e:	4b0e      	ldr	r3, [pc, #56]	@ (8005178 <MX_SPI1_Init+0x74>)
 8005140:	2200      	movs	r2, #0
 8005142:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005144:	4b0c      	ldr	r3, [pc, #48]	@ (8005178 <MX_SPI1_Init+0x74>)
 8005146:	2200      	movs	r2, #0
 8005148:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800514a:	4b0b      	ldr	r3, [pc, #44]	@ (8005178 <MX_SPI1_Init+0x74>)
 800514c:	2200      	movs	r2, #0
 800514e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005150:	4b09      	ldr	r3, [pc, #36]	@ (8005178 <MX_SPI1_Init+0x74>)
 8005152:	2207      	movs	r2, #7
 8005154:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005156:	4b08      	ldr	r3, [pc, #32]	@ (8005178 <MX_SPI1_Init+0x74>)
 8005158:	2200      	movs	r2, #0
 800515a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800515c:	4b06      	ldr	r3, [pc, #24]	@ (8005178 <MX_SPI1_Init+0x74>)
 800515e:	2208      	movs	r2, #8
 8005160:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005162:	4b05      	ldr	r3, [pc, #20]	@ (8005178 <MX_SPI1_Init+0x74>)
 8005164:	0018      	movs	r0, r3
 8005166:	f003 fa1d 	bl	80085a4 <HAL_SPI_Init>
 800516a:	1e03      	subs	r3, r0, #0
 800516c:	d001      	beq.n	8005172 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800516e:	f7fe fb22 	bl	80037b6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005172:	46c0      	nop			@ (mov r8, r8)
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	20000120 	.word	0x20000120
 800517c:	40013000 	.word	0x40013000

08005180 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005180:	b590      	push	{r4, r7, lr}
 8005182:	b08b      	sub	sp, #44	@ 0x2c
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005188:	2414      	movs	r4, #20
 800518a:	193b      	adds	r3, r7, r4
 800518c:	0018      	movs	r0, r3
 800518e:	2314      	movs	r3, #20
 8005190:	001a      	movs	r2, r3
 8005192:	2100      	movs	r1, #0
 8005194:	f004 f82a 	bl	80091ec <memset>
  if(spiHandle->Instance==SPI1)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a1b      	ldr	r2, [pc, #108]	@ (800520c <HAL_SPI_MspInit+0x8c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d130      	bne.n	8005204 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80051a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005210 <HAL_SPI_MspInit+0x90>)
 80051a4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80051a6:	4b1a      	ldr	r3, [pc, #104]	@ (8005210 <HAL_SPI_MspInit+0x90>)
 80051a8:	2180      	movs	r1, #128	@ 0x80
 80051aa:	0149      	lsls	r1, r1, #5
 80051ac:	430a      	orrs	r2, r1
 80051ae:	661a      	str	r2, [r3, #96]	@ 0x60
 80051b0:	4b17      	ldr	r3, [pc, #92]	@ (8005210 <HAL_SPI_MspInit+0x90>)
 80051b2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80051b4:	2380      	movs	r3, #128	@ 0x80
 80051b6:	015b      	lsls	r3, r3, #5
 80051b8:	4013      	ands	r3, r2
 80051ba:	613b      	str	r3, [r7, #16]
 80051bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051be:	4b14      	ldr	r3, [pc, #80]	@ (8005210 <HAL_SPI_MspInit+0x90>)
 80051c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80051c2:	4b13      	ldr	r3, [pc, #76]	@ (8005210 <HAL_SPI_MspInit+0x90>)
 80051c4:	2101      	movs	r1, #1
 80051c6:	430a      	orrs	r2, r1
 80051c8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80051ca:	4b11      	ldr	r3, [pc, #68]	@ (8005210 <HAL_SPI_MspInit+0x90>)
 80051cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051ce:	2201      	movs	r2, #1
 80051d0:	4013      	ands	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80051d6:	0021      	movs	r1, r4
 80051d8:	187b      	adds	r3, r7, r1
 80051da:	22e0      	movs	r2, #224	@ 0xe0
 80051dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051de:	187b      	adds	r3, r7, r1
 80051e0:	2202      	movs	r2, #2
 80051e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051e4:	187b      	adds	r3, r7, r1
 80051e6:	2200      	movs	r2, #0
 80051e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051ea:	187b      	adds	r3, r7, r1
 80051ec:	2200      	movs	r2, #0
 80051ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80051f0:	187b      	adds	r3, r7, r1
 80051f2:	2205      	movs	r2, #5
 80051f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051f6:	187a      	adds	r2, r7, r1
 80051f8:	23a0      	movs	r3, #160	@ 0xa0
 80051fa:	05db      	lsls	r3, r3, #23
 80051fc:	0011      	movs	r1, r2
 80051fe:	0018      	movs	r0, r3
 8005200:	f000 feaa 	bl	8005f58 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005204:	46c0      	nop			@ (mov r8, r8)
 8005206:	46bd      	mov	sp, r7
 8005208:	b00b      	add	sp, #44	@ 0x2c
 800520a:	bd90      	pop	{r4, r7, pc}
 800520c:	40013000 	.word	0x40013000
 8005210:	40021000 	.word	0x40021000

08005214 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800521a:	4b0f      	ldr	r3, [pc, #60]	@ (8005258 <HAL_MspInit+0x44>)
 800521c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800521e:	4b0e      	ldr	r3, [pc, #56]	@ (8005258 <HAL_MspInit+0x44>)
 8005220:	2180      	movs	r1, #128	@ 0x80
 8005222:	0549      	lsls	r1, r1, #21
 8005224:	430a      	orrs	r2, r1
 8005226:	659a      	str	r2, [r3, #88]	@ 0x58
 8005228:	4b0b      	ldr	r3, [pc, #44]	@ (8005258 <HAL_MspInit+0x44>)
 800522a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800522c:	2380      	movs	r3, #128	@ 0x80
 800522e:	055b      	lsls	r3, r3, #21
 8005230:	4013      	ands	r3, r2
 8005232:	607b      	str	r3, [r7, #4]
 8005234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005236:	4b08      	ldr	r3, [pc, #32]	@ (8005258 <HAL_MspInit+0x44>)
 8005238:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800523a:	4b07      	ldr	r3, [pc, #28]	@ (8005258 <HAL_MspInit+0x44>)
 800523c:	2101      	movs	r1, #1
 800523e:	430a      	orrs	r2, r1
 8005240:	661a      	str	r2, [r3, #96]	@ 0x60
 8005242:	4b05      	ldr	r3, [pc, #20]	@ (8005258 <HAL_MspInit+0x44>)
 8005244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005246:	2201      	movs	r2, #1
 8005248:	4013      	ands	r3, r2
 800524a:	603b      	str	r3, [r7, #0]
 800524c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800524e:	46c0      	nop			@ (mov r8, r8)
 8005250:	46bd      	mov	sp, r7
 8005252:	b002      	add	sp, #8
 8005254:	bd80      	pop	{r7, pc}
 8005256:	46c0      	nop			@ (mov r8, r8)
 8005258:	40021000 	.word	0x40021000

0800525c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005260:	46c0      	nop			@ (mov r8, r8)
 8005262:	e7fd      	b.n	8005260 <NMI_Handler+0x4>

08005264 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005268:	46c0      	nop			@ (mov r8, r8)
 800526a:	e7fd      	b.n	8005268 <HardFault_Handler+0x4>

0800526c <SVC_Handler>:

/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005270:	46c0      	nop			@ (mov r8, r8)
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800527a:	46c0      	nop			@ (mov r8, r8)
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005284:	f000 f966 	bl	8005554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005288:	46c0      	nop			@ (mov r8, r8)
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
	...

08005290 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005294:	4b11      	ldr	r3, [pc, #68]	@ (80052dc <SystemInit+0x4c>)
 8005296:	2280      	movs	r2, #128	@ 0x80
 8005298:	0512      	lsls	r2, r2, #20
 800529a:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  if (((FLASH->SECR & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)           \
 800529c:	4a10      	ldr	r2, [pc, #64]	@ (80052e0 <SystemInit+0x50>)
 800529e:	2380      	movs	r3, #128	@ 0x80
 80052a0:	58d2      	ldr	r2, [r2, r3]
 80052a2:	2380      	movs	r3, #128	@ 0x80
 80052a4:	025b      	lsls	r3, r3, #9
 80052a6:	401a      	ands	r2, r3
 80052a8:	2380      	movs	r3, #128	@ 0x80
 80052aa:	025b      	lsls	r3, r3, #9
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d112      	bne.n	80052d6 <SystemInit+0x46>
      && (((FLASH->OPTR & FLASH_OPTR_RDP) != 0xCCU)                            \
 80052b0:	4b0b      	ldr	r3, [pc, #44]	@ (80052e0 <SystemInit+0x50>)
 80052b2:	6a1b      	ldr	r3, [r3, #32]
 80052b4:	22ff      	movs	r2, #255	@ 0xff
 80052b6:	4013      	ands	r3, r2
 80052b8:	2bcc      	cmp	r3, #204	@ 0xcc
 80052ba:	d00c      	beq.n	80052d6 <SystemInit+0x46>
          && ((FLASH->OPTR & FLASH_OPTR_RDP) != 0xAAU)))
 80052bc:	4b08      	ldr	r3, [pc, #32]	@ (80052e0 <SystemInit+0x50>)
 80052be:	6a1b      	ldr	r3, [r3, #32]
 80052c0:	22ff      	movs	r2, #255	@ 0xff
 80052c2:	4013      	ands	r3, r2
 80052c4:	2baa      	cmp	r3, #170	@ 0xaa
 80052c6:	d006      	beq.n	80052d6 <SystemInit+0x46>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 80052c8:	4b05      	ldr	r3, [pc, #20]	@ (80052e0 <SystemInit+0x50>)
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	4b04      	ldr	r3, [pc, #16]	@ (80052e0 <SystemInit+0x50>)
 80052ce:	2180      	movs	r1, #128	@ 0x80
 80052d0:	02c9      	lsls	r1, r1, #11
 80052d2:	430a      	orrs	r2, r1
 80052d4:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 80052d6:	46c0      	nop			@ (mov r8, r8)
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	e000ed00 	.word	0xe000ed00
 80052e0:	40022000 	.word	0x40022000

080052e4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80052e8:	4b22      	ldr	r3, [pc, #136]	@ (8005374 <MX_USART2_UART_Init+0x90>)
 80052ea:	4a23      	ldr	r2, [pc, #140]	@ (8005378 <MX_USART2_UART_Init+0x94>)
 80052ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 80052ee:	4b21      	ldr	r3, [pc, #132]	@ (8005374 <MX_USART2_UART_Init+0x90>)
 80052f0:	4a22      	ldr	r2, [pc, #136]	@ (800537c <MX_USART2_UART_Init+0x98>)
 80052f2:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80052f4:	4b1f      	ldr	r3, [pc, #124]	@ (8005374 <MX_USART2_UART_Init+0x90>)
 80052f6:	2200      	movs	r2, #0
 80052f8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80052fa:	4b1e      	ldr	r3, [pc, #120]	@ (8005374 <MX_USART2_UART_Init+0x90>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005300:	4b1c      	ldr	r3, [pc, #112]	@ (8005374 <MX_USART2_UART_Init+0x90>)
 8005302:	2200      	movs	r2, #0
 8005304:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005306:	4b1b      	ldr	r3, [pc, #108]	@ (8005374 <MX_USART2_UART_Init+0x90>)
 8005308:	220c      	movs	r2, #12
 800530a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800530c:	4b19      	ldr	r3, [pc, #100]	@ (8005374 <MX_USART2_UART_Init+0x90>)
 800530e:	2200      	movs	r2, #0
 8005310:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005312:	4b18      	ldr	r3, [pc, #96]	@ (8005374 <MX_USART2_UART_Init+0x90>)
 8005314:	2200      	movs	r2, #0
 8005316:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005318:	4b16      	ldr	r3, [pc, #88]	@ (8005374 <MX_USART2_UART_Init+0x90>)
 800531a:	2200      	movs	r2, #0
 800531c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800531e:	4b15      	ldr	r3, [pc, #84]	@ (8005374 <MX_USART2_UART_Init+0x90>)
 8005320:	2200      	movs	r2, #0
 8005322:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005324:	4b13      	ldr	r3, [pc, #76]	@ (8005374 <MX_USART2_UART_Init+0x90>)
 8005326:	2200      	movs	r2, #0
 8005328:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800532a:	4b12      	ldr	r3, [pc, #72]	@ (8005374 <MX_USART2_UART_Init+0x90>)
 800532c:	0018      	movs	r0, r3
 800532e:	f003 f9e7 	bl	8008700 <HAL_UART_Init>
 8005332:	1e03      	subs	r3, r0, #0
 8005334:	d001      	beq.n	800533a <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8005336:	f7fe fa3e 	bl	80037b6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800533a:	4b0e      	ldr	r3, [pc, #56]	@ (8005374 <MX_USART2_UART_Init+0x90>)
 800533c:	2100      	movs	r1, #0
 800533e:	0018      	movs	r0, r3
 8005340:	f003 fe74 	bl	800902c <HAL_UARTEx_SetTxFifoThreshold>
 8005344:	1e03      	subs	r3, r0, #0
 8005346:	d001      	beq.n	800534c <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8005348:	f7fe fa35 	bl	80037b6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800534c:	4b09      	ldr	r3, [pc, #36]	@ (8005374 <MX_USART2_UART_Init+0x90>)
 800534e:	2100      	movs	r1, #0
 8005350:	0018      	movs	r0, r3
 8005352:	f003 feab 	bl	80090ac <HAL_UARTEx_SetRxFifoThreshold>
 8005356:	1e03      	subs	r3, r0, #0
 8005358:	d001      	beq.n	800535e <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 800535a:	f7fe fa2c 	bl	80037b6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800535e:	4b05      	ldr	r3, [pc, #20]	@ (8005374 <MX_USART2_UART_Init+0x90>)
 8005360:	0018      	movs	r0, r3
 8005362:	f003 fe29 	bl	8008fb8 <HAL_UARTEx_DisableFifoMode>
 8005366:	1e03      	subs	r3, r0, #0
 8005368:	d001      	beq.n	800536e <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 800536a:	f7fe fa24 	bl	80037b6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800536e:	46c0      	nop			@ (mov r8, r8)
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	20000184 	.word	0x20000184
 8005378:	40004400 	.word	0x40004400
 800537c:	000f4240 	.word	0x000f4240

08005380 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005380:	b590      	push	{r4, r7, lr}
 8005382:	b09b      	sub	sp, #108	@ 0x6c
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005388:	2354      	movs	r3, #84	@ 0x54
 800538a:	18fb      	adds	r3, r7, r3
 800538c:	0018      	movs	r0, r3
 800538e:	2314      	movs	r3, #20
 8005390:	001a      	movs	r2, r3
 8005392:	2100      	movs	r1, #0
 8005394:	f003 ff2a 	bl	80091ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005398:	2410      	movs	r4, #16
 800539a:	193b      	adds	r3, r7, r4
 800539c:	0018      	movs	r0, r3
 800539e:	2344      	movs	r3, #68	@ 0x44
 80053a0:	001a      	movs	r2, r3
 80053a2:	2100      	movs	r1, #0
 80053a4:	f003 ff22 	bl	80091ec <memset>
  if(uartHandle->Instance==USART2)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a22      	ldr	r2, [pc, #136]	@ (8005438 <HAL_UART_MspInit+0xb8>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d13e      	bne.n	8005430 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80053b2:	193b      	adds	r3, r7, r4
 80053b4:	2202      	movs	r2, #2
 80053b6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80053b8:	193b      	adds	r3, r7, r4
 80053ba:	2200      	movs	r2, #0
 80053bc:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80053be:	193b      	adds	r3, r7, r4
 80053c0:	0018      	movs	r0, r3
 80053c2:	f001 ff45 	bl	8007250 <HAL_RCCEx_PeriphCLKConfig>
 80053c6:	1e03      	subs	r3, r0, #0
 80053c8:	d001      	beq.n	80053ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80053ca:	f7fe f9f4 	bl	80037b6 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80053ce:	4b1b      	ldr	r3, [pc, #108]	@ (800543c <HAL_UART_MspInit+0xbc>)
 80053d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80053d2:	4b1a      	ldr	r3, [pc, #104]	@ (800543c <HAL_UART_MspInit+0xbc>)
 80053d4:	2180      	movs	r1, #128	@ 0x80
 80053d6:	0289      	lsls	r1, r1, #10
 80053d8:	430a      	orrs	r2, r1
 80053da:	659a      	str	r2, [r3, #88]	@ 0x58
 80053dc:	4b17      	ldr	r3, [pc, #92]	@ (800543c <HAL_UART_MspInit+0xbc>)
 80053de:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80053e0:	2380      	movs	r3, #128	@ 0x80
 80053e2:	029b      	lsls	r3, r3, #10
 80053e4:	4013      	ands	r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]
 80053e8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053ea:	4b14      	ldr	r3, [pc, #80]	@ (800543c <HAL_UART_MspInit+0xbc>)
 80053ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80053ee:	4b13      	ldr	r3, [pc, #76]	@ (800543c <HAL_UART_MspInit+0xbc>)
 80053f0:	2101      	movs	r1, #1
 80053f2:	430a      	orrs	r2, r1
 80053f4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80053f6:	4b11      	ldr	r3, [pc, #68]	@ (800543c <HAL_UART_MspInit+0xbc>)
 80053f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053fa:	2201      	movs	r2, #1
 80053fc:	4013      	ands	r3, r2
 80053fe:	60bb      	str	r3, [r7, #8]
 8005400:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005402:	2154      	movs	r1, #84	@ 0x54
 8005404:	187b      	adds	r3, r7, r1
 8005406:	220c      	movs	r2, #12
 8005408:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800540a:	187b      	adds	r3, r7, r1
 800540c:	2202      	movs	r2, #2
 800540e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005410:	187b      	adds	r3, r7, r1
 8005412:	2200      	movs	r2, #0
 8005414:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005416:	187b      	adds	r3, r7, r1
 8005418:	2200      	movs	r2, #0
 800541a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800541c:	187b      	adds	r3, r7, r1
 800541e:	2207      	movs	r2, #7
 8005420:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005422:	187a      	adds	r2, r7, r1
 8005424:	23a0      	movs	r3, #160	@ 0xa0
 8005426:	05db      	lsls	r3, r3, #23
 8005428:	0011      	movs	r1, r2
 800542a:	0018      	movs	r0, r3
 800542c:	f000 fd94 	bl	8005f58 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005430:	46c0      	nop			@ (mov r8, r8)
 8005432:	46bd      	mov	sp, r7
 8005434:	b01b      	add	sp, #108	@ 0x6c
 8005436:	bd90      	pop	{r4, r7, pc}
 8005438:	40004400 	.word	0x40004400
 800543c:	40021000 	.word	0x40021000

08005440 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005440:	480d      	ldr	r0, [pc, #52]	@ (8005478 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005442:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005444:	f7ff ff24 	bl	8005290 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005448:	480c      	ldr	r0, [pc, #48]	@ (800547c <LoopForever+0x6>)
  ldr r1, =_edata
 800544a:	490d      	ldr	r1, [pc, #52]	@ (8005480 <LoopForever+0xa>)
  ldr r2, =_sidata
 800544c:	4a0d      	ldr	r2, [pc, #52]	@ (8005484 <LoopForever+0xe>)
  movs r3, #0
 800544e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005450:	e002      	b.n	8005458 <LoopCopyDataInit>

08005452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005456:	3304      	adds	r3, #4

08005458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800545a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800545c:	d3f9      	bcc.n	8005452 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800545e:	4a0a      	ldr	r2, [pc, #40]	@ (8005488 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005460:	4c0a      	ldr	r4, [pc, #40]	@ (800548c <LoopForever+0x16>)
  movs r3, #0
 8005462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005464:	e001      	b.n	800546a <LoopFillZerobss>

08005466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005468:	3204      	adds	r2, #4

0800546a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800546a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800546c:	d3fb      	bcc.n	8005466 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800546e:	f003 fec5 	bl	80091fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005472:	f7fe f8c1 	bl	80035f8 <main>

08005476 <LoopForever>:

LoopForever:
  b LoopForever
 8005476:	e7fe      	b.n	8005476 <LoopForever>
  ldr   r0, =_estack
 8005478:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800547c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005480:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8005484:	0800987c 	.word	0x0800987c
  ldr r2, =_sbss
 8005488:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800548c:	2000021c 	.word	0x2000021c

08005490 <ADC_COMP1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005490:	e7fe      	b.n	8005490 <ADC_COMP1_2_IRQHandler>

08005492 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b082      	sub	sp, #8
 8005496:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005498:	1dfb      	adds	r3, r7, #7
 800549a:	2200      	movs	r2, #0
 800549c:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800549e:	2003      	movs	r0, #3
 80054a0:	f000 f80e 	bl	80054c0 <HAL_InitTick>
 80054a4:	1e03      	subs	r3, r0, #0
 80054a6:	d003      	beq.n	80054b0 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80054a8:	1dfb      	adds	r3, r7, #7
 80054aa:	2201      	movs	r2, #1
 80054ac:	701a      	strb	r2, [r3, #0]
 80054ae:	e001      	b.n	80054b4 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80054b0:	f7ff feb0 	bl	8005214 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80054b4:	1dfb      	adds	r3, r7, #7
 80054b6:	781b      	ldrb	r3, [r3, #0]
}
 80054b8:	0018      	movs	r0, r3
 80054ba:	46bd      	mov	sp, r7
 80054bc:	b002      	add	sp, #8
 80054be:	bd80      	pop	{r7, pc}

080054c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054c0:	b590      	push	{r4, r7, lr}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80054c8:	230f      	movs	r3, #15
 80054ca:	18fb      	adds	r3, r7, r3
 80054cc:	2200      	movs	r2, #0
 80054ce:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 80054d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005548 <HAL_InitTick+0x88>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d02b      	beq.n	8005530 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80054d8:	4b1c      	ldr	r3, [pc, #112]	@ (800554c <HAL_InitTick+0x8c>)
 80054da:	681c      	ldr	r4, [r3, #0]
 80054dc:	4b1a      	ldr	r3, [pc, #104]	@ (8005548 <HAL_InitTick+0x88>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	0019      	movs	r1, r3
 80054e2:	23fa      	movs	r3, #250	@ 0xfa
 80054e4:	0098      	lsls	r0, r3, #2
 80054e6:	f7fa fe0f 	bl	8000108 <__udivsi3>
 80054ea:	0003      	movs	r3, r0
 80054ec:	0019      	movs	r1, r3
 80054ee:	0020      	movs	r0, r4
 80054f0:	f7fa fe0a 	bl	8000108 <__udivsi3>
 80054f4:	0003      	movs	r3, r0
 80054f6:	0018      	movs	r0, r3
 80054f8:	f000 fd21 	bl	8005f3e <HAL_SYSTICK_Config>
 80054fc:	1e03      	subs	r3, r0, #0
 80054fe:	d112      	bne.n	8005526 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b03      	cmp	r3, #3
 8005504:	d80a      	bhi.n	800551c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005506:	6879      	ldr	r1, [r7, #4]
 8005508:	2301      	movs	r3, #1
 800550a:	425b      	negs	r3, r3
 800550c:	2200      	movs	r2, #0
 800550e:	0018      	movs	r0, r3
 8005510:	f000 fd00 	bl	8005f14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005514:	4b0e      	ldr	r3, [pc, #56]	@ (8005550 <HAL_InitTick+0x90>)
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	601a      	str	r2, [r3, #0]
 800551a:	e00d      	b.n	8005538 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800551c:	230f      	movs	r3, #15
 800551e:	18fb      	adds	r3, r7, r3
 8005520:	2201      	movs	r2, #1
 8005522:	701a      	strb	r2, [r3, #0]
 8005524:	e008      	b.n	8005538 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005526:	230f      	movs	r3, #15
 8005528:	18fb      	adds	r3, r7, r3
 800552a:	2201      	movs	r2, #1
 800552c:	701a      	strb	r2, [r3, #0]
 800552e:	e003      	b.n	8005538 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005530:	230f      	movs	r3, #15
 8005532:	18fb      	adds	r3, r7, r3
 8005534:	2201      	movs	r2, #1
 8005536:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005538:	230f      	movs	r3, #15
 800553a:	18fb      	adds	r3, r7, r3
 800553c:	781b      	ldrb	r3, [r3, #0]
}
 800553e:	0018      	movs	r0, r3
 8005540:	46bd      	mov	sp, r7
 8005542:	b005      	add	sp, #20
 8005544:	bd90      	pop	{r4, r7, pc}
 8005546:	46c0      	nop			@ (mov r8, r8)
 8005548:	2000000c 	.word	0x2000000c
 800554c:	20000004 	.word	0x20000004
 8005550:	20000008 	.word	0x20000008

08005554 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005558:	4b04      	ldr	r3, [pc, #16]	@ (800556c <HAL_IncTick+0x18>)
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	4b04      	ldr	r3, [pc, #16]	@ (8005570 <HAL_IncTick+0x1c>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	18d2      	adds	r2, r2, r3
 8005562:	4b02      	ldr	r3, [pc, #8]	@ (800556c <HAL_IncTick+0x18>)
 8005564:	601a      	str	r2, [r3, #0]
}
 8005566:	46c0      	nop			@ (mov r8, r8)
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	20000218 	.word	0x20000218
 8005570:	2000000c 	.word	0x2000000c

08005574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	af00      	add	r7, sp, #0
  return uwTick;
 8005578:	4b02      	ldr	r3, [pc, #8]	@ (8005584 <HAL_GetTick+0x10>)
 800557a:	681b      	ldr	r3, [r3, #0]
}
 800557c:	0018      	movs	r0, r3
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	46c0      	nop			@ (mov r8, r8)
 8005584:	20000218 	.word	0x20000218

08005588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005590:	f7ff fff0 	bl	8005574 <HAL_GetTick>
 8005594:	0003      	movs	r3, r0
 8005596:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	3301      	adds	r3, #1
 80055a0:	d004      	beq.n	80055ac <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80055a2:	4b09      	ldr	r3, [pc, #36]	@ (80055c8 <HAL_Delay+0x40>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	18d3      	adds	r3, r2, r3
 80055aa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80055ac:	46c0      	nop			@ (mov r8, r8)
 80055ae:	f7ff ffe1 	bl	8005574 <HAL_GetTick>
 80055b2:	0002      	movs	r2, r0
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d8f7      	bhi.n	80055ae <HAL_Delay+0x26>
  {
  }
}
 80055be:	46c0      	nop			@ (mov r8, r8)
 80055c0:	46c0      	nop			@ (mov r8, r8)
 80055c2:	46bd      	mov	sp, r7
 80055c4:	b004      	add	sp, #16
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	2000000c 	.word	0x2000000c

080055cc <LL_ADC_SetCommonPathInternalCh>:
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a05      	ldr	r2, [pc, #20]	@ (80055f0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80055dc:	401a      	ands	r2, r3
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	431a      	orrs	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	601a      	str	r2, [r3, #0]
}
 80055e6:	46c0      	nop			@ (mov r8, r8)
 80055e8:	46bd      	mov	sp, r7
 80055ea:	b002      	add	sp, #8
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	46c0      	nop			@ (mov r8, r8)
 80055f0:	fe3fffff 	.word	0xfe3fffff

080055f4 <LL_ADC_GetCommonPathInternalCh>:
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	23e0      	movs	r3, #224	@ 0xe0
 8005602:	045b      	lsls	r3, r3, #17
 8005604:	4013      	ands	r3, r2
}
 8005606:	0018      	movs	r0, r3
 8005608:	46bd      	mov	sp, r7
 800560a:	b002      	add	sp, #8
 800560c:	bd80      	pop	{r7, pc}

0800560e <LL_ADC_SetSamplingTimeCommonChannels>:
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b084      	sub	sp, #16
 8005612:	af00      	add	r7, sp, #0
 8005614:	60f8      	str	r0, [r7, #12]
 8005616:	60b9      	str	r1, [r7, #8]
 8005618:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	2104      	movs	r1, #4
 8005622:	400a      	ands	r2, r1
 8005624:	2107      	movs	r1, #7
 8005626:	4091      	lsls	r1, r2
 8005628:	000a      	movs	r2, r1
 800562a:	43d2      	mvns	r2, r2
 800562c:	401a      	ands	r2, r3
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	2104      	movs	r1, #4
 8005632:	400b      	ands	r3, r1
 8005634:	6879      	ldr	r1, [r7, #4]
 8005636:	4099      	lsls	r1, r3
 8005638:	000b      	movs	r3, r1
 800563a:	431a      	orrs	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	615a      	str	r2, [r3, #20]
}
 8005640:	46c0      	nop			@ (mov r8, r8)
 8005642:	46bd      	mov	sp, r7
 8005644:	b004      	add	sp, #16
 8005646:	bd80      	pop	{r7, pc}

08005648 <LL_ADC_GetSamplingTimeCommonChannels>:
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	2104      	movs	r1, #4
 800565a:	400a      	ands	r2, r1
 800565c:	2107      	movs	r1, #7
 800565e:	4091      	lsls	r1, r2
 8005660:	000a      	movs	r2, r1
 8005662:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	2104      	movs	r1, #4
 8005668:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800566a:	40da      	lsrs	r2, r3
 800566c:	0013      	movs	r3, r2
}
 800566e:	0018      	movs	r0, r3
 8005670:	46bd      	mov	sp, r7
 8005672:	b002      	add	sp, #8
 8005674:	bd80      	pop	{r7, pc}

08005676 <LL_ADC_REG_SetSequencerRanks>:
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b084      	sub	sp, #16
 800567a:	af00      	add	r7, sp, #0
 800567c:	60f8      	str	r0, [r7, #12]
 800567e:	60b9      	str	r1, [r7, #8]
 8005680:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CHSELR,
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	211f      	movs	r1, #31
 800568a:	400a      	ands	r2, r1
 800568c:	210f      	movs	r1, #15
 800568e:	4091      	lsls	r1, r2
 8005690:	000a      	movs	r2, r1
 8005692:	43d2      	mvns	r2, r2
 8005694:	401a      	ands	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	0e9b      	lsrs	r3, r3, #26
 800569a:	210f      	movs	r1, #15
 800569c:	4019      	ands	r1, r3
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	201f      	movs	r0, #31
 80056a2:	4003      	ands	r3, r0
 80056a4:	4099      	lsls	r1, r3
 80056a6:	000b      	movs	r3, r1
 80056a8:	431a      	orrs	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80056ae:	46c0      	nop			@ (mov r8, r8)
 80056b0:	46bd      	mov	sp, r7
 80056b2:	b004      	add	sp, #16
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <LL_ADC_REG_SetSequencerChAdd>:
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b082      	sub	sp, #8
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
 80056be:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	025b      	lsls	r3, r3, #9
 80056c8:	0a5b      	lsrs	r3, r3, #9
 80056ca:	431a      	orrs	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80056d0:	46c0      	nop			@ (mov r8, r8)
 80056d2:	46bd      	mov	sp, r7
 80056d4:	b002      	add	sp, #8
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <LL_ADC_REG_SetSequencerChRem>:
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	0252      	lsls	r2, r2, #9
 80056ea:	0a52      	lsrs	r2, r2, #9
 80056ec:	43d2      	mvns	r2, r2
 80056ee:	401a      	ands	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80056f4:	46c0      	nop			@ (mov r8, r8)
 80056f6:	46bd      	mov	sp, r7
 80056f8:	b002      	add	sp, #8
 80056fa:	bd80      	pop	{r7, pc}

080056fc <LL_ADC_SetChannelSamplingTime>:
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	0212      	lsls	r2, r2, #8
 8005710:	43d2      	mvns	r2, r2
 8005712:	401a      	ands	r2, r3
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	021b      	lsls	r3, r3, #8
 8005718:	6879      	ldr	r1, [r7, #4]
 800571a:	400b      	ands	r3, r1
 800571c:	4904      	ldr	r1, [pc, #16]	@ (8005730 <LL_ADC_SetChannelSamplingTime+0x34>)
 800571e:	400b      	ands	r3, r1
 8005720:	431a      	orrs	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	615a      	str	r2, [r3, #20]
}
 8005726:	46c0      	nop			@ (mov r8, r8)
 8005728:	46bd      	mov	sp, r7
 800572a:	b004      	add	sp, #16
 800572c:	bd80      	pop	{r7, pc}
 800572e:	46c0      	nop			@ (mov r8, r8)
 8005730:	7fffff00 	.word	0x7fffff00

08005734 <LL_ADC_EnableInternalRegulator>:
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	4a05      	ldr	r2, [pc, #20]	@ (8005758 <LL_ADC_EnableInternalRegulator+0x24>)
 8005742:	4013      	ands	r3, r2
 8005744:	2280      	movs	r2, #128	@ 0x80
 8005746:	0552      	lsls	r2, r2, #21
 8005748:	431a      	orrs	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	609a      	str	r2, [r3, #8]
}
 800574e:	46c0      	nop			@ (mov r8, r8)
 8005750:	46bd      	mov	sp, r7
 8005752:	b002      	add	sp, #8
 8005754:	bd80      	pop	{r7, pc}
 8005756:	46c0      	nop			@ (mov r8, r8)
 8005758:	6fffffe8 	.word	0x6fffffe8

0800575c <LL_ADC_IsInternalRegulatorEnabled>:
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689a      	ldr	r2, [r3, #8]
 8005768:	2380      	movs	r3, #128	@ 0x80
 800576a:	055b      	lsls	r3, r3, #21
 800576c:	401a      	ands	r2, r3
 800576e:	2380      	movs	r3, #128	@ 0x80
 8005770:	055b      	lsls	r3, r3, #21
 8005772:	429a      	cmp	r2, r3
 8005774:	d101      	bne.n	800577a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8005776:	2301      	movs	r3, #1
 8005778:	e000      	b.n	800577c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800577a:	2300      	movs	r3, #0
}
 800577c:	0018      	movs	r0, r3
 800577e:	46bd      	mov	sp, r7
 8005780:	b002      	add	sp, #8
 8005782:	bd80      	pop	{r7, pc}

08005784 <LL_ADC_IsEnabled>:
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	2201      	movs	r2, #1
 8005792:	4013      	ands	r3, r2
 8005794:	2b01      	cmp	r3, #1
 8005796:	d101      	bne.n	800579c <LL_ADC_IsEnabled+0x18>
 8005798:	2301      	movs	r3, #1
 800579a:	e000      	b.n	800579e <LL_ADC_IsEnabled+0x1a>
 800579c:	2300      	movs	r3, #0
}
 800579e:	0018      	movs	r0, r3
 80057a0:	46bd      	mov	sp, r7
 80057a2:	b002      	add	sp, #8
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <LL_ADC_REG_IsConversionOngoing>:
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b082      	sub	sp, #8
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	2204      	movs	r2, #4
 80057b4:	4013      	ands	r3, r2
 80057b6:	2b04      	cmp	r3, #4
 80057b8:	d101      	bne.n	80057be <LL_ADC_REG_IsConversionOngoing+0x18>
 80057ba:	2301      	movs	r3, #1
 80057bc:	e000      	b.n	80057c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80057be:	2300      	movs	r3, #0
}
 80057c0:	0018      	movs	r0, r3
 80057c2:	46bd      	mov	sp, r7
 80057c4:	b002      	add	sp, #8
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b088      	sub	sp, #32
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80057d0:	231f      	movs	r3, #31
 80057d2:	18fb      	adds	r3, r7, r3
 80057d4:	2200      	movs	r2, #0
 80057d6:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80057d8:	2300      	movs	r3, #0
 80057da:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80057dc:	2300      	movs	r3, #0
 80057de:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80057e0:	2300      	movs	r3, #0
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d101      	bne.n	80057ee <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e17f      	b.n	8005aee <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10a      	bne.n	800580c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	0018      	movs	r0, r3
 80057fa:	f7fd fc09 	bl	8003010 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2254      	movs	r2, #84	@ 0x54
 8005808:	2100      	movs	r1, #0
 800580a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	0018      	movs	r0, r3
 8005812:	f7ff ffa3 	bl	800575c <LL_ADC_IsInternalRegulatorEnabled>
 8005816:	1e03      	subs	r3, r0, #0
 8005818:	d115      	bne.n	8005846 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	0018      	movs	r0, r3
 8005820:	f7ff ff88 	bl	8005734 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005824:	4bb4      	ldr	r3, [pc, #720]	@ (8005af8 <HAL_ADC_Init+0x330>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	49b4      	ldr	r1, [pc, #720]	@ (8005afc <HAL_ADC_Init+0x334>)
 800582a:	0018      	movs	r0, r3
 800582c:	f7fa fc6c 	bl	8000108 <__udivsi3>
 8005830:	0003      	movs	r3, r0
 8005832:	3301      	adds	r3, #1
 8005834:	005b      	lsls	r3, r3, #1
 8005836:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005838:	e002      	b.n	8005840 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	3b01      	subs	r3, #1
 800583e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1f9      	bne.n	800583a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	0018      	movs	r0, r3
 800584c:	f7ff ff86 	bl	800575c <LL_ADC_IsInternalRegulatorEnabled>
 8005850:	1e03      	subs	r3, r0, #0
 8005852:	d10f      	bne.n	8005874 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005858:	2210      	movs	r2, #16
 800585a:	431a      	orrs	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005864:	2201      	movs	r2, #1
 8005866:	431a      	orrs	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800586c:	231f      	movs	r3, #31
 800586e:	18fb      	adds	r3, r7, r3
 8005870:	2201      	movs	r2, #1
 8005872:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	0018      	movs	r0, r3
 800587a:	f7ff ff94 	bl	80057a6 <LL_ADC_REG_IsConversionOngoing>
 800587e:	0003      	movs	r3, r0
 8005880:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005886:	2210      	movs	r2, #16
 8005888:	4013      	ands	r3, r2
 800588a:	d000      	beq.n	800588e <HAL_ADC_Init+0xc6>
 800588c:	e122      	b.n	8005ad4 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d000      	beq.n	8005896 <HAL_ADC_Init+0xce>
 8005894:	e11e      	b.n	8005ad4 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800589a:	4a99      	ldr	r2, [pc, #612]	@ (8005b00 <HAL_ADC_Init+0x338>)
 800589c:	4013      	ands	r3, r2
 800589e:	2202      	movs	r2, #2
 80058a0:	431a      	orrs	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	0018      	movs	r0, r3
 80058ac:	f7ff ff6a 	bl	8005784 <LL_ADC_IsEnabled>
 80058b0:	1e03      	subs	r3, r0, #0
 80058b2:	d000      	beq.n	80058b6 <HAL_ADC_Init+0xee>
 80058b4:	e0ad      	b.n	8005a12 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	7e1b      	ldrb	r3, [r3, #24]
 80058be:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80058c0:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	7e5b      	ldrb	r3, [r3, #25]
 80058c6:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80058c8:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	7e9b      	ldrb	r3, [r3, #26]
 80058ce:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80058d0:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d002      	beq.n	80058e0 <HAL_ADC_Init+0x118>
 80058da:	2380      	movs	r3, #128	@ 0x80
 80058dc:	015b      	lsls	r3, r3, #5
 80058de:	e000      	b.n	80058e2 <HAL_ADC_Init+0x11a>
 80058e0:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80058e2:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80058e8:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	da04      	bge.n	80058fc <HAL_ADC_Init+0x134>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	005b      	lsls	r3, r3, #1
 80058f8:	085b      	lsrs	r3, r3, #1
 80058fa:	e001      	b.n	8005900 <HAL_ADC_Init+0x138>
 80058fc:	2380      	movs	r3, #128	@ 0x80
 80058fe:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8005900:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	212c      	movs	r1, #44	@ 0x2c
 8005906:	5c5b      	ldrb	r3, [r3, r1]
 8005908:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800590a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	4313      	orrs	r3, r2
 8005910:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2220      	movs	r2, #32
 8005916:	5c9b      	ldrb	r3, [r3, r2]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d115      	bne.n	8005948 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	7e9b      	ldrb	r3, [r3, #26]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d105      	bne.n	8005930 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	2280      	movs	r2, #128	@ 0x80
 8005928:	0252      	lsls	r2, r2, #9
 800592a:	4313      	orrs	r3, r2
 800592c:	61bb      	str	r3, [r7, #24]
 800592e:	e00b      	b.n	8005948 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005934:	2220      	movs	r2, #32
 8005936:	431a      	orrs	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005940:	2201      	movs	r2, #1
 8005942:	431a      	orrs	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00a      	beq.n	8005966 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005954:	23e0      	movs	r3, #224	@ 0xe0
 8005956:	005b      	lsls	r3, r3, #1
 8005958:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800595e:	4313      	orrs	r3, r2
 8005960:	69ba      	ldr	r2, [r7, #24]
 8005962:	4313      	orrs	r3, r2
 8005964:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	4a65      	ldr	r2, [pc, #404]	@ (8005b04 <HAL_ADC_Init+0x33c>)
 800596e:	4013      	ands	r3, r2
 8005970:	0019      	movs	r1, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	69ba      	ldr	r2, [r7, #24]
 8005978:	430a      	orrs	r2, r1
 800597a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	0f9b      	lsrs	r3, r3, #30
 8005982:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005988:	4313      	orrs	r3, r2
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	4313      	orrs	r3, r2
 800598e:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	223c      	movs	r2, #60	@ 0x3c
 8005994:	5c9b      	ldrb	r3, [r3, r2]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d111      	bne.n	80059be <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	0f9b      	lsrs	r3, r3, #30
 80059a0:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80059a6:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80059ac:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80059b2:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	2201      	movs	r2, #1
 80059ba:	4313      	orrs	r3, r2
 80059bc:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	4a50      	ldr	r2, [pc, #320]	@ (8005b08 <HAL_ADC_Init+0x340>)
 80059c6:	4013      	ands	r3, r2
 80059c8:	0019      	movs	r1, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	430a      	orrs	r2, r1
 80059d2:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	23c0      	movs	r3, #192	@ 0xc0
 80059da:	061b      	lsls	r3, r3, #24
 80059dc:	429a      	cmp	r2, r3
 80059de:	d018      	beq.n	8005a12 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80059e4:	2380      	movs	r3, #128	@ 0x80
 80059e6:	05db      	lsls	r3, r3, #23
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d012      	beq.n	8005a12 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80059f0:	2380      	movs	r3, #128	@ 0x80
 80059f2:	061b      	lsls	r3, r3, #24
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d00c      	beq.n	8005a12 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80059f8:	4b44      	ldr	r3, [pc, #272]	@ (8005b0c <HAL_ADC_Init+0x344>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a44      	ldr	r2, [pc, #272]	@ (8005b10 <HAL_ADC_Init+0x348>)
 80059fe:	4013      	ands	r3, r2
 8005a00:	0019      	movs	r1, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685a      	ldr	r2, [r3, #4]
 8005a06:	23f0      	movs	r3, #240	@ 0xf0
 8005a08:	039b      	lsls	r3, r3, #14
 8005a0a:	401a      	ands	r2, r3
 8005a0c:	4b3f      	ldr	r3, [pc, #252]	@ (8005b0c <HAL_ADC_Init+0x344>)
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6818      	ldr	r0, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a1a:	001a      	movs	r2, r3
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	f7ff fdf6 	bl	800560e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6818      	ldr	r0, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a2a:	493a      	ldr	r1, [pc, #232]	@ (8005b14 <HAL_ADC_Init+0x34c>)
 8005a2c:	001a      	movs	r2, r3
 8005a2e:	f7ff fdee 	bl	800560e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d109      	bne.n	8005a4e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2110      	movs	r1, #16
 8005a46:	4249      	negs	r1, r1
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a4c:	e018      	b.n	8005a80 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	691a      	ldr	r2, [r3, #16]
 8005a52:	2380      	movs	r3, #128	@ 0x80
 8005a54:	039b      	lsls	r3, r3, #14
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d112      	bne.n	8005a80 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	3b01      	subs	r3, #1
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	221c      	movs	r2, #28
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	2210      	movs	r2, #16
 8005a6e:	4252      	negs	r2, r2
 8005a70:	409a      	lsls	r2, r3
 8005a72:	0011      	movs	r1, r2
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2100      	movs	r1, #0
 8005a86:	0018      	movs	r0, r3
 8005a88:	f7ff fdde 	bl	8005648 <LL_ADC_GetSamplingTimeCommonChannels>
 8005a8c:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d10b      	bne.n	8005aae <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aa0:	2203      	movs	r2, #3
 8005aa2:	4393      	bics	r3, r2
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	431a      	orrs	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005aac:	e01c      	b.n	8005ae8 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ab2:	2212      	movs	r2, #18
 8005ab4:	4393      	bics	r3, r2
 8005ab6:	2210      	movs	r2, #16
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	431a      	orrs	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8005aca:	231f      	movs	r3, #31
 8005acc:	18fb      	adds	r3, r7, r3
 8005ace:	2201      	movs	r2, #1
 8005ad0:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005ad2:	e009      	b.n	8005ae8 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ad8:	2210      	movs	r2, #16
 8005ada:	431a      	orrs	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005ae0:	231f      	movs	r3, #31
 8005ae2:	18fb      	adds	r3, r7, r3
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8005ae8:	231f      	movs	r3, #31
 8005aea:	18fb      	adds	r3, r7, r3
 8005aec:	781b      	ldrb	r3, [r3, #0]
}
 8005aee:	0018      	movs	r0, r3
 8005af0:	46bd      	mov	sp, r7
 8005af2:	b008      	add	sp, #32
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	46c0      	nop			@ (mov r8, r8)
 8005af8:	20000004 	.word	0x20000004
 8005afc:	00030d40 	.word	0x00030d40
 8005b00:	fffffefd 	.word	0xfffffefd
 8005b04:	ffde0201 	.word	0xffde0201
 8005b08:	1ffffc02 	.word	0x1ffffc02
 8005b0c:	40012708 	.word	0x40012708
 8005b10:	ffc3ffff 	.word	0xffc3ffff
 8005b14:	7fffff04 	.word	0x7fffff04

08005b18 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005b18:	b590      	push	{r4, r7, lr}
 8005b1a:	b08b      	sub	sp, #44	@ 0x2c
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b22:	2327      	movs	r3, #39	@ 0x27
 8005b24:	18fb      	adds	r3, r7, r3
 8005b26:	2200      	movs	r2, #0
 8005b28:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2254      	movs	r2, #84	@ 0x54
 8005b32:	5c9b      	ldrb	r3, [r3, r2]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d101      	bne.n	8005b3c <HAL_ADC_ConfigChannel+0x24>
 8005b38:	2302      	movs	r3, #2
 8005b3a:	e141      	b.n	8005dc0 <HAL_ADC_ConfigChannel+0x2a8>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2254      	movs	r2, #84	@ 0x54
 8005b40:	2101      	movs	r1, #1
 8005b42:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	0018      	movs	r0, r3
 8005b4a:	f7ff fe2c 	bl	80057a6 <LL_ADC_REG_IsConversionOngoing>
 8005b4e:	1e03      	subs	r3, r0, #0
 8005b50:	d000      	beq.n	8005b54 <HAL_ADC_ConfigChannel+0x3c>
 8005b52:	e124      	b.n	8005d9e <HAL_ADC_ConfigChannel+0x286>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d100      	bne.n	8005b5e <HAL_ADC_ConfigChannel+0x46>
 8005b5c:	e0d8      	b.n	8005d10 <HAL_ADC_ConfigChannel+0x1f8>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691a      	ldr	r2, [r3, #16]
 8005b62:	2380      	movs	r3, #128	@ 0x80
 8005b64:	061b      	lsls	r3, r3, #24
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d004      	beq.n	8005b74 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005b6e:	4a96      	ldr	r2, [pc, #600]	@ (8005dc8 <HAL_ADC_ConfigChannel+0x2b0>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d108      	bne.n	8005b86 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	0019      	movs	r1, r3
 8005b7e:	0010      	movs	r0, r2
 8005b80:	f7ff fd99 	bl	80056b6 <LL_ADC_REG_SetSequencerChAdd>
 8005b84:	e060      	b.n	8005c48 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	211f      	movs	r1, #31
 8005b90:	400b      	ands	r3, r1
 8005b92:	210f      	movs	r1, #15
 8005b94:	4099      	lsls	r1, r3
 8005b96:	000b      	movs	r3, r1
 8005b98:	43db      	mvns	r3, r3
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	001c      	movs	r4, r3
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	025b      	lsls	r3, r3, #9
 8005ba4:	0a5b      	lsrs	r3, r3, #9
 8005ba6:	d105      	bne.n	8005bb4 <HAL_ADC_ConfigChannel+0x9c>
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	0e9b      	lsrs	r3, r3, #26
 8005bae:	221f      	movs	r2, #31
 8005bb0:	401a      	ands	r2, r3
 8005bb2:	e02e      	b.n	8005c12 <HAL_ADC_ConfigChannel+0xfa>
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8005bba:	231f      	movs	r3, #31
 8005bbc:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	085b      	lsrs	r3, r3, #1
 8005bc6:	61bb      	str	r3, [r7, #24]
 8005bc8:	e00e      	b.n	8005be8 <HAL_ADC_ConfigChannel+0xd0>
    result <<= 1U;
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	005b      	lsls	r3, r3, #1
 8005bce:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	613b      	str	r3, [r7, #16]
    s--;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	3b01      	subs	r3, #1
 8005be0:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	085b      	lsrs	r3, r3, #1
 8005be6:	61bb      	str	r3, [r7, #24]
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1ed      	bne.n	8005bca <HAL_ADC_ConfigChannel+0xb2>
  result <<= s;                        /* shift when v's highest bits are zero */
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	409a      	lsls	r2, r3
 8005bf4:	0013      	movs	r3, r2
 8005bf6:	613b      	str	r3, [r7, #16]
  return result;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d101      	bne.n	8005c06 <HAL_ADC_ConfigChannel+0xee>
    return 32U;
 8005c02:	2320      	movs	r3, #32
 8005c04:	e004      	b.n	8005c10 <HAL_ADC_ConfigChannel+0xf8>
  return __builtin_clz(value);
 8005c06:	69f8      	ldr	r0, [r7, #28]
 8005c08:	f7fa fc32 	bl	8000470 <__clzsi2>
 8005c0c:	0003      	movs	r3, r0
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	001a      	movs	r2, r3
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	211f      	movs	r1, #31
 8005c18:	400b      	ands	r3, r1
 8005c1a:	409a      	lsls	r2, r3
 8005c1c:	0013      	movs	r3, r2
 8005c1e:	0022      	movs	r2, r4
 8005c20:	431a      	orrs	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	089b      	lsrs	r3, r3, #2
 8005c2c:	1c5a      	adds	r2, r3, #1
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d808      	bhi.n	8005c48 <HAL_ADC_ConfigChannel+0x130>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6818      	ldr	r0, [r3, #0]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	6859      	ldr	r1, [r3, #4]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	001a      	movs	r2, r3
 8005c44:	f7ff fd17 	bl	8005676 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6818      	ldr	r0, [r3, #0]
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	6819      	ldr	r1, [r3, #0]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	001a      	movs	r2, r3
 8005c56:	f7ff fd51 	bl	80056fc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	db00      	blt.n	8005c64 <HAL_ADC_ConfigChannel+0x14c>
 8005c62:	e0a6      	b.n	8005db2 <HAL_ADC_ConfigChannel+0x29a>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005c64:	4b59      	ldr	r3, [pc, #356]	@ (8005dcc <HAL_ADC_ConfigChannel+0x2b4>)
 8005c66:	0018      	movs	r0, r3
 8005c68:	f7ff fcc4 	bl	80055f4 <LL_ADC_GetCommonPathInternalCh>
 8005c6c:	0003      	movs	r3, r0
 8005c6e:	623b      	str	r3, [r7, #32]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a56      	ldr	r2, [pc, #344]	@ (8005dd0 <HAL_ADC_ConfigChannel+0x2b8>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d122      	bne.n	8005cc0 <HAL_ADC_ConfigChannel+0x1a8>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005c7a:	6a3a      	ldr	r2, [r7, #32]
 8005c7c:	2380      	movs	r3, #128	@ 0x80
 8005c7e:	041b      	lsls	r3, r3, #16
 8005c80:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005c82:	d11d      	bne.n	8005cc0 <HAL_ADC_ConfigChannel+0x1a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005c84:	6a3b      	ldr	r3, [r7, #32]
 8005c86:	2280      	movs	r2, #128	@ 0x80
 8005c88:	0412      	lsls	r2, r2, #16
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	4a4f      	ldr	r2, [pc, #316]	@ (8005dcc <HAL_ADC_ConfigChannel+0x2b4>)
 8005c8e:	0019      	movs	r1, r3
 8005c90:	0010      	movs	r0, r2
 8005c92:	f7ff fc9b 	bl	80055cc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005c96:	4b4f      	ldr	r3, [pc, #316]	@ (8005dd4 <HAL_ADC_ConfigChannel+0x2bc>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	494f      	ldr	r1, [pc, #316]	@ (8005dd8 <HAL_ADC_ConfigChannel+0x2c0>)
 8005c9c:	0018      	movs	r0, r3
 8005c9e:	f7fa fa33 	bl	8000108 <__udivsi3>
 8005ca2:	0003      	movs	r3, r0
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	0013      	movs	r3, r2
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	189b      	adds	r3, r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005cb0:	e002      	b.n	8005cb8 <HAL_ADC_ConfigChannel+0x1a0>
          {
            wait_loop_index--;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1f9      	bne.n	8005cb2 <HAL_ADC_ConfigChannel+0x19a>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005cbe:	e078      	b.n	8005db2 <HAL_ADC_ConfigChannel+0x29a>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a45      	ldr	r2, [pc, #276]	@ (8005ddc <HAL_ADC_ConfigChannel+0x2c4>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d10e      	bne.n	8005ce8 <HAL_ADC_ConfigChannel+0x1d0>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005cca:	6a3a      	ldr	r2, [r7, #32]
 8005ccc:	2380      	movs	r3, #128	@ 0x80
 8005cce:	045b      	lsls	r3, r3, #17
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	d109      	bne.n	8005ce8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005cd4:	6a3b      	ldr	r3, [r7, #32]
 8005cd6:	2280      	movs	r2, #128	@ 0x80
 8005cd8:	0452      	lsls	r2, r2, #17
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	4a3b      	ldr	r2, [pc, #236]	@ (8005dcc <HAL_ADC_ConfigChannel+0x2b4>)
 8005cde:	0019      	movs	r1, r3
 8005ce0:	0010      	movs	r0, r2
 8005ce2:	f7ff fc73 	bl	80055cc <LL_ADC_SetCommonPathInternalCh>
 8005ce6:	e064      	b.n	8005db2 <HAL_ADC_ConfigChannel+0x29a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a3c      	ldr	r2, [pc, #240]	@ (8005de0 <HAL_ADC_ConfigChannel+0x2c8>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d15f      	bne.n	8005db2 <HAL_ADC_ConfigChannel+0x29a>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005cf2:	6a3a      	ldr	r2, [r7, #32]
 8005cf4:	2380      	movs	r3, #128	@ 0x80
 8005cf6:	03db      	lsls	r3, r3, #15
 8005cf8:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005cfa:	d15a      	bne.n	8005db2 <HAL_ADC_ConfigChannel+0x29a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	2280      	movs	r2, #128	@ 0x80
 8005d00:	03d2      	lsls	r2, r2, #15
 8005d02:	4313      	orrs	r3, r2
 8005d04:	4a31      	ldr	r2, [pc, #196]	@ (8005dcc <HAL_ADC_ConfigChannel+0x2b4>)
 8005d06:	0019      	movs	r1, r3
 8005d08:	0010      	movs	r0, r2
 8005d0a:	f7ff fc5f 	bl	80055cc <LL_ADC_SetCommonPathInternalCh>
 8005d0e:	e050      	b.n	8005db2 <HAL_ADC_ConfigChannel+0x29a>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	691a      	ldr	r2, [r3, #16]
 8005d14:	2380      	movs	r3, #128	@ 0x80
 8005d16:	061b      	lsls	r3, r3, #24
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d004      	beq.n	8005d26 <HAL_ADC_ConfigChannel+0x20e>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005d20:	4a29      	ldr	r2, [pc, #164]	@ (8005dc8 <HAL_ADC_ConfigChannel+0x2b0>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d107      	bne.n	8005d36 <HAL_ADC_ConfigChannel+0x21e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	0019      	movs	r1, r3
 8005d30:	0010      	movs	r0, r2
 8005d32:	f7ff fcd1 	bl	80056d8 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	da39      	bge.n	8005db2 <HAL_ADC_ConfigChannel+0x29a>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d3e:	4b23      	ldr	r3, [pc, #140]	@ (8005dcc <HAL_ADC_ConfigChannel+0x2b4>)
 8005d40:	0018      	movs	r0, r3
 8005d42:	f7ff fc57 	bl	80055f4 <LL_ADC_GetCommonPathInternalCh>
 8005d46:	0003      	movs	r3, r0
 8005d48:	623b      	str	r3, [r7, #32]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a20      	ldr	r2, [pc, #128]	@ (8005dd0 <HAL_ADC_ConfigChannel+0x2b8>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d108      	bne.n	8005d66 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005d54:	6a3b      	ldr	r3, [r7, #32]
 8005d56:	4a23      	ldr	r2, [pc, #140]	@ (8005de4 <HAL_ADC_ConfigChannel+0x2cc>)
 8005d58:	4013      	ands	r3, r2
 8005d5a:	4a1c      	ldr	r2, [pc, #112]	@ (8005dcc <HAL_ADC_ConfigChannel+0x2b4>)
 8005d5c:	0019      	movs	r1, r3
 8005d5e:	0010      	movs	r0, r2
 8005d60:	f7ff fc34 	bl	80055cc <LL_ADC_SetCommonPathInternalCh>
 8005d64:	e025      	b.n	8005db2 <HAL_ADC_ConfigChannel+0x29a>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8005ddc <HAL_ADC_ConfigChannel+0x2c4>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d108      	bne.n	8005d82 <HAL_ADC_ConfigChannel+0x26a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005d70:	6a3b      	ldr	r3, [r7, #32]
 8005d72:	4a1d      	ldr	r2, [pc, #116]	@ (8005de8 <HAL_ADC_ConfigChannel+0x2d0>)
 8005d74:	4013      	ands	r3, r2
 8005d76:	4a15      	ldr	r2, [pc, #84]	@ (8005dcc <HAL_ADC_ConfigChannel+0x2b4>)
 8005d78:	0019      	movs	r1, r3
 8005d7a:	0010      	movs	r0, r2
 8005d7c:	f7ff fc26 	bl	80055cc <LL_ADC_SetCommonPathInternalCh>
 8005d80:	e017      	b.n	8005db2 <HAL_ADC_ConfigChannel+0x29a>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a16      	ldr	r2, [pc, #88]	@ (8005de0 <HAL_ADC_ConfigChannel+0x2c8>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d112      	bne.n	8005db2 <HAL_ADC_ConfigChannel+0x29a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005d8c:	6a3b      	ldr	r3, [r7, #32]
 8005d8e:	4a17      	ldr	r2, [pc, #92]	@ (8005dec <HAL_ADC_ConfigChannel+0x2d4>)
 8005d90:	4013      	ands	r3, r2
 8005d92:	4a0e      	ldr	r2, [pc, #56]	@ (8005dcc <HAL_ADC_ConfigChannel+0x2b4>)
 8005d94:	0019      	movs	r1, r3
 8005d96:	0010      	movs	r0, r2
 8005d98:	f7ff fc18 	bl	80055cc <LL_ADC_SetCommonPathInternalCh>
 8005d9c:	e009      	b.n	8005db2 <HAL_ADC_ConfigChannel+0x29a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005da2:	2220      	movs	r2, #32
 8005da4:	431a      	orrs	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005daa:	2327      	movs	r3, #39	@ 0x27
 8005dac:	18fb      	adds	r3, r7, r3
 8005dae:	2201      	movs	r2, #1
 8005db0:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2254      	movs	r2, #84	@ 0x54
 8005db6:	2100      	movs	r1, #0
 8005db8:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8005dba:	2327      	movs	r3, #39	@ 0x27
 8005dbc:	18fb      	adds	r3, r7, r3
 8005dbe:	781b      	ldrb	r3, [r3, #0]
}
 8005dc0:	0018      	movs	r0, r3
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	b00b      	add	sp, #44	@ 0x2c
 8005dc6:	bd90      	pop	{r4, r7, pc}
 8005dc8:	80000004 	.word	0x80000004
 8005dcc:	40012708 	.word	0x40012708
 8005dd0:	ac000800 	.word	0xac000800
 8005dd4:	20000004 	.word	0x20000004
 8005dd8:	00030d40 	.word	0x00030d40
 8005ddc:	b4002000 	.word	0xb4002000
 8005de0:	b0001000 	.word	0xb0001000
 8005de4:	ff7fffff 	.word	0xff7fffff
 8005de8:	feffffff 	.word	0xfeffffff
 8005dec:	ffbfffff 	.word	0xffbfffff

08005df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005df0:	b590      	push	{r4, r7, lr}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	0002      	movs	r2, r0
 8005df8:	6039      	str	r1, [r7, #0]
 8005dfa:	1dfb      	adds	r3, r7, #7
 8005dfc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005dfe:	1dfb      	adds	r3, r7, #7
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e04:	d828      	bhi.n	8005e58 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005e06:	4a2f      	ldr	r2, [pc, #188]	@ (8005ec4 <__NVIC_SetPriority+0xd4>)
 8005e08:	1dfb      	adds	r3, r7, #7
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	b25b      	sxtb	r3, r3
 8005e0e:	089b      	lsrs	r3, r3, #2
 8005e10:	33c0      	adds	r3, #192	@ 0xc0
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	589b      	ldr	r3, [r3, r2]
 8005e16:	1dfa      	adds	r2, r7, #7
 8005e18:	7812      	ldrb	r2, [r2, #0]
 8005e1a:	0011      	movs	r1, r2
 8005e1c:	2203      	movs	r2, #3
 8005e1e:	400a      	ands	r2, r1
 8005e20:	00d2      	lsls	r2, r2, #3
 8005e22:	21ff      	movs	r1, #255	@ 0xff
 8005e24:	4091      	lsls	r1, r2
 8005e26:	000a      	movs	r2, r1
 8005e28:	43d2      	mvns	r2, r2
 8005e2a:	401a      	ands	r2, r3
 8005e2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	019b      	lsls	r3, r3, #6
 8005e32:	22ff      	movs	r2, #255	@ 0xff
 8005e34:	401a      	ands	r2, r3
 8005e36:	1dfb      	adds	r3, r7, #7
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	0018      	movs	r0, r3
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	4003      	ands	r3, r0
 8005e40:	00db      	lsls	r3, r3, #3
 8005e42:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005e44:	481f      	ldr	r0, [pc, #124]	@ (8005ec4 <__NVIC_SetPriority+0xd4>)
 8005e46:	1dfb      	adds	r3, r7, #7
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	b25b      	sxtb	r3, r3
 8005e4c:	089b      	lsrs	r3, r3, #2
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	33c0      	adds	r3, #192	@ 0xc0
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005e56:	e031      	b.n	8005ebc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005e58:	4a1b      	ldr	r2, [pc, #108]	@ (8005ec8 <__NVIC_SetPriority+0xd8>)
 8005e5a:	1dfb      	adds	r3, r7, #7
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	0019      	movs	r1, r3
 8005e60:	230f      	movs	r3, #15
 8005e62:	400b      	ands	r3, r1
 8005e64:	3b08      	subs	r3, #8
 8005e66:	089b      	lsrs	r3, r3, #2
 8005e68:	3306      	adds	r3, #6
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	18d3      	adds	r3, r2, r3
 8005e6e:	3304      	adds	r3, #4
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	1dfa      	adds	r2, r7, #7
 8005e74:	7812      	ldrb	r2, [r2, #0]
 8005e76:	0011      	movs	r1, r2
 8005e78:	2203      	movs	r2, #3
 8005e7a:	400a      	ands	r2, r1
 8005e7c:	00d2      	lsls	r2, r2, #3
 8005e7e:	21ff      	movs	r1, #255	@ 0xff
 8005e80:	4091      	lsls	r1, r2
 8005e82:	000a      	movs	r2, r1
 8005e84:	43d2      	mvns	r2, r2
 8005e86:	401a      	ands	r2, r3
 8005e88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	019b      	lsls	r3, r3, #6
 8005e8e:	22ff      	movs	r2, #255	@ 0xff
 8005e90:	401a      	ands	r2, r3
 8005e92:	1dfb      	adds	r3, r7, #7
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	0018      	movs	r0, r3
 8005e98:	2303      	movs	r3, #3
 8005e9a:	4003      	ands	r3, r0
 8005e9c:	00db      	lsls	r3, r3, #3
 8005e9e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005ea0:	4809      	ldr	r0, [pc, #36]	@ (8005ec8 <__NVIC_SetPriority+0xd8>)
 8005ea2:	1dfb      	adds	r3, r7, #7
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	001c      	movs	r4, r3
 8005ea8:	230f      	movs	r3, #15
 8005eaa:	4023      	ands	r3, r4
 8005eac:	3b08      	subs	r3, #8
 8005eae:	089b      	lsrs	r3, r3, #2
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	3306      	adds	r3, #6
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	18c3      	adds	r3, r0, r3
 8005eb8:	3304      	adds	r3, #4
 8005eba:	601a      	str	r2, [r3, #0]
}
 8005ebc:	46c0      	nop			@ (mov r8, r8)
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	b003      	add	sp, #12
 8005ec2:	bd90      	pop	{r4, r7, pc}
 8005ec4:	e000e100 	.word	0xe000e100
 8005ec8:	e000ed00 	.word	0xe000ed00

08005ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	1e5a      	subs	r2, r3, #1
 8005ed8:	2380      	movs	r3, #128	@ 0x80
 8005eda:	045b      	lsls	r3, r3, #17
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d301      	bcc.n	8005ee4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e010      	b.n	8005f06 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8005f10 <SysTick_Config+0x44>)
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	3a01      	subs	r2, #1
 8005eea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005eec:	2301      	movs	r3, #1
 8005eee:	425b      	negs	r3, r3
 8005ef0:	2103      	movs	r1, #3
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	f7ff ff7c 	bl	8005df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ef8:	4b05      	ldr	r3, [pc, #20]	@ (8005f10 <SysTick_Config+0x44>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005efe:	4b04      	ldr	r3, [pc, #16]	@ (8005f10 <SysTick_Config+0x44>)
 8005f00:	2207      	movs	r2, #7
 8005f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	0018      	movs	r0, r3
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	b002      	add	sp, #8
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	46c0      	nop			@ (mov r8, r8)
 8005f10:	e000e010 	.word	0xe000e010

08005f14 <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60b9      	str	r1, [r7, #8]
 8005f1c:	607a      	str	r2, [r7, #4]
 8005f1e:	210f      	movs	r1, #15
 8005f20:	187b      	adds	r3, r7, r1
 8005f22:	1c02      	adds	r2, r0, #0
 8005f24:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	187b      	adds	r3, r7, r1
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	b25b      	sxtb	r3, r3
 8005f2e:	0011      	movs	r1, r2
 8005f30:	0018      	movs	r0, r3
 8005f32:	f7ff ff5d 	bl	8005df0 <__NVIC_SetPriority>
}
 8005f36:	46c0      	nop			@ (mov r8, r8)
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	b004      	add	sp, #16
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b082      	sub	sp, #8
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	0018      	movs	r0, r3
 8005f4a:	f7ff ffbf 	bl	8005ecc <SysTick_Config>
 8005f4e:	0003      	movs	r3, r0
}
 8005f50:	0018      	movs	r0, r3
 8005f52:	46bd      	mov	sp, r7
 8005f54:	b002      	add	sp, #8
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005f62:	2300      	movs	r3, #0
 8005f64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f66:	e153      	b.n	8006210 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	4091      	lsls	r1, r2
 8005f72:	000a      	movs	r2, r1
 8005f74:	4013      	ands	r3, r2
 8005f76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d100      	bne.n	8005f80 <HAL_GPIO_Init+0x28>
 8005f7e:	e144      	b.n	800620a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	2203      	movs	r2, #3
 8005f86:	4013      	ands	r3, r2
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d005      	beq.n	8005f98 <HAL_GPIO_Init+0x40>
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	2203      	movs	r2, #3
 8005f92:	4013      	ands	r3, r2
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d130      	bne.n	8005ffa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	005b      	lsls	r3, r3, #1
 8005fa2:	2203      	movs	r2, #3
 8005fa4:	409a      	lsls	r2, r3
 8005fa6:	0013      	movs	r3, r2
 8005fa8:	43da      	mvns	r2, r3
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	4013      	ands	r3, r2
 8005fae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	68da      	ldr	r2, [r3, #12]
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	005b      	lsls	r3, r3, #1
 8005fb8:	409a      	lsls	r2, r3
 8005fba:	0013      	movs	r3, r2
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005fce:	2201      	movs	r2, #1
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	409a      	lsls	r2, r3
 8005fd4:	0013      	movs	r3, r2
 8005fd6:	43da      	mvns	r2, r3
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	4013      	ands	r3, r2
 8005fdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	091b      	lsrs	r3, r3, #4
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	401a      	ands	r2, r3
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	409a      	lsls	r2, r3
 8005fec:	0013      	movs	r3, r2
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	2203      	movs	r2, #3
 8006000:	4013      	ands	r3, r2
 8006002:	2b03      	cmp	r3, #3
 8006004:	d017      	beq.n	8006036 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	005b      	lsls	r3, r3, #1
 8006010:	2203      	movs	r2, #3
 8006012:	409a      	lsls	r2, r3
 8006014:	0013      	movs	r3, r2
 8006016:	43da      	mvns	r2, r3
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	4013      	ands	r3, r2
 800601c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	689a      	ldr	r2, [r3, #8]
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	005b      	lsls	r3, r3, #1
 8006026:	409a      	lsls	r2, r3
 8006028:	0013      	movs	r3, r2
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	4313      	orrs	r3, r2
 800602e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	2203      	movs	r2, #3
 800603c:	4013      	ands	r3, r2
 800603e:	2b02      	cmp	r3, #2
 8006040:	d123      	bne.n	800608a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	08da      	lsrs	r2, r3, #3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	3208      	adds	r2, #8
 800604a:	0092      	lsls	r2, r2, #2
 800604c:	58d3      	ldr	r3, [r2, r3]
 800604e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	2207      	movs	r2, #7
 8006054:	4013      	ands	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	220f      	movs	r2, #15
 800605a:	409a      	lsls	r2, r3
 800605c:	0013      	movs	r3, r2
 800605e:	43da      	mvns	r2, r3
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	4013      	ands	r3, r2
 8006064:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	691a      	ldr	r2, [r3, #16]
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	2107      	movs	r1, #7
 800606e:	400b      	ands	r3, r1
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	409a      	lsls	r2, r3
 8006074:	0013      	movs	r3, r2
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	4313      	orrs	r3, r2
 800607a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	08da      	lsrs	r2, r3, #3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	3208      	adds	r2, #8
 8006084:	0092      	lsls	r2, r2, #2
 8006086:	6939      	ldr	r1, [r7, #16]
 8006088:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	2203      	movs	r2, #3
 8006096:	409a      	lsls	r2, r3
 8006098:	0013      	movs	r3, r2
 800609a:	43da      	mvns	r2, r3
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	4013      	ands	r3, r2
 80060a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	2203      	movs	r2, #3
 80060a8:	401a      	ands	r2, r3
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	005b      	lsls	r3, r3, #1
 80060ae:	409a      	lsls	r2, r3
 80060b0:	0013      	movs	r3, r2
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	685a      	ldr	r2, [r3, #4]
 80060c2:	23c0      	movs	r3, #192	@ 0xc0
 80060c4:	029b      	lsls	r3, r3, #10
 80060c6:	4013      	ands	r3, r2
 80060c8:	d100      	bne.n	80060cc <HAL_GPIO_Init+0x174>
 80060ca:	e09e      	b.n	800620a <HAL_GPIO_Init+0x2b2>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80060cc:	4a56      	ldr	r2, [pc, #344]	@ (8006228 <HAL_GPIO_Init+0x2d0>)
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	089b      	lsrs	r3, r3, #2
 80060d2:	3318      	adds	r3, #24
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	589b      	ldr	r3, [r3, r2]
 80060d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2203      	movs	r2, #3
 80060de:	4013      	ands	r3, r2
 80060e0:	00db      	lsls	r3, r3, #3
 80060e2:	220f      	movs	r2, #15
 80060e4:	409a      	lsls	r2, r3
 80060e6:	0013      	movs	r3, r2
 80060e8:	43da      	mvns	r2, r3
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	4013      	ands	r3, r2
 80060ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	23a0      	movs	r3, #160	@ 0xa0
 80060f4:	05db      	lsls	r3, r3, #23
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d01f      	beq.n	800613a <HAL_GPIO_Init+0x1e2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a4b      	ldr	r2, [pc, #300]	@ (800622c <HAL_GPIO_Init+0x2d4>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d019      	beq.n	8006136 <HAL_GPIO_Init+0x1de>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a4a      	ldr	r2, [pc, #296]	@ (8006230 <HAL_GPIO_Init+0x2d8>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d013      	beq.n	8006132 <HAL_GPIO_Init+0x1da>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a49      	ldr	r2, [pc, #292]	@ (8006234 <HAL_GPIO_Init+0x2dc>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d00d      	beq.n	800612e <HAL_GPIO_Init+0x1d6>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a48      	ldr	r2, [pc, #288]	@ (8006238 <HAL_GPIO_Init+0x2e0>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d007      	beq.n	800612a <HAL_GPIO_Init+0x1d2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a47      	ldr	r2, [pc, #284]	@ (800623c <HAL_GPIO_Init+0x2e4>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d101      	bne.n	8006126 <HAL_GPIO_Init+0x1ce>
 8006122:	2305      	movs	r3, #5
 8006124:	e00a      	b.n	800613c <HAL_GPIO_Init+0x1e4>
 8006126:	2306      	movs	r3, #6
 8006128:	e008      	b.n	800613c <HAL_GPIO_Init+0x1e4>
 800612a:	2304      	movs	r3, #4
 800612c:	e006      	b.n	800613c <HAL_GPIO_Init+0x1e4>
 800612e:	2303      	movs	r3, #3
 8006130:	e004      	b.n	800613c <HAL_GPIO_Init+0x1e4>
 8006132:	2302      	movs	r3, #2
 8006134:	e002      	b.n	800613c <HAL_GPIO_Init+0x1e4>
 8006136:	2301      	movs	r3, #1
 8006138:	e000      	b.n	800613c <HAL_GPIO_Init+0x1e4>
 800613a:	2300      	movs	r3, #0
 800613c:	697a      	ldr	r2, [r7, #20]
 800613e:	2103      	movs	r1, #3
 8006140:	400a      	ands	r2, r1
 8006142:	00d2      	lsls	r2, r2, #3
 8006144:	4093      	lsls	r3, r2
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	4313      	orrs	r3, r2
 800614a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800614c:	4936      	ldr	r1, [pc, #216]	@ (8006228 <HAL_GPIO_Init+0x2d0>)
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	089b      	lsrs	r3, r3, #2
 8006152:	3318      	adds	r3, #24
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800615a:	4b33      	ldr	r3, [pc, #204]	@ (8006228 <HAL_GPIO_Init+0x2d0>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	43da      	mvns	r2, r3
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	4013      	ands	r3, r2
 8006168:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	2380      	movs	r3, #128	@ 0x80
 8006170:	035b      	lsls	r3, r3, #13
 8006172:	4013      	ands	r3, r2
 8006174:	d003      	beq.n	800617e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8006176:	693a      	ldr	r2, [r7, #16]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	4313      	orrs	r3, r2
 800617c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800617e:	4b2a      	ldr	r3, [pc, #168]	@ (8006228 <HAL_GPIO_Init+0x2d0>)
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8006184:	4b28      	ldr	r3, [pc, #160]	@ (8006228 <HAL_GPIO_Init+0x2d0>)
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	43da      	mvns	r2, r3
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	4013      	ands	r3, r2
 8006192:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	685a      	ldr	r2, [r3, #4]
 8006198:	2380      	movs	r3, #128	@ 0x80
 800619a:	039b      	lsls	r3, r3, #14
 800619c:	4013      	ands	r3, r2
 800619e:	d003      	beq.n	80061a8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80061a8:	4b1f      	ldr	r3, [pc, #124]	@ (8006228 <HAL_GPIO_Init+0x2d0>)
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80061ae:	4a1e      	ldr	r2, [pc, #120]	@ (8006228 <HAL_GPIO_Init+0x2d0>)
 80061b0:	2384      	movs	r3, #132	@ 0x84
 80061b2:	58d3      	ldr	r3, [r2, r3]
 80061b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	43da      	mvns	r2, r3
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	4013      	ands	r3, r2
 80061be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685a      	ldr	r2, [r3, #4]
 80061c4:	2380      	movs	r3, #128	@ 0x80
 80061c6:	029b      	lsls	r3, r3, #10
 80061c8:	4013      	ands	r3, r2
 80061ca:	d003      	beq.n	80061d4 <HAL_GPIO_Init+0x27c>
        {
          temp |= iocurrent;
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80061d4:	4914      	ldr	r1, [pc, #80]	@ (8006228 <HAL_GPIO_Init+0x2d0>)
 80061d6:	2284      	movs	r2, #132	@ 0x84
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80061dc:	4a12      	ldr	r2, [pc, #72]	@ (8006228 <HAL_GPIO_Init+0x2d0>)
 80061de:	2380      	movs	r3, #128	@ 0x80
 80061e0:	58d3      	ldr	r3, [r2, r3]
 80061e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	43da      	mvns	r2, r3
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	4013      	ands	r3, r2
 80061ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	2380      	movs	r3, #128	@ 0x80
 80061f4:	025b      	lsls	r3, r3, #9
 80061f6:	4013      	ands	r3, r2
 80061f8:	d003      	beq.n	8006202 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	4313      	orrs	r3, r2
 8006200:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006202:	4909      	ldr	r1, [pc, #36]	@ (8006228 <HAL_GPIO_Init+0x2d0>)
 8006204:	2280      	movs	r2, #128	@ 0x80
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	3301      	adds	r3, #1
 800620e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	40da      	lsrs	r2, r3
 8006218:	1e13      	subs	r3, r2, #0
 800621a:	d000      	beq.n	800621e <HAL_GPIO_Init+0x2c6>
 800621c:	e6a4      	b.n	8005f68 <HAL_GPIO_Init+0x10>
  }
}
 800621e:	46c0      	nop			@ (mov r8, r8)
 8006220:	46c0      	nop			@ (mov r8, r8)
 8006222:	46bd      	mov	sp, r7
 8006224:	b006      	add	sp, #24
 8006226:	bd80      	pop	{r7, pc}
 8006228:	40021800 	.word	0x40021800
 800622c:	50000400 	.word	0x50000400
 8006230:	50000800 	.word	0x50000800
 8006234:	50000c00 	.word	0x50000c00
 8006238:	50001000 	.word	0x50001000
 800623c:	50001400 	.word	0x50001400

08006240 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	0008      	movs	r0, r1
 800624a:	0011      	movs	r1, r2
 800624c:	1cbb      	adds	r3, r7, #2
 800624e:	1c02      	adds	r2, r0, #0
 8006250:	801a      	strh	r2, [r3, #0]
 8006252:	1c7b      	adds	r3, r7, #1
 8006254:	1c0a      	adds	r2, r1, #0
 8006256:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006258:	1c7b      	adds	r3, r7, #1
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d004      	beq.n	800626a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006260:	1cbb      	adds	r3, r7, #2
 8006262:	881a      	ldrh	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006268:	e003      	b.n	8006272 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800626a:	1cbb      	adds	r3, r7, #2
 800626c:	881a      	ldrh	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006272:	46c0      	nop			@ (mov r8, r8)
 8006274:	46bd      	mov	sp, r7
 8006276:	b002      	add	sp, #8
 8006278:	bd80      	pop	{r7, pc}
	...

0800627c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e08f      	b.n	80063ae <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2241      	movs	r2, #65	@ 0x41
 8006292:	5c9b      	ldrb	r3, [r3, r2]
 8006294:	b2db      	uxtb	r3, r3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d107      	bne.n	80062aa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2240      	movs	r2, #64	@ 0x40
 800629e:	2100      	movs	r1, #0
 80062a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	0018      	movs	r0, r3
 80062a6:	f7fd f92b 	bl	8003500 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2241      	movs	r2, #65	@ 0x41
 80062ae:	2124      	movs	r1, #36	@ 0x24
 80062b0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2101      	movs	r1, #1
 80062be:	438a      	bics	r2, r1
 80062c0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685a      	ldr	r2, [r3, #4]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	493b      	ldr	r1, [pc, #236]	@ (80063b8 <HAL_I2C_Init+0x13c>)
 80062cc:	400a      	ands	r2, r1
 80062ce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689a      	ldr	r2, [r3, #8]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4938      	ldr	r1, [pc, #224]	@ (80063bc <HAL_I2C_Init+0x140>)
 80062dc:	400a      	ands	r2, r1
 80062de:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d108      	bne.n	80062fa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	689a      	ldr	r2, [r3, #8]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2180      	movs	r1, #128	@ 0x80
 80062f2:	0209      	lsls	r1, r1, #8
 80062f4:	430a      	orrs	r2, r1
 80062f6:	609a      	str	r2, [r3, #8]
 80062f8:	e007      	b.n	800630a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	689a      	ldr	r2, [r3, #8]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2184      	movs	r1, #132	@ 0x84
 8006304:	0209      	lsls	r1, r1, #8
 8006306:	430a      	orrs	r2, r1
 8006308:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	2b02      	cmp	r3, #2
 8006310:	d109      	bne.n	8006326 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	685a      	ldr	r2, [r3, #4]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2180      	movs	r1, #128	@ 0x80
 800631e:	0109      	lsls	r1, r1, #4
 8006320:	430a      	orrs	r2, r1
 8006322:	605a      	str	r2, [r3, #4]
 8006324:	e007      	b.n	8006336 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4923      	ldr	r1, [pc, #140]	@ (80063c0 <HAL_I2C_Init+0x144>)
 8006332:	400a      	ands	r2, r1
 8006334:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4920      	ldr	r1, [pc, #128]	@ (80063c4 <HAL_I2C_Init+0x148>)
 8006342:	430a      	orrs	r2, r1
 8006344:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68da      	ldr	r2, [r3, #12]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	491a      	ldr	r1, [pc, #104]	@ (80063bc <HAL_I2C_Init+0x140>)
 8006352:	400a      	ands	r2, r1
 8006354:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	691a      	ldr	r2, [r3, #16]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	431a      	orrs	r2, r3
 8006360:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	430a      	orrs	r2, r1
 800636e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	69d9      	ldr	r1, [r3, #28]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a1a      	ldr	r2, [r3, #32]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	430a      	orrs	r2, r1
 800637e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2101      	movs	r1, #1
 800638c:	430a      	orrs	r2, r1
 800638e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2241      	movs	r2, #65	@ 0x41
 800639a:	2120      	movs	r1, #32
 800639c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2242      	movs	r2, #66	@ 0x42
 80063a8:	2100      	movs	r1, #0
 80063aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	0018      	movs	r0, r3
 80063b0:	46bd      	mov	sp, r7
 80063b2:	b002      	add	sp, #8
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	46c0      	nop			@ (mov r8, r8)
 80063b8:	f0ffffff 	.word	0xf0ffffff
 80063bc:	ffff7fff 	.word	0xffff7fff
 80063c0:	fffff7ff 	.word	0xfffff7ff
 80063c4:	02008000 	.word	0x02008000

080063c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2241      	movs	r2, #65	@ 0x41
 80063d6:	5c9b      	ldrb	r3, [r3, r2]
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b20      	cmp	r3, #32
 80063dc:	d138      	bne.n	8006450 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2240      	movs	r2, #64	@ 0x40
 80063e2:	5c9b      	ldrb	r3, [r3, r2]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d101      	bne.n	80063ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80063e8:	2302      	movs	r3, #2
 80063ea:	e032      	b.n	8006452 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2240      	movs	r2, #64	@ 0x40
 80063f0:	2101      	movs	r1, #1
 80063f2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2241      	movs	r2, #65	@ 0x41
 80063f8:	2124      	movs	r1, #36	@ 0x24
 80063fa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2101      	movs	r1, #1
 8006408:	438a      	bics	r2, r1
 800640a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4911      	ldr	r1, [pc, #68]	@ (800645c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006418:	400a      	ands	r2, r1
 800641a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6819      	ldr	r1, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	683a      	ldr	r2, [r7, #0]
 8006428:	430a      	orrs	r2, r1
 800642a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2101      	movs	r1, #1
 8006438:	430a      	orrs	r2, r1
 800643a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2241      	movs	r2, #65	@ 0x41
 8006440:	2120      	movs	r1, #32
 8006442:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2240      	movs	r2, #64	@ 0x40
 8006448:	2100      	movs	r1, #0
 800644a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800644c:	2300      	movs	r3, #0
 800644e:	e000      	b.n	8006452 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006450:	2302      	movs	r3, #2
  }
}
 8006452:	0018      	movs	r0, r3
 8006454:	46bd      	mov	sp, r7
 8006456:	b002      	add	sp, #8
 8006458:	bd80      	pop	{r7, pc}
 800645a:	46c0      	nop			@ (mov r8, r8)
 800645c:	ffffefff 	.word	0xffffefff

08006460 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2241      	movs	r2, #65	@ 0x41
 800646e:	5c9b      	ldrb	r3, [r3, r2]
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b20      	cmp	r3, #32
 8006474:	d139      	bne.n	80064ea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2240      	movs	r2, #64	@ 0x40
 800647a:	5c9b      	ldrb	r3, [r3, r2]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d101      	bne.n	8006484 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006480:	2302      	movs	r3, #2
 8006482:	e033      	b.n	80064ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2240      	movs	r2, #64	@ 0x40
 8006488:	2101      	movs	r1, #1
 800648a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2241      	movs	r2, #65	@ 0x41
 8006490:	2124      	movs	r1, #36	@ 0x24
 8006492:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2101      	movs	r1, #1
 80064a0:	438a      	bics	r2, r1
 80064a2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	4a11      	ldr	r2, [pc, #68]	@ (80064f4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80064b0:	4013      	ands	r3, r2
 80064b2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	021b      	lsls	r3, r3, #8
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2101      	movs	r1, #1
 80064d2:	430a      	orrs	r2, r1
 80064d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2241      	movs	r2, #65	@ 0x41
 80064da:	2120      	movs	r1, #32
 80064dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2240      	movs	r2, #64	@ 0x40
 80064e2:	2100      	movs	r1, #0
 80064e4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80064e6:	2300      	movs	r3, #0
 80064e8:	e000      	b.n	80064ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80064ea:	2302      	movs	r3, #2
  }
}
 80064ec:	0018      	movs	r0, r3
 80064ee:	46bd      	mov	sp, r7
 80064f0:	b004      	add	sp, #16
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	fffff0ff 	.word	0xfffff0ff

080064f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	2380      	movs	r3, #128	@ 0x80
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	429a      	cmp	r2, r3
 8006508:	d137      	bne.n	800657a <HAL_PWREx_ControlVoltageScaling+0x82>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800650a:	4b27      	ldr	r3, [pc, #156]	@ (80065a8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	23c0      	movs	r3, #192	@ 0xc0
 8006510:	00db      	lsls	r3, r3, #3
 8006512:	401a      	ands	r2, r3
 8006514:	2380      	movs	r3, #128	@ 0x80
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	429a      	cmp	r2, r3
 800651a:	d040      	beq.n	800659e <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800651c:	4b22      	ldr	r3, [pc, #136]	@ (80065a8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a22      	ldr	r2, [pc, #136]	@ (80065ac <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8006522:	401a      	ands	r2, r3
 8006524:	4b20      	ldr	r3, [pc, #128]	@ (80065a8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006526:	2180      	movs	r1, #128	@ 0x80
 8006528:	0089      	lsls	r1, r1, #2
 800652a:	430a      	orrs	r2, r1
 800652c:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800652e:	4b20      	ldr	r3, [pc, #128]	@ (80065b0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2232      	movs	r2, #50	@ 0x32
 8006534:	4353      	muls	r3, r2
 8006536:	491f      	ldr	r1, [pc, #124]	@ (80065b4 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8006538:	0018      	movs	r0, r3
 800653a:	f7f9 fde5 	bl	8000108 <__udivsi3>
 800653e:	0003      	movs	r3, r0
 8006540:	3301      	adds	r3, #1
 8006542:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006544:	e002      	b.n	800654c <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        wait_loop_index--;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	3b01      	subs	r3, #1
 800654a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800654c:	4b16      	ldr	r3, [pc, #88]	@ (80065a8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800654e:	695a      	ldr	r2, [r3, #20]
 8006550:	2380      	movs	r3, #128	@ 0x80
 8006552:	00db      	lsls	r3, r3, #3
 8006554:	401a      	ands	r2, r3
 8006556:	2380      	movs	r3, #128	@ 0x80
 8006558:	00db      	lsls	r3, r3, #3
 800655a:	429a      	cmp	r2, r3
 800655c:	d102      	bne.n	8006564 <HAL_PWREx_ControlVoltageScaling+0x6c>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1f0      	bne.n	8006546 <HAL_PWREx_ControlVoltageScaling+0x4e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006564:	4b10      	ldr	r3, [pc, #64]	@ (80065a8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006566:	695a      	ldr	r2, [r3, #20]
 8006568:	2380      	movs	r3, #128	@ 0x80
 800656a:	00db      	lsls	r3, r3, #3
 800656c:	401a      	ands	r2, r3
 800656e:	2380      	movs	r3, #128	@ 0x80
 8006570:	00db      	lsls	r3, r3, #3
 8006572:	429a      	cmp	r2, r3
 8006574:	d113      	bne.n	800659e <HAL_PWREx_ControlVoltageScaling+0xa6>
      {
        return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e012      	b.n	80065a0 <HAL_PWREx_ControlVoltageScaling+0xa8>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800657a:	4b0b      	ldr	r3, [pc, #44]	@ (80065a8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	23c0      	movs	r3, #192	@ 0xc0
 8006580:	00db      	lsls	r3, r3, #3
 8006582:	401a      	ands	r2, r3
 8006584:	2380      	movs	r3, #128	@ 0x80
 8006586:	00db      	lsls	r3, r3, #3
 8006588:	429a      	cmp	r2, r3
 800658a:	d008      	beq.n	800659e <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800658c:	4b06      	ldr	r3, [pc, #24]	@ (80065a8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a06      	ldr	r2, [pc, #24]	@ (80065ac <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8006592:	401a      	ands	r2, r3
 8006594:	4b04      	ldr	r3, [pc, #16]	@ (80065a8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006596:	2180      	movs	r1, #128	@ 0x80
 8006598:	00c9      	lsls	r1, r1, #3
 800659a:	430a      	orrs	r2, r1
 800659c:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	0018      	movs	r0, r3
 80065a2:	46bd      	mov	sp, r7
 80065a4:	b004      	add	sp, #16
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	40007000 	.word	0x40007000
 80065ac:	fffff9ff 	.word	0xfffff9ff
 80065b0:	20000004 	.word	0x20000004
 80065b4:	000f4240 	.word	0x000f4240

080065b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80065bc:	4b03      	ldr	r3, [pc, #12]	@ (80065cc <HAL_PWREx_GetVoltageRange+0x14>)
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	23c0      	movs	r3, #192	@ 0xc0
 80065c2:	00db      	lsls	r3, r3, #3
 80065c4:	4013      	ands	r3, r2
}
 80065c6:	0018      	movs	r0, r3
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	40007000 	.word	0x40007000

080065d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065d0:	b5b0      	push	{r4, r5, r7, lr}
 80065d2:	b088      	sub	sp, #32
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065d8:	4bc9      	ldr	r3, [pc, #804]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	2238      	movs	r2, #56	@ 0x38
 80065de:	4013      	ands	r3, r2
 80065e0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065e2:	4bc7      	ldr	r3, [pc, #796]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	2203      	movs	r2, #3
 80065e8:	4013      	ands	r3, r2
 80065ea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2210      	movs	r2, #16
 80065f2:	4013      	ands	r3, r2
 80065f4:	d100      	bne.n	80065f8 <HAL_RCC_OscConfig+0x28>
 80065f6:	e0ef      	b.n	80067d8 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d007      	beq.n	800660e <HAL_RCC_OscConfig+0x3e>
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	2b18      	cmp	r3, #24
 8006602:	d000      	beq.n	8006606 <HAL_RCC_OscConfig+0x36>
 8006604:	e093      	b.n	800672e <HAL_RCC_OscConfig+0x15e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d000      	beq.n	800660e <HAL_RCC_OscConfig+0x3e>
 800660c:	e08f      	b.n	800672e <HAL_RCC_OscConfig+0x15e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800660e:	4bbc      	ldr	r3, [pc, #752]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2202      	movs	r2, #2
 8006614:	4013      	ands	r3, r2
 8006616:	d006      	beq.n	8006626 <HAL_RCC_OscConfig+0x56>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	69db      	ldr	r3, [r3, #28]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d102      	bne.n	8006626 <HAL_RCC_OscConfig+0x56>
      {
        return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	f000 fbf2 	bl	8006e0a <HAL_RCC_OscConfig+0x83a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800662a:	4bb5      	ldr	r3, [pc, #724]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2108      	movs	r1, #8
 8006630:	400b      	ands	r3, r1
 8006632:	d004      	beq.n	800663e <HAL_RCC_OscConfig+0x6e>
 8006634:	4bb2      	ldr	r3, [pc, #712]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	21f0      	movs	r1, #240	@ 0xf0
 800663a:	400b      	ands	r3, r1
 800663c:	e005      	b.n	800664a <HAL_RCC_OscConfig+0x7a>
 800663e:	49b0      	ldr	r1, [pc, #704]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 8006640:	2394      	movs	r3, #148	@ 0x94
 8006642:	58cb      	ldr	r3, [r1, r3]
 8006644:	091b      	lsrs	r3, r3, #4
 8006646:	21f0      	movs	r1, #240	@ 0xf0
 8006648:	400b      	ands	r3, r1
 800664a:	4293      	cmp	r3, r2
 800664c:	d225      	bcs.n	800669a <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006652:	0018      	movs	r0, r3
 8006654:	f000 fd90 	bl	8007178 <RCC_SetFlashLatencyFromMSIRange>
 8006658:	1e03      	subs	r3, r0, #0
 800665a:	d002      	beq.n	8006662 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	f000 fbd4 	bl	8006e0a <HAL_RCC_OscConfig+0x83a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006662:	4ba7      	ldr	r3, [pc, #668]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	4ba6      	ldr	r3, [pc, #664]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 8006668:	2108      	movs	r1, #8
 800666a:	430a      	orrs	r2, r1
 800666c:	601a      	str	r2, [r3, #0]
 800666e:	4ba4      	ldr	r3, [pc, #656]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	22f0      	movs	r2, #240	@ 0xf0
 8006674:	4393      	bics	r3, r2
 8006676:	0019      	movs	r1, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800667c:	4ba0      	ldr	r3, [pc, #640]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 800667e:	430a      	orrs	r2, r1
 8006680:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006682:	4b9f      	ldr	r3, [pc, #636]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	4a9f      	ldr	r2, [pc, #636]	@ (8006904 <HAL_RCC_OscConfig+0x334>)
 8006688:	4013      	ands	r3, r2
 800668a:	0019      	movs	r1, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a1b      	ldr	r3, [r3, #32]
 8006690:	021a      	lsls	r2, r3, #8
 8006692:	4b9b      	ldr	r3, [pc, #620]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 8006694:	430a      	orrs	r2, r1
 8006696:	605a      	str	r2, [r3, #4]
 8006698:	e027      	b.n	80066ea <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800669a:	4b99      	ldr	r3, [pc, #612]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	4b98      	ldr	r3, [pc, #608]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 80066a0:	2108      	movs	r1, #8
 80066a2:	430a      	orrs	r2, r1
 80066a4:	601a      	str	r2, [r3, #0]
 80066a6:	4b96      	ldr	r3, [pc, #600]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	22f0      	movs	r2, #240	@ 0xf0
 80066ac:	4393      	bics	r3, r2
 80066ae:	0019      	movs	r1, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80066b4:	4b92      	ldr	r3, [pc, #584]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 80066b6:	430a      	orrs	r2, r1
 80066b8:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80066ba:	4b91      	ldr	r3, [pc, #580]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	4a91      	ldr	r2, [pc, #580]	@ (8006904 <HAL_RCC_OscConfig+0x334>)
 80066c0:	4013      	ands	r3, r2
 80066c2:	0019      	movs	r1, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a1b      	ldr	r3, [r3, #32]
 80066c8:	021a      	lsls	r2, r3, #8
 80066ca:	4b8d      	ldr	r3, [pc, #564]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 80066cc:	430a      	orrs	r2, r1
 80066ce:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d109      	bne.n	80066ea <HAL_RCC_OscConfig+0x11a>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066da:	0018      	movs	r0, r3
 80066dc:	f000 fd4c 	bl	8007178 <RCC_SetFlashLatencyFromMSIRange>
 80066e0:	1e03      	subs	r3, r0, #0
 80066e2:	d002      	beq.n	80066ea <HAL_RCC_OscConfig+0x11a>
            {
              return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	f000 fb90 	bl	8006e0a <HAL_RCC_OscConfig+0x83a>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80066ea:	f000 fc87 	bl	8006ffc <HAL_RCC_GetSysClockFreq>
 80066ee:	0001      	movs	r1, r0
 80066f0:	4b83      	ldr	r3, [pc, #524]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 80066f2:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80066f4:	0a1b      	lsrs	r3, r3, #8
 80066f6:	220f      	movs	r2, #15
 80066f8:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80066fa:	4a83      	ldr	r2, [pc, #524]	@ (8006908 <HAL_RCC_OscConfig+0x338>)
 80066fc:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80066fe:	001a      	movs	r2, r3
 8006700:	231f      	movs	r3, #31
 8006702:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8006704:	000a      	movs	r2, r1
 8006706:	40da      	lsrs	r2, r3
 8006708:	4b80      	ldr	r3, [pc, #512]	@ (800690c <HAL_RCC_OscConfig+0x33c>)
 800670a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800670c:	4b80      	ldr	r3, [pc, #512]	@ (8006910 <HAL_RCC_OscConfig+0x340>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	250f      	movs	r5, #15
 8006712:	197c      	adds	r4, r7, r5
 8006714:	0018      	movs	r0, r3
 8006716:	f7fe fed3 	bl	80054c0 <HAL_InitTick>
 800671a:	0003      	movs	r3, r0
 800671c:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 800671e:	197b      	adds	r3, r7, r5
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d057      	beq.n	80067d6 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8006726:	197b      	adds	r3, r7, r5
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	f000 fb6e 	bl	8006e0a <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	69db      	ldr	r3, [r3, #28]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d035      	beq.n	80067a2 <HAL_RCC_OscConfig+0x1d2>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006736:	4b72      	ldr	r3, [pc, #456]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	4b71      	ldr	r3, [pc, #452]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 800673c:	2101      	movs	r1, #1
 800673e:	430a      	orrs	r2, r1
 8006740:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006742:	f7fe ff17 	bl	8005574 <HAL_GetTick>
 8006746:	0003      	movs	r3, r0
 8006748:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800674a:	e009      	b.n	8006760 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 800674c:	f7fe ff12 	bl	8005574 <HAL_GetTick>
 8006750:	0002      	movs	r2, r0
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	2b02      	cmp	r3, #2
 8006758:	d902      	bls.n	8006760 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	f000 fb55 	bl	8006e0a <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006760:	4b67      	ldr	r3, [pc, #412]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2202      	movs	r2, #2
 8006766:	4013      	ands	r3, r2
 8006768:	d0f0      	beq.n	800674c <HAL_RCC_OscConfig+0x17c>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800676a:	4b65      	ldr	r3, [pc, #404]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	4b64      	ldr	r3, [pc, #400]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 8006770:	2108      	movs	r1, #8
 8006772:	430a      	orrs	r2, r1
 8006774:	601a      	str	r2, [r3, #0]
 8006776:	4b62      	ldr	r3, [pc, #392]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	22f0      	movs	r2, #240	@ 0xf0
 800677c:	4393      	bics	r3, r2
 800677e:	0019      	movs	r1, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006784:	4b5e      	ldr	r3, [pc, #376]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 8006786:	430a      	orrs	r2, r1
 8006788:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800678a:	4b5d      	ldr	r3, [pc, #372]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	4a5d      	ldr	r2, [pc, #372]	@ (8006904 <HAL_RCC_OscConfig+0x334>)
 8006790:	4013      	ands	r3, r2
 8006792:	0019      	movs	r1, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	021a      	lsls	r2, r3, #8
 800679a:	4b59      	ldr	r3, [pc, #356]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 800679c:	430a      	orrs	r2, r1
 800679e:	605a      	str	r2, [r3, #4]
 80067a0:	e01a      	b.n	80067d8 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80067a2:	4b57      	ldr	r3, [pc, #348]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	4b56      	ldr	r3, [pc, #344]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 80067a8:	2101      	movs	r1, #1
 80067aa:	438a      	bics	r2, r1
 80067ac:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80067ae:	f7fe fee1 	bl	8005574 <HAL_GetTick>
 80067b2:	0003      	movs	r3, r0
 80067b4:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80067b6:	e008      	b.n	80067ca <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 80067b8:	f7fe fedc 	bl	8005574 <HAL_GetTick>
 80067bc:	0002      	movs	r2, r0
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d901      	bls.n	80067ca <HAL_RCC_OscConfig+0x1fa>
          {
            return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e31f      	b.n	8006e0a <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80067ca:	4b4d      	ldr	r3, [pc, #308]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2202      	movs	r2, #2
 80067d0:	4013      	ands	r3, r2
 80067d2:	d1f1      	bne.n	80067b8 <HAL_RCC_OscConfig+0x1e8>
 80067d4:	e000      	b.n	80067d8 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80067d6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2201      	movs	r2, #1
 80067de:	4013      	ands	r3, r2
 80067e0:	d100      	bne.n	80067e4 <HAL_RCC_OscConfig+0x214>
 80067e2:	e065      	b.n	80068b0 <HAL_RCC_OscConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	2b10      	cmp	r3, #16
 80067e8:	d005      	beq.n	80067f6 <HAL_RCC_OscConfig+0x226>
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	2b18      	cmp	r3, #24
 80067ee:	d10e      	bne.n	800680e <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	2b03      	cmp	r3, #3
 80067f4:	d10b      	bne.n	800680e <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067f6:	4b42      	ldr	r3, [pc, #264]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	2380      	movs	r3, #128	@ 0x80
 80067fc:	029b      	lsls	r3, r3, #10
 80067fe:	4013      	ands	r3, r2
 8006800:	d055      	beq.n	80068ae <HAL_RCC_OscConfig+0x2de>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d151      	bne.n	80068ae <HAL_RCC_OscConfig+0x2de>
      {
        return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e2fd      	b.n	8006e0a <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685a      	ldr	r2, [r3, #4]
 8006812:	2380      	movs	r3, #128	@ 0x80
 8006814:	025b      	lsls	r3, r3, #9
 8006816:	429a      	cmp	r2, r3
 8006818:	d107      	bne.n	800682a <HAL_RCC_OscConfig+0x25a>
 800681a:	4b39      	ldr	r3, [pc, #228]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	4b38      	ldr	r3, [pc, #224]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 8006820:	2180      	movs	r1, #128	@ 0x80
 8006822:	0249      	lsls	r1, r1, #9
 8006824:	430a      	orrs	r2, r1
 8006826:	601a      	str	r2, [r3, #0]
 8006828:	e013      	b.n	8006852 <HAL_RCC_OscConfig+0x282>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	23a0      	movs	r3, #160	@ 0xa0
 8006830:	02db      	lsls	r3, r3, #11
 8006832:	429a      	cmp	r2, r3
 8006834:	d107      	bne.n	8006846 <HAL_RCC_OscConfig+0x276>
 8006836:	4b32      	ldr	r3, [pc, #200]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	4b31      	ldr	r3, [pc, #196]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 800683c:	21a0      	movs	r1, #160	@ 0xa0
 800683e:	02c9      	lsls	r1, r1, #11
 8006840:	430a      	orrs	r2, r1
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	e005      	b.n	8006852 <HAL_RCC_OscConfig+0x282>
 8006846:	4b2e      	ldr	r3, [pc, #184]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	4b2d      	ldr	r3, [pc, #180]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 800684c:	4931      	ldr	r1, [pc, #196]	@ (8006914 <HAL_RCC_OscConfig+0x344>)
 800684e:	400a      	ands	r2, r1
 8006850:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d014      	beq.n	8006884 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800685a:	f7fe fe8b 	bl	8005574 <HAL_GetTick>
 800685e:	0003      	movs	r3, r0
 8006860:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006862:	e008      	b.n	8006876 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8006864:	f7fe fe86 	bl	8005574 <HAL_GetTick>
 8006868:	0002      	movs	r2, r0
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	2b64      	cmp	r3, #100	@ 0x64
 8006870:	d901      	bls.n	8006876 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e2c9      	b.n	8006e0a <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006876:	4b22      	ldr	r3, [pc, #136]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	2380      	movs	r3, #128	@ 0x80
 800687c:	029b      	lsls	r3, r3, #10
 800687e:	4013      	ands	r3, r2
 8006880:	d0f0      	beq.n	8006864 <HAL_RCC_OscConfig+0x294>
 8006882:	e015      	b.n	80068b0 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006884:	f7fe fe76 	bl	8005574 <HAL_GetTick>
 8006888:	0003      	movs	r3, r0
 800688a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800688c:	e008      	b.n	80068a0 <HAL_RCC_OscConfig+0x2d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800688e:	f7fe fe71 	bl	8005574 <HAL_GetTick>
 8006892:	0002      	movs	r2, r0
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	2b64      	cmp	r3, #100	@ 0x64
 800689a:	d901      	bls.n	80068a0 <HAL_RCC_OscConfig+0x2d0>
          {
            return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e2b4      	b.n	8006e0a <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80068a0:	4b17      	ldr	r3, [pc, #92]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	2380      	movs	r3, #128	@ 0x80
 80068a6:	029b      	lsls	r3, r3, #10
 80068a8:	4013      	ands	r3, r2
 80068aa:	d1f0      	bne.n	800688e <HAL_RCC_OscConfig+0x2be>
 80068ac:	e000      	b.n	80068b0 <HAL_RCC_OscConfig+0x2e0>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068ae:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2202      	movs	r2, #2
 80068b6:	4013      	ands	r3, r2
 80068b8:	d100      	bne.n	80068bc <HAL_RCC_OscConfig+0x2ec>
 80068ba:	e074      	b.n	80069a6 <HAL_RCC_OscConfig+0x3d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	2b08      	cmp	r3, #8
 80068c0:	d005      	beq.n	80068ce <HAL_RCC_OscConfig+0x2fe>
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	2b18      	cmp	r3, #24
 80068c6:	d129      	bne.n	800691c <HAL_RCC_OscConfig+0x34c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d126      	bne.n	800691c <HAL_RCC_OscConfig+0x34c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	2380      	movs	r3, #128	@ 0x80
 80068d4:	00db      	lsls	r3, r3, #3
 80068d6:	4013      	ands	r3, r2
 80068d8:	d005      	beq.n	80068e6 <HAL_RCC_OscConfig+0x316>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d101      	bne.n	80068e6 <HAL_RCC_OscConfig+0x316>
      {
        return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e291      	b.n	8006e0a <HAL_RCC_OscConfig+0x83a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068e6:	4b06      	ldr	r3, [pc, #24]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	4a0b      	ldr	r2, [pc, #44]	@ (8006918 <HAL_RCC_OscConfig+0x348>)
 80068ec:	4013      	ands	r3, r2
 80068ee:	0019      	movs	r1, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	061a      	lsls	r2, r3, #24
 80068f6:	4b02      	ldr	r3, [pc, #8]	@ (8006900 <HAL_RCC_OscConfig+0x330>)
 80068f8:	430a      	orrs	r2, r1
 80068fa:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068fc:	e053      	b.n	80069a6 <HAL_RCC_OscConfig+0x3d6>
 80068fe:	46c0      	nop			@ (mov r8, r8)
 8006900:	40021000 	.word	0x40021000
 8006904:	ffff00ff 	.word	0xffff00ff
 8006908:	08009778 	.word	0x08009778
 800690c:	20000004 	.word	0x20000004
 8006910:	20000008 	.word	0x20000008
 8006914:	fffaffff 	.word	0xfffaffff
 8006918:	80ffffff 	.word	0x80ffffff
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d026      	beq.n	8006972 <HAL_RCC_OscConfig+0x3a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006924:	4bc7      	ldr	r3, [pc, #796]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	4bc6      	ldr	r3, [pc, #792]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 800692a:	2180      	movs	r1, #128	@ 0x80
 800692c:	0049      	lsls	r1, r1, #1
 800692e:	430a      	orrs	r2, r1
 8006930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006932:	f7fe fe1f 	bl	8005574 <HAL_GetTick>
 8006936:	0003      	movs	r3, r0
 8006938:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800693a:	e008      	b.n	800694e <HAL_RCC_OscConfig+0x37e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800693c:	f7fe fe1a 	bl	8005574 <HAL_GetTick>
 8006940:	0002      	movs	r2, r0
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	2b02      	cmp	r3, #2
 8006948:	d901      	bls.n	800694e <HAL_RCC_OscConfig+0x37e>
          {
            return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e25d      	b.n	8006e0a <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800694e:	4bbd      	ldr	r3, [pc, #756]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	2380      	movs	r3, #128	@ 0x80
 8006954:	00db      	lsls	r3, r3, #3
 8006956:	4013      	ands	r3, r2
 8006958:	d0f0      	beq.n	800693c <HAL_RCC_OscConfig+0x36c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800695a:	4bba      	ldr	r3, [pc, #744]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	4aba      	ldr	r2, [pc, #744]	@ (8006c48 <HAL_RCC_OscConfig+0x678>)
 8006960:	4013      	ands	r3, r2
 8006962:	0019      	movs	r1, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	061a      	lsls	r2, r3, #24
 800696a:	4bb6      	ldr	r3, [pc, #728]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 800696c:	430a      	orrs	r2, r1
 800696e:	605a      	str	r2, [r3, #4]
 8006970:	e019      	b.n	80069a6 <HAL_RCC_OscConfig+0x3d6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006972:	4bb4      	ldr	r3, [pc, #720]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	4bb3      	ldr	r3, [pc, #716]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 8006978:	49b4      	ldr	r1, [pc, #720]	@ (8006c4c <HAL_RCC_OscConfig+0x67c>)
 800697a:	400a      	ands	r2, r1
 800697c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800697e:	f7fe fdf9 	bl	8005574 <HAL_GetTick>
 8006982:	0003      	movs	r3, r0
 8006984:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006986:	e008      	b.n	800699a <HAL_RCC_OscConfig+0x3ca>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006988:	f7fe fdf4 	bl	8005574 <HAL_GetTick>
 800698c:	0002      	movs	r2, r0
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	2b02      	cmp	r3, #2
 8006994:	d901      	bls.n	800699a <HAL_RCC_OscConfig+0x3ca>
          {
            return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e237      	b.n	8006e0a <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800699a:	4baa      	ldr	r3, [pc, #680]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	2380      	movs	r3, #128	@ 0x80
 80069a0:	00db      	lsls	r3, r3, #3
 80069a2:	4013      	ands	r3, r2
 80069a4:	d1f0      	bne.n	8006988 <HAL_RCC_OscConfig+0x3b8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2208      	movs	r2, #8
 80069ac:	4013      	ands	r3, r2
 80069ae:	d051      	beq.n	8006a54 <HAL_RCC_OscConfig+0x484>
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	695b      	ldr	r3, [r3, #20]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d031      	beq.n	8006a1c <HAL_RCC_OscConfig+0x44c>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d108      	bne.n	80069d2 <HAL_RCC_OscConfig+0x402>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 80069c0:	4aa0      	ldr	r2, [pc, #640]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 80069c2:	2394      	movs	r3, #148	@ 0x94
 80069c4:	58d3      	ldr	r3, [r2, r3]
 80069c6:	499f      	ldr	r1, [pc, #636]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 80069c8:	2204      	movs	r2, #4
 80069ca:	4393      	bics	r3, r2
 80069cc:	2294      	movs	r2, #148	@ 0x94
 80069ce:	508b      	str	r3, [r1, r2]
 80069d0:	e007      	b.n	80069e2 <HAL_RCC_OscConfig+0x412>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 80069d2:	4a9c      	ldr	r2, [pc, #624]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 80069d4:	2394      	movs	r3, #148	@ 0x94
 80069d6:	58d3      	ldr	r3, [r2, r3]
 80069d8:	499a      	ldr	r1, [pc, #616]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 80069da:	2204      	movs	r2, #4
 80069dc:	4313      	orrs	r3, r2
 80069de:	2294      	movs	r2, #148	@ 0x94
 80069e0:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069e2:	4a98      	ldr	r2, [pc, #608]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 80069e4:	2394      	movs	r3, #148	@ 0x94
 80069e6:	58d3      	ldr	r3, [r2, r3]
 80069e8:	4996      	ldr	r1, [pc, #600]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 80069ea:	2201      	movs	r2, #1
 80069ec:	4313      	orrs	r3, r2
 80069ee:	2294      	movs	r2, #148	@ 0x94
 80069f0:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069f2:	f7fe fdbf 	bl	8005574 <HAL_GetTick>
 80069f6:	0003      	movs	r3, r0
 80069f8:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80069fa:	e008      	b.n	8006a0e <HAL_RCC_OscConfig+0x43e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069fc:	f7fe fdba 	bl	8005574 <HAL_GetTick>
 8006a00:	0002      	movs	r2, r0
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	2b11      	cmp	r3, #17
 8006a08:	d901      	bls.n	8006a0e <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	e1fd      	b.n	8006e0a <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006a0e:	4a8d      	ldr	r2, [pc, #564]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 8006a10:	2394      	movs	r3, #148	@ 0x94
 8006a12:	58d3      	ldr	r3, [r2, r3]
 8006a14:	2202      	movs	r2, #2
 8006a16:	4013      	ands	r3, r2
 8006a18:	d0f0      	beq.n	80069fc <HAL_RCC_OscConfig+0x42c>
 8006a1a:	e01b      	b.n	8006a54 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a1c:	4a89      	ldr	r2, [pc, #548]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 8006a1e:	2394      	movs	r3, #148	@ 0x94
 8006a20:	58d3      	ldr	r3, [r2, r3]
 8006a22:	4988      	ldr	r1, [pc, #544]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 8006a24:	2201      	movs	r2, #1
 8006a26:	4393      	bics	r3, r2
 8006a28:	2294      	movs	r2, #148	@ 0x94
 8006a2a:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a2c:	f7fe fda2 	bl	8005574 <HAL_GetTick>
 8006a30:	0003      	movs	r3, r0
 8006a32:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006a34:	e008      	b.n	8006a48 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a36:	f7fe fd9d 	bl	8005574 <HAL_GetTick>
 8006a3a:	0002      	movs	r2, r0
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	2b11      	cmp	r3, #17
 8006a42:	d901      	bls.n	8006a48 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e1e0      	b.n	8006e0a <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006a48:	4a7e      	ldr	r2, [pc, #504]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 8006a4a:	2394      	movs	r3, #148	@ 0x94
 8006a4c:	58d3      	ldr	r3, [r2, r3]
 8006a4e:	2202      	movs	r2, #2
 8006a50:	4013      	ands	r3, r2
 8006a52:	d1f0      	bne.n	8006a36 <HAL_RCC_OscConfig+0x466>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2204      	movs	r2, #4
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	d100      	bne.n	8006a60 <HAL_RCC_OscConfig+0x490>
 8006a5e:	e10d      	b.n	8006c7c <HAL_RCC_OscConfig+0x6ac>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a60:	201f      	movs	r0, #31
 8006a62:	183b      	adds	r3, r7, r0
 8006a64:	2200      	movs	r2, #0
 8006a66:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8006a68:	4b76      	ldr	r3, [pc, #472]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 8006a6a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006a6c:	2380      	movs	r3, #128	@ 0x80
 8006a6e:	055b      	lsls	r3, r3, #21
 8006a70:	4013      	ands	r3, r2
 8006a72:	d110      	bne.n	8006a96 <HAL_RCC_OscConfig+0x4c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a74:	4b73      	ldr	r3, [pc, #460]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 8006a76:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006a78:	4b72      	ldr	r3, [pc, #456]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 8006a7a:	2180      	movs	r1, #128	@ 0x80
 8006a7c:	0549      	lsls	r1, r1, #21
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	659a      	str	r2, [r3, #88]	@ 0x58
 8006a82:	4b70      	ldr	r3, [pc, #448]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 8006a84:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006a86:	2380      	movs	r3, #128	@ 0x80
 8006a88:	055b      	lsls	r3, r3, #21
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	60bb      	str	r3, [r7, #8]
 8006a8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a90:	183b      	adds	r3, r7, r0
 8006a92:	2201      	movs	r2, #1
 8006a94:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a96:	4b6e      	ldr	r3, [pc, #440]	@ (8006c50 <HAL_RCC_OscConfig+0x680>)
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	2380      	movs	r3, #128	@ 0x80
 8006a9c:	005b      	lsls	r3, r3, #1
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	d11a      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x508>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006aa2:	4b6b      	ldr	r3, [pc, #428]	@ (8006c50 <HAL_RCC_OscConfig+0x680>)
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	4b6a      	ldr	r3, [pc, #424]	@ (8006c50 <HAL_RCC_OscConfig+0x680>)
 8006aa8:	2180      	movs	r1, #128	@ 0x80
 8006aaa:	0049      	lsls	r1, r1, #1
 8006aac:	430a      	orrs	r2, r1
 8006aae:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ab0:	f7fe fd60 	bl	8005574 <HAL_GetTick>
 8006ab4:	0003      	movs	r3, r0
 8006ab6:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ab8:	e008      	b.n	8006acc <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aba:	f7fe fd5b 	bl	8005574 <HAL_GetTick>
 8006abe:	0002      	movs	r2, r0
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d901      	bls.n	8006acc <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e19e      	b.n	8006e0a <HAL_RCC_OscConfig+0x83a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006acc:	4b60      	ldr	r3, [pc, #384]	@ (8006c50 <HAL_RCC_OscConfig+0x680>)
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	2380      	movs	r3, #128	@ 0x80
 8006ad2:	005b      	lsls	r3, r3, #1
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	d0f0      	beq.n	8006aba <HAL_RCC_OscConfig+0x4ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	2201      	movs	r2, #1
 8006ade:	4013      	ands	r3, r2
 8006ae0:	d01e      	beq.n	8006b20 <HAL_RCC_OscConfig+0x550>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	2204      	movs	r2, #4
 8006ae8:	4013      	ands	r3, r2
 8006aea:	d010      	beq.n	8006b0e <HAL_RCC_OscConfig+0x53e>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006aec:	4a55      	ldr	r2, [pc, #340]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 8006aee:	2390      	movs	r3, #144	@ 0x90
 8006af0:	58d3      	ldr	r3, [r2, r3]
 8006af2:	4954      	ldr	r1, [pc, #336]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 8006af4:	2204      	movs	r2, #4
 8006af6:	4313      	orrs	r3, r2
 8006af8:	2290      	movs	r2, #144	@ 0x90
 8006afa:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006afc:	4a51      	ldr	r2, [pc, #324]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 8006afe:	2390      	movs	r3, #144	@ 0x90
 8006b00:	58d3      	ldr	r3, [r2, r3]
 8006b02:	4950      	ldr	r1, [pc, #320]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 8006b04:	2201      	movs	r2, #1
 8006b06:	4313      	orrs	r3, r2
 8006b08:	2290      	movs	r2, #144	@ 0x90
 8006b0a:	508b      	str	r3, [r1, r2]
 8006b0c:	e018      	b.n	8006b40 <HAL_RCC_OscConfig+0x570>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006b0e:	4a4d      	ldr	r2, [pc, #308]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 8006b10:	2390      	movs	r3, #144	@ 0x90
 8006b12:	58d3      	ldr	r3, [r2, r3]
 8006b14:	494b      	ldr	r1, [pc, #300]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 8006b16:	2201      	movs	r2, #1
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	2290      	movs	r2, #144	@ 0x90
 8006b1c:	508b      	str	r3, [r1, r2]
 8006b1e:	e00f      	b.n	8006b40 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006b20:	4a48      	ldr	r2, [pc, #288]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 8006b22:	2390      	movs	r3, #144	@ 0x90
 8006b24:	58d3      	ldr	r3, [r2, r3]
 8006b26:	4947      	ldr	r1, [pc, #284]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 8006b28:	2201      	movs	r2, #1
 8006b2a:	4393      	bics	r3, r2
 8006b2c:	2290      	movs	r2, #144	@ 0x90
 8006b2e:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006b30:	4a44      	ldr	r2, [pc, #272]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 8006b32:	2390      	movs	r3, #144	@ 0x90
 8006b34:	58d3      	ldr	r3, [r2, r3]
 8006b36:	4943      	ldr	r1, [pc, #268]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 8006b38:	2204      	movs	r2, #4
 8006b3a:	4393      	bics	r3, r2
 8006b3c:	2290      	movs	r2, #144	@ 0x90
 8006b3e:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d04f      	beq.n	8006be8 <HAL_RCC_OscConfig+0x618>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b48:	f7fe fd14 	bl	8005574 <HAL_GetTick>
 8006b4c:	0003      	movs	r3, r0
 8006b4e:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b50:	e009      	b.n	8006b66 <HAL_RCC_OscConfig+0x596>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b52:	f7fe fd0f 	bl	8005574 <HAL_GetTick>
 8006b56:	0002      	movs	r2, r0
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	4a3d      	ldr	r2, [pc, #244]	@ (8006c54 <HAL_RCC_OscConfig+0x684>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d901      	bls.n	8006b66 <HAL_RCC_OscConfig+0x596>
        {
          return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e151      	b.n	8006e0a <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b66:	4a37      	ldr	r2, [pc, #220]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 8006b68:	2390      	movs	r3, #144	@ 0x90
 8006b6a:	58d3      	ldr	r3, [r2, r3]
 8006b6c:	2202      	movs	r2, #2
 8006b6e:	4013      	ands	r3, r2
 8006b70:	d0ef      	beq.n	8006b52 <HAL_RCC_OscConfig+0x582>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	2280      	movs	r2, #128	@ 0x80
 8006b78:	4013      	ands	r3, r2
 8006b7a:	d01a      	beq.n	8006bb2 <HAL_RCC_OscConfig+0x5e2>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006b7c:	4a31      	ldr	r2, [pc, #196]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 8006b7e:	2390      	movs	r3, #144	@ 0x90
 8006b80:	58d3      	ldr	r3, [r2, r3]
 8006b82:	4930      	ldr	r1, [pc, #192]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 8006b84:	2280      	movs	r2, #128	@ 0x80
 8006b86:	4313      	orrs	r3, r2
 8006b88:	2290      	movs	r2, #144	@ 0x90
 8006b8a:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006b8c:	e009      	b.n	8006ba2 <HAL_RCC_OscConfig+0x5d2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b8e:	f7fe fcf1 	bl	8005574 <HAL_GetTick>
 8006b92:	0002      	movs	r2, r0
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	4a2e      	ldr	r2, [pc, #184]	@ (8006c54 <HAL_RCC_OscConfig+0x684>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d901      	bls.n	8006ba2 <HAL_RCC_OscConfig+0x5d2>
          {
            return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e133      	b.n	8006e0a <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006ba2:	4a28      	ldr	r2, [pc, #160]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 8006ba4:	2390      	movs	r3, #144	@ 0x90
 8006ba6:	58d2      	ldr	r2, [r2, r3]
 8006ba8:	2380      	movs	r3, #128	@ 0x80
 8006baa:	011b      	lsls	r3, r3, #4
 8006bac:	4013      	ands	r3, r2
 8006bae:	d0ee      	beq.n	8006b8e <HAL_RCC_OscConfig+0x5be>
 8006bb0:	e059      	b.n	8006c66 <HAL_RCC_OscConfig+0x696>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006bb2:	4a24      	ldr	r2, [pc, #144]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 8006bb4:	2390      	movs	r3, #144	@ 0x90
 8006bb6:	58d3      	ldr	r3, [r2, r3]
 8006bb8:	4922      	ldr	r1, [pc, #136]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 8006bba:	2280      	movs	r2, #128	@ 0x80
 8006bbc:	4393      	bics	r3, r2
 8006bbe:	2290      	movs	r2, #144	@ 0x90
 8006bc0:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006bc2:	e009      	b.n	8006bd8 <HAL_RCC_OscConfig+0x608>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bc4:	f7fe fcd6 	bl	8005574 <HAL_GetTick>
 8006bc8:	0002      	movs	r2, r0
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	4a21      	ldr	r2, [pc, #132]	@ (8006c54 <HAL_RCC_OscConfig+0x684>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d901      	bls.n	8006bd8 <HAL_RCC_OscConfig+0x608>
          {
            return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e118      	b.n	8006e0a <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006bd8:	4a1a      	ldr	r2, [pc, #104]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 8006bda:	2390      	movs	r3, #144	@ 0x90
 8006bdc:	58d2      	ldr	r2, [r2, r3]
 8006bde:	2380      	movs	r3, #128	@ 0x80
 8006be0:	011b      	lsls	r3, r3, #4
 8006be2:	4013      	ands	r3, r2
 8006be4:	d1ee      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x5f4>
 8006be6:	e03e      	b.n	8006c66 <HAL_RCC_OscConfig+0x696>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006be8:	f7fe fcc4 	bl	8005574 <HAL_GetTick>
 8006bec:	0003      	movs	r3, r0
 8006bee:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006bf0:	e009      	b.n	8006c06 <HAL_RCC_OscConfig+0x636>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bf2:	f7fe fcbf 	bl	8005574 <HAL_GetTick>
 8006bf6:	0002      	movs	r2, r0
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	4a15      	ldr	r2, [pc, #84]	@ (8006c54 <HAL_RCC_OscConfig+0x684>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d901      	bls.n	8006c06 <HAL_RCC_OscConfig+0x636>
        {
          return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e101      	b.n	8006e0a <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c06:	4a0f      	ldr	r2, [pc, #60]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 8006c08:	2390      	movs	r3, #144	@ 0x90
 8006c0a:	58d3      	ldr	r3, [r2, r3]
 8006c0c:	2202      	movs	r2, #2
 8006c0e:	4013      	ands	r3, r2
 8006c10:	d1ef      	bne.n	8006bf2 <HAL_RCC_OscConfig+0x622>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8006c12:	4a0c      	ldr	r2, [pc, #48]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 8006c14:	2390      	movs	r3, #144	@ 0x90
 8006c16:	58d3      	ldr	r3, [r2, r3]
 8006c18:	2280      	movs	r2, #128	@ 0x80
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	d023      	beq.n	8006c66 <HAL_RCC_OscConfig+0x696>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006c1e:	4a09      	ldr	r2, [pc, #36]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 8006c20:	2390      	movs	r3, #144	@ 0x90
 8006c22:	58d3      	ldr	r3, [r2, r3]
 8006c24:	4907      	ldr	r1, [pc, #28]	@ (8006c44 <HAL_RCC_OscConfig+0x674>)
 8006c26:	2280      	movs	r2, #128	@ 0x80
 8006c28:	4393      	bics	r3, r2
 8006c2a:	2290      	movs	r2, #144	@ 0x90
 8006c2c:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006c2e:	e013      	b.n	8006c58 <HAL_RCC_OscConfig+0x688>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c30:	f7fe fca0 	bl	8005574 <HAL_GetTick>
 8006c34:	0002      	movs	r2, r0
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	4a06      	ldr	r2, [pc, #24]	@ (8006c54 <HAL_RCC_OscConfig+0x684>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d90b      	bls.n	8006c58 <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e0e2      	b.n	8006e0a <HAL_RCC_OscConfig+0x83a>
 8006c44:	40021000 	.word	0x40021000
 8006c48:	80ffffff 	.word	0x80ffffff
 8006c4c:	fffffeff 	.word	0xfffffeff
 8006c50:	40007000 	.word	0x40007000
 8006c54:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006c58:	4a6e      	ldr	r2, [pc, #440]	@ (8006e14 <HAL_RCC_OscConfig+0x844>)
 8006c5a:	2390      	movs	r3, #144	@ 0x90
 8006c5c:	58d2      	ldr	r2, [r2, r3]
 8006c5e:	2380      	movs	r3, #128	@ 0x80
 8006c60:	011b      	lsls	r3, r3, #4
 8006c62:	4013      	ands	r3, r2
 8006c64:	d1e4      	bne.n	8006c30 <HAL_RCC_OscConfig+0x660>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c66:	231f      	movs	r3, #31
 8006c68:	18fb      	adds	r3, r7, r3
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d105      	bne.n	8006c7c <HAL_RCC_OscConfig+0x6ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c70:	4b68      	ldr	r3, [pc, #416]	@ (8006e14 <HAL_RCC_OscConfig+0x844>)
 8006c72:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006c74:	4b67      	ldr	r3, [pc, #412]	@ (8006e14 <HAL_RCC_OscConfig+0x844>)
 8006c76:	4968      	ldr	r1, [pc, #416]	@ (8006e18 <HAL_RCC_OscConfig+0x848>)
 8006c78:	400a      	ands	r2, r1
 8006c7a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
#if defined(RCC_CRRCR_HSI48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2220      	movs	r2, #32
 8006c82:	4013      	ands	r3, r2
 8006c84:	d03c      	beq.n	8006d00 <HAL_RCC_OscConfig+0x730>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d01c      	beq.n	8006cc8 <HAL_RCC_OscConfig+0x6f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006c8e:	4a61      	ldr	r2, [pc, #388]	@ (8006e14 <HAL_RCC_OscConfig+0x844>)
 8006c90:	2398      	movs	r3, #152	@ 0x98
 8006c92:	58d3      	ldr	r3, [r2, r3]
 8006c94:	495f      	ldr	r1, [pc, #380]	@ (8006e14 <HAL_RCC_OscConfig+0x844>)
 8006c96:	2201      	movs	r2, #1
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	2298      	movs	r2, #152	@ 0x98
 8006c9c:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c9e:	f7fe fc69 	bl	8005574 <HAL_GetTick>
 8006ca2:	0003      	movs	r3, r0
 8006ca4:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006ca6:	e008      	b.n	8006cba <HAL_RCC_OscConfig+0x6ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ca8:	f7fe fc64 	bl	8005574 <HAL_GetTick>
 8006cac:	0002      	movs	r2, r0
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d901      	bls.n	8006cba <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e0a7      	b.n	8006e0a <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006cba:	4a56      	ldr	r2, [pc, #344]	@ (8006e14 <HAL_RCC_OscConfig+0x844>)
 8006cbc:	2398      	movs	r3, #152	@ 0x98
 8006cbe:	58d3      	ldr	r3, [r2, r3]
 8006cc0:	2202      	movs	r2, #2
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	d0f0      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x6d8>
 8006cc6:	e01b      	b.n	8006d00 <HAL_RCC_OscConfig+0x730>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006cc8:	4a52      	ldr	r2, [pc, #328]	@ (8006e14 <HAL_RCC_OscConfig+0x844>)
 8006cca:	2398      	movs	r3, #152	@ 0x98
 8006ccc:	58d3      	ldr	r3, [r2, r3]
 8006cce:	4951      	ldr	r1, [pc, #324]	@ (8006e14 <HAL_RCC_OscConfig+0x844>)
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	4393      	bics	r3, r2
 8006cd4:	2298      	movs	r2, #152	@ 0x98
 8006cd6:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cd8:	f7fe fc4c 	bl	8005574 <HAL_GetTick>
 8006cdc:	0003      	movs	r3, r0
 8006cde:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 8006ce0:	e008      	b.n	8006cf4 <HAL_RCC_OscConfig+0x724>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ce2:	f7fe fc47 	bl	8005574 <HAL_GetTick>
 8006ce6:	0002      	movs	r2, r0
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d901      	bls.n	8006cf4 <HAL_RCC_OscConfig+0x724>
        {
          return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e08a      	b.n	8006e0a <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 8006cf4:	4a47      	ldr	r2, [pc, #284]	@ (8006e14 <HAL_RCC_OscConfig+0x844>)
 8006cf6:	2398      	movs	r3, #152	@ 0x98
 8006cf8:	58d3      	ldr	r3, [r2, r3]
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	d1f0      	bne.n	8006ce2 <HAL_RCC_OscConfig+0x712>
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d100      	bne.n	8006d0a <HAL_RCC_OscConfig+0x73a>
 8006d08:	e07e      	b.n	8006e08 <HAL_RCC_OscConfig+0x838>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d0a:	4b42      	ldr	r3, [pc, #264]	@ (8006e14 <HAL_RCC_OscConfig+0x844>)
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	2238      	movs	r2, #56	@ 0x38
 8006d10:	4013      	ands	r3, r2
 8006d12:	2b18      	cmp	r3, #24
 8006d14:	d100      	bne.n	8006d18 <HAL_RCC_OscConfig+0x748>
 8006d16:	e075      	b.n	8006e04 <HAL_RCC_OscConfig+0x834>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d156      	bne.n	8006dce <HAL_RCC_OscConfig+0x7fe>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d20:	4b3c      	ldr	r3, [pc, #240]	@ (8006e14 <HAL_RCC_OscConfig+0x844>)
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	4b3b      	ldr	r3, [pc, #236]	@ (8006e14 <HAL_RCC_OscConfig+0x844>)
 8006d26:	493d      	ldr	r1, [pc, #244]	@ (8006e1c <HAL_RCC_OscConfig+0x84c>)
 8006d28:	400a      	ands	r2, r1
 8006d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d2c:	f7fe fc22 	bl	8005574 <HAL_GetTick>
 8006d30:	0003      	movs	r3, r0
 8006d32:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d34:	e008      	b.n	8006d48 <HAL_RCC_OscConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d36:	f7fe fc1d 	bl	8005574 <HAL_GetTick>
 8006d3a:	0002      	movs	r2, r0
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d901      	bls.n	8006d48 <HAL_RCC_OscConfig+0x778>
          {
            return HAL_TIMEOUT;
 8006d44:	2303      	movs	r3, #3
 8006d46:	e060      	b.n	8006e0a <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d48:	4b32      	ldr	r3, [pc, #200]	@ (8006e14 <HAL_RCC_OscConfig+0x844>)
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	2380      	movs	r3, #128	@ 0x80
 8006d4e:	049b      	lsls	r3, r3, #18
 8006d50:	4013      	ands	r3, r2
 8006d52:	d1f0      	bne.n	8006d36 <HAL_RCC_OscConfig+0x766>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d54:	4b2f      	ldr	r3, [pc, #188]	@ (8006e14 <HAL_RCC_OscConfig+0x844>)
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	4a31      	ldr	r2, [pc, #196]	@ (8006e20 <HAL_RCC_OscConfig+0x850>)
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	0019      	movs	r1, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d66:	431a      	orrs	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d6c:	021b      	lsls	r3, r3, #8
 8006d6e:	431a      	orrs	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d74:	431a      	orrs	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d7a:	431a      	orrs	r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d80:	431a      	orrs	r2, r3
 8006d82:	4b24      	ldr	r3, [pc, #144]	@ (8006e14 <HAL_RCC_OscConfig+0x844>)
 8006d84:	430a      	orrs	r2, r1
 8006d86:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 8006d88:	4b22      	ldr	r3, [pc, #136]	@ (8006e14 <HAL_RCC_OscConfig+0x844>)
 8006d8a:	68da      	ldr	r2, [r3, #12]
 8006d8c:	4b21      	ldr	r3, [pc, #132]	@ (8006e14 <HAL_RCC_OscConfig+0x844>)
 8006d8e:	2180      	movs	r1, #128	@ 0x80
 8006d90:	0549      	lsls	r1, r1, #21
 8006d92:	430a      	orrs	r2, r1
 8006d94:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d96:	4b1f      	ldr	r3, [pc, #124]	@ (8006e14 <HAL_RCC_OscConfig+0x844>)
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8006e14 <HAL_RCC_OscConfig+0x844>)
 8006d9c:	2180      	movs	r1, #128	@ 0x80
 8006d9e:	0449      	lsls	r1, r1, #17
 8006da0:	430a      	orrs	r2, r1
 8006da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da4:	f7fe fbe6 	bl	8005574 <HAL_GetTick>
 8006da8:	0003      	movs	r3, r0
 8006daa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dac:	e008      	b.n	8006dc0 <HAL_RCC_OscConfig+0x7f0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dae:	f7fe fbe1 	bl	8005574 <HAL_GetTick>
 8006db2:	0002      	movs	r2, r0
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d901      	bls.n	8006dc0 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e024      	b.n	8006e0a <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dc0:	4b14      	ldr	r3, [pc, #80]	@ (8006e14 <HAL_RCC_OscConfig+0x844>)
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	2380      	movs	r3, #128	@ 0x80
 8006dc6:	049b      	lsls	r3, r3, #18
 8006dc8:	4013      	ands	r3, r2
 8006dca:	d0f0      	beq.n	8006dae <HAL_RCC_OscConfig+0x7de>
 8006dcc:	e01c      	b.n	8006e08 <HAL_RCC_OscConfig+0x838>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dce:	4b11      	ldr	r3, [pc, #68]	@ (8006e14 <HAL_RCC_OscConfig+0x844>)
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	4b10      	ldr	r3, [pc, #64]	@ (8006e14 <HAL_RCC_OscConfig+0x844>)
 8006dd4:	4911      	ldr	r1, [pc, #68]	@ (8006e1c <HAL_RCC_OscConfig+0x84c>)
 8006dd6:	400a      	ands	r2, r1
 8006dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dda:	f7fe fbcb 	bl	8005574 <HAL_GetTick>
 8006dde:	0003      	movs	r3, r0
 8006de0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006de2:	e008      	b.n	8006df6 <HAL_RCC_OscConfig+0x826>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006de4:	f7fe fbc6 	bl	8005574 <HAL_GetTick>
 8006de8:	0002      	movs	r2, r0
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d901      	bls.n	8006df6 <HAL_RCC_OscConfig+0x826>
          {
            return HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e009      	b.n	8006e0a <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006df6:	4b07      	ldr	r3, [pc, #28]	@ (8006e14 <HAL_RCC_OscConfig+0x844>)
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	2380      	movs	r3, #128	@ 0x80
 8006dfc:	049b      	lsls	r3, r3, #18
 8006dfe:	4013      	ands	r3, r2
 8006e00:	d1f0      	bne.n	8006de4 <HAL_RCC_OscConfig+0x814>
 8006e02:	e001      	b.n	8006e08 <HAL_RCC_OscConfig+0x838>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e000      	b.n	8006e0a <HAL_RCC_OscConfig+0x83a>
    }
  }
  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	0018      	movs	r0, r3
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	b008      	add	sp, #32
 8006e10:	bdb0      	pop	{r4, r5, r7, pc}
 8006e12:	46c0      	nop			@ (mov r8, r8)
 8006e14:	40021000 	.word	0x40021000
 8006e18:	efffffff 	.word	0xefffffff
 8006e1c:	feffffff 	.word	0xfeffffff
 8006e20:	11c1808c 	.word	0x11c1808c

08006e24 <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e24:	b5b0      	push	{r4, r5, r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e2e:	4b6c      	ldr	r3, [pc, #432]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2207      	movs	r2, #7
 8006e34:	4013      	ands	r3, r2
 8006e36:	683a      	ldr	r2, [r7, #0]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d911      	bls.n	8006e60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e3c:	4b68      	ldr	r3, [pc, #416]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2207      	movs	r2, #7
 8006e42:	4393      	bics	r3, r2
 8006e44:	0019      	movs	r1, r3
 8006e46:	4b66      	ldr	r3, [pc, #408]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e4e:	4b64      	ldr	r3, [pc, #400]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2207      	movs	r2, #7
 8006e54:	4013      	ands	r3, r2
 8006e56:	683a      	ldr	r2, [r7, #0]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d001      	beq.n	8006e60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e0bb      	b.n	8006fd8 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2201      	movs	r2, #1
 8006e66:	4013      	ands	r3, r2
 8006e68:	d100      	bne.n	8006e6c <HAL_RCC_ClockConfig+0x48>
 8006e6a:	e064      	b.n	8006f36 <HAL_RCC_ClockConfig+0x112>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	2b03      	cmp	r3, #3
 8006e72:	d107      	bne.n	8006e84 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e74:	4b5b      	ldr	r3, [pc, #364]	@ (8006fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	2380      	movs	r3, #128	@ 0x80
 8006e7a:	049b      	lsls	r3, r3, #18
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	d138      	bne.n	8006ef2 <HAL_RCC_ClockConfig+0xce>
      {
        return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e0a9      	b.n	8006fd8 <HAL_RCC_ClockConfig+0x1b4>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d107      	bne.n	8006e9c <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e8c:	4b55      	ldr	r3, [pc, #340]	@ (8006fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	2380      	movs	r3, #128	@ 0x80
 8006e92:	029b      	lsls	r3, r3, #10
 8006e94:	4013      	ands	r3, r2
 8006e96:	d12c      	bne.n	8006ef2 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e09d      	b.n	8006fd8 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d106      	bne.n	8006eb2 <HAL_RCC_ClockConfig+0x8e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ea4:	4b4f      	ldr	r3, [pc, #316]	@ (8006fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2202      	movs	r2, #2
 8006eaa:	4013      	ands	r3, r2
 8006eac:	d121      	bne.n	8006ef2 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e092      	b.n	8006fd8 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d107      	bne.n	8006eca <HAL_RCC_ClockConfig+0xa6>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006eba:	4b4a      	ldr	r3, [pc, #296]	@ (8006fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	2380      	movs	r3, #128	@ 0x80
 8006ec0:	00db      	lsls	r3, r3, #3
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	d115      	bne.n	8006ef2 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e086      	b.n	8006fd8 <HAL_RCC_ClockConfig+0x1b4>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	2b04      	cmp	r3, #4
 8006ed0:	d107      	bne.n	8006ee2 <HAL_RCC_ClockConfig+0xbe>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ed2:	4a44      	ldr	r2, [pc, #272]	@ (8006fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8006ed4:	2394      	movs	r3, #148	@ 0x94
 8006ed6:	58d3      	ldr	r3, [r2, r3]
 8006ed8:	2202      	movs	r2, #2
 8006eda:	4013      	ands	r3, r2
 8006edc:	d109      	bne.n	8006ef2 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e07a      	b.n	8006fd8 <HAL_RCC_ClockConfig+0x1b4>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ee2:	4a40      	ldr	r2, [pc, #256]	@ (8006fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8006ee4:	2390      	movs	r3, #144	@ 0x90
 8006ee6:	58d3      	ldr	r3, [r2, r3]
 8006ee8:	2202      	movs	r2, #2
 8006eea:	4013      	ands	r3, r2
 8006eec:	d101      	bne.n	8006ef2 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e072      	b.n	8006fd8 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ef2:	4b3c      	ldr	r3, [pc, #240]	@ (8006fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	2207      	movs	r2, #7
 8006ef8:	4393      	bics	r3, r2
 8006efa:	0019      	movs	r1, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685a      	ldr	r2, [r3, #4]
 8006f00:	4b38      	ldr	r3, [pc, #224]	@ (8006fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8006f02:	430a      	orrs	r2, r1
 8006f04:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f06:	f7fe fb35 	bl	8005574 <HAL_GetTick>
 8006f0a:	0003      	movs	r3, r0
 8006f0c:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f0e:	e009      	b.n	8006f24 <HAL_RCC_ClockConfig+0x100>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f10:	f7fe fb30 	bl	8005574 <HAL_GetTick>
 8006f14:	0002      	movs	r2, r0
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	1ad3      	subs	r3, r2, r3
 8006f1a:	4a33      	ldr	r2, [pc, #204]	@ (8006fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d901      	bls.n	8006f24 <HAL_RCC_ClockConfig+0x100>
      {
        return HAL_TIMEOUT;
 8006f20:	2303      	movs	r3, #3
 8006f22:	e059      	b.n	8006fd8 <HAL_RCC_ClockConfig+0x1b4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f24:	4b2f      	ldr	r3, [pc, #188]	@ (8006fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	2238      	movs	r2, #56	@ 0x38
 8006f2a:	401a      	ands	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	00db      	lsls	r3, r3, #3
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d1ec      	bne.n	8006f10 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	d009      	beq.n	8006f54 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f40:	4b28      	ldr	r3, [pc, #160]	@ (8006fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	4a29      	ldr	r2, [pc, #164]	@ (8006fec <HAL_RCC_ClockConfig+0x1c8>)
 8006f46:	4013      	ands	r3, r2
 8006f48:	0019      	movs	r1, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	689a      	ldr	r2, [r3, #8]
 8006f4e:	4b25      	ldr	r3, [pc, #148]	@ (8006fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8006f50:	430a      	orrs	r2, r1
 8006f52:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f54:	4b22      	ldr	r3, [pc, #136]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2207      	movs	r2, #7
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	683a      	ldr	r2, [r7, #0]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d211      	bcs.n	8006f86 <HAL_RCC_ClockConfig+0x162>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f62:	4b1f      	ldr	r3, [pc, #124]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2207      	movs	r2, #7
 8006f68:	4393      	bics	r3, r2
 8006f6a:	0019      	movs	r1, r3
 8006f6c:	4b1c      	ldr	r3, [pc, #112]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f6e:	683a      	ldr	r2, [r7, #0]
 8006f70:	430a      	orrs	r2, r1
 8006f72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f74:	4b1a      	ldr	r3, [pc, #104]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2207      	movs	r2, #7
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	683a      	ldr	r2, [r7, #0]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d001      	beq.n	8006f86 <HAL_RCC_ClockConfig+0x162>
    {
      return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e028      	b.n	8006fd8 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2204      	movs	r2, #4
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	d009      	beq.n	8006fa4 <HAL_RCC_ClockConfig+0x180>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006f90:	4b14      	ldr	r3, [pc, #80]	@ (8006fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	4a16      	ldr	r2, [pc, #88]	@ (8006ff0 <HAL_RCC_ClockConfig+0x1cc>)
 8006f96:	4013      	ands	r3, r2
 8006f98:	0019      	movs	r1, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68da      	ldr	r2, [r3, #12]
 8006f9e:	4b11      	ldr	r3, [pc, #68]	@ (8006fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8006fa0:	430a      	orrs	r2, r1
 8006fa2:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8006fa4:	f000 f82a 	bl	8006ffc <HAL_RCC_GetSysClockFreq>
 8006fa8:	0001      	movs	r1, r0
 8006faa:	4b0e      	ldr	r3, [pc, #56]	@ (8006fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8006fac:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006fae:	0a1b      	lsrs	r3, r3, #8
 8006fb0:	220f      	movs	r2, #15
 8006fb2:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8006fb4:	4a0f      	ldr	r2, [pc, #60]	@ (8006ff4 <HAL_RCC_ClockConfig+0x1d0>)
 8006fb6:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006fb8:	001a      	movs	r2, r3
 8006fba:	231f      	movs	r3, #31
 8006fbc:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8006fbe:	000a      	movs	r2, r1
 8006fc0:	40da      	lsrs	r2, r3
 8006fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ff8 <HAL_RCC_ClockConfig+0x1d4>)
 8006fc4:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 8006fc6:	250b      	movs	r5, #11
 8006fc8:	197c      	adds	r4, r7, r5
 8006fca:	2003      	movs	r0, #3
 8006fcc:	f7fe fa78 	bl	80054c0 <HAL_InitTick>
 8006fd0:	0003      	movs	r3, r0
 8006fd2:	7023      	strb	r3, [r4, #0]

  return halstatus;
 8006fd4:	197b      	adds	r3, r7, r5
 8006fd6:	781b      	ldrb	r3, [r3, #0]
}
 8006fd8:	0018      	movs	r0, r3
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	b004      	add	sp, #16
 8006fde:	bdb0      	pop	{r4, r5, r7, pc}
 8006fe0:	40022000 	.word	0x40022000
 8006fe4:	40021000 	.word	0x40021000
 8006fe8:	00001388 	.word	0x00001388
 8006fec:	fffff0ff 	.word	0xfffff0ff
 8006ff0:	ffff8fff 	.word	0xffff8fff
 8006ff4:	08009778 	.word	0x08009778
 8006ff8:	20000004 	.word	0x20000004

08006ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b08a      	sub	sp, #40	@ 0x28
 8007000:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8007002:	2300      	movs	r3, #0
 8007004:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8007006:	2300      	movs	r3, #0
 8007008:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800700a:	4b46      	ldr	r3, [pc, #280]	@ (8007124 <HAL_RCC_GetSysClockFreq+0x128>)
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	2238      	movs	r2, #56	@ 0x38
 8007010:	4013      	ands	r3, r2
 8007012:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007014:	4b43      	ldr	r3, [pc, #268]	@ (8007124 <HAL_RCC_GetSysClockFreq+0x128>)
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	2203      	movs	r2, #3
 800701a:	4013      	ands	r3, r2
 800701c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d005      	beq.n	8007030 <HAL_RCC_GetSysClockFreq+0x34>
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	2b18      	cmp	r3, #24
 8007028:	d125      	bne.n	8007076 <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d122      	bne.n	8007076 <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007030:	4b3c      	ldr	r3, [pc, #240]	@ (8007124 <HAL_RCC_GetSysClockFreq+0x128>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2208      	movs	r2, #8
 8007036:	4013      	ands	r3, r2
 8007038:	d107      	bne.n	800704a <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 800703a:	4a3a      	ldr	r2, [pc, #232]	@ (8007124 <HAL_RCC_GetSysClockFreq+0x128>)
 800703c:	2394      	movs	r3, #148	@ 0x94
 800703e:	58d3      	ldr	r3, [r2, r3]
 8007040:	0a1b      	lsrs	r3, r3, #8
 8007042:	220f      	movs	r2, #15
 8007044:	4013      	ands	r3, r2
 8007046:	627b      	str	r3, [r7, #36]	@ 0x24
 8007048:	e005      	b.n	8007056 <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800704a:	4b36      	ldr	r3, [pc, #216]	@ (8007124 <HAL_RCC_GetSysClockFreq+0x128>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	091b      	lsrs	r3, r3, #4
 8007050:	220f      	movs	r2, #15
 8007052:	4013      	ands	r3, r2
 8007054:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 8007056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007058:	2b0b      	cmp	r3, #11
 800705a:	d901      	bls.n	8007060 <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 800705c:	2300      	movs	r3, #0
 800705e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 8007060:	4b31      	ldr	r3, [pc, #196]	@ (8007128 <HAL_RCC_GetSysClockFreq+0x12c>)
 8007062:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007064:	0092      	lsls	r2, r2, #2
 8007066:	58d3      	ldr	r3, [r2, r3]
 8007068:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d11b      	bne.n	80070a8 <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007072:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007074:	e018      	b.n	80070a8 <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	2b08      	cmp	r3, #8
 800707a:	d102      	bne.n	8007082 <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800707c:	4b2b      	ldr	r3, [pc, #172]	@ (800712c <HAL_RCC_GetSysClockFreq+0x130>)
 800707e:	623b      	str	r3, [r7, #32]
 8007080:	e012      	b.n	80070a8 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	2b10      	cmp	r3, #16
 8007086:	d102      	bne.n	800708e <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007088:	4b29      	ldr	r3, [pc, #164]	@ (8007130 <HAL_RCC_GetSysClockFreq+0x134>)
 800708a:	623b      	str	r3, [r7, #32]
 800708c:	e00c      	b.n	80070a8 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	2b20      	cmp	r3, #32
 8007092:	d103      	bne.n	800709c <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8007094:	23fa      	movs	r3, #250	@ 0xfa
 8007096:	01db      	lsls	r3, r3, #7
 8007098:	623b      	str	r3, [r7, #32]
 800709a:	e005      	b.n	80070a8 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	2b28      	cmp	r3, #40	@ 0x28
 80070a0:	d102      	bne.n	80070a8 <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80070a2:	2380      	movs	r3, #128	@ 0x80
 80070a4:	021b      	lsls	r3, r3, #8
 80070a6:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	2b18      	cmp	r3, #24
 80070ac:	d135      	bne.n	800711a <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80070ae:	4b1d      	ldr	r3, [pc, #116]	@ (8007124 <HAL_RCC_GetSysClockFreq+0x128>)
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	2203      	movs	r2, #3
 80070b4:	4013      	ands	r3, r2
 80070b6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80070b8:	4b1a      	ldr	r3, [pc, #104]	@ (8007124 <HAL_RCC_GetSysClockFreq+0x128>)
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	091b      	lsrs	r3, r3, #4
 80070be:	2207      	movs	r2, #7
 80070c0:	4013      	ands	r3, r2
 80070c2:	3301      	adds	r3, #1
 80070c4:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d003      	beq.n	80070d4 <HAL_RCC_GetSysClockFreq+0xd8>
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	2b03      	cmp	r3, #3
 80070d0:	d003      	beq.n	80070da <HAL_RCC_GetSysClockFreq+0xde>
 80070d2:	e005      	b.n	80070e0 <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 80070d4:	4b15      	ldr	r3, [pc, #84]	@ (800712c <HAL_RCC_GetSysClockFreq+0x130>)
 80070d6:	61fb      	str	r3, [r7, #28]
        break;
 80070d8:	e005      	b.n	80070e6 <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 80070da:	4b15      	ldr	r3, [pc, #84]	@ (8007130 <HAL_RCC_GetSysClockFreq+0x134>)
 80070dc:	61fb      	str	r3, [r7, #28]
        break;
 80070de:	e002      	b.n	80070e6 <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 80070e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e2:	61fb      	str	r3, [r7, #28]
        break;
 80070e4:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 80070e6:	4b0f      	ldr	r3, [pc, #60]	@ (8007124 <HAL_RCC_GetSysClockFreq+0x128>)
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	0a1b      	lsrs	r3, r3, #8
 80070ec:	227f      	movs	r2, #127	@ 0x7f
 80070ee:	4013      	ands	r3, r2
 80070f0:	69fa      	ldr	r2, [r7, #28]
 80070f2:	4353      	muls	r3, r2
 80070f4:	68f9      	ldr	r1, [r7, #12]
 80070f6:	0018      	movs	r0, r3
 80070f8:	f7f9 f806 	bl	8000108 <__udivsi3>
 80070fc:	0003      	movs	r3, r0
 80070fe:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8007100:	4b08      	ldr	r3, [pc, #32]	@ (8007124 <HAL_RCC_GetSysClockFreq+0x128>)
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	0f5b      	lsrs	r3, r3, #29
 8007106:	2207      	movs	r2, #7
 8007108:	4013      	ands	r3, r2
 800710a:	3301      	adds	r3, #1
 800710c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800710e:	6879      	ldr	r1, [r7, #4]
 8007110:	68b8      	ldr	r0, [r7, #8]
 8007112:	f7f8 fff9 	bl	8000108 <__udivsi3>
 8007116:	0003      	movs	r3, r0
 8007118:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800711a:	6a3b      	ldr	r3, [r7, #32]
}
 800711c:	0018      	movs	r0, r3
 800711e:	46bd      	mov	sp, r7
 8007120:	b00a      	add	sp, #40	@ 0x28
 8007122:	bd80      	pop	{r7, pc}
 8007124:	40021000 	.word	0x40021000
 8007128:	08009790 	.word	0x08009790
 800712c:	00f42400 	.word	0x00f42400
 8007130:	003d0900 	.word	0x003d0900

08007134 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007138:	4b02      	ldr	r3, [pc, #8]	@ (8007144 <HAL_RCC_GetHCLKFreq+0x10>)
 800713a:	681b      	ldr	r3, [r3, #0]
}
 800713c:	0018      	movs	r0, r3
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	46c0      	nop			@ (mov r8, r8)
 8007144:	20000004 	.word	0x20000004

08007148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 800714c:	f7ff fff2 	bl	8007134 <HAL_RCC_GetHCLKFreq>
 8007150:	0001      	movs	r1, r0
 8007152:	4b07      	ldr	r3, [pc, #28]	@ (8007170 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	0b1b      	lsrs	r3, r3, #12
 8007158:	2207      	movs	r2, #7
 800715a:	4013      	ands	r3, r2
 800715c:	4a05      	ldr	r2, [pc, #20]	@ (8007174 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800715e:	5cd3      	ldrb	r3, [r2, r3]
 8007160:	001a      	movs	r2, r3
 8007162:	231f      	movs	r3, #31
 8007164:	4013      	ands	r3, r2
 8007166:	40d9      	lsrs	r1, r3
 8007168:	000b      	movs	r3, r1
}
 800716a:	0018      	movs	r0, r3
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	40021000 	.word	0x40021000
 8007174:	08009788 	.word	0x08009788

08007178 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b086      	sub	sp, #24
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007180:	2300      	movs	r3, #0
 8007182:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007184:	4b2f      	ldr	r3, [pc, #188]	@ (8007244 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007186:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007188:	2380      	movs	r3, #128	@ 0x80
 800718a:	055b      	lsls	r3, r3, #21
 800718c:	4013      	ands	r3, r2
 800718e:	d004      	beq.n	800719a <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007190:	f7ff fa12 	bl	80065b8 <HAL_PWREx_GetVoltageRange>
 8007194:	0003      	movs	r3, r0
 8007196:	617b      	str	r3, [r7, #20]
 8007198:	e017      	b.n	80071ca <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800719a:	4b2a      	ldr	r3, [pc, #168]	@ (8007244 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 800719c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800719e:	4b29      	ldr	r3, [pc, #164]	@ (8007244 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80071a0:	2180      	movs	r1, #128	@ 0x80
 80071a2:	0549      	lsls	r1, r1, #21
 80071a4:	430a      	orrs	r2, r1
 80071a6:	659a      	str	r2, [r3, #88]	@ 0x58
 80071a8:	4b26      	ldr	r3, [pc, #152]	@ (8007244 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80071aa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80071ac:	2380      	movs	r3, #128	@ 0x80
 80071ae:	055b      	lsls	r3, r3, #21
 80071b0:	4013      	ands	r3, r2
 80071b2:	60fb      	str	r3, [r7, #12]
 80071b4:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80071b6:	f7ff f9ff 	bl	80065b8 <HAL_PWREx_GetVoltageRange>
 80071ba:	0003      	movs	r3, r0
 80071bc:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80071be:	4b21      	ldr	r3, [pc, #132]	@ (8007244 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80071c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80071c2:	4b20      	ldr	r3, [pc, #128]	@ (8007244 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80071c4:	4920      	ldr	r1, [pc, #128]	@ (8007248 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 80071c6:	400a      	ands	r2, r1
 80071c8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	2380      	movs	r3, #128	@ 0x80
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d111      	bne.n	80071f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2b80      	cmp	r3, #128	@ 0x80
 80071d8:	d91c      	bls.n	8007214 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2bb0      	cmp	r3, #176	@ 0xb0
 80071de:	d902      	bls.n	80071e6 <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80071e0:	2302      	movs	r3, #2
 80071e2:	613b      	str	r3, [r7, #16]
 80071e4:	e016      	b.n	8007214 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2b90      	cmp	r3, #144	@ 0x90
 80071ea:	d902      	bls.n	80071f2 <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80071ec:	2301      	movs	r3, #1
 80071ee:	613b      	str	r3, [r7, #16]
 80071f0:	e010      	b.n	8007214 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 80071f2:	2300      	movs	r3, #0
 80071f4:	613b      	str	r3, [r7, #16]
 80071f6:	e00d      	b.n	8007214 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80071fc:	d902      	bls.n	8007204 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 80071fe:	2302      	movs	r3, #2
 8007200:	613b      	str	r3, [r7, #16]
 8007202:	e007      	b.n	8007214 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b70      	cmp	r3, #112	@ 0x70
 8007208:	d102      	bne.n	8007210 <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800720a:	2301      	movs	r3, #1
 800720c:	613b      	str	r3, [r7, #16]
 800720e:	e001      	b.n	8007214 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8007210:	2300      	movs	r3, #0
 8007212:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007214:	4b0d      	ldr	r3, [pc, #52]	@ (800724c <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2207      	movs	r2, #7
 800721a:	4393      	bics	r3, r2
 800721c:	0019      	movs	r1, r3
 800721e:	4b0b      	ldr	r3, [pc, #44]	@ (800724c <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	430a      	orrs	r2, r1
 8007224:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8007226:	4b09      	ldr	r3, [pc, #36]	@ (800724c <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2207      	movs	r2, #7
 800722c:	4013      	ands	r3, r2
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	429a      	cmp	r2, r3
 8007232:	d001      	beq.n	8007238 <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e000      	b.n	800723a <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	0018      	movs	r0, r3
 800723c:	46bd      	mov	sp, r7
 800723e:	b006      	add	sp, #24
 8007240:	bd80      	pop	{r7, pc}
 8007242:	46c0      	nop			@ (mov r8, r8)
 8007244:	40021000 	.word	0x40021000
 8007248:	efffffff 	.word	0xefffffff
 800724c:	40022000 	.word	0x40022000

08007250 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b086      	sub	sp, #24
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007258:	2313      	movs	r3, #19
 800725a:	18fb      	adds	r3, r7, r3
 800725c:	2200      	movs	r2, #0
 800725e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007260:	2312      	movs	r3, #18
 8007262:	18fb      	adds	r3, r7, r3
 8007264:	2200      	movs	r2, #0
 8007266:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	2380      	movs	r3, #128	@ 0x80
 800726e:	021b      	lsls	r3, r3, #8
 8007270:	4013      	ands	r3, r2
 8007272:	d100      	bne.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8007274:	e0b7      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007276:	2011      	movs	r0, #17
 8007278:	183b      	adds	r3, r7, r0
 800727a:	2200      	movs	r2, #0
 800727c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800727e:	4b4c      	ldr	r3, [pc, #304]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007280:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007282:	2380      	movs	r3, #128	@ 0x80
 8007284:	055b      	lsls	r3, r3, #21
 8007286:	4013      	ands	r3, r2
 8007288:	d110      	bne.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800728a:	4b49      	ldr	r3, [pc, #292]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800728c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800728e:	4b48      	ldr	r3, [pc, #288]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007290:	2180      	movs	r1, #128	@ 0x80
 8007292:	0549      	lsls	r1, r1, #21
 8007294:	430a      	orrs	r2, r1
 8007296:	659a      	str	r2, [r3, #88]	@ 0x58
 8007298:	4b45      	ldr	r3, [pc, #276]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800729a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800729c:	2380      	movs	r3, #128	@ 0x80
 800729e:	055b      	lsls	r3, r3, #21
 80072a0:	4013      	ands	r3, r2
 80072a2:	60bb      	str	r3, [r7, #8]
 80072a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072a6:	183b      	adds	r3, r7, r0
 80072a8:	2201      	movs	r2, #1
 80072aa:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072ac:	4b41      	ldr	r3, [pc, #260]	@ (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	4b40      	ldr	r3, [pc, #256]	@ (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072b2:	2180      	movs	r1, #128	@ 0x80
 80072b4:	0049      	lsls	r1, r1, #1
 80072b6:	430a      	orrs	r2, r1
 80072b8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80072ba:	f7fe f95b 	bl	8005574 <HAL_GetTick>
 80072be:	0003      	movs	r3, r0
 80072c0:	60fb      	str	r3, [r7, #12]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80072c2:	e00b      	b.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072c4:	f7fe f956 	bl	8005574 <HAL_GetTick>
 80072c8:	0002      	movs	r2, r0
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d904      	bls.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80072d2:	2313      	movs	r3, #19
 80072d4:	18fb      	adds	r3, r7, r3
 80072d6:	2203      	movs	r2, #3
 80072d8:	701a      	strb	r2, [r3, #0]
        break;
 80072da:	e005      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80072dc:	4b35      	ldr	r3, [pc, #212]	@ (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	2380      	movs	r3, #128	@ 0x80
 80072e2:	005b      	lsls	r3, r3, #1
 80072e4:	4013      	ands	r3, r2
 80072e6:	d0ed      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80072e8:	2313      	movs	r3, #19
 80072ea:	18fb      	adds	r3, r7, r3
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d168      	bne.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80072f2:	4a2f      	ldr	r2, [pc, #188]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072f4:	2390      	movs	r3, #144	@ 0x90
 80072f6:	58d2      	ldr	r2, [r2, r3]
 80072f8:	23c0      	movs	r3, #192	@ 0xc0
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	4013      	ands	r3, r2
 80072fe:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d01f      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	429a      	cmp	r2, r3
 800730e:	d01a      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0xf6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007310:	4a27      	ldr	r2, [pc, #156]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007312:	2390      	movs	r3, #144	@ 0x90
 8007314:	58d3      	ldr	r3, [r2, r3]
 8007316:	4a28      	ldr	r2, [pc, #160]	@ (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007318:	4013      	ands	r3, r2
 800731a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800731c:	4a24      	ldr	r2, [pc, #144]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800731e:	2390      	movs	r3, #144	@ 0x90
 8007320:	58d3      	ldr	r3, [r2, r3]
 8007322:	4923      	ldr	r1, [pc, #140]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007324:	2280      	movs	r2, #128	@ 0x80
 8007326:	0252      	lsls	r2, r2, #9
 8007328:	4313      	orrs	r3, r2
 800732a:	2290      	movs	r2, #144	@ 0x90
 800732c:	508b      	str	r3, [r1, r2]
        __HAL_RCC_BACKUPRESET_RELEASE();
 800732e:	4a20      	ldr	r2, [pc, #128]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007330:	2390      	movs	r3, #144	@ 0x90
 8007332:	58d3      	ldr	r3, [r2, r3]
 8007334:	491e      	ldr	r1, [pc, #120]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007336:	4a21      	ldr	r2, [pc, #132]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8007338:	4013      	ands	r3, r2
 800733a:	2290      	movs	r2, #144	@ 0x90
 800733c:	508b      	str	r3, [r1, r2]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800733e:	491c      	ldr	r1, [pc, #112]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007340:	2290      	movs	r2, #144	@ 0x90
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	508b      	str	r3, [r1, r2]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	2201      	movs	r2, #1
 800734a:	4013      	ands	r3, r2
 800734c:	d017      	beq.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x12e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800734e:	f7fe f911 	bl	8005574 <HAL_GetTick>
 8007352:	0003      	movs	r3, r0
 8007354:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007356:	e00c      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007358:	f7fe f90c 	bl	8005574 <HAL_GetTick>
 800735c:	0002      	movs	r2, r0
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	4a17      	ldr	r2, [pc, #92]	@ (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d904      	bls.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x122>
          {
            ret = HAL_TIMEOUT;
 8007368:	2313      	movs	r3, #19
 800736a:	18fb      	adds	r3, r7, r3
 800736c:	2203      	movs	r2, #3
 800736e:	701a      	strb	r2, [r3, #0]
            break;
 8007370:	e005      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x12e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007372:	4a0f      	ldr	r2, [pc, #60]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007374:	2390      	movs	r3, #144	@ 0x90
 8007376:	58d3      	ldr	r3, [r2, r3]
 8007378:	2202      	movs	r2, #2
 800737a:	4013      	ands	r3, r2
 800737c:	d0ec      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x108>
          }
        }
      }

      if (ret == HAL_OK)
 800737e:	2313      	movs	r3, #19
 8007380:	18fb      	adds	r3, r7, r3
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10b      	bne.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007388:	4a09      	ldr	r2, [pc, #36]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800738a:	2390      	movs	r3, #144	@ 0x90
 800738c:	58d3      	ldr	r3, [r2, r3]
 800738e:	4a0a      	ldr	r2, [pc, #40]	@ (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007390:	401a      	ands	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007396:	4906      	ldr	r1, [pc, #24]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007398:	4313      	orrs	r3, r2
 800739a:	2290      	movs	r2, #144	@ 0x90
 800739c:	508b      	str	r3, [r1, r2]
 800739e:	e017      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80073a0:	2312      	movs	r3, #18
 80073a2:	18fb      	adds	r3, r7, r3
 80073a4:	2213      	movs	r2, #19
 80073a6:	18ba      	adds	r2, r7, r2
 80073a8:	7812      	ldrb	r2, [r2, #0]
 80073aa:	701a      	strb	r2, [r3, #0]
 80073ac:	e010      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80073ae:	46c0      	nop			@ (mov r8, r8)
 80073b0:	40021000 	.word	0x40021000
 80073b4:	40007000 	.word	0x40007000
 80073b8:	fffffcff 	.word	0xfffffcff
 80073bc:	fffeffff 	.word	0xfffeffff
 80073c0:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073c4:	2312      	movs	r3, #18
 80073c6:	18fb      	adds	r3, r7, r3
 80073c8:	2213      	movs	r2, #19
 80073ca:	18ba      	adds	r2, r7, r2
 80073cc:	7812      	ldrb	r2, [r2, #0]
 80073ce:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80073d0:	2311      	movs	r3, #17
 80073d2:	18fb      	adds	r3, r7, r3
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d105      	bne.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073da:	4ba4      	ldr	r3, [pc, #656]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80073dc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80073de:	4ba3      	ldr	r3, [pc, #652]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80073e0:	49a3      	ldr	r1, [pc, #652]	@ (8007670 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 80073e2:	400a      	ands	r2, r1
 80073e4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2201      	movs	r2, #1
 80073ec:	4013      	ands	r3, r2
 80073ee:	d00b      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80073f0:	4a9e      	ldr	r2, [pc, #632]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80073f2:	2388      	movs	r3, #136	@ 0x88
 80073f4:	58d3      	ldr	r3, [r2, r3]
 80073f6:	2203      	movs	r2, #3
 80073f8:	4393      	bics	r3, r2
 80073fa:	001a      	movs	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	499a      	ldr	r1, [pc, #616]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007402:	4313      	orrs	r3, r2
 8007404:	2288      	movs	r2, #136	@ 0x88
 8007406:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2202      	movs	r2, #2
 800740e:	4013      	ands	r3, r2
 8007410:	d00b      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007412:	4a96      	ldr	r2, [pc, #600]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007414:	2388      	movs	r3, #136	@ 0x88
 8007416:	58d3      	ldr	r3, [r2, r3]
 8007418:	220c      	movs	r2, #12
 800741a:	4393      	bics	r3, r2
 800741c:	001a      	movs	r2, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	4992      	ldr	r1, [pc, #584]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007424:	4313      	orrs	r3, r2
 8007426:	2288      	movs	r2, #136	@ 0x88
 8007428:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2210      	movs	r2, #16
 8007430:	4013      	ands	r3, r2
 8007432:	d00a      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007434:	4a8d      	ldr	r2, [pc, #564]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007436:	2388      	movs	r3, #136	@ 0x88
 8007438:	58d3      	ldr	r3, [r2, r3]
 800743a:	4a8e      	ldr	r2, [pc, #568]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800743c:	401a      	ands	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	498a      	ldr	r1, [pc, #552]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007444:	4313      	orrs	r3, r2
 8007446:	2288      	movs	r2, #136	@ 0x88
 8007448:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2208      	movs	r2, #8
 8007450:	4013      	ands	r3, r2
 8007452:	d00a      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8007454:	4a85      	ldr	r2, [pc, #532]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007456:	2388      	movs	r3, #136	@ 0x88
 8007458:	58d3      	ldr	r3, [r2, r3]
 800745a:	4a87      	ldr	r2, [pc, #540]	@ (8007678 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800745c:	401a      	ands	r2, r3
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	4982      	ldr	r1, [pc, #520]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007464:	4313      	orrs	r3, r2
 8007466:	2288      	movs	r2, #136	@ 0x88
 8007468:	508b      	str	r3, [r1, r2]
  }
#if defined (LPUART3)
  /*-------------------------- LPUART3 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART3) == RCC_PERIPHCLK_LPUART3)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2204      	movs	r2, #4
 8007470:	4013      	ands	r3, r2
 8007472:	d00b      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART3CLKSOURCE(PeriphClkInit->Lpuart3ClockSelection));

    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
 8007474:	4a7d      	ldr	r2, [pc, #500]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007476:	2388      	movs	r3, #136	@ 0x88
 8007478:	58d3      	ldr	r3, [r2, r3]
 800747a:	22c0      	movs	r2, #192	@ 0xc0
 800747c:	4393      	bics	r3, r2
 800747e:	001a      	movs	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	4979      	ldr	r1, [pc, #484]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007486:	4313      	orrs	r3, r2
 8007488:	2288      	movs	r2, #136	@ 0x88
 800748a:	508b      	str	r3, [r1, r2]
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2220      	movs	r2, #32
 8007492:	4013      	ands	r3, r2
 8007494:	d00a      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007496:	4a75      	ldr	r2, [pc, #468]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007498:	2388      	movs	r3, #136	@ 0x88
 800749a:	58d3      	ldr	r3, [r2, r3]
 800749c:	4a77      	ldr	r2, [pc, #476]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800749e:	401a      	ands	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	4971      	ldr	r1, [pc, #452]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80074a6:	4313      	orrs	r3, r2
 80074a8:	2288      	movs	r2, #136	@ 0x88
 80074aa:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2240      	movs	r2, #64	@ 0x40
 80074b2:	4013      	ands	r3, r2
 80074b4:	d00a      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80074b6:	4a6d      	ldr	r2, [pc, #436]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80074b8:	2388      	movs	r3, #136	@ 0x88
 80074ba:	58d3      	ldr	r3, [r2, r3]
 80074bc:	4a70      	ldr	r2, [pc, #448]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 80074be:	401a      	ands	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	69db      	ldr	r3, [r3, #28]
 80074c4:	4969      	ldr	r1, [pc, #420]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80074c6:	4313      	orrs	r3, r2
 80074c8:	2288      	movs	r2, #136	@ 0x88
 80074ca:	508b      	str	r3, [r1, r2]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2280      	movs	r2, #128	@ 0x80
 80074d2:	4013      	ands	r3, r2
 80074d4:	d00a      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80074d6:	4a65      	ldr	r2, [pc, #404]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80074d8:	2388      	movs	r3, #136	@ 0x88
 80074da:	58d3      	ldr	r3, [r2, r3]
 80074dc:	4a69      	ldr	r2, [pc, #420]	@ (8007684 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80074de:	401a      	ands	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a1b      	ldr	r3, [r3, #32]
 80074e4:	4961      	ldr	r1, [pc, #388]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80074e6:	4313      	orrs	r3, r2
 80074e8:	2288      	movs	r2, #136	@ 0x88
 80074ea:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	2380      	movs	r3, #128	@ 0x80
 80074f2:	005b      	lsls	r3, r3, #1
 80074f4:	4013      	ands	r3, r2
 80074f6:	d00a      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80074f8:	4a5c      	ldr	r2, [pc, #368]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80074fa:	2388      	movs	r3, #136	@ 0x88
 80074fc:	58d3      	ldr	r3, [r2, r3]
 80074fe:	4a62      	ldr	r2, [pc, #392]	@ (8007688 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007500:	401a      	ands	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007506:	4959      	ldr	r1, [pc, #356]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007508:	4313      	orrs	r3, r2
 800750a:	2288      	movs	r2, #136	@ 0x88
 800750c:	508b      	str	r3, [r1, r2]
  }
#if defined (LPTIM3)
  /*----------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	2380      	movs	r3, #128	@ 0x80
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4013      	ands	r3, r2
 8007518:	d00a      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800751a:	4a54      	ldr	r2, [pc, #336]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800751c:	2388      	movs	r3, #136	@ 0x88
 800751e:	58d3      	ldr	r3, [r2, r3]
 8007520:	4a5a      	ldr	r2, [pc, #360]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8007522:	401a      	ands	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007528:	4950      	ldr	r1, [pc, #320]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800752a:	4313      	orrs	r3, r2
 800752c:	2288      	movs	r2, #136	@ 0x88
 800752e:	508b      	str	r3, [r1, r2]
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	2380      	movs	r3, #128	@ 0x80
 8007536:	01db      	lsls	r3, r3, #7
 8007538:	4013      	ands	r3, r2
 800753a:	d017      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007540:	2380      	movs	r3, #128	@ 0x80
 8007542:	055b      	lsls	r3, r3, #21
 8007544:	429a      	cmp	r2, r3
 8007546:	d106      	bne.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x306>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 8007548:	4b48      	ldr	r3, [pc, #288]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800754a:	68da      	ldr	r2, [r3, #12]
 800754c:	4b47      	ldr	r3, [pc, #284]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800754e:	2180      	movs	r1, #128	@ 0x80
 8007550:	0249      	lsls	r1, r1, #9
 8007552:	430a      	orrs	r2, r1
 8007554:	60da      	str	r2, [r3, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007556:	4a45      	ldr	r2, [pc, #276]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007558:	2388      	movs	r3, #136	@ 0x88
 800755a:	58d3      	ldr	r3, [r2, r3]
 800755c:	4a4c      	ldr	r2, [pc, #304]	@ (8007690 <HAL_RCCEx_PeriphCLKConfig+0x440>)
 800755e:	401a      	ands	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007564:	4941      	ldr	r1, [pc, #260]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007566:	4313      	orrs	r3, r2
 8007568:	2288      	movs	r2, #136	@ 0x88
 800756a:	508b      	str	r3, [r1, r2]
  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	2380      	movs	r3, #128	@ 0x80
 8007572:	015b      	lsls	r3, r3, #5
 8007574:	4013      	ands	r3, r2
 8007576:	d017      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLQ)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800757c:	2380      	movs	r3, #128	@ 0x80
 800757e:	051b      	lsls	r3, r3, #20
 8007580:	429a      	cmp	r2, r3
 8007582:	d106      	bne.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8007584:	4b39      	ldr	r3, [pc, #228]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007586:	68da      	ldr	r2, [r3, #12]
 8007588:	4b38      	ldr	r3, [pc, #224]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800758a:	2180      	movs	r1, #128	@ 0x80
 800758c:	0449      	lsls	r1, r1, #17
 800758e:	430a      	orrs	r2, r1
 8007590:	60da      	str	r2, [r3, #12]
    }
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007592:	4a36      	ldr	r2, [pc, #216]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007594:	2388      	movs	r3, #136	@ 0x88
 8007596:	58d3      	ldr	r3, [r2, r3]
 8007598:	4a3e      	ldr	r2, [pc, #248]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800759a:	401a      	ands	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075a0:	4932      	ldr	r1, [pc, #200]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80075a2:	4313      	orrs	r3, r2
 80075a4:	2288      	movs	r2, #136	@ 0x88
 80075a6:	508b      	str	r3, [r1, r2]

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	2380      	movs	r3, #128	@ 0x80
 80075ae:	019b      	lsls	r3, r3, #6
 80075b0:	4013      	ands	r3, r2
 80075b2:	d017      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075b8:	2380      	movs	r3, #128	@ 0x80
 80075ba:	051b      	lsls	r3, r3, #20
 80075bc:	429a      	cmp	r2, r3
 80075be:	d106      	bne.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x37e>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 80075c0:	4b2a      	ldr	r3, [pc, #168]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80075c2:	68da      	ldr	r2, [r3, #12]
 80075c4:	4b29      	ldr	r3, [pc, #164]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80075c6:	2180      	movs	r1, #128	@ 0x80
 80075c8:	0449      	lsls	r1, r1, #17
 80075ca:	430a      	orrs	r2, r1
 80075cc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80075ce:	4a27      	ldr	r2, [pc, #156]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80075d0:	2388      	movs	r3, #136	@ 0x88
 80075d2:	58d3      	ldr	r3, [r2, r3]
 80075d4:	4a2f      	ldr	r2, [pc, #188]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80075d6:	401a      	ands	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075dc:	4923      	ldr	r1, [pc, #140]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	2288      	movs	r2, #136	@ 0x88
 80075e2:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	2380      	movs	r3, #128	@ 0x80
 80075ea:	00db      	lsls	r3, r3, #3
 80075ec:	4013      	ands	r3, r2
 80075ee:	d017      	beq.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075f4:	2380      	movs	r3, #128	@ 0x80
 80075f6:	045b      	lsls	r3, r3, #17
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d106      	bne.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 80075fc:	4b1b      	ldr	r3, [pc, #108]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80075fe:	68da      	ldr	r2, [r3, #12]
 8007600:	4b1a      	ldr	r3, [pc, #104]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007602:	2180      	movs	r1, #128	@ 0x80
 8007604:	0449      	lsls	r1, r1, #17
 8007606:	430a      	orrs	r2, r1
 8007608:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800760a:	4a18      	ldr	r2, [pc, #96]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800760c:	2388      	movs	r3, #136	@ 0x88
 800760e:	58d3      	ldr	r3, [r2, r3]
 8007610:	4a21      	ldr	r2, [pc, #132]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8007612:	401a      	ands	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007618:	4914      	ldr	r1, [pc, #80]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800761a:	4313      	orrs	r3, r2
 800761c:	2288      	movs	r2, #136	@ 0x88
 800761e:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	2380      	movs	r3, #128	@ 0x80
 8007626:	011b      	lsls	r3, r3, #4
 8007628:	4013      	ands	r3, r2
 800762a:	d017      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007630:	2380      	movs	r3, #128	@ 0x80
 8007632:	049b      	lsls	r3, r3, #18
 8007634:	429a      	cmp	r2, r3
 8007636:	d106      	bne.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8007638:	4b0c      	ldr	r3, [pc, #48]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800763a:	68da      	ldr	r2, [r3, #12]
 800763c:	4b0b      	ldr	r3, [pc, #44]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800763e:	2180      	movs	r1, #128	@ 0x80
 8007640:	0449      	lsls	r1, r1, #17
 8007642:	430a      	orrs	r2, r1
 8007644:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007646:	4a09      	ldr	r2, [pc, #36]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007648:	2388      	movs	r3, #136	@ 0x88
 800764a:	58d3      	ldr	r3, [r2, r3]
 800764c:	4a12      	ldr	r2, [pc, #72]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800764e:	401a      	ands	r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007654:	4905      	ldr	r1, [pc, #20]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007656:	4313      	orrs	r3, r2
 8007658:	2288      	movs	r2, #136	@ 0x88
 800765a:	508b      	str	r3, [r1, r2]

  }

  return status;
 800765c:	2312      	movs	r3, #18
 800765e:	18fb      	adds	r3, r7, r3
 8007660:	781b      	ldrb	r3, [r3, #0]
}
 8007662:	0018      	movs	r0, r3
 8007664:	46bd      	mov	sp, r7
 8007666:	b006      	add	sp, #24
 8007668:	bd80      	pop	{r7, pc}
 800766a:	46c0      	nop			@ (mov r8, r8)
 800766c:	40021000 	.word	0x40021000
 8007670:	efffffff 	.word	0xefffffff
 8007674:	fffff3ff 	.word	0xfffff3ff
 8007678:	fffffcff 	.word	0xfffffcff
 800767c:	ffffcfff 	.word	0xffffcfff
 8007680:	fffcffff 	.word	0xfffcffff
 8007684:	fff3ffff 	.word	0xfff3ffff
 8007688:	ffcfffff 	.word	0xffcfffff
 800768c:	ff3fffff 	.word	0xff3fffff
 8007690:	cfffffff 	.word	0xcfffffff
 8007694:	f3ffffff 	.word	0xf3ffffff
 8007698:	feffffff 	.word	0xfeffffff

0800769c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM1  TIM1 peripheral clock (only for devices with TIM1)
  *            @arg @ref RCC_PERIPHCLK_TIM15  TIM15 peripheral clock (only for devices with TIM15)
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800769c:	b590      	push	{r4, r7, lr}
 800769e:	b089      	sub	sp, #36	@ 0x24
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80076a4:	2300      	movs	r3, #0
 80076a6:	61fb      	str	r3, [r7, #28]
  PLL_ClocksTypeDef pll_freq;
  uint32_t msirange;
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	2380      	movs	r3, #128	@ 0x80
 80076ac:	021b      	lsls	r3, r3, #8
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d154      	bne.n	800775c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
  {
    /* Get the current RCC_PERIPHCLK_RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80076b2:	4ad5      	ldr	r2, [pc, #852]	@ (8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80076b4:	2390      	movs	r3, #144	@ 0x90
 80076b6:	58d2      	ldr	r2, [r2, r3]
 80076b8:	23c0      	movs	r3, #192	@ 0xc0
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4013      	ands	r3, r2
 80076be:	617b      	str	r3, [r7, #20]

    switch (srcclk)
 80076c0:	697a      	ldr	r2, [r7, #20]
 80076c2:	23c0      	movs	r3, #192	@ 0xc0
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d039      	beq.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 80076ca:	697a      	ldr	r2, [r7, #20]
 80076cc:	23c0      	movs	r3, #192	@ 0xc0
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d901      	bls.n	80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80076d4:	f000 fd1a 	bl	800810c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80076d8:	697a      	ldr	r2, [r7, #20]
 80076da:	2380      	movs	r3, #128	@ 0x80
 80076dc:	005b      	lsls	r3, r3, #1
 80076de:	429a      	cmp	r2, r3
 80076e0:	d006      	beq.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 80076e2:	697a      	ldr	r2, [r7, #20]
 80076e4:	2380      	movs	r3, #128	@ 0x80
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d00f      	beq.n	800770c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 80076ec:	f000 fd0e 	bl	800810c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80076f0:	4ac5      	ldr	r2, [pc, #788]	@ (8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80076f2:	2390      	movs	r3, #144	@ 0x90
 80076f4:	58d3      	ldr	r3, [r2, r3]
 80076f6:	2202      	movs	r2, #2
 80076f8:	4013      	ands	r3, r2
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d001      	beq.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 80076fe:	f000 fd07 	bl	8008110 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
          frequency = LSE_VALUE;
 8007702:	2380      	movs	r3, #128	@ 0x80
 8007704:	021b      	lsls	r3, r3, #8
 8007706:	61fb      	str	r3, [r7, #28]
        break;
 8007708:	f000 fd02 	bl	8008110 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800770c:	4abe      	ldr	r2, [pc, #760]	@ (8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800770e:	2394      	movs	r3, #148	@ 0x94
 8007710:	58d3      	ldr	r3, [r2, r3]
 8007712:	2202      	movs	r2, #2
 8007714:	4013      	ands	r3, r2
 8007716:	2b02      	cmp	r3, #2
 8007718:	d001      	beq.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 800771a:	f000 fcfb 	bl	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 800771e:	4aba      	ldr	r2, [pc, #744]	@ (8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007720:	2394      	movs	r3, #148	@ 0x94
 8007722:	58d3      	ldr	r3, [r2, r3]
 8007724:	2204      	movs	r2, #4
 8007726:	4013      	ands	r3, r2
 8007728:	2b04      	cmp	r3, #4
 800772a:	d103      	bne.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSI_VALUE / 128U;
 800772c:	23fa      	movs	r3, #250	@ 0xfa
 800772e:	61fb      	str	r3, [r7, #28]
        break;
 8007730:	f000 fcf0 	bl	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
            frequency = LSI_VALUE;
 8007734:	23fa      	movs	r3, #250	@ 0xfa
 8007736:	01db      	lsls	r3, r3, #7
 8007738:	61fb      	str	r3, [r7, #28]
        break;
 800773a:	f000 fceb 	bl	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800773e:	4bb2      	ldr	r3, [pc, #712]	@ (8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	2380      	movs	r3, #128	@ 0x80
 8007744:	029b      	lsls	r3, r3, #10
 8007746:	401a      	ands	r2, r3
 8007748:	2380      	movs	r3, #128	@ 0x80
 800774a:	029b      	lsls	r3, r3, #10
 800774c:	429a      	cmp	r2, r3
 800774e:	d001      	beq.n	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8007750:	f000 fce2 	bl	8008118 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
          frequency = HSE_VALUE / 32U;
 8007754:	4bad      	ldr	r3, [pc, #692]	@ (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 8007756:	61fb      	str	r3, [r7, #28]
        break;
 8007758:	f000 fcde 	bl	8008118 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	2380      	movs	r3, #128	@ 0x80
 8007760:	029b      	lsls	r3, r3, #10
 8007762:	429a      	cmp	r2, r3
 8007764:	d100      	bne.n	8007768 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8007766:	e11a      	b.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	2380      	movs	r3, #128	@ 0x80
 800776c:	029b      	lsls	r3, r3, #10
 800776e:	429a      	cmp	r2, r3
 8007770:	d901      	bls.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8007772:	f000 fcd3 	bl	800811c <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	2380      	movs	r3, #128	@ 0x80
 800777a:	025b      	lsls	r3, r3, #9
 800777c:	429a      	cmp	r2, r3
 800777e:	d100      	bne.n	8007782 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8007780:	e10d      	b.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	2380      	movs	r3, #128	@ 0x80
 8007786:	025b      	lsls	r3, r3, #9
 8007788:	429a      	cmp	r2, r3
 800778a:	d901      	bls.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800778c:	f000 fcc6 	bl	800811c <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	2380      	movs	r3, #128	@ 0x80
 8007794:	01db      	lsls	r3, r3, #7
 8007796:	429a      	cmp	r2, r3
 8007798:	d100      	bne.n	800779c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800779a:	e1eb      	b.n	8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	2380      	movs	r3, #128	@ 0x80
 80077a0:	01db      	lsls	r3, r3, #7
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d901      	bls.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80077a6:	f000 fcb9 	bl	800811c <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	2380      	movs	r3, #128	@ 0x80
 80077ae:	019b      	lsls	r3, r3, #6
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d101      	bne.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 80077b4:	f000 fc50 	bl	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	2380      	movs	r3, #128	@ 0x80
 80077bc:	019b      	lsls	r3, r3, #6
 80077be:	429a      	cmp	r2, r3
 80077c0:	d901      	bls.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80077c2:	f000 fcab 	bl	800811c <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	2380      	movs	r3, #128	@ 0x80
 80077ca:	015b      	lsls	r3, r3, #5
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d101      	bne.n	80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80077d0:	f000 fbe2 	bl	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	2380      	movs	r3, #128	@ 0x80
 80077d8:	015b      	lsls	r3, r3, #5
 80077da:	429a      	cmp	r2, r3
 80077dc:	d901      	bls.n	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80077de:	f000 fc9d 	bl	800811c <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	2380      	movs	r3, #128	@ 0x80
 80077e6:	011b      	lsls	r3, r3, #4
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d101      	bne.n	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80077ec:	f000 fba9 	bl	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	2380      	movs	r3, #128	@ 0x80
 80077f4:	011b      	lsls	r3, r3, #4
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d901      	bls.n	80077fe <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 80077fa:	f000 fc8f 	bl	800811c <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	2380      	movs	r3, #128	@ 0x80
 8007802:	00db      	lsls	r3, r3, #3
 8007804:	429a      	cmp	r2, r3
 8007806:	d101      	bne.n	800780c <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8007808:	f000 fb70 	bl	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	2380      	movs	r3, #128	@ 0x80
 8007810:	00db      	lsls	r3, r3, #3
 8007812:	429a      	cmp	r2, r3
 8007814:	d901      	bls.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8007816:	f000 fc81 	bl	800811c <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	2380      	movs	r3, #128	@ 0x80
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	429a      	cmp	r2, r3
 8007822:	d100      	bne.n	8007826 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 8007824:	e305      	b.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0x796>
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	2380      	movs	r3, #128	@ 0x80
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	429a      	cmp	r2, r3
 800782e:	d901      	bls.n	8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 8007830:	f000 fc74 	bl	800811c <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	2380      	movs	r3, #128	@ 0x80
 8007838:	005b      	lsls	r3, r3, #1
 800783a:	429a      	cmp	r2, r3
 800783c:	d100      	bne.n	8007840 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800783e:	e29b      	b.n	8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	2380      	movs	r3, #128	@ 0x80
 8007844:	005b      	lsls	r3, r3, #1
 8007846:	429a      	cmp	r2, r3
 8007848:	d901      	bls.n	800784e <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 800784a:	f000 fc67 	bl	800811c <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2b80      	cmp	r3, #128	@ 0x80
 8007852:	d100      	bne.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 8007854:	e22f      	b.n	8007cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2b80      	cmp	r3, #128	@ 0x80
 800785a:	d901      	bls.n	8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800785c:	f000 fc5e 	bl	800811c <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b20      	cmp	r3, #32
 8007864:	d80f      	bhi.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d101      	bne.n	8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 800786c:	f000 fc56 	bl	800811c <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b20      	cmp	r3, #32
 8007874:	d901      	bls.n	800787a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 8007876:	f000 fc51 	bl	800811c <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	009a      	lsls	r2, r3, #2
 800787e:	4b64      	ldr	r3, [pc, #400]	@ (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 8007880:	18d3      	adds	r3, r2, r3
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	469f      	mov	pc, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2b40      	cmp	r3, #64	@ 0x40
 800788a:	d100      	bne.n	800788e <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 800788c:	e1df      	b.n	8007c4e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            break;
        }
        break;
      }
      default:
        break;
 800788e:	f000 fc45 	bl	800811c <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007892:	4a5d      	ldr	r2, [pc, #372]	@ (8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007894:	2388      	movs	r3, #136	@ 0x88
 8007896:	58d3      	ldr	r3, [r2, r3]
 8007898:	2203      	movs	r2, #3
 800789a:	4013      	ands	r3, r2
 800789c:	617b      	str	r3, [r7, #20]
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	2b03      	cmp	r3, #3
 80078a2:	d025      	beq.n	80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	2b03      	cmp	r3, #3
 80078a8:	d82d      	bhi.n	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d013      	beq.n	80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	d827      	bhi.n	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d003      	beq.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d005      	beq.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0x232>
            break;
 80078c2:	e020      	b.n	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
            frequency = HAL_RCC_GetPCLK1Freq();
 80078c4:	f7ff fc40 	bl	8007148 <HAL_RCC_GetPCLK1Freq>
 80078c8:	0003      	movs	r3, r0
 80078ca:	61fb      	str	r3, [r7, #28]
            break;
 80078cc:	e022      	b.n	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            frequency = HAL_RCC_GetSysClockFreq();
 80078ce:	f7ff fb95 	bl	8006ffc <HAL_RCC_GetSysClockFreq>
 80078d2:	0003      	movs	r3, r0
 80078d4:	61fb      	str	r3, [r7, #28]
            break;
 80078d6:	e01d      	b.n	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80078d8:	4b4b      	ldr	r3, [pc, #300]	@ (8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	2380      	movs	r3, #128	@ 0x80
 80078de:	00db      	lsls	r3, r3, #3
 80078e0:	401a      	ands	r2, r3
 80078e2:	2380      	movs	r3, #128	@ 0x80
 80078e4:	00db      	lsls	r3, r3, #3
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d110      	bne.n	800790c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
              frequency = HSI_VALUE;
 80078ea:	4b4a      	ldr	r3, [pc, #296]	@ (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 80078ec:	61fb      	str	r3, [r7, #28]
            break;
 80078ee:	e00d      	b.n	800790c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80078f0:	4a45      	ldr	r2, [pc, #276]	@ (8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80078f2:	2390      	movs	r3, #144	@ 0x90
 80078f4:	58d3      	ldr	r3, [r2, r3]
 80078f6:	2202      	movs	r2, #2
 80078f8:	4013      	ands	r3, r2
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d109      	bne.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
              frequency = LSE_VALUE;
 80078fe:	2380      	movs	r3, #128	@ 0x80
 8007900:	021b      	lsls	r3, r3, #8
 8007902:	61fb      	str	r3, [r7, #28]
            break;
 8007904:	e005      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
            break;
 8007906:	46c0      	nop			@ (mov r8, r8)
 8007908:	f000 fc09 	bl	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800790c:	46c0      	nop			@ (mov r8, r8)
 800790e:	f000 fc06 	bl	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007912:	46c0      	nop			@ (mov r8, r8)
        break;
 8007914:	f000 fc03 	bl	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007918:	4a3b      	ldr	r2, [pc, #236]	@ (8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800791a:	2388      	movs	r3, #136	@ 0x88
 800791c:	58d3      	ldr	r3, [r2, r3]
 800791e:	220c      	movs	r2, #12
 8007920:	4013      	ands	r3, r2
 8007922:	617b      	str	r3, [r7, #20]
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	2b0c      	cmp	r3, #12
 8007928:	d025      	beq.n	8007976 <HAL_RCCEx_GetPeriphCLKFreq+0x2da>
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	2b0c      	cmp	r3, #12
 800792e:	d82d      	bhi.n	800798c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	2b08      	cmp	r3, #8
 8007934:	d013      	beq.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	2b08      	cmp	r3, #8
 800793a:	d827      	bhi.n	800798c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d003      	beq.n	800794a <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	2b04      	cmp	r3, #4
 8007946:	d005      	beq.n	8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
            break;
 8007948:	e020      	b.n	800798c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
            frequency = HAL_RCC_GetPCLK1Freq();
 800794a:	f7ff fbfd 	bl	8007148 <HAL_RCC_GetPCLK1Freq>
 800794e:	0003      	movs	r3, r0
 8007950:	61fb      	str	r3, [r7, #28]
            break;
 8007952:	e022      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            frequency = HAL_RCC_GetSysClockFreq();
 8007954:	f7ff fb52 	bl	8006ffc <HAL_RCC_GetSysClockFreq>
 8007958:	0003      	movs	r3, r0
 800795a:	61fb      	str	r3, [r7, #28]
            break;
 800795c:	e01d      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800795e:	4b2a      	ldr	r3, [pc, #168]	@ (8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	2380      	movs	r3, #128	@ 0x80
 8007964:	00db      	lsls	r3, r3, #3
 8007966:	401a      	ands	r2, r3
 8007968:	2380      	movs	r3, #128	@ 0x80
 800796a:	00db      	lsls	r3, r3, #3
 800796c:	429a      	cmp	r2, r3
 800796e:	d110      	bne.n	8007992 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
              frequency = HSI_VALUE;
 8007970:	4b28      	ldr	r3, [pc, #160]	@ (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 8007972:	61fb      	str	r3, [r7, #28]
            break;
 8007974:	e00d      	b.n	8007992 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007976:	4a24      	ldr	r2, [pc, #144]	@ (8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007978:	2390      	movs	r3, #144	@ 0x90
 800797a:	58d3      	ldr	r3, [r2, r3]
 800797c:	2202      	movs	r2, #2
 800797e:	4013      	ands	r3, r2
 8007980:	2b02      	cmp	r3, #2
 8007982:	d109      	bne.n	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
              frequency = LSE_VALUE;
 8007984:	2380      	movs	r3, #128	@ 0x80
 8007986:	021b      	lsls	r3, r3, #8
 8007988:	61fb      	str	r3, [r7, #28]
            break;
 800798a:	e005      	b.n	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
            break;
 800798c:	46c0      	nop			@ (mov r8, r8)
 800798e:	f000 fbc6 	bl	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007992:	46c0      	nop			@ (mov r8, r8)
 8007994:	f000 fbc3 	bl	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007998:	46c0      	nop			@ (mov r8, r8)
        break;
 800799a:	f000 fbc0 	bl	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        frequency = HAL_RCC_GetPCLK1Freq();
 800799e:	f7ff fbd3 	bl	8007148 <HAL_RCC_GetPCLK1Freq>
 80079a2:	0003      	movs	r3, r0
 80079a4:	61fb      	str	r3, [r7, #28]
        break;
 80079a6:	f000 fbba 	bl	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80079aa:	4a17      	ldr	r2, [pc, #92]	@ (8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80079ac:	2388      	movs	r3, #136	@ 0x88
 80079ae:	58d2      	ldr	r2, [r2, r3]
 80079b0:	23c0      	movs	r3, #192	@ 0xc0
 80079b2:	011b      	lsls	r3, r3, #4
 80079b4:	4013      	ands	r3, r2
 80079b6:	617b      	str	r3, [r7, #20]
 80079b8:	697a      	ldr	r2, [r7, #20]
 80079ba:	23c0      	movs	r3, #192	@ 0xc0
 80079bc:	011b      	lsls	r3, r3, #4
 80079be:	429a      	cmp	r2, r3
 80079c0:	d036      	beq.n	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 80079c2:	697a      	ldr	r2, [r7, #20]
 80079c4:	23c0      	movs	r3, #192	@ 0xc0
 80079c6:	011b      	lsls	r3, r3, #4
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d83c      	bhi.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80079cc:	697a      	ldr	r2, [r7, #20]
 80079ce:	2380      	movs	r3, #128	@ 0x80
 80079d0:	011b      	lsls	r3, r3, #4
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d020      	beq.n	8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	2380      	movs	r3, #128	@ 0x80
 80079da:	011b      	lsls	r3, r3, #4
 80079dc:	429a      	cmp	r2, r3
 80079de:	d832      	bhi.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d005      	beq.n	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 80079e6:	697a      	ldr	r2, [r7, #20]
 80079e8:	2380      	movs	r3, #128	@ 0x80
 80079ea:	00db      	lsls	r3, r3, #3
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d005      	beq.n	80079fc <HAL_RCCEx_GetPeriphCLKFreq+0x360>
            break;
 80079f0:	e029      	b.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 80079f2:	f7ff fba9 	bl	8007148 <HAL_RCC_GetPCLK1Freq>
 80079f6:	0003      	movs	r3, r0
 80079f8:	61fb      	str	r3, [r7, #28]
            break;
 80079fa:	e02b      	b.n	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
            frequency = HAL_RCC_GetSysClockFreq();
 80079fc:	f7ff fafe 	bl	8006ffc <HAL_RCC_GetSysClockFreq>
 8007a00:	0003      	movs	r3, r0
 8007a02:	61fb      	str	r3, [r7, #28]
            break;
 8007a04:	e026      	b.n	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8007a06:	46c0      	nop			@ (mov r8, r8)
 8007a08:	40021000 	.word	0x40021000
 8007a0c:	0001e848 	.word	0x0001e848
 8007a10:	080097c0 	.word	0x080097c0
 8007a14:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a18:	4bbb      	ldr	r3, [pc, #748]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	2380      	movs	r3, #128	@ 0x80
 8007a1e:	00db      	lsls	r3, r3, #3
 8007a20:	401a      	ands	r2, r3
 8007a22:	2380      	movs	r3, #128	@ 0x80
 8007a24:	00db      	lsls	r3, r3, #3
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d110      	bne.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
              frequency = HSI_VALUE;
 8007a2a:	4bb8      	ldr	r3, [pc, #736]	@ (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8007a2c:	61fb      	str	r3, [r7, #28]
            break;
 8007a2e:	e00d      	b.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007a30:	4ab5      	ldr	r2, [pc, #724]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8007a32:	2390      	movs	r3, #144	@ 0x90
 8007a34:	58d3      	ldr	r3, [r2, r3]
 8007a36:	2202      	movs	r2, #2
 8007a38:	4013      	ands	r3, r2
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d109      	bne.n	8007a52 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
              frequency = LSE_VALUE;
 8007a3e:	2380      	movs	r3, #128	@ 0x80
 8007a40:	021b      	lsls	r3, r3, #8
 8007a42:	61fb      	str	r3, [r7, #28]
            break;
 8007a44:	e005      	b.n	8007a52 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
            break;
 8007a46:	46c0      	nop			@ (mov r8, r8)
 8007a48:	f000 fb69 	bl	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007a4c:	46c0      	nop			@ (mov r8, r8)
 8007a4e:	f000 fb66 	bl	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007a52:	46c0      	nop			@ (mov r8, r8)
        break;
 8007a54:	f000 fb63 	bl	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 8007a58:	4aab      	ldr	r2, [pc, #684]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8007a5a:	2388      	movs	r3, #136	@ 0x88
 8007a5c:	58d2      	ldr	r2, [r2, r3]
 8007a5e:	23c0      	movs	r3, #192	@ 0xc0
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	4013      	ands	r3, r2
 8007a64:	617b      	str	r3, [r7, #20]
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	23c0      	movs	r3, #192	@ 0xc0
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d02d      	beq.n	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x430>
 8007a70:	697a      	ldr	r2, [r7, #20]
 8007a72:	23c0      	movs	r3, #192	@ 0xc0
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d833      	bhi.n	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8007a7a:	697a      	ldr	r2, [r7, #20]
 8007a7c:	2380      	movs	r3, #128	@ 0x80
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d017      	beq.n	8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8007a84:	697a      	ldr	r2, [r7, #20]
 8007a86:	2380      	movs	r3, #128	@ 0x80
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d829      	bhi.n	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d005      	beq.n	8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 8007a94:	697a      	ldr	r2, [r7, #20]
 8007a96:	2380      	movs	r3, #128	@ 0x80
 8007a98:	005b      	lsls	r3, r3, #1
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d005      	beq.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            break;
 8007a9e:	e020      	b.n	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
            frequency = HAL_RCC_GetPCLK1Freq();
 8007aa0:	f7ff fb52 	bl	8007148 <HAL_RCC_GetPCLK1Freq>
 8007aa4:	0003      	movs	r3, r0
 8007aa6:	61fb      	str	r3, [r7, #28]
            break;
 8007aa8:	e022      	b.n	8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            frequency = HAL_RCC_GetSysClockFreq();
 8007aaa:	f7ff faa7 	bl	8006ffc <HAL_RCC_GetSysClockFreq>
 8007aae:	0003      	movs	r3, r0
 8007ab0:	61fb      	str	r3, [r7, #28]
            break;
 8007ab2:	e01d      	b.n	8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ab4:	4b94      	ldr	r3, [pc, #592]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	2380      	movs	r3, #128	@ 0x80
 8007aba:	00db      	lsls	r3, r3, #3
 8007abc:	401a      	ands	r2, r3
 8007abe:	2380      	movs	r3, #128	@ 0x80
 8007ac0:	00db      	lsls	r3, r3, #3
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d110      	bne.n	8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
              frequency = HSI_VALUE;
 8007ac6:	4b91      	ldr	r3, [pc, #580]	@ (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8007ac8:	61fb      	str	r3, [r7, #28]
            break;
 8007aca:	e00d      	b.n	8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007acc:	4a8e      	ldr	r2, [pc, #568]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8007ace:	2390      	movs	r3, #144	@ 0x90
 8007ad0:	58d3      	ldr	r3, [r2, r3]
 8007ad2:	2202      	movs	r2, #2
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d109      	bne.n	8007aee <HAL_RCCEx_GetPeriphCLKFreq+0x452>
              frequency = LSE_VALUE;
 8007ada:	2380      	movs	r3, #128	@ 0x80
 8007adc:	021b      	lsls	r3, r3, #8
 8007ade:	61fb      	str	r3, [r7, #28]
            break;
 8007ae0:	e005      	b.n	8007aee <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            break;
 8007ae2:	46c0      	nop			@ (mov r8, r8)
 8007ae4:	f000 fb1b 	bl	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007ae8:	46c0      	nop			@ (mov r8, r8)
 8007aea:	f000 fb18 	bl	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007aee:	46c0      	nop			@ (mov r8, r8)
        break;
 8007af0:	f000 fb15 	bl	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART3_SOURCE();
 8007af4:	4a84      	ldr	r2, [pc, #528]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8007af6:	2388      	movs	r3, #136	@ 0x88
 8007af8:	58d3      	ldr	r3, [r2, r3]
 8007afa:	22c0      	movs	r2, #192	@ 0xc0
 8007afc:	4013      	ands	r3, r2
 8007afe:	617b      	str	r3, [r7, #20]
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b04:	d025      	beq.n	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b0a:	d82d      	bhi.n	8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	2b80      	cmp	r3, #128	@ 0x80
 8007b10:	d013      	beq.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	2b80      	cmp	r3, #128	@ 0x80
 8007b16:	d827      	bhi.n	8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d003      	beq.n	8007b26 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	2b40      	cmp	r3, #64	@ 0x40
 8007b22:	d005      	beq.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            break;
 8007b24:	e020      	b.n	8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 8007b26:	f7ff fb0f 	bl	8007148 <HAL_RCC_GetPCLK1Freq>
 8007b2a:	0003      	movs	r3, r0
 8007b2c:	61fb      	str	r3, [r7, #28]
            break;
 8007b2e:	e020      	b.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            frequency = HAL_RCC_GetSysClockFreq();
 8007b30:	f7ff fa64 	bl	8006ffc <HAL_RCC_GetSysClockFreq>
 8007b34:	0003      	movs	r3, r0
 8007b36:	61fb      	str	r3, [r7, #28]
            break;
 8007b38:	e01b      	b.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b3a:	4b73      	ldr	r3, [pc, #460]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	2380      	movs	r3, #128	@ 0x80
 8007b40:	00db      	lsls	r3, r3, #3
 8007b42:	401a      	ands	r2, r3
 8007b44:	2380      	movs	r3, #128	@ 0x80
 8007b46:	00db      	lsls	r3, r3, #3
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d10f      	bne.n	8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
              frequency = HSI_VALUE;
 8007b4c:	4b6f      	ldr	r3, [pc, #444]	@ (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8007b4e:	61fb      	str	r3, [r7, #28]
            break;
 8007b50:	e00c      	b.n	8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007b52:	4a6d      	ldr	r2, [pc, #436]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8007b54:	2390      	movs	r3, #144	@ 0x90
 8007b56:	58d3      	ldr	r3, [r2, r3]
 8007b58:	2202      	movs	r2, #2
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d107      	bne.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
              frequency = LSE_VALUE;
 8007b60:	2380      	movs	r3, #128	@ 0x80
 8007b62:	021b      	lsls	r3, r3, #8
 8007b64:	61fb      	str	r3, [r7, #28]
            break;
 8007b66:	e003      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
            break;
 8007b68:	46c0      	nop			@ (mov r8, r8)
 8007b6a:	e2d8      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007b6c:	46c0      	nop			@ (mov r8, r8)
 8007b6e:	e2d6      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007b70:	46c0      	nop			@ (mov r8, r8)
        break;
 8007b72:	e2d4      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007b74:	4a64      	ldr	r2, [pc, #400]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8007b76:	2388      	movs	r3, #136	@ 0x88
 8007b78:	58d2      	ldr	r2, [r2, r3]
 8007b7a:	23c0      	movs	r3, #192	@ 0xc0
 8007b7c:	059b      	lsls	r3, r3, #22
 8007b7e:	4013      	ands	r3, r2
 8007b80:	617b      	str	r3, [r7, #20]
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	2380      	movs	r3, #128	@ 0x80
 8007b86:	059b      	lsls	r3, r3, #22
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d012      	beq.n	8007bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8007b8c:	697a      	ldr	r2, [r7, #20]
 8007b8e:	2380      	movs	r3, #128	@ 0x80
 8007b90:	059b      	lsls	r3, r3, #22
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d825      	bhi.n	8007be2 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d005      	beq.n	8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	2380      	movs	r3, #128	@ 0x80
 8007ba0:	055b      	lsls	r3, r3, #21
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d014      	beq.n	8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
            break;
 8007ba6:	e01c      	b.n	8007be2 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
            frequency = HAL_RCC_GetSysClockFreq();
 8007ba8:	f7ff fa28 	bl	8006ffc <HAL_RCC_GetSysClockFreq>
 8007bac:	0003      	movs	r3, r0
 8007bae:	61fb      	str	r3, [r7, #28]
            break;
 8007bb0:	e018      	b.n	8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007bb2:	4b55      	ldr	r3, [pc, #340]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	2380      	movs	r3, #128	@ 0x80
 8007bb8:	00db      	lsls	r3, r3, #3
 8007bba:	401a      	ands	r2, r3
 8007bbc:	2380      	movs	r3, #128	@ 0x80
 8007bbe:	00db      	lsls	r3, r3, #3
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d102      	bne.n	8007bca <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
              frequency = HSI_VALUE;
 8007bc4:	4b51      	ldr	r3, [pc, #324]	@ (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8007bc6:	61fb      	str	r3, [r7, #28]
            break;
 8007bc8:	e00c      	b.n	8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
              frequency = 0U;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	61fb      	str	r3, [r7, #28]
            break;
 8007bce:	e009      	b.n	8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8007bd0:	2408      	movs	r4, #8
 8007bd2:	193b      	adds	r3, r7, r4
 8007bd4:	0018      	movs	r0, r3
 8007bd6:	f000 faad 	bl	8008134 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_P_Frequency;
 8007bda:	193b      	adds	r3, r7, r4
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	61fb      	str	r3, [r7, #28]
            break;
 8007be0:	e000      	b.n	8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            break;
 8007be2:	46c0      	nop			@ (mov r8, r8)
        break;
 8007be4:	e29b      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007be6:	4a48      	ldr	r2, [pc, #288]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8007be8:	2388      	movs	r3, #136	@ 0x88
 8007bea:	58d2      	ldr	r2, [r2, r3]
 8007bec:	23c0      	movs	r3, #192	@ 0xc0
 8007bee:	019b      	lsls	r3, r3, #6
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	617b      	str	r3, [r7, #20]
 8007bf4:	697a      	ldr	r2, [r7, #20]
 8007bf6:	2380      	movs	r3, #128	@ 0x80
 8007bf8:	019b      	lsls	r3, r3, #6
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d017      	beq.n	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 8007bfe:	697a      	ldr	r2, [r7, #20]
 8007c00:	2380      	movs	r3, #128	@ 0x80
 8007c02:	019b      	lsls	r3, r3, #6
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d81e      	bhi.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d005      	beq.n	8007c1a <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8007c0e:	697a      	ldr	r2, [r7, #20]
 8007c10:	2380      	movs	r3, #128	@ 0x80
 8007c12:	015b      	lsls	r3, r3, #5
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d005      	beq.n	8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
            break;
 8007c18:	e015      	b.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 8007c1a:	f7ff fa95 	bl	8007148 <HAL_RCC_GetPCLK1Freq>
 8007c1e:	0003      	movs	r3, r0
 8007c20:	61fb      	str	r3, [r7, #28]
            break;
 8007c22:	e013      	b.n	8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            frequency = HAL_RCC_GetSysClockFreq();
 8007c24:	f7ff f9ea 	bl	8006ffc <HAL_RCC_GetSysClockFreq>
 8007c28:	0003      	movs	r3, r0
 8007c2a:	61fb      	str	r3, [r7, #28]
            break;
 8007c2c:	e00e      	b.n	8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007c2e:	4b36      	ldr	r3, [pc, #216]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	2380      	movs	r3, #128	@ 0x80
 8007c34:	00db      	lsls	r3, r3, #3
 8007c36:	401a      	ands	r2, r3
 8007c38:	2380      	movs	r3, #128	@ 0x80
 8007c3a:	00db      	lsls	r3, r3, #3
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d104      	bne.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
              frequency = HSI_VALUE;
 8007c40:	4b32      	ldr	r3, [pc, #200]	@ (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8007c42:	61fb      	str	r3, [r7, #28]
            break;
 8007c44:	e001      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
            break;
 8007c46:	46c0      	nop			@ (mov r8, r8)
 8007c48:	e269      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007c4a:	46c0      	nop			@ (mov r8, r8)
        break;
 8007c4c:	e267      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007c4e:	4a2e      	ldr	r2, [pc, #184]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8007c50:	2388      	movs	r3, #136	@ 0x88
 8007c52:	58d2      	ldr	r2, [r2, r3]
 8007c54:	23c0      	movs	r3, #192	@ 0xc0
 8007c56:	029b      	lsls	r3, r3, #10
 8007c58:	4013      	ands	r3, r2
 8007c5a:	617b      	str	r3, [r7, #20]
 8007c5c:	697a      	ldr	r2, [r7, #20]
 8007c5e:	2380      	movs	r3, #128	@ 0x80
 8007c60:	029b      	lsls	r3, r3, #10
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d017      	beq.n	8007c96 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
 8007c66:	697a      	ldr	r2, [r7, #20]
 8007c68:	2380      	movs	r3, #128	@ 0x80
 8007c6a:	029b      	lsls	r3, r3, #10
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d81e      	bhi.n	8007cae <HAL_RCCEx_GetPeriphCLKFreq+0x612>
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d005      	beq.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8007c76:	697a      	ldr	r2, [r7, #20]
 8007c78:	2380      	movs	r3, #128	@ 0x80
 8007c7a:	025b      	lsls	r3, r3, #9
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d005      	beq.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
            break;
 8007c80:	e015      	b.n	8007cae <HAL_RCCEx_GetPeriphCLKFreq+0x612>
            frequency = HAL_RCC_GetPCLK1Freq();
 8007c82:	f7ff fa61 	bl	8007148 <HAL_RCC_GetPCLK1Freq>
 8007c86:	0003      	movs	r3, r0
 8007c88:	61fb      	str	r3, [r7, #28]
            break;
 8007c8a:	e013      	b.n	8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HAL_RCC_GetSysClockFreq();
 8007c8c:	f7ff f9b6 	bl	8006ffc <HAL_RCC_GetSysClockFreq>
 8007c90:	0003      	movs	r3, r0
 8007c92:	61fb      	str	r3, [r7, #28]
            break;
 8007c94:	e00e      	b.n	8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007c96:	4b1c      	ldr	r3, [pc, #112]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	2380      	movs	r3, #128	@ 0x80
 8007c9c:	00db      	lsls	r3, r3, #3
 8007c9e:	401a      	ands	r2, r3
 8007ca0:	2380      	movs	r3, #128	@ 0x80
 8007ca2:	00db      	lsls	r3, r3, #3
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d104      	bne.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
              frequency = HSI_VALUE;
 8007ca8:	4b18      	ldr	r3, [pc, #96]	@ (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8007caa:	61fb      	str	r3, [r7, #28]
            break;
 8007cac:	e001      	b.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
            break;
 8007cae:	46c0      	nop			@ (mov r8, r8)
 8007cb0:	e235      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007cb2:	46c0      	nop			@ (mov r8, r8)
        break;
 8007cb4:	e233      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007cb6:	4a14      	ldr	r2, [pc, #80]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8007cb8:	2388      	movs	r3, #136	@ 0x88
 8007cba:	58d2      	ldr	r2, [r2, r3]
 8007cbc:	23c0      	movs	r3, #192	@ 0xc0
 8007cbe:	031b      	lsls	r3, r3, #12
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	617b      	str	r3, [r7, #20]
 8007cc4:	697a      	ldr	r2, [r7, #20]
 8007cc6:	23c0      	movs	r3, #192	@ 0xc0
 8007cc8:	031b      	lsls	r3, r3, #12
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d041      	beq.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8007cce:	697a      	ldr	r2, [r7, #20]
 8007cd0:	23c0      	movs	r3, #192	@ 0xc0
 8007cd2:	031b      	lsls	r3, r3, #12
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d847      	bhi.n	8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8007cd8:	697a      	ldr	r2, [r7, #20]
 8007cda:	2380      	movs	r3, #128	@ 0x80
 8007cdc:	031b      	lsls	r3, r3, #12
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d02b      	beq.n	8007d3a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
 8007ce2:	697a      	ldr	r2, [r7, #20]
 8007ce4:	2380      	movs	r3, #128	@ 0x80
 8007ce6:	031b      	lsls	r3, r3, #12
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d83d      	bhi.n	8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d005      	beq.n	8007cfe <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 8007cf2:	697a      	ldr	r2, [r7, #20]
 8007cf4:	2380      	movs	r3, #128	@ 0x80
 8007cf6:	02db      	lsls	r3, r3, #11
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d009      	beq.n	8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            break;
 8007cfc:	e034      	b.n	8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 8007cfe:	f7ff fa23 	bl	8007148 <HAL_RCC_GetPCLK1Freq>
 8007d02:	0003      	movs	r3, r0
 8007d04:	61fb      	str	r3, [r7, #28]
            break;
 8007d06:	e036      	b.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8007d08:	40021000 	.word	0x40021000
 8007d0c:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007d10:	4abd      	ldr	r2, [pc, #756]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007d12:	2394      	movs	r3, #148	@ 0x94
 8007d14:	58d3      	ldr	r3, [r2, r3]
 8007d16:	2202      	movs	r2, #2
 8007d18:	4013      	ands	r3, r2
 8007d1a:	2b02      	cmp	r3, #2
 8007d1c:	d126      	bne.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8007d1e:	4aba      	ldr	r2, [pc, #744]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007d20:	2394      	movs	r3, #148	@ 0x94
 8007d22:	58d3      	ldr	r3, [r2, r3]
 8007d24:	2204      	movs	r2, #4
 8007d26:	4013      	ands	r3, r2
 8007d28:	2b04      	cmp	r3, #4
 8007d2a:	d102      	bne.n	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
                frequency = LSI_VALUE / 128U;
 8007d2c:	23fa      	movs	r3, #250	@ 0xfa
 8007d2e:	61fb      	str	r3, [r7, #28]
            break;
 8007d30:	e01c      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
                frequency = LSI_VALUE;
 8007d32:	23fa      	movs	r3, #250	@ 0xfa
 8007d34:	01db      	lsls	r3, r3, #7
 8007d36:	61fb      	str	r3, [r7, #28]
            break;
 8007d38:	e018      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007d3a:	4bb3      	ldr	r3, [pc, #716]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	2380      	movs	r3, #128	@ 0x80
 8007d40:	00db      	lsls	r3, r3, #3
 8007d42:	401a      	ands	r2, r3
 8007d44:	2380      	movs	r3, #128	@ 0x80
 8007d46:	00db      	lsls	r3, r3, #3
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d111      	bne.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
              frequency = HSI_VALUE;
 8007d4c:	4baf      	ldr	r3, [pc, #700]	@ (800800c <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 8007d4e:	61fb      	str	r3, [r7, #28]
            break;
 8007d50:	e00e      	b.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007d52:	4aad      	ldr	r2, [pc, #692]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007d54:	2390      	movs	r3, #144	@ 0x90
 8007d56:	58d3      	ldr	r3, [r2, r3]
 8007d58:	2202      	movs	r2, #2
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	2b02      	cmp	r3, #2
 8007d5e:	d109      	bne.n	8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
              frequency = LSE_VALUE;
 8007d60:	2380      	movs	r3, #128	@ 0x80
 8007d62:	021b      	lsls	r3, r3, #8
 8007d64:	61fb      	str	r3, [r7, #28]
            break;
 8007d66:	e005      	b.n	8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
            break;
 8007d68:	46c0      	nop			@ (mov r8, r8)
 8007d6a:	e1d8      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007d6c:	46c0      	nop			@ (mov r8, r8)
 8007d6e:	e1d6      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007d70:	46c0      	nop			@ (mov r8, r8)
 8007d72:	e1d4      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007d74:	46c0      	nop			@ (mov r8, r8)
        break;
 8007d76:	e1d2      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007d78:	4aa3      	ldr	r2, [pc, #652]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007d7a:	2388      	movs	r3, #136	@ 0x88
 8007d7c:	58d2      	ldr	r2, [r2, r3]
 8007d7e:	23c0      	movs	r3, #192	@ 0xc0
 8007d80:	039b      	lsls	r3, r3, #14
 8007d82:	4013      	ands	r3, r2
 8007d84:	617b      	str	r3, [r7, #20]
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	23c0      	movs	r3, #192	@ 0xc0
 8007d8a:	039b      	lsls	r3, r3, #14
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d03d      	beq.n	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8007d90:	697a      	ldr	r2, [r7, #20]
 8007d92:	23c0      	movs	r3, #192	@ 0xc0
 8007d94:	039b      	lsls	r3, r3, #14
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d843      	bhi.n	8007e22 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8007d9a:	697a      	ldr	r2, [r7, #20]
 8007d9c:	2380      	movs	r3, #128	@ 0x80
 8007d9e:	039b      	lsls	r3, r3, #14
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d027      	beq.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
 8007da4:	697a      	ldr	r2, [r7, #20]
 8007da6:	2380      	movs	r3, #128	@ 0x80
 8007da8:	039b      	lsls	r3, r3, #14
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d839      	bhi.n	8007e22 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d005      	beq.n	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007db4:	697a      	ldr	r2, [r7, #20]
 8007db6:	2380      	movs	r3, #128	@ 0x80
 8007db8:	035b      	lsls	r3, r3, #13
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d005      	beq.n	8007dca <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
            break;
 8007dbe:	e030      	b.n	8007e22 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
            frequency = HAL_RCC_GetPCLK1Freq();
 8007dc0:	f7ff f9c2 	bl	8007148 <HAL_RCC_GetPCLK1Freq>
 8007dc4:	0003      	movs	r3, r0
 8007dc6:	61fb      	str	r3, [r7, #28]
            break;
 8007dc8:	e032      	b.n	8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007dca:	4a8f      	ldr	r2, [pc, #572]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007dcc:	2394      	movs	r3, #148	@ 0x94
 8007dce:	58d3      	ldr	r3, [r2, r3]
 8007dd0:	2202      	movs	r2, #2
 8007dd2:	4013      	ands	r3, r2
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	d126      	bne.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8007dd8:	4a8b      	ldr	r2, [pc, #556]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007dda:	2394      	movs	r3, #148	@ 0x94
 8007ddc:	58d3      	ldr	r3, [r2, r3]
 8007dde:	2204      	movs	r2, #4
 8007de0:	4013      	ands	r3, r2
 8007de2:	2b04      	cmp	r3, #4
 8007de4:	d102      	bne.n	8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x750>
                frequency = LSI_VALUE / 128U;
 8007de6:	23fa      	movs	r3, #250	@ 0xfa
 8007de8:	61fb      	str	r3, [r7, #28]
            break;
 8007dea:	e01c      	b.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
                frequency = LSI_VALUE;
 8007dec:	23fa      	movs	r3, #250	@ 0xfa
 8007dee:	01db      	lsls	r3, r3, #7
 8007df0:	61fb      	str	r3, [r7, #28]
            break;
 8007df2:	e018      	b.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007df4:	4b84      	ldr	r3, [pc, #528]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	2380      	movs	r3, #128	@ 0x80
 8007dfa:	00db      	lsls	r3, r3, #3
 8007dfc:	401a      	ands	r2, r3
 8007dfe:	2380      	movs	r3, #128	@ 0x80
 8007e00:	00db      	lsls	r3, r3, #3
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d111      	bne.n	8007e2a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
              frequency = HSI_VALUE;
 8007e06:	4b81      	ldr	r3, [pc, #516]	@ (800800c <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 8007e08:	61fb      	str	r3, [r7, #28]
            break;
 8007e0a:	e00e      	b.n	8007e2a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007e0c:	4a7e      	ldr	r2, [pc, #504]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007e0e:	2390      	movs	r3, #144	@ 0x90
 8007e10:	58d3      	ldr	r3, [r2, r3]
 8007e12:	2202      	movs	r2, #2
 8007e14:	4013      	ands	r3, r2
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	d109      	bne.n	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0x792>
              frequency = LSE_VALUE;
 8007e1a:	2380      	movs	r3, #128	@ 0x80
 8007e1c:	021b      	lsls	r3, r3, #8
 8007e1e:	61fb      	str	r3, [r7, #28]
            break;
 8007e20:	e005      	b.n	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0x792>
            break;
 8007e22:	46c0      	nop			@ (mov r8, r8)
 8007e24:	e17b      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007e26:	46c0      	nop			@ (mov r8, r8)
 8007e28:	e179      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007e2a:	46c0      	nop			@ (mov r8, r8)
 8007e2c:	e177      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007e2e:	46c0      	nop			@ (mov r8, r8)
        break;
 8007e30:	e175      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8007e32:	4a75      	ldr	r2, [pc, #468]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007e34:	2388      	movs	r3, #136	@ 0x88
 8007e36:	58d2      	ldr	r2, [r2, r3]
 8007e38:	23c0      	movs	r3, #192	@ 0xc0
 8007e3a:	041b      	lsls	r3, r3, #16
 8007e3c:	4013      	ands	r3, r2
 8007e3e:	617b      	str	r3, [r7, #20]
 8007e40:	697a      	ldr	r2, [r7, #20]
 8007e42:	23c0      	movs	r3, #192	@ 0xc0
 8007e44:	041b      	lsls	r3, r3, #16
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d03d      	beq.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 8007e4a:	697a      	ldr	r2, [r7, #20]
 8007e4c:	23c0      	movs	r3, #192	@ 0xc0
 8007e4e:	041b      	lsls	r3, r3, #16
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d843      	bhi.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	2380      	movs	r3, #128	@ 0x80
 8007e58:	041b      	lsls	r3, r3, #16
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d027      	beq.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8007e5e:	697a      	ldr	r2, [r7, #20]
 8007e60:	2380      	movs	r3, #128	@ 0x80
 8007e62:	041b      	lsls	r3, r3, #16
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d839      	bhi.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d005      	beq.n	8007e7a <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8007e6e:	697a      	ldr	r2, [r7, #20]
 8007e70:	2380      	movs	r3, #128	@ 0x80
 8007e72:	03db      	lsls	r3, r3, #15
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d005      	beq.n	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
            break;
 8007e78:	e030      	b.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x840>
            frequency = HAL_RCC_GetPCLK1Freq();
 8007e7a:	f7ff f965 	bl	8007148 <HAL_RCC_GetPCLK1Freq>
 8007e7e:	0003      	movs	r3, r0
 8007e80:	61fb      	str	r3, [r7, #28]
            break;
 8007e82:	e032      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007e84:	4a60      	ldr	r2, [pc, #384]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007e86:	2394      	movs	r3, #148	@ 0x94
 8007e88:	58d3      	ldr	r3, [r2, r3]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	4013      	ands	r3, r2
 8007e8e:	2b02      	cmp	r3, #2
 8007e90:	d126      	bne.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8007e92:	4a5d      	ldr	r2, [pc, #372]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007e94:	2394      	movs	r3, #148	@ 0x94
 8007e96:	58d3      	ldr	r3, [r2, r3]
 8007e98:	2204      	movs	r2, #4
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	2b04      	cmp	r3, #4
 8007e9e:	d102      	bne.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
                frequency = LSI_VALUE / 128U;
 8007ea0:	23fa      	movs	r3, #250	@ 0xfa
 8007ea2:	61fb      	str	r3, [r7, #28]
            break;
 8007ea4:	e01c      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
                frequency = LSI_VALUE;
 8007ea6:	23fa      	movs	r3, #250	@ 0xfa
 8007ea8:	01db      	lsls	r3, r3, #7
 8007eaa:	61fb      	str	r3, [r7, #28]
            break;
 8007eac:	e018      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007eae:	4b56      	ldr	r3, [pc, #344]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	2380      	movs	r3, #128	@ 0x80
 8007eb4:	00db      	lsls	r3, r3, #3
 8007eb6:	401a      	ands	r2, r3
 8007eb8:	2380      	movs	r3, #128	@ 0x80
 8007eba:	00db      	lsls	r3, r3, #3
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d111      	bne.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
              frequency = HSI_VALUE;
 8007ec0:	4b52      	ldr	r3, [pc, #328]	@ (800800c <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 8007ec2:	61fb      	str	r3, [r7, #28]
            break;
 8007ec4:	e00e      	b.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007ec6:	4a50      	ldr	r2, [pc, #320]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007ec8:	2390      	movs	r3, #144	@ 0x90
 8007eca:	58d3      	ldr	r3, [r2, r3]
 8007ecc:	2202      	movs	r2, #2
 8007ece:	4013      	ands	r3, r2
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	d109      	bne.n	8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
              frequency = LSE_VALUE;
 8007ed4:	2380      	movs	r3, #128	@ 0x80
 8007ed6:	021b      	lsls	r3, r3, #8
 8007ed8:	61fb      	str	r3, [r7, #28]
            break;
 8007eda:	e005      	b.n	8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
            break;
 8007edc:	46c0      	nop			@ (mov r8, r8)
 8007ede:	e11e      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007ee0:	46c0      	nop			@ (mov r8, r8)
 8007ee2:	e11c      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007ee4:	46c0      	nop			@ (mov r8, r8)
 8007ee6:	e11a      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007ee8:	46c0      	nop			@ (mov r8, r8)
        break;
 8007eea:	e118      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 8007eec:	4a46      	ldr	r2, [pc, #280]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007eee:	2388      	movs	r3, #136	@ 0x88
 8007ef0:	58d2      	ldr	r2, [r2, r3]
 8007ef2:	2380      	movs	r3, #128	@ 0x80
 8007ef4:	045b      	lsls	r3, r3, #17
 8007ef6:	4013      	ands	r3, r2
 8007ef8:	617b      	str	r3, [r7, #20]
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d005      	beq.n	8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8007f00:	697a      	ldr	r2, [r7, #20]
 8007f02:	2380      	movs	r3, #128	@ 0x80
 8007f04:	045b      	lsls	r3, r3, #17
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d011      	beq.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x892>
            break;
 8007f0a:	e019      	b.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8007f0c:	4b3e      	ldr	r3, [pc, #248]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007f0e:	689a      	ldr	r2, [r3, #8]
 8007f10:	23e0      	movs	r3, #224	@ 0xe0
 8007f12:	01db      	lsls	r3, r3, #7
 8007f14:	4013      	ands	r3, r2
 8007f16:	d104      	bne.n	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
              frequency = HAL_RCC_GetPCLK1Freq();
 8007f18:	f7ff f916 	bl	8007148 <HAL_RCC_GetPCLK1Freq>
 8007f1c:	0003      	movs	r3, r0
 8007f1e:	61fb      	str	r3, [r7, #28]
            break;
 8007f20:	e00e      	b.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8007f22:	f7ff f911 	bl	8007148 <HAL_RCC_GetPCLK1Freq>
 8007f26:	0003      	movs	r3, r0
 8007f28:	005b      	lsls	r3, r3, #1
 8007f2a:	61fb      	str	r3, [r7, #28]
            break;
 8007f2c:	e008      	b.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8007f2e:	2408      	movs	r4, #8
 8007f30:	193b      	adds	r3, r7, r4
 8007f32:	0018      	movs	r0, r3
 8007f34:	f000 f8fe 	bl	8008134 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8007f38:	193b      	adds	r3, r7, r4
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	61fb      	str	r3, [r7, #28]
            break;
 8007f3e:	46c0      	nop			@ (mov r8, r8)
        break;
 8007f40:	e0ed      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 8007f42:	4a31      	ldr	r2, [pc, #196]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007f44:	2388      	movs	r3, #136	@ 0x88
 8007f46:	58d2      	ldr	r2, [r2, r3]
 8007f48:	2380      	movs	r3, #128	@ 0x80
 8007f4a:	049b      	lsls	r3, r3, #18
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	617b      	str	r3, [r7, #20]
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d005      	beq.n	8007f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	2380      	movs	r3, #128	@ 0x80
 8007f5a:	049b      	lsls	r3, r3, #18
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d011      	beq.n	8007f84 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
            break;
 8007f60:	e019      	b.n	8007f96 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8007f62:	4b29      	ldr	r3, [pc, #164]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007f64:	689a      	ldr	r2, [r3, #8]
 8007f66:	23e0      	movs	r3, #224	@ 0xe0
 8007f68:	01db      	lsls	r3, r3, #7
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	d104      	bne.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
              frequency = HAL_RCC_GetPCLK1Freq();
 8007f6e:	f7ff f8eb 	bl	8007148 <HAL_RCC_GetPCLK1Freq>
 8007f72:	0003      	movs	r3, r0
 8007f74:	61fb      	str	r3, [r7, #28]
            break;
 8007f76:	e00e      	b.n	8007f96 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8007f78:	f7ff f8e6 	bl	8007148 <HAL_RCC_GetPCLK1Freq>
 8007f7c:	0003      	movs	r3, r0
 8007f7e:	005b      	lsls	r3, r3, #1
 8007f80:	61fb      	str	r3, [r7, #28]
            break;
 8007f82:	e008      	b.n	8007f96 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8007f84:	2408      	movs	r4, #8
 8007f86:	193b      	adds	r3, r7, r4
 8007f88:	0018      	movs	r0, r3
 8007f8a:	f000 f8d3 	bl	8008134 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8007f8e:	193b      	adds	r3, r7, r4
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	61fb      	str	r3, [r7, #28]
            break;
 8007f94:	46c0      	nop			@ (mov r8, r8)
        break;
 8007f96:	e0c2      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8007f98:	4a1b      	ldr	r2, [pc, #108]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007f9a:	2388      	movs	r3, #136	@ 0x88
 8007f9c:	58d2      	ldr	r2, [r2, r3]
 8007f9e:	23c0      	movs	r3, #192	@ 0xc0
 8007fa0:	051b      	lsls	r3, r3, #20
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	617b      	str	r3, [r7, #20]
 8007fa6:	697a      	ldr	r2, [r7, #20]
 8007fa8:	23c0      	movs	r3, #192	@ 0xc0
 8007faa:	051b      	lsls	r3, r3, #20
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d017      	beq.n	8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8007fb0:	697a      	ldr	r2, [r7, #20]
 8007fb2:	23c0      	movs	r3, #192	@ 0xc0
 8007fb4:	051b      	lsls	r3, r3, #20
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d84a      	bhi.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8007fba:	697a      	ldr	r2, [r7, #20]
 8007fbc:	2380      	movs	r3, #128	@ 0x80
 8007fbe:	051b      	lsls	r3, r3, #20
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d039      	beq.n	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8007fc4:	697a      	ldr	r2, [r7, #20]
 8007fc6:	2380      	movs	r3, #128	@ 0x80
 8007fc8:	051b      	lsls	r3, r3, #20
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d840      	bhi.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d03a      	beq.n	800804a <HAL_RCCEx_GetPeriphCLKFreq+0x9ae>
 8007fd4:	697a      	ldr	r2, [r7, #20]
 8007fd6:	2380      	movs	r3, #128	@ 0x80
 8007fd8:	04db      	lsls	r3, r3, #19
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d003      	beq.n	8007fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
            break;
 8007fde:	e037      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
            frequency = HSI48_VALUE;
 8007fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8008010 <HAL_RCCEx_GetPeriphCLKFreq+0x974>)
 8007fe2:	61fb      	str	r3, [r7, #28]
            break;
 8007fe4:	e037      	b.n	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007fe6:	4b08      	ldr	r3, [pc, #32]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2202      	movs	r2, #2
 8007fec:	4013      	ands	r3, r2
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d130      	bne.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8007ff2:	4b05      	ldr	r3, [pc, #20]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2208      	movs	r2, #8
 8007ff8:	4013      	ands	r3, r2
 8007ffa:	d00b      	beq.n	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8007ffc:	4b02      	ldr	r3, [pc, #8]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	091b      	lsrs	r3, r3, #4
 8008002:	220f      	movs	r2, #15
 8008004:	4013      	ands	r3, r2
 8008006:	e00b      	b.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
 8008008:	40021000 	.word	0x40021000
 800800c:	00f42400 	.word	0x00f42400
 8008010:	02dc6c00 	.word	0x02dc6c00
 8008014:	4a44      	ldr	r2, [pc, #272]	@ (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8008016:	2394      	movs	r3, #148	@ 0x94
 8008018:	58d3      	ldr	r3, [r2, r3]
 800801a:	0a1b      	lsrs	r3, r3, #8
 800801c:	220f      	movs	r2, #15
 800801e:	4013      	ands	r3, r2
 8008020:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	2b0b      	cmp	r3, #11
 8008026:	d901      	bls.n	800802c <HAL_RCCEx_GetPeriphCLKFreq+0x990>
                msirange = 11U;
 8008028:	230b      	movs	r3, #11
 800802a:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 800802c:	4b3f      	ldr	r3, [pc, #252]	@ (800812c <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 800802e:	69ba      	ldr	r2, [r7, #24]
 8008030:	0092      	lsls	r2, r2, #2
 8008032:	58d3      	ldr	r3, [r2, r3]
 8008034:	61fb      	str	r3, [r7, #28]
            break;
 8008036:	e00d      	b.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8008038:	2408      	movs	r4, #8
 800803a:	193b      	adds	r3, r7, r4
 800803c:	0018      	movs	r0, r3
 800803e:	f000 f879 	bl	8008134 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8008042:	193b      	adds	r3, r7, r4
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	61fb      	str	r3, [r7, #28]
            break;
 8008048:	e005      	b.n	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            frequency = 0U;
 800804a:	2300      	movs	r3, #0
 800804c:	61fb      	str	r3, [r7, #28]
            break;
 800804e:	e002      	b.n	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            break;
 8008050:	46c0      	nop			@ (mov r8, r8)
 8008052:	e064      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008054:	46c0      	nop			@ (mov r8, r8)
        break;
 8008056:	e062      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008058:	4a33      	ldr	r2, [pc, #204]	@ (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 800805a:	2388      	movs	r3, #136	@ 0x88
 800805c:	58d2      	ldr	r2, [r2, r3]
 800805e:	23c0      	movs	r3, #192	@ 0xc0
 8008060:	051b      	lsls	r3, r3, #20
 8008062:	4013      	ands	r3, r2
 8008064:	617b      	str	r3, [r7, #20]
 8008066:	697a      	ldr	r2, [r7, #20]
 8008068:	23c0      	movs	r3, #192	@ 0xc0
 800806a:	051b      	lsls	r3, r3, #20
 800806c:	429a      	cmp	r2, r3
 800806e:	d017      	beq.n	80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa04>
 8008070:	697a      	ldr	r2, [r7, #20]
 8008072:	23c0      	movs	r3, #192	@ 0xc0
 8008074:	051b      	lsls	r3, r3, #20
 8008076:	429a      	cmp	r2, r3
 8008078:	d844      	bhi.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 800807a:	697a      	ldr	r2, [r7, #20]
 800807c:	2380      	movs	r3, #128	@ 0x80
 800807e:	051b      	lsls	r3, r3, #20
 8008080:	429a      	cmp	r2, r3
 8008082:	d033      	beq.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8008084:	697a      	ldr	r2, [r7, #20]
 8008086:	2380      	movs	r3, #128	@ 0x80
 8008088:	051b      	lsls	r3, r3, #20
 800808a:	429a      	cmp	r2, r3
 800808c:	d83a      	bhi.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d034      	beq.n	80080fe <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8008094:	697a      	ldr	r2, [r7, #20]
 8008096:	2380      	movs	r3, #128	@ 0x80
 8008098:	04db      	lsls	r3, r3, #19
 800809a:	429a      	cmp	r2, r3
 800809c:	d003      	beq.n	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
            break;
 800809e:	e031      	b.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            frequency = HSI48_VALUE;
 80080a0:	4b23      	ldr	r3, [pc, #140]	@ (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 80080a2:	61fb      	str	r3, [r7, #28]
            break;
 80080a4:	e031      	b.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80080a6:	4b20      	ldr	r3, [pc, #128]	@ (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2202      	movs	r2, #2
 80080ac:	4013      	ands	r3, r2
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	d12a      	bne.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 80080b2:	4b1d      	ldr	r3, [pc, #116]	@ (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2208      	movs	r2, #8
 80080b8:	4013      	ands	r3, r2
 80080ba:	d005      	beq.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa2c>
 80080bc:	4b1a      	ldr	r3, [pc, #104]	@ (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	091b      	lsrs	r3, r3, #4
 80080c2:	220f      	movs	r2, #15
 80080c4:	4013      	ands	r3, r2
 80080c6:	e005      	b.n	80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 80080c8:	4a17      	ldr	r2, [pc, #92]	@ (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80080ca:	2394      	movs	r3, #148	@ 0x94
 80080cc:	58d3      	ldr	r3, [r2, r3]
 80080ce:	0a1b      	lsrs	r3, r3, #8
 80080d0:	220f      	movs	r2, #15
 80080d2:	4013      	ands	r3, r2
 80080d4:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	2b0b      	cmp	r3, #11
 80080da:	d901      	bls.n	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
                msirange = 11U;
 80080dc:	230b      	movs	r3, #11
 80080de:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 80080e0:	4b12      	ldr	r3, [pc, #72]	@ (800812c <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 80080e2:	69ba      	ldr	r2, [r7, #24]
 80080e4:	0092      	lsls	r2, r2, #2
 80080e6:	58d3      	ldr	r3, [r2, r3]
 80080e8:	61fb      	str	r3, [r7, #28]
            break;
 80080ea:	e00d      	b.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80080ec:	2408      	movs	r4, #8
 80080ee:	193b      	adds	r3, r7, r4
 80080f0:	0018      	movs	r0, r3
 80080f2:	f000 f81f 	bl	8008134 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 80080f6:	193b      	adds	r3, r7, r4
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	61fb      	str	r3, [r7, #28]
            break;
 80080fc:	e005      	b.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = 0U;
 80080fe:	2300      	movs	r3, #0
 8008100:	61fb      	str	r3, [r7, #28]
            break;
 8008102:	e002      	b.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            break;
 8008104:	46c0      	nop			@ (mov r8, r8)
 8008106:	e00a      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008108:	46c0      	nop			@ (mov r8, r8)
        break;
 800810a:	e008      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 800810c:	46c0      	nop			@ (mov r8, r8)
 800810e:	e006      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8008110:	46c0      	nop			@ (mov r8, r8)
 8008112:	e004      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8008114:	46c0      	nop			@ (mov r8, r8)
 8008116:	e002      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8008118:	46c0      	nop			@ (mov r8, r8)
 800811a:	e000      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 800811c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return (frequency);
 800811e:	69fb      	ldr	r3, [r7, #28]
}
 8008120:	0018      	movs	r0, r3
 8008122:	46bd      	mov	sp, r7
 8008124:	b009      	add	sp, #36	@ 0x24
 8008126:	bd90      	pop	{r4, r7, pc}
 8008128:	40021000 	.word	0x40021000
 800812c:	08009790 	.word	0x08009790
 8008130:	02dc6c00 	.word	0x02dc6c00

08008134 <HAL_RCCEx_GetPLLClockFreq>:
  * @param  PLL_Clocks structure.
  * @retval None
  */

void HAL_RCCEx_GetPLLClockFreq(PLL_ClocksTypeDef *PLL_Clocks)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b088      	sub	sp, #32
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  uint32_t pllm;
  uint32_t plln;
  uint32_t pllvco;
  uint32_t msirange;

  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800813c:	4b58      	ldr	r3, [pc, #352]	@ (80082a0 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	0a1b      	lsrs	r3, r3, #8
 8008142:	227f      	movs	r2, #127	@ 0x7f
 8008144:	4013      	ands	r3, r2
 8008146:	617b      	str	r3, [r7, #20]
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008148:	4b55      	ldr	r3, [pc, #340]	@ (80082a0 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	2203      	movs	r2, #3
 800814e:	4013      	ands	r3, r2
 8008150:	613b      	str	r3, [r7, #16]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8008152:	4b53      	ldr	r3, [pc, #332]	@ (80082a0 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	091b      	lsrs	r3, r3, #4
 8008158:	2207      	movs	r2, #7
 800815a:	4013      	ands	r3, r2
 800815c:	3301      	adds	r3, #1
 800815e:	60fb      	str	r3, [r7, #12]
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8008160:	4b4f      	ldr	r3, [pc, #316]	@ (80082a0 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2208      	movs	r2, #8
 8008166:	4013      	ands	r3, r2
 8008168:	d005      	beq.n	8008176 <HAL_RCCEx_GetPLLClockFreq+0x42>
 800816a:	4b4d      	ldr	r3, [pc, #308]	@ (80082a0 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	091b      	lsrs	r3, r3, #4
 8008170:	220f      	movs	r2, #15
 8008172:	4013      	ands	r3, r2
 8008174:	e005      	b.n	8008182 <HAL_RCCEx_GetPLLClockFreq+0x4e>
 8008176:	4a4a      	ldr	r2, [pc, #296]	@ (80082a0 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008178:	2394      	movs	r3, #148	@ 0x94
 800817a:	58d3      	ldr	r3, [r2, r3]
 800817c:	0a1b      	lsrs	r3, r3, #8
 800817e:	220f      	movs	r2, #15
 8008180:	4013      	ands	r3, r2
 8008182:	61bb      	str	r3, [r7, #24]
  if (msirange > 11U)
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	2b0b      	cmp	r3, #11
 8008188:	d901      	bls.n	800818e <HAL_RCCEx_GetPLLClockFreq+0x5a>
  {
    msirange = 11U;
 800818a:	230b      	movs	r3, #11
 800818c:	61bb      	str	r3, [r7, #24]
  }
  switch (pllsource)
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	2b03      	cmp	r3, #3
 8008192:	d020      	beq.n	80081d6 <HAL_RCCEx_GetPLLClockFreq+0xa2>
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	2b03      	cmp	r3, #3
 8008198:	d827      	bhi.n	80081ea <HAL_RCCEx_GetPLLClockFreq+0xb6>
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	2b01      	cmp	r3, #1
 800819e:	d00c      	beq.n	80081ba <HAL_RCCEx_GetPLLClockFreq+0x86>
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d121      	bne.n	80081ea <HAL_RCCEx_GetPLLClockFreq+0xb6>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * plln;
 80081a6:	68f9      	ldr	r1, [r7, #12]
 80081a8:	483e      	ldr	r0, [pc, #248]	@ (80082a4 <HAL_RCCEx_GetPLLClockFreq+0x170>)
 80081aa:	f7f7 ffad 	bl	8000108 <__udivsi3>
 80081ae:	0003      	movs	r3, r0
 80081b0:	001a      	movs	r2, r3
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	4353      	muls	r3, r2
 80081b6:	61fb      	str	r3, [r7, #28]
      break;
 80081b8:	e025      	b.n	8008206 <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 80081ba:	4b3b      	ldr	r3, [pc, #236]	@ (80082a8 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 80081bc:	69ba      	ldr	r2, [r7, #24]
 80081be:	0092      	lsls	r2, r2, #2
 80081c0:	58d3      	ldr	r3, [r2, r3]
 80081c2:	68f9      	ldr	r1, [r7, #12]
 80081c4:	0018      	movs	r0, r3
 80081c6:	f7f7 ff9f 	bl	8000108 <__udivsi3>
 80081ca:	0003      	movs	r3, r0
 80081cc:	001a      	movs	r2, r3
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	4353      	muls	r3, r2
 80081d2:	61fb      	str	r3, [r7, #28]
      break;
 80081d4:	e017      	b.n	8008206 <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * plln;
 80081d6:	68f9      	ldr	r1, [r7, #12]
 80081d8:	4834      	ldr	r0, [pc, #208]	@ (80082ac <HAL_RCCEx_GetPLLClockFreq+0x178>)
 80081da:	f7f7 ff95 	bl	8000108 <__udivsi3>
 80081de:	0003      	movs	r3, r0
 80081e0:	001a      	movs	r2, r3
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	4353      	muls	r3, r2
 80081e6:	61fb      	str	r3, [r7, #28]
      break;
 80081e8:	e00d      	b.n	8008206 <HAL_RCCEx_GetPLLClockFreq+0xd2>

    default:
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 80081ea:	4b2f      	ldr	r3, [pc, #188]	@ (80082a8 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 80081ec:	69ba      	ldr	r2, [r7, #24]
 80081ee:	0092      	lsls	r2, r2, #2
 80081f0:	58d3      	ldr	r3, [r2, r3]
 80081f2:	68f9      	ldr	r1, [r7, #12]
 80081f4:	0018      	movs	r0, r3
 80081f6:	f7f7 ff87 	bl	8000108 <__udivsi3>
 80081fa:	0003      	movs	r3, r0
 80081fc:	001a      	movs	r2, r3
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	4353      	muls	r3, r2
 8008202:	61fb      	str	r3, [r7, #28]
      break;
 8008204:	46c0      	nop			@ (mov r8, r8)
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 8008206:	4b26      	ldr	r3, [pc, #152]	@ (80082a0 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008208:	68da      	ldr	r2, [r3, #12]
 800820a:	2380      	movs	r3, #128	@ 0x80
 800820c:	025b      	lsls	r3, r3, #9
 800820e:	4013      	ands	r3, r2
 8008210:	d00e      	beq.n	8008230 <HAL_RCCEx_GetPLLClockFreq+0xfc>
  {
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8008212:	4b23      	ldr	r3, [pc, #140]	@ (80082a0 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008214:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLP_Pos) + 1U));
 8008216:	0c5b      	lsrs	r3, r3, #17
 8008218:	221f      	movs	r2, #31
 800821a:	4013      	ands	r3, r2
 800821c:	3301      	adds	r3, #1
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 800821e:	0019      	movs	r1, r3
 8008220:	69f8      	ldr	r0, [r7, #28]
 8008222:	f7f7 ff71 	bl	8000108 <__udivsi3>
 8008226:	0003      	movs	r3, r0
 8008228:	001a      	movs	r2, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	601a      	str	r2, [r3, #0]
 800822e:	e002      	b.n	8008236 <HAL_RCCEx_GetPLLClockFreq+0x102>
  }
  else
  {
    PLL_Clocks->PLL_P_Frequency = 0;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVQ) != 0U)
 8008236:	4b1a      	ldr	r3, [pc, #104]	@ (80082a0 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008238:	68da      	ldr	r2, [r3, #12]
 800823a:	2380      	movs	r3, #128	@ 0x80
 800823c:	045b      	lsls	r3, r3, #17
 800823e:	4013      	ands	r3, r2
 8008240:	d00e      	beq.n	8008260 <HAL_RCCEx_GetPLLClockFreq+0x12c>
  {
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8008242:	4b17      	ldr	r3, [pc, #92]	@ (80082a0 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008244:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLQ_Pos) + 1U));
 8008246:	0e5b      	lsrs	r3, r3, #25
 8008248:	2207      	movs	r2, #7
 800824a:	4013      	ands	r3, r2
 800824c:	3301      	adds	r3, #1
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 800824e:	0019      	movs	r1, r3
 8008250:	69f8      	ldr	r0, [r7, #28]
 8008252:	f7f7 ff59 	bl	8000108 <__udivsi3>
 8008256:	0003      	movs	r3, r0
 8008258:	001a      	movs	r2, r3
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	605a      	str	r2, [r3, #4]
 800825e:	e002      	b.n	8008266 <HAL_RCCEx_GetPLLClockFreq+0x132>
  }
  else
  {
    PLL_Clocks->PLL_Q_Frequency = 0;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVR) != 0U)
 8008266:	4b0e      	ldr	r3, [pc, #56]	@ (80082a0 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008268:	68da      	ldr	r2, [r3, #12]
 800826a:	2380      	movs	r3, #128	@ 0x80
 800826c:	055b      	lsls	r3, r3, #21
 800826e:	4013      	ands	r3, r2
 8008270:	d00e      	beq.n	8008290 <HAL_RCCEx_GetPLLClockFreq+0x15c>
  {
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8008272:	4b0b      	ldr	r3, [pc, #44]	@ (80082a0 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008274:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLR_Pos) + 1U));
 8008276:	0f5b      	lsrs	r3, r3, #29
 8008278:	2207      	movs	r2, #7
 800827a:	4013      	ands	r3, r2
 800827c:	3301      	adds	r3, #1
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 800827e:	0019      	movs	r1, r3
 8008280:	69f8      	ldr	r0, [r7, #28]
 8008282:	f7f7 ff41 	bl	8000108 <__udivsi3>
 8008286:	0003      	movs	r3, r0
 8008288:	001a      	movs	r2, r3
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL_Clocks->PLL_R_Frequency = 0;
  }
}
 800828e:	e002      	b.n	8008296 <HAL_RCCEx_GetPLLClockFreq+0x162>
    PLL_Clocks->PLL_R_Frequency = 0;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	609a      	str	r2, [r3, #8]
}
 8008296:	46c0      	nop			@ (mov r8, r8)
 8008298:	46bd      	mov	sp, r7
 800829a:	b008      	add	sp, #32
 800829c:	bd80      	pop	{r7, pc}
 800829e:	46c0      	nop			@ (mov r8, r8)
 80082a0:	40021000 	.word	0x40021000
 80082a4:	00f42400 	.word	0x00f42400
 80082a8:	08009790 	.word	0x08009790
 80082ac:	003d0900 	.word	0x003d0900

080082b0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80082b8:	210f      	movs	r1, #15
 80082ba:	187b      	adds	r3, r7, r1
 80082bc:	2201      	movs	r2, #1
 80082be:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d100      	bne.n	80082c8 <HAL_RTC_Init+0x18>
 80082c6:	e08b      	b.n	80083e0 <HAL_RTC_Init+0x130>
  {
    status = HAL_OK;
 80082c8:	187b      	adds	r3, r7, r1
 80082ca:	2200      	movs	r2, #0
 80082cc:	701a      	strb	r2, [r3, #0]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	222d      	movs	r2, #45	@ 0x2d
 80082d2:	5c9b      	ldrb	r3, [r3, r2]
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d107      	bne.n	80082ea <HAL_RTC_Init+0x3a>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	222c      	movs	r2, #44	@ 0x2c
 80082de:	2100      	movs	r1, #0
 80082e0:	5499      	strb	r1, [r3, r2]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	0018      	movs	r0, r3
 80082e6:	f7fc fecd 	bl	8005084 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	222d      	movs	r2, #45	@ 0x2d
 80082ee:	2102      	movs	r1, #2
 80082f0:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80082f2:	4b3f      	ldr	r3, [pc, #252]	@ (80083f0 <HAL_RTC_Init+0x140>)
 80082f4:	22ca      	movs	r2, #202	@ 0xca
 80082f6:	625a      	str	r2, [r3, #36]	@ 0x24
 80082f8:	4b3d      	ldr	r3, [pc, #244]	@ (80083f0 <HAL_RTC_Init+0x140>)
 80082fa:	2253      	movs	r2, #83	@ 0x53
 80082fc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	0018      	movs	r0, r3
 8008302:	f000 f8a1 	bl	8008448 <RTC_EnterInitMode>
 8008306:	1e03      	subs	r3, r0, #0
 8008308:	d00b      	beq.n	8008322 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800830a:	4b39      	ldr	r3, [pc, #228]	@ (80083f0 <HAL_RTC_Init+0x140>)
 800830c:	22ff      	movs	r2, #255	@ 0xff
 800830e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	222d      	movs	r2, #45	@ 0x2d
 8008314:	2104      	movs	r1, #4
 8008316:	5499      	strb	r1, [r3, r2]

      status = HAL_ERROR;
 8008318:	230f      	movs	r3, #15
 800831a:	18fb      	adds	r3, r7, r3
 800831c:	2201      	movs	r2, #1
 800831e:	701a      	strb	r2, [r3, #0]
 8008320:	e05e      	b.n	80083e0 <HAL_RTC_Init+0x130>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8008322:	4b33      	ldr	r3, [pc, #204]	@ (80083f0 <HAL_RTC_Init+0x140>)
 8008324:	699a      	ldr	r2, [r3, #24]
 8008326:	4b32      	ldr	r3, [pc, #200]	@ (80083f0 <HAL_RTC_Init+0x140>)
 8008328:	4932      	ldr	r1, [pc, #200]	@ (80083f4 <HAL_RTC_Init+0x144>)
 800832a:	400a      	ands	r2, r1
 800832c:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800832e:	4b30      	ldr	r3, [pc, #192]	@ (80083f0 <HAL_RTC_Init+0x140>)
 8008330:	6999      	ldr	r1, [r3, #24]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	685a      	ldr	r2, [r3, #4]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	431a      	orrs	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	431a      	orrs	r2, r3
 8008342:	4b2b      	ldr	r3, [pc, #172]	@ (80083f0 <HAL_RTC_Init+0x140>)
 8008344:	430a      	orrs	r2, r1
 8008346:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	68d9      	ldr	r1, [r3, #12]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	041a      	lsls	r2, r3, #16
 8008352:	4b27      	ldr	r3, [pc, #156]	@ (80083f0 <HAL_RTC_Init+0x140>)
 8008354:	430a      	orrs	r2, r1
 8008356:	611a      	str	r2, [r3, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8008358:	4b25      	ldr	r3, [pc, #148]	@ (80083f0 <HAL_RTC_Init+0x140>)
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	4a26      	ldr	r2, [pc, #152]	@ (80083f8 <HAL_RTC_Init+0x148>)
 800835e:	4013      	ands	r3, r2
 8008360:	0019      	movs	r1, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800836a:	431a      	orrs	r2, r3
 800836c:	4b20      	ldr	r3, [pc, #128]	@ (80083f0 <HAL_RTC_Init+0x140>)
 800836e:	430a      	orrs	r2, r1
 8008370:	60da      	str	r2, [r3, #12]

      /* Exit Initialization mode */
      CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008372:	4b1f      	ldr	r3, [pc, #124]	@ (80083f0 <HAL_RTC_Init+0x140>)
 8008374:	68da      	ldr	r2, [r3, #12]
 8008376:	4b1e      	ldr	r3, [pc, #120]	@ (80083f0 <HAL_RTC_Init+0x140>)
 8008378:	2180      	movs	r1, #128	@ 0x80
 800837a:	438a      	bics	r2, r1
 800837c:	60da      	str	r2, [r3, #12]

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800837e:	4b1c      	ldr	r3, [pc, #112]	@ (80083f0 <HAL_RTC_Init+0x140>)
 8008380:	699b      	ldr	r3, [r3, #24]
 8008382:	2220      	movs	r2, #32
 8008384:	4013      	ands	r3, r2
 8008386:	d110      	bne.n	80083aa <HAL_RTC_Init+0xfa>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	0018      	movs	r0, r3
 800838c:	f000 f836 	bl	80083fc <HAL_RTC_WaitForSynchro>
 8008390:	1e03      	subs	r3, r0, #0
 8008392:	d00a      	beq.n	80083aa <HAL_RTC_Init+0xfa>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008394:	4b16      	ldr	r3, [pc, #88]	@ (80083f0 <HAL_RTC_Init+0x140>)
 8008396:	22ff      	movs	r2, #255	@ 0xff
 8008398:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	222d      	movs	r2, #45	@ 0x2d
 800839e:	2104      	movs	r1, #4
 80083a0:	5499      	strb	r1, [r3, r2]
          status = HAL_ERROR;
 80083a2:	230f      	movs	r3, #15
 80083a4:	18fb      	adds	r3, r7, r3
 80083a6:	2201      	movs	r2, #1
 80083a8:	701a      	strb	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 80083aa:	230f      	movs	r3, #15
 80083ac:	18fb      	adds	r3, r7, r3
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d115      	bne.n	80083e0 <HAL_RTC_Init+0x130>
      {
        MODIFY_REG(RTC->CR, \
 80083b4:	4b0e      	ldr	r3, [pc, #56]	@ (80083f0 <HAL_RTC_Init+0x140>)
 80083b6:	699b      	ldr	r3, [r3, #24]
 80083b8:	00db      	lsls	r3, r3, #3
 80083ba:	08d9      	lsrs	r1, r3, #3
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a1a      	ldr	r2, [r3, #32]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	69db      	ldr	r3, [r3, #28]
 80083c4:	431a      	orrs	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	695b      	ldr	r3, [r3, #20]
 80083ca:	431a      	orrs	r2, r3
 80083cc:	4b08      	ldr	r3, [pc, #32]	@ (80083f0 <HAL_RTC_Init+0x140>)
 80083ce:	430a      	orrs	r2, r1
 80083d0:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083d2:	4b07      	ldr	r3, [pc, #28]	@ (80083f0 <HAL_RTC_Init+0x140>)
 80083d4:	22ff      	movs	r2, #255	@ 0xff
 80083d6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	222d      	movs	r2, #45	@ 0x2d
 80083dc:	2101      	movs	r1, #1
 80083de:	5499      	strb	r1, [r3, r2]
      }
    }
  }

  return status;
 80083e0:	230f      	movs	r3, #15
 80083e2:	18fb      	adds	r3, r7, r3
 80083e4:	781b      	ldrb	r3, [r3, #0]
}
 80083e6:	0018      	movs	r0, r3
 80083e8:	46bd      	mov	sp, r7
 80083ea:	b004      	add	sp, #16
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	46c0      	nop			@ (mov r8, r8)
 80083f0:	40002800 	.word	0x40002800
 80083f4:	fb8fffbf 	.word	0xfb8fffbf
 80083f8:	ffffe0ff 	.word	0xffffe0ff

080083fc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(const RTC_HandleTypeDef *hrtc)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8008404:	4b0f      	ldr	r3, [pc, #60]	@ (8008444 <HAL_RTC_WaitForSynchro+0x48>)
 8008406:	68da      	ldr	r2, [r3, #12]
 8008408:	4b0e      	ldr	r3, [pc, #56]	@ (8008444 <HAL_RTC_WaitForSynchro+0x48>)
 800840a:	2120      	movs	r1, #32
 800840c:	438a      	bics	r2, r1
 800840e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008410:	f7fd f8b0 	bl	8005574 <HAL_GetTick>
 8008414:	0003      	movs	r3, r0
 8008416:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008418:	e00a      	b.n	8008430 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800841a:	f7fd f8ab 	bl	8005574 <HAL_GetTick>
 800841e:	0002      	movs	r2, r0
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	1ad2      	subs	r2, r2, r3
 8008424:	23fa      	movs	r3, #250	@ 0xfa
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	429a      	cmp	r2, r3
 800842a:	d901      	bls.n	8008430 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800842c:	2303      	movs	r3, #3
 800842e:	e005      	b.n	800843c <HAL_RTC_WaitForSynchro+0x40>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008430:	4b04      	ldr	r3, [pc, #16]	@ (8008444 <HAL_RTC_WaitForSynchro+0x48>)
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	2220      	movs	r2, #32
 8008436:	4013      	ands	r3, r2
 8008438:	d0ef      	beq.n	800841a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	0018      	movs	r0, r3
 800843e:	46bd      	mov	sp, r7
 8008440:	b004      	add	sp, #16
 8008442:	bd80      	pop	{r7, pc}
 8008444:	40002800 	.word	0x40002800

08008448 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(const RTC_HandleTypeDef *hrtc)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008450:	4b12      	ldr	r3, [pc, #72]	@ (800849c <RTC_EnterInitMode+0x54>)
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	2240      	movs	r2, #64	@ 0x40
 8008456:	4013      	ands	r3, r2
 8008458:	d11a      	bne.n	8008490 <RTC_EnterInitMode+0x48>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800845a:	4b10      	ldr	r3, [pc, #64]	@ (800849c <RTC_EnterInitMode+0x54>)
 800845c:	68da      	ldr	r2, [r3, #12]
 800845e:	4b0f      	ldr	r3, [pc, #60]	@ (800849c <RTC_EnterInitMode+0x54>)
 8008460:	2180      	movs	r1, #128	@ 0x80
 8008462:	430a      	orrs	r2, r1
 8008464:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008466:	f7fd f885 	bl	8005574 <HAL_GetTick>
 800846a:	0003      	movs	r3, r0
 800846c:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800846e:	e00a      	b.n	8008486 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008470:	f7fd f880 	bl	8005574 <HAL_GetTick>
 8008474:	0002      	movs	r2, r0
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	1ad2      	subs	r2, r2, r3
 800847a:	23fa      	movs	r3, #250	@ 0xfa
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	429a      	cmp	r2, r3
 8008480:	d901      	bls.n	8008486 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8008482:	2303      	movs	r3, #3
 8008484:	e005      	b.n	8008492 <RTC_EnterInitMode+0x4a>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008486:	4b05      	ldr	r3, [pc, #20]	@ (800849c <RTC_EnterInitMode+0x54>)
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	2240      	movs	r2, #64	@ 0x40
 800848c:	4013      	ands	r3, r2
 800848e:	d0ef      	beq.n	8008470 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	0018      	movs	r0, r3
 8008494:	46bd      	mov	sp, r7
 8008496:	b004      	add	sp, #16
 8008498:	bd80      	pop	{r7, pc}
 800849a:	46c0      	nop			@ (mov r8, r8)
 800849c:	40002800 	.word	0x40002800

080084a0 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b086      	sub	sp, #24
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	222c      	movs	r2, #44	@ 0x2c
 80084b0:	5c9b      	ldrb	r3, [r3, r2]
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d101      	bne.n	80084ba <HAL_RTCEx_SetWakeUpTimer+0x1a>
 80084b6:	2302      	movs	r3, #2
 80084b8:	e06c      	b.n	8008594 <HAL_RTCEx_SetWakeUpTimer+0xf4>
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	222c      	movs	r2, #44	@ 0x2c
 80084be:	2101      	movs	r1, #1
 80084c0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	222d      	movs	r2, #45	@ 0x2d
 80084c6:	2102      	movs	r1, #2
 80084c8:	5499      	strb	r1, [r3, r2]

  /* Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if (READ_BIT(RTC->CR, RTC_CR_WUTE) != 0U)
 80084ca:	4b34      	ldr	r3, [pc, #208]	@ (800859c <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 80084cc:	699a      	ldr	r2, [r3, #24]
 80084ce:	2380      	movs	r3, #128	@ 0x80
 80084d0:	00db      	lsls	r3, r3, #3
 80084d2:	4013      	ands	r3, r2
 80084d4:	d01c      	beq.n	8008510 <HAL_RTCEx_SetWakeUpTimer+0x70>
  {
    tickstart = HAL_GetTick();
 80084d6:	f7fd f84d 	bl	8005574 <HAL_GetTick>
 80084da:	0003      	movs	r3, r0
 80084dc:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 80084de:	e012      	b.n	8008506 <HAL_RTCEx_SetWakeUpTimer+0x66>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80084e0:	f7fd f848 	bl	8005574 <HAL_GetTick>
 80084e4:	0002      	movs	r2, r0
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	1ad2      	subs	r2, r2, r3
 80084ea:	23fa      	movs	r3, #250	@ 0xfa
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d909      	bls.n	8008506 <HAL_RTCEx_SetWakeUpTimer+0x66>
      {
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	222d      	movs	r2, #45	@ 0x2d
 80084f6:	2103      	movs	r1, #3
 80084f8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	222c      	movs	r2, #44	@ 0x2c
 80084fe:	2100      	movs	r1, #0
 8008500:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008502:	2303      	movs	r3, #3
 8008504:	e046      	b.n	8008594 <HAL_RTCEx_SetWakeUpTimer+0xf4>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 8008506:	4b25      	ldr	r3, [pc, #148]	@ (800859c <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	2204      	movs	r2, #4
 800850c:	4013      	ands	r3, r2
 800850e:	d1e7      	bne.n	80084e0 <HAL_RTCEx_SetWakeUpTimer+0x40>
      }
    }
  }

  /* Disable Wake Up timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8008510:	4b22      	ldr	r3, [pc, #136]	@ (800859c <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008512:	699a      	ldr	r2, [r3, #24]
 8008514:	4b21      	ldr	r3, [pc, #132]	@ (800859c <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008516:	4922      	ldr	r1, [pc, #136]	@ (80085a0 <HAL_RTCEx_SetWakeUpTimer+0x100>)
 8008518:	400a      	ands	r2, r1
 800851a:	619a      	str	r2, [r3, #24]

  tickstart = HAL_GetTick();
 800851c:	f7fd f82a 	bl	8005574 <HAL_GetTick>
 8008520:	0003      	movs	r3, r0
 8008522:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8008524:	e012      	b.n	800854c <HAL_RTCEx_SetWakeUpTimer+0xac>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008526:	f7fd f825 	bl	8005574 <HAL_GetTick>
 800852a:	0002      	movs	r2, r0
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	1ad2      	subs	r2, r2, r3
 8008530:	23fa      	movs	r3, #250	@ 0xfa
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	429a      	cmp	r2, r3
 8008536:	d909      	bls.n	800854c <HAL_RTCEx_SetWakeUpTimer+0xac>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	222d      	movs	r2, #45	@ 0x2d
 800853c:	2103      	movs	r1, #3
 800853e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	222c      	movs	r2, #44	@ 0x2c
 8008544:	2100      	movs	r1, #0
 8008546:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8008548:	2303      	movs	r3, #3
 800854a:	e023      	b.n	8008594 <HAL_RTCEx_SetWakeUpTimer+0xf4>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 800854c:	4b13      	ldr	r3, [pc, #76]	@ (800859c <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	2204      	movs	r2, #4
 8008552:	4013      	ands	r3, r2
 8008554:	d0e7      	beq.n	8008526 <HAL_RTCEx_SetWakeUpTimer+0x86>
    }
  }

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8008556:	4b11      	ldr	r3, [pc, #68]	@ (800859c <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008558:	699b      	ldr	r3, [r3, #24]
 800855a:	2207      	movs	r2, #7
 800855c:	4393      	bics	r3, r2
 800855e:	0019      	movs	r1, r3
 8008560:	4b0e      	ldr	r3, [pc, #56]	@ (800859c <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	430a      	orrs	r2, r1
 8008566:	619a      	str	r2, [r3, #24]

  /* Configure the Wakeup Timer counter */
  WRITE_REG(RTC->WUTR, (uint32_t)WakeUpCounter);
 8008568:	4b0c      	ldr	r3, [pc, #48]	@ (800859c <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 800856a:	68ba      	ldr	r2, [r7, #8]
 800856c:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  SET_BIT(RTC->CR, RTC_CR_WUTE);
 800856e:	4b0b      	ldr	r3, [pc, #44]	@ (800859c <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008570:	699a      	ldr	r2, [r3, #24]
 8008572:	4b0a      	ldr	r3, [pc, #40]	@ (800859c <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008574:	2180      	movs	r1, #128	@ 0x80
 8008576:	00c9      	lsls	r1, r1, #3
 8008578:	430a      	orrs	r2, r1
 800857a:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800857c:	4b07      	ldr	r3, [pc, #28]	@ (800859c <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 800857e:	22ff      	movs	r2, #255	@ 0xff
 8008580:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	222d      	movs	r2, #45	@ 0x2d
 8008586:	2101      	movs	r1, #1
 8008588:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	222c      	movs	r2, #44	@ 0x2c
 800858e:	2100      	movs	r1, #0
 8008590:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	0018      	movs	r0, r3
 8008596:	46bd      	mov	sp, r7
 8008598:	b006      	add	sp, #24
 800859a:	bd80      	pop	{r7, pc}
 800859c:	40002800 	.word	0x40002800
 80085a0:	fffffbff 	.word	0xfffffbff

080085a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d101      	bne.n	80085b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	e0a0      	b.n	80086f8 <HAL_SPI_Init+0x154>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d109      	bne.n	80085d2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	685a      	ldr	r2, [r3, #4]
 80085c2:	2382      	movs	r3, #130	@ 0x82
 80085c4:	005b      	lsls	r3, r3, #1
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d009      	beq.n	80085de <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	61da      	str	r2, [r3, #28]
 80085d0:	e005      	b.n	80085de <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	225d      	movs	r2, #93	@ 0x5d
 80085e8:	5c9b      	ldrb	r3, [r3, r2]
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d107      	bne.n	8008600 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	225c      	movs	r2, #92	@ 0x5c
 80085f4:	2100      	movs	r1, #0
 80085f6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	0018      	movs	r0, r3
 80085fc:	f7fc fdc0 	bl	8005180 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	225d      	movs	r2, #93	@ 0x5d
 8008604:	2102      	movs	r1, #2
 8008606:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2140      	movs	r1, #64	@ 0x40
 8008614:	438a      	bics	r2, r1
 8008616:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	68da      	ldr	r2, [r3, #12]
 800861c:	23e0      	movs	r3, #224	@ 0xe0
 800861e:	00db      	lsls	r3, r3, #3
 8008620:	429a      	cmp	r2, r3
 8008622:	d902      	bls.n	800862a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008624:	2300      	movs	r3, #0
 8008626:	60fb      	str	r3, [r7, #12]
 8008628:	e002      	b.n	8008630 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800862a:	2380      	movs	r3, #128	@ 0x80
 800862c:	015b      	lsls	r3, r3, #5
 800862e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	68da      	ldr	r2, [r3, #12]
 8008634:	23f0      	movs	r3, #240	@ 0xf0
 8008636:	011b      	lsls	r3, r3, #4
 8008638:	429a      	cmp	r2, r3
 800863a:	d008      	beq.n	800864e <HAL_SPI_Init+0xaa>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	68da      	ldr	r2, [r3, #12]
 8008640:	23e0      	movs	r3, #224	@ 0xe0
 8008642:	00db      	lsls	r3, r3, #3
 8008644:	429a      	cmp	r2, r3
 8008646:	d002      	beq.n	800864e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	685a      	ldr	r2, [r3, #4]
 8008652:	2382      	movs	r3, #130	@ 0x82
 8008654:	005b      	lsls	r3, r3, #1
 8008656:	401a      	ands	r2, r3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6899      	ldr	r1, [r3, #8]
 800865c:	2384      	movs	r3, #132	@ 0x84
 800865e:	021b      	lsls	r3, r3, #8
 8008660:	400b      	ands	r3, r1
 8008662:	431a      	orrs	r2, r3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	2102      	movs	r1, #2
 800866a:	400b      	ands	r3, r1
 800866c:	431a      	orrs	r2, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	695b      	ldr	r3, [r3, #20]
 8008672:	2101      	movs	r1, #1
 8008674:	400b      	ands	r3, r1
 8008676:	431a      	orrs	r2, r3
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6999      	ldr	r1, [r3, #24]
 800867c:	2380      	movs	r3, #128	@ 0x80
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	400b      	ands	r3, r1
 8008682:	431a      	orrs	r2, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	69db      	ldr	r3, [r3, #28]
 8008688:	2138      	movs	r1, #56	@ 0x38
 800868a:	400b      	ands	r3, r1
 800868c:	431a      	orrs	r2, r3
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a1b      	ldr	r3, [r3, #32]
 8008692:	2180      	movs	r1, #128	@ 0x80
 8008694:	400b      	ands	r3, r1
 8008696:	431a      	orrs	r2, r3
 8008698:	0011      	movs	r1, r2
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800869e:	2380      	movs	r3, #128	@ 0x80
 80086a0:	019b      	lsls	r3, r3, #6
 80086a2:	401a      	ands	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	430a      	orrs	r2, r1
 80086aa:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	699b      	ldr	r3, [r3, #24]
 80086b0:	0c1b      	lsrs	r3, r3, #16
 80086b2:	2204      	movs	r2, #4
 80086b4:	401a      	ands	r2, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ba:	2110      	movs	r1, #16
 80086bc:	400b      	ands	r3, r1
 80086be:	431a      	orrs	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086c4:	2108      	movs	r1, #8
 80086c6:	400b      	ands	r3, r1
 80086c8:	431a      	orrs	r2, r3
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	68d9      	ldr	r1, [r3, #12]
 80086ce:	23f0      	movs	r3, #240	@ 0xf0
 80086d0:	011b      	lsls	r3, r3, #4
 80086d2:	400b      	ands	r3, r1
 80086d4:	431a      	orrs	r2, r3
 80086d6:	0011      	movs	r1, r2
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	2380      	movs	r3, #128	@ 0x80
 80086dc:	015b      	lsls	r3, r3, #5
 80086de:	401a      	ands	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	430a      	orrs	r2, r1
 80086e6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	225d      	movs	r2, #93	@ 0x5d
 80086f2:	2101      	movs	r1, #1
 80086f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80086f6:	2300      	movs	r3, #0
}
 80086f8:	0018      	movs	r0, r3
 80086fa:	46bd      	mov	sp, r7
 80086fc:	b004      	add	sp, #16
 80086fe:	bd80      	pop	{r7, pc}

08008700 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d101      	bne.n	8008712 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	e046      	b.n	80087a0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2288      	movs	r2, #136	@ 0x88
 8008716:	589b      	ldr	r3, [r3, r2]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d107      	bne.n	800872c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2284      	movs	r2, #132	@ 0x84
 8008720:	2100      	movs	r1, #0
 8008722:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	0018      	movs	r0, r3
 8008728:	f7fc fe2a 	bl	8005380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2288      	movs	r2, #136	@ 0x88
 8008730:	2124      	movs	r1, #36	@ 0x24
 8008732:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2101      	movs	r1, #1
 8008740:	438a      	bics	r2, r1
 8008742:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008748:	2b00      	cmp	r3, #0
 800874a:	d003      	beq.n	8008754 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	0018      	movs	r0, r3
 8008750:	f000 f9fe 	bl	8008b50 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	0018      	movs	r0, r3
 8008758:	f000 f828 	bl	80087ac <UART_SetConfig>
 800875c:	0003      	movs	r3, r0
 800875e:	2b01      	cmp	r3, #1
 8008760:	d101      	bne.n	8008766 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8008762:	2301      	movs	r3, #1
 8008764:	e01c      	b.n	80087a0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	685a      	ldr	r2, [r3, #4]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	490d      	ldr	r1, [pc, #52]	@ (80087a8 <HAL_UART_Init+0xa8>)
 8008772:	400a      	ands	r2, r1
 8008774:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	689a      	ldr	r2, [r3, #8]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	212a      	movs	r1, #42	@ 0x2a
 8008782:	438a      	bics	r2, r1
 8008784:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2101      	movs	r1, #1
 8008792:	430a      	orrs	r2, r1
 8008794:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	0018      	movs	r0, r3
 800879a:	f000 fa8d 	bl	8008cb8 <UART_CheckIdleState>
 800879e:	0003      	movs	r3, r0
}
 80087a0:	0018      	movs	r0, r3
 80087a2:	46bd      	mov	sp, r7
 80087a4:	b002      	add	sp, #8
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	ffffb7ff 	.word	0xffffb7ff

080087ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087ac:	b5b0      	push	{r4, r5, r7, lr}
 80087ae:	b092      	sub	sp, #72	@ 0x48
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80087b4:	231f      	movs	r3, #31
 80087b6:	2220      	movs	r2, #32
 80087b8:	189b      	adds	r3, r3, r2
 80087ba:	19db      	adds	r3, r3, r7
 80087bc:	2200      	movs	r2, #0
 80087be:	701a      	strb	r2, [r3, #0]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80087c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4ac8      	ldr	r2, [pc, #800]	@ (8008ae8 <UART_SetConfig+0x33c>)
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80087c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c8:	689a      	ldr	r2, [r3, #8]
 80087ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	431a      	orrs	r2, r3
 80087d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d2:	695b      	ldr	r3, [r3, #20]
 80087d4:	431a      	orrs	r2, r3
 80087d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d8:	69db      	ldr	r3, [r3, #28]
 80087da:	4313      	orrs	r3, r2
 80087dc:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80087de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4ac1      	ldr	r2, [pc, #772]	@ (8008aec <UART_SetConfig+0x340>)
 80087e6:	4013      	ands	r3, r2
 80087e8:	0019      	movs	r1, r3
 80087ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087f0:	430b      	orrs	r3, r1
 80087f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	4abd      	ldr	r2, [pc, #756]	@ (8008af0 <UART_SetConfig+0x344>)
 80087fc:	4013      	ands	r3, r2
 80087fe:	0018      	movs	r0, r3
 8008800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008802:	68d9      	ldr	r1, [r3, #12]
 8008804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	0003      	movs	r3, r0
 800880a:	430b      	orrs	r3, r1
 800880c:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800880e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008810:	699b      	ldr	r3, [r3, #24]
 8008812:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4ab3      	ldr	r2, [pc, #716]	@ (8008ae8 <UART_SetConfig+0x33c>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d00e      	beq.n	800883c <UART_SetConfig+0x90>
 800881e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4ab4      	ldr	r2, [pc, #720]	@ (8008af4 <UART_SetConfig+0x348>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d009      	beq.n	800883c <UART_SetConfig+0x90>
 8008828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4ab2      	ldr	r2, [pc, #712]	@ (8008af8 <UART_SetConfig+0x34c>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d004      	beq.n	800883c <UART_SetConfig+0x90>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008834:	6a1b      	ldr	r3, [r3, #32]
 8008836:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008838:	4313      	orrs	r3, r2
 800883a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800883c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	4aae      	ldr	r2, [pc, #696]	@ (8008afc <UART_SetConfig+0x350>)
 8008844:	4013      	ands	r3, r2
 8008846:	0019      	movs	r1, r3
 8008848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800884e:	430b      	orrs	r3, r1
 8008850:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008858:	220f      	movs	r2, #15
 800885a:	4393      	bics	r3, r2
 800885c:	0018      	movs	r0, r3
 800885e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008860:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	0003      	movs	r3, r0
 8008868:	430b      	orrs	r3, r1
 800886a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800886c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4aa3      	ldr	r2, [pc, #652]	@ (8008b00 <UART_SetConfig+0x354>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d102      	bne.n	800887c <UART_SetConfig+0xd0>
 8008876:	2301      	movs	r3, #1
 8008878:	643b      	str	r3, [r7, #64]	@ 0x40
 800887a:	e033      	b.n	80088e4 <UART_SetConfig+0x138>
 800887c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4aa0      	ldr	r2, [pc, #640]	@ (8008b04 <UART_SetConfig+0x358>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d102      	bne.n	800888c <UART_SetConfig+0xe0>
 8008886:	2302      	movs	r3, #2
 8008888:	643b      	str	r3, [r7, #64]	@ 0x40
 800888a:	e02b      	b.n	80088e4 <UART_SetConfig+0x138>
 800888c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a9d      	ldr	r2, [pc, #628]	@ (8008b08 <UART_SetConfig+0x35c>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d103      	bne.n	800889e <UART_SetConfig+0xf2>
 8008896:	2380      	movs	r3, #128	@ 0x80
 8008898:	025b      	lsls	r3, r3, #9
 800889a:	643b      	str	r3, [r7, #64]	@ 0x40
 800889c:	e022      	b.n	80088e4 <UART_SetConfig+0x138>
 800889e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a9a      	ldr	r2, [pc, #616]	@ (8008b0c <UART_SetConfig+0x360>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d103      	bne.n	80088b0 <UART_SetConfig+0x104>
 80088a8:	2380      	movs	r3, #128	@ 0x80
 80088aa:	029b      	lsls	r3, r3, #10
 80088ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80088ae:	e019      	b.n	80088e4 <UART_SetConfig+0x138>
 80088b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a8c      	ldr	r2, [pc, #560]	@ (8008ae8 <UART_SetConfig+0x33c>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d102      	bne.n	80088c0 <UART_SetConfig+0x114>
 80088ba:	2310      	movs	r3, #16
 80088bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80088be:	e011      	b.n	80088e4 <UART_SetConfig+0x138>
 80088c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a8b      	ldr	r2, [pc, #556]	@ (8008af4 <UART_SetConfig+0x348>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d102      	bne.n	80088d0 <UART_SetConfig+0x124>
 80088ca:	2308      	movs	r3, #8
 80088cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80088ce:	e009      	b.n	80088e4 <UART_SetConfig+0x138>
 80088d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a88      	ldr	r2, [pc, #544]	@ (8008af8 <UART_SetConfig+0x34c>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d102      	bne.n	80088e0 <UART_SetConfig+0x134>
 80088da:	2304      	movs	r3, #4
 80088dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80088de:	e001      	b.n	80088e4 <UART_SetConfig+0x138>
 80088e0:	2300      	movs	r3, #0
 80088e2:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80088e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a7f      	ldr	r2, [pc, #508]	@ (8008ae8 <UART_SetConfig+0x33c>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d00a      	beq.n	8008904 <UART_SetConfig+0x158>
 80088ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a80      	ldr	r2, [pc, #512]	@ (8008af4 <UART_SetConfig+0x348>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d005      	beq.n	8008904 <UART_SetConfig+0x158>
 80088f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a7e      	ldr	r2, [pc, #504]	@ (8008af8 <UART_SetConfig+0x34c>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d000      	beq.n	8008904 <UART_SetConfig+0x158>
 8008902:	e06f      	b.n	80089e4 <UART_SetConfig+0x238>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008904:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008906:	0018      	movs	r0, r3
 8008908:	f7fe fec8 	bl	800769c <HAL_RCCEx_GetPeriphCLKFreq>
 800890c:	0003      	movs	r3, r0
 800890e:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* If proper clock source reported */
    if (pclk != 0U)
 8008910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008912:	2b00      	cmp	r3, #0
 8008914:	d100      	bne.n	8008918 <UART_SetConfig+0x16c>
 8008916:	e103      	b.n	8008b20 <UART_SetConfig+0x374>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800891a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800891c:	4b7c      	ldr	r3, [pc, #496]	@ (8008b10 <UART_SetConfig+0x364>)
 800891e:	0052      	lsls	r2, r2, #1
 8008920:	5ad3      	ldrh	r3, [r2, r3]
 8008922:	0019      	movs	r1, r3
 8008924:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008926:	f7f7 fbef 	bl	8000108 <__udivsi3>
 800892a:	0003      	movs	r3, r0
 800892c:	62fb      	str	r3, [r7, #44]	@ 0x2c

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800892e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008930:	685a      	ldr	r2, [r3, #4]
 8008932:	0013      	movs	r3, r2
 8008934:	005b      	lsls	r3, r3, #1
 8008936:	189b      	adds	r3, r3, r2
 8008938:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800893a:	429a      	cmp	r2, r3
 800893c:	d305      	bcc.n	800894a <UART_SetConfig+0x19e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800893e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008944:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008946:	429a      	cmp	r2, r3
 8008948:	d906      	bls.n	8008958 <UART_SetConfig+0x1ac>
      {
        ret = HAL_ERROR;
 800894a:	231f      	movs	r3, #31
 800894c:	2220      	movs	r2, #32
 800894e:	189b      	adds	r3, r3, r2
 8008950:	19db      	adds	r3, r3, r7
 8008952:	2201      	movs	r2, #1
 8008954:	701a      	strb	r2, [r3, #0]
 8008956:	e044      	b.n	80089e2 <UART_SetConfig+0x236>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800895a:	61bb      	str	r3, [r7, #24]
 800895c:	2300      	movs	r3, #0
 800895e:	61fb      	str	r3, [r7, #28]
 8008960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008962:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008964:	4b6a      	ldr	r3, [pc, #424]	@ (8008b10 <UART_SetConfig+0x364>)
 8008966:	0052      	lsls	r2, r2, #1
 8008968:	5ad3      	ldrh	r3, [r2, r3]
 800896a:	613b      	str	r3, [r7, #16]
 800896c:	2300      	movs	r3, #0
 800896e:	617b      	str	r3, [r7, #20]
 8008970:	693a      	ldr	r2, [r7, #16]
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	69b8      	ldr	r0, [r7, #24]
 8008976:	69f9      	ldr	r1, [r7, #28]
 8008978:	f7f7 fd98 	bl	80004ac <__aeabi_uldivmod>
 800897c:	0002      	movs	r2, r0
 800897e:	000b      	movs	r3, r1
 8008980:	0e11      	lsrs	r1, r2, #24
 8008982:	021d      	lsls	r5, r3, #8
 8008984:	430d      	orrs	r5, r1
 8008986:	0214      	lsls	r4, r2, #8
 8008988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	085b      	lsrs	r3, r3, #1
 800898e:	60bb      	str	r3, [r7, #8]
 8008990:	2300      	movs	r3, #0
 8008992:	60fb      	str	r3, [r7, #12]
 8008994:	68b8      	ldr	r0, [r7, #8]
 8008996:	68f9      	ldr	r1, [r7, #12]
 8008998:	1900      	adds	r0, r0, r4
 800899a:	4169      	adcs	r1, r5
 800899c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	603b      	str	r3, [r7, #0]
 80089a2:	2300      	movs	r3, #0
 80089a4:	607b      	str	r3, [r7, #4]
 80089a6:	683a      	ldr	r2, [r7, #0]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f7f7 fd7f 	bl	80004ac <__aeabi_uldivmod>
 80089ae:	0002      	movs	r2, r0
 80089b0:	000b      	movs	r3, r1
 80089b2:	0013      	movs	r3, r2
 80089b4:	637b      	str	r3, [r7, #52]	@ 0x34
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80089b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80089b8:	23c0      	movs	r3, #192	@ 0xc0
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	429a      	cmp	r2, r3
 80089be:	d309      	bcc.n	80089d4 <UART_SetConfig+0x228>
 80089c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80089c2:	2380      	movs	r3, #128	@ 0x80
 80089c4:	035b      	lsls	r3, r3, #13
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d204      	bcs.n	80089d4 <UART_SetConfig+0x228>
        {
          huart->Instance->BRR = usartdiv;
 80089ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80089d0:	60da      	str	r2, [r3, #12]
 80089d2:	e006      	b.n	80089e2 <UART_SetConfig+0x236>
        }
        else
        {
          ret = HAL_ERROR;
 80089d4:	231f      	movs	r3, #31
 80089d6:	2220      	movs	r2, #32
 80089d8:	189b      	adds	r3, r3, r2
 80089da:	19db      	adds	r3, r3, r7
 80089dc:	2201      	movs	r2, #1
 80089de:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80089e0:	e09e      	b.n	8008b20 <UART_SetConfig+0x374>
 80089e2:	e09d      	b.n	8008b20 <UART_SetConfig+0x374>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e6:	69da      	ldr	r2, [r3, #28]
 80089e8:	2380      	movs	r3, #128	@ 0x80
 80089ea:	021b      	lsls	r3, r3, #8
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d14c      	bne.n	8008a8a <UART_SetConfig+0x2de>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80089f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089f2:	0018      	movs	r0, r3
 80089f4:	f7fe fe52 	bl	800769c <HAL_RCCEx_GetPeriphCLKFreq>
 80089f8:	0003      	movs	r3, r0
 80089fa:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d100      	bne.n	8008a04 <UART_SetConfig+0x258>
 8008a02:	e08d      	b.n	8008b20 <UART_SetConfig+0x374>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a08:	4b41      	ldr	r3, [pc, #260]	@ (8008b10 <UART_SetConfig+0x364>)
 8008a0a:	0052      	lsls	r2, r2, #1
 8008a0c:	5ad3      	ldrh	r3, [r2, r3]
 8008a0e:	0019      	movs	r1, r3
 8008a10:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008a12:	f7f7 fb79 	bl	8000108 <__udivsi3>
 8008a16:	0003      	movs	r3, r0
 8008a18:	005a      	lsls	r2, r3, #1
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	085b      	lsrs	r3, r3, #1
 8008a20:	18d2      	adds	r2, r2, r3
 8008a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	0019      	movs	r1, r3
 8008a28:	0010      	movs	r0, r2
 8008a2a:	f7f7 fb6d 	bl	8000108 <__udivsi3>
 8008a2e:	0003      	movs	r3, r0
 8008a30:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a34:	2b0f      	cmp	r3, #15
 8008a36:	d921      	bls.n	8008a7c <UART_SetConfig+0x2d0>
 8008a38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a3a:	2380      	movs	r3, #128	@ 0x80
 8008a3c:	025b      	lsls	r3, r3, #9
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d21c      	bcs.n	8008a7c <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	2012      	movs	r0, #18
 8008a48:	2420      	movs	r4, #32
 8008a4a:	1903      	adds	r3, r0, r4
 8008a4c:	19db      	adds	r3, r3, r7
 8008a4e:	210f      	movs	r1, #15
 8008a50:	438a      	bics	r2, r1
 8008a52:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a56:	085b      	lsrs	r3, r3, #1
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	2207      	movs	r2, #7
 8008a5c:	4013      	ands	r3, r2
 8008a5e:	b299      	uxth	r1, r3
 8008a60:	1903      	adds	r3, r0, r4
 8008a62:	19db      	adds	r3, r3, r7
 8008a64:	1902      	adds	r2, r0, r4
 8008a66:	19d2      	adds	r2, r2, r7
 8008a68:	8812      	ldrh	r2, [r2, #0]
 8008a6a:	430a      	orrs	r2, r1
 8008a6c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	1902      	adds	r2, r0, r4
 8008a74:	19d2      	adds	r2, r2, r7
 8008a76:	8812      	ldrh	r2, [r2, #0]
 8008a78:	60da      	str	r2, [r3, #12]
 8008a7a:	e051      	b.n	8008b20 <UART_SetConfig+0x374>
      }
      else
      {
        ret = HAL_ERROR;
 8008a7c:	231f      	movs	r3, #31
 8008a7e:	2220      	movs	r2, #32
 8008a80:	189b      	adds	r3, r3, r2
 8008a82:	19db      	adds	r3, r3, r7
 8008a84:	2201      	movs	r2, #1
 8008a86:	701a      	strb	r2, [r3, #0]
 8008a88:	e04a      	b.n	8008b20 <UART_SetConfig+0x374>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008a8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a8c:	0018      	movs	r0, r3
 8008a8e:	f7fe fe05 	bl	800769c <HAL_RCCEx_GetPeriphCLKFreq>
 8008a92:	0003      	movs	r3, r0
 8008a94:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (pclk != 0U)
 8008a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d041      	beq.n	8008b20 <UART_SetConfig+0x374>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8008b10 <UART_SetConfig+0x364>)
 8008aa2:	0052      	lsls	r2, r2, #1
 8008aa4:	5ad3      	ldrh	r3, [r2, r3]
 8008aa6:	0019      	movs	r1, r3
 8008aa8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008aaa:	f7f7 fb2d 	bl	8000108 <__udivsi3>
 8008aae:	0003      	movs	r3, r0
 8008ab0:	001a      	movs	r2, r3
 8008ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	085b      	lsrs	r3, r3, #1
 8008ab8:	18d2      	adds	r2, r2, r3
 8008aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	0019      	movs	r1, r3
 8008ac0:	0010      	movs	r0, r2
 8008ac2:	f7f7 fb21 	bl	8000108 <__udivsi3>
 8008ac6:	0003      	movs	r3, r0
 8008ac8:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008acc:	2b0f      	cmp	r3, #15
 8008ace:	d921      	bls.n	8008b14 <UART_SetConfig+0x368>
 8008ad0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ad2:	2380      	movs	r3, #128	@ 0x80
 8008ad4:	025b      	lsls	r3, r3, #9
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d21c      	bcs.n	8008b14 <UART_SetConfig+0x368>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	60da      	str	r2, [r3, #12]
 8008ae4:	e01c      	b.n	8008b20 <UART_SetConfig+0x374>
 8008ae6:	46c0      	nop			@ (mov r8, r8)
 8008ae8:	40008000 	.word	0x40008000
 8008aec:	cfff69f3 	.word	0xcfff69f3
 8008af0:	ffffcfff 	.word	0xffffcfff
 8008af4:	40008400 	.word	0x40008400
 8008af8:	40008c00 	.word	0x40008c00
 8008afc:	11fff4ff 	.word	0x11fff4ff
 8008b00:	40013800 	.word	0x40013800
 8008b04:	40004400 	.word	0x40004400
 8008b08:	40004800 	.word	0x40004800
 8008b0c:	40004c00 	.word	0x40004c00
 8008b10:	08009844 	.word	0x08009844
      }
      else
      {
        ret = HAL_ERROR;
 8008b14:	231f      	movs	r3, #31
 8008b16:	2220      	movs	r2, #32
 8008b18:	189b      	adds	r3, r3, r2
 8008b1a:	19db      	adds	r3, r3, r7
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b22:	226a      	movs	r2, #106	@ 0x6a
 8008b24:	2101      	movs	r1, #1
 8008b26:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8008b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b2a:	2268      	movs	r2, #104	@ 0x68
 8008b2c:	2101      	movs	r1, #1
 8008b2e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b32:	2200      	movs	r2, #0
 8008b34:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b38:	2200      	movs	r2, #0
 8008b3a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008b3c:	231f      	movs	r3, #31
 8008b3e:	2220      	movs	r2, #32
 8008b40:	189b      	adds	r3, r3, r2
 8008b42:	19db      	adds	r3, r3, r7
 8008b44:	781b      	ldrb	r3, [r3, #0]
}
 8008b46:	0018      	movs	r0, r3
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	b012      	add	sp, #72	@ 0x48
 8008b4c:	bdb0      	pop	{r4, r5, r7, pc}
 8008b4e:	46c0      	nop			@ (mov r8, r8)

08008b50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b5c:	2208      	movs	r2, #8
 8008b5e:	4013      	ands	r3, r2
 8008b60:	d00b      	beq.n	8008b7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	4a4a      	ldr	r2, [pc, #296]	@ (8008c94 <UART_AdvFeatureConfig+0x144>)
 8008b6a:	4013      	ands	r3, r2
 8008b6c:	0019      	movs	r1, r3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	430a      	orrs	r2, r1
 8008b78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b7e:	2201      	movs	r2, #1
 8008b80:	4013      	ands	r3, r2
 8008b82:	d00b      	beq.n	8008b9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	4a43      	ldr	r2, [pc, #268]	@ (8008c98 <UART_AdvFeatureConfig+0x148>)
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	0019      	movs	r1, r3
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	430a      	orrs	r2, r1
 8008b9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ba0:	2202      	movs	r2, #2
 8008ba2:	4013      	ands	r3, r2
 8008ba4:	d00b      	beq.n	8008bbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	4a3b      	ldr	r2, [pc, #236]	@ (8008c9c <UART_AdvFeatureConfig+0x14c>)
 8008bae:	4013      	ands	r3, r2
 8008bb0:	0019      	movs	r1, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	430a      	orrs	r2, r1
 8008bbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bc2:	2204      	movs	r2, #4
 8008bc4:	4013      	ands	r3, r2
 8008bc6:	d00b      	beq.n	8008be0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	4a34      	ldr	r2, [pc, #208]	@ (8008ca0 <UART_AdvFeatureConfig+0x150>)
 8008bd0:	4013      	ands	r3, r2
 8008bd2:	0019      	movs	r1, r3
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	430a      	orrs	r2, r1
 8008bde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008be4:	2210      	movs	r2, #16
 8008be6:	4013      	ands	r3, r2
 8008be8:	d00b      	beq.n	8008c02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	4a2c      	ldr	r2, [pc, #176]	@ (8008ca4 <UART_AdvFeatureConfig+0x154>)
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	0019      	movs	r1, r3
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	430a      	orrs	r2, r1
 8008c00:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c06:	2220      	movs	r2, #32
 8008c08:	4013      	ands	r3, r2
 8008c0a:	d00b      	beq.n	8008c24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	4a25      	ldr	r2, [pc, #148]	@ (8008ca8 <UART_AdvFeatureConfig+0x158>)
 8008c14:	4013      	ands	r3, r2
 8008c16:	0019      	movs	r1, r3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	430a      	orrs	r2, r1
 8008c22:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c28:	2240      	movs	r2, #64	@ 0x40
 8008c2a:	4013      	ands	r3, r2
 8008c2c:	d01d      	beq.n	8008c6a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	4a1d      	ldr	r2, [pc, #116]	@ (8008cac <UART_AdvFeatureConfig+0x15c>)
 8008c36:	4013      	ands	r3, r2
 8008c38:	0019      	movs	r1, r3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	430a      	orrs	r2, r1
 8008c44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c4a:	2380      	movs	r3, #128	@ 0x80
 8008c4c:	035b      	lsls	r3, r3, #13
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d10b      	bne.n	8008c6a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	4a15      	ldr	r2, [pc, #84]	@ (8008cb0 <UART_AdvFeatureConfig+0x160>)
 8008c5a:	4013      	ands	r3, r2
 8008c5c:	0019      	movs	r1, r3
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	430a      	orrs	r2, r1
 8008c68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c6e:	2280      	movs	r2, #128	@ 0x80
 8008c70:	4013      	ands	r3, r2
 8008c72:	d00b      	beq.n	8008c8c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	4a0e      	ldr	r2, [pc, #56]	@ (8008cb4 <UART_AdvFeatureConfig+0x164>)
 8008c7c:	4013      	ands	r3, r2
 8008c7e:	0019      	movs	r1, r3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	430a      	orrs	r2, r1
 8008c8a:	605a      	str	r2, [r3, #4]
  }
}
 8008c8c:	46c0      	nop			@ (mov r8, r8)
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	b002      	add	sp, #8
 8008c92:	bd80      	pop	{r7, pc}
 8008c94:	ffff7fff 	.word	0xffff7fff
 8008c98:	fffdffff 	.word	0xfffdffff
 8008c9c:	fffeffff 	.word	0xfffeffff
 8008ca0:	fffbffff 	.word	0xfffbffff
 8008ca4:	ffffefff 	.word	0xffffefff
 8008ca8:	ffffdfff 	.word	0xffffdfff
 8008cac:	ffefffff 	.word	0xffefffff
 8008cb0:	ff9fffff 	.word	0xff9fffff
 8008cb4:	fff7ffff 	.word	0xfff7ffff

08008cb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b092      	sub	sp, #72	@ 0x48
 8008cbc:	af02      	add	r7, sp, #8
 8008cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2290      	movs	r2, #144	@ 0x90
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008cc8:	f7fc fc54 	bl	8005574 <HAL_GetTick>
 8008ccc:	0003      	movs	r3, r0
 8008cce:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2208      	movs	r2, #8
 8008cd8:	4013      	ands	r3, r2
 8008cda:	2b08      	cmp	r3, #8
 8008cdc:	d12d      	bne.n	8008d3a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ce0:	2280      	movs	r2, #128	@ 0x80
 8008ce2:	0391      	lsls	r1, r2, #14
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	4a47      	ldr	r2, [pc, #284]	@ (8008e04 <UART_CheckIdleState+0x14c>)
 8008ce8:	9200      	str	r2, [sp, #0]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f000 f88e 	bl	8008e0c <UART_WaitOnFlagUntilTimeout>
 8008cf0:	1e03      	subs	r3, r0, #0
 8008cf2:	d022      	beq.n	8008d3a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008cf4:	f3ef 8310 	mrs	r3, PRIMASK
 8008cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008cfe:	2301      	movs	r3, #1
 8008d00:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d04:	f383 8810 	msr	PRIMASK, r3
}
 8008d08:	46c0      	nop			@ (mov r8, r8)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2180      	movs	r1, #128	@ 0x80
 8008d16:	438a      	bics	r2, r1
 8008d18:	601a      	str	r2, [r3, #0]
 8008d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d20:	f383 8810 	msr	PRIMASK, r3
}
 8008d24:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2288      	movs	r2, #136	@ 0x88
 8008d2a:	2120      	movs	r1, #32
 8008d2c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2284      	movs	r2, #132	@ 0x84
 8008d32:	2100      	movs	r1, #0
 8008d34:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d36:	2303      	movs	r3, #3
 8008d38:	e060      	b.n	8008dfc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2204      	movs	r2, #4
 8008d42:	4013      	ands	r3, r2
 8008d44:	2b04      	cmp	r3, #4
 8008d46:	d146      	bne.n	8008dd6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d4a:	2280      	movs	r2, #128	@ 0x80
 8008d4c:	03d1      	lsls	r1, r2, #15
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	4a2c      	ldr	r2, [pc, #176]	@ (8008e04 <UART_CheckIdleState+0x14c>)
 8008d52:	9200      	str	r2, [sp, #0]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f000 f859 	bl	8008e0c <UART_WaitOnFlagUntilTimeout>
 8008d5a:	1e03      	subs	r3, r0, #0
 8008d5c:	d03b      	beq.n	8008dd6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008d5e:	f3ef 8310 	mrs	r3, PRIMASK
 8008d62:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d64:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d66:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d68:	2301      	movs	r3, #1
 8008d6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	f383 8810 	msr	PRIMASK, r3
}
 8008d72:	46c0      	nop			@ (mov r8, r8)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4922      	ldr	r1, [pc, #136]	@ (8008e08 <UART_CheckIdleState+0x150>)
 8008d80:	400a      	ands	r2, r1
 8008d82:	601a      	str	r2, [r3, #0]
 8008d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	f383 8810 	msr	PRIMASK, r3
}
 8008d8e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008d90:	f3ef 8310 	mrs	r3, PRIMASK
 8008d94:	61bb      	str	r3, [r7, #24]
  return(result);
 8008d96:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d98:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	f383 8810 	msr	PRIMASK, r3
}
 8008da4:	46c0      	nop			@ (mov r8, r8)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	689a      	ldr	r2, [r3, #8]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2101      	movs	r1, #1
 8008db2:	438a      	bics	r2, r1
 8008db4:	609a      	str	r2, [r3, #8]
 8008db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dba:	6a3b      	ldr	r3, [r7, #32]
 8008dbc:	f383 8810 	msr	PRIMASK, r3
}
 8008dc0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	228c      	movs	r2, #140	@ 0x8c
 8008dc6:	2120      	movs	r1, #32
 8008dc8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2284      	movs	r2, #132	@ 0x84
 8008dce:	2100      	movs	r1, #0
 8008dd0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	e012      	b.n	8008dfc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2288      	movs	r2, #136	@ 0x88
 8008dda:	2120      	movs	r1, #32
 8008ddc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	228c      	movs	r2, #140	@ 0x8c
 8008de2:	2120      	movs	r1, #32
 8008de4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2284      	movs	r2, #132	@ 0x84
 8008df6:	2100      	movs	r1, #0
 8008df8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008dfa:	2300      	movs	r3, #0
}
 8008dfc:	0018      	movs	r0, r3
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	b010      	add	sp, #64	@ 0x40
 8008e02:	bd80      	pop	{r7, pc}
 8008e04:	01ffffff 	.word	0x01ffffff
 8008e08:	fffffedf 	.word	0xfffffedf

08008e0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	603b      	str	r3, [r7, #0]
 8008e18:	1dfb      	adds	r3, r7, #7
 8008e1a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e1c:	e051      	b.n	8008ec2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	3301      	adds	r3, #1
 8008e22:	d04e      	beq.n	8008ec2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e24:	f7fc fba6 	bl	8005574 <HAL_GetTick>
 8008e28:	0002      	movs	r2, r0
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	1ad3      	subs	r3, r2, r3
 8008e2e:	69ba      	ldr	r2, [r7, #24]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d302      	bcc.n	8008e3a <UART_WaitOnFlagUntilTimeout+0x2e>
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d101      	bne.n	8008e3e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8008e3a:	2303      	movs	r3, #3
 8008e3c:	e051      	b.n	8008ee2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2204      	movs	r2, #4
 8008e46:	4013      	ands	r3, r2
 8008e48:	d03b      	beq.n	8008ec2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	2b80      	cmp	r3, #128	@ 0x80
 8008e4e:	d038      	beq.n	8008ec2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	2b40      	cmp	r3, #64	@ 0x40
 8008e54:	d035      	beq.n	8008ec2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	69db      	ldr	r3, [r3, #28]
 8008e5c:	2208      	movs	r2, #8
 8008e5e:	4013      	ands	r3, r2
 8008e60:	2b08      	cmp	r3, #8
 8008e62:	d111      	bne.n	8008e88 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2208      	movs	r2, #8
 8008e6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	0018      	movs	r0, r3
 8008e70:	f000 f83c 	bl	8008eec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2290      	movs	r2, #144	@ 0x90
 8008e78:	2108      	movs	r1, #8
 8008e7a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2284      	movs	r2, #132	@ 0x84
 8008e80:	2100      	movs	r1, #0
 8008e82:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8008e84:	2301      	movs	r3, #1
 8008e86:	e02c      	b.n	8008ee2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	69da      	ldr	r2, [r3, #28]
 8008e8e:	2380      	movs	r3, #128	@ 0x80
 8008e90:	011b      	lsls	r3, r3, #4
 8008e92:	401a      	ands	r2, r3
 8008e94:	2380      	movs	r3, #128	@ 0x80
 8008e96:	011b      	lsls	r3, r3, #4
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d112      	bne.n	8008ec2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2280      	movs	r2, #128	@ 0x80
 8008ea2:	0112      	lsls	r2, r2, #4
 8008ea4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	0018      	movs	r0, r3
 8008eaa:	f000 f81f 	bl	8008eec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2290      	movs	r2, #144	@ 0x90
 8008eb2:	2120      	movs	r1, #32
 8008eb4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2284      	movs	r2, #132	@ 0x84
 8008eba:	2100      	movs	r1, #0
 8008ebc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008ebe:	2303      	movs	r3, #3
 8008ec0:	e00f      	b.n	8008ee2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	69db      	ldr	r3, [r3, #28]
 8008ec8:	68ba      	ldr	r2, [r7, #8]
 8008eca:	4013      	ands	r3, r2
 8008ecc:	68ba      	ldr	r2, [r7, #8]
 8008ece:	1ad3      	subs	r3, r2, r3
 8008ed0:	425a      	negs	r2, r3
 8008ed2:	4153      	adcs	r3, r2
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	001a      	movs	r2, r3
 8008ed8:	1dfb      	adds	r3, r7, #7
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d09e      	beq.n	8008e1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ee0:	2300      	movs	r3, #0
}
 8008ee2:	0018      	movs	r0, r3
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	b004      	add	sp, #16
 8008ee8:	bd80      	pop	{r7, pc}
	...

08008eec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b08e      	sub	sp, #56	@ 0x38
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008ef4:	f3ef 8310 	mrs	r3, PRIMASK
 8008ef8:	617b      	str	r3, [r7, #20]
  return(result);
 8008efa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008efc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008efe:	2301      	movs	r3, #1
 8008f00:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	f383 8810 	msr	PRIMASK, r3
}
 8008f08:	46c0      	nop			@ (mov r8, r8)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4926      	ldr	r1, [pc, #152]	@ (8008fb0 <UART_EndRxTransfer+0xc4>)
 8008f16:	400a      	ands	r2, r1
 8008f18:	601a      	str	r2, [r3, #0]
 8008f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f1e:	69fb      	ldr	r3, [r7, #28]
 8008f20:	f383 8810 	msr	PRIMASK, r3
}
 8008f24:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008f26:	f3ef 8310 	mrs	r3, PRIMASK
 8008f2a:	623b      	str	r3, [r7, #32]
  return(result);
 8008f2c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f30:	2301      	movs	r3, #1
 8008f32:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f36:	f383 8810 	msr	PRIMASK, r3
}
 8008f3a:	46c0      	nop			@ (mov r8, r8)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	689a      	ldr	r2, [r3, #8]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	491b      	ldr	r1, [pc, #108]	@ (8008fb4 <UART_EndRxTransfer+0xc8>)
 8008f48:	400a      	ands	r2, r1
 8008f4a:	609a      	str	r2, [r3, #8]
 8008f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f52:	f383 8810 	msr	PRIMASK, r3
}
 8008f56:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d118      	bne.n	8008f92 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008f60:	f3ef 8310 	mrs	r3, PRIMASK
 8008f64:	60bb      	str	r3, [r7, #8]
  return(result);
 8008f66:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f383 8810 	msr	PRIMASK, r3
}
 8008f74:	46c0      	nop			@ (mov r8, r8)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2110      	movs	r1, #16
 8008f82:	438a      	bics	r2, r1
 8008f84:	601a      	str	r2, [r3, #0]
 8008f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	f383 8810 	msr	PRIMASK, r3
}
 8008f90:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	228c      	movs	r2, #140	@ 0x8c
 8008f96:	2120      	movs	r1, #32
 8008f98:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008fa6:	46c0      	nop			@ (mov r8, r8)
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	b00e      	add	sp, #56	@ 0x38
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	46c0      	nop			@ (mov r8, r8)
 8008fb0:	fffffedf 	.word	0xfffffedf
 8008fb4:	effffffe 	.word	0xeffffffe

08008fb8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2284      	movs	r2, #132	@ 0x84
 8008fc4:	5c9b      	ldrb	r3, [r3, r2]
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d101      	bne.n	8008fce <HAL_UARTEx_DisableFifoMode+0x16>
 8008fca:	2302      	movs	r3, #2
 8008fcc:	e027      	b.n	800901e <HAL_UARTEx_DisableFifoMode+0x66>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2284      	movs	r2, #132	@ 0x84
 8008fd2:	2101      	movs	r1, #1
 8008fd4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2288      	movs	r2, #136	@ 0x88
 8008fda:	2124      	movs	r1, #36	@ 0x24
 8008fdc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2101      	movs	r1, #1
 8008ff2:	438a      	bics	r2, r1
 8008ff4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	4a0b      	ldr	r2, [pc, #44]	@ (8009028 <HAL_UARTEx_DisableFifoMode+0x70>)
 8008ffa:	4013      	ands	r3, r2
 8008ffc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2288      	movs	r2, #136	@ 0x88
 8009010:	2120      	movs	r1, #32
 8009012:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2284      	movs	r2, #132	@ 0x84
 8009018:	2100      	movs	r1, #0
 800901a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800901c:	2300      	movs	r3, #0
}
 800901e:	0018      	movs	r0, r3
 8009020:	46bd      	mov	sp, r7
 8009022:	b004      	add	sp, #16
 8009024:	bd80      	pop	{r7, pc}
 8009026:	46c0      	nop			@ (mov r8, r8)
 8009028:	dfffffff 	.word	0xdfffffff

0800902c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2284      	movs	r2, #132	@ 0x84
 800903a:	5c9b      	ldrb	r3, [r3, r2]
 800903c:	2b01      	cmp	r3, #1
 800903e:	d101      	bne.n	8009044 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009040:	2302      	movs	r3, #2
 8009042:	e02e      	b.n	80090a2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2284      	movs	r2, #132	@ 0x84
 8009048:	2101      	movs	r1, #1
 800904a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2288      	movs	r2, #136	@ 0x88
 8009050:	2124      	movs	r1, #36	@ 0x24
 8009052:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2101      	movs	r1, #1
 8009068:	438a      	bics	r2, r1
 800906a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	00db      	lsls	r3, r3, #3
 8009074:	08d9      	lsrs	r1, r3, #3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	683a      	ldr	r2, [r7, #0]
 800907c:	430a      	orrs	r2, r1
 800907e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	0018      	movs	r0, r3
 8009084:	f000 f854 	bl	8009130 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2288      	movs	r2, #136	@ 0x88
 8009094:	2120      	movs	r1, #32
 8009096:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2284      	movs	r2, #132	@ 0x84
 800909c:	2100      	movs	r1, #0
 800909e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	0018      	movs	r0, r3
 80090a4:	46bd      	mov	sp, r7
 80090a6:	b004      	add	sp, #16
 80090a8:	bd80      	pop	{r7, pc}
	...

080090ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2284      	movs	r2, #132	@ 0x84
 80090ba:	5c9b      	ldrb	r3, [r3, r2]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d101      	bne.n	80090c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80090c0:	2302      	movs	r3, #2
 80090c2:	e02f      	b.n	8009124 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2284      	movs	r2, #132	@ 0x84
 80090c8:	2101      	movs	r1, #1
 80090ca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2288      	movs	r2, #136	@ 0x88
 80090d0:	2124      	movs	r1, #36	@ 0x24
 80090d2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2101      	movs	r1, #1
 80090e8:	438a      	bics	r2, r1
 80090ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	4a0e      	ldr	r2, [pc, #56]	@ (800912c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80090f4:	4013      	ands	r3, r2
 80090f6:	0019      	movs	r1, r3
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	683a      	ldr	r2, [r7, #0]
 80090fe:	430a      	orrs	r2, r1
 8009100:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	0018      	movs	r0, r3
 8009106:	f000 f813 	bl	8009130 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	68fa      	ldr	r2, [r7, #12]
 8009110:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2288      	movs	r2, #136	@ 0x88
 8009116:	2120      	movs	r1, #32
 8009118:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2284      	movs	r2, #132	@ 0x84
 800911e:	2100      	movs	r1, #0
 8009120:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009122:	2300      	movs	r3, #0
}
 8009124:	0018      	movs	r0, r3
 8009126:	46bd      	mov	sp, r7
 8009128:	b004      	add	sp, #16
 800912a:	bd80      	pop	{r7, pc}
 800912c:	f1ffffff 	.word	0xf1ffffff

08009130 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009132:	b085      	sub	sp, #20
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800913c:	2b00      	cmp	r3, #0
 800913e:	d108      	bne.n	8009152 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	226a      	movs	r2, #106	@ 0x6a
 8009144:	2101      	movs	r1, #1
 8009146:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2268      	movs	r2, #104	@ 0x68
 800914c:	2101      	movs	r1, #1
 800914e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009150:	e043      	b.n	80091da <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009152:	260f      	movs	r6, #15
 8009154:	19bb      	adds	r3, r7, r6
 8009156:	2208      	movs	r2, #8
 8009158:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800915a:	200e      	movs	r0, #14
 800915c:	183b      	adds	r3, r7, r0
 800915e:	2208      	movs	r2, #8
 8009160:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	0e5b      	lsrs	r3, r3, #25
 800916a:	b2da      	uxtb	r2, r3
 800916c:	240d      	movs	r4, #13
 800916e:	193b      	adds	r3, r7, r4
 8009170:	2107      	movs	r1, #7
 8009172:	400a      	ands	r2, r1
 8009174:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	0f5b      	lsrs	r3, r3, #29
 800917e:	b2da      	uxtb	r2, r3
 8009180:	250c      	movs	r5, #12
 8009182:	197b      	adds	r3, r7, r5
 8009184:	2107      	movs	r1, #7
 8009186:	400a      	ands	r2, r1
 8009188:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800918a:	183b      	adds	r3, r7, r0
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	197a      	adds	r2, r7, r5
 8009190:	7812      	ldrb	r2, [r2, #0]
 8009192:	4914      	ldr	r1, [pc, #80]	@ (80091e4 <UARTEx_SetNbDataToProcess+0xb4>)
 8009194:	5c8a      	ldrb	r2, [r1, r2]
 8009196:	435a      	muls	r2, r3
 8009198:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800919a:	197b      	adds	r3, r7, r5
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	4a12      	ldr	r2, [pc, #72]	@ (80091e8 <UARTEx_SetNbDataToProcess+0xb8>)
 80091a0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091a2:	0019      	movs	r1, r3
 80091a4:	f7f7 f83a 	bl	800021c <__divsi3>
 80091a8:	0003      	movs	r3, r0
 80091aa:	b299      	uxth	r1, r3
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	226a      	movs	r2, #106	@ 0x6a
 80091b0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091b2:	19bb      	adds	r3, r7, r6
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	193a      	adds	r2, r7, r4
 80091b8:	7812      	ldrb	r2, [r2, #0]
 80091ba:	490a      	ldr	r1, [pc, #40]	@ (80091e4 <UARTEx_SetNbDataToProcess+0xb4>)
 80091bc:	5c8a      	ldrb	r2, [r1, r2]
 80091be:	435a      	muls	r2, r3
 80091c0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80091c2:	193b      	adds	r3, r7, r4
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	4a08      	ldr	r2, [pc, #32]	@ (80091e8 <UARTEx_SetNbDataToProcess+0xb8>)
 80091c8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091ca:	0019      	movs	r1, r3
 80091cc:	f7f7 f826 	bl	800021c <__divsi3>
 80091d0:	0003      	movs	r3, r0
 80091d2:	b299      	uxth	r1, r3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2268      	movs	r2, #104	@ 0x68
 80091d8:	5299      	strh	r1, [r3, r2]
}
 80091da:	46c0      	nop			@ (mov r8, r8)
 80091dc:	46bd      	mov	sp, r7
 80091de:	b005      	add	sp, #20
 80091e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091e2:	46c0      	nop			@ (mov r8, r8)
 80091e4:	0800985c 	.word	0x0800985c
 80091e8:	08009864 	.word	0x08009864

080091ec <memset>:
 80091ec:	0003      	movs	r3, r0
 80091ee:	1882      	adds	r2, r0, r2
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d100      	bne.n	80091f6 <memset+0xa>
 80091f4:	4770      	bx	lr
 80091f6:	7019      	strb	r1, [r3, #0]
 80091f8:	3301      	adds	r3, #1
 80091fa:	e7f9      	b.n	80091f0 <memset+0x4>

080091fc <__libc_init_array>:
 80091fc:	b570      	push	{r4, r5, r6, lr}
 80091fe:	2600      	movs	r6, #0
 8009200:	4c0c      	ldr	r4, [pc, #48]	@ (8009234 <__libc_init_array+0x38>)
 8009202:	4d0d      	ldr	r5, [pc, #52]	@ (8009238 <__libc_init_array+0x3c>)
 8009204:	1b64      	subs	r4, r4, r5
 8009206:	10a4      	asrs	r4, r4, #2
 8009208:	42a6      	cmp	r6, r4
 800920a:	d109      	bne.n	8009220 <__libc_init_array+0x24>
 800920c:	2600      	movs	r6, #0
 800920e:	f000 f819 	bl	8009244 <_init>
 8009212:	4c0a      	ldr	r4, [pc, #40]	@ (800923c <__libc_init_array+0x40>)
 8009214:	4d0a      	ldr	r5, [pc, #40]	@ (8009240 <__libc_init_array+0x44>)
 8009216:	1b64      	subs	r4, r4, r5
 8009218:	10a4      	asrs	r4, r4, #2
 800921a:	42a6      	cmp	r6, r4
 800921c:	d105      	bne.n	800922a <__libc_init_array+0x2e>
 800921e:	bd70      	pop	{r4, r5, r6, pc}
 8009220:	00b3      	lsls	r3, r6, #2
 8009222:	58eb      	ldr	r3, [r5, r3]
 8009224:	4798      	blx	r3
 8009226:	3601      	adds	r6, #1
 8009228:	e7ee      	b.n	8009208 <__libc_init_array+0xc>
 800922a:	00b3      	lsls	r3, r6, #2
 800922c:	58eb      	ldr	r3, [r5, r3]
 800922e:	4798      	blx	r3
 8009230:	3601      	adds	r6, #1
 8009232:	e7f2      	b.n	800921a <__libc_init_array+0x1e>
 8009234:	08009874 	.word	0x08009874
 8009238:	08009874 	.word	0x08009874
 800923c:	08009878 	.word	0x08009878
 8009240:	08009874 	.word	0x08009874

08009244 <_init>:
 8009244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009246:	46c0      	nop			@ (mov r8, r8)
 8009248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800924a:	bc08      	pop	{r3}
 800924c:	469e      	mov	lr, r3
 800924e:	4770      	bx	lr

08009250 <_fini>:
 8009250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009252:	46c0      	nop			@ (mov r8, r8)
 8009254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009256:	bc08      	pop	{r3}
 8009258:	469e      	mov	lr, r3
 800925a:	4770      	bx	lr
