
e-paper_18x5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f8a0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000bdd8  0800f960  0800f960  00010960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b738  0801b738  0001d340  2**0
                  CONTENTS
  4 .ARM          00000008  0801b738  0801b738  0001c738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b740  0801b740  0001d340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b740  0801b740  0001c740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b744  0801b744  0001c744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000340  20000000  0801b748  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  20000340  0801ba88  0001d340  2**2
                  ALLOC
 10 ._user_heap_stack 00001900  20000748  0801ba88  0001d748  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001d340  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020c60  00000000  00000000  0001d368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004eac  00000000  00000000  0003dfc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b30  00000000  00000000  00042e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014be  00000000  00000000  000449a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025528  00000000  00000000  00045e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026498  00000000  00000000  0006b38e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5bd2  00000000  00000000  00091826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001673f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007084  00000000  00000000  0016743c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0016e4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000340 	.word	0x20000340
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800f948 	.word	0x0800f948

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000344 	.word	0x20000344
 8000104:	0800f948 	.word	0x0800f948

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f891 	bl	8001564 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ffd1 	bl	80013f4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f883 	bl	8001564 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f879 	bl	8001564 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fffb 	bl	800147c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fff1 	bl	800147c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__clzsi2>:
 80004a8:	211c      	movs	r1, #28
 80004aa:	2301      	movs	r3, #1
 80004ac:	041b      	lsls	r3, r3, #16
 80004ae:	4298      	cmp	r0, r3
 80004b0:	d301      	bcc.n	80004b6 <__clzsi2+0xe>
 80004b2:	0c00      	lsrs	r0, r0, #16
 80004b4:	3910      	subs	r1, #16
 80004b6:	0a1b      	lsrs	r3, r3, #8
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d301      	bcc.n	80004c0 <__clzsi2+0x18>
 80004bc:	0a00      	lsrs	r0, r0, #8
 80004be:	3908      	subs	r1, #8
 80004c0:	091b      	lsrs	r3, r3, #4
 80004c2:	4298      	cmp	r0, r3
 80004c4:	d301      	bcc.n	80004ca <__clzsi2+0x22>
 80004c6:	0900      	lsrs	r0, r0, #4
 80004c8:	3904      	subs	r1, #4
 80004ca:	a202      	add	r2, pc, #8	@ (adr r2, 80004d4 <__clzsi2+0x2c>)
 80004cc:	5c10      	ldrb	r0, [r2, r0]
 80004ce:	1840      	adds	r0, r0, r1
 80004d0:	4770      	bx	lr
 80004d2:	46c0      	nop			@ (mov r8, r8)
 80004d4:	02020304 	.word	0x02020304
 80004d8:	01010101 	.word	0x01010101
	...

080004e4 <__aeabi_uldivmod>:
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d111      	bne.n	800050c <__aeabi_uldivmod+0x28>
 80004e8:	2a00      	cmp	r2, #0
 80004ea:	d10f      	bne.n	800050c <__aeabi_uldivmod+0x28>
 80004ec:	2900      	cmp	r1, #0
 80004ee:	d100      	bne.n	80004f2 <__aeabi_uldivmod+0xe>
 80004f0:	2800      	cmp	r0, #0
 80004f2:	d002      	beq.n	80004fa <__aeabi_uldivmod+0x16>
 80004f4:	2100      	movs	r1, #0
 80004f6:	43c9      	mvns	r1, r1
 80004f8:	0008      	movs	r0, r1
 80004fa:	b407      	push	{r0, r1, r2}
 80004fc:	4802      	ldr	r0, [pc, #8]	@ (8000508 <__aeabi_uldivmod+0x24>)
 80004fe:	a102      	add	r1, pc, #8	@ (adr r1, 8000508 <__aeabi_uldivmod+0x24>)
 8000500:	1840      	adds	r0, r0, r1
 8000502:	9002      	str	r0, [sp, #8]
 8000504:	bd03      	pop	{r0, r1, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)
 8000508:	ffffff21 	.word	0xffffff21
 800050c:	b403      	push	{r0, r1}
 800050e:	4668      	mov	r0, sp
 8000510:	b501      	push	{r0, lr}
 8000512:	9802      	ldr	r0, [sp, #8]
 8000514:	f000 f824 	bl	8000560 <__udivmoddi4>
 8000518:	9b01      	ldr	r3, [sp, #4]
 800051a:	469e      	mov	lr, r3
 800051c:	b002      	add	sp, #8
 800051e:	bc0c      	pop	{r2, r3}
 8000520:	4770      	bx	lr
 8000522:	46c0      	nop			@ (mov r8, r8)

08000524 <__aeabi_d2uiz>:
 8000524:	b570      	push	{r4, r5, r6, lr}
 8000526:	2200      	movs	r2, #0
 8000528:	4b0c      	ldr	r3, [pc, #48]	@ (800055c <__aeabi_d2uiz+0x38>)
 800052a:	0004      	movs	r4, r0
 800052c:	000d      	movs	r5, r1
 800052e:	f7ff ffb1 	bl	8000494 <__aeabi_dcmpge>
 8000532:	2800      	cmp	r0, #0
 8000534:	d104      	bne.n	8000540 <__aeabi_d2uiz+0x1c>
 8000536:	0020      	movs	r0, r4
 8000538:	0029      	movs	r1, r5
 800053a:	f001 ff0b 	bl	8002354 <__aeabi_d2iz>
 800053e:	bd70      	pop	{r4, r5, r6, pc}
 8000540:	4b06      	ldr	r3, [pc, #24]	@ (800055c <__aeabi_d2uiz+0x38>)
 8000542:	2200      	movs	r2, #0
 8000544:	0020      	movs	r0, r4
 8000546:	0029      	movs	r1, r5
 8000548:	f001 fb46 	bl	8001bd8 <__aeabi_dsub>
 800054c:	f001 ff02 	bl	8002354 <__aeabi_d2iz>
 8000550:	2380      	movs	r3, #128	@ 0x80
 8000552:	061b      	lsls	r3, r3, #24
 8000554:	469c      	mov	ip, r3
 8000556:	4460      	add	r0, ip
 8000558:	e7f1      	b.n	800053e <__aeabi_d2uiz+0x1a>
 800055a:	46c0      	nop			@ (mov r8, r8)
 800055c:	41e00000 	.word	0x41e00000

08000560 <__udivmoddi4>:
 8000560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000562:	4657      	mov	r7, sl
 8000564:	464e      	mov	r6, r9
 8000566:	4645      	mov	r5, r8
 8000568:	46de      	mov	lr, fp
 800056a:	b5e0      	push	{r5, r6, r7, lr}
 800056c:	0004      	movs	r4, r0
 800056e:	000d      	movs	r5, r1
 8000570:	4692      	mov	sl, r2
 8000572:	4699      	mov	r9, r3
 8000574:	b083      	sub	sp, #12
 8000576:	428b      	cmp	r3, r1
 8000578:	d830      	bhi.n	80005dc <__udivmoddi4+0x7c>
 800057a:	d02d      	beq.n	80005d8 <__udivmoddi4+0x78>
 800057c:	4649      	mov	r1, r9
 800057e:	4650      	mov	r0, sl
 8000580:	f001 ff76 	bl	8002470 <__clzdi2>
 8000584:	0029      	movs	r1, r5
 8000586:	0006      	movs	r6, r0
 8000588:	0020      	movs	r0, r4
 800058a:	f001 ff71 	bl	8002470 <__clzdi2>
 800058e:	1a33      	subs	r3, r6, r0
 8000590:	4698      	mov	r8, r3
 8000592:	3b20      	subs	r3, #32
 8000594:	d434      	bmi.n	8000600 <__udivmoddi4+0xa0>
 8000596:	469b      	mov	fp, r3
 8000598:	4653      	mov	r3, sl
 800059a:	465a      	mov	r2, fp
 800059c:	4093      	lsls	r3, r2
 800059e:	4642      	mov	r2, r8
 80005a0:	001f      	movs	r7, r3
 80005a2:	4653      	mov	r3, sl
 80005a4:	4093      	lsls	r3, r2
 80005a6:	001e      	movs	r6, r3
 80005a8:	42af      	cmp	r7, r5
 80005aa:	d83b      	bhi.n	8000624 <__udivmoddi4+0xc4>
 80005ac:	42af      	cmp	r7, r5
 80005ae:	d100      	bne.n	80005b2 <__udivmoddi4+0x52>
 80005b0:	e079      	b.n	80006a6 <__udivmoddi4+0x146>
 80005b2:	465b      	mov	r3, fp
 80005b4:	1ba4      	subs	r4, r4, r6
 80005b6:	41bd      	sbcs	r5, r7
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	da00      	bge.n	80005be <__udivmoddi4+0x5e>
 80005bc:	e076      	b.n	80006ac <__udivmoddi4+0x14c>
 80005be:	2200      	movs	r2, #0
 80005c0:	2300      	movs	r3, #0
 80005c2:	9200      	str	r2, [sp, #0]
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2301      	movs	r3, #1
 80005c8:	465a      	mov	r2, fp
 80005ca:	4093      	lsls	r3, r2
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2301      	movs	r3, #1
 80005d0:	4642      	mov	r2, r8
 80005d2:	4093      	lsls	r3, r2
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	e029      	b.n	800062c <__udivmoddi4+0xcc>
 80005d8:	4282      	cmp	r2, r0
 80005da:	d9cf      	bls.n	800057c <__udivmoddi4+0x1c>
 80005dc:	2200      	movs	r2, #0
 80005de:	2300      	movs	r3, #0
 80005e0:	9200      	str	r2, [sp, #0]
 80005e2:	9301      	str	r3, [sp, #4]
 80005e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <__udivmoddi4+0x8e>
 80005ea:	601c      	str	r4, [r3, #0]
 80005ec:	605d      	str	r5, [r3, #4]
 80005ee:	9800      	ldr	r0, [sp, #0]
 80005f0:	9901      	ldr	r1, [sp, #4]
 80005f2:	b003      	add	sp, #12
 80005f4:	bcf0      	pop	{r4, r5, r6, r7}
 80005f6:	46bb      	mov	fp, r7
 80005f8:	46b2      	mov	sl, r6
 80005fa:	46a9      	mov	r9, r5
 80005fc:	46a0      	mov	r8, r4
 80005fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000600:	4642      	mov	r2, r8
 8000602:	469b      	mov	fp, r3
 8000604:	2320      	movs	r3, #32
 8000606:	1a9b      	subs	r3, r3, r2
 8000608:	4652      	mov	r2, sl
 800060a:	40da      	lsrs	r2, r3
 800060c:	4641      	mov	r1, r8
 800060e:	0013      	movs	r3, r2
 8000610:	464a      	mov	r2, r9
 8000612:	408a      	lsls	r2, r1
 8000614:	0017      	movs	r7, r2
 8000616:	4642      	mov	r2, r8
 8000618:	431f      	orrs	r7, r3
 800061a:	4653      	mov	r3, sl
 800061c:	4093      	lsls	r3, r2
 800061e:	001e      	movs	r6, r3
 8000620:	42af      	cmp	r7, r5
 8000622:	d9c3      	bls.n	80005ac <__udivmoddi4+0x4c>
 8000624:	2200      	movs	r2, #0
 8000626:	2300      	movs	r3, #0
 8000628:	9200      	str	r2, [sp, #0]
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	4643      	mov	r3, r8
 800062e:	2b00      	cmp	r3, #0
 8000630:	d0d8      	beq.n	80005e4 <__udivmoddi4+0x84>
 8000632:	07fb      	lsls	r3, r7, #31
 8000634:	0872      	lsrs	r2, r6, #1
 8000636:	431a      	orrs	r2, r3
 8000638:	4646      	mov	r6, r8
 800063a:	087b      	lsrs	r3, r7, #1
 800063c:	e00e      	b.n	800065c <__udivmoddi4+0xfc>
 800063e:	42ab      	cmp	r3, r5
 8000640:	d101      	bne.n	8000646 <__udivmoddi4+0xe6>
 8000642:	42a2      	cmp	r2, r4
 8000644:	d80c      	bhi.n	8000660 <__udivmoddi4+0x100>
 8000646:	1aa4      	subs	r4, r4, r2
 8000648:	419d      	sbcs	r5, r3
 800064a:	2001      	movs	r0, #1
 800064c:	1924      	adds	r4, r4, r4
 800064e:	416d      	adcs	r5, r5
 8000650:	2100      	movs	r1, #0
 8000652:	3e01      	subs	r6, #1
 8000654:	1824      	adds	r4, r4, r0
 8000656:	414d      	adcs	r5, r1
 8000658:	2e00      	cmp	r6, #0
 800065a:	d006      	beq.n	800066a <__udivmoddi4+0x10a>
 800065c:	42ab      	cmp	r3, r5
 800065e:	d9ee      	bls.n	800063e <__udivmoddi4+0xde>
 8000660:	3e01      	subs	r6, #1
 8000662:	1924      	adds	r4, r4, r4
 8000664:	416d      	adcs	r5, r5
 8000666:	2e00      	cmp	r6, #0
 8000668:	d1f8      	bne.n	800065c <__udivmoddi4+0xfc>
 800066a:	9800      	ldr	r0, [sp, #0]
 800066c:	9901      	ldr	r1, [sp, #4]
 800066e:	465b      	mov	r3, fp
 8000670:	1900      	adds	r0, r0, r4
 8000672:	4169      	adcs	r1, r5
 8000674:	2b00      	cmp	r3, #0
 8000676:	db24      	blt.n	80006c2 <__udivmoddi4+0x162>
 8000678:	002b      	movs	r3, r5
 800067a:	465a      	mov	r2, fp
 800067c:	4644      	mov	r4, r8
 800067e:	40d3      	lsrs	r3, r2
 8000680:	002a      	movs	r2, r5
 8000682:	40e2      	lsrs	r2, r4
 8000684:	001c      	movs	r4, r3
 8000686:	465b      	mov	r3, fp
 8000688:	0015      	movs	r5, r2
 800068a:	2b00      	cmp	r3, #0
 800068c:	db2a      	blt.n	80006e4 <__udivmoddi4+0x184>
 800068e:	0026      	movs	r6, r4
 8000690:	409e      	lsls	r6, r3
 8000692:	0033      	movs	r3, r6
 8000694:	0026      	movs	r6, r4
 8000696:	4647      	mov	r7, r8
 8000698:	40be      	lsls	r6, r7
 800069a:	0032      	movs	r2, r6
 800069c:	1a80      	subs	r0, r0, r2
 800069e:	4199      	sbcs	r1, r3
 80006a0:	9000      	str	r0, [sp, #0]
 80006a2:	9101      	str	r1, [sp, #4]
 80006a4:	e79e      	b.n	80005e4 <__udivmoddi4+0x84>
 80006a6:	42a3      	cmp	r3, r4
 80006a8:	d8bc      	bhi.n	8000624 <__udivmoddi4+0xc4>
 80006aa:	e782      	b.n	80005b2 <__udivmoddi4+0x52>
 80006ac:	4642      	mov	r2, r8
 80006ae:	2320      	movs	r3, #32
 80006b0:	2100      	movs	r1, #0
 80006b2:	1a9b      	subs	r3, r3, r2
 80006b4:	2200      	movs	r2, #0
 80006b6:	9100      	str	r1, [sp, #0]
 80006b8:	9201      	str	r2, [sp, #4]
 80006ba:	2201      	movs	r2, #1
 80006bc:	40da      	lsrs	r2, r3
 80006be:	9201      	str	r2, [sp, #4]
 80006c0:	e785      	b.n	80005ce <__udivmoddi4+0x6e>
 80006c2:	4642      	mov	r2, r8
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	002a      	movs	r2, r5
 80006ca:	4646      	mov	r6, r8
 80006cc:	409a      	lsls	r2, r3
 80006ce:	0023      	movs	r3, r4
 80006d0:	40f3      	lsrs	r3, r6
 80006d2:	4644      	mov	r4, r8
 80006d4:	4313      	orrs	r3, r2
 80006d6:	002a      	movs	r2, r5
 80006d8:	40e2      	lsrs	r2, r4
 80006da:	001c      	movs	r4, r3
 80006dc:	465b      	mov	r3, fp
 80006de:	0015      	movs	r5, r2
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	dad4      	bge.n	800068e <__udivmoddi4+0x12e>
 80006e4:	4642      	mov	r2, r8
 80006e6:	002f      	movs	r7, r5
 80006e8:	2320      	movs	r3, #32
 80006ea:	0026      	movs	r6, r4
 80006ec:	4097      	lsls	r7, r2
 80006ee:	1a9b      	subs	r3, r3, r2
 80006f0:	40de      	lsrs	r6, r3
 80006f2:	003b      	movs	r3, r7
 80006f4:	4333      	orrs	r3, r6
 80006f6:	e7cd      	b.n	8000694 <__udivmoddi4+0x134>

080006f8 <__aeabi_dadd>:
 80006f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006fa:	4657      	mov	r7, sl
 80006fc:	464e      	mov	r6, r9
 80006fe:	4645      	mov	r5, r8
 8000700:	46de      	mov	lr, fp
 8000702:	b5e0      	push	{r5, r6, r7, lr}
 8000704:	b083      	sub	sp, #12
 8000706:	9000      	str	r0, [sp, #0]
 8000708:	9101      	str	r1, [sp, #4]
 800070a:	030c      	lsls	r4, r1, #12
 800070c:	004f      	lsls	r7, r1, #1
 800070e:	0fce      	lsrs	r6, r1, #31
 8000710:	0a61      	lsrs	r1, r4, #9
 8000712:	9c00      	ldr	r4, [sp, #0]
 8000714:	031d      	lsls	r5, r3, #12
 8000716:	0f64      	lsrs	r4, r4, #29
 8000718:	430c      	orrs	r4, r1
 800071a:	9900      	ldr	r1, [sp, #0]
 800071c:	9200      	str	r2, [sp, #0]
 800071e:	9301      	str	r3, [sp, #4]
 8000720:	00c8      	lsls	r0, r1, #3
 8000722:	0059      	lsls	r1, r3, #1
 8000724:	0d4b      	lsrs	r3, r1, #21
 8000726:	4699      	mov	r9, r3
 8000728:	9a00      	ldr	r2, [sp, #0]
 800072a:	9b01      	ldr	r3, [sp, #4]
 800072c:	0a6d      	lsrs	r5, r5, #9
 800072e:	0fd9      	lsrs	r1, r3, #31
 8000730:	0f53      	lsrs	r3, r2, #29
 8000732:	432b      	orrs	r3, r5
 8000734:	469a      	mov	sl, r3
 8000736:	9b00      	ldr	r3, [sp, #0]
 8000738:	0d7f      	lsrs	r7, r7, #21
 800073a:	00da      	lsls	r2, r3, #3
 800073c:	4694      	mov	ip, r2
 800073e:	464a      	mov	r2, r9
 8000740:	46b0      	mov	r8, r6
 8000742:	1aba      	subs	r2, r7, r2
 8000744:	428e      	cmp	r6, r1
 8000746:	d100      	bne.n	800074a <__aeabi_dadd+0x52>
 8000748:	e0b0      	b.n	80008ac <__aeabi_dadd+0x1b4>
 800074a:	2a00      	cmp	r2, #0
 800074c:	dc00      	bgt.n	8000750 <__aeabi_dadd+0x58>
 800074e:	e078      	b.n	8000842 <__aeabi_dadd+0x14a>
 8000750:	4649      	mov	r1, r9
 8000752:	2900      	cmp	r1, #0
 8000754:	d100      	bne.n	8000758 <__aeabi_dadd+0x60>
 8000756:	e0e9      	b.n	800092c <__aeabi_dadd+0x234>
 8000758:	49c9      	ldr	r1, [pc, #804]	@ (8000a80 <__aeabi_dadd+0x388>)
 800075a:	428f      	cmp	r7, r1
 800075c:	d100      	bne.n	8000760 <__aeabi_dadd+0x68>
 800075e:	e195      	b.n	8000a8c <__aeabi_dadd+0x394>
 8000760:	2501      	movs	r5, #1
 8000762:	2a38      	cmp	r2, #56	@ 0x38
 8000764:	dc16      	bgt.n	8000794 <__aeabi_dadd+0x9c>
 8000766:	2180      	movs	r1, #128	@ 0x80
 8000768:	4653      	mov	r3, sl
 800076a:	0409      	lsls	r1, r1, #16
 800076c:	430b      	orrs	r3, r1
 800076e:	469a      	mov	sl, r3
 8000770:	2a1f      	cmp	r2, #31
 8000772:	dd00      	ble.n	8000776 <__aeabi_dadd+0x7e>
 8000774:	e1e7      	b.n	8000b46 <__aeabi_dadd+0x44e>
 8000776:	2120      	movs	r1, #32
 8000778:	4655      	mov	r5, sl
 800077a:	1a8b      	subs	r3, r1, r2
 800077c:	4661      	mov	r1, ip
 800077e:	409d      	lsls	r5, r3
 8000780:	40d1      	lsrs	r1, r2
 8000782:	430d      	orrs	r5, r1
 8000784:	4661      	mov	r1, ip
 8000786:	4099      	lsls	r1, r3
 8000788:	1e4b      	subs	r3, r1, #1
 800078a:	4199      	sbcs	r1, r3
 800078c:	4653      	mov	r3, sl
 800078e:	40d3      	lsrs	r3, r2
 8000790:	430d      	orrs	r5, r1
 8000792:	1ae4      	subs	r4, r4, r3
 8000794:	1b45      	subs	r5, r0, r5
 8000796:	42a8      	cmp	r0, r5
 8000798:	4180      	sbcs	r0, r0
 800079a:	4240      	negs	r0, r0
 800079c:	1a24      	subs	r4, r4, r0
 800079e:	0223      	lsls	r3, r4, #8
 80007a0:	d400      	bmi.n	80007a4 <__aeabi_dadd+0xac>
 80007a2:	e10f      	b.n	80009c4 <__aeabi_dadd+0x2cc>
 80007a4:	0264      	lsls	r4, r4, #9
 80007a6:	0a64      	lsrs	r4, r4, #9
 80007a8:	2c00      	cmp	r4, #0
 80007aa:	d100      	bne.n	80007ae <__aeabi_dadd+0xb6>
 80007ac:	e139      	b.n	8000a22 <__aeabi_dadd+0x32a>
 80007ae:	0020      	movs	r0, r4
 80007b0:	f7ff fe7a 	bl	80004a8 <__clzsi2>
 80007b4:	0003      	movs	r3, r0
 80007b6:	3b08      	subs	r3, #8
 80007b8:	2120      	movs	r1, #32
 80007ba:	0028      	movs	r0, r5
 80007bc:	1aca      	subs	r2, r1, r3
 80007be:	40d0      	lsrs	r0, r2
 80007c0:	409c      	lsls	r4, r3
 80007c2:	0002      	movs	r2, r0
 80007c4:	409d      	lsls	r5, r3
 80007c6:	4322      	orrs	r2, r4
 80007c8:	429f      	cmp	r7, r3
 80007ca:	dd00      	ble.n	80007ce <__aeabi_dadd+0xd6>
 80007cc:	e173      	b.n	8000ab6 <__aeabi_dadd+0x3be>
 80007ce:	1bd8      	subs	r0, r3, r7
 80007d0:	3001      	adds	r0, #1
 80007d2:	1a09      	subs	r1, r1, r0
 80007d4:	002c      	movs	r4, r5
 80007d6:	408d      	lsls	r5, r1
 80007d8:	40c4      	lsrs	r4, r0
 80007da:	1e6b      	subs	r3, r5, #1
 80007dc:	419d      	sbcs	r5, r3
 80007de:	0013      	movs	r3, r2
 80007e0:	40c2      	lsrs	r2, r0
 80007e2:	408b      	lsls	r3, r1
 80007e4:	4325      	orrs	r5, r4
 80007e6:	2700      	movs	r7, #0
 80007e8:	0014      	movs	r4, r2
 80007ea:	431d      	orrs	r5, r3
 80007ec:	076b      	lsls	r3, r5, #29
 80007ee:	d009      	beq.n	8000804 <__aeabi_dadd+0x10c>
 80007f0:	230f      	movs	r3, #15
 80007f2:	402b      	ands	r3, r5
 80007f4:	2b04      	cmp	r3, #4
 80007f6:	d005      	beq.n	8000804 <__aeabi_dadd+0x10c>
 80007f8:	1d2b      	adds	r3, r5, #4
 80007fa:	42ab      	cmp	r3, r5
 80007fc:	41ad      	sbcs	r5, r5
 80007fe:	426d      	negs	r5, r5
 8000800:	1964      	adds	r4, r4, r5
 8000802:	001d      	movs	r5, r3
 8000804:	0223      	lsls	r3, r4, #8
 8000806:	d400      	bmi.n	800080a <__aeabi_dadd+0x112>
 8000808:	e12d      	b.n	8000a66 <__aeabi_dadd+0x36e>
 800080a:	4a9d      	ldr	r2, [pc, #628]	@ (8000a80 <__aeabi_dadd+0x388>)
 800080c:	3701      	adds	r7, #1
 800080e:	4297      	cmp	r7, r2
 8000810:	d100      	bne.n	8000814 <__aeabi_dadd+0x11c>
 8000812:	e0d3      	b.n	80009bc <__aeabi_dadd+0x2c4>
 8000814:	4646      	mov	r6, r8
 8000816:	499b      	ldr	r1, [pc, #620]	@ (8000a84 <__aeabi_dadd+0x38c>)
 8000818:	08ed      	lsrs	r5, r5, #3
 800081a:	4021      	ands	r1, r4
 800081c:	074a      	lsls	r2, r1, #29
 800081e:	432a      	orrs	r2, r5
 8000820:	057c      	lsls	r4, r7, #21
 8000822:	024d      	lsls	r5, r1, #9
 8000824:	0b2d      	lsrs	r5, r5, #12
 8000826:	0d64      	lsrs	r4, r4, #21
 8000828:	0524      	lsls	r4, r4, #20
 800082a:	432c      	orrs	r4, r5
 800082c:	07f6      	lsls	r6, r6, #31
 800082e:	4334      	orrs	r4, r6
 8000830:	0010      	movs	r0, r2
 8000832:	0021      	movs	r1, r4
 8000834:	b003      	add	sp, #12
 8000836:	bcf0      	pop	{r4, r5, r6, r7}
 8000838:	46bb      	mov	fp, r7
 800083a:	46b2      	mov	sl, r6
 800083c:	46a9      	mov	r9, r5
 800083e:	46a0      	mov	r8, r4
 8000840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000842:	2a00      	cmp	r2, #0
 8000844:	d100      	bne.n	8000848 <__aeabi_dadd+0x150>
 8000846:	e084      	b.n	8000952 <__aeabi_dadd+0x25a>
 8000848:	464a      	mov	r2, r9
 800084a:	1bd2      	subs	r2, r2, r7
 800084c:	2f00      	cmp	r7, #0
 800084e:	d000      	beq.n	8000852 <__aeabi_dadd+0x15a>
 8000850:	e16d      	b.n	8000b2e <__aeabi_dadd+0x436>
 8000852:	0025      	movs	r5, r4
 8000854:	4305      	orrs	r5, r0
 8000856:	d100      	bne.n	800085a <__aeabi_dadd+0x162>
 8000858:	e127      	b.n	8000aaa <__aeabi_dadd+0x3b2>
 800085a:	1e56      	subs	r6, r2, #1
 800085c:	2a01      	cmp	r2, #1
 800085e:	d100      	bne.n	8000862 <__aeabi_dadd+0x16a>
 8000860:	e23b      	b.n	8000cda <__aeabi_dadd+0x5e2>
 8000862:	4d87      	ldr	r5, [pc, #540]	@ (8000a80 <__aeabi_dadd+0x388>)
 8000864:	42aa      	cmp	r2, r5
 8000866:	d100      	bne.n	800086a <__aeabi_dadd+0x172>
 8000868:	e26a      	b.n	8000d40 <__aeabi_dadd+0x648>
 800086a:	2501      	movs	r5, #1
 800086c:	2e38      	cmp	r6, #56	@ 0x38
 800086e:	dc12      	bgt.n	8000896 <__aeabi_dadd+0x19e>
 8000870:	0032      	movs	r2, r6
 8000872:	2a1f      	cmp	r2, #31
 8000874:	dd00      	ble.n	8000878 <__aeabi_dadd+0x180>
 8000876:	e1f8      	b.n	8000c6a <__aeabi_dadd+0x572>
 8000878:	2620      	movs	r6, #32
 800087a:	0025      	movs	r5, r4
 800087c:	1ab6      	subs	r6, r6, r2
 800087e:	0007      	movs	r7, r0
 8000880:	4653      	mov	r3, sl
 8000882:	40b0      	lsls	r0, r6
 8000884:	40d4      	lsrs	r4, r2
 8000886:	40b5      	lsls	r5, r6
 8000888:	40d7      	lsrs	r7, r2
 800088a:	1e46      	subs	r6, r0, #1
 800088c:	41b0      	sbcs	r0, r6
 800088e:	1b1b      	subs	r3, r3, r4
 8000890:	469a      	mov	sl, r3
 8000892:	433d      	orrs	r5, r7
 8000894:	4305      	orrs	r5, r0
 8000896:	4662      	mov	r2, ip
 8000898:	1b55      	subs	r5, r2, r5
 800089a:	45ac      	cmp	ip, r5
 800089c:	4192      	sbcs	r2, r2
 800089e:	4653      	mov	r3, sl
 80008a0:	4252      	negs	r2, r2
 80008a2:	000e      	movs	r6, r1
 80008a4:	464f      	mov	r7, r9
 80008a6:	4688      	mov	r8, r1
 80008a8:	1a9c      	subs	r4, r3, r2
 80008aa:	e778      	b.n	800079e <__aeabi_dadd+0xa6>
 80008ac:	2a00      	cmp	r2, #0
 80008ae:	dc00      	bgt.n	80008b2 <__aeabi_dadd+0x1ba>
 80008b0:	e08e      	b.n	80009d0 <__aeabi_dadd+0x2d8>
 80008b2:	4649      	mov	r1, r9
 80008b4:	2900      	cmp	r1, #0
 80008b6:	d175      	bne.n	80009a4 <__aeabi_dadd+0x2ac>
 80008b8:	4661      	mov	r1, ip
 80008ba:	4653      	mov	r3, sl
 80008bc:	4319      	orrs	r1, r3
 80008be:	d100      	bne.n	80008c2 <__aeabi_dadd+0x1ca>
 80008c0:	e0f6      	b.n	8000ab0 <__aeabi_dadd+0x3b8>
 80008c2:	1e51      	subs	r1, r2, #1
 80008c4:	2a01      	cmp	r2, #1
 80008c6:	d100      	bne.n	80008ca <__aeabi_dadd+0x1d2>
 80008c8:	e191      	b.n	8000bee <__aeabi_dadd+0x4f6>
 80008ca:	4d6d      	ldr	r5, [pc, #436]	@ (8000a80 <__aeabi_dadd+0x388>)
 80008cc:	42aa      	cmp	r2, r5
 80008ce:	d100      	bne.n	80008d2 <__aeabi_dadd+0x1da>
 80008d0:	e0dc      	b.n	8000a8c <__aeabi_dadd+0x394>
 80008d2:	2501      	movs	r5, #1
 80008d4:	2938      	cmp	r1, #56	@ 0x38
 80008d6:	dc14      	bgt.n	8000902 <__aeabi_dadd+0x20a>
 80008d8:	000a      	movs	r2, r1
 80008da:	2a1f      	cmp	r2, #31
 80008dc:	dd00      	ble.n	80008e0 <__aeabi_dadd+0x1e8>
 80008de:	e1a2      	b.n	8000c26 <__aeabi_dadd+0x52e>
 80008e0:	2120      	movs	r1, #32
 80008e2:	4653      	mov	r3, sl
 80008e4:	1a89      	subs	r1, r1, r2
 80008e6:	408b      	lsls	r3, r1
 80008e8:	001d      	movs	r5, r3
 80008ea:	4663      	mov	r3, ip
 80008ec:	40d3      	lsrs	r3, r2
 80008ee:	431d      	orrs	r5, r3
 80008f0:	4663      	mov	r3, ip
 80008f2:	408b      	lsls	r3, r1
 80008f4:	0019      	movs	r1, r3
 80008f6:	1e4b      	subs	r3, r1, #1
 80008f8:	4199      	sbcs	r1, r3
 80008fa:	4653      	mov	r3, sl
 80008fc:	40d3      	lsrs	r3, r2
 80008fe:	430d      	orrs	r5, r1
 8000900:	18e4      	adds	r4, r4, r3
 8000902:	182d      	adds	r5, r5, r0
 8000904:	4285      	cmp	r5, r0
 8000906:	4180      	sbcs	r0, r0
 8000908:	4240      	negs	r0, r0
 800090a:	1824      	adds	r4, r4, r0
 800090c:	0223      	lsls	r3, r4, #8
 800090e:	d559      	bpl.n	80009c4 <__aeabi_dadd+0x2cc>
 8000910:	4b5b      	ldr	r3, [pc, #364]	@ (8000a80 <__aeabi_dadd+0x388>)
 8000912:	3701      	adds	r7, #1
 8000914:	429f      	cmp	r7, r3
 8000916:	d051      	beq.n	80009bc <__aeabi_dadd+0x2c4>
 8000918:	2101      	movs	r1, #1
 800091a:	4b5a      	ldr	r3, [pc, #360]	@ (8000a84 <__aeabi_dadd+0x38c>)
 800091c:	086a      	lsrs	r2, r5, #1
 800091e:	401c      	ands	r4, r3
 8000920:	4029      	ands	r1, r5
 8000922:	430a      	orrs	r2, r1
 8000924:	07e5      	lsls	r5, r4, #31
 8000926:	4315      	orrs	r5, r2
 8000928:	0864      	lsrs	r4, r4, #1
 800092a:	e75f      	b.n	80007ec <__aeabi_dadd+0xf4>
 800092c:	4661      	mov	r1, ip
 800092e:	4653      	mov	r3, sl
 8000930:	4319      	orrs	r1, r3
 8000932:	d100      	bne.n	8000936 <__aeabi_dadd+0x23e>
 8000934:	e0bc      	b.n	8000ab0 <__aeabi_dadd+0x3b8>
 8000936:	1e51      	subs	r1, r2, #1
 8000938:	2a01      	cmp	r2, #1
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x246>
 800093c:	e164      	b.n	8000c08 <__aeabi_dadd+0x510>
 800093e:	4d50      	ldr	r5, [pc, #320]	@ (8000a80 <__aeabi_dadd+0x388>)
 8000940:	42aa      	cmp	r2, r5
 8000942:	d100      	bne.n	8000946 <__aeabi_dadd+0x24e>
 8000944:	e16a      	b.n	8000c1c <__aeabi_dadd+0x524>
 8000946:	2501      	movs	r5, #1
 8000948:	2938      	cmp	r1, #56	@ 0x38
 800094a:	dd00      	ble.n	800094e <__aeabi_dadd+0x256>
 800094c:	e722      	b.n	8000794 <__aeabi_dadd+0x9c>
 800094e:	000a      	movs	r2, r1
 8000950:	e70e      	b.n	8000770 <__aeabi_dadd+0x78>
 8000952:	4a4d      	ldr	r2, [pc, #308]	@ (8000a88 <__aeabi_dadd+0x390>)
 8000954:	1c7d      	adds	r5, r7, #1
 8000956:	4215      	tst	r5, r2
 8000958:	d000      	beq.n	800095c <__aeabi_dadd+0x264>
 800095a:	e0d0      	b.n	8000afe <__aeabi_dadd+0x406>
 800095c:	0025      	movs	r5, r4
 800095e:	4662      	mov	r2, ip
 8000960:	4653      	mov	r3, sl
 8000962:	4305      	orrs	r5, r0
 8000964:	431a      	orrs	r2, r3
 8000966:	2f00      	cmp	r7, #0
 8000968:	d000      	beq.n	800096c <__aeabi_dadd+0x274>
 800096a:	e137      	b.n	8000bdc <__aeabi_dadd+0x4e4>
 800096c:	2d00      	cmp	r5, #0
 800096e:	d100      	bne.n	8000972 <__aeabi_dadd+0x27a>
 8000970:	e1a8      	b.n	8000cc4 <__aeabi_dadd+0x5cc>
 8000972:	2a00      	cmp	r2, #0
 8000974:	d100      	bne.n	8000978 <__aeabi_dadd+0x280>
 8000976:	e16a      	b.n	8000c4e <__aeabi_dadd+0x556>
 8000978:	4663      	mov	r3, ip
 800097a:	1ac5      	subs	r5, r0, r3
 800097c:	4653      	mov	r3, sl
 800097e:	1ae2      	subs	r2, r4, r3
 8000980:	42a8      	cmp	r0, r5
 8000982:	419b      	sbcs	r3, r3
 8000984:	425b      	negs	r3, r3
 8000986:	1ad3      	subs	r3, r2, r3
 8000988:	021a      	lsls	r2, r3, #8
 800098a:	d400      	bmi.n	800098e <__aeabi_dadd+0x296>
 800098c:	e203      	b.n	8000d96 <__aeabi_dadd+0x69e>
 800098e:	4663      	mov	r3, ip
 8000990:	1a1d      	subs	r5, r3, r0
 8000992:	45ac      	cmp	ip, r5
 8000994:	4192      	sbcs	r2, r2
 8000996:	4653      	mov	r3, sl
 8000998:	4252      	negs	r2, r2
 800099a:	1b1c      	subs	r4, r3, r4
 800099c:	000e      	movs	r6, r1
 800099e:	4688      	mov	r8, r1
 80009a0:	1aa4      	subs	r4, r4, r2
 80009a2:	e723      	b.n	80007ec <__aeabi_dadd+0xf4>
 80009a4:	4936      	ldr	r1, [pc, #216]	@ (8000a80 <__aeabi_dadd+0x388>)
 80009a6:	428f      	cmp	r7, r1
 80009a8:	d070      	beq.n	8000a8c <__aeabi_dadd+0x394>
 80009aa:	2501      	movs	r5, #1
 80009ac:	2a38      	cmp	r2, #56	@ 0x38
 80009ae:	dca8      	bgt.n	8000902 <__aeabi_dadd+0x20a>
 80009b0:	2180      	movs	r1, #128	@ 0x80
 80009b2:	4653      	mov	r3, sl
 80009b4:	0409      	lsls	r1, r1, #16
 80009b6:	430b      	orrs	r3, r1
 80009b8:	469a      	mov	sl, r3
 80009ba:	e78e      	b.n	80008da <__aeabi_dadd+0x1e2>
 80009bc:	003c      	movs	r4, r7
 80009be:	2500      	movs	r5, #0
 80009c0:	2200      	movs	r2, #0
 80009c2:	e731      	b.n	8000828 <__aeabi_dadd+0x130>
 80009c4:	2307      	movs	r3, #7
 80009c6:	402b      	ands	r3, r5
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d000      	beq.n	80009ce <__aeabi_dadd+0x2d6>
 80009cc:	e710      	b.n	80007f0 <__aeabi_dadd+0xf8>
 80009ce:	e093      	b.n	8000af8 <__aeabi_dadd+0x400>
 80009d0:	2a00      	cmp	r2, #0
 80009d2:	d074      	beq.n	8000abe <__aeabi_dadd+0x3c6>
 80009d4:	464a      	mov	r2, r9
 80009d6:	1bd2      	subs	r2, r2, r7
 80009d8:	2f00      	cmp	r7, #0
 80009da:	d100      	bne.n	80009de <__aeabi_dadd+0x2e6>
 80009dc:	e0c7      	b.n	8000b6e <__aeabi_dadd+0x476>
 80009de:	4928      	ldr	r1, [pc, #160]	@ (8000a80 <__aeabi_dadd+0x388>)
 80009e0:	4589      	cmp	r9, r1
 80009e2:	d100      	bne.n	80009e6 <__aeabi_dadd+0x2ee>
 80009e4:	e185      	b.n	8000cf2 <__aeabi_dadd+0x5fa>
 80009e6:	2501      	movs	r5, #1
 80009e8:	2a38      	cmp	r2, #56	@ 0x38
 80009ea:	dc12      	bgt.n	8000a12 <__aeabi_dadd+0x31a>
 80009ec:	2180      	movs	r1, #128	@ 0x80
 80009ee:	0409      	lsls	r1, r1, #16
 80009f0:	430c      	orrs	r4, r1
 80009f2:	2a1f      	cmp	r2, #31
 80009f4:	dd00      	ble.n	80009f8 <__aeabi_dadd+0x300>
 80009f6:	e1ab      	b.n	8000d50 <__aeabi_dadd+0x658>
 80009f8:	2120      	movs	r1, #32
 80009fa:	0025      	movs	r5, r4
 80009fc:	1a89      	subs	r1, r1, r2
 80009fe:	0007      	movs	r7, r0
 8000a00:	4088      	lsls	r0, r1
 8000a02:	408d      	lsls	r5, r1
 8000a04:	40d7      	lsrs	r7, r2
 8000a06:	1e41      	subs	r1, r0, #1
 8000a08:	4188      	sbcs	r0, r1
 8000a0a:	40d4      	lsrs	r4, r2
 8000a0c:	433d      	orrs	r5, r7
 8000a0e:	4305      	orrs	r5, r0
 8000a10:	44a2      	add	sl, r4
 8000a12:	4465      	add	r5, ip
 8000a14:	4565      	cmp	r5, ip
 8000a16:	4192      	sbcs	r2, r2
 8000a18:	4252      	negs	r2, r2
 8000a1a:	4452      	add	r2, sl
 8000a1c:	0014      	movs	r4, r2
 8000a1e:	464f      	mov	r7, r9
 8000a20:	e774      	b.n	800090c <__aeabi_dadd+0x214>
 8000a22:	0028      	movs	r0, r5
 8000a24:	f7ff fd40 	bl	80004a8 <__clzsi2>
 8000a28:	0003      	movs	r3, r0
 8000a2a:	3318      	adds	r3, #24
 8000a2c:	2b1f      	cmp	r3, #31
 8000a2e:	dc00      	bgt.n	8000a32 <__aeabi_dadd+0x33a>
 8000a30:	e6c2      	b.n	80007b8 <__aeabi_dadd+0xc0>
 8000a32:	002a      	movs	r2, r5
 8000a34:	3808      	subs	r0, #8
 8000a36:	4082      	lsls	r2, r0
 8000a38:	429f      	cmp	r7, r3
 8000a3a:	dd00      	ble.n	8000a3e <__aeabi_dadd+0x346>
 8000a3c:	e0a9      	b.n	8000b92 <__aeabi_dadd+0x49a>
 8000a3e:	1bdb      	subs	r3, r3, r7
 8000a40:	1c58      	adds	r0, r3, #1
 8000a42:	281f      	cmp	r0, #31
 8000a44:	dc00      	bgt.n	8000a48 <__aeabi_dadd+0x350>
 8000a46:	e1ac      	b.n	8000da2 <__aeabi_dadd+0x6aa>
 8000a48:	0015      	movs	r5, r2
 8000a4a:	3b1f      	subs	r3, #31
 8000a4c:	40dd      	lsrs	r5, r3
 8000a4e:	2820      	cmp	r0, #32
 8000a50:	d005      	beq.n	8000a5e <__aeabi_dadd+0x366>
 8000a52:	2340      	movs	r3, #64	@ 0x40
 8000a54:	1a1b      	subs	r3, r3, r0
 8000a56:	409a      	lsls	r2, r3
 8000a58:	1e53      	subs	r3, r2, #1
 8000a5a:	419a      	sbcs	r2, r3
 8000a5c:	4315      	orrs	r5, r2
 8000a5e:	2307      	movs	r3, #7
 8000a60:	2700      	movs	r7, #0
 8000a62:	402b      	ands	r3, r5
 8000a64:	e7b0      	b.n	80009c8 <__aeabi_dadd+0x2d0>
 8000a66:	08ed      	lsrs	r5, r5, #3
 8000a68:	4b05      	ldr	r3, [pc, #20]	@ (8000a80 <__aeabi_dadd+0x388>)
 8000a6a:	0762      	lsls	r2, r4, #29
 8000a6c:	432a      	orrs	r2, r5
 8000a6e:	08e4      	lsrs	r4, r4, #3
 8000a70:	429f      	cmp	r7, r3
 8000a72:	d00f      	beq.n	8000a94 <__aeabi_dadd+0x39c>
 8000a74:	0324      	lsls	r4, r4, #12
 8000a76:	0b25      	lsrs	r5, r4, #12
 8000a78:	057c      	lsls	r4, r7, #21
 8000a7a:	0d64      	lsrs	r4, r4, #21
 8000a7c:	e6d4      	b.n	8000828 <__aeabi_dadd+0x130>
 8000a7e:	46c0      	nop			@ (mov r8, r8)
 8000a80:	000007ff 	.word	0x000007ff
 8000a84:	ff7fffff 	.word	0xff7fffff
 8000a88:	000007fe 	.word	0x000007fe
 8000a8c:	08c0      	lsrs	r0, r0, #3
 8000a8e:	0762      	lsls	r2, r4, #29
 8000a90:	4302      	orrs	r2, r0
 8000a92:	08e4      	lsrs	r4, r4, #3
 8000a94:	0013      	movs	r3, r2
 8000a96:	4323      	orrs	r3, r4
 8000a98:	d100      	bne.n	8000a9c <__aeabi_dadd+0x3a4>
 8000a9a:	e186      	b.n	8000daa <__aeabi_dadd+0x6b2>
 8000a9c:	2580      	movs	r5, #128	@ 0x80
 8000a9e:	032d      	lsls	r5, r5, #12
 8000aa0:	4325      	orrs	r5, r4
 8000aa2:	032d      	lsls	r5, r5, #12
 8000aa4:	4cc3      	ldr	r4, [pc, #780]	@ (8000db4 <__aeabi_dadd+0x6bc>)
 8000aa6:	0b2d      	lsrs	r5, r5, #12
 8000aa8:	e6be      	b.n	8000828 <__aeabi_dadd+0x130>
 8000aaa:	4660      	mov	r0, ip
 8000aac:	4654      	mov	r4, sl
 8000aae:	000e      	movs	r6, r1
 8000ab0:	0017      	movs	r7, r2
 8000ab2:	08c5      	lsrs	r5, r0, #3
 8000ab4:	e7d8      	b.n	8000a68 <__aeabi_dadd+0x370>
 8000ab6:	4cc0      	ldr	r4, [pc, #768]	@ (8000db8 <__aeabi_dadd+0x6c0>)
 8000ab8:	1aff      	subs	r7, r7, r3
 8000aba:	4014      	ands	r4, r2
 8000abc:	e696      	b.n	80007ec <__aeabi_dadd+0xf4>
 8000abe:	4abf      	ldr	r2, [pc, #764]	@ (8000dbc <__aeabi_dadd+0x6c4>)
 8000ac0:	1c79      	adds	r1, r7, #1
 8000ac2:	4211      	tst	r1, r2
 8000ac4:	d16b      	bne.n	8000b9e <__aeabi_dadd+0x4a6>
 8000ac6:	0022      	movs	r2, r4
 8000ac8:	4302      	orrs	r2, r0
 8000aca:	2f00      	cmp	r7, #0
 8000acc:	d000      	beq.n	8000ad0 <__aeabi_dadd+0x3d8>
 8000ace:	e0db      	b.n	8000c88 <__aeabi_dadd+0x590>
 8000ad0:	2a00      	cmp	r2, #0
 8000ad2:	d100      	bne.n	8000ad6 <__aeabi_dadd+0x3de>
 8000ad4:	e12d      	b.n	8000d32 <__aeabi_dadd+0x63a>
 8000ad6:	4662      	mov	r2, ip
 8000ad8:	4653      	mov	r3, sl
 8000ada:	431a      	orrs	r2, r3
 8000adc:	d100      	bne.n	8000ae0 <__aeabi_dadd+0x3e8>
 8000ade:	e0b6      	b.n	8000c4e <__aeabi_dadd+0x556>
 8000ae0:	4663      	mov	r3, ip
 8000ae2:	18c5      	adds	r5, r0, r3
 8000ae4:	4285      	cmp	r5, r0
 8000ae6:	4180      	sbcs	r0, r0
 8000ae8:	4454      	add	r4, sl
 8000aea:	4240      	negs	r0, r0
 8000aec:	1824      	adds	r4, r4, r0
 8000aee:	0223      	lsls	r3, r4, #8
 8000af0:	d502      	bpl.n	8000af8 <__aeabi_dadd+0x400>
 8000af2:	000f      	movs	r7, r1
 8000af4:	4bb0      	ldr	r3, [pc, #704]	@ (8000db8 <__aeabi_dadd+0x6c0>)
 8000af6:	401c      	ands	r4, r3
 8000af8:	003a      	movs	r2, r7
 8000afa:	0028      	movs	r0, r5
 8000afc:	e7d8      	b.n	8000ab0 <__aeabi_dadd+0x3b8>
 8000afe:	4662      	mov	r2, ip
 8000b00:	1a85      	subs	r5, r0, r2
 8000b02:	42a8      	cmp	r0, r5
 8000b04:	4192      	sbcs	r2, r2
 8000b06:	4653      	mov	r3, sl
 8000b08:	4252      	negs	r2, r2
 8000b0a:	4691      	mov	r9, r2
 8000b0c:	1ae3      	subs	r3, r4, r3
 8000b0e:	001a      	movs	r2, r3
 8000b10:	464b      	mov	r3, r9
 8000b12:	1ad2      	subs	r2, r2, r3
 8000b14:	0013      	movs	r3, r2
 8000b16:	4691      	mov	r9, r2
 8000b18:	021a      	lsls	r2, r3, #8
 8000b1a:	d454      	bmi.n	8000bc6 <__aeabi_dadd+0x4ce>
 8000b1c:	464a      	mov	r2, r9
 8000b1e:	464c      	mov	r4, r9
 8000b20:	432a      	orrs	r2, r5
 8000b22:	d000      	beq.n	8000b26 <__aeabi_dadd+0x42e>
 8000b24:	e640      	b.n	80007a8 <__aeabi_dadd+0xb0>
 8000b26:	2600      	movs	r6, #0
 8000b28:	2400      	movs	r4, #0
 8000b2a:	2500      	movs	r5, #0
 8000b2c:	e67c      	b.n	8000828 <__aeabi_dadd+0x130>
 8000b2e:	4da1      	ldr	r5, [pc, #644]	@ (8000db4 <__aeabi_dadd+0x6bc>)
 8000b30:	45a9      	cmp	r9, r5
 8000b32:	d100      	bne.n	8000b36 <__aeabi_dadd+0x43e>
 8000b34:	e090      	b.n	8000c58 <__aeabi_dadd+0x560>
 8000b36:	2501      	movs	r5, #1
 8000b38:	2a38      	cmp	r2, #56	@ 0x38
 8000b3a:	dd00      	ble.n	8000b3e <__aeabi_dadd+0x446>
 8000b3c:	e6ab      	b.n	8000896 <__aeabi_dadd+0x19e>
 8000b3e:	2580      	movs	r5, #128	@ 0x80
 8000b40:	042d      	lsls	r5, r5, #16
 8000b42:	432c      	orrs	r4, r5
 8000b44:	e695      	b.n	8000872 <__aeabi_dadd+0x17a>
 8000b46:	0011      	movs	r1, r2
 8000b48:	4655      	mov	r5, sl
 8000b4a:	3920      	subs	r1, #32
 8000b4c:	40cd      	lsrs	r5, r1
 8000b4e:	46a9      	mov	r9, r5
 8000b50:	2a20      	cmp	r2, #32
 8000b52:	d006      	beq.n	8000b62 <__aeabi_dadd+0x46a>
 8000b54:	2140      	movs	r1, #64	@ 0x40
 8000b56:	4653      	mov	r3, sl
 8000b58:	1a8a      	subs	r2, r1, r2
 8000b5a:	4093      	lsls	r3, r2
 8000b5c:	4662      	mov	r2, ip
 8000b5e:	431a      	orrs	r2, r3
 8000b60:	4694      	mov	ip, r2
 8000b62:	4665      	mov	r5, ip
 8000b64:	1e6b      	subs	r3, r5, #1
 8000b66:	419d      	sbcs	r5, r3
 8000b68:	464b      	mov	r3, r9
 8000b6a:	431d      	orrs	r5, r3
 8000b6c:	e612      	b.n	8000794 <__aeabi_dadd+0x9c>
 8000b6e:	0021      	movs	r1, r4
 8000b70:	4301      	orrs	r1, r0
 8000b72:	d100      	bne.n	8000b76 <__aeabi_dadd+0x47e>
 8000b74:	e0c4      	b.n	8000d00 <__aeabi_dadd+0x608>
 8000b76:	1e51      	subs	r1, r2, #1
 8000b78:	2a01      	cmp	r2, #1
 8000b7a:	d100      	bne.n	8000b7e <__aeabi_dadd+0x486>
 8000b7c:	e0fb      	b.n	8000d76 <__aeabi_dadd+0x67e>
 8000b7e:	4d8d      	ldr	r5, [pc, #564]	@ (8000db4 <__aeabi_dadd+0x6bc>)
 8000b80:	42aa      	cmp	r2, r5
 8000b82:	d100      	bne.n	8000b86 <__aeabi_dadd+0x48e>
 8000b84:	e0b5      	b.n	8000cf2 <__aeabi_dadd+0x5fa>
 8000b86:	2501      	movs	r5, #1
 8000b88:	2938      	cmp	r1, #56	@ 0x38
 8000b8a:	dd00      	ble.n	8000b8e <__aeabi_dadd+0x496>
 8000b8c:	e741      	b.n	8000a12 <__aeabi_dadd+0x31a>
 8000b8e:	000a      	movs	r2, r1
 8000b90:	e72f      	b.n	80009f2 <__aeabi_dadd+0x2fa>
 8000b92:	4c89      	ldr	r4, [pc, #548]	@ (8000db8 <__aeabi_dadd+0x6c0>)
 8000b94:	1aff      	subs	r7, r7, r3
 8000b96:	4014      	ands	r4, r2
 8000b98:	0762      	lsls	r2, r4, #29
 8000b9a:	08e4      	lsrs	r4, r4, #3
 8000b9c:	e76a      	b.n	8000a74 <__aeabi_dadd+0x37c>
 8000b9e:	4a85      	ldr	r2, [pc, #532]	@ (8000db4 <__aeabi_dadd+0x6bc>)
 8000ba0:	4291      	cmp	r1, r2
 8000ba2:	d100      	bne.n	8000ba6 <__aeabi_dadd+0x4ae>
 8000ba4:	e0e3      	b.n	8000d6e <__aeabi_dadd+0x676>
 8000ba6:	4663      	mov	r3, ip
 8000ba8:	18c2      	adds	r2, r0, r3
 8000baa:	4282      	cmp	r2, r0
 8000bac:	4180      	sbcs	r0, r0
 8000bae:	0023      	movs	r3, r4
 8000bb0:	4240      	negs	r0, r0
 8000bb2:	4453      	add	r3, sl
 8000bb4:	181b      	adds	r3, r3, r0
 8000bb6:	07dd      	lsls	r5, r3, #31
 8000bb8:	085c      	lsrs	r4, r3, #1
 8000bba:	2307      	movs	r3, #7
 8000bbc:	0852      	lsrs	r2, r2, #1
 8000bbe:	4315      	orrs	r5, r2
 8000bc0:	000f      	movs	r7, r1
 8000bc2:	402b      	ands	r3, r5
 8000bc4:	e700      	b.n	80009c8 <__aeabi_dadd+0x2d0>
 8000bc6:	4663      	mov	r3, ip
 8000bc8:	1a1d      	subs	r5, r3, r0
 8000bca:	45ac      	cmp	ip, r5
 8000bcc:	4192      	sbcs	r2, r2
 8000bce:	4653      	mov	r3, sl
 8000bd0:	4252      	negs	r2, r2
 8000bd2:	1b1c      	subs	r4, r3, r4
 8000bd4:	000e      	movs	r6, r1
 8000bd6:	4688      	mov	r8, r1
 8000bd8:	1aa4      	subs	r4, r4, r2
 8000bda:	e5e5      	b.n	80007a8 <__aeabi_dadd+0xb0>
 8000bdc:	2d00      	cmp	r5, #0
 8000bde:	d000      	beq.n	8000be2 <__aeabi_dadd+0x4ea>
 8000be0:	e091      	b.n	8000d06 <__aeabi_dadd+0x60e>
 8000be2:	2a00      	cmp	r2, #0
 8000be4:	d138      	bne.n	8000c58 <__aeabi_dadd+0x560>
 8000be6:	2480      	movs	r4, #128	@ 0x80
 8000be8:	2600      	movs	r6, #0
 8000bea:	0324      	lsls	r4, r4, #12
 8000bec:	e756      	b.n	8000a9c <__aeabi_dadd+0x3a4>
 8000bee:	4663      	mov	r3, ip
 8000bf0:	18c5      	adds	r5, r0, r3
 8000bf2:	4285      	cmp	r5, r0
 8000bf4:	4180      	sbcs	r0, r0
 8000bf6:	4454      	add	r4, sl
 8000bf8:	4240      	negs	r0, r0
 8000bfa:	1824      	adds	r4, r4, r0
 8000bfc:	2701      	movs	r7, #1
 8000bfe:	0223      	lsls	r3, r4, #8
 8000c00:	d400      	bmi.n	8000c04 <__aeabi_dadd+0x50c>
 8000c02:	e6df      	b.n	80009c4 <__aeabi_dadd+0x2cc>
 8000c04:	2702      	movs	r7, #2
 8000c06:	e687      	b.n	8000918 <__aeabi_dadd+0x220>
 8000c08:	4663      	mov	r3, ip
 8000c0a:	1ac5      	subs	r5, r0, r3
 8000c0c:	42a8      	cmp	r0, r5
 8000c0e:	4180      	sbcs	r0, r0
 8000c10:	4653      	mov	r3, sl
 8000c12:	4240      	negs	r0, r0
 8000c14:	1ae4      	subs	r4, r4, r3
 8000c16:	2701      	movs	r7, #1
 8000c18:	1a24      	subs	r4, r4, r0
 8000c1a:	e5c0      	b.n	800079e <__aeabi_dadd+0xa6>
 8000c1c:	0762      	lsls	r2, r4, #29
 8000c1e:	08c0      	lsrs	r0, r0, #3
 8000c20:	4302      	orrs	r2, r0
 8000c22:	08e4      	lsrs	r4, r4, #3
 8000c24:	e736      	b.n	8000a94 <__aeabi_dadd+0x39c>
 8000c26:	0011      	movs	r1, r2
 8000c28:	4653      	mov	r3, sl
 8000c2a:	3920      	subs	r1, #32
 8000c2c:	40cb      	lsrs	r3, r1
 8000c2e:	4699      	mov	r9, r3
 8000c30:	2a20      	cmp	r2, #32
 8000c32:	d006      	beq.n	8000c42 <__aeabi_dadd+0x54a>
 8000c34:	2140      	movs	r1, #64	@ 0x40
 8000c36:	4653      	mov	r3, sl
 8000c38:	1a8a      	subs	r2, r1, r2
 8000c3a:	4093      	lsls	r3, r2
 8000c3c:	4662      	mov	r2, ip
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	4694      	mov	ip, r2
 8000c42:	4665      	mov	r5, ip
 8000c44:	1e6b      	subs	r3, r5, #1
 8000c46:	419d      	sbcs	r5, r3
 8000c48:	464b      	mov	r3, r9
 8000c4a:	431d      	orrs	r5, r3
 8000c4c:	e659      	b.n	8000902 <__aeabi_dadd+0x20a>
 8000c4e:	0762      	lsls	r2, r4, #29
 8000c50:	08c0      	lsrs	r0, r0, #3
 8000c52:	4302      	orrs	r2, r0
 8000c54:	08e4      	lsrs	r4, r4, #3
 8000c56:	e70d      	b.n	8000a74 <__aeabi_dadd+0x37c>
 8000c58:	4653      	mov	r3, sl
 8000c5a:	075a      	lsls	r2, r3, #29
 8000c5c:	4663      	mov	r3, ip
 8000c5e:	08d8      	lsrs	r0, r3, #3
 8000c60:	4653      	mov	r3, sl
 8000c62:	000e      	movs	r6, r1
 8000c64:	4302      	orrs	r2, r0
 8000c66:	08dc      	lsrs	r4, r3, #3
 8000c68:	e714      	b.n	8000a94 <__aeabi_dadd+0x39c>
 8000c6a:	0015      	movs	r5, r2
 8000c6c:	0026      	movs	r6, r4
 8000c6e:	3d20      	subs	r5, #32
 8000c70:	40ee      	lsrs	r6, r5
 8000c72:	2a20      	cmp	r2, #32
 8000c74:	d003      	beq.n	8000c7e <__aeabi_dadd+0x586>
 8000c76:	2540      	movs	r5, #64	@ 0x40
 8000c78:	1aaa      	subs	r2, r5, r2
 8000c7a:	4094      	lsls	r4, r2
 8000c7c:	4320      	orrs	r0, r4
 8000c7e:	1e42      	subs	r2, r0, #1
 8000c80:	4190      	sbcs	r0, r2
 8000c82:	0005      	movs	r5, r0
 8000c84:	4335      	orrs	r5, r6
 8000c86:	e606      	b.n	8000896 <__aeabi_dadd+0x19e>
 8000c88:	2a00      	cmp	r2, #0
 8000c8a:	d07c      	beq.n	8000d86 <__aeabi_dadd+0x68e>
 8000c8c:	4662      	mov	r2, ip
 8000c8e:	4653      	mov	r3, sl
 8000c90:	08c0      	lsrs	r0, r0, #3
 8000c92:	431a      	orrs	r2, r3
 8000c94:	d100      	bne.n	8000c98 <__aeabi_dadd+0x5a0>
 8000c96:	e6fa      	b.n	8000a8e <__aeabi_dadd+0x396>
 8000c98:	0762      	lsls	r2, r4, #29
 8000c9a:	4310      	orrs	r0, r2
 8000c9c:	2280      	movs	r2, #128	@ 0x80
 8000c9e:	08e4      	lsrs	r4, r4, #3
 8000ca0:	0312      	lsls	r2, r2, #12
 8000ca2:	4214      	tst	r4, r2
 8000ca4:	d008      	beq.n	8000cb8 <__aeabi_dadd+0x5c0>
 8000ca6:	08d9      	lsrs	r1, r3, #3
 8000ca8:	4211      	tst	r1, r2
 8000caa:	d105      	bne.n	8000cb8 <__aeabi_dadd+0x5c0>
 8000cac:	4663      	mov	r3, ip
 8000cae:	08d8      	lsrs	r0, r3, #3
 8000cb0:	4653      	mov	r3, sl
 8000cb2:	000c      	movs	r4, r1
 8000cb4:	075b      	lsls	r3, r3, #29
 8000cb6:	4318      	orrs	r0, r3
 8000cb8:	0f42      	lsrs	r2, r0, #29
 8000cba:	00c0      	lsls	r0, r0, #3
 8000cbc:	08c0      	lsrs	r0, r0, #3
 8000cbe:	0752      	lsls	r2, r2, #29
 8000cc0:	4302      	orrs	r2, r0
 8000cc2:	e6e7      	b.n	8000a94 <__aeabi_dadd+0x39c>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	d100      	bne.n	8000cca <__aeabi_dadd+0x5d2>
 8000cc8:	e72d      	b.n	8000b26 <__aeabi_dadd+0x42e>
 8000cca:	4663      	mov	r3, ip
 8000ccc:	08d8      	lsrs	r0, r3, #3
 8000cce:	4653      	mov	r3, sl
 8000cd0:	075a      	lsls	r2, r3, #29
 8000cd2:	000e      	movs	r6, r1
 8000cd4:	4302      	orrs	r2, r0
 8000cd6:	08dc      	lsrs	r4, r3, #3
 8000cd8:	e6cc      	b.n	8000a74 <__aeabi_dadd+0x37c>
 8000cda:	4663      	mov	r3, ip
 8000cdc:	1a1d      	subs	r5, r3, r0
 8000cde:	45ac      	cmp	ip, r5
 8000ce0:	4192      	sbcs	r2, r2
 8000ce2:	4653      	mov	r3, sl
 8000ce4:	4252      	negs	r2, r2
 8000ce6:	1b1c      	subs	r4, r3, r4
 8000ce8:	000e      	movs	r6, r1
 8000cea:	4688      	mov	r8, r1
 8000cec:	1aa4      	subs	r4, r4, r2
 8000cee:	3701      	adds	r7, #1
 8000cf0:	e555      	b.n	800079e <__aeabi_dadd+0xa6>
 8000cf2:	4663      	mov	r3, ip
 8000cf4:	08d9      	lsrs	r1, r3, #3
 8000cf6:	4653      	mov	r3, sl
 8000cf8:	075a      	lsls	r2, r3, #29
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	08dc      	lsrs	r4, r3, #3
 8000cfe:	e6c9      	b.n	8000a94 <__aeabi_dadd+0x39c>
 8000d00:	4660      	mov	r0, ip
 8000d02:	4654      	mov	r4, sl
 8000d04:	e6d4      	b.n	8000ab0 <__aeabi_dadd+0x3b8>
 8000d06:	08c0      	lsrs	r0, r0, #3
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	d100      	bne.n	8000d0e <__aeabi_dadd+0x616>
 8000d0c:	e6bf      	b.n	8000a8e <__aeabi_dadd+0x396>
 8000d0e:	0762      	lsls	r2, r4, #29
 8000d10:	4310      	orrs	r0, r2
 8000d12:	2280      	movs	r2, #128	@ 0x80
 8000d14:	08e4      	lsrs	r4, r4, #3
 8000d16:	0312      	lsls	r2, r2, #12
 8000d18:	4214      	tst	r4, r2
 8000d1a:	d0cd      	beq.n	8000cb8 <__aeabi_dadd+0x5c0>
 8000d1c:	08dd      	lsrs	r5, r3, #3
 8000d1e:	4215      	tst	r5, r2
 8000d20:	d1ca      	bne.n	8000cb8 <__aeabi_dadd+0x5c0>
 8000d22:	4663      	mov	r3, ip
 8000d24:	08d8      	lsrs	r0, r3, #3
 8000d26:	4653      	mov	r3, sl
 8000d28:	075b      	lsls	r3, r3, #29
 8000d2a:	000e      	movs	r6, r1
 8000d2c:	002c      	movs	r4, r5
 8000d2e:	4318      	orrs	r0, r3
 8000d30:	e7c2      	b.n	8000cb8 <__aeabi_dadd+0x5c0>
 8000d32:	4663      	mov	r3, ip
 8000d34:	08d9      	lsrs	r1, r3, #3
 8000d36:	4653      	mov	r3, sl
 8000d38:	075a      	lsls	r2, r3, #29
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	08dc      	lsrs	r4, r3, #3
 8000d3e:	e699      	b.n	8000a74 <__aeabi_dadd+0x37c>
 8000d40:	4663      	mov	r3, ip
 8000d42:	08d8      	lsrs	r0, r3, #3
 8000d44:	4653      	mov	r3, sl
 8000d46:	075a      	lsls	r2, r3, #29
 8000d48:	000e      	movs	r6, r1
 8000d4a:	4302      	orrs	r2, r0
 8000d4c:	08dc      	lsrs	r4, r3, #3
 8000d4e:	e6a1      	b.n	8000a94 <__aeabi_dadd+0x39c>
 8000d50:	0011      	movs	r1, r2
 8000d52:	0027      	movs	r7, r4
 8000d54:	3920      	subs	r1, #32
 8000d56:	40cf      	lsrs	r7, r1
 8000d58:	2a20      	cmp	r2, #32
 8000d5a:	d003      	beq.n	8000d64 <__aeabi_dadd+0x66c>
 8000d5c:	2140      	movs	r1, #64	@ 0x40
 8000d5e:	1a8a      	subs	r2, r1, r2
 8000d60:	4094      	lsls	r4, r2
 8000d62:	4320      	orrs	r0, r4
 8000d64:	1e42      	subs	r2, r0, #1
 8000d66:	4190      	sbcs	r0, r2
 8000d68:	0005      	movs	r5, r0
 8000d6a:	433d      	orrs	r5, r7
 8000d6c:	e651      	b.n	8000a12 <__aeabi_dadd+0x31a>
 8000d6e:	000c      	movs	r4, r1
 8000d70:	2500      	movs	r5, #0
 8000d72:	2200      	movs	r2, #0
 8000d74:	e558      	b.n	8000828 <__aeabi_dadd+0x130>
 8000d76:	4460      	add	r0, ip
 8000d78:	4560      	cmp	r0, ip
 8000d7a:	4192      	sbcs	r2, r2
 8000d7c:	4454      	add	r4, sl
 8000d7e:	4252      	negs	r2, r2
 8000d80:	0005      	movs	r5, r0
 8000d82:	18a4      	adds	r4, r4, r2
 8000d84:	e73a      	b.n	8000bfc <__aeabi_dadd+0x504>
 8000d86:	4653      	mov	r3, sl
 8000d88:	075a      	lsls	r2, r3, #29
 8000d8a:	4663      	mov	r3, ip
 8000d8c:	08d9      	lsrs	r1, r3, #3
 8000d8e:	4653      	mov	r3, sl
 8000d90:	430a      	orrs	r2, r1
 8000d92:	08dc      	lsrs	r4, r3, #3
 8000d94:	e67e      	b.n	8000a94 <__aeabi_dadd+0x39c>
 8000d96:	001a      	movs	r2, r3
 8000d98:	001c      	movs	r4, r3
 8000d9a:	432a      	orrs	r2, r5
 8000d9c:	d000      	beq.n	8000da0 <__aeabi_dadd+0x6a8>
 8000d9e:	e6ab      	b.n	8000af8 <__aeabi_dadd+0x400>
 8000da0:	e6c1      	b.n	8000b26 <__aeabi_dadd+0x42e>
 8000da2:	2120      	movs	r1, #32
 8000da4:	2500      	movs	r5, #0
 8000da6:	1a09      	subs	r1, r1, r0
 8000da8:	e519      	b.n	80007de <__aeabi_dadd+0xe6>
 8000daa:	2200      	movs	r2, #0
 8000dac:	2500      	movs	r5, #0
 8000dae:	4c01      	ldr	r4, [pc, #4]	@ (8000db4 <__aeabi_dadd+0x6bc>)
 8000db0:	e53a      	b.n	8000828 <__aeabi_dadd+0x130>
 8000db2:	46c0      	nop			@ (mov r8, r8)
 8000db4:	000007ff 	.word	0x000007ff
 8000db8:	ff7fffff 	.word	0xff7fffff
 8000dbc:	000007fe 	.word	0x000007fe

08000dc0 <__aeabi_ddiv>:
 8000dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dc2:	46de      	mov	lr, fp
 8000dc4:	4645      	mov	r5, r8
 8000dc6:	4657      	mov	r7, sl
 8000dc8:	464e      	mov	r6, r9
 8000dca:	b5e0      	push	{r5, r6, r7, lr}
 8000dcc:	b087      	sub	sp, #28
 8000dce:	9200      	str	r2, [sp, #0]
 8000dd0:	9301      	str	r3, [sp, #4]
 8000dd2:	030b      	lsls	r3, r1, #12
 8000dd4:	0b1b      	lsrs	r3, r3, #12
 8000dd6:	469b      	mov	fp, r3
 8000dd8:	0fca      	lsrs	r2, r1, #31
 8000dda:	004b      	lsls	r3, r1, #1
 8000ddc:	0004      	movs	r4, r0
 8000dde:	4680      	mov	r8, r0
 8000de0:	0d5b      	lsrs	r3, r3, #21
 8000de2:	9202      	str	r2, [sp, #8]
 8000de4:	d100      	bne.n	8000de8 <__aeabi_ddiv+0x28>
 8000de6:	e16a      	b.n	80010be <__aeabi_ddiv+0x2fe>
 8000de8:	4ad4      	ldr	r2, [pc, #848]	@ (800113c <__aeabi_ddiv+0x37c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d100      	bne.n	8000df0 <__aeabi_ddiv+0x30>
 8000dee:	e18c      	b.n	800110a <__aeabi_ddiv+0x34a>
 8000df0:	4659      	mov	r1, fp
 8000df2:	0f42      	lsrs	r2, r0, #29
 8000df4:	00c9      	lsls	r1, r1, #3
 8000df6:	430a      	orrs	r2, r1
 8000df8:	2180      	movs	r1, #128	@ 0x80
 8000dfa:	0409      	lsls	r1, r1, #16
 8000dfc:	4311      	orrs	r1, r2
 8000dfe:	00c2      	lsls	r2, r0, #3
 8000e00:	4690      	mov	r8, r2
 8000e02:	4acf      	ldr	r2, [pc, #828]	@ (8001140 <__aeabi_ddiv+0x380>)
 8000e04:	4689      	mov	r9, r1
 8000e06:	4692      	mov	sl, r2
 8000e08:	449a      	add	sl, r3
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	2400      	movs	r4, #0
 8000e0e:	9303      	str	r3, [sp, #12]
 8000e10:	9e00      	ldr	r6, [sp, #0]
 8000e12:	9f01      	ldr	r7, [sp, #4]
 8000e14:	033b      	lsls	r3, r7, #12
 8000e16:	0b1b      	lsrs	r3, r3, #12
 8000e18:	469b      	mov	fp, r3
 8000e1a:	007b      	lsls	r3, r7, #1
 8000e1c:	0030      	movs	r0, r6
 8000e1e:	0d5b      	lsrs	r3, r3, #21
 8000e20:	0ffd      	lsrs	r5, r7, #31
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d100      	bne.n	8000e28 <__aeabi_ddiv+0x68>
 8000e26:	e128      	b.n	800107a <__aeabi_ddiv+0x2ba>
 8000e28:	4ac4      	ldr	r2, [pc, #784]	@ (800113c <__aeabi_ddiv+0x37c>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_ddiv+0x70>
 8000e2e:	e177      	b.n	8001120 <__aeabi_ddiv+0x360>
 8000e30:	4659      	mov	r1, fp
 8000e32:	0f72      	lsrs	r2, r6, #29
 8000e34:	00c9      	lsls	r1, r1, #3
 8000e36:	430a      	orrs	r2, r1
 8000e38:	2180      	movs	r1, #128	@ 0x80
 8000e3a:	0409      	lsls	r1, r1, #16
 8000e3c:	4311      	orrs	r1, r2
 8000e3e:	468b      	mov	fp, r1
 8000e40:	49bf      	ldr	r1, [pc, #764]	@ (8001140 <__aeabi_ddiv+0x380>)
 8000e42:	00f2      	lsls	r2, r6, #3
 8000e44:	468c      	mov	ip, r1
 8000e46:	4651      	mov	r1, sl
 8000e48:	4463      	add	r3, ip
 8000e4a:	1acb      	subs	r3, r1, r3
 8000e4c:	469a      	mov	sl, r3
 8000e4e:	2300      	movs	r3, #0
 8000e50:	9e02      	ldr	r6, [sp, #8]
 8000e52:	406e      	eors	r6, r5
 8000e54:	2c0f      	cmp	r4, #15
 8000e56:	d827      	bhi.n	8000ea8 <__aeabi_ddiv+0xe8>
 8000e58:	49ba      	ldr	r1, [pc, #744]	@ (8001144 <__aeabi_ddiv+0x384>)
 8000e5a:	00a4      	lsls	r4, r4, #2
 8000e5c:	5909      	ldr	r1, [r1, r4]
 8000e5e:	468f      	mov	pc, r1
 8000e60:	46cb      	mov	fp, r9
 8000e62:	4642      	mov	r2, r8
 8000e64:	9e02      	ldr	r6, [sp, #8]
 8000e66:	9b03      	ldr	r3, [sp, #12]
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d016      	beq.n	8000e9a <__aeabi_ddiv+0xda>
 8000e6c:	2b03      	cmp	r3, #3
 8000e6e:	d100      	bne.n	8000e72 <__aeabi_ddiv+0xb2>
 8000e70:	e2a6      	b.n	80013c0 <__aeabi_ddiv+0x600>
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d000      	beq.n	8000e78 <__aeabi_ddiv+0xb8>
 8000e76:	e0df      	b.n	8001038 <__aeabi_ddiv+0x278>
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	2400      	movs	r4, #0
 8000e7e:	4690      	mov	r8, r2
 8000e80:	051b      	lsls	r3, r3, #20
 8000e82:	4323      	orrs	r3, r4
 8000e84:	07f6      	lsls	r6, r6, #31
 8000e86:	4333      	orrs	r3, r6
 8000e88:	4640      	mov	r0, r8
 8000e8a:	0019      	movs	r1, r3
 8000e8c:	b007      	add	sp, #28
 8000e8e:	bcf0      	pop	{r4, r5, r6, r7}
 8000e90:	46bb      	mov	fp, r7
 8000e92:	46b2      	mov	sl, r6
 8000e94:	46a9      	mov	r9, r5
 8000e96:	46a0      	mov	r8, r4
 8000e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2400      	movs	r4, #0
 8000e9e:	4690      	mov	r8, r2
 8000ea0:	4ba6      	ldr	r3, [pc, #664]	@ (800113c <__aeabi_ddiv+0x37c>)
 8000ea2:	e7ed      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 8000ea4:	002e      	movs	r6, r5
 8000ea6:	e7df      	b.n	8000e68 <__aeabi_ddiv+0xa8>
 8000ea8:	45cb      	cmp	fp, r9
 8000eaa:	d200      	bcs.n	8000eae <__aeabi_ddiv+0xee>
 8000eac:	e1d4      	b.n	8001258 <__aeabi_ddiv+0x498>
 8000eae:	d100      	bne.n	8000eb2 <__aeabi_ddiv+0xf2>
 8000eb0:	e1cf      	b.n	8001252 <__aeabi_ddiv+0x492>
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	425b      	negs	r3, r3
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	4644      	mov	r4, r8
 8000eba:	4648      	mov	r0, r9
 8000ebc:	2700      	movs	r7, #0
 8000ebe:	44e2      	add	sl, ip
 8000ec0:	465b      	mov	r3, fp
 8000ec2:	0e15      	lsrs	r5, r2, #24
 8000ec4:	021b      	lsls	r3, r3, #8
 8000ec6:	431d      	orrs	r5, r3
 8000ec8:	0c19      	lsrs	r1, r3, #16
 8000eca:	042b      	lsls	r3, r5, #16
 8000ecc:	0212      	lsls	r2, r2, #8
 8000ece:	9500      	str	r5, [sp, #0]
 8000ed0:	0c1d      	lsrs	r5, r3, #16
 8000ed2:	4691      	mov	r9, r2
 8000ed4:	9102      	str	r1, [sp, #8]
 8000ed6:	9503      	str	r5, [sp, #12]
 8000ed8:	f7ff f9b8 	bl	800024c <__aeabi_uidivmod>
 8000edc:	0002      	movs	r2, r0
 8000ede:	436a      	muls	r2, r5
 8000ee0:	040b      	lsls	r3, r1, #16
 8000ee2:	0c21      	lsrs	r1, r4, #16
 8000ee4:	4680      	mov	r8, r0
 8000ee6:	4319      	orrs	r1, r3
 8000ee8:	428a      	cmp	r2, r1
 8000eea:	d909      	bls.n	8000f00 <__aeabi_ddiv+0x140>
 8000eec:	9d00      	ldr	r5, [sp, #0]
 8000eee:	2301      	movs	r3, #1
 8000ef0:	46ac      	mov	ip, r5
 8000ef2:	425b      	negs	r3, r3
 8000ef4:	4461      	add	r1, ip
 8000ef6:	469c      	mov	ip, r3
 8000ef8:	44e0      	add	r8, ip
 8000efa:	428d      	cmp	r5, r1
 8000efc:	d800      	bhi.n	8000f00 <__aeabi_ddiv+0x140>
 8000efe:	e1fb      	b.n	80012f8 <__aeabi_ddiv+0x538>
 8000f00:	1a88      	subs	r0, r1, r2
 8000f02:	9902      	ldr	r1, [sp, #8]
 8000f04:	f7ff f9a2 	bl	800024c <__aeabi_uidivmod>
 8000f08:	9a03      	ldr	r2, [sp, #12]
 8000f0a:	0424      	lsls	r4, r4, #16
 8000f0c:	4342      	muls	r2, r0
 8000f0e:	0409      	lsls	r1, r1, #16
 8000f10:	0c24      	lsrs	r4, r4, #16
 8000f12:	0003      	movs	r3, r0
 8000f14:	430c      	orrs	r4, r1
 8000f16:	42a2      	cmp	r2, r4
 8000f18:	d906      	bls.n	8000f28 <__aeabi_ddiv+0x168>
 8000f1a:	9900      	ldr	r1, [sp, #0]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	468c      	mov	ip, r1
 8000f20:	4464      	add	r4, ip
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	d800      	bhi.n	8000f28 <__aeabi_ddiv+0x168>
 8000f26:	e1e1      	b.n	80012ec <__aeabi_ddiv+0x52c>
 8000f28:	1aa0      	subs	r0, r4, r2
 8000f2a:	4642      	mov	r2, r8
 8000f2c:	0412      	lsls	r2, r2, #16
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	4693      	mov	fp, r2
 8000f32:	464b      	mov	r3, r9
 8000f34:	4659      	mov	r1, fp
 8000f36:	0c1b      	lsrs	r3, r3, #16
 8000f38:	001d      	movs	r5, r3
 8000f3a:	9304      	str	r3, [sp, #16]
 8000f3c:	040b      	lsls	r3, r1, #16
 8000f3e:	4649      	mov	r1, r9
 8000f40:	0409      	lsls	r1, r1, #16
 8000f42:	0c09      	lsrs	r1, r1, #16
 8000f44:	000c      	movs	r4, r1
 8000f46:	0c1b      	lsrs	r3, r3, #16
 8000f48:	435c      	muls	r4, r3
 8000f4a:	0c12      	lsrs	r2, r2, #16
 8000f4c:	436b      	muls	r3, r5
 8000f4e:	4688      	mov	r8, r1
 8000f50:	4351      	muls	r1, r2
 8000f52:	436a      	muls	r2, r5
 8000f54:	0c25      	lsrs	r5, r4, #16
 8000f56:	46ac      	mov	ip, r5
 8000f58:	185b      	adds	r3, r3, r1
 8000f5a:	4463      	add	r3, ip
 8000f5c:	4299      	cmp	r1, r3
 8000f5e:	d903      	bls.n	8000f68 <__aeabi_ddiv+0x1a8>
 8000f60:	2180      	movs	r1, #128	@ 0x80
 8000f62:	0249      	lsls	r1, r1, #9
 8000f64:	468c      	mov	ip, r1
 8000f66:	4462      	add	r2, ip
 8000f68:	0c19      	lsrs	r1, r3, #16
 8000f6a:	0424      	lsls	r4, r4, #16
 8000f6c:	041b      	lsls	r3, r3, #16
 8000f6e:	0c24      	lsrs	r4, r4, #16
 8000f70:	188a      	adds	r2, r1, r2
 8000f72:	191c      	adds	r4, r3, r4
 8000f74:	4290      	cmp	r0, r2
 8000f76:	d302      	bcc.n	8000f7e <__aeabi_ddiv+0x1be>
 8000f78:	d116      	bne.n	8000fa8 <__aeabi_ddiv+0x1e8>
 8000f7a:	42a7      	cmp	r7, r4
 8000f7c:	d214      	bcs.n	8000fa8 <__aeabi_ddiv+0x1e8>
 8000f7e:	465b      	mov	r3, fp
 8000f80:	9d00      	ldr	r5, [sp, #0]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	444f      	add	r7, r9
 8000f86:	9305      	str	r3, [sp, #20]
 8000f88:	454f      	cmp	r7, r9
 8000f8a:	419b      	sbcs	r3, r3
 8000f8c:	46ac      	mov	ip, r5
 8000f8e:	425b      	negs	r3, r3
 8000f90:	4463      	add	r3, ip
 8000f92:	18c0      	adds	r0, r0, r3
 8000f94:	4285      	cmp	r5, r0
 8000f96:	d300      	bcc.n	8000f9a <__aeabi_ddiv+0x1da>
 8000f98:	e1a1      	b.n	80012de <__aeabi_ddiv+0x51e>
 8000f9a:	4282      	cmp	r2, r0
 8000f9c:	d900      	bls.n	8000fa0 <__aeabi_ddiv+0x1e0>
 8000f9e:	e1f6      	b.n	800138e <__aeabi_ddiv+0x5ce>
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_ddiv+0x1e4>
 8000fa2:	e1f1      	b.n	8001388 <__aeabi_ddiv+0x5c8>
 8000fa4:	9b05      	ldr	r3, [sp, #20]
 8000fa6:	469b      	mov	fp, r3
 8000fa8:	1b3c      	subs	r4, r7, r4
 8000faa:	42a7      	cmp	r7, r4
 8000fac:	41bf      	sbcs	r7, r7
 8000fae:	9d00      	ldr	r5, [sp, #0]
 8000fb0:	1a80      	subs	r0, r0, r2
 8000fb2:	427f      	negs	r7, r7
 8000fb4:	1bc0      	subs	r0, r0, r7
 8000fb6:	4285      	cmp	r5, r0
 8000fb8:	d100      	bne.n	8000fbc <__aeabi_ddiv+0x1fc>
 8000fba:	e1d0      	b.n	800135e <__aeabi_ddiv+0x59e>
 8000fbc:	9902      	ldr	r1, [sp, #8]
 8000fbe:	f7ff f945 	bl	800024c <__aeabi_uidivmod>
 8000fc2:	9a03      	ldr	r2, [sp, #12]
 8000fc4:	040b      	lsls	r3, r1, #16
 8000fc6:	4342      	muls	r2, r0
 8000fc8:	0c21      	lsrs	r1, r4, #16
 8000fca:	0007      	movs	r7, r0
 8000fcc:	4319      	orrs	r1, r3
 8000fce:	428a      	cmp	r2, r1
 8000fd0:	d900      	bls.n	8000fd4 <__aeabi_ddiv+0x214>
 8000fd2:	e178      	b.n	80012c6 <__aeabi_ddiv+0x506>
 8000fd4:	1a88      	subs	r0, r1, r2
 8000fd6:	9902      	ldr	r1, [sp, #8]
 8000fd8:	f7ff f938 	bl	800024c <__aeabi_uidivmod>
 8000fdc:	9a03      	ldr	r2, [sp, #12]
 8000fde:	0424      	lsls	r4, r4, #16
 8000fe0:	4342      	muls	r2, r0
 8000fe2:	0409      	lsls	r1, r1, #16
 8000fe4:	0c24      	lsrs	r4, r4, #16
 8000fe6:	0003      	movs	r3, r0
 8000fe8:	430c      	orrs	r4, r1
 8000fea:	42a2      	cmp	r2, r4
 8000fec:	d900      	bls.n	8000ff0 <__aeabi_ddiv+0x230>
 8000fee:	e15d      	b.n	80012ac <__aeabi_ddiv+0x4ec>
 8000ff0:	4641      	mov	r1, r8
 8000ff2:	1aa4      	subs	r4, r4, r2
 8000ff4:	043a      	lsls	r2, r7, #16
 8000ff6:	431a      	orrs	r2, r3
 8000ff8:	9d04      	ldr	r5, [sp, #16]
 8000ffa:	0413      	lsls	r3, r2, #16
 8000ffc:	0c1b      	lsrs	r3, r3, #16
 8000ffe:	4359      	muls	r1, r3
 8001000:	4647      	mov	r7, r8
 8001002:	436b      	muls	r3, r5
 8001004:	469c      	mov	ip, r3
 8001006:	0c10      	lsrs	r0, r2, #16
 8001008:	4347      	muls	r7, r0
 800100a:	0c0b      	lsrs	r3, r1, #16
 800100c:	44bc      	add	ip, r7
 800100e:	4463      	add	r3, ip
 8001010:	4368      	muls	r0, r5
 8001012:	429f      	cmp	r7, r3
 8001014:	d903      	bls.n	800101e <__aeabi_ddiv+0x25e>
 8001016:	2580      	movs	r5, #128	@ 0x80
 8001018:	026d      	lsls	r5, r5, #9
 800101a:	46ac      	mov	ip, r5
 800101c:	4460      	add	r0, ip
 800101e:	0c1f      	lsrs	r7, r3, #16
 8001020:	0409      	lsls	r1, r1, #16
 8001022:	041b      	lsls	r3, r3, #16
 8001024:	0c09      	lsrs	r1, r1, #16
 8001026:	183f      	adds	r7, r7, r0
 8001028:	185b      	adds	r3, r3, r1
 800102a:	42bc      	cmp	r4, r7
 800102c:	d200      	bcs.n	8001030 <__aeabi_ddiv+0x270>
 800102e:	e102      	b.n	8001236 <__aeabi_ddiv+0x476>
 8001030:	d100      	bne.n	8001034 <__aeabi_ddiv+0x274>
 8001032:	e0fd      	b.n	8001230 <__aeabi_ddiv+0x470>
 8001034:	2301      	movs	r3, #1
 8001036:	431a      	orrs	r2, r3
 8001038:	4b43      	ldr	r3, [pc, #268]	@ (8001148 <__aeabi_ddiv+0x388>)
 800103a:	4453      	add	r3, sl
 800103c:	2b00      	cmp	r3, #0
 800103e:	dc00      	bgt.n	8001042 <__aeabi_ddiv+0x282>
 8001040:	e0ae      	b.n	80011a0 <__aeabi_ddiv+0x3e0>
 8001042:	0751      	lsls	r1, r2, #29
 8001044:	d000      	beq.n	8001048 <__aeabi_ddiv+0x288>
 8001046:	e198      	b.n	800137a <__aeabi_ddiv+0x5ba>
 8001048:	4659      	mov	r1, fp
 800104a:	01c9      	lsls	r1, r1, #7
 800104c:	d506      	bpl.n	800105c <__aeabi_ddiv+0x29c>
 800104e:	4659      	mov	r1, fp
 8001050:	4b3e      	ldr	r3, [pc, #248]	@ (800114c <__aeabi_ddiv+0x38c>)
 8001052:	4019      	ands	r1, r3
 8001054:	2380      	movs	r3, #128	@ 0x80
 8001056:	468b      	mov	fp, r1
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	4453      	add	r3, sl
 800105c:	493c      	ldr	r1, [pc, #240]	@ (8001150 <__aeabi_ddiv+0x390>)
 800105e:	428b      	cmp	r3, r1
 8001060:	dd00      	ble.n	8001064 <__aeabi_ddiv+0x2a4>
 8001062:	e71a      	b.n	8000e9a <__aeabi_ddiv+0xda>
 8001064:	4659      	mov	r1, fp
 8001066:	08d2      	lsrs	r2, r2, #3
 8001068:	0749      	lsls	r1, r1, #29
 800106a:	4311      	orrs	r1, r2
 800106c:	465a      	mov	r2, fp
 800106e:	055b      	lsls	r3, r3, #21
 8001070:	0254      	lsls	r4, r2, #9
 8001072:	4688      	mov	r8, r1
 8001074:	0b24      	lsrs	r4, r4, #12
 8001076:	0d5b      	lsrs	r3, r3, #21
 8001078:	e702      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 800107a:	465a      	mov	r2, fp
 800107c:	9b00      	ldr	r3, [sp, #0]
 800107e:	431a      	orrs	r2, r3
 8001080:	d100      	bne.n	8001084 <__aeabi_ddiv+0x2c4>
 8001082:	e07e      	b.n	8001182 <__aeabi_ddiv+0x3c2>
 8001084:	465b      	mov	r3, fp
 8001086:	2b00      	cmp	r3, #0
 8001088:	d100      	bne.n	800108c <__aeabi_ddiv+0x2cc>
 800108a:	e100      	b.n	800128e <__aeabi_ddiv+0x4ce>
 800108c:	4658      	mov	r0, fp
 800108e:	f7ff fa0b 	bl	80004a8 <__clzsi2>
 8001092:	0002      	movs	r2, r0
 8001094:	0003      	movs	r3, r0
 8001096:	3a0b      	subs	r2, #11
 8001098:	271d      	movs	r7, #29
 800109a:	9e00      	ldr	r6, [sp, #0]
 800109c:	1aba      	subs	r2, r7, r2
 800109e:	0019      	movs	r1, r3
 80010a0:	4658      	mov	r0, fp
 80010a2:	40d6      	lsrs	r6, r2
 80010a4:	3908      	subs	r1, #8
 80010a6:	4088      	lsls	r0, r1
 80010a8:	0032      	movs	r2, r6
 80010aa:	4302      	orrs	r2, r0
 80010ac:	4693      	mov	fp, r2
 80010ae:	9a00      	ldr	r2, [sp, #0]
 80010b0:	408a      	lsls	r2, r1
 80010b2:	4928      	ldr	r1, [pc, #160]	@ (8001154 <__aeabi_ddiv+0x394>)
 80010b4:	4453      	add	r3, sl
 80010b6:	468a      	mov	sl, r1
 80010b8:	449a      	add	sl, r3
 80010ba:	2300      	movs	r3, #0
 80010bc:	e6c8      	b.n	8000e50 <__aeabi_ddiv+0x90>
 80010be:	465b      	mov	r3, fp
 80010c0:	4303      	orrs	r3, r0
 80010c2:	4699      	mov	r9, r3
 80010c4:	d056      	beq.n	8001174 <__aeabi_ddiv+0x3b4>
 80010c6:	465b      	mov	r3, fp
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d100      	bne.n	80010ce <__aeabi_ddiv+0x30e>
 80010cc:	e0cd      	b.n	800126a <__aeabi_ddiv+0x4aa>
 80010ce:	4658      	mov	r0, fp
 80010d0:	f7ff f9ea 	bl	80004a8 <__clzsi2>
 80010d4:	230b      	movs	r3, #11
 80010d6:	425b      	negs	r3, r3
 80010d8:	469c      	mov	ip, r3
 80010da:	0002      	movs	r2, r0
 80010dc:	4484      	add	ip, r0
 80010de:	4666      	mov	r6, ip
 80010e0:	231d      	movs	r3, #29
 80010e2:	1b9b      	subs	r3, r3, r6
 80010e4:	0026      	movs	r6, r4
 80010e6:	0011      	movs	r1, r2
 80010e8:	4658      	mov	r0, fp
 80010ea:	40de      	lsrs	r6, r3
 80010ec:	3908      	subs	r1, #8
 80010ee:	4088      	lsls	r0, r1
 80010f0:	0033      	movs	r3, r6
 80010f2:	4303      	orrs	r3, r0
 80010f4:	4699      	mov	r9, r3
 80010f6:	0023      	movs	r3, r4
 80010f8:	408b      	lsls	r3, r1
 80010fa:	4698      	mov	r8, r3
 80010fc:	4b16      	ldr	r3, [pc, #88]	@ (8001158 <__aeabi_ddiv+0x398>)
 80010fe:	2400      	movs	r4, #0
 8001100:	1a9b      	subs	r3, r3, r2
 8001102:	469a      	mov	sl, r3
 8001104:	2300      	movs	r3, #0
 8001106:	9303      	str	r3, [sp, #12]
 8001108:	e682      	b.n	8000e10 <__aeabi_ddiv+0x50>
 800110a:	465a      	mov	r2, fp
 800110c:	4302      	orrs	r2, r0
 800110e:	4691      	mov	r9, r2
 8001110:	d12a      	bne.n	8001168 <__aeabi_ddiv+0x3a8>
 8001112:	2200      	movs	r2, #0
 8001114:	469a      	mov	sl, r3
 8001116:	2302      	movs	r3, #2
 8001118:	4690      	mov	r8, r2
 800111a:	2408      	movs	r4, #8
 800111c:	9303      	str	r3, [sp, #12]
 800111e:	e677      	b.n	8000e10 <__aeabi_ddiv+0x50>
 8001120:	465a      	mov	r2, fp
 8001122:	9b00      	ldr	r3, [sp, #0]
 8001124:	431a      	orrs	r2, r3
 8001126:	4b0d      	ldr	r3, [pc, #52]	@ (800115c <__aeabi_ddiv+0x39c>)
 8001128:	469c      	mov	ip, r3
 800112a:	44e2      	add	sl, ip
 800112c:	2a00      	cmp	r2, #0
 800112e:	d117      	bne.n	8001160 <__aeabi_ddiv+0x3a0>
 8001130:	2302      	movs	r3, #2
 8001132:	431c      	orrs	r4, r3
 8001134:	2300      	movs	r3, #0
 8001136:	469b      	mov	fp, r3
 8001138:	3302      	adds	r3, #2
 800113a:	e689      	b.n	8000e50 <__aeabi_ddiv+0x90>
 800113c:	000007ff 	.word	0x000007ff
 8001140:	fffffc01 	.word	0xfffffc01
 8001144:	0800fdd8 	.word	0x0800fdd8
 8001148:	000003ff 	.word	0x000003ff
 800114c:	feffffff 	.word	0xfeffffff
 8001150:	000007fe 	.word	0x000007fe
 8001154:	000003f3 	.word	0x000003f3
 8001158:	fffffc0d 	.word	0xfffffc0d
 800115c:	fffff801 	.word	0xfffff801
 8001160:	2303      	movs	r3, #3
 8001162:	0032      	movs	r2, r6
 8001164:	431c      	orrs	r4, r3
 8001166:	e673      	b.n	8000e50 <__aeabi_ddiv+0x90>
 8001168:	469a      	mov	sl, r3
 800116a:	2303      	movs	r3, #3
 800116c:	46d9      	mov	r9, fp
 800116e:	240c      	movs	r4, #12
 8001170:	9303      	str	r3, [sp, #12]
 8001172:	e64d      	b.n	8000e10 <__aeabi_ddiv+0x50>
 8001174:	2300      	movs	r3, #0
 8001176:	4698      	mov	r8, r3
 8001178:	469a      	mov	sl, r3
 800117a:	3301      	adds	r3, #1
 800117c:	2404      	movs	r4, #4
 800117e:	9303      	str	r3, [sp, #12]
 8001180:	e646      	b.n	8000e10 <__aeabi_ddiv+0x50>
 8001182:	2301      	movs	r3, #1
 8001184:	431c      	orrs	r4, r3
 8001186:	2300      	movs	r3, #0
 8001188:	469b      	mov	fp, r3
 800118a:	3301      	adds	r3, #1
 800118c:	e660      	b.n	8000e50 <__aeabi_ddiv+0x90>
 800118e:	2300      	movs	r3, #0
 8001190:	2480      	movs	r4, #128	@ 0x80
 8001192:	4698      	mov	r8, r3
 8001194:	2600      	movs	r6, #0
 8001196:	4b92      	ldr	r3, [pc, #584]	@ (80013e0 <__aeabi_ddiv+0x620>)
 8001198:	0324      	lsls	r4, r4, #12
 800119a:	e671      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 800119c:	2201      	movs	r2, #1
 800119e:	4252      	negs	r2, r2
 80011a0:	2101      	movs	r1, #1
 80011a2:	1ac9      	subs	r1, r1, r3
 80011a4:	2938      	cmp	r1, #56	@ 0x38
 80011a6:	dd00      	ble.n	80011aa <__aeabi_ddiv+0x3ea>
 80011a8:	e666      	b.n	8000e78 <__aeabi_ddiv+0xb8>
 80011aa:	291f      	cmp	r1, #31
 80011ac:	dc00      	bgt.n	80011b0 <__aeabi_ddiv+0x3f0>
 80011ae:	e0ab      	b.n	8001308 <__aeabi_ddiv+0x548>
 80011b0:	201f      	movs	r0, #31
 80011b2:	4240      	negs	r0, r0
 80011b4:	1ac3      	subs	r3, r0, r3
 80011b6:	4658      	mov	r0, fp
 80011b8:	40d8      	lsrs	r0, r3
 80011ba:	0003      	movs	r3, r0
 80011bc:	2920      	cmp	r1, #32
 80011be:	d004      	beq.n	80011ca <__aeabi_ddiv+0x40a>
 80011c0:	4658      	mov	r0, fp
 80011c2:	4988      	ldr	r1, [pc, #544]	@ (80013e4 <__aeabi_ddiv+0x624>)
 80011c4:	4451      	add	r1, sl
 80011c6:	4088      	lsls	r0, r1
 80011c8:	4302      	orrs	r2, r0
 80011ca:	1e51      	subs	r1, r2, #1
 80011cc:	418a      	sbcs	r2, r1
 80011ce:	431a      	orrs	r2, r3
 80011d0:	2307      	movs	r3, #7
 80011d2:	0019      	movs	r1, r3
 80011d4:	2400      	movs	r4, #0
 80011d6:	4011      	ands	r1, r2
 80011d8:	4213      	tst	r3, r2
 80011da:	d00c      	beq.n	80011f6 <__aeabi_ddiv+0x436>
 80011dc:	230f      	movs	r3, #15
 80011de:	4013      	ands	r3, r2
 80011e0:	2b04      	cmp	r3, #4
 80011e2:	d100      	bne.n	80011e6 <__aeabi_ddiv+0x426>
 80011e4:	e0f9      	b.n	80013da <__aeabi_ddiv+0x61a>
 80011e6:	1d11      	adds	r1, r2, #4
 80011e8:	4291      	cmp	r1, r2
 80011ea:	419b      	sbcs	r3, r3
 80011ec:	000a      	movs	r2, r1
 80011ee:	425b      	negs	r3, r3
 80011f0:	0759      	lsls	r1, r3, #29
 80011f2:	025b      	lsls	r3, r3, #9
 80011f4:	0b1c      	lsrs	r4, r3, #12
 80011f6:	08d2      	lsrs	r2, r2, #3
 80011f8:	430a      	orrs	r2, r1
 80011fa:	4690      	mov	r8, r2
 80011fc:	2300      	movs	r3, #0
 80011fe:	e63f      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 8001200:	2480      	movs	r4, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	0324      	lsls	r4, r4, #12
 8001206:	4223      	tst	r3, r4
 8001208:	d009      	beq.n	800121e <__aeabi_ddiv+0x45e>
 800120a:	465b      	mov	r3, fp
 800120c:	4223      	tst	r3, r4
 800120e:	d106      	bne.n	800121e <__aeabi_ddiv+0x45e>
 8001210:	431c      	orrs	r4, r3
 8001212:	0324      	lsls	r4, r4, #12
 8001214:	002e      	movs	r6, r5
 8001216:	4690      	mov	r8, r2
 8001218:	4b71      	ldr	r3, [pc, #452]	@ (80013e0 <__aeabi_ddiv+0x620>)
 800121a:	0b24      	lsrs	r4, r4, #12
 800121c:	e630      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 800121e:	2480      	movs	r4, #128	@ 0x80
 8001220:	464b      	mov	r3, r9
 8001222:	0324      	lsls	r4, r4, #12
 8001224:	431c      	orrs	r4, r3
 8001226:	0324      	lsls	r4, r4, #12
 8001228:	9e02      	ldr	r6, [sp, #8]
 800122a:	4b6d      	ldr	r3, [pc, #436]	@ (80013e0 <__aeabi_ddiv+0x620>)
 800122c:	0b24      	lsrs	r4, r4, #12
 800122e:	e627      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 8001230:	2b00      	cmp	r3, #0
 8001232:	d100      	bne.n	8001236 <__aeabi_ddiv+0x476>
 8001234:	e700      	b.n	8001038 <__aeabi_ddiv+0x278>
 8001236:	9800      	ldr	r0, [sp, #0]
 8001238:	1e51      	subs	r1, r2, #1
 800123a:	4684      	mov	ip, r0
 800123c:	4464      	add	r4, ip
 800123e:	4284      	cmp	r4, r0
 8001240:	d200      	bcs.n	8001244 <__aeabi_ddiv+0x484>
 8001242:	e084      	b.n	800134e <__aeabi_ddiv+0x58e>
 8001244:	42bc      	cmp	r4, r7
 8001246:	d200      	bcs.n	800124a <__aeabi_ddiv+0x48a>
 8001248:	e0ae      	b.n	80013a8 <__aeabi_ddiv+0x5e8>
 800124a:	d100      	bne.n	800124e <__aeabi_ddiv+0x48e>
 800124c:	e0c1      	b.n	80013d2 <__aeabi_ddiv+0x612>
 800124e:	000a      	movs	r2, r1
 8001250:	e6f0      	b.n	8001034 <__aeabi_ddiv+0x274>
 8001252:	4542      	cmp	r2, r8
 8001254:	d900      	bls.n	8001258 <__aeabi_ddiv+0x498>
 8001256:	e62c      	b.n	8000eb2 <__aeabi_ddiv+0xf2>
 8001258:	464b      	mov	r3, r9
 800125a:	07dc      	lsls	r4, r3, #31
 800125c:	0858      	lsrs	r0, r3, #1
 800125e:	4643      	mov	r3, r8
 8001260:	085b      	lsrs	r3, r3, #1
 8001262:	431c      	orrs	r4, r3
 8001264:	4643      	mov	r3, r8
 8001266:	07df      	lsls	r7, r3, #31
 8001268:	e62a      	b.n	8000ec0 <__aeabi_ddiv+0x100>
 800126a:	f7ff f91d 	bl	80004a8 <__clzsi2>
 800126e:	2315      	movs	r3, #21
 8001270:	469c      	mov	ip, r3
 8001272:	4484      	add	ip, r0
 8001274:	0002      	movs	r2, r0
 8001276:	4663      	mov	r3, ip
 8001278:	3220      	adds	r2, #32
 800127a:	2b1c      	cmp	r3, #28
 800127c:	dc00      	bgt.n	8001280 <__aeabi_ddiv+0x4c0>
 800127e:	e72e      	b.n	80010de <__aeabi_ddiv+0x31e>
 8001280:	0023      	movs	r3, r4
 8001282:	3808      	subs	r0, #8
 8001284:	4083      	lsls	r3, r0
 8001286:	4699      	mov	r9, r3
 8001288:	2300      	movs	r3, #0
 800128a:	4698      	mov	r8, r3
 800128c:	e736      	b.n	80010fc <__aeabi_ddiv+0x33c>
 800128e:	f7ff f90b 	bl	80004a8 <__clzsi2>
 8001292:	0002      	movs	r2, r0
 8001294:	0003      	movs	r3, r0
 8001296:	3215      	adds	r2, #21
 8001298:	3320      	adds	r3, #32
 800129a:	2a1c      	cmp	r2, #28
 800129c:	dc00      	bgt.n	80012a0 <__aeabi_ddiv+0x4e0>
 800129e:	e6fb      	b.n	8001098 <__aeabi_ddiv+0x2d8>
 80012a0:	9900      	ldr	r1, [sp, #0]
 80012a2:	3808      	subs	r0, #8
 80012a4:	4081      	lsls	r1, r0
 80012a6:	2200      	movs	r2, #0
 80012a8:	468b      	mov	fp, r1
 80012aa:	e702      	b.n	80010b2 <__aeabi_ddiv+0x2f2>
 80012ac:	9900      	ldr	r1, [sp, #0]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	468c      	mov	ip, r1
 80012b2:	4464      	add	r4, ip
 80012b4:	42a1      	cmp	r1, r4
 80012b6:	d900      	bls.n	80012ba <__aeabi_ddiv+0x4fa>
 80012b8:	e69a      	b.n	8000ff0 <__aeabi_ddiv+0x230>
 80012ba:	42a2      	cmp	r2, r4
 80012bc:	d800      	bhi.n	80012c0 <__aeabi_ddiv+0x500>
 80012be:	e697      	b.n	8000ff0 <__aeabi_ddiv+0x230>
 80012c0:	1e83      	subs	r3, r0, #2
 80012c2:	4464      	add	r4, ip
 80012c4:	e694      	b.n	8000ff0 <__aeabi_ddiv+0x230>
 80012c6:	46ac      	mov	ip, r5
 80012c8:	4461      	add	r1, ip
 80012ca:	3f01      	subs	r7, #1
 80012cc:	428d      	cmp	r5, r1
 80012ce:	d900      	bls.n	80012d2 <__aeabi_ddiv+0x512>
 80012d0:	e680      	b.n	8000fd4 <__aeabi_ddiv+0x214>
 80012d2:	428a      	cmp	r2, r1
 80012d4:	d800      	bhi.n	80012d8 <__aeabi_ddiv+0x518>
 80012d6:	e67d      	b.n	8000fd4 <__aeabi_ddiv+0x214>
 80012d8:	1e87      	subs	r7, r0, #2
 80012da:	4461      	add	r1, ip
 80012dc:	e67a      	b.n	8000fd4 <__aeabi_ddiv+0x214>
 80012de:	4285      	cmp	r5, r0
 80012e0:	d000      	beq.n	80012e4 <__aeabi_ddiv+0x524>
 80012e2:	e65f      	b.n	8000fa4 <__aeabi_ddiv+0x1e4>
 80012e4:	45b9      	cmp	r9, r7
 80012e6:	d900      	bls.n	80012ea <__aeabi_ddiv+0x52a>
 80012e8:	e65c      	b.n	8000fa4 <__aeabi_ddiv+0x1e4>
 80012ea:	e656      	b.n	8000f9a <__aeabi_ddiv+0x1da>
 80012ec:	42a2      	cmp	r2, r4
 80012ee:	d800      	bhi.n	80012f2 <__aeabi_ddiv+0x532>
 80012f0:	e61a      	b.n	8000f28 <__aeabi_ddiv+0x168>
 80012f2:	1e83      	subs	r3, r0, #2
 80012f4:	4464      	add	r4, ip
 80012f6:	e617      	b.n	8000f28 <__aeabi_ddiv+0x168>
 80012f8:	428a      	cmp	r2, r1
 80012fa:	d800      	bhi.n	80012fe <__aeabi_ddiv+0x53e>
 80012fc:	e600      	b.n	8000f00 <__aeabi_ddiv+0x140>
 80012fe:	46ac      	mov	ip, r5
 8001300:	1e83      	subs	r3, r0, #2
 8001302:	4698      	mov	r8, r3
 8001304:	4461      	add	r1, ip
 8001306:	e5fb      	b.n	8000f00 <__aeabi_ddiv+0x140>
 8001308:	4837      	ldr	r0, [pc, #220]	@ (80013e8 <__aeabi_ddiv+0x628>)
 800130a:	0014      	movs	r4, r2
 800130c:	4450      	add	r0, sl
 800130e:	4082      	lsls	r2, r0
 8001310:	465b      	mov	r3, fp
 8001312:	0017      	movs	r7, r2
 8001314:	4083      	lsls	r3, r0
 8001316:	40cc      	lsrs	r4, r1
 8001318:	1e7a      	subs	r2, r7, #1
 800131a:	4197      	sbcs	r7, r2
 800131c:	4323      	orrs	r3, r4
 800131e:	433b      	orrs	r3, r7
 8001320:	001a      	movs	r2, r3
 8001322:	465b      	mov	r3, fp
 8001324:	40cb      	lsrs	r3, r1
 8001326:	0751      	lsls	r1, r2, #29
 8001328:	d009      	beq.n	800133e <__aeabi_ddiv+0x57e>
 800132a:	210f      	movs	r1, #15
 800132c:	4011      	ands	r1, r2
 800132e:	2904      	cmp	r1, #4
 8001330:	d005      	beq.n	800133e <__aeabi_ddiv+0x57e>
 8001332:	1d11      	adds	r1, r2, #4
 8001334:	4291      	cmp	r1, r2
 8001336:	4192      	sbcs	r2, r2
 8001338:	4252      	negs	r2, r2
 800133a:	189b      	adds	r3, r3, r2
 800133c:	000a      	movs	r2, r1
 800133e:	0219      	lsls	r1, r3, #8
 8001340:	d400      	bmi.n	8001344 <__aeabi_ddiv+0x584>
 8001342:	e755      	b.n	80011f0 <__aeabi_ddiv+0x430>
 8001344:	2200      	movs	r2, #0
 8001346:	2301      	movs	r3, #1
 8001348:	2400      	movs	r4, #0
 800134a:	4690      	mov	r8, r2
 800134c:	e598      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 800134e:	000a      	movs	r2, r1
 8001350:	42bc      	cmp	r4, r7
 8001352:	d000      	beq.n	8001356 <__aeabi_ddiv+0x596>
 8001354:	e66e      	b.n	8001034 <__aeabi_ddiv+0x274>
 8001356:	454b      	cmp	r3, r9
 8001358:	d000      	beq.n	800135c <__aeabi_ddiv+0x59c>
 800135a:	e66b      	b.n	8001034 <__aeabi_ddiv+0x274>
 800135c:	e66c      	b.n	8001038 <__aeabi_ddiv+0x278>
 800135e:	4b23      	ldr	r3, [pc, #140]	@ (80013ec <__aeabi_ddiv+0x62c>)
 8001360:	4a23      	ldr	r2, [pc, #140]	@ (80013f0 <__aeabi_ddiv+0x630>)
 8001362:	4453      	add	r3, sl
 8001364:	4592      	cmp	sl, r2
 8001366:	da00      	bge.n	800136a <__aeabi_ddiv+0x5aa>
 8001368:	e718      	b.n	800119c <__aeabi_ddiv+0x3dc>
 800136a:	2101      	movs	r1, #1
 800136c:	4249      	negs	r1, r1
 800136e:	1d0a      	adds	r2, r1, #4
 8001370:	428a      	cmp	r2, r1
 8001372:	4189      	sbcs	r1, r1
 8001374:	4249      	negs	r1, r1
 8001376:	448b      	add	fp, r1
 8001378:	e666      	b.n	8001048 <__aeabi_ddiv+0x288>
 800137a:	210f      	movs	r1, #15
 800137c:	4011      	ands	r1, r2
 800137e:	2904      	cmp	r1, #4
 8001380:	d100      	bne.n	8001384 <__aeabi_ddiv+0x5c4>
 8001382:	e661      	b.n	8001048 <__aeabi_ddiv+0x288>
 8001384:	0011      	movs	r1, r2
 8001386:	e7f2      	b.n	800136e <__aeabi_ddiv+0x5ae>
 8001388:	42bc      	cmp	r4, r7
 800138a:	d800      	bhi.n	800138e <__aeabi_ddiv+0x5ce>
 800138c:	e60a      	b.n	8000fa4 <__aeabi_ddiv+0x1e4>
 800138e:	2302      	movs	r3, #2
 8001390:	425b      	negs	r3, r3
 8001392:	469c      	mov	ip, r3
 8001394:	9900      	ldr	r1, [sp, #0]
 8001396:	444f      	add	r7, r9
 8001398:	454f      	cmp	r7, r9
 800139a:	419b      	sbcs	r3, r3
 800139c:	44e3      	add	fp, ip
 800139e:	468c      	mov	ip, r1
 80013a0:	425b      	negs	r3, r3
 80013a2:	4463      	add	r3, ip
 80013a4:	18c0      	adds	r0, r0, r3
 80013a6:	e5ff      	b.n	8000fa8 <__aeabi_ddiv+0x1e8>
 80013a8:	4649      	mov	r1, r9
 80013aa:	9d00      	ldr	r5, [sp, #0]
 80013ac:	0048      	lsls	r0, r1, #1
 80013ae:	4548      	cmp	r0, r9
 80013b0:	4189      	sbcs	r1, r1
 80013b2:	46ac      	mov	ip, r5
 80013b4:	4249      	negs	r1, r1
 80013b6:	4461      	add	r1, ip
 80013b8:	4681      	mov	r9, r0
 80013ba:	3a02      	subs	r2, #2
 80013bc:	1864      	adds	r4, r4, r1
 80013be:	e7c7      	b.n	8001350 <__aeabi_ddiv+0x590>
 80013c0:	2480      	movs	r4, #128	@ 0x80
 80013c2:	465b      	mov	r3, fp
 80013c4:	0324      	lsls	r4, r4, #12
 80013c6:	431c      	orrs	r4, r3
 80013c8:	0324      	lsls	r4, r4, #12
 80013ca:	4690      	mov	r8, r2
 80013cc:	4b04      	ldr	r3, [pc, #16]	@ (80013e0 <__aeabi_ddiv+0x620>)
 80013ce:	0b24      	lsrs	r4, r4, #12
 80013d0:	e556      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 80013d2:	4599      	cmp	r9, r3
 80013d4:	d3e8      	bcc.n	80013a8 <__aeabi_ddiv+0x5e8>
 80013d6:	000a      	movs	r2, r1
 80013d8:	e7bd      	b.n	8001356 <__aeabi_ddiv+0x596>
 80013da:	2300      	movs	r3, #0
 80013dc:	e708      	b.n	80011f0 <__aeabi_ddiv+0x430>
 80013de:	46c0      	nop			@ (mov r8, r8)
 80013e0:	000007ff 	.word	0x000007ff
 80013e4:	0000043e 	.word	0x0000043e
 80013e8:	0000041e 	.word	0x0000041e
 80013ec:	000003ff 	.word	0x000003ff
 80013f0:	fffffc02 	.word	0xfffffc02

080013f4 <__eqdf2>:
 80013f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f6:	4657      	mov	r7, sl
 80013f8:	46de      	mov	lr, fp
 80013fa:	464e      	mov	r6, r9
 80013fc:	4645      	mov	r5, r8
 80013fe:	b5e0      	push	{r5, r6, r7, lr}
 8001400:	000d      	movs	r5, r1
 8001402:	0004      	movs	r4, r0
 8001404:	0fe8      	lsrs	r0, r5, #31
 8001406:	4683      	mov	fp, r0
 8001408:	0309      	lsls	r1, r1, #12
 800140a:	0fd8      	lsrs	r0, r3, #31
 800140c:	0b09      	lsrs	r1, r1, #12
 800140e:	4682      	mov	sl, r0
 8001410:	4819      	ldr	r0, [pc, #100]	@ (8001478 <__eqdf2+0x84>)
 8001412:	468c      	mov	ip, r1
 8001414:	031f      	lsls	r7, r3, #12
 8001416:	0069      	lsls	r1, r5, #1
 8001418:	005e      	lsls	r6, r3, #1
 800141a:	0d49      	lsrs	r1, r1, #21
 800141c:	0b3f      	lsrs	r7, r7, #12
 800141e:	0d76      	lsrs	r6, r6, #21
 8001420:	4281      	cmp	r1, r0
 8001422:	d018      	beq.n	8001456 <__eqdf2+0x62>
 8001424:	4286      	cmp	r6, r0
 8001426:	d00f      	beq.n	8001448 <__eqdf2+0x54>
 8001428:	2001      	movs	r0, #1
 800142a:	42b1      	cmp	r1, r6
 800142c:	d10d      	bne.n	800144a <__eqdf2+0x56>
 800142e:	45bc      	cmp	ip, r7
 8001430:	d10b      	bne.n	800144a <__eqdf2+0x56>
 8001432:	4294      	cmp	r4, r2
 8001434:	d109      	bne.n	800144a <__eqdf2+0x56>
 8001436:	45d3      	cmp	fp, sl
 8001438:	d01c      	beq.n	8001474 <__eqdf2+0x80>
 800143a:	2900      	cmp	r1, #0
 800143c:	d105      	bne.n	800144a <__eqdf2+0x56>
 800143e:	4660      	mov	r0, ip
 8001440:	4320      	orrs	r0, r4
 8001442:	1e43      	subs	r3, r0, #1
 8001444:	4198      	sbcs	r0, r3
 8001446:	e000      	b.n	800144a <__eqdf2+0x56>
 8001448:	2001      	movs	r0, #1
 800144a:	bcf0      	pop	{r4, r5, r6, r7}
 800144c:	46bb      	mov	fp, r7
 800144e:	46b2      	mov	sl, r6
 8001450:	46a9      	mov	r9, r5
 8001452:	46a0      	mov	r8, r4
 8001454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001456:	2001      	movs	r0, #1
 8001458:	428e      	cmp	r6, r1
 800145a:	d1f6      	bne.n	800144a <__eqdf2+0x56>
 800145c:	4661      	mov	r1, ip
 800145e:	4339      	orrs	r1, r7
 8001460:	000f      	movs	r7, r1
 8001462:	4317      	orrs	r7, r2
 8001464:	4327      	orrs	r7, r4
 8001466:	d1f0      	bne.n	800144a <__eqdf2+0x56>
 8001468:	465b      	mov	r3, fp
 800146a:	4652      	mov	r2, sl
 800146c:	1a98      	subs	r0, r3, r2
 800146e:	1e43      	subs	r3, r0, #1
 8001470:	4198      	sbcs	r0, r3
 8001472:	e7ea      	b.n	800144a <__eqdf2+0x56>
 8001474:	2000      	movs	r0, #0
 8001476:	e7e8      	b.n	800144a <__eqdf2+0x56>
 8001478:	000007ff 	.word	0x000007ff

0800147c <__gedf2>:
 800147c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147e:	4657      	mov	r7, sl
 8001480:	464e      	mov	r6, r9
 8001482:	4645      	mov	r5, r8
 8001484:	46de      	mov	lr, fp
 8001486:	b5e0      	push	{r5, r6, r7, lr}
 8001488:	000d      	movs	r5, r1
 800148a:	030f      	lsls	r7, r1, #12
 800148c:	0b39      	lsrs	r1, r7, #12
 800148e:	b083      	sub	sp, #12
 8001490:	0004      	movs	r4, r0
 8001492:	4680      	mov	r8, r0
 8001494:	9101      	str	r1, [sp, #4]
 8001496:	0058      	lsls	r0, r3, #1
 8001498:	0fe9      	lsrs	r1, r5, #31
 800149a:	4f31      	ldr	r7, [pc, #196]	@ (8001560 <__gedf2+0xe4>)
 800149c:	0d40      	lsrs	r0, r0, #21
 800149e:	468c      	mov	ip, r1
 80014a0:	006e      	lsls	r6, r5, #1
 80014a2:	0319      	lsls	r1, r3, #12
 80014a4:	4682      	mov	sl, r0
 80014a6:	4691      	mov	r9, r2
 80014a8:	0d76      	lsrs	r6, r6, #21
 80014aa:	0b09      	lsrs	r1, r1, #12
 80014ac:	0fd8      	lsrs	r0, r3, #31
 80014ae:	42be      	cmp	r6, r7
 80014b0:	d01f      	beq.n	80014f2 <__gedf2+0x76>
 80014b2:	45ba      	cmp	sl, r7
 80014b4:	d00f      	beq.n	80014d6 <__gedf2+0x5a>
 80014b6:	2e00      	cmp	r6, #0
 80014b8:	d12f      	bne.n	800151a <__gedf2+0x9e>
 80014ba:	4655      	mov	r5, sl
 80014bc:	9e01      	ldr	r6, [sp, #4]
 80014be:	4334      	orrs	r4, r6
 80014c0:	2d00      	cmp	r5, #0
 80014c2:	d127      	bne.n	8001514 <__gedf2+0x98>
 80014c4:	430a      	orrs	r2, r1
 80014c6:	d03a      	beq.n	800153e <__gedf2+0xc2>
 80014c8:	2c00      	cmp	r4, #0
 80014ca:	d145      	bne.n	8001558 <__gedf2+0xdc>
 80014cc:	2800      	cmp	r0, #0
 80014ce:	d11a      	bne.n	8001506 <__gedf2+0x8a>
 80014d0:	2001      	movs	r0, #1
 80014d2:	4240      	negs	r0, r0
 80014d4:	e017      	b.n	8001506 <__gedf2+0x8a>
 80014d6:	4311      	orrs	r1, r2
 80014d8:	d13b      	bne.n	8001552 <__gedf2+0xd6>
 80014da:	2e00      	cmp	r6, #0
 80014dc:	d102      	bne.n	80014e4 <__gedf2+0x68>
 80014de:	9f01      	ldr	r7, [sp, #4]
 80014e0:	4327      	orrs	r7, r4
 80014e2:	d0f3      	beq.n	80014cc <__gedf2+0x50>
 80014e4:	4584      	cmp	ip, r0
 80014e6:	d109      	bne.n	80014fc <__gedf2+0x80>
 80014e8:	4663      	mov	r3, ip
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f0      	beq.n	80014d0 <__gedf2+0x54>
 80014ee:	4660      	mov	r0, ip
 80014f0:	e009      	b.n	8001506 <__gedf2+0x8a>
 80014f2:	9f01      	ldr	r7, [sp, #4]
 80014f4:	4327      	orrs	r7, r4
 80014f6:	d12c      	bne.n	8001552 <__gedf2+0xd6>
 80014f8:	45b2      	cmp	sl, r6
 80014fa:	d024      	beq.n	8001546 <__gedf2+0xca>
 80014fc:	4663      	mov	r3, ip
 80014fe:	2002      	movs	r0, #2
 8001500:	3b01      	subs	r3, #1
 8001502:	4018      	ands	r0, r3
 8001504:	3801      	subs	r0, #1
 8001506:	b003      	add	sp, #12
 8001508:	bcf0      	pop	{r4, r5, r6, r7}
 800150a:	46bb      	mov	fp, r7
 800150c:	46b2      	mov	sl, r6
 800150e:	46a9      	mov	r9, r5
 8001510:	46a0      	mov	r8, r4
 8001512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001514:	2c00      	cmp	r4, #0
 8001516:	d0d9      	beq.n	80014cc <__gedf2+0x50>
 8001518:	e7e4      	b.n	80014e4 <__gedf2+0x68>
 800151a:	4654      	mov	r4, sl
 800151c:	2c00      	cmp	r4, #0
 800151e:	d0ed      	beq.n	80014fc <__gedf2+0x80>
 8001520:	4584      	cmp	ip, r0
 8001522:	d1eb      	bne.n	80014fc <__gedf2+0x80>
 8001524:	4556      	cmp	r6, sl
 8001526:	dce9      	bgt.n	80014fc <__gedf2+0x80>
 8001528:	dbde      	blt.n	80014e8 <__gedf2+0x6c>
 800152a:	9b01      	ldr	r3, [sp, #4]
 800152c:	428b      	cmp	r3, r1
 800152e:	d8e5      	bhi.n	80014fc <__gedf2+0x80>
 8001530:	d1da      	bne.n	80014e8 <__gedf2+0x6c>
 8001532:	45c8      	cmp	r8, r9
 8001534:	d8e2      	bhi.n	80014fc <__gedf2+0x80>
 8001536:	2000      	movs	r0, #0
 8001538:	45c8      	cmp	r8, r9
 800153a:	d2e4      	bcs.n	8001506 <__gedf2+0x8a>
 800153c:	e7d4      	b.n	80014e8 <__gedf2+0x6c>
 800153e:	2000      	movs	r0, #0
 8001540:	2c00      	cmp	r4, #0
 8001542:	d0e0      	beq.n	8001506 <__gedf2+0x8a>
 8001544:	e7da      	b.n	80014fc <__gedf2+0x80>
 8001546:	4311      	orrs	r1, r2
 8001548:	d103      	bne.n	8001552 <__gedf2+0xd6>
 800154a:	4584      	cmp	ip, r0
 800154c:	d1d6      	bne.n	80014fc <__gedf2+0x80>
 800154e:	2000      	movs	r0, #0
 8001550:	e7d9      	b.n	8001506 <__gedf2+0x8a>
 8001552:	2002      	movs	r0, #2
 8001554:	4240      	negs	r0, r0
 8001556:	e7d6      	b.n	8001506 <__gedf2+0x8a>
 8001558:	4584      	cmp	ip, r0
 800155a:	d0e6      	beq.n	800152a <__gedf2+0xae>
 800155c:	e7ce      	b.n	80014fc <__gedf2+0x80>
 800155e:	46c0      	nop			@ (mov r8, r8)
 8001560:	000007ff 	.word	0x000007ff

08001564 <__ledf2>:
 8001564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001566:	4657      	mov	r7, sl
 8001568:	464e      	mov	r6, r9
 800156a:	4645      	mov	r5, r8
 800156c:	46de      	mov	lr, fp
 800156e:	b5e0      	push	{r5, r6, r7, lr}
 8001570:	000d      	movs	r5, r1
 8001572:	030f      	lsls	r7, r1, #12
 8001574:	0004      	movs	r4, r0
 8001576:	4680      	mov	r8, r0
 8001578:	0fe8      	lsrs	r0, r5, #31
 800157a:	0b39      	lsrs	r1, r7, #12
 800157c:	4684      	mov	ip, r0
 800157e:	b083      	sub	sp, #12
 8001580:	0058      	lsls	r0, r3, #1
 8001582:	4f30      	ldr	r7, [pc, #192]	@ (8001644 <__ledf2+0xe0>)
 8001584:	0d40      	lsrs	r0, r0, #21
 8001586:	9101      	str	r1, [sp, #4]
 8001588:	031e      	lsls	r6, r3, #12
 800158a:	0069      	lsls	r1, r5, #1
 800158c:	4682      	mov	sl, r0
 800158e:	4691      	mov	r9, r2
 8001590:	0d49      	lsrs	r1, r1, #21
 8001592:	0b36      	lsrs	r6, r6, #12
 8001594:	0fd8      	lsrs	r0, r3, #31
 8001596:	42b9      	cmp	r1, r7
 8001598:	d020      	beq.n	80015dc <__ledf2+0x78>
 800159a:	45ba      	cmp	sl, r7
 800159c:	d00f      	beq.n	80015be <__ledf2+0x5a>
 800159e:	2900      	cmp	r1, #0
 80015a0:	d12b      	bne.n	80015fa <__ledf2+0x96>
 80015a2:	9901      	ldr	r1, [sp, #4]
 80015a4:	430c      	orrs	r4, r1
 80015a6:	4651      	mov	r1, sl
 80015a8:	2900      	cmp	r1, #0
 80015aa:	d137      	bne.n	800161c <__ledf2+0xb8>
 80015ac:	4332      	orrs	r2, r6
 80015ae:	d038      	beq.n	8001622 <__ledf2+0xbe>
 80015b0:	2c00      	cmp	r4, #0
 80015b2:	d144      	bne.n	800163e <__ledf2+0xda>
 80015b4:	2800      	cmp	r0, #0
 80015b6:	d119      	bne.n	80015ec <__ledf2+0x88>
 80015b8:	2001      	movs	r0, #1
 80015ba:	4240      	negs	r0, r0
 80015bc:	e016      	b.n	80015ec <__ledf2+0x88>
 80015be:	4316      	orrs	r6, r2
 80015c0:	d113      	bne.n	80015ea <__ledf2+0x86>
 80015c2:	2900      	cmp	r1, #0
 80015c4:	d102      	bne.n	80015cc <__ledf2+0x68>
 80015c6:	9f01      	ldr	r7, [sp, #4]
 80015c8:	4327      	orrs	r7, r4
 80015ca:	d0f3      	beq.n	80015b4 <__ledf2+0x50>
 80015cc:	4584      	cmp	ip, r0
 80015ce:	d020      	beq.n	8001612 <__ledf2+0xae>
 80015d0:	4663      	mov	r3, ip
 80015d2:	2002      	movs	r0, #2
 80015d4:	3b01      	subs	r3, #1
 80015d6:	4018      	ands	r0, r3
 80015d8:	3801      	subs	r0, #1
 80015da:	e007      	b.n	80015ec <__ledf2+0x88>
 80015dc:	9f01      	ldr	r7, [sp, #4]
 80015de:	4327      	orrs	r7, r4
 80015e0:	d103      	bne.n	80015ea <__ledf2+0x86>
 80015e2:	458a      	cmp	sl, r1
 80015e4:	d1f4      	bne.n	80015d0 <__ledf2+0x6c>
 80015e6:	4316      	orrs	r6, r2
 80015e8:	d01f      	beq.n	800162a <__ledf2+0xc6>
 80015ea:	2002      	movs	r0, #2
 80015ec:	b003      	add	sp, #12
 80015ee:	bcf0      	pop	{r4, r5, r6, r7}
 80015f0:	46bb      	mov	fp, r7
 80015f2:	46b2      	mov	sl, r6
 80015f4:	46a9      	mov	r9, r5
 80015f6:	46a0      	mov	r8, r4
 80015f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015fa:	4654      	mov	r4, sl
 80015fc:	2c00      	cmp	r4, #0
 80015fe:	d0e7      	beq.n	80015d0 <__ledf2+0x6c>
 8001600:	4584      	cmp	ip, r0
 8001602:	d1e5      	bne.n	80015d0 <__ledf2+0x6c>
 8001604:	4551      	cmp	r1, sl
 8001606:	dce3      	bgt.n	80015d0 <__ledf2+0x6c>
 8001608:	db03      	blt.n	8001612 <__ledf2+0xae>
 800160a:	9b01      	ldr	r3, [sp, #4]
 800160c:	42b3      	cmp	r3, r6
 800160e:	d8df      	bhi.n	80015d0 <__ledf2+0x6c>
 8001610:	d00f      	beq.n	8001632 <__ledf2+0xce>
 8001612:	4663      	mov	r3, ip
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0cf      	beq.n	80015b8 <__ledf2+0x54>
 8001618:	4660      	mov	r0, ip
 800161a:	e7e7      	b.n	80015ec <__ledf2+0x88>
 800161c:	2c00      	cmp	r4, #0
 800161e:	d0c9      	beq.n	80015b4 <__ledf2+0x50>
 8001620:	e7d4      	b.n	80015cc <__ledf2+0x68>
 8001622:	2000      	movs	r0, #0
 8001624:	2c00      	cmp	r4, #0
 8001626:	d0e1      	beq.n	80015ec <__ledf2+0x88>
 8001628:	e7d2      	b.n	80015d0 <__ledf2+0x6c>
 800162a:	4584      	cmp	ip, r0
 800162c:	d1d0      	bne.n	80015d0 <__ledf2+0x6c>
 800162e:	2000      	movs	r0, #0
 8001630:	e7dc      	b.n	80015ec <__ledf2+0x88>
 8001632:	45c8      	cmp	r8, r9
 8001634:	d8cc      	bhi.n	80015d0 <__ledf2+0x6c>
 8001636:	2000      	movs	r0, #0
 8001638:	45c8      	cmp	r8, r9
 800163a:	d2d7      	bcs.n	80015ec <__ledf2+0x88>
 800163c:	e7e9      	b.n	8001612 <__ledf2+0xae>
 800163e:	4584      	cmp	ip, r0
 8001640:	d0e3      	beq.n	800160a <__ledf2+0xa6>
 8001642:	e7c5      	b.n	80015d0 <__ledf2+0x6c>
 8001644:	000007ff 	.word	0x000007ff

08001648 <__aeabi_dmul>:
 8001648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800164a:	4657      	mov	r7, sl
 800164c:	46de      	mov	lr, fp
 800164e:	464e      	mov	r6, r9
 8001650:	4645      	mov	r5, r8
 8001652:	b5e0      	push	{r5, r6, r7, lr}
 8001654:	001f      	movs	r7, r3
 8001656:	030b      	lsls	r3, r1, #12
 8001658:	0b1b      	lsrs	r3, r3, #12
 800165a:	0016      	movs	r6, r2
 800165c:	469a      	mov	sl, r3
 800165e:	0fca      	lsrs	r2, r1, #31
 8001660:	004b      	lsls	r3, r1, #1
 8001662:	0004      	movs	r4, r0
 8001664:	4693      	mov	fp, r2
 8001666:	b087      	sub	sp, #28
 8001668:	0d5b      	lsrs	r3, r3, #21
 800166a:	d100      	bne.n	800166e <__aeabi_dmul+0x26>
 800166c:	e0d5      	b.n	800181a <__aeabi_dmul+0x1d2>
 800166e:	4abb      	ldr	r2, [pc, #748]	@ (800195c <__aeabi_dmul+0x314>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d100      	bne.n	8001676 <__aeabi_dmul+0x2e>
 8001674:	e0f8      	b.n	8001868 <__aeabi_dmul+0x220>
 8001676:	4651      	mov	r1, sl
 8001678:	0f42      	lsrs	r2, r0, #29
 800167a:	00c9      	lsls	r1, r1, #3
 800167c:	430a      	orrs	r2, r1
 800167e:	2180      	movs	r1, #128	@ 0x80
 8001680:	0409      	lsls	r1, r1, #16
 8001682:	4311      	orrs	r1, r2
 8001684:	00c2      	lsls	r2, r0, #3
 8001686:	4691      	mov	r9, r2
 8001688:	4ab5      	ldr	r2, [pc, #724]	@ (8001960 <__aeabi_dmul+0x318>)
 800168a:	468a      	mov	sl, r1
 800168c:	189d      	adds	r5, r3, r2
 800168e:	2300      	movs	r3, #0
 8001690:	4698      	mov	r8, r3
 8001692:	9302      	str	r3, [sp, #8]
 8001694:	033c      	lsls	r4, r7, #12
 8001696:	007b      	lsls	r3, r7, #1
 8001698:	0ffa      	lsrs	r2, r7, #31
 800169a:	0030      	movs	r0, r6
 800169c:	0b24      	lsrs	r4, r4, #12
 800169e:	0d5b      	lsrs	r3, r3, #21
 80016a0:	9200      	str	r2, [sp, #0]
 80016a2:	d100      	bne.n	80016a6 <__aeabi_dmul+0x5e>
 80016a4:	e096      	b.n	80017d4 <__aeabi_dmul+0x18c>
 80016a6:	4aad      	ldr	r2, [pc, #692]	@ (800195c <__aeabi_dmul+0x314>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d031      	beq.n	8001710 <__aeabi_dmul+0xc8>
 80016ac:	0f72      	lsrs	r2, r6, #29
 80016ae:	00e4      	lsls	r4, r4, #3
 80016b0:	4322      	orrs	r2, r4
 80016b2:	2480      	movs	r4, #128	@ 0x80
 80016b4:	0424      	lsls	r4, r4, #16
 80016b6:	4314      	orrs	r4, r2
 80016b8:	4aa9      	ldr	r2, [pc, #676]	@ (8001960 <__aeabi_dmul+0x318>)
 80016ba:	00f0      	lsls	r0, r6, #3
 80016bc:	4694      	mov	ip, r2
 80016be:	4463      	add	r3, ip
 80016c0:	195b      	adds	r3, r3, r5
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	9201      	str	r2, [sp, #4]
 80016c6:	4642      	mov	r2, r8
 80016c8:	2600      	movs	r6, #0
 80016ca:	2a0a      	cmp	r2, #10
 80016cc:	dc42      	bgt.n	8001754 <__aeabi_dmul+0x10c>
 80016ce:	465a      	mov	r2, fp
 80016d0:	9900      	ldr	r1, [sp, #0]
 80016d2:	404a      	eors	r2, r1
 80016d4:	4693      	mov	fp, r2
 80016d6:	4642      	mov	r2, r8
 80016d8:	2a02      	cmp	r2, #2
 80016da:	dc32      	bgt.n	8001742 <__aeabi_dmul+0xfa>
 80016dc:	3a01      	subs	r2, #1
 80016de:	2a01      	cmp	r2, #1
 80016e0:	d900      	bls.n	80016e4 <__aeabi_dmul+0x9c>
 80016e2:	e149      	b.n	8001978 <__aeabi_dmul+0x330>
 80016e4:	2e02      	cmp	r6, #2
 80016e6:	d100      	bne.n	80016ea <__aeabi_dmul+0xa2>
 80016e8:	e0ca      	b.n	8001880 <__aeabi_dmul+0x238>
 80016ea:	2e01      	cmp	r6, #1
 80016ec:	d13d      	bne.n	800176a <__aeabi_dmul+0x122>
 80016ee:	2300      	movs	r3, #0
 80016f0:	2400      	movs	r4, #0
 80016f2:	2200      	movs	r2, #0
 80016f4:	0010      	movs	r0, r2
 80016f6:	465a      	mov	r2, fp
 80016f8:	051b      	lsls	r3, r3, #20
 80016fa:	4323      	orrs	r3, r4
 80016fc:	07d2      	lsls	r2, r2, #31
 80016fe:	4313      	orrs	r3, r2
 8001700:	0019      	movs	r1, r3
 8001702:	b007      	add	sp, #28
 8001704:	bcf0      	pop	{r4, r5, r6, r7}
 8001706:	46bb      	mov	fp, r7
 8001708:	46b2      	mov	sl, r6
 800170a:	46a9      	mov	r9, r5
 800170c:	46a0      	mov	r8, r4
 800170e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001710:	4b92      	ldr	r3, [pc, #584]	@ (800195c <__aeabi_dmul+0x314>)
 8001712:	4326      	orrs	r6, r4
 8001714:	18eb      	adds	r3, r5, r3
 8001716:	2e00      	cmp	r6, #0
 8001718:	d100      	bne.n	800171c <__aeabi_dmul+0xd4>
 800171a:	e0bb      	b.n	8001894 <__aeabi_dmul+0x24c>
 800171c:	2203      	movs	r2, #3
 800171e:	4641      	mov	r1, r8
 8001720:	4311      	orrs	r1, r2
 8001722:	465a      	mov	r2, fp
 8001724:	4688      	mov	r8, r1
 8001726:	9900      	ldr	r1, [sp, #0]
 8001728:	404a      	eors	r2, r1
 800172a:	2180      	movs	r1, #128	@ 0x80
 800172c:	0109      	lsls	r1, r1, #4
 800172e:	468c      	mov	ip, r1
 8001730:	0029      	movs	r1, r5
 8001732:	4461      	add	r1, ip
 8001734:	9101      	str	r1, [sp, #4]
 8001736:	4641      	mov	r1, r8
 8001738:	290a      	cmp	r1, #10
 800173a:	dd00      	ble.n	800173e <__aeabi_dmul+0xf6>
 800173c:	e233      	b.n	8001ba6 <__aeabi_dmul+0x55e>
 800173e:	4693      	mov	fp, r2
 8001740:	2603      	movs	r6, #3
 8001742:	4642      	mov	r2, r8
 8001744:	2701      	movs	r7, #1
 8001746:	4097      	lsls	r7, r2
 8001748:	21a6      	movs	r1, #166	@ 0xa6
 800174a:	003a      	movs	r2, r7
 800174c:	00c9      	lsls	r1, r1, #3
 800174e:	400a      	ands	r2, r1
 8001750:	420f      	tst	r7, r1
 8001752:	d031      	beq.n	80017b8 <__aeabi_dmul+0x170>
 8001754:	9e02      	ldr	r6, [sp, #8]
 8001756:	2e02      	cmp	r6, #2
 8001758:	d100      	bne.n	800175c <__aeabi_dmul+0x114>
 800175a:	e235      	b.n	8001bc8 <__aeabi_dmul+0x580>
 800175c:	2e03      	cmp	r6, #3
 800175e:	d100      	bne.n	8001762 <__aeabi_dmul+0x11a>
 8001760:	e1d2      	b.n	8001b08 <__aeabi_dmul+0x4c0>
 8001762:	4654      	mov	r4, sl
 8001764:	4648      	mov	r0, r9
 8001766:	2e01      	cmp	r6, #1
 8001768:	d0c1      	beq.n	80016ee <__aeabi_dmul+0xa6>
 800176a:	9a01      	ldr	r2, [sp, #4]
 800176c:	4b7d      	ldr	r3, [pc, #500]	@ (8001964 <__aeabi_dmul+0x31c>)
 800176e:	4694      	mov	ip, r2
 8001770:	4463      	add	r3, ip
 8001772:	2b00      	cmp	r3, #0
 8001774:	dc00      	bgt.n	8001778 <__aeabi_dmul+0x130>
 8001776:	e0c0      	b.n	80018fa <__aeabi_dmul+0x2b2>
 8001778:	0742      	lsls	r2, r0, #29
 800177a:	d009      	beq.n	8001790 <__aeabi_dmul+0x148>
 800177c:	220f      	movs	r2, #15
 800177e:	4002      	ands	r2, r0
 8001780:	2a04      	cmp	r2, #4
 8001782:	d005      	beq.n	8001790 <__aeabi_dmul+0x148>
 8001784:	1d02      	adds	r2, r0, #4
 8001786:	4282      	cmp	r2, r0
 8001788:	4180      	sbcs	r0, r0
 800178a:	4240      	negs	r0, r0
 800178c:	1824      	adds	r4, r4, r0
 800178e:	0010      	movs	r0, r2
 8001790:	01e2      	lsls	r2, r4, #7
 8001792:	d506      	bpl.n	80017a2 <__aeabi_dmul+0x15a>
 8001794:	4b74      	ldr	r3, [pc, #464]	@ (8001968 <__aeabi_dmul+0x320>)
 8001796:	9a01      	ldr	r2, [sp, #4]
 8001798:	401c      	ands	r4, r3
 800179a:	2380      	movs	r3, #128	@ 0x80
 800179c:	4694      	mov	ip, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	4463      	add	r3, ip
 80017a2:	4a72      	ldr	r2, [pc, #456]	@ (800196c <__aeabi_dmul+0x324>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	dc6b      	bgt.n	8001880 <__aeabi_dmul+0x238>
 80017a8:	0762      	lsls	r2, r4, #29
 80017aa:	08c0      	lsrs	r0, r0, #3
 80017ac:	0264      	lsls	r4, r4, #9
 80017ae:	055b      	lsls	r3, r3, #21
 80017b0:	4302      	orrs	r2, r0
 80017b2:	0b24      	lsrs	r4, r4, #12
 80017b4:	0d5b      	lsrs	r3, r3, #21
 80017b6:	e79d      	b.n	80016f4 <__aeabi_dmul+0xac>
 80017b8:	2190      	movs	r1, #144	@ 0x90
 80017ba:	0089      	lsls	r1, r1, #2
 80017bc:	420f      	tst	r7, r1
 80017be:	d163      	bne.n	8001888 <__aeabi_dmul+0x240>
 80017c0:	2288      	movs	r2, #136	@ 0x88
 80017c2:	423a      	tst	r2, r7
 80017c4:	d100      	bne.n	80017c8 <__aeabi_dmul+0x180>
 80017c6:	e0d7      	b.n	8001978 <__aeabi_dmul+0x330>
 80017c8:	9b00      	ldr	r3, [sp, #0]
 80017ca:	46a2      	mov	sl, r4
 80017cc:	469b      	mov	fp, r3
 80017ce:	4681      	mov	r9, r0
 80017d0:	9602      	str	r6, [sp, #8]
 80017d2:	e7bf      	b.n	8001754 <__aeabi_dmul+0x10c>
 80017d4:	0023      	movs	r3, r4
 80017d6:	4333      	orrs	r3, r6
 80017d8:	d100      	bne.n	80017dc <__aeabi_dmul+0x194>
 80017da:	e07f      	b.n	80018dc <__aeabi_dmul+0x294>
 80017dc:	2c00      	cmp	r4, #0
 80017de:	d100      	bne.n	80017e2 <__aeabi_dmul+0x19a>
 80017e0:	e1ad      	b.n	8001b3e <__aeabi_dmul+0x4f6>
 80017e2:	0020      	movs	r0, r4
 80017e4:	f7fe fe60 	bl	80004a8 <__clzsi2>
 80017e8:	0002      	movs	r2, r0
 80017ea:	0003      	movs	r3, r0
 80017ec:	3a0b      	subs	r2, #11
 80017ee:	201d      	movs	r0, #29
 80017f0:	0019      	movs	r1, r3
 80017f2:	1a82      	subs	r2, r0, r2
 80017f4:	0030      	movs	r0, r6
 80017f6:	3908      	subs	r1, #8
 80017f8:	40d0      	lsrs	r0, r2
 80017fa:	408c      	lsls	r4, r1
 80017fc:	4304      	orrs	r4, r0
 80017fe:	0030      	movs	r0, r6
 8001800:	4088      	lsls	r0, r1
 8001802:	4a5b      	ldr	r2, [pc, #364]	@ (8001970 <__aeabi_dmul+0x328>)
 8001804:	1aeb      	subs	r3, r5, r3
 8001806:	4694      	mov	ip, r2
 8001808:	4463      	add	r3, ip
 800180a:	1c5a      	adds	r2, r3, #1
 800180c:	9201      	str	r2, [sp, #4]
 800180e:	4642      	mov	r2, r8
 8001810:	2600      	movs	r6, #0
 8001812:	2a0a      	cmp	r2, #10
 8001814:	dc00      	bgt.n	8001818 <__aeabi_dmul+0x1d0>
 8001816:	e75a      	b.n	80016ce <__aeabi_dmul+0x86>
 8001818:	e79c      	b.n	8001754 <__aeabi_dmul+0x10c>
 800181a:	4653      	mov	r3, sl
 800181c:	4303      	orrs	r3, r0
 800181e:	4699      	mov	r9, r3
 8001820:	d054      	beq.n	80018cc <__aeabi_dmul+0x284>
 8001822:	4653      	mov	r3, sl
 8001824:	2b00      	cmp	r3, #0
 8001826:	d100      	bne.n	800182a <__aeabi_dmul+0x1e2>
 8001828:	e177      	b.n	8001b1a <__aeabi_dmul+0x4d2>
 800182a:	4650      	mov	r0, sl
 800182c:	f7fe fe3c 	bl	80004a8 <__clzsi2>
 8001830:	230b      	movs	r3, #11
 8001832:	425b      	negs	r3, r3
 8001834:	469c      	mov	ip, r3
 8001836:	0002      	movs	r2, r0
 8001838:	4484      	add	ip, r0
 800183a:	0011      	movs	r1, r2
 800183c:	4650      	mov	r0, sl
 800183e:	3908      	subs	r1, #8
 8001840:	4088      	lsls	r0, r1
 8001842:	231d      	movs	r3, #29
 8001844:	4680      	mov	r8, r0
 8001846:	4660      	mov	r0, ip
 8001848:	1a1b      	subs	r3, r3, r0
 800184a:	0020      	movs	r0, r4
 800184c:	40d8      	lsrs	r0, r3
 800184e:	0003      	movs	r3, r0
 8001850:	4640      	mov	r0, r8
 8001852:	4303      	orrs	r3, r0
 8001854:	469a      	mov	sl, r3
 8001856:	0023      	movs	r3, r4
 8001858:	408b      	lsls	r3, r1
 800185a:	4699      	mov	r9, r3
 800185c:	2300      	movs	r3, #0
 800185e:	4d44      	ldr	r5, [pc, #272]	@ (8001970 <__aeabi_dmul+0x328>)
 8001860:	4698      	mov	r8, r3
 8001862:	1aad      	subs	r5, r5, r2
 8001864:	9302      	str	r3, [sp, #8]
 8001866:	e715      	b.n	8001694 <__aeabi_dmul+0x4c>
 8001868:	4652      	mov	r2, sl
 800186a:	4302      	orrs	r2, r0
 800186c:	4691      	mov	r9, r2
 800186e:	d126      	bne.n	80018be <__aeabi_dmul+0x276>
 8001870:	2200      	movs	r2, #0
 8001872:	001d      	movs	r5, r3
 8001874:	2302      	movs	r3, #2
 8001876:	4692      	mov	sl, r2
 8001878:	3208      	adds	r2, #8
 800187a:	4690      	mov	r8, r2
 800187c:	9302      	str	r3, [sp, #8]
 800187e:	e709      	b.n	8001694 <__aeabi_dmul+0x4c>
 8001880:	2400      	movs	r4, #0
 8001882:	2200      	movs	r2, #0
 8001884:	4b35      	ldr	r3, [pc, #212]	@ (800195c <__aeabi_dmul+0x314>)
 8001886:	e735      	b.n	80016f4 <__aeabi_dmul+0xac>
 8001888:	2300      	movs	r3, #0
 800188a:	2480      	movs	r4, #128	@ 0x80
 800188c:	469b      	mov	fp, r3
 800188e:	0324      	lsls	r4, r4, #12
 8001890:	4b32      	ldr	r3, [pc, #200]	@ (800195c <__aeabi_dmul+0x314>)
 8001892:	e72f      	b.n	80016f4 <__aeabi_dmul+0xac>
 8001894:	2202      	movs	r2, #2
 8001896:	4641      	mov	r1, r8
 8001898:	4311      	orrs	r1, r2
 800189a:	2280      	movs	r2, #128	@ 0x80
 800189c:	0112      	lsls	r2, r2, #4
 800189e:	4694      	mov	ip, r2
 80018a0:	002a      	movs	r2, r5
 80018a2:	4462      	add	r2, ip
 80018a4:	4688      	mov	r8, r1
 80018a6:	9201      	str	r2, [sp, #4]
 80018a8:	290a      	cmp	r1, #10
 80018aa:	dd00      	ble.n	80018ae <__aeabi_dmul+0x266>
 80018ac:	e752      	b.n	8001754 <__aeabi_dmul+0x10c>
 80018ae:	465a      	mov	r2, fp
 80018b0:	2000      	movs	r0, #0
 80018b2:	9900      	ldr	r1, [sp, #0]
 80018b4:	0004      	movs	r4, r0
 80018b6:	404a      	eors	r2, r1
 80018b8:	4693      	mov	fp, r2
 80018ba:	2602      	movs	r6, #2
 80018bc:	e70b      	b.n	80016d6 <__aeabi_dmul+0x8e>
 80018be:	220c      	movs	r2, #12
 80018c0:	001d      	movs	r5, r3
 80018c2:	2303      	movs	r3, #3
 80018c4:	4681      	mov	r9, r0
 80018c6:	4690      	mov	r8, r2
 80018c8:	9302      	str	r3, [sp, #8]
 80018ca:	e6e3      	b.n	8001694 <__aeabi_dmul+0x4c>
 80018cc:	2300      	movs	r3, #0
 80018ce:	469a      	mov	sl, r3
 80018d0:	3304      	adds	r3, #4
 80018d2:	4698      	mov	r8, r3
 80018d4:	3b03      	subs	r3, #3
 80018d6:	2500      	movs	r5, #0
 80018d8:	9302      	str	r3, [sp, #8]
 80018da:	e6db      	b.n	8001694 <__aeabi_dmul+0x4c>
 80018dc:	4642      	mov	r2, r8
 80018de:	3301      	adds	r3, #1
 80018e0:	431a      	orrs	r2, r3
 80018e2:	002b      	movs	r3, r5
 80018e4:	4690      	mov	r8, r2
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	9201      	str	r2, [sp, #4]
 80018ea:	4642      	mov	r2, r8
 80018ec:	2400      	movs	r4, #0
 80018ee:	2000      	movs	r0, #0
 80018f0:	2601      	movs	r6, #1
 80018f2:	2a0a      	cmp	r2, #10
 80018f4:	dc00      	bgt.n	80018f8 <__aeabi_dmul+0x2b0>
 80018f6:	e6ea      	b.n	80016ce <__aeabi_dmul+0x86>
 80018f8:	e72c      	b.n	8001754 <__aeabi_dmul+0x10c>
 80018fa:	2201      	movs	r2, #1
 80018fc:	1ad2      	subs	r2, r2, r3
 80018fe:	2a38      	cmp	r2, #56	@ 0x38
 8001900:	dd00      	ble.n	8001904 <__aeabi_dmul+0x2bc>
 8001902:	e6f4      	b.n	80016ee <__aeabi_dmul+0xa6>
 8001904:	2a1f      	cmp	r2, #31
 8001906:	dc00      	bgt.n	800190a <__aeabi_dmul+0x2c2>
 8001908:	e12a      	b.n	8001b60 <__aeabi_dmul+0x518>
 800190a:	211f      	movs	r1, #31
 800190c:	4249      	negs	r1, r1
 800190e:	1acb      	subs	r3, r1, r3
 8001910:	0021      	movs	r1, r4
 8001912:	40d9      	lsrs	r1, r3
 8001914:	000b      	movs	r3, r1
 8001916:	2a20      	cmp	r2, #32
 8001918:	d005      	beq.n	8001926 <__aeabi_dmul+0x2de>
 800191a:	4a16      	ldr	r2, [pc, #88]	@ (8001974 <__aeabi_dmul+0x32c>)
 800191c:	9d01      	ldr	r5, [sp, #4]
 800191e:	4694      	mov	ip, r2
 8001920:	4465      	add	r5, ip
 8001922:	40ac      	lsls	r4, r5
 8001924:	4320      	orrs	r0, r4
 8001926:	1e42      	subs	r2, r0, #1
 8001928:	4190      	sbcs	r0, r2
 800192a:	4318      	orrs	r0, r3
 800192c:	2307      	movs	r3, #7
 800192e:	0019      	movs	r1, r3
 8001930:	2400      	movs	r4, #0
 8001932:	4001      	ands	r1, r0
 8001934:	4203      	tst	r3, r0
 8001936:	d00c      	beq.n	8001952 <__aeabi_dmul+0x30a>
 8001938:	230f      	movs	r3, #15
 800193a:	4003      	ands	r3, r0
 800193c:	2b04      	cmp	r3, #4
 800193e:	d100      	bne.n	8001942 <__aeabi_dmul+0x2fa>
 8001940:	e140      	b.n	8001bc4 <__aeabi_dmul+0x57c>
 8001942:	1d03      	adds	r3, r0, #4
 8001944:	4283      	cmp	r3, r0
 8001946:	41a4      	sbcs	r4, r4
 8001948:	0018      	movs	r0, r3
 800194a:	4264      	negs	r4, r4
 800194c:	0761      	lsls	r1, r4, #29
 800194e:	0264      	lsls	r4, r4, #9
 8001950:	0b24      	lsrs	r4, r4, #12
 8001952:	08c2      	lsrs	r2, r0, #3
 8001954:	2300      	movs	r3, #0
 8001956:	430a      	orrs	r2, r1
 8001958:	e6cc      	b.n	80016f4 <__aeabi_dmul+0xac>
 800195a:	46c0      	nop			@ (mov r8, r8)
 800195c:	000007ff 	.word	0x000007ff
 8001960:	fffffc01 	.word	0xfffffc01
 8001964:	000003ff 	.word	0x000003ff
 8001968:	feffffff 	.word	0xfeffffff
 800196c:	000007fe 	.word	0x000007fe
 8001970:	fffffc0d 	.word	0xfffffc0d
 8001974:	0000043e 	.word	0x0000043e
 8001978:	4649      	mov	r1, r9
 800197a:	464a      	mov	r2, r9
 800197c:	0409      	lsls	r1, r1, #16
 800197e:	0c09      	lsrs	r1, r1, #16
 8001980:	000d      	movs	r5, r1
 8001982:	0c16      	lsrs	r6, r2, #16
 8001984:	0c02      	lsrs	r2, r0, #16
 8001986:	0400      	lsls	r0, r0, #16
 8001988:	0c00      	lsrs	r0, r0, #16
 800198a:	4345      	muls	r5, r0
 800198c:	46ac      	mov	ip, r5
 800198e:	0005      	movs	r5, r0
 8001990:	4375      	muls	r5, r6
 8001992:	46a8      	mov	r8, r5
 8001994:	0015      	movs	r5, r2
 8001996:	000f      	movs	r7, r1
 8001998:	4375      	muls	r5, r6
 800199a:	9200      	str	r2, [sp, #0]
 800199c:	9502      	str	r5, [sp, #8]
 800199e:	002a      	movs	r2, r5
 80019a0:	9d00      	ldr	r5, [sp, #0]
 80019a2:	436f      	muls	r7, r5
 80019a4:	4665      	mov	r5, ip
 80019a6:	0c2d      	lsrs	r5, r5, #16
 80019a8:	46a9      	mov	r9, r5
 80019aa:	4447      	add	r7, r8
 80019ac:	444f      	add	r7, r9
 80019ae:	45b8      	cmp	r8, r7
 80019b0:	d905      	bls.n	80019be <__aeabi_dmul+0x376>
 80019b2:	0015      	movs	r5, r2
 80019b4:	2280      	movs	r2, #128	@ 0x80
 80019b6:	0252      	lsls	r2, r2, #9
 80019b8:	4690      	mov	r8, r2
 80019ba:	4445      	add	r5, r8
 80019bc:	9502      	str	r5, [sp, #8]
 80019be:	0c3d      	lsrs	r5, r7, #16
 80019c0:	9503      	str	r5, [sp, #12]
 80019c2:	4665      	mov	r5, ip
 80019c4:	042d      	lsls	r5, r5, #16
 80019c6:	043f      	lsls	r7, r7, #16
 80019c8:	0c2d      	lsrs	r5, r5, #16
 80019ca:	46ac      	mov	ip, r5
 80019cc:	003d      	movs	r5, r7
 80019ce:	4465      	add	r5, ip
 80019d0:	9504      	str	r5, [sp, #16]
 80019d2:	0c25      	lsrs	r5, r4, #16
 80019d4:	0424      	lsls	r4, r4, #16
 80019d6:	0c24      	lsrs	r4, r4, #16
 80019d8:	46ac      	mov	ip, r5
 80019da:	0025      	movs	r5, r4
 80019dc:	4375      	muls	r5, r6
 80019de:	46a8      	mov	r8, r5
 80019e0:	4665      	mov	r5, ip
 80019e2:	000f      	movs	r7, r1
 80019e4:	4369      	muls	r1, r5
 80019e6:	4441      	add	r1, r8
 80019e8:	4689      	mov	r9, r1
 80019ea:	4367      	muls	r7, r4
 80019ec:	0c39      	lsrs	r1, r7, #16
 80019ee:	4449      	add	r1, r9
 80019f0:	436e      	muls	r6, r5
 80019f2:	4588      	cmp	r8, r1
 80019f4:	d903      	bls.n	80019fe <__aeabi_dmul+0x3b6>
 80019f6:	2280      	movs	r2, #128	@ 0x80
 80019f8:	0252      	lsls	r2, r2, #9
 80019fa:	4690      	mov	r8, r2
 80019fc:	4446      	add	r6, r8
 80019fe:	0c0d      	lsrs	r5, r1, #16
 8001a00:	46a8      	mov	r8, r5
 8001a02:	0035      	movs	r5, r6
 8001a04:	4445      	add	r5, r8
 8001a06:	9505      	str	r5, [sp, #20]
 8001a08:	9d03      	ldr	r5, [sp, #12]
 8001a0a:	043f      	lsls	r7, r7, #16
 8001a0c:	46a8      	mov	r8, r5
 8001a0e:	0c3f      	lsrs	r7, r7, #16
 8001a10:	0409      	lsls	r1, r1, #16
 8001a12:	19c9      	adds	r1, r1, r7
 8001a14:	4488      	add	r8, r1
 8001a16:	4645      	mov	r5, r8
 8001a18:	9503      	str	r5, [sp, #12]
 8001a1a:	4655      	mov	r5, sl
 8001a1c:	042e      	lsls	r6, r5, #16
 8001a1e:	0c36      	lsrs	r6, r6, #16
 8001a20:	0c2f      	lsrs	r7, r5, #16
 8001a22:	0035      	movs	r5, r6
 8001a24:	4345      	muls	r5, r0
 8001a26:	4378      	muls	r0, r7
 8001a28:	4681      	mov	r9, r0
 8001a2a:	0038      	movs	r0, r7
 8001a2c:	46a8      	mov	r8, r5
 8001a2e:	0c2d      	lsrs	r5, r5, #16
 8001a30:	46aa      	mov	sl, r5
 8001a32:	9a00      	ldr	r2, [sp, #0]
 8001a34:	4350      	muls	r0, r2
 8001a36:	4372      	muls	r2, r6
 8001a38:	444a      	add	r2, r9
 8001a3a:	4452      	add	r2, sl
 8001a3c:	4591      	cmp	r9, r2
 8001a3e:	d903      	bls.n	8001a48 <__aeabi_dmul+0x400>
 8001a40:	2580      	movs	r5, #128	@ 0x80
 8001a42:	026d      	lsls	r5, r5, #9
 8001a44:	46a9      	mov	r9, r5
 8001a46:	4448      	add	r0, r9
 8001a48:	0c15      	lsrs	r5, r2, #16
 8001a4a:	46a9      	mov	r9, r5
 8001a4c:	4645      	mov	r5, r8
 8001a4e:	042d      	lsls	r5, r5, #16
 8001a50:	0c2d      	lsrs	r5, r5, #16
 8001a52:	46a8      	mov	r8, r5
 8001a54:	4665      	mov	r5, ip
 8001a56:	437d      	muls	r5, r7
 8001a58:	0412      	lsls	r2, r2, #16
 8001a5a:	4448      	add	r0, r9
 8001a5c:	4490      	add	r8, r2
 8001a5e:	46a9      	mov	r9, r5
 8001a60:	0032      	movs	r2, r6
 8001a62:	4665      	mov	r5, ip
 8001a64:	4362      	muls	r2, r4
 8001a66:	436e      	muls	r6, r5
 8001a68:	437c      	muls	r4, r7
 8001a6a:	0c17      	lsrs	r7, r2, #16
 8001a6c:	1936      	adds	r6, r6, r4
 8001a6e:	19bf      	adds	r7, r7, r6
 8001a70:	42bc      	cmp	r4, r7
 8001a72:	d903      	bls.n	8001a7c <__aeabi_dmul+0x434>
 8001a74:	2480      	movs	r4, #128	@ 0x80
 8001a76:	0264      	lsls	r4, r4, #9
 8001a78:	46a4      	mov	ip, r4
 8001a7a:	44e1      	add	r9, ip
 8001a7c:	9c02      	ldr	r4, [sp, #8]
 8001a7e:	9e03      	ldr	r6, [sp, #12]
 8001a80:	46a4      	mov	ip, r4
 8001a82:	9d05      	ldr	r5, [sp, #20]
 8001a84:	4466      	add	r6, ip
 8001a86:	428e      	cmp	r6, r1
 8001a88:	4189      	sbcs	r1, r1
 8001a8a:	46ac      	mov	ip, r5
 8001a8c:	0412      	lsls	r2, r2, #16
 8001a8e:	043c      	lsls	r4, r7, #16
 8001a90:	0c12      	lsrs	r2, r2, #16
 8001a92:	18a2      	adds	r2, r4, r2
 8001a94:	4462      	add	r2, ip
 8001a96:	4249      	negs	r1, r1
 8001a98:	1854      	adds	r4, r2, r1
 8001a9a:	4446      	add	r6, r8
 8001a9c:	46a4      	mov	ip, r4
 8001a9e:	4546      	cmp	r6, r8
 8001aa0:	41a4      	sbcs	r4, r4
 8001aa2:	4682      	mov	sl, r0
 8001aa4:	4264      	negs	r4, r4
 8001aa6:	46a0      	mov	r8, r4
 8001aa8:	42aa      	cmp	r2, r5
 8001aaa:	4192      	sbcs	r2, r2
 8001aac:	458c      	cmp	ip, r1
 8001aae:	4189      	sbcs	r1, r1
 8001ab0:	44e2      	add	sl, ip
 8001ab2:	44d0      	add	r8, sl
 8001ab4:	4249      	negs	r1, r1
 8001ab6:	4252      	negs	r2, r2
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	45a0      	cmp	r8, r4
 8001abc:	41a4      	sbcs	r4, r4
 8001abe:	4582      	cmp	sl, r0
 8001ac0:	4189      	sbcs	r1, r1
 8001ac2:	4264      	negs	r4, r4
 8001ac4:	4249      	negs	r1, r1
 8001ac6:	430c      	orrs	r4, r1
 8001ac8:	4641      	mov	r1, r8
 8001aca:	0c3f      	lsrs	r7, r7, #16
 8001acc:	19d2      	adds	r2, r2, r7
 8001ace:	1912      	adds	r2, r2, r4
 8001ad0:	0dcc      	lsrs	r4, r1, #23
 8001ad2:	9904      	ldr	r1, [sp, #16]
 8001ad4:	0270      	lsls	r0, r6, #9
 8001ad6:	4308      	orrs	r0, r1
 8001ad8:	1e41      	subs	r1, r0, #1
 8001ada:	4188      	sbcs	r0, r1
 8001adc:	4641      	mov	r1, r8
 8001ade:	444a      	add	r2, r9
 8001ae0:	0df6      	lsrs	r6, r6, #23
 8001ae2:	0252      	lsls	r2, r2, #9
 8001ae4:	4330      	orrs	r0, r6
 8001ae6:	0249      	lsls	r1, r1, #9
 8001ae8:	4314      	orrs	r4, r2
 8001aea:	4308      	orrs	r0, r1
 8001aec:	01d2      	lsls	r2, r2, #7
 8001aee:	d535      	bpl.n	8001b5c <__aeabi_dmul+0x514>
 8001af0:	2201      	movs	r2, #1
 8001af2:	0843      	lsrs	r3, r0, #1
 8001af4:	4002      	ands	r2, r0
 8001af6:	4313      	orrs	r3, r2
 8001af8:	07e0      	lsls	r0, r4, #31
 8001afa:	4318      	orrs	r0, r3
 8001afc:	0864      	lsrs	r4, r4, #1
 8001afe:	e634      	b.n	800176a <__aeabi_dmul+0x122>
 8001b00:	9b00      	ldr	r3, [sp, #0]
 8001b02:	46a2      	mov	sl, r4
 8001b04:	469b      	mov	fp, r3
 8001b06:	4681      	mov	r9, r0
 8001b08:	2480      	movs	r4, #128	@ 0x80
 8001b0a:	4653      	mov	r3, sl
 8001b0c:	0324      	lsls	r4, r4, #12
 8001b0e:	431c      	orrs	r4, r3
 8001b10:	0324      	lsls	r4, r4, #12
 8001b12:	464a      	mov	r2, r9
 8001b14:	4b2e      	ldr	r3, [pc, #184]	@ (8001bd0 <__aeabi_dmul+0x588>)
 8001b16:	0b24      	lsrs	r4, r4, #12
 8001b18:	e5ec      	b.n	80016f4 <__aeabi_dmul+0xac>
 8001b1a:	f7fe fcc5 	bl	80004a8 <__clzsi2>
 8001b1e:	2315      	movs	r3, #21
 8001b20:	469c      	mov	ip, r3
 8001b22:	4484      	add	ip, r0
 8001b24:	0002      	movs	r2, r0
 8001b26:	4663      	mov	r3, ip
 8001b28:	3220      	adds	r2, #32
 8001b2a:	2b1c      	cmp	r3, #28
 8001b2c:	dc00      	bgt.n	8001b30 <__aeabi_dmul+0x4e8>
 8001b2e:	e684      	b.n	800183a <__aeabi_dmul+0x1f2>
 8001b30:	2300      	movs	r3, #0
 8001b32:	4699      	mov	r9, r3
 8001b34:	0023      	movs	r3, r4
 8001b36:	3808      	subs	r0, #8
 8001b38:	4083      	lsls	r3, r0
 8001b3a:	469a      	mov	sl, r3
 8001b3c:	e68e      	b.n	800185c <__aeabi_dmul+0x214>
 8001b3e:	f7fe fcb3 	bl	80004a8 <__clzsi2>
 8001b42:	0002      	movs	r2, r0
 8001b44:	0003      	movs	r3, r0
 8001b46:	3215      	adds	r2, #21
 8001b48:	3320      	adds	r3, #32
 8001b4a:	2a1c      	cmp	r2, #28
 8001b4c:	dc00      	bgt.n	8001b50 <__aeabi_dmul+0x508>
 8001b4e:	e64e      	b.n	80017ee <__aeabi_dmul+0x1a6>
 8001b50:	0002      	movs	r2, r0
 8001b52:	0034      	movs	r4, r6
 8001b54:	3a08      	subs	r2, #8
 8001b56:	2000      	movs	r0, #0
 8001b58:	4094      	lsls	r4, r2
 8001b5a:	e652      	b.n	8001802 <__aeabi_dmul+0x1ba>
 8001b5c:	9301      	str	r3, [sp, #4]
 8001b5e:	e604      	b.n	800176a <__aeabi_dmul+0x122>
 8001b60:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd4 <__aeabi_dmul+0x58c>)
 8001b62:	0021      	movs	r1, r4
 8001b64:	469c      	mov	ip, r3
 8001b66:	0003      	movs	r3, r0
 8001b68:	9d01      	ldr	r5, [sp, #4]
 8001b6a:	40d3      	lsrs	r3, r2
 8001b6c:	4465      	add	r5, ip
 8001b6e:	40a9      	lsls	r1, r5
 8001b70:	4319      	orrs	r1, r3
 8001b72:	0003      	movs	r3, r0
 8001b74:	40ab      	lsls	r3, r5
 8001b76:	1e58      	subs	r0, r3, #1
 8001b78:	4183      	sbcs	r3, r0
 8001b7a:	4319      	orrs	r1, r3
 8001b7c:	0008      	movs	r0, r1
 8001b7e:	40d4      	lsrs	r4, r2
 8001b80:	074b      	lsls	r3, r1, #29
 8001b82:	d009      	beq.n	8001b98 <__aeabi_dmul+0x550>
 8001b84:	230f      	movs	r3, #15
 8001b86:	400b      	ands	r3, r1
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d005      	beq.n	8001b98 <__aeabi_dmul+0x550>
 8001b8c:	1d0b      	adds	r3, r1, #4
 8001b8e:	428b      	cmp	r3, r1
 8001b90:	4180      	sbcs	r0, r0
 8001b92:	4240      	negs	r0, r0
 8001b94:	1824      	adds	r4, r4, r0
 8001b96:	0018      	movs	r0, r3
 8001b98:	0223      	lsls	r3, r4, #8
 8001b9a:	d400      	bmi.n	8001b9e <__aeabi_dmul+0x556>
 8001b9c:	e6d6      	b.n	800194c <__aeabi_dmul+0x304>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	2400      	movs	r4, #0
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	e5a6      	b.n	80016f4 <__aeabi_dmul+0xac>
 8001ba6:	290f      	cmp	r1, #15
 8001ba8:	d1aa      	bne.n	8001b00 <__aeabi_dmul+0x4b8>
 8001baa:	2380      	movs	r3, #128	@ 0x80
 8001bac:	4652      	mov	r2, sl
 8001bae:	031b      	lsls	r3, r3, #12
 8001bb0:	421a      	tst	r2, r3
 8001bb2:	d0a9      	beq.n	8001b08 <__aeabi_dmul+0x4c0>
 8001bb4:	421c      	tst	r4, r3
 8001bb6:	d1a7      	bne.n	8001b08 <__aeabi_dmul+0x4c0>
 8001bb8:	431c      	orrs	r4, r3
 8001bba:	9b00      	ldr	r3, [sp, #0]
 8001bbc:	0002      	movs	r2, r0
 8001bbe:	469b      	mov	fp, r3
 8001bc0:	4b03      	ldr	r3, [pc, #12]	@ (8001bd0 <__aeabi_dmul+0x588>)
 8001bc2:	e597      	b.n	80016f4 <__aeabi_dmul+0xac>
 8001bc4:	2400      	movs	r4, #0
 8001bc6:	e6c1      	b.n	800194c <__aeabi_dmul+0x304>
 8001bc8:	2400      	movs	r4, #0
 8001bca:	4b01      	ldr	r3, [pc, #4]	@ (8001bd0 <__aeabi_dmul+0x588>)
 8001bcc:	0022      	movs	r2, r4
 8001bce:	e591      	b.n	80016f4 <__aeabi_dmul+0xac>
 8001bd0:	000007ff 	.word	0x000007ff
 8001bd4:	0000041e 	.word	0x0000041e

08001bd8 <__aeabi_dsub>:
 8001bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bda:	464e      	mov	r6, r9
 8001bdc:	4645      	mov	r5, r8
 8001bde:	46de      	mov	lr, fp
 8001be0:	4657      	mov	r7, sl
 8001be2:	b5e0      	push	{r5, r6, r7, lr}
 8001be4:	b085      	sub	sp, #20
 8001be6:	9000      	str	r0, [sp, #0]
 8001be8:	9101      	str	r1, [sp, #4]
 8001bea:	030c      	lsls	r4, r1, #12
 8001bec:	004f      	lsls	r7, r1, #1
 8001bee:	0fce      	lsrs	r6, r1, #31
 8001bf0:	0a61      	lsrs	r1, r4, #9
 8001bf2:	9c00      	ldr	r4, [sp, #0]
 8001bf4:	46b0      	mov	r8, r6
 8001bf6:	0f64      	lsrs	r4, r4, #29
 8001bf8:	430c      	orrs	r4, r1
 8001bfa:	9900      	ldr	r1, [sp, #0]
 8001bfc:	0d7f      	lsrs	r7, r7, #21
 8001bfe:	00c8      	lsls	r0, r1, #3
 8001c00:	0011      	movs	r1, r2
 8001c02:	001a      	movs	r2, r3
 8001c04:	031b      	lsls	r3, r3, #12
 8001c06:	469c      	mov	ip, r3
 8001c08:	9100      	str	r1, [sp, #0]
 8001c0a:	9201      	str	r2, [sp, #4]
 8001c0c:	0051      	lsls	r1, r2, #1
 8001c0e:	0d4b      	lsrs	r3, r1, #21
 8001c10:	4699      	mov	r9, r3
 8001c12:	9b01      	ldr	r3, [sp, #4]
 8001c14:	9d00      	ldr	r5, [sp, #0]
 8001c16:	0fd9      	lsrs	r1, r3, #31
 8001c18:	4663      	mov	r3, ip
 8001c1a:	0f6a      	lsrs	r2, r5, #29
 8001c1c:	0a5b      	lsrs	r3, r3, #9
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	00ea      	lsls	r2, r5, #3
 8001c22:	4694      	mov	ip, r2
 8001c24:	4693      	mov	fp, r2
 8001c26:	4ac1      	ldr	r2, [pc, #772]	@ (8001f2c <__aeabi_dsub+0x354>)
 8001c28:	9003      	str	r0, [sp, #12]
 8001c2a:	9302      	str	r3, [sp, #8]
 8001c2c:	4591      	cmp	r9, r2
 8001c2e:	d100      	bne.n	8001c32 <__aeabi_dsub+0x5a>
 8001c30:	e0cd      	b.n	8001dce <__aeabi_dsub+0x1f6>
 8001c32:	2501      	movs	r5, #1
 8001c34:	4069      	eors	r1, r5
 8001c36:	464d      	mov	r5, r9
 8001c38:	1b7d      	subs	r5, r7, r5
 8001c3a:	46aa      	mov	sl, r5
 8001c3c:	428e      	cmp	r6, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x6a>
 8001c40:	e080      	b.n	8001d44 <__aeabi_dsub+0x16c>
 8001c42:	2d00      	cmp	r5, #0
 8001c44:	dc00      	bgt.n	8001c48 <__aeabi_dsub+0x70>
 8001c46:	e335      	b.n	80022b4 <__aeabi_dsub+0x6dc>
 8001c48:	4649      	mov	r1, r9
 8001c4a:	2900      	cmp	r1, #0
 8001c4c:	d100      	bne.n	8001c50 <__aeabi_dsub+0x78>
 8001c4e:	e0df      	b.n	8001e10 <__aeabi_dsub+0x238>
 8001c50:	4297      	cmp	r7, r2
 8001c52:	d100      	bne.n	8001c56 <__aeabi_dsub+0x7e>
 8001c54:	e194      	b.n	8001f80 <__aeabi_dsub+0x3a8>
 8001c56:	4652      	mov	r2, sl
 8001c58:	2501      	movs	r5, #1
 8001c5a:	2a38      	cmp	r2, #56	@ 0x38
 8001c5c:	dc19      	bgt.n	8001c92 <__aeabi_dsub+0xba>
 8001c5e:	2280      	movs	r2, #128	@ 0x80
 8001c60:	9b02      	ldr	r3, [sp, #8]
 8001c62:	0412      	lsls	r2, r2, #16
 8001c64:	4313      	orrs	r3, r2
 8001c66:	9302      	str	r3, [sp, #8]
 8001c68:	4652      	mov	r2, sl
 8001c6a:	2a1f      	cmp	r2, #31
 8001c6c:	dd00      	ble.n	8001c70 <__aeabi_dsub+0x98>
 8001c6e:	e1e3      	b.n	8002038 <__aeabi_dsub+0x460>
 8001c70:	4653      	mov	r3, sl
 8001c72:	2220      	movs	r2, #32
 8001c74:	4661      	mov	r1, ip
 8001c76:	9d02      	ldr	r5, [sp, #8]
 8001c78:	1ad2      	subs	r2, r2, r3
 8001c7a:	4095      	lsls	r5, r2
 8001c7c:	40d9      	lsrs	r1, r3
 8001c7e:	430d      	orrs	r5, r1
 8001c80:	4661      	mov	r1, ip
 8001c82:	4091      	lsls	r1, r2
 8001c84:	000a      	movs	r2, r1
 8001c86:	1e51      	subs	r1, r2, #1
 8001c88:	418a      	sbcs	r2, r1
 8001c8a:	4315      	orrs	r5, r2
 8001c8c:	9a02      	ldr	r2, [sp, #8]
 8001c8e:	40da      	lsrs	r2, r3
 8001c90:	1aa4      	subs	r4, r4, r2
 8001c92:	1b45      	subs	r5, r0, r5
 8001c94:	42a8      	cmp	r0, r5
 8001c96:	4180      	sbcs	r0, r0
 8001c98:	4240      	negs	r0, r0
 8001c9a:	1a24      	subs	r4, r4, r0
 8001c9c:	0223      	lsls	r3, r4, #8
 8001c9e:	d400      	bmi.n	8001ca2 <__aeabi_dsub+0xca>
 8001ca0:	e13d      	b.n	8001f1e <__aeabi_dsub+0x346>
 8001ca2:	0264      	lsls	r4, r4, #9
 8001ca4:	0a64      	lsrs	r4, r4, #9
 8001ca6:	2c00      	cmp	r4, #0
 8001ca8:	d100      	bne.n	8001cac <__aeabi_dsub+0xd4>
 8001caa:	e147      	b.n	8001f3c <__aeabi_dsub+0x364>
 8001cac:	0020      	movs	r0, r4
 8001cae:	f7fe fbfb 	bl	80004a8 <__clzsi2>
 8001cb2:	0003      	movs	r3, r0
 8001cb4:	3b08      	subs	r3, #8
 8001cb6:	2120      	movs	r1, #32
 8001cb8:	0028      	movs	r0, r5
 8001cba:	1aca      	subs	r2, r1, r3
 8001cbc:	40d0      	lsrs	r0, r2
 8001cbe:	409c      	lsls	r4, r3
 8001cc0:	0002      	movs	r2, r0
 8001cc2:	409d      	lsls	r5, r3
 8001cc4:	4322      	orrs	r2, r4
 8001cc6:	429f      	cmp	r7, r3
 8001cc8:	dd00      	ble.n	8001ccc <__aeabi_dsub+0xf4>
 8001cca:	e177      	b.n	8001fbc <__aeabi_dsub+0x3e4>
 8001ccc:	1bd8      	subs	r0, r3, r7
 8001cce:	3001      	adds	r0, #1
 8001cd0:	1a09      	subs	r1, r1, r0
 8001cd2:	002c      	movs	r4, r5
 8001cd4:	408d      	lsls	r5, r1
 8001cd6:	40c4      	lsrs	r4, r0
 8001cd8:	1e6b      	subs	r3, r5, #1
 8001cda:	419d      	sbcs	r5, r3
 8001cdc:	0013      	movs	r3, r2
 8001cde:	40c2      	lsrs	r2, r0
 8001ce0:	408b      	lsls	r3, r1
 8001ce2:	4325      	orrs	r5, r4
 8001ce4:	2700      	movs	r7, #0
 8001ce6:	0014      	movs	r4, r2
 8001ce8:	431d      	orrs	r5, r3
 8001cea:	076b      	lsls	r3, r5, #29
 8001cec:	d009      	beq.n	8001d02 <__aeabi_dsub+0x12a>
 8001cee:	230f      	movs	r3, #15
 8001cf0:	402b      	ands	r3, r5
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d005      	beq.n	8001d02 <__aeabi_dsub+0x12a>
 8001cf6:	1d2b      	adds	r3, r5, #4
 8001cf8:	42ab      	cmp	r3, r5
 8001cfa:	41ad      	sbcs	r5, r5
 8001cfc:	426d      	negs	r5, r5
 8001cfe:	1964      	adds	r4, r4, r5
 8001d00:	001d      	movs	r5, r3
 8001d02:	0223      	lsls	r3, r4, #8
 8001d04:	d400      	bmi.n	8001d08 <__aeabi_dsub+0x130>
 8001d06:	e140      	b.n	8001f8a <__aeabi_dsub+0x3b2>
 8001d08:	4a88      	ldr	r2, [pc, #544]	@ (8001f2c <__aeabi_dsub+0x354>)
 8001d0a:	3701      	adds	r7, #1
 8001d0c:	4297      	cmp	r7, r2
 8001d0e:	d100      	bne.n	8001d12 <__aeabi_dsub+0x13a>
 8001d10:	e101      	b.n	8001f16 <__aeabi_dsub+0x33e>
 8001d12:	2601      	movs	r6, #1
 8001d14:	4643      	mov	r3, r8
 8001d16:	4986      	ldr	r1, [pc, #536]	@ (8001f30 <__aeabi_dsub+0x358>)
 8001d18:	08ed      	lsrs	r5, r5, #3
 8001d1a:	4021      	ands	r1, r4
 8001d1c:	074a      	lsls	r2, r1, #29
 8001d1e:	432a      	orrs	r2, r5
 8001d20:	057c      	lsls	r4, r7, #21
 8001d22:	024d      	lsls	r5, r1, #9
 8001d24:	0b2d      	lsrs	r5, r5, #12
 8001d26:	0d64      	lsrs	r4, r4, #21
 8001d28:	401e      	ands	r6, r3
 8001d2a:	0524      	lsls	r4, r4, #20
 8001d2c:	432c      	orrs	r4, r5
 8001d2e:	07f6      	lsls	r6, r6, #31
 8001d30:	4334      	orrs	r4, r6
 8001d32:	0010      	movs	r0, r2
 8001d34:	0021      	movs	r1, r4
 8001d36:	b005      	add	sp, #20
 8001d38:	bcf0      	pop	{r4, r5, r6, r7}
 8001d3a:	46bb      	mov	fp, r7
 8001d3c:	46b2      	mov	sl, r6
 8001d3e:	46a9      	mov	r9, r5
 8001d40:	46a0      	mov	r8, r4
 8001d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d44:	2d00      	cmp	r5, #0
 8001d46:	dc00      	bgt.n	8001d4a <__aeabi_dsub+0x172>
 8001d48:	e2d0      	b.n	80022ec <__aeabi_dsub+0x714>
 8001d4a:	4649      	mov	r1, r9
 8001d4c:	2900      	cmp	r1, #0
 8001d4e:	d000      	beq.n	8001d52 <__aeabi_dsub+0x17a>
 8001d50:	e0d4      	b.n	8001efc <__aeabi_dsub+0x324>
 8001d52:	4661      	mov	r1, ip
 8001d54:	9b02      	ldr	r3, [sp, #8]
 8001d56:	4319      	orrs	r1, r3
 8001d58:	d100      	bne.n	8001d5c <__aeabi_dsub+0x184>
 8001d5a:	e12b      	b.n	8001fb4 <__aeabi_dsub+0x3dc>
 8001d5c:	1e69      	subs	r1, r5, #1
 8001d5e:	2d01      	cmp	r5, #1
 8001d60:	d100      	bne.n	8001d64 <__aeabi_dsub+0x18c>
 8001d62:	e1d9      	b.n	8002118 <__aeabi_dsub+0x540>
 8001d64:	4295      	cmp	r5, r2
 8001d66:	d100      	bne.n	8001d6a <__aeabi_dsub+0x192>
 8001d68:	e10a      	b.n	8001f80 <__aeabi_dsub+0x3a8>
 8001d6a:	2501      	movs	r5, #1
 8001d6c:	2938      	cmp	r1, #56	@ 0x38
 8001d6e:	dc17      	bgt.n	8001da0 <__aeabi_dsub+0x1c8>
 8001d70:	468a      	mov	sl, r1
 8001d72:	4653      	mov	r3, sl
 8001d74:	2b1f      	cmp	r3, #31
 8001d76:	dd00      	ble.n	8001d7a <__aeabi_dsub+0x1a2>
 8001d78:	e1e7      	b.n	800214a <__aeabi_dsub+0x572>
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	1ad2      	subs	r2, r2, r3
 8001d7e:	9b02      	ldr	r3, [sp, #8]
 8001d80:	4661      	mov	r1, ip
 8001d82:	4093      	lsls	r3, r2
 8001d84:	001d      	movs	r5, r3
 8001d86:	4653      	mov	r3, sl
 8001d88:	40d9      	lsrs	r1, r3
 8001d8a:	4663      	mov	r3, ip
 8001d8c:	4093      	lsls	r3, r2
 8001d8e:	001a      	movs	r2, r3
 8001d90:	430d      	orrs	r5, r1
 8001d92:	1e51      	subs	r1, r2, #1
 8001d94:	418a      	sbcs	r2, r1
 8001d96:	4653      	mov	r3, sl
 8001d98:	4315      	orrs	r5, r2
 8001d9a:	9a02      	ldr	r2, [sp, #8]
 8001d9c:	40da      	lsrs	r2, r3
 8001d9e:	18a4      	adds	r4, r4, r2
 8001da0:	182d      	adds	r5, r5, r0
 8001da2:	4285      	cmp	r5, r0
 8001da4:	4180      	sbcs	r0, r0
 8001da6:	4240      	negs	r0, r0
 8001da8:	1824      	adds	r4, r4, r0
 8001daa:	0223      	lsls	r3, r4, #8
 8001dac:	d400      	bmi.n	8001db0 <__aeabi_dsub+0x1d8>
 8001dae:	e0b6      	b.n	8001f1e <__aeabi_dsub+0x346>
 8001db0:	4b5e      	ldr	r3, [pc, #376]	@ (8001f2c <__aeabi_dsub+0x354>)
 8001db2:	3701      	adds	r7, #1
 8001db4:	429f      	cmp	r7, r3
 8001db6:	d100      	bne.n	8001dba <__aeabi_dsub+0x1e2>
 8001db8:	e0ad      	b.n	8001f16 <__aeabi_dsub+0x33e>
 8001dba:	2101      	movs	r1, #1
 8001dbc:	4b5c      	ldr	r3, [pc, #368]	@ (8001f30 <__aeabi_dsub+0x358>)
 8001dbe:	086a      	lsrs	r2, r5, #1
 8001dc0:	401c      	ands	r4, r3
 8001dc2:	4029      	ands	r1, r5
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	07e5      	lsls	r5, r4, #31
 8001dc8:	4315      	orrs	r5, r2
 8001dca:	0864      	lsrs	r4, r4, #1
 8001dcc:	e78d      	b.n	8001cea <__aeabi_dsub+0x112>
 8001dce:	4a59      	ldr	r2, [pc, #356]	@ (8001f34 <__aeabi_dsub+0x35c>)
 8001dd0:	9b02      	ldr	r3, [sp, #8]
 8001dd2:	4692      	mov	sl, r2
 8001dd4:	4662      	mov	r2, ip
 8001dd6:	44ba      	add	sl, r7
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	d02c      	beq.n	8001e36 <__aeabi_dsub+0x25e>
 8001ddc:	428e      	cmp	r6, r1
 8001dde:	d02e      	beq.n	8001e3e <__aeabi_dsub+0x266>
 8001de0:	4652      	mov	r2, sl
 8001de2:	2a00      	cmp	r2, #0
 8001de4:	d060      	beq.n	8001ea8 <__aeabi_dsub+0x2d0>
 8001de6:	2f00      	cmp	r7, #0
 8001de8:	d100      	bne.n	8001dec <__aeabi_dsub+0x214>
 8001dea:	e0db      	b.n	8001fa4 <__aeabi_dsub+0x3cc>
 8001dec:	4663      	mov	r3, ip
 8001dee:	000e      	movs	r6, r1
 8001df0:	9c02      	ldr	r4, [sp, #8]
 8001df2:	08d8      	lsrs	r0, r3, #3
 8001df4:	0762      	lsls	r2, r4, #29
 8001df6:	4302      	orrs	r2, r0
 8001df8:	08e4      	lsrs	r4, r4, #3
 8001dfa:	0013      	movs	r3, r2
 8001dfc:	4323      	orrs	r3, r4
 8001dfe:	d100      	bne.n	8001e02 <__aeabi_dsub+0x22a>
 8001e00:	e254      	b.n	80022ac <__aeabi_dsub+0x6d4>
 8001e02:	2580      	movs	r5, #128	@ 0x80
 8001e04:	032d      	lsls	r5, r5, #12
 8001e06:	4325      	orrs	r5, r4
 8001e08:	032d      	lsls	r5, r5, #12
 8001e0a:	4c48      	ldr	r4, [pc, #288]	@ (8001f2c <__aeabi_dsub+0x354>)
 8001e0c:	0b2d      	lsrs	r5, r5, #12
 8001e0e:	e78c      	b.n	8001d2a <__aeabi_dsub+0x152>
 8001e10:	4661      	mov	r1, ip
 8001e12:	9b02      	ldr	r3, [sp, #8]
 8001e14:	4319      	orrs	r1, r3
 8001e16:	d100      	bne.n	8001e1a <__aeabi_dsub+0x242>
 8001e18:	e0cc      	b.n	8001fb4 <__aeabi_dsub+0x3dc>
 8001e1a:	0029      	movs	r1, r5
 8001e1c:	3901      	subs	r1, #1
 8001e1e:	2d01      	cmp	r5, #1
 8001e20:	d100      	bne.n	8001e24 <__aeabi_dsub+0x24c>
 8001e22:	e188      	b.n	8002136 <__aeabi_dsub+0x55e>
 8001e24:	4295      	cmp	r5, r2
 8001e26:	d100      	bne.n	8001e2a <__aeabi_dsub+0x252>
 8001e28:	e0aa      	b.n	8001f80 <__aeabi_dsub+0x3a8>
 8001e2a:	2501      	movs	r5, #1
 8001e2c:	2938      	cmp	r1, #56	@ 0x38
 8001e2e:	dd00      	ble.n	8001e32 <__aeabi_dsub+0x25a>
 8001e30:	e72f      	b.n	8001c92 <__aeabi_dsub+0xba>
 8001e32:	468a      	mov	sl, r1
 8001e34:	e718      	b.n	8001c68 <__aeabi_dsub+0x90>
 8001e36:	2201      	movs	r2, #1
 8001e38:	4051      	eors	r1, r2
 8001e3a:	428e      	cmp	r6, r1
 8001e3c:	d1d0      	bne.n	8001de0 <__aeabi_dsub+0x208>
 8001e3e:	4653      	mov	r3, sl
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d100      	bne.n	8001e46 <__aeabi_dsub+0x26e>
 8001e44:	e0be      	b.n	8001fc4 <__aeabi_dsub+0x3ec>
 8001e46:	2f00      	cmp	r7, #0
 8001e48:	d000      	beq.n	8001e4c <__aeabi_dsub+0x274>
 8001e4a:	e138      	b.n	80020be <__aeabi_dsub+0x4e6>
 8001e4c:	46ca      	mov	sl, r9
 8001e4e:	0022      	movs	r2, r4
 8001e50:	4302      	orrs	r2, r0
 8001e52:	d100      	bne.n	8001e56 <__aeabi_dsub+0x27e>
 8001e54:	e1e2      	b.n	800221c <__aeabi_dsub+0x644>
 8001e56:	4653      	mov	r3, sl
 8001e58:	1e59      	subs	r1, r3, #1
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d100      	bne.n	8001e60 <__aeabi_dsub+0x288>
 8001e5e:	e20d      	b.n	800227c <__aeabi_dsub+0x6a4>
 8001e60:	4a32      	ldr	r2, [pc, #200]	@ (8001f2c <__aeabi_dsub+0x354>)
 8001e62:	4592      	cmp	sl, r2
 8001e64:	d100      	bne.n	8001e68 <__aeabi_dsub+0x290>
 8001e66:	e1d2      	b.n	800220e <__aeabi_dsub+0x636>
 8001e68:	2701      	movs	r7, #1
 8001e6a:	2938      	cmp	r1, #56	@ 0x38
 8001e6c:	dc13      	bgt.n	8001e96 <__aeabi_dsub+0x2be>
 8001e6e:	291f      	cmp	r1, #31
 8001e70:	dd00      	ble.n	8001e74 <__aeabi_dsub+0x29c>
 8001e72:	e1ee      	b.n	8002252 <__aeabi_dsub+0x67a>
 8001e74:	2220      	movs	r2, #32
 8001e76:	9b02      	ldr	r3, [sp, #8]
 8001e78:	1a52      	subs	r2, r2, r1
 8001e7a:	0025      	movs	r5, r4
 8001e7c:	0007      	movs	r7, r0
 8001e7e:	469a      	mov	sl, r3
 8001e80:	40cc      	lsrs	r4, r1
 8001e82:	4090      	lsls	r0, r2
 8001e84:	4095      	lsls	r5, r2
 8001e86:	40cf      	lsrs	r7, r1
 8001e88:	44a2      	add	sl, r4
 8001e8a:	1e42      	subs	r2, r0, #1
 8001e8c:	4190      	sbcs	r0, r2
 8001e8e:	4653      	mov	r3, sl
 8001e90:	432f      	orrs	r7, r5
 8001e92:	4307      	orrs	r7, r0
 8001e94:	9302      	str	r3, [sp, #8]
 8001e96:	003d      	movs	r5, r7
 8001e98:	4465      	add	r5, ip
 8001e9a:	4565      	cmp	r5, ip
 8001e9c:	4192      	sbcs	r2, r2
 8001e9e:	9b02      	ldr	r3, [sp, #8]
 8001ea0:	4252      	negs	r2, r2
 8001ea2:	464f      	mov	r7, r9
 8001ea4:	18d4      	adds	r4, r2, r3
 8001ea6:	e780      	b.n	8001daa <__aeabi_dsub+0x1d2>
 8001ea8:	4a23      	ldr	r2, [pc, #140]	@ (8001f38 <__aeabi_dsub+0x360>)
 8001eaa:	1c7d      	adds	r5, r7, #1
 8001eac:	4215      	tst	r5, r2
 8001eae:	d000      	beq.n	8001eb2 <__aeabi_dsub+0x2da>
 8001eb0:	e0aa      	b.n	8002008 <__aeabi_dsub+0x430>
 8001eb2:	4662      	mov	r2, ip
 8001eb4:	0025      	movs	r5, r4
 8001eb6:	9b02      	ldr	r3, [sp, #8]
 8001eb8:	4305      	orrs	r5, r0
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	2f00      	cmp	r7, #0
 8001ebe:	d000      	beq.n	8001ec2 <__aeabi_dsub+0x2ea>
 8001ec0:	e0f5      	b.n	80020ae <__aeabi_dsub+0x4d6>
 8001ec2:	2d00      	cmp	r5, #0
 8001ec4:	d100      	bne.n	8001ec8 <__aeabi_dsub+0x2f0>
 8001ec6:	e16b      	b.n	80021a0 <__aeabi_dsub+0x5c8>
 8001ec8:	2a00      	cmp	r2, #0
 8001eca:	d100      	bne.n	8001ece <__aeabi_dsub+0x2f6>
 8001ecc:	e152      	b.n	8002174 <__aeabi_dsub+0x59c>
 8001ece:	4663      	mov	r3, ip
 8001ed0:	1ac5      	subs	r5, r0, r3
 8001ed2:	9b02      	ldr	r3, [sp, #8]
 8001ed4:	1ae2      	subs	r2, r4, r3
 8001ed6:	42a8      	cmp	r0, r5
 8001ed8:	419b      	sbcs	r3, r3
 8001eda:	425b      	negs	r3, r3
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	021a      	lsls	r2, r3, #8
 8001ee0:	d400      	bmi.n	8001ee4 <__aeabi_dsub+0x30c>
 8001ee2:	e1d5      	b.n	8002290 <__aeabi_dsub+0x6b8>
 8001ee4:	4663      	mov	r3, ip
 8001ee6:	1a1d      	subs	r5, r3, r0
 8001ee8:	45ac      	cmp	ip, r5
 8001eea:	4192      	sbcs	r2, r2
 8001eec:	2601      	movs	r6, #1
 8001eee:	9b02      	ldr	r3, [sp, #8]
 8001ef0:	4252      	negs	r2, r2
 8001ef2:	1b1c      	subs	r4, r3, r4
 8001ef4:	4688      	mov	r8, r1
 8001ef6:	1aa4      	subs	r4, r4, r2
 8001ef8:	400e      	ands	r6, r1
 8001efa:	e6f6      	b.n	8001cea <__aeabi_dsub+0x112>
 8001efc:	4297      	cmp	r7, r2
 8001efe:	d03f      	beq.n	8001f80 <__aeabi_dsub+0x3a8>
 8001f00:	4652      	mov	r2, sl
 8001f02:	2501      	movs	r5, #1
 8001f04:	2a38      	cmp	r2, #56	@ 0x38
 8001f06:	dd00      	ble.n	8001f0a <__aeabi_dsub+0x332>
 8001f08:	e74a      	b.n	8001da0 <__aeabi_dsub+0x1c8>
 8001f0a:	2280      	movs	r2, #128	@ 0x80
 8001f0c:	9b02      	ldr	r3, [sp, #8]
 8001f0e:	0412      	lsls	r2, r2, #16
 8001f10:	4313      	orrs	r3, r2
 8001f12:	9302      	str	r3, [sp, #8]
 8001f14:	e72d      	b.n	8001d72 <__aeabi_dsub+0x19a>
 8001f16:	003c      	movs	r4, r7
 8001f18:	2500      	movs	r5, #0
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	e705      	b.n	8001d2a <__aeabi_dsub+0x152>
 8001f1e:	2307      	movs	r3, #7
 8001f20:	402b      	ands	r3, r5
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d000      	beq.n	8001f28 <__aeabi_dsub+0x350>
 8001f26:	e6e2      	b.n	8001cee <__aeabi_dsub+0x116>
 8001f28:	e06b      	b.n	8002002 <__aeabi_dsub+0x42a>
 8001f2a:	46c0      	nop			@ (mov r8, r8)
 8001f2c:	000007ff 	.word	0x000007ff
 8001f30:	ff7fffff 	.word	0xff7fffff
 8001f34:	fffff801 	.word	0xfffff801
 8001f38:	000007fe 	.word	0x000007fe
 8001f3c:	0028      	movs	r0, r5
 8001f3e:	f7fe fab3 	bl	80004a8 <__clzsi2>
 8001f42:	0003      	movs	r3, r0
 8001f44:	3318      	adds	r3, #24
 8001f46:	2b1f      	cmp	r3, #31
 8001f48:	dc00      	bgt.n	8001f4c <__aeabi_dsub+0x374>
 8001f4a:	e6b4      	b.n	8001cb6 <__aeabi_dsub+0xde>
 8001f4c:	002a      	movs	r2, r5
 8001f4e:	3808      	subs	r0, #8
 8001f50:	4082      	lsls	r2, r0
 8001f52:	429f      	cmp	r7, r3
 8001f54:	dd00      	ble.n	8001f58 <__aeabi_dsub+0x380>
 8001f56:	e0b9      	b.n	80020cc <__aeabi_dsub+0x4f4>
 8001f58:	1bdb      	subs	r3, r3, r7
 8001f5a:	1c58      	adds	r0, r3, #1
 8001f5c:	281f      	cmp	r0, #31
 8001f5e:	dc00      	bgt.n	8001f62 <__aeabi_dsub+0x38a>
 8001f60:	e1a0      	b.n	80022a4 <__aeabi_dsub+0x6cc>
 8001f62:	0015      	movs	r5, r2
 8001f64:	3b1f      	subs	r3, #31
 8001f66:	40dd      	lsrs	r5, r3
 8001f68:	2820      	cmp	r0, #32
 8001f6a:	d005      	beq.n	8001f78 <__aeabi_dsub+0x3a0>
 8001f6c:	2340      	movs	r3, #64	@ 0x40
 8001f6e:	1a1b      	subs	r3, r3, r0
 8001f70:	409a      	lsls	r2, r3
 8001f72:	1e53      	subs	r3, r2, #1
 8001f74:	419a      	sbcs	r2, r3
 8001f76:	4315      	orrs	r5, r2
 8001f78:	2307      	movs	r3, #7
 8001f7a:	2700      	movs	r7, #0
 8001f7c:	402b      	ands	r3, r5
 8001f7e:	e7d0      	b.n	8001f22 <__aeabi_dsub+0x34a>
 8001f80:	08c0      	lsrs	r0, r0, #3
 8001f82:	0762      	lsls	r2, r4, #29
 8001f84:	4302      	orrs	r2, r0
 8001f86:	08e4      	lsrs	r4, r4, #3
 8001f88:	e737      	b.n	8001dfa <__aeabi_dsub+0x222>
 8001f8a:	08ea      	lsrs	r2, r5, #3
 8001f8c:	0763      	lsls	r3, r4, #29
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	4bd3      	ldr	r3, [pc, #844]	@ (80022e0 <__aeabi_dsub+0x708>)
 8001f92:	08e4      	lsrs	r4, r4, #3
 8001f94:	429f      	cmp	r7, r3
 8001f96:	d100      	bne.n	8001f9a <__aeabi_dsub+0x3c2>
 8001f98:	e72f      	b.n	8001dfa <__aeabi_dsub+0x222>
 8001f9a:	0324      	lsls	r4, r4, #12
 8001f9c:	0b25      	lsrs	r5, r4, #12
 8001f9e:	057c      	lsls	r4, r7, #21
 8001fa0:	0d64      	lsrs	r4, r4, #21
 8001fa2:	e6c2      	b.n	8001d2a <__aeabi_dsub+0x152>
 8001fa4:	46ca      	mov	sl, r9
 8001fa6:	0022      	movs	r2, r4
 8001fa8:	4302      	orrs	r2, r0
 8001faa:	d158      	bne.n	800205e <__aeabi_dsub+0x486>
 8001fac:	4663      	mov	r3, ip
 8001fae:	000e      	movs	r6, r1
 8001fb0:	9c02      	ldr	r4, [sp, #8]
 8001fb2:	9303      	str	r3, [sp, #12]
 8001fb4:	9b03      	ldr	r3, [sp, #12]
 8001fb6:	4657      	mov	r7, sl
 8001fb8:	08da      	lsrs	r2, r3, #3
 8001fba:	e7e7      	b.n	8001f8c <__aeabi_dsub+0x3b4>
 8001fbc:	4cc9      	ldr	r4, [pc, #804]	@ (80022e4 <__aeabi_dsub+0x70c>)
 8001fbe:	1aff      	subs	r7, r7, r3
 8001fc0:	4014      	ands	r4, r2
 8001fc2:	e692      	b.n	8001cea <__aeabi_dsub+0x112>
 8001fc4:	4dc8      	ldr	r5, [pc, #800]	@ (80022e8 <__aeabi_dsub+0x710>)
 8001fc6:	1c7a      	adds	r2, r7, #1
 8001fc8:	422a      	tst	r2, r5
 8001fca:	d000      	beq.n	8001fce <__aeabi_dsub+0x3f6>
 8001fcc:	e084      	b.n	80020d8 <__aeabi_dsub+0x500>
 8001fce:	0022      	movs	r2, r4
 8001fd0:	4302      	orrs	r2, r0
 8001fd2:	2f00      	cmp	r7, #0
 8001fd4:	d000      	beq.n	8001fd8 <__aeabi_dsub+0x400>
 8001fd6:	e0ef      	b.n	80021b8 <__aeabi_dsub+0x5e0>
 8001fd8:	2a00      	cmp	r2, #0
 8001fda:	d100      	bne.n	8001fde <__aeabi_dsub+0x406>
 8001fdc:	e0e5      	b.n	80021aa <__aeabi_dsub+0x5d2>
 8001fde:	4662      	mov	r2, ip
 8001fe0:	9902      	ldr	r1, [sp, #8]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	d100      	bne.n	8001fe8 <__aeabi_dsub+0x410>
 8001fe6:	e0c5      	b.n	8002174 <__aeabi_dsub+0x59c>
 8001fe8:	4663      	mov	r3, ip
 8001fea:	18c5      	adds	r5, r0, r3
 8001fec:	468c      	mov	ip, r1
 8001fee:	4285      	cmp	r5, r0
 8001ff0:	4180      	sbcs	r0, r0
 8001ff2:	4464      	add	r4, ip
 8001ff4:	4240      	negs	r0, r0
 8001ff6:	1824      	adds	r4, r4, r0
 8001ff8:	0223      	lsls	r3, r4, #8
 8001ffa:	d502      	bpl.n	8002002 <__aeabi_dsub+0x42a>
 8001ffc:	4bb9      	ldr	r3, [pc, #740]	@ (80022e4 <__aeabi_dsub+0x70c>)
 8001ffe:	3701      	adds	r7, #1
 8002000:	401c      	ands	r4, r3
 8002002:	46ba      	mov	sl, r7
 8002004:	9503      	str	r5, [sp, #12]
 8002006:	e7d5      	b.n	8001fb4 <__aeabi_dsub+0x3dc>
 8002008:	4662      	mov	r2, ip
 800200a:	1a85      	subs	r5, r0, r2
 800200c:	42a8      	cmp	r0, r5
 800200e:	4192      	sbcs	r2, r2
 8002010:	4252      	negs	r2, r2
 8002012:	4691      	mov	r9, r2
 8002014:	9b02      	ldr	r3, [sp, #8]
 8002016:	1ae3      	subs	r3, r4, r3
 8002018:	001a      	movs	r2, r3
 800201a:	464b      	mov	r3, r9
 800201c:	1ad2      	subs	r2, r2, r3
 800201e:	0013      	movs	r3, r2
 8002020:	4691      	mov	r9, r2
 8002022:	021a      	lsls	r2, r3, #8
 8002024:	d46c      	bmi.n	8002100 <__aeabi_dsub+0x528>
 8002026:	464a      	mov	r2, r9
 8002028:	464c      	mov	r4, r9
 800202a:	432a      	orrs	r2, r5
 800202c:	d000      	beq.n	8002030 <__aeabi_dsub+0x458>
 800202e:	e63a      	b.n	8001ca6 <__aeabi_dsub+0xce>
 8002030:	2600      	movs	r6, #0
 8002032:	2400      	movs	r4, #0
 8002034:	2500      	movs	r5, #0
 8002036:	e678      	b.n	8001d2a <__aeabi_dsub+0x152>
 8002038:	9902      	ldr	r1, [sp, #8]
 800203a:	4653      	mov	r3, sl
 800203c:	000d      	movs	r5, r1
 800203e:	3a20      	subs	r2, #32
 8002040:	40d5      	lsrs	r5, r2
 8002042:	2b20      	cmp	r3, #32
 8002044:	d006      	beq.n	8002054 <__aeabi_dsub+0x47c>
 8002046:	2240      	movs	r2, #64	@ 0x40
 8002048:	1ad2      	subs	r2, r2, r3
 800204a:	000b      	movs	r3, r1
 800204c:	4093      	lsls	r3, r2
 800204e:	4662      	mov	r2, ip
 8002050:	431a      	orrs	r2, r3
 8002052:	4693      	mov	fp, r2
 8002054:	465b      	mov	r3, fp
 8002056:	1e5a      	subs	r2, r3, #1
 8002058:	4193      	sbcs	r3, r2
 800205a:	431d      	orrs	r5, r3
 800205c:	e619      	b.n	8001c92 <__aeabi_dsub+0xba>
 800205e:	4653      	mov	r3, sl
 8002060:	1e5a      	subs	r2, r3, #1
 8002062:	2b01      	cmp	r3, #1
 8002064:	d100      	bne.n	8002068 <__aeabi_dsub+0x490>
 8002066:	e0c6      	b.n	80021f6 <__aeabi_dsub+0x61e>
 8002068:	4e9d      	ldr	r6, [pc, #628]	@ (80022e0 <__aeabi_dsub+0x708>)
 800206a:	45b2      	cmp	sl, r6
 800206c:	d100      	bne.n	8002070 <__aeabi_dsub+0x498>
 800206e:	e6bd      	b.n	8001dec <__aeabi_dsub+0x214>
 8002070:	4688      	mov	r8, r1
 8002072:	000e      	movs	r6, r1
 8002074:	2501      	movs	r5, #1
 8002076:	2a38      	cmp	r2, #56	@ 0x38
 8002078:	dc10      	bgt.n	800209c <__aeabi_dsub+0x4c4>
 800207a:	2a1f      	cmp	r2, #31
 800207c:	dc7f      	bgt.n	800217e <__aeabi_dsub+0x5a6>
 800207e:	2120      	movs	r1, #32
 8002080:	0025      	movs	r5, r4
 8002082:	1a89      	subs	r1, r1, r2
 8002084:	0007      	movs	r7, r0
 8002086:	4088      	lsls	r0, r1
 8002088:	408d      	lsls	r5, r1
 800208a:	40d7      	lsrs	r7, r2
 800208c:	40d4      	lsrs	r4, r2
 800208e:	1e41      	subs	r1, r0, #1
 8002090:	4188      	sbcs	r0, r1
 8002092:	9b02      	ldr	r3, [sp, #8]
 8002094:	433d      	orrs	r5, r7
 8002096:	1b1b      	subs	r3, r3, r4
 8002098:	4305      	orrs	r5, r0
 800209a:	9302      	str	r3, [sp, #8]
 800209c:	4662      	mov	r2, ip
 800209e:	1b55      	subs	r5, r2, r5
 80020a0:	45ac      	cmp	ip, r5
 80020a2:	4192      	sbcs	r2, r2
 80020a4:	9b02      	ldr	r3, [sp, #8]
 80020a6:	4252      	negs	r2, r2
 80020a8:	464f      	mov	r7, r9
 80020aa:	1a9c      	subs	r4, r3, r2
 80020ac:	e5f6      	b.n	8001c9c <__aeabi_dsub+0xc4>
 80020ae:	2d00      	cmp	r5, #0
 80020b0:	d000      	beq.n	80020b4 <__aeabi_dsub+0x4dc>
 80020b2:	e0b7      	b.n	8002224 <__aeabi_dsub+0x64c>
 80020b4:	2a00      	cmp	r2, #0
 80020b6:	d100      	bne.n	80020ba <__aeabi_dsub+0x4e2>
 80020b8:	e0f0      	b.n	800229c <__aeabi_dsub+0x6c4>
 80020ba:	2601      	movs	r6, #1
 80020bc:	400e      	ands	r6, r1
 80020be:	4663      	mov	r3, ip
 80020c0:	9802      	ldr	r0, [sp, #8]
 80020c2:	08d9      	lsrs	r1, r3, #3
 80020c4:	0742      	lsls	r2, r0, #29
 80020c6:	430a      	orrs	r2, r1
 80020c8:	08c4      	lsrs	r4, r0, #3
 80020ca:	e696      	b.n	8001dfa <__aeabi_dsub+0x222>
 80020cc:	4c85      	ldr	r4, [pc, #532]	@ (80022e4 <__aeabi_dsub+0x70c>)
 80020ce:	1aff      	subs	r7, r7, r3
 80020d0:	4014      	ands	r4, r2
 80020d2:	0762      	lsls	r2, r4, #29
 80020d4:	08e4      	lsrs	r4, r4, #3
 80020d6:	e760      	b.n	8001f9a <__aeabi_dsub+0x3c2>
 80020d8:	4981      	ldr	r1, [pc, #516]	@ (80022e0 <__aeabi_dsub+0x708>)
 80020da:	428a      	cmp	r2, r1
 80020dc:	d100      	bne.n	80020e0 <__aeabi_dsub+0x508>
 80020de:	e0c9      	b.n	8002274 <__aeabi_dsub+0x69c>
 80020e0:	4663      	mov	r3, ip
 80020e2:	18c1      	adds	r1, r0, r3
 80020e4:	4281      	cmp	r1, r0
 80020e6:	4180      	sbcs	r0, r0
 80020e8:	9b02      	ldr	r3, [sp, #8]
 80020ea:	4240      	negs	r0, r0
 80020ec:	18e3      	adds	r3, r4, r3
 80020ee:	181b      	adds	r3, r3, r0
 80020f0:	07dd      	lsls	r5, r3, #31
 80020f2:	085c      	lsrs	r4, r3, #1
 80020f4:	2307      	movs	r3, #7
 80020f6:	0849      	lsrs	r1, r1, #1
 80020f8:	430d      	orrs	r5, r1
 80020fa:	0017      	movs	r7, r2
 80020fc:	402b      	ands	r3, r5
 80020fe:	e710      	b.n	8001f22 <__aeabi_dsub+0x34a>
 8002100:	4663      	mov	r3, ip
 8002102:	1a1d      	subs	r5, r3, r0
 8002104:	45ac      	cmp	ip, r5
 8002106:	4192      	sbcs	r2, r2
 8002108:	2601      	movs	r6, #1
 800210a:	9b02      	ldr	r3, [sp, #8]
 800210c:	4252      	negs	r2, r2
 800210e:	1b1c      	subs	r4, r3, r4
 8002110:	4688      	mov	r8, r1
 8002112:	1aa4      	subs	r4, r4, r2
 8002114:	400e      	ands	r6, r1
 8002116:	e5c6      	b.n	8001ca6 <__aeabi_dsub+0xce>
 8002118:	4663      	mov	r3, ip
 800211a:	18c5      	adds	r5, r0, r3
 800211c:	9b02      	ldr	r3, [sp, #8]
 800211e:	4285      	cmp	r5, r0
 8002120:	4180      	sbcs	r0, r0
 8002122:	469c      	mov	ip, r3
 8002124:	4240      	negs	r0, r0
 8002126:	4464      	add	r4, ip
 8002128:	1824      	adds	r4, r4, r0
 800212a:	2701      	movs	r7, #1
 800212c:	0223      	lsls	r3, r4, #8
 800212e:	d400      	bmi.n	8002132 <__aeabi_dsub+0x55a>
 8002130:	e6f5      	b.n	8001f1e <__aeabi_dsub+0x346>
 8002132:	2702      	movs	r7, #2
 8002134:	e641      	b.n	8001dba <__aeabi_dsub+0x1e2>
 8002136:	4663      	mov	r3, ip
 8002138:	1ac5      	subs	r5, r0, r3
 800213a:	42a8      	cmp	r0, r5
 800213c:	4180      	sbcs	r0, r0
 800213e:	9b02      	ldr	r3, [sp, #8]
 8002140:	4240      	negs	r0, r0
 8002142:	1ae4      	subs	r4, r4, r3
 8002144:	2701      	movs	r7, #1
 8002146:	1a24      	subs	r4, r4, r0
 8002148:	e5a8      	b.n	8001c9c <__aeabi_dsub+0xc4>
 800214a:	9d02      	ldr	r5, [sp, #8]
 800214c:	4652      	mov	r2, sl
 800214e:	002b      	movs	r3, r5
 8002150:	3a20      	subs	r2, #32
 8002152:	40d3      	lsrs	r3, r2
 8002154:	0019      	movs	r1, r3
 8002156:	4653      	mov	r3, sl
 8002158:	2b20      	cmp	r3, #32
 800215a:	d006      	beq.n	800216a <__aeabi_dsub+0x592>
 800215c:	2240      	movs	r2, #64	@ 0x40
 800215e:	1ad2      	subs	r2, r2, r3
 8002160:	002b      	movs	r3, r5
 8002162:	4093      	lsls	r3, r2
 8002164:	4662      	mov	r2, ip
 8002166:	431a      	orrs	r2, r3
 8002168:	4693      	mov	fp, r2
 800216a:	465d      	mov	r5, fp
 800216c:	1e6b      	subs	r3, r5, #1
 800216e:	419d      	sbcs	r5, r3
 8002170:	430d      	orrs	r5, r1
 8002172:	e615      	b.n	8001da0 <__aeabi_dsub+0x1c8>
 8002174:	0762      	lsls	r2, r4, #29
 8002176:	08c0      	lsrs	r0, r0, #3
 8002178:	4302      	orrs	r2, r0
 800217a:	08e4      	lsrs	r4, r4, #3
 800217c:	e70d      	b.n	8001f9a <__aeabi_dsub+0x3c2>
 800217e:	0011      	movs	r1, r2
 8002180:	0027      	movs	r7, r4
 8002182:	3920      	subs	r1, #32
 8002184:	40cf      	lsrs	r7, r1
 8002186:	2a20      	cmp	r2, #32
 8002188:	d005      	beq.n	8002196 <__aeabi_dsub+0x5be>
 800218a:	2140      	movs	r1, #64	@ 0x40
 800218c:	1a8a      	subs	r2, r1, r2
 800218e:	4094      	lsls	r4, r2
 8002190:	0025      	movs	r5, r4
 8002192:	4305      	orrs	r5, r0
 8002194:	9503      	str	r5, [sp, #12]
 8002196:	9d03      	ldr	r5, [sp, #12]
 8002198:	1e6a      	subs	r2, r5, #1
 800219a:	4195      	sbcs	r5, r2
 800219c:	433d      	orrs	r5, r7
 800219e:	e77d      	b.n	800209c <__aeabi_dsub+0x4c4>
 80021a0:	2a00      	cmp	r2, #0
 80021a2:	d100      	bne.n	80021a6 <__aeabi_dsub+0x5ce>
 80021a4:	e744      	b.n	8002030 <__aeabi_dsub+0x458>
 80021a6:	2601      	movs	r6, #1
 80021a8:	400e      	ands	r6, r1
 80021aa:	4663      	mov	r3, ip
 80021ac:	08d9      	lsrs	r1, r3, #3
 80021ae:	9b02      	ldr	r3, [sp, #8]
 80021b0:	075a      	lsls	r2, r3, #29
 80021b2:	430a      	orrs	r2, r1
 80021b4:	08dc      	lsrs	r4, r3, #3
 80021b6:	e6f0      	b.n	8001f9a <__aeabi_dsub+0x3c2>
 80021b8:	2a00      	cmp	r2, #0
 80021ba:	d028      	beq.n	800220e <__aeabi_dsub+0x636>
 80021bc:	4662      	mov	r2, ip
 80021be:	9f02      	ldr	r7, [sp, #8]
 80021c0:	08c0      	lsrs	r0, r0, #3
 80021c2:	433a      	orrs	r2, r7
 80021c4:	d100      	bne.n	80021c8 <__aeabi_dsub+0x5f0>
 80021c6:	e6dc      	b.n	8001f82 <__aeabi_dsub+0x3aa>
 80021c8:	0762      	lsls	r2, r4, #29
 80021ca:	4310      	orrs	r0, r2
 80021cc:	2280      	movs	r2, #128	@ 0x80
 80021ce:	08e4      	lsrs	r4, r4, #3
 80021d0:	0312      	lsls	r2, r2, #12
 80021d2:	4214      	tst	r4, r2
 80021d4:	d009      	beq.n	80021ea <__aeabi_dsub+0x612>
 80021d6:	08fd      	lsrs	r5, r7, #3
 80021d8:	4215      	tst	r5, r2
 80021da:	d106      	bne.n	80021ea <__aeabi_dsub+0x612>
 80021dc:	4663      	mov	r3, ip
 80021de:	2601      	movs	r6, #1
 80021e0:	002c      	movs	r4, r5
 80021e2:	08d8      	lsrs	r0, r3, #3
 80021e4:	077b      	lsls	r3, r7, #29
 80021e6:	4318      	orrs	r0, r3
 80021e8:	400e      	ands	r6, r1
 80021ea:	0f42      	lsrs	r2, r0, #29
 80021ec:	00c0      	lsls	r0, r0, #3
 80021ee:	08c0      	lsrs	r0, r0, #3
 80021f0:	0752      	lsls	r2, r2, #29
 80021f2:	4302      	orrs	r2, r0
 80021f4:	e601      	b.n	8001dfa <__aeabi_dsub+0x222>
 80021f6:	4663      	mov	r3, ip
 80021f8:	1a1d      	subs	r5, r3, r0
 80021fa:	45ac      	cmp	ip, r5
 80021fc:	4192      	sbcs	r2, r2
 80021fe:	9b02      	ldr	r3, [sp, #8]
 8002200:	4252      	negs	r2, r2
 8002202:	1b1c      	subs	r4, r3, r4
 8002204:	000e      	movs	r6, r1
 8002206:	4688      	mov	r8, r1
 8002208:	2701      	movs	r7, #1
 800220a:	1aa4      	subs	r4, r4, r2
 800220c:	e546      	b.n	8001c9c <__aeabi_dsub+0xc4>
 800220e:	4663      	mov	r3, ip
 8002210:	08d9      	lsrs	r1, r3, #3
 8002212:	9b02      	ldr	r3, [sp, #8]
 8002214:	075a      	lsls	r2, r3, #29
 8002216:	430a      	orrs	r2, r1
 8002218:	08dc      	lsrs	r4, r3, #3
 800221a:	e5ee      	b.n	8001dfa <__aeabi_dsub+0x222>
 800221c:	4663      	mov	r3, ip
 800221e:	9c02      	ldr	r4, [sp, #8]
 8002220:	9303      	str	r3, [sp, #12]
 8002222:	e6c7      	b.n	8001fb4 <__aeabi_dsub+0x3dc>
 8002224:	08c0      	lsrs	r0, r0, #3
 8002226:	2a00      	cmp	r2, #0
 8002228:	d100      	bne.n	800222c <__aeabi_dsub+0x654>
 800222a:	e6aa      	b.n	8001f82 <__aeabi_dsub+0x3aa>
 800222c:	0762      	lsls	r2, r4, #29
 800222e:	4310      	orrs	r0, r2
 8002230:	2280      	movs	r2, #128	@ 0x80
 8002232:	08e4      	lsrs	r4, r4, #3
 8002234:	0312      	lsls	r2, r2, #12
 8002236:	4214      	tst	r4, r2
 8002238:	d0d7      	beq.n	80021ea <__aeabi_dsub+0x612>
 800223a:	9f02      	ldr	r7, [sp, #8]
 800223c:	08fd      	lsrs	r5, r7, #3
 800223e:	4215      	tst	r5, r2
 8002240:	d1d3      	bne.n	80021ea <__aeabi_dsub+0x612>
 8002242:	4663      	mov	r3, ip
 8002244:	2601      	movs	r6, #1
 8002246:	08d8      	lsrs	r0, r3, #3
 8002248:	077b      	lsls	r3, r7, #29
 800224a:	002c      	movs	r4, r5
 800224c:	4318      	orrs	r0, r3
 800224e:	400e      	ands	r6, r1
 8002250:	e7cb      	b.n	80021ea <__aeabi_dsub+0x612>
 8002252:	000a      	movs	r2, r1
 8002254:	0027      	movs	r7, r4
 8002256:	3a20      	subs	r2, #32
 8002258:	40d7      	lsrs	r7, r2
 800225a:	2920      	cmp	r1, #32
 800225c:	d005      	beq.n	800226a <__aeabi_dsub+0x692>
 800225e:	2240      	movs	r2, #64	@ 0x40
 8002260:	1a52      	subs	r2, r2, r1
 8002262:	4094      	lsls	r4, r2
 8002264:	0025      	movs	r5, r4
 8002266:	4305      	orrs	r5, r0
 8002268:	9503      	str	r5, [sp, #12]
 800226a:	9d03      	ldr	r5, [sp, #12]
 800226c:	1e6a      	subs	r2, r5, #1
 800226e:	4195      	sbcs	r5, r2
 8002270:	432f      	orrs	r7, r5
 8002272:	e610      	b.n	8001e96 <__aeabi_dsub+0x2be>
 8002274:	0014      	movs	r4, r2
 8002276:	2500      	movs	r5, #0
 8002278:	2200      	movs	r2, #0
 800227a:	e556      	b.n	8001d2a <__aeabi_dsub+0x152>
 800227c:	9b02      	ldr	r3, [sp, #8]
 800227e:	4460      	add	r0, ip
 8002280:	4699      	mov	r9, r3
 8002282:	4560      	cmp	r0, ip
 8002284:	4192      	sbcs	r2, r2
 8002286:	444c      	add	r4, r9
 8002288:	4252      	negs	r2, r2
 800228a:	0005      	movs	r5, r0
 800228c:	18a4      	adds	r4, r4, r2
 800228e:	e74c      	b.n	800212a <__aeabi_dsub+0x552>
 8002290:	001a      	movs	r2, r3
 8002292:	001c      	movs	r4, r3
 8002294:	432a      	orrs	r2, r5
 8002296:	d000      	beq.n	800229a <__aeabi_dsub+0x6c2>
 8002298:	e6b3      	b.n	8002002 <__aeabi_dsub+0x42a>
 800229a:	e6c9      	b.n	8002030 <__aeabi_dsub+0x458>
 800229c:	2480      	movs	r4, #128	@ 0x80
 800229e:	2600      	movs	r6, #0
 80022a0:	0324      	lsls	r4, r4, #12
 80022a2:	e5ae      	b.n	8001e02 <__aeabi_dsub+0x22a>
 80022a4:	2120      	movs	r1, #32
 80022a6:	2500      	movs	r5, #0
 80022a8:	1a09      	subs	r1, r1, r0
 80022aa:	e517      	b.n	8001cdc <__aeabi_dsub+0x104>
 80022ac:	2200      	movs	r2, #0
 80022ae:	2500      	movs	r5, #0
 80022b0:	4c0b      	ldr	r4, [pc, #44]	@ (80022e0 <__aeabi_dsub+0x708>)
 80022b2:	e53a      	b.n	8001d2a <__aeabi_dsub+0x152>
 80022b4:	2d00      	cmp	r5, #0
 80022b6:	d100      	bne.n	80022ba <__aeabi_dsub+0x6e2>
 80022b8:	e5f6      	b.n	8001ea8 <__aeabi_dsub+0x2d0>
 80022ba:	464b      	mov	r3, r9
 80022bc:	1bda      	subs	r2, r3, r7
 80022be:	4692      	mov	sl, r2
 80022c0:	2f00      	cmp	r7, #0
 80022c2:	d100      	bne.n	80022c6 <__aeabi_dsub+0x6ee>
 80022c4:	e66f      	b.n	8001fa6 <__aeabi_dsub+0x3ce>
 80022c6:	2a38      	cmp	r2, #56	@ 0x38
 80022c8:	dc05      	bgt.n	80022d6 <__aeabi_dsub+0x6fe>
 80022ca:	2680      	movs	r6, #128	@ 0x80
 80022cc:	0436      	lsls	r6, r6, #16
 80022ce:	4334      	orrs	r4, r6
 80022d0:	4688      	mov	r8, r1
 80022d2:	000e      	movs	r6, r1
 80022d4:	e6d1      	b.n	800207a <__aeabi_dsub+0x4a2>
 80022d6:	4688      	mov	r8, r1
 80022d8:	000e      	movs	r6, r1
 80022da:	2501      	movs	r5, #1
 80022dc:	e6de      	b.n	800209c <__aeabi_dsub+0x4c4>
 80022de:	46c0      	nop			@ (mov r8, r8)
 80022e0:	000007ff 	.word	0x000007ff
 80022e4:	ff7fffff 	.word	0xff7fffff
 80022e8:	000007fe 	.word	0x000007fe
 80022ec:	2d00      	cmp	r5, #0
 80022ee:	d100      	bne.n	80022f2 <__aeabi_dsub+0x71a>
 80022f0:	e668      	b.n	8001fc4 <__aeabi_dsub+0x3ec>
 80022f2:	464b      	mov	r3, r9
 80022f4:	1bd9      	subs	r1, r3, r7
 80022f6:	2f00      	cmp	r7, #0
 80022f8:	d101      	bne.n	80022fe <__aeabi_dsub+0x726>
 80022fa:	468a      	mov	sl, r1
 80022fc:	e5a7      	b.n	8001e4e <__aeabi_dsub+0x276>
 80022fe:	2701      	movs	r7, #1
 8002300:	2938      	cmp	r1, #56	@ 0x38
 8002302:	dd00      	ble.n	8002306 <__aeabi_dsub+0x72e>
 8002304:	e5c7      	b.n	8001e96 <__aeabi_dsub+0x2be>
 8002306:	2280      	movs	r2, #128	@ 0x80
 8002308:	0412      	lsls	r2, r2, #16
 800230a:	4314      	orrs	r4, r2
 800230c:	e5af      	b.n	8001e6e <__aeabi_dsub+0x296>
 800230e:	46c0      	nop			@ (mov r8, r8)

08002310 <__aeabi_dcmpun>:
 8002310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002312:	46c6      	mov	lr, r8
 8002314:	031e      	lsls	r6, r3, #12
 8002316:	0b36      	lsrs	r6, r6, #12
 8002318:	46b0      	mov	r8, r6
 800231a:	4e0d      	ldr	r6, [pc, #52]	@ (8002350 <__aeabi_dcmpun+0x40>)
 800231c:	030c      	lsls	r4, r1, #12
 800231e:	004d      	lsls	r5, r1, #1
 8002320:	005f      	lsls	r7, r3, #1
 8002322:	b500      	push	{lr}
 8002324:	0b24      	lsrs	r4, r4, #12
 8002326:	0d6d      	lsrs	r5, r5, #21
 8002328:	0d7f      	lsrs	r7, r7, #21
 800232a:	42b5      	cmp	r5, r6
 800232c:	d00b      	beq.n	8002346 <__aeabi_dcmpun+0x36>
 800232e:	4908      	ldr	r1, [pc, #32]	@ (8002350 <__aeabi_dcmpun+0x40>)
 8002330:	2000      	movs	r0, #0
 8002332:	428f      	cmp	r7, r1
 8002334:	d104      	bne.n	8002340 <__aeabi_dcmpun+0x30>
 8002336:	4646      	mov	r6, r8
 8002338:	4316      	orrs	r6, r2
 800233a:	0030      	movs	r0, r6
 800233c:	1e43      	subs	r3, r0, #1
 800233e:	4198      	sbcs	r0, r3
 8002340:	bc80      	pop	{r7}
 8002342:	46b8      	mov	r8, r7
 8002344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002346:	4304      	orrs	r4, r0
 8002348:	2001      	movs	r0, #1
 800234a:	2c00      	cmp	r4, #0
 800234c:	d1f8      	bne.n	8002340 <__aeabi_dcmpun+0x30>
 800234e:	e7ee      	b.n	800232e <__aeabi_dcmpun+0x1e>
 8002350:	000007ff 	.word	0x000007ff

08002354 <__aeabi_d2iz>:
 8002354:	000b      	movs	r3, r1
 8002356:	0002      	movs	r2, r0
 8002358:	b570      	push	{r4, r5, r6, lr}
 800235a:	4d16      	ldr	r5, [pc, #88]	@ (80023b4 <__aeabi_d2iz+0x60>)
 800235c:	030c      	lsls	r4, r1, #12
 800235e:	b082      	sub	sp, #8
 8002360:	0049      	lsls	r1, r1, #1
 8002362:	2000      	movs	r0, #0
 8002364:	9200      	str	r2, [sp, #0]
 8002366:	9301      	str	r3, [sp, #4]
 8002368:	0b24      	lsrs	r4, r4, #12
 800236a:	0d49      	lsrs	r1, r1, #21
 800236c:	0fde      	lsrs	r6, r3, #31
 800236e:	42a9      	cmp	r1, r5
 8002370:	dd04      	ble.n	800237c <__aeabi_d2iz+0x28>
 8002372:	4811      	ldr	r0, [pc, #68]	@ (80023b8 <__aeabi_d2iz+0x64>)
 8002374:	4281      	cmp	r1, r0
 8002376:	dd03      	ble.n	8002380 <__aeabi_d2iz+0x2c>
 8002378:	4b10      	ldr	r3, [pc, #64]	@ (80023bc <__aeabi_d2iz+0x68>)
 800237a:	18f0      	adds	r0, r6, r3
 800237c:	b002      	add	sp, #8
 800237e:	bd70      	pop	{r4, r5, r6, pc}
 8002380:	2080      	movs	r0, #128	@ 0x80
 8002382:	0340      	lsls	r0, r0, #13
 8002384:	4320      	orrs	r0, r4
 8002386:	4c0e      	ldr	r4, [pc, #56]	@ (80023c0 <__aeabi_d2iz+0x6c>)
 8002388:	1a64      	subs	r4, r4, r1
 800238a:	2c1f      	cmp	r4, #31
 800238c:	dd08      	ble.n	80023a0 <__aeabi_d2iz+0x4c>
 800238e:	4b0d      	ldr	r3, [pc, #52]	@ (80023c4 <__aeabi_d2iz+0x70>)
 8002390:	1a5b      	subs	r3, r3, r1
 8002392:	40d8      	lsrs	r0, r3
 8002394:	0003      	movs	r3, r0
 8002396:	4258      	negs	r0, r3
 8002398:	2e00      	cmp	r6, #0
 800239a:	d1ef      	bne.n	800237c <__aeabi_d2iz+0x28>
 800239c:	0018      	movs	r0, r3
 800239e:	e7ed      	b.n	800237c <__aeabi_d2iz+0x28>
 80023a0:	4b09      	ldr	r3, [pc, #36]	@ (80023c8 <__aeabi_d2iz+0x74>)
 80023a2:	9a00      	ldr	r2, [sp, #0]
 80023a4:	469c      	mov	ip, r3
 80023a6:	0003      	movs	r3, r0
 80023a8:	4461      	add	r1, ip
 80023aa:	408b      	lsls	r3, r1
 80023ac:	40e2      	lsrs	r2, r4
 80023ae:	4313      	orrs	r3, r2
 80023b0:	e7f1      	b.n	8002396 <__aeabi_d2iz+0x42>
 80023b2:	46c0      	nop			@ (mov r8, r8)
 80023b4:	000003fe 	.word	0x000003fe
 80023b8:	0000041d 	.word	0x0000041d
 80023bc:	7fffffff 	.word	0x7fffffff
 80023c0:	00000433 	.word	0x00000433
 80023c4:	00000413 	.word	0x00000413
 80023c8:	fffffbed 	.word	0xfffffbed

080023cc <__aeabi_i2d>:
 80023cc:	b570      	push	{r4, r5, r6, lr}
 80023ce:	2800      	cmp	r0, #0
 80023d0:	d016      	beq.n	8002400 <__aeabi_i2d+0x34>
 80023d2:	17c3      	asrs	r3, r0, #31
 80023d4:	18c5      	adds	r5, r0, r3
 80023d6:	405d      	eors	r5, r3
 80023d8:	0fc4      	lsrs	r4, r0, #31
 80023da:	0028      	movs	r0, r5
 80023dc:	f7fe f864 	bl	80004a8 <__clzsi2>
 80023e0:	4b10      	ldr	r3, [pc, #64]	@ (8002424 <__aeabi_i2d+0x58>)
 80023e2:	1a1b      	subs	r3, r3, r0
 80023e4:	055b      	lsls	r3, r3, #21
 80023e6:	0d5b      	lsrs	r3, r3, #21
 80023e8:	280a      	cmp	r0, #10
 80023ea:	dc14      	bgt.n	8002416 <__aeabi_i2d+0x4a>
 80023ec:	0002      	movs	r2, r0
 80023ee:	002e      	movs	r6, r5
 80023f0:	3215      	adds	r2, #21
 80023f2:	4096      	lsls	r6, r2
 80023f4:	220b      	movs	r2, #11
 80023f6:	1a12      	subs	r2, r2, r0
 80023f8:	40d5      	lsrs	r5, r2
 80023fa:	032d      	lsls	r5, r5, #12
 80023fc:	0b2d      	lsrs	r5, r5, #12
 80023fe:	e003      	b.n	8002408 <__aeabi_i2d+0x3c>
 8002400:	2400      	movs	r4, #0
 8002402:	2300      	movs	r3, #0
 8002404:	2500      	movs	r5, #0
 8002406:	2600      	movs	r6, #0
 8002408:	051b      	lsls	r3, r3, #20
 800240a:	432b      	orrs	r3, r5
 800240c:	07e4      	lsls	r4, r4, #31
 800240e:	4323      	orrs	r3, r4
 8002410:	0030      	movs	r0, r6
 8002412:	0019      	movs	r1, r3
 8002414:	bd70      	pop	{r4, r5, r6, pc}
 8002416:	380b      	subs	r0, #11
 8002418:	4085      	lsls	r5, r0
 800241a:	032d      	lsls	r5, r5, #12
 800241c:	2600      	movs	r6, #0
 800241e:	0b2d      	lsrs	r5, r5, #12
 8002420:	e7f2      	b.n	8002408 <__aeabi_i2d+0x3c>
 8002422:	46c0      	nop			@ (mov r8, r8)
 8002424:	0000041e 	.word	0x0000041e

08002428 <__aeabi_ui2d>:
 8002428:	b510      	push	{r4, lr}
 800242a:	1e04      	subs	r4, r0, #0
 800242c:	d010      	beq.n	8002450 <__aeabi_ui2d+0x28>
 800242e:	f7fe f83b 	bl	80004a8 <__clzsi2>
 8002432:	4b0e      	ldr	r3, [pc, #56]	@ (800246c <__aeabi_ui2d+0x44>)
 8002434:	1a1b      	subs	r3, r3, r0
 8002436:	055b      	lsls	r3, r3, #21
 8002438:	0d5b      	lsrs	r3, r3, #21
 800243a:	280a      	cmp	r0, #10
 800243c:	dc0f      	bgt.n	800245e <__aeabi_ui2d+0x36>
 800243e:	220b      	movs	r2, #11
 8002440:	0021      	movs	r1, r4
 8002442:	1a12      	subs	r2, r2, r0
 8002444:	40d1      	lsrs	r1, r2
 8002446:	3015      	adds	r0, #21
 8002448:	030a      	lsls	r2, r1, #12
 800244a:	4084      	lsls	r4, r0
 800244c:	0b12      	lsrs	r2, r2, #12
 800244e:	e001      	b.n	8002454 <__aeabi_ui2d+0x2c>
 8002450:	2300      	movs	r3, #0
 8002452:	2200      	movs	r2, #0
 8002454:	051b      	lsls	r3, r3, #20
 8002456:	4313      	orrs	r3, r2
 8002458:	0020      	movs	r0, r4
 800245a:	0019      	movs	r1, r3
 800245c:	bd10      	pop	{r4, pc}
 800245e:	0022      	movs	r2, r4
 8002460:	380b      	subs	r0, #11
 8002462:	4082      	lsls	r2, r0
 8002464:	0312      	lsls	r2, r2, #12
 8002466:	2400      	movs	r4, #0
 8002468:	0b12      	lsrs	r2, r2, #12
 800246a:	e7f3      	b.n	8002454 <__aeabi_ui2d+0x2c>
 800246c:	0000041e 	.word	0x0000041e

08002470 <__clzdi2>:
 8002470:	b510      	push	{r4, lr}
 8002472:	2900      	cmp	r1, #0
 8002474:	d103      	bne.n	800247e <__clzdi2+0xe>
 8002476:	f7fe f817 	bl	80004a8 <__clzsi2>
 800247a:	3020      	adds	r0, #32
 800247c:	e002      	b.n	8002484 <__clzdi2+0x14>
 800247e:	0008      	movs	r0, r1
 8002480:	f7fe f812 	bl	80004a8 <__clzsi2>
 8002484:	bd10      	pop	{r4, pc}
 8002486:	46c0      	nop			@ (mov r8, r8)

08002488 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2201      	movs	r2, #1
 8002496:	4013      	ands	r3, r2
 8002498:	2b01      	cmp	r3, #1
 800249a:	d101      	bne.n	80024a0 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800249c:	2301      	movs	r3, #1
 800249e:	e000      	b.n	80024a2 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	0018      	movs	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	b002      	add	sp, #8
 80024a8:	bd80      	pop	{r7, pc}

080024aa <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2202      	movs	r2, #2
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d101      	bne.n	80024c2 <LL_SPI_IsActiveFlag_TXE+0x18>
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	0018      	movs	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b002      	add	sp, #8
 80024ca:	bd80      	pop	{r7, pc}

080024cc <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	330c      	adds	r3, #12
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	b2db      	uxtb	r3, r3
}
 80024dc:	0018      	movs	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	b002      	add	sp, #8
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	000a      	movs	r2, r1
 80024ee:	1cfb      	adds	r3, r7, #3
 80024f0:	701a      	strb	r2, [r3, #0]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	330c      	adds	r3, #12
 80024f6:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	1cfa      	adds	r2, r7, #3
 80024fc:	7812      	ldrb	r2, [r2, #0]
 80024fe:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8002500:	46c0      	nop			@ (mov r8, r8)
 8002502:	46bd      	mov	sp, r7
 8002504:	b004      	add	sp, #16
 8002506:	bd80      	pop	{r7, pc}

08002508 <spi_select_slave>:
 * @brief True if we've set the RTC from the cloud time
 */
// bool timeSet = false;

static inline void spi_select_slave(bool select)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	0002      	movs	r2, r0
 8002510:	1dfb      	adds	r3, r7, #7
 8002512:	701a      	strb	r2, [r3, #0]
    if (select)
 8002514:	1dfb      	adds	r3, r7, #7
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d004      	beq.n	8002526 <spi_select_slave+0x1e>
    {
        RTC_H();
 800251c:	4b06      	ldr	r3, [pc, #24]	@ (8002538 <spi_select_slave+0x30>)
 800251e:	2280      	movs	r2, #128	@ 0x80
 8002520:	01d2      	lsls	r2, r2, #7
 8002522:	619a      	str	r2, [r3, #24]
    }
    else
    {
        RTC_L();
    }
}
 8002524:	e003      	b.n	800252e <spi_select_slave+0x26>
        RTC_L();
 8002526:	4b04      	ldr	r3, [pc, #16]	@ (8002538 <spi_select_slave+0x30>)
 8002528:	2280      	movs	r2, #128	@ 0x80
 800252a:	05d2      	lsls	r2, r2, #23
 800252c:	619a      	str	r2, [r3, #24]
}
 800252e:	46c0      	nop			@ (mov r8, r8)
 8002530:	46bd      	mov	sp, r7
 8002532:	b002      	add	sp, #8
 8002534:	bd80      	pop	{r7, pc}
 8002536:	46c0      	nop			@ (mov r8, r8)
 8002538:	50000400 	.word	0x50000400

0800253c <resetConfig>:

    return (value & REG_OSC_STATUS_OMODE) != 0;
}

bool resetConfig(uint32_t flags)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
    printf("resetConfig(0x%08lx)\n", flags);
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	4b3f      	ldr	r3, [pc, #252]	@ (8002644 <resetConfig+0x108>)
 8002548:	0011      	movs	r1, r2
 800254a:	0018      	movs	r0, r3
 800254c:	f003 f88e 	bl	800566c <printf_>

    // Reset configuration registers to default values
    write_rtc_register(REG_STATUS, REG_STATUS_DEFAULT);
 8002550:	230f      	movs	r3, #15
 8002552:	2200      	movs	r2, #0
 8002554:	0011      	movs	r1, r2
 8002556:	0018      	movs	r0, r3
 8002558:	f000 fc54 	bl	8002e04 <write_rtc_register>
    write_rtc_register(REG_CTRL_1, REG_CTRL_1_DEFAULT);
 800255c:	2310      	movs	r3, #16
 800255e:	2212      	movs	r2, #18
 8002560:	0011      	movs	r1, r2
 8002562:	0018      	movs	r0, r3
 8002564:	f000 fc4e 	bl	8002e04 <write_rtc_register>
    write_rtc_register(REG_CTRL_2, REG_CTRL_2_DEFAULT);
 8002568:	2311      	movs	r3, #17
 800256a:	223c      	movs	r2, #60	@ 0x3c
 800256c:	0011      	movs	r1, r2
 800256e:	0018      	movs	r0, r3
 8002570:	f000 fc48 	bl	8002e04 <write_rtc_register>
    write_rtc_register(REG_INT_MASK, REG_INT_MASK_DEFAULT);
 8002574:	2312      	movs	r3, #18
 8002576:	22e0      	movs	r2, #224	@ 0xe0
 8002578:	0011      	movs	r1, r2
 800257a:	0018      	movs	r0, r3
 800257c:	f000 fc42 	bl	8002e04 <write_rtc_register>
    write_rtc_register(REG_SQW, REG_SQW_DEFAULT);
 8002580:	2313      	movs	r3, #19
 8002582:	2226      	movs	r2, #38	@ 0x26
 8002584:	0011      	movs	r1, r2
 8002586:	0018      	movs	r0, r3
 8002588:	f000 fc3c 	bl	8002e04 <write_rtc_register>
    write_rtc_register(REG_SLEEP_CTRL, REG_SLEEP_CTRL_DEFAULT);
 800258c:	2317      	movs	r3, #23
 800258e:	2200      	movs	r2, #0
 8002590:	0011      	movs	r1, r2
 8002592:	0018      	movs	r0, r3
 8002594:	f000 fc36 	bl	8002e04 <write_rtc_register>

    if ((flags & RESET_PRESERVE_REPEATING_TIMER) != 0)
 8002598:	2201      	movs	r2, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4013      	ands	r3, r2
 800259e:	d010      	beq.n	80025c2 <resetConfig+0x86>
    {
        maskRegister(REG_TIMER_CTRL, ~REG_TIMER_CTRL_RPT_MASK, REG_TIMER_CTRL_DEFAULT & ~REG_TIMER_CTRL_RPT_MASK, false);
 80025a0:	2018      	movs	r0, #24
 80025a2:	231c      	movs	r3, #28
 80025a4:	43db      	mvns	r3, r3
 80025a6:	b2d9      	uxtb	r1, r3
 80025a8:	231c      	movs	r3, #28
 80025aa:	b25b      	sxtb	r3, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	b25b      	sxtb	r3, r3
 80025b0:	2223      	movs	r2, #35	@ 0x23
 80025b2:	b252      	sxtb	r2, r2
 80025b4:	4013      	ands	r3, r2
 80025b6:	b25b      	sxtb	r3, r3
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	2300      	movs	r3, #0
 80025bc:	f000 fa54 	bl	8002a68 <maskRegister>
 80025c0:	e005      	b.n	80025ce <resetConfig+0x92>
    }
    else
    {
        write_rtc_register(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
 80025c2:	2318      	movs	r3, #24
 80025c4:	2223      	movs	r2, #35	@ 0x23
 80025c6:	0011      	movs	r1, r2
 80025c8:	0018      	movs	r0, r3
 80025ca:	f000 fc1b 	bl	8002e04 <write_rtc_register>
    }

    write_rtc_register(REG_TIMER, REG_TIMER_DEFAULT);
 80025ce:	2319      	movs	r3, #25
 80025d0:	2200      	movs	r2, #0
 80025d2:	0011      	movs	r1, r2
 80025d4:	0018      	movs	r0, r3
 80025d6:	f000 fc15 	bl	8002e04 <write_rtc_register>
    write_rtc_register(REG_TIMER_INITIAL, REG_TIMER_INITIAL_DEFAULT);
 80025da:	231a      	movs	r3, #26
 80025dc:	2200      	movs	r2, #0
 80025de:	0011      	movs	r1, r2
 80025e0:	0018      	movs	r0, r3
 80025e2:	f000 fc0f 	bl	8002e04 <write_rtc_register>
    write_rtc_register(REG_WDT, REG_WDT_DEFAULT);
 80025e6:	231b      	movs	r3, #27
 80025e8:	2200      	movs	r2, #0
 80025ea:	0011      	movs	r1, r2
 80025ec:	0018      	movs	r0, r3
 80025ee:	f000 fc09 	bl	8002e04 <write_rtc_register>

    uint8_t oscCtrl = REG_OSC_CTRL_DEFAULT;
 80025f2:	200f      	movs	r0, #15
 80025f4:	183b      	adds	r3, r7, r0
 80025f6:	2200      	movs	r2, #0
 80025f8:	701a      	strb	r2, [r3, #0]
    if ((flags & RESET_DISABLE_XT) != 0)
 80025fa:	2202      	movs	r2, #2
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4013      	ands	r3, r2
 8002600:	d008      	beq.n	8002614 <resetConfig+0xd8>
    {
        // If disabling XT oscillator, set OSEL to 1 (RC oscillator)
        // Also enable FOS so if the XT oscillator fails, it will switch to RC (just in case)
        // and ACAL to 0 (however REG_OSC_CTRL_DEFAULT already sets ACAL to 0)
        oscCtrl |= REG_OSC_CTRL_OSEL | REG_OSC_CTRL_FOS;
 8002602:	2280      	movs	r2, #128	@ 0x80
 8002604:	2308      	movs	r3, #8
 8002606:	4313      	orrs	r3, r2
 8002608:	b2d9      	uxtb	r1, r3
 800260a:	183b      	adds	r3, r7, r0
 800260c:	183a      	adds	r2, r7, r0
 800260e:	7812      	ldrb	r2, [r2, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	701a      	strb	r2, [r3, #0]
    }
    // write_rtc_register(REG_OSC_CTRL, oscCtrl);
    // write_rtc_register(REG_TRICKLE, REG_TRICKLE_DEFAULT);
    write_rtc_register(REG_BREF_CTRL, REG_BREF_CTRL_DEFAULT);
 8002614:	2321      	movs	r3, #33	@ 0x21
 8002616:	22f0      	movs	r2, #240	@ 0xf0
 8002618:	0011      	movs	r1, r2
 800261a:	0018      	movs	r0, r3
 800261c:	f000 fbf2 	bl	8002e04 <write_rtc_register>
    write_rtc_register(REG_AFCTRL, REG_AFCTRL_DEFAULT);
 8002620:	2326      	movs	r3, #38	@ 0x26
 8002622:	2200      	movs	r2, #0
 8002624:	0011      	movs	r1, r2
 8002626:	0018      	movs	r0, r3
 8002628:	f000 fbec 	bl	8002e04 <write_rtc_register>
    // write_rtc_register(REG_BATMODE_IO, REG_BATMODE_IO_DEFAULT);
    write_rtc_register(REG_OCTRL, REG_OCTRL_DEFAULT);
 800262c:	2330      	movs	r3, #48	@ 0x30
 800262e:	2200      	movs	r2, #0
 8002630:	0011      	movs	r1, r2
 8002632:	0018      	movs	r0, r3
 8002634:	f000 fbe6 	bl	8002e04 <write_rtc_register>

    return true;
 8002638:	2301      	movs	r3, #1
}
 800263a:	0018      	movs	r0, r3
 800263c:	46bd      	mov	sp, r7
 800263e:	b004      	add	sp, #16
 8002640:	bd80      	pop	{r7, pc}
 8002642:	46c0      	nop			@ (mov r8, r8)
 8002644:	0800f9a4 	.word	0x0800f9a4

08002648 <setWDT>:

    return true;
}

bool setWDT(int seconds)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
    bool bResult = false;
 8002650:	230f      	movs	r3, #15
 8002652:	18fb      	adds	r3, r7, r3
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
    // printf("setWDT %d\n", seconds);

    if (seconds < 0)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	da02      	bge.n	8002664 <setWDT+0x1c>
    {
        seconds = watchdogSecs;
 800265e:	4b2d      	ldr	r3, [pc, #180]	@ (8002714 <setWDT+0xcc>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	607b      	str	r3, [r7, #4]
    }

    if (seconds == 0)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d112      	bne.n	8002690 <setWDT+0x48>
    {
        // Disable WDT
        bResult = write_rtc_register(REG_WDT, 0x00);
 800266a:	231b      	movs	r3, #27
 800266c:	2100      	movs	r1, #0
 800266e:	0018      	movs	r0, r3
 8002670:	f000 fbc8 	bl	8002e04 <write_rtc_register>
 8002674:	0003      	movs	r3, r0
 8002676:	001a      	movs	r2, r3
 8002678:	230f      	movs	r3, #15
 800267a:	18fb      	adds	r3, r7, r3
 800267c:	1e51      	subs	r1, r2, #1
 800267e:	418a      	sbcs	r2, r1
 8002680:	701a      	strb	r2, [r3, #0]

        watchdogSecs = 0;
 8002682:	4b24      	ldr	r3, [pc, #144]	@ (8002714 <setWDT+0xcc>)
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
        watchdogUpdatePeriod = 0;
 8002688:	4b23      	ldr	r3, [pc, #140]	@ (8002718 <setWDT+0xd0>)
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	e03a      	b.n	8002706 <setWDT+0xbe>
    }
    else
    {
        // Use 1/4 Hz clock
        int fourSecs = seconds / 4;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	da00      	bge.n	8002698 <setWDT+0x50>
 8002696:	3303      	adds	r3, #3
 8002698:	109b      	asrs	r3, r3, #2
 800269a:	60bb      	str	r3, [r7, #8]
        if (fourSecs < 1)
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	dc01      	bgt.n	80026a6 <setWDT+0x5e>
        {
            fourSecs = 1;
 80026a2:	2301      	movs	r3, #1
 80026a4:	60bb      	str	r3, [r7, #8]
        }
        if (fourSecs > 31)
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2b1f      	cmp	r3, #31
 80026aa:	dd01      	ble.n	80026b0 <setWDT+0x68>
        {
            fourSecs = 31;
 80026ac:	231f      	movs	r3, #31
 80026ae:	60bb      	str	r3, [r7, #8]
        }
        bResult = write_rtc_register(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
 80026b0:	201b      	movs	r0, #27
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	b25a      	sxtb	r2, r3
 80026b8:	2380      	movs	r3, #128	@ 0x80
 80026ba:	b25b      	sxtb	r3, r3
 80026bc:	4313      	orrs	r3, r2
 80026be:	b25a      	sxtb	r2, r3
 80026c0:	2303      	movs	r3, #3
 80026c2:	b25b      	sxtb	r3, r3
 80026c4:	4313      	orrs	r3, r2
 80026c6:	b25b      	sxtb	r3, r3
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	0019      	movs	r1, r3
 80026cc:	f000 fb9a 	bl	8002e04 <write_rtc_register>
 80026d0:	0003      	movs	r3, r0
 80026d2:	001a      	movs	r2, r3
 80026d4:	200f      	movs	r0, #15
 80026d6:	183b      	adds	r3, r7, r0
 80026d8:	1e51      	subs	r1, r2, #1
 80026da:	418a      	sbcs	r2, r1
 80026dc:	701a      	strb	r2, [r3, #0]

        printf("watchdog set fourSecs=%d bResult=%d\n", fourSecs, bResult);
 80026de:	183b      	adds	r3, r7, r0
 80026e0:	781a      	ldrb	r2, [r3, #0]
 80026e2:	68b9      	ldr	r1, [r7, #8]
 80026e4:	4b0d      	ldr	r3, [pc, #52]	@ (800271c <setWDT+0xd4>)
 80026e6:	0018      	movs	r0, r3
 80026e8:	f002 ffc0 	bl	800566c <printf_>

        watchdogSecs = seconds;
 80026ec:	4b09      	ldr	r3, [pc, #36]	@ (8002714 <setWDT+0xcc>)
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	601a      	str	r2, [r3, #0]

        // Update watchdog half way through period
        watchdogUpdatePeriod = (fourSecs * 2000);
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	0013      	movs	r3, r2
 80026f6:	015b      	lsls	r3, r3, #5
 80026f8:	1a9b      	subs	r3, r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	189b      	adds	r3, r3, r2
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	001a      	movs	r2, r3
 8002702:	4b05      	ldr	r3, [pc, #20]	@ (8002718 <setWDT+0xd0>)
 8002704:	601a      	str	r2, [r3, #0]
    }

    return bResult;
 8002706:	230f      	movs	r3, #15
 8002708:	18fb      	adds	r3, r7, r3
 800270a:	781b      	ldrb	r3, [r3, #0]
}
 800270c:	0018      	movs	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	b004      	add	sp, #16
 8002712:	bd80      	pop	{r7, pc}
 8002714:	2000035c 	.word	0x2000035c
 8002718:	20000360 	.word	0x20000360
 800271c:	0800fa04 	.word	0x0800fa04

08002720 <deepPowerDown>:

    return true;
}

bool deepPowerDown(int seconds)
{
 8002720:	b5b0      	push	{r4, r5, r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
    const char *errorMsg = "failure in deepPowerDown %d\n";
 8002728:	4b6e      	ldr	r3, [pc, #440]	@ (80028e4 <deepPowerDown+0x1c4>)
 800272a:	617b      	str	r3, [r7, #20]
    bool bResult;

    printf("deepPowerDown %d\n", seconds);
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	4b6e      	ldr	r3, [pc, #440]	@ (80028e8 <deepPowerDown+0x1c8>)
 8002730:	0011      	movs	r1, r2
 8002732:	0018      	movs	r0, r3
 8002734:	f002 ff9a 	bl	800566c <printf_>

    // Disable watchdog
    bResult = setWDT(0);
 8002738:	2513      	movs	r5, #19
 800273a:	197c      	adds	r4, r7, r5
 800273c:	2000      	movs	r0, #0
 800273e:	f7ff ff83 	bl	8002648 <setWDT>
 8002742:	0003      	movs	r3, r0
 8002744:	7023      	strb	r3, [r4, #0]
    if (!bResult)
 8002746:	197b      	adds	r3, r7, r5
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2201      	movs	r2, #1
 800274c:	4053      	eors	r3, r2
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	d009      	beq.n	8002768 <deepPowerDown+0x48>
    {
        printf(errorMsg, __LINE__);
 8002754:	2346      	movs	r3, #70	@ 0x46
 8002756:	33ff      	adds	r3, #255	@ 0xff
 8002758:	001a      	movs	r2, r3
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	0011      	movs	r1, r2
 800275e:	0018      	movs	r0, r3
 8002760:	f002 ff84 	bl	800566c <printf_>
        return false;
 8002764:	2300      	movs	r3, #0
 8002766:	e0b8      	b.n	80028da <deepPowerDown+0x1ba>
    }

    bResult = setCountdownTimer(seconds, false);
 8002768:	2513      	movs	r5, #19
 800276a:	197c      	adds	r4, r7, r5
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2100      	movs	r1, #0
 8002770:	0018      	movs	r0, r3
 8002772:	f000 f8bf 	bl	80028f4 <setCountdownTimer>
 8002776:	0003      	movs	r3, r0
 8002778:	7023      	strb	r3, [r4, #0]
    if (!bResult)
 800277a:	197b      	adds	r3, r7, r5
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2201      	movs	r2, #1
 8002780:	4053      	eors	r3, r2
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d008      	beq.n	800279a <deepPowerDown+0x7a>
    {
        printf(errorMsg, __LINE__);
 8002788:	23a6      	movs	r3, #166	@ 0xa6
 800278a:	005a      	lsls	r2, r3, #1
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	0011      	movs	r1, r2
 8002790:	0018      	movs	r0, r3
 8002792:	f002 ff6b 	bl	800566c <printf_>
        return false;
 8002796:	2300      	movs	r3, #0
 8002798:	e09f      	b.n	80028da <deepPowerDown+0x1ba>
    }

    // Make sure STOP (stop clocking system is 0, otherwise sleep mode cannot be entered)
    // PWR2 = 1 (low resistance power switch)
    // (also would probably work with PWR2 = 0, as nIRQ2 should be high-true for sleep mode)
    bResult = maskRegister(REG_CTRL_1, (uint8_t) ~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2, 0);
 800279a:	2010      	movs	r0, #16
 800279c:	2280      	movs	r2, #128	@ 0x80
 800279e:	2308      	movs	r3, #8
 80027a0:	4313      	orrs	r3, r2
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	b2d9      	uxtb	r1, r3
 80027a8:	2202      	movs	r2, #2
 80027aa:	2513      	movs	r5, #19
 80027ac:	197c      	adds	r4, r7, r5
 80027ae:	2300      	movs	r3, #0
 80027b0:	f000 f95a 	bl	8002a68 <maskRegister>
 80027b4:	0003      	movs	r3, r0
 80027b6:	7023      	strb	r3, [r4, #0]
    if (!bResult)
 80027b8:	197b      	adds	r3, r7, r5
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2201      	movs	r2, #1
 80027be:	4053      	eors	r3, r2
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d008      	beq.n	80027d8 <deepPowerDown+0xb8>
    {
        printf(errorMsg, __LINE__);
 80027c6:	23ab      	movs	r3, #171	@ 0xab
 80027c8:	005a      	lsls	r2, r3, #1
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	0011      	movs	r1, r2
 80027ce:	0018      	movs	r0, r3
 80027d0:	f002 ff4c 	bl	800566c <printf_>
        return false;
 80027d4:	2300      	movs	r3, #0
 80027d6:	e080      	b.n	80028da <deepPowerDown+0x1ba>
    }

    // Disable the I/O interface in sleep
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT, 0);
 80027d8:	231c      	movs	r3, #28
 80027da:	2104      	movs	r1, #4
 80027dc:	2513      	movs	r5, #19
 80027de:	197c      	adds	r4, r7, r5
 80027e0:	2200      	movs	r2, #0
 80027e2:	0018      	movs	r0, r3
 80027e4:	f000 f9a0 	bl	8002b28 <setRegisterBit>
 80027e8:	0003      	movs	r3, r0
 80027ea:	7023      	strb	r3, [r4, #0]
    if (!bResult)
 80027ec:	197b      	adds	r3, r7, r5
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2201      	movs	r2, #1
 80027f2:	4053      	eors	r3, r2
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d008      	beq.n	800280c <deepPowerDown+0xec>
    {
        printf(errorMsg, __LINE__);
 80027fa:	23af      	movs	r3, #175	@ 0xaf
 80027fc:	005a      	lsls	r2, r3, #1
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	0011      	movs	r1, r2
 8002802:	0018      	movs	r0, r3
 8002804:	f002 ff32 	bl	800566c <printf_>
        return false;
 8002808:	2300      	movs	r3, #0
 800280a:	e066      	b.n	80028da <deepPowerDown+0x1ba>
    }

    // OUT2S = 6 to enable sleep mode
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP, 0);
 800280c:	2011      	movs	r0, #17
 800280e:	231c      	movs	r3, #28
 8002810:	43db      	mvns	r3, r3
 8002812:	b2d9      	uxtb	r1, r3
 8002814:	2218      	movs	r2, #24
 8002816:	2513      	movs	r5, #19
 8002818:	197c      	adds	r4, r7, r5
 800281a:	2300      	movs	r3, #0
 800281c:	f000 f924 	bl	8002a68 <maskRegister>
 8002820:	0003      	movs	r3, r0
 8002822:	7023      	strb	r3, [r4, #0]
    if (!bResult)
 8002824:	197b      	adds	r3, r7, r5
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2201      	movs	r2, #1
 800282a:	4053      	eors	r3, r2
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d008      	beq.n	8002844 <deepPowerDown+0x124>
    {
        printf(errorMsg, __LINE__);
 8002832:	23b3      	movs	r3, #179	@ 0xb3
 8002834:	005a      	lsls	r2, r3, #1
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	0011      	movs	r1, r2
 800283a:	0018      	movs	r0, r3
 800283c:	f002 ff16 	bl	800566c <printf_>
        return false;
 8002840:	2300      	movs	r3, #0
 8002842:	e04a      	b.n	80028da <deepPowerDown+0x1ba>
    }
    //    hex_dump();
    HAL_Delay(1);
 8002844:	2001      	movs	r0, #1
 8002846:	f003 fadd 	bl	8005e04 <HAL_Delay>
    // Enter sleep mode
    bResult = write_rtc_register(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES); // REG_SLEEP_CTRL_SLP | 0x01
 800284a:	2017      	movs	r0, #23
 800284c:	2280      	movs	r2, #128	@ 0x80
 800284e:	2340      	movs	r3, #64	@ 0x40
 8002850:	4313      	orrs	r3, r2
 8002852:	b2db      	uxtb	r3, r3
 8002854:	0019      	movs	r1, r3
 8002856:	f000 fad5 	bl	8002e04 <write_rtc_register>
 800285a:	0003      	movs	r3, r0
 800285c:	001a      	movs	r2, r3
 800285e:	2013      	movs	r0, #19
 8002860:	183b      	adds	r3, r7, r0
 8002862:	1e51      	subs	r1, r2, #1
 8002864:	418a      	sbcs	r2, r1
 8002866:	701a      	strb	r2, [r3, #0]
    if (!bResult)
 8002868:	183b      	adds	r3, r7, r0
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2201      	movs	r2, #1
 800286e:	4053      	eors	r3, r2
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d009      	beq.n	800288a <deepPowerDown+0x16a>
    {
        printf(errorMsg, __LINE__);
 8002876:	2370      	movs	r3, #112	@ 0x70
 8002878:	33ff      	adds	r3, #255	@ 0xff
 800287a:	001a      	movs	r2, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	0011      	movs	r1, r2
 8002880:	0018      	movs	r0, r3
 8002882:	f002 fef3 	bl	800566c <printf_>
        return false;
 8002886:	2300      	movs	r3, #0
 8002888:	e027      	b.n	80028da <deepPowerDown+0x1ba>
    }
    // bResult = write_rtc_register(REG_TIMER_CTRL, 0xc2); // enable
    // _log.trace("delay in case we didn't power down");
    uint32_t start = HAL_GetTick();
 800288a:	f003 fab1 	bl	8005df0 <HAL_GetTick>
 800288e:	0003      	movs	r3, r0
 8002890:	60fb      	str	r3, [r7, #12]
    while ((HAL_GetTick() - start) < (uint32_t)(seconds * 1000))
 8002892:	e00f      	b.n	80028b4 <deepPowerDown+0x194>
    {
        printf("REG_SLEEP_CTRL=0x%2x\n", read_rtc_register(REG_SLEEP_CTRL));
 8002894:	2317      	movs	r3, #23
 8002896:	0018      	movs	r0, r3
 8002898:	f000 fa82 	bl	8002da0 <read_rtc_register>
 800289c:	0003      	movs	r3, r0
 800289e:	001a      	movs	r2, r3
 80028a0:	4b12      	ldr	r3, [pc, #72]	@ (80028ec <deepPowerDown+0x1cc>)
 80028a2:	0011      	movs	r1, r2
 80028a4:	0018      	movs	r0, r3
 80028a6:	f002 fee1 	bl	800566c <printf_>
        HAL_Delay(1000);
 80028aa:	23fa      	movs	r3, #250	@ 0xfa
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	0018      	movs	r0, r3
 80028b0:	f003 faa8 	bl	8005e04 <HAL_Delay>
    while ((HAL_GetTick() - start) < (uint32_t)(seconds * 1000))
 80028b4:	f003 fa9c 	bl	8005df0 <HAL_GetTick>
 80028b8:	0002      	movs	r2, r0
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1ad1      	subs	r1, r2, r3
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	0013      	movs	r3, r2
 80028c2:	015b      	lsls	r3, r3, #5
 80028c4:	1a9b      	subs	r3, r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	189b      	adds	r3, r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	4299      	cmp	r1, r3
 80028ce:	d3e1      	bcc.n	8002894 <deepPowerDown+0x174>
    }

    printf("didn't power down\n");
 80028d0:	4b07      	ldr	r3, [pc, #28]	@ (80028f0 <deepPowerDown+0x1d0>)
 80028d2:	0018      	movs	r0, r3
 80028d4:	f002 feca 	bl	800566c <printf_>

    return true;
 80028d8:	2301      	movs	r3, #1
}
 80028da:	0018      	movs	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	b006      	add	sp, #24
 80028e0:	bdb0      	pop	{r4, r5, r7, pc}
 80028e2:	46c0      	nop			@ (mov r8, r8)
 80028e4:	0800fa7c 	.word	0x0800fa7c
 80028e8:	0800fa9c 	.word	0x0800fa9c
 80028ec:	0800fab0 	.word	0x0800fab0
 80028f0:	0800fac8 	.word	0x0800fac8

080028f4 <setCountdownTimer>:

bool setCountdownTimer(int value, bool minutes)
{
 80028f4:	b5b0      	push	{r4, r5, r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	000a      	movs	r2, r1
 80028fe:	1cfb      	adds	r3, r7, #3
 8002900:	701a      	strb	r2, [r3, #0]
    const char *errorMsg = "failure in setCountdownTimer %d\n";
 8002902:	4b58      	ldr	r3, [pc, #352]	@ (8002a64 <setCountdownTimer+0x170>)
 8002904:	60fb      	str	r3, [r7, #12]
    bool bResult;

    // Clear any pending interrupts
    bResult = write_rtc_register(REG_STATUS, REG_STATUS_DEFAULT);
 8002906:	230f      	movs	r3, #15
 8002908:	2200      	movs	r2, #0
 800290a:	0011      	movs	r1, r2
 800290c:	0018      	movs	r0, r3
 800290e:	f000 fa79 	bl	8002e04 <write_rtc_register>
 8002912:	0003      	movs	r3, r0
 8002914:	001a      	movs	r2, r3
 8002916:	200b      	movs	r0, #11
 8002918:	183b      	adds	r3, r7, r0
 800291a:	1e51      	subs	r1, r2, #1
 800291c:	418a      	sbcs	r2, r1
 800291e:	701a      	strb	r2, [r3, #0]
    if (!bResult)
 8002920:	183b      	adds	r3, r7, r0
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2201      	movs	r2, #1
 8002926:	4053      	eors	r3, r2
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d009      	beq.n	8002942 <setCountdownTimer+0x4e>
    {
        printf(errorMsg, __LINE__);
 800292e:	238a      	movs	r3, #138	@ 0x8a
 8002930:	33ff      	adds	r3, #255	@ 0xff
 8002932:	001a      	movs	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	0011      	movs	r1, r2
 8002938:	0018      	movs	r0, r3
 800293a:	f002 fe97 	bl	800566c <printf_>
        return false;
 800293e:	2300      	movs	r3, #0
 8002940:	e08c      	b.n	8002a5c <setCountdownTimer+0x168>
    }

    // Stop countdown timer if already running since it can't be set while running
    bResult = write_rtc_register(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
 8002942:	2318      	movs	r3, #24
 8002944:	2223      	movs	r2, #35	@ 0x23
 8002946:	0011      	movs	r1, r2
 8002948:	0018      	movs	r0, r3
 800294a:	f000 fa5b 	bl	8002e04 <write_rtc_register>
 800294e:	0003      	movs	r3, r0
 8002950:	001a      	movs	r2, r3
 8002952:	200b      	movs	r0, #11
 8002954:	183b      	adds	r3, r7, r0
 8002956:	1e51      	subs	r1, r2, #1
 8002958:	418a      	sbcs	r2, r1
 800295a:	701a      	strb	r2, [r3, #0]
    if (!bResult)
 800295c:	183b      	adds	r3, r7, r0
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2201      	movs	r2, #1
 8002962:	4053      	eors	r3, r2
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d009      	beq.n	800297e <setCountdownTimer+0x8a>
    {
        printf(errorMsg, __LINE__);
 800296a:	2392      	movs	r3, #146	@ 0x92
 800296c:	33ff      	adds	r3, #255	@ 0xff
 800296e:	001a      	movs	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	0011      	movs	r1, r2
 8002974:	0018      	movs	r0, r3
 8002976:	f002 fe79 	bl	800566c <printf_>
        return false;
 800297a:	2300      	movs	r3, #0
 800297c:	e06e      	b.n	8002a5c <setCountdownTimer+0x168>
    }

    // Set countdown timer duration
    if (value < 1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	dc01      	bgt.n	8002988 <setCountdownTimer+0x94>
    {
        value = 1;
 8002984:	2301      	movs	r3, #1
 8002986:	607b      	str	r3, [r7, #4]
    }
    if (value > 255)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2bff      	cmp	r3, #255	@ 0xff
 800298c:	dd01      	ble.n	8002992 <setCountdownTimer+0x9e>
    {
        value = 255;
 800298e:	23ff      	movs	r3, #255	@ 0xff
 8002990:	607b      	str	r3, [r7, #4]
    }
    bResult = write_rtc_register(REG_TIMER, (uint8_t)value);
 8002992:	2219      	movs	r2, #25
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	b2db      	uxtb	r3, r3
 8002998:	0019      	movs	r1, r3
 800299a:	0010      	movs	r0, r2
 800299c:	f000 fa32 	bl	8002e04 <write_rtc_register>
 80029a0:	0003      	movs	r3, r0
 80029a2:	001a      	movs	r2, r3
 80029a4:	200b      	movs	r0, #11
 80029a6:	183b      	adds	r3, r7, r0
 80029a8:	1e51      	subs	r1, r2, #1
 80029aa:	418a      	sbcs	r2, r1
 80029ac:	701a      	strb	r2, [r3, #0]
    if (!bResult)
 80029ae:	183b      	adds	r3, r7, r0
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2201      	movs	r2, #1
 80029b4:	4053      	eors	r3, r2
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d009      	beq.n	80029d0 <setCountdownTimer+0xdc>
    {
        printf(errorMsg, __LINE__);
 80029bc:	23a2      	movs	r3, #162	@ 0xa2
 80029be:	33ff      	adds	r3, #255	@ 0xff
 80029c0:	001a      	movs	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	0011      	movs	r1, r2
 80029c6:	0018      	movs	r0, r3
 80029c8:	f002 fe50 	bl	800566c <printf_>
        return false;
 80029cc:	2300      	movs	r3, #0
 80029ce:	e045      	b.n	8002a5c <setCountdownTimer+0x168>
    }

    // Enable countdown timer interrupt (TIE = 1) in IntMask
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE, 0);
 80029d0:	2312      	movs	r3, #18
 80029d2:	2108      	movs	r1, #8
 80029d4:	250b      	movs	r5, #11
 80029d6:	197c      	adds	r4, r7, r5
 80029d8:	2200      	movs	r2, #0
 80029da:	0018      	movs	r0, r3
 80029dc:	f000 f8a4 	bl	8002b28 <setRegisterBit>
 80029e0:	0003      	movs	r3, r0
 80029e2:	7023      	strb	r3, [r4, #0]
    if (!bResult)
 80029e4:	197b      	adds	r3, r7, r5
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2201      	movs	r2, #1
 80029ea:	4053      	eors	r3, r2
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d009      	beq.n	8002a06 <setCountdownTimer+0x112>
    {
        printf(errorMsg, __LINE__);
 80029f2:	23aa      	movs	r3, #170	@ 0xaa
 80029f4:	33ff      	adds	r3, #255	@ 0xff
 80029f6:	001a      	movs	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	0011      	movs	r1, r2
 80029fc:	0018      	movs	r0, r3
 80029fe:	f002 fe35 	bl	800566c <printf_>
        return false;
 8002a02:	2300      	movs	r3, #0
 8002a04:	e02a      	b.n	8002a5c <setCountdownTimer+0x168>
    }

    // Set the TFS frequency to 1/60 Hz for minutes or 1 Hz for seconds
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
 8002a06:	1cfb      	adds	r3, r7, #3
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <setCountdownTimer+0x11e>
 8002a0e:	2203      	movs	r2, #3
 8002a10:	e000      	b.n	8002a14 <setCountdownTimer+0x120>
 8002a12:	2202      	movs	r2, #2
 8002a14:	210a      	movs	r1, #10
 8002a16:	187b      	adds	r3, r7, r1
 8002a18:	701a      	strb	r2, [r3, #0]

    // Enable countdown timer (TE = 1) in countdown timer control register
    bResult = write_rtc_register(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
 8002a1a:	2018      	movs	r0, #24
 8002a1c:	2280      	movs	r2, #128	@ 0x80
 8002a1e:	187b      	adds	r3, r7, r1
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	0019      	movs	r1, r3
 8002a28:	f000 f9ec 	bl	8002e04 <write_rtc_register>
 8002a2c:	0003      	movs	r3, r0
 8002a2e:	001a      	movs	r2, r3
 8002a30:	200b      	movs	r0, #11
 8002a32:	183b      	adds	r3, r7, r0
 8002a34:	1e51      	subs	r1, r2, #1
 8002a36:	418a      	sbcs	r2, r1
 8002a38:	701a      	strb	r2, [r3, #0]
    // bResult = write_rtc_register(REG_TIMER_CTRL, 0x42); // 0xc2

    if (!bResult)
 8002a3a:	183b      	adds	r3, r7, r0
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	4053      	eors	r3, r2
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d008      	beq.n	8002a5a <setCountdownTimer+0x166>
    {
        printf(errorMsg, __LINE__);
 8002a48:	23db      	movs	r3, #219	@ 0xdb
 8002a4a:	005a      	lsls	r2, r3, #1
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	0011      	movs	r1, r2
 8002a50:	0018      	movs	r0, r3
 8002a52:	f002 fe0b 	bl	800566c <printf_>
        return false;
 8002a56:	2300      	movs	r3, #0
 8002a58:	e000      	b.n	8002a5c <setCountdownTimer+0x168>
    }

    return true;
 8002a5a:	2301      	movs	r3, #1
}
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	b004      	add	sp, #16
 8002a62:	bdb0      	pop	{r4, r5, r7, pc}
 8002a64:	0800fadc 	.word	0x0800fadc

08002a68 <maskRegister>:

bool maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock)
{
 8002a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	0005      	movs	r5, r0
 8002a70:	000c      	movs	r4, r1
 8002a72:	0010      	movs	r0, r2
 8002a74:	0019      	movs	r1, r3
 8002a76:	1dfb      	adds	r3, r7, #7
 8002a78:	1c2a      	adds	r2, r5, #0
 8002a7a:	701a      	strb	r2, [r3, #0]
 8002a7c:	1dbb      	adds	r3, r7, #6
 8002a7e:	1c22      	adds	r2, r4, #0
 8002a80:	701a      	strb	r2, [r3, #0]
 8002a82:	1d7b      	adds	r3, r7, #5
 8002a84:	1c02      	adds	r2, r0, #0
 8002a86:	701a      	strb	r2, [r3, #0]
 8002a88:	1d3b      	adds	r3, r7, #4
 8002a8a:	1c0a      	adds	r2, r1, #0
 8002a8c:	701a      	strb	r2, [r3, #0]
    bool bResult = false;
 8002a8e:	250f      	movs	r5, #15
 8002a90:	197b      	adds	r3, r7, r5
 8002a92:	2200      	movs	r2, #0
 8002a94:	701a      	strb	r2, [r3, #0]

    uint8_t value;

    value = read_rtc_register(regAddr);
 8002a96:	260e      	movs	r6, #14
 8002a98:	19bc      	adds	r4, r7, r6
 8002a9a:	1dfb      	adds	r3, r7, #7
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f000 f97e 	bl	8002da0 <read_rtc_register>
 8002aa4:	0003      	movs	r3, r0
 8002aa6:	7023      	strb	r3, [r4, #0]

    uint8_t newValue = (value & andValue) | orValue;
 8002aa8:	19bb      	adds	r3, r7, r6
 8002aaa:	1dba      	adds	r2, r7, #6
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	7812      	ldrb	r2, [r2, #0]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	b2d9      	uxtb	r1, r3
 8002ab4:	200d      	movs	r0, #13
 8002ab6:	183b      	adds	r3, r7, r0
 8002ab8:	1d7a      	adds	r2, r7, #5
 8002aba:	7812      	ldrb	r2, [r2, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	701a      	strb	r2, [r3, #0]

    bResult = write_rtc_register(regAddr, newValue);
 8002ac0:	183b      	adds	r3, r7, r0
 8002ac2:	781a      	ldrb	r2, [r3, #0]
 8002ac4:	1dfb      	adds	r3, r7, #7
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	0011      	movs	r1, r2
 8002aca:	0018      	movs	r0, r3
 8002acc:	f000 f99a 	bl	8002e04 <write_rtc_register>
 8002ad0:	0003      	movs	r3, r0
 8002ad2:	001a      	movs	r2, r3
 8002ad4:	197b      	adds	r3, r7, r5
 8002ad6:	1e51      	subs	r1, r2, #1
 8002ad8:	418a      	sbcs	r2, r1
 8002ada:	701a      	strb	r2, [r3, #0]

    return bResult;
 8002adc:	197b      	adds	r3, r7, r5
 8002ade:	781b      	ldrb	r3, [r3, #0]
}
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b005      	add	sp, #20
 8002ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ae8 <clearRegisterBit>:

    return bResult && ((value & bitMask) != 0);
}

bool clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock)
{
 8002ae8:	b590      	push	{r4, r7, lr}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	0004      	movs	r4, r0
 8002af0:	0008      	movs	r0, r1
 8002af2:	0011      	movs	r1, r2
 8002af4:	1dfb      	adds	r3, r7, #7
 8002af6:	1c22      	adds	r2, r4, #0
 8002af8:	701a      	strb	r2, [r3, #0]
 8002afa:	1dbb      	adds	r3, r7, #6
 8002afc:	1c02      	adds	r2, r0, #0
 8002afe:	701a      	strb	r2, [r3, #0]
 8002b00:	1d7b      	adds	r3, r7, #5
 8002b02:	1c0a      	adds	r2, r1, #0
 8002b04:	701a      	strb	r2, [r3, #0]
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
 8002b06:	1dbb      	adds	r3, r7, #6
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	b2d9      	uxtb	r1, r3
 8002b0e:	1d7b      	adds	r3, r7, #5
 8002b10:	781a      	ldrb	r2, [r3, #0]
 8002b12:	1dfb      	adds	r3, r7, #7
 8002b14:	7818      	ldrb	r0, [r3, #0]
 8002b16:	0013      	movs	r3, r2
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f7ff ffa5 	bl	8002a68 <maskRegister>
 8002b1e:	0003      	movs	r3, r0
}
 8002b20:	0018      	movs	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b003      	add	sp, #12
 8002b26:	bd90      	pop	{r4, r7, pc}

08002b28 <setRegisterBit>:

bool setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock)
{
 8002b28:	b590      	push	{r4, r7, lr}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	0004      	movs	r4, r0
 8002b30:	0008      	movs	r0, r1
 8002b32:	0011      	movs	r1, r2
 8002b34:	1dfb      	adds	r3, r7, #7
 8002b36:	1c22      	adds	r2, r4, #0
 8002b38:	701a      	strb	r2, [r3, #0]
 8002b3a:	1dbb      	adds	r3, r7, #6
 8002b3c:	1c02      	adds	r2, r0, #0
 8002b3e:	701a      	strb	r2, [r3, #0]
 8002b40:	1d7b      	adds	r3, r7, #5
 8002b42:	1c0a      	adds	r2, r1, #0
 8002b44:	701a      	strb	r2, [r3, #0]
    return maskRegister(regAddr, 0xff, bitMask, lock);
 8002b46:	1d7b      	adds	r3, r7, #5
 8002b48:	7819      	ldrb	r1, [r3, #0]
 8002b4a:	1dbb      	adds	r3, r7, #6
 8002b4c:	781a      	ldrb	r2, [r3, #0]
 8002b4e:	1dfb      	adds	r3, r7, #7
 8002b50:	7818      	ldrb	r0, [r3, #0]
 8002b52:	000b      	movs	r3, r1
 8002b54:	21ff      	movs	r1, #255	@ 0xff
 8002b56:	f7ff ff87 	bl	8002a68 <maskRegister>
 8002b5a:	0003      	movs	r3, r0
}
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	b003      	add	sp, #12
 8002b62:	bd90      	pop	{r4, r7, pc}

08002b64 <readRam>:
    }
    return bResult;
}

bool readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock)
{
 8002b64:	b5b0      	push	{r4, r5, r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	001a      	movs	r2, r3
 8002b72:	1cfb      	adds	r3, r7, #3
 8002b74:	701a      	strb	r2, [r3, #0]
    bool bResult = true;
 8002b76:	231f      	movs	r3, #31
 8002b78:	18fb      	adds	r3, r7, r3
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	701a      	strb	r2, [r3, #0]

    uint32_t primask_bit = utils_enter_critical_section();
 8002b7e:	f000 f97d 	bl	8002e7c <utils_enter_critical_section>
 8002b82:	0003      	movs	r3, r0
 8002b84:	617b      	str	r3, [r7, #20]

    while (dataLen > 0)
 8002b86:	e047      	b.n	8002c18 <readRam+0xb4>
    {
        size_t count = dataLen;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	61bb      	str	r3, [r7, #24]
        if (count > 32)
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	2b20      	cmp	r3, #32
 8002b90:	d901      	bls.n	8002b96 <readRam+0x32>
        {
            // Too large for a single I2C operation
            count = 32;
 8002b92:	2320      	movs	r3, #32
 8002b94:	61bb      	str	r3, [r7, #24]
        }
        if ((ramAddr < 128) && ((ramAddr + count) > 128))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b9a:	d808      	bhi.n	8002bae <readRam+0x4a>
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	18d3      	adds	r3, r2, r3
 8002ba2:	2b80      	cmp	r3, #128	@ 0x80
 8002ba4:	d903      	bls.n	8002bae <readRam+0x4a>
        {
            // Crossing a page boundary
            count = 128 - ramAddr;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2280      	movs	r2, #128	@ 0x80
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	61bb      	str	r3, [r7, #24]
        }
        if (ramAddr < 128)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2b7f      	cmp	r3, #127	@ 0x7f
 8002bb2:	d806      	bhi.n	8002bc2 <readRam+0x5e>
        {
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA, 0);
 8002bb4:	233f      	movs	r3, #63	@ 0x3f
 8002bb6:	2104      	movs	r1, #4
 8002bb8:	2200      	movs	r2, #0
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f7ff ff94 	bl	8002ae8 <clearRegisterBit>
 8002bc0:	e005      	b.n	8002bce <readRam+0x6a>
        }
        else
        {
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA, 0);
 8002bc2:	233f      	movs	r3, #63	@ 0x3f
 8002bc4:	2104      	movs	r1, #4
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f7ff ffad 	bl	8002b28 <setRegisterBit>
        }

        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count); // !!!!!!!!!
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	227f      	movs	r2, #127	@ 0x7f
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2280      	movs	r2, #128	@ 0x80
 8002bda:	189b      	adds	r3, r3, r2
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	251f      	movs	r5, #31
 8002be4:	197c      	adds	r4, r7, r5
 8002be6:	68b9      	ldr	r1, [r7, #8]
 8002be8:	0018      	movs	r0, r3
 8002bea:	f000 f965 	bl	8002eb8 <readRegisters>
 8002bee:	0003      	movs	r3, r0
 8002bf0:	7023      	strb	r3, [r4, #0]
        if (!bResult)
 8002bf2:	197b      	adds	r3, r7, r5
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	4053      	eors	r3, r2
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10f      	bne.n	8002c20 <readRam+0xbc>
        {
            break;
        }
        ramAddr += count;
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	18d3      	adds	r3, r2, r3
 8002c06:	60fb      	str	r3, [r7, #12]
        dataLen -= count;
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	607b      	str	r3, [r7, #4]
        data += count;
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	18d3      	adds	r3, r2, r3
 8002c16:	60bb      	str	r3, [r7, #8]
    while (dataLen > 0)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1b4      	bne.n	8002b88 <readRam+0x24>
 8002c1e:	e000      	b.n	8002c22 <readRam+0xbe>
            break;
 8002c20:	46c0      	nop			@ (mov r8, r8)
    }

    utils_exit_critical_section(primask_bit);
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	0018      	movs	r0, r3
 8002c26:	f000 f938 	bl	8002e9a <utils_exit_critical_section>

    return bResult;
 8002c2a:	231f      	movs	r3, #31
 8002c2c:	18fb      	adds	r3, r7, r3
 8002c2e:	781b      	ldrb	r3, [r3, #0]
}
 8002c30:	0018      	movs	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	b008      	add	sp, #32
 8002c36:	bdb0      	pop	{r4, r5, r7, pc}

08002c38 <writeRam>:
 * @param data The buffer containing the data to write
 * @param dataLen The number of bytes to write
 * The dataLen can be larger than the maximum I2C write. Multiple writes will be done if necessary.
 */
bool writeRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) // The initial values of the RAM locations are undefined.
{
 8002c38:	b5b0      	push	{r4, r5, r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
 8002c44:	001a      	movs	r2, r3
 8002c46:	1cfb      	adds	r3, r7, #3
 8002c48:	701a      	strb	r2, [r3, #0]
    bool bResult = true;
 8002c4a:	2317      	movs	r3, #23
 8002c4c:	18fb      	adds	r3, r7, r3
 8002c4e:	2201      	movs	r2, #1
 8002c50:	701a      	strb	r2, [r3, #0]

    while (dataLen > 0)
 8002c52:	e047      	b.n	8002ce4 <writeRam+0xac>
    {
        size_t count = dataLen;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	613b      	str	r3, [r7, #16]
        if (count > 31)
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	2b1f      	cmp	r3, #31
 8002c5c:	d901      	bls.n	8002c62 <writeRam+0x2a>
        {
            // Too large for a single I2C operation
            count = 31;
 8002c5e:	231f      	movs	r3, #31
 8002c60:	613b      	str	r3, [r7, #16]
        }
        if ((ramAddr < 128) && ((ramAddr + count) > 128))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c66:	d808      	bhi.n	8002c7a <writeRam+0x42>
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	18d3      	adds	r3, r2, r3
 8002c6e:	2b80      	cmp	r3, #128	@ 0x80
 8002c70:	d903      	bls.n	8002c7a <writeRam+0x42>
        {
            // Crossing a page boundary
            count = 128 - ramAddr;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2280      	movs	r2, #128	@ 0x80
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	613b      	str	r3, [r7, #16]
        }
        if (ramAddr < 128)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c7e:	d806      	bhi.n	8002c8e <writeRam+0x56>
        {
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA, 0);
 8002c80:	233f      	movs	r3, #63	@ 0x3f
 8002c82:	2104      	movs	r1, #4
 8002c84:	2200      	movs	r2, #0
 8002c86:	0018      	movs	r0, r3
 8002c88:	f7ff ff2e 	bl	8002ae8 <clearRegisterBit>
 8002c8c:	e005      	b.n	8002c9a <writeRam+0x62>
        }
        else
        {
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA, 0);
 8002c8e:	233f      	movs	r3, #63	@ 0x3f
 8002c90:	2104      	movs	r1, #4
 8002c92:	2200      	movs	r2, #0
 8002c94:	0018      	movs	r0, r3
 8002c96:	f7ff ff47 	bl	8002b28 <setRegisterBit>
        }

        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	227f      	movs	r2, #127	@ 0x7f
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2280      	movs	r2, #128	@ 0x80
 8002ca6:	189b      	adds	r3, r3, r2
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	2517      	movs	r5, #23
 8002cb0:	197c      	adds	r4, r7, r5
 8002cb2:	68b9      	ldr	r1, [r7, #8]
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f000 f949 	bl	8002f4c <writeRegisters>
 8002cba:	0003      	movs	r3, r0
 8002cbc:	7023      	strb	r3, [r4, #0]
        if (!bResult)
 8002cbe:	197b      	adds	r3, r7, r5
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	4053      	eors	r3, r2
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10f      	bne.n	8002cec <writeRam+0xb4>
        {
            break;
        }
        ramAddr += count;
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	18d3      	adds	r3, r2, r3
 8002cd2:	60fb      	str	r3, [r7, #12]
        dataLen -= count;
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	607b      	str	r3, [r7, #4]
        data += count;
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	18d3      	adds	r3, r2, r3
 8002ce2:	60bb      	str	r3, [r7, #8]
    while (dataLen > 0)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1b4      	bne.n	8002c54 <writeRam+0x1c>
 8002cea:	e000      	b.n	8002cee <writeRam+0xb6>
            break;
 8002cec:	46c0      	nop			@ (mov r8, r8)
    }

    return bResult;
 8002cee:	2317      	movs	r3, #23
 8002cf0:	18fb      	adds	r3, r7, r3
 8002cf2:	781b      	ldrb	r3, [r3, #0]
}
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b006      	add	sp, #24
 8002cfa:	bdb0      	pop	{r4, r5, r7, pc}

08002cfc <SPI1_SendByte>:
{
    return wakeReason;
};

inline static uint8_t SPI1_SendByte(uint8_t data)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	0002      	movs	r2, r0
 8002d04:	1dfb      	adds	r3, r7, #7
 8002d06:	701a      	strb	r2, [r3, #0]
    uint32_t start_time = HAL_GetTick();
 8002d08:	f003 f872 	bl	8005df0 <HAL_GetTick>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	60fb      	str	r3, [r7, #12]
    while (LL_SPI_IsActiveFlag_TXE(SPI1) == RESET)
 8002d10:	e00e      	b.n	8002d30 <SPI1_SendByte+0x34>
    {
        if ((HAL_GetTick() - start_time) > 1000)
 8002d12:	f003 f86d 	bl	8005df0 <HAL_GetTick>
 8002d16:	0002      	movs	r2, r0
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	1ad2      	subs	r2, r2, r3
 8002d1c:	23fa      	movs	r3, #250	@ 0xfa
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d905      	bls.n	8002d30 <SPI1_SendByte+0x34>
        {
            print_error(__func__, __LINE__);
 8002d24:	4a1a      	ldr	r2, [pc, #104]	@ (8002d90 <SPI1_SendByte+0x94>)
 8002d26:	4b1b      	ldr	r3, [pc, #108]	@ (8002d94 <SPI1_SendByte+0x98>)
 8002d28:	0011      	movs	r1, r2
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f001 f812 	bl	8003d54 <print_error>
    while (LL_SPI_IsActiveFlag_TXE(SPI1) == RESET)
 8002d30:	4b19      	ldr	r3, [pc, #100]	@ (8002d98 <SPI1_SendByte+0x9c>)
 8002d32:	0018      	movs	r0, r3
 8002d34:	f7ff fbb9 	bl	80024aa <LL_SPI_IsActiveFlag_TXE>
 8002d38:	1e03      	subs	r3, r0, #0
 8002d3a:	d0ea      	beq.n	8002d12 <SPI1_SendByte+0x16>
        }
    }

    LL_SPI_TransmitData8(SPI1, data);
 8002d3c:	1dfb      	adds	r3, r7, #7
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	4a15      	ldr	r2, [pc, #84]	@ (8002d98 <SPI1_SendByte+0x9c>)
 8002d42:	0019      	movs	r1, r3
 8002d44:	0010      	movs	r0, r2
 8002d46:	f7ff fbcd 	bl	80024e4 <LL_SPI_TransmitData8>

    start_time = HAL_GetTick();
 8002d4a:	f003 f851 	bl	8005df0 <HAL_GetTick>
 8002d4e:	0003      	movs	r3, r0
 8002d50:	60fb      	str	r3, [r7, #12]
    while (LL_SPI_IsActiveFlag_RXNE(SPI1) == RESET)
 8002d52:	e00e      	b.n	8002d72 <SPI1_SendByte+0x76>
    {
        if ((HAL_GetTick() - start_time) > 1000)
 8002d54:	f003 f84c 	bl	8005df0 <HAL_GetTick>
 8002d58:	0002      	movs	r2, r0
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	1ad2      	subs	r2, r2, r3
 8002d5e:	23fa      	movs	r3, #250	@ 0xfa
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d905      	bls.n	8002d72 <SPI1_SendByte+0x76>
        {
            print_error(__func__, __LINE__);
 8002d66:	4a0d      	ldr	r2, [pc, #52]	@ (8002d9c <SPI1_SendByte+0xa0>)
 8002d68:	4b0a      	ldr	r3, [pc, #40]	@ (8002d94 <SPI1_SendByte+0x98>)
 8002d6a:	0011      	movs	r1, r2
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f000 fff1 	bl	8003d54 <print_error>
    while (LL_SPI_IsActiveFlag_RXNE(SPI1) == RESET)
 8002d72:	4b09      	ldr	r3, [pc, #36]	@ (8002d98 <SPI1_SendByte+0x9c>)
 8002d74:	0018      	movs	r0, r3
 8002d76:	f7ff fb87 	bl	8002488 <LL_SPI_IsActiveFlag_RXNE>
 8002d7a:	1e03      	subs	r3, r0, #0
 8002d7c:	d0ea      	beq.n	8002d54 <SPI1_SendByte+0x58>
        }
    }

    return LL_SPI_ReceiveData8(SPI1);
 8002d7e:	4b06      	ldr	r3, [pc, #24]	@ (8002d98 <SPI1_SendByte+0x9c>)
 8002d80:	0018      	movs	r0, r3
 8002d82:	f7ff fba3 	bl	80024cc <LL_SPI_ReceiveData8>
 8002d86:	0003      	movs	r3, r0
}
 8002d88:	0018      	movs	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b004      	add	sp, #16
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	0000027a 	.word	0x0000027a
 8002d94:	0800fe1c 	.word	0x0800fe1c
 8002d98:	40013000 	.word	0x40013000
 8002d9c:	00000285 	.word	0x00000285

08002da0 <read_rtc_register>:

inline static uint8_t read_rtc_register(uint8_t reg_addr)
{
 8002da0:	b5b0      	push	{r4, r5, r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	0002      	movs	r2, r0
 8002da8:	1dfb      	adds	r3, r7, #7
 8002daa:	701a      	strb	r2, [r3, #0]
    uint8_t val;
    uint32_t primask_bit = utils_enter_critical_section();
 8002dac:	f000 f866 	bl	8002e7c <utils_enter_critical_section>
 8002db0:	0003      	movs	r3, r0
 8002db2:	60fb      	str	r3, [r7, #12]

    // #define AB1815_SPI_READ(offset) (127 & offset)		127 - 0x7F
    // #define AB1815_SPI_WRITE(offset) (128 | offset)  	128 - 0x80
    uint8_t addr = AB1815_SPI_READ(reg_addr);
 8002db4:	200b      	movs	r0, #11
 8002db6:	183b      	adds	r3, r7, r0
 8002db8:	1dfa      	adds	r2, r7, #7
 8002dba:	7812      	ldrb	r2, [r2, #0]
 8002dbc:	217f      	movs	r1, #127	@ 0x7f
 8002dbe:	400a      	ands	r2, r1
 8002dc0:	701a      	strb	r2, [r3, #0]
    RTC_L();
 8002dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8002e00 <read_rtc_register+0x60>)
 8002dc4:	2280      	movs	r2, #128	@ 0x80
 8002dc6:	05d2      	lsls	r2, r2, #23
 8002dc8:	619a      	str	r2, [r3, #24]
    SPI1_SendByte(addr);
 8002dca:	183b      	adds	r3, r7, r0
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f7ff ff94 	bl	8002cfc <SPI1_SendByte>
    val = SPI1_SendByte(0x00); // Send DUMMY to read data
 8002dd4:	250a      	movs	r5, #10
 8002dd6:	197c      	adds	r4, r7, r5
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f7ff ff8f 	bl	8002cfc <SPI1_SendByte>
 8002dde:	0003      	movs	r3, r0
 8002de0:	7023      	strb	r3, [r4, #0]
    RTC_H();
 8002de2:	4b07      	ldr	r3, [pc, #28]	@ (8002e00 <read_rtc_register+0x60>)
 8002de4:	2280      	movs	r2, #128	@ 0x80
 8002de6:	01d2      	lsls	r2, r2, #7
 8002de8:	619a      	str	r2, [r3, #24]
    utils_exit_critical_section(primask_bit);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	0018      	movs	r0, r3
 8002dee:	f000 f854 	bl	8002e9a <utils_exit_critical_section>

    return val;
 8002df2:	197b      	adds	r3, r7, r5
 8002df4:	781b      	ldrb	r3, [r3, #0]
}
 8002df6:	0018      	movs	r0, r3
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	b004      	add	sp, #16
 8002dfc:	bdb0      	pop	{r4, r5, r7, pc}
 8002dfe:	46c0      	nop			@ (mov r8, r8)
 8002e00:	50000400 	.word	0x50000400

08002e04 <write_rtc_register>:

inline static uint8_t write_rtc_register(uint8_t offset, uint8_t buf)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	0002      	movs	r2, r0
 8002e0c:	1dfb      	adds	r3, r7, #7
 8002e0e:	701a      	strb	r2, [r3, #0]
 8002e10:	1dbb      	adds	r3, r7, #6
 8002e12:	1c0a      	adds	r2, r1, #0
 8002e14:	701a      	strb	r2, [r3, #0]
    // uint8_t address = AB1815_SPI_WRITE(offset);
    uint8_t address = offset | 0x80;
 8002e16:	230f      	movs	r3, #15
 8002e18:	18fb      	adds	r3, r7, r3
 8002e1a:	1dfa      	adds	r2, r7, #7
 8002e1c:	7812      	ldrb	r2, [r2, #0]
 8002e1e:	2180      	movs	r1, #128	@ 0x80
 8002e20:	4249      	negs	r1, r1
 8002e22:	430a      	orrs	r2, r1
 8002e24:	701a      	strb	r2, [r3, #0]
    uint32_t primask_bit = utils_enter_critical_section();
 8002e26:	f000 f829 	bl	8002e7c <utils_enter_critical_section>
 8002e2a:	0003      	movs	r3, r0
 8002e2c:	60bb      	str	r3, [r7, #8]

    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 8002e2e:	4b12      	ldr	r3, [pc, #72]	@ (8002e78 <write_rtc_register+0x74>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2240      	movs	r2, #64	@ 0x40
 8002e34:	4013      	ands	r3, r2
 8002e36:	d105      	bne.n	8002e44 <write_rtc_register+0x40>
    {
        SPI1->CR1 |= SPI_CR1_SPE;
 8002e38:	4b0f      	ldr	r3, [pc, #60]	@ (8002e78 <write_rtc_register+0x74>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002e78 <write_rtc_register+0x74>)
 8002e3e:	2140      	movs	r1, #64	@ 0x40
 8002e40:	430a      	orrs	r2, r1
 8002e42:	601a      	str	r2, [r3, #0]
    }
    spi_select_slave(0);
 8002e44:	2000      	movs	r0, #0
 8002e46:	f7ff fb5f 	bl	8002508 <spi_select_slave>
    SPI1_SendByte(address);
 8002e4a:	230f      	movs	r3, #15
 8002e4c:	18fb      	adds	r3, r7, r3
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	0018      	movs	r0, r3
 8002e52:	f7ff ff53 	bl	8002cfc <SPI1_SendByte>
    SPI1_SendByte(buf); // Send Data to write
 8002e56:	1dbb      	adds	r3, r7, #6
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f7ff ff4e 	bl	8002cfc <SPI1_SendByte>

    spi_select_slave(1);
 8002e60:	2001      	movs	r0, #1
 8002e62:	f7ff fb51 	bl	8002508 <spi_select_slave>
    utils_exit_critical_section(primask_bit);
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f000 f816 	bl	8002e9a <utils_exit_critical_section>
    return 1;
 8002e6e:	2301      	movs	r3, #1
};
 8002e70:	0018      	movs	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b004      	add	sp, #16
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40013000 	.word	0x40013000

08002e7c <utils_enter_critical_section>:
		printf("# 0x%02x: 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x\r\n", pos, buffer[0], buffer[1], buffer[2], buffer[3], buffer[4], buffer[5], buffer[6], buffer[7]);
	}
}

static inline uint32_t utils_enter_critical_section(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e82:	f3ef 8310 	mrs	r3, PRIMASK
 8002e86:	603b      	str	r3, [r7, #0]
  return(result);
 8002e88:	683b      	ldr	r3, [r7, #0]
    uint32_t primask_bit = __get_PRIMASK();
 8002e8a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e8c:	b672      	cpsid	i
}
 8002e8e:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();
    return primask_bit;
 8002e90:	687b      	ldr	r3, [r7, #4]
}
 8002e92:	0018      	movs	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	b002      	add	sp, #8
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <utils_exit_critical_section>:

static inline void utils_exit_critical_section(uint32_t primask_bit)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b084      	sub	sp, #16
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f383 8810 	msr	PRIMASK, r3
}
 8002eac:	46c0      	nop			@ (mov r8, r8)
    __set_PRIMASK(primask_bit);
}
 8002eae:	46c0      	nop			@ (mov r8, r8)
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	b004      	add	sp, #16
 8002eb4:	bd80      	pop	{r7, pc}
	...

08002eb8 <readRegisters>:
};

// #########################################################################

bool readRegisters(uint8_t offset, uint8_t *buf, uint8_t length)
{
 8002eb8:	b590      	push	{r4, r7, lr}
 8002eba:	b087      	sub	sp, #28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6039      	str	r1, [r7, #0]
 8002ec0:	0011      	movs	r1, r2
 8002ec2:	1dfb      	adds	r3, r7, #7
 8002ec4:	1c02      	adds	r2, r0, #0
 8002ec6:	701a      	strb	r2, [r3, #0]
 8002ec8:	1dbb      	adds	r3, r7, #6
 8002eca:	1c0a      	adds	r2, r1, #0
 8002ecc:	701a      	strb	r2, [r3, #0]
    uint8_t address = AB1815_SPI_READ(offset);
 8002ece:	2313      	movs	r3, #19
 8002ed0:	18fb      	adds	r3, r7, r3
 8002ed2:	1dfa      	adds	r2, r7, #7
 8002ed4:	7812      	ldrb	r2, [r2, #0]
 8002ed6:	217f      	movs	r1, #127	@ 0x7f
 8002ed8:	400a      	ands	r2, r1
 8002eda:	701a      	strb	r2, [r3, #0]
    uint32_t primask_bit = utils_enter_critical_section();
 8002edc:	f7ff ffce 	bl	8002e7c <utils_enter_critical_section>
 8002ee0:	0003      	movs	r3, r0
 8002ee2:	60fb      	str	r3, [r7, #12]
    spi_select_slave(0);
 8002ee4:	2000      	movs	r0, #0
 8002ee6:	f7ff fb0f 	bl	8002508 <spi_select_slave>

    unsigned int i = 0;
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 8002eee:	4b16      	ldr	r3, [pc, #88]	@ (8002f48 <readRegisters+0x90>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2240      	movs	r2, #64	@ 0x40
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d105      	bne.n	8002f04 <readRegisters+0x4c>
    {
        SPI1->CR1 |= SPI_CR1_SPE;
 8002ef8:	4b13      	ldr	r3, [pc, #76]	@ (8002f48 <readRegisters+0x90>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	4b12      	ldr	r3, [pc, #72]	@ (8002f48 <readRegisters+0x90>)
 8002efe:	2140      	movs	r1, #64	@ 0x40
 8002f00:	430a      	orrs	r2, r1
 8002f02:	601a      	str	r2, [r3, #0]
    }

    SPI1_SendByte(address);
 8002f04:	2313      	movs	r3, #19
 8002f06:	18fb      	adds	r3, r7, r3
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f7ff fef6 	bl	8002cfc <SPI1_SendByte>
    while (i < length)
 8002f10:	e009      	b.n	8002f26 <readRegisters+0x6e>
    {
        buf[i++] = SPI1_SendByte(0x00); // Send DUMMY to read data
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	617a      	str	r2, [r7, #20]
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	18d4      	adds	r4, r2, r3
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	f7ff feed 	bl	8002cfc <SPI1_SendByte>
 8002f22:	0003      	movs	r3, r0
 8002f24:	7023      	strb	r3, [r4, #0]
    while (i < length)
 8002f26:	1dbb      	adds	r3, r7, #6
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d3f0      	bcc.n	8002f12 <readRegisters+0x5a>
    }

    spi_select_slave(1);
 8002f30:	2001      	movs	r0, #1
 8002f32:	f7ff fae9 	bl	8002508 <spi_select_slave>
    utils_exit_critical_section(primask_bit);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	0018      	movs	r0, r3
 8002f3a:	f7ff ffae 	bl	8002e9a <utils_exit_critical_section>
    return true;
 8002f3e:	2301      	movs	r3, #1
};
 8002f40:	0018      	movs	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b007      	add	sp, #28
 8002f46:	bd90      	pop	{r4, r7, pc}
 8002f48:	40013000 	.word	0x40013000

08002f4c <writeRegisters>:

// ##########################################################################
bool writeRegisters(uint8_t offset, uint8_t *buf, uint8_t length)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6039      	str	r1, [r7, #0]
 8002f54:	0011      	movs	r1, r2
 8002f56:	1dfb      	adds	r3, r7, #7
 8002f58:	1c02      	adds	r2, r0, #0
 8002f5a:	701a      	strb	r2, [r3, #0]
 8002f5c:	1dbb      	adds	r3, r7, #6
 8002f5e:	1c0a      	adds	r2, r1, #0
 8002f60:	701a      	strb	r2, [r3, #0]
    uint8_t address = AB1815_SPI_WRITE(offset);
 8002f62:	230e      	movs	r3, #14
 8002f64:	18fb      	adds	r3, r7, r3
 8002f66:	1dfa      	adds	r2, r7, #7
 8002f68:	7812      	ldrb	r2, [r2, #0]
 8002f6a:	2180      	movs	r1, #128	@ 0x80
 8002f6c:	4249      	negs	r1, r1
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	701a      	strb	r2, [r3, #0]

    uint32_t primask_bit = utils_enter_critical_section();
 8002f72:	f7ff ff83 	bl	8002e7c <utils_enter_critical_section>
 8002f76:	0003      	movs	r3, r0
 8002f78:	60bb      	str	r3, [r7, #8]
    spi_select_slave(0);
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	f7ff fac4 	bl	8002508 <spi_select_slave>

    uint8_t i = 0;
 8002f80:	230f      	movs	r3, #15
 8002f82:	18fb      	adds	r3, r7, r3
 8002f84:	2200      	movs	r2, #0
 8002f86:	701a      	strb	r2, [r3, #0]
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 8002f88:	4b18      	ldr	r3, [pc, #96]	@ (8002fec <writeRegisters+0xa0>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2240      	movs	r2, #64	@ 0x40
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d105      	bne.n	8002f9e <writeRegisters+0x52>
    {
        SPI1->CR1 |= SPI_CR1_SPE;
 8002f92:	4b16      	ldr	r3, [pc, #88]	@ (8002fec <writeRegisters+0xa0>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	4b15      	ldr	r3, [pc, #84]	@ (8002fec <writeRegisters+0xa0>)
 8002f98:	2140      	movs	r1, #64	@ 0x40
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	601a      	str	r2, [r3, #0]
    }

    SPI1_SendByte(address);
 8002f9e:	230e      	movs	r3, #14
 8002fa0:	18fb      	adds	r3, r7, r3
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f7ff fea9 	bl	8002cfc <SPI1_SendByte>
    while (i < length)
 8002faa:	e00c      	b.n	8002fc6 <writeRegisters+0x7a>
    {
        SPI1_SendByte(buf[i++]); // Send Data to write
 8002fac:	220f      	movs	r2, #15
 8002fae:	18bb      	adds	r3, r7, r2
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	18ba      	adds	r2, r7, r2
 8002fb4:	1c59      	adds	r1, r3, #1
 8002fb6:	7011      	strb	r1, [r2, #0]
 8002fb8:	001a      	movs	r2, r3
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	189b      	adds	r3, r3, r2
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	f7ff fe9b 	bl	8002cfc <SPI1_SendByte>
    while (i < length)
 8002fc6:	230f      	movs	r3, #15
 8002fc8:	18fa      	adds	r2, r7, r3
 8002fca:	1dbb      	adds	r3, r7, #6
 8002fcc:	7812      	ldrb	r2, [r2, #0]
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d3eb      	bcc.n	8002fac <writeRegisters+0x60>
    }

    spi_select_slave(1); // set 1
 8002fd4:	2001      	movs	r0, #1
 8002fd6:	f7ff fa97 	bl	8002508 <spi_select_slave>
    utils_exit_critical_section(primask_bit);
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f7ff ff5c 	bl	8002e9a <utils_exit_critical_section>
    return true;
 8002fe2:	2301      	movs	r3, #1
};
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	b004      	add	sp, #16
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40013000 	.word	0x40013000

08002ff0 <read>:
{
    return setWDT(-1);
}

uint8_t read(uint8_t reg)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	0002      	movs	r2, r0
 8002ff8:	1dfb      	adds	r3, r7, #7
 8002ffa:	701a      	strb	r2, [r3, #0]
    return read_rtc_register(reg);
 8002ffc:	1dfb      	adds	r3, r7, #7
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	0018      	movs	r0, r3
 8003002:	f7ff fecd 	bl	8002da0 <read_rtc_register>
 8003006:	0003      	movs	r3, r0
}
 8003008:	0018      	movs	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	b002      	add	sp, #8
 800300e:	bd80      	pop	{r7, pc}

08003010 <write>:

uint8_t write(uint8_t reg, uint8_t value)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	0002      	movs	r2, r0
 8003018:	1dfb      	adds	r3, r7, #7
 800301a:	701a      	strb	r2, [r3, #0]
 800301c:	1dbb      	adds	r3, r7, #6
 800301e:	1c0a      	adds	r2, r1, #0
 8003020:	701a      	strb	r2, [r3, #0]
    return write_rtc_register(reg, value);
 8003022:	1dbb      	adds	r3, r7, #6
 8003024:	781a      	ldrb	r2, [r3, #0]
 8003026:	1dfb      	adds	r3, r7, #7
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	0011      	movs	r1, r2
 800302c:	0018      	movs	r0, r3
 800302e:	f7ff fee9 	bl	8002e04 <write_rtc_register>
 8003032:	0003      	movs	r3, r0
}
 8003034:	0018      	movs	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	b002      	add	sp, #8
 800303a:	bd80      	pop	{r7, pc}

0800303c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	4a05      	ldr	r2, [pc, #20]	@ (8003060 <LL_ADC_EnableInternalRegulator+0x24>)
 800304a:	4013      	ands	r3, r2
 800304c:	2280      	movs	r2, #128	@ 0x80
 800304e:	0552      	lsls	r2, r2, #21
 8003050:	431a      	orrs	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003056:	46c0      	nop			@ (mov r8, r8)
 8003058:	46bd      	mov	sp, r7
 800305a:	b002      	add	sp, #8
 800305c:	bd80      	pop	{r7, pc}
 800305e:	46c0      	nop			@ (mov r8, r8)
 8003060:	6fffffe8 	.word	0x6fffffe8

08003064 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	4a04      	ldr	r2, [pc, #16]	@ (8003084 <LL_ADC_Enable+0x20>)
 8003072:	4013      	ands	r3, r2
 8003074:	2201      	movs	r2, #1
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800307c:	46c0      	nop			@ (mov r8, r8)
 800307e:	46bd      	mov	sp, r7
 8003080:	b002      	add	sp, #8
 8003082:	bd80      	pop	{r7, pc}
 8003084:	7fffffe8 	.word	0x7fffffe8

08003088 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	2201      	movs	r2, #1
 8003096:	4013      	ands	r3, r2
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <LL_ADC_IsEnabled+0x18>
 800309c:	2301      	movs	r3, #1
 800309e:	e000      	b.n	80030a2 <LL_ADC_IsEnabled+0x1a>
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	0018      	movs	r0, r3
 80030a4:	46bd      	mov	sp, r7
 80030a6:	b002      	add	sp, #8
 80030a8:	bd80      	pop	{r7, pc}

080030aa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b082      	sub	sp, #8
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2202      	movs	r2, #2
 80030b8:	4013      	ands	r3, r2
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d101      	bne.n	80030c2 <LL_ADC_IsDisableOngoing+0x18>
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <LL_ADC_IsDisableOngoing+0x1a>
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	0018      	movs	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	b002      	add	sp, #8
 80030ca:	bd80      	pop	{r7, pc}

080030cc <LL_ADC_StartCalibration>:
  * @rmtoll CR       ADCAL          LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	4a05      	ldr	r2, [pc, #20]	@ (80030f0 <LL_ADC_StartCalibration+0x24>)
 80030da:	4013      	ands	r3, r2
 80030dc:	2280      	movs	r2, #128	@ 0x80
 80030de:	0612      	lsls	r2, r2, #24
 80030e0:	431a      	orrs	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL);
}
 80030e6:	46c0      	nop			@ (mov r8, r8)
 80030e8:	46bd      	mov	sp, r7
 80030ea:	b002      	add	sp, #8
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	46c0      	nop			@ (mov r8, r8)
 80030f0:	7fffffe8 	.word	0x7fffffe8

080030f4 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(const ADC_TypeDef *ADCx)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	0fdb      	lsrs	r3, r3, #31
 8003102:	07da      	lsls	r2, r3, #31
 8003104:	2380      	movs	r3, #128	@ 0x80
 8003106:	061b      	lsls	r3, r3, #24
 8003108:	429a      	cmp	r2, r3
 800310a:	d101      	bne.n	8003110 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800310c:	2301      	movs	r3, #1
 800310e:	e000      	b.n	8003112 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8003110:	2300      	movs	r3, #0
}
 8003112:	0018      	movs	r0, r3
 8003114:	46bd      	mov	sp, r7
 8003116:	b002      	add	sp, #8
 8003118:	bd80      	pop	{r7, pc}
	...

0800311c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	4a04      	ldr	r2, [pc, #16]	@ (800313c <LL_ADC_REG_StartConversion+0x20>)
 800312a:	4013      	ands	r3, r2
 800312c:	2204      	movs	r2, #4
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003134:	46c0      	nop			@ (mov r8, r8)
 8003136:	46bd      	mov	sp, r7
 8003138:	b002      	add	sp, #8
 800313a:	bd80      	pop	{r7, pc}
 800313c:	7fffffe8 	.word	0x7fffffe8

08003140 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2204      	movs	r2, #4
 800314e:	4013      	ands	r3, r2
 8003150:	2b04      	cmp	r3, #4
 8003152:	d101      	bne.n	8003158 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003154:	2301      	movs	r3, #1
 8003156:	e000      	b.n	800315a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003158:	2300      	movs	r3, #0
}
 800315a:	0018      	movs	r0, r3
 800315c:	46bd      	mov	sp, r7
 800315e:	b002      	add	sp, #8
 8003160:	bd80      	pop	{r7, pc}

08003162 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       DATA           LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(const ADC_TypeDef *ADCx)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b082      	sub	sp, #8
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA) & 0x00000FFFUL);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316e:	b29b      	uxth	r3, r3
 8003170:	051b      	lsls	r3, r3, #20
 8003172:	0d1b      	lsrs	r3, r3, #20
 8003174:	b29b      	uxth	r3, r3
}
 8003176:	0018      	movs	r0, r3
 8003178:	46bd      	mov	sp, r7
 800317a:	b002      	add	sp, #8
 800317c:	bd80      	pop	{r7, pc}

0800317e <LL_ADC_IsActiveFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(const ADC_TypeDef *ADCx)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b082      	sub	sp, #8
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2201      	movs	r2, #1
 800318c:	4013      	ands	r3, r2
 800318e:	2b01      	cmp	r3, #1
 8003190:	d101      	bne.n	8003196 <LL_ADC_IsActiveFlag_ADRDY+0x18>
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <LL_ADC_IsActiveFlag_ADRDY+0x1a>
 8003196:	2300      	movs	r3, #0
}
 8003198:	0018      	movs	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	b002      	add	sp, #8
 800319e:	bd80      	pop	{r7, pc}

080031a0 <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(const ADC_TypeDef *ADCx)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2204      	movs	r2, #4
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d101      	bne.n	80031b8 <LL_ADC_IsActiveFlag_EOC+0x18>
 80031b4:	2301      	movs	r3, #1
 80031b6:	e000      	b.n	80031ba <LL_ADC_IsActiveFlag_EOC+0x1a>
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	0018      	movs	r0, r3
 80031bc:	46bd      	mov	sp, r7
 80031be:	b002      	add	sp, #8
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b082      	sub	sp, #8
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2204      	movs	r2, #4
 80031ce:	601a      	str	r2, [r3, #0]
}
 80031d0:	46c0      	nop			@ (mov r8, r8)
 80031d2:	46bd      	mov	sp, r7
 80031d4:	b002      	add	sp, #8
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80031de:	1d3b      	adds	r3, r7, #4
 80031e0:	0018      	movs	r0, r3
 80031e2:	230c      	movs	r3, #12
 80031e4:	001a      	movs	r2, r3
 80031e6:	2100      	movs	r1, #0
 80031e8:	f00a fc9a 	bl	800db20 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 80031ec:	4b32      	ldr	r3, [pc, #200]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 80031ee:	4a33      	ldr	r2, [pc, #204]	@ (80032bc <MX_ADC1_Init+0xe4>)
 80031f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80031f2:	4b31      	ldr	r3, [pc, #196]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 80031f4:	22c0      	movs	r2, #192	@ 0xc0
 80031f6:	0612      	lsls	r2, r2, #24
 80031f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80031fa:	4b2f      	ldr	r3, [pc, #188]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003200:	4b2d      	ldr	r3, [pc, #180]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 8003202:	2200      	movs	r2, #0
 8003204:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003206:	4b2c      	ldr	r3, [pc, #176]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 8003208:	2200      	movs	r2, #0
 800320a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800320c:	4b2a      	ldr	r3, [pc, #168]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 800320e:	2204      	movs	r2, #4
 8003210:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003212:	4b29      	ldr	r3, [pc, #164]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 8003214:	2200      	movs	r2, #0
 8003216:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8003218:	4b27      	ldr	r3, [pc, #156]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 800321a:	2200      	movs	r2, #0
 800321c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800321e:	4b26      	ldr	r3, [pc, #152]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 8003220:	2200      	movs	r2, #0
 8003222:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8003224:	4b24      	ldr	r3, [pc, #144]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 8003226:	2201      	movs	r2, #1
 8003228:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800322a:	4b23      	ldr	r3, [pc, #140]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 800322c:	2220      	movs	r2, #32
 800322e:	2100      	movs	r1, #0
 8003230:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003232:	4b21      	ldr	r3, [pc, #132]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 8003234:	2200      	movs	r2, #0
 8003236:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003238:	4b1f      	ldr	r3, [pc, #124]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 800323a:	2200      	movs	r2, #0
 800323c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800323e:	4b1e      	ldr	r3, [pc, #120]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 8003240:	222c      	movs	r2, #44	@ 0x2c
 8003242:	2100      	movs	r1, #0
 8003244:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003246:	4b1c      	ldr	r3, [pc, #112]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 8003248:	2200      	movs	r2, #0
 800324a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_19CYCLES_5;
 800324c:	4b1a      	ldr	r3, [pc, #104]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 800324e:	2204      	movs	r2, #4
 8003250:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 8003252:	4b19      	ldr	r3, [pc, #100]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 8003254:	2206      	movs	r2, #6
 8003256:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = ENABLE;
 8003258:	4b17      	ldr	r3, [pc, #92]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 800325a:	223c      	movs	r2, #60	@ 0x3c
 800325c:	2101      	movs	r1, #1
 800325e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_8;
 8003260:	4b15      	ldr	r3, [pc, #84]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 8003262:	2208      	movs	r2, #8
 8003264:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_3;
 8003266:	4b14      	ldr	r3, [pc, #80]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 8003268:	2260      	movs	r2, #96	@ 0x60
 800326a:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800326c:	4b12      	ldr	r3, [pc, #72]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 800326e:	2200      	movs	r2, #0
 8003270:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003272:	4b11      	ldr	r3, [pc, #68]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 8003274:	2200      	movs	r2, #0
 8003276:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003278:	4b0f      	ldr	r3, [pc, #60]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 800327a:	0018      	movs	r0, r3
 800327c:	f002 fee2 	bl	8006044 <HAL_ADC_Init>
 8003280:	1e03      	subs	r3, r0, #0
 8003282:	d001      	beq.n	8003288 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8003284:	f000 fde2 	bl	8003e4c <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8003288:	1d3b      	adds	r3, r7, #4
 800328a:	4a0d      	ldr	r2, [pc, #52]	@ (80032c0 <MX_ADC1_Init+0xe8>)
 800328c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800328e:	1d3b      	adds	r3, r7, #4
 8003290:	2200      	movs	r2, #0
 8003292:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003294:	1d3b      	adds	r3, r7, #4
 8003296:	2200      	movs	r2, #0
 8003298:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800329a:	1d3a      	adds	r2, r7, #4
 800329c:	4b06      	ldr	r3, [pc, #24]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 800329e:	0011      	movs	r1, r2
 80032a0:	0018      	movs	r0, r3
 80032a2:	f003 f877 	bl	8006394 <HAL_ADC_ConfigChannel>
 80032a6:	1e03      	subs	r3, r0, #0
 80032a8:	d001      	beq.n	80032ae <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 80032aa:	f000 fdcf 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 80032ae:	46c0      	nop			@ (mov r8, r8)
 80032b0:	46bd      	mov	sp, r7
 80032b2:	b004      	add	sp, #16
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	46c0      	nop			@ (mov r8, r8)
 80032b8:	20000364 	.word	0x20000364
 80032bc:	40012400 	.word	0x40012400
 80032c0:	b0001000 	.word	0xb0001000

080032c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{
 80032c4:	b590      	push	{r4, r7, lr}
 80032c6:	b095      	sub	sp, #84	@ 0x54
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032cc:	240c      	movs	r4, #12
 80032ce:	193b      	adds	r3, r7, r4
 80032d0:	0018      	movs	r0, r3
 80032d2:	2344      	movs	r3, #68	@ 0x44
 80032d4:	001a      	movs	r2, r3
 80032d6:	2100      	movs	r1, #0
 80032d8:	f00a fc22 	bl	800db20 <memset>
  if (adcHandle->Instance == ADC1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a11      	ldr	r2, [pc, #68]	@ (8003328 <HAL_ADC_MspInit+0x64>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d11c      	bne.n	8003320 <HAL_ADC_MspInit+0x5c>

    /* USER CODE END ADC1_MspInit 0 */

    /** Initializes the peripherals clocks
     */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80032e6:	193b      	adds	r3, r7, r4
 80032e8:	2280      	movs	r2, #128	@ 0x80
 80032ea:	01d2      	lsls	r2, r2, #7
 80032ec:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80032ee:	193b      	adds	r3, r7, r4
 80032f0:	2200      	movs	r2, #0
 80032f2:	63da      	str	r2, [r3, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032f4:	193b      	adds	r3, r7, r4
 80032f6:	0018      	movs	r0, r3
 80032f8:	f004 fbe8 	bl	8007acc <HAL_RCCEx_PeriphCLKConfig>
 80032fc:	1e03      	subs	r3, r0, #0
 80032fe:	d001      	beq.n	8003304 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 8003300:	f000 fda4 	bl	8003e4c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003304:	4b09      	ldr	r3, [pc, #36]	@ (800332c <HAL_ADC_MspInit+0x68>)
 8003306:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003308:	4b08      	ldr	r3, [pc, #32]	@ (800332c <HAL_ADC_MspInit+0x68>)
 800330a:	2180      	movs	r1, #128	@ 0x80
 800330c:	0349      	lsls	r1, r1, #13
 800330e:	430a      	orrs	r2, r1
 8003310:	661a      	str	r2, [r3, #96]	@ 0x60
 8003312:	4b06      	ldr	r3, [pc, #24]	@ (800332c <HAL_ADC_MspInit+0x68>)
 8003314:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003316:	2380      	movs	r3, #128	@ 0x80
 8003318:	035b      	lsls	r3, r3, #13
 800331a:	4013      	ands	r3, r2
 800331c:	60bb      	str	r3, [r7, #8]
 800331e:	68bb      	ldr	r3, [r7, #8]
    /* USER CODE BEGIN ADC1_MspInit 1 */

    /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003320:	46c0      	nop			@ (mov r8, r8)
 8003322:	46bd      	mov	sp, r7
 8003324:	b015      	add	sp, #84	@ 0x54
 8003326:	bd90      	pop	{r4, r7, pc}
 8003328:	40012400 	.word	0x40012400
 800332c:	40021000 	.word	0x40021000

08003330 <get_vbat>:
/* USER CODE BEGIN 1 */

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

uint32_t get_vbat(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
  // printf("get_vbat\n");
  uint32_t Vdda;

  if (ubAdcGrpRegularUnitaryConvStatus != 0)
 8003336:	4b15      	ldr	r3, [pc, #84]	@ (800338c <get_vbat+0x5c>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <get_vbat+0x18>
  {
    ubAdcGrpRegularUnitaryConvStatus = 0;
 8003340:	4b12      	ldr	r3, [pc, #72]	@ (800338c <get_vbat+0x5c>)
 8003342:	2200      	movs	r2, #0
 8003344:	701a      	strb	r2, [r3, #0]
 8003346:	e001      	b.n	800334c <get_vbat+0x1c>
  }
  else
  {
    Error_Handler();
 8003348:	f000 fd80 	bl	8003e4c <Error_Handler>
  }

  /* Init variable containing ADC conversion data */
  uhADCxConvertedData = VAR_CONVERTED_DATA_INIT_VALUE; // VAR_CONVERTED_DATA_INIT_VALUE
 800334c:	4b10      	ldr	r3, [pc, #64]	@ (8003390 <get_vbat+0x60>)
 800334e:	2280      	movs	r2, #128	@ 0x80
 8003350:	0152      	lsls	r2, r2, #5
 8003352:	801a      	strh	r2, [r3, #0]

  /* Perform ADC group regular conversion start, poll for conversion        */
  /* completion.                                                            */
  ConversionStartPoll_ADC_GrpRegular();
 8003354:	f000 f874 	bl	8003440 <ConversionStartPoll_ADC_GrpRegular>

  /* Retrieve ADC conversion data */
  /* (data scale corresponds to ADC resolution: 12 bits) */
  uhADCxConvertedData = LL_ADC_REG_ReadConversionData12(ADC1);
 8003358:	4b0e      	ldr	r3, [pc, #56]	@ (8003394 <get_vbat+0x64>)
 800335a:	0018      	movs	r0, r3
 800335c:	f7ff ff01 	bl	8003162 <LL_ADC_REG_ReadConversionData12>
 8003360:	0003      	movs	r3, r0
 8003362:	001a      	movs	r2, r3
 8003364:	4b0a      	ldr	r3, [pc, #40]	@ (8003390 <get_vbat+0x60>)
 8003366:	801a      	strh	r2, [r3, #0]

  /* Update status variable of ADC unitary conversion */
  ubAdcGrpRegularUnitaryConvStatus = 1;
 8003368:	4b08      	ldr	r3, [pc, #32]	@ (800338c <get_vbat+0x5c>)
 800336a:	2201      	movs	r2, #1
 800336c:	701a      	strb	r2, [r3, #0]

  /* Computation of ADC conversions raw data to physical values           */
  /* using LL ADC driver helper macro.                                    */
  // printf("uhADCxConvertedData:  %d\n", uhADCxConvertedData);

  Vdda = 1220 * 4096 / uhADCxConvertedData;
 800336e:	4b08      	ldr	r3, [pc, #32]	@ (8003390 <get_vbat+0x60>)
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	b29b      	uxth	r3, r3
 8003374:	0019      	movs	r1, r3
 8003376:	4808      	ldr	r0, [pc, #32]	@ (8003398 <get_vbat+0x68>)
 8003378:	f7fc ff6c 	bl	8000254 <__divsi3>
 800337c:	0003      	movs	r3, r0
 800337e:	607b      	str	r3, [r7, #4]
  // printf("Vdda = %d\n", Vdda);
  return Vdda;
 8003380:	687b      	ldr	r3, [r7, #4]
}
 8003382:	0018      	movs	r0, r3
 8003384:	46bd      	mov	sp, r7
 8003386:	b002      	add	sp, #8
 8003388:	bd80      	pop	{r7, pc}
 800338a:	46c0      	nop			@ (mov r8, r8)
 800338c:	20000002 	.word	0x20000002
 8003390:	20000000 	.word	0x20000000
 8003394:	40012400 	.word	0x40012400
 8003398:	004c4000 	.word	0x004c4000

0800339c <Activate_ADC>:
 *                 after this function
 * @param  None
 * @retval None
 */
void Activate_ADC(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
  __IO uint32_t wait_loop_index = 0;
 80033a2:	2300      	movs	r3, #0
 80033a4:	607b      	str	r3, [r7, #4]
  /*       implemented anyway to show the best practice usages                */
  /*       corresponding to reference manual procedure.                       */
  /*       Software can be optimized by removing some of these checks, if     */
  /*       they are not relevant considering previous settings and actions    */
  /*       in user application.                                               */
  if (LL_ADC_IsEnabled(ADC1) == 0)
 80033a6:	4b23      	ldr	r3, [pc, #140]	@ (8003434 <Activate_ADC+0x98>)
 80033a8:	0018      	movs	r0, r3
 80033aa:	f7ff fe6d 	bl	8003088 <LL_ADC_IsEnabled>
 80033ae:	1e03      	subs	r3, r0, #0
 80033b0:	d13b      	bne.n	800342a <Activate_ADC+0x8e>
  {
    /* Disable ADC deep power down (enabled by default after reset state) */
    // LL_ADC_DisableDeepPowerDown(ADC1);

    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(ADC1);
 80033b2:	4b20      	ldr	r3, [pc, #128]	@ (8003434 <Activate_ADC+0x98>)
 80033b4:	0018      	movs	r0, r3
 80033b6:	f7ff fe41 	bl	800303c <LL_ADC_EnableInternalRegulator>
    /* Compute number of CPU cycles to wait for, from delay in us.            */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles (depends on compilation optimization).     */
    /* Note: If system core clock frequency is below 200kHz, wait time        */
    /*       is only a few CPU processing cycles.                             */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 80033ba:	4b1f      	ldr	r3, [pc, #124]	@ (8003438 <Activate_ADC+0x9c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	491f      	ldr	r1, [pc, #124]	@ (800343c <Activate_ADC+0xa0>)
 80033c0:	0018      	movs	r0, r3
 80033c2:	f7fc febd 	bl	8000140 <__udivsi3>
 80033c6:	0003      	movs	r3, r0
 80033c8:	001a      	movs	r2, r3
 80033ca:	0013      	movs	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	189b      	adds	r3, r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	210a      	movs	r1, #10
 80033d4:	0018      	movs	r0, r3
 80033d6:	f7fc feb3 	bl	8000140 <__udivsi3>
 80033da:	0003      	movs	r3, r0
 80033dc:	607b      	str	r3, [r7, #4]
    while (wait_loop_index != 0)
 80033de:	e002      	b.n	80033e6 <Activate_ADC+0x4a>
    {
      wait_loop_index--;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3b01      	subs	r3, #1
 80033e4:	607b      	str	r3, [r7, #4]
    while (wait_loop_index != 0)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1f9      	bne.n	80033e0 <Activate_ADC+0x44>
    }

    /* Run ADC self calibration */
    LL_ADC_StartCalibration(ADC1);
 80033ec:	4b11      	ldr	r3, [pc, #68]	@ (8003434 <Activate_ADC+0x98>)
 80033ee:	0018      	movs	r0, r3
 80033f0:	f7ff fe6c 	bl	80030cc <LL_ADC_StartCalibration>
/* Poll for ADC effectively calibrated */
#if (USE_TIMEOUT == 1)
    Timeout = ADC_CALIBRATION_TIMEOUT_MS;
#endif /* USE_TIMEOUT */

    while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0)
 80033f4:	46c0      	nop			@ (mov r8, r8)
 80033f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003434 <Activate_ADC+0x98>)
 80033f8:	0018      	movs	r0, r3
 80033fa:	f7ff fe7b 	bl	80030f4 <LL_ADC_IsCalibrationOnGoing>
 80033fe:	1e03      	subs	r3, r0, #0
 8003400:	d1f9      	bne.n	80033f6 <Activate_ADC+0x5a>
    }

    /* Delay between ADC end of calibration and ADC enable.                   */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles (depends on compilation optimization).     */
    wait_loop_index = (ADC_DELAY_CALIB_ENABLE_CPU_CYCLES >> 1);
 8003402:	2320      	movs	r3, #32
 8003404:	607b      	str	r3, [r7, #4]
    while (wait_loop_index != 0)
 8003406:	e002      	b.n	800340e <Activate_ADC+0x72>
    {
      wait_loop_index--;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3b01      	subs	r3, #1
 800340c:	607b      	str	r3, [r7, #4]
    while (wait_loop_index != 0)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1f9      	bne.n	8003408 <Activate_ADC+0x6c>
    }

    /* Enable ADC */
    LL_ADC_Enable(ADC1);
 8003414:	4b07      	ldr	r3, [pc, #28]	@ (8003434 <Activate_ADC+0x98>)
 8003416:	0018      	movs	r0, r3
 8003418:	f7ff fe24 	bl	8003064 <LL_ADC_Enable>
/* Poll for ADC ready to convert */
#if (USE_TIMEOUT == 1)
    Timeout = ADC_ENABLE_TIMEOUT_MS;
#endif /* USE_TIMEOUT */

    while (LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0)
 800341c:	46c0      	nop			@ (mov r8, r8)
 800341e:	4b05      	ldr	r3, [pc, #20]	@ (8003434 <Activate_ADC+0x98>)
 8003420:	0018      	movs	r0, r3
 8003422:	f7ff feac 	bl	800317e <LL_ADC_IsActiveFlag_ADRDY>
 8003426:	1e03      	subs	r3, r0, #0
 8003428:	d0f9      	beq.n	800341e <Activate_ADC+0x82>
  /*## Operation on ADC hierarchical scope: ADC group injected ###############*/
  /* Note: No operation on ADC group injected performed here.                 */
  /*       ADC group injected conversions to be performed after this function */
  /*       using function:                                                    */
  /*   																		*/
}
 800342a:	46c0      	nop			@ (mov r8, r8)
 800342c:	46bd      	mov	sp, r7
 800342e:	b002      	add	sp, #8
 8003430:	bd80      	pop	{r7, pc}
 8003432:	46c0      	nop			@ (mov r8, r8)
 8003434:	40012400 	.word	0x40012400
 8003438:	20000004 	.word	0x20000004
 800343c:	00030d40 	.word	0x00030d40

08003440 <ConversionStartPoll_ADC_GrpRegular>:
 *         external trigger, ADC group regular conversion stop must be added.
 * @param  None
 * @retval None
 */
void ConversionStartPoll_ADC_GrpRegular(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /*       implemented anyway to show the best practice usages                */
  /*       corresponding to reference manual procedure.                       */
  /*       Software can be optimized by removing some of these checks, if     */
  /*       they are not relevant considering previous settings and actions    */
  /*       in user application.                                               */
  if ((LL_ADC_IsEnabled(ADC1) == 1) &&
 8003444:	4b13      	ldr	r3, [pc, #76]	@ (8003494 <ConversionStartPoll_ADC_GrpRegular+0x54>)
 8003446:	0018      	movs	r0, r3
 8003448:	f7ff fe1e 	bl	8003088 <LL_ADC_IsEnabled>
 800344c:	0003      	movs	r3, r0
 800344e:	2b01      	cmp	r3, #1
 8003450:	d110      	bne.n	8003474 <ConversionStartPoll_ADC_GrpRegular+0x34>
      (LL_ADC_IsDisableOngoing(ADC1) == 0) &&
 8003452:	4b10      	ldr	r3, [pc, #64]	@ (8003494 <ConversionStartPoll_ADC_GrpRegular+0x54>)
 8003454:	0018      	movs	r0, r3
 8003456:	f7ff fe28 	bl	80030aa <LL_ADC_IsDisableOngoing>
 800345a:	1e03      	subs	r3, r0, #0
  if ((LL_ADC_IsEnabled(ADC1) == 1) &&
 800345c:	d10a      	bne.n	8003474 <ConversionStartPoll_ADC_GrpRegular+0x34>
      (LL_ADC_REG_IsConversionOngoing(ADC1) == 0))
 800345e:	4b0d      	ldr	r3, [pc, #52]	@ (8003494 <ConversionStartPoll_ADC_GrpRegular+0x54>)
 8003460:	0018      	movs	r0, r3
 8003462:	f7ff fe6d 	bl	8003140 <LL_ADC_REG_IsConversionOngoing>
 8003466:	1e03      	subs	r3, r0, #0
      (LL_ADC_IsDisableOngoing(ADC1) == 0) &&
 8003468:	d104      	bne.n	8003474 <ConversionStartPoll_ADC_GrpRegular+0x34>
  {
    LL_ADC_REG_StartConversion(ADC1);
 800346a:	4b0a      	ldr	r3, [pc, #40]	@ (8003494 <ConversionStartPoll_ADC_GrpRegular+0x54>)
 800346c:	0018      	movs	r0, r3
 800346e:	f7ff fe55 	bl	800311c <LL_ADC_REG_StartConversion>
 8003472:	e001      	b.n	8003478 <ConversionStartPoll_ADC_GrpRegular+0x38>
  }
  else
  {
    /* Error: ADC conversion start could not be performed */
    Error_Handler();
 8003474:	f000 fcea 	bl	8003e4c <Error_Handler>

#if (USE_TIMEOUT == 1)
  Timeout = ADC_UNITARY_CONVERSION_TIMEOUT_MS;
#endif /* USE_TIMEOUT */

  while (LL_ADC_IsActiveFlag_EOC(ADC1) == 0)
 8003478:	46c0      	nop			@ (mov r8, r8)
 800347a:	4b06      	ldr	r3, [pc, #24]	@ (8003494 <ConversionStartPoll_ADC_GrpRegular+0x54>)
 800347c:	0018      	movs	r0, r3
 800347e:	f7ff fe8f 	bl	80031a0 <LL_ADC_IsActiveFlag_EOC>
 8003482:	1e03      	subs	r3, r0, #0
 8003484:	d0f9      	beq.n	800347a <ConversionStartPoll_ADC_GrpRegular+0x3a>
      }
    }
#endif /* USE_TIMEOUT */
  }

  LL_ADC_ClearFlag_EOC(ADC1);
 8003486:	4b03      	ldr	r3, [pc, #12]	@ (8003494 <ConversionStartPoll_ADC_GrpRegular+0x54>)
 8003488:	0018      	movs	r0, r3
 800348a:	f7ff fe9a 	bl	80031c2 <LL_ADC_ClearFlag_EOC>
}
 800348e:	46c0      	nop			@ (mov r8, r8)
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40012400 	.word	0x40012400

08003498 <MX_GPIO_Init>:
/** Configure pins
     PA13 (SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8003498:	b590      	push	{r4, r7, lr}
 800349a:	b08b      	sub	sp, #44	@ 0x2c
 800349c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800349e:	2414      	movs	r4, #20
 80034a0:	193b      	adds	r3, r7, r4
 80034a2:	0018      	movs	r0, r3
 80034a4:	2314      	movs	r3, #20
 80034a6:	001a      	movs	r2, r3
 80034a8:	2100      	movs	r1, #0
 80034aa:	f00a fb39 	bl	800db20 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ae:	4b78      	ldr	r3, [pc, #480]	@ (8003690 <MX_GPIO_Init+0x1f8>)
 80034b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034b2:	4b77      	ldr	r3, [pc, #476]	@ (8003690 <MX_GPIO_Init+0x1f8>)
 80034b4:	2104      	movs	r1, #4
 80034b6:	430a      	orrs	r2, r1
 80034b8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80034ba:	4b75      	ldr	r3, [pc, #468]	@ (8003690 <MX_GPIO_Init+0x1f8>)
 80034bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034be:	2204      	movs	r2, #4
 80034c0:	4013      	ands	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80034c6:	4b72      	ldr	r3, [pc, #456]	@ (8003690 <MX_GPIO_Init+0x1f8>)
 80034c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034ca:	4b71      	ldr	r3, [pc, #452]	@ (8003690 <MX_GPIO_Init+0x1f8>)
 80034cc:	2120      	movs	r1, #32
 80034ce:	430a      	orrs	r2, r1
 80034d0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80034d2:	4b6f      	ldr	r3, [pc, #444]	@ (8003690 <MX_GPIO_Init+0x1f8>)
 80034d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034d6:	2220      	movs	r2, #32
 80034d8:	4013      	ands	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034de:	4b6c      	ldr	r3, [pc, #432]	@ (8003690 <MX_GPIO_Init+0x1f8>)
 80034e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034e2:	4b6b      	ldr	r3, [pc, #428]	@ (8003690 <MX_GPIO_Init+0x1f8>)
 80034e4:	2101      	movs	r1, #1
 80034e6:	430a      	orrs	r2, r1
 80034e8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80034ea:	4b69      	ldr	r3, [pc, #420]	@ (8003690 <MX_GPIO_Init+0x1f8>)
 80034ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ee:	2201      	movs	r2, #1
 80034f0:	4013      	ands	r3, r2
 80034f2:	60bb      	str	r3, [r7, #8]
 80034f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034f6:	4b66      	ldr	r3, [pc, #408]	@ (8003690 <MX_GPIO_Init+0x1f8>)
 80034f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034fa:	4b65      	ldr	r3, [pc, #404]	@ (8003690 <MX_GPIO_Init+0x1f8>)
 80034fc:	2102      	movs	r1, #2
 80034fe:	430a      	orrs	r2, r1
 8003500:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003502:	4b63      	ldr	r3, [pc, #396]	@ (8003690 <MX_GPIO_Init+0x1f8>)
 8003504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003506:	2202      	movs	r2, #2
 8003508:	4013      	ands	r3, r2
 800350a:	607b      	str	r3, [r7, #4]
 800350c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|WDI_Pin|PAPER_ON_Pin, GPIO_PIN_RESET);
 800350e:	4961      	ldr	r1, [pc, #388]	@ (8003694 <MX_GPIO_Init+0x1fc>)
 8003510:	4b61      	ldr	r3, [pc, #388]	@ (8003698 <MX_GPIO_Init+0x200>)
 8003512:	2200      	movs	r2, #0
 8003514:	0018      	movs	r0, r3
 8003516:	f003 fad1 	bl	8006abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_RTC_GPIO_Port, CE_RTC_Pin, GPIO_PIN_SET);
 800351a:	2380      	movs	r3, #128	@ 0x80
 800351c:	01db      	lsls	r3, r3, #7
 800351e:	485e      	ldr	r0, [pc, #376]	@ (8003698 <MX_GPIO_Init+0x200>)
 8003520:	2201      	movs	r2, #1
 8003522:	0019      	movs	r1, r3
 8003524:	f003 faca 	bl	8006abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D_C_Pin|RST_Pin, GPIO_PIN_RESET);
 8003528:	2390      	movs	r3, #144	@ 0x90
 800352a:	0119      	lsls	r1, r3, #4
 800352c:	23a0      	movs	r3, #160	@ 0xa0
 800352e:	05db      	lsls	r3, r3, #23
 8003530:	2200      	movs	r2, #0
 8003532:	0018      	movs	r0, r3
 8003534:	f003 fac2 	bl	8006abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSB_Pin|CS_Pin, GPIO_PIN_SET);
 8003538:	23a0      	movs	r3, #160	@ 0xa0
 800353a:	0159      	lsls	r1, r3, #5
 800353c:	23a0      	movs	r3, #160	@ 0xa0
 800353e:	05db      	lsls	r3, r3, #23
 8003540:	2201      	movs	r2, #1
 8003542:	0018      	movs	r0, r3
 8003544:	f003 faba 	bl	8006abc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003548:	193b      	adds	r3, r7, r4
 800354a:	22e0      	movs	r2, #224	@ 0xe0
 800354c:	0212      	lsls	r2, r2, #8
 800354e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003550:	193b      	adds	r3, r7, r4
 8003552:	2203      	movs	r2, #3
 8003554:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003556:	193b      	adds	r3, r7, r4
 8003558:	2200      	movs	r2, #0
 800355a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800355c:	193b      	adds	r3, r7, r4
 800355e:	4a4f      	ldr	r2, [pc, #316]	@ (800369c <MX_GPIO_Init+0x204>)
 8003560:	0019      	movs	r1, r3
 8003562:	0010      	movs	r0, r2
 8003564:	f003 f936 	bl	80067d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003568:	193b      	adds	r3, r7, r4
 800356a:	220f      	movs	r2, #15
 800356c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800356e:	193b      	adds	r3, r7, r4
 8003570:	2203      	movs	r2, #3
 8003572:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003574:	193b      	adds	r3, r7, r4
 8003576:	2200      	movs	r2, #0
 8003578:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800357a:	193b      	adds	r3, r7, r4
 800357c:	4a48      	ldr	r2, [pc, #288]	@ (80036a0 <MX_GPIO_Init+0x208>)
 800357e:	0019      	movs	r1, r3
 8003580:	0010      	movs	r0, r2
 8003582:	f003 f927 	bl	80067d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15;
 8003586:	193b      	adds	r3, r7, r4
 8003588:	4a46      	ldr	r2, [pc, #280]	@ (80036a4 <MX_GPIO_Init+0x20c>)
 800358a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800358c:	193b      	adds	r3, r7, r4
 800358e:	2203      	movs	r2, #3
 8003590:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003592:	193b      	adds	r3, r7, r4
 8003594:	2200      	movs	r2, #0
 8003596:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003598:	193a      	adds	r2, r7, r4
 800359a:	23a0      	movs	r3, #160	@ 0xa0
 800359c:	05db      	lsls	r3, r3, #23
 800359e:	0011      	movs	r1, r2
 80035a0:	0018      	movs	r0, r3
 80035a2:	f003 f917 	bl	80067d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB10 PB11
                           PB3 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 80035a6:	193b      	adds	r3, r7, r4
 80035a8:	4a3f      	ldr	r2, [pc, #252]	@ (80036a8 <MX_GPIO_Init+0x210>)
 80035aa:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035ac:	193b      	adds	r3, r7, r4
 80035ae:	2203      	movs	r2, #3
 80035b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b2:	193b      	adds	r3, r7, r4
 80035b4:	2200      	movs	r2, #0
 80035b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035b8:	193b      	adds	r3, r7, r4
 80035ba:	4a37      	ldr	r2, [pc, #220]	@ (8003698 <MX_GPIO_Init+0x200>)
 80035bc:	0019      	movs	r1, r3
 80035be:	0010      	movs	r0, r2
 80035c0:	f003 f908 	bl	80067d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|WDI_Pin|PAPER_ON_Pin;
 80035c4:	193b      	adds	r3, r7, r4
 80035c6:	4a33      	ldr	r2, [pc, #204]	@ (8003694 <MX_GPIO_Init+0x1fc>)
 80035c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ca:	193b      	adds	r3, r7, r4
 80035cc:	2201      	movs	r2, #1
 80035ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d0:	193b      	adds	r3, r7, r4
 80035d2:	2200      	movs	r2, #0
 80035d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d6:	193b      	adds	r3, r7, r4
 80035d8:	2200      	movs	r2, #0
 80035da:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035dc:	193b      	adds	r3, r7, r4
 80035de:	4a2e      	ldr	r2, [pc, #184]	@ (8003698 <MX_GPIO_Init+0x200>)
 80035e0:	0019      	movs	r1, r3
 80035e2:	0010      	movs	r0, r2
 80035e4:	f003 f8f6 	bl	80067d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NIRQ_Pin;
 80035e8:	0021      	movs	r1, r4
 80035ea:	187b      	adds	r3, r7, r1
 80035ec:	2280      	movs	r2, #128	@ 0x80
 80035ee:	0152      	lsls	r2, r2, #5
 80035f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035f2:	000c      	movs	r4, r1
 80035f4:	193b      	adds	r3, r7, r4
 80035f6:	2200      	movs	r2, #0
 80035f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fa:	193b      	adds	r3, r7, r4
 80035fc:	2200      	movs	r2, #0
 80035fe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NIRQ_GPIO_Port, &GPIO_InitStruct);
 8003600:	193b      	adds	r3, r7, r4
 8003602:	4a25      	ldr	r2, [pc, #148]	@ (8003698 <MX_GPIO_Init+0x200>)
 8003604:	0019      	movs	r1, r3
 8003606:	0010      	movs	r0, r2
 8003608:	f003 f8e4 	bl	80067d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_RTC_Pin;
 800360c:	0021      	movs	r1, r4
 800360e:	187b      	adds	r3, r7, r1
 8003610:	2280      	movs	r2, #128	@ 0x80
 8003612:	01d2      	lsls	r2, r2, #7
 8003614:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003616:	000c      	movs	r4, r1
 8003618:	193b      	adds	r3, r7, r4
 800361a:	2201      	movs	r2, #1
 800361c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361e:	193b      	adds	r3, r7, r4
 8003620:	2200      	movs	r2, #0
 8003622:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003624:	193b      	adds	r3, r7, r4
 8003626:	2201      	movs	r2, #1
 8003628:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CE_RTC_GPIO_Port, &GPIO_InitStruct);
 800362a:	193b      	adds	r3, r7, r4
 800362c:	4a1a      	ldr	r2, [pc, #104]	@ (8003698 <MX_GPIO_Init+0x200>)
 800362e:	0019      	movs	r1, r3
 8003630:	0010      	movs	r0, r2
 8003632:	f003 f8cf 	bl	80067d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = D_C_Pin|CSB_Pin|RST_Pin|CS_Pin;
 8003636:	0021      	movs	r1, r4
 8003638:	187b      	adds	r3, r7, r1
 800363a:	22e8      	movs	r2, #232	@ 0xe8
 800363c:	0152      	lsls	r2, r2, #5
 800363e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003640:	000c      	movs	r4, r1
 8003642:	193b      	adds	r3, r7, r4
 8003644:	2201      	movs	r2, #1
 8003646:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003648:	193b      	adds	r3, r7, r4
 800364a:	2200      	movs	r2, #0
 800364c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800364e:	193b      	adds	r3, r7, r4
 8003650:	2200      	movs	r2, #0
 8003652:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003654:	193a      	adds	r2, r7, r4
 8003656:	23a0      	movs	r3, #160	@ 0xa0
 8003658:	05db      	lsls	r3, r3, #23
 800365a:	0011      	movs	r1, r2
 800365c:	0018      	movs	r0, r3
 800365e:	f003 f8b9 	bl	80067d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 8003662:	0021      	movs	r1, r4
 8003664:	187b      	adds	r3, r7, r1
 8003666:	2280      	movs	r2, #128	@ 0x80
 8003668:	0092      	lsls	r2, r2, #2
 800366a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800366c:	187b      	adds	r3, r7, r1
 800366e:	2200      	movs	r2, #0
 8003670:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003672:	187b      	adds	r3, r7, r1
 8003674:	2200      	movs	r2, #0
 8003676:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 8003678:	187a      	adds	r2, r7, r1
 800367a:	23a0      	movs	r3, #160	@ 0xa0
 800367c:	05db      	lsls	r3, r3, #23
 800367e:	0011      	movs	r1, r2
 8003680:	0018      	movs	r0, r3
 8003682:	f003 f8a7 	bl	80067d4 <HAL_GPIO_Init>

}
 8003686:	46c0      	nop			@ (mov r8, r8)
 8003688:	46bd      	mov	sp, r7
 800368a:	b00b      	add	sp, #44	@ 0x2c
 800368c:	bd90      	pop	{r4, r7, pc}
 800368e:	46c0      	nop			@ (mov r8, r8)
 8003690:	40021000 	.word	0x40021000
 8003694:	0000a002 	.word	0x0000a002
 8003698:	50000400 	.word	0x50000400
 800369c:	50000800 	.word	0x50000800
 80036a0:	50001400 	.word	0x50001400
 80036a4:	00008013 	.word	0x00008013
 80036a8:	00000f3d 	.word	0x00000f3d

080036ac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80036b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003720 <MX_I2C1_Init+0x74>)
 80036b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003724 <MX_I2C1_Init+0x78>)
 80036b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80036b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003720 <MX_I2C1_Init+0x74>)
 80036b8:	4a1b      	ldr	r2, [pc, #108]	@ (8003728 <MX_I2C1_Init+0x7c>)
 80036ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80036bc:	4b18      	ldr	r3, [pc, #96]	@ (8003720 <MX_I2C1_Init+0x74>)
 80036be:	2200      	movs	r2, #0
 80036c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036c2:	4b17      	ldr	r3, [pc, #92]	@ (8003720 <MX_I2C1_Init+0x74>)
 80036c4:	2201      	movs	r2, #1
 80036c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80036c8:	4b15      	ldr	r3, [pc, #84]	@ (8003720 <MX_I2C1_Init+0x74>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80036ce:	4b14      	ldr	r3, [pc, #80]	@ (8003720 <MX_I2C1_Init+0x74>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80036d4:	4b12      	ldr	r3, [pc, #72]	@ (8003720 <MX_I2C1_Init+0x74>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80036da:	4b11      	ldr	r3, [pc, #68]	@ (8003720 <MX_I2C1_Init+0x74>)
 80036dc:	2200      	movs	r2, #0
 80036de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80036e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003720 <MX_I2C1_Init+0x74>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80036e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003720 <MX_I2C1_Init+0x74>)
 80036e8:	0018      	movs	r0, r3
 80036ea:	f003 fa05 	bl	8006af8 <HAL_I2C_Init>
 80036ee:	1e03      	subs	r3, r0, #0
 80036f0:	d001      	beq.n	80036f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80036f2:	f000 fbab 	bl	8003e4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80036f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003720 <MX_I2C1_Init+0x74>)
 80036f8:	2100      	movs	r1, #0
 80036fa:	0018      	movs	r0, r3
 80036fc:	f003 faa2 	bl	8006c44 <HAL_I2CEx_ConfigAnalogFilter>
 8003700:	1e03      	subs	r3, r0, #0
 8003702:	d001      	beq.n	8003708 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003704:	f000 fba2 	bl	8003e4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003708:	4b05      	ldr	r3, [pc, #20]	@ (8003720 <MX_I2C1_Init+0x74>)
 800370a:	2100      	movs	r1, #0
 800370c:	0018      	movs	r0, r3
 800370e:	f003 fae5 	bl	8006cdc <HAL_I2CEx_ConfigDigitalFilter>
 8003712:	1e03      	subs	r3, r0, #0
 8003714:	d001      	beq.n	800371a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003716:	f000 fb99 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800371a:	46c0      	nop			@ (mov r8, r8)
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	200003c8 	.word	0x200003c8
 8003724:	40005400 	.word	0x40005400
 8003728:	00303d5b 	.word	0x00303d5b

0800372c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800372c:	b590      	push	{r4, r7, lr}
 800372e:	b09b      	sub	sp, #108	@ 0x6c
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003734:	2354      	movs	r3, #84	@ 0x54
 8003736:	18fb      	adds	r3, r7, r3
 8003738:	0018      	movs	r0, r3
 800373a:	2314      	movs	r3, #20
 800373c:	001a      	movs	r2, r3
 800373e:	2100      	movs	r1, #0
 8003740:	f00a f9ee 	bl	800db20 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003744:	2410      	movs	r4, #16
 8003746:	193b      	adds	r3, r7, r4
 8003748:	0018      	movs	r0, r3
 800374a:	2344      	movs	r3, #68	@ 0x44
 800374c:	001a      	movs	r2, r3
 800374e:	2100      	movs	r1, #0
 8003750:	f00a f9e6 	bl	800db20 <memset>
  if(i2cHandle->Instance==I2C1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a22      	ldr	r2, [pc, #136]	@ (80037e4 <HAL_I2C_MspInit+0xb8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d13d      	bne.n	80037da <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800375e:	193b      	adds	r3, r7, r4
 8003760:	2220      	movs	r2, #32
 8003762:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003764:	193b      	adds	r3, r7, r4
 8003766:	2200      	movs	r2, #0
 8003768:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800376a:	193b      	adds	r3, r7, r4
 800376c:	0018      	movs	r0, r3
 800376e:	f004 f9ad 	bl	8007acc <HAL_RCCEx_PeriphCLKConfig>
 8003772:	1e03      	subs	r3, r0, #0
 8003774:	d001      	beq.n	800377a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003776:	f000 fb69 	bl	8003e4c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800377a:	4b1b      	ldr	r3, [pc, #108]	@ (80037e8 <HAL_I2C_MspInit+0xbc>)
 800377c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800377e:	4b1a      	ldr	r3, [pc, #104]	@ (80037e8 <HAL_I2C_MspInit+0xbc>)
 8003780:	2102      	movs	r1, #2
 8003782:	430a      	orrs	r2, r1
 8003784:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003786:	4b18      	ldr	r3, [pc, #96]	@ (80037e8 <HAL_I2C_MspInit+0xbc>)
 8003788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800378a:	2202      	movs	r2, #2
 800378c:	4013      	ands	r3, r2
 800378e:	60fb      	str	r3, [r7, #12]
 8003790:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003792:	2154      	movs	r1, #84	@ 0x54
 8003794:	187b      	adds	r3, r7, r1
 8003796:	22c0      	movs	r2, #192	@ 0xc0
 8003798:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800379a:	187b      	adds	r3, r7, r1
 800379c:	2212      	movs	r2, #18
 800379e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a0:	187b      	adds	r3, r7, r1
 80037a2:	2200      	movs	r2, #0
 80037a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a6:	187b      	adds	r3, r7, r1
 80037a8:	2200      	movs	r2, #0
 80037aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80037ac:	187b      	adds	r3, r7, r1
 80037ae:	2204      	movs	r2, #4
 80037b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037b2:	187b      	adds	r3, r7, r1
 80037b4:	4a0d      	ldr	r2, [pc, #52]	@ (80037ec <HAL_I2C_MspInit+0xc0>)
 80037b6:	0019      	movs	r1, r3
 80037b8:	0010      	movs	r0, r2
 80037ba:	f003 f80b 	bl	80067d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80037be:	4b0a      	ldr	r3, [pc, #40]	@ (80037e8 <HAL_I2C_MspInit+0xbc>)
 80037c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80037c2:	4b09      	ldr	r3, [pc, #36]	@ (80037e8 <HAL_I2C_MspInit+0xbc>)
 80037c4:	2180      	movs	r1, #128	@ 0x80
 80037c6:	0389      	lsls	r1, r1, #14
 80037c8:	430a      	orrs	r2, r1
 80037ca:	659a      	str	r2, [r3, #88]	@ 0x58
 80037cc:	4b06      	ldr	r3, [pc, #24]	@ (80037e8 <HAL_I2C_MspInit+0xbc>)
 80037ce:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80037d0:	2380      	movs	r3, #128	@ 0x80
 80037d2:	039b      	lsls	r3, r3, #14
 80037d4:	4013      	ands	r3, r2
 80037d6:	60bb      	str	r3, [r7, #8]
 80037d8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80037da:	46c0      	nop			@ (mov r8, r8)
 80037dc:	46bd      	mov	sp, r7
 80037de:	b01b      	add	sp, #108	@ 0x6c
 80037e0:	bd90      	pop	{r4, r7, pc}
 80037e2:	46c0      	nop			@ (mov r8, r8)
 80037e4:	40005400 	.word	0x40005400
 80037e8:	40021000 	.word	0x40021000
 80037ec:	50000400 	.word	0x50000400

080037f0 <LL_SPI_Enable>:
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2240      	movs	r2, #64	@ 0x40
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	601a      	str	r2, [r3, #0]
}
 8003804:	46c0      	nop			@ (mov r8, r8)
 8003806:	46bd      	mov	sp, r7
 8003808:	b002      	add	sp, #8
 800380a:	bd80      	pop	{r7, pc}

0800380c <LL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @rmtoll DBG_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003810:	4b04      	ldr	r3, [pc, #16]	@ (8003824 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	4b03      	ldr	r3, [pc, #12]	@ (8003824 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8003816:	2102      	movs	r1, #2
 8003818:	438a      	bics	r2, r1
 800381a:	605a      	str	r2, [r3, #4]
}
 800381c:	46c0      	nop			@ (mov r8, r8)
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	46c0      	nop			@ (mov r8, r8)
 8003824:	40015800 	.word	0x40015800

08003828 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800382a:	b089      	sub	sp, #36	@ 0x24
 800382c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */

  volatile int8_t rslt;
  uint8_t dev_addr = 0;
 800382e:	1cbb      	adds	r3, r7, #2
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
  dev.intf_ptr = &dev_addr;
 8003834:	4be1      	ldr	r3, [pc, #900]	@ (8003bbc <main+0x394>)
 8003836:	1cba      	adds	r2, r7, #2
 8003838:	605a      	str	r2, [r3, #4]
  dev.intf = BME280_SPI_INTF;
 800383a:	4be0      	ldr	r3, [pc, #896]	@ (8003bbc <main+0x394>)
 800383c:	2200      	movs	r2, #0
 800383e:	721a      	strb	r2, [r3, #8]
  dev.read = user_spi_read;
 8003840:	4bde      	ldr	r3, [pc, #888]	@ (8003bbc <main+0x394>)
 8003842:	4adf      	ldr	r2, [pc, #892]	@ (8003bc0 <main+0x398>)
 8003844:	60da      	str	r2, [r3, #12]
  dev.write = user_spi_write;
 8003846:	4bdd      	ldr	r3, [pc, #884]	@ (8003bbc <main+0x394>)
 8003848:	4ade      	ldr	r2, [pc, #888]	@ (8003bc4 <main+0x39c>)
 800384a:	611a      	str	r2, [r3, #16]
  dev.delay_us = user_delay_us;
 800384c:	4bdb      	ldr	r3, [pc, #876]	@ (8003bbc <main+0x394>)
 800384e:	4ade      	ldr	r2, [pc, #888]	@ (8003bc8 <main+0x3a0>)
 8003850:	615a      	str	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003852:	f002 fa5c 	bl	8005d0e <HAL_Init>

  /* USER CODE BEGIN Init */
  uint16_t h_;
  uint16_t t_;
  uint16_t vbat_output_flag;
  uint8_t initialized_flag = 0;
 8003856:	2517      	movs	r5, #23
 8003858:	197b      	adds	r3, r7, r5
 800385a:	2200      	movs	r2, #0
 800385c:	701a      	strb	r2, [r3, #0]
  uint8_t temperature_new = 0;
 800385e:	230f      	movs	r3, #15
 8003860:	18fb      	adds	r3, r7, r3
 8003862:	2200      	movs	r2, #0
 8003864:	701a      	strb	r2, [r3, #0]
  uint8_t battery_new = 0;
 8003866:	2316      	movs	r3, #22
 8003868:	18fb      	adds	r3, r7, r3
 800386a:	2200      	movs	r2, #0
 800386c:	701a      	strb	r2, [r3, #0]
  uint8_t humidity_new = 0;
 800386e:	2315      	movs	r3, #21
 8003870:	18fb      	adds	r3, r7, r3
 8003872:	2200      	movs	r2, #0
 8003874:	701a      	strb	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003876:	f000 f9cd 	bl	8003c14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800387a:	f7ff fe0d 	bl	8003498 <MX_GPIO_Init>
  MX_ADC1_Init();
 800387e:	f7ff fcab 	bl	80031d8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8003882:	f7ff ff13 	bl	80036ac <MX_I2C1_Init>
  MX_RTC_Init();
 8003886:	f001 ff43 	bl	8005710 <MX_RTC_Init>
  MX_SPI1_Init();
 800388a:	f001 ffbb 	bl	8005804 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800388e:	f002 f967 	bl	8005b60 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  LL_DBGMCU_DisableDBGStopMode(); // !!!__ Disable debug in stop mode __!!!
 8003892:	f7ff ffbb 	bl	800380c <LL_DBGMCU_DisableDBGStopMode>
                                  //	LL_DBGMCU_EnableDBGStopMode();
  LED1_ON();
 8003896:	4bcd      	ldr	r3, [pc, #820]	@ (8003bcc <main+0x3a4>)
 8003898:	2202      	movs	r2, #2
 800389a:	619a      	str	r2, [r3, #24]
  LL_SPI_Enable(SPI1);
 800389c:	4bcc      	ldr	r3, [pc, #816]	@ (8003bd0 <main+0x3a8>)
 800389e:	0018      	movs	r0, r3
 80038a0:	f7ff ffa6 	bl	80037f0 <LL_SPI_Enable>

  //  ==============___ Power ON __=======================

  uint8_t wdalarm = read(REG_WEEKDAY_ALARM); // REG_WEEKDAY_ALARM  0x0e;
 80038a4:	4bcb      	ldr	r3, [pc, #812]	@ (8003bd4 <main+0x3ac>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	260e      	movs	r6, #14
 80038aa:	19bc      	adds	r4, r7, r6
 80038ac:	0018      	movs	r0, r3
 80038ae:	f7ff fb9f 	bl	8002ff0 <read>
 80038b2:	0003      	movs	r3, r0
 80038b4:	7023      	strb	r3, [r4, #0]
  if ((wdalarm & 0xf8) != 0xa0)              // ********    Startup from power up.   ********
 80038b6:	19bb      	adds	r3, r7, r6
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	22f8      	movs	r2, #248	@ 0xf8
 80038bc:	4013      	ands	r3, r2
 80038be:	2ba0      	cmp	r3, #160	@ 0xa0
 80038c0:	d025      	beq.n	800390e <main+0xe6>
  {
    uint32_t clk = HAL_RCC_GetSysClockFreq();
 80038c2:	f003 ffd9 	bl	8007878 <HAL_RCC_GetSysClockFreq>
 80038c6:	0003      	movs	r3, r0
 80038c8:	60bb      	str	r3, [r7, #8]
    printf("\nMAIN. First power ON.   %d\n", clk);
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	4bc2      	ldr	r3, [pc, #776]	@ (8003bd8 <main+0x3b0>)
 80038ce:	0011      	movs	r1, r2
 80038d0:	0018      	movs	r0, r3
 80038d2:	f001 fecb 	bl	800566c <printf_>

    vbat_output_flag = (BAT_OUTPUT_PERIOD + 1); // For first time output must be bigger 15
 80038d6:	003b      	movs	r3, r7
 80038d8:	2210      	movs	r2, #16
 80038da:	801a      	strh	r2, [r3, #0]
    resetConfig(0);
 80038dc:	2000      	movs	r0, #0
 80038de:	f7fe fe2d 	bl	800253c <resetConfig>
    write(REG_WEEKDAY_ALARM, 0xa0); // Magic 0xa0
 80038e2:	4bbc      	ldr	r3, [pc, #752]	@ (8003bd4 <main+0x3ac>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	21a0      	movs	r1, #160	@ 0xa0
 80038e8:	0018      	movs	r0, r3
 80038ea:	f7ff fb91 	bl	8003010 <write>

    write(H_old_RAM_address, 0);
 80038ee:	2100      	movs	r1, #0
 80038f0:	2040      	movs	r0, #64	@ 0x40
 80038f2:	f7ff fb8d 	bl	8003010 <write>
    write(T_old_RAM_address, 0);
 80038f6:	2100      	movs	r1, #0
 80038f8:	2042      	movs	r0, #66	@ 0x42
 80038fa:	f7ff fb89 	bl	8003010 <write>
    write(vbat_old_RAM_address, 0);
 80038fe:	2100      	movs	r1, #0
 8003900:	2044      	movs	r0, #68	@ 0x44
 8003902:	f7ff fb85 	bl	8003010 <write>

    initialized_flag = 1; // Flag that ESP is initialized, to do it only once
 8003906:	197b      	adds	r3, r7, r5
 8003908:	2201      	movs	r2, #1
 800390a:	701a      	strb	r2, [r3, #0]
 800390c:	e021      	b.n	8003952 <main+0x12a>
  }
  else
  {
    read_RTCRam(vbat_output_flag_address, &vbat_output_flag, 1); // Read vbat_output_flag from RTC RAM
 800390e:	003b      	movs	r3, r7
 8003910:	2201      	movs	r2, #1
 8003912:	0019      	movs	r1, r3
 8003914:	2046      	movs	r0, #70	@ 0x46
 8003916:	f000 f9c5 	bl	8003ca4 <read_RTCRam>
    vbat_output_flag++;
 800391a:	003b      	movs	r3, r7
 800391c:	881b      	ldrh	r3, [r3, #0]
 800391e:	3301      	adds	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	003b      	movs	r3, r7
 8003924:	801a      	strh	r2, [r3, #0]
    printf("\nMAIN. Startup from RTC\n");
 8003926:	4bad      	ldr	r3, [pc, #692]	@ (8003bdc <main+0x3b4>)
 8003928:	0018      	movs	r0, r3
 800392a:	f001 fe9f 	bl	800566c <printf_>
    //hex_dump();

    read_RTCRam(H_old_RAM_address, &H_old, 1);
 800392e:	4bac      	ldr	r3, [pc, #688]	@ (8003be0 <main+0x3b8>)
 8003930:	2201      	movs	r2, #1
 8003932:	0019      	movs	r1, r3
 8003934:	2040      	movs	r0, #64	@ 0x40
 8003936:	f000 f9b5 	bl	8003ca4 <read_RTCRam>
    read_RTCRam(T_old_RAM_address, &T_old, 1);
 800393a:	4baa      	ldr	r3, [pc, #680]	@ (8003be4 <main+0x3bc>)
 800393c:	2201      	movs	r2, #1
 800393e:	0019      	movs	r1, r3
 8003940:	2042      	movs	r0, #66	@ 0x42
 8003942:	f000 f9af 	bl	8003ca4 <read_RTCRam>
    read_RTCRam(vbat_old_RAM_address, &vbat_old, 1);
 8003946:	4ba8      	ldr	r3, [pc, #672]	@ (8003be8 <main+0x3c0>)
 8003948:	2201      	movs	r2, #1
 800394a:	0019      	movs	r1, r3
 800394c:	2044      	movs	r0, #68	@ 0x44
 800394e:	f000 f9a9 	bl	8003ca4 <read_RTCRam>

  // printf("vBat = %d\n", vBat);

  // ##################________measureME280_________#########################

  dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8003952:	4b9a      	ldr	r3, [pc, #616]	@ (8003bbc <main+0x394>)
 8003954:	2242      	movs	r2, #66	@ 0x42
 8003956:	2101      	movs	r1, #1
 8003958:	5499      	strb	r1, [r3, r2]
  dev.settings.osr_p = BME280_NO_OVERSAMPLING; // UINT8_C(0x00)
 800395a:	4b98      	ldr	r3, [pc, #608]	@ (8003bbc <main+0x394>)
 800395c:	2240      	movs	r2, #64	@ 0x40
 800395e:	2100      	movs	r1, #0
 8003960:	5499      	strb	r1, [r3, r2]
  dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8003962:	4b96      	ldr	r3, [pc, #600]	@ (8003bbc <main+0x394>)
 8003964:	2241      	movs	r2, #65	@ 0x41
 8003966:	2102      	movs	r1, #2
 8003968:	5499      	strb	r1, [r3, r2]
  dev.settings.filter = BME280_FILTER_COEFF_OFF;
 800396a:	4b94      	ldr	r3, [pc, #592]	@ (8003bbc <main+0x394>)
 800396c:	2243      	movs	r2, #67	@ 0x43
 800396e:	2100      	movs	r1, #0
 8003970:	5499      	strb	r1, [r3, r2]

  rslt = bme280_init(&dev);
 8003972:	4b92      	ldr	r3, [pc, #584]	@ (8003bbc <main+0x394>)
 8003974:	0018      	movs	r0, r3
 8003976:	f006 f877 	bl	8009a68 <bme280_init>
 800397a:	0003      	movs	r3, r0
 800397c:	001a      	movs	r2, r3
 800397e:	1cfb      	adds	r3, r7, #3
 8003980:	701a      	strb	r2, [r3, #0]
  if (rslt != BME280_OK) // OK = 0
 8003982:	1cfb      	adds	r3, r7, #3
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	b25b      	sxtb	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00a      	beq.n	80039a2 <main+0x17a>
  {
    printf("Failed to initialize the device (code %+d).\n", rslt);
 800398c:	1cfb      	adds	r3, r7, #3
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	b25b      	sxtb	r3, r3
 8003992:	001a      	movs	r2, r3
 8003994:	4b95      	ldr	r3, [pc, #596]	@ (8003bec <main+0x3c4>)
 8003996:	0011      	movs	r1, r2
 8003998:	0018      	movs	r0, r3
 800399a:	f001 fe67 	bl	800566c <printf_>
    Error_Handler();
 800399e:	f000 fa55 	bl	8003e4c <Error_Handler>
  }

  rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 80039a2:	4b86      	ldr	r3, [pc, #536]	@ (8003bbc <main+0x394>)
 80039a4:	0019      	movs	r1, r3
 80039a6:	200f      	movs	r0, #15
 80039a8:	f006 f9c0 	bl	8009d2c <bme280_set_sensor_settings>
 80039ac:	0003      	movs	r3, r0
 80039ae:	001a      	movs	r2, r3
 80039b0:	1cfb      	adds	r3, r7, #3
 80039b2:	701a      	strb	r2, [r3, #0]
  /*Calculate the minimum delay (ms) required between consecutive measurement based upon the sensor enabled
   *  and the oversampling configuration. */
  req_delay = bme280_cal_meas_delay(&dev.settings);
 80039b4:	4b8e      	ldr	r3, [pc, #568]	@ (8003bf0 <main+0x3c8>)
 80039b6:	0018      	movs	r0, r3
 80039b8:	f006 fbfc 	bl	800a1b4 <bme280_cal_meas_delay>
 80039bc:	0002      	movs	r2, r0
 80039be:	4b8d      	ldr	r3, [pc, #564]	@ (8003bf4 <main+0x3cc>)
 80039c0:	601a      	str	r2, [r3, #0]
  // printf("req_delay = %d\n", req_delay);

  rslt = stream_sensor_data_forced_mode(&dev); // working time = 0.8 sec
 80039c2:	4b7e      	ldr	r3, [pc, #504]	@ (8003bbc <main+0x394>)
 80039c4:	0018      	movs	r0, r3
 80039c6:	f000 f9fb 	bl	8003dc0 <stream_sensor_data_forced_mode>
 80039ca:	0003      	movs	r3, r0
 80039cc:	001a      	movs	r2, r3
 80039ce:	1cfb      	adds	r3, r7, #3
 80039d0:	701a      	strb	r2, [r3, #0]
  if (rslt != BME280_OK)
 80039d2:	1cfb      	adds	r3, r7, #3
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	b25b      	sxtb	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00c      	beq.n	80039f6 <main+0x1ce>
  {
    fprintf(stderr, "Failed to stream sensor data (code %+d).", rslt);
 80039dc:	4b86      	ldr	r3, [pc, #536]	@ (8003bf8 <main+0x3d0>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68d8      	ldr	r0, [r3, #12]
 80039e2:	1cfb      	adds	r3, r7, #3
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	b25b      	sxtb	r3, r3
 80039e8:	001a      	movs	r2, r3
 80039ea:	4b84      	ldr	r3, [pc, #528]	@ (8003bfc <main+0x3d4>)
 80039ec:	0019      	movs	r1, r3
 80039ee:	f00a f81f 	bl	800da30 <fiprintf>
    Error_Handler();
 80039f2:	f000 fa2b 	bl	8003e4c <Error_Handler>
  }
  // h_ = comp_data.humidity / 1000.0;
  h_ = (((uint16_t)comp_data.humidity * 1049 + 500) >> 20); // fast_divide_by_1000
 80039f6:	4b82      	ldr	r3, [pc, #520]	@ (8003c00 <main+0x3d8>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	001a      	movs	r2, r3
 80039fe:	0013      	movs	r3, r2
 8003a00:	019b      	lsls	r3, r3, #6
 8003a02:	189b      	adds	r3, r3, r2
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	189b      	adds	r3, r3, r2
 8003a08:	00db      	lsls	r3, r3, #3
 8003a0a:	189b      	adds	r3, r3, r2
 8003a0c:	33f5      	adds	r3, #245	@ 0xf5
 8003a0e:	33ff      	adds	r3, #255	@ 0xff
 8003a10:	151a      	asrs	r2, r3, #20
 8003a12:	1dbb      	adds	r3, r7, #6
 8003a14:	801a      	strh	r2, [r3, #0]

  // t_ = comp_data.temperature / 10.0;
  t_ = (((uint16_t)comp_data.temperature * 6554 + 2) >> 16); // fast_divide_by_10
 8003a16:	4b7a      	ldr	r3, [pc, #488]	@ (8003c00 <main+0x3d8>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	001a      	movs	r2, r3
 8003a1e:	4b79      	ldr	r3, [pc, #484]	@ (8003c04 <main+0x3dc>)
 8003a20:	4353      	muls	r3, r2
 8003a22:	3302      	adds	r3, #2
 8003a24:	141a      	asrs	r2, r3, #16
 8003a26:	1d3b      	adds	r3, r7, #4
 8003a28:	801a      	strh	r2, [r3, #0]

  printf("h_ = %d   h_old = %d   t_ = %d   t_old = %d\n", h_, H_old, t_, T_old);
 8003a2a:	1dbb      	adds	r3, r7, #6
 8003a2c:	8819      	ldrh	r1, [r3, #0]
 8003a2e:	4b6c      	ldr	r3, [pc, #432]	@ (8003be0 <main+0x3b8>)
 8003a30:	881b      	ldrh	r3, [r3, #0]
 8003a32:	001c      	movs	r4, r3
 8003a34:	1d3b      	adds	r3, r7, #4
 8003a36:	881a      	ldrh	r2, [r3, #0]
 8003a38:	4b6a      	ldr	r3, [pc, #424]	@ (8003be4 <main+0x3bc>)
 8003a3a:	881b      	ldrh	r3, [r3, #0]
 8003a3c:	4872      	ldr	r0, [pc, #456]	@ (8003c08 <main+0x3e0>)
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	0013      	movs	r3, r2
 8003a42:	0022      	movs	r2, r4
 8003a44:	f001 fe12 	bl	800566c <printf_>

  // ============================_____END____===================================

  if ((t_ != T_old) | (vbat_output_flag > BAT_OUTPUT_MAX_PERIOD))
 8003a48:	4b66      	ldr	r3, [pc, #408]	@ (8003be4 <main+0x3bc>)
 8003a4a:	881b      	ldrh	r3, [r3, #0]
 8003a4c:	1d3a      	adds	r2, r7, #4
 8003a4e:	8812      	ldrh	r2, [r2, #0]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	1e5a      	subs	r2, r3, #1
 8003a54:	4193      	sbcs	r3, r2
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	003b      	movs	r3, r7
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	211e      	movs	r1, #30
 8003a5e:	4299      	cmp	r1, r3
 8003a60:	419b      	sbcs	r3, r3
 8003a62:	425b      	negs	r3, r3
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	4313      	orrs	r3, r2
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d100      	bne.n	8003a70 <main+0x248>
 8003a6e:	e092      	b.n	8003b96 <main+0x36e>
  {
	  int32_t vBat;
	  // Temperature need output
    write_ToRTCRam(T_old_RAM_address, t_, 1);
 8003a70:	1d3b      	adds	r3, r7, #4
 8003a72:	881b      	ldrh	r3, [r3, #0]
 8003a74:	2201      	movs	r2, #1
 8003a76:	0019      	movs	r1, r3
 8003a78:	2042      	movs	r0, #66	@ 0x42
 8003a7a:	f000 f942 	bl	8003d02 <write_ToRTCRam>
    //printf("**  T out,  initialized_flag = %d\n", initialized_flag);
    temperature_new = 1;
 8003a7e:	230f      	movs	r3, #15
 8003a80:	18fb      	adds	r3, r7, r3
 8003a82:	2201      	movs	r2, #1
 8003a84:	701a      	strb	r2, [r3, #0]

    if (vbat_output_flag > 15) // output Vbat and Hum after every 10 min; (vbat_output_flag >= 10)
 8003a86:	003b      	movs	r3, r7
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	2b0f      	cmp	r3, #15
 8003a8c:	d94c      	bls.n	8003b28 <main+0x300>
    {
      vbat_output_flag = 0;
 8003a8e:	003b      	movs	r3, r7
 8003a90:	2200      	movs	r2, #0
 8003a92:	801a      	strh	r2, [r3, #0]
      write_ToRTCRam(vbat_output_flag_address, vbat_output_flag, 1); // save vbat_output_flag
 8003a94:	003b      	movs	r3, r7
 8003a96:	881b      	ldrh	r3, [r3, #0]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	0019      	movs	r1, r3
 8003a9c:	2046      	movs	r0, #70	@ 0x46
 8003a9e:	f000 f930 	bl	8003d02 <write_ToRTCRam>

      Activate_ADC();
 8003aa2:	f7ff fc7b 	bl	800339c <Activate_ADC>
      vBat = get_vbat();
 8003aa6:	f7ff fc43 	bl	8003330 <get_vbat>
 8003aaa:	0003      	movs	r3, r0
 8003aac:	613b      	str	r3, [r7, #16]

      // vBat = vBat / 10.0; // go with 3 digits
      vBat = ((uint32_t)vBat * 6554 + 2) >> 16; // fast_divide_by_10
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	4a54      	ldr	r2, [pc, #336]	@ (8003c04 <main+0x3dc>)
 8003ab2:	4353      	muls	r3, r2
 8003ab4:	3302      	adds	r3, #2
 8003ab6:	0c1b      	lsrs	r3, r3, #16
 8003ab8:	613b      	str	r3, [r7, #16]
      printf("vBat = %d, vbat_old = %d\n", vBat, vbat_old);
 8003aba:	4b4b      	ldr	r3, [pc, #300]	@ (8003be8 <main+0x3c0>)
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	001a      	movs	r2, r3
 8003ac0:	6939      	ldr	r1, [r7, #16]
 8003ac2:	4b52      	ldr	r3, [pc, #328]	@ (8003c0c <main+0x3e4>)
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	f001 fdd1 	bl	800566c <printf_>

      if (vBat < UNDERVOLTAGE) // #define UNDERVOLTAGE 220
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	2bdb      	cmp	r3, #219	@ 0xdb
 8003ace:	dc09      	bgt.n	8003ae4 <main+0x2bc>
      {
        final_message(vBat);
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f008 ff7d 	bl	800c9d4 <final_message>
        go_down(vBat); // shutdown forever  ****  R E W R I T E !!!   *****
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	0018      	movs	r0, r3
 8003ae0:	f000 f998 	bl	8003e14 <go_down>
      }

      if (!(vBat == vbat_old)) // it's going to output
 8003ae4:	4b40      	ldr	r3, [pc, #256]	@ (8003be8 <main+0x3c0>)
 8003ae6:	881b      	ldrh	r3, [r3, #0]
 8003ae8:	001a      	movs	r2, r3
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d00a      	beq.n	8003b06 <main+0x2de>
      {
        write_ToRTCRam(vbat_old_RAM_address, vBat, 1); // write vbat_old = vBat
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	2201      	movs	r2, #1
 8003af6:	0019      	movs	r1, r3
 8003af8:	2044      	movs	r0, #68	@ 0x44
 8003afa:	f000 f902 	bl	8003d02 <write_ToRTCRam>

        battery_new = 1;
 8003afe:	2316      	movs	r3, #22
 8003b00:	18fb      	adds	r3, r7, r3
 8003b02:	2201      	movs	r2, #1
 8003b04:	701a      	strb	r2, [r3, #0]
      }

      if (h_ != H_old)
 8003b06:	4b36      	ldr	r3, [pc, #216]	@ (8003be0 <main+0x3b8>)
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	1dba      	adds	r2, r7, #6
 8003b0c:	8812      	ldrh	r2, [r2, #0]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d00a      	beq.n	8003b28 <main+0x300>
      {
    	write_ToRTCRam(H_old_RAM_address, h_, 1);
 8003b12:	1dbb      	adds	r3, r7, #6
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	2201      	movs	r2, #1
 8003b18:	0019      	movs	r1, r3
 8003b1a:	2040      	movs	r0, #64	@ 0x40
 8003b1c:	f000 f8f1 	bl	8003d02 <write_ToRTCRam>
        humidity_new = 1;
 8003b20:	2315      	movs	r3, #21
 8003b22:	18fb      	adds	r3, r7, r3
 8003b24:	2201      	movs	r2, #1
 8003b26:	701a      	strb	r2, [r3, #0]
      }
    }

    PAPER_ON_H();
 8003b28:	4b28      	ldr	r3, [pc, #160]	@ (8003bcc <main+0x3a4>)
 8003b2a:	2280      	movs	r2, #128	@ 0x80
 8003b2c:	0212      	lsls	r2, r2, #8
 8003b2e:	619a      	str	r2, [r3, #24]
    if(initialized_flag){
 8003b30:	2317      	movs	r3, #23
 8003b32:	18fb      	adds	r3, r7, r3
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d002      	beq.n	8003b40 <main+0x318>
    	ESP_Init();
 8003b3a:	f008 fef3 	bl	800c924 <ESP_Init>
 8003b3e:	e003      	b.n	8003b48 <main+0x320>
    }else
    {
        EPD_1IN54_V2_Reset();
 8003b40:	f007 fb83 	bl	800b24a <EPD_1IN54_V2_Reset>
        ESP_Init_standby();
 8003b44:	f009 f8a0 	bl	800cc88 <ESP_Init_standby>
    }

    if(temperature_new){
 8003b48:	230f      	movs	r3, #15
 8003b4a:	18fb      	adds	r3, r7, r3
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d004      	beq.n	8003b5c <main+0x334>
    	temperature_out(t_);
 8003b52:	1d3b      	adds	r3, r7, #4
 8003b54:	881b      	ldrh	r3, [r3, #0]
 8003b56:	0018      	movs	r0, r3
 8003b58:	f008 fe3c 	bl	800c7d4 <temperature_out>
    }
    if(battery_new){
 8003b5c:	2316      	movs	r3, #22
 8003b5e:	18fb      	adds	r3, r7, r3
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d004      	beq.n	8003b70 <main+0x348>
    	battery_out(vBat);
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f008 fdc8 	bl	800c700 <battery_out>
    }
    if(humidity_new){
 8003b70:	2315      	movs	r3, #21
 8003b72:	18fb      	adds	r3, r7, r3
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d004      	beq.n	8003b84 <main+0x35c>
    	humidity_out(h_);
 8003b7a:	1dbb      	adds	r3, r7, #6
 8003b7c:	881b      	ldrh	r3, [r3, #0]
 8003b7e:	0018      	movs	r0, r3
 8003b80:	f008 fe86 	bl	800c890 <humidity_out>
    }

    EPD_1IN54_V2_DisplayPart(BlackImage);
 8003b84:	4b22      	ldr	r3, [pc, #136]	@ (8003c10 <main+0x3e8>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f007 fe2c 	bl	800b7e6 <EPD_1IN54_V2_DisplayPart>
// EPD_1IN54_V2_Sleep(); // Deep sleep mode ????
    PAPER_ON_L();         // e-Paper OFF
 8003b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8003bcc <main+0x3a4>)
 8003b90:	2280      	movs	r2, #128	@ 0x80
 8003b92:	0612      	lsls	r2, r2, #24
 8003b94:	619a      	str	r2, [r3, #24]
                          //  hex_dump();
                          //  HAL_Delay(1);
  }

  deepPowerDown(30);                                             // 30 seconds deep power down
 8003b96:	201e      	movs	r0, #30
 8003b98:	f7fe fdc2 	bl	8002720 <deepPowerDown>
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
    // Never be here
    LED1_ON();
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003bcc <main+0x3a4>)
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	619a      	str	r2, [r3, #24]
    HAL_Delay(100);
 8003ba2:	2064      	movs	r0, #100	@ 0x64
 8003ba4:	f002 f92e 	bl	8005e04 <HAL_Delay>
    LED1_OFF();
 8003ba8:	4b08      	ldr	r3, [pc, #32]	@ (8003bcc <main+0x3a4>)
 8003baa:	2280      	movs	r2, #128	@ 0x80
 8003bac:	0292      	lsls	r2, r2, #10
 8003bae:	619a      	str	r2, [r3, #24]
    HAL_Delay(100);
 8003bb0:	2064      	movs	r0, #100	@ 0x64
 8003bb2:	f002 f927 	bl	8005e04 <HAL_Delay>
    LED1_ON();
 8003bb6:	46c0      	nop			@ (mov r8, r8)
 8003bb8:	e7f0      	b.n	8003b9c <main+0x374>
 8003bba:	46c0      	nop			@ (mov r8, r8)
 8003bbc:	2000041c 	.word	0x2000041c
 8003bc0:	0800b011 	.word	0x0800b011
 8003bc4:	0800b099 	.word	0x0800b099
 8003bc8:	0800afab 	.word	0x0800afab
 8003bcc:	50000400 	.word	0x50000400
 8003bd0:	40013000 	.word	0x40013000
 8003bd4:	0800fe18 	.word	0x0800fe18
 8003bd8:	0800fb5c 	.word	0x0800fb5c
 8003bdc:	0800fb7c 	.word	0x0800fb7c
 8003be0:	2000046c 	.word	0x2000046c
 8003be4:	2000046e 	.word	0x2000046e
 8003be8:	20000470 	.word	0x20000470
 8003bec:	0800fb98 	.word	0x0800fb98
 8003bf0:	2000045c 	.word	0x2000045c
 8003bf4:	20000468 	.word	0x20000468
 8003bf8:	20000184 	.word	0x20000184
 8003bfc:	0800fbc8 	.word	0x0800fbc8
 8003c00:	200005a4 	.word	0x200005a4
 8003c04:	0000199a 	.word	0x0000199a
 8003c08:	0800fbf4 	.word	0x0800fbf4
 8003c0c:	0800fc24 	.word	0x0800fc24
 8003c10:	200005f0 	.word	0x200005f0

08003c14 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003c14:	b590      	push	{r4, r7, lr}
 8003c16:	b099      	sub	sp, #100	@ 0x64
 8003c18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c1a:	2414      	movs	r4, #20
 8003c1c:	193b      	adds	r3, r7, r4
 8003c1e:	0018      	movs	r0, r3
 8003c20:	234c      	movs	r3, #76	@ 0x4c
 8003c22:	001a      	movs	r2, r3
 8003c24:	2100      	movs	r1, #0
 8003c26:	f009 ff7b 	bl	800db20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c2a:	1d3b      	adds	r3, r7, #4
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	2310      	movs	r3, #16
 8003c30:	001a      	movs	r2, r3
 8003c32:	2100      	movs	r1, #0
 8003c34:	f009 ff74 	bl	800db20 <memset>

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c38:	2380      	movs	r3, #128	@ 0x80
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	f003 f899 	bl	8006d74 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
 8003c42:	193b      	adds	r3, r7, r4
 8003c44:	220a      	movs	r2, #10
 8003c46:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c48:	193b      	adds	r3, r7, r4
 8003c4a:	2280      	movs	r2, #128	@ 0x80
 8003c4c:	0052      	lsls	r2, r2, #1
 8003c4e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003c50:	193b      	adds	r3, r7, r4
 8003c52:	2240      	movs	r2, #64	@ 0x40
 8003c54:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003c56:	193b      	adds	r3, r7, r4
 8003c58:	2201      	movs	r2, #1
 8003c5a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003c5c:	193b      	adds	r3, r7, r4
 8003c5e:	2200      	movs	r2, #0
 8003c60:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c62:	193b      	adds	r3, r7, r4
 8003c64:	0018      	movs	r0, r3
 8003c66:	f003 f8f1 	bl	8006e4c <HAL_RCC_OscConfig>
 8003c6a:	1e03      	subs	r3, r0, #0
 8003c6c:	d001      	beq.n	8003c72 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8003c6e:	f000 f8ed 	bl	8003e4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8003c72:	1d3b      	adds	r3, r7, #4
 8003c74:	2207      	movs	r2, #7
 8003c76:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003c78:	1d3b      	adds	r3, r7, #4
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c7e:	1d3b      	adds	r3, r7, #4
 8003c80:	2200      	movs	r2, #0
 8003c82:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003c84:	1d3b      	adds	r3, r7, #4
 8003c86:	2200      	movs	r2, #0
 8003c88:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003c8a:	1d3b      	adds	r3, r7, #4
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	0018      	movs	r0, r3
 8003c90:	f003 fd06 	bl	80076a0 <HAL_RCC_ClockConfig>
 8003c94:	1e03      	subs	r3, r0, #0
 8003c96:	d001      	beq.n	8003c9c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003c98:	f000 f8d8 	bl	8003e4c <Error_Handler>
  }
}
 8003c9c:	46c0      	nop			@ (mov r8, r8)
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b019      	add	sp, #100	@ 0x64
 8003ca2:	bd90      	pop	{r4, r7, pc}

08003ca4 <read_RTCRam>:

/* USER CODE BEGIN 4 */

// Function to read a uint16_t value from RTC RAM
bool read_RTCRam(uint8_t address, uint16_t *read_data, bool lock)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6039      	str	r1, [r7, #0]
 8003cac:	0011      	movs	r1, r2
 8003cae:	1dfb      	adds	r3, r7, #7
 8003cb0:	1c02      	adds	r2, r0, #0
 8003cb2:	701a      	strb	r2, [r3, #0]
 8003cb4:	1dbb      	adds	r3, r7, #6
 8003cb6:	1c0a      	adds	r2, r1, #0
 8003cb8:	701a      	strb	r2, [r3, #0]
  // Create a buffer to hold the data to be read
  uint8_t data[sizeof(uint16_t)];

  // Call the driver's readRam function
  if (!readRam(address, (uint8_t *)data, sizeof(data), lock))
 8003cba:	1dfb      	adds	r3, r7, #7
 8003cbc:	7818      	ldrb	r0, [r3, #0]
 8003cbe:	1dbb      	adds	r3, r7, #6
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	220c      	movs	r2, #12
 8003cc4:	18b9      	adds	r1, r7, r2
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f7fe ff4c 	bl	8002b64 <readRam>
 8003ccc:	0003      	movs	r3, r0
 8003cce:	001a      	movs	r2, r3
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	4053      	eors	r3, r2
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <read_RTCRam+0x3a>
  {
    // If the read operation fails, return false
    return false;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	e00d      	b.n	8003cfa <read_RTCRam+0x56>
  }

  // Combine the two bytes into a uint16_t value
  *read_data = (uint16_t)data[0] | ((uint16_t)data[1] << 8);
 8003cde:	210c      	movs	r1, #12
 8003ce0:	187b      	adds	r3, r7, r1
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	b21a      	sxth	r2, r3
 8003ce6:	187b      	adds	r3, r7, r1
 8003ce8:	785b      	ldrb	r3, [r3, #1]
 8003cea:	021b      	lsls	r3, r3, #8
 8003cec:	b21b      	sxth	r3, r3
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	b21b      	sxth	r3, r3
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	801a      	strh	r2, [r3, #0]

  return true;
 8003cf8:	2301      	movs	r3, #1
}
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	b004      	add	sp, #16
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <write_ToRTCRam>:

// Function to write a uint16_t value to RTC RAM
bool write_ToRTCRam(uint8_t address, uint16_t write_data, bool lock)
{
 8003d02:	b590      	push	{r4, r7, lr}
 8003d04:	b085      	sub	sp, #20
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	0004      	movs	r4, r0
 8003d0a:	0008      	movs	r0, r1
 8003d0c:	0011      	movs	r1, r2
 8003d0e:	1dfb      	adds	r3, r7, #7
 8003d10:	1c22      	adds	r2, r4, #0
 8003d12:	701a      	strb	r2, [r3, #0]
 8003d14:	1d3b      	adds	r3, r7, #4
 8003d16:	1c02      	adds	r2, r0, #0
 8003d18:	801a      	strh	r2, [r3, #0]
 8003d1a:	1dbb      	adds	r3, r7, #6
 8003d1c:	1c0a      	adds	r2, r1, #0
 8003d1e:	701a      	strb	r2, [r3, #0]
  // Create a buffer to hold the data to be written
  uint8_t data[sizeof(uint16_t)];

  // Split the uint16_t value into two bytes
  data[0] = (uint8_t)(write_data & 0xFF);        // Lower byte
 8003d20:	1d3b      	adds	r3, r7, #4
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	210c      	movs	r1, #12
 8003d28:	187b      	adds	r3, r7, r1
 8003d2a:	701a      	strb	r2, [r3, #0]
  data[1] = (uint8_t)((write_data >> 8) & 0xFF); // Upper byte
 8003d2c:	1d3b      	adds	r3, r7, #4
 8003d2e:	881b      	ldrh	r3, [r3, #0]
 8003d30:	0a1b      	lsrs	r3, r3, #8
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	b2da      	uxtb	r2, r3
 8003d36:	187b      	adds	r3, r7, r1
 8003d38:	705a      	strb	r2, [r3, #1]

  // Call the driver's writeRam function
  return writeRam(address, (uint8_t *)data, sizeof(data), lock);
 8003d3a:	1dfb      	adds	r3, r7, #7
 8003d3c:	7818      	ldrb	r0, [r3, #0]
 8003d3e:	1dbb      	adds	r3, r7, #6
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	1879      	adds	r1, r7, r1
 8003d44:	2202      	movs	r2, #2
 8003d46:	f7fe ff77 	bl	8002c38 <writeRam>
 8003d4a:	0003      	movs	r3, r0
}
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	b005      	add	sp, #20
 8003d52:	bd90      	pop	{r4, r7, pc}

08003d54 <print_error>:

void print_error(const char *func, uint32_t line)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  printf(" *** Error:  %s ,   %d\n", func, line);
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	6879      	ldr	r1, [r7, #4]
 8003d62:	4b09      	ldr	r3, [pc, #36]	@ (8003d88 <print_error+0x34>)
 8003d64:	0018      	movs	r0, r3
 8003d66:	f001 fc81 	bl	800566c <printf_>
  HAL_Delay(100);
 8003d6a:	2064      	movs	r0, #100	@ 0x64
 8003d6c:	f002 f84a 	bl	8005e04 <HAL_Delay>
  timeout_reset(__func__, __LINE__);
 8003d70:	2384      	movs	r3, #132	@ 0x84
 8003d72:	33ff      	adds	r3, #255	@ 0xff
 8003d74:	001a      	movs	r2, r3
 8003d76:	4b05      	ldr	r3, [pc, #20]	@ (8003d8c <print_error+0x38>)
 8003d78:	0011      	movs	r1, r2
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f000 f808 	bl	8003d90 <timeout_reset>
}
 8003d80:	46c0      	nop			@ (mov r8, r8)
 8003d82:	46bd      	mov	sp, r7
 8003d84:	b002      	add	sp, #8
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	0800fc40 	.word	0x0800fc40
 8003d8c:	0800fe2c 	.word	0x0800fe2c

08003d90 <timeout_reset>:

void timeout_reset(const char *func, uint32_t line)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  printf(" *** timeout_reset:  %s    %d\n", func, line);
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	4b07      	ldr	r3, [pc, #28]	@ (8003dbc <timeout_reset+0x2c>)
 8003da0:	0018      	movs	r0, r3
 8003da2:	f001 fc63 	bl	800566c <printf_>
  HAL_Delay(10);
 8003da6:	200a      	movs	r0, #10
 8003da8:	f002 f82c 	bl	8005e04 <HAL_Delay>
  deepPowerDown(10);
 8003dac:	200a      	movs	r0, #10
 8003dae:	f7fe fcb7 	bl	8002720 <deepPowerDown>
}
 8003db2:	46c0      	nop			@ (mov r8, r8)
 8003db4:	46bd      	mov	sp, r7
 8003db6:	b002      	add	sp, #8
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	46c0      	nop			@ (mov r8, r8)
 8003dbc:	0800fc58 	.word	0x0800fc58

08003dc0 <stream_sensor_data_forced_mode>:

// Read BME280 data
int8_t stream_sensor_data_forced_mode(struct bme280_dev *dev)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  reslt = bme280_set_sensor_mode(BME280_FORCED_MODE, dev);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	0019      	movs	r1, r3
 8003dcc:	2001      	movs	r0, #1
 8003dce:	f006 f818 	bl	8009e02 <bme280_set_sensor_mode>
 8003dd2:	0003      	movs	r3, r0
 8003dd4:	001a      	movs	r2, r3
 8003dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8003e08 <stream_sensor_data_forced_mode+0x48>)
 8003dd8:	701a      	strb	r2, [r3, #0]
  /* Wait for the measurement to complete and print data  */

  HAL_Delay(req_delay); // 9 ms !!!
 8003dda:	4b0c      	ldr	r3, [pc, #48]	@ (8003e0c <stream_sensor_data_forced_mode+0x4c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	0018      	movs	r0, r3
 8003de0:	f002 f810 	bl	8005e04 <HAL_Delay>
  reslt = bme280_get_sensor_data(BME280_TEMP | BME280_HUM, &comp_data, dev);
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	4b0a      	ldr	r3, [pc, #40]	@ (8003e10 <stream_sensor_data_forced_mode+0x50>)
 8003de8:	0019      	movs	r1, r3
 8003dea:	2006      	movs	r0, #6
 8003dec:	f006 f8eb 	bl	8009fc6 <bme280_get_sensor_data>
 8003df0:	0003      	movs	r3, r0
 8003df2:	001a      	movs	r2, r3
 8003df4:	4b04      	ldr	r3, [pc, #16]	@ (8003e08 <stream_sensor_data_forced_mode+0x48>)
 8003df6:	701a      	strb	r2, [r3, #0]
  return reslt;
 8003df8:	4b03      	ldr	r3, [pc, #12]	@ (8003e08 <stream_sensor_data_forced_mode+0x48>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	b25b      	sxtb	r3, r3
}
 8003dfe:	0018      	movs	r0, r3
 8003e00:	46bd      	mov	sp, r7
 8003e02:	b002      	add	sp, #8
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	46c0      	nop			@ (mov r8, r8)
 8003e08:	20000464 	.word	0x20000464
 8003e0c:	20000468 	.word	0x20000468
 8003e10:	200005a4 	.word	0x200005a4

08003e14 <go_down>:
  }
  return true;
}

void go_down(uint16_t vBat)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	0002      	movs	r2, r0
 8003e1c:	1dbb      	adds	r3, r7, #6
 8003e1e:	801a      	strh	r2, [r3, #0]
  /* S H U T   D O W N */

  printf("Go down\n");
 8003e20:	4b08      	ldr	r3, [pc, #32]	@ (8003e44 <go_down+0x30>)
 8003e22:	0018      	movs	r0, r3
 8003e24:	f001 fc22 	bl	800566c <printf_>
  printf("Clear...\r\n");
 8003e28:	4b07      	ldr	r3, [pc, #28]	@ (8003e48 <go_down+0x34>)
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	f001 fc1e 	bl	800566c <printf_>
  final_message(vBat);
 8003e30:	1dbb      	adds	r3, r7, #6
 8003e32:	881b      	ldrh	r3, [r3, #0]
 8003e34:	0018      	movs	r0, r3
 8003e36:	f008 fdcd 	bl	800c9d4 <final_message>

  // Turn all power off, exept the RTC
  // Code must be inserted here !
}
 8003e3a:	46c0      	nop			@ (mov r8, r8)
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	b002      	add	sp, #8
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	46c0      	nop			@ (mov r8, r8)
 8003e44:	0800fc78 	.word	0x0800fc78
 8003e48:	0800fc84 	.word	0x0800fc84

08003e4c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003e50:	b672      	cpsid	i
}
 8003e52:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e54:	46c0      	nop			@ (mov r8, r8)
 8003e56:	e7fd      	b.n	8003e54 <Error_Handler+0x8>

08003e58 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60b9      	str	r1, [r7, #8]
 8003e60:	607a      	str	r2, [r7, #4]
 8003e62:	603b      	str	r3, [r7, #0]
 8003e64:	210f      	movs	r1, #15
 8003e66:	187b      	adds	r3, r7, r1
 8003e68:	1c02      	adds	r2, r0, #0
 8003e6a:	701a      	strb	r2, [r3, #0]
  if (idx < maxlen) {
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d205      	bcs.n	8003e80 <_out_buffer+0x28>
    ((char*)buffer)[idx] = character;
 8003e74:	68ba      	ldr	r2, [r7, #8]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	18d3      	adds	r3, r2, r3
 8003e7a:	187a      	adds	r2, r7, r1
 8003e7c:	7812      	ldrb	r2, [r2, #0]
 8003e7e:	701a      	strb	r2, [r3, #0]
  }
}
 8003e80:	46c0      	nop			@ (mov r8, r8)
 8003e82:	46bd      	mov	sp, r7
 8003e84:	b004      	add	sp, #16
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	607a      	str	r2, [r7, #4]
 8003e92:	603b      	str	r3, [r7, #0]
 8003e94:	230f      	movs	r3, #15
 8003e96:	18fb      	adds	r3, r7, r3
 8003e98:	1c02      	adds	r2, r0, #0
 8003e9a:	701a      	strb	r2, [r3, #0]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8003e9c:	46c0      	nop			@ (mov r8, r8)
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	b004      	add	sp, #16
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60b9      	str	r1, [r7, #8]
 8003eac:	607a      	str	r2, [r7, #4]
 8003eae:	603b      	str	r3, [r7, #0]
 8003eb0:	210f      	movs	r1, #15
 8003eb2:	187b      	adds	r3, r7, r1
 8003eb4:	1c02      	adds	r2, r0, #0
 8003eb6:	701a      	strb	r2, [r3, #0]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8003eb8:	000a      	movs	r2, r1
 8003eba:	18bb      	adds	r3, r7, r2
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d004      	beq.n	8003ecc <_out_char+0x28>
    _putchar(character);
 8003ec2:	18bb      	adds	r3, r7, r2
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	f001 fc0c 	bl	80056e4 <_putchar>
  }
}
 8003ecc:	46c0      	nop			@ (mov r8, r8)
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	b004      	add	sp, #16
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	60fb      	str	r3, [r7, #12]
 8003ee2:	e002      	b.n	8003eea <_strnlen_s+0x16>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	60fb      	str	r3, [r7, #12]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d004      	beq.n	8003efc <_strnlen_s+0x28>
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	1e5a      	subs	r2, r3, #1
 8003ef6:	603a      	str	r2, [r7, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1f3      	bne.n	8003ee4 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	1ad3      	subs	r3, r2, r3
}
 8003f02:	0018      	movs	r0, r3
 8003f04:	46bd      	mov	sp, r7
 8003f06:	b004      	add	sp, #16
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b082      	sub	sp, #8
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	0002      	movs	r2, r0
 8003f12:	1dfb      	adds	r3, r7, #7
 8003f14:	701a      	strb	r2, [r3, #0]
  return (ch >= '0') && (ch <= '9');
 8003f16:	1dfb      	adds	r3, r7, #7
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	2b2f      	cmp	r3, #47	@ 0x2f
 8003f1c:	d905      	bls.n	8003f2a <_is_digit+0x20>
 8003f1e:	1dfb      	adds	r3, r7, #7
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	2b39      	cmp	r3, #57	@ 0x39
 8003f24:	d801      	bhi.n	8003f2a <_is_digit+0x20>
 8003f26:	2301      	movs	r3, #1
 8003f28:	e000      	b.n	8003f2c <_is_digit+0x22>
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	1c1a      	adds	r2, r3, #0
 8003f2e:	2301      	movs	r3, #1
 8003f30:	4013      	ands	r3, r2
 8003f32:	b2db      	uxtb	r3, r3
}
 8003f34:	0018      	movs	r0, r3
 8003f36:	46bd      	mov	sp, r7
 8003f38:	b002      	add	sp, #8
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8003f48:	e00e      	b.n	8003f68 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	0013      	movs	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	189b      	adds	r3, r3, r2
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	0018      	movs	r0, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	1c59      	adds	r1, r3, #1
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6011      	str	r1, [r2, #0]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	18c3      	adds	r3, r0, r3
 8003f64:	3b30      	subs	r3, #48	@ 0x30
 8003f66:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	0018      	movs	r0, r3
 8003f70:	f7ff ffcb 	bl	8003f0a <_is_digit>
 8003f74:	1e03      	subs	r3, r0, #0
 8003f76:	d1e8      	bne.n	8003f4a <_atoi+0xe>
  }
  return i;
 8003f78:	68fb      	ldr	r3, [r7, #12]
}
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	b004      	add	sp, #16
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8003f82:	b590      	push	{r4, r7, lr}
 8003f84:	b087      	sub	sp, #28
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	60f8      	str	r0, [r7, #12]
 8003f8a:	60b9      	str	r1, [r7, #8]
 8003f8c:	607a      	str	r2, [r7, #4]
 8003f8e:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8003f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f96:	2202      	movs	r2, #2
 8003f98:	4013      	ands	r3, r2
 8003f9a:	d124      	bne.n	8003fe6 <_out_rev+0x64>
 8003f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	d120      	bne.n	8003fe6 <_out_rev+0x64>
    for (size_t i = len; i < width; i++) {
 8003fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	e00a      	b.n	8003fc0 <_out_rev+0x3e>
      out(' ', buffer, idx++, maxlen);
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	1c53      	adds	r3, r2, #1
 8003fae:	607b      	str	r3, [r7, #4]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	68b9      	ldr	r1, [r7, #8]
 8003fb4:	68fc      	ldr	r4, [r7, #12]
 8003fb6:	2020      	movs	r0, #32
 8003fb8:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d3f0      	bcc.n	8003faa <_out_rev+0x28>
    }
  }

  // reverse string
  while (len) {
 8003fc8:	e00d      	b.n	8003fe6 <_out_rev+0x64>
    out(buf[--len], buffer, idx++, maxlen);
 8003fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fd4:	18d3      	adds	r3, r2, r3
 8003fd6:	7818      	ldrb	r0, [r3, #0]
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	1c53      	adds	r3, r2, #1
 8003fdc:	607b      	str	r3, [r7, #4]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	68b9      	ldr	r1, [r7, #8]
 8003fe2:	68fc      	ldr	r4, [r7, #12]
 8003fe4:	47a0      	blx	r4
  while (len) {
 8003fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1ee      	bne.n	8003fca <_out_rev+0x48>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8003fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fee:	2202      	movs	r2, #2
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	d00e      	beq.n	8004012 <_out_rev+0x90>
    while (idx - start_idx < width) {
 8003ff4:	e007      	b.n	8004006 <_out_rev+0x84>
      out(' ', buffer, idx++, maxlen);
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	1c53      	adds	r3, r2, #1
 8003ffa:	607b      	str	r3, [r7, #4]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	68b9      	ldr	r1, [r7, #8]
 8004000:	68fc      	ldr	r4, [r7, #12]
 8004002:	2020      	movs	r0, #32
 8004004:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800400e:	429a      	cmp	r2, r3
 8004010:	d8f1      	bhi.n	8003ff6 <_out_rev+0x74>
    }
  }

  return idx;
 8004012:	687b      	ldr	r3, [r7, #4]
}
 8004014:	0018      	movs	r0, r3
 8004016:	46bd      	mov	sp, r7
 8004018:	b007      	add	sp, #28
 800401a:	bd90      	pop	{r4, r7, pc}

0800401c <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800401c:	b590      	push	{r4, r7, lr}
 800401e:	b089      	sub	sp, #36	@ 0x24
 8004020:	af04      	add	r7, sp, #16
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
 8004028:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800402a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800402c:	2202      	movs	r2, #2
 800402e:	4013      	ands	r3, r2
 8004030:	d134      	bne.n	800409c <_ntoa_format+0x80>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8004032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004034:	2b00      	cmp	r3, #0
 8004036:	d017      	beq.n	8004068 <_ntoa_format+0x4c>
 8004038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800403a:	2201      	movs	r2, #1
 800403c:	4013      	ands	r3, r2
 800403e:	d013      	beq.n	8004068 <_ntoa_format+0x4c>
 8004040:	2328      	movs	r3, #40	@ 0x28
 8004042:	18fb      	adds	r3, r7, r3
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d103      	bne.n	8004052 <_ntoa_format+0x36>
 800404a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800404c:	220c      	movs	r2, #12
 800404e:	4013      	ands	r3, r2
 8004050:	d00a      	beq.n	8004068 <_ntoa_format+0x4c>
      width--;
 8004052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004054:	3b01      	subs	r3, #1
 8004056:	637b      	str	r3, [r7, #52]	@ 0x34
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004058:	e006      	b.n	8004068 <_ntoa_format+0x4c>
      buf[len++] = '0';
 800405a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004060:	6a3a      	ldr	r2, [r7, #32]
 8004062:	18d3      	adds	r3, r2, r3
 8004064:	2230      	movs	r2, #48	@ 0x30
 8004066:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004068:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800406a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800406c:	429a      	cmp	r2, r3
 800406e:	d20a      	bcs.n	8004086 <_ntoa_format+0x6a>
 8004070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004072:	2b1f      	cmp	r3, #31
 8004074:	d9f1      	bls.n	800405a <_ntoa_format+0x3e>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004076:	e006      	b.n	8004086 <_ntoa_format+0x6a>
      buf[len++] = '0';
 8004078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	627a      	str	r2, [r7, #36]	@ 0x24
 800407e:	6a3a      	ldr	r2, [r7, #32]
 8004080:	18d3      	adds	r3, r2, r3
 8004082:	2230      	movs	r2, #48	@ 0x30
 8004084:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004088:	2201      	movs	r2, #1
 800408a:	4013      	ands	r3, r2
 800408c:	d006      	beq.n	800409c <_ntoa_format+0x80>
 800408e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004092:	429a      	cmp	r2, r3
 8004094:	d202      	bcs.n	800409c <_ntoa_format+0x80>
 8004096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004098:	2b1f      	cmp	r3, #31
 800409a:	d9ed      	bls.n	8004078 <_ntoa_format+0x5c>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800409c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800409e:	2210      	movs	r2, #16
 80040a0:	4013      	ands	r3, r2
 80040a2:	d056      	beq.n	8004152 <_ntoa_format+0x136>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80040a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80040a6:	2380      	movs	r3, #128	@ 0x80
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	4013      	ands	r3, r2
 80040ac:	d116      	bne.n	80040dc <_ntoa_format+0xc0>
 80040ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d013      	beq.n	80040dc <_ntoa_format+0xc0>
 80040b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d003      	beq.n	80040c4 <_ntoa_format+0xa8>
 80040bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d10b      	bne.n	80040dc <_ntoa_format+0xc0>
      len--;
 80040c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c6:	3b01      	subs	r3, #1
 80040c8:	627b      	str	r3, [r7, #36]	@ 0x24
      if (len && (base == 16U)) {
 80040ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <_ntoa_format+0xc0>
 80040d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040d2:	2b10      	cmp	r3, #16
 80040d4:	d102      	bne.n	80040dc <_ntoa_format+0xc0>
        len--;
 80040d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d8:	3b01      	subs	r3, #1
 80040da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80040dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040de:	2b10      	cmp	r3, #16
 80040e0:	d10e      	bne.n	8004100 <_ntoa_format+0xe4>
 80040e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040e4:	2220      	movs	r2, #32
 80040e6:	4013      	ands	r3, r2
 80040e8:	d10a      	bne.n	8004100 <_ntoa_format+0xe4>
 80040ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ec:	2b1f      	cmp	r3, #31
 80040ee:	d807      	bhi.n	8004100 <_ntoa_format+0xe4>
      buf[len++] = 'x';
 80040f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80040f6:	6a3a      	ldr	r2, [r7, #32]
 80040f8:	18d3      	adds	r3, r2, r3
 80040fa:	2278      	movs	r2, #120	@ 0x78
 80040fc:	701a      	strb	r2, [r3, #0]
 80040fe:	e01e      	b.n	800413e <_ntoa_format+0x122>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004102:	2b10      	cmp	r3, #16
 8004104:	d10e      	bne.n	8004124 <_ntoa_format+0x108>
 8004106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004108:	2220      	movs	r2, #32
 800410a:	4013      	ands	r3, r2
 800410c:	d00a      	beq.n	8004124 <_ntoa_format+0x108>
 800410e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004110:	2b1f      	cmp	r3, #31
 8004112:	d807      	bhi.n	8004124 <_ntoa_format+0x108>
      buf[len++] = 'X';
 8004114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004116:	1c5a      	adds	r2, r3, #1
 8004118:	627a      	str	r2, [r7, #36]	@ 0x24
 800411a:	6a3a      	ldr	r2, [r7, #32]
 800411c:	18d3      	adds	r3, r2, r3
 800411e:	2258      	movs	r2, #88	@ 0x58
 8004120:	701a      	strb	r2, [r3, #0]
 8004122:	e00c      	b.n	800413e <_ntoa_format+0x122>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004126:	2b02      	cmp	r3, #2
 8004128:	d109      	bne.n	800413e <_ntoa_format+0x122>
 800412a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412c:	2b1f      	cmp	r3, #31
 800412e:	d806      	bhi.n	800413e <_ntoa_format+0x122>
      buf[len++] = 'b';
 8004130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004132:	1c5a      	adds	r2, r3, #1
 8004134:	627a      	str	r2, [r7, #36]	@ 0x24
 8004136:	6a3a      	ldr	r2, [r7, #32]
 8004138:	18d3      	adds	r3, r2, r3
 800413a:	2262      	movs	r2, #98	@ 0x62
 800413c:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800413e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004140:	2b1f      	cmp	r3, #31
 8004142:	d806      	bhi.n	8004152 <_ntoa_format+0x136>
      buf[len++] = '0';
 8004144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	627a      	str	r2, [r7, #36]	@ 0x24
 800414a:	6a3a      	ldr	r2, [r7, #32]
 800414c:	18d3      	adds	r3, r2, r3
 800414e:	2230      	movs	r2, #48	@ 0x30
 8004150:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8004152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004154:	2b1f      	cmp	r3, #31
 8004156:	d823      	bhi.n	80041a0 <_ntoa_format+0x184>
    if (negative) {
 8004158:	2328      	movs	r3, #40	@ 0x28
 800415a:	18fb      	adds	r3, r7, r3
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d007      	beq.n	8004172 <_ntoa_format+0x156>
      buf[len++] = '-';
 8004162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004164:	1c5a      	adds	r2, r3, #1
 8004166:	627a      	str	r2, [r7, #36]	@ 0x24
 8004168:	6a3a      	ldr	r2, [r7, #32]
 800416a:	18d3      	adds	r3, r2, r3
 800416c:	222d      	movs	r2, #45	@ 0x2d
 800416e:	701a      	strb	r2, [r3, #0]
 8004170:	e016      	b.n	80041a0 <_ntoa_format+0x184>
    }
    else if (flags & FLAGS_PLUS) {
 8004172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004174:	2204      	movs	r2, #4
 8004176:	4013      	ands	r3, r2
 8004178:	d007      	beq.n	800418a <_ntoa_format+0x16e>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800417a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417c:	1c5a      	adds	r2, r3, #1
 800417e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004180:	6a3a      	ldr	r2, [r7, #32]
 8004182:	18d3      	adds	r3, r2, r3
 8004184:	222b      	movs	r2, #43	@ 0x2b
 8004186:	701a      	strb	r2, [r3, #0]
 8004188:	e00a      	b.n	80041a0 <_ntoa_format+0x184>
    }
    else if (flags & FLAGS_SPACE) {
 800418a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800418c:	2208      	movs	r2, #8
 800418e:	4013      	ands	r3, r2
 8004190:	d006      	beq.n	80041a0 <_ntoa_format+0x184>
      buf[len++] = ' ';
 8004192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004194:	1c5a      	adds	r2, r3, #1
 8004196:	627a      	str	r2, [r7, #36]	@ 0x24
 8004198:	6a3a      	ldr	r2, [r7, #32]
 800419a:	18d3      	adds	r3, r2, r3
 800419c:	2220      	movs	r2, #32
 800419e:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80041a0:	683c      	ldr	r4, [r7, #0]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	68b9      	ldr	r1, [r7, #8]
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041aa:	9303      	str	r3, [sp, #12]
 80041ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041ae:	9302      	str	r3, [sp, #8]
 80041b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b2:	9301      	str	r3, [sp, #4]
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	0023      	movs	r3, r4
 80041ba:	f7ff fee2 	bl	8003f82 <_out_rev>
 80041be:	0003      	movs	r3, r0
}
 80041c0:	0018      	movs	r0, r3
 80041c2:	46bd      	mov	sp, r7
 80041c4:	b005      	add	sp, #20
 80041c6:	bd90      	pop	{r4, r7, pc}

080041c8 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80041c8:	b590      	push	{r4, r7, lr}
 80041ca:	b097      	sub	sp, #92	@ 0x5c
 80041cc:	af08      	add	r7, sp, #32
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
 80041d4:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	637b      	str	r3, [r7, #52]	@ 0x34

  // no hash for 0 values
  if (!value) {
 80041da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d103      	bne.n	80041e8 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 80041e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041e2:	2210      	movs	r2, #16
 80041e4:	4393      	bics	r3, r2
 80041e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80041e8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80041ea:	2380      	movs	r3, #128	@ 0x80
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	4013      	ands	r3, r2
 80041f0:	d002      	beq.n	80041f8 <_ntoa_long+0x30>
 80041f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d033      	beq.n	8004260 <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 80041f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041fa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80041fc:	0018      	movs	r0, r3
 80041fe:	f7fc f825 	bl	800024c <__aeabi_uidivmod>
 8004202:	000b      	movs	r3, r1
 8004204:	001a      	movs	r2, r3
 8004206:	2133      	movs	r1, #51	@ 0x33
 8004208:	187b      	adds	r3, r7, r1
 800420a:	701a      	strb	r2, [r3, #0]
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800420c:	000a      	movs	r2, r1
 800420e:	18bb      	adds	r3, r7, r2
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	2b09      	cmp	r3, #9
 8004214:	d804      	bhi.n	8004220 <_ntoa_long+0x58>
 8004216:	18bb      	adds	r3, r7, r2
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	3330      	adds	r3, #48	@ 0x30
 800421c:	b2da      	uxtb	r2, r3
 800421e:	e00d      	b.n	800423c <_ntoa_long+0x74>
 8004220:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004222:	2220      	movs	r2, #32
 8004224:	4013      	ands	r3, r2
 8004226:	d001      	beq.n	800422c <_ntoa_long+0x64>
 8004228:	2341      	movs	r3, #65	@ 0x41
 800422a:	e000      	b.n	800422e <_ntoa_long+0x66>
 800422c:	2361      	movs	r3, #97	@ 0x61
 800422e:	2233      	movs	r2, #51	@ 0x33
 8004230:	18ba      	adds	r2, r7, r2
 8004232:	7812      	ldrb	r2, [r2, #0]
 8004234:	189b      	adds	r3, r3, r2
 8004236:	b2db      	uxtb	r3, r3
 8004238:	3b0a      	subs	r3, #10
 800423a:	b2da      	uxtb	r2, r3
 800423c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800423e:	1c59      	adds	r1, r3, #1
 8004240:	6379      	str	r1, [r7, #52]	@ 0x34
 8004242:	2110      	movs	r1, #16
 8004244:	1879      	adds	r1, r7, r1
 8004246:	54ca      	strb	r2, [r1, r3]
      value /= base;
 8004248:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800424a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800424c:	f7fb ff78 	bl	8000140 <__udivsi3>
 8004250:	0003      	movs	r3, r0
 8004252:	64bb      	str	r3, [r7, #72]	@ 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8004254:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004256:	2b00      	cmp	r3, #0
 8004258:	d002      	beq.n	8004260 <_ntoa_long+0x98>
 800425a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800425c:	2b1f      	cmp	r3, #31
 800425e:	d9cb      	bls.n	80041f8 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8004260:	683c      	ldr	r4, [r7, #0]
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	68b9      	ldr	r1, [r7, #8]
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800426a:	9306      	str	r3, [sp, #24]
 800426c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800426e:	9305      	str	r3, [sp, #20]
 8004270:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004272:	9304      	str	r3, [sp, #16]
 8004274:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004276:	9303      	str	r3, [sp, #12]
 8004278:	234c      	movs	r3, #76	@ 0x4c
 800427a:	18fb      	adds	r3, r7, r3
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	9302      	str	r3, [sp, #8]
 8004280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004282:	9301      	str	r3, [sp, #4]
 8004284:	2310      	movs	r3, #16
 8004286:	18fb      	adds	r3, r7, r3
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	0023      	movs	r3, r4
 800428c:	f7ff fec6 	bl	800401c <_ntoa_format>
 8004290:	0003      	movs	r3, r0
}
 8004292:	0018      	movs	r0, r3
 8004294:	46bd      	mov	sp, r7
 8004296:	b00f      	add	sp, #60	@ 0x3c
 8004298:	bd90      	pop	{r4, r7, pc}

0800429a <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800429a:	b5b0      	push	{r4, r5, r7, lr}
 800429c:	b096      	sub	sp, #88	@ 0x58
 800429e:	af08      	add	r7, sp, #32
 80042a0:	60f8      	str	r0, [r7, #12]
 80042a2:	60b9      	str	r1, [r7, #8]
 80042a4:	607a      	str	r2, [r7, #4]
 80042a6:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	637b      	str	r3, [r7, #52]	@ 0x34

  // no hash for 0 values
  if (!value) {
 80042ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042b0:	4313      	orrs	r3, r2
 80042b2:	d103      	bne.n	80042bc <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 80042b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042b6:	2210      	movs	r2, #16
 80042b8:	4393      	bics	r3, r2
 80042ba:	66bb      	str	r3, [r7, #104]	@ 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80042bc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80042be:	2380      	movs	r3, #128	@ 0x80
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	4013      	ands	r3, r2
 80042c4:	d003      	beq.n	80042ce <_ntoa_long_long+0x34>
 80042c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042ca:	4313      	orrs	r3, r2
 80042cc:	d03a      	beq.n	8004344 <_ntoa_long_long+0xaa>
    do {
      const char digit = (char)(value % base);
 80042ce:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80042d0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80042d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80042d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042d6:	f7fc f905 	bl	80004e4 <__aeabi_uldivmod>
 80042da:	0010      	movs	r0, r2
 80042dc:	0019      	movs	r1, r3
 80042de:	2433      	movs	r4, #51	@ 0x33
 80042e0:	193b      	adds	r3, r7, r4
 80042e2:	1c02      	adds	r2, r0, #0
 80042e4:	701a      	strb	r2, [r3, #0]
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80042e6:	0022      	movs	r2, r4
 80042e8:	18bb      	adds	r3, r7, r2
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	2b09      	cmp	r3, #9
 80042ee:	d804      	bhi.n	80042fa <_ntoa_long_long+0x60>
 80042f0:	18bb      	adds	r3, r7, r2
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	3330      	adds	r3, #48	@ 0x30
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	e00d      	b.n	8004316 <_ntoa_long_long+0x7c>
 80042fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042fc:	2220      	movs	r2, #32
 80042fe:	4013      	ands	r3, r2
 8004300:	d001      	beq.n	8004306 <_ntoa_long_long+0x6c>
 8004302:	2341      	movs	r3, #65	@ 0x41
 8004304:	e000      	b.n	8004308 <_ntoa_long_long+0x6e>
 8004306:	2361      	movs	r3, #97	@ 0x61
 8004308:	2233      	movs	r2, #51	@ 0x33
 800430a:	18ba      	adds	r2, r7, r2
 800430c:	7812      	ldrb	r2, [r2, #0]
 800430e:	189b      	adds	r3, r3, r2
 8004310:	b2db      	uxtb	r3, r3
 8004312:	3b0a      	subs	r3, #10
 8004314:	b2da      	uxtb	r2, r3
 8004316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004318:	1c59      	adds	r1, r3, #1
 800431a:	6379      	str	r1, [r7, #52]	@ 0x34
 800431c:	2110      	movs	r1, #16
 800431e:	1879      	adds	r1, r7, r1
 8004320:	54ca      	strb	r2, [r1, r3]
      value /= base;
 8004322:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004324:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004326:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8004328:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800432a:	f7fc f8db 	bl	80004e4 <__aeabi_uldivmod>
 800432e:	0002      	movs	r2, r0
 8004330:	000b      	movs	r3, r1
 8004332:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004334:	64fb      	str	r3, [r7, #76]	@ 0x4c
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8004336:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004338:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800433a:	4313      	orrs	r3, r2
 800433c:	d002      	beq.n	8004344 <_ntoa_long_long+0xaa>
 800433e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004340:	2b1f      	cmp	r3, #31
 8004342:	d9c4      	bls.n	80042ce <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8004344:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004346:	683d      	ldr	r5, [r7, #0]
 8004348:	687c      	ldr	r4, [r7, #4]
 800434a:	68b9      	ldr	r1, [r7, #8]
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004350:	9206      	str	r2, [sp, #24]
 8004352:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004354:	9205      	str	r2, [sp, #20]
 8004356:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004358:	9204      	str	r2, [sp, #16]
 800435a:	9303      	str	r3, [sp, #12]
 800435c:	2350      	movs	r3, #80	@ 0x50
 800435e:	18fb      	adds	r3, r7, r3
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	9302      	str	r3, [sp, #8]
 8004364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004366:	9301      	str	r3, [sp, #4]
 8004368:	2310      	movs	r3, #16
 800436a:	18fb      	adds	r3, r7, r3
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	002b      	movs	r3, r5
 8004370:	0022      	movs	r2, r4
 8004372:	f7ff fe53 	bl	800401c <_ntoa_format>
 8004376:	0003      	movs	r3, r0
}
 8004378:	0018      	movs	r0, r3
 800437a:	46bd      	mov	sp, r7
 800437c:	b00e      	add	sp, #56	@ 0x38
 800437e:	bdb0      	pop	{r4, r5, r7, pc}

08004380 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004382:	b09d      	sub	sp, #116	@ 0x74
 8004384:	af06      	add	r7, sp, #24
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
 800438c:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800438e:	2300      	movs	r3, #0
 8004390:	657b      	str	r3, [r7, #84]	@ 0x54
  double diff = 0.0;
 8004392:	2200      	movs	r2, #0
 8004394:	2300      	movs	r3, #0
 8004396:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004398:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800439a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800439c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800439e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80043a0:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80043a2:	f7fc f853 	bl	800044c <__aeabi_dcmpeq>
 80043a6:	1e03      	subs	r3, r0, #0
 80043a8:	d112      	bne.n	80043d0 <_ftoa+0x50>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80043aa:	683c      	ldr	r4, [r7, #0]
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	68b9      	ldr	r1, [r7, #8]
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	2380      	movs	r3, #128	@ 0x80
 80043b4:	18fb      	adds	r3, r7, r3
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	9303      	str	r3, [sp, #12]
 80043ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80043bc:	9302      	str	r3, [sp, #8]
 80043be:	2303      	movs	r3, #3
 80043c0:	9301      	str	r3, [sp, #4]
 80043c2:	4bbf      	ldr	r3, [pc, #764]	@ (80046c0 <_ftoa+0x340>)
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	0023      	movs	r3, r4
 80043c8:	f7ff fddb 	bl	8003f82 <_out_rev>
 80043cc:	0003      	movs	r3, r0
 80043ce:	e211      	b.n	80047f4 <_ftoa+0x474>
  if (value < -DBL_MAX)
 80043d0:	2201      	movs	r2, #1
 80043d2:	4252      	negs	r2, r2
 80043d4:	4bbb      	ldr	r3, [pc, #748]	@ (80046c4 <_ftoa+0x344>)
 80043d6:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80043d8:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80043da:	f7fc f83d 	bl	8000458 <__aeabi_dcmplt>
 80043de:	1e03      	subs	r3, r0, #0
 80043e0:	d012      	beq.n	8004408 <_ftoa+0x88>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80043e2:	683c      	ldr	r4, [r7, #0]
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	68b9      	ldr	r1, [r7, #8]
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	2380      	movs	r3, #128	@ 0x80
 80043ec:	18fb      	adds	r3, r7, r3
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	9303      	str	r3, [sp, #12]
 80043f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80043f4:	9302      	str	r3, [sp, #8]
 80043f6:	2304      	movs	r3, #4
 80043f8:	9301      	str	r3, [sp, #4]
 80043fa:	4bb3      	ldr	r3, [pc, #716]	@ (80046c8 <_ftoa+0x348>)
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	0023      	movs	r3, r4
 8004400:	f7ff fdbf 	bl	8003f82 <_out_rev>
 8004404:	0003      	movs	r3, r0
 8004406:	e1f5      	b.n	80047f4 <_ftoa+0x474>
  if (value > DBL_MAX)
 8004408:	2201      	movs	r2, #1
 800440a:	4252      	negs	r2, r2
 800440c:	4baf      	ldr	r3, [pc, #700]	@ (80046cc <_ftoa+0x34c>)
 800440e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8004410:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8004412:	f7fc f835 	bl	8000480 <__aeabi_dcmpgt>
 8004416:	1e03      	subs	r3, r0, #0
 8004418:	d024      	beq.n	8004464 <_ftoa+0xe4>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800441a:	2380      	movs	r3, #128	@ 0x80
 800441c:	18fb      	adds	r3, r7, r3
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2204      	movs	r2, #4
 8004422:	4013      	ands	r3, r2
 8004424:	d001      	beq.n	800442a <_ftoa+0xaa>
 8004426:	4baa      	ldr	r3, [pc, #680]	@ (80046d0 <_ftoa+0x350>)
 8004428:	e000      	b.n	800442c <_ftoa+0xac>
 800442a:	4baa      	ldr	r3, [pc, #680]	@ (80046d4 <_ftoa+0x354>)
 800442c:	2280      	movs	r2, #128	@ 0x80
 800442e:	18ba      	adds	r2, r7, r2
 8004430:	6812      	ldr	r2, [r2, #0]
 8004432:	2104      	movs	r1, #4
 8004434:	400a      	ands	r2, r1
 8004436:	d001      	beq.n	800443c <_ftoa+0xbc>
 8004438:	2204      	movs	r2, #4
 800443a:	e000      	b.n	800443e <_ftoa+0xbe>
 800443c:	2203      	movs	r2, #3
 800443e:	683e      	ldr	r6, [r7, #0]
 8004440:	687d      	ldr	r5, [r7, #4]
 8004442:	68bc      	ldr	r4, [r7, #8]
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	2180      	movs	r1, #128	@ 0x80
 8004448:	1879      	adds	r1, r7, r1
 800444a:	6809      	ldr	r1, [r1, #0]
 800444c:	9103      	str	r1, [sp, #12]
 800444e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004450:	9102      	str	r1, [sp, #8]
 8004452:	9201      	str	r2, [sp, #4]
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	0033      	movs	r3, r6
 8004458:	002a      	movs	r2, r5
 800445a:	0021      	movs	r1, r4
 800445c:	f7ff fd91 	bl	8003f82 <_out_rev>
 8004460:	0003      	movs	r3, r0
 8004462:	e1c7      	b.n	80047f4 <_ftoa+0x474>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8004464:	2200      	movs	r2, #0
 8004466:	4b9c      	ldr	r3, [pc, #624]	@ (80046d8 <_ftoa+0x358>)
 8004468:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800446a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800446c:	f7fc f808 	bl	8000480 <__aeabi_dcmpgt>
 8004470:	1e03      	subs	r3, r0, #0
 8004472:	d107      	bne.n	8004484 <_ftoa+0x104>
 8004474:	2200      	movs	r2, #0
 8004476:	4b99      	ldr	r3, [pc, #612]	@ (80046dc <_ftoa+0x35c>)
 8004478:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800447a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800447c:	f7fb ffec 	bl	8000458 <__aeabi_dcmplt>
 8004480:	1e03      	subs	r3, r0, #0
 8004482:	d015      	beq.n	80044b0 <_ftoa+0x130>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8004484:	683d      	ldr	r5, [r7, #0]
 8004486:	687c      	ldr	r4, [r7, #4]
 8004488:	68b9      	ldr	r1, [r7, #8]
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	2380      	movs	r3, #128	@ 0x80
 800448e:	18fb      	adds	r3, r7, r3
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	9304      	str	r3, [sp, #16]
 8004494:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004496:	9303      	str	r3, [sp, #12]
 8004498:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800449a:	9302      	str	r3, [sp, #8]
 800449c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800449e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044a0:	9200      	str	r2, [sp, #0]
 80044a2:	9301      	str	r3, [sp, #4]
 80044a4:	002b      	movs	r3, r5
 80044a6:	0022      	movs	r2, r4
 80044a8:	f000 f9a8 	bl	80047fc <_etoa>
 80044ac:	0003      	movs	r3, r0
 80044ae:	e1a1      	b.n	80047f4 <_ftoa+0x474>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 80044b0:	2453      	movs	r4, #83	@ 0x53
 80044b2:	193b      	adds	r3, r7, r4
 80044b4:	2200      	movs	r2, #0
 80044b6:	701a      	strb	r2, [r3, #0]
  if (value < 0) {
 80044b8:	2200      	movs	r2, #0
 80044ba:	2300      	movs	r3, #0
 80044bc:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80044be:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80044c0:	f7fb ffca 	bl	8000458 <__aeabi_dcmplt>
 80044c4:	1e03      	subs	r3, r0, #0
 80044c6:	d00c      	beq.n	80044e2 <_ftoa+0x162>
    negative = true;
 80044c8:	193b      	adds	r3, r7, r4
 80044ca:	2201      	movs	r2, #1
 80044cc:	701a      	strb	r2, [r3, #0]
    value = 0 - value;
 80044ce:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80044d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044d2:	2000      	movs	r0, #0
 80044d4:	2100      	movs	r1, #0
 80044d6:	f7fd fb7f 	bl	8001bd8 <__aeabi_dsub>
 80044da:	0002      	movs	r2, r0
 80044dc:	000b      	movs	r3, r1
 80044de:	673a      	str	r2, [r7, #112]	@ 0x70
 80044e0:	677b      	str	r3, [r7, #116]	@ 0x74
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 80044e2:	2380      	movs	r3, #128	@ 0x80
 80044e4:	18fb      	adds	r3, r7, r3
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	2380      	movs	r3, #128	@ 0x80
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	4013      	ands	r3, r2
 80044ee:	d10c      	bne.n	800450a <_ftoa+0x18a>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80044f0:	2306      	movs	r3, #6
 80044f2:	67bb      	str	r3, [r7, #120]	@ 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80044f4:	e009      	b.n	800450a <_ftoa+0x18a>
    buf[len++] = '0';
 80044f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044f8:	1c5a      	adds	r2, r3, #1
 80044fa:	657a      	str	r2, [r7, #84]	@ 0x54
 80044fc:	2210      	movs	r2, #16
 80044fe:	18ba      	adds	r2, r7, r2
 8004500:	2130      	movs	r1, #48	@ 0x30
 8004502:	54d1      	strb	r1, [r2, r3]
    prec--;
 8004504:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004506:	3b01      	subs	r3, #1
 8004508:	67bb      	str	r3, [r7, #120]	@ 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800450a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800450c:	2b1f      	cmp	r3, #31
 800450e:	d802      	bhi.n	8004516 <_ftoa+0x196>
 8004510:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004512:	2b09      	cmp	r3, #9
 8004514:	d8ef      	bhi.n	80044f6 <_ftoa+0x176>
  }

  int whole = (int)value;
 8004516:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8004518:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800451a:	f7fd ff1b 	bl	8002354 <__aeabi_d2iz>
 800451e:	0003      	movs	r3, r0
 8004520:	64fb      	str	r3, [r7, #76]	@ 0x4c
  double tmp = (value - whole) * pow10[prec];
 8004522:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004524:	f7fd ff52 	bl	80023cc <__aeabi_i2d>
 8004528:	0002      	movs	r2, r0
 800452a:	000b      	movs	r3, r1
 800452c:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800452e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8004530:	f7fd fb52 	bl	8001bd8 <__aeabi_dsub>
 8004534:	0002      	movs	r2, r0
 8004536:	000b      	movs	r3, r1
 8004538:	0010      	movs	r0, r2
 800453a:	0019      	movs	r1, r3
 800453c:	4a68      	ldr	r2, [pc, #416]	@ (80046e0 <_ftoa+0x360>)
 800453e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	18d3      	adds	r3, r2, r3
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f7fd f87e 	bl	8001648 <__aeabi_dmul>
 800454c:	0002      	movs	r2, r0
 800454e:	000b      	movs	r3, r1
 8004550:	633a      	str	r2, [r7, #48]	@ 0x30
 8004552:	637b      	str	r3, [r7, #52]	@ 0x34
  unsigned long frac = (unsigned long)tmp;
 8004554:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004556:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004558:	f7fb ffe4 	bl	8000524 <__aeabi_d2uiz>
 800455c:	0003      	movs	r3, r0
 800455e:	64bb      	str	r3, [r7, #72]	@ 0x48
  diff = tmp - frac;
 8004560:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8004562:	f7fd ff61 	bl	8002428 <__aeabi_ui2d>
 8004566:	0002      	movs	r2, r0
 8004568:	000b      	movs	r3, r1
 800456a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800456c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800456e:	f7fd fb33 	bl	8001bd8 <__aeabi_dsub>
 8004572:	0002      	movs	r2, r0
 8004574:	000b      	movs	r3, r1
 8004576:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004578:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (diff > 0.5) {
 800457a:	2200      	movs	r2, #0
 800457c:	4b59      	ldr	r3, [pc, #356]	@ (80046e4 <_ftoa+0x364>)
 800457e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004580:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004582:	f7fb ff7d 	bl	8000480 <__aeabi_dcmpgt>
 8004586:	1e03      	subs	r3, r0, #0
 8004588:	d015      	beq.n	80045b6 <_ftoa+0x236>
    ++frac;
 800458a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800458c:	3301      	adds	r3, #1
 800458e:	64bb      	str	r3, [r7, #72]	@ 0x48
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8004590:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8004592:	f7fd ff49 	bl	8002428 <__aeabi_ui2d>
 8004596:	4a52      	ldr	r2, [pc, #328]	@ (80046e0 <_ftoa+0x360>)
 8004598:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	18d3      	adds	r3, r2, r3
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f7fb ff77 	bl	8000494 <__aeabi_dcmpge>
 80045a6:	1e03      	subs	r3, r0, #0
 80045a8:	d017      	beq.n	80045da <_ftoa+0x25a>
      frac = 0;
 80045aa:	2300      	movs	r3, #0
 80045ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      ++whole;
 80045ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045b0:	3301      	adds	r3, #1
 80045b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045b4:	e011      	b.n	80045da <_ftoa+0x25a>
    }
  }
  else if (diff < 0.5) {
 80045b6:	2200      	movs	r2, #0
 80045b8:	4b4a      	ldr	r3, [pc, #296]	@ (80046e4 <_ftoa+0x364>)
 80045ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80045bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045be:	f7fb ff4b 	bl	8000458 <__aeabi_dcmplt>
 80045c2:	1e03      	subs	r3, r0, #0
 80045c4:	d109      	bne.n	80045da <_ftoa+0x25a>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 80045c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <_ftoa+0x254>
 80045cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045ce:	2201      	movs	r2, #1
 80045d0:	4013      	ands	r3, r2
 80045d2:	d002      	beq.n	80045da <_ftoa+0x25a>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 80045d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045d6:	3301      	adds	r3, #1
 80045d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  }

  if (prec == 0U) {
 80045da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d12f      	bne.n	8004640 <_ftoa+0x2c0>
    diff = value - (double)whole;
 80045e0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80045e2:	f7fd fef3 	bl	80023cc <__aeabi_i2d>
 80045e6:	0002      	movs	r2, r0
 80045e8:	000b      	movs	r3, r1
 80045ea:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80045ec:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80045ee:	f7fd faf3 	bl	8001bd8 <__aeabi_dsub>
 80045f2:	0002      	movs	r2, r0
 80045f4:	000b      	movs	r3, r1
 80045f6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80045f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 80045fa:	2301      	movs	r3, #1
 80045fc:	1c1c      	adds	r4, r3, #0
 80045fe:	2200      	movs	r2, #0
 8004600:	4b38      	ldr	r3, [pc, #224]	@ (80046e4 <_ftoa+0x364>)
 8004602:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004604:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004606:	f7fb ff27 	bl	8000458 <__aeabi_dcmplt>
 800460a:	1e03      	subs	r3, r0, #0
 800460c:	d101      	bne.n	8004612 <_ftoa+0x292>
 800460e:	2300      	movs	r3, #0
 8004610:	1c1c      	adds	r4, r3, #0
 8004612:	b2e3      	uxtb	r3, r4
 8004614:	2201      	movs	r2, #1
 8004616:	4053      	eors	r3, r2
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d107      	bne.n	800462e <_ftoa+0x2ae>
 800461e:	2200      	movs	r2, #0
 8004620:	4b30      	ldr	r3, [pc, #192]	@ (80046e4 <_ftoa+0x364>)
 8004622:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004624:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004626:	f7fb ff2b 	bl	8000480 <__aeabi_dcmpgt>
 800462a:	1e03      	subs	r3, r0, #0
 800462c:	d046      	beq.n	80046bc <_ftoa+0x33c>
 800462e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004630:	2201      	movs	r2, #1
 8004632:	4013      	ands	r3, r2
 8004634:	d100      	bne.n	8004638 <_ftoa+0x2b8>
 8004636:	e070      	b.n	800471a <_ftoa+0x39a>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8004638:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800463a:	3301      	adds	r3, #1
 800463c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800463e:	e06c      	b.n	800471a <_ftoa+0x39a>
    }
  }
  else {
    unsigned int count = prec;
 8004640:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004642:	647b      	str	r3, [r7, #68]	@ 0x44
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004644:	e01b      	b.n	800467e <_ftoa+0x2fe>
      --count;
 8004646:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004648:	3b01      	subs	r3, #1
 800464a:	647b      	str	r3, [r7, #68]	@ 0x44
      buf[len++] = (char)(48U + (frac % 10U));
 800464c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800464e:	210a      	movs	r1, #10
 8004650:	0018      	movs	r0, r3
 8004652:	f7fb fdfb 	bl	800024c <__aeabi_uidivmod>
 8004656:	000b      	movs	r3, r1
 8004658:	b2da      	uxtb	r2, r3
 800465a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800465c:	1c59      	adds	r1, r3, #1
 800465e:	6579      	str	r1, [r7, #84]	@ 0x54
 8004660:	3230      	adds	r2, #48	@ 0x30
 8004662:	b2d1      	uxtb	r1, r2
 8004664:	2210      	movs	r2, #16
 8004666:	18ba      	adds	r2, r7, r2
 8004668:	54d1      	strb	r1, [r2, r3]
      if (!(frac /= 10U)) {
 800466a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800466c:	210a      	movs	r1, #10
 800466e:	0018      	movs	r0, r3
 8004670:	f7fb fd66 	bl	8000140 <__udivsi3>
 8004674:	0003      	movs	r3, r0
 8004676:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004678:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800467a:	2b00      	cmp	r3, #0
 800467c:	d003      	beq.n	8004686 <_ftoa+0x306>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800467e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004680:	2b1f      	cmp	r3, #31
 8004682:	d9e0      	bls.n	8004646 <_ftoa+0x2c6>
 8004684:	e008      	b.n	8004698 <_ftoa+0x318>
        break;
 8004686:	46c0      	nop			@ (mov r8, r8)
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8004688:	e006      	b.n	8004698 <_ftoa+0x318>
      buf[len++] = '0';
 800468a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800468c:	1c5a      	adds	r2, r3, #1
 800468e:	657a      	str	r2, [r7, #84]	@ 0x54
 8004690:	2210      	movs	r2, #16
 8004692:	18ba      	adds	r2, r7, r2
 8004694:	2130      	movs	r1, #48	@ 0x30
 8004696:	54d1      	strb	r1, [r2, r3]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8004698:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800469a:	2b1f      	cmp	r3, #31
 800469c:	d804      	bhi.n	80046a8 <_ftoa+0x328>
 800469e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046a0:	1e5a      	subs	r2, r3, #1
 80046a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1f0      	bne.n	800468a <_ftoa+0x30a>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80046a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046aa:	2b1f      	cmp	r3, #31
 80046ac:	d835      	bhi.n	800471a <_ftoa+0x39a>
      // add decimal
      buf[len++] = '.';
 80046ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046b0:	1c5a      	adds	r2, r3, #1
 80046b2:	657a      	str	r2, [r7, #84]	@ 0x54
 80046b4:	2210      	movs	r2, #16
 80046b6:	18ba      	adds	r2, r7, r2
 80046b8:	212e      	movs	r1, #46	@ 0x2e
 80046ba:	54d1      	strb	r1, [r2, r3]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80046bc:	e02d      	b.n	800471a <_ftoa+0x39a>
 80046be:	46c0      	nop			@ (mov r8, r8)
 80046c0:	0800fc90 	.word	0x0800fc90
 80046c4:	ffefffff 	.word	0xffefffff
 80046c8:	0800fc94 	.word	0x0800fc94
 80046cc:	7fefffff 	.word	0x7fefffff
 80046d0:	0800fc9c 	.word	0x0800fc9c
 80046d4:	0800fca4 	.word	0x0800fca4
 80046d8:	41cdcd65 	.word	0x41cdcd65
 80046dc:	c1cdcd65 	.word	0xc1cdcd65
 80046e0:	0800ffd8 	.word	0x0800ffd8
 80046e4:	3fe00000 	.word	0x3fe00000
    buf[len++] = (char)(48 + (whole % 10));
 80046e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046ea:	210a      	movs	r1, #10
 80046ec:	0018      	movs	r0, r3
 80046ee:	f7fb fe97 	bl	8000420 <__aeabi_idivmod>
 80046f2:	000b      	movs	r3, r1
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046f8:	1c59      	adds	r1, r3, #1
 80046fa:	6579      	str	r1, [r7, #84]	@ 0x54
 80046fc:	3230      	adds	r2, #48	@ 0x30
 80046fe:	b2d1      	uxtb	r1, r2
 8004700:	2210      	movs	r2, #16
 8004702:	18ba      	adds	r2, r7, r2
 8004704:	54d1      	strb	r1, [r2, r3]
    if (!(whole /= 10)) {
 8004706:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004708:	210a      	movs	r1, #10
 800470a:	0018      	movs	r0, r3
 800470c:	f7fb fda2 	bl	8000254 <__divsi3>
 8004710:	0003      	movs	r3, r0
 8004712:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004714:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <_ftoa+0x3a2>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800471a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800471c:	2b1f      	cmp	r3, #31
 800471e:	d9e3      	bls.n	80046e8 <_ftoa+0x368>
 8004720:	e000      	b.n	8004724 <_ftoa+0x3a4>
      break;
 8004722:	46c0      	nop			@ (mov r8, r8)
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8004724:	2180      	movs	r1, #128	@ 0x80
 8004726:	187b      	adds	r3, r7, r1
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2202      	movs	r2, #2
 800472c:	4013      	ands	r3, r2
 800472e:	d123      	bne.n	8004778 <_ftoa+0x3f8>
 8004730:	187b      	adds	r3, r7, r1
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2201      	movs	r2, #1
 8004736:	4013      	ands	r3, r2
 8004738:	d01e      	beq.n	8004778 <_ftoa+0x3f8>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800473a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800473c:	2b00      	cmp	r3, #0
 800473e:	d014      	beq.n	800476a <_ftoa+0x3ea>
 8004740:	2353      	movs	r3, #83	@ 0x53
 8004742:	18fb      	adds	r3, r7, r3
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d104      	bne.n	8004754 <_ftoa+0x3d4>
 800474a:	187b      	adds	r3, r7, r1
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	220c      	movs	r2, #12
 8004750:	4013      	ands	r3, r2
 8004752:	d00a      	beq.n	800476a <_ftoa+0x3ea>
      width--;
 8004754:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004756:	3b01      	subs	r3, #1
 8004758:	67fb      	str	r3, [r7, #124]	@ 0x7c
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800475a:	e006      	b.n	800476a <_ftoa+0x3ea>
      buf[len++] = '0';
 800475c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	657a      	str	r2, [r7, #84]	@ 0x54
 8004762:	2210      	movs	r2, #16
 8004764:	18ba      	adds	r2, r7, r2
 8004766:	2130      	movs	r1, #48	@ 0x30
 8004768:	54d1      	strb	r1, [r2, r3]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800476a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800476c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800476e:	429a      	cmp	r2, r3
 8004770:	d202      	bcs.n	8004778 <_ftoa+0x3f8>
 8004772:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004774:	2b1f      	cmp	r3, #31
 8004776:	d9f1      	bls.n	800475c <_ftoa+0x3dc>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004778:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800477a:	2b1f      	cmp	r3, #31
 800477c:	d827      	bhi.n	80047ce <_ftoa+0x44e>
    if (negative) {
 800477e:	2353      	movs	r3, #83	@ 0x53
 8004780:	18fb      	adds	r3, r7, r3
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d007      	beq.n	8004798 <_ftoa+0x418>
      buf[len++] = '-';
 8004788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800478a:	1c5a      	adds	r2, r3, #1
 800478c:	657a      	str	r2, [r7, #84]	@ 0x54
 800478e:	2210      	movs	r2, #16
 8004790:	18ba      	adds	r2, r7, r2
 8004792:	212d      	movs	r1, #45	@ 0x2d
 8004794:	54d1      	strb	r1, [r2, r3]
 8004796:	e01a      	b.n	80047ce <_ftoa+0x44e>
    }
    else if (flags & FLAGS_PLUS) {
 8004798:	2380      	movs	r3, #128	@ 0x80
 800479a:	18fb      	adds	r3, r7, r3
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2204      	movs	r2, #4
 80047a0:	4013      	ands	r3, r2
 80047a2:	d007      	beq.n	80047b4 <_ftoa+0x434>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80047a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047a6:	1c5a      	adds	r2, r3, #1
 80047a8:	657a      	str	r2, [r7, #84]	@ 0x54
 80047aa:	2210      	movs	r2, #16
 80047ac:	18ba      	adds	r2, r7, r2
 80047ae:	212b      	movs	r1, #43	@ 0x2b
 80047b0:	54d1      	strb	r1, [r2, r3]
 80047b2:	e00c      	b.n	80047ce <_ftoa+0x44e>
    }
    else if (flags & FLAGS_SPACE) {
 80047b4:	2380      	movs	r3, #128	@ 0x80
 80047b6:	18fb      	adds	r3, r7, r3
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2208      	movs	r2, #8
 80047bc:	4013      	ands	r3, r2
 80047be:	d006      	beq.n	80047ce <_ftoa+0x44e>
      buf[len++] = ' ';
 80047c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047c2:	1c5a      	adds	r2, r3, #1
 80047c4:	657a      	str	r2, [r7, #84]	@ 0x54
 80047c6:	2210      	movs	r2, #16
 80047c8:	18ba      	adds	r2, r7, r2
 80047ca:	2120      	movs	r1, #32
 80047cc:	54d1      	strb	r1, [r2, r3]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80047ce:	683c      	ldr	r4, [r7, #0]
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	68b9      	ldr	r1, [r7, #8]
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	2380      	movs	r3, #128	@ 0x80
 80047d8:	18fb      	adds	r3, r7, r3
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	9303      	str	r3, [sp, #12]
 80047de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047e0:	9302      	str	r3, [sp, #8]
 80047e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047e4:	9301      	str	r3, [sp, #4]
 80047e6:	2310      	movs	r3, #16
 80047e8:	18fb      	adds	r3, r7, r3
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	0023      	movs	r3, r4
 80047ee:	f7ff fbc8 	bl	8003f82 <_out_rev>
 80047f2:	0003      	movs	r3, r0
}
 80047f4:	0018      	movs	r0, r3
 80047f6:	46bd      	mov	sp, r7
 80047f8:	b017      	add	sp, #92	@ 0x5c
 80047fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080047fc <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80047fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047fe:	b0a7      	sub	sp, #156	@ 0x9c
 8004800:	af06      	add	r7, sp, #24
 8004802:	6478      	str	r0, [r7, #68]	@ 0x44
 8004804:	6439      	str	r1, [r7, #64]	@ 0x40
 8004806:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004808:	63bb      	str	r3, [r7, #56]	@ 0x38
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800480a:	2698      	movs	r6, #152	@ 0x98
 800480c:	19bb      	adds	r3, r7, r6
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	19b9      	adds	r1, r7, r6
 8004814:	6808      	ldr	r0, [r1, #0]
 8004816:	6849      	ldr	r1, [r1, #4]
 8004818:	f7fb fe18 	bl	800044c <__aeabi_dcmpeq>
 800481c:	1e03      	subs	r3, r0, #0
 800481e:	d013      	beq.n	8004848 <_etoa+0x4c>
 8004820:	2201      	movs	r2, #1
 8004822:	4252      	negs	r2, r2
 8004824:	4bda      	ldr	r3, [pc, #872]	@ (8004b90 <_etoa+0x394>)
 8004826:	19b9      	adds	r1, r7, r6
 8004828:	6808      	ldr	r0, [r1, #0]
 800482a:	6849      	ldr	r1, [r1, #4]
 800482c:	f7fb fe28 	bl	8000480 <__aeabi_dcmpgt>
 8004830:	1e03      	subs	r3, r0, #0
 8004832:	d109      	bne.n	8004848 <_etoa+0x4c>
 8004834:	2201      	movs	r2, #1
 8004836:	4252      	negs	r2, r2
 8004838:	4bd6      	ldr	r3, [pc, #856]	@ (8004b94 <_etoa+0x398>)
 800483a:	19b9      	adds	r1, r7, r6
 800483c:	6808      	ldr	r0, [r1, #0]
 800483e:	6849      	ldr	r1, [r1, #4]
 8004840:	f7fb fe0a 	bl	8000458 <__aeabi_dcmplt>
 8004844:	1e03      	subs	r3, r0, #0
 8004846:	d01b      	beq.n	8004880 <_etoa+0x84>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8004848:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 800484a:	6bfc      	ldr	r4, [r7, #60]	@ 0x3c
 800484c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800484e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8004850:	23a8      	movs	r3, #168	@ 0xa8
 8004852:	18fb      	adds	r3, r7, r3
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	9304      	str	r3, [sp, #16]
 8004858:	23a4      	movs	r3, #164	@ 0xa4
 800485a:	18fb      	adds	r3, r7, r3
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	9303      	str	r3, [sp, #12]
 8004860:	23a0      	movs	r3, #160	@ 0xa0
 8004862:	18fb      	adds	r3, r7, r3
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	9302      	str	r3, [sp, #8]
 8004868:	2398      	movs	r3, #152	@ 0x98
 800486a:	18fb      	adds	r3, r7, r3
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	9200      	str	r2, [sp, #0]
 8004872:	9301      	str	r3, [sp, #4]
 8004874:	002b      	movs	r3, r5
 8004876:	0022      	movs	r2, r4
 8004878:	f7ff fd82 	bl	8004380 <_ftoa>
 800487c:	0003      	movs	r3, r0
 800487e:	e272      	b.n	8004d66 <_etoa+0x56a>
  }

  // determine the sign
  const bool negative = value < 0;
 8004880:	233b      	movs	r3, #59	@ 0x3b
 8004882:	2238      	movs	r2, #56	@ 0x38
 8004884:	189b      	adds	r3, r3, r2
 8004886:	19de      	adds	r6, r3, r7
 8004888:	2301      	movs	r3, #1
 800488a:	73fb      	strb	r3, [r7, #15]
 800488c:	2200      	movs	r2, #0
 800488e:	2300      	movs	r3, #0
 8004890:	2198      	movs	r1, #152	@ 0x98
 8004892:	1879      	adds	r1, r7, r1
 8004894:	6808      	ldr	r0, [r1, #0]
 8004896:	6849      	ldr	r1, [r1, #4]
 8004898:	f7fb fdde 	bl	8000458 <__aeabi_dcmplt>
 800489c:	1e03      	subs	r3, r0, #0
 800489e:	d101      	bne.n	80048a4 <_etoa+0xa8>
 80048a0:	2300      	movs	r3, #0
 80048a2:	73fb      	strb	r3, [r7, #15]
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
 80048a6:	7033      	strb	r3, [r6, #0]
  if (negative) {
 80048a8:	233b      	movs	r3, #59	@ 0x3b
 80048aa:	2238      	movs	r2, #56	@ 0x38
 80048ac:	189b      	adds	r3, r3, r2
 80048ae:	19db      	adds	r3, r3, r7
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00f      	beq.n	80048d6 <_etoa+0xda>
    value = -value;
 80048b6:	2198      	movs	r1, #152	@ 0x98
 80048b8:	187b      	adds	r3, r7, r1
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	603b      	str	r3, [r7, #0]
 80048be:	239c      	movs	r3, #156	@ 0x9c
 80048c0:	18fb      	adds	r3, r7, r3
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	2380      	movs	r3, #128	@ 0x80
 80048c6:	061b      	lsls	r3, r3, #24
 80048c8:	4053      	eors	r3, r2
 80048ca:	607b      	str	r3, [r7, #4]
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	1879      	adds	r1, r7, r1
 80048d2:	600a      	str	r2, [r1, #0]
 80048d4:	604b      	str	r3, [r1, #4]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 80048d6:	23a8      	movs	r3, #168	@ 0xa8
 80048d8:	18fb      	adds	r3, r7, r3
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	2380      	movs	r3, #128	@ 0x80
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	4013      	ands	r3, r2
 80048e2:	d103      	bne.n	80048ec <_etoa+0xf0>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80048e4:	2306      	movs	r3, #6
 80048e6:	22a0      	movs	r2, #160	@ 0xa0
 80048e8:	18ba      	adds	r2, r7, r2
 80048ea:	6013      	str	r3, [r2, #0]
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 80048ec:	2698      	movs	r6, #152	@ 0x98
 80048ee:	19bb      	adds	r3, r7, r6
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80048f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 80048f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048fc:	0d1b      	lsrs	r3, r3, #20
 80048fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004900:	2300      	movs	r3, #0
 8004902:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004906:	055b      	lsls	r3, r3, #21
 8004908:	0d5b      	lsrs	r3, r3, #21
 800490a:	4aa3      	ldr	r2, [pc, #652]	@ (8004b98 <_etoa+0x39c>)
 800490c:	4694      	mov	ip, r2
 800490e:	4463      	add	r3, ip
 8004910:	66fb      	str	r3, [r7, #108]	@ 0x6c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8004912:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004914:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004916:	2100      	movs	r1, #0
 8004918:	0010      	movs	r0, r2
 800491a:	4388      	bics	r0, r1
 800491c:	0004      	movs	r4, r0
 800491e:	031b      	lsls	r3, r3, #12
 8004920:	0b1d      	lsrs	r5, r3, #12
 8004922:	2300      	movs	r3, #0
 8004924:	4323      	orrs	r3, r4
 8004926:	623b      	str	r3, [r7, #32]
 8004928:	4b9c      	ldr	r3, [pc, #624]	@ (8004b9c <_etoa+0x3a0>)
 800492a:	432b      	orrs	r3, r5
 800492c:	627b      	str	r3, [r7, #36]	@ 0x24
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8004932:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004934:	64fc      	str	r4, [r7, #76]	@ 0x4c
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8004936:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004938:	f7fd fd48 	bl	80023cc <__aeabi_i2d>
 800493c:	4a98      	ldr	r2, [pc, #608]	@ (8004ba0 <_etoa+0x3a4>)
 800493e:	4b99      	ldr	r3, [pc, #612]	@ (8004ba4 <_etoa+0x3a8>)
 8004940:	f7fc fe82 	bl	8001648 <__aeabi_dmul>
 8004944:	0002      	movs	r2, r0
 8004946:	000b      	movs	r3, r1
 8004948:	0010      	movs	r0, r2
 800494a:	0019      	movs	r1, r3
 800494c:	4a96      	ldr	r2, [pc, #600]	@ (8004ba8 <_etoa+0x3ac>)
 800494e:	4b97      	ldr	r3, [pc, #604]	@ (8004bac <_etoa+0x3b0>)
 8004950:	f7fb fed2 	bl	80006f8 <__aeabi_dadd>
 8004954:	0002      	movs	r2, r0
 8004956:	000b      	movs	r3, r1
 8004958:	0014      	movs	r4, r2
 800495a:	001d      	movs	r5, r3
 800495c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800495e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004960:	2200      	movs	r2, #0
 8004962:	4b93      	ldr	r3, [pc, #588]	@ (8004bb0 <_etoa+0x3b4>)
 8004964:	f7fd f938 	bl	8001bd8 <__aeabi_dsub>
 8004968:	0002      	movs	r2, r0
 800496a:	000b      	movs	r3, r1
 800496c:	0010      	movs	r0, r2
 800496e:	0019      	movs	r1, r3
 8004970:	4a90      	ldr	r2, [pc, #576]	@ (8004bb4 <_etoa+0x3b8>)
 8004972:	4b91      	ldr	r3, [pc, #580]	@ (8004bb8 <_etoa+0x3bc>)
 8004974:	f7fc fe68 	bl	8001648 <__aeabi_dmul>
 8004978:	0002      	movs	r2, r0
 800497a:	000b      	movs	r3, r1
 800497c:	0020      	movs	r0, r4
 800497e:	0029      	movs	r1, r5
 8004980:	f7fb feba 	bl	80006f8 <__aeabi_dadd>
 8004984:	0002      	movs	r2, r0
 8004986:	000b      	movs	r3, r1
 8004988:	0010      	movs	r0, r2
 800498a:	0019      	movs	r1, r3
 800498c:	f7fd fce2 	bl	8002354 <__aeabi_d2iz>
 8004990:	0003      	movs	r3, r0
 8004992:	67fb      	str	r3, [r7, #124]	@ 0x7c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8004994:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8004996:	f7fd fd19 	bl	80023cc <__aeabi_i2d>
 800499a:	4a88      	ldr	r2, [pc, #544]	@ (8004bbc <_etoa+0x3c0>)
 800499c:	4b88      	ldr	r3, [pc, #544]	@ (8004bc0 <_etoa+0x3c4>)
 800499e:	f7fc fe53 	bl	8001648 <__aeabi_dmul>
 80049a2:	0002      	movs	r2, r0
 80049a4:	000b      	movs	r3, r1
 80049a6:	0010      	movs	r0, r2
 80049a8:	0019      	movs	r1, r3
 80049aa:	2200      	movs	r2, #0
 80049ac:	4b85      	ldr	r3, [pc, #532]	@ (8004bc4 <_etoa+0x3c8>)
 80049ae:	f7fb fea3 	bl	80006f8 <__aeabi_dadd>
 80049b2:	0002      	movs	r2, r0
 80049b4:	000b      	movs	r3, r1
 80049b6:	0010      	movs	r0, r2
 80049b8:	0019      	movs	r1, r3
 80049ba:	f7fd fccb 	bl	8002354 <__aeabi_d2iz>
 80049be:	0003      	movs	r3, r0
 80049c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 80049c2:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80049c4:	f7fd fd02 	bl	80023cc <__aeabi_i2d>
 80049c8:	4a7f      	ldr	r2, [pc, #508]	@ (8004bc8 <_etoa+0x3cc>)
 80049ca:	4b80      	ldr	r3, [pc, #512]	@ (8004bcc <_etoa+0x3d0>)
 80049cc:	f7fc fe3c 	bl	8001648 <__aeabi_dmul>
 80049d0:	0002      	movs	r2, r0
 80049d2:	000b      	movs	r3, r1
 80049d4:	0014      	movs	r4, r2
 80049d6:	001d      	movs	r5, r3
 80049d8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80049da:	f7fd fcf7 	bl	80023cc <__aeabi_i2d>
 80049de:	4a7c      	ldr	r2, [pc, #496]	@ (8004bd0 <_etoa+0x3d4>)
 80049e0:	4b7c      	ldr	r3, [pc, #496]	@ (8004bd4 <_etoa+0x3d8>)
 80049e2:	f7fc fe31 	bl	8001648 <__aeabi_dmul>
 80049e6:	0002      	movs	r2, r0
 80049e8:	000b      	movs	r3, r1
 80049ea:	0020      	movs	r0, r4
 80049ec:	0029      	movs	r1, r5
 80049ee:	f7fd f8f3 	bl	8001bd8 <__aeabi_dsub>
 80049f2:	0002      	movs	r2, r0
 80049f4:	000b      	movs	r3, r1
 80049f6:	663a      	str	r2, [r7, #96]	@ 0x60
 80049f8:	667b      	str	r3, [r7, #100]	@ 0x64
  const double z2 = z * z;
 80049fa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80049fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049fe:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8004a00:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8004a02:	f7fc fe21 	bl	8001648 <__aeabi_dmul>
 8004a06:	0002      	movs	r2, r0
 8004a08:	000b      	movs	r3, r1
 8004a0a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004a0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8004a0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a10:	4a71      	ldr	r2, [pc, #452]	@ (8004bd8 <_etoa+0x3dc>)
 8004a12:	4694      	mov	ip, r2
 8004a14:	4463      	add	r3, ip
 8004a16:	61bb      	str	r3, [r7, #24]
 8004a18:	17db      	asrs	r3, r3, #31
 8004a1a:	61fb      	str	r3, [r7, #28]
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	051b      	lsls	r3, r3, #20
 8004a20:	617b      	str	r3, [r7, #20]
 8004a22:	2300      	movs	r3, #0
 8004a24:	613b      	str	r3, [r7, #16]
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	697c      	ldr	r4, [r7, #20]
 8004a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a2c:	64fc      	str	r4, [r7, #76]	@ 0x4c
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8004a2e:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 8004a30:	6cfd      	ldr	r5, [r7, #76]	@ 0x4c
 8004a32:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8004a34:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8004a36:	0002      	movs	r2, r0
 8004a38:	000b      	movs	r3, r1
 8004a3a:	f7fb fe5d 	bl	80006f8 <__aeabi_dadd>
 8004a3e:	0002      	movs	r2, r0
 8004a40:	000b      	movs	r3, r1
 8004a42:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a46:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004a48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	2180      	movs	r1, #128	@ 0x80
 8004a4e:	05c9      	lsls	r1, r1, #23
 8004a50:	f7fd f8c2 	bl	8001bd8 <__aeabi_dsub>
 8004a54:	0002      	movs	r2, r0
 8004a56:	000b      	movs	r3, r1
 8004a58:	623a      	str	r2, [r7, #32]
 8004a5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	4b5f      	ldr	r3, [pc, #380]	@ (8004bdc <_etoa+0x3e0>)
 8004a60:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004a62:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8004a64:	f7fc f9ac 	bl	8000dc0 <__aeabi_ddiv>
 8004a68:	0002      	movs	r2, r0
 8004a6a:	000b      	movs	r3, r1
 8004a6c:	0010      	movs	r0, r2
 8004a6e:	0019      	movs	r1, r3
 8004a70:	2200      	movs	r2, #0
 8004a72:	4b5b      	ldr	r3, [pc, #364]	@ (8004be0 <_etoa+0x3e4>)
 8004a74:	f7fb fe40 	bl	80006f8 <__aeabi_dadd>
 8004a78:	0002      	movs	r2, r0
 8004a7a:	000b      	movs	r3, r1
 8004a7c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004a7e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8004a80:	f7fc f99e 	bl	8000dc0 <__aeabi_ddiv>
 8004a84:	0002      	movs	r2, r0
 8004a86:	000b      	movs	r3, r1
 8004a88:	0010      	movs	r0, r2
 8004a8a:	0019      	movs	r1, r3
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	4b55      	ldr	r3, [pc, #340]	@ (8004be4 <_etoa+0x3e8>)
 8004a90:	f7fb fe32 	bl	80006f8 <__aeabi_dadd>
 8004a94:	0002      	movs	r2, r0
 8004a96:	000b      	movs	r3, r1
 8004a98:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004a9a:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8004a9c:	f7fc f990 	bl	8000dc0 <__aeabi_ddiv>
 8004aa0:	0002      	movs	r2, r0
 8004aa2:	000b      	movs	r3, r1
 8004aa4:	6a38      	ldr	r0, [r7, #32]
 8004aa6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004aa8:	f7fb fe26 	bl	80006f8 <__aeabi_dadd>
 8004aac:	0002      	movs	r2, r0
 8004aae:	000b      	movs	r3, r1
 8004ab0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ab2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ab4:	f7fc f984 	bl	8000dc0 <__aeabi_ddiv>
 8004ab8:	0002      	movs	r2, r0
 8004aba:	000b      	movs	r3, r1
 8004abc:	0010      	movs	r0, r2
 8004abe:	0019      	movs	r1, r3
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	4b36      	ldr	r3, [pc, #216]	@ (8004b9c <_etoa+0x3a0>)
 8004ac4:	f7fb fe18 	bl	80006f8 <__aeabi_dadd>
 8004ac8:	0002      	movs	r2, r0
 8004aca:	000b      	movs	r3, r1
 8004acc:	0020      	movs	r0, r4
 8004ace:	0029      	movs	r1, r5
 8004ad0:	f7fc fdba 	bl	8001648 <__aeabi_dmul>
 8004ad4:	0002      	movs	r2, r0
 8004ad6:	000b      	movs	r3, r1
 8004ad8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
  // correct for rounding errors
  if (value < conv.F) {
 8004adc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ade:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ae0:	19b9      	adds	r1, r7, r6
 8004ae2:	6808      	ldr	r0, [r1, #0]
 8004ae4:	6849      	ldr	r1, [r1, #4]
 8004ae6:	f7fb fcb7 	bl	8000458 <__aeabi_dcmplt>
 8004aea:	1e03      	subs	r3, r0, #0
 8004aec:	d00c      	beq.n	8004b08 <_etoa+0x30c>
    expval--;
 8004aee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004af0:	3b01      	subs	r3, #1
 8004af2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    conv.F /= 10;
 8004af4:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8004af6:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004af8:	2200      	movs	r2, #0
 8004afa:	4b39      	ldr	r3, [pc, #228]	@ (8004be0 <_etoa+0x3e4>)
 8004afc:	f7fc f960 	bl	8000dc0 <__aeabi_ddiv>
 8004b00:	0002      	movs	r2, r0
 8004b02:	000b      	movs	r3, r1
 8004b04:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004b06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8004b08:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b0a:	2b63      	cmp	r3, #99	@ 0x63
 8004b0c:	dc04      	bgt.n	8004b18 <_etoa+0x31c>
 8004b0e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b10:	3363      	adds	r3, #99	@ 0x63
 8004b12:	db01      	blt.n	8004b18 <_etoa+0x31c>
 8004b14:	2304      	movs	r3, #4
 8004b16:	e000      	b.n	8004b1a <_etoa+0x31e>
 8004b18:	2305      	movs	r3, #5
 8004b1a:	67bb      	str	r3, [r7, #120]	@ 0x78

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8004b1c:	23a8      	movs	r3, #168	@ 0xa8
 8004b1e:	18fb      	adds	r3, r7, r3
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	2380      	movs	r3, #128	@ 0x80
 8004b24:	011b      	lsls	r3, r3, #4
 8004b26:	4013      	ands	r3, r2
 8004b28:	d100      	bne.n	8004b2c <_etoa+0x330>
 8004b2a:	e074      	b.n	8004c16 <_etoa+0x41a>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8004b2c:	4a2e      	ldr	r2, [pc, #184]	@ (8004be8 <_etoa+0x3ec>)
 8004b2e:	4b2f      	ldr	r3, [pc, #188]	@ (8004bec <_etoa+0x3f0>)
 8004b30:	2498      	movs	r4, #152	@ 0x98
 8004b32:	1939      	adds	r1, r7, r4
 8004b34:	6808      	ldr	r0, [r1, #0]
 8004b36:	6849      	ldr	r1, [r1, #4]
 8004b38:	f7fb fcac 	bl	8000494 <__aeabi_dcmpge>
 8004b3c:	1e03      	subs	r3, r0, #0
 8004b3e:	d059      	beq.n	8004bf4 <_etoa+0x3f8>
 8004b40:	2200      	movs	r2, #0
 8004b42:	4b2b      	ldr	r3, [pc, #172]	@ (8004bf0 <_etoa+0x3f4>)
 8004b44:	1939      	adds	r1, r7, r4
 8004b46:	6808      	ldr	r0, [r1, #0]
 8004b48:	6849      	ldr	r1, [r1, #4]
 8004b4a:	f7fb fc85 	bl	8000458 <__aeabi_dcmplt>
 8004b4e:	1e03      	subs	r3, r0, #0
 8004b50:	d050      	beq.n	8004bf4 <_etoa+0x3f8>
      if ((int)prec > expval) {
 8004b52:	21a0      	movs	r1, #160	@ 0xa0
 8004b54:	187b      	adds	r3, r7, r1
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	da07      	bge.n	8004b6e <_etoa+0x372>
        prec = (unsigned)((int)prec - expval - 1);
 8004b5e:	187b      	adds	r3, r7, r1
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	3b01      	subs	r3, #1
 8004b68:	187a      	adds	r2, r7, r1
 8004b6a:	6013      	str	r3, [r2, #0]
 8004b6c:	e003      	b.n	8004b76 <_etoa+0x37a>
      }
      else {
        prec = 0;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	22a0      	movs	r2, #160	@ 0xa0
 8004b72:	18ba      	adds	r2, r7, r2
 8004b74:	6013      	str	r3, [r2, #0]
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8004b76:	21a8      	movs	r1, #168	@ 0xa8
 8004b78:	187b      	adds	r3, r7, r1
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2280      	movs	r2, #128	@ 0x80
 8004b7e:	00d2      	lsls	r2, r2, #3
 8004b80:	4313      	orrs	r3, r2
 8004b82:	187a      	adds	r2, r7, r1
 8004b84:	6013      	str	r3, [r2, #0]
      // no characters in exponent
      minwidth = 0U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	67bb      	str	r3, [r7, #120]	@ 0x78
      expval   = 0;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b8e:	e042      	b.n	8004c16 <_etoa+0x41a>
 8004b90:	7fefffff 	.word	0x7fefffff
 8004b94:	ffefffff 	.word	0xffefffff
 8004b98:	fffffc01 	.word	0xfffffc01
 8004b9c:	3ff00000 	.word	0x3ff00000
 8004ba0:	509f79fb 	.word	0x509f79fb
 8004ba4:	3fd34413 	.word	0x3fd34413
 8004ba8:	8b60c8b3 	.word	0x8b60c8b3
 8004bac:	3fc68a28 	.word	0x3fc68a28
 8004bb0:	3ff80000 	.word	0x3ff80000
 8004bb4:	636f4361 	.word	0x636f4361
 8004bb8:	3fd287a7 	.word	0x3fd287a7
 8004bbc:	0979a371 	.word	0x0979a371
 8004bc0:	400a934f 	.word	0x400a934f
 8004bc4:	3fe00000 	.word	0x3fe00000
 8004bc8:	bbb55516 	.word	0xbbb55516
 8004bcc:	40026bb1 	.word	0x40026bb1
 8004bd0:	fefa39ef 	.word	0xfefa39ef
 8004bd4:	3fe62e42 	.word	0x3fe62e42
 8004bd8:	000003ff 	.word	0x000003ff
 8004bdc:	402c0000 	.word	0x402c0000
 8004be0:	40240000 	.word	0x40240000
 8004be4:	40180000 	.word	0x40180000
 8004be8:	eb1c432d 	.word	0xeb1c432d
 8004bec:	3f1a36e2 	.word	0x3f1a36e2
 8004bf0:	412e8480 	.word	0x412e8480
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8004bf4:	21a0      	movs	r1, #160	@ 0xa0
 8004bf6:	187b      	adds	r3, r7, r1
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00b      	beq.n	8004c16 <_etoa+0x41a>
 8004bfe:	23a8      	movs	r3, #168	@ 0xa8
 8004c00:	18fb      	adds	r3, r7, r3
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	2380      	movs	r3, #128	@ 0x80
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	4013      	ands	r3, r2
 8004c0a:	d004      	beq.n	8004c16 <_etoa+0x41a>
        --prec;
 8004c0c:	187b      	adds	r3, r7, r1
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3b01      	subs	r3, #1
 8004c12:	187a      	adds	r2, r7, r1
 8004c14:	6013      	str	r3, [r2, #0]
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8004c16:	22a4      	movs	r2, #164	@ 0xa4
 8004c18:	18bb      	adds	r3, r7, r2
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (width > minwidth) {
 8004c1e:	18bb      	adds	r3, r7, r2
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d904      	bls.n	8004c32 <_etoa+0x436>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8004c28:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004c2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004c30:	e001      	b.n	8004c36 <_etoa+0x43a>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8004c32:	2300      	movs	r3, #0
 8004c34:	677b      	str	r3, [r7, #116]	@ 0x74
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8004c36:	23a8      	movs	r3, #168	@ 0xa8
 8004c38:	18fb      	adds	r3, r7, r3
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	4013      	ands	r3, r2
 8004c40:	d004      	beq.n	8004c4c <_etoa+0x450>
 8004c42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d001      	beq.n	8004c4c <_etoa+0x450>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	677b      	str	r3, [r7, #116]	@ 0x74
  }

  // rescale the float value
  if (expval) {
 8004c4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00c      	beq.n	8004c6c <_etoa+0x470>
    value /= conv.F;
 8004c52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c56:	2498      	movs	r4, #152	@ 0x98
 8004c58:	1939      	adds	r1, r7, r4
 8004c5a:	6808      	ldr	r0, [r1, #0]
 8004c5c:	6849      	ldr	r1, [r1, #4]
 8004c5e:	f7fc f8af 	bl	8000dc0 <__aeabi_ddiv>
 8004c62:	0002      	movs	r2, r0
 8004c64:	000b      	movs	r3, r1
 8004c66:	1939      	adds	r1, r7, r4
 8004c68:	600a      	str	r2, [r1, #0]
 8004c6a:	604b      	str	r3, [r1, #4]
  }

  // output the floating part
  const size_t start_idx = idx;
 8004c6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c6e:	657b      	str	r3, [r7, #84]	@ 0x54
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8004c70:	233b      	movs	r3, #59	@ 0x3b
 8004c72:	2238      	movs	r2, #56	@ 0x38
 8004c74:	189b      	adds	r3, r3, r2
 8004c76:	19db      	adds	r3, r3, r7
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00b      	beq.n	8004c96 <_etoa+0x49a>
 8004c7e:	2398      	movs	r3, #152	@ 0x98
 8004c80:	18fb      	adds	r3, r7, r3
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c86:	239c      	movs	r3, #156	@ 0x9c
 8004c88:	18fb      	adds	r3, r7, r3
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2280      	movs	r2, #128	@ 0x80
 8004c8e:	0612      	lsls	r2, r2, #24
 8004c90:	405a      	eors	r2, r3
 8004c92:	637a      	str	r2, [r7, #52]	@ 0x34
 8004c94:	e005      	b.n	8004ca2 <_etoa+0x4a6>
 8004c96:	2398      	movs	r3, #152	@ 0x98
 8004c98:	18fb      	adds	r3, r7, r3
 8004c9a:	685c      	ldr	r4, [r3, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ca0:	637c      	str	r4, [r7, #52]	@ 0x34
 8004ca2:	23a8      	movs	r3, #168	@ 0xa8
 8004ca4:	18fa      	adds	r2, r7, r3
 8004ca6:	6813      	ldr	r3, [r2, #0]
 8004ca8:	4a31      	ldr	r2, [pc, #196]	@ (8004d70 <_etoa+0x574>)
 8004caa:	4013      	ands	r3, r2
 8004cac:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8004cae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004cb0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cb2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8004cb4:	9304      	str	r3, [sp, #16]
 8004cb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cb8:	9303      	str	r3, [sp, #12]
 8004cba:	25a0      	movs	r5, #160	@ 0xa0
 8004cbc:	197d      	adds	r5, r7, r5
 8004cbe:	682b      	ldr	r3, [r5, #0]
 8004cc0:	9302      	str	r3, [sp, #8]
 8004cc2:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
 8004cc4:	6b7e      	ldr	r6, [r7, #52]	@ 0x34
 8004cc6:	9500      	str	r5, [sp, #0]
 8004cc8:	9601      	str	r6, [sp, #4]
 8004cca:	0023      	movs	r3, r4
 8004ccc:	f7ff fb58 	bl	8004380 <_ftoa>
 8004cd0:	0003      	movs	r3, r0
 8004cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // output the exponent part
  if (minwidth) {
 8004cd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d044      	beq.n	8004d64 <_etoa+0x568>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8004cda:	23a8      	movs	r3, #168	@ 0xa8
 8004cdc:	18fb      	adds	r3, r7, r3
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	d001      	beq.n	8004cea <_etoa+0x4ee>
 8004ce6:	2045      	movs	r0, #69	@ 0x45
 8004ce8:	e000      	b.n	8004cec <_etoa+0x4f0>
 8004cea:	2065      	movs	r0, #101	@ 0x65
 8004cec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004cee:	1c53      	adds	r3, r2, #1
 8004cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cf6:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8004cf8:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8004cfa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004cfc:	17da      	asrs	r2, r3, #31
 8004cfe:	189b      	adds	r3, r3, r2
 8004d00:	4053      	eors	r3, r2
 8004d02:	469c      	mov	ip, r3
 8004d04:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004d06:	0fdb      	lsrs	r3, r3, #31
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004d0c:	3a01      	subs	r2, #1
 8004d0e:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 8004d10:	6bfc      	ldr	r4, [r7, #60]	@ 0x3c
 8004d12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d14:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8004d16:	2605      	movs	r6, #5
 8004d18:	9605      	str	r6, [sp, #20]
 8004d1a:	9204      	str	r2, [sp, #16]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	9203      	str	r2, [sp, #12]
 8004d20:	220a      	movs	r2, #10
 8004d22:	9202      	str	r2, [sp, #8]
 8004d24:	9301      	str	r3, [sp, #4]
 8004d26:	4663      	mov	r3, ip
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	002b      	movs	r3, r5
 8004d2c:	0022      	movs	r2, r4
 8004d2e:	f7ff fa4b 	bl	80041c8 <_ntoa_long>
 8004d32:	0003      	movs	r3, r0
 8004d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8004d36:	23a8      	movs	r3, #168	@ 0xa8
 8004d38:	18fb      	adds	r3, r7, r3
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2202      	movs	r2, #2
 8004d3e:	4013      	ands	r3, r2
 8004d40:	d010      	beq.n	8004d64 <_etoa+0x568>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8004d42:	e007      	b.n	8004d54 <_etoa+0x558>
 8004d44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004d46:	1c53      	adds	r3, r2, #1
 8004d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d4e:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8004d50:	2020      	movs	r0, #32
 8004d52:	47a0      	blx	r4
 8004d54:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004d56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	22a4      	movs	r2, #164	@ 0xa4
 8004d5c:	18ba      	adds	r2, r7, r2
 8004d5e:	6812      	ldr	r2, [r2, #0]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d8ef      	bhi.n	8004d44 <_etoa+0x548>
    }
  }
  return idx;
 8004d64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004d66:	0018      	movs	r0, r3
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	b021      	add	sp, #132	@ 0x84
 8004d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d6e:	46c0      	nop			@ (mov r8, r8)
 8004d70:	fffff7ff 	.word	0xfffff7ff

08004d74 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8004d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d76:	46c6      	mov	lr, r8
 8004d78:	b500      	push	{lr}
 8004d7a:	b0a6      	sub	sp, #152	@ 0x98
 8004d7c:	af0a      	add	r7, sp, #40	@ 0x28
 8004d7e:	6278      	str	r0, [r7, #36]	@ 0x24
 8004d80:	6239      	str	r1, [r7, #32]
 8004d82:	61fa      	str	r2, [r7, #28]
 8004d84:	61bb      	str	r3, [r7, #24]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8004d86:	2300      	movs	r3, #0
 8004d88:	65fb      	str	r3, [r7, #92]	@ 0x5c

  if (!buffer) {
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d001      	beq.n	8004d94 <_vsnprintf+0x20>
 8004d90:	f000 fc51 	bl	8005636 <_vsnprintf+0x8c2>
    // use null output function
    out = _out_null;
 8004d94:	4bad      	ldr	r3, [pc, #692]	@ (800504c <_vsnprintf+0x2d8>)
 8004d96:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  while (*format)
 8004d98:	f000 fc4d 	bl	8005636 <_vsnprintf+0x8c2>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	2b25      	cmp	r3, #37	@ 0x25
 8004da2:	d00d      	beq.n	8004dc0 <_vsnprintf+0x4c>
      // no
      out(*format, buffer, idx++, maxlen);
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	7818      	ldrb	r0, [r3, #0]
 8004da8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004daa:	1c53      	adds	r3, r2, #1
 8004dac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	6a39      	ldr	r1, [r7, #32]
 8004db2:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8004db4:	47a0      	blx	r4
      format++;
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	3301      	adds	r3, #1
 8004dba:	61bb      	str	r3, [r7, #24]
      continue;
 8004dbc:	f000 fc3b 	bl	8005636 <_vsnprintf+0x8c2>
    }
    else {
      // yes, evaluate it
      format++;
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	61bb      	str	r3, [r7, #24]
    }

    // evaluate flags
    flags = 0U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    do {
      switch (*format) {
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	3b20      	subs	r3, #32
 8004dd0:	2b10      	cmp	r3, #16
 8004dd2:	d836      	bhi.n	8004e42 <_vsnprintf+0xce>
 8004dd4:	009a      	lsls	r2, r3, #2
 8004dd6:	4b9e      	ldr	r3, [pc, #632]	@ (8005050 <_vsnprintf+0x2dc>)
 8004dd8:	18d3      	adds	r3, r2, r3
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	469f      	mov	pc, r3
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8004dde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004de0:	2201      	movs	r2, #1
 8004de2:	4313      	orrs	r3, r2
 8004de4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	3301      	adds	r3, #1
 8004dea:	61bb      	str	r3, [r7, #24]
 8004dec:	2301      	movs	r3, #1
 8004dee:	663b      	str	r3, [r7, #96]	@ 0x60
 8004df0:	e02a      	b.n	8004e48 <_vsnprintf+0xd4>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8004df2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004df4:	2202      	movs	r2, #2
 8004df6:	4313      	orrs	r3, r2
 8004df8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	61bb      	str	r3, [r7, #24]
 8004e00:	2301      	movs	r3, #1
 8004e02:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e04:	e020      	b.n	8004e48 <_vsnprintf+0xd4>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8004e06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e08:	2204      	movs	r2, #4
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	3301      	adds	r3, #1
 8004e12:	61bb      	str	r3, [r7, #24]
 8004e14:	2301      	movs	r3, #1
 8004e16:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e18:	e016      	b.n	8004e48 <_vsnprintf+0xd4>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8004e1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e1c:	2208      	movs	r2, #8
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	3301      	adds	r3, #1
 8004e26:	61bb      	str	r3, [r7, #24]
 8004e28:	2301      	movs	r3, #1
 8004e2a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e2c:	e00c      	b.n	8004e48 <_vsnprintf+0xd4>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8004e2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e30:	2210      	movs	r2, #16
 8004e32:	4313      	orrs	r3, r2
 8004e34:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	61bb      	str	r3, [r7, #24]
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e40:	e002      	b.n	8004e48 <_vsnprintf+0xd4>
        default :                                   n = 0U; break;
 8004e42:	2300      	movs	r3, #0
 8004e44:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e46:	46c0      	nop			@ (mov r8, r8)
      }
    } while (n);
 8004e48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1bd      	bne.n	8004dca <_vsnprintf+0x56>

    // evaluate width field
    width = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (_is_digit(*format)) {
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	0018      	movs	r0, r3
 8004e58:	f7ff f857 	bl	8003f0a <_is_digit>
 8004e5c:	1e03      	subs	r3, r0, #0
 8004e5e:	d007      	beq.n	8004e70 <_vsnprintf+0xfc>
      width = _atoi(&format);
 8004e60:	2318      	movs	r3, #24
 8004e62:	18fb      	adds	r3, r7, r3
 8004e64:	0018      	movs	r0, r3
 8004e66:	f7ff f869 	bl	8003f3c <_atoi>
 8004e6a:	0003      	movs	r3, r0
 8004e6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e6e:	e01c      	b.n	8004eaa <_vsnprintf+0x136>
    }
    else if (*format == '*') {
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e76:	d118      	bne.n	8004eaa <_vsnprintf+0x136>
      const int w = va_arg(va, int);
 8004e78:	2388      	movs	r3, #136	@ 0x88
 8004e7a:	18fb      	adds	r3, r7, r3
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	1d1a      	adds	r2, r3, #4
 8004e80:	2188      	movs	r1, #136	@ 0x88
 8004e82:	1879      	adds	r1, r7, r1
 8004e84:	600a      	str	r2, [r1, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	64bb      	str	r3, [r7, #72]	@ 0x48
      if (w < 0) {
 8004e8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	da07      	bge.n	8004ea0 <_vsnprintf+0x12c>
        flags |= FLAGS_LEFT;    // reverse padding
 8004e90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e92:	2202      	movs	r2, #2
 8004e94:	4313      	orrs	r3, r2
 8004e96:	66fb      	str	r3, [r7, #108]	@ 0x6c
        width = (unsigned int)-w;
 8004e98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e9a:	425b      	negs	r3, r3
 8004e9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e9e:	e001      	b.n	8004ea4 <_vsnprintf+0x130>
      }
      else {
        width = (unsigned int)w;
 8004ea0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ea2:	66bb      	str	r3, [r7, #104]	@ 0x68
      }
      format++;
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	61bb      	str	r3, [r7, #24]
    }

    // evaluate precision field
    precision = 0U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	667b      	str	r3, [r7, #100]	@ 0x64
    if (*format == '.') {
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	2b2e      	cmp	r3, #46	@ 0x2e
 8004eb4:	d12b      	bne.n	8004f0e <_vsnprintf+0x19a>
      flags |= FLAGS_PRECISION;
 8004eb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004eb8:	2280      	movs	r2, #128	@ 0x80
 8004eba:	00d2      	lsls	r2, r2, #3
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	66fb      	str	r3, [r7, #108]	@ 0x6c
      format++;
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	61bb      	str	r3, [r7, #24]
      if (_is_digit(*format)) {
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	0018      	movs	r0, r3
 8004ecc:	f7ff f81d 	bl	8003f0a <_is_digit>
 8004ed0:	1e03      	subs	r3, r0, #0
 8004ed2:	d007      	beq.n	8004ee4 <_vsnprintf+0x170>
        precision = _atoi(&format);
 8004ed4:	2318      	movs	r3, #24
 8004ed6:	18fb      	adds	r3, r7, r3
 8004ed8:	0018      	movs	r0, r3
 8004eda:	f7ff f82f 	bl	8003f3c <_atoi>
 8004ede:	0003      	movs	r3, r0
 8004ee0:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ee2:	e014      	b.n	8004f0e <_vsnprintf+0x19a>
      }
      else if (*format == '*') {
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004eea:	d110      	bne.n	8004f0e <_vsnprintf+0x19a>
        const int prec = (int)va_arg(va, int);
 8004eec:	2388      	movs	r3, #136	@ 0x88
 8004eee:	18fb      	adds	r3, r7, r3
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	1d1a      	adds	r2, r3, #4
 8004ef4:	2188      	movs	r1, #136	@ 0x88
 8004ef6:	1879      	adds	r1, r7, r1
 8004ef8:	600a      	str	r2, [r1, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	647b      	str	r3, [r7, #68]	@ 0x44
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8004efe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	da00      	bge.n	8004f06 <_vsnprintf+0x192>
 8004f04:	2300      	movs	r3, #0
 8004f06:	667b      	str	r3, [r7, #100]	@ 0x64
        format++;
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	61bb      	str	r3, [r7, #24]
      }
    }

    // evaluate length field
    switch (*format) {
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	3b68      	subs	r3, #104	@ 0x68
 8004f14:	2b12      	cmp	r3, #18
 8004f16:	d847      	bhi.n	8004fa8 <_vsnprintf+0x234>
 8004f18:	009a      	lsls	r2, r3, #2
 8004f1a:	4b4e      	ldr	r3, [pc, #312]	@ (8005054 <_vsnprintf+0x2e0>)
 8004f1c:	18d3      	adds	r3, r2, r3
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	469f      	mov	pc, r3
      case 'l' :
        flags |= FLAGS_LONG;
 8004f22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f24:	2280      	movs	r2, #128	@ 0x80
 8004f26:	0052      	lsls	r2, r2, #1
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
        format++;
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	61bb      	str	r3, [r7, #24]
        if (*format == 'l') {
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2b6c      	cmp	r3, #108	@ 0x6c
 8004f38:	d138      	bne.n	8004fac <_vsnprintf+0x238>
          flags |= FLAGS_LONG_LONG;
 8004f3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f3c:	2280      	movs	r2, #128	@ 0x80
 8004f3e:	0092      	lsls	r2, r2, #2
 8004f40:	4313      	orrs	r3, r2
 8004f42:	66fb      	str	r3, [r7, #108]	@ 0x6c
          format++;
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	3301      	adds	r3, #1
 8004f48:	61bb      	str	r3, [r7, #24]
        }
        break;
 8004f4a:	e02f      	b.n	8004fac <_vsnprintf+0x238>
      case 'h' :
        flags |= FLAGS_SHORT;
 8004f4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f4e:	2280      	movs	r2, #128	@ 0x80
 8004f50:	4313      	orrs	r3, r2
 8004f52:	66fb      	str	r3, [r7, #108]	@ 0x6c
        format++;
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	3301      	adds	r3, #1
 8004f58:	61bb      	str	r3, [r7, #24]
        if (*format == 'h') {
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	2b68      	cmp	r3, #104	@ 0x68
 8004f60:	d126      	bne.n	8004fb0 <_vsnprintf+0x23c>
          flags |= FLAGS_CHAR;
 8004f62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f64:	2240      	movs	r2, #64	@ 0x40
 8004f66:	4313      	orrs	r3, r2
 8004f68:	66fb      	str	r3, [r7, #108]	@ 0x6c
          format++;
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	61bb      	str	r3, [r7, #24]
        }
        break;
 8004f70:	e01e      	b.n	8004fb0 <_vsnprintf+0x23c>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004f72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f74:	2280      	movs	r2, #128	@ 0x80
 8004f76:	0052      	lsls	r2, r2, #1
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
        format++;
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	61bb      	str	r3, [r7, #24]
        break;
 8004f82:	e016      	b.n	8004fb2 <_vsnprintf+0x23e>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004f84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f86:	2280      	movs	r2, #128	@ 0x80
 8004f88:	0092      	lsls	r2, r2, #2
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
        format++;
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	3301      	adds	r3, #1
 8004f92:	61bb      	str	r3, [r7, #24]
        break;
 8004f94:	e00d      	b.n	8004fb2 <_vsnprintf+0x23e>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004f96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f98:	2280      	movs	r2, #128	@ 0x80
 8004f9a:	0052      	lsls	r2, r2, #1
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
        format++;
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	61bb      	str	r3, [r7, #24]
        break;
 8004fa6:	e004      	b.n	8004fb2 <_vsnprintf+0x23e>
      default :
        break;
 8004fa8:	46c0      	nop			@ (mov r8, r8)
 8004faa:	e002      	b.n	8004fb2 <_vsnprintf+0x23e>
        break;
 8004fac:	46c0      	nop			@ (mov r8, r8)
 8004fae:	e000      	b.n	8004fb2 <_vsnprintf+0x23e>
        break;
 8004fb0:	46c0      	nop			@ (mov r8, r8)
    }

    // evaluate specifier
    switch (*format) {
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	2b67      	cmp	r3, #103	@ 0x67
 8004fb8:	dc28      	bgt.n	800500c <_vsnprintf+0x298>
 8004fba:	2b25      	cmp	r3, #37	@ 0x25
 8004fbc:	da1d      	bge.n	8004ffa <_vsnprintf+0x286>
 8004fbe:	e32d      	b.n	800561c <_vsnprintf+0x8a8>
 8004fc0:	3b69      	subs	r3, #105	@ 0x69
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	409a      	lsls	r2, r3
 8004fc6:	0013      	movs	r3, r2
 8004fc8:	4a23      	ldr	r2, [pc, #140]	@ (8005058 <_vsnprintf+0x2e4>)
 8004fca:	401a      	ands	r2, r3
 8004fcc:	1e51      	subs	r1, r2, #1
 8004fce:	418a      	sbcs	r2, r1
 8004fd0:	b2d2      	uxtb	r2, r2
 8004fd2:	2a00      	cmp	r2, #0
 8004fd4:	d120      	bne.n	8005018 <_vsnprintf+0x2a4>
 8004fd6:	2280      	movs	r2, #128	@ 0x80
 8004fd8:	401a      	ands	r2, r3
 8004fda:	1e51      	subs	r1, r2, #1
 8004fdc:	418a      	sbcs	r2, r1
 8004fde:	b2d2      	uxtb	r2, r2
 8004fe0:	2a00      	cmp	r2, #0
 8004fe2:	d000      	beq.n	8004fe6 <_vsnprintf+0x272>
 8004fe4:	e2b5      	b.n	8005552 <_vsnprintf+0x7de>
 8004fe6:	2280      	movs	r2, #128	@ 0x80
 8004fe8:	00d2      	lsls	r2, r2, #3
 8004fea:	4013      	ands	r3, r2
 8004fec:	1e5a      	subs	r2, r3, #1
 8004fee:	4193      	sbcs	r3, r2
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d000      	beq.n	8004ff8 <_vsnprintf+0x284>
 8004ff6:	e246      	b.n	8005486 <_vsnprintf+0x712>
 8004ff8:	e310      	b.n	800561c <_vsnprintf+0x8a8>
 8004ffa:	3b25      	subs	r3, #37	@ 0x25
 8004ffc:	2b42      	cmp	r3, #66	@ 0x42
 8004ffe:	d900      	bls.n	8005002 <_vsnprintf+0x28e>
 8005000:	e30c      	b.n	800561c <_vsnprintf+0x8a8>
 8005002:	009a      	lsls	r2, r3, #2
 8005004:	4b15      	ldr	r3, [pc, #84]	@ (800505c <_vsnprintf+0x2e8>)
 8005006:	18d3      	adds	r3, r2, r3
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	469f      	mov	pc, r3
 800500c:	2b78      	cmp	r3, #120	@ 0x78
 800500e:	dd00      	ble.n	8005012 <_vsnprintf+0x29e>
 8005010:	e304      	b.n	800561c <_vsnprintf+0x8a8>
 8005012:	2b69      	cmp	r3, #105	@ 0x69
 8005014:	dad4      	bge.n	8004fc0 <_vsnprintf+0x24c>
 8005016:	e301      	b.n	800561c <_vsnprintf+0x8a8>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	2b78      	cmp	r3, #120	@ 0x78
 800501e:	d003      	beq.n	8005028 <_vsnprintf+0x2b4>
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	2b58      	cmp	r3, #88	@ 0x58
 8005026:	d102      	bne.n	800502e <_vsnprintf+0x2ba>
          base = 16U;
 8005028:	2310      	movs	r3, #16
 800502a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800502c:	e01e      	b.n	800506c <_vsnprintf+0x2f8>
        }
        else if (*format == 'o') {
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	2b6f      	cmp	r3, #111	@ 0x6f
 8005034:	d102      	bne.n	800503c <_vsnprintf+0x2c8>
          base =  8U;
 8005036:	2308      	movs	r3, #8
 8005038:	65bb      	str	r3, [r7, #88]	@ 0x58
 800503a:	e017      	b.n	800506c <_vsnprintf+0x2f8>
        }
        else if (*format == 'b') {
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	2b62      	cmp	r3, #98	@ 0x62
 8005042:	d10d      	bne.n	8005060 <_vsnprintf+0x2ec>
          base =  2U;
 8005044:	2302      	movs	r3, #2
 8005046:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005048:	e010      	b.n	800506c <_vsnprintf+0x2f8>
 800504a:	46c0      	nop			@ (mov r8, r8)
 800504c:	08003e89 	.word	0x08003e89
 8005050:	0800fe38 	.word	0x0800fe38
 8005054:	0800fe7c 	.word	0x0800fe7c
 8005058:	00009041 	.word	0x00009041
 800505c:	0800fec8 	.word	0x0800fec8
        }
        else {
          base = 10U;
 8005060:	230a      	movs	r3, #10
 8005062:	65bb      	str	r3, [r7, #88]	@ 0x58
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8005064:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005066:	2210      	movs	r2, #16
 8005068:	4393      	bics	r3, r2
 800506a:	66fb      	str	r3, [r7, #108]	@ 0x6c
        }
        // uppercase
        if (*format == 'X') {
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	2b58      	cmp	r3, #88	@ 0x58
 8005072:	d103      	bne.n	800507c <_vsnprintf+0x308>
          flags |= FLAGS_UPPERCASE;
 8005074:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005076:	2220      	movs	r2, #32
 8005078:	4313      	orrs	r3, r2
 800507a:	66fb      	str	r3, [r7, #108]	@ 0x6c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	2b69      	cmp	r3, #105	@ 0x69
 8005082:	d007      	beq.n	8005094 <_vsnprintf+0x320>
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	2b64      	cmp	r3, #100	@ 0x64
 800508a:	d003      	beq.n	8005094 <_vsnprintf+0x320>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800508c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800508e:	220c      	movs	r2, #12
 8005090:	4393      	bics	r3, r2
 8005092:	66fb      	str	r3, [r7, #108]	@ 0x6c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8005094:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005096:	2380      	movs	r3, #128	@ 0x80
 8005098:	00db      	lsls	r3, r3, #3
 800509a:	4013      	ands	r3, r2
 800509c:	d003      	beq.n	80050a6 <_vsnprintf+0x332>
          flags &= ~FLAGS_ZEROPAD;
 800509e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050a0:	2201      	movs	r2, #1
 80050a2:	4393      	bics	r3, r2
 80050a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	2b69      	cmp	r3, #105	@ 0x69
 80050ac:	d004      	beq.n	80050b8 <_vsnprintf+0x344>
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	2b64      	cmp	r3, #100	@ 0x64
 80050b4:	d000      	beq.n	80050b8 <_vsnprintf+0x344>
 80050b6:	e0af      	b.n	8005218 <_vsnprintf+0x4a4>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 80050b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80050ba:	2380      	movs	r3, #128	@ 0x80
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4013      	ands	r3, r2
 80050c0:	d03d      	beq.n	800513e <_vsnprintf+0x3ca>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 80050c2:	2388      	movs	r3, #136	@ 0x88
 80050c4:	18fb      	adds	r3, r7, r3
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	3307      	adds	r3, #7
 80050ca:	2207      	movs	r2, #7
 80050cc:	4393      	bics	r3, r2
 80050ce:	001a      	movs	r2, r3
 80050d0:	3208      	adds	r2, #8
 80050d2:	2188      	movs	r1, #136	@ 0x88
 80050d4:	1879      	adds	r1, r7, r1
 80050d6:	600a      	str	r2, [r1, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	62ba      	str	r2, [r7, #40]	@ 0x28
 80050de:	62fb      	str	r3, [r7, #44]	@ 0x2c
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80050e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	da05      	bge.n	80050f4 <_vsnprintf+0x380>
 80050e8:	2000      	movs	r0, #0
 80050ea:	2100      	movs	r1, #0
 80050ec:	1a80      	subs	r0, r0, r2
 80050ee:	4199      	sbcs	r1, r3
 80050f0:	0002      	movs	r2, r0
 80050f2:	000b      	movs	r3, r1
 80050f4:	0010      	movs	r0, r2
 80050f6:	0019      	movs	r1, r3
 80050f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050fa:	0fdb      	lsrs	r3, r3, #31
 80050fc:	b2da      	uxtb	r2, r3
 80050fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005100:	613b      	str	r3, [r7, #16]
 8005102:	2300      	movs	r3, #0
 8005104:	617b      	str	r3, [r7, #20]
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	469c      	mov	ip, r3
 800510a:	6dfe      	ldr	r6, [r7, #92]	@ 0x5c
 800510c:	6a3d      	ldr	r5, [r7, #32]
 800510e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005110:	4698      	mov	r8, r3
 8005112:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005114:	9308      	str	r3, [sp, #32]
 8005116:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005118:	9307      	str	r3, [sp, #28]
 800511a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800511c:	9306      	str	r3, [sp, #24]
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	697c      	ldr	r4, [r7, #20]
 8005122:	9304      	str	r3, [sp, #16]
 8005124:	9405      	str	r4, [sp, #20]
 8005126:	9202      	str	r2, [sp, #8]
 8005128:	9000      	str	r0, [sp, #0]
 800512a:	9101      	str	r1, [sp, #4]
 800512c:	4663      	mov	r3, ip
 800512e:	0032      	movs	r2, r6
 8005130:	0029      	movs	r1, r5
 8005132:	4640      	mov	r0, r8
 8005134:	f7ff f8b1 	bl	800429a <_ntoa_long_long>
 8005138:	0003      	movs	r3, r0
 800513a:	65fb      	str	r3, [r7, #92]	@ 0x5c
          if (flags & FLAGS_LONG_LONG) {
 800513c:	e0fa      	b.n	8005334 <_vsnprintf+0x5c0>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800513e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005140:	2380      	movs	r3, #128	@ 0x80
 8005142:	005b      	lsls	r3, r3, #1
 8005144:	4013      	ands	r3, r2
 8005146:	d025      	beq.n	8005194 <_vsnprintf+0x420>
            const long value = va_arg(va, long);
 8005148:	2388      	movs	r3, #136	@ 0x88
 800514a:	18fb      	adds	r3, r7, r3
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	1d1a      	adds	r2, r3, #4
 8005150:	2188      	movs	r1, #136	@ 0x88
 8005152:	1879      	adds	r1, r7, r1
 8005154:	600a      	str	r2, [r1, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	637b      	str	r3, [r7, #52]	@ 0x34
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800515a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800515c:	17da      	asrs	r2, r3, #31
 800515e:	189b      	adds	r3, r3, r2
 8005160:	4053      	eors	r3, r2
 8005162:	001e      	movs	r6, r3
 8005164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005166:	0fdb      	lsrs	r3, r3, #31
 8005168:	b2da      	uxtb	r2, r3
 800516a:	69fd      	ldr	r5, [r7, #28]
 800516c:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 800516e:	6a39      	ldr	r1, [r7, #32]
 8005170:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005172:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005174:	9305      	str	r3, [sp, #20]
 8005176:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005178:	9304      	str	r3, [sp, #16]
 800517a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800517c:	9303      	str	r3, [sp, #12]
 800517e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005180:	9302      	str	r3, [sp, #8]
 8005182:	9201      	str	r2, [sp, #4]
 8005184:	9600      	str	r6, [sp, #0]
 8005186:	002b      	movs	r3, r5
 8005188:	0022      	movs	r2, r4
 800518a:	f7ff f81d 	bl	80041c8 <_ntoa_long>
 800518e:	0003      	movs	r3, r0
 8005190:	65fb      	str	r3, [r7, #92]	@ 0x5c
          if (flags & FLAGS_LONG_LONG) {
 8005192:	e0cf      	b.n	8005334 <_vsnprintf+0x5c0>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8005194:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005196:	2240      	movs	r2, #64	@ 0x40
 8005198:	4013      	ands	r3, r2
 800519a:	d009      	beq.n	80051b0 <_vsnprintf+0x43c>
 800519c:	2388      	movs	r3, #136	@ 0x88
 800519e:	18fb      	adds	r3, r7, r3
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	1d1a      	adds	r2, r3, #4
 80051a4:	2188      	movs	r1, #136	@ 0x88
 80051a6:	1879      	adds	r1, r7, r1
 80051a8:	600a      	str	r2, [r1, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	e015      	b.n	80051dc <_vsnprintf+0x468>
 80051b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051b2:	2280      	movs	r2, #128	@ 0x80
 80051b4:	4013      	ands	r3, r2
 80051b6:	d009      	beq.n	80051cc <_vsnprintf+0x458>
 80051b8:	2388      	movs	r3, #136	@ 0x88
 80051ba:	18fb      	adds	r3, r7, r3
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	1d1a      	adds	r2, r3, #4
 80051c0:	2188      	movs	r1, #136	@ 0x88
 80051c2:	1879      	adds	r1, r7, r1
 80051c4:	600a      	str	r2, [r1, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	b21b      	sxth	r3, r3
 80051ca:	e007      	b.n	80051dc <_vsnprintf+0x468>
 80051cc:	2388      	movs	r3, #136	@ 0x88
 80051ce:	18fb      	adds	r3, r7, r3
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	1d1a      	adds	r2, r3, #4
 80051d4:	2188      	movs	r1, #136	@ 0x88
 80051d6:	1879      	adds	r1, r7, r1
 80051d8:	600a      	str	r2, [r1, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	63bb      	str	r3, [r7, #56]	@ 0x38
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80051de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051e0:	17da      	asrs	r2, r3, #31
 80051e2:	189b      	adds	r3, r3, r2
 80051e4:	4053      	eors	r3, r2
 80051e6:	001e      	movs	r6, r3
 80051e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ea:	0fdb      	lsrs	r3, r3, #31
 80051ec:	b2da      	uxtb	r2, r3
 80051ee:	69fd      	ldr	r5, [r7, #28]
 80051f0:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 80051f2:	6a39      	ldr	r1, [r7, #32]
 80051f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80051f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051f8:	9305      	str	r3, [sp, #20]
 80051fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051fc:	9304      	str	r3, [sp, #16]
 80051fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005200:	9303      	str	r3, [sp, #12]
 8005202:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005204:	9302      	str	r3, [sp, #8]
 8005206:	9201      	str	r2, [sp, #4]
 8005208:	9600      	str	r6, [sp, #0]
 800520a:	002b      	movs	r3, r5
 800520c:	0022      	movs	r2, r4
 800520e:	f7fe ffdb 	bl	80041c8 <_ntoa_long>
 8005212:	0003      	movs	r3, r0
 8005214:	65fb      	str	r3, [r7, #92]	@ 0x5c
          if (flags & FLAGS_LONG_LONG) {
 8005216:	e08d      	b.n	8005334 <_vsnprintf+0x5c0>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8005218:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800521a:	2380      	movs	r3, #128	@ 0x80
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4013      	ands	r3, r2
 8005220:	d02b      	beq.n	800527a <_vsnprintf+0x506>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8005222:	2388      	movs	r3, #136	@ 0x88
 8005224:	18fb      	adds	r3, r7, r3
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	3307      	adds	r3, #7
 800522a:	2207      	movs	r2, #7
 800522c:	4393      	bics	r3, r2
 800522e:	001a      	movs	r2, r3
 8005230:	3208      	adds	r2, #8
 8005232:	2188      	movs	r1, #136	@ 0x88
 8005234:	1879      	adds	r1, r7, r1
 8005236:	600a      	str	r2, [r1, #0]
 8005238:	6818      	ldr	r0, [r3, #0]
 800523a:	6859      	ldr	r1, [r3, #4]
 800523c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800523e:	60bb      	str	r3, [r7, #8]
 8005240:	2300      	movs	r3, #0
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	69fe      	ldr	r6, [r7, #28]
 8005246:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005248:	6a3d      	ldr	r5, [r7, #32]
 800524a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524c:	469c      	mov	ip, r3
 800524e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005250:	9308      	str	r3, [sp, #32]
 8005252:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005254:	9307      	str	r3, [sp, #28]
 8005256:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005258:	9306      	str	r3, [sp, #24]
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	68fc      	ldr	r4, [r7, #12]
 800525e:	9304      	str	r3, [sp, #16]
 8005260:	9405      	str	r4, [sp, #20]
 8005262:	2300      	movs	r3, #0
 8005264:	9302      	str	r3, [sp, #8]
 8005266:	9000      	str	r0, [sp, #0]
 8005268:	9101      	str	r1, [sp, #4]
 800526a:	0033      	movs	r3, r6
 800526c:	0029      	movs	r1, r5
 800526e:	4660      	mov	r0, ip
 8005270:	f7ff f813 	bl	800429a <_ntoa_long_long>
 8005274:	0003      	movs	r3, r0
 8005276:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005278:	e05c      	b.n	8005334 <_vsnprintf+0x5c0>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800527a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800527c:	2380      	movs	r3, #128	@ 0x80
 800527e:	005b      	lsls	r3, r3, #1
 8005280:	4013      	ands	r3, r2
 8005282:	d01d      	beq.n	80052c0 <_vsnprintf+0x54c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8005284:	2388      	movs	r3, #136	@ 0x88
 8005286:	18fb      	adds	r3, r7, r3
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	1d1a      	adds	r2, r3, #4
 800528c:	2188      	movs	r1, #136	@ 0x88
 800528e:	1879      	adds	r1, r7, r1
 8005290:	600a      	str	r2, [r1, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	69fd      	ldr	r5, [r7, #28]
 8005296:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 8005298:	6a39      	ldr	r1, [r7, #32]
 800529a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800529c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800529e:	9205      	str	r2, [sp, #20]
 80052a0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80052a2:	9204      	str	r2, [sp, #16]
 80052a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80052a6:	9203      	str	r2, [sp, #12]
 80052a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80052aa:	9202      	str	r2, [sp, #8]
 80052ac:	2200      	movs	r2, #0
 80052ae:	9201      	str	r2, [sp, #4]
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	002b      	movs	r3, r5
 80052b4:	0022      	movs	r2, r4
 80052b6:	f7fe ff87 	bl	80041c8 <_ntoa_long>
 80052ba:	0003      	movs	r3, r0
 80052bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052be:	e039      	b.n	8005334 <_vsnprintf+0x5c0>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80052c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052c2:	2240      	movs	r2, #64	@ 0x40
 80052c4:	4013      	ands	r3, r2
 80052c6:	d009      	beq.n	80052dc <_vsnprintf+0x568>
 80052c8:	2388      	movs	r3, #136	@ 0x88
 80052ca:	18fb      	adds	r3, r7, r3
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	1d1a      	adds	r2, r3, #4
 80052d0:	2188      	movs	r1, #136	@ 0x88
 80052d2:	1879      	adds	r1, r7, r1
 80052d4:	600a      	str	r2, [r1, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	e015      	b.n	8005308 <_vsnprintf+0x594>
 80052dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052de:	2280      	movs	r2, #128	@ 0x80
 80052e0:	4013      	ands	r3, r2
 80052e2:	d009      	beq.n	80052f8 <_vsnprintf+0x584>
 80052e4:	2388      	movs	r3, #136	@ 0x88
 80052e6:	18fb      	adds	r3, r7, r3
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	1d1a      	adds	r2, r3, #4
 80052ec:	2188      	movs	r1, #136	@ 0x88
 80052ee:	1879      	adds	r1, r7, r1
 80052f0:	600a      	str	r2, [r1, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	e007      	b.n	8005308 <_vsnprintf+0x594>
 80052f8:	2388      	movs	r3, #136	@ 0x88
 80052fa:	18fb      	adds	r3, r7, r3
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	1d1a      	adds	r2, r3, #4
 8005300:	2188      	movs	r1, #136	@ 0x88
 8005302:	1879      	adds	r1, r7, r1
 8005304:	600a      	str	r2, [r1, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	63fb      	str	r3, [r7, #60]	@ 0x3c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800530a:	69fc      	ldr	r4, [r7, #28]
 800530c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800530e:	6a39      	ldr	r1, [r7, #32]
 8005310:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005312:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005314:	9305      	str	r3, [sp, #20]
 8005316:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005318:	9304      	str	r3, [sp, #16]
 800531a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800531c:	9303      	str	r3, [sp, #12]
 800531e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005320:	9302      	str	r3, [sp, #8]
 8005322:	2300      	movs	r3, #0
 8005324:	9301      	str	r3, [sp, #4]
 8005326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	0023      	movs	r3, r4
 800532c:	f7fe ff4c 	bl	80041c8 <_ntoa_long>
 8005330:	0003      	movs	r3, r0
 8005332:	65fb      	str	r3, [r7, #92]	@ 0x5c
          }
        }
        format++;
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	3301      	adds	r3, #1
 8005338:	61bb      	str	r3, [r7, #24]
        break;
 800533a:	e17c      	b.n	8005636 <_vsnprintf+0x8c2>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2b46      	cmp	r3, #70	@ 0x46
 8005342:	d103      	bne.n	800534c <_vsnprintf+0x5d8>
 8005344:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005346:	2220      	movs	r2, #32
 8005348:	4313      	orrs	r3, r2
 800534a:	66fb      	str	r3, [r7, #108]	@ 0x6c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800534c:	2388      	movs	r3, #136	@ 0x88
 800534e:	18fb      	adds	r3, r7, r3
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	3307      	adds	r3, #7
 8005354:	2207      	movs	r2, #7
 8005356:	4393      	bics	r3, r2
 8005358:	001a      	movs	r2, r3
 800535a:	3208      	adds	r2, #8
 800535c:	2188      	movs	r1, #136	@ 0x88
 800535e:	1879      	adds	r1, r7, r1
 8005360:	600a      	str	r2, [r1, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	69fe      	ldr	r6, [r7, #28]
 8005368:	6dfd      	ldr	r5, [r7, #92]	@ 0x5c
 800536a:	6a3c      	ldr	r4, [r7, #32]
 800536c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800536e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8005370:	9104      	str	r1, [sp, #16]
 8005372:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005374:	9103      	str	r1, [sp, #12]
 8005376:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8005378:	9102      	str	r1, [sp, #8]
 800537a:	9200      	str	r2, [sp, #0]
 800537c:	9301      	str	r3, [sp, #4]
 800537e:	0033      	movs	r3, r6
 8005380:	002a      	movs	r2, r5
 8005382:	0021      	movs	r1, r4
 8005384:	f7fe fffc 	bl	8004380 <_ftoa>
 8005388:	0003      	movs	r3, r0
 800538a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	3301      	adds	r3, #1
 8005390:	61bb      	str	r3, [r7, #24]
        break;
 8005392:	e150      	b.n	8005636 <_vsnprintf+0x8c2>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	2b67      	cmp	r3, #103	@ 0x67
 800539a:	d003      	beq.n	80053a4 <_vsnprintf+0x630>
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	2b47      	cmp	r3, #71	@ 0x47
 80053a2:	d104      	bne.n	80053ae <_vsnprintf+0x63a>
 80053a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053a6:	2280      	movs	r2, #128	@ 0x80
 80053a8:	0112      	lsls	r2, r2, #4
 80053aa:	4313      	orrs	r3, r2
 80053ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	2b45      	cmp	r3, #69	@ 0x45
 80053b4:	d003      	beq.n	80053be <_vsnprintf+0x64a>
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	2b47      	cmp	r3, #71	@ 0x47
 80053bc:	d103      	bne.n	80053c6 <_vsnprintf+0x652>
 80053be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053c0:	2220      	movs	r2, #32
 80053c2:	4313      	orrs	r3, r2
 80053c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80053c6:	2388      	movs	r3, #136	@ 0x88
 80053c8:	18fb      	adds	r3, r7, r3
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3307      	adds	r3, #7
 80053ce:	2207      	movs	r2, #7
 80053d0:	4393      	bics	r3, r2
 80053d2:	001a      	movs	r2, r3
 80053d4:	3208      	adds	r2, #8
 80053d6:	2188      	movs	r1, #136	@ 0x88
 80053d8:	1879      	adds	r1, r7, r1
 80053da:	600a      	str	r2, [r1, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	69fe      	ldr	r6, [r7, #28]
 80053e2:	6dfd      	ldr	r5, [r7, #92]	@ 0x5c
 80053e4:	6a3c      	ldr	r4, [r7, #32]
 80053e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80053e8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80053ea:	9104      	str	r1, [sp, #16]
 80053ec:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80053ee:	9103      	str	r1, [sp, #12]
 80053f0:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80053f2:	9102      	str	r1, [sp, #8]
 80053f4:	9200      	str	r2, [sp, #0]
 80053f6:	9301      	str	r3, [sp, #4]
 80053f8:	0033      	movs	r3, r6
 80053fa:	002a      	movs	r2, r5
 80053fc:	0021      	movs	r1, r4
 80053fe:	f7ff f9fd 	bl	80047fc <_etoa>
 8005402:	0003      	movs	r3, r0
 8005404:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	3301      	adds	r3, #1
 800540a:	61bb      	str	r3, [r7, #24]
        break;
 800540c:	e113      	b.n	8005636 <_vsnprintf+0x8c2>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800540e:	2301      	movs	r3, #1
 8005410:	657b      	str	r3, [r7, #84]	@ 0x54
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8005412:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005414:	2202      	movs	r2, #2
 8005416:	4013      	ands	r3, r2
 8005418:	d10e      	bne.n	8005438 <_vsnprintf+0x6c4>
          while (l++ < width) {
 800541a:	e007      	b.n	800542c <_vsnprintf+0x6b8>
            out(' ', buffer, idx++, maxlen);
 800541c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800541e:	1c53      	adds	r3, r2, #1
 8005420:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	6a39      	ldr	r1, [r7, #32]
 8005426:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8005428:	2020      	movs	r0, #32
 800542a:	47a0      	blx	r4
          while (l++ < width) {
 800542c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800542e:	1c5a      	adds	r2, r3, #1
 8005430:	657a      	str	r2, [r7, #84]	@ 0x54
 8005432:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005434:	429a      	cmp	r2, r3
 8005436:	d8f1      	bhi.n	800541c <_vsnprintf+0x6a8>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8005438:	2388      	movs	r3, #136	@ 0x88
 800543a:	18fb      	adds	r3, r7, r3
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	1d1a      	adds	r2, r3, #4
 8005440:	2188      	movs	r1, #136	@ 0x88
 8005442:	1879      	adds	r1, r7, r1
 8005444:	600a      	str	r2, [r1, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	b2d8      	uxtb	r0, r3
 800544a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800544c:	1c53      	adds	r3, r2, #1
 800544e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	6a39      	ldr	r1, [r7, #32]
 8005454:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8005456:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8005458:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800545a:	2202      	movs	r2, #2
 800545c:	4013      	ands	r3, r2
 800545e:	d00e      	beq.n	800547e <_vsnprintf+0x70a>
          while (l++ < width) {
 8005460:	e007      	b.n	8005472 <_vsnprintf+0x6fe>
            out(' ', buffer, idx++, maxlen);
 8005462:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005464:	1c53      	adds	r3, r2, #1
 8005466:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	6a39      	ldr	r1, [r7, #32]
 800546c:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800546e:	2020      	movs	r0, #32
 8005470:	47a0      	blx	r4
          while (l++ < width) {
 8005472:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005474:	1c5a      	adds	r2, r3, #1
 8005476:	657a      	str	r2, [r7, #84]	@ 0x54
 8005478:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800547a:	429a      	cmp	r2, r3
 800547c:	d8f1      	bhi.n	8005462 <_vsnprintf+0x6ee>
          }
        }
        format++;
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	3301      	adds	r3, #1
 8005482:	61bb      	str	r3, [r7, #24]
        break;
 8005484:	e0d7      	b.n	8005636 <_vsnprintf+0x8c2>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8005486:	2388      	movs	r3, #136	@ 0x88
 8005488:	18fb      	adds	r3, r7, r3
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	1d1a      	adds	r2, r3, #4
 800548e:	2188      	movs	r1, #136	@ 0x88
 8005490:	1879      	adds	r1, r7, r1
 8005492:	600a      	str	r2, [r1, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	653b      	str	r3, [r7, #80]	@ 0x50
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8005498:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <_vsnprintf+0x72e>
 800549e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054a0:	e001      	b.n	80054a6 <_vsnprintf+0x732>
 80054a2:	2301      	movs	r3, #1
 80054a4:	425b      	negs	r3, r3
 80054a6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80054a8:	0019      	movs	r1, r3
 80054aa:	0010      	movs	r0, r2
 80054ac:	f7fe fd12 	bl	8003ed4 <_strnlen_s>
 80054b0:	0003      	movs	r3, r0
 80054b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 80054b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80054b6:	2380      	movs	r3, #128	@ 0x80
 80054b8:	00db      	lsls	r3, r3, #3
 80054ba:	4013      	ands	r3, r2
 80054bc:	d005      	beq.n	80054ca <_vsnprintf+0x756>
          l = (l < precision ? l : precision);
 80054be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d900      	bls.n	80054c8 <_vsnprintf+0x754>
 80054c6:	0013      	movs	r3, r2
 80054c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }
        if (!(flags & FLAGS_LEFT)) {
 80054ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054cc:	2202      	movs	r2, #2
 80054ce:	4013      	ands	r3, r2
 80054d0:	d11a      	bne.n	8005508 <_vsnprintf+0x794>
          while (l++ < width) {
 80054d2:	e007      	b.n	80054e4 <_vsnprintf+0x770>
            out(' ', buffer, idx++, maxlen);
 80054d4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80054d6:	1c53      	adds	r3, r2, #1
 80054d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	6a39      	ldr	r1, [r7, #32]
 80054de:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80054e0:	2020      	movs	r0, #32
 80054e2:	47a0      	blx	r4
          while (l++ < width) {
 80054e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80054ea:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d8f1      	bhi.n	80054d4 <_vsnprintf+0x760>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80054f0:	e00a      	b.n	8005508 <_vsnprintf+0x794>
          out(*(p++), buffer, idx++, maxlen);
 80054f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054f4:	1c5a      	adds	r2, r3, #1
 80054f6:	653a      	str	r2, [r7, #80]	@ 0x50
 80054f8:	7818      	ldrb	r0, [r3, #0]
 80054fa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80054fc:	1c53      	adds	r3, r2, #1
 80054fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	6a39      	ldr	r1, [r7, #32]
 8005504:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8005506:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8005508:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d009      	beq.n	8005524 <_vsnprintf+0x7b0>
 8005510:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005512:	2380      	movs	r3, #128	@ 0x80
 8005514:	00db      	lsls	r3, r3, #3
 8005516:	4013      	ands	r3, r2
 8005518:	d0eb      	beq.n	80054f2 <_vsnprintf+0x77e>
 800551a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800551c:	1e5a      	subs	r2, r3, #1
 800551e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1e6      	bne.n	80054f2 <_vsnprintf+0x77e>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8005524:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005526:	2202      	movs	r2, #2
 8005528:	4013      	ands	r3, r2
 800552a:	d00e      	beq.n	800554a <_vsnprintf+0x7d6>
          while (l++ < width) {
 800552c:	e007      	b.n	800553e <_vsnprintf+0x7ca>
            out(' ', buffer, idx++, maxlen);
 800552e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005530:	1c53      	adds	r3, r2, #1
 8005532:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	6a39      	ldr	r1, [r7, #32]
 8005538:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800553a:	2020      	movs	r0, #32
 800553c:	47a0      	blx	r4
          while (l++ < width) {
 800553e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005540:	1c5a      	adds	r2, r3, #1
 8005542:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005544:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005546:	429a      	cmp	r2, r3
 8005548:	d8f1      	bhi.n	800552e <_vsnprintf+0x7ba>
          }
        }
        format++;
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	3301      	adds	r3, #1
 800554e:	61bb      	str	r3, [r7, #24]
        break;
 8005550:	e071      	b.n	8005636 <_vsnprintf+0x8c2>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8005552:	2308      	movs	r3, #8
 8005554:	66bb      	str	r3, [r7, #104]	@ 0x68
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8005556:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005558:	2221      	movs	r2, #33	@ 0x21
 800555a:	4313      	orrs	r3, r2
 800555c:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 800555e:	212b      	movs	r1, #43	@ 0x2b
 8005560:	2318      	movs	r3, #24
 8005562:	18cb      	adds	r3, r1, r3
 8005564:	19db      	adds	r3, r3, r7
 8005566:	2200      	movs	r2, #0
 8005568:	701a      	strb	r2, [r3, #0]
        if (is_ll) {
 800556a:	2318      	movs	r3, #24
 800556c:	18cb      	adds	r3, r1, r3
 800556e:	19db      	adds	r3, r3, r7
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d025      	beq.n	80055c2 <_vsnprintf+0x84e>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8005576:	2388      	movs	r3, #136	@ 0x88
 8005578:	18fb      	adds	r3, r7, r3
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	1d1a      	adds	r2, r3, #4
 800557e:	2188      	movs	r1, #136	@ 0x88
 8005580:	1879      	adds	r1, r7, r1
 8005582:	600a      	str	r2, [r1, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	603b      	str	r3, [r7, #0]
 8005588:	2300      	movs	r3, #0
 800558a:	607b      	str	r3, [r7, #4]
 800558c:	69fd      	ldr	r5, [r7, #28]
 800558e:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 8005590:	6a39      	ldr	r1, [r7, #32]
 8005592:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005594:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005596:	9308      	str	r3, [sp, #32]
 8005598:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800559a:	9307      	str	r3, [sp, #28]
 800559c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800559e:	9306      	str	r3, [sp, #24]
 80055a0:	2210      	movs	r2, #16
 80055a2:	2300      	movs	r3, #0
 80055a4:	9204      	str	r2, [sp, #16]
 80055a6:	9305      	str	r3, [sp, #20]
 80055a8:	2300      	movs	r3, #0
 80055aa:	9302      	str	r3, [sp, #8]
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	9200      	str	r2, [sp, #0]
 80055b2:	9301      	str	r3, [sp, #4]
 80055b4:	002b      	movs	r3, r5
 80055b6:	0022      	movs	r2, r4
 80055b8:	f7fe fe6f 	bl	800429a <_ntoa_long_long>
 80055bc:	0003      	movs	r3, r0
 80055be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055c0:	e01c      	b.n	80055fc <_vsnprintf+0x888>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80055c2:	2388      	movs	r3, #136	@ 0x88
 80055c4:	18fb      	adds	r3, r7, r3
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	1d1a      	adds	r2, r3, #4
 80055ca:	2188      	movs	r1, #136	@ 0x88
 80055cc:	1879      	adds	r1, r7, r1
 80055ce:	600a      	str	r2, [r1, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	001d      	movs	r5, r3
 80055d4:	69fc      	ldr	r4, [r7, #28]
 80055d6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80055d8:	6a39      	ldr	r1, [r7, #32]
 80055da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80055dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055de:	9305      	str	r3, [sp, #20]
 80055e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055e2:	9304      	str	r3, [sp, #16]
 80055e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055e6:	9303      	str	r3, [sp, #12]
 80055e8:	2310      	movs	r3, #16
 80055ea:	9302      	str	r3, [sp, #8]
 80055ec:	2300      	movs	r3, #0
 80055ee:	9301      	str	r3, [sp, #4]
 80055f0:	9500      	str	r5, [sp, #0]
 80055f2:	0023      	movs	r3, r4
 80055f4:	f7fe fde8 	bl	80041c8 <_ntoa_long>
 80055f8:	0003      	movs	r3, r0
 80055fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	3301      	adds	r3, #1
 8005600:	61bb      	str	r3, [r7, #24]
        break;
 8005602:	e018      	b.n	8005636 <_vsnprintf+0x8c2>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8005604:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005606:	1c53      	adds	r3, r2, #1
 8005608:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	6a39      	ldr	r1, [r7, #32]
 800560e:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8005610:	2025      	movs	r0, #37	@ 0x25
 8005612:	47a0      	blx	r4
        format++;
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	3301      	adds	r3, #1
 8005618:	61bb      	str	r3, [r7, #24]
        break;
 800561a:	e00c      	b.n	8005636 <_vsnprintf+0x8c2>

      default :
        out(*format, buffer, idx++, maxlen);
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	7818      	ldrb	r0, [r3, #0]
 8005620:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005622:	1c53      	adds	r3, r2, #1
 8005624:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	6a39      	ldr	r1, [r7, #32]
 800562a:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800562c:	47a0      	blx	r4
        format++;
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	3301      	adds	r3, #1
 8005632:	61bb      	str	r3, [r7, #24]
        break;
 8005634:	46c0      	nop			@ (mov r8, r8)
  while (*format)
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <_vsnprintf+0x8ce>
 800563e:	f7ff fbad 	bl	8004d9c <_vsnprintf+0x28>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8005642:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	429a      	cmp	r2, r3
 8005648:	d302      	bcc.n	8005650 <_vsnprintf+0x8dc>
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	1e5a      	subs	r2, r3, #1
 800564e:	e000      	b.n	8005652 <_vsnprintf+0x8de>
 8005650:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	6a39      	ldr	r1, [r7, #32]
 8005656:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8005658:	2000      	movs	r0, #0
 800565a:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800565c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 800565e:	0018      	movs	r0, r3
 8005660:	46bd      	mov	sp, r7
 8005662:	b01c      	add	sp, #112	@ 0x70
 8005664:	bc80      	pop	{r7}
 8005666:	46b8      	mov	r8, r7
 8005668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800566a:	46c0      	nop			@ (mov r8, r8)

0800566c <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 800566c:	b40f      	push	{r0, r1, r2, r3}
 800566e:	b590      	push	{r4, r7, lr}
 8005670:	b087      	sub	sp, #28
 8005672:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8005674:	2324      	movs	r3, #36	@ 0x24
 8005676:	18fb      	adds	r3, r7, r3
 8005678:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 800567a:	6a3c      	ldr	r4, [r7, #32]
 800567c:	2301      	movs	r3, #1
 800567e:	425a      	negs	r2, r3
 8005680:	1d39      	adds	r1, r7, #4
 8005682:	4808      	ldr	r0, [pc, #32]	@ (80056a4 <printf_+0x38>)
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	0023      	movs	r3, r4
 800568a:	f7ff fb73 	bl	8004d74 <_vsnprintf>
 800568e:	0003      	movs	r3, r0
 8005690:	60fb      	str	r3, [r7, #12]
  va_end(va);
  return ret;
 8005692:	68fb      	ldr	r3, [r7, #12]
}
 8005694:	0018      	movs	r0, r3
 8005696:	46bd      	mov	sp, r7
 8005698:	b005      	add	sp, #20
 800569a:	bc90      	pop	{r4, r7}
 800569c:	bc08      	pop	{r3}
 800569e:	b004      	add	sp, #16
 80056a0:	4718      	bx	r3
 80056a2:	46c0      	nop			@ (mov r8, r8)
 80056a4:	08003ea5 	.word	0x08003ea5

080056a8 <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
 80056a8:	b40e      	push	{r1, r2, r3}
 80056aa:	b590      	push	{r4, r7, lr}
 80056ac:	b086      	sub	sp, #24
 80056ae:	af02      	add	r7, sp, #8
 80056b0:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 80056b2:	2320      	movs	r3, #32
 80056b4:	18fb      	adds	r3, r7, r3
 80056b6:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 80056b8:	69fc      	ldr	r4, [r7, #28]
 80056ba:	2301      	movs	r3, #1
 80056bc:	425a      	negs	r2, r3
 80056be:	6879      	ldr	r1, [r7, #4]
 80056c0:	4807      	ldr	r0, [pc, #28]	@ (80056e0 <sprintf_+0x38>)
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	0023      	movs	r3, r4
 80056c8:	f7ff fb54 	bl	8004d74 <_vsnprintf>
 80056cc:	0003      	movs	r3, r0
 80056ce:	60fb      	str	r3, [r7, #12]
  va_end(va);
  return ret;
 80056d0:	68fb      	ldr	r3, [r7, #12]
}
 80056d2:	0018      	movs	r0, r3
 80056d4:	46bd      	mov	sp, r7
 80056d6:	b004      	add	sp, #16
 80056d8:	bc90      	pop	{r4, r7}
 80056da:	bc08      	pop	{r3}
 80056dc:	b003      	add	sp, #12
 80056de:	4718      	bx	r3
 80056e0:	08003e59 	.word	0x08003e59

080056e4 <_putchar>:
  va_end(va);
  return ret;
}


void _putchar(char character) {
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	0002      	movs	r2, r0
 80056ec:	1dfb      	adds	r3, r7, #7
 80056ee:	701a      	strb	r2, [r3, #0]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	while( !( USART2->ISR & USART_ISR_TXE_TXFNF ) ) {};
 80056f0:	46c0      	nop			@ (mov r8, r8)
 80056f2:	4b06      	ldr	r3, [pc, #24]	@ (800570c <_putchar+0x28>)
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	2280      	movs	r2, #128	@ 0x80
 80056f8:	4013      	ands	r3, r2
 80056fa:	d0fa      	beq.n	80056f2 <_putchar+0xe>
      USART2->TDR = character;
 80056fc:	4b03      	ldr	r3, [pc, #12]	@ (800570c <_putchar+0x28>)
 80056fe:	1dfa      	adds	r2, r7, #7
 8005700:	7812      	ldrb	r2, [r2, #0]
 8005702:	629a      	str	r2, [r3, #40]	@ 0x28
		
}
 8005704:	46c0      	nop			@ (mov r8, r8)
 8005706:	46bd      	mov	sp, r7
 8005708:	b002      	add	sp, #8
 800570a:	bd80      	pop	{r7, pc}
 800570c:	40004400 	.word	0x40004400

08005710 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8005714:	4b19      	ldr	r3, [pc, #100]	@ (800577c <MX_RTC_Init+0x6c>)
 8005716:	4a1a      	ldr	r2, [pc, #104]	@ (8005780 <MX_RTC_Init+0x70>)
 8005718:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800571a:	4b18      	ldr	r3, [pc, #96]	@ (800577c <MX_RTC_Init+0x6c>)
 800571c:	2200      	movs	r2, #0
 800571e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8005720:	4b16      	ldr	r3, [pc, #88]	@ (800577c <MX_RTC_Init+0x6c>)
 8005722:	227f      	movs	r2, #127	@ 0x7f
 8005724:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8005726:	4b15      	ldr	r3, [pc, #84]	@ (800577c <MX_RTC_Init+0x6c>)
 8005728:	22ff      	movs	r2, #255	@ 0xff
 800572a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800572c:	4b13      	ldr	r3, [pc, #76]	@ (800577c <MX_RTC_Init+0x6c>)
 800572e:	2200      	movs	r2, #0
 8005730:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8005732:	4b12      	ldr	r3, [pc, #72]	@ (800577c <MX_RTC_Init+0x6c>)
 8005734:	2200      	movs	r2, #0
 8005736:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005738:	4b10      	ldr	r3, [pc, #64]	@ (800577c <MX_RTC_Init+0x6c>)
 800573a:	2200      	movs	r2, #0
 800573c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800573e:	4b0f      	ldr	r3, [pc, #60]	@ (800577c <MX_RTC_Init+0x6c>)
 8005740:	2280      	movs	r2, #128	@ 0x80
 8005742:	05d2      	lsls	r2, r2, #23
 8005744:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8005746:	4b0d      	ldr	r3, [pc, #52]	@ (800577c <MX_RTC_Init+0x6c>)
 8005748:	2200      	movs	r2, #0
 800574a:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800574c:	4b0b      	ldr	r3, [pc, #44]	@ (800577c <MX_RTC_Init+0x6c>)
 800574e:	2200      	movs	r2, #0
 8005750:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005752:	4b0a      	ldr	r3, [pc, #40]	@ (800577c <MX_RTC_Init+0x6c>)
 8005754:	0018      	movs	r0, r3
 8005756:	f003 f9e9 	bl	8008b2c <HAL_RTC_Init>
 800575a:	1e03      	subs	r3, r0, #0
 800575c:	d001      	beq.n	8005762 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800575e:	f7fe fb75 	bl	8003e4c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 60, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8005762:	4b06      	ldr	r3, [pc, #24]	@ (800577c <MX_RTC_Init+0x6c>)
 8005764:	2204      	movs	r2, #4
 8005766:	213c      	movs	r1, #60	@ 0x3c
 8005768:	0018      	movs	r0, r3
 800576a:	f003 fad7 	bl	8008d1c <HAL_RTCEx_SetWakeUpTimer>
 800576e:	1e03      	subs	r3, r0, #0
 8005770:	d001      	beq.n	8005776 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8005772:	f7fe fb6b 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8005776:	46c0      	nop			@ (mov r8, r8)
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	20000474 	.word	0x20000474
 8005780:	40002800 	.word	0x40002800

08005784 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8005784:	b590      	push	{r4, r7, lr}
 8005786:	b095      	sub	sp, #84	@ 0x54
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800578c:	240c      	movs	r4, #12
 800578e:	193b      	adds	r3, r7, r4
 8005790:	0018      	movs	r0, r3
 8005792:	2344      	movs	r3, #68	@ 0x44
 8005794:	001a      	movs	r2, r3
 8005796:	2100      	movs	r1, #0
 8005798:	f008 f9c2 	bl	800db20 <memset>
  if(rtcHandle->Instance==RTC)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a16      	ldr	r2, [pc, #88]	@ (80057fc <HAL_RTC_MspInit+0x78>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d126      	bne.n	80057f4 <HAL_RTC_MspInit+0x70>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80057a6:	193b      	adds	r3, r7, r4
 80057a8:	2280      	movs	r2, #128	@ 0x80
 80057aa:	0212      	lsls	r2, r2, #8
 80057ac:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80057ae:	193b      	adds	r3, r7, r4
 80057b0:	2280      	movs	r2, #128	@ 0x80
 80057b2:	0092      	lsls	r2, r2, #2
 80057b4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80057b6:	193b      	adds	r3, r7, r4
 80057b8:	0018      	movs	r0, r3
 80057ba:	f002 f987 	bl	8007acc <HAL_RCCEx_PeriphCLKConfig>
 80057be:	1e03      	subs	r3, r0, #0
 80057c0:	d001      	beq.n	80057c6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80057c2:	f7fe fb43 	bl	8003e4c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80057c6:	4a0e      	ldr	r2, [pc, #56]	@ (8005800 <HAL_RTC_MspInit+0x7c>)
 80057c8:	2390      	movs	r3, #144	@ 0x90
 80057ca:	58d3      	ldr	r3, [r2, r3]
 80057cc:	490c      	ldr	r1, [pc, #48]	@ (8005800 <HAL_RTC_MspInit+0x7c>)
 80057ce:	2280      	movs	r2, #128	@ 0x80
 80057d0:	0212      	lsls	r2, r2, #8
 80057d2:	4313      	orrs	r3, r2
 80057d4:	2290      	movs	r2, #144	@ 0x90
 80057d6:	508b      	str	r3, [r1, r2]
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80057d8:	4b09      	ldr	r3, [pc, #36]	@ (8005800 <HAL_RTC_MspInit+0x7c>)
 80057da:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80057dc:	4b08      	ldr	r3, [pc, #32]	@ (8005800 <HAL_RTC_MspInit+0x7c>)
 80057de:	2180      	movs	r1, #128	@ 0x80
 80057e0:	00c9      	lsls	r1, r1, #3
 80057e2:	430a      	orrs	r2, r1
 80057e4:	659a      	str	r2, [r3, #88]	@ 0x58
 80057e6:	4b06      	ldr	r3, [pc, #24]	@ (8005800 <HAL_RTC_MspInit+0x7c>)
 80057e8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80057ea:	2380      	movs	r3, #128	@ 0x80
 80057ec:	00db      	lsls	r3, r3, #3
 80057ee:	4013      	ands	r3, r2
 80057f0:	60bb      	str	r3, [r7, #8]
 80057f2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80057f4:	46c0      	nop			@ (mov r8, r8)
 80057f6:	46bd      	mov	sp, r7
 80057f8:	b015      	add	sp, #84	@ 0x54
 80057fa:	bd90      	pop	{r4, r7, pc}
 80057fc:	40002800 	.word	0x40002800
 8005800:	40021000 	.word	0x40021000

08005804 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005808:	4b1b      	ldr	r3, [pc, #108]	@ (8005878 <MX_SPI1_Init+0x74>)
 800580a:	4a1c      	ldr	r2, [pc, #112]	@ (800587c <MX_SPI1_Init+0x78>)
 800580c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800580e:	4b1a      	ldr	r3, [pc, #104]	@ (8005878 <MX_SPI1_Init+0x74>)
 8005810:	2282      	movs	r2, #130	@ 0x82
 8005812:	0052      	lsls	r2, r2, #1
 8005814:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005816:	4b18      	ldr	r3, [pc, #96]	@ (8005878 <MX_SPI1_Init+0x74>)
 8005818:	2200      	movs	r2, #0
 800581a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800581c:	4b16      	ldr	r3, [pc, #88]	@ (8005878 <MX_SPI1_Init+0x74>)
 800581e:	22e0      	movs	r2, #224	@ 0xe0
 8005820:	00d2      	lsls	r2, r2, #3
 8005822:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005824:	4b14      	ldr	r3, [pc, #80]	@ (8005878 <MX_SPI1_Init+0x74>)
 8005826:	2200      	movs	r2, #0
 8005828:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800582a:	4b13      	ldr	r3, [pc, #76]	@ (8005878 <MX_SPI1_Init+0x74>)
 800582c:	2200      	movs	r2, #0
 800582e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005830:	4b11      	ldr	r3, [pc, #68]	@ (8005878 <MX_SPI1_Init+0x74>)
 8005832:	2280      	movs	r2, #128	@ 0x80
 8005834:	0092      	lsls	r2, r2, #2
 8005836:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8005838:	4b0f      	ldr	r3, [pc, #60]	@ (8005878 <MX_SPI1_Init+0x74>)
 800583a:	2210      	movs	r2, #16
 800583c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800583e:	4b0e      	ldr	r3, [pc, #56]	@ (8005878 <MX_SPI1_Init+0x74>)
 8005840:	2200      	movs	r2, #0
 8005842:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005844:	4b0c      	ldr	r3, [pc, #48]	@ (8005878 <MX_SPI1_Init+0x74>)
 8005846:	2200      	movs	r2, #0
 8005848:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800584a:	4b0b      	ldr	r3, [pc, #44]	@ (8005878 <MX_SPI1_Init+0x74>)
 800584c:	2200      	movs	r2, #0
 800584e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005850:	4b09      	ldr	r3, [pc, #36]	@ (8005878 <MX_SPI1_Init+0x74>)
 8005852:	2207      	movs	r2, #7
 8005854:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005856:	4b08      	ldr	r3, [pc, #32]	@ (8005878 <MX_SPI1_Init+0x74>)
 8005858:	2200      	movs	r2, #0
 800585a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800585c:	4b06      	ldr	r3, [pc, #24]	@ (8005878 <MX_SPI1_Init+0x74>)
 800585e:	2208      	movs	r2, #8
 8005860:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005862:	4b05      	ldr	r3, [pc, #20]	@ (8005878 <MX_SPI1_Init+0x74>)
 8005864:	0018      	movs	r0, r3
 8005866:	f003 fadb 	bl	8008e20 <HAL_SPI_Init>
 800586a:	1e03      	subs	r3, r0, #0
 800586c:	d001      	beq.n	8005872 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800586e:	f7fe faed 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005872:	46c0      	nop			@ (mov r8, r8)
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	200004a4 	.word	0x200004a4
 800587c:	40013000 	.word	0x40013000

08005880 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005880:	b590      	push	{r4, r7, lr}
 8005882:	b08b      	sub	sp, #44	@ 0x2c
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005888:	2414      	movs	r4, #20
 800588a:	193b      	adds	r3, r7, r4
 800588c:	0018      	movs	r0, r3
 800588e:	2314      	movs	r3, #20
 8005890:	001a      	movs	r2, r3
 8005892:	2100      	movs	r1, #0
 8005894:	f008 f944 	bl	800db20 <memset>
  if(spiHandle->Instance==SPI1)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a1b      	ldr	r2, [pc, #108]	@ (800590c <HAL_SPI_MspInit+0x8c>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d130      	bne.n	8005904 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80058a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005910 <HAL_SPI_MspInit+0x90>)
 80058a4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80058a6:	4b1a      	ldr	r3, [pc, #104]	@ (8005910 <HAL_SPI_MspInit+0x90>)
 80058a8:	2180      	movs	r1, #128	@ 0x80
 80058aa:	0149      	lsls	r1, r1, #5
 80058ac:	430a      	orrs	r2, r1
 80058ae:	661a      	str	r2, [r3, #96]	@ 0x60
 80058b0:	4b17      	ldr	r3, [pc, #92]	@ (8005910 <HAL_SPI_MspInit+0x90>)
 80058b2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80058b4:	2380      	movs	r3, #128	@ 0x80
 80058b6:	015b      	lsls	r3, r3, #5
 80058b8:	4013      	ands	r3, r2
 80058ba:	613b      	str	r3, [r7, #16]
 80058bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058be:	4b14      	ldr	r3, [pc, #80]	@ (8005910 <HAL_SPI_MspInit+0x90>)
 80058c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80058c2:	4b13      	ldr	r3, [pc, #76]	@ (8005910 <HAL_SPI_MspInit+0x90>)
 80058c4:	2101      	movs	r1, #1
 80058c6:	430a      	orrs	r2, r1
 80058c8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80058ca:	4b11      	ldr	r3, [pc, #68]	@ (8005910 <HAL_SPI_MspInit+0x90>)
 80058cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ce:	2201      	movs	r2, #1
 80058d0:	4013      	ands	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]
 80058d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80058d6:	0021      	movs	r1, r4
 80058d8:	187b      	adds	r3, r7, r1
 80058da:	22e0      	movs	r2, #224	@ 0xe0
 80058dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058de:	187b      	adds	r3, r7, r1
 80058e0:	2202      	movs	r2, #2
 80058e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058e4:	187b      	adds	r3, r7, r1
 80058e6:	2200      	movs	r2, #0
 80058e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058ea:	187b      	adds	r3, r7, r1
 80058ec:	2200      	movs	r2, #0
 80058ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80058f0:	187b      	adds	r3, r7, r1
 80058f2:	2205      	movs	r2, #5
 80058f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058f6:	187a      	adds	r2, r7, r1
 80058f8:	23a0      	movs	r3, #160	@ 0xa0
 80058fa:	05db      	lsls	r3, r3, #23
 80058fc:	0011      	movs	r1, r2
 80058fe:	0018      	movs	r0, r3
 8005900:	f000 ff68 	bl	80067d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005904:	46c0      	nop			@ (mov r8, r8)
 8005906:	46bd      	mov	sp, r7
 8005908:	b00b      	add	sp, #44	@ 0x2c
 800590a:	bd90      	pop	{r4, r7, pc}
 800590c:	40013000 	.word	0x40013000
 8005910:	40021000 	.word	0x40021000

08005914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800591a:	4b0f      	ldr	r3, [pc, #60]	@ (8005958 <HAL_MspInit+0x44>)
 800591c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800591e:	4b0e      	ldr	r3, [pc, #56]	@ (8005958 <HAL_MspInit+0x44>)
 8005920:	2180      	movs	r1, #128	@ 0x80
 8005922:	0549      	lsls	r1, r1, #21
 8005924:	430a      	orrs	r2, r1
 8005926:	659a      	str	r2, [r3, #88]	@ 0x58
 8005928:	4b0b      	ldr	r3, [pc, #44]	@ (8005958 <HAL_MspInit+0x44>)
 800592a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800592c:	2380      	movs	r3, #128	@ 0x80
 800592e:	055b      	lsls	r3, r3, #21
 8005930:	4013      	ands	r3, r2
 8005932:	607b      	str	r3, [r7, #4]
 8005934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005936:	4b08      	ldr	r3, [pc, #32]	@ (8005958 <HAL_MspInit+0x44>)
 8005938:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800593a:	4b07      	ldr	r3, [pc, #28]	@ (8005958 <HAL_MspInit+0x44>)
 800593c:	2101      	movs	r1, #1
 800593e:	430a      	orrs	r2, r1
 8005940:	661a      	str	r2, [r3, #96]	@ 0x60
 8005942:	4b05      	ldr	r3, [pc, #20]	@ (8005958 <HAL_MspInit+0x44>)
 8005944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005946:	2201      	movs	r2, #1
 8005948:	4013      	ands	r3, r2
 800594a:	603b      	str	r3, [r7, #0]
 800594c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800594e:	46c0      	nop			@ (mov r8, r8)
 8005950:	46bd      	mov	sp, r7
 8005952:	b002      	add	sp, #8
 8005954:	bd80      	pop	{r7, pc}
 8005956:	46c0      	nop			@ (mov r8, r8)
 8005958:	40021000 	.word	0x40021000

0800595c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005960:	46c0      	nop			@ (mov r8, r8)
 8005962:	e7fd      	b.n	8005960 <NMI_Handler+0x4>

08005964 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005968:	46c0      	nop			@ (mov r8, r8)
 800596a:	e7fd      	b.n	8005968 <HardFault_Handler+0x4>

0800596c <SVC_Handler>:

/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005970:	46c0      	nop			@ (mov r8, r8)
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800597a:	46c0      	nop			@ (mov r8, r8)
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005984:	f000 fa24 	bl	8005dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005988:	46c0      	nop			@ (mov r8, r8)
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	af00      	add	r7, sp, #0
  return 1;
 8005992:	2301      	movs	r3, #1
}
 8005994:	0018      	movs	r0, r3
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <_kill>:

int _kill(int pid, int sig)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b082      	sub	sp, #8
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80059a4:	f008 f93e 	bl	800dc24 <__errno>
 80059a8:	0003      	movs	r3, r0
 80059aa:	2216      	movs	r2, #22
 80059ac:	601a      	str	r2, [r3, #0]
  return -1;
 80059ae:	2301      	movs	r3, #1
 80059b0:	425b      	negs	r3, r3
}
 80059b2:	0018      	movs	r0, r3
 80059b4:	46bd      	mov	sp, r7
 80059b6:	b002      	add	sp, #8
 80059b8:	bd80      	pop	{r7, pc}

080059ba <_exit>:

void _exit (int status)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b082      	sub	sp, #8
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80059c2:	2301      	movs	r3, #1
 80059c4:	425a      	negs	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	0011      	movs	r1, r2
 80059ca:	0018      	movs	r0, r3
 80059cc:	f7ff ffe5 	bl	800599a <_kill>
  while (1) {}    /* Make sure we hang here */
 80059d0:	46c0      	nop			@ (mov r8, r8)
 80059d2:	e7fd      	b.n	80059d0 <_exit+0x16>

080059d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059e0:	2300      	movs	r3, #0
 80059e2:	617b      	str	r3, [r7, #20]
 80059e4:	e00a      	b.n	80059fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80059e6:	e000      	b.n	80059ea <_read+0x16>
 80059e8:	bf00      	nop
 80059ea:	0001      	movs	r1, r0
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	1c5a      	adds	r2, r3, #1
 80059f0:	60ba      	str	r2, [r7, #8]
 80059f2:	b2ca      	uxtb	r2, r1
 80059f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	3301      	adds	r3, #1
 80059fa:	617b      	str	r3, [r7, #20]
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	dbf0      	blt.n	80059e6 <_read+0x12>
  }

  return len;
 8005a04:	687b      	ldr	r3, [r7, #4]
}
 8005a06:	0018      	movs	r0, r3
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	b006      	add	sp, #24
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b086      	sub	sp, #24
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	60f8      	str	r0, [r7, #12]
 8005a16:	60b9      	str	r1, [r7, #8]
 8005a18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	617b      	str	r3, [r7, #20]
 8005a1e:	e009      	b.n	8005a34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	1c5a      	adds	r2, r3, #1
 8005a24:	60ba      	str	r2, [r7, #8]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	0018      	movs	r0, r3
 8005a2a:	e000      	b.n	8005a2e <_write+0x20>
 8005a2c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	3301      	adds	r3, #1
 8005a32:	617b      	str	r3, [r7, #20]
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	dbf1      	blt.n	8005a20 <_write+0x12>
  }
  return len;
 8005a3c:	687b      	ldr	r3, [r7, #4]
}
 8005a3e:	0018      	movs	r0, r3
 8005a40:	46bd      	mov	sp, r7
 8005a42:	b006      	add	sp, #24
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <_close>:

int _close(int file)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b082      	sub	sp, #8
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	425b      	negs	r3, r3
}
 8005a52:	0018      	movs	r0, r3
 8005a54:	46bd      	mov	sp, r7
 8005a56:	b002      	add	sp, #8
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b082      	sub	sp, #8
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
 8005a62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	2280      	movs	r2, #128	@ 0x80
 8005a68:	0192      	lsls	r2, r2, #6
 8005a6a:	605a      	str	r2, [r3, #4]
  return 0;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	0018      	movs	r0, r3
 8005a70:	46bd      	mov	sp, r7
 8005a72:	b002      	add	sp, #8
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <_isatty>:

int _isatty(int file)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b082      	sub	sp, #8
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005a7e:	2301      	movs	r3, #1
}
 8005a80:	0018      	movs	r0, r3
 8005a82:	46bd      	mov	sp, r7
 8005a84:	b002      	add	sp, #8
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	0018      	movs	r0, r3
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	b004      	add	sp, #16
 8005a9c:	bd80      	pop	{r7, pc}
	...

08005aa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005aa8:	4a14      	ldr	r2, [pc, #80]	@ (8005afc <_sbrk+0x5c>)
 8005aaa:	4b15      	ldr	r3, [pc, #84]	@ (8005b00 <_sbrk+0x60>)
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005ab4:	4b13      	ldr	r3, [pc, #76]	@ (8005b04 <_sbrk+0x64>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d102      	bne.n	8005ac2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005abc:	4b11      	ldr	r3, [pc, #68]	@ (8005b04 <_sbrk+0x64>)
 8005abe:	4a12      	ldr	r2, [pc, #72]	@ (8005b08 <_sbrk+0x68>)
 8005ac0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005ac2:	4b10      	ldr	r3, [pc, #64]	@ (8005b04 <_sbrk+0x64>)
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	18d3      	adds	r3, r2, r3
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d207      	bcs.n	8005ae0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005ad0:	f008 f8a8 	bl	800dc24 <__errno>
 8005ad4:	0003      	movs	r3, r0
 8005ad6:	220c      	movs	r2, #12
 8005ad8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005ada:	2301      	movs	r3, #1
 8005adc:	425b      	negs	r3, r3
 8005ade:	e009      	b.n	8005af4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005ae0:	4b08      	ldr	r3, [pc, #32]	@ (8005b04 <_sbrk+0x64>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005ae6:	4b07      	ldr	r3, [pc, #28]	@ (8005b04 <_sbrk+0x64>)
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	18d2      	adds	r2, r2, r3
 8005aee:	4b05      	ldr	r3, [pc, #20]	@ (8005b04 <_sbrk+0x64>)
 8005af0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8005af2:	68fb      	ldr	r3, [r7, #12]
}
 8005af4:	0018      	movs	r0, r3
 8005af6:	46bd      	mov	sp, r7
 8005af8:	b006      	add	sp, #24
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	20008000 	.word	0x20008000
 8005b00:	00000400 	.word	0x00000400
 8005b04:	20000508 	.word	0x20000508
 8005b08:	20000748 	.word	0x20000748

08005b0c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005b10:	4b11      	ldr	r3, [pc, #68]	@ (8005b58 <SystemInit+0x4c>)
 8005b12:	2280      	movs	r2, #128	@ 0x80
 8005b14:	0512      	lsls	r2, r2, #20
 8005b16:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  if (((FLASH->SECR & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)           \
 8005b18:	4a10      	ldr	r2, [pc, #64]	@ (8005b5c <SystemInit+0x50>)
 8005b1a:	2380      	movs	r3, #128	@ 0x80
 8005b1c:	58d2      	ldr	r2, [r2, r3]
 8005b1e:	2380      	movs	r3, #128	@ 0x80
 8005b20:	025b      	lsls	r3, r3, #9
 8005b22:	401a      	ands	r2, r3
 8005b24:	2380      	movs	r3, #128	@ 0x80
 8005b26:	025b      	lsls	r3, r3, #9
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d112      	bne.n	8005b52 <SystemInit+0x46>
      && (((FLASH->OPTR & FLASH_OPTR_RDP) != 0xCCU)                            \
 8005b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b5c <SystemInit+0x50>)
 8005b2e:	6a1b      	ldr	r3, [r3, #32]
 8005b30:	22ff      	movs	r2, #255	@ 0xff
 8005b32:	4013      	ands	r3, r2
 8005b34:	2bcc      	cmp	r3, #204	@ 0xcc
 8005b36:	d00c      	beq.n	8005b52 <SystemInit+0x46>
          && ((FLASH->OPTR & FLASH_OPTR_RDP) != 0xAAU)))
 8005b38:	4b08      	ldr	r3, [pc, #32]	@ (8005b5c <SystemInit+0x50>)
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	22ff      	movs	r2, #255	@ 0xff
 8005b3e:	4013      	ands	r3, r2
 8005b40:	2baa      	cmp	r3, #170	@ 0xaa
 8005b42:	d006      	beq.n	8005b52 <SystemInit+0x46>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 8005b44:	4b05      	ldr	r3, [pc, #20]	@ (8005b5c <SystemInit+0x50>)
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	4b04      	ldr	r3, [pc, #16]	@ (8005b5c <SystemInit+0x50>)
 8005b4a:	2180      	movs	r1, #128	@ 0x80
 8005b4c:	02c9      	lsls	r1, r1, #11
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 8005b52:	46c0      	nop			@ (mov r8, r8)
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	e000ed00 	.word	0xe000ed00
 8005b5c:	40022000 	.word	0x40022000

08005b60 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005b64:	4b22      	ldr	r3, [pc, #136]	@ (8005bf0 <MX_USART2_UART_Init+0x90>)
 8005b66:	4a23      	ldr	r2, [pc, #140]	@ (8005bf4 <MX_USART2_UART_Init+0x94>)
 8005b68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8005b6a:	4b21      	ldr	r3, [pc, #132]	@ (8005bf0 <MX_USART2_UART_Init+0x90>)
 8005b6c:	4a22      	ldr	r2, [pc, #136]	@ (8005bf8 <MX_USART2_UART_Init+0x98>)
 8005b6e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005b70:	4b1f      	ldr	r3, [pc, #124]	@ (8005bf0 <MX_USART2_UART_Init+0x90>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005b76:	4b1e      	ldr	r3, [pc, #120]	@ (8005bf0 <MX_USART2_UART_Init+0x90>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8005bf0 <MX_USART2_UART_Init+0x90>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005b82:	4b1b      	ldr	r3, [pc, #108]	@ (8005bf0 <MX_USART2_UART_Init+0x90>)
 8005b84:	220c      	movs	r2, #12
 8005b86:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b88:	4b19      	ldr	r3, [pc, #100]	@ (8005bf0 <MX_USART2_UART_Init+0x90>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b8e:	4b18      	ldr	r3, [pc, #96]	@ (8005bf0 <MX_USART2_UART_Init+0x90>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005b94:	4b16      	ldr	r3, [pc, #88]	@ (8005bf0 <MX_USART2_UART_Init+0x90>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005b9a:	4b15      	ldr	r3, [pc, #84]	@ (8005bf0 <MX_USART2_UART_Init+0x90>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005ba0:	4b13      	ldr	r3, [pc, #76]	@ (8005bf0 <MX_USART2_UART_Init+0x90>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005ba6:	4b12      	ldr	r3, [pc, #72]	@ (8005bf0 <MX_USART2_UART_Init+0x90>)
 8005ba8:	0018      	movs	r0, r3
 8005baa:	f003 f9e7 	bl	8008f7c <HAL_UART_Init>
 8005bae:	1e03      	subs	r3, r0, #0
 8005bb0:	d001      	beq.n	8005bb6 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8005bb2:	f7fe f94b 	bl	8003e4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8005bf0 <MX_USART2_UART_Init+0x90>)
 8005bb8:	2100      	movs	r1, #0
 8005bba:	0018      	movs	r0, r3
 8005bbc:	f003 fe74 	bl	80098a8 <HAL_UARTEx_SetTxFifoThreshold>
 8005bc0:	1e03      	subs	r3, r0, #0
 8005bc2:	d001      	beq.n	8005bc8 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8005bc4:	f7fe f942 	bl	8003e4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005bc8:	4b09      	ldr	r3, [pc, #36]	@ (8005bf0 <MX_USART2_UART_Init+0x90>)
 8005bca:	2100      	movs	r1, #0
 8005bcc:	0018      	movs	r0, r3
 8005bce:	f003 feab 	bl	8009928 <HAL_UARTEx_SetRxFifoThreshold>
 8005bd2:	1e03      	subs	r3, r0, #0
 8005bd4:	d001      	beq.n	8005bda <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8005bd6:	f7fe f939 	bl	8003e4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005bda:	4b05      	ldr	r3, [pc, #20]	@ (8005bf0 <MX_USART2_UART_Init+0x90>)
 8005bdc:	0018      	movs	r0, r3
 8005bde:	f003 fe29 	bl	8009834 <HAL_UARTEx_DisableFifoMode>
 8005be2:	1e03      	subs	r3, r0, #0
 8005be4:	d001      	beq.n	8005bea <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8005be6:	f7fe f931 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005bea:	46c0      	nop			@ (mov r8, r8)
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	2000050c 	.word	0x2000050c
 8005bf4:	40004400 	.word	0x40004400
 8005bf8:	000f4240 	.word	0x000f4240

08005bfc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005bfc:	b590      	push	{r4, r7, lr}
 8005bfe:	b09b      	sub	sp, #108	@ 0x6c
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c04:	2354      	movs	r3, #84	@ 0x54
 8005c06:	18fb      	adds	r3, r7, r3
 8005c08:	0018      	movs	r0, r3
 8005c0a:	2314      	movs	r3, #20
 8005c0c:	001a      	movs	r2, r3
 8005c0e:	2100      	movs	r1, #0
 8005c10:	f007 ff86 	bl	800db20 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005c14:	2410      	movs	r4, #16
 8005c16:	193b      	adds	r3, r7, r4
 8005c18:	0018      	movs	r0, r3
 8005c1a:	2344      	movs	r3, #68	@ 0x44
 8005c1c:	001a      	movs	r2, r3
 8005c1e:	2100      	movs	r1, #0
 8005c20:	f007 ff7e 	bl	800db20 <memset>
  if(uartHandle->Instance==USART2)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a22      	ldr	r2, [pc, #136]	@ (8005cb4 <HAL_UART_MspInit+0xb8>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d13e      	bne.n	8005cac <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005c2e:	193b      	adds	r3, r7, r4
 8005c30:	2202      	movs	r2, #2
 8005c32:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005c34:	193b      	adds	r3, r7, r4
 8005c36:	2200      	movs	r2, #0
 8005c38:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005c3a:	193b      	adds	r3, r7, r4
 8005c3c:	0018      	movs	r0, r3
 8005c3e:	f001 ff45 	bl	8007acc <HAL_RCCEx_PeriphCLKConfig>
 8005c42:	1e03      	subs	r3, r0, #0
 8005c44:	d001      	beq.n	8005c4a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005c46:	f7fe f901 	bl	8003e4c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8005cb8 <HAL_UART_MspInit+0xbc>)
 8005c4c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8005cb8 <HAL_UART_MspInit+0xbc>)
 8005c50:	2180      	movs	r1, #128	@ 0x80
 8005c52:	0289      	lsls	r1, r1, #10
 8005c54:	430a      	orrs	r2, r1
 8005c56:	659a      	str	r2, [r3, #88]	@ 0x58
 8005c58:	4b17      	ldr	r3, [pc, #92]	@ (8005cb8 <HAL_UART_MspInit+0xbc>)
 8005c5a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005c5c:	2380      	movs	r3, #128	@ 0x80
 8005c5e:	029b      	lsls	r3, r3, #10
 8005c60:	4013      	ands	r3, r2
 8005c62:	60fb      	str	r3, [r7, #12]
 8005c64:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c66:	4b14      	ldr	r3, [pc, #80]	@ (8005cb8 <HAL_UART_MspInit+0xbc>)
 8005c68:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005c6a:	4b13      	ldr	r3, [pc, #76]	@ (8005cb8 <HAL_UART_MspInit+0xbc>)
 8005c6c:	2101      	movs	r1, #1
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005c72:	4b11      	ldr	r3, [pc, #68]	@ (8005cb8 <HAL_UART_MspInit+0xbc>)
 8005c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c76:	2201      	movs	r2, #1
 8005c78:	4013      	ands	r3, r2
 8005c7a:	60bb      	str	r3, [r7, #8]
 8005c7c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005c7e:	2154      	movs	r1, #84	@ 0x54
 8005c80:	187b      	adds	r3, r7, r1
 8005c82:	220c      	movs	r2, #12
 8005c84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c86:	187b      	adds	r3, r7, r1
 8005c88:	2202      	movs	r2, #2
 8005c8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c8c:	187b      	adds	r3, r7, r1
 8005c8e:	2200      	movs	r2, #0
 8005c90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c92:	187b      	adds	r3, r7, r1
 8005c94:	2200      	movs	r2, #0
 8005c96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005c98:	187b      	adds	r3, r7, r1
 8005c9a:	2207      	movs	r2, #7
 8005c9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c9e:	187a      	adds	r2, r7, r1
 8005ca0:	23a0      	movs	r3, #160	@ 0xa0
 8005ca2:	05db      	lsls	r3, r3, #23
 8005ca4:	0011      	movs	r1, r2
 8005ca6:	0018      	movs	r0, r3
 8005ca8:	f000 fd94 	bl	80067d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005cac:	46c0      	nop			@ (mov r8, r8)
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	b01b      	add	sp, #108	@ 0x6c
 8005cb2:	bd90      	pop	{r4, r7, pc}
 8005cb4:	40004400 	.word	0x40004400
 8005cb8:	40021000 	.word	0x40021000

08005cbc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005cbc:	480d      	ldr	r0, [pc, #52]	@ (8005cf4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005cbe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005cc0:	f7ff ff24 	bl	8005b0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005cc4:	480c      	ldr	r0, [pc, #48]	@ (8005cf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8005cc6:	490d      	ldr	r1, [pc, #52]	@ (8005cfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8005cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8005d00 <LoopForever+0xe>)
  movs r3, #0
 8005cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005ccc:	e002      	b.n	8005cd4 <LoopCopyDataInit>

08005cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005cd2:	3304      	adds	r3, #4

08005cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005cd8:	d3f9      	bcc.n	8005cce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005cda:	4a0a      	ldr	r2, [pc, #40]	@ (8005d04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005cdc:	4c0a      	ldr	r4, [pc, #40]	@ (8005d08 <LoopForever+0x16>)
  movs r3, #0
 8005cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005ce0:	e001      	b.n	8005ce6 <LoopFillZerobss>

08005ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005ce4:	3204      	adds	r2, #4

08005ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ce8:	d3fb      	bcc.n	8005ce2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005cea:	f007 ffa1 	bl	800dc30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005cee:	f7fd fd9b 	bl	8003828 <main>

08005cf2 <LoopForever>:

LoopForever:
  b LoopForever
 8005cf2:	e7fe      	b.n	8005cf2 <LoopForever>
  ldr   r0, =_estack
 8005cf4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005cfc:	20000340 	.word	0x20000340
  ldr r2, =_sidata
 8005d00:	0801b748 	.word	0x0801b748
  ldr r2, =_sbss
 8005d04:	20000340 	.word	0x20000340
  ldr r4, =_ebss
 8005d08:	20000748 	.word	0x20000748

08005d0c <ADC_COMP1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005d0c:	e7fe      	b.n	8005d0c <ADC_COMP1_2_IRQHandler>

08005d0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b082      	sub	sp, #8
 8005d12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005d14:	1dfb      	adds	r3, r7, #7
 8005d16:	2200      	movs	r2, #0
 8005d18:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005d1a:	2003      	movs	r0, #3
 8005d1c:	f000 f80e 	bl	8005d3c <HAL_InitTick>
 8005d20:	1e03      	subs	r3, r0, #0
 8005d22:	d003      	beq.n	8005d2c <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8005d24:	1dfb      	adds	r3, r7, #7
 8005d26:	2201      	movs	r2, #1
 8005d28:	701a      	strb	r2, [r3, #0]
 8005d2a:	e001      	b.n	8005d30 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005d2c:	f7ff fdf2 	bl	8005914 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005d30:	1dfb      	adds	r3, r7, #7
 8005d32:	781b      	ldrb	r3, [r3, #0]
}
 8005d34:	0018      	movs	r0, r3
 8005d36:	46bd      	mov	sp, r7
 8005d38:	b002      	add	sp, #8
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d3c:	b590      	push	{r4, r7, lr}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005d44:	230f      	movs	r3, #15
 8005d46:	18fb      	adds	r3, r7, r3
 8005d48:	2200      	movs	r2, #0
 8005d4a:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8005d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8005dc4 <HAL_InitTick+0x88>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d02b      	beq.n	8005dac <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005d54:	4b1c      	ldr	r3, [pc, #112]	@ (8005dc8 <HAL_InitTick+0x8c>)
 8005d56:	681c      	ldr	r4, [r3, #0]
 8005d58:	4b1a      	ldr	r3, [pc, #104]	@ (8005dc4 <HAL_InitTick+0x88>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	0019      	movs	r1, r3
 8005d5e:	23fa      	movs	r3, #250	@ 0xfa
 8005d60:	0098      	lsls	r0, r3, #2
 8005d62:	f7fa f9ed 	bl	8000140 <__udivsi3>
 8005d66:	0003      	movs	r3, r0
 8005d68:	0019      	movs	r1, r3
 8005d6a:	0020      	movs	r0, r4
 8005d6c:	f7fa f9e8 	bl	8000140 <__udivsi3>
 8005d70:	0003      	movs	r3, r0
 8005d72:	0018      	movs	r0, r3
 8005d74:	f000 fd21 	bl	80067ba <HAL_SYSTICK_Config>
 8005d78:	1e03      	subs	r3, r0, #0
 8005d7a:	d112      	bne.n	8005da2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2b03      	cmp	r3, #3
 8005d80:	d80a      	bhi.n	8005d98 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d82:	6879      	ldr	r1, [r7, #4]
 8005d84:	2301      	movs	r3, #1
 8005d86:	425b      	negs	r3, r3
 8005d88:	2200      	movs	r2, #0
 8005d8a:	0018      	movs	r0, r3
 8005d8c:	f000 fd00 	bl	8006790 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005d90:	4b0e      	ldr	r3, [pc, #56]	@ (8005dcc <HAL_InitTick+0x90>)
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	601a      	str	r2, [r3, #0]
 8005d96:	e00d      	b.n	8005db4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005d98:	230f      	movs	r3, #15
 8005d9a:	18fb      	adds	r3, r7, r3
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	701a      	strb	r2, [r3, #0]
 8005da0:	e008      	b.n	8005db4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005da2:	230f      	movs	r3, #15
 8005da4:	18fb      	adds	r3, r7, r3
 8005da6:	2201      	movs	r2, #1
 8005da8:	701a      	strb	r2, [r3, #0]
 8005daa:	e003      	b.n	8005db4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005dac:	230f      	movs	r3, #15
 8005dae:	18fb      	adds	r3, r7, r3
 8005db0:	2201      	movs	r2, #1
 8005db2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005db4:	230f      	movs	r3, #15
 8005db6:	18fb      	adds	r3, r7, r3
 8005db8:	781b      	ldrb	r3, [r3, #0]
}
 8005dba:	0018      	movs	r0, r3
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	b005      	add	sp, #20
 8005dc0:	bd90      	pop	{r4, r7, pc}
 8005dc2:	46c0      	nop			@ (mov r8, r8)
 8005dc4:	2000000c 	.word	0x2000000c
 8005dc8:	20000004 	.word	0x20000004
 8005dcc:	20000008 	.word	0x20000008

08005dd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005dd4:	4b04      	ldr	r3, [pc, #16]	@ (8005de8 <HAL_IncTick+0x18>)
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	4b04      	ldr	r3, [pc, #16]	@ (8005dec <HAL_IncTick+0x1c>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	18d2      	adds	r2, r2, r3
 8005dde:	4b02      	ldr	r3, [pc, #8]	@ (8005de8 <HAL_IncTick+0x18>)
 8005de0:	601a      	str	r2, [r3, #0]
}
 8005de2:	46c0      	nop			@ (mov r8, r8)
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	200005a0 	.word	0x200005a0
 8005dec:	2000000c 	.word	0x2000000c

08005df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	af00      	add	r7, sp, #0
  return uwTick;
 8005df4:	4b02      	ldr	r3, [pc, #8]	@ (8005e00 <HAL_GetTick+0x10>)
 8005df6:	681b      	ldr	r3, [r3, #0]
}
 8005df8:	0018      	movs	r0, r3
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	46c0      	nop			@ (mov r8, r8)
 8005e00:	200005a0 	.word	0x200005a0

08005e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e0c:	f7ff fff0 	bl	8005df0 <HAL_GetTick>
 8005e10:	0003      	movs	r3, r0
 8005e12:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	d004      	beq.n	8005e28 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e1e:	4b09      	ldr	r3, [pc, #36]	@ (8005e44 <HAL_Delay+0x40>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	18d3      	adds	r3, r2, r3
 8005e26:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005e28:	46c0      	nop			@ (mov r8, r8)
 8005e2a:	f7ff ffe1 	bl	8005df0 <HAL_GetTick>
 8005e2e:	0002      	movs	r2, r0
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d8f7      	bhi.n	8005e2a <HAL_Delay+0x26>
  {
  }
}
 8005e3a:	46c0      	nop			@ (mov r8, r8)
 8005e3c:	46c0      	nop			@ (mov r8, r8)
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	b004      	add	sp, #16
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	2000000c 	.word	0x2000000c

08005e48 <LL_ADC_SetCommonPathInternalCh>:
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a05      	ldr	r2, [pc, #20]	@ (8005e6c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8005e58:	401a      	ands	r2, r3
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	431a      	orrs	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	601a      	str	r2, [r3, #0]
}
 8005e62:	46c0      	nop			@ (mov r8, r8)
 8005e64:	46bd      	mov	sp, r7
 8005e66:	b002      	add	sp, #8
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	46c0      	nop			@ (mov r8, r8)
 8005e6c:	fe3fffff 	.word	0xfe3fffff

08005e70 <LL_ADC_GetCommonPathInternalCh>:
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	23e0      	movs	r3, #224	@ 0xe0
 8005e7e:	045b      	lsls	r3, r3, #17
 8005e80:	4013      	ands	r3, r2
}
 8005e82:	0018      	movs	r0, r3
 8005e84:	46bd      	mov	sp, r7
 8005e86:	b002      	add	sp, #8
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <LL_ADC_SetSamplingTimeCommonChannels>:
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b084      	sub	sp, #16
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	60f8      	str	r0, [r7, #12]
 8005e92:	60b9      	str	r1, [r7, #8]
 8005e94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	2104      	movs	r1, #4
 8005e9e:	400a      	ands	r2, r1
 8005ea0:	2107      	movs	r1, #7
 8005ea2:	4091      	lsls	r1, r2
 8005ea4:	000a      	movs	r2, r1
 8005ea6:	43d2      	mvns	r2, r2
 8005ea8:	401a      	ands	r2, r3
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	2104      	movs	r1, #4
 8005eae:	400b      	ands	r3, r1
 8005eb0:	6879      	ldr	r1, [r7, #4]
 8005eb2:	4099      	lsls	r1, r3
 8005eb4:	000b      	movs	r3, r1
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	615a      	str	r2, [r3, #20]
}
 8005ebc:	46c0      	nop			@ (mov r8, r8)
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	b004      	add	sp, #16
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <LL_ADC_GetSamplingTimeCommonChannels>:
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	683a      	ldr	r2, [r7, #0]
 8005ed4:	2104      	movs	r1, #4
 8005ed6:	400a      	ands	r2, r1
 8005ed8:	2107      	movs	r1, #7
 8005eda:	4091      	lsls	r1, r2
 8005edc:	000a      	movs	r2, r1
 8005ede:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	2104      	movs	r1, #4
 8005ee4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005ee6:	40da      	lsrs	r2, r3
 8005ee8:	0013      	movs	r3, r2
}
 8005eea:	0018      	movs	r0, r3
 8005eec:	46bd      	mov	sp, r7
 8005eee:	b002      	add	sp, #8
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <LL_ADC_REG_SetSequencerRanks>:
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b084      	sub	sp, #16
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	60f8      	str	r0, [r7, #12]
 8005efa:	60b9      	str	r1, [r7, #8]
 8005efc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CHSELR,
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	211f      	movs	r1, #31
 8005f06:	400a      	ands	r2, r1
 8005f08:	210f      	movs	r1, #15
 8005f0a:	4091      	lsls	r1, r2
 8005f0c:	000a      	movs	r2, r1
 8005f0e:	43d2      	mvns	r2, r2
 8005f10:	401a      	ands	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	0e9b      	lsrs	r3, r3, #26
 8005f16:	210f      	movs	r1, #15
 8005f18:	4019      	ands	r1, r3
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	201f      	movs	r0, #31
 8005f1e:	4003      	ands	r3, r0
 8005f20:	4099      	lsls	r1, r3
 8005f22:	000b      	movs	r3, r1
 8005f24:	431a      	orrs	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005f2a:	46c0      	nop			@ (mov r8, r8)
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	b004      	add	sp, #16
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <LL_ADC_REG_SetSequencerChAdd>:
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b082      	sub	sp, #8
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
 8005f3a:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	025b      	lsls	r3, r3, #9
 8005f44:	0a5b      	lsrs	r3, r3, #9
 8005f46:	431a      	orrs	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005f4c:	46c0      	nop			@ (mov r8, r8)
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	b002      	add	sp, #8
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <LL_ADC_REG_SetSequencerChRem>:
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	0252      	lsls	r2, r2, #9
 8005f66:	0a52      	lsrs	r2, r2, #9
 8005f68:	43d2      	mvns	r2, r2
 8005f6a:	401a      	ands	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005f70:	46c0      	nop			@ (mov r8, r8)
 8005f72:	46bd      	mov	sp, r7
 8005f74:	b002      	add	sp, #8
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <LL_ADC_SetChannelSamplingTime>:
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	0212      	lsls	r2, r2, #8
 8005f8c:	43d2      	mvns	r2, r2
 8005f8e:	401a      	ands	r2, r3
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	021b      	lsls	r3, r3, #8
 8005f94:	6879      	ldr	r1, [r7, #4]
 8005f96:	400b      	ands	r3, r1
 8005f98:	4904      	ldr	r1, [pc, #16]	@ (8005fac <LL_ADC_SetChannelSamplingTime+0x34>)
 8005f9a:	400b      	ands	r3, r1
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	615a      	str	r2, [r3, #20]
}
 8005fa2:	46c0      	nop			@ (mov r8, r8)
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	b004      	add	sp, #16
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	46c0      	nop			@ (mov r8, r8)
 8005fac:	7fffff00 	.word	0x7fffff00

08005fb0 <LL_ADC_EnableInternalRegulator>:
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	4a05      	ldr	r2, [pc, #20]	@ (8005fd4 <LL_ADC_EnableInternalRegulator+0x24>)
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	2280      	movs	r2, #128	@ 0x80
 8005fc2:	0552      	lsls	r2, r2, #21
 8005fc4:	431a      	orrs	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	609a      	str	r2, [r3, #8]
}
 8005fca:	46c0      	nop			@ (mov r8, r8)
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	b002      	add	sp, #8
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	46c0      	nop			@ (mov r8, r8)
 8005fd4:	6fffffe8 	.word	0x6fffffe8

08005fd8 <LL_ADC_IsInternalRegulatorEnabled>:
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	689a      	ldr	r2, [r3, #8]
 8005fe4:	2380      	movs	r3, #128	@ 0x80
 8005fe6:	055b      	lsls	r3, r3, #21
 8005fe8:	401a      	ands	r2, r3
 8005fea:	2380      	movs	r3, #128	@ 0x80
 8005fec:	055b      	lsls	r3, r3, #21
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d101      	bne.n	8005ff6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e000      	b.n	8005ff8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	0018      	movs	r0, r3
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	b002      	add	sp, #8
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <LL_ADC_IsEnabled>:
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b082      	sub	sp, #8
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	2201      	movs	r2, #1
 800600e:	4013      	ands	r3, r2
 8006010:	2b01      	cmp	r3, #1
 8006012:	d101      	bne.n	8006018 <LL_ADC_IsEnabled+0x18>
 8006014:	2301      	movs	r3, #1
 8006016:	e000      	b.n	800601a <LL_ADC_IsEnabled+0x1a>
 8006018:	2300      	movs	r3, #0
}
 800601a:	0018      	movs	r0, r3
 800601c:	46bd      	mov	sp, r7
 800601e:	b002      	add	sp, #8
 8006020:	bd80      	pop	{r7, pc}

08006022 <LL_ADC_REG_IsConversionOngoing>:
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b082      	sub	sp, #8
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	2204      	movs	r2, #4
 8006030:	4013      	ands	r3, r2
 8006032:	2b04      	cmp	r3, #4
 8006034:	d101      	bne.n	800603a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006036:	2301      	movs	r3, #1
 8006038:	e000      	b.n	800603c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800603a:	2300      	movs	r3, #0
}
 800603c:	0018      	movs	r0, r3
 800603e:	46bd      	mov	sp, r7
 8006040:	b002      	add	sp, #8
 8006042:	bd80      	pop	{r7, pc}

08006044 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b088      	sub	sp, #32
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800604c:	231f      	movs	r3, #31
 800604e:	18fb      	adds	r3, r7, r3
 8006050:	2200      	movs	r2, #0
 8006052:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8006054:	2300      	movs	r3, #0
 8006056:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8006058:	2300      	movs	r3, #0
 800605a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800605c:	2300      	movs	r3, #0
 800605e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e17f      	b.n	800636a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10a      	bne.n	8006088 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	0018      	movs	r0, r3
 8006076:	f7fd f925 	bl	80032c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2254      	movs	r2, #84	@ 0x54
 8006084:	2100      	movs	r1, #0
 8006086:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	0018      	movs	r0, r3
 800608e:	f7ff ffa3 	bl	8005fd8 <LL_ADC_IsInternalRegulatorEnabled>
 8006092:	1e03      	subs	r3, r0, #0
 8006094:	d115      	bne.n	80060c2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	0018      	movs	r0, r3
 800609c:	f7ff ff88 	bl	8005fb0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80060a0:	4bb4      	ldr	r3, [pc, #720]	@ (8006374 <HAL_ADC_Init+0x330>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	49b4      	ldr	r1, [pc, #720]	@ (8006378 <HAL_ADC_Init+0x334>)
 80060a6:	0018      	movs	r0, r3
 80060a8:	f7fa f84a 	bl	8000140 <__udivsi3>
 80060ac:	0003      	movs	r3, r0
 80060ae:	3301      	adds	r3, #1
 80060b0:	005b      	lsls	r3, r3, #1
 80060b2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80060b4:	e002      	b.n	80060bc <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	3b01      	subs	r3, #1
 80060ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1f9      	bne.n	80060b6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	0018      	movs	r0, r3
 80060c8:	f7ff ff86 	bl	8005fd8 <LL_ADC_IsInternalRegulatorEnabled>
 80060cc:	1e03      	subs	r3, r0, #0
 80060ce:	d10f      	bne.n	80060f0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060d4:	2210      	movs	r2, #16
 80060d6:	431a      	orrs	r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060e0:	2201      	movs	r2, #1
 80060e2:	431a      	orrs	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80060e8:	231f      	movs	r3, #31
 80060ea:	18fb      	adds	r3, r7, r3
 80060ec:	2201      	movs	r2, #1
 80060ee:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	0018      	movs	r0, r3
 80060f6:	f7ff ff94 	bl	8006022 <LL_ADC_REG_IsConversionOngoing>
 80060fa:	0003      	movs	r3, r0
 80060fc:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006102:	2210      	movs	r2, #16
 8006104:	4013      	ands	r3, r2
 8006106:	d000      	beq.n	800610a <HAL_ADC_Init+0xc6>
 8006108:	e122      	b.n	8006350 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d000      	beq.n	8006112 <HAL_ADC_Init+0xce>
 8006110:	e11e      	b.n	8006350 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006116:	4a99      	ldr	r2, [pc, #612]	@ (800637c <HAL_ADC_Init+0x338>)
 8006118:	4013      	ands	r3, r2
 800611a:	2202      	movs	r2, #2
 800611c:	431a      	orrs	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	0018      	movs	r0, r3
 8006128:	f7ff ff6a 	bl	8006000 <LL_ADC_IsEnabled>
 800612c:	1e03      	subs	r3, r0, #0
 800612e:	d000      	beq.n	8006132 <HAL_ADC_Init+0xee>
 8006130:	e0ad      	b.n	800628e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	7e1b      	ldrb	r3, [r3, #24]
 800613a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800613c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	7e5b      	ldrb	r3, [r3, #25]
 8006142:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8006144:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	7e9b      	ldrb	r3, [r3, #26]
 800614a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800614c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006152:	2b00      	cmp	r3, #0
 8006154:	d002      	beq.n	800615c <HAL_ADC_Init+0x118>
 8006156:	2380      	movs	r3, #128	@ 0x80
 8006158:	015b      	lsls	r3, r3, #5
 800615a:	e000      	b.n	800615e <HAL_ADC_Init+0x11a>
 800615c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800615e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8006164:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	2b00      	cmp	r3, #0
 800616c:	da04      	bge.n	8006178 <HAL_ADC_Init+0x134>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	005b      	lsls	r3, r3, #1
 8006174:	085b      	lsrs	r3, r3, #1
 8006176:	e001      	b.n	800617c <HAL_ADC_Init+0x138>
 8006178:	2380      	movs	r3, #128	@ 0x80
 800617a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 800617c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	212c      	movs	r1, #44	@ 0x2c
 8006182:	5c5b      	ldrb	r3, [r3, r1]
 8006184:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8006186:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8006188:	69ba      	ldr	r2, [r7, #24]
 800618a:	4313      	orrs	r3, r2
 800618c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2220      	movs	r2, #32
 8006192:	5c9b      	ldrb	r3, [r3, r2]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d115      	bne.n	80061c4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	7e9b      	ldrb	r3, [r3, #26]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d105      	bne.n	80061ac <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	2280      	movs	r2, #128	@ 0x80
 80061a4:	0252      	lsls	r2, r2, #9
 80061a6:	4313      	orrs	r3, r2
 80061a8:	61bb      	str	r3, [r7, #24]
 80061aa:	e00b      	b.n	80061c4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061b0:	2220      	movs	r2, #32
 80061b2:	431a      	orrs	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061bc:	2201      	movs	r2, #1
 80061be:	431a      	orrs	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00a      	beq.n	80061e2 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061d0:	23e0      	movs	r3, #224	@ 0xe0
 80061d2:	005b      	lsls	r3, r3, #1
 80061d4:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80061da:	4313      	orrs	r3, r2
 80061dc:	69ba      	ldr	r2, [r7, #24]
 80061de:	4313      	orrs	r3, r2
 80061e0:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	4a65      	ldr	r2, [pc, #404]	@ (8006380 <HAL_ADC_Init+0x33c>)
 80061ea:	4013      	ands	r3, r2
 80061ec:	0019      	movs	r1, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	69ba      	ldr	r2, [r7, #24]
 80061f4:	430a      	orrs	r2, r1
 80061f6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	0f9b      	lsrs	r3, r3, #30
 80061fe:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006204:	4313      	orrs	r3, r2
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	4313      	orrs	r3, r2
 800620a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	223c      	movs	r2, #60	@ 0x3c
 8006210:	5c9b      	ldrb	r3, [r3, r2]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d111      	bne.n	800623a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	0f9b      	lsrs	r3, r3, #30
 800621c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006222:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8006228:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800622e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	4313      	orrs	r3, r2
 8006234:	2201      	movs	r2, #1
 8006236:	4313      	orrs	r3, r2
 8006238:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	4a50      	ldr	r2, [pc, #320]	@ (8006384 <HAL_ADC_Init+0x340>)
 8006242:	4013      	ands	r3, r2
 8006244:	0019      	movs	r1, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	430a      	orrs	r2, r1
 800624e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	23c0      	movs	r3, #192	@ 0xc0
 8006256:	061b      	lsls	r3, r3, #24
 8006258:	429a      	cmp	r2, r3
 800625a:	d018      	beq.n	800628e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8006260:	2380      	movs	r3, #128	@ 0x80
 8006262:	05db      	lsls	r3, r3, #23
 8006264:	429a      	cmp	r2, r3
 8006266:	d012      	beq.n	800628e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800626c:	2380      	movs	r3, #128	@ 0x80
 800626e:	061b      	lsls	r3, r3, #24
 8006270:	429a      	cmp	r2, r3
 8006272:	d00c      	beq.n	800628e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8006274:	4b44      	ldr	r3, [pc, #272]	@ (8006388 <HAL_ADC_Init+0x344>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a44      	ldr	r2, [pc, #272]	@ (800638c <HAL_ADC_Init+0x348>)
 800627a:	4013      	ands	r3, r2
 800627c:	0019      	movs	r1, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685a      	ldr	r2, [r3, #4]
 8006282:	23f0      	movs	r3, #240	@ 0xf0
 8006284:	039b      	lsls	r3, r3, #14
 8006286:	401a      	ands	r2, r3
 8006288:	4b3f      	ldr	r3, [pc, #252]	@ (8006388 <HAL_ADC_Init+0x344>)
 800628a:	430a      	orrs	r2, r1
 800628c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6818      	ldr	r0, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006296:	001a      	movs	r2, r3
 8006298:	2100      	movs	r1, #0
 800629a:	f7ff fdf6 	bl	8005e8a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6818      	ldr	r0, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a6:	493a      	ldr	r1, [pc, #232]	@ (8006390 <HAL_ADC_Init+0x34c>)
 80062a8:	001a      	movs	r2, r3
 80062aa:	f7ff fdee 	bl	8005e8a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d109      	bne.n	80062ca <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2110      	movs	r1, #16
 80062c2:	4249      	negs	r1, r1
 80062c4:	430a      	orrs	r2, r1
 80062c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80062c8:	e018      	b.n	80062fc <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	691a      	ldr	r2, [r3, #16]
 80062ce:	2380      	movs	r3, #128	@ 0x80
 80062d0:	039b      	lsls	r3, r3, #14
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d112      	bne.n	80062fc <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	69db      	ldr	r3, [r3, #28]
 80062e0:	3b01      	subs	r3, #1
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	221c      	movs	r2, #28
 80062e6:	4013      	ands	r3, r2
 80062e8:	2210      	movs	r2, #16
 80062ea:	4252      	negs	r2, r2
 80062ec:	409a      	lsls	r2, r3
 80062ee:	0011      	movs	r1, r2
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	430a      	orrs	r2, r1
 80062fa:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2100      	movs	r1, #0
 8006302:	0018      	movs	r0, r3
 8006304:	f7ff fdde 	bl	8005ec4 <LL_ADC_GetSamplingTimeCommonChannels>
 8006308:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800630e:	429a      	cmp	r2, r3
 8006310:	d10b      	bne.n	800632a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800631c:	2203      	movs	r2, #3
 800631e:	4393      	bics	r3, r2
 8006320:	2201      	movs	r2, #1
 8006322:	431a      	orrs	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006328:	e01c      	b.n	8006364 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800632e:	2212      	movs	r2, #18
 8006330:	4393      	bics	r3, r2
 8006332:	2210      	movs	r2, #16
 8006334:	431a      	orrs	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800633e:	2201      	movs	r2, #1
 8006340:	431a      	orrs	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8006346:	231f      	movs	r3, #31
 8006348:	18fb      	adds	r3, r7, r3
 800634a:	2201      	movs	r2, #1
 800634c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800634e:	e009      	b.n	8006364 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006354:	2210      	movs	r2, #16
 8006356:	431a      	orrs	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800635c:	231f      	movs	r3, #31
 800635e:	18fb      	adds	r3, r7, r3
 8006360:	2201      	movs	r2, #1
 8006362:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8006364:	231f      	movs	r3, #31
 8006366:	18fb      	adds	r3, r7, r3
 8006368:	781b      	ldrb	r3, [r3, #0]
}
 800636a:	0018      	movs	r0, r3
 800636c:	46bd      	mov	sp, r7
 800636e:	b008      	add	sp, #32
 8006370:	bd80      	pop	{r7, pc}
 8006372:	46c0      	nop			@ (mov r8, r8)
 8006374:	20000004 	.word	0x20000004
 8006378:	00030d40 	.word	0x00030d40
 800637c:	fffffefd 	.word	0xfffffefd
 8006380:	ffde0201 	.word	0xffde0201
 8006384:	1ffffc02 	.word	0x1ffffc02
 8006388:	40012708 	.word	0x40012708
 800638c:	ffc3ffff 	.word	0xffc3ffff
 8006390:	7fffff04 	.word	0x7fffff04

08006394 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006394:	b590      	push	{r4, r7, lr}
 8006396:	b08b      	sub	sp, #44	@ 0x2c
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800639e:	2327      	movs	r3, #39	@ 0x27
 80063a0:	18fb      	adds	r3, r7, r3
 80063a2:	2200      	movs	r2, #0
 80063a4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80063a6:	2300      	movs	r3, #0
 80063a8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2254      	movs	r2, #84	@ 0x54
 80063ae:	5c9b      	ldrb	r3, [r3, r2]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d101      	bne.n	80063b8 <HAL_ADC_ConfigChannel+0x24>
 80063b4:	2302      	movs	r3, #2
 80063b6:	e141      	b.n	800663c <HAL_ADC_ConfigChannel+0x2a8>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2254      	movs	r2, #84	@ 0x54
 80063bc:	2101      	movs	r1, #1
 80063be:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	0018      	movs	r0, r3
 80063c6:	f7ff fe2c 	bl	8006022 <LL_ADC_REG_IsConversionOngoing>
 80063ca:	1e03      	subs	r3, r0, #0
 80063cc:	d000      	beq.n	80063d0 <HAL_ADC_ConfigChannel+0x3c>
 80063ce:	e124      	b.n	800661a <HAL_ADC_ConfigChannel+0x286>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d100      	bne.n	80063da <HAL_ADC_ConfigChannel+0x46>
 80063d8:	e0d8      	b.n	800658c <HAL_ADC_ConfigChannel+0x1f8>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	691a      	ldr	r2, [r3, #16]
 80063de:	2380      	movs	r3, #128	@ 0x80
 80063e0:	061b      	lsls	r3, r3, #24
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d004      	beq.n	80063f0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80063ea:	4a96      	ldr	r2, [pc, #600]	@ (8006644 <HAL_ADC_ConfigChannel+0x2b0>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d108      	bne.n	8006402 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	0019      	movs	r1, r3
 80063fa:	0010      	movs	r0, r2
 80063fc:	f7ff fd99 	bl	8005f32 <LL_ADC_REG_SetSequencerChAdd>
 8006400:	e060      	b.n	80064c4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	211f      	movs	r1, #31
 800640c:	400b      	ands	r3, r1
 800640e:	210f      	movs	r1, #15
 8006410:	4099      	lsls	r1, r3
 8006412:	000b      	movs	r3, r1
 8006414:	43db      	mvns	r3, r3
 8006416:	4013      	ands	r3, r2
 8006418:	001c      	movs	r4, r3
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	025b      	lsls	r3, r3, #9
 8006420:	0a5b      	lsrs	r3, r3, #9
 8006422:	d105      	bne.n	8006430 <HAL_ADC_ConfigChannel+0x9c>
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	0e9b      	lsrs	r3, r3, #26
 800642a:	221f      	movs	r2, #31
 800642c:	401a      	ands	r2, r3
 800642e:	e02e      	b.n	800648e <HAL_ADC_ConfigChannel+0xfa>
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8006436:	231f      	movs	r3, #31
 8006438:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	085b      	lsrs	r3, r3, #1
 8006442:	61bb      	str	r3, [r7, #24]
 8006444:	e00e      	b.n	8006464 <HAL_ADC_ConfigChannel+0xd0>
    result <<= 1U;
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	005b      	lsls	r3, r3, #1
 800644a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	2201      	movs	r2, #1
 8006450:	4013      	ands	r3, r2
 8006452:	693a      	ldr	r2, [r7, #16]
 8006454:	4313      	orrs	r3, r2
 8006456:	613b      	str	r3, [r7, #16]
    s--;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	3b01      	subs	r3, #1
 800645c:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	085b      	lsrs	r3, r3, #1
 8006462:	61bb      	str	r3, [r7, #24]
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1ed      	bne.n	8006446 <HAL_ADC_ConfigChannel+0xb2>
  result <<= s;                        /* shift when v's highest bits are zero */
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	409a      	lsls	r2, r3
 8006470:	0013      	movs	r3, r2
 8006472:	613b      	str	r3, [r7, #16]
  return result;
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d101      	bne.n	8006482 <HAL_ADC_ConfigChannel+0xee>
    return 32U;
 800647e:	2320      	movs	r3, #32
 8006480:	e004      	b.n	800648c <HAL_ADC_ConfigChannel+0xf8>
  return __builtin_clz(value);
 8006482:	69f8      	ldr	r0, [r7, #28]
 8006484:	f7fa f810 	bl	80004a8 <__clzsi2>
 8006488:	0003      	movs	r3, r0
 800648a:	b2db      	uxtb	r3, r3
 800648c:	001a      	movs	r2, r3
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	211f      	movs	r1, #31
 8006494:	400b      	ands	r3, r1
 8006496:	409a      	lsls	r2, r3
 8006498:	0013      	movs	r3, r2
 800649a:	0022      	movs	r2, r4
 800649c:	431a      	orrs	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	089b      	lsrs	r3, r3, #2
 80064a8:	1c5a      	adds	r2, r3, #1
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	69db      	ldr	r3, [r3, #28]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d808      	bhi.n	80064c4 <HAL_ADC_ConfigChannel+0x130>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6818      	ldr	r0, [r3, #0]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	6859      	ldr	r1, [r3, #4]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	001a      	movs	r2, r3
 80064c0:	f7ff fd17 	bl	8005ef2 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6818      	ldr	r0, [r3, #0]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	6819      	ldr	r1, [r3, #0]
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	001a      	movs	r2, r3
 80064d2:	f7ff fd51 	bl	8005f78 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	db00      	blt.n	80064e0 <HAL_ADC_ConfigChannel+0x14c>
 80064de:	e0a6      	b.n	800662e <HAL_ADC_ConfigChannel+0x29a>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80064e0:	4b59      	ldr	r3, [pc, #356]	@ (8006648 <HAL_ADC_ConfigChannel+0x2b4>)
 80064e2:	0018      	movs	r0, r3
 80064e4:	f7ff fcc4 	bl	8005e70 <LL_ADC_GetCommonPathInternalCh>
 80064e8:	0003      	movs	r3, r0
 80064ea:	623b      	str	r3, [r7, #32]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a56      	ldr	r2, [pc, #344]	@ (800664c <HAL_ADC_ConfigChannel+0x2b8>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d122      	bne.n	800653c <HAL_ADC_ConfigChannel+0x1a8>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80064f6:	6a3a      	ldr	r2, [r7, #32]
 80064f8:	2380      	movs	r3, #128	@ 0x80
 80064fa:	041b      	lsls	r3, r3, #16
 80064fc:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80064fe:	d11d      	bne.n	800653c <HAL_ADC_ConfigChannel+0x1a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006500:	6a3b      	ldr	r3, [r7, #32]
 8006502:	2280      	movs	r2, #128	@ 0x80
 8006504:	0412      	lsls	r2, r2, #16
 8006506:	4313      	orrs	r3, r2
 8006508:	4a4f      	ldr	r2, [pc, #316]	@ (8006648 <HAL_ADC_ConfigChannel+0x2b4>)
 800650a:	0019      	movs	r1, r3
 800650c:	0010      	movs	r0, r2
 800650e:	f7ff fc9b 	bl	8005e48 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006512:	4b4f      	ldr	r3, [pc, #316]	@ (8006650 <HAL_ADC_ConfigChannel+0x2bc>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	494f      	ldr	r1, [pc, #316]	@ (8006654 <HAL_ADC_ConfigChannel+0x2c0>)
 8006518:	0018      	movs	r0, r3
 800651a:	f7f9 fe11 	bl	8000140 <__udivsi3>
 800651e:	0003      	movs	r3, r0
 8006520:	1c5a      	adds	r2, r3, #1
 8006522:	0013      	movs	r3, r2
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	189b      	adds	r3, r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800652c:	e002      	b.n	8006534 <HAL_ADC_ConfigChannel+0x1a0>
          {
            wait_loop_index--;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	3b01      	subs	r3, #1
 8006532:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1f9      	bne.n	800652e <HAL_ADC_ConfigChannel+0x19a>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800653a:	e078      	b.n	800662e <HAL_ADC_ConfigChannel+0x29a>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a45      	ldr	r2, [pc, #276]	@ (8006658 <HAL_ADC_ConfigChannel+0x2c4>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d10e      	bne.n	8006564 <HAL_ADC_ConfigChannel+0x1d0>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006546:	6a3a      	ldr	r2, [r7, #32]
 8006548:	2380      	movs	r3, #128	@ 0x80
 800654a:	045b      	lsls	r3, r3, #17
 800654c:	4013      	ands	r3, r2
 800654e:	d109      	bne.n	8006564 <HAL_ADC_ConfigChannel+0x1d0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006550:	6a3b      	ldr	r3, [r7, #32]
 8006552:	2280      	movs	r2, #128	@ 0x80
 8006554:	0452      	lsls	r2, r2, #17
 8006556:	4313      	orrs	r3, r2
 8006558:	4a3b      	ldr	r2, [pc, #236]	@ (8006648 <HAL_ADC_ConfigChannel+0x2b4>)
 800655a:	0019      	movs	r1, r3
 800655c:	0010      	movs	r0, r2
 800655e:	f7ff fc73 	bl	8005e48 <LL_ADC_SetCommonPathInternalCh>
 8006562:	e064      	b.n	800662e <HAL_ADC_ConfigChannel+0x29a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a3c      	ldr	r2, [pc, #240]	@ (800665c <HAL_ADC_ConfigChannel+0x2c8>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d15f      	bne.n	800662e <HAL_ADC_ConfigChannel+0x29a>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800656e:	6a3a      	ldr	r2, [r7, #32]
 8006570:	2380      	movs	r3, #128	@ 0x80
 8006572:	03db      	lsls	r3, r3, #15
 8006574:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8006576:	d15a      	bne.n	800662e <HAL_ADC_ConfigChannel+0x29a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006578:	6a3b      	ldr	r3, [r7, #32]
 800657a:	2280      	movs	r2, #128	@ 0x80
 800657c:	03d2      	lsls	r2, r2, #15
 800657e:	4313      	orrs	r3, r2
 8006580:	4a31      	ldr	r2, [pc, #196]	@ (8006648 <HAL_ADC_ConfigChannel+0x2b4>)
 8006582:	0019      	movs	r1, r3
 8006584:	0010      	movs	r0, r2
 8006586:	f7ff fc5f 	bl	8005e48 <LL_ADC_SetCommonPathInternalCh>
 800658a:	e050      	b.n	800662e <HAL_ADC_ConfigChannel+0x29a>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	691a      	ldr	r2, [r3, #16]
 8006590:	2380      	movs	r3, #128	@ 0x80
 8006592:	061b      	lsls	r3, r3, #24
 8006594:	429a      	cmp	r2, r3
 8006596:	d004      	beq.n	80065a2 <HAL_ADC_ConfigChannel+0x20e>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800659c:	4a29      	ldr	r2, [pc, #164]	@ (8006644 <HAL_ADC_ConfigChannel+0x2b0>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d107      	bne.n	80065b2 <HAL_ADC_ConfigChannel+0x21e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	0019      	movs	r1, r3
 80065ac:	0010      	movs	r0, r2
 80065ae:	f7ff fcd1 	bl	8005f54 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	da39      	bge.n	800662e <HAL_ADC_ConfigChannel+0x29a>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80065ba:	4b23      	ldr	r3, [pc, #140]	@ (8006648 <HAL_ADC_ConfigChannel+0x2b4>)
 80065bc:	0018      	movs	r0, r3
 80065be:	f7ff fc57 	bl	8005e70 <LL_ADC_GetCommonPathInternalCh>
 80065c2:	0003      	movs	r3, r0
 80065c4:	623b      	str	r3, [r7, #32]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a20      	ldr	r2, [pc, #128]	@ (800664c <HAL_ADC_ConfigChannel+0x2b8>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d108      	bne.n	80065e2 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80065d0:	6a3b      	ldr	r3, [r7, #32]
 80065d2:	4a23      	ldr	r2, [pc, #140]	@ (8006660 <HAL_ADC_ConfigChannel+0x2cc>)
 80065d4:	4013      	ands	r3, r2
 80065d6:	4a1c      	ldr	r2, [pc, #112]	@ (8006648 <HAL_ADC_ConfigChannel+0x2b4>)
 80065d8:	0019      	movs	r1, r3
 80065da:	0010      	movs	r0, r2
 80065dc:	f7ff fc34 	bl	8005e48 <LL_ADC_SetCommonPathInternalCh>
 80065e0:	e025      	b.n	800662e <HAL_ADC_ConfigChannel+0x29a>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a1c      	ldr	r2, [pc, #112]	@ (8006658 <HAL_ADC_ConfigChannel+0x2c4>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d108      	bne.n	80065fe <HAL_ADC_ConfigChannel+0x26a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80065ec:	6a3b      	ldr	r3, [r7, #32]
 80065ee:	4a1d      	ldr	r2, [pc, #116]	@ (8006664 <HAL_ADC_ConfigChannel+0x2d0>)
 80065f0:	4013      	ands	r3, r2
 80065f2:	4a15      	ldr	r2, [pc, #84]	@ (8006648 <HAL_ADC_ConfigChannel+0x2b4>)
 80065f4:	0019      	movs	r1, r3
 80065f6:	0010      	movs	r0, r2
 80065f8:	f7ff fc26 	bl	8005e48 <LL_ADC_SetCommonPathInternalCh>
 80065fc:	e017      	b.n	800662e <HAL_ADC_ConfigChannel+0x29a>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a16      	ldr	r2, [pc, #88]	@ (800665c <HAL_ADC_ConfigChannel+0x2c8>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d112      	bne.n	800662e <HAL_ADC_ConfigChannel+0x29a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006608:	6a3b      	ldr	r3, [r7, #32]
 800660a:	4a17      	ldr	r2, [pc, #92]	@ (8006668 <HAL_ADC_ConfigChannel+0x2d4>)
 800660c:	4013      	ands	r3, r2
 800660e:	4a0e      	ldr	r2, [pc, #56]	@ (8006648 <HAL_ADC_ConfigChannel+0x2b4>)
 8006610:	0019      	movs	r1, r3
 8006612:	0010      	movs	r0, r2
 8006614:	f7ff fc18 	bl	8005e48 <LL_ADC_SetCommonPathInternalCh>
 8006618:	e009      	b.n	800662e <HAL_ADC_ConfigChannel+0x29a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800661e:	2220      	movs	r2, #32
 8006620:	431a      	orrs	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006626:	2327      	movs	r3, #39	@ 0x27
 8006628:	18fb      	adds	r3, r7, r3
 800662a:	2201      	movs	r2, #1
 800662c:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2254      	movs	r2, #84	@ 0x54
 8006632:	2100      	movs	r1, #0
 8006634:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8006636:	2327      	movs	r3, #39	@ 0x27
 8006638:	18fb      	adds	r3, r7, r3
 800663a:	781b      	ldrb	r3, [r3, #0]
}
 800663c:	0018      	movs	r0, r3
 800663e:	46bd      	mov	sp, r7
 8006640:	b00b      	add	sp, #44	@ 0x2c
 8006642:	bd90      	pop	{r4, r7, pc}
 8006644:	80000004 	.word	0x80000004
 8006648:	40012708 	.word	0x40012708
 800664c:	ac000800 	.word	0xac000800
 8006650:	20000004 	.word	0x20000004
 8006654:	00030d40 	.word	0x00030d40
 8006658:	b4002000 	.word	0xb4002000
 800665c:	b0001000 	.word	0xb0001000
 8006660:	ff7fffff 	.word	0xff7fffff
 8006664:	feffffff 	.word	0xfeffffff
 8006668:	ffbfffff 	.word	0xffbfffff

0800666c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800666c:	b590      	push	{r4, r7, lr}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	0002      	movs	r2, r0
 8006674:	6039      	str	r1, [r7, #0]
 8006676:	1dfb      	adds	r3, r7, #7
 8006678:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800667a:	1dfb      	adds	r3, r7, #7
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006680:	d828      	bhi.n	80066d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006682:	4a2f      	ldr	r2, [pc, #188]	@ (8006740 <__NVIC_SetPriority+0xd4>)
 8006684:	1dfb      	adds	r3, r7, #7
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	b25b      	sxtb	r3, r3
 800668a:	089b      	lsrs	r3, r3, #2
 800668c:	33c0      	adds	r3, #192	@ 0xc0
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	589b      	ldr	r3, [r3, r2]
 8006692:	1dfa      	adds	r2, r7, #7
 8006694:	7812      	ldrb	r2, [r2, #0]
 8006696:	0011      	movs	r1, r2
 8006698:	2203      	movs	r2, #3
 800669a:	400a      	ands	r2, r1
 800669c:	00d2      	lsls	r2, r2, #3
 800669e:	21ff      	movs	r1, #255	@ 0xff
 80066a0:	4091      	lsls	r1, r2
 80066a2:	000a      	movs	r2, r1
 80066a4:	43d2      	mvns	r2, r2
 80066a6:	401a      	ands	r2, r3
 80066a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	019b      	lsls	r3, r3, #6
 80066ae:	22ff      	movs	r2, #255	@ 0xff
 80066b0:	401a      	ands	r2, r3
 80066b2:	1dfb      	adds	r3, r7, #7
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	0018      	movs	r0, r3
 80066b8:	2303      	movs	r3, #3
 80066ba:	4003      	ands	r3, r0
 80066bc:	00db      	lsls	r3, r3, #3
 80066be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80066c0:	481f      	ldr	r0, [pc, #124]	@ (8006740 <__NVIC_SetPriority+0xd4>)
 80066c2:	1dfb      	adds	r3, r7, #7
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	b25b      	sxtb	r3, r3
 80066c8:	089b      	lsrs	r3, r3, #2
 80066ca:	430a      	orrs	r2, r1
 80066cc:	33c0      	adds	r3, #192	@ 0xc0
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80066d2:	e031      	b.n	8006738 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80066d4:	4a1b      	ldr	r2, [pc, #108]	@ (8006744 <__NVIC_SetPriority+0xd8>)
 80066d6:	1dfb      	adds	r3, r7, #7
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	0019      	movs	r1, r3
 80066dc:	230f      	movs	r3, #15
 80066de:	400b      	ands	r3, r1
 80066e0:	3b08      	subs	r3, #8
 80066e2:	089b      	lsrs	r3, r3, #2
 80066e4:	3306      	adds	r3, #6
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	18d3      	adds	r3, r2, r3
 80066ea:	3304      	adds	r3, #4
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	1dfa      	adds	r2, r7, #7
 80066f0:	7812      	ldrb	r2, [r2, #0]
 80066f2:	0011      	movs	r1, r2
 80066f4:	2203      	movs	r2, #3
 80066f6:	400a      	ands	r2, r1
 80066f8:	00d2      	lsls	r2, r2, #3
 80066fa:	21ff      	movs	r1, #255	@ 0xff
 80066fc:	4091      	lsls	r1, r2
 80066fe:	000a      	movs	r2, r1
 8006700:	43d2      	mvns	r2, r2
 8006702:	401a      	ands	r2, r3
 8006704:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	019b      	lsls	r3, r3, #6
 800670a:	22ff      	movs	r2, #255	@ 0xff
 800670c:	401a      	ands	r2, r3
 800670e:	1dfb      	adds	r3, r7, #7
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	0018      	movs	r0, r3
 8006714:	2303      	movs	r3, #3
 8006716:	4003      	ands	r3, r0
 8006718:	00db      	lsls	r3, r3, #3
 800671a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800671c:	4809      	ldr	r0, [pc, #36]	@ (8006744 <__NVIC_SetPriority+0xd8>)
 800671e:	1dfb      	adds	r3, r7, #7
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	001c      	movs	r4, r3
 8006724:	230f      	movs	r3, #15
 8006726:	4023      	ands	r3, r4
 8006728:	3b08      	subs	r3, #8
 800672a:	089b      	lsrs	r3, r3, #2
 800672c:	430a      	orrs	r2, r1
 800672e:	3306      	adds	r3, #6
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	18c3      	adds	r3, r0, r3
 8006734:	3304      	adds	r3, #4
 8006736:	601a      	str	r2, [r3, #0]
}
 8006738:	46c0      	nop			@ (mov r8, r8)
 800673a:	46bd      	mov	sp, r7
 800673c:	b003      	add	sp, #12
 800673e:	bd90      	pop	{r4, r7, pc}
 8006740:	e000e100 	.word	0xe000e100
 8006744:	e000ed00 	.word	0xe000ed00

08006748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	1e5a      	subs	r2, r3, #1
 8006754:	2380      	movs	r3, #128	@ 0x80
 8006756:	045b      	lsls	r3, r3, #17
 8006758:	429a      	cmp	r2, r3
 800675a:	d301      	bcc.n	8006760 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800675c:	2301      	movs	r3, #1
 800675e:	e010      	b.n	8006782 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006760:	4b0a      	ldr	r3, [pc, #40]	@ (800678c <SysTick_Config+0x44>)
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	3a01      	subs	r2, #1
 8006766:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006768:	2301      	movs	r3, #1
 800676a:	425b      	negs	r3, r3
 800676c:	2103      	movs	r1, #3
 800676e:	0018      	movs	r0, r3
 8006770:	f7ff ff7c 	bl	800666c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006774:	4b05      	ldr	r3, [pc, #20]	@ (800678c <SysTick_Config+0x44>)
 8006776:	2200      	movs	r2, #0
 8006778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800677a:	4b04      	ldr	r3, [pc, #16]	@ (800678c <SysTick_Config+0x44>)
 800677c:	2207      	movs	r2, #7
 800677e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006780:	2300      	movs	r3, #0
}
 8006782:	0018      	movs	r0, r3
 8006784:	46bd      	mov	sp, r7
 8006786:	b002      	add	sp, #8
 8006788:	bd80      	pop	{r7, pc}
 800678a:	46c0      	nop			@ (mov r8, r8)
 800678c:	e000e010 	.word	0xe000e010

08006790 <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	60b9      	str	r1, [r7, #8]
 8006798:	607a      	str	r2, [r7, #4]
 800679a:	210f      	movs	r1, #15
 800679c:	187b      	adds	r3, r7, r1
 800679e:	1c02      	adds	r2, r0, #0
 80067a0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	187b      	adds	r3, r7, r1
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	b25b      	sxtb	r3, r3
 80067aa:	0011      	movs	r1, r2
 80067ac:	0018      	movs	r0, r3
 80067ae:	f7ff ff5d 	bl	800666c <__NVIC_SetPriority>
}
 80067b2:	46c0      	nop			@ (mov r8, r8)
 80067b4:	46bd      	mov	sp, r7
 80067b6:	b004      	add	sp, #16
 80067b8:	bd80      	pop	{r7, pc}

080067ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b082      	sub	sp, #8
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	0018      	movs	r0, r3
 80067c6:	f7ff ffbf 	bl	8006748 <SysTick_Config>
 80067ca:	0003      	movs	r3, r0
}
 80067cc:	0018      	movs	r0, r3
 80067ce:	46bd      	mov	sp, r7
 80067d0:	b002      	add	sp, #8
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b086      	sub	sp, #24
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80067de:	2300      	movs	r3, #0
 80067e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80067e2:	e153      	b.n	8006a8c <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2101      	movs	r1, #1
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	4091      	lsls	r1, r2
 80067ee:	000a      	movs	r2, r1
 80067f0:	4013      	ands	r3, r2
 80067f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d100      	bne.n	80067fc <HAL_GPIO_Init+0x28>
 80067fa:	e144      	b.n	8006a86 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	2203      	movs	r2, #3
 8006802:	4013      	ands	r3, r2
 8006804:	2b01      	cmp	r3, #1
 8006806:	d005      	beq.n	8006814 <HAL_GPIO_Init+0x40>
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	2203      	movs	r2, #3
 800680e:	4013      	ands	r3, r2
 8006810:	2b02      	cmp	r3, #2
 8006812:	d130      	bne.n	8006876 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	005b      	lsls	r3, r3, #1
 800681e:	2203      	movs	r2, #3
 8006820:	409a      	lsls	r2, r3
 8006822:	0013      	movs	r3, r2
 8006824:	43da      	mvns	r2, r3
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	4013      	ands	r3, r2
 800682a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	68da      	ldr	r2, [r3, #12]
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	005b      	lsls	r3, r3, #1
 8006834:	409a      	lsls	r2, r3
 8006836:	0013      	movs	r3, r2
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	4313      	orrs	r3, r2
 800683c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800684a:	2201      	movs	r2, #1
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	409a      	lsls	r2, r3
 8006850:	0013      	movs	r3, r2
 8006852:	43da      	mvns	r2, r3
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	4013      	ands	r3, r2
 8006858:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	091b      	lsrs	r3, r3, #4
 8006860:	2201      	movs	r2, #1
 8006862:	401a      	ands	r2, r3
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	409a      	lsls	r2, r3
 8006868:	0013      	movs	r3, r2
 800686a:	693a      	ldr	r2, [r7, #16]
 800686c:	4313      	orrs	r3, r2
 800686e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	2203      	movs	r2, #3
 800687c:	4013      	ands	r3, r2
 800687e:	2b03      	cmp	r3, #3
 8006880:	d017      	beq.n	80068b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	005b      	lsls	r3, r3, #1
 800688c:	2203      	movs	r2, #3
 800688e:	409a      	lsls	r2, r3
 8006890:	0013      	movs	r3, r2
 8006892:	43da      	mvns	r2, r3
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	4013      	ands	r3, r2
 8006898:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	689a      	ldr	r2, [r3, #8]
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	005b      	lsls	r3, r3, #1
 80068a2:	409a      	lsls	r2, r3
 80068a4:	0013      	movs	r3, r2
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	693a      	ldr	r2, [r7, #16]
 80068b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	2203      	movs	r2, #3
 80068b8:	4013      	ands	r3, r2
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d123      	bne.n	8006906 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	08da      	lsrs	r2, r3, #3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	3208      	adds	r2, #8
 80068c6:	0092      	lsls	r2, r2, #2
 80068c8:	58d3      	ldr	r3, [r2, r3]
 80068ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	2207      	movs	r2, #7
 80068d0:	4013      	ands	r3, r2
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	220f      	movs	r2, #15
 80068d6:	409a      	lsls	r2, r3
 80068d8:	0013      	movs	r3, r2
 80068da:	43da      	mvns	r2, r3
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	4013      	ands	r3, r2
 80068e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	691a      	ldr	r2, [r3, #16]
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	2107      	movs	r1, #7
 80068ea:	400b      	ands	r3, r1
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	409a      	lsls	r2, r3
 80068f0:	0013      	movs	r3, r2
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	08da      	lsrs	r2, r3, #3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	3208      	adds	r2, #8
 8006900:	0092      	lsls	r2, r2, #2
 8006902:	6939      	ldr	r1, [r7, #16]
 8006904:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	005b      	lsls	r3, r3, #1
 8006910:	2203      	movs	r2, #3
 8006912:	409a      	lsls	r2, r3
 8006914:	0013      	movs	r3, r2
 8006916:	43da      	mvns	r2, r3
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	4013      	ands	r3, r2
 800691c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	2203      	movs	r2, #3
 8006924:	401a      	ands	r2, r3
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	005b      	lsls	r3, r3, #1
 800692a:	409a      	lsls	r2, r3
 800692c:	0013      	movs	r3, r2
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	4313      	orrs	r3, r2
 8006932:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	23c0      	movs	r3, #192	@ 0xc0
 8006940:	029b      	lsls	r3, r3, #10
 8006942:	4013      	ands	r3, r2
 8006944:	d100      	bne.n	8006948 <HAL_GPIO_Init+0x174>
 8006946:	e09e      	b.n	8006a86 <HAL_GPIO_Init+0x2b2>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8006948:	4a56      	ldr	r2, [pc, #344]	@ (8006aa4 <HAL_GPIO_Init+0x2d0>)
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	089b      	lsrs	r3, r3, #2
 800694e:	3318      	adds	r3, #24
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	589b      	ldr	r3, [r3, r2]
 8006954:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	2203      	movs	r2, #3
 800695a:	4013      	ands	r3, r2
 800695c:	00db      	lsls	r3, r3, #3
 800695e:	220f      	movs	r2, #15
 8006960:	409a      	lsls	r2, r3
 8006962:	0013      	movs	r3, r2
 8006964:	43da      	mvns	r2, r3
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	4013      	ands	r3, r2
 800696a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	23a0      	movs	r3, #160	@ 0xa0
 8006970:	05db      	lsls	r3, r3, #23
 8006972:	429a      	cmp	r2, r3
 8006974:	d01f      	beq.n	80069b6 <HAL_GPIO_Init+0x1e2>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a4b      	ldr	r2, [pc, #300]	@ (8006aa8 <HAL_GPIO_Init+0x2d4>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d019      	beq.n	80069b2 <HAL_GPIO_Init+0x1de>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a4a      	ldr	r2, [pc, #296]	@ (8006aac <HAL_GPIO_Init+0x2d8>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d013      	beq.n	80069ae <HAL_GPIO_Init+0x1da>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a49      	ldr	r2, [pc, #292]	@ (8006ab0 <HAL_GPIO_Init+0x2dc>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d00d      	beq.n	80069aa <HAL_GPIO_Init+0x1d6>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a48      	ldr	r2, [pc, #288]	@ (8006ab4 <HAL_GPIO_Init+0x2e0>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d007      	beq.n	80069a6 <HAL_GPIO_Init+0x1d2>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a47      	ldr	r2, [pc, #284]	@ (8006ab8 <HAL_GPIO_Init+0x2e4>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d101      	bne.n	80069a2 <HAL_GPIO_Init+0x1ce>
 800699e:	2305      	movs	r3, #5
 80069a0:	e00a      	b.n	80069b8 <HAL_GPIO_Init+0x1e4>
 80069a2:	2306      	movs	r3, #6
 80069a4:	e008      	b.n	80069b8 <HAL_GPIO_Init+0x1e4>
 80069a6:	2304      	movs	r3, #4
 80069a8:	e006      	b.n	80069b8 <HAL_GPIO_Init+0x1e4>
 80069aa:	2303      	movs	r3, #3
 80069ac:	e004      	b.n	80069b8 <HAL_GPIO_Init+0x1e4>
 80069ae:	2302      	movs	r3, #2
 80069b0:	e002      	b.n	80069b8 <HAL_GPIO_Init+0x1e4>
 80069b2:	2301      	movs	r3, #1
 80069b4:	e000      	b.n	80069b8 <HAL_GPIO_Init+0x1e4>
 80069b6:	2300      	movs	r3, #0
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	2103      	movs	r1, #3
 80069bc:	400a      	ands	r2, r1
 80069be:	00d2      	lsls	r2, r2, #3
 80069c0:	4093      	lsls	r3, r2
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80069c8:	4936      	ldr	r1, [pc, #216]	@ (8006aa4 <HAL_GPIO_Init+0x2d0>)
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	089b      	lsrs	r3, r3, #2
 80069ce:	3318      	adds	r3, #24
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80069d6:	4b33      	ldr	r3, [pc, #204]	@ (8006aa4 <HAL_GPIO_Init+0x2d0>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	43da      	mvns	r2, r3
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	4013      	ands	r3, r2
 80069e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	685a      	ldr	r2, [r3, #4]
 80069ea:	2380      	movs	r3, #128	@ 0x80
 80069ec:	035b      	lsls	r3, r3, #13
 80069ee:	4013      	ands	r3, r2
 80069f0:	d003      	beq.n	80069fa <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80069fa:	4b2a      	ldr	r3, [pc, #168]	@ (8006aa4 <HAL_GPIO_Init+0x2d0>)
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8006a00:	4b28      	ldr	r3, [pc, #160]	@ (8006aa4 <HAL_GPIO_Init+0x2d0>)
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	43da      	mvns	r2, r3
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	685a      	ldr	r2, [r3, #4]
 8006a14:	2380      	movs	r3, #128	@ 0x80
 8006a16:	039b      	lsls	r3, r3, #14
 8006a18:	4013      	ands	r3, r2
 8006a1a:	d003      	beq.n	8006a24 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006a24:	4b1f      	ldr	r3, [pc, #124]	@ (8006aa4 <HAL_GPIO_Init+0x2d0>)
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006a2a:	4a1e      	ldr	r2, [pc, #120]	@ (8006aa4 <HAL_GPIO_Init+0x2d0>)
 8006a2c:	2384      	movs	r3, #132	@ 0x84
 8006a2e:	58d3      	ldr	r3, [r2, r3]
 8006a30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	43da      	mvns	r2, r3
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	4013      	ands	r3, r2
 8006a3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	685a      	ldr	r2, [r3, #4]
 8006a40:	2380      	movs	r3, #128	@ 0x80
 8006a42:	029b      	lsls	r3, r3, #10
 8006a44:	4013      	ands	r3, r2
 8006a46:	d003      	beq.n	8006a50 <HAL_GPIO_Init+0x27c>
        {
          temp |= iocurrent;
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006a50:	4914      	ldr	r1, [pc, #80]	@ (8006aa4 <HAL_GPIO_Init+0x2d0>)
 8006a52:	2284      	movs	r2, #132	@ 0x84
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8006a58:	4a12      	ldr	r2, [pc, #72]	@ (8006aa4 <HAL_GPIO_Init+0x2d0>)
 8006a5a:	2380      	movs	r3, #128	@ 0x80
 8006a5c:	58d3      	ldr	r3, [r2, r3]
 8006a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	43da      	mvns	r2, r3
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	4013      	ands	r3, r2
 8006a68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	685a      	ldr	r2, [r3, #4]
 8006a6e:	2380      	movs	r3, #128	@ 0x80
 8006a70:	025b      	lsls	r3, r3, #9
 8006a72:	4013      	ands	r3, r2
 8006a74:	d003      	beq.n	8006a7e <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006a7e:	4909      	ldr	r1, [pc, #36]	@ (8006aa4 <HAL_GPIO_Init+0x2d0>)
 8006a80:	2280      	movs	r2, #128	@ 0x80
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	40da      	lsrs	r2, r3
 8006a94:	1e13      	subs	r3, r2, #0
 8006a96:	d000      	beq.n	8006a9a <HAL_GPIO_Init+0x2c6>
 8006a98:	e6a4      	b.n	80067e4 <HAL_GPIO_Init+0x10>
  }
}
 8006a9a:	46c0      	nop			@ (mov r8, r8)
 8006a9c:	46c0      	nop			@ (mov r8, r8)
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	b006      	add	sp, #24
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	40021800 	.word	0x40021800
 8006aa8:	50000400 	.word	0x50000400
 8006aac:	50000800 	.word	0x50000800
 8006ab0:	50000c00 	.word	0x50000c00
 8006ab4:	50001000 	.word	0x50001000
 8006ab8:	50001400 	.word	0x50001400

08006abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	0008      	movs	r0, r1
 8006ac6:	0011      	movs	r1, r2
 8006ac8:	1cbb      	adds	r3, r7, #2
 8006aca:	1c02      	adds	r2, r0, #0
 8006acc:	801a      	strh	r2, [r3, #0]
 8006ace:	1c7b      	adds	r3, r7, #1
 8006ad0:	1c0a      	adds	r2, r1, #0
 8006ad2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006ad4:	1c7b      	adds	r3, r7, #1
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d004      	beq.n	8006ae6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006adc:	1cbb      	adds	r3, r7, #2
 8006ade:	881a      	ldrh	r2, [r3, #0]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006ae4:	e003      	b.n	8006aee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006ae6:	1cbb      	adds	r3, r7, #2
 8006ae8:	881a      	ldrh	r2, [r3, #0]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006aee:	46c0      	nop			@ (mov r8, r8)
 8006af0:	46bd      	mov	sp, r7
 8006af2:	b002      	add	sp, #8
 8006af4:	bd80      	pop	{r7, pc}
	...

08006af8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d101      	bne.n	8006b0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e08f      	b.n	8006c2a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2241      	movs	r2, #65	@ 0x41
 8006b0e:	5c9b      	ldrb	r3, [r3, r2]
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d107      	bne.n	8006b26 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2240      	movs	r2, #64	@ 0x40
 8006b1a:	2100      	movs	r1, #0
 8006b1c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	0018      	movs	r0, r3
 8006b22:	f7fc fe03 	bl	800372c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2241      	movs	r2, #65	@ 0x41
 8006b2a:	2124      	movs	r1, #36	@ 0x24
 8006b2c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2101      	movs	r1, #1
 8006b3a:	438a      	bics	r2, r1
 8006b3c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685a      	ldr	r2, [r3, #4]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	493b      	ldr	r1, [pc, #236]	@ (8006c34 <HAL_I2C_Init+0x13c>)
 8006b48:	400a      	ands	r2, r1
 8006b4a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	689a      	ldr	r2, [r3, #8]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4938      	ldr	r1, [pc, #224]	@ (8006c38 <HAL_I2C_Init+0x140>)
 8006b58:	400a      	ands	r2, r1
 8006b5a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d108      	bne.n	8006b76 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	689a      	ldr	r2, [r3, #8]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2180      	movs	r1, #128	@ 0x80
 8006b6e:	0209      	lsls	r1, r1, #8
 8006b70:	430a      	orrs	r2, r1
 8006b72:	609a      	str	r2, [r3, #8]
 8006b74:	e007      	b.n	8006b86 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	689a      	ldr	r2, [r3, #8]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2184      	movs	r1, #132	@ 0x84
 8006b80:	0209      	lsls	r1, r1, #8
 8006b82:	430a      	orrs	r2, r1
 8006b84:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d109      	bne.n	8006ba2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	685a      	ldr	r2, [r3, #4]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2180      	movs	r1, #128	@ 0x80
 8006b9a:	0109      	lsls	r1, r1, #4
 8006b9c:	430a      	orrs	r2, r1
 8006b9e:	605a      	str	r2, [r3, #4]
 8006ba0:	e007      	b.n	8006bb2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4923      	ldr	r1, [pc, #140]	@ (8006c3c <HAL_I2C_Init+0x144>)
 8006bae:	400a      	ands	r2, r1
 8006bb0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	685a      	ldr	r2, [r3, #4]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4920      	ldr	r1, [pc, #128]	@ (8006c40 <HAL_I2C_Init+0x148>)
 8006bbe:	430a      	orrs	r2, r1
 8006bc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68da      	ldr	r2, [r3, #12]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	491a      	ldr	r1, [pc, #104]	@ (8006c38 <HAL_I2C_Init+0x140>)
 8006bce:	400a      	ands	r2, r1
 8006bd0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	691a      	ldr	r2, [r3, #16]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	431a      	orrs	r2, r3
 8006bdc:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	430a      	orrs	r2, r1
 8006bea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	69d9      	ldr	r1, [r3, #28]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a1a      	ldr	r2, [r3, #32]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2101      	movs	r1, #1
 8006c08:	430a      	orrs	r2, r1
 8006c0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2241      	movs	r2, #65	@ 0x41
 8006c16:	2120      	movs	r1, #32
 8006c18:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2242      	movs	r2, #66	@ 0x42
 8006c24:	2100      	movs	r1, #0
 8006c26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	0018      	movs	r0, r3
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	b002      	add	sp, #8
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	46c0      	nop			@ (mov r8, r8)
 8006c34:	f0ffffff 	.word	0xf0ffffff
 8006c38:	ffff7fff 	.word	0xffff7fff
 8006c3c:	fffff7ff 	.word	0xfffff7ff
 8006c40:	02008000 	.word	0x02008000

08006c44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2241      	movs	r2, #65	@ 0x41
 8006c52:	5c9b      	ldrb	r3, [r3, r2]
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b20      	cmp	r3, #32
 8006c58:	d138      	bne.n	8006ccc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2240      	movs	r2, #64	@ 0x40
 8006c5e:	5c9b      	ldrb	r3, [r3, r2]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d101      	bne.n	8006c68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006c64:	2302      	movs	r3, #2
 8006c66:	e032      	b.n	8006cce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2240      	movs	r2, #64	@ 0x40
 8006c6c:	2101      	movs	r1, #1
 8006c6e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2241      	movs	r2, #65	@ 0x41
 8006c74:	2124      	movs	r1, #36	@ 0x24
 8006c76:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2101      	movs	r1, #1
 8006c84:	438a      	bics	r2, r1
 8006c86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4911      	ldr	r1, [pc, #68]	@ (8006cd8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006c94:	400a      	ands	r2, r1
 8006c96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	6819      	ldr	r1, [r3, #0]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	683a      	ldr	r2, [r7, #0]
 8006ca4:	430a      	orrs	r2, r1
 8006ca6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2241      	movs	r2, #65	@ 0x41
 8006cbc:	2120      	movs	r1, #32
 8006cbe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2240      	movs	r2, #64	@ 0x40
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	e000      	b.n	8006cce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006ccc:	2302      	movs	r3, #2
  }
}
 8006cce:	0018      	movs	r0, r3
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	b002      	add	sp, #8
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	46c0      	nop			@ (mov r8, r8)
 8006cd8:	ffffefff 	.word	0xffffefff

08006cdc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2241      	movs	r2, #65	@ 0x41
 8006cea:	5c9b      	ldrb	r3, [r3, r2]
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	2b20      	cmp	r3, #32
 8006cf0:	d139      	bne.n	8006d66 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2240      	movs	r2, #64	@ 0x40
 8006cf6:	5c9b      	ldrb	r3, [r3, r2]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d101      	bne.n	8006d00 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006cfc:	2302      	movs	r3, #2
 8006cfe:	e033      	b.n	8006d68 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2240      	movs	r2, #64	@ 0x40
 8006d04:	2101      	movs	r1, #1
 8006d06:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2241      	movs	r2, #65	@ 0x41
 8006d0c:	2124      	movs	r1, #36	@ 0x24
 8006d0e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2101      	movs	r1, #1
 8006d1c:	438a      	bics	r2, r1
 8006d1e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4a11      	ldr	r2, [pc, #68]	@ (8006d70 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	021b      	lsls	r3, r3, #8
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2101      	movs	r1, #1
 8006d4e:	430a      	orrs	r2, r1
 8006d50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2241      	movs	r2, #65	@ 0x41
 8006d56:	2120      	movs	r1, #32
 8006d58:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2240      	movs	r2, #64	@ 0x40
 8006d5e:	2100      	movs	r1, #0
 8006d60:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006d62:	2300      	movs	r3, #0
 8006d64:	e000      	b.n	8006d68 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006d66:	2302      	movs	r3, #2
  }
}
 8006d68:	0018      	movs	r0, r3
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	b004      	add	sp, #16
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	fffff0ff 	.word	0xfffff0ff

08006d74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	2380      	movs	r3, #128	@ 0x80
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d137      	bne.n	8006df6 <HAL_PWREx_ControlVoltageScaling+0x82>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006d86:	4b27      	ldr	r3, [pc, #156]	@ (8006e24 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	23c0      	movs	r3, #192	@ 0xc0
 8006d8c:	00db      	lsls	r3, r3, #3
 8006d8e:	401a      	ands	r2, r3
 8006d90:	2380      	movs	r3, #128	@ 0x80
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d040      	beq.n	8006e1a <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006d98:	4b22      	ldr	r3, [pc, #136]	@ (8006e24 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a22      	ldr	r2, [pc, #136]	@ (8006e28 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8006d9e:	401a      	ands	r2, r3
 8006da0:	4b20      	ldr	r3, [pc, #128]	@ (8006e24 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006da2:	2180      	movs	r1, #128	@ 0x80
 8006da4:	0089      	lsls	r1, r1, #2
 8006da6:	430a      	orrs	r2, r1
 8006da8:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006daa:	4b20      	ldr	r3, [pc, #128]	@ (8006e2c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2232      	movs	r2, #50	@ 0x32
 8006db0:	4353      	muls	r3, r2
 8006db2:	491f      	ldr	r1, [pc, #124]	@ (8006e30 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8006db4:	0018      	movs	r0, r3
 8006db6:	f7f9 f9c3 	bl	8000140 <__udivsi3>
 8006dba:	0003      	movs	r3, r0
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006dc0:	e002      	b.n	8006dc8 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        wait_loop_index--;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006dc8:	4b16      	ldr	r3, [pc, #88]	@ (8006e24 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006dca:	695a      	ldr	r2, [r3, #20]
 8006dcc:	2380      	movs	r3, #128	@ 0x80
 8006dce:	00db      	lsls	r3, r3, #3
 8006dd0:	401a      	ands	r2, r3
 8006dd2:	2380      	movs	r3, #128	@ 0x80
 8006dd4:	00db      	lsls	r3, r3, #3
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d102      	bne.n	8006de0 <HAL_PWREx_ControlVoltageScaling+0x6c>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1f0      	bne.n	8006dc2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006de0:	4b10      	ldr	r3, [pc, #64]	@ (8006e24 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006de2:	695a      	ldr	r2, [r3, #20]
 8006de4:	2380      	movs	r3, #128	@ 0x80
 8006de6:	00db      	lsls	r3, r3, #3
 8006de8:	401a      	ands	r2, r3
 8006dea:	2380      	movs	r3, #128	@ 0x80
 8006dec:	00db      	lsls	r3, r3, #3
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d113      	bne.n	8006e1a <HAL_PWREx_ControlVoltageScaling+0xa6>
      {
        return HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e012      	b.n	8006e1c <HAL_PWREx_ControlVoltageScaling+0xa8>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006df6:	4b0b      	ldr	r3, [pc, #44]	@ (8006e24 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	23c0      	movs	r3, #192	@ 0xc0
 8006dfc:	00db      	lsls	r3, r3, #3
 8006dfe:	401a      	ands	r2, r3
 8006e00:	2380      	movs	r3, #128	@ 0x80
 8006e02:	00db      	lsls	r3, r3, #3
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d008      	beq.n	8006e1a <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006e08:	4b06      	ldr	r3, [pc, #24]	@ (8006e24 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a06      	ldr	r2, [pc, #24]	@ (8006e28 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8006e0e:	401a      	ands	r2, r3
 8006e10:	4b04      	ldr	r3, [pc, #16]	@ (8006e24 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006e12:	2180      	movs	r1, #128	@ 0x80
 8006e14:	00c9      	lsls	r1, r1, #3
 8006e16:	430a      	orrs	r2, r1
 8006e18:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	0018      	movs	r0, r3
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	b004      	add	sp, #16
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	40007000 	.word	0x40007000
 8006e28:	fffff9ff 	.word	0xfffff9ff
 8006e2c:	20000004 	.word	0x20000004
 8006e30:	000f4240 	.word	0x000f4240

08006e34 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8006e38:	4b03      	ldr	r3, [pc, #12]	@ (8006e48 <HAL_PWREx_GetVoltageRange+0x14>)
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	23c0      	movs	r3, #192	@ 0xc0
 8006e3e:	00db      	lsls	r3, r3, #3
 8006e40:	4013      	ands	r3, r2
}
 8006e42:	0018      	movs	r0, r3
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	40007000 	.word	0x40007000

08006e4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e4c:	b5b0      	push	{r4, r5, r7, lr}
 8006e4e:	b088      	sub	sp, #32
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e54:	4bc9      	ldr	r3, [pc, #804]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	2238      	movs	r2, #56	@ 0x38
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e5e:	4bc7      	ldr	r3, [pc, #796]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	2203      	movs	r2, #3
 8006e64:	4013      	ands	r3, r2
 8006e66:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2210      	movs	r2, #16
 8006e6e:	4013      	ands	r3, r2
 8006e70:	d100      	bne.n	8006e74 <HAL_RCC_OscConfig+0x28>
 8006e72:	e0ef      	b.n	8007054 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d007      	beq.n	8006e8a <HAL_RCC_OscConfig+0x3e>
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	2b18      	cmp	r3, #24
 8006e7e:	d000      	beq.n	8006e82 <HAL_RCC_OscConfig+0x36>
 8006e80:	e093      	b.n	8006faa <HAL_RCC_OscConfig+0x15e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d000      	beq.n	8006e8a <HAL_RCC_OscConfig+0x3e>
 8006e88:	e08f      	b.n	8006faa <HAL_RCC_OscConfig+0x15e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006e8a:	4bbc      	ldr	r3, [pc, #752]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2202      	movs	r2, #2
 8006e90:	4013      	ands	r3, r2
 8006e92:	d006      	beq.n	8006ea2 <HAL_RCC_OscConfig+0x56>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	69db      	ldr	r3, [r3, #28]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d102      	bne.n	8006ea2 <HAL_RCC_OscConfig+0x56>
      {
        return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	f000 fbf2 	bl	8007686 <HAL_RCC_OscConfig+0x83a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ea6:	4bb5      	ldr	r3, [pc, #724]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2108      	movs	r1, #8
 8006eac:	400b      	ands	r3, r1
 8006eae:	d004      	beq.n	8006eba <HAL_RCC_OscConfig+0x6e>
 8006eb0:	4bb2      	ldr	r3, [pc, #712]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	21f0      	movs	r1, #240	@ 0xf0
 8006eb6:	400b      	ands	r3, r1
 8006eb8:	e005      	b.n	8006ec6 <HAL_RCC_OscConfig+0x7a>
 8006eba:	49b0      	ldr	r1, [pc, #704]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 8006ebc:	2394      	movs	r3, #148	@ 0x94
 8006ebe:	58cb      	ldr	r3, [r1, r3]
 8006ec0:	091b      	lsrs	r3, r3, #4
 8006ec2:	21f0      	movs	r1, #240	@ 0xf0
 8006ec4:	400b      	ands	r3, r1
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d225      	bcs.n	8006f16 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ece:	0018      	movs	r0, r3
 8006ed0:	f000 fd90 	bl	80079f4 <RCC_SetFlashLatencyFromMSIRange>
 8006ed4:	1e03      	subs	r3, r0, #0
 8006ed6:	d002      	beq.n	8006ede <HAL_RCC_OscConfig+0x92>
          {
            return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	f000 fbd4 	bl	8007686 <HAL_RCC_OscConfig+0x83a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006ede:	4ba7      	ldr	r3, [pc, #668]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	4ba6      	ldr	r3, [pc, #664]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 8006ee4:	2108      	movs	r1, #8
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	601a      	str	r2, [r3, #0]
 8006eea:	4ba4      	ldr	r3, [pc, #656]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	22f0      	movs	r2, #240	@ 0xf0
 8006ef0:	4393      	bics	r3, r2
 8006ef2:	0019      	movs	r1, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ef8:	4ba0      	ldr	r3, [pc, #640]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 8006efa:	430a      	orrs	r2, r1
 8006efc:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006efe:	4b9f      	ldr	r3, [pc, #636]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	4a9f      	ldr	r2, [pc, #636]	@ (8007180 <HAL_RCC_OscConfig+0x334>)
 8006f04:	4013      	ands	r3, r2
 8006f06:	0019      	movs	r1, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a1b      	ldr	r3, [r3, #32]
 8006f0c:	021a      	lsls	r2, r3, #8
 8006f0e:	4b9b      	ldr	r3, [pc, #620]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 8006f10:	430a      	orrs	r2, r1
 8006f12:	605a      	str	r2, [r3, #4]
 8006f14:	e027      	b.n	8006f66 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f16:	4b99      	ldr	r3, [pc, #612]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	4b98      	ldr	r3, [pc, #608]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 8006f1c:	2108      	movs	r1, #8
 8006f1e:	430a      	orrs	r2, r1
 8006f20:	601a      	str	r2, [r3, #0]
 8006f22:	4b96      	ldr	r3, [pc, #600]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	22f0      	movs	r2, #240	@ 0xf0
 8006f28:	4393      	bics	r3, r2
 8006f2a:	0019      	movs	r1, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f30:	4b92      	ldr	r3, [pc, #584]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 8006f32:	430a      	orrs	r2, r1
 8006f34:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f36:	4b91      	ldr	r3, [pc, #580]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	4a91      	ldr	r2, [pc, #580]	@ (8007180 <HAL_RCC_OscConfig+0x334>)
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	0019      	movs	r1, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a1b      	ldr	r3, [r3, #32]
 8006f44:	021a      	lsls	r2, r3, #8
 8006f46:	4b8d      	ldr	r3, [pc, #564]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 8006f48:	430a      	orrs	r2, r1
 8006f4a:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d109      	bne.n	8006f66 <HAL_RCC_OscConfig+0x11a>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f56:	0018      	movs	r0, r3
 8006f58:	f000 fd4c 	bl	80079f4 <RCC_SetFlashLatencyFromMSIRange>
 8006f5c:	1e03      	subs	r3, r0, #0
 8006f5e:	d002      	beq.n	8006f66 <HAL_RCC_OscConfig+0x11a>
            {
              return HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	f000 fb90 	bl	8007686 <HAL_RCC_OscConfig+0x83a>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8006f66:	f000 fc87 	bl	8007878 <HAL_RCC_GetSysClockFreq>
 8006f6a:	0001      	movs	r1, r0
 8006f6c:	4b83      	ldr	r3, [pc, #524]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 8006f6e:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006f70:	0a1b      	lsrs	r3, r3, #8
 8006f72:	220f      	movs	r2, #15
 8006f74:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8006f76:	4a83      	ldr	r2, [pc, #524]	@ (8007184 <HAL_RCC_OscConfig+0x338>)
 8006f78:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006f7a:	001a      	movs	r2, r3
 8006f7c:	231f      	movs	r3, #31
 8006f7e:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8006f80:	000a      	movs	r2, r1
 8006f82:	40da      	lsrs	r2, r3
 8006f84:	4b80      	ldr	r3, [pc, #512]	@ (8007188 <HAL_RCC_OscConfig+0x33c>)
 8006f86:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006f88:	4b80      	ldr	r3, [pc, #512]	@ (800718c <HAL_RCC_OscConfig+0x340>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	250f      	movs	r5, #15
 8006f8e:	197c      	adds	r4, r7, r5
 8006f90:	0018      	movs	r0, r3
 8006f92:	f7fe fed3 	bl	8005d3c <HAL_InitTick>
 8006f96:	0003      	movs	r3, r0
 8006f98:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 8006f9a:	197b      	adds	r3, r7, r5
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d057      	beq.n	8007052 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8006fa2:	197b      	adds	r3, r7, r5
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	f000 fb6e 	bl	8007686 <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d035      	beq.n	800701e <HAL_RCC_OscConfig+0x1d2>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006fb2:	4b72      	ldr	r3, [pc, #456]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	4b71      	ldr	r3, [pc, #452]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 8006fb8:	2101      	movs	r1, #1
 8006fba:	430a      	orrs	r2, r1
 8006fbc:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006fbe:	f7fe ff17 	bl	8005df0 <HAL_GetTick>
 8006fc2:	0003      	movs	r3, r0
 8006fc4:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006fc6:	e009      	b.n	8006fdc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8006fc8:	f7fe ff12 	bl	8005df0 <HAL_GetTick>
 8006fcc:	0002      	movs	r2, r0
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	d902      	bls.n	8006fdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	f000 fb55 	bl	8007686 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006fdc:	4b67      	ldr	r3, [pc, #412]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2202      	movs	r2, #2
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	d0f0      	beq.n	8006fc8 <HAL_RCC_OscConfig+0x17c>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006fe6:	4b65      	ldr	r3, [pc, #404]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	4b64      	ldr	r3, [pc, #400]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 8006fec:	2108      	movs	r1, #8
 8006fee:	430a      	orrs	r2, r1
 8006ff0:	601a      	str	r2, [r3, #0]
 8006ff2:	4b62      	ldr	r3, [pc, #392]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	22f0      	movs	r2, #240	@ 0xf0
 8006ff8:	4393      	bics	r3, r2
 8006ffa:	0019      	movs	r1, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007000:	4b5e      	ldr	r3, [pc, #376]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 8007002:	430a      	orrs	r2, r1
 8007004:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007006:	4b5d      	ldr	r3, [pc, #372]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	4a5d      	ldr	r2, [pc, #372]	@ (8007180 <HAL_RCC_OscConfig+0x334>)
 800700c:	4013      	ands	r3, r2
 800700e:	0019      	movs	r1, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a1b      	ldr	r3, [r3, #32]
 8007014:	021a      	lsls	r2, r3, #8
 8007016:	4b59      	ldr	r3, [pc, #356]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 8007018:	430a      	orrs	r2, r1
 800701a:	605a      	str	r2, [r3, #4]
 800701c:	e01a      	b.n	8007054 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800701e:	4b57      	ldr	r3, [pc, #348]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	4b56      	ldr	r3, [pc, #344]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 8007024:	2101      	movs	r1, #1
 8007026:	438a      	bics	r2, r1
 8007028:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800702a:	f7fe fee1 	bl	8005df0 <HAL_GetTick>
 800702e:	0003      	movs	r3, r0
 8007030:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007032:	e008      	b.n	8007046 <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8007034:	f7fe fedc 	bl	8005df0 <HAL_GetTick>
 8007038:	0002      	movs	r2, r0
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	2b02      	cmp	r3, #2
 8007040:	d901      	bls.n	8007046 <HAL_RCC_OscConfig+0x1fa>
          {
            return HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	e31f      	b.n	8007686 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007046:	4b4d      	ldr	r3, [pc, #308]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2202      	movs	r2, #2
 800704c:	4013      	ands	r3, r2
 800704e:	d1f1      	bne.n	8007034 <HAL_RCC_OscConfig+0x1e8>
 8007050:	e000      	b.n	8007054 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007052:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2201      	movs	r2, #1
 800705a:	4013      	ands	r3, r2
 800705c:	d100      	bne.n	8007060 <HAL_RCC_OscConfig+0x214>
 800705e:	e065      	b.n	800712c <HAL_RCC_OscConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	2b10      	cmp	r3, #16
 8007064:	d005      	beq.n	8007072 <HAL_RCC_OscConfig+0x226>
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	2b18      	cmp	r3, #24
 800706a:	d10e      	bne.n	800708a <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	2b03      	cmp	r3, #3
 8007070:	d10b      	bne.n	800708a <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007072:	4b42      	ldr	r3, [pc, #264]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	2380      	movs	r3, #128	@ 0x80
 8007078:	029b      	lsls	r3, r3, #10
 800707a:	4013      	ands	r3, r2
 800707c:	d055      	beq.n	800712a <HAL_RCC_OscConfig+0x2de>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d151      	bne.n	800712a <HAL_RCC_OscConfig+0x2de>
      {
        return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e2fd      	b.n	8007686 <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685a      	ldr	r2, [r3, #4]
 800708e:	2380      	movs	r3, #128	@ 0x80
 8007090:	025b      	lsls	r3, r3, #9
 8007092:	429a      	cmp	r2, r3
 8007094:	d107      	bne.n	80070a6 <HAL_RCC_OscConfig+0x25a>
 8007096:	4b39      	ldr	r3, [pc, #228]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	4b38      	ldr	r3, [pc, #224]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 800709c:	2180      	movs	r1, #128	@ 0x80
 800709e:	0249      	lsls	r1, r1, #9
 80070a0:	430a      	orrs	r2, r1
 80070a2:	601a      	str	r2, [r3, #0]
 80070a4:	e013      	b.n	80070ce <HAL_RCC_OscConfig+0x282>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685a      	ldr	r2, [r3, #4]
 80070aa:	23a0      	movs	r3, #160	@ 0xa0
 80070ac:	02db      	lsls	r3, r3, #11
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d107      	bne.n	80070c2 <HAL_RCC_OscConfig+0x276>
 80070b2:	4b32      	ldr	r3, [pc, #200]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	4b31      	ldr	r3, [pc, #196]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 80070b8:	21a0      	movs	r1, #160	@ 0xa0
 80070ba:	02c9      	lsls	r1, r1, #11
 80070bc:	430a      	orrs	r2, r1
 80070be:	601a      	str	r2, [r3, #0]
 80070c0:	e005      	b.n	80070ce <HAL_RCC_OscConfig+0x282>
 80070c2:	4b2e      	ldr	r3, [pc, #184]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	4b2d      	ldr	r3, [pc, #180]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 80070c8:	4931      	ldr	r1, [pc, #196]	@ (8007190 <HAL_RCC_OscConfig+0x344>)
 80070ca:	400a      	ands	r2, r1
 80070cc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d014      	beq.n	8007100 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070d6:	f7fe fe8b 	bl	8005df0 <HAL_GetTick>
 80070da:	0003      	movs	r3, r0
 80070dc:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070de:	e008      	b.n	80070f2 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80070e0:	f7fe fe86 	bl	8005df0 <HAL_GetTick>
 80070e4:	0002      	movs	r2, r0
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	2b64      	cmp	r3, #100	@ 0x64
 80070ec:	d901      	bls.n	80070f2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	e2c9      	b.n	8007686 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070f2:	4b22      	ldr	r3, [pc, #136]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	2380      	movs	r3, #128	@ 0x80
 80070f8:	029b      	lsls	r3, r3, #10
 80070fa:	4013      	ands	r3, r2
 80070fc:	d0f0      	beq.n	80070e0 <HAL_RCC_OscConfig+0x294>
 80070fe:	e015      	b.n	800712c <HAL_RCC_OscConfig+0x2e0>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007100:	f7fe fe76 	bl	8005df0 <HAL_GetTick>
 8007104:	0003      	movs	r3, r0
 8007106:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007108:	e008      	b.n	800711c <HAL_RCC_OscConfig+0x2d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800710a:	f7fe fe71 	bl	8005df0 <HAL_GetTick>
 800710e:	0002      	movs	r2, r0
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	2b64      	cmp	r3, #100	@ 0x64
 8007116:	d901      	bls.n	800711c <HAL_RCC_OscConfig+0x2d0>
          {
            return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e2b4      	b.n	8007686 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800711c:	4b17      	ldr	r3, [pc, #92]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	2380      	movs	r3, #128	@ 0x80
 8007122:	029b      	lsls	r3, r3, #10
 8007124:	4013      	ands	r3, r2
 8007126:	d1f0      	bne.n	800710a <HAL_RCC_OscConfig+0x2be>
 8007128:	e000      	b.n	800712c <HAL_RCC_OscConfig+0x2e0>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800712a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2202      	movs	r2, #2
 8007132:	4013      	ands	r3, r2
 8007134:	d100      	bne.n	8007138 <HAL_RCC_OscConfig+0x2ec>
 8007136:	e074      	b.n	8007222 <HAL_RCC_OscConfig+0x3d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	2b08      	cmp	r3, #8
 800713c:	d005      	beq.n	800714a <HAL_RCC_OscConfig+0x2fe>
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	2b18      	cmp	r3, #24
 8007142:	d129      	bne.n	8007198 <HAL_RCC_OscConfig+0x34c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	2b02      	cmp	r3, #2
 8007148:	d126      	bne.n	8007198 <HAL_RCC_OscConfig+0x34c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800714a:	4b0c      	ldr	r3, [pc, #48]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	2380      	movs	r3, #128	@ 0x80
 8007150:	00db      	lsls	r3, r3, #3
 8007152:	4013      	ands	r3, r2
 8007154:	d005      	beq.n	8007162 <HAL_RCC_OscConfig+0x316>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d101      	bne.n	8007162 <HAL_RCC_OscConfig+0x316>
      {
        return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e291      	b.n	8007686 <HAL_RCC_OscConfig+0x83a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007162:	4b06      	ldr	r3, [pc, #24]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	4a0b      	ldr	r2, [pc, #44]	@ (8007194 <HAL_RCC_OscConfig+0x348>)
 8007168:	4013      	ands	r3, r2
 800716a:	0019      	movs	r1, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	061a      	lsls	r2, r3, #24
 8007172:	4b02      	ldr	r3, [pc, #8]	@ (800717c <HAL_RCC_OscConfig+0x330>)
 8007174:	430a      	orrs	r2, r1
 8007176:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007178:	e053      	b.n	8007222 <HAL_RCC_OscConfig+0x3d6>
 800717a:	46c0      	nop			@ (mov r8, r8)
 800717c:	40021000 	.word	0x40021000
 8007180:	ffff00ff 	.word	0xffff00ff
 8007184:	08010028 	.word	0x08010028
 8007188:	20000004 	.word	0x20000004
 800718c:	20000008 	.word	0x20000008
 8007190:	fffaffff 	.word	0xfffaffff
 8007194:	80ffffff 	.word	0x80ffffff
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d026      	beq.n	80071ee <HAL_RCC_OscConfig+0x3a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071a0:	4bc7      	ldr	r3, [pc, #796]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	4bc6      	ldr	r3, [pc, #792]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 80071a6:	2180      	movs	r1, #128	@ 0x80
 80071a8:	0049      	lsls	r1, r1, #1
 80071aa:	430a      	orrs	r2, r1
 80071ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ae:	f7fe fe1f 	bl	8005df0 <HAL_GetTick>
 80071b2:	0003      	movs	r3, r0
 80071b4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071b6:	e008      	b.n	80071ca <HAL_RCC_OscConfig+0x37e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80071b8:	f7fe fe1a 	bl	8005df0 <HAL_GetTick>
 80071bc:	0002      	movs	r2, r0
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d901      	bls.n	80071ca <HAL_RCC_OscConfig+0x37e>
          {
            return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e25d      	b.n	8007686 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071ca:	4bbd      	ldr	r3, [pc, #756]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	2380      	movs	r3, #128	@ 0x80
 80071d0:	00db      	lsls	r3, r3, #3
 80071d2:	4013      	ands	r3, r2
 80071d4:	d0f0      	beq.n	80071b8 <HAL_RCC_OscConfig+0x36c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071d6:	4bba      	ldr	r3, [pc, #744]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	4aba      	ldr	r2, [pc, #744]	@ (80074c4 <HAL_RCC_OscConfig+0x678>)
 80071dc:	4013      	ands	r3, r2
 80071de:	0019      	movs	r1, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	061a      	lsls	r2, r3, #24
 80071e6:	4bb6      	ldr	r3, [pc, #728]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 80071e8:	430a      	orrs	r2, r1
 80071ea:	605a      	str	r2, [r3, #4]
 80071ec:	e019      	b.n	8007222 <HAL_RCC_OscConfig+0x3d6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071ee:	4bb4      	ldr	r3, [pc, #720]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	4bb3      	ldr	r3, [pc, #716]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 80071f4:	49b4      	ldr	r1, [pc, #720]	@ (80074c8 <HAL_RCC_OscConfig+0x67c>)
 80071f6:	400a      	ands	r2, r1
 80071f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071fa:	f7fe fdf9 	bl	8005df0 <HAL_GetTick>
 80071fe:	0003      	movs	r3, r0
 8007200:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007202:	e008      	b.n	8007216 <HAL_RCC_OscConfig+0x3ca>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8007204:	f7fe fdf4 	bl	8005df0 <HAL_GetTick>
 8007208:	0002      	movs	r2, r0
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	2b02      	cmp	r3, #2
 8007210:	d901      	bls.n	8007216 <HAL_RCC_OscConfig+0x3ca>
          {
            return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e237      	b.n	8007686 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007216:	4baa      	ldr	r3, [pc, #680]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	2380      	movs	r3, #128	@ 0x80
 800721c:	00db      	lsls	r3, r3, #3
 800721e:	4013      	ands	r3, r2
 8007220:	d1f0      	bne.n	8007204 <HAL_RCC_OscConfig+0x3b8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2208      	movs	r2, #8
 8007228:	4013      	ands	r3, r2
 800722a:	d051      	beq.n	80072d0 <HAL_RCC_OscConfig+0x484>
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	695b      	ldr	r3, [r3, #20]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d031      	beq.n	8007298 <HAL_RCC_OscConfig+0x44c>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	699b      	ldr	r3, [r3, #24]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d108      	bne.n	800724e <HAL_RCC_OscConfig+0x402>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 800723c:	4aa0      	ldr	r2, [pc, #640]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 800723e:	2394      	movs	r3, #148	@ 0x94
 8007240:	58d3      	ldr	r3, [r2, r3]
 8007242:	499f      	ldr	r1, [pc, #636]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 8007244:	2204      	movs	r2, #4
 8007246:	4393      	bics	r3, r2
 8007248:	2294      	movs	r2, #148	@ 0x94
 800724a:	508b      	str	r3, [r1, r2]
 800724c:	e007      	b.n	800725e <HAL_RCC_OscConfig+0x412>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 800724e:	4a9c      	ldr	r2, [pc, #624]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 8007250:	2394      	movs	r3, #148	@ 0x94
 8007252:	58d3      	ldr	r3, [r2, r3]
 8007254:	499a      	ldr	r1, [pc, #616]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 8007256:	2204      	movs	r2, #4
 8007258:	4313      	orrs	r3, r2
 800725a:	2294      	movs	r2, #148	@ 0x94
 800725c:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800725e:	4a98      	ldr	r2, [pc, #608]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 8007260:	2394      	movs	r3, #148	@ 0x94
 8007262:	58d3      	ldr	r3, [r2, r3]
 8007264:	4996      	ldr	r1, [pc, #600]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 8007266:	2201      	movs	r2, #1
 8007268:	4313      	orrs	r3, r2
 800726a:	2294      	movs	r2, #148	@ 0x94
 800726c:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800726e:	f7fe fdbf 	bl	8005df0 <HAL_GetTick>
 8007272:	0003      	movs	r3, r0
 8007274:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007276:	e008      	b.n	800728a <HAL_RCC_OscConfig+0x43e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007278:	f7fe fdba 	bl	8005df0 <HAL_GetTick>
 800727c:	0002      	movs	r2, r0
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	2b11      	cmp	r3, #17
 8007284:	d901      	bls.n	800728a <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e1fd      	b.n	8007686 <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800728a:	4a8d      	ldr	r2, [pc, #564]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 800728c:	2394      	movs	r3, #148	@ 0x94
 800728e:	58d3      	ldr	r3, [r2, r3]
 8007290:	2202      	movs	r2, #2
 8007292:	4013      	ands	r3, r2
 8007294:	d0f0      	beq.n	8007278 <HAL_RCC_OscConfig+0x42c>
 8007296:	e01b      	b.n	80072d0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007298:	4a89      	ldr	r2, [pc, #548]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 800729a:	2394      	movs	r3, #148	@ 0x94
 800729c:	58d3      	ldr	r3, [r2, r3]
 800729e:	4988      	ldr	r1, [pc, #544]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 80072a0:	2201      	movs	r2, #1
 80072a2:	4393      	bics	r3, r2
 80072a4:	2294      	movs	r2, #148	@ 0x94
 80072a6:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072a8:	f7fe fda2 	bl	8005df0 <HAL_GetTick>
 80072ac:	0003      	movs	r3, r0
 80072ae:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80072b0:	e008      	b.n	80072c4 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072b2:	f7fe fd9d 	bl	8005df0 <HAL_GetTick>
 80072b6:	0002      	movs	r2, r0
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	2b11      	cmp	r3, #17
 80072be:	d901      	bls.n	80072c4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e1e0      	b.n	8007686 <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80072c4:	4a7e      	ldr	r2, [pc, #504]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 80072c6:	2394      	movs	r3, #148	@ 0x94
 80072c8:	58d3      	ldr	r3, [r2, r3]
 80072ca:	2202      	movs	r2, #2
 80072cc:	4013      	ands	r3, r2
 80072ce:	d1f0      	bne.n	80072b2 <HAL_RCC_OscConfig+0x466>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2204      	movs	r2, #4
 80072d6:	4013      	ands	r3, r2
 80072d8:	d100      	bne.n	80072dc <HAL_RCC_OscConfig+0x490>
 80072da:	e10d      	b.n	80074f8 <HAL_RCC_OscConfig+0x6ac>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072dc:	201f      	movs	r0, #31
 80072de:	183b      	adds	r3, r7, r0
 80072e0:	2200      	movs	r2, #0
 80072e2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 80072e4:	4b76      	ldr	r3, [pc, #472]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 80072e6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80072e8:	2380      	movs	r3, #128	@ 0x80
 80072ea:	055b      	lsls	r3, r3, #21
 80072ec:	4013      	ands	r3, r2
 80072ee:	d110      	bne.n	8007312 <HAL_RCC_OscConfig+0x4c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072f0:	4b73      	ldr	r3, [pc, #460]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 80072f2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80072f4:	4b72      	ldr	r3, [pc, #456]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 80072f6:	2180      	movs	r1, #128	@ 0x80
 80072f8:	0549      	lsls	r1, r1, #21
 80072fa:	430a      	orrs	r2, r1
 80072fc:	659a      	str	r2, [r3, #88]	@ 0x58
 80072fe:	4b70      	ldr	r3, [pc, #448]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 8007300:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007302:	2380      	movs	r3, #128	@ 0x80
 8007304:	055b      	lsls	r3, r3, #21
 8007306:	4013      	ands	r3, r2
 8007308:	60bb      	str	r3, [r7, #8]
 800730a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800730c:	183b      	adds	r3, r7, r0
 800730e:	2201      	movs	r2, #1
 8007310:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007312:	4b6e      	ldr	r3, [pc, #440]	@ (80074cc <HAL_RCC_OscConfig+0x680>)
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	2380      	movs	r3, #128	@ 0x80
 8007318:	005b      	lsls	r3, r3, #1
 800731a:	4013      	ands	r3, r2
 800731c:	d11a      	bne.n	8007354 <HAL_RCC_OscConfig+0x508>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800731e:	4b6b      	ldr	r3, [pc, #428]	@ (80074cc <HAL_RCC_OscConfig+0x680>)
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	4b6a      	ldr	r3, [pc, #424]	@ (80074cc <HAL_RCC_OscConfig+0x680>)
 8007324:	2180      	movs	r1, #128	@ 0x80
 8007326:	0049      	lsls	r1, r1, #1
 8007328:	430a      	orrs	r2, r1
 800732a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800732c:	f7fe fd60 	bl	8005df0 <HAL_GetTick>
 8007330:	0003      	movs	r3, r0
 8007332:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007334:	e008      	b.n	8007348 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007336:	f7fe fd5b 	bl	8005df0 <HAL_GetTick>
 800733a:	0002      	movs	r2, r0
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	2b02      	cmp	r3, #2
 8007342:	d901      	bls.n	8007348 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8007344:	2303      	movs	r3, #3
 8007346:	e19e      	b.n	8007686 <HAL_RCC_OscConfig+0x83a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007348:	4b60      	ldr	r3, [pc, #384]	@ (80074cc <HAL_RCC_OscConfig+0x680>)
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	2380      	movs	r3, #128	@ 0x80
 800734e:	005b      	lsls	r3, r3, #1
 8007350:	4013      	ands	r3, r2
 8007352:	d0f0      	beq.n	8007336 <HAL_RCC_OscConfig+0x4ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	2201      	movs	r2, #1
 800735a:	4013      	ands	r3, r2
 800735c:	d01e      	beq.n	800739c <HAL_RCC_OscConfig+0x550>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	2204      	movs	r2, #4
 8007364:	4013      	ands	r3, r2
 8007366:	d010      	beq.n	800738a <HAL_RCC_OscConfig+0x53e>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007368:	4a55      	ldr	r2, [pc, #340]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 800736a:	2390      	movs	r3, #144	@ 0x90
 800736c:	58d3      	ldr	r3, [r2, r3]
 800736e:	4954      	ldr	r1, [pc, #336]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 8007370:	2204      	movs	r2, #4
 8007372:	4313      	orrs	r3, r2
 8007374:	2290      	movs	r2, #144	@ 0x90
 8007376:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007378:	4a51      	ldr	r2, [pc, #324]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 800737a:	2390      	movs	r3, #144	@ 0x90
 800737c:	58d3      	ldr	r3, [r2, r3]
 800737e:	4950      	ldr	r1, [pc, #320]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 8007380:	2201      	movs	r2, #1
 8007382:	4313      	orrs	r3, r2
 8007384:	2290      	movs	r2, #144	@ 0x90
 8007386:	508b      	str	r3, [r1, r2]
 8007388:	e018      	b.n	80073bc <HAL_RCC_OscConfig+0x570>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800738a:	4a4d      	ldr	r2, [pc, #308]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 800738c:	2390      	movs	r3, #144	@ 0x90
 800738e:	58d3      	ldr	r3, [r2, r3]
 8007390:	494b      	ldr	r1, [pc, #300]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 8007392:	2201      	movs	r2, #1
 8007394:	4313      	orrs	r3, r2
 8007396:	2290      	movs	r2, #144	@ 0x90
 8007398:	508b      	str	r3, [r1, r2]
 800739a:	e00f      	b.n	80073bc <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800739c:	4a48      	ldr	r2, [pc, #288]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 800739e:	2390      	movs	r3, #144	@ 0x90
 80073a0:	58d3      	ldr	r3, [r2, r3]
 80073a2:	4947      	ldr	r1, [pc, #284]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 80073a4:	2201      	movs	r2, #1
 80073a6:	4393      	bics	r3, r2
 80073a8:	2290      	movs	r2, #144	@ 0x90
 80073aa:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80073ac:	4a44      	ldr	r2, [pc, #272]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 80073ae:	2390      	movs	r3, #144	@ 0x90
 80073b0:	58d3      	ldr	r3, [r2, r3]
 80073b2:	4943      	ldr	r1, [pc, #268]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 80073b4:	2204      	movs	r2, #4
 80073b6:	4393      	bics	r3, r2
 80073b8:	2290      	movs	r2, #144	@ 0x90
 80073ba:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d04f      	beq.n	8007464 <HAL_RCC_OscConfig+0x618>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073c4:	f7fe fd14 	bl	8005df0 <HAL_GetTick>
 80073c8:	0003      	movs	r3, r0
 80073ca:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073cc:	e009      	b.n	80073e2 <HAL_RCC_OscConfig+0x596>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073ce:	f7fe fd0f 	bl	8005df0 <HAL_GetTick>
 80073d2:	0002      	movs	r2, r0
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	4a3d      	ldr	r2, [pc, #244]	@ (80074d0 <HAL_RCC_OscConfig+0x684>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d901      	bls.n	80073e2 <HAL_RCC_OscConfig+0x596>
        {
          return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e151      	b.n	8007686 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073e2:	4a37      	ldr	r2, [pc, #220]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 80073e4:	2390      	movs	r3, #144	@ 0x90
 80073e6:	58d3      	ldr	r3, [r2, r3]
 80073e8:	2202      	movs	r2, #2
 80073ea:	4013      	ands	r3, r2
 80073ec:	d0ef      	beq.n	80073ce <HAL_RCC_OscConfig+0x582>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	2280      	movs	r2, #128	@ 0x80
 80073f4:	4013      	ands	r3, r2
 80073f6:	d01a      	beq.n	800742e <HAL_RCC_OscConfig+0x5e2>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80073f8:	4a31      	ldr	r2, [pc, #196]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 80073fa:	2390      	movs	r3, #144	@ 0x90
 80073fc:	58d3      	ldr	r3, [r2, r3]
 80073fe:	4930      	ldr	r1, [pc, #192]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 8007400:	2280      	movs	r2, #128	@ 0x80
 8007402:	4313      	orrs	r3, r2
 8007404:	2290      	movs	r2, #144	@ 0x90
 8007406:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007408:	e009      	b.n	800741e <HAL_RCC_OscConfig+0x5d2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800740a:	f7fe fcf1 	bl	8005df0 <HAL_GetTick>
 800740e:	0002      	movs	r2, r0
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	4a2e      	ldr	r2, [pc, #184]	@ (80074d0 <HAL_RCC_OscConfig+0x684>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d901      	bls.n	800741e <HAL_RCC_OscConfig+0x5d2>
          {
            return HAL_TIMEOUT;
 800741a:	2303      	movs	r3, #3
 800741c:	e133      	b.n	8007686 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800741e:	4a28      	ldr	r2, [pc, #160]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 8007420:	2390      	movs	r3, #144	@ 0x90
 8007422:	58d2      	ldr	r2, [r2, r3]
 8007424:	2380      	movs	r3, #128	@ 0x80
 8007426:	011b      	lsls	r3, r3, #4
 8007428:	4013      	ands	r3, r2
 800742a:	d0ee      	beq.n	800740a <HAL_RCC_OscConfig+0x5be>
 800742c:	e059      	b.n	80074e2 <HAL_RCC_OscConfig+0x696>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800742e:	4a24      	ldr	r2, [pc, #144]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 8007430:	2390      	movs	r3, #144	@ 0x90
 8007432:	58d3      	ldr	r3, [r2, r3]
 8007434:	4922      	ldr	r1, [pc, #136]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 8007436:	2280      	movs	r2, #128	@ 0x80
 8007438:	4393      	bics	r3, r2
 800743a:	2290      	movs	r2, #144	@ 0x90
 800743c:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800743e:	e009      	b.n	8007454 <HAL_RCC_OscConfig+0x608>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007440:	f7fe fcd6 	bl	8005df0 <HAL_GetTick>
 8007444:	0002      	movs	r2, r0
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	4a21      	ldr	r2, [pc, #132]	@ (80074d0 <HAL_RCC_OscConfig+0x684>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d901      	bls.n	8007454 <HAL_RCC_OscConfig+0x608>
          {
            return HAL_TIMEOUT;
 8007450:	2303      	movs	r3, #3
 8007452:	e118      	b.n	8007686 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007454:	4a1a      	ldr	r2, [pc, #104]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 8007456:	2390      	movs	r3, #144	@ 0x90
 8007458:	58d2      	ldr	r2, [r2, r3]
 800745a:	2380      	movs	r3, #128	@ 0x80
 800745c:	011b      	lsls	r3, r3, #4
 800745e:	4013      	ands	r3, r2
 8007460:	d1ee      	bne.n	8007440 <HAL_RCC_OscConfig+0x5f4>
 8007462:	e03e      	b.n	80074e2 <HAL_RCC_OscConfig+0x696>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007464:	f7fe fcc4 	bl	8005df0 <HAL_GetTick>
 8007468:	0003      	movs	r3, r0
 800746a:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800746c:	e009      	b.n	8007482 <HAL_RCC_OscConfig+0x636>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800746e:	f7fe fcbf 	bl	8005df0 <HAL_GetTick>
 8007472:	0002      	movs	r2, r0
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	4a15      	ldr	r2, [pc, #84]	@ (80074d0 <HAL_RCC_OscConfig+0x684>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d901      	bls.n	8007482 <HAL_RCC_OscConfig+0x636>
        {
          return HAL_TIMEOUT;
 800747e:	2303      	movs	r3, #3
 8007480:	e101      	b.n	8007686 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007482:	4a0f      	ldr	r2, [pc, #60]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 8007484:	2390      	movs	r3, #144	@ 0x90
 8007486:	58d3      	ldr	r3, [r2, r3]
 8007488:	2202      	movs	r2, #2
 800748a:	4013      	ands	r3, r2
 800748c:	d1ef      	bne.n	800746e <HAL_RCC_OscConfig+0x622>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800748e:	4a0c      	ldr	r2, [pc, #48]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 8007490:	2390      	movs	r3, #144	@ 0x90
 8007492:	58d3      	ldr	r3, [r2, r3]
 8007494:	2280      	movs	r2, #128	@ 0x80
 8007496:	4013      	ands	r3, r2
 8007498:	d023      	beq.n	80074e2 <HAL_RCC_OscConfig+0x696>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800749a:	4a09      	ldr	r2, [pc, #36]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 800749c:	2390      	movs	r3, #144	@ 0x90
 800749e:	58d3      	ldr	r3, [r2, r3]
 80074a0:	4907      	ldr	r1, [pc, #28]	@ (80074c0 <HAL_RCC_OscConfig+0x674>)
 80074a2:	2280      	movs	r2, #128	@ 0x80
 80074a4:	4393      	bics	r3, r2
 80074a6:	2290      	movs	r2, #144	@ 0x90
 80074a8:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80074aa:	e013      	b.n	80074d4 <HAL_RCC_OscConfig+0x688>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074ac:	f7fe fca0 	bl	8005df0 <HAL_GetTick>
 80074b0:	0002      	movs	r2, r0
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	4a06      	ldr	r2, [pc, #24]	@ (80074d0 <HAL_RCC_OscConfig+0x684>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d90b      	bls.n	80074d4 <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 80074bc:	2303      	movs	r3, #3
 80074be:	e0e2      	b.n	8007686 <HAL_RCC_OscConfig+0x83a>
 80074c0:	40021000 	.word	0x40021000
 80074c4:	80ffffff 	.word	0x80ffffff
 80074c8:	fffffeff 	.word	0xfffffeff
 80074cc:	40007000 	.word	0x40007000
 80074d0:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80074d4:	4a6e      	ldr	r2, [pc, #440]	@ (8007690 <HAL_RCC_OscConfig+0x844>)
 80074d6:	2390      	movs	r3, #144	@ 0x90
 80074d8:	58d2      	ldr	r2, [r2, r3]
 80074da:	2380      	movs	r3, #128	@ 0x80
 80074dc:	011b      	lsls	r3, r3, #4
 80074de:	4013      	ands	r3, r2
 80074e0:	d1e4      	bne.n	80074ac <HAL_RCC_OscConfig+0x660>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80074e2:	231f      	movs	r3, #31
 80074e4:	18fb      	adds	r3, r7, r3
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d105      	bne.n	80074f8 <HAL_RCC_OscConfig+0x6ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074ec:	4b68      	ldr	r3, [pc, #416]	@ (8007690 <HAL_RCC_OscConfig+0x844>)
 80074ee:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80074f0:	4b67      	ldr	r3, [pc, #412]	@ (8007690 <HAL_RCC_OscConfig+0x844>)
 80074f2:	4968      	ldr	r1, [pc, #416]	@ (8007694 <HAL_RCC_OscConfig+0x848>)
 80074f4:	400a      	ands	r2, r1
 80074f6:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
#if defined(RCC_CRRCR_HSI48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2220      	movs	r2, #32
 80074fe:	4013      	ands	r3, r2
 8007500:	d03c      	beq.n	800757c <HAL_RCC_OscConfig+0x730>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007506:	2b00      	cmp	r3, #0
 8007508:	d01c      	beq.n	8007544 <HAL_RCC_OscConfig+0x6f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800750a:	4a61      	ldr	r2, [pc, #388]	@ (8007690 <HAL_RCC_OscConfig+0x844>)
 800750c:	2398      	movs	r3, #152	@ 0x98
 800750e:	58d3      	ldr	r3, [r2, r3]
 8007510:	495f      	ldr	r1, [pc, #380]	@ (8007690 <HAL_RCC_OscConfig+0x844>)
 8007512:	2201      	movs	r2, #1
 8007514:	4313      	orrs	r3, r2
 8007516:	2298      	movs	r2, #152	@ 0x98
 8007518:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800751a:	f7fe fc69 	bl	8005df0 <HAL_GetTick>
 800751e:	0003      	movs	r3, r0
 8007520:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007522:	e008      	b.n	8007536 <HAL_RCC_OscConfig+0x6ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007524:	f7fe fc64 	bl	8005df0 <HAL_GetTick>
 8007528:	0002      	movs	r2, r0
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	2b02      	cmp	r3, #2
 8007530:	d901      	bls.n	8007536 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	e0a7      	b.n	8007686 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007536:	4a56      	ldr	r2, [pc, #344]	@ (8007690 <HAL_RCC_OscConfig+0x844>)
 8007538:	2398      	movs	r3, #152	@ 0x98
 800753a:	58d3      	ldr	r3, [r2, r3]
 800753c:	2202      	movs	r2, #2
 800753e:	4013      	ands	r3, r2
 8007540:	d0f0      	beq.n	8007524 <HAL_RCC_OscConfig+0x6d8>
 8007542:	e01b      	b.n	800757c <HAL_RCC_OscConfig+0x730>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007544:	4a52      	ldr	r2, [pc, #328]	@ (8007690 <HAL_RCC_OscConfig+0x844>)
 8007546:	2398      	movs	r3, #152	@ 0x98
 8007548:	58d3      	ldr	r3, [r2, r3]
 800754a:	4951      	ldr	r1, [pc, #324]	@ (8007690 <HAL_RCC_OscConfig+0x844>)
 800754c:	2201      	movs	r2, #1
 800754e:	4393      	bics	r3, r2
 8007550:	2298      	movs	r2, #152	@ 0x98
 8007552:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007554:	f7fe fc4c 	bl	8005df0 <HAL_GetTick>
 8007558:	0003      	movs	r3, r0
 800755a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 800755c:	e008      	b.n	8007570 <HAL_RCC_OscConfig+0x724>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800755e:	f7fe fc47 	bl	8005df0 <HAL_GetTick>
 8007562:	0002      	movs	r2, r0
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	1ad3      	subs	r3, r2, r3
 8007568:	2b02      	cmp	r3, #2
 800756a:	d901      	bls.n	8007570 <HAL_RCC_OscConfig+0x724>
        {
          return HAL_TIMEOUT;
 800756c:	2303      	movs	r3, #3
 800756e:	e08a      	b.n	8007686 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 8007570:	4a47      	ldr	r2, [pc, #284]	@ (8007690 <HAL_RCC_OscConfig+0x844>)
 8007572:	2398      	movs	r3, #152	@ 0x98
 8007574:	58d3      	ldr	r3, [r2, r3]
 8007576:	2202      	movs	r2, #2
 8007578:	4013      	ands	r3, r2
 800757a:	d1f0      	bne.n	800755e <HAL_RCC_OscConfig+0x712>
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007580:	2b00      	cmp	r3, #0
 8007582:	d100      	bne.n	8007586 <HAL_RCC_OscConfig+0x73a>
 8007584:	e07e      	b.n	8007684 <HAL_RCC_OscConfig+0x838>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007586:	4b42      	ldr	r3, [pc, #264]	@ (8007690 <HAL_RCC_OscConfig+0x844>)
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	2238      	movs	r2, #56	@ 0x38
 800758c:	4013      	ands	r3, r2
 800758e:	2b18      	cmp	r3, #24
 8007590:	d100      	bne.n	8007594 <HAL_RCC_OscConfig+0x748>
 8007592:	e075      	b.n	8007680 <HAL_RCC_OscConfig+0x834>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007598:	2b02      	cmp	r3, #2
 800759a:	d156      	bne.n	800764a <HAL_RCC_OscConfig+0x7fe>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800759c:	4b3c      	ldr	r3, [pc, #240]	@ (8007690 <HAL_RCC_OscConfig+0x844>)
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	4b3b      	ldr	r3, [pc, #236]	@ (8007690 <HAL_RCC_OscConfig+0x844>)
 80075a2:	493d      	ldr	r1, [pc, #244]	@ (8007698 <HAL_RCC_OscConfig+0x84c>)
 80075a4:	400a      	ands	r2, r1
 80075a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075a8:	f7fe fc22 	bl	8005df0 <HAL_GetTick>
 80075ac:	0003      	movs	r3, r0
 80075ae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075b0:	e008      	b.n	80075c4 <HAL_RCC_OscConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075b2:	f7fe fc1d 	bl	8005df0 <HAL_GetTick>
 80075b6:	0002      	movs	r2, r0
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	1ad3      	subs	r3, r2, r3
 80075bc:	2b02      	cmp	r3, #2
 80075be:	d901      	bls.n	80075c4 <HAL_RCC_OscConfig+0x778>
          {
            return HAL_TIMEOUT;
 80075c0:	2303      	movs	r3, #3
 80075c2:	e060      	b.n	8007686 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075c4:	4b32      	ldr	r3, [pc, #200]	@ (8007690 <HAL_RCC_OscConfig+0x844>)
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	2380      	movs	r3, #128	@ 0x80
 80075ca:	049b      	lsls	r3, r3, #18
 80075cc:	4013      	ands	r3, r2
 80075ce:	d1f0      	bne.n	80075b2 <HAL_RCC_OscConfig+0x766>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80075d0:	4b2f      	ldr	r3, [pc, #188]	@ (8007690 <HAL_RCC_OscConfig+0x844>)
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	4a31      	ldr	r2, [pc, #196]	@ (800769c <HAL_RCC_OscConfig+0x850>)
 80075d6:	4013      	ands	r3, r2
 80075d8:	0019      	movs	r1, r3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075e2:	431a      	orrs	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075e8:	021b      	lsls	r3, r3, #8
 80075ea:	431a      	orrs	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f0:	431a      	orrs	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075f6:	431a      	orrs	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075fc:	431a      	orrs	r2, r3
 80075fe:	4b24      	ldr	r3, [pc, #144]	@ (8007690 <HAL_RCC_OscConfig+0x844>)
 8007600:	430a      	orrs	r2, r1
 8007602:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 8007604:	4b22      	ldr	r3, [pc, #136]	@ (8007690 <HAL_RCC_OscConfig+0x844>)
 8007606:	68da      	ldr	r2, [r3, #12]
 8007608:	4b21      	ldr	r3, [pc, #132]	@ (8007690 <HAL_RCC_OscConfig+0x844>)
 800760a:	2180      	movs	r1, #128	@ 0x80
 800760c:	0549      	lsls	r1, r1, #21
 800760e:	430a      	orrs	r2, r1
 8007610:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007612:	4b1f      	ldr	r3, [pc, #124]	@ (8007690 <HAL_RCC_OscConfig+0x844>)
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	4b1e      	ldr	r3, [pc, #120]	@ (8007690 <HAL_RCC_OscConfig+0x844>)
 8007618:	2180      	movs	r1, #128	@ 0x80
 800761a:	0449      	lsls	r1, r1, #17
 800761c:	430a      	orrs	r2, r1
 800761e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007620:	f7fe fbe6 	bl	8005df0 <HAL_GetTick>
 8007624:	0003      	movs	r3, r0
 8007626:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007628:	e008      	b.n	800763c <HAL_RCC_OscConfig+0x7f0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800762a:	f7fe fbe1 	bl	8005df0 <HAL_GetTick>
 800762e:	0002      	movs	r2, r0
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	2b02      	cmp	r3, #2
 8007636:	d901      	bls.n	800763c <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8007638:	2303      	movs	r3, #3
 800763a:	e024      	b.n	8007686 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800763c:	4b14      	ldr	r3, [pc, #80]	@ (8007690 <HAL_RCC_OscConfig+0x844>)
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	2380      	movs	r3, #128	@ 0x80
 8007642:	049b      	lsls	r3, r3, #18
 8007644:	4013      	ands	r3, r2
 8007646:	d0f0      	beq.n	800762a <HAL_RCC_OscConfig+0x7de>
 8007648:	e01c      	b.n	8007684 <HAL_RCC_OscConfig+0x838>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800764a:	4b11      	ldr	r3, [pc, #68]	@ (8007690 <HAL_RCC_OscConfig+0x844>)
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	4b10      	ldr	r3, [pc, #64]	@ (8007690 <HAL_RCC_OscConfig+0x844>)
 8007650:	4911      	ldr	r1, [pc, #68]	@ (8007698 <HAL_RCC_OscConfig+0x84c>)
 8007652:	400a      	ands	r2, r1
 8007654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007656:	f7fe fbcb 	bl	8005df0 <HAL_GetTick>
 800765a:	0003      	movs	r3, r0
 800765c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800765e:	e008      	b.n	8007672 <HAL_RCC_OscConfig+0x826>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007660:	f7fe fbc6 	bl	8005df0 <HAL_GetTick>
 8007664:	0002      	movs	r2, r0
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	2b02      	cmp	r3, #2
 800766c:	d901      	bls.n	8007672 <HAL_RCC_OscConfig+0x826>
          {
            return HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	e009      	b.n	8007686 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007672:	4b07      	ldr	r3, [pc, #28]	@ (8007690 <HAL_RCC_OscConfig+0x844>)
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	2380      	movs	r3, #128	@ 0x80
 8007678:	049b      	lsls	r3, r3, #18
 800767a:	4013      	ands	r3, r2
 800767c:	d1f0      	bne.n	8007660 <HAL_RCC_OscConfig+0x814>
 800767e:	e001      	b.n	8007684 <HAL_RCC_OscConfig+0x838>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e000      	b.n	8007686 <HAL_RCC_OscConfig+0x83a>
    }
  }
  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	0018      	movs	r0, r3
 8007688:	46bd      	mov	sp, r7
 800768a:	b008      	add	sp, #32
 800768c:	bdb0      	pop	{r4, r5, r7, pc}
 800768e:	46c0      	nop			@ (mov r8, r8)
 8007690:	40021000 	.word	0x40021000
 8007694:	efffffff 	.word	0xefffffff
 8007698:	feffffff 	.word	0xfeffffff
 800769c:	11c1808c 	.word	0x11c1808c

080076a0 <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 80076a0:	b5b0      	push	{r4, r5, r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80076aa:	4b6c      	ldr	r3, [pc, #432]	@ (800785c <HAL_RCC_ClockConfig+0x1bc>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2207      	movs	r2, #7
 80076b0:	4013      	ands	r3, r2
 80076b2:	683a      	ldr	r2, [r7, #0]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d911      	bls.n	80076dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076b8:	4b68      	ldr	r3, [pc, #416]	@ (800785c <HAL_RCC_ClockConfig+0x1bc>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2207      	movs	r2, #7
 80076be:	4393      	bics	r3, r2
 80076c0:	0019      	movs	r1, r3
 80076c2:	4b66      	ldr	r3, [pc, #408]	@ (800785c <HAL_RCC_ClockConfig+0x1bc>)
 80076c4:	683a      	ldr	r2, [r7, #0]
 80076c6:	430a      	orrs	r2, r1
 80076c8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076ca:	4b64      	ldr	r3, [pc, #400]	@ (800785c <HAL_RCC_ClockConfig+0x1bc>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2207      	movs	r2, #7
 80076d0:	4013      	ands	r3, r2
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d001      	beq.n	80076dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e0bb      	b.n	8007854 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2201      	movs	r2, #1
 80076e2:	4013      	ands	r3, r2
 80076e4:	d100      	bne.n	80076e8 <HAL_RCC_ClockConfig+0x48>
 80076e6:	e064      	b.n	80077b2 <HAL_RCC_ClockConfig+0x112>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	2b03      	cmp	r3, #3
 80076ee:	d107      	bne.n	8007700 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076f0:	4b5b      	ldr	r3, [pc, #364]	@ (8007860 <HAL_RCC_ClockConfig+0x1c0>)
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	2380      	movs	r3, #128	@ 0x80
 80076f6:	049b      	lsls	r3, r3, #18
 80076f8:	4013      	ands	r3, r2
 80076fa:	d138      	bne.n	800776e <HAL_RCC_ClockConfig+0xce>
      {
        return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e0a9      	b.n	8007854 <HAL_RCC_ClockConfig+0x1b4>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	2b02      	cmp	r3, #2
 8007706:	d107      	bne.n	8007718 <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007708:	4b55      	ldr	r3, [pc, #340]	@ (8007860 <HAL_RCC_ClockConfig+0x1c0>)
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	2380      	movs	r3, #128	@ 0x80
 800770e:	029b      	lsls	r3, r3, #10
 8007710:	4013      	ands	r3, r2
 8007712:	d12c      	bne.n	800776e <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e09d      	b.n	8007854 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d106      	bne.n	800772e <HAL_RCC_ClockConfig+0x8e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007720:	4b4f      	ldr	r3, [pc, #316]	@ (8007860 <HAL_RCC_ClockConfig+0x1c0>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2202      	movs	r2, #2
 8007726:	4013      	ands	r3, r2
 8007728:	d121      	bne.n	800776e <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e092      	b.n	8007854 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	2b01      	cmp	r3, #1
 8007734:	d107      	bne.n	8007746 <HAL_RCC_ClockConfig+0xa6>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007736:	4b4a      	ldr	r3, [pc, #296]	@ (8007860 <HAL_RCC_ClockConfig+0x1c0>)
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	2380      	movs	r3, #128	@ 0x80
 800773c:	00db      	lsls	r3, r3, #3
 800773e:	4013      	ands	r3, r2
 8007740:	d115      	bne.n	800776e <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	e086      	b.n	8007854 <HAL_RCC_ClockConfig+0x1b4>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	2b04      	cmp	r3, #4
 800774c:	d107      	bne.n	800775e <HAL_RCC_ClockConfig+0xbe>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800774e:	4a44      	ldr	r2, [pc, #272]	@ (8007860 <HAL_RCC_ClockConfig+0x1c0>)
 8007750:	2394      	movs	r3, #148	@ 0x94
 8007752:	58d3      	ldr	r3, [r2, r3]
 8007754:	2202      	movs	r2, #2
 8007756:	4013      	ands	r3, r2
 8007758:	d109      	bne.n	800776e <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e07a      	b.n	8007854 <HAL_RCC_ClockConfig+0x1b4>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800775e:	4a40      	ldr	r2, [pc, #256]	@ (8007860 <HAL_RCC_ClockConfig+0x1c0>)
 8007760:	2390      	movs	r3, #144	@ 0x90
 8007762:	58d3      	ldr	r3, [r2, r3]
 8007764:	2202      	movs	r2, #2
 8007766:	4013      	ands	r3, r2
 8007768:	d101      	bne.n	800776e <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e072      	b.n	8007854 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800776e:	4b3c      	ldr	r3, [pc, #240]	@ (8007860 <HAL_RCC_ClockConfig+0x1c0>)
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	2207      	movs	r2, #7
 8007774:	4393      	bics	r3, r2
 8007776:	0019      	movs	r1, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685a      	ldr	r2, [r3, #4]
 800777c:	4b38      	ldr	r3, [pc, #224]	@ (8007860 <HAL_RCC_ClockConfig+0x1c0>)
 800777e:	430a      	orrs	r2, r1
 8007780:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007782:	f7fe fb35 	bl	8005df0 <HAL_GetTick>
 8007786:	0003      	movs	r3, r0
 8007788:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800778a:	e009      	b.n	80077a0 <HAL_RCC_ClockConfig+0x100>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800778c:	f7fe fb30 	bl	8005df0 <HAL_GetTick>
 8007790:	0002      	movs	r2, r0
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	4a33      	ldr	r2, [pc, #204]	@ (8007864 <HAL_RCC_ClockConfig+0x1c4>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d901      	bls.n	80077a0 <HAL_RCC_ClockConfig+0x100>
      {
        return HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	e059      	b.n	8007854 <HAL_RCC_ClockConfig+0x1b4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077a0:	4b2f      	ldr	r3, [pc, #188]	@ (8007860 <HAL_RCC_ClockConfig+0x1c0>)
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	2238      	movs	r2, #56	@ 0x38
 80077a6:	401a      	ands	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	00db      	lsls	r3, r3, #3
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d1ec      	bne.n	800778c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2202      	movs	r2, #2
 80077b8:	4013      	ands	r3, r2
 80077ba:	d009      	beq.n	80077d0 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077bc:	4b28      	ldr	r3, [pc, #160]	@ (8007860 <HAL_RCC_ClockConfig+0x1c0>)
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	4a29      	ldr	r2, [pc, #164]	@ (8007868 <HAL_RCC_ClockConfig+0x1c8>)
 80077c2:	4013      	ands	r3, r2
 80077c4:	0019      	movs	r1, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	689a      	ldr	r2, [r3, #8]
 80077ca:	4b25      	ldr	r3, [pc, #148]	@ (8007860 <HAL_RCC_ClockConfig+0x1c0>)
 80077cc:	430a      	orrs	r2, r1
 80077ce:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80077d0:	4b22      	ldr	r3, [pc, #136]	@ (800785c <HAL_RCC_ClockConfig+0x1bc>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2207      	movs	r2, #7
 80077d6:	4013      	ands	r3, r2
 80077d8:	683a      	ldr	r2, [r7, #0]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d211      	bcs.n	8007802 <HAL_RCC_ClockConfig+0x162>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077de:	4b1f      	ldr	r3, [pc, #124]	@ (800785c <HAL_RCC_ClockConfig+0x1bc>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2207      	movs	r2, #7
 80077e4:	4393      	bics	r3, r2
 80077e6:	0019      	movs	r1, r3
 80077e8:	4b1c      	ldr	r3, [pc, #112]	@ (800785c <HAL_RCC_ClockConfig+0x1bc>)
 80077ea:	683a      	ldr	r2, [r7, #0]
 80077ec:	430a      	orrs	r2, r1
 80077ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077f0:	4b1a      	ldr	r3, [pc, #104]	@ (800785c <HAL_RCC_ClockConfig+0x1bc>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2207      	movs	r2, #7
 80077f6:	4013      	ands	r3, r2
 80077f8:	683a      	ldr	r2, [r7, #0]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d001      	beq.n	8007802 <HAL_RCC_ClockConfig+0x162>
    {
      return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e028      	b.n	8007854 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2204      	movs	r2, #4
 8007808:	4013      	ands	r3, r2
 800780a:	d009      	beq.n	8007820 <HAL_RCC_ClockConfig+0x180>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800780c:	4b14      	ldr	r3, [pc, #80]	@ (8007860 <HAL_RCC_ClockConfig+0x1c0>)
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	4a16      	ldr	r2, [pc, #88]	@ (800786c <HAL_RCC_ClockConfig+0x1cc>)
 8007812:	4013      	ands	r3, r2
 8007814:	0019      	movs	r1, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	68da      	ldr	r2, [r3, #12]
 800781a:	4b11      	ldr	r3, [pc, #68]	@ (8007860 <HAL_RCC_ClockConfig+0x1c0>)
 800781c:	430a      	orrs	r2, r1
 800781e:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8007820:	f000 f82a 	bl	8007878 <HAL_RCC_GetSysClockFreq>
 8007824:	0001      	movs	r1, r0
 8007826:	4b0e      	ldr	r3, [pc, #56]	@ (8007860 <HAL_RCC_ClockConfig+0x1c0>)
 8007828:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800782a:	0a1b      	lsrs	r3, r3, #8
 800782c:	220f      	movs	r2, #15
 800782e:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8007830:	4a0f      	ldr	r2, [pc, #60]	@ (8007870 <HAL_RCC_ClockConfig+0x1d0>)
 8007832:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007834:	001a      	movs	r2, r3
 8007836:	231f      	movs	r3, #31
 8007838:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 800783a:	000a      	movs	r2, r1
 800783c:	40da      	lsrs	r2, r3
 800783e:	4b0d      	ldr	r3, [pc, #52]	@ (8007874 <HAL_RCC_ClockConfig+0x1d4>)
 8007840:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 8007842:	250b      	movs	r5, #11
 8007844:	197c      	adds	r4, r7, r5
 8007846:	2003      	movs	r0, #3
 8007848:	f7fe fa78 	bl	8005d3c <HAL_InitTick>
 800784c:	0003      	movs	r3, r0
 800784e:	7023      	strb	r3, [r4, #0]

  return halstatus;
 8007850:	197b      	adds	r3, r7, r5
 8007852:	781b      	ldrb	r3, [r3, #0]
}
 8007854:	0018      	movs	r0, r3
 8007856:	46bd      	mov	sp, r7
 8007858:	b004      	add	sp, #16
 800785a:	bdb0      	pop	{r4, r5, r7, pc}
 800785c:	40022000 	.word	0x40022000
 8007860:	40021000 	.word	0x40021000
 8007864:	00001388 	.word	0x00001388
 8007868:	fffff0ff 	.word	0xfffff0ff
 800786c:	ffff8fff 	.word	0xffff8fff
 8007870:	08010028 	.word	0x08010028
 8007874:	20000004 	.word	0x20000004

08007878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b08a      	sub	sp, #40	@ 0x28
 800787c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800787e:	2300      	movs	r3, #0
 8007880:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8007882:	2300      	movs	r3, #0
 8007884:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007886:	4b46      	ldr	r3, [pc, #280]	@ (80079a0 <HAL_RCC_GetSysClockFreq+0x128>)
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	2238      	movs	r2, #56	@ 0x38
 800788c:	4013      	ands	r3, r2
 800788e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007890:	4b43      	ldr	r3, [pc, #268]	@ (80079a0 <HAL_RCC_GetSysClockFreq+0x128>)
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	2203      	movs	r2, #3
 8007896:	4013      	ands	r3, r2
 8007898:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d005      	beq.n	80078ac <HAL_RCC_GetSysClockFreq+0x34>
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	2b18      	cmp	r3, #24
 80078a4:	d125      	bne.n	80078f2 <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d122      	bne.n	80078f2 <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80078ac:	4b3c      	ldr	r3, [pc, #240]	@ (80079a0 <HAL_RCC_GetSysClockFreq+0x128>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2208      	movs	r2, #8
 80078b2:	4013      	ands	r3, r2
 80078b4:	d107      	bne.n	80078c6 <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 80078b6:	4a3a      	ldr	r2, [pc, #232]	@ (80079a0 <HAL_RCC_GetSysClockFreq+0x128>)
 80078b8:	2394      	movs	r3, #148	@ 0x94
 80078ba:	58d3      	ldr	r3, [r2, r3]
 80078bc:	0a1b      	lsrs	r3, r3, #8
 80078be:	220f      	movs	r2, #15
 80078c0:	4013      	ands	r3, r2
 80078c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80078c4:	e005      	b.n	80078d2 <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80078c6:	4b36      	ldr	r3, [pc, #216]	@ (80079a0 <HAL_RCC_GetSysClockFreq+0x128>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	091b      	lsrs	r3, r3, #4
 80078cc:	220f      	movs	r2, #15
 80078ce:	4013      	ands	r3, r2
 80078d0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 80078d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d4:	2b0b      	cmp	r3, #11
 80078d6:	d901      	bls.n	80078dc <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 80078d8:	2300      	movs	r3, #0
 80078da:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 80078dc:	4b31      	ldr	r3, [pc, #196]	@ (80079a4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80078de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078e0:	0092      	lsls	r2, r2, #2
 80078e2:	58d3      	ldr	r3, [r2, r3]
 80078e4:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d11b      	bne.n	8007924 <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80078ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ee:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80078f0:	e018      	b.n	8007924 <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	2b08      	cmp	r3, #8
 80078f6:	d102      	bne.n	80078fe <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80078f8:	4b2b      	ldr	r3, [pc, #172]	@ (80079a8 <HAL_RCC_GetSysClockFreq+0x130>)
 80078fa:	623b      	str	r3, [r7, #32]
 80078fc:	e012      	b.n	8007924 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	2b10      	cmp	r3, #16
 8007902:	d102      	bne.n	800790a <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007904:	4b29      	ldr	r3, [pc, #164]	@ (80079ac <HAL_RCC_GetSysClockFreq+0x134>)
 8007906:	623b      	str	r3, [r7, #32]
 8007908:	e00c      	b.n	8007924 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	2b20      	cmp	r3, #32
 800790e:	d103      	bne.n	8007918 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8007910:	23fa      	movs	r3, #250	@ 0xfa
 8007912:	01db      	lsls	r3, r3, #7
 8007914:	623b      	str	r3, [r7, #32]
 8007916:	e005      	b.n	8007924 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	2b28      	cmp	r3, #40	@ 0x28
 800791c:	d102      	bne.n	8007924 <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800791e:	2380      	movs	r3, #128	@ 0x80
 8007920:	021b      	lsls	r3, r3, #8
 8007922:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	2b18      	cmp	r3, #24
 8007928:	d135      	bne.n	8007996 <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800792a:	4b1d      	ldr	r3, [pc, #116]	@ (80079a0 <HAL_RCC_GetSysClockFreq+0x128>)
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	2203      	movs	r2, #3
 8007930:	4013      	ands	r3, r2
 8007932:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007934:	4b1a      	ldr	r3, [pc, #104]	@ (80079a0 <HAL_RCC_GetSysClockFreq+0x128>)
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	091b      	lsrs	r3, r3, #4
 800793a:	2207      	movs	r2, #7
 800793c:	4013      	ands	r3, r2
 800793e:	3301      	adds	r3, #1
 8007940:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	2b02      	cmp	r3, #2
 8007946:	d003      	beq.n	8007950 <HAL_RCC_GetSysClockFreq+0xd8>
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	2b03      	cmp	r3, #3
 800794c:	d003      	beq.n	8007956 <HAL_RCC_GetSysClockFreq+0xde>
 800794e:	e005      	b.n	800795c <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 8007950:	4b15      	ldr	r3, [pc, #84]	@ (80079a8 <HAL_RCC_GetSysClockFreq+0x130>)
 8007952:	61fb      	str	r3, [r7, #28]
        break;
 8007954:	e005      	b.n	8007962 <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 8007956:	4b15      	ldr	r3, [pc, #84]	@ (80079ac <HAL_RCC_GetSysClockFreq+0x134>)
 8007958:	61fb      	str	r3, [r7, #28]
        break;
 800795a:	e002      	b.n	8007962 <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 800795c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795e:	61fb      	str	r3, [r7, #28]
        break;
 8007960:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 8007962:	4b0f      	ldr	r3, [pc, #60]	@ (80079a0 <HAL_RCC_GetSysClockFreq+0x128>)
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	0a1b      	lsrs	r3, r3, #8
 8007968:	227f      	movs	r2, #127	@ 0x7f
 800796a:	4013      	ands	r3, r2
 800796c:	69fa      	ldr	r2, [r7, #28]
 800796e:	4353      	muls	r3, r2
 8007970:	68f9      	ldr	r1, [r7, #12]
 8007972:	0018      	movs	r0, r3
 8007974:	f7f8 fbe4 	bl	8000140 <__udivsi3>
 8007978:	0003      	movs	r3, r0
 800797a:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800797c:	4b08      	ldr	r3, [pc, #32]	@ (80079a0 <HAL_RCC_GetSysClockFreq+0x128>)
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	0f5b      	lsrs	r3, r3, #29
 8007982:	2207      	movs	r2, #7
 8007984:	4013      	ands	r3, r2
 8007986:	3301      	adds	r3, #1
 8007988:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800798a:	6879      	ldr	r1, [r7, #4]
 800798c:	68b8      	ldr	r0, [r7, #8]
 800798e:	f7f8 fbd7 	bl	8000140 <__udivsi3>
 8007992:	0003      	movs	r3, r0
 8007994:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8007996:	6a3b      	ldr	r3, [r7, #32]
}
 8007998:	0018      	movs	r0, r3
 800799a:	46bd      	mov	sp, r7
 800799c:	b00a      	add	sp, #40	@ 0x28
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	40021000 	.word	0x40021000
 80079a4:	08010040 	.word	0x08010040
 80079a8:	00f42400 	.word	0x00f42400
 80079ac:	003d0900 	.word	0x003d0900

080079b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80079b4:	4b02      	ldr	r3, [pc, #8]	@ (80079c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80079b6:	681b      	ldr	r3, [r3, #0]
}
 80079b8:	0018      	movs	r0, r3
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	46c0      	nop			@ (mov r8, r8)
 80079c0:	20000004 	.word	0x20000004

080079c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 80079c8:	f7ff fff2 	bl	80079b0 <HAL_RCC_GetHCLKFreq>
 80079cc:	0001      	movs	r1, r0
 80079ce:	4b07      	ldr	r3, [pc, #28]	@ (80079ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	0b1b      	lsrs	r3, r3, #12
 80079d4:	2207      	movs	r2, #7
 80079d6:	4013      	ands	r3, r2
 80079d8:	4a05      	ldr	r2, [pc, #20]	@ (80079f0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80079da:	5cd3      	ldrb	r3, [r2, r3]
 80079dc:	001a      	movs	r2, r3
 80079de:	231f      	movs	r3, #31
 80079e0:	4013      	ands	r3, r2
 80079e2:	40d9      	lsrs	r1, r3
 80079e4:	000b      	movs	r3, r1
}
 80079e6:	0018      	movs	r0, r3
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	40021000 	.word	0x40021000
 80079f0:	08010038 	.word	0x08010038

080079f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b086      	sub	sp, #24
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80079fc:	2300      	movs	r3, #0
 80079fe:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007a00:	4b2f      	ldr	r3, [pc, #188]	@ (8007ac0 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007a02:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007a04:	2380      	movs	r3, #128	@ 0x80
 8007a06:	055b      	lsls	r3, r3, #21
 8007a08:	4013      	ands	r3, r2
 8007a0a:	d004      	beq.n	8007a16 <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007a0c:	f7ff fa12 	bl	8006e34 <HAL_PWREx_GetVoltageRange>
 8007a10:	0003      	movs	r3, r0
 8007a12:	617b      	str	r3, [r7, #20]
 8007a14:	e017      	b.n	8007a46 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a16:	4b2a      	ldr	r3, [pc, #168]	@ (8007ac0 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007a18:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007a1a:	4b29      	ldr	r3, [pc, #164]	@ (8007ac0 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007a1c:	2180      	movs	r1, #128	@ 0x80
 8007a1e:	0549      	lsls	r1, r1, #21
 8007a20:	430a      	orrs	r2, r1
 8007a22:	659a      	str	r2, [r3, #88]	@ 0x58
 8007a24:	4b26      	ldr	r3, [pc, #152]	@ (8007ac0 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007a26:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007a28:	2380      	movs	r3, #128	@ 0x80
 8007a2a:	055b      	lsls	r3, r3, #21
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	60fb      	str	r3, [r7, #12]
 8007a30:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007a32:	f7ff f9ff 	bl	8006e34 <HAL_PWREx_GetVoltageRange>
 8007a36:	0003      	movs	r3, r0
 8007a38:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007a3a:	4b21      	ldr	r3, [pc, #132]	@ (8007ac0 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007a3c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007a3e:	4b20      	ldr	r3, [pc, #128]	@ (8007ac0 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007a40:	4920      	ldr	r1, [pc, #128]	@ (8007ac4 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 8007a42:	400a      	ands	r2, r1
 8007a44:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a46:	697a      	ldr	r2, [r7, #20]
 8007a48:	2380      	movs	r3, #128	@ 0x80
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d111      	bne.n	8007a74 <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b80      	cmp	r3, #128	@ 0x80
 8007a54:	d91c      	bls.n	8007a90 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2bb0      	cmp	r3, #176	@ 0xb0
 8007a5a:	d902      	bls.n	8007a62 <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	613b      	str	r3, [r7, #16]
 8007a60:	e016      	b.n	8007a90 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2b90      	cmp	r3, #144	@ 0x90
 8007a66:	d902      	bls.n	8007a6e <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007a68:	2301      	movs	r3, #1
 8007a6a:	613b      	str	r3, [r7, #16]
 8007a6c:	e010      	b.n	8007a90 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 8007a6e:	2300      	movs	r3, #0
 8007a70:	613b      	str	r3, [r7, #16]
 8007a72:	e00d      	b.n	8007a90 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2b7f      	cmp	r3, #127	@ 0x7f
 8007a78:	d902      	bls.n	8007a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 8007a7a:	2302      	movs	r3, #2
 8007a7c:	613b      	str	r3, [r7, #16]
 8007a7e:	e007      	b.n	8007a90 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2b70      	cmp	r3, #112	@ 0x70
 8007a84:	d102      	bne.n	8007a8c <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8007a86:	2301      	movs	r3, #1
 8007a88:	613b      	str	r3, [r7, #16]
 8007a8a:	e001      	b.n	8007a90 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007a90:	4b0d      	ldr	r3, [pc, #52]	@ (8007ac8 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2207      	movs	r2, #7
 8007a96:	4393      	bics	r3, r2
 8007a98:	0019      	movs	r1, r3
 8007a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8007ac8 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8007a9c:	693a      	ldr	r2, [r7, #16]
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8007aa2:	4b09      	ldr	r3, [pc, #36]	@ (8007ac8 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2207      	movs	r2, #7
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	693a      	ldr	r2, [r7, #16]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d001      	beq.n	8007ab4 <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e000      	b.n	8007ab6 <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	0018      	movs	r0, r3
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	b006      	add	sp, #24
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	46c0      	nop			@ (mov r8, r8)
 8007ac0:	40021000 	.word	0x40021000
 8007ac4:	efffffff 	.word	0xefffffff
 8007ac8:	40022000 	.word	0x40022000

08007acc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b086      	sub	sp, #24
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007ad4:	2313      	movs	r3, #19
 8007ad6:	18fb      	adds	r3, r7, r3
 8007ad8:	2200      	movs	r2, #0
 8007ada:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007adc:	2312      	movs	r3, #18
 8007ade:	18fb      	adds	r3, r7, r3
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	2380      	movs	r3, #128	@ 0x80
 8007aea:	021b      	lsls	r3, r3, #8
 8007aec:	4013      	ands	r3, r2
 8007aee:	d100      	bne.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8007af0:	e0b7      	b.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007af2:	2011      	movs	r0, #17
 8007af4:	183b      	adds	r3, r7, r0
 8007af6:	2200      	movs	r2, #0
 8007af8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007afa:	4b4c      	ldr	r3, [pc, #304]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007afc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007afe:	2380      	movs	r3, #128	@ 0x80
 8007b00:	055b      	lsls	r3, r3, #21
 8007b02:	4013      	ands	r3, r2
 8007b04:	d110      	bne.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b06:	4b49      	ldr	r3, [pc, #292]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b08:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007b0a:	4b48      	ldr	r3, [pc, #288]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b0c:	2180      	movs	r1, #128	@ 0x80
 8007b0e:	0549      	lsls	r1, r1, #21
 8007b10:	430a      	orrs	r2, r1
 8007b12:	659a      	str	r2, [r3, #88]	@ 0x58
 8007b14:	4b45      	ldr	r3, [pc, #276]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b16:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007b18:	2380      	movs	r3, #128	@ 0x80
 8007b1a:	055b      	lsls	r3, r3, #21
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	60bb      	str	r3, [r7, #8]
 8007b20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b22:	183b      	adds	r3, r7, r0
 8007b24:	2201      	movs	r2, #1
 8007b26:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b28:	4b41      	ldr	r3, [pc, #260]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	4b40      	ldr	r3, [pc, #256]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007b2e:	2180      	movs	r1, #128	@ 0x80
 8007b30:	0049      	lsls	r1, r1, #1
 8007b32:	430a      	orrs	r2, r1
 8007b34:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b36:	f7fe f95b 	bl	8005df0 <HAL_GetTick>
 8007b3a:	0003      	movs	r3, r0
 8007b3c:	60fb      	str	r3, [r7, #12]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007b3e:	e00b      	b.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b40:	f7fe f956 	bl	8005df0 <HAL_GetTick>
 8007b44:	0002      	movs	r2, r0
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	1ad3      	subs	r3, r2, r3
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	d904      	bls.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8007b4e:	2313      	movs	r3, #19
 8007b50:	18fb      	adds	r3, r7, r3
 8007b52:	2203      	movs	r2, #3
 8007b54:	701a      	strb	r2, [r3, #0]
        break;
 8007b56:	e005      	b.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007b58:	4b35      	ldr	r3, [pc, #212]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	2380      	movs	r3, #128	@ 0x80
 8007b5e:	005b      	lsls	r3, r3, #1
 8007b60:	4013      	ands	r3, r2
 8007b62:	d0ed      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8007b64:	2313      	movs	r3, #19
 8007b66:	18fb      	adds	r3, r7, r3
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d168      	bne.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007b6e:	4a2f      	ldr	r2, [pc, #188]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b70:	2390      	movs	r3, #144	@ 0x90
 8007b72:	58d2      	ldr	r2, [r2, r3]
 8007b74:	23c0      	movs	r3, #192	@ 0xc0
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	4013      	ands	r3, r2
 8007b7a:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d01f      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b86:	697a      	ldr	r2, [r7, #20]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d01a      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007b8c:	4a27      	ldr	r2, [pc, #156]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b8e:	2390      	movs	r3, #144	@ 0x90
 8007b90:	58d3      	ldr	r3, [r2, r3]
 8007b92:	4a28      	ldr	r2, [pc, #160]	@ (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007b94:	4013      	ands	r3, r2
 8007b96:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b98:	4a24      	ldr	r2, [pc, #144]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b9a:	2390      	movs	r3, #144	@ 0x90
 8007b9c:	58d3      	ldr	r3, [r2, r3]
 8007b9e:	4923      	ldr	r1, [pc, #140]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ba0:	2280      	movs	r2, #128	@ 0x80
 8007ba2:	0252      	lsls	r2, r2, #9
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	2290      	movs	r2, #144	@ 0x90
 8007ba8:	508b      	str	r3, [r1, r2]
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007baa:	4a20      	ldr	r2, [pc, #128]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bac:	2390      	movs	r3, #144	@ 0x90
 8007bae:	58d3      	ldr	r3, [r2, r3]
 8007bb0:	491e      	ldr	r1, [pc, #120]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bb2:	4a21      	ldr	r2, [pc, #132]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	2290      	movs	r2, #144	@ 0x90
 8007bb8:	508b      	str	r3, [r1, r2]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007bba:	491c      	ldr	r1, [pc, #112]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bbc:	2290      	movs	r2, #144	@ 0x90
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	508b      	str	r3, [r1, r2]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	d017      	beq.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x12e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bca:	f7fe f911 	bl	8005df0 <HAL_GetTick>
 8007bce:	0003      	movs	r3, r0
 8007bd0:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bd2:	e00c      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bd4:	f7fe f90c 	bl	8005df0 <HAL_GetTick>
 8007bd8:	0002      	movs	r2, r0
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	4a17      	ldr	r2, [pc, #92]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d904      	bls.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x122>
          {
            ret = HAL_TIMEOUT;
 8007be4:	2313      	movs	r3, #19
 8007be6:	18fb      	adds	r3, r7, r3
 8007be8:	2203      	movs	r2, #3
 8007bea:	701a      	strb	r2, [r3, #0]
            break;
 8007bec:	e005      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x12e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bee:	4a0f      	ldr	r2, [pc, #60]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bf0:	2390      	movs	r3, #144	@ 0x90
 8007bf2:	58d3      	ldr	r3, [r2, r3]
 8007bf4:	2202      	movs	r2, #2
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	d0ec      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          }
        }
      }

      if (ret == HAL_OK)
 8007bfa:	2313      	movs	r3, #19
 8007bfc:	18fb      	adds	r3, r7, r3
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d10b      	bne.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c04:	4a09      	ldr	r2, [pc, #36]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c06:	2390      	movs	r3, #144	@ 0x90
 8007c08:	58d3      	ldr	r3, [r2, r3]
 8007c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007c0c:	401a      	ands	r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c12:	4906      	ldr	r1, [pc, #24]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c14:	4313      	orrs	r3, r2
 8007c16:	2290      	movs	r2, #144	@ 0x90
 8007c18:	508b      	str	r3, [r1, r2]
 8007c1a:	e017      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c1c:	2312      	movs	r3, #18
 8007c1e:	18fb      	adds	r3, r7, r3
 8007c20:	2213      	movs	r2, #19
 8007c22:	18ba      	adds	r2, r7, r2
 8007c24:	7812      	ldrb	r2, [r2, #0]
 8007c26:	701a      	strb	r2, [r3, #0]
 8007c28:	e010      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007c2a:	46c0      	nop			@ (mov r8, r8)
 8007c2c:	40021000 	.word	0x40021000
 8007c30:	40007000 	.word	0x40007000
 8007c34:	fffffcff 	.word	0xfffffcff
 8007c38:	fffeffff 	.word	0xfffeffff
 8007c3c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c40:	2312      	movs	r3, #18
 8007c42:	18fb      	adds	r3, r7, r3
 8007c44:	2213      	movs	r2, #19
 8007c46:	18ba      	adds	r2, r7, r2
 8007c48:	7812      	ldrb	r2, [r2, #0]
 8007c4a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007c4c:	2311      	movs	r3, #17
 8007c4e:	18fb      	adds	r3, r7, r3
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d105      	bne.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c56:	4ba4      	ldr	r3, [pc, #656]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007c58:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007c5a:	4ba3      	ldr	r3, [pc, #652]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007c5c:	49a3      	ldr	r1, [pc, #652]	@ (8007eec <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8007c5e:	400a      	ands	r2, r1
 8007c60:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2201      	movs	r2, #1
 8007c68:	4013      	ands	r3, r2
 8007c6a:	d00b      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c6c:	4a9e      	ldr	r2, [pc, #632]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007c6e:	2388      	movs	r3, #136	@ 0x88
 8007c70:	58d3      	ldr	r3, [r2, r3]
 8007c72:	2203      	movs	r2, #3
 8007c74:	4393      	bics	r3, r2
 8007c76:	001a      	movs	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	499a      	ldr	r1, [pc, #616]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	2288      	movs	r2, #136	@ 0x88
 8007c82:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2202      	movs	r2, #2
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	d00b      	beq.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007c8e:	4a96      	ldr	r2, [pc, #600]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007c90:	2388      	movs	r3, #136	@ 0x88
 8007c92:	58d3      	ldr	r3, [r2, r3]
 8007c94:	220c      	movs	r2, #12
 8007c96:	4393      	bics	r3, r2
 8007c98:	001a      	movs	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	4992      	ldr	r1, [pc, #584]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	2288      	movs	r2, #136	@ 0x88
 8007ca4:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2210      	movs	r2, #16
 8007cac:	4013      	ands	r3, r2
 8007cae:	d00a      	beq.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007cb0:	4a8d      	ldr	r2, [pc, #564]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007cb2:	2388      	movs	r3, #136	@ 0x88
 8007cb4:	58d3      	ldr	r3, [r2, r3]
 8007cb6:	4a8e      	ldr	r2, [pc, #568]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8007cb8:	401a      	ands	r2, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	695b      	ldr	r3, [r3, #20]
 8007cbe:	498a      	ldr	r1, [pc, #552]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	2288      	movs	r2, #136	@ 0x88
 8007cc4:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2208      	movs	r2, #8
 8007ccc:	4013      	ands	r3, r2
 8007cce:	d00a      	beq.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8007cd0:	4a85      	ldr	r2, [pc, #532]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007cd2:	2388      	movs	r3, #136	@ 0x88
 8007cd4:	58d3      	ldr	r3, [r2, r3]
 8007cd6:	4a87      	ldr	r2, [pc, #540]	@ (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8007cd8:	401a      	ands	r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	4982      	ldr	r1, [pc, #520]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	2288      	movs	r2, #136	@ 0x88
 8007ce4:	508b      	str	r3, [r1, r2]
  }
#if defined (LPUART3)
  /*-------------------------- LPUART3 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART3) == RCC_PERIPHCLK_LPUART3)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2204      	movs	r2, #4
 8007cec:	4013      	ands	r3, r2
 8007cee:	d00b      	beq.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART3CLKSOURCE(PeriphClkInit->Lpuart3ClockSelection));

    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
 8007cf0:	4a7d      	ldr	r2, [pc, #500]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007cf2:	2388      	movs	r3, #136	@ 0x88
 8007cf4:	58d3      	ldr	r3, [r2, r3]
 8007cf6:	22c0      	movs	r2, #192	@ 0xc0
 8007cf8:	4393      	bics	r3, r2
 8007cfa:	001a      	movs	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	4979      	ldr	r1, [pc, #484]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d02:	4313      	orrs	r3, r2
 8007d04:	2288      	movs	r2, #136	@ 0x88
 8007d06:	508b      	str	r3, [r1, r2]
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2220      	movs	r2, #32
 8007d0e:	4013      	ands	r3, r2
 8007d10:	d00a      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007d12:	4a75      	ldr	r2, [pc, #468]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d14:	2388      	movs	r3, #136	@ 0x88
 8007d16:	58d3      	ldr	r3, [r2, r3]
 8007d18:	4a77      	ldr	r2, [pc, #476]	@ (8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d1a:	401a      	ands	r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	699b      	ldr	r3, [r3, #24]
 8007d20:	4971      	ldr	r1, [pc, #452]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d22:	4313      	orrs	r3, r2
 8007d24:	2288      	movs	r2, #136	@ 0x88
 8007d26:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2240      	movs	r2, #64	@ 0x40
 8007d2e:	4013      	ands	r3, r2
 8007d30:	d00a      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007d32:	4a6d      	ldr	r2, [pc, #436]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d34:	2388      	movs	r3, #136	@ 0x88
 8007d36:	58d3      	ldr	r3, [r2, r3]
 8007d38:	4a70      	ldr	r2, [pc, #448]	@ (8007efc <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8007d3a:	401a      	ands	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	69db      	ldr	r3, [r3, #28]
 8007d40:	4969      	ldr	r1, [pc, #420]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d42:	4313      	orrs	r3, r2
 8007d44:	2288      	movs	r2, #136	@ 0x88
 8007d46:	508b      	str	r3, [r1, r2]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2280      	movs	r2, #128	@ 0x80
 8007d4e:	4013      	ands	r3, r2
 8007d50:	d00a      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d52:	4a65      	ldr	r2, [pc, #404]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d54:	2388      	movs	r3, #136	@ 0x88
 8007d56:	58d3      	ldr	r3, [r2, r3]
 8007d58:	4a69      	ldr	r2, [pc, #420]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8007d5a:	401a      	ands	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6a1b      	ldr	r3, [r3, #32]
 8007d60:	4961      	ldr	r1, [pc, #388]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d62:	4313      	orrs	r3, r2
 8007d64:	2288      	movs	r2, #136	@ 0x88
 8007d66:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	2380      	movs	r3, #128	@ 0x80
 8007d6e:	005b      	lsls	r3, r3, #1
 8007d70:	4013      	ands	r3, r2
 8007d72:	d00a      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007d74:	4a5c      	ldr	r2, [pc, #368]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d76:	2388      	movs	r3, #136	@ 0x88
 8007d78:	58d3      	ldr	r3, [r2, r3]
 8007d7a:	4a62      	ldr	r2, [pc, #392]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007d7c:	401a      	ands	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d82:	4959      	ldr	r1, [pc, #356]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d84:	4313      	orrs	r3, r2
 8007d86:	2288      	movs	r2, #136	@ 0x88
 8007d88:	508b      	str	r3, [r1, r2]
  }
#if defined (LPTIM3)
  /*----------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	2380      	movs	r3, #128	@ 0x80
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	4013      	ands	r3, r2
 8007d94:	d00a      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8007d96:	4a54      	ldr	r2, [pc, #336]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d98:	2388      	movs	r3, #136	@ 0x88
 8007d9a:	58d3      	ldr	r3, [r2, r3]
 8007d9c:	4a5a      	ldr	r2, [pc, #360]	@ (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8007d9e:	401a      	ands	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007da4:	4950      	ldr	r1, [pc, #320]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007da6:	4313      	orrs	r3, r2
 8007da8:	2288      	movs	r2, #136	@ 0x88
 8007daa:	508b      	str	r3, [r1, r2]
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	2380      	movs	r3, #128	@ 0x80
 8007db2:	01db      	lsls	r3, r3, #7
 8007db4:	4013      	ands	r3, r2
 8007db6:	d017      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007dbc:	2380      	movs	r3, #128	@ 0x80
 8007dbe:	055b      	lsls	r3, r3, #21
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d106      	bne.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x306>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 8007dc4:	4b48      	ldr	r3, [pc, #288]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007dc6:	68da      	ldr	r2, [r3, #12]
 8007dc8:	4b47      	ldr	r3, [pc, #284]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007dca:	2180      	movs	r1, #128	@ 0x80
 8007dcc:	0249      	lsls	r1, r1, #9
 8007dce:	430a      	orrs	r2, r1
 8007dd0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007dd2:	4a45      	ldr	r2, [pc, #276]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007dd4:	2388      	movs	r3, #136	@ 0x88
 8007dd6:	58d3      	ldr	r3, [r2, r3]
 8007dd8:	4a4c      	ldr	r2, [pc, #304]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x440>)
 8007dda:	401a      	ands	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007de0:	4941      	ldr	r1, [pc, #260]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007de2:	4313      	orrs	r3, r2
 8007de4:	2288      	movs	r2, #136	@ 0x88
 8007de6:	508b      	str	r3, [r1, r2]
  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	2380      	movs	r3, #128	@ 0x80
 8007dee:	015b      	lsls	r3, r3, #5
 8007df0:	4013      	ands	r3, r2
 8007df2:	d017      	beq.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLQ)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007df8:	2380      	movs	r3, #128	@ 0x80
 8007dfa:	051b      	lsls	r3, r3, #20
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d106      	bne.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8007e00:	4b39      	ldr	r3, [pc, #228]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e02:	68da      	ldr	r2, [r3, #12]
 8007e04:	4b38      	ldr	r3, [pc, #224]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e06:	2180      	movs	r1, #128	@ 0x80
 8007e08:	0449      	lsls	r1, r1, #17
 8007e0a:	430a      	orrs	r2, r1
 8007e0c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007e0e:	4a36      	ldr	r2, [pc, #216]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e10:	2388      	movs	r3, #136	@ 0x88
 8007e12:	58d3      	ldr	r3, [r2, r3]
 8007e14:	4a3e      	ldr	r2, [pc, #248]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007e16:	401a      	ands	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e1c:	4932      	ldr	r1, [pc, #200]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	2288      	movs	r2, #136	@ 0x88
 8007e22:	508b      	str	r3, [r1, r2]

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	2380      	movs	r3, #128	@ 0x80
 8007e2a:	019b      	lsls	r3, r3, #6
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	d017      	beq.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e34:	2380      	movs	r3, #128	@ 0x80
 8007e36:	051b      	lsls	r3, r3, #20
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d106      	bne.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x37e>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8007e3c:	4b2a      	ldr	r3, [pc, #168]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e3e:	68da      	ldr	r2, [r3, #12]
 8007e40:	4b29      	ldr	r3, [pc, #164]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e42:	2180      	movs	r1, #128	@ 0x80
 8007e44:	0449      	lsls	r1, r1, #17
 8007e46:	430a      	orrs	r2, r1
 8007e48:	60da      	str	r2, [r3, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e4a:	4a27      	ldr	r2, [pc, #156]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e4c:	2388      	movs	r3, #136	@ 0x88
 8007e4e:	58d3      	ldr	r3, [r2, r3]
 8007e50:	4a2f      	ldr	r2, [pc, #188]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007e52:	401a      	ands	r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e58:	4923      	ldr	r1, [pc, #140]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	2288      	movs	r2, #136	@ 0x88
 8007e5e:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	2380      	movs	r3, #128	@ 0x80
 8007e66:	00db      	lsls	r3, r3, #3
 8007e68:	4013      	ands	r3, r2
 8007e6a:	d017      	beq.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e70:	2380      	movs	r3, #128	@ 0x80
 8007e72:	045b      	lsls	r3, r3, #17
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d106      	bne.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8007e78:	4b1b      	ldr	r3, [pc, #108]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e7a:	68da      	ldr	r2, [r3, #12]
 8007e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e7e:	2180      	movs	r1, #128	@ 0x80
 8007e80:	0449      	lsls	r1, r1, #17
 8007e82:	430a      	orrs	r2, r1
 8007e84:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007e86:	4a18      	ldr	r2, [pc, #96]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e88:	2388      	movs	r3, #136	@ 0x88
 8007e8a:	58d3      	ldr	r3, [r2, r3]
 8007e8c:	4a21      	ldr	r2, [pc, #132]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8007e8e:	401a      	ands	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e94:	4914      	ldr	r1, [pc, #80]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e96:	4313      	orrs	r3, r2
 8007e98:	2288      	movs	r2, #136	@ 0x88
 8007e9a:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	2380      	movs	r3, #128	@ 0x80
 8007ea2:	011b      	lsls	r3, r3, #4
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	d017      	beq.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007eac:	2380      	movs	r3, #128	@ 0x80
 8007eae:	049b      	lsls	r3, r3, #18
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d106      	bne.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8007eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007eb6:	68da      	ldr	r2, [r3, #12]
 8007eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007eba:	2180      	movs	r1, #128	@ 0x80
 8007ebc:	0449      	lsls	r1, r1, #17
 8007ebe:	430a      	orrs	r2, r1
 8007ec0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007ec2:	4a09      	ldr	r2, [pc, #36]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007ec4:	2388      	movs	r3, #136	@ 0x88
 8007ec6:	58d3      	ldr	r3, [r2, r3]
 8007ec8:	4a12      	ldr	r2, [pc, #72]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8007eca:	401a      	ands	r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ed0:	4905      	ldr	r1, [pc, #20]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	2288      	movs	r2, #136	@ 0x88
 8007ed6:	508b      	str	r3, [r1, r2]

  }

  return status;
 8007ed8:	2312      	movs	r3, #18
 8007eda:	18fb      	adds	r3, r7, r3
 8007edc:	781b      	ldrb	r3, [r3, #0]
}
 8007ede:	0018      	movs	r0, r3
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	b006      	add	sp, #24
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	46c0      	nop			@ (mov r8, r8)
 8007ee8:	40021000 	.word	0x40021000
 8007eec:	efffffff 	.word	0xefffffff
 8007ef0:	fffff3ff 	.word	0xfffff3ff
 8007ef4:	fffffcff 	.word	0xfffffcff
 8007ef8:	ffffcfff 	.word	0xffffcfff
 8007efc:	fffcffff 	.word	0xfffcffff
 8007f00:	fff3ffff 	.word	0xfff3ffff
 8007f04:	ffcfffff 	.word	0xffcfffff
 8007f08:	ff3fffff 	.word	0xff3fffff
 8007f0c:	cfffffff 	.word	0xcfffffff
 8007f10:	f3ffffff 	.word	0xf3ffffff
 8007f14:	feffffff 	.word	0xfeffffff

08007f18 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM1  TIM1 peripheral clock (only for devices with TIM1)
  *            @arg @ref RCC_PERIPHCLK_TIM15  TIM15 peripheral clock (only for devices with TIM15)
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007f18:	b590      	push	{r4, r7, lr}
 8007f1a:	b089      	sub	sp, #36	@ 0x24
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8007f20:	2300      	movs	r3, #0
 8007f22:	61fb      	str	r3, [r7, #28]
  PLL_ClocksTypeDef pll_freq;
  uint32_t msirange;
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	2380      	movs	r3, #128	@ 0x80
 8007f28:	021b      	lsls	r3, r3, #8
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d154      	bne.n	8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
  {
    /* Get the current RCC_PERIPHCLK_RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007f2e:	4ad5      	ldr	r2, [pc, #852]	@ (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007f30:	2390      	movs	r3, #144	@ 0x90
 8007f32:	58d2      	ldr	r2, [r2, r3]
 8007f34:	23c0      	movs	r3, #192	@ 0xc0
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	4013      	ands	r3, r2
 8007f3a:	617b      	str	r3, [r7, #20]

    switch (srcclk)
 8007f3c:	697a      	ldr	r2, [r7, #20]
 8007f3e:	23c0      	movs	r3, #192	@ 0xc0
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d039      	beq.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8007f46:	697a      	ldr	r2, [r7, #20]
 8007f48:	23c0      	movs	r3, #192	@ 0xc0
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d901      	bls.n	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8007f50:	f000 fd1a 	bl	8008988 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8007f54:	697a      	ldr	r2, [r7, #20]
 8007f56:	2380      	movs	r3, #128	@ 0x80
 8007f58:	005b      	lsls	r3, r3, #1
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d006      	beq.n	8007f6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8007f5e:	697a      	ldr	r2, [r7, #20]
 8007f60:	2380      	movs	r3, #128	@ 0x80
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d00f      	beq.n	8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 8007f68:	f000 fd0e 	bl	8008988 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007f6c:	4ac5      	ldr	r2, [pc, #788]	@ (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007f6e:	2390      	movs	r3, #144	@ 0x90
 8007f70:	58d3      	ldr	r3, [r2, r3]
 8007f72:	2202      	movs	r2, #2
 8007f74:	4013      	ands	r3, r2
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d001      	beq.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 8007f7a:	f000 fd07 	bl	800898c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
          frequency = LSE_VALUE;
 8007f7e:	2380      	movs	r3, #128	@ 0x80
 8007f80:	021b      	lsls	r3, r3, #8
 8007f82:	61fb      	str	r3, [r7, #28]
        break;
 8007f84:	f000 fd02 	bl	800898c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007f88:	4abe      	ldr	r2, [pc, #760]	@ (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007f8a:	2394      	movs	r3, #148	@ 0x94
 8007f8c:	58d3      	ldr	r3, [r2, r3]
 8007f8e:	2202      	movs	r2, #2
 8007f90:	4013      	ands	r3, r2
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	d001      	beq.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 8007f96:	f000 fcfb 	bl	8008990 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8007f9a:	4aba      	ldr	r2, [pc, #744]	@ (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007f9c:	2394      	movs	r3, #148	@ 0x94
 8007f9e:	58d3      	ldr	r3, [r2, r3]
 8007fa0:	2204      	movs	r2, #4
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	2b04      	cmp	r3, #4
 8007fa6:	d103      	bne.n	8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSI_VALUE / 128U;
 8007fa8:	23fa      	movs	r3, #250	@ 0xfa
 8007faa:	61fb      	str	r3, [r7, #28]
        break;
 8007fac:	f000 fcf0 	bl	8008990 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
            frequency = LSI_VALUE;
 8007fb0:	23fa      	movs	r3, #250	@ 0xfa
 8007fb2:	01db      	lsls	r3, r3, #7
 8007fb4:	61fb      	str	r3, [r7, #28]
        break;
 8007fb6:	f000 fceb 	bl	8008990 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007fba:	4bb2      	ldr	r3, [pc, #712]	@ (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	2380      	movs	r3, #128	@ 0x80
 8007fc0:	029b      	lsls	r3, r3, #10
 8007fc2:	401a      	ands	r2, r3
 8007fc4:	2380      	movs	r3, #128	@ 0x80
 8007fc6:	029b      	lsls	r3, r3, #10
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d001      	beq.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8007fcc:	f000 fce2 	bl	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
          frequency = HSE_VALUE / 32U;
 8007fd0:	4bad      	ldr	r3, [pc, #692]	@ (8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 8007fd2:	61fb      	str	r3, [r7, #28]
        break;
 8007fd4:	f000 fcde 	bl	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	2380      	movs	r3, #128	@ 0x80
 8007fdc:	029b      	lsls	r3, r3, #10
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d100      	bne.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8007fe2:	e11a      	b.n	800821a <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	2380      	movs	r3, #128	@ 0x80
 8007fe8:	029b      	lsls	r3, r3, #10
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d901      	bls.n	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8007fee:	f000 fcd3 	bl	8008998 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	2380      	movs	r3, #128	@ 0x80
 8007ff6:	025b      	lsls	r3, r3, #9
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d100      	bne.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8007ffc:	e10d      	b.n	800821a <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	2380      	movs	r3, #128	@ 0x80
 8008002:	025b      	lsls	r3, r3, #9
 8008004:	429a      	cmp	r2, r3
 8008006:	d901      	bls.n	800800c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008008:	f000 fcc6 	bl	8008998 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	2380      	movs	r3, #128	@ 0x80
 8008010:	01db      	lsls	r3, r3, #7
 8008012:	429a      	cmp	r2, r3
 8008014:	d100      	bne.n	8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8008016:	e1eb      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	2380      	movs	r3, #128	@ 0x80
 800801c:	01db      	lsls	r3, r3, #7
 800801e:	429a      	cmp	r2, r3
 8008020:	d901      	bls.n	8008026 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8008022:	f000 fcb9 	bl	8008998 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	2380      	movs	r3, #128	@ 0x80
 800802a:	019b      	lsls	r3, r3, #6
 800802c:	429a      	cmp	r2, r3
 800802e:	d101      	bne.n	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 8008030:	f000 fc50 	bl	80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	2380      	movs	r3, #128	@ 0x80
 8008038:	019b      	lsls	r3, r3, #6
 800803a:	429a      	cmp	r2, r3
 800803c:	d901      	bls.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800803e:	f000 fcab 	bl	8008998 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	2380      	movs	r3, #128	@ 0x80
 8008046:	015b      	lsls	r3, r3, #5
 8008048:	429a      	cmp	r2, r3
 800804a:	d101      	bne.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800804c:	f000 fbe2 	bl	8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	2380      	movs	r3, #128	@ 0x80
 8008054:	015b      	lsls	r3, r3, #5
 8008056:	429a      	cmp	r2, r3
 8008058:	d901      	bls.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800805a:	f000 fc9d 	bl	8008998 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	2380      	movs	r3, #128	@ 0x80
 8008062:	011b      	lsls	r3, r3, #4
 8008064:	429a      	cmp	r2, r3
 8008066:	d101      	bne.n	800806c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8008068:	f000 fba9 	bl	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	2380      	movs	r3, #128	@ 0x80
 8008070:	011b      	lsls	r3, r3, #4
 8008072:	429a      	cmp	r2, r3
 8008074:	d901      	bls.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8008076:	f000 fc8f 	bl	8008998 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	2380      	movs	r3, #128	@ 0x80
 800807e:	00db      	lsls	r3, r3, #3
 8008080:	429a      	cmp	r2, r3
 8008082:	d101      	bne.n	8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8008084:	f000 fb70 	bl	8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	2380      	movs	r3, #128	@ 0x80
 800808c:	00db      	lsls	r3, r3, #3
 800808e:	429a      	cmp	r2, r3
 8008090:	d901      	bls.n	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8008092:	f000 fc81 	bl	8008998 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	2380      	movs	r3, #128	@ 0x80
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	429a      	cmp	r2, r3
 800809e:	d100      	bne.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 80080a0:	e305      	b.n	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0x796>
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	2380      	movs	r3, #128	@ 0x80
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d901      	bls.n	80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 80080ac:	f000 fc74 	bl	8008998 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	2380      	movs	r3, #128	@ 0x80
 80080b4:	005b      	lsls	r3, r3, #1
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d100      	bne.n	80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80080ba:	e29b      	b.n	80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	2380      	movs	r3, #128	@ 0x80
 80080c0:	005b      	lsls	r3, r3, #1
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d901      	bls.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 80080c6:	f000 fc67 	bl	8008998 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2b80      	cmp	r3, #128	@ 0x80
 80080ce:	d100      	bne.n	80080d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 80080d0:	e22f      	b.n	8008532 <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2b80      	cmp	r3, #128	@ 0x80
 80080d6:	d901      	bls.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 80080d8:	f000 fc5e 	bl	8008998 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2b20      	cmp	r3, #32
 80080e0:	d80f      	bhi.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d101      	bne.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 80080e8:	f000 fc56 	bl	8008998 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2b20      	cmp	r3, #32
 80080f0:	d901      	bls.n	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 80080f2:	f000 fc51 	bl	8008998 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	009a      	lsls	r2, r3, #2
 80080fa:	4b64      	ldr	r3, [pc, #400]	@ (800828c <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 80080fc:	18d3      	adds	r3, r2, r3
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	469f      	mov	pc, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2b40      	cmp	r3, #64	@ 0x40
 8008106:	d100      	bne.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 8008108:	e1df      	b.n	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            break;
        }
        break;
      }
      default:
        break;
 800810a:	f000 fc45 	bl	8008998 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800810e:	4a5d      	ldr	r2, [pc, #372]	@ (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8008110:	2388      	movs	r3, #136	@ 0x88
 8008112:	58d3      	ldr	r3, [r2, r3]
 8008114:	2203      	movs	r2, #3
 8008116:	4013      	ands	r3, r2
 8008118:	617b      	str	r3, [r7, #20]
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	2b03      	cmp	r3, #3
 800811e:	d025      	beq.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	2b03      	cmp	r3, #3
 8008124:	d82d      	bhi.n	8008182 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	2b02      	cmp	r3, #2
 800812a:	d013      	beq.n	8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	2b02      	cmp	r3, #2
 8008130:	d827      	bhi.n	8008182 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d003      	beq.n	8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d005      	beq.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0x232>
            break;
 800813e:	e020      	b.n	8008182 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
            frequency = HAL_RCC_GetPCLK1Freq();
 8008140:	f7ff fc40 	bl	80079c4 <HAL_RCC_GetPCLK1Freq>
 8008144:	0003      	movs	r3, r0
 8008146:	61fb      	str	r3, [r7, #28]
            break;
 8008148:	e022      	b.n	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            frequency = HAL_RCC_GetSysClockFreq();
 800814a:	f7ff fb95 	bl	8007878 <HAL_RCC_GetSysClockFreq>
 800814e:	0003      	movs	r3, r0
 8008150:	61fb      	str	r3, [r7, #28]
            break;
 8008152:	e01d      	b.n	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008154:	4b4b      	ldr	r3, [pc, #300]	@ (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	2380      	movs	r3, #128	@ 0x80
 800815a:	00db      	lsls	r3, r3, #3
 800815c:	401a      	ands	r2, r3
 800815e:	2380      	movs	r3, #128	@ 0x80
 8008160:	00db      	lsls	r3, r3, #3
 8008162:	429a      	cmp	r2, r3
 8008164:	d110      	bne.n	8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
              frequency = HSI_VALUE;
 8008166:	4b4a      	ldr	r3, [pc, #296]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 8008168:	61fb      	str	r3, [r7, #28]
            break;
 800816a:	e00d      	b.n	8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800816c:	4a45      	ldr	r2, [pc, #276]	@ (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800816e:	2390      	movs	r3, #144	@ 0x90
 8008170:	58d3      	ldr	r3, [r2, r3]
 8008172:	2202      	movs	r2, #2
 8008174:	4013      	ands	r3, r2
 8008176:	2b02      	cmp	r3, #2
 8008178:	d109      	bne.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
              frequency = LSE_VALUE;
 800817a:	2380      	movs	r3, #128	@ 0x80
 800817c:	021b      	lsls	r3, r3, #8
 800817e:	61fb      	str	r3, [r7, #28]
            break;
 8008180:	e005      	b.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
            break;
 8008182:	46c0      	nop			@ (mov r8, r8)
 8008184:	f000 fc09 	bl	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008188:	46c0      	nop			@ (mov r8, r8)
 800818a:	f000 fc06 	bl	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800818e:	46c0      	nop			@ (mov r8, r8)
        break;
 8008190:	f000 fc03 	bl	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008194:	4a3b      	ldr	r2, [pc, #236]	@ (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8008196:	2388      	movs	r3, #136	@ 0x88
 8008198:	58d3      	ldr	r3, [r2, r3]
 800819a:	220c      	movs	r2, #12
 800819c:	4013      	ands	r3, r2
 800819e:	617b      	str	r3, [r7, #20]
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	2b0c      	cmp	r3, #12
 80081a4:	d025      	beq.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2da>
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	2b0c      	cmp	r3, #12
 80081aa:	d82d      	bhi.n	8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	2b08      	cmp	r3, #8
 80081b0:	d013      	beq.n	80081da <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	2b08      	cmp	r3, #8
 80081b6:	d827      	bhi.n	8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d003      	beq.n	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	2b04      	cmp	r3, #4
 80081c2:	d005      	beq.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
            break;
 80081c4:	e020      	b.n	8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
            frequency = HAL_RCC_GetPCLK1Freq();
 80081c6:	f7ff fbfd 	bl	80079c4 <HAL_RCC_GetPCLK1Freq>
 80081ca:	0003      	movs	r3, r0
 80081cc:	61fb      	str	r3, [r7, #28]
            break;
 80081ce:	e022      	b.n	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            frequency = HAL_RCC_GetSysClockFreq();
 80081d0:	f7ff fb52 	bl	8007878 <HAL_RCC_GetSysClockFreq>
 80081d4:	0003      	movs	r3, r0
 80081d6:	61fb      	str	r3, [r7, #28]
            break;
 80081d8:	e01d      	b.n	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80081da:	4b2a      	ldr	r3, [pc, #168]	@ (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	2380      	movs	r3, #128	@ 0x80
 80081e0:	00db      	lsls	r3, r3, #3
 80081e2:	401a      	ands	r2, r3
 80081e4:	2380      	movs	r3, #128	@ 0x80
 80081e6:	00db      	lsls	r3, r3, #3
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d110      	bne.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
              frequency = HSI_VALUE;
 80081ec:	4b28      	ldr	r3, [pc, #160]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 80081ee:	61fb      	str	r3, [r7, #28]
            break;
 80081f0:	e00d      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80081f2:	4a24      	ldr	r2, [pc, #144]	@ (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80081f4:	2390      	movs	r3, #144	@ 0x90
 80081f6:	58d3      	ldr	r3, [r2, r3]
 80081f8:	2202      	movs	r2, #2
 80081fa:	4013      	ands	r3, r2
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	d109      	bne.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
              frequency = LSE_VALUE;
 8008200:	2380      	movs	r3, #128	@ 0x80
 8008202:	021b      	lsls	r3, r3, #8
 8008204:	61fb      	str	r3, [r7, #28]
            break;
 8008206:	e005      	b.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
            break;
 8008208:	46c0      	nop			@ (mov r8, r8)
 800820a:	f000 fbc6 	bl	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800820e:	46c0      	nop			@ (mov r8, r8)
 8008210:	f000 fbc3 	bl	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008214:	46c0      	nop			@ (mov r8, r8)
        break;
 8008216:	f000 fbc0 	bl	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        frequency = HAL_RCC_GetPCLK1Freq();
 800821a:	f7ff fbd3 	bl	80079c4 <HAL_RCC_GetPCLK1Freq>
 800821e:	0003      	movs	r3, r0
 8008220:	61fb      	str	r3, [r7, #28]
        break;
 8008222:	f000 fbba 	bl	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008226:	4a17      	ldr	r2, [pc, #92]	@ (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8008228:	2388      	movs	r3, #136	@ 0x88
 800822a:	58d2      	ldr	r2, [r2, r3]
 800822c:	23c0      	movs	r3, #192	@ 0xc0
 800822e:	011b      	lsls	r3, r3, #4
 8008230:	4013      	ands	r3, r2
 8008232:	617b      	str	r3, [r7, #20]
 8008234:	697a      	ldr	r2, [r7, #20]
 8008236:	23c0      	movs	r3, #192	@ 0xc0
 8008238:	011b      	lsls	r3, r3, #4
 800823a:	429a      	cmp	r2, r3
 800823c:	d036      	beq.n	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 800823e:	697a      	ldr	r2, [r7, #20]
 8008240:	23c0      	movs	r3, #192	@ 0xc0
 8008242:	011b      	lsls	r3, r3, #4
 8008244:	429a      	cmp	r2, r3
 8008246:	d83c      	bhi.n	80082c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8008248:	697a      	ldr	r2, [r7, #20]
 800824a:	2380      	movs	r3, #128	@ 0x80
 800824c:	011b      	lsls	r3, r3, #4
 800824e:	429a      	cmp	r2, r3
 8008250:	d020      	beq.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8008252:	697a      	ldr	r2, [r7, #20]
 8008254:	2380      	movs	r3, #128	@ 0x80
 8008256:	011b      	lsls	r3, r3, #4
 8008258:	429a      	cmp	r2, r3
 800825a:	d832      	bhi.n	80082c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d005      	beq.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8008262:	697a      	ldr	r2, [r7, #20]
 8008264:	2380      	movs	r3, #128	@ 0x80
 8008266:	00db      	lsls	r3, r3, #3
 8008268:	429a      	cmp	r2, r3
 800826a:	d005      	beq.n	8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
            break;
 800826c:	e029      	b.n	80082c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 800826e:	f7ff fba9 	bl	80079c4 <HAL_RCC_GetPCLK1Freq>
 8008272:	0003      	movs	r3, r0
 8008274:	61fb      	str	r3, [r7, #28]
            break;
 8008276:	e02b      	b.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
            frequency = HAL_RCC_GetSysClockFreq();
 8008278:	f7ff fafe 	bl	8007878 <HAL_RCC_GetSysClockFreq>
 800827c:	0003      	movs	r3, r0
 800827e:	61fb      	str	r3, [r7, #28]
            break;
 8008280:	e026      	b.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8008282:	46c0      	nop			@ (mov r8, r8)
 8008284:	40021000 	.word	0x40021000
 8008288:	0001e848 	.word	0x0001e848
 800828c:	08010070 	.word	0x08010070
 8008290:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008294:	4bbb      	ldr	r3, [pc, #748]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	2380      	movs	r3, #128	@ 0x80
 800829a:	00db      	lsls	r3, r3, #3
 800829c:	401a      	ands	r2, r3
 800829e:	2380      	movs	r3, #128	@ 0x80
 80082a0:	00db      	lsls	r3, r3, #3
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d110      	bne.n	80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
              frequency = HSI_VALUE;
 80082a6:	4bb8      	ldr	r3, [pc, #736]	@ (8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 80082a8:	61fb      	str	r3, [r7, #28]
            break;
 80082aa:	e00d      	b.n	80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80082ac:	4ab5      	ldr	r2, [pc, #724]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80082ae:	2390      	movs	r3, #144	@ 0x90
 80082b0:	58d3      	ldr	r3, [r2, r3]
 80082b2:	2202      	movs	r2, #2
 80082b4:	4013      	ands	r3, r2
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	d109      	bne.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
              frequency = LSE_VALUE;
 80082ba:	2380      	movs	r3, #128	@ 0x80
 80082bc:	021b      	lsls	r3, r3, #8
 80082be:	61fb      	str	r3, [r7, #28]
            break;
 80082c0:	e005      	b.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
            break;
 80082c2:	46c0      	nop			@ (mov r8, r8)
 80082c4:	f000 fb69 	bl	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80082c8:	46c0      	nop			@ (mov r8, r8)
 80082ca:	f000 fb66 	bl	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80082ce:	46c0      	nop			@ (mov r8, r8)
        break;
 80082d0:	f000 fb63 	bl	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 80082d4:	4aab      	ldr	r2, [pc, #684]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80082d6:	2388      	movs	r3, #136	@ 0x88
 80082d8:	58d2      	ldr	r2, [r2, r3]
 80082da:	23c0      	movs	r3, #192	@ 0xc0
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	4013      	ands	r3, r2
 80082e0:	617b      	str	r3, [r7, #20]
 80082e2:	697a      	ldr	r2, [r7, #20]
 80082e4:	23c0      	movs	r3, #192	@ 0xc0
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d02d      	beq.n	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
 80082ec:	697a      	ldr	r2, [r7, #20]
 80082ee:	23c0      	movs	r3, #192	@ 0xc0
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d833      	bhi.n	800835e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80082f6:	697a      	ldr	r2, [r7, #20]
 80082f8:	2380      	movs	r3, #128	@ 0x80
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d017      	beq.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8008300:	697a      	ldr	r2, [r7, #20]
 8008302:	2380      	movs	r3, #128	@ 0x80
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	429a      	cmp	r2, r3
 8008308:	d829      	bhi.n	800835e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d005      	beq.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 8008310:	697a      	ldr	r2, [r7, #20]
 8008312:	2380      	movs	r3, #128	@ 0x80
 8008314:	005b      	lsls	r3, r3, #1
 8008316:	429a      	cmp	r2, r3
 8008318:	d005      	beq.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            break;
 800831a:	e020      	b.n	800835e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
            frequency = HAL_RCC_GetPCLK1Freq();
 800831c:	f7ff fb52 	bl	80079c4 <HAL_RCC_GetPCLK1Freq>
 8008320:	0003      	movs	r3, r0
 8008322:	61fb      	str	r3, [r7, #28]
            break;
 8008324:	e022      	b.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            frequency = HAL_RCC_GetSysClockFreq();
 8008326:	f7ff faa7 	bl	8007878 <HAL_RCC_GetSysClockFreq>
 800832a:	0003      	movs	r3, r0
 800832c:	61fb      	str	r3, [r7, #28]
            break;
 800832e:	e01d      	b.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008330:	4b94      	ldr	r3, [pc, #592]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	2380      	movs	r3, #128	@ 0x80
 8008336:	00db      	lsls	r3, r3, #3
 8008338:	401a      	ands	r2, r3
 800833a:	2380      	movs	r3, #128	@ 0x80
 800833c:	00db      	lsls	r3, r3, #3
 800833e:	429a      	cmp	r2, r3
 8008340:	d110      	bne.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
              frequency = HSI_VALUE;
 8008342:	4b91      	ldr	r3, [pc, #580]	@ (8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8008344:	61fb      	str	r3, [r7, #28]
            break;
 8008346:	e00d      	b.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008348:	4a8e      	ldr	r2, [pc, #568]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800834a:	2390      	movs	r3, #144	@ 0x90
 800834c:	58d3      	ldr	r3, [r2, r3]
 800834e:	2202      	movs	r2, #2
 8008350:	4013      	ands	r3, r2
 8008352:	2b02      	cmp	r3, #2
 8008354:	d109      	bne.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x452>
              frequency = LSE_VALUE;
 8008356:	2380      	movs	r3, #128	@ 0x80
 8008358:	021b      	lsls	r3, r3, #8
 800835a:	61fb      	str	r3, [r7, #28]
            break;
 800835c:	e005      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            break;
 800835e:	46c0      	nop			@ (mov r8, r8)
 8008360:	f000 fb1b 	bl	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008364:	46c0      	nop			@ (mov r8, r8)
 8008366:	f000 fb18 	bl	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800836a:	46c0      	nop			@ (mov r8, r8)
        break;
 800836c:	f000 fb15 	bl	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART3_SOURCE();
 8008370:	4a84      	ldr	r2, [pc, #528]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8008372:	2388      	movs	r3, #136	@ 0x88
 8008374:	58d3      	ldr	r3, [r2, r3]
 8008376:	22c0      	movs	r2, #192	@ 0xc0
 8008378:	4013      	ands	r3, r2
 800837a:	617b      	str	r3, [r7, #20]
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008380:	d025      	beq.n	80083ce <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	2bc0      	cmp	r3, #192	@ 0xc0
 8008386:	d82d      	bhi.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	2b80      	cmp	r3, #128	@ 0x80
 800838c:	d013      	beq.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	2b80      	cmp	r3, #128	@ 0x80
 8008392:	d827      	bhi.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d003      	beq.n	80083a2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	2b40      	cmp	r3, #64	@ 0x40
 800839e:	d005      	beq.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            break;
 80083a0:	e020      	b.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 80083a2:	f7ff fb0f 	bl	80079c4 <HAL_RCC_GetPCLK1Freq>
 80083a6:	0003      	movs	r3, r0
 80083a8:	61fb      	str	r3, [r7, #28]
            break;
 80083aa:	e020      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            frequency = HAL_RCC_GetSysClockFreq();
 80083ac:	f7ff fa64 	bl	8007878 <HAL_RCC_GetSysClockFreq>
 80083b0:	0003      	movs	r3, r0
 80083b2:	61fb      	str	r3, [r7, #28]
            break;
 80083b4:	e01b      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80083b6:	4b73      	ldr	r3, [pc, #460]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	2380      	movs	r3, #128	@ 0x80
 80083bc:	00db      	lsls	r3, r3, #3
 80083be:	401a      	ands	r2, r3
 80083c0:	2380      	movs	r3, #128	@ 0x80
 80083c2:	00db      	lsls	r3, r3, #3
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d10f      	bne.n	80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
              frequency = HSI_VALUE;
 80083c8:	4b6f      	ldr	r3, [pc, #444]	@ (8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 80083ca:	61fb      	str	r3, [r7, #28]
            break;
 80083cc:	e00c      	b.n	80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80083ce:	4a6d      	ldr	r2, [pc, #436]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80083d0:	2390      	movs	r3, #144	@ 0x90
 80083d2:	58d3      	ldr	r3, [r2, r3]
 80083d4:	2202      	movs	r2, #2
 80083d6:	4013      	ands	r3, r2
 80083d8:	2b02      	cmp	r3, #2
 80083da:	d107      	bne.n	80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
              frequency = LSE_VALUE;
 80083dc:	2380      	movs	r3, #128	@ 0x80
 80083de:	021b      	lsls	r3, r3, #8
 80083e0:	61fb      	str	r3, [r7, #28]
            break;
 80083e2:	e003      	b.n	80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
            break;
 80083e4:	46c0      	nop			@ (mov r8, r8)
 80083e6:	e2d8      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80083e8:	46c0      	nop			@ (mov r8, r8)
 80083ea:	e2d6      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80083ec:	46c0      	nop			@ (mov r8, r8)
        break;
 80083ee:	e2d4      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80083f0:	4a64      	ldr	r2, [pc, #400]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80083f2:	2388      	movs	r3, #136	@ 0x88
 80083f4:	58d2      	ldr	r2, [r2, r3]
 80083f6:	23c0      	movs	r3, #192	@ 0xc0
 80083f8:	059b      	lsls	r3, r3, #22
 80083fa:	4013      	ands	r3, r2
 80083fc:	617b      	str	r3, [r7, #20]
 80083fe:	697a      	ldr	r2, [r7, #20]
 8008400:	2380      	movs	r3, #128	@ 0x80
 8008402:	059b      	lsls	r3, r3, #22
 8008404:	429a      	cmp	r2, r3
 8008406:	d012      	beq.n	800842e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008408:	697a      	ldr	r2, [r7, #20]
 800840a:	2380      	movs	r3, #128	@ 0x80
 800840c:	059b      	lsls	r3, r3, #22
 800840e:	429a      	cmp	r2, r3
 8008410:	d825      	bhi.n	800845e <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d005      	beq.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 8008418:	697a      	ldr	r2, [r7, #20]
 800841a:	2380      	movs	r3, #128	@ 0x80
 800841c:	055b      	lsls	r3, r3, #21
 800841e:	429a      	cmp	r2, r3
 8008420:	d014      	beq.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0x534>
            break;
 8008422:	e01c      	b.n	800845e <HAL_RCCEx_GetPeriphCLKFreq+0x546>
            frequency = HAL_RCC_GetSysClockFreq();
 8008424:	f7ff fa28 	bl	8007878 <HAL_RCC_GetSysClockFreq>
 8008428:	0003      	movs	r3, r0
 800842a:	61fb      	str	r3, [r7, #28]
            break;
 800842c:	e018      	b.n	8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800842e:	4b55      	ldr	r3, [pc, #340]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	2380      	movs	r3, #128	@ 0x80
 8008434:	00db      	lsls	r3, r3, #3
 8008436:	401a      	ands	r2, r3
 8008438:	2380      	movs	r3, #128	@ 0x80
 800843a:	00db      	lsls	r3, r3, #3
 800843c:	429a      	cmp	r2, r3
 800843e:	d102      	bne.n	8008446 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
              frequency = HSI_VALUE;
 8008440:	4b51      	ldr	r3, [pc, #324]	@ (8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8008442:	61fb      	str	r3, [r7, #28]
            break;
 8008444:	e00c      	b.n	8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
              frequency = 0U;
 8008446:	2300      	movs	r3, #0
 8008448:	61fb      	str	r3, [r7, #28]
            break;
 800844a:	e009      	b.n	8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 800844c:	2408      	movs	r4, #8
 800844e:	193b      	adds	r3, r7, r4
 8008450:	0018      	movs	r0, r3
 8008452:	f000 faad 	bl	80089b0 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_P_Frequency;
 8008456:	193b      	adds	r3, r7, r4
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	61fb      	str	r3, [r7, #28]
            break;
 800845c:	e000      	b.n	8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            break;
 800845e:	46c0      	nop			@ (mov r8, r8)
        break;
 8008460:	e29b      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008462:	4a48      	ldr	r2, [pc, #288]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8008464:	2388      	movs	r3, #136	@ 0x88
 8008466:	58d2      	ldr	r2, [r2, r3]
 8008468:	23c0      	movs	r3, #192	@ 0xc0
 800846a:	019b      	lsls	r3, r3, #6
 800846c:	4013      	ands	r3, r2
 800846e:	617b      	str	r3, [r7, #20]
 8008470:	697a      	ldr	r2, [r7, #20]
 8008472:	2380      	movs	r3, #128	@ 0x80
 8008474:	019b      	lsls	r3, r3, #6
 8008476:	429a      	cmp	r2, r3
 8008478:	d017      	beq.n	80084aa <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 800847a:	697a      	ldr	r2, [r7, #20]
 800847c:	2380      	movs	r3, #128	@ 0x80
 800847e:	019b      	lsls	r3, r3, #6
 8008480:	429a      	cmp	r2, r3
 8008482:	d81e      	bhi.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d005      	beq.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 800848a:	697a      	ldr	r2, [r7, #20]
 800848c:	2380      	movs	r3, #128	@ 0x80
 800848e:	015b      	lsls	r3, r3, #5
 8008490:	429a      	cmp	r2, r3
 8008492:	d005      	beq.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
            break;
 8008494:	e015      	b.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 8008496:	f7ff fa95 	bl	80079c4 <HAL_RCC_GetPCLK1Freq>
 800849a:	0003      	movs	r3, r0
 800849c:	61fb      	str	r3, [r7, #28]
            break;
 800849e:	e013      	b.n	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            frequency = HAL_RCC_GetSysClockFreq();
 80084a0:	f7ff f9ea 	bl	8007878 <HAL_RCC_GetSysClockFreq>
 80084a4:	0003      	movs	r3, r0
 80084a6:	61fb      	str	r3, [r7, #28]
            break;
 80084a8:	e00e      	b.n	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80084aa:	4b36      	ldr	r3, [pc, #216]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	2380      	movs	r3, #128	@ 0x80
 80084b0:	00db      	lsls	r3, r3, #3
 80084b2:	401a      	ands	r2, r3
 80084b4:	2380      	movs	r3, #128	@ 0x80
 80084b6:	00db      	lsls	r3, r3, #3
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d104      	bne.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
              frequency = HSI_VALUE;
 80084bc:	4b32      	ldr	r3, [pc, #200]	@ (8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 80084be:	61fb      	str	r3, [r7, #28]
            break;
 80084c0:	e001      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
            break;
 80084c2:	46c0      	nop			@ (mov r8, r8)
 80084c4:	e269      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80084c6:	46c0      	nop			@ (mov r8, r8)
        break;
 80084c8:	e267      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80084ca:	4a2e      	ldr	r2, [pc, #184]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80084cc:	2388      	movs	r3, #136	@ 0x88
 80084ce:	58d2      	ldr	r2, [r2, r3]
 80084d0:	23c0      	movs	r3, #192	@ 0xc0
 80084d2:	029b      	lsls	r3, r3, #10
 80084d4:	4013      	ands	r3, r2
 80084d6:	617b      	str	r3, [r7, #20]
 80084d8:	697a      	ldr	r2, [r7, #20]
 80084da:	2380      	movs	r3, #128	@ 0x80
 80084dc:	029b      	lsls	r3, r3, #10
 80084de:	429a      	cmp	r2, r3
 80084e0:	d017      	beq.n	8008512 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
 80084e2:	697a      	ldr	r2, [r7, #20]
 80084e4:	2380      	movs	r3, #128	@ 0x80
 80084e6:	029b      	lsls	r3, r3, #10
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d81e      	bhi.n	800852a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d005      	beq.n	80084fe <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 80084f2:	697a      	ldr	r2, [r7, #20]
 80084f4:	2380      	movs	r3, #128	@ 0x80
 80084f6:	025b      	lsls	r3, r3, #9
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d005      	beq.n	8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
            break;
 80084fc:	e015      	b.n	800852a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
            frequency = HAL_RCC_GetPCLK1Freq();
 80084fe:	f7ff fa61 	bl	80079c4 <HAL_RCC_GetPCLK1Freq>
 8008502:	0003      	movs	r3, r0
 8008504:	61fb      	str	r3, [r7, #28]
            break;
 8008506:	e013      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HAL_RCC_GetSysClockFreq();
 8008508:	f7ff f9b6 	bl	8007878 <HAL_RCC_GetSysClockFreq>
 800850c:	0003      	movs	r3, r0
 800850e:	61fb      	str	r3, [r7, #28]
            break;
 8008510:	e00e      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008512:	4b1c      	ldr	r3, [pc, #112]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	2380      	movs	r3, #128	@ 0x80
 8008518:	00db      	lsls	r3, r3, #3
 800851a:	401a      	ands	r2, r3
 800851c:	2380      	movs	r3, #128	@ 0x80
 800851e:	00db      	lsls	r3, r3, #3
 8008520:	429a      	cmp	r2, r3
 8008522:	d104      	bne.n	800852e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
              frequency = HSI_VALUE;
 8008524:	4b18      	ldr	r3, [pc, #96]	@ (8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8008526:	61fb      	str	r3, [r7, #28]
            break;
 8008528:	e001      	b.n	800852e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
            break;
 800852a:	46c0      	nop			@ (mov r8, r8)
 800852c:	e235      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800852e:	46c0      	nop			@ (mov r8, r8)
        break;
 8008530:	e233      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008532:	4a14      	ldr	r2, [pc, #80]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8008534:	2388      	movs	r3, #136	@ 0x88
 8008536:	58d2      	ldr	r2, [r2, r3]
 8008538:	23c0      	movs	r3, #192	@ 0xc0
 800853a:	031b      	lsls	r3, r3, #12
 800853c:	4013      	ands	r3, r2
 800853e:	617b      	str	r3, [r7, #20]
 8008540:	697a      	ldr	r2, [r7, #20]
 8008542:	23c0      	movs	r3, #192	@ 0xc0
 8008544:	031b      	lsls	r3, r3, #12
 8008546:	429a      	cmp	r2, r3
 8008548:	d041      	beq.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800854a:	697a      	ldr	r2, [r7, #20]
 800854c:	23c0      	movs	r3, #192	@ 0xc0
 800854e:	031b      	lsls	r3, r3, #12
 8008550:	429a      	cmp	r2, r3
 8008552:	d847      	bhi.n	80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8008554:	697a      	ldr	r2, [r7, #20]
 8008556:	2380      	movs	r3, #128	@ 0x80
 8008558:	031b      	lsls	r3, r3, #12
 800855a:	429a      	cmp	r2, r3
 800855c:	d02b      	beq.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
 800855e:	697a      	ldr	r2, [r7, #20]
 8008560:	2380      	movs	r3, #128	@ 0x80
 8008562:	031b      	lsls	r3, r3, #12
 8008564:	429a      	cmp	r2, r3
 8008566:	d83d      	bhi.n	80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d005      	beq.n	800857a <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 800856e:	697a      	ldr	r2, [r7, #20]
 8008570:	2380      	movs	r3, #128	@ 0x80
 8008572:	02db      	lsls	r3, r3, #11
 8008574:	429a      	cmp	r2, r3
 8008576:	d009      	beq.n	800858c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            break;
 8008578:	e034      	b.n	80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 800857a:	f7ff fa23 	bl	80079c4 <HAL_RCC_GetPCLK1Freq>
 800857e:	0003      	movs	r3, r0
 8008580:	61fb      	str	r3, [r7, #28]
            break;
 8008582:	e036      	b.n	80085f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8008584:	40021000 	.word	0x40021000
 8008588:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800858c:	4abd      	ldr	r2, [pc, #756]	@ (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800858e:	2394      	movs	r3, #148	@ 0x94
 8008590:	58d3      	ldr	r3, [r2, r3]
 8008592:	2202      	movs	r2, #2
 8008594:	4013      	ands	r3, r2
 8008596:	2b02      	cmp	r3, #2
 8008598:	d126      	bne.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 800859a:	4aba      	ldr	r2, [pc, #744]	@ (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800859c:	2394      	movs	r3, #148	@ 0x94
 800859e:	58d3      	ldr	r3, [r2, r3]
 80085a0:	2204      	movs	r2, #4
 80085a2:	4013      	ands	r3, r2
 80085a4:	2b04      	cmp	r3, #4
 80085a6:	d102      	bne.n	80085ae <HAL_RCCEx_GetPeriphCLKFreq+0x696>
                frequency = LSI_VALUE / 128U;
 80085a8:	23fa      	movs	r3, #250	@ 0xfa
 80085aa:	61fb      	str	r3, [r7, #28]
            break;
 80085ac:	e01c      	b.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
                frequency = LSI_VALUE;
 80085ae:	23fa      	movs	r3, #250	@ 0xfa
 80085b0:	01db      	lsls	r3, r3, #7
 80085b2:	61fb      	str	r3, [r7, #28]
            break;
 80085b4:	e018      	b.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80085b6:	4bb3      	ldr	r3, [pc, #716]	@ (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	2380      	movs	r3, #128	@ 0x80
 80085bc:	00db      	lsls	r3, r3, #3
 80085be:	401a      	ands	r2, r3
 80085c0:	2380      	movs	r3, #128	@ 0x80
 80085c2:	00db      	lsls	r3, r3, #3
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d111      	bne.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
              frequency = HSI_VALUE;
 80085c8:	4baf      	ldr	r3, [pc, #700]	@ (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 80085ca:	61fb      	str	r3, [r7, #28]
            break;
 80085cc:	e00e      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80085ce:	4aad      	ldr	r2, [pc, #692]	@ (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80085d0:	2390      	movs	r3, #144	@ 0x90
 80085d2:	58d3      	ldr	r3, [r2, r3]
 80085d4:	2202      	movs	r2, #2
 80085d6:	4013      	ands	r3, r2
 80085d8:	2b02      	cmp	r3, #2
 80085da:	d109      	bne.n	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
              frequency = LSE_VALUE;
 80085dc:	2380      	movs	r3, #128	@ 0x80
 80085de:	021b      	lsls	r3, r3, #8
 80085e0:	61fb      	str	r3, [r7, #28]
            break;
 80085e2:	e005      	b.n	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
            break;
 80085e4:	46c0      	nop			@ (mov r8, r8)
 80085e6:	e1d8      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80085e8:	46c0      	nop			@ (mov r8, r8)
 80085ea:	e1d6      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80085ec:	46c0      	nop			@ (mov r8, r8)
 80085ee:	e1d4      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80085f0:	46c0      	nop			@ (mov r8, r8)
        break;
 80085f2:	e1d2      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80085f4:	4aa3      	ldr	r2, [pc, #652]	@ (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80085f6:	2388      	movs	r3, #136	@ 0x88
 80085f8:	58d2      	ldr	r2, [r2, r3]
 80085fa:	23c0      	movs	r3, #192	@ 0xc0
 80085fc:	039b      	lsls	r3, r3, #14
 80085fe:	4013      	ands	r3, r2
 8008600:	617b      	str	r3, [r7, #20]
 8008602:	697a      	ldr	r2, [r7, #20]
 8008604:	23c0      	movs	r3, #192	@ 0xc0
 8008606:	039b      	lsls	r3, r3, #14
 8008608:	429a      	cmp	r2, r3
 800860a:	d03d      	beq.n	8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800860c:	697a      	ldr	r2, [r7, #20]
 800860e:	23c0      	movs	r3, #192	@ 0xc0
 8008610:	039b      	lsls	r3, r3, #14
 8008612:	429a      	cmp	r2, r3
 8008614:	d843      	bhi.n	800869e <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	2380      	movs	r3, #128	@ 0x80
 800861a:	039b      	lsls	r3, r3, #14
 800861c:	429a      	cmp	r2, r3
 800861e:	d027      	beq.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
 8008620:	697a      	ldr	r2, [r7, #20]
 8008622:	2380      	movs	r3, #128	@ 0x80
 8008624:	039b      	lsls	r3, r3, #14
 8008626:	429a      	cmp	r2, r3
 8008628:	d839      	bhi.n	800869e <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d005      	beq.n	800863c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008630:	697a      	ldr	r2, [r7, #20]
 8008632:	2380      	movs	r3, #128	@ 0x80
 8008634:	035b      	lsls	r3, r3, #13
 8008636:	429a      	cmp	r2, r3
 8008638:	d005      	beq.n	8008646 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
            break;
 800863a:	e030      	b.n	800869e <HAL_RCCEx_GetPeriphCLKFreq+0x786>
            frequency = HAL_RCC_GetPCLK1Freq();
 800863c:	f7ff f9c2 	bl	80079c4 <HAL_RCC_GetPCLK1Freq>
 8008640:	0003      	movs	r3, r0
 8008642:	61fb      	str	r3, [r7, #28]
            break;
 8008644:	e032      	b.n	80086ac <HAL_RCCEx_GetPeriphCLKFreq+0x794>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008646:	4a8f      	ldr	r2, [pc, #572]	@ (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008648:	2394      	movs	r3, #148	@ 0x94
 800864a:	58d3      	ldr	r3, [r2, r3]
 800864c:	2202      	movs	r2, #2
 800864e:	4013      	ands	r3, r2
 8008650:	2b02      	cmp	r3, #2
 8008652:	d126      	bne.n	80086a2 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8008654:	4a8b      	ldr	r2, [pc, #556]	@ (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008656:	2394      	movs	r3, #148	@ 0x94
 8008658:	58d3      	ldr	r3, [r2, r3]
 800865a:	2204      	movs	r2, #4
 800865c:	4013      	ands	r3, r2
 800865e:	2b04      	cmp	r3, #4
 8008660:	d102      	bne.n	8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
                frequency = LSI_VALUE / 128U;
 8008662:	23fa      	movs	r3, #250	@ 0xfa
 8008664:	61fb      	str	r3, [r7, #28]
            break;
 8008666:	e01c      	b.n	80086a2 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
                frequency = LSI_VALUE;
 8008668:	23fa      	movs	r3, #250	@ 0xfa
 800866a:	01db      	lsls	r3, r3, #7
 800866c:	61fb      	str	r3, [r7, #28]
            break;
 800866e:	e018      	b.n	80086a2 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008670:	4b84      	ldr	r3, [pc, #528]	@ (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	2380      	movs	r3, #128	@ 0x80
 8008676:	00db      	lsls	r3, r3, #3
 8008678:	401a      	ands	r2, r3
 800867a:	2380      	movs	r3, #128	@ 0x80
 800867c:	00db      	lsls	r3, r3, #3
 800867e:	429a      	cmp	r2, r3
 8008680:	d111      	bne.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
              frequency = HSI_VALUE;
 8008682:	4b81      	ldr	r3, [pc, #516]	@ (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 8008684:	61fb      	str	r3, [r7, #28]
            break;
 8008686:	e00e      	b.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008688:	4a7e      	ldr	r2, [pc, #504]	@ (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800868a:	2390      	movs	r3, #144	@ 0x90
 800868c:	58d3      	ldr	r3, [r2, r3]
 800868e:	2202      	movs	r2, #2
 8008690:	4013      	ands	r3, r2
 8008692:	2b02      	cmp	r3, #2
 8008694:	d109      	bne.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x792>
              frequency = LSE_VALUE;
 8008696:	2380      	movs	r3, #128	@ 0x80
 8008698:	021b      	lsls	r3, r3, #8
 800869a:	61fb      	str	r3, [r7, #28]
            break;
 800869c:	e005      	b.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x792>
            break;
 800869e:	46c0      	nop			@ (mov r8, r8)
 80086a0:	e17b      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80086a2:	46c0      	nop			@ (mov r8, r8)
 80086a4:	e179      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80086a6:	46c0      	nop			@ (mov r8, r8)
 80086a8:	e177      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80086aa:	46c0      	nop			@ (mov r8, r8)
        break;
 80086ac:	e175      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80086ae:	4a75      	ldr	r2, [pc, #468]	@ (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80086b0:	2388      	movs	r3, #136	@ 0x88
 80086b2:	58d2      	ldr	r2, [r2, r3]
 80086b4:	23c0      	movs	r3, #192	@ 0xc0
 80086b6:	041b      	lsls	r3, r3, #16
 80086b8:	4013      	ands	r3, r2
 80086ba:	617b      	str	r3, [r7, #20]
 80086bc:	697a      	ldr	r2, [r7, #20]
 80086be:	23c0      	movs	r3, #192	@ 0xc0
 80086c0:	041b      	lsls	r3, r3, #16
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d03d      	beq.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 80086c6:	697a      	ldr	r2, [r7, #20]
 80086c8:	23c0      	movs	r3, #192	@ 0xc0
 80086ca:	041b      	lsls	r3, r3, #16
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d843      	bhi.n	8008758 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80086d0:	697a      	ldr	r2, [r7, #20]
 80086d2:	2380      	movs	r3, #128	@ 0x80
 80086d4:	041b      	lsls	r3, r3, #16
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d027      	beq.n	800872a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80086da:	697a      	ldr	r2, [r7, #20]
 80086dc:	2380      	movs	r3, #128	@ 0x80
 80086de:	041b      	lsls	r3, r3, #16
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d839      	bhi.n	8008758 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d005      	beq.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 80086ea:	697a      	ldr	r2, [r7, #20]
 80086ec:	2380      	movs	r3, #128	@ 0x80
 80086ee:	03db      	lsls	r3, r3, #15
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d005      	beq.n	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
            break;
 80086f4:	e030      	b.n	8008758 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
            frequency = HAL_RCC_GetPCLK1Freq();
 80086f6:	f7ff f965 	bl	80079c4 <HAL_RCC_GetPCLK1Freq>
 80086fa:	0003      	movs	r3, r0
 80086fc:	61fb      	str	r3, [r7, #28]
            break;
 80086fe:	e032      	b.n	8008766 <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008700:	4a60      	ldr	r2, [pc, #384]	@ (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008702:	2394      	movs	r3, #148	@ 0x94
 8008704:	58d3      	ldr	r3, [r2, r3]
 8008706:	2202      	movs	r2, #2
 8008708:	4013      	ands	r3, r2
 800870a:	2b02      	cmp	r3, #2
 800870c:	d126      	bne.n	800875c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 800870e:	4a5d      	ldr	r2, [pc, #372]	@ (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008710:	2394      	movs	r3, #148	@ 0x94
 8008712:	58d3      	ldr	r3, [r2, r3]
 8008714:	2204      	movs	r2, #4
 8008716:	4013      	ands	r3, r2
 8008718:	2b04      	cmp	r3, #4
 800871a:	d102      	bne.n	8008722 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
                frequency = LSI_VALUE / 128U;
 800871c:	23fa      	movs	r3, #250	@ 0xfa
 800871e:	61fb      	str	r3, [r7, #28]
            break;
 8008720:	e01c      	b.n	800875c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
                frequency = LSI_VALUE;
 8008722:	23fa      	movs	r3, #250	@ 0xfa
 8008724:	01db      	lsls	r3, r3, #7
 8008726:	61fb      	str	r3, [r7, #28]
            break;
 8008728:	e018      	b.n	800875c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800872a:	4b56      	ldr	r3, [pc, #344]	@ (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	2380      	movs	r3, #128	@ 0x80
 8008730:	00db      	lsls	r3, r3, #3
 8008732:	401a      	ands	r2, r3
 8008734:	2380      	movs	r3, #128	@ 0x80
 8008736:	00db      	lsls	r3, r3, #3
 8008738:	429a      	cmp	r2, r3
 800873a:	d111      	bne.n	8008760 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
              frequency = HSI_VALUE;
 800873c:	4b52      	ldr	r3, [pc, #328]	@ (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 800873e:	61fb      	str	r3, [r7, #28]
            break;
 8008740:	e00e      	b.n	8008760 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008742:	4a50      	ldr	r2, [pc, #320]	@ (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008744:	2390      	movs	r3, #144	@ 0x90
 8008746:	58d3      	ldr	r3, [r2, r3]
 8008748:	2202      	movs	r2, #2
 800874a:	4013      	ands	r3, r2
 800874c:	2b02      	cmp	r3, #2
 800874e:	d109      	bne.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
              frequency = LSE_VALUE;
 8008750:	2380      	movs	r3, #128	@ 0x80
 8008752:	021b      	lsls	r3, r3, #8
 8008754:	61fb      	str	r3, [r7, #28]
            break;
 8008756:	e005      	b.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
            break;
 8008758:	46c0      	nop			@ (mov r8, r8)
 800875a:	e11e      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800875c:	46c0      	nop			@ (mov r8, r8)
 800875e:	e11c      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008760:	46c0      	nop			@ (mov r8, r8)
 8008762:	e11a      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008764:	46c0      	nop			@ (mov r8, r8)
        break;
 8008766:	e118      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 8008768:	4a46      	ldr	r2, [pc, #280]	@ (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800876a:	2388      	movs	r3, #136	@ 0x88
 800876c:	58d2      	ldr	r2, [r2, r3]
 800876e:	2380      	movs	r3, #128	@ 0x80
 8008770:	045b      	lsls	r3, r3, #17
 8008772:	4013      	ands	r3, r2
 8008774:	617b      	str	r3, [r7, #20]
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d005      	beq.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 800877c:	697a      	ldr	r2, [r7, #20]
 800877e:	2380      	movs	r3, #128	@ 0x80
 8008780:	045b      	lsls	r3, r3, #17
 8008782:	429a      	cmp	r2, r3
 8008784:	d011      	beq.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0x892>
            break;
 8008786:	e019      	b.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8008788:	4b3e      	ldr	r3, [pc, #248]	@ (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800878a:	689a      	ldr	r2, [r3, #8]
 800878c:	23e0      	movs	r3, #224	@ 0xe0
 800878e:	01db      	lsls	r3, r3, #7
 8008790:	4013      	ands	r3, r2
 8008792:	d104      	bne.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
              frequency = HAL_RCC_GetPCLK1Freq();
 8008794:	f7ff f916 	bl	80079c4 <HAL_RCC_GetPCLK1Freq>
 8008798:	0003      	movs	r3, r0
 800879a:	61fb      	str	r3, [r7, #28]
            break;
 800879c:	e00e      	b.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 800879e:	f7ff f911 	bl	80079c4 <HAL_RCC_GetPCLK1Freq>
 80087a2:	0003      	movs	r3, r0
 80087a4:	005b      	lsls	r3, r3, #1
 80087a6:	61fb      	str	r3, [r7, #28]
            break;
 80087a8:	e008      	b.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80087aa:	2408      	movs	r4, #8
 80087ac:	193b      	adds	r3, r7, r4
 80087ae:	0018      	movs	r0, r3
 80087b0:	f000 f8fe 	bl	80089b0 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 80087b4:	193b      	adds	r3, r7, r4
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	61fb      	str	r3, [r7, #28]
            break;
 80087ba:	46c0      	nop			@ (mov r8, r8)
        break;
 80087bc:	e0ed      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 80087be:	4a31      	ldr	r2, [pc, #196]	@ (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80087c0:	2388      	movs	r3, #136	@ 0x88
 80087c2:	58d2      	ldr	r2, [r2, r3]
 80087c4:	2380      	movs	r3, #128	@ 0x80
 80087c6:	049b      	lsls	r3, r3, #18
 80087c8:	4013      	ands	r3, r2
 80087ca:	617b      	str	r3, [r7, #20]
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d005      	beq.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 80087d2:	697a      	ldr	r2, [r7, #20]
 80087d4:	2380      	movs	r3, #128	@ 0x80
 80087d6:	049b      	lsls	r3, r3, #18
 80087d8:	429a      	cmp	r2, r3
 80087da:	d011      	beq.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
            break;
 80087dc:	e019      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 80087de:	4b29      	ldr	r3, [pc, #164]	@ (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80087e0:	689a      	ldr	r2, [r3, #8]
 80087e2:	23e0      	movs	r3, #224	@ 0xe0
 80087e4:	01db      	lsls	r3, r3, #7
 80087e6:	4013      	ands	r3, r2
 80087e8:	d104      	bne.n	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
              frequency = HAL_RCC_GetPCLK1Freq();
 80087ea:	f7ff f8eb 	bl	80079c4 <HAL_RCC_GetPCLK1Freq>
 80087ee:	0003      	movs	r3, r0
 80087f0:	61fb      	str	r3, [r7, #28]
            break;
 80087f2:	e00e      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 80087f4:	f7ff f8e6 	bl	80079c4 <HAL_RCC_GetPCLK1Freq>
 80087f8:	0003      	movs	r3, r0
 80087fa:	005b      	lsls	r3, r3, #1
 80087fc:	61fb      	str	r3, [r7, #28]
            break;
 80087fe:	e008      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8008800:	2408      	movs	r4, #8
 8008802:	193b      	adds	r3, r7, r4
 8008804:	0018      	movs	r0, r3
 8008806:	f000 f8d3 	bl	80089b0 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 800880a:	193b      	adds	r3, r7, r4
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	61fb      	str	r3, [r7, #28]
            break;
 8008810:	46c0      	nop			@ (mov r8, r8)
        break;
 8008812:	e0c2      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8008814:	4a1b      	ldr	r2, [pc, #108]	@ (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008816:	2388      	movs	r3, #136	@ 0x88
 8008818:	58d2      	ldr	r2, [r2, r3]
 800881a:	23c0      	movs	r3, #192	@ 0xc0
 800881c:	051b      	lsls	r3, r3, #20
 800881e:	4013      	ands	r3, r2
 8008820:	617b      	str	r3, [r7, #20]
 8008822:	697a      	ldr	r2, [r7, #20]
 8008824:	23c0      	movs	r3, #192	@ 0xc0
 8008826:	051b      	lsls	r3, r3, #20
 8008828:	429a      	cmp	r2, r3
 800882a:	d017      	beq.n	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 800882c:	697a      	ldr	r2, [r7, #20]
 800882e:	23c0      	movs	r3, #192	@ 0xc0
 8008830:	051b      	lsls	r3, r3, #20
 8008832:	429a      	cmp	r2, r3
 8008834:	d84a      	bhi.n	80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8008836:	697a      	ldr	r2, [r7, #20]
 8008838:	2380      	movs	r3, #128	@ 0x80
 800883a:	051b      	lsls	r3, r3, #20
 800883c:	429a      	cmp	r2, r3
 800883e:	d039      	beq.n	80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8008840:	697a      	ldr	r2, [r7, #20]
 8008842:	2380      	movs	r3, #128	@ 0x80
 8008844:	051b      	lsls	r3, r3, #20
 8008846:	429a      	cmp	r2, r3
 8008848:	d840      	bhi.n	80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d03a      	beq.n	80088c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ae>
 8008850:	697a      	ldr	r2, [r7, #20]
 8008852:	2380      	movs	r3, #128	@ 0x80
 8008854:	04db      	lsls	r3, r3, #19
 8008856:	429a      	cmp	r2, r3
 8008858:	d003      	beq.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
            break;
 800885a:	e037      	b.n	80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
            frequency = HSI48_VALUE;
 800885c:	4b0b      	ldr	r3, [pc, #44]	@ (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x974>)
 800885e:	61fb      	str	r3, [r7, #28]
            break;
 8008860:	e037      	b.n	80088d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8008862:	4b08      	ldr	r3, [pc, #32]	@ (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2202      	movs	r2, #2
 8008868:	4013      	ands	r3, r2
 800886a:	2b02      	cmp	r3, #2
 800886c:	d130      	bne.n	80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 800886e:	4b05      	ldr	r3, [pc, #20]	@ (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2208      	movs	r2, #8
 8008874:	4013      	ands	r3, r2
 8008876:	d00b      	beq.n	8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8008878:	4b02      	ldr	r3, [pc, #8]	@ (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	091b      	lsrs	r3, r3, #4
 800887e:	220f      	movs	r2, #15
 8008880:	4013      	ands	r3, r2
 8008882:	e00b      	b.n	800889c <HAL_RCCEx_GetPeriphCLKFreq+0x984>
 8008884:	40021000 	.word	0x40021000
 8008888:	00f42400 	.word	0x00f42400
 800888c:	02dc6c00 	.word	0x02dc6c00
 8008890:	4a44      	ldr	r2, [pc, #272]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8008892:	2394      	movs	r3, #148	@ 0x94
 8008894:	58d3      	ldr	r3, [r2, r3]
 8008896:	0a1b      	lsrs	r3, r3, #8
 8008898:	220f      	movs	r2, #15
 800889a:	4013      	ands	r3, r2
 800889c:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	2b0b      	cmp	r3, #11
 80088a2:	d901      	bls.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
                msirange = 11U;
 80088a4:	230b      	movs	r3, #11
 80088a6:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 80088a8:	4b3f      	ldr	r3, [pc, #252]	@ (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 80088aa:	69ba      	ldr	r2, [r7, #24]
 80088ac:	0092      	lsls	r2, r2, #2
 80088ae:	58d3      	ldr	r3, [r2, r3]
 80088b0:	61fb      	str	r3, [r7, #28]
            break;
 80088b2:	e00d      	b.n	80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80088b4:	2408      	movs	r4, #8
 80088b6:	193b      	adds	r3, r7, r4
 80088b8:	0018      	movs	r0, r3
 80088ba:	f000 f879 	bl	80089b0 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 80088be:	193b      	adds	r3, r7, r4
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	61fb      	str	r3, [r7, #28]
            break;
 80088c4:	e005      	b.n	80088d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            frequency = 0U;
 80088c6:	2300      	movs	r3, #0
 80088c8:	61fb      	str	r3, [r7, #28]
            break;
 80088ca:	e002      	b.n	80088d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            break;
 80088cc:	46c0      	nop			@ (mov r8, r8)
 80088ce:	e064      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80088d0:	46c0      	nop			@ (mov r8, r8)
        break;
 80088d2:	e062      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80088d4:	4a33      	ldr	r2, [pc, #204]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80088d6:	2388      	movs	r3, #136	@ 0x88
 80088d8:	58d2      	ldr	r2, [r2, r3]
 80088da:	23c0      	movs	r3, #192	@ 0xc0
 80088dc:	051b      	lsls	r3, r3, #20
 80088de:	4013      	ands	r3, r2
 80088e0:	617b      	str	r3, [r7, #20]
 80088e2:	697a      	ldr	r2, [r7, #20]
 80088e4:	23c0      	movs	r3, #192	@ 0xc0
 80088e6:	051b      	lsls	r3, r3, #20
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d017      	beq.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0xa04>
 80088ec:	697a      	ldr	r2, [r7, #20]
 80088ee:	23c0      	movs	r3, #192	@ 0xc0
 80088f0:	051b      	lsls	r3, r3, #20
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d844      	bhi.n	8008980 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 80088f6:	697a      	ldr	r2, [r7, #20]
 80088f8:	2380      	movs	r3, #128	@ 0x80
 80088fa:	051b      	lsls	r3, r3, #20
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d033      	beq.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8008900:	697a      	ldr	r2, [r7, #20]
 8008902:	2380      	movs	r3, #128	@ 0x80
 8008904:	051b      	lsls	r3, r3, #20
 8008906:	429a      	cmp	r2, r3
 8008908:	d83a      	bhi.n	8008980 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d034      	beq.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8008910:	697a      	ldr	r2, [r7, #20]
 8008912:	2380      	movs	r3, #128	@ 0x80
 8008914:	04db      	lsls	r3, r3, #19
 8008916:	429a      	cmp	r2, r3
 8008918:	d003      	beq.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
            break;
 800891a:	e031      	b.n	8008980 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            frequency = HSI48_VALUE;
 800891c:	4b23      	ldr	r3, [pc, #140]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 800891e:	61fb      	str	r3, [r7, #28]
            break;
 8008920:	e031      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8008922:	4b20      	ldr	r3, [pc, #128]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2202      	movs	r2, #2
 8008928:	4013      	ands	r3, r2
 800892a:	2b02      	cmp	r3, #2
 800892c:	d12a      	bne.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 800892e:	4b1d      	ldr	r3, [pc, #116]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2208      	movs	r2, #8
 8008934:	4013      	ands	r3, r2
 8008936:	d005      	beq.n	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0xa2c>
 8008938:	4b1a      	ldr	r3, [pc, #104]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	091b      	lsrs	r3, r3, #4
 800893e:	220f      	movs	r2, #15
 8008940:	4013      	ands	r3, r2
 8008942:	e005      	b.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8008944:	4a17      	ldr	r2, [pc, #92]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8008946:	2394      	movs	r3, #148	@ 0x94
 8008948:	58d3      	ldr	r3, [r2, r3]
 800894a:	0a1b      	lsrs	r3, r3, #8
 800894c:	220f      	movs	r2, #15
 800894e:	4013      	ands	r3, r2
 8008950:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	2b0b      	cmp	r3, #11
 8008956:	d901      	bls.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
                msirange = 11U;
 8008958:	230b      	movs	r3, #11
 800895a:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 800895c:	4b12      	ldr	r3, [pc, #72]	@ (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 800895e:	69ba      	ldr	r2, [r7, #24]
 8008960:	0092      	lsls	r2, r2, #2
 8008962:	58d3      	ldr	r3, [r2, r3]
 8008964:	61fb      	str	r3, [r7, #28]
            break;
 8008966:	e00d      	b.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8008968:	2408      	movs	r4, #8
 800896a:	193b      	adds	r3, r7, r4
 800896c:	0018      	movs	r0, r3
 800896e:	f000 f81f 	bl	80089b0 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8008972:	193b      	adds	r3, r7, r4
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	61fb      	str	r3, [r7, #28]
            break;
 8008978:	e005      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = 0U;
 800897a:	2300      	movs	r3, #0
 800897c:	61fb      	str	r3, [r7, #28]
            break;
 800897e:	e002      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            break;
 8008980:	46c0      	nop			@ (mov r8, r8)
 8008982:	e00a      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008984:	46c0      	nop			@ (mov r8, r8)
        break;
 8008986:	e008      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8008988:	46c0      	nop			@ (mov r8, r8)
 800898a:	e006      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 800898c:	46c0      	nop			@ (mov r8, r8)
 800898e:	e004      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8008990:	46c0      	nop			@ (mov r8, r8)
 8008992:	e002      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8008994:	46c0      	nop			@ (mov r8, r8)
 8008996:	e000      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8008998:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return (frequency);
 800899a:	69fb      	ldr	r3, [r7, #28]
}
 800899c:	0018      	movs	r0, r3
 800899e:	46bd      	mov	sp, r7
 80089a0:	b009      	add	sp, #36	@ 0x24
 80089a2:	bd90      	pop	{r4, r7, pc}
 80089a4:	40021000 	.word	0x40021000
 80089a8:	08010040 	.word	0x08010040
 80089ac:	02dc6c00 	.word	0x02dc6c00

080089b0 <HAL_RCCEx_GetPLLClockFreq>:
  * @param  PLL_Clocks structure.
  * @retval None
  */

void HAL_RCCEx_GetPLLClockFreq(PLL_ClocksTypeDef *PLL_Clocks)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b088      	sub	sp, #32
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  uint32_t pllm;
  uint32_t plln;
  uint32_t pllvco;
  uint32_t msirange;

  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80089b8:	4b58      	ldr	r3, [pc, #352]	@ (8008b1c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	0a1b      	lsrs	r3, r3, #8
 80089be:	227f      	movs	r2, #127	@ 0x7f
 80089c0:	4013      	ands	r3, r2
 80089c2:	617b      	str	r3, [r7, #20]
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80089c4:	4b55      	ldr	r3, [pc, #340]	@ (8008b1c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	2203      	movs	r2, #3
 80089ca:	4013      	ands	r3, r2
 80089cc:	613b      	str	r3, [r7, #16]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 80089ce:	4b53      	ldr	r3, [pc, #332]	@ (8008b1c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	091b      	lsrs	r3, r3, #4
 80089d4:	2207      	movs	r2, #7
 80089d6:	4013      	ands	r3, r2
 80089d8:	3301      	adds	r3, #1
 80089da:	60fb      	str	r3, [r7, #12]
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 80089dc:	4b4f      	ldr	r3, [pc, #316]	@ (8008b1c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	2208      	movs	r2, #8
 80089e2:	4013      	ands	r3, r2
 80089e4:	d005      	beq.n	80089f2 <HAL_RCCEx_GetPLLClockFreq+0x42>
 80089e6:	4b4d      	ldr	r3, [pc, #308]	@ (8008b1c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	091b      	lsrs	r3, r3, #4
 80089ec:	220f      	movs	r2, #15
 80089ee:	4013      	ands	r3, r2
 80089f0:	e005      	b.n	80089fe <HAL_RCCEx_GetPLLClockFreq+0x4e>
 80089f2:	4a4a      	ldr	r2, [pc, #296]	@ (8008b1c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80089f4:	2394      	movs	r3, #148	@ 0x94
 80089f6:	58d3      	ldr	r3, [r2, r3]
 80089f8:	0a1b      	lsrs	r3, r3, #8
 80089fa:	220f      	movs	r2, #15
 80089fc:	4013      	ands	r3, r2
 80089fe:	61bb      	str	r3, [r7, #24]
  if (msirange > 11U)
 8008a00:	69bb      	ldr	r3, [r7, #24]
 8008a02:	2b0b      	cmp	r3, #11
 8008a04:	d901      	bls.n	8008a0a <HAL_RCCEx_GetPLLClockFreq+0x5a>
  {
    msirange = 11U;
 8008a06:	230b      	movs	r3, #11
 8008a08:	61bb      	str	r3, [r7, #24]
  }
  switch (pllsource)
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	2b03      	cmp	r3, #3
 8008a0e:	d020      	beq.n	8008a52 <HAL_RCCEx_GetPLLClockFreq+0xa2>
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	2b03      	cmp	r3, #3
 8008a14:	d827      	bhi.n	8008a66 <HAL_RCCEx_GetPLLClockFreq+0xb6>
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d00c      	beq.n	8008a36 <HAL_RCCEx_GetPLLClockFreq+0x86>
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	d121      	bne.n	8008a66 <HAL_RCCEx_GetPLLClockFreq+0xb6>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * plln;
 8008a22:	68f9      	ldr	r1, [r7, #12]
 8008a24:	483e      	ldr	r0, [pc, #248]	@ (8008b20 <HAL_RCCEx_GetPLLClockFreq+0x170>)
 8008a26:	f7f7 fb8b 	bl	8000140 <__udivsi3>
 8008a2a:	0003      	movs	r3, r0
 8008a2c:	001a      	movs	r2, r3
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	4353      	muls	r3, r2
 8008a32:	61fb      	str	r3, [r7, #28]
      break;
 8008a34:	e025      	b.n	8008a82 <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8008a36:	4b3b      	ldr	r3, [pc, #236]	@ (8008b24 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8008a38:	69ba      	ldr	r2, [r7, #24]
 8008a3a:	0092      	lsls	r2, r2, #2
 8008a3c:	58d3      	ldr	r3, [r2, r3]
 8008a3e:	68f9      	ldr	r1, [r7, #12]
 8008a40:	0018      	movs	r0, r3
 8008a42:	f7f7 fb7d 	bl	8000140 <__udivsi3>
 8008a46:	0003      	movs	r3, r0
 8008a48:	001a      	movs	r2, r3
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	4353      	muls	r3, r2
 8008a4e:	61fb      	str	r3, [r7, #28]
      break;
 8008a50:	e017      	b.n	8008a82 <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * plln;
 8008a52:	68f9      	ldr	r1, [r7, #12]
 8008a54:	4834      	ldr	r0, [pc, #208]	@ (8008b28 <HAL_RCCEx_GetPLLClockFreq+0x178>)
 8008a56:	f7f7 fb73 	bl	8000140 <__udivsi3>
 8008a5a:	0003      	movs	r3, r0
 8008a5c:	001a      	movs	r2, r3
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	4353      	muls	r3, r2
 8008a62:	61fb      	str	r3, [r7, #28]
      break;
 8008a64:	e00d      	b.n	8008a82 <HAL_RCCEx_GetPLLClockFreq+0xd2>

    default:
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8008a66:	4b2f      	ldr	r3, [pc, #188]	@ (8008b24 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8008a68:	69ba      	ldr	r2, [r7, #24]
 8008a6a:	0092      	lsls	r2, r2, #2
 8008a6c:	58d3      	ldr	r3, [r2, r3]
 8008a6e:	68f9      	ldr	r1, [r7, #12]
 8008a70:	0018      	movs	r0, r3
 8008a72:	f7f7 fb65 	bl	8000140 <__udivsi3>
 8008a76:	0003      	movs	r3, r0
 8008a78:	001a      	movs	r2, r3
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	4353      	muls	r3, r2
 8008a7e:	61fb      	str	r3, [r7, #28]
      break;
 8008a80:	46c0      	nop			@ (mov r8, r8)
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 8008a82:	4b26      	ldr	r3, [pc, #152]	@ (8008b1c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008a84:	68da      	ldr	r2, [r3, #12]
 8008a86:	2380      	movs	r3, #128	@ 0x80
 8008a88:	025b      	lsls	r3, r3, #9
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	d00e      	beq.n	8008aac <HAL_RCCEx_GetPLLClockFreq+0xfc>
  {
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8008a8e:	4b23      	ldr	r3, [pc, #140]	@ (8008b1c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008a90:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLP_Pos) + 1U));
 8008a92:	0c5b      	lsrs	r3, r3, #17
 8008a94:	221f      	movs	r2, #31
 8008a96:	4013      	ands	r3, r2
 8008a98:	3301      	adds	r3, #1
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8008a9a:	0019      	movs	r1, r3
 8008a9c:	69f8      	ldr	r0, [r7, #28]
 8008a9e:	f7f7 fb4f 	bl	8000140 <__udivsi3>
 8008aa2:	0003      	movs	r3, r0
 8008aa4:	001a      	movs	r2, r3
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	601a      	str	r2, [r3, #0]
 8008aaa:	e002      	b.n	8008ab2 <HAL_RCCEx_GetPLLClockFreq+0x102>
  }
  else
  {
    PLL_Clocks->PLL_P_Frequency = 0;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVQ) != 0U)
 8008ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8008b1c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008ab4:	68da      	ldr	r2, [r3, #12]
 8008ab6:	2380      	movs	r3, #128	@ 0x80
 8008ab8:	045b      	lsls	r3, r3, #17
 8008aba:	4013      	ands	r3, r2
 8008abc:	d00e      	beq.n	8008adc <HAL_RCCEx_GetPLLClockFreq+0x12c>
  {
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8008abe:	4b17      	ldr	r3, [pc, #92]	@ (8008b1c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008ac0:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLQ_Pos) + 1U));
 8008ac2:	0e5b      	lsrs	r3, r3, #25
 8008ac4:	2207      	movs	r2, #7
 8008ac6:	4013      	ands	r3, r2
 8008ac8:	3301      	adds	r3, #1
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8008aca:	0019      	movs	r1, r3
 8008acc:	69f8      	ldr	r0, [r7, #28]
 8008ace:	f7f7 fb37 	bl	8000140 <__udivsi3>
 8008ad2:	0003      	movs	r3, r0
 8008ad4:	001a      	movs	r2, r3
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	605a      	str	r2, [r3, #4]
 8008ada:	e002      	b.n	8008ae2 <HAL_RCCEx_GetPLLClockFreq+0x132>
  }
  else
  {
    PLL_Clocks->PLL_Q_Frequency = 0;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVR) != 0U)
 8008ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8008b1c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008ae4:	68da      	ldr	r2, [r3, #12]
 8008ae6:	2380      	movs	r3, #128	@ 0x80
 8008ae8:	055b      	lsls	r3, r3, #21
 8008aea:	4013      	ands	r3, r2
 8008aec:	d00e      	beq.n	8008b0c <HAL_RCCEx_GetPLLClockFreq+0x15c>
  {
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8008aee:	4b0b      	ldr	r3, [pc, #44]	@ (8008b1c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008af0:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLR_Pos) + 1U));
 8008af2:	0f5b      	lsrs	r3, r3, #29
 8008af4:	2207      	movs	r2, #7
 8008af6:	4013      	ands	r3, r2
 8008af8:	3301      	adds	r3, #1
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8008afa:	0019      	movs	r1, r3
 8008afc:	69f8      	ldr	r0, [r7, #28]
 8008afe:	f7f7 fb1f 	bl	8000140 <__udivsi3>
 8008b02:	0003      	movs	r3, r0
 8008b04:	001a      	movs	r2, r3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL_Clocks->PLL_R_Frequency = 0;
  }
}
 8008b0a:	e002      	b.n	8008b12 <HAL_RCCEx_GetPLLClockFreq+0x162>
    PLL_Clocks->PLL_R_Frequency = 0;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	609a      	str	r2, [r3, #8]
}
 8008b12:	46c0      	nop			@ (mov r8, r8)
 8008b14:	46bd      	mov	sp, r7
 8008b16:	b008      	add	sp, #32
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	46c0      	nop			@ (mov r8, r8)
 8008b1c:	40021000 	.word	0x40021000
 8008b20:	00f42400 	.word	0x00f42400
 8008b24:	08010040 	.word	0x08010040
 8008b28:	003d0900 	.word	0x003d0900

08008b2c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008b34:	210f      	movs	r1, #15
 8008b36:	187b      	adds	r3, r7, r1
 8008b38:	2201      	movs	r2, #1
 8008b3a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d100      	bne.n	8008b44 <HAL_RTC_Init+0x18>
 8008b42:	e08b      	b.n	8008c5c <HAL_RTC_Init+0x130>
  {
    status = HAL_OK;
 8008b44:	187b      	adds	r3, r7, r1
 8008b46:	2200      	movs	r2, #0
 8008b48:	701a      	strb	r2, [r3, #0]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	222d      	movs	r2, #45	@ 0x2d
 8008b4e:	5c9b      	ldrb	r3, [r3, r2]
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d107      	bne.n	8008b66 <HAL_RTC_Init+0x3a>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	222c      	movs	r2, #44	@ 0x2c
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	5499      	strb	r1, [r3, r2]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	0018      	movs	r0, r3
 8008b62:	f7fc fe0f 	bl	8005784 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	222d      	movs	r2, #45	@ 0x2d
 8008b6a:	2102      	movs	r1, #2
 8008b6c:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b6e:	4b3f      	ldr	r3, [pc, #252]	@ (8008c6c <HAL_RTC_Init+0x140>)
 8008b70:	22ca      	movs	r2, #202	@ 0xca
 8008b72:	625a      	str	r2, [r3, #36]	@ 0x24
 8008b74:	4b3d      	ldr	r3, [pc, #244]	@ (8008c6c <HAL_RTC_Init+0x140>)
 8008b76:	2253      	movs	r2, #83	@ 0x53
 8008b78:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	0018      	movs	r0, r3
 8008b7e:	f000 f8a1 	bl	8008cc4 <RTC_EnterInitMode>
 8008b82:	1e03      	subs	r3, r0, #0
 8008b84:	d00b      	beq.n	8008b9e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b86:	4b39      	ldr	r3, [pc, #228]	@ (8008c6c <HAL_RTC_Init+0x140>)
 8008b88:	22ff      	movs	r2, #255	@ 0xff
 8008b8a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	222d      	movs	r2, #45	@ 0x2d
 8008b90:	2104      	movs	r1, #4
 8008b92:	5499      	strb	r1, [r3, r2]

      status = HAL_ERROR;
 8008b94:	230f      	movs	r3, #15
 8008b96:	18fb      	adds	r3, r7, r3
 8008b98:	2201      	movs	r2, #1
 8008b9a:	701a      	strb	r2, [r3, #0]
 8008b9c:	e05e      	b.n	8008c5c <HAL_RTC_Init+0x130>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8008b9e:	4b33      	ldr	r3, [pc, #204]	@ (8008c6c <HAL_RTC_Init+0x140>)
 8008ba0:	699a      	ldr	r2, [r3, #24]
 8008ba2:	4b32      	ldr	r3, [pc, #200]	@ (8008c6c <HAL_RTC_Init+0x140>)
 8008ba4:	4932      	ldr	r1, [pc, #200]	@ (8008c70 <HAL_RTC_Init+0x144>)
 8008ba6:	400a      	ands	r2, r1
 8008ba8:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8008baa:	4b30      	ldr	r3, [pc, #192]	@ (8008c6c <HAL_RTC_Init+0x140>)
 8008bac:	6999      	ldr	r1, [r3, #24]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	685a      	ldr	r2, [r3, #4]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	431a      	orrs	r2, r3
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	699b      	ldr	r3, [r3, #24]
 8008bbc:	431a      	orrs	r2, r3
 8008bbe:	4b2b      	ldr	r3, [pc, #172]	@ (8008c6c <HAL_RTC_Init+0x140>)
 8008bc0:	430a      	orrs	r2, r1
 8008bc2:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	68d9      	ldr	r1, [r3, #12]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	041a      	lsls	r2, r3, #16
 8008bce:	4b27      	ldr	r3, [pc, #156]	@ (8008c6c <HAL_RTC_Init+0x140>)
 8008bd0:	430a      	orrs	r2, r1
 8008bd2:	611a      	str	r2, [r3, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8008bd4:	4b25      	ldr	r3, [pc, #148]	@ (8008c6c <HAL_RTC_Init+0x140>)
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	4a26      	ldr	r2, [pc, #152]	@ (8008c74 <HAL_RTC_Init+0x148>)
 8008bda:	4013      	ands	r3, r2
 8008bdc:	0019      	movs	r1, r3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008be6:	431a      	orrs	r2, r3
 8008be8:	4b20      	ldr	r3, [pc, #128]	@ (8008c6c <HAL_RTC_Init+0x140>)
 8008bea:	430a      	orrs	r2, r1
 8008bec:	60da      	str	r2, [r3, #12]

      /* Exit Initialization mode */
      CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008bee:	4b1f      	ldr	r3, [pc, #124]	@ (8008c6c <HAL_RTC_Init+0x140>)
 8008bf0:	68da      	ldr	r2, [r3, #12]
 8008bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8008c6c <HAL_RTC_Init+0x140>)
 8008bf4:	2180      	movs	r1, #128	@ 0x80
 8008bf6:	438a      	bics	r2, r1
 8008bf8:	60da      	str	r2, [r3, #12]

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008bfa:	4b1c      	ldr	r3, [pc, #112]	@ (8008c6c <HAL_RTC_Init+0x140>)
 8008bfc:	699b      	ldr	r3, [r3, #24]
 8008bfe:	2220      	movs	r2, #32
 8008c00:	4013      	ands	r3, r2
 8008c02:	d110      	bne.n	8008c26 <HAL_RTC_Init+0xfa>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	0018      	movs	r0, r3
 8008c08:	f000 f836 	bl	8008c78 <HAL_RTC_WaitForSynchro>
 8008c0c:	1e03      	subs	r3, r0, #0
 8008c0e:	d00a      	beq.n	8008c26 <HAL_RTC_Init+0xfa>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c10:	4b16      	ldr	r3, [pc, #88]	@ (8008c6c <HAL_RTC_Init+0x140>)
 8008c12:	22ff      	movs	r2, #255	@ 0xff
 8008c14:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	222d      	movs	r2, #45	@ 0x2d
 8008c1a:	2104      	movs	r1, #4
 8008c1c:	5499      	strb	r1, [r3, r2]
          status = HAL_ERROR;
 8008c1e:	230f      	movs	r3, #15
 8008c20:	18fb      	adds	r3, r7, r3
 8008c22:	2201      	movs	r2, #1
 8008c24:	701a      	strb	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 8008c26:	230f      	movs	r3, #15
 8008c28:	18fb      	adds	r3, r7, r3
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d115      	bne.n	8008c5c <HAL_RTC_Init+0x130>
      {
        MODIFY_REG(RTC->CR, \
 8008c30:	4b0e      	ldr	r3, [pc, #56]	@ (8008c6c <HAL_RTC_Init+0x140>)
 8008c32:	699b      	ldr	r3, [r3, #24]
 8008c34:	00db      	lsls	r3, r3, #3
 8008c36:	08d9      	lsrs	r1, r3, #3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6a1a      	ldr	r2, [r3, #32]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	69db      	ldr	r3, [r3, #28]
 8008c40:	431a      	orrs	r2, r3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	695b      	ldr	r3, [r3, #20]
 8008c46:	431a      	orrs	r2, r3
 8008c48:	4b08      	ldr	r3, [pc, #32]	@ (8008c6c <HAL_RTC_Init+0x140>)
 8008c4a:	430a      	orrs	r2, r1
 8008c4c:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c4e:	4b07      	ldr	r3, [pc, #28]	@ (8008c6c <HAL_RTC_Init+0x140>)
 8008c50:	22ff      	movs	r2, #255	@ 0xff
 8008c52:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	222d      	movs	r2, #45	@ 0x2d
 8008c58:	2101      	movs	r1, #1
 8008c5a:	5499      	strb	r1, [r3, r2]
      }
    }
  }

  return status;
 8008c5c:	230f      	movs	r3, #15
 8008c5e:	18fb      	adds	r3, r7, r3
 8008c60:	781b      	ldrb	r3, [r3, #0]
}
 8008c62:	0018      	movs	r0, r3
 8008c64:	46bd      	mov	sp, r7
 8008c66:	b004      	add	sp, #16
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	46c0      	nop			@ (mov r8, r8)
 8008c6c:	40002800 	.word	0x40002800
 8008c70:	fb8fffbf 	.word	0xfb8fffbf
 8008c74:	ffffe0ff 	.word	0xffffe0ff

08008c78 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(const RTC_HandleTypeDef *hrtc)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8008c80:	4b0f      	ldr	r3, [pc, #60]	@ (8008cc0 <HAL_RTC_WaitForSynchro+0x48>)
 8008c82:	68da      	ldr	r2, [r3, #12]
 8008c84:	4b0e      	ldr	r3, [pc, #56]	@ (8008cc0 <HAL_RTC_WaitForSynchro+0x48>)
 8008c86:	2120      	movs	r1, #32
 8008c88:	438a      	bics	r2, r1
 8008c8a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008c8c:	f7fd f8b0 	bl	8005df0 <HAL_GetTick>
 8008c90:	0003      	movs	r3, r0
 8008c92:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008c94:	e00a      	b.n	8008cac <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008c96:	f7fd f8ab 	bl	8005df0 <HAL_GetTick>
 8008c9a:	0002      	movs	r2, r0
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	1ad2      	subs	r2, r2, r3
 8008ca0:	23fa      	movs	r3, #250	@ 0xfa
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d901      	bls.n	8008cac <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8008ca8:	2303      	movs	r3, #3
 8008caa:	e005      	b.n	8008cb8 <HAL_RTC_WaitForSynchro+0x40>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008cac:	4b04      	ldr	r3, [pc, #16]	@ (8008cc0 <HAL_RTC_WaitForSynchro+0x48>)
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	2220      	movs	r2, #32
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	d0ef      	beq.n	8008c96 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8008cb6:	2300      	movs	r3, #0
}
 8008cb8:	0018      	movs	r0, r3
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	b004      	add	sp, #16
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	40002800 	.word	0x40002800

08008cc4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(const RTC_HandleTypeDef *hrtc)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008ccc:	4b12      	ldr	r3, [pc, #72]	@ (8008d18 <RTC_EnterInitMode+0x54>)
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	2240      	movs	r2, #64	@ 0x40
 8008cd2:	4013      	ands	r3, r2
 8008cd4:	d11a      	bne.n	8008d0c <RTC_EnterInitMode+0x48>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008cd6:	4b10      	ldr	r3, [pc, #64]	@ (8008d18 <RTC_EnterInitMode+0x54>)
 8008cd8:	68da      	ldr	r2, [r3, #12]
 8008cda:	4b0f      	ldr	r3, [pc, #60]	@ (8008d18 <RTC_EnterInitMode+0x54>)
 8008cdc:	2180      	movs	r1, #128	@ 0x80
 8008cde:	430a      	orrs	r2, r1
 8008ce0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008ce2:	f7fd f885 	bl	8005df0 <HAL_GetTick>
 8008ce6:	0003      	movs	r3, r0
 8008ce8:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008cea:	e00a      	b.n	8008d02 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008cec:	f7fd f880 	bl	8005df0 <HAL_GetTick>
 8008cf0:	0002      	movs	r2, r0
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	1ad2      	subs	r2, r2, r3
 8008cf6:	23fa      	movs	r3, #250	@ 0xfa
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d901      	bls.n	8008d02 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	e005      	b.n	8008d0e <RTC_EnterInitMode+0x4a>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008d02:	4b05      	ldr	r3, [pc, #20]	@ (8008d18 <RTC_EnterInitMode+0x54>)
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	2240      	movs	r2, #64	@ 0x40
 8008d08:	4013      	ands	r3, r2
 8008d0a:	d0ef      	beq.n	8008cec <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	0018      	movs	r0, r3
 8008d10:	46bd      	mov	sp, r7
 8008d12:	b004      	add	sp, #16
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	46c0      	nop			@ (mov r8, r8)
 8008d18:	40002800 	.word	0x40002800

08008d1c <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b086      	sub	sp, #24
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	222c      	movs	r2, #44	@ 0x2c
 8008d2c:	5c9b      	ldrb	r3, [r3, r2]
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d101      	bne.n	8008d36 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8008d32:	2302      	movs	r3, #2
 8008d34:	e06c      	b.n	8008e10 <HAL_RTCEx_SetWakeUpTimer+0xf4>
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	222c      	movs	r2, #44	@ 0x2c
 8008d3a:	2101      	movs	r1, #1
 8008d3c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	222d      	movs	r2, #45	@ 0x2d
 8008d42:	2102      	movs	r1, #2
 8008d44:	5499      	strb	r1, [r3, r2]

  /* Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if (READ_BIT(RTC->CR, RTC_CR_WUTE) != 0U)
 8008d46:	4b34      	ldr	r3, [pc, #208]	@ (8008e18 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008d48:	699a      	ldr	r2, [r3, #24]
 8008d4a:	2380      	movs	r3, #128	@ 0x80
 8008d4c:	00db      	lsls	r3, r3, #3
 8008d4e:	4013      	ands	r3, r2
 8008d50:	d01c      	beq.n	8008d8c <HAL_RTCEx_SetWakeUpTimer+0x70>
  {
    tickstart = HAL_GetTick();
 8008d52:	f7fd f84d 	bl	8005df0 <HAL_GetTick>
 8008d56:	0003      	movs	r3, r0
 8008d58:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 8008d5a:	e012      	b.n	8008d82 <HAL_RTCEx_SetWakeUpTimer+0x66>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008d5c:	f7fd f848 	bl	8005df0 <HAL_GetTick>
 8008d60:	0002      	movs	r2, r0
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	1ad2      	subs	r2, r2, r3
 8008d66:	23fa      	movs	r3, #250	@ 0xfa
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d909      	bls.n	8008d82 <HAL_RTCEx_SetWakeUpTimer+0x66>
      {
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	222d      	movs	r2, #45	@ 0x2d
 8008d72:	2103      	movs	r1, #3
 8008d74:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	222c      	movs	r2, #44	@ 0x2c
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008d7e:	2303      	movs	r3, #3
 8008d80:	e046      	b.n	8008e10 <HAL_RTCEx_SetWakeUpTimer+0xf4>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 8008d82:	4b25      	ldr	r3, [pc, #148]	@ (8008e18 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	2204      	movs	r2, #4
 8008d88:	4013      	ands	r3, r2
 8008d8a:	d1e7      	bne.n	8008d5c <HAL_RTCEx_SetWakeUpTimer+0x40>
      }
    }
  }

  /* Disable Wake Up timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8008d8c:	4b22      	ldr	r3, [pc, #136]	@ (8008e18 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008d8e:	699a      	ldr	r2, [r3, #24]
 8008d90:	4b21      	ldr	r3, [pc, #132]	@ (8008e18 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008d92:	4922      	ldr	r1, [pc, #136]	@ (8008e1c <HAL_RTCEx_SetWakeUpTimer+0x100>)
 8008d94:	400a      	ands	r2, r1
 8008d96:	619a      	str	r2, [r3, #24]

  tickstart = HAL_GetTick();
 8008d98:	f7fd f82a 	bl	8005df0 <HAL_GetTick>
 8008d9c:	0003      	movs	r3, r0
 8008d9e:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8008da0:	e012      	b.n	8008dc8 <HAL_RTCEx_SetWakeUpTimer+0xac>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008da2:	f7fd f825 	bl	8005df0 <HAL_GetTick>
 8008da6:	0002      	movs	r2, r0
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	1ad2      	subs	r2, r2, r3
 8008dac:	23fa      	movs	r3, #250	@ 0xfa
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d909      	bls.n	8008dc8 <HAL_RTCEx_SetWakeUpTimer+0xac>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	222d      	movs	r2, #45	@ 0x2d
 8008db8:	2103      	movs	r1, #3
 8008dba:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	222c      	movs	r2, #44	@ 0x2c
 8008dc0:	2100      	movs	r1, #0
 8008dc2:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8008dc4:	2303      	movs	r3, #3
 8008dc6:	e023      	b.n	8008e10 <HAL_RTCEx_SetWakeUpTimer+0xf4>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8008dc8:	4b13      	ldr	r3, [pc, #76]	@ (8008e18 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008dca:	68db      	ldr	r3, [r3, #12]
 8008dcc:	2204      	movs	r2, #4
 8008dce:	4013      	ands	r3, r2
 8008dd0:	d0e7      	beq.n	8008da2 <HAL_RTCEx_SetWakeUpTimer+0x86>
    }
  }

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8008dd2:	4b11      	ldr	r3, [pc, #68]	@ (8008e18 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008dd4:	699b      	ldr	r3, [r3, #24]
 8008dd6:	2207      	movs	r2, #7
 8008dd8:	4393      	bics	r3, r2
 8008dda:	0019      	movs	r1, r3
 8008ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8008e18 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	430a      	orrs	r2, r1
 8008de2:	619a      	str	r2, [r3, #24]

  /* Configure the Wakeup Timer counter */
  WRITE_REG(RTC->WUTR, (uint32_t)WakeUpCounter);
 8008de4:	4b0c      	ldr	r3, [pc, #48]	@ (8008e18 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008de6:	68ba      	ldr	r2, [r7, #8]
 8008de8:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  SET_BIT(RTC->CR, RTC_CR_WUTE);
 8008dea:	4b0b      	ldr	r3, [pc, #44]	@ (8008e18 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008dec:	699a      	ldr	r2, [r3, #24]
 8008dee:	4b0a      	ldr	r3, [pc, #40]	@ (8008e18 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008df0:	2180      	movs	r1, #128	@ 0x80
 8008df2:	00c9      	lsls	r1, r1, #3
 8008df4:	430a      	orrs	r2, r1
 8008df6:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008df8:	4b07      	ldr	r3, [pc, #28]	@ (8008e18 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008dfa:	22ff      	movs	r2, #255	@ 0xff
 8008dfc:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	222d      	movs	r2, #45	@ 0x2d
 8008e02:	2101      	movs	r1, #1
 8008e04:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	222c      	movs	r2, #44	@ 0x2c
 8008e0a:	2100      	movs	r1, #0
 8008e0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008e0e:	2300      	movs	r3, #0
}
 8008e10:	0018      	movs	r0, r3
 8008e12:	46bd      	mov	sp, r7
 8008e14:	b006      	add	sp, #24
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	40002800 	.word	0x40002800
 8008e1c:	fffffbff 	.word	0xfffffbff

08008e20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d101      	bne.n	8008e32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e0a0      	b.n	8008f74 <HAL_SPI_Init+0x154>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d109      	bne.n	8008e4e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	685a      	ldr	r2, [r3, #4]
 8008e3e:	2382      	movs	r3, #130	@ 0x82
 8008e40:	005b      	lsls	r3, r3, #1
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d009      	beq.n	8008e5a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	61da      	str	r2, [r3, #28]
 8008e4c:	e005      	b.n	8008e5a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2200      	movs	r2, #0
 8008e52:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	225d      	movs	r2, #93	@ 0x5d
 8008e64:	5c9b      	ldrb	r3, [r3, r2]
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d107      	bne.n	8008e7c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	225c      	movs	r2, #92	@ 0x5c
 8008e70:	2100      	movs	r1, #0
 8008e72:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	0018      	movs	r0, r3
 8008e78:	f7fc fd02 	bl	8005880 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	225d      	movs	r2, #93	@ 0x5d
 8008e80:	2102      	movs	r1, #2
 8008e82:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2140      	movs	r1, #64	@ 0x40
 8008e90:	438a      	bics	r2, r1
 8008e92:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	68da      	ldr	r2, [r3, #12]
 8008e98:	23e0      	movs	r3, #224	@ 0xe0
 8008e9a:	00db      	lsls	r3, r3, #3
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d902      	bls.n	8008ea6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	60fb      	str	r3, [r7, #12]
 8008ea4:	e002      	b.n	8008eac <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008ea6:	2380      	movs	r3, #128	@ 0x80
 8008ea8:	015b      	lsls	r3, r3, #5
 8008eaa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	68da      	ldr	r2, [r3, #12]
 8008eb0:	23f0      	movs	r3, #240	@ 0xf0
 8008eb2:	011b      	lsls	r3, r3, #4
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d008      	beq.n	8008eca <HAL_SPI_Init+0xaa>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	68da      	ldr	r2, [r3, #12]
 8008ebc:	23e0      	movs	r3, #224	@ 0xe0
 8008ebe:	00db      	lsls	r3, r3, #3
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d002      	beq.n	8008eca <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	685a      	ldr	r2, [r3, #4]
 8008ece:	2382      	movs	r3, #130	@ 0x82
 8008ed0:	005b      	lsls	r3, r3, #1
 8008ed2:	401a      	ands	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6899      	ldr	r1, [r3, #8]
 8008ed8:	2384      	movs	r3, #132	@ 0x84
 8008eda:	021b      	lsls	r3, r3, #8
 8008edc:	400b      	ands	r3, r1
 8008ede:	431a      	orrs	r2, r3
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	691b      	ldr	r3, [r3, #16]
 8008ee4:	2102      	movs	r1, #2
 8008ee6:	400b      	ands	r3, r1
 8008ee8:	431a      	orrs	r2, r3
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	695b      	ldr	r3, [r3, #20]
 8008eee:	2101      	movs	r1, #1
 8008ef0:	400b      	ands	r3, r1
 8008ef2:	431a      	orrs	r2, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6999      	ldr	r1, [r3, #24]
 8008ef8:	2380      	movs	r3, #128	@ 0x80
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	400b      	ands	r3, r1
 8008efe:	431a      	orrs	r2, r3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	69db      	ldr	r3, [r3, #28]
 8008f04:	2138      	movs	r1, #56	@ 0x38
 8008f06:	400b      	ands	r3, r1
 8008f08:	431a      	orrs	r2, r3
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a1b      	ldr	r3, [r3, #32]
 8008f0e:	2180      	movs	r1, #128	@ 0x80
 8008f10:	400b      	ands	r3, r1
 8008f12:	431a      	orrs	r2, r3
 8008f14:	0011      	movs	r1, r2
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008f1a:	2380      	movs	r3, #128	@ 0x80
 8008f1c:	019b      	lsls	r3, r3, #6
 8008f1e:	401a      	ands	r2, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	430a      	orrs	r2, r1
 8008f26:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	699b      	ldr	r3, [r3, #24]
 8008f2c:	0c1b      	lsrs	r3, r3, #16
 8008f2e:	2204      	movs	r2, #4
 8008f30:	401a      	ands	r2, r3
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f36:	2110      	movs	r1, #16
 8008f38:	400b      	ands	r3, r1
 8008f3a:	431a      	orrs	r2, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f40:	2108      	movs	r1, #8
 8008f42:	400b      	ands	r3, r1
 8008f44:	431a      	orrs	r2, r3
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	68d9      	ldr	r1, [r3, #12]
 8008f4a:	23f0      	movs	r3, #240	@ 0xf0
 8008f4c:	011b      	lsls	r3, r3, #4
 8008f4e:	400b      	ands	r3, r1
 8008f50:	431a      	orrs	r2, r3
 8008f52:	0011      	movs	r1, r2
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	2380      	movs	r3, #128	@ 0x80
 8008f58:	015b      	lsls	r3, r3, #5
 8008f5a:	401a      	ands	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	430a      	orrs	r2, r1
 8008f62:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2200      	movs	r2, #0
 8008f68:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	225d      	movs	r2, #93	@ 0x5d
 8008f6e:	2101      	movs	r1, #1
 8008f70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	0018      	movs	r0, r3
 8008f76:	46bd      	mov	sp, r7
 8008f78:	b004      	add	sp, #16
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d101      	bne.n	8008f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e046      	b.n	800901c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2288      	movs	r2, #136	@ 0x88
 8008f92:	589b      	ldr	r3, [r3, r2]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d107      	bne.n	8008fa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2284      	movs	r2, #132	@ 0x84
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	0018      	movs	r0, r3
 8008fa4:	f7fc fe2a 	bl	8005bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2288      	movs	r2, #136	@ 0x88
 8008fac:	2124      	movs	r1, #36	@ 0x24
 8008fae:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2101      	movs	r1, #1
 8008fbc:	438a      	bics	r2, r1
 8008fbe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d003      	beq.n	8008fd0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	0018      	movs	r0, r3
 8008fcc:	f000 f9fe 	bl	80093cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	0018      	movs	r0, r3
 8008fd4:	f000 f828 	bl	8009028 <UART_SetConfig>
 8008fd8:	0003      	movs	r3, r0
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d101      	bne.n	8008fe2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e01c      	b.n	800901c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	685a      	ldr	r2, [r3, #4]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	490d      	ldr	r1, [pc, #52]	@ (8009024 <HAL_UART_Init+0xa8>)
 8008fee:	400a      	ands	r2, r1
 8008ff0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	689a      	ldr	r2, [r3, #8]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	212a      	movs	r1, #42	@ 0x2a
 8008ffe:	438a      	bics	r2, r1
 8009000:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2101      	movs	r1, #1
 800900e:	430a      	orrs	r2, r1
 8009010:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	0018      	movs	r0, r3
 8009016:	f000 fa8d 	bl	8009534 <UART_CheckIdleState>
 800901a:	0003      	movs	r3, r0
}
 800901c:	0018      	movs	r0, r3
 800901e:	46bd      	mov	sp, r7
 8009020:	b002      	add	sp, #8
 8009022:	bd80      	pop	{r7, pc}
 8009024:	ffffb7ff 	.word	0xffffb7ff

08009028 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009028:	b5b0      	push	{r4, r5, r7, lr}
 800902a:	b092      	sub	sp, #72	@ 0x48
 800902c:	af00      	add	r7, sp, #0
 800902e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009030:	231f      	movs	r3, #31
 8009032:	2220      	movs	r2, #32
 8009034:	189b      	adds	r3, r3, r2
 8009036:	19db      	adds	r3, r3, r7
 8009038:	2200      	movs	r2, #0
 800903a:	701a      	strb	r2, [r3, #0]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800903c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4ac8      	ldr	r2, [pc, #800]	@ (8009364 <UART_SetConfig+0x33c>)
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009044:	689a      	ldr	r2, [r3, #8]
 8009046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009048:	691b      	ldr	r3, [r3, #16]
 800904a:	431a      	orrs	r2, r3
 800904c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800904e:	695b      	ldr	r3, [r3, #20]
 8009050:	431a      	orrs	r2, r3
 8009052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009054:	69db      	ldr	r3, [r3, #28]
 8009056:	4313      	orrs	r3, r2
 8009058:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800905a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4ac1      	ldr	r2, [pc, #772]	@ (8009368 <UART_SetConfig+0x340>)
 8009062:	4013      	ands	r3, r2
 8009064:	0019      	movs	r1, r3
 8009066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800906c:	430b      	orrs	r3, r1
 800906e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	4abd      	ldr	r2, [pc, #756]	@ (800936c <UART_SetConfig+0x344>)
 8009078:	4013      	ands	r3, r2
 800907a:	0018      	movs	r0, r3
 800907c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800907e:	68d9      	ldr	r1, [r3, #12]
 8009080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	0003      	movs	r3, r0
 8009086:	430b      	orrs	r3, r1
 8009088:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800908a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800908c:	699b      	ldr	r3, [r3, #24]
 800908e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4ab3      	ldr	r2, [pc, #716]	@ (8009364 <UART_SetConfig+0x33c>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d00e      	beq.n	80090b8 <UART_SetConfig+0x90>
 800909a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4ab4      	ldr	r2, [pc, #720]	@ (8009370 <UART_SetConfig+0x348>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d009      	beq.n	80090b8 <UART_SetConfig+0x90>
 80090a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4ab2      	ldr	r2, [pc, #712]	@ (8009374 <UART_SetConfig+0x34c>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d004      	beq.n	80090b8 <UART_SetConfig+0x90>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80090ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b0:	6a1b      	ldr	r3, [r3, #32]
 80090b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090b4:	4313      	orrs	r3, r2
 80090b6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	4aae      	ldr	r2, [pc, #696]	@ (8009378 <UART_SetConfig+0x350>)
 80090c0:	4013      	ands	r3, r2
 80090c2:	0019      	movs	r1, r3
 80090c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090ca:	430b      	orrs	r3, r1
 80090cc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80090ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090d4:	220f      	movs	r2, #15
 80090d6:	4393      	bics	r3, r2
 80090d8:	0018      	movs	r0, r3
 80090da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090dc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80090de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	0003      	movs	r3, r0
 80090e4:	430b      	orrs	r3, r1
 80090e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4aa3      	ldr	r2, [pc, #652]	@ (800937c <UART_SetConfig+0x354>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d102      	bne.n	80090f8 <UART_SetConfig+0xd0>
 80090f2:	2301      	movs	r3, #1
 80090f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80090f6:	e033      	b.n	8009160 <UART_SetConfig+0x138>
 80090f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4aa0      	ldr	r2, [pc, #640]	@ (8009380 <UART_SetConfig+0x358>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d102      	bne.n	8009108 <UART_SetConfig+0xe0>
 8009102:	2302      	movs	r3, #2
 8009104:	643b      	str	r3, [r7, #64]	@ 0x40
 8009106:	e02b      	b.n	8009160 <UART_SetConfig+0x138>
 8009108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a9d      	ldr	r2, [pc, #628]	@ (8009384 <UART_SetConfig+0x35c>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d103      	bne.n	800911a <UART_SetConfig+0xf2>
 8009112:	2380      	movs	r3, #128	@ 0x80
 8009114:	025b      	lsls	r3, r3, #9
 8009116:	643b      	str	r3, [r7, #64]	@ 0x40
 8009118:	e022      	b.n	8009160 <UART_SetConfig+0x138>
 800911a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a9a      	ldr	r2, [pc, #616]	@ (8009388 <UART_SetConfig+0x360>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d103      	bne.n	800912c <UART_SetConfig+0x104>
 8009124:	2380      	movs	r3, #128	@ 0x80
 8009126:	029b      	lsls	r3, r3, #10
 8009128:	643b      	str	r3, [r7, #64]	@ 0x40
 800912a:	e019      	b.n	8009160 <UART_SetConfig+0x138>
 800912c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a8c      	ldr	r2, [pc, #560]	@ (8009364 <UART_SetConfig+0x33c>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d102      	bne.n	800913c <UART_SetConfig+0x114>
 8009136:	2310      	movs	r3, #16
 8009138:	643b      	str	r3, [r7, #64]	@ 0x40
 800913a:	e011      	b.n	8009160 <UART_SetConfig+0x138>
 800913c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a8b      	ldr	r2, [pc, #556]	@ (8009370 <UART_SetConfig+0x348>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d102      	bne.n	800914c <UART_SetConfig+0x124>
 8009146:	2308      	movs	r3, #8
 8009148:	643b      	str	r3, [r7, #64]	@ 0x40
 800914a:	e009      	b.n	8009160 <UART_SetConfig+0x138>
 800914c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a88      	ldr	r2, [pc, #544]	@ (8009374 <UART_SetConfig+0x34c>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d102      	bne.n	800915c <UART_SetConfig+0x134>
 8009156:	2304      	movs	r3, #4
 8009158:	643b      	str	r3, [r7, #64]	@ 0x40
 800915a:	e001      	b.n	8009160 <UART_SetConfig+0x138>
 800915c:	2300      	movs	r3, #0
 800915e:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a7f      	ldr	r2, [pc, #508]	@ (8009364 <UART_SetConfig+0x33c>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d00a      	beq.n	8009180 <UART_SetConfig+0x158>
 800916a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a80      	ldr	r2, [pc, #512]	@ (8009370 <UART_SetConfig+0x348>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d005      	beq.n	8009180 <UART_SetConfig+0x158>
 8009174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a7e      	ldr	r2, [pc, #504]	@ (8009374 <UART_SetConfig+0x34c>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d000      	beq.n	8009180 <UART_SetConfig+0x158>
 800917e:	e06f      	b.n	8009260 <UART_SetConfig+0x238>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009180:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009182:	0018      	movs	r0, r3
 8009184:	f7fe fec8 	bl	8007f18 <HAL_RCCEx_GetPeriphCLKFreq>
 8009188:	0003      	movs	r3, r0
 800918a:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* If proper clock source reported */
    if (pclk != 0U)
 800918c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800918e:	2b00      	cmp	r3, #0
 8009190:	d100      	bne.n	8009194 <UART_SetConfig+0x16c>
 8009192:	e103      	b.n	800939c <UART_SetConfig+0x374>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009196:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009198:	4b7c      	ldr	r3, [pc, #496]	@ (800938c <UART_SetConfig+0x364>)
 800919a:	0052      	lsls	r2, r2, #1
 800919c:	5ad3      	ldrh	r3, [r2, r3]
 800919e:	0019      	movs	r1, r3
 80091a0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80091a2:	f7f6 ffcd 	bl	8000140 <__udivsi3>
 80091a6:	0003      	movs	r3, r0
 80091a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ac:	685a      	ldr	r2, [r3, #4]
 80091ae:	0013      	movs	r3, r2
 80091b0:	005b      	lsls	r3, r3, #1
 80091b2:	189b      	adds	r3, r3, r2
 80091b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d305      	bcc.n	80091c6 <UART_SetConfig+0x19e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80091ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d906      	bls.n	80091d4 <UART_SetConfig+0x1ac>
      {
        ret = HAL_ERROR;
 80091c6:	231f      	movs	r3, #31
 80091c8:	2220      	movs	r2, #32
 80091ca:	189b      	adds	r3, r3, r2
 80091cc:	19db      	adds	r3, r3, r7
 80091ce:	2201      	movs	r2, #1
 80091d0:	701a      	strb	r2, [r3, #0]
 80091d2:	e044      	b.n	800925e <UART_SetConfig+0x236>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d6:	61bb      	str	r3, [r7, #24]
 80091d8:	2300      	movs	r3, #0
 80091da:	61fb      	str	r3, [r7, #28]
 80091dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80091e0:	4b6a      	ldr	r3, [pc, #424]	@ (800938c <UART_SetConfig+0x364>)
 80091e2:	0052      	lsls	r2, r2, #1
 80091e4:	5ad3      	ldrh	r3, [r2, r3]
 80091e6:	613b      	str	r3, [r7, #16]
 80091e8:	2300      	movs	r3, #0
 80091ea:	617b      	str	r3, [r7, #20]
 80091ec:	693a      	ldr	r2, [r7, #16]
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	69b8      	ldr	r0, [r7, #24]
 80091f2:	69f9      	ldr	r1, [r7, #28]
 80091f4:	f7f7 f976 	bl	80004e4 <__aeabi_uldivmod>
 80091f8:	0002      	movs	r2, r0
 80091fa:	000b      	movs	r3, r1
 80091fc:	0e11      	lsrs	r1, r2, #24
 80091fe:	021d      	lsls	r5, r3, #8
 8009200:	430d      	orrs	r5, r1
 8009202:	0214      	lsls	r4, r2, #8
 8009204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	085b      	lsrs	r3, r3, #1
 800920a:	60bb      	str	r3, [r7, #8]
 800920c:	2300      	movs	r3, #0
 800920e:	60fb      	str	r3, [r7, #12]
 8009210:	68b8      	ldr	r0, [r7, #8]
 8009212:	68f9      	ldr	r1, [r7, #12]
 8009214:	1900      	adds	r0, r0, r4
 8009216:	4169      	adcs	r1, r5
 8009218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	603b      	str	r3, [r7, #0]
 800921e:	2300      	movs	r3, #0
 8009220:	607b      	str	r3, [r7, #4]
 8009222:	683a      	ldr	r2, [r7, #0]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f7f7 f95d 	bl	80004e4 <__aeabi_uldivmod>
 800922a:	0002      	movs	r2, r0
 800922c:	000b      	movs	r3, r1
 800922e:	0013      	movs	r3, r2
 8009230:	637b      	str	r3, [r7, #52]	@ 0x34
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009232:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009234:	23c0      	movs	r3, #192	@ 0xc0
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	429a      	cmp	r2, r3
 800923a:	d309      	bcc.n	8009250 <UART_SetConfig+0x228>
 800923c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800923e:	2380      	movs	r3, #128	@ 0x80
 8009240:	035b      	lsls	r3, r3, #13
 8009242:	429a      	cmp	r2, r3
 8009244:	d204      	bcs.n	8009250 <UART_SetConfig+0x228>
        {
          huart->Instance->BRR = usartdiv;
 8009246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800924c:	60da      	str	r2, [r3, #12]
 800924e:	e006      	b.n	800925e <UART_SetConfig+0x236>
        }
        else
        {
          ret = HAL_ERROR;
 8009250:	231f      	movs	r3, #31
 8009252:	2220      	movs	r2, #32
 8009254:	189b      	adds	r3, r3, r2
 8009256:	19db      	adds	r3, r3, r7
 8009258:	2201      	movs	r2, #1
 800925a:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800925c:	e09e      	b.n	800939c <UART_SetConfig+0x374>
 800925e:	e09d      	b.n	800939c <UART_SetConfig+0x374>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009262:	69da      	ldr	r2, [r3, #28]
 8009264:	2380      	movs	r3, #128	@ 0x80
 8009266:	021b      	lsls	r3, r3, #8
 8009268:	429a      	cmp	r2, r3
 800926a:	d14c      	bne.n	8009306 <UART_SetConfig+0x2de>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800926c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800926e:	0018      	movs	r0, r3
 8009270:	f7fe fe52 	bl	8007f18 <HAL_RCCEx_GetPeriphCLKFreq>
 8009274:	0003      	movs	r3, r0
 8009276:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800927a:	2b00      	cmp	r3, #0
 800927c:	d100      	bne.n	8009280 <UART_SetConfig+0x258>
 800927e:	e08d      	b.n	800939c <UART_SetConfig+0x374>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009282:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009284:	4b41      	ldr	r3, [pc, #260]	@ (800938c <UART_SetConfig+0x364>)
 8009286:	0052      	lsls	r2, r2, #1
 8009288:	5ad3      	ldrh	r3, [r2, r3]
 800928a:	0019      	movs	r1, r3
 800928c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800928e:	f7f6 ff57 	bl	8000140 <__udivsi3>
 8009292:	0003      	movs	r3, r0
 8009294:	005a      	lsls	r2, r3, #1
 8009296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	085b      	lsrs	r3, r3, #1
 800929c:	18d2      	adds	r2, r2, r3
 800929e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	0019      	movs	r1, r3
 80092a4:	0010      	movs	r0, r2
 80092a6:	f7f6 ff4b 	bl	8000140 <__udivsi3>
 80092aa:	0003      	movs	r3, r0
 80092ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092b0:	2b0f      	cmp	r3, #15
 80092b2:	d921      	bls.n	80092f8 <UART_SetConfig+0x2d0>
 80092b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80092b6:	2380      	movs	r3, #128	@ 0x80
 80092b8:	025b      	lsls	r3, r3, #9
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d21c      	bcs.n	80092f8 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80092be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092c0:	b29a      	uxth	r2, r3
 80092c2:	2012      	movs	r0, #18
 80092c4:	2420      	movs	r4, #32
 80092c6:	1903      	adds	r3, r0, r4
 80092c8:	19db      	adds	r3, r3, r7
 80092ca:	210f      	movs	r1, #15
 80092cc:	438a      	bics	r2, r1
 80092ce:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80092d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092d2:	085b      	lsrs	r3, r3, #1
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	2207      	movs	r2, #7
 80092d8:	4013      	ands	r3, r2
 80092da:	b299      	uxth	r1, r3
 80092dc:	1903      	adds	r3, r0, r4
 80092de:	19db      	adds	r3, r3, r7
 80092e0:	1902      	adds	r2, r0, r4
 80092e2:	19d2      	adds	r2, r2, r7
 80092e4:	8812      	ldrh	r2, [r2, #0]
 80092e6:	430a      	orrs	r2, r1
 80092e8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80092ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	1902      	adds	r2, r0, r4
 80092f0:	19d2      	adds	r2, r2, r7
 80092f2:	8812      	ldrh	r2, [r2, #0]
 80092f4:	60da      	str	r2, [r3, #12]
 80092f6:	e051      	b.n	800939c <UART_SetConfig+0x374>
      }
      else
      {
        ret = HAL_ERROR;
 80092f8:	231f      	movs	r3, #31
 80092fa:	2220      	movs	r2, #32
 80092fc:	189b      	adds	r3, r3, r2
 80092fe:	19db      	adds	r3, r3, r7
 8009300:	2201      	movs	r2, #1
 8009302:	701a      	strb	r2, [r3, #0]
 8009304:	e04a      	b.n	800939c <UART_SetConfig+0x374>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009306:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009308:	0018      	movs	r0, r3
 800930a:	f7fe fe05 	bl	8007f18 <HAL_RCCEx_GetPeriphCLKFreq>
 800930e:	0003      	movs	r3, r0
 8009310:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (pclk != 0U)
 8009312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009314:	2b00      	cmp	r3, #0
 8009316:	d041      	beq.n	800939c <UART_SetConfig+0x374>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800931a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800931c:	4b1b      	ldr	r3, [pc, #108]	@ (800938c <UART_SetConfig+0x364>)
 800931e:	0052      	lsls	r2, r2, #1
 8009320:	5ad3      	ldrh	r3, [r2, r3]
 8009322:	0019      	movs	r1, r3
 8009324:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009326:	f7f6 ff0b 	bl	8000140 <__udivsi3>
 800932a:	0003      	movs	r3, r0
 800932c:	001a      	movs	r2, r3
 800932e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	085b      	lsrs	r3, r3, #1
 8009334:	18d2      	adds	r2, r2, r3
 8009336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	0019      	movs	r1, r3
 800933c:	0010      	movs	r0, r2
 800933e:	f7f6 feff 	bl	8000140 <__udivsi3>
 8009342:	0003      	movs	r3, r0
 8009344:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009348:	2b0f      	cmp	r3, #15
 800934a:	d921      	bls.n	8009390 <UART_SetConfig+0x368>
 800934c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800934e:	2380      	movs	r3, #128	@ 0x80
 8009350:	025b      	lsls	r3, r3, #9
 8009352:	429a      	cmp	r2, r3
 8009354:	d21c      	bcs.n	8009390 <UART_SetConfig+0x368>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009358:	b29a      	uxth	r2, r3
 800935a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	60da      	str	r2, [r3, #12]
 8009360:	e01c      	b.n	800939c <UART_SetConfig+0x374>
 8009362:	46c0      	nop			@ (mov r8, r8)
 8009364:	40008000 	.word	0x40008000
 8009368:	cfff69f3 	.word	0xcfff69f3
 800936c:	ffffcfff 	.word	0xffffcfff
 8009370:	40008400 	.word	0x40008400
 8009374:	40008c00 	.word	0x40008c00
 8009378:	11fff4ff 	.word	0x11fff4ff
 800937c:	40013800 	.word	0x40013800
 8009380:	40004400 	.word	0x40004400
 8009384:	40004800 	.word	0x40004800
 8009388:	40004c00 	.word	0x40004c00
 800938c:	080100f4 	.word	0x080100f4
      }
      else
      {
        ret = HAL_ERROR;
 8009390:	231f      	movs	r3, #31
 8009392:	2220      	movs	r2, #32
 8009394:	189b      	adds	r3, r3, r2
 8009396:	19db      	adds	r3, r3, r7
 8009398:	2201      	movs	r2, #1
 800939a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800939c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800939e:	226a      	movs	r2, #106	@ 0x6a
 80093a0:	2101      	movs	r1, #1
 80093a2:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80093a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093a6:	2268      	movs	r2, #104	@ 0x68
 80093a8:	2101      	movs	r1, #1
 80093aa:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80093ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ae:	2200      	movs	r2, #0
 80093b0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80093b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b4:	2200      	movs	r2, #0
 80093b6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80093b8:	231f      	movs	r3, #31
 80093ba:	2220      	movs	r2, #32
 80093bc:	189b      	adds	r3, r3, r2
 80093be:	19db      	adds	r3, r3, r7
 80093c0:	781b      	ldrb	r3, [r3, #0]
}
 80093c2:	0018      	movs	r0, r3
 80093c4:	46bd      	mov	sp, r7
 80093c6:	b012      	add	sp, #72	@ 0x48
 80093c8:	bdb0      	pop	{r4, r5, r7, pc}
 80093ca:	46c0      	nop			@ (mov r8, r8)

080093cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093d8:	2208      	movs	r2, #8
 80093da:	4013      	ands	r3, r2
 80093dc:	d00b      	beq.n	80093f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	4a4a      	ldr	r2, [pc, #296]	@ (8009510 <UART_AdvFeatureConfig+0x144>)
 80093e6:	4013      	ands	r3, r2
 80093e8:	0019      	movs	r1, r3
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	430a      	orrs	r2, r1
 80093f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093fa:	2201      	movs	r2, #1
 80093fc:	4013      	ands	r3, r2
 80093fe:	d00b      	beq.n	8009418 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	4a43      	ldr	r2, [pc, #268]	@ (8009514 <UART_AdvFeatureConfig+0x148>)
 8009408:	4013      	ands	r3, r2
 800940a:	0019      	movs	r1, r3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	430a      	orrs	r2, r1
 8009416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800941c:	2202      	movs	r2, #2
 800941e:	4013      	ands	r3, r2
 8009420:	d00b      	beq.n	800943a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	4a3b      	ldr	r2, [pc, #236]	@ (8009518 <UART_AdvFeatureConfig+0x14c>)
 800942a:	4013      	ands	r3, r2
 800942c:	0019      	movs	r1, r3
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	430a      	orrs	r2, r1
 8009438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800943e:	2204      	movs	r2, #4
 8009440:	4013      	ands	r3, r2
 8009442:	d00b      	beq.n	800945c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	4a34      	ldr	r2, [pc, #208]	@ (800951c <UART_AdvFeatureConfig+0x150>)
 800944c:	4013      	ands	r3, r2
 800944e:	0019      	movs	r1, r3
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	430a      	orrs	r2, r1
 800945a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009460:	2210      	movs	r2, #16
 8009462:	4013      	ands	r3, r2
 8009464:	d00b      	beq.n	800947e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	4a2c      	ldr	r2, [pc, #176]	@ (8009520 <UART_AdvFeatureConfig+0x154>)
 800946e:	4013      	ands	r3, r2
 8009470:	0019      	movs	r1, r3
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	430a      	orrs	r2, r1
 800947c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009482:	2220      	movs	r2, #32
 8009484:	4013      	ands	r3, r2
 8009486:	d00b      	beq.n	80094a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	689b      	ldr	r3, [r3, #8]
 800948e:	4a25      	ldr	r2, [pc, #148]	@ (8009524 <UART_AdvFeatureConfig+0x158>)
 8009490:	4013      	ands	r3, r2
 8009492:	0019      	movs	r1, r3
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	430a      	orrs	r2, r1
 800949e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094a4:	2240      	movs	r2, #64	@ 0x40
 80094a6:	4013      	ands	r3, r2
 80094a8:	d01d      	beq.n	80094e6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	4a1d      	ldr	r2, [pc, #116]	@ (8009528 <UART_AdvFeatureConfig+0x15c>)
 80094b2:	4013      	ands	r3, r2
 80094b4:	0019      	movs	r1, r3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	430a      	orrs	r2, r1
 80094c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80094c6:	2380      	movs	r3, #128	@ 0x80
 80094c8:	035b      	lsls	r3, r3, #13
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d10b      	bne.n	80094e6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	4a15      	ldr	r2, [pc, #84]	@ (800952c <UART_AdvFeatureConfig+0x160>)
 80094d6:	4013      	ands	r3, r2
 80094d8:	0019      	movs	r1, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	430a      	orrs	r2, r1
 80094e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094ea:	2280      	movs	r2, #128	@ 0x80
 80094ec:	4013      	ands	r3, r2
 80094ee:	d00b      	beq.n	8009508 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	4a0e      	ldr	r2, [pc, #56]	@ (8009530 <UART_AdvFeatureConfig+0x164>)
 80094f8:	4013      	ands	r3, r2
 80094fa:	0019      	movs	r1, r3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	430a      	orrs	r2, r1
 8009506:	605a      	str	r2, [r3, #4]
  }
}
 8009508:	46c0      	nop			@ (mov r8, r8)
 800950a:	46bd      	mov	sp, r7
 800950c:	b002      	add	sp, #8
 800950e:	bd80      	pop	{r7, pc}
 8009510:	ffff7fff 	.word	0xffff7fff
 8009514:	fffdffff 	.word	0xfffdffff
 8009518:	fffeffff 	.word	0xfffeffff
 800951c:	fffbffff 	.word	0xfffbffff
 8009520:	ffffefff 	.word	0xffffefff
 8009524:	ffffdfff 	.word	0xffffdfff
 8009528:	ffefffff 	.word	0xffefffff
 800952c:	ff9fffff 	.word	0xff9fffff
 8009530:	fff7ffff 	.word	0xfff7ffff

08009534 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b092      	sub	sp, #72	@ 0x48
 8009538:	af02      	add	r7, sp, #8
 800953a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2290      	movs	r2, #144	@ 0x90
 8009540:	2100      	movs	r1, #0
 8009542:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009544:	f7fc fc54 	bl	8005df0 <HAL_GetTick>
 8009548:	0003      	movs	r3, r0
 800954a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	2208      	movs	r2, #8
 8009554:	4013      	ands	r3, r2
 8009556:	2b08      	cmp	r3, #8
 8009558:	d12d      	bne.n	80095b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800955a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800955c:	2280      	movs	r2, #128	@ 0x80
 800955e:	0391      	lsls	r1, r2, #14
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	4a47      	ldr	r2, [pc, #284]	@ (8009680 <UART_CheckIdleState+0x14c>)
 8009564:	9200      	str	r2, [sp, #0]
 8009566:	2200      	movs	r2, #0
 8009568:	f000 f88e 	bl	8009688 <UART_WaitOnFlagUntilTimeout>
 800956c:	1e03      	subs	r3, r0, #0
 800956e:	d022      	beq.n	80095b6 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009570:	f3ef 8310 	mrs	r3, PRIMASK
 8009574:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009578:	63bb      	str	r3, [r7, #56]	@ 0x38
 800957a:	2301      	movs	r3, #1
 800957c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800957e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009580:	f383 8810 	msr	PRIMASK, r3
}
 8009584:	46c0      	nop			@ (mov r8, r8)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2180      	movs	r1, #128	@ 0x80
 8009592:	438a      	bics	r2, r1
 8009594:	601a      	str	r2, [r3, #0]
 8009596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009598:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800959a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800959c:	f383 8810 	msr	PRIMASK, r3
}
 80095a0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2288      	movs	r2, #136	@ 0x88
 80095a6:	2120      	movs	r1, #32
 80095a8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2284      	movs	r2, #132	@ 0x84
 80095ae:	2100      	movs	r1, #0
 80095b0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095b2:	2303      	movs	r3, #3
 80095b4:	e060      	b.n	8009678 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2204      	movs	r2, #4
 80095be:	4013      	ands	r3, r2
 80095c0:	2b04      	cmp	r3, #4
 80095c2:	d146      	bne.n	8009652 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095c6:	2280      	movs	r2, #128	@ 0x80
 80095c8:	03d1      	lsls	r1, r2, #15
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	4a2c      	ldr	r2, [pc, #176]	@ (8009680 <UART_CheckIdleState+0x14c>)
 80095ce:	9200      	str	r2, [sp, #0]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f000 f859 	bl	8009688 <UART_WaitOnFlagUntilTimeout>
 80095d6:	1e03      	subs	r3, r0, #0
 80095d8:	d03b      	beq.n	8009652 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80095da:	f3ef 8310 	mrs	r3, PRIMASK
 80095de:	60fb      	str	r3, [r7, #12]
  return(result);
 80095e0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80095e4:	2301      	movs	r3, #1
 80095e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	f383 8810 	msr	PRIMASK, r3
}
 80095ee:	46c0      	nop			@ (mov r8, r8)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4922      	ldr	r1, [pc, #136]	@ (8009684 <UART_CheckIdleState+0x150>)
 80095fc:	400a      	ands	r2, r1
 80095fe:	601a      	str	r2, [r3, #0]
 8009600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009602:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	f383 8810 	msr	PRIMASK, r3
}
 800960a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800960c:	f3ef 8310 	mrs	r3, PRIMASK
 8009610:	61bb      	str	r3, [r7, #24]
  return(result);
 8009612:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009614:	633b      	str	r3, [r7, #48]	@ 0x30
 8009616:	2301      	movs	r3, #1
 8009618:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800961a:	69fb      	ldr	r3, [r7, #28]
 800961c:	f383 8810 	msr	PRIMASK, r3
}
 8009620:	46c0      	nop			@ (mov r8, r8)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	689a      	ldr	r2, [r3, #8]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2101      	movs	r1, #1
 800962e:	438a      	bics	r2, r1
 8009630:	609a      	str	r2, [r3, #8]
 8009632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009634:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009636:	6a3b      	ldr	r3, [r7, #32]
 8009638:	f383 8810 	msr	PRIMASK, r3
}
 800963c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	228c      	movs	r2, #140	@ 0x8c
 8009642:	2120      	movs	r1, #32
 8009644:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2284      	movs	r2, #132	@ 0x84
 800964a:	2100      	movs	r1, #0
 800964c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800964e:	2303      	movs	r3, #3
 8009650:	e012      	b.n	8009678 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2288      	movs	r2, #136	@ 0x88
 8009656:	2120      	movs	r1, #32
 8009658:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	228c      	movs	r2, #140	@ 0x8c
 800965e:	2120      	movs	r1, #32
 8009660:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2284      	movs	r2, #132	@ 0x84
 8009672:	2100      	movs	r1, #0
 8009674:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009676:	2300      	movs	r3, #0
}
 8009678:	0018      	movs	r0, r3
 800967a:	46bd      	mov	sp, r7
 800967c:	b010      	add	sp, #64	@ 0x40
 800967e:	bd80      	pop	{r7, pc}
 8009680:	01ffffff 	.word	0x01ffffff
 8009684:	fffffedf 	.word	0xfffffedf

08009688 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	603b      	str	r3, [r7, #0]
 8009694:	1dfb      	adds	r3, r7, #7
 8009696:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009698:	e051      	b.n	800973e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800969a:	69bb      	ldr	r3, [r7, #24]
 800969c:	3301      	adds	r3, #1
 800969e:	d04e      	beq.n	800973e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096a0:	f7fc fba6 	bl	8005df0 <HAL_GetTick>
 80096a4:	0002      	movs	r2, r0
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	1ad3      	subs	r3, r2, r3
 80096aa:	69ba      	ldr	r2, [r7, #24]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d302      	bcc.n	80096b6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d101      	bne.n	80096ba <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80096b6:	2303      	movs	r3, #3
 80096b8:	e051      	b.n	800975e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	2204      	movs	r2, #4
 80096c2:	4013      	ands	r3, r2
 80096c4:	d03b      	beq.n	800973e <UART_WaitOnFlagUntilTimeout+0xb6>
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	2b80      	cmp	r3, #128	@ 0x80
 80096ca:	d038      	beq.n	800973e <UART_WaitOnFlagUntilTimeout+0xb6>
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	2b40      	cmp	r3, #64	@ 0x40
 80096d0:	d035      	beq.n	800973e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	69db      	ldr	r3, [r3, #28]
 80096d8:	2208      	movs	r2, #8
 80096da:	4013      	ands	r3, r2
 80096dc:	2b08      	cmp	r3, #8
 80096de:	d111      	bne.n	8009704 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2208      	movs	r2, #8
 80096e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	0018      	movs	r0, r3
 80096ec:	f000 f83c 	bl	8009768 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2290      	movs	r2, #144	@ 0x90
 80096f4:	2108      	movs	r1, #8
 80096f6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2284      	movs	r2, #132	@ 0x84
 80096fc:	2100      	movs	r1, #0
 80096fe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	e02c      	b.n	800975e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	69da      	ldr	r2, [r3, #28]
 800970a:	2380      	movs	r3, #128	@ 0x80
 800970c:	011b      	lsls	r3, r3, #4
 800970e:	401a      	ands	r2, r3
 8009710:	2380      	movs	r3, #128	@ 0x80
 8009712:	011b      	lsls	r3, r3, #4
 8009714:	429a      	cmp	r2, r3
 8009716:	d112      	bne.n	800973e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	2280      	movs	r2, #128	@ 0x80
 800971e:	0112      	lsls	r2, r2, #4
 8009720:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	0018      	movs	r0, r3
 8009726:	f000 f81f 	bl	8009768 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2290      	movs	r2, #144	@ 0x90
 800972e:	2120      	movs	r1, #32
 8009730:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2284      	movs	r2, #132	@ 0x84
 8009736:	2100      	movs	r1, #0
 8009738:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800973a:	2303      	movs	r3, #3
 800973c:	e00f      	b.n	800975e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	69db      	ldr	r3, [r3, #28]
 8009744:	68ba      	ldr	r2, [r7, #8]
 8009746:	4013      	ands	r3, r2
 8009748:	68ba      	ldr	r2, [r7, #8]
 800974a:	1ad3      	subs	r3, r2, r3
 800974c:	425a      	negs	r2, r3
 800974e:	4153      	adcs	r3, r2
 8009750:	b2db      	uxtb	r3, r3
 8009752:	001a      	movs	r2, r3
 8009754:	1dfb      	adds	r3, r7, #7
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	429a      	cmp	r2, r3
 800975a:	d09e      	beq.n	800969a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800975c:	2300      	movs	r3, #0
}
 800975e:	0018      	movs	r0, r3
 8009760:	46bd      	mov	sp, r7
 8009762:	b004      	add	sp, #16
 8009764:	bd80      	pop	{r7, pc}
	...

08009768 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b08e      	sub	sp, #56	@ 0x38
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009770:	f3ef 8310 	mrs	r3, PRIMASK
 8009774:	617b      	str	r3, [r7, #20]
  return(result);
 8009776:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009778:	637b      	str	r3, [r7, #52]	@ 0x34
 800977a:	2301      	movs	r3, #1
 800977c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800977e:	69bb      	ldr	r3, [r7, #24]
 8009780:	f383 8810 	msr	PRIMASK, r3
}
 8009784:	46c0      	nop			@ (mov r8, r8)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4926      	ldr	r1, [pc, #152]	@ (800982c <UART_EndRxTransfer+0xc4>)
 8009792:	400a      	ands	r2, r1
 8009794:	601a      	str	r2, [r3, #0]
 8009796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009798:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800979a:	69fb      	ldr	r3, [r7, #28]
 800979c:	f383 8810 	msr	PRIMASK, r3
}
 80097a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80097a2:	f3ef 8310 	mrs	r3, PRIMASK
 80097a6:	623b      	str	r3, [r7, #32]
  return(result);
 80097a8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80097ac:	2301      	movs	r3, #1
 80097ae:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b2:	f383 8810 	msr	PRIMASK, r3
}
 80097b6:	46c0      	nop			@ (mov r8, r8)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	689a      	ldr	r2, [r3, #8]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	491b      	ldr	r1, [pc, #108]	@ (8009830 <UART_EndRxTransfer+0xc8>)
 80097c4:	400a      	ands	r2, r1
 80097c6:	609a      	str	r2, [r3, #8]
 80097c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ce:	f383 8810 	msr	PRIMASK, r3
}
 80097d2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d118      	bne.n	800980e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80097dc:	f3ef 8310 	mrs	r3, PRIMASK
 80097e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80097e2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80097e6:	2301      	movs	r3, #1
 80097e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f383 8810 	msr	PRIMASK, r3
}
 80097f0:	46c0      	nop			@ (mov r8, r8)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	681a      	ldr	r2, [r3, #0]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2110      	movs	r1, #16
 80097fe:	438a      	bics	r2, r1
 8009800:	601a      	str	r2, [r3, #0]
 8009802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009804:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	f383 8810 	msr	PRIMASK, r3
}
 800980c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	228c      	movs	r2, #140	@ 0x8c
 8009812:	2120      	movs	r1, #32
 8009814:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009822:	46c0      	nop			@ (mov r8, r8)
 8009824:	46bd      	mov	sp, r7
 8009826:	b00e      	add	sp, #56	@ 0x38
 8009828:	bd80      	pop	{r7, pc}
 800982a:	46c0      	nop			@ (mov r8, r8)
 800982c:	fffffedf 	.word	0xfffffedf
 8009830:	effffffe 	.word	0xeffffffe

08009834 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2284      	movs	r2, #132	@ 0x84
 8009840:	5c9b      	ldrb	r3, [r3, r2]
 8009842:	2b01      	cmp	r3, #1
 8009844:	d101      	bne.n	800984a <HAL_UARTEx_DisableFifoMode+0x16>
 8009846:	2302      	movs	r3, #2
 8009848:	e027      	b.n	800989a <HAL_UARTEx_DisableFifoMode+0x66>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2284      	movs	r2, #132	@ 0x84
 800984e:	2101      	movs	r1, #1
 8009850:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2288      	movs	r2, #136	@ 0x88
 8009856:	2124      	movs	r1, #36	@ 0x24
 8009858:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2101      	movs	r1, #1
 800986e:	438a      	bics	r2, r1
 8009870:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	4a0b      	ldr	r2, [pc, #44]	@ (80098a4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8009876:	4013      	ands	r3, r2
 8009878:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	68fa      	ldr	r2, [r7, #12]
 8009886:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2288      	movs	r2, #136	@ 0x88
 800988c:	2120      	movs	r1, #32
 800988e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2284      	movs	r2, #132	@ 0x84
 8009894:	2100      	movs	r1, #0
 8009896:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009898:	2300      	movs	r3, #0
}
 800989a:	0018      	movs	r0, r3
 800989c:	46bd      	mov	sp, r7
 800989e:	b004      	add	sp, #16
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	46c0      	nop			@ (mov r8, r8)
 80098a4:	dfffffff 	.word	0xdfffffff

080098a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2284      	movs	r2, #132	@ 0x84
 80098b6:	5c9b      	ldrb	r3, [r3, r2]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d101      	bne.n	80098c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80098bc:	2302      	movs	r3, #2
 80098be:	e02e      	b.n	800991e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2284      	movs	r2, #132	@ 0x84
 80098c4:	2101      	movs	r1, #1
 80098c6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2288      	movs	r2, #136	@ 0x88
 80098cc:	2124      	movs	r1, #36	@ 0x24
 80098ce:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2101      	movs	r1, #1
 80098e4:	438a      	bics	r2, r1
 80098e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	689b      	ldr	r3, [r3, #8]
 80098ee:	00db      	lsls	r3, r3, #3
 80098f0:	08d9      	lsrs	r1, r3, #3
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	683a      	ldr	r2, [r7, #0]
 80098f8:	430a      	orrs	r2, r1
 80098fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	0018      	movs	r0, r3
 8009900:	f000 f854 	bl	80099ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	68fa      	ldr	r2, [r7, #12]
 800990a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2288      	movs	r2, #136	@ 0x88
 8009910:	2120      	movs	r1, #32
 8009912:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2284      	movs	r2, #132	@ 0x84
 8009918:	2100      	movs	r1, #0
 800991a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800991c:	2300      	movs	r3, #0
}
 800991e:	0018      	movs	r0, r3
 8009920:	46bd      	mov	sp, r7
 8009922:	b004      	add	sp, #16
 8009924:	bd80      	pop	{r7, pc}
	...

08009928 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2284      	movs	r2, #132	@ 0x84
 8009936:	5c9b      	ldrb	r3, [r3, r2]
 8009938:	2b01      	cmp	r3, #1
 800993a:	d101      	bne.n	8009940 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800993c:	2302      	movs	r3, #2
 800993e:	e02f      	b.n	80099a0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2284      	movs	r2, #132	@ 0x84
 8009944:	2101      	movs	r1, #1
 8009946:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2288      	movs	r2, #136	@ 0x88
 800994c:	2124      	movs	r1, #36	@ 0x24
 800994e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	2101      	movs	r1, #1
 8009964:	438a      	bics	r2, r1
 8009966:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	4a0e      	ldr	r2, [pc, #56]	@ (80099a8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8009970:	4013      	ands	r3, r2
 8009972:	0019      	movs	r1, r3
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	683a      	ldr	r2, [r7, #0]
 800997a:	430a      	orrs	r2, r1
 800997c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	0018      	movs	r0, r3
 8009982:	f000 f813 	bl	80099ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	68fa      	ldr	r2, [r7, #12]
 800998c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2288      	movs	r2, #136	@ 0x88
 8009992:	2120      	movs	r1, #32
 8009994:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2284      	movs	r2, #132	@ 0x84
 800999a:	2100      	movs	r1, #0
 800999c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800999e:	2300      	movs	r3, #0
}
 80099a0:	0018      	movs	r0, r3
 80099a2:	46bd      	mov	sp, r7
 80099a4:	b004      	add	sp, #16
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	f1ffffff 	.word	0xf1ffffff

080099ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80099ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099ae:	b085      	sub	sp, #20
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d108      	bne.n	80099ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	226a      	movs	r2, #106	@ 0x6a
 80099c0:	2101      	movs	r1, #1
 80099c2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2268      	movs	r2, #104	@ 0x68
 80099c8:	2101      	movs	r1, #1
 80099ca:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80099cc:	e043      	b.n	8009a56 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80099ce:	260f      	movs	r6, #15
 80099d0:	19bb      	adds	r3, r7, r6
 80099d2:	2208      	movs	r2, #8
 80099d4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80099d6:	200e      	movs	r0, #14
 80099d8:	183b      	adds	r3, r7, r0
 80099da:	2208      	movs	r2, #8
 80099dc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	689b      	ldr	r3, [r3, #8]
 80099e4:	0e5b      	lsrs	r3, r3, #25
 80099e6:	b2da      	uxtb	r2, r3
 80099e8:	240d      	movs	r4, #13
 80099ea:	193b      	adds	r3, r7, r4
 80099ec:	2107      	movs	r1, #7
 80099ee:	400a      	ands	r2, r1
 80099f0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	0f5b      	lsrs	r3, r3, #29
 80099fa:	b2da      	uxtb	r2, r3
 80099fc:	250c      	movs	r5, #12
 80099fe:	197b      	adds	r3, r7, r5
 8009a00:	2107      	movs	r1, #7
 8009a02:	400a      	ands	r2, r1
 8009a04:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a06:	183b      	adds	r3, r7, r0
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	197a      	adds	r2, r7, r5
 8009a0c:	7812      	ldrb	r2, [r2, #0]
 8009a0e:	4914      	ldr	r1, [pc, #80]	@ (8009a60 <UARTEx_SetNbDataToProcess+0xb4>)
 8009a10:	5c8a      	ldrb	r2, [r1, r2]
 8009a12:	435a      	muls	r2, r3
 8009a14:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8009a16:	197b      	adds	r3, r7, r5
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	4a12      	ldr	r2, [pc, #72]	@ (8009a64 <UARTEx_SetNbDataToProcess+0xb8>)
 8009a1c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a1e:	0019      	movs	r1, r3
 8009a20:	f7f6 fc18 	bl	8000254 <__divsi3>
 8009a24:	0003      	movs	r3, r0
 8009a26:	b299      	uxth	r1, r3
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	226a      	movs	r2, #106	@ 0x6a
 8009a2c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a2e:	19bb      	adds	r3, r7, r6
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	193a      	adds	r2, r7, r4
 8009a34:	7812      	ldrb	r2, [r2, #0]
 8009a36:	490a      	ldr	r1, [pc, #40]	@ (8009a60 <UARTEx_SetNbDataToProcess+0xb4>)
 8009a38:	5c8a      	ldrb	r2, [r1, r2]
 8009a3a:	435a      	muls	r2, r3
 8009a3c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8009a3e:	193b      	adds	r3, r7, r4
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	4a08      	ldr	r2, [pc, #32]	@ (8009a64 <UARTEx_SetNbDataToProcess+0xb8>)
 8009a44:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a46:	0019      	movs	r1, r3
 8009a48:	f7f6 fc04 	bl	8000254 <__divsi3>
 8009a4c:	0003      	movs	r3, r0
 8009a4e:	b299      	uxth	r1, r3
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2268      	movs	r2, #104	@ 0x68
 8009a54:	5299      	strh	r1, [r3, r2]
}
 8009a56:	46c0      	nop			@ (mov r8, r8)
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	b005      	add	sp, #20
 8009a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a5e:	46c0      	nop			@ (mov r8, r8)
 8009a60:	0801010c 	.word	0x0801010c
 8009a64:	08010114 	.word	0x08010114

08009a68 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8009a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a6a:	b085      	sub	sp, #20
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* chip id read try count */
    uint8_t try_count = 5;
 8009a70:	230e      	movs	r3, #14
 8009a72:	18fb      	adds	r3, r7, r3
 8009a74:	2205      	movs	r2, #5
 8009a76:	701a      	strb	r2, [r3, #0]
    uint8_t chip_id = 0;
 8009a78:	230d      	movs	r3, #13
 8009a7a:	18fb      	adds	r3, r7, r3
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8009a80:	250f      	movs	r5, #15
 8009a82:	197c      	adds	r4, r7, r5
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	0018      	movs	r0, r3
 8009a88:	f001 fa2b 	bl	800aee2 <null_ptr_check>
 8009a8c:	0003      	movs	r3, r0
 8009a8e:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8009a90:	197b      	adds	r3, r7, r5
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	b25b      	sxtb	r3, r3
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d154      	bne.n	8009b44 <bme280_init+0xdc>
    {
        while (try_count)
 8009a9a:	e043      	b.n	8009b24 <bme280_init+0xbc>
        {
            /* Read the chip-id of bme280 sensor */
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev); // 0xD0
 8009a9c:	250f      	movs	r5, #15
 8009a9e:	197c      	adds	r4, r7, r5
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	260d      	movs	r6, #13
 8009aa4:	19b9      	adds	r1, r7, r6
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	20d0      	movs	r0, #208	@ 0xd0
 8009aaa:	f000 f855 	bl	8009b58 <bme280_get_regs>
 8009aae:	0003      	movs	r3, r0
 8009ab0:	7023      	strb	r3, [r4, #0]
            printf("bme280 chip_id = %x\n", chip_id);
 8009ab2:	0034      	movs	r4, r6
 8009ab4:	193b      	adds	r3, r7, r4
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	001a      	movs	r2, r3
 8009aba:	4b26      	ldr	r3, [pc, #152]	@ (8009b54 <bme280_init+0xec>)
 8009abc:	0011      	movs	r1, r2
 8009abe:	0018      	movs	r0, r3
 8009ac0:	f7fb fdd4 	bl	800566c <printf_>
            /* Check for chip id validity */
            if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID))
 8009ac4:	0029      	movs	r1, r5
 8009ac6:	187b      	adds	r3, r7, r1
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	b25b      	sxtb	r3, r3
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d11c      	bne.n	8009b0a <bme280_init+0xa2>
 8009ad0:	193b      	adds	r3, r7, r4
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	2b60      	cmp	r3, #96	@ 0x60
 8009ad6:	d118      	bne.n	8009b0a <bme280_init+0xa2>
            {
                dev->chip_id = chip_id;
 8009ad8:	193b      	adds	r3, r7, r4
 8009ada:	781a      	ldrb	r2, [r3, #0]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bme280_soft_reset(dev);
 8009ae0:	000d      	movs	r5, r1
 8009ae2:	187c      	adds	r4, r7, r1
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	0018      	movs	r0, r3
 8009ae8:	f000 fa05 	bl	8009ef6 <bme280_soft_reset>
 8009aec:	0003      	movs	r3, r0
 8009aee:	7023      	strb	r3, [r4, #0]

                if (rslt == BME280_OK)
 8009af0:	197b      	adds	r3, r7, r5
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	b25b      	sxtb	r3, r3
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d11a      	bne.n	8009b30 <bme280_init+0xc8>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8009afa:	197c      	adds	r4, r7, r5
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	0018      	movs	r0, r3
 8009b00:	f001 f840 	bl	800ab84 <get_calib_data>
 8009b04:	0003      	movs	r3, r0
 8009b06:	7023      	strb	r3, [r4, #0]
                }

                break;
 8009b08:	e012      	b.n	8009b30 <bme280_init+0xc8>
            }

            /* Wait for 1 ms */
            dev->delay_us(1, dev->intf_ptr);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	695a      	ldr	r2, [r3, #20]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	0019      	movs	r1, r3
 8009b14:	2001      	movs	r0, #1
 8009b16:	4790      	blx	r2
            --try_count;
 8009b18:	220e      	movs	r2, #14
 8009b1a:	18bb      	adds	r3, r7, r2
 8009b1c:	18ba      	adds	r2, r7, r2
 8009b1e:	7812      	ldrb	r2, [r2, #0]
 8009b20:	3a01      	subs	r2, #1
 8009b22:	701a      	strb	r2, [r3, #0]
        while (try_count)
 8009b24:	230e      	movs	r3, #14
 8009b26:	18fb      	adds	r3, r7, r3
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d1b6      	bne.n	8009a9c <bme280_init+0x34>
 8009b2e:	e000      	b.n	8009b32 <bme280_init+0xca>
                break;
 8009b30:	46c0      	nop			@ (mov r8, r8)
        }

        /* Chip id check failed */
        if (!try_count)
 8009b32:	230e      	movs	r3, #14
 8009b34:	18fb      	adds	r3, r7, r3
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d103      	bne.n	8009b44 <bme280_init+0xdc>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 8009b3c:	230f      	movs	r3, #15
 8009b3e:	18fb      	adds	r3, r7, r3
 8009b40:	22fe      	movs	r2, #254	@ 0xfe
 8009b42:	701a      	strb	r2, [r3, #0]
        }
    }

    return rslt;
 8009b44:	230f      	movs	r3, #15
 8009b46:	18fb      	adds	r3, r7, r3
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	b25b      	sxtb	r3, r3
}
 8009b4c:	0018      	movs	r0, r3
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	b005      	add	sp, #20
 8009b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b54:	0800fca8 	.word	0x0800fca8

08009b58 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme280_dev *dev)
{
 8009b58:	b5b0      	push	{r4, r5, r7, lr}
 8009b5a:	b086      	sub	sp, #24
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	60b9      	str	r1, [r7, #8]
 8009b60:	0011      	movs	r1, r2
 8009b62:	607b      	str	r3, [r7, #4]
 8009b64:	240f      	movs	r4, #15
 8009b66:	193b      	adds	r3, r7, r4
 8009b68:	1c02      	adds	r2, r0, #0
 8009b6a:	701a      	strb	r2, [r3, #0]
 8009b6c:	230c      	movs	r3, #12
 8009b6e:	18fb      	adds	r3, r7, r3
 8009b70:	1c0a      	adds	r2, r1, #0
 8009b72:	801a      	strh	r2, [r3, #0]
    volatile int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	0018      	movs	r0, r3
 8009b78:	f001 f9b3 	bl	800aee2 <null_ptr_check>
 8009b7c:	0003      	movs	r3, r0
 8009b7e:	001a      	movs	r2, r3
 8009b80:	2117      	movs	r1, #23
 8009b82:	187b      	adds	r3, r7, r1
 8009b84:	701a      	strb	r2, [r3, #0]

    /* Proceed if null check is fine */
    if ((rslt == BME280_OK) && (reg_data != NULL))
 8009b86:	187b      	adds	r3, r7, r1
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	b25b      	sxtb	r3, r3
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d129      	bne.n	8009be4 <bme280_get_regs+0x8c>
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d026      	beq.n	8009be4 <bme280_get_regs+0x8c>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	7a1b      	ldrb	r3, [r3, #8]
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d006      	beq.n	8009bac <bme280_get_regs+0x54>
        {
            reg_addr = reg_addr | 0x80;
 8009b9e:	193b      	adds	r3, r7, r4
 8009ba0:	193a      	adds	r2, r7, r4
 8009ba2:	7812      	ldrb	r2, [r2, #0]
 8009ba4:	2180      	movs	r1, #128	@ 0x80
 8009ba6:	4249      	negs	r1, r1
 8009ba8:	430a      	orrs	r2, r1
 8009baa:	701a      	strb	r2, [r3, #0]

        /* Read the data  */
        /*  void *intf_ptr;Interface function pointer used to enable the device address for I2C
                            and chip selection for SPI */

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	68dc      	ldr	r4, [r3, #12]
 8009bb0:	230c      	movs	r3, #12
 8009bb2:	18fb      	adds	r3, r7, r3
 8009bb4:	881a      	ldrh	r2, [r3, #0]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	685d      	ldr	r5, [r3, #4]
 8009bba:	68b9      	ldr	r1, [r7, #8]
 8009bbc:	230f      	movs	r3, #15
 8009bbe:	18fb      	adds	r3, r7, r3
 8009bc0:	7818      	ldrb	r0, [r3, #0]
 8009bc2:	002b      	movs	r3, r5
 8009bc4:	47a0      	blx	r4
 8009bc6:	0003      	movs	r3, r0
 8009bc8:	0019      	movs	r1, r3
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2245      	movs	r2, #69	@ 0x45
 8009bce:	5499      	strb	r1, [r3, r2]

        /* Check for communication error */
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS) // BME280_INTF_RET_SUCCESS = INT8_C(0)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2245      	movs	r2, #69	@ 0x45
 8009bd4:	569b      	ldrsb	r3, [r3, r2]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d008      	beq.n	8009bec <bme280_get_regs+0x94>
        {
            rslt = BME280_E_COMM_FAIL; // BME280_E_COMM_FAIL = INT8_C(-4)
 8009bda:	2317      	movs	r3, #23
 8009bdc:	18fb      	adds	r3, r7, r3
 8009bde:	22fc      	movs	r2, #252	@ 0xfc
 8009be0:	701a      	strb	r2, [r3, #0]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS) // BME280_INTF_RET_SUCCESS = INT8_C(0)
 8009be2:	e003      	b.n	8009bec <bme280_get_regs+0x94>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR; // BME280_E_NULL_PTR = INT8_C(-1)
 8009be4:	2317      	movs	r3, #23
 8009be6:	18fb      	adds	r3, r7, r3
 8009be8:	22ff      	movs	r2, #255	@ 0xff
 8009bea:	701a      	strb	r2, [r3, #0]
    }
    //	printf("result => %d\n", rslt);
    return rslt;
 8009bec:	2317      	movs	r3, #23
 8009bee:	18fb      	adds	r3, r7, r3
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	b25b      	sxtb	r3, r3
}
 8009bf4:	0018      	movs	r0, r3
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	b006      	add	sp, #24
 8009bfa:	bdb0      	pop	{r4, r5, r7, pc}

08009bfc <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme280_dev *dev)
{
 8009bfc:	b5b0      	push	{r4, r5, r7, lr}
 8009bfe:	b08c      	sub	sp, #48	@ 0x30
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	60f8      	str	r0, [r7, #12]
 8009c04:	60b9      	str	r1, [r7, #8]
 8009c06:	603b      	str	r3, [r7, #0]
 8009c08:	1dfb      	adds	r3, r7, #7
 8009c0a:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 8009c0c:	1dfb      	adds	r3, r7, #7
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	2b0a      	cmp	r3, #10
 8009c12:	d902      	bls.n	8009c1a <bme280_set_regs+0x1e>
    {
        len = 10;
 8009c14:	1dfb      	adds	r3, r7, #7
 8009c16:	220a      	movs	r2, #10
 8009c18:	701a      	strb	r2, [r3, #0]

    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8009c1a:	252f      	movs	r5, #47	@ 0x2f
 8009c1c:	197c      	adds	r4, r7, r5
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	0018      	movs	r0, r3
 8009c22:	f001 f95e 	bl	800aee2 <null_ptr_check>
 8009c26:	0003      	movs	r3, r0
 8009c28:	7023      	strb	r3, [r4, #0]

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8009c2a:	197b      	adds	r3, r7, r5
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	b25b      	sxtb	r3, r3
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d000      	beq.n	8009c36 <bme280_set_regs+0x3a>
 8009c34:	e06c      	b.n	8009d10 <bme280_set_regs+0x114>
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d069      	beq.n	8009d10 <bme280_set_regs+0x114>
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d066      	beq.n	8009d10 <bme280_set_regs+0x114>
    {
        if (len != 0)
 8009c42:	1dfb      	adds	r3, r7, #7
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d05d      	beq.n	8009d06 <bme280_set_regs+0x10a>
        {
            temp_buff[0] = reg_data[0];
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	781a      	ldrb	r2, [r3, #0]
 8009c4e:	2314      	movs	r3, #20
 8009c50:	18fb      	adds	r3, r7, r3
 8009c52:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	7a1b      	ldrb	r3, [r3, #8]
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d01e      	beq.n	8009c9a <bme280_set_regs+0x9e>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8009c5c:	232b      	movs	r3, #43	@ 0x2b
 8009c5e:	18fb      	adds	r3, r7, r3
 8009c60:	2200      	movs	r2, #0
 8009c62:	701a      	strb	r2, [r3, #0]
 8009c64:	e012      	b.n	8009c8c <bme280_set_regs+0x90>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8009c66:	202b      	movs	r0, #43	@ 0x2b
 8009c68:	183b      	adds	r3, r7, r0
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	18d3      	adds	r3, r2, r3
 8009c70:	781a      	ldrb	r2, [r3, #0]
 8009c72:	183b      	adds	r3, r7, r0
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	68f9      	ldr	r1, [r7, #12]
 8009c78:	18cb      	adds	r3, r1, r3
 8009c7a:	217f      	movs	r1, #127	@ 0x7f
 8009c7c:	400a      	ands	r2, r1
 8009c7e:	b2d2      	uxtb	r2, r2
 8009c80:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8009c82:	183b      	adds	r3, r7, r0
 8009c84:	781a      	ldrb	r2, [r3, #0]
 8009c86:	183b      	adds	r3, r7, r0
 8009c88:	3201      	adds	r2, #1
 8009c8a:	701a      	strb	r2, [r3, #0]
 8009c8c:	232b      	movs	r3, #43	@ 0x2b
 8009c8e:	18fa      	adds	r2, r7, r3
 8009c90:	1dfb      	adds	r3, r7, #7
 8009c92:	7812      	ldrb	r2, [r2, #0]
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d3e5      	bcc.n	8009c66 <bme280_set_regs+0x6a>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8009c9a:	1dfb      	adds	r3, r7, #7
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d911      	bls.n	8009cc6 <bme280_set_regs+0xca>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8009ca2:	1dfb      	adds	r3, r7, #7
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	68ba      	ldr	r2, [r7, #8]
 8009ca8:	2114      	movs	r1, #20
 8009caa:	1879      	adds	r1, r7, r1
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f000 ffb5 	bl	800ac1c <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 8009cb2:	1dfb      	adds	r3, r7, #7
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	18db      	adds	r3, r3, r3
 8009cba:	b29a      	uxth	r2, r3
 8009cbc:	232c      	movs	r3, #44	@ 0x2c
 8009cbe:	18fb      	adds	r3, r7, r3
 8009cc0:	3a01      	subs	r2, #1
 8009cc2:	801a      	strh	r2, [r3, #0]
 8009cc4:	e004      	b.n	8009cd0 <bme280_set_regs+0xd4>
            }
            else
            {
                temp_len = len;
 8009cc6:	232c      	movs	r3, #44	@ 0x2c
 8009cc8:	18fb      	adds	r3, r7, r3
 8009cca:	1dfa      	adds	r2, r7, #7
 8009ccc:	7812      	ldrb	r2, [r2, #0]
 8009cce:	801a      	strh	r2, [r3, #0]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	691c      	ldr	r4, [r3, #16]
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	7818      	ldrb	r0, [r3, #0]
 8009cd8:	232c      	movs	r3, #44	@ 0x2c
 8009cda:	18fb      	adds	r3, r7, r3
 8009cdc:	881a      	ldrh	r2, [r3, #0]
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	2114      	movs	r1, #20
 8009ce4:	1879      	adds	r1, r7, r1
 8009ce6:	47a0      	blx	r4
 8009ce8:	0003      	movs	r3, r0
 8009cea:	0019      	movs	r1, r3
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	2245      	movs	r2, #69	@ 0x45
 8009cf0:	5499      	strb	r1, [r3, r2]

            /* Check for communication error */
            if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	2245      	movs	r2, #69	@ 0x45
 8009cf6:	569b      	ldrsb	r3, [r3, r2]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d00e      	beq.n	8009d1a <bme280_set_regs+0x11e>
            {
                rslt = BME280_E_COMM_FAIL;
 8009cfc:	232f      	movs	r3, #47	@ 0x2f
 8009cfe:	18fb      	adds	r3, r7, r3
 8009d00:	22fc      	movs	r2, #252	@ 0xfc
 8009d02:	701a      	strb	r2, [r3, #0]
        if (len != 0)
 8009d04:	e009      	b.n	8009d1a <bme280_set_regs+0x11e>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 8009d06:	232f      	movs	r3, #47	@ 0x2f
 8009d08:	18fb      	adds	r3, r7, r3
 8009d0a:	22fd      	movs	r2, #253	@ 0xfd
 8009d0c:	701a      	strb	r2, [r3, #0]
        if (len != 0)
 8009d0e:	e004      	b.n	8009d1a <bme280_set_regs+0x11e>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8009d10:	232f      	movs	r3, #47	@ 0x2f
 8009d12:	18fb      	adds	r3, r7, r3
 8009d14:	22ff      	movs	r2, #255	@ 0xff
 8009d16:	701a      	strb	r2, [r3, #0]
 8009d18:	e000      	b.n	8009d1c <bme280_set_regs+0x120>
        if (len != 0)
 8009d1a:	46c0      	nop			@ (mov r8, r8)
    }

    return rslt;
 8009d1c:	232f      	movs	r3, #47	@ 0x2f
 8009d1e:	18fb      	adds	r3, r7, r3
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	b25b      	sxtb	r3, r3
}
 8009d24:	0018      	movs	r0, r3
 8009d26:	46bd      	mov	sp, r7
 8009d28:	b00c      	add	sp, #48	@ 0x30
 8009d2a:	bdb0      	pop	{r4, r5, r7, pc}

08009d2c <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, struct bme280_dev *dev)
{
 8009d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d2e:	b085      	sub	sp, #20
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	0002      	movs	r2, r0
 8009d34:	6039      	str	r1, [r7, #0]
 8009d36:	1dfb      	adds	r3, r7, #7
 8009d38:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t sensor_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8009d3a:	250f      	movs	r5, #15
 8009d3c:	197c      	adds	r4, r7, r5
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	0018      	movs	r0, r3
 8009d42:	f001 f8ce 	bl	800aee2 <null_ptr_check>
 8009d46:	0003      	movs	r3, r0
 8009d48:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8009d4a:	197b      	adds	r3, r7, r5
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	b25b      	sxtb	r3, r3
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d14e      	bne.n	8009df2 <bme280_set_sensor_settings+0xc6>
    {
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8009d54:	197c      	adds	r4, r7, r5
 8009d56:	683a      	ldr	r2, [r7, #0]
 8009d58:	260e      	movs	r6, #14
 8009d5a:	19bb      	adds	r3, r7, r6
 8009d5c:	0011      	movs	r1, r2
 8009d5e:	0018      	movs	r0, r3
 8009d60:	f000 f896 	bl	8009e90 <bme280_get_sensor_mode>
 8009d64:	0003      	movs	r3, r0
 8009d66:	7023      	strb	r3, [r4, #0]

        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8009d68:	002a      	movs	r2, r5
 8009d6a:	18bb      	adds	r3, r7, r2
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	b25b      	sxtb	r3, r3
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d10a      	bne.n	8009d8a <bme280_set_sensor_settings+0x5e>
 8009d74:	19bb      	adds	r3, r7, r6
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d006      	beq.n	8009d8a <bme280_set_sensor_settings+0x5e>
        {
            rslt = put_device_to_sleep(dev);
 8009d7c:	18bc      	adds	r4, r7, r2
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	0018      	movs	r0, r3
 8009d82:	f000 fc78 	bl	800a676 <put_device_to_sleep>
 8009d86:	0003      	movs	r3, r0
 8009d88:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME280_OK)
 8009d8a:	240f      	movs	r4, #15
 8009d8c:	193b      	adds	r3, r7, r4
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	b25b      	sxtb	r3, r3
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d12d      	bne.n	8009df2 <bme280_set_sensor_settings+0xc6>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8009d96:	1dfb      	adds	r3, r7, #7
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	0019      	movs	r1, r3
 8009d9c:	2007      	movs	r0, #7
 8009d9e:	f001 f87c 	bl	800ae9a <are_settings_changed>
 8009da2:	1e03      	subs	r3, r0, #0
 8009da4:	d00b      	beq.n	8009dbe <bme280_set_sensor_settings+0x92>
            {
                rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	3340      	adds	r3, #64	@ 0x40
 8009daa:	0019      	movs	r1, r3
 8009dac:	193c      	adds	r4, r7, r4
 8009dae:	683a      	ldr	r2, [r7, #0]
 8009db0:	1dfb      	adds	r3, r7, #7
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	0018      	movs	r0, r3
 8009db6:	f000 fa75 	bl	800a2a4 <set_osr_settings>
 8009dba:	0003      	movs	r3, r0
 8009dbc:	7023      	strb	r3, [r4, #0]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8009dbe:	240f      	movs	r4, #15
 8009dc0:	193b      	adds	r3, r7, r4
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	b25b      	sxtb	r3, r3
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d113      	bne.n	8009df2 <bme280_set_sensor_settings+0xc6>
 8009dca:	1dfb      	adds	r3, r7, #7
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	0019      	movs	r1, r3
 8009dd0:	2018      	movs	r0, #24
 8009dd2:	f001 f862 	bl	800ae9a <are_settings_changed>
 8009dd6:	1e03      	subs	r3, r0, #0
 8009dd8:	d00b      	beq.n	8009df2 <bme280_set_sensor_settings+0xc6>
            {
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	3340      	adds	r3, #64	@ 0x40
 8009dde:	0019      	movs	r1, r3
 8009de0:	193c      	adds	r4, r7, r4
 8009de2:	683a      	ldr	r2, [r7, #0]
 8009de4:	1dfb      	adds	r3, r7, #7
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	0018      	movs	r0, r3
 8009dea:	f000 fb21 	bl	800a430 <set_filter_standby_settings>
 8009dee:	0003      	movs	r3, r0
 8009df0:	7023      	strb	r3, [r4, #0]
            }
        }
    }

    return rslt;
 8009df2:	230f      	movs	r3, #15
 8009df4:	18fb      	adds	r3, r7, r3
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	b25b      	sxtb	r3, r3
}
 8009dfa:	0018      	movs	r0, r3
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	b005      	add	sp, #20
 8009e00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009e02 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 8009e02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e04:	b085      	sub	sp, #20
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	0002      	movs	r2, r0
 8009e0a:	6039      	str	r1, [r7, #0]
 8009e0c:	1dfb      	adds	r3, r7, #7
 8009e0e:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8009e10:	250f      	movs	r5, #15
 8009e12:	197c      	adds	r4, r7, r5
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	0018      	movs	r0, r3
 8009e18:	f001 f863 	bl	800aee2 <null_ptr_check>
 8009e1c:	0003      	movs	r3, r0
 8009e1e:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 8009e20:	197b      	adds	r3, r7, r5
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	b25b      	sxtb	r3, r3
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d12a      	bne.n	8009e80 <bme280_set_sensor_mode+0x7e>
    {
        rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8009e2a:	197c      	adds	r4, r7, r5
 8009e2c:	683a      	ldr	r2, [r7, #0]
 8009e2e:	260e      	movs	r6, #14
 8009e30:	19bb      	adds	r3, r7, r6
 8009e32:	0011      	movs	r1, r2
 8009e34:	0018      	movs	r0, r3
 8009e36:	f000 f82b 	bl	8009e90 <bme280_get_sensor_mode>
 8009e3a:	0003      	movs	r3, r0
 8009e3c:	7023      	strb	r3, [r4, #0]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode
         */
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8009e3e:	002a      	movs	r2, r5
 8009e40:	18bb      	adds	r3, r7, r2
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	b25b      	sxtb	r3, r3
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d10a      	bne.n	8009e60 <bme280_set_sensor_mode+0x5e>
 8009e4a:	19bb      	adds	r3, r7, r6
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d006      	beq.n	8009e60 <bme280_set_sensor_mode+0x5e>
        {
            rslt = put_device_to_sleep(dev);
 8009e52:	18bc      	adds	r4, r7, r2
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	0018      	movs	r0, r3
 8009e58:	f000 fc0d 	bl	800a676 <put_device_to_sleep>
 8009e5c:	0003      	movs	r3, r0
 8009e5e:	7023      	strb	r3, [r4, #0]
        }

        /* Set the power mode */
        if (rslt == BME280_OK)
 8009e60:	220f      	movs	r2, #15
 8009e62:	18bb      	adds	r3, r7, r2
 8009e64:	781b      	ldrb	r3, [r3, #0]
 8009e66:	b25b      	sxtb	r3, r3
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d109      	bne.n	8009e80 <bme280_set_sensor_mode+0x7e>
        {
            rslt = write_power_mode(sensor_mode, dev);
 8009e6c:	18bc      	adds	r4, r7, r2
 8009e6e:	683a      	ldr	r2, [r7, #0]
 8009e70:	1dfb      	adds	r3, r7, #7
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	0011      	movs	r1, r2
 8009e76:	0018      	movs	r0, r3
 8009e78:	f000 fbbd 	bl	800a5f6 <write_power_mode>
 8009e7c:	0003      	movs	r3, r0
 8009e7e:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 8009e80:	230f      	movs	r3, #15
 8009e82:	18fb      	adds	r3, r7, r3
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	b25b      	sxtb	r3, r3
}
 8009e88:	0018      	movs	r0, r3
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	b005      	add	sp, #20
 8009e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009e90 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, struct bme280_dev *dev)
{
 8009e90:	b5b0      	push	{r4, r5, r7, lr}
 8009e92:	b084      	sub	sp, #16
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8009e9a:	250f      	movs	r5, #15
 8009e9c:	197c      	adds	r4, r7, r5
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	0018      	movs	r0, r3
 8009ea2:	f001 f81e 	bl	800aee2 <null_ptr_check>
 8009ea6:	0003      	movs	r3, r0
 8009ea8:	7023      	strb	r3, [r4, #0]

    if ((rslt == BME280_OK) && (sensor_mode != NULL))
 8009eaa:	002a      	movs	r2, r5
 8009eac:	18bb      	adds	r3, r7, r2
 8009eae:	781b      	ldrb	r3, [r3, #0]
 8009eb0:	b25b      	sxtb	r3, r3
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d113      	bne.n	8009ede <bme280_get_sensor_mode+0x4e>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d010      	beq.n	8009ede <bme280_get_sensor_mode+0x4e>
    {
        /* Read the power mode register */
        rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8009ebc:	18bc      	adds	r4, r7, r2
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	6879      	ldr	r1, [r7, #4]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	20f4      	movs	r0, #244	@ 0xf4
 8009ec6:	f7ff fe47 	bl	8009b58 <bme280_get_regs>
 8009eca:	0003      	movs	r3, r0
 8009ecc:	7023      	strb	r3, [r4, #0]

        /* Assign the power mode in the device structure */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	2203      	movs	r2, #3
 8009ed4:	4013      	ands	r3, r2
 8009ed6:	b2da      	uxtb	r2, r3
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	701a      	strb	r2, [r3, #0]
 8009edc:	e003      	b.n	8009ee6 <bme280_get_sensor_mode+0x56>
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8009ede:	230f      	movs	r3, #15
 8009ee0:	18fb      	adds	r3, r7, r3
 8009ee2:	22ff      	movs	r2, #255	@ 0xff
 8009ee4:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8009ee6:	230f      	movs	r3, #15
 8009ee8:	18fb      	adds	r3, r7, r3
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	b25b      	sxtb	r3, r3
}
 8009eee:	0018      	movs	r0, r3
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	b004      	add	sp, #16
 8009ef4:	bdb0      	pop	{r4, r5, r7, pc}

08009ef6 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(struct bme280_dev *dev)
{
 8009ef6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ef8:	b085      	sub	sp, #20
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_RESET_ADDR; // UINT8_C(0xE0)
 8009efe:	260d      	movs	r6, #13
 8009f00:	19bb      	adds	r3, r7, r6
 8009f02:	22e0      	movs	r2, #224	@ 0xe0
 8009f04:	701a      	strb	r2, [r3, #0]
    uint8_t status_reg = 0;
 8009f06:	230c      	movs	r3, #12
 8009f08:	18fb      	adds	r3, r7, r3
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	701a      	strb	r2, [r3, #0]
    uint8_t try_run = 5;
 8009f0e:	230e      	movs	r3, #14
 8009f10:	18fb      	adds	r3, r7, r3
 8009f12:	2205      	movs	r2, #5
 8009f14:	701a      	strb	r2, [r3, #0]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 8009f16:	230b      	movs	r3, #11
 8009f18:	18fb      	adds	r3, r7, r3
 8009f1a:	22b6      	movs	r2, #182	@ 0xb6
 8009f1c:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8009f1e:	250f      	movs	r5, #15
 8009f20:	197c      	adds	r4, r7, r5
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	0018      	movs	r0, r3
 8009f26:	f000 ffdc 	bl	800aee2 <null_ptr_check>
 8009f2a:	0003      	movs	r3, r0
 8009f2c:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8009f2e:	197b      	adds	r3, r7, r5
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	b25b      	sxtb	r3, r3
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d13e      	bne.n	8009fb6 <bme280_soft_reset+0xc0>
    {
        /* Write the soft reset command in the sensor */
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8009f38:	197c      	adds	r4, r7, r5
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	220b      	movs	r2, #11
 8009f3e:	18b9      	adds	r1, r7, r2
 8009f40:	19b8      	adds	r0, r7, r6
 8009f42:	2201      	movs	r2, #1
 8009f44:	f7ff fe5a 	bl	8009bfc <bme280_set_regs>
 8009f48:	0003      	movs	r3, r0
 8009f4a:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 8009f4c:	197b      	adds	r3, r7, r5
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	b25b      	sxtb	r3, r3
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d12f      	bne.n	8009fb6 <bme280_soft_reset+0xc0>
        {
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                dev->delay_us(2, dev->intf_ptr);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	695a      	ldr	r2, [r3, #20]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	0019      	movs	r1, r3
 8009f60:	2002      	movs	r0, #2
 8009f62:	4790      	blx	r2
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 8009f64:	250f      	movs	r5, #15
 8009f66:	197c      	adds	r4, r7, r5
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	260c      	movs	r6, #12
 8009f6c:	19b9      	adds	r1, r7, r6
 8009f6e:	2201      	movs	r2, #1
 8009f70:	20f3      	movs	r0, #243	@ 0xf3
 8009f72:	f7ff fdf1 	bl	8009b58 <bme280_get_regs>
 8009f76:	0003      	movs	r3, r0
 8009f78:	7023      	strb	r3, [r4, #0]

            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 8009f7a:	197b      	adds	r3, r7, r5
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	b25b      	sxtb	r3, r3
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d10d      	bne.n	8009fa0 <bme280_soft_reset+0xaa>
 8009f84:	220e      	movs	r2, #14
 8009f86:	18bb      	adds	r3, r7, r2
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	18ba      	adds	r2, r7, r2
 8009f8c:	1e59      	subs	r1, r3, #1
 8009f8e:	7011      	strb	r1, [r2, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d005      	beq.n	8009fa0 <bme280_soft_reset+0xaa>
 8009f94:	19bb      	adds	r3, r7, r6
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	001a      	movs	r2, r3
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	4013      	ands	r3, r2
 8009f9e:	d1da      	bne.n	8009f56 <bme280_soft_reset+0x60>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 8009fa0:	230c      	movs	r3, #12
 8009fa2:	18fb      	adds	r3, r7, r3
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	001a      	movs	r2, r3
 8009fa8:	2301      	movs	r3, #1
 8009faa:	4013      	ands	r3, r2
 8009fac:	d003      	beq.n	8009fb6 <bme280_soft_reset+0xc0>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 8009fae:	230f      	movs	r3, #15
 8009fb0:	18fb      	adds	r3, r7, r3
 8009fb2:	22fa      	movs	r2, #250	@ 0xfa
 8009fb4:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    return rslt;
 8009fb6:	230f      	movs	r3, #15
 8009fb8:	18fb      	adds	r3, r7, r3
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	b25b      	sxtb	r3, r3
}
 8009fbe:	0018      	movs	r0, r3
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	b005      	add	sp, #20
 8009fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009fc6 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user../ struct bme280_data
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 8009fc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fc8:	b08b      	sub	sp, #44	@ 0x2c
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	607a      	str	r2, [r7, #4]
 8009fd0:	230f      	movs	r3, #15
 8009fd2:	18fb      	adds	r3, r7, r3
 8009fd4:	1c02      	adds	r2, r0, #0
 8009fd6:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 8009fd8:	261c      	movs	r6, #28
 8009fda:	19bb      	adds	r3, r7, r6
 8009fdc:	2200      	movs	r2, #0
 8009fde:	601a      	str	r2, [r3, #0]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	605a      	str	r2, [r3, #4]
    struct bme280_uncomp_data uncomp_data = {0};
 8009fe4:	2310      	movs	r3, #16
 8009fe6:	18fb      	adds	r3, r7, r3
 8009fe8:	0018      	movs	r0, r3
 8009fea:	230c      	movs	r3, #12
 8009fec:	001a      	movs	r2, r3
 8009fee:	2100      	movs	r1, #0
 8009ff0:	f003 fd96 	bl	800db20 <memset>

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8009ff4:	2527      	movs	r5, #39	@ 0x27
 8009ff6:	197c      	adds	r4, r7, r5
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	0018      	movs	r0, r3
 8009ffc:	f000 ff71 	bl	800aee2 <null_ptr_check>
 800a000:	0003      	movs	r3, r0
 800a002:	7023      	strb	r3, [r4, #0]

    if ((rslt == BME280_OK) && (comp_data != NULL))
 800a004:	197b      	adds	r3, r7, r5
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	b25b      	sxtb	r3, r3
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d128      	bne.n	800a060 <bme280_get_sensor_data+0x9a>
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d025      	beq.n	800a060 <bme280_get_sensor_data+0x9a>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 800a014:	197c      	adds	r4, r7, r5
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	19b9      	adds	r1, r7, r6
 800a01a:	2208      	movs	r2, #8
 800a01c:	20f7      	movs	r0, #247	@ 0xf7
 800a01e:	f7ff fd9b 	bl	8009b58 <bme280_get_regs>
 800a022:	0003      	movs	r3, r0
 800a024:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 800a026:	002c      	movs	r4, r5
 800a028:	193b      	adds	r3, r7, r4
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	b25b      	sxtb	r3, r3
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d11a      	bne.n	800a068 <bme280_get_sensor_data+0xa2>
        {
            /* Parse the read data from the sensor */
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 800a032:	2310      	movs	r3, #16
 800a034:	18fa      	adds	r2, r7, r3
 800a036:	19bb      	adds	r3, r7, r6
 800a038:	0011      	movs	r1, r2
 800a03a:	0018      	movs	r0, r3
 800a03c:	f000 f81c 	bl	800a078 <bme280_parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	001d      	movs	r5, r3
 800a044:	3518      	adds	r5, #24
 800a046:	193c      	adds	r4, r7, r4
 800a048:	68ba      	ldr	r2, [r7, #8]
 800a04a:	2310      	movs	r3, #16
 800a04c:	18f9      	adds	r1, r7, r3
 800a04e:	230f      	movs	r3, #15
 800a050:	18fb      	adds	r3, r7, r3
 800a052:	7818      	ldrb	r0, [r3, #0]
 800a054:	002b      	movs	r3, r5
 800a056:	f000 f853 	bl	800a100 <bme280_compensate_data>
 800a05a:	0003      	movs	r3, r0
 800a05c:	7023      	strb	r3, [r4, #0]
        if (rslt == BME280_OK)
 800a05e:	e003      	b.n	800a068 <bme280_get_sensor_data+0xa2>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800a060:	2327      	movs	r3, #39	@ 0x27
 800a062:	18fb      	adds	r3, r7, r3
 800a064:	22ff      	movs	r2, #255	@ 0xff
 800a066:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800a068:	2327      	movs	r3, #39	@ 0x27
 800a06a:	18fb      	adds	r3, r7, r3
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	b25b      	sxtb	r3, r3
}
 800a070:	0018      	movs	r0, r3
 800a072:	46bd      	mov	sp, r7
 800a074:	b00b      	add	sp, #44	@ 0x2c
 800a076:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a078 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b086      	sub	sp, #24
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	031b      	lsls	r3, r3, #12
 800a088:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	3301      	adds	r3, #1
 800a08e:	781b      	ldrb	r3, [r3, #0]
 800a090:	011b      	lsls	r3, r3, #4
 800a092:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	3302      	adds	r3, #2
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	091b      	lsrs	r3, r3, #4
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 800a0a0:	697a      	ldr	r2, [r7, #20]
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	431a      	orrs	r2, r3
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	431a      	orrs	r2, r3
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << 12;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	3303      	adds	r3, #3
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	031b      	lsls	r3, r3, #12
 800a0b6:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 4;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	3304      	adds	r3, #4
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	011b      	lsls	r3, r3, #4
 800a0c0:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	3305      	adds	r3, #5
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	091b      	lsrs	r3, r3, #4
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 800a0ce:	697a      	ldr	r2, [r7, #20]
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	431a      	orrs	r2, r3
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	431a      	orrs	r2, r3
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for humidity data */
    data_msb = (uint32_t)reg_data[6] << 8;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	3306      	adds	r3, #6
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	021b      	lsls	r3, r3, #8
 800a0e4:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[7];
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	3307      	adds	r3, #7
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	613b      	str	r3, [r7, #16]
    uncomp_data->humidity = data_msb | data_lsb;
 800a0ee:	697a      	ldr	r2, [r7, #20]
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	431a      	orrs	r2, r3
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	609a      	str	r2, [r3, #8]
}
 800a0f8:	46c0      	nop			@ (mov r8, r8)
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	b006      	add	sp, #24
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b086      	sub	sp, #24
 800a104:	af00      	add	r7, sp, #0
 800a106:	60b9      	str	r1, [r7, #8]
 800a108:	607a      	str	r2, [r7, #4]
 800a10a:	603b      	str	r3, [r7, #0]
 800a10c:	210f      	movs	r1, #15
 800a10e:	187b      	adds	r3, r7, r1
 800a110:	1c02      	adds	r2, r0, #0
 800a112:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME280_OK;
 800a114:	2317      	movs	r3, #23
 800a116:	18fb      	adds	r3, r7, r3
 800a118:	2200      	movs	r2, #0
 800a11a:	701a      	strb	r2, [r3, #0]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d03b      	beq.n	800a19a <bme280_compensate_data+0x9a>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d038      	beq.n	800a19a <bme280_compensate_data+0x9a>
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d035      	beq.n	800a19a <bme280_compensate_data+0x9a>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	605a      	str	r2, [r3, #4]
        comp_data->pressure = 0;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	601a      	str	r2, [r3, #0]
        comp_data->humidity = 0;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2200      	movs	r2, #0
 800a13e:	609a      	str	r2, [r3, #8]

        /* If pressure or temperature component is selected */
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 800a140:	187b      	adds	r3, r7, r1
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	2207      	movs	r2, #7
 800a146:	4013      	ands	r3, r2
 800a148:	d008      	beq.n	800a15c <bme280_compensate_data+0x5c>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 800a14a:	683a      	ldr	r2, [r7, #0]
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	0011      	movs	r1, r2
 800a150:	0018      	movs	r0, r3
 800a152:	f000 faf1 	bl	800a738 <compensate_temperature>
 800a156:	0002      	movs	r2, r0
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	605a      	str	r2, [r3, #4]
        }

        if (sensor_comp & BME280_PRESS)
 800a15c:	230f      	movs	r3, #15
 800a15e:	18fb      	adds	r3, r7, r3
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	2201      	movs	r2, #1
 800a164:	4013      	ands	r3, r2
 800a166:	d008      	beq.n	800a17a <bme280_compensate_data+0x7a>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 800a168:	683a      	ldr	r2, [r7, #0]
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	0011      	movs	r1, r2
 800a16e:	0018      	movs	r0, r3
 800a170:	f000 fb48 	bl	800a804 <compensate_pressure>
 800a174:	0002      	movs	r2, r0
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	601a      	str	r2, [r3, #0]
        }

        if (sensor_comp & BME280_HUM)
 800a17a:	230f      	movs	r3, #15
 800a17c:	18fb      	adds	r3, r7, r3
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	2204      	movs	r2, #4
 800a182:	4013      	ands	r3, r2
 800a184:	d00d      	beq.n	800a1a2 <bme280_compensate_data+0xa2>
        {
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 800a186:	683a      	ldr	r2, [r7, #0]
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	0011      	movs	r1, r2
 800a18c:	0018      	movs	r0, r3
 800a18e:	f000 fc3b 	bl	800aa08 <compensate_humidity>
 800a192:	0002      	movs	r2, r0
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	609a      	str	r2, [r3, #8]
        if (sensor_comp & BME280_HUM)
 800a198:	e003      	b.n	800a1a2 <bme280_compensate_data+0xa2>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800a19a:	2317      	movs	r3, #23
 800a19c:	18fb      	adds	r3, r7, r3
 800a19e:	22ff      	movs	r2, #255	@ 0xff
 800a1a0:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800a1a2:	2317      	movs	r3, #23
 800a1a4:	18fb      	adds	r3, r7, r3
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	b25b      	sxtb	r3, r3
}
 800a1aa:	0018      	movs	r0, r3
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	b006      	add	sp, #24
 800a1b0:	bd80      	pop	{r7, pc}
	...

0800a1b4 <bme280_cal_meas_delay>:
/*!
 * @brief This API is used to calculate the maximum delay in milliseconds required for the
 * temperature/pressure/humidity(which ever at enabled) measurement to complete.
 */
uint32_t bme280_cal_meas_delay(const struct bme280_settings *settings)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b086      	sub	sp, #24
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
    uint8_t temp_osr;
    uint8_t pres_osr;
    uint8_t hum_osr;

    /*Array to map OSR config register value to actual OSR */
    uint8_t osr_sett_to_act_osr[] = {0, 1, 2, 4, 8, 16};
 800a1bc:	2008      	movs	r0, #8
 800a1be:	183b      	adds	r3, r7, r0
 800a1c0:	4a35      	ldr	r2, [pc, #212]	@ (800a298 <bme280_cal_meas_delay+0xe4>)
 800a1c2:	6811      	ldr	r1, [r2, #0]
 800a1c4:	6019      	str	r1, [r3, #0]
 800a1c6:	8892      	ldrh	r2, [r2, #4]
 800a1c8:	809a      	strh	r2, [r3, #4]

    /* Mapping osr settings to the actual osr values e.g. 0b101 -> osr X16  */
    if (settings->osr_t <= 5)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	785b      	ldrb	r3, [r3, #1]
 800a1ce:	2b05      	cmp	r3, #5
 800a1d0:	d808      	bhi.n	800a1e4 <bme280_cal_meas_delay+0x30>
    {
        temp_osr = osr_sett_to_act_osr[settings->osr_t];
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	785b      	ldrb	r3, [r3, #1]
 800a1d6:	0019      	movs	r1, r3
 800a1d8:	2317      	movs	r3, #23
 800a1da:	18fb      	adds	r3, r7, r3
 800a1dc:	183a      	adds	r2, r7, r0
 800a1de:	5c52      	ldrb	r2, [r2, r1]
 800a1e0:	701a      	strb	r2, [r3, #0]
 800a1e2:	e003      	b.n	800a1ec <bme280_cal_meas_delay+0x38>
    }
    else
    {
        temp_osr = 16;
 800a1e4:	2317      	movs	r3, #23
 800a1e6:	18fb      	adds	r3, r7, r3
 800a1e8:	2210      	movs	r2, #16
 800a1ea:	701a      	strb	r2, [r3, #0]
    }

    if (settings->osr_p <= 5)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	2b05      	cmp	r3, #5
 800a1f2:	d809      	bhi.n	800a208 <bme280_cal_meas_delay+0x54>
    {
        pres_osr = osr_sett_to_act_osr[settings->osr_p];
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	0019      	movs	r1, r3
 800a1fa:	2316      	movs	r3, #22
 800a1fc:	18fb      	adds	r3, r7, r3
 800a1fe:	2208      	movs	r2, #8
 800a200:	18ba      	adds	r2, r7, r2
 800a202:	5c52      	ldrb	r2, [r2, r1]
 800a204:	701a      	strb	r2, [r3, #0]
 800a206:	e003      	b.n	800a210 <bme280_cal_meas_delay+0x5c>
    }
    else
    {
        pres_osr = 16;
 800a208:	2316      	movs	r3, #22
 800a20a:	18fb      	adds	r3, r7, r3
 800a20c:	2210      	movs	r2, #16
 800a20e:	701a      	strb	r2, [r3, #0]
    }

    if (settings->osr_h <= 5)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	789b      	ldrb	r3, [r3, #2]
 800a214:	2b05      	cmp	r3, #5
 800a216:	d809      	bhi.n	800a22c <bme280_cal_meas_delay+0x78>
    {
        hum_osr = osr_sett_to_act_osr[settings->osr_h];
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	789b      	ldrb	r3, [r3, #2]
 800a21c:	0019      	movs	r1, r3
 800a21e:	2315      	movs	r3, #21
 800a220:	18fb      	adds	r3, r7, r3
 800a222:	2208      	movs	r2, #8
 800a224:	18ba      	adds	r2, r7, r2
 800a226:	5c52      	ldrb	r2, [r2, r1]
 800a228:	701a      	strb	r2, [r3, #0]
 800a22a:	e003      	b.n	800a234 <bme280_cal_meas_delay+0x80>
    }
    else
    {
        hum_osr = 16;
 800a22c:	2315      	movs	r3, #21
 800a22e:	18fb      	adds	r3, r7, r3
 800a230:	2210      	movs	r2, #16
 800a232:	701a      	strb	r2, [r3, #0]
    }

    max_delay =
        (uint32_t)((BME280_MEAS_OFFSET + (BME280_MEAS_DUR * temp_osr) +
 800a234:	2317      	movs	r3, #23
 800a236:	18fb      	adds	r3, r7, r3
 800a238:	781a      	ldrb	r2, [r3, #0]
 800a23a:	0013      	movs	r3, r2
 800a23c:	00db      	lsls	r3, r3, #3
 800a23e:	189b      	adds	r3, r3, r2
 800a240:	019b      	lsls	r3, r3, #6
 800a242:	1a9b      	subs	r3, r3, r2
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	4a15      	ldr	r2, [pc, #84]	@ (800a29c <bme280_cal_meas_delay+0xe8>)
 800a248:	1899      	adds	r1, r3, r2
                    ((BME280_MEAS_DUR * pres_osr) + BME280_PRES_HUM_MEAS_OFFSET) +
 800a24a:	2316      	movs	r3, #22
 800a24c:	18fb      	adds	r3, r7, r3
 800a24e:	781a      	ldrb	r2, [r3, #0]
 800a250:	0013      	movs	r3, r2
 800a252:	00db      	lsls	r3, r3, #3
 800a254:	189b      	adds	r3, r3, r2
 800a256:	019b      	lsls	r3, r3, #6
 800a258:	1a9b      	subs	r3, r3, r2
 800a25a:	009b      	lsls	r3, r3, #2
 800a25c:	4a10      	ldr	r2, [pc, #64]	@ (800a2a0 <bme280_cal_meas_delay+0xec>)
 800a25e:	4694      	mov	ip, r2
 800a260:	4463      	add	r3, ip
        (uint32_t)((BME280_MEAS_OFFSET + (BME280_MEAS_DUR * temp_osr) +
 800a262:	18c9      	adds	r1, r1, r3
                    ((BME280_MEAS_DUR * hum_osr) + BME280_PRES_HUM_MEAS_OFFSET)) /
 800a264:	2315      	movs	r3, #21
 800a266:	18fb      	adds	r3, r7, r3
 800a268:	781a      	ldrb	r2, [r3, #0]
 800a26a:	0013      	movs	r3, r2
 800a26c:	00db      	lsls	r3, r3, #3
 800a26e:	189b      	adds	r3, r3, r2
 800a270:	019b      	lsls	r3, r3, #6
 800a272:	1a9b      	subs	r3, r3, r2
 800a274:	009b      	lsls	r3, r3, #2
 800a276:	4a0a      	ldr	r2, [pc, #40]	@ (800a2a0 <bme280_cal_meas_delay+0xec>)
 800a278:	4694      	mov	ip, r2
 800a27a:	4463      	add	r3, ip
                    ((BME280_MEAS_DUR * pres_osr) + BME280_PRES_HUM_MEAS_OFFSET) +
 800a27c:	18cb      	adds	r3, r1, r3
                    ((BME280_MEAS_DUR * hum_osr) + BME280_PRES_HUM_MEAS_OFFSET)) /
 800a27e:	22fa      	movs	r2, #250	@ 0xfa
 800a280:	0091      	lsls	r1, r2, #2
 800a282:	0018      	movs	r0, r3
 800a284:	f7f5 ffe6 	bl	8000254 <__divsi3>
 800a288:	0003      	movs	r3, r0
    max_delay =
 800a28a:	613b      	str	r3, [r7, #16]
                   BME280_MEAS_SCALING_FACTOR);

    return max_delay;
 800a28c:	693b      	ldr	r3, [r7, #16]
}
 800a28e:	0018      	movs	r0, r3
 800a290:	46bd      	mov	sp, r7
 800a292:	b006      	add	sp, #24
 800a294:	bd80      	pop	{r7, pc}
 800a296:	46c0      	nop			@ (mov r8, r8)
 800a298:	0800fcc0 	.word	0x0800fcc0
 800a29c:	000004e2 	.word	0x000004e2
 800a2a0:	0000023f 	.word	0x0000023f

0800a2a4 <set_osr_settings>:
/*!
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings, struct bme280_dev *dev)
{
 800a2a4:	b590      	push	{r4, r7, lr}
 800a2a6:	b087      	sub	sp, #28
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	60b9      	str	r1, [r7, #8]
 800a2ac:	607a      	str	r2, [r7, #4]
 800a2ae:	210f      	movs	r1, #15
 800a2b0:	187b      	adds	r3, r7, r1
 800a2b2:	1c02      	adds	r2, r0, #0
 800a2b4:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 800a2b6:	2017      	movs	r0, #23
 800a2b8:	183b      	adds	r3, r7, r0
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	701a      	strb	r2, [r3, #0]

    if (desired_settings & BME280_OSR_HUM_SEL)
 800a2be:	187b      	adds	r3, r7, r1
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	2204      	movs	r2, #4
 800a2c4:	4013      	ands	r3, r2
 800a2c6:	d008      	beq.n	800a2da <set_osr_settings+0x36>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 800a2c8:	183c      	adds	r4, r7, r0
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	0011      	movs	r1, r2
 800a2d0:	0018      	movs	r0, r3
 800a2d2:	f000 f81b 	bl	800a30c <set_osr_humidity_settings>
 800a2d6:	0003      	movs	r3, r0
 800a2d8:	7023      	strb	r3, [r4, #0]
    }

    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 800a2da:	200f      	movs	r0, #15
 800a2dc:	183b      	adds	r3, r7, r0
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	2203      	movs	r2, #3
 800a2e2:	4013      	ands	r3, r2
 800a2e4:	d00a      	beq.n	800a2fc <set_osr_settings+0x58>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 800a2e6:	2317      	movs	r3, #23
 800a2e8:	18fc      	adds	r4, r7, r3
 800a2ea:	687a      	ldr	r2, [r7, #4]
 800a2ec:	68b9      	ldr	r1, [r7, #8]
 800a2ee:	183b      	adds	r3, r7, r0
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	0018      	movs	r0, r3
 800a2f4:	f000 f851 	bl	800a39a <set_osr_press_temp_settings>
 800a2f8:	0003      	movs	r3, r0
 800a2fa:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800a2fc:	2317      	movs	r3, #23
 800a2fe:	18fb      	adds	r3, r7, r3
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	b25b      	sxtb	r3, r3
}
 800a304:	0018      	movs	r0, r3
 800a306:	46bd      	mov	sp, r7
 800a308:	b007      	add	sp, #28
 800a30a:	bd90      	pop	{r4, r7, pc}

0800a30c <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 800a30c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a30e:	b085      	sub	sp, #20
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 800a316:	250c      	movs	r5, #12
 800a318:	197b      	adds	r3, r7, r5
 800a31a:	22f2      	movs	r2, #242	@ 0xf2
 800a31c:	701a      	strb	r2, [r3, #0]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	789b      	ldrb	r3, [r3, #2]
 800a322:	2207      	movs	r2, #7
 800a324:	4013      	ands	r3, r2
 800a326:	b2da      	uxtb	r2, r3
 800a328:	210e      	movs	r1, #14
 800a32a:	187b      	adds	r3, r7, r1
 800a32c:	701a      	strb	r2, [r3, #0]

    /* Write the humidity control value in the register */
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 800a32e:	260f      	movs	r6, #15
 800a330:	19bc      	adds	r4, r7, r6
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	1879      	adds	r1, r7, r1
 800a336:	1978      	adds	r0, r7, r5
 800a338:	2201      	movs	r2, #1
 800a33a:	f7ff fc5f 	bl	8009bfc <bme280_set_regs>
 800a33e:	0003      	movs	r3, r0
 800a340:	7023      	strb	r3, [r4, #0]

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 800a342:	0031      	movs	r1, r6
 800a344:	187b      	adds	r3, r7, r1
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	b25b      	sxtb	r3, r3
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d11d      	bne.n	800a38a <set_osr_humidity_settings+0x7e>
    {
        reg_addr = BME280_CTRL_MEAS_ADDR;
 800a34e:	197b      	adds	r3, r7, r5
 800a350:	22f4      	movs	r2, #244	@ 0xf4
 800a352:	701a      	strb	r2, [r3, #0]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 800a354:	197b      	adds	r3, r7, r5
 800a356:	7818      	ldrb	r0, [r3, #0]
 800a358:	000e      	movs	r6, r1
 800a35a:	187c      	adds	r4, r7, r1
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	220d      	movs	r2, #13
 800a360:	18b9      	adds	r1, r7, r2
 800a362:	2201      	movs	r2, #1
 800a364:	f7ff fbf8 	bl	8009b58 <bme280_get_regs>
 800a368:	0003      	movs	r3, r0
 800a36a:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 800a36c:	19bb      	adds	r3, r7, r6
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	b25b      	sxtb	r3, r3
 800a372:	2b00      	cmp	r3, #0
 800a374:	d109      	bne.n	800a38a <set_osr_humidity_settings+0x7e>
        {
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 800a376:	19bc      	adds	r4, r7, r6
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	220d      	movs	r2, #13
 800a37c:	18b9      	adds	r1, r7, r2
 800a37e:	1978      	adds	r0, r7, r5
 800a380:	2201      	movs	r2, #1
 800a382:	f7ff fc3b 	bl	8009bfc <bme280_set_regs>
 800a386:	0003      	movs	r3, r0
 800a388:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 800a38a:	230f      	movs	r3, #15
 800a38c:	18fb      	adds	r3, r7, r3
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	b25b      	sxtb	r3, r3
}
 800a392:	0018      	movs	r0, r3
 800a394:	46bd      	mov	sp, r7
 800a396:	b005      	add	sp, #20
 800a398:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a39a <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 800a39a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a39c:	b087      	sub	sp, #28
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	607a      	str	r2, [r7, #4]
 800a3a4:	250f      	movs	r5, #15
 800a3a6:	197b      	adds	r3, r7, r5
 800a3a8:	1c02      	adds	r2, r0, #0
 800a3aa:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 800a3ac:	2116      	movs	r1, #22
 800a3ae:	187b      	adds	r3, r7, r1
 800a3b0:	22f4      	movs	r2, #244	@ 0xf4
 800a3b2:	701a      	strb	r2, [r3, #0]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800a3b4:	187b      	adds	r3, r7, r1
 800a3b6:	7818      	ldrb	r0, [r3, #0]
 800a3b8:	2617      	movs	r6, #23
 800a3ba:	19bc      	adds	r4, r7, r6
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2215      	movs	r2, #21
 800a3c0:	18b9      	adds	r1, r7, r2
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	f7ff fbc8 	bl	8009b58 <bme280_get_regs>
 800a3c8:	0003      	movs	r3, r0
 800a3ca:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 800a3cc:	19bb      	adds	r3, r7, r6
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	b25b      	sxtb	r3, r3
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d124      	bne.n	800a420 <set_osr_press_temp_settings+0x86>
    {
        if (desired_settings & BME280_OSR_PRESS_SEL)
 800a3d6:	197b      	adds	r3, r7, r5
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	4013      	ands	r3, r2
 800a3de:	d006      	beq.n	800a3ee <set_osr_press_temp_settings+0x54>
        {
            fill_osr_press_settings(&reg_data, settings);
 800a3e0:	68ba      	ldr	r2, [r7, #8]
 800a3e2:	2315      	movs	r3, #21
 800a3e4:	18fb      	adds	r3, r7, r3
 800a3e6:	0011      	movs	r1, r2
 800a3e8:	0018      	movs	r0, r3
 800a3ea:	f000 f89f 	bl	800a52c <fill_osr_press_settings>
        }

        if (desired_settings & BME280_OSR_TEMP_SEL)
 800a3ee:	230f      	movs	r3, #15
 800a3f0:	18fb      	adds	r3, r7, r3
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	2202      	movs	r2, #2
 800a3f6:	4013      	ands	r3, r2
 800a3f8:	d006      	beq.n	800a408 <set_osr_press_temp_settings+0x6e>
        {
            fill_osr_temp_settings(&reg_data, settings);
 800a3fa:	68ba      	ldr	r2, [r7, #8]
 800a3fc:	2315      	movs	r3, #21
 800a3fe:	18fb      	adds	r3, r7, r3
 800a400:	0011      	movs	r1, r2
 800a402:	0018      	movs	r0, r3
 800a404:	f000 f8ad 	bl	800a562 <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800a408:	2317      	movs	r3, #23
 800a40a:	18fc      	adds	r4, r7, r3
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2215      	movs	r2, #21
 800a410:	18b9      	adds	r1, r7, r2
 800a412:	2216      	movs	r2, #22
 800a414:	18b8      	adds	r0, r7, r2
 800a416:	2201      	movs	r2, #1
 800a418:	f7ff fbf0 	bl	8009bfc <bme280_set_regs>
 800a41c:	0003      	movs	r3, r0
 800a41e:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800a420:	2317      	movs	r3, #23
 800a422:	18fb      	adds	r3, r7, r3
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	b25b      	sxtb	r3, r3
}
 800a428:	0018      	movs	r0, r3
 800a42a:	46bd      	mov	sp, r7
 800a42c:	b007      	add	sp, #28
 800a42e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a430 <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 800a430:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a432:	b087      	sub	sp, #28
 800a434:	af00      	add	r7, sp, #0
 800a436:	60b9      	str	r1, [r7, #8]
 800a438:	607a      	str	r2, [r7, #4]
 800a43a:	250f      	movs	r5, #15
 800a43c:	197b      	adds	r3, r7, r5
 800a43e:	1c02      	adds	r2, r0, #0
 800a440:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 800a442:	2116      	movs	r1, #22
 800a444:	187b      	adds	r3, r7, r1
 800a446:	22f5      	movs	r2, #245	@ 0xf5
 800a448:	701a      	strb	r2, [r3, #0]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800a44a:	187b      	adds	r3, r7, r1
 800a44c:	7818      	ldrb	r0, [r3, #0]
 800a44e:	2617      	movs	r6, #23
 800a450:	19bc      	adds	r4, r7, r6
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2215      	movs	r2, #21
 800a456:	18b9      	adds	r1, r7, r2
 800a458:	2201      	movs	r2, #1
 800a45a:	f7ff fb7d 	bl	8009b58 <bme280_get_regs>
 800a45e:	0003      	movs	r3, r0
 800a460:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 800a462:	19bb      	adds	r3, r7, r6
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	b25b      	sxtb	r3, r3
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d124      	bne.n	800a4b6 <set_filter_standby_settings+0x86>
    {
        if (desired_settings & BME280_FILTER_SEL)
 800a46c:	197b      	adds	r3, r7, r5
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	2208      	movs	r2, #8
 800a472:	4013      	ands	r3, r2
 800a474:	d006      	beq.n	800a484 <set_filter_standby_settings+0x54>
        {
            fill_filter_settings(&reg_data, settings);
 800a476:	68ba      	ldr	r2, [r7, #8]
 800a478:	2315      	movs	r3, #21
 800a47a:	18fb      	adds	r3, r7, r3
 800a47c:	0011      	movs	r1, r2
 800a47e:	0018      	movs	r0, r3
 800a480:	f000 f821 	bl	800a4c6 <fill_filter_settings>
        }

        if (desired_settings & BME280_STANDBY_SEL)
 800a484:	230f      	movs	r3, #15
 800a486:	18fb      	adds	r3, r7, r3
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	2210      	movs	r2, #16
 800a48c:	4013      	ands	r3, r2
 800a48e:	d006      	beq.n	800a49e <set_filter_standby_settings+0x6e>
        {
            fill_standby_settings(&reg_data, settings);
 800a490:	68ba      	ldr	r2, [r7, #8]
 800a492:	2315      	movs	r3, #21
 800a494:	18fb      	adds	r3, r7, r3
 800a496:	0011      	movs	r1, r2
 800a498:	0018      	movs	r0, r3
 800a49a:	f000 f82f 	bl	800a4fc <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800a49e:	2317      	movs	r3, #23
 800a4a0:	18fc      	adds	r4, r7, r3
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2215      	movs	r2, #21
 800a4a6:	18b9      	adds	r1, r7, r2
 800a4a8:	2216      	movs	r2, #22
 800a4aa:	18b8      	adds	r0, r7, r2
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	f7ff fba5 	bl	8009bfc <bme280_set_regs>
 800a4b2:	0003      	movs	r3, r0
 800a4b4:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800a4b6:	2317      	movs	r3, #23
 800a4b8:	18fb      	adds	r3, r7, r3
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	b25b      	sxtb	r3, r3
}
 800a4be:	0018      	movs	r0, r3
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	b007      	add	sp, #28
 800a4c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a4c6 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b082      	sub	sp, #8
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
 800a4ce:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	b25b      	sxtb	r3, r3
 800a4d6:	221c      	movs	r2, #28
 800a4d8:	4393      	bics	r3, r2
 800a4da:	b25a      	sxtb	r2, r3
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	78db      	ldrb	r3, [r3, #3]
 800a4e0:	009b      	lsls	r3, r3, #2
 800a4e2:	b25b      	sxtb	r3, r3
 800a4e4:	211c      	movs	r1, #28
 800a4e6:	400b      	ands	r3, r1
 800a4e8:	b25b      	sxtb	r3, r3
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	b25b      	sxtb	r3, r3
 800a4ee:	b2da      	uxtb	r2, r3
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	701a      	strb	r2, [r3, #0]
}
 800a4f4:	46c0      	nop			@ (mov r8, r8)
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	b002      	add	sp, #8
 800a4fa:	bd80      	pop	{r7, pc}

0800a4fc <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b082      	sub	sp, #8
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	b25b      	sxtb	r3, r3
 800a50c:	221f      	movs	r2, #31
 800a50e:	4013      	ands	r3, r2
 800a510:	b25a      	sxtb	r2, r3
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	791b      	ldrb	r3, [r3, #4]
 800a516:	015b      	lsls	r3, r3, #5
 800a518:	b25b      	sxtb	r3, r3
 800a51a:	4313      	orrs	r3, r2
 800a51c:	b25b      	sxtb	r3, r3
 800a51e:	b2da      	uxtb	r2, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	701a      	strb	r2, [r3, #0]
}
 800a524:	46c0      	nop			@ (mov r8, r8)
 800a526:	46bd      	mov	sp, r7
 800a528:	b002      	add	sp, #8
 800a52a:	bd80      	pop	{r7, pc}

0800a52c <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	b25b      	sxtb	r3, r3
 800a53c:	221c      	movs	r2, #28
 800a53e:	4393      	bics	r3, r2
 800a540:	b25a      	sxtb	r2, r3
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	b25b      	sxtb	r3, r3
 800a54a:	211c      	movs	r1, #28
 800a54c:	400b      	ands	r3, r1
 800a54e:	b25b      	sxtb	r3, r3
 800a550:	4313      	orrs	r3, r2
 800a552:	b25b      	sxtb	r3, r3
 800a554:	b2da      	uxtb	r2, r3
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	701a      	strb	r2, [r3, #0]
}
 800a55a:	46c0      	nop			@ (mov r8, r8)
 800a55c:	46bd      	mov	sp, r7
 800a55e:	b002      	add	sp, #8
 800a560:	bd80      	pop	{r7, pc}

0800a562 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b082      	sub	sp, #8
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
 800a56a:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	b25b      	sxtb	r3, r3
 800a572:	221f      	movs	r2, #31
 800a574:	4013      	ands	r3, r2
 800a576:	b25a      	sxtb	r2, r3
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	785b      	ldrb	r3, [r3, #1]
 800a57c:	015b      	lsls	r3, r3, #5
 800a57e:	b25b      	sxtb	r3, r3
 800a580:	4313      	orrs	r3, r2
 800a582:	b25b      	sxtb	r3, r3
 800a584:	b2da      	uxtb	r2, r3
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	701a      	strb	r2, [r3, #0]
}
 800a58a:	46c0      	nop			@ (mov r8, r8)
 800a58c:	46bd      	mov	sp, r7
 800a58e:	b002      	add	sp, #8
 800a590:	bd80      	pop	{r7, pc}

0800a592 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 800a592:	b580      	push	{r7, lr}
 800a594:	b082      	sub	sp, #8
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
 800a59a:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	781b      	ldrb	r3, [r3, #0]
 800a5a0:	2207      	movs	r2, #7
 800a5a2:	4013      	ands	r3, r2
 800a5a4:	b2da      	uxtb	r2, r3
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	3302      	adds	r3, #2
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	109b      	asrs	r3, r3, #2
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	2207      	movs	r2, #7
 800a5b6:	4013      	ands	r3, r2
 800a5b8:	b2da      	uxtb	r2, r3
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	3302      	adds	r3, #2
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	095b      	lsrs	r3, r3, #5
 800a5c6:	b2da      	uxtb	r2, r3
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	3303      	adds	r3, #3
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	109b      	asrs	r3, r3, #2
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	2207      	movs	r2, #7
 800a5d8:	4013      	ands	r3, r2
 800a5da:	b2da      	uxtb	r2, r3
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	3303      	adds	r3, #3
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	095b      	lsrs	r3, r3, #5
 800a5e8:	b2da      	uxtb	r2, r3
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	711a      	strb	r2, [r3, #4]
}
 800a5ee:	46c0      	nop			@ (mov r8, r8)
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	b002      	add	sp, #8
 800a5f4:	bd80      	pop	{r7, pc}

0800a5f6 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 800a5f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5f8:	b085      	sub	sp, #20
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	0002      	movs	r2, r0
 800a5fe:	6039      	str	r1, [r7, #0]
 800a600:	1dfb      	adds	r3, r7, #7
 800a602:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 800a604:	260e      	movs	r6, #14
 800a606:	19bb      	adds	r3, r7, r6
 800a608:	22f4      	movs	r2, #244	@ 0xf4
 800a60a:	701a      	strb	r2, [r3, #0]

    /* Variable to store the value read from power mode register */
    uint8_t sensor_mode_reg_val;

    /* Read the power mode register */
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 800a60c:	19bb      	adds	r3, r7, r6
 800a60e:	7818      	ldrb	r0, [r3, #0]
 800a610:	240f      	movs	r4, #15
 800a612:	193c      	adds	r4, r7, r4
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	250d      	movs	r5, #13
 800a618:	1979      	adds	r1, r7, r5
 800a61a:	2201      	movs	r2, #1
 800a61c:	f7ff fa9c 	bl	8009b58 <bme280_get_regs>
 800a620:	0003      	movs	r3, r0
 800a622:	7023      	strb	r3, [r4, #0]

    /* Set the power mode */
    if (rslt == BME280_OK)
 800a624:	240f      	movs	r4, #15
 800a626:	193b      	adds	r3, r7, r4
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	b25b      	sxtb	r3, r3
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d11a      	bne.n	800a666 <write_power_mode+0x70>
    {
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 800a630:	0028      	movs	r0, r5
 800a632:	183b      	adds	r3, r7, r0
 800a634:	781b      	ldrb	r3, [r3, #0]
 800a636:	b25b      	sxtb	r3, r3
 800a638:	2203      	movs	r2, #3
 800a63a:	4393      	bics	r3, r2
 800a63c:	b25a      	sxtb	r2, r3
 800a63e:	1dfb      	adds	r3, r7, #7
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	b25b      	sxtb	r3, r3
 800a644:	2103      	movs	r1, #3
 800a646:	400b      	ands	r3, r1
 800a648:	b25b      	sxtb	r3, r3
 800a64a:	4313      	orrs	r3, r2
 800a64c:	b25b      	sxtb	r3, r3
 800a64e:	b2da      	uxtb	r2, r3
 800a650:	183b      	adds	r3, r7, r0
 800a652:	701a      	strb	r2, [r3, #0]

        /* Write the power mode in the register */
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 800a654:	193c      	adds	r4, r7, r4
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	1839      	adds	r1, r7, r0
 800a65a:	19b8      	adds	r0, r7, r6
 800a65c:	2201      	movs	r2, #1
 800a65e:	f7ff facd 	bl	8009bfc <bme280_set_regs>
 800a662:	0003      	movs	r3, r0
 800a664:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800a666:	230f      	movs	r3, #15
 800a668:	18fb      	adds	r3, r7, r3
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	b25b      	sxtb	r3, r3
}
 800a66e:	0018      	movs	r0, r3
 800a670:	46bd      	mov	sp, r7
 800a672:	b005      	add	sp, #20
 800a674:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a676 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
int8_t put_device_to_sleep(struct bme280_dev *dev)
{
 800a676:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a678:	b087      	sub	sp, #28
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];
    struct bme280_settings settings;

    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 800a67e:	2517      	movs	r5, #23
 800a680:	197c      	adds	r4, r7, r5
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2610      	movs	r6, #16
 800a686:	19b9      	adds	r1, r7, r6
 800a688:	2204      	movs	r2, #4
 800a68a:	20f2      	movs	r0, #242	@ 0xf2
 800a68c:	f7ff fa64 	bl	8009b58 <bme280_get_regs>
 800a690:	0003      	movs	r3, r0
 800a692:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 800a694:	002c      	movs	r4, r5
 800a696:	193b      	adds	r3, r7, r4
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	b25b      	sxtb	r3, r3
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d11d      	bne.n	800a6dc <put_device_to_sleep+0x66>
    {
        parse_device_settings(reg_data, &settings);
 800a6a0:	2308      	movs	r3, #8
 800a6a2:	18fa      	adds	r2, r7, r3
 800a6a4:	19bb      	adds	r3, r7, r6
 800a6a6:	0011      	movs	r1, r2
 800a6a8:	0018      	movs	r0, r3
 800a6aa:	f7ff ff72 	bl	800a592 <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 800a6ae:	0025      	movs	r5, r4
 800a6b0:	193c      	adds	r4, r7, r4
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	0018      	movs	r0, r3
 800a6b6:	f7ff fc1e 	bl	8009ef6 <bme280_soft_reset>
 800a6ba:	0003      	movs	r3, r0
 800a6bc:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 800a6be:	197b      	adds	r3, r7, r5
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	b25b      	sxtb	r3, r3
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d109      	bne.n	800a6dc <put_device_to_sleep+0x66>
        {
            rslt = reload_device_settings(&settings, dev);
 800a6c8:	197c      	adds	r4, r7, r5
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	2308      	movs	r3, #8
 800a6ce:	18fb      	adds	r3, r7, r3
 800a6d0:	0011      	movs	r1, r2
 800a6d2:	0018      	movs	r0, r3
 800a6d4:	f000 f80a 	bl	800a6ec <reload_device_settings>
 800a6d8:	0003      	movs	r3, r0
 800a6da:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 800a6dc:	2317      	movs	r3, #23
 800a6de:	18fb      	adds	r3, r7, r3
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	b25b      	sxtb	r3, r3
}
 800a6e4:	0018      	movs	r0, r3
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	b007      	add	sp, #28
 800a6ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a6ec <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 800a6ec:	b5b0      	push	{r4, r5, r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 800a6f6:	250f      	movs	r5, #15
 800a6f8:	197c      	adds	r4, r7, r5
 800a6fa:	683a      	ldr	r2, [r7, #0]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	0019      	movs	r1, r3
 800a700:	201f      	movs	r0, #31
 800a702:	f7ff fdcf 	bl	800a2a4 <set_osr_settings>
 800a706:	0003      	movs	r3, r0
 800a708:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 800a70a:	197b      	adds	r3, r7, r5
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	b25b      	sxtb	r3, r3
 800a710:	2b00      	cmp	r3, #0
 800a712:	d108      	bne.n	800a726 <reload_device_settings+0x3a>
    {
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 800a714:	197c      	adds	r4, r7, r5
 800a716:	683a      	ldr	r2, [r7, #0]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	0019      	movs	r1, r3
 800a71c:	201f      	movs	r0, #31
 800a71e:	f7ff fe87 	bl	800a430 <set_filter_standby_settings>
 800a722:	0003      	movs	r3, r0
 800a724:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800a726:	230f      	movs	r3, #15
 800a728:	18fb      	adds	r3, r7, r3
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	b25b      	sxtb	r3, r3
}
 800a72e:	0018      	movs	r0, r3
 800a730:	46bd      	mov	sp, r7
 800a732:	b004      	add	sp, #16
 800a734:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a738 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
                                      struct bme280_calib_data *calib_data)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b088      	sub	sp, #32
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]
    int32_t var1;
    int32_t var2;
    int32_t temperature;
    int32_t temperature_min = -4000;
 800a742:	4b2b      	ldr	r3, [pc, #172]	@ (800a7f0 <compensate_temperature+0xb8>)
 800a744:	61bb      	str	r3, [r7, #24]
    int32_t temperature_max = 8500;
 800a746:	4b2b      	ldr	r3, [pc, #172]	@ (800a7f4 <compensate_temperature+0xbc>)
 800a748:	617b      	str	r3, [r7, #20]

    var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_t1 * 2));
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	08db      	lsrs	r3, r3, #3
 800a750:	683a      	ldr	r2, [r7, #0]
 800a752:	8812      	ldrh	r2, [r2, #0]
 800a754:	0052      	lsls	r2, r2, #1
 800a756:	1a9b      	subs	r3, r3, r2
 800a758:	613b      	str	r3, [r7, #16]
    var1 = (var1 * ((int32_t)calib_data->dig_t2)) / 2048;
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	2202      	movs	r2, #2
 800a75e:	5e9b      	ldrsh	r3, [r3, r2]
 800a760:	001a      	movs	r2, r3
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	4353      	muls	r3, r2
 800a766:	2b00      	cmp	r3, #0
 800a768:	da02      	bge.n	800a770 <compensate_temperature+0x38>
 800a76a:	4a23      	ldr	r2, [pc, #140]	@ (800a7f8 <compensate_temperature+0xc0>)
 800a76c:	4694      	mov	ip, r2
 800a76e:	4463      	add	r3, ip
 800a770:	12db      	asrs	r3, r3, #11
 800a772:	613b      	str	r3, [r7, #16]
    var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_t1));
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	091b      	lsrs	r3, r3, #4
 800a77a:	683a      	ldr	r2, [r7, #0]
 800a77c:	8812      	ldrh	r2, [r2, #0]
 800a77e:	1a9b      	subs	r3, r3, r2
 800a780:	60fb      	str	r3, [r7, #12]
    var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_t3)) / 16384;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	435b      	muls	r3, r3
 800a786:	2b00      	cmp	r3, #0
 800a788:	da02      	bge.n	800a790 <compensate_temperature+0x58>
 800a78a:	4a1c      	ldr	r2, [pc, #112]	@ (800a7fc <compensate_temperature+0xc4>)
 800a78c:	4694      	mov	ip, r2
 800a78e:	4463      	add	r3, ip
 800a790:	131b      	asrs	r3, r3, #12
 800a792:	001a      	movs	r2, r3
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	2104      	movs	r1, #4
 800a798:	5e5b      	ldrsh	r3, [r3, r1]
 800a79a:	4353      	muls	r3, r2
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	da02      	bge.n	800a7a6 <compensate_temperature+0x6e>
 800a7a0:	4a17      	ldr	r2, [pc, #92]	@ (800a800 <compensate_temperature+0xc8>)
 800a7a2:	4694      	mov	ip, r2
 800a7a4:	4463      	add	r3, ip
 800a7a6:	139b      	asrs	r3, r3, #14
 800a7a8:	60fb      	str	r3, [r7, #12]
    calib_data->t_fine = var1 + var2;
 800a7aa:	693a      	ldr	r2, [r7, #16]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	18d2      	adds	r2, r2, r3
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	625a      	str	r2, [r3, #36]	@ 0x24
    temperature = (calib_data->t_fine * 5 + 128) / 256;
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a7b8:	0013      	movs	r3, r2
 800a7ba:	009b      	lsls	r3, r3, #2
 800a7bc:	189b      	adds	r3, r3, r2
 800a7be:	3380      	adds	r3, #128	@ 0x80
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	da00      	bge.n	800a7c6 <compensate_temperature+0x8e>
 800a7c4:	33ff      	adds	r3, #255	@ 0xff
 800a7c6:	121b      	asrs	r3, r3, #8
 800a7c8:	61fb      	str	r3, [r7, #28]

    if (temperature < temperature_min)
 800a7ca:	69fa      	ldr	r2, [r7, #28]
 800a7cc:	69bb      	ldr	r3, [r7, #24]
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	da02      	bge.n	800a7d8 <compensate_temperature+0xa0>
    {
        temperature = temperature_min;
 800a7d2:	69bb      	ldr	r3, [r7, #24]
 800a7d4:	61fb      	str	r3, [r7, #28]
 800a7d6:	e005      	b.n	800a7e4 <compensate_temperature+0xac>
    }
    else if (temperature > temperature_max)
 800a7d8:	69fa      	ldr	r2, [r7, #28]
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	dd01      	ble.n	800a7e4 <compensate_temperature+0xac>
    {
        temperature = temperature_max;
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	61fb      	str	r3, [r7, #28]
    }
    __asm volatile("nop");
 800a7e4:	46c0      	nop			@ (mov r8, r8)
    return temperature;
 800a7e6:	69fb      	ldr	r3, [r7, #28]
}
 800a7e8:	0018      	movs	r0, r3
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	b008      	add	sp, #32
 800a7ee:	bd80      	pop	{r7, pc}
 800a7f0:	fffff060 	.word	0xfffff060
 800a7f4:	00002134 	.word	0x00002134
 800a7f8:	000007ff 	.word	0x000007ff
 800a7fc:	00000fff 	.word	0x00000fff
 800a800:	00003fff 	.word	0x00003fff

0800a804 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in integer data type.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                    const struct bme280_calib_data *calib_data)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b08a      	sub	sp, #40	@ 0x28
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
    int32_t var2;
    int32_t var3;
    int32_t var4;
    uint32_t var5;
    uint32_t pressure;
    uint32_t pressure_min = 30000;
 800a80e:	4b75      	ldr	r3, [pc, #468]	@ (800a9e4 <compensate_pressure+0x1e0>)
 800a810:	623b      	str	r3, [r7, #32]
    uint32_t pressure_max = 110000;
 800a812:	4b75      	ldr	r3, [pc, #468]	@ (800a9e8 <compensate_pressure+0x1e4>)
 800a814:	61fb      	str	r3, [r7, #28]

    var1 = (((int32_t)calib_data->t_fine) / 2) - (int32_t)64000;
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	da00      	bge.n	800a820 <compensate_pressure+0x1c>
 800a81e:	3301      	adds	r3, #1
 800a820:	105b      	asrs	r3, r3, #1
 800a822:	4a72      	ldr	r2, [pc, #456]	@ (800a9ec <compensate_pressure+0x1e8>)
 800a824:	4694      	mov	ip, r2
 800a826:	4463      	add	r3, ip
 800a828:	61bb      	str	r3, [r7, #24]
    var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t)calib_data->dig_p6);
 800a82a:	69bb      	ldr	r3, [r7, #24]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	da00      	bge.n	800a832 <compensate_pressure+0x2e>
 800a830:	3303      	adds	r3, #3
 800a832:	109b      	asrs	r3, r3, #2
 800a834:	001a      	movs	r2, r3
 800a836:	69bb      	ldr	r3, [r7, #24]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	da00      	bge.n	800a83e <compensate_pressure+0x3a>
 800a83c:	3303      	adds	r3, #3
 800a83e:	109b      	asrs	r3, r3, #2
 800a840:	4353      	muls	r3, r2
 800a842:	2b00      	cmp	r3, #0
 800a844:	da02      	bge.n	800a84c <compensate_pressure+0x48>
 800a846:	4a6a      	ldr	r2, [pc, #424]	@ (800a9f0 <compensate_pressure+0x1ec>)
 800a848:	4694      	mov	ip, r2
 800a84a:	4463      	add	r3, ip
 800a84c:	12db      	asrs	r3, r3, #11
 800a84e:	001a      	movs	r2, r3
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	2110      	movs	r1, #16
 800a854:	5e5b      	ldrsh	r3, [r3, r1]
 800a856:	4353      	muls	r3, r2
 800a858:	617b      	str	r3, [r7, #20]
    var2 = var2 + ((var1 * ((int32_t)calib_data->dig_p5)) * 2);
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	220e      	movs	r2, #14
 800a85e:	5e9b      	ldrsh	r3, [r3, r2]
 800a860:	001a      	movs	r2, r3
 800a862:	69bb      	ldr	r3, [r7, #24]
 800a864:	4353      	muls	r3, r2
 800a866:	005b      	lsls	r3, r3, #1
 800a868:	697a      	ldr	r2, [r7, #20]
 800a86a:	18d3      	adds	r3, r2, r3
 800a86c:	617b      	str	r3, [r7, #20]
    var2 = (var2 / 4) + (((int32_t)calib_data->dig_p4) * 65536);
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	2b00      	cmp	r3, #0
 800a872:	da00      	bge.n	800a876 <compensate_pressure+0x72>
 800a874:	3303      	adds	r3, #3
 800a876:	109b      	asrs	r3, r3, #2
 800a878:	001a      	movs	r2, r3
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	210c      	movs	r1, #12
 800a87e:	5e5b      	ldrsh	r3, [r3, r1]
 800a880:	041b      	lsls	r3, r3, #16
 800a882:	18d3      	adds	r3, r2, r3
 800a884:	617b      	str	r3, [r7, #20]
    var3 = (calib_data->dig_p3 * (((var1 / 4) * (var1 / 4)) / 8192)) / 8;
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	220a      	movs	r2, #10
 800a88a:	5e9b      	ldrsh	r3, [r3, r2]
 800a88c:	001a      	movs	r2, r3
 800a88e:	69bb      	ldr	r3, [r7, #24]
 800a890:	2b00      	cmp	r3, #0
 800a892:	da00      	bge.n	800a896 <compensate_pressure+0x92>
 800a894:	3303      	adds	r3, #3
 800a896:	109b      	asrs	r3, r3, #2
 800a898:	0019      	movs	r1, r3
 800a89a:	69bb      	ldr	r3, [r7, #24]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	da00      	bge.n	800a8a2 <compensate_pressure+0x9e>
 800a8a0:	3303      	adds	r3, #3
 800a8a2:	109b      	asrs	r3, r3, #2
 800a8a4:	434b      	muls	r3, r1
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	da02      	bge.n	800a8b0 <compensate_pressure+0xac>
 800a8aa:	4952      	ldr	r1, [pc, #328]	@ (800a9f4 <compensate_pressure+0x1f0>)
 800a8ac:	468c      	mov	ip, r1
 800a8ae:	4463      	add	r3, ip
 800a8b0:	135b      	asrs	r3, r3, #13
 800a8b2:	4353      	muls	r3, r2
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	da00      	bge.n	800a8ba <compensate_pressure+0xb6>
 800a8b8:	3307      	adds	r3, #7
 800a8ba:	10db      	asrs	r3, r3, #3
 800a8bc:	613b      	str	r3, [r7, #16]
    var4 = (((int32_t)calib_data->dig_p2) * var1) / 2;
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	2208      	movs	r2, #8
 800a8c2:	5e9b      	ldrsh	r3, [r3, r2]
 800a8c4:	001a      	movs	r2, r3
 800a8c6:	69bb      	ldr	r3, [r7, #24]
 800a8c8:	4353      	muls	r3, r2
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	da00      	bge.n	800a8d0 <compensate_pressure+0xcc>
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	105b      	asrs	r3, r3, #1
 800a8d2:	60fb      	str	r3, [r7, #12]
    var1 = (var3 + var4) / 262144;
 800a8d4:	693a      	ldr	r2, [r7, #16]
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	18d3      	adds	r3, r2, r3
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	da02      	bge.n	800a8e4 <compensate_pressure+0xe0>
 800a8de:	4a46      	ldr	r2, [pc, #280]	@ (800a9f8 <compensate_pressure+0x1f4>)
 800a8e0:	4694      	mov	ip, r2
 800a8e2:	4463      	add	r3, ip
 800a8e4:	149b      	asrs	r3, r3, #18
 800a8e6:	61bb      	str	r3, [r7, #24]
    var1 = (((32768 + var1)) * ((int32_t)calib_data->dig_p1)) / 32768;
 800a8e8:	69bb      	ldr	r3, [r7, #24]
 800a8ea:	2280      	movs	r2, #128	@ 0x80
 800a8ec:	0212      	lsls	r2, r2, #8
 800a8ee:	4694      	mov	ip, r2
 800a8f0:	4463      	add	r3, ip
 800a8f2:	683a      	ldr	r2, [r7, #0]
 800a8f4:	88d2      	ldrh	r2, [r2, #6]
 800a8f6:	4353      	muls	r3, r2
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	da02      	bge.n	800a902 <compensate_pressure+0xfe>
 800a8fc:	4a3f      	ldr	r2, [pc, #252]	@ (800a9fc <compensate_pressure+0x1f8>)
 800a8fe:	4694      	mov	ip, r2
 800a900:	4463      	add	r3, ip
 800a902:	13db      	asrs	r3, r3, #15
 800a904:	61bb      	str	r3, [r7, #24]

    /* avoid exception caused by division by zero */
    if (var1)
 800a906:	69bb      	ldr	r3, [r7, #24]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d064      	beq.n	800a9d6 <compensate_pressure+0x1d2>
    {
        var5 = (uint32_t)((uint32_t)1048576) - uncomp_data->pressure;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	2280      	movs	r2, #128	@ 0x80
 800a912:	0352      	lsls	r2, r2, #13
 800a914:	1ad3      	subs	r3, r2, r3
 800a916:	60bb      	str	r3, [r7, #8]
        pressure = ((uint32_t)(var5 - (uint32_t)(var2 / 4096))) * 3125;
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	da02      	bge.n	800a924 <compensate_pressure+0x120>
 800a91e:	4a38      	ldr	r2, [pc, #224]	@ (800aa00 <compensate_pressure+0x1fc>)
 800a920:	4694      	mov	ip, r2
 800a922:	4463      	add	r3, ip
 800a924:	131b      	asrs	r3, r3, #12
 800a926:	001a      	movs	r2, r3
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	1a9b      	subs	r3, r3, r2
 800a92c:	4a35      	ldr	r2, [pc, #212]	@ (800aa04 <compensate_pressure+0x200>)
 800a92e:	4353      	muls	r3, r2
 800a930:	627b      	str	r3, [r7, #36]	@ 0x24

        if (pressure < 0x80000000)
 800a932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a934:	2b00      	cmp	r3, #0
 800a936:	db09      	blt.n	800a94c <compensate_pressure+0x148>
        {
            pressure = (pressure << 1) / ((uint32_t)var1);
 800a938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a93a:	005b      	lsls	r3, r3, #1
 800a93c:	69ba      	ldr	r2, [r7, #24]
 800a93e:	0011      	movs	r1, r2
 800a940:	0018      	movs	r0, r3
 800a942:	f7f5 fbfd 	bl	8000140 <__udivsi3>
 800a946:	0003      	movs	r3, r0
 800a948:	627b      	str	r3, [r7, #36]	@ 0x24
 800a94a:	e007      	b.n	800a95c <compensate_pressure+0x158>
        }
        else
        {
            pressure = (pressure / (uint32_t)var1) * 2;
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	0019      	movs	r1, r3
 800a950:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a952:	f7f5 fbf5 	bl	8000140 <__udivsi3>
 800a956:	0003      	movs	r3, r0
 800a958:	005b      	lsls	r3, r3, #1
 800a95a:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        var1 = (((int32_t)calib_data->dig_p9) * ((int32_t)(((pressure / 8) * (pressure / 8)) / 8192))) / 4096;
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	2216      	movs	r2, #22
 800a960:	5e9b      	ldrsh	r3, [r3, r2]
 800a962:	0019      	movs	r1, r3
 800a964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a966:	08db      	lsrs	r3, r3, #3
 800a968:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a96a:	08d2      	lsrs	r2, r2, #3
 800a96c:	4353      	muls	r3, r2
 800a96e:	0b5b      	lsrs	r3, r3, #13
 800a970:	434b      	muls	r3, r1
 800a972:	2b00      	cmp	r3, #0
 800a974:	da02      	bge.n	800a97c <compensate_pressure+0x178>
 800a976:	4a22      	ldr	r2, [pc, #136]	@ (800aa00 <compensate_pressure+0x1fc>)
 800a978:	4694      	mov	ip, r2
 800a97a:	4463      	add	r3, ip
 800a97c:	131b      	asrs	r3, r3, #12
 800a97e:	61bb      	str	r3, [r7, #24]
        var2 = (((int32_t)(pressure / 4)) * ((int32_t)calib_data->dig_p8)) / 8192;
 800a980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a982:	089b      	lsrs	r3, r3, #2
 800a984:	001a      	movs	r2, r3
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	2114      	movs	r1, #20
 800a98a:	5e5b      	ldrsh	r3, [r3, r1]
 800a98c:	4353      	muls	r3, r2
 800a98e:	2b00      	cmp	r3, #0
 800a990:	da02      	bge.n	800a998 <compensate_pressure+0x194>
 800a992:	4a18      	ldr	r2, [pc, #96]	@ (800a9f4 <compensate_pressure+0x1f0>)
 800a994:	4694      	mov	ip, r2
 800a996:	4463      	add	r3, ip
 800a998:	135b      	asrs	r3, r3, #13
 800a99a:	617b      	str	r3, [r7, #20]
        pressure = (uint32_t)((int32_t)pressure + ((var1 + var2 + calib_data->dig_p7) / 16));
 800a99c:	69ba      	ldr	r2, [r7, #24]
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	18d3      	adds	r3, r2, r3
 800a9a2:	683a      	ldr	r2, [r7, #0]
 800a9a4:	2112      	movs	r1, #18
 800a9a6:	5e52      	ldrsh	r2, [r2, r1]
 800a9a8:	189b      	adds	r3, r3, r2
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	da00      	bge.n	800a9b0 <compensate_pressure+0x1ac>
 800a9ae:	330f      	adds	r3, #15
 800a9b0:	111b      	asrs	r3, r3, #4
 800a9b2:	001a      	movs	r2, r3
 800a9b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b6:	18d3      	adds	r3, r2, r3
 800a9b8:	627b      	str	r3, [r7, #36]	@ 0x24

        if (pressure < pressure_min)
 800a9ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9bc:	6a3b      	ldr	r3, [r7, #32]
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d202      	bcs.n	800a9c8 <compensate_pressure+0x1c4>
        {
            pressure = pressure_min;
 800a9c2:	6a3b      	ldr	r3, [r7, #32]
 800a9c4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9c6:	e008      	b.n	800a9da <compensate_pressure+0x1d6>
        }
        else if (pressure > pressure_max)
 800a9c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9ca:	69fb      	ldr	r3, [r7, #28]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d904      	bls.n	800a9da <compensate_pressure+0x1d6>
        {
            pressure = pressure_max;
 800a9d0:	69fb      	ldr	r3, [r7, #28]
 800a9d2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9d4:	e001      	b.n	800a9da <compensate_pressure+0x1d6>
        }
    }
    else
    {
        pressure = pressure_min;
 800a9d6:	6a3b      	ldr	r3, [r7, #32]
 800a9d8:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return pressure;
 800a9da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a9dc:	0018      	movs	r0, r3
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	b00a      	add	sp, #40	@ 0x28
 800a9e2:	bd80      	pop	{r7, pc}
 800a9e4:	00007530 	.word	0x00007530
 800a9e8:	0001adb0 	.word	0x0001adb0
 800a9ec:	ffff0600 	.word	0xffff0600
 800a9f0:	000007ff 	.word	0x000007ff
 800a9f4:	00001fff 	.word	0x00001fff
 800a9f8:	0003ffff 	.word	0x0003ffff
 800a9fc:	00007fff 	.word	0x00007fff
 800aa00:	00000fff 	.word	0x00000fff
 800aa04:	00000c35 	.word	0x00000c35

0800aa08 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                    const struct bme280_calib_data *calib_data)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b08a      	sub	sp, #40	@ 0x28
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]
    int32_t var2;
    int32_t var3;
    int32_t var4;
    int32_t var5;
    uint32_t humidity;
    uint32_t humidity_max = 102400;
 800aa12:	23c8      	movs	r3, #200	@ 0xc8
 800aa14:	025b      	lsls	r3, r3, #9
 800aa16:	623b      	str	r3, [r7, #32]

    var1 = calib_data->t_fine - ((int32_t)76800);
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa1c:	4a53      	ldr	r2, [pc, #332]	@ (800ab6c <compensate_humidity+0x164>)
 800aa1e:	4694      	mov	ip, r2
 800aa20:	4463      	add	r3, ip
 800aa22:	61fb      	str	r3, [r7, #28]
    var2 = (int32_t)(uncomp_data->humidity * 16384);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	689b      	ldr	r3, [r3, #8]
 800aa28:	039b      	lsls	r3, r3, #14
 800aa2a:	61bb      	str	r3, [r7, #24]
    var3 = (int32_t)(((int32_t)calib_data->dig_h4) * 1048576);
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	221e      	movs	r2, #30
 800aa30:	5e9b      	ldrsh	r3, [r3, r2]
 800aa32:	051b      	lsls	r3, r3, #20
 800aa34:	617b      	str	r3, [r7, #20]
    var4 = ((int32_t)calib_data->dig_h5) * var1;
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	2220      	movs	r2, #32
 800aa3a:	5e9b      	ldrsh	r3, [r3, r2]
 800aa3c:	001a      	movs	r2, r3
 800aa3e:	69fb      	ldr	r3, [r7, #28]
 800aa40:	4353      	muls	r3, r2
 800aa42:	613b      	str	r3, [r7, #16]
    var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 800aa44:	69ba      	ldr	r2, [r7, #24]
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	1ad2      	subs	r2, r2, r3
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	1ad3      	subs	r3, r2, r3
 800aa4e:	2280      	movs	r2, #128	@ 0x80
 800aa50:	01d2      	lsls	r2, r2, #7
 800aa52:	4694      	mov	ip, r2
 800aa54:	4463      	add	r3, ip
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	da02      	bge.n	800aa60 <compensate_humidity+0x58>
 800aa5a:	4a45      	ldr	r2, [pc, #276]	@ (800ab70 <compensate_humidity+0x168>)
 800aa5c:	4694      	mov	ip, r2
 800aa5e:	4463      	add	r3, ip
 800aa60:	13db      	asrs	r3, r3, #15
 800aa62:	60fb      	str	r3, [r7, #12]
    var2 = (var1 * ((int32_t)calib_data->dig_h6)) / 1024;
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	2222      	movs	r2, #34	@ 0x22
 800aa68:	569b      	ldrsb	r3, [r3, r2]
 800aa6a:	001a      	movs	r2, r3
 800aa6c:	69fb      	ldr	r3, [r7, #28]
 800aa6e:	4353      	muls	r3, r2
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	da02      	bge.n	800aa7a <compensate_humidity+0x72>
 800aa74:	4a3f      	ldr	r2, [pc, #252]	@ (800ab74 <compensate_humidity+0x16c>)
 800aa76:	4694      	mov	ip, r2
 800aa78:	4463      	add	r3, ip
 800aa7a:	129b      	asrs	r3, r3, #10
 800aa7c:	61bb      	str	r3, [r7, #24]
    var3 = (var1 * ((int32_t)calib_data->dig_h3)) / 2048;
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	7f1b      	ldrb	r3, [r3, #28]
 800aa82:	001a      	movs	r2, r3
 800aa84:	69fb      	ldr	r3, [r7, #28]
 800aa86:	4353      	muls	r3, r2
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	da02      	bge.n	800aa92 <compensate_humidity+0x8a>
 800aa8c:	4a3a      	ldr	r2, [pc, #232]	@ (800ab78 <compensate_humidity+0x170>)
 800aa8e:	4694      	mov	ip, r2
 800aa90:	4463      	add	r3, ip
 800aa92:	12db      	asrs	r3, r3, #11
 800aa94:	617b      	str	r3, [r7, #20]
    var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	2280      	movs	r2, #128	@ 0x80
 800aa9a:	0212      	lsls	r2, r2, #8
 800aa9c:	4694      	mov	ip, r2
 800aa9e:	4463      	add	r3, ip
 800aaa0:	69ba      	ldr	r2, [r7, #24]
 800aaa2:	4353      	muls	r3, r2
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	da02      	bge.n	800aaae <compensate_humidity+0xa6>
 800aaa8:	4a32      	ldr	r2, [pc, #200]	@ (800ab74 <compensate_humidity+0x16c>)
 800aaaa:	4694      	mov	ip, r2
 800aaac:	4463      	add	r3, ip
 800aaae:	129b      	asrs	r3, r3, #10
 800aab0:	2280      	movs	r2, #128	@ 0x80
 800aab2:	0392      	lsls	r2, r2, #14
 800aab4:	4694      	mov	ip, r2
 800aab6:	4463      	add	r3, ip
 800aab8:	613b      	str	r3, [r7, #16]
    var2 = ((var4 * ((int32_t)calib_data->dig_h2)) + 8192) / 16384;
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	221a      	movs	r2, #26
 800aabe:	5e9b      	ldrsh	r3, [r3, r2]
 800aac0:	001a      	movs	r2, r3
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	4353      	muls	r3, r2
 800aac6:	2280      	movs	r2, #128	@ 0x80
 800aac8:	0192      	lsls	r2, r2, #6
 800aaca:	4694      	mov	ip, r2
 800aacc:	4463      	add	r3, ip
 800aace:	2b00      	cmp	r3, #0
 800aad0:	da02      	bge.n	800aad8 <compensate_humidity+0xd0>
 800aad2:	4a2a      	ldr	r2, [pc, #168]	@ (800ab7c <compensate_humidity+0x174>)
 800aad4:	4694      	mov	ip, r2
 800aad6:	4463      	add	r3, ip
 800aad8:	139b      	asrs	r3, r3, #14
 800aada:	61bb      	str	r3, [r7, #24]
    var3 = var5 * var2;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	69ba      	ldr	r2, [r7, #24]
 800aae0:	4353      	muls	r3, r2
 800aae2:	617b      	str	r3, [r7, #20]
    var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	da02      	bge.n	800aaf0 <compensate_humidity+0xe8>
 800aaea:	4a21      	ldr	r2, [pc, #132]	@ (800ab70 <compensate_humidity+0x168>)
 800aaec:	4694      	mov	ip, r2
 800aaee:	4463      	add	r3, ip
 800aaf0:	13db      	asrs	r3, r3, #15
 800aaf2:	001a      	movs	r2, r3
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	da02      	bge.n	800ab00 <compensate_humidity+0xf8>
 800aafa:	491d      	ldr	r1, [pc, #116]	@ (800ab70 <compensate_humidity+0x168>)
 800aafc:	468c      	mov	ip, r1
 800aafe:	4463      	add	r3, ip
 800ab00:	13db      	asrs	r3, r3, #15
 800ab02:	4353      	muls	r3, r2
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	da00      	bge.n	800ab0a <compensate_humidity+0x102>
 800ab08:	337f      	adds	r3, #127	@ 0x7f
 800ab0a:	11db      	asrs	r3, r3, #7
 800ab0c:	613b      	str	r3, [r7, #16]
    var5 = var3 - ((var4 * ((int32_t)calib_data->dig_h1)) / 16);
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	7e1b      	ldrb	r3, [r3, #24]
 800ab12:	001a      	movs	r2, r3
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	4353      	muls	r3, r2
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	da00      	bge.n	800ab1e <compensate_humidity+0x116>
 800ab1c:	330f      	adds	r3, #15
 800ab1e:	111b      	asrs	r3, r3, #4
 800ab20:	425b      	negs	r3, r3
 800ab22:	001a      	movs	r2, r3
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	189b      	adds	r3, r3, r2
 800ab28:	60fb      	str	r3, [r7, #12]
    var5 = (var5 < 0 ? 0 : var5);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	da00      	bge.n	800ab32 <compensate_humidity+0x12a>
 800ab30:	2300      	movs	r3, #0
 800ab32:	60fb      	str	r3, [r7, #12]
    var5 = (var5 > 419430400 ? 419430400 : var5);
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	22c8      	movs	r2, #200	@ 0xc8
 800ab38:	0552      	lsls	r2, r2, #21
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	dd01      	ble.n	800ab42 <compensate_humidity+0x13a>
 800ab3e:	23c8      	movs	r3, #200	@ 0xc8
 800ab40:	055b      	lsls	r3, r3, #21
 800ab42:	60fb      	str	r3, [r7, #12]
    humidity = (uint32_t)(var5 / 4096);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	da02      	bge.n	800ab50 <compensate_humidity+0x148>
 800ab4a:	4a0d      	ldr	r2, [pc, #52]	@ (800ab80 <compensate_humidity+0x178>)
 800ab4c:	4694      	mov	ip, r2
 800ab4e:	4463      	add	r3, ip
 800ab50:	131b      	asrs	r3, r3, #12
 800ab52:	627b      	str	r3, [r7, #36]	@ 0x24

    if (humidity > humidity_max)
 800ab54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab56:	6a3b      	ldr	r3, [r7, #32]
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d901      	bls.n	800ab60 <compensate_humidity+0x158>
    {
        humidity = humidity_max;
 800ab5c:	6a3b      	ldr	r3, [r7, #32]
 800ab5e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return humidity;
 800ab60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ab62:	0018      	movs	r0, r3
 800ab64:	46bd      	mov	sp, r7
 800ab66:	b00a      	add	sp, #40	@ 0x28
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	46c0      	nop			@ (mov r8, r8)
 800ab6c:	fffed400 	.word	0xfffed400
 800ab70:	00007fff 	.word	0x00007fff
 800ab74:	000003ff 	.word	0x000003ff
 800ab78:	000007ff 	.word	0x000007ff
 800ab7c:	00003fff 	.word	0x00003fff
 800ab80:	00000fff 	.word	0x00000fff

0800ab84 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 800ab84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab86:	b08b      	sub	sp, #44	@ 0x2c
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 800ab8c:	2626      	movs	r6, #38	@ 0x26
 800ab8e:	19bb      	adds	r3, r7, r6
 800ab90:	2288      	movs	r2, #136	@ 0x88
 800ab92:	701a      	strb	r2, [r3, #0]

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 800ab94:	250c      	movs	r5, #12
 800ab96:	197b      	adds	r3, r7, r5
 800ab98:	2200      	movs	r2, #0
 800ab9a:	601a      	str	r2, [r3, #0]
 800ab9c:	3304      	adds	r3, #4
 800ab9e:	2216      	movs	r2, #22
 800aba0:	2100      	movs	r1, #0
 800aba2:	0018      	movs	r0, r3
 800aba4:	f002 ffbc 	bl	800db20 <memset>

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 800aba8:	2427      	movs	r4, #39	@ 0x27
 800abaa:	193c      	adds	r4, r7, r4
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	1979      	adds	r1, r7, r5
 800abb0:	19bb      	adds	r3, r7, r6
 800abb2:	7818      	ldrb	r0, [r3, #0]
 800abb4:	0013      	movs	r3, r2
 800abb6:	221a      	movs	r2, #26
 800abb8:	f7fe ffce 	bl	8009b58 <bme280_get_regs>
 800abbc:	0003      	movs	r3, r0
 800abbe:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 800abc0:	2427      	movs	r4, #39	@ 0x27
 800abc2:	193b      	adds	r3, r7, r4
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	b25b      	sxtb	r3, r3
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d11f      	bne.n	800ac0c <get_calib_data+0x88>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	197b      	adds	r3, r7, r5
 800abd0:	0011      	movs	r1, r2
 800abd2:	0018      	movs	r0, r3
 800abd4:	f000 f85a 	bl	800ac8c <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 800abd8:	19bb      	adds	r3, r7, r6
 800abda:	22e1      	movs	r2, #225	@ 0xe1
 800abdc:	701a      	strb	r2, [r3, #0]

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 800abde:	193c      	adds	r4, r7, r4
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	1979      	adds	r1, r7, r5
 800abe4:	19bb      	adds	r3, r7, r6
 800abe6:	7818      	ldrb	r0, [r3, #0]
 800abe8:	0013      	movs	r3, r2
 800abea:	2207      	movs	r2, #7
 800abec:	f7fe ffb4 	bl	8009b58 <bme280_get_regs>
 800abf0:	0003      	movs	r3, r0
 800abf2:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 800abf4:	2427      	movs	r4, #39	@ 0x27
 800abf6:	193b      	adds	r3, r7, r4
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	b25b      	sxtb	r3, r3
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d105      	bne.n	800ac0c <get_calib_data+0x88>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	197b      	adds	r3, r7, r5
 800ac04:	0011      	movs	r1, r2
 800ac06:	0018      	movs	r0, r3
 800ac08:	f000 f8ee 	bl	800ade8 <parse_humidity_calib_data>
        }
    }

    return rslt;
 800ac0c:	2327      	movs	r3, #39	@ 0x27
 800ac0e:	18fb      	adds	r3, r7, r3
 800ac10:	781b      	ldrb	r3, [r3, #0]
 800ac12:	b25b      	sxtb	r3, r3
}
 800ac14:	0018      	movs	r0, r3
 800ac16:	46bd      	mov	sp, r7
 800ac18:	b00b      	add	sp, #44	@ 0x2c
 800ac1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac1c <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b086      	sub	sp, #24
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	60b9      	str	r1, [r7, #8]
 800ac26:	607a      	str	r2, [r7, #4]
 800ac28:	001a      	movs	r2, r3
 800ac2a:	1cfb      	adds	r3, r7, #3
 800ac2c:	701a      	strb	r2, [r3, #0]
    uint8_t index;

    for (index = 1; index < len; index++)
 800ac2e:	2317      	movs	r3, #23
 800ac30:	18fb      	adds	r3, r7, r3
 800ac32:	2201      	movs	r2, #1
 800ac34:	701a      	strb	r2, [r3, #0]
 800ac36:	e01d      	b.n	800ac74 <interleave_reg_addr+0x58>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 800ac38:	2017      	movs	r0, #23
 800ac3a:	183b      	adds	r3, r7, r0
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	68fa      	ldr	r2, [r7, #12]
 800ac40:	18d2      	adds	r2, r2, r3
 800ac42:	183b      	adds	r3, r7, r0
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	005b      	lsls	r3, r3, #1
 800ac48:	3b01      	subs	r3, #1
 800ac4a:	68b9      	ldr	r1, [r7, #8]
 800ac4c:	18cb      	adds	r3, r1, r3
 800ac4e:	7812      	ldrb	r2, [r2, #0]
 800ac50:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 800ac52:	183b      	adds	r3, r7, r0
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	687a      	ldr	r2, [r7, #4]
 800ac58:	18d2      	adds	r2, r2, r3
 800ac5a:	183b      	adds	r3, r7, r0
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	005b      	lsls	r3, r3, #1
 800ac60:	0019      	movs	r1, r3
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	185b      	adds	r3, r3, r1
 800ac66:	7812      	ldrb	r2, [r2, #0]
 800ac68:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800ac6a:	183b      	adds	r3, r7, r0
 800ac6c:	781a      	ldrb	r2, [r3, #0]
 800ac6e:	183b      	adds	r3, r7, r0
 800ac70:	3201      	adds	r2, #1
 800ac72:	701a      	strb	r2, [r3, #0]
 800ac74:	2317      	movs	r3, #23
 800ac76:	18fa      	adds	r2, r7, r3
 800ac78:	1cfb      	adds	r3, r7, #3
 800ac7a:	7812      	ldrb	r2, [r2, #0]
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d3da      	bcc.n	800ac38 <interleave_reg_addr+0x1c>
    }
}
 800ac82:	46c0      	nop			@ (mov r8, r8)
 800ac84:	46c0      	nop			@ (mov r8, r8)
 800ac86:	46bd      	mov	sp, r7
 800ac88:	b006      	add	sp, #24
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b084      	sub	sp, #16
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	3318      	adds	r3, #24
 800ac9a:	60fb      	str	r3, [r7, #12]

    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	3301      	adds	r3, #1
 800aca0:	781b      	ldrb	r3, [r3, #0]
 800aca2:	021b      	lsls	r3, r3, #8
 800aca4:	b21a      	sxth	r2, r3
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	b21b      	sxth	r3, r3
 800acac:	4313      	orrs	r3, r2
 800acae:	b21b      	sxth	r3, r3
 800acb0:	b29a      	uxth	r2, r3
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	801a      	strh	r2, [r3, #0]
    calib_data->dig_t2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	3303      	adds	r3, #3
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	021b      	lsls	r3, r3, #8
 800acbe:	b21a      	sxth	r2, r3
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	3302      	adds	r3, #2
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	b21b      	sxth	r3, r3
 800acc8:	4313      	orrs	r3, r2
 800acca:	b21a      	sxth	r2, r3
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	805a      	strh	r2, [r3, #2]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	3305      	adds	r3, #5
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	021b      	lsls	r3, r3, #8
 800acd8:	b21a      	sxth	r2, r3
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	3304      	adds	r3, #4
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	b21b      	sxth	r3, r3
 800ace2:	4313      	orrs	r3, r2
 800ace4:	b21a      	sxth	r2, r3
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	809a      	strh	r2, [r3, #4]
    calib_data->dig_p1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	3307      	adds	r3, #7
 800acee:	781b      	ldrb	r3, [r3, #0]
 800acf0:	021b      	lsls	r3, r3, #8
 800acf2:	b21a      	sxth	r2, r3
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	3306      	adds	r3, #6
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	b21b      	sxth	r3, r3
 800acfc:	4313      	orrs	r3, r2
 800acfe:	b21b      	sxth	r3, r3
 800ad00:	b29a      	uxth	r2, r3
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	80da      	strh	r2, [r3, #6]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	3309      	adds	r3, #9
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	021b      	lsls	r3, r3, #8
 800ad0e:	b21a      	sxth	r2, r3
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	3308      	adds	r3, #8
 800ad14:	781b      	ldrb	r3, [r3, #0]
 800ad16:	b21b      	sxth	r3, r3
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	b21a      	sxth	r2, r3
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	811a      	strh	r2, [r3, #8]
    calib_data->dig_p3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	330b      	adds	r3, #11
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	021b      	lsls	r3, r3, #8
 800ad28:	b21a      	sxth	r2, r3
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	330a      	adds	r3, #10
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	b21b      	sxth	r3, r3
 800ad32:	4313      	orrs	r3, r2
 800ad34:	b21a      	sxth	r2, r3
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	815a      	strh	r2, [r3, #10]
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	330d      	adds	r3, #13
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	021b      	lsls	r3, r3, #8
 800ad42:	b21a      	sxth	r2, r3
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	330c      	adds	r3, #12
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	b21b      	sxth	r3, r3
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	b21a      	sxth	r2, r3
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	819a      	strh	r2, [r3, #12]
    calib_data->dig_p5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	330f      	adds	r3, #15
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	021b      	lsls	r3, r3, #8
 800ad5c:	b21a      	sxth	r2, r3
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	330e      	adds	r3, #14
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	b21b      	sxth	r3, r3
 800ad66:	4313      	orrs	r3, r2
 800ad68:	b21a      	sxth	r2, r3
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	81da      	strh	r2, [r3, #14]
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	3311      	adds	r3, #17
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	021b      	lsls	r3, r3, #8
 800ad76:	b21a      	sxth	r2, r3
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	3310      	adds	r3, #16
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	b21b      	sxth	r3, r3
 800ad80:	4313      	orrs	r3, r2
 800ad82:	b21a      	sxth	r2, r3
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	821a      	strh	r2, [r3, #16]
    calib_data->dig_p7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	3313      	adds	r3, #19
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	021b      	lsls	r3, r3, #8
 800ad90:	b21a      	sxth	r2, r3
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	3312      	adds	r3, #18
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	b21b      	sxth	r3, r3
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	b21a      	sxth	r2, r3
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	825a      	strh	r2, [r3, #18]
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	3315      	adds	r3, #21
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	021b      	lsls	r3, r3, #8
 800adaa:	b21a      	sxth	r2, r3
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	3314      	adds	r3, #20
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	b21b      	sxth	r3, r3
 800adb4:	4313      	orrs	r3, r2
 800adb6:	b21a      	sxth	r2, r3
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	829a      	strh	r2, [r3, #20]
    calib_data->dig_p9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	3317      	adds	r3, #23
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	021b      	lsls	r3, r3, #8
 800adc4:	b21a      	sxth	r2, r3
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	3316      	adds	r3, #22
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	b21b      	sxth	r3, r3
 800adce:	4313      	orrs	r3, r2
 800add0:	b21a      	sxth	r2, r3
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	82da      	strh	r2, [r3, #22]
    calib_data->dig_h1 = reg_data[25];
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	3319      	adds	r3, #25
 800adda:	781a      	ldrb	r2, [r3, #0]
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	761a      	strb	r2, [r3, #24]
}
 800ade0:	46c0      	nop			@ (mov r8, r8)
 800ade2:	46bd      	mov	sp, r7
 800ade4:	b004      	add	sp, #16
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800ade8:	b590      	push	{r4, r7, lr}
 800adea:	b087      	sub	sp, #28
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	3318      	adds	r3, #24
 800adf6:	617b      	str	r3, [r7, #20]
    int16_t dig_h4_lsb;
    int16_t dig_h4_msb;
    int16_t dig_h5_lsb;
    int16_t dig_h5_msb;

    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	3301      	adds	r3, #1
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	021b      	lsls	r3, r3, #8
 800ae00:	b21a      	sxth	r2, r3
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	b21b      	sxth	r3, r3
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	b21a      	sxth	r2, r3
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	835a      	strh	r2, [r3, #26]
    calib_data->dig_h3 = reg_data[2];
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	3302      	adds	r3, #2
 800ae14:	781a      	ldrb	r2, [r3, #0]
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	771a      	strb	r2, [r3, #28]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	3303      	adds	r3, #3
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	b25b      	sxtb	r3, r3
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	011b      	lsls	r3, r3, #4
 800ae26:	b29a      	uxth	r2, r3
 800ae28:	2012      	movs	r0, #18
 800ae2a:	183b      	adds	r3, r7, r0
 800ae2c:	801a      	strh	r2, [r3, #0]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	3304      	adds	r3, #4
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	b21a      	sxth	r2, r3
 800ae36:	2410      	movs	r4, #16
 800ae38:	193b      	adds	r3, r7, r4
 800ae3a:	210f      	movs	r1, #15
 800ae3c:	400a      	ands	r2, r1
 800ae3e:	801a      	strh	r2, [r3, #0]
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 800ae40:	183a      	adds	r2, r7, r0
 800ae42:	193b      	adds	r3, r7, r4
 800ae44:	8812      	ldrh	r2, [r2, #0]
 800ae46:	881b      	ldrh	r3, [r3, #0]
 800ae48:	4313      	orrs	r3, r2
 800ae4a:	b21a      	sxth	r2, r3
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	83da      	strh	r2, [r3, #30]
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	3305      	adds	r3, #5
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	b25b      	sxtb	r3, r3
 800ae58:	b29b      	uxth	r3, r3
 800ae5a:	011b      	lsls	r3, r3, #4
 800ae5c:	b29a      	uxth	r2, r3
 800ae5e:	210e      	movs	r1, #14
 800ae60:	187b      	adds	r3, r7, r1
 800ae62:	801a      	strh	r2, [r3, #0]
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	3304      	adds	r3, #4
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	091b      	lsrs	r3, r3, #4
 800ae6c:	b2da      	uxtb	r2, r3
 800ae6e:	200c      	movs	r0, #12
 800ae70:	183b      	adds	r3, r7, r0
 800ae72:	801a      	strh	r2, [r3, #0]
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 800ae74:	187a      	adds	r2, r7, r1
 800ae76:	183b      	adds	r3, r7, r0
 800ae78:	8812      	ldrh	r2, [r2, #0]
 800ae7a:	881b      	ldrh	r3, [r3, #0]
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	b21a      	sxth	r2, r3
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	841a      	strh	r2, [r3, #32]
    calib_data->dig_h6 = (int8_t)reg_data[6];
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	3306      	adds	r3, #6
 800ae88:	781b      	ldrb	r3, [r3, #0]
 800ae8a:	b259      	sxtb	r1, r3
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	2222      	movs	r2, #34	@ 0x22
 800ae90:	5499      	strb	r1, [r3, r2]
}
 800ae92:	46c0      	nop			@ (mov r8, r8)
 800ae94:	46bd      	mov	sp, r7
 800ae96:	b007      	add	sp, #28
 800ae98:	bd90      	pop	{r4, r7, pc}

0800ae9a <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 800ae9a:	b580      	push	{r7, lr}
 800ae9c:	b084      	sub	sp, #16
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	0002      	movs	r2, r0
 800aea2:	1dfb      	adds	r3, r7, #7
 800aea4:	701a      	strb	r2, [r3, #0]
 800aea6:	1dbb      	adds	r3, r7, #6
 800aea8:	1c0a      	adds	r2, r1, #0
 800aeaa:	701a      	strb	r2, [r3, #0]
    uint8_t settings_changed = FALSE;
 800aeac:	210f      	movs	r1, #15
 800aeae:	187b      	adds	r3, r7, r1
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	701a      	strb	r2, [r3, #0]

    if (sub_settings & desired_settings)
 800aeb4:	1dfb      	adds	r3, r7, #7
 800aeb6:	1dba      	adds	r2, r7, #6
 800aeb8:	781b      	ldrb	r3, [r3, #0]
 800aeba:	7812      	ldrb	r2, [r2, #0]
 800aebc:	4013      	ands	r3, r2
 800aebe:	b2db      	uxtb	r3, r3
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d003      	beq.n	800aecc <are_settings_changed+0x32>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 800aec4:	187b      	adds	r3, r7, r1
 800aec6:	2201      	movs	r2, #1
 800aec8:	701a      	strb	r2, [r3, #0]
 800aeca:	e003      	b.n	800aed4 <are_settings_changed+0x3a>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 800aecc:	230f      	movs	r3, #15
 800aece:	18fb      	adds	r3, r7, r3
 800aed0:	2200      	movs	r2, #0
 800aed2:	701a      	strb	r2, [r3, #0]
    }

    return settings_changed;
 800aed4:	230f      	movs	r3, #15
 800aed6:	18fb      	adds	r3, r7, r3
 800aed8:	781b      	ldrb	r3, [r3, #0]
}
 800aeda:	0018      	movs	r0, r3
 800aedc:	46bd      	mov	sp, r7
 800aede:	b004      	add	sp, #16
 800aee0:	bd80      	pop	{r7, pc}

0800aee2 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 800aee2:	b580      	push	{r7, lr}
 800aee4:	b084      	sub	sp, #16
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d00b      	beq.n	800af08 <null_ptr_check+0x26>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d007      	beq.n	800af08 <null_ptr_check+0x26>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	691b      	ldr	r3, [r3, #16]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d003      	beq.n	800af08 <null_ptr_check+0x26>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	695b      	ldr	r3, [r3, #20]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d104      	bne.n	800af12 <null_ptr_check+0x30>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 800af08:	230f      	movs	r3, #15
 800af0a:	18fb      	adds	r3, r7, r3
 800af0c:	22ff      	movs	r2, #255	@ 0xff
 800af0e:	701a      	strb	r2, [r3, #0]
 800af10:	e003      	b.n	800af1a <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 800af12:	230f      	movs	r3, #15
 800af14:	18fb      	adds	r3, r7, r3
 800af16:	2200      	movs	r2, #0
 800af18:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800af1a:	230f      	movs	r3, #15
 800af1c:	18fb      	adds	r3, r7, r3
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	b25b      	sxtb	r3, r3
}
 800af22:	0018      	movs	r0, r3
 800af24:	46bd      	mov	sp, r7
 800af26:	b004      	add	sp, #16
 800af28:	bd80      	pop	{r7, pc}

0800af2a <LL_SPI_IsActiveFlag_RXNE>:
{
 800af2a:	b580      	push	{r7, lr}
 800af2c:	b082      	sub	sp, #8
 800af2e:	af00      	add	r7, sp, #0
 800af30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	689b      	ldr	r3, [r3, #8]
 800af36:	2201      	movs	r2, #1
 800af38:	4013      	ands	r3, r2
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	d101      	bne.n	800af42 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800af3e:	2301      	movs	r3, #1
 800af40:	e000      	b.n	800af44 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800af42:	2300      	movs	r3, #0
}
 800af44:	0018      	movs	r0, r3
 800af46:	46bd      	mov	sp, r7
 800af48:	b002      	add	sp, #8
 800af4a:	bd80      	pop	{r7, pc}

0800af4c <LL_SPI_IsActiveFlag_TXE>:
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	689b      	ldr	r3, [r3, #8]
 800af58:	2202      	movs	r2, #2
 800af5a:	4013      	ands	r3, r2
 800af5c:	2b02      	cmp	r3, #2
 800af5e:	d101      	bne.n	800af64 <LL_SPI_IsActiveFlag_TXE+0x18>
 800af60:	2301      	movs	r3, #1
 800af62:	e000      	b.n	800af66 <LL_SPI_IsActiveFlag_TXE+0x1a>
 800af64:	2300      	movs	r3, #0
}
 800af66:	0018      	movs	r0, r3
 800af68:	46bd      	mov	sp, r7
 800af6a:	b002      	add	sp, #8
 800af6c:	bd80      	pop	{r7, pc}

0800af6e <LL_SPI_ReceiveData8>:
{
 800af6e:	b580      	push	{r7, lr}
 800af70:	b082      	sub	sp, #8
 800af72:	af00      	add	r7, sp, #0
 800af74:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	330c      	adds	r3, #12
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	b2db      	uxtb	r3, r3
}
 800af7e:	0018      	movs	r0, r3
 800af80:	46bd      	mov	sp, r7
 800af82:	b002      	add	sp, #8
 800af84:	bd80      	pop	{r7, pc}

0800af86 <LL_SPI_TransmitData8>:
{
 800af86:	b580      	push	{r7, lr}
 800af88:	b084      	sub	sp, #16
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	6078      	str	r0, [r7, #4]
 800af8e:	000a      	movs	r2, r1
 800af90:	1cfb      	adds	r3, r7, #3
 800af92:	701a      	strb	r2, [r3, #0]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	330c      	adds	r3, #12
 800af98:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	1cfa      	adds	r2, r7, #3
 800af9e:	7812      	ldrb	r2, [r2, #0]
 800afa0:	701a      	strb	r2, [r3, #0]
}
 800afa2:	46c0      	nop			@ (mov r8, r8)
 800afa4:	46bd      	mov	sp, r7
 800afa6:	b004      	add	sp, #16
 800afa8:	bd80      	pop	{r7, pc}

0800afaa <user_delay_us>:
inline static uint8_t SPI1_Readbyte(uint8_t reg_addr);
inline static void SPI1_Writebyte(uint8_t reg_addr, uint8_t val);


void user_delay_us(uint32_t period,void *intf_ptr)
{
 800afaa:	b580      	push	{r7, lr}
 800afac:	b082      	sub	sp, #8
 800afae:	af00      	add	r7, sp, #0
 800afb0:	6078      	str	r0, [r7, #4]
 800afb2:	6039      	str	r1, [r7, #0]
	HAL_Delay(period);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	0018      	movs	r0, r3
 800afb8:	f7fa ff24 	bl	8005e04 <HAL_Delay>
}
 800afbc:	46c0      	nop			@ (mov r8, r8)
 800afbe:	46bd      	mov	sp, r7
 800afc0:	b002      	add	sp, #8
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <SPI1_SendByte>:


inline static uint8_t SPI1_SendByte(uint8_t data)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b082      	sub	sp, #8
 800afc8:	af00      	add	r7, sp, #0
 800afca:	0002      	movs	r2, r0
 800afcc:	1dfb      	adds	r3, r7, #7
 800afce:	701a      	strb	r2, [r3, #0]
	while(LL_SPI_IsActiveFlag_TXE(SPI1)==RESET);
 800afd0:	46c0      	nop			@ (mov r8, r8)
 800afd2:	4b0e      	ldr	r3, [pc, #56]	@ (800b00c <SPI1_SendByte+0x48>)
 800afd4:	0018      	movs	r0, r3
 800afd6:	f7ff ffb9 	bl	800af4c <LL_SPI_IsActiveFlag_TXE>
 800afda:	1e03      	subs	r3, r0, #0
 800afdc:	d0f9      	beq.n	800afd2 <SPI1_SendByte+0xe>
	LL_SPI_TransmitData8(SPI1, data);
 800afde:	1dfb      	adds	r3, r7, #7
 800afe0:	781b      	ldrb	r3, [r3, #0]
 800afe2:	4a0a      	ldr	r2, [pc, #40]	@ (800b00c <SPI1_SendByte+0x48>)
 800afe4:	0019      	movs	r1, r3
 800afe6:	0010      	movs	r0, r2
 800afe8:	f7ff ffcd 	bl	800af86 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(SPI1)==RESET);
 800afec:	46c0      	nop			@ (mov r8, r8)
 800afee:	4b07      	ldr	r3, [pc, #28]	@ (800b00c <SPI1_SendByte+0x48>)
 800aff0:	0018      	movs	r0, r3
 800aff2:	f7ff ff9a 	bl	800af2a <LL_SPI_IsActiveFlag_RXNE>
 800aff6:	1e03      	subs	r3, r0, #0
 800aff8:	d0f9      	beq.n	800afee <SPI1_SendByte+0x2a>
	return LL_SPI_ReceiveData8(SPI1);
 800affa:	4b04      	ldr	r3, [pc, #16]	@ (800b00c <SPI1_SendByte+0x48>)
 800affc:	0018      	movs	r0, r3
 800affe:	f7ff ffb6 	bl	800af6e <LL_SPI_ReceiveData8>
 800b002:	0003      	movs	r3, r0
}
 800b004:	0018      	movs	r0, r3
 800b006:	46bd      	mov	sp, r7
 800b008:	b002      	add	sp, #8
 800b00a:	bd80      	pop	{r7, pc}
 800b00c:	40013000 	.word	0x40013000

0800b010 <user_spi_read>:
}



uint8_t user_spi_read(uint8_t reg_addr, uint8_t* data, uint8_t len, void *intf_ptr)
{
 800b010:	b590      	push	{r4, r7, lr}
 800b012:	b087      	sub	sp, #28
 800b014:	af00      	add	r7, sp, #0
 800b016:	60b9      	str	r1, [r7, #8]
 800b018:	0011      	movs	r1, r2
 800b01a:	607b      	str	r3, [r7, #4]
 800b01c:	230f      	movs	r3, #15
 800b01e:	18fb      	adds	r3, r7, r3
 800b020:	1c02      	adds	r2, r0, #0
 800b022:	701a      	strb	r2, [r3, #0]
 800b024:	230e      	movs	r3, #14
 800b026:	18fb      	adds	r3, r7, r3
 800b028:	1c0a      	adds	r2, r1, #0
 800b02a:	701a      	strb	r2, [r3, #0]
	unsigned int i = 0;
 800b02c:	2300      	movs	r3, #0
 800b02e:	617b      	str	r3, [r7, #20]
	if (!((SPI1)->CR1 & SPI_CR1_SPE)) {SPI1->CR1 |= SPI_CR1_SPE;}
 800b030:	4b18      	ldr	r3, [pc, #96]	@ (800b094 <user_spi_read+0x84>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	2240      	movs	r2, #64	@ 0x40
 800b036:	4013      	ands	r3, r2
 800b038:	d105      	bne.n	800b046 <user_spi_read+0x36>
 800b03a:	4b16      	ldr	r3, [pc, #88]	@ (800b094 <user_spi_read+0x84>)
 800b03c:	681a      	ldr	r2, [r3, #0]
 800b03e:	4b15      	ldr	r3, [pc, #84]	@ (800b094 <user_spi_read+0x84>)
 800b040:	2140      	movs	r1, #64	@ 0x40
 800b042:	430a      	orrs	r2, r1
 800b044:	601a      	str	r2, [r3, #0]
	CSB_L();
 800b046:	23a0      	movs	r3, #160	@ 0xa0
 800b048:	05db      	lsls	r3, r3, #23
 800b04a:	2280      	movs	r2, #128	@ 0x80
 800b04c:	04d2      	lsls	r2, r2, #19
 800b04e:	619a      	str	r2, [r3, #24]
	SPI1_SendByte(reg_addr); 	
 800b050:	230f      	movs	r3, #15
 800b052:	18fb      	adds	r3, r7, r3
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	0018      	movs	r0, r3
 800b058:	f7ff ffb4 	bl	800afc4 <SPI1_SendByte>
	while(i < len)
 800b05c:	e009      	b.n	800b072 <user_spi_read+0x62>
	{
		data[i++] = SPI1_SendByte(0x00); 	//Send DUMMY to read data
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	1c5a      	adds	r2, r3, #1
 800b062:	617a      	str	r2, [r7, #20]
 800b064:	68ba      	ldr	r2, [r7, #8]
 800b066:	18d4      	adds	r4, r2, r3
 800b068:	2000      	movs	r0, #0
 800b06a:	f7ff ffab 	bl	800afc4 <SPI1_SendByte>
 800b06e:	0003      	movs	r3, r0
 800b070:	7023      	strb	r3, [r4, #0]
	while(i < len)
 800b072:	230e      	movs	r3, #14
 800b074:	18fb      	adds	r3, r7, r3
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	697a      	ldr	r2, [r7, #20]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d3ef      	bcc.n	800b05e <user_spi_read+0x4e>
	}
	CSB_H();
 800b07e:	23a0      	movs	r3, #160	@ 0xa0
 800b080:	05db      	lsls	r3, r3, #23
 800b082:	2280      	movs	r2, #128	@ 0x80
 800b084:	00d2      	lsls	r2, r2, #3
 800b086:	619a      	str	r2, [r3, #24]
	return 0;
 800b088:	2300      	movs	r3, #0
}
 800b08a:	0018      	movs	r0, r3
 800b08c:	46bd      	mov	sp, r7
 800b08e:	b007      	add	sp, #28
 800b090:	bd90      	pop	{r4, r7, pc}
 800b092:	46c0      	nop			@ (mov r8, r8)
 800b094:	40013000 	.word	0x40013000

0800b098 <user_spi_write>:
}



uint8_t user_spi_write(uint8_t reg_addr, uint8_t* data, uint8_t len, void *intf_ptr)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b086      	sub	sp, #24
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	60b9      	str	r1, [r7, #8]
 800b0a0:	0011      	movs	r1, r2
 800b0a2:	607b      	str	r3, [r7, #4]
 800b0a4:	230f      	movs	r3, #15
 800b0a6:	18fb      	adds	r3, r7, r3
 800b0a8:	1c02      	adds	r2, r0, #0
 800b0aa:	701a      	strb	r2, [r3, #0]
 800b0ac:	230e      	movs	r3, #14
 800b0ae:	18fb      	adds	r3, r7, r3
 800b0b0:	1c0a      	adds	r2, r1, #0
 800b0b2:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0;
 800b0b4:	2317      	movs	r3, #23
 800b0b6:	18fb      	adds	r3, r7, r3
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	701a      	strb	r2, [r3, #0]
	if (!((SPI1)->CR1 & SPI_CR1_SPE)) {SPI1->CR1 |= SPI_CR1_SPE;}
 800b0bc:	4b1a      	ldr	r3, [pc, #104]	@ (800b128 <user_spi_write+0x90>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	2240      	movs	r2, #64	@ 0x40
 800b0c2:	4013      	ands	r3, r2
 800b0c4:	d105      	bne.n	800b0d2 <user_spi_write+0x3a>
 800b0c6:	4b18      	ldr	r3, [pc, #96]	@ (800b128 <user_spi_write+0x90>)
 800b0c8:	681a      	ldr	r2, [r3, #0]
 800b0ca:	4b17      	ldr	r3, [pc, #92]	@ (800b128 <user_spi_write+0x90>)
 800b0cc:	2140      	movs	r1, #64	@ 0x40
 800b0ce:	430a      	orrs	r2, r1
 800b0d0:	601a      	str	r2, [r3, #0]
	CSB_L();
 800b0d2:	23a0      	movs	r3, #160	@ 0xa0
 800b0d4:	05db      	lsls	r3, r3, #23
 800b0d6:	2280      	movs	r2, #128	@ 0x80
 800b0d8:	04d2      	lsls	r2, r2, #19
 800b0da:	619a      	str	r2, [r3, #24]
	SPI1_SendByte(reg_addr); 		
 800b0dc:	230f      	movs	r3, #15
 800b0de:	18fb      	adds	r3, r7, r3
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	0018      	movs	r0, r3
 800b0e4:	f7ff ff6e 	bl	800afc4 <SPI1_SendByte>
	while(i < len)
 800b0e8:	e00c      	b.n	800b104 <user_spi_write+0x6c>
	{
		SPI1_SendByte(data[i++]); 	//Send Data to write
 800b0ea:	2217      	movs	r2, #23
 800b0ec:	18bb      	adds	r3, r7, r2
 800b0ee:	781b      	ldrb	r3, [r3, #0]
 800b0f0:	18ba      	adds	r2, r7, r2
 800b0f2:	1c59      	adds	r1, r3, #1
 800b0f4:	7011      	strb	r1, [r2, #0]
 800b0f6:	001a      	movs	r2, r3
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	189b      	adds	r3, r3, r2
 800b0fc:	781b      	ldrb	r3, [r3, #0]
 800b0fe:	0018      	movs	r0, r3
 800b100:	f7ff ff60 	bl	800afc4 <SPI1_SendByte>
	while(i < len)
 800b104:	2317      	movs	r3, #23
 800b106:	18fa      	adds	r2, r7, r3
 800b108:	230e      	movs	r3, #14
 800b10a:	18fb      	adds	r3, r7, r3
 800b10c:	7812      	ldrb	r2, [r2, #0]
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	429a      	cmp	r2, r3
 800b112:	d3ea      	bcc.n	800b0ea <user_spi_write+0x52>
	}
	CSB_H();
 800b114:	23a0      	movs	r3, #160	@ 0xa0
 800b116:	05db      	lsls	r3, r3, #23
 800b118:	2280      	movs	r2, #128	@ 0x80
 800b11a:	00d2      	lsls	r2, r2, #3
 800b11c:	619a      	str	r2, [r3, #24]
	return 0;
 800b11e:	2300      	movs	r3, #0
}
 800b120:	0018      	movs	r0, r3
 800b122:	46bd      	mov	sp, r7
 800b124:	b006      	add	sp, #24
 800b126:	bd80      	pop	{r7, pc}
 800b128:	40013000 	.word	0x40013000

0800b12c <LL_SPI_IsActiveFlag_RXNE>:
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b082      	sub	sp, #8
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	689b      	ldr	r3, [r3, #8]
 800b138:	2201      	movs	r2, #1
 800b13a:	4013      	ands	r3, r2
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d101      	bne.n	800b144 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800b140:	2301      	movs	r3, #1
 800b142:	e000      	b.n	800b146 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800b144:	2300      	movs	r3, #0
}
 800b146:	0018      	movs	r0, r3
 800b148:	46bd      	mov	sp, r7
 800b14a:	b002      	add	sp, #8
 800b14c:	bd80      	pop	{r7, pc}

0800b14e <LL_SPI_IsActiveFlag_TXE>:
{
 800b14e:	b580      	push	{r7, lr}
 800b150:	b082      	sub	sp, #8
 800b152:	af00      	add	r7, sp, #0
 800b154:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	689b      	ldr	r3, [r3, #8]
 800b15a:	2202      	movs	r2, #2
 800b15c:	4013      	ands	r3, r2
 800b15e:	2b02      	cmp	r3, #2
 800b160:	d101      	bne.n	800b166 <LL_SPI_IsActiveFlag_TXE+0x18>
 800b162:	2301      	movs	r3, #1
 800b164:	e000      	b.n	800b168 <LL_SPI_IsActiveFlag_TXE+0x1a>
 800b166:	2300      	movs	r3, #0
}
 800b168:	0018      	movs	r0, r3
 800b16a:	46bd      	mov	sp, r7
 800b16c:	b002      	add	sp, #8
 800b16e:	bd80      	pop	{r7, pc}

0800b170 <LL_SPI_ReceiveData8>:
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b082      	sub	sp, #8
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	330c      	adds	r3, #12
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	b2db      	uxtb	r3, r3
}
 800b180:	0018      	movs	r0, r3
 800b182:	46bd      	mov	sp, r7
 800b184:	b002      	add	sp, #8
 800b186:	bd80      	pop	{r7, pc}

0800b188 <LL_SPI_TransmitData8>:
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	000a      	movs	r2, r1
 800b192:	1cfb      	adds	r3, r7, #3
 800b194:	701a      	strb	r2, [r3, #0]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	330c      	adds	r3, #12
 800b19a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	1cfa      	adds	r2, r7, #3
 800b1a0:	7812      	ldrb	r2, [r2, #0]
 800b1a2:	701a      	strb	r2, [r3, #0]
}
 800b1a4:	46c0      	nop			@ (mov r8, r8)
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	b004      	add	sp, #16
 800b1aa:	bd80      	pop	{r7, pc}

0800b1ac <DEV_SPI_WriteByte>:
#include "main.h"
// #include "stm32l4xx_hal_spi.h"
// extern SPI_HandleTypeDef hspi1;

void DEV_SPI_WriteByte(uint8_t value)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	0002      	movs	r2, r0
 800b1b4:	1dfb      	adds	r3, r7, #7
 800b1b6:	701a      	strb	r2, [r3, #0]

	// Check if the SPI is enabled
	if (!((SPI1)->CR1 & SPI_CR1_SPE))
 800b1b8:	4b18      	ldr	r3, [pc, #96]	@ (800b21c <DEV_SPI_WriteByte+0x70>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	2240      	movs	r2, #64	@ 0x40
 800b1be:	4013      	ands	r3, r2
 800b1c0:	d105      	bne.n	800b1ce <DEV_SPI_WriteByte+0x22>
	{
		SPI1->CR1 |= SPI_CR1_SPE;
 800b1c2:	4b16      	ldr	r3, [pc, #88]	@ (800b21c <DEV_SPI_WriteByte+0x70>)
 800b1c4:	681a      	ldr	r2, [r3, #0]
 800b1c6:	4b15      	ldr	r3, [pc, #84]	@ (800b21c <DEV_SPI_WriteByte+0x70>)
 800b1c8:	2140      	movs	r1, #64	@ 0x40
 800b1ca:	430a      	orrs	r2, r1
 800b1cc:	601a      	str	r2, [r3, #0]
	}

	while (LL_SPI_IsActiveFlag_TXE(SPI1) == RESET)
 800b1ce:	46c0      	nop			@ (mov r8, r8)
 800b1d0:	4b12      	ldr	r3, [pc, #72]	@ (800b21c <DEV_SPI_WriteByte+0x70>)
 800b1d2:	0018      	movs	r0, r3
 800b1d4:	f7ff ffbb 	bl	800b14e <LL_SPI_IsActiveFlag_TXE>
 800b1d8:	1e03      	subs	r3, r0, #0
 800b1da:	d0f9      	beq.n	800b1d0 <DEV_SPI_WriteByte+0x24>
		;

	CS_L();
 800b1dc:	23a0      	movs	r3, #160	@ 0xa0
 800b1de:	05db      	lsls	r3, r3, #23
 800b1e0:	2280      	movs	r2, #128	@ 0x80
 800b1e2:	0552      	lsls	r2, r2, #21
 800b1e4:	619a      	str	r2, [r3, #24]
	// Send bytes over the SPI
	LL_SPI_TransmitData8(SPI1, value);
 800b1e6:	1dfb      	adds	r3, r7, #7
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	4a0c      	ldr	r2, [pc, #48]	@ (800b21c <DEV_SPI_WriteByte+0x70>)
 800b1ec:	0019      	movs	r1, r3
 800b1ee:	0010      	movs	r0, r2
 800b1f0:	f7ff ffca 	bl	800b188 <LL_SPI_TransmitData8>

	// Wait until the transmission is complete
	while (LL_SPI_IsActiveFlag_RXNE(SPI1) == RESET)
 800b1f4:	46c0      	nop			@ (mov r8, r8)
 800b1f6:	4b09      	ldr	r3, [pc, #36]	@ (800b21c <DEV_SPI_WriteByte+0x70>)
 800b1f8:	0018      	movs	r0, r3
 800b1fa:	f7ff ff97 	bl	800b12c <LL_SPI_IsActiveFlag_RXNE>
 800b1fe:	1e03      	subs	r3, r0, #0
 800b200:	d0f9      	beq.n	800b1f6 <DEV_SPI_WriteByte+0x4a>
		;
	/* Read data register */
	(void)LL_SPI_ReceiveData8(SPI1);
 800b202:	4b06      	ldr	r3, [pc, #24]	@ (800b21c <DEV_SPI_WriteByte+0x70>)
 800b204:	0018      	movs	r0, r3
 800b206:	f7ff ffb3 	bl	800b170 <LL_SPI_ReceiveData8>
	CS_H();
 800b20a:	23a0      	movs	r3, #160	@ 0xa0
 800b20c:	05db      	lsls	r3, r3, #23
 800b20e:	2280      	movs	r2, #128	@ 0x80
 800b210:	0152      	lsls	r2, r2, #5
 800b212:	619a      	str	r2, [r3, #24]
}
 800b214:	46c0      	nop			@ (mov r8, r8)
 800b216:	46bd      	mov	sp, r7
 800b218:	b002      	add	sp, #8
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	40013000 	.word	0x40013000

0800b220 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	af00      	add	r7, sp, #0
	DC_L();
 800b224:	23a0      	movs	r3, #160	@ 0xa0
 800b226:	05db      	lsls	r3, r3, #23
 800b228:	2280      	movs	r2, #128	@ 0x80
 800b22a:	0452      	lsls	r2, r2, #17
 800b22c:	619a      	str	r2, [r3, #24]
	CS_H();
 800b22e:	23a0      	movs	r3, #160	@ 0xa0
 800b230:	05db      	lsls	r3, r3, #23
 800b232:	2280      	movs	r2, #128	@ 0x80
 800b234:	0152      	lsls	r2, r2, #5
 800b236:	619a      	str	r2, [r3, #24]
	RST_H(); // The Reset is active low.
 800b238:	23a0      	movs	r3, #160	@ 0xa0
 800b23a:	05db      	lsls	r3, r3, #23
 800b23c:	2280      	movs	r2, #128	@ 0x80
 800b23e:	0112      	lsls	r2, r2, #4
 800b240:	619a      	str	r2, [r3, #24]
	return 0;
 800b242:	2300      	movs	r3, #0
}
 800b244:	0018      	movs	r0, r3
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}

0800b24a <EPD_1IN54_V2_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
void EPD_1IN54_V2_Reset(void)
{
 800b24a:	b580      	push	{r7, lr}
 800b24c:	af00      	add	r7, sp, #0
    RST_H(); // DEV_Digital_Write(EPD_RST_PIN, 1);
 800b24e:	23a0      	movs	r3, #160	@ 0xa0
 800b250:	05db      	lsls	r3, r3, #23
 800b252:	2280      	movs	r2, #128	@ 0x80
 800b254:	0112      	lsls	r2, r2, #4
 800b256:	619a      	str	r2, [r3, #24]
    RST_L(); // DEV_Digital_Write(EPD_RST_PIN, 0);
 800b258:	23a0      	movs	r3, #160	@ 0xa0
 800b25a:	05db      	lsls	r3, r3, #23
 800b25c:	2280      	movs	r2, #128	@ 0x80
 800b25e:	0512      	lsls	r2, r2, #20
 800b260:	619a      	str	r2, [r3, #24]
    HAL_Delay(2);
 800b262:	2002      	movs	r0, #2
 800b264:	f7fa fdce 	bl	8005e04 <HAL_Delay>
    RST_H(); // DEV_Digital_Write(EPD_RST_PIN, 1);
 800b268:	23a0      	movs	r3, #160	@ 0xa0
 800b26a:	05db      	lsls	r3, r3, #23
 800b26c:	2280      	movs	r2, #128	@ 0x80
 800b26e:	0112      	lsls	r2, r2, #4
 800b270:	619a      	str	r2, [r3, #24]
}
 800b272:	46c0      	nop			@ (mov r8, r8)
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <EPD_1IN54_V2_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_1IN54_V2_SendCommand(UBYTE Reg)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	0002      	movs	r2, r0
 800b280:	1dfb      	adds	r3, r7, #7
 800b282:	701a      	strb	r2, [r3, #0]
    DC_L();
 800b284:	23a0      	movs	r3, #160	@ 0xa0
 800b286:	05db      	lsls	r3, r3, #23
 800b288:	2280      	movs	r2, #128	@ 0x80
 800b28a:	0452      	lsls	r2, r2, #17
 800b28c:	619a      	str	r2, [r3, #24]
    CS_L();
 800b28e:	23a0      	movs	r3, #160	@ 0xa0
 800b290:	05db      	lsls	r3, r3, #23
 800b292:	2280      	movs	r2, #128	@ 0x80
 800b294:	0552      	lsls	r2, r2, #21
 800b296:	619a      	str	r2, [r3, #24]
    DEV_SPI_WriteByte(Reg);
 800b298:	1dfb      	adds	r3, r7, #7
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	0018      	movs	r0, r3
 800b29e:	f7ff ff85 	bl	800b1ac <DEV_SPI_WriteByte>
    CS_H();
 800b2a2:	23a0      	movs	r3, #160	@ 0xa0
 800b2a4:	05db      	lsls	r3, r3, #23
 800b2a6:	2280      	movs	r2, #128	@ 0x80
 800b2a8:	0152      	lsls	r2, r2, #5
 800b2aa:	619a      	str	r2, [r3, #24]
}
 800b2ac:	46c0      	nop			@ (mov r8, r8)
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	b002      	add	sp, #8
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <EPD_1IN54_V2_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_1IN54_V2_SendData(UBYTE Data)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b082      	sub	sp, #8
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	0002      	movs	r2, r0
 800b2bc:	1dfb      	adds	r3, r7, #7
 800b2be:	701a      	strb	r2, [r3, #0]
    DC_H();
 800b2c0:	23a0      	movs	r3, #160	@ 0xa0
 800b2c2:	05db      	lsls	r3, r3, #23
 800b2c4:	2280      	movs	r2, #128	@ 0x80
 800b2c6:	0052      	lsls	r2, r2, #1
 800b2c8:	619a      	str	r2, [r3, #24]
    CS_L();
 800b2ca:	23a0      	movs	r3, #160	@ 0xa0
 800b2cc:	05db      	lsls	r3, r3, #23
 800b2ce:	2280      	movs	r2, #128	@ 0x80
 800b2d0:	0552      	lsls	r2, r2, #21
 800b2d2:	619a      	str	r2, [r3, #24]
    DEV_SPI_WriteByte(Data);
 800b2d4:	1dfb      	adds	r3, r7, #7
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	0018      	movs	r0, r3
 800b2da:	f7ff ff67 	bl	800b1ac <DEV_SPI_WriteByte>
    CS_H();
 800b2de:	23a0      	movs	r3, #160	@ 0xa0
 800b2e0:	05db      	lsls	r3, r3, #23
 800b2e2:	2280      	movs	r2, #128	@ 0x80
 800b2e4:	0152      	lsls	r2, r2, #5
 800b2e6:	619a      	str	r2, [r3, #24]
}
 800b2e8:	46c0      	nop			@ (mov r8, r8)
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	b002      	add	sp, #8
 800b2ee:	bd80      	pop	{r7, pc}

0800b2f0 <EPD_1IN54_V2_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
static void EPD_1IN54_V2_ReadBusy(void)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0

    uint32_t time1 = HAL_GetTick();
 800b2f6:	f7fa fd7b 	bl	8005df0 <HAL_GetTick>
 800b2fa:	0003      	movs	r3, r0
 800b2fc:	607b      	str	r3, [r7, #4]
    //	bool result = GPIOA->regs->IDR & 0x0004; //returns true if A2 is HIGH
    while (GPIOA->IDR & 0b0000001000000000)
 800b2fe:	e00c      	b.n	800b31a <EPD_1IN54_V2_ReadBusy+0x2a>
    { // A9, LOW = idle, HIGH = busy; DEV_Digital_Read(EPD_BUSY_PIN) == 1

        // Timeout check
        if ((HAL_GetTick() - time1) > timeout_value)
 800b300:	f7fa fd76 	bl	8005df0 <HAL_GetTick>
 800b304:	0002      	movs	r2, r0
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	1ad3      	subs	r3, r2, r3
 800b30a:	4a0a      	ldr	r2, [pc, #40]	@ (800b334 <EPD_1IN54_V2_ReadBusy+0x44>)
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d904      	bls.n	800b31a <EPD_1IN54_V2_ReadBusy+0x2a>
        {
            timeout_reset(__func__, __LINE__);
 800b310:	4b09      	ldr	r3, [pc, #36]	@ (800b338 <EPD_1IN54_V2_ReadBusy+0x48>)
 800b312:	218b      	movs	r1, #139	@ 0x8b
 800b314:	0018      	movs	r0, r3
 800b316:	f7f8 fd3b 	bl	8003d90 <timeout_reset>
    while (GPIOA->IDR & 0b0000001000000000)
 800b31a:	23a0      	movs	r3, #160	@ 0xa0
 800b31c:	05db      	lsls	r3, r3, #23
 800b31e:	691a      	ldr	r2, [r3, #16]
 800b320:	2380      	movs	r3, #128	@ 0x80
 800b322:	009b      	lsls	r3, r3, #2
 800b324:	4013      	ands	r3, r2
 800b326:	d1eb      	bne.n	800b300 <EPD_1IN54_V2_ReadBusy+0x10>
        }
    }

    //DE_BUG("busy: %d\r\n", (HAL_GetTick() - time1));
}
 800b328:	46c0      	nop			@ (mov r8, r8)
 800b32a:	46c0      	nop			@ (mov r8, r8)
 800b32c:	46bd      	mov	sp, r7
 800b32e:	b002      	add	sp, #8
 800b330:	bd80      	pop	{r7, pc}
 800b332:	46c0      	nop			@ (mov r8, r8)
 800b334:	00000bb8 	.word	0x00000bb8
 800b338:	0801011c 	.word	0x0801011c

0800b33c <EPD_1IN54_V2_TurnOnDisplay>:
/******************************************************************************
function :	Turn On Display full
parameter:
******************************************************************************/
static void EPD_1IN54_V2_TurnOnDisplay(void)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_SendCommand(0x22);
 800b340:	2022      	movs	r0, #34	@ 0x22
 800b342:	f7ff ff99 	bl	800b278 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xc7);
 800b346:	20c7      	movs	r0, #199	@ 0xc7
 800b348:	f7ff ffb4 	bl	800b2b4 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 800b34c:	2020      	movs	r0, #32
 800b34e:	f7ff ff93 	bl	800b278 <EPD_1IN54_V2_SendCommand>

#if (USE_TIME_PROFILING == 1)
    uint32_t startTick = DWT->CYCCNT;
#endif /* USE_TIME_PROFILING */
    EPD_1IN54_V2_ReadBusy();
 800b352:	f7ff ffcd 	bl	800b2f0 <EPD_1IN54_V2_ReadBusy>
#if (USE_TIME_PROFILING == 1)
    uint32_t tmp = DWT->CYCCNT - startTick;
    printf("####  EPD_1IN54_V2_TurnOnDisplay: %d\n", (int)(tmp * 0.0000625));
#endif /* USE_TIME_PROFILING */
}
 800b356:	46c0      	nop			@ (mov r8, r8)
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <EPD_1IN54_V2_TurnOnDisplayPart>:
/******************************************************************************
function :	Turn On Display part
parameter:
******************************************************************************/
void EPD_1IN54_V2_TurnOnDisplayPart(void)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_SendCommand(0x22);
 800b360:	2022      	movs	r0, #34	@ 0x22
 800b362:	f7ff ff89 	bl	800b278 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xcF);
 800b366:	20cf      	movs	r0, #207	@ 0xcf
 800b368:	f7ff ffa4 	bl	800b2b4 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 800b36c:	2020      	movs	r0, #32
 800b36e:	f7ff ff83 	bl	800b278 <EPD_1IN54_V2_SendCommand>

//    enter_stop2(2330, LL_RTC_WAKEUPCLOCK_DIV_8);

    //  *********************   End S L E E P  571 ms !  *********************

    EPD_1IN54_V2_ReadBusy();
 800b372:	f7ff ffbd 	bl	800b2f0 <EPD_1IN54_V2_ReadBusy>
}
 800b376:	46c0      	nop			@ (mov r8, r8)
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}

0800b37c <EPD_1IN54_V2_Lut>:

static void EPD_1IN54_V2_Lut(UBYTE *lut)
{
 800b37c:	b590      	push	{r4, r7, lr}
 800b37e:	b085      	sub	sp, #20
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
    EPD_1IN54_V2_SendCommand(0x32);
 800b384:	2032      	movs	r0, #50	@ 0x32
 800b386:	f7ff ff77 	bl	800b278 <EPD_1IN54_V2_SendCommand>
    for (UBYTE i = 0; i < 153; i++)
 800b38a:	230f      	movs	r3, #15
 800b38c:	18fb      	adds	r3, r7, r3
 800b38e:	2200      	movs	r2, #0
 800b390:	701a      	strb	r2, [r3, #0]
 800b392:	e00d      	b.n	800b3b0 <EPD_1IN54_V2_Lut+0x34>
        EPD_1IN54_V2_SendData(lut[i]);
 800b394:	240f      	movs	r4, #15
 800b396:	193b      	adds	r3, r7, r4
 800b398:	781b      	ldrb	r3, [r3, #0]
 800b39a:	687a      	ldr	r2, [r7, #4]
 800b39c:	18d3      	adds	r3, r2, r3
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	0018      	movs	r0, r3
 800b3a2:	f7ff ff87 	bl	800b2b4 <EPD_1IN54_V2_SendData>
    for (UBYTE i = 0; i < 153; i++)
 800b3a6:	193b      	adds	r3, r7, r4
 800b3a8:	781a      	ldrb	r2, [r3, #0]
 800b3aa:	193b      	adds	r3, r7, r4
 800b3ac:	3201      	adds	r2, #1
 800b3ae:	701a      	strb	r2, [r3, #0]
 800b3b0:	230f      	movs	r3, #15
 800b3b2:	18fb      	adds	r3, r7, r3
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	2b98      	cmp	r3, #152	@ 0x98
 800b3b8:	d9ec      	bls.n	800b394 <EPD_1IN54_V2_Lut+0x18>

#if (USE_TIME_PROFILING == 1)
    uint32_t startTick = DWT->CYCCNT;
#endif /* USE_TIME_PROFILING */
    EPD_1IN54_V2_ReadBusy();
 800b3ba:	f7ff ff99 	bl	800b2f0 <EPD_1IN54_V2_ReadBusy>
#if (USE_TIME_PROFILING == 1)
    uint32_t tmp = DWT->CYCCNT - startTick;
    printf("####  EPD_1IN54_V2_Lut: %d\n", (int)(tmp * 0.0000625));
#endif /* USE_TIME_PROFILING */
}
 800b3be:	46c0      	nop			@ (mov r8, r8)
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	b005      	add	sp, #20
 800b3c4:	bd90      	pop	{r4, r7, pc}

0800b3c6 <EPD_1IN54_V2_SetLut>:

static void EPD_1IN54_V2_SetLut(UBYTE *lut)
{
 800b3c6:	b580      	push	{r7, lr}
 800b3c8:	b082      	sub	sp, #8
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6078      	str	r0, [r7, #4]
    EPD_1IN54_V2_Lut(lut);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	0018      	movs	r0, r3
 800b3d2:	f7ff ffd3 	bl	800b37c <EPD_1IN54_V2_Lut>

    EPD_1IN54_V2_SendCommand(0x3f);
 800b3d6:	203f      	movs	r0, #63	@ 0x3f
 800b3d8:	f7ff ff4e 	bl	800b278 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(lut[153]);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	3399      	adds	r3, #153	@ 0x99
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	0018      	movs	r0, r3
 800b3e4:	f7ff ff66 	bl	800b2b4 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x03);
 800b3e8:	2003      	movs	r0, #3
 800b3ea:	f7ff ff45 	bl	800b278 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(lut[154]);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	339a      	adds	r3, #154	@ 0x9a
 800b3f2:	781b      	ldrb	r3, [r3, #0]
 800b3f4:	0018      	movs	r0, r3
 800b3f6:	f7ff ff5d 	bl	800b2b4 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x04);
 800b3fa:	2004      	movs	r0, #4
 800b3fc:	f7ff ff3c 	bl	800b278 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(lut[155]);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	339b      	adds	r3, #155	@ 0x9b
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	0018      	movs	r0, r3
 800b408:	f7ff ff54 	bl	800b2b4 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(lut[156]);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	339c      	adds	r3, #156	@ 0x9c
 800b410:	781b      	ldrb	r3, [r3, #0]
 800b412:	0018      	movs	r0, r3
 800b414:	f7ff ff4e 	bl	800b2b4 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(lut[157]);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	339d      	adds	r3, #157	@ 0x9d
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	0018      	movs	r0, r3
 800b420:	f7ff ff48 	bl	800b2b4 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x2c);
 800b424:	202c      	movs	r0, #44	@ 0x2c
 800b426:	f7ff ff27 	bl	800b278 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(lut[158]);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	339e      	adds	r3, #158	@ 0x9e
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	0018      	movs	r0, r3
 800b432:	f7ff ff3f 	bl	800b2b4 <EPD_1IN54_V2_SendData>
}
 800b436:	46c0      	nop			@ (mov r8, r8)
 800b438:	46bd      	mov	sp, r7
 800b43a:	b002      	add	sp, #8
 800b43c:	bd80      	pop	{r7, pc}

0800b43e <EPD_1IN54_V2_SetWindows>:

static void EPD_1IN54_V2_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 800b43e:	b5b0      	push	{r4, r5, r7, lr}
 800b440:	b082      	sub	sp, #8
 800b442:	af00      	add	r7, sp, #0
 800b444:	0005      	movs	r5, r0
 800b446:	000c      	movs	r4, r1
 800b448:	0010      	movs	r0, r2
 800b44a:	0019      	movs	r1, r3
 800b44c:	1dbb      	adds	r3, r7, #6
 800b44e:	1c2a      	adds	r2, r5, #0
 800b450:	801a      	strh	r2, [r3, #0]
 800b452:	1d3b      	adds	r3, r7, #4
 800b454:	1c22      	adds	r2, r4, #0
 800b456:	801a      	strh	r2, [r3, #0]
 800b458:	1cbb      	adds	r3, r7, #2
 800b45a:	1c02      	adds	r2, r0, #0
 800b45c:	801a      	strh	r2, [r3, #0]
 800b45e:	003b      	movs	r3, r7
 800b460:	1c0a      	adds	r2, r1, #0
 800b462:	801a      	strh	r2, [r3, #0]
    EPD_1IN54_V2_SendCommand(0x44); // SET_RAM_X_ADDRESS_START_END_POSITION
 800b464:	2044      	movs	r0, #68	@ 0x44
 800b466:	f7ff ff07 	bl	800b278 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData((Xstart >> 3) & 0xFF);
 800b46a:	1dbb      	adds	r3, r7, #6
 800b46c:	881b      	ldrh	r3, [r3, #0]
 800b46e:	08db      	lsrs	r3, r3, #3
 800b470:	b29b      	uxth	r3, r3
 800b472:	b2db      	uxtb	r3, r3
 800b474:	0018      	movs	r0, r3
 800b476:	f7ff ff1d 	bl	800b2b4 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData((Xend >> 3) & 0xFF);
 800b47a:	1cbb      	adds	r3, r7, #2
 800b47c:	881b      	ldrh	r3, [r3, #0]
 800b47e:	08db      	lsrs	r3, r3, #3
 800b480:	b29b      	uxth	r3, r3
 800b482:	b2db      	uxtb	r3, r3
 800b484:	0018      	movs	r0, r3
 800b486:	f7ff ff15 	bl	800b2b4 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x45); // SET_RAM_Y_ADDRESS_START_END_POSITION
 800b48a:	2045      	movs	r0, #69	@ 0x45
 800b48c:	f7ff fef4 	bl	800b278 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(Ystart & 0xFF);
 800b490:	1d3b      	adds	r3, r7, #4
 800b492:	881b      	ldrh	r3, [r3, #0]
 800b494:	b2db      	uxtb	r3, r3
 800b496:	0018      	movs	r0, r3
 800b498:	f7ff ff0c 	bl	800b2b4 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData((Ystart >> 8) & 0xFF);
 800b49c:	1d3b      	adds	r3, r7, #4
 800b49e:	881b      	ldrh	r3, [r3, #0]
 800b4a0:	0a1b      	lsrs	r3, r3, #8
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	b2db      	uxtb	r3, r3
 800b4a6:	0018      	movs	r0, r3
 800b4a8:	f7ff ff04 	bl	800b2b4 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(Yend & 0xFF);
 800b4ac:	003b      	movs	r3, r7
 800b4ae:	881b      	ldrh	r3, [r3, #0]
 800b4b0:	b2db      	uxtb	r3, r3
 800b4b2:	0018      	movs	r0, r3
 800b4b4:	f7ff fefe 	bl	800b2b4 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData((Yend >> 8) & 0xFF);
 800b4b8:	003b      	movs	r3, r7
 800b4ba:	881b      	ldrh	r3, [r3, #0]
 800b4bc:	0a1b      	lsrs	r3, r3, #8
 800b4be:	b29b      	uxth	r3, r3
 800b4c0:	b2db      	uxtb	r3, r3
 800b4c2:	0018      	movs	r0, r3
 800b4c4:	f7ff fef6 	bl	800b2b4 <EPD_1IN54_V2_SendData>
}
 800b4c8:	46c0      	nop			@ (mov r8, r8)
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	b002      	add	sp, #8
 800b4ce:	bdb0      	pop	{r4, r5, r7, pc}

0800b4d0 <EPD_1IN54_V2_SetCursor>:

static void EPD_1IN54_V2_SetCursor(UWORD Xstart, UWORD Ystart)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b082      	sub	sp, #8
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	0002      	movs	r2, r0
 800b4d8:	1dbb      	adds	r3, r7, #6
 800b4da:	801a      	strh	r2, [r3, #0]
 800b4dc:	1d3b      	adds	r3, r7, #4
 800b4de:	1c0a      	adds	r2, r1, #0
 800b4e0:	801a      	strh	r2, [r3, #0]
    EPD_1IN54_V2_SendCommand(0x4E); // SET_RAM_X_ADDRESS_COUNTER
 800b4e2:	204e      	movs	r0, #78	@ 0x4e
 800b4e4:	f7ff fec8 	bl	800b278 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(Xstart & 0xFF);
 800b4e8:	1dbb      	adds	r3, r7, #6
 800b4ea:	881b      	ldrh	r3, [r3, #0]
 800b4ec:	b2db      	uxtb	r3, r3
 800b4ee:	0018      	movs	r0, r3
 800b4f0:	f7ff fee0 	bl	800b2b4 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x4F); // SET_RAM_Y_ADDRESS_COUNTER
 800b4f4:	204f      	movs	r0, #79	@ 0x4f
 800b4f6:	f7ff febf 	bl	800b278 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(Ystart & 0xFF);
 800b4fa:	1d3b      	adds	r3, r7, #4
 800b4fc:	881b      	ldrh	r3, [r3, #0]
 800b4fe:	b2db      	uxtb	r3, r3
 800b500:	0018      	movs	r0, r3
 800b502:	f7ff fed7 	bl	800b2b4 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData((Ystart >> 8) & 0xFF);
 800b506:	1d3b      	adds	r3, r7, #4
 800b508:	881b      	ldrh	r3, [r3, #0]
 800b50a:	0a1b      	lsrs	r3, r3, #8
 800b50c:	b29b      	uxth	r3, r3
 800b50e:	b2db      	uxtb	r3, r3
 800b510:	0018      	movs	r0, r3
 800b512:	f7ff fecf 	bl	800b2b4 <EPD_1IN54_V2_SendData>
}
 800b516:	46c0      	nop			@ (mov r8, r8)
 800b518:	46bd      	mov	sp, r7
 800b51a:	b002      	add	sp, #8
 800b51c:	bd80      	pop	{r7, pc}
	...

0800b520 <EPD_1IN54_V2_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_1IN54_V2_Init(void)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_Reset();
 800b524:	f7ff fe91 	bl	800b24a <EPD_1IN54_V2_Reset>

#if (USE_TIME_PROFILING == 1)
    uint32_t startTick = DWT->CYCCNT;
#endif /* USE_TIME_PROFILING */
    EPD_1IN54_V2_ReadBusy();
 800b528:	f7ff fee2 	bl	800b2f0 <EPD_1IN54_V2_ReadBusy>
#if (USE_TIME_PROFILING == 1)
    uint32_t tmp = DWT->CYCCNT - startTick;
    printf("####  EPD_1IN54_V2_Init-1: %d\n", (int)(tmp * 0.0000625));
#endif /* USE_TIME_PROFILING */

    EPD_1IN54_V2_SendCommand(0x12); // SWRESET
 800b52c:	2012      	movs	r0, #18
 800b52e:	f7ff fea3 	bl	800b278 <EPD_1IN54_V2_SendCommand>

#if (USE_TIME_PROFILING == 1)
    startTick = DWT->CYCCNT;
#endif /* USE_TIME_PROFILING */
    EPD_1IN54_V2_ReadBusy();
 800b532:	f7ff fedd 	bl	800b2f0 <EPD_1IN54_V2_ReadBusy>
#if (USE_TIME_PROFILING == 1)
    tmp = DWT->CYCCNT - startTick;
    printf("####  EPD_1IN54_V2_Init-2: %d\n", (int)(tmp * 0.0000625));
#endif /* USE_TIME_PROFILING */

    EPD_1IN54_V2_SendCommand(0x01); // Driver output control
 800b536:	2001      	movs	r0, #1
 800b538:	f7ff fe9e 	bl	800b278 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xC7);
 800b53c:	20c7      	movs	r0, #199	@ 0xc7
 800b53e:	f7ff feb9 	bl	800b2b4 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800b542:	2000      	movs	r0, #0
 800b544:	f7ff feb6 	bl	800b2b4 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x01);
 800b548:	2001      	movs	r0, #1
 800b54a:	f7ff feb3 	bl	800b2b4 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x11); // data entry mode
 800b54e:	2011      	movs	r0, #17
 800b550:	f7ff fe92 	bl	800b278 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x01);
 800b554:	2001      	movs	r0, #1
 800b556:	f7ff fead 	bl	800b2b4 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SetWindows(0, EPD_1IN54_V2_HEIGHT - 1, EPD_1IN54_V2_WIDTH - 1, 0);
 800b55a:	2300      	movs	r3, #0
 800b55c:	22c7      	movs	r2, #199	@ 0xc7
 800b55e:	21c7      	movs	r1, #199	@ 0xc7
 800b560:	2000      	movs	r0, #0
 800b562:	f7ff ff6c 	bl	800b43e <EPD_1IN54_V2_SetWindows>

    EPD_1IN54_V2_SendCommand(0x3C); // BorderWavefrom
 800b566:	203c      	movs	r0, #60	@ 0x3c
 800b568:	f7ff fe86 	bl	800b278 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x01);
 800b56c:	2001      	movs	r0, #1
 800b56e:	f7ff fea1 	bl	800b2b4 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x18);
 800b572:	2018      	movs	r0, #24
 800b574:	f7ff fe80 	bl	800b278 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x80);
 800b578:	2080      	movs	r0, #128	@ 0x80
 800b57a:	f7ff fe9b 	bl	800b2b4 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x22); // Load Temperature and waveform setting.
 800b57e:	2022      	movs	r0, #34	@ 0x22
 800b580:	f7ff fe7a 	bl	800b278 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0XB1);
 800b584:	20b1      	movs	r0, #177	@ 0xb1
 800b586:	f7ff fe95 	bl	800b2b4 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 800b58a:	2020      	movs	r0, #32
 800b58c:	f7ff fe74 	bl	800b278 <EPD_1IN54_V2_SendCommand>

    EPD_1IN54_V2_SetCursor(0, EPD_1IN54_V2_HEIGHT - 1);
 800b590:	21c7      	movs	r1, #199	@ 0xc7
 800b592:	2000      	movs	r0, #0
 800b594:	f7ff ff9c 	bl	800b4d0 <EPD_1IN54_V2_SetCursor>

#if (USE_TIME_PROFILING == 1)
    startTick = DWT->CYCCNT;
#endif /* USE_TIME_PROFILING */
    EPD_1IN54_V2_ReadBusy();
 800b598:	f7ff feaa 	bl	800b2f0 <EPD_1IN54_V2_ReadBusy>
#if (USE_TIME_PROFILING == 1)
    tmp = DWT->CYCCNT - startTick;
    printf("####  EPD_1IN54_V2_Init-3: %d\n", (int)(tmp * 0.0000625));
#endif /* USE_TIME_PROFILING */

    EPD_1IN54_V2_SetLut(WF_Full_1IN54);
 800b59c:	4b03      	ldr	r3, [pc, #12]	@ (800b5ac <EPD_1IN54_V2_Init+0x8c>)
 800b59e:	0018      	movs	r0, r3
 800b5a0:	f7ff ff11 	bl	800b3c6 <EPD_1IN54_V2_SetLut>
}
 800b5a4:	46c0      	nop			@ (mov r8, r8)
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	46c0      	nop			@ (mov r8, r8)
 800b5ac:	20000010 	.word	0x20000010

0800b5b0 <EPD_1IN54_V2_Init_Partial>:
/******************************************************************************
function :	Initialize the e-Paper register (Partial display)
parameter:
******************************************************************************/
void EPD_1IN54_V2_Init_Partial(void)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_Reset();
 800b5b4:	f7ff fe49 	bl	800b24a <EPD_1IN54_V2_Reset>

#if (USE_TIME_PROFILING == 1)
    uint32_t startTick = DWT->CYCCNT;
#endif /* USE_TIME_PROFILING */
    EPD_1IN54_V2_ReadBusy();
 800b5b8:	f7ff fe9a 	bl	800b2f0 <EPD_1IN54_V2_ReadBusy>
#if (USE_TIME_PROFILING == 1)
    uint32_t tmp = DWT->CYCCNT - startTick;
    printf("####  EPD_1IN54_V2_Init_Partial-1: %d\n", (int)(tmp * 0.0000625));
#endif /* USE_TIME_PROFILING */

    EPD_1IN54_V2_SetLut(WF_PARTIAL_1IN54_0);
 800b5bc:	4b1c      	ldr	r3, [pc, #112]	@ (800b630 <EPD_1IN54_V2_Init_Partial+0x80>)
 800b5be:	0018      	movs	r0, r3
 800b5c0:	f7ff ff01 	bl	800b3c6 <EPD_1IN54_V2_SetLut>
    EPD_1IN54_V2_SendCommand(0x37);
 800b5c4:	2037      	movs	r0, #55	@ 0x37
 800b5c6:	f7ff fe57 	bl	800b278 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x00);
 800b5ca:	2000      	movs	r0, #0
 800b5cc:	f7ff fe72 	bl	800b2b4 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800b5d0:	2000      	movs	r0, #0
 800b5d2:	f7ff fe6f 	bl	800b2b4 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800b5d6:	2000      	movs	r0, #0
 800b5d8:	f7ff fe6c 	bl	800b2b4 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800b5dc:	2000      	movs	r0, #0
 800b5de:	f7ff fe69 	bl	800b2b4 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800b5e2:	2000      	movs	r0, #0
 800b5e4:	f7ff fe66 	bl	800b2b4 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x40);
 800b5e8:	2040      	movs	r0, #64	@ 0x40
 800b5ea:	f7ff fe63 	bl	800b2b4 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800b5ee:	2000      	movs	r0, #0
 800b5f0:	f7ff fe60 	bl	800b2b4 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800b5f4:	2000      	movs	r0, #0
 800b5f6:	f7ff fe5d 	bl	800b2b4 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800b5fa:	2000      	movs	r0, #0
 800b5fc:	f7ff fe5a 	bl	800b2b4 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800b600:	2000      	movs	r0, #0
 800b602:	f7ff fe57 	bl	800b2b4 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x3C); // BorderWavefrom
 800b606:	203c      	movs	r0, #60	@ 0x3c
 800b608:	f7ff fe36 	bl	800b278 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x80);
 800b60c:	2080      	movs	r0, #128	@ 0x80
 800b60e:	f7ff fe51 	bl	800b2b4 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x22);
 800b612:	2022      	movs	r0, #34	@ 0x22
 800b614:	f7ff fe30 	bl	800b278 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xc0);
 800b618:	20c0      	movs	r0, #192	@ 0xc0
 800b61a:	f7ff fe4b 	bl	800b2b4 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 800b61e:	2020      	movs	r0, #32
 800b620:	f7ff fe2a 	bl	800b278 <EPD_1IN54_V2_SendCommand>

#if (USE_TIME_PROFILING == 1)
    startTick = DWT->CYCCNT;
#endif /* USE_TIME_PROFILING */
    EPD_1IN54_V2_ReadBusy();
 800b624:	f7ff fe64 	bl	800b2f0 <EPD_1IN54_V2_ReadBusy>
#if (USE_TIME_PROFILING == 1)
    tmp = DWT->CYCCNT - startTick;
    printf("###  EPD_1IN54_V2_Init_Partial-2: %d\n", (int)(tmp * 0.0000625));
#endif /* USE_TIME_PROFILING */
}
 800b628:	46c0      	nop			@ (mov r8, r8)
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	46c0      	nop			@ (mov r8, r8)
 800b630:	200000b0 	.word	0x200000b0

0800b634 <EPD_1IN54_V2_Display>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_1IN54_V2_Display(UBYTE *Image)
{
 800b634:	b590      	push	{r4, r7, lr}
 800b636:	b087      	sub	sp, #28
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0) ? (EPD_1IN54_V2_WIDTH / 8) : (EPD_1IN54_V2_WIDTH / 8 + 1);
 800b63c:	2312      	movs	r3, #18
 800b63e:	18fb      	adds	r3, r7, r3
 800b640:	2219      	movs	r2, #25
 800b642:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 800b644:	2310      	movs	r3, #16
 800b646:	18fb      	adds	r3, r7, r3
 800b648:	22c8      	movs	r2, #200	@ 0xc8
 800b64a:	801a      	strh	r2, [r3, #0]

    UDOUBLE Addr = 0;
 800b64c:	2300      	movs	r3, #0
 800b64e:	60fb      	str	r3, [r7, #12]
    EPD_1IN54_V2_SendCommand(0x24);
 800b650:	2024      	movs	r0, #36	@ 0x24
 800b652:	f7ff fe11 	bl	800b278 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++)
 800b656:	2316      	movs	r3, #22
 800b658:	18fb      	adds	r3, r7, r3
 800b65a:	2200      	movs	r2, #0
 800b65c:	801a      	strh	r2, [r3, #0]
 800b65e:	e02a      	b.n	800b6b6 <EPD_1IN54_V2_Display+0x82>
    {
        for (UWORD i = 0; i < Width; i++)
 800b660:	2314      	movs	r3, #20
 800b662:	18fb      	adds	r3, r7, r3
 800b664:	2200      	movs	r2, #0
 800b666:	801a      	strh	r2, [r3, #0]
 800b668:	e017      	b.n	800b69a <EPD_1IN54_V2_Display+0x66>
        {
            Addr = i + j * Width;
 800b66a:	2414      	movs	r4, #20
 800b66c:	193b      	adds	r3, r7, r4
 800b66e:	881a      	ldrh	r2, [r3, #0]
 800b670:	2316      	movs	r3, #22
 800b672:	18fb      	adds	r3, r7, r3
 800b674:	881b      	ldrh	r3, [r3, #0]
 800b676:	2112      	movs	r1, #18
 800b678:	1879      	adds	r1, r7, r1
 800b67a:	8809      	ldrh	r1, [r1, #0]
 800b67c:	434b      	muls	r3, r1
 800b67e:	18d3      	adds	r3, r2, r3
 800b680:	60fb      	str	r3, [r7, #12]
            EPD_1IN54_V2_SendData(Image[Addr]);
 800b682:	687a      	ldr	r2, [r7, #4]
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	18d3      	adds	r3, r2, r3
 800b688:	781b      	ldrb	r3, [r3, #0]
 800b68a:	0018      	movs	r0, r3
 800b68c:	f7ff fe12 	bl	800b2b4 <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++)
 800b690:	193b      	adds	r3, r7, r4
 800b692:	881a      	ldrh	r2, [r3, #0]
 800b694:	193b      	adds	r3, r7, r4
 800b696:	3201      	adds	r2, #1
 800b698:	801a      	strh	r2, [r3, #0]
 800b69a:	2314      	movs	r3, #20
 800b69c:	18fa      	adds	r2, r7, r3
 800b69e:	2312      	movs	r3, #18
 800b6a0:	18fb      	adds	r3, r7, r3
 800b6a2:	8812      	ldrh	r2, [r2, #0]
 800b6a4:	881b      	ldrh	r3, [r3, #0]
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	d3df      	bcc.n	800b66a <EPD_1IN54_V2_Display+0x36>
    for (UWORD j = 0; j < Height; j++)
 800b6aa:	2116      	movs	r1, #22
 800b6ac:	187b      	adds	r3, r7, r1
 800b6ae:	881a      	ldrh	r2, [r3, #0]
 800b6b0:	187b      	adds	r3, r7, r1
 800b6b2:	3201      	adds	r2, #1
 800b6b4:	801a      	strh	r2, [r3, #0]
 800b6b6:	2316      	movs	r3, #22
 800b6b8:	18fa      	adds	r2, r7, r3
 800b6ba:	2310      	movs	r3, #16
 800b6bc:	18fb      	adds	r3, r7, r3
 800b6be:	8812      	ldrh	r2, [r2, #0]
 800b6c0:	881b      	ldrh	r3, [r3, #0]
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d3cc      	bcc.n	800b660 <EPD_1IN54_V2_Display+0x2c>
        }
    }
    EPD_1IN54_V2_TurnOnDisplay();
 800b6c6:	f7ff fe39 	bl	800b33c <EPD_1IN54_V2_TurnOnDisplay>
}
 800b6ca:	46c0      	nop			@ (mov r8, r8)
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	b007      	add	sp, #28
 800b6d0:	bd90      	pop	{r4, r7, pc}

0800b6d2 <EPD_1IN54_V2_DisplayPartBaseImage>:
function :	 The image of the previous frame must be uploaded, otherwise the
                 first few seconds will display an exception.
parameter:
******************************************************************************/
void EPD_1IN54_V2_DisplayPartBaseImage(UBYTE *Image)
{
 800b6d2:	b590      	push	{r4, r7, lr}
 800b6d4:	b087      	sub	sp, #28
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0) ? (EPD_1IN54_V2_WIDTH / 8) : (EPD_1IN54_V2_WIDTH / 8 + 1);
 800b6da:	230e      	movs	r3, #14
 800b6dc:	18fb      	adds	r3, r7, r3
 800b6de:	2219      	movs	r2, #25
 800b6e0:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 800b6e2:	230c      	movs	r3, #12
 800b6e4:	18fb      	adds	r3, r7, r3
 800b6e6:	22c8      	movs	r2, #200	@ 0xc8
 800b6e8:	801a      	strh	r2, [r3, #0]

    UDOUBLE Addr = 0;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	60bb      	str	r3, [r7, #8]
    EPD_1IN54_V2_SendCommand(0x24);
 800b6ee:	2024      	movs	r0, #36	@ 0x24
 800b6f0:	f7ff fdc2 	bl	800b278 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++)
 800b6f4:	2316      	movs	r3, #22
 800b6f6:	18fb      	adds	r3, r7, r3
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	801a      	strh	r2, [r3, #0]
 800b6fc:	e02a      	b.n	800b754 <EPD_1IN54_V2_DisplayPartBaseImage+0x82>
    {
        for (UWORD i = 0; i < Width; i++)
 800b6fe:	2314      	movs	r3, #20
 800b700:	18fb      	adds	r3, r7, r3
 800b702:	2200      	movs	r2, #0
 800b704:	801a      	strh	r2, [r3, #0]
 800b706:	e017      	b.n	800b738 <EPD_1IN54_V2_DisplayPartBaseImage+0x66>
        {
            Addr = i + j * Width;
 800b708:	2414      	movs	r4, #20
 800b70a:	193b      	adds	r3, r7, r4
 800b70c:	881a      	ldrh	r2, [r3, #0]
 800b70e:	2316      	movs	r3, #22
 800b710:	18fb      	adds	r3, r7, r3
 800b712:	881b      	ldrh	r3, [r3, #0]
 800b714:	210e      	movs	r1, #14
 800b716:	1879      	adds	r1, r7, r1
 800b718:	8809      	ldrh	r1, [r1, #0]
 800b71a:	434b      	muls	r3, r1
 800b71c:	18d3      	adds	r3, r2, r3
 800b71e:	60bb      	str	r3, [r7, #8]
            EPD_1IN54_V2_SendData(Image[Addr]);
 800b720:	687a      	ldr	r2, [r7, #4]
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	18d3      	adds	r3, r2, r3
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	0018      	movs	r0, r3
 800b72a:	f7ff fdc3 	bl	800b2b4 <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++)
 800b72e:	193b      	adds	r3, r7, r4
 800b730:	881a      	ldrh	r2, [r3, #0]
 800b732:	193b      	adds	r3, r7, r4
 800b734:	3201      	adds	r2, #1
 800b736:	801a      	strh	r2, [r3, #0]
 800b738:	2314      	movs	r3, #20
 800b73a:	18fa      	adds	r2, r7, r3
 800b73c:	230e      	movs	r3, #14
 800b73e:	18fb      	adds	r3, r7, r3
 800b740:	8812      	ldrh	r2, [r2, #0]
 800b742:	881b      	ldrh	r3, [r3, #0]
 800b744:	429a      	cmp	r2, r3
 800b746:	d3df      	bcc.n	800b708 <EPD_1IN54_V2_DisplayPartBaseImage+0x36>
    for (UWORD j = 0; j < Height; j++)
 800b748:	2116      	movs	r1, #22
 800b74a:	187b      	adds	r3, r7, r1
 800b74c:	881a      	ldrh	r2, [r3, #0]
 800b74e:	187b      	adds	r3, r7, r1
 800b750:	3201      	adds	r2, #1
 800b752:	801a      	strh	r2, [r3, #0]
 800b754:	2316      	movs	r3, #22
 800b756:	18fa      	adds	r2, r7, r3
 800b758:	230c      	movs	r3, #12
 800b75a:	18fb      	adds	r3, r7, r3
 800b75c:	8812      	ldrh	r2, [r2, #0]
 800b75e:	881b      	ldrh	r3, [r3, #0]
 800b760:	429a      	cmp	r2, r3
 800b762:	d3cc      	bcc.n	800b6fe <EPD_1IN54_V2_DisplayPartBaseImage+0x2c>
        }
    }
    EPD_1IN54_V2_SendCommand(0x26);
 800b764:	2026      	movs	r0, #38	@ 0x26
 800b766:	f7ff fd87 	bl	800b278 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++)
 800b76a:	2312      	movs	r3, #18
 800b76c:	18fb      	adds	r3, r7, r3
 800b76e:	2200      	movs	r2, #0
 800b770:	801a      	strh	r2, [r3, #0]
 800b772:	e02a      	b.n	800b7ca <EPD_1IN54_V2_DisplayPartBaseImage+0xf8>
    {
        for (UWORD i = 0; i < Width; i++)
 800b774:	2310      	movs	r3, #16
 800b776:	18fb      	adds	r3, r7, r3
 800b778:	2200      	movs	r2, #0
 800b77a:	801a      	strh	r2, [r3, #0]
 800b77c:	e017      	b.n	800b7ae <EPD_1IN54_V2_DisplayPartBaseImage+0xdc>
        {
            Addr = i + j * Width;
 800b77e:	2410      	movs	r4, #16
 800b780:	193b      	adds	r3, r7, r4
 800b782:	881a      	ldrh	r2, [r3, #0]
 800b784:	2312      	movs	r3, #18
 800b786:	18fb      	adds	r3, r7, r3
 800b788:	881b      	ldrh	r3, [r3, #0]
 800b78a:	210e      	movs	r1, #14
 800b78c:	1879      	adds	r1, r7, r1
 800b78e:	8809      	ldrh	r1, [r1, #0]
 800b790:	434b      	muls	r3, r1
 800b792:	18d3      	adds	r3, r2, r3
 800b794:	60bb      	str	r3, [r7, #8]
            EPD_1IN54_V2_SendData(Image[Addr]);
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	18d3      	adds	r3, r2, r3
 800b79c:	781b      	ldrb	r3, [r3, #0]
 800b79e:	0018      	movs	r0, r3
 800b7a0:	f7ff fd88 	bl	800b2b4 <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++)
 800b7a4:	193b      	adds	r3, r7, r4
 800b7a6:	881a      	ldrh	r2, [r3, #0]
 800b7a8:	193b      	adds	r3, r7, r4
 800b7aa:	3201      	adds	r2, #1
 800b7ac:	801a      	strh	r2, [r3, #0]
 800b7ae:	2310      	movs	r3, #16
 800b7b0:	18fa      	adds	r2, r7, r3
 800b7b2:	230e      	movs	r3, #14
 800b7b4:	18fb      	adds	r3, r7, r3
 800b7b6:	8812      	ldrh	r2, [r2, #0]
 800b7b8:	881b      	ldrh	r3, [r3, #0]
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d3df      	bcc.n	800b77e <EPD_1IN54_V2_DisplayPartBaseImage+0xac>
    for (UWORD j = 0; j < Height; j++)
 800b7be:	2112      	movs	r1, #18
 800b7c0:	187b      	adds	r3, r7, r1
 800b7c2:	881a      	ldrh	r2, [r3, #0]
 800b7c4:	187b      	adds	r3, r7, r1
 800b7c6:	3201      	adds	r2, #1
 800b7c8:	801a      	strh	r2, [r3, #0]
 800b7ca:	2312      	movs	r3, #18
 800b7cc:	18fa      	adds	r2, r7, r3
 800b7ce:	230c      	movs	r3, #12
 800b7d0:	18fb      	adds	r3, r7, r3
 800b7d2:	8812      	ldrh	r2, [r2, #0]
 800b7d4:	881b      	ldrh	r3, [r3, #0]
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d3cc      	bcc.n	800b774 <EPD_1IN54_V2_DisplayPartBaseImage+0xa2>
        }
    }
    EPD_1IN54_V2_TurnOnDisplayPart();
 800b7da:	f7ff fdbf 	bl	800b35c <EPD_1IN54_V2_TurnOnDisplayPart>
}
 800b7de:	46c0      	nop			@ (mov r8, r8)
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	b007      	add	sp, #28
 800b7e4:	bd90      	pop	{r4, r7, pc}

0800b7e6 <EPD_1IN54_V2_DisplayPart>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_1IN54_V2_DisplayPart(UBYTE *Image)
{
 800b7e6:	b590      	push	{r4, r7, lr}
 800b7e8:	b087      	sub	sp, #28
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0) ? (EPD_1IN54_V2_WIDTH / 8) : (EPD_1IN54_V2_WIDTH / 8 + 1);
 800b7ee:	2312      	movs	r3, #18
 800b7f0:	18fb      	adds	r3, r7, r3
 800b7f2:	2219      	movs	r2, #25
 800b7f4:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 800b7f6:	2310      	movs	r3, #16
 800b7f8:	18fb      	adds	r3, r7, r3
 800b7fa:	22c8      	movs	r2, #200	@ 0xc8
 800b7fc:	801a      	strh	r2, [r3, #0]

    UDOUBLE Addr = 0;
 800b7fe:	2300      	movs	r3, #0
 800b800:	60fb      	str	r3, [r7, #12]
    EPD_1IN54_V2_SendCommand(0x24);
 800b802:	2024      	movs	r0, #36	@ 0x24
 800b804:	f7ff fd38 	bl	800b278 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++)
 800b808:	2316      	movs	r3, #22
 800b80a:	18fb      	adds	r3, r7, r3
 800b80c:	2200      	movs	r2, #0
 800b80e:	801a      	strh	r2, [r3, #0]
 800b810:	e02a      	b.n	800b868 <EPD_1IN54_V2_DisplayPart+0x82>
    {
        for (UWORD i = 0; i < Width; i++)
 800b812:	2314      	movs	r3, #20
 800b814:	18fb      	adds	r3, r7, r3
 800b816:	2200      	movs	r2, #0
 800b818:	801a      	strh	r2, [r3, #0]
 800b81a:	e017      	b.n	800b84c <EPD_1IN54_V2_DisplayPart+0x66>
        {
            Addr = i + j * Width;
 800b81c:	2414      	movs	r4, #20
 800b81e:	193b      	adds	r3, r7, r4
 800b820:	881a      	ldrh	r2, [r3, #0]
 800b822:	2316      	movs	r3, #22
 800b824:	18fb      	adds	r3, r7, r3
 800b826:	881b      	ldrh	r3, [r3, #0]
 800b828:	2112      	movs	r1, #18
 800b82a:	1879      	adds	r1, r7, r1
 800b82c:	8809      	ldrh	r1, [r1, #0]
 800b82e:	434b      	muls	r3, r1
 800b830:	18d3      	adds	r3, r2, r3
 800b832:	60fb      	str	r3, [r7, #12]
            EPD_1IN54_V2_SendData(Image[Addr]);
 800b834:	687a      	ldr	r2, [r7, #4]
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	18d3      	adds	r3, r2, r3
 800b83a:	781b      	ldrb	r3, [r3, #0]
 800b83c:	0018      	movs	r0, r3
 800b83e:	f7ff fd39 	bl	800b2b4 <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++)
 800b842:	193b      	adds	r3, r7, r4
 800b844:	881a      	ldrh	r2, [r3, #0]
 800b846:	193b      	adds	r3, r7, r4
 800b848:	3201      	adds	r2, #1
 800b84a:	801a      	strh	r2, [r3, #0]
 800b84c:	2314      	movs	r3, #20
 800b84e:	18fa      	adds	r2, r7, r3
 800b850:	2312      	movs	r3, #18
 800b852:	18fb      	adds	r3, r7, r3
 800b854:	8812      	ldrh	r2, [r2, #0]
 800b856:	881b      	ldrh	r3, [r3, #0]
 800b858:	429a      	cmp	r2, r3
 800b85a:	d3df      	bcc.n	800b81c <EPD_1IN54_V2_DisplayPart+0x36>
    for (UWORD j = 0; j < Height; j++)
 800b85c:	2116      	movs	r1, #22
 800b85e:	187b      	adds	r3, r7, r1
 800b860:	881a      	ldrh	r2, [r3, #0]
 800b862:	187b      	adds	r3, r7, r1
 800b864:	3201      	adds	r2, #1
 800b866:	801a      	strh	r2, [r3, #0]
 800b868:	2316      	movs	r3, #22
 800b86a:	18fa      	adds	r2, r7, r3
 800b86c:	2310      	movs	r3, #16
 800b86e:	18fb      	adds	r3, r7, r3
 800b870:	8812      	ldrh	r2, [r2, #0]
 800b872:	881b      	ldrh	r3, [r3, #0]
 800b874:	429a      	cmp	r2, r3
 800b876:	d3cc      	bcc.n	800b812 <EPD_1IN54_V2_DisplayPart+0x2c>
        }
    }

    EPD_1IN54_V2_TurnOnDisplayPart();
 800b878:	f7ff fd70 	bl	800b35c <EPD_1IN54_V2_TurnOnDisplayPart>
}
 800b87c:	46c0      	nop			@ (mov r8, r8)
 800b87e:	46bd      	mov	sp, r7
 800b880:	b007      	add	sp, #28
 800b882:	bd90      	pop	{r4, r7, pc}

0800b884 <EPD_1IN54_V2_Sleep>:
/******************************************************************************
function :	Enter sleep mode
parameter:
******************************************************************************/
void EPD_1IN54_V2_Sleep(void)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_SendCommand(0x10); // enter deep sleep
 800b888:	2010      	movs	r0, #16
 800b88a:	f7ff fcf5 	bl	800b278 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x01);
 800b88e:	2001      	movs	r0, #1
 800b890:	f7ff fd10 	bl	800b2b4 <EPD_1IN54_V2_SendData>
    //    DEV_Delay_ms(100);
}
 800b894:	46c0      	nop			@ (mov r8, r8)
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}
	...

0800b89c <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 800b89c:	b5b0      	push	{r4, r5, r7, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	000c      	movs	r4, r1
 800b8a6:	0010      	movs	r0, r2
 800b8a8:	0019      	movs	r1, r3
 800b8aa:	250a      	movs	r5, #10
 800b8ac:	197b      	adds	r3, r7, r5
 800b8ae:	1c22      	adds	r2, r4, #0
 800b8b0:	801a      	strh	r2, [r3, #0]
 800b8b2:	2408      	movs	r4, #8
 800b8b4:	193b      	adds	r3, r7, r4
 800b8b6:	1c02      	adds	r2, r0, #0
 800b8b8:	801a      	strh	r2, [r3, #0]
 800b8ba:	1dbb      	adds	r3, r7, #6
 800b8bc:	1c0a      	adds	r2, r1, #0
 800b8be:	801a      	strh	r2, [r3, #0]
    Paint.Image = NULL;
 800b8c0:	4b2c      	ldr	r3, [pc, #176]	@ (800b974 <Paint_NewImage+0xd8>)
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 800b8c6:	4b2b      	ldr	r3, [pc, #172]	@ (800b974 <Paint_NewImage+0xd8>)
 800b8c8:	68fa      	ldr	r2, [r7, #12]
 800b8ca:	601a      	str	r2, [r3, #0]

    Paint.WidthMemory = Width;
 800b8cc:	4b29      	ldr	r3, [pc, #164]	@ (800b974 <Paint_NewImage+0xd8>)
 800b8ce:	0029      	movs	r1, r5
 800b8d0:	187a      	adds	r2, r7, r1
 800b8d2:	8812      	ldrh	r2, [r2, #0]
 800b8d4:	811a      	strh	r2, [r3, #8]
    Paint.HeightMemory = Height;
 800b8d6:	4b27      	ldr	r3, [pc, #156]	@ (800b974 <Paint_NewImage+0xd8>)
 800b8d8:	193a      	adds	r2, r7, r4
 800b8da:	8812      	ldrh	r2, [r2, #0]
 800b8dc:	815a      	strh	r2, [r3, #10]
    Paint.Color = Color;
 800b8de:	4a25      	ldr	r2, [pc, #148]	@ (800b974 <Paint_NewImage+0xd8>)
 800b8e0:	2320      	movs	r3, #32
 800b8e2:	18fb      	adds	r3, r7, r3
 800b8e4:	881b      	ldrh	r3, [r3, #0]
 800b8e6:	8193      	strh	r3, [r2, #12]
    Paint.Scale = 2;
 800b8e8:	4b22      	ldr	r3, [pc, #136]	@ (800b974 <Paint_NewImage+0xd8>)
 800b8ea:	2202      	movs	r2, #2
 800b8ec:	82da      	strh	r2, [r3, #22]

    Paint.WidthByte = (Width % 8 == 0) ? (Width / 8) : (Width / 8 + 1);
 800b8ee:	187b      	adds	r3, r7, r1
 800b8f0:	881b      	ldrh	r3, [r3, #0]
 800b8f2:	2207      	movs	r2, #7
 800b8f4:	4013      	ands	r3, r2
 800b8f6:	b29b      	uxth	r3, r3
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d104      	bne.n	800b906 <Paint_NewImage+0x6a>
 800b8fc:	187b      	adds	r3, r7, r1
 800b8fe:	881b      	ldrh	r3, [r3, #0]
 800b900:	08db      	lsrs	r3, r3, #3
 800b902:	b29b      	uxth	r3, r3
 800b904:	e006      	b.n	800b914 <Paint_NewImage+0x78>
 800b906:	230a      	movs	r3, #10
 800b908:	18fb      	adds	r3, r7, r3
 800b90a:	881b      	ldrh	r3, [r3, #0]
 800b90c:	08db      	lsrs	r3, r3, #3
 800b90e:	b29b      	uxth	r3, r3
 800b910:	3301      	adds	r3, #1
 800b912:	b29b      	uxth	r3, r3
 800b914:	4a17      	ldr	r2, [pc, #92]	@ (800b974 <Paint_NewImage+0xd8>)
 800b916:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;
 800b918:	4b16      	ldr	r3, [pc, #88]	@ (800b974 <Paint_NewImage+0xd8>)
 800b91a:	2208      	movs	r2, #8
 800b91c:	18ba      	adds	r2, r7, r2
 800b91e:	8812      	ldrh	r2, [r2, #0]
 800b920:	829a      	strh	r2, [r3, #20]
    //    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
    //    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);

    Paint.Rotate = Rotate;
 800b922:	4b14      	ldr	r3, [pc, #80]	@ (800b974 <Paint_NewImage+0xd8>)
 800b924:	1dba      	adds	r2, r7, #6
 800b926:	8812      	ldrh	r2, [r2, #0]
 800b928:	81da      	strh	r2, [r3, #14]
    Paint.Mirror = MIRROR_NONE;
 800b92a:	4b12      	ldr	r3, [pc, #72]	@ (800b974 <Paint_NewImage+0xd8>)
 800b92c:	2200      	movs	r2, #0
 800b92e:	821a      	strh	r2, [r3, #16]

    if (Rotate == ROTATE_0 || Rotate == ROTATE_180)
 800b930:	1dbb      	adds	r3, r7, #6
 800b932:	881b      	ldrh	r3, [r3, #0]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d003      	beq.n	800b940 <Paint_NewImage+0xa4>
 800b938:	1dbb      	adds	r3, r7, #6
 800b93a:	881b      	ldrh	r3, [r3, #0]
 800b93c:	2bb4      	cmp	r3, #180	@ 0xb4
 800b93e:	d10a      	bne.n	800b956 <Paint_NewImage+0xba>
    {
        Paint.Width = Width;
 800b940:	4b0c      	ldr	r3, [pc, #48]	@ (800b974 <Paint_NewImage+0xd8>)
 800b942:	220a      	movs	r2, #10
 800b944:	18ba      	adds	r2, r7, r2
 800b946:	8812      	ldrh	r2, [r2, #0]
 800b948:	809a      	strh	r2, [r3, #4]
        Paint.Height = Height;
 800b94a:	4b0a      	ldr	r3, [pc, #40]	@ (800b974 <Paint_NewImage+0xd8>)
 800b94c:	2208      	movs	r2, #8
 800b94e:	18ba      	adds	r2, r7, r2
 800b950:	8812      	ldrh	r2, [r2, #0]
 800b952:	80da      	strh	r2, [r3, #6]
 800b954:	e00a      	b.n	800b96c <Paint_NewImage+0xd0>
    }
    else
    {
        Paint.Width = Height;
 800b956:	4b07      	ldr	r3, [pc, #28]	@ (800b974 <Paint_NewImage+0xd8>)
 800b958:	2208      	movs	r2, #8
 800b95a:	18ba      	adds	r2, r7, r2
 800b95c:	8812      	ldrh	r2, [r2, #0]
 800b95e:	809a      	strh	r2, [r3, #4]
        Paint.Height = Width;
 800b960:	4b04      	ldr	r3, [pc, #16]	@ (800b974 <Paint_NewImage+0xd8>)
 800b962:	220a      	movs	r2, #10
 800b964:	18ba      	adds	r2, r7, r2
 800b966:	8812      	ldrh	r2, [r2, #0]
 800b968:	80da      	strh	r2, [r3, #6]
    }
}
 800b96a:	46c0      	nop			@ (mov r8, r8)
 800b96c:	46c0      	nop			@ (mov r8, r8)
 800b96e:	46bd      	mov	sp, r7
 800b970:	b004      	add	sp, #16
 800b972:	bdb0      	pop	{r4, r5, r7, pc}
 800b974:	200005b0 	.word	0x200005b0

0800b978 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b082      	sub	sp, #8
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 800b980:	4b03      	ldr	r3, [pc, #12]	@ (800b990 <Paint_SelectImage+0x18>)
 800b982:	687a      	ldr	r2, [r7, #4]
 800b984:	601a      	str	r2, [r3, #0]
}
 800b986:	46c0      	nop			@ (mov r8, r8)
 800b988:	46bd      	mov	sp, r7
 800b98a:	b002      	add	sp, #8
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	46c0      	nop			@ (mov r8, r8)
 800b990:	200005b0 	.word	0x200005b0

0800b994 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 800b994:	b590      	push	{r4, r7, lr}
 800b996:	b08b      	sub	sp, #44	@ 0x2c
 800b998:	af00      	add	r7, sp, #0
 800b99a:	0004      	movs	r4, r0
 800b99c:	0008      	movs	r0, r1
 800b99e:	0011      	movs	r1, r2
 800b9a0:	1dbb      	adds	r3, r7, #6
 800b9a2:	1c22      	adds	r2, r4, #0
 800b9a4:	801a      	strh	r2, [r3, #0]
 800b9a6:	1d3b      	adds	r3, r7, #4
 800b9a8:	1c02      	adds	r2, r0, #0
 800b9aa:	801a      	strh	r2, [r3, #0]
 800b9ac:	1cbb      	adds	r3, r7, #2
 800b9ae:	1c0a      	adds	r2, r1, #0
 800b9b0:	801a      	strh	r2, [r3, #0]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800b9b2:	4bc4      	ldr	r3, [pc, #784]	@ (800bcc4 <Paint_SetPixel+0x330>)
 800b9b4:	889b      	ldrh	r3, [r3, #4]
 800b9b6:	1dba      	adds	r2, r7, #6
 800b9b8:	8812      	ldrh	r2, [r2, #0]
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d900      	bls.n	800b9c0 <Paint_SetPixel+0x2c>
 800b9be:	e17b      	b.n	800bcb8 <Paint_SetPixel+0x324>
 800b9c0:	4bc0      	ldr	r3, [pc, #768]	@ (800bcc4 <Paint_SetPixel+0x330>)
 800b9c2:	88db      	ldrh	r3, [r3, #6]
 800b9c4:	1d3a      	adds	r2, r7, #4
 800b9c6:	8812      	ldrh	r2, [r2, #0]
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d900      	bls.n	800b9ce <Paint_SetPixel+0x3a>
 800b9cc:	e174      	b.n	800bcb8 <Paint_SetPixel+0x324>
        DE_BUG("Exceeding display boundaries\r\n");
        return;
    }
    UWORD X, Y;

    switch (Paint.Rotate)
 800b9ce:	4bbd      	ldr	r3, [pc, #756]	@ (800bcc4 <Paint_SetPixel+0x330>)
 800b9d0:	89db      	ldrh	r3, [r3, #14]
 800b9d2:	2287      	movs	r2, #135	@ 0x87
 800b9d4:	0052      	lsls	r2, r2, #1
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d03d      	beq.n	800ba56 <Paint_SetPixel+0xc2>
 800b9da:	2287      	movs	r2, #135	@ 0x87
 800b9dc:	0052      	lsls	r2, r2, #1
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	dd00      	ble.n	800b9e4 <Paint_SetPixel+0x50>
 800b9e2:	e16b      	b.n	800bcbc <Paint_SetPixel+0x328>
 800b9e4:	2bb4      	cmp	r3, #180	@ 0xb4
 800b9e6:	d021      	beq.n	800ba2c <Paint_SetPixel+0x98>
 800b9e8:	dd00      	ble.n	800b9ec <Paint_SetPixel+0x58>
 800b9ea:	e167      	b.n	800bcbc <Paint_SetPixel+0x328>
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d002      	beq.n	800b9f6 <Paint_SetPixel+0x62>
 800b9f0:	2b5a      	cmp	r3, #90	@ 0x5a
 800b9f2:	d00b      	beq.n	800ba0c <Paint_SetPixel+0x78>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 800b9f4:	e162      	b.n	800bcbc <Paint_SetPixel+0x328>
        X = Xpoint;
 800b9f6:	2326      	movs	r3, #38	@ 0x26
 800b9f8:	18fb      	adds	r3, r7, r3
 800b9fa:	1dba      	adds	r2, r7, #6
 800b9fc:	8812      	ldrh	r2, [r2, #0]
 800b9fe:	801a      	strh	r2, [r3, #0]
        Y = Ypoint;
 800ba00:	2324      	movs	r3, #36	@ 0x24
 800ba02:	18fb      	adds	r3, r7, r3
 800ba04:	1d3a      	adds	r2, r7, #4
 800ba06:	8812      	ldrh	r2, [r2, #0]
 800ba08:	801a      	strh	r2, [r3, #0]
        break;
 800ba0a:	e034      	b.n	800ba76 <Paint_SetPixel+0xe2>
        X = Paint.WidthMemory - Ypoint - 1;
 800ba0c:	4bad      	ldr	r3, [pc, #692]	@ (800bcc4 <Paint_SetPixel+0x330>)
 800ba0e:	891a      	ldrh	r2, [r3, #8]
 800ba10:	1d3b      	adds	r3, r7, #4
 800ba12:	881b      	ldrh	r3, [r3, #0]
 800ba14:	1ad3      	subs	r3, r2, r3
 800ba16:	b29a      	uxth	r2, r3
 800ba18:	2326      	movs	r3, #38	@ 0x26
 800ba1a:	18fb      	adds	r3, r7, r3
 800ba1c:	3a01      	subs	r2, #1
 800ba1e:	801a      	strh	r2, [r3, #0]
        Y = Xpoint;
 800ba20:	2324      	movs	r3, #36	@ 0x24
 800ba22:	18fb      	adds	r3, r7, r3
 800ba24:	1dba      	adds	r2, r7, #6
 800ba26:	8812      	ldrh	r2, [r2, #0]
 800ba28:	801a      	strh	r2, [r3, #0]
        break;
 800ba2a:	e024      	b.n	800ba76 <Paint_SetPixel+0xe2>
        X = Paint.WidthMemory - Xpoint - 1;
 800ba2c:	4ba5      	ldr	r3, [pc, #660]	@ (800bcc4 <Paint_SetPixel+0x330>)
 800ba2e:	891a      	ldrh	r2, [r3, #8]
 800ba30:	1dbb      	adds	r3, r7, #6
 800ba32:	881b      	ldrh	r3, [r3, #0]
 800ba34:	1ad3      	subs	r3, r2, r3
 800ba36:	b29a      	uxth	r2, r3
 800ba38:	2326      	movs	r3, #38	@ 0x26
 800ba3a:	18fb      	adds	r3, r7, r3
 800ba3c:	3a01      	subs	r2, #1
 800ba3e:	801a      	strh	r2, [r3, #0]
        Y = Paint.HeightMemory - Ypoint - 1;
 800ba40:	4ba0      	ldr	r3, [pc, #640]	@ (800bcc4 <Paint_SetPixel+0x330>)
 800ba42:	895a      	ldrh	r2, [r3, #10]
 800ba44:	1d3b      	adds	r3, r7, #4
 800ba46:	881b      	ldrh	r3, [r3, #0]
 800ba48:	1ad3      	subs	r3, r2, r3
 800ba4a:	b29a      	uxth	r2, r3
 800ba4c:	2324      	movs	r3, #36	@ 0x24
 800ba4e:	18fb      	adds	r3, r7, r3
 800ba50:	3a01      	subs	r2, #1
 800ba52:	801a      	strh	r2, [r3, #0]
        break;
 800ba54:	e00f      	b.n	800ba76 <Paint_SetPixel+0xe2>
        X = Ypoint;
 800ba56:	2326      	movs	r3, #38	@ 0x26
 800ba58:	18fb      	adds	r3, r7, r3
 800ba5a:	1d3a      	adds	r2, r7, #4
 800ba5c:	8812      	ldrh	r2, [r2, #0]
 800ba5e:	801a      	strh	r2, [r3, #0]
        Y = Paint.HeightMemory - Xpoint - 1;
 800ba60:	4b98      	ldr	r3, [pc, #608]	@ (800bcc4 <Paint_SetPixel+0x330>)
 800ba62:	895a      	ldrh	r2, [r3, #10]
 800ba64:	1dbb      	adds	r3, r7, #6
 800ba66:	881b      	ldrh	r3, [r3, #0]
 800ba68:	1ad3      	subs	r3, r2, r3
 800ba6a:	b29a      	uxth	r2, r3
 800ba6c:	2324      	movs	r3, #36	@ 0x24
 800ba6e:	18fb      	adds	r3, r7, r3
 800ba70:	3a01      	subs	r2, #1
 800ba72:	801a      	strh	r2, [r3, #0]
        break;
 800ba74:	46c0      	nop			@ (mov r8, r8)
    }

    switch (Paint.Mirror)
 800ba76:	4b93      	ldr	r3, [pc, #588]	@ (800bcc4 <Paint_SetPixel+0x330>)
 800ba78:	8a1b      	ldrh	r3, [r3, #16]
 800ba7a:	2b03      	cmp	r3, #3
 800ba7c:	d020      	beq.n	800bac0 <Paint_SetPixel+0x12c>
 800ba7e:	dd00      	ble.n	800ba82 <Paint_SetPixel+0xee>
 800ba80:	e11e      	b.n	800bcc0 <Paint_SetPixel+0x32c>
 800ba82:	2b02      	cmp	r3, #2
 800ba84:	d011      	beq.n	800baaa <Paint_SetPixel+0x116>
 800ba86:	dd00      	ble.n	800ba8a <Paint_SetPixel+0xf6>
 800ba88:	e11a      	b.n	800bcc0 <Paint_SetPixel+0x32c>
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d02d      	beq.n	800baea <Paint_SetPixel+0x156>
 800ba8e:	2b01      	cmp	r3, #1
 800ba90:	d000      	beq.n	800ba94 <Paint_SetPixel+0x100>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
        Y = Paint.HeightMemory - Y - 1;
        break;
    default:
        return;
 800ba92:	e115      	b.n	800bcc0 <Paint_SetPixel+0x32c>
        X = Paint.WidthMemory - X - 1;
 800ba94:	4b8b      	ldr	r3, [pc, #556]	@ (800bcc4 <Paint_SetPixel+0x330>)
 800ba96:	891a      	ldrh	r2, [r3, #8]
 800ba98:	2126      	movs	r1, #38	@ 0x26
 800ba9a:	187b      	adds	r3, r7, r1
 800ba9c:	881b      	ldrh	r3, [r3, #0]
 800ba9e:	1ad3      	subs	r3, r2, r3
 800baa0:	b29a      	uxth	r2, r3
 800baa2:	187b      	adds	r3, r7, r1
 800baa4:	3a01      	subs	r2, #1
 800baa6:	801a      	strh	r2, [r3, #0]
        break;
 800baa8:	e020      	b.n	800baec <Paint_SetPixel+0x158>
        Y = Paint.HeightMemory - Y - 1;
 800baaa:	4b86      	ldr	r3, [pc, #536]	@ (800bcc4 <Paint_SetPixel+0x330>)
 800baac:	895a      	ldrh	r2, [r3, #10]
 800baae:	2124      	movs	r1, #36	@ 0x24
 800bab0:	187b      	adds	r3, r7, r1
 800bab2:	881b      	ldrh	r3, [r3, #0]
 800bab4:	1ad3      	subs	r3, r2, r3
 800bab6:	b29a      	uxth	r2, r3
 800bab8:	187b      	adds	r3, r7, r1
 800baba:	3a01      	subs	r2, #1
 800babc:	801a      	strh	r2, [r3, #0]
        break;
 800babe:	e015      	b.n	800baec <Paint_SetPixel+0x158>
        X = Paint.WidthMemory - X - 1;
 800bac0:	4b80      	ldr	r3, [pc, #512]	@ (800bcc4 <Paint_SetPixel+0x330>)
 800bac2:	891a      	ldrh	r2, [r3, #8]
 800bac4:	2126      	movs	r1, #38	@ 0x26
 800bac6:	187b      	adds	r3, r7, r1
 800bac8:	881b      	ldrh	r3, [r3, #0]
 800baca:	1ad3      	subs	r3, r2, r3
 800bacc:	b29a      	uxth	r2, r3
 800bace:	187b      	adds	r3, r7, r1
 800bad0:	3a01      	subs	r2, #1
 800bad2:	801a      	strh	r2, [r3, #0]
        Y = Paint.HeightMemory - Y - 1;
 800bad4:	4b7b      	ldr	r3, [pc, #492]	@ (800bcc4 <Paint_SetPixel+0x330>)
 800bad6:	895a      	ldrh	r2, [r3, #10]
 800bad8:	2124      	movs	r1, #36	@ 0x24
 800bada:	187b      	adds	r3, r7, r1
 800badc:	881b      	ldrh	r3, [r3, #0]
 800bade:	1ad3      	subs	r3, r2, r3
 800bae0:	b29a      	uxth	r2, r3
 800bae2:	187b      	adds	r3, r7, r1
 800bae4:	3a01      	subs	r2, #1
 800bae6:	801a      	strh	r2, [r3, #0]
        break;
 800bae8:	e000      	b.n	800baec <Paint_SetPixel+0x158>
        break;
 800baea:	46c0      	nop			@ (mov r8, r8)
    }

    if (X > Paint.WidthMemory || Y > Paint.HeightMemory)
 800baec:	4b75      	ldr	r3, [pc, #468]	@ (800bcc4 <Paint_SetPixel+0x330>)
 800baee:	891b      	ldrh	r3, [r3, #8]
 800baf0:	2026      	movs	r0, #38	@ 0x26
 800baf2:	183a      	adds	r2, r7, r0
 800baf4:	8812      	ldrh	r2, [r2, #0]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d900      	bls.n	800bafc <Paint_SetPixel+0x168>
 800bafa:	e0e5      	b.n	800bcc8 <Paint_SetPixel+0x334>
 800bafc:	4b71      	ldr	r3, [pc, #452]	@ (800bcc4 <Paint_SetPixel+0x330>)
 800bafe:	895b      	ldrh	r3, [r3, #10]
 800bb00:	2424      	movs	r4, #36	@ 0x24
 800bb02:	193a      	adds	r2, r7, r4
 800bb04:	8812      	ldrh	r2, [r2, #0]
 800bb06:	429a      	cmp	r2, r3
 800bb08:	d900      	bls.n	800bb0c <Paint_SetPixel+0x178>
 800bb0a:	e0dd      	b.n	800bcc8 <Paint_SetPixel+0x334>
    {
        DE_BUG("Exceeding display boundaries\r\n");
        return;
    }

    if (Paint.Scale == 2)
 800bb0c:	4b6d      	ldr	r3, [pc, #436]	@ (800bcc4 <Paint_SetPixel+0x330>)
 800bb0e:	8adb      	ldrh	r3, [r3, #22]
 800bb10:	2b02      	cmp	r3, #2
 800bb12:	d143      	bne.n	800bb9c <Paint_SetPixel+0x208>
    {
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 800bb14:	183b      	adds	r3, r7, r0
 800bb16:	881b      	ldrh	r3, [r3, #0]
 800bb18:	08db      	lsrs	r3, r3, #3
 800bb1a:	b29b      	uxth	r3, r3
 800bb1c:	0019      	movs	r1, r3
 800bb1e:	193b      	adds	r3, r7, r4
 800bb20:	881b      	ldrh	r3, [r3, #0]
 800bb22:	4a68      	ldr	r2, [pc, #416]	@ (800bcc4 <Paint_SetPixel+0x330>)
 800bb24:	8a52      	ldrh	r2, [r2, #18]
 800bb26:	4353      	muls	r3, r2
 800bb28:	18cb      	adds	r3, r1, r3
 800bb2a:	613b      	str	r3, [r7, #16]
        UBYTE Rdata = Paint.Image[Addr];
 800bb2c:	4b65      	ldr	r3, [pc, #404]	@ (800bcc4 <Paint_SetPixel+0x330>)
 800bb2e:	681a      	ldr	r2, [r3, #0]
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	18d2      	adds	r2, r2, r3
 800bb34:	210f      	movs	r1, #15
 800bb36:	187b      	adds	r3, r7, r1
 800bb38:	7812      	ldrb	r2, [r2, #0]
 800bb3a:	701a      	strb	r2, [r3, #0]
        if (Color == BLACK)
 800bb3c:	1cbb      	adds	r3, r7, #2
 800bb3e:	881b      	ldrh	r3, [r3, #0]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d115      	bne.n	800bb70 <Paint_SetPixel+0x1dc>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 800bb44:	183b      	adds	r3, r7, r0
 800bb46:	881b      	ldrh	r3, [r3, #0]
 800bb48:	2207      	movs	r2, #7
 800bb4a:	4013      	ands	r3, r2
 800bb4c:	2280      	movs	r2, #128	@ 0x80
 800bb4e:	411a      	asrs	r2, r3
 800bb50:	0013      	movs	r3, r2
 800bb52:	b25b      	sxtb	r3, r3
 800bb54:	43db      	mvns	r3, r3
 800bb56:	b25b      	sxtb	r3, r3
 800bb58:	187a      	adds	r2, r7, r1
 800bb5a:	7812      	ldrb	r2, [r2, #0]
 800bb5c:	b252      	sxtb	r2, r2
 800bb5e:	4013      	ands	r3, r2
 800bb60:	b259      	sxtb	r1, r3
 800bb62:	4b58      	ldr	r3, [pc, #352]	@ (800bcc4 <Paint_SetPixel+0x330>)
 800bb64:	681a      	ldr	r2, [r3, #0]
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	18d3      	adds	r3, r2, r3
 800bb6a:	b2ca      	uxtb	r2, r1
 800bb6c:	701a      	strb	r2, [r3, #0]
 800bb6e:	e0ac      	b.n	800bcca <Paint_SetPixel+0x336>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 800bb70:	2326      	movs	r3, #38	@ 0x26
 800bb72:	18fb      	adds	r3, r7, r3
 800bb74:	881b      	ldrh	r3, [r3, #0]
 800bb76:	2207      	movs	r2, #7
 800bb78:	4013      	ands	r3, r2
 800bb7a:	2280      	movs	r2, #128	@ 0x80
 800bb7c:	411a      	asrs	r2, r3
 800bb7e:	0013      	movs	r3, r2
 800bb80:	b25a      	sxtb	r2, r3
 800bb82:	230f      	movs	r3, #15
 800bb84:	18fb      	adds	r3, r7, r3
 800bb86:	781b      	ldrb	r3, [r3, #0]
 800bb88:	b25b      	sxtb	r3, r3
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	b259      	sxtb	r1, r3
 800bb8e:	4b4d      	ldr	r3, [pc, #308]	@ (800bcc4 <Paint_SetPixel+0x330>)
 800bb90:	681a      	ldr	r2, [r3, #0]
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	18d3      	adds	r3, r2, r3
 800bb96:	b2ca      	uxtb	r2, r1
 800bb98:	701a      	strb	r2, [r3, #0]
 800bb9a:	e096      	b.n	800bcca <Paint_SetPixel+0x336>
    }
    else if (Paint.Scale == 4)
 800bb9c:	4b49      	ldr	r3, [pc, #292]	@ (800bcc4 <Paint_SetPixel+0x330>)
 800bb9e:	8adb      	ldrh	r3, [r3, #22]
 800bba0:	2b04      	cmp	r3, #4
 800bba2:	d145      	bne.n	800bc30 <Paint_SetPixel+0x29c>
    {
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 800bba4:	2426      	movs	r4, #38	@ 0x26
 800bba6:	193b      	adds	r3, r7, r4
 800bba8:	881b      	ldrh	r3, [r3, #0]
 800bbaa:	089b      	lsrs	r3, r3, #2
 800bbac:	b29b      	uxth	r3, r3
 800bbae:	0019      	movs	r1, r3
 800bbb0:	2324      	movs	r3, #36	@ 0x24
 800bbb2:	18fb      	adds	r3, r7, r3
 800bbb4:	881b      	ldrh	r3, [r3, #0]
 800bbb6:	4a43      	ldr	r2, [pc, #268]	@ (800bcc4 <Paint_SetPixel+0x330>)
 800bbb8:	8a52      	ldrh	r2, [r2, #18]
 800bbba:	4353      	muls	r3, r2
 800bbbc:	18cb      	adds	r3, r1, r3
 800bbbe:	61bb      	str	r3, [r7, #24]
        Color = Color % 4; // Guaranteed color scale is 4  --- 0~3
 800bbc0:	1cbb      	adds	r3, r7, #2
 800bbc2:	1cba      	adds	r2, r7, #2
 800bbc4:	8812      	ldrh	r2, [r2, #0]
 800bbc6:	2103      	movs	r1, #3
 800bbc8:	400a      	ands	r2, r1
 800bbca:	801a      	strh	r2, [r3, #0]
        UBYTE Rdata = Paint.Image[Addr];
 800bbcc:	4b3d      	ldr	r3, [pc, #244]	@ (800bcc4 <Paint_SetPixel+0x330>)
 800bbce:	681a      	ldr	r2, [r3, #0]
 800bbd0:	69bb      	ldr	r3, [r7, #24]
 800bbd2:	18d2      	adds	r2, r2, r3
 800bbd4:	2017      	movs	r0, #23
 800bbd6:	183b      	adds	r3, r7, r0
 800bbd8:	7812      	ldrb	r2, [r2, #0]
 800bbda:	701a      	strb	r2, [r3, #0]

        Rdata = Rdata & (~(0xC0 >> ((X % 4) * 2)));
 800bbdc:	0021      	movs	r1, r4
 800bbde:	187b      	adds	r3, r7, r1
 800bbe0:	881b      	ldrh	r3, [r3, #0]
 800bbe2:	2203      	movs	r2, #3
 800bbe4:	4013      	ands	r3, r2
 800bbe6:	005b      	lsls	r3, r3, #1
 800bbe8:	22c0      	movs	r2, #192	@ 0xc0
 800bbea:	411a      	asrs	r2, r3
 800bbec:	0013      	movs	r3, r2
 800bbee:	b25b      	sxtb	r3, r3
 800bbf0:	43db      	mvns	r3, r3
 800bbf2:	b25b      	sxtb	r3, r3
 800bbf4:	183a      	adds	r2, r7, r0
 800bbf6:	7812      	ldrb	r2, [r2, #0]
 800bbf8:	b252      	sxtb	r2, r2
 800bbfa:	4013      	ands	r3, r2
 800bbfc:	b25a      	sxtb	r2, r3
 800bbfe:	183b      	adds	r3, r7, r0
 800bc00:	701a      	strb	r2, [r3, #0]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4) * 2));
 800bc02:	1cbb      	adds	r3, r7, #2
 800bc04:	881b      	ldrh	r3, [r3, #0]
 800bc06:	019a      	lsls	r2, r3, #6
 800bc08:	187b      	adds	r3, r7, r1
 800bc0a:	881b      	ldrh	r3, [r3, #0]
 800bc0c:	2103      	movs	r1, #3
 800bc0e:	400b      	ands	r3, r1
 800bc10:	005b      	lsls	r3, r3, #1
 800bc12:	411a      	asrs	r2, r3
 800bc14:	0013      	movs	r3, r2
 800bc16:	b25a      	sxtb	r2, r3
 800bc18:	183b      	adds	r3, r7, r0
 800bc1a:	781b      	ldrb	r3, [r3, #0]
 800bc1c:	b25b      	sxtb	r3, r3
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	b259      	sxtb	r1, r3
 800bc22:	4b28      	ldr	r3, [pc, #160]	@ (800bcc4 <Paint_SetPixel+0x330>)
 800bc24:	681a      	ldr	r2, [r3, #0]
 800bc26:	69bb      	ldr	r3, [r7, #24]
 800bc28:	18d3      	adds	r3, r2, r3
 800bc2a:	b2ca      	uxtb	r2, r1
 800bc2c:	701a      	strb	r2, [r3, #0]
 800bc2e:	e04c      	b.n	800bcca <Paint_SetPixel+0x336>
    }
    else if (Paint.Scale == 7)
 800bc30:	4b24      	ldr	r3, [pc, #144]	@ (800bcc4 <Paint_SetPixel+0x330>)
 800bc32:	8adb      	ldrh	r3, [r3, #22]
 800bc34:	2b07      	cmp	r3, #7
 800bc36:	d148      	bne.n	800bcca <Paint_SetPixel+0x336>
    {
        UDOUBLE Addr = X / 2 + Y * Paint.WidthByte;
 800bc38:	2426      	movs	r4, #38	@ 0x26
 800bc3a:	193b      	adds	r3, r7, r4
 800bc3c:	881b      	ldrh	r3, [r3, #0]
 800bc3e:	085b      	lsrs	r3, r3, #1
 800bc40:	b29b      	uxth	r3, r3
 800bc42:	0019      	movs	r1, r3
 800bc44:	2324      	movs	r3, #36	@ 0x24
 800bc46:	18fb      	adds	r3, r7, r3
 800bc48:	881b      	ldrh	r3, [r3, #0]
 800bc4a:	4a1e      	ldr	r2, [pc, #120]	@ (800bcc4 <Paint_SetPixel+0x330>)
 800bc4c:	8a52      	ldrh	r2, [r2, #18]
 800bc4e:	4353      	muls	r3, r2
 800bc50:	18cb      	adds	r3, r1, r3
 800bc52:	623b      	str	r3, [r7, #32]
        UBYTE Rdata = Paint.Image[Addr];
 800bc54:	4b1b      	ldr	r3, [pc, #108]	@ (800bcc4 <Paint_SetPixel+0x330>)
 800bc56:	681a      	ldr	r2, [r3, #0]
 800bc58:	6a3b      	ldr	r3, [r7, #32]
 800bc5a:	18d2      	adds	r2, r2, r3
 800bc5c:	201f      	movs	r0, #31
 800bc5e:	183b      	adds	r3, r7, r0
 800bc60:	7812      	ldrb	r2, [r2, #0]
 800bc62:	701a      	strb	r2, [r3, #0]
        Rdata = Rdata & (~(0xF0 >> ((X % 2) * 4))); // Clear first, then set value
 800bc64:	0021      	movs	r1, r4
 800bc66:	187b      	adds	r3, r7, r1
 800bc68:	881b      	ldrh	r3, [r3, #0]
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	4013      	ands	r3, r2
 800bc6e:	009b      	lsls	r3, r3, #2
 800bc70:	22f0      	movs	r2, #240	@ 0xf0
 800bc72:	411a      	asrs	r2, r3
 800bc74:	0013      	movs	r3, r2
 800bc76:	b25b      	sxtb	r3, r3
 800bc78:	43db      	mvns	r3, r3
 800bc7a:	b25b      	sxtb	r3, r3
 800bc7c:	183a      	adds	r2, r7, r0
 800bc7e:	7812      	ldrb	r2, [r2, #0]
 800bc80:	b252      	sxtb	r2, r2
 800bc82:	4013      	ands	r3, r2
 800bc84:	b25a      	sxtb	r2, r3
 800bc86:	183b      	adds	r3, r7, r0
 800bc88:	701a      	strb	r2, [r3, #0]
        Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2) * 4));
 800bc8a:	1cbb      	adds	r3, r7, #2
 800bc8c:	881b      	ldrh	r3, [r3, #0]
 800bc8e:	011a      	lsls	r2, r3, #4
 800bc90:	187b      	adds	r3, r7, r1
 800bc92:	881b      	ldrh	r3, [r3, #0]
 800bc94:	2101      	movs	r1, #1
 800bc96:	400b      	ands	r3, r1
 800bc98:	009b      	lsls	r3, r3, #2
 800bc9a:	411a      	asrs	r2, r3
 800bc9c:	0013      	movs	r3, r2
 800bc9e:	b25a      	sxtb	r2, r3
 800bca0:	183b      	adds	r3, r7, r0
 800bca2:	781b      	ldrb	r3, [r3, #0]
 800bca4:	b25b      	sxtb	r3, r3
 800bca6:	4313      	orrs	r3, r2
 800bca8:	b259      	sxtb	r1, r3
 800bcaa:	4b06      	ldr	r3, [pc, #24]	@ (800bcc4 <Paint_SetPixel+0x330>)
 800bcac:	681a      	ldr	r2, [r3, #0]
 800bcae:	6a3b      	ldr	r3, [r7, #32]
 800bcb0:	18d3      	adds	r3, r2, r3
 800bcb2:	b2ca      	uxtb	r2, r1
 800bcb4:	701a      	strb	r2, [r3, #0]
 800bcb6:	e008      	b.n	800bcca <Paint_SetPixel+0x336>
        return;
 800bcb8:	46c0      	nop			@ (mov r8, r8)
 800bcba:	e006      	b.n	800bcca <Paint_SetPixel+0x336>
        return;
 800bcbc:	46c0      	nop			@ (mov r8, r8)
 800bcbe:	e004      	b.n	800bcca <Paint_SetPixel+0x336>
        return;
 800bcc0:	46c0      	nop			@ (mov r8, r8)
 800bcc2:	e002      	b.n	800bcca <Paint_SetPixel+0x336>
 800bcc4:	200005b0 	.word	0x200005b0
        return;
 800bcc8:	46c0      	nop			@ (mov r8, r8)
        // printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
    }
}
 800bcca:	46bd      	mov	sp, r7
 800bccc:	b00b      	add	sp, #44	@ 0x2c
 800bcce:	bd90      	pop	{r4, r7, pc}

0800bcd0 <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b086      	sub	sp, #24
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	0002      	movs	r2, r0
 800bcd8:	1dbb      	adds	r3, r7, #6
 800bcda:	801a      	strh	r2, [r3, #0]
    if (Paint.Scale == 2 || Paint.Scale == 4)
 800bcdc:	4b42      	ldr	r3, [pc, #264]	@ (800bde8 <Paint_Clear+0x118>)
 800bcde:	8adb      	ldrh	r3, [r3, #22]
 800bce0:	2b02      	cmp	r3, #2
 800bce2:	d003      	beq.n	800bcec <Paint_Clear+0x1c>
 800bce4:	4b40      	ldr	r3, [pc, #256]	@ (800bde8 <Paint_Clear+0x118>)
 800bce6:	8adb      	ldrh	r3, [r3, #22]
 800bce8:	2b04      	cmp	r3, #4
 800bcea:	d136      	bne.n	800bd5a <Paint_Clear+0x8a>
    {
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++)
 800bcec:	2316      	movs	r3, #22
 800bcee:	18fb      	adds	r3, r7, r3
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	801a      	strh	r2, [r3, #0]
 800bcf4:	e029      	b.n	800bd4a <Paint_Clear+0x7a>
        {
            for (UWORD X = 0; X < Paint.WidthByte; X++)
 800bcf6:	2314      	movs	r3, #20
 800bcf8:	18fb      	adds	r3, r7, r3
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	801a      	strh	r2, [r3, #0]
 800bcfe:	e017      	b.n	800bd30 <Paint_Clear+0x60>
            { // 8 pixel =  1 byte
                UDOUBLE Addr = X + Y * Paint.WidthByte;
 800bd00:	2014      	movs	r0, #20
 800bd02:	183b      	adds	r3, r7, r0
 800bd04:	881a      	ldrh	r2, [r3, #0]
 800bd06:	2316      	movs	r3, #22
 800bd08:	18fb      	adds	r3, r7, r3
 800bd0a:	881b      	ldrh	r3, [r3, #0]
 800bd0c:	4936      	ldr	r1, [pc, #216]	@ (800bde8 <Paint_Clear+0x118>)
 800bd0e:	8a49      	ldrh	r1, [r1, #18]
 800bd10:	434b      	muls	r3, r1
 800bd12:	18d3      	adds	r3, r2, r3
 800bd14:	60bb      	str	r3, [r7, #8]
                Paint.Image[Addr] = Color;
 800bd16:	4b34      	ldr	r3, [pc, #208]	@ (800bde8 <Paint_Clear+0x118>)
 800bd18:	681a      	ldr	r2, [r3, #0]
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	18d3      	adds	r3, r2, r3
 800bd1e:	1dba      	adds	r2, r7, #6
 800bd20:	8812      	ldrh	r2, [r2, #0]
 800bd22:	b2d2      	uxtb	r2, r2
 800bd24:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++)
 800bd26:	183b      	adds	r3, r7, r0
 800bd28:	881a      	ldrh	r2, [r3, #0]
 800bd2a:	183b      	adds	r3, r7, r0
 800bd2c:	3201      	adds	r2, #1
 800bd2e:	801a      	strh	r2, [r3, #0]
 800bd30:	4b2d      	ldr	r3, [pc, #180]	@ (800bde8 <Paint_Clear+0x118>)
 800bd32:	8a5b      	ldrh	r3, [r3, #18]
 800bd34:	2214      	movs	r2, #20
 800bd36:	18ba      	adds	r2, r7, r2
 800bd38:	8812      	ldrh	r2, [r2, #0]
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d3e0      	bcc.n	800bd00 <Paint_Clear+0x30>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++)
 800bd3e:	2116      	movs	r1, #22
 800bd40:	187b      	adds	r3, r7, r1
 800bd42:	881a      	ldrh	r2, [r3, #0]
 800bd44:	187b      	adds	r3, r7, r1
 800bd46:	3201      	adds	r2, #1
 800bd48:	801a      	strh	r2, [r3, #0]
 800bd4a:	4b27      	ldr	r3, [pc, #156]	@ (800bde8 <Paint_Clear+0x118>)
 800bd4c:	8a9b      	ldrh	r3, [r3, #20]
 800bd4e:	2216      	movs	r2, #22
 800bd50:	18ba      	adds	r2, r7, r2
 800bd52:	8812      	ldrh	r2, [r2, #0]
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d3ce      	bcc.n	800bcf6 <Paint_Clear+0x26>
 800bd58:	e041      	b.n	800bdde <Paint_Clear+0x10e>
            }
        }
    }
    else if (Paint.Scale == 7)
 800bd5a:	4b23      	ldr	r3, [pc, #140]	@ (800bde8 <Paint_Clear+0x118>)
 800bd5c:	8adb      	ldrh	r3, [r3, #22]
 800bd5e:	2b07      	cmp	r3, #7
 800bd60:	d13d      	bne.n	800bdde <Paint_Clear+0x10e>
    {
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++)
 800bd62:	2312      	movs	r3, #18
 800bd64:	18fb      	adds	r3, r7, r3
 800bd66:	2200      	movs	r2, #0
 800bd68:	801a      	strh	r2, [r3, #0]
 800bd6a:	e030      	b.n	800bdce <Paint_Clear+0xfe>
        {
            for (UWORD X = 0; X < Paint.WidthByte; X++)
 800bd6c:	2310      	movs	r3, #16
 800bd6e:	18fb      	adds	r3, r7, r3
 800bd70:	2200      	movs	r2, #0
 800bd72:	801a      	strh	r2, [r3, #0]
 800bd74:	e01e      	b.n	800bdb4 <Paint_Clear+0xe4>
            {
                UDOUBLE Addr = X + Y * Paint.WidthByte;
 800bd76:	2010      	movs	r0, #16
 800bd78:	183b      	adds	r3, r7, r0
 800bd7a:	881a      	ldrh	r2, [r3, #0]
 800bd7c:	2312      	movs	r3, #18
 800bd7e:	18fb      	adds	r3, r7, r3
 800bd80:	881b      	ldrh	r3, [r3, #0]
 800bd82:	4919      	ldr	r1, [pc, #100]	@ (800bde8 <Paint_Clear+0x118>)
 800bd84:	8a49      	ldrh	r1, [r1, #18]
 800bd86:	434b      	muls	r3, r1
 800bd88:	18d3      	adds	r3, r2, r3
 800bd8a:	60fb      	str	r3, [r7, #12]
                Paint.Image[Addr] = (Color << 4) | Color;
 800bd8c:	1dbb      	adds	r3, r7, #6
 800bd8e:	881b      	ldrh	r3, [r3, #0]
 800bd90:	011b      	lsls	r3, r3, #4
 800bd92:	b25a      	sxtb	r2, r3
 800bd94:	1dbb      	adds	r3, r7, #6
 800bd96:	881b      	ldrh	r3, [r3, #0]
 800bd98:	b25b      	sxtb	r3, r3
 800bd9a:	4313      	orrs	r3, r2
 800bd9c:	b259      	sxtb	r1, r3
 800bd9e:	4b12      	ldr	r3, [pc, #72]	@ (800bde8 <Paint_Clear+0x118>)
 800bda0:	681a      	ldr	r2, [r3, #0]
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	18d3      	adds	r3, r2, r3
 800bda6:	b2ca      	uxtb	r2, r1
 800bda8:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++)
 800bdaa:	183b      	adds	r3, r7, r0
 800bdac:	881a      	ldrh	r2, [r3, #0]
 800bdae:	183b      	adds	r3, r7, r0
 800bdb0:	3201      	adds	r2, #1
 800bdb2:	801a      	strh	r2, [r3, #0]
 800bdb4:	4b0c      	ldr	r3, [pc, #48]	@ (800bde8 <Paint_Clear+0x118>)
 800bdb6:	8a5b      	ldrh	r3, [r3, #18]
 800bdb8:	2210      	movs	r2, #16
 800bdba:	18ba      	adds	r2, r7, r2
 800bdbc:	8812      	ldrh	r2, [r2, #0]
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d3d9      	bcc.n	800bd76 <Paint_Clear+0xa6>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++)
 800bdc2:	2112      	movs	r1, #18
 800bdc4:	187b      	adds	r3, r7, r1
 800bdc6:	881a      	ldrh	r2, [r3, #0]
 800bdc8:	187b      	adds	r3, r7, r1
 800bdca:	3201      	adds	r2, #1
 800bdcc:	801a      	strh	r2, [r3, #0]
 800bdce:	4b06      	ldr	r3, [pc, #24]	@ (800bde8 <Paint_Clear+0x118>)
 800bdd0:	8a9b      	ldrh	r3, [r3, #20]
 800bdd2:	2212      	movs	r2, #18
 800bdd4:	18ba      	adds	r2, r7, r2
 800bdd6:	8812      	ldrh	r2, [r2, #0]
 800bdd8:	429a      	cmp	r2, r3
 800bdda:	d3c7      	bcc.n	800bd6c <Paint_Clear+0x9c>
            }
        }
    }
}
 800bddc:	e7ff      	b.n	800bdde <Paint_Clear+0x10e>
 800bdde:	46c0      	nop			@ (mov r8, r8)
 800bde0:	46bd      	mov	sp, r7
 800bde2:	b006      	add	sp, #24
 800bde4:	bd80      	pop	{r7, pc}
 800bde6:	46c0      	nop			@ (mov r8, r8)
 800bde8:	200005b0 	.word	0x200005b0

0800bdec <Paint_ClearWindows>:
    Xend   : x end point
    Yend   : y end point
    Color  : Painted colors
******************************************************************************/
void Paint_ClearWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, UWORD Color)
{
 800bdec:	b5b0      	push	{r4, r5, r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	0005      	movs	r5, r0
 800bdf4:	000c      	movs	r4, r1
 800bdf6:	0010      	movs	r0, r2
 800bdf8:	0019      	movs	r1, r3
 800bdfa:	1dbb      	adds	r3, r7, #6
 800bdfc:	1c2a      	adds	r2, r5, #0
 800bdfe:	801a      	strh	r2, [r3, #0]
 800be00:	1d3b      	adds	r3, r7, #4
 800be02:	1c22      	adds	r2, r4, #0
 800be04:	801a      	strh	r2, [r3, #0]
 800be06:	1cbb      	adds	r3, r7, #2
 800be08:	1c02      	adds	r2, r0, #0
 800be0a:	801a      	strh	r2, [r3, #0]
 800be0c:	003b      	movs	r3, r7
 800be0e:	1c0a      	adds	r2, r1, #0
 800be10:	801a      	strh	r2, [r3, #0]
    UWORD X, Y;
    for (Y = Ystart; Y < Yend; Y++)
 800be12:	230c      	movs	r3, #12
 800be14:	18fb      	adds	r3, r7, r3
 800be16:	1d3a      	adds	r2, r7, #4
 800be18:	8812      	ldrh	r2, [r2, #0]
 800be1a:	801a      	strh	r2, [r3, #0]
 800be1c:	e024      	b.n	800be68 <Paint_ClearWindows+0x7c>
    {
        for (X = Xstart; X < Xend; X++)
 800be1e:	230e      	movs	r3, #14
 800be20:	18fb      	adds	r3, r7, r3
 800be22:	1dba      	adds	r2, r7, #6
 800be24:	8812      	ldrh	r2, [r2, #0]
 800be26:	801a      	strh	r2, [r3, #0]
 800be28:	e011      	b.n	800be4e <Paint_ClearWindows+0x62>
        { // 8 pixel =  1 byte
            Paint_SetPixel(X, Y, Color);
 800be2a:	2320      	movs	r3, #32
 800be2c:	18fb      	adds	r3, r7, r3
 800be2e:	881a      	ldrh	r2, [r3, #0]
 800be30:	230c      	movs	r3, #12
 800be32:	18fb      	adds	r3, r7, r3
 800be34:	8819      	ldrh	r1, [r3, #0]
 800be36:	240e      	movs	r4, #14
 800be38:	193b      	adds	r3, r7, r4
 800be3a:	881b      	ldrh	r3, [r3, #0]
 800be3c:	0018      	movs	r0, r3
 800be3e:	f7ff fda9 	bl	800b994 <Paint_SetPixel>
        for (X = Xstart; X < Xend; X++)
 800be42:	0021      	movs	r1, r4
 800be44:	187b      	adds	r3, r7, r1
 800be46:	881a      	ldrh	r2, [r3, #0]
 800be48:	187b      	adds	r3, r7, r1
 800be4a:	3201      	adds	r2, #1
 800be4c:	801a      	strh	r2, [r3, #0]
 800be4e:	230e      	movs	r3, #14
 800be50:	18fa      	adds	r2, r7, r3
 800be52:	1cbb      	adds	r3, r7, #2
 800be54:	8812      	ldrh	r2, [r2, #0]
 800be56:	881b      	ldrh	r3, [r3, #0]
 800be58:	429a      	cmp	r2, r3
 800be5a:	d3e6      	bcc.n	800be2a <Paint_ClearWindows+0x3e>
    for (Y = Ystart; Y < Yend; Y++)
 800be5c:	210c      	movs	r1, #12
 800be5e:	187b      	adds	r3, r7, r1
 800be60:	881a      	ldrh	r2, [r3, #0]
 800be62:	187b      	adds	r3, r7, r1
 800be64:	3201      	adds	r2, #1
 800be66:	801a      	strh	r2, [r3, #0]
 800be68:	230c      	movs	r3, #12
 800be6a:	18fa      	adds	r2, r7, r3
 800be6c:	003b      	movs	r3, r7
 800be6e:	8812      	ldrh	r2, [r2, #0]
 800be70:	881b      	ldrh	r3, [r3, #0]
 800be72:	429a      	cmp	r2, r3
 800be74:	d3d3      	bcc.n	800be1e <Paint_ClearWindows+0x32>
        }
    }
}
 800be76:	46c0      	nop			@ (mov r8, r8)
 800be78:	46c0      	nop			@ (mov r8, r8)
 800be7a:	46bd      	mov	sp, r7
 800be7c:	b004      	add	sp, #16
 800be7e:	bdb0      	pop	{r4, r5, r7, pc}

0800be80 <Paint_DrawPoint>:
    Dot_Pixel	: point size
    Dot_Style	: point Style
******************************************************************************/
void Paint_DrawPoint(UWORD Xpoint, UWORD Ypoint, UWORD Color,
                     DOT_PIXEL Dot_Pixel, DOT_STYLE Dot_Style)
{
 800be80:	b5b0      	push	{r4, r5, r7, lr}
 800be82:	b084      	sub	sp, #16
 800be84:	af00      	add	r7, sp, #0
 800be86:	0005      	movs	r5, r0
 800be88:	000c      	movs	r4, r1
 800be8a:	0010      	movs	r0, r2
 800be8c:	0019      	movs	r1, r3
 800be8e:	1dbb      	adds	r3, r7, #6
 800be90:	1c2a      	adds	r2, r5, #0
 800be92:	801a      	strh	r2, [r3, #0]
 800be94:	1d3b      	adds	r3, r7, #4
 800be96:	1c22      	adds	r2, r4, #0
 800be98:	801a      	strh	r2, [r3, #0]
 800be9a:	1cbb      	adds	r3, r7, #2
 800be9c:	1c02      	adds	r2, r0, #0
 800be9e:	801a      	strh	r2, [r3, #0]
 800bea0:	1c7b      	adds	r3, r7, #1
 800bea2:	1c0a      	adds	r2, r1, #0
 800bea4:	701a      	strb	r2, [r3, #0]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800bea6:	4b65      	ldr	r3, [pc, #404]	@ (800c03c <Paint_DrawPoint+0x1bc>)
 800bea8:	889b      	ldrh	r3, [r3, #4]
 800beaa:	1dba      	adds	r2, r7, #6
 800beac:	8812      	ldrh	r2, [r2, #0]
 800beae:	429a      	cmp	r2, r3
 800beb0:	d805      	bhi.n	800bebe <Paint_DrawPoint+0x3e>
 800beb2:	4b62      	ldr	r3, [pc, #392]	@ (800c03c <Paint_DrawPoint+0x1bc>)
 800beb4:	88db      	ldrh	r3, [r3, #6]
 800beb6:	1d3a      	adds	r2, r7, #4
 800beb8:	8812      	ldrh	r2, [r2, #0]
 800beba:	429a      	cmp	r2, r3
 800bebc:	d912      	bls.n	800bee4 <Paint_DrawPoint+0x64>
    {
        DE_BUG("Paint_DrawPoint Input exceeds the normal display range\r\n");
        printf("Xpoint = %d , Paint.Width = %d  \r\n ", Xpoint, Paint.Width);
 800bebe:	1dbb      	adds	r3, r7, #6
 800bec0:	8819      	ldrh	r1, [r3, #0]
 800bec2:	4b5e      	ldr	r3, [pc, #376]	@ (800c03c <Paint_DrawPoint+0x1bc>)
 800bec4:	889b      	ldrh	r3, [r3, #4]
 800bec6:	001a      	movs	r2, r3
 800bec8:	4b5d      	ldr	r3, [pc, #372]	@ (800c040 <Paint_DrawPoint+0x1c0>)
 800beca:	0018      	movs	r0, r3
 800becc:	f7f9 fbce 	bl	800566c <printf_>
        printf("Ypoint = %d , Paint.Height = %d  \r\n ", Ypoint, Paint.Height);
 800bed0:	1d3b      	adds	r3, r7, #4
 800bed2:	8819      	ldrh	r1, [r3, #0]
 800bed4:	4b59      	ldr	r3, [pc, #356]	@ (800c03c <Paint_DrawPoint+0x1bc>)
 800bed6:	88db      	ldrh	r3, [r3, #6]
 800bed8:	001a      	movs	r2, r3
 800beda:	4b5a      	ldr	r3, [pc, #360]	@ (800c044 <Paint_DrawPoint+0x1c4>)
 800bedc:	0018      	movs	r0, r3
 800bede:	f7f9 fbc5 	bl	800566c <printf_>
        return;
 800bee2:	e0a8      	b.n	800c036 <Paint_DrawPoint+0x1b6>
    }

    int16_t XDir_Num, YDir_Num;
    if (Dot_Style == DOT_FILL_AROUND)
 800bee4:	2320      	movs	r3, #32
 800bee6:	18fb      	adds	r3, r7, r3
 800bee8:	781b      	ldrb	r3, [r3, #0]
 800beea:	2b01      	cmp	r3, #1
 800beec:	d161      	bne.n	800bfb2 <Paint_DrawPoint+0x132>
    {
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++)
 800beee:	230e      	movs	r3, #14
 800bef0:	18fb      	adds	r3, r7, r3
 800bef2:	2200      	movs	r2, #0
 800bef4:	801a      	strh	r2, [r3, #0]
 800bef6:	e051      	b.n	800bf9c <Paint_DrawPoint+0x11c>
        {
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++)
 800bef8:	230c      	movs	r3, #12
 800befa:	18fb      	adds	r3, r7, r3
 800befc:	2200      	movs	r2, #0
 800befe:	801a      	strh	r2, [r3, #0]
 800bf00:	e039      	b.n	800bf76 <Paint_DrawPoint+0xf6>
            {
                if (Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 800bf02:	1dbb      	adds	r3, r7, #6
 800bf04:	881a      	ldrh	r2, [r3, #0]
 800bf06:	200e      	movs	r0, #14
 800bf08:	183b      	adds	r3, r7, r0
 800bf0a:	2100      	movs	r1, #0
 800bf0c:	5e5b      	ldrsh	r3, [r3, r1]
 800bf0e:	18d2      	adds	r2, r2, r3
 800bf10:	1c7b      	adds	r3, r7, #1
 800bf12:	781b      	ldrb	r3, [r3, #0]
 800bf14:	1ad3      	subs	r3, r2, r3
 800bf16:	d438      	bmi.n	800bf8a <Paint_DrawPoint+0x10a>
 800bf18:	1d3b      	adds	r3, r7, #4
 800bf1a:	881a      	ldrh	r2, [r3, #0]
 800bf1c:	210c      	movs	r1, #12
 800bf1e:	187b      	adds	r3, r7, r1
 800bf20:	2400      	movs	r4, #0
 800bf22:	5f1b      	ldrsh	r3, [r3, r4]
 800bf24:	18d2      	adds	r2, r2, r3
 800bf26:	1c7b      	adds	r3, r7, #1
 800bf28:	781b      	ldrb	r3, [r3, #0]
 800bf2a:	1ad3      	subs	r3, r2, r3
 800bf2c:	d42d      	bmi.n	800bf8a <Paint_DrawPoint+0x10a>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 800bf2e:	183b      	adds	r3, r7, r0
 800bf30:	881a      	ldrh	r2, [r3, #0]
 800bf32:	1dbb      	adds	r3, r7, #6
 800bf34:	881b      	ldrh	r3, [r3, #0]
 800bf36:	18d3      	adds	r3, r2, r3
 800bf38:	b29a      	uxth	r2, r3
 800bf3a:	1c7b      	adds	r3, r7, #1
 800bf3c:	781b      	ldrb	r3, [r3, #0]
 800bf3e:	b29b      	uxth	r3, r3
 800bf40:	1ad3      	subs	r3, r2, r3
 800bf42:	b298      	uxth	r0, r3
 800bf44:	000c      	movs	r4, r1
 800bf46:	187b      	adds	r3, r7, r1
 800bf48:	881a      	ldrh	r2, [r3, #0]
 800bf4a:	1d3b      	adds	r3, r7, #4
 800bf4c:	881b      	ldrh	r3, [r3, #0]
 800bf4e:	18d3      	adds	r3, r2, r3
 800bf50:	b29a      	uxth	r2, r3
 800bf52:	1c7b      	adds	r3, r7, #1
 800bf54:	781b      	ldrb	r3, [r3, #0]
 800bf56:	b29b      	uxth	r3, r3
 800bf58:	1ad3      	subs	r3, r2, r3
 800bf5a:	b299      	uxth	r1, r3
 800bf5c:	1cbb      	adds	r3, r7, #2
 800bf5e:	881b      	ldrh	r3, [r3, #0]
 800bf60:	001a      	movs	r2, r3
 800bf62:	f7ff fd17 	bl	800b994 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++)
 800bf66:	193b      	adds	r3, r7, r4
 800bf68:	2200      	movs	r2, #0
 800bf6a:	5e9b      	ldrsh	r3, [r3, r2]
 800bf6c:	b29b      	uxth	r3, r3
 800bf6e:	3301      	adds	r3, #1
 800bf70:	b29a      	uxth	r2, r3
 800bf72:	193b      	adds	r3, r7, r4
 800bf74:	801a      	strh	r2, [r3, #0]
 800bf76:	230c      	movs	r3, #12
 800bf78:	18fb      	adds	r3, r7, r3
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	5e9a      	ldrsh	r2, [r3, r2]
 800bf7e:	1c7b      	adds	r3, r7, #1
 800bf80:	781b      	ldrb	r3, [r3, #0]
 800bf82:	005b      	lsls	r3, r3, #1
 800bf84:	3b01      	subs	r3, #1
 800bf86:	429a      	cmp	r2, r3
 800bf88:	dbbb      	blt.n	800bf02 <Paint_DrawPoint+0x82>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++)
 800bf8a:	210e      	movs	r1, #14
 800bf8c:	187b      	adds	r3, r7, r1
 800bf8e:	2200      	movs	r2, #0
 800bf90:	5e9b      	ldrsh	r3, [r3, r2]
 800bf92:	b29b      	uxth	r3, r3
 800bf94:	3301      	adds	r3, #1
 800bf96:	b29a      	uxth	r2, r3
 800bf98:	187b      	adds	r3, r7, r1
 800bf9a:	801a      	strh	r2, [r3, #0]
 800bf9c:	230e      	movs	r3, #14
 800bf9e:	18fb      	adds	r3, r7, r3
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	5e9a      	ldrsh	r2, [r3, r2]
 800bfa4:	1c7b      	adds	r3, r7, #1
 800bfa6:	781b      	ldrb	r3, [r3, #0]
 800bfa8:	005b      	lsls	r3, r3, #1
 800bfaa:	3b01      	subs	r3, #1
 800bfac:	429a      	cmp	r2, r3
 800bfae:	dba3      	blt.n	800bef8 <Paint_DrawPoint+0x78>
 800bfb0:	e041      	b.n	800c036 <Paint_DrawPoint+0x1b6>
            }
        }
    }
    else
    {
        for (XDir_Num = 0; XDir_Num < Dot_Pixel; XDir_Num++)
 800bfb2:	230e      	movs	r3, #14
 800bfb4:	18fb      	adds	r3, r7, r3
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	801a      	strh	r2, [r3, #0]
 800bfba:	e034      	b.n	800c026 <Paint_DrawPoint+0x1a6>
        {
            for (YDir_Num = 0; YDir_Num < Dot_Pixel; YDir_Num++)
 800bfbc:	230c      	movs	r3, #12
 800bfbe:	18fb      	adds	r3, r7, r3
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	801a      	strh	r2, [r3, #0]
 800bfc4:	e01e      	b.n	800c004 <Paint_DrawPoint+0x184>
            {
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 800bfc6:	230e      	movs	r3, #14
 800bfc8:	18fb      	adds	r3, r7, r3
 800bfca:	881a      	ldrh	r2, [r3, #0]
 800bfcc:	1dbb      	adds	r3, r7, #6
 800bfce:	881b      	ldrh	r3, [r3, #0]
 800bfd0:	18d3      	adds	r3, r2, r3
 800bfd2:	b29b      	uxth	r3, r3
 800bfd4:	3b01      	subs	r3, #1
 800bfd6:	b298      	uxth	r0, r3
 800bfd8:	240c      	movs	r4, #12
 800bfda:	193b      	adds	r3, r7, r4
 800bfdc:	881a      	ldrh	r2, [r3, #0]
 800bfde:	1d3b      	adds	r3, r7, #4
 800bfe0:	881b      	ldrh	r3, [r3, #0]
 800bfe2:	18d3      	adds	r3, r2, r3
 800bfe4:	b29b      	uxth	r3, r3
 800bfe6:	3b01      	subs	r3, #1
 800bfe8:	b299      	uxth	r1, r3
 800bfea:	1cbb      	adds	r3, r7, #2
 800bfec:	881b      	ldrh	r3, [r3, #0]
 800bfee:	001a      	movs	r2, r3
 800bff0:	f7ff fcd0 	bl	800b994 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < Dot_Pixel; YDir_Num++)
 800bff4:	193b      	adds	r3, r7, r4
 800bff6:	2200      	movs	r2, #0
 800bff8:	5e9b      	ldrsh	r3, [r3, r2]
 800bffa:	b29b      	uxth	r3, r3
 800bffc:	3301      	adds	r3, #1
 800bffe:	b29a      	uxth	r2, r3
 800c000:	193b      	adds	r3, r7, r4
 800c002:	801a      	strh	r2, [r3, #0]
 800c004:	230c      	movs	r3, #12
 800c006:	18fb      	adds	r3, r7, r3
 800c008:	2200      	movs	r2, #0
 800c00a:	5e9a      	ldrsh	r2, [r3, r2]
 800c00c:	1c7b      	adds	r3, r7, #1
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	429a      	cmp	r2, r3
 800c012:	dbd8      	blt.n	800bfc6 <Paint_DrawPoint+0x146>
        for (XDir_Num = 0; XDir_Num < Dot_Pixel; XDir_Num++)
 800c014:	210e      	movs	r1, #14
 800c016:	187b      	adds	r3, r7, r1
 800c018:	2200      	movs	r2, #0
 800c01a:	5e9b      	ldrsh	r3, [r3, r2]
 800c01c:	b29b      	uxth	r3, r3
 800c01e:	3301      	adds	r3, #1
 800c020:	b29a      	uxth	r2, r3
 800c022:	187b      	adds	r3, r7, r1
 800c024:	801a      	strh	r2, [r3, #0]
 800c026:	230e      	movs	r3, #14
 800c028:	18fb      	adds	r3, r7, r3
 800c02a:	2200      	movs	r2, #0
 800c02c:	5e9a      	ldrsh	r2, [r3, r2]
 800c02e:	1c7b      	adds	r3, r7, #1
 800c030:	781b      	ldrb	r3, [r3, #0]
 800c032:	429a      	cmp	r2, r3
 800c034:	dbc2      	blt.n	800bfbc <Paint_DrawPoint+0x13c>
            }
        }
    }
}
 800c036:	46bd      	mov	sp, r7
 800c038:	b004      	add	sp, #16
 800c03a:	bdb0      	pop	{r4, r5, r7, pc}
 800c03c:	200005b0 	.word	0x200005b0
 800c040:	0800fcc8 	.word	0x0800fcc8
 800c044:	0800fcec 	.word	0x0800fcec

0800c048 <Paint_DrawLine>:
    Line_width : Line width
    Line_Style: Solid and dotted lines
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 800c048:	b5b0      	push	{r4, r5, r7, lr}
 800c04a:	b08c      	sub	sp, #48	@ 0x30
 800c04c:	af02      	add	r7, sp, #8
 800c04e:	0005      	movs	r5, r0
 800c050:	000c      	movs	r4, r1
 800c052:	0010      	movs	r0, r2
 800c054:	0019      	movs	r1, r3
 800c056:	1dbb      	adds	r3, r7, #6
 800c058:	1c2a      	adds	r2, r5, #0
 800c05a:	801a      	strh	r2, [r3, #0]
 800c05c:	1d3b      	adds	r3, r7, #4
 800c05e:	1c22      	adds	r2, r4, #0
 800c060:	801a      	strh	r2, [r3, #0]
 800c062:	1cbb      	adds	r3, r7, #2
 800c064:	1c02      	adds	r2, r0, #0
 800c066:	801a      	strh	r2, [r3, #0]
 800c068:	003b      	movs	r3, r7
 800c06a:	1c0a      	adds	r2, r1, #0
 800c06c:	801a      	strh	r2, [r3, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800c06e:	4b63      	ldr	r3, [pc, #396]	@ (800c1fc <Paint_DrawLine+0x1b4>)
 800c070:	889b      	ldrh	r3, [r3, #4]
 800c072:	1dba      	adds	r2, r7, #6
 800c074:	8812      	ldrh	r2, [r2, #0]
 800c076:	429a      	cmp	r2, r3
 800c078:	d900      	bls.n	800c07c <Paint_DrawLine+0x34>
 800c07a:	e0b7      	b.n	800c1ec <Paint_DrawLine+0x1a4>
 800c07c:	4b5f      	ldr	r3, [pc, #380]	@ (800c1fc <Paint_DrawLine+0x1b4>)
 800c07e:	88db      	ldrh	r3, [r3, #6]
 800c080:	1d3a      	adds	r2, r7, #4
 800c082:	8812      	ldrh	r2, [r2, #0]
 800c084:	429a      	cmp	r2, r3
 800c086:	d900      	bls.n	800c08a <Paint_DrawLine+0x42>
 800c088:	e0b0      	b.n	800c1ec <Paint_DrawLine+0x1a4>
        Xend > Paint.Width || Yend > Paint.Height)
 800c08a:	4b5c      	ldr	r3, [pc, #368]	@ (800c1fc <Paint_DrawLine+0x1b4>)
 800c08c:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800c08e:	1cba      	adds	r2, r7, #2
 800c090:	8812      	ldrh	r2, [r2, #0]
 800c092:	429a      	cmp	r2, r3
 800c094:	d900      	bls.n	800c098 <Paint_DrawLine+0x50>
 800c096:	e0a9      	b.n	800c1ec <Paint_DrawLine+0x1a4>
        Xend > Paint.Width || Yend > Paint.Height)
 800c098:	4b58      	ldr	r3, [pc, #352]	@ (800c1fc <Paint_DrawLine+0x1b4>)
 800c09a:	88db      	ldrh	r3, [r3, #6]
 800c09c:	003a      	movs	r2, r7
 800c09e:	8812      	ldrh	r2, [r2, #0]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d900      	bls.n	800c0a6 <Paint_DrawLine+0x5e>
 800c0a4:	e0a2      	b.n	800c1ec <Paint_DrawLine+0x1a4>
    {
        DE_BUG("Paint_DrawLine Input exceeds the normal display range\r\n");
        return;
    }

    UWORD Xpoint = Xstart;
 800c0a6:	2326      	movs	r3, #38	@ 0x26
 800c0a8:	18fb      	adds	r3, r7, r3
 800c0aa:	1dba      	adds	r2, r7, #6
 800c0ac:	8812      	ldrh	r2, [r2, #0]
 800c0ae:	801a      	strh	r2, [r3, #0]
    UWORD Ypoint = Ystart;
 800c0b0:	2324      	movs	r3, #36	@ 0x24
 800c0b2:	18fb      	adds	r3, r7, r3
 800c0b4:	1d3a      	adds	r2, r7, #4
 800c0b6:	8812      	ldrh	r2, [r2, #0]
 800c0b8:	801a      	strh	r2, [r3, #0]
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 800c0ba:	1cbb      	adds	r3, r7, #2
 800c0bc:	881a      	ldrh	r2, [r3, #0]
 800c0be:	1dbb      	adds	r3, r7, #6
 800c0c0:	881b      	ldrh	r3, [r3, #0]
 800c0c2:	1ad3      	subs	r3, r2, r3
 800c0c4:	17da      	asrs	r2, r3, #31
 800c0c6:	189b      	adds	r3, r3, r2
 800c0c8:	4053      	eors	r3, r2
 800c0ca:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 800c0cc:	003b      	movs	r3, r7
 800c0ce:	881a      	ldrh	r2, [r3, #0]
 800c0d0:	1d3b      	adds	r3, r7, #4
 800c0d2:	881b      	ldrh	r3, [r3, #0]
 800c0d4:	1ad3      	subs	r3, r2, r3
 800c0d6:	17da      	asrs	r2, r3, #31
 800c0d8:	189b      	adds	r3, r3, r2
 800c0da:	4053      	eors	r3, r2
 800c0dc:	425b      	negs	r3, r3
 800c0de:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 800c0e0:	1dba      	adds	r2, r7, #6
 800c0e2:	1cbb      	adds	r3, r7, #2
 800c0e4:	8812      	ldrh	r2, [r2, #0]
 800c0e6:	881b      	ldrh	r3, [r3, #0]
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d201      	bcs.n	800c0f0 <Paint_DrawLine+0xa8>
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	e001      	b.n	800c0f4 <Paint_DrawLine+0xac>
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	425b      	negs	r3, r3
 800c0f4:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 800c0f6:	1d3a      	adds	r2, r7, #4
 800c0f8:	003b      	movs	r3, r7
 800c0fa:	8812      	ldrh	r2, [r2, #0]
 800c0fc:	881b      	ldrh	r3, [r3, #0]
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d201      	bcs.n	800c106 <Paint_DrawLine+0xbe>
 800c102:	2301      	movs	r3, #1
 800c104:	e001      	b.n	800c10a <Paint_DrawLine+0xc2>
 800c106:	2301      	movs	r3, #1
 800c108:	425b      	negs	r3, r3
 800c10a:	60fb      	str	r3, [r7, #12]

    // Cumulative error
    int Esp = dx + dy;
 800c10c:	69ba      	ldr	r2, [r7, #24]
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	18d3      	adds	r3, r2, r3
 800c112:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 800c114:	231f      	movs	r3, #31
 800c116:	18fb      	adds	r3, r7, r3
 800c118:	2200      	movs	r2, #0
 800c11a:	701a      	strb	r2, [r3, #0]

    for (;;)
    {
        Dotted_Len++;
 800c11c:	241f      	movs	r4, #31
 800c11e:	193b      	adds	r3, r7, r4
 800c120:	781a      	ldrb	r2, [r3, #0]
 800c122:	193b      	adds	r3, r7, r4
 800c124:	3201      	adds	r2, #1
 800c126:	701a      	strb	r2, [r3, #0]
        // Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0)
 800c128:	2340      	movs	r3, #64	@ 0x40
 800c12a:	18fb      	adds	r3, r7, r3
 800c12c:	781b      	ldrb	r3, [r3, #0]
 800c12e:	2b01      	cmp	r3, #1
 800c130:	d11c      	bne.n	800c16c <Paint_DrawLine+0x124>
 800c132:	193b      	adds	r3, r7, r4
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	2103      	movs	r1, #3
 800c138:	0018      	movs	r0, r3
 800c13a:	f7f4 f887 	bl	800024c <__aeabi_uidivmod>
 800c13e:	000b      	movs	r3, r1
 800c140:	b2db      	uxtb	r3, r3
 800c142:	2b00      	cmp	r3, #0
 800c144:	d112      	bne.n	800c16c <Paint_DrawLine+0x124>
        {
            // DE_BUG("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 800c146:	233c      	movs	r3, #60	@ 0x3c
 800c148:	18fb      	adds	r3, r7, r3
 800c14a:	781a      	ldrb	r2, [r3, #0]
 800c14c:	2324      	movs	r3, #36	@ 0x24
 800c14e:	18fb      	adds	r3, r7, r3
 800c150:	8819      	ldrh	r1, [r3, #0]
 800c152:	2326      	movs	r3, #38	@ 0x26
 800c154:	18fb      	adds	r3, r7, r3
 800c156:	8818      	ldrh	r0, [r3, #0]
 800c158:	2301      	movs	r3, #1
 800c15a:	9300      	str	r3, [sp, #0]
 800c15c:	0013      	movs	r3, r2
 800c15e:	22ff      	movs	r2, #255	@ 0xff
 800c160:	f7ff fe8e 	bl	800be80 <Paint_DrawPoint>
            Dotted_Len = 0;
 800c164:	193b      	adds	r3, r7, r4
 800c166:	2200      	movs	r2, #0
 800c168:	701a      	strb	r2, [r3, #0]
 800c16a:	e010      	b.n	800c18e <Paint_DrawLine+0x146>
        }
        else
        {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 800c16c:	233c      	movs	r3, #60	@ 0x3c
 800c16e:	18fb      	adds	r3, r7, r3
 800c170:	781c      	ldrb	r4, [r3, #0]
 800c172:	2338      	movs	r3, #56	@ 0x38
 800c174:	18fb      	adds	r3, r7, r3
 800c176:	881a      	ldrh	r2, [r3, #0]
 800c178:	2324      	movs	r3, #36	@ 0x24
 800c17a:	18fb      	adds	r3, r7, r3
 800c17c:	8819      	ldrh	r1, [r3, #0]
 800c17e:	2326      	movs	r3, #38	@ 0x26
 800c180:	18fb      	adds	r3, r7, r3
 800c182:	8818      	ldrh	r0, [r3, #0]
 800c184:	2301      	movs	r3, #1
 800c186:	9300      	str	r3, [sp, #0]
 800c188:	0023      	movs	r3, r4
 800c18a:	f7ff fe79 	bl	800be80 <Paint_DrawPoint>
        }
        if (2 * Esp >= dy)
 800c18e:	6a3b      	ldr	r3, [r7, #32]
 800c190:	005b      	lsls	r3, r3, #1
 800c192:	697a      	ldr	r2, [r7, #20]
 800c194:	429a      	cmp	r2, r3
 800c196:	dc11      	bgt.n	800c1bc <Paint_DrawLine+0x174>
        {
            if (Xpoint == Xend)
 800c198:	2026      	movs	r0, #38	@ 0x26
 800c19a:	183a      	adds	r2, r7, r0
 800c19c:	1cbb      	adds	r3, r7, #2
 800c19e:	8812      	ldrh	r2, [r2, #0]
 800c1a0:	881b      	ldrh	r3, [r3, #0]
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d024      	beq.n	800c1f0 <Paint_DrawLine+0x1a8>
                break;
            Esp += dy;
 800c1a6:	6a3a      	ldr	r2, [r7, #32]
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	18d3      	adds	r3, r2, r3
 800c1ac:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	b299      	uxth	r1, r3
 800c1b2:	183b      	adds	r3, r7, r0
 800c1b4:	183a      	adds	r2, r7, r0
 800c1b6:	8812      	ldrh	r2, [r2, #0]
 800c1b8:	188a      	adds	r2, r1, r2
 800c1ba:	801a      	strh	r2, [r3, #0]
        }
        if (2 * Esp <= dx)
 800c1bc:	6a3b      	ldr	r3, [r7, #32]
 800c1be:	005b      	lsls	r3, r3, #1
 800c1c0:	69ba      	ldr	r2, [r7, #24]
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	dbaa      	blt.n	800c11c <Paint_DrawLine+0xd4>
        {
            if (Ypoint == Yend)
 800c1c6:	2024      	movs	r0, #36	@ 0x24
 800c1c8:	183a      	adds	r2, r7, r0
 800c1ca:	003b      	movs	r3, r7
 800c1cc:	8812      	ldrh	r2, [r2, #0]
 800c1ce:	881b      	ldrh	r3, [r3, #0]
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d00f      	beq.n	800c1f4 <Paint_DrawLine+0x1ac>
                break;
            Esp += dx;
 800c1d4:	6a3a      	ldr	r2, [r7, #32]
 800c1d6:	69bb      	ldr	r3, [r7, #24]
 800c1d8:	18d3      	adds	r3, r2, r3
 800c1da:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	b299      	uxth	r1, r3
 800c1e0:	183b      	adds	r3, r7, r0
 800c1e2:	183a      	adds	r2, r7, r0
 800c1e4:	8812      	ldrh	r2, [r2, #0]
 800c1e6:	188a      	adds	r2, r1, r2
 800c1e8:	801a      	strh	r2, [r3, #0]
        Dotted_Len++;
 800c1ea:	e797      	b.n	800c11c <Paint_DrawLine+0xd4>
        return;
 800c1ec:	46c0      	nop			@ (mov r8, r8)
 800c1ee:	e002      	b.n	800c1f6 <Paint_DrawLine+0x1ae>
                break;
 800c1f0:	46c0      	nop			@ (mov r8, r8)
 800c1f2:	e000      	b.n	800c1f6 <Paint_DrawLine+0x1ae>
                break;
 800c1f4:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	b00a      	add	sp, #40	@ 0x28
 800c1fa:	bdb0      	pop	{r4, r5, r7, pc}
 800c1fc:	200005b0 	.word	0x200005b0

0800c200 <Paint_DrawRectangle>:
    Line_width: Line width
    Draw_Fill : Whether to fill the inside of the rectangle
******************************************************************************/
void Paint_DrawRectangle(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                         UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill)
{
 800c200:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c202:	b089      	sub	sp, #36	@ 0x24
 800c204:	af04      	add	r7, sp, #16
 800c206:	0005      	movs	r5, r0
 800c208:	000c      	movs	r4, r1
 800c20a:	0010      	movs	r0, r2
 800c20c:	0019      	movs	r1, r3
 800c20e:	1dbb      	adds	r3, r7, #6
 800c210:	1c2a      	adds	r2, r5, #0
 800c212:	801a      	strh	r2, [r3, #0]
 800c214:	1d3b      	adds	r3, r7, #4
 800c216:	1c22      	adds	r2, r4, #0
 800c218:	801a      	strh	r2, [r3, #0]
 800c21a:	1cbb      	adds	r3, r7, #2
 800c21c:	1c02      	adds	r2, r0, #0
 800c21e:	801a      	strh	r2, [r3, #0]
 800c220:	003b      	movs	r3, r7
 800c222:	1c0a      	adds	r2, r1, #0
 800c224:	801a      	strh	r2, [r3, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800c226:	4b59      	ldr	r3, [pc, #356]	@ (800c38c <Paint_DrawRectangle+0x18c>)
 800c228:	889b      	ldrh	r3, [r3, #4]
 800c22a:	1dba      	adds	r2, r7, #6
 800c22c:	8812      	ldrh	r2, [r2, #0]
 800c22e:	429a      	cmp	r2, r3
 800c230:	d900      	bls.n	800c234 <Paint_DrawRectangle+0x34>
 800c232:	e0a6      	b.n	800c382 <Paint_DrawRectangle+0x182>
 800c234:	4b55      	ldr	r3, [pc, #340]	@ (800c38c <Paint_DrawRectangle+0x18c>)
 800c236:	88db      	ldrh	r3, [r3, #6]
 800c238:	1d3a      	adds	r2, r7, #4
 800c23a:	8812      	ldrh	r2, [r2, #0]
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d900      	bls.n	800c242 <Paint_DrawRectangle+0x42>
 800c240:	e09f      	b.n	800c382 <Paint_DrawRectangle+0x182>
        Xend > Paint.Width || Yend > Paint.Height)
 800c242:	4b52      	ldr	r3, [pc, #328]	@ (800c38c <Paint_DrawRectangle+0x18c>)
 800c244:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800c246:	1cba      	adds	r2, r7, #2
 800c248:	8812      	ldrh	r2, [r2, #0]
 800c24a:	429a      	cmp	r2, r3
 800c24c:	d900      	bls.n	800c250 <Paint_DrawRectangle+0x50>
 800c24e:	e098      	b.n	800c382 <Paint_DrawRectangle+0x182>
        Xend > Paint.Width || Yend > Paint.Height)
 800c250:	4b4e      	ldr	r3, [pc, #312]	@ (800c38c <Paint_DrawRectangle+0x18c>)
 800c252:	88db      	ldrh	r3, [r3, #6]
 800c254:	003a      	movs	r2, r7
 800c256:	8812      	ldrh	r2, [r2, #0]
 800c258:	429a      	cmp	r2, r3
 800c25a:	d900      	bls.n	800c25e <Paint_DrawRectangle+0x5e>
 800c25c:	e091      	b.n	800c382 <Paint_DrawRectangle+0x182>
    {
        DE_BUG("Input exceeds the normal display range\r\n");
        return;
    }

    if (Draw_Fill)
 800c25e:	2328      	movs	r3, #40	@ 0x28
 800c260:	2208      	movs	r2, #8
 800c262:	189b      	adds	r3, r3, r2
 800c264:	19db      	adds	r3, r3, r7
 800c266:	781b      	ldrb	r3, [r3, #0]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d02b      	beq.n	800c2c4 <Paint_DrawRectangle+0xc4>
    {
        UWORD Ypoint;
        for (Ypoint = Ystart; Ypoint < Yend; Ypoint++)
 800c26c:	230e      	movs	r3, #14
 800c26e:	18fb      	adds	r3, r7, r3
 800c270:	1d3a      	adds	r2, r7, #4
 800c272:	8812      	ldrh	r2, [r2, #0]
 800c274:	801a      	strh	r2, [r3, #0]
 800c276:	e01d      	b.n	800c2b4 <Paint_DrawRectangle+0xb4>
        {
            Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color, Line_width, LINE_STYLE_SOLID);
 800c278:	250e      	movs	r5, #14
 800c27a:	197b      	adds	r3, r7, r5
 800c27c:	881c      	ldrh	r4, [r3, #0]
 800c27e:	1cbb      	adds	r3, r7, #2
 800c280:	881a      	ldrh	r2, [r3, #0]
 800c282:	197b      	adds	r3, r7, r5
 800c284:	8819      	ldrh	r1, [r3, #0]
 800c286:	1dbb      	adds	r3, r7, #6
 800c288:	8818      	ldrh	r0, [r3, #0]
 800c28a:	2300      	movs	r3, #0
 800c28c:	9302      	str	r3, [sp, #8]
 800c28e:	2324      	movs	r3, #36	@ 0x24
 800c290:	2608      	movs	r6, #8
 800c292:	199b      	adds	r3, r3, r6
 800c294:	19db      	adds	r3, r3, r7
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	9301      	str	r3, [sp, #4]
 800c29a:	2320      	movs	r3, #32
 800c29c:	199b      	adds	r3, r3, r6
 800c29e:	19db      	adds	r3, r3, r7
 800c2a0:	881b      	ldrh	r3, [r3, #0]
 800c2a2:	9300      	str	r3, [sp, #0]
 800c2a4:	0023      	movs	r3, r4
 800c2a6:	f7ff fecf 	bl	800c048 <Paint_DrawLine>
        for (Ypoint = Ystart; Ypoint < Yend; Ypoint++)
 800c2aa:	197b      	adds	r3, r7, r5
 800c2ac:	881a      	ldrh	r2, [r3, #0]
 800c2ae:	197b      	adds	r3, r7, r5
 800c2b0:	3201      	adds	r2, #1
 800c2b2:	801a      	strh	r2, [r3, #0]
 800c2b4:	230e      	movs	r3, #14
 800c2b6:	18fa      	adds	r2, r7, r3
 800c2b8:	003b      	movs	r3, r7
 800c2ba:	8812      	ldrh	r2, [r2, #0]
 800c2bc:	881b      	ldrh	r3, [r3, #0]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d3da      	bcc.n	800c278 <Paint_DrawRectangle+0x78>
 800c2c2:	e05f      	b.n	800c384 <Paint_DrawRectangle+0x184>
        }
    }
    else
    {
        Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 800c2c4:	1d3b      	adds	r3, r7, #4
 800c2c6:	881c      	ldrh	r4, [r3, #0]
 800c2c8:	1cbb      	adds	r3, r7, #2
 800c2ca:	881a      	ldrh	r2, [r3, #0]
 800c2cc:	1d3b      	adds	r3, r7, #4
 800c2ce:	8819      	ldrh	r1, [r3, #0]
 800c2d0:	1dbb      	adds	r3, r7, #6
 800c2d2:	8818      	ldrh	r0, [r3, #0]
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	9302      	str	r3, [sp, #8]
 800c2d8:	2524      	movs	r5, #36	@ 0x24
 800c2da:	2308      	movs	r3, #8
 800c2dc:	18ee      	adds	r6, r5, r3
 800c2de:	19f3      	adds	r3, r6, r7
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	9301      	str	r3, [sp, #4]
 800c2e4:	2620      	movs	r6, #32
 800c2e6:	2308      	movs	r3, #8
 800c2e8:	18f3      	adds	r3, r6, r3
 800c2ea:	19db      	adds	r3, r3, r7
 800c2ec:	881b      	ldrh	r3, [r3, #0]
 800c2ee:	9300      	str	r3, [sp, #0]
 800c2f0:	0023      	movs	r3, r4
 800c2f2:	f7ff fea9 	bl	800c048 <Paint_DrawLine>
        Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 800c2f6:	003b      	movs	r3, r7
 800c2f8:	881c      	ldrh	r4, [r3, #0]
 800c2fa:	1dbb      	adds	r3, r7, #6
 800c2fc:	881a      	ldrh	r2, [r3, #0]
 800c2fe:	1d3b      	adds	r3, r7, #4
 800c300:	8819      	ldrh	r1, [r3, #0]
 800c302:	1dbb      	adds	r3, r7, #6
 800c304:	8818      	ldrh	r0, [r3, #0]
 800c306:	2300      	movs	r3, #0
 800c308:	9302      	str	r3, [sp, #8]
 800c30a:	2308      	movs	r3, #8
 800c30c:	18eb      	adds	r3, r5, r3
 800c30e:	19db      	adds	r3, r3, r7
 800c310:	781b      	ldrb	r3, [r3, #0]
 800c312:	9301      	str	r3, [sp, #4]
 800c314:	2308      	movs	r3, #8
 800c316:	18f3      	adds	r3, r6, r3
 800c318:	19db      	adds	r3, r3, r7
 800c31a:	881b      	ldrh	r3, [r3, #0]
 800c31c:	9300      	str	r3, [sp, #0]
 800c31e:	0023      	movs	r3, r4
 800c320:	f7ff fe92 	bl	800c048 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 800c324:	1d3b      	adds	r3, r7, #4
 800c326:	881c      	ldrh	r4, [r3, #0]
 800c328:	1cbb      	adds	r3, r7, #2
 800c32a:	881a      	ldrh	r2, [r3, #0]
 800c32c:	003b      	movs	r3, r7
 800c32e:	8819      	ldrh	r1, [r3, #0]
 800c330:	1cbb      	adds	r3, r7, #2
 800c332:	8818      	ldrh	r0, [r3, #0]
 800c334:	2300      	movs	r3, #0
 800c336:	9302      	str	r3, [sp, #8]
 800c338:	2308      	movs	r3, #8
 800c33a:	18eb      	adds	r3, r5, r3
 800c33c:	19db      	adds	r3, r3, r7
 800c33e:	781b      	ldrb	r3, [r3, #0]
 800c340:	9301      	str	r3, [sp, #4]
 800c342:	2308      	movs	r3, #8
 800c344:	18f3      	adds	r3, r6, r3
 800c346:	19db      	adds	r3, r3, r7
 800c348:	881b      	ldrh	r3, [r3, #0]
 800c34a:	9300      	str	r3, [sp, #0]
 800c34c:	0023      	movs	r3, r4
 800c34e:	f7ff fe7b 	bl	800c048 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 800c352:	003b      	movs	r3, r7
 800c354:	881c      	ldrh	r4, [r3, #0]
 800c356:	1dbb      	adds	r3, r7, #6
 800c358:	881a      	ldrh	r2, [r3, #0]
 800c35a:	003b      	movs	r3, r7
 800c35c:	8819      	ldrh	r1, [r3, #0]
 800c35e:	1cbb      	adds	r3, r7, #2
 800c360:	8818      	ldrh	r0, [r3, #0]
 800c362:	2300      	movs	r3, #0
 800c364:	9302      	str	r3, [sp, #8]
 800c366:	2308      	movs	r3, #8
 800c368:	18ed      	adds	r5, r5, r3
 800c36a:	19eb      	adds	r3, r5, r7
 800c36c:	781b      	ldrb	r3, [r3, #0]
 800c36e:	9301      	str	r3, [sp, #4]
 800c370:	2308      	movs	r3, #8
 800c372:	18f3      	adds	r3, r6, r3
 800c374:	19db      	adds	r3, r3, r7
 800c376:	881b      	ldrh	r3, [r3, #0]
 800c378:	9300      	str	r3, [sp, #0]
 800c37a:	0023      	movs	r3, r4
 800c37c:	f7ff fe64 	bl	800c048 <Paint_DrawLine>
 800c380:	e000      	b.n	800c384 <Paint_DrawRectangle+0x184>
        return;
 800c382:	46c0      	nop			@ (mov r8, r8)
    }
}
 800c384:	46bd      	mov	sp, r7
 800c386:	b005      	add	sp, #20
 800c388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c38a:	46c0      	nop			@ (mov r8, r8)
 800c38c:	200005b0 	.word	0x200005b0

0800c390 <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    tFont *Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800c390:	b5b0      	push	{r4, r5, r7, lr}
 800c392:	b088      	sub	sp, #32
 800c394:	af00      	add	r7, sp, #0
 800c396:	0004      	movs	r4, r0
 800c398:	0008      	movs	r0, r1
 800c39a:	0011      	movs	r1, r2
 800c39c:	607b      	str	r3, [r7, #4]
 800c39e:	250e      	movs	r5, #14
 800c3a0:	197b      	adds	r3, r7, r5
 800c3a2:	1c22      	adds	r2, r4, #0
 800c3a4:	801a      	strh	r2, [r3, #0]
 800c3a6:	240c      	movs	r4, #12
 800c3a8:	193b      	adds	r3, r7, r4
 800c3aa:	1c02      	adds	r2, r0, #0
 800c3ac:	801a      	strh	r2, [r3, #0]
 800c3ae:	200b      	movs	r0, #11
 800c3b0:	183b      	adds	r3, r7, r0
 800c3b2:	1c0a      	adds	r2, r1, #0
 800c3b4:	701a      	strb	r2, [r3, #0]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800c3b6:	4b67      	ldr	r3, [pc, #412]	@ (800c554 <Paint_DrawChar+0x1c4>)
 800c3b8:	889b      	ldrh	r3, [r3, #4]
 800c3ba:	197a      	adds	r2, r7, r5
 800c3bc:	8812      	ldrh	r2, [r2, #0]
 800c3be:	429a      	cmp	r2, r3
 800c3c0:	d900      	bls.n	800c3c4 <Paint_DrawChar+0x34>
 800c3c2:	e0c2      	b.n	800c54a <Paint_DrawChar+0x1ba>
 800c3c4:	4b63      	ldr	r3, [pc, #396]	@ (800c554 <Paint_DrawChar+0x1c4>)
 800c3c6:	88db      	ldrh	r3, [r3, #6]
 800c3c8:	193a      	adds	r2, r7, r4
 800c3ca:	8812      	ldrh	r2, [r2, #0]
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d900      	bls.n	800c3d2 <Paint_DrawChar+0x42>
 800c3d0:	e0bb      	b.n	800c54a <Paint_DrawChar+0x1ba>
    {
        DE_BUG("Paint_DrawChar Input exceeds the normal display range\r\n");
        return;
    }
    uint32_t font_Width = (*Font).chars[Acsii_Char - ' '].image->width;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	685a      	ldr	r2, [r3, #4]
 800c3d6:	183b      	adds	r3, r7, r0
 800c3d8:	781b      	ldrb	r3, [r3, #0]
 800c3da:	495f      	ldr	r1, [pc, #380]	@ (800c558 <Paint_DrawChar+0x1c8>)
 800c3dc:	468c      	mov	ip, r1
 800c3de:	4463      	add	r3, ip
 800c3e0:	00db      	lsls	r3, r3, #3
 800c3e2:	18d3      	adds	r3, r2, r3
 800c3e4:	685b      	ldr	r3, [r3, #4]
 800c3e6:	889b      	ldrh	r3, [r3, #4]
 800c3e8:	617b      	str	r3, [r7, #20]
    uint32_t font_Height = (*Font).chars[Acsii_Char - ' '].image->height;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	685a      	ldr	r2, [r3, #4]
 800c3ee:	183b      	adds	r3, r7, r0
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	4959      	ldr	r1, [pc, #356]	@ (800c558 <Paint_DrawChar+0x1c8>)
 800c3f4:	468c      	mov	ip, r1
 800c3f6:	4463      	add	r3, ip
 800c3f8:	00db      	lsls	r3, r3, #3
 800c3fa:	18d3      	adds	r3, r2, r3
 800c3fc:	685b      	ldr	r3, [r3, #4]
 800c3fe:	88db      	ldrh	r3, [r3, #6]
 800c400:	613b      	str	r3, [r7, #16]

    //   uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
    const unsigned char *ptr = (*Font).chars[Acsii_Char - ' '].image->data;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	685a      	ldr	r2, [r3, #4]
 800c406:	183b      	adds	r3, r7, r0
 800c408:	781b      	ldrb	r3, [r3, #0]
 800c40a:	4953      	ldr	r1, [pc, #332]	@ (800c558 <Paint_DrawChar+0x1c8>)
 800c40c:	468c      	mov	ip, r1
 800c40e:	4463      	add	r3, ip
 800c410:	00db      	lsls	r3, r3, #3
 800c412:	18d3      	adds	r3, r2, r3
 800c414:	685b      	ldr	r3, [r3, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < font_Height; Page++)
 800c41a:	231e      	movs	r3, #30
 800c41c:	18fb      	adds	r3, r7, r3
 800c41e:	2200      	movs	r2, #0
 800c420:	801a      	strh	r2, [r3, #0]
 800c422:	e08a      	b.n	800c53a <Paint_DrawChar+0x1aa>
    {
        for (Column = 0; Column < font_Width; Column++)
 800c424:	231c      	movs	r3, #28
 800c426:	18fb      	adds	r3, r7, r3
 800c428:	2200      	movs	r2, #0
 800c42a:	801a      	strh	r2, [r3, #0]
 800c42c:	e071      	b.n	800c512 <Paint_DrawChar+0x182>
        {

            // To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background)
 800c42e:	2334      	movs	r3, #52	@ 0x34
 800c430:	18fb      	adds	r3, r7, r3
 800c432:	881b      	ldrh	r3, [r3, #0]
 800c434:	2bff      	cmp	r3, #255	@ 0xff
 800c436:	d122      	bne.n	800c47e <Paint_DrawChar+0xee>
            { // this process is to speed up the scan
                if (*ptr & (0x80 >> (Column % 8)))
 800c438:	69bb      	ldr	r3, [r7, #24]
 800c43a:	781b      	ldrb	r3, [r3, #0]
 800c43c:	0019      	movs	r1, r3
 800c43e:	201c      	movs	r0, #28
 800c440:	183b      	adds	r3, r7, r0
 800c442:	881b      	ldrh	r3, [r3, #0]
 800c444:	2207      	movs	r2, #7
 800c446:	4013      	ands	r3, r2
 800c448:	2280      	movs	r2, #128	@ 0x80
 800c44a:	411a      	asrs	r2, r3
 800c44c:	0013      	movs	r3, r2
 800c44e:	400b      	ands	r3, r1
 800c450:	d04e      	beq.n	800c4f0 <Paint_DrawChar+0x160>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800c452:	230e      	movs	r3, #14
 800c454:	18fa      	adds	r2, r7, r3
 800c456:	183b      	adds	r3, r7, r0
 800c458:	8812      	ldrh	r2, [r2, #0]
 800c45a:	881b      	ldrh	r3, [r3, #0]
 800c45c:	18d3      	adds	r3, r2, r3
 800c45e:	b298      	uxth	r0, r3
 800c460:	230c      	movs	r3, #12
 800c462:	18fa      	adds	r2, r7, r3
 800c464:	231e      	movs	r3, #30
 800c466:	18fb      	adds	r3, r7, r3
 800c468:	8812      	ldrh	r2, [r2, #0]
 800c46a:	881b      	ldrh	r3, [r3, #0]
 800c46c:	18d3      	adds	r3, r2, r3
 800c46e:	b299      	uxth	r1, r3
 800c470:	2330      	movs	r3, #48	@ 0x30
 800c472:	18fb      	adds	r3, r7, r3
 800c474:	881b      	ldrh	r3, [r3, #0]
 800c476:	001a      	movs	r2, r3
 800c478:	f7ff fa8c 	bl	800b994 <Paint_SetPixel>
 800c47c:	e038      	b.n	800c4f0 <Paint_DrawChar+0x160>
            }
            else
            {
                if (*ptr & (0x80 >> (Column % 8)))
 800c47e:	69bb      	ldr	r3, [r7, #24]
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	0019      	movs	r1, r3
 800c484:	201c      	movs	r0, #28
 800c486:	183b      	adds	r3, r7, r0
 800c488:	881b      	ldrh	r3, [r3, #0]
 800c48a:	2207      	movs	r2, #7
 800c48c:	4013      	ands	r3, r2
 800c48e:	2280      	movs	r2, #128	@ 0x80
 800c490:	411a      	asrs	r2, r3
 800c492:	0013      	movs	r3, r2
 800c494:	400b      	ands	r3, r1
 800c496:	d015      	beq.n	800c4c4 <Paint_DrawChar+0x134>
                {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800c498:	230e      	movs	r3, #14
 800c49a:	18fa      	adds	r2, r7, r3
 800c49c:	183b      	adds	r3, r7, r0
 800c49e:	8812      	ldrh	r2, [r2, #0]
 800c4a0:	881b      	ldrh	r3, [r3, #0]
 800c4a2:	18d3      	adds	r3, r2, r3
 800c4a4:	b298      	uxth	r0, r3
 800c4a6:	230c      	movs	r3, #12
 800c4a8:	18fa      	adds	r2, r7, r3
 800c4aa:	231e      	movs	r3, #30
 800c4ac:	18fb      	adds	r3, r7, r3
 800c4ae:	8812      	ldrh	r2, [r2, #0]
 800c4b0:	881b      	ldrh	r3, [r3, #0]
 800c4b2:	18d3      	adds	r3, r2, r3
 800c4b4:	b299      	uxth	r1, r3
 800c4b6:	2330      	movs	r3, #48	@ 0x30
 800c4b8:	18fb      	adds	r3, r7, r3
 800c4ba:	881b      	ldrh	r3, [r3, #0]
 800c4bc:	001a      	movs	r2, r3
 800c4be:	f7ff fa69 	bl	800b994 <Paint_SetPixel>
 800c4c2:	e015      	b.n	800c4f0 <Paint_DrawChar+0x160>
                }
                else
                {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 800c4c4:	230e      	movs	r3, #14
 800c4c6:	18fa      	adds	r2, r7, r3
 800c4c8:	231c      	movs	r3, #28
 800c4ca:	18fb      	adds	r3, r7, r3
 800c4cc:	8812      	ldrh	r2, [r2, #0]
 800c4ce:	881b      	ldrh	r3, [r3, #0]
 800c4d0:	18d3      	adds	r3, r2, r3
 800c4d2:	b298      	uxth	r0, r3
 800c4d4:	230c      	movs	r3, #12
 800c4d6:	18fa      	adds	r2, r7, r3
 800c4d8:	231e      	movs	r3, #30
 800c4da:	18fb      	adds	r3, r7, r3
 800c4dc:	8812      	ldrh	r2, [r2, #0]
 800c4de:	881b      	ldrh	r3, [r3, #0]
 800c4e0:	18d3      	adds	r3, r2, r3
 800c4e2:	b299      	uxth	r1, r3
 800c4e4:	2334      	movs	r3, #52	@ 0x34
 800c4e6:	18fb      	adds	r3, r7, r3
 800c4e8:	881b      	ldrh	r3, [r3, #0]
 800c4ea:	001a      	movs	r2, r3
 800c4ec:	f7ff fa52 	bl	800b994 <Paint_SetPixel>
                }
            }
            // One pixel is 8 bits
            if (Column % 8 == 7)
 800c4f0:	231c      	movs	r3, #28
 800c4f2:	18fb      	adds	r3, r7, r3
 800c4f4:	881b      	ldrh	r3, [r3, #0]
 800c4f6:	2207      	movs	r2, #7
 800c4f8:	4013      	ands	r3, r2
 800c4fa:	b29b      	uxth	r3, r3
 800c4fc:	2b07      	cmp	r3, #7
 800c4fe:	d102      	bne.n	800c506 <Paint_DrawChar+0x176>
                ptr++;
 800c500:	69bb      	ldr	r3, [r7, #24]
 800c502:	3301      	adds	r3, #1
 800c504:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < font_Width; Column++)
 800c506:	211c      	movs	r1, #28
 800c508:	187b      	adds	r3, r7, r1
 800c50a:	881a      	ldrh	r2, [r3, #0]
 800c50c:	187b      	adds	r3, r7, r1
 800c50e:	3201      	adds	r2, #1
 800c510:	801a      	strh	r2, [r3, #0]
 800c512:	231c      	movs	r3, #28
 800c514:	18fb      	adds	r3, r7, r3
 800c516:	881b      	ldrh	r3, [r3, #0]
 800c518:	697a      	ldr	r2, [r7, #20]
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d900      	bls.n	800c520 <Paint_DrawChar+0x190>
 800c51e:	e786      	b.n	800c42e <Paint_DrawChar+0x9e>
        } // Write a line
        if (font_Width % 8 != 0)
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	2207      	movs	r2, #7
 800c524:	4013      	ands	r3, r2
 800c526:	d002      	beq.n	800c52e <Paint_DrawChar+0x19e>
            ptr++;
 800c528:	69bb      	ldr	r3, [r7, #24]
 800c52a:	3301      	adds	r3, #1
 800c52c:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < font_Height; Page++)
 800c52e:	211e      	movs	r1, #30
 800c530:	187b      	adds	r3, r7, r1
 800c532:	881a      	ldrh	r2, [r3, #0]
 800c534:	187b      	adds	r3, r7, r1
 800c536:	3201      	adds	r2, #1
 800c538:	801a      	strh	r2, [r3, #0]
 800c53a:	231e      	movs	r3, #30
 800c53c:	18fb      	adds	r3, r7, r3
 800c53e:	881b      	ldrh	r3, [r3, #0]
 800c540:	693a      	ldr	r2, [r7, #16]
 800c542:	429a      	cmp	r2, r3
 800c544:	d900      	bls.n	800c548 <Paint_DrawChar+0x1b8>
 800c546:	e76d      	b.n	800c424 <Paint_DrawChar+0x94>
 800c548:	e000      	b.n	800c54c <Paint_DrawChar+0x1bc>
        return;
 800c54a:	46c0      	nop			@ (mov r8, r8)
    } // Write all
}
 800c54c:	46bd      	mov	sp, r7
 800c54e:	b008      	add	sp, #32
 800c550:	bdb0      	pop	{r4, r5, r7, pc}
 800c552:	46c0      	nop			@ (mov r8, r8)
 800c554:	200005b0 	.word	0x200005b0
 800c558:	1fffffe0 	.word	0x1fffffe0

0800c55c <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char *pString,
                         tFont *Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800c55c:	b5b0      	push	{r4, r5, r7, lr}
 800c55e:	b088      	sub	sp, #32
 800c560:	af02      	add	r7, sp, #8
 800c562:	60ba      	str	r2, [r7, #8]
 800c564:	607b      	str	r3, [r7, #4]
 800c566:	240e      	movs	r4, #14
 800c568:	193b      	adds	r3, r7, r4
 800c56a:	1c02      	adds	r2, r0, #0
 800c56c:	801a      	strh	r2, [r3, #0]
 800c56e:	200c      	movs	r0, #12
 800c570:	183b      	adds	r3, r7, r0
 800c572:	1c0a      	adds	r2, r1, #0
 800c574:	801a      	strh	r2, [r3, #0]
    UWORD Xpoint = Xstart;
 800c576:	2316      	movs	r3, #22
 800c578:	18fb      	adds	r3, r7, r3
 800c57a:	0021      	movs	r1, r4
 800c57c:	187a      	adds	r2, r7, r1
 800c57e:	8812      	ldrh	r2, [r2, #0]
 800c580:	801a      	strh	r2, [r3, #0]
    UWORD Ypoint = Ystart;
 800c582:	2314      	movs	r3, #20
 800c584:	18fb      	adds	r3, r7, r3
 800c586:	183a      	adds	r2, r7, r0
 800c588:	8812      	ldrh	r2, [r2, #0]
 800c58a:	801a      	strh	r2, [r3, #0]
    //			uint32_t font_Width = (*Font).chars[Acsii_Char - ' '].image->width;
    //		uint32_t font_Height = (*Font).chars[Acsii_Char - ' ' ].image->height;

    if (Xstart > Paint.Width || Ystart > Paint.Height)
 800c58c:	4b1f      	ldr	r3, [pc, #124]	@ (800c60c <Paint_DrawString_EN+0xb0>)
 800c58e:	889b      	ldrh	r3, [r3, #4]
 800c590:	187a      	adds	r2, r7, r1
 800c592:	8812      	ldrh	r2, [r2, #0]
 800c594:	429a      	cmp	r2, r3
 800c596:	d835      	bhi.n	800c604 <Paint_DrawString_EN+0xa8>
 800c598:	4b1c      	ldr	r3, [pc, #112]	@ (800c60c <Paint_DrawString_EN+0xb0>)
 800c59a:	88db      	ldrh	r3, [r3, #6]
 800c59c:	183a      	adds	r2, r7, r0
 800c59e:	8812      	ldrh	r2, [r2, #0]
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d82f      	bhi.n	800c604 <Paint_DrawString_EN+0xa8>
    {
        DE_BUG("Paint_DrawString_EN Input exceeds the normal display range\r\n");
        return;
    }

    while (*pString != '\0')
 800c5a4:	e029      	b.n	800c5fa <Paint_DrawString_EN+0x9e>
        //        // If the Y direction is full, reposition to(Xstart, Ystart)
        //        if ((Ypoint  + Font->Height ) > Paint.Height ) {
        //            Xpoint = Xstart;
        //            Ypoint = Ystart;
        //        }
        Paint_DrawChar(Xpoint, Ypoint, *pString, Font, Color_Background, Color_Foreground);
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	781a      	ldrb	r2, [r3, #0]
 800c5aa:	687c      	ldr	r4, [r7, #4]
 800c5ac:	2314      	movs	r3, #20
 800c5ae:	18fb      	adds	r3, r7, r3
 800c5b0:	8819      	ldrh	r1, [r3, #0]
 800c5b2:	2516      	movs	r5, #22
 800c5b4:	197b      	adds	r3, r7, r5
 800c5b6:	8818      	ldrh	r0, [r3, #0]
 800c5b8:	2328      	movs	r3, #40	@ 0x28
 800c5ba:	18fb      	adds	r3, r7, r3
 800c5bc:	881b      	ldrh	r3, [r3, #0]
 800c5be:	9301      	str	r3, [sp, #4]
 800c5c0:	232c      	movs	r3, #44	@ 0x2c
 800c5c2:	18fb      	adds	r3, r7, r3
 800c5c4:	881b      	ldrh	r3, [r3, #0]
 800c5c6:	9300      	str	r3, [sp, #0]
 800c5c8:	0023      	movs	r3, r4
 800c5ca:	f7ff fee1 	bl	800c390 <Paint_DrawChar>

        // The next character of the address

        uint32_t font_Width = (*Font).chars[*pString - ' '].image->width;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	685a      	ldr	r2, [r3, #4]
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	490e      	ldr	r1, [pc, #56]	@ (800c610 <Paint_DrawString_EN+0xb4>)
 800c5d8:	468c      	mov	ip, r1
 800c5da:	4463      	add	r3, ip
 800c5dc:	00db      	lsls	r3, r3, #3
 800c5de:	18d3      	adds	r3, r2, r3
 800c5e0:	685b      	ldr	r3, [r3, #4]
 800c5e2:	889b      	ldrh	r3, [r3, #4]
 800c5e4:	613b      	str	r3, [r7, #16]
        // The next word of the abscissa increases the font of the broadband
        Xpoint += font_Width;
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	b299      	uxth	r1, r3
 800c5ea:	197b      	adds	r3, r7, r5
 800c5ec:	197a      	adds	r2, r7, r5
 800c5ee:	8812      	ldrh	r2, [r2, #0]
 800c5f0:	188a      	adds	r2, r1, r2
 800c5f2:	801a      	strh	r2, [r3, #0]
        pString++;
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	3301      	adds	r3, #1
 800c5f8:	60bb      	str	r3, [r7, #8]
    while (*pString != '\0')
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d1d1      	bne.n	800c5a6 <Paint_DrawString_EN+0x4a>
 800c602:	e000      	b.n	800c606 <Paint_DrawString_EN+0xaa>
        return;
 800c604:	46c0      	nop			@ (mov r8, r8)
    }
}
 800c606:	46bd      	mov	sp, r7
 800c608:	b006      	add	sp, #24
 800c60a:	bdb0      	pop	{r4, r5, r7, pc}
 800c60c:	200005b0 	.word	0x200005b0
 800c610:	1fffffe0 	.word	0x1fffffe0

0800c614 <LL_RTC_TIME_GetHour>:
  *         RTC_TR           HU            LL_RTC_TIME_GetHour
  * @param  RTCx RTC Instance
  * @retval Value between Min_Data=0x01 and Max_Data=0x12 or between Min_Data=0x00 and Max_Data=0x23
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetHour(RTC_TypeDef *RTCx)
{
 800c614:	b590      	push	{r4, r7, lr}
 800c616:	b083      	sub	sp, #12
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  register uint32_t temp = 0U;

  temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU));
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681a      	ldr	r2, [r3, #0]
 800c620:	23fc      	movs	r3, #252	@ 0xfc
 800c622:	039b      	lsls	r3, r3, #14
 800c624:	401a      	ands	r2, r3
 800c626:	0014      	movs	r4, r2
  return (uint32_t)((((temp & RTC_TR_HT) >> RTC_TR_HT_Pos) << 4U) | ((temp & RTC_TR_HU) >> RTC_TR_HU_Pos));
 800c628:	0d23      	lsrs	r3, r4, #20
 800c62a:	011b      	lsls	r3, r3, #4
 800c62c:	2230      	movs	r2, #48	@ 0x30
 800c62e:	401a      	ands	r2, r3
 800c630:	0c23      	lsrs	r3, r4, #16
 800c632:	210f      	movs	r1, #15
 800c634:	400b      	ands	r3, r1
 800c636:	4313      	orrs	r3, r2
}
 800c638:	0018      	movs	r0, r3
 800c63a:	46bd      	mov	sp, r7
 800c63c:	b003      	add	sp, #12
 800c63e:	bd90      	pop	{r4, r7, pc}

0800c640 <LL_RTC_TIME_GetMinute>:
  *         RTC_TR           MNU           LL_RTC_TIME_GetMinute
  * @param  RTCx RTC Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x59
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetMinute(RTC_TypeDef *RTCx)
{
 800c640:	b590      	push	{r4, r7, lr}
 800c642:	b083      	sub	sp, #12
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  register uint32_t temp = 0U;

  temp = READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU));
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681a      	ldr	r2, [r3, #0]
 800c64c:	23fe      	movs	r3, #254	@ 0xfe
 800c64e:	01db      	lsls	r3, r3, #7
 800c650:	401a      	ands	r2, r3
 800c652:	0014      	movs	r4, r2
  return (uint32_t)((((temp & RTC_TR_MNT) >> RTC_TR_MNT_Pos) << 4U) | ((temp & RTC_TR_MNU) >> RTC_TR_MNU_Pos));
 800c654:	0b23      	lsrs	r3, r4, #12
 800c656:	011b      	lsls	r3, r3, #4
 800c658:	2270      	movs	r2, #112	@ 0x70
 800c65a:	401a      	ands	r2, r3
 800c65c:	0a23      	lsrs	r3, r4, #8
 800c65e:	210f      	movs	r1, #15
 800c660:	400b      	ands	r3, r1
 800c662:	4313      	orrs	r3, r2
}
 800c664:	0018      	movs	r0, r3
 800c666:	46bd      	mov	sp, r7
 800c668:	b003      	add	sp, #12
 800c66a:	bd90      	pop	{r4, r7, pc}

0800c66c <LL_RTC_TIME_GetSecond>:
  *         RTC_TR           SU            LL_RTC_TIME_GetSecond
  * @param  RTCx RTC Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x59
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSecond(RTC_TypeDef *RTCx)
{
 800c66c:	b590      	push	{r4, r7, lr}
 800c66e:	b083      	sub	sp, #12
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  register uint32_t temp = 0U;

  temp = READ_BIT(RTCx->TR, (RTC_TR_ST | RTC_TR_SU));
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	227f      	movs	r2, #127	@ 0x7f
 800c67a:	4013      	ands	r3, r2
 800c67c:	001c      	movs	r4, r3
  return (uint32_t)((((temp & RTC_TR_ST) >> RTC_TR_ST_Pos) << 4U) | ((temp & RTC_TR_SU) >> RTC_TR_SU_Pos));
 800c67e:	237f      	movs	r3, #127	@ 0x7f
 800c680:	4023      	ands	r3, r4
}
 800c682:	0018      	movs	r0, r3
 800c684:	46bd      	mov	sp, r7
 800c686:	b003      	add	sp, #12
 800c688:	bd90      	pop	{r4, r7, pc}

0800c68a <LL_RTC_DATE_GetYear>:
  *         RTC_DR           YU            LL_RTC_DATE_GetYear
  * @param  RTCx RTC Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x99
  */
__STATIC_INLINE uint32_t LL_RTC_DATE_GetYear(RTC_TypeDef *RTCx)
{
 800c68a:	b590      	push	{r4, r7, lr}
 800c68c:	b083      	sub	sp, #12
 800c68e:	af00      	add	r7, sp, #0
 800c690:	6078      	str	r0, [r7, #4]
  register uint32_t temp = 0U;

  temp = READ_BIT(RTCx->DR, (RTC_DR_YT | RTC_DR_YU));
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	685a      	ldr	r2, [r3, #4]
 800c696:	23ff      	movs	r3, #255	@ 0xff
 800c698:	041b      	lsls	r3, r3, #16
 800c69a:	401a      	ands	r2, r3
 800c69c:	0014      	movs	r4, r2
  return (uint32_t)((((temp & RTC_DR_YT) >> RTC_DR_YT_Pos) << 4U) | ((temp & RTC_DR_YU) >> RTC_DR_YU_Pos));
 800c69e:	0d23      	lsrs	r3, r4, #20
 800c6a0:	011b      	lsls	r3, r3, #4
 800c6a2:	22ff      	movs	r2, #255	@ 0xff
 800c6a4:	401a      	ands	r2, r3
 800c6a6:	0c23      	lsrs	r3, r4, #16
 800c6a8:	210f      	movs	r1, #15
 800c6aa:	400b      	ands	r3, r1
 800c6ac:	4313      	orrs	r3, r2
}
 800c6ae:	0018      	movs	r0, r3
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	b003      	add	sp, #12
 800c6b4:	bd90      	pop	{r4, r7, pc}

0800c6b6 <LL_RTC_DATE_GetMonth>:
  *         @arg @ref LL_RTC_MONTH_OCTOBER
  *         @arg @ref LL_RTC_MONTH_NOVEMBER
  *         @arg @ref LL_RTC_MONTH_DECEMBER
  */
__STATIC_INLINE uint32_t LL_RTC_DATE_GetMonth(RTC_TypeDef *RTCx)
{
 800c6b6:	b590      	push	{r4, r7, lr}
 800c6b8:	b083      	sub	sp, #12
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	6078      	str	r0, [r7, #4]
  register uint32_t temp = 0U;

  temp = READ_BIT(RTCx->DR, (RTC_DR_MT | RTC_DR_MU));
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	685a      	ldr	r2, [r3, #4]
 800c6c2:	23f8      	movs	r3, #248	@ 0xf8
 800c6c4:	015b      	lsls	r3, r3, #5
 800c6c6:	401a      	ands	r2, r3
 800c6c8:	0014      	movs	r4, r2
  return (uint32_t)((((temp & RTC_DR_MT) >> RTC_DR_MT_Pos) << 4U) | ((temp & RTC_DR_MU) >> RTC_DR_MU_Pos));
 800c6ca:	0b23      	lsrs	r3, r4, #12
 800c6cc:	011b      	lsls	r3, r3, #4
 800c6ce:	2210      	movs	r2, #16
 800c6d0:	401a      	ands	r2, r3
 800c6d2:	0a23      	lsrs	r3, r4, #8
 800c6d4:	210f      	movs	r1, #15
 800c6d6:	400b      	ands	r3, r1
 800c6d8:	4313      	orrs	r3, r2
}
 800c6da:	0018      	movs	r0, r3
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	b003      	add	sp, #12
 800c6e0:	bd90      	pop	{r4, r7, pc}

0800c6e2 <LL_RTC_DATE_GetDay>:
  *         RTC_DR           DU            LL_RTC_DATE_GetDay
  * @param  RTCx RTC Instance
  * @retval Value between Min_Data=0x01 and Max_Data=0x31
  */
__STATIC_INLINE uint32_t LL_RTC_DATE_GetDay(RTC_TypeDef *RTCx)
{
 800c6e2:	b590      	push	{r4, r7, lr}
 800c6e4:	b083      	sub	sp, #12
 800c6e6:	af00      	add	r7, sp, #0
 800c6e8:	6078      	str	r0, [r7, #4]
  register uint32_t temp = 0U;

  temp = READ_BIT(RTCx->DR, (RTC_DR_DT | RTC_DR_DU));
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	685b      	ldr	r3, [r3, #4]
 800c6ee:	223f      	movs	r2, #63	@ 0x3f
 800c6f0:	4013      	ands	r3, r2
 800c6f2:	001c      	movs	r4, r3
  return (uint32_t)((((temp & RTC_DR_DT) >> RTC_DR_DT_Pos) << 4U) | ((temp & RTC_DR_DU) >> RTC_DR_DU_Pos));
 800c6f4:	233f      	movs	r3, #63	@ 0x3f
 800c6f6:	4023      	ands	r3, r4
}
 800c6f8:	0018      	movs	r0, r3
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	b003      	add	sp, #12
 800c6fe:	bd90      	pop	{r4, r7, pc}

0800c700 <battery_out>:
static const struct X0_Y0 big_0 = {67, 30};		//	Big 1
static const struct X0_Y0 small_0 = {142,46};		//	Small 0

// *************************************************************************************

void battery_out(uint16_t bat){  // Battery voltage out  X.Y
 800c700:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c702:	b087      	sub	sp, #28
 800c704:	af02      	add	r7, sp, #8
 800c706:	0002      	movs	r2, r0
 800c708:	1dbb      	adds	r3, r7, #6
 800c70a:	801a      	strh	r2, [r3, #0]
	
	printf("**  Vbat out\n");
 800c70c:	4b2d      	ldr	r3, [pc, #180]	@ (800c7c4 <battery_out+0xc4>)
 800c70e:	0018      	movs	r0, r3
 800c710:	f7f8 ffac 	bl	800566c <printf_>
	uint8_t x = 3;
 800c714:	250f      	movs	r5, #15
 800c716:	197b      	adds	r3, r7, r5
 800c718:	2203      	movs	r2, #3
 800c71a:	701a      	strb	r2, [r3, #0]
	uint8_t y = 160;
 800c71c:	260e      	movs	r6, #14
 800c71e:	19bb      	adds	r3, r7, r6
 800c720:	22a0      	movs	r2, #160	@ 0xa0
 800c722:	701a      	strb	r2, [r3, #0]
//	const uint16_t Ubat_min = 220;				// Battery min voltage 2.2 V (display).
	
	sprintf(str_array, "%2d", bat);
 800c724:	1dbb      	adds	r3, r7, #6
 800c726:	881a      	ldrh	r2, [r3, #0]
 800c728:	4927      	ldr	r1, [pc, #156]	@ (800c7c8 <battery_out+0xc8>)
 800c72a:	4b28      	ldr	r3, [pc, #160]	@ (800c7cc <battery_out+0xcc>)
 800c72c:	0018      	movs	r0, r3
 800c72e:	f7f8 ffbb 	bl	80056a8 <sprintf_>
	Paint_ClearWindows(x, y, x+40, y+29, WHITE);	
 800c732:	197b      	adds	r3, r7, r5
 800c734:	781b      	ldrb	r3, [r3, #0]
 800c736:	b298      	uxth	r0, r3
 800c738:	19bb      	adds	r3, r7, r6
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	b299      	uxth	r1, r3
 800c73e:	197b      	adds	r3, r7, r5
 800c740:	781b      	ldrb	r3, [r3, #0]
 800c742:	b29b      	uxth	r3, r3
 800c744:	3328      	adds	r3, #40	@ 0x28
 800c746:	b29a      	uxth	r2, r3
 800c748:	19bb      	adds	r3, r7, r6
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	b29b      	uxth	r3, r3
 800c74e:	331d      	adds	r3, #29
 800c750:	b29b      	uxth	r3, r3
 800c752:	24ff      	movs	r4, #255	@ 0xff
 800c754:	9400      	str	r4, [sp, #0]
 800c756:	f7ff fb49 	bl	800bdec <Paint_ClearWindows>

	Paint_DrawChar(x, y, str_array[0], &calibri_24pts, BLACK, WHITE);	// 	12, 29, 8
 800c75a:	197b      	adds	r3, r7, r5
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	b298      	uxth	r0, r3
 800c760:	19bb      	adds	r3, r7, r6
 800c762:	781b      	ldrb	r3, [r3, #0]
 800c764:	b299      	uxth	r1, r3
 800c766:	4b19      	ldr	r3, [pc, #100]	@ (800c7cc <battery_out+0xcc>)
 800c768:	781a      	ldrb	r2, [r3, #0]
 800c76a:	4b19      	ldr	r3, [pc, #100]	@ (800c7d0 <battery_out+0xd0>)
 800c76c:	24ff      	movs	r4, #255	@ 0xff
 800c76e:	9401      	str	r4, [sp, #4]
 800c770:	2400      	movs	r4, #0
 800c772:	9400      	str	r4, [sp, #0]
 800c774:	f7ff fe0c 	bl	800c390 <Paint_DrawChar>
	Paint_DrawChar(x+12, y, str_array[1], &calibri_24pts, BLACK, WHITE);	
 800c778:	197b      	adds	r3, r7, r5
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	b29b      	uxth	r3, r3
 800c77e:	330c      	adds	r3, #12
 800c780:	b298      	uxth	r0, r3
 800c782:	19bb      	adds	r3, r7, r6
 800c784:	781b      	ldrb	r3, [r3, #0]
 800c786:	b299      	uxth	r1, r3
 800c788:	4b10      	ldr	r3, [pc, #64]	@ (800c7cc <battery_out+0xcc>)
 800c78a:	785a      	ldrb	r2, [r3, #1]
 800c78c:	4b10      	ldr	r3, [pc, #64]	@ (800c7d0 <battery_out+0xd0>)
 800c78e:	24ff      	movs	r4, #255	@ 0xff
 800c790:	9401      	str	r4, [sp, #4]
 800c792:	2400      	movs	r4, #0
 800c794:	9400      	str	r4, [sp, #0]
 800c796:	f7ff fdfb 	bl	800c390 <Paint_DrawChar>
	Paint_DrawChar(x+12+12, y, str_array[2], &calibri_24pts, BLACK, WHITE);	
 800c79a:	197b      	adds	r3, r7, r5
 800c79c:	781b      	ldrb	r3, [r3, #0]
 800c79e:	b29b      	uxth	r3, r3
 800c7a0:	3318      	adds	r3, #24
 800c7a2:	b298      	uxth	r0, r3
 800c7a4:	19bb      	adds	r3, r7, r6
 800c7a6:	781b      	ldrb	r3, [r3, #0]
 800c7a8:	b299      	uxth	r1, r3
 800c7aa:	4b08      	ldr	r3, [pc, #32]	@ (800c7cc <battery_out+0xcc>)
 800c7ac:	789a      	ldrb	r2, [r3, #2]
 800c7ae:	4b08      	ldr	r3, [pc, #32]	@ (800c7d0 <battery_out+0xd0>)
 800c7b0:	24ff      	movs	r4, #255	@ 0xff
 800c7b2:	9401      	str	r4, [sp, #4]
 800c7b4:	2400      	movs	r4, #0
 800c7b6:	9400      	str	r4, [sp, #0]
 800c7b8:	f7ff fdea 	bl	800c390 <Paint_DrawChar>
	
//		EPD_1IN54_V2_DisplayPart(BlackImage);	
}
 800c7bc:	46c0      	nop			@ (mov r8, r8)
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	b005      	add	sp, #20
 800c7c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7c4:	0800fd20 	.word	0x0800fd20
 800c7c8:	0800fd30 	.word	0x0800fd30
 800c7cc:	200005f4 	.word	0x200005f4
 800c7d0:	20000160 	.word	0x20000160

0800c7d4 <temperature_out>:


void temperature_out(uint16_t tempr){
 800c7d4:	b590      	push	{r4, r7, lr}
 800c7d6:	b085      	sub	sp, #20
 800c7d8:	af02      	add	r7, sp, #8
 800c7da:	0002      	movs	r2, r0
 800c7dc:	1dbb      	adds	r3, r7, #6
 800c7de:	801a      	strh	r2, [r3, #0]
	
	printf("**  T out\n");
 800c7e0:	4b26      	ldr	r3, [pc, #152]	@ (800c87c <temperature_out+0xa8>)
 800c7e2:	0018      	movs	r0, r3
 800c7e4:	f7f8 ff42 	bl	800566c <printf_>
	sprintf(str_array, "%3d", tempr);						
 800c7e8:	1dbb      	adds	r3, r7, #6
 800c7ea:	881a      	ldrh	r2, [r3, #0]
 800c7ec:	4924      	ldr	r1, [pc, #144]	@ (800c880 <temperature_out+0xac>)
 800c7ee:	4b25      	ldr	r3, [pc, #148]	@ (800c884 <temperature_out+0xb0>)
 800c7f0:	0018      	movs	r0, r3
 800c7f2:	f7f8 ff59 	bl	80056a8 <sprintf_>
	Paint_ClearWindows(big_1.x, big_1.y, 142 + 41, big_1.y + 101, WHITE);	// 40 ms		
 800c7f6:	230a      	movs	r3, #10
 800c7f8:	0018      	movs	r0, r3
 800c7fa:	231e      	movs	r3, #30
 800c7fc:	0019      	movs	r1, r3
 800c7fe:	231e      	movs	r3, #30
 800c800:	3365      	adds	r3, #101	@ 0x65
 800c802:	b29b      	uxth	r3, r3
 800c804:	22ff      	movs	r2, #255	@ 0xff
 800c806:	9200      	str	r2, [sp, #0]
 800c808:	22b7      	movs	r2, #183	@ 0xb7
 800c80a:	f7ff faef 	bl	800bdec <Paint_ClearWindows>

	Paint_DrawChar(big_1.x, big_1.y, str_array[0], &calibri_104pts, BLACK, WHITE); // 15 ms
 800c80e:	230a      	movs	r3, #10
 800c810:	0018      	movs	r0, r3
 800c812:	231e      	movs	r3, #30
 800c814:	001c      	movs	r4, r3
 800c816:	4b1b      	ldr	r3, [pc, #108]	@ (800c884 <temperature_out+0xb0>)
 800c818:	781a      	ldrb	r2, [r3, #0]
 800c81a:	4b1b      	ldr	r3, [pc, #108]	@ (800c888 <temperature_out+0xb4>)
 800c81c:	21ff      	movs	r1, #255	@ 0xff
 800c81e:	9101      	str	r1, [sp, #4]
 800c820:	2100      	movs	r1, #0
 800c822:	9100      	str	r1, [sp, #0]
 800c824:	0021      	movs	r1, r4
 800c826:	f7ff fdb3 	bl	800c390 <Paint_DrawChar>
	Paint_DrawChar(big_0.x, big_0.y, str_array[1], &calibri_104pts, BLACK, WHITE);
 800c82a:	2343      	movs	r3, #67	@ 0x43
 800c82c:	0018      	movs	r0, r3
 800c82e:	231e      	movs	r3, #30
 800c830:	001c      	movs	r4, r3
 800c832:	4b14      	ldr	r3, [pc, #80]	@ (800c884 <temperature_out+0xb0>)
 800c834:	785a      	ldrb	r2, [r3, #1]
 800c836:	4b14      	ldr	r3, [pc, #80]	@ (800c888 <temperature_out+0xb4>)
 800c838:	21ff      	movs	r1, #255	@ 0xff
 800c83a:	9101      	str	r1, [sp, #4]
 800c83c:	2100      	movs	r1, #0
 800c83e:	9100      	str	r1, [sp, #0]
 800c840:	0021      	movs	r1, r4
 800c842:	f7ff fda5 	bl	800c390 <Paint_DrawChar>
	Paint_DrawPoint(131, 100, BLACK, DOT_PIXEL_5X5, DOT_FILL_AROUND); //Draw decimal point
 800c846:	2301      	movs	r3, #1
 800c848:	9300      	str	r3, [sp, #0]
 800c84a:	2305      	movs	r3, #5
 800c84c:	2200      	movs	r2, #0
 800c84e:	2164      	movs	r1, #100	@ 0x64
 800c850:	2083      	movs	r0, #131	@ 0x83
 800c852:	f7ff fb15 	bl	800be80 <Paint_DrawPoint>
	Paint_DrawChar(small_0.x, small_0.y, str_array[2], &calibri_80pts, BLACK, WHITE);					
 800c856:	238e      	movs	r3, #142	@ 0x8e
 800c858:	0018      	movs	r0, r3
 800c85a:	232e      	movs	r3, #46	@ 0x2e
 800c85c:	001c      	movs	r4, r3
 800c85e:	4b09      	ldr	r3, [pc, #36]	@ (800c884 <temperature_out+0xb0>)
 800c860:	789a      	ldrb	r2, [r3, #2]
 800c862:	4b0a      	ldr	r3, [pc, #40]	@ (800c88c <temperature_out+0xb8>)
 800c864:	21ff      	movs	r1, #255	@ 0xff
 800c866:	9101      	str	r1, [sp, #4]
 800c868:	2100      	movs	r1, #0
 800c86a:	9100      	str	r1, [sp, #0]
 800c86c:	0021      	movs	r1, r4
 800c86e:	f7ff fd8f 	bl	800c390 <Paint_DrawChar>

//	EPD_1IN54_V2_DisplayPart(BlackImage);	// 0.84 sec ms
}
 800c872:	46c0      	nop			@ (mov r8, r8)
 800c874:	46bd      	mov	sp, r7
 800c876:	b003      	add	sp, #12
 800c878:	bd90      	pop	{r4, r7, pc}
 800c87a:	46c0      	nop			@ (mov r8, r8)
 800c87c:	0800fd34 	.word	0x0800fd34
 800c880:	0800fd40 	.word	0x0800fd40
 800c884:	200005f4 	.word	0x200005f4
 800c888:	20000150 	.word	0x20000150
 800c88c:	20000170 	.word	0x20000170

0800c890 <humidity_out>:


void humidity_out(uint16_t hum){
 800c890:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c892:	b087      	sub	sp, #28
 800c894:	af02      	add	r7, sp, #8
 800c896:	0002      	movs	r2, r0
 800c898:	1dbb      	adds	r3, r7, #6
 800c89a:	801a      	strh	r2, [r3, #0]

	printf("**  H out\n");
 800c89c:	4b1d      	ldr	r3, [pc, #116]	@ (800c914 <humidity_out+0x84>)
 800c89e:	0018      	movs	r0, r3
 800c8a0:	f7f8 fee4 	bl	800566c <printf_>
	uint8_t x = 125;
 800c8a4:	240f      	movs	r4, #15
 800c8a6:	193b      	adds	r3, r7, r4
 800c8a8:	227d      	movs	r2, #125	@ 0x7d
 800c8aa:	701a      	strb	r2, [r3, #0]
	uint8_t y = 150;
 800c8ac:	250e      	movs	r5, #14
 800c8ae:	197b      	adds	r3, r7, r5
 800c8b0:	2296      	movs	r2, #150	@ 0x96
 800c8b2:	701a      	strb	r2, [r3, #0]
	char pcent = '%';
 800c8b4:	260d      	movs	r6, #13
 800c8b6:	19bb      	adds	r3, r7, r6
 800c8b8:	2225      	movs	r2, #37	@ 0x25
 800c8ba:	701a      	strb	r2, [r3, #0]
	sprintf(str_array, "%2d", hum);
 800c8bc:	1dbb      	adds	r3, r7, #6
 800c8be:	881a      	ldrh	r2, [r3, #0]
 800c8c0:	4915      	ldr	r1, [pc, #84]	@ (800c918 <humidity_out+0x88>)
 800c8c2:	4b16      	ldr	r3, [pc, #88]	@ (800c91c <humidity_out+0x8c>)
 800c8c4:	0018      	movs	r0, r3
 800c8c6:	f7f8 feef 	bl	80056a8 <sprintf_>
	// append % to string
    strncat(str_array, &pcent, 1);
 800c8ca:	19b9      	adds	r1, r7, r6
 800c8cc:	4b13      	ldr	r3, [pc, #76]	@ (800c91c <humidity_out+0x8c>)
 800c8ce:	2201      	movs	r2, #1
 800c8d0:	0018      	movs	r0, r3
 800c8d2:	f001 f92d 	bl	800db30 <strncat>
	
	/******************************************************************************
	void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,tFont* Font, UWORD Color_Foreground, UWORD Color_Background)
	******************************************************************************/

	Paint_ClearWindows(x, y, 200, 197, WHITE);	// 10^1
 800c8d6:	193b      	adds	r3, r7, r4
 800c8d8:	781b      	ldrb	r3, [r3, #0]
 800c8da:	b298      	uxth	r0, r3
 800c8dc:	197b      	adds	r3, r7, r5
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	b299      	uxth	r1, r3
 800c8e2:	23ff      	movs	r3, #255	@ 0xff
 800c8e4:	9300      	str	r3, [sp, #0]
 800c8e6:	23c5      	movs	r3, #197	@ 0xc5
 800c8e8:	22c8      	movs	r2, #200	@ 0xc8
 800c8ea:	f7ff fa7f 	bl	800bdec <Paint_ClearWindows>
	Paint_DrawString_EN(x, y, (char*)str_array, &calibri_36pts, WHITE, BLACK); // 20, 34
 800c8ee:	193b      	adds	r3, r7, r4
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	b298      	uxth	r0, r3
 800c8f4:	197b      	adds	r3, r7, r5
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	b299      	uxth	r1, r3
 800c8fa:	4b09      	ldr	r3, [pc, #36]	@ (800c920 <humidity_out+0x90>)
 800c8fc:	4a07      	ldr	r2, [pc, #28]	@ (800c91c <humidity_out+0x8c>)
 800c8fe:	2400      	movs	r4, #0
 800c900:	9401      	str	r4, [sp, #4]
 800c902:	24ff      	movs	r4, #255	@ 0xff
 800c904:	9400      	str	r4, [sp, #0]
 800c906:	f7ff fe29 	bl	800c55c <Paint_DrawString_EN>

}
 800c90a:	46c0      	nop			@ (mov r8, r8)
 800c90c:	46bd      	mov	sp, r7
 800c90e:	b005      	add	sp, #20
 800c910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c912:	46c0      	nop			@ (mov r8, r8)
 800c914:	0800fd44 	.word	0x0800fd44
 800c918:	0800fd30 	.word	0x0800fd30
 800c91c:	200005f4 	.word	0x200005f4
 800c920:	20000168 	.word	0x20000168

0800c924 <ESP_Init>:



//  **************************************************************************************

int ESP_Init(void){ 
 800c924:	b580      	push	{r7, lr}
 800c926:	b086      	sub	sp, #24
 800c928:	af04      	add	r7, sp, #16
	printf("ESP_Init\n");
 800c92a:	4b26      	ldr	r3, [pc, #152]	@ (800c9c4 <ESP_Init+0xa0>)
 800c92c:	0018      	movs	r0, r3
 800c92e:	f7f8 fe9d 	bl	800566c <printf_>
    DEV_Module_Init();		// DC_L();SPI_CS_H();RST_H(); - set initial values
 800c932:	f7fe fc75 	bl	800b220 <DEV_Module_Init>
    EPD_1IN54_V2_Init();	// Reset pin set low, set LUT etc.
 800c936:	f7fe fdf3 	bl	800b520 <EPD_1IN54_V2_Init>

    //Create a new image cache    
    /* !!!  you have to edit the startup_stm32fxxx.s file and set a heap size = 1400 !!!  */
    UWORD Imagesize = ((EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1)) * EPD_1IN54_V2_HEIGHT;
 800c93a:	1dbb      	adds	r3, r7, #6
 800c93c:	4a22      	ldr	r2, [pc, #136]	@ (800c9c8 <ESP_Init+0xa4>)
 800c93e:	801a      	strh	r2, [r3, #0]
    if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 800c940:	1dbb      	adds	r3, r7, #6
 800c942:	881b      	ldrh	r3, [r3, #0]
 800c944:	0018      	movs	r0, r3
 800c946:	f000 faad 	bl	800cea4 <malloc>
 800c94a:	0003      	movs	r3, r0
 800c94c:	001a      	movs	r2, r3
 800c94e:	4b1f      	ldr	r3, [pc, #124]	@ (800c9cc <ESP_Init+0xa8>)
 800c950:	601a      	str	r2, [r3, #0]
 800c952:	4b1e      	ldr	r3, [pc, #120]	@ (800c9cc <ESP_Init+0xa8>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d106      	bne.n	800c968 <ESP_Init+0x44>
        printf("Failed to apply for black memory...\r\n");
 800c95a:	4b1d      	ldr	r3, [pc, #116]	@ (800c9d0 <ESP_Init+0xac>)
 800c95c:	0018      	movs	r0, r3
 800c95e:	f7f8 fe85 	bl	800566c <printf_>
        return -1;
 800c962:	2301      	movs	r3, #1
 800c964:	425b      	negs	r3, r3
 800c966:	e029      	b.n	800c9bc <ESP_Init+0x98>
    }
	
	Paint_NewImage(BlackImage, EPD_1IN54_V2_WIDTH, EPD_1IN54_V2_HEIGHT, 0, WHITE);
 800c968:	4b18      	ldr	r3, [pc, #96]	@ (800c9cc <ESP_Init+0xa8>)
 800c96a:	6818      	ldr	r0, [r3, #0]
 800c96c:	23ff      	movs	r3, #255	@ 0xff
 800c96e:	9300      	str	r3, [sp, #0]
 800c970:	2300      	movs	r3, #0
 800c972:	22c8      	movs	r2, #200	@ 0xc8
 800c974:	21c8      	movs	r1, #200	@ 0xc8
 800c976:	f7fe ff91 	bl	800b89c <Paint_NewImage>
	
//  	Paint_Clear(WHITE);
    Paint_SelectImage(BlackImage);
 800c97a:	4b14      	ldr	r3, [pc, #80]	@ (800c9cc <ESP_Init+0xa8>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	0018      	movs	r0, r3
 800c980:	f7fe fffa 	bl	800b978 <Paint_SelectImage>
    Paint_Clear(WHITE);
 800c984:	20ff      	movs	r0, #255	@ 0xff
 800c986:	f7ff f9a3 	bl	800bcd0 <Paint_Clear>
	Paint_DrawRectangle(2, 3, 198, 140, BLACK, DOT_PIXEL_2X2, DRAW_FILL_EMPTY);
 800c98a:	2300      	movs	r3, #0
 800c98c:	9302      	str	r3, [sp, #8]
 800c98e:	2302      	movs	r3, #2
 800c990:	9301      	str	r3, [sp, #4]
 800c992:	2300      	movs	r3, #0
 800c994:	9300      	str	r3, [sp, #0]
 800c996:	238c      	movs	r3, #140	@ 0x8c
 800c998:	22c6      	movs	r2, #198	@ 0xc6
 800c99a:	2103      	movs	r1, #3
 800c99c:	2002      	movs	r0, #2
 800c99e:	f7ff fc2f 	bl	800c200 <Paint_DrawRectangle>
	
    EPD_1IN54_V2_Display(BlackImage);	// Write data to display's RAM (do you really need it?)
 800c9a2:	4b0a      	ldr	r3, [pc, #40]	@ (800c9cc <ESP_Init+0xa8>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	0018      	movs	r0, r3
 800c9a8:	f7fe fe44 	bl	800b634 <EPD_1IN54_V2_Display>
	 
    EPD_1IN54_V2_DisplayPartBaseImage(BlackImage);
 800c9ac:	4b07      	ldr	r3, [pc, #28]	@ (800c9cc <ESP_Init+0xa8>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	0018      	movs	r0, r3
 800c9b2:	f7fe fe8e 	bl	800b6d2 <EPD_1IN54_V2_DisplayPartBaseImage>
	EPD_1IN54_V2_Init_Partial();
 800c9b6:	f7fe fdfb 	bl	800b5b0 <EPD_1IN54_V2_Init_Partial>
	
	return 0;
 800c9ba:	2300      	movs	r3, #0
}
 800c9bc:	0018      	movs	r0, r3
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	b002      	add	sp, #8
 800c9c2:	bd80      	pop	{r7, pc}
 800c9c4:	0800fd50 	.word	0x0800fd50
 800c9c8:	00001388 	.word	0x00001388
 800c9cc:	200005f0 	.word	0x200005f0
 800c9d0:	0800fd5c 	.word	0x0800fd5c

0800c9d4 <final_message>:


void final_message(uint16_t bat_voltage){ 	// sleep
 800c9d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9d6:	b087      	sub	sp, #28
 800c9d8:	af02      	add	r7, sp, #8
 800c9da:	0002      	movs	r2, r0
 800c9dc:	1dbb      	adds	r3, r7, #6
 800c9de:	801a      	strh	r2, [r3, #0]
	
	ESP_Init();
 800c9e0:	f7ff ffa0 	bl	800c924 <ESP_Init>
	uint16_t Xstart = 5;
 800c9e4:	250e      	movs	r5, #14
 800c9e6:	197b      	adds	r3, r7, r5
 800c9e8:	2205      	movs	r2, #5
 800c9ea:	801a      	strh	r2, [r3, #0]
	uint16_t Ystart = 2;
 800c9ec:	260c      	movs	r6, #12
 800c9ee:	19bb      	adds	r3, r7, r6
 800c9f0:	2202      	movs	r2, #2
 800c9f2:	801a      	strh	r2, [r3, #0]
	
	EPD_1IN54_V2_Init();
 800c9f4:	f7fe fd94 	bl	800b520 <EPD_1IN54_V2_Init>
	Paint_SelectImage(BlackImage);	// Paint.Image = image;
 800c9f8:	4b32      	ldr	r3, [pc, #200]	@ (800cac4 <final_message+0xf0>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	0018      	movs	r0, r3
 800c9fe:	f7fe ffbb 	bl	800b978 <Paint_SelectImage>
	Paint_Clear(WHITE);
 800ca02:	20ff      	movs	r0, #255	@ 0xff
 800ca04:	f7ff f964 	bl	800bcd0 <Paint_Clear>

	sprintf(str_array, "%d", bat_voltage);	
 800ca08:	1dbb      	adds	r3, r7, #6
 800ca0a:	881a      	ldrh	r2, [r3, #0]
 800ca0c:	492e      	ldr	r1, [pc, #184]	@ (800cac8 <final_message+0xf4>)
 800ca0e:	4b2f      	ldr	r3, [pc, #188]	@ (800cacc <final_message+0xf8>)
 800ca10:	0018      	movs	r0, r3
 800ca12:	f7f8 fe49 	bl	80056a8 <sprintf_>
	Paint_DrawString_EN(Xstart, Ystart, "Vbat:", &calibri_20pts, WHITE, BLACK);			// font size 17,24
 800ca16:	4c2e      	ldr	r4, [pc, #184]	@ (800cad0 <final_message+0xfc>)
 800ca18:	4a2e      	ldr	r2, [pc, #184]	@ (800cad4 <final_message+0x100>)
 800ca1a:	19bb      	adds	r3, r7, r6
 800ca1c:	8819      	ldrh	r1, [r3, #0]
 800ca1e:	197b      	adds	r3, r7, r5
 800ca20:	8818      	ldrh	r0, [r3, #0]
 800ca22:	2300      	movs	r3, #0
 800ca24:	9301      	str	r3, [sp, #4]
 800ca26:	23ff      	movs	r3, #255	@ 0xff
 800ca28:	9300      	str	r3, [sp, #0]
 800ca2a:	0023      	movs	r3, r4
 800ca2c:	f7ff fd96 	bl	800c55c <Paint_DrawString_EN>
	Paint_DrawString_EN(Xstart + 7*10, Ystart, str_array, &calibri_20pts, WHITE, BLACK);
 800ca30:	197b      	adds	r3, r7, r5
 800ca32:	881b      	ldrh	r3, [r3, #0]
 800ca34:	3346      	adds	r3, #70	@ 0x46
 800ca36:	b298      	uxth	r0, r3
 800ca38:	4c25      	ldr	r4, [pc, #148]	@ (800cad0 <final_message+0xfc>)
 800ca3a:	4a24      	ldr	r2, [pc, #144]	@ (800cacc <final_message+0xf8>)
 800ca3c:	19bb      	adds	r3, r7, r6
 800ca3e:	8819      	ldrh	r1, [r3, #0]
 800ca40:	2300      	movs	r3, #0
 800ca42:	9301      	str	r3, [sp, #4]
 800ca44:	23ff      	movs	r3, #255	@ 0xff
 800ca46:	9300      	str	r3, [sp, #0]
 800ca48:	0023      	movs	r3, r4
 800ca4a:	f7ff fd87 	bl	800c55c <Paint_DrawString_EN>
	
	Show_RTC_Calendar();
 800ca4e:	f000 f849 	bl	800cae4 <Show_RTC_Calendar>
	Paint_DrawString_EN(Xstart, Ystart+ 75, "EndTime:", &calibri_20pts, WHITE, BLACK);
 800ca52:	19bb      	adds	r3, r7, r6
 800ca54:	881b      	ldrh	r3, [r3, #0]
 800ca56:	334b      	adds	r3, #75	@ 0x4b
 800ca58:	b299      	uxth	r1, r3
 800ca5a:	4c1d      	ldr	r4, [pc, #116]	@ (800cad0 <final_message+0xfc>)
 800ca5c:	4a1e      	ldr	r2, [pc, #120]	@ (800cad8 <final_message+0x104>)
 800ca5e:	197b      	adds	r3, r7, r5
 800ca60:	8818      	ldrh	r0, [r3, #0]
 800ca62:	2300      	movs	r3, #0
 800ca64:	9301      	str	r3, [sp, #4]
 800ca66:	23ff      	movs	r3, #255	@ 0xff
 800ca68:	9300      	str	r3, [sp, #0]
 800ca6a:	0023      	movs	r3, r4
 800ca6c:	f7ff fd76 	bl	800c55c <Paint_DrawString_EN>
	Paint_DrawString_EN(Xstart, Ystart + 100, aEndTime, &calibri_20pts, WHITE, BLACK);
 800ca70:	19bb      	adds	r3, r7, r6
 800ca72:	881b      	ldrh	r3, [r3, #0]
 800ca74:	3364      	adds	r3, #100	@ 0x64
 800ca76:	b299      	uxth	r1, r3
 800ca78:	4c15      	ldr	r4, [pc, #84]	@ (800cad0 <final_message+0xfc>)
 800ca7a:	4a18      	ldr	r2, [pc, #96]	@ (800cadc <final_message+0x108>)
 800ca7c:	197b      	adds	r3, r7, r5
 800ca7e:	8818      	ldrh	r0, [r3, #0]
 800ca80:	2300      	movs	r3, #0
 800ca82:	9301      	str	r3, [sp, #4]
 800ca84:	23ff      	movs	r3, #255	@ 0xff
 800ca86:	9300      	str	r3, [sp, #0]
 800ca88:	0023      	movs	r3, r4
 800ca8a:	f7ff fd67 	bl	800c55c <Paint_DrawString_EN>
	Paint_DrawString_EN(Xstart + 6*10 + 20, Ystart + 100, aEndDate, &calibri_20pts, WHITE, BLACK);
 800ca8e:	197b      	adds	r3, r7, r5
 800ca90:	881b      	ldrh	r3, [r3, #0]
 800ca92:	3350      	adds	r3, #80	@ 0x50
 800ca94:	b298      	uxth	r0, r3
 800ca96:	19bb      	adds	r3, r7, r6
 800ca98:	881b      	ldrh	r3, [r3, #0]
 800ca9a:	3364      	adds	r3, #100	@ 0x64
 800ca9c:	b299      	uxth	r1, r3
 800ca9e:	4b0c      	ldr	r3, [pc, #48]	@ (800cad0 <final_message+0xfc>)
 800caa0:	4a0f      	ldr	r2, [pc, #60]	@ (800cae0 <final_message+0x10c>)
 800caa2:	2400      	movs	r4, #0
 800caa4:	9401      	str	r4, [sp, #4]
 800caa6:	24ff      	movs	r4, #255	@ 0xff
 800caa8:	9400      	str	r4, [sp, #0]
 800caaa:	f7ff fd57 	bl	800c55c <Paint_DrawString_EN>
			
	EPD_1IN54_V2_Display(BlackImage);
 800caae:	4b05      	ldr	r3, [pc, #20]	@ (800cac4 <final_message+0xf0>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	0018      	movs	r0, r3
 800cab4:	f7fe fdbe 	bl	800b634 <EPD_1IN54_V2_Display>
	EPD_1IN54_V2_Sleep();
 800cab8:	f7fe fee4 	bl	800b884 <EPD_1IN54_V2_Sleep>
}
 800cabc:	46c0      	nop			@ (mov r8, r8)
 800cabe:	46bd      	mov	sp, r7
 800cac0:	b005      	add	sp, #20
 800cac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cac4:	200005f0 	.word	0x200005f0
 800cac8:	0800fd84 	.word	0x0800fd84
 800cacc:	200005f4 	.word	0x200005f4
 800cad0:	20000158 	.word	0x20000158
 800cad4:	0800fd88 	.word	0x0800fd88
 800cad8:	0800fd90 	.word	0x0800fd90
 800cadc:	200005c8 	.word	0x200005c8
 800cae0:	200005dc 	.word	0x200005dc

0800cae4 <Show_RTC_Calendar>:



void Show_RTC_Calendar(void)
{
 800cae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cae6:	b083      	sub	sp, #12
 800cae8:	af02      	add	r7, sp, #8
  /* Note: need to convert in decimal value in using __LL_RTC_CONVERT_BCD2BIN helper macro */
  /* Display time Format : hh:mm:ss */
  sprintf((char*)aEndTime,"%.2d:%.2d:%.2d", __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC)), 
 800caea:	4b61      	ldr	r3, [pc, #388]	@ (800cc70 <Show_RTC_Calendar+0x18c>)
 800caec:	0018      	movs	r0, r3
 800caee:	f7ff fd91 	bl	800c614 <LL_RTC_TIME_GetHour>
 800caf2:	0003      	movs	r3, r0
 800caf4:	b2db      	uxtb	r3, r3
 800caf6:	111b      	asrs	r3, r3, #4
 800caf8:	b2db      	uxtb	r3, r3
 800cafa:	220f      	movs	r2, #15
 800cafc:	4013      	ands	r3, r2
 800cafe:	b2db      	uxtb	r3, r3
 800cb00:	1c1a      	adds	r2, r3, #0
 800cb02:	0092      	lsls	r2, r2, #2
 800cb04:	18d3      	adds	r3, r2, r3
 800cb06:	18db      	adds	r3, r3, r3
 800cb08:	b2dc      	uxtb	r4, r3
 800cb0a:	4b59      	ldr	r3, [pc, #356]	@ (800cc70 <Show_RTC_Calendar+0x18c>)
 800cb0c:	0018      	movs	r0, r3
 800cb0e:	f7ff fd81 	bl	800c614 <LL_RTC_TIME_GetHour>
 800cb12:	0003      	movs	r3, r0
 800cb14:	b2db      	uxtb	r3, r3
 800cb16:	220f      	movs	r2, #15
 800cb18:	4013      	ands	r3, r2
 800cb1a:	b2db      	uxtb	r3, r3
 800cb1c:	18e3      	adds	r3, r4, r3
 800cb1e:	b2db      	uxtb	r3, r3
 800cb20:	001d      	movs	r5, r3
          __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC)), 
 800cb22:	4b53      	ldr	r3, [pc, #332]	@ (800cc70 <Show_RTC_Calendar+0x18c>)
 800cb24:	0018      	movs	r0, r3
 800cb26:	f7ff fd8b 	bl	800c640 <LL_RTC_TIME_GetMinute>
 800cb2a:	0003      	movs	r3, r0
 800cb2c:	b2db      	uxtb	r3, r3
 800cb2e:	111b      	asrs	r3, r3, #4
 800cb30:	b2db      	uxtb	r3, r3
 800cb32:	220f      	movs	r2, #15
 800cb34:	4013      	ands	r3, r2
 800cb36:	b2db      	uxtb	r3, r3
 800cb38:	1c1a      	adds	r2, r3, #0
 800cb3a:	0092      	lsls	r2, r2, #2
 800cb3c:	18d3      	adds	r3, r2, r3
 800cb3e:	18db      	adds	r3, r3, r3
 800cb40:	b2dc      	uxtb	r4, r3
 800cb42:	4b4b      	ldr	r3, [pc, #300]	@ (800cc70 <Show_RTC_Calendar+0x18c>)
 800cb44:	0018      	movs	r0, r3
 800cb46:	f7ff fd7b 	bl	800c640 <LL_RTC_TIME_GetMinute>
 800cb4a:	0003      	movs	r3, r0
 800cb4c:	b2db      	uxtb	r3, r3
 800cb4e:	220f      	movs	r2, #15
 800cb50:	4013      	ands	r3, r2
 800cb52:	b2db      	uxtb	r3, r3
 800cb54:	18e3      	adds	r3, r4, r3
 800cb56:	b2db      	uxtb	r3, r3
  sprintf((char*)aEndTime,"%.2d:%.2d:%.2d", __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC)), 
 800cb58:	001e      	movs	r6, r3
          __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC)));
 800cb5a:	4b45      	ldr	r3, [pc, #276]	@ (800cc70 <Show_RTC_Calendar+0x18c>)
 800cb5c:	0018      	movs	r0, r3
 800cb5e:	f7ff fd85 	bl	800c66c <LL_RTC_TIME_GetSecond>
 800cb62:	0003      	movs	r3, r0
 800cb64:	b2db      	uxtb	r3, r3
 800cb66:	111b      	asrs	r3, r3, #4
 800cb68:	b2db      	uxtb	r3, r3
 800cb6a:	220f      	movs	r2, #15
 800cb6c:	4013      	ands	r3, r2
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	1c1a      	adds	r2, r3, #0
 800cb72:	0092      	lsls	r2, r2, #2
 800cb74:	18d3      	adds	r3, r2, r3
 800cb76:	18db      	adds	r3, r3, r3
 800cb78:	b2dc      	uxtb	r4, r3
 800cb7a:	4b3d      	ldr	r3, [pc, #244]	@ (800cc70 <Show_RTC_Calendar+0x18c>)
 800cb7c:	0018      	movs	r0, r3
 800cb7e:	f7ff fd75 	bl	800c66c <LL_RTC_TIME_GetSecond>
 800cb82:	0003      	movs	r3, r0
 800cb84:	b2db      	uxtb	r3, r3
 800cb86:	220f      	movs	r2, #15
 800cb88:	4013      	ands	r3, r2
 800cb8a:	b2db      	uxtb	r3, r3
 800cb8c:	18e3      	adds	r3, r4, r3
 800cb8e:	b2db      	uxtb	r3, r3
  sprintf((char*)aEndTime,"%.2d:%.2d:%.2d", __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC)), 
 800cb90:	4938      	ldr	r1, [pc, #224]	@ (800cc74 <Show_RTC_Calendar+0x190>)
 800cb92:	4839      	ldr	r0, [pc, #228]	@ (800cc78 <Show_RTC_Calendar+0x194>)
 800cb94:	9300      	str	r3, [sp, #0]
 800cb96:	0033      	movs	r3, r6
 800cb98:	002a      	movs	r2, r5
 800cb9a:	f7f8 fd85 	bl	80056a8 <sprintf_>
  
  /* Display date Format : mm-dd-yy */
  sprintf((char*)aEndDate,"%.2d-%.2d-%.2d", __LL_RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC)), 
 800cb9e:	4b34      	ldr	r3, [pc, #208]	@ (800cc70 <Show_RTC_Calendar+0x18c>)
 800cba0:	0018      	movs	r0, r3
 800cba2:	f7ff fd88 	bl	800c6b6 <LL_RTC_DATE_GetMonth>
 800cba6:	0003      	movs	r3, r0
 800cba8:	b2db      	uxtb	r3, r3
 800cbaa:	111b      	asrs	r3, r3, #4
 800cbac:	b2db      	uxtb	r3, r3
 800cbae:	220f      	movs	r2, #15
 800cbb0:	4013      	ands	r3, r2
 800cbb2:	b2db      	uxtb	r3, r3
 800cbb4:	1c1a      	adds	r2, r3, #0
 800cbb6:	0092      	lsls	r2, r2, #2
 800cbb8:	18d3      	adds	r3, r2, r3
 800cbba:	18db      	adds	r3, r3, r3
 800cbbc:	b2dc      	uxtb	r4, r3
 800cbbe:	4b2c      	ldr	r3, [pc, #176]	@ (800cc70 <Show_RTC_Calendar+0x18c>)
 800cbc0:	0018      	movs	r0, r3
 800cbc2:	f7ff fd78 	bl	800c6b6 <LL_RTC_DATE_GetMonth>
 800cbc6:	0003      	movs	r3, r0
 800cbc8:	b2db      	uxtb	r3, r3
 800cbca:	220f      	movs	r2, #15
 800cbcc:	4013      	ands	r3, r2
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	18e3      	adds	r3, r4, r3
 800cbd2:	b2db      	uxtb	r3, r3
 800cbd4:	001d      	movs	r5, r3
          __LL_RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetDay(RTC)), 
 800cbd6:	4b26      	ldr	r3, [pc, #152]	@ (800cc70 <Show_RTC_Calendar+0x18c>)
 800cbd8:	0018      	movs	r0, r3
 800cbda:	f7ff fd82 	bl	800c6e2 <LL_RTC_DATE_GetDay>
 800cbde:	0003      	movs	r3, r0
 800cbe0:	b2db      	uxtb	r3, r3
 800cbe2:	111b      	asrs	r3, r3, #4
 800cbe4:	b2db      	uxtb	r3, r3
 800cbe6:	220f      	movs	r2, #15
 800cbe8:	4013      	ands	r3, r2
 800cbea:	b2db      	uxtb	r3, r3
 800cbec:	1c1a      	adds	r2, r3, #0
 800cbee:	0092      	lsls	r2, r2, #2
 800cbf0:	18d3      	adds	r3, r2, r3
 800cbf2:	18db      	adds	r3, r3, r3
 800cbf4:	b2dc      	uxtb	r4, r3
 800cbf6:	4b1e      	ldr	r3, [pc, #120]	@ (800cc70 <Show_RTC_Calendar+0x18c>)
 800cbf8:	0018      	movs	r0, r3
 800cbfa:	f7ff fd72 	bl	800c6e2 <LL_RTC_DATE_GetDay>
 800cbfe:	0003      	movs	r3, r0
 800cc00:	b2db      	uxtb	r3, r3
 800cc02:	220f      	movs	r2, #15
 800cc04:	4013      	ands	r3, r2
 800cc06:	b2db      	uxtb	r3, r3
 800cc08:	18e3      	adds	r3, r4, r3
 800cc0a:	b2db      	uxtb	r3, r3
  sprintf((char*)aEndDate,"%.2d-%.2d-%.2d", __LL_RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC)), 
 800cc0c:	001e      	movs	r6, r3
          2000 + __LL_RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC)));
 800cc0e:	4b18      	ldr	r3, [pc, #96]	@ (800cc70 <Show_RTC_Calendar+0x18c>)
 800cc10:	0018      	movs	r0, r3
 800cc12:	f7ff fd3a 	bl	800c68a <LL_RTC_DATE_GetYear>
 800cc16:	0003      	movs	r3, r0
 800cc18:	b2db      	uxtb	r3, r3
 800cc1a:	111b      	asrs	r3, r3, #4
 800cc1c:	b2db      	uxtb	r3, r3
 800cc1e:	220f      	movs	r2, #15
 800cc20:	4013      	ands	r3, r2
 800cc22:	b2db      	uxtb	r3, r3
 800cc24:	1c1a      	adds	r2, r3, #0
 800cc26:	0092      	lsls	r2, r2, #2
 800cc28:	18d3      	adds	r3, r2, r3
 800cc2a:	18db      	adds	r3, r3, r3
 800cc2c:	b2dc      	uxtb	r4, r3
 800cc2e:	4b10      	ldr	r3, [pc, #64]	@ (800cc70 <Show_RTC_Calendar+0x18c>)
 800cc30:	0018      	movs	r0, r3
 800cc32:	f7ff fd2a 	bl	800c68a <LL_RTC_DATE_GetYear>
 800cc36:	0003      	movs	r3, r0
 800cc38:	b2db      	uxtb	r3, r3
 800cc3a:	220f      	movs	r2, #15
 800cc3c:	4013      	ands	r3, r2
 800cc3e:	b2db      	uxtb	r3, r3
 800cc40:	18e3      	adds	r3, r4, r3
 800cc42:	b2db      	uxtb	r3, r3
  sprintf((char*)aEndDate,"%.2d-%.2d-%.2d", __LL_RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC)), 
 800cc44:	22fa      	movs	r2, #250	@ 0xfa
 800cc46:	00d2      	lsls	r2, r2, #3
 800cc48:	4694      	mov	ip, r2
 800cc4a:	4463      	add	r3, ip
 800cc4c:	490b      	ldr	r1, [pc, #44]	@ (800cc7c <Show_RTC_Calendar+0x198>)
 800cc4e:	480c      	ldr	r0, [pc, #48]	@ (800cc80 <Show_RTC_Calendar+0x19c>)
 800cc50:	9300      	str	r3, [sp, #0]
 800cc52:	0033      	movs	r3, r6
 800cc54:	002a      	movs	r2, r5
 800cc56:	f7f8 fd27 	bl	80056a8 <sprintf_>
  printf("%s\t %s\n", aEndTime, aEndDate);
 800cc5a:	4a09      	ldr	r2, [pc, #36]	@ (800cc80 <Show_RTC_Calendar+0x19c>)
 800cc5c:	4906      	ldr	r1, [pc, #24]	@ (800cc78 <Show_RTC_Calendar+0x194>)
 800cc5e:	4b09      	ldr	r3, [pc, #36]	@ (800cc84 <Show_RTC_Calendar+0x1a0>)
 800cc60:	0018      	movs	r0, r3
 800cc62:	f7f8 fd03 	bl	800566c <printf_>
  
} 
 800cc66:	46c0      	nop			@ (mov r8, r8)
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	b001      	add	sp, #4
 800cc6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc6e:	46c0      	nop			@ (mov r8, r8)
 800cc70:	40002800 	.word	0x40002800
 800cc74:	0800fd9c 	.word	0x0800fd9c
 800cc78:	200005c8 	.word	0x200005c8
 800cc7c:	0800fdac 	.word	0x0800fdac
 800cc80:	200005dc 	.word	0x200005dc
 800cc84:	0800fdbc 	.word	0x0800fdbc

0800cc88 <ESP_Init_standby>:

//	**************************___ ESP_Init_after_standby ___**********************
int ESP_Init_standby(void){ 
 800cc88:	b590      	push	{r4, r7, lr}
 800cc8a:	b087      	sub	sp, #28
 800cc8c:	af04      	add	r7, sp, #16
	printf("ESP_Init_standby\n");
 800cc8e:	4b77      	ldr	r3, [pc, #476]	@ (800ce6c <ESP_Init_standby+0x1e4>)
 800cc90:	0018      	movs	r0, r3
 800cc92:	f7f8 fceb 	bl	800566c <printf_>
    //Create a new image cache    
    /* !!!  you have to edit the startup_stm32fxxx.s file and set a heap size = 1400 !!!  */
    UWORD Imagesize = ((EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1)) * EPD_1IN54_V2_HEIGHT;
 800cc96:	1dbb      	adds	r3, r7, #6
 800cc98:	4a75      	ldr	r2, [pc, #468]	@ (800ce70 <ESP_Init_standby+0x1e8>)
 800cc9a:	801a      	strh	r2, [r3, #0]
    if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 800cc9c:	1dbb      	adds	r3, r7, #6
 800cc9e:	881b      	ldrh	r3, [r3, #0]
 800cca0:	0018      	movs	r0, r3
 800cca2:	f000 f8ff 	bl	800cea4 <malloc>
 800cca6:	0003      	movs	r3, r0
 800cca8:	001a      	movs	r2, r3
 800ccaa:	4b72      	ldr	r3, [pc, #456]	@ (800ce74 <ESP_Init_standby+0x1ec>)
 800ccac:	601a      	str	r2, [r3, #0]
 800ccae:	4b71      	ldr	r3, [pc, #452]	@ (800ce74 <ESP_Init_standby+0x1ec>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d106      	bne.n	800ccc4 <ESP_Init_standby+0x3c>
        printf("Failed to apply for black memory...\r\n");
 800ccb6:	4b70      	ldr	r3, [pc, #448]	@ (800ce78 <ESP_Init_standby+0x1f0>)
 800ccb8:	0018      	movs	r0, r3
 800ccba:	f7f8 fcd7 	bl	800566c <printf_>
        return -1;
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	425b      	negs	r3, r3
 800ccc2:	e0cf      	b.n	800ce64 <ESP_Init_standby+0x1dc>
    }
		Paint_NewImage(BlackImage, EPD_1IN54_V2_WIDTH, EPD_1IN54_V2_HEIGHT, 0, WHITE);
 800ccc4:	4b6b      	ldr	r3, [pc, #428]	@ (800ce74 <ESP_Init_standby+0x1ec>)
 800ccc6:	6818      	ldr	r0, [r3, #0]
 800ccc8:	23ff      	movs	r3, #255	@ 0xff
 800ccca:	9300      	str	r3, [sp, #0]
 800cccc:	2300      	movs	r3, #0
 800ccce:	22c8      	movs	r2, #200	@ 0xc8
 800ccd0:	21c8      	movs	r1, #200	@ 0xc8
 800ccd2:	f7fe fde3 	bl	800b89c <Paint_NewImage>
		
	// Drawing on the image ======================================================
//    INFO("Drawing\r\n");

    Paint_SelectImage(BlackImage);	// Paint.Image = image;
 800ccd6:	4b67      	ldr	r3, [pc, #412]	@ (800ce74 <ESP_Init_standby+0x1ec>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	0018      	movs	r0, r3
 800ccdc:	f7fe fe4c 	bl	800b978 <Paint_SelectImage>
    Paint_Clear(WHITE);
 800cce0:	20ff      	movs	r0, #255	@ 0xff
 800cce2:	f7fe fff5 	bl	800bcd0 <Paint_Clear>
	Paint_DrawRectangle(2, 3, 198, 140, BLACK, DOT_PIXEL_2X2, DRAW_FILL_EMPTY);
 800cce6:	2300      	movs	r3, #0
 800cce8:	9302      	str	r3, [sp, #8]
 800ccea:	2302      	movs	r3, #2
 800ccec:	9301      	str	r3, [sp, #4]
 800ccee:	2300      	movs	r3, #0
 800ccf0:	9300      	str	r3, [sp, #0]
 800ccf2:	238c      	movs	r3, #140	@ 0x8c
 800ccf4:	22c6      	movs	r2, #198	@ 0xc6
 800ccf6:	2103      	movs	r1, #3
 800ccf8:	2002      	movs	r0, #2
 800ccfa:	f7ff fa81 	bl	800c200 <Paint_DrawRectangle>
	
// T	
	sprintf(str_array, "%3d", T_old);
 800ccfe:	4b5f      	ldr	r3, [pc, #380]	@ (800ce7c <ESP_Init_standby+0x1f4>)
 800cd00:	881b      	ldrh	r3, [r3, #0]
 800cd02:	001a      	movs	r2, r3
 800cd04:	495e      	ldr	r1, [pc, #376]	@ (800ce80 <ESP_Init_standby+0x1f8>)
 800cd06:	4b5f      	ldr	r3, [pc, #380]	@ (800ce84 <ESP_Init_standby+0x1fc>)
 800cd08:	0018      	movs	r0, r3
 800cd0a:	f7f8 fccd 	bl	80056a8 <sprintf_>
	Paint_DrawChar(big_1.x, big_1.y, str_array[0], &calibri_104pts, BLACK, WHITE); // 15 ms
 800cd0e:	230a      	movs	r3, #10
 800cd10:	0018      	movs	r0, r3
 800cd12:	231e      	movs	r3, #30
 800cd14:	001c      	movs	r4, r3
 800cd16:	4b5b      	ldr	r3, [pc, #364]	@ (800ce84 <ESP_Init_standby+0x1fc>)
 800cd18:	781a      	ldrb	r2, [r3, #0]
 800cd1a:	4b5b      	ldr	r3, [pc, #364]	@ (800ce88 <ESP_Init_standby+0x200>)
 800cd1c:	21ff      	movs	r1, #255	@ 0xff
 800cd1e:	9101      	str	r1, [sp, #4]
 800cd20:	2100      	movs	r1, #0
 800cd22:	9100      	str	r1, [sp, #0]
 800cd24:	0021      	movs	r1, r4
 800cd26:	f7ff fb33 	bl	800c390 <Paint_DrawChar>
	Paint_DrawChar(big_0.x, big_0.y, str_array[1], &calibri_104pts, BLACK, WHITE);
 800cd2a:	2343      	movs	r3, #67	@ 0x43
 800cd2c:	0018      	movs	r0, r3
 800cd2e:	231e      	movs	r3, #30
 800cd30:	001c      	movs	r4, r3
 800cd32:	4b54      	ldr	r3, [pc, #336]	@ (800ce84 <ESP_Init_standby+0x1fc>)
 800cd34:	785a      	ldrb	r2, [r3, #1]
 800cd36:	4b54      	ldr	r3, [pc, #336]	@ (800ce88 <ESP_Init_standby+0x200>)
 800cd38:	21ff      	movs	r1, #255	@ 0xff
 800cd3a:	9101      	str	r1, [sp, #4]
 800cd3c:	2100      	movs	r1, #0
 800cd3e:	9100      	str	r1, [sp, #0]
 800cd40:	0021      	movs	r1, r4
 800cd42:	f7ff fb25 	bl	800c390 <Paint_DrawChar>
	Paint_DrawPoint(131, 100, BLACK, DOT_PIXEL_5X5, DOT_FILL_AROUND); //Draw decimal point
 800cd46:	2301      	movs	r3, #1
 800cd48:	9300      	str	r3, [sp, #0]
 800cd4a:	2305      	movs	r3, #5
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	2164      	movs	r1, #100	@ 0x64
 800cd50:	2083      	movs	r0, #131	@ 0x83
 800cd52:	f7ff f895 	bl	800be80 <Paint_DrawPoint>
	Paint_DrawChar(small_0.x, small_0.y, str_array[2], &calibri_80pts, BLACK, WHITE);		
 800cd56:	238e      	movs	r3, #142	@ 0x8e
 800cd58:	0018      	movs	r0, r3
 800cd5a:	232e      	movs	r3, #46	@ 0x2e
 800cd5c:	001c      	movs	r4, r3
 800cd5e:	4b49      	ldr	r3, [pc, #292]	@ (800ce84 <ESP_Init_standby+0x1fc>)
 800cd60:	789a      	ldrb	r2, [r3, #2]
 800cd62:	4b4a      	ldr	r3, [pc, #296]	@ (800ce8c <ESP_Init_standby+0x204>)
 800cd64:	21ff      	movs	r1, #255	@ 0xff
 800cd66:	9101      	str	r1, [sp, #4]
 800cd68:	2100      	movs	r1, #0
 800cd6a:	9100      	str	r1, [sp, #0]
 800cd6c:	0021      	movs	r1, r4
 800cd6e:	f7ff fb0f 	bl	800c390 <Paint_DrawChar>
		
// hum
	uint8_t x = 125;
 800cd72:	1d7b      	adds	r3, r7, #5
 800cd74:	227d      	movs	r2, #125	@ 0x7d
 800cd76:	701a      	strb	r2, [r3, #0]
	uint8_t y = 150;	
 800cd78:	1d3b      	adds	r3, r7, #4
 800cd7a:	2296      	movs	r2, #150	@ 0x96
 800cd7c:	701a      	strb	r2, [r3, #0]
	char pcent = '%';
 800cd7e:	1cfb      	adds	r3, r7, #3
 800cd80:	2225      	movs	r2, #37	@ 0x25
 800cd82:	701a      	strb	r2, [r3, #0]
	sprintf(str_array, "%2d", H_old);
 800cd84:	4b42      	ldr	r3, [pc, #264]	@ (800ce90 <ESP_Init_standby+0x208>)
 800cd86:	881b      	ldrh	r3, [r3, #0]
 800cd88:	001a      	movs	r2, r3
 800cd8a:	4942      	ldr	r1, [pc, #264]	@ (800ce94 <ESP_Init_standby+0x20c>)
 800cd8c:	4b3d      	ldr	r3, [pc, #244]	@ (800ce84 <ESP_Init_standby+0x1fc>)
 800cd8e:	0018      	movs	r0, r3
 800cd90:	f7f8 fc8a 	bl	80056a8 <sprintf_>
	// append % to string
    strncat(str_array, &pcent, 1);
 800cd94:	1cf9      	adds	r1, r7, #3
 800cd96:	4b3b      	ldr	r3, [pc, #236]	@ (800ce84 <ESP_Init_standby+0x1fc>)
 800cd98:	2201      	movs	r2, #1
 800cd9a:	0018      	movs	r0, r3
 800cd9c:	f000 fec8 	bl	800db30 <strncat>
	Paint_DrawString_EN(x, y, (char*)str_array, &calibri_36pts, WHITE, BLACK); // 20, 34
 800cda0:	1d7b      	adds	r3, r7, #5
 800cda2:	781b      	ldrb	r3, [r3, #0]
 800cda4:	b298      	uxth	r0, r3
 800cda6:	1d3b      	adds	r3, r7, #4
 800cda8:	781b      	ldrb	r3, [r3, #0]
 800cdaa:	b299      	uxth	r1, r3
 800cdac:	4b3a      	ldr	r3, [pc, #232]	@ (800ce98 <ESP_Init_standby+0x210>)
 800cdae:	4a35      	ldr	r2, [pc, #212]	@ (800ce84 <ESP_Init_standby+0x1fc>)
 800cdb0:	2400      	movs	r4, #0
 800cdb2:	9401      	str	r4, [sp, #4]
 800cdb4:	24ff      	movs	r4, #255	@ 0xff
 800cdb6:	9400      	str	r4, [sp, #0]
 800cdb8:	f7ff fbd0 	bl	800c55c <Paint_DrawString_EN>
	
// battery voltage	
		x = 3;
 800cdbc:	1d7b      	adds	r3, r7, #5
 800cdbe:	2203      	movs	r2, #3
 800cdc0:	701a      	strb	r2, [r3, #0]
		y = 160;
 800cdc2:	1d3b      	adds	r3, r7, #4
 800cdc4:	22a0      	movs	r2, #160	@ 0xa0
 800cdc6:	701a      	strb	r2, [r3, #0]
		sprintf(str_array, "%3d", vbat_old);
 800cdc8:	4b34      	ldr	r3, [pc, #208]	@ (800ce9c <ESP_Init_standby+0x214>)
 800cdca:	881b      	ldrh	r3, [r3, #0]
 800cdcc:	001a      	movs	r2, r3
 800cdce:	492c      	ldr	r1, [pc, #176]	@ (800ce80 <ESP_Init_standby+0x1f8>)
 800cdd0:	4b2c      	ldr	r3, [pc, #176]	@ (800ce84 <ESP_Init_standby+0x1fc>)
 800cdd2:	0018      	movs	r0, r3
 800cdd4:	f7f8 fc68 	bl	80056a8 <sprintf_>
		
		Paint_ClearWindows(x, y, x+40, y+29, WHITE);			
 800cdd8:	1d7b      	adds	r3, r7, #5
 800cdda:	781b      	ldrb	r3, [r3, #0]
 800cddc:	b298      	uxth	r0, r3
 800cdde:	1d3b      	adds	r3, r7, #4
 800cde0:	781b      	ldrb	r3, [r3, #0]
 800cde2:	b299      	uxth	r1, r3
 800cde4:	1d7b      	adds	r3, r7, #5
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	b29b      	uxth	r3, r3
 800cdea:	3328      	adds	r3, #40	@ 0x28
 800cdec:	b29a      	uxth	r2, r3
 800cdee:	1d3b      	adds	r3, r7, #4
 800cdf0:	781b      	ldrb	r3, [r3, #0]
 800cdf2:	b29b      	uxth	r3, r3
 800cdf4:	331d      	adds	r3, #29
 800cdf6:	b29b      	uxth	r3, r3
 800cdf8:	24ff      	movs	r4, #255	@ 0xff
 800cdfa:	9400      	str	r4, [sp, #0]
 800cdfc:	f7fe fff6 	bl	800bdec <Paint_ClearWindows>
		Paint_DrawChar(x, y, str_array[0], &calibri_24pts, BLACK, WHITE);	// 	12, 29, 8
 800ce00:	1d7b      	adds	r3, r7, #5
 800ce02:	781b      	ldrb	r3, [r3, #0]
 800ce04:	b298      	uxth	r0, r3
 800ce06:	1d3b      	adds	r3, r7, #4
 800ce08:	781b      	ldrb	r3, [r3, #0]
 800ce0a:	b299      	uxth	r1, r3
 800ce0c:	4b1d      	ldr	r3, [pc, #116]	@ (800ce84 <ESP_Init_standby+0x1fc>)
 800ce0e:	781a      	ldrb	r2, [r3, #0]
 800ce10:	4b23      	ldr	r3, [pc, #140]	@ (800cea0 <ESP_Init_standby+0x218>)
 800ce12:	24ff      	movs	r4, #255	@ 0xff
 800ce14:	9401      	str	r4, [sp, #4]
 800ce16:	2400      	movs	r4, #0
 800ce18:	9400      	str	r4, [sp, #0]
 800ce1a:	f7ff fab9 	bl	800c390 <Paint_DrawChar>
		Paint_DrawChar(x+12, y, str_array[1], &calibri_24pts, BLACK, WHITE);	
 800ce1e:	1d7b      	adds	r3, r7, #5
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	b29b      	uxth	r3, r3
 800ce24:	330c      	adds	r3, #12
 800ce26:	b298      	uxth	r0, r3
 800ce28:	1d3b      	adds	r3, r7, #4
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	b299      	uxth	r1, r3
 800ce2e:	4b15      	ldr	r3, [pc, #84]	@ (800ce84 <ESP_Init_standby+0x1fc>)
 800ce30:	785a      	ldrb	r2, [r3, #1]
 800ce32:	4b1b      	ldr	r3, [pc, #108]	@ (800cea0 <ESP_Init_standby+0x218>)
 800ce34:	24ff      	movs	r4, #255	@ 0xff
 800ce36:	9401      	str	r4, [sp, #4]
 800ce38:	2400      	movs	r4, #0
 800ce3a:	9400      	str	r4, [sp, #0]
 800ce3c:	f7ff faa8 	bl	800c390 <Paint_DrawChar>
		Paint_DrawChar(x+12+12, y, str_array[2], &calibri_24pts, BLACK, WHITE);	
 800ce40:	1d7b      	adds	r3, r7, #5
 800ce42:	781b      	ldrb	r3, [r3, #0]
 800ce44:	b29b      	uxth	r3, r3
 800ce46:	3318      	adds	r3, #24
 800ce48:	b298      	uxth	r0, r3
 800ce4a:	1d3b      	adds	r3, r7, #4
 800ce4c:	781b      	ldrb	r3, [r3, #0]
 800ce4e:	b299      	uxth	r1, r3
 800ce50:	4b0c      	ldr	r3, [pc, #48]	@ (800ce84 <ESP_Init_standby+0x1fc>)
 800ce52:	789a      	ldrb	r2, [r3, #2]
 800ce54:	4b12      	ldr	r3, [pc, #72]	@ (800cea0 <ESP_Init_standby+0x218>)
 800ce56:	24ff      	movs	r4, #255	@ 0xff
 800ce58:	9401      	str	r4, [sp, #4]
 800ce5a:	2400      	movs	r4, #0
 800ce5c:	9400      	str	r4, [sp, #0]
 800ce5e:	f7ff fa97 	bl	800c390 <Paint_DrawChar>
		
//		EPD_1IN54_V2_Display(BlackImage);		
//		EPD_1IN54_V2_DisplayPartBaseImage(BlackImage);
//		EPD_1IN54_V2_Init_Partial();
		
		return 0;
 800ce62:	2300      	movs	r3, #0
}
 800ce64:	0018      	movs	r0, r3
 800ce66:	46bd      	mov	sp, r7
 800ce68:	b003      	add	sp, #12
 800ce6a:	bd90      	pop	{r4, r7, pc}
 800ce6c:	0800fdc4 	.word	0x0800fdc4
 800ce70:	00001388 	.word	0x00001388
 800ce74:	200005f0 	.word	0x200005f0
 800ce78:	0800fd5c 	.word	0x0800fd5c
 800ce7c:	2000046e 	.word	0x2000046e
 800ce80:	0800fd40 	.word	0x0800fd40
 800ce84:	200005f4 	.word	0x200005f4
 800ce88:	20000150 	.word	0x20000150
 800ce8c:	20000170 	.word	0x20000170
 800ce90:	2000046c 	.word	0x2000046c
 800ce94:	0800fd30 	.word	0x0800fd30
 800ce98:	20000168 	.word	0x20000168
 800ce9c:	20000470 	.word	0x20000470
 800cea0:	20000160 	.word	0x20000160

0800cea4 <malloc>:
 800cea4:	b510      	push	{r4, lr}
 800cea6:	4b03      	ldr	r3, [pc, #12]	@ (800ceb4 <malloc+0x10>)
 800cea8:	0001      	movs	r1, r0
 800ceaa:	6818      	ldr	r0, [r3, #0]
 800ceac:	f000 f826 	bl	800cefc <_malloc_r>
 800ceb0:	bd10      	pop	{r4, pc}
 800ceb2:	46c0      	nop			@ (mov r8, r8)
 800ceb4:	20000184 	.word	0x20000184

0800ceb8 <sbrk_aligned>:
 800ceb8:	b570      	push	{r4, r5, r6, lr}
 800ceba:	4e0f      	ldr	r6, [pc, #60]	@ (800cef8 <sbrk_aligned+0x40>)
 800cebc:	000d      	movs	r5, r1
 800cebe:	6831      	ldr	r1, [r6, #0]
 800cec0:	0004      	movs	r4, r0
 800cec2:	2900      	cmp	r1, #0
 800cec4:	d102      	bne.n	800cecc <sbrk_aligned+0x14>
 800cec6:	f000 fe87 	bl	800dbd8 <_sbrk_r>
 800ceca:	6030      	str	r0, [r6, #0]
 800cecc:	0029      	movs	r1, r5
 800cece:	0020      	movs	r0, r4
 800ced0:	f000 fe82 	bl	800dbd8 <_sbrk_r>
 800ced4:	1c43      	adds	r3, r0, #1
 800ced6:	d103      	bne.n	800cee0 <sbrk_aligned+0x28>
 800ced8:	2501      	movs	r5, #1
 800ceda:	426d      	negs	r5, r5
 800cedc:	0028      	movs	r0, r5
 800cede:	bd70      	pop	{r4, r5, r6, pc}
 800cee0:	2303      	movs	r3, #3
 800cee2:	1cc5      	adds	r5, r0, #3
 800cee4:	439d      	bics	r5, r3
 800cee6:	42a8      	cmp	r0, r5
 800cee8:	d0f8      	beq.n	800cedc <sbrk_aligned+0x24>
 800ceea:	1a29      	subs	r1, r5, r0
 800ceec:	0020      	movs	r0, r4
 800ceee:	f000 fe73 	bl	800dbd8 <_sbrk_r>
 800cef2:	3001      	adds	r0, #1
 800cef4:	d1f2      	bne.n	800cedc <sbrk_aligned+0x24>
 800cef6:	e7ef      	b.n	800ced8 <sbrk_aligned+0x20>
 800cef8:	200005fc 	.word	0x200005fc

0800cefc <_malloc_r>:
 800cefc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cefe:	2203      	movs	r2, #3
 800cf00:	1ccb      	adds	r3, r1, #3
 800cf02:	4393      	bics	r3, r2
 800cf04:	3308      	adds	r3, #8
 800cf06:	0005      	movs	r5, r0
 800cf08:	001f      	movs	r7, r3
 800cf0a:	2b0c      	cmp	r3, #12
 800cf0c:	d234      	bcs.n	800cf78 <_malloc_r+0x7c>
 800cf0e:	270c      	movs	r7, #12
 800cf10:	42b9      	cmp	r1, r7
 800cf12:	d833      	bhi.n	800cf7c <_malloc_r+0x80>
 800cf14:	0028      	movs	r0, r5
 800cf16:	f000 f871 	bl	800cffc <__malloc_lock>
 800cf1a:	4e37      	ldr	r6, [pc, #220]	@ (800cff8 <_malloc_r+0xfc>)
 800cf1c:	6833      	ldr	r3, [r6, #0]
 800cf1e:	001c      	movs	r4, r3
 800cf20:	2c00      	cmp	r4, #0
 800cf22:	d12f      	bne.n	800cf84 <_malloc_r+0x88>
 800cf24:	0039      	movs	r1, r7
 800cf26:	0028      	movs	r0, r5
 800cf28:	f7ff ffc6 	bl	800ceb8 <sbrk_aligned>
 800cf2c:	0004      	movs	r4, r0
 800cf2e:	1c43      	adds	r3, r0, #1
 800cf30:	d15f      	bne.n	800cff2 <_malloc_r+0xf6>
 800cf32:	6834      	ldr	r4, [r6, #0]
 800cf34:	9400      	str	r4, [sp, #0]
 800cf36:	9b00      	ldr	r3, [sp, #0]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d14a      	bne.n	800cfd2 <_malloc_r+0xd6>
 800cf3c:	2c00      	cmp	r4, #0
 800cf3e:	d052      	beq.n	800cfe6 <_malloc_r+0xea>
 800cf40:	6823      	ldr	r3, [r4, #0]
 800cf42:	0028      	movs	r0, r5
 800cf44:	18e3      	adds	r3, r4, r3
 800cf46:	9900      	ldr	r1, [sp, #0]
 800cf48:	9301      	str	r3, [sp, #4]
 800cf4a:	f000 fe45 	bl	800dbd8 <_sbrk_r>
 800cf4e:	9b01      	ldr	r3, [sp, #4]
 800cf50:	4283      	cmp	r3, r0
 800cf52:	d148      	bne.n	800cfe6 <_malloc_r+0xea>
 800cf54:	6823      	ldr	r3, [r4, #0]
 800cf56:	0028      	movs	r0, r5
 800cf58:	1aff      	subs	r7, r7, r3
 800cf5a:	0039      	movs	r1, r7
 800cf5c:	f7ff ffac 	bl	800ceb8 <sbrk_aligned>
 800cf60:	3001      	adds	r0, #1
 800cf62:	d040      	beq.n	800cfe6 <_malloc_r+0xea>
 800cf64:	6823      	ldr	r3, [r4, #0]
 800cf66:	19db      	adds	r3, r3, r7
 800cf68:	6023      	str	r3, [r4, #0]
 800cf6a:	6833      	ldr	r3, [r6, #0]
 800cf6c:	685a      	ldr	r2, [r3, #4]
 800cf6e:	2a00      	cmp	r2, #0
 800cf70:	d133      	bne.n	800cfda <_malloc_r+0xde>
 800cf72:	9b00      	ldr	r3, [sp, #0]
 800cf74:	6033      	str	r3, [r6, #0]
 800cf76:	e019      	b.n	800cfac <_malloc_r+0xb0>
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	dac9      	bge.n	800cf10 <_malloc_r+0x14>
 800cf7c:	230c      	movs	r3, #12
 800cf7e:	602b      	str	r3, [r5, #0]
 800cf80:	2000      	movs	r0, #0
 800cf82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cf84:	6821      	ldr	r1, [r4, #0]
 800cf86:	1bc9      	subs	r1, r1, r7
 800cf88:	d420      	bmi.n	800cfcc <_malloc_r+0xd0>
 800cf8a:	290b      	cmp	r1, #11
 800cf8c:	d90a      	bls.n	800cfa4 <_malloc_r+0xa8>
 800cf8e:	19e2      	adds	r2, r4, r7
 800cf90:	6027      	str	r7, [r4, #0]
 800cf92:	42a3      	cmp	r3, r4
 800cf94:	d104      	bne.n	800cfa0 <_malloc_r+0xa4>
 800cf96:	6032      	str	r2, [r6, #0]
 800cf98:	6863      	ldr	r3, [r4, #4]
 800cf9a:	6011      	str	r1, [r2, #0]
 800cf9c:	6053      	str	r3, [r2, #4]
 800cf9e:	e005      	b.n	800cfac <_malloc_r+0xb0>
 800cfa0:	605a      	str	r2, [r3, #4]
 800cfa2:	e7f9      	b.n	800cf98 <_malloc_r+0x9c>
 800cfa4:	6862      	ldr	r2, [r4, #4]
 800cfa6:	42a3      	cmp	r3, r4
 800cfa8:	d10e      	bne.n	800cfc8 <_malloc_r+0xcc>
 800cfaa:	6032      	str	r2, [r6, #0]
 800cfac:	0028      	movs	r0, r5
 800cfae:	f000 f82d 	bl	800d00c <__malloc_unlock>
 800cfb2:	0020      	movs	r0, r4
 800cfb4:	2207      	movs	r2, #7
 800cfb6:	300b      	adds	r0, #11
 800cfb8:	1d23      	adds	r3, r4, #4
 800cfba:	4390      	bics	r0, r2
 800cfbc:	1ac2      	subs	r2, r0, r3
 800cfbe:	4298      	cmp	r0, r3
 800cfc0:	d0df      	beq.n	800cf82 <_malloc_r+0x86>
 800cfc2:	1a1b      	subs	r3, r3, r0
 800cfc4:	50a3      	str	r3, [r4, r2]
 800cfc6:	e7dc      	b.n	800cf82 <_malloc_r+0x86>
 800cfc8:	605a      	str	r2, [r3, #4]
 800cfca:	e7ef      	b.n	800cfac <_malloc_r+0xb0>
 800cfcc:	0023      	movs	r3, r4
 800cfce:	6864      	ldr	r4, [r4, #4]
 800cfd0:	e7a6      	b.n	800cf20 <_malloc_r+0x24>
 800cfd2:	9c00      	ldr	r4, [sp, #0]
 800cfd4:	6863      	ldr	r3, [r4, #4]
 800cfd6:	9300      	str	r3, [sp, #0]
 800cfd8:	e7ad      	b.n	800cf36 <_malloc_r+0x3a>
 800cfda:	001a      	movs	r2, r3
 800cfdc:	685b      	ldr	r3, [r3, #4]
 800cfde:	42a3      	cmp	r3, r4
 800cfe0:	d1fb      	bne.n	800cfda <_malloc_r+0xde>
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	e7da      	b.n	800cf9c <_malloc_r+0xa0>
 800cfe6:	230c      	movs	r3, #12
 800cfe8:	0028      	movs	r0, r5
 800cfea:	602b      	str	r3, [r5, #0]
 800cfec:	f000 f80e 	bl	800d00c <__malloc_unlock>
 800cff0:	e7c6      	b.n	800cf80 <_malloc_r+0x84>
 800cff2:	6007      	str	r7, [r0, #0]
 800cff4:	e7da      	b.n	800cfac <_malloc_r+0xb0>
 800cff6:	46c0      	nop			@ (mov r8, r8)
 800cff8:	20000600 	.word	0x20000600

0800cffc <__malloc_lock>:
 800cffc:	b510      	push	{r4, lr}
 800cffe:	4802      	ldr	r0, [pc, #8]	@ (800d008 <__malloc_lock+0xc>)
 800d000:	f000 fe3b 	bl	800dc7a <__retarget_lock_acquire_recursive>
 800d004:	bd10      	pop	{r4, pc}
 800d006:	46c0      	nop			@ (mov r8, r8)
 800d008:	20000744 	.word	0x20000744

0800d00c <__malloc_unlock>:
 800d00c:	b510      	push	{r4, lr}
 800d00e:	4802      	ldr	r0, [pc, #8]	@ (800d018 <__malloc_unlock+0xc>)
 800d010:	f000 fe34 	bl	800dc7c <__retarget_lock_release_recursive>
 800d014:	bd10      	pop	{r4, pc}
 800d016:	46c0      	nop			@ (mov r8, r8)
 800d018:	20000744 	.word	0x20000744

0800d01c <__cvt>:
 800d01c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d01e:	001f      	movs	r7, r3
 800d020:	2300      	movs	r3, #0
 800d022:	0016      	movs	r6, r2
 800d024:	b08b      	sub	sp, #44	@ 0x2c
 800d026:	429f      	cmp	r7, r3
 800d028:	da04      	bge.n	800d034 <__cvt+0x18>
 800d02a:	2180      	movs	r1, #128	@ 0x80
 800d02c:	0609      	lsls	r1, r1, #24
 800d02e:	187b      	adds	r3, r7, r1
 800d030:	001f      	movs	r7, r3
 800d032:	232d      	movs	r3, #45	@ 0x2d
 800d034:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d036:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800d038:	7013      	strb	r3, [r2, #0]
 800d03a:	2320      	movs	r3, #32
 800d03c:	2203      	movs	r2, #3
 800d03e:	439d      	bics	r5, r3
 800d040:	2d46      	cmp	r5, #70	@ 0x46
 800d042:	d007      	beq.n	800d054 <__cvt+0x38>
 800d044:	002b      	movs	r3, r5
 800d046:	3b45      	subs	r3, #69	@ 0x45
 800d048:	4259      	negs	r1, r3
 800d04a:	414b      	adcs	r3, r1
 800d04c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800d04e:	3a01      	subs	r2, #1
 800d050:	18cb      	adds	r3, r1, r3
 800d052:	9310      	str	r3, [sp, #64]	@ 0x40
 800d054:	ab09      	add	r3, sp, #36	@ 0x24
 800d056:	9304      	str	r3, [sp, #16]
 800d058:	ab08      	add	r3, sp, #32
 800d05a:	9303      	str	r3, [sp, #12]
 800d05c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d05e:	9200      	str	r2, [sp, #0]
 800d060:	9302      	str	r3, [sp, #8]
 800d062:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d064:	0032      	movs	r2, r6
 800d066:	9301      	str	r3, [sp, #4]
 800d068:	003b      	movs	r3, r7
 800d06a:	f000 fea1 	bl	800ddb0 <_dtoa_r>
 800d06e:	0004      	movs	r4, r0
 800d070:	2d47      	cmp	r5, #71	@ 0x47
 800d072:	d11b      	bne.n	800d0ac <__cvt+0x90>
 800d074:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d076:	07db      	lsls	r3, r3, #31
 800d078:	d511      	bpl.n	800d09e <__cvt+0x82>
 800d07a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d07c:	18c3      	adds	r3, r0, r3
 800d07e:	9307      	str	r3, [sp, #28]
 800d080:	2200      	movs	r2, #0
 800d082:	2300      	movs	r3, #0
 800d084:	0030      	movs	r0, r6
 800d086:	0039      	movs	r1, r7
 800d088:	f7f3 f9e0 	bl	800044c <__aeabi_dcmpeq>
 800d08c:	2800      	cmp	r0, #0
 800d08e:	d001      	beq.n	800d094 <__cvt+0x78>
 800d090:	9b07      	ldr	r3, [sp, #28]
 800d092:	9309      	str	r3, [sp, #36]	@ 0x24
 800d094:	2230      	movs	r2, #48	@ 0x30
 800d096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d098:	9907      	ldr	r1, [sp, #28]
 800d09a:	428b      	cmp	r3, r1
 800d09c:	d320      	bcc.n	800d0e0 <__cvt+0xc4>
 800d09e:	0020      	movs	r0, r4
 800d0a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0a2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800d0a4:	1b1b      	subs	r3, r3, r4
 800d0a6:	6013      	str	r3, [r2, #0]
 800d0a8:	b00b      	add	sp, #44	@ 0x2c
 800d0aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d0ae:	18c3      	adds	r3, r0, r3
 800d0b0:	9307      	str	r3, [sp, #28]
 800d0b2:	2d46      	cmp	r5, #70	@ 0x46
 800d0b4:	d1e4      	bne.n	800d080 <__cvt+0x64>
 800d0b6:	7803      	ldrb	r3, [r0, #0]
 800d0b8:	2b30      	cmp	r3, #48	@ 0x30
 800d0ba:	d10c      	bne.n	800d0d6 <__cvt+0xba>
 800d0bc:	2200      	movs	r2, #0
 800d0be:	2300      	movs	r3, #0
 800d0c0:	0030      	movs	r0, r6
 800d0c2:	0039      	movs	r1, r7
 800d0c4:	f7f3 f9c2 	bl	800044c <__aeabi_dcmpeq>
 800d0c8:	2800      	cmp	r0, #0
 800d0ca:	d104      	bne.n	800d0d6 <__cvt+0xba>
 800d0cc:	2301      	movs	r3, #1
 800d0ce:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800d0d0:	1a9b      	subs	r3, r3, r2
 800d0d2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d0d4:	6013      	str	r3, [r2, #0]
 800d0d6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d0d8:	9a07      	ldr	r2, [sp, #28]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	18d3      	adds	r3, r2, r3
 800d0de:	e7ce      	b.n	800d07e <__cvt+0x62>
 800d0e0:	1c59      	adds	r1, r3, #1
 800d0e2:	9109      	str	r1, [sp, #36]	@ 0x24
 800d0e4:	701a      	strb	r2, [r3, #0]
 800d0e6:	e7d6      	b.n	800d096 <__cvt+0x7a>

0800d0e8 <__exponent>:
 800d0e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0ea:	232b      	movs	r3, #43	@ 0x2b
 800d0ec:	0005      	movs	r5, r0
 800d0ee:	000c      	movs	r4, r1
 800d0f0:	b085      	sub	sp, #20
 800d0f2:	7002      	strb	r2, [r0, #0]
 800d0f4:	2900      	cmp	r1, #0
 800d0f6:	da01      	bge.n	800d0fc <__exponent+0x14>
 800d0f8:	424c      	negs	r4, r1
 800d0fa:	3302      	adds	r3, #2
 800d0fc:	706b      	strb	r3, [r5, #1]
 800d0fe:	2c09      	cmp	r4, #9
 800d100:	dd2c      	ble.n	800d15c <__exponent+0x74>
 800d102:	ab02      	add	r3, sp, #8
 800d104:	1dde      	adds	r6, r3, #7
 800d106:	0020      	movs	r0, r4
 800d108:	210a      	movs	r1, #10
 800d10a:	f7f3 f989 	bl	8000420 <__aeabi_idivmod>
 800d10e:	0037      	movs	r7, r6
 800d110:	3130      	adds	r1, #48	@ 0x30
 800d112:	3e01      	subs	r6, #1
 800d114:	0020      	movs	r0, r4
 800d116:	7031      	strb	r1, [r6, #0]
 800d118:	210a      	movs	r1, #10
 800d11a:	9401      	str	r4, [sp, #4]
 800d11c:	f7f3 f89a 	bl	8000254 <__divsi3>
 800d120:	9b01      	ldr	r3, [sp, #4]
 800d122:	0004      	movs	r4, r0
 800d124:	2b63      	cmp	r3, #99	@ 0x63
 800d126:	dcee      	bgt.n	800d106 <__exponent+0x1e>
 800d128:	1eba      	subs	r2, r7, #2
 800d12a:	1ca8      	adds	r0, r5, #2
 800d12c:	0001      	movs	r1, r0
 800d12e:	0013      	movs	r3, r2
 800d130:	3430      	adds	r4, #48	@ 0x30
 800d132:	7014      	strb	r4, [r2, #0]
 800d134:	ac02      	add	r4, sp, #8
 800d136:	3407      	adds	r4, #7
 800d138:	429c      	cmp	r4, r3
 800d13a:	d80a      	bhi.n	800d152 <__exponent+0x6a>
 800d13c:	2300      	movs	r3, #0
 800d13e:	42a2      	cmp	r2, r4
 800d140:	d803      	bhi.n	800d14a <__exponent+0x62>
 800d142:	3309      	adds	r3, #9
 800d144:	aa02      	add	r2, sp, #8
 800d146:	189b      	adds	r3, r3, r2
 800d148:	1bdb      	subs	r3, r3, r7
 800d14a:	18c0      	adds	r0, r0, r3
 800d14c:	1b40      	subs	r0, r0, r5
 800d14e:	b005      	add	sp, #20
 800d150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d152:	781c      	ldrb	r4, [r3, #0]
 800d154:	3301      	adds	r3, #1
 800d156:	700c      	strb	r4, [r1, #0]
 800d158:	3101      	adds	r1, #1
 800d15a:	e7eb      	b.n	800d134 <__exponent+0x4c>
 800d15c:	2330      	movs	r3, #48	@ 0x30
 800d15e:	18e4      	adds	r4, r4, r3
 800d160:	70ab      	strb	r3, [r5, #2]
 800d162:	1d28      	adds	r0, r5, #4
 800d164:	70ec      	strb	r4, [r5, #3]
 800d166:	e7f1      	b.n	800d14c <__exponent+0x64>

0800d168 <_printf_float>:
 800d168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d16a:	b097      	sub	sp, #92	@ 0x5c
 800d16c:	000d      	movs	r5, r1
 800d16e:	920a      	str	r2, [sp, #40]	@ 0x28
 800d170:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800d172:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d174:	9009      	str	r0, [sp, #36]	@ 0x24
 800d176:	f000 fcf1 	bl	800db5c <_localeconv_r>
 800d17a:	6803      	ldr	r3, [r0, #0]
 800d17c:	0018      	movs	r0, r3
 800d17e:	930d      	str	r3, [sp, #52]	@ 0x34
 800d180:	f7f2 ffc2 	bl	8000108 <strlen>
 800d184:	2300      	movs	r3, #0
 800d186:	900f      	str	r0, [sp, #60]	@ 0x3c
 800d188:	9314      	str	r3, [sp, #80]	@ 0x50
 800d18a:	7e2b      	ldrb	r3, [r5, #24]
 800d18c:	2207      	movs	r2, #7
 800d18e:	930c      	str	r3, [sp, #48]	@ 0x30
 800d190:	682b      	ldr	r3, [r5, #0]
 800d192:	930e      	str	r3, [sp, #56]	@ 0x38
 800d194:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d196:	6823      	ldr	r3, [r4, #0]
 800d198:	05c9      	lsls	r1, r1, #23
 800d19a:	d545      	bpl.n	800d228 <_printf_float+0xc0>
 800d19c:	189b      	adds	r3, r3, r2
 800d19e:	4393      	bics	r3, r2
 800d1a0:	001a      	movs	r2, r3
 800d1a2:	3208      	adds	r2, #8
 800d1a4:	6022      	str	r2, [r4, #0]
 800d1a6:	2201      	movs	r2, #1
 800d1a8:	681e      	ldr	r6, [r3, #0]
 800d1aa:	685f      	ldr	r7, [r3, #4]
 800d1ac:	007b      	lsls	r3, r7, #1
 800d1ae:	085b      	lsrs	r3, r3, #1
 800d1b0:	9311      	str	r3, [sp, #68]	@ 0x44
 800d1b2:	9610      	str	r6, [sp, #64]	@ 0x40
 800d1b4:	64ae      	str	r6, [r5, #72]	@ 0x48
 800d1b6:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800d1b8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d1ba:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800d1bc:	4ba7      	ldr	r3, [pc, #668]	@ (800d45c <_printf_float+0x2f4>)
 800d1be:	4252      	negs	r2, r2
 800d1c0:	f7f5 f8a6 	bl	8002310 <__aeabi_dcmpun>
 800d1c4:	2800      	cmp	r0, #0
 800d1c6:	d131      	bne.n	800d22c <_printf_float+0xc4>
 800d1c8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d1ca:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800d1cc:	2201      	movs	r2, #1
 800d1ce:	4ba3      	ldr	r3, [pc, #652]	@ (800d45c <_printf_float+0x2f4>)
 800d1d0:	4252      	negs	r2, r2
 800d1d2:	f7f3 f94b 	bl	800046c <__aeabi_dcmple>
 800d1d6:	2800      	cmp	r0, #0
 800d1d8:	d128      	bne.n	800d22c <_printf_float+0xc4>
 800d1da:	2200      	movs	r2, #0
 800d1dc:	2300      	movs	r3, #0
 800d1de:	0030      	movs	r0, r6
 800d1e0:	0039      	movs	r1, r7
 800d1e2:	f7f3 f939 	bl	8000458 <__aeabi_dcmplt>
 800d1e6:	2800      	cmp	r0, #0
 800d1e8:	d003      	beq.n	800d1f2 <_printf_float+0x8a>
 800d1ea:	002b      	movs	r3, r5
 800d1ec:	222d      	movs	r2, #45	@ 0x2d
 800d1ee:	3343      	adds	r3, #67	@ 0x43
 800d1f0:	701a      	strb	r2, [r3, #0]
 800d1f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d1f4:	4f9a      	ldr	r7, [pc, #616]	@ (800d460 <_printf_float+0x2f8>)
 800d1f6:	2b47      	cmp	r3, #71	@ 0x47
 800d1f8:	d900      	bls.n	800d1fc <_printf_float+0x94>
 800d1fa:	4f9a      	ldr	r7, [pc, #616]	@ (800d464 <_printf_float+0x2fc>)
 800d1fc:	2303      	movs	r3, #3
 800d1fe:	2400      	movs	r4, #0
 800d200:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d202:	612b      	str	r3, [r5, #16]
 800d204:	3301      	adds	r3, #1
 800d206:	439a      	bics	r2, r3
 800d208:	602a      	str	r2, [r5, #0]
 800d20a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d20c:	0029      	movs	r1, r5
 800d20e:	9300      	str	r3, [sp, #0]
 800d210:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d212:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d214:	aa15      	add	r2, sp, #84	@ 0x54
 800d216:	f000 f9e5 	bl	800d5e4 <_printf_common>
 800d21a:	3001      	adds	r0, #1
 800d21c:	d000      	beq.n	800d220 <_printf_float+0xb8>
 800d21e:	e09f      	b.n	800d360 <_printf_float+0x1f8>
 800d220:	2001      	movs	r0, #1
 800d222:	4240      	negs	r0, r0
 800d224:	b017      	add	sp, #92	@ 0x5c
 800d226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d228:	3307      	adds	r3, #7
 800d22a:	e7b8      	b.n	800d19e <_printf_float+0x36>
 800d22c:	0032      	movs	r2, r6
 800d22e:	003b      	movs	r3, r7
 800d230:	0030      	movs	r0, r6
 800d232:	0039      	movs	r1, r7
 800d234:	f7f5 f86c 	bl	8002310 <__aeabi_dcmpun>
 800d238:	2800      	cmp	r0, #0
 800d23a:	d00b      	beq.n	800d254 <_printf_float+0xec>
 800d23c:	2f00      	cmp	r7, #0
 800d23e:	da03      	bge.n	800d248 <_printf_float+0xe0>
 800d240:	002b      	movs	r3, r5
 800d242:	222d      	movs	r2, #45	@ 0x2d
 800d244:	3343      	adds	r3, #67	@ 0x43
 800d246:	701a      	strb	r2, [r3, #0]
 800d248:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d24a:	4f87      	ldr	r7, [pc, #540]	@ (800d468 <_printf_float+0x300>)
 800d24c:	2b47      	cmp	r3, #71	@ 0x47
 800d24e:	d9d5      	bls.n	800d1fc <_printf_float+0x94>
 800d250:	4f86      	ldr	r7, [pc, #536]	@ (800d46c <_printf_float+0x304>)
 800d252:	e7d3      	b.n	800d1fc <_printf_float+0x94>
 800d254:	2220      	movs	r2, #32
 800d256:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800d258:	686b      	ldr	r3, [r5, #4]
 800d25a:	4394      	bics	r4, r2
 800d25c:	1c5a      	adds	r2, r3, #1
 800d25e:	d146      	bne.n	800d2ee <_printf_float+0x186>
 800d260:	3307      	adds	r3, #7
 800d262:	606b      	str	r3, [r5, #4]
 800d264:	2380      	movs	r3, #128	@ 0x80
 800d266:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d268:	00db      	lsls	r3, r3, #3
 800d26a:	4313      	orrs	r3, r2
 800d26c:	2200      	movs	r2, #0
 800d26e:	602b      	str	r3, [r5, #0]
 800d270:	9206      	str	r2, [sp, #24]
 800d272:	aa14      	add	r2, sp, #80	@ 0x50
 800d274:	9205      	str	r2, [sp, #20]
 800d276:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d278:	a90a      	add	r1, sp, #40	@ 0x28
 800d27a:	9204      	str	r2, [sp, #16]
 800d27c:	aa13      	add	r2, sp, #76	@ 0x4c
 800d27e:	9203      	str	r2, [sp, #12]
 800d280:	2223      	movs	r2, #35	@ 0x23
 800d282:	1852      	adds	r2, r2, r1
 800d284:	9202      	str	r2, [sp, #8]
 800d286:	9301      	str	r3, [sp, #4]
 800d288:	686b      	ldr	r3, [r5, #4]
 800d28a:	0032      	movs	r2, r6
 800d28c:	9300      	str	r3, [sp, #0]
 800d28e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d290:	003b      	movs	r3, r7
 800d292:	f7ff fec3 	bl	800d01c <__cvt>
 800d296:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d298:	0007      	movs	r7, r0
 800d29a:	2c47      	cmp	r4, #71	@ 0x47
 800d29c:	d12d      	bne.n	800d2fa <_printf_float+0x192>
 800d29e:	1cd3      	adds	r3, r2, #3
 800d2a0:	db02      	blt.n	800d2a8 <_printf_float+0x140>
 800d2a2:	686b      	ldr	r3, [r5, #4]
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	dd48      	ble.n	800d33a <_printf_float+0x1d2>
 800d2a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d2aa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800d2ac:	3b02      	subs	r3, #2
 800d2ae:	b2db      	uxtb	r3, r3
 800d2b0:	930c      	str	r3, [sp, #48]	@ 0x30
 800d2b2:	0028      	movs	r0, r5
 800d2b4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d2b6:	3901      	subs	r1, #1
 800d2b8:	3050      	adds	r0, #80	@ 0x50
 800d2ba:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d2bc:	f7ff ff14 	bl	800d0e8 <__exponent>
 800d2c0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d2c2:	0004      	movs	r4, r0
 800d2c4:	1813      	adds	r3, r2, r0
 800d2c6:	612b      	str	r3, [r5, #16]
 800d2c8:	2a01      	cmp	r2, #1
 800d2ca:	dc02      	bgt.n	800d2d2 <_printf_float+0x16a>
 800d2cc:	682a      	ldr	r2, [r5, #0]
 800d2ce:	07d2      	lsls	r2, r2, #31
 800d2d0:	d501      	bpl.n	800d2d6 <_printf_float+0x16e>
 800d2d2:	3301      	adds	r3, #1
 800d2d4:	612b      	str	r3, [r5, #16]
 800d2d6:	2323      	movs	r3, #35	@ 0x23
 800d2d8:	aa0a      	add	r2, sp, #40	@ 0x28
 800d2da:	189b      	adds	r3, r3, r2
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d100      	bne.n	800d2e4 <_printf_float+0x17c>
 800d2e2:	e792      	b.n	800d20a <_printf_float+0xa2>
 800d2e4:	002b      	movs	r3, r5
 800d2e6:	222d      	movs	r2, #45	@ 0x2d
 800d2e8:	3343      	adds	r3, #67	@ 0x43
 800d2ea:	701a      	strb	r2, [r3, #0]
 800d2ec:	e78d      	b.n	800d20a <_printf_float+0xa2>
 800d2ee:	2c47      	cmp	r4, #71	@ 0x47
 800d2f0:	d1b8      	bne.n	800d264 <_printf_float+0xfc>
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d1b6      	bne.n	800d264 <_printf_float+0xfc>
 800d2f6:	3301      	adds	r3, #1
 800d2f8:	e7b3      	b.n	800d262 <_printf_float+0xfa>
 800d2fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d2fc:	0011      	movs	r1, r2
 800d2fe:	2b65      	cmp	r3, #101	@ 0x65
 800d300:	d9d7      	bls.n	800d2b2 <_printf_float+0x14a>
 800d302:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d304:	2b66      	cmp	r3, #102	@ 0x66
 800d306:	d11a      	bne.n	800d33e <_printf_float+0x1d6>
 800d308:	686b      	ldr	r3, [r5, #4]
 800d30a:	2a00      	cmp	r2, #0
 800d30c:	dd09      	ble.n	800d322 <_printf_float+0x1ba>
 800d30e:	612a      	str	r2, [r5, #16]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d102      	bne.n	800d31a <_printf_float+0x1b2>
 800d314:	6829      	ldr	r1, [r5, #0]
 800d316:	07c9      	lsls	r1, r1, #31
 800d318:	d50b      	bpl.n	800d332 <_printf_float+0x1ca>
 800d31a:	3301      	adds	r3, #1
 800d31c:	189b      	adds	r3, r3, r2
 800d31e:	612b      	str	r3, [r5, #16]
 800d320:	e007      	b.n	800d332 <_printf_float+0x1ca>
 800d322:	2b00      	cmp	r3, #0
 800d324:	d103      	bne.n	800d32e <_printf_float+0x1c6>
 800d326:	2201      	movs	r2, #1
 800d328:	6829      	ldr	r1, [r5, #0]
 800d32a:	4211      	tst	r1, r2
 800d32c:	d000      	beq.n	800d330 <_printf_float+0x1c8>
 800d32e:	1c9a      	adds	r2, r3, #2
 800d330:	612a      	str	r2, [r5, #16]
 800d332:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d334:	2400      	movs	r4, #0
 800d336:	65ab      	str	r3, [r5, #88]	@ 0x58
 800d338:	e7cd      	b.n	800d2d6 <_printf_float+0x16e>
 800d33a:	2367      	movs	r3, #103	@ 0x67
 800d33c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d33e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800d340:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d342:	4299      	cmp	r1, r3
 800d344:	db06      	blt.n	800d354 <_printf_float+0x1ec>
 800d346:	682b      	ldr	r3, [r5, #0]
 800d348:	6129      	str	r1, [r5, #16]
 800d34a:	07db      	lsls	r3, r3, #31
 800d34c:	d5f1      	bpl.n	800d332 <_printf_float+0x1ca>
 800d34e:	3101      	adds	r1, #1
 800d350:	6129      	str	r1, [r5, #16]
 800d352:	e7ee      	b.n	800d332 <_printf_float+0x1ca>
 800d354:	2201      	movs	r2, #1
 800d356:	2900      	cmp	r1, #0
 800d358:	dce0      	bgt.n	800d31c <_printf_float+0x1b4>
 800d35a:	1892      	adds	r2, r2, r2
 800d35c:	1a52      	subs	r2, r2, r1
 800d35e:	e7dd      	b.n	800d31c <_printf_float+0x1b4>
 800d360:	682a      	ldr	r2, [r5, #0]
 800d362:	0553      	lsls	r3, r2, #21
 800d364:	d408      	bmi.n	800d378 <_printf_float+0x210>
 800d366:	692b      	ldr	r3, [r5, #16]
 800d368:	003a      	movs	r2, r7
 800d36a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d36c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d36e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d370:	47a0      	blx	r4
 800d372:	3001      	adds	r0, #1
 800d374:	d129      	bne.n	800d3ca <_printf_float+0x262>
 800d376:	e753      	b.n	800d220 <_printf_float+0xb8>
 800d378:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d37a:	2b65      	cmp	r3, #101	@ 0x65
 800d37c:	d800      	bhi.n	800d380 <_printf_float+0x218>
 800d37e:	e0da      	b.n	800d536 <_printf_float+0x3ce>
 800d380:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800d382:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d384:	2200      	movs	r2, #0
 800d386:	2300      	movs	r3, #0
 800d388:	f7f3 f860 	bl	800044c <__aeabi_dcmpeq>
 800d38c:	2800      	cmp	r0, #0
 800d38e:	d033      	beq.n	800d3f8 <_printf_float+0x290>
 800d390:	2301      	movs	r3, #1
 800d392:	4a37      	ldr	r2, [pc, #220]	@ (800d470 <_printf_float+0x308>)
 800d394:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d396:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d398:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d39a:	47a0      	blx	r4
 800d39c:	3001      	adds	r0, #1
 800d39e:	d100      	bne.n	800d3a2 <_printf_float+0x23a>
 800d3a0:	e73e      	b.n	800d220 <_printf_float+0xb8>
 800d3a2:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800d3a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d3a6:	42b3      	cmp	r3, r6
 800d3a8:	db02      	blt.n	800d3b0 <_printf_float+0x248>
 800d3aa:	682b      	ldr	r3, [r5, #0]
 800d3ac:	07db      	lsls	r3, r3, #31
 800d3ae:	d50c      	bpl.n	800d3ca <_printf_float+0x262>
 800d3b0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d3b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d3b6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d3b8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d3ba:	47a0      	blx	r4
 800d3bc:	2400      	movs	r4, #0
 800d3be:	3001      	adds	r0, #1
 800d3c0:	d100      	bne.n	800d3c4 <_printf_float+0x25c>
 800d3c2:	e72d      	b.n	800d220 <_printf_float+0xb8>
 800d3c4:	1e73      	subs	r3, r6, #1
 800d3c6:	42a3      	cmp	r3, r4
 800d3c8:	dc0a      	bgt.n	800d3e0 <_printf_float+0x278>
 800d3ca:	682b      	ldr	r3, [r5, #0]
 800d3cc:	079b      	lsls	r3, r3, #30
 800d3ce:	d500      	bpl.n	800d3d2 <_printf_float+0x26a>
 800d3d0:	e105      	b.n	800d5de <_printf_float+0x476>
 800d3d2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d3d4:	68e8      	ldr	r0, [r5, #12]
 800d3d6:	4298      	cmp	r0, r3
 800d3d8:	db00      	blt.n	800d3dc <_printf_float+0x274>
 800d3da:	e723      	b.n	800d224 <_printf_float+0xbc>
 800d3dc:	0018      	movs	r0, r3
 800d3de:	e721      	b.n	800d224 <_printf_float+0xbc>
 800d3e0:	002a      	movs	r2, r5
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d3e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d3e8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d3ea:	321a      	adds	r2, #26
 800d3ec:	47b8      	blx	r7
 800d3ee:	3001      	adds	r0, #1
 800d3f0:	d100      	bne.n	800d3f4 <_printf_float+0x28c>
 800d3f2:	e715      	b.n	800d220 <_printf_float+0xb8>
 800d3f4:	3401      	adds	r4, #1
 800d3f6:	e7e5      	b.n	800d3c4 <_printf_float+0x25c>
 800d3f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	dc3a      	bgt.n	800d474 <_printf_float+0x30c>
 800d3fe:	2301      	movs	r3, #1
 800d400:	4a1b      	ldr	r2, [pc, #108]	@ (800d470 <_printf_float+0x308>)
 800d402:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d404:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d406:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d408:	47a0      	blx	r4
 800d40a:	3001      	adds	r0, #1
 800d40c:	d100      	bne.n	800d410 <_printf_float+0x2a8>
 800d40e:	e707      	b.n	800d220 <_printf_float+0xb8>
 800d410:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800d412:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d414:	4333      	orrs	r3, r6
 800d416:	d102      	bne.n	800d41e <_printf_float+0x2b6>
 800d418:	682b      	ldr	r3, [r5, #0]
 800d41a:	07db      	lsls	r3, r3, #31
 800d41c:	d5d5      	bpl.n	800d3ca <_printf_float+0x262>
 800d41e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d420:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d422:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d424:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d426:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d428:	47a0      	blx	r4
 800d42a:	2300      	movs	r3, #0
 800d42c:	3001      	adds	r0, #1
 800d42e:	d100      	bne.n	800d432 <_printf_float+0x2ca>
 800d430:	e6f6      	b.n	800d220 <_printf_float+0xb8>
 800d432:	930c      	str	r3, [sp, #48]	@ 0x30
 800d434:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d436:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d438:	425b      	negs	r3, r3
 800d43a:	4293      	cmp	r3, r2
 800d43c:	dc01      	bgt.n	800d442 <_printf_float+0x2da>
 800d43e:	0033      	movs	r3, r6
 800d440:	e792      	b.n	800d368 <_printf_float+0x200>
 800d442:	002a      	movs	r2, r5
 800d444:	2301      	movs	r3, #1
 800d446:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d448:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d44a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d44c:	321a      	adds	r2, #26
 800d44e:	47a0      	blx	r4
 800d450:	3001      	adds	r0, #1
 800d452:	d100      	bne.n	800d456 <_printf_float+0x2ee>
 800d454:	e6e4      	b.n	800d220 <_printf_float+0xb8>
 800d456:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d458:	3301      	adds	r3, #1
 800d45a:	e7ea      	b.n	800d432 <_printf_float+0x2ca>
 800d45c:	7fefffff 	.word	0x7fefffff
 800d460:	0801b3c8 	.word	0x0801b3c8
 800d464:	0801b3cc 	.word	0x0801b3cc
 800d468:	0801b3d0 	.word	0x0801b3d0
 800d46c:	0801b3d4 	.word	0x0801b3d4
 800d470:	0801b3d8 	.word	0x0801b3d8
 800d474:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d476:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800d478:	930c      	str	r3, [sp, #48]	@ 0x30
 800d47a:	429e      	cmp	r6, r3
 800d47c:	dd00      	ble.n	800d480 <_printf_float+0x318>
 800d47e:	001e      	movs	r6, r3
 800d480:	2e00      	cmp	r6, #0
 800d482:	dc31      	bgt.n	800d4e8 <_printf_float+0x380>
 800d484:	43f3      	mvns	r3, r6
 800d486:	2400      	movs	r4, #0
 800d488:	17db      	asrs	r3, r3, #31
 800d48a:	4033      	ands	r3, r6
 800d48c:	930e      	str	r3, [sp, #56]	@ 0x38
 800d48e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800d490:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d492:	1af3      	subs	r3, r6, r3
 800d494:	42a3      	cmp	r3, r4
 800d496:	dc30      	bgt.n	800d4fa <_printf_float+0x392>
 800d498:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d49a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d49c:	429a      	cmp	r2, r3
 800d49e:	dc38      	bgt.n	800d512 <_printf_float+0x3aa>
 800d4a0:	682b      	ldr	r3, [r5, #0]
 800d4a2:	07db      	lsls	r3, r3, #31
 800d4a4:	d435      	bmi.n	800d512 <_printf_float+0x3aa>
 800d4a6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800d4a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d4aa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d4ac:	1b9b      	subs	r3, r3, r6
 800d4ae:	1b14      	subs	r4, r2, r4
 800d4b0:	429c      	cmp	r4, r3
 800d4b2:	dd00      	ble.n	800d4b6 <_printf_float+0x34e>
 800d4b4:	001c      	movs	r4, r3
 800d4b6:	2c00      	cmp	r4, #0
 800d4b8:	dc34      	bgt.n	800d524 <_printf_float+0x3bc>
 800d4ba:	43e3      	mvns	r3, r4
 800d4bc:	2600      	movs	r6, #0
 800d4be:	17db      	asrs	r3, r3, #31
 800d4c0:	401c      	ands	r4, r3
 800d4c2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d4c4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d4c6:	1ad3      	subs	r3, r2, r3
 800d4c8:	1b1b      	subs	r3, r3, r4
 800d4ca:	42b3      	cmp	r3, r6
 800d4cc:	dc00      	bgt.n	800d4d0 <_printf_float+0x368>
 800d4ce:	e77c      	b.n	800d3ca <_printf_float+0x262>
 800d4d0:	002a      	movs	r2, r5
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d4d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d4d8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d4da:	321a      	adds	r2, #26
 800d4dc:	47b8      	blx	r7
 800d4de:	3001      	adds	r0, #1
 800d4e0:	d100      	bne.n	800d4e4 <_printf_float+0x37c>
 800d4e2:	e69d      	b.n	800d220 <_printf_float+0xb8>
 800d4e4:	3601      	adds	r6, #1
 800d4e6:	e7ec      	b.n	800d4c2 <_printf_float+0x35a>
 800d4e8:	0033      	movs	r3, r6
 800d4ea:	003a      	movs	r2, r7
 800d4ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d4ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d4f0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d4f2:	47a0      	blx	r4
 800d4f4:	3001      	adds	r0, #1
 800d4f6:	d1c5      	bne.n	800d484 <_printf_float+0x31c>
 800d4f8:	e692      	b.n	800d220 <_printf_float+0xb8>
 800d4fa:	002a      	movs	r2, r5
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d500:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d502:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d504:	321a      	adds	r2, #26
 800d506:	47b0      	blx	r6
 800d508:	3001      	adds	r0, #1
 800d50a:	d100      	bne.n	800d50e <_printf_float+0x3a6>
 800d50c:	e688      	b.n	800d220 <_printf_float+0xb8>
 800d50e:	3401      	adds	r4, #1
 800d510:	e7bd      	b.n	800d48e <_printf_float+0x326>
 800d512:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d514:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d516:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d518:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d51a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d51c:	47a0      	blx	r4
 800d51e:	3001      	adds	r0, #1
 800d520:	d1c1      	bne.n	800d4a6 <_printf_float+0x33e>
 800d522:	e67d      	b.n	800d220 <_printf_float+0xb8>
 800d524:	19ba      	adds	r2, r7, r6
 800d526:	0023      	movs	r3, r4
 800d528:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d52a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d52c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d52e:	47b0      	blx	r6
 800d530:	3001      	adds	r0, #1
 800d532:	d1c2      	bne.n	800d4ba <_printf_float+0x352>
 800d534:	e674      	b.n	800d220 <_printf_float+0xb8>
 800d536:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d538:	930c      	str	r3, [sp, #48]	@ 0x30
 800d53a:	2b01      	cmp	r3, #1
 800d53c:	dc02      	bgt.n	800d544 <_printf_float+0x3dc>
 800d53e:	2301      	movs	r3, #1
 800d540:	421a      	tst	r2, r3
 800d542:	d039      	beq.n	800d5b8 <_printf_float+0x450>
 800d544:	2301      	movs	r3, #1
 800d546:	003a      	movs	r2, r7
 800d548:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d54a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d54c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d54e:	47b0      	blx	r6
 800d550:	3001      	adds	r0, #1
 800d552:	d100      	bne.n	800d556 <_printf_float+0x3ee>
 800d554:	e664      	b.n	800d220 <_printf_float+0xb8>
 800d556:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d558:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d55a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d55c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d55e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d560:	47b0      	blx	r6
 800d562:	3001      	adds	r0, #1
 800d564:	d100      	bne.n	800d568 <_printf_float+0x400>
 800d566:	e65b      	b.n	800d220 <_printf_float+0xb8>
 800d568:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800d56a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d56c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d56e:	2200      	movs	r2, #0
 800d570:	3b01      	subs	r3, #1
 800d572:	930c      	str	r3, [sp, #48]	@ 0x30
 800d574:	2300      	movs	r3, #0
 800d576:	f7f2 ff69 	bl	800044c <__aeabi_dcmpeq>
 800d57a:	2800      	cmp	r0, #0
 800d57c:	d11a      	bne.n	800d5b4 <_printf_float+0x44c>
 800d57e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d580:	1c7a      	adds	r2, r7, #1
 800d582:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d584:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d586:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d588:	47b0      	blx	r6
 800d58a:	3001      	adds	r0, #1
 800d58c:	d10e      	bne.n	800d5ac <_printf_float+0x444>
 800d58e:	e647      	b.n	800d220 <_printf_float+0xb8>
 800d590:	002a      	movs	r2, r5
 800d592:	2301      	movs	r3, #1
 800d594:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d596:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d598:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d59a:	321a      	adds	r2, #26
 800d59c:	47b8      	blx	r7
 800d59e:	3001      	adds	r0, #1
 800d5a0:	d100      	bne.n	800d5a4 <_printf_float+0x43c>
 800d5a2:	e63d      	b.n	800d220 <_printf_float+0xb8>
 800d5a4:	3601      	adds	r6, #1
 800d5a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d5a8:	429e      	cmp	r6, r3
 800d5aa:	dbf1      	blt.n	800d590 <_printf_float+0x428>
 800d5ac:	002a      	movs	r2, r5
 800d5ae:	0023      	movs	r3, r4
 800d5b0:	3250      	adds	r2, #80	@ 0x50
 800d5b2:	e6da      	b.n	800d36a <_printf_float+0x202>
 800d5b4:	2600      	movs	r6, #0
 800d5b6:	e7f6      	b.n	800d5a6 <_printf_float+0x43e>
 800d5b8:	003a      	movs	r2, r7
 800d5ba:	e7e2      	b.n	800d582 <_printf_float+0x41a>
 800d5bc:	002a      	movs	r2, r5
 800d5be:	2301      	movs	r3, #1
 800d5c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d5c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d5c4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d5c6:	3219      	adds	r2, #25
 800d5c8:	47b0      	blx	r6
 800d5ca:	3001      	adds	r0, #1
 800d5cc:	d100      	bne.n	800d5d0 <_printf_float+0x468>
 800d5ce:	e627      	b.n	800d220 <_printf_float+0xb8>
 800d5d0:	3401      	adds	r4, #1
 800d5d2:	68eb      	ldr	r3, [r5, #12]
 800d5d4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800d5d6:	1a9b      	subs	r3, r3, r2
 800d5d8:	42a3      	cmp	r3, r4
 800d5da:	dcef      	bgt.n	800d5bc <_printf_float+0x454>
 800d5dc:	e6f9      	b.n	800d3d2 <_printf_float+0x26a>
 800d5de:	2400      	movs	r4, #0
 800d5e0:	e7f7      	b.n	800d5d2 <_printf_float+0x46a>
 800d5e2:	46c0      	nop			@ (mov r8, r8)

0800d5e4 <_printf_common>:
 800d5e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d5e6:	0016      	movs	r6, r2
 800d5e8:	9301      	str	r3, [sp, #4]
 800d5ea:	688a      	ldr	r2, [r1, #8]
 800d5ec:	690b      	ldr	r3, [r1, #16]
 800d5ee:	000c      	movs	r4, r1
 800d5f0:	9000      	str	r0, [sp, #0]
 800d5f2:	4293      	cmp	r3, r2
 800d5f4:	da00      	bge.n	800d5f8 <_printf_common+0x14>
 800d5f6:	0013      	movs	r3, r2
 800d5f8:	0022      	movs	r2, r4
 800d5fa:	6033      	str	r3, [r6, #0]
 800d5fc:	3243      	adds	r2, #67	@ 0x43
 800d5fe:	7812      	ldrb	r2, [r2, #0]
 800d600:	2a00      	cmp	r2, #0
 800d602:	d001      	beq.n	800d608 <_printf_common+0x24>
 800d604:	3301      	adds	r3, #1
 800d606:	6033      	str	r3, [r6, #0]
 800d608:	6823      	ldr	r3, [r4, #0]
 800d60a:	069b      	lsls	r3, r3, #26
 800d60c:	d502      	bpl.n	800d614 <_printf_common+0x30>
 800d60e:	6833      	ldr	r3, [r6, #0]
 800d610:	3302      	adds	r3, #2
 800d612:	6033      	str	r3, [r6, #0]
 800d614:	6822      	ldr	r2, [r4, #0]
 800d616:	2306      	movs	r3, #6
 800d618:	0015      	movs	r5, r2
 800d61a:	401d      	ands	r5, r3
 800d61c:	421a      	tst	r2, r3
 800d61e:	d027      	beq.n	800d670 <_printf_common+0x8c>
 800d620:	0023      	movs	r3, r4
 800d622:	3343      	adds	r3, #67	@ 0x43
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	1e5a      	subs	r2, r3, #1
 800d628:	4193      	sbcs	r3, r2
 800d62a:	6822      	ldr	r2, [r4, #0]
 800d62c:	0692      	lsls	r2, r2, #26
 800d62e:	d430      	bmi.n	800d692 <_printf_common+0xae>
 800d630:	0022      	movs	r2, r4
 800d632:	9901      	ldr	r1, [sp, #4]
 800d634:	9800      	ldr	r0, [sp, #0]
 800d636:	9d08      	ldr	r5, [sp, #32]
 800d638:	3243      	adds	r2, #67	@ 0x43
 800d63a:	47a8      	blx	r5
 800d63c:	3001      	adds	r0, #1
 800d63e:	d025      	beq.n	800d68c <_printf_common+0xa8>
 800d640:	2206      	movs	r2, #6
 800d642:	6823      	ldr	r3, [r4, #0]
 800d644:	2500      	movs	r5, #0
 800d646:	4013      	ands	r3, r2
 800d648:	2b04      	cmp	r3, #4
 800d64a:	d105      	bne.n	800d658 <_printf_common+0x74>
 800d64c:	6833      	ldr	r3, [r6, #0]
 800d64e:	68e5      	ldr	r5, [r4, #12]
 800d650:	1aed      	subs	r5, r5, r3
 800d652:	43eb      	mvns	r3, r5
 800d654:	17db      	asrs	r3, r3, #31
 800d656:	401d      	ands	r5, r3
 800d658:	68a3      	ldr	r3, [r4, #8]
 800d65a:	6922      	ldr	r2, [r4, #16]
 800d65c:	4293      	cmp	r3, r2
 800d65e:	dd01      	ble.n	800d664 <_printf_common+0x80>
 800d660:	1a9b      	subs	r3, r3, r2
 800d662:	18ed      	adds	r5, r5, r3
 800d664:	2600      	movs	r6, #0
 800d666:	42b5      	cmp	r5, r6
 800d668:	d120      	bne.n	800d6ac <_printf_common+0xc8>
 800d66a:	2000      	movs	r0, #0
 800d66c:	e010      	b.n	800d690 <_printf_common+0xac>
 800d66e:	3501      	adds	r5, #1
 800d670:	68e3      	ldr	r3, [r4, #12]
 800d672:	6832      	ldr	r2, [r6, #0]
 800d674:	1a9b      	subs	r3, r3, r2
 800d676:	42ab      	cmp	r3, r5
 800d678:	ddd2      	ble.n	800d620 <_printf_common+0x3c>
 800d67a:	0022      	movs	r2, r4
 800d67c:	2301      	movs	r3, #1
 800d67e:	9901      	ldr	r1, [sp, #4]
 800d680:	9800      	ldr	r0, [sp, #0]
 800d682:	9f08      	ldr	r7, [sp, #32]
 800d684:	3219      	adds	r2, #25
 800d686:	47b8      	blx	r7
 800d688:	3001      	adds	r0, #1
 800d68a:	d1f0      	bne.n	800d66e <_printf_common+0x8a>
 800d68c:	2001      	movs	r0, #1
 800d68e:	4240      	negs	r0, r0
 800d690:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d692:	2030      	movs	r0, #48	@ 0x30
 800d694:	18e1      	adds	r1, r4, r3
 800d696:	3143      	adds	r1, #67	@ 0x43
 800d698:	7008      	strb	r0, [r1, #0]
 800d69a:	0021      	movs	r1, r4
 800d69c:	1c5a      	adds	r2, r3, #1
 800d69e:	3145      	adds	r1, #69	@ 0x45
 800d6a0:	7809      	ldrb	r1, [r1, #0]
 800d6a2:	18a2      	adds	r2, r4, r2
 800d6a4:	3243      	adds	r2, #67	@ 0x43
 800d6a6:	3302      	adds	r3, #2
 800d6a8:	7011      	strb	r1, [r2, #0]
 800d6aa:	e7c1      	b.n	800d630 <_printf_common+0x4c>
 800d6ac:	0022      	movs	r2, r4
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	9901      	ldr	r1, [sp, #4]
 800d6b2:	9800      	ldr	r0, [sp, #0]
 800d6b4:	9f08      	ldr	r7, [sp, #32]
 800d6b6:	321a      	adds	r2, #26
 800d6b8:	47b8      	blx	r7
 800d6ba:	3001      	adds	r0, #1
 800d6bc:	d0e6      	beq.n	800d68c <_printf_common+0xa8>
 800d6be:	3601      	adds	r6, #1
 800d6c0:	e7d1      	b.n	800d666 <_printf_common+0x82>
	...

0800d6c4 <_printf_i>:
 800d6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6c6:	b08b      	sub	sp, #44	@ 0x2c
 800d6c8:	9206      	str	r2, [sp, #24]
 800d6ca:	000a      	movs	r2, r1
 800d6cc:	3243      	adds	r2, #67	@ 0x43
 800d6ce:	9307      	str	r3, [sp, #28]
 800d6d0:	9005      	str	r0, [sp, #20]
 800d6d2:	9203      	str	r2, [sp, #12]
 800d6d4:	7e0a      	ldrb	r2, [r1, #24]
 800d6d6:	000c      	movs	r4, r1
 800d6d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d6da:	2a78      	cmp	r2, #120	@ 0x78
 800d6dc:	d809      	bhi.n	800d6f2 <_printf_i+0x2e>
 800d6de:	2a62      	cmp	r2, #98	@ 0x62
 800d6e0:	d80b      	bhi.n	800d6fa <_printf_i+0x36>
 800d6e2:	2a00      	cmp	r2, #0
 800d6e4:	d100      	bne.n	800d6e8 <_printf_i+0x24>
 800d6e6:	e0bc      	b.n	800d862 <_printf_i+0x19e>
 800d6e8:	497b      	ldr	r1, [pc, #492]	@ (800d8d8 <_printf_i+0x214>)
 800d6ea:	9104      	str	r1, [sp, #16]
 800d6ec:	2a58      	cmp	r2, #88	@ 0x58
 800d6ee:	d100      	bne.n	800d6f2 <_printf_i+0x2e>
 800d6f0:	e090      	b.n	800d814 <_printf_i+0x150>
 800d6f2:	0025      	movs	r5, r4
 800d6f4:	3542      	adds	r5, #66	@ 0x42
 800d6f6:	702a      	strb	r2, [r5, #0]
 800d6f8:	e022      	b.n	800d740 <_printf_i+0x7c>
 800d6fa:	0010      	movs	r0, r2
 800d6fc:	3863      	subs	r0, #99	@ 0x63
 800d6fe:	2815      	cmp	r0, #21
 800d700:	d8f7      	bhi.n	800d6f2 <_printf_i+0x2e>
 800d702:	f7f2 fd13 	bl	800012c <__gnu_thumb1_case_shi>
 800d706:	0016      	.short	0x0016
 800d708:	fff6001f 	.word	0xfff6001f
 800d70c:	fff6fff6 	.word	0xfff6fff6
 800d710:	001ffff6 	.word	0x001ffff6
 800d714:	fff6fff6 	.word	0xfff6fff6
 800d718:	fff6fff6 	.word	0xfff6fff6
 800d71c:	003600a1 	.word	0x003600a1
 800d720:	fff60080 	.word	0xfff60080
 800d724:	00b2fff6 	.word	0x00b2fff6
 800d728:	0036fff6 	.word	0x0036fff6
 800d72c:	fff6fff6 	.word	0xfff6fff6
 800d730:	0084      	.short	0x0084
 800d732:	0025      	movs	r5, r4
 800d734:	681a      	ldr	r2, [r3, #0]
 800d736:	3542      	adds	r5, #66	@ 0x42
 800d738:	1d11      	adds	r1, r2, #4
 800d73a:	6019      	str	r1, [r3, #0]
 800d73c:	6813      	ldr	r3, [r2, #0]
 800d73e:	702b      	strb	r3, [r5, #0]
 800d740:	2301      	movs	r3, #1
 800d742:	e0a0      	b.n	800d886 <_printf_i+0x1c2>
 800d744:	6818      	ldr	r0, [r3, #0]
 800d746:	6809      	ldr	r1, [r1, #0]
 800d748:	1d02      	adds	r2, r0, #4
 800d74a:	060d      	lsls	r5, r1, #24
 800d74c:	d50b      	bpl.n	800d766 <_printf_i+0xa2>
 800d74e:	6806      	ldr	r6, [r0, #0]
 800d750:	601a      	str	r2, [r3, #0]
 800d752:	2e00      	cmp	r6, #0
 800d754:	da03      	bge.n	800d75e <_printf_i+0x9a>
 800d756:	232d      	movs	r3, #45	@ 0x2d
 800d758:	9a03      	ldr	r2, [sp, #12]
 800d75a:	4276      	negs	r6, r6
 800d75c:	7013      	strb	r3, [r2, #0]
 800d75e:	4b5e      	ldr	r3, [pc, #376]	@ (800d8d8 <_printf_i+0x214>)
 800d760:	270a      	movs	r7, #10
 800d762:	9304      	str	r3, [sp, #16]
 800d764:	e018      	b.n	800d798 <_printf_i+0xd4>
 800d766:	6806      	ldr	r6, [r0, #0]
 800d768:	601a      	str	r2, [r3, #0]
 800d76a:	0649      	lsls	r1, r1, #25
 800d76c:	d5f1      	bpl.n	800d752 <_printf_i+0x8e>
 800d76e:	b236      	sxth	r6, r6
 800d770:	e7ef      	b.n	800d752 <_printf_i+0x8e>
 800d772:	6808      	ldr	r0, [r1, #0]
 800d774:	6819      	ldr	r1, [r3, #0]
 800d776:	c940      	ldmia	r1!, {r6}
 800d778:	0605      	lsls	r5, r0, #24
 800d77a:	d402      	bmi.n	800d782 <_printf_i+0xbe>
 800d77c:	0640      	lsls	r0, r0, #25
 800d77e:	d500      	bpl.n	800d782 <_printf_i+0xbe>
 800d780:	b2b6      	uxth	r6, r6
 800d782:	6019      	str	r1, [r3, #0]
 800d784:	4b54      	ldr	r3, [pc, #336]	@ (800d8d8 <_printf_i+0x214>)
 800d786:	270a      	movs	r7, #10
 800d788:	9304      	str	r3, [sp, #16]
 800d78a:	2a6f      	cmp	r2, #111	@ 0x6f
 800d78c:	d100      	bne.n	800d790 <_printf_i+0xcc>
 800d78e:	3f02      	subs	r7, #2
 800d790:	0023      	movs	r3, r4
 800d792:	2200      	movs	r2, #0
 800d794:	3343      	adds	r3, #67	@ 0x43
 800d796:	701a      	strb	r2, [r3, #0]
 800d798:	6863      	ldr	r3, [r4, #4]
 800d79a:	60a3      	str	r3, [r4, #8]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	db03      	blt.n	800d7a8 <_printf_i+0xe4>
 800d7a0:	2104      	movs	r1, #4
 800d7a2:	6822      	ldr	r2, [r4, #0]
 800d7a4:	438a      	bics	r2, r1
 800d7a6:	6022      	str	r2, [r4, #0]
 800d7a8:	2e00      	cmp	r6, #0
 800d7aa:	d102      	bne.n	800d7b2 <_printf_i+0xee>
 800d7ac:	9d03      	ldr	r5, [sp, #12]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d00c      	beq.n	800d7cc <_printf_i+0x108>
 800d7b2:	9d03      	ldr	r5, [sp, #12]
 800d7b4:	0030      	movs	r0, r6
 800d7b6:	0039      	movs	r1, r7
 800d7b8:	f7f2 fd48 	bl	800024c <__aeabi_uidivmod>
 800d7bc:	9b04      	ldr	r3, [sp, #16]
 800d7be:	3d01      	subs	r5, #1
 800d7c0:	5c5b      	ldrb	r3, [r3, r1]
 800d7c2:	702b      	strb	r3, [r5, #0]
 800d7c4:	0033      	movs	r3, r6
 800d7c6:	0006      	movs	r6, r0
 800d7c8:	429f      	cmp	r7, r3
 800d7ca:	d9f3      	bls.n	800d7b4 <_printf_i+0xf0>
 800d7cc:	2f08      	cmp	r7, #8
 800d7ce:	d109      	bne.n	800d7e4 <_printf_i+0x120>
 800d7d0:	6823      	ldr	r3, [r4, #0]
 800d7d2:	07db      	lsls	r3, r3, #31
 800d7d4:	d506      	bpl.n	800d7e4 <_printf_i+0x120>
 800d7d6:	6862      	ldr	r2, [r4, #4]
 800d7d8:	6923      	ldr	r3, [r4, #16]
 800d7da:	429a      	cmp	r2, r3
 800d7dc:	dc02      	bgt.n	800d7e4 <_printf_i+0x120>
 800d7de:	2330      	movs	r3, #48	@ 0x30
 800d7e0:	3d01      	subs	r5, #1
 800d7e2:	702b      	strb	r3, [r5, #0]
 800d7e4:	9b03      	ldr	r3, [sp, #12]
 800d7e6:	1b5b      	subs	r3, r3, r5
 800d7e8:	6123      	str	r3, [r4, #16]
 800d7ea:	9b07      	ldr	r3, [sp, #28]
 800d7ec:	0021      	movs	r1, r4
 800d7ee:	9300      	str	r3, [sp, #0]
 800d7f0:	9805      	ldr	r0, [sp, #20]
 800d7f2:	9b06      	ldr	r3, [sp, #24]
 800d7f4:	aa09      	add	r2, sp, #36	@ 0x24
 800d7f6:	f7ff fef5 	bl	800d5e4 <_printf_common>
 800d7fa:	3001      	adds	r0, #1
 800d7fc:	d148      	bne.n	800d890 <_printf_i+0x1cc>
 800d7fe:	2001      	movs	r0, #1
 800d800:	4240      	negs	r0, r0
 800d802:	b00b      	add	sp, #44	@ 0x2c
 800d804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d806:	2220      	movs	r2, #32
 800d808:	6809      	ldr	r1, [r1, #0]
 800d80a:	430a      	orrs	r2, r1
 800d80c:	6022      	str	r2, [r4, #0]
 800d80e:	2278      	movs	r2, #120	@ 0x78
 800d810:	4932      	ldr	r1, [pc, #200]	@ (800d8dc <_printf_i+0x218>)
 800d812:	9104      	str	r1, [sp, #16]
 800d814:	0021      	movs	r1, r4
 800d816:	3145      	adds	r1, #69	@ 0x45
 800d818:	700a      	strb	r2, [r1, #0]
 800d81a:	6819      	ldr	r1, [r3, #0]
 800d81c:	6822      	ldr	r2, [r4, #0]
 800d81e:	c940      	ldmia	r1!, {r6}
 800d820:	0610      	lsls	r0, r2, #24
 800d822:	d402      	bmi.n	800d82a <_printf_i+0x166>
 800d824:	0650      	lsls	r0, r2, #25
 800d826:	d500      	bpl.n	800d82a <_printf_i+0x166>
 800d828:	b2b6      	uxth	r6, r6
 800d82a:	6019      	str	r1, [r3, #0]
 800d82c:	07d3      	lsls	r3, r2, #31
 800d82e:	d502      	bpl.n	800d836 <_printf_i+0x172>
 800d830:	2320      	movs	r3, #32
 800d832:	4313      	orrs	r3, r2
 800d834:	6023      	str	r3, [r4, #0]
 800d836:	2e00      	cmp	r6, #0
 800d838:	d001      	beq.n	800d83e <_printf_i+0x17a>
 800d83a:	2710      	movs	r7, #16
 800d83c:	e7a8      	b.n	800d790 <_printf_i+0xcc>
 800d83e:	2220      	movs	r2, #32
 800d840:	6823      	ldr	r3, [r4, #0]
 800d842:	4393      	bics	r3, r2
 800d844:	6023      	str	r3, [r4, #0]
 800d846:	e7f8      	b.n	800d83a <_printf_i+0x176>
 800d848:	681a      	ldr	r2, [r3, #0]
 800d84a:	680d      	ldr	r5, [r1, #0]
 800d84c:	1d10      	adds	r0, r2, #4
 800d84e:	6949      	ldr	r1, [r1, #20]
 800d850:	6018      	str	r0, [r3, #0]
 800d852:	6813      	ldr	r3, [r2, #0]
 800d854:	062e      	lsls	r6, r5, #24
 800d856:	d501      	bpl.n	800d85c <_printf_i+0x198>
 800d858:	6019      	str	r1, [r3, #0]
 800d85a:	e002      	b.n	800d862 <_printf_i+0x19e>
 800d85c:	066d      	lsls	r5, r5, #25
 800d85e:	d5fb      	bpl.n	800d858 <_printf_i+0x194>
 800d860:	8019      	strh	r1, [r3, #0]
 800d862:	2300      	movs	r3, #0
 800d864:	9d03      	ldr	r5, [sp, #12]
 800d866:	6123      	str	r3, [r4, #16]
 800d868:	e7bf      	b.n	800d7ea <_printf_i+0x126>
 800d86a:	681a      	ldr	r2, [r3, #0]
 800d86c:	1d11      	adds	r1, r2, #4
 800d86e:	6019      	str	r1, [r3, #0]
 800d870:	6815      	ldr	r5, [r2, #0]
 800d872:	2100      	movs	r1, #0
 800d874:	0028      	movs	r0, r5
 800d876:	6862      	ldr	r2, [r4, #4]
 800d878:	f000 fa01 	bl	800dc7e <memchr>
 800d87c:	2800      	cmp	r0, #0
 800d87e:	d001      	beq.n	800d884 <_printf_i+0x1c0>
 800d880:	1b40      	subs	r0, r0, r5
 800d882:	6060      	str	r0, [r4, #4]
 800d884:	6863      	ldr	r3, [r4, #4]
 800d886:	6123      	str	r3, [r4, #16]
 800d888:	2300      	movs	r3, #0
 800d88a:	9a03      	ldr	r2, [sp, #12]
 800d88c:	7013      	strb	r3, [r2, #0]
 800d88e:	e7ac      	b.n	800d7ea <_printf_i+0x126>
 800d890:	002a      	movs	r2, r5
 800d892:	6923      	ldr	r3, [r4, #16]
 800d894:	9906      	ldr	r1, [sp, #24]
 800d896:	9805      	ldr	r0, [sp, #20]
 800d898:	9d07      	ldr	r5, [sp, #28]
 800d89a:	47a8      	blx	r5
 800d89c:	3001      	adds	r0, #1
 800d89e:	d0ae      	beq.n	800d7fe <_printf_i+0x13a>
 800d8a0:	6823      	ldr	r3, [r4, #0]
 800d8a2:	079b      	lsls	r3, r3, #30
 800d8a4:	d415      	bmi.n	800d8d2 <_printf_i+0x20e>
 800d8a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8a8:	68e0      	ldr	r0, [r4, #12]
 800d8aa:	4298      	cmp	r0, r3
 800d8ac:	daa9      	bge.n	800d802 <_printf_i+0x13e>
 800d8ae:	0018      	movs	r0, r3
 800d8b0:	e7a7      	b.n	800d802 <_printf_i+0x13e>
 800d8b2:	0022      	movs	r2, r4
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	9906      	ldr	r1, [sp, #24]
 800d8b8:	9805      	ldr	r0, [sp, #20]
 800d8ba:	9e07      	ldr	r6, [sp, #28]
 800d8bc:	3219      	adds	r2, #25
 800d8be:	47b0      	blx	r6
 800d8c0:	3001      	adds	r0, #1
 800d8c2:	d09c      	beq.n	800d7fe <_printf_i+0x13a>
 800d8c4:	3501      	adds	r5, #1
 800d8c6:	68e3      	ldr	r3, [r4, #12]
 800d8c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d8ca:	1a9b      	subs	r3, r3, r2
 800d8cc:	42ab      	cmp	r3, r5
 800d8ce:	dcf0      	bgt.n	800d8b2 <_printf_i+0x1ee>
 800d8d0:	e7e9      	b.n	800d8a6 <_printf_i+0x1e2>
 800d8d2:	2500      	movs	r5, #0
 800d8d4:	e7f7      	b.n	800d8c6 <_printf_i+0x202>
 800d8d6:	46c0      	nop			@ (mov r8, r8)
 800d8d8:	0801b3da 	.word	0x0801b3da
 800d8dc:	0801b3eb 	.word	0x0801b3eb

0800d8e0 <std>:
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	b510      	push	{r4, lr}
 800d8e4:	0004      	movs	r4, r0
 800d8e6:	6003      	str	r3, [r0, #0]
 800d8e8:	6043      	str	r3, [r0, #4]
 800d8ea:	6083      	str	r3, [r0, #8]
 800d8ec:	8181      	strh	r1, [r0, #12]
 800d8ee:	6643      	str	r3, [r0, #100]	@ 0x64
 800d8f0:	81c2      	strh	r2, [r0, #14]
 800d8f2:	6103      	str	r3, [r0, #16]
 800d8f4:	6143      	str	r3, [r0, #20]
 800d8f6:	6183      	str	r3, [r0, #24]
 800d8f8:	0019      	movs	r1, r3
 800d8fa:	2208      	movs	r2, #8
 800d8fc:	305c      	adds	r0, #92	@ 0x5c
 800d8fe:	f000 f90f 	bl	800db20 <memset>
 800d902:	4b0b      	ldr	r3, [pc, #44]	@ (800d930 <std+0x50>)
 800d904:	6224      	str	r4, [r4, #32]
 800d906:	6263      	str	r3, [r4, #36]	@ 0x24
 800d908:	4b0a      	ldr	r3, [pc, #40]	@ (800d934 <std+0x54>)
 800d90a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d90c:	4b0a      	ldr	r3, [pc, #40]	@ (800d938 <std+0x58>)
 800d90e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d910:	4b0a      	ldr	r3, [pc, #40]	@ (800d93c <std+0x5c>)
 800d912:	6323      	str	r3, [r4, #48]	@ 0x30
 800d914:	4b0a      	ldr	r3, [pc, #40]	@ (800d940 <std+0x60>)
 800d916:	429c      	cmp	r4, r3
 800d918:	d005      	beq.n	800d926 <std+0x46>
 800d91a:	4b0a      	ldr	r3, [pc, #40]	@ (800d944 <std+0x64>)
 800d91c:	429c      	cmp	r4, r3
 800d91e:	d002      	beq.n	800d926 <std+0x46>
 800d920:	4b09      	ldr	r3, [pc, #36]	@ (800d948 <std+0x68>)
 800d922:	429c      	cmp	r4, r3
 800d924:	d103      	bne.n	800d92e <std+0x4e>
 800d926:	0020      	movs	r0, r4
 800d928:	3058      	adds	r0, #88	@ 0x58
 800d92a:	f000 f9a5 	bl	800dc78 <__retarget_lock_init_recursive>
 800d92e:	bd10      	pop	{r4, pc}
 800d930:	0800da89 	.word	0x0800da89
 800d934:	0800dab1 	.word	0x0800dab1
 800d938:	0800dae9 	.word	0x0800dae9
 800d93c:	0800db15 	.word	0x0800db15
 800d940:	20000604 	.word	0x20000604
 800d944:	2000066c 	.word	0x2000066c
 800d948:	200006d4 	.word	0x200006d4

0800d94c <stdio_exit_handler>:
 800d94c:	b510      	push	{r4, lr}
 800d94e:	4a03      	ldr	r2, [pc, #12]	@ (800d95c <stdio_exit_handler+0x10>)
 800d950:	4903      	ldr	r1, [pc, #12]	@ (800d960 <stdio_exit_handler+0x14>)
 800d952:	4804      	ldr	r0, [pc, #16]	@ (800d964 <stdio_exit_handler+0x18>)
 800d954:	f000 f87c 	bl	800da50 <_fwalk_sglue>
 800d958:	bd10      	pop	{r4, pc}
 800d95a:	46c0      	nop			@ (mov r8, r8)
 800d95c:	20000178 	.word	0x20000178
 800d960:	0800f509 	.word	0x0800f509
 800d964:	20000188 	.word	0x20000188

0800d968 <cleanup_stdio>:
 800d968:	6841      	ldr	r1, [r0, #4]
 800d96a:	4b0b      	ldr	r3, [pc, #44]	@ (800d998 <cleanup_stdio+0x30>)
 800d96c:	b510      	push	{r4, lr}
 800d96e:	0004      	movs	r4, r0
 800d970:	4299      	cmp	r1, r3
 800d972:	d001      	beq.n	800d978 <cleanup_stdio+0x10>
 800d974:	f001 fdc8 	bl	800f508 <_fflush_r>
 800d978:	68a1      	ldr	r1, [r4, #8]
 800d97a:	4b08      	ldr	r3, [pc, #32]	@ (800d99c <cleanup_stdio+0x34>)
 800d97c:	4299      	cmp	r1, r3
 800d97e:	d002      	beq.n	800d986 <cleanup_stdio+0x1e>
 800d980:	0020      	movs	r0, r4
 800d982:	f001 fdc1 	bl	800f508 <_fflush_r>
 800d986:	68e1      	ldr	r1, [r4, #12]
 800d988:	4b05      	ldr	r3, [pc, #20]	@ (800d9a0 <cleanup_stdio+0x38>)
 800d98a:	4299      	cmp	r1, r3
 800d98c:	d002      	beq.n	800d994 <cleanup_stdio+0x2c>
 800d98e:	0020      	movs	r0, r4
 800d990:	f001 fdba 	bl	800f508 <_fflush_r>
 800d994:	bd10      	pop	{r4, pc}
 800d996:	46c0      	nop			@ (mov r8, r8)
 800d998:	20000604 	.word	0x20000604
 800d99c:	2000066c 	.word	0x2000066c
 800d9a0:	200006d4 	.word	0x200006d4

0800d9a4 <global_stdio_init.part.0>:
 800d9a4:	b510      	push	{r4, lr}
 800d9a6:	4b09      	ldr	r3, [pc, #36]	@ (800d9cc <global_stdio_init.part.0+0x28>)
 800d9a8:	4a09      	ldr	r2, [pc, #36]	@ (800d9d0 <global_stdio_init.part.0+0x2c>)
 800d9aa:	2104      	movs	r1, #4
 800d9ac:	601a      	str	r2, [r3, #0]
 800d9ae:	4809      	ldr	r0, [pc, #36]	@ (800d9d4 <global_stdio_init.part.0+0x30>)
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	f7ff ff95 	bl	800d8e0 <std>
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	2109      	movs	r1, #9
 800d9ba:	4807      	ldr	r0, [pc, #28]	@ (800d9d8 <global_stdio_init.part.0+0x34>)
 800d9bc:	f7ff ff90 	bl	800d8e0 <std>
 800d9c0:	2202      	movs	r2, #2
 800d9c2:	2112      	movs	r1, #18
 800d9c4:	4805      	ldr	r0, [pc, #20]	@ (800d9dc <global_stdio_init.part.0+0x38>)
 800d9c6:	f7ff ff8b 	bl	800d8e0 <std>
 800d9ca:	bd10      	pop	{r4, pc}
 800d9cc:	2000073c 	.word	0x2000073c
 800d9d0:	0800d94d 	.word	0x0800d94d
 800d9d4:	20000604 	.word	0x20000604
 800d9d8:	2000066c 	.word	0x2000066c
 800d9dc:	200006d4 	.word	0x200006d4

0800d9e0 <__sfp_lock_acquire>:
 800d9e0:	b510      	push	{r4, lr}
 800d9e2:	4802      	ldr	r0, [pc, #8]	@ (800d9ec <__sfp_lock_acquire+0xc>)
 800d9e4:	f000 f949 	bl	800dc7a <__retarget_lock_acquire_recursive>
 800d9e8:	bd10      	pop	{r4, pc}
 800d9ea:	46c0      	nop			@ (mov r8, r8)
 800d9ec:	20000745 	.word	0x20000745

0800d9f0 <__sfp_lock_release>:
 800d9f0:	b510      	push	{r4, lr}
 800d9f2:	4802      	ldr	r0, [pc, #8]	@ (800d9fc <__sfp_lock_release+0xc>)
 800d9f4:	f000 f942 	bl	800dc7c <__retarget_lock_release_recursive>
 800d9f8:	bd10      	pop	{r4, pc}
 800d9fa:	46c0      	nop			@ (mov r8, r8)
 800d9fc:	20000745 	.word	0x20000745

0800da00 <__sinit>:
 800da00:	b510      	push	{r4, lr}
 800da02:	0004      	movs	r4, r0
 800da04:	f7ff ffec 	bl	800d9e0 <__sfp_lock_acquire>
 800da08:	6a23      	ldr	r3, [r4, #32]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d002      	beq.n	800da14 <__sinit+0x14>
 800da0e:	f7ff ffef 	bl	800d9f0 <__sfp_lock_release>
 800da12:	bd10      	pop	{r4, pc}
 800da14:	4b04      	ldr	r3, [pc, #16]	@ (800da28 <__sinit+0x28>)
 800da16:	6223      	str	r3, [r4, #32]
 800da18:	4b04      	ldr	r3, [pc, #16]	@ (800da2c <__sinit+0x2c>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d1f6      	bne.n	800da0e <__sinit+0xe>
 800da20:	f7ff ffc0 	bl	800d9a4 <global_stdio_init.part.0>
 800da24:	e7f3      	b.n	800da0e <__sinit+0xe>
 800da26:	46c0      	nop			@ (mov r8, r8)
 800da28:	0800d969 	.word	0x0800d969
 800da2c:	2000073c 	.word	0x2000073c

0800da30 <fiprintf>:
 800da30:	b40e      	push	{r1, r2, r3}
 800da32:	b517      	push	{r0, r1, r2, r4, lr}
 800da34:	4c05      	ldr	r4, [pc, #20]	@ (800da4c <fiprintf+0x1c>)
 800da36:	ab05      	add	r3, sp, #20
 800da38:	cb04      	ldmia	r3!, {r2}
 800da3a:	0001      	movs	r1, r0
 800da3c:	6820      	ldr	r0, [r4, #0]
 800da3e:	9301      	str	r3, [sp, #4]
 800da40:	f001 fbc0 	bl	800f1c4 <_vfiprintf_r>
 800da44:	bc1e      	pop	{r1, r2, r3, r4}
 800da46:	bc08      	pop	{r3}
 800da48:	b003      	add	sp, #12
 800da4a:	4718      	bx	r3
 800da4c:	20000184 	.word	0x20000184

0800da50 <_fwalk_sglue>:
 800da50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da52:	0014      	movs	r4, r2
 800da54:	2600      	movs	r6, #0
 800da56:	9000      	str	r0, [sp, #0]
 800da58:	9101      	str	r1, [sp, #4]
 800da5a:	68a5      	ldr	r5, [r4, #8]
 800da5c:	6867      	ldr	r7, [r4, #4]
 800da5e:	3f01      	subs	r7, #1
 800da60:	d504      	bpl.n	800da6c <_fwalk_sglue+0x1c>
 800da62:	6824      	ldr	r4, [r4, #0]
 800da64:	2c00      	cmp	r4, #0
 800da66:	d1f8      	bne.n	800da5a <_fwalk_sglue+0xa>
 800da68:	0030      	movs	r0, r6
 800da6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800da6c:	89ab      	ldrh	r3, [r5, #12]
 800da6e:	2b01      	cmp	r3, #1
 800da70:	d908      	bls.n	800da84 <_fwalk_sglue+0x34>
 800da72:	220e      	movs	r2, #14
 800da74:	5eab      	ldrsh	r3, [r5, r2]
 800da76:	3301      	adds	r3, #1
 800da78:	d004      	beq.n	800da84 <_fwalk_sglue+0x34>
 800da7a:	0029      	movs	r1, r5
 800da7c:	9800      	ldr	r0, [sp, #0]
 800da7e:	9b01      	ldr	r3, [sp, #4]
 800da80:	4798      	blx	r3
 800da82:	4306      	orrs	r6, r0
 800da84:	3568      	adds	r5, #104	@ 0x68
 800da86:	e7ea      	b.n	800da5e <_fwalk_sglue+0xe>

0800da88 <__sread>:
 800da88:	b570      	push	{r4, r5, r6, lr}
 800da8a:	000c      	movs	r4, r1
 800da8c:	250e      	movs	r5, #14
 800da8e:	5f49      	ldrsh	r1, [r1, r5]
 800da90:	f000 f88e 	bl	800dbb0 <_read_r>
 800da94:	2800      	cmp	r0, #0
 800da96:	db03      	blt.n	800daa0 <__sread+0x18>
 800da98:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800da9a:	181b      	adds	r3, r3, r0
 800da9c:	6563      	str	r3, [r4, #84]	@ 0x54
 800da9e:	bd70      	pop	{r4, r5, r6, pc}
 800daa0:	89a3      	ldrh	r3, [r4, #12]
 800daa2:	4a02      	ldr	r2, [pc, #8]	@ (800daac <__sread+0x24>)
 800daa4:	4013      	ands	r3, r2
 800daa6:	81a3      	strh	r3, [r4, #12]
 800daa8:	e7f9      	b.n	800da9e <__sread+0x16>
 800daaa:	46c0      	nop			@ (mov r8, r8)
 800daac:	ffffefff 	.word	0xffffefff

0800dab0 <__swrite>:
 800dab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dab2:	001f      	movs	r7, r3
 800dab4:	898b      	ldrh	r3, [r1, #12]
 800dab6:	0005      	movs	r5, r0
 800dab8:	000c      	movs	r4, r1
 800daba:	0016      	movs	r6, r2
 800dabc:	05db      	lsls	r3, r3, #23
 800dabe:	d505      	bpl.n	800dacc <__swrite+0x1c>
 800dac0:	230e      	movs	r3, #14
 800dac2:	5ec9      	ldrsh	r1, [r1, r3]
 800dac4:	2200      	movs	r2, #0
 800dac6:	2302      	movs	r3, #2
 800dac8:	f000 f85e 	bl	800db88 <_lseek_r>
 800dacc:	89a3      	ldrh	r3, [r4, #12]
 800dace:	4a05      	ldr	r2, [pc, #20]	@ (800dae4 <__swrite+0x34>)
 800dad0:	0028      	movs	r0, r5
 800dad2:	4013      	ands	r3, r2
 800dad4:	81a3      	strh	r3, [r4, #12]
 800dad6:	0032      	movs	r2, r6
 800dad8:	230e      	movs	r3, #14
 800dada:	5ee1      	ldrsh	r1, [r4, r3]
 800dadc:	003b      	movs	r3, r7
 800dade:	f000 f88d 	bl	800dbfc <_write_r>
 800dae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dae4:	ffffefff 	.word	0xffffefff

0800dae8 <__sseek>:
 800dae8:	b570      	push	{r4, r5, r6, lr}
 800daea:	000c      	movs	r4, r1
 800daec:	250e      	movs	r5, #14
 800daee:	5f49      	ldrsh	r1, [r1, r5]
 800daf0:	f000 f84a 	bl	800db88 <_lseek_r>
 800daf4:	89a3      	ldrh	r3, [r4, #12]
 800daf6:	1c42      	adds	r2, r0, #1
 800daf8:	d103      	bne.n	800db02 <__sseek+0x1a>
 800dafa:	4a05      	ldr	r2, [pc, #20]	@ (800db10 <__sseek+0x28>)
 800dafc:	4013      	ands	r3, r2
 800dafe:	81a3      	strh	r3, [r4, #12]
 800db00:	bd70      	pop	{r4, r5, r6, pc}
 800db02:	2280      	movs	r2, #128	@ 0x80
 800db04:	0152      	lsls	r2, r2, #5
 800db06:	4313      	orrs	r3, r2
 800db08:	81a3      	strh	r3, [r4, #12]
 800db0a:	6560      	str	r0, [r4, #84]	@ 0x54
 800db0c:	e7f8      	b.n	800db00 <__sseek+0x18>
 800db0e:	46c0      	nop			@ (mov r8, r8)
 800db10:	ffffefff 	.word	0xffffefff

0800db14 <__sclose>:
 800db14:	b510      	push	{r4, lr}
 800db16:	230e      	movs	r3, #14
 800db18:	5ec9      	ldrsh	r1, [r1, r3]
 800db1a:	f000 f823 	bl	800db64 <_close_r>
 800db1e:	bd10      	pop	{r4, pc}

0800db20 <memset>:
 800db20:	0003      	movs	r3, r0
 800db22:	1882      	adds	r2, r0, r2
 800db24:	4293      	cmp	r3, r2
 800db26:	d100      	bne.n	800db2a <memset+0xa>
 800db28:	4770      	bx	lr
 800db2a:	7019      	strb	r1, [r3, #0]
 800db2c:	3301      	adds	r3, #1
 800db2e:	e7f9      	b.n	800db24 <memset+0x4>

0800db30 <strncat>:
 800db30:	0003      	movs	r3, r0
 800db32:	b510      	push	{r4, lr}
 800db34:	781c      	ldrb	r4, [r3, #0]
 800db36:	2c00      	cmp	r4, #0
 800db38:	d107      	bne.n	800db4a <strncat+0x1a>
 800db3a:	3a01      	subs	r2, #1
 800db3c:	1c54      	adds	r4, r2, #1
 800db3e:	d003      	beq.n	800db48 <strncat+0x18>
 800db40:	780c      	ldrb	r4, [r1, #0]
 800db42:	701c      	strb	r4, [r3, #0]
 800db44:	2c00      	cmp	r4, #0
 800db46:	d102      	bne.n	800db4e <strncat+0x1e>
 800db48:	bd10      	pop	{r4, pc}
 800db4a:	3301      	adds	r3, #1
 800db4c:	e7f2      	b.n	800db34 <strncat+0x4>
 800db4e:	2a00      	cmp	r2, #0
 800db50:	d100      	bne.n	800db54 <strncat+0x24>
 800db52:	705a      	strb	r2, [r3, #1]
 800db54:	3301      	adds	r3, #1
 800db56:	3101      	adds	r1, #1
 800db58:	e7ef      	b.n	800db3a <strncat+0xa>
	...

0800db5c <_localeconv_r>:
 800db5c:	4800      	ldr	r0, [pc, #0]	@ (800db60 <_localeconv_r+0x4>)
 800db5e:	4770      	bx	lr
 800db60:	200002c4 	.word	0x200002c4

0800db64 <_close_r>:
 800db64:	2300      	movs	r3, #0
 800db66:	b570      	push	{r4, r5, r6, lr}
 800db68:	4d06      	ldr	r5, [pc, #24]	@ (800db84 <_close_r+0x20>)
 800db6a:	0004      	movs	r4, r0
 800db6c:	0008      	movs	r0, r1
 800db6e:	602b      	str	r3, [r5, #0]
 800db70:	f7f7 ff69 	bl	8005a46 <_close>
 800db74:	1c43      	adds	r3, r0, #1
 800db76:	d103      	bne.n	800db80 <_close_r+0x1c>
 800db78:	682b      	ldr	r3, [r5, #0]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d000      	beq.n	800db80 <_close_r+0x1c>
 800db7e:	6023      	str	r3, [r4, #0]
 800db80:	bd70      	pop	{r4, r5, r6, pc}
 800db82:	46c0      	nop			@ (mov r8, r8)
 800db84:	20000740 	.word	0x20000740

0800db88 <_lseek_r>:
 800db88:	b570      	push	{r4, r5, r6, lr}
 800db8a:	0004      	movs	r4, r0
 800db8c:	0008      	movs	r0, r1
 800db8e:	0011      	movs	r1, r2
 800db90:	001a      	movs	r2, r3
 800db92:	2300      	movs	r3, #0
 800db94:	4d05      	ldr	r5, [pc, #20]	@ (800dbac <_lseek_r+0x24>)
 800db96:	602b      	str	r3, [r5, #0]
 800db98:	f7f7 ff76 	bl	8005a88 <_lseek>
 800db9c:	1c43      	adds	r3, r0, #1
 800db9e:	d103      	bne.n	800dba8 <_lseek_r+0x20>
 800dba0:	682b      	ldr	r3, [r5, #0]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d000      	beq.n	800dba8 <_lseek_r+0x20>
 800dba6:	6023      	str	r3, [r4, #0]
 800dba8:	bd70      	pop	{r4, r5, r6, pc}
 800dbaa:	46c0      	nop			@ (mov r8, r8)
 800dbac:	20000740 	.word	0x20000740

0800dbb0 <_read_r>:
 800dbb0:	b570      	push	{r4, r5, r6, lr}
 800dbb2:	0004      	movs	r4, r0
 800dbb4:	0008      	movs	r0, r1
 800dbb6:	0011      	movs	r1, r2
 800dbb8:	001a      	movs	r2, r3
 800dbba:	2300      	movs	r3, #0
 800dbbc:	4d05      	ldr	r5, [pc, #20]	@ (800dbd4 <_read_r+0x24>)
 800dbbe:	602b      	str	r3, [r5, #0]
 800dbc0:	f7f7 ff08 	bl	80059d4 <_read>
 800dbc4:	1c43      	adds	r3, r0, #1
 800dbc6:	d103      	bne.n	800dbd0 <_read_r+0x20>
 800dbc8:	682b      	ldr	r3, [r5, #0]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d000      	beq.n	800dbd0 <_read_r+0x20>
 800dbce:	6023      	str	r3, [r4, #0]
 800dbd0:	bd70      	pop	{r4, r5, r6, pc}
 800dbd2:	46c0      	nop			@ (mov r8, r8)
 800dbd4:	20000740 	.word	0x20000740

0800dbd8 <_sbrk_r>:
 800dbd8:	2300      	movs	r3, #0
 800dbda:	b570      	push	{r4, r5, r6, lr}
 800dbdc:	4d06      	ldr	r5, [pc, #24]	@ (800dbf8 <_sbrk_r+0x20>)
 800dbde:	0004      	movs	r4, r0
 800dbe0:	0008      	movs	r0, r1
 800dbe2:	602b      	str	r3, [r5, #0]
 800dbe4:	f7f7 ff5c 	bl	8005aa0 <_sbrk>
 800dbe8:	1c43      	adds	r3, r0, #1
 800dbea:	d103      	bne.n	800dbf4 <_sbrk_r+0x1c>
 800dbec:	682b      	ldr	r3, [r5, #0]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d000      	beq.n	800dbf4 <_sbrk_r+0x1c>
 800dbf2:	6023      	str	r3, [r4, #0]
 800dbf4:	bd70      	pop	{r4, r5, r6, pc}
 800dbf6:	46c0      	nop			@ (mov r8, r8)
 800dbf8:	20000740 	.word	0x20000740

0800dbfc <_write_r>:
 800dbfc:	b570      	push	{r4, r5, r6, lr}
 800dbfe:	0004      	movs	r4, r0
 800dc00:	0008      	movs	r0, r1
 800dc02:	0011      	movs	r1, r2
 800dc04:	001a      	movs	r2, r3
 800dc06:	2300      	movs	r3, #0
 800dc08:	4d05      	ldr	r5, [pc, #20]	@ (800dc20 <_write_r+0x24>)
 800dc0a:	602b      	str	r3, [r5, #0]
 800dc0c:	f7f7 feff 	bl	8005a0e <_write>
 800dc10:	1c43      	adds	r3, r0, #1
 800dc12:	d103      	bne.n	800dc1c <_write_r+0x20>
 800dc14:	682b      	ldr	r3, [r5, #0]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d000      	beq.n	800dc1c <_write_r+0x20>
 800dc1a:	6023      	str	r3, [r4, #0]
 800dc1c:	bd70      	pop	{r4, r5, r6, pc}
 800dc1e:	46c0      	nop			@ (mov r8, r8)
 800dc20:	20000740 	.word	0x20000740

0800dc24 <__errno>:
 800dc24:	4b01      	ldr	r3, [pc, #4]	@ (800dc2c <__errno+0x8>)
 800dc26:	6818      	ldr	r0, [r3, #0]
 800dc28:	4770      	bx	lr
 800dc2a:	46c0      	nop			@ (mov r8, r8)
 800dc2c:	20000184 	.word	0x20000184

0800dc30 <__libc_init_array>:
 800dc30:	b570      	push	{r4, r5, r6, lr}
 800dc32:	2600      	movs	r6, #0
 800dc34:	4c0c      	ldr	r4, [pc, #48]	@ (800dc68 <__libc_init_array+0x38>)
 800dc36:	4d0d      	ldr	r5, [pc, #52]	@ (800dc6c <__libc_init_array+0x3c>)
 800dc38:	1b64      	subs	r4, r4, r5
 800dc3a:	10a4      	asrs	r4, r4, #2
 800dc3c:	42a6      	cmp	r6, r4
 800dc3e:	d109      	bne.n	800dc54 <__libc_init_array+0x24>
 800dc40:	2600      	movs	r6, #0
 800dc42:	f001 fe81 	bl	800f948 <_init>
 800dc46:	4c0a      	ldr	r4, [pc, #40]	@ (800dc70 <__libc_init_array+0x40>)
 800dc48:	4d0a      	ldr	r5, [pc, #40]	@ (800dc74 <__libc_init_array+0x44>)
 800dc4a:	1b64      	subs	r4, r4, r5
 800dc4c:	10a4      	asrs	r4, r4, #2
 800dc4e:	42a6      	cmp	r6, r4
 800dc50:	d105      	bne.n	800dc5e <__libc_init_array+0x2e>
 800dc52:	bd70      	pop	{r4, r5, r6, pc}
 800dc54:	00b3      	lsls	r3, r6, #2
 800dc56:	58eb      	ldr	r3, [r5, r3]
 800dc58:	4798      	blx	r3
 800dc5a:	3601      	adds	r6, #1
 800dc5c:	e7ee      	b.n	800dc3c <__libc_init_array+0xc>
 800dc5e:	00b3      	lsls	r3, r6, #2
 800dc60:	58eb      	ldr	r3, [r5, r3]
 800dc62:	4798      	blx	r3
 800dc64:	3601      	adds	r6, #1
 800dc66:	e7f2      	b.n	800dc4e <__libc_init_array+0x1e>
 800dc68:	0801b740 	.word	0x0801b740
 800dc6c:	0801b740 	.word	0x0801b740
 800dc70:	0801b744 	.word	0x0801b744
 800dc74:	0801b740 	.word	0x0801b740

0800dc78 <__retarget_lock_init_recursive>:
 800dc78:	4770      	bx	lr

0800dc7a <__retarget_lock_acquire_recursive>:
 800dc7a:	4770      	bx	lr

0800dc7c <__retarget_lock_release_recursive>:
 800dc7c:	4770      	bx	lr

0800dc7e <memchr>:
 800dc7e:	b2c9      	uxtb	r1, r1
 800dc80:	1882      	adds	r2, r0, r2
 800dc82:	4290      	cmp	r0, r2
 800dc84:	d101      	bne.n	800dc8a <memchr+0xc>
 800dc86:	2000      	movs	r0, #0
 800dc88:	4770      	bx	lr
 800dc8a:	7803      	ldrb	r3, [r0, #0]
 800dc8c:	428b      	cmp	r3, r1
 800dc8e:	d0fb      	beq.n	800dc88 <memchr+0xa>
 800dc90:	3001      	adds	r0, #1
 800dc92:	e7f6      	b.n	800dc82 <memchr+0x4>

0800dc94 <quorem>:
 800dc94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc96:	6902      	ldr	r2, [r0, #16]
 800dc98:	690f      	ldr	r7, [r1, #16]
 800dc9a:	b087      	sub	sp, #28
 800dc9c:	0006      	movs	r6, r0
 800dc9e:	000b      	movs	r3, r1
 800dca0:	2000      	movs	r0, #0
 800dca2:	9102      	str	r1, [sp, #8]
 800dca4:	42ba      	cmp	r2, r7
 800dca6:	db6d      	blt.n	800dd84 <quorem+0xf0>
 800dca8:	3f01      	subs	r7, #1
 800dcaa:	00bc      	lsls	r4, r7, #2
 800dcac:	3314      	adds	r3, #20
 800dcae:	9305      	str	r3, [sp, #20]
 800dcb0:	191b      	adds	r3, r3, r4
 800dcb2:	9303      	str	r3, [sp, #12]
 800dcb4:	0033      	movs	r3, r6
 800dcb6:	3314      	adds	r3, #20
 800dcb8:	191c      	adds	r4, r3, r4
 800dcba:	9301      	str	r3, [sp, #4]
 800dcbc:	6823      	ldr	r3, [r4, #0]
 800dcbe:	9304      	str	r3, [sp, #16]
 800dcc0:	9b03      	ldr	r3, [sp, #12]
 800dcc2:	9804      	ldr	r0, [sp, #16]
 800dcc4:	681d      	ldr	r5, [r3, #0]
 800dcc6:	3501      	adds	r5, #1
 800dcc8:	0029      	movs	r1, r5
 800dcca:	f7f2 fa39 	bl	8000140 <__udivsi3>
 800dcce:	9b04      	ldr	r3, [sp, #16]
 800dcd0:	9000      	str	r0, [sp, #0]
 800dcd2:	42ab      	cmp	r3, r5
 800dcd4:	d32b      	bcc.n	800dd2e <quorem+0x9a>
 800dcd6:	9b05      	ldr	r3, [sp, #20]
 800dcd8:	9d01      	ldr	r5, [sp, #4]
 800dcda:	469c      	mov	ip, r3
 800dcdc:	2300      	movs	r3, #0
 800dcde:	9305      	str	r3, [sp, #20]
 800dce0:	9304      	str	r3, [sp, #16]
 800dce2:	4662      	mov	r2, ip
 800dce4:	ca08      	ldmia	r2!, {r3}
 800dce6:	6828      	ldr	r0, [r5, #0]
 800dce8:	4694      	mov	ip, r2
 800dcea:	9a00      	ldr	r2, [sp, #0]
 800dcec:	b299      	uxth	r1, r3
 800dcee:	4351      	muls	r1, r2
 800dcf0:	9a05      	ldr	r2, [sp, #20]
 800dcf2:	0c1b      	lsrs	r3, r3, #16
 800dcf4:	1889      	adds	r1, r1, r2
 800dcf6:	9a00      	ldr	r2, [sp, #0]
 800dcf8:	4353      	muls	r3, r2
 800dcfa:	0c0a      	lsrs	r2, r1, #16
 800dcfc:	189b      	adds	r3, r3, r2
 800dcfe:	0c1a      	lsrs	r2, r3, #16
 800dd00:	b289      	uxth	r1, r1
 800dd02:	9205      	str	r2, [sp, #20]
 800dd04:	b282      	uxth	r2, r0
 800dd06:	1a52      	subs	r2, r2, r1
 800dd08:	9904      	ldr	r1, [sp, #16]
 800dd0a:	0c00      	lsrs	r0, r0, #16
 800dd0c:	1852      	adds	r2, r2, r1
 800dd0e:	b29b      	uxth	r3, r3
 800dd10:	1411      	asrs	r1, r2, #16
 800dd12:	1ac3      	subs	r3, r0, r3
 800dd14:	185b      	adds	r3, r3, r1
 800dd16:	1419      	asrs	r1, r3, #16
 800dd18:	b292      	uxth	r2, r2
 800dd1a:	041b      	lsls	r3, r3, #16
 800dd1c:	431a      	orrs	r2, r3
 800dd1e:	9b03      	ldr	r3, [sp, #12]
 800dd20:	9104      	str	r1, [sp, #16]
 800dd22:	c504      	stmia	r5!, {r2}
 800dd24:	4563      	cmp	r3, ip
 800dd26:	d2dc      	bcs.n	800dce2 <quorem+0x4e>
 800dd28:	6823      	ldr	r3, [r4, #0]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d030      	beq.n	800dd90 <quorem+0xfc>
 800dd2e:	0030      	movs	r0, r6
 800dd30:	9902      	ldr	r1, [sp, #8]
 800dd32:	f001 f909 	bl	800ef48 <__mcmp>
 800dd36:	2800      	cmp	r0, #0
 800dd38:	db23      	blt.n	800dd82 <quorem+0xee>
 800dd3a:	0034      	movs	r4, r6
 800dd3c:	2500      	movs	r5, #0
 800dd3e:	9902      	ldr	r1, [sp, #8]
 800dd40:	3414      	adds	r4, #20
 800dd42:	3114      	adds	r1, #20
 800dd44:	6823      	ldr	r3, [r4, #0]
 800dd46:	c901      	ldmia	r1!, {r0}
 800dd48:	9302      	str	r3, [sp, #8]
 800dd4a:	466b      	mov	r3, sp
 800dd4c:	891b      	ldrh	r3, [r3, #8]
 800dd4e:	b282      	uxth	r2, r0
 800dd50:	1a9a      	subs	r2, r3, r2
 800dd52:	9b02      	ldr	r3, [sp, #8]
 800dd54:	1952      	adds	r2, r2, r5
 800dd56:	0c00      	lsrs	r0, r0, #16
 800dd58:	0c1b      	lsrs	r3, r3, #16
 800dd5a:	1a1b      	subs	r3, r3, r0
 800dd5c:	1410      	asrs	r0, r2, #16
 800dd5e:	181b      	adds	r3, r3, r0
 800dd60:	141d      	asrs	r5, r3, #16
 800dd62:	b292      	uxth	r2, r2
 800dd64:	041b      	lsls	r3, r3, #16
 800dd66:	431a      	orrs	r2, r3
 800dd68:	9b03      	ldr	r3, [sp, #12]
 800dd6a:	c404      	stmia	r4!, {r2}
 800dd6c:	428b      	cmp	r3, r1
 800dd6e:	d2e9      	bcs.n	800dd44 <quorem+0xb0>
 800dd70:	9a01      	ldr	r2, [sp, #4]
 800dd72:	00bb      	lsls	r3, r7, #2
 800dd74:	18d3      	adds	r3, r2, r3
 800dd76:	681a      	ldr	r2, [r3, #0]
 800dd78:	2a00      	cmp	r2, #0
 800dd7a:	d013      	beq.n	800dda4 <quorem+0x110>
 800dd7c:	9b00      	ldr	r3, [sp, #0]
 800dd7e:	3301      	adds	r3, #1
 800dd80:	9300      	str	r3, [sp, #0]
 800dd82:	9800      	ldr	r0, [sp, #0]
 800dd84:	b007      	add	sp, #28
 800dd86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd88:	6823      	ldr	r3, [r4, #0]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d104      	bne.n	800dd98 <quorem+0x104>
 800dd8e:	3f01      	subs	r7, #1
 800dd90:	9b01      	ldr	r3, [sp, #4]
 800dd92:	3c04      	subs	r4, #4
 800dd94:	42a3      	cmp	r3, r4
 800dd96:	d3f7      	bcc.n	800dd88 <quorem+0xf4>
 800dd98:	6137      	str	r7, [r6, #16]
 800dd9a:	e7c8      	b.n	800dd2e <quorem+0x9a>
 800dd9c:	681a      	ldr	r2, [r3, #0]
 800dd9e:	2a00      	cmp	r2, #0
 800dda0:	d104      	bne.n	800ddac <quorem+0x118>
 800dda2:	3f01      	subs	r7, #1
 800dda4:	9a01      	ldr	r2, [sp, #4]
 800dda6:	3b04      	subs	r3, #4
 800dda8:	429a      	cmp	r2, r3
 800ddaa:	d3f7      	bcc.n	800dd9c <quorem+0x108>
 800ddac:	6137      	str	r7, [r6, #16]
 800ddae:	e7e5      	b.n	800dd7c <quorem+0xe8>

0800ddb0 <_dtoa_r>:
 800ddb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddb2:	0014      	movs	r4, r2
 800ddb4:	001d      	movs	r5, r3
 800ddb6:	69c6      	ldr	r6, [r0, #28]
 800ddb8:	b09d      	sub	sp, #116	@ 0x74
 800ddba:	940a      	str	r4, [sp, #40]	@ 0x28
 800ddbc:	950b      	str	r5, [sp, #44]	@ 0x2c
 800ddbe:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800ddc0:	9003      	str	r0, [sp, #12]
 800ddc2:	2e00      	cmp	r6, #0
 800ddc4:	d10f      	bne.n	800dde6 <_dtoa_r+0x36>
 800ddc6:	2010      	movs	r0, #16
 800ddc8:	f7ff f86c 	bl	800cea4 <malloc>
 800ddcc:	9b03      	ldr	r3, [sp, #12]
 800ddce:	1e02      	subs	r2, r0, #0
 800ddd0:	61d8      	str	r0, [r3, #28]
 800ddd2:	d104      	bne.n	800ddde <_dtoa_r+0x2e>
 800ddd4:	21ef      	movs	r1, #239	@ 0xef
 800ddd6:	4bc7      	ldr	r3, [pc, #796]	@ (800e0f4 <_dtoa_r+0x344>)
 800ddd8:	48c7      	ldr	r0, [pc, #796]	@ (800e0f8 <_dtoa_r+0x348>)
 800ddda:	f001 fc6b 	bl	800f6b4 <__assert_func>
 800ddde:	6046      	str	r6, [r0, #4]
 800dde0:	6086      	str	r6, [r0, #8]
 800dde2:	6006      	str	r6, [r0, #0]
 800dde4:	60c6      	str	r6, [r0, #12]
 800dde6:	9b03      	ldr	r3, [sp, #12]
 800dde8:	69db      	ldr	r3, [r3, #28]
 800ddea:	6819      	ldr	r1, [r3, #0]
 800ddec:	2900      	cmp	r1, #0
 800ddee:	d00b      	beq.n	800de08 <_dtoa_r+0x58>
 800ddf0:	685a      	ldr	r2, [r3, #4]
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	4093      	lsls	r3, r2
 800ddf6:	604a      	str	r2, [r1, #4]
 800ddf8:	608b      	str	r3, [r1, #8]
 800ddfa:	9803      	ldr	r0, [sp, #12]
 800ddfc:	f000 fe5a 	bl	800eab4 <_Bfree>
 800de00:	2200      	movs	r2, #0
 800de02:	9b03      	ldr	r3, [sp, #12]
 800de04:	69db      	ldr	r3, [r3, #28]
 800de06:	601a      	str	r2, [r3, #0]
 800de08:	2d00      	cmp	r5, #0
 800de0a:	da1e      	bge.n	800de4a <_dtoa_r+0x9a>
 800de0c:	2301      	movs	r3, #1
 800de0e:	603b      	str	r3, [r7, #0]
 800de10:	006b      	lsls	r3, r5, #1
 800de12:	085b      	lsrs	r3, r3, #1
 800de14:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de16:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800de18:	4bb8      	ldr	r3, [pc, #736]	@ (800e0fc <_dtoa_r+0x34c>)
 800de1a:	4ab8      	ldr	r2, [pc, #736]	@ (800e0fc <_dtoa_r+0x34c>)
 800de1c:	403b      	ands	r3, r7
 800de1e:	4293      	cmp	r3, r2
 800de20:	d116      	bne.n	800de50 <_dtoa_r+0xa0>
 800de22:	4bb7      	ldr	r3, [pc, #732]	@ (800e100 <_dtoa_r+0x350>)
 800de24:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800de26:	6013      	str	r3, [r2, #0]
 800de28:	033b      	lsls	r3, r7, #12
 800de2a:	0b1b      	lsrs	r3, r3, #12
 800de2c:	4323      	orrs	r3, r4
 800de2e:	d101      	bne.n	800de34 <_dtoa_r+0x84>
 800de30:	f000 fd83 	bl	800e93a <_dtoa_r+0xb8a>
 800de34:	4bb3      	ldr	r3, [pc, #716]	@ (800e104 <_dtoa_r+0x354>)
 800de36:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800de38:	9308      	str	r3, [sp, #32]
 800de3a:	2a00      	cmp	r2, #0
 800de3c:	d002      	beq.n	800de44 <_dtoa_r+0x94>
 800de3e:	4bb2      	ldr	r3, [pc, #712]	@ (800e108 <_dtoa_r+0x358>)
 800de40:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800de42:	6013      	str	r3, [r2, #0]
 800de44:	9808      	ldr	r0, [sp, #32]
 800de46:	b01d      	add	sp, #116	@ 0x74
 800de48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de4a:	2300      	movs	r3, #0
 800de4c:	603b      	str	r3, [r7, #0]
 800de4e:	e7e2      	b.n	800de16 <_dtoa_r+0x66>
 800de50:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800de52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de54:	9212      	str	r2, [sp, #72]	@ 0x48
 800de56:	9313      	str	r3, [sp, #76]	@ 0x4c
 800de58:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800de5a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800de5c:	2200      	movs	r2, #0
 800de5e:	2300      	movs	r3, #0
 800de60:	f7f2 faf4 	bl	800044c <__aeabi_dcmpeq>
 800de64:	1e06      	subs	r6, r0, #0
 800de66:	d00b      	beq.n	800de80 <_dtoa_r+0xd0>
 800de68:	2301      	movs	r3, #1
 800de6a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800de6c:	6013      	str	r3, [r2, #0]
 800de6e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800de70:	2b00      	cmp	r3, #0
 800de72:	d002      	beq.n	800de7a <_dtoa_r+0xca>
 800de74:	4ba5      	ldr	r3, [pc, #660]	@ (800e10c <_dtoa_r+0x35c>)
 800de76:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800de78:	6013      	str	r3, [r2, #0]
 800de7a:	4ba5      	ldr	r3, [pc, #660]	@ (800e110 <_dtoa_r+0x360>)
 800de7c:	9308      	str	r3, [sp, #32]
 800de7e:	e7e1      	b.n	800de44 <_dtoa_r+0x94>
 800de80:	ab1a      	add	r3, sp, #104	@ 0x68
 800de82:	9301      	str	r3, [sp, #4]
 800de84:	ab1b      	add	r3, sp, #108	@ 0x6c
 800de86:	9300      	str	r3, [sp, #0]
 800de88:	9803      	ldr	r0, [sp, #12]
 800de8a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800de8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800de8e:	f001 f911 	bl	800f0b4 <__d2b>
 800de92:	007a      	lsls	r2, r7, #1
 800de94:	9005      	str	r0, [sp, #20]
 800de96:	0d52      	lsrs	r2, r2, #21
 800de98:	d100      	bne.n	800de9c <_dtoa_r+0xec>
 800de9a:	e07b      	b.n	800df94 <_dtoa_r+0x1e4>
 800de9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800de9e:	9618      	str	r6, [sp, #96]	@ 0x60
 800dea0:	0319      	lsls	r1, r3, #12
 800dea2:	4b9c      	ldr	r3, [pc, #624]	@ (800e114 <_dtoa_r+0x364>)
 800dea4:	0b09      	lsrs	r1, r1, #12
 800dea6:	430b      	orrs	r3, r1
 800dea8:	499b      	ldr	r1, [pc, #620]	@ (800e118 <_dtoa_r+0x368>)
 800deaa:	1857      	adds	r7, r2, r1
 800deac:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800deae:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800deb0:	0019      	movs	r1, r3
 800deb2:	2200      	movs	r2, #0
 800deb4:	4b99      	ldr	r3, [pc, #612]	@ (800e11c <_dtoa_r+0x36c>)
 800deb6:	f7f3 fe8f 	bl	8001bd8 <__aeabi_dsub>
 800deba:	4a99      	ldr	r2, [pc, #612]	@ (800e120 <_dtoa_r+0x370>)
 800debc:	4b99      	ldr	r3, [pc, #612]	@ (800e124 <_dtoa_r+0x374>)
 800debe:	f7f3 fbc3 	bl	8001648 <__aeabi_dmul>
 800dec2:	4a99      	ldr	r2, [pc, #612]	@ (800e128 <_dtoa_r+0x378>)
 800dec4:	4b99      	ldr	r3, [pc, #612]	@ (800e12c <_dtoa_r+0x37c>)
 800dec6:	f7f2 fc17 	bl	80006f8 <__aeabi_dadd>
 800deca:	0004      	movs	r4, r0
 800decc:	0038      	movs	r0, r7
 800dece:	000d      	movs	r5, r1
 800ded0:	f7f4 fa7c 	bl	80023cc <__aeabi_i2d>
 800ded4:	4a96      	ldr	r2, [pc, #600]	@ (800e130 <_dtoa_r+0x380>)
 800ded6:	4b97      	ldr	r3, [pc, #604]	@ (800e134 <_dtoa_r+0x384>)
 800ded8:	f7f3 fbb6 	bl	8001648 <__aeabi_dmul>
 800dedc:	0002      	movs	r2, r0
 800dede:	000b      	movs	r3, r1
 800dee0:	0020      	movs	r0, r4
 800dee2:	0029      	movs	r1, r5
 800dee4:	f7f2 fc08 	bl	80006f8 <__aeabi_dadd>
 800dee8:	0004      	movs	r4, r0
 800deea:	000d      	movs	r5, r1
 800deec:	f7f4 fa32 	bl	8002354 <__aeabi_d2iz>
 800def0:	2200      	movs	r2, #0
 800def2:	9004      	str	r0, [sp, #16]
 800def4:	2300      	movs	r3, #0
 800def6:	0020      	movs	r0, r4
 800def8:	0029      	movs	r1, r5
 800defa:	f7f2 faad 	bl	8000458 <__aeabi_dcmplt>
 800defe:	2800      	cmp	r0, #0
 800df00:	d00b      	beq.n	800df1a <_dtoa_r+0x16a>
 800df02:	9804      	ldr	r0, [sp, #16]
 800df04:	f7f4 fa62 	bl	80023cc <__aeabi_i2d>
 800df08:	002b      	movs	r3, r5
 800df0a:	0022      	movs	r2, r4
 800df0c:	f7f2 fa9e 	bl	800044c <__aeabi_dcmpeq>
 800df10:	4243      	negs	r3, r0
 800df12:	4158      	adcs	r0, r3
 800df14:	9b04      	ldr	r3, [sp, #16]
 800df16:	1a1b      	subs	r3, r3, r0
 800df18:	9304      	str	r3, [sp, #16]
 800df1a:	2301      	movs	r3, #1
 800df1c:	9315      	str	r3, [sp, #84]	@ 0x54
 800df1e:	9b04      	ldr	r3, [sp, #16]
 800df20:	2b16      	cmp	r3, #22
 800df22:	d810      	bhi.n	800df46 <_dtoa_r+0x196>
 800df24:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800df26:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800df28:	9a04      	ldr	r2, [sp, #16]
 800df2a:	4b83      	ldr	r3, [pc, #524]	@ (800e138 <_dtoa_r+0x388>)
 800df2c:	00d2      	lsls	r2, r2, #3
 800df2e:	189b      	adds	r3, r3, r2
 800df30:	681a      	ldr	r2, [r3, #0]
 800df32:	685b      	ldr	r3, [r3, #4]
 800df34:	f7f2 fa90 	bl	8000458 <__aeabi_dcmplt>
 800df38:	2800      	cmp	r0, #0
 800df3a:	d047      	beq.n	800dfcc <_dtoa_r+0x21c>
 800df3c:	9b04      	ldr	r3, [sp, #16]
 800df3e:	3b01      	subs	r3, #1
 800df40:	9304      	str	r3, [sp, #16]
 800df42:	2300      	movs	r3, #0
 800df44:	9315      	str	r3, [sp, #84]	@ 0x54
 800df46:	2200      	movs	r2, #0
 800df48:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800df4a:	9206      	str	r2, [sp, #24]
 800df4c:	1bdb      	subs	r3, r3, r7
 800df4e:	1e5a      	subs	r2, r3, #1
 800df50:	d53e      	bpl.n	800dfd0 <_dtoa_r+0x220>
 800df52:	2201      	movs	r2, #1
 800df54:	1ad3      	subs	r3, r2, r3
 800df56:	9306      	str	r3, [sp, #24]
 800df58:	2300      	movs	r3, #0
 800df5a:	930d      	str	r3, [sp, #52]	@ 0x34
 800df5c:	9b04      	ldr	r3, [sp, #16]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	db38      	blt.n	800dfd4 <_dtoa_r+0x224>
 800df62:	9a04      	ldr	r2, [sp, #16]
 800df64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800df66:	4694      	mov	ip, r2
 800df68:	4463      	add	r3, ip
 800df6a:	930d      	str	r3, [sp, #52]	@ 0x34
 800df6c:	2300      	movs	r3, #0
 800df6e:	9214      	str	r2, [sp, #80]	@ 0x50
 800df70:	930f      	str	r3, [sp, #60]	@ 0x3c
 800df72:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800df74:	2401      	movs	r4, #1
 800df76:	2b09      	cmp	r3, #9
 800df78:	d867      	bhi.n	800e04a <_dtoa_r+0x29a>
 800df7a:	2b05      	cmp	r3, #5
 800df7c:	dd02      	ble.n	800df84 <_dtoa_r+0x1d4>
 800df7e:	2400      	movs	r4, #0
 800df80:	3b04      	subs	r3, #4
 800df82:	9322      	str	r3, [sp, #136]	@ 0x88
 800df84:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800df86:	1e98      	subs	r0, r3, #2
 800df88:	2803      	cmp	r0, #3
 800df8a:	d867      	bhi.n	800e05c <_dtoa_r+0x2ac>
 800df8c:	f7f2 f8c4 	bl	8000118 <__gnu_thumb1_case_uqi>
 800df90:	5b383a2b 	.word	0x5b383a2b
 800df94:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800df96:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800df98:	18f6      	adds	r6, r6, r3
 800df9a:	4b68      	ldr	r3, [pc, #416]	@ (800e13c <_dtoa_r+0x38c>)
 800df9c:	18f2      	adds	r2, r6, r3
 800df9e:	2a20      	cmp	r2, #32
 800dfa0:	dd0f      	ble.n	800dfc2 <_dtoa_r+0x212>
 800dfa2:	2340      	movs	r3, #64	@ 0x40
 800dfa4:	1a9b      	subs	r3, r3, r2
 800dfa6:	409f      	lsls	r7, r3
 800dfa8:	4b65      	ldr	r3, [pc, #404]	@ (800e140 <_dtoa_r+0x390>)
 800dfaa:	0038      	movs	r0, r7
 800dfac:	18f3      	adds	r3, r6, r3
 800dfae:	40dc      	lsrs	r4, r3
 800dfb0:	4320      	orrs	r0, r4
 800dfb2:	f7f4 fa39 	bl	8002428 <__aeabi_ui2d>
 800dfb6:	2201      	movs	r2, #1
 800dfb8:	4b62      	ldr	r3, [pc, #392]	@ (800e144 <_dtoa_r+0x394>)
 800dfba:	1e77      	subs	r7, r6, #1
 800dfbc:	18cb      	adds	r3, r1, r3
 800dfbe:	9218      	str	r2, [sp, #96]	@ 0x60
 800dfc0:	e776      	b.n	800deb0 <_dtoa_r+0x100>
 800dfc2:	2320      	movs	r3, #32
 800dfc4:	0020      	movs	r0, r4
 800dfc6:	1a9b      	subs	r3, r3, r2
 800dfc8:	4098      	lsls	r0, r3
 800dfca:	e7f2      	b.n	800dfb2 <_dtoa_r+0x202>
 800dfcc:	9015      	str	r0, [sp, #84]	@ 0x54
 800dfce:	e7ba      	b.n	800df46 <_dtoa_r+0x196>
 800dfd0:	920d      	str	r2, [sp, #52]	@ 0x34
 800dfd2:	e7c3      	b.n	800df5c <_dtoa_r+0x1ac>
 800dfd4:	9b06      	ldr	r3, [sp, #24]
 800dfd6:	9a04      	ldr	r2, [sp, #16]
 800dfd8:	1a9b      	subs	r3, r3, r2
 800dfda:	9306      	str	r3, [sp, #24]
 800dfdc:	4253      	negs	r3, r2
 800dfde:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	9314      	str	r3, [sp, #80]	@ 0x50
 800dfe4:	e7c5      	b.n	800df72 <_dtoa_r+0x1c2>
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	9310      	str	r3, [sp, #64]	@ 0x40
 800dfea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dfec:	930e      	str	r3, [sp, #56]	@ 0x38
 800dfee:	9309      	str	r3, [sp, #36]	@ 0x24
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	dc13      	bgt.n	800e01c <_dtoa_r+0x26c>
 800dff4:	2301      	movs	r3, #1
 800dff6:	001a      	movs	r2, r3
 800dff8:	930e      	str	r3, [sp, #56]	@ 0x38
 800dffa:	9309      	str	r3, [sp, #36]	@ 0x24
 800dffc:	9223      	str	r2, [sp, #140]	@ 0x8c
 800dffe:	e00d      	b.n	800e01c <_dtoa_r+0x26c>
 800e000:	2301      	movs	r3, #1
 800e002:	e7f1      	b.n	800dfe8 <_dtoa_r+0x238>
 800e004:	2300      	movs	r3, #0
 800e006:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e008:	9310      	str	r3, [sp, #64]	@ 0x40
 800e00a:	4694      	mov	ip, r2
 800e00c:	9b04      	ldr	r3, [sp, #16]
 800e00e:	4463      	add	r3, ip
 800e010:	930e      	str	r3, [sp, #56]	@ 0x38
 800e012:	3301      	adds	r3, #1
 800e014:	9309      	str	r3, [sp, #36]	@ 0x24
 800e016:	2b00      	cmp	r3, #0
 800e018:	dc00      	bgt.n	800e01c <_dtoa_r+0x26c>
 800e01a:	2301      	movs	r3, #1
 800e01c:	9a03      	ldr	r2, [sp, #12]
 800e01e:	2100      	movs	r1, #0
 800e020:	69d0      	ldr	r0, [r2, #28]
 800e022:	2204      	movs	r2, #4
 800e024:	0015      	movs	r5, r2
 800e026:	3514      	adds	r5, #20
 800e028:	429d      	cmp	r5, r3
 800e02a:	d91b      	bls.n	800e064 <_dtoa_r+0x2b4>
 800e02c:	6041      	str	r1, [r0, #4]
 800e02e:	9803      	ldr	r0, [sp, #12]
 800e030:	f000 fcfc 	bl	800ea2c <_Balloc>
 800e034:	9008      	str	r0, [sp, #32]
 800e036:	2800      	cmp	r0, #0
 800e038:	d117      	bne.n	800e06a <_dtoa_r+0x2ba>
 800e03a:	21b0      	movs	r1, #176	@ 0xb0
 800e03c:	4b42      	ldr	r3, [pc, #264]	@ (800e148 <_dtoa_r+0x398>)
 800e03e:	482e      	ldr	r0, [pc, #184]	@ (800e0f8 <_dtoa_r+0x348>)
 800e040:	9a08      	ldr	r2, [sp, #32]
 800e042:	31ff      	adds	r1, #255	@ 0xff
 800e044:	e6c9      	b.n	800ddda <_dtoa_r+0x2a>
 800e046:	2301      	movs	r3, #1
 800e048:	e7dd      	b.n	800e006 <_dtoa_r+0x256>
 800e04a:	2300      	movs	r3, #0
 800e04c:	9410      	str	r4, [sp, #64]	@ 0x40
 800e04e:	9322      	str	r3, [sp, #136]	@ 0x88
 800e050:	3b01      	subs	r3, #1
 800e052:	930e      	str	r3, [sp, #56]	@ 0x38
 800e054:	9309      	str	r3, [sp, #36]	@ 0x24
 800e056:	2200      	movs	r2, #0
 800e058:	3313      	adds	r3, #19
 800e05a:	e7cf      	b.n	800dffc <_dtoa_r+0x24c>
 800e05c:	2301      	movs	r3, #1
 800e05e:	9310      	str	r3, [sp, #64]	@ 0x40
 800e060:	3b02      	subs	r3, #2
 800e062:	e7f6      	b.n	800e052 <_dtoa_r+0x2a2>
 800e064:	3101      	adds	r1, #1
 800e066:	0052      	lsls	r2, r2, #1
 800e068:	e7dc      	b.n	800e024 <_dtoa_r+0x274>
 800e06a:	9b03      	ldr	r3, [sp, #12]
 800e06c:	9a08      	ldr	r2, [sp, #32]
 800e06e:	69db      	ldr	r3, [r3, #28]
 800e070:	601a      	str	r2, [r3, #0]
 800e072:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e074:	2b0e      	cmp	r3, #14
 800e076:	d900      	bls.n	800e07a <_dtoa_r+0x2ca>
 800e078:	e0d9      	b.n	800e22e <_dtoa_r+0x47e>
 800e07a:	2c00      	cmp	r4, #0
 800e07c:	d100      	bne.n	800e080 <_dtoa_r+0x2d0>
 800e07e:	e0d6      	b.n	800e22e <_dtoa_r+0x47e>
 800e080:	9b04      	ldr	r3, [sp, #16]
 800e082:	2b00      	cmp	r3, #0
 800e084:	dd64      	ble.n	800e150 <_dtoa_r+0x3a0>
 800e086:	210f      	movs	r1, #15
 800e088:	9a04      	ldr	r2, [sp, #16]
 800e08a:	4b2b      	ldr	r3, [pc, #172]	@ (800e138 <_dtoa_r+0x388>)
 800e08c:	400a      	ands	r2, r1
 800e08e:	00d2      	lsls	r2, r2, #3
 800e090:	189b      	adds	r3, r3, r2
 800e092:	681e      	ldr	r6, [r3, #0]
 800e094:	685f      	ldr	r7, [r3, #4]
 800e096:	9b04      	ldr	r3, [sp, #16]
 800e098:	2402      	movs	r4, #2
 800e09a:	111d      	asrs	r5, r3, #4
 800e09c:	05db      	lsls	r3, r3, #23
 800e09e:	d50a      	bpl.n	800e0b6 <_dtoa_r+0x306>
 800e0a0:	4b2a      	ldr	r3, [pc, #168]	@ (800e14c <_dtoa_r+0x39c>)
 800e0a2:	400d      	ands	r5, r1
 800e0a4:	6a1a      	ldr	r2, [r3, #32]
 800e0a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0a8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800e0aa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800e0ac:	f7f2 fe88 	bl	8000dc0 <__aeabi_ddiv>
 800e0b0:	900a      	str	r0, [sp, #40]	@ 0x28
 800e0b2:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e0b4:	3401      	adds	r4, #1
 800e0b6:	4b25      	ldr	r3, [pc, #148]	@ (800e14c <_dtoa_r+0x39c>)
 800e0b8:	930c      	str	r3, [sp, #48]	@ 0x30
 800e0ba:	2d00      	cmp	r5, #0
 800e0bc:	d108      	bne.n	800e0d0 <_dtoa_r+0x320>
 800e0be:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e0c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e0c2:	0032      	movs	r2, r6
 800e0c4:	003b      	movs	r3, r7
 800e0c6:	f7f2 fe7b 	bl	8000dc0 <__aeabi_ddiv>
 800e0ca:	900a      	str	r0, [sp, #40]	@ 0x28
 800e0cc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e0ce:	e05a      	b.n	800e186 <_dtoa_r+0x3d6>
 800e0d0:	2301      	movs	r3, #1
 800e0d2:	421d      	tst	r5, r3
 800e0d4:	d009      	beq.n	800e0ea <_dtoa_r+0x33a>
 800e0d6:	18e4      	adds	r4, r4, r3
 800e0d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e0da:	0030      	movs	r0, r6
 800e0dc:	681a      	ldr	r2, [r3, #0]
 800e0de:	685b      	ldr	r3, [r3, #4]
 800e0e0:	0039      	movs	r1, r7
 800e0e2:	f7f3 fab1 	bl	8001648 <__aeabi_dmul>
 800e0e6:	0006      	movs	r6, r0
 800e0e8:	000f      	movs	r7, r1
 800e0ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e0ec:	106d      	asrs	r5, r5, #1
 800e0ee:	3308      	adds	r3, #8
 800e0f0:	e7e2      	b.n	800e0b8 <_dtoa_r+0x308>
 800e0f2:	46c0      	nop			@ (mov r8, r8)
 800e0f4:	0801b409 	.word	0x0801b409
 800e0f8:	0801b420 	.word	0x0801b420
 800e0fc:	7ff00000 	.word	0x7ff00000
 800e100:	0000270f 	.word	0x0000270f
 800e104:	0801b405 	.word	0x0801b405
 800e108:	0801b408 	.word	0x0801b408
 800e10c:	0801b3d9 	.word	0x0801b3d9
 800e110:	0801b3d8 	.word	0x0801b3d8
 800e114:	3ff00000 	.word	0x3ff00000
 800e118:	fffffc01 	.word	0xfffffc01
 800e11c:	3ff80000 	.word	0x3ff80000
 800e120:	636f4361 	.word	0x636f4361
 800e124:	3fd287a7 	.word	0x3fd287a7
 800e128:	8b60c8b3 	.word	0x8b60c8b3
 800e12c:	3fc68a28 	.word	0x3fc68a28
 800e130:	509f79fb 	.word	0x509f79fb
 800e134:	3fd34413 	.word	0x3fd34413
 800e138:	0801b518 	.word	0x0801b518
 800e13c:	00000432 	.word	0x00000432
 800e140:	00000412 	.word	0x00000412
 800e144:	fe100000 	.word	0xfe100000
 800e148:	0801b478 	.word	0x0801b478
 800e14c:	0801b4f0 	.word	0x0801b4f0
 800e150:	9b04      	ldr	r3, [sp, #16]
 800e152:	2402      	movs	r4, #2
 800e154:	2b00      	cmp	r3, #0
 800e156:	d016      	beq.n	800e186 <_dtoa_r+0x3d6>
 800e158:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800e15a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800e15c:	220f      	movs	r2, #15
 800e15e:	425d      	negs	r5, r3
 800e160:	402a      	ands	r2, r5
 800e162:	4bd7      	ldr	r3, [pc, #860]	@ (800e4c0 <_dtoa_r+0x710>)
 800e164:	00d2      	lsls	r2, r2, #3
 800e166:	189b      	adds	r3, r3, r2
 800e168:	681a      	ldr	r2, [r3, #0]
 800e16a:	685b      	ldr	r3, [r3, #4]
 800e16c:	f7f3 fa6c 	bl	8001648 <__aeabi_dmul>
 800e170:	2701      	movs	r7, #1
 800e172:	2300      	movs	r3, #0
 800e174:	900a      	str	r0, [sp, #40]	@ 0x28
 800e176:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e178:	4ed2      	ldr	r6, [pc, #840]	@ (800e4c4 <_dtoa_r+0x714>)
 800e17a:	112d      	asrs	r5, r5, #4
 800e17c:	2d00      	cmp	r5, #0
 800e17e:	d000      	beq.n	800e182 <_dtoa_r+0x3d2>
 800e180:	e0ba      	b.n	800e2f8 <_dtoa_r+0x548>
 800e182:	2b00      	cmp	r3, #0
 800e184:	d1a1      	bne.n	800e0ca <_dtoa_r+0x31a>
 800e186:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e188:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800e18a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d100      	bne.n	800e192 <_dtoa_r+0x3e2>
 800e190:	e0bd      	b.n	800e30e <_dtoa_r+0x55e>
 800e192:	2200      	movs	r2, #0
 800e194:	0030      	movs	r0, r6
 800e196:	0039      	movs	r1, r7
 800e198:	4bcb      	ldr	r3, [pc, #812]	@ (800e4c8 <_dtoa_r+0x718>)
 800e19a:	f7f2 f95d 	bl	8000458 <__aeabi_dcmplt>
 800e19e:	2800      	cmp	r0, #0
 800e1a0:	d100      	bne.n	800e1a4 <_dtoa_r+0x3f4>
 800e1a2:	e0b4      	b.n	800e30e <_dtoa_r+0x55e>
 800e1a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d100      	bne.n	800e1ac <_dtoa_r+0x3fc>
 800e1aa:	e0b0      	b.n	800e30e <_dtoa_r+0x55e>
 800e1ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	dd39      	ble.n	800e226 <_dtoa_r+0x476>
 800e1b2:	9b04      	ldr	r3, [sp, #16]
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	3b01      	subs	r3, #1
 800e1b8:	930c      	str	r3, [sp, #48]	@ 0x30
 800e1ba:	0030      	movs	r0, r6
 800e1bc:	4bc3      	ldr	r3, [pc, #780]	@ (800e4cc <_dtoa_r+0x71c>)
 800e1be:	0039      	movs	r1, r7
 800e1c0:	f7f3 fa42 	bl	8001648 <__aeabi_dmul>
 800e1c4:	900a      	str	r0, [sp, #40]	@ 0x28
 800e1c6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e1c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1ca:	3401      	adds	r4, #1
 800e1cc:	0020      	movs	r0, r4
 800e1ce:	9311      	str	r3, [sp, #68]	@ 0x44
 800e1d0:	f7f4 f8fc 	bl	80023cc <__aeabi_i2d>
 800e1d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e1d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e1d8:	f7f3 fa36 	bl	8001648 <__aeabi_dmul>
 800e1dc:	4bbc      	ldr	r3, [pc, #752]	@ (800e4d0 <_dtoa_r+0x720>)
 800e1de:	2200      	movs	r2, #0
 800e1e0:	f7f2 fa8a 	bl	80006f8 <__aeabi_dadd>
 800e1e4:	4bbb      	ldr	r3, [pc, #748]	@ (800e4d4 <_dtoa_r+0x724>)
 800e1e6:	0006      	movs	r6, r0
 800e1e8:	18cf      	adds	r7, r1, r3
 800e1ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d000      	beq.n	800e1f2 <_dtoa_r+0x442>
 800e1f0:	e091      	b.n	800e316 <_dtoa_r+0x566>
 800e1f2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e1f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	4bb7      	ldr	r3, [pc, #732]	@ (800e4d8 <_dtoa_r+0x728>)
 800e1fa:	f7f3 fced 	bl	8001bd8 <__aeabi_dsub>
 800e1fe:	0032      	movs	r2, r6
 800e200:	003b      	movs	r3, r7
 800e202:	0004      	movs	r4, r0
 800e204:	000d      	movs	r5, r1
 800e206:	f7f2 f93b 	bl	8000480 <__aeabi_dcmpgt>
 800e20a:	2800      	cmp	r0, #0
 800e20c:	d000      	beq.n	800e210 <_dtoa_r+0x460>
 800e20e:	e29d      	b.n	800e74c <_dtoa_r+0x99c>
 800e210:	2180      	movs	r1, #128	@ 0x80
 800e212:	0609      	lsls	r1, r1, #24
 800e214:	187b      	adds	r3, r7, r1
 800e216:	0032      	movs	r2, r6
 800e218:	0020      	movs	r0, r4
 800e21a:	0029      	movs	r1, r5
 800e21c:	f7f2 f91c 	bl	8000458 <__aeabi_dcmplt>
 800e220:	2800      	cmp	r0, #0
 800e222:	d000      	beq.n	800e226 <_dtoa_r+0x476>
 800e224:	e130      	b.n	800e488 <_dtoa_r+0x6d8>
 800e226:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e228:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800e22a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e22c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e22e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e230:	2b00      	cmp	r3, #0
 800e232:	da00      	bge.n	800e236 <_dtoa_r+0x486>
 800e234:	e177      	b.n	800e526 <_dtoa_r+0x776>
 800e236:	9a04      	ldr	r2, [sp, #16]
 800e238:	2a0e      	cmp	r2, #14
 800e23a:	dd00      	ble.n	800e23e <_dtoa_r+0x48e>
 800e23c:	e173      	b.n	800e526 <_dtoa_r+0x776>
 800e23e:	4ba0      	ldr	r3, [pc, #640]	@ (800e4c0 <_dtoa_r+0x710>)
 800e240:	00d2      	lsls	r2, r2, #3
 800e242:	189b      	adds	r3, r3, r2
 800e244:	685c      	ldr	r4, [r3, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	9306      	str	r3, [sp, #24]
 800e24a:	9407      	str	r4, [sp, #28]
 800e24c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e24e:	2b00      	cmp	r3, #0
 800e250:	da03      	bge.n	800e25a <_dtoa_r+0x4aa>
 800e252:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e254:	2b00      	cmp	r3, #0
 800e256:	dc00      	bgt.n	800e25a <_dtoa_r+0x4aa>
 800e258:	e106      	b.n	800e468 <_dtoa_r+0x6b8>
 800e25a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e25c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800e25e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e260:	9d08      	ldr	r5, [sp, #32]
 800e262:	3b01      	subs	r3, #1
 800e264:	195b      	adds	r3, r3, r5
 800e266:	930a      	str	r3, [sp, #40]	@ 0x28
 800e268:	9a06      	ldr	r2, [sp, #24]
 800e26a:	9b07      	ldr	r3, [sp, #28]
 800e26c:	0030      	movs	r0, r6
 800e26e:	0039      	movs	r1, r7
 800e270:	f7f2 fda6 	bl	8000dc0 <__aeabi_ddiv>
 800e274:	f7f4 f86e 	bl	8002354 <__aeabi_d2iz>
 800e278:	9009      	str	r0, [sp, #36]	@ 0x24
 800e27a:	f7f4 f8a7 	bl	80023cc <__aeabi_i2d>
 800e27e:	9a06      	ldr	r2, [sp, #24]
 800e280:	9b07      	ldr	r3, [sp, #28]
 800e282:	f7f3 f9e1 	bl	8001648 <__aeabi_dmul>
 800e286:	0002      	movs	r2, r0
 800e288:	000b      	movs	r3, r1
 800e28a:	0030      	movs	r0, r6
 800e28c:	0039      	movs	r1, r7
 800e28e:	f7f3 fca3 	bl	8001bd8 <__aeabi_dsub>
 800e292:	002b      	movs	r3, r5
 800e294:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e296:	3501      	adds	r5, #1
 800e298:	3230      	adds	r2, #48	@ 0x30
 800e29a:	701a      	strb	r2, [r3, #0]
 800e29c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e29e:	002c      	movs	r4, r5
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	d000      	beq.n	800e2a6 <_dtoa_r+0x4f6>
 800e2a4:	e131      	b.n	800e50a <_dtoa_r+0x75a>
 800e2a6:	0002      	movs	r2, r0
 800e2a8:	000b      	movs	r3, r1
 800e2aa:	f7f2 fa25 	bl	80006f8 <__aeabi_dadd>
 800e2ae:	9a06      	ldr	r2, [sp, #24]
 800e2b0:	9b07      	ldr	r3, [sp, #28]
 800e2b2:	0006      	movs	r6, r0
 800e2b4:	000f      	movs	r7, r1
 800e2b6:	f7f2 f8e3 	bl	8000480 <__aeabi_dcmpgt>
 800e2ba:	2800      	cmp	r0, #0
 800e2bc:	d000      	beq.n	800e2c0 <_dtoa_r+0x510>
 800e2be:	e10f      	b.n	800e4e0 <_dtoa_r+0x730>
 800e2c0:	9a06      	ldr	r2, [sp, #24]
 800e2c2:	9b07      	ldr	r3, [sp, #28]
 800e2c4:	0030      	movs	r0, r6
 800e2c6:	0039      	movs	r1, r7
 800e2c8:	f7f2 f8c0 	bl	800044c <__aeabi_dcmpeq>
 800e2cc:	2800      	cmp	r0, #0
 800e2ce:	d003      	beq.n	800e2d8 <_dtoa_r+0x528>
 800e2d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2d2:	07dd      	lsls	r5, r3, #31
 800e2d4:	d500      	bpl.n	800e2d8 <_dtoa_r+0x528>
 800e2d6:	e103      	b.n	800e4e0 <_dtoa_r+0x730>
 800e2d8:	9905      	ldr	r1, [sp, #20]
 800e2da:	9803      	ldr	r0, [sp, #12]
 800e2dc:	f000 fbea 	bl	800eab4 <_Bfree>
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	7023      	strb	r3, [r4, #0]
 800e2e4:	9b04      	ldr	r3, [sp, #16]
 800e2e6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800e2e8:	3301      	adds	r3, #1
 800e2ea:	6013      	str	r3, [r2, #0]
 800e2ec:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d100      	bne.n	800e2f4 <_dtoa_r+0x544>
 800e2f2:	e5a7      	b.n	800de44 <_dtoa_r+0x94>
 800e2f4:	601c      	str	r4, [r3, #0]
 800e2f6:	e5a5      	b.n	800de44 <_dtoa_r+0x94>
 800e2f8:	423d      	tst	r5, r7
 800e2fa:	d005      	beq.n	800e308 <_dtoa_r+0x558>
 800e2fc:	6832      	ldr	r2, [r6, #0]
 800e2fe:	6873      	ldr	r3, [r6, #4]
 800e300:	f7f3 f9a2 	bl	8001648 <__aeabi_dmul>
 800e304:	003b      	movs	r3, r7
 800e306:	3401      	adds	r4, #1
 800e308:	106d      	asrs	r5, r5, #1
 800e30a:	3608      	adds	r6, #8
 800e30c:	e736      	b.n	800e17c <_dtoa_r+0x3cc>
 800e30e:	9b04      	ldr	r3, [sp, #16]
 800e310:	930c      	str	r3, [sp, #48]	@ 0x30
 800e312:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e314:	e75a      	b.n	800e1cc <_dtoa_r+0x41c>
 800e316:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e318:	4b69      	ldr	r3, [pc, #420]	@ (800e4c0 <_dtoa_r+0x710>)
 800e31a:	3a01      	subs	r2, #1
 800e31c:	00d2      	lsls	r2, r2, #3
 800e31e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800e320:	189b      	adds	r3, r3, r2
 800e322:	681a      	ldr	r2, [r3, #0]
 800e324:	685b      	ldr	r3, [r3, #4]
 800e326:	2900      	cmp	r1, #0
 800e328:	d04c      	beq.n	800e3c4 <_dtoa_r+0x614>
 800e32a:	2000      	movs	r0, #0
 800e32c:	496b      	ldr	r1, [pc, #428]	@ (800e4dc <_dtoa_r+0x72c>)
 800e32e:	f7f2 fd47 	bl	8000dc0 <__aeabi_ddiv>
 800e332:	0032      	movs	r2, r6
 800e334:	003b      	movs	r3, r7
 800e336:	f7f3 fc4f 	bl	8001bd8 <__aeabi_dsub>
 800e33a:	9a08      	ldr	r2, [sp, #32]
 800e33c:	0006      	movs	r6, r0
 800e33e:	4694      	mov	ip, r2
 800e340:	000f      	movs	r7, r1
 800e342:	9b08      	ldr	r3, [sp, #32]
 800e344:	9316      	str	r3, [sp, #88]	@ 0x58
 800e346:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e348:	4463      	add	r3, ip
 800e34a:	9311      	str	r3, [sp, #68]	@ 0x44
 800e34c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e34e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e350:	f7f4 f800 	bl	8002354 <__aeabi_d2iz>
 800e354:	0005      	movs	r5, r0
 800e356:	f7f4 f839 	bl	80023cc <__aeabi_i2d>
 800e35a:	0002      	movs	r2, r0
 800e35c:	000b      	movs	r3, r1
 800e35e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e360:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e362:	f7f3 fc39 	bl	8001bd8 <__aeabi_dsub>
 800e366:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e368:	3530      	adds	r5, #48	@ 0x30
 800e36a:	1c5c      	adds	r4, r3, #1
 800e36c:	701d      	strb	r5, [r3, #0]
 800e36e:	0032      	movs	r2, r6
 800e370:	003b      	movs	r3, r7
 800e372:	900a      	str	r0, [sp, #40]	@ 0x28
 800e374:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e376:	f7f2 f86f 	bl	8000458 <__aeabi_dcmplt>
 800e37a:	2800      	cmp	r0, #0
 800e37c:	d16a      	bne.n	800e454 <_dtoa_r+0x6a4>
 800e37e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e380:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e382:	2000      	movs	r0, #0
 800e384:	4950      	ldr	r1, [pc, #320]	@ (800e4c8 <_dtoa_r+0x718>)
 800e386:	f7f3 fc27 	bl	8001bd8 <__aeabi_dsub>
 800e38a:	0032      	movs	r2, r6
 800e38c:	003b      	movs	r3, r7
 800e38e:	f7f2 f863 	bl	8000458 <__aeabi_dcmplt>
 800e392:	2800      	cmp	r0, #0
 800e394:	d000      	beq.n	800e398 <_dtoa_r+0x5e8>
 800e396:	e0a5      	b.n	800e4e4 <_dtoa_r+0x734>
 800e398:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e39a:	42a3      	cmp	r3, r4
 800e39c:	d100      	bne.n	800e3a0 <_dtoa_r+0x5f0>
 800e39e:	e742      	b.n	800e226 <_dtoa_r+0x476>
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	0030      	movs	r0, r6
 800e3a4:	0039      	movs	r1, r7
 800e3a6:	4b49      	ldr	r3, [pc, #292]	@ (800e4cc <_dtoa_r+0x71c>)
 800e3a8:	f7f3 f94e 	bl	8001648 <__aeabi_dmul>
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	0006      	movs	r6, r0
 800e3b0:	000f      	movs	r7, r1
 800e3b2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e3b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e3b6:	4b45      	ldr	r3, [pc, #276]	@ (800e4cc <_dtoa_r+0x71c>)
 800e3b8:	f7f3 f946 	bl	8001648 <__aeabi_dmul>
 800e3bc:	9416      	str	r4, [sp, #88]	@ 0x58
 800e3be:	900a      	str	r0, [sp, #40]	@ 0x28
 800e3c0:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e3c2:	e7c3      	b.n	800e34c <_dtoa_r+0x59c>
 800e3c4:	0030      	movs	r0, r6
 800e3c6:	0039      	movs	r1, r7
 800e3c8:	f7f3 f93e 	bl	8001648 <__aeabi_dmul>
 800e3cc:	9d08      	ldr	r5, [sp, #32]
 800e3ce:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e3d0:	002b      	movs	r3, r5
 800e3d2:	4694      	mov	ip, r2
 800e3d4:	9016      	str	r0, [sp, #88]	@ 0x58
 800e3d6:	9117      	str	r1, [sp, #92]	@ 0x5c
 800e3d8:	4463      	add	r3, ip
 800e3da:	9319      	str	r3, [sp, #100]	@ 0x64
 800e3dc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e3de:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e3e0:	f7f3 ffb8 	bl	8002354 <__aeabi_d2iz>
 800e3e4:	0004      	movs	r4, r0
 800e3e6:	f7f3 fff1 	bl	80023cc <__aeabi_i2d>
 800e3ea:	000b      	movs	r3, r1
 800e3ec:	0002      	movs	r2, r0
 800e3ee:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e3f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e3f2:	f7f3 fbf1 	bl	8001bd8 <__aeabi_dsub>
 800e3f6:	3430      	adds	r4, #48	@ 0x30
 800e3f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e3fa:	702c      	strb	r4, [r5, #0]
 800e3fc:	3501      	adds	r5, #1
 800e3fe:	0006      	movs	r6, r0
 800e400:	000f      	movs	r7, r1
 800e402:	42ab      	cmp	r3, r5
 800e404:	d129      	bne.n	800e45a <_dtoa_r+0x6aa>
 800e406:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800e408:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800e40a:	9b08      	ldr	r3, [sp, #32]
 800e40c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800e40e:	469c      	mov	ip, r3
 800e410:	2200      	movs	r2, #0
 800e412:	4b32      	ldr	r3, [pc, #200]	@ (800e4dc <_dtoa_r+0x72c>)
 800e414:	4464      	add	r4, ip
 800e416:	f7f2 f96f 	bl	80006f8 <__aeabi_dadd>
 800e41a:	0002      	movs	r2, r0
 800e41c:	000b      	movs	r3, r1
 800e41e:	0030      	movs	r0, r6
 800e420:	0039      	movs	r1, r7
 800e422:	f7f2 f82d 	bl	8000480 <__aeabi_dcmpgt>
 800e426:	2800      	cmp	r0, #0
 800e428:	d15c      	bne.n	800e4e4 <_dtoa_r+0x734>
 800e42a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e42c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e42e:	2000      	movs	r0, #0
 800e430:	492a      	ldr	r1, [pc, #168]	@ (800e4dc <_dtoa_r+0x72c>)
 800e432:	f7f3 fbd1 	bl	8001bd8 <__aeabi_dsub>
 800e436:	0002      	movs	r2, r0
 800e438:	000b      	movs	r3, r1
 800e43a:	0030      	movs	r0, r6
 800e43c:	0039      	movs	r1, r7
 800e43e:	f7f2 f80b 	bl	8000458 <__aeabi_dcmplt>
 800e442:	2800      	cmp	r0, #0
 800e444:	d100      	bne.n	800e448 <_dtoa_r+0x698>
 800e446:	e6ee      	b.n	800e226 <_dtoa_r+0x476>
 800e448:	0023      	movs	r3, r4
 800e44a:	3c01      	subs	r4, #1
 800e44c:	7822      	ldrb	r2, [r4, #0]
 800e44e:	2a30      	cmp	r2, #48	@ 0x30
 800e450:	d0fa      	beq.n	800e448 <_dtoa_r+0x698>
 800e452:	001c      	movs	r4, r3
 800e454:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e456:	9304      	str	r3, [sp, #16]
 800e458:	e73e      	b.n	800e2d8 <_dtoa_r+0x528>
 800e45a:	2200      	movs	r2, #0
 800e45c:	4b1b      	ldr	r3, [pc, #108]	@ (800e4cc <_dtoa_r+0x71c>)
 800e45e:	f7f3 f8f3 	bl	8001648 <__aeabi_dmul>
 800e462:	900a      	str	r0, [sp, #40]	@ 0x28
 800e464:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e466:	e7b9      	b.n	800e3dc <_dtoa_r+0x62c>
 800e468:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d10c      	bne.n	800e488 <_dtoa_r+0x6d8>
 800e46e:	9806      	ldr	r0, [sp, #24]
 800e470:	9907      	ldr	r1, [sp, #28]
 800e472:	2200      	movs	r2, #0
 800e474:	4b18      	ldr	r3, [pc, #96]	@ (800e4d8 <_dtoa_r+0x728>)
 800e476:	f7f3 f8e7 	bl	8001648 <__aeabi_dmul>
 800e47a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e47c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e47e:	f7f2 f809 	bl	8000494 <__aeabi_dcmpge>
 800e482:	2800      	cmp	r0, #0
 800e484:	d100      	bne.n	800e488 <_dtoa_r+0x6d8>
 800e486:	e164      	b.n	800e752 <_dtoa_r+0x9a2>
 800e488:	2600      	movs	r6, #0
 800e48a:	0037      	movs	r7, r6
 800e48c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e48e:	9c08      	ldr	r4, [sp, #32]
 800e490:	43db      	mvns	r3, r3
 800e492:	930c      	str	r3, [sp, #48]	@ 0x30
 800e494:	2300      	movs	r3, #0
 800e496:	9304      	str	r3, [sp, #16]
 800e498:	0031      	movs	r1, r6
 800e49a:	9803      	ldr	r0, [sp, #12]
 800e49c:	f000 fb0a 	bl	800eab4 <_Bfree>
 800e4a0:	2f00      	cmp	r7, #0
 800e4a2:	d0d7      	beq.n	800e454 <_dtoa_r+0x6a4>
 800e4a4:	9b04      	ldr	r3, [sp, #16]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d005      	beq.n	800e4b6 <_dtoa_r+0x706>
 800e4aa:	42bb      	cmp	r3, r7
 800e4ac:	d003      	beq.n	800e4b6 <_dtoa_r+0x706>
 800e4ae:	0019      	movs	r1, r3
 800e4b0:	9803      	ldr	r0, [sp, #12]
 800e4b2:	f000 faff 	bl	800eab4 <_Bfree>
 800e4b6:	0039      	movs	r1, r7
 800e4b8:	9803      	ldr	r0, [sp, #12]
 800e4ba:	f000 fafb 	bl	800eab4 <_Bfree>
 800e4be:	e7c9      	b.n	800e454 <_dtoa_r+0x6a4>
 800e4c0:	0801b518 	.word	0x0801b518
 800e4c4:	0801b4f0 	.word	0x0801b4f0
 800e4c8:	3ff00000 	.word	0x3ff00000
 800e4cc:	40240000 	.word	0x40240000
 800e4d0:	401c0000 	.word	0x401c0000
 800e4d4:	fcc00000 	.word	0xfcc00000
 800e4d8:	40140000 	.word	0x40140000
 800e4dc:	3fe00000 	.word	0x3fe00000
 800e4e0:	9b04      	ldr	r3, [sp, #16]
 800e4e2:	930c      	str	r3, [sp, #48]	@ 0x30
 800e4e4:	0023      	movs	r3, r4
 800e4e6:	001c      	movs	r4, r3
 800e4e8:	3b01      	subs	r3, #1
 800e4ea:	781a      	ldrb	r2, [r3, #0]
 800e4ec:	2a39      	cmp	r2, #57	@ 0x39
 800e4ee:	d108      	bne.n	800e502 <_dtoa_r+0x752>
 800e4f0:	9a08      	ldr	r2, [sp, #32]
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d1f7      	bne.n	800e4e6 <_dtoa_r+0x736>
 800e4f6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e4f8:	9908      	ldr	r1, [sp, #32]
 800e4fa:	3201      	adds	r2, #1
 800e4fc:	920c      	str	r2, [sp, #48]	@ 0x30
 800e4fe:	2230      	movs	r2, #48	@ 0x30
 800e500:	700a      	strb	r2, [r1, #0]
 800e502:	781a      	ldrb	r2, [r3, #0]
 800e504:	3201      	adds	r2, #1
 800e506:	701a      	strb	r2, [r3, #0]
 800e508:	e7a4      	b.n	800e454 <_dtoa_r+0x6a4>
 800e50a:	2200      	movs	r2, #0
 800e50c:	4bc6      	ldr	r3, [pc, #792]	@ (800e828 <_dtoa_r+0xa78>)
 800e50e:	f7f3 f89b 	bl	8001648 <__aeabi_dmul>
 800e512:	2200      	movs	r2, #0
 800e514:	2300      	movs	r3, #0
 800e516:	0006      	movs	r6, r0
 800e518:	000f      	movs	r7, r1
 800e51a:	f7f1 ff97 	bl	800044c <__aeabi_dcmpeq>
 800e51e:	2800      	cmp	r0, #0
 800e520:	d100      	bne.n	800e524 <_dtoa_r+0x774>
 800e522:	e6a1      	b.n	800e268 <_dtoa_r+0x4b8>
 800e524:	e6d8      	b.n	800e2d8 <_dtoa_r+0x528>
 800e526:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800e528:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800e52a:	9c06      	ldr	r4, [sp, #24]
 800e52c:	2f00      	cmp	r7, #0
 800e52e:	d014      	beq.n	800e55a <_dtoa_r+0x7aa>
 800e530:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e532:	2a01      	cmp	r2, #1
 800e534:	dd00      	ble.n	800e538 <_dtoa_r+0x788>
 800e536:	e0c8      	b.n	800e6ca <_dtoa_r+0x91a>
 800e538:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800e53a:	2a00      	cmp	r2, #0
 800e53c:	d100      	bne.n	800e540 <_dtoa_r+0x790>
 800e53e:	e0be      	b.n	800e6be <_dtoa_r+0x90e>
 800e540:	4aba      	ldr	r2, [pc, #744]	@ (800e82c <_dtoa_r+0xa7c>)
 800e542:	189b      	adds	r3, r3, r2
 800e544:	9a06      	ldr	r2, [sp, #24]
 800e546:	2101      	movs	r1, #1
 800e548:	18d2      	adds	r2, r2, r3
 800e54a:	9206      	str	r2, [sp, #24]
 800e54c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e54e:	9803      	ldr	r0, [sp, #12]
 800e550:	18d3      	adds	r3, r2, r3
 800e552:	930d      	str	r3, [sp, #52]	@ 0x34
 800e554:	f000 fb66 	bl	800ec24 <__i2b>
 800e558:	0007      	movs	r7, r0
 800e55a:	2c00      	cmp	r4, #0
 800e55c:	d00e      	beq.n	800e57c <_dtoa_r+0x7cc>
 800e55e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e560:	2b00      	cmp	r3, #0
 800e562:	dd0b      	ble.n	800e57c <_dtoa_r+0x7cc>
 800e564:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e566:	0023      	movs	r3, r4
 800e568:	4294      	cmp	r4, r2
 800e56a:	dd00      	ble.n	800e56e <_dtoa_r+0x7be>
 800e56c:	0013      	movs	r3, r2
 800e56e:	9a06      	ldr	r2, [sp, #24]
 800e570:	1ae4      	subs	r4, r4, r3
 800e572:	1ad2      	subs	r2, r2, r3
 800e574:	9206      	str	r2, [sp, #24]
 800e576:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e578:	1ad3      	subs	r3, r2, r3
 800e57a:	930d      	str	r3, [sp, #52]	@ 0x34
 800e57c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d01f      	beq.n	800e5c2 <_dtoa_r+0x812>
 800e582:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e584:	2b00      	cmp	r3, #0
 800e586:	d100      	bne.n	800e58a <_dtoa_r+0x7da>
 800e588:	e0b5      	b.n	800e6f6 <_dtoa_r+0x946>
 800e58a:	2d00      	cmp	r5, #0
 800e58c:	d010      	beq.n	800e5b0 <_dtoa_r+0x800>
 800e58e:	0039      	movs	r1, r7
 800e590:	002a      	movs	r2, r5
 800e592:	9803      	ldr	r0, [sp, #12]
 800e594:	f000 fc10 	bl	800edb8 <__pow5mult>
 800e598:	9a05      	ldr	r2, [sp, #20]
 800e59a:	0001      	movs	r1, r0
 800e59c:	0007      	movs	r7, r0
 800e59e:	9803      	ldr	r0, [sp, #12]
 800e5a0:	f000 fb58 	bl	800ec54 <__multiply>
 800e5a4:	0006      	movs	r6, r0
 800e5a6:	9905      	ldr	r1, [sp, #20]
 800e5a8:	9803      	ldr	r0, [sp, #12]
 800e5aa:	f000 fa83 	bl	800eab4 <_Bfree>
 800e5ae:	9605      	str	r6, [sp, #20]
 800e5b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5b2:	1b5a      	subs	r2, r3, r5
 800e5b4:	42ab      	cmp	r3, r5
 800e5b6:	d004      	beq.n	800e5c2 <_dtoa_r+0x812>
 800e5b8:	9905      	ldr	r1, [sp, #20]
 800e5ba:	9803      	ldr	r0, [sp, #12]
 800e5bc:	f000 fbfc 	bl	800edb8 <__pow5mult>
 800e5c0:	9005      	str	r0, [sp, #20]
 800e5c2:	2101      	movs	r1, #1
 800e5c4:	9803      	ldr	r0, [sp, #12]
 800e5c6:	f000 fb2d 	bl	800ec24 <__i2b>
 800e5ca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e5cc:	0006      	movs	r6, r0
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d100      	bne.n	800e5d4 <_dtoa_r+0x824>
 800e5d2:	e1bc      	b.n	800e94e <_dtoa_r+0xb9e>
 800e5d4:	001a      	movs	r2, r3
 800e5d6:	0001      	movs	r1, r0
 800e5d8:	9803      	ldr	r0, [sp, #12]
 800e5da:	f000 fbed 	bl	800edb8 <__pow5mult>
 800e5de:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e5e0:	0006      	movs	r6, r0
 800e5e2:	2500      	movs	r5, #0
 800e5e4:	2b01      	cmp	r3, #1
 800e5e6:	dc16      	bgt.n	800e616 <_dtoa_r+0x866>
 800e5e8:	2500      	movs	r5, #0
 800e5ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5ec:	42ab      	cmp	r3, r5
 800e5ee:	d10e      	bne.n	800e60e <_dtoa_r+0x85e>
 800e5f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e5f2:	031b      	lsls	r3, r3, #12
 800e5f4:	42ab      	cmp	r3, r5
 800e5f6:	d10a      	bne.n	800e60e <_dtoa_r+0x85e>
 800e5f8:	4b8d      	ldr	r3, [pc, #564]	@ (800e830 <_dtoa_r+0xa80>)
 800e5fa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e5fc:	4213      	tst	r3, r2
 800e5fe:	d006      	beq.n	800e60e <_dtoa_r+0x85e>
 800e600:	9b06      	ldr	r3, [sp, #24]
 800e602:	3501      	adds	r5, #1
 800e604:	3301      	adds	r3, #1
 800e606:	9306      	str	r3, [sp, #24]
 800e608:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e60a:	3301      	adds	r3, #1
 800e60c:	930d      	str	r3, [sp, #52]	@ 0x34
 800e60e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e610:	2001      	movs	r0, #1
 800e612:	2b00      	cmp	r3, #0
 800e614:	d008      	beq.n	800e628 <_dtoa_r+0x878>
 800e616:	6933      	ldr	r3, [r6, #16]
 800e618:	3303      	adds	r3, #3
 800e61a:	009b      	lsls	r3, r3, #2
 800e61c:	18f3      	adds	r3, r6, r3
 800e61e:	6858      	ldr	r0, [r3, #4]
 800e620:	f000 fab0 	bl	800eb84 <__hi0bits>
 800e624:	2320      	movs	r3, #32
 800e626:	1a18      	subs	r0, r3, r0
 800e628:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e62a:	1818      	adds	r0, r3, r0
 800e62c:	0002      	movs	r2, r0
 800e62e:	231f      	movs	r3, #31
 800e630:	401a      	ands	r2, r3
 800e632:	4218      	tst	r0, r3
 800e634:	d065      	beq.n	800e702 <_dtoa_r+0x952>
 800e636:	3301      	adds	r3, #1
 800e638:	1a9b      	subs	r3, r3, r2
 800e63a:	2b04      	cmp	r3, #4
 800e63c:	dd5d      	ble.n	800e6fa <_dtoa_r+0x94a>
 800e63e:	231c      	movs	r3, #28
 800e640:	1a9b      	subs	r3, r3, r2
 800e642:	9a06      	ldr	r2, [sp, #24]
 800e644:	18e4      	adds	r4, r4, r3
 800e646:	18d2      	adds	r2, r2, r3
 800e648:	9206      	str	r2, [sp, #24]
 800e64a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e64c:	18d3      	adds	r3, r2, r3
 800e64e:	930d      	str	r3, [sp, #52]	@ 0x34
 800e650:	9b06      	ldr	r3, [sp, #24]
 800e652:	2b00      	cmp	r3, #0
 800e654:	dd05      	ble.n	800e662 <_dtoa_r+0x8b2>
 800e656:	001a      	movs	r2, r3
 800e658:	9905      	ldr	r1, [sp, #20]
 800e65a:	9803      	ldr	r0, [sp, #12]
 800e65c:	f000 fc08 	bl	800ee70 <__lshift>
 800e660:	9005      	str	r0, [sp, #20]
 800e662:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e664:	2b00      	cmp	r3, #0
 800e666:	dd05      	ble.n	800e674 <_dtoa_r+0x8c4>
 800e668:	0031      	movs	r1, r6
 800e66a:	001a      	movs	r2, r3
 800e66c:	9803      	ldr	r0, [sp, #12]
 800e66e:	f000 fbff 	bl	800ee70 <__lshift>
 800e672:	0006      	movs	r6, r0
 800e674:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e676:	2b00      	cmp	r3, #0
 800e678:	d045      	beq.n	800e706 <_dtoa_r+0x956>
 800e67a:	0031      	movs	r1, r6
 800e67c:	9805      	ldr	r0, [sp, #20]
 800e67e:	f000 fc63 	bl	800ef48 <__mcmp>
 800e682:	2800      	cmp	r0, #0
 800e684:	da3f      	bge.n	800e706 <_dtoa_r+0x956>
 800e686:	9b04      	ldr	r3, [sp, #16]
 800e688:	220a      	movs	r2, #10
 800e68a:	3b01      	subs	r3, #1
 800e68c:	930c      	str	r3, [sp, #48]	@ 0x30
 800e68e:	9905      	ldr	r1, [sp, #20]
 800e690:	2300      	movs	r3, #0
 800e692:	9803      	ldr	r0, [sp, #12]
 800e694:	f000 fa32 	bl	800eafc <__multadd>
 800e698:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e69a:	9005      	str	r0, [sp, #20]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d100      	bne.n	800e6a2 <_dtoa_r+0x8f2>
 800e6a0:	e15c      	b.n	800e95c <_dtoa_r+0xbac>
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	0039      	movs	r1, r7
 800e6a6:	220a      	movs	r2, #10
 800e6a8:	9803      	ldr	r0, [sp, #12]
 800e6aa:	f000 fa27 	bl	800eafc <__multadd>
 800e6ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e6b0:	0007      	movs	r7, r0
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	dc55      	bgt.n	800e762 <_dtoa_r+0x9b2>
 800e6b6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e6b8:	2b02      	cmp	r3, #2
 800e6ba:	dc2d      	bgt.n	800e718 <_dtoa_r+0x968>
 800e6bc:	e051      	b.n	800e762 <_dtoa_r+0x9b2>
 800e6be:	2336      	movs	r3, #54	@ 0x36
 800e6c0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e6c2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800e6c4:	9c06      	ldr	r4, [sp, #24]
 800e6c6:	1a9b      	subs	r3, r3, r2
 800e6c8:	e73c      	b.n	800e544 <_dtoa_r+0x794>
 800e6ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6cc:	1e5d      	subs	r5, r3, #1
 800e6ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e6d0:	42ab      	cmp	r3, r5
 800e6d2:	db08      	blt.n	800e6e6 <_dtoa_r+0x936>
 800e6d4:	1b5d      	subs	r5, r3, r5
 800e6d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6d8:	9c06      	ldr	r4, [sp, #24]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	db00      	blt.n	800e6e0 <_dtoa_r+0x930>
 800e6de:	e731      	b.n	800e544 <_dtoa_r+0x794>
 800e6e0:	1ae4      	subs	r4, r4, r3
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	e72e      	b.n	800e544 <_dtoa_r+0x794>
 800e6e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e6e8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e6ea:	1aeb      	subs	r3, r5, r3
 800e6ec:	18d3      	adds	r3, r2, r3
 800e6ee:	950f      	str	r5, [sp, #60]	@ 0x3c
 800e6f0:	9314      	str	r3, [sp, #80]	@ 0x50
 800e6f2:	2500      	movs	r5, #0
 800e6f4:	e7ef      	b.n	800e6d6 <_dtoa_r+0x926>
 800e6f6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e6f8:	e75e      	b.n	800e5b8 <_dtoa_r+0x808>
 800e6fa:	2b04      	cmp	r3, #4
 800e6fc:	d0a8      	beq.n	800e650 <_dtoa_r+0x8a0>
 800e6fe:	331c      	adds	r3, #28
 800e700:	e79f      	b.n	800e642 <_dtoa_r+0x892>
 800e702:	0013      	movs	r3, r2
 800e704:	e7fb      	b.n	800e6fe <_dtoa_r+0x94e>
 800e706:	9b04      	ldr	r3, [sp, #16]
 800e708:	930c      	str	r3, [sp, #48]	@ 0x30
 800e70a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e70c:	930e      	str	r3, [sp, #56]	@ 0x38
 800e70e:	2b00      	cmp	r3, #0
 800e710:	dc23      	bgt.n	800e75a <_dtoa_r+0x9aa>
 800e712:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e714:	2b02      	cmp	r3, #2
 800e716:	dd20      	ble.n	800e75a <_dtoa_r+0x9aa>
 800e718:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d000      	beq.n	800e720 <_dtoa_r+0x970>
 800e71e:	e6b5      	b.n	800e48c <_dtoa_r+0x6dc>
 800e720:	0031      	movs	r1, r6
 800e722:	2205      	movs	r2, #5
 800e724:	9803      	ldr	r0, [sp, #12]
 800e726:	f000 f9e9 	bl	800eafc <__multadd>
 800e72a:	0006      	movs	r6, r0
 800e72c:	0001      	movs	r1, r0
 800e72e:	9805      	ldr	r0, [sp, #20]
 800e730:	f000 fc0a 	bl	800ef48 <__mcmp>
 800e734:	2800      	cmp	r0, #0
 800e736:	dc00      	bgt.n	800e73a <_dtoa_r+0x98a>
 800e738:	e6a8      	b.n	800e48c <_dtoa_r+0x6dc>
 800e73a:	9b08      	ldr	r3, [sp, #32]
 800e73c:	9a08      	ldr	r2, [sp, #32]
 800e73e:	1c5c      	adds	r4, r3, #1
 800e740:	2331      	movs	r3, #49	@ 0x31
 800e742:	7013      	strb	r3, [r2, #0]
 800e744:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e746:	3301      	adds	r3, #1
 800e748:	930c      	str	r3, [sp, #48]	@ 0x30
 800e74a:	e6a3      	b.n	800e494 <_dtoa_r+0x6e4>
 800e74c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800e74e:	0037      	movs	r7, r6
 800e750:	e7f3      	b.n	800e73a <_dtoa_r+0x98a>
 800e752:	9b04      	ldr	r3, [sp, #16]
 800e754:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800e756:	930c      	str	r3, [sp, #48]	@ 0x30
 800e758:	e7f9      	b.n	800e74e <_dtoa_r+0x99e>
 800e75a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d100      	bne.n	800e762 <_dtoa_r+0x9b2>
 800e760:	e100      	b.n	800e964 <_dtoa_r+0xbb4>
 800e762:	2c00      	cmp	r4, #0
 800e764:	dd05      	ble.n	800e772 <_dtoa_r+0x9c2>
 800e766:	0039      	movs	r1, r7
 800e768:	0022      	movs	r2, r4
 800e76a:	9803      	ldr	r0, [sp, #12]
 800e76c:	f000 fb80 	bl	800ee70 <__lshift>
 800e770:	0007      	movs	r7, r0
 800e772:	0038      	movs	r0, r7
 800e774:	2d00      	cmp	r5, #0
 800e776:	d018      	beq.n	800e7aa <_dtoa_r+0x9fa>
 800e778:	6879      	ldr	r1, [r7, #4]
 800e77a:	9803      	ldr	r0, [sp, #12]
 800e77c:	f000 f956 	bl	800ea2c <_Balloc>
 800e780:	1e04      	subs	r4, r0, #0
 800e782:	d105      	bne.n	800e790 <_dtoa_r+0x9e0>
 800e784:	0022      	movs	r2, r4
 800e786:	4b2b      	ldr	r3, [pc, #172]	@ (800e834 <_dtoa_r+0xa84>)
 800e788:	482b      	ldr	r0, [pc, #172]	@ (800e838 <_dtoa_r+0xa88>)
 800e78a:	492c      	ldr	r1, [pc, #176]	@ (800e83c <_dtoa_r+0xa8c>)
 800e78c:	f7ff fb25 	bl	800ddda <_dtoa_r+0x2a>
 800e790:	0039      	movs	r1, r7
 800e792:	693a      	ldr	r2, [r7, #16]
 800e794:	310c      	adds	r1, #12
 800e796:	3202      	adds	r2, #2
 800e798:	0092      	lsls	r2, r2, #2
 800e79a:	300c      	adds	r0, #12
 800e79c:	f000 ff80 	bl	800f6a0 <memcpy>
 800e7a0:	2201      	movs	r2, #1
 800e7a2:	0021      	movs	r1, r4
 800e7a4:	9803      	ldr	r0, [sp, #12]
 800e7a6:	f000 fb63 	bl	800ee70 <__lshift>
 800e7aa:	9b08      	ldr	r3, [sp, #32]
 800e7ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e7ae:	9306      	str	r3, [sp, #24]
 800e7b0:	3b01      	subs	r3, #1
 800e7b2:	189b      	adds	r3, r3, r2
 800e7b4:	2201      	movs	r2, #1
 800e7b6:	9704      	str	r7, [sp, #16]
 800e7b8:	0007      	movs	r7, r0
 800e7ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e7bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e7be:	4013      	ands	r3, r2
 800e7c0:	930e      	str	r3, [sp, #56]	@ 0x38
 800e7c2:	0031      	movs	r1, r6
 800e7c4:	9805      	ldr	r0, [sp, #20]
 800e7c6:	f7ff fa65 	bl	800dc94 <quorem>
 800e7ca:	9904      	ldr	r1, [sp, #16]
 800e7cc:	0005      	movs	r5, r0
 800e7ce:	900a      	str	r0, [sp, #40]	@ 0x28
 800e7d0:	9805      	ldr	r0, [sp, #20]
 800e7d2:	f000 fbb9 	bl	800ef48 <__mcmp>
 800e7d6:	003a      	movs	r2, r7
 800e7d8:	900d      	str	r0, [sp, #52]	@ 0x34
 800e7da:	0031      	movs	r1, r6
 800e7dc:	9803      	ldr	r0, [sp, #12]
 800e7de:	f000 fbcf 	bl	800ef80 <__mdiff>
 800e7e2:	2201      	movs	r2, #1
 800e7e4:	68c3      	ldr	r3, [r0, #12]
 800e7e6:	0004      	movs	r4, r0
 800e7e8:	3530      	adds	r5, #48	@ 0x30
 800e7ea:	9209      	str	r2, [sp, #36]	@ 0x24
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d104      	bne.n	800e7fa <_dtoa_r+0xa4a>
 800e7f0:	0001      	movs	r1, r0
 800e7f2:	9805      	ldr	r0, [sp, #20]
 800e7f4:	f000 fba8 	bl	800ef48 <__mcmp>
 800e7f8:	9009      	str	r0, [sp, #36]	@ 0x24
 800e7fa:	0021      	movs	r1, r4
 800e7fc:	9803      	ldr	r0, [sp, #12]
 800e7fe:	f000 f959 	bl	800eab4 <_Bfree>
 800e802:	9b06      	ldr	r3, [sp, #24]
 800e804:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e806:	1c5c      	adds	r4, r3, #1
 800e808:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e80a:	4313      	orrs	r3, r2
 800e80c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e80e:	4313      	orrs	r3, r2
 800e810:	d116      	bne.n	800e840 <_dtoa_r+0xa90>
 800e812:	2d39      	cmp	r5, #57	@ 0x39
 800e814:	d02f      	beq.n	800e876 <_dtoa_r+0xac6>
 800e816:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e818:	2b00      	cmp	r3, #0
 800e81a:	dd01      	ble.n	800e820 <_dtoa_r+0xa70>
 800e81c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800e81e:	3531      	adds	r5, #49	@ 0x31
 800e820:	9b06      	ldr	r3, [sp, #24]
 800e822:	701d      	strb	r5, [r3, #0]
 800e824:	e638      	b.n	800e498 <_dtoa_r+0x6e8>
 800e826:	46c0      	nop			@ (mov r8, r8)
 800e828:	40240000 	.word	0x40240000
 800e82c:	00000433 	.word	0x00000433
 800e830:	7ff00000 	.word	0x7ff00000
 800e834:	0801b478 	.word	0x0801b478
 800e838:	0801b420 	.word	0x0801b420
 800e83c:	000002ef 	.word	0x000002ef
 800e840:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e842:	2b00      	cmp	r3, #0
 800e844:	db04      	blt.n	800e850 <_dtoa_r+0xaa0>
 800e846:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e848:	4313      	orrs	r3, r2
 800e84a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e84c:	4313      	orrs	r3, r2
 800e84e:	d11e      	bne.n	800e88e <_dtoa_r+0xade>
 800e850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e852:	2b00      	cmp	r3, #0
 800e854:	dde4      	ble.n	800e820 <_dtoa_r+0xa70>
 800e856:	9905      	ldr	r1, [sp, #20]
 800e858:	2201      	movs	r2, #1
 800e85a:	9803      	ldr	r0, [sp, #12]
 800e85c:	f000 fb08 	bl	800ee70 <__lshift>
 800e860:	0031      	movs	r1, r6
 800e862:	9005      	str	r0, [sp, #20]
 800e864:	f000 fb70 	bl	800ef48 <__mcmp>
 800e868:	2800      	cmp	r0, #0
 800e86a:	dc02      	bgt.n	800e872 <_dtoa_r+0xac2>
 800e86c:	d1d8      	bne.n	800e820 <_dtoa_r+0xa70>
 800e86e:	07eb      	lsls	r3, r5, #31
 800e870:	d5d6      	bpl.n	800e820 <_dtoa_r+0xa70>
 800e872:	2d39      	cmp	r5, #57	@ 0x39
 800e874:	d1d2      	bne.n	800e81c <_dtoa_r+0xa6c>
 800e876:	2339      	movs	r3, #57	@ 0x39
 800e878:	9a06      	ldr	r2, [sp, #24]
 800e87a:	7013      	strb	r3, [r2, #0]
 800e87c:	0023      	movs	r3, r4
 800e87e:	001c      	movs	r4, r3
 800e880:	3b01      	subs	r3, #1
 800e882:	781a      	ldrb	r2, [r3, #0]
 800e884:	2a39      	cmp	r2, #57	@ 0x39
 800e886:	d04f      	beq.n	800e928 <_dtoa_r+0xb78>
 800e888:	3201      	adds	r2, #1
 800e88a:	701a      	strb	r2, [r3, #0]
 800e88c:	e604      	b.n	800e498 <_dtoa_r+0x6e8>
 800e88e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e890:	2b00      	cmp	r3, #0
 800e892:	dd03      	ble.n	800e89c <_dtoa_r+0xaec>
 800e894:	2d39      	cmp	r5, #57	@ 0x39
 800e896:	d0ee      	beq.n	800e876 <_dtoa_r+0xac6>
 800e898:	3501      	adds	r5, #1
 800e89a:	e7c1      	b.n	800e820 <_dtoa_r+0xa70>
 800e89c:	9b06      	ldr	r3, [sp, #24]
 800e89e:	9a06      	ldr	r2, [sp, #24]
 800e8a0:	701d      	strb	r5, [r3, #0]
 800e8a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	d02a      	beq.n	800e8fe <_dtoa_r+0xb4e>
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	220a      	movs	r2, #10
 800e8ac:	9905      	ldr	r1, [sp, #20]
 800e8ae:	9803      	ldr	r0, [sp, #12]
 800e8b0:	f000 f924 	bl	800eafc <__multadd>
 800e8b4:	9b04      	ldr	r3, [sp, #16]
 800e8b6:	9005      	str	r0, [sp, #20]
 800e8b8:	42bb      	cmp	r3, r7
 800e8ba:	d109      	bne.n	800e8d0 <_dtoa_r+0xb20>
 800e8bc:	2300      	movs	r3, #0
 800e8be:	220a      	movs	r2, #10
 800e8c0:	9904      	ldr	r1, [sp, #16]
 800e8c2:	9803      	ldr	r0, [sp, #12]
 800e8c4:	f000 f91a 	bl	800eafc <__multadd>
 800e8c8:	9004      	str	r0, [sp, #16]
 800e8ca:	0007      	movs	r7, r0
 800e8cc:	9406      	str	r4, [sp, #24]
 800e8ce:	e778      	b.n	800e7c2 <_dtoa_r+0xa12>
 800e8d0:	9904      	ldr	r1, [sp, #16]
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	220a      	movs	r2, #10
 800e8d6:	9803      	ldr	r0, [sp, #12]
 800e8d8:	f000 f910 	bl	800eafc <__multadd>
 800e8dc:	2300      	movs	r3, #0
 800e8de:	9004      	str	r0, [sp, #16]
 800e8e0:	220a      	movs	r2, #10
 800e8e2:	0039      	movs	r1, r7
 800e8e4:	9803      	ldr	r0, [sp, #12]
 800e8e6:	f000 f909 	bl	800eafc <__multadd>
 800e8ea:	e7ee      	b.n	800e8ca <_dtoa_r+0xb1a>
 800e8ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e8ee:	2401      	movs	r4, #1
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	dd00      	ble.n	800e8f6 <_dtoa_r+0xb46>
 800e8f4:	001c      	movs	r4, r3
 800e8f6:	9b08      	ldr	r3, [sp, #32]
 800e8f8:	191c      	adds	r4, r3, r4
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	9304      	str	r3, [sp, #16]
 800e8fe:	9905      	ldr	r1, [sp, #20]
 800e900:	2201      	movs	r2, #1
 800e902:	9803      	ldr	r0, [sp, #12]
 800e904:	f000 fab4 	bl	800ee70 <__lshift>
 800e908:	0031      	movs	r1, r6
 800e90a:	9005      	str	r0, [sp, #20]
 800e90c:	f000 fb1c 	bl	800ef48 <__mcmp>
 800e910:	2800      	cmp	r0, #0
 800e912:	dcb3      	bgt.n	800e87c <_dtoa_r+0xacc>
 800e914:	d101      	bne.n	800e91a <_dtoa_r+0xb6a>
 800e916:	07ed      	lsls	r5, r5, #31
 800e918:	d4b0      	bmi.n	800e87c <_dtoa_r+0xacc>
 800e91a:	0023      	movs	r3, r4
 800e91c:	001c      	movs	r4, r3
 800e91e:	3b01      	subs	r3, #1
 800e920:	781a      	ldrb	r2, [r3, #0]
 800e922:	2a30      	cmp	r2, #48	@ 0x30
 800e924:	d0fa      	beq.n	800e91c <_dtoa_r+0xb6c>
 800e926:	e5b7      	b.n	800e498 <_dtoa_r+0x6e8>
 800e928:	9a08      	ldr	r2, [sp, #32]
 800e92a:	429a      	cmp	r2, r3
 800e92c:	d1a7      	bne.n	800e87e <_dtoa_r+0xace>
 800e92e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e930:	3301      	adds	r3, #1
 800e932:	930c      	str	r3, [sp, #48]	@ 0x30
 800e934:	2331      	movs	r3, #49	@ 0x31
 800e936:	7013      	strb	r3, [r2, #0]
 800e938:	e5ae      	b.n	800e498 <_dtoa_r+0x6e8>
 800e93a:	4b15      	ldr	r3, [pc, #84]	@ (800e990 <_dtoa_r+0xbe0>)
 800e93c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800e93e:	9308      	str	r3, [sp, #32]
 800e940:	4b14      	ldr	r3, [pc, #80]	@ (800e994 <_dtoa_r+0xbe4>)
 800e942:	2a00      	cmp	r2, #0
 800e944:	d001      	beq.n	800e94a <_dtoa_r+0xb9a>
 800e946:	f7ff fa7b 	bl	800de40 <_dtoa_r+0x90>
 800e94a:	f7ff fa7b 	bl	800de44 <_dtoa_r+0x94>
 800e94e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e950:	2b01      	cmp	r3, #1
 800e952:	dc00      	bgt.n	800e956 <_dtoa_r+0xba6>
 800e954:	e648      	b.n	800e5e8 <_dtoa_r+0x838>
 800e956:	2001      	movs	r0, #1
 800e958:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800e95a:	e665      	b.n	800e628 <_dtoa_r+0x878>
 800e95c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e95e:	2b00      	cmp	r3, #0
 800e960:	dc00      	bgt.n	800e964 <_dtoa_r+0xbb4>
 800e962:	e6d6      	b.n	800e712 <_dtoa_r+0x962>
 800e964:	2400      	movs	r4, #0
 800e966:	0031      	movs	r1, r6
 800e968:	9805      	ldr	r0, [sp, #20]
 800e96a:	f7ff f993 	bl	800dc94 <quorem>
 800e96e:	9b08      	ldr	r3, [sp, #32]
 800e970:	3030      	adds	r0, #48	@ 0x30
 800e972:	5518      	strb	r0, [r3, r4]
 800e974:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e976:	3401      	adds	r4, #1
 800e978:	0005      	movs	r5, r0
 800e97a:	429c      	cmp	r4, r3
 800e97c:	dab6      	bge.n	800e8ec <_dtoa_r+0xb3c>
 800e97e:	2300      	movs	r3, #0
 800e980:	220a      	movs	r2, #10
 800e982:	9905      	ldr	r1, [sp, #20]
 800e984:	9803      	ldr	r0, [sp, #12]
 800e986:	f000 f8b9 	bl	800eafc <__multadd>
 800e98a:	9005      	str	r0, [sp, #20]
 800e98c:	e7eb      	b.n	800e966 <_dtoa_r+0xbb6>
 800e98e:	46c0      	nop			@ (mov r8, r8)
 800e990:	0801b3fc 	.word	0x0801b3fc
 800e994:	0801b404 	.word	0x0801b404

0800e998 <_free_r>:
 800e998:	b570      	push	{r4, r5, r6, lr}
 800e99a:	0005      	movs	r5, r0
 800e99c:	1e0c      	subs	r4, r1, #0
 800e99e:	d010      	beq.n	800e9c2 <_free_r+0x2a>
 800e9a0:	3c04      	subs	r4, #4
 800e9a2:	6823      	ldr	r3, [r4, #0]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	da00      	bge.n	800e9aa <_free_r+0x12>
 800e9a8:	18e4      	adds	r4, r4, r3
 800e9aa:	0028      	movs	r0, r5
 800e9ac:	f7fe fb26 	bl	800cffc <__malloc_lock>
 800e9b0:	4a1d      	ldr	r2, [pc, #116]	@ (800ea28 <_free_r+0x90>)
 800e9b2:	6813      	ldr	r3, [r2, #0]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d105      	bne.n	800e9c4 <_free_r+0x2c>
 800e9b8:	6063      	str	r3, [r4, #4]
 800e9ba:	6014      	str	r4, [r2, #0]
 800e9bc:	0028      	movs	r0, r5
 800e9be:	f7fe fb25 	bl	800d00c <__malloc_unlock>
 800e9c2:	bd70      	pop	{r4, r5, r6, pc}
 800e9c4:	42a3      	cmp	r3, r4
 800e9c6:	d908      	bls.n	800e9da <_free_r+0x42>
 800e9c8:	6820      	ldr	r0, [r4, #0]
 800e9ca:	1821      	adds	r1, r4, r0
 800e9cc:	428b      	cmp	r3, r1
 800e9ce:	d1f3      	bne.n	800e9b8 <_free_r+0x20>
 800e9d0:	6819      	ldr	r1, [r3, #0]
 800e9d2:	685b      	ldr	r3, [r3, #4]
 800e9d4:	1809      	adds	r1, r1, r0
 800e9d6:	6021      	str	r1, [r4, #0]
 800e9d8:	e7ee      	b.n	800e9b8 <_free_r+0x20>
 800e9da:	001a      	movs	r2, r3
 800e9dc:	685b      	ldr	r3, [r3, #4]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d001      	beq.n	800e9e6 <_free_r+0x4e>
 800e9e2:	42a3      	cmp	r3, r4
 800e9e4:	d9f9      	bls.n	800e9da <_free_r+0x42>
 800e9e6:	6811      	ldr	r1, [r2, #0]
 800e9e8:	1850      	adds	r0, r2, r1
 800e9ea:	42a0      	cmp	r0, r4
 800e9ec:	d10b      	bne.n	800ea06 <_free_r+0x6e>
 800e9ee:	6820      	ldr	r0, [r4, #0]
 800e9f0:	1809      	adds	r1, r1, r0
 800e9f2:	1850      	adds	r0, r2, r1
 800e9f4:	6011      	str	r1, [r2, #0]
 800e9f6:	4283      	cmp	r3, r0
 800e9f8:	d1e0      	bne.n	800e9bc <_free_r+0x24>
 800e9fa:	6818      	ldr	r0, [r3, #0]
 800e9fc:	685b      	ldr	r3, [r3, #4]
 800e9fe:	1841      	adds	r1, r0, r1
 800ea00:	6011      	str	r1, [r2, #0]
 800ea02:	6053      	str	r3, [r2, #4]
 800ea04:	e7da      	b.n	800e9bc <_free_r+0x24>
 800ea06:	42a0      	cmp	r0, r4
 800ea08:	d902      	bls.n	800ea10 <_free_r+0x78>
 800ea0a:	230c      	movs	r3, #12
 800ea0c:	602b      	str	r3, [r5, #0]
 800ea0e:	e7d5      	b.n	800e9bc <_free_r+0x24>
 800ea10:	6820      	ldr	r0, [r4, #0]
 800ea12:	1821      	adds	r1, r4, r0
 800ea14:	428b      	cmp	r3, r1
 800ea16:	d103      	bne.n	800ea20 <_free_r+0x88>
 800ea18:	6819      	ldr	r1, [r3, #0]
 800ea1a:	685b      	ldr	r3, [r3, #4]
 800ea1c:	1809      	adds	r1, r1, r0
 800ea1e:	6021      	str	r1, [r4, #0]
 800ea20:	6063      	str	r3, [r4, #4]
 800ea22:	6054      	str	r4, [r2, #4]
 800ea24:	e7ca      	b.n	800e9bc <_free_r+0x24>
 800ea26:	46c0      	nop			@ (mov r8, r8)
 800ea28:	20000600 	.word	0x20000600

0800ea2c <_Balloc>:
 800ea2c:	b570      	push	{r4, r5, r6, lr}
 800ea2e:	69c5      	ldr	r5, [r0, #28]
 800ea30:	0006      	movs	r6, r0
 800ea32:	000c      	movs	r4, r1
 800ea34:	2d00      	cmp	r5, #0
 800ea36:	d10e      	bne.n	800ea56 <_Balloc+0x2a>
 800ea38:	2010      	movs	r0, #16
 800ea3a:	f7fe fa33 	bl	800cea4 <malloc>
 800ea3e:	1e02      	subs	r2, r0, #0
 800ea40:	61f0      	str	r0, [r6, #28]
 800ea42:	d104      	bne.n	800ea4e <_Balloc+0x22>
 800ea44:	216b      	movs	r1, #107	@ 0x6b
 800ea46:	4b19      	ldr	r3, [pc, #100]	@ (800eaac <_Balloc+0x80>)
 800ea48:	4819      	ldr	r0, [pc, #100]	@ (800eab0 <_Balloc+0x84>)
 800ea4a:	f000 fe33 	bl	800f6b4 <__assert_func>
 800ea4e:	6045      	str	r5, [r0, #4]
 800ea50:	6085      	str	r5, [r0, #8]
 800ea52:	6005      	str	r5, [r0, #0]
 800ea54:	60c5      	str	r5, [r0, #12]
 800ea56:	69f5      	ldr	r5, [r6, #28]
 800ea58:	68eb      	ldr	r3, [r5, #12]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d013      	beq.n	800ea86 <_Balloc+0x5a>
 800ea5e:	69f3      	ldr	r3, [r6, #28]
 800ea60:	00a2      	lsls	r2, r4, #2
 800ea62:	68db      	ldr	r3, [r3, #12]
 800ea64:	189b      	adds	r3, r3, r2
 800ea66:	6818      	ldr	r0, [r3, #0]
 800ea68:	2800      	cmp	r0, #0
 800ea6a:	d118      	bne.n	800ea9e <_Balloc+0x72>
 800ea6c:	2101      	movs	r1, #1
 800ea6e:	000d      	movs	r5, r1
 800ea70:	40a5      	lsls	r5, r4
 800ea72:	1d6a      	adds	r2, r5, #5
 800ea74:	0030      	movs	r0, r6
 800ea76:	0092      	lsls	r2, r2, #2
 800ea78:	f000 fe3a 	bl	800f6f0 <_calloc_r>
 800ea7c:	2800      	cmp	r0, #0
 800ea7e:	d00c      	beq.n	800ea9a <_Balloc+0x6e>
 800ea80:	6044      	str	r4, [r0, #4]
 800ea82:	6085      	str	r5, [r0, #8]
 800ea84:	e00d      	b.n	800eaa2 <_Balloc+0x76>
 800ea86:	2221      	movs	r2, #33	@ 0x21
 800ea88:	2104      	movs	r1, #4
 800ea8a:	0030      	movs	r0, r6
 800ea8c:	f000 fe30 	bl	800f6f0 <_calloc_r>
 800ea90:	69f3      	ldr	r3, [r6, #28]
 800ea92:	60e8      	str	r0, [r5, #12]
 800ea94:	68db      	ldr	r3, [r3, #12]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d1e1      	bne.n	800ea5e <_Balloc+0x32>
 800ea9a:	2000      	movs	r0, #0
 800ea9c:	bd70      	pop	{r4, r5, r6, pc}
 800ea9e:	6802      	ldr	r2, [r0, #0]
 800eaa0:	601a      	str	r2, [r3, #0]
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	6103      	str	r3, [r0, #16]
 800eaa6:	60c3      	str	r3, [r0, #12]
 800eaa8:	e7f8      	b.n	800ea9c <_Balloc+0x70>
 800eaaa:	46c0      	nop			@ (mov r8, r8)
 800eaac:	0801b409 	.word	0x0801b409
 800eab0:	0801b489 	.word	0x0801b489

0800eab4 <_Bfree>:
 800eab4:	b570      	push	{r4, r5, r6, lr}
 800eab6:	69c6      	ldr	r6, [r0, #28]
 800eab8:	0005      	movs	r5, r0
 800eaba:	000c      	movs	r4, r1
 800eabc:	2e00      	cmp	r6, #0
 800eabe:	d10e      	bne.n	800eade <_Bfree+0x2a>
 800eac0:	2010      	movs	r0, #16
 800eac2:	f7fe f9ef 	bl	800cea4 <malloc>
 800eac6:	1e02      	subs	r2, r0, #0
 800eac8:	61e8      	str	r0, [r5, #28]
 800eaca:	d104      	bne.n	800ead6 <_Bfree+0x22>
 800eacc:	218f      	movs	r1, #143	@ 0x8f
 800eace:	4b09      	ldr	r3, [pc, #36]	@ (800eaf4 <_Bfree+0x40>)
 800ead0:	4809      	ldr	r0, [pc, #36]	@ (800eaf8 <_Bfree+0x44>)
 800ead2:	f000 fdef 	bl	800f6b4 <__assert_func>
 800ead6:	6046      	str	r6, [r0, #4]
 800ead8:	6086      	str	r6, [r0, #8]
 800eada:	6006      	str	r6, [r0, #0]
 800eadc:	60c6      	str	r6, [r0, #12]
 800eade:	2c00      	cmp	r4, #0
 800eae0:	d007      	beq.n	800eaf2 <_Bfree+0x3e>
 800eae2:	69eb      	ldr	r3, [r5, #28]
 800eae4:	6862      	ldr	r2, [r4, #4]
 800eae6:	68db      	ldr	r3, [r3, #12]
 800eae8:	0092      	lsls	r2, r2, #2
 800eaea:	189b      	adds	r3, r3, r2
 800eaec:	681a      	ldr	r2, [r3, #0]
 800eaee:	6022      	str	r2, [r4, #0]
 800eaf0:	601c      	str	r4, [r3, #0]
 800eaf2:	bd70      	pop	{r4, r5, r6, pc}
 800eaf4:	0801b409 	.word	0x0801b409
 800eaf8:	0801b489 	.word	0x0801b489

0800eafc <__multadd>:
 800eafc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eafe:	000f      	movs	r7, r1
 800eb00:	9001      	str	r0, [sp, #4]
 800eb02:	000c      	movs	r4, r1
 800eb04:	001e      	movs	r6, r3
 800eb06:	2000      	movs	r0, #0
 800eb08:	690d      	ldr	r5, [r1, #16]
 800eb0a:	3714      	adds	r7, #20
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	3001      	adds	r0, #1
 800eb10:	b299      	uxth	r1, r3
 800eb12:	4351      	muls	r1, r2
 800eb14:	0c1b      	lsrs	r3, r3, #16
 800eb16:	4353      	muls	r3, r2
 800eb18:	1989      	adds	r1, r1, r6
 800eb1a:	0c0e      	lsrs	r6, r1, #16
 800eb1c:	199b      	adds	r3, r3, r6
 800eb1e:	0c1e      	lsrs	r6, r3, #16
 800eb20:	b289      	uxth	r1, r1
 800eb22:	041b      	lsls	r3, r3, #16
 800eb24:	185b      	adds	r3, r3, r1
 800eb26:	c708      	stmia	r7!, {r3}
 800eb28:	4285      	cmp	r5, r0
 800eb2a:	dcef      	bgt.n	800eb0c <__multadd+0x10>
 800eb2c:	2e00      	cmp	r6, #0
 800eb2e:	d022      	beq.n	800eb76 <__multadd+0x7a>
 800eb30:	68a3      	ldr	r3, [r4, #8]
 800eb32:	42ab      	cmp	r3, r5
 800eb34:	dc19      	bgt.n	800eb6a <__multadd+0x6e>
 800eb36:	6861      	ldr	r1, [r4, #4]
 800eb38:	9801      	ldr	r0, [sp, #4]
 800eb3a:	3101      	adds	r1, #1
 800eb3c:	f7ff ff76 	bl	800ea2c <_Balloc>
 800eb40:	1e07      	subs	r7, r0, #0
 800eb42:	d105      	bne.n	800eb50 <__multadd+0x54>
 800eb44:	003a      	movs	r2, r7
 800eb46:	21ba      	movs	r1, #186	@ 0xba
 800eb48:	4b0c      	ldr	r3, [pc, #48]	@ (800eb7c <__multadd+0x80>)
 800eb4a:	480d      	ldr	r0, [pc, #52]	@ (800eb80 <__multadd+0x84>)
 800eb4c:	f000 fdb2 	bl	800f6b4 <__assert_func>
 800eb50:	0021      	movs	r1, r4
 800eb52:	6922      	ldr	r2, [r4, #16]
 800eb54:	310c      	adds	r1, #12
 800eb56:	3202      	adds	r2, #2
 800eb58:	0092      	lsls	r2, r2, #2
 800eb5a:	300c      	adds	r0, #12
 800eb5c:	f000 fda0 	bl	800f6a0 <memcpy>
 800eb60:	0021      	movs	r1, r4
 800eb62:	9801      	ldr	r0, [sp, #4]
 800eb64:	f7ff ffa6 	bl	800eab4 <_Bfree>
 800eb68:	003c      	movs	r4, r7
 800eb6a:	1d2b      	adds	r3, r5, #4
 800eb6c:	009b      	lsls	r3, r3, #2
 800eb6e:	18e3      	adds	r3, r4, r3
 800eb70:	3501      	adds	r5, #1
 800eb72:	605e      	str	r6, [r3, #4]
 800eb74:	6125      	str	r5, [r4, #16]
 800eb76:	0020      	movs	r0, r4
 800eb78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800eb7a:	46c0      	nop			@ (mov r8, r8)
 800eb7c:	0801b478 	.word	0x0801b478
 800eb80:	0801b489 	.word	0x0801b489

0800eb84 <__hi0bits>:
 800eb84:	2280      	movs	r2, #128	@ 0x80
 800eb86:	0003      	movs	r3, r0
 800eb88:	0252      	lsls	r2, r2, #9
 800eb8a:	2000      	movs	r0, #0
 800eb8c:	4293      	cmp	r3, r2
 800eb8e:	d201      	bcs.n	800eb94 <__hi0bits+0x10>
 800eb90:	041b      	lsls	r3, r3, #16
 800eb92:	3010      	adds	r0, #16
 800eb94:	2280      	movs	r2, #128	@ 0x80
 800eb96:	0452      	lsls	r2, r2, #17
 800eb98:	4293      	cmp	r3, r2
 800eb9a:	d201      	bcs.n	800eba0 <__hi0bits+0x1c>
 800eb9c:	3008      	adds	r0, #8
 800eb9e:	021b      	lsls	r3, r3, #8
 800eba0:	2280      	movs	r2, #128	@ 0x80
 800eba2:	0552      	lsls	r2, r2, #21
 800eba4:	4293      	cmp	r3, r2
 800eba6:	d201      	bcs.n	800ebac <__hi0bits+0x28>
 800eba8:	3004      	adds	r0, #4
 800ebaa:	011b      	lsls	r3, r3, #4
 800ebac:	2280      	movs	r2, #128	@ 0x80
 800ebae:	05d2      	lsls	r2, r2, #23
 800ebb0:	4293      	cmp	r3, r2
 800ebb2:	d201      	bcs.n	800ebb8 <__hi0bits+0x34>
 800ebb4:	3002      	adds	r0, #2
 800ebb6:	009b      	lsls	r3, r3, #2
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	db03      	blt.n	800ebc4 <__hi0bits+0x40>
 800ebbc:	3001      	adds	r0, #1
 800ebbe:	4213      	tst	r3, r2
 800ebc0:	d100      	bne.n	800ebc4 <__hi0bits+0x40>
 800ebc2:	2020      	movs	r0, #32
 800ebc4:	4770      	bx	lr

0800ebc6 <__lo0bits>:
 800ebc6:	6803      	ldr	r3, [r0, #0]
 800ebc8:	0001      	movs	r1, r0
 800ebca:	2207      	movs	r2, #7
 800ebcc:	0018      	movs	r0, r3
 800ebce:	4010      	ands	r0, r2
 800ebd0:	4213      	tst	r3, r2
 800ebd2:	d00d      	beq.n	800ebf0 <__lo0bits+0x2a>
 800ebd4:	3a06      	subs	r2, #6
 800ebd6:	2000      	movs	r0, #0
 800ebd8:	4213      	tst	r3, r2
 800ebda:	d105      	bne.n	800ebe8 <__lo0bits+0x22>
 800ebdc:	3002      	adds	r0, #2
 800ebde:	4203      	tst	r3, r0
 800ebe0:	d003      	beq.n	800ebea <__lo0bits+0x24>
 800ebe2:	40d3      	lsrs	r3, r2
 800ebe4:	0010      	movs	r0, r2
 800ebe6:	600b      	str	r3, [r1, #0]
 800ebe8:	4770      	bx	lr
 800ebea:	089b      	lsrs	r3, r3, #2
 800ebec:	600b      	str	r3, [r1, #0]
 800ebee:	e7fb      	b.n	800ebe8 <__lo0bits+0x22>
 800ebf0:	b29a      	uxth	r2, r3
 800ebf2:	2a00      	cmp	r2, #0
 800ebf4:	d101      	bne.n	800ebfa <__lo0bits+0x34>
 800ebf6:	2010      	movs	r0, #16
 800ebf8:	0c1b      	lsrs	r3, r3, #16
 800ebfa:	b2da      	uxtb	r2, r3
 800ebfc:	2a00      	cmp	r2, #0
 800ebfe:	d101      	bne.n	800ec04 <__lo0bits+0x3e>
 800ec00:	3008      	adds	r0, #8
 800ec02:	0a1b      	lsrs	r3, r3, #8
 800ec04:	071a      	lsls	r2, r3, #28
 800ec06:	d101      	bne.n	800ec0c <__lo0bits+0x46>
 800ec08:	3004      	adds	r0, #4
 800ec0a:	091b      	lsrs	r3, r3, #4
 800ec0c:	079a      	lsls	r2, r3, #30
 800ec0e:	d101      	bne.n	800ec14 <__lo0bits+0x4e>
 800ec10:	3002      	adds	r0, #2
 800ec12:	089b      	lsrs	r3, r3, #2
 800ec14:	07da      	lsls	r2, r3, #31
 800ec16:	d4e9      	bmi.n	800ebec <__lo0bits+0x26>
 800ec18:	3001      	adds	r0, #1
 800ec1a:	085b      	lsrs	r3, r3, #1
 800ec1c:	d1e6      	bne.n	800ebec <__lo0bits+0x26>
 800ec1e:	2020      	movs	r0, #32
 800ec20:	e7e2      	b.n	800ebe8 <__lo0bits+0x22>
	...

0800ec24 <__i2b>:
 800ec24:	b510      	push	{r4, lr}
 800ec26:	000c      	movs	r4, r1
 800ec28:	2101      	movs	r1, #1
 800ec2a:	f7ff feff 	bl	800ea2c <_Balloc>
 800ec2e:	2800      	cmp	r0, #0
 800ec30:	d107      	bne.n	800ec42 <__i2b+0x1e>
 800ec32:	2146      	movs	r1, #70	@ 0x46
 800ec34:	4c05      	ldr	r4, [pc, #20]	@ (800ec4c <__i2b+0x28>)
 800ec36:	0002      	movs	r2, r0
 800ec38:	4b05      	ldr	r3, [pc, #20]	@ (800ec50 <__i2b+0x2c>)
 800ec3a:	0020      	movs	r0, r4
 800ec3c:	31ff      	adds	r1, #255	@ 0xff
 800ec3e:	f000 fd39 	bl	800f6b4 <__assert_func>
 800ec42:	2301      	movs	r3, #1
 800ec44:	6144      	str	r4, [r0, #20]
 800ec46:	6103      	str	r3, [r0, #16]
 800ec48:	bd10      	pop	{r4, pc}
 800ec4a:	46c0      	nop			@ (mov r8, r8)
 800ec4c:	0801b489 	.word	0x0801b489
 800ec50:	0801b478 	.word	0x0801b478

0800ec54 <__multiply>:
 800ec54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec56:	0014      	movs	r4, r2
 800ec58:	690a      	ldr	r2, [r1, #16]
 800ec5a:	6923      	ldr	r3, [r4, #16]
 800ec5c:	000d      	movs	r5, r1
 800ec5e:	b08b      	sub	sp, #44	@ 0x2c
 800ec60:	429a      	cmp	r2, r3
 800ec62:	db02      	blt.n	800ec6a <__multiply+0x16>
 800ec64:	0023      	movs	r3, r4
 800ec66:	000c      	movs	r4, r1
 800ec68:	001d      	movs	r5, r3
 800ec6a:	6927      	ldr	r7, [r4, #16]
 800ec6c:	692e      	ldr	r6, [r5, #16]
 800ec6e:	6861      	ldr	r1, [r4, #4]
 800ec70:	19bb      	adds	r3, r7, r6
 800ec72:	9303      	str	r3, [sp, #12]
 800ec74:	68a3      	ldr	r3, [r4, #8]
 800ec76:	19ba      	adds	r2, r7, r6
 800ec78:	4293      	cmp	r3, r2
 800ec7a:	da00      	bge.n	800ec7e <__multiply+0x2a>
 800ec7c:	3101      	adds	r1, #1
 800ec7e:	f7ff fed5 	bl	800ea2c <_Balloc>
 800ec82:	9002      	str	r0, [sp, #8]
 800ec84:	2800      	cmp	r0, #0
 800ec86:	d106      	bne.n	800ec96 <__multiply+0x42>
 800ec88:	21b1      	movs	r1, #177	@ 0xb1
 800ec8a:	4b49      	ldr	r3, [pc, #292]	@ (800edb0 <__multiply+0x15c>)
 800ec8c:	4849      	ldr	r0, [pc, #292]	@ (800edb4 <__multiply+0x160>)
 800ec8e:	9a02      	ldr	r2, [sp, #8]
 800ec90:	0049      	lsls	r1, r1, #1
 800ec92:	f000 fd0f 	bl	800f6b4 <__assert_func>
 800ec96:	9b02      	ldr	r3, [sp, #8]
 800ec98:	2200      	movs	r2, #0
 800ec9a:	3314      	adds	r3, #20
 800ec9c:	469c      	mov	ip, r3
 800ec9e:	19bb      	adds	r3, r7, r6
 800eca0:	009b      	lsls	r3, r3, #2
 800eca2:	4463      	add	r3, ip
 800eca4:	9304      	str	r3, [sp, #16]
 800eca6:	4663      	mov	r3, ip
 800eca8:	9904      	ldr	r1, [sp, #16]
 800ecaa:	428b      	cmp	r3, r1
 800ecac:	d32a      	bcc.n	800ed04 <__multiply+0xb0>
 800ecae:	0023      	movs	r3, r4
 800ecb0:	00bf      	lsls	r7, r7, #2
 800ecb2:	3314      	adds	r3, #20
 800ecb4:	3514      	adds	r5, #20
 800ecb6:	9308      	str	r3, [sp, #32]
 800ecb8:	00b6      	lsls	r6, r6, #2
 800ecba:	19db      	adds	r3, r3, r7
 800ecbc:	9305      	str	r3, [sp, #20]
 800ecbe:	19ab      	adds	r3, r5, r6
 800ecc0:	9309      	str	r3, [sp, #36]	@ 0x24
 800ecc2:	2304      	movs	r3, #4
 800ecc4:	9306      	str	r3, [sp, #24]
 800ecc6:	0023      	movs	r3, r4
 800ecc8:	9a05      	ldr	r2, [sp, #20]
 800ecca:	3315      	adds	r3, #21
 800eccc:	9501      	str	r5, [sp, #4]
 800ecce:	429a      	cmp	r2, r3
 800ecd0:	d305      	bcc.n	800ecde <__multiply+0x8a>
 800ecd2:	1b13      	subs	r3, r2, r4
 800ecd4:	3b15      	subs	r3, #21
 800ecd6:	089b      	lsrs	r3, r3, #2
 800ecd8:	3301      	adds	r3, #1
 800ecda:	009b      	lsls	r3, r3, #2
 800ecdc:	9306      	str	r3, [sp, #24]
 800ecde:	9b01      	ldr	r3, [sp, #4]
 800ece0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ece2:	4293      	cmp	r3, r2
 800ece4:	d310      	bcc.n	800ed08 <__multiply+0xb4>
 800ece6:	9b03      	ldr	r3, [sp, #12]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	dd05      	ble.n	800ecf8 <__multiply+0xa4>
 800ecec:	9b04      	ldr	r3, [sp, #16]
 800ecee:	3b04      	subs	r3, #4
 800ecf0:	9304      	str	r3, [sp, #16]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d056      	beq.n	800eda6 <__multiply+0x152>
 800ecf8:	9b02      	ldr	r3, [sp, #8]
 800ecfa:	9a03      	ldr	r2, [sp, #12]
 800ecfc:	0018      	movs	r0, r3
 800ecfe:	611a      	str	r2, [r3, #16]
 800ed00:	b00b      	add	sp, #44	@ 0x2c
 800ed02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed04:	c304      	stmia	r3!, {r2}
 800ed06:	e7cf      	b.n	800eca8 <__multiply+0x54>
 800ed08:	9b01      	ldr	r3, [sp, #4]
 800ed0a:	6818      	ldr	r0, [r3, #0]
 800ed0c:	b280      	uxth	r0, r0
 800ed0e:	2800      	cmp	r0, #0
 800ed10:	d01e      	beq.n	800ed50 <__multiply+0xfc>
 800ed12:	4667      	mov	r7, ip
 800ed14:	2500      	movs	r5, #0
 800ed16:	9e08      	ldr	r6, [sp, #32]
 800ed18:	ce02      	ldmia	r6!, {r1}
 800ed1a:	683b      	ldr	r3, [r7, #0]
 800ed1c:	9307      	str	r3, [sp, #28]
 800ed1e:	b28b      	uxth	r3, r1
 800ed20:	4343      	muls	r3, r0
 800ed22:	001a      	movs	r2, r3
 800ed24:	466b      	mov	r3, sp
 800ed26:	0c09      	lsrs	r1, r1, #16
 800ed28:	8b9b      	ldrh	r3, [r3, #28]
 800ed2a:	4341      	muls	r1, r0
 800ed2c:	18d3      	adds	r3, r2, r3
 800ed2e:	9a07      	ldr	r2, [sp, #28]
 800ed30:	195b      	adds	r3, r3, r5
 800ed32:	0c12      	lsrs	r2, r2, #16
 800ed34:	1889      	adds	r1, r1, r2
 800ed36:	0c1a      	lsrs	r2, r3, #16
 800ed38:	188a      	adds	r2, r1, r2
 800ed3a:	b29b      	uxth	r3, r3
 800ed3c:	0c15      	lsrs	r5, r2, #16
 800ed3e:	0412      	lsls	r2, r2, #16
 800ed40:	431a      	orrs	r2, r3
 800ed42:	9b05      	ldr	r3, [sp, #20]
 800ed44:	c704      	stmia	r7!, {r2}
 800ed46:	42b3      	cmp	r3, r6
 800ed48:	d8e6      	bhi.n	800ed18 <__multiply+0xc4>
 800ed4a:	4663      	mov	r3, ip
 800ed4c:	9a06      	ldr	r2, [sp, #24]
 800ed4e:	509d      	str	r5, [r3, r2]
 800ed50:	9b01      	ldr	r3, [sp, #4]
 800ed52:	6818      	ldr	r0, [r3, #0]
 800ed54:	0c00      	lsrs	r0, r0, #16
 800ed56:	d020      	beq.n	800ed9a <__multiply+0x146>
 800ed58:	4663      	mov	r3, ip
 800ed5a:	0025      	movs	r5, r4
 800ed5c:	4661      	mov	r1, ip
 800ed5e:	2700      	movs	r7, #0
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	3514      	adds	r5, #20
 800ed64:	682a      	ldr	r2, [r5, #0]
 800ed66:	680e      	ldr	r6, [r1, #0]
 800ed68:	b292      	uxth	r2, r2
 800ed6a:	4342      	muls	r2, r0
 800ed6c:	0c36      	lsrs	r6, r6, #16
 800ed6e:	1992      	adds	r2, r2, r6
 800ed70:	19d2      	adds	r2, r2, r7
 800ed72:	0416      	lsls	r6, r2, #16
 800ed74:	b29b      	uxth	r3, r3
 800ed76:	431e      	orrs	r6, r3
 800ed78:	600e      	str	r6, [r1, #0]
 800ed7a:	cd40      	ldmia	r5!, {r6}
 800ed7c:	684b      	ldr	r3, [r1, #4]
 800ed7e:	0c36      	lsrs	r6, r6, #16
 800ed80:	4346      	muls	r6, r0
 800ed82:	b29b      	uxth	r3, r3
 800ed84:	0c12      	lsrs	r2, r2, #16
 800ed86:	18f3      	adds	r3, r6, r3
 800ed88:	189b      	adds	r3, r3, r2
 800ed8a:	9a05      	ldr	r2, [sp, #20]
 800ed8c:	0c1f      	lsrs	r7, r3, #16
 800ed8e:	3104      	adds	r1, #4
 800ed90:	42aa      	cmp	r2, r5
 800ed92:	d8e7      	bhi.n	800ed64 <__multiply+0x110>
 800ed94:	4662      	mov	r2, ip
 800ed96:	9906      	ldr	r1, [sp, #24]
 800ed98:	5053      	str	r3, [r2, r1]
 800ed9a:	9b01      	ldr	r3, [sp, #4]
 800ed9c:	3304      	adds	r3, #4
 800ed9e:	9301      	str	r3, [sp, #4]
 800eda0:	2304      	movs	r3, #4
 800eda2:	449c      	add	ip, r3
 800eda4:	e79b      	b.n	800ecde <__multiply+0x8a>
 800eda6:	9b03      	ldr	r3, [sp, #12]
 800eda8:	3b01      	subs	r3, #1
 800edaa:	9303      	str	r3, [sp, #12]
 800edac:	e79b      	b.n	800ece6 <__multiply+0x92>
 800edae:	46c0      	nop			@ (mov r8, r8)
 800edb0:	0801b478 	.word	0x0801b478
 800edb4:	0801b489 	.word	0x0801b489

0800edb8 <__pow5mult>:
 800edb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800edba:	2303      	movs	r3, #3
 800edbc:	0015      	movs	r5, r2
 800edbe:	0007      	movs	r7, r0
 800edc0:	000e      	movs	r6, r1
 800edc2:	401a      	ands	r2, r3
 800edc4:	421d      	tst	r5, r3
 800edc6:	d008      	beq.n	800edda <__pow5mult+0x22>
 800edc8:	4925      	ldr	r1, [pc, #148]	@ (800ee60 <__pow5mult+0xa8>)
 800edca:	3a01      	subs	r2, #1
 800edcc:	0092      	lsls	r2, r2, #2
 800edce:	5852      	ldr	r2, [r2, r1]
 800edd0:	2300      	movs	r3, #0
 800edd2:	0031      	movs	r1, r6
 800edd4:	f7ff fe92 	bl	800eafc <__multadd>
 800edd8:	0006      	movs	r6, r0
 800edda:	10ad      	asrs	r5, r5, #2
 800eddc:	d03d      	beq.n	800ee5a <__pow5mult+0xa2>
 800edde:	69fc      	ldr	r4, [r7, #28]
 800ede0:	2c00      	cmp	r4, #0
 800ede2:	d10f      	bne.n	800ee04 <__pow5mult+0x4c>
 800ede4:	2010      	movs	r0, #16
 800ede6:	f7fe f85d 	bl	800cea4 <malloc>
 800edea:	1e02      	subs	r2, r0, #0
 800edec:	61f8      	str	r0, [r7, #28]
 800edee:	d105      	bne.n	800edfc <__pow5mult+0x44>
 800edf0:	21b4      	movs	r1, #180	@ 0xb4
 800edf2:	4b1c      	ldr	r3, [pc, #112]	@ (800ee64 <__pow5mult+0xac>)
 800edf4:	481c      	ldr	r0, [pc, #112]	@ (800ee68 <__pow5mult+0xb0>)
 800edf6:	31ff      	adds	r1, #255	@ 0xff
 800edf8:	f000 fc5c 	bl	800f6b4 <__assert_func>
 800edfc:	6044      	str	r4, [r0, #4]
 800edfe:	6084      	str	r4, [r0, #8]
 800ee00:	6004      	str	r4, [r0, #0]
 800ee02:	60c4      	str	r4, [r0, #12]
 800ee04:	69fb      	ldr	r3, [r7, #28]
 800ee06:	689c      	ldr	r4, [r3, #8]
 800ee08:	9301      	str	r3, [sp, #4]
 800ee0a:	2c00      	cmp	r4, #0
 800ee0c:	d108      	bne.n	800ee20 <__pow5mult+0x68>
 800ee0e:	0038      	movs	r0, r7
 800ee10:	4916      	ldr	r1, [pc, #88]	@ (800ee6c <__pow5mult+0xb4>)
 800ee12:	f7ff ff07 	bl	800ec24 <__i2b>
 800ee16:	9b01      	ldr	r3, [sp, #4]
 800ee18:	0004      	movs	r4, r0
 800ee1a:	6098      	str	r0, [r3, #8]
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	6003      	str	r3, [r0, #0]
 800ee20:	2301      	movs	r3, #1
 800ee22:	421d      	tst	r5, r3
 800ee24:	d00a      	beq.n	800ee3c <__pow5mult+0x84>
 800ee26:	0031      	movs	r1, r6
 800ee28:	0022      	movs	r2, r4
 800ee2a:	0038      	movs	r0, r7
 800ee2c:	f7ff ff12 	bl	800ec54 <__multiply>
 800ee30:	0031      	movs	r1, r6
 800ee32:	9001      	str	r0, [sp, #4]
 800ee34:	0038      	movs	r0, r7
 800ee36:	f7ff fe3d 	bl	800eab4 <_Bfree>
 800ee3a:	9e01      	ldr	r6, [sp, #4]
 800ee3c:	106d      	asrs	r5, r5, #1
 800ee3e:	d00c      	beq.n	800ee5a <__pow5mult+0xa2>
 800ee40:	6820      	ldr	r0, [r4, #0]
 800ee42:	2800      	cmp	r0, #0
 800ee44:	d107      	bne.n	800ee56 <__pow5mult+0x9e>
 800ee46:	0022      	movs	r2, r4
 800ee48:	0021      	movs	r1, r4
 800ee4a:	0038      	movs	r0, r7
 800ee4c:	f7ff ff02 	bl	800ec54 <__multiply>
 800ee50:	2300      	movs	r3, #0
 800ee52:	6020      	str	r0, [r4, #0]
 800ee54:	6003      	str	r3, [r0, #0]
 800ee56:	0004      	movs	r4, r0
 800ee58:	e7e2      	b.n	800ee20 <__pow5mult+0x68>
 800ee5a:	0030      	movs	r0, r6
 800ee5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ee5e:	46c0      	nop			@ (mov r8, r8)
 800ee60:	0801b4e4 	.word	0x0801b4e4
 800ee64:	0801b409 	.word	0x0801b409
 800ee68:	0801b489 	.word	0x0801b489
 800ee6c:	00000271 	.word	0x00000271

0800ee70 <__lshift>:
 800ee70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee72:	000c      	movs	r4, r1
 800ee74:	0016      	movs	r6, r2
 800ee76:	6923      	ldr	r3, [r4, #16]
 800ee78:	1157      	asrs	r7, r2, #5
 800ee7a:	b085      	sub	sp, #20
 800ee7c:	18fb      	adds	r3, r7, r3
 800ee7e:	9301      	str	r3, [sp, #4]
 800ee80:	3301      	adds	r3, #1
 800ee82:	9300      	str	r3, [sp, #0]
 800ee84:	6849      	ldr	r1, [r1, #4]
 800ee86:	68a3      	ldr	r3, [r4, #8]
 800ee88:	9002      	str	r0, [sp, #8]
 800ee8a:	9a00      	ldr	r2, [sp, #0]
 800ee8c:	4293      	cmp	r3, r2
 800ee8e:	db10      	blt.n	800eeb2 <__lshift+0x42>
 800ee90:	9802      	ldr	r0, [sp, #8]
 800ee92:	f7ff fdcb 	bl	800ea2c <_Balloc>
 800ee96:	2300      	movs	r3, #0
 800ee98:	0001      	movs	r1, r0
 800ee9a:	0005      	movs	r5, r0
 800ee9c:	001a      	movs	r2, r3
 800ee9e:	3114      	adds	r1, #20
 800eea0:	4298      	cmp	r0, r3
 800eea2:	d10c      	bne.n	800eebe <__lshift+0x4e>
 800eea4:	21ef      	movs	r1, #239	@ 0xef
 800eea6:	002a      	movs	r2, r5
 800eea8:	4b25      	ldr	r3, [pc, #148]	@ (800ef40 <__lshift+0xd0>)
 800eeaa:	4826      	ldr	r0, [pc, #152]	@ (800ef44 <__lshift+0xd4>)
 800eeac:	0049      	lsls	r1, r1, #1
 800eeae:	f000 fc01 	bl	800f6b4 <__assert_func>
 800eeb2:	3101      	adds	r1, #1
 800eeb4:	005b      	lsls	r3, r3, #1
 800eeb6:	e7e8      	b.n	800ee8a <__lshift+0x1a>
 800eeb8:	0098      	lsls	r0, r3, #2
 800eeba:	500a      	str	r2, [r1, r0]
 800eebc:	3301      	adds	r3, #1
 800eebe:	42bb      	cmp	r3, r7
 800eec0:	dbfa      	blt.n	800eeb8 <__lshift+0x48>
 800eec2:	43fb      	mvns	r3, r7
 800eec4:	17db      	asrs	r3, r3, #31
 800eec6:	401f      	ands	r7, r3
 800eec8:	00bf      	lsls	r7, r7, #2
 800eeca:	0023      	movs	r3, r4
 800eecc:	201f      	movs	r0, #31
 800eece:	19c9      	adds	r1, r1, r7
 800eed0:	0037      	movs	r7, r6
 800eed2:	6922      	ldr	r2, [r4, #16]
 800eed4:	3314      	adds	r3, #20
 800eed6:	0092      	lsls	r2, r2, #2
 800eed8:	189a      	adds	r2, r3, r2
 800eeda:	4007      	ands	r7, r0
 800eedc:	4206      	tst	r6, r0
 800eede:	d029      	beq.n	800ef34 <__lshift+0xc4>
 800eee0:	3001      	adds	r0, #1
 800eee2:	1bc0      	subs	r0, r0, r7
 800eee4:	9003      	str	r0, [sp, #12]
 800eee6:	468c      	mov	ip, r1
 800eee8:	2000      	movs	r0, #0
 800eeea:	681e      	ldr	r6, [r3, #0]
 800eeec:	40be      	lsls	r6, r7
 800eeee:	4306      	orrs	r6, r0
 800eef0:	4660      	mov	r0, ip
 800eef2:	c040      	stmia	r0!, {r6}
 800eef4:	4684      	mov	ip, r0
 800eef6:	9e03      	ldr	r6, [sp, #12]
 800eef8:	cb01      	ldmia	r3!, {r0}
 800eefa:	40f0      	lsrs	r0, r6
 800eefc:	429a      	cmp	r2, r3
 800eefe:	d8f4      	bhi.n	800eeea <__lshift+0x7a>
 800ef00:	0026      	movs	r6, r4
 800ef02:	3615      	adds	r6, #21
 800ef04:	2304      	movs	r3, #4
 800ef06:	42b2      	cmp	r2, r6
 800ef08:	d304      	bcc.n	800ef14 <__lshift+0xa4>
 800ef0a:	1b13      	subs	r3, r2, r4
 800ef0c:	3b15      	subs	r3, #21
 800ef0e:	089b      	lsrs	r3, r3, #2
 800ef10:	3301      	adds	r3, #1
 800ef12:	009b      	lsls	r3, r3, #2
 800ef14:	50c8      	str	r0, [r1, r3]
 800ef16:	2800      	cmp	r0, #0
 800ef18:	d002      	beq.n	800ef20 <__lshift+0xb0>
 800ef1a:	9b01      	ldr	r3, [sp, #4]
 800ef1c:	3302      	adds	r3, #2
 800ef1e:	9300      	str	r3, [sp, #0]
 800ef20:	9b00      	ldr	r3, [sp, #0]
 800ef22:	9802      	ldr	r0, [sp, #8]
 800ef24:	3b01      	subs	r3, #1
 800ef26:	0021      	movs	r1, r4
 800ef28:	612b      	str	r3, [r5, #16]
 800ef2a:	f7ff fdc3 	bl	800eab4 <_Bfree>
 800ef2e:	0028      	movs	r0, r5
 800ef30:	b005      	add	sp, #20
 800ef32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef34:	cb01      	ldmia	r3!, {r0}
 800ef36:	c101      	stmia	r1!, {r0}
 800ef38:	429a      	cmp	r2, r3
 800ef3a:	d8fb      	bhi.n	800ef34 <__lshift+0xc4>
 800ef3c:	e7f0      	b.n	800ef20 <__lshift+0xb0>
 800ef3e:	46c0      	nop			@ (mov r8, r8)
 800ef40:	0801b478 	.word	0x0801b478
 800ef44:	0801b489 	.word	0x0801b489

0800ef48 <__mcmp>:
 800ef48:	b530      	push	{r4, r5, lr}
 800ef4a:	690b      	ldr	r3, [r1, #16]
 800ef4c:	6904      	ldr	r4, [r0, #16]
 800ef4e:	0002      	movs	r2, r0
 800ef50:	1ae0      	subs	r0, r4, r3
 800ef52:	429c      	cmp	r4, r3
 800ef54:	d10f      	bne.n	800ef76 <__mcmp+0x2e>
 800ef56:	3214      	adds	r2, #20
 800ef58:	009b      	lsls	r3, r3, #2
 800ef5a:	3114      	adds	r1, #20
 800ef5c:	0014      	movs	r4, r2
 800ef5e:	18c9      	adds	r1, r1, r3
 800ef60:	18d2      	adds	r2, r2, r3
 800ef62:	3a04      	subs	r2, #4
 800ef64:	3904      	subs	r1, #4
 800ef66:	6815      	ldr	r5, [r2, #0]
 800ef68:	680b      	ldr	r3, [r1, #0]
 800ef6a:	429d      	cmp	r5, r3
 800ef6c:	d004      	beq.n	800ef78 <__mcmp+0x30>
 800ef6e:	2001      	movs	r0, #1
 800ef70:	429d      	cmp	r5, r3
 800ef72:	d200      	bcs.n	800ef76 <__mcmp+0x2e>
 800ef74:	3802      	subs	r0, #2
 800ef76:	bd30      	pop	{r4, r5, pc}
 800ef78:	4294      	cmp	r4, r2
 800ef7a:	d3f2      	bcc.n	800ef62 <__mcmp+0x1a>
 800ef7c:	e7fb      	b.n	800ef76 <__mcmp+0x2e>
	...

0800ef80 <__mdiff>:
 800ef80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef82:	000c      	movs	r4, r1
 800ef84:	b087      	sub	sp, #28
 800ef86:	9000      	str	r0, [sp, #0]
 800ef88:	0011      	movs	r1, r2
 800ef8a:	0020      	movs	r0, r4
 800ef8c:	0017      	movs	r7, r2
 800ef8e:	f7ff ffdb 	bl	800ef48 <__mcmp>
 800ef92:	1e05      	subs	r5, r0, #0
 800ef94:	d110      	bne.n	800efb8 <__mdiff+0x38>
 800ef96:	0001      	movs	r1, r0
 800ef98:	9800      	ldr	r0, [sp, #0]
 800ef9a:	f7ff fd47 	bl	800ea2c <_Balloc>
 800ef9e:	1e02      	subs	r2, r0, #0
 800efa0:	d104      	bne.n	800efac <__mdiff+0x2c>
 800efa2:	4b40      	ldr	r3, [pc, #256]	@ (800f0a4 <__mdiff+0x124>)
 800efa4:	4840      	ldr	r0, [pc, #256]	@ (800f0a8 <__mdiff+0x128>)
 800efa6:	4941      	ldr	r1, [pc, #260]	@ (800f0ac <__mdiff+0x12c>)
 800efa8:	f000 fb84 	bl	800f6b4 <__assert_func>
 800efac:	2301      	movs	r3, #1
 800efae:	6145      	str	r5, [r0, #20]
 800efb0:	6103      	str	r3, [r0, #16]
 800efb2:	0010      	movs	r0, r2
 800efb4:	b007      	add	sp, #28
 800efb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efb8:	2600      	movs	r6, #0
 800efba:	42b0      	cmp	r0, r6
 800efbc:	da03      	bge.n	800efc6 <__mdiff+0x46>
 800efbe:	0023      	movs	r3, r4
 800efc0:	003c      	movs	r4, r7
 800efc2:	001f      	movs	r7, r3
 800efc4:	3601      	adds	r6, #1
 800efc6:	6861      	ldr	r1, [r4, #4]
 800efc8:	9800      	ldr	r0, [sp, #0]
 800efca:	f7ff fd2f 	bl	800ea2c <_Balloc>
 800efce:	1e02      	subs	r2, r0, #0
 800efd0:	d103      	bne.n	800efda <__mdiff+0x5a>
 800efd2:	4b34      	ldr	r3, [pc, #208]	@ (800f0a4 <__mdiff+0x124>)
 800efd4:	4834      	ldr	r0, [pc, #208]	@ (800f0a8 <__mdiff+0x128>)
 800efd6:	4936      	ldr	r1, [pc, #216]	@ (800f0b0 <__mdiff+0x130>)
 800efd8:	e7e6      	b.n	800efa8 <__mdiff+0x28>
 800efda:	6923      	ldr	r3, [r4, #16]
 800efdc:	3414      	adds	r4, #20
 800efde:	9300      	str	r3, [sp, #0]
 800efe0:	009b      	lsls	r3, r3, #2
 800efe2:	18e3      	adds	r3, r4, r3
 800efe4:	0021      	movs	r1, r4
 800efe6:	9401      	str	r4, [sp, #4]
 800efe8:	003c      	movs	r4, r7
 800efea:	9302      	str	r3, [sp, #8]
 800efec:	693b      	ldr	r3, [r7, #16]
 800efee:	3414      	adds	r4, #20
 800eff0:	009b      	lsls	r3, r3, #2
 800eff2:	18e3      	adds	r3, r4, r3
 800eff4:	9303      	str	r3, [sp, #12]
 800eff6:	0003      	movs	r3, r0
 800eff8:	60c6      	str	r6, [r0, #12]
 800effa:	468c      	mov	ip, r1
 800effc:	2000      	movs	r0, #0
 800effe:	3314      	adds	r3, #20
 800f000:	9304      	str	r3, [sp, #16]
 800f002:	9305      	str	r3, [sp, #20]
 800f004:	4663      	mov	r3, ip
 800f006:	cb20      	ldmia	r3!, {r5}
 800f008:	b2a9      	uxth	r1, r5
 800f00a:	000e      	movs	r6, r1
 800f00c:	469c      	mov	ip, r3
 800f00e:	cc08      	ldmia	r4!, {r3}
 800f010:	0c2d      	lsrs	r5, r5, #16
 800f012:	b299      	uxth	r1, r3
 800f014:	1a71      	subs	r1, r6, r1
 800f016:	1809      	adds	r1, r1, r0
 800f018:	0c1b      	lsrs	r3, r3, #16
 800f01a:	1408      	asrs	r0, r1, #16
 800f01c:	1aeb      	subs	r3, r5, r3
 800f01e:	181b      	adds	r3, r3, r0
 800f020:	1418      	asrs	r0, r3, #16
 800f022:	b289      	uxth	r1, r1
 800f024:	041b      	lsls	r3, r3, #16
 800f026:	4319      	orrs	r1, r3
 800f028:	9b05      	ldr	r3, [sp, #20]
 800f02a:	c302      	stmia	r3!, {r1}
 800f02c:	9305      	str	r3, [sp, #20]
 800f02e:	9b03      	ldr	r3, [sp, #12]
 800f030:	42a3      	cmp	r3, r4
 800f032:	d8e7      	bhi.n	800f004 <__mdiff+0x84>
 800f034:	0039      	movs	r1, r7
 800f036:	9c03      	ldr	r4, [sp, #12]
 800f038:	3115      	adds	r1, #21
 800f03a:	2304      	movs	r3, #4
 800f03c:	428c      	cmp	r4, r1
 800f03e:	d304      	bcc.n	800f04a <__mdiff+0xca>
 800f040:	1be3      	subs	r3, r4, r7
 800f042:	3b15      	subs	r3, #21
 800f044:	089b      	lsrs	r3, r3, #2
 800f046:	3301      	adds	r3, #1
 800f048:	009b      	lsls	r3, r3, #2
 800f04a:	9901      	ldr	r1, [sp, #4]
 800f04c:	18cd      	adds	r5, r1, r3
 800f04e:	9904      	ldr	r1, [sp, #16]
 800f050:	002e      	movs	r6, r5
 800f052:	18cb      	adds	r3, r1, r3
 800f054:	001f      	movs	r7, r3
 800f056:	9902      	ldr	r1, [sp, #8]
 800f058:	428e      	cmp	r6, r1
 800f05a:	d311      	bcc.n	800f080 <__mdiff+0x100>
 800f05c:	9c02      	ldr	r4, [sp, #8]
 800f05e:	1ee9      	subs	r1, r5, #3
 800f060:	2000      	movs	r0, #0
 800f062:	428c      	cmp	r4, r1
 800f064:	d304      	bcc.n	800f070 <__mdiff+0xf0>
 800f066:	0021      	movs	r1, r4
 800f068:	3103      	adds	r1, #3
 800f06a:	1b49      	subs	r1, r1, r5
 800f06c:	0889      	lsrs	r1, r1, #2
 800f06e:	0088      	lsls	r0, r1, #2
 800f070:	181b      	adds	r3, r3, r0
 800f072:	3b04      	subs	r3, #4
 800f074:	6819      	ldr	r1, [r3, #0]
 800f076:	2900      	cmp	r1, #0
 800f078:	d010      	beq.n	800f09c <__mdiff+0x11c>
 800f07a:	9b00      	ldr	r3, [sp, #0]
 800f07c:	6113      	str	r3, [r2, #16]
 800f07e:	e798      	b.n	800efb2 <__mdiff+0x32>
 800f080:	4684      	mov	ip, r0
 800f082:	ce02      	ldmia	r6!, {r1}
 800f084:	b288      	uxth	r0, r1
 800f086:	4460      	add	r0, ip
 800f088:	1400      	asrs	r0, r0, #16
 800f08a:	0c0c      	lsrs	r4, r1, #16
 800f08c:	1904      	adds	r4, r0, r4
 800f08e:	4461      	add	r1, ip
 800f090:	1420      	asrs	r0, r4, #16
 800f092:	b289      	uxth	r1, r1
 800f094:	0424      	lsls	r4, r4, #16
 800f096:	4321      	orrs	r1, r4
 800f098:	c702      	stmia	r7!, {r1}
 800f09a:	e7dc      	b.n	800f056 <__mdiff+0xd6>
 800f09c:	9900      	ldr	r1, [sp, #0]
 800f09e:	3901      	subs	r1, #1
 800f0a0:	9100      	str	r1, [sp, #0]
 800f0a2:	e7e6      	b.n	800f072 <__mdiff+0xf2>
 800f0a4:	0801b478 	.word	0x0801b478
 800f0a8:	0801b489 	.word	0x0801b489
 800f0ac:	00000237 	.word	0x00000237
 800f0b0:	00000245 	.word	0x00000245

0800f0b4 <__d2b>:
 800f0b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f0b6:	2101      	movs	r1, #1
 800f0b8:	0016      	movs	r6, r2
 800f0ba:	001f      	movs	r7, r3
 800f0bc:	f7ff fcb6 	bl	800ea2c <_Balloc>
 800f0c0:	1e04      	subs	r4, r0, #0
 800f0c2:	d105      	bne.n	800f0d0 <__d2b+0x1c>
 800f0c4:	0022      	movs	r2, r4
 800f0c6:	4b25      	ldr	r3, [pc, #148]	@ (800f15c <__d2b+0xa8>)
 800f0c8:	4825      	ldr	r0, [pc, #148]	@ (800f160 <__d2b+0xac>)
 800f0ca:	4926      	ldr	r1, [pc, #152]	@ (800f164 <__d2b+0xb0>)
 800f0cc:	f000 faf2 	bl	800f6b4 <__assert_func>
 800f0d0:	033b      	lsls	r3, r7, #12
 800f0d2:	007d      	lsls	r5, r7, #1
 800f0d4:	0b1b      	lsrs	r3, r3, #12
 800f0d6:	0d6d      	lsrs	r5, r5, #21
 800f0d8:	d002      	beq.n	800f0e0 <__d2b+0x2c>
 800f0da:	2280      	movs	r2, #128	@ 0x80
 800f0dc:	0352      	lsls	r2, r2, #13
 800f0de:	4313      	orrs	r3, r2
 800f0e0:	9301      	str	r3, [sp, #4]
 800f0e2:	2e00      	cmp	r6, #0
 800f0e4:	d025      	beq.n	800f132 <__d2b+0x7e>
 800f0e6:	4668      	mov	r0, sp
 800f0e8:	9600      	str	r6, [sp, #0]
 800f0ea:	f7ff fd6c 	bl	800ebc6 <__lo0bits>
 800f0ee:	9b01      	ldr	r3, [sp, #4]
 800f0f0:	9900      	ldr	r1, [sp, #0]
 800f0f2:	2800      	cmp	r0, #0
 800f0f4:	d01b      	beq.n	800f12e <__d2b+0x7a>
 800f0f6:	2220      	movs	r2, #32
 800f0f8:	001e      	movs	r6, r3
 800f0fa:	1a12      	subs	r2, r2, r0
 800f0fc:	4096      	lsls	r6, r2
 800f0fe:	0032      	movs	r2, r6
 800f100:	40c3      	lsrs	r3, r0
 800f102:	430a      	orrs	r2, r1
 800f104:	6162      	str	r2, [r4, #20]
 800f106:	9301      	str	r3, [sp, #4]
 800f108:	9e01      	ldr	r6, [sp, #4]
 800f10a:	61a6      	str	r6, [r4, #24]
 800f10c:	1e73      	subs	r3, r6, #1
 800f10e:	419e      	sbcs	r6, r3
 800f110:	3601      	adds	r6, #1
 800f112:	6126      	str	r6, [r4, #16]
 800f114:	2d00      	cmp	r5, #0
 800f116:	d014      	beq.n	800f142 <__d2b+0x8e>
 800f118:	2635      	movs	r6, #53	@ 0x35
 800f11a:	4b13      	ldr	r3, [pc, #76]	@ (800f168 <__d2b+0xb4>)
 800f11c:	18ed      	adds	r5, r5, r3
 800f11e:	9b08      	ldr	r3, [sp, #32]
 800f120:	182d      	adds	r5, r5, r0
 800f122:	601d      	str	r5, [r3, #0]
 800f124:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f126:	1a36      	subs	r6, r6, r0
 800f128:	601e      	str	r6, [r3, #0]
 800f12a:	0020      	movs	r0, r4
 800f12c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f12e:	6161      	str	r1, [r4, #20]
 800f130:	e7ea      	b.n	800f108 <__d2b+0x54>
 800f132:	a801      	add	r0, sp, #4
 800f134:	f7ff fd47 	bl	800ebc6 <__lo0bits>
 800f138:	9b01      	ldr	r3, [sp, #4]
 800f13a:	2601      	movs	r6, #1
 800f13c:	6163      	str	r3, [r4, #20]
 800f13e:	3020      	adds	r0, #32
 800f140:	e7e7      	b.n	800f112 <__d2b+0x5e>
 800f142:	4b0a      	ldr	r3, [pc, #40]	@ (800f16c <__d2b+0xb8>)
 800f144:	18c0      	adds	r0, r0, r3
 800f146:	9b08      	ldr	r3, [sp, #32]
 800f148:	6018      	str	r0, [r3, #0]
 800f14a:	4b09      	ldr	r3, [pc, #36]	@ (800f170 <__d2b+0xbc>)
 800f14c:	18f3      	adds	r3, r6, r3
 800f14e:	009b      	lsls	r3, r3, #2
 800f150:	18e3      	adds	r3, r4, r3
 800f152:	6958      	ldr	r0, [r3, #20]
 800f154:	f7ff fd16 	bl	800eb84 <__hi0bits>
 800f158:	0176      	lsls	r6, r6, #5
 800f15a:	e7e3      	b.n	800f124 <__d2b+0x70>
 800f15c:	0801b478 	.word	0x0801b478
 800f160:	0801b489 	.word	0x0801b489
 800f164:	0000030f 	.word	0x0000030f
 800f168:	fffffbcd 	.word	0xfffffbcd
 800f16c:	fffffbce 	.word	0xfffffbce
 800f170:	3fffffff 	.word	0x3fffffff

0800f174 <__sfputc_r>:
 800f174:	6893      	ldr	r3, [r2, #8]
 800f176:	b510      	push	{r4, lr}
 800f178:	3b01      	subs	r3, #1
 800f17a:	6093      	str	r3, [r2, #8]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	da04      	bge.n	800f18a <__sfputc_r+0x16>
 800f180:	6994      	ldr	r4, [r2, #24]
 800f182:	42a3      	cmp	r3, r4
 800f184:	db07      	blt.n	800f196 <__sfputc_r+0x22>
 800f186:	290a      	cmp	r1, #10
 800f188:	d005      	beq.n	800f196 <__sfputc_r+0x22>
 800f18a:	6813      	ldr	r3, [r2, #0]
 800f18c:	1c58      	adds	r0, r3, #1
 800f18e:	6010      	str	r0, [r2, #0]
 800f190:	7019      	strb	r1, [r3, #0]
 800f192:	0008      	movs	r0, r1
 800f194:	bd10      	pop	{r4, pc}
 800f196:	f000 f9e2 	bl	800f55e <__swbuf_r>
 800f19a:	0001      	movs	r1, r0
 800f19c:	e7f9      	b.n	800f192 <__sfputc_r+0x1e>

0800f19e <__sfputs_r>:
 800f19e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1a0:	0006      	movs	r6, r0
 800f1a2:	000f      	movs	r7, r1
 800f1a4:	0014      	movs	r4, r2
 800f1a6:	18d5      	adds	r5, r2, r3
 800f1a8:	42ac      	cmp	r4, r5
 800f1aa:	d101      	bne.n	800f1b0 <__sfputs_r+0x12>
 800f1ac:	2000      	movs	r0, #0
 800f1ae:	e007      	b.n	800f1c0 <__sfputs_r+0x22>
 800f1b0:	7821      	ldrb	r1, [r4, #0]
 800f1b2:	003a      	movs	r2, r7
 800f1b4:	0030      	movs	r0, r6
 800f1b6:	f7ff ffdd 	bl	800f174 <__sfputc_r>
 800f1ba:	3401      	adds	r4, #1
 800f1bc:	1c43      	adds	r3, r0, #1
 800f1be:	d1f3      	bne.n	800f1a8 <__sfputs_r+0xa>
 800f1c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f1c4 <_vfiprintf_r>:
 800f1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1c6:	b0a1      	sub	sp, #132	@ 0x84
 800f1c8:	000f      	movs	r7, r1
 800f1ca:	0015      	movs	r5, r2
 800f1cc:	001e      	movs	r6, r3
 800f1ce:	9003      	str	r0, [sp, #12]
 800f1d0:	2800      	cmp	r0, #0
 800f1d2:	d004      	beq.n	800f1de <_vfiprintf_r+0x1a>
 800f1d4:	6a03      	ldr	r3, [r0, #32]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d101      	bne.n	800f1de <_vfiprintf_r+0x1a>
 800f1da:	f7fe fc11 	bl	800da00 <__sinit>
 800f1de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f1e0:	07db      	lsls	r3, r3, #31
 800f1e2:	d405      	bmi.n	800f1f0 <_vfiprintf_r+0x2c>
 800f1e4:	89bb      	ldrh	r3, [r7, #12]
 800f1e6:	059b      	lsls	r3, r3, #22
 800f1e8:	d402      	bmi.n	800f1f0 <_vfiprintf_r+0x2c>
 800f1ea:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f1ec:	f7fe fd45 	bl	800dc7a <__retarget_lock_acquire_recursive>
 800f1f0:	89bb      	ldrh	r3, [r7, #12]
 800f1f2:	071b      	lsls	r3, r3, #28
 800f1f4:	d502      	bpl.n	800f1fc <_vfiprintf_r+0x38>
 800f1f6:	693b      	ldr	r3, [r7, #16]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d113      	bne.n	800f224 <_vfiprintf_r+0x60>
 800f1fc:	0039      	movs	r1, r7
 800f1fe:	9803      	ldr	r0, [sp, #12]
 800f200:	f000 f9f0 	bl	800f5e4 <__swsetup_r>
 800f204:	2800      	cmp	r0, #0
 800f206:	d00d      	beq.n	800f224 <_vfiprintf_r+0x60>
 800f208:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f20a:	07db      	lsls	r3, r3, #31
 800f20c:	d503      	bpl.n	800f216 <_vfiprintf_r+0x52>
 800f20e:	2001      	movs	r0, #1
 800f210:	4240      	negs	r0, r0
 800f212:	b021      	add	sp, #132	@ 0x84
 800f214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f216:	89bb      	ldrh	r3, [r7, #12]
 800f218:	059b      	lsls	r3, r3, #22
 800f21a:	d4f8      	bmi.n	800f20e <_vfiprintf_r+0x4a>
 800f21c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f21e:	f7fe fd2d 	bl	800dc7c <__retarget_lock_release_recursive>
 800f222:	e7f4      	b.n	800f20e <_vfiprintf_r+0x4a>
 800f224:	2300      	movs	r3, #0
 800f226:	ac08      	add	r4, sp, #32
 800f228:	6163      	str	r3, [r4, #20]
 800f22a:	3320      	adds	r3, #32
 800f22c:	7663      	strb	r3, [r4, #25]
 800f22e:	3310      	adds	r3, #16
 800f230:	76a3      	strb	r3, [r4, #26]
 800f232:	9607      	str	r6, [sp, #28]
 800f234:	002e      	movs	r6, r5
 800f236:	7833      	ldrb	r3, [r6, #0]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d001      	beq.n	800f240 <_vfiprintf_r+0x7c>
 800f23c:	2b25      	cmp	r3, #37	@ 0x25
 800f23e:	d148      	bne.n	800f2d2 <_vfiprintf_r+0x10e>
 800f240:	1b73      	subs	r3, r6, r5
 800f242:	9305      	str	r3, [sp, #20]
 800f244:	42ae      	cmp	r6, r5
 800f246:	d00b      	beq.n	800f260 <_vfiprintf_r+0x9c>
 800f248:	002a      	movs	r2, r5
 800f24a:	0039      	movs	r1, r7
 800f24c:	9803      	ldr	r0, [sp, #12]
 800f24e:	f7ff ffa6 	bl	800f19e <__sfputs_r>
 800f252:	3001      	adds	r0, #1
 800f254:	d100      	bne.n	800f258 <_vfiprintf_r+0x94>
 800f256:	e0ae      	b.n	800f3b6 <_vfiprintf_r+0x1f2>
 800f258:	6963      	ldr	r3, [r4, #20]
 800f25a:	9a05      	ldr	r2, [sp, #20]
 800f25c:	189b      	adds	r3, r3, r2
 800f25e:	6163      	str	r3, [r4, #20]
 800f260:	7833      	ldrb	r3, [r6, #0]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d100      	bne.n	800f268 <_vfiprintf_r+0xa4>
 800f266:	e0a6      	b.n	800f3b6 <_vfiprintf_r+0x1f2>
 800f268:	2201      	movs	r2, #1
 800f26a:	2300      	movs	r3, #0
 800f26c:	4252      	negs	r2, r2
 800f26e:	6062      	str	r2, [r4, #4]
 800f270:	a904      	add	r1, sp, #16
 800f272:	3254      	adds	r2, #84	@ 0x54
 800f274:	1852      	adds	r2, r2, r1
 800f276:	1c75      	adds	r5, r6, #1
 800f278:	6023      	str	r3, [r4, #0]
 800f27a:	60e3      	str	r3, [r4, #12]
 800f27c:	60a3      	str	r3, [r4, #8]
 800f27e:	7013      	strb	r3, [r2, #0]
 800f280:	65a3      	str	r3, [r4, #88]	@ 0x58
 800f282:	4b59      	ldr	r3, [pc, #356]	@ (800f3e8 <_vfiprintf_r+0x224>)
 800f284:	2205      	movs	r2, #5
 800f286:	0018      	movs	r0, r3
 800f288:	7829      	ldrb	r1, [r5, #0]
 800f28a:	9305      	str	r3, [sp, #20]
 800f28c:	f7fe fcf7 	bl	800dc7e <memchr>
 800f290:	1c6e      	adds	r6, r5, #1
 800f292:	2800      	cmp	r0, #0
 800f294:	d11f      	bne.n	800f2d6 <_vfiprintf_r+0x112>
 800f296:	6822      	ldr	r2, [r4, #0]
 800f298:	06d3      	lsls	r3, r2, #27
 800f29a:	d504      	bpl.n	800f2a6 <_vfiprintf_r+0xe2>
 800f29c:	2353      	movs	r3, #83	@ 0x53
 800f29e:	a904      	add	r1, sp, #16
 800f2a0:	185b      	adds	r3, r3, r1
 800f2a2:	2120      	movs	r1, #32
 800f2a4:	7019      	strb	r1, [r3, #0]
 800f2a6:	0713      	lsls	r3, r2, #28
 800f2a8:	d504      	bpl.n	800f2b4 <_vfiprintf_r+0xf0>
 800f2aa:	2353      	movs	r3, #83	@ 0x53
 800f2ac:	a904      	add	r1, sp, #16
 800f2ae:	185b      	adds	r3, r3, r1
 800f2b0:	212b      	movs	r1, #43	@ 0x2b
 800f2b2:	7019      	strb	r1, [r3, #0]
 800f2b4:	782b      	ldrb	r3, [r5, #0]
 800f2b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2b8:	d016      	beq.n	800f2e8 <_vfiprintf_r+0x124>
 800f2ba:	002e      	movs	r6, r5
 800f2bc:	2100      	movs	r1, #0
 800f2be:	200a      	movs	r0, #10
 800f2c0:	68e3      	ldr	r3, [r4, #12]
 800f2c2:	7832      	ldrb	r2, [r6, #0]
 800f2c4:	1c75      	adds	r5, r6, #1
 800f2c6:	3a30      	subs	r2, #48	@ 0x30
 800f2c8:	2a09      	cmp	r2, #9
 800f2ca:	d950      	bls.n	800f36e <_vfiprintf_r+0x1aa>
 800f2cc:	2900      	cmp	r1, #0
 800f2ce:	d111      	bne.n	800f2f4 <_vfiprintf_r+0x130>
 800f2d0:	e017      	b.n	800f302 <_vfiprintf_r+0x13e>
 800f2d2:	3601      	adds	r6, #1
 800f2d4:	e7af      	b.n	800f236 <_vfiprintf_r+0x72>
 800f2d6:	9b05      	ldr	r3, [sp, #20]
 800f2d8:	6822      	ldr	r2, [r4, #0]
 800f2da:	1ac0      	subs	r0, r0, r3
 800f2dc:	2301      	movs	r3, #1
 800f2de:	4083      	lsls	r3, r0
 800f2e0:	4313      	orrs	r3, r2
 800f2e2:	0035      	movs	r5, r6
 800f2e4:	6023      	str	r3, [r4, #0]
 800f2e6:	e7cc      	b.n	800f282 <_vfiprintf_r+0xbe>
 800f2e8:	9b07      	ldr	r3, [sp, #28]
 800f2ea:	1d19      	adds	r1, r3, #4
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	9107      	str	r1, [sp, #28]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	db01      	blt.n	800f2f8 <_vfiprintf_r+0x134>
 800f2f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f2f6:	e004      	b.n	800f302 <_vfiprintf_r+0x13e>
 800f2f8:	425b      	negs	r3, r3
 800f2fa:	60e3      	str	r3, [r4, #12]
 800f2fc:	2302      	movs	r3, #2
 800f2fe:	4313      	orrs	r3, r2
 800f300:	6023      	str	r3, [r4, #0]
 800f302:	7833      	ldrb	r3, [r6, #0]
 800f304:	2b2e      	cmp	r3, #46	@ 0x2e
 800f306:	d10c      	bne.n	800f322 <_vfiprintf_r+0x15e>
 800f308:	7873      	ldrb	r3, [r6, #1]
 800f30a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f30c:	d134      	bne.n	800f378 <_vfiprintf_r+0x1b4>
 800f30e:	9b07      	ldr	r3, [sp, #28]
 800f310:	3602      	adds	r6, #2
 800f312:	1d1a      	adds	r2, r3, #4
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	9207      	str	r2, [sp, #28]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	da01      	bge.n	800f320 <_vfiprintf_r+0x15c>
 800f31c:	2301      	movs	r3, #1
 800f31e:	425b      	negs	r3, r3
 800f320:	9309      	str	r3, [sp, #36]	@ 0x24
 800f322:	4d32      	ldr	r5, [pc, #200]	@ (800f3ec <_vfiprintf_r+0x228>)
 800f324:	2203      	movs	r2, #3
 800f326:	0028      	movs	r0, r5
 800f328:	7831      	ldrb	r1, [r6, #0]
 800f32a:	f7fe fca8 	bl	800dc7e <memchr>
 800f32e:	2800      	cmp	r0, #0
 800f330:	d006      	beq.n	800f340 <_vfiprintf_r+0x17c>
 800f332:	2340      	movs	r3, #64	@ 0x40
 800f334:	1b40      	subs	r0, r0, r5
 800f336:	4083      	lsls	r3, r0
 800f338:	6822      	ldr	r2, [r4, #0]
 800f33a:	3601      	adds	r6, #1
 800f33c:	4313      	orrs	r3, r2
 800f33e:	6023      	str	r3, [r4, #0]
 800f340:	7831      	ldrb	r1, [r6, #0]
 800f342:	2206      	movs	r2, #6
 800f344:	482a      	ldr	r0, [pc, #168]	@ (800f3f0 <_vfiprintf_r+0x22c>)
 800f346:	1c75      	adds	r5, r6, #1
 800f348:	7621      	strb	r1, [r4, #24]
 800f34a:	f7fe fc98 	bl	800dc7e <memchr>
 800f34e:	2800      	cmp	r0, #0
 800f350:	d040      	beq.n	800f3d4 <_vfiprintf_r+0x210>
 800f352:	4b28      	ldr	r3, [pc, #160]	@ (800f3f4 <_vfiprintf_r+0x230>)
 800f354:	2b00      	cmp	r3, #0
 800f356:	d122      	bne.n	800f39e <_vfiprintf_r+0x1da>
 800f358:	2207      	movs	r2, #7
 800f35a:	9b07      	ldr	r3, [sp, #28]
 800f35c:	3307      	adds	r3, #7
 800f35e:	4393      	bics	r3, r2
 800f360:	3308      	adds	r3, #8
 800f362:	9307      	str	r3, [sp, #28]
 800f364:	6963      	ldr	r3, [r4, #20]
 800f366:	9a04      	ldr	r2, [sp, #16]
 800f368:	189b      	adds	r3, r3, r2
 800f36a:	6163      	str	r3, [r4, #20]
 800f36c:	e762      	b.n	800f234 <_vfiprintf_r+0x70>
 800f36e:	4343      	muls	r3, r0
 800f370:	002e      	movs	r6, r5
 800f372:	2101      	movs	r1, #1
 800f374:	189b      	adds	r3, r3, r2
 800f376:	e7a4      	b.n	800f2c2 <_vfiprintf_r+0xfe>
 800f378:	2300      	movs	r3, #0
 800f37a:	200a      	movs	r0, #10
 800f37c:	0019      	movs	r1, r3
 800f37e:	3601      	adds	r6, #1
 800f380:	6063      	str	r3, [r4, #4]
 800f382:	7832      	ldrb	r2, [r6, #0]
 800f384:	1c75      	adds	r5, r6, #1
 800f386:	3a30      	subs	r2, #48	@ 0x30
 800f388:	2a09      	cmp	r2, #9
 800f38a:	d903      	bls.n	800f394 <_vfiprintf_r+0x1d0>
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d0c8      	beq.n	800f322 <_vfiprintf_r+0x15e>
 800f390:	9109      	str	r1, [sp, #36]	@ 0x24
 800f392:	e7c6      	b.n	800f322 <_vfiprintf_r+0x15e>
 800f394:	4341      	muls	r1, r0
 800f396:	002e      	movs	r6, r5
 800f398:	2301      	movs	r3, #1
 800f39a:	1889      	adds	r1, r1, r2
 800f39c:	e7f1      	b.n	800f382 <_vfiprintf_r+0x1be>
 800f39e:	aa07      	add	r2, sp, #28
 800f3a0:	9200      	str	r2, [sp, #0]
 800f3a2:	0021      	movs	r1, r4
 800f3a4:	003a      	movs	r2, r7
 800f3a6:	4b14      	ldr	r3, [pc, #80]	@ (800f3f8 <_vfiprintf_r+0x234>)
 800f3a8:	9803      	ldr	r0, [sp, #12]
 800f3aa:	f7fd fedd 	bl	800d168 <_printf_float>
 800f3ae:	9004      	str	r0, [sp, #16]
 800f3b0:	9b04      	ldr	r3, [sp, #16]
 800f3b2:	3301      	adds	r3, #1
 800f3b4:	d1d6      	bne.n	800f364 <_vfiprintf_r+0x1a0>
 800f3b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f3b8:	07db      	lsls	r3, r3, #31
 800f3ba:	d405      	bmi.n	800f3c8 <_vfiprintf_r+0x204>
 800f3bc:	89bb      	ldrh	r3, [r7, #12]
 800f3be:	059b      	lsls	r3, r3, #22
 800f3c0:	d402      	bmi.n	800f3c8 <_vfiprintf_r+0x204>
 800f3c2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f3c4:	f7fe fc5a 	bl	800dc7c <__retarget_lock_release_recursive>
 800f3c8:	89bb      	ldrh	r3, [r7, #12]
 800f3ca:	065b      	lsls	r3, r3, #25
 800f3cc:	d500      	bpl.n	800f3d0 <_vfiprintf_r+0x20c>
 800f3ce:	e71e      	b.n	800f20e <_vfiprintf_r+0x4a>
 800f3d0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800f3d2:	e71e      	b.n	800f212 <_vfiprintf_r+0x4e>
 800f3d4:	aa07      	add	r2, sp, #28
 800f3d6:	9200      	str	r2, [sp, #0]
 800f3d8:	0021      	movs	r1, r4
 800f3da:	003a      	movs	r2, r7
 800f3dc:	4b06      	ldr	r3, [pc, #24]	@ (800f3f8 <_vfiprintf_r+0x234>)
 800f3de:	9803      	ldr	r0, [sp, #12]
 800f3e0:	f7fe f970 	bl	800d6c4 <_printf_i>
 800f3e4:	e7e3      	b.n	800f3ae <_vfiprintf_r+0x1ea>
 800f3e6:	46c0      	nop			@ (mov r8, r8)
 800f3e8:	0801b5e0 	.word	0x0801b5e0
 800f3ec:	0801b5e6 	.word	0x0801b5e6
 800f3f0:	0801b5ea 	.word	0x0801b5ea
 800f3f4:	0800d169 	.word	0x0800d169
 800f3f8:	0800f19f 	.word	0x0800f19f

0800f3fc <__sflush_r>:
 800f3fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f3fe:	220c      	movs	r2, #12
 800f400:	5e8b      	ldrsh	r3, [r1, r2]
 800f402:	0005      	movs	r5, r0
 800f404:	000c      	movs	r4, r1
 800f406:	071a      	lsls	r2, r3, #28
 800f408:	d456      	bmi.n	800f4b8 <__sflush_r+0xbc>
 800f40a:	684a      	ldr	r2, [r1, #4]
 800f40c:	2a00      	cmp	r2, #0
 800f40e:	dc02      	bgt.n	800f416 <__sflush_r+0x1a>
 800f410:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800f412:	2a00      	cmp	r2, #0
 800f414:	dd4e      	ble.n	800f4b4 <__sflush_r+0xb8>
 800f416:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800f418:	2f00      	cmp	r7, #0
 800f41a:	d04b      	beq.n	800f4b4 <__sflush_r+0xb8>
 800f41c:	2200      	movs	r2, #0
 800f41e:	2080      	movs	r0, #128	@ 0x80
 800f420:	682e      	ldr	r6, [r5, #0]
 800f422:	602a      	str	r2, [r5, #0]
 800f424:	001a      	movs	r2, r3
 800f426:	0140      	lsls	r0, r0, #5
 800f428:	6a21      	ldr	r1, [r4, #32]
 800f42a:	4002      	ands	r2, r0
 800f42c:	4203      	tst	r3, r0
 800f42e:	d033      	beq.n	800f498 <__sflush_r+0x9c>
 800f430:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f432:	89a3      	ldrh	r3, [r4, #12]
 800f434:	075b      	lsls	r3, r3, #29
 800f436:	d506      	bpl.n	800f446 <__sflush_r+0x4a>
 800f438:	6863      	ldr	r3, [r4, #4]
 800f43a:	1ad2      	subs	r2, r2, r3
 800f43c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d001      	beq.n	800f446 <__sflush_r+0x4a>
 800f442:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f444:	1ad2      	subs	r2, r2, r3
 800f446:	2300      	movs	r3, #0
 800f448:	0028      	movs	r0, r5
 800f44a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800f44c:	6a21      	ldr	r1, [r4, #32]
 800f44e:	47b8      	blx	r7
 800f450:	89a2      	ldrh	r2, [r4, #12]
 800f452:	1c43      	adds	r3, r0, #1
 800f454:	d106      	bne.n	800f464 <__sflush_r+0x68>
 800f456:	6829      	ldr	r1, [r5, #0]
 800f458:	291d      	cmp	r1, #29
 800f45a:	d846      	bhi.n	800f4ea <__sflush_r+0xee>
 800f45c:	4b29      	ldr	r3, [pc, #164]	@ (800f504 <__sflush_r+0x108>)
 800f45e:	410b      	asrs	r3, r1
 800f460:	07db      	lsls	r3, r3, #31
 800f462:	d442      	bmi.n	800f4ea <__sflush_r+0xee>
 800f464:	2300      	movs	r3, #0
 800f466:	6063      	str	r3, [r4, #4]
 800f468:	6923      	ldr	r3, [r4, #16]
 800f46a:	6023      	str	r3, [r4, #0]
 800f46c:	04d2      	lsls	r2, r2, #19
 800f46e:	d505      	bpl.n	800f47c <__sflush_r+0x80>
 800f470:	1c43      	adds	r3, r0, #1
 800f472:	d102      	bne.n	800f47a <__sflush_r+0x7e>
 800f474:	682b      	ldr	r3, [r5, #0]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d100      	bne.n	800f47c <__sflush_r+0x80>
 800f47a:	6560      	str	r0, [r4, #84]	@ 0x54
 800f47c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f47e:	602e      	str	r6, [r5, #0]
 800f480:	2900      	cmp	r1, #0
 800f482:	d017      	beq.n	800f4b4 <__sflush_r+0xb8>
 800f484:	0023      	movs	r3, r4
 800f486:	3344      	adds	r3, #68	@ 0x44
 800f488:	4299      	cmp	r1, r3
 800f48a:	d002      	beq.n	800f492 <__sflush_r+0x96>
 800f48c:	0028      	movs	r0, r5
 800f48e:	f7ff fa83 	bl	800e998 <_free_r>
 800f492:	2300      	movs	r3, #0
 800f494:	6363      	str	r3, [r4, #52]	@ 0x34
 800f496:	e00d      	b.n	800f4b4 <__sflush_r+0xb8>
 800f498:	2301      	movs	r3, #1
 800f49a:	0028      	movs	r0, r5
 800f49c:	47b8      	blx	r7
 800f49e:	0002      	movs	r2, r0
 800f4a0:	1c43      	adds	r3, r0, #1
 800f4a2:	d1c6      	bne.n	800f432 <__sflush_r+0x36>
 800f4a4:	682b      	ldr	r3, [r5, #0]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d0c3      	beq.n	800f432 <__sflush_r+0x36>
 800f4aa:	2b1d      	cmp	r3, #29
 800f4ac:	d001      	beq.n	800f4b2 <__sflush_r+0xb6>
 800f4ae:	2b16      	cmp	r3, #22
 800f4b0:	d11a      	bne.n	800f4e8 <__sflush_r+0xec>
 800f4b2:	602e      	str	r6, [r5, #0]
 800f4b4:	2000      	movs	r0, #0
 800f4b6:	e01e      	b.n	800f4f6 <__sflush_r+0xfa>
 800f4b8:	690e      	ldr	r6, [r1, #16]
 800f4ba:	2e00      	cmp	r6, #0
 800f4bc:	d0fa      	beq.n	800f4b4 <__sflush_r+0xb8>
 800f4be:	680f      	ldr	r7, [r1, #0]
 800f4c0:	600e      	str	r6, [r1, #0]
 800f4c2:	1bba      	subs	r2, r7, r6
 800f4c4:	9201      	str	r2, [sp, #4]
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	079b      	lsls	r3, r3, #30
 800f4ca:	d100      	bne.n	800f4ce <__sflush_r+0xd2>
 800f4cc:	694a      	ldr	r2, [r1, #20]
 800f4ce:	60a2      	str	r2, [r4, #8]
 800f4d0:	9b01      	ldr	r3, [sp, #4]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	ddee      	ble.n	800f4b4 <__sflush_r+0xb8>
 800f4d6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800f4d8:	0032      	movs	r2, r6
 800f4da:	001f      	movs	r7, r3
 800f4dc:	0028      	movs	r0, r5
 800f4de:	9b01      	ldr	r3, [sp, #4]
 800f4e0:	6a21      	ldr	r1, [r4, #32]
 800f4e2:	47b8      	blx	r7
 800f4e4:	2800      	cmp	r0, #0
 800f4e6:	dc07      	bgt.n	800f4f8 <__sflush_r+0xfc>
 800f4e8:	89a2      	ldrh	r2, [r4, #12]
 800f4ea:	2340      	movs	r3, #64	@ 0x40
 800f4ec:	2001      	movs	r0, #1
 800f4ee:	4313      	orrs	r3, r2
 800f4f0:	b21b      	sxth	r3, r3
 800f4f2:	81a3      	strh	r3, [r4, #12]
 800f4f4:	4240      	negs	r0, r0
 800f4f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f4f8:	9b01      	ldr	r3, [sp, #4]
 800f4fa:	1836      	adds	r6, r6, r0
 800f4fc:	1a1b      	subs	r3, r3, r0
 800f4fe:	9301      	str	r3, [sp, #4]
 800f500:	e7e6      	b.n	800f4d0 <__sflush_r+0xd4>
 800f502:	46c0      	nop			@ (mov r8, r8)
 800f504:	dfbffffe 	.word	0xdfbffffe

0800f508 <_fflush_r>:
 800f508:	690b      	ldr	r3, [r1, #16]
 800f50a:	b570      	push	{r4, r5, r6, lr}
 800f50c:	0005      	movs	r5, r0
 800f50e:	000c      	movs	r4, r1
 800f510:	2b00      	cmp	r3, #0
 800f512:	d102      	bne.n	800f51a <_fflush_r+0x12>
 800f514:	2500      	movs	r5, #0
 800f516:	0028      	movs	r0, r5
 800f518:	bd70      	pop	{r4, r5, r6, pc}
 800f51a:	2800      	cmp	r0, #0
 800f51c:	d004      	beq.n	800f528 <_fflush_r+0x20>
 800f51e:	6a03      	ldr	r3, [r0, #32]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d101      	bne.n	800f528 <_fflush_r+0x20>
 800f524:	f7fe fa6c 	bl	800da00 <__sinit>
 800f528:	220c      	movs	r2, #12
 800f52a:	5ea3      	ldrsh	r3, [r4, r2]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d0f1      	beq.n	800f514 <_fflush_r+0xc>
 800f530:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f532:	07d2      	lsls	r2, r2, #31
 800f534:	d404      	bmi.n	800f540 <_fflush_r+0x38>
 800f536:	059b      	lsls	r3, r3, #22
 800f538:	d402      	bmi.n	800f540 <_fflush_r+0x38>
 800f53a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f53c:	f7fe fb9d 	bl	800dc7a <__retarget_lock_acquire_recursive>
 800f540:	0028      	movs	r0, r5
 800f542:	0021      	movs	r1, r4
 800f544:	f7ff ff5a 	bl	800f3fc <__sflush_r>
 800f548:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f54a:	0005      	movs	r5, r0
 800f54c:	07db      	lsls	r3, r3, #31
 800f54e:	d4e2      	bmi.n	800f516 <_fflush_r+0xe>
 800f550:	89a3      	ldrh	r3, [r4, #12]
 800f552:	059b      	lsls	r3, r3, #22
 800f554:	d4df      	bmi.n	800f516 <_fflush_r+0xe>
 800f556:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f558:	f7fe fb90 	bl	800dc7c <__retarget_lock_release_recursive>
 800f55c:	e7db      	b.n	800f516 <_fflush_r+0xe>

0800f55e <__swbuf_r>:
 800f55e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f560:	0006      	movs	r6, r0
 800f562:	000d      	movs	r5, r1
 800f564:	0014      	movs	r4, r2
 800f566:	2800      	cmp	r0, #0
 800f568:	d004      	beq.n	800f574 <__swbuf_r+0x16>
 800f56a:	6a03      	ldr	r3, [r0, #32]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d101      	bne.n	800f574 <__swbuf_r+0x16>
 800f570:	f7fe fa46 	bl	800da00 <__sinit>
 800f574:	69a3      	ldr	r3, [r4, #24]
 800f576:	60a3      	str	r3, [r4, #8]
 800f578:	89a3      	ldrh	r3, [r4, #12]
 800f57a:	071b      	lsls	r3, r3, #28
 800f57c:	d502      	bpl.n	800f584 <__swbuf_r+0x26>
 800f57e:	6923      	ldr	r3, [r4, #16]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d109      	bne.n	800f598 <__swbuf_r+0x3a>
 800f584:	0021      	movs	r1, r4
 800f586:	0030      	movs	r0, r6
 800f588:	f000 f82c 	bl	800f5e4 <__swsetup_r>
 800f58c:	2800      	cmp	r0, #0
 800f58e:	d003      	beq.n	800f598 <__swbuf_r+0x3a>
 800f590:	2501      	movs	r5, #1
 800f592:	426d      	negs	r5, r5
 800f594:	0028      	movs	r0, r5
 800f596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f598:	6923      	ldr	r3, [r4, #16]
 800f59a:	6820      	ldr	r0, [r4, #0]
 800f59c:	b2ef      	uxtb	r7, r5
 800f59e:	1ac0      	subs	r0, r0, r3
 800f5a0:	6963      	ldr	r3, [r4, #20]
 800f5a2:	b2ed      	uxtb	r5, r5
 800f5a4:	4283      	cmp	r3, r0
 800f5a6:	dc05      	bgt.n	800f5b4 <__swbuf_r+0x56>
 800f5a8:	0021      	movs	r1, r4
 800f5aa:	0030      	movs	r0, r6
 800f5ac:	f7ff ffac 	bl	800f508 <_fflush_r>
 800f5b0:	2800      	cmp	r0, #0
 800f5b2:	d1ed      	bne.n	800f590 <__swbuf_r+0x32>
 800f5b4:	68a3      	ldr	r3, [r4, #8]
 800f5b6:	3001      	adds	r0, #1
 800f5b8:	3b01      	subs	r3, #1
 800f5ba:	60a3      	str	r3, [r4, #8]
 800f5bc:	6823      	ldr	r3, [r4, #0]
 800f5be:	1c5a      	adds	r2, r3, #1
 800f5c0:	6022      	str	r2, [r4, #0]
 800f5c2:	701f      	strb	r7, [r3, #0]
 800f5c4:	6963      	ldr	r3, [r4, #20]
 800f5c6:	4283      	cmp	r3, r0
 800f5c8:	d004      	beq.n	800f5d4 <__swbuf_r+0x76>
 800f5ca:	89a3      	ldrh	r3, [r4, #12]
 800f5cc:	07db      	lsls	r3, r3, #31
 800f5ce:	d5e1      	bpl.n	800f594 <__swbuf_r+0x36>
 800f5d0:	2d0a      	cmp	r5, #10
 800f5d2:	d1df      	bne.n	800f594 <__swbuf_r+0x36>
 800f5d4:	0021      	movs	r1, r4
 800f5d6:	0030      	movs	r0, r6
 800f5d8:	f7ff ff96 	bl	800f508 <_fflush_r>
 800f5dc:	2800      	cmp	r0, #0
 800f5de:	d0d9      	beq.n	800f594 <__swbuf_r+0x36>
 800f5e0:	e7d6      	b.n	800f590 <__swbuf_r+0x32>
	...

0800f5e4 <__swsetup_r>:
 800f5e4:	4b2d      	ldr	r3, [pc, #180]	@ (800f69c <__swsetup_r+0xb8>)
 800f5e6:	b570      	push	{r4, r5, r6, lr}
 800f5e8:	0005      	movs	r5, r0
 800f5ea:	6818      	ldr	r0, [r3, #0]
 800f5ec:	000c      	movs	r4, r1
 800f5ee:	2800      	cmp	r0, #0
 800f5f0:	d004      	beq.n	800f5fc <__swsetup_r+0x18>
 800f5f2:	6a03      	ldr	r3, [r0, #32]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d101      	bne.n	800f5fc <__swsetup_r+0x18>
 800f5f8:	f7fe fa02 	bl	800da00 <__sinit>
 800f5fc:	230c      	movs	r3, #12
 800f5fe:	5ee2      	ldrsh	r2, [r4, r3]
 800f600:	0713      	lsls	r3, r2, #28
 800f602:	d423      	bmi.n	800f64c <__swsetup_r+0x68>
 800f604:	06d3      	lsls	r3, r2, #27
 800f606:	d407      	bmi.n	800f618 <__swsetup_r+0x34>
 800f608:	2309      	movs	r3, #9
 800f60a:	602b      	str	r3, [r5, #0]
 800f60c:	2340      	movs	r3, #64	@ 0x40
 800f60e:	2001      	movs	r0, #1
 800f610:	4313      	orrs	r3, r2
 800f612:	81a3      	strh	r3, [r4, #12]
 800f614:	4240      	negs	r0, r0
 800f616:	e03a      	b.n	800f68e <__swsetup_r+0xaa>
 800f618:	0752      	lsls	r2, r2, #29
 800f61a:	d513      	bpl.n	800f644 <__swsetup_r+0x60>
 800f61c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f61e:	2900      	cmp	r1, #0
 800f620:	d008      	beq.n	800f634 <__swsetup_r+0x50>
 800f622:	0023      	movs	r3, r4
 800f624:	3344      	adds	r3, #68	@ 0x44
 800f626:	4299      	cmp	r1, r3
 800f628:	d002      	beq.n	800f630 <__swsetup_r+0x4c>
 800f62a:	0028      	movs	r0, r5
 800f62c:	f7ff f9b4 	bl	800e998 <_free_r>
 800f630:	2300      	movs	r3, #0
 800f632:	6363      	str	r3, [r4, #52]	@ 0x34
 800f634:	2224      	movs	r2, #36	@ 0x24
 800f636:	89a3      	ldrh	r3, [r4, #12]
 800f638:	4393      	bics	r3, r2
 800f63a:	81a3      	strh	r3, [r4, #12]
 800f63c:	2300      	movs	r3, #0
 800f63e:	6063      	str	r3, [r4, #4]
 800f640:	6923      	ldr	r3, [r4, #16]
 800f642:	6023      	str	r3, [r4, #0]
 800f644:	2308      	movs	r3, #8
 800f646:	89a2      	ldrh	r2, [r4, #12]
 800f648:	4313      	orrs	r3, r2
 800f64a:	81a3      	strh	r3, [r4, #12]
 800f64c:	6923      	ldr	r3, [r4, #16]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d10b      	bne.n	800f66a <__swsetup_r+0x86>
 800f652:	21a0      	movs	r1, #160	@ 0xa0
 800f654:	2280      	movs	r2, #128	@ 0x80
 800f656:	89a3      	ldrh	r3, [r4, #12]
 800f658:	0089      	lsls	r1, r1, #2
 800f65a:	0092      	lsls	r2, r2, #2
 800f65c:	400b      	ands	r3, r1
 800f65e:	4293      	cmp	r3, r2
 800f660:	d003      	beq.n	800f66a <__swsetup_r+0x86>
 800f662:	0021      	movs	r1, r4
 800f664:	0028      	movs	r0, r5
 800f666:	f000 f8b9 	bl	800f7dc <__smakebuf_r>
 800f66a:	230c      	movs	r3, #12
 800f66c:	5ee2      	ldrsh	r2, [r4, r3]
 800f66e:	2101      	movs	r1, #1
 800f670:	0013      	movs	r3, r2
 800f672:	400b      	ands	r3, r1
 800f674:	420a      	tst	r2, r1
 800f676:	d00b      	beq.n	800f690 <__swsetup_r+0xac>
 800f678:	2300      	movs	r3, #0
 800f67a:	60a3      	str	r3, [r4, #8]
 800f67c:	6963      	ldr	r3, [r4, #20]
 800f67e:	425b      	negs	r3, r3
 800f680:	61a3      	str	r3, [r4, #24]
 800f682:	2000      	movs	r0, #0
 800f684:	6923      	ldr	r3, [r4, #16]
 800f686:	4283      	cmp	r3, r0
 800f688:	d101      	bne.n	800f68e <__swsetup_r+0xaa>
 800f68a:	0613      	lsls	r3, r2, #24
 800f68c:	d4be      	bmi.n	800f60c <__swsetup_r+0x28>
 800f68e:	bd70      	pop	{r4, r5, r6, pc}
 800f690:	0791      	lsls	r1, r2, #30
 800f692:	d400      	bmi.n	800f696 <__swsetup_r+0xb2>
 800f694:	6963      	ldr	r3, [r4, #20]
 800f696:	60a3      	str	r3, [r4, #8]
 800f698:	e7f3      	b.n	800f682 <__swsetup_r+0x9e>
 800f69a:	46c0      	nop			@ (mov r8, r8)
 800f69c:	20000184 	.word	0x20000184

0800f6a0 <memcpy>:
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	b510      	push	{r4, lr}
 800f6a4:	429a      	cmp	r2, r3
 800f6a6:	d100      	bne.n	800f6aa <memcpy+0xa>
 800f6a8:	bd10      	pop	{r4, pc}
 800f6aa:	5ccc      	ldrb	r4, [r1, r3]
 800f6ac:	54c4      	strb	r4, [r0, r3]
 800f6ae:	3301      	adds	r3, #1
 800f6b0:	e7f8      	b.n	800f6a4 <memcpy+0x4>
	...

0800f6b4 <__assert_func>:
 800f6b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f6b6:	0014      	movs	r4, r2
 800f6b8:	001a      	movs	r2, r3
 800f6ba:	4b09      	ldr	r3, [pc, #36]	@ (800f6e0 <__assert_func+0x2c>)
 800f6bc:	0005      	movs	r5, r0
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	000e      	movs	r6, r1
 800f6c2:	68d8      	ldr	r0, [r3, #12]
 800f6c4:	4b07      	ldr	r3, [pc, #28]	@ (800f6e4 <__assert_func+0x30>)
 800f6c6:	2c00      	cmp	r4, #0
 800f6c8:	d101      	bne.n	800f6ce <__assert_func+0x1a>
 800f6ca:	4b07      	ldr	r3, [pc, #28]	@ (800f6e8 <__assert_func+0x34>)
 800f6cc:	001c      	movs	r4, r3
 800f6ce:	4907      	ldr	r1, [pc, #28]	@ (800f6ec <__assert_func+0x38>)
 800f6d0:	9301      	str	r3, [sp, #4]
 800f6d2:	9402      	str	r4, [sp, #8]
 800f6d4:	002b      	movs	r3, r5
 800f6d6:	9600      	str	r6, [sp, #0]
 800f6d8:	f7fe f9aa 	bl	800da30 <fiprintf>
 800f6dc:	f000 f8e4 	bl	800f8a8 <abort>
 800f6e0:	20000184 	.word	0x20000184
 800f6e4:	0801b5fb 	.word	0x0801b5fb
 800f6e8:	0801b636 	.word	0x0801b636
 800f6ec:	0801b608 	.word	0x0801b608

0800f6f0 <_calloc_r>:
 800f6f0:	b570      	push	{r4, r5, r6, lr}
 800f6f2:	0c0b      	lsrs	r3, r1, #16
 800f6f4:	0c15      	lsrs	r5, r2, #16
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d11e      	bne.n	800f738 <_calloc_r+0x48>
 800f6fa:	2d00      	cmp	r5, #0
 800f6fc:	d10c      	bne.n	800f718 <_calloc_r+0x28>
 800f6fe:	b289      	uxth	r1, r1
 800f700:	b294      	uxth	r4, r2
 800f702:	434c      	muls	r4, r1
 800f704:	0021      	movs	r1, r4
 800f706:	f7fd fbf9 	bl	800cefc <_malloc_r>
 800f70a:	1e05      	subs	r5, r0, #0
 800f70c:	d01a      	beq.n	800f744 <_calloc_r+0x54>
 800f70e:	0022      	movs	r2, r4
 800f710:	2100      	movs	r1, #0
 800f712:	f7fe fa05 	bl	800db20 <memset>
 800f716:	e016      	b.n	800f746 <_calloc_r+0x56>
 800f718:	1c2b      	adds	r3, r5, #0
 800f71a:	1c0c      	adds	r4, r1, #0
 800f71c:	b289      	uxth	r1, r1
 800f71e:	b292      	uxth	r2, r2
 800f720:	434a      	muls	r2, r1
 800f722:	b29b      	uxth	r3, r3
 800f724:	b2a1      	uxth	r1, r4
 800f726:	4359      	muls	r1, r3
 800f728:	0c14      	lsrs	r4, r2, #16
 800f72a:	190c      	adds	r4, r1, r4
 800f72c:	0c23      	lsrs	r3, r4, #16
 800f72e:	d107      	bne.n	800f740 <_calloc_r+0x50>
 800f730:	0424      	lsls	r4, r4, #16
 800f732:	b292      	uxth	r2, r2
 800f734:	4314      	orrs	r4, r2
 800f736:	e7e5      	b.n	800f704 <_calloc_r+0x14>
 800f738:	2d00      	cmp	r5, #0
 800f73a:	d101      	bne.n	800f740 <_calloc_r+0x50>
 800f73c:	1c14      	adds	r4, r2, #0
 800f73e:	e7ed      	b.n	800f71c <_calloc_r+0x2c>
 800f740:	230c      	movs	r3, #12
 800f742:	6003      	str	r3, [r0, #0]
 800f744:	2500      	movs	r5, #0
 800f746:	0028      	movs	r0, r5
 800f748:	bd70      	pop	{r4, r5, r6, pc}

0800f74a <__ascii_mbtowc>:
 800f74a:	b082      	sub	sp, #8
 800f74c:	2900      	cmp	r1, #0
 800f74e:	d100      	bne.n	800f752 <__ascii_mbtowc+0x8>
 800f750:	a901      	add	r1, sp, #4
 800f752:	1e10      	subs	r0, r2, #0
 800f754:	d006      	beq.n	800f764 <__ascii_mbtowc+0x1a>
 800f756:	2b00      	cmp	r3, #0
 800f758:	d006      	beq.n	800f768 <__ascii_mbtowc+0x1e>
 800f75a:	7813      	ldrb	r3, [r2, #0]
 800f75c:	600b      	str	r3, [r1, #0]
 800f75e:	7810      	ldrb	r0, [r2, #0]
 800f760:	1e43      	subs	r3, r0, #1
 800f762:	4198      	sbcs	r0, r3
 800f764:	b002      	add	sp, #8
 800f766:	4770      	bx	lr
 800f768:	2002      	movs	r0, #2
 800f76a:	4240      	negs	r0, r0
 800f76c:	e7fa      	b.n	800f764 <__ascii_mbtowc+0x1a>

0800f76e <__ascii_wctomb>:
 800f76e:	0003      	movs	r3, r0
 800f770:	1e08      	subs	r0, r1, #0
 800f772:	d005      	beq.n	800f780 <__ascii_wctomb+0x12>
 800f774:	2aff      	cmp	r2, #255	@ 0xff
 800f776:	d904      	bls.n	800f782 <__ascii_wctomb+0x14>
 800f778:	228a      	movs	r2, #138	@ 0x8a
 800f77a:	2001      	movs	r0, #1
 800f77c:	601a      	str	r2, [r3, #0]
 800f77e:	4240      	negs	r0, r0
 800f780:	4770      	bx	lr
 800f782:	2001      	movs	r0, #1
 800f784:	700a      	strb	r2, [r1, #0]
 800f786:	e7fb      	b.n	800f780 <__ascii_wctomb+0x12>

0800f788 <__swhatbuf_r>:
 800f788:	b570      	push	{r4, r5, r6, lr}
 800f78a:	000e      	movs	r6, r1
 800f78c:	001d      	movs	r5, r3
 800f78e:	230e      	movs	r3, #14
 800f790:	5ec9      	ldrsh	r1, [r1, r3]
 800f792:	0014      	movs	r4, r2
 800f794:	b096      	sub	sp, #88	@ 0x58
 800f796:	2900      	cmp	r1, #0
 800f798:	da0c      	bge.n	800f7b4 <__swhatbuf_r+0x2c>
 800f79a:	89b2      	ldrh	r2, [r6, #12]
 800f79c:	2380      	movs	r3, #128	@ 0x80
 800f79e:	0011      	movs	r1, r2
 800f7a0:	4019      	ands	r1, r3
 800f7a2:	421a      	tst	r2, r3
 800f7a4:	d114      	bne.n	800f7d0 <__swhatbuf_r+0x48>
 800f7a6:	2380      	movs	r3, #128	@ 0x80
 800f7a8:	00db      	lsls	r3, r3, #3
 800f7aa:	2000      	movs	r0, #0
 800f7ac:	6029      	str	r1, [r5, #0]
 800f7ae:	6023      	str	r3, [r4, #0]
 800f7b0:	b016      	add	sp, #88	@ 0x58
 800f7b2:	bd70      	pop	{r4, r5, r6, pc}
 800f7b4:	466a      	mov	r2, sp
 800f7b6:	f000 f853 	bl	800f860 <_fstat_r>
 800f7ba:	2800      	cmp	r0, #0
 800f7bc:	dbed      	blt.n	800f79a <__swhatbuf_r+0x12>
 800f7be:	23f0      	movs	r3, #240	@ 0xf0
 800f7c0:	9901      	ldr	r1, [sp, #4]
 800f7c2:	021b      	lsls	r3, r3, #8
 800f7c4:	4019      	ands	r1, r3
 800f7c6:	4b04      	ldr	r3, [pc, #16]	@ (800f7d8 <__swhatbuf_r+0x50>)
 800f7c8:	18c9      	adds	r1, r1, r3
 800f7ca:	424b      	negs	r3, r1
 800f7cc:	4159      	adcs	r1, r3
 800f7ce:	e7ea      	b.n	800f7a6 <__swhatbuf_r+0x1e>
 800f7d0:	2100      	movs	r1, #0
 800f7d2:	2340      	movs	r3, #64	@ 0x40
 800f7d4:	e7e9      	b.n	800f7aa <__swhatbuf_r+0x22>
 800f7d6:	46c0      	nop			@ (mov r8, r8)
 800f7d8:	ffffe000 	.word	0xffffe000

0800f7dc <__smakebuf_r>:
 800f7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7de:	2602      	movs	r6, #2
 800f7e0:	898b      	ldrh	r3, [r1, #12]
 800f7e2:	0005      	movs	r5, r0
 800f7e4:	000c      	movs	r4, r1
 800f7e6:	b085      	sub	sp, #20
 800f7e8:	4233      	tst	r3, r6
 800f7ea:	d007      	beq.n	800f7fc <__smakebuf_r+0x20>
 800f7ec:	0023      	movs	r3, r4
 800f7ee:	3347      	adds	r3, #71	@ 0x47
 800f7f0:	6023      	str	r3, [r4, #0]
 800f7f2:	6123      	str	r3, [r4, #16]
 800f7f4:	2301      	movs	r3, #1
 800f7f6:	6163      	str	r3, [r4, #20]
 800f7f8:	b005      	add	sp, #20
 800f7fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7fc:	ab03      	add	r3, sp, #12
 800f7fe:	aa02      	add	r2, sp, #8
 800f800:	f7ff ffc2 	bl	800f788 <__swhatbuf_r>
 800f804:	9f02      	ldr	r7, [sp, #8]
 800f806:	9001      	str	r0, [sp, #4]
 800f808:	0039      	movs	r1, r7
 800f80a:	0028      	movs	r0, r5
 800f80c:	f7fd fb76 	bl	800cefc <_malloc_r>
 800f810:	2800      	cmp	r0, #0
 800f812:	d108      	bne.n	800f826 <__smakebuf_r+0x4a>
 800f814:	220c      	movs	r2, #12
 800f816:	5ea3      	ldrsh	r3, [r4, r2]
 800f818:	059a      	lsls	r2, r3, #22
 800f81a:	d4ed      	bmi.n	800f7f8 <__smakebuf_r+0x1c>
 800f81c:	2203      	movs	r2, #3
 800f81e:	4393      	bics	r3, r2
 800f820:	431e      	orrs	r6, r3
 800f822:	81a6      	strh	r6, [r4, #12]
 800f824:	e7e2      	b.n	800f7ec <__smakebuf_r+0x10>
 800f826:	2380      	movs	r3, #128	@ 0x80
 800f828:	89a2      	ldrh	r2, [r4, #12]
 800f82a:	6020      	str	r0, [r4, #0]
 800f82c:	4313      	orrs	r3, r2
 800f82e:	81a3      	strh	r3, [r4, #12]
 800f830:	9b03      	ldr	r3, [sp, #12]
 800f832:	6120      	str	r0, [r4, #16]
 800f834:	6167      	str	r7, [r4, #20]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d00c      	beq.n	800f854 <__smakebuf_r+0x78>
 800f83a:	0028      	movs	r0, r5
 800f83c:	230e      	movs	r3, #14
 800f83e:	5ee1      	ldrsh	r1, [r4, r3]
 800f840:	f000 f820 	bl	800f884 <_isatty_r>
 800f844:	2800      	cmp	r0, #0
 800f846:	d005      	beq.n	800f854 <__smakebuf_r+0x78>
 800f848:	2303      	movs	r3, #3
 800f84a:	89a2      	ldrh	r2, [r4, #12]
 800f84c:	439a      	bics	r2, r3
 800f84e:	3b02      	subs	r3, #2
 800f850:	4313      	orrs	r3, r2
 800f852:	81a3      	strh	r3, [r4, #12]
 800f854:	89a3      	ldrh	r3, [r4, #12]
 800f856:	9a01      	ldr	r2, [sp, #4]
 800f858:	4313      	orrs	r3, r2
 800f85a:	81a3      	strh	r3, [r4, #12]
 800f85c:	e7cc      	b.n	800f7f8 <__smakebuf_r+0x1c>
	...

0800f860 <_fstat_r>:
 800f860:	2300      	movs	r3, #0
 800f862:	b570      	push	{r4, r5, r6, lr}
 800f864:	4d06      	ldr	r5, [pc, #24]	@ (800f880 <_fstat_r+0x20>)
 800f866:	0004      	movs	r4, r0
 800f868:	0008      	movs	r0, r1
 800f86a:	0011      	movs	r1, r2
 800f86c:	602b      	str	r3, [r5, #0]
 800f86e:	f7f6 f8f4 	bl	8005a5a <_fstat>
 800f872:	1c43      	adds	r3, r0, #1
 800f874:	d103      	bne.n	800f87e <_fstat_r+0x1e>
 800f876:	682b      	ldr	r3, [r5, #0]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d000      	beq.n	800f87e <_fstat_r+0x1e>
 800f87c:	6023      	str	r3, [r4, #0]
 800f87e:	bd70      	pop	{r4, r5, r6, pc}
 800f880:	20000740 	.word	0x20000740

0800f884 <_isatty_r>:
 800f884:	2300      	movs	r3, #0
 800f886:	b570      	push	{r4, r5, r6, lr}
 800f888:	4d06      	ldr	r5, [pc, #24]	@ (800f8a4 <_isatty_r+0x20>)
 800f88a:	0004      	movs	r4, r0
 800f88c:	0008      	movs	r0, r1
 800f88e:	602b      	str	r3, [r5, #0]
 800f890:	f7f6 f8f1 	bl	8005a76 <_isatty>
 800f894:	1c43      	adds	r3, r0, #1
 800f896:	d103      	bne.n	800f8a0 <_isatty_r+0x1c>
 800f898:	682b      	ldr	r3, [r5, #0]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d000      	beq.n	800f8a0 <_isatty_r+0x1c>
 800f89e:	6023      	str	r3, [r4, #0]
 800f8a0:	bd70      	pop	{r4, r5, r6, pc}
 800f8a2:	46c0      	nop			@ (mov r8, r8)
 800f8a4:	20000740 	.word	0x20000740

0800f8a8 <abort>:
 800f8a8:	2006      	movs	r0, #6
 800f8aa:	b510      	push	{r4, lr}
 800f8ac:	f000 f82c 	bl	800f908 <raise>
 800f8b0:	2001      	movs	r0, #1
 800f8b2:	f7f6 f882 	bl	80059ba <_exit>

0800f8b6 <_raise_r>:
 800f8b6:	b570      	push	{r4, r5, r6, lr}
 800f8b8:	0004      	movs	r4, r0
 800f8ba:	000d      	movs	r5, r1
 800f8bc:	291f      	cmp	r1, #31
 800f8be:	d904      	bls.n	800f8ca <_raise_r+0x14>
 800f8c0:	2316      	movs	r3, #22
 800f8c2:	6003      	str	r3, [r0, #0]
 800f8c4:	2001      	movs	r0, #1
 800f8c6:	4240      	negs	r0, r0
 800f8c8:	bd70      	pop	{r4, r5, r6, pc}
 800f8ca:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d004      	beq.n	800f8da <_raise_r+0x24>
 800f8d0:	008a      	lsls	r2, r1, #2
 800f8d2:	189b      	adds	r3, r3, r2
 800f8d4:	681a      	ldr	r2, [r3, #0]
 800f8d6:	2a00      	cmp	r2, #0
 800f8d8:	d108      	bne.n	800f8ec <_raise_r+0x36>
 800f8da:	0020      	movs	r0, r4
 800f8dc:	f000 f830 	bl	800f940 <_getpid_r>
 800f8e0:	002a      	movs	r2, r5
 800f8e2:	0001      	movs	r1, r0
 800f8e4:	0020      	movs	r0, r4
 800f8e6:	f000 f819 	bl	800f91c <_kill_r>
 800f8ea:	e7ed      	b.n	800f8c8 <_raise_r+0x12>
 800f8ec:	2a01      	cmp	r2, #1
 800f8ee:	d009      	beq.n	800f904 <_raise_r+0x4e>
 800f8f0:	1c51      	adds	r1, r2, #1
 800f8f2:	d103      	bne.n	800f8fc <_raise_r+0x46>
 800f8f4:	2316      	movs	r3, #22
 800f8f6:	6003      	str	r3, [r0, #0]
 800f8f8:	2001      	movs	r0, #1
 800f8fa:	e7e5      	b.n	800f8c8 <_raise_r+0x12>
 800f8fc:	2100      	movs	r1, #0
 800f8fe:	0028      	movs	r0, r5
 800f900:	6019      	str	r1, [r3, #0]
 800f902:	4790      	blx	r2
 800f904:	2000      	movs	r0, #0
 800f906:	e7df      	b.n	800f8c8 <_raise_r+0x12>

0800f908 <raise>:
 800f908:	b510      	push	{r4, lr}
 800f90a:	4b03      	ldr	r3, [pc, #12]	@ (800f918 <raise+0x10>)
 800f90c:	0001      	movs	r1, r0
 800f90e:	6818      	ldr	r0, [r3, #0]
 800f910:	f7ff ffd1 	bl	800f8b6 <_raise_r>
 800f914:	bd10      	pop	{r4, pc}
 800f916:	46c0      	nop			@ (mov r8, r8)
 800f918:	20000184 	.word	0x20000184

0800f91c <_kill_r>:
 800f91c:	2300      	movs	r3, #0
 800f91e:	b570      	push	{r4, r5, r6, lr}
 800f920:	4d06      	ldr	r5, [pc, #24]	@ (800f93c <_kill_r+0x20>)
 800f922:	0004      	movs	r4, r0
 800f924:	0008      	movs	r0, r1
 800f926:	0011      	movs	r1, r2
 800f928:	602b      	str	r3, [r5, #0]
 800f92a:	f7f6 f836 	bl	800599a <_kill>
 800f92e:	1c43      	adds	r3, r0, #1
 800f930:	d103      	bne.n	800f93a <_kill_r+0x1e>
 800f932:	682b      	ldr	r3, [r5, #0]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d000      	beq.n	800f93a <_kill_r+0x1e>
 800f938:	6023      	str	r3, [r4, #0]
 800f93a:	bd70      	pop	{r4, r5, r6, pc}
 800f93c:	20000740 	.word	0x20000740

0800f940 <_getpid_r>:
 800f940:	b510      	push	{r4, lr}
 800f942:	f7f6 f824 	bl	800598e <_getpid>
 800f946:	bd10      	pop	{r4, pc}

0800f948 <_init>:
 800f948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f94a:	46c0      	nop			@ (mov r8, r8)
 800f94c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f94e:	bc08      	pop	{r3}
 800f950:	469e      	mov	lr, r3
 800f952:	4770      	bx	lr

0800f954 <_fini>:
 800f954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f956:	46c0      	nop			@ (mov r8, r8)
 800f958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f95a:	bc08      	pop	{r3}
 800f95c:	469e      	mov	lr, r3
 800f95e:	4770      	bx	lr
