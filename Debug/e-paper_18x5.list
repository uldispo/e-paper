
e-paper_18x5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8d4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000bcb0  0800e998  0800e998  0000f998  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a648  0801a648  0001b648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a650  0801a650  0001b650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801a654  0801a654  0001b654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000340  20000000  0801a658  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003b4  20000340  0801a998  0001c340  2**2
                  ALLOC
  8 ._user_heap_stack 00001904  200006f4  0801a998  0001c6f4  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  0001c340  2**0
                  CONTENTS, READONLY
 10 .debug_info   000431a3  00000000  00000000  0001c368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006249  00000000  00000000  0005f50b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 00021b79  00000000  00000000  00065754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000014b8  00000000  00000000  000872d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000052de  00000000  00000000  00088788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00024a2e  00000000  00000000  0008da66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003d31f  00000000  00000000  000b2494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d32b8  00000000  00000000  000ef7b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  001c2a6b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004ad0  00000000  00000000  001c2ab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000004f  00000000  00000000  001c7580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000340 	.word	0x20000340
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800e97c 	.word	0x0800e97c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000344 	.word	0x20000344
 8000104:	0800e97c 	.word	0x0800e97c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f891 	bl	8001564 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ffd1 	bl	80013f4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f883 	bl	8001564 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f879 	bl	8001564 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fffb 	bl	800147c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fff1 	bl	800147c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__clzsi2>:
 80004a8:	211c      	movs	r1, #28
 80004aa:	2301      	movs	r3, #1
 80004ac:	041b      	lsls	r3, r3, #16
 80004ae:	4298      	cmp	r0, r3
 80004b0:	d301      	bcc.n	80004b6 <__clzsi2+0xe>
 80004b2:	0c00      	lsrs	r0, r0, #16
 80004b4:	3910      	subs	r1, #16
 80004b6:	0a1b      	lsrs	r3, r3, #8
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d301      	bcc.n	80004c0 <__clzsi2+0x18>
 80004bc:	0a00      	lsrs	r0, r0, #8
 80004be:	3908      	subs	r1, #8
 80004c0:	091b      	lsrs	r3, r3, #4
 80004c2:	4298      	cmp	r0, r3
 80004c4:	d301      	bcc.n	80004ca <__clzsi2+0x22>
 80004c6:	0900      	lsrs	r0, r0, #4
 80004c8:	3904      	subs	r1, #4
 80004ca:	a202      	add	r2, pc, #8	@ (adr r2, 80004d4 <__clzsi2+0x2c>)
 80004cc:	5c10      	ldrb	r0, [r2, r0]
 80004ce:	1840      	adds	r0, r0, r1
 80004d0:	4770      	bx	lr
 80004d2:	46c0      	nop			@ (mov r8, r8)
 80004d4:	02020304 	.word	0x02020304
 80004d8:	01010101 	.word	0x01010101
	...

080004e4 <__aeabi_uldivmod>:
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d111      	bne.n	800050c <__aeabi_uldivmod+0x28>
 80004e8:	2a00      	cmp	r2, #0
 80004ea:	d10f      	bne.n	800050c <__aeabi_uldivmod+0x28>
 80004ec:	2900      	cmp	r1, #0
 80004ee:	d100      	bne.n	80004f2 <__aeabi_uldivmod+0xe>
 80004f0:	2800      	cmp	r0, #0
 80004f2:	d002      	beq.n	80004fa <__aeabi_uldivmod+0x16>
 80004f4:	2100      	movs	r1, #0
 80004f6:	43c9      	mvns	r1, r1
 80004f8:	0008      	movs	r0, r1
 80004fa:	b407      	push	{r0, r1, r2}
 80004fc:	4802      	ldr	r0, [pc, #8]	@ (8000508 <__aeabi_uldivmod+0x24>)
 80004fe:	a102      	add	r1, pc, #8	@ (adr r1, 8000508 <__aeabi_uldivmod+0x24>)
 8000500:	1840      	adds	r0, r0, r1
 8000502:	9002      	str	r0, [sp, #8]
 8000504:	bd03      	pop	{r0, r1, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)
 8000508:	ffffff21 	.word	0xffffff21
 800050c:	b403      	push	{r0, r1}
 800050e:	4668      	mov	r0, sp
 8000510:	b501      	push	{r0, lr}
 8000512:	9802      	ldr	r0, [sp, #8]
 8000514:	f000 f824 	bl	8000560 <__udivmoddi4>
 8000518:	9b01      	ldr	r3, [sp, #4]
 800051a:	469e      	mov	lr, r3
 800051c:	b002      	add	sp, #8
 800051e:	bc0c      	pop	{r2, r3}
 8000520:	4770      	bx	lr
 8000522:	46c0      	nop			@ (mov r8, r8)

08000524 <__aeabi_d2uiz>:
 8000524:	b570      	push	{r4, r5, r6, lr}
 8000526:	2200      	movs	r2, #0
 8000528:	4b0c      	ldr	r3, [pc, #48]	@ (800055c <__aeabi_d2uiz+0x38>)
 800052a:	0004      	movs	r4, r0
 800052c:	000d      	movs	r5, r1
 800052e:	f7ff ffb1 	bl	8000494 <__aeabi_dcmpge>
 8000532:	2800      	cmp	r0, #0
 8000534:	d104      	bne.n	8000540 <__aeabi_d2uiz+0x1c>
 8000536:	0020      	movs	r0, r4
 8000538:	0029      	movs	r1, r5
 800053a:	f001 ff0b 	bl	8002354 <__aeabi_d2iz>
 800053e:	bd70      	pop	{r4, r5, r6, pc}
 8000540:	4b06      	ldr	r3, [pc, #24]	@ (800055c <__aeabi_d2uiz+0x38>)
 8000542:	2200      	movs	r2, #0
 8000544:	0020      	movs	r0, r4
 8000546:	0029      	movs	r1, r5
 8000548:	f001 fb46 	bl	8001bd8 <__aeabi_dsub>
 800054c:	f001 ff02 	bl	8002354 <__aeabi_d2iz>
 8000550:	2380      	movs	r3, #128	@ 0x80
 8000552:	061b      	lsls	r3, r3, #24
 8000554:	469c      	mov	ip, r3
 8000556:	4460      	add	r0, ip
 8000558:	e7f1      	b.n	800053e <__aeabi_d2uiz+0x1a>
 800055a:	46c0      	nop			@ (mov r8, r8)
 800055c:	41e00000 	.word	0x41e00000

08000560 <__udivmoddi4>:
 8000560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000562:	4657      	mov	r7, sl
 8000564:	464e      	mov	r6, r9
 8000566:	4645      	mov	r5, r8
 8000568:	46de      	mov	lr, fp
 800056a:	b5e0      	push	{r5, r6, r7, lr}
 800056c:	0004      	movs	r4, r0
 800056e:	000d      	movs	r5, r1
 8000570:	4692      	mov	sl, r2
 8000572:	4699      	mov	r9, r3
 8000574:	b083      	sub	sp, #12
 8000576:	428b      	cmp	r3, r1
 8000578:	d830      	bhi.n	80005dc <__udivmoddi4+0x7c>
 800057a:	d02d      	beq.n	80005d8 <__udivmoddi4+0x78>
 800057c:	4649      	mov	r1, r9
 800057e:	4650      	mov	r0, sl
 8000580:	f001 ff76 	bl	8002470 <__clzdi2>
 8000584:	0029      	movs	r1, r5
 8000586:	0006      	movs	r6, r0
 8000588:	0020      	movs	r0, r4
 800058a:	f001 ff71 	bl	8002470 <__clzdi2>
 800058e:	1a33      	subs	r3, r6, r0
 8000590:	4698      	mov	r8, r3
 8000592:	3b20      	subs	r3, #32
 8000594:	d434      	bmi.n	8000600 <__udivmoddi4+0xa0>
 8000596:	469b      	mov	fp, r3
 8000598:	4653      	mov	r3, sl
 800059a:	465a      	mov	r2, fp
 800059c:	4093      	lsls	r3, r2
 800059e:	4642      	mov	r2, r8
 80005a0:	001f      	movs	r7, r3
 80005a2:	4653      	mov	r3, sl
 80005a4:	4093      	lsls	r3, r2
 80005a6:	001e      	movs	r6, r3
 80005a8:	42af      	cmp	r7, r5
 80005aa:	d83b      	bhi.n	8000624 <__udivmoddi4+0xc4>
 80005ac:	42af      	cmp	r7, r5
 80005ae:	d100      	bne.n	80005b2 <__udivmoddi4+0x52>
 80005b0:	e079      	b.n	80006a6 <__udivmoddi4+0x146>
 80005b2:	465b      	mov	r3, fp
 80005b4:	1ba4      	subs	r4, r4, r6
 80005b6:	41bd      	sbcs	r5, r7
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	da00      	bge.n	80005be <__udivmoddi4+0x5e>
 80005bc:	e076      	b.n	80006ac <__udivmoddi4+0x14c>
 80005be:	2200      	movs	r2, #0
 80005c0:	2300      	movs	r3, #0
 80005c2:	9200      	str	r2, [sp, #0]
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2301      	movs	r3, #1
 80005c8:	465a      	mov	r2, fp
 80005ca:	4093      	lsls	r3, r2
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2301      	movs	r3, #1
 80005d0:	4642      	mov	r2, r8
 80005d2:	4093      	lsls	r3, r2
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	e029      	b.n	800062c <__udivmoddi4+0xcc>
 80005d8:	4282      	cmp	r2, r0
 80005da:	d9cf      	bls.n	800057c <__udivmoddi4+0x1c>
 80005dc:	2200      	movs	r2, #0
 80005de:	2300      	movs	r3, #0
 80005e0:	9200      	str	r2, [sp, #0]
 80005e2:	9301      	str	r3, [sp, #4]
 80005e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <__udivmoddi4+0x8e>
 80005ea:	601c      	str	r4, [r3, #0]
 80005ec:	605d      	str	r5, [r3, #4]
 80005ee:	9800      	ldr	r0, [sp, #0]
 80005f0:	9901      	ldr	r1, [sp, #4]
 80005f2:	b003      	add	sp, #12
 80005f4:	bcf0      	pop	{r4, r5, r6, r7}
 80005f6:	46bb      	mov	fp, r7
 80005f8:	46b2      	mov	sl, r6
 80005fa:	46a9      	mov	r9, r5
 80005fc:	46a0      	mov	r8, r4
 80005fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000600:	4642      	mov	r2, r8
 8000602:	469b      	mov	fp, r3
 8000604:	2320      	movs	r3, #32
 8000606:	1a9b      	subs	r3, r3, r2
 8000608:	4652      	mov	r2, sl
 800060a:	40da      	lsrs	r2, r3
 800060c:	4641      	mov	r1, r8
 800060e:	0013      	movs	r3, r2
 8000610:	464a      	mov	r2, r9
 8000612:	408a      	lsls	r2, r1
 8000614:	0017      	movs	r7, r2
 8000616:	4642      	mov	r2, r8
 8000618:	431f      	orrs	r7, r3
 800061a:	4653      	mov	r3, sl
 800061c:	4093      	lsls	r3, r2
 800061e:	001e      	movs	r6, r3
 8000620:	42af      	cmp	r7, r5
 8000622:	d9c3      	bls.n	80005ac <__udivmoddi4+0x4c>
 8000624:	2200      	movs	r2, #0
 8000626:	2300      	movs	r3, #0
 8000628:	9200      	str	r2, [sp, #0]
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	4643      	mov	r3, r8
 800062e:	2b00      	cmp	r3, #0
 8000630:	d0d8      	beq.n	80005e4 <__udivmoddi4+0x84>
 8000632:	07fb      	lsls	r3, r7, #31
 8000634:	0872      	lsrs	r2, r6, #1
 8000636:	431a      	orrs	r2, r3
 8000638:	4646      	mov	r6, r8
 800063a:	087b      	lsrs	r3, r7, #1
 800063c:	e00e      	b.n	800065c <__udivmoddi4+0xfc>
 800063e:	42ab      	cmp	r3, r5
 8000640:	d101      	bne.n	8000646 <__udivmoddi4+0xe6>
 8000642:	42a2      	cmp	r2, r4
 8000644:	d80c      	bhi.n	8000660 <__udivmoddi4+0x100>
 8000646:	1aa4      	subs	r4, r4, r2
 8000648:	419d      	sbcs	r5, r3
 800064a:	2001      	movs	r0, #1
 800064c:	1924      	adds	r4, r4, r4
 800064e:	416d      	adcs	r5, r5
 8000650:	2100      	movs	r1, #0
 8000652:	3e01      	subs	r6, #1
 8000654:	1824      	adds	r4, r4, r0
 8000656:	414d      	adcs	r5, r1
 8000658:	2e00      	cmp	r6, #0
 800065a:	d006      	beq.n	800066a <__udivmoddi4+0x10a>
 800065c:	42ab      	cmp	r3, r5
 800065e:	d9ee      	bls.n	800063e <__udivmoddi4+0xde>
 8000660:	3e01      	subs	r6, #1
 8000662:	1924      	adds	r4, r4, r4
 8000664:	416d      	adcs	r5, r5
 8000666:	2e00      	cmp	r6, #0
 8000668:	d1f8      	bne.n	800065c <__udivmoddi4+0xfc>
 800066a:	9800      	ldr	r0, [sp, #0]
 800066c:	9901      	ldr	r1, [sp, #4]
 800066e:	465b      	mov	r3, fp
 8000670:	1900      	adds	r0, r0, r4
 8000672:	4169      	adcs	r1, r5
 8000674:	2b00      	cmp	r3, #0
 8000676:	db24      	blt.n	80006c2 <__udivmoddi4+0x162>
 8000678:	002b      	movs	r3, r5
 800067a:	465a      	mov	r2, fp
 800067c:	4644      	mov	r4, r8
 800067e:	40d3      	lsrs	r3, r2
 8000680:	002a      	movs	r2, r5
 8000682:	40e2      	lsrs	r2, r4
 8000684:	001c      	movs	r4, r3
 8000686:	465b      	mov	r3, fp
 8000688:	0015      	movs	r5, r2
 800068a:	2b00      	cmp	r3, #0
 800068c:	db2a      	blt.n	80006e4 <__udivmoddi4+0x184>
 800068e:	0026      	movs	r6, r4
 8000690:	409e      	lsls	r6, r3
 8000692:	0033      	movs	r3, r6
 8000694:	0026      	movs	r6, r4
 8000696:	4647      	mov	r7, r8
 8000698:	40be      	lsls	r6, r7
 800069a:	0032      	movs	r2, r6
 800069c:	1a80      	subs	r0, r0, r2
 800069e:	4199      	sbcs	r1, r3
 80006a0:	9000      	str	r0, [sp, #0]
 80006a2:	9101      	str	r1, [sp, #4]
 80006a4:	e79e      	b.n	80005e4 <__udivmoddi4+0x84>
 80006a6:	42a3      	cmp	r3, r4
 80006a8:	d8bc      	bhi.n	8000624 <__udivmoddi4+0xc4>
 80006aa:	e782      	b.n	80005b2 <__udivmoddi4+0x52>
 80006ac:	4642      	mov	r2, r8
 80006ae:	2320      	movs	r3, #32
 80006b0:	2100      	movs	r1, #0
 80006b2:	1a9b      	subs	r3, r3, r2
 80006b4:	2200      	movs	r2, #0
 80006b6:	9100      	str	r1, [sp, #0]
 80006b8:	9201      	str	r2, [sp, #4]
 80006ba:	2201      	movs	r2, #1
 80006bc:	40da      	lsrs	r2, r3
 80006be:	9201      	str	r2, [sp, #4]
 80006c0:	e785      	b.n	80005ce <__udivmoddi4+0x6e>
 80006c2:	4642      	mov	r2, r8
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	002a      	movs	r2, r5
 80006ca:	4646      	mov	r6, r8
 80006cc:	409a      	lsls	r2, r3
 80006ce:	0023      	movs	r3, r4
 80006d0:	40f3      	lsrs	r3, r6
 80006d2:	4644      	mov	r4, r8
 80006d4:	4313      	orrs	r3, r2
 80006d6:	002a      	movs	r2, r5
 80006d8:	40e2      	lsrs	r2, r4
 80006da:	001c      	movs	r4, r3
 80006dc:	465b      	mov	r3, fp
 80006de:	0015      	movs	r5, r2
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	dad4      	bge.n	800068e <__udivmoddi4+0x12e>
 80006e4:	4642      	mov	r2, r8
 80006e6:	002f      	movs	r7, r5
 80006e8:	2320      	movs	r3, #32
 80006ea:	0026      	movs	r6, r4
 80006ec:	4097      	lsls	r7, r2
 80006ee:	1a9b      	subs	r3, r3, r2
 80006f0:	40de      	lsrs	r6, r3
 80006f2:	003b      	movs	r3, r7
 80006f4:	4333      	orrs	r3, r6
 80006f6:	e7cd      	b.n	8000694 <__udivmoddi4+0x134>

080006f8 <__aeabi_dadd>:
 80006f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006fa:	4657      	mov	r7, sl
 80006fc:	464e      	mov	r6, r9
 80006fe:	4645      	mov	r5, r8
 8000700:	46de      	mov	lr, fp
 8000702:	b5e0      	push	{r5, r6, r7, lr}
 8000704:	b083      	sub	sp, #12
 8000706:	9000      	str	r0, [sp, #0]
 8000708:	9101      	str	r1, [sp, #4]
 800070a:	030c      	lsls	r4, r1, #12
 800070c:	004f      	lsls	r7, r1, #1
 800070e:	0fce      	lsrs	r6, r1, #31
 8000710:	0a61      	lsrs	r1, r4, #9
 8000712:	9c00      	ldr	r4, [sp, #0]
 8000714:	031d      	lsls	r5, r3, #12
 8000716:	0f64      	lsrs	r4, r4, #29
 8000718:	430c      	orrs	r4, r1
 800071a:	9900      	ldr	r1, [sp, #0]
 800071c:	9200      	str	r2, [sp, #0]
 800071e:	9301      	str	r3, [sp, #4]
 8000720:	00c8      	lsls	r0, r1, #3
 8000722:	0059      	lsls	r1, r3, #1
 8000724:	0d4b      	lsrs	r3, r1, #21
 8000726:	4699      	mov	r9, r3
 8000728:	9a00      	ldr	r2, [sp, #0]
 800072a:	9b01      	ldr	r3, [sp, #4]
 800072c:	0a6d      	lsrs	r5, r5, #9
 800072e:	0fd9      	lsrs	r1, r3, #31
 8000730:	0f53      	lsrs	r3, r2, #29
 8000732:	432b      	orrs	r3, r5
 8000734:	469a      	mov	sl, r3
 8000736:	9b00      	ldr	r3, [sp, #0]
 8000738:	0d7f      	lsrs	r7, r7, #21
 800073a:	00da      	lsls	r2, r3, #3
 800073c:	4694      	mov	ip, r2
 800073e:	464a      	mov	r2, r9
 8000740:	46b0      	mov	r8, r6
 8000742:	1aba      	subs	r2, r7, r2
 8000744:	428e      	cmp	r6, r1
 8000746:	d100      	bne.n	800074a <__aeabi_dadd+0x52>
 8000748:	e0b0      	b.n	80008ac <__aeabi_dadd+0x1b4>
 800074a:	2a00      	cmp	r2, #0
 800074c:	dc00      	bgt.n	8000750 <__aeabi_dadd+0x58>
 800074e:	e078      	b.n	8000842 <__aeabi_dadd+0x14a>
 8000750:	4649      	mov	r1, r9
 8000752:	2900      	cmp	r1, #0
 8000754:	d100      	bne.n	8000758 <__aeabi_dadd+0x60>
 8000756:	e0e9      	b.n	800092c <__aeabi_dadd+0x234>
 8000758:	49c9      	ldr	r1, [pc, #804]	@ (8000a80 <__aeabi_dadd+0x388>)
 800075a:	428f      	cmp	r7, r1
 800075c:	d100      	bne.n	8000760 <__aeabi_dadd+0x68>
 800075e:	e195      	b.n	8000a8c <__aeabi_dadd+0x394>
 8000760:	2501      	movs	r5, #1
 8000762:	2a38      	cmp	r2, #56	@ 0x38
 8000764:	dc16      	bgt.n	8000794 <__aeabi_dadd+0x9c>
 8000766:	2180      	movs	r1, #128	@ 0x80
 8000768:	4653      	mov	r3, sl
 800076a:	0409      	lsls	r1, r1, #16
 800076c:	430b      	orrs	r3, r1
 800076e:	469a      	mov	sl, r3
 8000770:	2a1f      	cmp	r2, #31
 8000772:	dd00      	ble.n	8000776 <__aeabi_dadd+0x7e>
 8000774:	e1e7      	b.n	8000b46 <__aeabi_dadd+0x44e>
 8000776:	2120      	movs	r1, #32
 8000778:	4655      	mov	r5, sl
 800077a:	1a8b      	subs	r3, r1, r2
 800077c:	4661      	mov	r1, ip
 800077e:	409d      	lsls	r5, r3
 8000780:	40d1      	lsrs	r1, r2
 8000782:	430d      	orrs	r5, r1
 8000784:	4661      	mov	r1, ip
 8000786:	4099      	lsls	r1, r3
 8000788:	1e4b      	subs	r3, r1, #1
 800078a:	4199      	sbcs	r1, r3
 800078c:	4653      	mov	r3, sl
 800078e:	40d3      	lsrs	r3, r2
 8000790:	430d      	orrs	r5, r1
 8000792:	1ae4      	subs	r4, r4, r3
 8000794:	1b45      	subs	r5, r0, r5
 8000796:	42a8      	cmp	r0, r5
 8000798:	4180      	sbcs	r0, r0
 800079a:	4240      	negs	r0, r0
 800079c:	1a24      	subs	r4, r4, r0
 800079e:	0223      	lsls	r3, r4, #8
 80007a0:	d400      	bmi.n	80007a4 <__aeabi_dadd+0xac>
 80007a2:	e10f      	b.n	80009c4 <__aeabi_dadd+0x2cc>
 80007a4:	0264      	lsls	r4, r4, #9
 80007a6:	0a64      	lsrs	r4, r4, #9
 80007a8:	2c00      	cmp	r4, #0
 80007aa:	d100      	bne.n	80007ae <__aeabi_dadd+0xb6>
 80007ac:	e139      	b.n	8000a22 <__aeabi_dadd+0x32a>
 80007ae:	0020      	movs	r0, r4
 80007b0:	f7ff fe7a 	bl	80004a8 <__clzsi2>
 80007b4:	0003      	movs	r3, r0
 80007b6:	3b08      	subs	r3, #8
 80007b8:	2120      	movs	r1, #32
 80007ba:	0028      	movs	r0, r5
 80007bc:	1aca      	subs	r2, r1, r3
 80007be:	40d0      	lsrs	r0, r2
 80007c0:	409c      	lsls	r4, r3
 80007c2:	0002      	movs	r2, r0
 80007c4:	409d      	lsls	r5, r3
 80007c6:	4322      	orrs	r2, r4
 80007c8:	429f      	cmp	r7, r3
 80007ca:	dd00      	ble.n	80007ce <__aeabi_dadd+0xd6>
 80007cc:	e173      	b.n	8000ab6 <__aeabi_dadd+0x3be>
 80007ce:	1bd8      	subs	r0, r3, r7
 80007d0:	3001      	adds	r0, #1
 80007d2:	1a09      	subs	r1, r1, r0
 80007d4:	002c      	movs	r4, r5
 80007d6:	408d      	lsls	r5, r1
 80007d8:	40c4      	lsrs	r4, r0
 80007da:	1e6b      	subs	r3, r5, #1
 80007dc:	419d      	sbcs	r5, r3
 80007de:	0013      	movs	r3, r2
 80007e0:	40c2      	lsrs	r2, r0
 80007e2:	408b      	lsls	r3, r1
 80007e4:	4325      	orrs	r5, r4
 80007e6:	2700      	movs	r7, #0
 80007e8:	0014      	movs	r4, r2
 80007ea:	431d      	orrs	r5, r3
 80007ec:	076b      	lsls	r3, r5, #29
 80007ee:	d009      	beq.n	8000804 <__aeabi_dadd+0x10c>
 80007f0:	230f      	movs	r3, #15
 80007f2:	402b      	ands	r3, r5
 80007f4:	2b04      	cmp	r3, #4
 80007f6:	d005      	beq.n	8000804 <__aeabi_dadd+0x10c>
 80007f8:	1d2b      	adds	r3, r5, #4
 80007fa:	42ab      	cmp	r3, r5
 80007fc:	41ad      	sbcs	r5, r5
 80007fe:	426d      	negs	r5, r5
 8000800:	1964      	adds	r4, r4, r5
 8000802:	001d      	movs	r5, r3
 8000804:	0223      	lsls	r3, r4, #8
 8000806:	d400      	bmi.n	800080a <__aeabi_dadd+0x112>
 8000808:	e12d      	b.n	8000a66 <__aeabi_dadd+0x36e>
 800080a:	4a9d      	ldr	r2, [pc, #628]	@ (8000a80 <__aeabi_dadd+0x388>)
 800080c:	3701      	adds	r7, #1
 800080e:	4297      	cmp	r7, r2
 8000810:	d100      	bne.n	8000814 <__aeabi_dadd+0x11c>
 8000812:	e0d3      	b.n	80009bc <__aeabi_dadd+0x2c4>
 8000814:	4646      	mov	r6, r8
 8000816:	499b      	ldr	r1, [pc, #620]	@ (8000a84 <__aeabi_dadd+0x38c>)
 8000818:	08ed      	lsrs	r5, r5, #3
 800081a:	4021      	ands	r1, r4
 800081c:	074a      	lsls	r2, r1, #29
 800081e:	432a      	orrs	r2, r5
 8000820:	057c      	lsls	r4, r7, #21
 8000822:	024d      	lsls	r5, r1, #9
 8000824:	0b2d      	lsrs	r5, r5, #12
 8000826:	0d64      	lsrs	r4, r4, #21
 8000828:	0524      	lsls	r4, r4, #20
 800082a:	432c      	orrs	r4, r5
 800082c:	07f6      	lsls	r6, r6, #31
 800082e:	4334      	orrs	r4, r6
 8000830:	0010      	movs	r0, r2
 8000832:	0021      	movs	r1, r4
 8000834:	b003      	add	sp, #12
 8000836:	bcf0      	pop	{r4, r5, r6, r7}
 8000838:	46bb      	mov	fp, r7
 800083a:	46b2      	mov	sl, r6
 800083c:	46a9      	mov	r9, r5
 800083e:	46a0      	mov	r8, r4
 8000840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000842:	2a00      	cmp	r2, #0
 8000844:	d100      	bne.n	8000848 <__aeabi_dadd+0x150>
 8000846:	e084      	b.n	8000952 <__aeabi_dadd+0x25a>
 8000848:	464a      	mov	r2, r9
 800084a:	1bd2      	subs	r2, r2, r7
 800084c:	2f00      	cmp	r7, #0
 800084e:	d000      	beq.n	8000852 <__aeabi_dadd+0x15a>
 8000850:	e16d      	b.n	8000b2e <__aeabi_dadd+0x436>
 8000852:	0025      	movs	r5, r4
 8000854:	4305      	orrs	r5, r0
 8000856:	d100      	bne.n	800085a <__aeabi_dadd+0x162>
 8000858:	e127      	b.n	8000aaa <__aeabi_dadd+0x3b2>
 800085a:	1e56      	subs	r6, r2, #1
 800085c:	2a01      	cmp	r2, #1
 800085e:	d100      	bne.n	8000862 <__aeabi_dadd+0x16a>
 8000860:	e23b      	b.n	8000cda <__aeabi_dadd+0x5e2>
 8000862:	4d87      	ldr	r5, [pc, #540]	@ (8000a80 <__aeabi_dadd+0x388>)
 8000864:	42aa      	cmp	r2, r5
 8000866:	d100      	bne.n	800086a <__aeabi_dadd+0x172>
 8000868:	e26a      	b.n	8000d40 <__aeabi_dadd+0x648>
 800086a:	2501      	movs	r5, #1
 800086c:	2e38      	cmp	r6, #56	@ 0x38
 800086e:	dc12      	bgt.n	8000896 <__aeabi_dadd+0x19e>
 8000870:	0032      	movs	r2, r6
 8000872:	2a1f      	cmp	r2, #31
 8000874:	dd00      	ble.n	8000878 <__aeabi_dadd+0x180>
 8000876:	e1f8      	b.n	8000c6a <__aeabi_dadd+0x572>
 8000878:	2620      	movs	r6, #32
 800087a:	0025      	movs	r5, r4
 800087c:	1ab6      	subs	r6, r6, r2
 800087e:	0007      	movs	r7, r0
 8000880:	4653      	mov	r3, sl
 8000882:	40b0      	lsls	r0, r6
 8000884:	40d4      	lsrs	r4, r2
 8000886:	40b5      	lsls	r5, r6
 8000888:	40d7      	lsrs	r7, r2
 800088a:	1e46      	subs	r6, r0, #1
 800088c:	41b0      	sbcs	r0, r6
 800088e:	1b1b      	subs	r3, r3, r4
 8000890:	469a      	mov	sl, r3
 8000892:	433d      	orrs	r5, r7
 8000894:	4305      	orrs	r5, r0
 8000896:	4662      	mov	r2, ip
 8000898:	1b55      	subs	r5, r2, r5
 800089a:	45ac      	cmp	ip, r5
 800089c:	4192      	sbcs	r2, r2
 800089e:	4653      	mov	r3, sl
 80008a0:	4252      	negs	r2, r2
 80008a2:	000e      	movs	r6, r1
 80008a4:	464f      	mov	r7, r9
 80008a6:	4688      	mov	r8, r1
 80008a8:	1a9c      	subs	r4, r3, r2
 80008aa:	e778      	b.n	800079e <__aeabi_dadd+0xa6>
 80008ac:	2a00      	cmp	r2, #0
 80008ae:	dc00      	bgt.n	80008b2 <__aeabi_dadd+0x1ba>
 80008b0:	e08e      	b.n	80009d0 <__aeabi_dadd+0x2d8>
 80008b2:	4649      	mov	r1, r9
 80008b4:	2900      	cmp	r1, #0
 80008b6:	d175      	bne.n	80009a4 <__aeabi_dadd+0x2ac>
 80008b8:	4661      	mov	r1, ip
 80008ba:	4653      	mov	r3, sl
 80008bc:	4319      	orrs	r1, r3
 80008be:	d100      	bne.n	80008c2 <__aeabi_dadd+0x1ca>
 80008c0:	e0f6      	b.n	8000ab0 <__aeabi_dadd+0x3b8>
 80008c2:	1e51      	subs	r1, r2, #1
 80008c4:	2a01      	cmp	r2, #1
 80008c6:	d100      	bne.n	80008ca <__aeabi_dadd+0x1d2>
 80008c8:	e191      	b.n	8000bee <__aeabi_dadd+0x4f6>
 80008ca:	4d6d      	ldr	r5, [pc, #436]	@ (8000a80 <__aeabi_dadd+0x388>)
 80008cc:	42aa      	cmp	r2, r5
 80008ce:	d100      	bne.n	80008d2 <__aeabi_dadd+0x1da>
 80008d0:	e0dc      	b.n	8000a8c <__aeabi_dadd+0x394>
 80008d2:	2501      	movs	r5, #1
 80008d4:	2938      	cmp	r1, #56	@ 0x38
 80008d6:	dc14      	bgt.n	8000902 <__aeabi_dadd+0x20a>
 80008d8:	000a      	movs	r2, r1
 80008da:	2a1f      	cmp	r2, #31
 80008dc:	dd00      	ble.n	80008e0 <__aeabi_dadd+0x1e8>
 80008de:	e1a2      	b.n	8000c26 <__aeabi_dadd+0x52e>
 80008e0:	2120      	movs	r1, #32
 80008e2:	4653      	mov	r3, sl
 80008e4:	1a89      	subs	r1, r1, r2
 80008e6:	408b      	lsls	r3, r1
 80008e8:	001d      	movs	r5, r3
 80008ea:	4663      	mov	r3, ip
 80008ec:	40d3      	lsrs	r3, r2
 80008ee:	431d      	orrs	r5, r3
 80008f0:	4663      	mov	r3, ip
 80008f2:	408b      	lsls	r3, r1
 80008f4:	0019      	movs	r1, r3
 80008f6:	1e4b      	subs	r3, r1, #1
 80008f8:	4199      	sbcs	r1, r3
 80008fa:	4653      	mov	r3, sl
 80008fc:	40d3      	lsrs	r3, r2
 80008fe:	430d      	orrs	r5, r1
 8000900:	18e4      	adds	r4, r4, r3
 8000902:	182d      	adds	r5, r5, r0
 8000904:	4285      	cmp	r5, r0
 8000906:	4180      	sbcs	r0, r0
 8000908:	4240      	negs	r0, r0
 800090a:	1824      	adds	r4, r4, r0
 800090c:	0223      	lsls	r3, r4, #8
 800090e:	d559      	bpl.n	80009c4 <__aeabi_dadd+0x2cc>
 8000910:	4b5b      	ldr	r3, [pc, #364]	@ (8000a80 <__aeabi_dadd+0x388>)
 8000912:	3701      	adds	r7, #1
 8000914:	429f      	cmp	r7, r3
 8000916:	d051      	beq.n	80009bc <__aeabi_dadd+0x2c4>
 8000918:	2101      	movs	r1, #1
 800091a:	4b5a      	ldr	r3, [pc, #360]	@ (8000a84 <__aeabi_dadd+0x38c>)
 800091c:	086a      	lsrs	r2, r5, #1
 800091e:	401c      	ands	r4, r3
 8000920:	4029      	ands	r1, r5
 8000922:	430a      	orrs	r2, r1
 8000924:	07e5      	lsls	r5, r4, #31
 8000926:	4315      	orrs	r5, r2
 8000928:	0864      	lsrs	r4, r4, #1
 800092a:	e75f      	b.n	80007ec <__aeabi_dadd+0xf4>
 800092c:	4661      	mov	r1, ip
 800092e:	4653      	mov	r3, sl
 8000930:	4319      	orrs	r1, r3
 8000932:	d100      	bne.n	8000936 <__aeabi_dadd+0x23e>
 8000934:	e0bc      	b.n	8000ab0 <__aeabi_dadd+0x3b8>
 8000936:	1e51      	subs	r1, r2, #1
 8000938:	2a01      	cmp	r2, #1
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x246>
 800093c:	e164      	b.n	8000c08 <__aeabi_dadd+0x510>
 800093e:	4d50      	ldr	r5, [pc, #320]	@ (8000a80 <__aeabi_dadd+0x388>)
 8000940:	42aa      	cmp	r2, r5
 8000942:	d100      	bne.n	8000946 <__aeabi_dadd+0x24e>
 8000944:	e16a      	b.n	8000c1c <__aeabi_dadd+0x524>
 8000946:	2501      	movs	r5, #1
 8000948:	2938      	cmp	r1, #56	@ 0x38
 800094a:	dd00      	ble.n	800094e <__aeabi_dadd+0x256>
 800094c:	e722      	b.n	8000794 <__aeabi_dadd+0x9c>
 800094e:	000a      	movs	r2, r1
 8000950:	e70e      	b.n	8000770 <__aeabi_dadd+0x78>
 8000952:	4a4d      	ldr	r2, [pc, #308]	@ (8000a88 <__aeabi_dadd+0x390>)
 8000954:	1c7d      	adds	r5, r7, #1
 8000956:	4215      	tst	r5, r2
 8000958:	d000      	beq.n	800095c <__aeabi_dadd+0x264>
 800095a:	e0d0      	b.n	8000afe <__aeabi_dadd+0x406>
 800095c:	0025      	movs	r5, r4
 800095e:	4662      	mov	r2, ip
 8000960:	4653      	mov	r3, sl
 8000962:	4305      	orrs	r5, r0
 8000964:	431a      	orrs	r2, r3
 8000966:	2f00      	cmp	r7, #0
 8000968:	d000      	beq.n	800096c <__aeabi_dadd+0x274>
 800096a:	e137      	b.n	8000bdc <__aeabi_dadd+0x4e4>
 800096c:	2d00      	cmp	r5, #0
 800096e:	d100      	bne.n	8000972 <__aeabi_dadd+0x27a>
 8000970:	e1a8      	b.n	8000cc4 <__aeabi_dadd+0x5cc>
 8000972:	2a00      	cmp	r2, #0
 8000974:	d100      	bne.n	8000978 <__aeabi_dadd+0x280>
 8000976:	e16a      	b.n	8000c4e <__aeabi_dadd+0x556>
 8000978:	4663      	mov	r3, ip
 800097a:	1ac5      	subs	r5, r0, r3
 800097c:	4653      	mov	r3, sl
 800097e:	1ae2      	subs	r2, r4, r3
 8000980:	42a8      	cmp	r0, r5
 8000982:	419b      	sbcs	r3, r3
 8000984:	425b      	negs	r3, r3
 8000986:	1ad3      	subs	r3, r2, r3
 8000988:	021a      	lsls	r2, r3, #8
 800098a:	d400      	bmi.n	800098e <__aeabi_dadd+0x296>
 800098c:	e203      	b.n	8000d96 <__aeabi_dadd+0x69e>
 800098e:	4663      	mov	r3, ip
 8000990:	1a1d      	subs	r5, r3, r0
 8000992:	45ac      	cmp	ip, r5
 8000994:	4192      	sbcs	r2, r2
 8000996:	4653      	mov	r3, sl
 8000998:	4252      	negs	r2, r2
 800099a:	1b1c      	subs	r4, r3, r4
 800099c:	000e      	movs	r6, r1
 800099e:	4688      	mov	r8, r1
 80009a0:	1aa4      	subs	r4, r4, r2
 80009a2:	e723      	b.n	80007ec <__aeabi_dadd+0xf4>
 80009a4:	4936      	ldr	r1, [pc, #216]	@ (8000a80 <__aeabi_dadd+0x388>)
 80009a6:	428f      	cmp	r7, r1
 80009a8:	d070      	beq.n	8000a8c <__aeabi_dadd+0x394>
 80009aa:	2501      	movs	r5, #1
 80009ac:	2a38      	cmp	r2, #56	@ 0x38
 80009ae:	dca8      	bgt.n	8000902 <__aeabi_dadd+0x20a>
 80009b0:	2180      	movs	r1, #128	@ 0x80
 80009b2:	4653      	mov	r3, sl
 80009b4:	0409      	lsls	r1, r1, #16
 80009b6:	430b      	orrs	r3, r1
 80009b8:	469a      	mov	sl, r3
 80009ba:	e78e      	b.n	80008da <__aeabi_dadd+0x1e2>
 80009bc:	003c      	movs	r4, r7
 80009be:	2500      	movs	r5, #0
 80009c0:	2200      	movs	r2, #0
 80009c2:	e731      	b.n	8000828 <__aeabi_dadd+0x130>
 80009c4:	2307      	movs	r3, #7
 80009c6:	402b      	ands	r3, r5
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d000      	beq.n	80009ce <__aeabi_dadd+0x2d6>
 80009cc:	e710      	b.n	80007f0 <__aeabi_dadd+0xf8>
 80009ce:	e093      	b.n	8000af8 <__aeabi_dadd+0x400>
 80009d0:	2a00      	cmp	r2, #0
 80009d2:	d074      	beq.n	8000abe <__aeabi_dadd+0x3c6>
 80009d4:	464a      	mov	r2, r9
 80009d6:	1bd2      	subs	r2, r2, r7
 80009d8:	2f00      	cmp	r7, #0
 80009da:	d100      	bne.n	80009de <__aeabi_dadd+0x2e6>
 80009dc:	e0c7      	b.n	8000b6e <__aeabi_dadd+0x476>
 80009de:	4928      	ldr	r1, [pc, #160]	@ (8000a80 <__aeabi_dadd+0x388>)
 80009e0:	4589      	cmp	r9, r1
 80009e2:	d100      	bne.n	80009e6 <__aeabi_dadd+0x2ee>
 80009e4:	e185      	b.n	8000cf2 <__aeabi_dadd+0x5fa>
 80009e6:	2501      	movs	r5, #1
 80009e8:	2a38      	cmp	r2, #56	@ 0x38
 80009ea:	dc12      	bgt.n	8000a12 <__aeabi_dadd+0x31a>
 80009ec:	2180      	movs	r1, #128	@ 0x80
 80009ee:	0409      	lsls	r1, r1, #16
 80009f0:	430c      	orrs	r4, r1
 80009f2:	2a1f      	cmp	r2, #31
 80009f4:	dd00      	ble.n	80009f8 <__aeabi_dadd+0x300>
 80009f6:	e1ab      	b.n	8000d50 <__aeabi_dadd+0x658>
 80009f8:	2120      	movs	r1, #32
 80009fa:	0025      	movs	r5, r4
 80009fc:	1a89      	subs	r1, r1, r2
 80009fe:	0007      	movs	r7, r0
 8000a00:	4088      	lsls	r0, r1
 8000a02:	408d      	lsls	r5, r1
 8000a04:	40d7      	lsrs	r7, r2
 8000a06:	1e41      	subs	r1, r0, #1
 8000a08:	4188      	sbcs	r0, r1
 8000a0a:	40d4      	lsrs	r4, r2
 8000a0c:	433d      	orrs	r5, r7
 8000a0e:	4305      	orrs	r5, r0
 8000a10:	44a2      	add	sl, r4
 8000a12:	4465      	add	r5, ip
 8000a14:	4565      	cmp	r5, ip
 8000a16:	4192      	sbcs	r2, r2
 8000a18:	4252      	negs	r2, r2
 8000a1a:	4452      	add	r2, sl
 8000a1c:	0014      	movs	r4, r2
 8000a1e:	464f      	mov	r7, r9
 8000a20:	e774      	b.n	800090c <__aeabi_dadd+0x214>
 8000a22:	0028      	movs	r0, r5
 8000a24:	f7ff fd40 	bl	80004a8 <__clzsi2>
 8000a28:	0003      	movs	r3, r0
 8000a2a:	3318      	adds	r3, #24
 8000a2c:	2b1f      	cmp	r3, #31
 8000a2e:	dc00      	bgt.n	8000a32 <__aeabi_dadd+0x33a>
 8000a30:	e6c2      	b.n	80007b8 <__aeabi_dadd+0xc0>
 8000a32:	002a      	movs	r2, r5
 8000a34:	3808      	subs	r0, #8
 8000a36:	4082      	lsls	r2, r0
 8000a38:	429f      	cmp	r7, r3
 8000a3a:	dd00      	ble.n	8000a3e <__aeabi_dadd+0x346>
 8000a3c:	e0a9      	b.n	8000b92 <__aeabi_dadd+0x49a>
 8000a3e:	1bdb      	subs	r3, r3, r7
 8000a40:	1c58      	adds	r0, r3, #1
 8000a42:	281f      	cmp	r0, #31
 8000a44:	dc00      	bgt.n	8000a48 <__aeabi_dadd+0x350>
 8000a46:	e1ac      	b.n	8000da2 <__aeabi_dadd+0x6aa>
 8000a48:	0015      	movs	r5, r2
 8000a4a:	3b1f      	subs	r3, #31
 8000a4c:	40dd      	lsrs	r5, r3
 8000a4e:	2820      	cmp	r0, #32
 8000a50:	d005      	beq.n	8000a5e <__aeabi_dadd+0x366>
 8000a52:	2340      	movs	r3, #64	@ 0x40
 8000a54:	1a1b      	subs	r3, r3, r0
 8000a56:	409a      	lsls	r2, r3
 8000a58:	1e53      	subs	r3, r2, #1
 8000a5a:	419a      	sbcs	r2, r3
 8000a5c:	4315      	orrs	r5, r2
 8000a5e:	2307      	movs	r3, #7
 8000a60:	2700      	movs	r7, #0
 8000a62:	402b      	ands	r3, r5
 8000a64:	e7b0      	b.n	80009c8 <__aeabi_dadd+0x2d0>
 8000a66:	08ed      	lsrs	r5, r5, #3
 8000a68:	4b05      	ldr	r3, [pc, #20]	@ (8000a80 <__aeabi_dadd+0x388>)
 8000a6a:	0762      	lsls	r2, r4, #29
 8000a6c:	432a      	orrs	r2, r5
 8000a6e:	08e4      	lsrs	r4, r4, #3
 8000a70:	429f      	cmp	r7, r3
 8000a72:	d00f      	beq.n	8000a94 <__aeabi_dadd+0x39c>
 8000a74:	0324      	lsls	r4, r4, #12
 8000a76:	0b25      	lsrs	r5, r4, #12
 8000a78:	057c      	lsls	r4, r7, #21
 8000a7a:	0d64      	lsrs	r4, r4, #21
 8000a7c:	e6d4      	b.n	8000828 <__aeabi_dadd+0x130>
 8000a7e:	46c0      	nop			@ (mov r8, r8)
 8000a80:	000007ff 	.word	0x000007ff
 8000a84:	ff7fffff 	.word	0xff7fffff
 8000a88:	000007fe 	.word	0x000007fe
 8000a8c:	08c0      	lsrs	r0, r0, #3
 8000a8e:	0762      	lsls	r2, r4, #29
 8000a90:	4302      	orrs	r2, r0
 8000a92:	08e4      	lsrs	r4, r4, #3
 8000a94:	0013      	movs	r3, r2
 8000a96:	4323      	orrs	r3, r4
 8000a98:	d100      	bne.n	8000a9c <__aeabi_dadd+0x3a4>
 8000a9a:	e186      	b.n	8000daa <__aeabi_dadd+0x6b2>
 8000a9c:	2580      	movs	r5, #128	@ 0x80
 8000a9e:	032d      	lsls	r5, r5, #12
 8000aa0:	4325      	orrs	r5, r4
 8000aa2:	032d      	lsls	r5, r5, #12
 8000aa4:	4cc3      	ldr	r4, [pc, #780]	@ (8000db4 <__aeabi_dadd+0x6bc>)
 8000aa6:	0b2d      	lsrs	r5, r5, #12
 8000aa8:	e6be      	b.n	8000828 <__aeabi_dadd+0x130>
 8000aaa:	4660      	mov	r0, ip
 8000aac:	4654      	mov	r4, sl
 8000aae:	000e      	movs	r6, r1
 8000ab0:	0017      	movs	r7, r2
 8000ab2:	08c5      	lsrs	r5, r0, #3
 8000ab4:	e7d8      	b.n	8000a68 <__aeabi_dadd+0x370>
 8000ab6:	4cc0      	ldr	r4, [pc, #768]	@ (8000db8 <__aeabi_dadd+0x6c0>)
 8000ab8:	1aff      	subs	r7, r7, r3
 8000aba:	4014      	ands	r4, r2
 8000abc:	e696      	b.n	80007ec <__aeabi_dadd+0xf4>
 8000abe:	4abf      	ldr	r2, [pc, #764]	@ (8000dbc <__aeabi_dadd+0x6c4>)
 8000ac0:	1c79      	adds	r1, r7, #1
 8000ac2:	4211      	tst	r1, r2
 8000ac4:	d16b      	bne.n	8000b9e <__aeabi_dadd+0x4a6>
 8000ac6:	0022      	movs	r2, r4
 8000ac8:	4302      	orrs	r2, r0
 8000aca:	2f00      	cmp	r7, #0
 8000acc:	d000      	beq.n	8000ad0 <__aeabi_dadd+0x3d8>
 8000ace:	e0db      	b.n	8000c88 <__aeabi_dadd+0x590>
 8000ad0:	2a00      	cmp	r2, #0
 8000ad2:	d100      	bne.n	8000ad6 <__aeabi_dadd+0x3de>
 8000ad4:	e12d      	b.n	8000d32 <__aeabi_dadd+0x63a>
 8000ad6:	4662      	mov	r2, ip
 8000ad8:	4653      	mov	r3, sl
 8000ada:	431a      	orrs	r2, r3
 8000adc:	d100      	bne.n	8000ae0 <__aeabi_dadd+0x3e8>
 8000ade:	e0b6      	b.n	8000c4e <__aeabi_dadd+0x556>
 8000ae0:	4663      	mov	r3, ip
 8000ae2:	18c5      	adds	r5, r0, r3
 8000ae4:	4285      	cmp	r5, r0
 8000ae6:	4180      	sbcs	r0, r0
 8000ae8:	4454      	add	r4, sl
 8000aea:	4240      	negs	r0, r0
 8000aec:	1824      	adds	r4, r4, r0
 8000aee:	0223      	lsls	r3, r4, #8
 8000af0:	d502      	bpl.n	8000af8 <__aeabi_dadd+0x400>
 8000af2:	000f      	movs	r7, r1
 8000af4:	4bb0      	ldr	r3, [pc, #704]	@ (8000db8 <__aeabi_dadd+0x6c0>)
 8000af6:	401c      	ands	r4, r3
 8000af8:	003a      	movs	r2, r7
 8000afa:	0028      	movs	r0, r5
 8000afc:	e7d8      	b.n	8000ab0 <__aeabi_dadd+0x3b8>
 8000afe:	4662      	mov	r2, ip
 8000b00:	1a85      	subs	r5, r0, r2
 8000b02:	42a8      	cmp	r0, r5
 8000b04:	4192      	sbcs	r2, r2
 8000b06:	4653      	mov	r3, sl
 8000b08:	4252      	negs	r2, r2
 8000b0a:	4691      	mov	r9, r2
 8000b0c:	1ae3      	subs	r3, r4, r3
 8000b0e:	001a      	movs	r2, r3
 8000b10:	464b      	mov	r3, r9
 8000b12:	1ad2      	subs	r2, r2, r3
 8000b14:	0013      	movs	r3, r2
 8000b16:	4691      	mov	r9, r2
 8000b18:	021a      	lsls	r2, r3, #8
 8000b1a:	d454      	bmi.n	8000bc6 <__aeabi_dadd+0x4ce>
 8000b1c:	464a      	mov	r2, r9
 8000b1e:	464c      	mov	r4, r9
 8000b20:	432a      	orrs	r2, r5
 8000b22:	d000      	beq.n	8000b26 <__aeabi_dadd+0x42e>
 8000b24:	e640      	b.n	80007a8 <__aeabi_dadd+0xb0>
 8000b26:	2600      	movs	r6, #0
 8000b28:	2400      	movs	r4, #0
 8000b2a:	2500      	movs	r5, #0
 8000b2c:	e67c      	b.n	8000828 <__aeabi_dadd+0x130>
 8000b2e:	4da1      	ldr	r5, [pc, #644]	@ (8000db4 <__aeabi_dadd+0x6bc>)
 8000b30:	45a9      	cmp	r9, r5
 8000b32:	d100      	bne.n	8000b36 <__aeabi_dadd+0x43e>
 8000b34:	e090      	b.n	8000c58 <__aeabi_dadd+0x560>
 8000b36:	2501      	movs	r5, #1
 8000b38:	2a38      	cmp	r2, #56	@ 0x38
 8000b3a:	dd00      	ble.n	8000b3e <__aeabi_dadd+0x446>
 8000b3c:	e6ab      	b.n	8000896 <__aeabi_dadd+0x19e>
 8000b3e:	2580      	movs	r5, #128	@ 0x80
 8000b40:	042d      	lsls	r5, r5, #16
 8000b42:	432c      	orrs	r4, r5
 8000b44:	e695      	b.n	8000872 <__aeabi_dadd+0x17a>
 8000b46:	0011      	movs	r1, r2
 8000b48:	4655      	mov	r5, sl
 8000b4a:	3920      	subs	r1, #32
 8000b4c:	40cd      	lsrs	r5, r1
 8000b4e:	46a9      	mov	r9, r5
 8000b50:	2a20      	cmp	r2, #32
 8000b52:	d006      	beq.n	8000b62 <__aeabi_dadd+0x46a>
 8000b54:	2140      	movs	r1, #64	@ 0x40
 8000b56:	4653      	mov	r3, sl
 8000b58:	1a8a      	subs	r2, r1, r2
 8000b5a:	4093      	lsls	r3, r2
 8000b5c:	4662      	mov	r2, ip
 8000b5e:	431a      	orrs	r2, r3
 8000b60:	4694      	mov	ip, r2
 8000b62:	4665      	mov	r5, ip
 8000b64:	1e6b      	subs	r3, r5, #1
 8000b66:	419d      	sbcs	r5, r3
 8000b68:	464b      	mov	r3, r9
 8000b6a:	431d      	orrs	r5, r3
 8000b6c:	e612      	b.n	8000794 <__aeabi_dadd+0x9c>
 8000b6e:	0021      	movs	r1, r4
 8000b70:	4301      	orrs	r1, r0
 8000b72:	d100      	bne.n	8000b76 <__aeabi_dadd+0x47e>
 8000b74:	e0c4      	b.n	8000d00 <__aeabi_dadd+0x608>
 8000b76:	1e51      	subs	r1, r2, #1
 8000b78:	2a01      	cmp	r2, #1
 8000b7a:	d100      	bne.n	8000b7e <__aeabi_dadd+0x486>
 8000b7c:	e0fb      	b.n	8000d76 <__aeabi_dadd+0x67e>
 8000b7e:	4d8d      	ldr	r5, [pc, #564]	@ (8000db4 <__aeabi_dadd+0x6bc>)
 8000b80:	42aa      	cmp	r2, r5
 8000b82:	d100      	bne.n	8000b86 <__aeabi_dadd+0x48e>
 8000b84:	e0b5      	b.n	8000cf2 <__aeabi_dadd+0x5fa>
 8000b86:	2501      	movs	r5, #1
 8000b88:	2938      	cmp	r1, #56	@ 0x38
 8000b8a:	dd00      	ble.n	8000b8e <__aeabi_dadd+0x496>
 8000b8c:	e741      	b.n	8000a12 <__aeabi_dadd+0x31a>
 8000b8e:	000a      	movs	r2, r1
 8000b90:	e72f      	b.n	80009f2 <__aeabi_dadd+0x2fa>
 8000b92:	4c89      	ldr	r4, [pc, #548]	@ (8000db8 <__aeabi_dadd+0x6c0>)
 8000b94:	1aff      	subs	r7, r7, r3
 8000b96:	4014      	ands	r4, r2
 8000b98:	0762      	lsls	r2, r4, #29
 8000b9a:	08e4      	lsrs	r4, r4, #3
 8000b9c:	e76a      	b.n	8000a74 <__aeabi_dadd+0x37c>
 8000b9e:	4a85      	ldr	r2, [pc, #532]	@ (8000db4 <__aeabi_dadd+0x6bc>)
 8000ba0:	4291      	cmp	r1, r2
 8000ba2:	d100      	bne.n	8000ba6 <__aeabi_dadd+0x4ae>
 8000ba4:	e0e3      	b.n	8000d6e <__aeabi_dadd+0x676>
 8000ba6:	4663      	mov	r3, ip
 8000ba8:	18c2      	adds	r2, r0, r3
 8000baa:	4282      	cmp	r2, r0
 8000bac:	4180      	sbcs	r0, r0
 8000bae:	0023      	movs	r3, r4
 8000bb0:	4240      	negs	r0, r0
 8000bb2:	4453      	add	r3, sl
 8000bb4:	181b      	adds	r3, r3, r0
 8000bb6:	07dd      	lsls	r5, r3, #31
 8000bb8:	085c      	lsrs	r4, r3, #1
 8000bba:	2307      	movs	r3, #7
 8000bbc:	0852      	lsrs	r2, r2, #1
 8000bbe:	4315      	orrs	r5, r2
 8000bc0:	000f      	movs	r7, r1
 8000bc2:	402b      	ands	r3, r5
 8000bc4:	e700      	b.n	80009c8 <__aeabi_dadd+0x2d0>
 8000bc6:	4663      	mov	r3, ip
 8000bc8:	1a1d      	subs	r5, r3, r0
 8000bca:	45ac      	cmp	ip, r5
 8000bcc:	4192      	sbcs	r2, r2
 8000bce:	4653      	mov	r3, sl
 8000bd0:	4252      	negs	r2, r2
 8000bd2:	1b1c      	subs	r4, r3, r4
 8000bd4:	000e      	movs	r6, r1
 8000bd6:	4688      	mov	r8, r1
 8000bd8:	1aa4      	subs	r4, r4, r2
 8000bda:	e5e5      	b.n	80007a8 <__aeabi_dadd+0xb0>
 8000bdc:	2d00      	cmp	r5, #0
 8000bde:	d000      	beq.n	8000be2 <__aeabi_dadd+0x4ea>
 8000be0:	e091      	b.n	8000d06 <__aeabi_dadd+0x60e>
 8000be2:	2a00      	cmp	r2, #0
 8000be4:	d138      	bne.n	8000c58 <__aeabi_dadd+0x560>
 8000be6:	2480      	movs	r4, #128	@ 0x80
 8000be8:	2600      	movs	r6, #0
 8000bea:	0324      	lsls	r4, r4, #12
 8000bec:	e756      	b.n	8000a9c <__aeabi_dadd+0x3a4>
 8000bee:	4663      	mov	r3, ip
 8000bf0:	18c5      	adds	r5, r0, r3
 8000bf2:	4285      	cmp	r5, r0
 8000bf4:	4180      	sbcs	r0, r0
 8000bf6:	4454      	add	r4, sl
 8000bf8:	4240      	negs	r0, r0
 8000bfa:	1824      	adds	r4, r4, r0
 8000bfc:	2701      	movs	r7, #1
 8000bfe:	0223      	lsls	r3, r4, #8
 8000c00:	d400      	bmi.n	8000c04 <__aeabi_dadd+0x50c>
 8000c02:	e6df      	b.n	80009c4 <__aeabi_dadd+0x2cc>
 8000c04:	2702      	movs	r7, #2
 8000c06:	e687      	b.n	8000918 <__aeabi_dadd+0x220>
 8000c08:	4663      	mov	r3, ip
 8000c0a:	1ac5      	subs	r5, r0, r3
 8000c0c:	42a8      	cmp	r0, r5
 8000c0e:	4180      	sbcs	r0, r0
 8000c10:	4653      	mov	r3, sl
 8000c12:	4240      	negs	r0, r0
 8000c14:	1ae4      	subs	r4, r4, r3
 8000c16:	2701      	movs	r7, #1
 8000c18:	1a24      	subs	r4, r4, r0
 8000c1a:	e5c0      	b.n	800079e <__aeabi_dadd+0xa6>
 8000c1c:	0762      	lsls	r2, r4, #29
 8000c1e:	08c0      	lsrs	r0, r0, #3
 8000c20:	4302      	orrs	r2, r0
 8000c22:	08e4      	lsrs	r4, r4, #3
 8000c24:	e736      	b.n	8000a94 <__aeabi_dadd+0x39c>
 8000c26:	0011      	movs	r1, r2
 8000c28:	4653      	mov	r3, sl
 8000c2a:	3920      	subs	r1, #32
 8000c2c:	40cb      	lsrs	r3, r1
 8000c2e:	4699      	mov	r9, r3
 8000c30:	2a20      	cmp	r2, #32
 8000c32:	d006      	beq.n	8000c42 <__aeabi_dadd+0x54a>
 8000c34:	2140      	movs	r1, #64	@ 0x40
 8000c36:	4653      	mov	r3, sl
 8000c38:	1a8a      	subs	r2, r1, r2
 8000c3a:	4093      	lsls	r3, r2
 8000c3c:	4662      	mov	r2, ip
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	4694      	mov	ip, r2
 8000c42:	4665      	mov	r5, ip
 8000c44:	1e6b      	subs	r3, r5, #1
 8000c46:	419d      	sbcs	r5, r3
 8000c48:	464b      	mov	r3, r9
 8000c4a:	431d      	orrs	r5, r3
 8000c4c:	e659      	b.n	8000902 <__aeabi_dadd+0x20a>
 8000c4e:	0762      	lsls	r2, r4, #29
 8000c50:	08c0      	lsrs	r0, r0, #3
 8000c52:	4302      	orrs	r2, r0
 8000c54:	08e4      	lsrs	r4, r4, #3
 8000c56:	e70d      	b.n	8000a74 <__aeabi_dadd+0x37c>
 8000c58:	4653      	mov	r3, sl
 8000c5a:	075a      	lsls	r2, r3, #29
 8000c5c:	4663      	mov	r3, ip
 8000c5e:	08d8      	lsrs	r0, r3, #3
 8000c60:	4653      	mov	r3, sl
 8000c62:	000e      	movs	r6, r1
 8000c64:	4302      	orrs	r2, r0
 8000c66:	08dc      	lsrs	r4, r3, #3
 8000c68:	e714      	b.n	8000a94 <__aeabi_dadd+0x39c>
 8000c6a:	0015      	movs	r5, r2
 8000c6c:	0026      	movs	r6, r4
 8000c6e:	3d20      	subs	r5, #32
 8000c70:	40ee      	lsrs	r6, r5
 8000c72:	2a20      	cmp	r2, #32
 8000c74:	d003      	beq.n	8000c7e <__aeabi_dadd+0x586>
 8000c76:	2540      	movs	r5, #64	@ 0x40
 8000c78:	1aaa      	subs	r2, r5, r2
 8000c7a:	4094      	lsls	r4, r2
 8000c7c:	4320      	orrs	r0, r4
 8000c7e:	1e42      	subs	r2, r0, #1
 8000c80:	4190      	sbcs	r0, r2
 8000c82:	0005      	movs	r5, r0
 8000c84:	4335      	orrs	r5, r6
 8000c86:	e606      	b.n	8000896 <__aeabi_dadd+0x19e>
 8000c88:	2a00      	cmp	r2, #0
 8000c8a:	d07c      	beq.n	8000d86 <__aeabi_dadd+0x68e>
 8000c8c:	4662      	mov	r2, ip
 8000c8e:	4653      	mov	r3, sl
 8000c90:	08c0      	lsrs	r0, r0, #3
 8000c92:	431a      	orrs	r2, r3
 8000c94:	d100      	bne.n	8000c98 <__aeabi_dadd+0x5a0>
 8000c96:	e6fa      	b.n	8000a8e <__aeabi_dadd+0x396>
 8000c98:	0762      	lsls	r2, r4, #29
 8000c9a:	4310      	orrs	r0, r2
 8000c9c:	2280      	movs	r2, #128	@ 0x80
 8000c9e:	08e4      	lsrs	r4, r4, #3
 8000ca0:	0312      	lsls	r2, r2, #12
 8000ca2:	4214      	tst	r4, r2
 8000ca4:	d008      	beq.n	8000cb8 <__aeabi_dadd+0x5c0>
 8000ca6:	08d9      	lsrs	r1, r3, #3
 8000ca8:	4211      	tst	r1, r2
 8000caa:	d105      	bne.n	8000cb8 <__aeabi_dadd+0x5c0>
 8000cac:	4663      	mov	r3, ip
 8000cae:	08d8      	lsrs	r0, r3, #3
 8000cb0:	4653      	mov	r3, sl
 8000cb2:	000c      	movs	r4, r1
 8000cb4:	075b      	lsls	r3, r3, #29
 8000cb6:	4318      	orrs	r0, r3
 8000cb8:	0f42      	lsrs	r2, r0, #29
 8000cba:	00c0      	lsls	r0, r0, #3
 8000cbc:	08c0      	lsrs	r0, r0, #3
 8000cbe:	0752      	lsls	r2, r2, #29
 8000cc0:	4302      	orrs	r2, r0
 8000cc2:	e6e7      	b.n	8000a94 <__aeabi_dadd+0x39c>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	d100      	bne.n	8000cca <__aeabi_dadd+0x5d2>
 8000cc8:	e72d      	b.n	8000b26 <__aeabi_dadd+0x42e>
 8000cca:	4663      	mov	r3, ip
 8000ccc:	08d8      	lsrs	r0, r3, #3
 8000cce:	4653      	mov	r3, sl
 8000cd0:	075a      	lsls	r2, r3, #29
 8000cd2:	000e      	movs	r6, r1
 8000cd4:	4302      	orrs	r2, r0
 8000cd6:	08dc      	lsrs	r4, r3, #3
 8000cd8:	e6cc      	b.n	8000a74 <__aeabi_dadd+0x37c>
 8000cda:	4663      	mov	r3, ip
 8000cdc:	1a1d      	subs	r5, r3, r0
 8000cde:	45ac      	cmp	ip, r5
 8000ce0:	4192      	sbcs	r2, r2
 8000ce2:	4653      	mov	r3, sl
 8000ce4:	4252      	negs	r2, r2
 8000ce6:	1b1c      	subs	r4, r3, r4
 8000ce8:	000e      	movs	r6, r1
 8000cea:	4688      	mov	r8, r1
 8000cec:	1aa4      	subs	r4, r4, r2
 8000cee:	3701      	adds	r7, #1
 8000cf0:	e555      	b.n	800079e <__aeabi_dadd+0xa6>
 8000cf2:	4663      	mov	r3, ip
 8000cf4:	08d9      	lsrs	r1, r3, #3
 8000cf6:	4653      	mov	r3, sl
 8000cf8:	075a      	lsls	r2, r3, #29
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	08dc      	lsrs	r4, r3, #3
 8000cfe:	e6c9      	b.n	8000a94 <__aeabi_dadd+0x39c>
 8000d00:	4660      	mov	r0, ip
 8000d02:	4654      	mov	r4, sl
 8000d04:	e6d4      	b.n	8000ab0 <__aeabi_dadd+0x3b8>
 8000d06:	08c0      	lsrs	r0, r0, #3
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	d100      	bne.n	8000d0e <__aeabi_dadd+0x616>
 8000d0c:	e6bf      	b.n	8000a8e <__aeabi_dadd+0x396>
 8000d0e:	0762      	lsls	r2, r4, #29
 8000d10:	4310      	orrs	r0, r2
 8000d12:	2280      	movs	r2, #128	@ 0x80
 8000d14:	08e4      	lsrs	r4, r4, #3
 8000d16:	0312      	lsls	r2, r2, #12
 8000d18:	4214      	tst	r4, r2
 8000d1a:	d0cd      	beq.n	8000cb8 <__aeabi_dadd+0x5c0>
 8000d1c:	08dd      	lsrs	r5, r3, #3
 8000d1e:	4215      	tst	r5, r2
 8000d20:	d1ca      	bne.n	8000cb8 <__aeabi_dadd+0x5c0>
 8000d22:	4663      	mov	r3, ip
 8000d24:	08d8      	lsrs	r0, r3, #3
 8000d26:	4653      	mov	r3, sl
 8000d28:	075b      	lsls	r3, r3, #29
 8000d2a:	000e      	movs	r6, r1
 8000d2c:	002c      	movs	r4, r5
 8000d2e:	4318      	orrs	r0, r3
 8000d30:	e7c2      	b.n	8000cb8 <__aeabi_dadd+0x5c0>
 8000d32:	4663      	mov	r3, ip
 8000d34:	08d9      	lsrs	r1, r3, #3
 8000d36:	4653      	mov	r3, sl
 8000d38:	075a      	lsls	r2, r3, #29
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	08dc      	lsrs	r4, r3, #3
 8000d3e:	e699      	b.n	8000a74 <__aeabi_dadd+0x37c>
 8000d40:	4663      	mov	r3, ip
 8000d42:	08d8      	lsrs	r0, r3, #3
 8000d44:	4653      	mov	r3, sl
 8000d46:	075a      	lsls	r2, r3, #29
 8000d48:	000e      	movs	r6, r1
 8000d4a:	4302      	orrs	r2, r0
 8000d4c:	08dc      	lsrs	r4, r3, #3
 8000d4e:	e6a1      	b.n	8000a94 <__aeabi_dadd+0x39c>
 8000d50:	0011      	movs	r1, r2
 8000d52:	0027      	movs	r7, r4
 8000d54:	3920      	subs	r1, #32
 8000d56:	40cf      	lsrs	r7, r1
 8000d58:	2a20      	cmp	r2, #32
 8000d5a:	d003      	beq.n	8000d64 <__aeabi_dadd+0x66c>
 8000d5c:	2140      	movs	r1, #64	@ 0x40
 8000d5e:	1a8a      	subs	r2, r1, r2
 8000d60:	4094      	lsls	r4, r2
 8000d62:	4320      	orrs	r0, r4
 8000d64:	1e42      	subs	r2, r0, #1
 8000d66:	4190      	sbcs	r0, r2
 8000d68:	0005      	movs	r5, r0
 8000d6a:	433d      	orrs	r5, r7
 8000d6c:	e651      	b.n	8000a12 <__aeabi_dadd+0x31a>
 8000d6e:	000c      	movs	r4, r1
 8000d70:	2500      	movs	r5, #0
 8000d72:	2200      	movs	r2, #0
 8000d74:	e558      	b.n	8000828 <__aeabi_dadd+0x130>
 8000d76:	4460      	add	r0, ip
 8000d78:	4560      	cmp	r0, ip
 8000d7a:	4192      	sbcs	r2, r2
 8000d7c:	4454      	add	r4, sl
 8000d7e:	4252      	negs	r2, r2
 8000d80:	0005      	movs	r5, r0
 8000d82:	18a4      	adds	r4, r4, r2
 8000d84:	e73a      	b.n	8000bfc <__aeabi_dadd+0x504>
 8000d86:	4653      	mov	r3, sl
 8000d88:	075a      	lsls	r2, r3, #29
 8000d8a:	4663      	mov	r3, ip
 8000d8c:	08d9      	lsrs	r1, r3, #3
 8000d8e:	4653      	mov	r3, sl
 8000d90:	430a      	orrs	r2, r1
 8000d92:	08dc      	lsrs	r4, r3, #3
 8000d94:	e67e      	b.n	8000a94 <__aeabi_dadd+0x39c>
 8000d96:	001a      	movs	r2, r3
 8000d98:	001c      	movs	r4, r3
 8000d9a:	432a      	orrs	r2, r5
 8000d9c:	d000      	beq.n	8000da0 <__aeabi_dadd+0x6a8>
 8000d9e:	e6ab      	b.n	8000af8 <__aeabi_dadd+0x400>
 8000da0:	e6c1      	b.n	8000b26 <__aeabi_dadd+0x42e>
 8000da2:	2120      	movs	r1, #32
 8000da4:	2500      	movs	r5, #0
 8000da6:	1a09      	subs	r1, r1, r0
 8000da8:	e519      	b.n	80007de <__aeabi_dadd+0xe6>
 8000daa:	2200      	movs	r2, #0
 8000dac:	2500      	movs	r5, #0
 8000dae:	4c01      	ldr	r4, [pc, #4]	@ (8000db4 <__aeabi_dadd+0x6bc>)
 8000db0:	e53a      	b.n	8000828 <__aeabi_dadd+0x130>
 8000db2:	46c0      	nop			@ (mov r8, r8)
 8000db4:	000007ff 	.word	0x000007ff
 8000db8:	ff7fffff 	.word	0xff7fffff
 8000dbc:	000007fe 	.word	0x000007fe

08000dc0 <__aeabi_ddiv>:
 8000dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dc2:	46de      	mov	lr, fp
 8000dc4:	4645      	mov	r5, r8
 8000dc6:	4657      	mov	r7, sl
 8000dc8:	464e      	mov	r6, r9
 8000dca:	b5e0      	push	{r5, r6, r7, lr}
 8000dcc:	b087      	sub	sp, #28
 8000dce:	9200      	str	r2, [sp, #0]
 8000dd0:	9301      	str	r3, [sp, #4]
 8000dd2:	030b      	lsls	r3, r1, #12
 8000dd4:	0b1b      	lsrs	r3, r3, #12
 8000dd6:	469b      	mov	fp, r3
 8000dd8:	0fca      	lsrs	r2, r1, #31
 8000dda:	004b      	lsls	r3, r1, #1
 8000ddc:	0004      	movs	r4, r0
 8000dde:	4680      	mov	r8, r0
 8000de0:	0d5b      	lsrs	r3, r3, #21
 8000de2:	9202      	str	r2, [sp, #8]
 8000de4:	d100      	bne.n	8000de8 <__aeabi_ddiv+0x28>
 8000de6:	e16a      	b.n	80010be <__aeabi_ddiv+0x2fe>
 8000de8:	4ad4      	ldr	r2, [pc, #848]	@ (800113c <__aeabi_ddiv+0x37c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d100      	bne.n	8000df0 <__aeabi_ddiv+0x30>
 8000dee:	e18c      	b.n	800110a <__aeabi_ddiv+0x34a>
 8000df0:	4659      	mov	r1, fp
 8000df2:	0f42      	lsrs	r2, r0, #29
 8000df4:	00c9      	lsls	r1, r1, #3
 8000df6:	430a      	orrs	r2, r1
 8000df8:	2180      	movs	r1, #128	@ 0x80
 8000dfa:	0409      	lsls	r1, r1, #16
 8000dfc:	4311      	orrs	r1, r2
 8000dfe:	00c2      	lsls	r2, r0, #3
 8000e00:	4690      	mov	r8, r2
 8000e02:	4acf      	ldr	r2, [pc, #828]	@ (8001140 <__aeabi_ddiv+0x380>)
 8000e04:	4689      	mov	r9, r1
 8000e06:	4692      	mov	sl, r2
 8000e08:	449a      	add	sl, r3
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	2400      	movs	r4, #0
 8000e0e:	9303      	str	r3, [sp, #12]
 8000e10:	9e00      	ldr	r6, [sp, #0]
 8000e12:	9f01      	ldr	r7, [sp, #4]
 8000e14:	033b      	lsls	r3, r7, #12
 8000e16:	0b1b      	lsrs	r3, r3, #12
 8000e18:	469b      	mov	fp, r3
 8000e1a:	007b      	lsls	r3, r7, #1
 8000e1c:	0030      	movs	r0, r6
 8000e1e:	0d5b      	lsrs	r3, r3, #21
 8000e20:	0ffd      	lsrs	r5, r7, #31
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d100      	bne.n	8000e28 <__aeabi_ddiv+0x68>
 8000e26:	e128      	b.n	800107a <__aeabi_ddiv+0x2ba>
 8000e28:	4ac4      	ldr	r2, [pc, #784]	@ (800113c <__aeabi_ddiv+0x37c>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_ddiv+0x70>
 8000e2e:	e177      	b.n	8001120 <__aeabi_ddiv+0x360>
 8000e30:	4659      	mov	r1, fp
 8000e32:	0f72      	lsrs	r2, r6, #29
 8000e34:	00c9      	lsls	r1, r1, #3
 8000e36:	430a      	orrs	r2, r1
 8000e38:	2180      	movs	r1, #128	@ 0x80
 8000e3a:	0409      	lsls	r1, r1, #16
 8000e3c:	4311      	orrs	r1, r2
 8000e3e:	468b      	mov	fp, r1
 8000e40:	49bf      	ldr	r1, [pc, #764]	@ (8001140 <__aeabi_ddiv+0x380>)
 8000e42:	00f2      	lsls	r2, r6, #3
 8000e44:	468c      	mov	ip, r1
 8000e46:	4651      	mov	r1, sl
 8000e48:	4463      	add	r3, ip
 8000e4a:	1acb      	subs	r3, r1, r3
 8000e4c:	469a      	mov	sl, r3
 8000e4e:	2300      	movs	r3, #0
 8000e50:	9e02      	ldr	r6, [sp, #8]
 8000e52:	406e      	eors	r6, r5
 8000e54:	2c0f      	cmp	r4, #15
 8000e56:	d827      	bhi.n	8000ea8 <__aeabi_ddiv+0xe8>
 8000e58:	49ba      	ldr	r1, [pc, #744]	@ (8001144 <__aeabi_ddiv+0x384>)
 8000e5a:	00a4      	lsls	r4, r4, #2
 8000e5c:	5909      	ldr	r1, [r1, r4]
 8000e5e:	468f      	mov	pc, r1
 8000e60:	46cb      	mov	fp, r9
 8000e62:	4642      	mov	r2, r8
 8000e64:	9e02      	ldr	r6, [sp, #8]
 8000e66:	9b03      	ldr	r3, [sp, #12]
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d016      	beq.n	8000e9a <__aeabi_ddiv+0xda>
 8000e6c:	2b03      	cmp	r3, #3
 8000e6e:	d100      	bne.n	8000e72 <__aeabi_ddiv+0xb2>
 8000e70:	e2a6      	b.n	80013c0 <__aeabi_ddiv+0x600>
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d000      	beq.n	8000e78 <__aeabi_ddiv+0xb8>
 8000e76:	e0df      	b.n	8001038 <__aeabi_ddiv+0x278>
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	2400      	movs	r4, #0
 8000e7e:	4690      	mov	r8, r2
 8000e80:	051b      	lsls	r3, r3, #20
 8000e82:	4323      	orrs	r3, r4
 8000e84:	07f6      	lsls	r6, r6, #31
 8000e86:	4333      	orrs	r3, r6
 8000e88:	4640      	mov	r0, r8
 8000e8a:	0019      	movs	r1, r3
 8000e8c:	b007      	add	sp, #28
 8000e8e:	bcf0      	pop	{r4, r5, r6, r7}
 8000e90:	46bb      	mov	fp, r7
 8000e92:	46b2      	mov	sl, r6
 8000e94:	46a9      	mov	r9, r5
 8000e96:	46a0      	mov	r8, r4
 8000e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2400      	movs	r4, #0
 8000e9e:	4690      	mov	r8, r2
 8000ea0:	4ba6      	ldr	r3, [pc, #664]	@ (800113c <__aeabi_ddiv+0x37c>)
 8000ea2:	e7ed      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 8000ea4:	002e      	movs	r6, r5
 8000ea6:	e7df      	b.n	8000e68 <__aeabi_ddiv+0xa8>
 8000ea8:	45cb      	cmp	fp, r9
 8000eaa:	d200      	bcs.n	8000eae <__aeabi_ddiv+0xee>
 8000eac:	e1d4      	b.n	8001258 <__aeabi_ddiv+0x498>
 8000eae:	d100      	bne.n	8000eb2 <__aeabi_ddiv+0xf2>
 8000eb0:	e1cf      	b.n	8001252 <__aeabi_ddiv+0x492>
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	425b      	negs	r3, r3
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	4644      	mov	r4, r8
 8000eba:	4648      	mov	r0, r9
 8000ebc:	2700      	movs	r7, #0
 8000ebe:	44e2      	add	sl, ip
 8000ec0:	465b      	mov	r3, fp
 8000ec2:	0e15      	lsrs	r5, r2, #24
 8000ec4:	021b      	lsls	r3, r3, #8
 8000ec6:	431d      	orrs	r5, r3
 8000ec8:	0c19      	lsrs	r1, r3, #16
 8000eca:	042b      	lsls	r3, r5, #16
 8000ecc:	0212      	lsls	r2, r2, #8
 8000ece:	9500      	str	r5, [sp, #0]
 8000ed0:	0c1d      	lsrs	r5, r3, #16
 8000ed2:	4691      	mov	r9, r2
 8000ed4:	9102      	str	r1, [sp, #8]
 8000ed6:	9503      	str	r5, [sp, #12]
 8000ed8:	f7ff f9b8 	bl	800024c <__aeabi_uidivmod>
 8000edc:	0002      	movs	r2, r0
 8000ede:	436a      	muls	r2, r5
 8000ee0:	040b      	lsls	r3, r1, #16
 8000ee2:	0c21      	lsrs	r1, r4, #16
 8000ee4:	4680      	mov	r8, r0
 8000ee6:	4319      	orrs	r1, r3
 8000ee8:	428a      	cmp	r2, r1
 8000eea:	d909      	bls.n	8000f00 <__aeabi_ddiv+0x140>
 8000eec:	9d00      	ldr	r5, [sp, #0]
 8000eee:	2301      	movs	r3, #1
 8000ef0:	46ac      	mov	ip, r5
 8000ef2:	425b      	negs	r3, r3
 8000ef4:	4461      	add	r1, ip
 8000ef6:	469c      	mov	ip, r3
 8000ef8:	44e0      	add	r8, ip
 8000efa:	428d      	cmp	r5, r1
 8000efc:	d800      	bhi.n	8000f00 <__aeabi_ddiv+0x140>
 8000efe:	e1fb      	b.n	80012f8 <__aeabi_ddiv+0x538>
 8000f00:	1a88      	subs	r0, r1, r2
 8000f02:	9902      	ldr	r1, [sp, #8]
 8000f04:	f7ff f9a2 	bl	800024c <__aeabi_uidivmod>
 8000f08:	9a03      	ldr	r2, [sp, #12]
 8000f0a:	0424      	lsls	r4, r4, #16
 8000f0c:	4342      	muls	r2, r0
 8000f0e:	0409      	lsls	r1, r1, #16
 8000f10:	0c24      	lsrs	r4, r4, #16
 8000f12:	0003      	movs	r3, r0
 8000f14:	430c      	orrs	r4, r1
 8000f16:	42a2      	cmp	r2, r4
 8000f18:	d906      	bls.n	8000f28 <__aeabi_ddiv+0x168>
 8000f1a:	9900      	ldr	r1, [sp, #0]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	468c      	mov	ip, r1
 8000f20:	4464      	add	r4, ip
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	d800      	bhi.n	8000f28 <__aeabi_ddiv+0x168>
 8000f26:	e1e1      	b.n	80012ec <__aeabi_ddiv+0x52c>
 8000f28:	1aa0      	subs	r0, r4, r2
 8000f2a:	4642      	mov	r2, r8
 8000f2c:	0412      	lsls	r2, r2, #16
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	4693      	mov	fp, r2
 8000f32:	464b      	mov	r3, r9
 8000f34:	4659      	mov	r1, fp
 8000f36:	0c1b      	lsrs	r3, r3, #16
 8000f38:	001d      	movs	r5, r3
 8000f3a:	9304      	str	r3, [sp, #16]
 8000f3c:	040b      	lsls	r3, r1, #16
 8000f3e:	4649      	mov	r1, r9
 8000f40:	0409      	lsls	r1, r1, #16
 8000f42:	0c09      	lsrs	r1, r1, #16
 8000f44:	000c      	movs	r4, r1
 8000f46:	0c1b      	lsrs	r3, r3, #16
 8000f48:	435c      	muls	r4, r3
 8000f4a:	0c12      	lsrs	r2, r2, #16
 8000f4c:	436b      	muls	r3, r5
 8000f4e:	4688      	mov	r8, r1
 8000f50:	4351      	muls	r1, r2
 8000f52:	436a      	muls	r2, r5
 8000f54:	0c25      	lsrs	r5, r4, #16
 8000f56:	46ac      	mov	ip, r5
 8000f58:	185b      	adds	r3, r3, r1
 8000f5a:	4463      	add	r3, ip
 8000f5c:	4299      	cmp	r1, r3
 8000f5e:	d903      	bls.n	8000f68 <__aeabi_ddiv+0x1a8>
 8000f60:	2180      	movs	r1, #128	@ 0x80
 8000f62:	0249      	lsls	r1, r1, #9
 8000f64:	468c      	mov	ip, r1
 8000f66:	4462      	add	r2, ip
 8000f68:	0c19      	lsrs	r1, r3, #16
 8000f6a:	0424      	lsls	r4, r4, #16
 8000f6c:	041b      	lsls	r3, r3, #16
 8000f6e:	0c24      	lsrs	r4, r4, #16
 8000f70:	188a      	adds	r2, r1, r2
 8000f72:	191c      	adds	r4, r3, r4
 8000f74:	4290      	cmp	r0, r2
 8000f76:	d302      	bcc.n	8000f7e <__aeabi_ddiv+0x1be>
 8000f78:	d116      	bne.n	8000fa8 <__aeabi_ddiv+0x1e8>
 8000f7a:	42a7      	cmp	r7, r4
 8000f7c:	d214      	bcs.n	8000fa8 <__aeabi_ddiv+0x1e8>
 8000f7e:	465b      	mov	r3, fp
 8000f80:	9d00      	ldr	r5, [sp, #0]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	444f      	add	r7, r9
 8000f86:	9305      	str	r3, [sp, #20]
 8000f88:	454f      	cmp	r7, r9
 8000f8a:	419b      	sbcs	r3, r3
 8000f8c:	46ac      	mov	ip, r5
 8000f8e:	425b      	negs	r3, r3
 8000f90:	4463      	add	r3, ip
 8000f92:	18c0      	adds	r0, r0, r3
 8000f94:	4285      	cmp	r5, r0
 8000f96:	d300      	bcc.n	8000f9a <__aeabi_ddiv+0x1da>
 8000f98:	e1a1      	b.n	80012de <__aeabi_ddiv+0x51e>
 8000f9a:	4282      	cmp	r2, r0
 8000f9c:	d900      	bls.n	8000fa0 <__aeabi_ddiv+0x1e0>
 8000f9e:	e1f6      	b.n	800138e <__aeabi_ddiv+0x5ce>
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_ddiv+0x1e4>
 8000fa2:	e1f1      	b.n	8001388 <__aeabi_ddiv+0x5c8>
 8000fa4:	9b05      	ldr	r3, [sp, #20]
 8000fa6:	469b      	mov	fp, r3
 8000fa8:	1b3c      	subs	r4, r7, r4
 8000faa:	42a7      	cmp	r7, r4
 8000fac:	41bf      	sbcs	r7, r7
 8000fae:	9d00      	ldr	r5, [sp, #0]
 8000fb0:	1a80      	subs	r0, r0, r2
 8000fb2:	427f      	negs	r7, r7
 8000fb4:	1bc0      	subs	r0, r0, r7
 8000fb6:	4285      	cmp	r5, r0
 8000fb8:	d100      	bne.n	8000fbc <__aeabi_ddiv+0x1fc>
 8000fba:	e1d0      	b.n	800135e <__aeabi_ddiv+0x59e>
 8000fbc:	9902      	ldr	r1, [sp, #8]
 8000fbe:	f7ff f945 	bl	800024c <__aeabi_uidivmod>
 8000fc2:	9a03      	ldr	r2, [sp, #12]
 8000fc4:	040b      	lsls	r3, r1, #16
 8000fc6:	4342      	muls	r2, r0
 8000fc8:	0c21      	lsrs	r1, r4, #16
 8000fca:	0007      	movs	r7, r0
 8000fcc:	4319      	orrs	r1, r3
 8000fce:	428a      	cmp	r2, r1
 8000fd0:	d900      	bls.n	8000fd4 <__aeabi_ddiv+0x214>
 8000fd2:	e178      	b.n	80012c6 <__aeabi_ddiv+0x506>
 8000fd4:	1a88      	subs	r0, r1, r2
 8000fd6:	9902      	ldr	r1, [sp, #8]
 8000fd8:	f7ff f938 	bl	800024c <__aeabi_uidivmod>
 8000fdc:	9a03      	ldr	r2, [sp, #12]
 8000fde:	0424      	lsls	r4, r4, #16
 8000fe0:	4342      	muls	r2, r0
 8000fe2:	0409      	lsls	r1, r1, #16
 8000fe4:	0c24      	lsrs	r4, r4, #16
 8000fe6:	0003      	movs	r3, r0
 8000fe8:	430c      	orrs	r4, r1
 8000fea:	42a2      	cmp	r2, r4
 8000fec:	d900      	bls.n	8000ff0 <__aeabi_ddiv+0x230>
 8000fee:	e15d      	b.n	80012ac <__aeabi_ddiv+0x4ec>
 8000ff0:	4641      	mov	r1, r8
 8000ff2:	1aa4      	subs	r4, r4, r2
 8000ff4:	043a      	lsls	r2, r7, #16
 8000ff6:	431a      	orrs	r2, r3
 8000ff8:	9d04      	ldr	r5, [sp, #16]
 8000ffa:	0413      	lsls	r3, r2, #16
 8000ffc:	0c1b      	lsrs	r3, r3, #16
 8000ffe:	4359      	muls	r1, r3
 8001000:	4647      	mov	r7, r8
 8001002:	436b      	muls	r3, r5
 8001004:	469c      	mov	ip, r3
 8001006:	0c10      	lsrs	r0, r2, #16
 8001008:	4347      	muls	r7, r0
 800100a:	0c0b      	lsrs	r3, r1, #16
 800100c:	44bc      	add	ip, r7
 800100e:	4463      	add	r3, ip
 8001010:	4368      	muls	r0, r5
 8001012:	429f      	cmp	r7, r3
 8001014:	d903      	bls.n	800101e <__aeabi_ddiv+0x25e>
 8001016:	2580      	movs	r5, #128	@ 0x80
 8001018:	026d      	lsls	r5, r5, #9
 800101a:	46ac      	mov	ip, r5
 800101c:	4460      	add	r0, ip
 800101e:	0c1f      	lsrs	r7, r3, #16
 8001020:	0409      	lsls	r1, r1, #16
 8001022:	041b      	lsls	r3, r3, #16
 8001024:	0c09      	lsrs	r1, r1, #16
 8001026:	183f      	adds	r7, r7, r0
 8001028:	185b      	adds	r3, r3, r1
 800102a:	42bc      	cmp	r4, r7
 800102c:	d200      	bcs.n	8001030 <__aeabi_ddiv+0x270>
 800102e:	e102      	b.n	8001236 <__aeabi_ddiv+0x476>
 8001030:	d100      	bne.n	8001034 <__aeabi_ddiv+0x274>
 8001032:	e0fd      	b.n	8001230 <__aeabi_ddiv+0x470>
 8001034:	2301      	movs	r3, #1
 8001036:	431a      	orrs	r2, r3
 8001038:	4b43      	ldr	r3, [pc, #268]	@ (8001148 <__aeabi_ddiv+0x388>)
 800103a:	4453      	add	r3, sl
 800103c:	2b00      	cmp	r3, #0
 800103e:	dc00      	bgt.n	8001042 <__aeabi_ddiv+0x282>
 8001040:	e0ae      	b.n	80011a0 <__aeabi_ddiv+0x3e0>
 8001042:	0751      	lsls	r1, r2, #29
 8001044:	d000      	beq.n	8001048 <__aeabi_ddiv+0x288>
 8001046:	e198      	b.n	800137a <__aeabi_ddiv+0x5ba>
 8001048:	4659      	mov	r1, fp
 800104a:	01c9      	lsls	r1, r1, #7
 800104c:	d506      	bpl.n	800105c <__aeabi_ddiv+0x29c>
 800104e:	4659      	mov	r1, fp
 8001050:	4b3e      	ldr	r3, [pc, #248]	@ (800114c <__aeabi_ddiv+0x38c>)
 8001052:	4019      	ands	r1, r3
 8001054:	2380      	movs	r3, #128	@ 0x80
 8001056:	468b      	mov	fp, r1
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	4453      	add	r3, sl
 800105c:	493c      	ldr	r1, [pc, #240]	@ (8001150 <__aeabi_ddiv+0x390>)
 800105e:	428b      	cmp	r3, r1
 8001060:	dd00      	ble.n	8001064 <__aeabi_ddiv+0x2a4>
 8001062:	e71a      	b.n	8000e9a <__aeabi_ddiv+0xda>
 8001064:	4659      	mov	r1, fp
 8001066:	08d2      	lsrs	r2, r2, #3
 8001068:	0749      	lsls	r1, r1, #29
 800106a:	4311      	orrs	r1, r2
 800106c:	465a      	mov	r2, fp
 800106e:	055b      	lsls	r3, r3, #21
 8001070:	0254      	lsls	r4, r2, #9
 8001072:	4688      	mov	r8, r1
 8001074:	0b24      	lsrs	r4, r4, #12
 8001076:	0d5b      	lsrs	r3, r3, #21
 8001078:	e702      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 800107a:	465a      	mov	r2, fp
 800107c:	9b00      	ldr	r3, [sp, #0]
 800107e:	431a      	orrs	r2, r3
 8001080:	d100      	bne.n	8001084 <__aeabi_ddiv+0x2c4>
 8001082:	e07e      	b.n	8001182 <__aeabi_ddiv+0x3c2>
 8001084:	465b      	mov	r3, fp
 8001086:	2b00      	cmp	r3, #0
 8001088:	d100      	bne.n	800108c <__aeabi_ddiv+0x2cc>
 800108a:	e100      	b.n	800128e <__aeabi_ddiv+0x4ce>
 800108c:	4658      	mov	r0, fp
 800108e:	f7ff fa0b 	bl	80004a8 <__clzsi2>
 8001092:	0002      	movs	r2, r0
 8001094:	0003      	movs	r3, r0
 8001096:	3a0b      	subs	r2, #11
 8001098:	271d      	movs	r7, #29
 800109a:	9e00      	ldr	r6, [sp, #0]
 800109c:	1aba      	subs	r2, r7, r2
 800109e:	0019      	movs	r1, r3
 80010a0:	4658      	mov	r0, fp
 80010a2:	40d6      	lsrs	r6, r2
 80010a4:	3908      	subs	r1, #8
 80010a6:	4088      	lsls	r0, r1
 80010a8:	0032      	movs	r2, r6
 80010aa:	4302      	orrs	r2, r0
 80010ac:	4693      	mov	fp, r2
 80010ae:	9a00      	ldr	r2, [sp, #0]
 80010b0:	408a      	lsls	r2, r1
 80010b2:	4928      	ldr	r1, [pc, #160]	@ (8001154 <__aeabi_ddiv+0x394>)
 80010b4:	4453      	add	r3, sl
 80010b6:	468a      	mov	sl, r1
 80010b8:	449a      	add	sl, r3
 80010ba:	2300      	movs	r3, #0
 80010bc:	e6c8      	b.n	8000e50 <__aeabi_ddiv+0x90>
 80010be:	465b      	mov	r3, fp
 80010c0:	4303      	orrs	r3, r0
 80010c2:	4699      	mov	r9, r3
 80010c4:	d056      	beq.n	8001174 <__aeabi_ddiv+0x3b4>
 80010c6:	465b      	mov	r3, fp
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d100      	bne.n	80010ce <__aeabi_ddiv+0x30e>
 80010cc:	e0cd      	b.n	800126a <__aeabi_ddiv+0x4aa>
 80010ce:	4658      	mov	r0, fp
 80010d0:	f7ff f9ea 	bl	80004a8 <__clzsi2>
 80010d4:	230b      	movs	r3, #11
 80010d6:	425b      	negs	r3, r3
 80010d8:	469c      	mov	ip, r3
 80010da:	0002      	movs	r2, r0
 80010dc:	4484      	add	ip, r0
 80010de:	4666      	mov	r6, ip
 80010e0:	231d      	movs	r3, #29
 80010e2:	1b9b      	subs	r3, r3, r6
 80010e4:	0026      	movs	r6, r4
 80010e6:	0011      	movs	r1, r2
 80010e8:	4658      	mov	r0, fp
 80010ea:	40de      	lsrs	r6, r3
 80010ec:	3908      	subs	r1, #8
 80010ee:	4088      	lsls	r0, r1
 80010f0:	0033      	movs	r3, r6
 80010f2:	4303      	orrs	r3, r0
 80010f4:	4699      	mov	r9, r3
 80010f6:	0023      	movs	r3, r4
 80010f8:	408b      	lsls	r3, r1
 80010fa:	4698      	mov	r8, r3
 80010fc:	4b16      	ldr	r3, [pc, #88]	@ (8001158 <__aeabi_ddiv+0x398>)
 80010fe:	2400      	movs	r4, #0
 8001100:	1a9b      	subs	r3, r3, r2
 8001102:	469a      	mov	sl, r3
 8001104:	2300      	movs	r3, #0
 8001106:	9303      	str	r3, [sp, #12]
 8001108:	e682      	b.n	8000e10 <__aeabi_ddiv+0x50>
 800110a:	465a      	mov	r2, fp
 800110c:	4302      	orrs	r2, r0
 800110e:	4691      	mov	r9, r2
 8001110:	d12a      	bne.n	8001168 <__aeabi_ddiv+0x3a8>
 8001112:	2200      	movs	r2, #0
 8001114:	469a      	mov	sl, r3
 8001116:	2302      	movs	r3, #2
 8001118:	4690      	mov	r8, r2
 800111a:	2408      	movs	r4, #8
 800111c:	9303      	str	r3, [sp, #12]
 800111e:	e677      	b.n	8000e10 <__aeabi_ddiv+0x50>
 8001120:	465a      	mov	r2, fp
 8001122:	9b00      	ldr	r3, [sp, #0]
 8001124:	431a      	orrs	r2, r3
 8001126:	4b0d      	ldr	r3, [pc, #52]	@ (800115c <__aeabi_ddiv+0x39c>)
 8001128:	469c      	mov	ip, r3
 800112a:	44e2      	add	sl, ip
 800112c:	2a00      	cmp	r2, #0
 800112e:	d117      	bne.n	8001160 <__aeabi_ddiv+0x3a0>
 8001130:	2302      	movs	r3, #2
 8001132:	431c      	orrs	r4, r3
 8001134:	2300      	movs	r3, #0
 8001136:	469b      	mov	fp, r3
 8001138:	3302      	adds	r3, #2
 800113a:	e689      	b.n	8000e50 <__aeabi_ddiv+0x90>
 800113c:	000007ff 	.word	0x000007ff
 8001140:	fffffc01 	.word	0xfffffc01
 8001144:	0800e9a0 	.word	0x0800e9a0
 8001148:	000003ff 	.word	0x000003ff
 800114c:	feffffff 	.word	0xfeffffff
 8001150:	000007fe 	.word	0x000007fe
 8001154:	000003f3 	.word	0x000003f3
 8001158:	fffffc0d 	.word	0xfffffc0d
 800115c:	fffff801 	.word	0xfffff801
 8001160:	2303      	movs	r3, #3
 8001162:	0032      	movs	r2, r6
 8001164:	431c      	orrs	r4, r3
 8001166:	e673      	b.n	8000e50 <__aeabi_ddiv+0x90>
 8001168:	469a      	mov	sl, r3
 800116a:	2303      	movs	r3, #3
 800116c:	46d9      	mov	r9, fp
 800116e:	240c      	movs	r4, #12
 8001170:	9303      	str	r3, [sp, #12]
 8001172:	e64d      	b.n	8000e10 <__aeabi_ddiv+0x50>
 8001174:	2300      	movs	r3, #0
 8001176:	4698      	mov	r8, r3
 8001178:	469a      	mov	sl, r3
 800117a:	3301      	adds	r3, #1
 800117c:	2404      	movs	r4, #4
 800117e:	9303      	str	r3, [sp, #12]
 8001180:	e646      	b.n	8000e10 <__aeabi_ddiv+0x50>
 8001182:	2301      	movs	r3, #1
 8001184:	431c      	orrs	r4, r3
 8001186:	2300      	movs	r3, #0
 8001188:	469b      	mov	fp, r3
 800118a:	3301      	adds	r3, #1
 800118c:	e660      	b.n	8000e50 <__aeabi_ddiv+0x90>
 800118e:	2300      	movs	r3, #0
 8001190:	2480      	movs	r4, #128	@ 0x80
 8001192:	4698      	mov	r8, r3
 8001194:	2600      	movs	r6, #0
 8001196:	4b92      	ldr	r3, [pc, #584]	@ (80013e0 <__aeabi_ddiv+0x620>)
 8001198:	0324      	lsls	r4, r4, #12
 800119a:	e671      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 800119c:	2201      	movs	r2, #1
 800119e:	4252      	negs	r2, r2
 80011a0:	2101      	movs	r1, #1
 80011a2:	1ac9      	subs	r1, r1, r3
 80011a4:	2938      	cmp	r1, #56	@ 0x38
 80011a6:	dd00      	ble.n	80011aa <__aeabi_ddiv+0x3ea>
 80011a8:	e666      	b.n	8000e78 <__aeabi_ddiv+0xb8>
 80011aa:	291f      	cmp	r1, #31
 80011ac:	dc00      	bgt.n	80011b0 <__aeabi_ddiv+0x3f0>
 80011ae:	e0ab      	b.n	8001308 <__aeabi_ddiv+0x548>
 80011b0:	201f      	movs	r0, #31
 80011b2:	4240      	negs	r0, r0
 80011b4:	1ac3      	subs	r3, r0, r3
 80011b6:	4658      	mov	r0, fp
 80011b8:	40d8      	lsrs	r0, r3
 80011ba:	0003      	movs	r3, r0
 80011bc:	2920      	cmp	r1, #32
 80011be:	d004      	beq.n	80011ca <__aeabi_ddiv+0x40a>
 80011c0:	4658      	mov	r0, fp
 80011c2:	4988      	ldr	r1, [pc, #544]	@ (80013e4 <__aeabi_ddiv+0x624>)
 80011c4:	4451      	add	r1, sl
 80011c6:	4088      	lsls	r0, r1
 80011c8:	4302      	orrs	r2, r0
 80011ca:	1e51      	subs	r1, r2, #1
 80011cc:	418a      	sbcs	r2, r1
 80011ce:	431a      	orrs	r2, r3
 80011d0:	2307      	movs	r3, #7
 80011d2:	0019      	movs	r1, r3
 80011d4:	2400      	movs	r4, #0
 80011d6:	4011      	ands	r1, r2
 80011d8:	4213      	tst	r3, r2
 80011da:	d00c      	beq.n	80011f6 <__aeabi_ddiv+0x436>
 80011dc:	230f      	movs	r3, #15
 80011de:	4013      	ands	r3, r2
 80011e0:	2b04      	cmp	r3, #4
 80011e2:	d100      	bne.n	80011e6 <__aeabi_ddiv+0x426>
 80011e4:	e0f9      	b.n	80013da <__aeabi_ddiv+0x61a>
 80011e6:	1d11      	adds	r1, r2, #4
 80011e8:	4291      	cmp	r1, r2
 80011ea:	419b      	sbcs	r3, r3
 80011ec:	000a      	movs	r2, r1
 80011ee:	425b      	negs	r3, r3
 80011f0:	0759      	lsls	r1, r3, #29
 80011f2:	025b      	lsls	r3, r3, #9
 80011f4:	0b1c      	lsrs	r4, r3, #12
 80011f6:	08d2      	lsrs	r2, r2, #3
 80011f8:	430a      	orrs	r2, r1
 80011fa:	4690      	mov	r8, r2
 80011fc:	2300      	movs	r3, #0
 80011fe:	e63f      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 8001200:	2480      	movs	r4, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	0324      	lsls	r4, r4, #12
 8001206:	4223      	tst	r3, r4
 8001208:	d009      	beq.n	800121e <__aeabi_ddiv+0x45e>
 800120a:	465b      	mov	r3, fp
 800120c:	4223      	tst	r3, r4
 800120e:	d106      	bne.n	800121e <__aeabi_ddiv+0x45e>
 8001210:	431c      	orrs	r4, r3
 8001212:	0324      	lsls	r4, r4, #12
 8001214:	002e      	movs	r6, r5
 8001216:	4690      	mov	r8, r2
 8001218:	4b71      	ldr	r3, [pc, #452]	@ (80013e0 <__aeabi_ddiv+0x620>)
 800121a:	0b24      	lsrs	r4, r4, #12
 800121c:	e630      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 800121e:	2480      	movs	r4, #128	@ 0x80
 8001220:	464b      	mov	r3, r9
 8001222:	0324      	lsls	r4, r4, #12
 8001224:	431c      	orrs	r4, r3
 8001226:	0324      	lsls	r4, r4, #12
 8001228:	9e02      	ldr	r6, [sp, #8]
 800122a:	4b6d      	ldr	r3, [pc, #436]	@ (80013e0 <__aeabi_ddiv+0x620>)
 800122c:	0b24      	lsrs	r4, r4, #12
 800122e:	e627      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 8001230:	2b00      	cmp	r3, #0
 8001232:	d100      	bne.n	8001236 <__aeabi_ddiv+0x476>
 8001234:	e700      	b.n	8001038 <__aeabi_ddiv+0x278>
 8001236:	9800      	ldr	r0, [sp, #0]
 8001238:	1e51      	subs	r1, r2, #1
 800123a:	4684      	mov	ip, r0
 800123c:	4464      	add	r4, ip
 800123e:	4284      	cmp	r4, r0
 8001240:	d200      	bcs.n	8001244 <__aeabi_ddiv+0x484>
 8001242:	e084      	b.n	800134e <__aeabi_ddiv+0x58e>
 8001244:	42bc      	cmp	r4, r7
 8001246:	d200      	bcs.n	800124a <__aeabi_ddiv+0x48a>
 8001248:	e0ae      	b.n	80013a8 <__aeabi_ddiv+0x5e8>
 800124a:	d100      	bne.n	800124e <__aeabi_ddiv+0x48e>
 800124c:	e0c1      	b.n	80013d2 <__aeabi_ddiv+0x612>
 800124e:	000a      	movs	r2, r1
 8001250:	e6f0      	b.n	8001034 <__aeabi_ddiv+0x274>
 8001252:	4542      	cmp	r2, r8
 8001254:	d900      	bls.n	8001258 <__aeabi_ddiv+0x498>
 8001256:	e62c      	b.n	8000eb2 <__aeabi_ddiv+0xf2>
 8001258:	464b      	mov	r3, r9
 800125a:	07dc      	lsls	r4, r3, #31
 800125c:	0858      	lsrs	r0, r3, #1
 800125e:	4643      	mov	r3, r8
 8001260:	085b      	lsrs	r3, r3, #1
 8001262:	431c      	orrs	r4, r3
 8001264:	4643      	mov	r3, r8
 8001266:	07df      	lsls	r7, r3, #31
 8001268:	e62a      	b.n	8000ec0 <__aeabi_ddiv+0x100>
 800126a:	f7ff f91d 	bl	80004a8 <__clzsi2>
 800126e:	2315      	movs	r3, #21
 8001270:	469c      	mov	ip, r3
 8001272:	4484      	add	ip, r0
 8001274:	0002      	movs	r2, r0
 8001276:	4663      	mov	r3, ip
 8001278:	3220      	adds	r2, #32
 800127a:	2b1c      	cmp	r3, #28
 800127c:	dc00      	bgt.n	8001280 <__aeabi_ddiv+0x4c0>
 800127e:	e72e      	b.n	80010de <__aeabi_ddiv+0x31e>
 8001280:	0023      	movs	r3, r4
 8001282:	3808      	subs	r0, #8
 8001284:	4083      	lsls	r3, r0
 8001286:	4699      	mov	r9, r3
 8001288:	2300      	movs	r3, #0
 800128a:	4698      	mov	r8, r3
 800128c:	e736      	b.n	80010fc <__aeabi_ddiv+0x33c>
 800128e:	f7ff f90b 	bl	80004a8 <__clzsi2>
 8001292:	0002      	movs	r2, r0
 8001294:	0003      	movs	r3, r0
 8001296:	3215      	adds	r2, #21
 8001298:	3320      	adds	r3, #32
 800129a:	2a1c      	cmp	r2, #28
 800129c:	dc00      	bgt.n	80012a0 <__aeabi_ddiv+0x4e0>
 800129e:	e6fb      	b.n	8001098 <__aeabi_ddiv+0x2d8>
 80012a0:	9900      	ldr	r1, [sp, #0]
 80012a2:	3808      	subs	r0, #8
 80012a4:	4081      	lsls	r1, r0
 80012a6:	2200      	movs	r2, #0
 80012a8:	468b      	mov	fp, r1
 80012aa:	e702      	b.n	80010b2 <__aeabi_ddiv+0x2f2>
 80012ac:	9900      	ldr	r1, [sp, #0]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	468c      	mov	ip, r1
 80012b2:	4464      	add	r4, ip
 80012b4:	42a1      	cmp	r1, r4
 80012b6:	d900      	bls.n	80012ba <__aeabi_ddiv+0x4fa>
 80012b8:	e69a      	b.n	8000ff0 <__aeabi_ddiv+0x230>
 80012ba:	42a2      	cmp	r2, r4
 80012bc:	d800      	bhi.n	80012c0 <__aeabi_ddiv+0x500>
 80012be:	e697      	b.n	8000ff0 <__aeabi_ddiv+0x230>
 80012c0:	1e83      	subs	r3, r0, #2
 80012c2:	4464      	add	r4, ip
 80012c4:	e694      	b.n	8000ff0 <__aeabi_ddiv+0x230>
 80012c6:	46ac      	mov	ip, r5
 80012c8:	4461      	add	r1, ip
 80012ca:	3f01      	subs	r7, #1
 80012cc:	428d      	cmp	r5, r1
 80012ce:	d900      	bls.n	80012d2 <__aeabi_ddiv+0x512>
 80012d0:	e680      	b.n	8000fd4 <__aeabi_ddiv+0x214>
 80012d2:	428a      	cmp	r2, r1
 80012d4:	d800      	bhi.n	80012d8 <__aeabi_ddiv+0x518>
 80012d6:	e67d      	b.n	8000fd4 <__aeabi_ddiv+0x214>
 80012d8:	1e87      	subs	r7, r0, #2
 80012da:	4461      	add	r1, ip
 80012dc:	e67a      	b.n	8000fd4 <__aeabi_ddiv+0x214>
 80012de:	4285      	cmp	r5, r0
 80012e0:	d000      	beq.n	80012e4 <__aeabi_ddiv+0x524>
 80012e2:	e65f      	b.n	8000fa4 <__aeabi_ddiv+0x1e4>
 80012e4:	45b9      	cmp	r9, r7
 80012e6:	d900      	bls.n	80012ea <__aeabi_ddiv+0x52a>
 80012e8:	e65c      	b.n	8000fa4 <__aeabi_ddiv+0x1e4>
 80012ea:	e656      	b.n	8000f9a <__aeabi_ddiv+0x1da>
 80012ec:	42a2      	cmp	r2, r4
 80012ee:	d800      	bhi.n	80012f2 <__aeabi_ddiv+0x532>
 80012f0:	e61a      	b.n	8000f28 <__aeabi_ddiv+0x168>
 80012f2:	1e83      	subs	r3, r0, #2
 80012f4:	4464      	add	r4, ip
 80012f6:	e617      	b.n	8000f28 <__aeabi_ddiv+0x168>
 80012f8:	428a      	cmp	r2, r1
 80012fa:	d800      	bhi.n	80012fe <__aeabi_ddiv+0x53e>
 80012fc:	e600      	b.n	8000f00 <__aeabi_ddiv+0x140>
 80012fe:	46ac      	mov	ip, r5
 8001300:	1e83      	subs	r3, r0, #2
 8001302:	4698      	mov	r8, r3
 8001304:	4461      	add	r1, ip
 8001306:	e5fb      	b.n	8000f00 <__aeabi_ddiv+0x140>
 8001308:	4837      	ldr	r0, [pc, #220]	@ (80013e8 <__aeabi_ddiv+0x628>)
 800130a:	0014      	movs	r4, r2
 800130c:	4450      	add	r0, sl
 800130e:	4082      	lsls	r2, r0
 8001310:	465b      	mov	r3, fp
 8001312:	0017      	movs	r7, r2
 8001314:	4083      	lsls	r3, r0
 8001316:	40cc      	lsrs	r4, r1
 8001318:	1e7a      	subs	r2, r7, #1
 800131a:	4197      	sbcs	r7, r2
 800131c:	4323      	orrs	r3, r4
 800131e:	433b      	orrs	r3, r7
 8001320:	001a      	movs	r2, r3
 8001322:	465b      	mov	r3, fp
 8001324:	40cb      	lsrs	r3, r1
 8001326:	0751      	lsls	r1, r2, #29
 8001328:	d009      	beq.n	800133e <__aeabi_ddiv+0x57e>
 800132a:	210f      	movs	r1, #15
 800132c:	4011      	ands	r1, r2
 800132e:	2904      	cmp	r1, #4
 8001330:	d005      	beq.n	800133e <__aeabi_ddiv+0x57e>
 8001332:	1d11      	adds	r1, r2, #4
 8001334:	4291      	cmp	r1, r2
 8001336:	4192      	sbcs	r2, r2
 8001338:	4252      	negs	r2, r2
 800133a:	189b      	adds	r3, r3, r2
 800133c:	000a      	movs	r2, r1
 800133e:	0219      	lsls	r1, r3, #8
 8001340:	d400      	bmi.n	8001344 <__aeabi_ddiv+0x584>
 8001342:	e755      	b.n	80011f0 <__aeabi_ddiv+0x430>
 8001344:	2200      	movs	r2, #0
 8001346:	2301      	movs	r3, #1
 8001348:	2400      	movs	r4, #0
 800134a:	4690      	mov	r8, r2
 800134c:	e598      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 800134e:	000a      	movs	r2, r1
 8001350:	42bc      	cmp	r4, r7
 8001352:	d000      	beq.n	8001356 <__aeabi_ddiv+0x596>
 8001354:	e66e      	b.n	8001034 <__aeabi_ddiv+0x274>
 8001356:	454b      	cmp	r3, r9
 8001358:	d000      	beq.n	800135c <__aeabi_ddiv+0x59c>
 800135a:	e66b      	b.n	8001034 <__aeabi_ddiv+0x274>
 800135c:	e66c      	b.n	8001038 <__aeabi_ddiv+0x278>
 800135e:	4b23      	ldr	r3, [pc, #140]	@ (80013ec <__aeabi_ddiv+0x62c>)
 8001360:	4a23      	ldr	r2, [pc, #140]	@ (80013f0 <__aeabi_ddiv+0x630>)
 8001362:	4453      	add	r3, sl
 8001364:	4592      	cmp	sl, r2
 8001366:	da00      	bge.n	800136a <__aeabi_ddiv+0x5aa>
 8001368:	e718      	b.n	800119c <__aeabi_ddiv+0x3dc>
 800136a:	2101      	movs	r1, #1
 800136c:	4249      	negs	r1, r1
 800136e:	1d0a      	adds	r2, r1, #4
 8001370:	428a      	cmp	r2, r1
 8001372:	4189      	sbcs	r1, r1
 8001374:	4249      	negs	r1, r1
 8001376:	448b      	add	fp, r1
 8001378:	e666      	b.n	8001048 <__aeabi_ddiv+0x288>
 800137a:	210f      	movs	r1, #15
 800137c:	4011      	ands	r1, r2
 800137e:	2904      	cmp	r1, #4
 8001380:	d100      	bne.n	8001384 <__aeabi_ddiv+0x5c4>
 8001382:	e661      	b.n	8001048 <__aeabi_ddiv+0x288>
 8001384:	0011      	movs	r1, r2
 8001386:	e7f2      	b.n	800136e <__aeabi_ddiv+0x5ae>
 8001388:	42bc      	cmp	r4, r7
 800138a:	d800      	bhi.n	800138e <__aeabi_ddiv+0x5ce>
 800138c:	e60a      	b.n	8000fa4 <__aeabi_ddiv+0x1e4>
 800138e:	2302      	movs	r3, #2
 8001390:	425b      	negs	r3, r3
 8001392:	469c      	mov	ip, r3
 8001394:	9900      	ldr	r1, [sp, #0]
 8001396:	444f      	add	r7, r9
 8001398:	454f      	cmp	r7, r9
 800139a:	419b      	sbcs	r3, r3
 800139c:	44e3      	add	fp, ip
 800139e:	468c      	mov	ip, r1
 80013a0:	425b      	negs	r3, r3
 80013a2:	4463      	add	r3, ip
 80013a4:	18c0      	adds	r0, r0, r3
 80013a6:	e5ff      	b.n	8000fa8 <__aeabi_ddiv+0x1e8>
 80013a8:	4649      	mov	r1, r9
 80013aa:	9d00      	ldr	r5, [sp, #0]
 80013ac:	0048      	lsls	r0, r1, #1
 80013ae:	4548      	cmp	r0, r9
 80013b0:	4189      	sbcs	r1, r1
 80013b2:	46ac      	mov	ip, r5
 80013b4:	4249      	negs	r1, r1
 80013b6:	4461      	add	r1, ip
 80013b8:	4681      	mov	r9, r0
 80013ba:	3a02      	subs	r2, #2
 80013bc:	1864      	adds	r4, r4, r1
 80013be:	e7c7      	b.n	8001350 <__aeabi_ddiv+0x590>
 80013c0:	2480      	movs	r4, #128	@ 0x80
 80013c2:	465b      	mov	r3, fp
 80013c4:	0324      	lsls	r4, r4, #12
 80013c6:	431c      	orrs	r4, r3
 80013c8:	0324      	lsls	r4, r4, #12
 80013ca:	4690      	mov	r8, r2
 80013cc:	4b04      	ldr	r3, [pc, #16]	@ (80013e0 <__aeabi_ddiv+0x620>)
 80013ce:	0b24      	lsrs	r4, r4, #12
 80013d0:	e556      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 80013d2:	4599      	cmp	r9, r3
 80013d4:	d3e8      	bcc.n	80013a8 <__aeabi_ddiv+0x5e8>
 80013d6:	000a      	movs	r2, r1
 80013d8:	e7bd      	b.n	8001356 <__aeabi_ddiv+0x596>
 80013da:	2300      	movs	r3, #0
 80013dc:	e708      	b.n	80011f0 <__aeabi_ddiv+0x430>
 80013de:	46c0      	nop			@ (mov r8, r8)
 80013e0:	000007ff 	.word	0x000007ff
 80013e4:	0000043e 	.word	0x0000043e
 80013e8:	0000041e 	.word	0x0000041e
 80013ec:	000003ff 	.word	0x000003ff
 80013f0:	fffffc02 	.word	0xfffffc02

080013f4 <__eqdf2>:
 80013f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f6:	4657      	mov	r7, sl
 80013f8:	46de      	mov	lr, fp
 80013fa:	464e      	mov	r6, r9
 80013fc:	4645      	mov	r5, r8
 80013fe:	b5e0      	push	{r5, r6, r7, lr}
 8001400:	000d      	movs	r5, r1
 8001402:	0004      	movs	r4, r0
 8001404:	0fe8      	lsrs	r0, r5, #31
 8001406:	4683      	mov	fp, r0
 8001408:	0309      	lsls	r1, r1, #12
 800140a:	0fd8      	lsrs	r0, r3, #31
 800140c:	0b09      	lsrs	r1, r1, #12
 800140e:	4682      	mov	sl, r0
 8001410:	4819      	ldr	r0, [pc, #100]	@ (8001478 <__eqdf2+0x84>)
 8001412:	468c      	mov	ip, r1
 8001414:	031f      	lsls	r7, r3, #12
 8001416:	0069      	lsls	r1, r5, #1
 8001418:	005e      	lsls	r6, r3, #1
 800141a:	0d49      	lsrs	r1, r1, #21
 800141c:	0b3f      	lsrs	r7, r7, #12
 800141e:	0d76      	lsrs	r6, r6, #21
 8001420:	4281      	cmp	r1, r0
 8001422:	d018      	beq.n	8001456 <__eqdf2+0x62>
 8001424:	4286      	cmp	r6, r0
 8001426:	d00f      	beq.n	8001448 <__eqdf2+0x54>
 8001428:	2001      	movs	r0, #1
 800142a:	42b1      	cmp	r1, r6
 800142c:	d10d      	bne.n	800144a <__eqdf2+0x56>
 800142e:	45bc      	cmp	ip, r7
 8001430:	d10b      	bne.n	800144a <__eqdf2+0x56>
 8001432:	4294      	cmp	r4, r2
 8001434:	d109      	bne.n	800144a <__eqdf2+0x56>
 8001436:	45d3      	cmp	fp, sl
 8001438:	d01c      	beq.n	8001474 <__eqdf2+0x80>
 800143a:	2900      	cmp	r1, #0
 800143c:	d105      	bne.n	800144a <__eqdf2+0x56>
 800143e:	4660      	mov	r0, ip
 8001440:	4320      	orrs	r0, r4
 8001442:	1e43      	subs	r3, r0, #1
 8001444:	4198      	sbcs	r0, r3
 8001446:	e000      	b.n	800144a <__eqdf2+0x56>
 8001448:	2001      	movs	r0, #1
 800144a:	bcf0      	pop	{r4, r5, r6, r7}
 800144c:	46bb      	mov	fp, r7
 800144e:	46b2      	mov	sl, r6
 8001450:	46a9      	mov	r9, r5
 8001452:	46a0      	mov	r8, r4
 8001454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001456:	2001      	movs	r0, #1
 8001458:	428e      	cmp	r6, r1
 800145a:	d1f6      	bne.n	800144a <__eqdf2+0x56>
 800145c:	4661      	mov	r1, ip
 800145e:	4339      	orrs	r1, r7
 8001460:	000f      	movs	r7, r1
 8001462:	4317      	orrs	r7, r2
 8001464:	4327      	orrs	r7, r4
 8001466:	d1f0      	bne.n	800144a <__eqdf2+0x56>
 8001468:	465b      	mov	r3, fp
 800146a:	4652      	mov	r2, sl
 800146c:	1a98      	subs	r0, r3, r2
 800146e:	1e43      	subs	r3, r0, #1
 8001470:	4198      	sbcs	r0, r3
 8001472:	e7ea      	b.n	800144a <__eqdf2+0x56>
 8001474:	2000      	movs	r0, #0
 8001476:	e7e8      	b.n	800144a <__eqdf2+0x56>
 8001478:	000007ff 	.word	0x000007ff

0800147c <__gedf2>:
 800147c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147e:	4657      	mov	r7, sl
 8001480:	464e      	mov	r6, r9
 8001482:	4645      	mov	r5, r8
 8001484:	46de      	mov	lr, fp
 8001486:	b5e0      	push	{r5, r6, r7, lr}
 8001488:	000d      	movs	r5, r1
 800148a:	030f      	lsls	r7, r1, #12
 800148c:	0b39      	lsrs	r1, r7, #12
 800148e:	b083      	sub	sp, #12
 8001490:	0004      	movs	r4, r0
 8001492:	4680      	mov	r8, r0
 8001494:	9101      	str	r1, [sp, #4]
 8001496:	0058      	lsls	r0, r3, #1
 8001498:	0fe9      	lsrs	r1, r5, #31
 800149a:	4f31      	ldr	r7, [pc, #196]	@ (8001560 <__gedf2+0xe4>)
 800149c:	0d40      	lsrs	r0, r0, #21
 800149e:	468c      	mov	ip, r1
 80014a0:	006e      	lsls	r6, r5, #1
 80014a2:	0319      	lsls	r1, r3, #12
 80014a4:	4682      	mov	sl, r0
 80014a6:	4691      	mov	r9, r2
 80014a8:	0d76      	lsrs	r6, r6, #21
 80014aa:	0b09      	lsrs	r1, r1, #12
 80014ac:	0fd8      	lsrs	r0, r3, #31
 80014ae:	42be      	cmp	r6, r7
 80014b0:	d01f      	beq.n	80014f2 <__gedf2+0x76>
 80014b2:	45ba      	cmp	sl, r7
 80014b4:	d00f      	beq.n	80014d6 <__gedf2+0x5a>
 80014b6:	2e00      	cmp	r6, #0
 80014b8:	d12f      	bne.n	800151a <__gedf2+0x9e>
 80014ba:	4655      	mov	r5, sl
 80014bc:	9e01      	ldr	r6, [sp, #4]
 80014be:	4334      	orrs	r4, r6
 80014c0:	2d00      	cmp	r5, #0
 80014c2:	d127      	bne.n	8001514 <__gedf2+0x98>
 80014c4:	430a      	orrs	r2, r1
 80014c6:	d03a      	beq.n	800153e <__gedf2+0xc2>
 80014c8:	2c00      	cmp	r4, #0
 80014ca:	d145      	bne.n	8001558 <__gedf2+0xdc>
 80014cc:	2800      	cmp	r0, #0
 80014ce:	d11a      	bne.n	8001506 <__gedf2+0x8a>
 80014d0:	2001      	movs	r0, #1
 80014d2:	4240      	negs	r0, r0
 80014d4:	e017      	b.n	8001506 <__gedf2+0x8a>
 80014d6:	4311      	orrs	r1, r2
 80014d8:	d13b      	bne.n	8001552 <__gedf2+0xd6>
 80014da:	2e00      	cmp	r6, #0
 80014dc:	d102      	bne.n	80014e4 <__gedf2+0x68>
 80014de:	9f01      	ldr	r7, [sp, #4]
 80014e0:	4327      	orrs	r7, r4
 80014e2:	d0f3      	beq.n	80014cc <__gedf2+0x50>
 80014e4:	4584      	cmp	ip, r0
 80014e6:	d109      	bne.n	80014fc <__gedf2+0x80>
 80014e8:	4663      	mov	r3, ip
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f0      	beq.n	80014d0 <__gedf2+0x54>
 80014ee:	4660      	mov	r0, ip
 80014f0:	e009      	b.n	8001506 <__gedf2+0x8a>
 80014f2:	9f01      	ldr	r7, [sp, #4]
 80014f4:	4327      	orrs	r7, r4
 80014f6:	d12c      	bne.n	8001552 <__gedf2+0xd6>
 80014f8:	45b2      	cmp	sl, r6
 80014fa:	d024      	beq.n	8001546 <__gedf2+0xca>
 80014fc:	4663      	mov	r3, ip
 80014fe:	2002      	movs	r0, #2
 8001500:	3b01      	subs	r3, #1
 8001502:	4018      	ands	r0, r3
 8001504:	3801      	subs	r0, #1
 8001506:	b003      	add	sp, #12
 8001508:	bcf0      	pop	{r4, r5, r6, r7}
 800150a:	46bb      	mov	fp, r7
 800150c:	46b2      	mov	sl, r6
 800150e:	46a9      	mov	r9, r5
 8001510:	46a0      	mov	r8, r4
 8001512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001514:	2c00      	cmp	r4, #0
 8001516:	d0d9      	beq.n	80014cc <__gedf2+0x50>
 8001518:	e7e4      	b.n	80014e4 <__gedf2+0x68>
 800151a:	4654      	mov	r4, sl
 800151c:	2c00      	cmp	r4, #0
 800151e:	d0ed      	beq.n	80014fc <__gedf2+0x80>
 8001520:	4584      	cmp	ip, r0
 8001522:	d1eb      	bne.n	80014fc <__gedf2+0x80>
 8001524:	4556      	cmp	r6, sl
 8001526:	dce9      	bgt.n	80014fc <__gedf2+0x80>
 8001528:	dbde      	blt.n	80014e8 <__gedf2+0x6c>
 800152a:	9b01      	ldr	r3, [sp, #4]
 800152c:	428b      	cmp	r3, r1
 800152e:	d8e5      	bhi.n	80014fc <__gedf2+0x80>
 8001530:	d1da      	bne.n	80014e8 <__gedf2+0x6c>
 8001532:	45c8      	cmp	r8, r9
 8001534:	d8e2      	bhi.n	80014fc <__gedf2+0x80>
 8001536:	2000      	movs	r0, #0
 8001538:	45c8      	cmp	r8, r9
 800153a:	d2e4      	bcs.n	8001506 <__gedf2+0x8a>
 800153c:	e7d4      	b.n	80014e8 <__gedf2+0x6c>
 800153e:	2000      	movs	r0, #0
 8001540:	2c00      	cmp	r4, #0
 8001542:	d0e0      	beq.n	8001506 <__gedf2+0x8a>
 8001544:	e7da      	b.n	80014fc <__gedf2+0x80>
 8001546:	4311      	orrs	r1, r2
 8001548:	d103      	bne.n	8001552 <__gedf2+0xd6>
 800154a:	4584      	cmp	ip, r0
 800154c:	d1d6      	bne.n	80014fc <__gedf2+0x80>
 800154e:	2000      	movs	r0, #0
 8001550:	e7d9      	b.n	8001506 <__gedf2+0x8a>
 8001552:	2002      	movs	r0, #2
 8001554:	4240      	negs	r0, r0
 8001556:	e7d6      	b.n	8001506 <__gedf2+0x8a>
 8001558:	4584      	cmp	ip, r0
 800155a:	d0e6      	beq.n	800152a <__gedf2+0xae>
 800155c:	e7ce      	b.n	80014fc <__gedf2+0x80>
 800155e:	46c0      	nop			@ (mov r8, r8)
 8001560:	000007ff 	.word	0x000007ff

08001564 <__ledf2>:
 8001564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001566:	4657      	mov	r7, sl
 8001568:	464e      	mov	r6, r9
 800156a:	4645      	mov	r5, r8
 800156c:	46de      	mov	lr, fp
 800156e:	b5e0      	push	{r5, r6, r7, lr}
 8001570:	000d      	movs	r5, r1
 8001572:	030f      	lsls	r7, r1, #12
 8001574:	0004      	movs	r4, r0
 8001576:	4680      	mov	r8, r0
 8001578:	0fe8      	lsrs	r0, r5, #31
 800157a:	0b39      	lsrs	r1, r7, #12
 800157c:	4684      	mov	ip, r0
 800157e:	b083      	sub	sp, #12
 8001580:	0058      	lsls	r0, r3, #1
 8001582:	4f30      	ldr	r7, [pc, #192]	@ (8001644 <__ledf2+0xe0>)
 8001584:	0d40      	lsrs	r0, r0, #21
 8001586:	9101      	str	r1, [sp, #4]
 8001588:	031e      	lsls	r6, r3, #12
 800158a:	0069      	lsls	r1, r5, #1
 800158c:	4682      	mov	sl, r0
 800158e:	4691      	mov	r9, r2
 8001590:	0d49      	lsrs	r1, r1, #21
 8001592:	0b36      	lsrs	r6, r6, #12
 8001594:	0fd8      	lsrs	r0, r3, #31
 8001596:	42b9      	cmp	r1, r7
 8001598:	d020      	beq.n	80015dc <__ledf2+0x78>
 800159a:	45ba      	cmp	sl, r7
 800159c:	d00f      	beq.n	80015be <__ledf2+0x5a>
 800159e:	2900      	cmp	r1, #0
 80015a0:	d12b      	bne.n	80015fa <__ledf2+0x96>
 80015a2:	9901      	ldr	r1, [sp, #4]
 80015a4:	430c      	orrs	r4, r1
 80015a6:	4651      	mov	r1, sl
 80015a8:	2900      	cmp	r1, #0
 80015aa:	d137      	bne.n	800161c <__ledf2+0xb8>
 80015ac:	4332      	orrs	r2, r6
 80015ae:	d038      	beq.n	8001622 <__ledf2+0xbe>
 80015b0:	2c00      	cmp	r4, #0
 80015b2:	d144      	bne.n	800163e <__ledf2+0xda>
 80015b4:	2800      	cmp	r0, #0
 80015b6:	d119      	bne.n	80015ec <__ledf2+0x88>
 80015b8:	2001      	movs	r0, #1
 80015ba:	4240      	negs	r0, r0
 80015bc:	e016      	b.n	80015ec <__ledf2+0x88>
 80015be:	4316      	orrs	r6, r2
 80015c0:	d113      	bne.n	80015ea <__ledf2+0x86>
 80015c2:	2900      	cmp	r1, #0
 80015c4:	d102      	bne.n	80015cc <__ledf2+0x68>
 80015c6:	9f01      	ldr	r7, [sp, #4]
 80015c8:	4327      	orrs	r7, r4
 80015ca:	d0f3      	beq.n	80015b4 <__ledf2+0x50>
 80015cc:	4584      	cmp	ip, r0
 80015ce:	d020      	beq.n	8001612 <__ledf2+0xae>
 80015d0:	4663      	mov	r3, ip
 80015d2:	2002      	movs	r0, #2
 80015d4:	3b01      	subs	r3, #1
 80015d6:	4018      	ands	r0, r3
 80015d8:	3801      	subs	r0, #1
 80015da:	e007      	b.n	80015ec <__ledf2+0x88>
 80015dc:	9f01      	ldr	r7, [sp, #4]
 80015de:	4327      	orrs	r7, r4
 80015e0:	d103      	bne.n	80015ea <__ledf2+0x86>
 80015e2:	458a      	cmp	sl, r1
 80015e4:	d1f4      	bne.n	80015d0 <__ledf2+0x6c>
 80015e6:	4316      	orrs	r6, r2
 80015e8:	d01f      	beq.n	800162a <__ledf2+0xc6>
 80015ea:	2002      	movs	r0, #2
 80015ec:	b003      	add	sp, #12
 80015ee:	bcf0      	pop	{r4, r5, r6, r7}
 80015f0:	46bb      	mov	fp, r7
 80015f2:	46b2      	mov	sl, r6
 80015f4:	46a9      	mov	r9, r5
 80015f6:	46a0      	mov	r8, r4
 80015f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015fa:	4654      	mov	r4, sl
 80015fc:	2c00      	cmp	r4, #0
 80015fe:	d0e7      	beq.n	80015d0 <__ledf2+0x6c>
 8001600:	4584      	cmp	ip, r0
 8001602:	d1e5      	bne.n	80015d0 <__ledf2+0x6c>
 8001604:	4551      	cmp	r1, sl
 8001606:	dce3      	bgt.n	80015d0 <__ledf2+0x6c>
 8001608:	db03      	blt.n	8001612 <__ledf2+0xae>
 800160a:	9b01      	ldr	r3, [sp, #4]
 800160c:	42b3      	cmp	r3, r6
 800160e:	d8df      	bhi.n	80015d0 <__ledf2+0x6c>
 8001610:	d00f      	beq.n	8001632 <__ledf2+0xce>
 8001612:	4663      	mov	r3, ip
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0cf      	beq.n	80015b8 <__ledf2+0x54>
 8001618:	4660      	mov	r0, ip
 800161a:	e7e7      	b.n	80015ec <__ledf2+0x88>
 800161c:	2c00      	cmp	r4, #0
 800161e:	d0c9      	beq.n	80015b4 <__ledf2+0x50>
 8001620:	e7d4      	b.n	80015cc <__ledf2+0x68>
 8001622:	2000      	movs	r0, #0
 8001624:	2c00      	cmp	r4, #0
 8001626:	d0e1      	beq.n	80015ec <__ledf2+0x88>
 8001628:	e7d2      	b.n	80015d0 <__ledf2+0x6c>
 800162a:	4584      	cmp	ip, r0
 800162c:	d1d0      	bne.n	80015d0 <__ledf2+0x6c>
 800162e:	2000      	movs	r0, #0
 8001630:	e7dc      	b.n	80015ec <__ledf2+0x88>
 8001632:	45c8      	cmp	r8, r9
 8001634:	d8cc      	bhi.n	80015d0 <__ledf2+0x6c>
 8001636:	2000      	movs	r0, #0
 8001638:	45c8      	cmp	r8, r9
 800163a:	d2d7      	bcs.n	80015ec <__ledf2+0x88>
 800163c:	e7e9      	b.n	8001612 <__ledf2+0xae>
 800163e:	4584      	cmp	ip, r0
 8001640:	d0e3      	beq.n	800160a <__ledf2+0xa6>
 8001642:	e7c5      	b.n	80015d0 <__ledf2+0x6c>
 8001644:	000007ff 	.word	0x000007ff

08001648 <__aeabi_dmul>:
 8001648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800164a:	4657      	mov	r7, sl
 800164c:	46de      	mov	lr, fp
 800164e:	464e      	mov	r6, r9
 8001650:	4645      	mov	r5, r8
 8001652:	b5e0      	push	{r5, r6, r7, lr}
 8001654:	001f      	movs	r7, r3
 8001656:	030b      	lsls	r3, r1, #12
 8001658:	0b1b      	lsrs	r3, r3, #12
 800165a:	0016      	movs	r6, r2
 800165c:	469a      	mov	sl, r3
 800165e:	0fca      	lsrs	r2, r1, #31
 8001660:	004b      	lsls	r3, r1, #1
 8001662:	0004      	movs	r4, r0
 8001664:	4693      	mov	fp, r2
 8001666:	b087      	sub	sp, #28
 8001668:	0d5b      	lsrs	r3, r3, #21
 800166a:	d100      	bne.n	800166e <__aeabi_dmul+0x26>
 800166c:	e0d5      	b.n	800181a <__aeabi_dmul+0x1d2>
 800166e:	4abb      	ldr	r2, [pc, #748]	@ (800195c <__aeabi_dmul+0x314>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d100      	bne.n	8001676 <__aeabi_dmul+0x2e>
 8001674:	e0f8      	b.n	8001868 <__aeabi_dmul+0x220>
 8001676:	4651      	mov	r1, sl
 8001678:	0f42      	lsrs	r2, r0, #29
 800167a:	00c9      	lsls	r1, r1, #3
 800167c:	430a      	orrs	r2, r1
 800167e:	2180      	movs	r1, #128	@ 0x80
 8001680:	0409      	lsls	r1, r1, #16
 8001682:	4311      	orrs	r1, r2
 8001684:	00c2      	lsls	r2, r0, #3
 8001686:	4691      	mov	r9, r2
 8001688:	4ab5      	ldr	r2, [pc, #724]	@ (8001960 <__aeabi_dmul+0x318>)
 800168a:	468a      	mov	sl, r1
 800168c:	189d      	adds	r5, r3, r2
 800168e:	2300      	movs	r3, #0
 8001690:	4698      	mov	r8, r3
 8001692:	9302      	str	r3, [sp, #8]
 8001694:	033c      	lsls	r4, r7, #12
 8001696:	007b      	lsls	r3, r7, #1
 8001698:	0ffa      	lsrs	r2, r7, #31
 800169a:	0030      	movs	r0, r6
 800169c:	0b24      	lsrs	r4, r4, #12
 800169e:	0d5b      	lsrs	r3, r3, #21
 80016a0:	9200      	str	r2, [sp, #0]
 80016a2:	d100      	bne.n	80016a6 <__aeabi_dmul+0x5e>
 80016a4:	e096      	b.n	80017d4 <__aeabi_dmul+0x18c>
 80016a6:	4aad      	ldr	r2, [pc, #692]	@ (800195c <__aeabi_dmul+0x314>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d031      	beq.n	8001710 <__aeabi_dmul+0xc8>
 80016ac:	0f72      	lsrs	r2, r6, #29
 80016ae:	00e4      	lsls	r4, r4, #3
 80016b0:	4322      	orrs	r2, r4
 80016b2:	2480      	movs	r4, #128	@ 0x80
 80016b4:	0424      	lsls	r4, r4, #16
 80016b6:	4314      	orrs	r4, r2
 80016b8:	4aa9      	ldr	r2, [pc, #676]	@ (8001960 <__aeabi_dmul+0x318>)
 80016ba:	00f0      	lsls	r0, r6, #3
 80016bc:	4694      	mov	ip, r2
 80016be:	4463      	add	r3, ip
 80016c0:	195b      	adds	r3, r3, r5
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	9201      	str	r2, [sp, #4]
 80016c6:	4642      	mov	r2, r8
 80016c8:	2600      	movs	r6, #0
 80016ca:	2a0a      	cmp	r2, #10
 80016cc:	dc42      	bgt.n	8001754 <__aeabi_dmul+0x10c>
 80016ce:	465a      	mov	r2, fp
 80016d0:	9900      	ldr	r1, [sp, #0]
 80016d2:	404a      	eors	r2, r1
 80016d4:	4693      	mov	fp, r2
 80016d6:	4642      	mov	r2, r8
 80016d8:	2a02      	cmp	r2, #2
 80016da:	dc32      	bgt.n	8001742 <__aeabi_dmul+0xfa>
 80016dc:	3a01      	subs	r2, #1
 80016de:	2a01      	cmp	r2, #1
 80016e0:	d900      	bls.n	80016e4 <__aeabi_dmul+0x9c>
 80016e2:	e149      	b.n	8001978 <__aeabi_dmul+0x330>
 80016e4:	2e02      	cmp	r6, #2
 80016e6:	d100      	bne.n	80016ea <__aeabi_dmul+0xa2>
 80016e8:	e0ca      	b.n	8001880 <__aeabi_dmul+0x238>
 80016ea:	2e01      	cmp	r6, #1
 80016ec:	d13d      	bne.n	800176a <__aeabi_dmul+0x122>
 80016ee:	2300      	movs	r3, #0
 80016f0:	2400      	movs	r4, #0
 80016f2:	2200      	movs	r2, #0
 80016f4:	0010      	movs	r0, r2
 80016f6:	465a      	mov	r2, fp
 80016f8:	051b      	lsls	r3, r3, #20
 80016fa:	4323      	orrs	r3, r4
 80016fc:	07d2      	lsls	r2, r2, #31
 80016fe:	4313      	orrs	r3, r2
 8001700:	0019      	movs	r1, r3
 8001702:	b007      	add	sp, #28
 8001704:	bcf0      	pop	{r4, r5, r6, r7}
 8001706:	46bb      	mov	fp, r7
 8001708:	46b2      	mov	sl, r6
 800170a:	46a9      	mov	r9, r5
 800170c:	46a0      	mov	r8, r4
 800170e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001710:	4b92      	ldr	r3, [pc, #584]	@ (800195c <__aeabi_dmul+0x314>)
 8001712:	4326      	orrs	r6, r4
 8001714:	18eb      	adds	r3, r5, r3
 8001716:	2e00      	cmp	r6, #0
 8001718:	d100      	bne.n	800171c <__aeabi_dmul+0xd4>
 800171a:	e0bb      	b.n	8001894 <__aeabi_dmul+0x24c>
 800171c:	2203      	movs	r2, #3
 800171e:	4641      	mov	r1, r8
 8001720:	4311      	orrs	r1, r2
 8001722:	465a      	mov	r2, fp
 8001724:	4688      	mov	r8, r1
 8001726:	9900      	ldr	r1, [sp, #0]
 8001728:	404a      	eors	r2, r1
 800172a:	2180      	movs	r1, #128	@ 0x80
 800172c:	0109      	lsls	r1, r1, #4
 800172e:	468c      	mov	ip, r1
 8001730:	0029      	movs	r1, r5
 8001732:	4461      	add	r1, ip
 8001734:	9101      	str	r1, [sp, #4]
 8001736:	4641      	mov	r1, r8
 8001738:	290a      	cmp	r1, #10
 800173a:	dd00      	ble.n	800173e <__aeabi_dmul+0xf6>
 800173c:	e233      	b.n	8001ba6 <__aeabi_dmul+0x55e>
 800173e:	4693      	mov	fp, r2
 8001740:	2603      	movs	r6, #3
 8001742:	4642      	mov	r2, r8
 8001744:	2701      	movs	r7, #1
 8001746:	4097      	lsls	r7, r2
 8001748:	21a6      	movs	r1, #166	@ 0xa6
 800174a:	003a      	movs	r2, r7
 800174c:	00c9      	lsls	r1, r1, #3
 800174e:	400a      	ands	r2, r1
 8001750:	420f      	tst	r7, r1
 8001752:	d031      	beq.n	80017b8 <__aeabi_dmul+0x170>
 8001754:	9e02      	ldr	r6, [sp, #8]
 8001756:	2e02      	cmp	r6, #2
 8001758:	d100      	bne.n	800175c <__aeabi_dmul+0x114>
 800175a:	e235      	b.n	8001bc8 <__aeabi_dmul+0x580>
 800175c:	2e03      	cmp	r6, #3
 800175e:	d100      	bne.n	8001762 <__aeabi_dmul+0x11a>
 8001760:	e1d2      	b.n	8001b08 <__aeabi_dmul+0x4c0>
 8001762:	4654      	mov	r4, sl
 8001764:	4648      	mov	r0, r9
 8001766:	2e01      	cmp	r6, #1
 8001768:	d0c1      	beq.n	80016ee <__aeabi_dmul+0xa6>
 800176a:	9a01      	ldr	r2, [sp, #4]
 800176c:	4b7d      	ldr	r3, [pc, #500]	@ (8001964 <__aeabi_dmul+0x31c>)
 800176e:	4694      	mov	ip, r2
 8001770:	4463      	add	r3, ip
 8001772:	2b00      	cmp	r3, #0
 8001774:	dc00      	bgt.n	8001778 <__aeabi_dmul+0x130>
 8001776:	e0c0      	b.n	80018fa <__aeabi_dmul+0x2b2>
 8001778:	0742      	lsls	r2, r0, #29
 800177a:	d009      	beq.n	8001790 <__aeabi_dmul+0x148>
 800177c:	220f      	movs	r2, #15
 800177e:	4002      	ands	r2, r0
 8001780:	2a04      	cmp	r2, #4
 8001782:	d005      	beq.n	8001790 <__aeabi_dmul+0x148>
 8001784:	1d02      	adds	r2, r0, #4
 8001786:	4282      	cmp	r2, r0
 8001788:	4180      	sbcs	r0, r0
 800178a:	4240      	negs	r0, r0
 800178c:	1824      	adds	r4, r4, r0
 800178e:	0010      	movs	r0, r2
 8001790:	01e2      	lsls	r2, r4, #7
 8001792:	d506      	bpl.n	80017a2 <__aeabi_dmul+0x15a>
 8001794:	4b74      	ldr	r3, [pc, #464]	@ (8001968 <__aeabi_dmul+0x320>)
 8001796:	9a01      	ldr	r2, [sp, #4]
 8001798:	401c      	ands	r4, r3
 800179a:	2380      	movs	r3, #128	@ 0x80
 800179c:	4694      	mov	ip, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	4463      	add	r3, ip
 80017a2:	4a72      	ldr	r2, [pc, #456]	@ (800196c <__aeabi_dmul+0x324>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	dc6b      	bgt.n	8001880 <__aeabi_dmul+0x238>
 80017a8:	0762      	lsls	r2, r4, #29
 80017aa:	08c0      	lsrs	r0, r0, #3
 80017ac:	0264      	lsls	r4, r4, #9
 80017ae:	055b      	lsls	r3, r3, #21
 80017b0:	4302      	orrs	r2, r0
 80017b2:	0b24      	lsrs	r4, r4, #12
 80017b4:	0d5b      	lsrs	r3, r3, #21
 80017b6:	e79d      	b.n	80016f4 <__aeabi_dmul+0xac>
 80017b8:	2190      	movs	r1, #144	@ 0x90
 80017ba:	0089      	lsls	r1, r1, #2
 80017bc:	420f      	tst	r7, r1
 80017be:	d163      	bne.n	8001888 <__aeabi_dmul+0x240>
 80017c0:	2288      	movs	r2, #136	@ 0x88
 80017c2:	423a      	tst	r2, r7
 80017c4:	d100      	bne.n	80017c8 <__aeabi_dmul+0x180>
 80017c6:	e0d7      	b.n	8001978 <__aeabi_dmul+0x330>
 80017c8:	9b00      	ldr	r3, [sp, #0]
 80017ca:	46a2      	mov	sl, r4
 80017cc:	469b      	mov	fp, r3
 80017ce:	4681      	mov	r9, r0
 80017d0:	9602      	str	r6, [sp, #8]
 80017d2:	e7bf      	b.n	8001754 <__aeabi_dmul+0x10c>
 80017d4:	0023      	movs	r3, r4
 80017d6:	4333      	orrs	r3, r6
 80017d8:	d100      	bne.n	80017dc <__aeabi_dmul+0x194>
 80017da:	e07f      	b.n	80018dc <__aeabi_dmul+0x294>
 80017dc:	2c00      	cmp	r4, #0
 80017de:	d100      	bne.n	80017e2 <__aeabi_dmul+0x19a>
 80017e0:	e1ad      	b.n	8001b3e <__aeabi_dmul+0x4f6>
 80017e2:	0020      	movs	r0, r4
 80017e4:	f7fe fe60 	bl	80004a8 <__clzsi2>
 80017e8:	0002      	movs	r2, r0
 80017ea:	0003      	movs	r3, r0
 80017ec:	3a0b      	subs	r2, #11
 80017ee:	201d      	movs	r0, #29
 80017f0:	0019      	movs	r1, r3
 80017f2:	1a82      	subs	r2, r0, r2
 80017f4:	0030      	movs	r0, r6
 80017f6:	3908      	subs	r1, #8
 80017f8:	40d0      	lsrs	r0, r2
 80017fa:	408c      	lsls	r4, r1
 80017fc:	4304      	orrs	r4, r0
 80017fe:	0030      	movs	r0, r6
 8001800:	4088      	lsls	r0, r1
 8001802:	4a5b      	ldr	r2, [pc, #364]	@ (8001970 <__aeabi_dmul+0x328>)
 8001804:	1aeb      	subs	r3, r5, r3
 8001806:	4694      	mov	ip, r2
 8001808:	4463      	add	r3, ip
 800180a:	1c5a      	adds	r2, r3, #1
 800180c:	9201      	str	r2, [sp, #4]
 800180e:	4642      	mov	r2, r8
 8001810:	2600      	movs	r6, #0
 8001812:	2a0a      	cmp	r2, #10
 8001814:	dc00      	bgt.n	8001818 <__aeabi_dmul+0x1d0>
 8001816:	e75a      	b.n	80016ce <__aeabi_dmul+0x86>
 8001818:	e79c      	b.n	8001754 <__aeabi_dmul+0x10c>
 800181a:	4653      	mov	r3, sl
 800181c:	4303      	orrs	r3, r0
 800181e:	4699      	mov	r9, r3
 8001820:	d054      	beq.n	80018cc <__aeabi_dmul+0x284>
 8001822:	4653      	mov	r3, sl
 8001824:	2b00      	cmp	r3, #0
 8001826:	d100      	bne.n	800182a <__aeabi_dmul+0x1e2>
 8001828:	e177      	b.n	8001b1a <__aeabi_dmul+0x4d2>
 800182a:	4650      	mov	r0, sl
 800182c:	f7fe fe3c 	bl	80004a8 <__clzsi2>
 8001830:	230b      	movs	r3, #11
 8001832:	425b      	negs	r3, r3
 8001834:	469c      	mov	ip, r3
 8001836:	0002      	movs	r2, r0
 8001838:	4484      	add	ip, r0
 800183a:	0011      	movs	r1, r2
 800183c:	4650      	mov	r0, sl
 800183e:	3908      	subs	r1, #8
 8001840:	4088      	lsls	r0, r1
 8001842:	231d      	movs	r3, #29
 8001844:	4680      	mov	r8, r0
 8001846:	4660      	mov	r0, ip
 8001848:	1a1b      	subs	r3, r3, r0
 800184a:	0020      	movs	r0, r4
 800184c:	40d8      	lsrs	r0, r3
 800184e:	0003      	movs	r3, r0
 8001850:	4640      	mov	r0, r8
 8001852:	4303      	orrs	r3, r0
 8001854:	469a      	mov	sl, r3
 8001856:	0023      	movs	r3, r4
 8001858:	408b      	lsls	r3, r1
 800185a:	4699      	mov	r9, r3
 800185c:	2300      	movs	r3, #0
 800185e:	4d44      	ldr	r5, [pc, #272]	@ (8001970 <__aeabi_dmul+0x328>)
 8001860:	4698      	mov	r8, r3
 8001862:	1aad      	subs	r5, r5, r2
 8001864:	9302      	str	r3, [sp, #8]
 8001866:	e715      	b.n	8001694 <__aeabi_dmul+0x4c>
 8001868:	4652      	mov	r2, sl
 800186a:	4302      	orrs	r2, r0
 800186c:	4691      	mov	r9, r2
 800186e:	d126      	bne.n	80018be <__aeabi_dmul+0x276>
 8001870:	2200      	movs	r2, #0
 8001872:	001d      	movs	r5, r3
 8001874:	2302      	movs	r3, #2
 8001876:	4692      	mov	sl, r2
 8001878:	3208      	adds	r2, #8
 800187a:	4690      	mov	r8, r2
 800187c:	9302      	str	r3, [sp, #8]
 800187e:	e709      	b.n	8001694 <__aeabi_dmul+0x4c>
 8001880:	2400      	movs	r4, #0
 8001882:	2200      	movs	r2, #0
 8001884:	4b35      	ldr	r3, [pc, #212]	@ (800195c <__aeabi_dmul+0x314>)
 8001886:	e735      	b.n	80016f4 <__aeabi_dmul+0xac>
 8001888:	2300      	movs	r3, #0
 800188a:	2480      	movs	r4, #128	@ 0x80
 800188c:	469b      	mov	fp, r3
 800188e:	0324      	lsls	r4, r4, #12
 8001890:	4b32      	ldr	r3, [pc, #200]	@ (800195c <__aeabi_dmul+0x314>)
 8001892:	e72f      	b.n	80016f4 <__aeabi_dmul+0xac>
 8001894:	2202      	movs	r2, #2
 8001896:	4641      	mov	r1, r8
 8001898:	4311      	orrs	r1, r2
 800189a:	2280      	movs	r2, #128	@ 0x80
 800189c:	0112      	lsls	r2, r2, #4
 800189e:	4694      	mov	ip, r2
 80018a0:	002a      	movs	r2, r5
 80018a2:	4462      	add	r2, ip
 80018a4:	4688      	mov	r8, r1
 80018a6:	9201      	str	r2, [sp, #4]
 80018a8:	290a      	cmp	r1, #10
 80018aa:	dd00      	ble.n	80018ae <__aeabi_dmul+0x266>
 80018ac:	e752      	b.n	8001754 <__aeabi_dmul+0x10c>
 80018ae:	465a      	mov	r2, fp
 80018b0:	2000      	movs	r0, #0
 80018b2:	9900      	ldr	r1, [sp, #0]
 80018b4:	0004      	movs	r4, r0
 80018b6:	404a      	eors	r2, r1
 80018b8:	4693      	mov	fp, r2
 80018ba:	2602      	movs	r6, #2
 80018bc:	e70b      	b.n	80016d6 <__aeabi_dmul+0x8e>
 80018be:	220c      	movs	r2, #12
 80018c0:	001d      	movs	r5, r3
 80018c2:	2303      	movs	r3, #3
 80018c4:	4681      	mov	r9, r0
 80018c6:	4690      	mov	r8, r2
 80018c8:	9302      	str	r3, [sp, #8]
 80018ca:	e6e3      	b.n	8001694 <__aeabi_dmul+0x4c>
 80018cc:	2300      	movs	r3, #0
 80018ce:	469a      	mov	sl, r3
 80018d0:	3304      	adds	r3, #4
 80018d2:	4698      	mov	r8, r3
 80018d4:	3b03      	subs	r3, #3
 80018d6:	2500      	movs	r5, #0
 80018d8:	9302      	str	r3, [sp, #8]
 80018da:	e6db      	b.n	8001694 <__aeabi_dmul+0x4c>
 80018dc:	4642      	mov	r2, r8
 80018de:	3301      	adds	r3, #1
 80018e0:	431a      	orrs	r2, r3
 80018e2:	002b      	movs	r3, r5
 80018e4:	4690      	mov	r8, r2
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	9201      	str	r2, [sp, #4]
 80018ea:	4642      	mov	r2, r8
 80018ec:	2400      	movs	r4, #0
 80018ee:	2000      	movs	r0, #0
 80018f0:	2601      	movs	r6, #1
 80018f2:	2a0a      	cmp	r2, #10
 80018f4:	dc00      	bgt.n	80018f8 <__aeabi_dmul+0x2b0>
 80018f6:	e6ea      	b.n	80016ce <__aeabi_dmul+0x86>
 80018f8:	e72c      	b.n	8001754 <__aeabi_dmul+0x10c>
 80018fa:	2201      	movs	r2, #1
 80018fc:	1ad2      	subs	r2, r2, r3
 80018fe:	2a38      	cmp	r2, #56	@ 0x38
 8001900:	dd00      	ble.n	8001904 <__aeabi_dmul+0x2bc>
 8001902:	e6f4      	b.n	80016ee <__aeabi_dmul+0xa6>
 8001904:	2a1f      	cmp	r2, #31
 8001906:	dc00      	bgt.n	800190a <__aeabi_dmul+0x2c2>
 8001908:	e12a      	b.n	8001b60 <__aeabi_dmul+0x518>
 800190a:	211f      	movs	r1, #31
 800190c:	4249      	negs	r1, r1
 800190e:	1acb      	subs	r3, r1, r3
 8001910:	0021      	movs	r1, r4
 8001912:	40d9      	lsrs	r1, r3
 8001914:	000b      	movs	r3, r1
 8001916:	2a20      	cmp	r2, #32
 8001918:	d005      	beq.n	8001926 <__aeabi_dmul+0x2de>
 800191a:	4a16      	ldr	r2, [pc, #88]	@ (8001974 <__aeabi_dmul+0x32c>)
 800191c:	9d01      	ldr	r5, [sp, #4]
 800191e:	4694      	mov	ip, r2
 8001920:	4465      	add	r5, ip
 8001922:	40ac      	lsls	r4, r5
 8001924:	4320      	orrs	r0, r4
 8001926:	1e42      	subs	r2, r0, #1
 8001928:	4190      	sbcs	r0, r2
 800192a:	4318      	orrs	r0, r3
 800192c:	2307      	movs	r3, #7
 800192e:	0019      	movs	r1, r3
 8001930:	2400      	movs	r4, #0
 8001932:	4001      	ands	r1, r0
 8001934:	4203      	tst	r3, r0
 8001936:	d00c      	beq.n	8001952 <__aeabi_dmul+0x30a>
 8001938:	230f      	movs	r3, #15
 800193a:	4003      	ands	r3, r0
 800193c:	2b04      	cmp	r3, #4
 800193e:	d100      	bne.n	8001942 <__aeabi_dmul+0x2fa>
 8001940:	e140      	b.n	8001bc4 <__aeabi_dmul+0x57c>
 8001942:	1d03      	adds	r3, r0, #4
 8001944:	4283      	cmp	r3, r0
 8001946:	41a4      	sbcs	r4, r4
 8001948:	0018      	movs	r0, r3
 800194a:	4264      	negs	r4, r4
 800194c:	0761      	lsls	r1, r4, #29
 800194e:	0264      	lsls	r4, r4, #9
 8001950:	0b24      	lsrs	r4, r4, #12
 8001952:	08c2      	lsrs	r2, r0, #3
 8001954:	2300      	movs	r3, #0
 8001956:	430a      	orrs	r2, r1
 8001958:	e6cc      	b.n	80016f4 <__aeabi_dmul+0xac>
 800195a:	46c0      	nop			@ (mov r8, r8)
 800195c:	000007ff 	.word	0x000007ff
 8001960:	fffffc01 	.word	0xfffffc01
 8001964:	000003ff 	.word	0x000003ff
 8001968:	feffffff 	.word	0xfeffffff
 800196c:	000007fe 	.word	0x000007fe
 8001970:	fffffc0d 	.word	0xfffffc0d
 8001974:	0000043e 	.word	0x0000043e
 8001978:	4649      	mov	r1, r9
 800197a:	464a      	mov	r2, r9
 800197c:	0409      	lsls	r1, r1, #16
 800197e:	0c09      	lsrs	r1, r1, #16
 8001980:	000d      	movs	r5, r1
 8001982:	0c16      	lsrs	r6, r2, #16
 8001984:	0c02      	lsrs	r2, r0, #16
 8001986:	0400      	lsls	r0, r0, #16
 8001988:	0c00      	lsrs	r0, r0, #16
 800198a:	4345      	muls	r5, r0
 800198c:	46ac      	mov	ip, r5
 800198e:	0005      	movs	r5, r0
 8001990:	4375      	muls	r5, r6
 8001992:	46a8      	mov	r8, r5
 8001994:	0015      	movs	r5, r2
 8001996:	000f      	movs	r7, r1
 8001998:	4375      	muls	r5, r6
 800199a:	9200      	str	r2, [sp, #0]
 800199c:	9502      	str	r5, [sp, #8]
 800199e:	002a      	movs	r2, r5
 80019a0:	9d00      	ldr	r5, [sp, #0]
 80019a2:	436f      	muls	r7, r5
 80019a4:	4665      	mov	r5, ip
 80019a6:	0c2d      	lsrs	r5, r5, #16
 80019a8:	46a9      	mov	r9, r5
 80019aa:	4447      	add	r7, r8
 80019ac:	444f      	add	r7, r9
 80019ae:	45b8      	cmp	r8, r7
 80019b0:	d905      	bls.n	80019be <__aeabi_dmul+0x376>
 80019b2:	0015      	movs	r5, r2
 80019b4:	2280      	movs	r2, #128	@ 0x80
 80019b6:	0252      	lsls	r2, r2, #9
 80019b8:	4690      	mov	r8, r2
 80019ba:	4445      	add	r5, r8
 80019bc:	9502      	str	r5, [sp, #8]
 80019be:	0c3d      	lsrs	r5, r7, #16
 80019c0:	9503      	str	r5, [sp, #12]
 80019c2:	4665      	mov	r5, ip
 80019c4:	042d      	lsls	r5, r5, #16
 80019c6:	043f      	lsls	r7, r7, #16
 80019c8:	0c2d      	lsrs	r5, r5, #16
 80019ca:	46ac      	mov	ip, r5
 80019cc:	003d      	movs	r5, r7
 80019ce:	4465      	add	r5, ip
 80019d0:	9504      	str	r5, [sp, #16]
 80019d2:	0c25      	lsrs	r5, r4, #16
 80019d4:	0424      	lsls	r4, r4, #16
 80019d6:	0c24      	lsrs	r4, r4, #16
 80019d8:	46ac      	mov	ip, r5
 80019da:	0025      	movs	r5, r4
 80019dc:	4375      	muls	r5, r6
 80019de:	46a8      	mov	r8, r5
 80019e0:	4665      	mov	r5, ip
 80019e2:	000f      	movs	r7, r1
 80019e4:	4369      	muls	r1, r5
 80019e6:	4441      	add	r1, r8
 80019e8:	4689      	mov	r9, r1
 80019ea:	4367      	muls	r7, r4
 80019ec:	0c39      	lsrs	r1, r7, #16
 80019ee:	4449      	add	r1, r9
 80019f0:	436e      	muls	r6, r5
 80019f2:	4588      	cmp	r8, r1
 80019f4:	d903      	bls.n	80019fe <__aeabi_dmul+0x3b6>
 80019f6:	2280      	movs	r2, #128	@ 0x80
 80019f8:	0252      	lsls	r2, r2, #9
 80019fa:	4690      	mov	r8, r2
 80019fc:	4446      	add	r6, r8
 80019fe:	0c0d      	lsrs	r5, r1, #16
 8001a00:	46a8      	mov	r8, r5
 8001a02:	0035      	movs	r5, r6
 8001a04:	4445      	add	r5, r8
 8001a06:	9505      	str	r5, [sp, #20]
 8001a08:	9d03      	ldr	r5, [sp, #12]
 8001a0a:	043f      	lsls	r7, r7, #16
 8001a0c:	46a8      	mov	r8, r5
 8001a0e:	0c3f      	lsrs	r7, r7, #16
 8001a10:	0409      	lsls	r1, r1, #16
 8001a12:	19c9      	adds	r1, r1, r7
 8001a14:	4488      	add	r8, r1
 8001a16:	4645      	mov	r5, r8
 8001a18:	9503      	str	r5, [sp, #12]
 8001a1a:	4655      	mov	r5, sl
 8001a1c:	042e      	lsls	r6, r5, #16
 8001a1e:	0c36      	lsrs	r6, r6, #16
 8001a20:	0c2f      	lsrs	r7, r5, #16
 8001a22:	0035      	movs	r5, r6
 8001a24:	4345      	muls	r5, r0
 8001a26:	4378      	muls	r0, r7
 8001a28:	4681      	mov	r9, r0
 8001a2a:	0038      	movs	r0, r7
 8001a2c:	46a8      	mov	r8, r5
 8001a2e:	0c2d      	lsrs	r5, r5, #16
 8001a30:	46aa      	mov	sl, r5
 8001a32:	9a00      	ldr	r2, [sp, #0]
 8001a34:	4350      	muls	r0, r2
 8001a36:	4372      	muls	r2, r6
 8001a38:	444a      	add	r2, r9
 8001a3a:	4452      	add	r2, sl
 8001a3c:	4591      	cmp	r9, r2
 8001a3e:	d903      	bls.n	8001a48 <__aeabi_dmul+0x400>
 8001a40:	2580      	movs	r5, #128	@ 0x80
 8001a42:	026d      	lsls	r5, r5, #9
 8001a44:	46a9      	mov	r9, r5
 8001a46:	4448      	add	r0, r9
 8001a48:	0c15      	lsrs	r5, r2, #16
 8001a4a:	46a9      	mov	r9, r5
 8001a4c:	4645      	mov	r5, r8
 8001a4e:	042d      	lsls	r5, r5, #16
 8001a50:	0c2d      	lsrs	r5, r5, #16
 8001a52:	46a8      	mov	r8, r5
 8001a54:	4665      	mov	r5, ip
 8001a56:	437d      	muls	r5, r7
 8001a58:	0412      	lsls	r2, r2, #16
 8001a5a:	4448      	add	r0, r9
 8001a5c:	4490      	add	r8, r2
 8001a5e:	46a9      	mov	r9, r5
 8001a60:	0032      	movs	r2, r6
 8001a62:	4665      	mov	r5, ip
 8001a64:	4362      	muls	r2, r4
 8001a66:	436e      	muls	r6, r5
 8001a68:	437c      	muls	r4, r7
 8001a6a:	0c17      	lsrs	r7, r2, #16
 8001a6c:	1936      	adds	r6, r6, r4
 8001a6e:	19bf      	adds	r7, r7, r6
 8001a70:	42bc      	cmp	r4, r7
 8001a72:	d903      	bls.n	8001a7c <__aeabi_dmul+0x434>
 8001a74:	2480      	movs	r4, #128	@ 0x80
 8001a76:	0264      	lsls	r4, r4, #9
 8001a78:	46a4      	mov	ip, r4
 8001a7a:	44e1      	add	r9, ip
 8001a7c:	9c02      	ldr	r4, [sp, #8]
 8001a7e:	9e03      	ldr	r6, [sp, #12]
 8001a80:	46a4      	mov	ip, r4
 8001a82:	9d05      	ldr	r5, [sp, #20]
 8001a84:	4466      	add	r6, ip
 8001a86:	428e      	cmp	r6, r1
 8001a88:	4189      	sbcs	r1, r1
 8001a8a:	46ac      	mov	ip, r5
 8001a8c:	0412      	lsls	r2, r2, #16
 8001a8e:	043c      	lsls	r4, r7, #16
 8001a90:	0c12      	lsrs	r2, r2, #16
 8001a92:	18a2      	adds	r2, r4, r2
 8001a94:	4462      	add	r2, ip
 8001a96:	4249      	negs	r1, r1
 8001a98:	1854      	adds	r4, r2, r1
 8001a9a:	4446      	add	r6, r8
 8001a9c:	46a4      	mov	ip, r4
 8001a9e:	4546      	cmp	r6, r8
 8001aa0:	41a4      	sbcs	r4, r4
 8001aa2:	4682      	mov	sl, r0
 8001aa4:	4264      	negs	r4, r4
 8001aa6:	46a0      	mov	r8, r4
 8001aa8:	42aa      	cmp	r2, r5
 8001aaa:	4192      	sbcs	r2, r2
 8001aac:	458c      	cmp	ip, r1
 8001aae:	4189      	sbcs	r1, r1
 8001ab0:	44e2      	add	sl, ip
 8001ab2:	44d0      	add	r8, sl
 8001ab4:	4249      	negs	r1, r1
 8001ab6:	4252      	negs	r2, r2
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	45a0      	cmp	r8, r4
 8001abc:	41a4      	sbcs	r4, r4
 8001abe:	4582      	cmp	sl, r0
 8001ac0:	4189      	sbcs	r1, r1
 8001ac2:	4264      	negs	r4, r4
 8001ac4:	4249      	negs	r1, r1
 8001ac6:	430c      	orrs	r4, r1
 8001ac8:	4641      	mov	r1, r8
 8001aca:	0c3f      	lsrs	r7, r7, #16
 8001acc:	19d2      	adds	r2, r2, r7
 8001ace:	1912      	adds	r2, r2, r4
 8001ad0:	0dcc      	lsrs	r4, r1, #23
 8001ad2:	9904      	ldr	r1, [sp, #16]
 8001ad4:	0270      	lsls	r0, r6, #9
 8001ad6:	4308      	orrs	r0, r1
 8001ad8:	1e41      	subs	r1, r0, #1
 8001ada:	4188      	sbcs	r0, r1
 8001adc:	4641      	mov	r1, r8
 8001ade:	444a      	add	r2, r9
 8001ae0:	0df6      	lsrs	r6, r6, #23
 8001ae2:	0252      	lsls	r2, r2, #9
 8001ae4:	4330      	orrs	r0, r6
 8001ae6:	0249      	lsls	r1, r1, #9
 8001ae8:	4314      	orrs	r4, r2
 8001aea:	4308      	orrs	r0, r1
 8001aec:	01d2      	lsls	r2, r2, #7
 8001aee:	d535      	bpl.n	8001b5c <__aeabi_dmul+0x514>
 8001af0:	2201      	movs	r2, #1
 8001af2:	0843      	lsrs	r3, r0, #1
 8001af4:	4002      	ands	r2, r0
 8001af6:	4313      	orrs	r3, r2
 8001af8:	07e0      	lsls	r0, r4, #31
 8001afa:	4318      	orrs	r0, r3
 8001afc:	0864      	lsrs	r4, r4, #1
 8001afe:	e634      	b.n	800176a <__aeabi_dmul+0x122>
 8001b00:	9b00      	ldr	r3, [sp, #0]
 8001b02:	46a2      	mov	sl, r4
 8001b04:	469b      	mov	fp, r3
 8001b06:	4681      	mov	r9, r0
 8001b08:	2480      	movs	r4, #128	@ 0x80
 8001b0a:	4653      	mov	r3, sl
 8001b0c:	0324      	lsls	r4, r4, #12
 8001b0e:	431c      	orrs	r4, r3
 8001b10:	0324      	lsls	r4, r4, #12
 8001b12:	464a      	mov	r2, r9
 8001b14:	4b2e      	ldr	r3, [pc, #184]	@ (8001bd0 <__aeabi_dmul+0x588>)
 8001b16:	0b24      	lsrs	r4, r4, #12
 8001b18:	e5ec      	b.n	80016f4 <__aeabi_dmul+0xac>
 8001b1a:	f7fe fcc5 	bl	80004a8 <__clzsi2>
 8001b1e:	2315      	movs	r3, #21
 8001b20:	469c      	mov	ip, r3
 8001b22:	4484      	add	ip, r0
 8001b24:	0002      	movs	r2, r0
 8001b26:	4663      	mov	r3, ip
 8001b28:	3220      	adds	r2, #32
 8001b2a:	2b1c      	cmp	r3, #28
 8001b2c:	dc00      	bgt.n	8001b30 <__aeabi_dmul+0x4e8>
 8001b2e:	e684      	b.n	800183a <__aeabi_dmul+0x1f2>
 8001b30:	2300      	movs	r3, #0
 8001b32:	4699      	mov	r9, r3
 8001b34:	0023      	movs	r3, r4
 8001b36:	3808      	subs	r0, #8
 8001b38:	4083      	lsls	r3, r0
 8001b3a:	469a      	mov	sl, r3
 8001b3c:	e68e      	b.n	800185c <__aeabi_dmul+0x214>
 8001b3e:	f7fe fcb3 	bl	80004a8 <__clzsi2>
 8001b42:	0002      	movs	r2, r0
 8001b44:	0003      	movs	r3, r0
 8001b46:	3215      	adds	r2, #21
 8001b48:	3320      	adds	r3, #32
 8001b4a:	2a1c      	cmp	r2, #28
 8001b4c:	dc00      	bgt.n	8001b50 <__aeabi_dmul+0x508>
 8001b4e:	e64e      	b.n	80017ee <__aeabi_dmul+0x1a6>
 8001b50:	0002      	movs	r2, r0
 8001b52:	0034      	movs	r4, r6
 8001b54:	3a08      	subs	r2, #8
 8001b56:	2000      	movs	r0, #0
 8001b58:	4094      	lsls	r4, r2
 8001b5a:	e652      	b.n	8001802 <__aeabi_dmul+0x1ba>
 8001b5c:	9301      	str	r3, [sp, #4]
 8001b5e:	e604      	b.n	800176a <__aeabi_dmul+0x122>
 8001b60:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd4 <__aeabi_dmul+0x58c>)
 8001b62:	0021      	movs	r1, r4
 8001b64:	469c      	mov	ip, r3
 8001b66:	0003      	movs	r3, r0
 8001b68:	9d01      	ldr	r5, [sp, #4]
 8001b6a:	40d3      	lsrs	r3, r2
 8001b6c:	4465      	add	r5, ip
 8001b6e:	40a9      	lsls	r1, r5
 8001b70:	4319      	orrs	r1, r3
 8001b72:	0003      	movs	r3, r0
 8001b74:	40ab      	lsls	r3, r5
 8001b76:	1e58      	subs	r0, r3, #1
 8001b78:	4183      	sbcs	r3, r0
 8001b7a:	4319      	orrs	r1, r3
 8001b7c:	0008      	movs	r0, r1
 8001b7e:	40d4      	lsrs	r4, r2
 8001b80:	074b      	lsls	r3, r1, #29
 8001b82:	d009      	beq.n	8001b98 <__aeabi_dmul+0x550>
 8001b84:	230f      	movs	r3, #15
 8001b86:	400b      	ands	r3, r1
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d005      	beq.n	8001b98 <__aeabi_dmul+0x550>
 8001b8c:	1d0b      	adds	r3, r1, #4
 8001b8e:	428b      	cmp	r3, r1
 8001b90:	4180      	sbcs	r0, r0
 8001b92:	4240      	negs	r0, r0
 8001b94:	1824      	adds	r4, r4, r0
 8001b96:	0018      	movs	r0, r3
 8001b98:	0223      	lsls	r3, r4, #8
 8001b9a:	d400      	bmi.n	8001b9e <__aeabi_dmul+0x556>
 8001b9c:	e6d6      	b.n	800194c <__aeabi_dmul+0x304>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	2400      	movs	r4, #0
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	e5a6      	b.n	80016f4 <__aeabi_dmul+0xac>
 8001ba6:	290f      	cmp	r1, #15
 8001ba8:	d1aa      	bne.n	8001b00 <__aeabi_dmul+0x4b8>
 8001baa:	2380      	movs	r3, #128	@ 0x80
 8001bac:	4652      	mov	r2, sl
 8001bae:	031b      	lsls	r3, r3, #12
 8001bb0:	421a      	tst	r2, r3
 8001bb2:	d0a9      	beq.n	8001b08 <__aeabi_dmul+0x4c0>
 8001bb4:	421c      	tst	r4, r3
 8001bb6:	d1a7      	bne.n	8001b08 <__aeabi_dmul+0x4c0>
 8001bb8:	431c      	orrs	r4, r3
 8001bba:	9b00      	ldr	r3, [sp, #0]
 8001bbc:	0002      	movs	r2, r0
 8001bbe:	469b      	mov	fp, r3
 8001bc0:	4b03      	ldr	r3, [pc, #12]	@ (8001bd0 <__aeabi_dmul+0x588>)
 8001bc2:	e597      	b.n	80016f4 <__aeabi_dmul+0xac>
 8001bc4:	2400      	movs	r4, #0
 8001bc6:	e6c1      	b.n	800194c <__aeabi_dmul+0x304>
 8001bc8:	2400      	movs	r4, #0
 8001bca:	4b01      	ldr	r3, [pc, #4]	@ (8001bd0 <__aeabi_dmul+0x588>)
 8001bcc:	0022      	movs	r2, r4
 8001bce:	e591      	b.n	80016f4 <__aeabi_dmul+0xac>
 8001bd0:	000007ff 	.word	0x000007ff
 8001bd4:	0000041e 	.word	0x0000041e

08001bd8 <__aeabi_dsub>:
 8001bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bda:	464e      	mov	r6, r9
 8001bdc:	4645      	mov	r5, r8
 8001bde:	46de      	mov	lr, fp
 8001be0:	4657      	mov	r7, sl
 8001be2:	b5e0      	push	{r5, r6, r7, lr}
 8001be4:	b085      	sub	sp, #20
 8001be6:	9000      	str	r0, [sp, #0]
 8001be8:	9101      	str	r1, [sp, #4]
 8001bea:	030c      	lsls	r4, r1, #12
 8001bec:	004f      	lsls	r7, r1, #1
 8001bee:	0fce      	lsrs	r6, r1, #31
 8001bf0:	0a61      	lsrs	r1, r4, #9
 8001bf2:	9c00      	ldr	r4, [sp, #0]
 8001bf4:	46b0      	mov	r8, r6
 8001bf6:	0f64      	lsrs	r4, r4, #29
 8001bf8:	430c      	orrs	r4, r1
 8001bfa:	9900      	ldr	r1, [sp, #0]
 8001bfc:	0d7f      	lsrs	r7, r7, #21
 8001bfe:	00c8      	lsls	r0, r1, #3
 8001c00:	0011      	movs	r1, r2
 8001c02:	001a      	movs	r2, r3
 8001c04:	031b      	lsls	r3, r3, #12
 8001c06:	469c      	mov	ip, r3
 8001c08:	9100      	str	r1, [sp, #0]
 8001c0a:	9201      	str	r2, [sp, #4]
 8001c0c:	0051      	lsls	r1, r2, #1
 8001c0e:	0d4b      	lsrs	r3, r1, #21
 8001c10:	4699      	mov	r9, r3
 8001c12:	9b01      	ldr	r3, [sp, #4]
 8001c14:	9d00      	ldr	r5, [sp, #0]
 8001c16:	0fd9      	lsrs	r1, r3, #31
 8001c18:	4663      	mov	r3, ip
 8001c1a:	0f6a      	lsrs	r2, r5, #29
 8001c1c:	0a5b      	lsrs	r3, r3, #9
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	00ea      	lsls	r2, r5, #3
 8001c22:	4694      	mov	ip, r2
 8001c24:	4693      	mov	fp, r2
 8001c26:	4ac1      	ldr	r2, [pc, #772]	@ (8001f2c <__aeabi_dsub+0x354>)
 8001c28:	9003      	str	r0, [sp, #12]
 8001c2a:	9302      	str	r3, [sp, #8]
 8001c2c:	4591      	cmp	r9, r2
 8001c2e:	d100      	bne.n	8001c32 <__aeabi_dsub+0x5a>
 8001c30:	e0cd      	b.n	8001dce <__aeabi_dsub+0x1f6>
 8001c32:	2501      	movs	r5, #1
 8001c34:	4069      	eors	r1, r5
 8001c36:	464d      	mov	r5, r9
 8001c38:	1b7d      	subs	r5, r7, r5
 8001c3a:	46aa      	mov	sl, r5
 8001c3c:	428e      	cmp	r6, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x6a>
 8001c40:	e080      	b.n	8001d44 <__aeabi_dsub+0x16c>
 8001c42:	2d00      	cmp	r5, #0
 8001c44:	dc00      	bgt.n	8001c48 <__aeabi_dsub+0x70>
 8001c46:	e335      	b.n	80022b4 <__aeabi_dsub+0x6dc>
 8001c48:	4649      	mov	r1, r9
 8001c4a:	2900      	cmp	r1, #0
 8001c4c:	d100      	bne.n	8001c50 <__aeabi_dsub+0x78>
 8001c4e:	e0df      	b.n	8001e10 <__aeabi_dsub+0x238>
 8001c50:	4297      	cmp	r7, r2
 8001c52:	d100      	bne.n	8001c56 <__aeabi_dsub+0x7e>
 8001c54:	e194      	b.n	8001f80 <__aeabi_dsub+0x3a8>
 8001c56:	4652      	mov	r2, sl
 8001c58:	2501      	movs	r5, #1
 8001c5a:	2a38      	cmp	r2, #56	@ 0x38
 8001c5c:	dc19      	bgt.n	8001c92 <__aeabi_dsub+0xba>
 8001c5e:	2280      	movs	r2, #128	@ 0x80
 8001c60:	9b02      	ldr	r3, [sp, #8]
 8001c62:	0412      	lsls	r2, r2, #16
 8001c64:	4313      	orrs	r3, r2
 8001c66:	9302      	str	r3, [sp, #8]
 8001c68:	4652      	mov	r2, sl
 8001c6a:	2a1f      	cmp	r2, #31
 8001c6c:	dd00      	ble.n	8001c70 <__aeabi_dsub+0x98>
 8001c6e:	e1e3      	b.n	8002038 <__aeabi_dsub+0x460>
 8001c70:	4653      	mov	r3, sl
 8001c72:	2220      	movs	r2, #32
 8001c74:	4661      	mov	r1, ip
 8001c76:	9d02      	ldr	r5, [sp, #8]
 8001c78:	1ad2      	subs	r2, r2, r3
 8001c7a:	4095      	lsls	r5, r2
 8001c7c:	40d9      	lsrs	r1, r3
 8001c7e:	430d      	orrs	r5, r1
 8001c80:	4661      	mov	r1, ip
 8001c82:	4091      	lsls	r1, r2
 8001c84:	000a      	movs	r2, r1
 8001c86:	1e51      	subs	r1, r2, #1
 8001c88:	418a      	sbcs	r2, r1
 8001c8a:	4315      	orrs	r5, r2
 8001c8c:	9a02      	ldr	r2, [sp, #8]
 8001c8e:	40da      	lsrs	r2, r3
 8001c90:	1aa4      	subs	r4, r4, r2
 8001c92:	1b45      	subs	r5, r0, r5
 8001c94:	42a8      	cmp	r0, r5
 8001c96:	4180      	sbcs	r0, r0
 8001c98:	4240      	negs	r0, r0
 8001c9a:	1a24      	subs	r4, r4, r0
 8001c9c:	0223      	lsls	r3, r4, #8
 8001c9e:	d400      	bmi.n	8001ca2 <__aeabi_dsub+0xca>
 8001ca0:	e13d      	b.n	8001f1e <__aeabi_dsub+0x346>
 8001ca2:	0264      	lsls	r4, r4, #9
 8001ca4:	0a64      	lsrs	r4, r4, #9
 8001ca6:	2c00      	cmp	r4, #0
 8001ca8:	d100      	bne.n	8001cac <__aeabi_dsub+0xd4>
 8001caa:	e147      	b.n	8001f3c <__aeabi_dsub+0x364>
 8001cac:	0020      	movs	r0, r4
 8001cae:	f7fe fbfb 	bl	80004a8 <__clzsi2>
 8001cb2:	0003      	movs	r3, r0
 8001cb4:	3b08      	subs	r3, #8
 8001cb6:	2120      	movs	r1, #32
 8001cb8:	0028      	movs	r0, r5
 8001cba:	1aca      	subs	r2, r1, r3
 8001cbc:	40d0      	lsrs	r0, r2
 8001cbe:	409c      	lsls	r4, r3
 8001cc0:	0002      	movs	r2, r0
 8001cc2:	409d      	lsls	r5, r3
 8001cc4:	4322      	orrs	r2, r4
 8001cc6:	429f      	cmp	r7, r3
 8001cc8:	dd00      	ble.n	8001ccc <__aeabi_dsub+0xf4>
 8001cca:	e177      	b.n	8001fbc <__aeabi_dsub+0x3e4>
 8001ccc:	1bd8      	subs	r0, r3, r7
 8001cce:	3001      	adds	r0, #1
 8001cd0:	1a09      	subs	r1, r1, r0
 8001cd2:	002c      	movs	r4, r5
 8001cd4:	408d      	lsls	r5, r1
 8001cd6:	40c4      	lsrs	r4, r0
 8001cd8:	1e6b      	subs	r3, r5, #1
 8001cda:	419d      	sbcs	r5, r3
 8001cdc:	0013      	movs	r3, r2
 8001cde:	40c2      	lsrs	r2, r0
 8001ce0:	408b      	lsls	r3, r1
 8001ce2:	4325      	orrs	r5, r4
 8001ce4:	2700      	movs	r7, #0
 8001ce6:	0014      	movs	r4, r2
 8001ce8:	431d      	orrs	r5, r3
 8001cea:	076b      	lsls	r3, r5, #29
 8001cec:	d009      	beq.n	8001d02 <__aeabi_dsub+0x12a>
 8001cee:	230f      	movs	r3, #15
 8001cf0:	402b      	ands	r3, r5
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d005      	beq.n	8001d02 <__aeabi_dsub+0x12a>
 8001cf6:	1d2b      	adds	r3, r5, #4
 8001cf8:	42ab      	cmp	r3, r5
 8001cfa:	41ad      	sbcs	r5, r5
 8001cfc:	426d      	negs	r5, r5
 8001cfe:	1964      	adds	r4, r4, r5
 8001d00:	001d      	movs	r5, r3
 8001d02:	0223      	lsls	r3, r4, #8
 8001d04:	d400      	bmi.n	8001d08 <__aeabi_dsub+0x130>
 8001d06:	e140      	b.n	8001f8a <__aeabi_dsub+0x3b2>
 8001d08:	4a88      	ldr	r2, [pc, #544]	@ (8001f2c <__aeabi_dsub+0x354>)
 8001d0a:	3701      	adds	r7, #1
 8001d0c:	4297      	cmp	r7, r2
 8001d0e:	d100      	bne.n	8001d12 <__aeabi_dsub+0x13a>
 8001d10:	e101      	b.n	8001f16 <__aeabi_dsub+0x33e>
 8001d12:	2601      	movs	r6, #1
 8001d14:	4643      	mov	r3, r8
 8001d16:	4986      	ldr	r1, [pc, #536]	@ (8001f30 <__aeabi_dsub+0x358>)
 8001d18:	08ed      	lsrs	r5, r5, #3
 8001d1a:	4021      	ands	r1, r4
 8001d1c:	074a      	lsls	r2, r1, #29
 8001d1e:	432a      	orrs	r2, r5
 8001d20:	057c      	lsls	r4, r7, #21
 8001d22:	024d      	lsls	r5, r1, #9
 8001d24:	0b2d      	lsrs	r5, r5, #12
 8001d26:	0d64      	lsrs	r4, r4, #21
 8001d28:	401e      	ands	r6, r3
 8001d2a:	0524      	lsls	r4, r4, #20
 8001d2c:	432c      	orrs	r4, r5
 8001d2e:	07f6      	lsls	r6, r6, #31
 8001d30:	4334      	orrs	r4, r6
 8001d32:	0010      	movs	r0, r2
 8001d34:	0021      	movs	r1, r4
 8001d36:	b005      	add	sp, #20
 8001d38:	bcf0      	pop	{r4, r5, r6, r7}
 8001d3a:	46bb      	mov	fp, r7
 8001d3c:	46b2      	mov	sl, r6
 8001d3e:	46a9      	mov	r9, r5
 8001d40:	46a0      	mov	r8, r4
 8001d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d44:	2d00      	cmp	r5, #0
 8001d46:	dc00      	bgt.n	8001d4a <__aeabi_dsub+0x172>
 8001d48:	e2d0      	b.n	80022ec <__aeabi_dsub+0x714>
 8001d4a:	4649      	mov	r1, r9
 8001d4c:	2900      	cmp	r1, #0
 8001d4e:	d000      	beq.n	8001d52 <__aeabi_dsub+0x17a>
 8001d50:	e0d4      	b.n	8001efc <__aeabi_dsub+0x324>
 8001d52:	4661      	mov	r1, ip
 8001d54:	9b02      	ldr	r3, [sp, #8]
 8001d56:	4319      	orrs	r1, r3
 8001d58:	d100      	bne.n	8001d5c <__aeabi_dsub+0x184>
 8001d5a:	e12b      	b.n	8001fb4 <__aeabi_dsub+0x3dc>
 8001d5c:	1e69      	subs	r1, r5, #1
 8001d5e:	2d01      	cmp	r5, #1
 8001d60:	d100      	bne.n	8001d64 <__aeabi_dsub+0x18c>
 8001d62:	e1d9      	b.n	8002118 <__aeabi_dsub+0x540>
 8001d64:	4295      	cmp	r5, r2
 8001d66:	d100      	bne.n	8001d6a <__aeabi_dsub+0x192>
 8001d68:	e10a      	b.n	8001f80 <__aeabi_dsub+0x3a8>
 8001d6a:	2501      	movs	r5, #1
 8001d6c:	2938      	cmp	r1, #56	@ 0x38
 8001d6e:	dc17      	bgt.n	8001da0 <__aeabi_dsub+0x1c8>
 8001d70:	468a      	mov	sl, r1
 8001d72:	4653      	mov	r3, sl
 8001d74:	2b1f      	cmp	r3, #31
 8001d76:	dd00      	ble.n	8001d7a <__aeabi_dsub+0x1a2>
 8001d78:	e1e7      	b.n	800214a <__aeabi_dsub+0x572>
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	1ad2      	subs	r2, r2, r3
 8001d7e:	9b02      	ldr	r3, [sp, #8]
 8001d80:	4661      	mov	r1, ip
 8001d82:	4093      	lsls	r3, r2
 8001d84:	001d      	movs	r5, r3
 8001d86:	4653      	mov	r3, sl
 8001d88:	40d9      	lsrs	r1, r3
 8001d8a:	4663      	mov	r3, ip
 8001d8c:	4093      	lsls	r3, r2
 8001d8e:	001a      	movs	r2, r3
 8001d90:	430d      	orrs	r5, r1
 8001d92:	1e51      	subs	r1, r2, #1
 8001d94:	418a      	sbcs	r2, r1
 8001d96:	4653      	mov	r3, sl
 8001d98:	4315      	orrs	r5, r2
 8001d9a:	9a02      	ldr	r2, [sp, #8]
 8001d9c:	40da      	lsrs	r2, r3
 8001d9e:	18a4      	adds	r4, r4, r2
 8001da0:	182d      	adds	r5, r5, r0
 8001da2:	4285      	cmp	r5, r0
 8001da4:	4180      	sbcs	r0, r0
 8001da6:	4240      	negs	r0, r0
 8001da8:	1824      	adds	r4, r4, r0
 8001daa:	0223      	lsls	r3, r4, #8
 8001dac:	d400      	bmi.n	8001db0 <__aeabi_dsub+0x1d8>
 8001dae:	e0b6      	b.n	8001f1e <__aeabi_dsub+0x346>
 8001db0:	4b5e      	ldr	r3, [pc, #376]	@ (8001f2c <__aeabi_dsub+0x354>)
 8001db2:	3701      	adds	r7, #1
 8001db4:	429f      	cmp	r7, r3
 8001db6:	d100      	bne.n	8001dba <__aeabi_dsub+0x1e2>
 8001db8:	e0ad      	b.n	8001f16 <__aeabi_dsub+0x33e>
 8001dba:	2101      	movs	r1, #1
 8001dbc:	4b5c      	ldr	r3, [pc, #368]	@ (8001f30 <__aeabi_dsub+0x358>)
 8001dbe:	086a      	lsrs	r2, r5, #1
 8001dc0:	401c      	ands	r4, r3
 8001dc2:	4029      	ands	r1, r5
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	07e5      	lsls	r5, r4, #31
 8001dc8:	4315      	orrs	r5, r2
 8001dca:	0864      	lsrs	r4, r4, #1
 8001dcc:	e78d      	b.n	8001cea <__aeabi_dsub+0x112>
 8001dce:	4a59      	ldr	r2, [pc, #356]	@ (8001f34 <__aeabi_dsub+0x35c>)
 8001dd0:	9b02      	ldr	r3, [sp, #8]
 8001dd2:	4692      	mov	sl, r2
 8001dd4:	4662      	mov	r2, ip
 8001dd6:	44ba      	add	sl, r7
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	d02c      	beq.n	8001e36 <__aeabi_dsub+0x25e>
 8001ddc:	428e      	cmp	r6, r1
 8001dde:	d02e      	beq.n	8001e3e <__aeabi_dsub+0x266>
 8001de0:	4652      	mov	r2, sl
 8001de2:	2a00      	cmp	r2, #0
 8001de4:	d060      	beq.n	8001ea8 <__aeabi_dsub+0x2d0>
 8001de6:	2f00      	cmp	r7, #0
 8001de8:	d100      	bne.n	8001dec <__aeabi_dsub+0x214>
 8001dea:	e0db      	b.n	8001fa4 <__aeabi_dsub+0x3cc>
 8001dec:	4663      	mov	r3, ip
 8001dee:	000e      	movs	r6, r1
 8001df0:	9c02      	ldr	r4, [sp, #8]
 8001df2:	08d8      	lsrs	r0, r3, #3
 8001df4:	0762      	lsls	r2, r4, #29
 8001df6:	4302      	orrs	r2, r0
 8001df8:	08e4      	lsrs	r4, r4, #3
 8001dfa:	0013      	movs	r3, r2
 8001dfc:	4323      	orrs	r3, r4
 8001dfe:	d100      	bne.n	8001e02 <__aeabi_dsub+0x22a>
 8001e00:	e254      	b.n	80022ac <__aeabi_dsub+0x6d4>
 8001e02:	2580      	movs	r5, #128	@ 0x80
 8001e04:	032d      	lsls	r5, r5, #12
 8001e06:	4325      	orrs	r5, r4
 8001e08:	032d      	lsls	r5, r5, #12
 8001e0a:	4c48      	ldr	r4, [pc, #288]	@ (8001f2c <__aeabi_dsub+0x354>)
 8001e0c:	0b2d      	lsrs	r5, r5, #12
 8001e0e:	e78c      	b.n	8001d2a <__aeabi_dsub+0x152>
 8001e10:	4661      	mov	r1, ip
 8001e12:	9b02      	ldr	r3, [sp, #8]
 8001e14:	4319      	orrs	r1, r3
 8001e16:	d100      	bne.n	8001e1a <__aeabi_dsub+0x242>
 8001e18:	e0cc      	b.n	8001fb4 <__aeabi_dsub+0x3dc>
 8001e1a:	0029      	movs	r1, r5
 8001e1c:	3901      	subs	r1, #1
 8001e1e:	2d01      	cmp	r5, #1
 8001e20:	d100      	bne.n	8001e24 <__aeabi_dsub+0x24c>
 8001e22:	e188      	b.n	8002136 <__aeabi_dsub+0x55e>
 8001e24:	4295      	cmp	r5, r2
 8001e26:	d100      	bne.n	8001e2a <__aeabi_dsub+0x252>
 8001e28:	e0aa      	b.n	8001f80 <__aeabi_dsub+0x3a8>
 8001e2a:	2501      	movs	r5, #1
 8001e2c:	2938      	cmp	r1, #56	@ 0x38
 8001e2e:	dd00      	ble.n	8001e32 <__aeabi_dsub+0x25a>
 8001e30:	e72f      	b.n	8001c92 <__aeabi_dsub+0xba>
 8001e32:	468a      	mov	sl, r1
 8001e34:	e718      	b.n	8001c68 <__aeabi_dsub+0x90>
 8001e36:	2201      	movs	r2, #1
 8001e38:	4051      	eors	r1, r2
 8001e3a:	428e      	cmp	r6, r1
 8001e3c:	d1d0      	bne.n	8001de0 <__aeabi_dsub+0x208>
 8001e3e:	4653      	mov	r3, sl
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d100      	bne.n	8001e46 <__aeabi_dsub+0x26e>
 8001e44:	e0be      	b.n	8001fc4 <__aeabi_dsub+0x3ec>
 8001e46:	2f00      	cmp	r7, #0
 8001e48:	d000      	beq.n	8001e4c <__aeabi_dsub+0x274>
 8001e4a:	e138      	b.n	80020be <__aeabi_dsub+0x4e6>
 8001e4c:	46ca      	mov	sl, r9
 8001e4e:	0022      	movs	r2, r4
 8001e50:	4302      	orrs	r2, r0
 8001e52:	d100      	bne.n	8001e56 <__aeabi_dsub+0x27e>
 8001e54:	e1e2      	b.n	800221c <__aeabi_dsub+0x644>
 8001e56:	4653      	mov	r3, sl
 8001e58:	1e59      	subs	r1, r3, #1
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d100      	bne.n	8001e60 <__aeabi_dsub+0x288>
 8001e5e:	e20d      	b.n	800227c <__aeabi_dsub+0x6a4>
 8001e60:	4a32      	ldr	r2, [pc, #200]	@ (8001f2c <__aeabi_dsub+0x354>)
 8001e62:	4592      	cmp	sl, r2
 8001e64:	d100      	bne.n	8001e68 <__aeabi_dsub+0x290>
 8001e66:	e1d2      	b.n	800220e <__aeabi_dsub+0x636>
 8001e68:	2701      	movs	r7, #1
 8001e6a:	2938      	cmp	r1, #56	@ 0x38
 8001e6c:	dc13      	bgt.n	8001e96 <__aeabi_dsub+0x2be>
 8001e6e:	291f      	cmp	r1, #31
 8001e70:	dd00      	ble.n	8001e74 <__aeabi_dsub+0x29c>
 8001e72:	e1ee      	b.n	8002252 <__aeabi_dsub+0x67a>
 8001e74:	2220      	movs	r2, #32
 8001e76:	9b02      	ldr	r3, [sp, #8]
 8001e78:	1a52      	subs	r2, r2, r1
 8001e7a:	0025      	movs	r5, r4
 8001e7c:	0007      	movs	r7, r0
 8001e7e:	469a      	mov	sl, r3
 8001e80:	40cc      	lsrs	r4, r1
 8001e82:	4090      	lsls	r0, r2
 8001e84:	4095      	lsls	r5, r2
 8001e86:	40cf      	lsrs	r7, r1
 8001e88:	44a2      	add	sl, r4
 8001e8a:	1e42      	subs	r2, r0, #1
 8001e8c:	4190      	sbcs	r0, r2
 8001e8e:	4653      	mov	r3, sl
 8001e90:	432f      	orrs	r7, r5
 8001e92:	4307      	orrs	r7, r0
 8001e94:	9302      	str	r3, [sp, #8]
 8001e96:	003d      	movs	r5, r7
 8001e98:	4465      	add	r5, ip
 8001e9a:	4565      	cmp	r5, ip
 8001e9c:	4192      	sbcs	r2, r2
 8001e9e:	9b02      	ldr	r3, [sp, #8]
 8001ea0:	4252      	negs	r2, r2
 8001ea2:	464f      	mov	r7, r9
 8001ea4:	18d4      	adds	r4, r2, r3
 8001ea6:	e780      	b.n	8001daa <__aeabi_dsub+0x1d2>
 8001ea8:	4a23      	ldr	r2, [pc, #140]	@ (8001f38 <__aeabi_dsub+0x360>)
 8001eaa:	1c7d      	adds	r5, r7, #1
 8001eac:	4215      	tst	r5, r2
 8001eae:	d000      	beq.n	8001eb2 <__aeabi_dsub+0x2da>
 8001eb0:	e0aa      	b.n	8002008 <__aeabi_dsub+0x430>
 8001eb2:	4662      	mov	r2, ip
 8001eb4:	0025      	movs	r5, r4
 8001eb6:	9b02      	ldr	r3, [sp, #8]
 8001eb8:	4305      	orrs	r5, r0
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	2f00      	cmp	r7, #0
 8001ebe:	d000      	beq.n	8001ec2 <__aeabi_dsub+0x2ea>
 8001ec0:	e0f5      	b.n	80020ae <__aeabi_dsub+0x4d6>
 8001ec2:	2d00      	cmp	r5, #0
 8001ec4:	d100      	bne.n	8001ec8 <__aeabi_dsub+0x2f0>
 8001ec6:	e16b      	b.n	80021a0 <__aeabi_dsub+0x5c8>
 8001ec8:	2a00      	cmp	r2, #0
 8001eca:	d100      	bne.n	8001ece <__aeabi_dsub+0x2f6>
 8001ecc:	e152      	b.n	8002174 <__aeabi_dsub+0x59c>
 8001ece:	4663      	mov	r3, ip
 8001ed0:	1ac5      	subs	r5, r0, r3
 8001ed2:	9b02      	ldr	r3, [sp, #8]
 8001ed4:	1ae2      	subs	r2, r4, r3
 8001ed6:	42a8      	cmp	r0, r5
 8001ed8:	419b      	sbcs	r3, r3
 8001eda:	425b      	negs	r3, r3
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	021a      	lsls	r2, r3, #8
 8001ee0:	d400      	bmi.n	8001ee4 <__aeabi_dsub+0x30c>
 8001ee2:	e1d5      	b.n	8002290 <__aeabi_dsub+0x6b8>
 8001ee4:	4663      	mov	r3, ip
 8001ee6:	1a1d      	subs	r5, r3, r0
 8001ee8:	45ac      	cmp	ip, r5
 8001eea:	4192      	sbcs	r2, r2
 8001eec:	2601      	movs	r6, #1
 8001eee:	9b02      	ldr	r3, [sp, #8]
 8001ef0:	4252      	negs	r2, r2
 8001ef2:	1b1c      	subs	r4, r3, r4
 8001ef4:	4688      	mov	r8, r1
 8001ef6:	1aa4      	subs	r4, r4, r2
 8001ef8:	400e      	ands	r6, r1
 8001efa:	e6f6      	b.n	8001cea <__aeabi_dsub+0x112>
 8001efc:	4297      	cmp	r7, r2
 8001efe:	d03f      	beq.n	8001f80 <__aeabi_dsub+0x3a8>
 8001f00:	4652      	mov	r2, sl
 8001f02:	2501      	movs	r5, #1
 8001f04:	2a38      	cmp	r2, #56	@ 0x38
 8001f06:	dd00      	ble.n	8001f0a <__aeabi_dsub+0x332>
 8001f08:	e74a      	b.n	8001da0 <__aeabi_dsub+0x1c8>
 8001f0a:	2280      	movs	r2, #128	@ 0x80
 8001f0c:	9b02      	ldr	r3, [sp, #8]
 8001f0e:	0412      	lsls	r2, r2, #16
 8001f10:	4313      	orrs	r3, r2
 8001f12:	9302      	str	r3, [sp, #8]
 8001f14:	e72d      	b.n	8001d72 <__aeabi_dsub+0x19a>
 8001f16:	003c      	movs	r4, r7
 8001f18:	2500      	movs	r5, #0
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	e705      	b.n	8001d2a <__aeabi_dsub+0x152>
 8001f1e:	2307      	movs	r3, #7
 8001f20:	402b      	ands	r3, r5
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d000      	beq.n	8001f28 <__aeabi_dsub+0x350>
 8001f26:	e6e2      	b.n	8001cee <__aeabi_dsub+0x116>
 8001f28:	e06b      	b.n	8002002 <__aeabi_dsub+0x42a>
 8001f2a:	46c0      	nop			@ (mov r8, r8)
 8001f2c:	000007ff 	.word	0x000007ff
 8001f30:	ff7fffff 	.word	0xff7fffff
 8001f34:	fffff801 	.word	0xfffff801
 8001f38:	000007fe 	.word	0x000007fe
 8001f3c:	0028      	movs	r0, r5
 8001f3e:	f7fe fab3 	bl	80004a8 <__clzsi2>
 8001f42:	0003      	movs	r3, r0
 8001f44:	3318      	adds	r3, #24
 8001f46:	2b1f      	cmp	r3, #31
 8001f48:	dc00      	bgt.n	8001f4c <__aeabi_dsub+0x374>
 8001f4a:	e6b4      	b.n	8001cb6 <__aeabi_dsub+0xde>
 8001f4c:	002a      	movs	r2, r5
 8001f4e:	3808      	subs	r0, #8
 8001f50:	4082      	lsls	r2, r0
 8001f52:	429f      	cmp	r7, r3
 8001f54:	dd00      	ble.n	8001f58 <__aeabi_dsub+0x380>
 8001f56:	e0b9      	b.n	80020cc <__aeabi_dsub+0x4f4>
 8001f58:	1bdb      	subs	r3, r3, r7
 8001f5a:	1c58      	adds	r0, r3, #1
 8001f5c:	281f      	cmp	r0, #31
 8001f5e:	dc00      	bgt.n	8001f62 <__aeabi_dsub+0x38a>
 8001f60:	e1a0      	b.n	80022a4 <__aeabi_dsub+0x6cc>
 8001f62:	0015      	movs	r5, r2
 8001f64:	3b1f      	subs	r3, #31
 8001f66:	40dd      	lsrs	r5, r3
 8001f68:	2820      	cmp	r0, #32
 8001f6a:	d005      	beq.n	8001f78 <__aeabi_dsub+0x3a0>
 8001f6c:	2340      	movs	r3, #64	@ 0x40
 8001f6e:	1a1b      	subs	r3, r3, r0
 8001f70:	409a      	lsls	r2, r3
 8001f72:	1e53      	subs	r3, r2, #1
 8001f74:	419a      	sbcs	r2, r3
 8001f76:	4315      	orrs	r5, r2
 8001f78:	2307      	movs	r3, #7
 8001f7a:	2700      	movs	r7, #0
 8001f7c:	402b      	ands	r3, r5
 8001f7e:	e7d0      	b.n	8001f22 <__aeabi_dsub+0x34a>
 8001f80:	08c0      	lsrs	r0, r0, #3
 8001f82:	0762      	lsls	r2, r4, #29
 8001f84:	4302      	orrs	r2, r0
 8001f86:	08e4      	lsrs	r4, r4, #3
 8001f88:	e737      	b.n	8001dfa <__aeabi_dsub+0x222>
 8001f8a:	08ea      	lsrs	r2, r5, #3
 8001f8c:	0763      	lsls	r3, r4, #29
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	4bd3      	ldr	r3, [pc, #844]	@ (80022e0 <__aeabi_dsub+0x708>)
 8001f92:	08e4      	lsrs	r4, r4, #3
 8001f94:	429f      	cmp	r7, r3
 8001f96:	d100      	bne.n	8001f9a <__aeabi_dsub+0x3c2>
 8001f98:	e72f      	b.n	8001dfa <__aeabi_dsub+0x222>
 8001f9a:	0324      	lsls	r4, r4, #12
 8001f9c:	0b25      	lsrs	r5, r4, #12
 8001f9e:	057c      	lsls	r4, r7, #21
 8001fa0:	0d64      	lsrs	r4, r4, #21
 8001fa2:	e6c2      	b.n	8001d2a <__aeabi_dsub+0x152>
 8001fa4:	46ca      	mov	sl, r9
 8001fa6:	0022      	movs	r2, r4
 8001fa8:	4302      	orrs	r2, r0
 8001faa:	d158      	bne.n	800205e <__aeabi_dsub+0x486>
 8001fac:	4663      	mov	r3, ip
 8001fae:	000e      	movs	r6, r1
 8001fb0:	9c02      	ldr	r4, [sp, #8]
 8001fb2:	9303      	str	r3, [sp, #12]
 8001fb4:	9b03      	ldr	r3, [sp, #12]
 8001fb6:	4657      	mov	r7, sl
 8001fb8:	08da      	lsrs	r2, r3, #3
 8001fba:	e7e7      	b.n	8001f8c <__aeabi_dsub+0x3b4>
 8001fbc:	4cc9      	ldr	r4, [pc, #804]	@ (80022e4 <__aeabi_dsub+0x70c>)
 8001fbe:	1aff      	subs	r7, r7, r3
 8001fc0:	4014      	ands	r4, r2
 8001fc2:	e692      	b.n	8001cea <__aeabi_dsub+0x112>
 8001fc4:	4dc8      	ldr	r5, [pc, #800]	@ (80022e8 <__aeabi_dsub+0x710>)
 8001fc6:	1c7a      	adds	r2, r7, #1
 8001fc8:	422a      	tst	r2, r5
 8001fca:	d000      	beq.n	8001fce <__aeabi_dsub+0x3f6>
 8001fcc:	e084      	b.n	80020d8 <__aeabi_dsub+0x500>
 8001fce:	0022      	movs	r2, r4
 8001fd0:	4302      	orrs	r2, r0
 8001fd2:	2f00      	cmp	r7, #0
 8001fd4:	d000      	beq.n	8001fd8 <__aeabi_dsub+0x400>
 8001fd6:	e0ef      	b.n	80021b8 <__aeabi_dsub+0x5e0>
 8001fd8:	2a00      	cmp	r2, #0
 8001fda:	d100      	bne.n	8001fde <__aeabi_dsub+0x406>
 8001fdc:	e0e5      	b.n	80021aa <__aeabi_dsub+0x5d2>
 8001fde:	4662      	mov	r2, ip
 8001fe0:	9902      	ldr	r1, [sp, #8]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	d100      	bne.n	8001fe8 <__aeabi_dsub+0x410>
 8001fe6:	e0c5      	b.n	8002174 <__aeabi_dsub+0x59c>
 8001fe8:	4663      	mov	r3, ip
 8001fea:	18c5      	adds	r5, r0, r3
 8001fec:	468c      	mov	ip, r1
 8001fee:	4285      	cmp	r5, r0
 8001ff0:	4180      	sbcs	r0, r0
 8001ff2:	4464      	add	r4, ip
 8001ff4:	4240      	negs	r0, r0
 8001ff6:	1824      	adds	r4, r4, r0
 8001ff8:	0223      	lsls	r3, r4, #8
 8001ffa:	d502      	bpl.n	8002002 <__aeabi_dsub+0x42a>
 8001ffc:	4bb9      	ldr	r3, [pc, #740]	@ (80022e4 <__aeabi_dsub+0x70c>)
 8001ffe:	3701      	adds	r7, #1
 8002000:	401c      	ands	r4, r3
 8002002:	46ba      	mov	sl, r7
 8002004:	9503      	str	r5, [sp, #12]
 8002006:	e7d5      	b.n	8001fb4 <__aeabi_dsub+0x3dc>
 8002008:	4662      	mov	r2, ip
 800200a:	1a85      	subs	r5, r0, r2
 800200c:	42a8      	cmp	r0, r5
 800200e:	4192      	sbcs	r2, r2
 8002010:	4252      	negs	r2, r2
 8002012:	4691      	mov	r9, r2
 8002014:	9b02      	ldr	r3, [sp, #8]
 8002016:	1ae3      	subs	r3, r4, r3
 8002018:	001a      	movs	r2, r3
 800201a:	464b      	mov	r3, r9
 800201c:	1ad2      	subs	r2, r2, r3
 800201e:	0013      	movs	r3, r2
 8002020:	4691      	mov	r9, r2
 8002022:	021a      	lsls	r2, r3, #8
 8002024:	d46c      	bmi.n	8002100 <__aeabi_dsub+0x528>
 8002026:	464a      	mov	r2, r9
 8002028:	464c      	mov	r4, r9
 800202a:	432a      	orrs	r2, r5
 800202c:	d000      	beq.n	8002030 <__aeabi_dsub+0x458>
 800202e:	e63a      	b.n	8001ca6 <__aeabi_dsub+0xce>
 8002030:	2600      	movs	r6, #0
 8002032:	2400      	movs	r4, #0
 8002034:	2500      	movs	r5, #0
 8002036:	e678      	b.n	8001d2a <__aeabi_dsub+0x152>
 8002038:	9902      	ldr	r1, [sp, #8]
 800203a:	4653      	mov	r3, sl
 800203c:	000d      	movs	r5, r1
 800203e:	3a20      	subs	r2, #32
 8002040:	40d5      	lsrs	r5, r2
 8002042:	2b20      	cmp	r3, #32
 8002044:	d006      	beq.n	8002054 <__aeabi_dsub+0x47c>
 8002046:	2240      	movs	r2, #64	@ 0x40
 8002048:	1ad2      	subs	r2, r2, r3
 800204a:	000b      	movs	r3, r1
 800204c:	4093      	lsls	r3, r2
 800204e:	4662      	mov	r2, ip
 8002050:	431a      	orrs	r2, r3
 8002052:	4693      	mov	fp, r2
 8002054:	465b      	mov	r3, fp
 8002056:	1e5a      	subs	r2, r3, #1
 8002058:	4193      	sbcs	r3, r2
 800205a:	431d      	orrs	r5, r3
 800205c:	e619      	b.n	8001c92 <__aeabi_dsub+0xba>
 800205e:	4653      	mov	r3, sl
 8002060:	1e5a      	subs	r2, r3, #1
 8002062:	2b01      	cmp	r3, #1
 8002064:	d100      	bne.n	8002068 <__aeabi_dsub+0x490>
 8002066:	e0c6      	b.n	80021f6 <__aeabi_dsub+0x61e>
 8002068:	4e9d      	ldr	r6, [pc, #628]	@ (80022e0 <__aeabi_dsub+0x708>)
 800206a:	45b2      	cmp	sl, r6
 800206c:	d100      	bne.n	8002070 <__aeabi_dsub+0x498>
 800206e:	e6bd      	b.n	8001dec <__aeabi_dsub+0x214>
 8002070:	4688      	mov	r8, r1
 8002072:	000e      	movs	r6, r1
 8002074:	2501      	movs	r5, #1
 8002076:	2a38      	cmp	r2, #56	@ 0x38
 8002078:	dc10      	bgt.n	800209c <__aeabi_dsub+0x4c4>
 800207a:	2a1f      	cmp	r2, #31
 800207c:	dc7f      	bgt.n	800217e <__aeabi_dsub+0x5a6>
 800207e:	2120      	movs	r1, #32
 8002080:	0025      	movs	r5, r4
 8002082:	1a89      	subs	r1, r1, r2
 8002084:	0007      	movs	r7, r0
 8002086:	4088      	lsls	r0, r1
 8002088:	408d      	lsls	r5, r1
 800208a:	40d7      	lsrs	r7, r2
 800208c:	40d4      	lsrs	r4, r2
 800208e:	1e41      	subs	r1, r0, #1
 8002090:	4188      	sbcs	r0, r1
 8002092:	9b02      	ldr	r3, [sp, #8]
 8002094:	433d      	orrs	r5, r7
 8002096:	1b1b      	subs	r3, r3, r4
 8002098:	4305      	orrs	r5, r0
 800209a:	9302      	str	r3, [sp, #8]
 800209c:	4662      	mov	r2, ip
 800209e:	1b55      	subs	r5, r2, r5
 80020a0:	45ac      	cmp	ip, r5
 80020a2:	4192      	sbcs	r2, r2
 80020a4:	9b02      	ldr	r3, [sp, #8]
 80020a6:	4252      	negs	r2, r2
 80020a8:	464f      	mov	r7, r9
 80020aa:	1a9c      	subs	r4, r3, r2
 80020ac:	e5f6      	b.n	8001c9c <__aeabi_dsub+0xc4>
 80020ae:	2d00      	cmp	r5, #0
 80020b0:	d000      	beq.n	80020b4 <__aeabi_dsub+0x4dc>
 80020b2:	e0b7      	b.n	8002224 <__aeabi_dsub+0x64c>
 80020b4:	2a00      	cmp	r2, #0
 80020b6:	d100      	bne.n	80020ba <__aeabi_dsub+0x4e2>
 80020b8:	e0f0      	b.n	800229c <__aeabi_dsub+0x6c4>
 80020ba:	2601      	movs	r6, #1
 80020bc:	400e      	ands	r6, r1
 80020be:	4663      	mov	r3, ip
 80020c0:	9802      	ldr	r0, [sp, #8]
 80020c2:	08d9      	lsrs	r1, r3, #3
 80020c4:	0742      	lsls	r2, r0, #29
 80020c6:	430a      	orrs	r2, r1
 80020c8:	08c4      	lsrs	r4, r0, #3
 80020ca:	e696      	b.n	8001dfa <__aeabi_dsub+0x222>
 80020cc:	4c85      	ldr	r4, [pc, #532]	@ (80022e4 <__aeabi_dsub+0x70c>)
 80020ce:	1aff      	subs	r7, r7, r3
 80020d0:	4014      	ands	r4, r2
 80020d2:	0762      	lsls	r2, r4, #29
 80020d4:	08e4      	lsrs	r4, r4, #3
 80020d6:	e760      	b.n	8001f9a <__aeabi_dsub+0x3c2>
 80020d8:	4981      	ldr	r1, [pc, #516]	@ (80022e0 <__aeabi_dsub+0x708>)
 80020da:	428a      	cmp	r2, r1
 80020dc:	d100      	bne.n	80020e0 <__aeabi_dsub+0x508>
 80020de:	e0c9      	b.n	8002274 <__aeabi_dsub+0x69c>
 80020e0:	4663      	mov	r3, ip
 80020e2:	18c1      	adds	r1, r0, r3
 80020e4:	4281      	cmp	r1, r0
 80020e6:	4180      	sbcs	r0, r0
 80020e8:	9b02      	ldr	r3, [sp, #8]
 80020ea:	4240      	negs	r0, r0
 80020ec:	18e3      	adds	r3, r4, r3
 80020ee:	181b      	adds	r3, r3, r0
 80020f0:	07dd      	lsls	r5, r3, #31
 80020f2:	085c      	lsrs	r4, r3, #1
 80020f4:	2307      	movs	r3, #7
 80020f6:	0849      	lsrs	r1, r1, #1
 80020f8:	430d      	orrs	r5, r1
 80020fa:	0017      	movs	r7, r2
 80020fc:	402b      	ands	r3, r5
 80020fe:	e710      	b.n	8001f22 <__aeabi_dsub+0x34a>
 8002100:	4663      	mov	r3, ip
 8002102:	1a1d      	subs	r5, r3, r0
 8002104:	45ac      	cmp	ip, r5
 8002106:	4192      	sbcs	r2, r2
 8002108:	2601      	movs	r6, #1
 800210a:	9b02      	ldr	r3, [sp, #8]
 800210c:	4252      	negs	r2, r2
 800210e:	1b1c      	subs	r4, r3, r4
 8002110:	4688      	mov	r8, r1
 8002112:	1aa4      	subs	r4, r4, r2
 8002114:	400e      	ands	r6, r1
 8002116:	e5c6      	b.n	8001ca6 <__aeabi_dsub+0xce>
 8002118:	4663      	mov	r3, ip
 800211a:	18c5      	adds	r5, r0, r3
 800211c:	9b02      	ldr	r3, [sp, #8]
 800211e:	4285      	cmp	r5, r0
 8002120:	4180      	sbcs	r0, r0
 8002122:	469c      	mov	ip, r3
 8002124:	4240      	negs	r0, r0
 8002126:	4464      	add	r4, ip
 8002128:	1824      	adds	r4, r4, r0
 800212a:	2701      	movs	r7, #1
 800212c:	0223      	lsls	r3, r4, #8
 800212e:	d400      	bmi.n	8002132 <__aeabi_dsub+0x55a>
 8002130:	e6f5      	b.n	8001f1e <__aeabi_dsub+0x346>
 8002132:	2702      	movs	r7, #2
 8002134:	e641      	b.n	8001dba <__aeabi_dsub+0x1e2>
 8002136:	4663      	mov	r3, ip
 8002138:	1ac5      	subs	r5, r0, r3
 800213a:	42a8      	cmp	r0, r5
 800213c:	4180      	sbcs	r0, r0
 800213e:	9b02      	ldr	r3, [sp, #8]
 8002140:	4240      	negs	r0, r0
 8002142:	1ae4      	subs	r4, r4, r3
 8002144:	2701      	movs	r7, #1
 8002146:	1a24      	subs	r4, r4, r0
 8002148:	e5a8      	b.n	8001c9c <__aeabi_dsub+0xc4>
 800214a:	9d02      	ldr	r5, [sp, #8]
 800214c:	4652      	mov	r2, sl
 800214e:	002b      	movs	r3, r5
 8002150:	3a20      	subs	r2, #32
 8002152:	40d3      	lsrs	r3, r2
 8002154:	0019      	movs	r1, r3
 8002156:	4653      	mov	r3, sl
 8002158:	2b20      	cmp	r3, #32
 800215a:	d006      	beq.n	800216a <__aeabi_dsub+0x592>
 800215c:	2240      	movs	r2, #64	@ 0x40
 800215e:	1ad2      	subs	r2, r2, r3
 8002160:	002b      	movs	r3, r5
 8002162:	4093      	lsls	r3, r2
 8002164:	4662      	mov	r2, ip
 8002166:	431a      	orrs	r2, r3
 8002168:	4693      	mov	fp, r2
 800216a:	465d      	mov	r5, fp
 800216c:	1e6b      	subs	r3, r5, #1
 800216e:	419d      	sbcs	r5, r3
 8002170:	430d      	orrs	r5, r1
 8002172:	e615      	b.n	8001da0 <__aeabi_dsub+0x1c8>
 8002174:	0762      	lsls	r2, r4, #29
 8002176:	08c0      	lsrs	r0, r0, #3
 8002178:	4302      	orrs	r2, r0
 800217a:	08e4      	lsrs	r4, r4, #3
 800217c:	e70d      	b.n	8001f9a <__aeabi_dsub+0x3c2>
 800217e:	0011      	movs	r1, r2
 8002180:	0027      	movs	r7, r4
 8002182:	3920      	subs	r1, #32
 8002184:	40cf      	lsrs	r7, r1
 8002186:	2a20      	cmp	r2, #32
 8002188:	d005      	beq.n	8002196 <__aeabi_dsub+0x5be>
 800218a:	2140      	movs	r1, #64	@ 0x40
 800218c:	1a8a      	subs	r2, r1, r2
 800218e:	4094      	lsls	r4, r2
 8002190:	0025      	movs	r5, r4
 8002192:	4305      	orrs	r5, r0
 8002194:	9503      	str	r5, [sp, #12]
 8002196:	9d03      	ldr	r5, [sp, #12]
 8002198:	1e6a      	subs	r2, r5, #1
 800219a:	4195      	sbcs	r5, r2
 800219c:	433d      	orrs	r5, r7
 800219e:	e77d      	b.n	800209c <__aeabi_dsub+0x4c4>
 80021a0:	2a00      	cmp	r2, #0
 80021a2:	d100      	bne.n	80021a6 <__aeabi_dsub+0x5ce>
 80021a4:	e744      	b.n	8002030 <__aeabi_dsub+0x458>
 80021a6:	2601      	movs	r6, #1
 80021a8:	400e      	ands	r6, r1
 80021aa:	4663      	mov	r3, ip
 80021ac:	08d9      	lsrs	r1, r3, #3
 80021ae:	9b02      	ldr	r3, [sp, #8]
 80021b0:	075a      	lsls	r2, r3, #29
 80021b2:	430a      	orrs	r2, r1
 80021b4:	08dc      	lsrs	r4, r3, #3
 80021b6:	e6f0      	b.n	8001f9a <__aeabi_dsub+0x3c2>
 80021b8:	2a00      	cmp	r2, #0
 80021ba:	d028      	beq.n	800220e <__aeabi_dsub+0x636>
 80021bc:	4662      	mov	r2, ip
 80021be:	9f02      	ldr	r7, [sp, #8]
 80021c0:	08c0      	lsrs	r0, r0, #3
 80021c2:	433a      	orrs	r2, r7
 80021c4:	d100      	bne.n	80021c8 <__aeabi_dsub+0x5f0>
 80021c6:	e6dc      	b.n	8001f82 <__aeabi_dsub+0x3aa>
 80021c8:	0762      	lsls	r2, r4, #29
 80021ca:	4310      	orrs	r0, r2
 80021cc:	2280      	movs	r2, #128	@ 0x80
 80021ce:	08e4      	lsrs	r4, r4, #3
 80021d0:	0312      	lsls	r2, r2, #12
 80021d2:	4214      	tst	r4, r2
 80021d4:	d009      	beq.n	80021ea <__aeabi_dsub+0x612>
 80021d6:	08fd      	lsrs	r5, r7, #3
 80021d8:	4215      	tst	r5, r2
 80021da:	d106      	bne.n	80021ea <__aeabi_dsub+0x612>
 80021dc:	4663      	mov	r3, ip
 80021de:	2601      	movs	r6, #1
 80021e0:	002c      	movs	r4, r5
 80021e2:	08d8      	lsrs	r0, r3, #3
 80021e4:	077b      	lsls	r3, r7, #29
 80021e6:	4318      	orrs	r0, r3
 80021e8:	400e      	ands	r6, r1
 80021ea:	0f42      	lsrs	r2, r0, #29
 80021ec:	00c0      	lsls	r0, r0, #3
 80021ee:	08c0      	lsrs	r0, r0, #3
 80021f0:	0752      	lsls	r2, r2, #29
 80021f2:	4302      	orrs	r2, r0
 80021f4:	e601      	b.n	8001dfa <__aeabi_dsub+0x222>
 80021f6:	4663      	mov	r3, ip
 80021f8:	1a1d      	subs	r5, r3, r0
 80021fa:	45ac      	cmp	ip, r5
 80021fc:	4192      	sbcs	r2, r2
 80021fe:	9b02      	ldr	r3, [sp, #8]
 8002200:	4252      	negs	r2, r2
 8002202:	1b1c      	subs	r4, r3, r4
 8002204:	000e      	movs	r6, r1
 8002206:	4688      	mov	r8, r1
 8002208:	2701      	movs	r7, #1
 800220a:	1aa4      	subs	r4, r4, r2
 800220c:	e546      	b.n	8001c9c <__aeabi_dsub+0xc4>
 800220e:	4663      	mov	r3, ip
 8002210:	08d9      	lsrs	r1, r3, #3
 8002212:	9b02      	ldr	r3, [sp, #8]
 8002214:	075a      	lsls	r2, r3, #29
 8002216:	430a      	orrs	r2, r1
 8002218:	08dc      	lsrs	r4, r3, #3
 800221a:	e5ee      	b.n	8001dfa <__aeabi_dsub+0x222>
 800221c:	4663      	mov	r3, ip
 800221e:	9c02      	ldr	r4, [sp, #8]
 8002220:	9303      	str	r3, [sp, #12]
 8002222:	e6c7      	b.n	8001fb4 <__aeabi_dsub+0x3dc>
 8002224:	08c0      	lsrs	r0, r0, #3
 8002226:	2a00      	cmp	r2, #0
 8002228:	d100      	bne.n	800222c <__aeabi_dsub+0x654>
 800222a:	e6aa      	b.n	8001f82 <__aeabi_dsub+0x3aa>
 800222c:	0762      	lsls	r2, r4, #29
 800222e:	4310      	orrs	r0, r2
 8002230:	2280      	movs	r2, #128	@ 0x80
 8002232:	08e4      	lsrs	r4, r4, #3
 8002234:	0312      	lsls	r2, r2, #12
 8002236:	4214      	tst	r4, r2
 8002238:	d0d7      	beq.n	80021ea <__aeabi_dsub+0x612>
 800223a:	9f02      	ldr	r7, [sp, #8]
 800223c:	08fd      	lsrs	r5, r7, #3
 800223e:	4215      	tst	r5, r2
 8002240:	d1d3      	bne.n	80021ea <__aeabi_dsub+0x612>
 8002242:	4663      	mov	r3, ip
 8002244:	2601      	movs	r6, #1
 8002246:	08d8      	lsrs	r0, r3, #3
 8002248:	077b      	lsls	r3, r7, #29
 800224a:	002c      	movs	r4, r5
 800224c:	4318      	orrs	r0, r3
 800224e:	400e      	ands	r6, r1
 8002250:	e7cb      	b.n	80021ea <__aeabi_dsub+0x612>
 8002252:	000a      	movs	r2, r1
 8002254:	0027      	movs	r7, r4
 8002256:	3a20      	subs	r2, #32
 8002258:	40d7      	lsrs	r7, r2
 800225a:	2920      	cmp	r1, #32
 800225c:	d005      	beq.n	800226a <__aeabi_dsub+0x692>
 800225e:	2240      	movs	r2, #64	@ 0x40
 8002260:	1a52      	subs	r2, r2, r1
 8002262:	4094      	lsls	r4, r2
 8002264:	0025      	movs	r5, r4
 8002266:	4305      	orrs	r5, r0
 8002268:	9503      	str	r5, [sp, #12]
 800226a:	9d03      	ldr	r5, [sp, #12]
 800226c:	1e6a      	subs	r2, r5, #1
 800226e:	4195      	sbcs	r5, r2
 8002270:	432f      	orrs	r7, r5
 8002272:	e610      	b.n	8001e96 <__aeabi_dsub+0x2be>
 8002274:	0014      	movs	r4, r2
 8002276:	2500      	movs	r5, #0
 8002278:	2200      	movs	r2, #0
 800227a:	e556      	b.n	8001d2a <__aeabi_dsub+0x152>
 800227c:	9b02      	ldr	r3, [sp, #8]
 800227e:	4460      	add	r0, ip
 8002280:	4699      	mov	r9, r3
 8002282:	4560      	cmp	r0, ip
 8002284:	4192      	sbcs	r2, r2
 8002286:	444c      	add	r4, r9
 8002288:	4252      	negs	r2, r2
 800228a:	0005      	movs	r5, r0
 800228c:	18a4      	adds	r4, r4, r2
 800228e:	e74c      	b.n	800212a <__aeabi_dsub+0x552>
 8002290:	001a      	movs	r2, r3
 8002292:	001c      	movs	r4, r3
 8002294:	432a      	orrs	r2, r5
 8002296:	d000      	beq.n	800229a <__aeabi_dsub+0x6c2>
 8002298:	e6b3      	b.n	8002002 <__aeabi_dsub+0x42a>
 800229a:	e6c9      	b.n	8002030 <__aeabi_dsub+0x458>
 800229c:	2480      	movs	r4, #128	@ 0x80
 800229e:	2600      	movs	r6, #0
 80022a0:	0324      	lsls	r4, r4, #12
 80022a2:	e5ae      	b.n	8001e02 <__aeabi_dsub+0x22a>
 80022a4:	2120      	movs	r1, #32
 80022a6:	2500      	movs	r5, #0
 80022a8:	1a09      	subs	r1, r1, r0
 80022aa:	e517      	b.n	8001cdc <__aeabi_dsub+0x104>
 80022ac:	2200      	movs	r2, #0
 80022ae:	2500      	movs	r5, #0
 80022b0:	4c0b      	ldr	r4, [pc, #44]	@ (80022e0 <__aeabi_dsub+0x708>)
 80022b2:	e53a      	b.n	8001d2a <__aeabi_dsub+0x152>
 80022b4:	2d00      	cmp	r5, #0
 80022b6:	d100      	bne.n	80022ba <__aeabi_dsub+0x6e2>
 80022b8:	e5f6      	b.n	8001ea8 <__aeabi_dsub+0x2d0>
 80022ba:	464b      	mov	r3, r9
 80022bc:	1bda      	subs	r2, r3, r7
 80022be:	4692      	mov	sl, r2
 80022c0:	2f00      	cmp	r7, #0
 80022c2:	d100      	bne.n	80022c6 <__aeabi_dsub+0x6ee>
 80022c4:	e66f      	b.n	8001fa6 <__aeabi_dsub+0x3ce>
 80022c6:	2a38      	cmp	r2, #56	@ 0x38
 80022c8:	dc05      	bgt.n	80022d6 <__aeabi_dsub+0x6fe>
 80022ca:	2680      	movs	r6, #128	@ 0x80
 80022cc:	0436      	lsls	r6, r6, #16
 80022ce:	4334      	orrs	r4, r6
 80022d0:	4688      	mov	r8, r1
 80022d2:	000e      	movs	r6, r1
 80022d4:	e6d1      	b.n	800207a <__aeabi_dsub+0x4a2>
 80022d6:	4688      	mov	r8, r1
 80022d8:	000e      	movs	r6, r1
 80022da:	2501      	movs	r5, #1
 80022dc:	e6de      	b.n	800209c <__aeabi_dsub+0x4c4>
 80022de:	46c0      	nop			@ (mov r8, r8)
 80022e0:	000007ff 	.word	0x000007ff
 80022e4:	ff7fffff 	.word	0xff7fffff
 80022e8:	000007fe 	.word	0x000007fe
 80022ec:	2d00      	cmp	r5, #0
 80022ee:	d100      	bne.n	80022f2 <__aeabi_dsub+0x71a>
 80022f0:	e668      	b.n	8001fc4 <__aeabi_dsub+0x3ec>
 80022f2:	464b      	mov	r3, r9
 80022f4:	1bd9      	subs	r1, r3, r7
 80022f6:	2f00      	cmp	r7, #0
 80022f8:	d101      	bne.n	80022fe <__aeabi_dsub+0x726>
 80022fa:	468a      	mov	sl, r1
 80022fc:	e5a7      	b.n	8001e4e <__aeabi_dsub+0x276>
 80022fe:	2701      	movs	r7, #1
 8002300:	2938      	cmp	r1, #56	@ 0x38
 8002302:	dd00      	ble.n	8002306 <__aeabi_dsub+0x72e>
 8002304:	e5c7      	b.n	8001e96 <__aeabi_dsub+0x2be>
 8002306:	2280      	movs	r2, #128	@ 0x80
 8002308:	0412      	lsls	r2, r2, #16
 800230a:	4314      	orrs	r4, r2
 800230c:	e5af      	b.n	8001e6e <__aeabi_dsub+0x296>
 800230e:	46c0      	nop			@ (mov r8, r8)

08002310 <__aeabi_dcmpun>:
 8002310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002312:	46c6      	mov	lr, r8
 8002314:	031e      	lsls	r6, r3, #12
 8002316:	0b36      	lsrs	r6, r6, #12
 8002318:	46b0      	mov	r8, r6
 800231a:	4e0d      	ldr	r6, [pc, #52]	@ (8002350 <__aeabi_dcmpun+0x40>)
 800231c:	030c      	lsls	r4, r1, #12
 800231e:	004d      	lsls	r5, r1, #1
 8002320:	005f      	lsls	r7, r3, #1
 8002322:	b500      	push	{lr}
 8002324:	0b24      	lsrs	r4, r4, #12
 8002326:	0d6d      	lsrs	r5, r5, #21
 8002328:	0d7f      	lsrs	r7, r7, #21
 800232a:	42b5      	cmp	r5, r6
 800232c:	d00b      	beq.n	8002346 <__aeabi_dcmpun+0x36>
 800232e:	4908      	ldr	r1, [pc, #32]	@ (8002350 <__aeabi_dcmpun+0x40>)
 8002330:	2000      	movs	r0, #0
 8002332:	428f      	cmp	r7, r1
 8002334:	d104      	bne.n	8002340 <__aeabi_dcmpun+0x30>
 8002336:	4646      	mov	r6, r8
 8002338:	4316      	orrs	r6, r2
 800233a:	0030      	movs	r0, r6
 800233c:	1e43      	subs	r3, r0, #1
 800233e:	4198      	sbcs	r0, r3
 8002340:	bc80      	pop	{r7}
 8002342:	46b8      	mov	r8, r7
 8002344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002346:	4304      	orrs	r4, r0
 8002348:	2001      	movs	r0, #1
 800234a:	2c00      	cmp	r4, #0
 800234c:	d1f8      	bne.n	8002340 <__aeabi_dcmpun+0x30>
 800234e:	e7ee      	b.n	800232e <__aeabi_dcmpun+0x1e>
 8002350:	000007ff 	.word	0x000007ff

08002354 <__aeabi_d2iz>:
 8002354:	000b      	movs	r3, r1
 8002356:	0002      	movs	r2, r0
 8002358:	b570      	push	{r4, r5, r6, lr}
 800235a:	4d16      	ldr	r5, [pc, #88]	@ (80023b4 <__aeabi_d2iz+0x60>)
 800235c:	030c      	lsls	r4, r1, #12
 800235e:	b082      	sub	sp, #8
 8002360:	0049      	lsls	r1, r1, #1
 8002362:	2000      	movs	r0, #0
 8002364:	9200      	str	r2, [sp, #0]
 8002366:	9301      	str	r3, [sp, #4]
 8002368:	0b24      	lsrs	r4, r4, #12
 800236a:	0d49      	lsrs	r1, r1, #21
 800236c:	0fde      	lsrs	r6, r3, #31
 800236e:	42a9      	cmp	r1, r5
 8002370:	dd04      	ble.n	800237c <__aeabi_d2iz+0x28>
 8002372:	4811      	ldr	r0, [pc, #68]	@ (80023b8 <__aeabi_d2iz+0x64>)
 8002374:	4281      	cmp	r1, r0
 8002376:	dd03      	ble.n	8002380 <__aeabi_d2iz+0x2c>
 8002378:	4b10      	ldr	r3, [pc, #64]	@ (80023bc <__aeabi_d2iz+0x68>)
 800237a:	18f0      	adds	r0, r6, r3
 800237c:	b002      	add	sp, #8
 800237e:	bd70      	pop	{r4, r5, r6, pc}
 8002380:	2080      	movs	r0, #128	@ 0x80
 8002382:	0340      	lsls	r0, r0, #13
 8002384:	4320      	orrs	r0, r4
 8002386:	4c0e      	ldr	r4, [pc, #56]	@ (80023c0 <__aeabi_d2iz+0x6c>)
 8002388:	1a64      	subs	r4, r4, r1
 800238a:	2c1f      	cmp	r4, #31
 800238c:	dd08      	ble.n	80023a0 <__aeabi_d2iz+0x4c>
 800238e:	4b0d      	ldr	r3, [pc, #52]	@ (80023c4 <__aeabi_d2iz+0x70>)
 8002390:	1a5b      	subs	r3, r3, r1
 8002392:	40d8      	lsrs	r0, r3
 8002394:	0003      	movs	r3, r0
 8002396:	4258      	negs	r0, r3
 8002398:	2e00      	cmp	r6, #0
 800239a:	d1ef      	bne.n	800237c <__aeabi_d2iz+0x28>
 800239c:	0018      	movs	r0, r3
 800239e:	e7ed      	b.n	800237c <__aeabi_d2iz+0x28>
 80023a0:	4b09      	ldr	r3, [pc, #36]	@ (80023c8 <__aeabi_d2iz+0x74>)
 80023a2:	9a00      	ldr	r2, [sp, #0]
 80023a4:	469c      	mov	ip, r3
 80023a6:	0003      	movs	r3, r0
 80023a8:	4461      	add	r1, ip
 80023aa:	408b      	lsls	r3, r1
 80023ac:	40e2      	lsrs	r2, r4
 80023ae:	4313      	orrs	r3, r2
 80023b0:	e7f1      	b.n	8002396 <__aeabi_d2iz+0x42>
 80023b2:	46c0      	nop			@ (mov r8, r8)
 80023b4:	000003fe 	.word	0x000003fe
 80023b8:	0000041d 	.word	0x0000041d
 80023bc:	7fffffff 	.word	0x7fffffff
 80023c0:	00000433 	.word	0x00000433
 80023c4:	00000413 	.word	0x00000413
 80023c8:	fffffbed 	.word	0xfffffbed

080023cc <__aeabi_i2d>:
 80023cc:	b570      	push	{r4, r5, r6, lr}
 80023ce:	2800      	cmp	r0, #0
 80023d0:	d016      	beq.n	8002400 <__aeabi_i2d+0x34>
 80023d2:	17c3      	asrs	r3, r0, #31
 80023d4:	18c5      	adds	r5, r0, r3
 80023d6:	405d      	eors	r5, r3
 80023d8:	0fc4      	lsrs	r4, r0, #31
 80023da:	0028      	movs	r0, r5
 80023dc:	f7fe f864 	bl	80004a8 <__clzsi2>
 80023e0:	4b10      	ldr	r3, [pc, #64]	@ (8002424 <__aeabi_i2d+0x58>)
 80023e2:	1a1b      	subs	r3, r3, r0
 80023e4:	055b      	lsls	r3, r3, #21
 80023e6:	0d5b      	lsrs	r3, r3, #21
 80023e8:	280a      	cmp	r0, #10
 80023ea:	dc14      	bgt.n	8002416 <__aeabi_i2d+0x4a>
 80023ec:	0002      	movs	r2, r0
 80023ee:	002e      	movs	r6, r5
 80023f0:	3215      	adds	r2, #21
 80023f2:	4096      	lsls	r6, r2
 80023f4:	220b      	movs	r2, #11
 80023f6:	1a12      	subs	r2, r2, r0
 80023f8:	40d5      	lsrs	r5, r2
 80023fa:	032d      	lsls	r5, r5, #12
 80023fc:	0b2d      	lsrs	r5, r5, #12
 80023fe:	e003      	b.n	8002408 <__aeabi_i2d+0x3c>
 8002400:	2400      	movs	r4, #0
 8002402:	2300      	movs	r3, #0
 8002404:	2500      	movs	r5, #0
 8002406:	2600      	movs	r6, #0
 8002408:	051b      	lsls	r3, r3, #20
 800240a:	432b      	orrs	r3, r5
 800240c:	07e4      	lsls	r4, r4, #31
 800240e:	4323      	orrs	r3, r4
 8002410:	0030      	movs	r0, r6
 8002412:	0019      	movs	r1, r3
 8002414:	bd70      	pop	{r4, r5, r6, pc}
 8002416:	380b      	subs	r0, #11
 8002418:	4085      	lsls	r5, r0
 800241a:	032d      	lsls	r5, r5, #12
 800241c:	2600      	movs	r6, #0
 800241e:	0b2d      	lsrs	r5, r5, #12
 8002420:	e7f2      	b.n	8002408 <__aeabi_i2d+0x3c>
 8002422:	46c0      	nop			@ (mov r8, r8)
 8002424:	0000041e 	.word	0x0000041e

08002428 <__aeabi_ui2d>:
 8002428:	b510      	push	{r4, lr}
 800242a:	1e04      	subs	r4, r0, #0
 800242c:	d010      	beq.n	8002450 <__aeabi_ui2d+0x28>
 800242e:	f7fe f83b 	bl	80004a8 <__clzsi2>
 8002432:	4b0e      	ldr	r3, [pc, #56]	@ (800246c <__aeabi_ui2d+0x44>)
 8002434:	1a1b      	subs	r3, r3, r0
 8002436:	055b      	lsls	r3, r3, #21
 8002438:	0d5b      	lsrs	r3, r3, #21
 800243a:	280a      	cmp	r0, #10
 800243c:	dc0f      	bgt.n	800245e <__aeabi_ui2d+0x36>
 800243e:	220b      	movs	r2, #11
 8002440:	0021      	movs	r1, r4
 8002442:	1a12      	subs	r2, r2, r0
 8002444:	40d1      	lsrs	r1, r2
 8002446:	3015      	adds	r0, #21
 8002448:	030a      	lsls	r2, r1, #12
 800244a:	4084      	lsls	r4, r0
 800244c:	0b12      	lsrs	r2, r2, #12
 800244e:	e001      	b.n	8002454 <__aeabi_ui2d+0x2c>
 8002450:	2300      	movs	r3, #0
 8002452:	2200      	movs	r2, #0
 8002454:	051b      	lsls	r3, r3, #20
 8002456:	4313      	orrs	r3, r2
 8002458:	0020      	movs	r0, r4
 800245a:	0019      	movs	r1, r3
 800245c:	bd10      	pop	{r4, pc}
 800245e:	0022      	movs	r2, r4
 8002460:	380b      	subs	r0, #11
 8002462:	4082      	lsls	r2, r0
 8002464:	0312      	lsls	r2, r2, #12
 8002466:	2400      	movs	r4, #0
 8002468:	0b12      	lsrs	r2, r2, #12
 800246a:	e7f3      	b.n	8002454 <__aeabi_ui2d+0x2c>
 800246c:	0000041e 	.word	0x0000041e

08002470 <__clzdi2>:
 8002470:	b510      	push	{r4, lr}
 8002472:	2900      	cmp	r1, #0
 8002474:	d103      	bne.n	800247e <__clzdi2+0xe>
 8002476:	f7fe f817 	bl	80004a8 <__clzsi2>
 800247a:	3020      	adds	r0, #32
 800247c:	e002      	b.n	8002484 <__clzdi2+0x14>
 800247e:	0008      	movs	r0, r1
 8002480:	f7fe f812 	bl	80004a8 <__clzsi2>
 8002484:	bd10      	pop	{r4, pc}
 8002486:	46c0      	nop			@ (mov r8, r8)

08002488 <resetConfig>:

    return (value & REG_OSC_STATUS_OMODE) != 0;
}

bool resetConfig(uint32_t flags)
{
 8002488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800248a:	46ce      	mov	lr, r9
 800248c:	0005      	movs	r5, r0
 800248e:	4647      	mov	r7, r8
    printf("resetConfig(0x%08lx)\n", flags);
 8002490:	0029      	movs	r1, r5
{
 8002492:	b580      	push	{r7, lr}
    printf("resetConfig(0x%08lx)\n", flags);
 8002494:	48d1      	ldr	r0, [pc, #836]	@ (80027dc <resetConfig+0x354>)
 8002496:	f004 fcab 	bl	8006df0 <printf_>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800249a:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800249e:	b672      	cpsid	i
{
    // uint8_t address = AB1815_SPI_WRITE(offset);
    uint8_t address = offset | 0x80;
    uint32_t primask_bit = utils_enter_critical_section();

    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 80024a0:	2240      	movs	r2, #64	@ 0x40
 80024a2:	4bcf      	ldr	r3, [pc, #828]	@ (80027e0 <resetConfig+0x358>)
 80024a4:	6819      	ldr	r1, [r3, #0]
 80024a6:	420a      	tst	r2, r1
 80024a8:	d102      	bne.n	80024b0 <resetConfig+0x28>
    {
        SPI1->CR1 |= SPI_CR1_SPE;
 80024aa:	6819      	ldr	r1, [r3, #0]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	601a      	str	r2, [r3, #0]
        RTC_L();
 80024b0:	2280      	movs	r2, #128	@ 0x80
 80024b2:	4bcc      	ldr	r3, [pc, #816]	@ (80027e4 <resetConfig+0x35c>)
 80024b4:	05d2      	lsls	r2, r2, #23
 80024b6:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 80024b8:	f004 ff38 	bl	800732c <HAL_GetTick>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80024bc:	2302      	movs	r3, #2
 80024be:	4698      	mov	r8, r3
        if ((HAL_GetTick() - start_time) > 1000)
 80024c0:	23fa      	movs	r3, #250	@ 0xfa
 80024c2:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 80024c4:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 80024c6:	4699      	mov	r9, r3
 80024c8:	4cc5      	ldr	r4, [pc, #788]	@ (80027e0 <resetConfig+0x358>)
 80024ca:	4642      	mov	r2, r8
 80024cc:	68a3      	ldr	r3, [r4, #8]
 80024ce:	421a      	tst	r2, r3
 80024d0:	d018      	beq.n	8002504 <resetConfig+0x7c>
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
  *spidr = TxData;
 80024d2:	238f      	movs	r3, #143	@ 0x8f
 80024d4:	7323      	strb	r3, [r4, #12]
    start_time = HAL_GetTick();
 80024d6:	f004 ff29 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80024da:	2301      	movs	r3, #1
 80024dc:	4698      	mov	r8, r3
        if ((HAL_GetTick() - start_time) > 1000)
 80024de:	23fa      	movs	r3, #250	@ 0xfa
 80024e0:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 80024e2:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 80024e4:	4699      	mov	r9, r3
 80024e6:	4cbe      	ldr	r4, [pc, #760]	@ (80027e0 <resetConfig+0x358>)
 80024e8:	4642      	mov	r2, r8
 80024ea:	68a3      	ldr	r3, [r4, #8]
 80024ec:	421a      	tst	r2, r3
 80024ee:	d113      	bne.n	8002518 <resetConfig+0x90>
 80024f0:	f004 ff1c 	bl	800732c <HAL_GetTick>
 80024f4:	1b80      	subs	r0, r0, r6
 80024f6:	4548      	cmp	r0, r9
 80024f8:	d9f6      	bls.n	80024e8 <resetConfig+0x60>
            print_error(__func__, __LINE__);
 80024fa:	48bb      	ldr	r0, [pc, #748]	@ (80027e8 <resetConfig+0x360>)
 80024fc:	49bb      	ldr	r1, [pc, #748]	@ (80027ec <resetConfig+0x364>)
 80024fe:	f002 feff 	bl	8005300 <print_error>
 8002502:	e7f1      	b.n	80024e8 <resetConfig+0x60>
        if ((HAL_GetTick() - start_time) > 1000)
 8002504:	f004 ff12 	bl	800732c <HAL_GetTick>
 8002508:	1b80      	subs	r0, r0, r6
 800250a:	4548      	cmp	r0, r9
 800250c:	d9dd      	bls.n	80024ca <resetConfig+0x42>
            print_error(__func__, __LINE__);
 800250e:	48b6      	ldr	r0, [pc, #728]	@ (80027e8 <resetConfig+0x360>)
 8002510:	49b7      	ldr	r1, [pc, #732]	@ (80027f0 <resetConfig+0x368>)
 8002512:	f002 fef5 	bl	8005300 <print_error>
 8002516:	e7d8      	b.n	80024ca <resetConfig+0x42>
  return (*((__IO uint8_t *)&SPIx->DR));
 8002518:	7b23      	ldrb	r3, [r4, #12]
    uint32_t start_time = HAL_GetTick();
 800251a:	f004 ff07 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800251e:	2302      	movs	r3, #2
 8002520:	4698      	mov	r8, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8002522:	23fa      	movs	r3, #250	@ 0xfa
 8002524:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 8002526:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8002528:	4699      	mov	r9, r3
 800252a:	4cad      	ldr	r4, [pc, #692]	@ (80027e0 <resetConfig+0x358>)
 800252c:	4642      	mov	r2, r8
 800252e:	68a3      	ldr	r3, [r4, #8]
 8002530:	421a      	tst	r2, r3
 8002532:	d018      	beq.n	8002566 <resetConfig+0xde>
  *spidr = TxData;
 8002534:	2300      	movs	r3, #0
 8002536:	7323      	strb	r3, [r4, #12]
    start_time = HAL_GetTick();
 8002538:	f004 fef8 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800253c:	2301      	movs	r3, #1
 800253e:	4698      	mov	r8, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8002540:	23fa      	movs	r3, #250	@ 0xfa
 8002542:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8002544:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8002546:	4699      	mov	r9, r3
 8002548:	4ca5      	ldr	r4, [pc, #660]	@ (80027e0 <resetConfig+0x358>)
 800254a:	4642      	mov	r2, r8
 800254c:	68a3      	ldr	r3, [r4, #8]
 800254e:	421a      	tst	r2, r3
 8002550:	d113      	bne.n	800257a <resetConfig+0xf2>
 8002552:	f004 feeb 	bl	800732c <HAL_GetTick>
 8002556:	1b80      	subs	r0, r0, r6
 8002558:	4548      	cmp	r0, r9
 800255a:	d9f6      	bls.n	800254a <resetConfig+0xc2>
            print_error(__func__, __LINE__);
 800255c:	48a2      	ldr	r0, [pc, #648]	@ (80027e8 <resetConfig+0x360>)
 800255e:	49a3      	ldr	r1, [pc, #652]	@ (80027ec <resetConfig+0x364>)
 8002560:	f002 fece 	bl	8005300 <print_error>
 8002564:	e7f1      	b.n	800254a <resetConfig+0xc2>
        if ((HAL_GetTick() - start_time) > 1000)
 8002566:	f004 fee1 	bl	800732c <HAL_GetTick>
 800256a:	1b80      	subs	r0, r0, r6
 800256c:	4548      	cmp	r0, r9
 800256e:	d9dd      	bls.n	800252c <resetConfig+0xa4>
            print_error(__func__, __LINE__);
 8002570:	489d      	ldr	r0, [pc, #628]	@ (80027e8 <resetConfig+0x360>)
 8002572:	499f      	ldr	r1, [pc, #636]	@ (80027f0 <resetConfig+0x368>)
 8002574:	f002 fec4 	bl	8005300 <print_error>
 8002578:	e7d8      	b.n	800252c <resetConfig+0xa4>
        RTC_H();
 800257a:	2280      	movs	r2, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 800257c:	7b23      	ldrb	r3, [r4, #12]
 800257e:	4b99      	ldr	r3, [pc, #612]	@ (80027e4 <resetConfig+0x35c>)
 8002580:	01d2      	lsls	r2, r2, #7
 8002582:	619a      	str	r2, [r3, #24]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002584:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002588:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800258c:	b672      	cpsid	i
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 800258e:	2340      	movs	r3, #64	@ 0x40
 8002590:	6822      	ldr	r2, [r4, #0]
 8002592:	4213      	tst	r3, r2
 8002594:	d102      	bne.n	800259c <resetConfig+0x114>
        SPI1->CR1 |= SPI_CR1_SPE;
 8002596:	6822      	ldr	r2, [r4, #0]
 8002598:	4313      	orrs	r3, r2
 800259a:	6023      	str	r3, [r4, #0]
        RTC_L();
 800259c:	2280      	movs	r2, #128	@ 0x80
 800259e:	4b91      	ldr	r3, [pc, #580]	@ (80027e4 <resetConfig+0x35c>)
 80025a0:	05d2      	lsls	r2, r2, #23
 80025a2:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 80025a4:	f004 fec2 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80025a8:	2302      	movs	r3, #2
 80025aa:	4698      	mov	r8, r3
        if ((HAL_GetTick() - start_time) > 1000)
 80025ac:	23fa      	movs	r3, #250	@ 0xfa
 80025ae:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 80025b0:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 80025b2:	4699      	mov	r9, r3
 80025b4:	4c8a      	ldr	r4, [pc, #552]	@ (80027e0 <resetConfig+0x358>)
 80025b6:	4642      	mov	r2, r8
 80025b8:	68a3      	ldr	r3, [r4, #8]
 80025ba:	421a      	tst	r2, r3
 80025bc:	d018      	beq.n	80025f0 <resetConfig+0x168>
  *spidr = TxData;
 80025be:	2390      	movs	r3, #144	@ 0x90
 80025c0:	7323      	strb	r3, [r4, #12]
    start_time = HAL_GetTick();
 80025c2:	f004 feb3 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80025c6:	2301      	movs	r3, #1
 80025c8:	4698      	mov	r8, r3
        if ((HAL_GetTick() - start_time) > 1000)
 80025ca:	23fa      	movs	r3, #250	@ 0xfa
 80025cc:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 80025ce:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 80025d0:	4699      	mov	r9, r3
 80025d2:	4c83      	ldr	r4, [pc, #524]	@ (80027e0 <resetConfig+0x358>)
 80025d4:	4642      	mov	r2, r8
 80025d6:	68a3      	ldr	r3, [r4, #8]
 80025d8:	421a      	tst	r2, r3
 80025da:	d113      	bne.n	8002604 <resetConfig+0x17c>
 80025dc:	f004 fea6 	bl	800732c <HAL_GetTick>
 80025e0:	1b80      	subs	r0, r0, r6
 80025e2:	4548      	cmp	r0, r9
 80025e4:	d9f6      	bls.n	80025d4 <resetConfig+0x14c>
            print_error(__func__, __LINE__);
 80025e6:	4880      	ldr	r0, [pc, #512]	@ (80027e8 <resetConfig+0x360>)
 80025e8:	4980      	ldr	r1, [pc, #512]	@ (80027ec <resetConfig+0x364>)
 80025ea:	f002 fe89 	bl	8005300 <print_error>
 80025ee:	e7f1      	b.n	80025d4 <resetConfig+0x14c>
        if ((HAL_GetTick() - start_time) > 1000)
 80025f0:	f004 fe9c 	bl	800732c <HAL_GetTick>
 80025f4:	1b80      	subs	r0, r0, r6
 80025f6:	4548      	cmp	r0, r9
 80025f8:	d9dd      	bls.n	80025b6 <resetConfig+0x12e>
            print_error(__func__, __LINE__);
 80025fa:	487b      	ldr	r0, [pc, #492]	@ (80027e8 <resetConfig+0x360>)
 80025fc:	497c      	ldr	r1, [pc, #496]	@ (80027f0 <resetConfig+0x368>)
 80025fe:	f002 fe7f 	bl	8005300 <print_error>
 8002602:	e7d8      	b.n	80025b6 <resetConfig+0x12e>
  return (*((__IO uint8_t *)&SPIx->DR));
 8002604:	7b23      	ldrb	r3, [r4, #12]
    uint32_t start_time = HAL_GetTick();
 8002606:	f004 fe91 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800260a:	2302      	movs	r3, #2
 800260c:	4698      	mov	r8, r3
        if ((HAL_GetTick() - start_time) > 1000)
 800260e:	23fa      	movs	r3, #250	@ 0xfa
 8002610:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 8002612:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8002614:	4699      	mov	r9, r3
 8002616:	4c72      	ldr	r4, [pc, #456]	@ (80027e0 <resetConfig+0x358>)
 8002618:	4642      	mov	r2, r8
 800261a:	68a3      	ldr	r3, [r4, #8]
 800261c:	421a      	tst	r2, r3
 800261e:	d018      	beq.n	8002652 <resetConfig+0x1ca>
  *spidr = TxData;
 8002620:	2312      	movs	r3, #18
 8002622:	7323      	strb	r3, [r4, #12]
    start_time = HAL_GetTick();
 8002624:	f004 fe82 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002628:	2301      	movs	r3, #1
 800262a:	4698      	mov	r8, r3
        if ((HAL_GetTick() - start_time) > 1000)
 800262c:	23fa      	movs	r3, #250	@ 0xfa
 800262e:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8002630:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8002632:	4699      	mov	r9, r3
 8002634:	4c6a      	ldr	r4, [pc, #424]	@ (80027e0 <resetConfig+0x358>)
 8002636:	4642      	mov	r2, r8
 8002638:	68a3      	ldr	r3, [r4, #8]
 800263a:	421a      	tst	r2, r3
 800263c:	d113      	bne.n	8002666 <resetConfig+0x1de>
 800263e:	f004 fe75 	bl	800732c <HAL_GetTick>
 8002642:	1b80      	subs	r0, r0, r6
 8002644:	4548      	cmp	r0, r9
 8002646:	d9f6      	bls.n	8002636 <resetConfig+0x1ae>
            print_error(__func__, __LINE__);
 8002648:	4867      	ldr	r0, [pc, #412]	@ (80027e8 <resetConfig+0x360>)
 800264a:	4968      	ldr	r1, [pc, #416]	@ (80027ec <resetConfig+0x364>)
 800264c:	f002 fe58 	bl	8005300 <print_error>
 8002650:	e7f1      	b.n	8002636 <resetConfig+0x1ae>
        if ((HAL_GetTick() - start_time) > 1000)
 8002652:	f004 fe6b 	bl	800732c <HAL_GetTick>
 8002656:	1b80      	subs	r0, r0, r6
 8002658:	4548      	cmp	r0, r9
 800265a:	d9dd      	bls.n	8002618 <resetConfig+0x190>
            print_error(__func__, __LINE__);
 800265c:	4862      	ldr	r0, [pc, #392]	@ (80027e8 <resetConfig+0x360>)
 800265e:	4964      	ldr	r1, [pc, #400]	@ (80027f0 <resetConfig+0x368>)
 8002660:	f002 fe4e 	bl	8005300 <print_error>
 8002664:	e7d8      	b.n	8002618 <resetConfig+0x190>
        RTC_H();
 8002666:	2280      	movs	r2, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 8002668:	7b23      	ldrb	r3, [r4, #12]
 800266a:	4b5e      	ldr	r3, [pc, #376]	@ (80027e4 <resetConfig+0x35c>)
 800266c:	01d2      	lsls	r2, r2, #7
 800266e:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002670:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002674:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002678:	b672      	cpsid	i
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 800267a:	2340      	movs	r3, #64	@ 0x40
 800267c:	6822      	ldr	r2, [r4, #0]
 800267e:	4213      	tst	r3, r2
 8002680:	d102      	bne.n	8002688 <resetConfig+0x200>
        SPI1->CR1 |= SPI_CR1_SPE;
 8002682:	6822      	ldr	r2, [r4, #0]
 8002684:	4313      	orrs	r3, r2
 8002686:	6023      	str	r3, [r4, #0]
        RTC_L();
 8002688:	2280      	movs	r2, #128	@ 0x80
 800268a:	4b56      	ldr	r3, [pc, #344]	@ (80027e4 <resetConfig+0x35c>)
 800268c:	05d2      	lsls	r2, r2, #23
 800268e:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 8002690:	f004 fe4c 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002694:	2302      	movs	r3, #2
 8002696:	4698      	mov	r8, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8002698:	23fa      	movs	r3, #250	@ 0xfa
 800269a:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 800269c:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 800269e:	4699      	mov	r9, r3
 80026a0:	4c4f      	ldr	r4, [pc, #316]	@ (80027e0 <resetConfig+0x358>)
 80026a2:	4642      	mov	r2, r8
 80026a4:	68a3      	ldr	r3, [r4, #8]
 80026a6:	421a      	tst	r2, r3
 80026a8:	d018      	beq.n	80026dc <resetConfig+0x254>
  *spidr = TxData;
 80026aa:	2391      	movs	r3, #145	@ 0x91
 80026ac:	7323      	strb	r3, [r4, #12]
    start_time = HAL_GetTick();
 80026ae:	f004 fe3d 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80026b2:	2301      	movs	r3, #1
 80026b4:	4698      	mov	r8, r3
        if ((HAL_GetTick() - start_time) > 1000)
 80026b6:	23fa      	movs	r3, #250	@ 0xfa
 80026b8:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 80026ba:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 80026bc:	4699      	mov	r9, r3
 80026be:	4c48      	ldr	r4, [pc, #288]	@ (80027e0 <resetConfig+0x358>)
 80026c0:	4642      	mov	r2, r8
 80026c2:	68a3      	ldr	r3, [r4, #8]
 80026c4:	421a      	tst	r2, r3
 80026c6:	d113      	bne.n	80026f0 <resetConfig+0x268>
 80026c8:	f004 fe30 	bl	800732c <HAL_GetTick>
 80026cc:	1b80      	subs	r0, r0, r6
 80026ce:	4548      	cmp	r0, r9
 80026d0:	d9f6      	bls.n	80026c0 <resetConfig+0x238>
            print_error(__func__, __LINE__);
 80026d2:	4845      	ldr	r0, [pc, #276]	@ (80027e8 <resetConfig+0x360>)
 80026d4:	4945      	ldr	r1, [pc, #276]	@ (80027ec <resetConfig+0x364>)
 80026d6:	f002 fe13 	bl	8005300 <print_error>
 80026da:	e7f1      	b.n	80026c0 <resetConfig+0x238>
        if ((HAL_GetTick() - start_time) > 1000)
 80026dc:	f004 fe26 	bl	800732c <HAL_GetTick>
 80026e0:	1b80      	subs	r0, r0, r6
 80026e2:	4548      	cmp	r0, r9
 80026e4:	d9dd      	bls.n	80026a2 <resetConfig+0x21a>
            print_error(__func__, __LINE__);
 80026e6:	4840      	ldr	r0, [pc, #256]	@ (80027e8 <resetConfig+0x360>)
 80026e8:	4941      	ldr	r1, [pc, #260]	@ (80027f0 <resetConfig+0x368>)
 80026ea:	f002 fe09 	bl	8005300 <print_error>
 80026ee:	e7d8      	b.n	80026a2 <resetConfig+0x21a>
  return (*((__IO uint8_t *)&SPIx->DR));
 80026f0:	7b23      	ldrb	r3, [r4, #12]
    uint32_t start_time = HAL_GetTick();
 80026f2:	f004 fe1b 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80026f6:	2302      	movs	r3, #2
 80026f8:	4698      	mov	r8, r3
        if ((HAL_GetTick() - start_time) > 1000)
 80026fa:	23fa      	movs	r3, #250	@ 0xfa
 80026fc:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 80026fe:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8002700:	4699      	mov	r9, r3
 8002702:	4c37      	ldr	r4, [pc, #220]	@ (80027e0 <resetConfig+0x358>)
 8002704:	4642      	mov	r2, r8
 8002706:	68a3      	ldr	r3, [r4, #8]
 8002708:	421a      	tst	r2, r3
 800270a:	d018      	beq.n	800273e <resetConfig+0x2b6>
  *spidr = TxData;
 800270c:	233c      	movs	r3, #60	@ 0x3c
 800270e:	7323      	strb	r3, [r4, #12]
    start_time = HAL_GetTick();
 8002710:	f004 fe0c 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002714:	2301      	movs	r3, #1
 8002716:	4698      	mov	r8, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8002718:	23fa      	movs	r3, #250	@ 0xfa
 800271a:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 800271c:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 800271e:	4699      	mov	r9, r3
 8002720:	4c2f      	ldr	r4, [pc, #188]	@ (80027e0 <resetConfig+0x358>)
 8002722:	4642      	mov	r2, r8
 8002724:	68a3      	ldr	r3, [r4, #8]
 8002726:	421a      	tst	r2, r3
 8002728:	d113      	bne.n	8002752 <resetConfig+0x2ca>
 800272a:	f004 fdff 	bl	800732c <HAL_GetTick>
 800272e:	1b80      	subs	r0, r0, r6
 8002730:	4548      	cmp	r0, r9
 8002732:	d9f6      	bls.n	8002722 <resetConfig+0x29a>
            print_error(__func__, __LINE__);
 8002734:	482c      	ldr	r0, [pc, #176]	@ (80027e8 <resetConfig+0x360>)
 8002736:	492d      	ldr	r1, [pc, #180]	@ (80027ec <resetConfig+0x364>)
 8002738:	f002 fde2 	bl	8005300 <print_error>
 800273c:	e7f1      	b.n	8002722 <resetConfig+0x29a>
        if ((HAL_GetTick() - start_time) > 1000)
 800273e:	f004 fdf5 	bl	800732c <HAL_GetTick>
 8002742:	1b80      	subs	r0, r0, r6
 8002744:	4548      	cmp	r0, r9
 8002746:	d9dd      	bls.n	8002704 <resetConfig+0x27c>
            print_error(__func__, __LINE__);
 8002748:	4827      	ldr	r0, [pc, #156]	@ (80027e8 <resetConfig+0x360>)
 800274a:	4929      	ldr	r1, [pc, #164]	@ (80027f0 <resetConfig+0x368>)
 800274c:	f002 fdd8 	bl	8005300 <print_error>
 8002750:	e7d8      	b.n	8002704 <resetConfig+0x27c>
        RTC_H();
 8002752:	2280      	movs	r2, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 8002754:	7b23      	ldrb	r3, [r4, #12]
 8002756:	4b23      	ldr	r3, [pc, #140]	@ (80027e4 <resetConfig+0x35c>)
 8002758:	01d2      	lsls	r2, r2, #7
 800275a:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800275c:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002760:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002764:	b672      	cpsid	i
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 8002766:	2340      	movs	r3, #64	@ 0x40
 8002768:	6822      	ldr	r2, [r4, #0]
 800276a:	4213      	tst	r3, r2
 800276c:	d102      	bne.n	8002774 <resetConfig+0x2ec>
        SPI1->CR1 |= SPI_CR1_SPE;
 800276e:	6822      	ldr	r2, [r4, #0]
 8002770:	4313      	orrs	r3, r2
 8002772:	6023      	str	r3, [r4, #0]
        RTC_L();
 8002774:	2280      	movs	r2, #128	@ 0x80
 8002776:	4b1b      	ldr	r3, [pc, #108]	@ (80027e4 <resetConfig+0x35c>)
 8002778:	05d2      	lsls	r2, r2, #23
 800277a:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 800277c:	f004 fdd6 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002780:	2302      	movs	r3, #2
 8002782:	4698      	mov	r8, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8002784:	23fa      	movs	r3, #250	@ 0xfa
 8002786:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 8002788:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 800278a:	4699      	mov	r9, r3
 800278c:	4c14      	ldr	r4, [pc, #80]	@ (80027e0 <resetConfig+0x358>)
 800278e:	4642      	mov	r2, r8
 8002790:	68a3      	ldr	r3, [r4, #8]
 8002792:	421a      	tst	r2, r3
 8002794:	d018      	beq.n	80027c8 <resetConfig+0x340>
  *spidr = TxData;
 8002796:	2392      	movs	r3, #146	@ 0x92
 8002798:	7323      	strb	r3, [r4, #12]
    start_time = HAL_GetTick();
 800279a:	f004 fdc7 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800279e:	2301      	movs	r3, #1
 80027a0:	4698      	mov	r8, r3
        if ((HAL_GetTick() - start_time) > 1000)
 80027a2:	23fa      	movs	r3, #250	@ 0xfa
 80027a4:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 80027a6:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 80027a8:	4699      	mov	r9, r3
 80027aa:	4c0d      	ldr	r4, [pc, #52]	@ (80027e0 <resetConfig+0x358>)
 80027ac:	4642      	mov	r2, r8
 80027ae:	68a3      	ldr	r3, [r4, #8]
 80027b0:	421a      	tst	r2, r3
 80027b2:	d11f      	bne.n	80027f4 <resetConfig+0x36c>
 80027b4:	f004 fdba 	bl	800732c <HAL_GetTick>
 80027b8:	1b80      	subs	r0, r0, r6
 80027ba:	4548      	cmp	r0, r9
 80027bc:	d9f6      	bls.n	80027ac <resetConfig+0x324>
            print_error(__func__, __LINE__);
 80027be:	480a      	ldr	r0, [pc, #40]	@ (80027e8 <resetConfig+0x360>)
 80027c0:	490a      	ldr	r1, [pc, #40]	@ (80027ec <resetConfig+0x364>)
 80027c2:	f002 fd9d 	bl	8005300 <print_error>
 80027c6:	e7f1      	b.n	80027ac <resetConfig+0x324>
        if ((HAL_GetTick() - start_time) > 1000)
 80027c8:	f004 fdb0 	bl	800732c <HAL_GetTick>
 80027cc:	1b80      	subs	r0, r0, r6
 80027ce:	4548      	cmp	r0, r9
 80027d0:	d9dd      	bls.n	800278e <resetConfig+0x306>
            print_error(__func__, __LINE__);
 80027d2:	4805      	ldr	r0, [pc, #20]	@ (80027e8 <resetConfig+0x360>)
 80027d4:	4906      	ldr	r1, [pc, #24]	@ (80027f0 <resetConfig+0x368>)
 80027d6:	f002 fd93 	bl	8005300 <print_error>
 80027da:	e7d8      	b.n	800278e <resetConfig+0x306>
 80027dc:	0800e9e0 	.word	0x0800e9e0
 80027e0:	40013000 	.word	0x40013000
 80027e4:	50000400 	.word	0x50000400
 80027e8:	0800ea80 	.word	0x0800ea80
 80027ec:	00000285 	.word	0x00000285
 80027f0:	0000027a 	.word	0x0000027a
  return (*((__IO uint8_t *)&SPIx->DR));
 80027f4:	7b23      	ldrb	r3, [r4, #12]
    uint32_t start_time = HAL_GetTick();
 80027f6:	f004 fd99 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80027fa:	2302      	movs	r3, #2
 80027fc:	4698      	mov	r8, r3
        if ((HAL_GetTick() - start_time) > 1000)
 80027fe:	23fa      	movs	r3, #250	@ 0xfa
 8002800:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 8002802:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8002804:	4699      	mov	r9, r3
 8002806:	4cce      	ldr	r4, [pc, #824]	@ (8002b40 <resetConfig+0x6b8>)
 8002808:	4642      	mov	r2, r8
 800280a:	68a3      	ldr	r3, [r4, #8]
 800280c:	421a      	tst	r2, r3
 800280e:	d018      	beq.n	8002842 <resetConfig+0x3ba>
  *spidr = TxData;
 8002810:	23e0      	movs	r3, #224	@ 0xe0
 8002812:	7323      	strb	r3, [r4, #12]
    start_time = HAL_GetTick();
 8002814:	f004 fd8a 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002818:	2301      	movs	r3, #1
 800281a:	4698      	mov	r8, r3
        if ((HAL_GetTick() - start_time) > 1000)
 800281c:	23fa      	movs	r3, #250	@ 0xfa
 800281e:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8002820:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8002822:	4699      	mov	r9, r3
 8002824:	4cc6      	ldr	r4, [pc, #792]	@ (8002b40 <resetConfig+0x6b8>)
 8002826:	4642      	mov	r2, r8
 8002828:	68a3      	ldr	r3, [r4, #8]
 800282a:	421a      	tst	r2, r3
 800282c:	d113      	bne.n	8002856 <resetConfig+0x3ce>
 800282e:	f004 fd7d 	bl	800732c <HAL_GetTick>
 8002832:	1b80      	subs	r0, r0, r6
 8002834:	4548      	cmp	r0, r9
 8002836:	d9f6      	bls.n	8002826 <resetConfig+0x39e>
            print_error(__func__, __LINE__);
 8002838:	48c2      	ldr	r0, [pc, #776]	@ (8002b44 <resetConfig+0x6bc>)
 800283a:	49c3      	ldr	r1, [pc, #780]	@ (8002b48 <resetConfig+0x6c0>)
 800283c:	f002 fd60 	bl	8005300 <print_error>
 8002840:	e7f1      	b.n	8002826 <resetConfig+0x39e>
        if ((HAL_GetTick() - start_time) > 1000)
 8002842:	f004 fd73 	bl	800732c <HAL_GetTick>
 8002846:	1b80      	subs	r0, r0, r6
 8002848:	4548      	cmp	r0, r9
 800284a:	d9dd      	bls.n	8002808 <resetConfig+0x380>
            print_error(__func__, __LINE__);
 800284c:	48bd      	ldr	r0, [pc, #756]	@ (8002b44 <resetConfig+0x6bc>)
 800284e:	49bf      	ldr	r1, [pc, #764]	@ (8002b4c <resetConfig+0x6c4>)
 8002850:	f002 fd56 	bl	8005300 <print_error>
 8002854:	e7d8      	b.n	8002808 <resetConfig+0x380>
        RTC_H();
 8002856:	2280      	movs	r2, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 8002858:	7b23      	ldrb	r3, [r4, #12]
 800285a:	4bbd      	ldr	r3, [pc, #756]	@ (8002b50 <resetConfig+0x6c8>)
 800285c:	01d2      	lsls	r2, r2, #7
 800285e:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002860:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002864:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002868:	b672      	cpsid	i
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 800286a:	2340      	movs	r3, #64	@ 0x40
 800286c:	6822      	ldr	r2, [r4, #0]
 800286e:	4213      	tst	r3, r2
 8002870:	d102      	bne.n	8002878 <resetConfig+0x3f0>
        SPI1->CR1 |= SPI_CR1_SPE;
 8002872:	6822      	ldr	r2, [r4, #0]
 8002874:	4313      	orrs	r3, r2
 8002876:	6023      	str	r3, [r4, #0]
        RTC_L();
 8002878:	2280      	movs	r2, #128	@ 0x80
 800287a:	4bb5      	ldr	r3, [pc, #724]	@ (8002b50 <resetConfig+0x6c8>)
 800287c:	05d2      	lsls	r2, r2, #23
 800287e:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 8002880:	f004 fd54 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002884:	2302      	movs	r3, #2
 8002886:	4698      	mov	r8, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8002888:	23fa      	movs	r3, #250	@ 0xfa
 800288a:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 800288c:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 800288e:	4699      	mov	r9, r3
 8002890:	4cab      	ldr	r4, [pc, #684]	@ (8002b40 <resetConfig+0x6b8>)
 8002892:	4642      	mov	r2, r8
 8002894:	68a3      	ldr	r3, [r4, #8]
 8002896:	421a      	tst	r2, r3
 8002898:	d018      	beq.n	80028cc <resetConfig+0x444>
  *spidr = TxData;
 800289a:	2393      	movs	r3, #147	@ 0x93
 800289c:	7323      	strb	r3, [r4, #12]
    start_time = HAL_GetTick();
 800289e:	f004 fd45 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80028a2:	2301      	movs	r3, #1
 80028a4:	4698      	mov	r8, r3
        if ((HAL_GetTick() - start_time) > 1000)
 80028a6:	23fa      	movs	r3, #250	@ 0xfa
 80028a8:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 80028aa:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 80028ac:	4699      	mov	r9, r3
 80028ae:	4ca4      	ldr	r4, [pc, #656]	@ (8002b40 <resetConfig+0x6b8>)
 80028b0:	4642      	mov	r2, r8
 80028b2:	68a3      	ldr	r3, [r4, #8]
 80028b4:	421a      	tst	r2, r3
 80028b6:	d113      	bne.n	80028e0 <resetConfig+0x458>
 80028b8:	f004 fd38 	bl	800732c <HAL_GetTick>
 80028bc:	1b80      	subs	r0, r0, r6
 80028be:	4548      	cmp	r0, r9
 80028c0:	d9f6      	bls.n	80028b0 <resetConfig+0x428>
            print_error(__func__, __LINE__);
 80028c2:	48a0      	ldr	r0, [pc, #640]	@ (8002b44 <resetConfig+0x6bc>)
 80028c4:	49a0      	ldr	r1, [pc, #640]	@ (8002b48 <resetConfig+0x6c0>)
 80028c6:	f002 fd1b 	bl	8005300 <print_error>
 80028ca:	e7f1      	b.n	80028b0 <resetConfig+0x428>
        if ((HAL_GetTick() - start_time) > 1000)
 80028cc:	f004 fd2e 	bl	800732c <HAL_GetTick>
 80028d0:	1b80      	subs	r0, r0, r6
 80028d2:	4548      	cmp	r0, r9
 80028d4:	d9dd      	bls.n	8002892 <resetConfig+0x40a>
            print_error(__func__, __LINE__);
 80028d6:	489b      	ldr	r0, [pc, #620]	@ (8002b44 <resetConfig+0x6bc>)
 80028d8:	499c      	ldr	r1, [pc, #624]	@ (8002b4c <resetConfig+0x6c4>)
 80028da:	f002 fd11 	bl	8005300 <print_error>
 80028de:	e7d8      	b.n	8002892 <resetConfig+0x40a>
  return (*((__IO uint8_t *)&SPIx->DR));
 80028e0:	7b23      	ldrb	r3, [r4, #12]
    uint32_t start_time = HAL_GetTick();
 80028e2:	f004 fd23 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80028e6:	2302      	movs	r3, #2
 80028e8:	4698      	mov	r8, r3
        if ((HAL_GetTick() - start_time) > 1000)
 80028ea:	23fa      	movs	r3, #250	@ 0xfa
 80028ec:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 80028ee:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 80028f0:	4699      	mov	r9, r3
 80028f2:	4c93      	ldr	r4, [pc, #588]	@ (8002b40 <resetConfig+0x6b8>)
 80028f4:	4642      	mov	r2, r8
 80028f6:	68a3      	ldr	r3, [r4, #8]
 80028f8:	421a      	tst	r2, r3
 80028fa:	d018      	beq.n	800292e <resetConfig+0x4a6>
  *spidr = TxData;
 80028fc:	2326      	movs	r3, #38	@ 0x26
 80028fe:	7323      	strb	r3, [r4, #12]
    start_time = HAL_GetTick();
 8002900:	f004 fd14 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002904:	2301      	movs	r3, #1
 8002906:	4698      	mov	r8, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8002908:	23fa      	movs	r3, #250	@ 0xfa
 800290a:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 800290c:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 800290e:	4699      	mov	r9, r3
 8002910:	4c8b      	ldr	r4, [pc, #556]	@ (8002b40 <resetConfig+0x6b8>)
 8002912:	4642      	mov	r2, r8
 8002914:	68a3      	ldr	r3, [r4, #8]
 8002916:	421a      	tst	r2, r3
 8002918:	d113      	bne.n	8002942 <resetConfig+0x4ba>
 800291a:	f004 fd07 	bl	800732c <HAL_GetTick>
 800291e:	1b80      	subs	r0, r0, r6
 8002920:	4548      	cmp	r0, r9
 8002922:	d9f6      	bls.n	8002912 <resetConfig+0x48a>
            print_error(__func__, __LINE__);
 8002924:	4887      	ldr	r0, [pc, #540]	@ (8002b44 <resetConfig+0x6bc>)
 8002926:	4988      	ldr	r1, [pc, #544]	@ (8002b48 <resetConfig+0x6c0>)
 8002928:	f002 fcea 	bl	8005300 <print_error>
 800292c:	e7f1      	b.n	8002912 <resetConfig+0x48a>
        if ((HAL_GetTick() - start_time) > 1000)
 800292e:	f004 fcfd 	bl	800732c <HAL_GetTick>
 8002932:	1b80      	subs	r0, r0, r6
 8002934:	4548      	cmp	r0, r9
 8002936:	d9dd      	bls.n	80028f4 <resetConfig+0x46c>
            print_error(__func__, __LINE__);
 8002938:	4882      	ldr	r0, [pc, #520]	@ (8002b44 <resetConfig+0x6bc>)
 800293a:	4984      	ldr	r1, [pc, #528]	@ (8002b4c <resetConfig+0x6c4>)
 800293c:	f002 fce0 	bl	8005300 <print_error>
 8002940:	e7d8      	b.n	80028f4 <resetConfig+0x46c>
        RTC_H();
 8002942:	2280      	movs	r2, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 8002944:	7b23      	ldrb	r3, [r4, #12]
 8002946:	4b82      	ldr	r3, [pc, #520]	@ (8002b50 <resetConfig+0x6c8>)
 8002948:	01d2      	lsls	r2, r2, #7
 800294a:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800294c:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002950:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002954:	b672      	cpsid	i
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 8002956:	2340      	movs	r3, #64	@ 0x40
 8002958:	6822      	ldr	r2, [r4, #0]
 800295a:	4213      	tst	r3, r2
 800295c:	d102      	bne.n	8002964 <resetConfig+0x4dc>
        SPI1->CR1 |= SPI_CR1_SPE;
 800295e:	6822      	ldr	r2, [r4, #0]
 8002960:	4313      	orrs	r3, r2
 8002962:	6023      	str	r3, [r4, #0]
        RTC_L();
 8002964:	2280      	movs	r2, #128	@ 0x80
 8002966:	4b7a      	ldr	r3, [pc, #488]	@ (8002b50 <resetConfig+0x6c8>)
 8002968:	05d2      	lsls	r2, r2, #23
 800296a:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 800296c:	f004 fcde 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 8002970:	23fa      	movs	r3, #250	@ 0xfa
 8002972:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 8002974:	0006      	movs	r6, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002976:	2702      	movs	r7, #2
        if ((HAL_GetTick() - start_time) > 1000)
 8002978:	4699      	mov	r9, r3
 800297a:	4c71      	ldr	r4, [pc, #452]	@ (8002b40 <resetConfig+0x6b8>)
 800297c:	68a3      	ldr	r3, [r4, #8]
 800297e:	421f      	tst	r7, r3
 8002980:	d016      	beq.n	80029b0 <resetConfig+0x528>
  *spidr = TxData;
 8002982:	2397      	movs	r3, #151	@ 0x97
 8002984:	7323      	strb	r3, [r4, #12]
    start_time = HAL_GetTick();
 8002986:	f004 fcd1 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 800298a:	23fa      	movs	r3, #250	@ 0xfa
 800298c:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 800298e:	0006      	movs	r6, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002990:	2701      	movs	r7, #1
        if ((HAL_GetTick() - start_time) > 1000)
 8002992:	4699      	mov	r9, r3
 8002994:	4c6a      	ldr	r4, [pc, #424]	@ (8002b40 <resetConfig+0x6b8>)
 8002996:	68a3      	ldr	r3, [r4, #8]
 8002998:	421f      	tst	r7, r3
 800299a:	d113      	bne.n	80029c4 <resetConfig+0x53c>
 800299c:	f004 fcc6 	bl	800732c <HAL_GetTick>
 80029a0:	1b80      	subs	r0, r0, r6
 80029a2:	4548      	cmp	r0, r9
 80029a4:	d9f7      	bls.n	8002996 <resetConfig+0x50e>
            print_error(__func__, __LINE__);
 80029a6:	4867      	ldr	r0, [pc, #412]	@ (8002b44 <resetConfig+0x6bc>)
 80029a8:	4967      	ldr	r1, [pc, #412]	@ (8002b48 <resetConfig+0x6c0>)
 80029aa:	f002 fca9 	bl	8005300 <print_error>
 80029ae:	e7f2      	b.n	8002996 <resetConfig+0x50e>
        if ((HAL_GetTick() - start_time) > 1000)
 80029b0:	f004 fcbc 	bl	800732c <HAL_GetTick>
 80029b4:	1b80      	subs	r0, r0, r6
 80029b6:	4548      	cmp	r0, r9
 80029b8:	d9e0      	bls.n	800297c <resetConfig+0x4f4>
            print_error(__func__, __LINE__);
 80029ba:	4862      	ldr	r0, [pc, #392]	@ (8002b44 <resetConfig+0x6bc>)
 80029bc:	4963      	ldr	r1, [pc, #396]	@ (8002b4c <resetConfig+0x6c4>)
 80029be:	f002 fc9f 	bl	8005300 <print_error>
 80029c2:	e7db      	b.n	800297c <resetConfig+0x4f4>
  return (*((__IO uint8_t *)&SPIx->DR));
 80029c4:	7b23      	ldrb	r3, [r4, #12]
    uint32_t start_time = HAL_GetTick();
 80029c6:	f004 fcb1 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 80029ca:	23fa      	movs	r3, #250	@ 0xfa
 80029cc:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 80029ce:	0006      	movs	r6, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80029d0:	2702      	movs	r7, #2
        if ((HAL_GetTick() - start_time) > 1000)
 80029d2:	4699      	mov	r9, r3
 80029d4:	4c5a      	ldr	r4, [pc, #360]	@ (8002b40 <resetConfig+0x6b8>)
 80029d6:	68a3      	ldr	r3, [r4, #8]
 80029d8:	421f      	tst	r7, r3
 80029da:	d016      	beq.n	8002a0a <resetConfig+0x582>
  *spidr = TxData;
 80029dc:	2300      	movs	r3, #0
 80029de:	7323      	strb	r3, [r4, #12]
    start_time = HAL_GetTick();
 80029e0:	f004 fca4 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 80029e4:	23fa      	movs	r3, #250	@ 0xfa
 80029e6:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 80029e8:	0007      	movs	r7, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80029ea:	2601      	movs	r6, #1
        if ((HAL_GetTick() - start_time) > 1000)
 80029ec:	4699      	mov	r9, r3
 80029ee:	4c54      	ldr	r4, [pc, #336]	@ (8002b40 <resetConfig+0x6b8>)
 80029f0:	68a3      	ldr	r3, [r4, #8]
 80029f2:	421e      	tst	r6, r3
 80029f4:	d113      	bne.n	8002a1e <resetConfig+0x596>
 80029f6:	f004 fc99 	bl	800732c <HAL_GetTick>
 80029fa:	1bc0      	subs	r0, r0, r7
 80029fc:	4548      	cmp	r0, r9
 80029fe:	d9f7      	bls.n	80029f0 <resetConfig+0x568>
            print_error(__func__, __LINE__);
 8002a00:	4850      	ldr	r0, [pc, #320]	@ (8002b44 <resetConfig+0x6bc>)
 8002a02:	4951      	ldr	r1, [pc, #324]	@ (8002b48 <resetConfig+0x6c0>)
 8002a04:	f002 fc7c 	bl	8005300 <print_error>
 8002a08:	e7f2      	b.n	80029f0 <resetConfig+0x568>
        if ((HAL_GetTick() - start_time) > 1000)
 8002a0a:	f004 fc8f 	bl	800732c <HAL_GetTick>
 8002a0e:	1b80      	subs	r0, r0, r6
 8002a10:	4548      	cmp	r0, r9
 8002a12:	d9e0      	bls.n	80029d6 <resetConfig+0x54e>
            print_error(__func__, __LINE__);
 8002a14:	484b      	ldr	r0, [pc, #300]	@ (8002b44 <resetConfig+0x6bc>)
 8002a16:	494d      	ldr	r1, [pc, #308]	@ (8002b4c <resetConfig+0x6c4>)
 8002a18:	f002 fc72 	bl	8005300 <print_error>
 8002a1c:	e7db      	b.n	80029d6 <resetConfig+0x54e>
        RTC_H();
 8002a1e:	2280      	movs	r2, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 8002a20:	7b23      	ldrb	r3, [r4, #12]
 8002a22:	4b4b      	ldr	r3, [pc, #300]	@ (8002b50 <resetConfig+0x6c8>)
 8002a24:	01d2      	lsls	r2, r2, #7
 8002a26:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a28:	f388 8810 	msr	PRIMASK, r8
    if ((flags & RESET_PRESERVE_REPEATING_TIMER) != 0)
 8002a2c:	422e      	tst	r6, r5
 8002a2e:	d055      	beq.n	8002adc <resetConfig+0x654>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002a30:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002a34:	b672      	cpsid	i
    RTC_L();
 8002a36:	2280      	movs	r2, #128	@ 0x80
 8002a38:	05d2      	lsls	r2, r2, #23
 8002a3a:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 8002a3c:	f004 fc76 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 8002a40:	23fa      	movs	r3, #250	@ 0xfa
 8002a42:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 8002a44:	0004      	movs	r4, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002a46:	2502      	movs	r5, #2
        if ((HAL_GetTick() - start_time) > 1000)
 8002a48:	4698      	mov	r8, r3
 8002a4a:	4f3d      	ldr	r7, [pc, #244]	@ (8002b40 <resetConfig+0x6b8>)
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	421d      	tst	r5, r3
 8002a50:	d016      	beq.n	8002a80 <resetConfig+0x5f8>
  *spidr = TxData;
 8002a52:	2318      	movs	r3, #24
 8002a54:	733b      	strb	r3, [r7, #12]
    start_time = HAL_GetTick();
 8002a56:	f004 fc69 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 8002a5a:	23fa      	movs	r3, #250	@ 0xfa
 8002a5c:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8002a5e:	0005      	movs	r5, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002a60:	2701      	movs	r7, #1
        if ((HAL_GetTick() - start_time) > 1000)
 8002a62:	4698      	mov	r8, r3
 8002a64:	4c36      	ldr	r4, [pc, #216]	@ (8002b40 <resetConfig+0x6b8>)
 8002a66:	68a3      	ldr	r3, [r4, #8]
 8002a68:	421f      	tst	r7, r3
 8002a6a:	d113      	bne.n	8002a94 <resetConfig+0x60c>
 8002a6c:	f004 fc5e 	bl	800732c <HAL_GetTick>
 8002a70:	1b40      	subs	r0, r0, r5
 8002a72:	4540      	cmp	r0, r8
 8002a74:	d9f7      	bls.n	8002a66 <resetConfig+0x5de>
            print_error(__func__, __LINE__);
 8002a76:	4833      	ldr	r0, [pc, #204]	@ (8002b44 <resetConfig+0x6bc>)
 8002a78:	4933      	ldr	r1, [pc, #204]	@ (8002b48 <resetConfig+0x6c0>)
 8002a7a:	f002 fc41 	bl	8005300 <print_error>
 8002a7e:	e7f2      	b.n	8002a66 <resetConfig+0x5de>
        if ((HAL_GetTick() - start_time) > 1000)
 8002a80:	f004 fc54 	bl	800732c <HAL_GetTick>
 8002a84:	1b00      	subs	r0, r0, r4
 8002a86:	4540      	cmp	r0, r8
 8002a88:	d9e0      	bls.n	8002a4c <resetConfig+0x5c4>
            print_error(__func__, __LINE__);
 8002a8a:	482e      	ldr	r0, [pc, #184]	@ (8002b44 <resetConfig+0x6bc>)
 8002a8c:	492f      	ldr	r1, [pc, #188]	@ (8002b4c <resetConfig+0x6c4>)
 8002a8e:	f002 fc37 	bl	8005300 <print_error>
 8002a92:	e7db      	b.n	8002a4c <resetConfig+0x5c4>
  return (*((__IO uint8_t *)&SPIx->DR));
 8002a94:	7b23      	ldrb	r3, [r4, #12]
    uint32_t start_time = HAL_GetTick();
 8002a96:	f004 fc49 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 8002a9a:	23fa      	movs	r3, #250	@ 0xfa
 8002a9c:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 8002a9e:	0004      	movs	r4, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002aa0:	2702      	movs	r7, #2
        if ((HAL_GetTick() - start_time) > 1000)
 8002aa2:	4698      	mov	r8, r3
 8002aa4:	4d26      	ldr	r5, [pc, #152]	@ (8002b40 <resetConfig+0x6b8>)
 8002aa6:	68ab      	ldr	r3, [r5, #8]
 8002aa8:	421f      	tst	r7, r3
 8002aaa:	d100      	bne.n	8002aae <resetConfig+0x626>
 8002aac:	e092      	b.n	8002bd4 <resetConfig+0x74c>
  *spidr = TxData;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	732b      	strb	r3, [r5, #12]
    start_time = HAL_GetTick();
 8002ab2:	f004 fc3b 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 8002ab6:	23fa      	movs	r3, #250	@ 0xfa
 8002ab8:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8002aba:	0004      	movs	r4, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002abc:	2701      	movs	r7, #1
        if ((HAL_GetTick() - start_time) > 1000)
 8002abe:	4698      	mov	r8, r3
 8002ac0:	4d1f      	ldr	r5, [pc, #124]	@ (8002b40 <resetConfig+0x6b8>)
 8002ac2:	68ab      	ldr	r3, [r5, #8]
 8002ac4:	421f      	tst	r7, r3
 8002ac6:	d145      	bne.n	8002b54 <resetConfig+0x6cc>
 8002ac8:	f004 fc30 	bl	800732c <HAL_GetTick>
 8002acc:	1b00      	subs	r0, r0, r4
 8002ace:	4540      	cmp	r0, r8
 8002ad0:	d9f7      	bls.n	8002ac2 <resetConfig+0x63a>
            print_error(__func__, __LINE__);
 8002ad2:	481c      	ldr	r0, [pc, #112]	@ (8002b44 <resetConfig+0x6bc>)
 8002ad4:	491c      	ldr	r1, [pc, #112]	@ (8002b48 <resetConfig+0x6c0>)
 8002ad6:	f002 fc13 	bl	8005300 <print_error>
 8002ada:	e7f2      	b.n	8002ac2 <resetConfig+0x63a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002adc:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002ae0:	b672      	cpsid	i
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 8002ae2:	2340      	movs	r3, #64	@ 0x40
 8002ae4:	6822      	ldr	r2, [r4, #0]
 8002ae6:	4213      	tst	r3, r2
 8002ae8:	d102      	bne.n	8002af0 <resetConfig+0x668>
        SPI1->CR1 |= SPI_CR1_SPE;
 8002aea:	6822      	ldr	r2, [r4, #0]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	6023      	str	r3, [r4, #0]
        RTC_L();
 8002af0:	2280      	movs	r2, #128	@ 0x80
 8002af2:	4b17      	ldr	r3, [pc, #92]	@ (8002b50 <resetConfig+0x6c8>)
 8002af4:	05d2      	lsls	r2, r2, #23
 8002af6:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 8002af8:	f004 fc18 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 8002afc:	23fa      	movs	r3, #250	@ 0xfa
 8002afe:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 8002b00:	0004      	movs	r4, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002b02:	2702      	movs	r7, #2
        if ((HAL_GetTick() - start_time) > 1000)
 8002b04:	4698      	mov	r8, r3
 8002b06:	4d0e      	ldr	r5, [pc, #56]	@ (8002b40 <resetConfig+0x6b8>)
 8002b08:	68ab      	ldr	r3, [r5, #8]
 8002b0a:	421f      	tst	r7, r3
 8002b0c:	d100      	bne.n	8002b10 <resetConfig+0x688>
 8002b0e:	e37e      	b.n	800320e <resetConfig+0xd86>
  *spidr = TxData;
 8002b10:	2398      	movs	r3, #152	@ 0x98
 8002b12:	732b      	strb	r3, [r5, #12]
    start_time = HAL_GetTick();
 8002b14:	f004 fc0a 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 8002b18:	23fa      	movs	r3, #250	@ 0xfa
 8002b1a:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8002b1c:	0005      	movs	r5, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002b1e:	2701      	movs	r7, #1
        if ((HAL_GetTick() - start_time) > 1000)
 8002b20:	4698      	mov	r8, r3
 8002b22:	4c07      	ldr	r4, [pc, #28]	@ (8002b40 <resetConfig+0x6b8>)
 8002b24:	68a3      	ldr	r3, [r4, #8]
 8002b26:	421f      	tst	r7, r3
 8002b28:	d000      	beq.n	8002b2c <resetConfig+0x6a4>
 8002b2a:	e34d      	b.n	80031c8 <resetConfig+0xd40>
 8002b2c:	f004 fbfe 	bl	800732c <HAL_GetTick>
 8002b30:	1b40      	subs	r0, r0, r5
 8002b32:	4540      	cmp	r0, r8
 8002b34:	d9f6      	bls.n	8002b24 <resetConfig+0x69c>
            print_error(__func__, __LINE__);
 8002b36:	4803      	ldr	r0, [pc, #12]	@ (8002b44 <resetConfig+0x6bc>)
 8002b38:	4903      	ldr	r1, [pc, #12]	@ (8002b48 <resetConfig+0x6c0>)
 8002b3a:	f002 fbe1 	bl	8005300 <print_error>
 8002b3e:	e7f1      	b.n	8002b24 <resetConfig+0x69c>
 8002b40:	40013000 	.word	0x40013000
 8002b44:	0800ea80 	.word	0x0800ea80
 8002b48:	00000285 	.word	0x00000285
 8002b4c:	0000027a 	.word	0x0000027a
 8002b50:	50000400 	.word	0x50000400
    RTC_H();
 8002b54:	2180      	movs	r1, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 8002b56:	7b2b      	ldrb	r3, [r5, #12]
 8002b58:	4aca      	ldr	r2, [pc, #808]	@ (8002e84 <resetConfig+0x9fc>)
 8002b5a:	01c9      	lsls	r1, r1, #7
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	6191      	str	r1, [r2, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b60:	f386 8810 	msr	PRIMASK, r6
    uint8_t newValue = (value & andValue) | orValue;
 8002b64:	221c      	movs	r2, #28
 8002b66:	2423      	movs	r4, #35	@ 0x23
 8002b68:	4393      	bics	r3, r2
 8002b6a:	431c      	orrs	r4, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002b6c:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002b70:	b672      	cpsid	i
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 8002b72:	2340      	movs	r3, #64	@ 0x40
 8002b74:	682a      	ldr	r2, [r5, #0]
 8002b76:	4213      	tst	r3, r2
 8002b78:	d102      	bne.n	8002b80 <resetConfig+0x6f8>
        SPI1->CR1 |= SPI_CR1_SPE;
 8002b7a:	682a      	ldr	r2, [r5, #0]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	602b      	str	r3, [r5, #0]
        RTC_L();
 8002b80:	2280      	movs	r2, #128	@ 0x80
 8002b82:	4bc0      	ldr	r3, [pc, #768]	@ (8002e84 <resetConfig+0x9fc>)
 8002b84:	05d2      	lsls	r2, r2, #23
 8002b86:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 8002b88:	f004 fbd0 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	4698      	mov	r8, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8002b90:	23fa      	movs	r3, #250	@ 0xfa
 8002b92:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 8002b94:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8002b96:	4699      	mov	r9, r3
 8002b98:	4dbb      	ldr	r5, [pc, #748]	@ (8002e88 <resetConfig+0xa00>)
 8002b9a:	4642      	mov	r2, r8
 8002b9c:	68ab      	ldr	r3, [r5, #8]
 8002b9e:	421a      	tst	r2, r3
 8002ba0:	d048      	beq.n	8002c34 <resetConfig+0x7ac>
  *spidr = TxData;
 8002ba2:	2398      	movs	r3, #152	@ 0x98
 8002ba4:	732b      	strb	r3, [r5, #12]
    start_time = HAL_GetTick();
 8002ba6:	f004 fbc1 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002baa:	2301      	movs	r3, #1
 8002bac:	4698      	mov	r8, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8002bae:	23fa      	movs	r3, #250	@ 0xfa
 8002bb0:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8002bb2:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8002bb4:	4699      	mov	r9, r3
 8002bb6:	4db4      	ldr	r5, [pc, #720]	@ (8002e88 <resetConfig+0xa00>)
 8002bb8:	4642      	mov	r2, r8
 8002bba:	68ab      	ldr	r3, [r5, #8]
 8002bbc:	421a      	tst	r2, r3
 8002bbe:	d114      	bne.n	8002bea <resetConfig+0x762>
 8002bc0:	f004 fbb4 	bl	800732c <HAL_GetTick>
 8002bc4:	1b80      	subs	r0, r0, r6
 8002bc6:	4548      	cmp	r0, r9
 8002bc8:	d9f6      	bls.n	8002bb8 <resetConfig+0x730>
            print_error(__func__, __LINE__);
 8002bca:	48b0      	ldr	r0, [pc, #704]	@ (8002e8c <resetConfig+0xa04>)
 8002bcc:	49b0      	ldr	r1, [pc, #704]	@ (8002e90 <resetConfig+0xa08>)
 8002bce:	f002 fb97 	bl	8005300 <print_error>
 8002bd2:	e7f1      	b.n	8002bb8 <resetConfig+0x730>
        if ((HAL_GetTick() - start_time) > 1000)
 8002bd4:	f004 fbaa 	bl	800732c <HAL_GetTick>
 8002bd8:	1b00      	subs	r0, r0, r4
 8002bda:	4540      	cmp	r0, r8
 8002bdc:	d800      	bhi.n	8002be0 <resetConfig+0x758>
 8002bde:	e762      	b.n	8002aa6 <resetConfig+0x61e>
            print_error(__func__, __LINE__);
 8002be0:	48aa      	ldr	r0, [pc, #680]	@ (8002e8c <resetConfig+0xa04>)
 8002be2:	49ac      	ldr	r1, [pc, #688]	@ (8002e94 <resetConfig+0xa0c>)
 8002be4:	f002 fb8c 	bl	8005300 <print_error>
 8002be8:	e75d      	b.n	8002aa6 <resetConfig+0x61e>
  return (*((__IO uint8_t *)&SPIx->DR));
 8002bea:	7b2b      	ldrb	r3, [r5, #12]
    uint32_t start_time = HAL_GetTick();
 8002bec:	f004 fb9e 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	4698      	mov	r8, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8002bf4:	23fa      	movs	r3, #250	@ 0xfa
 8002bf6:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 8002bf8:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8002bfa:	4699      	mov	r9, r3
 8002bfc:	4da2      	ldr	r5, [pc, #648]	@ (8002e88 <resetConfig+0xa00>)
 8002bfe:	4642      	mov	r2, r8
 8002c00:	68ab      	ldr	r3, [r5, #8]
 8002c02:	421a      	tst	r2, r3
 8002c04:	d100      	bne.n	8002c08 <resetConfig+0x780>
 8002c06:	e2ca      	b.n	800319e <resetConfig+0xd16>
  *spidr = TxData;
 8002c08:	732c      	strb	r4, [r5, #12]
    start_time = HAL_GetTick();
 8002c0a:	f004 fb8f 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 8002c0e:	23fa      	movs	r3, #250	@ 0xfa
 8002c10:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8002c12:	0005      	movs	r5, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002c14:	2601      	movs	r6, #1
        if ((HAL_GetTick() - start_time) > 1000)
 8002c16:	4698      	mov	r8, r3
 8002c18:	4c9b      	ldr	r4, [pc, #620]	@ (8002e88 <resetConfig+0xa00>)
 8002c1a:	68a3      	ldr	r3, [r4, #8]
 8002c1c:	421e      	tst	r6, r3
 8002c1e:	d113      	bne.n	8002c48 <resetConfig+0x7c0>
 8002c20:	f004 fb84 	bl	800732c <HAL_GetTick>
 8002c24:	1b40      	subs	r0, r0, r5
 8002c26:	4540      	cmp	r0, r8
 8002c28:	d9f7      	bls.n	8002c1a <resetConfig+0x792>
            print_error(__func__, __LINE__);
 8002c2a:	4898      	ldr	r0, [pc, #608]	@ (8002e8c <resetConfig+0xa04>)
 8002c2c:	4998      	ldr	r1, [pc, #608]	@ (8002e90 <resetConfig+0xa08>)
 8002c2e:	f002 fb67 	bl	8005300 <print_error>
 8002c32:	e7f2      	b.n	8002c1a <resetConfig+0x792>
        if ((HAL_GetTick() - start_time) > 1000)
 8002c34:	f004 fb7a 	bl	800732c <HAL_GetTick>
 8002c38:	1b80      	subs	r0, r0, r6
 8002c3a:	4548      	cmp	r0, r9
 8002c3c:	d9ad      	bls.n	8002b9a <resetConfig+0x712>
            print_error(__func__, __LINE__);
 8002c3e:	4893      	ldr	r0, [pc, #588]	@ (8002e8c <resetConfig+0xa04>)
 8002c40:	4994      	ldr	r1, [pc, #592]	@ (8002e94 <resetConfig+0xa0c>)
 8002c42:	f002 fb5d 	bl	8005300 <print_error>
 8002c46:	e7a8      	b.n	8002b9a <resetConfig+0x712>
        RTC_H();
 8002c48:	2280      	movs	r2, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 8002c4a:	7b23      	ldrb	r3, [r4, #12]
 8002c4c:	4b8d      	ldr	r3, [pc, #564]	@ (8002e84 <resetConfig+0x9fc>)
 8002c4e:	01d2      	lsls	r2, r2, #7
 8002c50:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c52:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002c56:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002c5a:	b672      	cpsid	i
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 8002c5c:	2240      	movs	r2, #64	@ 0x40
 8002c5e:	4b8a      	ldr	r3, [pc, #552]	@ (8002e88 <resetConfig+0xa00>)
 8002c60:	6819      	ldr	r1, [r3, #0]
 8002c62:	420a      	tst	r2, r1
 8002c64:	d102      	bne.n	8002c6c <resetConfig+0x7e4>
        SPI1->CR1 |= SPI_CR1_SPE;
 8002c66:	6819      	ldr	r1, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	601a      	str	r2, [r3, #0]
        RTC_L();
 8002c6c:	2280      	movs	r2, #128	@ 0x80
 8002c6e:	4b85      	ldr	r3, [pc, #532]	@ (8002e84 <resetConfig+0x9fc>)
 8002c70:	05d2      	lsls	r2, r2, #23
 8002c72:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 8002c74:	f004 fb5a 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 8002c78:	23fa      	movs	r3, #250	@ 0xfa
 8002c7a:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 8002c7c:	0004      	movs	r4, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002c7e:	2502      	movs	r5, #2
        if ((HAL_GetTick() - start_time) > 1000)
 8002c80:	4698      	mov	r8, r3
 8002c82:	4f81      	ldr	r7, [pc, #516]	@ (8002e88 <resetConfig+0xa00>)
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	421d      	tst	r5, r3
 8002c88:	d016      	beq.n	8002cb8 <resetConfig+0x830>
  *spidr = TxData;
 8002c8a:	2399      	movs	r3, #153	@ 0x99
 8002c8c:	733b      	strb	r3, [r7, #12]
    start_time = HAL_GetTick();
 8002c8e:	f004 fb4d 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 8002c92:	23fa      	movs	r3, #250	@ 0xfa
 8002c94:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8002c96:	0005      	movs	r5, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002c98:	2701      	movs	r7, #1
        if ((HAL_GetTick() - start_time) > 1000)
 8002c9a:	4698      	mov	r8, r3
 8002c9c:	4c7a      	ldr	r4, [pc, #488]	@ (8002e88 <resetConfig+0xa00>)
 8002c9e:	68a3      	ldr	r3, [r4, #8]
 8002ca0:	421f      	tst	r7, r3
 8002ca2:	d113      	bne.n	8002ccc <resetConfig+0x844>
 8002ca4:	f004 fb42 	bl	800732c <HAL_GetTick>
 8002ca8:	1b40      	subs	r0, r0, r5
 8002caa:	4540      	cmp	r0, r8
 8002cac:	d9f7      	bls.n	8002c9e <resetConfig+0x816>
            print_error(__func__, __LINE__);
 8002cae:	4877      	ldr	r0, [pc, #476]	@ (8002e8c <resetConfig+0xa04>)
 8002cb0:	4977      	ldr	r1, [pc, #476]	@ (8002e90 <resetConfig+0xa08>)
 8002cb2:	f002 fb25 	bl	8005300 <print_error>
 8002cb6:	e7f2      	b.n	8002c9e <resetConfig+0x816>
        if ((HAL_GetTick() - start_time) > 1000)
 8002cb8:	f004 fb38 	bl	800732c <HAL_GetTick>
 8002cbc:	1b00      	subs	r0, r0, r4
 8002cbe:	4540      	cmp	r0, r8
 8002cc0:	d9e0      	bls.n	8002c84 <resetConfig+0x7fc>
            print_error(__func__, __LINE__);
 8002cc2:	4872      	ldr	r0, [pc, #456]	@ (8002e8c <resetConfig+0xa04>)
 8002cc4:	4973      	ldr	r1, [pc, #460]	@ (8002e94 <resetConfig+0xa0c>)
 8002cc6:	f002 fb1b 	bl	8005300 <print_error>
 8002cca:	e7db      	b.n	8002c84 <resetConfig+0x7fc>
  return (*((__IO uint8_t *)&SPIx->DR));
 8002ccc:	7b23      	ldrb	r3, [r4, #12]
    uint32_t start_time = HAL_GetTick();
 8002cce:	f004 fb2d 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 8002cd2:	23fa      	movs	r3, #250	@ 0xfa
 8002cd4:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 8002cd6:	0004      	movs	r4, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002cd8:	2702      	movs	r7, #2
        if ((HAL_GetTick() - start_time) > 1000)
 8002cda:	4698      	mov	r8, r3
 8002cdc:	4d6a      	ldr	r5, [pc, #424]	@ (8002e88 <resetConfig+0xa00>)
 8002cde:	68ab      	ldr	r3, [r5, #8]
 8002ce0:	421f      	tst	r7, r3
 8002ce2:	d016      	beq.n	8002d12 <resetConfig+0x88a>
  *spidr = TxData;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	732b      	strb	r3, [r5, #12]
    start_time = HAL_GetTick();
 8002ce8:	f004 fb20 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 8002cec:	23fa      	movs	r3, #250	@ 0xfa
 8002cee:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8002cf0:	0005      	movs	r5, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002cf2:	2701      	movs	r7, #1
        if ((HAL_GetTick() - start_time) > 1000)
 8002cf4:	4698      	mov	r8, r3
 8002cf6:	4c64      	ldr	r4, [pc, #400]	@ (8002e88 <resetConfig+0xa00>)
 8002cf8:	68a3      	ldr	r3, [r4, #8]
 8002cfa:	421f      	tst	r7, r3
 8002cfc:	d113      	bne.n	8002d26 <resetConfig+0x89e>
 8002cfe:	f004 fb15 	bl	800732c <HAL_GetTick>
 8002d02:	1b40      	subs	r0, r0, r5
 8002d04:	4540      	cmp	r0, r8
 8002d06:	d9f7      	bls.n	8002cf8 <resetConfig+0x870>
            print_error(__func__, __LINE__);
 8002d08:	4860      	ldr	r0, [pc, #384]	@ (8002e8c <resetConfig+0xa04>)
 8002d0a:	4961      	ldr	r1, [pc, #388]	@ (8002e90 <resetConfig+0xa08>)
 8002d0c:	f002 faf8 	bl	8005300 <print_error>
 8002d10:	e7f2      	b.n	8002cf8 <resetConfig+0x870>
        if ((HAL_GetTick() - start_time) > 1000)
 8002d12:	f004 fb0b 	bl	800732c <HAL_GetTick>
 8002d16:	1b00      	subs	r0, r0, r4
 8002d18:	4540      	cmp	r0, r8
 8002d1a:	d9e0      	bls.n	8002cde <resetConfig+0x856>
            print_error(__func__, __LINE__);
 8002d1c:	485b      	ldr	r0, [pc, #364]	@ (8002e8c <resetConfig+0xa04>)
 8002d1e:	495d      	ldr	r1, [pc, #372]	@ (8002e94 <resetConfig+0xa0c>)
 8002d20:	f002 faee 	bl	8005300 <print_error>
 8002d24:	e7db      	b.n	8002cde <resetConfig+0x856>
        RTC_H();
 8002d26:	2280      	movs	r2, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 8002d28:	7b23      	ldrb	r3, [r4, #12]
 8002d2a:	4b56      	ldr	r3, [pc, #344]	@ (8002e84 <resetConfig+0x9fc>)
 8002d2c:	01d2      	lsls	r2, r2, #7
 8002d2e:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d30:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002d34:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002d38:	b672      	cpsid	i
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 8002d3a:	2340      	movs	r3, #64	@ 0x40
 8002d3c:	6822      	ldr	r2, [r4, #0]
 8002d3e:	4213      	tst	r3, r2
 8002d40:	d102      	bne.n	8002d48 <resetConfig+0x8c0>
        SPI1->CR1 |= SPI_CR1_SPE;
 8002d42:	6822      	ldr	r2, [r4, #0]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	6023      	str	r3, [r4, #0]
        RTC_L();
 8002d48:	2280      	movs	r2, #128	@ 0x80
 8002d4a:	4b4e      	ldr	r3, [pc, #312]	@ (8002e84 <resetConfig+0x9fc>)
 8002d4c:	05d2      	lsls	r2, r2, #23
 8002d4e:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 8002d50:	f004 faec 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 8002d54:	23fa      	movs	r3, #250	@ 0xfa
 8002d56:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 8002d58:	0004      	movs	r4, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002d5a:	2702      	movs	r7, #2
        if ((HAL_GetTick() - start_time) > 1000)
 8002d5c:	4698      	mov	r8, r3
 8002d5e:	4d4a      	ldr	r5, [pc, #296]	@ (8002e88 <resetConfig+0xa00>)
 8002d60:	68ab      	ldr	r3, [r5, #8]
 8002d62:	421f      	tst	r7, r3
 8002d64:	d016      	beq.n	8002d94 <resetConfig+0x90c>
  *spidr = TxData;
 8002d66:	239a      	movs	r3, #154	@ 0x9a
 8002d68:	732b      	strb	r3, [r5, #12]
    start_time = HAL_GetTick();
 8002d6a:	f004 fadf 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 8002d6e:	23fa      	movs	r3, #250	@ 0xfa
 8002d70:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8002d72:	0005      	movs	r5, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002d74:	2701      	movs	r7, #1
        if ((HAL_GetTick() - start_time) > 1000)
 8002d76:	4698      	mov	r8, r3
 8002d78:	4c43      	ldr	r4, [pc, #268]	@ (8002e88 <resetConfig+0xa00>)
 8002d7a:	68a3      	ldr	r3, [r4, #8]
 8002d7c:	421f      	tst	r7, r3
 8002d7e:	d113      	bne.n	8002da8 <resetConfig+0x920>
 8002d80:	f004 fad4 	bl	800732c <HAL_GetTick>
 8002d84:	1b40      	subs	r0, r0, r5
 8002d86:	4540      	cmp	r0, r8
 8002d88:	d9f7      	bls.n	8002d7a <resetConfig+0x8f2>
            print_error(__func__, __LINE__);
 8002d8a:	4840      	ldr	r0, [pc, #256]	@ (8002e8c <resetConfig+0xa04>)
 8002d8c:	4940      	ldr	r1, [pc, #256]	@ (8002e90 <resetConfig+0xa08>)
 8002d8e:	f002 fab7 	bl	8005300 <print_error>
 8002d92:	e7f2      	b.n	8002d7a <resetConfig+0x8f2>
        if ((HAL_GetTick() - start_time) > 1000)
 8002d94:	f004 faca 	bl	800732c <HAL_GetTick>
 8002d98:	1b00      	subs	r0, r0, r4
 8002d9a:	4540      	cmp	r0, r8
 8002d9c:	d9e0      	bls.n	8002d60 <resetConfig+0x8d8>
            print_error(__func__, __LINE__);
 8002d9e:	483b      	ldr	r0, [pc, #236]	@ (8002e8c <resetConfig+0xa04>)
 8002da0:	493c      	ldr	r1, [pc, #240]	@ (8002e94 <resetConfig+0xa0c>)
 8002da2:	f002 faad 	bl	8005300 <print_error>
 8002da6:	e7db      	b.n	8002d60 <resetConfig+0x8d8>
  return (*((__IO uint8_t *)&SPIx->DR));
 8002da8:	7b23      	ldrb	r3, [r4, #12]
    uint32_t start_time = HAL_GetTick();
 8002daa:	f004 fabf 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 8002dae:	23fa      	movs	r3, #250	@ 0xfa
 8002db0:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 8002db2:	0004      	movs	r4, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002db4:	2702      	movs	r7, #2
        if ((HAL_GetTick() - start_time) > 1000)
 8002db6:	4698      	mov	r8, r3
 8002db8:	4d33      	ldr	r5, [pc, #204]	@ (8002e88 <resetConfig+0xa00>)
 8002dba:	68ab      	ldr	r3, [r5, #8]
 8002dbc:	421f      	tst	r7, r3
 8002dbe:	d016      	beq.n	8002dee <resetConfig+0x966>
  *spidr = TxData;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	732b      	strb	r3, [r5, #12]
    start_time = HAL_GetTick();
 8002dc4:	f004 fab2 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 8002dc8:	23fa      	movs	r3, #250	@ 0xfa
 8002dca:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8002dcc:	0005      	movs	r5, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002dce:	2701      	movs	r7, #1
        if ((HAL_GetTick() - start_time) > 1000)
 8002dd0:	4698      	mov	r8, r3
 8002dd2:	4c2d      	ldr	r4, [pc, #180]	@ (8002e88 <resetConfig+0xa00>)
 8002dd4:	68a3      	ldr	r3, [r4, #8]
 8002dd6:	421f      	tst	r7, r3
 8002dd8:	d113      	bne.n	8002e02 <resetConfig+0x97a>
 8002dda:	f004 faa7 	bl	800732c <HAL_GetTick>
 8002dde:	1b40      	subs	r0, r0, r5
 8002de0:	4540      	cmp	r0, r8
 8002de2:	d9f7      	bls.n	8002dd4 <resetConfig+0x94c>
            print_error(__func__, __LINE__);
 8002de4:	4829      	ldr	r0, [pc, #164]	@ (8002e8c <resetConfig+0xa04>)
 8002de6:	492a      	ldr	r1, [pc, #168]	@ (8002e90 <resetConfig+0xa08>)
 8002de8:	f002 fa8a 	bl	8005300 <print_error>
 8002dec:	e7f2      	b.n	8002dd4 <resetConfig+0x94c>
        if ((HAL_GetTick() - start_time) > 1000)
 8002dee:	f004 fa9d 	bl	800732c <HAL_GetTick>
 8002df2:	1b00      	subs	r0, r0, r4
 8002df4:	4540      	cmp	r0, r8
 8002df6:	d9e0      	bls.n	8002dba <resetConfig+0x932>
            print_error(__func__, __LINE__);
 8002df8:	4824      	ldr	r0, [pc, #144]	@ (8002e8c <resetConfig+0xa04>)
 8002dfa:	4926      	ldr	r1, [pc, #152]	@ (8002e94 <resetConfig+0xa0c>)
 8002dfc:	f002 fa80 	bl	8005300 <print_error>
 8002e00:	e7db      	b.n	8002dba <resetConfig+0x932>
        RTC_H();
 8002e02:	2280      	movs	r2, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 8002e04:	7b23      	ldrb	r3, [r4, #12]
 8002e06:	4b1f      	ldr	r3, [pc, #124]	@ (8002e84 <resetConfig+0x9fc>)
 8002e08:	01d2      	lsls	r2, r2, #7
 8002e0a:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e0c:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e10:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002e14:	b672      	cpsid	i
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 8002e16:	2340      	movs	r3, #64	@ 0x40
 8002e18:	6822      	ldr	r2, [r4, #0]
 8002e1a:	4213      	tst	r3, r2
 8002e1c:	d102      	bne.n	8002e24 <resetConfig+0x99c>
        SPI1->CR1 |= SPI_CR1_SPE;
 8002e1e:	6822      	ldr	r2, [r4, #0]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	6023      	str	r3, [r4, #0]
        RTC_L();
 8002e24:	2280      	movs	r2, #128	@ 0x80
 8002e26:	4b17      	ldr	r3, [pc, #92]	@ (8002e84 <resetConfig+0x9fc>)
 8002e28:	05d2      	lsls	r2, r2, #23
 8002e2a:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 8002e2c:	f004 fa7e 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 8002e30:	23fa      	movs	r3, #250	@ 0xfa
 8002e32:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 8002e34:	0004      	movs	r4, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002e36:	2702      	movs	r7, #2
        if ((HAL_GetTick() - start_time) > 1000)
 8002e38:	4698      	mov	r8, r3
 8002e3a:	4d13      	ldr	r5, [pc, #76]	@ (8002e88 <resetConfig+0xa00>)
 8002e3c:	68ab      	ldr	r3, [r5, #8]
 8002e3e:	421f      	tst	r7, r3
 8002e40:	d016      	beq.n	8002e70 <resetConfig+0x9e8>
  *spidr = TxData;
 8002e42:	239b      	movs	r3, #155	@ 0x9b
 8002e44:	732b      	strb	r3, [r5, #12]
    start_time = HAL_GetTick();
 8002e46:	f004 fa71 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 8002e4a:	23fa      	movs	r3, #250	@ 0xfa
 8002e4c:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8002e4e:	0005      	movs	r5, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002e50:	2701      	movs	r7, #1
        if ((HAL_GetTick() - start_time) > 1000)
 8002e52:	4698      	mov	r8, r3
 8002e54:	4c0c      	ldr	r4, [pc, #48]	@ (8002e88 <resetConfig+0xa00>)
 8002e56:	68a3      	ldr	r3, [r4, #8]
 8002e58:	421f      	tst	r7, r3
 8002e5a:	d11d      	bne.n	8002e98 <resetConfig+0xa10>
 8002e5c:	f004 fa66 	bl	800732c <HAL_GetTick>
 8002e60:	1b40      	subs	r0, r0, r5
 8002e62:	4540      	cmp	r0, r8
 8002e64:	d9f7      	bls.n	8002e56 <resetConfig+0x9ce>
            print_error(__func__, __LINE__);
 8002e66:	4809      	ldr	r0, [pc, #36]	@ (8002e8c <resetConfig+0xa04>)
 8002e68:	4909      	ldr	r1, [pc, #36]	@ (8002e90 <resetConfig+0xa08>)
 8002e6a:	f002 fa49 	bl	8005300 <print_error>
 8002e6e:	e7f2      	b.n	8002e56 <resetConfig+0x9ce>
        if ((HAL_GetTick() - start_time) > 1000)
 8002e70:	f004 fa5c 	bl	800732c <HAL_GetTick>
 8002e74:	1b00      	subs	r0, r0, r4
 8002e76:	4540      	cmp	r0, r8
 8002e78:	d9e0      	bls.n	8002e3c <resetConfig+0x9b4>
            print_error(__func__, __LINE__);
 8002e7a:	4804      	ldr	r0, [pc, #16]	@ (8002e8c <resetConfig+0xa04>)
 8002e7c:	4905      	ldr	r1, [pc, #20]	@ (8002e94 <resetConfig+0xa0c>)
 8002e7e:	f002 fa3f 	bl	8005300 <print_error>
 8002e82:	e7db      	b.n	8002e3c <resetConfig+0x9b4>
 8002e84:	50000400 	.word	0x50000400
 8002e88:	40013000 	.word	0x40013000
 8002e8c:	0800ea80 	.word	0x0800ea80
 8002e90:	00000285 	.word	0x00000285
 8002e94:	0000027a 	.word	0x0000027a
  return (*((__IO uint8_t *)&SPIx->DR));
 8002e98:	7b23      	ldrb	r3, [r4, #12]
    uint32_t start_time = HAL_GetTick();
 8002e9a:	f004 fa47 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 8002e9e:	23fa      	movs	r3, #250	@ 0xfa
 8002ea0:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 8002ea2:	0004      	movs	r4, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002ea4:	2702      	movs	r7, #2
        if ((HAL_GetTick() - start_time) > 1000)
 8002ea6:	4698      	mov	r8, r3
 8002ea8:	4dc2      	ldr	r5, [pc, #776]	@ (80031b4 <resetConfig+0xd2c>)
 8002eaa:	68ab      	ldr	r3, [r5, #8]
 8002eac:	421f      	tst	r7, r3
 8002eae:	d016      	beq.n	8002ede <resetConfig+0xa56>
  *spidr = TxData;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	732b      	strb	r3, [r5, #12]
    start_time = HAL_GetTick();
 8002eb4:	f004 fa3a 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 8002eb8:	23fa      	movs	r3, #250	@ 0xfa
 8002eba:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8002ebc:	0005      	movs	r5, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002ebe:	2701      	movs	r7, #1
        if ((HAL_GetTick() - start_time) > 1000)
 8002ec0:	4698      	mov	r8, r3
 8002ec2:	4cbc      	ldr	r4, [pc, #752]	@ (80031b4 <resetConfig+0xd2c>)
 8002ec4:	68a3      	ldr	r3, [r4, #8]
 8002ec6:	421f      	tst	r7, r3
 8002ec8:	d113      	bne.n	8002ef2 <resetConfig+0xa6a>
 8002eca:	f004 fa2f 	bl	800732c <HAL_GetTick>
 8002ece:	1b40      	subs	r0, r0, r5
 8002ed0:	4540      	cmp	r0, r8
 8002ed2:	d9f7      	bls.n	8002ec4 <resetConfig+0xa3c>
            print_error(__func__, __LINE__);
 8002ed4:	48b8      	ldr	r0, [pc, #736]	@ (80031b8 <resetConfig+0xd30>)
 8002ed6:	49b9      	ldr	r1, [pc, #740]	@ (80031bc <resetConfig+0xd34>)
 8002ed8:	f002 fa12 	bl	8005300 <print_error>
 8002edc:	e7f2      	b.n	8002ec4 <resetConfig+0xa3c>
        if ((HAL_GetTick() - start_time) > 1000)
 8002ede:	f004 fa25 	bl	800732c <HAL_GetTick>
 8002ee2:	1b00      	subs	r0, r0, r4
 8002ee4:	4540      	cmp	r0, r8
 8002ee6:	d9e0      	bls.n	8002eaa <resetConfig+0xa22>
            print_error(__func__, __LINE__);
 8002ee8:	48b3      	ldr	r0, [pc, #716]	@ (80031b8 <resetConfig+0xd30>)
 8002eea:	49b5      	ldr	r1, [pc, #724]	@ (80031c0 <resetConfig+0xd38>)
 8002eec:	f002 fa08 	bl	8005300 <print_error>
 8002ef0:	e7db      	b.n	8002eaa <resetConfig+0xa22>
        RTC_H();
 8002ef2:	2280      	movs	r2, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 8002ef4:	7b23      	ldrb	r3, [r4, #12]
 8002ef6:	4bb3      	ldr	r3, [pc, #716]	@ (80031c4 <resetConfig+0xd3c>)
 8002ef8:	01d2      	lsls	r2, r2, #7
 8002efa:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002efc:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002f00:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002f04:	b672      	cpsid	i
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 8002f06:	2340      	movs	r3, #64	@ 0x40
 8002f08:	6822      	ldr	r2, [r4, #0]
 8002f0a:	4213      	tst	r3, r2
 8002f0c:	d102      	bne.n	8002f14 <resetConfig+0xa8c>
        SPI1->CR1 |= SPI_CR1_SPE;
 8002f0e:	6822      	ldr	r2, [r4, #0]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	6023      	str	r3, [r4, #0]
        RTC_L();
 8002f14:	2280      	movs	r2, #128	@ 0x80
 8002f16:	4bab      	ldr	r3, [pc, #684]	@ (80031c4 <resetConfig+0xd3c>)
 8002f18:	05d2      	lsls	r2, r2, #23
 8002f1a:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 8002f1c:	f004 fa06 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 8002f20:	23fa      	movs	r3, #250	@ 0xfa
 8002f22:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 8002f24:	0004      	movs	r4, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002f26:	2702      	movs	r7, #2
        if ((HAL_GetTick() - start_time) > 1000)
 8002f28:	4698      	mov	r8, r3
 8002f2a:	4da2      	ldr	r5, [pc, #648]	@ (80031b4 <resetConfig+0xd2c>)
 8002f2c:	68ab      	ldr	r3, [r5, #8]
 8002f2e:	421f      	tst	r7, r3
 8002f30:	d016      	beq.n	8002f60 <resetConfig+0xad8>
  *spidr = TxData;
 8002f32:	23a1      	movs	r3, #161	@ 0xa1
 8002f34:	732b      	strb	r3, [r5, #12]
    start_time = HAL_GetTick();
 8002f36:	f004 f9f9 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 8002f3a:	23fa      	movs	r3, #250	@ 0xfa
 8002f3c:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8002f3e:	0005      	movs	r5, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002f40:	2701      	movs	r7, #1
        if ((HAL_GetTick() - start_time) > 1000)
 8002f42:	4698      	mov	r8, r3
 8002f44:	4c9b      	ldr	r4, [pc, #620]	@ (80031b4 <resetConfig+0xd2c>)
 8002f46:	68a3      	ldr	r3, [r4, #8]
 8002f48:	421f      	tst	r7, r3
 8002f4a:	d113      	bne.n	8002f74 <resetConfig+0xaec>
 8002f4c:	f004 f9ee 	bl	800732c <HAL_GetTick>
 8002f50:	1b40      	subs	r0, r0, r5
 8002f52:	4540      	cmp	r0, r8
 8002f54:	d9f7      	bls.n	8002f46 <resetConfig+0xabe>
            print_error(__func__, __LINE__);
 8002f56:	4898      	ldr	r0, [pc, #608]	@ (80031b8 <resetConfig+0xd30>)
 8002f58:	4998      	ldr	r1, [pc, #608]	@ (80031bc <resetConfig+0xd34>)
 8002f5a:	f002 f9d1 	bl	8005300 <print_error>
 8002f5e:	e7f2      	b.n	8002f46 <resetConfig+0xabe>
        if ((HAL_GetTick() - start_time) > 1000)
 8002f60:	f004 f9e4 	bl	800732c <HAL_GetTick>
 8002f64:	1b00      	subs	r0, r0, r4
 8002f66:	4540      	cmp	r0, r8
 8002f68:	d9e0      	bls.n	8002f2c <resetConfig+0xaa4>
            print_error(__func__, __LINE__);
 8002f6a:	4893      	ldr	r0, [pc, #588]	@ (80031b8 <resetConfig+0xd30>)
 8002f6c:	4994      	ldr	r1, [pc, #592]	@ (80031c0 <resetConfig+0xd38>)
 8002f6e:	f002 f9c7 	bl	8005300 <print_error>
 8002f72:	e7db      	b.n	8002f2c <resetConfig+0xaa4>
  return (*((__IO uint8_t *)&SPIx->DR));
 8002f74:	7b23      	ldrb	r3, [r4, #12]
    uint32_t start_time = HAL_GetTick();
 8002f76:	f004 f9d9 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 8002f7a:	23fa      	movs	r3, #250	@ 0xfa
 8002f7c:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 8002f7e:	0004      	movs	r4, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002f80:	2702      	movs	r7, #2
        if ((HAL_GetTick() - start_time) > 1000)
 8002f82:	4698      	mov	r8, r3
 8002f84:	4d8b      	ldr	r5, [pc, #556]	@ (80031b4 <resetConfig+0xd2c>)
 8002f86:	68ab      	ldr	r3, [r5, #8]
 8002f88:	421f      	tst	r7, r3
 8002f8a:	d016      	beq.n	8002fba <resetConfig+0xb32>
  *spidr = TxData;
 8002f8c:	23f0      	movs	r3, #240	@ 0xf0
 8002f8e:	732b      	strb	r3, [r5, #12]
    start_time = HAL_GetTick();
 8002f90:	f004 f9cc 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 8002f94:	23fa      	movs	r3, #250	@ 0xfa
 8002f96:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8002f98:	0005      	movs	r5, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002f9a:	2701      	movs	r7, #1
        if ((HAL_GetTick() - start_time) > 1000)
 8002f9c:	4698      	mov	r8, r3
 8002f9e:	4c85      	ldr	r4, [pc, #532]	@ (80031b4 <resetConfig+0xd2c>)
 8002fa0:	68a3      	ldr	r3, [r4, #8]
 8002fa2:	421f      	tst	r7, r3
 8002fa4:	d113      	bne.n	8002fce <resetConfig+0xb46>
 8002fa6:	f004 f9c1 	bl	800732c <HAL_GetTick>
 8002faa:	1b40      	subs	r0, r0, r5
 8002fac:	4540      	cmp	r0, r8
 8002fae:	d9f7      	bls.n	8002fa0 <resetConfig+0xb18>
            print_error(__func__, __LINE__);
 8002fb0:	4881      	ldr	r0, [pc, #516]	@ (80031b8 <resetConfig+0xd30>)
 8002fb2:	4982      	ldr	r1, [pc, #520]	@ (80031bc <resetConfig+0xd34>)
 8002fb4:	f002 f9a4 	bl	8005300 <print_error>
 8002fb8:	e7f2      	b.n	8002fa0 <resetConfig+0xb18>
        if ((HAL_GetTick() - start_time) > 1000)
 8002fba:	f004 f9b7 	bl	800732c <HAL_GetTick>
 8002fbe:	1b00      	subs	r0, r0, r4
 8002fc0:	4540      	cmp	r0, r8
 8002fc2:	d9e0      	bls.n	8002f86 <resetConfig+0xafe>
            print_error(__func__, __LINE__);
 8002fc4:	487c      	ldr	r0, [pc, #496]	@ (80031b8 <resetConfig+0xd30>)
 8002fc6:	497e      	ldr	r1, [pc, #504]	@ (80031c0 <resetConfig+0xd38>)
 8002fc8:	f002 f99a 	bl	8005300 <print_error>
 8002fcc:	e7db      	b.n	8002f86 <resetConfig+0xafe>
        RTC_H();
 8002fce:	2280      	movs	r2, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 8002fd0:	7b23      	ldrb	r3, [r4, #12]
 8002fd2:	4b7c      	ldr	r3, [pc, #496]	@ (80031c4 <resetConfig+0xd3c>)
 8002fd4:	01d2      	lsls	r2, r2, #7
 8002fd6:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fd8:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002fdc:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002fe0:	b672      	cpsid	i
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 8002fe2:	2340      	movs	r3, #64	@ 0x40
 8002fe4:	6822      	ldr	r2, [r4, #0]
 8002fe6:	4213      	tst	r3, r2
 8002fe8:	d102      	bne.n	8002ff0 <resetConfig+0xb68>
        SPI1->CR1 |= SPI_CR1_SPE;
 8002fea:	6822      	ldr	r2, [r4, #0]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	6023      	str	r3, [r4, #0]
        RTC_L();
 8002ff0:	2280      	movs	r2, #128	@ 0x80
 8002ff2:	4b74      	ldr	r3, [pc, #464]	@ (80031c4 <resetConfig+0xd3c>)
 8002ff4:	05d2      	lsls	r2, r2, #23
 8002ff6:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 8002ff8:	f004 f998 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 8002ffc:	23fa      	movs	r3, #250	@ 0xfa
 8002ffe:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 8003000:	0004      	movs	r4, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8003002:	2702      	movs	r7, #2
        if ((HAL_GetTick() - start_time) > 1000)
 8003004:	4698      	mov	r8, r3
 8003006:	4d6b      	ldr	r5, [pc, #428]	@ (80031b4 <resetConfig+0xd2c>)
 8003008:	68ab      	ldr	r3, [r5, #8]
 800300a:	421f      	tst	r7, r3
 800300c:	d016      	beq.n	800303c <resetConfig+0xbb4>
  *spidr = TxData;
 800300e:	23a6      	movs	r3, #166	@ 0xa6
 8003010:	732b      	strb	r3, [r5, #12]
    start_time = HAL_GetTick();
 8003012:	f004 f98b 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 8003016:	23fa      	movs	r3, #250	@ 0xfa
 8003018:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 800301a:	0005      	movs	r5, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800301c:	2701      	movs	r7, #1
        if ((HAL_GetTick() - start_time) > 1000)
 800301e:	4698      	mov	r8, r3
 8003020:	4c64      	ldr	r4, [pc, #400]	@ (80031b4 <resetConfig+0xd2c>)
 8003022:	68a3      	ldr	r3, [r4, #8]
 8003024:	421f      	tst	r7, r3
 8003026:	d113      	bne.n	8003050 <resetConfig+0xbc8>
 8003028:	f004 f980 	bl	800732c <HAL_GetTick>
 800302c:	1b40      	subs	r0, r0, r5
 800302e:	4540      	cmp	r0, r8
 8003030:	d9f7      	bls.n	8003022 <resetConfig+0xb9a>
            print_error(__func__, __LINE__);
 8003032:	4861      	ldr	r0, [pc, #388]	@ (80031b8 <resetConfig+0xd30>)
 8003034:	4961      	ldr	r1, [pc, #388]	@ (80031bc <resetConfig+0xd34>)
 8003036:	f002 f963 	bl	8005300 <print_error>
 800303a:	e7f2      	b.n	8003022 <resetConfig+0xb9a>
        if ((HAL_GetTick() - start_time) > 1000)
 800303c:	f004 f976 	bl	800732c <HAL_GetTick>
 8003040:	1b00      	subs	r0, r0, r4
 8003042:	4540      	cmp	r0, r8
 8003044:	d9e0      	bls.n	8003008 <resetConfig+0xb80>
            print_error(__func__, __LINE__);
 8003046:	485c      	ldr	r0, [pc, #368]	@ (80031b8 <resetConfig+0xd30>)
 8003048:	495d      	ldr	r1, [pc, #372]	@ (80031c0 <resetConfig+0xd38>)
 800304a:	f002 f959 	bl	8005300 <print_error>
 800304e:	e7db      	b.n	8003008 <resetConfig+0xb80>
  return (*((__IO uint8_t *)&SPIx->DR));
 8003050:	7b23      	ldrb	r3, [r4, #12]
    uint32_t start_time = HAL_GetTick();
 8003052:	f004 f96b 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 8003056:	23fa      	movs	r3, #250	@ 0xfa
 8003058:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 800305a:	0004      	movs	r4, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800305c:	2702      	movs	r7, #2
        if ((HAL_GetTick() - start_time) > 1000)
 800305e:	4698      	mov	r8, r3
 8003060:	4d54      	ldr	r5, [pc, #336]	@ (80031b4 <resetConfig+0xd2c>)
 8003062:	68ab      	ldr	r3, [r5, #8]
 8003064:	421f      	tst	r7, r3
 8003066:	d016      	beq.n	8003096 <resetConfig+0xc0e>
  *spidr = TxData;
 8003068:	2300      	movs	r3, #0
 800306a:	732b      	strb	r3, [r5, #12]
    start_time = HAL_GetTick();
 800306c:	f004 f95e 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 8003070:	23fa      	movs	r3, #250	@ 0xfa
 8003072:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8003074:	0005      	movs	r5, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8003076:	2701      	movs	r7, #1
        if ((HAL_GetTick() - start_time) > 1000)
 8003078:	4698      	mov	r8, r3
 800307a:	4c4e      	ldr	r4, [pc, #312]	@ (80031b4 <resetConfig+0xd2c>)
 800307c:	68a3      	ldr	r3, [r4, #8]
 800307e:	421f      	tst	r7, r3
 8003080:	d113      	bne.n	80030aa <resetConfig+0xc22>
 8003082:	f004 f953 	bl	800732c <HAL_GetTick>
 8003086:	1b40      	subs	r0, r0, r5
 8003088:	4540      	cmp	r0, r8
 800308a:	d9f7      	bls.n	800307c <resetConfig+0xbf4>
            print_error(__func__, __LINE__);
 800308c:	484a      	ldr	r0, [pc, #296]	@ (80031b8 <resetConfig+0xd30>)
 800308e:	494b      	ldr	r1, [pc, #300]	@ (80031bc <resetConfig+0xd34>)
 8003090:	f002 f936 	bl	8005300 <print_error>
 8003094:	e7f2      	b.n	800307c <resetConfig+0xbf4>
        if ((HAL_GetTick() - start_time) > 1000)
 8003096:	f004 f949 	bl	800732c <HAL_GetTick>
 800309a:	1b00      	subs	r0, r0, r4
 800309c:	4540      	cmp	r0, r8
 800309e:	d9e0      	bls.n	8003062 <resetConfig+0xbda>
            print_error(__func__, __LINE__);
 80030a0:	4845      	ldr	r0, [pc, #276]	@ (80031b8 <resetConfig+0xd30>)
 80030a2:	4947      	ldr	r1, [pc, #284]	@ (80031c0 <resetConfig+0xd38>)
 80030a4:	f002 f92c 	bl	8005300 <print_error>
 80030a8:	e7db      	b.n	8003062 <resetConfig+0xbda>
        RTC_H();
 80030aa:	2280      	movs	r2, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 80030ac:	7b23      	ldrb	r3, [r4, #12]
 80030ae:	4b45      	ldr	r3, [pc, #276]	@ (80031c4 <resetConfig+0xd3c>)
 80030b0:	01d2      	lsls	r2, r2, #7
 80030b2:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b4:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80030b8:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80030bc:	b672      	cpsid	i
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 80030be:	2340      	movs	r3, #64	@ 0x40
 80030c0:	6822      	ldr	r2, [r4, #0]
 80030c2:	4213      	tst	r3, r2
 80030c4:	d102      	bne.n	80030cc <resetConfig+0xc44>
        SPI1->CR1 |= SPI_CR1_SPE;
 80030c6:	6822      	ldr	r2, [r4, #0]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	6023      	str	r3, [r4, #0]
        RTC_L();
 80030cc:	2280      	movs	r2, #128	@ 0x80
 80030ce:	4b3d      	ldr	r3, [pc, #244]	@ (80031c4 <resetConfig+0xd3c>)
 80030d0:	05d2      	lsls	r2, r2, #23
 80030d2:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 80030d4:	f004 f92a 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 80030d8:	23fa      	movs	r3, #250	@ 0xfa
 80030da:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 80030dc:	0004      	movs	r4, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80030de:	2702      	movs	r7, #2
        if ((HAL_GetTick() - start_time) > 1000)
 80030e0:	4698      	mov	r8, r3
 80030e2:	4d34      	ldr	r5, [pc, #208]	@ (80031b4 <resetConfig+0xd2c>)
 80030e4:	68ab      	ldr	r3, [r5, #8]
 80030e6:	421f      	tst	r7, r3
 80030e8:	d016      	beq.n	8003118 <resetConfig+0xc90>
  *spidr = TxData;
 80030ea:	23b0      	movs	r3, #176	@ 0xb0
 80030ec:	732b      	strb	r3, [r5, #12]
    start_time = HAL_GetTick();
 80030ee:	f004 f91d 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 80030f2:	23fa      	movs	r3, #250	@ 0xfa
 80030f4:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 80030f6:	0005      	movs	r5, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80030f8:	2701      	movs	r7, #1
        if ((HAL_GetTick() - start_time) > 1000)
 80030fa:	4698      	mov	r8, r3
 80030fc:	4c2d      	ldr	r4, [pc, #180]	@ (80031b4 <resetConfig+0xd2c>)
 80030fe:	68a3      	ldr	r3, [r4, #8]
 8003100:	421f      	tst	r7, r3
 8003102:	d113      	bne.n	800312c <resetConfig+0xca4>
 8003104:	f004 f912 	bl	800732c <HAL_GetTick>
 8003108:	1b40      	subs	r0, r0, r5
 800310a:	4540      	cmp	r0, r8
 800310c:	d9f7      	bls.n	80030fe <resetConfig+0xc76>
            print_error(__func__, __LINE__);
 800310e:	482a      	ldr	r0, [pc, #168]	@ (80031b8 <resetConfig+0xd30>)
 8003110:	492a      	ldr	r1, [pc, #168]	@ (80031bc <resetConfig+0xd34>)
 8003112:	f002 f8f5 	bl	8005300 <print_error>
 8003116:	e7f2      	b.n	80030fe <resetConfig+0xc76>
        if ((HAL_GetTick() - start_time) > 1000)
 8003118:	f004 f908 	bl	800732c <HAL_GetTick>
 800311c:	1b00      	subs	r0, r0, r4
 800311e:	4540      	cmp	r0, r8
 8003120:	d9e0      	bls.n	80030e4 <resetConfig+0xc5c>
            print_error(__func__, __LINE__);
 8003122:	4825      	ldr	r0, [pc, #148]	@ (80031b8 <resetConfig+0xd30>)
 8003124:	4926      	ldr	r1, [pc, #152]	@ (80031c0 <resetConfig+0xd38>)
 8003126:	f002 f8eb 	bl	8005300 <print_error>
 800312a:	e7db      	b.n	80030e4 <resetConfig+0xc5c>
  return (*((__IO uint8_t *)&SPIx->DR));
 800312c:	7b23      	ldrb	r3, [r4, #12]
    uint32_t start_time = HAL_GetTick();
 800312e:	f004 f8fd 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 8003132:	23fa      	movs	r3, #250	@ 0xfa
 8003134:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 8003136:	0004      	movs	r4, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8003138:	2702      	movs	r7, #2
        if ((HAL_GetTick() - start_time) > 1000)
 800313a:	4698      	mov	r8, r3
 800313c:	4d1d      	ldr	r5, [pc, #116]	@ (80031b4 <resetConfig+0xd2c>)
 800313e:	68ab      	ldr	r3, [r5, #8]
 8003140:	421f      	tst	r7, r3
 8003142:	d016      	beq.n	8003172 <resetConfig+0xcea>
  *spidr = TxData;
 8003144:	2300      	movs	r3, #0
 8003146:	732b      	strb	r3, [r5, #12]
    start_time = HAL_GetTick();
 8003148:	f004 f8f0 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 800314c:	23fa      	movs	r3, #250	@ 0xfa
 800314e:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8003150:	0005      	movs	r5, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8003152:	2701      	movs	r7, #1
        if ((HAL_GetTick() - start_time) > 1000)
 8003154:	4698      	mov	r8, r3
 8003156:	4c17      	ldr	r4, [pc, #92]	@ (80031b4 <resetConfig+0xd2c>)
 8003158:	68a3      	ldr	r3, [r4, #8]
 800315a:	421f      	tst	r7, r3
 800315c:	d113      	bne.n	8003186 <resetConfig+0xcfe>
 800315e:	f004 f8e5 	bl	800732c <HAL_GetTick>
 8003162:	1b40      	subs	r0, r0, r5
 8003164:	4540      	cmp	r0, r8
 8003166:	d9f7      	bls.n	8003158 <resetConfig+0xcd0>
            print_error(__func__, __LINE__);
 8003168:	4813      	ldr	r0, [pc, #76]	@ (80031b8 <resetConfig+0xd30>)
 800316a:	4914      	ldr	r1, [pc, #80]	@ (80031bc <resetConfig+0xd34>)
 800316c:	f002 f8c8 	bl	8005300 <print_error>
 8003170:	e7f2      	b.n	8003158 <resetConfig+0xcd0>
        if ((HAL_GetTick() - start_time) > 1000)
 8003172:	f004 f8db 	bl	800732c <HAL_GetTick>
 8003176:	1b00      	subs	r0, r0, r4
 8003178:	4540      	cmp	r0, r8
 800317a:	d9e0      	bls.n	800313e <resetConfig+0xcb6>
            print_error(__func__, __LINE__);
 800317c:	480e      	ldr	r0, [pc, #56]	@ (80031b8 <resetConfig+0xd30>)
 800317e:	4910      	ldr	r1, [pc, #64]	@ (80031c0 <resetConfig+0xd38>)
 8003180:	f002 f8be 	bl	8005300 <print_error>
 8003184:	e7db      	b.n	800313e <resetConfig+0xcb6>
        RTC_H();
 8003186:	2280      	movs	r2, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 8003188:	7b23      	ldrb	r3, [r4, #12]
 800318a:	4b0e      	ldr	r3, [pc, #56]	@ (80031c4 <resetConfig+0xd3c>)
 800318c:	01d2      	lsls	r2, r2, #7
 800318e:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003190:	f386 8810 	msr	PRIMASK, r6
}
 8003194:	2001      	movs	r0, #1
 8003196:	bcc0      	pop	{r6, r7}
 8003198:	46b9      	mov	r9, r7
 800319a:	46b0      	mov	r8, r6
 800319c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((HAL_GetTick() - start_time) > 1000)
 800319e:	f004 f8c5 	bl	800732c <HAL_GetTick>
 80031a2:	1b80      	subs	r0, r0, r6
 80031a4:	4548      	cmp	r0, r9
 80031a6:	d800      	bhi.n	80031aa <resetConfig+0xd22>
 80031a8:	e529      	b.n	8002bfe <resetConfig+0x776>
            print_error(__func__, __LINE__);
 80031aa:	4803      	ldr	r0, [pc, #12]	@ (80031b8 <resetConfig+0xd30>)
 80031ac:	4904      	ldr	r1, [pc, #16]	@ (80031c0 <resetConfig+0xd38>)
 80031ae:	f002 f8a7 	bl	8005300 <print_error>
 80031b2:	e524      	b.n	8002bfe <resetConfig+0x776>
 80031b4:	40013000 	.word	0x40013000
 80031b8:	0800ea80 	.word	0x0800ea80
 80031bc:	00000285 	.word	0x00000285
 80031c0:	0000027a 	.word	0x0000027a
 80031c4:	50000400 	.word	0x50000400
 80031c8:	7b23      	ldrb	r3, [r4, #12]
    uint32_t start_time = HAL_GetTick();
 80031ca:	f004 f8af 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 80031ce:	23fa      	movs	r3, #250	@ 0xfa
 80031d0:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 80031d2:	0004      	movs	r4, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80031d4:	2702      	movs	r7, #2
        if ((HAL_GetTick() - start_time) > 1000)
 80031d6:	4698      	mov	r8, r3
 80031d8:	4d1b      	ldr	r5, [pc, #108]	@ (8003248 <resetConfig+0xdc0>)
 80031da:	68ab      	ldr	r3, [r5, #8]
 80031dc:	421f      	tst	r7, r3
 80031de:	d029      	beq.n	8003234 <resetConfig+0xdac>
  *spidr = TxData;
 80031e0:	2323      	movs	r3, #35	@ 0x23
 80031e2:	732b      	strb	r3, [r5, #12]
    start_time = HAL_GetTick();
 80031e4:	f004 f8a2 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 80031e8:	23fa      	movs	r3, #250	@ 0xfa
 80031ea:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 80031ec:	0005      	movs	r5, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80031ee:	2701      	movs	r7, #1
        if ((HAL_GetTick() - start_time) > 1000)
 80031f0:	4698      	mov	r8, r3
 80031f2:	4c15      	ldr	r4, [pc, #84]	@ (8003248 <resetConfig+0xdc0>)
 80031f4:	68a3      	ldr	r3, [r4, #8]
 80031f6:	421f      	tst	r7, r3
 80031f8:	d114      	bne.n	8003224 <resetConfig+0xd9c>
 80031fa:	f004 f897 	bl	800732c <HAL_GetTick>
 80031fe:	1b40      	subs	r0, r0, r5
 8003200:	4540      	cmp	r0, r8
 8003202:	d9f7      	bls.n	80031f4 <resetConfig+0xd6c>
            print_error(__func__, __LINE__);
 8003204:	4811      	ldr	r0, [pc, #68]	@ (800324c <resetConfig+0xdc4>)
 8003206:	4912      	ldr	r1, [pc, #72]	@ (8003250 <resetConfig+0xdc8>)
 8003208:	f002 f87a 	bl	8005300 <print_error>
 800320c:	e7f2      	b.n	80031f4 <resetConfig+0xd6c>
        if ((HAL_GetTick() - start_time) > 1000)
 800320e:	f004 f88d 	bl	800732c <HAL_GetTick>
 8003212:	1b00      	subs	r0, r0, r4
 8003214:	4540      	cmp	r0, r8
 8003216:	d800      	bhi.n	800321a <resetConfig+0xd92>
 8003218:	e476      	b.n	8002b08 <resetConfig+0x680>
            print_error(__func__, __LINE__);
 800321a:	480c      	ldr	r0, [pc, #48]	@ (800324c <resetConfig+0xdc4>)
 800321c:	490d      	ldr	r1, [pc, #52]	@ (8003254 <resetConfig+0xdcc>)
 800321e:	f002 f86f 	bl	8005300 <print_error>
 8003222:	e471      	b.n	8002b08 <resetConfig+0x680>
        RTC_H();
 8003224:	2280      	movs	r2, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 8003226:	7b23      	ldrb	r3, [r4, #12]
 8003228:	4b0b      	ldr	r3, [pc, #44]	@ (8003258 <resetConfig+0xdd0>)
 800322a:	01d2      	lsls	r2, r2, #7
 800322c:	619a      	str	r2, [r3, #24]
 800322e:	f386 8810 	msr	PRIMASK, r6
    SPI1_SendByte(address);
    SPI1_SendByte(buf); // Send Data to write

    spi_select_slave(1);
    utils_exit_critical_section(primask_bit);
    return 1;
 8003232:	e510      	b.n	8002c56 <resetConfig+0x7ce>
        if ((HAL_GetTick() - start_time) > 1000)
 8003234:	f004 f87a 	bl	800732c <HAL_GetTick>
 8003238:	1b00      	subs	r0, r0, r4
 800323a:	4540      	cmp	r0, r8
 800323c:	d9cd      	bls.n	80031da <resetConfig+0xd52>
            print_error(__func__, __LINE__);
 800323e:	4803      	ldr	r0, [pc, #12]	@ (800324c <resetConfig+0xdc4>)
 8003240:	4904      	ldr	r1, [pc, #16]	@ (8003254 <resetConfig+0xdcc>)
 8003242:	f002 f85d 	bl	8005300 <print_error>
 8003246:	e7c8      	b.n	80031da <resetConfig+0xd52>
 8003248:	40013000 	.word	0x40013000
 800324c:	0800ea80 	.word	0x0800ea80
 8003250:	00000285 	.word	0x00000285
 8003254:	0000027a 	.word	0x0000027a
 8003258:	50000400 	.word	0x50000400

0800325c <setWDT>:
{
 800325c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800325e:	4645      	mov	r5, r8
 8003260:	46de      	mov	lr, fp
 8003262:	4657      	mov	r7, sl
 8003264:	464e      	mov	r6, r9
 8003266:	b5e0      	push	{r5, r6, r7, lr}
        seconds = watchdogSecs;
 8003268:	4b93      	ldr	r3, [pc, #588]	@ (80034b8 <setWDT+0x25c>)
{
 800326a:	0004      	movs	r4, r0
        seconds = watchdogSecs;
 800326c:	4698      	mov	r8, r3
{
 800326e:	b083      	sub	sp, #12
    if (seconds < 0)
 8003270:	2800      	cmp	r0, #0
 8003272:	da00      	bge.n	8003276 <setWDT+0x1a>
        seconds = watchdogSecs;
 8003274:	681c      	ldr	r4, [r3, #0]
    if (seconds == 0)
 8003276:	2c00      	cmp	r4, #0
 8003278:	d100      	bne.n	800327c <setWDT+0x20>
 800327a:	e094      	b.n	80033a6 <setWDT+0x14a>
        if (fourSecs < 1)
 800327c:	2c03      	cmp	r4, #3
 800327e:	dc36      	bgt.n	80032ee <setWDT+0x92>
 8003280:	2387      	movs	r3, #135	@ 0x87
 8003282:	25fa      	movs	r5, #250	@ 0xfa
 8003284:	9301      	str	r3, [sp, #4]
            fourSecs = 1;
 8003286:	3b86      	subs	r3, #134	@ 0x86
 8003288:	469a      	mov	sl, r3
 800328a:	00ed      	lsls	r5, r5, #3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800328c:	f3ef 8b10 	mrs	fp, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003290:	b672      	cpsid	i
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 8003292:	2240      	movs	r2, #64	@ 0x40
 8003294:	4b89      	ldr	r3, [pc, #548]	@ (80034bc <setWDT+0x260>)
 8003296:	6819      	ldr	r1, [r3, #0]
 8003298:	420a      	tst	r2, r1
 800329a:	d102      	bne.n	80032a2 <setWDT+0x46>
        SPI1->CR1 |= SPI_CR1_SPE;
 800329c:	6819      	ldr	r1, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	601a      	str	r2, [r3, #0]
        RTC_L();
 80032a2:	2280      	movs	r2, #128	@ 0x80
 80032a4:	4b86      	ldr	r3, [pc, #536]	@ (80034c0 <setWDT+0x264>)
 80032a6:	05d2      	lsls	r2, r2, #23
 80032a8:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 80032aa:	f004 f83f 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80032ae:	2302      	movs	r3, #2
 80032b0:	0007      	movs	r7, r0
 80032b2:	4699      	mov	r9, r3
 80032b4:	4e81      	ldr	r6, [pc, #516]	@ (80034bc <setWDT+0x260>)
 80032b6:	464a      	mov	r2, r9
 80032b8:	68b3      	ldr	r3, [r6, #8]
 80032ba:	421a      	tst	r2, r3
 80032bc:	d020      	beq.n	8003300 <setWDT+0xa4>
  *spidr = TxData;
 80032be:	239b      	movs	r3, #155	@ 0x9b
 80032c0:	7333      	strb	r3, [r6, #12]
    start_time = HAL_GetTick();
 80032c2:	f004 f833 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80032c6:	2301      	movs	r3, #1
 80032c8:	0007      	movs	r7, r0
 80032ca:	4699      	mov	r9, r3
 80032cc:	4e7b      	ldr	r6, [pc, #492]	@ (80034bc <setWDT+0x260>)
 80032ce:	464a      	mov	r2, r9
 80032d0:	68b3      	ldr	r3, [r6, #8]
 80032d2:	421a      	tst	r2, r3
 80032d4:	d120      	bne.n	8003318 <setWDT+0xbc>
        if ((HAL_GetTick() - start_time) > 1000)
 80032d6:	f004 f829 	bl	800732c <HAL_GetTick>
 80032da:	23fa      	movs	r3, #250	@ 0xfa
 80032dc:	1bc0      	subs	r0, r0, r7
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4298      	cmp	r0, r3
 80032e2:	d9f4      	bls.n	80032ce <setWDT+0x72>
            print_error(__func__, __LINE__);
 80032e4:	4877      	ldr	r0, [pc, #476]	@ (80034c4 <setWDT+0x268>)
 80032e6:	4978      	ldr	r1, [pc, #480]	@ (80034c8 <setWDT+0x26c>)
 80032e8:	f002 f80a 	bl	8005300 <print_error>
 80032ec:	e7ef      	b.n	80032ce <setWDT+0x72>
        if (fourSecs > 31)
 80032ee:	2c7f      	cmp	r4, #127	@ 0x7f
 80032f0:	dc00      	bgt.n	80032f4 <setWDT+0x98>
 80032f2:	e0ce      	b.n	8003492 <setWDT+0x236>
 80032f4:	23ff      	movs	r3, #255	@ 0xff
 80032f6:	9301      	str	r3, [sp, #4]
            fourSecs = 31;
 80032f8:	3be0      	subs	r3, #224	@ 0xe0
 80032fa:	469a      	mov	sl, r3
 80032fc:	4d73      	ldr	r5, [pc, #460]	@ (80034cc <setWDT+0x270>)
 80032fe:	e7c5      	b.n	800328c <setWDT+0x30>
        if ((HAL_GetTick() - start_time) > 1000)
 8003300:	f004 f814 	bl	800732c <HAL_GetTick>
 8003304:	23fa      	movs	r3, #250	@ 0xfa
 8003306:	1bc0      	subs	r0, r0, r7
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4298      	cmp	r0, r3
 800330c:	d9d3      	bls.n	80032b6 <setWDT+0x5a>
            print_error(__func__, __LINE__);
 800330e:	486d      	ldr	r0, [pc, #436]	@ (80034c4 <setWDT+0x268>)
 8003310:	496f      	ldr	r1, [pc, #444]	@ (80034d0 <setWDT+0x274>)
 8003312:	f001 fff5 	bl	8005300 <print_error>
 8003316:	e7ce      	b.n	80032b6 <setWDT+0x5a>
  return (*((__IO uint8_t *)&SPIx->DR));
 8003318:	7b33      	ldrb	r3, [r6, #12]
    uint32_t start_time = HAL_GetTick();
 800331a:	f004 f807 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800331e:	2302      	movs	r3, #2
 8003320:	0007      	movs	r7, r0
 8003322:	4699      	mov	r9, r3
 8003324:	4e65      	ldr	r6, [pc, #404]	@ (80034bc <setWDT+0x260>)
 8003326:	464a      	mov	r2, r9
 8003328:	68b3      	ldr	r3, [r6, #8]
 800332a:	421a      	tst	r2, r3
 800332c:	d017      	beq.n	800335e <setWDT+0x102>
  *spidr = TxData;
 800332e:	9b01      	ldr	r3, [sp, #4]
 8003330:	7333      	strb	r3, [r6, #12]
    start_time = HAL_GetTick();
 8003332:	f003 fffb 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8003336:	2301      	movs	r3, #1
 8003338:	0007      	movs	r7, r0
 800333a:	4699      	mov	r9, r3
 800333c:	4e5f      	ldr	r6, [pc, #380]	@ (80034bc <setWDT+0x260>)
 800333e:	464a      	mov	r2, r9
 8003340:	68b3      	ldr	r3, [r6, #8]
 8003342:	421a      	tst	r2, r3
 8003344:	d117      	bne.n	8003376 <setWDT+0x11a>
        if ((HAL_GetTick() - start_time) > 1000)
 8003346:	f003 fff1 	bl	800732c <HAL_GetTick>
 800334a:	23fa      	movs	r3, #250	@ 0xfa
 800334c:	1bc0      	subs	r0, r0, r7
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4298      	cmp	r0, r3
 8003352:	d9f4      	bls.n	800333e <setWDT+0xe2>
            print_error(__func__, __LINE__);
 8003354:	485b      	ldr	r0, [pc, #364]	@ (80034c4 <setWDT+0x268>)
 8003356:	495c      	ldr	r1, [pc, #368]	@ (80034c8 <setWDT+0x26c>)
 8003358:	f001 ffd2 	bl	8005300 <print_error>
 800335c:	e7ef      	b.n	800333e <setWDT+0xe2>
        if ((HAL_GetTick() - start_time) > 1000)
 800335e:	f003 ffe5 	bl	800732c <HAL_GetTick>
 8003362:	23fa      	movs	r3, #250	@ 0xfa
 8003364:	1bc0      	subs	r0, r0, r7
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4298      	cmp	r0, r3
 800336a:	d9dc      	bls.n	8003326 <setWDT+0xca>
            print_error(__func__, __LINE__);
 800336c:	4855      	ldr	r0, [pc, #340]	@ (80034c4 <setWDT+0x268>)
 800336e:	4958      	ldr	r1, [pc, #352]	@ (80034d0 <setWDT+0x274>)
 8003370:	f001 ffc6 	bl	8005300 <print_error>
 8003374:	e7d7      	b.n	8003326 <setWDT+0xca>
        RTC_H();
 8003376:	2280      	movs	r2, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 8003378:	7b33      	ldrb	r3, [r6, #12]
 800337a:	4b51      	ldr	r3, [pc, #324]	@ (80034c0 <setWDT+0x264>)
 800337c:	01d2      	lsls	r2, r2, #7
 800337e:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003380:	f38b 8810 	msr	PRIMASK, fp
        printf("watchdog set fourSecs=%d bResult=%d\n", fourSecs, bResult);
 8003384:	2201      	movs	r2, #1
 8003386:	4651      	mov	r1, sl
 8003388:	4852      	ldr	r0, [pc, #328]	@ (80034d4 <setWDT+0x278>)
 800338a:	f003 fd31 	bl	8006df0 <printf_>
        watchdogSecs = 0;
 800338e:	4643      	mov	r3, r8
}
 8003390:	2001      	movs	r0, #1
        watchdogSecs = 0;
 8003392:	601c      	str	r4, [r3, #0]
        watchdogUpdatePeriod = 0;
 8003394:	4b50      	ldr	r3, [pc, #320]	@ (80034d8 <setWDT+0x27c>)
 8003396:	601d      	str	r5, [r3, #0]
}
 8003398:	b003      	add	sp, #12
 800339a:	bcf0      	pop	{r4, r5, r6, r7}
 800339c:	46bb      	mov	fp, r7
 800339e:	46b2      	mov	sl, r6
 80033a0:	46a9      	mov	r9, r5
 80033a2:	46a0      	mov	r8, r4
 80033a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80033a6:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80033aa:	b672      	cpsid	i
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 80033ac:	2240      	movs	r2, #64	@ 0x40
 80033ae:	4b43      	ldr	r3, [pc, #268]	@ (80034bc <setWDT+0x260>)
 80033b0:	6819      	ldr	r1, [r3, #0]
 80033b2:	420a      	tst	r2, r1
 80033b4:	d07b      	beq.n	80034ae <setWDT+0x252>
        RTC_L();
 80033b6:	2280      	movs	r2, #128	@ 0x80
 80033b8:	4b41      	ldr	r3, [pc, #260]	@ (80034c0 <setWDT+0x264>)
 80033ba:	05d2      	lsls	r2, r2, #23
 80033bc:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 80033be:	f003 ffb5 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80033c2:	2302      	movs	r3, #2
 80033c4:	4699      	mov	r9, r3
        if ((HAL_GetTick() - start_time) > 1000)
 80033c6:	23fa      	movs	r3, #250	@ 0xfa
 80033c8:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 80033ca:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 80033cc:	469a      	mov	sl, r3
 80033ce:	4d3b      	ldr	r5, [pc, #236]	@ (80034bc <setWDT+0x260>)
 80033d0:	464a      	mov	r2, r9
 80033d2:	68ab      	ldr	r3, [r5, #8]
 80033d4:	421a      	tst	r2, r3
 80033d6:	d018      	beq.n	800340a <setWDT+0x1ae>
  *spidr = TxData;
 80033d8:	239b      	movs	r3, #155	@ 0x9b
 80033da:	732b      	strb	r3, [r5, #12]
    start_time = HAL_GetTick();
 80033dc:	f003 ffa6 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80033e0:	2301      	movs	r3, #1
 80033e2:	4699      	mov	r9, r3
        if ((HAL_GetTick() - start_time) > 1000)
 80033e4:	23fa      	movs	r3, #250	@ 0xfa
 80033e6:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 80033e8:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 80033ea:	469a      	mov	sl, r3
 80033ec:	4d33      	ldr	r5, [pc, #204]	@ (80034bc <setWDT+0x260>)
 80033ee:	464a      	mov	r2, r9
 80033f0:	68ab      	ldr	r3, [r5, #8]
 80033f2:	421a      	tst	r2, r3
 80033f4:	d113      	bne.n	800341e <setWDT+0x1c2>
 80033f6:	f003 ff99 	bl	800732c <HAL_GetTick>
 80033fa:	1b80      	subs	r0, r0, r6
 80033fc:	4550      	cmp	r0, sl
 80033fe:	d9f6      	bls.n	80033ee <setWDT+0x192>
            print_error(__func__, __LINE__);
 8003400:	4830      	ldr	r0, [pc, #192]	@ (80034c4 <setWDT+0x268>)
 8003402:	4931      	ldr	r1, [pc, #196]	@ (80034c8 <setWDT+0x26c>)
 8003404:	f001 ff7c 	bl	8005300 <print_error>
 8003408:	e7f1      	b.n	80033ee <setWDT+0x192>
        if ((HAL_GetTick() - start_time) > 1000)
 800340a:	f003 ff8f 	bl	800732c <HAL_GetTick>
 800340e:	1b80      	subs	r0, r0, r6
 8003410:	4550      	cmp	r0, sl
 8003412:	d9dd      	bls.n	80033d0 <setWDT+0x174>
            print_error(__func__, __LINE__);
 8003414:	482b      	ldr	r0, [pc, #172]	@ (80034c4 <setWDT+0x268>)
 8003416:	492e      	ldr	r1, [pc, #184]	@ (80034d0 <setWDT+0x274>)
 8003418:	f001 ff72 	bl	8005300 <print_error>
 800341c:	e7d8      	b.n	80033d0 <setWDT+0x174>
  return (*((__IO uint8_t *)&SPIx->DR));
 800341e:	7b2b      	ldrb	r3, [r5, #12]
    uint32_t start_time = HAL_GetTick();
 8003420:	f003 ff84 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8003424:	2302      	movs	r3, #2
 8003426:	4699      	mov	r9, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8003428:	23fa      	movs	r3, #250	@ 0xfa
 800342a:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 800342c:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 800342e:	469a      	mov	sl, r3
 8003430:	4d22      	ldr	r5, [pc, #136]	@ (80034bc <setWDT+0x260>)
 8003432:	464a      	mov	r2, r9
 8003434:	68ab      	ldr	r3, [r5, #8]
 8003436:	421a      	tst	r2, r3
 8003438:	d018      	beq.n	800346c <setWDT+0x210>
  *spidr = TxData;
 800343a:	2300      	movs	r3, #0
 800343c:	732b      	strb	r3, [r5, #12]
    start_time = HAL_GetTick();
 800343e:	f003 ff75 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8003442:	2301      	movs	r3, #1
 8003444:	4699      	mov	r9, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8003446:	23fa      	movs	r3, #250	@ 0xfa
 8003448:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 800344a:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 800344c:	469a      	mov	sl, r3
 800344e:	4d1b      	ldr	r5, [pc, #108]	@ (80034bc <setWDT+0x260>)
 8003450:	464a      	mov	r2, r9
 8003452:	68ab      	ldr	r3, [r5, #8]
 8003454:	421a      	tst	r2, r3
 8003456:	d113      	bne.n	8003480 <setWDT+0x224>
 8003458:	f003 ff68 	bl	800732c <HAL_GetTick>
 800345c:	1b80      	subs	r0, r0, r6
 800345e:	4550      	cmp	r0, sl
 8003460:	d9f6      	bls.n	8003450 <setWDT+0x1f4>
            print_error(__func__, __LINE__);
 8003462:	4818      	ldr	r0, [pc, #96]	@ (80034c4 <setWDT+0x268>)
 8003464:	4918      	ldr	r1, [pc, #96]	@ (80034c8 <setWDT+0x26c>)
 8003466:	f001 ff4b 	bl	8005300 <print_error>
 800346a:	e7f1      	b.n	8003450 <setWDT+0x1f4>
        if ((HAL_GetTick() - start_time) > 1000)
 800346c:	f003 ff5e 	bl	800732c <HAL_GetTick>
 8003470:	1b80      	subs	r0, r0, r6
 8003472:	4550      	cmp	r0, sl
 8003474:	d9dd      	bls.n	8003432 <setWDT+0x1d6>
            print_error(__func__, __LINE__);
 8003476:	4813      	ldr	r0, [pc, #76]	@ (80034c4 <setWDT+0x268>)
 8003478:	4915      	ldr	r1, [pc, #84]	@ (80034d0 <setWDT+0x274>)
 800347a:	f001 ff41 	bl	8005300 <print_error>
 800347e:	e7d8      	b.n	8003432 <setWDT+0x1d6>
        RTC_H();
 8003480:	2280      	movs	r2, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 8003482:	7b2b      	ldrb	r3, [r5, #12]
 8003484:	4b0e      	ldr	r3, [pc, #56]	@ (80034c0 <setWDT+0x264>)
 8003486:	01d2      	lsls	r2, r2, #7
 8003488:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800348a:	f387 8810 	msr	PRIMASK, r7
 800348e:	2500      	movs	r5, #0
 8003490:	e77d      	b.n	800338e <setWDT+0x132>
        int fourSecs = seconds / 4;
 8003492:	10a3      	asrs	r3, r4, #2
 8003494:	469a      	mov	sl, r3
        bResult = write_rtc_register(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
 8003496:	237d      	movs	r3, #125	@ 0x7d
 8003498:	425b      	negs	r3, r3
 800349a:	4323      	orrs	r3, r4
 800349c:	b2db      	uxtb	r3, r3
 800349e:	9301      	str	r3, [sp, #4]
        watchdogUpdatePeriod = (fourSecs * 2000);
 80034a0:	4653      	mov	r3, sl
 80034a2:	015d      	lsls	r5, r3, #5
 80034a4:	1aed      	subs	r5, r5, r3
 80034a6:	00ad      	lsls	r5, r5, #2
 80034a8:	4455      	add	r5, sl
 80034aa:	012d      	lsls	r5, r5, #4
 80034ac:	e6ee      	b.n	800328c <setWDT+0x30>
        SPI1->CR1 |= SPI_CR1_SPE;
 80034ae:	6819      	ldr	r1, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	e77f      	b.n	80033b6 <setWDT+0x15a>
 80034b6:	46c0      	nop			@ (mov r8, r8)
 80034b8:	20000360 	.word	0x20000360
 80034bc:	40013000 	.word	0x40013000
 80034c0:	50000400 	.word	0x50000400
 80034c4:	0800ea80 	.word	0x0800ea80
 80034c8:	00000285 	.word	0x00000285
 80034cc:	0000f230 	.word	0x0000f230
 80034d0:	0000027a 	.word	0x0000027a
 80034d4:	0800e9f8 	.word	0x0800e9f8
 80034d8:	2000035c 	.word	0x2000035c

080034dc <setCountdownTimer>:
{
 80034dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034de:	46de      	mov	lr, fp
 80034e0:	4645      	mov	r5, r8
 80034e2:	4657      	mov	r7, sl
 80034e4:	464e      	mov	r6, r9
 80034e6:	468b      	mov	fp, r1
 80034e8:	b5e0      	push	{r5, r6, r7, lr}
 80034ea:	0005      	movs	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80034ec:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80034f0:	b672      	cpsid	i
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 80034f2:	2240      	movs	r2, #64	@ 0x40
 80034f4:	4bc7      	ldr	r3, [pc, #796]	@ (8003814 <setCountdownTimer+0x338>)
 80034f6:	6819      	ldr	r1, [r3, #0]
 80034f8:	420a      	tst	r2, r1
 80034fa:	d102      	bne.n	8003502 <setCountdownTimer+0x26>
        SPI1->CR1 |= SPI_CR1_SPE;
 80034fc:	6819      	ldr	r1, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	601a      	str	r2, [r3, #0]
        RTC_L();
 8003502:	2280      	movs	r2, #128	@ 0x80
 8003504:	4bc4      	ldr	r3, [pc, #784]	@ (8003818 <setCountdownTimer+0x33c>)
 8003506:	05d2      	lsls	r2, r2, #23
 8003508:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 800350a:	f003 ff0f 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800350e:	2302      	movs	r3, #2
        if ((HAL_GetTick() - start_time) > 1000)
 8003510:	27fa      	movs	r7, #250	@ 0xfa
    uint32_t start_time = HAL_GetTick();
 8003512:	0006      	movs	r6, r0
 8003514:	4699      	mov	r9, r3
 8003516:	4cbf      	ldr	r4, [pc, #764]	@ (8003814 <setCountdownTimer+0x338>)
        if ((HAL_GetTick() - start_time) > 1000)
 8003518:	00bf      	lsls	r7, r7, #2
 800351a:	464a      	mov	r2, r9
 800351c:	68a3      	ldr	r3, [r4, #8]
 800351e:	421a      	tst	r2, r3
 8003520:	d017      	beq.n	8003552 <setCountdownTimer+0x76>
  *spidr = TxData;
 8003522:	238f      	movs	r3, #143	@ 0x8f
 8003524:	7323      	strb	r3, [r4, #12]
    start_time = HAL_GetTick();
 8003526:	f003 ff01 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800352a:	2301      	movs	r3, #1
        if ((HAL_GetTick() - start_time) > 1000)
 800352c:	27fa      	movs	r7, #250	@ 0xfa
    start_time = HAL_GetTick();
 800352e:	0006      	movs	r6, r0
 8003530:	4699      	mov	r9, r3
 8003532:	4cb8      	ldr	r4, [pc, #736]	@ (8003814 <setCountdownTimer+0x338>)
        if ((HAL_GetTick() - start_time) > 1000)
 8003534:	00bf      	lsls	r7, r7, #2
 8003536:	464a      	mov	r2, r9
 8003538:	68a3      	ldr	r3, [r4, #8]
 800353a:	421a      	tst	r2, r3
 800353c:	d113      	bne.n	8003566 <setCountdownTimer+0x8a>
 800353e:	f003 fef5 	bl	800732c <HAL_GetTick>
 8003542:	1b80      	subs	r0, r0, r6
 8003544:	42b8      	cmp	r0, r7
 8003546:	d9f6      	bls.n	8003536 <setCountdownTimer+0x5a>
            print_error(__func__, __LINE__);
 8003548:	48b4      	ldr	r0, [pc, #720]	@ (800381c <setCountdownTimer+0x340>)
 800354a:	49b5      	ldr	r1, [pc, #724]	@ (8003820 <setCountdownTimer+0x344>)
 800354c:	f001 fed8 	bl	8005300 <print_error>
 8003550:	e7f1      	b.n	8003536 <setCountdownTimer+0x5a>
        if ((HAL_GetTick() - start_time) > 1000)
 8003552:	f003 feeb 	bl	800732c <HAL_GetTick>
 8003556:	1b80      	subs	r0, r0, r6
 8003558:	42b8      	cmp	r0, r7
 800355a:	d9de      	bls.n	800351a <setCountdownTimer+0x3e>
            print_error(__func__, __LINE__);
 800355c:	48af      	ldr	r0, [pc, #700]	@ (800381c <setCountdownTimer+0x340>)
 800355e:	49b1      	ldr	r1, [pc, #708]	@ (8003824 <setCountdownTimer+0x348>)
 8003560:	f001 fece 	bl	8005300 <print_error>
 8003564:	e7d9      	b.n	800351a <setCountdownTimer+0x3e>
  return (*((__IO uint8_t *)&SPIx->DR));
 8003566:	7b23      	ldrb	r3, [r4, #12]
    uint32_t start_time = HAL_GetTick();
 8003568:	f003 fee0 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800356c:	2302      	movs	r3, #2
        if ((HAL_GetTick() - start_time) > 1000)
 800356e:	27fa      	movs	r7, #250	@ 0xfa
    uint32_t start_time = HAL_GetTick();
 8003570:	0006      	movs	r6, r0
 8003572:	4699      	mov	r9, r3
 8003574:	4ca7      	ldr	r4, [pc, #668]	@ (8003814 <setCountdownTimer+0x338>)
        if ((HAL_GetTick() - start_time) > 1000)
 8003576:	00bf      	lsls	r7, r7, #2
 8003578:	464a      	mov	r2, r9
 800357a:	68a3      	ldr	r3, [r4, #8]
 800357c:	421a      	tst	r2, r3
 800357e:	d016      	beq.n	80035ae <setCountdownTimer+0xd2>
  *spidr = TxData;
 8003580:	2300      	movs	r3, #0
 8003582:	7323      	strb	r3, [r4, #12]
    start_time = HAL_GetTick();
 8003584:	f003 fed2 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 8003588:	23fa      	movs	r3, #250	@ 0xfa
 800358a:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 800358c:	0006      	movs	r6, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800358e:	2701      	movs	r7, #1
        if ((HAL_GetTick() - start_time) > 1000)
 8003590:	469a      	mov	sl, r3
 8003592:	4ca0      	ldr	r4, [pc, #640]	@ (8003814 <setCountdownTimer+0x338>)
 8003594:	68a3      	ldr	r3, [r4, #8]
 8003596:	421f      	tst	r7, r3
 8003598:	d113      	bne.n	80035c2 <setCountdownTimer+0xe6>
 800359a:	f003 fec7 	bl	800732c <HAL_GetTick>
 800359e:	1b80      	subs	r0, r0, r6
 80035a0:	4550      	cmp	r0, sl
 80035a2:	d9f7      	bls.n	8003594 <setCountdownTimer+0xb8>
            print_error(__func__, __LINE__);
 80035a4:	489d      	ldr	r0, [pc, #628]	@ (800381c <setCountdownTimer+0x340>)
 80035a6:	499e      	ldr	r1, [pc, #632]	@ (8003820 <setCountdownTimer+0x344>)
 80035a8:	f001 feaa 	bl	8005300 <print_error>
 80035ac:	e7f2      	b.n	8003594 <setCountdownTimer+0xb8>
        if ((HAL_GetTick() - start_time) > 1000)
 80035ae:	f003 febd 	bl	800732c <HAL_GetTick>
 80035b2:	1b80      	subs	r0, r0, r6
 80035b4:	42b8      	cmp	r0, r7
 80035b6:	d9df      	bls.n	8003578 <setCountdownTimer+0x9c>
            print_error(__func__, __LINE__);
 80035b8:	4898      	ldr	r0, [pc, #608]	@ (800381c <setCountdownTimer+0x340>)
 80035ba:	499a      	ldr	r1, [pc, #616]	@ (8003824 <setCountdownTimer+0x348>)
 80035bc:	f001 fea0 	bl	8005300 <print_error>
 80035c0:	e7da      	b.n	8003578 <setCountdownTimer+0x9c>
        RTC_H();
 80035c2:	2280      	movs	r2, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 80035c4:	7b23      	ldrb	r3, [r4, #12]
 80035c6:	4b94      	ldr	r3, [pc, #592]	@ (8003818 <setCountdownTimer+0x33c>)
 80035c8:	01d2      	lsls	r2, r2, #7
 80035ca:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035cc:	f388 8810 	msr	PRIMASK, r8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80035d0:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80035d4:	b672      	cpsid	i
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 80035d6:	2340      	movs	r3, #64	@ 0x40
 80035d8:	6822      	ldr	r2, [r4, #0]
 80035da:	4213      	tst	r3, r2
 80035dc:	d102      	bne.n	80035e4 <setCountdownTimer+0x108>
        SPI1->CR1 |= SPI_CR1_SPE;
 80035de:	6822      	ldr	r2, [r4, #0]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	6023      	str	r3, [r4, #0]
        RTC_L();
 80035e4:	2280      	movs	r2, #128	@ 0x80
 80035e6:	4b8c      	ldr	r3, [pc, #560]	@ (8003818 <setCountdownTimer+0x33c>)
 80035e8:	05d2      	lsls	r2, r2, #23
 80035ea:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 80035ec:	f003 fe9e 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80035f0:	2302      	movs	r3, #2
 80035f2:	4699      	mov	r9, r3
        if ((HAL_GetTick() - start_time) > 1000)
 80035f4:	23fa      	movs	r3, #250	@ 0xfa
 80035f6:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 80035f8:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 80035fa:	469a      	mov	sl, r3
 80035fc:	4c85      	ldr	r4, [pc, #532]	@ (8003814 <setCountdownTimer+0x338>)
 80035fe:	464a      	mov	r2, r9
 8003600:	68a3      	ldr	r3, [r4, #8]
 8003602:	421a      	tst	r2, r3
 8003604:	d018      	beq.n	8003638 <setCountdownTimer+0x15c>
  *spidr = TxData;
 8003606:	2398      	movs	r3, #152	@ 0x98
 8003608:	7323      	strb	r3, [r4, #12]
    start_time = HAL_GetTick();
 800360a:	f003 fe8f 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800360e:	2301      	movs	r3, #1
 8003610:	4699      	mov	r9, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8003612:	23fa      	movs	r3, #250	@ 0xfa
 8003614:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8003616:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8003618:	469a      	mov	sl, r3
 800361a:	4c7e      	ldr	r4, [pc, #504]	@ (8003814 <setCountdownTimer+0x338>)
 800361c:	464a      	mov	r2, r9
 800361e:	68a3      	ldr	r3, [r4, #8]
 8003620:	421a      	tst	r2, r3
 8003622:	d113      	bne.n	800364c <setCountdownTimer+0x170>
 8003624:	f003 fe82 	bl	800732c <HAL_GetTick>
 8003628:	1b80      	subs	r0, r0, r6
 800362a:	4550      	cmp	r0, sl
 800362c:	d9f6      	bls.n	800361c <setCountdownTimer+0x140>
            print_error(__func__, __LINE__);
 800362e:	487b      	ldr	r0, [pc, #492]	@ (800381c <setCountdownTimer+0x340>)
 8003630:	497b      	ldr	r1, [pc, #492]	@ (8003820 <setCountdownTimer+0x344>)
 8003632:	f001 fe65 	bl	8005300 <print_error>
 8003636:	e7f1      	b.n	800361c <setCountdownTimer+0x140>
        if ((HAL_GetTick() - start_time) > 1000)
 8003638:	f003 fe78 	bl	800732c <HAL_GetTick>
 800363c:	1b80      	subs	r0, r0, r6
 800363e:	4550      	cmp	r0, sl
 8003640:	d9dd      	bls.n	80035fe <setCountdownTimer+0x122>
            print_error(__func__, __LINE__);
 8003642:	4876      	ldr	r0, [pc, #472]	@ (800381c <setCountdownTimer+0x340>)
 8003644:	4977      	ldr	r1, [pc, #476]	@ (8003824 <setCountdownTimer+0x348>)
 8003646:	f001 fe5b 	bl	8005300 <print_error>
 800364a:	e7d8      	b.n	80035fe <setCountdownTimer+0x122>
  return (*((__IO uint8_t *)&SPIx->DR));
 800364c:	7b23      	ldrb	r3, [r4, #12]
    uint32_t start_time = HAL_GetTick();
 800364e:	f003 fe6d 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8003652:	2302      	movs	r3, #2
 8003654:	4699      	mov	r9, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8003656:	23fa      	movs	r3, #250	@ 0xfa
 8003658:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 800365a:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 800365c:	469a      	mov	sl, r3
 800365e:	4c6d      	ldr	r4, [pc, #436]	@ (8003814 <setCountdownTimer+0x338>)
 8003660:	464a      	mov	r2, r9
 8003662:	68a3      	ldr	r3, [r4, #8]
 8003664:	421a      	tst	r2, r3
 8003666:	d018      	beq.n	800369a <setCountdownTimer+0x1be>
  *spidr = TxData;
 8003668:	2323      	movs	r3, #35	@ 0x23
 800366a:	7323      	strb	r3, [r4, #12]
    start_time = HAL_GetTick();
 800366c:	f003 fe5e 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8003670:	2301      	movs	r3, #1
 8003672:	4699      	mov	r9, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8003674:	23fa      	movs	r3, #250	@ 0xfa
 8003676:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8003678:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 800367a:	469a      	mov	sl, r3
 800367c:	4c65      	ldr	r4, [pc, #404]	@ (8003814 <setCountdownTimer+0x338>)
 800367e:	464a      	mov	r2, r9
 8003680:	68a3      	ldr	r3, [r4, #8]
 8003682:	421a      	tst	r2, r3
 8003684:	d113      	bne.n	80036ae <setCountdownTimer+0x1d2>
 8003686:	f003 fe51 	bl	800732c <HAL_GetTick>
 800368a:	1b80      	subs	r0, r0, r6
 800368c:	4550      	cmp	r0, sl
 800368e:	d9f6      	bls.n	800367e <setCountdownTimer+0x1a2>
            print_error(__func__, __LINE__);
 8003690:	4862      	ldr	r0, [pc, #392]	@ (800381c <setCountdownTimer+0x340>)
 8003692:	4963      	ldr	r1, [pc, #396]	@ (8003820 <setCountdownTimer+0x344>)
 8003694:	f001 fe34 	bl	8005300 <print_error>
 8003698:	e7f1      	b.n	800367e <setCountdownTimer+0x1a2>
        if ((HAL_GetTick() - start_time) > 1000)
 800369a:	f003 fe47 	bl	800732c <HAL_GetTick>
 800369e:	1b80      	subs	r0, r0, r6
 80036a0:	4550      	cmp	r0, sl
 80036a2:	d9dd      	bls.n	8003660 <setCountdownTimer+0x184>
            print_error(__func__, __LINE__);
 80036a4:	485d      	ldr	r0, [pc, #372]	@ (800381c <setCountdownTimer+0x340>)
 80036a6:	495f      	ldr	r1, [pc, #380]	@ (8003824 <setCountdownTimer+0x348>)
 80036a8:	f001 fe2a 	bl	8005300 <print_error>
 80036ac:	e7d8      	b.n	8003660 <setCountdownTimer+0x184>
        RTC_H();
 80036ae:	2280      	movs	r2, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 80036b0:	7b23      	ldrb	r3, [r4, #12]
 80036b2:	4b59      	ldr	r3, [pc, #356]	@ (8003818 <setCountdownTimer+0x33c>)
 80036b4:	01d2      	lsls	r2, r2, #7
 80036b6:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036b8:	f388 8810 	msr	PRIMASK, r8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80036bc:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80036c0:	b672      	cpsid	i
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 80036c2:	2340      	movs	r3, #64	@ 0x40
 80036c4:	6822      	ldr	r2, [r4, #0]
 80036c6:	4213      	tst	r3, r2
 80036c8:	d02a      	beq.n	8003720 <setCountdownTimer+0x244>
        RTC_L();
 80036ca:	2280      	movs	r2, #128	@ 0x80
 80036cc:	4b52      	ldr	r3, [pc, #328]	@ (8003818 <setCountdownTimer+0x33c>)
 80036ce:	05d2      	lsls	r2, r2, #23
 80036d0:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 80036d2:	f003 fe2b 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80036d6:	2302      	movs	r3, #2
 80036d8:	4699      	mov	r9, r3
        if ((HAL_GetTick() - start_time) > 1000)
 80036da:	23fa      	movs	r3, #250	@ 0xfa
 80036dc:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 80036de:	4680      	mov	r8, r0
        if ((HAL_GetTick() - start_time) > 1000)
 80036e0:	469a      	mov	sl, r3
 80036e2:	4c4c      	ldr	r4, [pc, #304]	@ (8003814 <setCountdownTimer+0x338>)
 80036e4:	464a      	mov	r2, r9
 80036e6:	68a3      	ldr	r3, [r4, #8]
 80036e8:	421a      	tst	r2, r3
 80036ea:	d048      	beq.n	800377e <setCountdownTimer+0x2a2>
  *spidr = TxData;
 80036ec:	2399      	movs	r3, #153	@ 0x99
 80036ee:	7323      	strb	r3, [r4, #12]
    start_time = HAL_GetTick();
 80036f0:	f003 fe1c 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80036f4:	2301      	movs	r3, #1
 80036f6:	4699      	mov	r9, r3
        if ((HAL_GetTick() - start_time) > 1000)
 80036f8:	23fa      	movs	r3, #250	@ 0xfa
 80036fa:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 80036fc:	4680      	mov	r8, r0
        if ((HAL_GetTick() - start_time) > 1000)
 80036fe:	469a      	mov	sl, r3
 8003700:	4c44      	ldr	r4, [pc, #272]	@ (8003814 <setCountdownTimer+0x338>)
 8003702:	464a      	mov	r2, r9
 8003704:	68a3      	ldr	r3, [r4, #8]
 8003706:	421a      	tst	r2, r3
 8003708:	d10e      	bne.n	8003728 <setCountdownTimer+0x24c>
 800370a:	f003 fe0f 	bl	800732c <HAL_GetTick>
 800370e:	4643      	mov	r3, r8
 8003710:	1ac0      	subs	r0, r0, r3
 8003712:	4550      	cmp	r0, sl
 8003714:	d9f5      	bls.n	8003702 <setCountdownTimer+0x226>
            print_error(__func__, __LINE__);
 8003716:	4841      	ldr	r0, [pc, #260]	@ (800381c <setCountdownTimer+0x340>)
 8003718:	4941      	ldr	r1, [pc, #260]	@ (8003820 <setCountdownTimer+0x344>)
 800371a:	f001 fdf1 	bl	8005300 <print_error>
 800371e:	e7f0      	b.n	8003702 <setCountdownTimer+0x226>
        SPI1->CR1 |= SPI_CR1_SPE;
 8003720:	6822      	ldr	r2, [r4, #0]
 8003722:	4313      	orrs	r3, r2
 8003724:	6023      	str	r3, [r4, #0]
 8003726:	e7d0      	b.n	80036ca <setCountdownTimer+0x1ee>
  return (*((__IO uint8_t *)&SPIx->DR));
 8003728:	7b23      	ldrb	r3, [r4, #12]
    uint32_t start_time = HAL_GetTick();
 800372a:	f003 fdff 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800372e:	4b39      	ldr	r3, [pc, #228]	@ (8003814 <setCountdownTimer+0x338>)
 8003730:	0004      	movs	r4, r0
 8003732:	4699      	mov	r9, r3
 8003734:	2302      	movs	r3, #2
 8003736:	4698      	mov	r8, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8003738:	23fa      	movs	r3, #250	@ 0xfa
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	469a      	mov	sl, r3
 800373e:	464b      	mov	r3, r9
 8003740:	4642      	mov	r2, r8
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	421a      	tst	r2, r3
 8003746:	d05a      	beq.n	80037fe <setCountdownTimer+0x322>
    if (value > 255)
 8003748:	2dff      	cmp	r5, #255	@ 0xff
 800374a:	dd54      	ble.n	80037f6 <setCountdownTimer+0x31a>
 800374c:	25ff      	movs	r5, #255	@ 0xff
  *spidr = TxData;
 800374e:	4c31      	ldr	r4, [pc, #196]	@ (8003814 <setCountdownTimer+0x338>)
    bResult = write_rtc_register(REG_TIMER, (uint8_t)value);
 8003750:	b2e8      	uxtb	r0, r5
 8003752:	7320      	strb	r0, [r4, #12]
    start_time = HAL_GetTick();
 8003754:	f003 fdea 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8003758:	2301      	movs	r3, #1
 800375a:	0005      	movs	r5, r0
 800375c:	4698      	mov	r8, r3
 800375e:	4642      	mov	r2, r8
 8003760:	68a3      	ldr	r3, [r4, #8]
 8003762:	421a      	tst	r2, r3
 8003764:	d116      	bne.n	8003794 <setCountdownTimer+0x2b8>
        if ((HAL_GetTick() - start_time) > 1000)
 8003766:	f003 fde1 	bl	800732c <HAL_GetTick>
 800376a:	23fa      	movs	r3, #250	@ 0xfa
 800376c:	1b40      	subs	r0, r0, r5
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4298      	cmp	r0, r3
 8003772:	d9f4      	bls.n	800375e <setCountdownTimer+0x282>
            print_error(__func__, __LINE__);
 8003774:	4829      	ldr	r0, [pc, #164]	@ (800381c <setCountdownTimer+0x340>)
 8003776:	492a      	ldr	r1, [pc, #168]	@ (8003820 <setCountdownTimer+0x344>)
 8003778:	f001 fdc2 	bl	8005300 <print_error>
 800377c:	e7ef      	b.n	800375e <setCountdownTimer+0x282>
        if ((HAL_GetTick() - start_time) > 1000)
 800377e:	f003 fdd5 	bl	800732c <HAL_GetTick>
 8003782:	4643      	mov	r3, r8
 8003784:	1ac0      	subs	r0, r0, r3
 8003786:	4550      	cmp	r0, sl
 8003788:	d9ac      	bls.n	80036e4 <setCountdownTimer+0x208>
            print_error(__func__, __LINE__);
 800378a:	4824      	ldr	r0, [pc, #144]	@ (800381c <setCountdownTimer+0x340>)
 800378c:	4925      	ldr	r1, [pc, #148]	@ (8003824 <setCountdownTimer+0x348>)
 800378e:	f001 fdb7 	bl	8005300 <print_error>
 8003792:	e7a7      	b.n	80036e4 <setCountdownTimer+0x208>
        RTC_H();
 8003794:	2280      	movs	r2, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 8003796:	7b23      	ldrb	r3, [r4, #12]
 8003798:	4b1f      	ldr	r3, [pc, #124]	@ (8003818 <setCountdownTimer+0x33c>)
 800379a:	01d2      	lsls	r2, r2, #7
 800379c:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800379e:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80037a2:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80037a6:	b672      	cpsid	i
    RTC_L();
 80037a8:	2280      	movs	r2, #128	@ 0x80
 80037aa:	05d2      	lsls	r2, r2, #23
 80037ac:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 80037ae:	f003 fdbd 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80037b2:	4b18      	ldr	r3, [pc, #96]	@ (8003814 <setCountdownTimer+0x338>)
 80037b4:	0005      	movs	r5, r0
 80037b6:	4698      	mov	r8, r3
 80037b8:	2402      	movs	r4, #2
 80037ba:	4643      	mov	r3, r8
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	421c      	tst	r4, r3
 80037c0:	d059      	beq.n	8003876 <setCountdownTimer+0x39a>
  *spidr = TxData;
 80037c2:	2312      	movs	r3, #18
 80037c4:	4642      	mov	r2, r8
 80037c6:	7313      	strb	r3, [r2, #12]
    start_time = HAL_GetTick();
 80037c8:	f003 fdb0 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80037cc:	2301      	movs	r3, #1
 80037ce:	4698      	mov	r8, r3
        if ((HAL_GetTick() - start_time) > 1000)
 80037d0:	23fa      	movs	r3, #250	@ 0xfa
 80037d2:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 80037d4:	0005      	movs	r5, r0
        if ((HAL_GetTick() - start_time) > 1000)
 80037d6:	4699      	mov	r9, r3
 80037d8:	4c0e      	ldr	r4, [pc, #56]	@ (8003814 <setCountdownTimer+0x338>)
 80037da:	4642      	mov	r2, r8
 80037dc:	68a3      	ldr	r3, [r4, #8]
 80037de:	421a      	tst	r2, r3
 80037e0:	d122      	bne.n	8003828 <setCountdownTimer+0x34c>
 80037e2:	f003 fda3 	bl	800732c <HAL_GetTick>
 80037e6:	1b40      	subs	r0, r0, r5
 80037e8:	4548      	cmp	r0, r9
 80037ea:	d9f6      	bls.n	80037da <setCountdownTimer+0x2fe>
            print_error(__func__, __LINE__);
 80037ec:	480b      	ldr	r0, [pc, #44]	@ (800381c <setCountdownTimer+0x340>)
 80037ee:	490c      	ldr	r1, [pc, #48]	@ (8003820 <setCountdownTimer+0x344>)
 80037f0:	f001 fd86 	bl	8005300 <print_error>
 80037f4:	e7f1      	b.n	80037da <setCountdownTimer+0x2fe>
    bResult = write_rtc_register(REG_TIMER, (uint8_t)value);
 80037f6:	2d00      	cmp	r5, #0
 80037f8:	dca9      	bgt.n	800374e <setCountdownTimer+0x272>
 80037fa:	2501      	movs	r5, #1
 80037fc:	e7a7      	b.n	800374e <setCountdownTimer+0x272>
        if ((HAL_GetTick() - start_time) > 1000)
 80037fe:	f003 fd95 	bl	800732c <HAL_GetTick>
 8003802:	1b00      	subs	r0, r0, r4
 8003804:	4550      	cmp	r0, sl
 8003806:	d99a      	bls.n	800373e <setCountdownTimer+0x262>
            print_error(__func__, __LINE__);
 8003808:	4804      	ldr	r0, [pc, #16]	@ (800381c <setCountdownTimer+0x340>)
 800380a:	4906      	ldr	r1, [pc, #24]	@ (8003824 <setCountdownTimer+0x348>)
 800380c:	f001 fd78 	bl	8005300 <print_error>
 8003810:	e795      	b.n	800373e <setCountdownTimer+0x262>
 8003812:	46c0      	nop			@ (mov r8, r8)
 8003814:	40013000 	.word	0x40013000
 8003818:	50000400 	.word	0x50000400
 800381c:	0800ea80 	.word	0x0800ea80
 8003820:	00000285 	.word	0x00000285
 8003824:	0000027a 	.word	0x0000027a
  return (*((__IO uint8_t *)&SPIx->DR));
 8003828:	7b23      	ldrb	r3, [r4, #12]
    uint32_t start_time = HAL_GetTick();
 800382a:	f003 fd7f 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800382e:	2302      	movs	r3, #2
 8003830:	4698      	mov	r8, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8003832:	23fa      	movs	r3, #250	@ 0xfa
 8003834:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 8003836:	0005      	movs	r5, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8003838:	4699      	mov	r9, r3
 800383a:	4c9d      	ldr	r4, [pc, #628]	@ (8003ab0 <setCountdownTimer+0x5d4>)
 800383c:	4642      	mov	r2, r8
 800383e:	68a3      	ldr	r3, [r4, #8]
 8003840:	421a      	tst	r2, r3
 8003842:	d061      	beq.n	8003908 <setCountdownTimer+0x42c>
  *spidr = TxData;
 8003844:	2300      	movs	r3, #0
 8003846:	7323      	strb	r3, [r4, #12]
    start_time = HAL_GetTick();
 8003848:	f003 fd70 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800384c:	2301      	movs	r3, #1
 800384e:	4698      	mov	r8, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8003850:	23fa      	movs	r3, #250	@ 0xfa
 8003852:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8003854:	0004      	movs	r4, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8003856:	4699      	mov	r9, r3
 8003858:	4d95      	ldr	r5, [pc, #596]	@ (8003ab0 <setCountdownTimer+0x5d4>)
 800385a:	4642      	mov	r2, r8
 800385c:	68ab      	ldr	r3, [r5, #8]
 800385e:	421a      	tst	r2, r3
 8003860:	d115      	bne.n	800388e <setCountdownTimer+0x3b2>
 8003862:	f003 fd63 	bl	800732c <HAL_GetTick>
 8003866:	1b00      	subs	r0, r0, r4
 8003868:	4548      	cmp	r0, r9
 800386a:	d9f6      	bls.n	800385a <setCountdownTimer+0x37e>
            print_error(__func__, __LINE__);
 800386c:	4891      	ldr	r0, [pc, #580]	@ (8003ab4 <setCountdownTimer+0x5d8>)
 800386e:	4992      	ldr	r1, [pc, #584]	@ (8003ab8 <setCountdownTimer+0x5dc>)
 8003870:	f001 fd46 	bl	8005300 <print_error>
 8003874:	e7f1      	b.n	800385a <setCountdownTimer+0x37e>
        if ((HAL_GetTick() - start_time) > 1000)
 8003876:	f003 fd59 	bl	800732c <HAL_GetTick>
 800387a:	22fa      	movs	r2, #250	@ 0xfa
 800387c:	1b40      	subs	r0, r0, r5
 800387e:	0092      	lsls	r2, r2, #2
 8003880:	4290      	cmp	r0, r2
 8003882:	d99a      	bls.n	80037ba <setCountdownTimer+0x2de>
            print_error(__func__, __LINE__);
 8003884:	488b      	ldr	r0, [pc, #556]	@ (8003ab4 <setCountdownTimer+0x5d8>)
 8003886:	498d      	ldr	r1, [pc, #564]	@ (8003abc <setCountdownTimer+0x5e0>)
 8003888:	f001 fd3a 	bl	8005300 <print_error>
 800388c:	e795      	b.n	80037ba <setCountdownTimer+0x2de>
    RTC_H();
 800388e:	2280      	movs	r2, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 8003890:	7b2c      	ldrb	r4, [r5, #12]
 8003892:	4b8b      	ldr	r3, [pc, #556]	@ (8003ac0 <setCountdownTimer+0x5e4>)
 8003894:	01d2      	lsls	r2, r2, #7
 8003896:	b2e4      	uxtb	r4, r4
 8003898:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800389a:	f386 8810 	msr	PRIMASK, r6
    uint8_t newValue = (value & andValue) | orValue;
 800389e:	2308      	movs	r3, #8
 80038a0:	431c      	orrs	r4, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80038a2:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80038a6:	b672      	cpsid	i
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 80038a8:	682a      	ldr	r2, [r5, #0]
 80038aa:	3338      	adds	r3, #56	@ 0x38
 80038ac:	4213      	tst	r3, r2
 80038ae:	d100      	bne.n	80038b2 <setCountdownTimer+0x3d6>
 80038b0:	e0f5      	b.n	8003a9e <setCountdownTimer+0x5c2>
        RTC_L();
 80038b2:	2280      	movs	r2, #128	@ 0x80
 80038b4:	4b82      	ldr	r3, [pc, #520]	@ (8003ac0 <setCountdownTimer+0x5e4>)
 80038b6:	05d2      	lsls	r2, r2, #23
 80038b8:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 80038ba:	f003 fd37 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80038be:	2302      	movs	r3, #2
 80038c0:	4699      	mov	r9, r3
        if ((HAL_GetTick() - start_time) > 1000)
 80038c2:	23fa      	movs	r3, #250	@ 0xfa
 80038c4:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 80038c6:	4680      	mov	r8, r0
        if ((HAL_GetTick() - start_time) > 1000)
 80038c8:	469a      	mov	sl, r3
 80038ca:	4d79      	ldr	r5, [pc, #484]	@ (8003ab0 <setCountdownTimer+0x5d4>)
 80038cc:	464a      	mov	r2, r9
 80038ce:	68ab      	ldr	r3, [r5, #8]
 80038d0:	421a      	tst	r2, r3
 80038d2:	d049      	beq.n	8003968 <setCountdownTimer+0x48c>
  *spidr = TxData;
 80038d4:	2392      	movs	r3, #146	@ 0x92
 80038d6:	732b      	strb	r3, [r5, #12]
    start_time = HAL_GetTick();
 80038d8:	f003 fd28 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80038dc:	2301      	movs	r3, #1
 80038de:	4699      	mov	r9, r3
        if ((HAL_GetTick() - start_time) > 1000)
 80038e0:	23fa      	movs	r3, #250	@ 0xfa
 80038e2:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 80038e4:	4680      	mov	r8, r0
        if ((HAL_GetTick() - start_time) > 1000)
 80038e6:	469a      	mov	sl, r3
 80038e8:	4d71      	ldr	r5, [pc, #452]	@ (8003ab0 <setCountdownTimer+0x5d4>)
 80038ea:	464a      	mov	r2, r9
 80038ec:	68ab      	ldr	r3, [r5, #8]
 80038ee:	421a      	tst	r2, r3
 80038f0:	d114      	bne.n	800391c <setCountdownTimer+0x440>
 80038f2:	f003 fd1b 	bl	800732c <HAL_GetTick>
 80038f6:	4643      	mov	r3, r8
 80038f8:	1ac0      	subs	r0, r0, r3
 80038fa:	4550      	cmp	r0, sl
 80038fc:	d9f5      	bls.n	80038ea <setCountdownTimer+0x40e>
            print_error(__func__, __LINE__);
 80038fe:	486d      	ldr	r0, [pc, #436]	@ (8003ab4 <setCountdownTimer+0x5d8>)
 8003900:	496d      	ldr	r1, [pc, #436]	@ (8003ab8 <setCountdownTimer+0x5dc>)
 8003902:	f001 fcfd 	bl	8005300 <print_error>
 8003906:	e7f0      	b.n	80038ea <setCountdownTimer+0x40e>
        if ((HAL_GetTick() - start_time) > 1000)
 8003908:	f003 fd10 	bl	800732c <HAL_GetTick>
 800390c:	1b40      	subs	r0, r0, r5
 800390e:	4548      	cmp	r0, r9
 8003910:	d994      	bls.n	800383c <setCountdownTimer+0x360>
            print_error(__func__, __LINE__);
 8003912:	4868      	ldr	r0, [pc, #416]	@ (8003ab4 <setCountdownTimer+0x5d8>)
 8003914:	4969      	ldr	r1, [pc, #420]	@ (8003abc <setCountdownTimer+0x5e0>)
 8003916:	f001 fcf3 	bl	8005300 <print_error>
 800391a:	e78f      	b.n	800383c <setCountdownTimer+0x360>
  return (*((__IO uint8_t *)&SPIx->DR));
 800391c:	7b2b      	ldrb	r3, [r5, #12]
    uint32_t start_time = HAL_GetTick();
 800391e:	f003 fd05 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8003922:	2302      	movs	r3, #2
 8003924:	4699      	mov	r9, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8003926:	23fa      	movs	r3, #250	@ 0xfa
 8003928:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 800392a:	4680      	mov	r8, r0
        if ((HAL_GetTick() - start_time) > 1000)
 800392c:	469a      	mov	sl, r3
 800392e:	4d60      	ldr	r5, [pc, #384]	@ (8003ab0 <setCountdownTimer+0x5d4>)
 8003930:	464a      	mov	r2, r9
 8003932:	68ab      	ldr	r3, [r5, #8]
 8003934:	421a      	tst	r2, r3
 8003936:	d061      	beq.n	80039fc <setCountdownTimer+0x520>
  *spidr = TxData;
 8003938:	732c      	strb	r4, [r5, #12]
    start_time = HAL_GetTick();
 800393a:	f003 fcf7 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800393e:	2301      	movs	r3, #1
 8003940:	4698      	mov	r8, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8003942:	23fa      	movs	r3, #250	@ 0xfa
 8003944:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8003946:	0005      	movs	r5, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8003948:	4699      	mov	r9, r3
 800394a:	4c59      	ldr	r4, [pc, #356]	@ (8003ab0 <setCountdownTimer+0x5d4>)
 800394c:	4642      	mov	r2, r8
 800394e:	68a3      	ldr	r3, [r4, #8]
 8003950:	421a      	tst	r2, r3
 8003952:	d114      	bne.n	800397e <setCountdownTimer+0x4a2>
 8003954:	f003 fcea 	bl	800732c <HAL_GetTick>
 8003958:	1b40      	subs	r0, r0, r5
 800395a:	4548      	cmp	r0, r9
 800395c:	d9f6      	bls.n	800394c <setCountdownTimer+0x470>
            print_error(__func__, __LINE__);
 800395e:	4855      	ldr	r0, [pc, #340]	@ (8003ab4 <setCountdownTimer+0x5d8>)
 8003960:	4955      	ldr	r1, [pc, #340]	@ (8003ab8 <setCountdownTimer+0x5dc>)
 8003962:	f001 fccd 	bl	8005300 <print_error>
 8003966:	e7f1      	b.n	800394c <setCountdownTimer+0x470>
        if ((HAL_GetTick() - start_time) > 1000)
 8003968:	f003 fce0 	bl	800732c <HAL_GetTick>
 800396c:	4643      	mov	r3, r8
 800396e:	1ac0      	subs	r0, r0, r3
 8003970:	4550      	cmp	r0, sl
 8003972:	d9ab      	bls.n	80038cc <setCountdownTimer+0x3f0>
            print_error(__func__, __LINE__);
 8003974:	484f      	ldr	r0, [pc, #316]	@ (8003ab4 <setCountdownTimer+0x5d8>)
 8003976:	4951      	ldr	r1, [pc, #324]	@ (8003abc <setCountdownTimer+0x5e0>)
 8003978:	f001 fcc2 	bl	8005300 <print_error>
 800397c:	e7a6      	b.n	80038cc <setCountdownTimer+0x3f0>
        RTC_H();
 800397e:	2280      	movs	r2, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 8003980:	7b23      	ldrb	r3, [r4, #12]
 8003982:	4b4f      	ldr	r3, [pc, #316]	@ (8003ac0 <setCountdownTimer+0x5e4>)
 8003984:	01d2      	lsls	r2, r2, #7
 8003986:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003988:	f386 8810 	msr	PRIMASK, r6
    bResult = write_rtc_register(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
 800398c:	2380      	movs	r3, #128	@ 0x80
 800398e:	465f      	mov	r7, fp
 8003990:	425b      	negs	r3, r3
 8003992:	3702      	adds	r7, #2
 8003994:	433b      	orrs	r3, r7
 8003996:	b2dd      	uxtb	r5, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003998:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800399c:	b672      	cpsid	i
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 800399e:	2340      	movs	r3, #64	@ 0x40
 80039a0:	6822      	ldr	r2, [r4, #0]
 80039a2:	4213      	tst	r3, r2
 80039a4:	d100      	bne.n	80039a8 <setCountdownTimer+0x4cc>
 80039a6:	e07e      	b.n	8003aa6 <setCountdownTimer+0x5ca>
        RTC_L();
 80039a8:	2280      	movs	r2, #128	@ 0x80
 80039aa:	4b45      	ldr	r3, [pc, #276]	@ (8003ac0 <setCountdownTimer+0x5e4>)
 80039ac:	05d2      	lsls	r2, r2, #23
 80039ae:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 80039b0:	f003 fcbc 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80039b4:	2302      	movs	r3, #2
 80039b6:	4698      	mov	r8, r3
        if ((HAL_GetTick() - start_time) > 1000)
 80039b8:	23fa      	movs	r3, #250	@ 0xfa
 80039ba:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 80039bc:	0007      	movs	r7, r0
        if ((HAL_GetTick() - start_time) > 1000)
 80039be:	4699      	mov	r9, r3
 80039c0:	4c3b      	ldr	r4, [pc, #236]	@ (8003ab0 <setCountdownTimer+0x5d4>)
 80039c2:	4642      	mov	r2, r8
 80039c4:	68a3      	ldr	r3, [r4, #8]
 80039c6:	421a      	tst	r2, r3
 80039c8:	d05f      	beq.n	8003a8a <setCountdownTimer+0x5ae>
  *spidr = TxData;
 80039ca:	2398      	movs	r3, #152	@ 0x98
 80039cc:	7323      	strb	r3, [r4, #12]
    start_time = HAL_GetTick();
 80039ce:	f003 fcad 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80039d2:	2301      	movs	r3, #1
 80039d4:	4698      	mov	r8, r3
        if ((HAL_GetTick() - start_time) > 1000)
 80039d6:	23fa      	movs	r3, #250	@ 0xfa
 80039d8:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 80039da:	0007      	movs	r7, r0
        if ((HAL_GetTick() - start_time) > 1000)
 80039dc:	4699      	mov	r9, r3
 80039de:	4c34      	ldr	r4, [pc, #208]	@ (8003ab0 <setCountdownTimer+0x5d4>)
 80039e0:	4642      	mov	r2, r8
 80039e2:	68a3      	ldr	r3, [r4, #8]
 80039e4:	421a      	tst	r2, r3
 80039e6:	d114      	bne.n	8003a12 <setCountdownTimer+0x536>
 80039e8:	f003 fca0 	bl	800732c <HAL_GetTick>
 80039ec:	1bc0      	subs	r0, r0, r7
 80039ee:	4548      	cmp	r0, r9
 80039f0:	d9f6      	bls.n	80039e0 <setCountdownTimer+0x504>
            print_error(__func__, __LINE__);
 80039f2:	4830      	ldr	r0, [pc, #192]	@ (8003ab4 <setCountdownTimer+0x5d8>)
 80039f4:	4930      	ldr	r1, [pc, #192]	@ (8003ab8 <setCountdownTimer+0x5dc>)
 80039f6:	f001 fc83 	bl	8005300 <print_error>
 80039fa:	e7f1      	b.n	80039e0 <setCountdownTimer+0x504>
        if ((HAL_GetTick() - start_time) > 1000)
 80039fc:	f003 fc96 	bl	800732c <HAL_GetTick>
 8003a00:	4643      	mov	r3, r8
 8003a02:	1ac0      	subs	r0, r0, r3
 8003a04:	4550      	cmp	r0, sl
 8003a06:	d993      	bls.n	8003930 <setCountdownTimer+0x454>
            print_error(__func__, __LINE__);
 8003a08:	482a      	ldr	r0, [pc, #168]	@ (8003ab4 <setCountdownTimer+0x5d8>)
 8003a0a:	492c      	ldr	r1, [pc, #176]	@ (8003abc <setCountdownTimer+0x5e0>)
 8003a0c:	f001 fc78 	bl	8005300 <print_error>
 8003a10:	e78e      	b.n	8003930 <setCountdownTimer+0x454>
  return (*((__IO uint8_t *)&SPIx->DR));
 8003a12:	7b23      	ldrb	r3, [r4, #12]
    uint32_t start_time = HAL_GetTick();
 8003a14:	f003 fc8a 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8003a18:	2302      	movs	r3, #2
 8003a1a:	4698      	mov	r8, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8003a1c:	23fa      	movs	r3, #250	@ 0xfa
 8003a1e:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 8003a20:	0007      	movs	r7, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8003a22:	4699      	mov	r9, r3
 8003a24:	4c22      	ldr	r4, [pc, #136]	@ (8003ab0 <setCountdownTimer+0x5d4>)
 8003a26:	4642      	mov	r2, r8
 8003a28:	68a3      	ldr	r3, [r4, #8]
 8003a2a:	421a      	tst	r2, r3
 8003a2c:	d023      	beq.n	8003a76 <setCountdownTimer+0x59a>
  *spidr = TxData;
 8003a2e:	7325      	strb	r5, [r4, #12]
    start_time = HAL_GetTick();
 8003a30:	f003 fc7c 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 8003a34:	23fa      	movs	r3, #250	@ 0xfa
 8003a36:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8003a38:	0005      	movs	r5, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8003a3a:	2701      	movs	r7, #1
        if ((HAL_GetTick() - start_time) > 1000)
 8003a3c:	4698      	mov	r8, r3
 8003a3e:	4c1c      	ldr	r4, [pc, #112]	@ (8003ab0 <setCountdownTimer+0x5d4>)
 8003a40:	68a3      	ldr	r3, [r4, #8]
 8003a42:	421f      	tst	r7, r3
 8003a44:	d109      	bne.n	8003a5a <setCountdownTimer+0x57e>
 8003a46:	f003 fc71 	bl	800732c <HAL_GetTick>
 8003a4a:	1b40      	subs	r0, r0, r5
 8003a4c:	4540      	cmp	r0, r8
 8003a4e:	d9f7      	bls.n	8003a40 <setCountdownTimer+0x564>
            print_error(__func__, __LINE__);
 8003a50:	4818      	ldr	r0, [pc, #96]	@ (8003ab4 <setCountdownTimer+0x5d8>)
 8003a52:	4919      	ldr	r1, [pc, #100]	@ (8003ab8 <setCountdownTimer+0x5dc>)
 8003a54:	f001 fc54 	bl	8005300 <print_error>
 8003a58:	e7f2      	b.n	8003a40 <setCountdownTimer+0x564>
        RTC_H();
 8003a5a:	2280      	movs	r2, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 8003a5c:	7b23      	ldrb	r3, [r4, #12]
 8003a5e:	4b18      	ldr	r3, [pc, #96]	@ (8003ac0 <setCountdownTimer+0x5e4>)
 8003a60:	01d2      	lsls	r2, r2, #7
 8003a62:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a64:	f386 8810 	msr	PRIMASK, r6
}
 8003a68:	2001      	movs	r0, #1
 8003a6a:	bcf0      	pop	{r4, r5, r6, r7}
 8003a6c:	46bb      	mov	fp, r7
 8003a6e:	46b2      	mov	sl, r6
 8003a70:	46a9      	mov	r9, r5
 8003a72:	46a0      	mov	r8, r4
 8003a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((HAL_GetTick() - start_time) > 1000)
 8003a76:	f003 fc59 	bl	800732c <HAL_GetTick>
 8003a7a:	1bc0      	subs	r0, r0, r7
 8003a7c:	4548      	cmp	r0, r9
 8003a7e:	d9d2      	bls.n	8003a26 <setCountdownTimer+0x54a>
            print_error(__func__, __LINE__);
 8003a80:	480c      	ldr	r0, [pc, #48]	@ (8003ab4 <setCountdownTimer+0x5d8>)
 8003a82:	490e      	ldr	r1, [pc, #56]	@ (8003abc <setCountdownTimer+0x5e0>)
 8003a84:	f001 fc3c 	bl	8005300 <print_error>
 8003a88:	e7cd      	b.n	8003a26 <setCountdownTimer+0x54a>
        if ((HAL_GetTick() - start_time) > 1000)
 8003a8a:	f003 fc4f 	bl	800732c <HAL_GetTick>
 8003a8e:	1bc0      	subs	r0, r0, r7
 8003a90:	4548      	cmp	r0, r9
 8003a92:	d996      	bls.n	80039c2 <setCountdownTimer+0x4e6>
            print_error(__func__, __LINE__);
 8003a94:	4807      	ldr	r0, [pc, #28]	@ (8003ab4 <setCountdownTimer+0x5d8>)
 8003a96:	4909      	ldr	r1, [pc, #36]	@ (8003abc <setCountdownTimer+0x5e0>)
 8003a98:	f001 fc32 	bl	8005300 <print_error>
 8003a9c:	e791      	b.n	80039c2 <setCountdownTimer+0x4e6>
        SPI1->CR1 |= SPI_CR1_SPE;
 8003a9e:	682a      	ldr	r2, [r5, #0]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	602b      	str	r3, [r5, #0]
 8003aa4:	e705      	b.n	80038b2 <setCountdownTimer+0x3d6>
 8003aa6:	6822      	ldr	r2, [r4, #0]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	6023      	str	r3, [r4, #0]
 8003aac:	e77c      	b.n	80039a8 <setCountdownTimer+0x4cc>
 8003aae:	46c0      	nop			@ (mov r8, r8)
 8003ab0:	40013000 	.word	0x40013000
 8003ab4:	0800ea80 	.word	0x0800ea80
 8003ab8:	00000285 	.word	0x00000285
 8003abc:	0000027a 	.word	0x0000027a
 8003ac0:	50000400 	.word	0x50000400

08003ac4 <deepPowerDown>:
{
 8003ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ac6:	46de      	mov	lr, fp
 8003ac8:	4645      	mov	r5, r8
 8003aca:	4657      	mov	r7, sl
 8003acc:	464e      	mov	r6, r9
 8003ace:	b5e0      	push	{r5, r6, r7, lr}
 8003ad0:	0005      	movs	r5, r0
 8003ad2:	b083      	sub	sp, #12
    printf("deepPowerDown %d\n", seconds);
 8003ad4:	0029      	movs	r1, r5
 8003ad6:	48b5      	ldr	r0, [pc, #724]	@ (8003dac <deepPowerDown+0x2e8>)
 8003ad8:	f003 f98a 	bl	8006df0 <printf_>
    bResult = setWDT(0);
 8003adc:	2000      	movs	r0, #0
 8003ade:	f7ff fbbd 	bl	800325c <setWDT>
    if (!bResult)
 8003ae2:	2800      	cmp	r0, #0
 8003ae4:	d100      	bne.n	8003ae8 <deepPowerDown+0x24>
 8003ae6:	e128      	b.n	8003d3a <deepPowerDown+0x276>
    bResult = setCountdownTimer(seconds, false);
 8003ae8:	2100      	movs	r1, #0
 8003aea:	0028      	movs	r0, r5
 8003aec:	f7ff fcf6 	bl	80034dc <setCountdownTimer>
 8003af0:	1e04      	subs	r4, r0, #0
    if (!bResult)
 8003af2:	d02c      	beq.n	8003b4e <deepPowerDown+0x8a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003af4:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003af8:	b672      	cpsid	i
    RTC_L();
 8003afa:	2280      	movs	r2, #128	@ 0x80
 8003afc:	4bac      	ldr	r3, [pc, #688]	@ (8003db0 <deepPowerDown+0x2ec>)
 8003afe:	05d2      	lsls	r2, r2, #23
 8003b00:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 8003b02:	f003 fc13 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8003b06:	2302      	movs	r3, #2
 8003b08:	4699      	mov	r9, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8003b0a:	23fa      	movs	r3, #250	@ 0xfa
 8003b0c:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 8003b0e:	0007      	movs	r7, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8003b10:	469a      	mov	sl, r3
 8003b12:	4ea8      	ldr	r6, [pc, #672]	@ (8003db4 <deepPowerDown+0x2f0>)
 8003b14:	464a      	mov	r2, r9
 8003b16:	68b3      	ldr	r3, [r6, #8]
 8003b18:	421a      	tst	r2, r3
 8003b1a:	d04d      	beq.n	8003bb8 <deepPowerDown+0xf4>
  *spidr = TxData;
 8003b1c:	2310      	movs	r3, #16
 8003b1e:	7333      	strb	r3, [r6, #12]
    start_time = HAL_GetTick();
 8003b20:	f003 fc04 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8003b24:	2301      	movs	r3, #1
 8003b26:	4699      	mov	r9, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8003b28:	23fa      	movs	r3, #250	@ 0xfa
 8003b2a:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8003b2c:	0007      	movs	r7, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8003b2e:	469a      	mov	sl, r3
 8003b30:	4ea0      	ldr	r6, [pc, #640]	@ (8003db4 <deepPowerDown+0x2f0>)
 8003b32:	464a      	mov	r2, r9
 8003b34:	68b3      	ldr	r3, [r6, #8]
 8003b36:	421a      	tst	r2, r3
 8003b38:	d117      	bne.n	8003b6a <deepPowerDown+0xa6>
 8003b3a:	f003 fbf7 	bl	800732c <HAL_GetTick>
 8003b3e:	1bc0      	subs	r0, r0, r7
 8003b40:	4550      	cmp	r0, sl
 8003b42:	d9f6      	bls.n	8003b32 <deepPowerDown+0x6e>
            print_error(__func__, __LINE__);
 8003b44:	489c      	ldr	r0, [pc, #624]	@ (8003db8 <deepPowerDown+0x2f4>)
 8003b46:	499d      	ldr	r1, [pc, #628]	@ (8003dbc <deepPowerDown+0x2f8>)
 8003b48:	f001 fbda 	bl	8005300 <print_error>
 8003b4c:	e7f1      	b.n	8003b32 <deepPowerDown+0x6e>
        printf(errorMsg, __LINE__);
 8003b4e:	21a6      	movs	r1, #166	@ 0xa6
 8003b50:	489b      	ldr	r0, [pc, #620]	@ (8003dc0 <deepPowerDown+0x2fc>)
 8003b52:	0049      	lsls	r1, r1, #1
 8003b54:	f003 f94c 	bl	8006df0 <printf_>
        return false;
 8003b58:	2400      	movs	r4, #0
}
 8003b5a:	0020      	movs	r0, r4
 8003b5c:	b003      	add	sp, #12
 8003b5e:	bcf0      	pop	{r4, r5, r6, r7}
 8003b60:	46bb      	mov	fp, r7
 8003b62:	46b2      	mov	sl, r6
 8003b64:	46a9      	mov	r9, r5
 8003b66:	46a0      	mov	r8, r4
 8003b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (*((__IO uint8_t *)&SPIx->DR));
 8003b6a:	7b33      	ldrb	r3, [r6, #12]
    uint32_t start_time = HAL_GetTick();
 8003b6c:	f003 fbde 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8003b70:	2302      	movs	r3, #2
 8003b72:	4699      	mov	r9, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8003b74:	23fa      	movs	r3, #250	@ 0xfa
 8003b76:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 8003b78:	0007      	movs	r7, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8003b7a:	469a      	mov	sl, r3
 8003b7c:	4e8d      	ldr	r6, [pc, #564]	@ (8003db4 <deepPowerDown+0x2f0>)
 8003b7e:	464a      	mov	r2, r9
 8003b80:	68b3      	ldr	r3, [r6, #8]
 8003b82:	421a      	tst	r2, r3
 8003b84:	d063      	beq.n	8003c4e <deepPowerDown+0x18a>
  *spidr = TxData;
 8003b86:	2300      	movs	r3, #0
 8003b88:	7333      	strb	r3, [r6, #12]
    start_time = HAL_GetTick();
 8003b8a:	f003 fbcf 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8003b8e:	2301      	movs	r3, #1
 8003b90:	4699      	mov	r9, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8003b92:	23fa      	movs	r3, #250	@ 0xfa
 8003b94:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8003b96:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8003b98:	469a      	mov	sl, r3
 8003b9a:	4f86      	ldr	r7, [pc, #536]	@ (8003db4 <deepPowerDown+0x2f0>)
 8003b9c:	464a      	mov	r2, r9
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	421a      	tst	r2, r3
 8003ba2:	d113      	bne.n	8003bcc <deepPowerDown+0x108>
 8003ba4:	f003 fbc2 	bl	800732c <HAL_GetTick>
 8003ba8:	1b80      	subs	r0, r0, r6
 8003baa:	4550      	cmp	r0, sl
 8003bac:	d9f6      	bls.n	8003b9c <deepPowerDown+0xd8>
            print_error(__func__, __LINE__);
 8003bae:	4882      	ldr	r0, [pc, #520]	@ (8003db8 <deepPowerDown+0x2f4>)
 8003bb0:	4982      	ldr	r1, [pc, #520]	@ (8003dbc <deepPowerDown+0x2f8>)
 8003bb2:	f001 fba5 	bl	8005300 <print_error>
 8003bb6:	e7f1      	b.n	8003b9c <deepPowerDown+0xd8>
        if ((HAL_GetTick() - start_time) > 1000)
 8003bb8:	f003 fbb8 	bl	800732c <HAL_GetTick>
 8003bbc:	1bc0      	subs	r0, r0, r7
 8003bbe:	4550      	cmp	r0, sl
 8003bc0:	d9a8      	bls.n	8003b14 <deepPowerDown+0x50>
            print_error(__func__, __LINE__);
 8003bc2:	487d      	ldr	r0, [pc, #500]	@ (8003db8 <deepPowerDown+0x2f4>)
 8003bc4:	497f      	ldr	r1, [pc, #508]	@ (8003dc4 <deepPowerDown+0x300>)
 8003bc6:	f001 fb9b 	bl	8005300 <print_error>
 8003bca:	e7a3      	b.n	8003b14 <deepPowerDown+0x50>
    RTC_H();
 8003bcc:	2180      	movs	r1, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 8003bce:	7b3b      	ldrb	r3, [r7, #12]
 8003bd0:	4a77      	ldr	r2, [pc, #476]	@ (8003db0 <deepPowerDown+0x2ec>)
 8003bd2:	01c9      	lsls	r1, r1, #7
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	6191      	str	r1, [r2, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd8:	f388 8810 	msr	PRIMASK, r8
    uint8_t newValue = (value & andValue) | orValue;
 8003bdc:	2677      	movs	r6, #119	@ 0x77
 8003bde:	401e      	ands	r6, r3
 8003be0:	2302      	movs	r3, #2
 8003be2:	431e      	orrs	r6, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003be4:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003be8:	b672      	cpsid	i
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	333e      	adds	r3, #62	@ 0x3e
 8003bee:	4213      	tst	r3, r2
 8003bf0:	d102      	bne.n	8003bf8 <deepPowerDown+0x134>
        SPI1->CR1 |= SPI_CR1_SPE;
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	603b      	str	r3, [r7, #0]
        RTC_L();
 8003bf8:	2280      	movs	r2, #128	@ 0x80
 8003bfa:	4b6d      	ldr	r3, [pc, #436]	@ (8003db0 <deepPowerDown+0x2ec>)
 8003bfc:	05d2      	lsls	r2, r2, #23
 8003bfe:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 8003c00:	f003 fb94 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8003c04:	2302      	movs	r3, #2
 8003c06:	469a      	mov	sl, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8003c08:	23fa      	movs	r3, #250	@ 0xfa
 8003c0a:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 8003c0c:	4680      	mov	r8, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8003c0e:	469b      	mov	fp, r3
 8003c10:	4f68      	ldr	r7, [pc, #416]	@ (8003db4 <deepPowerDown+0x2f0>)
 8003c12:	4652      	mov	r2, sl
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	421a      	tst	r2, r3
 8003c18:	d049      	beq.n	8003cae <deepPowerDown+0x1ea>
  *spidr = TxData;
 8003c1a:	2390      	movs	r3, #144	@ 0x90
 8003c1c:	733b      	strb	r3, [r7, #12]
    start_time = HAL_GetTick();
 8003c1e:	f003 fb85 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8003c22:	2301      	movs	r3, #1
 8003c24:	469a      	mov	sl, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8003c26:	23fa      	movs	r3, #250	@ 0xfa
 8003c28:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8003c2a:	4680      	mov	r8, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8003c2c:	469b      	mov	fp, r3
 8003c2e:	4f61      	ldr	r7, [pc, #388]	@ (8003db4 <deepPowerDown+0x2f0>)
 8003c30:	4652      	mov	r2, sl
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	421a      	tst	r2, r3
 8003c36:	d114      	bne.n	8003c62 <deepPowerDown+0x19e>
 8003c38:	f003 fb78 	bl	800732c <HAL_GetTick>
 8003c3c:	4643      	mov	r3, r8
 8003c3e:	1ac0      	subs	r0, r0, r3
 8003c40:	4558      	cmp	r0, fp
 8003c42:	d9f5      	bls.n	8003c30 <deepPowerDown+0x16c>
            print_error(__func__, __LINE__);
 8003c44:	485c      	ldr	r0, [pc, #368]	@ (8003db8 <deepPowerDown+0x2f4>)
 8003c46:	495d      	ldr	r1, [pc, #372]	@ (8003dbc <deepPowerDown+0x2f8>)
 8003c48:	f001 fb5a 	bl	8005300 <print_error>
 8003c4c:	e7f0      	b.n	8003c30 <deepPowerDown+0x16c>
        if ((HAL_GetTick() - start_time) > 1000)
 8003c4e:	f003 fb6d 	bl	800732c <HAL_GetTick>
 8003c52:	1bc0      	subs	r0, r0, r7
 8003c54:	4550      	cmp	r0, sl
 8003c56:	d992      	bls.n	8003b7e <deepPowerDown+0xba>
            print_error(__func__, __LINE__);
 8003c58:	4857      	ldr	r0, [pc, #348]	@ (8003db8 <deepPowerDown+0x2f4>)
 8003c5a:	495a      	ldr	r1, [pc, #360]	@ (8003dc4 <deepPowerDown+0x300>)
 8003c5c:	f001 fb50 	bl	8005300 <print_error>
 8003c60:	e78d      	b.n	8003b7e <deepPowerDown+0xba>
  return (*((__IO uint8_t *)&SPIx->DR));
 8003c62:	7b3b      	ldrb	r3, [r7, #12]
    uint32_t start_time = HAL_GetTick();
 8003c64:	f003 fb62 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8003c68:	2302      	movs	r3, #2
 8003c6a:	469a      	mov	sl, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8003c6c:	23fa      	movs	r3, #250	@ 0xfa
 8003c6e:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 8003c70:	4680      	mov	r8, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8003c72:	469b      	mov	fp, r3
 8003c74:	4f4f      	ldr	r7, [pc, #316]	@ (8003db4 <deepPowerDown+0x2f0>)
 8003c76:	4652      	mov	r2, sl
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	421a      	tst	r2, r3
 8003c7c:	d052      	beq.n	8003d24 <deepPowerDown+0x260>
  *spidr = TxData;
 8003c7e:	733e      	strb	r6, [r7, #12]
    start_time = HAL_GetTick();
 8003c80:	f003 fb54 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8003c84:	2301      	movs	r3, #1
 8003c86:	4698      	mov	r8, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8003c88:	23fa      	movs	r3, #250	@ 0xfa
 8003c8a:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8003c8c:	0007      	movs	r7, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8003c8e:	469a      	mov	sl, r3
 8003c90:	4e48      	ldr	r6, [pc, #288]	@ (8003db4 <deepPowerDown+0x2f0>)
 8003c92:	4642      	mov	r2, r8
 8003c94:	68b3      	ldr	r3, [r6, #8]
 8003c96:	421a      	tst	r2, r3
 8003c98:	d114      	bne.n	8003cc4 <deepPowerDown+0x200>
 8003c9a:	f003 fb47 	bl	800732c <HAL_GetTick>
 8003c9e:	1bc0      	subs	r0, r0, r7
 8003ca0:	4550      	cmp	r0, sl
 8003ca2:	d9f6      	bls.n	8003c92 <deepPowerDown+0x1ce>
            print_error(__func__, __LINE__);
 8003ca4:	4844      	ldr	r0, [pc, #272]	@ (8003db8 <deepPowerDown+0x2f4>)
 8003ca6:	4945      	ldr	r1, [pc, #276]	@ (8003dbc <deepPowerDown+0x2f8>)
 8003ca8:	f001 fb2a 	bl	8005300 <print_error>
 8003cac:	e7f1      	b.n	8003c92 <deepPowerDown+0x1ce>
        if ((HAL_GetTick() - start_time) > 1000)
 8003cae:	f003 fb3d 	bl	800732c <HAL_GetTick>
 8003cb2:	4643      	mov	r3, r8
 8003cb4:	1ac0      	subs	r0, r0, r3
 8003cb6:	4558      	cmp	r0, fp
 8003cb8:	d9ab      	bls.n	8003c12 <deepPowerDown+0x14e>
            print_error(__func__, __LINE__);
 8003cba:	483f      	ldr	r0, [pc, #252]	@ (8003db8 <deepPowerDown+0x2f4>)
 8003cbc:	4941      	ldr	r1, [pc, #260]	@ (8003dc4 <deepPowerDown+0x300>)
 8003cbe:	f001 fb1f 	bl	8005300 <print_error>
 8003cc2:	e7a6      	b.n	8003c12 <deepPowerDown+0x14e>
        RTC_H();
 8003cc4:	2280      	movs	r2, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 8003cc6:	7b33      	ldrb	r3, [r6, #12]
 8003cc8:	4b39      	ldr	r3, [pc, #228]	@ (8003db0 <deepPowerDown+0x2ec>)
 8003cca:	01d2      	lsls	r2, r2, #7
 8003ccc:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cce:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003cd2:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003cd6:	b672      	cpsid	i
    RTC_L();
 8003cd8:	2280      	movs	r2, #128	@ 0x80
 8003cda:	05d2      	lsls	r2, r2, #23
 8003cdc:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 8003cde:	f003 fb25 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	0006      	movs	r6, r0
 8003ce6:	4699      	mov	r9, r3
 8003ce8:	4f32      	ldr	r7, [pc, #200]	@ (8003db4 <deepPowerDown+0x2f0>)
 8003cea:	464a      	mov	r2, r9
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	421a      	tst	r2, r3
 8003cf0:	d050      	beq.n	8003d94 <deepPowerDown+0x2d0>
  *spidr = TxData;
 8003cf2:	231c      	movs	r3, #28
 8003cf4:	733b      	strb	r3, [r7, #12]
    start_time = HAL_GetTick();
 8003cf6:	f003 fb19 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	4699      	mov	r9, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8003cfe:	23fa      	movs	r3, #250	@ 0xfa
 8003d00:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8003d02:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8003d04:	469a      	mov	sl, r3
 8003d06:	4f2b      	ldr	r7, [pc, #172]	@ (8003db4 <deepPowerDown+0x2f0>)
 8003d08:	464a      	mov	r2, r9
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	421a      	tst	r2, r3
 8003d0e:	d11a      	bne.n	8003d46 <deepPowerDown+0x282>
 8003d10:	f003 fb0c 	bl	800732c <HAL_GetTick>
 8003d14:	1b80      	subs	r0, r0, r6
 8003d16:	4550      	cmp	r0, sl
 8003d18:	d9f6      	bls.n	8003d08 <deepPowerDown+0x244>
            print_error(__func__, __LINE__);
 8003d1a:	4827      	ldr	r0, [pc, #156]	@ (8003db8 <deepPowerDown+0x2f4>)
 8003d1c:	4927      	ldr	r1, [pc, #156]	@ (8003dbc <deepPowerDown+0x2f8>)
 8003d1e:	f001 faef 	bl	8005300 <print_error>
 8003d22:	e7f1      	b.n	8003d08 <deepPowerDown+0x244>
        if ((HAL_GetTick() - start_time) > 1000)
 8003d24:	f003 fb02 	bl	800732c <HAL_GetTick>
 8003d28:	4643      	mov	r3, r8
 8003d2a:	1ac0      	subs	r0, r0, r3
 8003d2c:	4558      	cmp	r0, fp
 8003d2e:	d9a2      	bls.n	8003c76 <deepPowerDown+0x1b2>
            print_error(__func__, __LINE__);
 8003d30:	4821      	ldr	r0, [pc, #132]	@ (8003db8 <deepPowerDown+0x2f4>)
 8003d32:	4924      	ldr	r1, [pc, #144]	@ (8003dc4 <deepPowerDown+0x300>)
 8003d34:	f001 fae4 	bl	8005300 <print_error>
 8003d38:	e79d      	b.n	8003c76 <deepPowerDown+0x1b2>
        printf(errorMsg, __LINE__);
 8003d3a:	2146      	movs	r1, #70	@ 0x46
 8003d3c:	4820      	ldr	r0, [pc, #128]	@ (8003dc0 <deepPowerDown+0x2fc>)
 8003d3e:	31ff      	adds	r1, #255	@ 0xff
 8003d40:	f003 f856 	bl	8006df0 <printf_>
        return false;
 8003d44:	e708      	b.n	8003b58 <deepPowerDown+0x94>
  return (*((__IO uint8_t *)&SPIx->DR));
 8003d46:	7b3b      	ldrb	r3, [r7, #12]
    uint32_t start_time = HAL_GetTick();
 8003d48:	f003 faf0 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	4699      	mov	r9, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8003d50:	23fa      	movs	r3, #250	@ 0xfa
 8003d52:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 8003d54:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8003d56:	469a      	mov	sl, r3
 8003d58:	4f16      	ldr	r7, [pc, #88]	@ (8003db4 <deepPowerDown+0x2f0>)
 8003d5a:	464a      	mov	r2, r9
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	421a      	tst	r2, r3
 8003d60:	d073      	beq.n	8003e4a <deepPowerDown+0x386>
  *spidr = TxData;
 8003d62:	2300      	movs	r3, #0
 8003d64:	733b      	strb	r3, [r7, #12]
    start_time = HAL_GetTick();
 8003d66:	f003 fae1 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	4699      	mov	r9, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8003d6e:	23fa      	movs	r3, #250	@ 0xfa
 8003d70:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8003d72:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8003d74:	469a      	mov	sl, r3
 8003d76:	4f0f      	ldr	r7, [pc, #60]	@ (8003db4 <deepPowerDown+0x2f0>)
 8003d78:	464a      	mov	r2, r9
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	421a      	tst	r2, r3
 8003d7e:	d123      	bne.n	8003dc8 <deepPowerDown+0x304>
 8003d80:	f003 fad4 	bl	800732c <HAL_GetTick>
 8003d84:	1b80      	subs	r0, r0, r6
 8003d86:	4550      	cmp	r0, sl
 8003d88:	d9f6      	bls.n	8003d78 <deepPowerDown+0x2b4>
            print_error(__func__, __LINE__);
 8003d8a:	480b      	ldr	r0, [pc, #44]	@ (8003db8 <deepPowerDown+0x2f4>)
 8003d8c:	490b      	ldr	r1, [pc, #44]	@ (8003dbc <deepPowerDown+0x2f8>)
 8003d8e:	f001 fab7 	bl	8005300 <print_error>
 8003d92:	e7f1      	b.n	8003d78 <deepPowerDown+0x2b4>
        if ((HAL_GetTick() - start_time) > 1000)
 8003d94:	f003 faca 	bl	800732c <HAL_GetTick>
 8003d98:	23fa      	movs	r3, #250	@ 0xfa
 8003d9a:	1b80      	subs	r0, r0, r6
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4298      	cmp	r0, r3
 8003da0:	d9a3      	bls.n	8003cea <deepPowerDown+0x226>
            print_error(__func__, __LINE__);
 8003da2:	4805      	ldr	r0, [pc, #20]	@ (8003db8 <deepPowerDown+0x2f4>)
 8003da4:	4907      	ldr	r1, [pc, #28]	@ (8003dc4 <deepPowerDown+0x300>)
 8003da6:	f001 faab 	bl	8005300 <print_error>
 8003daa:	e79e      	b.n	8003cea <deepPowerDown+0x226>
 8003dac:	0800ea20 	.word	0x0800ea20
 8003db0:	50000400 	.word	0x50000400
 8003db4:	40013000 	.word	0x40013000
 8003db8:	0800ea80 	.word	0x0800ea80
 8003dbc:	00000285 	.word	0x00000285
 8003dc0:	0800ea34 	.word	0x0800ea34
 8003dc4:	0000027a 	.word	0x0000027a
    RTC_H();
 8003dc8:	2280      	movs	r2, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 8003dca:	7b3e      	ldrb	r6, [r7, #12]
 8003dcc:	4bba      	ldr	r3, [pc, #744]	@ (80040b8 <deepPowerDown+0x5f4>)
 8003dce:	01d2      	lsls	r2, r2, #7
 8003dd0:	b2f6      	uxtb	r6, r6
 8003dd2:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dd4:	f388 8810 	msr	PRIMASK, r8
    uint8_t newValue = (value & andValue) | orValue;
 8003dd8:	2304      	movs	r3, #4
 8003dda:	431e      	orrs	r6, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003ddc:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003de0:	b672      	cpsid	i
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	333c      	adds	r3, #60	@ 0x3c
 8003de6:	4213      	tst	r3, r2
 8003de8:	d100      	bne.n	8003dec <deepPowerDown+0x328>
 8003dea:	e0b3      	b.n	8003f54 <deepPowerDown+0x490>
        RTC_L();
 8003dec:	2280      	movs	r2, #128	@ 0x80
 8003dee:	4bb2      	ldr	r3, [pc, #712]	@ (80040b8 <deepPowerDown+0x5f4>)
 8003df0:	05d2      	lsls	r2, r2, #23
 8003df2:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 8003df4:	f003 fa9a 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8003df8:	4bb0      	ldr	r3, [pc, #704]	@ (80040bc <deepPowerDown+0x5f8>)
 8003dfa:	0007      	movs	r7, r0
 8003dfc:	4699      	mov	r9, r3
 8003dfe:	2302      	movs	r3, #2
 8003e00:	469a      	mov	sl, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8003e02:	23fa      	movs	r3, #250	@ 0xfa
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	469b      	mov	fp, r3
 8003e08:	464b      	mov	r3, r9
 8003e0a:	4652      	mov	r2, sl
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	421a      	tst	r2, r3
 8003e10:	d050      	beq.n	8003eb4 <deepPowerDown+0x3f0>
  *spidr = TxData;
 8003e12:	239c      	movs	r3, #156	@ 0x9c
 8003e14:	464a      	mov	r2, r9
 8003e16:	7313      	strb	r3, [r2, #12]
    start_time = HAL_GetTick();
 8003e18:	f003 fa88 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8003e1c:	4ba7      	ldr	r3, [pc, #668]	@ (80040bc <deepPowerDown+0x5f8>)
 8003e1e:	0007      	movs	r7, r0
 8003e20:	4699      	mov	r9, r3
 8003e22:	2301      	movs	r3, #1
 8003e24:	469a      	mov	sl, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8003e26:	23fa      	movs	r3, #250	@ 0xfa
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	469b      	mov	fp, r3
 8003e2c:	464b      	mov	r3, r9
 8003e2e:	4652      	mov	r2, sl
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	421a      	tst	r2, r3
 8003e34:	d114      	bne.n	8003e60 <deepPowerDown+0x39c>
 8003e36:	f003 fa79 	bl	800732c <HAL_GetTick>
 8003e3a:	1bc0      	subs	r0, r0, r7
 8003e3c:	4558      	cmp	r0, fp
 8003e3e:	d9f5      	bls.n	8003e2c <deepPowerDown+0x368>
            print_error(__func__, __LINE__);
 8003e40:	489f      	ldr	r0, [pc, #636]	@ (80040c0 <deepPowerDown+0x5fc>)
 8003e42:	49a0      	ldr	r1, [pc, #640]	@ (80040c4 <deepPowerDown+0x600>)
 8003e44:	f001 fa5c 	bl	8005300 <print_error>
 8003e48:	e7f0      	b.n	8003e2c <deepPowerDown+0x368>
        if ((HAL_GetTick() - start_time) > 1000)
 8003e4a:	f003 fa6f 	bl	800732c <HAL_GetTick>
 8003e4e:	1b80      	subs	r0, r0, r6
 8003e50:	4550      	cmp	r0, sl
 8003e52:	d800      	bhi.n	8003e56 <deepPowerDown+0x392>
 8003e54:	e781      	b.n	8003d5a <deepPowerDown+0x296>
            print_error(__func__, __LINE__);
 8003e56:	489a      	ldr	r0, [pc, #616]	@ (80040c0 <deepPowerDown+0x5fc>)
 8003e58:	499b      	ldr	r1, [pc, #620]	@ (80040c8 <deepPowerDown+0x604>)
 8003e5a:	f001 fa51 	bl	8005300 <print_error>
 8003e5e:	e77c      	b.n	8003d5a <deepPowerDown+0x296>
  return (*((__IO uint8_t *)&SPIx->DR));
 8003e60:	464b      	mov	r3, r9
 8003e62:	7b1b      	ldrb	r3, [r3, #12]
    uint32_t start_time = HAL_GetTick();
 8003e64:	f003 fa62 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8003e68:	4b94      	ldr	r3, [pc, #592]	@ (80040bc <deepPowerDown+0x5f8>)
 8003e6a:	0007      	movs	r7, r0
 8003e6c:	4699      	mov	r9, r3
 8003e6e:	2302      	movs	r3, #2
 8003e70:	469a      	mov	sl, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8003e72:	23fa      	movs	r3, #250	@ 0xfa
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	469b      	mov	fp, r3
 8003e78:	464b      	mov	r3, r9
 8003e7a:	4652      	mov	r2, sl
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	421a      	tst	r2, r3
 8003e80:	d052      	beq.n	8003f28 <deepPowerDown+0x464>
  *spidr = TxData;
 8003e82:	464b      	mov	r3, r9
 8003e84:	731e      	strb	r6, [r3, #12]
    start_time = HAL_GetTick();
 8003e86:	f003 fa51 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	4699      	mov	r9, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8003e8e:	23fa      	movs	r3, #250	@ 0xfa
 8003e90:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8003e92:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8003e94:	469a      	mov	sl, r3
 8003e96:	4f89      	ldr	r7, [pc, #548]	@ (80040bc <deepPowerDown+0x5f8>)
 8003e98:	464a      	mov	r2, r9
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	421a      	tst	r2, r3
 8003e9e:	d113      	bne.n	8003ec8 <deepPowerDown+0x404>
 8003ea0:	f003 fa44 	bl	800732c <HAL_GetTick>
 8003ea4:	1b80      	subs	r0, r0, r6
 8003ea6:	4550      	cmp	r0, sl
 8003ea8:	d9f6      	bls.n	8003e98 <deepPowerDown+0x3d4>
            print_error(__func__, __LINE__);
 8003eaa:	4885      	ldr	r0, [pc, #532]	@ (80040c0 <deepPowerDown+0x5fc>)
 8003eac:	4985      	ldr	r1, [pc, #532]	@ (80040c4 <deepPowerDown+0x600>)
 8003eae:	f001 fa27 	bl	8005300 <print_error>
 8003eb2:	e7f1      	b.n	8003e98 <deepPowerDown+0x3d4>
        if ((HAL_GetTick() - start_time) > 1000)
 8003eb4:	f003 fa3a 	bl	800732c <HAL_GetTick>
 8003eb8:	1bc0      	subs	r0, r0, r7
 8003eba:	4558      	cmp	r0, fp
 8003ebc:	d9a4      	bls.n	8003e08 <deepPowerDown+0x344>
            print_error(__func__, __LINE__);
 8003ebe:	4880      	ldr	r0, [pc, #512]	@ (80040c0 <deepPowerDown+0x5fc>)
 8003ec0:	4981      	ldr	r1, [pc, #516]	@ (80040c8 <deepPowerDown+0x604>)
 8003ec2:	f001 fa1d 	bl	8005300 <print_error>
 8003ec6:	e79f      	b.n	8003e08 <deepPowerDown+0x344>
        RTC_H();
 8003ec8:	2280      	movs	r2, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 8003eca:	7b3b      	ldrb	r3, [r7, #12]
 8003ecc:	4b7a      	ldr	r3, [pc, #488]	@ (80040b8 <deepPowerDown+0x5f4>)
 8003ece:	01d2      	lsls	r2, r2, #7
 8003ed0:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed2:	f388 8810 	msr	PRIMASK, r8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003ed6:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003eda:	b672      	cpsid	i
    RTC_L();
 8003edc:	2280      	movs	r2, #128	@ 0x80
 8003ede:	05d2      	lsls	r2, r2, #23
 8003ee0:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 8003ee2:	f003 fa23 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	0006      	movs	r6, r0
 8003eea:	4699      	mov	r9, r3
 8003eec:	4f73      	ldr	r7, [pc, #460]	@ (80040bc <deepPowerDown+0x5f8>)
 8003eee:	464a      	mov	r2, r9
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	421a      	tst	r2, r3
 8003ef4:	d022      	beq.n	8003f3c <deepPowerDown+0x478>
  *spidr = TxData;
 8003ef6:	2311      	movs	r3, #17
 8003ef8:	733b      	strb	r3, [r7, #12]
    start_time = HAL_GetTick();
 8003efa:	f003 fa17 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8003efe:	2301      	movs	r3, #1
 8003f00:	4699      	mov	r9, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8003f02:	23fa      	movs	r3, #250	@ 0xfa
 8003f04:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8003f06:	0007      	movs	r7, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8003f08:	469a      	mov	sl, r3
 8003f0a:	4e6c      	ldr	r6, [pc, #432]	@ (80040bc <deepPowerDown+0x5f8>)
 8003f0c:	464a      	mov	r2, r9
 8003f0e:	68b3      	ldr	r3, [r6, #8]
 8003f10:	421a      	tst	r2, r3
 8003f12:	d123      	bne.n	8003f5c <deepPowerDown+0x498>
 8003f14:	f003 fa0a 	bl	800732c <HAL_GetTick>
 8003f18:	1bc0      	subs	r0, r0, r7
 8003f1a:	4550      	cmp	r0, sl
 8003f1c:	d9f6      	bls.n	8003f0c <deepPowerDown+0x448>
            print_error(__func__, __LINE__);
 8003f1e:	4868      	ldr	r0, [pc, #416]	@ (80040c0 <deepPowerDown+0x5fc>)
 8003f20:	4968      	ldr	r1, [pc, #416]	@ (80040c4 <deepPowerDown+0x600>)
 8003f22:	f001 f9ed 	bl	8005300 <print_error>
 8003f26:	e7f1      	b.n	8003f0c <deepPowerDown+0x448>
        if ((HAL_GetTick() - start_time) > 1000)
 8003f28:	f003 fa00 	bl	800732c <HAL_GetTick>
 8003f2c:	1bc0      	subs	r0, r0, r7
 8003f2e:	4558      	cmp	r0, fp
 8003f30:	d9a2      	bls.n	8003e78 <deepPowerDown+0x3b4>
            print_error(__func__, __LINE__);
 8003f32:	4863      	ldr	r0, [pc, #396]	@ (80040c0 <deepPowerDown+0x5fc>)
 8003f34:	4964      	ldr	r1, [pc, #400]	@ (80040c8 <deepPowerDown+0x604>)
 8003f36:	f001 f9e3 	bl	8005300 <print_error>
 8003f3a:	e79d      	b.n	8003e78 <deepPowerDown+0x3b4>
        if ((HAL_GetTick() - start_time) > 1000)
 8003f3c:	f003 f9f6 	bl	800732c <HAL_GetTick>
 8003f40:	23fa      	movs	r3, #250	@ 0xfa
 8003f42:	1b80      	subs	r0, r0, r6
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4298      	cmp	r0, r3
 8003f48:	d9d1      	bls.n	8003eee <deepPowerDown+0x42a>
            print_error(__func__, __LINE__);
 8003f4a:	485d      	ldr	r0, [pc, #372]	@ (80040c0 <deepPowerDown+0x5fc>)
 8003f4c:	495e      	ldr	r1, [pc, #376]	@ (80040c8 <deepPowerDown+0x604>)
 8003f4e:	f001 f9d7 	bl	8005300 <print_error>
 8003f52:	e7cc      	b.n	8003eee <deepPowerDown+0x42a>
        SPI1->CR1 |= SPI_CR1_SPE;
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	603b      	str	r3, [r7, #0]
 8003f5a:	e747      	b.n	8003dec <deepPowerDown+0x328>
  return (*((__IO uint8_t *)&SPIx->DR));
 8003f5c:	7b33      	ldrb	r3, [r6, #12]
    uint32_t start_time = HAL_GetTick();
 8003f5e:	f003 f9e5 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8003f62:	2302      	movs	r3, #2
 8003f64:	4699      	mov	r9, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8003f66:	23fa      	movs	r3, #250	@ 0xfa
 8003f68:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 8003f6a:	0007      	movs	r7, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8003f6c:	469a      	mov	sl, r3
 8003f6e:	4e53      	ldr	r6, [pc, #332]	@ (80040bc <deepPowerDown+0x5f8>)
 8003f70:	464a      	mov	r2, r9
 8003f72:	68b3      	ldr	r3, [r6, #8]
 8003f74:	421a      	tst	r2, r3
 8003f76:	d018      	beq.n	8003faa <deepPowerDown+0x4e6>
  *spidr = TxData;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	7333      	strb	r3, [r6, #12]
    start_time = HAL_GetTick();
 8003f7c:	f003 f9d6 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8003f80:	2301      	movs	r3, #1
 8003f82:	4699      	mov	r9, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8003f84:	23fa      	movs	r3, #250	@ 0xfa
 8003f86:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8003f88:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8003f8a:	469a      	mov	sl, r3
 8003f8c:	4f4b      	ldr	r7, [pc, #300]	@ (80040bc <deepPowerDown+0x5f8>)
 8003f8e:	464a      	mov	r2, r9
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	421a      	tst	r2, r3
 8003f94:	d113      	bne.n	8003fbe <deepPowerDown+0x4fa>
 8003f96:	f003 f9c9 	bl	800732c <HAL_GetTick>
 8003f9a:	1b80      	subs	r0, r0, r6
 8003f9c:	4550      	cmp	r0, sl
 8003f9e:	d9f6      	bls.n	8003f8e <deepPowerDown+0x4ca>
            print_error(__func__, __LINE__);
 8003fa0:	4847      	ldr	r0, [pc, #284]	@ (80040c0 <deepPowerDown+0x5fc>)
 8003fa2:	4948      	ldr	r1, [pc, #288]	@ (80040c4 <deepPowerDown+0x600>)
 8003fa4:	f001 f9ac 	bl	8005300 <print_error>
 8003fa8:	e7f1      	b.n	8003f8e <deepPowerDown+0x4ca>
        if ((HAL_GetTick() - start_time) > 1000)
 8003faa:	f003 f9bf 	bl	800732c <HAL_GetTick>
 8003fae:	1bc0      	subs	r0, r0, r7
 8003fb0:	4550      	cmp	r0, sl
 8003fb2:	d9dd      	bls.n	8003f70 <deepPowerDown+0x4ac>
            print_error(__func__, __LINE__);
 8003fb4:	4842      	ldr	r0, [pc, #264]	@ (80040c0 <deepPowerDown+0x5fc>)
 8003fb6:	4944      	ldr	r1, [pc, #272]	@ (80040c8 <deepPowerDown+0x604>)
 8003fb8:	f001 f9a2 	bl	8005300 <print_error>
 8003fbc:	e7d8      	b.n	8003f70 <deepPowerDown+0x4ac>
    RTC_H();
 8003fbe:	2280      	movs	r2, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 8003fc0:	7b3e      	ldrb	r6, [r7, #12]
 8003fc2:	4b3d      	ldr	r3, [pc, #244]	@ (80040b8 <deepPowerDown+0x5f4>)
 8003fc4:	01d2      	lsls	r2, r2, #7
 8003fc6:	b2f6      	uxtb	r6, r6
 8003fc8:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fca:	f388 8810 	msr	PRIMASK, r8
    uint8_t newValue = (value & andValue) | orValue;
 8003fce:	231c      	movs	r3, #28
 8003fd0:	439e      	bics	r6, r3
 8003fd2:	3b04      	subs	r3, #4
 8003fd4:	431e      	orrs	r6, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003fd6:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003fda:	b672      	cpsid	i
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	3328      	adds	r3, #40	@ 0x28
 8003fe0:	4213      	tst	r3, r2
 8003fe2:	d102      	bne.n	8003fea <deepPowerDown+0x526>
        SPI1->CR1 |= SPI_CR1_SPE;
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	603b      	str	r3, [r7, #0]
        RTC_L();
 8003fea:	2280      	movs	r2, #128	@ 0x80
 8003fec:	4b32      	ldr	r3, [pc, #200]	@ (80040b8 <deepPowerDown+0x5f4>)
 8003fee:	05d2      	lsls	r2, r2, #23
 8003ff0:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 8003ff2:	f003 f99b 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	469a      	mov	sl, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8003ffa:	23fa      	movs	r3, #250	@ 0xfa
 8003ffc:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 8003ffe:	4681      	mov	r9, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8004000:	469b      	mov	fp, r3
 8004002:	4f2e      	ldr	r7, [pc, #184]	@ (80040bc <deepPowerDown+0x5f8>)
 8004004:	4652      	mov	r2, sl
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	421a      	tst	r2, r3
 800400a:	d019      	beq.n	8004040 <deepPowerDown+0x57c>
  *spidr = TxData;
 800400c:	2391      	movs	r3, #145	@ 0x91
 800400e:	733b      	strb	r3, [r7, #12]
    start_time = HAL_GetTick();
 8004010:	f003 f98c 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8004014:	2301      	movs	r3, #1
 8004016:	469a      	mov	sl, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8004018:	23fa      	movs	r3, #250	@ 0xfa
 800401a:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 800401c:	4681      	mov	r9, r0
        if ((HAL_GetTick() - start_time) > 1000)
 800401e:	469b      	mov	fp, r3
 8004020:	4f26      	ldr	r7, [pc, #152]	@ (80040bc <deepPowerDown+0x5f8>)
 8004022:	4652      	mov	r2, sl
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	421a      	tst	r2, r3
 8004028:	d115      	bne.n	8004056 <deepPowerDown+0x592>
 800402a:	f003 f97f 	bl	800732c <HAL_GetTick>
 800402e:	464b      	mov	r3, r9
 8004030:	1ac0      	subs	r0, r0, r3
 8004032:	4558      	cmp	r0, fp
 8004034:	d9f5      	bls.n	8004022 <deepPowerDown+0x55e>
            print_error(__func__, __LINE__);
 8004036:	4822      	ldr	r0, [pc, #136]	@ (80040c0 <deepPowerDown+0x5fc>)
 8004038:	4922      	ldr	r1, [pc, #136]	@ (80040c4 <deepPowerDown+0x600>)
 800403a:	f001 f961 	bl	8005300 <print_error>
 800403e:	e7f0      	b.n	8004022 <deepPowerDown+0x55e>
        if ((HAL_GetTick() - start_time) > 1000)
 8004040:	f003 f974 	bl	800732c <HAL_GetTick>
 8004044:	464b      	mov	r3, r9
 8004046:	1ac0      	subs	r0, r0, r3
 8004048:	4558      	cmp	r0, fp
 800404a:	d9db      	bls.n	8004004 <deepPowerDown+0x540>
            print_error(__func__, __LINE__);
 800404c:	481c      	ldr	r0, [pc, #112]	@ (80040c0 <deepPowerDown+0x5fc>)
 800404e:	491e      	ldr	r1, [pc, #120]	@ (80040c8 <deepPowerDown+0x604>)
 8004050:	f001 f956 	bl	8005300 <print_error>
 8004054:	e7d6      	b.n	8004004 <deepPowerDown+0x540>
  return (*((__IO uint8_t *)&SPIx->DR));
 8004056:	7b3b      	ldrb	r3, [r7, #12]
    uint32_t start_time = HAL_GetTick();
 8004058:	f003 f968 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800405c:	2302      	movs	r3, #2
 800405e:	469a      	mov	sl, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8004060:	23fa      	movs	r3, #250	@ 0xfa
 8004062:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 8004064:	4681      	mov	r9, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8004066:	469b      	mov	fp, r3
 8004068:	4f14      	ldr	r7, [pc, #80]	@ (80040bc <deepPowerDown+0x5f8>)
 800406a:	4652      	mov	r2, sl
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	421a      	tst	r2, r3
 8004070:	d017      	beq.n	80040a2 <deepPowerDown+0x5de>
  *spidr = TxData;
 8004072:	733e      	strb	r6, [r7, #12]
    start_time = HAL_GetTick();
 8004074:	f003 f95a 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8004078:	2301      	movs	r3, #1
 800407a:	4699      	mov	r9, r3
        if ((HAL_GetTick() - start_time) > 1000)
 800407c:	23fa      	movs	r3, #250	@ 0xfa
 800407e:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8004080:	0007      	movs	r7, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8004082:	469a      	mov	sl, r3
 8004084:	4e0d      	ldr	r6, [pc, #52]	@ (80040bc <deepPowerDown+0x5f8>)
 8004086:	464a      	mov	r2, r9
 8004088:	68b3      	ldr	r3, [r6, #8]
 800408a:	421a      	tst	r2, r3
 800408c:	d11e      	bne.n	80040cc <deepPowerDown+0x608>
 800408e:	f003 f94d 	bl	800732c <HAL_GetTick>
 8004092:	1bc0      	subs	r0, r0, r7
 8004094:	4550      	cmp	r0, sl
 8004096:	d9f6      	bls.n	8004086 <deepPowerDown+0x5c2>
            print_error(__func__, __LINE__);
 8004098:	4809      	ldr	r0, [pc, #36]	@ (80040c0 <deepPowerDown+0x5fc>)
 800409a:	490a      	ldr	r1, [pc, #40]	@ (80040c4 <deepPowerDown+0x600>)
 800409c:	f001 f930 	bl	8005300 <print_error>
 80040a0:	e7f1      	b.n	8004086 <deepPowerDown+0x5c2>
        if ((HAL_GetTick() - start_time) > 1000)
 80040a2:	f003 f943 	bl	800732c <HAL_GetTick>
 80040a6:	464b      	mov	r3, r9
 80040a8:	1ac0      	subs	r0, r0, r3
 80040aa:	4558      	cmp	r0, fp
 80040ac:	d9dd      	bls.n	800406a <deepPowerDown+0x5a6>
            print_error(__func__, __LINE__);
 80040ae:	4804      	ldr	r0, [pc, #16]	@ (80040c0 <deepPowerDown+0x5fc>)
 80040b0:	4905      	ldr	r1, [pc, #20]	@ (80040c8 <deepPowerDown+0x604>)
 80040b2:	f001 f925 	bl	8005300 <print_error>
 80040b6:	e7d8      	b.n	800406a <deepPowerDown+0x5a6>
 80040b8:	50000400 	.word	0x50000400
 80040bc:	40013000 	.word	0x40013000
 80040c0:	0800ea80 	.word	0x0800ea80
 80040c4:	00000285 	.word	0x00000285
 80040c8:	0000027a 	.word	0x0000027a
        RTC_H();
 80040cc:	2280      	movs	r2, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 80040ce:	7b33      	ldrb	r3, [r6, #12]
 80040d0:	4b82      	ldr	r3, [pc, #520]	@ (80042dc <deepPowerDown+0x818>)
 80040d2:	01d2      	lsls	r2, r2, #7
 80040d4:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d6:	f388 8810 	msr	PRIMASK, r8
    HAL_Delay(1);
 80040da:	2001      	movs	r0, #1
 80040dc:	f003 f92c 	bl	8007338 <HAL_Delay>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80040e0:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80040e4:	b672      	cpsid	i
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 80040e6:	2340      	movs	r3, #64	@ 0x40
 80040e8:	6832      	ldr	r2, [r6, #0]
 80040ea:	4213      	tst	r3, r2
 80040ec:	d102      	bne.n	80040f4 <deepPowerDown+0x630>
        SPI1->CR1 |= SPI_CR1_SPE;
 80040ee:	6832      	ldr	r2, [r6, #0]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	6033      	str	r3, [r6, #0]
        RTC_L();
 80040f4:	2280      	movs	r2, #128	@ 0x80
 80040f6:	4b79      	ldr	r3, [pc, #484]	@ (80042dc <deepPowerDown+0x818>)
 80040f8:	05d2      	lsls	r2, r2, #23
 80040fa:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 80040fc:	f003 f916 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8004100:	2302      	movs	r3, #2
 8004102:	4699      	mov	r9, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8004104:	23fa      	movs	r3, #250	@ 0xfa
 8004106:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 8004108:	4680      	mov	r8, r0
        if ((HAL_GetTick() - start_time) > 1000)
 800410a:	469a      	mov	sl, r3
 800410c:	4e74      	ldr	r6, [pc, #464]	@ (80042e0 <deepPowerDown+0x81c>)
 800410e:	464a      	mov	r2, r9
 8004110:	68b3      	ldr	r3, [r6, #8]
 8004112:	421a      	tst	r2, r3
 8004114:	d019      	beq.n	800414a <deepPowerDown+0x686>
  *spidr = TxData;
 8004116:	2397      	movs	r3, #151	@ 0x97
 8004118:	7333      	strb	r3, [r6, #12]
    start_time = HAL_GetTick();
 800411a:	f003 f907 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800411e:	2301      	movs	r3, #1
 8004120:	4699      	mov	r9, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8004122:	23fa      	movs	r3, #250	@ 0xfa
 8004124:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8004126:	4680      	mov	r8, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8004128:	469a      	mov	sl, r3
 800412a:	4e6d      	ldr	r6, [pc, #436]	@ (80042e0 <deepPowerDown+0x81c>)
 800412c:	464a      	mov	r2, r9
 800412e:	68b3      	ldr	r3, [r6, #8]
 8004130:	421a      	tst	r2, r3
 8004132:	d115      	bne.n	8004160 <deepPowerDown+0x69c>
 8004134:	f003 f8fa 	bl	800732c <HAL_GetTick>
 8004138:	4643      	mov	r3, r8
 800413a:	1ac0      	subs	r0, r0, r3
 800413c:	4550      	cmp	r0, sl
 800413e:	d9f5      	bls.n	800412c <deepPowerDown+0x668>
            print_error(__func__, __LINE__);
 8004140:	4868      	ldr	r0, [pc, #416]	@ (80042e4 <deepPowerDown+0x820>)
 8004142:	4969      	ldr	r1, [pc, #420]	@ (80042e8 <deepPowerDown+0x824>)
 8004144:	f001 f8dc 	bl	8005300 <print_error>
 8004148:	e7f0      	b.n	800412c <deepPowerDown+0x668>
        if ((HAL_GetTick() - start_time) > 1000)
 800414a:	f003 f8ef 	bl	800732c <HAL_GetTick>
 800414e:	4643      	mov	r3, r8
 8004150:	1ac0      	subs	r0, r0, r3
 8004152:	4550      	cmp	r0, sl
 8004154:	d9db      	bls.n	800410e <deepPowerDown+0x64a>
            print_error(__func__, __LINE__);
 8004156:	4863      	ldr	r0, [pc, #396]	@ (80042e4 <deepPowerDown+0x820>)
 8004158:	4964      	ldr	r1, [pc, #400]	@ (80042ec <deepPowerDown+0x828>)
 800415a:	f001 f8d1 	bl	8005300 <print_error>
 800415e:	e7d6      	b.n	800410e <deepPowerDown+0x64a>
  return (*((__IO uint8_t *)&SPIx->DR));
 8004160:	7b33      	ldrb	r3, [r6, #12]
    uint32_t start_time = HAL_GetTick();
 8004162:	f003 f8e3 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8004166:	2302      	movs	r3, #2
 8004168:	4699      	mov	r9, r3
        if ((HAL_GetTick() - start_time) > 1000)
 800416a:	23fa      	movs	r3, #250	@ 0xfa
 800416c:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 800416e:	4680      	mov	r8, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8004170:	469a      	mov	sl, r3
 8004172:	4e5b      	ldr	r6, [pc, #364]	@ (80042e0 <deepPowerDown+0x81c>)
 8004174:	464a      	mov	r2, r9
 8004176:	68b3      	ldr	r3, [r6, #8]
 8004178:	421a      	tst	r2, r3
 800417a:	d019      	beq.n	80041b0 <deepPowerDown+0x6ec>
  *spidr = TxData;
 800417c:	23c0      	movs	r3, #192	@ 0xc0
 800417e:	7333      	strb	r3, [r6, #12]
    start_time = HAL_GetTick();
 8004180:	f003 f8d4 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8004184:	2301      	movs	r3, #1
 8004186:	4699      	mov	r9, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8004188:	23fa      	movs	r3, #250	@ 0xfa
 800418a:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 800418c:	4680      	mov	r8, r0
        if ((HAL_GetTick() - start_time) > 1000)
 800418e:	469a      	mov	sl, r3
 8004190:	4e53      	ldr	r6, [pc, #332]	@ (80042e0 <deepPowerDown+0x81c>)
 8004192:	464a      	mov	r2, r9
 8004194:	68b3      	ldr	r3, [r6, #8]
 8004196:	421a      	tst	r2, r3
 8004198:	d115      	bne.n	80041c6 <deepPowerDown+0x702>
 800419a:	f003 f8c7 	bl	800732c <HAL_GetTick>
 800419e:	4643      	mov	r3, r8
 80041a0:	1ac0      	subs	r0, r0, r3
 80041a2:	4550      	cmp	r0, sl
 80041a4:	d9f5      	bls.n	8004192 <deepPowerDown+0x6ce>
            print_error(__func__, __LINE__);
 80041a6:	484f      	ldr	r0, [pc, #316]	@ (80042e4 <deepPowerDown+0x820>)
 80041a8:	494f      	ldr	r1, [pc, #316]	@ (80042e8 <deepPowerDown+0x824>)
 80041aa:	f001 f8a9 	bl	8005300 <print_error>
 80041ae:	e7f0      	b.n	8004192 <deepPowerDown+0x6ce>
        if ((HAL_GetTick() - start_time) > 1000)
 80041b0:	f003 f8bc 	bl	800732c <HAL_GetTick>
 80041b4:	4643      	mov	r3, r8
 80041b6:	1ac0      	subs	r0, r0, r3
 80041b8:	4550      	cmp	r0, sl
 80041ba:	d9db      	bls.n	8004174 <deepPowerDown+0x6b0>
            print_error(__func__, __LINE__);
 80041bc:	4849      	ldr	r0, [pc, #292]	@ (80042e4 <deepPowerDown+0x820>)
 80041be:	494b      	ldr	r1, [pc, #300]	@ (80042ec <deepPowerDown+0x828>)
 80041c0:	f001 f89e 	bl	8005300 <print_error>
 80041c4:	e7d6      	b.n	8004174 <deepPowerDown+0x6b0>
        RTC_H();
 80041c6:	2280      	movs	r2, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 80041c8:	7b33      	ldrb	r3, [r6, #12]
 80041ca:	4b44      	ldr	r3, [pc, #272]	@ (80042dc <deepPowerDown+0x818>)
 80041cc:	01d2      	lsls	r2, r2, #7
 80041ce:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d0:	f387 8810 	msr	PRIMASK, r7
    uint32_t start = HAL_GetTick();
 80041d4:	f003 f8aa 	bl	800732c <HAL_GetTick>
    while ((HAL_GetTick() - start) < (uint32_t)(seconds * 1000))
 80041d8:	016b      	lsls	r3, r5, #5
 80041da:	1b5b      	subs	r3, r3, r5
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	195b      	adds	r3, r3, r5
        if ((HAL_GetTick() - start_time) > 1000)
 80041e0:	25fa      	movs	r5, #250	@ 0xfa
    uint32_t start = HAL_GetTick();
 80041e2:	4682      	mov	sl, r0
    while ((HAL_GetTick() - start) < (uint32_t)(seconds * 1000))
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	4698      	mov	r8, r3
        printf("REG_SLEEP_CTRL=0x%2x\n", read_rtc_register(REG_SLEEP_CTRL));
 80041e8:	4b41      	ldr	r3, [pc, #260]	@ (80042f0 <deepPowerDown+0x82c>)
        if ((HAL_GetTick() - start_time) > 1000)
 80041ea:	00ad      	lsls	r5, r5, #2
        printf("REG_SLEEP_CTRL=0x%2x\n", read_rtc_register(REG_SLEEP_CTRL));
 80041ec:	9301      	str	r3, [sp, #4]
    while ((HAL_GetTick() - start) < (uint32_t)(seconds * 1000))
 80041ee:	f003 f89d 	bl	800732c <HAL_GetTick>
 80041f2:	4653      	mov	r3, sl
 80041f4:	1ac0      	subs	r0, r0, r3
 80041f6:	4540      	cmp	r0, r8
 80041f8:	d26b      	bcs.n	80042d2 <deepPowerDown+0x80e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80041fa:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80041fe:	b672      	cpsid	i
    RTC_L();
 8004200:	2280      	movs	r2, #128	@ 0x80
 8004202:	4b36      	ldr	r3, [pc, #216]	@ (80042dc <deepPowerDown+0x818>)
 8004204:	05d2      	lsls	r2, r2, #23
 8004206:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 8004208:	f003 f890 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800420c:	2302      	movs	r3, #2
 800420e:	0007      	movs	r7, r0
 8004210:	469b      	mov	fp, r3
 8004212:	4e33      	ldr	r6, [pc, #204]	@ (80042e0 <deepPowerDown+0x81c>)
 8004214:	465a      	mov	r2, fp
 8004216:	68b3      	ldr	r3, [r6, #8]
 8004218:	421a      	tst	r2, r3
 800421a:	d015      	beq.n	8004248 <deepPowerDown+0x784>
  *spidr = TxData;
 800421c:	2317      	movs	r3, #23
 800421e:	7333      	strb	r3, [r6, #12]
    start_time = HAL_GetTick();
 8004220:	f003 f884 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8004224:	2301      	movs	r3, #1
 8004226:	0007      	movs	r7, r0
 8004228:	469b      	mov	fp, r3
 800422a:	4e2d      	ldr	r6, [pc, #180]	@ (80042e0 <deepPowerDown+0x81c>)
 800422c:	465a      	mov	r2, fp
 800422e:	68b3      	ldr	r3, [r6, #8]
 8004230:	421a      	tst	r2, r3
 8004232:	d113      	bne.n	800425c <deepPowerDown+0x798>
        if ((HAL_GetTick() - start_time) > 1000)
 8004234:	f003 f87a 	bl	800732c <HAL_GetTick>
 8004238:	1bc0      	subs	r0, r0, r7
 800423a:	42a8      	cmp	r0, r5
 800423c:	d9f6      	bls.n	800422c <deepPowerDown+0x768>
            print_error(__func__, __LINE__);
 800423e:	4829      	ldr	r0, [pc, #164]	@ (80042e4 <deepPowerDown+0x820>)
 8004240:	4929      	ldr	r1, [pc, #164]	@ (80042e8 <deepPowerDown+0x824>)
 8004242:	f001 f85d 	bl	8005300 <print_error>
 8004246:	e7f1      	b.n	800422c <deepPowerDown+0x768>
        if ((HAL_GetTick() - start_time) > 1000)
 8004248:	f003 f870 	bl	800732c <HAL_GetTick>
 800424c:	1bc0      	subs	r0, r0, r7
 800424e:	42a8      	cmp	r0, r5
 8004250:	d9e0      	bls.n	8004214 <deepPowerDown+0x750>
            print_error(__func__, __LINE__);
 8004252:	4824      	ldr	r0, [pc, #144]	@ (80042e4 <deepPowerDown+0x820>)
 8004254:	4925      	ldr	r1, [pc, #148]	@ (80042ec <deepPowerDown+0x828>)
 8004256:	f001 f853 	bl	8005300 <print_error>
 800425a:	e7db      	b.n	8004214 <deepPowerDown+0x750>
  return (*((__IO uint8_t *)&SPIx->DR));
 800425c:	7b33      	ldrb	r3, [r6, #12]
    uint32_t start_time = HAL_GetTick();
 800425e:	f003 f865 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8004262:	2302      	movs	r3, #2
 8004264:	0007      	movs	r7, r0
 8004266:	469b      	mov	fp, r3
 8004268:	4e1d      	ldr	r6, [pc, #116]	@ (80042e0 <deepPowerDown+0x81c>)
 800426a:	465a      	mov	r2, fp
 800426c:	68b3      	ldr	r3, [r6, #8]
 800426e:	421a      	tst	r2, r3
 8004270:	d015      	beq.n	800429e <deepPowerDown+0x7da>
  *spidr = TxData;
 8004272:	2300      	movs	r3, #0
 8004274:	7333      	strb	r3, [r6, #12]
    start_time = HAL_GetTick();
 8004276:	f003 f859 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800427a:	2301      	movs	r3, #1
 800427c:	0007      	movs	r7, r0
 800427e:	469b      	mov	fp, r3
 8004280:	4e17      	ldr	r6, [pc, #92]	@ (80042e0 <deepPowerDown+0x81c>)
 8004282:	465a      	mov	r2, fp
 8004284:	68b3      	ldr	r3, [r6, #8]
 8004286:	421a      	tst	r2, r3
 8004288:	d113      	bne.n	80042b2 <deepPowerDown+0x7ee>
        if ((HAL_GetTick() - start_time) > 1000)
 800428a:	f003 f84f 	bl	800732c <HAL_GetTick>
 800428e:	1bc0      	subs	r0, r0, r7
 8004290:	42a8      	cmp	r0, r5
 8004292:	d9f6      	bls.n	8004282 <deepPowerDown+0x7be>
            print_error(__func__, __LINE__);
 8004294:	4813      	ldr	r0, [pc, #76]	@ (80042e4 <deepPowerDown+0x820>)
 8004296:	4914      	ldr	r1, [pc, #80]	@ (80042e8 <deepPowerDown+0x824>)
 8004298:	f001 f832 	bl	8005300 <print_error>
 800429c:	e7f1      	b.n	8004282 <deepPowerDown+0x7be>
        if ((HAL_GetTick() - start_time) > 1000)
 800429e:	f003 f845 	bl	800732c <HAL_GetTick>
 80042a2:	1bc0      	subs	r0, r0, r7
 80042a4:	42a8      	cmp	r0, r5
 80042a6:	d9e0      	bls.n	800426a <deepPowerDown+0x7a6>
            print_error(__func__, __LINE__);
 80042a8:	480e      	ldr	r0, [pc, #56]	@ (80042e4 <deepPowerDown+0x820>)
 80042aa:	4910      	ldr	r1, [pc, #64]	@ (80042ec <deepPowerDown+0x828>)
 80042ac:	f001 f828 	bl	8005300 <print_error>
 80042b0:	e7db      	b.n	800426a <deepPowerDown+0x7a6>
    RTC_H();
 80042b2:	2280      	movs	r2, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 80042b4:	7b31      	ldrb	r1, [r6, #12]
 80042b6:	4b09      	ldr	r3, [pc, #36]	@ (80042dc <deepPowerDown+0x818>)
 80042b8:	01d2      	lsls	r2, r2, #7
 80042ba:	b2c9      	uxtb	r1, r1
 80042bc:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042be:	f389 8810 	msr	PRIMASK, r9
        printf("REG_SLEEP_CTRL=0x%2x\n", read_rtc_register(REG_SLEEP_CTRL));
 80042c2:	9801      	ldr	r0, [sp, #4]
 80042c4:	f002 fd94 	bl	8006df0 <printf_>
        HAL_Delay(1000);
 80042c8:	20fa      	movs	r0, #250	@ 0xfa
 80042ca:	0080      	lsls	r0, r0, #2
 80042cc:	f003 f834 	bl	8007338 <HAL_Delay>
 80042d0:	e78d      	b.n	80041ee <deepPowerDown+0x72a>
    printf("didn't power down\n");
 80042d2:	4808      	ldr	r0, [pc, #32]	@ (80042f4 <deepPowerDown+0x830>)
 80042d4:	f002 fd8c 	bl	8006df0 <printf_>
    return true;
 80042d8:	e43f      	b.n	8003b5a <deepPowerDown+0x96>
 80042da:	46c0      	nop			@ (mov r8, r8)
 80042dc:	50000400 	.word	0x50000400
 80042e0:	40013000 	.word	0x40013000
 80042e4:	0800ea80 	.word	0x0800ea80
 80042e8:	00000285 	.word	0x00000285
 80042ec:	0000027a 	.word	0x0000027a
 80042f0:	0800ea54 	.word	0x0800ea54
 80042f4:	0800ea6c 	.word	0x0800ea6c

080042f8 <readRam>:
{
 80042f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042fa:	46de      	mov	lr, fp
 80042fc:	4657      	mov	r7, sl
 80042fe:	464e      	mov	r6, r9
 8004300:	4645      	mov	r5, r8
 8004302:	b5e0      	push	{r5, r6, r7, lr}
 8004304:	b087      	sub	sp, #28
 8004306:	9103      	str	r1, [sp, #12]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004308:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800430c:	b672      	cpsid	i
    while (dataLen > 0)
 800430e:	2a00      	cmp	r2, #0
 8004310:	d100      	bne.n	8004314 <readRam+0x1c>
 8004312:	e246      	b.n	80047a2 <readRam+0x4aa>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8004314:	2302      	movs	r3, #2
 8004316:	4699      	mov	r9, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8004318:	23fa      	movs	r3, #250	@ 0xfa
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	9705      	str	r7, [sp, #20]
 800431e:	469a      	mov	sl, r3
 8004320:	0005      	movs	r5, r0
 8004322:	0017      	movs	r7, r2
 8004324:	4cb1      	ldr	r4, [pc, #708]	@ (80045ec <readRam+0x2f4>)
        if (count > 32)
 8004326:	9701      	str	r7, [sp, #4]
 8004328:	2f20      	cmp	r7, #32
 800432a:	d901      	bls.n	8004330 <readRam+0x38>
 800432c:	2320      	movs	r3, #32
 800432e:	9301      	str	r3, [sp, #4]
        if ((ramAddr < 128) && ((ramAddr + count) > 128))
 8004330:	9b01      	ldr	r3, [sp, #4]
 8004332:	469c      	mov	ip, r3
 8004334:	44ac      	add	ip, r5
 8004336:	4663      	mov	r3, ip
 8004338:	9302      	str	r3, [sp, #8]
 800433a:	2d7f      	cmp	r5, #127	@ 0x7f
 800433c:	d900      	bls.n	8004340 <readRam+0x48>
 800433e:	e15f      	b.n	8004600 <readRam+0x308>
 8004340:	2b80      	cmp	r3, #128	@ 0x80
 8004342:	d904      	bls.n	800434e <readRam+0x56>
            count = 128 - ramAddr;
 8004344:	2380      	movs	r3, #128	@ 0x80
 8004346:	1b5b      	subs	r3, r3, r5
 8004348:	9301      	str	r3, [sp, #4]
 800434a:	2380      	movs	r3, #128	@ 0x80
 800434c:	9302      	str	r3, [sp, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800434e:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004352:	b672      	cpsid	i
    RTC_L();
 8004354:	2280      	movs	r2, #128	@ 0x80
 8004356:	4ba6      	ldr	r3, [pc, #664]	@ (80045f0 <readRam+0x2f8>)
 8004358:	05d2      	lsls	r2, r2, #23
 800435a:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 800435c:	f002 ffe6 	bl	800732c <HAL_GetTick>
 8004360:	0006      	movs	r6, r0
 8004362:	464a      	mov	r2, r9
 8004364:	68a3      	ldr	r3, [r4, #8]
 8004366:	421a      	tst	r2, r3
 8004368:	d100      	bne.n	800436c <readRam+0x74>
 800436a:	e0fe      	b.n	800456a <readRam+0x272>
  *spidr = TxData;
 800436c:	233f      	movs	r3, #63	@ 0x3f
 800436e:	7323      	strb	r3, [r4, #12]
    start_time = HAL_GetTick();
 8004370:	f002 ffdc 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8004374:	2301      	movs	r3, #1
 8004376:	0006      	movs	r6, r0
 8004378:	469b      	mov	fp, r3
 800437a:	465a      	mov	r2, fp
 800437c:	68a3      	ldr	r3, [r4, #8]
 800437e:	421a      	tst	r2, r3
 8004380:	d10c      	bne.n	800439c <readRam+0xa4>
        if ((HAL_GetTick() - start_time) > 1000)
 8004382:	f002 ffd3 	bl	800732c <HAL_GetTick>
 8004386:	1b80      	subs	r0, r0, r6
 8004388:	4550      	cmp	r0, sl
 800438a:	d9f6      	bls.n	800437a <readRam+0x82>
            print_error(__func__, __LINE__);
 800438c:	4899      	ldr	r0, [pc, #612]	@ (80045f4 <readRam+0x2fc>)
 800438e:	499a      	ldr	r1, [pc, #616]	@ (80045f8 <readRam+0x300>)
 8004390:	f000 ffb6 	bl	8005300 <print_error>
 8004394:	465a      	mov	r2, fp
 8004396:	68a3      	ldr	r3, [r4, #8]
 8004398:	421a      	tst	r2, r3
 800439a:	d0f2      	beq.n	8004382 <readRam+0x8a>
  return (*((__IO uint8_t *)&SPIx->DR));
 800439c:	7b23      	ldrb	r3, [r4, #12]
    uint32_t start_time = HAL_GetTick();
 800439e:	f002 ffc5 	bl	800732c <HAL_GetTick>
 80043a2:	0006      	movs	r6, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80043a4:	464a      	mov	r2, r9
 80043a6:	68a3      	ldr	r3, [r4, #8]
 80043a8:	421a      	tst	r2, r3
 80043aa:	d100      	bne.n	80043ae <readRam+0xb6>
 80043ac:	e0e8      	b.n	8004580 <readRam+0x288>
  *spidr = TxData;
 80043ae:	2300      	movs	r3, #0
 80043b0:	7323      	strb	r3, [r4, #12]
    start_time = HAL_GetTick();
 80043b2:	f002 ffbb 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80043b6:	2301      	movs	r3, #1
 80043b8:	0006      	movs	r6, r0
 80043ba:	469b      	mov	fp, r3
 80043bc:	465a      	mov	r2, fp
 80043be:	68a3      	ldr	r3, [r4, #8]
 80043c0:	421a      	tst	r2, r3
 80043c2:	d10c      	bne.n	80043de <readRam+0xe6>
        if ((HAL_GetTick() - start_time) > 1000)
 80043c4:	f002 ffb2 	bl	800732c <HAL_GetTick>
 80043c8:	1b80      	subs	r0, r0, r6
 80043ca:	4550      	cmp	r0, sl
 80043cc:	d9f6      	bls.n	80043bc <readRam+0xc4>
            print_error(__func__, __LINE__);
 80043ce:	4889      	ldr	r0, [pc, #548]	@ (80045f4 <readRam+0x2fc>)
 80043d0:	4989      	ldr	r1, [pc, #548]	@ (80045f8 <readRam+0x300>)
 80043d2:	f000 ff95 	bl	8005300 <print_error>
 80043d6:	465a      	mov	r2, fp
 80043d8:	68a3      	ldr	r3, [r4, #8]
 80043da:	421a      	tst	r2, r3
 80043dc:	d0f2      	beq.n	80043c4 <readRam+0xcc>
    RTC_H();
 80043de:	2180      	movs	r1, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 80043e0:	7b23      	ldrb	r3, [r4, #12]
 80043e2:	4a83      	ldr	r2, [pc, #524]	@ (80045f0 <readRam+0x2f8>)
 80043e4:	01c9      	lsls	r1, r1, #7
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	6191      	str	r1, [r2, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ea:	f388 8810 	msr	PRIMASK, r8
    uint8_t newValue = (value & andValue) | orValue;
 80043ee:	2204      	movs	r2, #4
 80043f0:	4393      	bics	r3, r2
 80043f2:	9304      	str	r3, [sp, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80043f4:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80043f8:	b672      	cpsid	i
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 80043fa:	2340      	movs	r3, #64	@ 0x40
 80043fc:	6822      	ldr	r2, [r4, #0]
 80043fe:	4213      	tst	r3, r2
 8004400:	d102      	bne.n	8004408 <readRam+0x110>
        SPI1->CR1 |= SPI_CR1_SPE;
 8004402:	6822      	ldr	r2, [r4, #0]
 8004404:	4313      	orrs	r3, r2
 8004406:	6023      	str	r3, [r4, #0]
        RTC_L();
 8004408:	2280      	movs	r2, #128	@ 0x80
 800440a:	4b79      	ldr	r3, [pc, #484]	@ (80045f0 <readRam+0x2f8>)
 800440c:	05d2      	lsls	r2, r2, #23
 800440e:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 8004410:	f002 ff8c 	bl	800732c <HAL_GetTick>
 8004414:	0006      	movs	r6, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8004416:	464a      	mov	r2, r9
 8004418:	68a3      	ldr	r3, [r4, #8]
 800441a:	421a      	tst	r2, r3
 800441c:	d100      	bne.n	8004420 <readRam+0x128>
 800441e:	e0ba      	b.n	8004596 <readRam+0x29e>
  *spidr = TxData;
 8004420:	23bf      	movs	r3, #191	@ 0xbf
 8004422:	7323      	strb	r3, [r4, #12]
    start_time = HAL_GetTick();
 8004424:	f002 ff82 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8004428:	2301      	movs	r3, #1
 800442a:	0006      	movs	r6, r0
 800442c:	469b      	mov	fp, r3
 800442e:	465a      	mov	r2, fp
 8004430:	68a3      	ldr	r3, [r4, #8]
 8004432:	421a      	tst	r2, r3
 8004434:	d10c      	bne.n	8004450 <readRam+0x158>
        if ((HAL_GetTick() - start_time) > 1000)
 8004436:	f002 ff79 	bl	800732c <HAL_GetTick>
 800443a:	1b80      	subs	r0, r0, r6
 800443c:	4550      	cmp	r0, sl
 800443e:	d9f6      	bls.n	800442e <readRam+0x136>
            print_error(__func__, __LINE__);
 8004440:	486c      	ldr	r0, [pc, #432]	@ (80045f4 <readRam+0x2fc>)
 8004442:	496d      	ldr	r1, [pc, #436]	@ (80045f8 <readRam+0x300>)
 8004444:	f000 ff5c 	bl	8005300 <print_error>
 8004448:	465a      	mov	r2, fp
 800444a:	68a3      	ldr	r3, [r4, #8]
 800444c:	421a      	tst	r2, r3
 800444e:	d0f2      	beq.n	8004436 <readRam+0x13e>
  return (*((__IO uint8_t *)&SPIx->DR));
 8004450:	7b23      	ldrb	r3, [r4, #12]
    uint32_t start_time = HAL_GetTick();
 8004452:	f002 ff6b 	bl	800732c <HAL_GetTick>
 8004456:	0006      	movs	r6, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8004458:	464a      	mov	r2, r9
 800445a:	68a3      	ldr	r3, [r4, #8]
 800445c:	421a      	tst	r2, r3
 800445e:	d100      	bne.n	8004462 <readRam+0x16a>
 8004460:	e0a4      	b.n	80045ac <readRam+0x2b4>
  *spidr = TxData;
 8004462:	9b04      	ldr	r3, [sp, #16]
 8004464:	7323      	strb	r3, [r4, #12]
    start_time = HAL_GetTick();
 8004466:	f002 ff61 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800446a:	2301      	movs	r3, #1
 800446c:	0006      	movs	r6, r0
 800446e:	469b      	mov	fp, r3
 8004470:	465a      	mov	r2, fp
 8004472:	68a3      	ldr	r3, [r4, #8]
 8004474:	421a      	tst	r2, r3
 8004476:	d10c      	bne.n	8004492 <readRam+0x19a>
        if ((HAL_GetTick() - start_time) > 1000)
 8004478:	f002 ff58 	bl	800732c <HAL_GetTick>
 800447c:	1b80      	subs	r0, r0, r6
 800447e:	4550      	cmp	r0, sl
 8004480:	d9f6      	bls.n	8004470 <readRam+0x178>
            print_error(__func__, __LINE__);
 8004482:	485c      	ldr	r0, [pc, #368]	@ (80045f4 <readRam+0x2fc>)
 8004484:	495c      	ldr	r1, [pc, #368]	@ (80045f8 <readRam+0x300>)
 8004486:	f000 ff3b 	bl	8005300 <print_error>
 800448a:	465a      	mov	r2, fp
 800448c:	68a3      	ldr	r3, [r4, #8]
 800448e:	421a      	tst	r2, r3
 8004490:	d0f2      	beq.n	8004478 <readRam+0x180>
        RTC_H();
 8004492:	2280      	movs	r2, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 8004494:	7b23      	ldrb	r3, [r4, #12]
 8004496:	4b56      	ldr	r3, [pc, #344]	@ (80045f0 <readRam+0x2f8>)
 8004498:	01d2      	lsls	r2, r2, #7
 800449a:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800449c:	f388 8810 	msr	PRIMASK, r8
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count); // !!!!!!!!!
 80044a0:	237f      	movs	r3, #127	@ 0x7f
 80044a2:	401d      	ands	r5, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80044a4:	f3ef 8b10 	mrs	fp, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80044a8:	b672      	cpsid	i
        RTC_L();
 80044aa:	2280      	movs	r2, #128	@ 0x80
 80044ac:	4b50      	ldr	r3, [pc, #320]	@ (80045f0 <readRam+0x2f8>)
 80044ae:	05d2      	lsls	r2, r2, #23
 80044b0:	619a      	str	r2, [r3, #24]
    uint8_t address = AB1815_SPI_READ(offset);
    uint32_t primask_bit = utils_enter_critical_section();
    spi_select_slave(0);

    unsigned int i = 0;
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 80044b2:	2340      	movs	r3, #64	@ 0x40
 80044b4:	6822      	ldr	r2, [r4, #0]
 80044b6:	4213      	tst	r3, r2
 80044b8:	d102      	bne.n	80044c0 <readRam+0x1c8>
    {
        SPI1->CR1 |= SPI_CR1_SPE;
 80044ba:	6822      	ldr	r2, [r4, #0]
 80044bc:	4313      	orrs	r3, r2
 80044be:	6023      	str	r3, [r4, #0]
    uint32_t start_time = HAL_GetTick();
 80044c0:	f002 ff34 	bl	800732c <HAL_GetTick>
 80044c4:	0006      	movs	r6, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80044c6:	464a      	mov	r2, r9
 80044c8:	68a3      	ldr	r3, [r4, #8]
 80044ca:	421a      	tst	r2, r3
 80044cc:	d079      	beq.n	80045c2 <readRam+0x2ca>
  *spidr = TxData;
 80044ce:	7325      	strb	r5, [r4, #12]
    start_time = HAL_GetTick();
 80044d0:	f002 ff2c 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80044d4:	2601      	movs	r6, #1
 80044d6:	0005      	movs	r5, r0
 80044d8:	68a3      	ldr	r3, [r4, #8]
 80044da:	421e      	tst	r6, r3
 80044dc:	d10b      	bne.n	80044f6 <readRam+0x1fe>
        if ((HAL_GetTick() - start_time) > 1000)
 80044de:	f002 ff25 	bl	800732c <HAL_GetTick>
 80044e2:	1b40      	subs	r0, r0, r5
 80044e4:	4550      	cmp	r0, sl
 80044e6:	d9f7      	bls.n	80044d8 <readRam+0x1e0>
            print_error(__func__, __LINE__);
 80044e8:	4842      	ldr	r0, [pc, #264]	@ (80045f4 <readRam+0x2fc>)
 80044ea:	4943      	ldr	r1, [pc, #268]	@ (80045f8 <readRam+0x300>)
 80044ec:	f000 ff08 	bl	8005300 <print_error>
 80044f0:	68a3      	ldr	r3, [r4, #8]
 80044f2:	421e      	tst	r6, r3
 80044f4:	d0f3      	beq.n	80044de <readRam+0x1e6>
  return (*((__IO uint8_t *)&SPIx->DR));
 80044f6:	7b23      	ldrb	r3, [r4, #12]
    }

    SPI1_SendByte(address);
    while (i < length)
 80044f8:	9b01      	ldr	r3, [sp, #4]
 80044fa:	9d03      	ldr	r5, [sp, #12]
 80044fc:	4698      	mov	r8, r3
 80044fe:	465b      	mov	r3, fp
 8004500:	46bb      	mov	fp, r7
 8004502:	44a8      	add	r8, r5
 8004504:	9303      	str	r3, [sp, #12]
    uint32_t start_time = HAL_GetTick();
 8004506:	f002 ff11 	bl	800732c <HAL_GetTick>
 800450a:	0006      	movs	r6, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800450c:	464a      	mov	r2, r9
 800450e:	68a3      	ldr	r3, [r4, #8]
 8004510:	421a      	tst	r2, r3
 8004512:	d061      	beq.n	80045d8 <readRam+0x2e0>
  *spidr = TxData;
 8004514:	2300      	movs	r3, #0
 8004516:	7323      	strb	r3, [r4, #12]
    start_time = HAL_GetTick();
 8004518:	f002 ff08 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800451c:	2701      	movs	r7, #1
 800451e:	0006      	movs	r6, r0
 8004520:	68a3      	ldr	r3, [r4, #8]
 8004522:	421f      	tst	r7, r3
 8004524:	d10b      	bne.n	800453e <readRam+0x246>
        if ((HAL_GetTick() - start_time) > 1000)
 8004526:	f002 ff01 	bl	800732c <HAL_GetTick>
 800452a:	1b80      	subs	r0, r0, r6
 800452c:	4550      	cmp	r0, sl
 800452e:	d9f7      	bls.n	8004520 <readRam+0x228>
            print_error(__func__, __LINE__);
 8004530:	4830      	ldr	r0, [pc, #192]	@ (80045f4 <readRam+0x2fc>)
 8004532:	4931      	ldr	r1, [pc, #196]	@ (80045f8 <readRam+0x300>)
 8004534:	f000 fee4 	bl	8005300 <print_error>
 8004538:	68a3      	ldr	r3, [r4, #8]
 800453a:	421f      	tst	r7, r3
 800453c:	d0f3      	beq.n	8004526 <readRam+0x22e>
  return (*((__IO uint8_t *)&SPIx->DR));
 800453e:	7b23      	ldrb	r3, [r4, #12]
    {
        buf[i++] = SPI1_SendByte(0x00); // Send DUMMY to read data
 8004540:	702b      	strb	r3, [r5, #0]
    while (i < length)
 8004542:	3501      	adds	r5, #1
 8004544:	45a8      	cmp	r8, r5
 8004546:	d1de      	bne.n	8004506 <readRam+0x20e>
        RTC_H();
 8004548:	2280      	movs	r2, #128	@ 0x80
 800454a:	9b03      	ldr	r3, [sp, #12]
 800454c:	465f      	mov	r7, fp
 800454e:	469b      	mov	fp, r3
 8004550:	4b27      	ldr	r3, [pc, #156]	@ (80045f0 <readRam+0x2f8>)
 8004552:	01d2      	lsls	r2, r2, #7
 8004554:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004556:	f38b 8810 	msr	PRIMASK, fp
        dataLen -= count;
 800455a:	9b01      	ldr	r3, [sp, #4]
 800455c:	1aff      	subs	r7, r7, r3
        data += count;
 800455e:	4643      	mov	r3, r8
 8004560:	9303      	str	r3, [sp, #12]
    while (dataLen > 0)
 8004562:	d100      	bne.n	8004566 <readRam+0x26e>
 8004564:	e11c      	b.n	80047a0 <readRam+0x4a8>
        ramAddr += count;
 8004566:	9d02      	ldr	r5, [sp, #8]
 8004568:	e6dd      	b.n	8004326 <readRam+0x2e>
        if ((HAL_GetTick() - start_time) > 1000)
 800456a:	f002 fedf 	bl	800732c <HAL_GetTick>
 800456e:	1b80      	subs	r0, r0, r6
 8004570:	4550      	cmp	r0, sl
 8004572:	d800      	bhi.n	8004576 <readRam+0x27e>
 8004574:	e6f5      	b.n	8004362 <readRam+0x6a>
            print_error(__func__, __LINE__);
 8004576:	481f      	ldr	r0, [pc, #124]	@ (80045f4 <readRam+0x2fc>)
 8004578:	4920      	ldr	r1, [pc, #128]	@ (80045fc <readRam+0x304>)
 800457a:	f000 fec1 	bl	8005300 <print_error>
 800457e:	e6f0      	b.n	8004362 <readRam+0x6a>
        if ((HAL_GetTick() - start_time) > 1000)
 8004580:	f002 fed4 	bl	800732c <HAL_GetTick>
 8004584:	1b80      	subs	r0, r0, r6
 8004586:	4550      	cmp	r0, sl
 8004588:	d800      	bhi.n	800458c <readRam+0x294>
 800458a:	e70b      	b.n	80043a4 <readRam+0xac>
            print_error(__func__, __LINE__);
 800458c:	4819      	ldr	r0, [pc, #100]	@ (80045f4 <readRam+0x2fc>)
 800458e:	491b      	ldr	r1, [pc, #108]	@ (80045fc <readRam+0x304>)
 8004590:	f000 feb6 	bl	8005300 <print_error>
 8004594:	e706      	b.n	80043a4 <readRam+0xac>
        if ((HAL_GetTick() - start_time) > 1000)
 8004596:	f002 fec9 	bl	800732c <HAL_GetTick>
 800459a:	1b80      	subs	r0, r0, r6
 800459c:	4550      	cmp	r0, sl
 800459e:	d800      	bhi.n	80045a2 <readRam+0x2aa>
 80045a0:	e739      	b.n	8004416 <readRam+0x11e>
            print_error(__func__, __LINE__);
 80045a2:	4814      	ldr	r0, [pc, #80]	@ (80045f4 <readRam+0x2fc>)
 80045a4:	4915      	ldr	r1, [pc, #84]	@ (80045fc <readRam+0x304>)
 80045a6:	f000 feab 	bl	8005300 <print_error>
 80045aa:	e734      	b.n	8004416 <readRam+0x11e>
        if ((HAL_GetTick() - start_time) > 1000)
 80045ac:	f002 febe 	bl	800732c <HAL_GetTick>
 80045b0:	1b80      	subs	r0, r0, r6
 80045b2:	4550      	cmp	r0, sl
 80045b4:	d800      	bhi.n	80045b8 <readRam+0x2c0>
 80045b6:	e74f      	b.n	8004458 <readRam+0x160>
            print_error(__func__, __LINE__);
 80045b8:	480e      	ldr	r0, [pc, #56]	@ (80045f4 <readRam+0x2fc>)
 80045ba:	4910      	ldr	r1, [pc, #64]	@ (80045fc <readRam+0x304>)
 80045bc:	f000 fea0 	bl	8005300 <print_error>
 80045c0:	e74a      	b.n	8004458 <readRam+0x160>
        if ((HAL_GetTick() - start_time) > 1000)
 80045c2:	f002 feb3 	bl	800732c <HAL_GetTick>
 80045c6:	1b80      	subs	r0, r0, r6
 80045c8:	4550      	cmp	r0, sl
 80045ca:	d800      	bhi.n	80045ce <readRam+0x2d6>
 80045cc:	e77b      	b.n	80044c6 <readRam+0x1ce>
            print_error(__func__, __LINE__);
 80045ce:	4809      	ldr	r0, [pc, #36]	@ (80045f4 <readRam+0x2fc>)
 80045d0:	490a      	ldr	r1, [pc, #40]	@ (80045fc <readRam+0x304>)
 80045d2:	f000 fe95 	bl	8005300 <print_error>
 80045d6:	e776      	b.n	80044c6 <readRam+0x1ce>
        if ((HAL_GetTick() - start_time) > 1000)
 80045d8:	f002 fea8 	bl	800732c <HAL_GetTick>
 80045dc:	1b80      	subs	r0, r0, r6
 80045de:	4550      	cmp	r0, sl
 80045e0:	d994      	bls.n	800450c <readRam+0x214>
            print_error(__func__, __LINE__);
 80045e2:	4804      	ldr	r0, [pc, #16]	@ (80045f4 <readRam+0x2fc>)
 80045e4:	4905      	ldr	r1, [pc, #20]	@ (80045fc <readRam+0x304>)
 80045e6:	f000 fe8b 	bl	8005300 <print_error>
 80045ea:	e78f      	b.n	800450c <readRam+0x214>
 80045ec:	40013000 	.word	0x40013000
 80045f0:	50000400 	.word	0x50000400
 80045f4:	0800ea80 	.word	0x0800ea80
 80045f8:	00000285 	.word	0x00000285
 80045fc:	0000027a 	.word	0x0000027a
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004600:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004604:	b672      	cpsid	i
    RTC_L();
 8004606:	2280      	movs	r2, #128	@ 0x80
 8004608:	4b6b      	ldr	r3, [pc, #428]	@ (80047b8 <readRam+0x4c0>)
 800460a:	05d2      	lsls	r2, r2, #23
 800460c:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 800460e:	f002 fe8d 	bl	800732c <HAL_GetTick>
 8004612:	0006      	movs	r6, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8004614:	464a      	mov	r2, r9
 8004616:	68a3      	ldr	r3, [r4, #8]
 8004618:	421a      	tst	r2, r3
 800461a:	d100      	bne.n	800461e <readRam+0x326>
 800461c:	e096      	b.n	800474c <readRam+0x454>
  *spidr = TxData;
 800461e:	233f      	movs	r3, #63	@ 0x3f
 8004620:	7323      	strb	r3, [r4, #12]
    start_time = HAL_GetTick();
 8004622:	f002 fe83 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8004626:	2301      	movs	r3, #1
 8004628:	0006      	movs	r6, r0
 800462a:	469b      	mov	fp, r3
 800462c:	465a      	mov	r2, fp
 800462e:	68a3      	ldr	r3, [r4, #8]
 8004630:	421a      	tst	r2, r3
 8004632:	d10c      	bne.n	800464e <readRam+0x356>
        if ((HAL_GetTick() - start_time) > 1000)
 8004634:	f002 fe7a 	bl	800732c <HAL_GetTick>
 8004638:	1b80      	subs	r0, r0, r6
 800463a:	4550      	cmp	r0, sl
 800463c:	d9f6      	bls.n	800462c <readRam+0x334>
            print_error(__func__, __LINE__);
 800463e:	485f      	ldr	r0, [pc, #380]	@ (80047bc <readRam+0x4c4>)
 8004640:	495f      	ldr	r1, [pc, #380]	@ (80047c0 <readRam+0x4c8>)
 8004642:	f000 fe5d 	bl	8005300 <print_error>
 8004646:	465a      	mov	r2, fp
 8004648:	68a3      	ldr	r3, [r4, #8]
 800464a:	421a      	tst	r2, r3
 800464c:	d0f2      	beq.n	8004634 <readRam+0x33c>
  return (*((__IO uint8_t *)&SPIx->DR));
 800464e:	7b23      	ldrb	r3, [r4, #12]
    uint32_t start_time = HAL_GetTick();
 8004650:	f002 fe6c 	bl	800732c <HAL_GetTick>
 8004654:	0006      	movs	r6, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8004656:	464a      	mov	r2, r9
 8004658:	68a3      	ldr	r3, [r4, #8]
 800465a:	421a      	tst	r2, r3
 800465c:	d100      	bne.n	8004660 <readRam+0x368>
 800465e:	e080      	b.n	8004762 <readRam+0x46a>
  *spidr = TxData;
 8004660:	2300      	movs	r3, #0
 8004662:	7323      	strb	r3, [r4, #12]
    start_time = HAL_GetTick();
 8004664:	f002 fe62 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8004668:	2301      	movs	r3, #1
 800466a:	0006      	movs	r6, r0
 800466c:	469b      	mov	fp, r3
 800466e:	465a      	mov	r2, fp
 8004670:	68a3      	ldr	r3, [r4, #8]
 8004672:	421a      	tst	r2, r3
 8004674:	d10c      	bne.n	8004690 <readRam+0x398>
        if ((HAL_GetTick() - start_time) > 1000)
 8004676:	f002 fe59 	bl	800732c <HAL_GetTick>
 800467a:	1b80      	subs	r0, r0, r6
 800467c:	4550      	cmp	r0, sl
 800467e:	d9f6      	bls.n	800466e <readRam+0x376>
            print_error(__func__, __LINE__);
 8004680:	484e      	ldr	r0, [pc, #312]	@ (80047bc <readRam+0x4c4>)
 8004682:	494f      	ldr	r1, [pc, #316]	@ (80047c0 <readRam+0x4c8>)
 8004684:	f000 fe3c 	bl	8005300 <print_error>
 8004688:	465a      	mov	r2, fp
 800468a:	68a3      	ldr	r3, [r4, #8]
 800468c:	421a      	tst	r2, r3
 800468e:	d0f2      	beq.n	8004676 <readRam+0x37e>
    RTC_H();
 8004690:	2180      	movs	r1, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 8004692:	7b23      	ldrb	r3, [r4, #12]
 8004694:	4a48      	ldr	r2, [pc, #288]	@ (80047b8 <readRam+0x4c0>)
 8004696:	01c9      	lsls	r1, r1, #7
 8004698:	b2db      	uxtb	r3, r3
 800469a:	6191      	str	r1, [r2, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800469c:	f388 8810 	msr	PRIMASK, r8
    uint8_t newValue = (value & andValue) | orValue;
 80046a0:	2204      	movs	r2, #4
 80046a2:	4313      	orrs	r3, r2
 80046a4:	9304      	str	r3, [sp, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80046a6:	f3ef 8b10 	mrs	fp, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80046aa:	b672      	cpsid	i
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 80046ac:	2340      	movs	r3, #64	@ 0x40
 80046ae:	6822      	ldr	r2, [r4, #0]
 80046b0:	4213      	tst	r3, r2
 80046b2:	d102      	bne.n	80046ba <readRam+0x3c2>
        SPI1->CR1 |= SPI_CR1_SPE;
 80046b4:	6822      	ldr	r2, [r4, #0]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	6023      	str	r3, [r4, #0]
        RTC_L();
 80046ba:	2280      	movs	r2, #128	@ 0x80
 80046bc:	4b3e      	ldr	r3, [pc, #248]	@ (80047b8 <readRam+0x4c0>)
 80046be:	05d2      	lsls	r2, r2, #23
 80046c0:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 80046c2:	f002 fe33 	bl	800732c <HAL_GetTick>
 80046c6:	0006      	movs	r6, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80046c8:	464a      	mov	r2, r9
 80046ca:	68a3      	ldr	r3, [r4, #8]
 80046cc:	421a      	tst	r2, r3
 80046ce:	d053      	beq.n	8004778 <readRam+0x480>
  *spidr = TxData;
 80046d0:	23bf      	movs	r3, #191	@ 0xbf
 80046d2:	7323      	strb	r3, [r4, #12]
    start_time = HAL_GetTick();
 80046d4:	f002 fe2a 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80046d8:	2601      	movs	r6, #1
 80046da:	4680      	mov	r8, r0
 80046dc:	68a3      	ldr	r3, [r4, #8]
 80046de:	421e      	tst	r6, r3
 80046e0:	d10c      	bne.n	80046fc <readRam+0x404>
        if ((HAL_GetTick() - start_time) > 1000)
 80046e2:	f002 fe23 	bl	800732c <HAL_GetTick>
 80046e6:	4643      	mov	r3, r8
 80046e8:	1ac0      	subs	r0, r0, r3
 80046ea:	4550      	cmp	r0, sl
 80046ec:	d9f6      	bls.n	80046dc <readRam+0x3e4>
            print_error(__func__, __LINE__);
 80046ee:	4833      	ldr	r0, [pc, #204]	@ (80047bc <readRam+0x4c4>)
 80046f0:	4933      	ldr	r1, [pc, #204]	@ (80047c0 <readRam+0x4c8>)
 80046f2:	f000 fe05 	bl	8005300 <print_error>
 80046f6:	68a3      	ldr	r3, [r4, #8]
 80046f8:	421e      	tst	r6, r3
 80046fa:	d0f2      	beq.n	80046e2 <readRam+0x3ea>
  return (*((__IO uint8_t *)&SPIx->DR));
 80046fc:	7b23      	ldrb	r3, [r4, #12]
    uint32_t start_time = HAL_GetTick();
 80046fe:	f002 fe15 	bl	800732c <HAL_GetTick>
 8004702:	0006      	movs	r6, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8004704:	464a      	mov	r2, r9
 8004706:	68a3      	ldr	r3, [r4, #8]
 8004708:	421a      	tst	r2, r3
 800470a:	d03f      	beq.n	800478c <readRam+0x494>
  *spidr = TxData;
 800470c:	9b04      	ldr	r3, [sp, #16]
 800470e:	7323      	strb	r3, [r4, #12]
    start_time = HAL_GetTick();
 8004710:	f002 fe0c 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8004714:	2301      	movs	r3, #1
 8004716:	0006      	movs	r6, r0
 8004718:	4698      	mov	r8, r3
 800471a:	4642      	mov	r2, r8
 800471c:	68a3      	ldr	r3, [r4, #8]
 800471e:	421a      	tst	r2, r3
 8004720:	d10c      	bne.n	800473c <readRam+0x444>
        if ((HAL_GetTick() - start_time) > 1000)
 8004722:	f002 fe03 	bl	800732c <HAL_GetTick>
 8004726:	1b80      	subs	r0, r0, r6
 8004728:	4550      	cmp	r0, sl
 800472a:	d9f6      	bls.n	800471a <readRam+0x422>
            print_error(__func__, __LINE__);
 800472c:	4823      	ldr	r0, [pc, #140]	@ (80047bc <readRam+0x4c4>)
 800472e:	4924      	ldr	r1, [pc, #144]	@ (80047c0 <readRam+0x4c8>)
 8004730:	f000 fde6 	bl	8005300 <print_error>
 8004734:	4642      	mov	r2, r8
 8004736:	68a3      	ldr	r3, [r4, #8]
 8004738:	421a      	tst	r2, r3
 800473a:	d0f2      	beq.n	8004722 <readRam+0x42a>
        RTC_H();
 800473c:	2280      	movs	r2, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 800473e:	7b23      	ldrb	r3, [r4, #12]
 8004740:	4b1d      	ldr	r3, [pc, #116]	@ (80047b8 <readRam+0x4c0>)
 8004742:	01d2      	lsls	r2, r2, #7
 8004744:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004746:	f38b 8810 	msr	PRIMASK, fp
    return maskRegister(regAddr, 0xff, bitMask, lock);
 800474a:	e6a9      	b.n	80044a0 <readRam+0x1a8>
        if ((HAL_GetTick() - start_time) > 1000)
 800474c:	f002 fdee 	bl	800732c <HAL_GetTick>
 8004750:	1b80      	subs	r0, r0, r6
 8004752:	4550      	cmp	r0, sl
 8004754:	d800      	bhi.n	8004758 <readRam+0x460>
 8004756:	e75d      	b.n	8004614 <readRam+0x31c>
            print_error(__func__, __LINE__);
 8004758:	4818      	ldr	r0, [pc, #96]	@ (80047bc <readRam+0x4c4>)
 800475a:	491a      	ldr	r1, [pc, #104]	@ (80047c4 <readRam+0x4cc>)
 800475c:	f000 fdd0 	bl	8005300 <print_error>
 8004760:	e758      	b.n	8004614 <readRam+0x31c>
        if ((HAL_GetTick() - start_time) > 1000)
 8004762:	f002 fde3 	bl	800732c <HAL_GetTick>
 8004766:	1b80      	subs	r0, r0, r6
 8004768:	4550      	cmp	r0, sl
 800476a:	d800      	bhi.n	800476e <readRam+0x476>
 800476c:	e773      	b.n	8004656 <readRam+0x35e>
            print_error(__func__, __LINE__);
 800476e:	4813      	ldr	r0, [pc, #76]	@ (80047bc <readRam+0x4c4>)
 8004770:	4914      	ldr	r1, [pc, #80]	@ (80047c4 <readRam+0x4cc>)
 8004772:	f000 fdc5 	bl	8005300 <print_error>
 8004776:	e76e      	b.n	8004656 <readRam+0x35e>
        if ((HAL_GetTick() - start_time) > 1000)
 8004778:	f002 fdd8 	bl	800732c <HAL_GetTick>
 800477c:	1b80      	subs	r0, r0, r6
 800477e:	4550      	cmp	r0, sl
 8004780:	d9a2      	bls.n	80046c8 <readRam+0x3d0>
            print_error(__func__, __LINE__);
 8004782:	480e      	ldr	r0, [pc, #56]	@ (80047bc <readRam+0x4c4>)
 8004784:	490f      	ldr	r1, [pc, #60]	@ (80047c4 <readRam+0x4cc>)
 8004786:	f000 fdbb 	bl	8005300 <print_error>
 800478a:	e79d      	b.n	80046c8 <readRam+0x3d0>
        if ((HAL_GetTick() - start_time) > 1000)
 800478c:	f002 fdce 	bl	800732c <HAL_GetTick>
 8004790:	1b80      	subs	r0, r0, r6
 8004792:	4550      	cmp	r0, sl
 8004794:	d9b6      	bls.n	8004704 <readRam+0x40c>
            print_error(__func__, __LINE__);
 8004796:	4809      	ldr	r0, [pc, #36]	@ (80047bc <readRam+0x4c4>)
 8004798:	490a      	ldr	r1, [pc, #40]	@ (80047c4 <readRam+0x4cc>)
 800479a:	f000 fdb1 	bl	8005300 <print_error>
 800479e:	e7b1      	b.n	8004704 <readRam+0x40c>
 80047a0:	9f05      	ldr	r7, [sp, #20]
 80047a2:	f387 8810 	msr	PRIMASK, r7
}
 80047a6:	2001      	movs	r0, #1
 80047a8:	b007      	add	sp, #28
 80047aa:	bcf0      	pop	{r4, r5, r6, r7}
 80047ac:	46bb      	mov	fp, r7
 80047ae:	46b2      	mov	sl, r6
 80047b0:	46a9      	mov	r9, r5
 80047b2:	46a0      	mov	r8, r4
 80047b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047b6:	46c0      	nop			@ (mov r8, r8)
 80047b8:	50000400 	.word	0x50000400
 80047bc:	0800ea80 	.word	0x0800ea80
 80047c0:	00000285 	.word	0x00000285
 80047c4:	0000027a 	.word	0x0000027a

080047c8 <writeRam>:
{
 80047c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ca:	46de      	mov	lr, fp
 80047cc:	4657      	mov	r7, sl
 80047ce:	464e      	mov	r6, r9
 80047d0:	4645      	mov	r5, r8
 80047d2:	b5e0      	push	{r5, r6, r7, lr}
 80047d4:	b087      	sub	sp, #28
 80047d6:	9101      	str	r1, [sp, #4]
    while (dataLen > 0)
 80047d8:	2a00      	cmp	r2, #0
 80047da:	d100      	bne.n	80047de <writeRam+0x16>
 80047dc:	e245      	b.n	8004c6a <writeRam+0x4a2>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80047de:	2302      	movs	r3, #2
 80047e0:	4698      	mov	r8, r3
        if ((HAL_GetTick() - start_time) > 1000)
 80047e2:	23fa      	movs	r3, #250	@ 0xfa
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4699      	mov	r9, r3
 80047e8:	0006      	movs	r6, r0
 80047ea:	0013      	movs	r3, r2
 80047ec:	4cb2      	ldr	r4, [pc, #712]	@ (8004ab8 <writeRam+0x2f0>)
 80047ee:	9203      	str	r2, [sp, #12]
        if (count > 31)
 80047f0:	9302      	str	r3, [sp, #8]
 80047f2:	2b1f      	cmp	r3, #31
 80047f4:	d901      	bls.n	80047fa <writeRam+0x32>
 80047f6:	231f      	movs	r3, #31
 80047f8:	9302      	str	r3, [sp, #8]
        if ((ramAddr < 128) && ((ramAddr + count) > 128))
 80047fa:	9b02      	ldr	r3, [sp, #8]
 80047fc:	469c      	mov	ip, r3
 80047fe:	44b4      	add	ip, r6
 8004800:	4663      	mov	r3, ip
 8004802:	9304      	str	r3, [sp, #16]
 8004804:	2e7f      	cmp	r6, #127	@ 0x7f
 8004806:	d900      	bls.n	800480a <writeRam+0x42>
 8004808:	e160      	b.n	8004acc <writeRam+0x304>
 800480a:	2b80      	cmp	r3, #128	@ 0x80
 800480c:	d904      	bls.n	8004818 <writeRam+0x50>
            count = 128 - ramAddr;
 800480e:	2380      	movs	r3, #128	@ 0x80
 8004810:	1b9b      	subs	r3, r3, r6
 8004812:	9302      	str	r3, [sp, #8]
 8004814:	2380      	movs	r3, #128	@ 0x80
 8004816:	9304      	str	r3, [sp, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004818:	f3ef 8a10 	mrs	sl, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800481c:	b672      	cpsid	i
    RTC_L();
 800481e:	2280      	movs	r2, #128	@ 0x80
 8004820:	4ba6      	ldr	r3, [pc, #664]	@ (8004abc <writeRam+0x2f4>)
 8004822:	05d2      	lsls	r2, r2, #23
 8004824:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 8004826:	f002 fd81 	bl	800732c <HAL_GetTick>
 800482a:	0005      	movs	r5, r0
 800482c:	4642      	mov	r2, r8
 800482e:	68a3      	ldr	r3, [r4, #8]
 8004830:	421a      	tst	r2, r3
 8004832:	d100      	bne.n	8004836 <writeRam+0x6e>
 8004834:	e0ff      	b.n	8004a36 <writeRam+0x26e>
  *spidr = TxData;
 8004836:	233f      	movs	r3, #63	@ 0x3f
 8004838:	7323      	strb	r3, [r4, #12]
    start_time = HAL_GetTick();
 800483a:	f002 fd77 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800483e:	2301      	movs	r3, #1
 8004840:	0005      	movs	r5, r0
 8004842:	469b      	mov	fp, r3
 8004844:	465a      	mov	r2, fp
 8004846:	68a3      	ldr	r3, [r4, #8]
 8004848:	421a      	tst	r2, r3
 800484a:	d10c      	bne.n	8004866 <writeRam+0x9e>
        if ((HAL_GetTick() - start_time) > 1000)
 800484c:	f002 fd6e 	bl	800732c <HAL_GetTick>
 8004850:	1b40      	subs	r0, r0, r5
 8004852:	4548      	cmp	r0, r9
 8004854:	d9f6      	bls.n	8004844 <writeRam+0x7c>
            print_error(__func__, __LINE__);
 8004856:	489a      	ldr	r0, [pc, #616]	@ (8004ac0 <writeRam+0x2f8>)
 8004858:	499a      	ldr	r1, [pc, #616]	@ (8004ac4 <writeRam+0x2fc>)
 800485a:	f000 fd51 	bl	8005300 <print_error>
 800485e:	465a      	mov	r2, fp
 8004860:	68a3      	ldr	r3, [r4, #8]
 8004862:	421a      	tst	r2, r3
 8004864:	d0f2      	beq.n	800484c <writeRam+0x84>
  return (*((__IO uint8_t *)&SPIx->DR));
 8004866:	7b23      	ldrb	r3, [r4, #12]
    uint32_t start_time = HAL_GetTick();
 8004868:	f002 fd60 	bl	800732c <HAL_GetTick>
 800486c:	0005      	movs	r5, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800486e:	4642      	mov	r2, r8
 8004870:	68a3      	ldr	r3, [r4, #8]
 8004872:	421a      	tst	r2, r3
 8004874:	d100      	bne.n	8004878 <writeRam+0xb0>
 8004876:	e0e9      	b.n	8004a4c <writeRam+0x284>
  *spidr = TxData;
 8004878:	2300      	movs	r3, #0
 800487a:	7323      	strb	r3, [r4, #12]
    start_time = HAL_GetTick();
 800487c:	f002 fd56 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8004880:	2301      	movs	r3, #1
 8004882:	0005      	movs	r5, r0
 8004884:	469b      	mov	fp, r3
 8004886:	465a      	mov	r2, fp
 8004888:	68a3      	ldr	r3, [r4, #8]
 800488a:	421a      	tst	r2, r3
 800488c:	d10c      	bne.n	80048a8 <writeRam+0xe0>
        if ((HAL_GetTick() - start_time) > 1000)
 800488e:	f002 fd4d 	bl	800732c <HAL_GetTick>
 8004892:	1b40      	subs	r0, r0, r5
 8004894:	4548      	cmp	r0, r9
 8004896:	d9f6      	bls.n	8004886 <writeRam+0xbe>
            print_error(__func__, __LINE__);
 8004898:	4889      	ldr	r0, [pc, #548]	@ (8004ac0 <writeRam+0x2f8>)
 800489a:	498a      	ldr	r1, [pc, #552]	@ (8004ac4 <writeRam+0x2fc>)
 800489c:	f000 fd30 	bl	8005300 <print_error>
 80048a0:	465a      	mov	r2, fp
 80048a2:	68a3      	ldr	r3, [r4, #8]
 80048a4:	421a      	tst	r2, r3
 80048a6:	d0f2      	beq.n	800488e <writeRam+0xc6>
    RTC_H();
 80048a8:	2180      	movs	r1, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 80048aa:	7b23      	ldrb	r3, [r4, #12]
 80048ac:	4a83      	ldr	r2, [pc, #524]	@ (8004abc <writeRam+0x2f4>)
 80048ae:	01c9      	lsls	r1, r1, #7
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	6191      	str	r1, [r2, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b4:	f38a 8810 	msr	PRIMASK, sl
    uint8_t newValue = (value & andValue) | orValue;
 80048b8:	2204      	movs	r2, #4
 80048ba:	4393      	bics	r3, r2
 80048bc:	001f      	movs	r7, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80048be:	f3ef 8a10 	mrs	sl, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80048c2:	b672      	cpsid	i
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 80048c4:	2340      	movs	r3, #64	@ 0x40
 80048c6:	6822      	ldr	r2, [r4, #0]
 80048c8:	4213      	tst	r3, r2
 80048ca:	d102      	bne.n	80048d2 <writeRam+0x10a>
        SPI1->CR1 |= SPI_CR1_SPE;
 80048cc:	6822      	ldr	r2, [r4, #0]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	6023      	str	r3, [r4, #0]
        RTC_L();
 80048d2:	2280      	movs	r2, #128	@ 0x80
 80048d4:	4b79      	ldr	r3, [pc, #484]	@ (8004abc <writeRam+0x2f4>)
 80048d6:	05d2      	lsls	r2, r2, #23
 80048d8:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 80048da:	f002 fd27 	bl	800732c <HAL_GetTick>
 80048de:	0005      	movs	r5, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80048e0:	4642      	mov	r2, r8
 80048e2:	68a3      	ldr	r3, [r4, #8]
 80048e4:	421a      	tst	r2, r3
 80048e6:	d100      	bne.n	80048ea <writeRam+0x122>
 80048e8:	e0bb      	b.n	8004a62 <writeRam+0x29a>
  *spidr = TxData;
 80048ea:	23bf      	movs	r3, #191	@ 0xbf
 80048ec:	7323      	strb	r3, [r4, #12]
    start_time = HAL_GetTick();
 80048ee:	f002 fd1d 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80048f2:	2301      	movs	r3, #1
 80048f4:	0005      	movs	r5, r0
 80048f6:	469b      	mov	fp, r3
 80048f8:	465a      	mov	r2, fp
 80048fa:	68a3      	ldr	r3, [r4, #8]
 80048fc:	421a      	tst	r2, r3
 80048fe:	d10c      	bne.n	800491a <writeRam+0x152>
        if ((HAL_GetTick() - start_time) > 1000)
 8004900:	f002 fd14 	bl	800732c <HAL_GetTick>
 8004904:	1b40      	subs	r0, r0, r5
 8004906:	4548      	cmp	r0, r9
 8004908:	d9f6      	bls.n	80048f8 <writeRam+0x130>
            print_error(__func__, __LINE__);
 800490a:	486d      	ldr	r0, [pc, #436]	@ (8004ac0 <writeRam+0x2f8>)
 800490c:	496d      	ldr	r1, [pc, #436]	@ (8004ac4 <writeRam+0x2fc>)
 800490e:	f000 fcf7 	bl	8005300 <print_error>
 8004912:	465a      	mov	r2, fp
 8004914:	68a3      	ldr	r3, [r4, #8]
 8004916:	421a      	tst	r2, r3
 8004918:	d0f2      	beq.n	8004900 <writeRam+0x138>
  return (*((__IO uint8_t *)&SPIx->DR));
 800491a:	7b23      	ldrb	r3, [r4, #12]
    uint32_t start_time = HAL_GetTick();
 800491c:	f002 fd06 	bl	800732c <HAL_GetTick>
 8004920:	0005      	movs	r5, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8004922:	4642      	mov	r2, r8
 8004924:	68a3      	ldr	r3, [r4, #8]
 8004926:	421a      	tst	r2, r3
 8004928:	d100      	bne.n	800492c <writeRam+0x164>
 800492a:	e0a5      	b.n	8004a78 <writeRam+0x2b0>
  *spidr = TxData;
 800492c:	7327      	strb	r7, [r4, #12]
    start_time = HAL_GetTick();
 800492e:	f002 fcfd 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8004932:	2301      	movs	r3, #1
 8004934:	0005      	movs	r5, r0
 8004936:	469b      	mov	fp, r3
 8004938:	465a      	mov	r2, fp
 800493a:	68a3      	ldr	r3, [r4, #8]
 800493c:	421a      	tst	r2, r3
 800493e:	d10c      	bne.n	800495a <writeRam+0x192>
        if ((HAL_GetTick() - start_time) > 1000)
 8004940:	f002 fcf4 	bl	800732c <HAL_GetTick>
 8004944:	1b40      	subs	r0, r0, r5
 8004946:	4548      	cmp	r0, r9
 8004948:	d9f6      	bls.n	8004938 <writeRam+0x170>
            print_error(__func__, __LINE__);
 800494a:	485d      	ldr	r0, [pc, #372]	@ (8004ac0 <writeRam+0x2f8>)
 800494c:	495d      	ldr	r1, [pc, #372]	@ (8004ac4 <writeRam+0x2fc>)
 800494e:	f000 fcd7 	bl	8005300 <print_error>
 8004952:	465a      	mov	r2, fp
 8004954:	68a3      	ldr	r3, [r4, #8]
 8004956:	421a      	tst	r2, r3
 8004958:	d0f2      	beq.n	8004940 <writeRam+0x178>
        RTC_H();
 800495a:	2280      	movs	r2, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 800495c:	7b23      	ldrb	r3, [r4, #12]
 800495e:	4b57      	ldr	r3, [pc, #348]	@ (8004abc <writeRam+0x2f4>)
 8004960:	01d2      	lsls	r2, r2, #7
 8004962:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004964:	f38a 8810 	msr	PRIMASK, sl
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count);
 8004968:	466b      	mov	r3, sp
 800496a:	257f      	movs	r5, #127	@ 0x7f
 800496c:	7a1b      	ldrb	r3, [r3, #8]
 800496e:	4035      	ands	r5, r6
 8004970:	3d80      	subs	r5, #128	@ 0x80
 8004972:	469a      	mov	sl, r3
 8004974:	b2ed      	uxtb	r5, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004976:	f3ef 8b10 	mrs	fp, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800497a:	b672      	cpsid	i
        RTC_L();
 800497c:	2280      	movs	r2, #128	@ 0x80
 800497e:	4b4f      	ldr	r3, [pc, #316]	@ (8004abc <writeRam+0x2f4>)
 8004980:	05d2      	lsls	r2, r2, #23
 8004982:	619a      	str	r2, [r3, #24]

    uint32_t primask_bit = utils_enter_critical_section();
    spi_select_slave(0);

    uint8_t i = 0;
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 8004984:	2340      	movs	r3, #64	@ 0x40
 8004986:	6822      	ldr	r2, [r4, #0]
 8004988:	4213      	tst	r3, r2
 800498a:	d102      	bne.n	8004992 <writeRam+0x1ca>
    {
        SPI1->CR1 |= SPI_CR1_SPE;
 800498c:	6822      	ldr	r2, [r4, #0]
 800498e:	4313      	orrs	r3, r2
 8004990:	6023      	str	r3, [r4, #0]
    uint32_t start_time = HAL_GetTick();
 8004992:	f002 fccb 	bl	800732c <HAL_GetTick>
 8004996:	0006      	movs	r6, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8004998:	4642      	mov	r2, r8
 800499a:	68a3      	ldr	r3, [r4, #8]
 800499c:	421a      	tst	r2, r3
 800499e:	d076      	beq.n	8004a8e <writeRam+0x2c6>
  *spidr = TxData;
 80049a0:	7325      	strb	r5, [r4, #12]
    start_time = HAL_GetTick();
 80049a2:	f002 fcc3 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80049a6:	2601      	movs	r6, #1
 80049a8:	0005      	movs	r5, r0
 80049aa:	68a3      	ldr	r3, [r4, #8]
 80049ac:	421e      	tst	r6, r3
 80049ae:	d10b      	bne.n	80049c8 <writeRam+0x200>
        if ((HAL_GetTick() - start_time) > 1000)
 80049b0:	f002 fcbc 	bl	800732c <HAL_GetTick>
 80049b4:	1b40      	subs	r0, r0, r5
 80049b6:	4548      	cmp	r0, r9
 80049b8:	d9f7      	bls.n	80049aa <writeRam+0x1e2>
            print_error(__func__, __LINE__);
 80049ba:	4841      	ldr	r0, [pc, #260]	@ (8004ac0 <writeRam+0x2f8>)
 80049bc:	4941      	ldr	r1, [pc, #260]	@ (8004ac4 <writeRam+0x2fc>)
 80049be:	f000 fc9f 	bl	8005300 <print_error>
 80049c2:	68a3      	ldr	r3, [r4, #8]
 80049c4:	421e      	tst	r6, r3
 80049c6:	d0f3      	beq.n	80049b0 <writeRam+0x1e8>
  return (*((__IO uint8_t *)&SPIx->DR));
 80049c8:	2500      	movs	r5, #0
 80049ca:	7b23      	ldrb	r3, [r4, #12]
    }

    SPI1_SendByte(address);
    while (i < length)
    {
        SPI1_SendByte(buf[i++]); // Send Data to write
 80049cc:	9b01      	ldr	r3, [sp, #4]
 80049ce:	5d5f      	ldrb	r7, [r3, r5]
    uint32_t start_time = HAL_GetTick();
 80049d0:	f002 fcac 	bl	800732c <HAL_GetTick>
 80049d4:	0006      	movs	r6, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80049d6:	4642      	mov	r2, r8
 80049d8:	68a3      	ldr	r3, [r4, #8]
 80049da:	421a      	tst	r2, r3
 80049dc:	d062      	beq.n	8004aa4 <writeRam+0x2dc>
  *spidr = TxData;
 80049de:	7327      	strb	r7, [r4, #12]
    start_time = HAL_GetTick();
 80049e0:	f002 fca4 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80049e4:	2701      	movs	r7, #1
 80049e6:	0006      	movs	r6, r0
 80049e8:	68a3      	ldr	r3, [r4, #8]
 80049ea:	421f      	tst	r7, r3
 80049ec:	d10b      	bne.n	8004a06 <writeRam+0x23e>
        if ((HAL_GetTick() - start_time) > 1000)
 80049ee:	f002 fc9d 	bl	800732c <HAL_GetTick>
 80049f2:	1b80      	subs	r0, r0, r6
 80049f4:	4548      	cmp	r0, r9
 80049f6:	d9f7      	bls.n	80049e8 <writeRam+0x220>
            print_error(__func__, __LINE__);
 80049f8:	4831      	ldr	r0, [pc, #196]	@ (8004ac0 <writeRam+0x2f8>)
 80049fa:	4932      	ldr	r1, [pc, #200]	@ (8004ac4 <writeRam+0x2fc>)
 80049fc:	f000 fc80 	bl	8005300 <print_error>
 8004a00:	68a3      	ldr	r3, [r4, #8]
 8004a02:	421f      	tst	r7, r3
 8004a04:	d0f3      	beq.n	80049ee <writeRam+0x226>
    while (i < length)
 8004a06:	3501      	adds	r5, #1
  return (*((__IO uint8_t *)&SPIx->DR));
 8004a08:	7b23      	ldrb	r3, [r4, #12]
 8004a0a:	b2eb      	uxtb	r3, r5
 8004a0c:	459a      	cmp	sl, r3
 8004a0e:	d8dd      	bhi.n	80049cc <writeRam+0x204>
        RTC_H();
 8004a10:	2280      	movs	r2, #128	@ 0x80
 8004a12:	4b2a      	ldr	r3, [pc, #168]	@ (8004abc <writeRam+0x2f4>)
 8004a14:	01d2      	lsls	r2, r2, #7
 8004a16:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a18:	f38b 8810 	msr	PRIMASK, fp
        dataLen -= count;
 8004a1c:	9a02      	ldr	r2, [sp, #8]
 8004a1e:	9b03      	ldr	r3, [sp, #12]
        data += count;
 8004a20:	4694      	mov	ip, r2
 8004a22:	9901      	ldr	r1, [sp, #4]
        dataLen -= count;
 8004a24:	1a9b      	subs	r3, r3, r2
        data += count;
 8004a26:	4461      	add	r1, ip
        dataLen -= count;
 8004a28:	9303      	str	r3, [sp, #12]
        data += count;
 8004a2a:	9101      	str	r1, [sp, #4]
    while (dataLen > 0)
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d100      	bne.n	8004a32 <writeRam+0x26a>
 8004a30:	e11b      	b.n	8004c6a <writeRam+0x4a2>
        ramAddr += count;
 8004a32:	9e04      	ldr	r6, [sp, #16]
 8004a34:	e6dc      	b.n	80047f0 <writeRam+0x28>
        if ((HAL_GetTick() - start_time) > 1000)
 8004a36:	f002 fc79 	bl	800732c <HAL_GetTick>
 8004a3a:	1b40      	subs	r0, r0, r5
 8004a3c:	4548      	cmp	r0, r9
 8004a3e:	d800      	bhi.n	8004a42 <writeRam+0x27a>
 8004a40:	e6f4      	b.n	800482c <writeRam+0x64>
            print_error(__func__, __LINE__);
 8004a42:	481f      	ldr	r0, [pc, #124]	@ (8004ac0 <writeRam+0x2f8>)
 8004a44:	4920      	ldr	r1, [pc, #128]	@ (8004ac8 <writeRam+0x300>)
 8004a46:	f000 fc5b 	bl	8005300 <print_error>
 8004a4a:	e6ef      	b.n	800482c <writeRam+0x64>
        if ((HAL_GetTick() - start_time) > 1000)
 8004a4c:	f002 fc6e 	bl	800732c <HAL_GetTick>
 8004a50:	1b40      	subs	r0, r0, r5
 8004a52:	4548      	cmp	r0, r9
 8004a54:	d800      	bhi.n	8004a58 <writeRam+0x290>
 8004a56:	e70a      	b.n	800486e <writeRam+0xa6>
            print_error(__func__, __LINE__);
 8004a58:	4819      	ldr	r0, [pc, #100]	@ (8004ac0 <writeRam+0x2f8>)
 8004a5a:	491b      	ldr	r1, [pc, #108]	@ (8004ac8 <writeRam+0x300>)
 8004a5c:	f000 fc50 	bl	8005300 <print_error>
 8004a60:	e705      	b.n	800486e <writeRam+0xa6>
        if ((HAL_GetTick() - start_time) > 1000)
 8004a62:	f002 fc63 	bl	800732c <HAL_GetTick>
 8004a66:	1b40      	subs	r0, r0, r5
 8004a68:	4548      	cmp	r0, r9
 8004a6a:	d800      	bhi.n	8004a6e <writeRam+0x2a6>
 8004a6c:	e738      	b.n	80048e0 <writeRam+0x118>
            print_error(__func__, __LINE__);
 8004a6e:	4814      	ldr	r0, [pc, #80]	@ (8004ac0 <writeRam+0x2f8>)
 8004a70:	4915      	ldr	r1, [pc, #84]	@ (8004ac8 <writeRam+0x300>)
 8004a72:	f000 fc45 	bl	8005300 <print_error>
 8004a76:	e733      	b.n	80048e0 <writeRam+0x118>
        if ((HAL_GetTick() - start_time) > 1000)
 8004a78:	f002 fc58 	bl	800732c <HAL_GetTick>
 8004a7c:	1b40      	subs	r0, r0, r5
 8004a7e:	4548      	cmp	r0, r9
 8004a80:	d800      	bhi.n	8004a84 <writeRam+0x2bc>
 8004a82:	e74e      	b.n	8004922 <writeRam+0x15a>
            print_error(__func__, __LINE__);
 8004a84:	480e      	ldr	r0, [pc, #56]	@ (8004ac0 <writeRam+0x2f8>)
 8004a86:	4910      	ldr	r1, [pc, #64]	@ (8004ac8 <writeRam+0x300>)
 8004a88:	f000 fc3a 	bl	8005300 <print_error>
 8004a8c:	e749      	b.n	8004922 <writeRam+0x15a>
        if ((HAL_GetTick() - start_time) > 1000)
 8004a8e:	f002 fc4d 	bl	800732c <HAL_GetTick>
 8004a92:	1b80      	subs	r0, r0, r6
 8004a94:	4548      	cmp	r0, r9
 8004a96:	d800      	bhi.n	8004a9a <writeRam+0x2d2>
 8004a98:	e77e      	b.n	8004998 <writeRam+0x1d0>
            print_error(__func__, __LINE__);
 8004a9a:	4809      	ldr	r0, [pc, #36]	@ (8004ac0 <writeRam+0x2f8>)
 8004a9c:	490a      	ldr	r1, [pc, #40]	@ (8004ac8 <writeRam+0x300>)
 8004a9e:	f000 fc2f 	bl	8005300 <print_error>
 8004aa2:	e779      	b.n	8004998 <writeRam+0x1d0>
        if ((HAL_GetTick() - start_time) > 1000)
 8004aa4:	f002 fc42 	bl	800732c <HAL_GetTick>
 8004aa8:	1b80      	subs	r0, r0, r6
 8004aaa:	4548      	cmp	r0, r9
 8004aac:	d993      	bls.n	80049d6 <writeRam+0x20e>
            print_error(__func__, __LINE__);
 8004aae:	4804      	ldr	r0, [pc, #16]	@ (8004ac0 <writeRam+0x2f8>)
 8004ab0:	4905      	ldr	r1, [pc, #20]	@ (8004ac8 <writeRam+0x300>)
 8004ab2:	f000 fc25 	bl	8005300 <print_error>
 8004ab6:	e78e      	b.n	80049d6 <writeRam+0x20e>
 8004ab8:	40013000 	.word	0x40013000
 8004abc:	50000400 	.word	0x50000400
 8004ac0:	0800ea80 	.word	0x0800ea80
 8004ac4:	00000285 	.word	0x00000285
 8004ac8:	0000027a 	.word	0x0000027a
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004acc:	f3ef 8a10 	mrs	sl, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004ad0:	b672      	cpsid	i
    RTC_L();
 8004ad2:	2280      	movs	r2, #128	@ 0x80
 8004ad4:	4b69      	ldr	r3, [pc, #420]	@ (8004c7c <writeRam+0x4b4>)
 8004ad6:	05d2      	lsls	r2, r2, #23
 8004ad8:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 8004ada:	f002 fc27 	bl	800732c <HAL_GetTick>
 8004ade:	0005      	movs	r5, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8004ae0:	4642      	mov	r2, r8
 8004ae2:	68a3      	ldr	r3, [r4, #8]
 8004ae4:	421a      	tst	r2, r3
 8004ae6:	d100      	bne.n	8004aea <writeRam+0x322>
 8004ae8:	e095      	b.n	8004c16 <writeRam+0x44e>
  *spidr = TxData;
 8004aea:	233f      	movs	r3, #63	@ 0x3f
 8004aec:	7323      	strb	r3, [r4, #12]
    start_time = HAL_GetTick();
 8004aee:	f002 fc1d 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8004af2:	2301      	movs	r3, #1
 8004af4:	0005      	movs	r5, r0
 8004af6:	469b      	mov	fp, r3
 8004af8:	465a      	mov	r2, fp
 8004afa:	68a3      	ldr	r3, [r4, #8]
 8004afc:	421a      	tst	r2, r3
 8004afe:	d10c      	bne.n	8004b1a <writeRam+0x352>
        if ((HAL_GetTick() - start_time) > 1000)
 8004b00:	f002 fc14 	bl	800732c <HAL_GetTick>
 8004b04:	1b40      	subs	r0, r0, r5
 8004b06:	4548      	cmp	r0, r9
 8004b08:	d9f6      	bls.n	8004af8 <writeRam+0x330>
            print_error(__func__, __LINE__);
 8004b0a:	485d      	ldr	r0, [pc, #372]	@ (8004c80 <writeRam+0x4b8>)
 8004b0c:	495d      	ldr	r1, [pc, #372]	@ (8004c84 <writeRam+0x4bc>)
 8004b0e:	f000 fbf7 	bl	8005300 <print_error>
 8004b12:	465a      	mov	r2, fp
 8004b14:	68a3      	ldr	r3, [r4, #8]
 8004b16:	421a      	tst	r2, r3
 8004b18:	d0f2      	beq.n	8004b00 <writeRam+0x338>
  return (*((__IO uint8_t *)&SPIx->DR));
 8004b1a:	7b23      	ldrb	r3, [r4, #12]
    uint32_t start_time = HAL_GetTick();
 8004b1c:	f002 fc06 	bl	800732c <HAL_GetTick>
 8004b20:	0005      	movs	r5, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8004b22:	4642      	mov	r2, r8
 8004b24:	68a3      	ldr	r3, [r4, #8]
 8004b26:	421a      	tst	r2, r3
 8004b28:	d100      	bne.n	8004b2c <writeRam+0x364>
 8004b2a:	e07f      	b.n	8004c2c <writeRam+0x464>
  *spidr = TxData;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	7323      	strb	r3, [r4, #12]
    start_time = HAL_GetTick();
 8004b30:	f002 fbfc 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8004b34:	2301      	movs	r3, #1
 8004b36:	0005      	movs	r5, r0
 8004b38:	469b      	mov	fp, r3
 8004b3a:	465a      	mov	r2, fp
 8004b3c:	68a3      	ldr	r3, [r4, #8]
 8004b3e:	421a      	tst	r2, r3
 8004b40:	d10c      	bne.n	8004b5c <writeRam+0x394>
        if ((HAL_GetTick() - start_time) > 1000)
 8004b42:	f002 fbf3 	bl	800732c <HAL_GetTick>
 8004b46:	1b40      	subs	r0, r0, r5
 8004b48:	4548      	cmp	r0, r9
 8004b4a:	d9f6      	bls.n	8004b3a <writeRam+0x372>
            print_error(__func__, __LINE__);
 8004b4c:	484c      	ldr	r0, [pc, #304]	@ (8004c80 <writeRam+0x4b8>)
 8004b4e:	494d      	ldr	r1, [pc, #308]	@ (8004c84 <writeRam+0x4bc>)
 8004b50:	f000 fbd6 	bl	8005300 <print_error>
 8004b54:	465a      	mov	r2, fp
 8004b56:	68a3      	ldr	r3, [r4, #8]
 8004b58:	421a      	tst	r2, r3
 8004b5a:	d0f2      	beq.n	8004b42 <writeRam+0x37a>
    RTC_H();
 8004b5c:	2180      	movs	r1, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 8004b5e:	7b23      	ldrb	r3, [r4, #12]
 8004b60:	4a46      	ldr	r2, [pc, #280]	@ (8004c7c <writeRam+0x4b4>)
 8004b62:	01c9      	lsls	r1, r1, #7
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	6191      	str	r1, [r2, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b68:	f38a 8810 	msr	PRIMASK, sl
    uint8_t newValue = (value & andValue) | orValue;
 8004b6c:	2204      	movs	r2, #4
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	9305      	str	r3, [sp, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004b72:	f3ef 8b10 	mrs	fp, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004b76:	b672      	cpsid	i
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 8004b78:	2340      	movs	r3, #64	@ 0x40
 8004b7a:	6822      	ldr	r2, [r4, #0]
 8004b7c:	4213      	tst	r3, r2
 8004b7e:	d102      	bne.n	8004b86 <writeRam+0x3be>
        SPI1->CR1 |= SPI_CR1_SPE;
 8004b80:	6822      	ldr	r2, [r4, #0]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	6023      	str	r3, [r4, #0]
        RTC_L();
 8004b86:	2280      	movs	r2, #128	@ 0x80
 8004b88:	4b3c      	ldr	r3, [pc, #240]	@ (8004c7c <writeRam+0x4b4>)
 8004b8a:	05d2      	lsls	r2, r2, #23
 8004b8c:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 8004b8e:	f002 fbcd 	bl	800732c <HAL_GetTick>
 8004b92:	0005      	movs	r5, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8004b94:	4642      	mov	r2, r8
 8004b96:	68a3      	ldr	r3, [r4, #8]
 8004b98:	421a      	tst	r2, r3
 8004b9a:	d052      	beq.n	8004c42 <writeRam+0x47a>
  *spidr = TxData;
 8004b9c:	23bf      	movs	r3, #191	@ 0xbf
 8004b9e:	7323      	strb	r3, [r4, #12]
    start_time = HAL_GetTick();
 8004ba0:	f002 fbc4 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8004ba4:	2501      	movs	r5, #1
 8004ba6:	0007      	movs	r7, r0
 8004ba8:	68a3      	ldr	r3, [r4, #8]
 8004baa:	421d      	tst	r5, r3
 8004bac:	d10b      	bne.n	8004bc6 <writeRam+0x3fe>
        if ((HAL_GetTick() - start_time) > 1000)
 8004bae:	f002 fbbd 	bl	800732c <HAL_GetTick>
 8004bb2:	1bc0      	subs	r0, r0, r7
 8004bb4:	4548      	cmp	r0, r9
 8004bb6:	d9f7      	bls.n	8004ba8 <writeRam+0x3e0>
            print_error(__func__, __LINE__);
 8004bb8:	4831      	ldr	r0, [pc, #196]	@ (8004c80 <writeRam+0x4b8>)
 8004bba:	4932      	ldr	r1, [pc, #200]	@ (8004c84 <writeRam+0x4bc>)
 8004bbc:	f000 fba0 	bl	8005300 <print_error>
 8004bc0:	68a3      	ldr	r3, [r4, #8]
 8004bc2:	421d      	tst	r5, r3
 8004bc4:	d0f3      	beq.n	8004bae <writeRam+0x3e6>
  return (*((__IO uint8_t *)&SPIx->DR));
 8004bc6:	7b23      	ldrb	r3, [r4, #12]
    uint32_t start_time = HAL_GetTick();
 8004bc8:	f002 fbb0 	bl	800732c <HAL_GetTick>
 8004bcc:	0005      	movs	r5, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8004bce:	4642      	mov	r2, r8
 8004bd0:	68a3      	ldr	r3, [r4, #8]
 8004bd2:	421a      	tst	r2, r3
 8004bd4:	d03f      	beq.n	8004c56 <writeRam+0x48e>
  *spidr = TxData;
 8004bd6:	9b05      	ldr	r3, [sp, #20]
 8004bd8:	7323      	strb	r3, [r4, #12]
    start_time = HAL_GetTick();
 8004bda:	f002 fba7 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8004bde:	2301      	movs	r3, #1
 8004be0:	0005      	movs	r5, r0
 8004be2:	469a      	mov	sl, r3
 8004be4:	4652      	mov	r2, sl
 8004be6:	68a3      	ldr	r3, [r4, #8]
 8004be8:	421a      	tst	r2, r3
 8004bea:	d10c      	bne.n	8004c06 <writeRam+0x43e>
        if ((HAL_GetTick() - start_time) > 1000)
 8004bec:	f002 fb9e 	bl	800732c <HAL_GetTick>
 8004bf0:	1b40      	subs	r0, r0, r5
 8004bf2:	4548      	cmp	r0, r9
 8004bf4:	d9f6      	bls.n	8004be4 <writeRam+0x41c>
            print_error(__func__, __LINE__);
 8004bf6:	4822      	ldr	r0, [pc, #136]	@ (8004c80 <writeRam+0x4b8>)
 8004bf8:	4922      	ldr	r1, [pc, #136]	@ (8004c84 <writeRam+0x4bc>)
 8004bfa:	f000 fb81 	bl	8005300 <print_error>
 8004bfe:	4652      	mov	r2, sl
 8004c00:	68a3      	ldr	r3, [r4, #8]
 8004c02:	421a      	tst	r2, r3
 8004c04:	d0f2      	beq.n	8004bec <writeRam+0x424>
        RTC_H();
 8004c06:	2280      	movs	r2, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 8004c08:	7b23      	ldrb	r3, [r4, #12]
 8004c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8004c7c <writeRam+0x4b4>)
 8004c0c:	01d2      	lsls	r2, r2, #7
 8004c0e:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c10:	f38b 8810 	msr	PRIMASK, fp
    return maskRegister(regAddr, 0xff, bitMask, lock);
 8004c14:	e6a8      	b.n	8004968 <writeRam+0x1a0>
        if ((HAL_GetTick() - start_time) > 1000)
 8004c16:	f002 fb89 	bl	800732c <HAL_GetTick>
 8004c1a:	1b40      	subs	r0, r0, r5
 8004c1c:	4548      	cmp	r0, r9
 8004c1e:	d800      	bhi.n	8004c22 <writeRam+0x45a>
 8004c20:	e75e      	b.n	8004ae0 <writeRam+0x318>
            print_error(__func__, __LINE__);
 8004c22:	4817      	ldr	r0, [pc, #92]	@ (8004c80 <writeRam+0x4b8>)
 8004c24:	4918      	ldr	r1, [pc, #96]	@ (8004c88 <writeRam+0x4c0>)
 8004c26:	f000 fb6b 	bl	8005300 <print_error>
 8004c2a:	e759      	b.n	8004ae0 <writeRam+0x318>
        if ((HAL_GetTick() - start_time) > 1000)
 8004c2c:	f002 fb7e 	bl	800732c <HAL_GetTick>
 8004c30:	1b40      	subs	r0, r0, r5
 8004c32:	4548      	cmp	r0, r9
 8004c34:	d800      	bhi.n	8004c38 <writeRam+0x470>
 8004c36:	e774      	b.n	8004b22 <writeRam+0x35a>
            print_error(__func__, __LINE__);
 8004c38:	4811      	ldr	r0, [pc, #68]	@ (8004c80 <writeRam+0x4b8>)
 8004c3a:	4913      	ldr	r1, [pc, #76]	@ (8004c88 <writeRam+0x4c0>)
 8004c3c:	f000 fb60 	bl	8005300 <print_error>
 8004c40:	e76f      	b.n	8004b22 <writeRam+0x35a>
        if ((HAL_GetTick() - start_time) > 1000)
 8004c42:	f002 fb73 	bl	800732c <HAL_GetTick>
 8004c46:	1b40      	subs	r0, r0, r5
 8004c48:	4548      	cmp	r0, r9
 8004c4a:	d9a3      	bls.n	8004b94 <writeRam+0x3cc>
            print_error(__func__, __LINE__);
 8004c4c:	480c      	ldr	r0, [pc, #48]	@ (8004c80 <writeRam+0x4b8>)
 8004c4e:	490e      	ldr	r1, [pc, #56]	@ (8004c88 <writeRam+0x4c0>)
 8004c50:	f000 fb56 	bl	8005300 <print_error>
 8004c54:	e79e      	b.n	8004b94 <writeRam+0x3cc>
        if ((HAL_GetTick() - start_time) > 1000)
 8004c56:	f002 fb69 	bl	800732c <HAL_GetTick>
 8004c5a:	1b40      	subs	r0, r0, r5
 8004c5c:	4548      	cmp	r0, r9
 8004c5e:	d9b6      	bls.n	8004bce <writeRam+0x406>
            print_error(__func__, __LINE__);
 8004c60:	4807      	ldr	r0, [pc, #28]	@ (8004c80 <writeRam+0x4b8>)
 8004c62:	4909      	ldr	r1, [pc, #36]	@ (8004c88 <writeRam+0x4c0>)
 8004c64:	f000 fb4c 	bl	8005300 <print_error>
 8004c68:	e7b1      	b.n	8004bce <writeRam+0x406>
}
 8004c6a:	2001      	movs	r0, #1
 8004c6c:	b007      	add	sp, #28
 8004c6e:	bcf0      	pop	{r4, r5, r6, r7}
 8004c70:	46bb      	mov	fp, r7
 8004c72:	46b2      	mov	sl, r6
 8004c74:	46a9      	mov	r9, r5
 8004c76:	46a0      	mov	r8, r4
 8004c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c7a:	46c0      	nop			@ (mov r8, r8)
 8004c7c:	50000400 	.word	0x50000400
 8004c80:	0800ea80 	.word	0x0800ea80
 8004c84:	00000285 	.word	0x00000285
 8004c88:	0000027a 	.word	0x0000027a

08004c8c <read>:
{
    return setWDT(-1);
}

uint8_t read(uint8_t reg)
{
 8004c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8e:	46ce      	mov	lr, r9
 8004c90:	4647      	mov	r7, r8
 8004c92:	b580      	push	{r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004c94:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004c98:	b672      	cpsid	i
    RTC_L();
 8004c9a:	2280      	movs	r2, #128	@ 0x80
    uint8_t addr = AB1815_SPI_READ(reg_addr);
 8004c9c:	257f      	movs	r5, #127	@ 0x7f
    RTC_L();
 8004c9e:	4b35      	ldr	r3, [pc, #212]	@ (8004d74 <read+0xe8>)
 8004ca0:	05d2      	lsls	r2, r2, #23
 8004ca2:	619a      	str	r2, [r3, #24]
    uint8_t addr = AB1815_SPI_READ(reg_addr);
 8004ca4:	4005      	ands	r5, r0
    uint32_t start_time = HAL_GetTick();
 8004ca6:	f002 fb41 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8004caa:	2302      	movs	r3, #2
 8004cac:	4698      	mov	r8, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8004cae:	23fa      	movs	r3, #250	@ 0xfa
 8004cb0:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 8004cb2:	0007      	movs	r7, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8004cb4:	4699      	mov	r9, r3
 8004cb6:	4c30      	ldr	r4, [pc, #192]	@ (8004d78 <read+0xec>)
 8004cb8:	4642      	mov	r2, r8
 8004cba:	68a3      	ldr	r3, [r4, #8]
 8004cbc:	421a      	tst	r2, r3
 8004cbe:	d015      	beq.n	8004cec <read+0x60>
  *spidr = TxData;
 8004cc0:	7325      	strb	r5, [r4, #12]
    start_time = HAL_GetTick();
 8004cc2:	f002 fb33 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 8004cc6:	23fa      	movs	r3, #250	@ 0xfa
 8004cc8:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8004cca:	0005      	movs	r5, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8004ccc:	2701      	movs	r7, #1
        if ((HAL_GetTick() - start_time) > 1000)
 8004cce:	4698      	mov	r8, r3
 8004cd0:	4c29      	ldr	r4, [pc, #164]	@ (8004d78 <read+0xec>)
 8004cd2:	68a3      	ldr	r3, [r4, #8]
 8004cd4:	421f      	tst	r7, r3
 8004cd6:	d113      	bne.n	8004d00 <read+0x74>
 8004cd8:	f002 fb28 	bl	800732c <HAL_GetTick>
 8004cdc:	1b40      	subs	r0, r0, r5
 8004cde:	4540      	cmp	r0, r8
 8004ce0:	d9f7      	bls.n	8004cd2 <read+0x46>
            print_error(__func__, __LINE__);
 8004ce2:	4826      	ldr	r0, [pc, #152]	@ (8004d7c <read+0xf0>)
 8004ce4:	4926      	ldr	r1, [pc, #152]	@ (8004d80 <read+0xf4>)
 8004ce6:	f000 fb0b 	bl	8005300 <print_error>
 8004cea:	e7f2      	b.n	8004cd2 <read+0x46>
        if ((HAL_GetTick() - start_time) > 1000)
 8004cec:	f002 fb1e 	bl	800732c <HAL_GetTick>
 8004cf0:	1bc0      	subs	r0, r0, r7
 8004cf2:	4548      	cmp	r0, r9
 8004cf4:	d9e0      	bls.n	8004cb8 <read+0x2c>
            print_error(__func__, __LINE__);
 8004cf6:	4821      	ldr	r0, [pc, #132]	@ (8004d7c <read+0xf0>)
 8004cf8:	4922      	ldr	r1, [pc, #136]	@ (8004d84 <read+0xf8>)
 8004cfa:	f000 fb01 	bl	8005300 <print_error>
 8004cfe:	e7db      	b.n	8004cb8 <read+0x2c>
  return (*((__IO uint8_t *)&SPIx->DR));
 8004d00:	7b23      	ldrb	r3, [r4, #12]
    uint32_t start_time = HAL_GetTick();
 8004d02:	f002 fb13 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 8004d06:	23fa      	movs	r3, #250	@ 0xfa
 8004d08:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 8004d0a:	0004      	movs	r4, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8004d0c:	2702      	movs	r7, #2
        if ((HAL_GetTick() - start_time) > 1000)
 8004d0e:	4698      	mov	r8, r3
 8004d10:	4d19      	ldr	r5, [pc, #100]	@ (8004d78 <read+0xec>)
 8004d12:	68ab      	ldr	r3, [r5, #8]
 8004d14:	421f      	tst	r7, r3
 8004d16:	d016      	beq.n	8004d46 <read+0xba>
  *spidr = TxData;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	732b      	strb	r3, [r5, #12]
    start_time = HAL_GetTick();
 8004d1c:	f002 fb06 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 8004d20:	23fa      	movs	r3, #250	@ 0xfa
 8004d22:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8004d24:	0005      	movs	r5, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8004d26:	2701      	movs	r7, #1
        if ((HAL_GetTick() - start_time) > 1000)
 8004d28:	4698      	mov	r8, r3
 8004d2a:	4c13      	ldr	r4, [pc, #76]	@ (8004d78 <read+0xec>)
 8004d2c:	68a3      	ldr	r3, [r4, #8]
 8004d2e:	421f      	tst	r7, r3
 8004d30:	d113      	bne.n	8004d5a <read+0xce>
 8004d32:	f002 fafb 	bl	800732c <HAL_GetTick>
 8004d36:	1b40      	subs	r0, r0, r5
 8004d38:	4540      	cmp	r0, r8
 8004d3a:	d9f7      	bls.n	8004d2c <read+0xa0>
            print_error(__func__, __LINE__);
 8004d3c:	480f      	ldr	r0, [pc, #60]	@ (8004d7c <read+0xf0>)
 8004d3e:	4910      	ldr	r1, [pc, #64]	@ (8004d80 <read+0xf4>)
 8004d40:	f000 fade 	bl	8005300 <print_error>
 8004d44:	e7f2      	b.n	8004d2c <read+0xa0>
        if ((HAL_GetTick() - start_time) > 1000)
 8004d46:	f002 faf1 	bl	800732c <HAL_GetTick>
 8004d4a:	1b00      	subs	r0, r0, r4
 8004d4c:	4540      	cmp	r0, r8
 8004d4e:	d9e0      	bls.n	8004d12 <read+0x86>
            print_error(__func__, __LINE__);
 8004d50:	480a      	ldr	r0, [pc, #40]	@ (8004d7c <read+0xf0>)
 8004d52:	490c      	ldr	r1, [pc, #48]	@ (8004d84 <read+0xf8>)
 8004d54:	f000 fad4 	bl	8005300 <print_error>
 8004d58:	e7db      	b.n	8004d12 <read+0x86>
    RTC_H();
 8004d5a:	2280      	movs	r2, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 8004d5c:	7b20      	ldrb	r0, [r4, #12]
 8004d5e:	4b05      	ldr	r3, [pc, #20]	@ (8004d74 <read+0xe8>)
 8004d60:	01d2      	lsls	r2, r2, #7
 8004d62:	b2c0      	uxtb	r0, r0
 8004d64:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d66:	f386 8810 	msr	PRIMASK, r6
    return read_rtc_register(reg);
}
 8004d6a:	bcc0      	pop	{r6, r7}
 8004d6c:	46b9      	mov	r9, r7
 8004d6e:	46b0      	mov	r8, r6
 8004d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d72:	46c0      	nop			@ (mov r8, r8)
 8004d74:	50000400 	.word	0x50000400
 8004d78:	40013000 	.word	0x40013000
 8004d7c:	0800ea80 	.word	0x0800ea80
 8004d80:	00000285 	.word	0x00000285
 8004d84:	0000027a 	.word	0x0000027a

08004d88 <write>:

uint8_t write(uint8_t reg, uint8_t value)
{
 8004d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d8a:	4646      	mov	r6, r8
 8004d8c:	46d6      	mov	lr, sl
 8004d8e:	464f      	mov	r7, r9
 8004d90:	b5c0      	push	{r6, r7, lr}
    uint8_t address = offset | 0x80;
 8004d92:	2680      	movs	r6, #128	@ 0x80
{
 8004d94:	000d      	movs	r5, r1
    uint8_t address = offset | 0x80;
 8004d96:	4306      	orrs	r6, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004d98:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004d9c:	b672      	cpsid	i
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 8004d9e:	2240      	movs	r2, #64	@ 0x40
 8004da0:	4b3a      	ldr	r3, [pc, #232]	@ (8004e8c <write+0x104>)
 8004da2:	6819      	ldr	r1, [r3, #0]
 8004da4:	420a      	tst	r2, r1
 8004da6:	d102      	bne.n	8004dae <write+0x26>
        SPI1->CR1 |= SPI_CR1_SPE;
 8004da8:	6819      	ldr	r1, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	601a      	str	r2, [r3, #0]
        RTC_L();
 8004dae:	2280      	movs	r2, #128	@ 0x80
 8004db0:	4b37      	ldr	r3, [pc, #220]	@ (8004e90 <write+0x108>)
 8004db2:	05d2      	lsls	r2, r2, #23
 8004db4:	619a      	str	r2, [r3, #24]
    uint32_t start_time = HAL_GetTick();
 8004db6:	f002 fab9 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8004dba:	2302      	movs	r3, #2
 8004dbc:	4699      	mov	r9, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8004dbe:	23fa      	movs	r3, #250	@ 0xfa
 8004dc0:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 8004dc2:	4680      	mov	r8, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8004dc4:	469a      	mov	sl, r3
 8004dc6:	4c31      	ldr	r4, [pc, #196]	@ (8004e8c <write+0x104>)
 8004dc8:	464a      	mov	r2, r9
 8004dca:	68a3      	ldr	r3, [r4, #8]
 8004dcc:	421a      	tst	r2, r3
 8004dce:	d017      	beq.n	8004e00 <write+0x78>
  *spidr = TxData;
 8004dd0:	7326      	strb	r6, [r4, #12]
    start_time = HAL_GetTick();
 8004dd2:	f002 faab 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	4698      	mov	r8, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8004dda:	23fa      	movs	r3, #250	@ 0xfa
 8004ddc:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8004dde:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8004de0:	4699      	mov	r9, r3
 8004de2:	4c2a      	ldr	r4, [pc, #168]	@ (8004e8c <write+0x104>)
 8004de4:	4642      	mov	r2, r8
 8004de6:	68a3      	ldr	r3, [r4, #8]
 8004de8:	421a      	tst	r2, r3
 8004dea:	d114      	bne.n	8004e16 <write+0x8e>
 8004dec:	f002 fa9e 	bl	800732c <HAL_GetTick>
 8004df0:	1b80      	subs	r0, r0, r6
 8004df2:	4548      	cmp	r0, r9
 8004df4:	d9f6      	bls.n	8004de4 <write+0x5c>
            print_error(__func__, __LINE__);
 8004df6:	4827      	ldr	r0, [pc, #156]	@ (8004e94 <write+0x10c>)
 8004df8:	4927      	ldr	r1, [pc, #156]	@ (8004e98 <write+0x110>)
 8004dfa:	f000 fa81 	bl	8005300 <print_error>
 8004dfe:	e7f1      	b.n	8004de4 <write+0x5c>
        if ((HAL_GetTick() - start_time) > 1000)
 8004e00:	f002 fa94 	bl	800732c <HAL_GetTick>
 8004e04:	4643      	mov	r3, r8
 8004e06:	1ac0      	subs	r0, r0, r3
 8004e08:	4550      	cmp	r0, sl
 8004e0a:	d9dd      	bls.n	8004dc8 <write+0x40>
            print_error(__func__, __LINE__);
 8004e0c:	4821      	ldr	r0, [pc, #132]	@ (8004e94 <write+0x10c>)
 8004e0e:	4923      	ldr	r1, [pc, #140]	@ (8004e9c <write+0x114>)
 8004e10:	f000 fa76 	bl	8005300 <print_error>
 8004e14:	e7d8      	b.n	8004dc8 <write+0x40>
  return (*((__IO uint8_t *)&SPIx->DR));
 8004e16:	7b23      	ldrb	r3, [r4, #12]
    uint32_t start_time = HAL_GetTick();
 8004e18:	f002 fa88 	bl	800732c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	4698      	mov	r8, r3
        if ((HAL_GetTick() - start_time) > 1000)
 8004e20:	23fa      	movs	r3, #250	@ 0xfa
 8004e22:	009b      	lsls	r3, r3, #2
    uint32_t start_time = HAL_GetTick();
 8004e24:	0006      	movs	r6, r0
        if ((HAL_GetTick() - start_time) > 1000)
 8004e26:	4699      	mov	r9, r3
 8004e28:	4c18      	ldr	r4, [pc, #96]	@ (8004e8c <write+0x104>)
 8004e2a:	4642      	mov	r2, r8
 8004e2c:	68a3      	ldr	r3, [r4, #8]
 8004e2e:	421a      	tst	r2, r3
 8004e30:	d015      	beq.n	8004e5e <write+0xd6>
  *spidr = TxData;
 8004e32:	7325      	strb	r5, [r4, #12]
    start_time = HAL_GetTick();
 8004e34:	f002 fa7a 	bl	800732c <HAL_GetTick>
        if ((HAL_GetTick() - start_time) > 1000)
 8004e38:	23fa      	movs	r3, #250	@ 0xfa
 8004e3a:	009b      	lsls	r3, r3, #2
    start_time = HAL_GetTick();
 8004e3c:	0005      	movs	r5, r0
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8004e3e:	2601      	movs	r6, #1
        if ((HAL_GetTick() - start_time) > 1000)
 8004e40:	4698      	mov	r8, r3
 8004e42:	4c12      	ldr	r4, [pc, #72]	@ (8004e8c <write+0x104>)
 8004e44:	68a3      	ldr	r3, [r4, #8]
 8004e46:	421e      	tst	r6, r3
 8004e48:	d113      	bne.n	8004e72 <write+0xea>
 8004e4a:	f002 fa6f 	bl	800732c <HAL_GetTick>
 8004e4e:	1b40      	subs	r0, r0, r5
 8004e50:	4540      	cmp	r0, r8
 8004e52:	d9f7      	bls.n	8004e44 <write+0xbc>
            print_error(__func__, __LINE__);
 8004e54:	480f      	ldr	r0, [pc, #60]	@ (8004e94 <write+0x10c>)
 8004e56:	4910      	ldr	r1, [pc, #64]	@ (8004e98 <write+0x110>)
 8004e58:	f000 fa52 	bl	8005300 <print_error>
 8004e5c:	e7f2      	b.n	8004e44 <write+0xbc>
        if ((HAL_GetTick() - start_time) > 1000)
 8004e5e:	f002 fa65 	bl	800732c <HAL_GetTick>
 8004e62:	1b80      	subs	r0, r0, r6
 8004e64:	4548      	cmp	r0, r9
 8004e66:	d9e0      	bls.n	8004e2a <write+0xa2>
            print_error(__func__, __LINE__);
 8004e68:	480a      	ldr	r0, [pc, #40]	@ (8004e94 <write+0x10c>)
 8004e6a:	490c      	ldr	r1, [pc, #48]	@ (8004e9c <write+0x114>)
 8004e6c:	f000 fa48 	bl	8005300 <print_error>
 8004e70:	e7db      	b.n	8004e2a <write+0xa2>
        RTC_H();
 8004e72:	2280      	movs	r2, #128	@ 0x80
  return (*((__IO uint8_t *)&SPIx->DR));
 8004e74:	7b23      	ldrb	r3, [r4, #12]
 8004e76:	4b06      	ldr	r3, [pc, #24]	@ (8004e90 <write+0x108>)
 8004e78:	01d2      	lsls	r2, r2, #7
 8004e7a:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e7c:	f387 8810 	msr	PRIMASK, r7
    return write_rtc_register(reg, value);
}
 8004e80:	2001      	movs	r0, #1
 8004e82:	bce0      	pop	{r5, r6, r7}
 8004e84:	46ba      	mov	sl, r7
 8004e86:	46b1      	mov	r9, r6
 8004e88:	46a8      	mov	r8, r5
 8004e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e8c:	40013000 	.word	0x40013000
 8004e90:	50000400 	.word	0x50000400
 8004e94:	0800ea80 	.word	0x0800ea80
 8004e98:	00000285 	.word	0x00000285
 8004e9c:	0000027a 	.word	0x0000027a

08004ea0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004ea0:	b530      	push	{r4, r5, lr}
 8004ea2:	b085      	sub	sp, #20

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004ea4:	220c      	movs	r2, #12
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	a801      	add	r0, sp, #4
 8004eaa:	f007 fe53 	bl	800cb54 <memset>
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004eae:	2520      	movs	r5, #32
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004eb0:	2200      	movs	r2, #0
  hadc1.Instance = ADC1;
 8004eb2:	4c1c      	ldr	r4, [pc, #112]	@ (8004f24 <MX_ADC1_Init+0x84>)
 8004eb4:	4b1c      	ldr	r3, [pc, #112]	@ (8004f28 <MX_ADC1_Init+0x88>)
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004eb6:	5562      	strb	r2, [r4, r5]
  hadc1.Instance = ADC1;
 8004eb8:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8004eba:	23c0      	movs	r3, #192	@ 0xc0
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004ebc:	350c      	adds	r5, #12
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004ebe:	76a2      	strb	r2, [r4, #26]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004ec0:	5562      	strb	r2, [r4, r5]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_19CYCLES_5;
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 8004ec2:	2206      	movs	r2, #6
  hadc1.Init.NbrOfConversion = 1;
 8004ec4:	2101      	movs	r1, #1
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004ec6:	2004      	movs	r0, #4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8004ec8:	061b      	lsls	r3, r3, #24
 8004eca:	6063      	str	r3, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004ecc:	2300      	movs	r3, #0
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 8004ece:	63a2      	str	r2, [r4, #56]	@ 0x38
  hadc1.Init.OversamplingMode = ENABLE;
 8004ed0:	3236      	adds	r2, #54	@ 0x36
 8004ed2:	54a1      	strb	r1, [r4, r2]
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_8;
 8004ed4:	3a34      	subs	r2, #52	@ 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004ed6:	6160      	str	r0, [r4, #20]
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_19CYCLES_5;
 8004ed8:	6360      	str	r0, [r4, #52]	@ 0x34
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_8;
 8004eda:	6422      	str	r2, [r4, #64]	@ 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_3;
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004edc:	0020      	movs	r0, r4
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_3;
 8004ede:	3258      	adds	r2, #88	@ 0x58
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004ee0:	60a3      	str	r3, [r4, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004ee2:	60e3      	str	r3, [r4, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004ee4:	6123      	str	r3, [r4, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004ee6:	8323      	strh	r3, [r4, #24]
  hadc1.Init.NbrOfConversion = 1;
 8004ee8:	61e1      	str	r1, [r4, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004eea:	6263      	str	r3, [r4, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004eec:	62a3      	str	r3, [r4, #40]	@ 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004eee:	6323      	str	r3, [r4, #48]	@ 0x30
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_3;
 8004ef0:	6462      	str	r2, [r4, #68]	@ 0x44
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8004ef2:	64a3      	str	r3, [r4, #72]	@ 0x48
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8004ef4:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004ef6:	f002 fa41 	bl	800737c <HAL_ADC_Init>
 8004efa:	2800      	cmp	r0, #0
 8004efc:	d10c      	bne.n	8004f18 <MX_ADC1_Init+0x78>
    Error_Handler();
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8004efe:	4b0b      	ldr	r3, [pc, #44]	@ (8004f2c <MX_ADC1_Init+0x8c>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004f00:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8004f02:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004f04:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004f06:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004f08:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8004f0a:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004f0c:	f002 fb52 	bl	80075b4 <HAL_ADC_ConfigChannel>
 8004f10:	2800      	cmp	r0, #0
 8004f12:	d104      	bne.n	8004f1e <MX_ADC1_Init+0x7e>
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8004f14:	b005      	add	sp, #20
 8004f16:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8004f18:	f000 fc14 	bl	8005744 <Error_Handler>
 8004f1c:	e7ef      	b.n	8004efe <MX_ADC1_Init+0x5e>
    Error_Handler();
 8004f1e:	f000 fc11 	bl	8005744 <Error_Handler>
}
 8004f22:	e7f7      	b.n	8004f14 <MX_ADC1_Init+0x74>
 8004f24:	20000364 	.word	0x20000364
 8004f28:	40012400 	.word	0x40012400
 8004f2c:	b0001000 	.word	0xb0001000

08004f30 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{
 8004f30:	b510      	push	{r4, lr}
 8004f32:	0004      	movs	r4, r0
 8004f34:	b092      	sub	sp, #72	@ 0x48

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004f36:	2244      	movs	r2, #68	@ 0x44
 8004f38:	2100      	movs	r1, #0
 8004f3a:	a801      	add	r0, sp, #4
 8004f3c:	f007 fe0a 	bl	800cb54 <memset>
  if (adcHandle->Instance == ADC1)
 8004f40:	4b0d      	ldr	r3, [pc, #52]	@ (8004f78 <HAL_ADC_MspInit+0x48>)
 8004f42:	6822      	ldr	r2, [r4, #0]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d001      	beq.n	8004f4c <HAL_ADC_MspInit+0x1c>
    __HAL_RCC_ADC_CLK_ENABLE();
    /* USER CODE BEGIN ADC1_MspInit 1 */

    /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004f48:	b012      	add	sp, #72	@ 0x48
 8004f4a:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004f4c:	2380      	movs	r3, #128	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f4e:	a801      	add	r0, sp, #4
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004f50:	01db      	lsls	r3, r3, #7
 8004f52:	9301      	str	r3, [sp, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f54:	f003 fa5c 	bl	8008410 <HAL_RCCEx_PeriphCLKConfig>
 8004f58:	2800      	cmp	r0, #0
 8004f5a:	d10a      	bne.n	8004f72 <HAL_ADC_MspInit+0x42>
    __HAL_RCC_ADC_CLK_ENABLE();
 8004f5c:	2180      	movs	r1, #128	@ 0x80
 8004f5e:	4b07      	ldr	r3, [pc, #28]	@ (8004f7c <HAL_ADC_MspInit+0x4c>)
 8004f60:	0349      	lsls	r1, r1, #13
 8004f62:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004f64:	430a      	orrs	r2, r1
 8004f66:	661a      	str	r2, [r3, #96]	@ 0x60
 8004f68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f6a:	400b      	ands	r3, r1
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	9b00      	ldr	r3, [sp, #0]
}
 8004f70:	e7ea      	b.n	8004f48 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8004f72:	f000 fbe7 	bl	8005744 <Error_Handler>
 8004f76:	e7f1      	b.n	8004f5c <HAL_ADC_MspInit+0x2c>
 8004f78:	40012400 	.word	0x40012400
 8004f7c:	40021000 	.word	0x40021000

08004f80 <get_vbat>:
/* USER CODE BEGIN 1 */

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

uint32_t get_vbat(void)
{
 8004f80:	b570      	push	{r4, r5, r6, lr}
  // printf("get_vbat\n");
  uint32_t Vdda;

  if (ubAdcGrpRegularUnitaryConvStatus != 0)
 8004f82:	4d19      	ldr	r5, [pc, #100]	@ (8004fe8 <get_vbat+0x68>)
 8004f84:	782b      	ldrb	r3, [r5, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d02a      	beq.n	8004fe0 <get_vbat+0x60>
  {
    ubAdcGrpRegularUnitaryConvStatus = 0;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	702b      	strb	r3, [r5, #0]
  {
    Error_Handler();
  }

  /* Init variable containing ADC conversion data */
  uhADCxConvertedData = VAR_CONVERTED_DATA_INIT_VALUE; // VAR_CONVERTED_DATA_INIT_VALUE
 8004f8e:	2380      	movs	r3, #128	@ 0x80
 8004f90:	4c16      	ldr	r4, [pc, #88]	@ (8004fec <get_vbat+0x6c>)
 8004f92:	015b      	lsls	r3, r3, #5
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f94:	4a16      	ldr	r2, [pc, #88]	@ (8004ff0 <get_vbat+0x70>)
 8004f96:	8023      	strh	r3, [r4, #0]
 8004f98:	6893      	ldr	r3, [r2, #8]
 8004f9a:	07db      	lsls	r3, r3, #31
 8004f9c:	d502      	bpl.n	8004fa4 <get_vbat+0x24>
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004f9e:	6893      	ldr	r3, [r2, #8]
 8004fa0:	079b      	lsls	r3, r3, #30
 8004fa2:	d513      	bpl.n	8004fcc <get_vbat+0x4c>
    LL_ADC_REG_StartConversion(ADC1);
  }
  else
  {
    /* Error: ADC conversion start could not be performed */
    Error_Handler();
 8004fa4:	f000 fbce 	bl	8005744 <Error_Handler>
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8004fa8:	2104      	movs	r1, #4
 8004faa:	4a11      	ldr	r2, [pc, #68]	@ (8004ff0 <get_vbat+0x70>)
 8004fac:	6813      	ldr	r3, [r2, #0]
 8004fae:	4219      	tst	r1, r3
 8004fb0:	d0fc      	beq.n	8004fac <get_vbat+0x2c>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8004fb2:	6011      	str	r1, [r2, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA) & 0x00000FFFUL);
 8004fb4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
  Vdda = 1220 * 4096 / uhADCxConvertedData;
 8004fb6:	480f      	ldr	r0, [pc, #60]	@ (8004ff4 <get_vbat+0x74>)
 8004fb8:	051b      	lsls	r3, r3, #20
 8004fba:	0d1b      	lsrs	r3, r3, #20
  uhADCxConvertedData = LL_ADC_REG_ReadConversionData12(ADC1);
 8004fbc:	8023      	strh	r3, [r4, #0]
  ubAdcGrpRegularUnitaryConvStatus = 1;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	702b      	strb	r3, [r5, #0]
  Vdda = 1220 * 4096 / uhADCxConvertedData;
 8004fc2:	8821      	ldrh	r1, [r4, #0]
 8004fc4:	b289      	uxth	r1, r1
 8004fc6:	f7fb f945 	bl	8000254 <__divsi3>
}
 8004fca:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004fcc:	2104      	movs	r1, #4
 8004fce:	6893      	ldr	r3, [r2, #8]
 8004fd0:	4219      	tst	r1, r3
 8004fd2:	d1e7      	bne.n	8004fa4 <get_vbat+0x24>
  MODIFY_REG(ADCx->CR,
 8004fd4:	6893      	ldr	r3, [r2, #8]
 8004fd6:	4808      	ldr	r0, [pc, #32]	@ (8004ff8 <get_vbat+0x78>)
 8004fd8:	4003      	ands	r3, r0
 8004fda:	430b      	orrs	r3, r1
 8004fdc:	6093      	str	r3, [r2, #8]
}
 8004fde:	e7e3      	b.n	8004fa8 <get_vbat+0x28>
    Error_Handler();
 8004fe0:	f000 fbb0 	bl	8005744 <Error_Handler>
 8004fe4:	e7d3      	b.n	8004f8e <get_vbat+0xe>
 8004fe6:	46c0      	nop			@ (mov r8, r8)
 8004fe8:	20000000 	.word	0x20000000
 8004fec:	20000002 	.word	0x20000002
 8004ff0:	40012400 	.word	0x40012400
 8004ff4:	004c4000 	.word	0x004c4000
 8004ff8:	7fffffe8 	.word	0x7fffffe8

08004ffc <Activate_ADC>:
  __IO uint32_t wait_loop_index = 0;
 8004ffc:	2300      	movs	r3, #0
{
 8004ffe:	b500      	push	{lr}
 8005000:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8005002:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005004:	4b20      	ldr	r3, [pc, #128]	@ (8005088 <Activate_ADC+0x8c>)
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	07d2      	lsls	r2, r2, #31
 800500a:	d43a      	bmi.n	8005082 <Activate_ADC+0x86>
  MODIFY_REG(ADCx->CR,
 800500c:	6899      	ldr	r1, [r3, #8]
 800500e:	4a1f      	ldr	r2, [pc, #124]	@ (800508c <Activate_ADC+0x90>)
 8005010:	4011      	ands	r1, r2
 8005012:	2280      	movs	r2, #128	@ 0x80
 8005014:	0552      	lsls	r2, r2, #21
 8005016:	430a      	orrs	r2, r1
 8005018:	609a      	str	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 800501a:	4b1d      	ldr	r3, [pc, #116]	@ (8005090 <Activate_ADC+0x94>)
 800501c:	491d      	ldr	r1, [pc, #116]	@ (8005094 <Activate_ADC+0x98>)
 800501e:	6818      	ldr	r0, [r3, #0]
 8005020:	f7fb f88e 	bl	8000140 <__udivsi3>
 8005024:	0083      	lsls	r3, r0, #2
 8005026:	1818      	adds	r0, r3, r0
 8005028:	210a      	movs	r1, #10
 800502a:	0080      	lsls	r0, r0, #2
 800502c:	f7fb f888 	bl	8000140 <__udivsi3>
 8005030:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0)
 8005032:	9b01      	ldr	r3, [sp, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d005      	beq.n	8005044 <Activate_ADC+0x48>
      wait_loop_index--;
 8005038:	9b01      	ldr	r3, [sp, #4]
 800503a:	3b01      	subs	r3, #1
 800503c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0)
 800503e:	9b01      	ldr	r3, [sp, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1f9      	bne.n	8005038 <Activate_ADC+0x3c>
  MODIFY_REG(ADCx->CR,
 8005044:	4a10      	ldr	r2, [pc, #64]	@ (8005088 <Activate_ADC+0x8c>)
 8005046:	4b14      	ldr	r3, [pc, #80]	@ (8005098 <Activate_ADC+0x9c>)
 8005048:	6891      	ldr	r1, [r2, #8]
 800504a:	4019      	ands	r1, r3
 800504c:	3318      	adds	r3, #24
 800504e:	430b      	orrs	r3, r1
 8005050:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005052:	6893      	ldr	r3, [r2, #8]
 8005054:	2b00      	cmp	r3, #0
 8005056:	dbfc      	blt.n	8005052 <Activate_ADC+0x56>
    wait_loop_index = (ADC_DELAY_CALIB_ENABLE_CPU_CYCLES >> 1);
 8005058:	2320      	movs	r3, #32
 800505a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0)
 800505c:	9b01      	ldr	r3, [sp, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d005      	beq.n	800506e <Activate_ADC+0x72>
      wait_loop_index--;
 8005062:	9b01      	ldr	r3, [sp, #4]
 8005064:	3b01      	subs	r3, #1
 8005066:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0)
 8005068:	9b01      	ldr	r3, [sp, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1f9      	bne.n	8005062 <Activate_ADC+0x66>
  MODIFY_REG(ADCx->CR,
 800506e:	4a06      	ldr	r2, [pc, #24]	@ (8005088 <Activate_ADC+0x8c>)
 8005070:	4909      	ldr	r1, [pc, #36]	@ (8005098 <Activate_ADC+0x9c>)
 8005072:	6893      	ldr	r3, [r2, #8]
 8005074:	400b      	ands	r3, r1
 8005076:	2101      	movs	r1, #1
 8005078:	430b      	orrs	r3, r1
 800507a:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800507c:	6813      	ldr	r3, [r2, #0]
 800507e:	4219      	tst	r1, r3
 8005080:	d0fc      	beq.n	800507c <Activate_ADC+0x80>
}
 8005082:	b003      	add	sp, #12
 8005084:	bd00      	pop	{pc}
 8005086:	46c0      	nop			@ (mov r8, r8)
 8005088:	40012400 	.word	0x40012400
 800508c:	6fffffe8 	.word	0x6fffffe8
 8005090:	20000004 	.word	0x20000004
 8005094:	00030d40 	.word	0x00030d40
 8005098:	7fffffe8 	.word	0x7fffffe8

0800509c <MX_GPIO_Init>:
/** Configure pins
     PA13 (SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 800509c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800509e:	46d6      	mov	lr, sl
 80050a0:	464f      	mov	r7, r9
 80050a2:	4646      	mov	r6, r8
 80050a4:	b5c0      	push	{r6, r7, lr}
 80050a6:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050a8:	2214      	movs	r2, #20
 80050aa:	2100      	movs	r1, #0
 80050ac:	a804      	add	r0, sp, #16
 80050ae:	f007 fd51 	bl	800cb54 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80050b2:	2204      	movs	r2, #4
 80050b4:	4b52      	ldr	r3, [pc, #328]	@ (8005200 <MX_GPIO_Init+0x164>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80050b6:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80050b8:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|WDI_Pin|PAPER_ON_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80050ba:	4e52      	ldr	r6, [pc, #328]	@ (8005204 <MX_GPIO_Init+0x168>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80050bc:	4311      	orrs	r1, r2
 80050be:	64d9      	str	r1, [r3, #76]	@ 0x4c
 80050c0:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|WDI_Pin|PAPER_ON_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80050c2:	0030      	movs	r0, r6
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80050c4:	400a      	ands	r2, r1
 80050c6:	9200      	str	r2, [sp, #0]
 80050c8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80050ca:	2220      	movs	r2, #32
 80050cc:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_RTC_GPIO_Port, CE_RTC_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D_C_Pin|RST_Pin, GPIO_PIN_RESET);
 80050ce:	27a0      	movs	r7, #160	@ 0xa0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80050d0:	4311      	orrs	r1, r2
 80050d2:	64d9      	str	r1, [r3, #76]	@ 0x4c
 80050d4:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
  HAL_GPIO_WritePin(GPIOA, D_C_Pin|RST_Pin, GPIO_PIN_RESET);
 80050d6:	05ff      	lsls	r7, r7, #23
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80050d8:	400a      	ands	r2, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80050da:	2102      	movs	r1, #2
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80050dc:	9201      	str	r2, [sp, #4]
 80050de:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80050e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80050e2:	4688      	mov	r8, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80050e4:	432a      	orrs	r2, r5
 80050e6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80050e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
  HAL_GPIO_WritePin(GPIOA, CSB_Pin|CS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ea:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80050ec:	402a      	ands	r2, r5
 80050ee:	9202      	str	r2, [sp, #8]
 80050f0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80050f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80050f4:	430a      	orrs	r2, r1
 80050f6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80050f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|WDI_Pin|PAPER_ON_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80050fa:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80050fc:	400b      	ands	r3, r1
 80050fe:	9303      	str	r3, [sp, #12]
 8005100:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|WDI_Pin|PAPER_ON_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8005102:	4b41      	ldr	r3, [pc, #260]	@ (8005208 <MX_GPIO_Init+0x16c>)
 8005104:	0019      	movs	r1, r3
 8005106:	469a      	mov	sl, r3
 8005108:	f002 fca6 	bl	8007a58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CE_RTC_GPIO_Port, CE_RTC_Pin, GPIO_PIN_SET);
 800510c:	2380      	movs	r3, #128	@ 0x80
 800510e:	01db      	lsls	r3, r3, #7
 8005110:	0019      	movs	r1, r3
 8005112:	0030      	movs	r0, r6
 8005114:	2201      	movs	r2, #1
 8005116:	4699      	mov	r9, r3
 8005118:	f002 fc9e 	bl	8007a58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, D_C_Pin|RST_Pin, GPIO_PIN_RESET);
 800511c:	2190      	movs	r1, #144	@ 0x90
 800511e:	0038      	movs	r0, r7
 8005120:	2200      	movs	r2, #0
 8005122:	0109      	lsls	r1, r1, #4
 8005124:	f002 fc98 	bl	8007a58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, CSB_Pin|CS_Pin, GPIO_PIN_SET);
 8005128:	21a0      	movs	r1, #160	@ 0xa0
 800512a:	0038      	movs	r0, r7
 800512c:	2201      	movs	r2, #1
 800512e:	0149      	lsls	r1, r1, #5
 8005130:	f002 fc92 	bl	8007a58 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005134:	22e0      	movs	r2, #224	@ 0xe0
 8005136:	2303      	movs	r3, #3
 8005138:	0212      	lsls	r2, r2, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800513a:	a904      	add	r1, sp, #16
 800513c:	4833      	ldr	r0, [pc, #204]	@ (800520c <MX_GPIO_Init+0x170>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800513e:	9204      	str	r2, [sp, #16]
 8005140:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005142:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005144:	f002 fb82 	bl	800784c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005148:	220f      	movs	r2, #15
 800514a:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800514c:	a904      	add	r1, sp, #16
 800514e:	4830      	ldr	r0, [pc, #192]	@ (8005210 <MX_GPIO_Init+0x174>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005150:	9204      	str	r2, [sp, #16]
 8005152:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005154:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005156:	f002 fb79 	bl	800784c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15;
 800515a:	2303      	movs	r3, #3
 800515c:	4a2d      	ldr	r2, [pc, #180]	@ (8005214 <MX_GPIO_Init+0x178>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800515e:	0038      	movs	r0, r7
 8005160:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15;
 8005162:	9204      	str	r2, [sp, #16]
 8005164:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005166:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005168:	f002 fb70 	bl	800784c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB10 PB11
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 800516c:	2303      	movs	r3, #3
 800516e:	4a2a      	ldr	r2, [pc, #168]	@ (8005218 <MX_GPIO_Init+0x17c>)
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005170:	0030      	movs	r0, r6
 8005172:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8005174:	9204      	str	r2, [sp, #16]
 8005176:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005178:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800517a:	f002 fb67 	bl	800784c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|WDI_Pin|PAPER_ON_Pin|GPIO_PIN_6|GPIO_PIN_7;
 800517e:	4653      	mov	r3, sl
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005180:	0030      	movs	r0, r6
 8005182:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = LED1_Pin|WDI_Pin|PAPER_ON_Pin|GPIO_PIN_6|GPIO_PIN_7;
 8005184:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005186:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005188:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800518a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800518c:	f002 fb5e 	bl	800784c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_PIN_6,GPIO_PIN_7 */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005190:	23c0      	movs	r3, #192	@ 0xc0
 8005192:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005194:	4643      	mov	r3, r8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005196:	0030      	movs	r0, r6
 8005198:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800519a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800519c:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800519e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051a0:	f002 fb54 	bl	800784c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NIRQ_Pin;
 80051a4:	2280      	movs	r2, #128	@ 0x80
 80051a6:	2300      	movs	r3, #0
 80051a8:	0152      	lsls	r2, r2, #5
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(NIRQ_GPIO_Port, &GPIO_InitStruct);
 80051aa:	0030      	movs	r0, r6
 80051ac:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = NIRQ_Pin;
 80051ae:	9204      	str	r2, [sp, #16]
 80051b0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b2:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(NIRQ_GPIO_Port, &GPIO_InitStruct);
 80051b4:	f002 fb4a 	bl	800784c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_RTC_Pin;
 80051b8:	464b      	mov	r3, r9
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(CE_RTC_GPIO_Port, &GPIO_InitStruct);
 80051ba:	0030      	movs	r0, r6
 80051bc:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = CE_RTC_Pin;
 80051be:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051c0:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051c2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80051c4:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(CE_RTC_GPIO_Port, &GPIO_InitStruct);
 80051c6:	f002 fb41 	bl	800784c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = D_C_Pin|CSB_Pin|RST_Pin|CS_Pin;
 80051ca:	23e8      	movs	r3, #232	@ 0xe8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051cc:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = D_C_Pin|CSB_Pin|RST_Pin|CS_Pin;
 80051ce:	015b      	lsls	r3, r3, #5
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051d0:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = D_C_Pin|CSB_Pin|RST_Pin|CS_Pin;
 80051d2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051d4:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051d8:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051da:	f002 fb37 	bl	800784c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 80051de:	2280      	movs	r2, #128	@ 0x80
 80051e0:	2300      	movs	r3, #0
 80051e2:	0092      	lsls	r2, r2, #2
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 80051e4:	0038      	movs	r0, r7
 80051e6:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = BUSY_Pin;
 80051e8:	9204      	str	r2, [sp, #16]
 80051ea:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ec:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 80051ee:	f002 fb2d 	bl	800784c <HAL_GPIO_Init>

}
 80051f2:	b00a      	add	sp, #40	@ 0x28
 80051f4:	bce0      	pop	{r5, r6, r7}
 80051f6:	46ba      	mov	sl, r7
 80051f8:	46b1      	mov	r9, r6
 80051fa:	46a8      	mov	r8, r5
 80051fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051fe:	46c0      	nop			@ (mov r8, r8)
 8005200:	40021000 	.word	0x40021000
 8005204:	50000400 	.word	0x50000400
 8005208:	0000a0c2 	.word	0x0000a0c2
 800520c:	50000800 	.word	0x50000800
 8005210:	50001400 	.word	0x50001400
 8005214:	00008013 	.word	0x00008013
 8005218:	00000f3d 	.word	0x00000f3d

0800521c <enter_stop2>:
 * @param  None
 * @retval None
 */

void enter_stop2(uint32_t sleep_time, uint32_t wakeup_clock)
{
 800521c:	b570      	push	{r4, r5, r6, lr}
	//	uint32_t Timeout = 0; /* Variable used for Timeout management */

	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, sleep_time, wakeup_clock, 0) != HAL_OK)
 800521e:	4c12      	ldr	r4, [pc, #72]	@ (8005268 <enter_stop2+0x4c>)
{
 8005220:	000a      	movs	r2, r1
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, sleep_time, wakeup_clock, 0) != HAL_OK)
 8005222:	2300      	movs	r3, #0
 8005224:	0001      	movs	r1, r0
 8005226:	0020      	movs	r0, r4
 8005228:	f003 fd38 	bl	8008c9c <HAL_RTCEx_SetWakeUpTimer_IT>
 800522c:	2800      	cmp	r0, #0
 800522e:	d117      	bne.n	8005260 <enter_stop2+0x44>
	{
		Error_Handler();
	}

	//gpio_before_stop2();
	LED1_OFF();
 8005230:	2380      	movs	r3, #128	@ 0x80
	HAL_SuspendTick();

	/* Set Standby mode */
	// Configure MCU low-power mode for CPU deep sleep mode
	PWR->CR1 |= LL_PWR_MODE_STOP2; // PWR_CR1_LPMS_SHUTDOWN
 8005232:	2502      	movs	r5, #2
	LED1_OFF();
 8005234:	4c0d      	ldr	r4, [pc, #52]	@ (800526c <enter_stop2+0x50>)
 8005236:	029b      	lsls	r3, r3, #10
 8005238:	61a3      	str	r3, [r4, #24]
	HAL_SuspendTick();
 800523a:	f002 f88f 	bl	800735c <HAL_SuspendTick>
	(void)PWR->CR1;				   // Ensure that the previous PWR register operations have been completed

	// Configure CPU core
	SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk; // Enable CPU deep sleep mode
 800523e:	2104      	movs	r1, #4
	PWR->CR1 |= LL_PWR_MODE_STOP2; // PWR_CR1_LPMS_SHUTDOWN
 8005240:	4b0b      	ldr	r3, [pc, #44]	@ (8005270 <enter_stop2+0x54>)
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	432a      	orrs	r2, r5
 8005246:	601a      	str	r2, [r3, #0]
	SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk; // Enable CPU deep sleep mode
 8005248:	4a0a      	ldr	r2, [pc, #40]	@ (8005274 <enter_stop2+0x58>)
	(void)PWR->CR1;				   // Ensure that the previous PWR register operations have been completed
 800524a:	681b      	ldr	r3, [r3, #0]
	SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk; // Enable CPU deep sleep mode
 800524c:	6913      	ldr	r3, [r2, #16]
 800524e:	430b      	orrs	r3, r1
 8005250:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8005252:	f3bf 8f4f 	dsb	sy
	DBGMCU->CR = 0; // Disable debug, trace and IWDG in low-power modes
#endif

	// Enter low-power mode
	__DSB();
	__WFI();
 8005256:	bf30      	wfi

	HAL_ResumeTick();
 8005258:	f002 f888 	bl	800736c <HAL_ResumeTick>
	LED1_ON();
 800525c:	61a5      	str	r5, [r4, #24]
	//gpio_from_stop2();
	//printf("Exit from STOP2\n");
}
 800525e:	bd70      	pop	{r4, r5, r6, pc}
		Error_Handler();
 8005260:	f000 fa70 	bl	8005744 <Error_Handler>
 8005264:	e7e4      	b.n	8005230 <enter_stop2+0x14>
 8005266:	46c0      	nop			@ (mov r8, r8)
 8005268:	20000420 	.word	0x20000420
 800526c:	50000400 	.word	0x50000400
 8005270:	40007000 	.word	0x40007000
 8005274:	e000ed00 	.word	0xe000ed00

08005278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005278:	b500      	push	{lr}
 800527a:	b099      	sub	sp, #100	@ 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800527c:	224c      	movs	r2, #76	@ 0x4c
 800527e:	2100      	movs	r1, #0
 8005280:	a805      	add	r0, sp, #20
 8005282:	f007 fc67 	bl	800cb54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005286:	2210      	movs	r2, #16
 8005288:	2100      	movs	r1, #0
 800528a:	4668      	mov	r0, sp
 800528c:	f007 fc62 	bl	800cb54 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);
 8005290:	2080      	movs	r0, #128	@ 0x80
 8005292:	00c0      	lsls	r0, r0, #3
 8005294:	f002 fbe6 	bl	8007a64 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8005298:	2318      	movs	r3, #24
 800529a:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800529c:	3b17      	subs	r3, #23
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 800529e:	2280      	movs	r2, #128	@ 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80052a0:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80052a2:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80052a4:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80052a6:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80052a8:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 80052aa:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80052ac:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80052ae:	f002 fccf 	bl	8007c50 <HAL_RCC_OscConfig>
 80052b2:	2800      	cmp	r0, #0
 80052b4:	d001      	beq.n	80052ba <SystemClock_Config+0x42>
  __ASM volatile ("cpsid i" : : : "memory");
 80052b6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80052b8:	e7fe      	b.n	80052b8 <SystemClock_Config+0x40>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80052ba:	2207      	movs	r2, #7
 80052bc:	2300      	movs	r3, #0
 80052be:	9200      	str	r2, [sp, #0]
 80052c0:	9301      	str	r3, [sp, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80052c6:	2101      	movs	r1, #1
 80052c8:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80052ca:	9202      	str	r2, [sp, #8]
 80052cc:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80052ce:	f002 ffeb 	bl	80082a8 <HAL_RCC_ClockConfig>
 80052d2:	2800      	cmp	r0, #0
 80052d4:	d001      	beq.n	80052da <SystemClock_Config+0x62>
 80052d6:	b672      	cpsid	i
  while (1)
 80052d8:	e7fe      	b.n	80052d8 <SystemClock_Config+0x60>
}
 80052da:	b019      	add	sp, #100	@ 0x64
 80052dc:	bd00      	pop	{pc}
 80052de:	46c0      	nop			@ (mov r8, r8)

080052e0 <read_RTCRam>:
{
 80052e0:	b510      	push	{r4, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	000c      	movs	r4, r1
 80052e6:	0013      	movs	r3, r2
  if (!readRam(address, (uint8_t *)data, sizeof(data), lock))
 80052e8:	a901      	add	r1, sp, #4
 80052ea:	2202      	movs	r2, #2
 80052ec:	f7ff f804 	bl	80042f8 <readRam>
 80052f0:	2800      	cmp	r0, #0
 80052f2:	d002      	beq.n	80052fa <read_RTCRam+0x1a>
  *read_data = (uint16_t)data[0] | ((uint16_t)data[1] << 8);
 80052f4:	466b      	mov	r3, sp
 80052f6:	889b      	ldrh	r3, [r3, #4]
 80052f8:	8023      	strh	r3, [r4, #0]
}
 80052fa:	b002      	add	sp, #8
 80052fc:	bd10      	pop	{r4, pc}
 80052fe:	46c0      	nop			@ (mov r8, r8)

08005300 <print_error>:
  printf(" *** Error:  %s ,   %d\n", func, line);
 8005300:	4b0b      	ldr	r3, [pc, #44]	@ (8005330 <print_error+0x30>)
{
 8005302:	b510      	push	{r4, lr}
 8005304:	000a      	movs	r2, r1
  printf(" *** Error:  %s ,   %d\n", func, line);
 8005306:	0001      	movs	r1, r0
 8005308:	0018      	movs	r0, r3
 800530a:	f001 fd71 	bl	8006df0 <printf_>
  HAL_Delay(100);
 800530e:	2064      	movs	r0, #100	@ 0x64
 8005310:	f002 f812 	bl	8007338 <HAL_Delay>
  printf(" *** timeout_reset:  %s    %d\n", func, line);
 8005314:	22c5      	movs	r2, #197	@ 0xc5
 8005316:	4907      	ldr	r1, [pc, #28]	@ (8005334 <print_error+0x34>)
 8005318:	0052      	lsls	r2, r2, #1
 800531a:	4807      	ldr	r0, [pc, #28]	@ (8005338 <print_error+0x38>)
 800531c:	f001 fd68 	bl	8006df0 <printf_>
  HAL_Delay(10);
 8005320:	200a      	movs	r0, #10
 8005322:	f002 f809 	bl	8007338 <HAL_Delay>
  deepPowerDown(10);
 8005326:	200a      	movs	r0, #10
 8005328:	f7fe fbcc 	bl	8003ac4 <deepPowerDown>
}
 800532c:	bd10      	pop	{r4, pc}
 800532e:	46c0      	nop			@ (mov r8, r8)
 8005330:	0800ea90 	.word	0x0800ea90
 8005334:	0800ec0c 	.word	0x0800ec0c
 8005338:	0800eaa8 	.word	0x0800eaa8

0800533c <timeout_reset>:
{
 800533c:	b510      	push	{r4, lr}
  printf(" *** timeout_reset:  %s    %d\n", func, line);
 800533e:	4b06      	ldr	r3, [pc, #24]	@ (8005358 <timeout_reset+0x1c>)
{
 8005340:	000a      	movs	r2, r1
  printf(" *** timeout_reset:  %s    %d\n", func, line);
 8005342:	0001      	movs	r1, r0
 8005344:	0018      	movs	r0, r3
 8005346:	f001 fd53 	bl	8006df0 <printf_>
  HAL_Delay(10);
 800534a:	200a      	movs	r0, #10
 800534c:	f001 fff4 	bl	8007338 <HAL_Delay>
  deepPowerDown(10);
 8005350:	200a      	movs	r0, #10
 8005352:	f7fe fbb7 	bl	8003ac4 <deepPowerDown>
}
 8005356:	bd10      	pop	{r4, pc}
 8005358:	0800eaa8 	.word	0x0800eaa8

0800535c <stream_sensor_data_forced_mode>:
{
 800535c:	b570      	push	{r4, r5, r6, lr}
  reslt = bme280_set_sensor_mode(BME280_FORCED_MODE, dev);
 800535e:	0001      	movs	r1, r0
{
 8005360:	0004      	movs	r4, r0
  reslt = bme280_set_sensor_mode(BME280_FORCED_MODE, dev);
 8005362:	2001      	movs	r0, #1
 8005364:	f005 f820 	bl	800a3a8 <bme280_set_sensor_mode>
 8005368:	4d06      	ldr	r5, [pc, #24]	@ (8005384 <stream_sensor_data_forced_mode+0x28>)
  HAL_Delay(req_delay); // 9 ms !!!
 800536a:	4b07      	ldr	r3, [pc, #28]	@ (8005388 <stream_sensor_data_forced_mode+0x2c>)
  reslt = bme280_set_sensor_mode(BME280_FORCED_MODE, dev);
 800536c:	7028      	strb	r0, [r5, #0]
  HAL_Delay(req_delay); // 9 ms !!!
 800536e:	6818      	ldr	r0, [r3, #0]
 8005370:	f001 ffe2 	bl	8007338 <HAL_Delay>
  reslt = bme280_get_sensor_data(BME280_TEMP | BME280_HUM, &comp_data, dev);
 8005374:	0022      	movs	r2, r4
 8005376:	4905      	ldr	r1, [pc, #20]	@ (800538c <stream_sensor_data_forced_mode+0x30>)
 8005378:	2006      	movs	r0, #6
 800537a:	f004 fc2d 	bl	8009bd8 <bme280_get_sensor_data>
 800537e:	7028      	strb	r0, [r5, #0]
}
 8005380:	bd70      	pop	{r4, r5, r6, pc}
 8005382:	46c0      	nop			@ (mov r8, r8)
 8005384:	200003d4 	.word	0x200003d4
 8005388:	200003d0 	.word	0x200003d0
 800538c:	20000550 	.word	0x20000550

08005390 <go_down>:
{
 8005390:	b510      	push	{r4, lr}
 8005392:	0004      	movs	r4, r0
  printf("Go down\n");
 8005394:	4804      	ldr	r0, [pc, #16]	@ (80053a8 <go_down+0x18>)
 8005396:	f001 fd2b 	bl	8006df0 <printf_>
  printf("Clear...\r\n");
 800539a:	4804      	ldr	r0, [pc, #16]	@ (80053ac <go_down+0x1c>)
 800539c:	f001 fd28 	bl	8006df0 <printf_>
  final_message(vBat);
 80053a0:	0020      	movs	r0, r4
 80053a2:	f006 fc85 	bl	800bcb0 <final_message>
}
 80053a6:	bd10      	pop	{r4, pc}
 80053a8:	0800eac8 	.word	0x0800eac8
 80053ac:	0800ead4 	.word	0x0800ead4

080053b0 <main>:
{
 80053b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053b2:	46de      	mov	lr, fp
 80053b4:	4657      	mov	r7, sl
 80053b6:	464e      	mov	r6, r9
 80053b8:	4645      	mov	r5, r8
 80053ba:	b5e0      	push	{r5, r6, r7, lr}
 80053bc:	b089      	sub	sp, #36	@ 0x24
  uint8_t dev_addr = 0;
 80053be:	ab04      	add	r3, sp, #16
 80053c0:	469c      	mov	ip, r3
 80053c2:	220b      	movs	r2, #11
 80053c4:	2300      	movs	r3, #0
  dev.intf_ptr = &dev_addr;
 80053c6:	4fc2      	ldr	r7, [pc, #776]	@ (80056d0 <main+0x320>)
  uint8_t dev_addr = 0;
 80053c8:	4462      	add	r2, ip
 80053ca:	7013      	strb	r3, [r2, #0]
  dev.intf = BME280_SPI_INTF;
 80053cc:	723b      	strb	r3, [r7, #8]
  dev.read = user_spi_read;
 80053ce:	4bc1      	ldr	r3, [pc, #772]	@ (80056d4 <main+0x324>)
  dev.intf_ptr = &dev_addr;
 80053d0:	607a      	str	r2, [r7, #4]
  dev.read = user_spi_read;
 80053d2:	60fb      	str	r3, [r7, #12]
  dev.write = user_spi_write;
 80053d4:	4bc0      	ldr	r3, [pc, #768]	@ (80056d8 <main+0x328>)
 80053d6:	613b      	str	r3, [r7, #16]
  dev.delay_us = user_delay_us;
 80053d8:	4bc0      	ldr	r3, [pc, #768]	@ (80056dc <main+0x32c>)
 80053da:	617b      	str	r3, [r7, #20]
  HAL_Init();
 80053dc:	f001 ff8e 	bl	80072fc <HAL_Init>
  SystemClock_Config();
 80053e0:	f7ff ff4a 	bl	8005278 <SystemClock_Config>
  MX_GPIO_Init();
 80053e4:	f7ff fe5a 	bl	800509c <MX_GPIO_Init>
  MX_ADC1_Init();
 80053e8:	f7ff fd5a 	bl	8004ea0 <MX_ADC1_Init>
  MX_RTC_Init();
 80053ec:	f001 fd2a 	bl	8006e44 <MX_RTC_Init>
  MX_SPI1_Init();
 80053f0:	f001 fdac 	bl	8006f4c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80053f4:	f001 fea6 	bl	8007144 <MX_USART2_UART_Init>
  * @rmtoll DBG_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80053f8:	2202      	movs	r2, #2
 80053fa:	49b9      	ldr	r1, [pc, #740]	@ (80056e0 <main+0x330>)
 80053fc:	684b      	ldr	r3, [r1, #4]
 80053fe:	4393      	bics	r3, r2
 8005400:	604b      	str	r3, [r1, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8005402:	2140      	movs	r1, #64	@ 0x40
  LED1_ON();
 8005404:	4bb7      	ldr	r3, [pc, #732]	@ (80056e4 <main+0x334>)
 8005406:	619a      	str	r2, [r3, #24]
 8005408:	4ab7      	ldr	r2, [pc, #732]	@ (80056e8 <main+0x338>)
 800540a:	6813      	ldr	r3, [r2, #0]
 800540c:	430b      	orrs	r3, r1
 800540e:	6013      	str	r3, [r2, #0]
  uint8_t wdalarm = read(REG_WEEKDAY_ALARM); // REG_WEEKDAY_ALARM  0x0e;
 8005410:	4bb6      	ldr	r3, [pc, #728]	@ (80056ec <main+0x33c>)
 8005412:	781c      	ldrb	r4, [r3, #0]
 8005414:	0020      	movs	r0, r4
 8005416:	f7ff fc39 	bl	8004c8c <read>
  if ((wdalarm & 0xf8) != 0xa0)              // ********    Startup from power up.   ******** ((wdalarm & 0xf8) != 0xa0)
 800541a:	23f8      	movs	r3, #248	@ 0xf8
 800541c:	4018      	ands	r0, r3
 800541e:	28a0      	cmp	r0, #160	@ 0xa0
 8005420:	d100      	bne.n	8005424 <main+0x74>
 8005422:	e098      	b.n	8005556 <main+0x1a6>
    uint32_t clk = HAL_RCC_GetSysClockFreq();
 8005424:	f002 fbb0 	bl	8007b88 <HAL_RCC_GetSysClockFreq>
    printf("\nMAIN. First power ON.   %d\n", clk);
 8005428:	4bb1      	ldr	r3, [pc, #708]	@ (80056f0 <main+0x340>)
    uint32_t clk = HAL_RCC_GetSysClockFreq();
 800542a:	0001      	movs	r1, r0
    printf("\nMAIN. First power ON.   %d\n", clk);
 800542c:	0018      	movs	r0, r3
 800542e:	f001 fcdf 	bl	8006df0 <printf_>
    HAL_Delay(3000);  	// AB1805 self initializtion time
 8005432:	48b0      	ldr	r0, [pc, #704]	@ (80056f4 <main+0x344>)
 8005434:	f001 ff80 	bl	8007338 <HAL_Delay>
    vbat_output_flag = (BAT_OUTPUT_PERIOD); // For first time output must be bigger 15
 8005438:	ab04      	add	r3, sp, #16
 800543a:	469c      	mov	ip, r3
 800543c:	250e      	movs	r5, #14
 800543e:	2310      	movs	r3, #16
 8005440:	4465      	add	r5, ip
    resetConfig(0);
 8005442:	2000      	movs	r0, #0
    vbat_output_flag = (BAT_OUTPUT_PERIOD); // For first time output must be bigger 15
 8005444:	802b      	strh	r3, [r5, #0]
    resetConfig(0);
 8005446:	f7fd f81f 	bl	8002488 <resetConfig>
    write(REG_WEEKDAY_ALARM, 0xa0); // Magic 0xa0
 800544a:	21a0      	movs	r1, #160	@ 0xa0
 800544c:	0020      	movs	r0, r4
 800544e:	f7ff fc9b 	bl	8004d88 <write>
    printf("wdalarm = 0x%x\n",read(REG_WEEKDAY_ALARM));
 8005452:	0020      	movs	r0, r4
 8005454:	f7ff fc1a 	bl	8004c8c <read>
 8005458:	4ba7      	ldr	r3, [pc, #668]	@ (80056f8 <main+0x348>)
 800545a:	0001      	movs	r1, r0
 800545c:	0018      	movs	r0, r3
 800545e:	f001 fcc7 	bl	8006df0 <printf_>
    writeRam(H_old_RAM_address, 0, 1, 0);
 8005462:	2300      	movs	r3, #0
 8005464:	2201      	movs	r2, #1
 8005466:	0019      	movs	r1, r3
 8005468:	2040      	movs	r0, #64	@ 0x40
 800546a:	f7ff f9ad 	bl	80047c8 <writeRam>
    writeRam(T_old_RAM_address, 0, 1, 0);
 800546e:	2300      	movs	r3, #0
 8005470:	2201      	movs	r2, #1
 8005472:	0019      	movs	r1, r3
 8005474:	2042      	movs	r0, #66	@ 0x42
 8005476:	f7ff f9a7 	bl	80047c8 <writeRam>
    writeRam(vbat_old_RAM_address, 0, 1, 0);
 800547a:	2300      	movs	r3, #0
 800547c:	2201      	movs	r2, #1
 800547e:	0019      	movs	r1, r3
 8005480:	2044      	movs	r0, #68	@ 0x44
 8005482:	f7ff f9a1 	bl	80047c8 <writeRam>
 8005486:	4b9d      	ldr	r3, [pc, #628]	@ (80056fc <main+0x34c>)
 8005488:	4e9d      	ldr	r6, [pc, #628]	@ (8005700 <main+0x350>)
 800548a:	9302      	str	r3, [sp, #8]
 800548c:	4b9d      	ldr	r3, [pc, #628]	@ (8005704 <main+0x354>)
 800548e:	4699      	mov	r9, r3
 8005490:	4b9d      	ldr	r3, [pc, #628]	@ (8005708 <main+0x358>)
 8005492:	4698      	mov	r8, r3
  dev.settings.osr_p = BME280_NO_OVERSAMPLING; // UINT8_C(0x00)
 8005494:	2381      	movs	r3, #129	@ 0x81
  rslt = bme280_init(&dev);
 8005496:	0038      	movs	r0, r7
  dev.settings.osr_p = BME280_NO_OVERSAMPLING; // UINT8_C(0x00)
 8005498:	025b      	lsls	r3, r3, #9
 800549a:	643b      	str	r3, [r7, #64]	@ 0x40
  rslt = bme280_init(&dev);
 800549c:	f004 f95a 	bl	8009754 <bme280_init>
 80054a0:	ab04      	add	r3, sp, #16
 80054a2:	469c      	mov	ip, r3
 80054a4:	240a      	movs	r4, #10
 80054a6:	4464      	add	r4, ip
 80054a8:	7020      	strb	r0, [r4, #0]
  if (rslt != BME280_OK) // OK = 0
 80054aa:	7823      	ldrb	r3, [r4, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d006      	beq.n	80054be <main+0x10e>
    printf("Failed to initialize the device (code %+d).\n", rslt);
 80054b0:	7821      	ldrb	r1, [r4, #0]
 80054b2:	4896      	ldr	r0, [pc, #600]	@ (800570c <main+0x35c>)
 80054b4:	b249      	sxtb	r1, r1
 80054b6:	f001 fc9b 	bl	8006df0 <printf_>
 80054ba:	b672      	cpsid	i
  while (1)
 80054bc:	e7fe      	b.n	80054bc <main+0x10c>
  rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 80054be:	0039      	movs	r1, r7
 80054c0:	200f      	movs	r0, #15
 80054c2:	f004 fdb7 	bl	800a034 <bme280_set_sensor_settings>
 80054c6:	7020      	strb	r0, [r4, #0]
  req_delay = bme280_cal_meas_delay(&dev.settings);
 80054c8:	4891      	ldr	r0, [pc, #580]	@ (8005710 <main+0x360>)
 80054ca:	f004 fbeb 	bl	8009ca4 <bme280_cal_meas_delay>
 80054ce:	4b91      	ldr	r3, [pc, #580]	@ (8005714 <main+0x364>)
 80054d0:	6018      	str	r0, [r3, #0]
  rslt = stream_sensor_data_forced_mode(&dev); // working time = 0.8 sec
 80054d2:	0038      	movs	r0, r7
 80054d4:	f7ff ff42 	bl	800535c <stream_sensor_data_forced_mode>
 80054d8:	7020      	strb	r0, [r4, #0]
  if (rslt != BME280_OK)
 80054da:	7823      	ldrb	r3, [r4, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d130      	bne.n	8005542 <main+0x192>
  h_ = (((uint16_t)comp_data.humidity * 1049 + 500) >> 20); // fast_divide_by_1000
 80054e0:	498d      	ldr	r1, [pc, #564]	@ (8005718 <main+0x368>)
 80054e2:	4b8e      	ldr	r3, [pc, #568]	@ (800571c <main+0x36c>)
 80054e4:	688a      	ldr	r2, [r1, #8]
  printf("h_ = %d   h_old = %d   t_ = %d   t_old = %d\n", h_, H_old, t_, T_old);
 80054e6:	488e      	ldr	r0, [pc, #568]	@ (8005720 <main+0x370>)
  h_ = (((uint16_t)comp_data.humidity * 1049 + 500) >> 20); // fast_divide_by_1000
 80054e8:	b292      	uxth	r2, r2
 80054ea:	4353      	muls	r3, r2
 80054ec:	33f5      	adds	r3, #245	@ 0xf5
  t_ = (((uint16_t)comp_data.temperature * 6554 + 2) >> 16); // fast_divide_by_10
 80054ee:	684a      	ldr	r2, [r1, #4]
  h_ = (((uint16_t)comp_data.humidity * 1049 + 500) >> 20); // fast_divide_by_1000
 80054f0:	33ff      	adds	r3, #255	@ 0xff
 80054f2:	151c      	asrs	r4, r3, #20
  t_ = (((uint16_t)comp_data.temperature * 6554 + 2) >> 16); // fast_divide_by_10
 80054f4:	4b8b      	ldr	r3, [pc, #556]	@ (8005724 <main+0x374>)
 80054f6:	b292      	uxth	r2, r2
 80054f8:	4353      	muls	r3, r2
 80054fa:	3302      	adds	r3, #2
 80054fc:	141a      	asrs	r2, r3, #16
 80054fe:	4692      	mov	sl, r2
 8005500:	0c1b      	lsrs	r3, r3, #16
 8005502:	469b      	mov	fp, r3
  printf("h_ = %d   h_old = %d   t_ = %d   t_old = %d\n", h_, H_old, t_, T_old);
 8005504:	9b02      	ldr	r3, [sp, #8]
 8005506:	0021      	movs	r1, r4
 8005508:	881a      	ldrh	r2, [r3, #0]
 800550a:	8833      	ldrh	r3, [r6, #0]
  h_ = (((uint16_t)comp_data.humidity * 1049 + 500) >> 20); // fast_divide_by_1000
 800550c:	9403      	str	r4, [sp, #12]
  printf("h_ = %d   h_old = %d   t_ = %d   t_old = %d\n", h_, H_old, t_, T_old);
 800550e:	9300      	str	r3, [sp, #0]
 8005510:	4653      	mov	r3, sl
 8005512:	f001 fc6d 	bl	8006df0 <printf_>
  if ((t_ != T_old) | (vbat_output_flag > BAT_OUTPUT_MAX_PERIOD))
 8005516:	8833      	ldrh	r3, [r6, #0]
 8005518:	882f      	ldrh	r7, [r5, #0]
 800551a:	455b      	cmp	r3, fp
 800551c:	d145      	bne.n	80055aa <main+0x1fa>
 800551e:	2f1e      	cmp	r7, #30
 8005520:	d843      	bhi.n	80055aa <main+0x1fa>
  deepPowerDown(30);                                             // 30 seconds deep power down
 8005522:	201e      	movs	r0, #30
    LED1_OFF();
 8005524:	2580      	movs	r5, #128	@ 0x80
  deepPowerDown(30);                                             // 30 seconds deep power down
 8005526:	f7fe facd 	bl	8003ac4 <deepPowerDown>
    LED1_ON();
 800552a:	2602      	movs	r6, #2
 800552c:	4c6d      	ldr	r4, [pc, #436]	@ (80056e4 <main+0x334>)
    LED1_OFF();
 800552e:	02ad      	lsls	r5, r5, #10
    HAL_Delay(100);
 8005530:	2064      	movs	r0, #100	@ 0x64
    LED1_ON();
 8005532:	61a6      	str	r6, [r4, #24]
    HAL_Delay(100);
 8005534:	f001 ff00 	bl	8007338 <HAL_Delay>
    HAL_Delay(100);
 8005538:	2064      	movs	r0, #100	@ 0x64
    LED1_OFF();
 800553a:	61a5      	str	r5, [r4, #24]
    HAL_Delay(100);
 800553c:	f001 fefc 	bl	8007338 <HAL_Delay>
  while (1)
 8005540:	e7f6      	b.n	8005530 <main+0x180>
    fprintf(stderr, "Failed to stream sensor data (code %+d).", rslt);
 8005542:	4b79      	ldr	r3, [pc, #484]	@ (8005728 <main+0x378>)
 8005544:	7822      	ldrb	r2, [r4, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4978      	ldr	r1, [pc, #480]	@ (800572c <main+0x37c>)
 800554a:	68d8      	ldr	r0, [r3, #12]
 800554c:	b252      	sxtb	r2, r2
 800554e:	f007 fa89 	bl	800ca64 <fiprintf>
 8005552:	b672      	cpsid	i
  while (1)
 8005554:	e7fe      	b.n	8005554 <main+0x1a4>
    read_RTCRam(vbat_output_flag_address, &vbat_output_flag, 1); // Read vbat_output_flag from RTC RAM
 8005556:	ab04      	add	r3, sp, #16
 8005558:	469c      	mov	ip, r3
 800555a:	250e      	movs	r5, #14
 800555c:	4465      	add	r5, ip
 800555e:	2201      	movs	r2, #1
 8005560:	0029      	movs	r1, r5
 8005562:	2046      	movs	r0, #70	@ 0x46
 8005564:	f7ff febc 	bl	80052e0 <read_RTCRam>
    vbat_output_flag++;
 8005568:	882b      	ldrh	r3, [r5, #0]
    printf("\nMAIN. Startup from RTC\n");
 800556a:	4871      	ldr	r0, [pc, #452]	@ (8005730 <main+0x380>)
    vbat_output_flag++;
 800556c:	3301      	adds	r3, #1
 800556e:	802b      	strh	r3, [r5, #0]
    printf("\nMAIN. Startup from RTC\n");
 8005570:	f001 fc3e 	bl	8006df0 <printf_>
    read_RTCRam(H_old_RAM_address, &H_old, 0);
 8005574:	4b61      	ldr	r3, [pc, #388]	@ (80056fc <main+0x34c>)
 8005576:	2200      	movs	r2, #0
 8005578:	0019      	movs	r1, r3
 800557a:	2040      	movs	r0, #64	@ 0x40
 800557c:	9302      	str	r3, [sp, #8]
 800557e:	f7ff feaf 	bl	80052e0 <read_RTCRam>
    read_RTCRam(T_old_RAM_address, &T_old, 0);
 8005582:	4e5f      	ldr	r6, [pc, #380]	@ (8005700 <main+0x350>)
 8005584:	2200      	movs	r2, #0
 8005586:	0031      	movs	r1, r6
 8005588:	2042      	movs	r0, #66	@ 0x42
 800558a:	f7ff fea9 	bl	80052e0 <read_RTCRam>
    read_RTCRam(vbat_old_RAM_address, &vbat_old, 0);
 800558e:	4b5d      	ldr	r3, [pc, #372]	@ (8005704 <main+0x354>)
 8005590:	2200      	movs	r2, #0
 8005592:	0019      	movs	r1, r3
 8005594:	2044      	movs	r0, #68	@ 0x44
 8005596:	4699      	mov	r9, r3
 8005598:	f7ff fea2 	bl	80052e0 <read_RTCRam>
    initialized_flag = read(initialized_flag_address); // uint8_t
 800559c:	2048      	movs	r0, #72	@ 0x48
 800559e:	f7ff fb75 	bl	8004c8c <read>
 80055a2:	4b59      	ldr	r3, [pc, #356]	@ (8005708 <main+0x358>)
 80055a4:	4698      	mov	r8, r3
 80055a6:	7018      	strb	r0, [r3, #0]
 80055a8:	e774      	b.n	8005494 <main+0xe4>
  h_ = (((uint16_t)comp_data.humidity * 1049 + 500) >> 20); // fast_divide_by_1000
 80055aa:	466b      	mov	r3, sp
 80055ac:	899b      	ldrh	r3, [r3, #12]
  data[0] = (uint8_t)(write_data & 0xFF);        // Lower byte
 80055ae:	ac07      	add	r4, sp, #28
  h_ = (((uint16_t)comp_data.humidity * 1049 + 500) >> 20); // fast_divide_by_1000
 80055b0:	9304      	str	r3, [sp, #16]
  data[0] = (uint8_t)(write_data & 0xFF);        // Lower byte
 80055b2:	4653      	mov	r3, sl
 80055b4:	7023      	strb	r3, [r4, #0]
  data[1] = (uint8_t)((write_data >> 8) & 0xFF); // Upper byte
 80055b6:	465b      	mov	r3, fp
  uint8_t humidity_new = 0;
 80055b8:	2600      	movs	r6, #0
  data[1] = (uint8_t)((write_data >> 8) & 0xFF); // Upper byte
 80055ba:	0a1b      	lsrs	r3, r3, #8
 80055bc:	7063      	strb	r3, [r4, #1]
  return writeRam(address, (uint8_t *)data, sizeof(data), lock);
 80055be:	2202      	movs	r2, #2
 80055c0:	2301      	movs	r3, #1
 80055c2:	0021      	movs	r1, r4
 80055c4:	2042      	movs	r0, #66	@ 0x42
 80055c6:	f7ff f8ff 	bl	80047c8 <writeRam>
  uint8_t battery_new = 0;
 80055ca:	46b2      	mov	sl, r6
    if (vbat_output_flag > 15) // output Vbat and Hum after every 10 min; (vbat_output_flag >= 10)
 80055cc:	2f0f      	cmp	r7, #15
 80055ce:	d832      	bhi.n	8005636 <main+0x286>
    PAPER_ON_H();
 80055d0:	2280      	movs	r2, #128	@ 0x80
 80055d2:	4b44      	ldr	r3, [pc, #272]	@ (80056e4 <main+0x334>)
 80055d4:	0212      	lsls	r2, r2, #8
 80055d6:	619a      	str	r2, [r3, #24]
    printf("initialized_flag5 = 0x%x\n",initialized_flag);
 80055d8:	4643      	mov	r3, r8
 80055da:	4856      	ldr	r0, [pc, #344]	@ (8005734 <main+0x384>)
 80055dc:	7819      	ldrb	r1, [r3, #0]
 80055de:	f001 fc07 	bl	8006df0 <printf_>
    if(initialized_flag == 0){
 80055e2:	4643      	mov	r3, r8
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d014      	beq.n	8005614 <main+0x264>
        EPD_1IN54_V2_Reset();
 80055ea:	f005 f88d 	bl	800a708 <EPD_1IN54_V2_Reset>
        ESP_Init_standby();
 80055ee:	f006 fbbd 	bl	800bd6c <ESP_Init_standby>
    	temperature_out(t_);
 80055f2:	4658      	mov	r0, fp
 80055f4:	f006 fa16 	bl	800ba24 <temperature_out>
    if(battery_new){
 80055f8:	4653      	mov	r3, sl
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d15b      	bne.n	80056b6 <main+0x306>
    if(humidity_new){
 80055fe:	2e00      	cmp	r6, #0
 8005600:	d155      	bne.n	80056ae <main+0x2fe>
    EPD_1IN54_V2_DisplayPart(BlackImage);
 8005602:	4b4d      	ldr	r3, [pc, #308]	@ (8005738 <main+0x388>)
 8005604:	6818      	ldr	r0, [r3, #0]
 8005606:	f005 fb69 	bl	800acdc <EPD_1IN54_V2_DisplayPart>
    PAPER_ON_L();         // e-Paper OFF
 800560a:	2280      	movs	r2, #128	@ 0x80
 800560c:	4b35      	ldr	r3, [pc, #212]	@ (80056e4 <main+0x334>)
 800560e:	0612      	lsls	r2, r2, #24
 8005610:	619a      	str	r2, [r3, #24]
 8005612:	e786      	b.n	8005522 <main+0x172>
    	ESP_Init();
 8005614:	f006 fa78 	bl	800bb08 <ESP_Init>
        initialized_flag = 1; // Flag that ESP is initialized, to do it only once
 8005618:	4643      	mov	r3, r8
 800561a:	2101      	movs	r1, #1
        write(initialized_flag_address, initialized_flag);
 800561c:	2048      	movs	r0, #72	@ 0x48
        initialized_flag = 1; // Flag that ESP is initialized, to do it only once
 800561e:	7019      	strb	r1, [r3, #0]
        write(initialized_flag_address, initialized_flag);
 8005620:	f7ff fbb2 	bl	8004d88 <write>
        printf("initialized_flag = 0x%x\n",read(initialized_flag_address));
 8005624:	2048      	movs	r0, #72	@ 0x48
 8005626:	f7ff fb31 	bl	8004c8c <read>
 800562a:	4b44      	ldr	r3, [pc, #272]	@ (800573c <main+0x38c>)
 800562c:	0001      	movs	r1, r0
 800562e:	0018      	movs	r0, r3
 8005630:	f001 fbde 	bl	8006df0 <printf_>
 8005634:	e7dd      	b.n	80055f2 <main+0x242>
  return writeRam(address, (uint8_t *)data, sizeof(data), lock);
 8005636:	2301      	movs	r3, #1
 8005638:	2202      	movs	r2, #2
 800563a:	0021      	movs	r1, r4
  data[0] = (uint8_t)(write_data & 0xFF);        // Lower byte
 800563c:	8026      	strh	r6, [r4, #0]
  return writeRam(address, (uint8_t *)data, sizeof(data), lock);
 800563e:	2046      	movs	r0, #70	@ 0x46
      vbat_output_flag = 0;
 8005640:	802e      	strh	r6, [r5, #0]
  return writeRam(address, (uint8_t *)data, sizeof(data), lock);
 8005642:	f7ff f8c1 	bl	80047c8 <writeRam>
      Activate_ADC();
 8005646:	f7ff fcd9 	bl	8004ffc <Activate_ADC>
      vBat = get_vbat();
 800564a:	f7ff fc99 	bl	8004f80 <get_vbat>
      printf("vBat = %d, vbat_old = %d\n", vBat, vbat_old);
 800564e:	464b      	mov	r3, r9
      vBat = ((uint32_t)vBat * 6554 + 2) >> 16; // fast_divide_by_10
 8005650:	4d34      	ldr	r5, [pc, #208]	@ (8005724 <main+0x374>)
      printf("vBat = %d, vbat_old = %d\n", vBat, vbat_old);
 8005652:	881a      	ldrh	r2, [r3, #0]
      vBat = ((uint32_t)vBat * 6554 + 2) >> 16; // fast_divide_by_10
 8005654:	4345      	muls	r5, r0
 8005656:	3502      	adds	r5, #2
 8005658:	0c2d      	lsrs	r5, r5, #16
      printf("vBat = %d, vbat_old = %d\n", vBat, vbat_old);
 800565a:	0029      	movs	r1, r5
 800565c:	4838      	ldr	r0, [pc, #224]	@ (8005740 <main+0x390>)
      vBat = ((uint32_t)vBat * 6554 + 2) >> 16; // fast_divide_by_10
 800565e:	9505      	str	r5, [sp, #20]
      printf("vBat = %d, vbat_old = %d\n", vBat, vbat_old);
 8005660:	b2ae      	uxth	r6, r5
 8005662:	f001 fbc5 	bl	8006df0 <printf_>
      if (vBat < UNDERVOLTAGE) // #define UNDERVOLTAGE 220
 8005666:	2ddb      	cmp	r5, #219	@ 0xdb
 8005668:	d92a      	bls.n	80056c0 <main+0x310>
      if (!(vBat == vbat_old)) // it's going to output
 800566a:	464b      	mov	r3, r9
  uint8_t battery_new = 0;
 800566c:	2200      	movs	r2, #0
      if (!(vBat == vbat_old)) // it's going to output
 800566e:	881b      	ldrh	r3, [r3, #0]
  uint8_t battery_new = 0;
 8005670:	4692      	mov	sl, r2
      if (!(vBat == vbat_old)) // it's going to output
 8005672:	42ab      	cmp	r3, r5
 8005674:	d00a      	beq.n	800568c <main+0x2dc>
  data[1] = (uint8_t)((write_data >> 8) & 0xFF); // Upper byte
 8005676:	0a36      	lsrs	r6, r6, #8
  return writeRam(address, (uint8_t *)data, sizeof(data), lock);
 8005678:	2301      	movs	r3, #1
 800567a:	0021      	movs	r1, r4
 800567c:	2044      	movs	r0, #68	@ 0x44
  data[0] = (uint8_t)(write_data & 0xFF);        // Lower byte
 800567e:	7025      	strb	r5, [r4, #0]
  data[1] = (uint8_t)((write_data >> 8) & 0xFF); // Upper byte
 8005680:	7066      	strb	r6, [r4, #1]
  return writeRam(address, (uint8_t *)data, sizeof(data), lock);
 8005682:	3202      	adds	r2, #2
 8005684:	f7ff f8a0 	bl	80047c8 <writeRam>
        battery_new = 1;
 8005688:	2301      	movs	r3, #1
 800568a:	469a      	mov	sl, r3
      if (h_ != H_old)
 800568c:	9b02      	ldr	r3, [sp, #8]
 800568e:	9a04      	ldr	r2, [sp, #16]
 8005690:	881b      	ldrh	r3, [r3, #0]
  uint8_t humidity_new = 0;
 8005692:	2600      	movs	r6, #0
      if (h_ != H_old)
 8005694:	4293      	cmp	r3, r2
 8005696:	d09b      	beq.n	80055d0 <main+0x220>
  data[0] = (uint8_t)(write_data & 0xFF);        // Lower byte
 8005698:	9b03      	ldr	r3, [sp, #12]
  data[1] = (uint8_t)((write_data >> 8) & 0xFF); // Upper byte
 800569a:	7066      	strb	r6, [r4, #1]
  data[0] = (uint8_t)(write_data & 0xFF);        // Lower byte
 800569c:	7023      	strb	r3, [r4, #0]
  return writeRam(address, (uint8_t *)data, sizeof(data), lock);
 800569e:	2202      	movs	r2, #2
 80056a0:	2301      	movs	r3, #1
 80056a2:	0021      	movs	r1, r4
 80056a4:	2040      	movs	r0, #64	@ 0x40
 80056a6:	f7ff f88f 	bl	80047c8 <writeRam>
        humidity_new = 1;
 80056aa:	3601      	adds	r6, #1
 80056ac:	e790      	b.n	80055d0 <main+0x220>
    	humidity_out(h_);
 80056ae:	9804      	ldr	r0, [sp, #16]
 80056b0:	f006 f9fa 	bl	800baa8 <humidity_out>
 80056b4:	e7a5      	b.n	8005602 <main+0x252>
    	battery_out(vBat);
 80056b6:	466b      	mov	r3, sp
 80056b8:	8a98      	ldrh	r0, [r3, #20]
 80056ba:	f006 f97b 	bl	800b9b4 <battery_out>
 80056be:	e79e      	b.n	80055fe <main+0x24e>
        final_message(vBat);
 80056c0:	0030      	movs	r0, r6
 80056c2:	f006 faf5 	bl	800bcb0 <final_message>
        go_down(vBat); // shutdown forever  ****  R E W R I T E !!!   *****
 80056c6:	0030      	movs	r0, r6
 80056c8:	f7ff fe62 	bl	8005390 <go_down>
 80056cc:	e7cd      	b.n	800566a <main+0x2ba>
 80056ce:	46c0      	nop			@ (mov r8, r8)
 80056d0:	200003d8 	.word	0x200003d8
 80056d4:	0800a4d1 	.word	0x0800a4d1
 80056d8:	0800a541 	.word	0x0800a541
 80056dc:	0800a4c9 	.word	0x0800a4c9
 80056e0:	40015800 	.word	0x40015800
 80056e4:	50000400 	.word	0x50000400
 80056e8:	40013000 	.word	0x40013000
 80056ec:	0800ea8e 	.word	0x0800ea8e
 80056f0:	0800eae0 	.word	0x0800eae0
 80056f4:	00000bb8 	.word	0x00000bb8
 80056f8:	0800eb00 	.word	0x0800eb00
 80056fc:	200003ce 	.word	0x200003ce
 8005700:	200003cc 	.word	0x200003cc
 8005704:	200003ca 	.word	0x200003ca
 8005708:	200003c8 	.word	0x200003c8
 800570c:	0800eb2c 	.word	0x0800eb2c
 8005710:	20000418 	.word	0x20000418
 8005714:	200003d0 	.word	0x200003d0
 8005718:	20000550 	.word	0x20000550
 800571c:	00000419 	.word	0x00000419
 8005720:	0800eb88 	.word	0x0800eb88
 8005724:	0000199a 	.word	0x0000199a
 8005728:	20000184 	.word	0x20000184
 800572c:	0800eb5c 	.word	0x0800eb5c
 8005730:	0800eb10 	.word	0x0800eb10
 8005734:	0800ebd4 	.word	0x0800ebd4
 8005738:	2000057c 	.word	0x2000057c
 800573c:	0800ebf0 	.word	0x0800ebf0
 8005740:	0800ebb8 	.word	0x0800ebb8

08005744 <Error_Handler>:
 8005744:	b672      	cpsid	i
  while (1)
 8005746:	e7fe      	b.n	8005746 <Error_Handler+0x2>

08005748 <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
 8005748:	429a      	cmp	r2, r3
 800574a:	d200      	bcs.n	800574e <_out_buffer+0x6>
    ((char*)buffer)[idx] = character;
 800574c:	5488      	strb	r0, [r1, r2]
  }
}
 800574e:	4770      	bx	lr

08005750 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8005750:	4770      	bx	lr
 8005752:	46c0      	nop			@ (mov r8, r8)

08005754 <_out_rev>:
}


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8005754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005756:	4657      	mov	r7, sl
 8005758:	4645      	mov	r5, r8
 800575a:	46de      	mov	lr, fp
 800575c:	464e      	mov	r6, r9
 800575e:	b5e0      	push	{r5, r6, r7, lr}
 8005760:	4698      	mov	r8, r3
 8005762:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005764:	0006      	movs	r6, r0
 8005766:	469a      	mov	sl, r3
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8005768:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
{
 800576a:	000f      	movs	r7, r1
 800576c:	4693      	mov	fp, r2
 800576e:	0015      	movs	r5, r2
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8005770:	079b      	lsls	r3, r3, #30
 8005772:	d110      	bne.n	8005796 <_out_rev+0x42>
    for (size_t i = len; i < width; i++) {
 8005774:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005776:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005778:	4293      	cmp	r3, r2
 800577a:	d20c      	bcs.n	8005796 <_out_rev+0x42>
 800577c:	0013      	movs	r3, r2
 800577e:	465c      	mov	r4, fp
 8005780:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005782:	1a9d      	subs	r5, r3, r2
 8005784:	445d      	add	r5, fp
      out(' ', buffer, idx++, maxlen);
 8005786:	0022      	movs	r2, r4
 8005788:	4643      	mov	r3, r8
 800578a:	3401      	adds	r4, #1
 800578c:	0039      	movs	r1, r7
 800578e:	2020      	movs	r0, #32
 8005790:	47b0      	blx	r6
    for (size_t i = len; i < width; i++) {
 8005792:	42a5      	cmp	r5, r4
 8005794:	d1f7      	bne.n	8005786 <_out_rev+0x32>
    }
  }

  // reverse string
  while (len) {
 8005796:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005798:	1963      	adds	r3, r4, r5
 800579a:	2c00      	cmp	r4, #0
 800579c:	d009      	beq.n	80057b2 <_out_rev+0x5e>
 800579e:	001d      	movs	r5, r3
    out(buf[--len], buffer, idx++, maxlen);
 80057a0:	4653      	mov	r3, sl
 80057a2:	1b2a      	subs	r2, r5, r4
 80057a4:	3c01      	subs	r4, #1
 80057a6:	5d18      	ldrb	r0, [r3, r4]
 80057a8:	0039      	movs	r1, r7
 80057aa:	4643      	mov	r3, r8
 80057ac:	47b0      	blx	r6
  while (len) {
 80057ae:	2c00      	cmp	r4, #0
 80057b0:	d1f6      	bne.n	80057a0 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 80057b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80057b4:	079b      	lsls	r3, r3, #30
 80057b6:	d50e      	bpl.n	80057d6 <_out_rev+0x82>
    while (idx - start_idx < width) {
 80057b8:	465b      	mov	r3, fp
 80057ba:	1aec      	subs	r4, r5, r3
 80057bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80057be:	42a3      	cmp	r3, r4
 80057c0:	d909      	bls.n	80057d6 <_out_rev+0x82>
 80057c2:	4699      	mov	r9, r3
      out(' ', buffer, idx++, maxlen);
 80057c4:	002a      	movs	r2, r5
 80057c6:	4643      	mov	r3, r8
 80057c8:	0039      	movs	r1, r7
 80057ca:	2020      	movs	r0, #32
    while (idx - start_idx < width) {
 80057cc:	3401      	adds	r4, #1
      out(' ', buffer, idx++, maxlen);
 80057ce:	47b0      	blx	r6
 80057d0:	3501      	adds	r5, #1
    while (idx - start_idx < width) {
 80057d2:	45a1      	cmp	r9, r4
 80057d4:	d8f6      	bhi.n	80057c4 <_out_rev+0x70>
    }
  }

  return idx;
}
 80057d6:	0028      	movs	r0, r5
 80057d8:	bcf0      	pop	{r4, r5, r6, r7}
 80057da:	46bb      	mov	fp, r7
 80057dc:	46b2      	mov	sl, r6
 80057de:	46a9      	mov	r9, r5
 80057e0:	46a0      	mov	r8, r4
 80057e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080057e4 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80057e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057e6:	464f      	mov	r7, r9
 80057e8:	4646      	mov	r6, r8
 80057ea:	46d6      	mov	lr, sl
 80057ec:	b5c0      	push	{r6, r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	4698      	mov	r8, r3
 80057f2:	ab0e      	add	r3, sp, #56	@ 0x38
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	4694      	mov	ip, r2
 80057f8:	4699      	mov	r9, r3
 80057fa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80057fc:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80057fe:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8005800:	9e11      	ldr	r6, [sp, #68]	@ 0x44
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8005802:	079a      	lsls	r2, r3, #30
 8005804:	d424      	bmi.n	8005850 <_ntoa_format+0x6c>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8005806:	2e00      	cmp	r6, #0
 8005808:	d16a      	bne.n	80058e0 <_ntoa_format+0xfc>
      width--;
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800580a:	42bc      	cmp	r4, r7
 800580c:	d220      	bcs.n	8005850 <_ntoa_format+0x6c>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800580e:	2201      	movs	r2, #1
 8005810:	401a      	ands	r2, r3
 8005812:	4692      	mov	sl, r2
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005814:	2c20      	cmp	r4, #32
 8005816:	d100      	bne.n	800581a <_ntoa_format+0x36>
 8005818:	e0d2      	b.n	80059c0 <_ntoa_format+0x1dc>
 800581a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800581c:	1e55      	subs	r5, r2, #1
      buf[len++] = '0';
 800581e:	2230      	movs	r2, #48	@ 0x30
 8005820:	e001      	b.n	8005826 <_ntoa_format+0x42>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005822:	2c20      	cmp	r4, #32
 8005824:	d030      	beq.n	8005888 <_ntoa_format+0xa4>
      buf[len++] = '0';
 8005826:	3401      	adds	r4, #1
 8005828:	552a      	strb	r2, [r5, r4]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800582a:	42a7      	cmp	r7, r4
 800582c:	d8f9      	bhi.n	8005822 <_ntoa_format+0x3e>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800582e:	4652      	mov	r2, sl
 8005830:	2a00      	cmp	r2, #0
 8005832:	d00d      	beq.n	8005850 <_ntoa_format+0x6c>
 8005834:	42b4      	cmp	r4, r6
 8005836:	d20b      	bcs.n	8005850 <_ntoa_format+0x6c>
 8005838:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800583a:	1e55      	subs	r5, r2, #1
      buf[len++] = '0';
 800583c:	2230      	movs	r2, #48	@ 0x30
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800583e:	2c20      	cmp	r4, #32
 8005840:	d102      	bne.n	8005848 <_ntoa_format+0x64>
 8005842:	e026      	b.n	8005892 <_ntoa_format+0xae>
 8005844:	2c20      	cmp	r4, #32
 8005846:	d063      	beq.n	8005910 <_ntoa_format+0x12c>
      buf[len++] = '0';
 8005848:	3401      	adds	r4, #1
 800584a:	552a      	strb	r2, [r5, r4]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800584c:	42b4      	cmp	r4, r6
 800584e:	d1f9      	bne.n	8005844 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8005850:	06da      	lsls	r2, r3, #27
 8005852:	d534      	bpl.n	80058be <_ntoa_format+0xda>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8005854:	055a      	lsls	r2, r3, #21
 8005856:	d464      	bmi.n	8005922 <_ntoa_format+0x13e>
 8005858:	2c00      	cmp	r4, #0
 800585a:	d15e      	bne.n	800591a <_ntoa_format+0x136>
      len--;
      if (len && (base == 16U)) {
        len--;
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800585c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800585e:	2a10      	cmp	r2, #16
 8005860:	d100      	bne.n	8005864 <_ntoa_format+0x80>
 8005862:	e097      	b.n	8005994 <_ntoa_format+0x1b0>
      buf[len++] = 'x';
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005864:	2a02      	cmp	r2, #2
 8005866:	d100      	bne.n	800586a <_ntoa_format+0x86>
 8005868:	e0a8      	b.n	80059bc <_ntoa_format+0x1d8>
      buf[len++] = 'b';
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
      buf[len++] = '0';
 800586a:	2230      	movs	r2, #48	@ 0x30
 800586c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800586e:	7022      	strb	r2, [r4, #0]
 8005870:	2401      	movs	r4, #1
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    if (negative) {
 8005872:	464a      	mov	r2, r9
 8005874:	2a00      	cmp	r2, #0
 8005876:	d15e      	bne.n	8005936 <_ntoa_format+0x152>
      buf[len++] = '-';
    }
    else if (flags & FLAGS_PLUS) {
 8005878:	075a      	lsls	r2, r3, #29
 800587a:	d400      	bmi.n	800587e <_ntoa_format+0x9a>
 800587c:	e083      	b.n	8005986 <_ntoa_format+0x1a2>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800587e:	222b      	movs	r2, #43	@ 0x2b
 8005880:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8005882:	552a      	strb	r2, [r5, r4]
 8005884:	3401      	adds	r4, #1
 8005886:	e01c      	b.n	80058c2 <_ntoa_format+0xde>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005888:	4652      	mov	r2, sl
 800588a:	2a00      	cmp	r2, #0
 800588c:	d002      	beq.n	8005894 <_ntoa_format+0xb0>
 800588e:	2e20      	cmp	r6, #32
 8005890:	d93e      	bls.n	8005910 <_ntoa_format+0x12c>
  if (flags & FLAGS_HASH) {
 8005892:	2420      	movs	r4, #32
 8005894:	06da      	lsls	r2, r3, #27
 8005896:	d514      	bpl.n	80058c2 <_ntoa_format+0xde>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8005898:	055a      	lsls	r2, r3, #21
 800589a:	d412      	bmi.n	80058c2 <_ntoa_format+0xde>
 800589c:	2f20      	cmp	r7, #32
 800589e:	d100      	bne.n	80058a2 <_ntoa_format+0xbe>
 80058a0:	e0a1      	b.n	80059e6 <_ntoa_format+0x202>
 80058a2:	2e20      	cmp	r6, #32
 80058a4:	d13d      	bne.n	8005922 <_ntoa_format+0x13e>
      len--;
 80058a6:	2620      	movs	r6, #32
 80058a8:	221f      	movs	r2, #31
 80058aa:	0034      	movs	r4, r6
      if (len && (base == 16U)) {
 80058ac:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80058ae:	2d10      	cmp	r5, #16
 80058b0:	d100      	bne.n	80058b4 <_ntoa_format+0xd0>
 80058b2:	e08b      	b.n	80059cc <_ntoa_format+0x1e8>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80058b4:	2d02      	cmp	r5, #2
 80058b6:	d052      	beq.n	800595e <_ntoa_format+0x17a>
      buf[len++] = '0';
 80058b8:	2530      	movs	r5, #48	@ 0x30
 80058ba:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80058bc:	54bd      	strb	r5, [r7, r2]
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80058be:	2c20      	cmp	r4, #32
 80058c0:	d1d7      	bne.n	8005872 <_ntoa_format+0x8e>
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80058c2:	9303      	str	r3, [sp, #12]
 80058c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80058c6:	4662      	mov	r2, ip
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	9602      	str	r6, [sp, #8]
 80058cc:	4643      	mov	r3, r8
 80058ce:	9401      	str	r4, [sp, #4]
 80058d0:	f7ff ff40 	bl	8005754 <_out_rev>
}
 80058d4:	b004      	add	sp, #16
 80058d6:	bce0      	pop	{r5, r6, r7}
 80058d8:	46ba      	mov	sl, r7
 80058da:	46b1      	mov	r9, r6
 80058dc:	46a8      	mov	r8, r5
 80058de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80058e0:	2201      	movs	r2, #1
 80058e2:	0015      	movs	r5, r2
 80058e4:	401d      	ands	r5, r3
 80058e6:	46aa      	mov	sl, r5
 80058e8:	421a      	tst	r2, r3
 80058ea:	d029      	beq.n	8005940 <_ntoa_format+0x15c>
 80058ec:	464a      	mov	r2, r9
 80058ee:	2a00      	cmp	r2, #0
 80058f0:	d139      	bne.n	8005966 <_ntoa_format+0x182>
 80058f2:	320c      	adds	r2, #12
 80058f4:	421a      	tst	r2, r3
 80058f6:	d136      	bne.n	8005966 <_ntoa_format+0x182>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80058f8:	42bc      	cmp	r4, r7
 80058fa:	d29b      	bcs.n	8005834 <_ntoa_format+0x50>
 80058fc:	2c20      	cmp	r4, #32
 80058fe:	d000      	beq.n	8005902 <_ntoa_format+0x11e>
 8005900:	e78b      	b.n	800581a <_ntoa_format+0x36>
  if (flags & FLAGS_HASH) {
 8005902:	2210      	movs	r2, #16
 8005904:	401a      	ands	r2, r3
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005906:	2e20      	cmp	r6, #32
 8005908:	d8c3      	bhi.n	8005892 <_ntoa_format+0xae>
  if (flags & FLAGS_HASH) {
 800590a:	2a00      	cmp	r2, #0
 800590c:	d1a2      	bne.n	8005854 <_ntoa_format+0x70>
 800590e:	e7d8      	b.n	80058c2 <_ntoa_format+0xde>
 8005910:	2420      	movs	r4, #32
 8005912:	06da      	lsls	r2, r3, #27
 8005914:	d5d5      	bpl.n	80058c2 <_ntoa_format+0xde>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8005916:	055a      	lsls	r2, r3, #21
 8005918:	d403      	bmi.n	8005922 <_ntoa_format+0x13e>
 800591a:	42a7      	cmp	r7, r4
 800591c:	d025      	beq.n	800596a <_ntoa_format+0x186>
 800591e:	42b4      	cmp	r4, r6
 8005920:	d023      	beq.n	800596a <_ntoa_format+0x186>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005922:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005924:	2a10      	cmp	r2, #16
 8005926:	d025      	beq.n	8005974 <_ntoa_format+0x190>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005928:	2a02      	cmp	r2, #2
 800592a:	d014      	beq.n	8005956 <_ntoa_format+0x172>
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800592c:	2c20      	cmp	r4, #32
 800592e:	d0c8      	beq.n	80058c2 <_ntoa_format+0xde>
      buf[len++] = '0';
 8005930:	0022      	movs	r2, r4
 8005932:	3401      	adds	r4, #1
 8005934:	e7c0      	b.n	80058b8 <_ntoa_format+0xd4>
      buf[len++] = '-';
 8005936:	222d      	movs	r2, #45	@ 0x2d
 8005938:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800593a:	552a      	strb	r2, [r5, r4]
 800593c:	3401      	adds	r4, #1
 800593e:	e7c0      	b.n	80058c2 <_ntoa_format+0xde>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005940:	42bc      	cmp	r4, r7
 8005942:	d300      	bcc.n	8005946 <_ntoa_format+0x162>
 8005944:	e784      	b.n	8005850 <_ntoa_format+0x6c>
 8005946:	2c20      	cmp	r4, #32
 8005948:	d000      	beq.n	800594c <_ntoa_format+0x168>
 800594a:	e766      	b.n	800581a <_ntoa_format+0x36>
  if (flags & FLAGS_HASH) {
 800594c:	2210      	movs	r2, #16
 800594e:	401a      	ands	r2, r3
 8005950:	2a00      	cmp	r2, #0
 8005952:	d1e0      	bne.n	8005916 <_ntoa_format+0x132>
 8005954:	e7b5      	b.n	80058c2 <_ntoa_format+0xde>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005956:	2c20      	cmp	r4, #32
 8005958:	d0b3      	beq.n	80058c2 <_ntoa_format+0xde>
      buf[len++] = 'b';
 800595a:	0022      	movs	r2, r4
 800595c:	3401      	adds	r4, #1
 800595e:	2562      	movs	r5, #98	@ 0x62
 8005960:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8005962:	54bd      	strb	r5, [r7, r2]
 8005964:	e7e2      	b.n	800592c <_ntoa_format+0x148>
      width--;
 8005966:	3e01      	subs	r6, #1
 8005968:	e7c6      	b.n	80058f8 <_ntoa_format+0x114>
      len--;
 800596a:	1e62      	subs	r2, r4, #1
      if (len && (base == 16U)) {
 800596c:	2c01      	cmp	r4, #1
 800596e:	d100      	bne.n	8005972 <_ntoa_format+0x18e>
 8005970:	e774      	b.n	800585c <_ntoa_format+0x78>
 8005972:	e79b      	b.n	80058ac <_ntoa_format+0xc8>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005974:	069a      	lsls	r2, r3, #26
 8005976:	d416      	bmi.n	80059a6 <_ntoa_format+0x1c2>
 8005978:	2c20      	cmp	r4, #32
 800597a:	d0a2      	beq.n	80058c2 <_ntoa_format+0xde>
      buf[len++] = 'x';
 800597c:	2278      	movs	r2, #120	@ 0x78
 800597e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8005980:	552a      	strb	r2, [r5, r4]
 8005982:	3401      	adds	r4, #1
 8005984:	e7d2      	b.n	800592c <_ntoa_format+0x148>
    else if (flags & FLAGS_SPACE) {
 8005986:	071a      	lsls	r2, r3, #28
 8005988:	d59b      	bpl.n	80058c2 <_ntoa_format+0xde>
      buf[len++] = ' ';
 800598a:	2220      	movs	r2, #32
 800598c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800598e:	552a      	strb	r2, [r5, r4]
 8005990:	3401      	adds	r4, #1
 8005992:	e796      	b.n	80058c2 <_ntoa_format+0xde>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005994:	069a      	lsls	r2, r3, #26
 8005996:	d40f      	bmi.n	80059b8 <_ntoa_format+0x1d4>
 8005998:	2278      	movs	r2, #120	@ 0x78
      buf[len++] = 'x';
 800599a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800599c:	7022      	strb	r2, [r4, #0]
      buf[len++] = '0';
 800599e:	2230      	movs	r2, #48	@ 0x30
 80059a0:	7062      	strb	r2, [r4, #1]
 80059a2:	2402      	movs	r4, #2
 80059a4:	e765      	b.n	8005872 <_ntoa_format+0x8e>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80059a6:	2c20      	cmp	r4, #32
 80059a8:	d100      	bne.n	80059ac <_ntoa_format+0x1c8>
 80059aa:	e78a      	b.n	80058c2 <_ntoa_format+0xde>
      buf[len++] = 'X';
 80059ac:	2558      	movs	r5, #88	@ 0x58
      buf[len++] = 'b';
 80059ae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80059b0:	1912      	adds	r2, r2, r4
      buf[len++] = 'X';
 80059b2:	7015      	strb	r5, [r2, #0]
      buf[len++] = 'b';
 80059b4:	3401      	adds	r4, #1
      buf[len++] = 'X';
 80059b6:	e7b9      	b.n	800592c <_ntoa_format+0x148>
 80059b8:	2258      	movs	r2, #88	@ 0x58
 80059ba:	e7ee      	b.n	800599a <_ntoa_format+0x1b6>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80059bc:	2262      	movs	r2, #98	@ 0x62
 80059be:	e7ec      	b.n	800599a <_ntoa_format+0x1b6>
  if (flags & FLAGS_HASH) {
 80059c0:	2210      	movs	r2, #16
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80059c2:	4655      	mov	r5, sl
  if (flags & FLAGS_HASH) {
 80059c4:	401a      	ands	r2, r3
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80059c6:	2d00      	cmp	r5, #0
 80059c8:	d19f      	bne.n	800590a <_ntoa_format+0x126>
 80059ca:	e7c1      	b.n	8005950 <_ntoa_format+0x16c>
        len--;
 80059cc:	3c02      	subs	r4, #2
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80059ce:	069d      	lsls	r5, r3, #26
 80059d0:	d404      	bmi.n	80059dc <_ntoa_format+0x1f8>
      buf[len++] = 'x';
 80059d2:	2578      	movs	r5, #120	@ 0x78
 80059d4:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80059d6:	553d      	strb	r5, [r7, r4]
 80059d8:	0014      	movs	r4, r2
 80059da:	e7a9      	b.n	8005930 <_ntoa_format+0x14c>
      buf[len++] = 'X';
 80059dc:	2558      	movs	r5, #88	@ 0x58
 80059de:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80059e0:	553d      	strb	r5, [r7, r4]
 80059e2:	0014      	movs	r4, r2
 80059e4:	e7a4      	b.n	8005930 <_ntoa_format+0x14c>
      len--;
 80059e6:	221f      	movs	r2, #31
 80059e8:	e760      	b.n	80058ac <_ntoa_format+0xc8>
 80059ea:	46c0      	nop			@ (mov r8, r8)

080059ec <_out_char>:
  if (character) {
 80059ec:	2800      	cmp	r0, #0
 80059ee:	d005      	beq.n	80059fc <_out_char+0x10>


void _putchar(char character) {
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	while( !( USART2->ISR & USART_ISR_TXE_TXFNF ) ) {};
 80059f0:	2180      	movs	r1, #128	@ 0x80
 80059f2:	4a03      	ldr	r2, [pc, #12]	@ (8005a00 <_out_char+0x14>)
 80059f4:	69d3      	ldr	r3, [r2, #28]
 80059f6:	4219      	tst	r1, r3
 80059f8:	d0fc      	beq.n	80059f4 <_out_char+0x8>
      USART2->TDR = character;
 80059fa:	6290      	str	r0, [r2, #40]	@ 0x28
}
 80059fc:	4770      	bx	lr
 80059fe:	46c0      	nop			@ (mov r8, r8)
 8005a00:	40004400 	.word	0x40004400

08005a04 <_etoa>:
{
 8005a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a06:	46de      	mov	lr, fp
 8005a08:	464e      	mov	r6, r9
 8005a0a:	4645      	mov	r5, r8
 8005a0c:	4657      	mov	r7, sl
 8005a0e:	b5e0      	push	{r5, r6, r7, lr}
 8005a10:	b099      	sub	sp, #100	@ 0x64
 8005a12:	4681      	mov	r9, r0
 8005a14:	468b      	mov	fp, r1
 8005a16:	4698      	mov	r8, r3
 8005a18:	920b      	str	r2, [sp, #44]	@ 0x2c
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8005a1a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005a1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005a1e:	0010      	movs	r0, r2
 8005a20:	0019      	movs	r1, r3
 8005a22:	f7fa fd13 	bl	800044c <__aeabi_dcmpeq>
 8005a26:	2800      	cmp	r0, #0
 8005a28:	d100      	bne.n	8005a2c <_etoa+0x28>
 8005a2a:	e198      	b.n	8005d5e <_etoa+0x35a>
 8005a2c:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8005a2e:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8005a30:	2201      	movs	r2, #1
 8005a32:	4bdc      	ldr	r3, [pc, #880]	@ (8005da4 <_etoa+0x3a0>)
 8005a34:	4252      	negs	r2, r2
 8005a36:	f7fa fd23 	bl	8000480 <__aeabi_dcmpgt>
 8005a3a:	2800      	cmp	r0, #0
 8005a3c:	d000      	beq.n	8005a40 <_etoa+0x3c>
 8005a3e:	e18e      	b.n	8005d5e <_etoa+0x35a>
 8005a40:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8005a42:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8005a44:	2201      	movs	r2, #1
 8005a46:	4bd8      	ldr	r3, [pc, #864]	@ (8005da8 <_etoa+0x3a4>)
 8005a48:	4252      	negs	r2, r2
 8005a4a:	f7fa fd05 	bl	8000458 <__aeabi_dcmplt>
 8005a4e:	2800      	cmp	r0, #0
 8005a50:	d000      	beq.n	8005a54 <_etoa+0x50>
 8005a52:	e184      	b.n	8005d5e <_etoa+0x35a>
  if (negative) {
 8005a54:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8005a56:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8005a58:	2200      	movs	r2, #0
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	f7fa fcfc 	bl	8000458 <__aeabi_dcmplt>
 8005a60:	2800      	cmp	r0, #0
 8005a62:	d000      	beq.n	8005a66 <_etoa+0x62>
 8005a64:	e1dd      	b.n	8005e22 <_etoa+0x41e>
 8005a66:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005a68:	9c23      	ldr	r4, [sp, #140]	@ 0x8c
 8005a6a:	9308      	str	r3, [sp, #32]
 8005a6c:	9409      	str	r4, [sp, #36]	@ 0x24
  if (!(flags & FLAGS_PRECISION)) {
 8005a6e:	2380      	movs	r3, #128	@ 0x80
 8005a70:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	401a      	ands	r2, r3
 8005a76:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005a78:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8005a7a:	421a      	tst	r2, r3
 8005a7c:	d101      	bne.n	8005a82 <_etoa+0x7e>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8005a7e:	2306      	movs	r3, #6
 8005a80:	9324      	str	r3, [sp, #144]	@ 0x90
  conv.F = value;
 8005a82:	9a08      	ldr	r2, [sp, #32]
 8005a84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8005a86:	0058      	lsls	r0, r3, #1
 8005a88:	4bc8      	ldr	r3, [pc, #800]	@ (8005dac <_etoa+0x3a8>)
 8005a8a:	0d40      	lsrs	r0, r0, #21
 8005a8c:	469c      	mov	ip, r3
 8005a8e:	4460      	add	r0, ip
  conv.F = value;
 8005a90:	0014      	movs	r4, r2
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8005a92:	f7fc fc9b 	bl	80023cc <__aeabi_i2d>
 8005a96:	4ac6      	ldr	r2, [pc, #792]	@ (8005db0 <_etoa+0x3ac>)
 8005a98:	4bc6      	ldr	r3, [pc, #792]	@ (8005db4 <_etoa+0x3b0>)
 8005a9a:	f7fb fdd5 	bl	8001648 <__aeabi_dmul>
 8005a9e:	4ac6      	ldr	r2, [pc, #792]	@ (8005db8 <_etoa+0x3b4>)
 8005aa0:	4bc6      	ldr	r3, [pc, #792]	@ (8005dbc <_etoa+0x3b8>)
 8005aa2:	f7fa fe29 	bl	80006f8 <__aeabi_dadd>
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8005aa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005aa8:	4ac5      	ldr	r2, [pc, #788]	@ (8005dc0 <_etoa+0x3bc>)
 8005aaa:	031b      	lsls	r3, r3, #12
 8005aac:	0b1b      	lsrs	r3, r3, #12
 8005aae:	431a      	orrs	r2, r3
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8005ab0:	0006      	movs	r6, r0
 8005ab2:	000f      	movs	r7, r1
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8005ab4:	0020      	movs	r0, r4
 8005ab6:	0011      	movs	r1, r2
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8005ab8:	4bc2      	ldr	r3, [pc, #776]	@ (8005dc4 <_etoa+0x3c0>)
 8005aba:	2200      	movs	r2, #0
 8005abc:	f7fc f88c 	bl	8001bd8 <__aeabi_dsub>
 8005ac0:	4ac1      	ldr	r2, [pc, #772]	@ (8005dc8 <_etoa+0x3c4>)
 8005ac2:	4bc2      	ldr	r3, [pc, #776]	@ (8005dcc <_etoa+0x3c8>)
 8005ac4:	f7fb fdc0 	bl	8001648 <__aeabi_dmul>
 8005ac8:	0002      	movs	r2, r0
 8005aca:	000b      	movs	r3, r1
 8005acc:	0030      	movs	r0, r6
 8005ace:	0039      	movs	r1, r7
 8005ad0:	f7fa fe12 	bl	80006f8 <__aeabi_dadd>
 8005ad4:	f7fc fc3e 	bl	8002354 <__aeabi_d2iz>
 8005ad8:	4682      	mov	sl, r0
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8005ada:	f7fc fc77 	bl	80023cc <__aeabi_i2d>
 8005ade:	4abc      	ldr	r2, [pc, #752]	@ (8005dd0 <_etoa+0x3cc>)
 8005ae0:	4bbc      	ldr	r3, [pc, #752]	@ (8005dd4 <_etoa+0x3d0>)
 8005ae2:	0004      	movs	r4, r0
 8005ae4:	000d      	movs	r5, r1
 8005ae6:	f7fb fdaf 	bl	8001648 <__aeabi_dmul>
 8005aea:	2200      	movs	r2, #0
 8005aec:	4bba      	ldr	r3, [pc, #744]	@ (8005dd8 <_etoa+0x3d4>)
 8005aee:	f7fa fe03 	bl	80006f8 <__aeabi_dadd>
 8005af2:	f7fc fc2f 	bl	8002354 <__aeabi_d2iz>
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8005af6:	4ab9      	ldr	r2, [pc, #740]	@ (8005ddc <_etoa+0x3d8>)
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8005af8:	0006      	movs	r6, r0
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8005afa:	4bb9      	ldr	r3, [pc, #740]	@ (8005de0 <_etoa+0x3dc>)
 8005afc:	0020      	movs	r0, r4
 8005afe:	0029      	movs	r1, r5
 8005b00:	f7fb fda2 	bl	8001648 <__aeabi_dmul>
 8005b04:	0004      	movs	r4, r0
 8005b06:	0030      	movs	r0, r6
 8005b08:	000d      	movs	r5, r1
 8005b0a:	960e      	str	r6, [sp, #56]	@ 0x38
 8005b0c:	f7fc fc5e 	bl	80023cc <__aeabi_i2d>
 8005b10:	4ab4      	ldr	r2, [pc, #720]	@ (8005de4 <_etoa+0x3e0>)
 8005b12:	4bb5      	ldr	r3, [pc, #724]	@ (8005de8 <_etoa+0x3e4>)
 8005b14:	f7fb fd98 	bl	8001648 <__aeabi_dmul>
 8005b18:	0002      	movs	r2, r0
 8005b1a:	000b      	movs	r3, r1
 8005b1c:	0020      	movs	r0, r4
 8005b1e:	0029      	movs	r1, r5
 8005b20:	f7fc f85a 	bl	8001bd8 <__aeabi_dsub>
  const double z2 = z * z;
 8005b24:	0002      	movs	r2, r0
 8005b26:	000b      	movs	r3, r1
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8005b28:	0006      	movs	r6, r0
 8005b2a:	000f      	movs	r7, r1
  const double z2 = z * z;
 8005b2c:	f7fb fd8c 	bl	8001648 <__aeabi_dmul>
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8005b30:	0032      	movs	r2, r6
  const double z2 = z * z;
 8005b32:	0004      	movs	r4, r0
 8005b34:	000d      	movs	r5, r1
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8005b36:	003b      	movs	r3, r7
 8005b38:	0030      	movs	r0, r6
 8005b3a:	0039      	movs	r1, r7
 8005b3c:	f7fa fddc 	bl	80006f8 <__aeabi_dadd>
 8005b40:	2200      	movs	r2, #0
 8005b42:	900c      	str	r0, [sp, #48]	@ 0x30
 8005b44:	910d      	str	r1, [sp, #52]	@ 0x34
 8005b46:	4ba9      	ldr	r3, [pc, #676]	@ (8005dec <_etoa+0x3e8>)
 8005b48:	0020      	movs	r0, r4
 8005b4a:	0029      	movs	r1, r5
 8005b4c:	f7fb f938 	bl	8000dc0 <__aeabi_ddiv>
 8005b50:	2200      	movs	r2, #0
 8005b52:	4ba7      	ldr	r3, [pc, #668]	@ (8005df0 <_etoa+0x3ec>)
 8005b54:	f7fa fdd0 	bl	80006f8 <__aeabi_dadd>
 8005b58:	0002      	movs	r2, r0
 8005b5a:	000b      	movs	r3, r1
 8005b5c:	0020      	movs	r0, r4
 8005b5e:	0029      	movs	r1, r5
 8005b60:	f7fb f92e 	bl	8000dc0 <__aeabi_ddiv>
 8005b64:	2200      	movs	r2, #0
 8005b66:	4ba3      	ldr	r3, [pc, #652]	@ (8005df4 <_etoa+0x3f0>)
 8005b68:	f7fa fdc6 	bl	80006f8 <__aeabi_dadd>
 8005b6c:	0002      	movs	r2, r0
 8005b6e:	000b      	movs	r3, r1
 8005b70:	0020      	movs	r0, r4
 8005b72:	0029      	movs	r1, r5
 8005b74:	f7fb f924 	bl	8000dc0 <__aeabi_ddiv>
 8005b78:	000d      	movs	r5, r1
 8005b7a:	2180      	movs	r1, #128	@ 0x80
 8005b7c:	0004      	movs	r4, r0
 8005b7e:	0032      	movs	r2, r6
 8005b80:	003b      	movs	r3, r7
 8005b82:	2000      	movs	r0, #0
 8005b84:	05c9      	lsls	r1, r1, #23
 8005b86:	f7fc f827 	bl	8001bd8 <__aeabi_dsub>
 8005b8a:	0002      	movs	r2, r0
 8005b8c:	000b      	movs	r3, r1
 8005b8e:	0020      	movs	r0, r4
 8005b90:	0029      	movs	r1, r5
 8005b92:	f7fa fdb1 	bl	80006f8 <__aeabi_dadd>
 8005b96:	0002      	movs	r2, r0
 8005b98:	000b      	movs	r3, r1
 8005b9a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8005b9c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005b9e:	f7fb f90f 	bl	8000dc0 <__aeabi_ddiv>
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	4b86      	ldr	r3, [pc, #536]	@ (8005dc0 <_etoa+0x3bc>)
 8005ba6:	f7fa fda7 	bl	80006f8 <__aeabi_dadd>
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8005baa:	4b93      	ldr	r3, [pc, #588]	@ (8005df8 <_etoa+0x3f4>)
 8005bac:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8005bae:	469c      	mov	ip, r3
 8005bb0:	4464      	add	r4, ip
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	0523      	lsls	r3, r4, #20
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8005bb6:	f7fb fd47 	bl	8001648 <__aeabi_dmul>
 8005bba:	0006      	movs	r6, r0
 8005bbc:	000f      	movs	r7, r1
  if (value < conv.F) {
 8005bbe:	0002      	movs	r2, r0
 8005bc0:	000b      	movs	r3, r1
 8005bc2:	9808      	ldr	r0, [sp, #32]
 8005bc4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005bc6:	f7fa fc47 	bl	8000458 <__aeabi_dcmplt>
 8005bca:	2800      	cmp	r0, #0
 8005bcc:	d00b      	beq.n	8005be6 <_etoa+0x1e2>
    expval--;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	425b      	negs	r3, r3
 8005bd2:	469c      	mov	ip, r3
    conv.F /= 10;
 8005bd4:	0030      	movs	r0, r6
 8005bd6:	0039      	movs	r1, r7
 8005bd8:	2200      	movs	r2, #0
 8005bda:	4b85      	ldr	r3, [pc, #532]	@ (8005df0 <_etoa+0x3ec>)
    expval--;
 8005bdc:	44e2      	add	sl, ip
    conv.F /= 10;
 8005bde:	f7fb f8ef 	bl	8000dc0 <__aeabi_ddiv>
 8005be2:	0006      	movs	r6, r0
 8005be4:	000f      	movs	r7, r1
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8005be6:	4653      	mov	r3, sl
 8005be8:	25c6      	movs	r5, #198	@ 0xc6
 8005bea:	3363      	adds	r3, #99	@ 0x63
 8005bec:	429d      	cmp	r5, r3
 8005bee:	41ad      	sbcs	r5, r5
  if (flags & FLAGS_ADAPT_EXP) {
 8005bf0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8005bf2:	426d      	negs	r5, r5
 8005bf4:	3504      	adds	r5, #4
  if (flags & FLAGS_ADAPT_EXP) {
 8005bf6:	051b      	lsls	r3, r3, #20
 8005bf8:	d521      	bpl.n	8005c3e <_etoa+0x23a>
    if ((value >= 1e-4) && (value < 1e6)) {
 8005bfa:	9808      	ldr	r0, [sp, #32]
 8005bfc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005bfe:	4a7f      	ldr	r2, [pc, #508]	@ (8005dfc <_etoa+0x3f8>)
 8005c00:	4b7f      	ldr	r3, [pc, #508]	@ (8005e00 <_etoa+0x3fc>)
 8005c02:	f7fa fc47 	bl	8000494 <__aeabi_dcmpge>
 8005c06:	2800      	cmp	r0, #0
 8005c08:	d100      	bne.n	8005c0c <_etoa+0x208>
 8005c0a:	e0ff      	b.n	8005e0c <_etoa+0x408>
 8005c0c:	9808      	ldr	r0, [sp, #32]
 8005c0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005c10:	2200      	movs	r2, #0
 8005c12:	4b7c      	ldr	r3, [pc, #496]	@ (8005e04 <_etoa+0x400>)
 8005c14:	f7fa fc20 	bl	8000458 <__aeabi_dcmplt>
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	d100      	bne.n	8005c1e <_etoa+0x21a>
 8005c1c:	e0f6      	b.n	8005e0c <_etoa+0x408>
      if ((int)prec > expval) {
 8005c1e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005c20:	459a      	cmp	sl, r3
 8005c22:	db00      	blt.n	8005c26 <_etoa+0x222>
 8005c24:	e106      	b.n	8005e34 <_etoa+0x430>
        prec = (unsigned)((int)prec - expval - 1);
 8005c26:	4652      	mov	r2, sl
 8005c28:	1a9b      	subs	r3, r3, r2
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	9324      	str	r3, [sp, #144]	@ 0x90
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8005c2e:	2380      	movs	r3, #128	@ 0x80
 8005c30:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8005c32:	00db      	lsls	r3, r3, #3
 8005c34:	431a      	orrs	r2, r3
      expval   = 0;
 8005c36:	2300      	movs	r3, #0
      minwidth = 0U;
 8005c38:	2500      	movs	r5, #0
      expval   = 0;
 8005c3a:	469a      	mov	sl, r3
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8005c3c:	9226      	str	r2, [sp, #152]	@ 0x98
  if (width > minwidth) {
 8005c3e:	9b25      	ldr	r3, [sp, #148]	@ 0x94
    fwidth = 0U;
 8005c40:	2400      	movs	r4, #0
  if (width > minwidth) {
 8005c42:	42ab      	cmp	r3, r5
 8005c44:	d900      	bls.n	8005c48 <_etoa+0x244>
    fwidth -= minwidth;
 8005c46:	1b5c      	subs	r4, r3, r5
  if ((flags & FLAGS_LEFT) && minwidth) {
 8005c48:	2302      	movs	r3, #2
 8005c4a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8005c4c:	401a      	ands	r2, r3
 8005c4e:	920e      	str	r2, [sp, #56]	@ 0x38
 8005c50:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8005c52:	4213      	tst	r3, r2
 8005c54:	d003      	beq.n	8005c5e <_etoa+0x25a>
    fwidth = 0U;
 8005c56:	426b      	negs	r3, r5
 8005c58:	416b      	adcs	r3, r5
 8005c5a:	425b      	negs	r3, r3
 8005c5c:	401c      	ands	r4, r3
  if (expval) {
 8005c5e:	4653      	mov	r3, sl
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d000      	beq.n	8005c66 <_etoa+0x262>
 8005c64:	e094      	b.n	8005d90 <_etoa+0x38c>
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8005c66:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8005c68:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	f7fa fbf3 	bl	8000458 <__aeabi_dcmplt>
 8005c72:	2800      	cmp	r0, #0
 8005c74:	d00a      	beq.n	8005c8c <_etoa+0x288>
 8005c76:	9e08      	ldr	r6, [sp, #32]
 8005c78:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8005c7a:	2080      	movs	r0, #128	@ 0x80
 8005c7c:	0600      	lsls	r0, r0, #24
 8005c7e:	0039      	movs	r1, r7
 8005c80:	4684      	mov	ip, r0
 8005c82:	4461      	add	r1, ip
 8005c84:	0032      	movs	r2, r6
 8005c86:	000b      	movs	r3, r1
 8005c88:	9208      	str	r2, [sp, #32]
 8005c8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c8c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8005c8e:	4b5e      	ldr	r3, [pc, #376]	@ (8005e08 <_etoa+0x404>)
 8005c90:	9403      	str	r4, [sp, #12]
 8005c92:	4013      	ands	r3, r2
 8005c94:	9304      	str	r3, [sp, #16]
 8005c96:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005c98:	4659      	mov	r1, fp
 8005c9a:	9302      	str	r3, [sp, #8]
 8005c9c:	4648      	mov	r0, r9
 8005c9e:	9b08      	ldr	r3, [sp, #32]
 8005ca0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8005ca2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005ca4:	9300      	str	r3, [sp, #0]
 8005ca6:	9401      	str	r4, [sp, #4]
 8005ca8:	4643      	mov	r3, r8
 8005caa:	f000 f8c7 	bl	8005e3c <_ftoa>
 8005cae:	0004      	movs	r4, r0
  if (minwidth) {
 8005cb0:	2d00      	cmp	r5, #0
 8005cb2:	d065      	beq.n	8005d80 <_etoa+0x37c>
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8005cb4:	2020      	movs	r0, #32
 8005cb6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8005cb8:	4659      	mov	r1, fp
 8005cba:	4003      	ands	r3, r0
 8005cbc:	425a      	negs	r2, r3
 8005cbe:	4153      	adcs	r3, r2
 8005cc0:	425b      	negs	r3, r3
 8005cc2:	4018      	ands	r0, r3
 8005cc4:	1c63      	adds	r3, r4, #1
 8005cc6:	0022      	movs	r2, r4
 8005cc8:	9308      	str	r3, [sp, #32]
 8005cca:	3045      	adds	r0, #69	@ 0x45
 8005ccc:	4643      	mov	r3, r8
 8005cce:	47c8      	blx	r9
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8005cd0:	4652      	mov	r2, sl
 8005cd2:	17d3      	asrs	r3, r2, #31
 8005cd4:	18d4      	adds	r4, r2, r3
 8005cd6:	405c      	eors	r4, r3
 8005cd8:	0fd3      	lsrs	r3, r2, #31
 8005cda:	1e6f      	subs	r7, r5, #1
 8005cdc:	469a      	mov	sl, r3
 8005cde:	2500      	movs	r5, #0
 8005ce0:	e001      	b.n	8005ce6 <_etoa+0x2e2>
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8005ce2:	2d20      	cmp	r5, #32
 8005ce4:	d013      	beq.n	8005d0e <_etoa+0x30a>
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8005ce6:	aa08      	add	r2, sp, #32
 8005ce8:	4694      	mov	ip, r2
 8005cea:	231f      	movs	r3, #31
      const char digit = (char)(value % base);
 8005cec:	0020      	movs	r0, r4
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8005cee:	4463      	add	r3, ip
      const char digit = (char)(value % base);
 8005cf0:	210a      	movs	r1, #10
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8005cf2:	3501      	adds	r5, #1
 8005cf4:	195e      	adds	r6, r3, r5
      const char digit = (char)(value % base);
 8005cf6:	f7fa faa9 	bl	800024c <__aeabi_uidivmod>
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8005cfa:	3130      	adds	r1, #48	@ 0x30
 8005cfc:	7031      	strb	r1, [r6, #0]
      value /= base;
 8005cfe:	0020      	movs	r0, r4
 8005d00:	210a      	movs	r1, #10
 8005d02:	f7fa fa1d 	bl	8000140 <__udivsi3>
 8005d06:	0026      	movs	r6, r4
 8005d08:	0004      	movs	r4, r0
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8005d0a:	2e09      	cmp	r6, #9
 8005d0c:	d8e9      	bhi.n	8005ce2 <_etoa+0x2de>
  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8005d0e:	2305      	movs	r3, #5
 8005d10:	9306      	str	r3, [sp, #24]
 8005d12:	2300      	movs	r3, #0
 8005d14:	9304      	str	r3, [sp, #16]
 8005d16:	330a      	adds	r3, #10
 8005d18:	9303      	str	r3, [sp, #12]
 8005d1a:	4653      	mov	r3, sl
 8005d1c:	9302      	str	r3, [sp, #8]
 8005d1e:	ab10      	add	r3, sp, #64	@ 0x40
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	4659      	mov	r1, fp
 8005d24:	4643      	mov	r3, r8
 8005d26:	4648      	mov	r0, r9
 8005d28:	9a08      	ldr	r2, [sp, #32]
 8005d2a:	9705      	str	r7, [sp, #20]
 8005d2c:	9501      	str	r5, [sp, #4]
 8005d2e:	f7ff fd59 	bl	80057e4 <_ntoa_format>
    if (flags & FLAGS_LEFT) {
 8005d32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8005d34:	0004      	movs	r4, r0
    if (flags & FLAGS_LEFT) {
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d022      	beq.n	8005d80 <_etoa+0x37c>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8005d3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d3c:	1ac5      	subs	r5, r0, r3
 8005d3e:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8005d40:	42ab      	cmp	r3, r5
 8005d42:	d91d      	bls.n	8005d80 <_etoa+0x37c>
 8005d44:	464e      	mov	r6, r9
 8005d46:	465f      	mov	r7, fp
 8005d48:	0022      	movs	r2, r4
 8005d4a:	4643      	mov	r3, r8
 8005d4c:	0039      	movs	r1, r7
 8005d4e:	2020      	movs	r0, #32
 8005d50:	47b0      	blx	r6
 8005d52:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8005d54:	3501      	adds	r5, #1
 8005d56:	3401      	adds	r4, #1
 8005d58:	42ab      	cmp	r3, r5
 8005d5a:	d8f5      	bhi.n	8005d48 <_etoa+0x344>
 8005d5c:	e010      	b.n	8005d80 <_etoa+0x37c>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8005d5e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8005d60:	4659      	mov	r1, fp
 8005d62:	9304      	str	r3, [sp, #16]
 8005d64:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8005d66:	4648      	mov	r0, r9
 8005d68:	9303      	str	r3, [sp, #12]
 8005d6a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005d6c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005d6e:	9302      	str	r3, [sp, #8]
 8005d70:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005d72:	9c23      	ldr	r4, [sp, #140]	@ 0x8c
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	9401      	str	r4, [sp, #4]
 8005d78:	4643      	mov	r3, r8
 8005d7a:	f000 f85f 	bl	8005e3c <_ftoa>
 8005d7e:	0004      	movs	r4, r0
}
 8005d80:	0020      	movs	r0, r4
 8005d82:	b019      	add	sp, #100	@ 0x64
 8005d84:	bcf0      	pop	{r4, r5, r6, r7}
 8005d86:	46bb      	mov	fp, r7
 8005d88:	46b2      	mov	sl, r6
 8005d8a:	46a9      	mov	r9, r5
 8005d8c:	46a0      	mov	r8, r4
 8005d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    value /= conv.F;
 8005d90:	9808      	ldr	r0, [sp, #32]
 8005d92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005d94:	0032      	movs	r2, r6
 8005d96:	003b      	movs	r3, r7
 8005d98:	f7fb f812 	bl	8000dc0 <__aeabi_ddiv>
 8005d9c:	9008      	str	r0, [sp, #32]
 8005d9e:	9109      	str	r1, [sp, #36]	@ 0x24
 8005da0:	e761      	b.n	8005c66 <_etoa+0x262>
 8005da2:	46c0      	nop			@ (mov r8, r8)
 8005da4:	7fefffff 	.word	0x7fefffff
 8005da8:	ffefffff 	.word	0xffefffff
 8005dac:	fffffc01 	.word	0xfffffc01
 8005db0:	509f79fb 	.word	0x509f79fb
 8005db4:	3fd34413 	.word	0x3fd34413
 8005db8:	8b60c8b3 	.word	0x8b60c8b3
 8005dbc:	3fc68a28 	.word	0x3fc68a28
 8005dc0:	3ff00000 	.word	0x3ff00000
 8005dc4:	3ff80000 	.word	0x3ff80000
 8005dc8:	636f4361 	.word	0x636f4361
 8005dcc:	3fd287a7 	.word	0x3fd287a7
 8005dd0:	0979a371 	.word	0x0979a371
 8005dd4:	400a934f 	.word	0x400a934f
 8005dd8:	3fe00000 	.word	0x3fe00000
 8005ddc:	bbb55516 	.word	0xbbb55516
 8005de0:	40026bb1 	.word	0x40026bb1
 8005de4:	fefa39ef 	.word	0xfefa39ef
 8005de8:	3fe62e42 	.word	0x3fe62e42
 8005dec:	402c0000 	.word	0x402c0000
 8005df0:	40240000 	.word	0x40240000
 8005df4:	40180000 	.word	0x40180000
 8005df8:	000003ff 	.word	0x000003ff
 8005dfc:	eb1c432d 	.word	0xeb1c432d
 8005e00:	3f1a36e2 	.word	0x3f1a36e2
 8005e04:	412e8480 	.word	0x412e8480
 8005e08:	fffff7ff 	.word	0xfffff7ff
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8005e0c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d100      	bne.n	8005e14 <_etoa+0x410>
 8005e12:	e714      	b.n	8005c3e <_etoa+0x23a>
        --prec;
 8005e14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e16:	1e5a      	subs	r2, r3, #1
 8005e18:	4193      	sbcs	r3, r2
 8005e1a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	9324      	str	r3, [sp, #144]	@ 0x90
 8005e20:	e70d      	b.n	8005c3e <_etoa+0x23a>
    value = -value;
 8005e22:	2280      	movs	r2, #128	@ 0x80
 8005e24:	0612      	lsls	r2, r2, #24
 8005e26:	4694      	mov	ip, r2
 8005e28:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005e2a:	9308      	str	r3, [sp, #32]
 8005e2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005e2e:	4463      	add	r3, ip
 8005e30:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e32:	e61c      	b.n	8005a6e <_etoa+0x6a>
        prec = 0;
 8005e34:	2300      	movs	r3, #0
 8005e36:	9324      	str	r3, [sp, #144]	@ 0x90
 8005e38:	e6f9      	b.n	8005c2e <_etoa+0x22a>
 8005e3a:	46c0      	nop			@ (mov r8, r8)

08005e3c <_ftoa>:
{
 8005e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e3e:	4645      	mov	r5, r8
 8005e40:	46de      	mov	lr, fp
 8005e42:	464e      	mov	r6, r9
 8005e44:	4657      	mov	r7, sl
 8005e46:	b5e0      	push	{r5, r6, r7, lr}
 8005e48:	b095      	sub	sp, #84	@ 0x54
 8005e4a:	468b      	mov	fp, r1
 8005e4c:	4690      	mov	r8, r2
 8005e4e:	4699      	mov	r9, r3
  if (value != value)
 8005e50:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8005e52:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
{
 8005e54:	900a      	str	r0, [sp, #40]	@ 0x28
  if (value != value)
 8005e56:	0019      	movs	r1, r3
 8005e58:	0010      	movs	r0, r2
{
 8005e5a:	9d20      	ldr	r5, [sp, #128]	@ 0x80
  if (value != value)
 8005e5c:	f7fa faf6 	bl	800044c <__aeabi_dcmpeq>
 8005e60:	2800      	cmp	r0, #0
 8005e62:	d100      	bne.n	8005e66 <_ftoa+0x2a>
 8005e64:	e0af      	b.n	8005fc6 <_ftoa+0x18a>
  if (value < -DBL_MAX)
 8005e66:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8005e68:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	4bc4      	ldr	r3, [pc, #784]	@ (8006180 <_ftoa+0x344>)
 8005e6e:	4252      	negs	r2, r2
 8005e70:	f7fa faf2 	bl	8000458 <__aeabi_dcmplt>
 8005e74:	2800      	cmp	r0, #0
 8005e76:	d000      	beq.n	8005e7a <_ftoa+0x3e>
 8005e78:	e130      	b.n	80060dc <_ftoa+0x2a0>
  if (value > DBL_MAX)
 8005e7a:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8005e7c:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8005e7e:	2201      	movs	r2, #1
 8005e80:	4bc0      	ldr	r3, [pc, #768]	@ (8006184 <_ftoa+0x348>)
 8005e82:	4252      	negs	r2, r2
 8005e84:	f7fa fafc 	bl	8000480 <__aeabi_dcmpgt>
 8005e88:	2800      	cmp	r0, #0
 8005e8a:	d000      	beq.n	8005e8e <_ftoa+0x52>
 8005e8c:	e08f      	b.n	8005fae <_ftoa+0x172>
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8005e8e:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8005e90:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8005e92:	2200      	movs	r2, #0
 8005e94:	4bbc      	ldr	r3, [pc, #752]	@ (8006188 <_ftoa+0x34c>)
 8005e96:	f7fa faf3 	bl	8000480 <__aeabi_dcmpgt>
 8005e9a:	2800      	cmp	r0, #0
 8005e9c:	d000      	beq.n	8005ea0 <_ftoa+0x64>
 8005e9e:	e10d      	b.n	80060bc <_ftoa+0x280>
 8005ea0:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8005ea2:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	4bb9      	ldr	r3, [pc, #740]	@ (800618c <_ftoa+0x350>)
 8005ea8:	f7fa fad6 	bl	8000458 <__aeabi_dcmplt>
 8005eac:	2800      	cmp	r0, #0
 8005eae:	d000      	beq.n	8005eb2 <_ftoa+0x76>
 8005eb0:	e104      	b.n	80060bc <_ftoa+0x280>
  if (value < 0) {
 8005eb2:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8005eb4:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	2300      	movs	r3, #0
 8005eba:	f7fa facd 	bl	8000458 <__aeabi_dcmplt>
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	d000      	beq.n	8005ec4 <_ftoa+0x88>
 8005ec2:	e0b3      	b.n	800602c <_ftoa+0x1f0>
  bool negative = false;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (!(flags & FLAGS_PRECISION)) {
 8005ec8:	2380      	movs	r3, #128	@ 0x80
 8005eca:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 8005ecc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005ece:	00db      	lsls	r3, r3, #3
 8005ed0:	401c      	ands	r4, r3
 8005ed2:	421a      	tst	r2, r3
 8005ed4:	d100      	bne.n	8005ed8 <_ftoa+0x9c>
 8005ed6:	e117      	b.n	8006108 <_ftoa+0x2cc>
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8005ed8:	2d09      	cmp	r5, #9
 8005eda:	d800      	bhi.n	8005ede <_ftoa+0xa2>
 8005edc:	e174      	b.n	80061c8 <_ftoa+0x38c>
 8005ede:	a906      	add	r1, sp, #24
 8005ee0:	468c      	mov	ip, r1
 8005ee2:	002c      	movs	r4, r5
 8005ee4:	2217      	movs	r2, #23
 8005ee6:	2300      	movs	r3, #0
    buf[len++] = '0';
 8005ee8:	2130      	movs	r1, #48	@ 0x30
 8005eea:	3c09      	subs	r4, #9
 8005eec:	4462      	add	r2, ip
 8005eee:	3301      	adds	r3, #1
 8005ef0:	54d1      	strb	r1, [r2, r3]
    prec--;
 8005ef2:	1aef      	subs	r7, r5, r3
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8005ef4:	2b20      	cmp	r3, #32
 8005ef6:	d100      	bne.n	8005efa <_ftoa+0xbe>
 8005ef8:	e12e      	b.n	8006158 <_ftoa+0x31c>
 8005efa:	42a3      	cmp	r3, r4
 8005efc:	d1f7      	bne.n	8005eee <_ftoa+0xb2>
 8005efe:	2200      	movs	r2, #0
 8005f00:	4ba1      	ldr	r3, [pc, #644]	@ (8006188 <_ftoa+0x34c>)
 8005f02:	9206      	str	r2, [sp, #24]
 8005f04:	9307      	str	r3, [sp, #28]
  int whole = (int)value;
 8005f06:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8005f08:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8005f0a:	f7fc fa23 	bl	8002354 <__aeabi_d2iz>
 8005f0e:	0005      	movs	r5, r0
  double tmp = (value - whole) * pow10[prec];
 8005f10:	f7fc fa5c 	bl	80023cc <__aeabi_i2d>
 8005f14:	0002      	movs	r2, r0
 8005f16:	000b      	movs	r3, r1
 8005f18:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8005f1a:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8005f1c:	f7fb fe5c 	bl	8001bd8 <__aeabi_dsub>
 8005f20:	9a06      	ldr	r2, [sp, #24]
 8005f22:	9b07      	ldr	r3, [sp, #28]
 8005f24:	f7fb fb90 	bl	8001648 <__aeabi_dmul>
  unsigned long frac = (unsigned long)tmp;
 8005f28:	9008      	str	r0, [sp, #32]
 8005f2a:	9109      	str	r1, [sp, #36]	@ 0x24
 8005f2c:	f7fa fafa 	bl	8000524 <__aeabi_d2uiz>
 8005f30:	0006      	movs	r6, r0
  diff = tmp - frac;
 8005f32:	f7fc fa79 	bl	8002428 <__aeabi_ui2d>
 8005f36:	0002      	movs	r2, r0
 8005f38:	000b      	movs	r3, r1
 8005f3a:	9808      	ldr	r0, [sp, #32]
 8005f3c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005f3e:	f7fb fe4b 	bl	8001bd8 <__aeabi_dsub>
  if (diff > 0.5) {
 8005f42:	2200      	movs	r2, #0
 8005f44:	4b92      	ldr	r3, [pc, #584]	@ (8006190 <_ftoa+0x354>)
  diff = tmp - frac;
 8005f46:	9008      	str	r0, [sp, #32]
 8005f48:	9109      	str	r1, [sp, #36]	@ 0x24
  if (diff > 0.5) {
 8005f4a:	f7fa fa99 	bl	8000480 <__aeabi_dcmpgt>
 8005f4e:	2800      	cmp	r0, #0
 8005f50:	d100      	bne.n	8005f54 <_ftoa+0x118>
 8005f52:	e0cc      	b.n	80060ee <_ftoa+0x2b2>
    ++frac;
 8005f54:	3601      	adds	r6, #1
    if (frac >= pow10[prec]) {
 8005f56:	0030      	movs	r0, r6
 8005f58:	f7fc fa66 	bl	8002428 <__aeabi_ui2d>
 8005f5c:	9a06      	ldr	r2, [sp, #24]
 8005f5e:	9b07      	ldr	r3, [sp, #28]
 8005f60:	f7fa fa98 	bl	8000494 <__aeabi_dcmpge>
 8005f64:	2800      	cmp	r0, #0
 8005f66:	d001      	beq.n	8005f6c <_ftoa+0x130>
      frac = 0;
 8005f68:	2600      	movs	r6, #0
      ++whole;
 8005f6a:	3501      	adds	r5, #1
  if (prec == 0U) {
 8005f6c:	46aa      	mov	sl, r5
 8005f6e:	2f00      	cmp	r7, #0
 8005f70:	d153      	bne.n	800601a <_ftoa+0x1de>
    diff = value - (double)whole;
 8005f72:	0028      	movs	r0, r5
 8005f74:	f7fc fa2a 	bl	80023cc <__aeabi_i2d>
 8005f78:	0002      	movs	r2, r0
 8005f7a:	000b      	movs	r3, r1
 8005f7c:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8005f7e:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8005f80:	f7fb fe2a 	bl	8001bd8 <__aeabi_dsub>
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8005f84:	2200      	movs	r2, #0
 8005f86:	4b82      	ldr	r3, [pc, #520]	@ (8006190 <_ftoa+0x354>)
    diff = value - (double)whole;
 8005f88:	0006      	movs	r6, r0
 8005f8a:	000f      	movs	r7, r1
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8005f8c:	f7fa fa64 	bl	8000458 <__aeabi_dcmplt>
 8005f90:	2800      	cmp	r0, #0
 8005f92:	d007      	beq.n	8005fa4 <_ftoa+0x168>
 8005f94:	2200      	movs	r2, #0
 8005f96:	0030      	movs	r0, r6
 8005f98:	0039      	movs	r1, r7
 8005f9a:	4b7d      	ldr	r3, [pc, #500]	@ (8006190 <_ftoa+0x354>)
 8005f9c:	f7fa fa70 	bl	8000480 <__aeabi_dcmpgt>
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	d03e      	beq.n	8006022 <_ftoa+0x1e6>
 8005fa4:	af0c      	add	r7, sp, #48	@ 0x30
 8005fa6:	07eb      	lsls	r3, r5, #31
 8005fa8:	d55d      	bpl.n	8006066 <_ftoa+0x22a>
      ++whole;
 8005faa:	3501      	adds	r5, #1
 8005fac:	e05b      	b.n	8006066 <_ftoa+0x22a>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8005fae:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005fb0:	075b      	lsls	r3, r3, #29
 8005fb2:	d438      	bmi.n	8006026 <_ftoa+0x1ea>
 8005fb4:	2203      	movs	r2, #3
 8005fb6:	4b77      	ldr	r3, [pc, #476]	@ (8006194 <_ftoa+0x358>)
 8005fb8:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8005fba:	9201      	str	r2, [sp, #4]
 8005fbc:	9103      	str	r1, [sp, #12]
 8005fbe:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8005fc0:	9300      	str	r3, [sp, #0]
 8005fc2:	9102      	str	r1, [sp, #8]
 8005fc4:	e007      	b.n	8005fd6 <_ftoa+0x19a>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8005fc6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005fc8:	9303      	str	r3, [sp, #12]
 8005fca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005fcc:	9302      	str	r3, [sp, #8]
 8005fce:	2303      	movs	r3, #3
 8005fd0:	9301      	str	r3, [sp, #4]
 8005fd2:	4b71      	ldr	r3, [pc, #452]	@ (8006198 <_ftoa+0x35c>)
 8005fd4:	9300      	str	r3, [sp, #0]
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8005fd6:	464b      	mov	r3, r9
 8005fd8:	4642      	mov	r2, r8
 8005fda:	4659      	mov	r1, fp
 8005fdc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005fde:	f7ff fbb9 	bl	8005754 <_out_rev>
}
 8005fe2:	b015      	add	sp, #84	@ 0x54
 8005fe4:	bcf0      	pop	{r4, r5, r6, r7}
 8005fe6:	46bb      	mov	fp, r7
 8005fe8:	46b2      	mov	sl, r6
 8005fea:	46a9      	mov	r9, r5
 8005fec:	46a0      	mov	r8, r4
 8005fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
      buf[len++] = (char)(48U + (frac % 10U));
 8005ff0:	aa06      	add	r2, sp, #24
 8005ff2:	4694      	mov	ip, r2
 8005ff4:	2317      	movs	r3, #23
 8005ff6:	210a      	movs	r1, #10
 8005ff8:	4463      	add	r3, ip
 8005ffa:	0030      	movs	r0, r6
 8005ffc:	3401      	adds	r4, #1
 8005ffe:	191d      	adds	r5, r3, r4
 8006000:	f7fa f924 	bl	800024c <__aeabi_uidivmod>
 8006004:	3130      	adds	r1, #48	@ 0x30
 8006006:	7029      	strb	r1, [r5, #0]
      if (!(frac /= 10U)) {
 8006008:	0030      	movs	r0, r6
 800600a:	210a      	movs	r1, #10
      --count;
 800600c:	3f01      	subs	r7, #1
      if (!(frac /= 10U)) {
 800600e:	f7fa f897 	bl	8000140 <__udivsi3>
 8006012:	2e09      	cmp	r6, #9
 8006014:	d800      	bhi.n	8006018 <_ftoa+0x1dc>
 8006016:	e08b      	b.n	8006130 <_ftoa+0x2f4>
 8006018:	0006      	movs	r6, r0
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800601a:	2c20      	cmp	r4, #32
 800601c:	d1e8      	bne.n	8005ff0 <_ftoa+0x1b4>
 800601e:	4655      	mov	r5, sl
      buf[len++] = (char)(48U + (frac % 10U));
 8006020:	2420      	movs	r4, #32
 8006022:	af0c      	add	r7, sp, #48	@ 0x30
 8006024:	e01f      	b.n	8006066 <_ftoa+0x22a>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8006026:	2204      	movs	r2, #4
 8006028:	4b5c      	ldr	r3, [pc, #368]	@ (800619c <_ftoa+0x360>)
 800602a:	e7c5      	b.n	8005fb8 <_ftoa+0x17c>
    value = 0 - value;
 800602c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800602e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8006030:	2000      	movs	r0, #0
 8006032:	2100      	movs	r1, #0
 8006034:	f7fb fdd0 	bl	8001bd8 <__aeabi_dsub>
    negative = true;
 8006038:	2301      	movs	r3, #1
    value = 0 - value;
 800603a:	901e      	str	r0, [sp, #120]	@ 0x78
 800603c:	911f      	str	r1, [sp, #124]	@ 0x7c
    negative = true;
 800603e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006040:	e742      	b.n	8005ec8 <_ftoa+0x8c>
    buf[len++] = (char)(48 + (whole % 10));
 8006042:	aa06      	add	r2, sp, #24
 8006044:	4694      	mov	ip, r2
 8006046:	2317      	movs	r3, #23
 8006048:	0028      	movs	r0, r5
 800604a:	4463      	add	r3, ip
 800604c:	210a      	movs	r1, #10
 800604e:	3401      	adds	r4, #1
 8006050:	191e      	adds	r6, r3, r4
 8006052:	f7fa f9e5 	bl	8000420 <__aeabi_idivmod>
 8006056:	3130      	adds	r1, #48	@ 0x30
    if (!(whole /= 10)) {
 8006058:	0028      	movs	r0, r5
    buf[len++] = (char)(48 + (whole % 10));
 800605a:	7031      	strb	r1, [r6, #0]
    if (!(whole /= 10)) {
 800605c:	210a      	movs	r1, #10
 800605e:	f7fa f8f9 	bl	8000254 <__divsi3>
 8006062:	1e05      	subs	r5, r0, #0
 8006064:	d056      	beq.n	8006114 <_ftoa+0x2d8>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8006066:	2c20      	cmp	r4, #32
 8006068:	d1eb      	bne.n	8006042 <_ftoa+0x206>
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800606a:	2303      	movs	r3, #3
 800606c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800606e:	4013      	ands	r3, r2
 8006070:	2b01      	cmp	r3, #1
 8006072:	d11c      	bne.n	80060ae <_ftoa+0x272>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8006074:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006076:	2b00      	cmp	r3, #0
 8006078:	d019      	beq.n	80060ae <_ftoa+0x272>
 800607a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800607c:	2b00      	cmp	r3, #0
 800607e:	d000      	beq.n	8006082 <_ftoa+0x246>
 8006080:	e09b      	b.n	80061ba <_ftoa+0x37e>
 8006082:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006084:	330c      	adds	r3, #12
 8006086:	4213      	tst	r3, r2
 8006088:	d000      	beq.n	800608c <_ftoa+0x250>
 800608a:	e096      	b.n	80061ba <_ftoa+0x37e>
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800608c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800608e:	42a3      	cmp	r3, r4
 8006090:	d964      	bls.n	800615c <_ftoa+0x320>
 8006092:	ab06      	add	r3, sp, #24
 8006094:	469c      	mov	ip, r3
 8006096:	2217      	movs	r2, #23
      buf[len++] = '0';
 8006098:	2330      	movs	r3, #48	@ 0x30
 800609a:	4462      	add	r2, ip
 800609c:	e004      	b.n	80060a8 <_ftoa+0x26c>
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800609e:	9921      	ldr	r1, [sp, #132]	@ 0x84
      buf[len++] = '0';
 80060a0:	3401      	adds	r4, #1
 80060a2:	5513      	strb	r3, [r2, r4]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80060a4:	428c      	cmp	r4, r1
 80060a6:	d03a      	beq.n	800611e <_ftoa+0x2e2>
 80060a8:	2c20      	cmp	r4, #32
 80060aa:	d1f8      	bne.n	800609e <_ftoa+0x262>
      buf[len++] = ' ';
 80060ac:	2420      	movs	r4, #32
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80060ae:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80060b0:	9401      	str	r4, [sp, #4]
 80060b2:	9303      	str	r3, [sp, #12]
 80060b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80060b6:	9700      	str	r7, [sp, #0]
 80060b8:	9302      	str	r3, [sp, #8]
 80060ba:	e78c      	b.n	8005fd6 <_ftoa+0x19a>
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80060bc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80060be:	4642      	mov	r2, r8
 80060c0:	9304      	str	r3, [sp, #16]
 80060c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80060c4:	4659      	mov	r1, fp
 80060c6:	9303      	str	r3, [sp, #12]
 80060c8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80060ca:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80060cc:	9c1f      	ldr	r4, [sp, #124]	@ 0x7c
 80060ce:	9502      	str	r5, [sp, #8]
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	9401      	str	r4, [sp, #4]
 80060d4:	464b      	mov	r3, r9
 80060d6:	f7ff fc95 	bl	8005a04 <_etoa>
 80060da:	e782      	b.n	8005fe2 <_ftoa+0x1a6>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80060dc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80060de:	9303      	str	r3, [sp, #12]
 80060e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80060e2:	9302      	str	r3, [sp, #8]
 80060e4:	2304      	movs	r3, #4
 80060e6:	9301      	str	r3, [sp, #4]
 80060e8:	4b2d      	ldr	r3, [pc, #180]	@ (80061a0 <_ftoa+0x364>)
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	e773      	b.n	8005fd6 <_ftoa+0x19a>
  else if (diff < 0.5) {
 80060ee:	2200      	movs	r2, #0
 80060f0:	9808      	ldr	r0, [sp, #32]
 80060f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80060f4:	4b26      	ldr	r3, [pc, #152]	@ (8006190 <_ftoa+0x354>)
 80060f6:	f7fa f9af 	bl	8000458 <__aeabi_dcmplt>
 80060fa:	2800      	cmp	r0, #0
 80060fc:	d000      	beq.n	8006100 <_ftoa+0x2c4>
 80060fe:	e735      	b.n	8005f6c <_ftoa+0x130>
  else if ((frac == 0U) || (frac & 1U)) {
 8006100:	2e00      	cmp	r6, #0
 8006102:	d155      	bne.n	80061b0 <_ftoa+0x374>
    ++frac;
 8006104:	3601      	adds	r6, #1
 8006106:	e731      	b.n	8005f6c <_ftoa+0x130>
 8006108:	2200      	movs	r2, #0
 800610a:	4b26      	ldr	r3, [pc, #152]	@ (80061a4 <_ftoa+0x368>)
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800610c:	2706      	movs	r7, #6
 800610e:	9206      	str	r2, [sp, #24]
 8006110:	9307      	str	r3, [sp, #28]
 8006112:	e6f8      	b.n	8005f06 <_ftoa+0xca>
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8006114:	2303      	movs	r3, #3
 8006116:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006118:	4013      	ands	r3, r2
 800611a:	2b01      	cmp	r3, #1
 800611c:	d05e      	beq.n	80061dc <_ftoa+0x3a0>
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800611e:	2c20      	cmp	r4, #32
 8006120:	d0c5      	beq.n	80060ae <_ftoa+0x272>
    if (negative) {
 8006122:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006124:	2b00      	cmp	r3, #0
 8006126:	d01b      	beq.n	8006160 <_ftoa+0x324>
      buf[len++] = '-';
 8006128:	232d      	movs	r3, #45	@ 0x2d
 800612a:	553b      	strb	r3, [r7, r4]
 800612c:	3401      	adds	r4, #1
 800612e:	e7be      	b.n	80060ae <_ftoa+0x272>
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8006130:	4655      	mov	r5, sl
 8006132:	2c20      	cmp	r4, #32
 8006134:	d100      	bne.n	8006138 <_ftoa+0x2fc>
 8006136:	e773      	b.n	8006020 <_ftoa+0x1e4>
      buf[len++] = '0';
 8006138:	2230      	movs	r2, #48	@ 0x30
 800613a:	193b      	adds	r3, r7, r4
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800613c:	2f00      	cmp	r7, #0
 800613e:	d102      	bne.n	8006146 <_ftoa+0x30a>
 8006140:	e018      	b.n	8006174 <_ftoa+0x338>
 8006142:	429c      	cmp	r4, r3
 8006144:	d017      	beq.n	8006176 <_ftoa+0x33a>
      buf[len++] = '0';
 8006146:	2017      	movs	r0, #23
 8006148:	a906      	add	r1, sp, #24
 800614a:	3401      	adds	r4, #1
 800614c:	1809      	adds	r1, r1, r0
 800614e:	550a      	strb	r2, [r1, r4]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8006150:	2c20      	cmp	r4, #32
 8006152:	d1f6      	bne.n	8006142 <_ftoa+0x306>
      buf[len++] = (char)(48U + (frac % 10U));
 8006154:	2420      	movs	r4, #32
 8006156:	e764      	b.n	8006022 <_ftoa+0x1e6>
 8006158:	2420      	movs	r4, #32
 800615a:	e6d0      	b.n	8005efe <_ftoa+0xc2>
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800615c:	2c20      	cmp	r4, #32
 800615e:	d0a6      	beq.n	80060ae <_ftoa+0x272>
    else if (flags & FLAGS_PLUS) {
 8006160:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006162:	075b      	lsls	r3, r3, #29
 8006164:	d420      	bmi.n	80061a8 <_ftoa+0x36c>
    else if (flags & FLAGS_SPACE) {
 8006166:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006168:	071b      	lsls	r3, r3, #28
 800616a:	d5a0      	bpl.n	80060ae <_ftoa+0x272>
      buf[len++] = ' ';
 800616c:	2320      	movs	r3, #32
 800616e:	553b      	strb	r3, [r7, r4]
 8006170:	3401      	adds	r4, #1
 8006172:	e79c      	b.n	80060ae <_ftoa+0x272>
      buf[len++] = (char)(48U + (frac % 10U));
 8006174:	0023      	movs	r3, r4
      buf[len++] = '.';
 8006176:	222e      	movs	r2, #46	@ 0x2e
 8006178:	af0c      	add	r7, sp, #48	@ 0x30
 800617a:	1c5c      	adds	r4, r3, #1
 800617c:	54fa      	strb	r2, [r7, r3]
 800617e:	e772      	b.n	8006066 <_ftoa+0x22a>
 8006180:	ffefffff 	.word	0xffefffff
 8006184:	7fefffff 	.word	0x7fefffff
 8006188:	41cdcd65 	.word	0x41cdcd65
 800618c:	c1cdcd65 	.word	0xc1cdcd65
 8006190:	3fe00000 	.word	0x3fe00000
 8006194:	0800ec20 	.word	0x0800ec20
 8006198:	0800ec24 	.word	0x0800ec24
 800619c:	0800ec18 	.word	0x0800ec18
 80061a0:	0800ec28 	.word	0x0800ec28
 80061a4:	412e8480 	.word	0x412e8480
      buf[len++] = '+';  // ignore the space if the '+' exists
 80061a8:	232b      	movs	r3, #43	@ 0x2b
 80061aa:	553b      	strb	r3, [r7, r4]
 80061ac:	3401      	adds	r4, #1
 80061ae:	e77e      	b.n	80060ae <_ftoa+0x272>
  else if ((frac == 0U) || (frac & 1U)) {
 80061b0:	07f3      	lsls	r3, r6, #31
 80061b2:	d400      	bmi.n	80061b6 <_ftoa+0x37a>
 80061b4:	e6da      	b.n	8005f6c <_ftoa+0x130>
    ++frac;
 80061b6:	3601      	adds	r6, #1
 80061b8:	e6d8      	b.n	8005f6c <_ftoa+0x130>
      width--;
 80061ba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80061bc:	3b01      	subs	r3, #1
 80061be:	9321      	str	r3, [sp, #132]	@ 0x84
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80061c0:	42a3      	cmp	r3, r4
 80061c2:	d900      	bls.n	80061c6 <_ftoa+0x38a>
 80061c4:	e765      	b.n	8006092 <_ftoa+0x256>
 80061c6:	e7aa      	b.n	800611e <_ftoa+0x2e2>
  double tmp = (value - whole) * pow10[prec];
 80061c8:	4b06      	ldr	r3, [pc, #24]	@ (80061e4 <_ftoa+0x3a8>)
 80061ca:	00ea      	lsls	r2, r5, #3
 80061cc:	189b      	adds	r3, r3, r2
 80061ce:	685c      	ldr	r4, [r3, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	002f      	movs	r7, r5
 80061d4:	9306      	str	r3, [sp, #24]
 80061d6:	9407      	str	r4, [sp, #28]
 80061d8:	2400      	movs	r4, #0
 80061da:	e694      	b.n	8005f06 <_ftoa+0xca>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80061dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d09d      	beq.n	800611e <_ftoa+0x2e2>
 80061e2:	e74a      	b.n	800607a <_ftoa+0x23e>
 80061e4:	0800edd0 	.word	0x0800edd0

080061e8 <_vsnprintf>:
{
 80061e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ea:	4645      	mov	r5, r8
 80061ec:	46de      	mov	lr, fp
 80061ee:	4657      	mov	r7, sl
 80061f0:	464e      	mov	r6, r9
 80061f2:	b5e0      	push	{r5, r6, r7, lr}
 80061f4:	b0a1      	sub	sp, #132	@ 0x84
 80061f6:	001d      	movs	r5, r3
 80061f8:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80061fa:	4683      	mov	fp, r0
 80061fc:	468a      	mov	sl, r1
 80061fe:	4690      	mov	r8, r2
 8006200:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (!buffer) {
 8006202:	2900      	cmp	r1, #0
 8006204:	d100      	bne.n	8006208 <_vsnprintf+0x20>
 8006206:	e198      	b.n	800653a <_vsnprintf+0x352>
  while (*format)
 8006208:	2300      	movs	r3, #0
 800620a:	7828      	ldrb	r0, [r5, #0]
 800620c:	4699      	mov	r9, r3
 800620e:	2800      	cmp	r0, #0
 8006210:	d100      	bne.n	8006214 <_vsnprintf+0x2c>
 8006212:	e19a      	b.n	800654a <_vsnprintf+0x362>
      switch (*format) {
 8006214:	4bce      	ldr	r3, [pc, #824]	@ (8006550 <_vsnprintf+0x368>)
 8006216:	465e      	mov	r6, fp
 8006218:	9309      	str	r3, [sp, #36]	@ 0x24
    switch (*format) {
 800621a:	4bce      	ldr	r3, [pc, #824]	@ (8006554 <_vsnprintf+0x36c>)
 800621c:	464c      	mov	r4, r9
 800621e:	46d3      	mov	fp, sl
 8006220:	4647      	mov	r7, r8
 8006222:	930d      	str	r3, [sp, #52]	@ 0x34
 8006224:	e00a      	b.n	800623c <_vsnprintf+0x54>
        out(*format, buffer, idx++, maxlen);
 8006226:	1c63      	adds	r3, r4, #1
 8006228:	4698      	mov	r8, r3
 800622a:	0022      	movs	r2, r4
 800622c:	003b      	movs	r3, r7
 800622e:	4659      	mov	r1, fp
 8006230:	47b0      	blx	r6
 8006232:	4644      	mov	r4, r8
  while (*format)
 8006234:	7828      	ldrb	r0, [r5, #0]
 8006236:	2800      	cmp	r0, #0
 8006238:	d100      	bne.n	800623c <_vsnprintf+0x54>
 800623a:	e0cd      	b.n	80063d8 <_vsnprintf+0x1f0>
      format++;
 800623c:	3501      	adds	r5, #1
    if (*format != '%') {
 800623e:	2825      	cmp	r0, #37	@ 0x25
 8006240:	d1f1      	bne.n	8006226 <_vsnprintf+0x3e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8006242:	2308      	movs	r3, #8
 8006244:	469a      	mov	sl, r3
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8006246:	3b04      	subs	r3, #4
 8006248:	4699      	mov	r9, r3
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800624a:	3b02      	subs	r3, #2
 800624c:	4698      	mov	r8, r3
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800624e:	3b01      	subs	r3, #1
    flags = 0U;
 8006250:	2200      	movs	r2, #0
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8006252:	469c      	mov	ip, r3
 8006254:	940c      	str	r4, [sp, #48]	@ 0x30
      switch (*format) {
 8006256:	7828      	ldrb	r0, [r5, #0]
      format++;
 8006258:	1c69      	adds	r1, r5, #1
      switch (*format) {
 800625a:	0003      	movs	r3, r0
 800625c:	3b20      	subs	r3, #32
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b10      	cmp	r3, #16
 8006262:	d803      	bhi.n	800626c <_vsnprintf+0x84>
 8006264:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	58e3      	ldr	r3, [r4, r3]
 800626a:	469f      	mov	pc, r3
    if (_is_digit(*format)) {
 800626c:	0003      	movs	r3, r0
 800626e:	3b30      	subs	r3, #48	@ 0x30
 8006270:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8006272:	920a      	str	r2, [sp, #40]	@ 0x28
 8006274:	2b09      	cmp	r3, #9
 8006276:	d97f      	bls.n	8006378 <_vsnprintf+0x190>
    width = 0U;
 8006278:	2300      	movs	r3, #0
 800627a:	4698      	mov	r8, r3
    else if (*format == '*') {
 800627c:	282a      	cmp	r0, #42	@ 0x2a
 800627e:	d100      	bne.n	8006282 <_vsnprintf+0x9a>
 8006280:	e0c1      	b.n	8006406 <_vsnprintf+0x21e>
    precision = 0U;
 8006282:	2300      	movs	r3, #0
 8006284:	469a      	mov	sl, r3
    if (*format == '.') {
 8006286:	282e      	cmp	r0, #46	@ 0x2e
 8006288:	d100      	bne.n	800628c <_vsnprintf+0xa4>
 800628a:	e090      	b.n	80063ae <_vsnprintf+0x1c6>
    switch (*format) {
 800628c:	0003      	movs	r3, r0
 800628e:	3b68      	subs	r3, #104	@ 0x68
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b12      	cmp	r3, #18
 8006294:	d81e      	bhi.n	80062d4 <_vsnprintf+0xec>
 8006296:	4ab0      	ldr	r2, [pc, #704]	@ (8006558 <_vsnprintf+0x370>)
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	58d3      	ldr	r3, [r2, r3]
 800629c:	469f      	mov	pc, r3
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800629e:	4663      	mov	r3, ip
      format++;
 80062a0:	000d      	movs	r5, r1
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 80062a2:	431a      	orrs	r2, r3
 80062a4:	e7d7      	b.n	8006256 <_vsnprintf+0x6e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 80062a6:	4643      	mov	r3, r8
      format++;
 80062a8:	000d      	movs	r5, r1
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 80062aa:	431a      	orrs	r2, r3
 80062ac:	e7d3      	b.n	8006256 <_vsnprintf+0x6e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 80062ae:	464b      	mov	r3, r9
      format++;
 80062b0:	000d      	movs	r5, r1
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 80062b2:	431a      	orrs	r2, r3
 80062b4:	e7cf      	b.n	8006256 <_vsnprintf+0x6e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 80062b6:	2310      	movs	r3, #16
      format++;
 80062b8:	000d      	movs	r5, r1
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 80062ba:	431a      	orrs	r2, r3
 80062bc:	e7cb      	b.n	8006256 <_vsnprintf+0x6e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 80062be:	4653      	mov	r3, sl
      format++;
 80062c0:	000d      	movs	r5, r1
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 80062c2:	431a      	orrs	r2, r3
 80062c4:	e7c7      	b.n	8006256 <_vsnprintf+0x6e>
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80062c6:	2380      	movs	r3, #128	@ 0x80
 80062c8:	005b      	lsls	r3, r3, #1
 80062ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
        if (*format == 'l') {
 80062cc:	7868      	ldrb	r0, [r5, #1]
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80062ce:	431a      	orrs	r2, r3
 80062d0:	920a      	str	r2, [sp, #40]	@ 0x28
        break;
 80062d2:	3101      	adds	r1, #1
        format++;
 80062d4:	000d      	movs	r5, r1
    switch (*format) {
 80062d6:	2867      	cmp	r0, #103	@ 0x67
 80062d8:	d80a      	bhi.n	80062f0 <_vsnprintf+0x108>
 80062da:	2824      	cmp	r0, #36	@ 0x24
 80062dc:	d9a3      	bls.n	8006226 <_vsnprintf+0x3e>
 80062de:	0003      	movs	r3, r0
 80062e0:	3b25      	subs	r3, #37	@ 0x25
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b42      	cmp	r3, #66	@ 0x42
 80062e6:	d89e      	bhi.n	8006226 <_vsnprintf+0x3e>
 80062e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	58d3      	ldr	r3, [r2, r3]
 80062ee:	469f      	mov	pc, r3
 80062f0:	0001      	movs	r1, r0
 80062f2:	3969      	subs	r1, #105	@ 0x69
 80062f4:	b2c9      	uxtb	r1, r1
 80062f6:	290f      	cmp	r1, #15
 80062f8:	d895      	bhi.n	8006226 <_vsnprintf+0x3e>
 80062fa:	2301      	movs	r3, #1
 80062fc:	408b      	lsls	r3, r1
 80062fe:	469c      	mov	ip, r3
 8006300:	4b96      	ldr	r3, [pc, #600]	@ (800655c <_vsnprintf+0x374>)
 8006302:	4699      	mov	r9, r3
 8006304:	4663      	mov	r3, ip
 8006306:	464a      	mov	r2, r9
 8006308:	4013      	ands	r3, r2
 800630a:	930c      	str	r3, [sp, #48]	@ 0x30
 800630c:	4662      	mov	r2, ip
 800630e:	464b      	mov	r3, r9
 8006310:	421a      	tst	r2, r3
 8006312:	d000      	beq.n	8006316 <_vsnprintf+0x12e>
 8006314:	e25d      	b.n	80067d2 <_vsnprintf+0x5ea>
 8006316:	290a      	cmp	r1, #10
 8006318:	d100      	bne.n	800631c <_vsnprintf+0x134>
 800631a:	e123      	b.n	8006564 <_vsnprintf+0x37c>
 800631c:	2907      	cmp	r1, #7
 800631e:	d182      	bne.n	8006226 <_vsnprintf+0x3e>
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8006320:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006322:	cb02      	ldmia	r3!, {r1}
 8006324:	4698      	mov	r8, r3
  if (!value) {
 8006326:	2900      	cmp	r1, #0
 8006328:	d100      	bne.n	800632c <_vsnprintf+0x144>
 800632a:	e19a      	b.n	8006662 <_vsnprintf+0x47a>
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800632c:	2021      	movs	r0, #33	@ 0x21
 800632e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006330:	4302      	orrs	r2, r0
 8006332:	4691      	mov	r9, r2
 8006334:	ab10      	add	r3, sp, #64	@ 0x40
 8006336:	469c      	mov	ip, r3
 8006338:	221f      	movs	r2, #31
      const char digit = (char)(value % base);
 800633a:	230f      	movs	r3, #15
 800633c:	4640      	mov	r0, r8
 800633e:	4462      	add	r2, ip
 8006340:	950b      	str	r5, [sp, #44]	@ 0x2c
 8006342:	469c      	mov	ip, r3
 8006344:	46a0      	mov	r8, r4
 8006346:	0015      	movs	r5, r2
 8006348:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800634a:	900a      	str	r0, [sp, #40]	@ 0x28
 800634c:	e002      	b.n	8006354 <_vsnprintf+0x16c>
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800634e:	2b20      	cmp	r3, #32
 8006350:	d00c      	beq.n	800636c <_vsnprintf+0x184>
      value /= base;
 8006352:	0011      	movs	r1, r2
      const char digit = (char)(value % base);
 8006354:	4664      	mov	r4, ip
 8006356:	400c      	ands	r4, r1
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8006358:	0020      	movs	r0, r4
 800635a:	3037      	adds	r0, #55	@ 0x37
 800635c:	2c09      	cmp	r4, #9
 800635e:	d800      	bhi.n	8006362 <_vsnprintf+0x17a>
 8006360:	3807      	subs	r0, #7
 8006362:	3301      	adds	r3, #1
 8006364:	54e8      	strb	r0, [r5, r3]
      value /= base;
 8006366:	090a      	lsrs	r2, r1, #4
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8006368:	290f      	cmp	r1, #15
 800636a:	d8f0      	bhi.n	800634e <_vsnprintf+0x166>
 800636c:	930c      	str	r3, [sp, #48]	@ 0x30
 800636e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006370:	4644      	mov	r4, r8
 8006372:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006374:	4698      	mov	r8, r3
 8006376:	e184      	b.n	8006682 <_vsnprintf+0x49a>
  unsigned int i = 0U;
 8006378:	2300      	movs	r3, #0
 800637a:	4698      	mov	r8, r3
 800637c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800637e:	4645      	mov	r5, r8
 8006380:	469c      	mov	ip, r3
 8006382:	e000      	b.n	8006386 <_vsnprintf+0x19e>
 8006384:	3101      	adds	r1, #1
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8006386:	00ab      	lsls	r3, r5, #2
 8006388:	195b      	adds	r3, r3, r5
 800638a:	005b      	lsls	r3, r3, #1
 800638c:	181d      	adds	r5, r3, r0
  while (_is_digit(**str)) {
 800638e:	7808      	ldrb	r0, [r1, #0]
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8006390:	3d30      	subs	r5, #48	@ 0x30
  while (_is_digit(**str)) {
 8006392:	0003      	movs	r3, r0
 8006394:	3b30      	subs	r3, #48	@ 0x30
 8006396:	2b09      	cmp	r3, #9
 8006398:	d9f4      	bls.n	8006384 <_vsnprintf+0x19c>
 800639a:	4663      	mov	r3, ip
 800639c:	930a      	str	r3, [sp, #40]	@ 0x28
    precision = 0U;
 800639e:	2300      	movs	r3, #0
 80063a0:	46a8      	mov	r8, r5
 80063a2:	469a      	mov	sl, r3
 80063a4:	000d      	movs	r5, r1
 80063a6:	3101      	adds	r1, #1
    if (*format == '.') {
 80063a8:	282e      	cmp	r0, #46	@ 0x2e
 80063aa:	d000      	beq.n	80063ae <_vsnprintf+0x1c6>
 80063ac:	e76e      	b.n	800628c <_vsnprintf+0xa4>
      flags |= FLAGS_PRECISION;
 80063ae:	2080      	movs	r0, #128	@ 0x80
 80063b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80063b2:	00c0      	lsls	r0, r0, #3
 80063b4:	4302      	orrs	r2, r0
 80063b6:	920a      	str	r2, [sp, #40]	@ 0x28
      if (_is_digit(*format)) {
 80063b8:	2230      	movs	r2, #48	@ 0x30
 80063ba:	4252      	negs	r2, r2
 80063bc:	4694      	mov	ip, r2
 80063be:	7868      	ldrb	r0, [r5, #1]
      format++;
 80063c0:	000b      	movs	r3, r1
      if (_is_digit(*format)) {
 80063c2:	4484      	add	ip, r0
 80063c4:	4662      	mov	r2, ip
 80063c6:	2a09      	cmp	r2, #9
 80063c8:	d800      	bhi.n	80063cc <_vsnprintf+0x1e4>
 80063ca:	e12d      	b.n	8006628 <_vsnprintf+0x440>
      else if (*format == '*') {
 80063cc:	282a      	cmp	r0, #42	@ 0x2a
 80063ce:	d100      	bne.n	80063d2 <_vsnprintf+0x1ea>
 80063d0:	e13c      	b.n	800664c <_vsnprintf+0x464>
      format++;
 80063d2:	000d      	movs	r5, r1
 80063d4:	3101      	adds	r1, #1
 80063d6:	e759      	b.n	800628c <_vsnprintf+0xa4>
  return (int)idx;
 80063d8:	46da      	mov	sl, fp
 80063da:	46a1      	mov	r9, r4
 80063dc:	46b3      	mov	fp, r6
 80063de:	46b8      	mov	r8, r7
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 80063e0:	45c8      	cmp	r8, r9
 80063e2:	d803      	bhi.n	80063ec <_vsnprintf+0x204>
 80063e4:	2301      	movs	r3, #1
 80063e6:	425b      	negs	r3, r3
 80063e8:	4443      	add	r3, r8
 80063ea:	4699      	mov	r9, r3
 80063ec:	4643      	mov	r3, r8
 80063ee:	464a      	mov	r2, r9
 80063f0:	4651      	mov	r1, sl
 80063f2:	2000      	movs	r0, #0
 80063f4:	47d8      	blx	fp
}
 80063f6:	0020      	movs	r0, r4
 80063f8:	b021      	add	sp, #132	@ 0x84
 80063fa:	bcf0      	pop	{r4, r5, r6, r7}
 80063fc:	46bb      	mov	fp, r7
 80063fe:	46b2      	mov	sl, r6
 8006400:	46a9      	mov	r9, r5
 8006402:	46a0      	mov	r8, r4
 8006404:	bdf0      	pop	{r4, r5, r6, r7, pc}
      const int w = va_arg(va, int);
 8006406:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006408:	cb04      	ldmia	r3!, {r2}
 800640a:	4690      	mov	r8, r2
      if (w < 0) {
 800640c:	2a00      	cmp	r2, #0
 800640e:	db04      	blt.n	800641a <_vsnprintf+0x232>
    if (*format == '.') {
 8006410:	7868      	ldrb	r0, [r5, #1]
      const int w = va_arg(va, int);
 8006412:	930b      	str	r3, [sp, #44]	@ 0x2c
      format++;
 8006414:	000d      	movs	r5, r1
 8006416:	3101      	adds	r1, #1
 8006418:	e733      	b.n	8006282 <_vsnprintf+0x9a>
        flags |= FLAGS_LEFT;    // reverse padding
 800641a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800641c:	3828      	subs	r0, #40	@ 0x28
 800641e:	4302      	orrs	r2, r0
 8006420:	920a      	str	r2, [sp, #40]	@ 0x28
        width = (unsigned int)-w;
 8006422:	4642      	mov	r2, r8
 8006424:	4252      	negs	r2, r2
    if (*format == '.') {
 8006426:	7868      	ldrb	r0, [r5, #1]
        width = (unsigned int)-w;
 8006428:	4690      	mov	r8, r2
      format++;
 800642a:	000d      	movs	r5, r1
      const int w = va_arg(va, int);
 800642c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800642e:	3101      	adds	r1, #1
 8006430:	e727      	b.n	8006282 <_vsnprintf+0x9a>
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8006432:	2867      	cmp	r0, #103	@ 0x67
 8006434:	d100      	bne.n	8006438 <_vsnprintf+0x250>
 8006436:	e1c6      	b.n	80067c6 <_vsnprintf+0x5de>
 8006438:	2847      	cmp	r0, #71	@ 0x47
 800643a:	d100      	bne.n	800643e <_vsnprintf+0x256>
 800643c:	e213      	b.n	8006866 <_vsnprintf+0x67e>
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800643e:	2845      	cmp	r0, #69	@ 0x45
 8006440:	d100      	bne.n	8006444 <_vsnprintf+0x25c>
 8006442:	e215      	b.n	8006870 <_vsnprintf+0x688>
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8006444:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006446:	2107      	movs	r1, #7
 8006448:	9204      	str	r2, [sp, #16]
 800644a:	4642      	mov	r2, r8
 800644c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800644e:	9203      	str	r2, [sp, #12]
 8006450:	3307      	adds	r3, #7
 8006452:	4652      	mov	r2, sl
 8006454:	438b      	bics	r3, r1
 8006456:	0019      	movs	r1, r3
 8006458:	9202      	str	r2, [sp, #8]
 800645a:	c90c      	ldmia	r1!, {r2, r3}
 800645c:	0030      	movs	r0, r6
 800645e:	9200      	str	r2, [sp, #0]
 8006460:	9301      	str	r3, [sp, #4]
 8006462:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006464:	0022      	movs	r2, r4
 8006466:	003b      	movs	r3, r7
 8006468:	4659      	mov	r1, fp
 800646a:	f7ff facb 	bl	8005a04 <_etoa>
 800646e:	0004      	movs	r4, r0
        break;
 8006470:	e6e0      	b.n	8006234 <_vsnprintf+0x4c>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8006472:	2380      	movs	r3, #128	@ 0x80
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	e728      	b.n	80062ca <_vsnprintf+0xe2>
        if (*format == 'h') {
 8006478:	7868      	ldrb	r0, [r5, #1]
 800647a:	2868      	cmp	r0, #104	@ 0x68
 800647c:	d100      	bne.n	8006480 <_vsnprintf+0x298>
 800647e:	e21a      	b.n	80068b6 <_vsnprintf+0x6ce>
        flags |= FLAGS_SHORT;
 8006480:	2380      	movs	r3, #128	@ 0x80
 8006482:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006484:	3101      	adds	r1, #1
 8006486:	431a      	orrs	r2, r3
 8006488:	920a      	str	r2, [sp, #40]	@ 0x28
 800648a:	e723      	b.n	80062d4 <_vsnprintf+0xec>
        if (*format == 'l') {
 800648c:	7868      	ldrb	r0, [r5, #1]
 800648e:	286c      	cmp	r0, #108	@ 0x6c
 8006490:	d100      	bne.n	8006494 <_vsnprintf+0x2ac>
 8006492:	e208      	b.n	80068a6 <_vsnprintf+0x6be>
        flags |= FLAGS_LONG;
 8006494:	2380      	movs	r3, #128	@ 0x80
 8006496:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006498:	005b      	lsls	r3, r3, #1
 800649a:	431a      	orrs	r2, r3
 800649c:	920a      	str	r2, [sp, #40]	@ 0x28
 800649e:	3101      	adds	r1, #1
 80064a0:	e718      	b.n	80062d4 <_vsnprintf+0xec>
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 80064a2:	2846      	cmp	r0, #70	@ 0x46
 80064a4:	d100      	bne.n	80064a8 <_vsnprintf+0x2c0>
 80064a6:	e189      	b.n	80067bc <_vsnprintf+0x5d4>
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80064a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80064aa:	2107      	movs	r1, #7
 80064ac:	9204      	str	r2, [sp, #16]
 80064ae:	4642      	mov	r2, r8
 80064b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064b2:	9203      	str	r2, [sp, #12]
 80064b4:	3307      	adds	r3, #7
 80064b6:	4652      	mov	r2, sl
 80064b8:	438b      	bics	r3, r1
 80064ba:	0019      	movs	r1, r3
 80064bc:	9202      	str	r2, [sp, #8]
 80064be:	c90c      	ldmia	r1!, {r2, r3}
 80064c0:	0030      	movs	r0, r6
 80064c2:	9200      	str	r2, [sp, #0]
 80064c4:	9301      	str	r3, [sp, #4]
 80064c6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80064c8:	0022      	movs	r2, r4
 80064ca:	003b      	movs	r3, r7
 80064cc:	4659      	mov	r1, fp
 80064ce:	f7ff fcb5 	bl	8005e3c <_ftoa>
 80064d2:	0004      	movs	r4, r0
        break;
 80064d4:	e6ae      	b.n	8006234 <_vsnprintf+0x4c>
        out('%', buffer, idx++, maxlen);
 80064d6:	1c63      	adds	r3, r4, #1
 80064d8:	4698      	mov	r8, r3
 80064da:	0022      	movs	r2, r4
 80064dc:	003b      	movs	r3, r7
 80064de:	4659      	mov	r1, fp
 80064e0:	2025      	movs	r0, #37	@ 0x25
 80064e2:	47b0      	blx	r6
 80064e4:	4644      	mov	r4, r8
        break;
 80064e6:	e6a5      	b.n	8006234 <_vsnprintf+0x4c>
            const long value = va_arg(va, long);
 80064e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064ea:	3304      	adds	r3, #4
 80064ec:	930c      	str	r3, [sp, #48]	@ 0x30
      out(*format, buffer, idx++, maxlen);
 80064ee:	1c63      	adds	r3, r4, #1
 80064f0:	4699      	mov	r9, r3
        if (!(flags & FLAGS_LEFT)) {
 80064f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064f4:	079a      	lsls	r2, r3, #30
 80064f6:	d400      	bmi.n	80064fa <_vsnprintf+0x312>
 80064f8:	e1e3      	b.n	80068c2 <_vsnprintf+0x6da>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 80064fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064fc:	0022      	movs	r2, r4
 80064fe:	7818      	ldrb	r0, [r3, #0]
 8006500:	4659      	mov	r1, fp
 8006502:	003b      	movs	r3, r7
 8006504:	47b0      	blx	r6
          while (l++ < width) {
 8006506:	4643      	mov	r3, r8
 8006508:	4444      	add	r4, r8
 800650a:	2b01      	cmp	r3, #1
 800650c:	d800      	bhi.n	8006510 <_vsnprintf+0x328>
 800650e:	e2b4      	b.n	8006a7a <_vsnprintf+0x892>
 8006510:	002b      	movs	r3, r5
 8006512:	46b8      	mov	r8, r7
 8006514:	0025      	movs	r5, r4
 8006516:	465f      	mov	r7, fp
 8006518:	464c      	mov	r4, r9
 800651a:	4699      	mov	r9, r3
            out(' ', buffer, idx++, maxlen);
 800651c:	0022      	movs	r2, r4
 800651e:	4643      	mov	r3, r8
 8006520:	3401      	adds	r4, #1
 8006522:	0039      	movs	r1, r7
 8006524:	2020      	movs	r0, #32
 8006526:	47b0      	blx	r6
          while (l++ < width) {
 8006528:	42ac      	cmp	r4, r5
 800652a:	d1f7      	bne.n	800651c <_vsnprintf+0x334>
 800652c:	002c      	movs	r4, r5
 800652e:	46bb      	mov	fp, r7
 8006530:	464d      	mov	r5, r9
        break;
 8006532:	4647      	mov	r7, r8
 8006534:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006536:	930b      	str	r3, [sp, #44]	@ 0x2c
        break;
 8006538:	e67c      	b.n	8006234 <_vsnprintf+0x4c>
    out = _out_null;
 800653a:	4b09      	ldr	r3, [pc, #36]	@ (8006560 <_vsnprintf+0x378>)
  while (*format)
 800653c:	7828      	ldrb	r0, [r5, #0]
    out = _out_null;
 800653e:	469b      	mov	fp, r3
  while (*format)
 8006540:	2300      	movs	r3, #0
 8006542:	4699      	mov	r9, r3
 8006544:	2800      	cmp	r0, #0
 8006546:	d000      	beq.n	800654a <_vsnprintf+0x362>
 8006548:	e664      	b.n	8006214 <_vsnprintf+0x2c>
 800654a:	2400      	movs	r4, #0
 800654c:	e748      	b.n	80063e0 <_vsnprintf+0x1f8>
 800654e:	46c0      	nop			@ (mov r8, r8)
 8006550:	0800ec30 	.word	0x0800ec30
 8006554:	0800ecc0 	.word	0x0800ecc0
 8006558:	0800ec74 	.word	0x0800ec74
 800655c:	00009041 	.word	0x00009041
 8006560:	08005751 	.word	0x08005751
        const char* p = va_arg(va, char*);
 8006564:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006566:	cb02      	ldmia	r3!, {r1}
 8006568:	9312      	str	r3, [sp, #72]	@ 0x48
  for (s = str; *s && maxsize--; ++s);
 800656a:	780b      	ldrb	r3, [r1, #0]
 800656c:	469c      	mov	ip, r3
 800656e:	0018      	movs	r0, r3
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8006570:	4653      	mov	r3, sl
 8006572:	2b00      	cmp	r3, #0
 8006574:	d000      	beq.n	8006578 <_vsnprintf+0x390>
 8006576:	e09c      	b.n	80066b2 <_vsnprintf+0x4ca>
  for (s = str; *s && maxsize--; ++s);
 8006578:	2800      	cmp	r0, #0
 800657a:	d012      	beq.n	80065a2 <_vsnprintf+0x3ba>
 800657c:	2302      	movs	r3, #2
 800657e:	425b      	negs	r3, r3
 8006580:	3301      	adds	r3, #1
 8006582:	4699      	mov	r9, r3
 8006584:	4489      	add	r9, r1
 8006586:	464a      	mov	r2, r9
 8006588:	000b      	movs	r3, r1
 800658a:	4689      	mov	r9, r1
 800658c:	0011      	movs	r1, r2
 800658e:	e001      	b.n	8006594 <_vsnprintf+0x3ac>
 8006590:	428b      	cmp	r3, r1
 8006592:	d003      	beq.n	800659c <_vsnprintf+0x3b4>
 8006594:	785a      	ldrb	r2, [r3, #1]
 8006596:	3301      	adds	r3, #1
 8006598:	2a00      	cmp	r2, #0
 800659a:	d1f9      	bne.n	8006590 <_vsnprintf+0x3a8>
  return (unsigned int)(s - str);
 800659c:	4649      	mov	r1, r9
 800659e:	1a5b      	subs	r3, r3, r1
 80065a0:	930c      	str	r3, [sp, #48]	@ 0x30
        if (flags & FLAGS_PRECISION) {
 80065a2:	2380      	movs	r3, #128	@ 0x80
 80065a4:	00db      	lsls	r3, r3, #3
 80065a6:	4699      	mov	r9, r3
 80065a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80065aa:	4013      	ands	r3, r2
 80065ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065ae:	464b      	mov	r3, r9
 80065b0:	421a      	tst	r2, r3
 80065b2:	d004      	beq.n	80065be <_vsnprintf+0x3d6>
          l = (l < precision ? l : precision);
 80065b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80065b6:	4553      	cmp	r3, sl
 80065b8:	d901      	bls.n	80065be <_vsnprintf+0x3d6>
 80065ba:	4653      	mov	r3, sl
 80065bc:	930c      	str	r3, [sp, #48]	@ 0x30
        if (!(flags & FLAGS_LEFT)) {
 80065be:	2302      	movs	r3, #2
 80065c0:	4699      	mov	r9, r3
 80065c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80065c4:	4013      	ands	r3, r2
 80065c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80065c8:	464b      	mov	r3, r9
 80065ca:	4213      	tst	r3, r2
 80065cc:	d100      	bne.n	80065d0 <_vsnprintf+0x3e8>
 80065ce:	e1b2      	b.n	8006936 <_vsnprintf+0x74e>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80065d0:	4663      	mov	r3, ip
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d100      	bne.n	80065d8 <_vsnprintf+0x3f0>
 80065d6:	e194      	b.n	8006902 <_vsnprintf+0x71a>
 80065d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d100      	bne.n	80065e0 <_vsnprintf+0x3f8>
 80065de:	e14c      	b.n	800687a <_vsnprintf+0x692>
 80065e0:	46d1      	mov	r9, sl
 80065e2:	1b0b      	subs	r3, r1, r4
 80065e4:	469a      	mov	sl, r3
 80065e6:	002b      	movs	r3, r5
 80065e8:	44a1      	add	r9, r4
 80065ea:	464d      	mov	r5, r9
            out(' ', buffer, idx++, maxlen);
 80065ec:	0022      	movs	r2, r4
 80065ee:	46b9      	mov	r9, r7
 80065f0:	465f      	mov	r7, fp
 80065f2:	469b      	mov	fp, r3
 80065f4:	e009      	b.n	800660a <_vsnprintf+0x422>
          out(*(p++), buffer, idx++, maxlen);
 80065f6:	464b      	mov	r3, r9
 80065f8:	0039      	movs	r1, r7
 80065fa:	1c54      	adds	r4, r2, #1
 80065fc:	47b0      	blx	r6
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80065fe:	4653      	mov	r3, sl
 8006600:	5d18      	ldrb	r0, [r3, r4]
 8006602:	2800      	cmp	r0, #0
 8006604:	d100      	bne.n	8006608 <_vsnprintf+0x420>
 8006606:	e158      	b.n	80068ba <_vsnprintf+0x6d2>
          out(*(p++), buffer, idx++, maxlen);
 8006608:	0022      	movs	r2, r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800660a:	4295      	cmp	r5, r2
 800660c:	d1f3      	bne.n	80065f6 <_vsnprintf+0x40e>
 800660e:	465b      	mov	r3, fp
 8006610:	46bb      	mov	fp, r7
 8006612:	464f      	mov	r7, r9
 8006614:	46a9      	mov	r9, r5
 8006616:	001d      	movs	r5, r3
 8006618:	464c      	mov	r4, r9
        if (flags & FLAGS_LEFT) {
 800661a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800661c:	2b00      	cmp	r3, #0
 800661e:	d000      	beq.n	8006622 <_vsnprintf+0x43a>
 8006620:	e16f      	b.n	8006902 <_vsnprintf+0x71a>
        const char* p = va_arg(va, char*);
 8006622:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006624:	930b      	str	r3, [sp, #44]	@ 0x2c
        break;
 8006626:	e605      	b.n	8006234 <_vsnprintf+0x4c>
 8006628:	4655      	mov	r5, sl
 800662a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800662c:	00a9      	lsls	r1, r5, #2
 800662e:	1949      	adds	r1, r1, r5
 8006630:	0049      	lsls	r1, r1, #1
 8006632:	3301      	adds	r3, #1
 8006634:	180d      	adds	r5, r1, r0
  while (_is_digit(**str)) {
 8006636:	7818      	ldrb	r0, [r3, #0]
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8006638:	3d30      	subs	r5, #48	@ 0x30
  while (_is_digit(**str)) {
 800663a:	0001      	movs	r1, r0
 800663c:	3930      	subs	r1, #48	@ 0x30
 800663e:	2909      	cmp	r1, #9
 8006640:	d9f4      	bls.n	800662c <_vsnprintf+0x444>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8006642:	46aa      	mov	sl, r5
 8006644:	920a      	str	r2, [sp, #40]	@ 0x28
 8006646:	001d      	movs	r5, r3
 8006648:	1c59      	adds	r1, r3, #1
 800664a:	e61f      	b.n	800628c <_vsnprintf+0xa4>
        const int prec = (int)va_arg(va, int);
 800664c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    switch (*format) {
 800664e:	78a8      	ldrb	r0, [r5, #2]
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8006650:	cb04      	ldmia	r3!, {r2}
        format++;
 8006652:	3502      	adds	r5, #2
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8006654:	43d1      	mvns	r1, r2
 8006656:	17c9      	asrs	r1, r1, #31
 8006658:	400a      	ands	r2, r1
 800665a:	4692      	mov	sl, r2
        const int prec = (int)va_arg(va, int);
 800665c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800665e:	1c69      	adds	r1, r5, #1
 8006660:	e614      	b.n	800628c <_vsnprintf+0xa4>
    flags &= ~FLAGS_HASH;
 8006662:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006664:	2110      	movs	r1, #16
 8006666:	001a      	movs	r2, r3
 8006668:	438a      	bics	r2, r1
 800666a:	0010      	movs	r0, r2
 800666c:	3111      	adds	r1, #17
 800666e:	4308      	orrs	r0, r1
 8006670:	4681      	mov	r9, r0
  if (!(flags & FLAGS_PRECISION) || value) {
 8006672:	2080      	movs	r0, #128	@ 0x80
 8006674:	001a      	movs	r2, r3
 8006676:	00c0      	lsls	r0, r0, #3
 8006678:	4002      	ands	r2, r0
 800667a:	0011      	movs	r1, r2
 800667c:	4203      	tst	r3, r0
 800667e:	d100      	bne.n	8006682 <_vsnprintf+0x49a>
 8006680:	e658      	b.n	8006334 <_vsnprintf+0x14c>
  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8006682:	464b      	mov	r3, r9
 8006684:	2208      	movs	r2, #8
 8006686:	9306      	str	r3, [sp, #24]
 8006688:	4653      	mov	r3, sl
 800668a:	9205      	str	r2, [sp, #20]
 800668c:	3208      	adds	r2, #8
 800668e:	9203      	str	r2, [sp, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	9304      	str	r3, [sp, #16]
 8006694:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006696:	9202      	str	r2, [sp, #8]
 8006698:	9301      	str	r3, [sp, #4]
 800669a:	ab18      	add	r3, sp, #96	@ 0x60
 800669c:	0022      	movs	r2, r4
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	4659      	mov	r1, fp
 80066a2:	003b      	movs	r3, r7
 80066a4:	0030      	movs	r0, r6
 80066a6:	f7ff f89d 	bl	80057e4 <_ntoa_format>
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80066aa:	4643      	mov	r3, r8
  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80066ac:	0004      	movs	r4, r0
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80066ae:	930b      	str	r3, [sp, #44]	@ 0x2c
        break;
 80066b0:	e5c0      	b.n	8006234 <_vsnprintf+0x4c>
  for (s = str; *s && maxsize--; ++s);
 80066b2:	2800      	cmp	r0, #0
 80066b4:	d100      	bne.n	80066b8 <_vsnprintf+0x4d0>
 80066b6:	e774      	b.n	80065a2 <_vsnprintf+0x3ba>
 80066b8:	4653      	mov	r3, sl
 80066ba:	3b01      	subs	r3, #1
 80066bc:	e760      	b.n	8006580 <_vsnprintf+0x398>
        if (*format == 'x' || *format == 'X') {
 80066be:	2862      	cmp	r0, #98	@ 0x62
 80066c0:	d100      	bne.n	80066c4 <_vsnprintf+0x4dc>
 80066c2:	e1dc      	b.n	8006a7e <_vsnprintf+0x896>
 80066c4:	2858      	cmp	r0, #88	@ 0x58
 80066c6:	d100      	bne.n	80066ca <_vsnprintf+0x4e2>
 80066c8:	e1e9      	b.n	8006a9e <_vsnprintf+0x8b6>
        if (flags & FLAGS_PRECISION) {
 80066ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80066cc:	2380      	movs	r3, #128	@ 0x80
 80066ce:	000a      	movs	r2, r1
 80066d0:	00db      	lsls	r3, r3, #3
 80066d2:	401a      	ands	r2, r3
 80066d4:	0010      	movs	r0, r2
 80066d6:	000a      	movs	r2, r1
 80066d8:	4219      	tst	r1, r3
 80066da:	d100      	bne.n	80066de <_vsnprintf+0x4f6>
 80066dc:	e1ba      	b.n	8006a54 <_vsnprintf+0x86c>
          flags &= ~FLAGS_ZEROPAD;
 80066de:	2311      	movs	r3, #17
 80066e0:	439a      	bics	r2, r3
 80066e2:	920c      	str	r2, [sp, #48]	@ 0x30
          if (flags & FLAGS_LONG_LONG) {
 80066e4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80066e6:	2380      	movs	r3, #128	@ 0x80
 80066e8:	0011      	movs	r1, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4019      	ands	r1, r3
 80066ee:	468c      	mov	ip, r1
 80066f0:	421a      	tst	r2, r3
 80066f2:	d000      	beq.n	80066f6 <_vsnprintf+0x50e>
 80066f4:	e143      	b.n	800697e <_vsnprintf+0x796>
          else if (flags & FLAGS_LONG) {
 80066f6:	2380      	movs	r3, #128	@ 0x80
 80066f8:	0011      	movs	r1, r2
 80066fa:	005b      	lsls	r3, r3, #1
 80066fc:	4019      	ands	r1, r3
 80066fe:	4689      	mov	r9, r1
            const long value = va_arg(va, long);
 8006700:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006702:	3104      	adds	r1, #4
 8006704:	910a      	str	r1, [sp, #40]	@ 0x28
          else if (flags & FLAGS_LONG) {
 8006706:	421a      	tst	r2, r3
 8006708:	d000      	beq.n	800670c <_vsnprintf+0x524>
 800670a:	e28c      	b.n	8006c26 <_vsnprintf+0xa3e>
 800670c:	0013      	movs	r3, r2
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800670e:	065b      	lsls	r3, r3, #25
 8006710:	d500      	bpl.n	8006714 <_vsnprintf+0x52c>
 8006712:	e19b      	b.n	8006a4c <_vsnprintf+0x864>
 8006714:	0013      	movs	r3, r2
 8006716:	061b      	lsls	r3, r3, #24
 8006718:	d400      	bmi.n	800671c <_vsnprintf+0x534>
 800671a:	e323      	b.n	8006d64 <_vsnprintf+0xb7c>
 800671c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800671e:	2200      	movs	r2, #0
 8006720:	5e9b      	ldrsh	r3, [r3, r2]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8006722:	17d9      	asrs	r1, r3, #31
 8006724:	185a      	adds	r2, r3, r1
 8006726:	404a      	eors	r2, r1
 8006728:	b292      	uxth	r2, r2
 800672a:	0fd9      	lsrs	r1, r3, #31
 800672c:	910b      	str	r1, [sp, #44]	@ 0x2c
  if (!value) {
 800672e:	2b00      	cmp	r3, #0
 8006730:	d100      	bne.n	8006734 <_vsnprintf+0x54c>
 8006732:	e274      	b.n	8006c1e <_vsnprintf+0xa36>
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8006734:	0010      	movs	r0, r2
 8006736:	aa10      	add	r2, sp, #64	@ 0x40
 8006738:	4694      	mov	ip, r2
 800673a:	4642      	mov	r2, r8
 800673c:	231f      	movs	r3, #31
 800673e:	9212      	str	r2, [sp, #72]	@ 0x48
 8006740:	4652      	mov	r2, sl
 8006742:	4463      	add	r3, ip
 8006744:	46aa      	mov	sl, r5
 8006746:	9414      	str	r4, [sp, #80]	@ 0x50
 8006748:	464d      	mov	r5, r9
 800674a:	0004      	movs	r4, r0
 800674c:	46b9      	mov	r9, r7
 800674e:	46b0      	mov	r8, r6
 8006750:	001f      	movs	r7, r3
 8006752:	9213      	str	r2, [sp, #76]	@ 0x4c
 8006754:	e001      	b.n	800675a <_vsnprintf+0x572>
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8006756:	2d20      	cmp	r5, #32
 8006758:	d00f      	beq.n	800677a <_vsnprintf+0x592>
      const char digit = (char)(value % base);
 800675a:	0020      	movs	r0, r4
 800675c:	210a      	movs	r1, #10
 800675e:	f7f9 fd75 	bl	800024c <__aeabi_uidivmod>
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8006762:	3501      	adds	r5, #1
 8006764:	197e      	adds	r6, r7, r5
 8006766:	3130      	adds	r1, #48	@ 0x30
 8006768:	7031      	strb	r1, [r6, #0]
      value /= base;
 800676a:	0020      	movs	r0, r4
 800676c:	210a      	movs	r1, #10
 800676e:	f7f9 fce7 	bl	8000140 <__udivsi3>
 8006772:	0026      	movs	r6, r4
 8006774:	0004      	movs	r4, r0
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8006776:	2e09      	cmp	r6, #9
 8006778:	d8ed      	bhi.n	8006756 <_vsnprintf+0x56e>
 800677a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800677c:	4646      	mov	r6, r8
 800677e:	4698      	mov	r8, r3
 8006780:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006782:	464f      	mov	r7, r9
 8006784:	46a9      	mov	r9, r5
 8006786:	4655      	mov	r5, sl
 8006788:	469a      	mov	sl, r3
 800678a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800678c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800678e:	9306      	str	r3, [sp, #24]
 8006790:	4643      	mov	r3, r8
 8006792:	9305      	str	r3, [sp, #20]
 8006794:	4653      	mov	r3, sl
 8006796:	9304      	str	r3, [sp, #16]
 8006798:	230a      	movs	r3, #10
 800679a:	9303      	str	r3, [sp, #12]
 800679c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800679e:	9302      	str	r3, [sp, #8]
 80067a0:	464b      	mov	r3, r9
 80067a2:	9301      	str	r3, [sp, #4]
 80067a4:	ab18      	add	r3, sp, #96	@ 0x60
 80067a6:	0022      	movs	r2, r4
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	4659      	mov	r1, fp
 80067ac:	003b      	movs	r3, r7
 80067ae:	0030      	movs	r0, r6
 80067b0:	f7ff f818 	bl	80057e4 <_ntoa_format>
 80067b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067b6:	0004      	movs	r4, r0
 80067b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80067ba:	e53b      	b.n	8006234 <_vsnprintf+0x4c>
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 80067bc:	2320      	movs	r3, #32
 80067be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80067c0:	431a      	orrs	r2, r3
 80067c2:	920a      	str	r2, [sp, #40]	@ 0x28
 80067c4:	e670      	b.n	80064a8 <_vsnprintf+0x2c0>
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 80067c6:	2380      	movs	r3, #128	@ 0x80
 80067c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80067ca:	011b      	lsls	r3, r3, #4
 80067cc:	431a      	orrs	r2, r3
 80067ce:	920a      	str	r2, [sp, #40]	@ 0x28
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 80067d0:	e638      	b.n	8006444 <_vsnprintf+0x25c>
        if (*format == 'x' || *format == 'X') {
 80067d2:	2878      	cmp	r0, #120	@ 0x78
 80067d4:	d000      	beq.n	80067d8 <_vsnprintf+0x5f0>
 80067d6:	e1ac      	b.n	8006b32 <_vsnprintf+0x94a>
        if (flags & FLAGS_PRECISION) {
 80067d8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80067da:	2380      	movs	r3, #128	@ 0x80
 80067dc:	0002      	movs	r2, r0
 80067de:	00db      	lsls	r3, r3, #3
 80067e0:	401a      	ands	r2, r3
 80067e2:	0011      	movs	r1, r2
 80067e4:	0002      	movs	r2, r0
 80067e6:	4218      	tst	r0, r3
 80067e8:	d100      	bne.n	80067ec <_vsnprintf+0x604>
 80067ea:	e2cd      	b.n	8006d88 <_vsnprintf+0xba0>
          flags &= ~FLAGS_ZEROPAD;
 80067ec:	230d      	movs	r3, #13
 80067ee:	439a      	bics	r2, r3
 80067f0:	0010      	movs	r0, r2
 80067f2:	3303      	adds	r3, #3
 80067f4:	930a      	str	r3, [sp, #40]	@ 0x28
          if (flags & FLAGS_LONG_LONG) {
 80067f6:	2380      	movs	r3, #128	@ 0x80
 80067f8:	0002      	movs	r2, r0
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	401a      	ands	r2, r3
 80067fe:	4694      	mov	ip, r2
 8006800:	4218      	tst	r0, r3
 8006802:	d000      	beq.n	8006806 <_vsnprintf+0x61e>
 8006804:	e1a9      	b.n	8006b5a <_vsnprintf+0x972>
          else if (flags & FLAGS_LONG) {
 8006806:	2380      	movs	r3, #128	@ 0x80
 8006808:	0002      	movs	r2, r0
 800680a:	005b      	lsls	r3, r3, #1
 800680c:	401a      	ands	r2, r3
 800680e:	4691      	mov	r9, r2
            const long value = va_arg(va, long);
 8006810:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006812:	3204      	adds	r2, #4
 8006814:	920c      	str	r2, [sp, #48]	@ 0x30
          else if (flags & FLAGS_LONG) {
 8006816:	4218      	tst	r0, r3
 8006818:	d000      	beq.n	800681c <_vsnprintf+0x634>
 800681a:	e247      	b.n	8006cac <_vsnprintf+0xac4>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800681c:	0643      	lsls	r3, r0, #25
 800681e:	d400      	bmi.n	8006822 <_vsnprintf+0x63a>
 8006820:	e290      	b.n	8006d44 <_vsnprintf+0xb5c>
 8006822:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	9308      	str	r3, [sp, #32]
  if (!value) {
 8006828:	2b00      	cmp	r3, #0
 800682a:	d000      	beq.n	800682e <_vsnprintf+0x646>
 800682c:	e148      	b.n	8006ac0 <_vsnprintf+0x8d8>
    flags &= ~FLAGS_HASH;
 800682e:	3310      	adds	r3, #16
 8006830:	4398      	bics	r0, r3
  if (!(flags & FLAGS_PRECISION) || value) {
 8006832:	2900      	cmp	r1, #0
 8006834:	d100      	bne.n	8006838 <_vsnprintf+0x650>
 8006836:	e143      	b.n	8006ac0 <_vsnprintf+0x8d8>
  size_t len = 0U;
 8006838:	2300      	movs	r3, #0
 800683a:	4699      	mov	r9, r3
  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800683c:	4643      	mov	r3, r8
 800683e:	9305      	str	r3, [sp, #20]
 8006840:	4653      	mov	r3, sl
 8006842:	9304      	str	r3, [sp, #16]
 8006844:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006846:	9006      	str	r0, [sp, #24]
 8006848:	9303      	str	r3, [sp, #12]
 800684a:	2300      	movs	r3, #0
 800684c:	9302      	str	r3, [sp, #8]
 800684e:	464b      	mov	r3, r9
 8006850:	9301      	str	r3, [sp, #4]
 8006852:	ab18      	add	r3, sp, #96	@ 0x60
 8006854:	0022      	movs	r2, r4
 8006856:	9300      	str	r3, [sp, #0]
 8006858:	4659      	mov	r1, fp
 800685a:	003b      	movs	r3, r7
 800685c:	0030      	movs	r0, r6
 800685e:	f7fe ffc1 	bl	80057e4 <_ntoa_format>
 8006862:	0004      	movs	r4, r0
 8006864:	e666      	b.n	8006534 <_vsnprintf+0x34c>
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8006866:	2380      	movs	r3, #128	@ 0x80
 8006868:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800686a:	011b      	lsls	r3, r3, #4
 800686c:	431a      	orrs	r2, r3
 800686e:	920a      	str	r2, [sp, #40]	@ 0x28
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8006870:	2320      	movs	r3, #32
 8006872:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006874:	431a      	orrs	r2, r3
 8006876:	920a      	str	r2, [sp, #40]	@ 0x28
 8006878:	e5e4      	b.n	8006444 <_vsnprintf+0x25c>
 800687a:	1b0b      	subs	r3, r1, r4
 800687c:	469a      	mov	sl, r3
 800687e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006880:	4699      	mov	r9, r3
 8006882:	002b      	movs	r3, r5
 8006884:	465d      	mov	r5, fp
 8006886:	469b      	mov	fp, r3
          out(*(p++), buffer, idx++, maxlen);
 8006888:	0022      	movs	r2, r4
 800688a:	003b      	movs	r3, r7
 800688c:	0029      	movs	r1, r5
 800688e:	47b0      	blx	r6
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8006890:	4653      	mov	r3, sl
          out(*(p++), buffer, idx++, maxlen);
 8006892:	3401      	adds	r4, #1
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8006894:	5d18      	ldrb	r0, [r3, r4]
 8006896:	2800      	cmp	r0, #0
 8006898:	d1f6      	bne.n	8006888 <_vsnprintf+0x6a0>
 800689a:	464b      	mov	r3, r9
 800689c:	930c      	str	r3, [sp, #48]	@ 0x30
 800689e:	465b      	mov	r3, fp
 80068a0:	46ab      	mov	fp, r5
 80068a2:	001d      	movs	r5, r3
 80068a4:	e6b9      	b.n	800661a <_vsnprintf+0x432>
          flags |= FLAGS_LONG_LONG;
 80068a6:	23c0      	movs	r3, #192	@ 0xc0
 80068a8:	009b      	lsls	r3, r3, #2
          flags |= FLAGS_CHAR;
 80068aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
    switch (*format) {
 80068ac:	78a8      	ldrb	r0, [r5, #2]
          flags |= FLAGS_CHAR;
 80068ae:	431a      	orrs	r2, r3
 80068b0:	920a      	str	r2, [sp, #40]	@ 0x28
          format++;
 80068b2:	1ce9      	adds	r1, r5, #3
 80068b4:	e50e      	b.n	80062d4 <_vsnprintf+0xec>
          flags |= FLAGS_CHAR;
 80068b6:	23c0      	movs	r3, #192	@ 0xc0
 80068b8:	e7f7      	b.n	80068aa <_vsnprintf+0x6c2>
 80068ba:	465d      	mov	r5, fp
 80068bc:	46bb      	mov	fp, r7
 80068be:	464f      	mov	r7, r9
 80068c0:	e6ab      	b.n	800661a <_vsnprintf+0x432>
          while (l++ < width) {
 80068c2:	4643      	mov	r3, r8
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d800      	bhi.n	80068ca <_vsnprintf+0x6e2>
 80068c8:	e0d1      	b.n	8006a6e <_vsnprintf+0x886>
 80068ca:	1e63      	subs	r3, r4, #1
 80068cc:	4443      	add	r3, r8
 80068ce:	46b9      	mov	r9, r7
 80068d0:	001d      	movs	r5, r3
 80068d2:	465f      	mov	r7, fp
 80068d4:	46a2      	mov	sl, r4
 80068d6:	468b      	mov	fp, r1
            out(' ', buffer, idx++, maxlen);
 80068d8:	0022      	movs	r2, r4
 80068da:	464b      	mov	r3, r9
 80068dc:	3401      	adds	r4, #1
 80068de:	0039      	movs	r1, r7
 80068e0:	2020      	movs	r0, #32
 80068e2:	47b0      	blx	r6
          while (l++ < width) {
 80068e4:	42ac      	cmp	r4, r5
 80068e6:	d1f7      	bne.n	80068d8 <_vsnprintf+0x6f0>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 80068e8:	465d      	mov	r5, fp
 80068ea:	46bb      	mov	fp, r7
 80068ec:	464f      	mov	r7, r9
 80068ee:	46a1      	mov	r9, r4
 80068f0:	4654      	mov	r4, sl
 80068f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068f4:	464a      	mov	r2, r9
 80068f6:	7818      	ldrb	r0, [r3, #0]
 80068f8:	4659      	mov	r1, fp
 80068fa:	003b      	movs	r3, r7
 80068fc:	4444      	add	r4, r8
 80068fe:	47b0      	blx	r6
        if (flags & FLAGS_LEFT) {
 8006900:	e618      	b.n	8006534 <_vsnprintf+0x34c>
          while (l++ < width) {
 8006902:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006904:	46a1      	mov	r9, r4
 8006906:	4598      	cmp	r8, r3
 8006908:	d800      	bhi.n	800690c <_vsnprintf+0x724>
 800690a:	e68a      	b.n	8006622 <_vsnprintf+0x43a>
 800690c:	4444      	add	r4, r8
 800690e:	1ae4      	subs	r4, r4, r3
 8006910:	002b      	movs	r3, r5
 8006912:	46b8      	mov	r8, r7
 8006914:	0025      	movs	r5, r4
 8006916:	465f      	mov	r7, fp
 8006918:	464c      	mov	r4, r9
 800691a:	4699      	mov	r9, r3
            out(' ', buffer, idx++, maxlen);
 800691c:	0022      	movs	r2, r4
 800691e:	4643      	mov	r3, r8
 8006920:	3401      	adds	r4, #1
 8006922:	0039      	movs	r1, r7
 8006924:	2020      	movs	r0, #32
 8006926:	47b0      	blx	r6
          while (l++ < width) {
 8006928:	42ac      	cmp	r4, r5
 800692a:	d1f7      	bne.n	800691c <_vsnprintf+0x734>
 800692c:	002c      	movs	r4, r5
 800692e:	46bb      	mov	fp, r7
 8006930:	464d      	mov	r5, r9
 8006932:	4647      	mov	r7, r8
 8006934:	e675      	b.n	8006622 <_vsnprintf+0x43a>
          while (l++ < width) {
 8006936:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8006938:	4580      	cmp	r8, r0
 800693a:	d800      	bhi.n	800693e <_vsnprintf+0x756>
 800693c:	e21c      	b.n	8006d78 <_vsnprintf+0xb90>
 800693e:	4643      	mov	r3, r8
 8006940:	191a      	adds	r2, r3, r4
 8006942:	1a13      	subs	r3, r2, r0
 8006944:	4699      	mov	r9, r3
 8006946:	002b      	movs	r3, r5
 8006948:	464d      	mov	r5, r9
 800694a:	46b9      	mov	r9, r7
 800694c:	465f      	mov	r7, fp
 800694e:	469b      	mov	fp, r3
 8006950:	910c      	str	r1, [sp, #48]	@ 0x30
            out(' ', buffer, idx++, maxlen);
 8006952:	0022      	movs	r2, r4
 8006954:	464b      	mov	r3, r9
 8006956:	3401      	adds	r4, #1
 8006958:	0039      	movs	r1, r7
 800695a:	2020      	movs	r0, #32
 800695c:	47b0      	blx	r6
          while (l++ < width) {
 800695e:	42ac      	cmp	r4, r5
 8006960:	d1f7      	bne.n	8006952 <_vsnprintf+0x76a>
 8006962:	4643      	mov	r3, r8
 8006964:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006966:	3301      	adds	r3, #1
 8006968:	930c      	str	r3, [sp, #48]	@ 0x30
 800696a:	780b      	ldrb	r3, [r1, #0]
 800696c:	465d      	mov	r5, fp
 800696e:	469c      	mov	ip, r3
 8006970:	46bb      	mov	fp, r7
 8006972:	464f      	mov	r7, r9
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8006974:	4660      	mov	r0, ip
 8006976:	2800      	cmp	r0, #0
 8006978:	d000      	beq.n	800697c <_vsnprintf+0x794>
 800697a:	e62d      	b.n	80065d8 <_vsnprintf+0x3f0>
 800697c:	e651      	b.n	8006622 <_vsnprintf+0x43a>
            const long long value = va_arg(va, long long);
 800697e:	2207      	movs	r2, #7
 8006980:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006982:	3307      	adds	r3, #7
 8006984:	4393      	bics	r3, r2
 8006986:	3201      	adds	r2, #1
 8006988:	4694      	mov	ip, r2
 800698a:	449c      	add	ip, r3
 800698c:	4662      	mov	r2, ip
 800698e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006990:	cb0c      	ldmia	r3, {r2, r3}
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8006992:	0fd9      	lsrs	r1, r3, #31
 8006994:	910a      	str	r1, [sp, #40]	@ 0x28
  if (!value) {
 8006996:	0011      	movs	r1, r2
 8006998:	4319      	orrs	r1, r3
 800699a:	d05f      	beq.n	8006a5c <_vsnprintf+0x874>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800699c:	17d9      	asrs	r1, r3, #31
 800699e:	9111      	str	r1, [sp, #68]	@ 0x44
 80069a0:	9110      	str	r1, [sp, #64]	@ 0x40
 80069a2:	4051      	eors	r1, r2
 80069a4:	910e      	str	r1, [sp, #56]	@ 0x38
 80069a6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80069a8:	4059      	eors	r1, r3
 80069aa:	910f      	str	r1, [sp, #60]	@ 0x3c
 80069ac:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80069ae:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80069b0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80069b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80069b4:	1a80      	subs	r0, r0, r2
 80069b6:	4199      	sbcs	r1, r3
 80069b8:	900e      	str	r0, [sp, #56]	@ 0x38
 80069ba:	910f      	str	r1, [sp, #60]	@ 0x3c
 80069bc:	aa10      	add	r2, sp, #64	@ 0x40
  if (!(flags & FLAGS_PRECISION) || value) {
 80069be:	2300      	movs	r3, #0
 80069c0:	4694      	mov	ip, r2
 80069c2:	4642      	mov	r2, r8
 80069c4:	4699      	mov	r9, r3
 80069c6:	9212      	str	r2, [sp, #72]	@ 0x48
 80069c8:	4652      	mov	r2, sl
 80069ca:	331f      	adds	r3, #31
 80069cc:	4463      	add	r3, ip
 80069ce:	46b0      	mov	r8, r6
 80069d0:	46aa      	mov	sl, r5
 80069d2:	464e      	mov	r6, r9
 80069d4:	9414      	str	r4, [sp, #80]	@ 0x50
 80069d6:	46b9      	mov	r9, r7
 80069d8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80069da:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80069dc:	001f      	movs	r7, r3
 80069de:	9213      	str	r2, [sp, #76]	@ 0x4c
 80069e0:	e001      	b.n	80069e6 <_vsnprintf+0x7fe>
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80069e2:	2e20      	cmp	r6, #32
 80069e4:	d010      	beq.n	8006a08 <_vsnprintf+0x820>
      const char digit = (char)(value % base);
 80069e6:	0020      	movs	r0, r4
 80069e8:	0029      	movs	r1, r5
 80069ea:	220a      	movs	r2, #10
 80069ec:	2300      	movs	r3, #0
 80069ee:	f7f9 fd79 	bl	80004e4 <__aeabi_uldivmod>
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80069f2:	3601      	adds	r6, #1
 80069f4:	3230      	adds	r2, #48	@ 0x30
 80069f6:	002b      	movs	r3, r5
 80069f8:	55ba      	strb	r2, [r7, r6]
      value /= base;
 80069fa:	000d      	movs	r5, r1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80069fc:	0022      	movs	r2, r4
      value /= base;
 80069fe:	0004      	movs	r4, r0
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1ee      	bne.n	80069e2 <_vsnprintf+0x7fa>
 8006a04:	2a09      	cmp	r2, #9
 8006a06:	d8ec      	bhi.n	80069e2 <_vsnprintf+0x7fa>
 8006a08:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006a0a:	464f      	mov	r7, r9
 8006a0c:	46b1      	mov	r9, r6
 8006a0e:	4646      	mov	r6, r8
 8006a10:	4698      	mov	r8, r3
 8006a12:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006a14:	940e      	str	r4, [sp, #56]	@ 0x38
 8006a16:	950f      	str	r5, [sp, #60]	@ 0x3c
 8006a18:	4655      	mov	r5, sl
 8006a1a:	469a      	mov	sl, r3
 8006a1c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8006a1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006a20:	9306      	str	r3, [sp, #24]
 8006a22:	4643      	mov	r3, r8
 8006a24:	9305      	str	r3, [sp, #20]
 8006a26:	4653      	mov	r3, sl
 8006a28:	9304      	str	r3, [sp, #16]
 8006a2a:	230a      	movs	r3, #10
 8006a2c:	9303      	str	r3, [sp, #12]
 8006a2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a30:	9302      	str	r3, [sp, #8]
 8006a32:	464b      	mov	r3, r9
 8006a34:	9301      	str	r3, [sp, #4]
 8006a36:	ab18      	add	r3, sp, #96	@ 0x60
 8006a38:	0022      	movs	r2, r4
 8006a3a:	9300      	str	r3, [sp, #0]
 8006a3c:	4659      	mov	r1, fp
 8006a3e:	003b      	movs	r3, r7
 8006a40:	0030      	movs	r0, r6
 8006a42:	f7fe fecf 	bl	80057e4 <_ntoa_format>
 8006a46:	0004      	movs	r4, r0
 8006a48:	f7ff fbf4 	bl	8006234 <_vsnprintf+0x4c>
 8006a4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	001a      	movs	r2, r3
 8006a52:	e66a      	b.n	800672a <_vsnprintf+0x542>
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8006a54:	2310      	movs	r3, #16
 8006a56:	439a      	bics	r2, r3
 8006a58:	920c      	str	r2, [sp, #48]	@ 0x30
 8006a5a:	e643      	b.n	80066e4 <_vsnprintf+0x4fc>
  size_t len = 0U;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	4699      	mov	r9, r3
  if (!(flags & FLAGS_PRECISION) || value) {
 8006a60:	2800      	cmp	r0, #0
 8006a62:	d1dc      	bne.n	8006a1e <_vsnprintf+0x836>
 8006a64:	2200      	movs	r2, #0
 8006a66:	2300      	movs	r3, #0
 8006a68:	920e      	str	r2, [sp, #56]	@ 0x38
 8006a6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006a6c:	e7a6      	b.n	80069bc <_vsnprintf+0x7d4>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8006a6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a70:	0022      	movs	r2, r4
 8006a72:	7818      	ldrb	r0, [r3, #0]
 8006a74:	4659      	mov	r1, fp
 8006a76:	003b      	movs	r3, r7
 8006a78:	47b0      	blx	r6
          while (l++ < width) {
 8006a7a:	464c      	mov	r4, r9
 8006a7c:	e55a      	b.n	8006534 <_vsnprintf+0x34c>
        if (flags & FLAGS_PRECISION) {
 8006a7e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006a80:	2380      	movs	r3, #128	@ 0x80
 8006a82:	0002      	movs	r2, r0
 8006a84:	00db      	lsls	r3, r3, #3
 8006a86:	401a      	ands	r2, r3
 8006a88:	0011      	movs	r1, r2
 8006a8a:	4218      	tst	r0, r3
 8006a8c:	d100      	bne.n	8006a90 <_vsnprintf+0x8a8>
 8006a8e:	e15f      	b.n	8006d50 <_vsnprintf+0xb68>
 8006a90:	0002      	movs	r2, r0
          flags &= ~FLAGS_ZEROPAD;
 8006a92:	230d      	movs	r3, #13
 8006a94:	439a      	bics	r2, r3
 8006a96:	3b0b      	subs	r3, #11
 8006a98:	0010      	movs	r0, r2
 8006a9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a9c:	e6ab      	b.n	80067f6 <_vsnprintf+0x60e>
        if (flags & FLAGS_PRECISION) {
 8006a9e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006aa0:	2380      	movs	r3, #128	@ 0x80
 8006aa2:	0002      	movs	r2, r0
 8006aa4:	00db      	lsls	r3, r3, #3
 8006aa6:	401a      	ands	r2, r3
 8006aa8:	0011      	movs	r1, r2
 8006aaa:	0002      	movs	r2, r0
 8006aac:	4218      	tst	r0, r3
 8006aae:	d100      	bne.n	8006ab2 <_vsnprintf+0x8ca>
 8006ab0:	e166      	b.n	8006d80 <_vsnprintf+0xb98>
          flags &= ~FLAGS_ZEROPAD;
 8006ab2:	230d      	movs	r3, #13
 8006ab4:	2020      	movs	r0, #32
 8006ab6:	439a      	bics	r2, r3
 8006ab8:	3303      	adds	r3, #3
 8006aba:	4310      	orrs	r0, r2
 8006abc:	930a      	str	r3, [sp, #40]	@ 0x28
 8006abe:	e69a      	b.n	80067f6 <_vsnprintf+0x60e>
 8006ac0:	2361      	movs	r3, #97	@ 0x61
 8006ac2:	0682      	lsls	r2, r0, #26
 8006ac4:	d500      	bpl.n	8006ac8 <_vsnprintf+0x8e0>
 8006ac6:	2341      	movs	r3, #65	@ 0x41
 8006ac8:	b2db      	uxtb	r3, r3
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8006aca:	3b0a      	subs	r3, #10
 8006acc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ace:	4643      	mov	r3, r8
 8006ad0:	a910      	add	r1, sp, #64	@ 0x40
 8006ad2:	221f      	movs	r2, #31
 8006ad4:	468c      	mov	ip, r1
 8006ad6:	9312      	str	r3, [sp, #72]	@ 0x48
 8006ad8:	4653      	mov	r3, sl
 8006ada:	4462      	add	r2, ip
 8006adc:	46aa      	mov	sl, r5
 8006ade:	9414      	str	r4, [sp, #80]	@ 0x50
 8006ae0:	9715      	str	r7, [sp, #84]	@ 0x54
 8006ae2:	464c      	mov	r4, r9
 8006ae4:	4680      	mov	r8, r0
 8006ae6:	46b1      	mov	r9, r6
 8006ae8:	0017      	movs	r7, r2
 8006aea:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006aec:	9d08      	ldr	r5, [sp, #32]
 8006aee:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006af0:	e008      	b.n	8006b04 <_vsnprintf+0x91c>
 8006af2:	3330      	adds	r3, #48	@ 0x30
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	3401      	adds	r4, #1
 8006af8:	553b      	strb	r3, [r7, r4]
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8006afa:	42b5      	cmp	r5, r6
 8006afc:	d30e      	bcc.n	8006b1c <_vsnprintf+0x934>
 8006afe:	2c20      	cmp	r4, #32
 8006b00:	d00c      	beq.n	8006b1c <_vsnprintf+0x934>
      value /= base;
 8006b02:	0005      	movs	r5, r0
      const char digit = (char)(value % base);
 8006b04:	0031      	movs	r1, r6
 8006b06:	0028      	movs	r0, r5
 8006b08:	f7f9 fba0 	bl	800024c <__aeabi_uidivmod>
 8006b0c:	b2cb      	uxtb	r3, r1
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8006b0e:	2909      	cmp	r1, #9
 8006b10:	d9ef      	bls.n	8006af2 <_vsnprintf+0x90a>
 8006b12:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006b14:	4694      	mov	ip, r2
 8006b16:	4463      	add	r3, ip
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	e7ec      	b.n	8006af6 <_vsnprintf+0x90e>
 8006b1c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006b1e:	4640      	mov	r0, r8
 8006b20:	4698      	mov	r8, r3
 8006b22:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006b24:	464e      	mov	r6, r9
 8006b26:	4655      	mov	r5, sl
 8006b28:	46a1      	mov	r9, r4
 8006b2a:	469a      	mov	sl, r3
 8006b2c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8006b2e:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8006b30:	e684      	b.n	800683c <_vsnprintf+0x654>
 8006b32:	286f      	cmp	r0, #111	@ 0x6f
 8006b34:	d000      	beq.n	8006b38 <_vsnprintf+0x950>
 8006b36:	e137      	b.n	8006da8 <_vsnprintf+0xbc0>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8006b38:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006b3a:	230c      	movs	r3, #12
 8006b3c:	000a      	movs	r2, r1
 8006b3e:	439a      	bics	r2, r3
        if (flags & FLAGS_PRECISION) {
 8006b40:	2380      	movs	r3, #128	@ 0x80
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8006b42:	0010      	movs	r0, r2
        if (flags & FLAGS_PRECISION) {
 8006b44:	000a      	movs	r2, r1
 8006b46:	00db      	lsls	r3, r3, #3
 8006b48:	401a      	ands	r2, r3
 8006b4a:	0011      	movs	r1, r2
 8006b4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006b4e:	421a      	tst	r2, r3
 8006b50:	d000      	beq.n	8006b54 <_vsnprintf+0x96c>
 8006b52:	e121      	b.n	8006d98 <_vsnprintf+0xbb0>
 8006b54:	2308      	movs	r3, #8
 8006b56:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b58:	e64d      	b.n	80067f6 <_vsnprintf+0x60e>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8006b5a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006b5c:	3bfa      	subs	r3, #250	@ 0xfa
 8006b5e:	3bff      	subs	r3, #255	@ 0xff
 8006b60:	3207      	adds	r2, #7
 8006b62:	439a      	bics	r2, r3
 8006b64:	3301      	adds	r3, #1
 8006b66:	469c      	mov	ip, r3
 8006b68:	4494      	add	ip, r2
 8006b6a:	4663      	mov	r3, ip
 8006b6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b6e:	6813      	ldr	r3, [r2, #0]
 8006b70:	6852      	ldr	r2, [r2, #4]
 8006b72:	9308      	str	r3, [sp, #32]
  if (!value) {
 8006b74:	4313      	orrs	r3, r2
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8006b76:	9212      	str	r2, [sp, #72]	@ 0x48
  if (!value) {
 8006b78:	1e1a      	subs	r2, r3, #0
 8006b7a:	d105      	bne.n	8006b88 <_vsnprintf+0x9a0>
  size_t len = 0U;
 8006b7c:	2300      	movs	r3, #0
    flags &= ~FLAGS_HASH;
 8006b7e:	3210      	adds	r2, #16
  size_t len = 0U;
 8006b80:	4699      	mov	r9, r3
    flags &= ~FLAGS_HASH;
 8006b82:	4390      	bics	r0, r2
  if (!(flags & FLAGS_PRECISION) || value) {
 8006b84:	2900      	cmp	r1, #0
 8006b86:	d141      	bne.n	8006c0c <_vsnprintf+0xa24>
 8006b88:	2261      	movs	r2, #97	@ 0x61
 8006b8a:	0681      	lsls	r1, r0, #26
 8006b8c:	d500      	bpl.n	8006b90 <_vsnprintf+0x9a8>
 8006b8e:	2241      	movs	r2, #65	@ 0x41
 8006b90:	b2d2      	uxtb	r2, r2
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8006b92:	3a0a      	subs	r2, #10
 8006b94:	920c      	str	r2, [sp, #48]	@ 0x30
 8006b96:	4642      	mov	r2, r8
 8006b98:	2300      	movs	r3, #0
 8006b9a:	a910      	add	r1, sp, #64	@ 0x40
 8006b9c:	9213      	str	r2, [sp, #76]	@ 0x4c
 8006b9e:	4652      	mov	r2, sl
 8006ba0:	468c      	mov	ip, r1
 8006ba2:	4699      	mov	r9, r3
 8006ba4:	9214      	str	r2, [sp, #80]	@ 0x50
 8006ba6:	331f      	adds	r3, #31
 8006ba8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006baa:	4463      	add	r3, ip
 8006bac:	46aa      	mov	sl, r5
 8006bae:	9415      	str	r4, [sp, #84]	@ 0x54
 8006bb0:	9617      	str	r6, [sp, #92]	@ 0x5c
 8006bb2:	464c      	mov	r4, r9
 8006bb4:	4690      	mov	r8, r2
 8006bb6:	46b9      	mov	r9, r7
 8006bb8:	9e08      	ldr	r6, [sp, #32]
 8006bba:	001f      	movs	r7, r3
 8006bbc:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8006bbe:	9016      	str	r0, [sp, #88]	@ 0x58
 8006bc0:	e00a      	b.n	8006bd8 <_vsnprintf+0x9f0>
 8006bc2:	3230      	adds	r2, #48	@ 0x30
 8006bc4:	b2d2      	uxtb	r2, r2
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8006bc6:	2300      	movs	r3, #0
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8006bc8:	3401      	adds	r4, #1
 8006bca:	553a      	strb	r2, [r7, r4]
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8006bcc:	42ab      	cmp	r3, r5
 8006bce:	d011      	beq.n	8006bf4 <_vsnprintf+0xa0c>
 8006bd0:	2c20      	cmp	r4, #32
 8006bd2:	d011      	beq.n	8006bf8 <_vsnprintf+0xa10>
      value /= base;
 8006bd4:	0006      	movs	r6, r0
 8006bd6:	000d      	movs	r5, r1
      const char digit = (char)(value % base);
 8006bd8:	4642      	mov	r2, r8
 8006bda:	2300      	movs	r3, #0
 8006bdc:	0030      	movs	r0, r6
 8006bde:	0029      	movs	r1, r5
 8006be0:	f7f9 fc80 	bl	80004e4 <__aeabi_uldivmod>
 8006be4:	b2d2      	uxtb	r2, r2
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8006be6:	2a09      	cmp	r2, #9
 8006be8:	d9eb      	bls.n	8006bc2 <_vsnprintf+0x9da>
 8006bea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006bec:	469c      	mov	ip, r3
 8006bee:	4462      	add	r2, ip
 8006bf0:	b2d2      	uxtb	r2, r2
 8006bf2:	e7e8      	b.n	8006bc6 <_vsnprintf+0x9de>
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8006bf4:	45b0      	cmp	r8, r6
 8006bf6:	d9eb      	bls.n	8006bd0 <_vsnprintf+0x9e8>
 8006bf8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006bfa:	4655      	mov	r5, sl
 8006bfc:	4698      	mov	r8, r3
 8006bfe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006c00:	464f      	mov	r7, r9
 8006c02:	469a      	mov	sl, r3
 8006c04:	46a1      	mov	r9, r4
 8006c06:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8006c08:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 8006c0a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8006c0c:	4643      	mov	r3, r8
 8006c0e:	9305      	str	r3, [sp, #20]
 8006c10:	4653      	mov	r3, sl
 8006c12:	9304      	str	r3, [sp, #16]
 8006c14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c16:	9006      	str	r0, [sp, #24]
 8006c18:	9303      	str	r3, [sp, #12]
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	e708      	b.n	8006a30 <_vsnprintf+0x848>
  if (!(flags & FLAGS_PRECISION) || value) {
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	d000      	beq.n	8006c24 <_vsnprintf+0xa3c>
 8006c22:	e5b3      	b.n	800678c <_vsnprintf+0x5a4>
 8006c24:	e587      	b.n	8006736 <_vsnprintf+0x54e>
            const long value = va_arg(va, long);
 8006c26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c28:	681b      	ldr	r3, [r3, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8006c2a:	0fda      	lsrs	r2, r3, #31
 8006c2c:	0011      	movs	r1, r2
  if (!value) {
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d100      	bne.n	8006c34 <_vsnprintf+0xa4c>
 8006c32:	e094      	b.n	8006d5e <_vsnprintf+0xb76>
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8006c34:	17da      	asrs	r2, r3, #31
 8006c36:	1898      	adds	r0, r3, r2
 8006c38:	4050      	eors	r0, r2
 8006c3a:	aa10      	add	r2, sp, #64	@ 0x40
 8006c3c:	4691      	mov	r9, r2
 8006c3e:	4642      	mov	r2, r8
 8006c40:	231f      	movs	r3, #31
 8006c42:	9212      	str	r2, [sp, #72]	@ 0x48
 8006c44:	4652      	mov	r2, sl
 8006c46:	444b      	add	r3, r9
 8006c48:	46a0      	mov	r8, r4
 8006c4a:	46aa      	mov	sl, r5
 8006c4c:	9714      	str	r7, [sp, #80]	@ 0x50
 8006c4e:	0004      	movs	r4, r0
 8006c50:	46b1      	mov	r9, r6
 8006c52:	4665      	mov	r5, ip
 8006c54:	001f      	movs	r7, r3
 8006c56:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006c58:	9213      	str	r2, [sp, #76]	@ 0x4c
 8006c5a:	e001      	b.n	8006c60 <_vsnprintf+0xa78>
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8006c5c:	2d20      	cmp	r5, #32
 8006c5e:	d00f      	beq.n	8006c80 <_vsnprintf+0xa98>
      const char digit = (char)(value % base);
 8006c60:	0020      	movs	r0, r4
 8006c62:	210a      	movs	r1, #10
 8006c64:	f7f9 faf2 	bl	800024c <__aeabi_uidivmod>
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8006c68:	3501      	adds	r5, #1
 8006c6a:	197e      	adds	r6, r7, r5
 8006c6c:	3130      	adds	r1, #48	@ 0x30
 8006c6e:	7031      	strb	r1, [r6, #0]
      value /= base;
 8006c70:	0020      	movs	r0, r4
 8006c72:	210a      	movs	r1, #10
 8006c74:	f7f9 fa64 	bl	8000140 <__udivsi3>
 8006c78:	0026      	movs	r6, r4
 8006c7a:	0004      	movs	r4, r0
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8006c7c:	2e09      	cmp	r6, #9
 8006c7e:	d8ed      	bhi.n	8006c5c <_vsnprintf+0xa74>
 8006c80:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006c82:	4644      	mov	r4, r8
 8006c84:	4698      	mov	r8, r3
 8006c86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c88:	46ac      	mov	ip, r5
 8006c8a:	0019      	movs	r1, r3
 8006c8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006c8e:	4655      	mov	r5, sl
 8006c90:	464e      	mov	r6, r9
 8006c92:	469a      	mov	sl, r3
 8006c94:	9f14      	ldr	r7, [sp, #80]	@ 0x50
  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8006c96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c98:	9102      	str	r1, [sp, #8]
 8006c9a:	9306      	str	r3, [sp, #24]
 8006c9c:	4643      	mov	r3, r8
 8006c9e:	9305      	str	r3, [sp, #20]
 8006ca0:	4653      	mov	r3, sl
 8006ca2:	9304      	str	r3, [sp, #16]
 8006ca4:	230a      	movs	r3, #10
 8006ca6:	9303      	str	r3, [sp, #12]
 8006ca8:	4663      	mov	r3, ip
 8006caa:	e57a      	b.n	80067a2 <_vsnprintf+0x5ba>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8006cac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	9308      	str	r3, [sp, #32]
  if (!value) {
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d103      	bne.n	8006cbe <_vsnprintf+0xad6>
    flags &= ~FLAGS_HASH;
 8006cb6:	3310      	adds	r3, #16
 8006cb8:	4398      	bics	r0, r3
  if (!(flags & FLAGS_PRECISION) || value) {
 8006cba:	2900      	cmp	r1, #0
 8006cbc:	d137      	bne.n	8006d2e <_vsnprintf+0xb46>
 8006cbe:	2361      	movs	r3, #97	@ 0x61
 8006cc0:	0682      	lsls	r2, r0, #26
 8006cc2:	d500      	bpl.n	8006cc6 <_vsnprintf+0xade>
 8006cc4:	2341      	movs	r3, #65	@ 0x41
 8006cc6:	b2db      	uxtb	r3, r3
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8006cc8:	3b0a      	subs	r3, #10
 8006cca:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ccc:	4643      	mov	r3, r8
 8006cce:	a910      	add	r1, sp, #64	@ 0x40
 8006cd0:	4689      	mov	r9, r1
 8006cd2:	221f      	movs	r2, #31
 8006cd4:	9312      	str	r3, [sp, #72]	@ 0x48
 8006cd6:	4653      	mov	r3, sl
 8006cd8:	444a      	add	r2, r9
 8006cda:	46aa      	mov	sl, r5
 8006cdc:	46b1      	mov	r9, r6
 8006cde:	9414      	str	r4, [sp, #80]	@ 0x50
 8006ce0:	9715      	str	r7, [sp, #84]	@ 0x54
 8006ce2:	4664      	mov	r4, ip
 8006ce4:	4680      	mov	r8, r0
 8006ce6:	0017      	movs	r7, r2
 8006ce8:	9d08      	ldr	r5, [sp, #32]
 8006cea:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006cec:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006cee:	e008      	b.n	8006d02 <_vsnprintf+0xb1a>
 8006cf0:	3330      	adds	r3, #48	@ 0x30
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	3401      	adds	r4, #1
 8006cf6:	553b      	strb	r3, [r7, r4]
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8006cf8:	42b5      	cmp	r5, r6
 8006cfa:	d30e      	bcc.n	8006d1a <_vsnprintf+0xb32>
 8006cfc:	2c20      	cmp	r4, #32
 8006cfe:	d00c      	beq.n	8006d1a <_vsnprintf+0xb32>
      value /= base;
 8006d00:	0005      	movs	r5, r0
      const char digit = (char)(value % base);
 8006d02:	0031      	movs	r1, r6
 8006d04:	0028      	movs	r0, r5
 8006d06:	f7f9 faa1 	bl	800024c <__aeabi_uidivmod>
 8006d0a:	b2cb      	uxtb	r3, r1
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8006d0c:	2909      	cmp	r1, #9
 8006d0e:	d9ef      	bls.n	8006cf0 <_vsnprintf+0xb08>
 8006d10:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006d12:	4694      	mov	ip, r2
 8006d14:	4463      	add	r3, ip
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	e7ec      	b.n	8006cf4 <_vsnprintf+0xb0c>
 8006d1a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006d1c:	4640      	mov	r0, r8
 8006d1e:	4698      	mov	r8, r3
 8006d20:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006d22:	4655      	mov	r5, sl
 8006d24:	464e      	mov	r6, r9
 8006d26:	469a      	mov	sl, r3
 8006d28:	46a4      	mov	ip, r4
 8006d2a:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8006d2c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8006d2e:	4643      	mov	r3, r8
 8006d30:	9305      	str	r3, [sp, #20]
 8006d32:	4653      	mov	r3, sl
 8006d34:	9304      	str	r3, [sp, #16]
 8006d36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d38:	9006      	str	r0, [sp, #24]
 8006d3a:	9303      	str	r3, [sp, #12]
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	9302      	str	r3, [sp, #8]
 8006d40:	4663      	mov	r3, ip
 8006d42:	e585      	b.n	8006850 <_vsnprintf+0x668>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8006d44:	0603      	lsls	r3, r0, #24
 8006d46:	d513      	bpl.n	8006d70 <_vsnprintf+0xb88>
 8006d48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d4a:	881b      	ldrh	r3, [r3, #0]
 8006d4c:	9308      	str	r3, [sp, #32]
 8006d4e:	e56b      	b.n	8006828 <_vsnprintf+0x640>
 8006d50:	0002      	movs	r2, r0
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8006d52:	230c      	movs	r3, #12
 8006d54:	439a      	bics	r2, r3
 8006d56:	3b0a      	subs	r3, #10
 8006d58:	0010      	movs	r0, r2
 8006d5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d5c:	e54b      	b.n	80067f6 <_vsnprintf+0x60e>
  if (!(flags & FLAGS_PRECISION) || value) {
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	d199      	bne.n	8006c96 <_vsnprintf+0xaae>
 8006d62:	e76a      	b.n	8006c3a <_vsnprintf+0xa52>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8006d64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d66:	681b      	ldr	r3, [r3, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8006d68:	17d9      	asrs	r1, r3, #31
 8006d6a:	185a      	adds	r2, r3, r1
 8006d6c:	404a      	eors	r2, r1
 8006d6e:	e4dc      	b.n	800672a <_vsnprintf+0x542>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8006d70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	9308      	str	r3, [sp, #32]
 8006d76:	e557      	b.n	8006828 <_vsnprintf+0x640>
 8006d78:	0003      	movs	r3, r0
          while (l++ < width) {
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	930c      	str	r3, [sp, #48]	@ 0x30
 8006d7e:	e5f9      	b.n	8006974 <_vsnprintf+0x78c>
          flags |= FLAGS_UPPERCASE;
 8006d80:	2320      	movs	r3, #32
 8006d82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d84:	431a      	orrs	r2, r3
 8006d86:	920a      	str	r2, [sp, #40]	@ 0x28
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8006d88:	230c      	movs	r3, #12
 8006d8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	439a      	bics	r2, r3
 8006d90:	3304      	adds	r3, #4
 8006d92:	0010      	movs	r0, r2
 8006d94:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d96:	e52e      	b.n	80067f6 <_vsnprintf+0x60e>
        if (flags & FLAGS_PRECISION) {
 8006d98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d9a:	930c      	str	r3, [sp, #48]	@ 0x30
 8006d9c:	2308      	movs	r3, #8
 8006d9e:	930a      	str	r3, [sp, #40]	@ 0x28
          flags &= ~FLAGS_ZEROPAD;
 8006da0:	230d      	movs	r3, #13
 8006da2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8006da4:	4398      	bics	r0, r3
        if ((*format == 'i') || (*format == 'd')) {
 8006da6:	e526      	b.n	80067f6 <_vsnprintf+0x60e>
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8006da8:	2310      	movs	r3, #16
 8006daa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006dac:	439a      	bics	r2, r3
 8006dae:	920c      	str	r2, [sp, #48]	@ 0x30
        if ((*format != 'i') && (*format != 'd')) {
 8006db0:	2869      	cmp	r0, #105	@ 0x69
 8006db2:	d10a      	bne.n	8006dca <_vsnprintf+0xbe2>
        if (flags & FLAGS_PRECISION) {
 8006db4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006db6:	2380      	movs	r3, #128	@ 0x80
 8006db8:	000a      	movs	r2, r1
 8006dba:	00db      	lsls	r3, r3, #3
 8006dbc:	401a      	ands	r2, r3
 8006dbe:	0010      	movs	r0, r2
 8006dc0:	000a      	movs	r2, r1
 8006dc2:	4219      	tst	r1, r3
 8006dc4:	d100      	bne.n	8006dc8 <_vsnprintf+0xbe0>
 8006dc6:	e48d      	b.n	80066e4 <_vsnprintf+0x4fc>
 8006dc8:	e489      	b.n	80066de <_vsnprintf+0x4f6>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8006dca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006dcc:	231c      	movs	r3, #28
 8006dce:	000a      	movs	r2, r1
 8006dd0:	439a      	bics	r2, r3
        if (flags & FLAGS_PRECISION) {
 8006dd2:	2380      	movs	r3, #128	@ 0x80
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8006dd4:	0010      	movs	r0, r2
        if (flags & FLAGS_PRECISION) {
 8006dd6:	000a      	movs	r2, r1
 8006dd8:	00db      	lsls	r3, r3, #3
 8006dda:	401a      	ands	r2, r3
 8006ddc:	0011      	movs	r1, r2
 8006dde:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006de0:	421a      	tst	r2, r3
 8006de2:	d102      	bne.n	8006dea <_vsnprintf+0xc02>
          base = 10U;
 8006de4:	230a      	movs	r3, #10
 8006de6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006de8:	e505      	b.n	80067f6 <_vsnprintf+0x60e>
 8006dea:	230a      	movs	r3, #10
 8006dec:	930a      	str	r3, [sp, #40]	@ 0x28
 8006dee:	e7d7      	b.n	8006da0 <_vsnprintf+0xbb8>

08006df0 <printf_>:
{
 8006df0:	b40f      	push	{r0, r1, r2, r3}
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8006df2:	2201      	movs	r2, #1
{
 8006df4:	b500      	push	{lr}
 8006df6:	b085      	sub	sp, #20
 8006df8:	a906      	add	r1, sp, #24
 8006dfa:	c908      	ldmia	r1!, {r3}
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8006dfc:	4252      	negs	r2, r2
  va_start(va, format);
 8006dfe:	9103      	str	r1, [sp, #12]
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8006e00:	9100      	str	r1, [sp, #0]
 8006e02:	4804      	ldr	r0, [pc, #16]	@ (8006e14 <printf_+0x24>)
 8006e04:	a902      	add	r1, sp, #8
 8006e06:	f7ff f9ef 	bl	80061e8 <_vsnprintf>
}
 8006e0a:	b005      	add	sp, #20
 8006e0c:	bc08      	pop	{r3}
 8006e0e:	b004      	add	sp, #16
 8006e10:	4718      	bx	r3
 8006e12:	46c0      	nop			@ (mov r8, r8)
 8006e14:	080059ed 	.word	0x080059ed

08006e18 <sprintf_>:
{
 8006e18:	b40e      	push	{r1, r2, r3}
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8006e1a:	2201      	movs	r2, #1
{
 8006e1c:	b530      	push	{r4, r5, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	ac07      	add	r4, sp, #28
 8006e22:	cc08      	ldmia	r4!, {r3}
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8006e24:	4d06      	ldr	r5, [pc, #24]	@ (8006e40 <sprintf_+0x28>)
{
 8006e26:	0001      	movs	r1, r0
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8006e28:	9400      	str	r4, [sp, #0]
 8006e2a:	0028      	movs	r0, r5
 8006e2c:	4252      	negs	r2, r2
  va_start(va, format);
 8006e2e:	9403      	str	r4, [sp, #12]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8006e30:	f7ff f9da 	bl	80061e8 <_vsnprintf>
}
 8006e34:	b004      	add	sp, #16
 8006e36:	bc30      	pop	{r4, r5}
 8006e38:	bc08      	pop	{r3}
 8006e3a:	b003      	add	sp, #12
 8006e3c:	4718      	bx	r3
 8006e3e:	46c0      	nop			@ (mov r8, r8)
 8006e40:	08005749 	.word	0x08005749

08006e44 <MX_RTC_Init>:

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
 8006e44:	227f      	movs	r2, #127	@ 0x7f
{
 8006e46:	b510      	push	{r4, lr}
  hrtc.Instance = RTC;
 8006e48:	4c1e      	ldr	r4, [pc, #120]	@ (8006ec4 <MX_RTC_Init+0x80>)
 8006e4a:	4b1f      	ldr	r3, [pc, #124]	@ (8006ec8 <MX_RTC_Init+0x84>)
  hrtc.Init.AsynchPrediv = 127;
 8006e4c:	60a2      	str	r2, [r4, #8]
  hrtc.Init.SynchPrediv = 255;
 8006e4e:	3280      	adds	r2, #128	@ 0x80
 8006e50:	60e2      	str	r2, [r4, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006e52:	2280      	movs	r2, #128	@ 0x80
  hrtc.Instance = RTC;
 8006e54:	6023      	str	r3, [r4, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006e56:	2300      	movs	r3, #0
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006e58:	05d2      	lsls	r2, r2, #23
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
  hrtc.Init.BinMode = RTC_BINARY_NONE;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006e5a:	0020      	movs	r0, r4
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006e5c:	6063      	str	r3, [r4, #4]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006e5e:	6123      	str	r3, [r4, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8006e60:	6163      	str	r3, [r4, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006e62:	61a3      	str	r3, [r4, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006e64:	61e2      	str	r2, [r4, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8006e66:	6223      	str	r3, [r4, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8006e68:	6263      	str	r3, [r4, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006e6a:	f001 fe8f 	bl	8008b8c <HAL_RTC_Init>
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	d11b      	bne.n	8006eaa <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 60, RTC_WAKEUPCLOCK_CK_SPRE_16BITS, 0) != HAL_OK)
 8006e72:	2300      	movs	r3, #0
 8006e74:	2204      	movs	r2, #4
 8006e76:	213c      	movs	r1, #60	@ 0x3c
 8006e78:	0020      	movs	r0, r4
 8006e7a:	f001 ff0f 	bl	8008c9c <HAL_RTCEx_SetWakeUpTimer_IT>
 8006e7e:	2800      	cmp	r0, #0
 8006e80:	d11d      	bne.n	8006ebe <MX_RTC_Init+0x7a>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006e82:	2080      	movs	r0, #128	@ 0x80
 8006e84:	2280      	movs	r2, #128	@ 0x80
 8006e86:	4b11      	ldr	r3, [pc, #68]	@ (8006ecc <MX_RTC_Init+0x88>)
 8006e88:	0352      	lsls	r2, r2, #13
 8006e8a:	5819      	ldr	r1, [r3, r0]
 8006e8c:	4311      	orrs	r1, r2
 8006e8e:	5019      	str	r1, [r3, r0]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8006e90:	6819      	ldr	r1, [r3, #0]
 8006e92:	430a      	orrs	r2, r1
 8006e94:	601a      	str	r2, [r3, #0]
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e96:	2204      	movs	r2, #4
 8006e98:	4b0d      	ldr	r3, [pc, #52]	@ (8006ed0 <MX_RTC_Init+0x8c>)
 8006e9a:	601a      	str	r2, [r3, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006e9c:	21c0      	movs	r1, #192	@ 0xc0
 8006e9e:	0089      	lsls	r1, r1, #2
 8006ea0:	585a      	ldr	r2, [r3, r1]
 8006ea2:	480c      	ldr	r0, [pc, #48]	@ (8006ed4 <MX_RTC_Init+0x90>)
 8006ea4:	4002      	ands	r2, r0
 8006ea6:	505a      	str	r2, [r3, r1]
      NVIC_EnableIRQ(RTC_TAMP_IRQn);
      NVIC_SetPriority(RTC_TAMP_IRQn, 0);

  /* USER CODE END RTC_Init 2 */

}
 8006ea8:	bd10      	pop	{r4, pc}
    Error_Handler();
 8006eaa:	f7fe fc4b 	bl	8005744 <Error_Handler>
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 60, RTC_WAKEUPCLOCK_CK_SPRE_16BITS, 0) != HAL_OK)
 8006eae:	2300      	movs	r3, #0
 8006eb0:	2204      	movs	r2, #4
 8006eb2:	213c      	movs	r1, #60	@ 0x3c
 8006eb4:	0020      	movs	r0, r4
 8006eb6:	f001 fef1 	bl	8008c9c <HAL_RTCEx_SetWakeUpTimer_IT>
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	d0e1      	beq.n	8006e82 <MX_RTC_Init+0x3e>
    Error_Handler();
 8006ebe:	f7fe fc41 	bl	8005744 <Error_Handler>
 8006ec2:	e7de      	b.n	8006e82 <MX_RTC_Init+0x3e>
 8006ec4:	20000420 	.word	0x20000420
 8006ec8:	40002800 	.word	0x40002800
 8006ecc:	40021800 	.word	0x40021800
 8006ed0:	e000e100 	.word	0xe000e100
 8006ed4:	ff00ffff 	.word	0xff00ffff

08006ed8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8006ed8:	b510      	push	{r4, lr}
 8006eda:	0004      	movs	r4, r0
 8006edc:	b092      	sub	sp, #72	@ 0x48

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006ede:	2244      	movs	r2, #68	@ 0x44
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	a801      	add	r0, sp, #4
 8006ee4:	f005 fe36 	bl	800cb54 <memset>
  if(rtcHandle->Instance==RTC)
 8006ee8:	4b16      	ldr	r3, [pc, #88]	@ (8006f44 <HAL_RTC_MspInit+0x6c>)
 8006eea:	6822      	ldr	r2, [r4, #0]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d001      	beq.n	8006ef4 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8006ef0:	b012      	add	sp, #72	@ 0x48
 8006ef2:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006ef4:	2380      	movs	r3, #128	@ 0x80
 8006ef6:	021b      	lsls	r3, r3, #8
 8006ef8:	9301      	str	r3, [sp, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8006efa:	2380      	movs	r3, #128	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006efc:	a801      	add	r0, sp, #4
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	9311      	str	r3, [sp, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006f02:	f001 fa85 	bl	8008410 <HAL_RCCEx_PeriphCLKConfig>
 8006f06:	2800      	cmp	r0, #0
 8006f08:	d118      	bne.n	8006f3c <HAL_RTC_MspInit+0x64>
    __HAL_RCC_RTC_ENABLE();
 8006f0a:	2190      	movs	r1, #144	@ 0x90
 8006f0c:	2280      	movs	r2, #128	@ 0x80
 8006f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8006f48 <HAL_RTC_MspInit+0x70>)
 8006f10:	0212      	lsls	r2, r2, #8
 8006f12:	5858      	ldr	r0, [r3, r1]
 8006f14:	4302      	orrs	r2, r0
 8006f16:	505a      	str	r2, [r3, r1]
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8006f18:	2180      	movs	r1, #128	@ 0x80
 8006f1a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006f1c:	00c9      	lsls	r1, r1, #3
 8006f1e:	430a      	orrs	r2, r1
 8006f20:	659a      	str	r2, [r3, #88]	@ 0x58
 8006f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8006f24:	2200      	movs	r2, #0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8006f26:	400b      	ands	r3, r1
 8006f28:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8006f2a:	2100      	movs	r1, #0
 8006f2c:	2002      	movs	r0, #2
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8006f2e:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8006f30:	f000 fc3c 	bl	80077ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8006f34:	2002      	movs	r0, #2
 8006f36:	f000 fc63 	bl	8007800 <HAL_NVIC_EnableIRQ>
}
 8006f3a:	e7d9      	b.n	8006ef0 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8006f3c:	f7fe fc02 	bl	8005744 <Error_Handler>
 8006f40:	e7e3      	b.n	8006f0a <HAL_RTC_MspInit+0x32>
 8006f42:	46c0      	nop			@ (mov r8, r8)
 8006f44:	40002800 	.word	0x40002800
 8006f48:	40021000 	.word	0x40021000

08006f4c <MX_SPI1_Init>:

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006f4c:	22e0      	movs	r2, #224	@ 0xe0
  hspi1.Instance = SPI1;
 8006f4e:	4811      	ldr	r0, [pc, #68]	@ (8006f94 <MX_SPI1_Init+0x48>)
 8006f50:	4b11      	ldr	r3, [pc, #68]	@ (8006f98 <MX_SPI1_Init+0x4c>)
{
 8006f52:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 8006f54:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006f56:	2382      	movs	r3, #130	@ 0x82
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006f58:	00d2      	lsls	r2, r2, #3
 8006f5a:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006f5c:	2280      	movs	r2, #128	@ 0x80
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006f5e:	005b      	lsls	r3, r3, #1
 8006f60:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006f62:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006f64:	0092      	lsls	r2, r2, #2
 8006f66:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8006f68:	3af1      	subs	r2, #241	@ 0xf1
 8006f6a:	3aff      	subs	r2, #255	@ 0xff
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006f6c:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f6e:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006f70:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8006f72:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006f74:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006f76:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f78:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8006f7a:	3a09      	subs	r2, #9
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006f7c:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006f7e:	3308      	adds	r3, #8
  hspi1.Init.CRCPolynomial = 7;
 8006f80:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006f82:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006f84:	f001 ff1c 	bl	8008dc0 <HAL_SPI_Init>
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	d100      	bne.n	8006f8e <MX_SPI1_Init+0x42>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006f8c:	bd10      	pop	{r4, pc}
    Error_Handler();
 8006f8e:	f7fe fbd9 	bl	8005744 <Error_Handler>
}
 8006f92:	e7fb      	b.n	8006f8c <MX_SPI1_Init+0x40>
 8006f94:	20000450 	.word	0x20000450
 8006f98:	40013000 	.word	0x40013000

08006f9c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006f9c:	b510      	push	{r4, lr}
 8006f9e:	0004      	movs	r4, r0
 8006fa0:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fa2:	2214      	movs	r2, #20
 8006fa4:	2100      	movs	r1, #0
 8006fa6:	a802      	add	r0, sp, #8
 8006fa8:	f005 fdd4 	bl	800cb54 <memset>
  if(spiHandle->Instance==SPI1)
 8006fac:	4b11      	ldr	r3, [pc, #68]	@ (8006ff4 <HAL_SPI_MspInit+0x58>)
 8006fae:	6822      	ldr	r2, [r4, #0]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d001      	beq.n	8006fb8 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8006fb4:	b008      	add	sp, #32
 8006fb6:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006fb8:	2180      	movs	r1, #128	@ 0x80
 8006fba:	4b0f      	ldr	r3, [pc, #60]	@ (8006ff8 <HAL_SPI_MspInit+0x5c>)
 8006fbc:	0149      	lsls	r1, r1, #5
 8006fbe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fc0:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	661a      	str	r2, [r3, #96]	@ 0x60
 8006fc6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fc8:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006fca:	400a      	ands	r2, r1
 8006fcc:	9200      	str	r2, [sp, #0]
 8006fce:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8006fd4:	4311      	orrs	r1, r2
 8006fd6:	64d9      	str	r1, [r3, #76]	@ 0x4c
 8006fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fda:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fdc:	401a      	ands	r2, r3
 8006fde:	9201      	str	r2, [sp, #4]
 8006fe0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006fe2:	22e0      	movs	r2, #224	@ 0xe0
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	9202      	str	r2, [sp, #8]
 8006fe8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006fea:	2305      	movs	r3, #5
 8006fec:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fee:	f000 fc2d 	bl	800784c <HAL_GPIO_Init>
}
 8006ff2:	e7df      	b.n	8006fb4 <HAL_SPI_MspInit+0x18>
 8006ff4:	40013000 	.word	0x40013000
 8006ff8:	40021000 	.word	0x40021000

08006ffc <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8006ffc:	2180      	movs	r1, #128	@ 0x80
 8006ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8007028 <HAL_MspInit+0x2c>)
 8007000:	0549      	lsls	r1, r1, #21
 8007002:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
{
 8007004:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8007006:	430a      	orrs	r2, r1
 8007008:	659a      	str	r2, [r3, #88]	@ 0x58
 800700a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800700c:	400a      	ands	r2, r1
 800700e:	9200      	str	r2, [sp, #0]
 8007010:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007012:	2201      	movs	r2, #1
 8007014:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 8007016:	4311      	orrs	r1, r2
 8007018:	6619      	str	r1, [r3, #96]	@ 0x60
 800701a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800701c:	401a      	ands	r2, r3
 800701e:	9201      	str	r2, [sp, #4]
 8007020:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007022:	b002      	add	sp, #8
 8007024:	4770      	bx	lr
 8007026:	46c0      	nop			@ (mov r8, r8)
 8007028:	40021000 	.word	0x40021000

0800702c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800702c:	e7fe      	b.n	800702c <NMI_Handler>
 800702e:	46c0      	nop			@ (mov r8, r8)

08007030 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007030:	e7fe      	b.n	8007030 <HardFault_Handler>
 8007032:	46c0      	nop			@ (mov r8, r8)

08007034 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007034:	4770      	bx	lr
 8007036:	46c0      	nop			@ (mov r8, r8)

08007038 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8007038:	4770      	bx	lr
 800703a:	46c0      	nop			@ (mov r8, r8)

0800703c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800703c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800703e:	f000 f969 	bl	8007314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007042:	bd10      	pop	{r4, pc}

08007044 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts (combined EXTI lines 20 & 21).
  */
void RTC_TAMP_IRQHandler(void)
{
 8007044:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8007046:	4802      	ldr	r0, [pc, #8]	@ (8007050 <RTC_TAMP_IRQHandler+0xc>)
 8007048:	f001 fea8 	bl	8008d9c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 800704c:	bd10      	pop	{r4, pc}
 800704e:	46c0      	nop			@ (mov r8, r8)
 8007050:	20000420 	.word	0x20000420

08007054 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8007054:	2001      	movs	r0, #1
 8007056:	4770      	bx	lr

08007058 <_kill>:

int _kill(int pid, int sig)
{
 8007058:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800705a:	f005 fdfd 	bl	800cc58 <__errno>
 800705e:	2316      	movs	r3, #22
 8007060:	6003      	str	r3, [r0, #0]
  return -1;
 8007062:	2001      	movs	r0, #1
}
 8007064:	4240      	negs	r0, r0
 8007066:	bd10      	pop	{r4, pc}

08007068 <_exit>:

void _exit (int status)
{
 8007068:	b510      	push	{r4, lr}
  errno = EINVAL;
 800706a:	f005 fdf5 	bl	800cc58 <__errno>
 800706e:	2316      	movs	r3, #22
 8007070:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8007072:	e7fe      	b.n	8007072 <_exit+0xa>

08007074 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007074:	b570      	push	{r4, r5, r6, lr}
 8007076:	1e16      	subs	r6, r2, #0
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007078:	dd07      	ble.n	800708a <_read+0x16>
 800707a:	000c      	movs	r4, r1
 800707c:	188d      	adds	r5, r1, r2
  {
    *ptr++ = __io_getchar();
 800707e:	e000      	b.n	8007082 <_read+0xe>
 8007080:	bf00      	nop
 8007082:	7020      	strb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007084:	3401      	adds	r4, #1
 8007086:	42ac      	cmp	r4, r5
 8007088:	d1f9      	bne.n	800707e <_read+0xa>
  }

  return len;
}
 800708a:	0030      	movs	r0, r6
 800708c:	bd70      	pop	{r4, r5, r6, pc}
 800708e:	46c0      	nop			@ (mov r8, r8)

08007090 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007090:	b570      	push	{r4, r5, r6, lr}
 8007092:	1e16      	subs	r6, r2, #0
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007094:	dd07      	ble.n	80070a6 <_write+0x16>
 8007096:	000c      	movs	r4, r1
 8007098:	188d      	adds	r5, r1, r2
  {
    __io_putchar(*ptr++);
 800709a:	7820      	ldrb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800709c:	3401      	adds	r4, #1
    __io_putchar(*ptr++);
 800709e:	e000      	b.n	80070a2 <_write+0x12>
 80070a0:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80070a2:	42ac      	cmp	r4, r5
 80070a4:	d1f9      	bne.n	800709a <_write+0xa>
  }
  return len;
}
 80070a6:	0030      	movs	r0, r6
 80070a8:	bd70      	pop	{r4, r5, r6, pc}
 80070aa:	46c0      	nop			@ (mov r8, r8)

080070ac <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 80070ac:	2001      	movs	r0, #1
}
 80070ae:	4240      	negs	r0, r0
 80070b0:	4770      	bx	lr
 80070b2:	46c0      	nop			@ (mov r8, r8)

080070b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80070b4:	2380      	movs	r3, #128	@ 0x80
 80070b6:	019b      	lsls	r3, r3, #6
  return 0;
}
 80070b8:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 80070ba:	604b      	str	r3, [r1, #4]
}
 80070bc:	4770      	bx	lr
 80070be:	46c0      	nop			@ (mov r8, r8)

080070c0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80070c0:	2001      	movs	r0, #1
 80070c2:	4770      	bx	lr

080070c4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80070c4:	2000      	movs	r0, #0
 80070c6:	4770      	bx	lr

080070c8 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80070c8:	490c      	ldr	r1, [pc, #48]	@ (80070fc <_sbrk+0x34>)
 80070ca:	4a0d      	ldr	r2, [pc, #52]	@ (8007100 <_sbrk+0x38>)
{
 80070cc:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80070ce:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80070d0:	490c      	ldr	r1, [pc, #48]	@ (8007104 <_sbrk+0x3c>)
{
 80070d2:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80070d4:	6808      	ldr	r0, [r1, #0]
 80070d6:	2800      	cmp	r0, #0
 80070d8:	d004      	beq.n	80070e4 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80070da:	18c3      	adds	r3, r0, r3
 80070dc:	4293      	cmp	r3, r2
 80070de:	d806      	bhi.n	80070ee <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80070e0:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 80070e2:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80070e4:	4808      	ldr	r0, [pc, #32]	@ (8007108 <_sbrk+0x40>)
  if (__sbrk_heap_end + incr > max_heap)
 80070e6:	18c3      	adds	r3, r0, r3
    __sbrk_heap_end = &_end;
 80070e8:	6008      	str	r0, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d9f8      	bls.n	80070e0 <_sbrk+0x18>
    errno = ENOMEM;
 80070ee:	f005 fdb3 	bl	800cc58 <__errno>
 80070f2:	230c      	movs	r3, #12
 80070f4:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80070f6:	2001      	movs	r0, #1
 80070f8:	4240      	negs	r0, r0
 80070fa:	e7f2      	b.n	80070e2 <_sbrk+0x1a>
 80070fc:	00000400 	.word	0x00000400
 8007100:	20008000 	.word	0x20008000
 8007104:	200004b4 	.word	0x200004b4
 8007108:	200006f8 	.word	0x200006f8

0800710c <SystemInit>:

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800710c:	2280      	movs	r2, #128	@ 0x80
 800710e:	4b0b      	ldr	r3, [pc, #44]	@ (800713c <SystemInit+0x30>)
 8007110:	0512      	lsls	r2, r2, #20
 8007112:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  if (((FLASH->SECR & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)           \
 8007114:	2280      	movs	r2, #128	@ 0x80
 8007116:	4b0a      	ldr	r3, [pc, #40]	@ (8007140 <SystemInit+0x34>)
 8007118:	589a      	ldr	r2, [r3, r2]
 800711a:	03d2      	lsls	r2, r2, #15
 800711c:	d50d      	bpl.n	800713a <SystemInit+0x2e>
      && (((FLASH->OPTR & FLASH_OPTR_RDP) != 0xCCU)                            \
 800711e:	21ff      	movs	r1, #255	@ 0xff
 8007120:	6a1a      	ldr	r2, [r3, #32]
 8007122:	400a      	ands	r2, r1
 8007124:	2acc      	cmp	r2, #204	@ 0xcc
 8007126:	d008      	beq.n	800713a <SystemInit+0x2e>
          && ((FLASH->OPTR & FLASH_OPTR_RDP) != 0xAAU)))
 8007128:	6a1a      	ldr	r2, [r3, #32]
 800712a:	4011      	ands	r1, r2
 800712c:	29aa      	cmp	r1, #170	@ 0xaa
 800712e:	d004      	beq.n	800713a <SystemInit+0x2e>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 8007130:	2280      	movs	r2, #128	@ 0x80
 8007132:	6819      	ldr	r1, [r3, #0]
 8007134:	02d2      	lsls	r2, r2, #11
 8007136:	430a      	orrs	r2, r1
 8007138:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 800713a:	4770      	bx	lr
 800713c:	e000ed00 	.word	0xe000ed00
 8007140:	40022000 	.word	0x40022000

08007144 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8007144:	b510      	push	{r4, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007146:	4b20      	ldr	r3, [pc, #128]	@ (80071c8 <MX_USART2_UART_Init+0x84>)
 8007148:	4c20      	ldr	r4, [pc, #128]	@ (80071cc <MX_USART2_UART_Init+0x88>)
  huart2.Init.BaudRate = 1000000;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800714a:	220c      	movs	r2, #12
  huart2.Instance = USART2;
 800714c:	6023      	str	r3, [r4, #0]
  huart2.Init.BaudRate = 1000000;
 800714e:	4b20      	ldr	r3, [pc, #128]	@ (80071d0 <MX_USART2_UART_Init+0x8c>)
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007150:	0020      	movs	r0, r4
  huart2.Init.BaudRate = 1000000;
 8007152:	6063      	str	r3, [r4, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007154:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007156:	6162      	str	r2, [r4, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007158:	60a3      	str	r3, [r4, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800715a:	60e3      	str	r3, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800715c:	6123      	str	r3, [r4, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800715e:	61a3      	str	r3, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007160:	61e3      	str	r3, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007162:	6223      	str	r3, [r4, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007164:	6263      	str	r3, [r4, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007166:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007168:	f002 f886 	bl	8009278 <HAL_UART_Init>
 800716c:	2800      	cmp	r0, #0
 800716e:	d111      	bne.n	8007194 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007170:	2100      	movs	r1, #0
 8007172:	0020      	movs	r0, r4
 8007174:	f002 f9dc 	bl	8009530 <HAL_UARTEx_SetTxFifoThreshold>
 8007178:	2800      	cmp	r0, #0
 800717a:	d113      	bne.n	80071a4 <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800717c:	2100      	movs	r1, #0
 800717e:	0020      	movs	r0, r4
 8007180:	f002 fa26 	bl	80095d0 <HAL_UARTEx_SetRxFifoThreshold>
 8007184:	2800      	cmp	r0, #0
 8007186:	d115      	bne.n	80071b4 <MX_USART2_UART_Init+0x70>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8007188:	0020      	movs	r0, r4
 800718a:	f002 f9b5 	bl	80094f8 <HAL_UARTEx_DisableFifoMode>
 800718e:	2800      	cmp	r0, #0
 8007190:	d117      	bne.n	80071c2 <MX_USART2_UART_Init+0x7e>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007192:	bd10      	pop	{r4, pc}
    Error_Handler();
 8007194:	f7fe fad6 	bl	8005744 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007198:	2100      	movs	r1, #0
 800719a:	0020      	movs	r0, r4
 800719c:	f002 f9c8 	bl	8009530 <HAL_UARTEx_SetTxFifoThreshold>
 80071a0:	2800      	cmp	r0, #0
 80071a2:	d0eb      	beq.n	800717c <MX_USART2_UART_Init+0x38>
    Error_Handler();
 80071a4:	f7fe face 	bl	8005744 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80071a8:	2100      	movs	r1, #0
 80071aa:	0020      	movs	r0, r4
 80071ac:	f002 fa10 	bl	80095d0 <HAL_UARTEx_SetRxFifoThreshold>
 80071b0:	2800      	cmp	r0, #0
 80071b2:	d0e9      	beq.n	8007188 <MX_USART2_UART_Init+0x44>
    Error_Handler();
 80071b4:	f7fe fac6 	bl	8005744 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80071b8:	0020      	movs	r0, r4
 80071ba:	f002 f99d 	bl	80094f8 <HAL_UARTEx_DisableFifoMode>
 80071be:	2800      	cmp	r0, #0
 80071c0:	d0e7      	beq.n	8007192 <MX_USART2_UART_Init+0x4e>
    Error_Handler();
 80071c2:	f7fe fabf 	bl	8005744 <Error_Handler>
}
 80071c6:	e7e4      	b.n	8007192 <MX_USART2_UART_Init+0x4e>
 80071c8:	40004400 	.word	0x40004400
 80071cc:	200004b8 	.word	0x200004b8
 80071d0:	000f4240 	.word	0x000f4240

080071d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80071d4:	b510      	push	{r4, lr}
 80071d6:	0004      	movs	r4, r0
 80071d8:	b098      	sub	sp, #96	@ 0x60

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071da:	2214      	movs	r2, #20
 80071dc:	2100      	movs	r1, #0
 80071de:	a802      	add	r0, sp, #8
 80071e0:	f005 fcb8 	bl	800cb54 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80071e4:	2244      	movs	r2, #68	@ 0x44
 80071e6:	2100      	movs	r1, #0
 80071e8:	a807      	add	r0, sp, #28
 80071ea:	f005 fcb3 	bl	800cb54 <memset>
  if(uartHandle->Instance==USART2)
 80071ee:	4b19      	ldr	r3, [pc, #100]	@ (8007254 <HAL_UART_MspInit+0x80>)
 80071f0:	6822      	ldr	r2, [r4, #0]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d001      	beq.n	80071fa <HAL_UART_MspInit+0x26>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80071f6:	b018      	add	sp, #96	@ 0x60
 80071f8:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80071fa:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80071fc:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80071fe:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007200:	f001 f906 	bl	8008410 <HAL_RCCEx_PeriphCLKConfig>
 8007204:	2800      	cmp	r0, #0
 8007206:	d121      	bne.n	800724c <HAL_UART_MspInit+0x78>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007208:	2180      	movs	r1, #128	@ 0x80
 800720a:	4b13      	ldr	r3, [pc, #76]	@ (8007258 <HAL_UART_MspInit+0x84>)
 800720c:	0289      	lsls	r1, r1, #10
 800720e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007210:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 8007212:	430a      	orrs	r2, r1
 8007214:	659a      	str	r2, [r3, #88]	@ 0x58
 8007216:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007218:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 800721a:	400a      	ands	r2, r1
 800721c:	9200      	str	r2, [sp, #0]
 800721e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007220:	2201      	movs	r2, #1
 8007222:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007224:	4311      	orrs	r1, r2
 8007226:	64d9      	str	r1, [r3, #76]	@ 0x4c
 8007228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800722a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800722c:	401a      	ands	r2, r3
 800722e:	9201      	str	r2, [sp, #4]
 8007230:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007232:	220c      	movs	r2, #12
 8007234:	2302      	movs	r3, #2
 8007236:	9202      	str	r2, [sp, #8]
 8007238:	9303      	str	r3, [sp, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	2300      	movs	r3, #0
 800723e:	9204      	str	r2, [sp, #16]
 8007240:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007242:	2307      	movs	r3, #7
 8007244:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007246:	f000 fb01 	bl	800784c <HAL_GPIO_Init>
}
 800724a:	e7d4      	b.n	80071f6 <HAL_UART_MspInit+0x22>
      Error_Handler();
 800724c:	f7fe fa7a 	bl	8005744 <Error_Handler>
 8007250:	e7da      	b.n	8007208 <HAL_UART_MspInit+0x34>
 8007252:	46c0      	nop			@ (mov r8, r8)
 8007254:	40004400 	.word	0x40004400
 8007258:	40021000 	.word	0x40021000

0800725c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800725c:	480d      	ldr	r0, [pc, #52]	@ (8007294 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800725e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8007260:	f7ff ff54 	bl	800710c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007264:	480c      	ldr	r0, [pc, #48]	@ (8007298 <LoopForever+0x6>)
  ldr r1, =_edata
 8007266:	490d      	ldr	r1, [pc, #52]	@ (800729c <LoopForever+0xa>)
  ldr r2, =_sidata
 8007268:	4a0d      	ldr	r2, [pc, #52]	@ (80072a0 <LoopForever+0xe>)
  movs r3, #0
 800726a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800726c:	e002      	b.n	8007274 <LoopCopyDataInit>

0800726e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800726e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007272:	3304      	adds	r3, #4

08007274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007278:	d3f9      	bcc.n	800726e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800727a:	4a0a      	ldr	r2, [pc, #40]	@ (80072a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800727c:	4c0a      	ldr	r4, [pc, #40]	@ (80072a8 <LoopForever+0x16>)
  movs r3, #0
 800727e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007280:	e001      	b.n	8007286 <LoopFillZerobss>

08007282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007284:	3204      	adds	r2, #4

08007286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007288:	d3fb      	bcc.n	8007282 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800728a:	f005 fceb 	bl	800cc64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800728e:	f7fe f88f 	bl	80053b0 <main>

08007292 <LoopForever>:

LoopForever:
  b LoopForever
 8007292:	e7fe      	b.n	8007292 <LoopForever>
  ldr   r0, =_estack
 8007294:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8007298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800729c:	20000340 	.word	0x20000340
  ldr r2, =_sidata
 80072a0:	0801a658 	.word	0x0801a658
  ldr r2, =_sbss
 80072a4:	20000340 	.word	0x20000340
  ldr r4, =_ebss
 80072a8:	200006f4 	.word	0x200006f4

080072ac <ADC_COMP1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80072ac:	e7fe      	b.n	80072ac <ADC_COMP1_2_IRQHandler>
	...

080072b0 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80072b0:	4b0f      	ldr	r3, [pc, #60]	@ (80072f0 <HAL_InitTick+0x40>)
{
 80072b2:	b570      	push	{r4, r5, r6, lr}
  if (uwTickFreq != 0U)
 80072b4:	6819      	ldr	r1, [r3, #0]
{
 80072b6:	0004      	movs	r4, r0
  if (uwTickFreq != 0U)
 80072b8:	2900      	cmp	r1, #0
 80072ba:	d101      	bne.n	80072c0 <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 80072bc:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 80072be:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80072c0:	20fa      	movs	r0, #250	@ 0xfa
 80072c2:	0080      	lsls	r0, r0, #2
 80072c4:	f7f8 ff3c 	bl	8000140 <__udivsi3>
 80072c8:	4d0a      	ldr	r5, [pc, #40]	@ (80072f4 <HAL_InitTick+0x44>)
 80072ca:	0001      	movs	r1, r0
 80072cc:	6828      	ldr	r0, [r5, #0]
 80072ce:	f7f8 ff37 	bl	8000140 <__udivsi3>
 80072d2:	f000 faa1 	bl	8007818 <HAL_SYSTICK_Config>
 80072d6:	2800      	cmp	r0, #0
 80072d8:	d1f0      	bne.n	80072bc <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80072da:	2c03      	cmp	r4, #3
 80072dc:	d8ee      	bhi.n	80072bc <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80072de:	3801      	subs	r0, #1
 80072e0:	2200      	movs	r2, #0
 80072e2:	0021      	movs	r1, r4
 80072e4:	f000 fa62 	bl	80077ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80072e8:	4b03      	ldr	r3, [pc, #12]	@ (80072f8 <HAL_InitTick+0x48>)
 80072ea:	2000      	movs	r0, #0
 80072ec:	601c      	str	r4, [r3, #0]
  return status;
 80072ee:	e7e6      	b.n	80072be <HAL_InitTick+0xe>
 80072f0:	20000008 	.word	0x20000008
 80072f4:	20000004 	.word	0x20000004
 80072f8:	2000000c 	.word	0x2000000c

080072fc <HAL_Init>:
{
 80072fc:	b510      	push	{r4, lr}
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80072fe:	2003      	movs	r0, #3
 8007300:	f7ff ffd6 	bl	80072b0 <HAL_InitTick>
 8007304:	1e04      	subs	r4, r0, #0
 8007306:	d002      	beq.n	800730e <HAL_Init+0x12>
    status = HAL_ERROR;
 8007308:	2401      	movs	r4, #1
}
 800730a:	0020      	movs	r0, r4
 800730c:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 800730e:	f7ff fe75 	bl	8006ffc <HAL_MspInit>
 8007312:	e7fa      	b.n	800730a <HAL_Init+0xe>

08007314 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8007314:	4a03      	ldr	r2, [pc, #12]	@ (8007324 <HAL_IncTick+0x10>)
 8007316:	4904      	ldr	r1, [pc, #16]	@ (8007328 <HAL_IncTick+0x14>)
 8007318:	6813      	ldr	r3, [r2, #0]
 800731a:	6809      	ldr	r1, [r1, #0]
 800731c:	185b      	adds	r3, r3, r1
 800731e:	6013      	str	r3, [r2, #0]
}
 8007320:	4770      	bx	lr
 8007322:	46c0      	nop			@ (mov r8, r8)
 8007324:	2000054c 	.word	0x2000054c
 8007328:	20000008 	.word	0x20000008

0800732c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800732c:	4b01      	ldr	r3, [pc, #4]	@ (8007334 <HAL_GetTick+0x8>)
 800732e:	6818      	ldr	r0, [r3, #0]
}
 8007330:	4770      	bx	lr
 8007332:	46c0      	nop			@ (mov r8, r8)
 8007334:	2000054c 	.word	0x2000054c

08007338 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007338:	b570      	push	{r4, r5, r6, lr}
 800733a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800733c:	f7ff fff6 	bl	800732c <HAL_GetTick>
 8007340:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007342:	1c63      	adds	r3, r4, #1
 8007344:	d002      	beq.n	800734c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8007346:	4b04      	ldr	r3, [pc, #16]	@ (8007358 <HAL_Delay+0x20>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800734c:	f7ff ffee 	bl	800732c <HAL_GetTick>
 8007350:	1b40      	subs	r0, r0, r5
 8007352:	42a0      	cmp	r0, r4
 8007354:	d3fa      	bcc.n	800734c <HAL_Delay+0x14>
  {
  }
}
 8007356:	bd70      	pop	{r4, r5, r6, pc}
 8007358:	20000008 	.word	0x20000008

0800735c <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800735c:	2102      	movs	r1, #2
 800735e:	4a02      	ldr	r2, [pc, #8]	@ (8007368 <HAL_SuspendTick+0xc>)
 8007360:	6813      	ldr	r3, [r2, #0]
 8007362:	438b      	bics	r3, r1
 8007364:	6013      	str	r3, [r2, #0]
}
 8007366:	4770      	bx	lr
 8007368:	e000e010 	.word	0xe000e010

0800736c <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800736c:	2102      	movs	r1, #2
 800736e:	4a02      	ldr	r2, [pc, #8]	@ (8007378 <HAL_ResumeTick+0xc>)
 8007370:	6813      	ldr	r3, [r2, #0]
 8007372:	430b      	orrs	r3, r1
 8007374:	6013      	str	r3, [r2, #0]
}
 8007376:	4770      	bx	lr
 8007378:	e000e010 	.word	0xe000e010

0800737c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800737c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800737e:	46d6      	mov	lr, sl
 8007380:	464f      	mov	r7, r9
 8007382:	4646      	mov	r6, r8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr1 = 0UL;
  uint32_t tmp_cfgr2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007384:	2300      	movs	r3, #0
{
 8007386:	b5c0      	push	{r6, r7, lr}
 8007388:	b082      	sub	sp, #8
 800738a:	1e04      	subs	r4, r0, #0
  __IO uint32_t wait_loop_index = 0UL;
 800738c:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800738e:	d02c      	beq.n	80073ea <HAL_ADC_Init+0x6e>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007390:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8007392:	2d00      	cmp	r5, #0
 8007394:	d100      	bne.n	8007398 <HAL_ADC_Init+0x1c>
 8007396:	e0cc      	b.n	8007532 <HAL_ADC_Init+0x1b6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007398:	2380      	movs	r3, #128	@ 0x80

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800739a:	6825      	ldr	r5, [r4, #0]
 800739c:	055b      	lsls	r3, r3, #21
 800739e:	68aa      	ldr	r2, [r5, #8]
 80073a0:	421a      	tst	r2, r3
 80073a2:	d115      	bne.n	80073d0 <HAL_ADC_Init+0x54>
  MODIFY_REG(ADCx->CR,
 80073a4:	68aa      	ldr	r2, [r5, #8]
 80073a6:	497b      	ldr	r1, [pc, #492]	@ (8007594 <HAL_ADC_Init+0x218>)
 80073a8:	400a      	ands	r2, r1
 80073aa:	4313      	orrs	r3, r2
 80073ac:	60ab      	str	r3, [r5, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80073ae:	4b7a      	ldr	r3, [pc, #488]	@ (8007598 <HAL_ADC_Init+0x21c>)
 80073b0:	497a      	ldr	r1, [pc, #488]	@ (800759c <HAL_ADC_Init+0x220>)
 80073b2:	6818      	ldr	r0, [r3, #0]
 80073b4:	f7f8 fec4 	bl	8000140 <__udivsi3>
 80073b8:	3001      	adds	r0, #1
 80073ba:	0040      	lsls	r0, r0, #1
 80073bc:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 80073be:	9b01      	ldr	r3, [sp, #4]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d005      	beq.n	80073d0 <HAL_ADC_Init+0x54>
    {
      wait_loop_index--;
 80073c4:	9b01      	ldr	r3, [sp, #4]
 80073c6:	3b01      	subs	r3, #1
 80073c8:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80073ca:	9b01      	ldr	r3, [sp, #4]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1f9      	bne.n	80073c4 <HAL_ADC_Init+0x48>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80073d0:	68ab      	ldr	r3, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80073d2:	2000      	movs	r0, #0
 80073d4:	00db      	lsls	r3, r3, #3
 80073d6:	d400      	bmi.n	80073da <HAL_ADC_Init+0x5e>
 80073d8:	e09d      	b.n	8007516 <HAL_ADC_Init+0x19a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80073da:	68ab      	ldr	r3, [r5, #8]
 80073dc:	075b      	lsls	r3, r3, #29
 80073de:	d50b      	bpl.n	80073f8 <HAL_ADC_Init+0x7c>
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80073e0:	6da3      	ldr	r3, [r4, #88]	@ 0x58

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80073e2:	2210      	movs	r2, #16
 80073e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80073e6:	4313      	orrs	r3, r2
 80073e8:	65a3      	str	r3, [r4, #88]	@ 0x58
    return HAL_ERROR;
 80073ea:	2001      	movs	r0, #1

    tmp_hal_status = HAL_ERROR;
  }

  return tmp_hal_status;
}
 80073ec:	b002      	add	sp, #8
 80073ee:	bce0      	pop	{r5, r6, r7}
 80073f0:	46ba      	mov	sl, r7
 80073f2:	46b1      	mov	r9, r6
 80073f4:	46a8      	mov	r8, r5
 80073f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80073f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80073fa:	06db      	lsls	r3, r3, #27
 80073fc:	d4f1      	bmi.n	80073e2 <HAL_ADC_Init+0x66>
    ADC_STATE_CLR_SET(hadc->State,
 80073fe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007400:	4a67      	ldr	r2, [pc, #412]	@ (80075a0 <HAL_ADC_Init+0x224>)
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007402:	6921      	ldr	r1, [r4, #16]
    ADC_STATE_CLR_SET(hadc->State,
 8007404:	4013      	ands	r3, r2
 8007406:	3206      	adds	r2, #6
 8007408:	32ff      	adds	r2, #255	@ 0xff
 800740a:	4313      	orrs	r3, r2
 800740c:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800740e:	68ab      	ldr	r3, [r5, #8]
 8007410:	07db      	lsls	r3, r3, #31
 8007412:	d45c      	bmi.n	80074ce <HAL_ADC_Init+0x152>
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8007414:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 8007416:	68a2      	ldr	r2, [r4, #8]
 8007418:	1e7b      	subs	r3, r7, #1
 800741a:	419f      	sbcs	r7, r3
 800741c:	68e3      	ldr	r3, [r4, #12]
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800741e:	7ea6      	ldrb	r6, [r4, #26]
 8007420:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8007422:	7e23      	ldrb	r3, [r4, #24]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8007424:	033f      	lsls	r7, r7, #12
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8007426:	039b      	lsls	r3, r3, #14
 8007428:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800742a:	7e63      	ldrb	r3, [r4, #25]
 800742c:	03db      	lsls	r3, r3, #15
 800742e:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8007430:	0373      	lsls	r3, r6, #13
 8007432:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007434:	2900      	cmp	r1, #0
 8007436:	da00      	bge.n	800743a <HAL_ADC_Init+0xbe>
 8007438:	e09b      	b.n	8007572 <HAL_ADC_Init+0x1f6>
 800743a:	2380      	movs	r3, #128	@ 0x80
 800743c:	039b      	lsls	r3, r3, #14
 800743e:	469c      	mov	ip, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007440:	232c      	movs	r3, #44	@ 0x2c
 8007442:	5ce3      	ldrb	r3, [r4, r3]
 8007444:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007446:	4313      	orrs	r3, r2
 8007448:	433b      	orrs	r3, r7
 800744a:	4662      	mov	r2, ip
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800744c:	2720      	movs	r7, #32
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800744e:	4313      	orrs	r3, r2
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007450:	5de2      	ldrb	r2, [r4, r7]
 8007452:	2a01      	cmp	r2, #1
 8007454:	d100      	bne.n	8007458 <HAL_ADC_Init+0xdc>
 8007456:	e090      	b.n	800757a <HAL_ADC_Init+0x1fe>
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007458:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800745a:	2a00      	cmp	r2, #0
 800745c:	d005      	beq.n	800746a <HAL_ADC_Init+0xee>
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800745e:	26e0      	movs	r6, #224	@ 0xe0
 8007460:	0076      	lsls	r6, r6, #1
 8007462:	4032      	ands	r2, r6
 8007464:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007466:	4332      	orrs	r2, r6
 8007468:	4313      	orrs	r3, r2
      if (hadc->Init.OversamplingMode == ENABLE)
 800746a:	273c      	movs	r7, #60	@ 0x3c
      MODIFY_REG(hadc->Instance->CFGR1,
 800746c:	68ea      	ldr	r2, [r5, #12]
 800746e:	4e4d      	ldr	r6, [pc, #308]	@ (80075a4 <HAL_ADC_Init+0x228>)
 8007470:	4032      	ands	r2, r6
 8007472:	4313      	orrs	r3, r2
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8007474:	6866      	ldr	r6, [r4, #4]
      MODIFY_REG(hadc->Instance->CFGR1,
 8007476:	60eb      	str	r3, [r5, #12]
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8007478:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      if (hadc->Init.OversamplingMode == ENABLE)
 800747a:	5de7      	ldrb	r7, [r4, r7]
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800747c:	0fb3      	lsrs	r3, r6, #30
 800747e:	079b      	lsls	r3, r3, #30
 8007480:	469a      	mov	sl, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 8007482:	46bc      	mov	ip, r7
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8007484:	431a      	orrs	r2, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 8007486:	2f01      	cmp	r7, #1
 8007488:	d109      	bne.n	800749e <HAL_ADC_Init+0x122>
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800748a:	6c67      	ldr	r7, [r4, #68]	@ 0x44
 800748c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800748e:	433b      	orrs	r3, r7
 8007490:	431a      	orrs	r2, r3
 8007492:	4653      	mov	r3, sl
 8007494:	6ca7      	ldr	r7, [r4, #72]	@ 0x48
 8007496:	433a      	orrs	r2, r7
 8007498:	431a      	orrs	r2, r3
 800749a:	4663      	mov	r3, ip
 800749c:	431a      	orrs	r2, r3
      MODIFY_REG(hadc->Instance->CFGR2,
 800749e:	692b      	ldr	r3, [r5, #16]
 80074a0:	4f41      	ldr	r7, [pc, #260]	@ (80075a8 <HAL_ADC_Init+0x22c>)
 80074a2:	403b      	ands	r3, r7
 80074a4:	4313      	orrs	r3, r2
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80074a6:	2280      	movs	r2, #128	@ 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 80074a8:	612b      	str	r3, [r5, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80074aa:	0073      	lsls	r3, r6, #1
 80074ac:	085b      	lsrs	r3, r3, #1
 80074ae:	05d2      	lsls	r2, r2, #23
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d00c      	beq.n	80074ce <HAL_ADC_Init+0x152>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80074b4:	2380      	movs	r3, #128	@ 0x80
 80074b6:	061b      	lsls	r3, r3, #24
 80074b8:	429e      	cmp	r6, r3
 80074ba:	d008      	beq.n	80074ce <HAL_ADC_Init+0x152>
        MODIFY_REG(ADC1_COMMON->CCR,
 80074bc:	4a3b      	ldr	r2, [pc, #236]	@ (80075ac <HAL_ADC_Init+0x230>)
 80074be:	4f3c      	ldr	r7, [pc, #240]	@ (80075b0 <HAL_ADC_Init+0x234>)
 80074c0:	6813      	ldr	r3, [r2, #0]
 80074c2:	403b      	ands	r3, r7
 80074c4:	27f0      	movs	r7, #240	@ 0xf0
 80074c6:	03bf      	lsls	r7, r7, #14
 80074c8:	403e      	ands	r6, r7
 80074ca:	4333      	orrs	r3, r6
 80074cc:	6013      	str	r3, [r2, #0]
  MODIFY_REG(ADCx->SMPR,
 80074ce:	2607      	movs	r6, #7
 80074d0:	2770      	movs	r7, #112	@ 0x70
 80074d2:	696b      	ldr	r3, [r5, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80074d4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80074d6:	43b3      	bics	r3, r6
 80074d8:	4313      	orrs	r3, r2
 80074da:	616b      	str	r3, [r5, #20]
 80074dc:	696e      	ldr	r6, [r5, #20]
 80074de:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80074e0:	43be      	bics	r6, r7
 80074e2:	011b      	lsls	r3, r3, #4
 80074e4:	4333      	orrs	r3, r6
 80074e6:	616b      	str	r3, [r5, #20]
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80074e8:	2900      	cmp	r1, #0
 80074ea:	d128      	bne.n	800753e <HAL_ADC_Init+0x1c2>
      SET_BIT(hadc->Instance->CHSELR,
 80074ec:	2310      	movs	r3, #16
 80074ee:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 80074f0:	425b      	negs	r3, r3
 80074f2:	430b      	orrs	r3, r1
 80074f4:	62ab      	str	r3, [r5, #40]	@ 0x28
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80074f6:	2307      	movs	r3, #7
 80074f8:	6969      	ldr	r1, [r5, #20]
 80074fa:	400b      	ands	r3, r1
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d02f      	beq.n	8007560 <HAL_ADC_Init+0x1e4>
      ADC_STATE_CLR_SET(hadc->State,
 8007500:	2212      	movs	r2, #18
 8007502:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007504:	4393      	bics	r3, r2
 8007506:	3a02      	subs	r2, #2
 8007508:	4313      	orrs	r3, r2
 800750a:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800750c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800750e:	3a0f      	subs	r2, #15
 8007510:	4313      	orrs	r3, r2
 8007512:	65e3      	str	r3, [r4, #92]	@ 0x5c
      tmp_hal_status = HAL_ERROR;
 8007514:	e769      	b.n	80073ea <HAL_ADC_Init+0x6e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007516:	2210      	movs	r2, #16
 8007518:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 800751a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800751c:	4313      	orrs	r3, r2
 800751e:	65a3      	str	r3, [r4, #88]	@ 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007520:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8007522:	3a0f      	subs	r2, #15
 8007524:	4313      	orrs	r3, r2
 8007526:	65e3      	str	r3, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007528:	68ab      	ldr	r3, [r5, #8]
 800752a:	075b      	lsls	r3, r3, #29
 800752c:	d400      	bmi.n	8007530 <HAL_ADC_Init+0x1b4>
 800752e:	e763      	b.n	80073f8 <HAL_ADC_Init+0x7c>
 8007530:	e756      	b.n	80073e0 <HAL_ADC_Init+0x64>
    HAL_ADC_MspInit(hadc);
 8007532:	f7fd fcfd 	bl	8004f30 <HAL_ADC_MspInit>
    hadc->Lock = HAL_UNLOCKED;
 8007536:	2354      	movs	r3, #84	@ 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 8007538:	65e5      	str	r5, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 800753a:	54e5      	strb	r5, [r4, r3]
 800753c:	e72c      	b.n	8007398 <HAL_ADC_Init+0x1c>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800753e:	2380      	movs	r3, #128	@ 0x80
 8007540:	039b      	lsls	r3, r3, #14
 8007542:	4299      	cmp	r1, r3
 8007544:	d1d7      	bne.n	80074f6 <HAL_ADC_Init+0x17a>
      MODIFY_REG(hadc->Instance->CHSELR,
 8007546:	211c      	movs	r1, #28
 8007548:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800754a:	69e3      	ldr	r3, [r4, #28]
 800754c:	3b01      	subs	r3, #1
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4019      	ands	r1, r3
 8007552:	2310      	movs	r3, #16
 8007554:	425b      	negs	r3, r3
 8007556:	408b      	lsls	r3, r1
 8007558:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 800755a:	430b      	orrs	r3, r1
 800755c:	62ab      	str	r3, [r5, #40]	@ 0x28
 800755e:	e7ca      	b.n	80074f6 <HAL_ADC_Init+0x17a>
      ADC_CLEAR_ERRORCODE(hadc);
 8007560:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8007562:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8007564:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8007566:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007568:	4393      	bics	r3, r2
 800756a:	3a02      	subs	r2, #2
 800756c:	4313      	orrs	r3, r2
 800756e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007570:	e73c      	b.n	80073ec <HAL_ADC_Init+0x70>
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007572:	004b      	lsls	r3, r1, #1
 8007574:	085b      	lsrs	r3, r3, #1
 8007576:	469c      	mov	ip, r3
 8007578:	e762      	b.n	8007440 <HAL_ADC_Init+0xc4>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800757a:	2e00      	cmp	r6, #0
 800757c:	d103      	bne.n	8007586 <HAL_ADC_Init+0x20a>
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 800757e:	2280      	movs	r2, #128	@ 0x80
 8007580:	0252      	lsls	r2, r2, #9
 8007582:	4313      	orrs	r3, r2
 8007584:	e768      	b.n	8007458 <HAL_ADC_Init+0xdc>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007586:	6da6      	ldr	r6, [r4, #88]	@ 0x58
 8007588:	433e      	orrs	r6, r7
 800758a:	65a6      	str	r6, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800758c:	6de6      	ldr	r6, [r4, #92]	@ 0x5c
 800758e:	4332      	orrs	r2, r6
 8007590:	65e2      	str	r2, [r4, #92]	@ 0x5c
 8007592:	e761      	b.n	8007458 <HAL_ADC_Init+0xdc>
 8007594:	6fffffe8 	.word	0x6fffffe8
 8007598:	20000004 	.word	0x20000004
 800759c:	00030d40 	.word	0x00030d40
 80075a0:	fffffefd 	.word	0xfffffefd
 80075a4:	ffde0201 	.word	0xffde0201
 80075a8:	1ffffc02 	.word	0x1ffffc02
 80075ac:	40012708 	.word	0x40012708
 80075b0:	ffc3ffff 	.word	0xffc3ffff

080075b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80075b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075b6:	4645      	mov	r5, r8
 80075b8:	46de      	mov	lr, fp
 80075ba:	4657      	mov	r7, sl
 80075bc:	464e      	mov	r6, r9
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80075be:	2300      	movs	r3, #0
{
 80075c0:	b5e0      	push	{r5, r6, r7, lr}
 80075c2:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 80075c4:	9303      	str	r3, [sp, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80075c6:	3354      	adds	r3, #84	@ 0x54
{
 80075c8:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 80075ca:	5cc1      	ldrb	r1, [r0, r3]
{
 80075cc:	0004      	movs	r4, r0
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80075ce:	6902      	ldr	r2, [r0, #16]
  __HAL_LOCK(hadc);
 80075d0:	2901      	cmp	r1, #1
 80075d2:	d100      	bne.n	80075d6 <HAL_ADC_ConfigChannel+0x22>
 80075d4:	e093      	b.n	80076fe <HAL_ADC_ConfigChannel+0x14a>
 80075d6:	2101      	movs	r1, #1
 80075d8:	54c1      	strb	r1, [r0, r3]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80075da:	6806      	ldr	r6, [r0, #0]
 80075dc:	3b50      	subs	r3, #80	@ 0x50
 80075de:	68b1      	ldr	r1, [r6, #8]
 80075e0:	420b      	tst	r3, r1
 80075e2:	d00e      	beq.n	8007602 <HAL_ADC_ConfigChannel+0x4e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80075e4:	2220      	movs	r2, #32
 80075e6:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80075e8:	4313      	orrs	r3, r2
 80075ea:	6583      	str	r3, [r0, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80075ec:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 80075ee:	2354      	movs	r3, #84	@ 0x54
 80075f0:	2200      	movs	r2, #0
 80075f2:	54e2      	strb	r2, [r4, r3]

  return tmp_hal_status;
}
 80075f4:	b005      	add	sp, #20
 80075f6:	bcf0      	pop	{r4, r5, r6, r7}
 80075f8:	46bb      	mov	fp, r7
 80075fa:	46b2      	mov	sl, r6
 80075fc:	46a9      	mov	r9, r5
 80075fe:	46a0      	mov	r8, r4
 8007600:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 8007602:	6869      	ldr	r1, [r5, #4]
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8007604:	682f      	ldr	r7, [r5, #0]
    if (pConfig->Rank != ADC_RANK_NONE)
 8007606:	4688      	mov	r8, r1
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007608:	439a      	bics	r2, r3
    if (pConfig->Rank != ADC_RANK_NONE)
 800760a:	2902      	cmp	r1, #2
 800760c:	d057      	beq.n	80076be <HAL_ADC_ConfigChannel+0x10a>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800760e:	2380      	movs	r3, #128	@ 0x80
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8007610:	0279      	lsls	r1, r7, #9
 8007612:	0a49      	lsrs	r1, r1, #9
 8007614:	061b      	lsls	r3, r3, #24
 8007616:	429a      	cmp	r2, r3
 8007618:	d04d      	beq.n	80076b6 <HAL_ADC_ConfigChannel+0x102>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800761a:	221f      	movs	r2, #31
 800761c:	4694      	mov	ip, r2
 800761e:	4642      	mov	r2, r8
 8007620:	4660      	mov	r0, ip
 8007622:	4002      	ands	r2, r0
 8007624:	4692      	mov	sl, r2
 8007626:	220f      	movs	r2, #15
 8007628:	4650      	mov	r0, sl
 800762a:	4082      	lsls	r2, r0
 800762c:	43d0      	mvns	r0, r2
 800762e:	4683      	mov	fp, r0
 8007630:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8007632:	4390      	bics	r0, r2
 8007634:	4681      	mov	r9, r0
 8007636:	2900      	cmp	r1, #0
 8007638:	d163      	bne.n	8007702 <HAL_ADC_ConfigChannel+0x14e>
 800763a:	4660      	mov	r0, ip
 800763c:	0ebb      	lsrs	r3, r7, #26
 800763e:	4018      	ands	r0, r3
 8007640:	4653      	mov	r3, sl
 8007642:	4098      	lsls	r0, r3
 8007644:	464b      	mov	r3, r9
 8007646:	4318      	orrs	r0, r3
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8007648:	4643      	mov	r3, r8
 800764a:	69e2      	ldr	r2, [r4, #28]
 800764c:	089b      	lsrs	r3, r3, #2
 800764e:	3301      	adds	r3, #1
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8007650:	6620      	str	r0, [r4, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8007652:	4293      	cmp	r3, r2
 8007654:	d808      	bhi.n	8007668 <HAL_ADC_ConfigChannel+0xb4>
  MODIFY_REG(ADCx->CHSELR,
 8007656:	4651      	mov	r1, sl
 8007658:	00bb      	lsls	r3, r7, #2
 800765a:	0f1b      	lsrs	r3, r3, #28
 800765c:	408b      	lsls	r3, r1
 800765e:	4659      	mov	r1, fp
 8007660:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
 8007662:	400a      	ands	r2, r1
 8007664:	4313      	orrs	r3, r2
 8007666:	62b3      	str	r3, [r6, #40]	@ 0x28
  MODIFY_REG(ADCx->SMPR,
 8007668:	68ab      	ldr	r3, [r5, #8]
 800766a:	6971      	ldr	r1, [r6, #20]
 800766c:	023a      	lsls	r2, r7, #8
 800766e:	4847      	ldr	r0, [pc, #284]	@ (800778c <HAL_ADC_ConfigChannel+0x1d8>)
 8007670:	4013      	ands	r3, r2
 8007672:	4003      	ands	r3, r0
 8007674:	4391      	bics	r1, r2
 8007676:	430b      	orrs	r3, r1
 8007678:	6173      	str	r3, [r6, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800767a:	2f00      	cmp	r7, #0
 800767c:	db01      	blt.n	8007682 <HAL_ADC_ConfigChannel+0xce>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800767e:	2000      	movs	r0, #0
 8007680:	e7b5      	b.n	80075ee <HAL_ADC_ConfigChannel+0x3a>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007682:	21e0      	movs	r1, #224	@ 0xe0
 8007684:	4842      	ldr	r0, [pc, #264]	@ (8007790 <HAL_ADC_ConfigChannel+0x1dc>)
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8007686:	4a43      	ldr	r2, [pc, #268]	@ (8007794 <HAL_ADC_ConfigChannel+0x1e0>)
 8007688:	6803      	ldr	r3, [r0, #0]
 800768a:	0449      	lsls	r1, r1, #17
 800768c:	4019      	ands	r1, r3
 800768e:	4297      	cmp	r7, r2
 8007690:	d057      	beq.n	8007742 <HAL_ADC_ConfigChannel+0x18e>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8007692:	4a41      	ldr	r2, [pc, #260]	@ (8007798 <HAL_ADC_ConfigChannel+0x1e4>)
 8007694:	4297      	cmp	r7, r2
 8007696:	d049      	beq.n	800772c <HAL_ADC_ConfigChannel+0x178>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8007698:	4a40      	ldr	r2, [pc, #256]	@ (800779c <HAL_ADC_ConfigChannel+0x1e8>)
 800769a:	4297      	cmp	r7, r2
 800769c:	d1ef      	bne.n	800767e <HAL_ADC_ConfigChannel+0xca>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800769e:	2280      	movs	r2, #128	@ 0x80
 80076a0:	03d2      	lsls	r2, r2, #15
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80076a2:	4213      	tst	r3, r2
 80076a4:	d1eb      	bne.n	800767e <HAL_ADC_ConfigChannel+0xca>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80076a6:	6803      	ldr	r3, [r0, #0]
 80076a8:	4d3d      	ldr	r5, [pc, #244]	@ (80077a0 <HAL_ADC_ConfigChannel+0x1ec>)
 80076aa:	402b      	ands	r3, r5
 80076ac:	430b      	orrs	r3, r1
 80076ae:	431a      	orrs	r2, r3
 80076b0:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80076b2:	2000      	movs	r0, #0
 80076b4:	e79b      	b.n	80075ee <HAL_ADC_ConfigChannel+0x3a>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80076b6:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 80076b8:	430b      	orrs	r3, r1
 80076ba:	62b3      	str	r3, [r6, #40]	@ 0x28
}
 80076bc:	e7d4      	b.n	8007668 <HAL_ADC_ConfigChannel+0xb4>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80076be:	2380      	movs	r3, #128	@ 0x80
 80076c0:	061b      	lsls	r3, r3, #24
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d104      	bne.n	80076d0 <HAL_ADC_ConfigChannel+0x11c>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80076c6:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 80076c8:	027a      	lsls	r2, r7, #9
 80076ca:	0a52      	lsrs	r2, r2, #9
 80076cc:	4393      	bics	r3, r2
 80076ce:	62b3      	str	r3, [r6, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80076d0:	2f00      	cmp	r7, #0
 80076d2:	dad4      	bge.n	800767e <HAL_ADC_ConfigChannel+0xca>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80076d4:	4a2e      	ldr	r2, [pc, #184]	@ (8007790 <HAL_ADC_ConfigChannel+0x1dc>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80076d6:	492f      	ldr	r1, [pc, #188]	@ (8007794 <HAL_ADC_ConfigChannel+0x1e0>)
 80076d8:	6813      	ldr	r3, [r2, #0]
 80076da:	428f      	cmp	r7, r1
 80076dc:	d02c      	beq.n	8007738 <HAL_ADC_ConfigChannel+0x184>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80076de:	492e      	ldr	r1, [pc, #184]	@ (8007798 <HAL_ADC_ConfigChannel+0x1e4>)
 80076e0:	428f      	cmp	r7, r1
 80076e2:	d04d      	beq.n	8007780 <HAL_ADC_ConfigChannel+0x1cc>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80076e4:	492d      	ldr	r1, [pc, #180]	@ (800779c <HAL_ADC_ConfigChannel+0x1e8>)
 80076e6:	428f      	cmp	r7, r1
 80076e8:	d1c9      	bne.n	800767e <HAL_ADC_ConfigChannel+0xca>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80076ea:	20c0      	movs	r0, #192	@ 0xc0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80076ec:	6811      	ldr	r1, [r2, #0]
 80076ee:	0440      	lsls	r0, r0, #17
 80076f0:	4003      	ands	r3, r0
 80076f2:	482b      	ldr	r0, [pc, #172]	@ (80077a0 <HAL_ADC_ConfigChannel+0x1ec>)
 80076f4:	4001      	ands	r1, r0
 80076f6:	430b      	orrs	r3, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80076f8:	2000      	movs	r0, #0
 80076fa:	6013      	str	r3, [r2, #0]
 80076fc:	e777      	b.n	80075ee <HAL_ADC_ConfigChannel+0x3a>
  __HAL_LOCK(hadc);
 80076fe:	2002      	movs	r0, #2
 8007700:	e778      	b.n	80075f4 <HAL_ADC_ConfigChannel+0x40>
  for (value >>= 1U; value != 0U; value >>= 1U)
 8007702:	087a      	lsrs	r2, r7, #1
 8007704:	d040      	beq.n	8007788 <HAL_ADC_ConfigChannel+0x1d4>
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8007706:	231f      	movs	r3, #31
  for (value >>= 1U; value != 0U; value >>= 1U)
 8007708:	0038      	movs	r0, r7
    result |= value & 1U;
 800770a:	2101      	movs	r1, #1
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 800770c:	9301      	str	r3, [sp, #4]
    result |= value & 1U;
 800770e:	000b      	movs	r3, r1
    result <<= 1U;
 8007710:	0040      	lsls	r0, r0, #1
    result |= value & 1U;
 8007712:	4013      	ands	r3, r2
 8007714:	4318      	orrs	r0, r3
    s--;
 8007716:	9b01      	ldr	r3, [sp, #4]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8007718:	0852      	lsrs	r2, r2, #1
    s--;
 800771a:	3b01      	subs	r3, #1
 800771c:	9301      	str	r3, [sp, #4]
  for (value >>= 1U; value != 0U; value >>= 1U)
 800771e:	2a00      	cmp	r2, #0
 8007720:	d1f5      	bne.n	800770e <HAL_ADC_ConfigChannel+0x15a>
  result <<= s;                        /* shift when v's highest bits are zero */
 8007722:	4098      	lsls	r0, r3
  if (value == 0U)
 8007724:	d00b      	beq.n	800773e <HAL_ADC_ConfigChannel+0x18a>
  return __builtin_clz(value);
 8007726:	f7f8 febf 	bl	80004a8 <__clzsi2>
 800772a:	e789      	b.n	8007640 <HAL_ADC_ConfigChannel+0x8c>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800772c:	2280      	movs	r2, #128	@ 0x80
 800772e:	0452      	lsls	r2, r2, #17
 8007730:	4213      	tst	r3, r2
 8007732:	d0b8      	beq.n	80076a6 <HAL_ADC_ConfigChannel+0xf2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007734:	2000      	movs	r0, #0
 8007736:	e75a      	b.n	80075ee <HAL_ADC_ConfigChannel+0x3a>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007738:	20a0      	movs	r0, #160	@ 0xa0
 800773a:	6811      	ldr	r1, [r2, #0]
 800773c:	e7d7      	b.n	80076ee <HAL_ADC_ConfigChannel+0x13a>
 800773e:	2020      	movs	r0, #32
 8007740:	e77e      	b.n	8007640 <HAL_ADC_ConfigChannel+0x8c>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007742:	2280      	movs	r2, #128	@ 0x80
 8007744:	0412      	lsls	r2, r2, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8007746:	4213      	tst	r3, r2
 8007748:	d199      	bne.n	800767e <HAL_ADC_ConfigChannel+0xca>
 800774a:	6803      	ldr	r3, [r0, #0]
 800774c:	4d14      	ldr	r5, [pc, #80]	@ (80077a0 <HAL_ADC_ConfigChannel+0x1ec>)
 800774e:	402b      	ands	r3, r5
 8007750:	430b      	orrs	r3, r1
 8007752:	431a      	orrs	r2, r3
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007754:	4b13      	ldr	r3, [pc, #76]	@ (80077a4 <HAL_ADC_ConfigChannel+0x1f0>)
 8007756:	6002      	str	r2, [r0, #0]
 8007758:	6818      	ldr	r0, [r3, #0]
 800775a:	4913      	ldr	r1, [pc, #76]	@ (80077a8 <HAL_ADC_ConfigChannel+0x1f4>)
 800775c:	f7f8 fcf0 	bl	8000140 <__udivsi3>
 8007760:	3001      	adds	r0, #1
 8007762:	0043      	lsls	r3, r0, #1
 8007764:	181b      	adds	r3, r3, r0
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 800776a:	9b03      	ldr	r3, [sp, #12]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d086      	beq.n	800767e <HAL_ADC_ConfigChannel+0xca>
            wait_loop_index--;
 8007770:	9b03      	ldr	r3, [sp, #12]
 8007772:	3b01      	subs	r3, #1
 8007774:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 8007776:	9b03      	ldr	r3, [sp, #12]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1f9      	bne.n	8007770 <HAL_ADC_ConfigChannel+0x1bc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800777c:	2000      	movs	r0, #0
 800777e:	e736      	b.n	80075ee <HAL_ADC_ConfigChannel+0x3a>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007780:	20c0      	movs	r0, #192	@ 0xc0
 8007782:	6811      	ldr	r1, [r2, #0]
 8007784:	0400      	lsls	r0, r0, #16
 8007786:	e7b3      	b.n	80076f0 <HAL_ADC_ConfigChannel+0x13c>
  result <<= s;                        /* shift when v's highest bits are zero */
 8007788:	0018      	movs	r0, r3
 800778a:	e7cc      	b.n	8007726 <HAL_ADC_ConfigChannel+0x172>
 800778c:	7fffff00 	.word	0x7fffff00
 8007790:	40012708 	.word	0x40012708
 8007794:	ac000800 	.word	0xac000800
 8007798:	b4002000 	.word	0xb4002000
 800779c:	b0001000 	.word	0xb0001000
 80077a0:	fe3fffff 	.word	0xfe3fffff
 80077a4:	20000004 	.word	0x20000004
 80077a8:	00030d40 	.word	0x00030d40

080077ac <HAL_NVIC_SetPriority>:
 80077ac:	22ff      	movs	r2, #255	@ 0xff
 80077ae:	2303      	movs	r3, #3
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80077b0:	b510      	push	{r4, lr}
 80077b2:	0014      	movs	r4, r2
 80077b4:	4003      	ands	r3, r0
 80077b6:	00db      	lsls	r3, r3, #3
 80077b8:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80077ba:	0189      	lsls	r1, r1, #6
 80077bc:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80077be:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80077c0:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 80077c2:	2800      	cmp	r0, #0
 80077c4:	db0b      	blt.n	80077de <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80077c6:	4b0c      	ldr	r3, [pc, #48]	@ (80077f8 <HAL_NVIC_SetPriority+0x4c>)
 80077c8:	21c0      	movs	r1, #192	@ 0xc0
 80077ca:	469c      	mov	ip, r3
 80077cc:	0880      	lsrs	r0, r0, #2
 80077ce:	0080      	lsls	r0, r0, #2
 80077d0:	4460      	add	r0, ip
 80077d2:	0089      	lsls	r1, r1, #2
 80077d4:	5843      	ldr	r3, [r0, r1]
 80077d6:	4023      	ands	r3, r4
 80077d8:	4313      	orrs	r3, r2
 80077da:	5043      	str	r3, [r0, r1]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 80077dc:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80077de:	230f      	movs	r3, #15
 80077e0:	4906      	ldr	r1, [pc, #24]	@ (80077fc <HAL_NVIC_SetPriority+0x50>)
 80077e2:	4003      	ands	r3, r0
 80077e4:	468c      	mov	ip, r1
 80077e6:	3b08      	subs	r3, #8
 80077e8:	089b      	lsrs	r3, r3, #2
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	4463      	add	r3, ip
 80077ee:	69d9      	ldr	r1, [r3, #28]
 80077f0:	400c      	ands	r4, r1
 80077f2:	4314      	orrs	r4, r2
 80077f4:	61dc      	str	r4, [r3, #28]
 80077f6:	e7f1      	b.n	80077dc <HAL_NVIC_SetPriority+0x30>
 80077f8:	e000e100 	.word	0xe000e100
 80077fc:	e000ed00 	.word	0xe000ed00

08007800 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007800:	2800      	cmp	r0, #0
 8007802:	db05      	blt.n	8007810 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007804:	221f      	movs	r2, #31
 8007806:	2301      	movs	r3, #1
 8007808:	4002      	ands	r2, r0
 800780a:	4093      	lsls	r3, r2
 800780c:	4a01      	ldr	r2, [pc, #4]	@ (8007814 <HAL_NVIC_EnableIRQ+0x14>)
 800780e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8007810:	4770      	bx	lr
 8007812:	46c0      	nop			@ (mov r8, r8)
 8007814:	e000e100 	.word	0xe000e100

08007818 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007818:	2280      	movs	r2, #128	@ 0x80
 800781a:	1e43      	subs	r3, r0, #1
 800781c:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800781e:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007820:	4293      	cmp	r3, r2
 8007822:	d20e      	bcs.n	8007842 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007824:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007826:	4a07      	ldr	r2, [pc, #28]	@ (8007844 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007828:	4807      	ldr	r0, [pc, #28]	@ (8007848 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800782a:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800782c:	6a03      	ldr	r3, [r0, #32]
 800782e:	0609      	lsls	r1, r1, #24
 8007830:	021b      	lsls	r3, r3, #8
 8007832:	0a1b      	lsrs	r3, r3, #8
 8007834:	430b      	orrs	r3, r1
 8007836:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007838:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800783a:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800783c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800783e:	3307      	adds	r3, #7
 8007840:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8007842:	4770      	bx	lr
 8007844:	e000e010 	.word	0xe000e010
 8007848:	e000ed00 	.word	0xe000ed00

0800784c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800784c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800784e:	46de      	mov	lr, fp
 8007850:	4657      	mov	r7, sl
 8007852:	464e      	mov	r6, r9
 8007854:	4645      	mov	r5, r8
 8007856:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007858:	680c      	ldr	r4, [r1, #0]
{
 800785a:	468b      	mov	fp, r1
  uint32_t position = 0x00u;
 800785c:	2300      	movs	r3, #0
{
 800785e:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007860:	2c00      	cmp	r4, #0
 8007862:	d070      	beq.n	8007946 <HAL_GPIO_Init+0xfa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007864:	2201      	movs	r2, #1
 8007866:	409a      	lsls	r2, r3
 8007868:	4694      	mov	ip, r2
 800786a:	4022      	ands	r2, r4
 800786c:	4692      	mov	sl, r2

    if (iocurrent != 0x00u)
 800786e:	4662      	mov	r2, ip
 8007870:	4214      	tst	r4, r2
 8007872:	d064      	beq.n	800793e <HAL_GPIO_Init+0xf2>
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8007874:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007876:	465a      	mov	r2, fp
 8007878:	005f      	lsls	r7, r3, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800787a:	40b9      	lsls	r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800787c:	6855      	ldr	r5, [r2, #4]
 800787e:	2203      	movs	r2, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8007880:	43c9      	mvns	r1, r1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007882:	402a      	ands	r2, r5
 8007884:	1e56      	subs	r6, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8007886:	9100      	str	r1, [sp, #0]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007888:	2e01      	cmp	r6, #1
 800788a:	d963      	bls.n	8007954 <HAL_GPIO_Init+0x108>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800788c:	2a03      	cmp	r2, #3
 800788e:	d000      	beq.n	8007892 <HAL_GPIO_Init+0x46>
 8007890:	e0b5      	b.n	80079fe <HAL_GPIO_Init+0x1b2>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8007892:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8007894:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8007896:	9900      	ldr	r1, [sp, #0]
 8007898:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800789a:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 800789c:	6002      	str	r2, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800789e:	22c0      	movs	r2, #192	@ 0xc0
 80078a0:	0292      	lsls	r2, r2, #10
 80078a2:	4215      	tst	r5, r2
 80078a4:	d04b      	beq.n	800793e <HAL_GPIO_Init+0xf2>
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 80078a6:	2703      	movs	r7, #3
 80078a8:	260f      	movs	r6, #15
 80078aa:	4965      	ldr	r1, [pc, #404]	@ (8007a40 <HAL_GPIO_Init+0x1f4>)
 80078ac:	401f      	ands	r7, r3
 80078ae:	468c      	mov	ip, r1
 80078b0:	00ff      	lsls	r7, r7, #3
 80078b2:	40be      	lsls	r6, r7
        temp = EXTI->EXTICR[position >> 2u];
 80078b4:	089a      	lsrs	r2, r3, #2
 80078b6:	0092      	lsls	r2, r2, #2
 80078b8:	4462      	add	r2, ip
 80078ba:	6e11      	ldr	r1, [r2, #96]	@ 0x60
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 80078bc:	43b1      	bics	r1, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 80078be:	26a0      	movs	r6, #160	@ 0xa0
 80078c0:	05f6      	lsls	r6, r6, #23
 80078c2:	42b0      	cmp	r0, r6
 80078c4:	d016      	beq.n	80078f4 <HAL_GPIO_Init+0xa8>
 80078c6:	4e5f      	ldr	r6, [pc, #380]	@ (8007a44 <HAL_GPIO_Init+0x1f8>)
 80078c8:	42b0      	cmp	r0, r6
 80078ca:	d100      	bne.n	80078ce <HAL_GPIO_Init+0x82>
 80078cc:	e0a8      	b.n	8007a20 <HAL_GPIO_Init+0x1d4>
 80078ce:	4e5e      	ldr	r6, [pc, #376]	@ (8007a48 <HAL_GPIO_Init+0x1fc>)
 80078d0:	42b0      	cmp	r0, r6
 80078d2:	d100      	bne.n	80078d6 <HAL_GPIO_Init+0x8a>
 80078d4:	e0a8      	b.n	8007a28 <HAL_GPIO_Init+0x1dc>
 80078d6:	4e5d      	ldr	r6, [pc, #372]	@ (8007a4c <HAL_GPIO_Init+0x200>)
 80078d8:	42b0      	cmp	r0, r6
 80078da:	d100      	bne.n	80078de <HAL_GPIO_Init+0x92>
 80078dc:	e09c      	b.n	8007a18 <HAL_GPIO_Init+0x1cc>
 80078de:	4e5c      	ldr	r6, [pc, #368]	@ (8007a50 <HAL_GPIO_Init+0x204>)
 80078e0:	42b0      	cmp	r0, r6
 80078e2:	d100      	bne.n	80078e6 <HAL_GPIO_Init+0x9a>
 80078e4:	e0a4      	b.n	8007a30 <HAL_GPIO_Init+0x1e4>
 80078e6:	4e5b      	ldr	r6, [pc, #364]	@ (8007a54 <HAL_GPIO_Init+0x208>)
 80078e8:	42b0      	cmp	r0, r6
 80078ea:	d100      	bne.n	80078ee <HAL_GPIO_Init+0xa2>
 80078ec:	e0a4      	b.n	8007a38 <HAL_GPIO_Init+0x1ec>
 80078ee:	2606      	movs	r6, #6
 80078f0:	40be      	lsls	r6, r7
 80078f2:	4331      	orrs	r1, r6
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80078f4:	2680      	movs	r6, #128	@ 0x80
        EXTI->EXTICR[position >> 2u] = temp;
 80078f6:	6611      	str	r1, [r2, #96]	@ 0x60
        temp &= ~(iocurrent);
 80078f8:	4651      	mov	r1, sl
        temp = EXTI->RTSR1;
 80078fa:	4a51      	ldr	r2, [pc, #324]	@ (8007a40 <HAL_GPIO_Init+0x1f4>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80078fc:	0376      	lsls	r6, r6, #13
        temp &= ~(iocurrent);
 80078fe:	43c9      	mvns	r1, r1
        temp = EXTI->RTSR1;
 8007900:	6812      	ldr	r2, [r2, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007902:	4235      	tst	r5, r6
 8007904:	d000      	beq.n	8007908 <HAL_GPIO_Init+0xbc>
 8007906:	e077      	b.n	80079f8 <HAL_GPIO_Init+0x1ac>
        temp &= ~(iocurrent);
 8007908:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 800790a:	4e4d      	ldr	r6, [pc, #308]	@ (8007a40 <HAL_GPIO_Init+0x1f4>)
 800790c:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
 800790e:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007910:	2680      	movs	r6, #128	@ 0x80
 8007912:	03b6      	lsls	r6, r6, #14
 8007914:	4235      	tst	r5, r6
 8007916:	d16c      	bne.n	80079f2 <HAL_GPIO_Init+0x1a6>
        temp &= ~(iocurrent);
 8007918:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 800791a:	4e49      	ldr	r6, [pc, #292]	@ (8007a40 <HAL_GPIO_Init+0x1f4>)
 800791c:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800791e:	2284      	movs	r2, #132	@ 0x84
 8007920:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007922:	03af      	lsls	r7, r5, #14
 8007924:	d462      	bmi.n	80079ec <HAL_GPIO_Init+0x1a0>
        temp &= ~(iocurrent);
 8007926:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8007928:	2784      	movs	r7, #132	@ 0x84
 800792a:	4e45      	ldr	r6, [pc, #276]	@ (8007a40 <HAL_GPIO_Init+0x1f4>)
 800792c:	51f2      	str	r2, [r6, r7]

        temp = EXTI->IMR1;
 800792e:	2280      	movs	r2, #128	@ 0x80
 8007930:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007932:	03ed      	lsls	r5, r5, #15
 8007934:	d456      	bmi.n	80079e4 <HAL_GPIO_Init+0x198>
        temp &= ~(iocurrent);
 8007936:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8007938:	2180      	movs	r1, #128	@ 0x80
 800793a:	4d41      	ldr	r5, [pc, #260]	@ (8007a40 <HAL_GPIO_Init+0x1f4>)
 800793c:	506a      	str	r2, [r5, r1]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800793e:	0022      	movs	r2, r4
      }
    }

    position++;
 8007940:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007942:	40da      	lsrs	r2, r3
 8007944:	d18e      	bne.n	8007864 <HAL_GPIO_Init+0x18>
  }
}
 8007946:	b003      	add	sp, #12
 8007948:	bcf0      	pop	{r4, r5, r6, r7}
 800794a:	46bb      	mov	fp, r7
 800794c:	46b2      	mov	sl, r6
 800794e:	46a9      	mov	r9, r5
 8007950:	46a0      	mov	r8, r4
 8007952:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8007954:	6881      	ldr	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8007956:	000e      	movs	r6, r1
 8007958:	9900      	ldr	r1, [sp, #0]
 800795a:	400e      	ands	r6, r1
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800795c:	4659      	mov	r1, fp
 800795e:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8007960:	46b1      	mov	r9, r6
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8007962:	000e      	movs	r6, r1
 8007964:	40be      	lsls	r6, r7
 8007966:	46b0      	mov	r8, r6
 8007968:	464e      	mov	r6, r9
 800796a:	4641      	mov	r1, r8
 800796c:	430e      	orrs	r6, r1
        GPIOx->OSPEEDR = temp;
 800796e:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8007970:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007972:	000e      	movs	r6, r1
 8007974:	4661      	mov	r1, ip
 8007976:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 8007978:	0929      	lsrs	r1, r5, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800797a:	46b0      	mov	r8, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 800797c:	000e      	movs	r6, r1
 800797e:	2101      	movs	r1, #1
 8007980:	400e      	ands	r6, r1
 8007982:	409e      	lsls	r6, r3
 8007984:	46b4      	mov	ip, r6
 8007986:	4646      	mov	r6, r8
 8007988:	4661      	mov	r1, ip
 800798a:	430e      	orrs	r6, r1
        GPIOx->OTYPER = temp;
 800798c:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 800798e:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8007990:	000e      	movs	r6, r1
 8007992:	9900      	ldr	r1, [sp, #0]
 8007994:	400e      	ands	r6, r1
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8007996:	4659      	mov	r1, fp
 8007998:	6889      	ldr	r1, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800799a:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800799c:	000e      	movs	r6, r1
 800799e:	40be      	lsls	r6, r7
 80079a0:	46b4      	mov	ip, r6
 80079a2:	4646      	mov	r6, r8
 80079a4:	4661      	mov	r1, ip
 80079a6:	430e      	orrs	r6, r1
        GPIOx->PUPDR = temp;
 80079a8:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80079aa:	2a02      	cmp	r2, #2
 80079ac:	d000      	beq.n	80079b0 <HAL_GPIO_Init+0x164>
 80079ae:	e770      	b.n	8007892 <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3u];
 80079b0:	08d9      	lsrs	r1, r3, #3
 80079b2:	0089      	lsls	r1, r1, #2
 80079b4:	468c      	mov	ip, r1
 80079b6:	4484      	add	ip, r0
 80079b8:	4661      	mov	r1, ip
 80079ba:	6a0e      	ldr	r6, [r1, #32]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 80079bc:	2107      	movs	r1, #7
 80079be:	4019      	ands	r1, r3
 80079c0:	0089      	lsls	r1, r1, #2
 80079c2:	4688      	mov	r8, r1
        temp = GPIOx->AFR[position >> 3u];
 80079c4:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 80079c6:	210f      	movs	r1, #15
 80079c8:	4646      	mov	r6, r8
 80079ca:	40b1      	lsls	r1, r6
 80079cc:	9e01      	ldr	r6, [sp, #4]
 80079ce:	438e      	bics	r6, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 80079d0:	4659      	mov	r1, fp
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 80079d2:	9601      	str	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 80079d4:	4646      	mov	r6, r8
 80079d6:	6909      	ldr	r1, [r1, #16]
 80079d8:	40b1      	lsls	r1, r6
 80079da:	9e01      	ldr	r6, [sp, #4]
 80079dc:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3u] = temp;
 80079de:	4661      	mov	r1, ip
 80079e0:	620e      	str	r6, [r1, #32]
 80079e2:	e756      	b.n	8007892 <HAL_GPIO_Init+0x46>
          temp |= iocurrent;
 80079e4:	4651      	mov	r1, sl
 80079e6:	4311      	orrs	r1, r2
 80079e8:	000a      	movs	r2, r1
 80079ea:	e7a5      	b.n	8007938 <HAL_GPIO_Init+0xec>
          temp |= iocurrent;
 80079ec:	4656      	mov	r6, sl
 80079ee:	4332      	orrs	r2, r6
 80079f0:	e79a      	b.n	8007928 <HAL_GPIO_Init+0xdc>
          temp |= iocurrent;
 80079f2:	4656      	mov	r6, sl
 80079f4:	4332      	orrs	r2, r6
 80079f6:	e790      	b.n	800791a <HAL_GPIO_Init+0xce>
          temp |= iocurrent;
 80079f8:	4656      	mov	r6, sl
 80079fa:	4332      	orrs	r2, r6
 80079fc:	e785      	b.n	800790a <HAL_GPIO_Init+0xbe>
 80079fe:	000e      	movs	r6, r1
        temp = GPIOx->PUPDR;
 8007a00:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8007a02:	4031      	ands	r1, r6
 8007a04:	4688      	mov	r8, r1
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8007a06:	4659      	mov	r1, fp
 8007a08:	6889      	ldr	r1, [r1, #8]
 8007a0a:	40b9      	lsls	r1, r7
 8007a0c:	468c      	mov	ip, r1
 8007a0e:	4641      	mov	r1, r8
 8007a10:	4666      	mov	r6, ip
 8007a12:	4331      	orrs	r1, r6
        GPIOx->PUPDR = temp;
 8007a14:	60c1      	str	r1, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a16:	e73c      	b.n	8007892 <HAL_GPIO_Init+0x46>
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8007a18:	2603      	movs	r6, #3
 8007a1a:	40be      	lsls	r6, r7
 8007a1c:	4331      	orrs	r1, r6
 8007a1e:	e769      	b.n	80078f4 <HAL_GPIO_Init+0xa8>
 8007a20:	2601      	movs	r6, #1
 8007a22:	40be      	lsls	r6, r7
 8007a24:	4331      	orrs	r1, r6
 8007a26:	e765      	b.n	80078f4 <HAL_GPIO_Init+0xa8>
 8007a28:	2602      	movs	r6, #2
 8007a2a:	40be      	lsls	r6, r7
 8007a2c:	4331      	orrs	r1, r6
 8007a2e:	e761      	b.n	80078f4 <HAL_GPIO_Init+0xa8>
 8007a30:	2604      	movs	r6, #4
 8007a32:	40be      	lsls	r6, r7
 8007a34:	4331      	orrs	r1, r6
 8007a36:	e75d      	b.n	80078f4 <HAL_GPIO_Init+0xa8>
 8007a38:	2605      	movs	r6, #5
 8007a3a:	40be      	lsls	r6, r7
 8007a3c:	4331      	orrs	r1, r6
 8007a3e:	e759      	b.n	80078f4 <HAL_GPIO_Init+0xa8>
 8007a40:	40021800 	.word	0x40021800
 8007a44:	50000400 	.word	0x50000400
 8007a48:	50000800 	.word	0x50000800
 8007a4c:	50000c00 	.word	0x50000c00
 8007a50:	50001000 	.word	0x50001000
 8007a54:	50001400 	.word	0x50001400

08007a58 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007a58:	2a00      	cmp	r2, #0
 8007a5a:	d001      	beq.n	8007a60 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007a5c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007a5e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007a60:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8007a62:	e7fc      	b.n	8007a5e <HAL_GPIO_WritePin+0x6>

08007a64 <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a64:	2380      	movs	r3, #128	@ 0x80
{
 8007a66:	b510      	push	{r4, lr}
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4298      	cmp	r0, r3
 8007a6c:	d00f      	beq.n	8007a8e <HAL_PWREx_ControlVoltageScaling+0x2a>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007a6e:	22c0      	movs	r2, #192	@ 0xc0
 8007a70:	491a      	ldr	r1, [pc, #104]	@ (8007adc <HAL_PWREx_ControlVoltageScaling+0x78>)
 8007a72:	00d2      	lsls	r2, r2, #3
 8007a74:	680b      	ldr	r3, [r1, #0]
 8007a76:	4013      	ands	r3, r2
 8007a78:	2280      	movs	r2, #128	@ 0x80
 8007a7a:	00d2      	lsls	r2, r2, #3
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d004      	beq.n	8007a8a <HAL_PWREx_ControlVoltageScaling+0x26>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007a80:	680b      	ldr	r3, [r1, #0]
 8007a82:	4817      	ldr	r0, [pc, #92]	@ (8007ae0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8007a84:	4003      	ands	r3, r0
 8007a86:	431a      	orrs	r2, r3
 8007a88:	600a      	str	r2, [r1, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 8007a8a:	2000      	movs	r0, #0
}
 8007a8c:	bd10      	pop	{r4, pc}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a8e:	22c0      	movs	r2, #192	@ 0xc0
 8007a90:	4c12      	ldr	r4, [pc, #72]	@ (8007adc <HAL_PWREx_ControlVoltageScaling+0x78>)
 8007a92:	00d2      	lsls	r2, r2, #3
 8007a94:	6823      	ldr	r3, [r4, #0]
 8007a96:	4013      	ands	r3, r2
 8007a98:	4283      	cmp	r3, r0
 8007a9a:	d0f6      	beq.n	8007a8a <HAL_PWREx_ControlVoltageScaling+0x26>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007a9c:	6823      	ldr	r3, [r4, #0]
 8007a9e:	4a10      	ldr	r2, [pc, #64]	@ (8007ae0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007aa0:	4910      	ldr	r1, [pc, #64]	@ (8007ae4 <HAL_PWREx_ControlVoltageScaling+0x80>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	4318      	orrs	r0, r3
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007aa6:	4b10      	ldr	r3, [pc, #64]	@ (8007ae8 <HAL_PWREx_ControlVoltageScaling+0x84>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007aa8:	6020      	str	r0, [r4, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007aaa:	6818      	ldr	r0, [r3, #0]
 8007aac:	2332      	movs	r3, #50	@ 0x32
 8007aae:	4358      	muls	r0, r3
 8007ab0:	f7f8 fb46 	bl	8000140 <__udivsi3>
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007ab4:	2280      	movs	r2, #128	@ 0x80
 8007ab6:	6963      	ldr	r3, [r4, #20]
 8007ab8:	00d2      	lsls	r2, r2, #3
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007aba:	3001      	adds	r0, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007abc:	4213      	tst	r3, r2
 8007abe:	d102      	bne.n	8007ac6 <HAL_PWREx_ControlVoltageScaling+0x62>
 8007ac0:	e005      	b.n	8007ace <HAL_PWREx_ControlVoltageScaling+0x6a>
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	d003      	beq.n	8007ace <HAL_PWREx_ControlVoltageScaling+0x6a>
 8007ac6:	6963      	ldr	r3, [r4, #20]
        wait_loop_index--;
 8007ac8:	3801      	subs	r0, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007aca:	4213      	tst	r3, r2
 8007acc:	d1f9      	bne.n	8007ac2 <HAL_PWREx_ControlVoltageScaling+0x5e>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007ace:	4b03      	ldr	r3, [pc, #12]	@ (8007adc <HAL_PWREx_ControlVoltageScaling+0x78>)
 8007ad0:	695b      	ldr	r3, [r3, #20]
 8007ad2:	055b      	lsls	r3, r3, #21
 8007ad4:	d5d9      	bpl.n	8007a8a <HAL_PWREx_ControlVoltageScaling+0x26>
        return HAL_TIMEOUT;
 8007ad6:	2003      	movs	r0, #3
 8007ad8:	e7d8      	b.n	8007a8c <HAL_PWREx_ControlVoltageScaling+0x28>
 8007ada:	46c0      	nop			@ (mov r8, r8)
 8007adc:	40007000 	.word	0x40007000
 8007ae0:	fffff9ff 	.word	0xfffff9ff
 8007ae4:	000f4240 	.word	0x000f4240
 8007ae8:	20000004 	.word	0x20000004

08007aec <HAL_PWREx_GetVoltageRange>:
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8007aec:	4b02      	ldr	r3, [pc, #8]	@ (8007af8 <HAL_PWREx_GetVoltageRange+0xc>)
 8007aee:	6818      	ldr	r0, [r3, #0]
 8007af0:	23c0      	movs	r3, #192	@ 0xc0
 8007af2:	00db      	lsls	r3, r3, #3
 8007af4:	4018      	ands	r0, r3
}
 8007af6:	4770      	bx	lr
 8007af8:	40007000 	.word	0x40007000

08007afc <RCC_SetFlashLatencyFromMSIRange>:
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007afc:	2380      	movs	r3, #128	@ 0x80
{
 8007afe:	b530      	push	{r4, r5, lr}
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007b00:	4d1e      	ldr	r5, [pc, #120]	@ (8007b7c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8007b02:	055b      	lsls	r3, r3, #21
 8007b04:	6daa      	ldr	r2, [r5, #88]	@ 0x58
{
 8007b06:	0004      	movs	r4, r0
 8007b08:	b083      	sub	sp, #12
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007b0a:	421a      	tst	r2, r3
 8007b0c:	d016      	beq.n	8007b3c <RCC_SetFlashLatencyFromMSIRange+0x40>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007b0e:	f7ff ffed 	bl	8007aec <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007b12:	2380      	movs	r3, #128	@ 0x80
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	4298      	cmp	r0, r3
 8007b18:	d021      	beq.n	8007b5e <RCC_SetFlashLatencyFromMSIRange+0x62>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007b1a:	2102      	movs	r1, #2
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 8007b1c:	2c7f      	cmp	r4, #127	@ 0x7f
 8007b1e:	d929      	bls.n	8007b74 <RCC_SetFlashLatencyFromMSIRange+0x78>
      latency = FLASH_LATENCY_0; /* 0WS */
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007b20:	2007      	movs	r0, #7
 8007b22:	4a17      	ldr	r2, [pc, #92]	@ (8007b80 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8007b24:	6813      	ldr	r3, [r2, #0]
 8007b26:	4383      	bics	r3, r0
 8007b28:	430b      	orrs	r3, r1
 8007b2a:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8007b2c:	6813      	ldr	r3, [r2, #0]
 8007b2e:	4018      	ands	r0, r3
 8007b30:	1a40      	subs	r0, r0, r1
 8007b32:	1e43      	subs	r3, r0, #1
 8007b34:	4198      	sbcs	r0, r3
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8007b36:	b2c0      	uxtb	r0, r0
 8007b38:	b003      	add	sp, #12
 8007b3a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8007b3c:	6daa      	ldr	r2, [r5, #88]	@ 0x58
 8007b3e:	431a      	orrs	r2, r3
 8007b40:	65aa      	str	r2, [r5, #88]	@ 0x58
 8007b42:	6daa      	ldr	r2, [r5, #88]	@ 0x58
 8007b44:	4013      	ands	r3, r2
 8007b46:	9301      	str	r3, [sp, #4]
 8007b48:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8007b4a:	f7ff ffcf 	bl	8007aec <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8007b4e:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8007b50:	4a0c      	ldr	r2, [pc, #48]	@ (8007b84 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8007b52:	4013      	ands	r3, r2
 8007b54:	65ab      	str	r3, [r5, #88]	@ 0x58
  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007b56:	2380      	movs	r3, #128	@ 0x80
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	4298      	cmp	r0, r3
 8007b5c:	d1dd      	bne.n	8007b1a <RCC_SetFlashLatencyFromMSIRange+0x1e>
      latency = FLASH_LATENCY_0; /* 0WS */
 8007b5e:	2100      	movs	r1, #0
    if (msirange > RCC_MSIRANGE_8)
 8007b60:	2c80      	cmp	r4, #128	@ 0x80
 8007b62:	d9dd      	bls.n	8007b20 <RCC_SetFlashLatencyFromMSIRange+0x24>
        latency = FLASH_LATENCY_2; /* 2WS */
 8007b64:	3102      	adds	r1, #2
      if (msirange > RCC_MSIRANGE_11)
 8007b66:	2cb0      	cmp	r4, #176	@ 0xb0
 8007b68:	d8da      	bhi.n	8007b20 <RCC_SetFlashLatencyFromMSIRange+0x24>
      else if (msirange > RCC_MSIRANGE_9)
 8007b6a:	318e      	adds	r1, #142	@ 0x8e
 8007b6c:	42a1      	cmp	r1, r4
 8007b6e:	4189      	sbcs	r1, r1
 8007b70:	4249      	negs	r1, r1
 8007b72:	e7d5      	b.n	8007b20 <RCC_SetFlashLatencyFromMSIRange+0x24>
    else if (msirange == RCC_MSIRANGE_7)
 8007b74:	3c70      	subs	r4, #112	@ 0x70
 8007b76:	4261      	negs	r1, r4
 8007b78:	4161      	adcs	r1, r4
 8007b7a:	e7d1      	b.n	8007b20 <RCC_SetFlashLatencyFromMSIRange+0x24>
 8007b7c:	40021000 	.word	0x40021000
 8007b80:	40022000 	.word	0x40022000
 8007b84:	efffffff 	.word	0xefffffff

08007b88 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b88:	2238      	movs	r2, #56	@ 0x38
 8007b8a:	0011      	movs	r1, r2
 8007b8c:	482c      	ldr	r0, [pc, #176]	@ (8007c40 <HAL_RCC_GetSysClockFreq+0xb8>)
{
 8007b8e:	b510      	push	{r4, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b90:	6883      	ldr	r3, [r0, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007b92:	68c0      	ldr	r0, [r0, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b94:	4019      	ands	r1, r3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007b96:	421a      	tst	r2, r3
 8007b98:	d00a      	beq.n	8007bb0 <HAL_RCC_GetSysClockFreq+0x28>
 8007b9a:	2918      	cmp	r1, #24
 8007b9c:	d003      	beq.n	8007ba6 <HAL_RCC_GetSysClockFreq+0x1e>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007b9e:	2908      	cmp	r1, #8
 8007ba0:	d13a      	bne.n	8007c18 <HAL_RCC_GetSysClockFreq+0x90>
    sysclockfreq = HSI_VALUE;
 8007ba2:	4828      	ldr	r0, [pc, #160]	@ (8007c44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007ba4:	e030      	b.n	8007c08 <HAL_RCC_GetSysClockFreq+0x80>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	4003      	ands	r3, r0
  uint32_t msirange = 0U;
 8007baa:	2000      	movs	r0, #0
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d113      	bne.n	8007bd8 <HAL_RCC_GetSysClockFreq+0x50>
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007bb0:	4a23      	ldr	r2, [pc, #140]	@ (8007c40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007bb2:	6813      	ldr	r3, [r2, #0]
 8007bb4:	071b      	lsls	r3, r3, #28
 8007bb6:	d528      	bpl.n	8007c0a <HAL_RCC_GetSysClockFreq+0x82>
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007bb8:	6813      	ldr	r3, [r2, #0]
 8007bba:	061b      	lsls	r3, r3, #24
 8007bbc:	0f1b      	lsrs	r3, r3, #28
      msirange = 0U;
 8007bbe:	200b      	movs	r0, #11
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	4298      	cmp	r0, r3
 8007bc4:	4152      	adcs	r2, r2
 8007bc6:	4252      	negs	r2, r2
 8007bc8:	4013      	ands	r3, r2
    msirange = MSIRangeTable[msirange];
 8007bca:	4a1f      	ldr	r2, [pc, #124]	@ (8007c48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	5898      	ldr	r0, [r3, r2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007bd0:	2900      	cmp	r1, #0
 8007bd2:	d019      	beq.n	8007c08 <HAL_RCC_GetSysClockFreq+0x80>
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007bd4:	2918      	cmp	r1, #24
 8007bd6:	d130      	bne.n	8007c3a <HAL_RCC_GetSysClockFreq+0xb2>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007bd8:	2303      	movs	r3, #3
 8007bda:	4a19      	ldr	r2, [pc, #100]	@ (8007c40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007bdc:	68d1      	ldr	r1, [r2, #12]
 8007bde:	400b      	ands	r3, r1
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007be0:	68d1      	ldr	r1, [r2, #12]
 8007be2:	0649      	lsls	r1, r1, #25
 8007be4:	0f49      	lsrs	r1, r1, #29
 8007be6:	3101      	adds	r1, #1
    switch (pllsource)
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d019      	beq.n	8007c20 <HAL_RCC_GetSysClockFreq+0x98>
 8007bec:	2b03      	cmp	r3, #3
 8007bee:	d011      	beq.n	8007c14 <HAL_RCC_GetSysClockFreq+0x8c>
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 8007bf0:	4a13      	ldr	r2, [pc, #76]	@ (8007c40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007bf2:	68d3      	ldr	r3, [r2, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8007bf4:	68d4      	ldr	r4, [r2, #12]
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 8007bf6:	045b      	lsls	r3, r3, #17
 8007bf8:	0e5b      	lsrs	r3, r3, #25
 8007bfa:	4358      	muls	r0, r3
 8007bfc:	f7f8 faa0 	bl	8000140 <__udivsi3>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8007c00:	0f61      	lsrs	r1, r4, #29
 8007c02:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8007c04:	f7f8 fa9c 	bl	8000140 <__udivsi3>
}
 8007c08:	bd10      	pop	{r4, pc}
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 8007c0a:	2394      	movs	r3, #148	@ 0x94
 8007c0c:	58d3      	ldr	r3, [r2, r3]
 8007c0e:	051b      	lsls	r3, r3, #20
 8007c10:	0f1b      	lsrs	r3, r3, #28
 8007c12:	e7d4      	b.n	8007bbe <HAL_RCC_GetSysClockFreq+0x36>
    switch (pllsource)
 8007c14:	480d      	ldr	r0, [pc, #52]	@ (8007c4c <HAL_RCC_GetSysClockFreq+0xc4>)
 8007c16:	e7eb      	b.n	8007bf0 <HAL_RCC_GetSysClockFreq+0x68>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007c18:	2910      	cmp	r1, #16
 8007c1a:	d103      	bne.n	8007c24 <HAL_RCC_GetSysClockFreq+0x9c>
    sysclockfreq = HSE_VALUE;
 8007c1c:	480b      	ldr	r0, [pc, #44]	@ (8007c4c <HAL_RCC_GetSysClockFreq+0xc4>)
 8007c1e:	e7f3      	b.n	8007c08 <HAL_RCC_GetSysClockFreq+0x80>
        pllsourcefreq = HSI_VALUE;
 8007c20:	4808      	ldr	r0, [pc, #32]	@ (8007c44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007c22:	e7e5      	b.n	8007bf0 <HAL_RCC_GetSysClockFreq+0x68>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007c24:	2920      	cmp	r1, #32
 8007c26:	d102      	bne.n	8007c2e <HAL_RCC_GetSysClockFreq+0xa6>
    sysclockfreq = LSI_VALUE;
 8007c28:	20fa      	movs	r0, #250	@ 0xfa
 8007c2a:	01c0      	lsls	r0, r0, #7
 8007c2c:	e7ec      	b.n	8007c08 <HAL_RCC_GetSysClockFreq+0x80>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007c2e:	3928      	subs	r1, #40	@ 0x28
 8007c30:	0008      	movs	r0, r1
 8007c32:	4243      	negs	r3, r0
 8007c34:	4158      	adcs	r0, r3
 8007c36:	03c0      	lsls	r0, r0, #15
 8007c38:	e7e6      	b.n	8007c08 <HAL_RCC_GetSysClockFreq+0x80>
 8007c3a:	2000      	movs	r0, #0
  return sysclockfreq;
 8007c3c:	e7e4      	b.n	8007c08 <HAL_RCC_GetSysClockFreq+0x80>
 8007c3e:	46c0      	nop			@ (mov r8, r8)
 8007c40:	40021000 	.word	0x40021000
 8007c44:	00f42400 	.word	0x00f42400
 8007c48:	0800ee20 	.word	0x0800ee20
 8007c4c:	003d0900 	.word	0x003d0900

08007c50 <HAL_RCC_OscConfig>:
{
 8007c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c52:	4646      	mov	r6, r8
 8007c54:	46d6      	mov	lr, sl
 8007c56:	464f      	mov	r7, r9
 8007c58:	b5c0      	push	{r6, r7, lr}
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007c5a:	2603      	movs	r6, #3
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c5c:	2538      	movs	r5, #56	@ 0x38
 8007c5e:	4bcc      	ldr	r3, [pc, #816]	@ (8007f90 <HAL_RCC_OscConfig+0x340>)
{
 8007c60:	0004      	movs	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c62:	689a      	ldr	r2, [r3, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007c64:	68db      	ldr	r3, [r3, #12]
{
 8007c66:	b082      	sub	sp, #8
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007c68:	401e      	ands	r6, r3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007c6a:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c6c:	4015      	ands	r5, r2
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007c6e:	06da      	lsls	r2, r3, #27
 8007c70:	d541      	bpl.n	8007cf6 <HAL_RCC_OscConfig+0xa6>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007c72:	2d00      	cmp	r5, #0
 8007c74:	d000      	beq.n	8007c78 <HAL_RCC_OscConfig+0x28>
 8007c76:	e15d      	b.n	8007f34 <HAL_RCC_OscConfig+0x2e4>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007c78:	4bc5      	ldr	r3, [pc, #788]	@ (8007f90 <HAL_RCC_OscConfig+0x340>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	079b      	lsls	r3, r3, #30
 8007c7e:	d503      	bpl.n	8007c88 <HAL_RCC_OscConfig+0x38>
 8007c80:	69e3      	ldr	r3, [r4, #28]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d100      	bne.n	8007c88 <HAL_RCC_OscConfig+0x38>
 8007c86:	e1c0      	b.n	800800a <HAL_RCC_OscConfig+0x3ba>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007c88:	4bc1      	ldr	r3, [pc, #772]	@ (8007f90 <HAL_RCC_OscConfig+0x340>)
 8007c8a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	0712      	lsls	r2, r2, #28
 8007c90:	d500      	bpl.n	8007c94 <HAL_RCC_OscConfig+0x44>
 8007c92:	e191      	b.n	8007fb8 <HAL_RCC_OscConfig+0x368>
 8007c94:	2294      	movs	r2, #148	@ 0x94
 8007c96:	589a      	ldr	r2, [r3, r2]
 8007c98:	23f0      	movs	r3, #240	@ 0xf0
 8007c9a:	0912      	lsrs	r2, r2, #4
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	4298      	cmp	r0, r3
 8007ca0:	d900      	bls.n	8007ca4 <HAL_RCC_OscConfig+0x54>
 8007ca2:	e25a      	b.n	800815a <HAL_RCC_OscConfig+0x50a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007ca4:	2108      	movs	r1, #8
 8007ca6:	4bba      	ldr	r3, [pc, #744]	@ (8007f90 <HAL_RCC_OscConfig+0x340>)
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007ca8:	4fba      	ldr	r7, [pc, #744]	@ (8007f94 <HAL_RCC_OscConfig+0x344>)
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	430a      	orrs	r2, r1
 8007cae:	601a      	str	r2, [r3, #0]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	31e8      	adds	r1, #232	@ 0xe8
 8007cb4:	438a      	bics	r2, r1
 8007cb6:	4302      	orrs	r2, r0
 8007cb8:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007cba:	6859      	ldr	r1, [r3, #4]
 8007cbc:	6a22      	ldr	r2, [r4, #32]
 8007cbe:	4039      	ands	r1, r7
 8007cc0:	0212      	lsls	r2, r2, #8
 8007cc2:	430a      	orrs	r2, r1
 8007cc4:	605a      	str	r2, [r3, #4]
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007cc6:	2d00      	cmp	r5, #0
 8007cc8:	d100      	bne.n	8007ccc <HAL_RCC_OscConfig+0x7c>
 8007cca:	e273      	b.n	80081b4 <HAL_RCC_OscConfig+0x564>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8007ccc:	f7ff ff5c 	bl	8007b88 <HAL_RCC_GetSysClockFreq>
 8007cd0:	4baf      	ldr	r3, [pc, #700]	@ (8007f90 <HAL_RCC_OscConfig+0x340>)
 8007cd2:	4ab1      	ldr	r2, [pc, #708]	@ (8007f98 <HAL_RCC_OscConfig+0x348>)
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	49b1      	ldr	r1, [pc, #708]	@ (8007f9c <HAL_RCC_OscConfig+0x34c>)
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007cd8:	051b      	lsls	r3, r3, #20
 8007cda:	0f1b      	lsrs	r3, r3, #28
 8007cdc:	5cd2      	ldrb	r2, [r2, r3]
 8007cde:	231f      	movs	r3, #31
 8007ce0:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8007ce2:	40d8      	lsrs	r0, r3
        status = HAL_InitTick(uwTickPrio);
 8007ce4:	4bae      	ldr	r3, [pc, #696]	@ (8007fa0 <HAL_RCC_OscConfig+0x350>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8007ce6:	6008      	str	r0, [r1, #0]
        status = HAL_InitTick(uwTickPrio);
 8007ce8:	6818      	ldr	r0, [r3, #0]
 8007cea:	f7ff fae1 	bl	80072b0 <HAL_InitTick>
        if (status != HAL_OK)
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	d000      	beq.n	8007cf4 <HAL_RCC_OscConfig+0xa4>
 8007cf2:	e119      	b.n	8007f28 <HAL_RCC_OscConfig+0x2d8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cf4:	6823      	ldr	r3, [r4, #0]
 8007cf6:	07da      	lsls	r2, r3, #31
 8007cf8:	d52b      	bpl.n	8007d52 <HAL_RCC_OscConfig+0x102>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007cfa:	2d10      	cmp	r5, #16
 8007cfc:	d100      	bne.n	8007d00 <HAL_RCC_OscConfig+0xb0>
 8007cfe:	e17b      	b.n	8007ff8 <HAL_RCC_OscConfig+0x3a8>
 8007d00:	2d18      	cmp	r5, #24
 8007d02:	d100      	bne.n	8007d06 <HAL_RCC_OscConfig+0xb6>
 8007d04:	e175      	b.n	8007ff2 <HAL_RCC_OscConfig+0x3a2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d06:	2280      	movs	r2, #128	@ 0x80
 8007d08:	6863      	ldr	r3, [r4, #4]
 8007d0a:	0252      	lsls	r2, r2, #9
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d100      	bne.n	8007d12 <HAL_RCC_OscConfig+0xc2>
 8007d10:	e195      	b.n	800803e <HAL_RCC_OscConfig+0x3ee>
 8007d12:	22a0      	movs	r2, #160	@ 0xa0
 8007d14:	02d2      	lsls	r2, r2, #11
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d100      	bne.n	8007d1c <HAL_RCC_OscConfig+0xcc>
 8007d1a:	e190      	b.n	800803e <HAL_RCC_OscConfig+0x3ee>
 8007d1c:	4f9c      	ldr	r7, [pc, #624]	@ (8007f90 <HAL_RCC_OscConfig+0x340>)
 8007d1e:	49a1      	ldr	r1, [pc, #644]	@ (8007fa4 <HAL_RCC_OscConfig+0x354>)
 8007d20:	683a      	ldr	r2, [r7, #0]
 8007d22:	400a      	ands	r2, r1
 8007d24:	603a      	str	r2, [r7, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d000      	beq.n	8007d2c <HAL_RCC_OscConfig+0xdc>
 8007d2a:	e18c      	b.n	8008046 <HAL_RCC_OscConfig+0x3f6>
        tickstart = HAL_GetTick();
 8007d2c:	f7ff fafe 	bl	800732c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007d30:	2380      	movs	r3, #128	@ 0x80
 8007d32:	029b      	lsls	r3, r3, #10
        tickstart = HAL_GetTick();
 8007d34:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007d36:	4699      	mov	r9, r3
 8007d38:	e006      	b.n	8007d48 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8007d3a:	f7ff faf7 	bl	800732c <HAL_GetTick>
 8007d3e:	4643      	mov	r3, r8
 8007d40:	1ac0      	subs	r0, r0, r3
 8007d42:	2864      	cmp	r0, #100	@ 0x64
 8007d44:	d900      	bls.n	8007d48 <HAL_RCC_OscConfig+0xf8>
 8007d46:	e1b5      	b.n	80080b4 <HAL_RCC_OscConfig+0x464>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007d48:	464a      	mov	r2, r9
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	4213      	tst	r3, r2
 8007d4e:	d1f4      	bne.n	8007d3a <HAL_RCC_OscConfig+0xea>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d50:	6823      	ldr	r3, [r4, #0]
 8007d52:	079a      	lsls	r2, r3, #30
 8007d54:	d526      	bpl.n	8007da4 <HAL_RCC_OscConfig+0x154>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007d56:	2d08      	cmp	r5, #8
 8007d58:	d100      	bne.n	8007d5c <HAL_RCC_OscConfig+0x10c>
 8007d5a:	e18c      	b.n	8008076 <HAL_RCC_OscConfig+0x426>
 8007d5c:	2d18      	cmp	r5, #24
 8007d5e:	d100      	bne.n	8007d62 <HAL_RCC_OscConfig+0x112>
 8007d60:	e186      	b.n	8008070 <HAL_RCC_OscConfig+0x420>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007d62:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8007d64:	4d8a      	ldr	r5, [pc, #552]	@ (8007f90 <HAL_RCC_OscConfig+0x340>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d100      	bne.n	8007d6c <HAL_RCC_OscConfig+0x11c>
 8007d6a:	e1a5      	b.n	80080b8 <HAL_RCC_OscConfig+0x468>
        __HAL_RCC_HSI_ENABLE();
 8007d6c:	2380      	movs	r3, #128	@ 0x80
 8007d6e:	682a      	ldr	r2, [r5, #0]
 8007d70:	005b      	lsls	r3, r3, #1
 8007d72:	4313      	orrs	r3, r2
 8007d74:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007d76:	f7ff fad9 	bl	800732c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d7a:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8007d7c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d7e:	00ff      	lsls	r7, r7, #3
 8007d80:	e005      	b.n	8007d8e <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8007d82:	f7ff fad3 	bl	800732c <HAL_GetTick>
 8007d86:	1b80      	subs	r0, r0, r6
 8007d88:	2802      	cmp	r0, #2
 8007d8a:	d900      	bls.n	8007d8e <HAL_RCC_OscConfig+0x13e>
 8007d8c:	e192      	b.n	80080b4 <HAL_RCC_OscConfig+0x464>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d8e:	682b      	ldr	r3, [r5, #0]
 8007d90:	423b      	tst	r3, r7
 8007d92:	d0f6      	beq.n	8007d82 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d94:	686a      	ldr	r2, [r5, #4]
 8007d96:	6923      	ldr	r3, [r4, #16]
 8007d98:	4983      	ldr	r1, [pc, #524]	@ (8007fa8 <HAL_RCC_OscConfig+0x358>)
 8007d9a:	061b      	lsls	r3, r3, #24
 8007d9c:	400a      	ands	r2, r1
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007da2:	6823      	ldr	r3, [r4, #0]
 8007da4:	071a      	lsls	r2, r3, #28
 8007da6:	d525      	bpl.n	8007df4 <HAL_RCC_OscConfig+0x1a4>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007da8:	6963      	ldr	r3, [r4, #20]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d100      	bne.n	8007db0 <HAL_RCC_OscConfig+0x160>
 8007dae:	e12e      	b.n	800800e <HAL_RCC_OscConfig+0x3be>
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8007db0:	69a3      	ldr	r3, [r4, #24]
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8007db2:	2294      	movs	r2, #148	@ 0x94
 8007db4:	4976      	ldr	r1, [pc, #472]	@ (8007f90 <HAL_RCC_OscConfig+0x340>)
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d000      	beq.n	8007dbc <HAL_RCC_OscConfig+0x16c>
 8007dba:	e191      	b.n	80080e0 <HAL_RCC_OscConfig+0x490>
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8007dbc:	2004      	movs	r0, #4
 8007dbe:	588b      	ldr	r3, [r1, r2]
 8007dc0:	4383      	bics	r3, r0
 8007dc2:	508b      	str	r3, [r1, r2]
      __HAL_RCC_LSI_ENABLE();
 8007dc4:	2294      	movs	r2, #148	@ 0x94
 8007dc6:	2101      	movs	r1, #1
 8007dc8:	4d71      	ldr	r5, [pc, #452]	@ (8007f90 <HAL_RCC_OscConfig+0x340>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007dca:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8007dcc:	58ab      	ldr	r3, [r5, r2]
 8007dce:	430b      	orrs	r3, r1
 8007dd0:	50ab      	str	r3, [r5, r2]
      tickstart = HAL_GetTick();
 8007dd2:	f7ff faab 	bl	800732c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007dd6:	2394      	movs	r3, #148	@ 0x94
      tickstart = HAL_GetTick();
 8007dd8:	0006      	movs	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007dda:	4698      	mov	r8, r3
 8007ddc:	e005      	b.n	8007dea <HAL_RCC_OscConfig+0x19a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007dde:	f7ff faa5 	bl	800732c <HAL_GetTick>
 8007de2:	1b80      	subs	r0, r0, r6
 8007de4:	2811      	cmp	r0, #17
 8007de6:	d900      	bls.n	8007dea <HAL_RCC_OscConfig+0x19a>
 8007de8:	e164      	b.n	80080b4 <HAL_RCC_OscConfig+0x464>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007dea:	4643      	mov	r3, r8
 8007dec:	58eb      	ldr	r3, [r5, r3]
 8007dee:	421f      	tst	r7, r3
 8007df0:	d0f5      	beq.n	8007dde <HAL_RCC_OscConfig+0x18e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007df2:	6823      	ldr	r3, [r4, #0]
 8007df4:	075a      	lsls	r2, r3, #29
 8007df6:	d559      	bpl.n	8007eac <HAL_RCC_OscConfig+0x25c>
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8007df8:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8007dfa:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8007dfc:	4b64      	ldr	r3, [pc, #400]	@ (8007f90 <HAL_RCC_OscConfig+0x340>)
 8007dfe:	0552      	lsls	r2, r2, #21
 8007e00:	6d99      	ldr	r1, [r3, #88]	@ 0x58
    FlagStatus       pwrclkchanged = RESET;
 8007e02:	4682      	mov	sl, r0
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8007e04:	4211      	tst	r1, r2
 8007e06:	d108      	bne.n	8007e1a <HAL_RCC_OscConfig+0x1ca>
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e08:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8007e0a:	4311      	orrs	r1, r2
 8007e0c:	6599      	str	r1, [r3, #88]	@ 0x58
 8007e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e10:	4013      	ands	r3, r2
 8007e12:	9301      	str	r3, [sp, #4]
 8007e14:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007e16:	2301      	movs	r3, #1
 8007e18:	469a      	mov	sl, r3
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e1a:	2780      	movs	r7, #128	@ 0x80
 8007e1c:	4e63      	ldr	r6, [pc, #396]	@ (8007fac <HAL_RCC_OscConfig+0x35c>)
 8007e1e:	007f      	lsls	r7, r7, #1
 8007e20:	6833      	ldr	r3, [r6, #0]
 8007e22:	423b      	tst	r3, r7
 8007e24:	d100      	bne.n	8007e28 <HAL_RCC_OscConfig+0x1d8>
 8007e26:	e136      	b.n	8008096 <HAL_RCC_OscConfig+0x446>
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8007e28:	2201      	movs	r2, #1
 8007e2a:	68a3      	ldr	r3, [r4, #8]
 8007e2c:	421a      	tst	r2, r3
 8007e2e:	d100      	bne.n	8007e32 <HAL_RCC_OscConfig+0x1e2>
 8007e30:	e15b      	b.n	80080ea <HAL_RCC_OscConfig+0x49a>
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8007e32:	2004      	movs	r0, #4
 8007e34:	4218      	tst	r0, r3
 8007e36:	d100      	bne.n	8007e3a <HAL_RCC_OscConfig+0x1ea>
 8007e38:	e1c3      	b.n	80081c2 <HAL_RCC_OscConfig+0x572>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007e3a:	2390      	movs	r3, #144	@ 0x90
 8007e3c:	4954      	ldr	r1, [pc, #336]	@ (8007f90 <HAL_RCC_OscConfig+0x340>)
 8007e3e:	58ce      	ldr	r6, [r1, r3]
 8007e40:	4330      	orrs	r0, r6
 8007e42:	50c8      	str	r0, [r1, r3]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007e44:	58c8      	ldr	r0, [r1, r3]
 8007e46:	4302      	orrs	r2, r0
 8007e48:	50ca      	str	r2, [r1, r3]
      tickstart = HAL_GetTick();
 8007e4a:	f7ff fa6f 	bl	800732c <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007e4e:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8007e50:	0006      	movs	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007e52:	2790      	movs	r7, #144	@ 0x90
 8007e54:	4699      	mov	r9, r3
 8007e56:	4d4e      	ldr	r5, [pc, #312]	@ (8007f90 <HAL_RCC_OscConfig+0x340>)
 8007e58:	e006      	b.n	8007e68 <HAL_RCC_OscConfig+0x218>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e5a:	f7ff fa67 	bl	800732c <HAL_GetTick>
 8007e5e:	4b54      	ldr	r3, [pc, #336]	@ (8007fb0 <HAL_RCC_OscConfig+0x360>)
 8007e60:	1b80      	subs	r0, r0, r6
 8007e62:	4298      	cmp	r0, r3
 8007e64:	d900      	bls.n	8007e68 <HAL_RCC_OscConfig+0x218>
 8007e66:	e125      	b.n	80080b4 <HAL_RCC_OscConfig+0x464>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007e68:	464a      	mov	r2, r9
 8007e6a:	59eb      	ldr	r3, [r5, r7]
 8007e6c:	421a      	tst	r2, r3
 8007e6e:	d0f4      	beq.n	8007e5a <HAL_RCC_OscConfig+0x20a>
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8007e70:	2380      	movs	r3, #128	@ 0x80
 8007e72:	68a2      	ldr	r2, [r4, #8]
 8007e74:	421a      	tst	r2, r3
 8007e76:	d100      	bne.n	8007e7a <HAL_RCC_OscConfig+0x22a>
 8007e78:	e1f0      	b.n	800825c <HAL_RCC_OscConfig+0x60c>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007e7a:	59ea      	ldr	r2, [r5, r7]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	51eb      	str	r3, [r5, r7]
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007e80:	2780      	movs	r7, #128	@ 0x80
 8007e82:	4b43      	ldr	r3, [pc, #268]	@ (8007f90 <HAL_RCC_OscConfig+0x340>)
 8007e84:	2590      	movs	r5, #144	@ 0x90
 8007e86:	4699      	mov	r9, r3
 8007e88:	013f      	lsls	r7, r7, #4
 8007e8a:	e006      	b.n	8007e9a <HAL_RCC_OscConfig+0x24a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e8c:	f7ff fa4e 	bl	800732c <HAL_GetTick>
 8007e90:	4b47      	ldr	r3, [pc, #284]	@ (8007fb0 <HAL_RCC_OscConfig+0x360>)
 8007e92:	1b80      	subs	r0, r0, r6
 8007e94:	4298      	cmp	r0, r3
 8007e96:	d900      	bls.n	8007e9a <HAL_RCC_OscConfig+0x24a>
 8007e98:	e10c      	b.n	80080b4 <HAL_RCC_OscConfig+0x464>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007e9a:	464b      	mov	r3, r9
 8007e9c:	595b      	ldr	r3, [r3, r5]
 8007e9e:	423b      	tst	r3, r7
 8007ea0:	d0f4      	beq.n	8007e8c <HAL_RCC_OscConfig+0x23c>
    if (pwrclkchanged == SET)
 8007ea2:	4653      	mov	r3, sl
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d100      	bne.n	8007eaa <HAL_RCC_OscConfig+0x25a>
 8007ea8:	e1d1      	b.n	800824e <HAL_RCC_OscConfig+0x5fe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007eaa:	6823      	ldr	r3, [r4, #0]
 8007eac:	069b      	lsls	r3, r3, #26
 8007eae:	d51a      	bpl.n	8007ee6 <HAL_RCC_OscConfig+0x296>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007eb0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
      __HAL_RCC_HSI48_ENABLE();
 8007eb2:	2298      	movs	r2, #152	@ 0x98
 8007eb4:	4d36      	ldr	r5, [pc, #216]	@ (8007f90 <HAL_RCC_OscConfig+0x340>)
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d100      	bne.n	8007ebc <HAL_RCC_OscConfig+0x26c>
 8007eba:	e166      	b.n	800818a <HAL_RCC_OscConfig+0x53a>
      __HAL_RCC_HSI48_ENABLE();
 8007ebc:	2101      	movs	r1, #1
 8007ebe:	58ab      	ldr	r3, [r5, r2]
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007ec0:	2702      	movs	r7, #2
      __HAL_RCC_HSI48_ENABLE();
 8007ec2:	430b      	orrs	r3, r1
 8007ec4:	50ab      	str	r3, [r5, r2]
      tickstart = HAL_GetTick();
 8007ec6:	f7ff fa31 	bl	800732c <HAL_GetTick>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007eca:	2398      	movs	r3, #152	@ 0x98
      tickstart = HAL_GetTick();
 8007ecc:	0006      	movs	r6, r0
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007ece:	4698      	mov	r8, r3
 8007ed0:	e005      	b.n	8007ede <HAL_RCC_OscConfig+0x28e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007ed2:	f7ff fa2b 	bl	800732c <HAL_GetTick>
 8007ed6:	1b80      	subs	r0, r0, r6
 8007ed8:	2802      	cmp	r0, #2
 8007eda:	d900      	bls.n	8007ede <HAL_RCC_OscConfig+0x28e>
 8007edc:	e0ea      	b.n	80080b4 <HAL_RCC_OscConfig+0x464>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007ede:	4643      	mov	r3, r8
 8007ee0:	58eb      	ldr	r3, [r5, r3]
 8007ee2:	421f      	tst	r7, r3
 8007ee4:	d0f5      	beq.n	8007ed2 <HAL_RCC_OscConfig+0x282>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007ee6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d01c      	beq.n	8007f26 <HAL_RCC_OscConfig+0x2d6>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007eec:	2238      	movs	r2, #56	@ 0x38
 8007eee:	4d28      	ldr	r5, [pc, #160]	@ (8007f90 <HAL_RCC_OscConfig+0x340>)
 8007ef0:	68a9      	ldr	r1, [r5, #8]
 8007ef2:	400a      	ands	r2, r1
 8007ef4:	2a18      	cmp	r2, #24
 8007ef6:	d100      	bne.n	8007efa <HAL_RCC_OscConfig+0x2aa>
 8007ef8:	e087      	b.n	800800a <HAL_RCC_OscConfig+0x3ba>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007efa:	2b02      	cmp	r3, #2
 8007efc:	d100      	bne.n	8007f00 <HAL_RCC_OscConfig+0x2b0>
 8007efe:	e166      	b.n	80081ce <HAL_RCC_OscConfig+0x57e>
        __HAL_RCC_PLL_DISABLE();
 8007f00:	682b      	ldr	r3, [r5, #0]
 8007f02:	4a2c      	ldr	r2, [pc, #176]	@ (8007fb4 <HAL_RCC_OscConfig+0x364>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f04:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8007f06:	4013      	ands	r3, r2
 8007f08:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007f0a:	f7ff fa0f 	bl	800732c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f0e:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8007f10:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f12:	e005      	b.n	8007f20 <HAL_RCC_OscConfig+0x2d0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f14:	f7ff fa0a 	bl	800732c <HAL_GetTick>
 8007f18:	1b00      	subs	r0, r0, r4
 8007f1a:	2802      	cmp	r0, #2
 8007f1c:	d900      	bls.n	8007f20 <HAL_RCC_OscConfig+0x2d0>
 8007f1e:	e0c9      	b.n	80080b4 <HAL_RCC_OscConfig+0x464>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f20:	682b      	ldr	r3, [r5, #0]
 8007f22:	4233      	tst	r3, r6
 8007f24:	d1f6      	bne.n	8007f14 <HAL_RCC_OscConfig+0x2c4>
  return HAL_OK;
 8007f26:	2000      	movs	r0, #0
}
 8007f28:	b002      	add	sp, #8
 8007f2a:	bce0      	pop	{r5, r6, r7}
 8007f2c:	46ba      	mov	sl, r7
 8007f2e:	46b1      	mov	r9, r6
 8007f30:	46a8      	mov	r8, r5
 8007f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007f34:	2d18      	cmp	r5, #24
 8007f36:	d059      	beq.n	8007fec <HAL_RCC_OscConfig+0x39c>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007f38:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_MSI_ENABLE();
 8007f3a:	4f15      	ldr	r7, [pc, #84]	@ (8007f90 <HAL_RCC_OscConfig+0x340>)
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d03f      	beq.n	8007fc0 <HAL_RCC_OscConfig+0x370>
        __HAL_RCC_MSI_ENABLE();
 8007f40:	2201      	movs	r2, #1
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	4313      	orrs	r3, r2
 8007f46:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8007f48:	f7ff f9f0 	bl	800732c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007f4c:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 8007f4e:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007f50:	4699      	mov	r9, r3
 8007f52:	e006      	b.n	8007f62 <HAL_RCC_OscConfig+0x312>
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8007f54:	f7ff f9ea 	bl	800732c <HAL_GetTick>
 8007f58:	4643      	mov	r3, r8
 8007f5a:	1ac0      	subs	r0, r0, r3
 8007f5c:	2802      	cmp	r0, #2
 8007f5e:	d900      	bls.n	8007f62 <HAL_RCC_OscConfig+0x312>
 8007f60:	e0a8      	b.n	80080b4 <HAL_RCC_OscConfig+0x464>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007f62:	464a      	mov	r2, r9
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	421a      	tst	r2, r3
 8007f68:	d0f4      	beq.n	8007f54 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007f6a:	2208      	movs	r2, #8
 8007f6c:	683b      	ldr	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007f6e:	4909      	ldr	r1, [pc, #36]	@ (8007f94 <HAL_RCC_OscConfig+0x344>)
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007f70:	4313      	orrs	r3, r2
 8007f72:	603b      	str	r3, [r7, #0]
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	32e8      	adds	r2, #232	@ 0xe8
 8007f78:	4393      	bics	r3, r2
 8007f7a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	6a23      	ldr	r3, [r4, #32]
 8007f84:	400a      	ands	r2, r1
 8007f86:	021b      	lsls	r3, r3, #8
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	607b      	str	r3, [r7, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f8c:	6823      	ldr	r3, [r4, #0]
 8007f8e:	e6b2      	b.n	8007cf6 <HAL_RCC_OscConfig+0xa6>
 8007f90:	40021000 	.word	0x40021000
 8007f94:	ffff00ff 	.word	0xffff00ff
 8007f98:	0800ee58 	.word	0x0800ee58
 8007f9c:	20000004 	.word	0x20000004
 8007fa0:	2000000c 	.word	0x2000000c
 8007fa4:	fffaffff 	.word	0xfffaffff
 8007fa8:	80ffffff 	.word	0x80ffffff
 8007fac:	40007000 	.word	0x40007000
 8007fb0:	00001388 	.word	0x00001388
 8007fb4:	feffffff 	.word	0xfeffffff
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	23f0      	movs	r3, #240	@ 0xf0
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	e66e      	b.n	8007c9e <HAL_RCC_OscConfig+0x4e>
        __HAL_RCC_MSI_DISABLE();
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	4393      	bics	r3, r2
 8007fc6:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8007fc8:	f7ff f9b0 	bl	800732c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007fcc:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 8007fce:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007fd0:	4699      	mov	r9, r3
 8007fd2:	e005      	b.n	8007fe0 <HAL_RCC_OscConfig+0x390>
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8007fd4:	f7ff f9aa 	bl	800732c <HAL_GetTick>
 8007fd8:	4643      	mov	r3, r8
 8007fda:	1ac0      	subs	r0, r0, r3
 8007fdc:	2802      	cmp	r0, #2
 8007fde:	d869      	bhi.n	80080b4 <HAL_RCC_OscConfig+0x464>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007fe0:	464a      	mov	r2, r9
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	421a      	tst	r2, r3
 8007fe6:	d1f5      	bne.n	8007fd4 <HAL_RCC_OscConfig+0x384>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007fe8:	6823      	ldr	r3, [r4, #0]
 8007fea:	e684      	b.n	8007cf6 <HAL_RCC_OscConfig+0xa6>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007fec:	2e01      	cmp	r6, #1
 8007fee:	d1a3      	bne.n	8007f38 <HAL_RCC_OscConfig+0x2e8>
 8007ff0:	e642      	b.n	8007c78 <HAL_RCC_OscConfig+0x28>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007ff2:	2e03      	cmp	r6, #3
 8007ff4:	d000      	beq.n	8007ff8 <HAL_RCC_OscConfig+0x3a8>
 8007ff6:	e686      	b.n	8007d06 <HAL_RCC_OscConfig+0xb6>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ff8:	4aa3      	ldr	r2, [pc, #652]	@ (8008288 <HAL_RCC_OscConfig+0x638>)
 8007ffa:	6812      	ldr	r2, [r2, #0]
 8007ffc:	0392      	lsls	r2, r2, #14
 8007ffe:	d400      	bmi.n	8008002 <HAL_RCC_OscConfig+0x3b2>
 8008000:	e6a7      	b.n	8007d52 <HAL_RCC_OscConfig+0x102>
 8008002:	6862      	ldr	r2, [r4, #4]
 8008004:	2a00      	cmp	r2, #0
 8008006:	d000      	beq.n	800800a <HAL_RCC_OscConfig+0x3ba>
 8008008:	e6a3      	b.n	8007d52 <HAL_RCC_OscConfig+0x102>
        return HAL_ERROR;
 800800a:	2001      	movs	r0, #1
 800800c:	e78c      	b.n	8007f28 <HAL_RCC_OscConfig+0x2d8>
      __HAL_RCC_LSI_DISABLE();
 800800e:	2294      	movs	r2, #148	@ 0x94
 8008010:	2101      	movs	r1, #1
 8008012:	4d9d      	ldr	r5, [pc, #628]	@ (8008288 <HAL_RCC_OscConfig+0x638>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008014:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8008016:	58ab      	ldr	r3, [r5, r2]
 8008018:	438b      	bics	r3, r1
 800801a:	50ab      	str	r3, [r5, r2]
      tickstart = HAL_GetTick();
 800801c:	f7ff f986 	bl	800732c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008020:	2394      	movs	r3, #148	@ 0x94
      tickstart = HAL_GetTick();
 8008022:	0006      	movs	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008024:	4698      	mov	r8, r3
 8008026:	e004      	b.n	8008032 <HAL_RCC_OscConfig+0x3e2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008028:	f7ff f980 	bl	800732c <HAL_GetTick>
 800802c:	1b80      	subs	r0, r0, r6
 800802e:	2811      	cmp	r0, #17
 8008030:	d840      	bhi.n	80080b4 <HAL_RCC_OscConfig+0x464>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008032:	4643      	mov	r3, r8
 8008034:	58eb      	ldr	r3, [r5, r3]
 8008036:	421f      	tst	r7, r3
 8008038:	d1f6      	bne.n	8008028 <HAL_RCC_OscConfig+0x3d8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800803a:	6823      	ldr	r3, [r4, #0]
 800803c:	e6da      	b.n	8007df4 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800803e:	4992      	ldr	r1, [pc, #584]	@ (8008288 <HAL_RCC_OscConfig+0x638>)
 8008040:	680a      	ldr	r2, [r1, #0]
 8008042:	4313      	orrs	r3, r2
 8008044:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8008046:	f7ff f971 	bl	800732c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800804a:	4b8f      	ldr	r3, [pc, #572]	@ (8008288 <HAL_RCC_OscConfig+0x638>)
        tickstart = HAL_GetTick();
 800804c:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800804e:	4699      	mov	r9, r3
 8008050:	2380      	movs	r3, #128	@ 0x80
 8008052:	029b      	lsls	r3, r3, #10
 8008054:	4698      	mov	r8, r3
 8008056:	e004      	b.n	8008062 <HAL_RCC_OscConfig+0x412>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8008058:	f7ff f968 	bl	800732c <HAL_GetTick>
 800805c:	1bc0      	subs	r0, r0, r7
 800805e:	2864      	cmp	r0, #100	@ 0x64
 8008060:	d828      	bhi.n	80080b4 <HAL_RCC_OscConfig+0x464>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008062:	464b      	mov	r3, r9
 8008064:	4642      	mov	r2, r8
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4213      	tst	r3, r2
 800806a:	d0f5      	beq.n	8008058 <HAL_RCC_OscConfig+0x408>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800806c:	6823      	ldr	r3, [r4, #0]
 800806e:	e670      	b.n	8007d52 <HAL_RCC_OscConfig+0x102>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008070:	2e02      	cmp	r6, #2
 8008072:	d000      	beq.n	8008076 <HAL_RCC_OscConfig+0x426>
 8008074:	e675      	b.n	8007d62 <HAL_RCC_OscConfig+0x112>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008076:	4a84      	ldr	r2, [pc, #528]	@ (8008288 <HAL_RCC_OscConfig+0x638>)
 8008078:	6812      	ldr	r2, [r2, #0]
 800807a:	0552      	lsls	r2, r2, #21
 800807c:	d502      	bpl.n	8008084 <HAL_RCC_OscConfig+0x434>
 800807e:	68e2      	ldr	r2, [r4, #12]
 8008080:	2a00      	cmp	r2, #0
 8008082:	d0c2      	beq.n	800800a <HAL_RCC_OscConfig+0x3ba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008084:	4880      	ldr	r0, [pc, #512]	@ (8008288 <HAL_RCC_OscConfig+0x638>)
 8008086:	6922      	ldr	r2, [r4, #16]
 8008088:	6841      	ldr	r1, [r0, #4]
 800808a:	4d80      	ldr	r5, [pc, #512]	@ (800828c <HAL_RCC_OscConfig+0x63c>)
 800808c:	0612      	lsls	r2, r2, #24
 800808e:	4029      	ands	r1, r5
 8008090:	430a      	orrs	r2, r1
 8008092:	6042      	str	r2, [r0, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008094:	e686      	b.n	8007da4 <HAL_RCC_OscConfig+0x154>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008096:	6833      	ldr	r3, [r6, #0]
 8008098:	433b      	orrs	r3, r7
 800809a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800809c:	f7ff f946 	bl	800732c <HAL_GetTick>
 80080a0:	0005      	movs	r5, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80080a2:	6833      	ldr	r3, [r6, #0]
 80080a4:	423b      	tst	r3, r7
 80080a6:	d000      	beq.n	80080aa <HAL_RCC_OscConfig+0x45a>
 80080a8:	e6be      	b.n	8007e28 <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080aa:	f7ff f93f 	bl	800732c <HAL_GetTick>
 80080ae:	1b40      	subs	r0, r0, r5
 80080b0:	2802      	cmp	r0, #2
 80080b2:	d9f6      	bls.n	80080a2 <HAL_RCC_OscConfig+0x452>
            return HAL_TIMEOUT;
 80080b4:	2003      	movs	r0, #3
 80080b6:	e737      	b.n	8007f28 <HAL_RCC_OscConfig+0x2d8>
        __HAL_RCC_HSI_DISABLE();
 80080b8:	682b      	ldr	r3, [r5, #0]
 80080ba:	4a75      	ldr	r2, [pc, #468]	@ (8008290 <HAL_RCC_OscConfig+0x640>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80080bc:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 80080be:	4013      	ands	r3, r2
 80080c0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80080c2:	f7ff f933 	bl	800732c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80080c6:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 80080c8:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80080ca:	e004      	b.n	80080d6 <HAL_RCC_OscConfig+0x486>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80080cc:	f7ff f92e 	bl	800732c <HAL_GetTick>
 80080d0:	1b80      	subs	r0, r0, r6
 80080d2:	2802      	cmp	r0, #2
 80080d4:	d8ee      	bhi.n	80080b4 <HAL_RCC_OscConfig+0x464>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80080d6:	682b      	ldr	r3, [r5, #0]
 80080d8:	423b      	tst	r3, r7
 80080da:	d1f7      	bne.n	80080cc <HAL_RCC_OscConfig+0x47c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080dc:	6823      	ldr	r3, [r4, #0]
 80080de:	e661      	b.n	8007da4 <HAL_RCC_OscConfig+0x154>
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 80080e0:	2004      	movs	r0, #4
 80080e2:	588b      	ldr	r3, [r1, r2]
 80080e4:	4303      	orrs	r3, r0
 80080e6:	508b      	str	r3, [r1, r2]
 80080e8:	e66c      	b.n	8007dc4 <HAL_RCC_OscConfig+0x174>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80080ea:	2190      	movs	r1, #144	@ 0x90
 80080ec:	4e66      	ldr	r6, [pc, #408]	@ (8008288 <HAL_RCC_OscConfig+0x638>)
 80080ee:	5870      	ldr	r0, [r6, r1]
 80080f0:	4390      	bics	r0, r2
 80080f2:	5070      	str	r0, [r6, r1]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80080f4:	2004      	movs	r0, #4
 80080f6:	5872      	ldr	r2, [r6, r1]
 80080f8:	4382      	bics	r2, r0
 80080fa:	5072      	str	r2, [r6, r1]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d000      	beq.n	8008102 <HAL_RCC_OscConfig+0x4b2>
 8008100:	e6a3      	b.n	8007e4a <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 8008102:	f7ff f913 	bl	800732c <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008106:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8008108:	0007      	movs	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800810a:	2590      	movs	r5, #144	@ 0x90
 800810c:	4699      	mov	r9, r3
 800810e:	e005      	b.n	800811c <HAL_RCC_OscConfig+0x4cc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008110:	f7ff f90c 	bl	800732c <HAL_GetTick>
 8008114:	4b5f      	ldr	r3, [pc, #380]	@ (8008294 <HAL_RCC_OscConfig+0x644>)
 8008116:	1bc0      	subs	r0, r0, r7
 8008118:	4298      	cmp	r0, r3
 800811a:	d8cb      	bhi.n	80080b4 <HAL_RCC_OscConfig+0x464>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800811c:	464a      	mov	r2, r9
 800811e:	5973      	ldr	r3, [r6, r5]
 8008120:	421a      	tst	r2, r3
 8008122:	d1f5      	bne.n	8008110 <HAL_RCC_OscConfig+0x4c0>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8008124:	2380      	movs	r3, #128	@ 0x80
 8008126:	5972      	ldr	r2, [r6, r5]
 8008128:	4213      	tst	r3, r2
 800812a:	d100      	bne.n	800812e <HAL_RCC_OscConfig+0x4de>
 800812c:	e6b9      	b.n	8007ea2 <HAL_RCC_OscConfig+0x252>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800812e:	5972      	ldr	r2, [r6, r5]
 8008130:	439a      	bics	r2, r3
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008132:	4b55      	ldr	r3, [pc, #340]	@ (8008288 <HAL_RCC_OscConfig+0x638>)
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008134:	5172      	str	r2, [r6, r5]
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008136:	4699      	mov	r9, r3
 8008138:	2680      	movs	r6, #128	@ 0x80
 800813a:	2390      	movs	r3, #144	@ 0x90
 800813c:	0136      	lsls	r6, r6, #4
 800813e:	4698      	mov	r8, r3
 8008140:	e005      	b.n	800814e <HAL_RCC_OscConfig+0x4fe>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008142:	f7ff f8f3 	bl	800732c <HAL_GetTick>
 8008146:	4b53      	ldr	r3, [pc, #332]	@ (8008294 <HAL_RCC_OscConfig+0x644>)
 8008148:	1bc0      	subs	r0, r0, r7
 800814a:	4298      	cmp	r0, r3
 800814c:	d8b2      	bhi.n	80080b4 <HAL_RCC_OscConfig+0x464>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800814e:	464b      	mov	r3, r9
 8008150:	4642      	mov	r2, r8
 8008152:	589b      	ldr	r3, [r3, r2]
 8008154:	4233      	tst	r3, r6
 8008156:	d1f4      	bne.n	8008142 <HAL_RCC_OscConfig+0x4f2>
 8008158:	e6a3      	b.n	8007ea2 <HAL_RCC_OscConfig+0x252>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800815a:	f7ff fccf 	bl	8007afc <RCC_SetFlashLatencyFromMSIRange>
 800815e:	2800      	cmp	r0, #0
 8008160:	d000      	beq.n	8008164 <HAL_RCC_OscConfig+0x514>
 8008162:	e752      	b.n	800800a <HAL_RCC_OscConfig+0x3ba>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008164:	2108      	movs	r1, #8
 8008166:	4b48      	ldr	r3, [pc, #288]	@ (8008288 <HAL_RCC_OscConfig+0x638>)
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008168:	484b      	ldr	r0, [pc, #300]	@ (8008298 <HAL_RCC_OscConfig+0x648>)
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	430a      	orrs	r2, r1
 800816e:	601a      	str	r2, [r3, #0]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	31e8      	adds	r1, #232	@ 0xe8
 8008174:	438a      	bics	r2, r1
 8008176:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008178:	430a      	orrs	r2, r1
 800817a:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800817c:	6859      	ldr	r1, [r3, #4]
 800817e:	6a22      	ldr	r2, [r4, #32]
 8008180:	4001      	ands	r1, r0
 8008182:	0212      	lsls	r2, r2, #8
 8008184:	430a      	orrs	r2, r1
 8008186:	605a      	str	r2, [r3, #4]
 8008188:	e5a0      	b.n	8007ccc <HAL_RCC_OscConfig+0x7c>
      __HAL_RCC_HSI48_DISABLE();
 800818a:	2101      	movs	r1, #1
 800818c:	58ab      	ldr	r3, [r5, r2]
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 800818e:	2702      	movs	r7, #2
      __HAL_RCC_HSI48_DISABLE();
 8008190:	438b      	bics	r3, r1
 8008192:	50ab      	str	r3, [r5, r2]
      tickstart = HAL_GetTick();
 8008194:	f7ff f8ca 	bl	800732c <HAL_GetTick>
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 8008198:	2398      	movs	r3, #152	@ 0x98
      tickstart = HAL_GetTick();
 800819a:	0006      	movs	r6, r0
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 800819c:	4698      	mov	r8, r3
 800819e:	e004      	b.n	80081aa <HAL_RCC_OscConfig+0x55a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80081a0:	f7ff f8c4 	bl	800732c <HAL_GetTick>
 80081a4:	1b80      	subs	r0, r0, r6
 80081a6:	2802      	cmp	r0, #2
 80081a8:	d884      	bhi.n	80080b4 <HAL_RCC_OscConfig+0x464>
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 80081aa:	4643      	mov	r3, r8
 80081ac:	58eb      	ldr	r3, [r5, r3]
 80081ae:	421f      	tst	r7, r3
 80081b0:	d1f6      	bne.n	80081a0 <HAL_RCC_OscConfig+0x550>
 80081b2:	e698      	b.n	8007ee6 <HAL_RCC_OscConfig+0x296>
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80081b4:	f7ff fca2 	bl	8007afc <RCC_SetFlashLatencyFromMSIRange>
 80081b8:	2800      	cmp	r0, #0
 80081ba:	d100      	bne.n	80081be <HAL_RCC_OscConfig+0x56e>
 80081bc:	e586      	b.n	8007ccc <HAL_RCC_OscConfig+0x7c>
        return HAL_ERROR;
 80081be:	2001      	movs	r0, #1
 80081c0:	e6b2      	b.n	8007f28 <HAL_RCC_OscConfig+0x2d8>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80081c2:	2190      	movs	r1, #144	@ 0x90
 80081c4:	4830      	ldr	r0, [pc, #192]	@ (8008288 <HAL_RCC_OscConfig+0x638>)
 80081c6:	5843      	ldr	r3, [r0, r1]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	5043      	str	r3, [r0, r1]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80081cc:	e63d      	b.n	8007e4a <HAL_RCC_OscConfig+0x1fa>
        __HAL_RCC_PLL_DISABLE();
 80081ce:	682b      	ldr	r3, [r5, #0]
 80081d0:	4a32      	ldr	r2, [pc, #200]	@ (800829c <HAL_RCC_OscConfig+0x64c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80081d2:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 80081d4:	4013      	ands	r3, r2
 80081d6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80081d8:	f7ff f8a8 	bl	800732c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80081dc:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 80081de:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80081e0:	e005      	b.n	80081ee <HAL_RCC_OscConfig+0x59e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081e2:	f7ff f8a3 	bl	800732c <HAL_GetTick>
 80081e6:	1b80      	subs	r0, r0, r6
 80081e8:	2802      	cmp	r0, #2
 80081ea:	d900      	bls.n	80081ee <HAL_RCC_OscConfig+0x59e>
 80081ec:	e762      	b.n	80080b4 <HAL_RCC_OscConfig+0x464>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80081ee:	682b      	ldr	r3, [r5, #0]
 80081f0:	423b      	tst	r3, r7
 80081f2:	d1f6      	bne.n	80081e2 <HAL_RCC_OscConfig+0x592>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80081f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80081f8:	68ea      	ldr	r2, [r5, #12]
 80081fa:	430b      	orrs	r3, r1
 80081fc:	4928      	ldr	r1, [pc, #160]	@ (80082a0 <HAL_RCC_OscConfig+0x650>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80081fe:	4e22      	ldr	r6, [pc, #136]	@ (8008288 <HAL_RCC_OscConfig+0x638>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008200:	400a      	ands	r2, r1
 8008202:	4313      	orrs	r3, r2
 8008204:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8008206:	4313      	orrs	r3, r2
 8008208:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800820a:	4313      	orrs	r3, r2
 800820c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800820e:	4313      	orrs	r3, r2
 8008210:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008212:	0212      	lsls	r2, r2, #8
 8008214:	4313      	orrs	r3, r2
 8008216:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 8008218:	2380      	movs	r3, #128	@ 0x80
 800821a:	68ea      	ldr	r2, [r5, #12]
 800821c:	055b      	lsls	r3, r3, #21
 800821e:	4313      	orrs	r3, r2
 8008220:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8008222:	2380      	movs	r3, #128	@ 0x80
 8008224:	682a      	ldr	r2, [r5, #0]
 8008226:	045b      	lsls	r3, r3, #17
 8008228:	4313      	orrs	r3, r2
 800822a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800822c:	f7ff f87e 	bl	800732c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008230:	2580      	movs	r5, #128	@ 0x80
        tickstart = HAL_GetTick();
 8008232:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008234:	04ad      	lsls	r5, r5, #18
 8008236:	e005      	b.n	8008244 <HAL_RCC_OscConfig+0x5f4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008238:	f7ff f878 	bl	800732c <HAL_GetTick>
 800823c:	1b00      	subs	r0, r0, r4
 800823e:	2802      	cmp	r0, #2
 8008240:	d900      	bls.n	8008244 <HAL_RCC_OscConfig+0x5f4>
 8008242:	e737      	b.n	80080b4 <HAL_RCC_OscConfig+0x464>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008244:	6833      	ldr	r3, [r6, #0]
 8008246:	422b      	tst	r3, r5
 8008248:	d0f6      	beq.n	8008238 <HAL_RCC_OscConfig+0x5e8>
  return HAL_OK;
 800824a:	2000      	movs	r0, #0
 800824c:	e66c      	b.n	8007f28 <HAL_RCC_OscConfig+0x2d8>
      __HAL_RCC_PWR_CLK_DISABLE();
 800824e:	4a0e      	ldr	r2, [pc, #56]	@ (8008288 <HAL_RCC_OscConfig+0x638>)
 8008250:	4914      	ldr	r1, [pc, #80]	@ (80082a4 <HAL_RCC_OscConfig+0x654>)
 8008252:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8008254:	400b      	ands	r3, r1
 8008256:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008258:	6823      	ldr	r3, [r4, #0]
 800825a:	e627      	b.n	8007eac <HAL_RCC_OscConfig+0x25c>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800825c:	59ea      	ldr	r2, [r5, r7]
 800825e:	439a      	bics	r2, r3
 8008260:	51ea      	str	r2, [r5, r7]
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008262:	2780      	movs	r7, #128	@ 0x80
 8008264:	4b08      	ldr	r3, [pc, #32]	@ (8008288 <HAL_RCC_OscConfig+0x638>)
 8008266:	2590      	movs	r5, #144	@ 0x90
 8008268:	4699      	mov	r9, r3
 800826a:	013f      	lsls	r7, r7, #4
 800826c:	e006      	b.n	800827c <HAL_RCC_OscConfig+0x62c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800826e:	f7ff f85d 	bl	800732c <HAL_GetTick>
 8008272:	4b08      	ldr	r3, [pc, #32]	@ (8008294 <HAL_RCC_OscConfig+0x644>)
 8008274:	1b80      	subs	r0, r0, r6
 8008276:	4298      	cmp	r0, r3
 8008278:	d900      	bls.n	800827c <HAL_RCC_OscConfig+0x62c>
 800827a:	e71b      	b.n	80080b4 <HAL_RCC_OscConfig+0x464>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800827c:	464b      	mov	r3, r9
 800827e:	595b      	ldr	r3, [r3, r5]
 8008280:	423b      	tst	r3, r7
 8008282:	d1f4      	bne.n	800826e <HAL_RCC_OscConfig+0x61e>
 8008284:	e60d      	b.n	8007ea2 <HAL_RCC_OscConfig+0x252>
 8008286:	46c0      	nop			@ (mov r8, r8)
 8008288:	40021000 	.word	0x40021000
 800828c:	80ffffff 	.word	0x80ffffff
 8008290:	fffffeff 	.word	0xfffffeff
 8008294:	00001388 	.word	0x00001388
 8008298:	ffff00ff 	.word	0xffff00ff
 800829c:	feffffff 	.word	0xfeffffff
 80082a0:	11c1808c 	.word	0x11c1808c
 80082a4:	efffffff 	.word	0xefffffff

080082a8 <HAL_RCC_ClockConfig>:
{
 80082a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082aa:	46ce      	mov	lr, r9
 80082ac:	4647      	mov	r7, r8
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80082ae:	2307      	movs	r3, #7
{
 80082b0:	000d      	movs	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80082b2:	4947      	ldr	r1, [pc, #284]	@ (80083d0 <HAL_RCC_ClockConfig+0x128>)
{
 80082b4:	0004      	movs	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80082b6:	680a      	ldr	r2, [r1, #0]
{
 80082b8:	b580      	push	{r7, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80082ba:	401a      	ands	r2, r3
 80082bc:	42aa      	cmp	r2, r5
 80082be:	d20c      	bcs.n	80082da <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082c0:	680a      	ldr	r2, [r1, #0]
 80082c2:	439a      	bics	r2, r3
 80082c4:	432a      	orrs	r2, r5
 80082c6:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082c8:	680a      	ldr	r2, [r1, #0]
 80082ca:	4013      	ands	r3, r2
 80082cc:	42ab      	cmp	r3, r5
 80082ce:	d004      	beq.n	80082da <HAL_RCC_ClockConfig+0x32>
      return HAL_ERROR;
 80082d0:	2001      	movs	r0, #1
}
 80082d2:	bcc0      	pop	{r6, r7}
 80082d4:	46b9      	mov	r9, r7
 80082d6:	46b0      	mov	r8, r6
 80082d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082da:	6823      	ldr	r3, [r4, #0]
 80082dc:	07da      	lsls	r2, r3, #31
 80082de:	d525      	bpl.n	800832c <HAL_RCC_ClockConfig+0x84>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80082e0:	6863      	ldr	r3, [r4, #4]
 80082e2:	2b03      	cmp	r3, #3
 80082e4:	d058      	beq.n	8008398 <HAL_RCC_ClockConfig+0xf0>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	d051      	beq.n	800838e <HAL_RCC_ClockConfig+0xe6>
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d15b      	bne.n	80083a6 <HAL_RCC_ClockConfig+0xfe>
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80082ee:	4a39      	ldr	r2, [pc, #228]	@ (80083d4 <HAL_RCC_ClockConfig+0x12c>)
 80082f0:	6812      	ldr	r2, [r2, #0]
 80082f2:	0792      	lsls	r2, r2, #30
 80082f4:	d5ec      	bpl.n	80082d0 <HAL_RCC_ClockConfig+0x28>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80082f6:	2107      	movs	r1, #7
 80082f8:	4e36      	ldr	r6, [pc, #216]	@ (80083d4 <HAL_RCC_ClockConfig+0x12c>)
 80082fa:	68b2      	ldr	r2, [r6, #8]
 80082fc:	438a      	bics	r2, r1
 80082fe:	4313      	orrs	r3, r2
 8008300:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8008302:	f7ff f813 	bl	800732c <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008306:	2338      	movs	r3, #56	@ 0x38
 8008308:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800830a:	4b33      	ldr	r3, [pc, #204]	@ (80083d8 <HAL_RCC_ClockConfig+0x130>)
    tickstart = HAL_GetTick();
 800830c:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800830e:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008310:	e004      	b.n	800831c <HAL_RCC_ClockConfig+0x74>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008312:	f7ff f80b 	bl	800732c <HAL_GetTick>
 8008316:	1bc0      	subs	r0, r0, r7
 8008318:	4548      	cmp	r0, r9
 800831a:	d842      	bhi.n	80083a2 <HAL_RCC_ClockConfig+0xfa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800831c:	4643      	mov	r3, r8
 800831e:	68b2      	ldr	r2, [r6, #8]
 8008320:	401a      	ands	r2, r3
 8008322:	6863      	ldr	r3, [r4, #4]
 8008324:	00db      	lsls	r3, r3, #3
 8008326:	429a      	cmp	r2, r3
 8008328:	d1f3      	bne.n	8008312 <HAL_RCC_ClockConfig+0x6a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800832a:	6823      	ldr	r3, [r4, #0]
 800832c:	079a      	lsls	r2, r3, #30
 800832e:	d506      	bpl.n	800833e <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008330:	4928      	ldr	r1, [pc, #160]	@ (80083d4 <HAL_RCC_ClockConfig+0x12c>)
 8008332:	482a      	ldr	r0, [pc, #168]	@ (80083dc <HAL_RCC_ClockConfig+0x134>)
 8008334:	688a      	ldr	r2, [r1, #8]
 8008336:	4002      	ands	r2, r0
 8008338:	68a0      	ldr	r0, [r4, #8]
 800833a:	4302      	orrs	r2, r0
 800833c:	608a      	str	r2, [r1, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800833e:	2107      	movs	r1, #7
 8008340:	4823      	ldr	r0, [pc, #140]	@ (80083d0 <HAL_RCC_ClockConfig+0x128>)
 8008342:	6802      	ldr	r2, [r0, #0]
 8008344:	400a      	ands	r2, r1
 8008346:	42aa      	cmp	r2, r5
 8008348:	d907      	bls.n	800835a <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800834a:	6802      	ldr	r2, [r0, #0]
 800834c:	438a      	bics	r2, r1
 800834e:	432a      	orrs	r2, r5
 8008350:	6002      	str	r2, [r0, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008352:	6802      	ldr	r2, [r0, #0]
 8008354:	4011      	ands	r1, r2
 8008356:	42a9      	cmp	r1, r5
 8008358:	d1ba      	bne.n	80082d0 <HAL_RCC_ClockConfig+0x28>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800835a:	075b      	lsls	r3, r3, #29
 800835c:	d506      	bpl.n	800836c <HAL_RCC_ClockConfig+0xc4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800835e:	4a1d      	ldr	r2, [pc, #116]	@ (80083d4 <HAL_RCC_ClockConfig+0x12c>)
 8008360:	491f      	ldr	r1, [pc, #124]	@ (80083e0 <HAL_RCC_ClockConfig+0x138>)
 8008362:	6893      	ldr	r3, [r2, #8]
 8008364:	400b      	ands	r3, r1
 8008366:	68e1      	ldr	r1, [r4, #12]
 8008368:	430b      	orrs	r3, r1
 800836a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 800836c:	f7ff fc0c 	bl	8007b88 <HAL_RCC_GetSysClockFreq>
 8008370:	4b18      	ldr	r3, [pc, #96]	@ (80083d4 <HAL_RCC_ClockConfig+0x12c>)
 8008372:	4a1c      	ldr	r2, [pc, #112]	@ (80083e4 <HAL_RCC_ClockConfig+0x13c>)
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	491c      	ldr	r1, [pc, #112]	@ (80083e8 <HAL_RCC_ClockConfig+0x140>)
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008378:	051b      	lsls	r3, r3, #20
 800837a:	0f1b      	lsrs	r3, r3, #28
 800837c:	5cd2      	ldrb	r2, [r2, r3]
 800837e:	231f      	movs	r3, #31
 8008380:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8008382:	40d8      	lsrs	r0, r3
 8008384:	6008      	str	r0, [r1, #0]
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 8008386:	2003      	movs	r0, #3
 8008388:	f7fe ff92 	bl	80072b0 <HAL_InitTick>
  return halstatus;
 800838c:	e7a1      	b.n	80082d2 <HAL_RCC_ClockConfig+0x2a>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800838e:	4a11      	ldr	r2, [pc, #68]	@ (80083d4 <HAL_RCC_ClockConfig+0x12c>)
 8008390:	6812      	ldr	r2, [r2, #0]
 8008392:	0392      	lsls	r2, r2, #14
 8008394:	d4af      	bmi.n	80082f6 <HAL_RCC_ClockConfig+0x4e>
 8008396:	e79b      	b.n	80082d0 <HAL_RCC_ClockConfig+0x28>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008398:	4a0e      	ldr	r2, [pc, #56]	@ (80083d4 <HAL_RCC_ClockConfig+0x12c>)
 800839a:	6812      	ldr	r2, [r2, #0]
 800839c:	0192      	lsls	r2, r2, #6
 800839e:	d4aa      	bmi.n	80082f6 <HAL_RCC_ClockConfig+0x4e>
 80083a0:	e796      	b.n	80082d0 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 80083a2:	2003      	movs	r0, #3
 80083a4:	e795      	b.n	80082d2 <HAL_RCC_ClockConfig+0x2a>
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d00c      	beq.n	80083c4 <HAL_RCC_ClockConfig+0x11c>
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80083aa:	490a      	ldr	r1, [pc, #40]	@ (80083d4 <HAL_RCC_ClockConfig+0x12c>)
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80083ac:	2b04      	cmp	r3, #4
 80083ae:	d004      	beq.n	80083ba <HAL_RCC_ClockConfig+0x112>
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80083b0:	2290      	movs	r2, #144	@ 0x90
 80083b2:	588a      	ldr	r2, [r1, r2]
 80083b4:	0792      	lsls	r2, r2, #30
 80083b6:	d49e      	bmi.n	80082f6 <HAL_RCC_ClockConfig+0x4e>
 80083b8:	e78a      	b.n	80082d0 <HAL_RCC_ClockConfig+0x28>
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80083ba:	2294      	movs	r2, #148	@ 0x94
 80083bc:	588a      	ldr	r2, [r1, r2]
 80083be:	0792      	lsls	r2, r2, #30
 80083c0:	d499      	bmi.n	80082f6 <HAL_RCC_ClockConfig+0x4e>
 80083c2:	e785      	b.n	80082d0 <HAL_RCC_ClockConfig+0x28>
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80083c4:	4a03      	ldr	r2, [pc, #12]	@ (80083d4 <HAL_RCC_ClockConfig+0x12c>)
 80083c6:	6812      	ldr	r2, [r2, #0]
 80083c8:	0552      	lsls	r2, r2, #21
 80083ca:	d494      	bmi.n	80082f6 <HAL_RCC_ClockConfig+0x4e>
 80083cc:	e780      	b.n	80082d0 <HAL_RCC_ClockConfig+0x28>
 80083ce:	46c0      	nop			@ (mov r8, r8)
 80083d0:	40022000 	.word	0x40022000
 80083d4:	40021000 	.word	0x40021000
 80083d8:	00001388 	.word	0x00001388
 80083dc:	fffff0ff 	.word	0xfffff0ff
 80083e0:	ffff8fff 	.word	0xffff8fff
 80083e4:	0800ee58 	.word	0x0800ee58
 80083e8:	20000004 	.word	0x20000004

080083ec <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 80083ec:	4b05      	ldr	r3, [pc, #20]	@ (8008404 <HAL_RCC_GetPCLK1Freq+0x18>)
 80083ee:	4906      	ldr	r1, [pc, #24]	@ (8008408 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80083f0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80083f2:	4a06      	ldr	r2, [pc, #24]	@ (800840c <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 80083f4:	045b      	lsls	r3, r3, #17
 80083f6:	0f5b      	lsrs	r3, r3, #29
 80083f8:	5cc9      	ldrb	r1, [r1, r3]
 80083fa:	231f      	movs	r3, #31
 80083fc:	6810      	ldr	r0, [r2, #0]
 80083fe:	400b      	ands	r3, r1
 8008400:	40d8      	lsrs	r0, r3
}
 8008402:	4770      	bx	lr
 8008404:	40021000 	.word	0x40021000
 8008408:	0800ee50 	.word	0x0800ee50
 800840c:	20000004 	.word	0x20000004

08008410 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008412:	46d6      	mov	lr, sl
 8008414:	464f      	mov	r7, r9
 8008416:	4646      	mov	r6, r8
 8008418:	b5c0      	push	{r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800841a:	6803      	ldr	r3, [r0, #0]
{
 800841c:	0004      	movs	r4, r0
 800841e:	b082      	sub	sp, #8
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008420:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008422:	041a      	lsls	r2, r3, #16
 8008424:	d559      	bpl.n	80084da <HAL_RCCEx_PeriphCLKConfig+0xca>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008426:	2280      	movs	r2, #128	@ 0x80
 8008428:	4b9f      	ldr	r3, [pc, #636]	@ (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800842a:	0552      	lsls	r2, r2, #21
 800842c:	6d99      	ldr	r1, [r3, #88]	@ 0x58
    FlagStatus       pwrclkchanged = RESET;
 800842e:	4682      	mov	sl, r0
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008430:	4211      	tst	r1, r2
 8008432:	d100      	bne.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8008434:	e101      	b.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008436:	2780      	movs	r7, #128	@ 0x80
 8008438:	4d9c      	ldr	r5, [pc, #624]	@ (80086ac <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800843a:	007f      	lsls	r7, r7, #1
 800843c:	682b      	ldr	r3, [r5, #0]
 800843e:	433b      	orrs	r3, r7
 8008440:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008442:	f7fe ff73 	bl	800732c <HAL_GetTick>
 8008446:	0006      	movs	r6, r0

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008448:	e005      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800844a:	f7fe ff6f 	bl	800732c <HAL_GetTick>
 800844e:	1b80      	subs	r0, r0, r6
 8008450:	2802      	cmp	r0, #2
 8008452:	d900      	bls.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x46>
 8008454:	e0fb      	b.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x23e>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008456:	682b      	ldr	r3, [r5, #0]
 8008458:	423b      	tst	r3, r7
 800845a:	d0f6      	beq.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x3a>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800845c:	2390      	movs	r3, #144	@ 0x90
 800845e:	4d92      	ldr	r5, [pc, #584]	@ (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8008460:	22c0      	movs	r2, #192	@ 0xc0
 8008462:	58e9      	ldr	r1, [r5, r3]
 8008464:	0092      	lsls	r2, r2, #2
 8008466:	000e      	movs	r6, r1

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008468:	6c20      	ldr	r0, [r4, #64]	@ 0x40
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800846a:	4016      	ands	r6, r2
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800846c:	4211      	tst	r1, r2
 800846e:	d027      	beq.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 8008470:	4286      	cmp	r6, r0
 8008472:	d025      	beq.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008474:	58ea      	ldr	r2, [r5, r3]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008476:	58ee      	ldr	r6, [r5, r3]
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008478:	498d      	ldr	r1, [pc, #564]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
        __HAL_RCC_BACKUPRESET_FORCE();
 800847a:	46b4      	mov	ip, r6
 800847c:	2680      	movs	r6, #128	@ 0x80
 800847e:	4667      	mov	r7, ip
 8008480:	0276      	lsls	r6, r6, #9
 8008482:	433e      	orrs	r6, r7
 8008484:	50ee      	str	r6, [r5, r3]
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008486:	58ee      	ldr	r6, [r5, r3]
 8008488:	4f8a      	ldr	r7, [pc, #552]	@ (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800848a:	4011      	ands	r1, r2
        __HAL_RCC_BACKUPRESET_RELEASE();
 800848c:	403e      	ands	r6, r7
 800848e:	50ee      	str	r6, [r5, r3]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008490:	50e9      	str	r1, [r5, r3]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008492:	07d2      	lsls	r2, r2, #31
 8008494:	d514      	bpl.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008496:	f7fe ff49 	bl	800732c <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800849a:	2390      	movs	r3, #144	@ 0x90
 800849c:	4699      	mov	r9, r3
 800849e:	3b8e      	subs	r3, #142	@ 0x8e
        tickstart = HAL_GetTick();
 80084a0:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80084a2:	4698      	mov	r8, r3
 80084a4:	e006      	b.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084a6:	f7fe ff41 	bl	800732c <HAL_GetTick>
 80084aa:	4b83      	ldr	r3, [pc, #524]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80084ac:	1b80      	subs	r0, r0, r6
 80084ae:	4298      	cmp	r0, r3
 80084b0:	d900      	bls.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80084b2:	e0cc      	b.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x23e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80084b4:	464b      	mov	r3, r9
 80084b6:	4642      	mov	r2, r8
 80084b8:	58eb      	ldr	r3, [r5, r3]
 80084ba:	421a      	tst	r2, r3
 80084bc:	d0f3      	beq.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x96>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80084be:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80084c0:	2290      	movs	r2, #144	@ 0x90
 80084c2:	4979      	ldr	r1, [pc, #484]	@ (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80084c4:	4d7a      	ldr	r5, [pc, #488]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80084c6:	588b      	ldr	r3, [r1, r2]
 80084c8:	402b      	ands	r3, r5
 80084ca:	4303      	orrs	r3, r0
 80084cc:	508b      	str	r3, [r1, r2]
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80084ce:	4652      	mov	r2, sl
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80084d0:	2000      	movs	r0, #0
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80084d2:	6823      	ldr	r3, [r4, #0]
    if (pwrclkchanged == SET)
 80084d4:	2a01      	cmp	r2, #1
 80084d6:	d100      	bne.n	80084da <HAL_RCCEx_PeriphCLKConfig+0xca>
 80084d8:	e0bf      	b.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80084da:	07da      	lsls	r2, r3, #31
 80084dc:	d507      	bpl.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0xde>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80084de:	2188      	movs	r1, #136	@ 0x88
 80084e0:	2603      	movs	r6, #3
 80084e2:	4d71      	ldr	r5, [pc, #452]	@ (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80084e4:	586a      	ldr	r2, [r5, r1]
 80084e6:	43b2      	bics	r2, r6
 80084e8:	6866      	ldr	r6, [r4, #4]
 80084ea:	4332      	orrs	r2, r6
 80084ec:	506a      	str	r2, [r5, r1]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80084ee:	079a      	lsls	r2, r3, #30
 80084f0:	d507      	bpl.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80084f2:	2188      	movs	r1, #136	@ 0x88
 80084f4:	260c      	movs	r6, #12
 80084f6:	4d6c      	ldr	r5, [pc, #432]	@ (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80084f8:	586a      	ldr	r2, [r5, r1]
 80084fa:	43b2      	bics	r2, r6
 80084fc:	68a6      	ldr	r6, [r4, #8]
 80084fe:	4332      	orrs	r2, r6
 8008500:	506a      	str	r2, [r5, r1]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008502:	06da      	lsls	r2, r3, #27
 8008504:	d507      	bpl.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008506:	2188      	movs	r1, #136	@ 0x88
 8008508:	4d67      	ldr	r5, [pc, #412]	@ (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800850a:	4e6c      	ldr	r6, [pc, #432]	@ (80086bc <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800850c:	586a      	ldr	r2, [r5, r1]
 800850e:	4032      	ands	r2, r6
 8008510:	6966      	ldr	r6, [r4, #20]
 8008512:	4332      	orrs	r2, r6
 8008514:	506a      	str	r2, [r5, r1]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8008516:	071a      	lsls	r2, r3, #28
 8008518:	d507      	bpl.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800851a:	2188      	movs	r1, #136	@ 0x88
 800851c:	4d62      	ldr	r5, [pc, #392]	@ (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800851e:	4e64      	ldr	r6, [pc, #400]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8008520:	586a      	ldr	r2, [r5, r1]
 8008522:	4032      	ands	r2, r6
 8008524:	6926      	ldr	r6, [r4, #16]
 8008526:	4332      	orrs	r2, r6
 8008528:	506a      	str	r2, [r5, r1]
  }
#if defined (LPUART3)
  /*-------------------------- LPUART3 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART3) == RCC_PERIPHCLK_LPUART3)
 800852a:	075a      	lsls	r2, r3, #29
 800852c:	d507      	bpl.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART3CLKSOURCE(PeriphClkInit->Lpuart3ClockSelection));

    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
 800852e:	2188      	movs	r1, #136	@ 0x88
 8008530:	26c0      	movs	r6, #192	@ 0xc0
 8008532:	4d5d      	ldr	r5, [pc, #372]	@ (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8008534:	586a      	ldr	r2, [r5, r1]
 8008536:	43b2      	bics	r2, r6
 8008538:	68e6      	ldr	r6, [r4, #12]
 800853a:	4332      	orrs	r2, r6
 800853c:	506a      	str	r2, [r5, r1]
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800853e:	069a      	lsls	r2, r3, #26
 8008540:	d507      	bpl.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008542:	2188      	movs	r1, #136	@ 0x88
 8008544:	4d58      	ldr	r5, [pc, #352]	@ (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8008546:	4e5e      	ldr	r6, [pc, #376]	@ (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8008548:	586a      	ldr	r2, [r5, r1]
 800854a:	4032      	ands	r2, r6
 800854c:	69a6      	ldr	r6, [r4, #24]
 800854e:	4332      	orrs	r2, r6
 8008550:	506a      	str	r2, [r5, r1]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008552:	065a      	lsls	r2, r3, #25
 8008554:	d507      	bpl.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008556:	2188      	movs	r1, #136	@ 0x88
 8008558:	4d53      	ldr	r5, [pc, #332]	@ (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800855a:	4e5a      	ldr	r6, [pc, #360]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800855c:	586a      	ldr	r2, [r5, r1]
 800855e:	4032      	ands	r2, r6
 8008560:	69e6      	ldr	r6, [r4, #28]
 8008562:	4332      	orrs	r2, r6
 8008564:	506a      	str	r2, [r5, r1]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008566:	061a      	lsls	r2, r3, #24
 8008568:	d507      	bpl.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x16a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800856a:	2188      	movs	r1, #136	@ 0x88
 800856c:	4d4e      	ldr	r5, [pc, #312]	@ (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800856e:	4e56      	ldr	r6, [pc, #344]	@ (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8008570:	586a      	ldr	r2, [r5, r1]
 8008572:	4032      	ands	r2, r6
 8008574:	6a26      	ldr	r6, [r4, #32]
 8008576:	4332      	orrs	r2, r6
 8008578:	506a      	str	r2, [r5, r1]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800857a:	05da      	lsls	r2, r3, #23
 800857c:	d507      	bpl.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800857e:	2188      	movs	r1, #136	@ 0x88
 8008580:	4d49      	ldr	r5, [pc, #292]	@ (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8008582:	4e52      	ldr	r6, [pc, #328]	@ (80086cc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008584:	586a      	ldr	r2, [r5, r1]
 8008586:	4032      	ands	r2, r6
 8008588:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800858a:	4332      	orrs	r2, r6
 800858c:	506a      	str	r2, [r5, r1]
  }
#if defined (LPTIM3)
  /*----------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800858e:	059a      	lsls	r2, r3, #22
 8008590:	d507      	bpl.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8008592:	2188      	movs	r1, #136	@ 0x88
 8008594:	4d44      	ldr	r5, [pc, #272]	@ (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8008596:	4e4e      	ldr	r6, [pc, #312]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008598:	586a      	ldr	r2, [r5, r1]
 800859a:	4032      	ands	r2, r6
 800859c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800859e:	4332      	orrs	r2, r6
 80085a0:	506a      	str	r2, [r5, r1]
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80085a2:	045a      	lsls	r2, r3, #17
 80085a4:	d50b      	bpl.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 80085a6:	2280      	movs	r2, #128	@ 0x80
 80085a8:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 80085aa:	0552      	lsls	r2, r2, #21
 80085ac:	4296      	cmp	r6, r2
 80085ae:	d05a      	beq.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x256>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80085b0:	2188      	movs	r1, #136	@ 0x88
 80085b2:	4d3d      	ldr	r5, [pc, #244]	@ (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80085b4:	4f47      	ldr	r7, [pc, #284]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80085b6:	586a      	ldr	r2, [r5, r1]
 80085b8:	403a      	ands	r2, r7
 80085ba:	4332      	orrs	r2, r6
 80085bc:	506a      	str	r2, [r5, r1]
  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80085be:	04da      	lsls	r2, r3, #19
 80085c0:	d50b      	bpl.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLQ)
 80085c2:	2280      	movs	r2, #128	@ 0x80
 80085c4:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 80085c6:	0512      	lsls	r2, r2, #20
 80085c8:	4296      	cmp	r6, r2
 80085ca:	d053      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x264>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
    }
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80085cc:	2188      	movs	r1, #136	@ 0x88
 80085ce:	4d36      	ldr	r5, [pc, #216]	@ (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80085d0:	4f41      	ldr	r7, [pc, #260]	@ (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80085d2:	586a      	ldr	r2, [r5, r1]
 80085d4:	403a      	ands	r2, r7
 80085d6:	4332      	orrs	r2, r6
 80085d8:	506a      	str	r2, [r5, r1]

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80085da:	049a      	lsls	r2, r3, #18
 80085dc:	d50b      	bpl.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 80085de:	2280      	movs	r2, #128	@ 0x80
 80085e0:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80085e2:	0512      	lsls	r2, r2, #20
 80085e4:	4296      	cmp	r6, r2
 80085e6:	d04c      	beq.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x272>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80085e8:	2188      	movs	r1, #136	@ 0x88
 80085ea:	4d2f      	ldr	r5, [pc, #188]	@ (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80085ec:	4f3a      	ldr	r7, [pc, #232]	@ (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80085ee:	586a      	ldr	r2, [r5, r1]
 80085f0:	403a      	ands	r2, r7
 80085f2:	4332      	orrs	r2, r6
 80085f4:	506a      	str	r2, [r5, r1]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80085f6:	055a      	lsls	r2, r3, #21
 80085f8:	d50b      	bpl.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x202>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 80085fa:	2280      	movs	r2, #128	@ 0x80
 80085fc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80085fe:	0452      	lsls	r2, r2, #17
 8008600:	4291      	cmp	r1, r2
 8008602:	d045      	beq.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008604:	2588      	movs	r5, #136	@ 0x88
 8008606:	4e28      	ldr	r6, [pc, #160]	@ (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8008608:	4f34      	ldr	r7, [pc, #208]	@ (80086dc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800860a:	5972      	ldr	r2, [r6, r5]
 800860c:	403a      	ands	r2, r7
 800860e:	430a      	orrs	r2, r1
 8008610:	5172      	str	r2, [r6, r5]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8008612:	051b      	lsls	r3, r3, #20
 8008614:	d50b      	bpl.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x21e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 8008616:	2380      	movs	r3, #128	@ 0x80
 8008618:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 800861a:	049b      	lsls	r3, r3, #18
 800861c:	429c      	cmp	r4, r3
 800861e:	d03c      	beq.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8008620:	2288      	movs	r2, #136	@ 0x88
 8008622:	4921      	ldr	r1, [pc, #132]	@ (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8008624:	4d2d      	ldr	r5, [pc, #180]	@ (80086dc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8008626:	588b      	ldr	r3, [r1, r2]
 8008628:	402b      	ands	r3, r5
 800862a:	4323      	orrs	r3, r4
 800862c:	508b      	str	r3, [r1, r2]

  }

  return status;
}
 800862e:	b002      	add	sp, #8
 8008630:	bce0      	pop	{r5, r6, r7}
 8008632:	46ba      	mov	sl, r7
 8008634:	46b1      	mov	r9, r6
 8008636:	46a8      	mov	r8, r5
 8008638:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800863a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800863c:	4311      	orrs	r1, r2
 800863e:	6599      	str	r1, [r3, #88]	@ 0x58
 8008640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008642:	4013      	ands	r3, r2
 8008644:	9301      	str	r3, [sp, #4]
 8008646:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008648:	2301      	movs	r3, #1
 800864a:	469a      	mov	sl, r3
 800864c:	e6f3      	b.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x26>
    if (pwrclkchanged == SET)
 800864e:	4652      	mov	r2, sl
        status = ret;
 8008650:	2003      	movs	r0, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008652:	6823      	ldr	r3, [r4, #0]
    if (pwrclkchanged == SET)
 8008654:	2a01      	cmp	r2, #1
 8008656:	d000      	beq.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8008658:	e73f      	b.n	80084da <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_PWR_CLK_DISABLE();
 800865a:	4913      	ldr	r1, [pc, #76]	@ (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800865c:	4d20      	ldr	r5, [pc, #128]	@ (80086e0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800865e:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8008660:	402a      	ands	r2, r5
 8008662:	658a      	str	r2, [r1, #88]	@ 0x58
 8008664:	e739      	b.n	80084da <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 8008666:	2280      	movs	r2, #128	@ 0x80
 8008668:	490f      	ldr	r1, [pc, #60]	@ (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800866a:	0252      	lsls	r2, r2, #9
 800866c:	68cd      	ldr	r5, [r1, #12]
 800866e:	432a      	orrs	r2, r5
 8008670:	60ca      	str	r2, [r1, #12]
 8008672:	e79d      	b.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8008674:	2280      	movs	r2, #128	@ 0x80
 8008676:	490c      	ldr	r1, [pc, #48]	@ (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8008678:	0452      	lsls	r2, r2, #17
 800867a:	68cd      	ldr	r5, [r1, #12]
 800867c:	432a      	orrs	r2, r5
 800867e:	60ca      	str	r2, [r1, #12]
 8008680:	e7a4      	b.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8008682:	2280      	movs	r2, #128	@ 0x80
 8008684:	4908      	ldr	r1, [pc, #32]	@ (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8008686:	0452      	lsls	r2, r2, #17
 8008688:	68cd      	ldr	r5, [r1, #12]
 800868a:	432a      	orrs	r2, r5
 800868c:	60ca      	str	r2, [r1, #12]
 800868e:	e7ab      	b.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8008690:	4d05      	ldr	r5, [pc, #20]	@ (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8008692:	68ea      	ldr	r2, [r5, #12]
 8008694:	430a      	orrs	r2, r1
 8008696:	60ea      	str	r2, [r5, #12]
 8008698:	e7b4      	b.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 800869a:	2380      	movs	r3, #128	@ 0x80
 800869c:	4a02      	ldr	r2, [pc, #8]	@ (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800869e:	045b      	lsls	r3, r3, #17
 80086a0:	68d1      	ldr	r1, [r2, #12]
 80086a2:	430b      	orrs	r3, r1
 80086a4:	60d3      	str	r3, [r2, #12]
 80086a6:	e7bb      	b.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80086a8:	40021000 	.word	0x40021000
 80086ac:	40007000 	.word	0x40007000
 80086b0:	fffffcff 	.word	0xfffffcff
 80086b4:	fffeffff 	.word	0xfffeffff
 80086b8:	00001388 	.word	0x00001388
 80086bc:	fffff3ff 	.word	0xfffff3ff
 80086c0:	ffffcfff 	.word	0xffffcfff
 80086c4:	fffcffff 	.word	0xfffcffff
 80086c8:	fff3ffff 	.word	0xfff3ffff
 80086cc:	ffcfffff 	.word	0xffcfffff
 80086d0:	ff3fffff 	.word	0xff3fffff
 80086d4:	cfffffff 	.word	0xcfffffff
 80086d8:	f3ffffff 	.word	0xf3ffffff
 80086dc:	feffffff 	.word	0xfeffffff
 80086e0:	efffffff 	.word	0xefffffff

080086e4 <HAL_RCCEx_GetPLLClockFreq>:
  uint32_t plln;
  uint32_t pllvco;
  uint32_t msirange;

  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80086e4:	2203      	movs	r2, #3
  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80086e6:	4b2f      	ldr	r3, [pc, #188]	@ (80087a4 <HAL_RCCEx_GetPLLClockFreq+0xc0>)
{
 80086e8:	b570      	push	{r4, r5, r6, lr}
  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80086ea:	68dd      	ldr	r5, [r3, #12]
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80086ec:	68d9      	ldr	r1, [r3, #12]
{
 80086ee:	0004      	movs	r4, r0
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80086f0:	400a      	ands	r2, r1
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 80086f2:	68d9      	ldr	r1, [r3, #12]
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 80086f4:	6818      	ldr	r0, [r3, #0]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 80086f6:	0649      	lsls	r1, r1, #25
  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80086f8:	046d      	lsls	r5, r5, #17
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 80086fa:	0f49      	lsrs	r1, r1, #29
  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80086fc:	0e6d      	lsrs	r5, r5, #25
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 80086fe:	3101      	adds	r1, #1
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8008700:	0700      	lsls	r0, r0, #28
 8008702:	d53f      	bpl.n	8008784 <HAL_RCCEx_GetPLLClockFreq+0xa0>
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	061b      	lsls	r3, r3, #24
 8008708:	0f1b      	lsrs	r3, r3, #28
  if (msirange > 11U)
 800870a:	2b0b      	cmp	r3, #11
 800870c:	d900      	bls.n	8008710 <HAL_RCCEx_GetPLLClockFreq+0x2c>
 800870e:	230b      	movs	r3, #11
  {
    msirange = 11U;
  }
  switch (pllsource)
 8008710:	2a02      	cmp	r2, #2
 8008712:	d03c      	beq.n	800878e <HAL_RCCEx_GetPLLClockFreq+0xaa>
 8008714:	2a03      	cmp	r2, #3
 8008716:	d03f      	beq.n	8008798 <HAL_RCCEx_GetPLLClockFreq+0xb4>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * plln;
      break;

    default:
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8008718:	4a23      	ldr	r2, [pc, #140]	@ (80087a8 <HAL_RCCEx_GetPLLClockFreq+0xc4>)
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	5898      	ldr	r0, [r3, r2]
 800871e:	f7f7 fd0f 	bl	8000140 <__udivsi3>
 8008722:	4345      	muls	r5, r0
      break;
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 8008724:	491f      	ldr	r1, [pc, #124]	@ (80087a4 <HAL_RCCEx_GetPLLClockFreq+0xc0>)
 8008726:	2380      	movs	r3, #128	@ 0x80
 8008728:	68ca      	ldr	r2, [r1, #12]
 800872a:	025b      	lsls	r3, r3, #9
 800872c:	0010      	movs	r0, r2
 800872e:	4018      	ands	r0, r3
 8008730:	421a      	tst	r2, r3
 8008732:	d006      	beq.n	8008742 <HAL_RCCEx_GetPLLClockFreq+0x5e>
  {
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8008734:	68c9      	ldr	r1, [r1, #12]
 8008736:	0028      	movs	r0, r5
                                                        >> RCC_PLLCFGR_PLLP_Pos) + 1U));
 8008738:	0289      	lsls	r1, r1, #10
 800873a:	0ec9      	lsrs	r1, r1, #27
 800873c:	3101      	adds	r1, #1
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 800873e:	f7f7 fcff 	bl	8000140 <__udivsi3>
  else
  {
    PLL_Clocks->PLL_P_Frequency = 0;
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVQ) != 0U)
 8008742:	4918      	ldr	r1, [pc, #96]	@ (80087a4 <HAL_RCCEx_GetPLLClockFreq+0xc0>)
 8008744:	6020      	str	r0, [r4, #0]
 8008746:	68ca      	ldr	r2, [r1, #12]
 8008748:	2380      	movs	r3, #128	@ 0x80
 800874a:	0010      	movs	r0, r2
 800874c:	045b      	lsls	r3, r3, #17
 800874e:	4018      	ands	r0, r3
 8008750:	421a      	tst	r2, r3
 8008752:	d006      	beq.n	8008762 <HAL_RCCEx_GetPLLClockFreq+0x7e>
  {
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8008754:	68c9      	ldr	r1, [r1, #12]
 8008756:	0028      	movs	r0, r5
                                                        >> RCC_PLLCFGR_PLLQ_Pos) + 1U));
 8008758:	0109      	lsls	r1, r1, #4
 800875a:	0f49      	lsrs	r1, r1, #29
 800875c:	3101      	adds	r1, #1
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 800875e:	f7f7 fcef 	bl	8000140 <__udivsi3>
  else
  {
    PLL_Clocks->PLL_Q_Frequency = 0;
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVR) != 0U)
 8008762:	4910      	ldr	r1, [pc, #64]	@ (80087a4 <HAL_RCCEx_GetPLLClockFreq+0xc0>)
 8008764:	6060      	str	r0, [r4, #4]
 8008766:	68ca      	ldr	r2, [r1, #12]
 8008768:	2380      	movs	r3, #128	@ 0x80
 800876a:	0010      	movs	r0, r2
 800876c:	055b      	lsls	r3, r3, #21
 800876e:	4018      	ands	r0, r3
 8008770:	421a      	tst	r2, r3
 8008772:	d005      	beq.n	8008780 <HAL_RCCEx_GetPLLClockFreq+0x9c>
  {
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8008774:	68c9      	ldr	r1, [r1, #12]
 8008776:	0028      	movs	r0, r5
                                                        >> RCC_PLLCFGR_PLLR_Pos) + 1U));
 8008778:	0f49      	lsrs	r1, r1, #29
 800877a:	3101      	adds	r1, #1
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 800877c:	f7f7 fce0 	bl	8000140 <__udivsi3>
  }
  else
  {
    PLL_Clocks->PLL_R_Frequency = 0;
  }
}
 8008780:	60a0      	str	r0, [r4, #8]
 8008782:	bd70      	pop	{r4, r5, r6, pc}
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8008784:	2094      	movs	r0, #148	@ 0x94
 8008786:	581b      	ldr	r3, [r3, r0]
 8008788:	051b      	lsls	r3, r3, #20
 800878a:	0f1b      	lsrs	r3, r3, #28
 800878c:	e7bd      	b.n	800870a <HAL_RCCEx_GetPLLClockFreq+0x26>
      pllvco = (HSI_VALUE / pllm) * plln;
 800878e:	4807      	ldr	r0, [pc, #28]	@ (80087ac <HAL_RCCEx_GetPLLClockFreq+0xc8>)
 8008790:	f7f7 fcd6 	bl	8000140 <__udivsi3>
 8008794:	4345      	muls	r5, r0
      break;
 8008796:	e7c5      	b.n	8008724 <HAL_RCCEx_GetPLLClockFreq+0x40>
      pllvco = (HSE_VALUE / pllm) * plln;
 8008798:	4805      	ldr	r0, [pc, #20]	@ (80087b0 <HAL_RCCEx_GetPLLClockFreq+0xcc>)
 800879a:	f7f7 fcd1 	bl	8000140 <__udivsi3>
 800879e:	4345      	muls	r5, r0
      break;
 80087a0:	e7c0      	b.n	8008724 <HAL_RCCEx_GetPLLClockFreq+0x40>
 80087a2:	46c0      	nop			@ (mov r8, r8)
 80087a4:	40021000 	.word	0x40021000
 80087a8:	0800ee20 	.word	0x0800ee20
 80087ac:	00f42400 	.word	0x00f42400
 80087b0:	003d0900 	.word	0x003d0900

080087b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80087b4:	2380      	movs	r3, #128	@ 0x80
{
 80087b6:	b510      	push	{r4, lr}
  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80087b8:	021b      	lsls	r3, r3, #8
{
 80087ba:	b084      	sub	sp, #16
  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80087bc:	4298      	cmp	r0, r3
 80087be:	d100      	bne.n	80087c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
 80087c0:	e09e      	b.n	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
    switch (PeriphClk)
 80087c2:	2380      	movs	r3, #128	@ 0x80
 80087c4:	005b      	lsls	r3, r3, #1
 80087c6:	4298      	cmp	r0, r3
 80087c8:	d100      	bne.n	80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 80087ca:	e1af      	b.n	8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80087cc:	d809      	bhi.n	80087e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
 80087ce:	2820      	cmp	r0, #32
 80087d0:	d836      	bhi.n	8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
 80087d2:	2800      	cmp	r0, #0
 80087d4:	d018      	beq.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 80087d6:	2820      	cmp	r0, #32
 80087d8:	d816      	bhi.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 80087da:	4bb4      	ldr	r3, [pc, #720]	@ (8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80087dc:	0080      	lsls	r0, r0, #2
 80087de:	581b      	ldr	r3, [r3, r0]
 80087e0:	469f      	mov	pc, r3
 80087e2:	2380      	movs	r3, #128	@ 0x80
 80087e4:	015b      	lsls	r3, r3, #5
 80087e6:	4298      	cmp	r0, r3
 80087e8:	d100      	bne.n	80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80087ea:	e18b      	b.n	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 80087ec:	d90f      	bls.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80087ee:	2380      	movs	r3, #128	@ 0x80
 80087f0:	01db      	lsls	r3, r3, #7
 80087f2:	4298      	cmp	r0, r3
 80087f4:	d100      	bne.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
 80087f6:	e0ca      	b.n	800898e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
 80087f8:	d93c      	bls.n	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 80087fa:	4bad      	ldr	r3, [pc, #692]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80087fc:	469c      	mov	ip, r3
 80087fe:	4bad      	ldr	r3, [pc, #692]	@ (8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8008800:	4460      	add	r0, ip
 8008802:	4218      	tst	r0, r3
 8008804:	d100      	bne.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8008806:	e0a3      	b.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 8008808:	2000      	movs	r0, #0
}
 800880a:	b004      	add	sp, #16
 800880c:	bd10      	pop	{r4, pc}
    switch (PeriphClk)
 800880e:	2380      	movs	r3, #128	@ 0x80
 8008810:	00db      	lsls	r3, r3, #3
 8008812:	4298      	cmp	r0, r3
 8008814:	d100      	bne.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8008816:	e0cf      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
 8008818:	2280      	movs	r2, #128	@ 0x80
 800881a:	0112      	lsls	r2, r2, #4
 800881c:	4290      	cmp	r0, r2
 800881e:	d155      	bne.n	80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x118>
        srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 8008820:	2388      	movs	r3, #136	@ 0x88
 8008822:	4aa5      	ldr	r2, [pc, #660]	@ (8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008824:	58d3      	ldr	r3, [r2, r3]
        switch (srcclk)
 8008826:	019b      	lsls	r3, r3, #6
 8008828:	d500      	bpl.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 800882a:	e0cb      	b.n	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 800882c:	23e0      	movs	r3, #224	@ 0xe0
 800882e:	6892      	ldr	r2, [r2, #8]
 8008830:	01db      	lsls	r3, r3, #7
 8008832:	421a      	tst	r2, r3
 8008834:	d100      	bne.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
 8008836:	e08b      	b.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8008838:	f7ff fdd8 	bl	80083ec <HAL_RCC_GetPCLK1Freq>
 800883c:	0040      	lsls	r0, r0, #1
 800883e:	e7e4      	b.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
    switch (PeriphClk)
 8008840:	2840      	cmp	r0, #64	@ 0x40
 8008842:	d074      	beq.n	800892e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8008844:	2880      	cmp	r0, #128	@ 0x80
 8008846:	d1df      	bne.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008848:	2388      	movs	r3, #136	@ 0x88
 800884a:	22c0      	movs	r2, #192	@ 0xc0
 800884c:	2180      	movs	r1, #128	@ 0x80
 800884e:	489a      	ldr	r0, [pc, #616]	@ (8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008850:	0312      	lsls	r2, r2, #12
 8008852:	58c3      	ldr	r3, [r0, r3]
 8008854:	0309      	lsls	r1, r1, #12
 8008856:	4013      	ands	r3, r2
        switch (srcclk)
 8008858:	428b      	cmp	r3, r1
 800885a:	d100      	bne.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800885c:	e11c      	b.n	8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800885e:	d900      	bls.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
 8008860:	e134      	b.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8008862:	2b00      	cmp	r3, #0
 8008864:	d074      	beq.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 8008866:	2280      	movs	r2, #128	@ 0x80
 8008868:	02d2      	lsls	r2, r2, #11
 800886a:	4293      	cmp	r3, r2
 800886c:	d1cc      	bne.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800886e:	4c92      	ldr	r4, [pc, #584]	@ (8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008870:	2194      	movs	r1, #148	@ 0x94
 8008872:	e07b      	b.n	800896c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
    switch (PeriphClk)
 8008874:	2380      	movs	r3, #128	@ 0x80
 8008876:	019b      	lsls	r3, r3, #6
 8008878:	4298      	cmp	r0, r3
 800887a:	d1c5      	bne.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800887c:	2388      	movs	r3, #136	@ 0x88
 800887e:	4a8e      	ldr	r2, [pc, #568]	@ (8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008880:	2180      	movs	r1, #128	@ 0x80
 8008882:	58d3      	ldr	r3, [r2, r3]
 8008884:	22c0      	movs	r2, #192	@ 0xc0
 8008886:	0512      	lsls	r2, r2, #20
 8008888:	4013      	ands	r3, r2
        switch (srcclk)
 800888a:	0509      	lsls	r1, r1, #20
 800888c:	428b      	cmp	r3, r1
 800888e:	d100      	bne.n	8008892 <HAL_RCCEx_GetPeriphCLKFreq+0xde>
 8008890:	e098      	b.n	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8008892:	4293      	cmp	r3, r2
 8008894:	d100      	bne.n	8008898 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8008896:	e167      	b.n	8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8008898:	2280      	movs	r2, #128	@ 0x80
 800889a:	2000      	movs	r0, #0
 800889c:	04d2      	lsls	r2, r2, #19
 800889e:	4293      	cmp	r3, r2
 80088a0:	d1b3      	bne.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80088a2:	4985      	ldr	r1, [pc, #532]	@ (8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80088a4:	2202      	movs	r2, #2
 80088a6:	0010      	movs	r0, r2
 80088a8:	680b      	ldr	r3, [r1, #0]
 80088aa:	4018      	ands	r0, r3
 80088ac:	421a      	tst	r2, r3
 80088ae:	d0ac      	beq.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 80088b0:	680b      	ldr	r3, [r1, #0]
 80088b2:	071b      	lsls	r3, r3, #28
 80088b4:	d400      	bmi.n	80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80088b6:	e160      	b.n	8008b7a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 80088b8:	680b      	ldr	r3, [r1, #0]
 80088ba:	061b      	lsls	r3, r3, #24
 80088bc:	0f1b      	lsrs	r3, r3, #28
              frequency = MSIRangeTable[msirange];
 80088be:	4a7f      	ldr	r2, [pc, #508]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
              if (msirange > 11U)
 80088c0:	2b0b      	cmp	r3, #11
 80088c2:	d900      	bls.n	80088c6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80088c4:	230b      	movs	r3, #11
              frequency = MSIRangeTable[msirange];
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	5898      	ldr	r0, [r3, r2]
 80088ca:	e79e      	b.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
    switch (PeriphClk)
 80088cc:	2280      	movs	r2, #128	@ 0x80
 80088ce:	0092      	lsls	r2, r2, #2
 80088d0:	4290      	cmp	r0, r2
 80088d2:	d199      	bne.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80088d4:	2288      	movs	r2, #136	@ 0x88
 80088d6:	21c0      	movs	r1, #192	@ 0xc0
 80088d8:	4877      	ldr	r0, [pc, #476]	@ (8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80088da:	0409      	lsls	r1, r1, #16
 80088dc:	5882      	ldr	r2, [r0, r2]
 80088de:	400a      	ands	r2, r1
        switch (srcclk)
 80088e0:	2180      	movs	r1, #128	@ 0x80
 80088e2:	0409      	lsls	r1, r1, #16
 80088e4:	428a      	cmp	r2, r1
 80088e6:	d100      	bne.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x136>
 80088e8:	e0d8      	b.n	8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80088ea:	d900      	bls.n	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 80088ec:	e100      	b.n	8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 80088ee:	2a00      	cmp	r2, #0
 80088f0:	d02e      	beq.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 80088f2:	2380      	movs	r3, #128	@ 0x80
 80088f4:	03db      	lsls	r3, r3, #15
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d000      	beq.n	80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 80088fa:	e785      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80088fc:	4c6e      	ldr	r4, [pc, #440]	@ (8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80088fe:	e7b7      	b.n	8008870 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008900:	2490      	movs	r4, #144	@ 0x90
 8008902:	22c0      	movs	r2, #192	@ 0xc0
    switch (srcclk)
 8008904:	2080      	movs	r0, #128	@ 0x80
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008906:	496c      	ldr	r1, [pc, #432]	@ (8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008908:	0092      	lsls	r2, r2, #2
 800890a:	590b      	ldr	r3, [r1, r4]
    switch (srcclk)
 800890c:	0080      	lsls	r0, r0, #2
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800890e:	4013      	ands	r3, r2
    switch (srcclk)
 8008910:	4283      	cmp	r3, r0
 8008912:	d02a      	beq.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 8008914:	4293      	cmp	r3, r2
 8008916:	d01e      	beq.n	8008956 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8008918:	2280      	movs	r2, #128	@ 0x80
 800891a:	2000      	movs	r0, #0
 800891c:	0052      	lsls	r2, r2, #1
 800891e:	4293      	cmp	r3, r2
 8008920:	d000      	beq.n	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8008922:	e772      	b.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008924:	5908      	ldr	r0, [r1, r4]
 8008926:	0780      	lsls	r0, r0, #30
 8008928:	0fc0      	lsrs	r0, r0, #31
 800892a:	03c0      	lsls	r0, r0, #15
 800892c:	e76d      	b.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800892e:	2388      	movs	r3, #136	@ 0x88
 8008930:	21c0      	movs	r1, #192	@ 0xc0
 8008932:	4a61      	ldr	r2, [pc, #388]	@ (8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008934:	0289      	lsls	r1, r1, #10
 8008936:	58d3      	ldr	r3, [r2, r3]
 8008938:	400b      	ands	r3, r1
        switch (srcclk)
 800893a:	2180      	movs	r1, #128	@ 0x80
 800893c:	0249      	lsls	r1, r1, #9
 800893e:	428b      	cmp	r3, r1
 8008940:	d037      	beq.n	80089b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
 8008942:	2180      	movs	r1, #128	@ 0x80
 8008944:	0289      	lsls	r1, r1, #10
 8008946:	428b      	cmp	r3, r1
 8008948:	d05c      	beq.n	8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
 800894a:	2b00      	cmp	r3, #0
 800894c:	d000      	beq.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 800894e:	e75b      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
              frequency = HAL_RCC_GetPCLK1Freq();
 8008950:	f7ff fd4c 	bl	80083ec <HAL_RCC_GetPCLK1Freq>
 8008954:	e759      	b.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008956:	680a      	ldr	r2, [r1, #0]
 8008958:	2380      	movs	r3, #128	@ 0x80
 800895a:	0010      	movs	r0, r2
 800895c:	029b      	lsls	r3, r3, #10
 800895e:	4018      	ands	r0, r3
 8008960:	421a      	tst	r2, r3
 8008962:	d100      	bne.n	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 8008964:	e751      	b.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
          frequency = HSE_VALUE / 32U;
 8008966:	4856      	ldr	r0, [pc, #344]	@ (8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8008968:	e74f      	b.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800896a:	2494      	movs	r4, #148	@ 0x94
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800896c:	2202      	movs	r2, #2
 800896e:	0010      	movs	r0, r2
 8008970:	5863      	ldr	r3, [r4, r1]
 8008972:	4018      	ands	r0, r3
 8008974:	421a      	tst	r2, r3
 8008976:	d100      	bne.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8008978:	e747      	b.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 800897a:	2004      	movs	r0, #4
 800897c:	5863      	ldr	r3, [r4, r1]
 800897e:	4018      	ands	r0, r3
            frequency = LSI_VALUE / 128U;
 8008980:	4243      	negs	r3, r0
 8008982:	4158      	adcs	r0, r3
 8008984:	4b4f      	ldr	r3, [pc, #316]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8008986:	4240      	negs	r0, r0
 8008988:	4018      	ands	r0, r3
 800898a:	30fa      	adds	r0, #250	@ 0xfa
 800898c:	e73d      	b.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800898e:	2388      	movs	r3, #136	@ 0x88
 8008990:	21c0      	movs	r1, #192	@ 0xc0
 8008992:	4a49      	ldr	r2, [pc, #292]	@ (8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008994:	0589      	lsls	r1, r1, #22
 8008996:	58d3      	ldr	r3, [r2, r3]
 8008998:	400b      	ands	r3, r1
        switch (srcclk)
 800899a:	2180      	movs	r1, #128	@ 0x80
 800899c:	0549      	lsls	r1, r1, #21
 800899e:	428b      	cmp	r3, r1
 80089a0:	d100      	bne.n	80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
 80089a2:	e0e3      	b.n	8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80089a4:	2180      	movs	r1, #128	@ 0x80
 80089a6:	0589      	lsls	r1, r1, #22
 80089a8:	428b      	cmp	r3, r1
 80089aa:	d02b      	beq.n	8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d000      	beq.n	80089b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
 80089b0:	e72a      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
            frequency = HAL_RCC_GetSysClockFreq();
 80089b2:	f7ff f8e9 	bl	8007b88 <HAL_RCC_GetSysClockFreq>
            break;
 80089b6:	e728      	b.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
        srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 80089b8:	2388      	movs	r3, #136	@ 0x88
 80089ba:	4a3f      	ldr	r2, [pc, #252]	@ (8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80089bc:	58d3      	ldr	r3, [r2, r3]
        switch (srcclk)
 80089be:	01db      	lsls	r3, r3, #7
 80089c0:	d400      	bmi.n	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 80089c2:	e733      	b.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x78>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80089c4:	a801      	add	r0, sp, #4
 80089c6:	f7ff fe8d 	bl	80086e4 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 80089ca:	9802      	ldr	r0, [sp, #8]
            break;
 80089cc:	e71d      	b.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80089ce:	2388      	movs	r3, #136	@ 0x88
 80089d0:	4a39      	ldr	r2, [pc, #228]	@ (8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80089d2:	58d1      	ldr	r1, [r2, r3]
 80089d4:	3b85      	subs	r3, #133	@ 0x85
 80089d6:	400b      	ands	r3, r1
        switch (srcclk)
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d013      	beq.n	8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
 80089dc:	2b03      	cmp	r3, #3
 80089de:	d100      	bne.n	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80089e0:	e080      	b.n	8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d1b4      	bne.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 80089e6:	e7e4      	b.n	80089b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80089e8:	2388      	movs	r3, #136	@ 0x88
 80089ea:	21c0      	movs	r1, #192	@ 0xc0
 80089ec:	4a32      	ldr	r2, [pc, #200]	@ (8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80089ee:	0189      	lsls	r1, r1, #6
 80089f0:	58d3      	ldr	r3, [r2, r3]
 80089f2:	400b      	ands	r3, r1
        switch (srcclk)
 80089f4:	2180      	movs	r1, #128	@ 0x80
 80089f6:	0149      	lsls	r1, r1, #5
 80089f8:	428b      	cmp	r3, r1
 80089fa:	d0da      	beq.n	80089b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
 80089fc:	2180      	movs	r1, #128	@ 0x80
 80089fe:	0189      	lsls	r1, r1, #6
 8008a00:	428b      	cmp	r3, r1
 8008a02:	d1a2      	bne.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a04:	6812      	ldr	r2, [r2, #0]
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a06:	2380      	movs	r3, #128	@ 0x80
 8008a08:	0010      	movs	r0, r2
 8008a0a:	00db      	lsls	r3, r3, #3
 8008a0c:	4018      	ands	r0, r3
 8008a0e:	421a      	tst	r2, r3
 8008a10:	d100      	bne.n	8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8008a12:	e6fa      	b.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
              frequency = HSI_VALUE;
 8008a14:	482c      	ldr	r0, [pc, #176]	@ (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
 8008a16:	e6f8      	b.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008a18:	2388      	movs	r3, #136	@ 0x88
 8008a1a:	4a27      	ldr	r2, [pc, #156]	@ (8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008a1c:	58d1      	ldr	r1, [r2, r3]
 8008a1e:	3b7c      	subs	r3, #124	@ 0x7c
 8008a20:	400b      	ands	r3, r1
        switch (srcclk)
 8008a22:	2b08      	cmp	r3, #8
 8008a24:	d0ee      	beq.n	8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
 8008a26:	d86a      	bhi.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d091      	beq.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 8008a2c:	2b04      	cmp	r3, #4
 8008a2e:	d0c0      	beq.n	80089b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
 8008a30:	e6ea      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        srcclk = __HAL_RCC_GET_LPUART3_SOURCE();
 8008a32:	2388      	movs	r3, #136	@ 0x88
 8008a34:	4a20      	ldr	r2, [pc, #128]	@ (8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008a36:	58d1      	ldr	r1, [r2, r3]
 8008a38:	3338      	adds	r3, #56	@ 0x38
 8008a3a:	400b      	ands	r3, r1
        switch (srcclk)
 8008a3c:	2b80      	cmp	r3, #128	@ 0x80
 8008a3e:	d0e1      	beq.n	8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
 8008a40:	d84d      	bhi.n	8008ade <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d084      	beq.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 8008a46:	2b40      	cmp	r3, #64	@ 0x40
 8008a48:	d0b3      	beq.n	80089b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
 8008a4a:	e6dd      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 8008a4c:	2388      	movs	r3, #136	@ 0x88
 8008a4e:	22c0      	movs	r2, #192	@ 0xc0
 8008a50:	2180      	movs	r1, #128	@ 0x80
 8008a52:	4819      	ldr	r0, [pc, #100]	@ (8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008a54:	0092      	lsls	r2, r2, #2
 8008a56:	58c3      	ldr	r3, [r0, r3]
 8008a58:	0089      	lsls	r1, r1, #2
 8008a5a:	4013      	ands	r3, r2
        switch (srcclk)
 8008a5c:	428b      	cmp	r3, r1
 8008a5e:	d01b      	beq.n	8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8008a60:	d834      	bhi.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d100      	bne.n	8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
 8008a66:	e773      	b.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 8008a68:	2280      	movs	r2, #128	@ 0x80
 8008a6a:	0052      	lsls	r2, r2, #1
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d0a0      	beq.n	80089b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
 8008a70:	e6ca      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008a72:	2388      	movs	r3, #136	@ 0x88
 8008a74:	22c0      	movs	r2, #192	@ 0xc0
 8008a76:	2180      	movs	r1, #128	@ 0x80
 8008a78:	480f      	ldr	r0, [pc, #60]	@ (8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008a7a:	0112      	lsls	r2, r2, #4
 8008a7c:	58c3      	ldr	r3, [r0, r3]
 8008a7e:	0109      	lsls	r1, r1, #4
 8008a80:	4013      	ands	r3, r2
        switch (srcclk)
 8008a82:	428b      	cmp	r3, r1
 8008a84:	d008      	beq.n	8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8008a86:	d821      	bhi.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d100      	bne.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x2da>
 8008a8c:	e760      	b.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 8008a8e:	2280      	movs	r2, #128	@ 0x80
 8008a90:	00d2      	lsls	r2, r2, #3
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d08d      	beq.n	80089b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
 8008a96:	e6b7      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a98:	6802      	ldr	r2, [r0, #0]
 8008a9a:	e7b4      	b.n	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a9c:	6802      	ldr	r2, [r0, #0]
 8008a9e:	0010      	movs	r0, r2
 8008aa0:	4018      	ands	r0, r3
 8008aa2:	421a      	tst	r2, r3
 8008aa4:	d100      	bne.n	8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8008aa6:	e6b0      	b.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 8008aa8:	e7b4      	b.n	8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8008aaa:	46c0      	nop			@ (mov r8, r8)
 8008aac:	0800ee68 	.word	0x0800ee68
 8008ab0:	ffff0000 	.word	0xffff0000
 8008ab4:	fffeffff 	.word	0xfffeffff
 8008ab8:	40021000 	.word	0x40021000
 8008abc:	0800ee20 	.word	0x0800ee20
 8008ac0:	0001e848 	.word	0x0001e848
 8008ac4:	00007c06 	.word	0x00007c06
 8008ac8:	00f42400 	.word	0x00f42400
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d000      	beq.n	8008ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008ad0:	e69a      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008ad2:	2390      	movs	r3, #144	@ 0x90
 8008ad4:	58c0      	ldr	r0, [r0, r3]
 8008ad6:	0780      	lsls	r0, r0, #30
 8008ad8:	0fc0      	lsrs	r0, r0, #31
 8008ada:	03c0      	lsls	r0, r0, #15
 8008adc:	e695      	b.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 8008ade:	2bc0      	cmp	r3, #192	@ 0xc0
 8008ae0:	d000      	beq.n	8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
 8008ae2:	e691      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008ae4:	2390      	movs	r3, #144	@ 0x90
 8008ae6:	58d0      	ldr	r0, [r2, r3]
 8008ae8:	0780      	lsls	r0, r0, #30
 8008aea:	0fc0      	lsrs	r0, r0, #31
 8008aec:	03c0      	lsls	r0, r0, #15
 8008aee:	e68c      	b.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 8008af0:	23c0      	movs	r3, #192	@ 0xc0
 8008af2:	041b      	lsls	r3, r3, #16
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d000      	beq.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8008af8:	e686      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8008afa:	4a22      	ldr	r2, [pc, #136]	@ (8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>)
 8008afc:	e7f2      	b.n	8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
 8008afe:	2b0c      	cmp	r3, #12
 8008b00:	d0f0      	beq.n	8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
 8008b02:	e681      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8008b04:	2388      	movs	r3, #136	@ 0x88
 8008b06:	22c0      	movs	r2, #192	@ 0xc0
 8008b08:	2080      	movs	r0, #128	@ 0x80
 8008b0a:	491e      	ldr	r1, [pc, #120]	@ (8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>)
 8008b0c:	0512      	lsls	r2, r2, #20
 8008b0e:	58cb      	ldr	r3, [r1, r3]
 8008b10:	0500      	lsls	r0, r0, #20
 8008b12:	4013      	ands	r3, r2
        switch (srcclk)
 8008b14:	4283      	cmp	r3, r0
 8008b16:	d100      	bne.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8008b18:	e754      	b.n	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d024      	beq.n	8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8008b1e:	2280      	movs	r2, #128	@ 0x80
 8008b20:	2000      	movs	r0, #0
 8008b22:	04d2      	lsls	r2, r2, #19
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d000      	beq.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8008b28:	e66f      	b.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 8008b2a:	e6bb      	b.n	80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008b2c:	2388      	movs	r3, #136	@ 0x88
 8008b2e:	22c0      	movs	r2, #192	@ 0xc0
 8008b30:	2180      	movs	r1, #128	@ 0x80
 8008b32:	4c14      	ldr	r4, [pc, #80]	@ (8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>)
 8008b34:	0392      	lsls	r2, r2, #14
 8008b36:	58e3      	ldr	r3, [r4, r3]
 8008b38:	0389      	lsls	r1, r1, #14
 8008b3a:	4013      	ands	r3, r2
        switch (srcclk)
 8008b3c:	428b      	cmp	r3, r1
 8008b3e:	d01a      	beq.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008b40:	d809      	bhi.n	8008b56 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d100      	bne.n	8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8008b46:	e703      	b.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 8008b48:	2280      	movs	r2, #128	@ 0x80
 8008b4a:	0352      	lsls	r2, r2, #13
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d000      	beq.n	8008b52 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8008b50:	e65a      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008b52:	2194      	movs	r1, #148	@ 0x94
 8008b54:	e70a      	b.n	800896c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d000      	beq.n	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8008b5a:	e655      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008b5c:	2390      	movs	r3, #144	@ 0x90
 8008b5e:	58e0      	ldr	r0, [r4, r3]
 8008b60:	0780      	lsls	r0, r0, #30
 8008b62:	0fc0      	lsrs	r0, r0, #31
 8008b64:	03c0      	lsls	r0, r0, #15
 8008b66:	e650      	b.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
            frequency = HSI48_VALUE;
 8008b68:	4807      	ldr	r0, [pc, #28]	@ (8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>)
 8008b6a:	e64e      	b.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8008b6c:	a801      	add	r0, sp, #4
 8008b6e:	f7ff fdb9 	bl	80086e4 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_P_Frequency;
 8008b72:	9801      	ldr	r0, [sp, #4]
            break;
 8008b74:	e649      	b.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008b76:	6822      	ldr	r2, [r4, #0]
 8008b78:	e745      	b.n	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8008b7a:	2394      	movs	r3, #148	@ 0x94
 8008b7c:	58cb      	ldr	r3, [r1, r3]
 8008b7e:	051b      	lsls	r3, r3, #20
 8008b80:	0f1b      	lsrs	r3, r3, #28
 8008b82:	e69c      	b.n	80088be <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
 8008b84:	40021000 	.word	0x40021000
 8008b88:	02dc6c00 	.word	0x02dc6c00

08008b8c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b8e:	46c6      	mov	lr, r8
 8008b90:	0004      	movs	r4, r0
 8008b92:	b500      	push	{lr}
  HAL_StatusTypeDef status = HAL_ERROR;

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008b94:	2800      	cmp	r0, #0
 8008b96:	d064      	beq.n	8008c62 <HAL_RTC_Init+0xd6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008b98:	232d      	movs	r3, #45	@ 0x2d
 8008b9a:	5cc3      	ldrb	r3, [r0, r3]
 8008b9c:	b2da      	uxtb	r2, r3
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d055      	beq.n	8008c4e <HAL_RTC_Init+0xc2>
      HAL_RTC_MspInit(hrtc);
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008ba2:	232d      	movs	r3, #45	@ 0x2d
 8008ba4:	2202      	movs	r2, #2

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ba6:	4d3a      	ldr	r5, [pc, #232]	@ (8008c90 <HAL_RTC_Init+0x104>)
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008ba8:	54e2      	strb	r2, [r4, r3]
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008baa:	339d      	adds	r3, #157	@ 0x9d
 8008bac:	626b      	str	r3, [r5, #36]	@ 0x24
 8008bae:	3b77      	subs	r3, #119	@ 0x77
 8008bb0:	626b      	str	r3, [r5, #36]	@ 0x24
{
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008bb2:	68eb      	ldr	r3, [r5, #12]
 8008bb4:	065b      	lsls	r3, r3, #25
 8008bb6:	d535      	bpl.n	8008c24 <HAL_RTC_Init+0x98>
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8008bb8:	4d35      	ldr	r5, [pc, #212]	@ (8008c90 <HAL_RTC_Init+0x104>)
 8008bba:	4a36      	ldr	r2, [pc, #216]	@ (8008c94 <HAL_RTC_Init+0x108>)
 8008bbc:	69ab      	ldr	r3, [r5, #24]
 8008bbe:	4013      	ands	r3, r2
 8008bc0:	61ab      	str	r3, [r5, #24]
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8008bc2:	6921      	ldr	r1, [r4, #16]
 8008bc4:	6863      	ldr	r3, [r4, #4]
 8008bc6:	69aa      	ldr	r2, [r5, #24]
 8008bc8:	430b      	orrs	r3, r1
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	69a2      	ldr	r2, [r4, #24]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	61ab      	str	r3, [r5, #24]
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8008bd2:	68a3      	ldr	r3, [r4, #8]
 8008bd4:	68e2      	ldr	r2, [r4, #12]
 8008bd6:	041b      	lsls	r3, r3, #16
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	612b      	str	r3, [r5, #16]
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8008bdc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8008bde:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008be0:	68ea      	ldr	r2, [r5, #12]
 8008be2:	430b      	orrs	r3, r1
 8008be4:	492c      	ldr	r1, [pc, #176]	@ (8008c98 <HAL_RTC_Init+0x10c>)
 8008be6:	400a      	ands	r2, r1
 8008be8:	4313      	orrs	r3, r2
      CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008bea:	2280      	movs	r2, #128	@ 0x80
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8008bec:	60eb      	str	r3, [r5, #12]
      CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008bee:	68eb      	ldr	r3, [r5, #12]
 8008bf0:	4393      	bics	r3, r2
 8008bf2:	60eb      	str	r3, [r5, #12]
      if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008bf4:	2320      	movs	r3, #32
 8008bf6:	69aa      	ldr	r2, [r5, #24]
 8008bf8:	4213      	tst	r3, r2
 8008bfa:	d034      	beq.n	8008c66 <HAL_RTC_Init+0xda>
        MODIFY_REG(RTC->CR, \
 8008bfc:	4924      	ldr	r1, [pc, #144]	@ (8008c90 <HAL_RTC_Init+0x104>)
 8008bfe:	69e0      	ldr	r0, [r4, #28]
 8008c00:	698a      	ldr	r2, [r1, #24]
 8008c02:	6a23      	ldr	r3, [r4, #32]
 8008c04:	00d2      	lsls	r2, r2, #3
 8008c06:	4303      	orrs	r3, r0
 8008c08:	08d2      	lsrs	r2, r2, #3
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	6962      	ldr	r2, [r4, #20]
        hrtc->State = HAL_RTC_STATE_READY;
 8008c0e:	2000      	movs	r0, #0
        MODIFY_REG(RTC->CR, \
 8008c10:	4313      	orrs	r3, r2
 8008c12:	618b      	str	r3, [r1, #24]
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c14:	23ff      	movs	r3, #255	@ 0xff
        hrtc->State = HAL_RTC_STATE_READY;
 8008c16:	2201      	movs	r2, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c18:	624b      	str	r3, [r1, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_READY;
 8008c1a:	3bd2      	subs	r3, #210	@ 0xd2
 8008c1c:	54e2      	strb	r2, [r4, r3]
}
 8008c1e:	bc80      	pop	{r7}
 8008c20:	46b8      	mov	r8, r7
 8008c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008c24:	68eb      	ldr	r3, [r5, #12]
 8008c26:	327e      	adds	r2, #126	@ 0x7e
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	60eb      	str	r3, [r5, #12]

    tickstart = HAL_GetTick();
 8008c2c:	f7fe fb7e 	bl	800732c <HAL_GetTick>
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008c30:	23fa      	movs	r3, #250	@ 0xfa
 8008c32:	009b      	lsls	r3, r3, #2
    tickstart = HAL_GetTick();
 8008c34:	0006      	movs	r6, r0
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008c36:	2740      	movs	r7, #64	@ 0x40
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008c38:	4698      	mov	r8, r3
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008c3a:	e004      	b.n	8008c46 <HAL_RTC_Init+0xba>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008c3c:	f7fe fb76 	bl	800732c <HAL_GetTick>
 8008c40:	1b80      	subs	r0, r0, r6
 8008c42:	4540      	cmp	r0, r8
 8008c44:	d808      	bhi.n	8008c58 <HAL_RTC_Init+0xcc>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008c46:	68eb      	ldr	r3, [r5, #12]
 8008c48:	421f      	tst	r7, r3
 8008c4a:	d0f7      	beq.n	8008c3c <HAL_RTC_Init+0xb0>
 8008c4c:	e7b4      	b.n	8008bb8 <HAL_RTC_Init+0x2c>
      hrtc->Lock = HAL_UNLOCKED;
 8008c4e:	332c      	adds	r3, #44	@ 0x2c
 8008c50:	54c2      	strb	r2, [r0, r3]
      HAL_RTC_MspInit(hrtc);
 8008c52:	f7fe f941 	bl	8006ed8 <HAL_RTC_MspInit>
 8008c56:	e7a4      	b.n	8008ba2 <HAL_RTC_Init+0x16>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c58:	23ff      	movs	r3, #255	@ 0xff
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008c5a:	2204      	movs	r2, #4
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c5c:	626b      	str	r3, [r5, #36]	@ 0x24
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008c5e:	3bd2      	subs	r3, #210	@ 0xd2
 8008c60:	54e2      	strb	r2, [r4, r3]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008c62:	2001      	movs	r0, #1
 8008c64:	e7db      	b.n	8008c1e <HAL_RTC_Init+0x92>
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8008c66:	68ea      	ldr	r2, [r5, #12]
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008c68:	2720      	movs	r7, #32
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8008c6a:	439a      	bics	r2, r3
 8008c6c:	60ea      	str	r2, [r5, #12]
  tickstart = HAL_GetTick();
 8008c6e:	f7fe fb5d 	bl	800732c <HAL_GetTick>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008c72:	23fa      	movs	r3, #250	@ 0xfa
 8008c74:	009b      	lsls	r3, r3, #2
  tickstart = HAL_GetTick();
 8008c76:	0006      	movs	r6, r0
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008c78:	4698      	mov	r8, r3
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008c7a:	e004      	b.n	8008c86 <HAL_RTC_Init+0xfa>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008c7c:	f7fe fb56 	bl	800732c <HAL_GetTick>
 8008c80:	1b80      	subs	r0, r0, r6
 8008c82:	4540      	cmp	r0, r8
 8008c84:	d8e8      	bhi.n	8008c58 <HAL_RTC_Init+0xcc>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008c86:	68eb      	ldr	r3, [r5, #12]
 8008c88:	421f      	tst	r7, r3
 8008c8a:	d0f7      	beq.n	8008c7c <HAL_RTC_Init+0xf0>
 8008c8c:	e7b6      	b.n	8008bfc <HAL_RTC_Init+0x70>
 8008c8e:	46c0      	nop			@ (mov r8, r8)
 8008c90:	40002800 	.word	0x40002800
 8008c94:	fb8fffbf 	.word	0xfb8fffbf
 8008c98:	ffffe0ff 	.word	0xffffe0ff

08008c9c <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                         EXTI is configured as EVENT instead of Interrupt to avoid useless IRQ handler execution.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock,
                                              uint32_t WakeUpAutoClr)
{
 8008c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c9e:	464e      	mov	r6, r9
 8008ca0:	46de      	mov	lr, fp
 8008ca2:	4657      	mov	r7, sl
 8008ca4:	4645      	mov	r5, r8
 8008ca6:	4699      	mov	r9, r3
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008ca8:	232c      	movs	r3, #44	@ 0x2c
{
 8008caa:	b5e0      	push	{r5, r6, r7, lr}
 8008cac:	4692      	mov	sl, r2
  __HAL_LOCK(hrtc);
 8008cae:	5cc2      	ldrb	r2, [r0, r3]
{
 8008cb0:	0006      	movs	r6, r0
 8008cb2:	468b      	mov	fp, r1
  __HAL_LOCK(hrtc);
 8008cb4:	2a01      	cmp	r2, #1
 8008cb6:	d067      	beq.n	8008d88 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>
 8008cb8:	2201      	movs	r2, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if (READ_BIT(RTC->CR, RTC_CR_WUTE) != 0U)
 8008cba:	4c34      	ldr	r4, [pc, #208]	@ (8008d8c <HAL_RTCEx_SetWakeUpTimer_IT+0xf0>)
  __HAL_LOCK(hrtc);
 8008cbc:	54c2      	strb	r2, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	3201      	adds	r2, #1
 8008cc2:	54c2      	strb	r2, [r0, r3]
  if (READ_BIT(RTC->CR, RTC_CR_WUTE) != 0U)
 8008cc4:	69a3      	ldr	r3, [r4, #24]
 8008cc6:	055b      	lsls	r3, r3, #21
 8008cc8:	d50f      	bpl.n	8008cea <HAL_RTCEx_SetWakeUpTimer_IT+0x4e>
  {
    tickstart = HAL_GetTick();
 8008cca:	f7fe fb2f 	bl	800732c <HAL_GetTick>

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008cce:	23fa      	movs	r3, #250	@ 0xfa
 8008cd0:	009b      	lsls	r3, r3, #2
    tickstart = HAL_GetTick();
 8008cd2:	0005      	movs	r5, r0
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 8008cd4:	2704      	movs	r7, #4
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008cd6:	4698      	mov	r8, r3
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 8008cd8:	e004      	b.n	8008ce4 <HAL_RTCEx_SetWakeUpTimer_IT+0x48>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008cda:	f7fe fb27 	bl	800732c <HAL_GetTick>
 8008cde:	1b40      	subs	r0, r0, r5
 8008ce0:	4540      	cmp	r0, r8
 8008ce2:	d84b      	bhi.n	8008d7c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 8008ce4:	68e3      	ldr	r3, [r4, #12]
 8008ce6:	421f      	tst	r7, r3
 8008ce8:	d1f7      	bne.n	8008cda <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Disable the Wake-Up timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8008cea:	4c28      	ldr	r4, [pc, #160]	@ (8008d8c <HAL_RTCEx_SetWakeUpTimer_IT+0xf0>)
 8008cec:	4a28      	ldr	r2, [pc, #160]	@ (8008d90 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 8008cee:	69a3      	ldr	r3, [r4, #24]
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);

  tickstart = HAL_GetTick();

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8008cf0:	2704      	movs	r7, #4
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	61a3      	str	r3, [r4, #24]
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8008cf6:	2304      	movs	r3, #4
 8008cf8:	65e3      	str	r3, [r4, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8008cfa:	f7fe fb17 	bl	800732c <HAL_GetTick>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008cfe:	23fa      	movs	r3, #250	@ 0xfa
 8008d00:	009b      	lsls	r3, r3, #2
  tickstart = HAL_GetTick();
 8008d02:	0005      	movs	r5, r0
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008d04:	4698      	mov	r8, r3
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8008d06:	e004      	b.n	8008d12 <HAL_RTCEx_SetWakeUpTimer_IT+0x76>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008d08:	f7fe fb10 	bl	800732c <HAL_GetTick>
 8008d0c:	1b40      	subs	r0, r0, r5
 8008d0e:	4540      	cmp	r0, r8
 8008d10:	d82a      	bhi.n	8008d68 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8008d12:	68e3      	ldr	r3, [r4, #12]
 8008d14:	421f      	tst	r7, r3
 8008d16:	d0f7      	beq.n	8008d08 <HAL_RTCEx_SetWakeUpTimer_IT+0x6c>
      return HAL_TIMEOUT;
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 8008d18:	464b      	mov	r3, r9
 8008d1a:	465a      	mov	r2, fp
 8008d1c:	041b      	lsls	r3, r3, #16
 8008d1e:	4313      	orrs	r3, r2

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8008d20:	2207      	movs	r2, #7
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 8008d22:	6163      	str	r3, [r4, #20]
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8008d24:	69a3      	ldr	r3, [r4, #24]

  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0U)
  {
    /* RTC WakeUpTimer EXTI Configuration: Event configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 8008d26:	491b      	ldr	r1, [pc, #108]	@ (8008d94 <HAL_RTCEx_SetWakeUpTimer_IT+0xf8>)
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8008d28:	4393      	bics	r3, r2
 8008d2a:	4652      	mov	r2, sl
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	61a3      	str	r3, [r4, #24]
  if (WakeUpAutoClr != 0U)
 8008d30:	464b      	mov	r3, r9
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 8008d32:	2284      	movs	r2, #132	@ 0x84
  if (WakeUpAutoClr != 0U)
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d025      	beq.n	8008d84 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
  }
  else
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8008d38:	2380      	movs	r3, #128	@ 0x80
 8008d3a:	5888      	ldr	r0, [r1, r2]
 8008d3c:	055b      	lsls	r3, r3, #21
 8008d3e:	4303      	orrs	r3, r0
 8008d40:	508b      	str	r3, [r1, r2]
  }

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 8008d42:	2388      	movs	r3, #136	@ 0x88
 8008d44:	4a11      	ldr	r2, [pc, #68]	@ (8008d8c <HAL_RTCEx_SetWakeUpTimer_IT+0xf0>)
 8008d46:	01db      	lsls	r3, r3, #7
 8008d48:	6991      	ldr	r1, [r2, #24]
  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);

  return HAL_OK;
 8008d4a:	2000      	movs	r0, #0
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 8008d4c:	430b      	orrs	r3, r1
 8008d4e:	6193      	str	r3, [r2, #24]
  hrtc->State = HAL_RTC_STATE_READY;
 8008d50:	232d      	movs	r3, #45	@ 0x2d
 8008d52:	2201      	movs	r2, #1
 8008d54:	54f2      	strb	r2, [r6, r3]
  __HAL_UNLOCK(hrtc);
 8008d56:	2200      	movs	r2, #0
 8008d58:	3b01      	subs	r3, #1
 8008d5a:	54f2      	strb	r2, [r6, r3]
}
 8008d5c:	bcf0      	pop	{r4, r5, r6, r7}
 8008d5e:	46bb      	mov	fp, r7
 8008d60:	46b2      	mov	sl, r6
 8008d62:	46a9      	mov	r9, r5
 8008d64:	46a0      	mov	r8, r4
 8008d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d68:	23ff      	movs	r3, #255	@ 0xff
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008d6a:	2203      	movs	r2, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d6c:	6263      	str	r3, [r4, #36]	@ 0x24
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008d6e:	3bd2      	subs	r3, #210	@ 0xd2
 8008d70:	54f2      	strb	r2, [r6, r3]
      __HAL_UNLOCK(hrtc);
 8008d72:	232c      	movs	r3, #44	@ 0x2c
 8008d74:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 8008d76:	2003      	movs	r0, #3
      __HAL_UNLOCK(hrtc);
 8008d78:	54f2      	strb	r2, [r6, r3]
 8008d7a:	e7ef      	b.n	8008d5c <HAL_RTCEx_SetWakeUpTimer_IT+0xc0>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008d7c:	232d      	movs	r3, #45	@ 0x2d
 8008d7e:	2203      	movs	r2, #3
 8008d80:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 8008d82:	e7f6      	b.n	8008d72 <HAL_RTCEx_SetWakeUpTimer_IT+0xd6>
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8008d84:	2280      	movs	r2, #128	@ 0x80
 8008d86:	e7d7      	b.n	8008d38 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  __HAL_LOCK(hrtc);
 8008d88:	2002      	movs	r0, #2
 8008d8a:	e7e7      	b.n	8008d5c <HAL_RTCEx_SetWakeUpTimer_IT+0xc0>
 8008d8c:	40002800 	.word	0x40002800
 8008d90:	fffffbff 	.word	0xfffffbff
 8008d94:	40021800 	.word	0x40021800

08008d98 <HAL_RTCEx_WakeUpTimerEventCallback>:
/**
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
 8008d98:	4770      	bx	lr
 8008d9a:	46c0      	nop			@ (mov r8, r8)

08008d9c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 8008d9c:	2204      	movs	r2, #4
 8008d9e:	4b07      	ldr	r3, [pc, #28]	@ (8008dbc <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>)
{
 8008da0:	b510      	push	{r4, lr}
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 8008da2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
{
 8008da4:	0004      	movs	r4, r0
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 8008da6:	420a      	tst	r2, r1
 8008da8:	d103      	bne.n	8008db2 <HAL_RTCEx_WakeUpTimerIRQHandler+0x16>
  hrtc->State = HAL_RTC_STATE_READY;
 8008daa:	232d      	movs	r3, #45	@ 0x2d
 8008dac:	2201      	movs	r2, #1
 8008dae:	54e2      	strb	r2, [r4, r3]
}
 8008db0:	bd10      	pop	{r4, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8008db2:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8008db4:	f7ff fff0 	bl	8008d98 <HAL_RTCEx_WakeUpTimerEventCallback>
 8008db8:	e7f7      	b.n	8008daa <HAL_RTCEx_WakeUpTimerIRQHandler+0xe>
 8008dba:	46c0      	nop			@ (mov r8, r8)
 8008dbc:	40002800 	.word	0x40002800

08008dc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dc2:	46de      	mov	lr, fp
 8008dc4:	4657      	mov	r7, sl
 8008dc6:	464e      	mov	r6, r9
 8008dc8:	4645      	mov	r5, r8
 8008dca:	0004      	movs	r4, r0
 8008dcc:	b5e0      	push	{r5, r6, r7, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	d100      	bne.n	8008dd4 <HAL_SPI_Init+0x14>
 8008dd2:	e08e      	b.n	8008ef2 <HAL_SPI_Init+0x132>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008dd4:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 8008dd6:	2d00      	cmp	r5, #0
 8008dd8:	d064      	beq.n	8008ea4 <HAL_SPI_Init+0xe4>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008dde:	6143      	str	r3, [r0, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008de0:	2300      	movs	r3, #0
 8008de2:	62a3      	str	r3, [r4, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008de4:	335d      	adds	r3, #93	@ 0x5d
 8008de6:	5ce3      	ldrb	r3, [r4, r3]
 8008de8:	b2da      	uxtb	r2, r3
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d067      	beq.n	8008ebe <HAL_SPI_Init+0xfe>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008dee:	235d      	movs	r3, #93	@ 0x5d
 8008df0:	2202      	movs	r2, #2
 8008df2:	54e2      	strb	r2, [r4, r3]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008df4:	6821      	ldr	r1, [r4, #0]
 8008df6:	323e      	adds	r2, #62	@ 0x3e
 8008df8:	680b      	ldr	r3, [r1, #0]
 8008dfa:	4393      	bics	r3, r2
 8008dfc:	600b      	str	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008dfe:	23e0      	movs	r3, #224	@ 0xe0
 8008e00:	68e2      	ldr	r2, [r4, #12]
 8008e02:	00db      	lsls	r3, r3, #3
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d861      	bhi.n	8008ecc <HAL_SPI_Init+0x10c>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008e08:	d16c      	bne.n	8008ee4 <HAL_SPI_Init+0x124>
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008e0a:	2380      	movs	r3, #128	@ 0x80
 8008e0c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8008e0e:	019b      	lsls	r3, r3, #6
 8008e10:	4018      	ands	r0, r3
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008e12:	2380      	movs	r3, #128	@ 0x80
 8008e14:	015b      	lsls	r3, r3, #5
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008e16:	4684      	mov	ip, r0
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008e18:	469b      	mov	fp, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008e1a:	2682      	movs	r6, #130	@ 0x82
 8008e1c:	2784      	movs	r7, #132	@ 0x84
 8008e1e:	6863      	ldr	r3, [r4, #4]
 8008e20:	0076      	lsls	r6, r6, #1
 8008e22:	4033      	ands	r3, r6
 8008e24:	68a6      	ldr	r6, [r4, #8]
 8008e26:	023f      	lsls	r7, r7, #8
 8008e28:	403e      	ands	r6, r7
 8008e2a:	2702      	movs	r7, #2
 8008e2c:	4333      	orrs	r3, r6
 8008e2e:	6926      	ldr	r6, [r4, #16]
 8008e30:	69a0      	ldr	r0, [r4, #24]
 8008e32:	403e      	ands	r6, r7
 8008e34:	4333      	orrs	r3, r6
 8008e36:	2601      	movs	r6, #1
 8008e38:	6967      	ldr	r7, [r4, #20]
 8008e3a:	46b2      	mov	sl, r6
 8008e3c:	4037      	ands	r7, r6
 8008e3e:	433b      	orrs	r3, r7
 8008e40:	2780      	movs	r7, #128	@ 0x80
 8008e42:	00bf      	lsls	r7, r7, #2
 8008e44:	4007      	ands	r7, r0
 8008e46:	433b      	orrs	r3, r7
 8008e48:	69e7      	ldr	r7, [r4, #28]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008e4a:	0c00      	lsrs	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008e4c:	46b8      	mov	r8, r7
 8008e4e:	2738      	movs	r7, #56	@ 0x38
 8008e50:	46b9      	mov	r9, r7
 8008e52:	4647      	mov	r7, r8
 8008e54:	464e      	mov	r6, r9
 8008e56:	4037      	ands	r7, r6
 8008e58:	6a26      	ldr	r6, [r4, #32]
 8008e5a:	433b      	orrs	r3, r7
 8008e5c:	46b0      	mov	r8, r6
 8008e5e:	2680      	movs	r6, #128	@ 0x80
 8008e60:	4647      	mov	r7, r8
 8008e62:	4037      	ands	r7, r6
 8008e64:	4666      	mov	r6, ip
 8008e66:	433b      	orrs	r3, r7
 8008e68:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008e6a:	2608      	movs	r6, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008e6c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008e6e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008e70:	4033      	ands	r3, r6
 8008e72:	26f0      	movs	r6, #240	@ 0xf0
 8008e74:	0136      	lsls	r6, r6, #4
 8008e76:	4032      	ands	r2, r6
 8008e78:	431a      	orrs	r2, r3
 8008e7a:	2304      	movs	r3, #4
 8008e7c:	4003      	ands	r3, r0
 8008e7e:	431a      	orrs	r2, r3
 8008e80:	2310      	movs	r3, #16
 8008e82:	402b      	ands	r3, r5
 8008e84:	431a      	orrs	r2, r3
 8008e86:	465b      	mov	r3, fp
 8008e88:	431a      	orrs	r2, r3
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e8a:	2300      	movs	r3, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008e8c:	604a      	str	r2, [r1, #4]
  hspi->State     = HAL_SPI_STATE_READY;
 8008e8e:	4652      	mov	r2, sl

  return HAL_OK;
 8008e90:	2000      	movs	r0, #0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e92:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008e94:	335d      	adds	r3, #93	@ 0x5d
 8008e96:	54e2      	strb	r2, [r4, r3]
}
 8008e98:	bcf0      	pop	{r4, r5, r6, r7}
 8008e9a:	46bb      	mov	fp, r7
 8008e9c:	46b2      	mov	sl, r6
 8008e9e:	46a9      	mov	r9, r5
 8008ea0:	46a0      	mov	r8, r4
 8008ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ea4:	2382      	movs	r3, #130	@ 0x82
 8008ea6:	6842      	ldr	r2, [r0, #4]
 8008ea8:	005b      	lsls	r3, r3, #1
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d098      	beq.n	8008de0 <HAL_SPI_Init+0x20>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008eae:	2300      	movs	r3, #0
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008eb0:	61c5      	str	r5, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008eb2:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8008eb4:	335d      	adds	r3, #93	@ 0x5d
 8008eb6:	5ce3      	ldrb	r3, [r4, r3]
 8008eb8:	b2da      	uxtb	r2, r3
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d197      	bne.n	8008dee <HAL_SPI_Init+0x2e>
    hspi->Lock = HAL_UNLOCKED;
 8008ebe:	335c      	adds	r3, #92	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8008ec0:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8008ec2:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 8008ec4:	f7fe f86a 	bl	8006f9c <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008ec8:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008eca:	e790      	b.n	8008dee <HAL_SPI_Init+0x2e>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008ecc:	23f0      	movs	r3, #240	@ 0xf0
 8008ece:	011b      	lsls	r3, r3, #4
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d110      	bne.n	8008ef6 <HAL_SPI_Init+0x136>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008ed4:	2380      	movs	r3, #128	@ 0x80
 8008ed6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8008ed8:	019b      	lsls	r3, r3, #6
 8008eda:	4018      	ands	r0, r3
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008edc:	2300      	movs	r3, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008ede:	4684      	mov	ip, r0
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008ee0:	469b      	mov	fp, r3
 8008ee2:	e79a      	b.n	8008e1a <HAL_SPI_Init+0x5a>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008ee4:	2380      	movs	r3, #128	@ 0x80
 8008ee6:	015b      	lsls	r3, r3, #5
 8008ee8:	469b      	mov	fp, r3
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008eea:	2300      	movs	r3, #0
 8008eec:	469c      	mov	ip, r3
 8008eee:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008ef0:	e793      	b.n	8008e1a <HAL_SPI_Init+0x5a>
    return HAL_ERROR;
 8008ef2:	2001      	movs	r0, #1
 8008ef4:	e7d0      	b.n	8008e98 <HAL_SPI_Init+0xd8>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	469b      	mov	fp, r3
 8008efa:	e7f6      	b.n	8008eea <HAL_SPI_Init+0x12a>

08008efc <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008efc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 8008efe:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f00:	071a      	lsls	r2, r3, #28
 8008f02:	d506      	bpl.n	8008f12 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f04:	6801      	ldr	r1, [r0, #0]
 8008f06:	4c28      	ldr	r4, [pc, #160]	@ (8008fa8 <UART_AdvFeatureConfig+0xac>)
 8008f08:	684a      	ldr	r2, [r1, #4]
 8008f0a:	4022      	ands	r2, r4
 8008f0c:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8008f0e:	4322      	orrs	r2, r4
 8008f10:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f12:	07da      	lsls	r2, r3, #31
 8008f14:	d506      	bpl.n	8008f24 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f16:	6801      	ldr	r1, [r0, #0]
 8008f18:	4c24      	ldr	r4, [pc, #144]	@ (8008fac <UART_AdvFeatureConfig+0xb0>)
 8008f1a:	684a      	ldr	r2, [r1, #4]
 8008f1c:	4022      	ands	r2, r4
 8008f1e:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8008f20:	4322      	orrs	r2, r4
 8008f22:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f24:	079a      	lsls	r2, r3, #30
 8008f26:	d506      	bpl.n	8008f36 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f28:	6801      	ldr	r1, [r0, #0]
 8008f2a:	4c21      	ldr	r4, [pc, #132]	@ (8008fb0 <UART_AdvFeatureConfig+0xb4>)
 8008f2c:	684a      	ldr	r2, [r1, #4]
 8008f2e:	4022      	ands	r2, r4
 8008f30:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8008f32:	4322      	orrs	r2, r4
 8008f34:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f36:	075a      	lsls	r2, r3, #29
 8008f38:	d506      	bpl.n	8008f48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f3a:	6801      	ldr	r1, [r0, #0]
 8008f3c:	4c1d      	ldr	r4, [pc, #116]	@ (8008fb4 <UART_AdvFeatureConfig+0xb8>)
 8008f3e:	684a      	ldr	r2, [r1, #4]
 8008f40:	4022      	ands	r2, r4
 8008f42:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8008f44:	4322      	orrs	r2, r4
 8008f46:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f48:	06da      	lsls	r2, r3, #27
 8008f4a:	d506      	bpl.n	8008f5a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f4c:	6801      	ldr	r1, [r0, #0]
 8008f4e:	4c1a      	ldr	r4, [pc, #104]	@ (8008fb8 <UART_AdvFeatureConfig+0xbc>)
 8008f50:	688a      	ldr	r2, [r1, #8]
 8008f52:	4022      	ands	r2, r4
 8008f54:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8008f56:	4322      	orrs	r2, r4
 8008f58:	608a      	str	r2, [r1, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f5a:	069a      	lsls	r2, r3, #26
 8008f5c:	d506      	bpl.n	8008f6c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f5e:	6801      	ldr	r1, [r0, #0]
 8008f60:	4c16      	ldr	r4, [pc, #88]	@ (8008fbc <UART_AdvFeatureConfig+0xc0>)
 8008f62:	688a      	ldr	r2, [r1, #8]
 8008f64:	4022      	ands	r2, r4
 8008f66:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8008f68:	4322      	orrs	r2, r4
 8008f6a:	608a      	str	r2, [r1, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f6c:	065a      	lsls	r2, r3, #25
 8008f6e:	d50a      	bpl.n	8008f86 <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f70:	6801      	ldr	r1, [r0, #0]
 8008f72:	4d13      	ldr	r5, [pc, #76]	@ (8008fc0 <UART_AdvFeatureConfig+0xc4>)
 8008f74:	684a      	ldr	r2, [r1, #4]
 8008f76:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8008f78:	402a      	ands	r2, r5
 8008f7a:	4322      	orrs	r2, r4
 8008f7c:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f7e:	2280      	movs	r2, #128	@ 0x80
 8008f80:	0352      	lsls	r2, r2, #13
 8008f82:	4294      	cmp	r4, r2
 8008f84:	d009      	beq.n	8008f9a <UART_AdvFeatureConfig+0x9e>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f86:	061b      	lsls	r3, r3, #24
 8008f88:	d506      	bpl.n	8008f98 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f8a:	6802      	ldr	r2, [r0, #0]
 8008f8c:	490d      	ldr	r1, [pc, #52]	@ (8008fc4 <UART_AdvFeatureConfig+0xc8>)
 8008f8e:	6853      	ldr	r3, [r2, #4]
 8008f90:	400b      	ands	r3, r1
 8008f92:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8008f94:	430b      	orrs	r3, r1
 8008f96:	6053      	str	r3, [r2, #4]
  }
}
 8008f98:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f9a:	684a      	ldr	r2, [r1, #4]
 8008f9c:	4c0a      	ldr	r4, [pc, #40]	@ (8008fc8 <UART_AdvFeatureConfig+0xcc>)
 8008f9e:	4022      	ands	r2, r4
 8008fa0:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8008fa2:	4322      	orrs	r2, r4
 8008fa4:	604a      	str	r2, [r1, #4]
 8008fa6:	e7ee      	b.n	8008f86 <UART_AdvFeatureConfig+0x8a>
 8008fa8:	ffff7fff 	.word	0xffff7fff
 8008fac:	fffdffff 	.word	0xfffdffff
 8008fb0:	fffeffff 	.word	0xfffeffff
 8008fb4:	fffbffff 	.word	0xfffbffff
 8008fb8:	ffffefff 	.word	0xffffefff
 8008fbc:	ffffdfff 	.word	0xffffdfff
 8008fc0:	ffefffff 	.word	0xffefffff
 8008fc4:	fff7ffff 	.word	0xfff7ffff
 8008fc8:	ff9fffff 	.word	0xff9fffff

08008fcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fce:	2390      	movs	r3, #144	@ 0x90
 8008fd0:	2200      	movs	r2, #0
{
 8008fd2:	46c6      	mov	lr, r8
 8008fd4:	0004      	movs	r4, r0
 8008fd6:	b500      	push	{lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fd8:	50c2      	str	r2, [r0, r3]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008fda:	f7fe f9a7 	bl	800732c <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008fde:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8008fe0:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	0712      	lsls	r2, r2, #28
 8008fe6:	d411      	bmi.n	800900c <UART_CheckIdleState+0x40>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008fe8:	681a      	ldr	r2, [r3, #0]
 8008fea:	0752      	lsls	r2, r2, #29
 8008fec:	d43e      	bmi.n	800906c <UART_CheckIdleState+0xa0>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008fee:	2320      	movs	r3, #32
 8008ff0:	2288      	movs	r2, #136	@ 0x88
 8008ff2:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008ff4:	3204      	adds	r2, #4
 8008ff6:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ff8:	2300      	movs	r3, #0
  huart->RxEventType = HAL_UART_RXEVENT_TC;

  __HAL_UNLOCK(huart);

  return HAL_OK;
 8008ffa:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ffc:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ffe:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 8009000:	2384      	movs	r3, #132	@ 0x84
 8009002:	2200      	movs	r2, #0
 8009004:	54e2      	strb	r2, [r4, r3]
}
 8009006:	bc80      	pop	{r7}
 8009008:	46b8      	mov	r8, r7
 800900a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800900c:	69da      	ldr	r2, [r3, #28]
 800900e:	0292      	lsls	r2, r2, #10
 8009010:	d4ea      	bmi.n	8008fe8 <UART_CheckIdleState+0x1c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009012:	2680      	movs	r6, #128	@ 0x80
        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009014:	2308      	movs	r3, #8
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009016:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009018:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800901a:	04b6      	lsls	r6, r6, #18
 800901c:	e010      	b.n	8009040 <UART_CheckIdleState+0x74>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800901e:	6823      	ldr	r3, [r4, #0]
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	4217      	tst	r7, r2
 8009024:	d009      	beq.n	800903a <UART_CheckIdleState+0x6e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009026:	4641      	mov	r1, r8
 8009028:	69da      	ldr	r2, [r3, #28]
 800902a:	4211      	tst	r1, r2
 800902c:	d159      	bne.n	80090e2 <UART_CheckIdleState+0x116>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800902e:	2280      	movs	r2, #128	@ 0x80
 8009030:	69d9      	ldr	r1, [r3, #28]
 8009032:	0112      	lsls	r2, r2, #4
 8009034:	4211      	tst	r1, r2
 8009036:	d000      	beq.n	800903a <UART_CheckIdleState+0x6e>
 8009038:	e085      	b.n	8009146 <UART_CheckIdleState+0x17a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800903a:	69da      	ldr	r2, [r3, #28]
 800903c:	0292      	lsls	r2, r2, #10
 800903e:	d4d3      	bmi.n	8008fe8 <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009040:	f7fe f974 	bl	800732c <HAL_GetTick>
 8009044:	1b40      	subs	r0, r0, r5
 8009046:	42b0      	cmp	r0, r6
 8009048:	d3e9      	bcc.n	800901e <UART_CheckIdleState+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800904a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800904e:	2301      	movs	r3, #1
 8009050:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009054:	2080      	movs	r0, #128	@ 0x80
 8009056:	6822      	ldr	r2, [r4, #0]
 8009058:	6813      	ldr	r3, [r2, #0]
 800905a:	4383      	bics	r3, r0
 800905c:	6013      	str	r3, [r2, #0]
 800905e:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8009062:	2388      	movs	r3, #136	@ 0x88
 8009064:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8009066:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 8009068:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 800906a:	e7c9      	b.n	8009000 <UART_CheckIdleState+0x34>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800906c:	69db      	ldr	r3, [r3, #28]
 800906e:	025b      	lsls	r3, r3, #9
 8009070:	d4bd      	bmi.n	8008fee <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009072:	2680      	movs	r6, #128	@ 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009074:	2308      	movs	r3, #8
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009076:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009078:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800907a:	04b6      	lsls	r6, r6, #18
 800907c:	e011      	b.n	80090a2 <UART_CheckIdleState+0xd6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800907e:	6823      	ldr	r3, [r4, #0]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	4217      	tst	r7, r2
 8009084:	d00a      	beq.n	800909c <UART_CheckIdleState+0xd0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009086:	4641      	mov	r1, r8
 8009088:	69da      	ldr	r2, [r3, #28]
 800908a:	4211      	tst	r1, r2
 800908c:	d000      	beq.n	8009090 <UART_CheckIdleState+0xc4>
 800908e:	e08b      	b.n	80091a8 <UART_CheckIdleState+0x1dc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009090:	2280      	movs	r2, #128	@ 0x80
 8009092:	69d9      	ldr	r1, [r3, #28]
 8009094:	0112      	lsls	r2, r2, #4
 8009096:	4211      	tst	r1, r2
 8009098:	d000      	beq.n	800909c <UART_CheckIdleState+0xd0>
 800909a:	e0b7      	b.n	800920c <UART_CheckIdleState+0x240>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800909c:	69db      	ldr	r3, [r3, #28]
 800909e:	025b      	lsls	r3, r3, #9
 80090a0:	d4a5      	bmi.n	8008fee <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090a2:	f7fe f943 	bl	800732c <HAL_GetTick>
 80090a6:	1b40      	subs	r0, r0, r5
 80090a8:	42b0      	cmp	r0, r6
 80090aa:	d3e8      	bcc.n	800907e <UART_CheckIdleState+0xb2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80090ac:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090b0:	2201      	movs	r2, #1
 80090b2:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090b6:	6821      	ldr	r1, [r4, #0]
 80090b8:	4d6d      	ldr	r5, [pc, #436]	@ (8009270 <UART_CheckIdleState+0x2a4>)
 80090ba:	680b      	ldr	r3, [r1, #0]
 80090bc:	402b      	ands	r3, r5
 80090be:	600b      	str	r3, [r1, #0]
 80090c0:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80090c4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090c8:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090cc:	6821      	ldr	r1, [r4, #0]
 80090ce:	688b      	ldr	r3, [r1, #8]
 80090d0:	4393      	bics	r3, r2
 80090d2:	608b      	str	r3, [r1, #8]
 80090d4:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 80090d8:	238c      	movs	r3, #140	@ 0x8c
 80090da:	321f      	adds	r2, #31
      return HAL_TIMEOUT;
 80090dc:	2003      	movs	r0, #3
      huart->RxState = HAL_UART_STATE_READY;
 80090de:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 80090e0:	e78e      	b.n	8009000 <UART_CheckIdleState+0x34>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80090e2:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80090e4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090e8:	2201      	movs	r2, #1
 80090ea:	f382 8810 	msr	PRIMASK, r2
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090ee:	6821      	ldr	r1, [r4, #0]
 80090f0:	4d5f      	ldr	r5, [pc, #380]	@ (8009270 <UART_CheckIdleState+0x2a4>)
 80090f2:	680b      	ldr	r3, [r1, #0]
 80090f4:	402b      	ands	r3, r5
 80090f6:	600b      	str	r3, [r1, #0]
 80090f8:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80090fc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009100:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009104:	6822      	ldr	r2, [r4, #0]
 8009106:	485b      	ldr	r0, [pc, #364]	@ (8009274 <UART_CheckIdleState+0x2a8>)
 8009108:	6893      	ldr	r3, [r2, #8]
 800910a:	4003      	ands	r3, r0
 800910c:	6093      	str	r3, [r2, #8]
 800910e:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009112:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8009114:	2b01      	cmp	r3, #1
 8009116:	d10a      	bne.n	800912e <UART_CheckIdleState+0x162>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009118:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800911c:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009120:	2010      	movs	r0, #16
 8009122:	6822      	ldr	r2, [r4, #0]
 8009124:	6813      	ldr	r3, [r2, #0]
 8009126:	4383      	bics	r3, r0
 8009128:	6013      	str	r3, [r2, #0]
 800912a:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800912e:	238c      	movs	r3, #140	@ 0x8c
 8009130:	2220      	movs	r2, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009132:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8009134:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009136:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009138:	3270      	adds	r2, #112	@ 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800913a:	66e3      	str	r3, [r4, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800913c:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800913e:	50a1      	str	r1, [r4, r2]
          __HAL_UNLOCK(huart);
 8009140:	3a0c      	subs	r2, #12
 8009142:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 8009144:	e781      	b.n	800904a <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009146:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009148:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800914c:	2201      	movs	r2, #1
 800914e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009152:	6821      	ldr	r1, [r4, #0]
 8009154:	4d46      	ldr	r5, [pc, #280]	@ (8009270 <UART_CheckIdleState+0x2a4>)
 8009156:	680b      	ldr	r3, [r1, #0]
 8009158:	402b      	ands	r3, r5
 800915a:	600b      	str	r3, [r1, #0]
 800915c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009160:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009164:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009168:	6822      	ldr	r2, [r4, #0]
 800916a:	4842      	ldr	r0, [pc, #264]	@ (8009274 <UART_CheckIdleState+0x2a8>)
 800916c:	6893      	ldr	r3, [r2, #8]
 800916e:	4003      	ands	r3, r0
 8009170:	6093      	str	r3, [r2, #8]
 8009172:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009176:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8009178:	2b01      	cmp	r3, #1
 800917a:	d10a      	bne.n	8009192 <UART_CheckIdleState+0x1c6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800917c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009180:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009184:	2010      	movs	r0, #16
 8009186:	6822      	ldr	r2, [r4, #0]
 8009188:	6813      	ldr	r3, [r2, #0]
 800918a:	4383      	bics	r3, r0
 800918c:	6013      	str	r3, [r2, #0]
 800918e:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8009192:	2220      	movs	r2, #32
 8009194:	238c      	movs	r3, #140	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009196:	2190      	movs	r1, #144	@ 0x90
  huart->RxState = HAL_UART_STATE_READY;
 8009198:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800919a:	2300      	movs	r3, #0
 800919c:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 800919e:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80091a0:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 80091a2:	3264      	adds	r2, #100	@ 0x64
 80091a4:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 80091a6:	e750      	b.n	800904a <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80091a8:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80091aa:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091ae:	2201      	movs	r2, #1
 80091b0:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091b4:	6821      	ldr	r1, [r4, #0]
 80091b6:	4d2e      	ldr	r5, [pc, #184]	@ (8009270 <UART_CheckIdleState+0x2a4>)
 80091b8:	680b      	ldr	r3, [r1, #0]
 80091ba:	402b      	ands	r3, r5
 80091bc:	600b      	str	r3, [r1, #0]
 80091be:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80091c2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091c6:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80091ca:	6822      	ldr	r2, [r4, #0]
 80091cc:	4829      	ldr	r0, [pc, #164]	@ (8009274 <UART_CheckIdleState+0x2a8>)
 80091ce:	6893      	ldr	r3, [r2, #8]
 80091d0:	4003      	ands	r3, r0
 80091d2:	6093      	str	r3, [r2, #8]
 80091d4:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091d8:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d10a      	bne.n	80091f4 <UART_CheckIdleState+0x228>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80091de:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091e2:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091e6:	2010      	movs	r0, #16
 80091e8:	6822      	ldr	r2, [r4, #0]
 80091ea:	6813      	ldr	r3, [r2, #0]
 80091ec:	4383      	bics	r3, r0
 80091ee:	6013      	str	r3, [r2, #0]
 80091f0:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 80091f4:	238c      	movs	r3, #140	@ 0x8c
 80091f6:	2220      	movs	r2, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80091f8:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 80091fa:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091fc:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80091fe:	3270      	adds	r2, #112	@ 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009200:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 8009202:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009204:	50a1      	str	r1, [r4, r2]
          __HAL_UNLOCK(huart);
 8009206:	3a0c      	subs	r2, #12
 8009208:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 800920a:	e74f      	b.n	80090ac <UART_CheckIdleState+0xe0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800920c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800920e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009212:	2201      	movs	r2, #1
 8009214:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009218:	6821      	ldr	r1, [r4, #0]
 800921a:	4d15      	ldr	r5, [pc, #84]	@ (8009270 <UART_CheckIdleState+0x2a4>)
 800921c:	680b      	ldr	r3, [r1, #0]
 800921e:	402b      	ands	r3, r5
 8009220:	600b      	str	r3, [r1, #0]
 8009222:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009226:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800922a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800922e:	6822      	ldr	r2, [r4, #0]
 8009230:	4810      	ldr	r0, [pc, #64]	@ (8009274 <UART_CheckIdleState+0x2a8>)
 8009232:	6893      	ldr	r3, [r2, #8]
 8009234:	4003      	ands	r3, r0
 8009236:	6093      	str	r3, [r2, #8]
 8009238:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800923c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800923e:	2b01      	cmp	r3, #1
 8009240:	d10a      	bne.n	8009258 <UART_CheckIdleState+0x28c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009242:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009246:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800924a:	2010      	movs	r0, #16
 800924c:	6822      	ldr	r2, [r4, #0]
 800924e:	6813      	ldr	r3, [r2, #0]
 8009250:	4383      	bics	r3, r0
 8009252:	6013      	str	r3, [r2, #0]
 8009254:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8009258:	2220      	movs	r2, #32
 800925a:	238c      	movs	r3, #140	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800925c:	2190      	movs	r1, #144	@ 0x90
  huart->RxState = HAL_UART_STATE_READY;
 800925e:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009260:	2300      	movs	r3, #0
 8009262:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 8009264:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009266:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 8009268:	3264      	adds	r2, #100	@ 0x64
 800926a:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 800926c:	e71e      	b.n	80090ac <UART_CheckIdleState+0xe0>
 800926e:	46c0      	nop			@ (mov r8, r8)
 8009270:	fffffedf 	.word	0xfffffedf
 8009274:	effffffe 	.word	0xeffffffe

08009278 <HAL_UART_Init>:
{
 8009278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800927a:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 800927c:	d100      	bne.n	8009280 <HAL_UART_Init+0x8>
 800927e:	e0ac      	b.n	80093da <HAL_UART_Init+0x162>
  if (huart->gState == HAL_UART_STATE_RESET)
 8009280:	2388      	movs	r3, #136	@ 0x88
 8009282:	58c3      	ldr	r3, [r0, r3]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d100      	bne.n	800928a <HAL_UART_Init+0x12>
 8009288:	e0ad      	b.n	80093e6 <HAL_UART_Init+0x16e>
  huart->gState = HAL_UART_STATE_BUSY;
 800928a:	2388      	movs	r3, #136	@ 0x88
 800928c:	2224      	movs	r2, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 800928e:	6825      	ldr	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009290:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8009292:	682b      	ldr	r3, [r5, #0]
 8009294:	3a23      	subs	r2, #35	@ 0x23
 8009296:	4393      	bics	r3, r2
 8009298:	602b      	str	r3, [r5, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800929a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800929c:	2b00      	cmp	r3, #0
 800929e:	d000      	beq.n	80092a2 <HAL_UART_Init+0x2a>
 80092a0:	e09d      	b.n	80093de <HAL_UART_Init+0x166>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80092a2:	6920      	ldr	r0, [r4, #16]
 80092a4:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80092a6:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80092a8:	4303      	orrs	r3, r0
 80092aa:	6960      	ldr	r0, [r4, #20]
 80092ac:	69e2      	ldr	r2, [r4, #28]
 80092ae:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80092b0:	4880      	ldr	r0, [pc, #512]	@ (80094b4 <HAL_UART_Init+0x23c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80092b2:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80092b4:	4001      	ands	r1, r0
 80092b6:	430b      	orrs	r3, r1
 80092b8:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092ba:	686b      	ldr	r3, [r5, #4]
 80092bc:	497e      	ldr	r1, [pc, #504]	@ (80094b8 <HAL_UART_Init+0x240>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80092be:	69a6      	ldr	r6, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092c0:	400b      	ands	r3, r1
 80092c2:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80092c4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092c6:	430b      	orrs	r3, r1
 80092c8:	606b      	str	r3, [r5, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80092ca:	4b7c      	ldr	r3, [pc, #496]	@ (80094bc <HAL_UART_Init+0x244>)
 80092cc:	429d      	cmp	r5, r3
 80092ce:	d100      	bne.n	80092d2 <HAL_UART_Init+0x5a>
 80092d0:	e0d0      	b.n	8009474 <HAL_UART_Init+0x1fc>
 80092d2:	4b7b      	ldr	r3, [pc, #492]	@ (80094c0 <HAL_UART_Init+0x248>)
 80092d4:	429d      	cmp	r5, r3
 80092d6:	d100      	bne.n	80092da <HAL_UART_Init+0x62>
 80092d8:	e0d8      	b.n	800948c <HAL_UART_Init+0x214>
 80092da:	4b7a      	ldr	r3, [pc, #488]	@ (80094c4 <HAL_UART_Init+0x24c>)
 80092dc:	429d      	cmp	r5, r3
 80092de:	d03f      	beq.n	8009360 <HAL_UART_Init+0xe8>
    tmpreg |= huart->Init.OneBitSampling;
 80092e0:	6a23      	ldr	r3, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80092e2:	68a9      	ldr	r1, [r5, #8]
    tmpreg |= huart->Init.OneBitSampling;
 80092e4:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80092e6:	4e78      	ldr	r6, [pc, #480]	@ (80094c8 <HAL_UART_Init+0x250>)
 80092e8:	4031      	ands	r1, r6
 80092ea:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80092ec:	210f      	movs	r1, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80092ee:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80092f0:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80092f2:	438b      	bics	r3, r1
 80092f4:	4303      	orrs	r3, r0
 80092f6:	62eb      	str	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092f8:	4b74      	ldr	r3, [pc, #464]	@ (80094cc <HAL_UART_Init+0x254>)
 80092fa:	429d      	cmp	r5, r3
 80092fc:	d100      	bne.n	8009300 <HAL_UART_Init+0x88>
 80092fe:	e077      	b.n	80093f0 <HAL_UART_Init+0x178>
 8009300:	4b73      	ldr	r3, [pc, #460]	@ (80094d0 <HAL_UART_Init+0x258>)
 8009302:	2002      	movs	r0, #2
 8009304:	429d      	cmp	r5, r3
 8009306:	d008      	beq.n	800931a <HAL_UART_Init+0xa2>
 8009308:	4b72      	ldr	r3, [pc, #456]	@ (80094d4 <HAL_UART_Init+0x25c>)
 800930a:	429d      	cmp	r5, r3
 800930c:	d100      	bne.n	8009310 <HAL_UART_Init+0x98>
 800930e:	e093      	b.n	8009438 <HAL_UART_Init+0x1c0>
 8009310:	4b71      	ldr	r3, [pc, #452]	@ (80094d8 <HAL_UART_Init+0x260>)
 8009312:	18e8      	adds	r0, r5, r3
 8009314:	4243      	negs	r3, r0
 8009316:	4158      	adcs	r0, r3
 8009318:	0440      	lsls	r0, r0, #17
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800931a:	2380      	movs	r3, #128	@ 0x80
 800931c:	021b      	lsls	r3, r3, #8
 800931e:	429a      	cmp	r2, r3
 8009320:	d100      	bne.n	8009324 <HAL_UART_Init+0xac>
 8009322:	e06b      	b.n	80093fc <HAL_UART_Init+0x184>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009324:	f7ff fa46 	bl	80087b4 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 8009328:	2800      	cmp	r0, #0
 800932a:	d100      	bne.n	800932e <HAL_UART_Init+0xb6>
 800932c:	e087      	b.n	800943e <HAL_UART_Init+0x1c6>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800932e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009330:	4b6a      	ldr	r3, [pc, #424]	@ (80094dc <HAL_UART_Init+0x264>)
 8009332:	0052      	lsls	r2, r2, #1
 8009334:	5ad1      	ldrh	r1, [r2, r3]
 8009336:	f7f6 ff03 	bl	8000140 <__udivsi3>
 800933a:	6865      	ldr	r5, [r4, #4]
 800933c:	086b      	lsrs	r3, r5, #1
 800933e:	18c0      	adds	r0, r0, r3
 8009340:	0029      	movs	r1, r5
 8009342:	f7f6 fefd 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009346:	0002      	movs	r2, r0
 8009348:	4b65      	ldr	r3, [pc, #404]	@ (80094e0 <HAL_UART_Init+0x268>)
 800934a:	3a10      	subs	r2, #16
 800934c:	429a      	cmp	r2, r3
 800934e:	d83f      	bhi.n	80093d0 <HAL_UART_Init+0x158>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009350:	6823      	ldr	r3, [r4, #0]
 8009352:	60d8      	str	r0, [r3, #12]
  huart->NbRxDataToProcess = 1;
 8009354:	4a63      	ldr	r2, [pc, #396]	@ (80094e4 <HAL_UART_Init+0x26c>)
 8009356:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8009358:	2200      	movs	r2, #0
 800935a:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 800935c:	67a2      	str	r2, [r4, #120]	@ 0x78
  return ret;
 800935e:	e073      	b.n	8009448 <HAL_UART_Init+0x1d0>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009360:	68ab      	ldr	r3, [r5, #8]
 8009362:	4a59      	ldr	r2, [pc, #356]	@ (80094c8 <HAL_UART_Init+0x250>)
 8009364:	4013      	ands	r3, r2
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009366:	220f      	movs	r2, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009368:	4333      	orrs	r3, r6
 800936a:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800936c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800936e:	4393      	bics	r3, r2
 8009370:	4303      	orrs	r3, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009372:	2004      	movs	r0, #4
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009374:	62eb      	str	r3, [r5, #44]	@ 0x2c
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009376:	f7ff fa1d 	bl	80087b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800937a:	1e05      	subs	r5, r0, #0
    if (pclk != 0U)
 800937c:	d100      	bne.n	8009380 <HAL_UART_Init+0x108>
 800937e:	e073      	b.n	8009468 <HAL_UART_Init+0x1f0>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009380:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009382:	4b56      	ldr	r3, [pc, #344]	@ (80094dc <HAL_UART_Init+0x264>)
 8009384:	0052      	lsls	r2, r2, #1
 8009386:	5ad6      	ldrh	r6, [r2, r3]
 8009388:	0031      	movs	r1, r6
 800938a:	f7f6 fed9 	bl	8000140 <__udivsi3>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800938e:	6867      	ldr	r7, [r4, #4]
 8009390:	007b      	lsls	r3, r7, #1
 8009392:	19db      	adds	r3, r3, r7
 8009394:	4298      	cmp	r0, r3
 8009396:	d31b      	bcc.n	80093d0 <HAL_UART_Init+0x158>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009398:	033b      	lsls	r3, r7, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800939a:	4298      	cmp	r0, r3
 800939c:	d818      	bhi.n	80093d0 <HAL_UART_Init+0x158>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800939e:	0032      	movs	r2, r6
 80093a0:	2300      	movs	r3, #0
 80093a2:	0028      	movs	r0, r5
 80093a4:	2100      	movs	r1, #0
 80093a6:	f7f7 f89d 	bl	80004e4 <__aeabi_uldivmod>
 80093aa:	2600      	movs	r6, #0
 80093ac:	0e05      	lsrs	r5, r0, #24
 80093ae:	020b      	lsls	r3, r1, #8
 80093b0:	432b      	orrs	r3, r5
 80093b2:	0202      	lsls	r2, r0, #8
 80093b4:	087d      	lsrs	r5, r7, #1
 80093b6:	1952      	adds	r2, r2, r5
 80093b8:	4173      	adcs	r3, r6
 80093ba:	0010      	movs	r0, r2
 80093bc:	0019      	movs	r1, r3
 80093be:	003a      	movs	r2, r7
 80093c0:	2300      	movs	r3, #0
 80093c2:	f7f7 f88f 	bl	80004e4 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80093c6:	4b48      	ldr	r3, [pc, #288]	@ (80094e8 <HAL_UART_Init+0x270>)
 80093c8:	18c2      	adds	r2, r0, r3
 80093ca:	4b48      	ldr	r3, [pc, #288]	@ (80094ec <HAL_UART_Init+0x274>)
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d969      	bls.n	80094a4 <HAL_UART_Init+0x22c>
  huart->NbRxDataToProcess = 1;
 80093d0:	4b44      	ldr	r3, [pc, #272]	@ (80094e4 <HAL_UART_Init+0x26c>)
 80093d2:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 80093d4:	2300      	movs	r3, #0
 80093d6:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 80093d8:	67a3      	str	r3, [r4, #120]	@ 0x78
    return HAL_ERROR;
 80093da:	2001      	movs	r0, #1
}
 80093dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    UART_AdvFeatureConfig(huart);
 80093de:	0020      	movs	r0, r4
 80093e0:	f7ff fd8c 	bl	8008efc <UART_AdvFeatureConfig>
 80093e4:	e75d      	b.n	80092a2 <HAL_UART_Init+0x2a>
    huart->Lock = HAL_UNLOCKED;
 80093e6:	2284      	movs	r2, #132	@ 0x84
 80093e8:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 80093ea:	f7fd fef3 	bl	80071d4 <HAL_UART_MspInit>
 80093ee:	e74c      	b.n	800928a <HAL_UART_Init+0x12>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093f0:	2380      	movs	r3, #128	@ 0x80
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093f2:	2001      	movs	r0, #1
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093f4:	021b      	lsls	r3, r3, #8
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d000      	beq.n	80093fc <HAL_UART_Init+0x184>
 80093fa:	e793      	b.n	8009324 <HAL_UART_Init+0xac>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80093fc:	f7ff f9da 	bl	80087b4 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 8009400:	2800      	cmp	r0, #0
 8009402:	d01c      	beq.n	800943e <HAL_UART_Init+0x1c6>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009404:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009406:	4b35      	ldr	r3, [pc, #212]	@ (80094dc <HAL_UART_Init+0x264>)
 8009408:	0052      	lsls	r2, r2, #1
 800940a:	5ad1      	ldrh	r1, [r2, r3]
 800940c:	f7f6 fe98 	bl	8000140 <__udivsi3>
 8009410:	6865      	ldr	r5, [r4, #4]
 8009412:	0040      	lsls	r0, r0, #1
 8009414:	086b      	lsrs	r3, r5, #1
 8009416:	18c0      	adds	r0, r0, r3
 8009418:	0029      	movs	r1, r5
 800941a:	f7f6 fe91 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800941e:	0002      	movs	r2, r0
 8009420:	4b2f      	ldr	r3, [pc, #188]	@ (80094e0 <HAL_UART_Init+0x268>)
 8009422:	3a10      	subs	r2, #16
 8009424:	429a      	cmp	r2, r3
 8009426:	d8d3      	bhi.n	80093d0 <HAL_UART_Init+0x158>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009428:	4a31      	ldr	r2, [pc, #196]	@ (80094f0 <HAL_UART_Init+0x278>)
        huart->Instance->BRR = brrtemp;
 800942a:	6823      	ldr	r3, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800942c:	4002      	ands	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800942e:	0700      	lsls	r0, r0, #28
 8009430:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8009432:	4302      	orrs	r2, r0
 8009434:	60da      	str	r2, [r3, #12]
  huart->NbRxDataToProcess = 1;
 8009436:	e78d      	b.n	8009354 <HAL_UART_Init+0xdc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009438:	2080      	movs	r0, #128	@ 0x80
 800943a:	0240      	lsls	r0, r0, #9
 800943c:	e76d      	b.n	800931a <HAL_UART_Init+0xa2>
  huart->NbRxDataToProcess = 1;
 800943e:	4b29      	ldr	r3, [pc, #164]	@ (80094e4 <HAL_UART_Init+0x26c>)
  huart->RxISR = NULL;
 8009440:	6760      	str	r0, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8009442:	66a3      	str	r3, [r4, #104]	@ 0x68
        huart->Instance->BRR = brrtemp;
 8009444:	6823      	ldr	r3, [r4, #0]
  huart->TxISR = NULL;
 8009446:	67a0      	str	r0, [r4, #120]	@ 0x78
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009448:	685a      	ldr	r2, [r3, #4]
 800944a:	492a      	ldr	r1, [pc, #168]	@ (80094f4 <HAL_UART_Init+0x27c>)
  return (UART_CheckIdleState(huart));
 800944c:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800944e:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009450:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009452:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009454:	689a      	ldr	r2, [r3, #8]
 8009456:	438a      	bics	r2, r1
 8009458:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	3929      	subs	r1, #41	@ 0x29
 800945e:	430a      	orrs	r2, r1
 8009460:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8009462:	f7ff fdb3 	bl	8008fcc <UART_CheckIdleState>
 8009466:	e7b9      	b.n	80093dc <HAL_UART_Init+0x164>
  huart->NbRxDataToProcess = 1;
 8009468:	4b1e      	ldr	r3, [pc, #120]	@ (80094e4 <HAL_UART_Init+0x26c>)
  huart->RxISR = NULL;
 800946a:	6760      	str	r0, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 800946c:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 800946e:	67a0      	str	r0, [r4, #120]	@ 0x78
          huart->Instance->BRR = usartdiv;
 8009470:	6823      	ldr	r3, [r4, #0]
 8009472:	e7e9      	b.n	8009448 <HAL_UART_Init+0x1d0>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009474:	68ab      	ldr	r3, [r5, #8]
 8009476:	4a14      	ldr	r2, [pc, #80]	@ (80094c8 <HAL_UART_Init+0x250>)
 8009478:	4013      	ands	r3, r2
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800947a:	220f      	movs	r2, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800947c:	4333      	orrs	r3, r6
 800947e:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009480:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009482:	4393      	bics	r3, r2
 8009484:	4303      	orrs	r3, r0
 8009486:	62eb      	str	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009488:	2010      	movs	r0, #16
 800948a:	e774      	b.n	8009376 <HAL_UART_Init+0xfe>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800948c:	68ab      	ldr	r3, [r5, #8]
 800948e:	4a0e      	ldr	r2, [pc, #56]	@ (80094c8 <HAL_UART_Init+0x250>)
 8009490:	4013      	ands	r3, r2
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009492:	220f      	movs	r2, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009494:	4333      	orrs	r3, r6
 8009496:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009498:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800949a:	4393      	bics	r3, r2
 800949c:	4303      	orrs	r3, r0
 800949e:	62eb      	str	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80094a0:	2008      	movs	r0, #8
 80094a2:	e768      	b.n	8009376 <HAL_UART_Init+0xfe>
          huart->Instance->BRR = usartdiv;
 80094a4:	6823      	ldr	r3, [r4, #0]
  huart->NbRxDataToProcess = 1;
 80094a6:	4a0f      	ldr	r2, [pc, #60]	@ (80094e4 <HAL_UART_Init+0x26c>)
          huart->Instance->BRR = usartdiv;
 80094a8:	60d8      	str	r0, [r3, #12]
  huart->NbRxDataToProcess = 1;
 80094aa:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 80094ac:	6766      	str	r6, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 80094ae:	67a6      	str	r6, [r4, #120]	@ 0x78
  return ret;
 80094b0:	e7ca      	b.n	8009448 <HAL_UART_Init+0x1d0>
 80094b2:	46c0      	nop			@ (mov r8, r8)
 80094b4:	cfff69f3 	.word	0xcfff69f3
 80094b8:	ffffcfff 	.word	0xffffcfff
 80094bc:	40008000 	.word	0x40008000
 80094c0:	40008400 	.word	0x40008400
 80094c4:	40008c00 	.word	0x40008c00
 80094c8:	11fff4ff 	.word	0x11fff4ff
 80094cc:	40013800 	.word	0x40013800
 80094d0:	40004400 	.word	0x40004400
 80094d4:	40004800 	.word	0x40004800
 80094d8:	bfffb400 	.word	0xbfffb400
 80094dc:	0800eeec 	.word	0x0800eeec
 80094e0:	0000ffef 	.word	0x0000ffef
 80094e4:	00010001 	.word	0x00010001
 80094e8:	fffffd00 	.word	0xfffffd00
 80094ec:	000ffcff 	.word	0x000ffcff
 80094f0:	0000fff0 	.word	0x0000fff0
 80094f4:	ffffb7ff 	.word	0xffffb7ff

080094f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80094f8:	b570      	push	{r4, r5, r6, lr}

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094fa:	2484      	movs	r4, #132	@ 0x84
 80094fc:	5d03      	ldrb	r3, [r0, r4]
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d012      	beq.n	8009528 <HAL_UARTEx_DisableFifoMode+0x30>

  huart->gState = HAL_UART_STATE_BUSY;
 8009502:	2588      	movs	r5, #136	@ 0x88
 8009504:	2324      	movs	r3, #36	@ 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009506:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8009508:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800950a:	6803      	ldr	r3, [r0, #0]
 800950c:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800950e:	6819      	ldr	r1, [r3, #0]
 8009510:	43b1      	bics	r1, r6
 8009512:	6019      	str	r1, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009514:	4905      	ldr	r1, [pc, #20]	@ (800952c <HAL_UARTEx_DisableFifoMode+0x34>)
 8009516:	400a      	ands	r2, r1
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009518:	2100      	movs	r1, #0
 800951a:	6641      	str	r1, [r0, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800951c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800951e:	2320      	movs	r3, #32
 8009520:	5143      	str	r3, [r0, r5]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009522:	5501      	strb	r1, [r0, r4]

  return HAL_OK;
 8009524:	2000      	movs	r0, #0
}
 8009526:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8009528:	2002      	movs	r0, #2
 800952a:	e7fc      	b.n	8009526 <HAL_UARTEx_DisableFifoMode+0x2e>
 800952c:	dfffffff 	.word	0xdfffffff

08009530 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009532:	46d6      	mov	lr, sl
 8009534:	464f      	mov	r7, r9
 8009536:	4646      	mov	r6, r8
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009538:	2384      	movs	r3, #132	@ 0x84
{
 800953a:	b5c0      	push	{r6, r7, lr}
  __HAL_LOCK(huart);
 800953c:	5cc3      	ldrb	r3, [r0, r3]
{
 800953e:	0004      	movs	r4, r0
 8009540:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8009542:	2b01      	cmp	r3, #1
 8009544:	d03d      	beq.n	80095c2 <HAL_UARTEx_SetTxFifoThreshold+0x92>

  huart->gState = HAL_UART_STATE_BUSY;
 8009546:	2388      	movs	r3, #136	@ 0x88
 8009548:	2124      	movs	r1, #36	@ 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800954a:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800954c:	50c1      	str	r1, [r0, r3]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800954e:	682e      	ldr	r6, [r5, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009550:	682b      	ldr	r3, [r5, #0]
 8009552:	3923      	subs	r1, #35	@ 0x23
 8009554:	438b      	bics	r3, r1
 8009556:	602b      	str	r3, [r5, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009558:	68ab      	ldr	r3, [r5, #8]
 800955a:	00db      	lsls	r3, r3, #3
 800955c:	08d9      	lsrs	r1, r3, #3
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800955e:	6e43      	ldr	r3, [r0, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009560:	4311      	orrs	r1, r2
 8009562:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009564:	2b00      	cmp	r3, #0
 8009566:	d029      	beq.n	80095bc <HAL_UARTEx_SetTxFifoThreshold+0x8c>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009568:	68ab      	ldr	r3, [r5, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800956a:	4a17      	ldr	r2, [pc, #92]	@ (80095c8 <HAL_UARTEx_SetTxFifoThreshold+0x98>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800956c:	4698      	mov	r8, r3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800956e:	4692      	mov	sl, r2
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009570:	68ab      	ldr	r3, [r5, #8]
 8009572:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009574:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009576:	4a15      	ldr	r2, [pc, #84]	@ (80095cc <HAL_UARTEx_SetTxFifoThreshold+0x9c>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009578:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800957a:	5cd1      	ldrb	r1, [r2, r3]
 800957c:	4691      	mov	r9, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800957e:	f7f6 fe69 	bl	8000254 <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009582:	4643      	mov	r3, r8
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009584:	4652      	mov	r2, sl
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009586:	011b      	lsls	r3, r3, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009588:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800958a:	b287      	uxth	r7, r0
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800958c:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 800958e:	464a      	mov	r2, r9
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009590:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009592:	5cd1      	ldrb	r1, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009594:	f7f6 fe5e 	bl	8000254 <__divsi3>
 8009598:	b280      	uxth	r0, r0
 800959a:	2368      	movs	r3, #104	@ 0x68
  huart->gState = HAL_UART_STATE_READY;
 800959c:	2220      	movs	r2, #32
 800959e:	52e0      	strh	r0, [r4, r3]
 80095a0:	3302      	adds	r3, #2
 80095a2:	52e7      	strh	r7, [r4, r3]
 80095a4:	331e      	adds	r3, #30
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095a6:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 80095a8:	50e2      	str	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 80095aa:	2200      	movs	r2, #0
  return HAL_OK;
 80095ac:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 80095ae:	3b04      	subs	r3, #4
 80095b0:	54e2      	strb	r2, [r4, r3]
}
 80095b2:	bce0      	pop	{r5, r6, r7}
 80095b4:	46ba      	mov	sl, r7
 80095b6:	46b1      	mov	r9, r6
 80095b8:	46a8      	mov	r8, r5
 80095ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    huart->NbRxDataToProcess = 1U;
 80095bc:	2001      	movs	r0, #1
    huart->NbTxDataToProcess = 1U;
 80095be:	2701      	movs	r7, #1
 80095c0:	e7eb      	b.n	800959a <HAL_UARTEx_SetTxFifoThreshold+0x6a>
  __HAL_LOCK(huart);
 80095c2:	2002      	movs	r0, #2
 80095c4:	e7f5      	b.n	80095b2 <HAL_UARTEx_SetTxFifoThreshold+0x82>
 80095c6:	46c0      	nop			@ (mov r8, r8)
 80095c8:	0800ef0c 	.word	0x0800ef0c
 80095cc:	0800ef04 	.word	0x0800ef04

080095d0 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80095d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095d2:	46d6      	mov	lr, sl
 80095d4:	464f      	mov	r7, r9
 80095d6:	4646      	mov	r6, r8
  __HAL_LOCK(huart);
 80095d8:	2384      	movs	r3, #132	@ 0x84
{
 80095da:	b5c0      	push	{r6, r7, lr}
  __HAL_LOCK(huart);
 80095dc:	5cc3      	ldrb	r3, [r0, r3]
{
 80095de:	0004      	movs	r4, r0
 80095e0:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d03d      	beq.n	8009662 <HAL_UARTEx_SetRxFifoThreshold+0x92>
  huart->gState = HAL_UART_STATE_BUSY;
 80095e6:	2388      	movs	r3, #136	@ 0x88
 80095e8:	2124      	movs	r1, #36	@ 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095ea:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80095ec:	50c1      	str	r1, [r0, r3]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095ee:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80095f0:	682b      	ldr	r3, [r5, #0]
 80095f2:	3923      	subs	r1, #35	@ 0x23
 80095f4:	438b      	bics	r3, r1
 80095f6:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80095f8:	68a9      	ldr	r1, [r5, #8]
 80095fa:	4b1b      	ldr	r3, [pc, #108]	@ (8009668 <HAL_UARTEx_SetRxFifoThreshold+0x98>)
 80095fc:	4019      	ands	r1, r3
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80095fe:	6e43      	ldr	r3, [r0, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009600:	4311      	orrs	r1, r2
 8009602:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009604:	2b00      	cmp	r3, #0
 8009606:	d029      	beq.n	800965c <HAL_UARTEx_SetRxFifoThreshold+0x8c>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009608:	68ab      	ldr	r3, [r5, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800960a:	4a18      	ldr	r2, [pc, #96]	@ (800966c <HAL_UARTEx_SetRxFifoThreshold+0x9c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800960c:	4698      	mov	r8, r3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800960e:	4692      	mov	sl, r2
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009610:	68ab      	ldr	r3, [r5, #8]
 8009612:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009614:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009616:	4a16      	ldr	r2, [pc, #88]	@ (8009670 <HAL_UARTEx_SetRxFifoThreshold+0xa0>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009618:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800961a:	5cd1      	ldrb	r1, [r2, r3]
 800961c:	4691      	mov	r9, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800961e:	f7f6 fe19 	bl	8000254 <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009622:	4643      	mov	r3, r8
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009624:	4652      	mov	r2, sl
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009626:	011b      	lsls	r3, r3, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009628:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800962a:	b287      	uxth	r7, r0
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800962c:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 800962e:	464a      	mov	r2, r9
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009630:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009632:	5cd1      	ldrb	r1, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009634:	f7f6 fe0e 	bl	8000254 <__divsi3>
 8009638:	b280      	uxth	r0, r0
 800963a:	2368      	movs	r3, #104	@ 0x68
  huart->gState = HAL_UART_STATE_READY;
 800963c:	2220      	movs	r2, #32
 800963e:	52e0      	strh	r0, [r4, r3]
 8009640:	3302      	adds	r3, #2
 8009642:	52e7      	strh	r7, [r4, r3]
 8009644:	331e      	adds	r3, #30
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009646:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009648:	50e2      	str	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 800964a:	2200      	movs	r2, #0
  return HAL_OK;
 800964c:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 800964e:	3b04      	subs	r3, #4
 8009650:	54e2      	strb	r2, [r4, r3]
}
 8009652:	bce0      	pop	{r5, r6, r7}
 8009654:	46ba      	mov	sl, r7
 8009656:	46b1      	mov	r9, r6
 8009658:	46a8      	mov	r8, r5
 800965a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    huart->NbRxDataToProcess = 1U;
 800965c:	2001      	movs	r0, #1
    huart->NbTxDataToProcess = 1U;
 800965e:	2701      	movs	r7, #1
 8009660:	e7eb      	b.n	800963a <HAL_UARTEx_SetRxFifoThreshold+0x6a>
  __HAL_LOCK(huart);
 8009662:	2002      	movs	r0, #2
 8009664:	e7f5      	b.n	8009652 <HAL_UARTEx_SetRxFifoThreshold+0x82>
 8009666:	46c0      	nop			@ (mov r8, r8)
 8009668:	f1ffffff 	.word	0xf1ffffff
 800966c:	0800ef0c 	.word	0x0800ef0c
 8009670:	0800ef04 	.word	0x0800ef04

08009674 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(struct bme280_dev *dev)
{
 8009674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009676:	4646      	mov	r6, r8
 8009678:	46d6      	mov	lr, sl
 800967a:	464f      	mov	r7, r9
 800967c:	b5c0      	push	{r6, r7, lr}
 800967e:	b086      	sub	sp, #24
    int8_t rslt;
    uint8_t reg_addr = BME280_RESET_ADDR; // UINT8_C(0xE0)
    uint8_t status_reg = 0;
 8009680:	466b      	mov	r3, sp
 8009682:	1cde      	adds	r6, r3, #3
 8009684:	2300      	movs	r3, #0
{
 8009686:	1e04      	subs	r4, r0, #0
    uint8_t status_reg = 0;
 8009688:	7033      	strb	r3, [r6, #0]
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800968a:	d05c      	beq.n	8009746 <bme280_soft_reset+0xd2>
 800968c:	68c3      	ldr	r3, [r0, #12]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d059      	beq.n	8009746 <bme280_soft_reset+0xd2>
 8009692:	6907      	ldr	r7, [r0, #16]
 8009694:	2f00      	cmp	r7, #0
 8009696:	d056      	beq.n	8009746 <bme280_soft_reset+0xd2>
 8009698:	6943      	ldr	r3, [r0, #20]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d053      	beq.n	8009746 <bme280_soft_reset+0xd2>
            temp_buff[0] = reg_data[0];
 800969e:	23b6      	movs	r3, #182	@ 0xb6
 80096a0:	ad01      	add	r5, sp, #4
 80096a2:	702b      	strb	r3, [r5, #0]
            if (dev->intf != BME280_I2C_INTF)
 80096a4:	7a00      	ldrb	r0, [r0, #8]
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 80096a6:	2201      	movs	r2, #1
    uint8_t reg_addr = BME280_RESET_ADDR; // UINT8_C(0xE0)
 80096a8:	3801      	subs	r0, #1
 80096aa:	1e43      	subs	r3, r0, #1
 80096ac:	4198      	sbcs	r0, r3
 80096ae:	237f      	movs	r3, #127	@ 0x7f
 80096b0:	4240      	negs	r0, r0
 80096b2:	4398      	bics	r0, r3
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 80096b4:	0029      	movs	r1, r5
 80096b6:	6863      	ldr	r3, [r4, #4]
    uint8_t reg_addr = BME280_RESET_ADDR; // UINT8_C(0xE0)
 80096b8:	30e0      	adds	r0, #224	@ 0xe0
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 80096ba:	47b8      	blx	r7
 80096bc:	2345      	movs	r3, #69	@ 0x45
 80096be:	54e0      	strb	r0, [r4, r3]
        rslt = BME280_E_NULL_PTR; // BME280_E_NULL_PTR = INT8_C(-1)
 80096c0:	33ba      	adds	r3, #186	@ 0xba
 80096c2:	469a      	mov	sl, r3
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80096c4:	3bba      	subs	r3, #186	@ 0xba
 80096c6:	2706      	movs	r7, #6
 80096c8:	4699      	mov	r9, r3
            if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 80096ca:	2800      	cmp	r0, #0
 80096cc:	d13e      	bne.n	800974c <bme280_soft_reset+0xd8>
                dev->delay_us(2, dev->intf_ptr);
 80096ce:	6963      	ldr	r3, [r4, #20]
 80096d0:	2002      	movs	r0, #2
 80096d2:	6861      	ldr	r1, [r4, #4]
 80096d4:	4798      	blx	r3
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80096d6:	68e3      	ldr	r3, [r4, #12]
 80096d8:	4698      	mov	r8, r3
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d030      	beq.n	8009740 <bme280_soft_reset+0xcc>
 80096de:	6923      	ldr	r3, [r4, #16]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d02d      	beq.n	8009740 <bme280_soft_reset+0xcc>
 80096e4:	6963      	ldr	r3, [r4, #20]
 80096e6:	425a      	negs	r2, r3
 80096e8:	4153      	adcs	r3, r2
 80096ea:	425b      	negs	r3, r3
    rslt = null_ptr_check(dev);
 80096ec:	702b      	strb	r3, [r5, #0]
    if ((rslt == BME280_OK) && (reg_data != NULL))
 80096ee:	782b      	ldrb	r3, [r5, #0]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d11d      	bne.n	8009730 <bme280_soft_reset+0xbc>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80096f4:	6863      	ldr	r3, [r4, #4]
 80096f6:	2201      	movs	r2, #1
 80096f8:	0031      	movs	r1, r6
 80096fa:	20f3      	movs	r0, #243	@ 0xf3
 80096fc:	47c0      	blx	r8
 80096fe:	464b      	mov	r3, r9
 8009700:	54e0      	strb	r0, [r4, r3]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS) // BME280_INTF_RET_SUCCESS = INT8_C(0)
 8009702:	2800      	cmp	r0, #0
 8009704:	d001      	beq.n	800970a <bme280_soft_reset+0x96>
            rslt = BME280_E_COMM_FAIL; // BME280_E_COMM_FAIL = INT8_C(-4)
 8009706:	23fc      	movs	r3, #252	@ 0xfc
 8009708:	702b      	strb	r3, [r5, #0]
    return rslt;
 800970a:	2301      	movs	r3, #1
 800970c:	782a      	ldrb	r2, [r5, #0]
 800970e:	7831      	ldrb	r1, [r6, #0]
 8009710:	b250      	sxtb	r0, r2
            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 8009712:	400b      	ands	r3, r1
 8009714:	2a00      	cmp	r2, #0
 8009716:	d10e      	bne.n	8009736 <bme280_soft_reset+0xc2>
 8009718:	3f01      	subs	r7, #1
 800971a:	b2ff      	uxtb	r7, r7
 800971c:	2f00      	cmp	r7, #0
 800971e:	d00a      	beq.n	8009736 <bme280_soft_reset+0xc2>
 8009720:	2b00      	cmp	r3, #0
 8009722:	d1d4      	bne.n	80096ce <bme280_soft_reset+0x5a>
}
 8009724:	b006      	add	sp, #24
 8009726:	bce0      	pop	{r5, r6, r7}
 8009728:	46ba      	mov	sl, r7
 800972a:	46b1      	mov	r9, r6
 800972c:	46a8      	mov	r8, r5
 800972e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rslt = BME280_E_NULL_PTR; // BME280_E_NULL_PTR = INT8_C(-1)
 8009730:	4653      	mov	r3, sl
 8009732:	702b      	strb	r3, [r5, #0]
 8009734:	e7e9      	b.n	800970a <bme280_soft_reset+0x96>
            if (status_reg & BME280_STATUS_IM_UPDATE)
 8009736:	2b00      	cmp	r3, #0
 8009738:	d0f4      	beq.n	8009724 <bme280_soft_reset+0xb0>
                rslt = BME280_E_NVM_COPY_FAILED;
 800973a:	2006      	movs	r0, #6
 800973c:	4240      	negs	r0, r0
 800973e:	e7f1      	b.n	8009724 <bme280_soft_reset+0xb0>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 8009740:	2301      	movs	r3, #1
 8009742:	425b      	negs	r3, r3
 8009744:	e7d2      	b.n	80096ec <bme280_soft_reset+0x78>
 8009746:	2001      	movs	r0, #1
 8009748:	4240      	negs	r0, r0
 800974a:	e7eb      	b.n	8009724 <bme280_soft_reset+0xb0>
                rslt = BME280_E_COMM_FAIL;
 800974c:	2004      	movs	r0, #4
 800974e:	4240      	negs	r0, r0
 8009750:	e7e8      	b.n	8009724 <bme280_soft_reset+0xb0>
 8009752:	46c0      	nop			@ (mov r8, r8)

08009754 <bme280_init>:
{
 8009754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009756:	46de      	mov	lr, fp
 8009758:	4657      	mov	r7, sl
 800975a:	464e      	mov	r6, r9
 800975c:	4645      	mov	r5, r8
 800975e:	b5e0      	push	{r5, r6, r7, lr}
 8009760:	b089      	sub	sp, #36	@ 0x24
    uint8_t chip_id = 0;
 8009762:	2300      	movs	r3, #0
 8009764:	466a      	mov	r2, sp
{
 8009766:	1e04      	subs	r4, r0, #0
    uint8_t chip_id = 0;
 8009768:	7013      	strb	r3, [r2, #0]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800976a:	d100      	bne.n	800976e <bme280_init+0x1a>
 800976c:	e0c6      	b.n	80098fc <bme280_init+0x1a8>
 800976e:	68c7      	ldr	r7, [r0, #12]
 8009770:	2f00      	cmp	r7, #0
 8009772:	d100      	bne.n	8009776 <bme280_init+0x22>
 8009774:	e0c2      	b.n	80098fc <bme280_init+0x1a8>
 8009776:	6903      	ldr	r3, [r0, #16]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d100      	bne.n	800977e <bme280_init+0x2a>
 800977c:	e0be      	b.n	80098fc <bme280_init+0x1a8>
 800977e:	6943      	ldr	r3, [r0, #20]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d100      	bne.n	8009786 <bme280_init+0x32>
 8009784:	e0ba      	b.n	80098fc <bme280_init+0x1a8>
 8009786:	4b65      	ldr	r3, [pc, #404]	@ (800991c <bme280_init+0x1c8>)
 8009788:	2505      	movs	r5, #5
 800978a:	4698      	mov	r8, r3
        rslt = BME280_E_NULL_PTR; // BME280_E_NULL_PTR = INT8_C(-1)
 800978c:	23ff      	movs	r3, #255	@ 0xff
 800978e:	469a      	mov	sl, r3
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8009790:	3bba      	subs	r3, #186	@ 0xba
 8009792:	4699      	mov	r9, r3
            rslt = BME280_E_COMM_FAIL; // BME280_E_COMM_FAIL = INT8_C(-4)
 8009794:	33b7      	adds	r3, #183	@ 0xb7
 8009796:	469b      	mov	fp, r3
 8009798:	1c56      	adds	r6, r2, #1
 800979a:	e020      	b.n	80097de <bme280_init+0x8a>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800979c:	6863      	ldr	r3, [r4, #4]
 800979e:	2201      	movs	r2, #1
 80097a0:	4669      	mov	r1, sp
 80097a2:	20d0      	movs	r0, #208	@ 0xd0
 80097a4:	47b8      	blx	r7
 80097a6:	464b      	mov	r3, r9
 80097a8:	54e0      	strb	r0, [r4, r3]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS) // BME280_INTF_RET_SUCCESS = INT8_C(0)
 80097aa:	2800      	cmp	r0, #0
 80097ac:	d001      	beq.n	80097b2 <bme280_init+0x5e>
            rslt = BME280_E_COMM_FAIL; // BME280_E_COMM_FAIL = INT8_C(-4)
 80097ae:	465b      	mov	r3, fp
 80097b0:	7033      	strb	r3, [r6, #0]
            printf("bme280 chip_id = %x\n", chip_id);
 80097b2:	466b      	mov	r3, sp
    return rslt;
 80097b4:	7837      	ldrb	r7, [r6, #0]
            printf("bme280 chip_id = %x\n", chip_id);
 80097b6:	4640      	mov	r0, r8
    return rslt;
 80097b8:	b27f      	sxtb	r7, r7
            printf("bme280 chip_id = %x\n", chip_id);
 80097ba:	7819      	ldrb	r1, [r3, #0]
 80097bc:	f7fd fb18 	bl	8006df0 <printf_>
            if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID))
 80097c0:	2f00      	cmp	r7, #0
 80097c2:	d103      	bne.n	80097cc <bme280_init+0x78>
 80097c4:	466b      	mov	r3, sp
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	2b60      	cmp	r3, #96	@ 0x60
 80097ca:	d023      	beq.n	8009814 <bme280_init+0xc0>
        while (try_count)
 80097cc:	3d01      	subs	r5, #1
            dev->delay_us(1, dev->intf_ptr);
 80097ce:	2001      	movs	r0, #1
 80097d0:	6861      	ldr	r1, [r4, #4]
 80097d2:	6963      	ldr	r3, [r4, #20]
        while (try_count)
 80097d4:	b2ed      	uxtb	r5, r5
            dev->delay_us(1, dev->intf_ptr);
 80097d6:	4798      	blx	r3
        while (try_count)
 80097d8:	2d00      	cmp	r5, #0
 80097da:	d012      	beq.n	8009802 <bme280_init+0xae>
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80097dc:	68e7      	ldr	r7, [r4, #12]
 80097de:	2f00      	cmp	r7, #0
 80097e0:	d100      	bne.n	80097e4 <bme280_init+0x90>
 80097e2:	e088      	b.n	80098f6 <bme280_init+0x1a2>
 80097e4:	6923      	ldr	r3, [r4, #16]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d100      	bne.n	80097ec <bme280_init+0x98>
 80097ea:	e084      	b.n	80098f6 <bme280_init+0x1a2>
 80097ec:	6963      	ldr	r3, [r4, #20]
 80097ee:	425a      	negs	r2, r3
 80097f0:	4153      	adcs	r3, r2
 80097f2:	425b      	negs	r3, r3
    rslt = null_ptr_check(dev);
 80097f4:	7033      	strb	r3, [r6, #0]
    if ((rslt == BME280_OK) && (reg_data != NULL))
 80097f6:	7833      	ldrb	r3, [r6, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d0cf      	beq.n	800979c <bme280_init+0x48>
        rslt = BME280_E_NULL_PTR; // BME280_E_NULL_PTR = INT8_C(-1)
 80097fc:	4653      	mov	r3, sl
 80097fe:	7033      	strb	r3, [r6, #0]
 8009800:	e7d7      	b.n	80097b2 <bme280_init+0x5e>
            rslt = BME280_E_DEV_NOT_FOUND;
 8009802:	2002      	movs	r0, #2
 8009804:	4240      	negs	r0, r0
}
 8009806:	b009      	add	sp, #36	@ 0x24
 8009808:	bcf0      	pop	{r4, r5, r6, r7}
 800980a:	46bb      	mov	fp, r7
 800980c:	46b2      	mov	sl, r6
 800980e:	46a9      	mov	r9, r5
 8009810:	46a0      	mov	r8, r4
 8009812:	bdf0      	pop	{r4, r5, r6, r7, pc}
                rslt = bme280_soft_reset(dev);
 8009814:	0020      	movs	r0, r4
                dev->chip_id = chip_id;
 8009816:	7023      	strb	r3, [r4, #0]
                rslt = bme280_soft_reset(dev);
 8009818:	f7ff ff2c 	bl	8009674 <bme280_soft_reset>
                if (rslt == BME280_OK)
 800981c:	2800      	cmp	r0, #0
 800981e:	d1f2      	bne.n	8009806 <bme280_init+0xb2>
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 8009820:	9001      	str	r0, [sp, #4]
 8009822:	2216      	movs	r2, #22
 8009824:	2100      	movs	r1, #0
 8009826:	a802      	add	r0, sp, #8
 8009828:	f003 f994 	bl	800cb54 <memset>
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800982c:	68e6      	ldr	r6, [r4, #12]
 800982e:	2e00      	cmp	r6, #0
 8009830:	d06d      	beq.n	800990e <bme280_init+0x1ba>
 8009832:	6923      	ldr	r3, [r4, #16]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d06a      	beq.n	800990e <bme280_init+0x1ba>
 8009838:	6963      	ldr	r3, [r4, #20]
 800983a:	425a      	negs	r2, r3
 800983c:	4153      	adcs	r3, r2
 800983e:	425b      	negs	r3, r3
    rslt = null_ptr_check(dev);
 8009840:	466a      	mov	r2, sp
 8009842:	7093      	strb	r3, [r2, #2]
    if ((rslt == BME280_OK) && (reg_data != NULL))
 8009844:	7893      	ldrb	r3, [r2, #2]
    rslt = null_ptr_check(dev);
 8009846:	1c95      	adds	r5, r2, #2
    if ((rslt == BME280_OK) && (reg_data != NULL))
 8009848:	2b00      	cmp	r3, #0
 800984a:	d15a      	bne.n	8009902 <bme280_init+0x1ae>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800984c:	6863      	ldr	r3, [r4, #4]
 800984e:	221a      	movs	r2, #26
 8009850:	2088      	movs	r0, #136	@ 0x88
 8009852:	a901      	add	r1, sp, #4
 8009854:	47b0      	blx	r6
 8009856:	2345      	movs	r3, #69	@ 0x45
 8009858:	54e0      	strb	r0, [r4, r3]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS) // BME280_INTF_RET_SUCCESS = INT8_C(0)
 800985a:	2800      	cmp	r0, #0
 800985c:	d001      	beq.n	8009862 <bme280_init+0x10e>
            rslt = BME280_E_COMM_FAIL; // BME280_E_COMM_FAIL = INT8_C(-4)
 800985e:	33b7      	adds	r3, #183	@ 0xb7
 8009860:	702b      	strb	r3, [r5, #0]
    return rslt;
 8009862:	782b      	ldrb	r3, [r5, #0]
 8009864:	b258      	sxtb	r0, r3
    if (rslt == BME280_OK)
 8009866:	2b00      	cmp	r3, #0
 8009868:	d1cd      	bne.n	8009806 <bme280_init+0xb2>
    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800986a:	9b01      	ldr	r3, [sp, #4]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 800986c:	9a05      	ldr	r2, [sp, #20]
    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800986e:	61a3      	str	r3, [r4, #24]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8009870:	9b02      	ldr	r3, [sp, #8]
    calib_data->dig_h1 = reg_data[25];
 8009872:	ad01      	add	r5, sp, #4
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8009874:	61e3      	str	r3, [r4, #28]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8009876:	9b06      	ldr	r3, [sp, #24]
 8009878:	62a2      	str	r2, [r4, #40]	@ 0x28
 800987a:	62e3      	str	r3, [r4, #44]	@ 0x2c
    calib_data->dig_h1 = reg_data[25];
 800987c:	2330      	movs	r3, #48	@ 0x30
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 800987e:	9904      	ldr	r1, [sp, #16]
 8009880:	9803      	ldr	r0, [sp, #12]
    calib_data->dig_h1 = reg_data[25];
 8009882:	7e6a      	ldrb	r2, [r5, #25]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8009884:	6220      	str	r0, [r4, #32]
 8009886:	6261      	str	r1, [r4, #36]	@ 0x24
    calib_data->dig_h1 = reg_data[25];
 8009888:	54e2      	strb	r2, [r4, r3]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800988a:	68e7      	ldr	r7, [r4, #12]
 800988c:	2f00      	cmp	r7, #0
 800988e:	d041      	beq.n	8009914 <bme280_init+0x1c0>
 8009890:	6923      	ldr	r3, [r4, #16]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d03e      	beq.n	8009914 <bme280_init+0x1c0>
 8009896:	6963      	ldr	r3, [r4, #20]
 8009898:	425a      	negs	r2, r3
 800989a:	4153      	adcs	r3, r2
 800989c:	425b      	negs	r3, r3
    rslt = null_ptr_check(dev);
 800989e:	466a      	mov	r2, sp
 80098a0:	70d3      	strb	r3, [r2, #3]
    if ((rslt == BME280_OK) && (reg_data != NULL))
 80098a2:	78d3      	ldrb	r3, [r2, #3]
    rslt = null_ptr_check(dev);
 80098a4:	1cd6      	adds	r6, r2, #3
    if ((rslt == BME280_OK) && (reg_data != NULL))
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d12e      	bne.n	8009908 <bme280_init+0x1b4>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80098aa:	6863      	ldr	r3, [r4, #4]
 80098ac:	2207      	movs	r2, #7
 80098ae:	0029      	movs	r1, r5
 80098b0:	20e1      	movs	r0, #225	@ 0xe1
 80098b2:	47b8      	blx	r7
 80098b4:	2345      	movs	r3, #69	@ 0x45
 80098b6:	54e0      	strb	r0, [r4, r3]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS) // BME280_INTF_RET_SUCCESS = INT8_C(0)
 80098b8:	2800      	cmp	r0, #0
 80098ba:	d001      	beq.n	80098c0 <bme280_init+0x16c>
            rslt = BME280_E_COMM_FAIL; // BME280_E_COMM_FAIL = INT8_C(-4)
 80098bc:	33b7      	adds	r3, #183	@ 0xb7
 80098be:	7033      	strb	r3, [r6, #0]
    return rslt;
 80098c0:	7833      	ldrb	r3, [r6, #0]
 80098c2:	b258      	sxtb	r0, r3
        if (rslt == BME280_OK)
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d19e      	bne.n	8009806 <bme280_init+0xb2>
    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80098c8:	882b      	ldrh	r3, [r5, #0]
    calib_data->dig_h3 = reg_data[2];
 80098ca:	78aa      	ldrb	r2, [r5, #2]
    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80098cc:	8663      	strh	r3, [r4, #50]	@ 0x32
    calib_data->dig_h3 = reg_data[2];
 80098ce:	2334      	movs	r3, #52	@ 0x34
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80098d0:	2103      	movs	r1, #3
    calib_data->dig_h3 = reg_data[2];
 80098d2:	54e2      	strb	r2, [r4, r3]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80098d4:	220f      	movs	r2, #15
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80098d6:	5669      	ldrsb	r1, [r5, r1]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80098d8:	792b      	ldrb	r3, [r5, #4]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80098da:	0109      	lsls	r1, r1, #4
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80098dc:	401a      	ands	r2, r3
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 80098de:	430a      	orrs	r2, r1
 80098e0:	86e2      	strh	r2, [r4, #54]	@ 0x36
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80098e2:	2205      	movs	r2, #5
 80098e4:	56aa      	ldrsb	r2, [r5, r2]
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 80098e6:	091b      	lsrs	r3, r3, #4
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80098e8:	0112      	lsls	r2, r2, #4
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 80098ea:	4313      	orrs	r3, r2
 80098ec:	8723      	strh	r3, [r4, #56]	@ 0x38
    calib_data->dig_h6 = (int8_t)reg_data[6];
 80098ee:	233a      	movs	r3, #58	@ 0x3a
 80098f0:	79aa      	ldrb	r2, [r5, #6]
 80098f2:	54e2      	strb	r2, [r4, r3]
}
 80098f4:	e787      	b.n	8009806 <bme280_init+0xb2>
        rslt = BME280_E_NULL_PTR;
 80098f6:	2301      	movs	r3, #1
 80098f8:	425b      	negs	r3, r3
 80098fa:	e77b      	b.n	80097f4 <bme280_init+0xa0>
 80098fc:	2001      	movs	r0, #1
 80098fe:	4240      	negs	r0, r0
 8009900:	e781      	b.n	8009806 <bme280_init+0xb2>
        rslt = BME280_E_NULL_PTR; // BME280_E_NULL_PTR = INT8_C(-1)
 8009902:	23ff      	movs	r3, #255	@ 0xff
 8009904:	702b      	strb	r3, [r5, #0]
 8009906:	e7ac      	b.n	8009862 <bme280_init+0x10e>
 8009908:	23ff      	movs	r3, #255	@ 0xff
 800990a:	7033      	strb	r3, [r6, #0]
 800990c:	e7d8      	b.n	80098c0 <bme280_init+0x16c>
        rslt = BME280_E_NULL_PTR;
 800990e:	2301      	movs	r3, #1
 8009910:	425b      	negs	r3, r3
 8009912:	e795      	b.n	8009840 <bme280_init+0xec>
 8009914:	2301      	movs	r3, #1
 8009916:	425b      	negs	r3, r3
 8009918:	e7c1      	b.n	800989e <bme280_init+0x14a>
 800991a:	46c0      	nop			@ (mov r8, r8)
 800991c:	0800ef14 	.word	0x0800ef14

08009920 <bme280_compensate_data>:
{
 8009920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009922:	4657      	mov	r7, sl
 8009924:	464e      	mov	r6, r9
 8009926:	4645      	mov	r5, r8
 8009928:	46de      	mov	lr, fp
 800992a:	b5e0      	push	{r5, r6, r7, lr}
 800992c:	001c      	movs	r4, r3
 800992e:	0006      	movs	r6, r0
 8009930:	000f      	movs	r7, r1
 8009932:	0015      	movs	r5, r2
 8009934:	b083      	sub	sp, #12
    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8009936:	2900      	cmp	r1, #0
 8009938:	d100      	bne.n	800993c <bme280_compensate_data+0x1c>
 800993a:	e135      	b.n	8009ba8 <bme280_compensate_data+0x288>
 800993c:	2a00      	cmp	r2, #0
 800993e:	d100      	bne.n	8009942 <bme280_compensate_data+0x22>
 8009940:	e132      	b.n	8009ba8 <bme280_compensate_data+0x288>
 8009942:	2b00      	cmp	r3, #0
 8009944:	d100      	bne.n	8009948 <bme280_compensate_data+0x28>
 8009946:	e12f      	b.n	8009ba8 <bme280_compensate_data+0x288>
        comp_data->temperature = 0;
 8009948:	2300      	movs	r3, #0
 800994a:	6053      	str	r3, [r2, #4]
        comp_data->pressure = 0;
 800994c:	6013      	str	r3, [r2, #0]
        comp_data->humidity = 0;
 800994e:	6093      	str	r3, [r2, #8]
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 8009950:	0743      	lsls	r3, r0, #29
 8009952:	d000      	beq.n	8009956 <bme280_compensate_data+0x36>
 8009954:	e0f2      	b.n	8009b3c <bme280_compensate_data+0x21c>
        if (sensor_comp & BME280_PRESS)
 8009956:	07f3      	lsls	r3, r6, #31
 8009958:	d400      	bmi.n	800995c <bme280_compensate_data+0x3c>
 800995a:	e088      	b.n	8009a6e <bme280_compensate_data+0x14e>
    var1 = (((int32_t)calib_data->t_fine) / 2) - (int32_t)64000;
 800995c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t)calib_data->dig_p6);
 800995e:	2103      	movs	r1, #3
    var1 = (((int32_t)calib_data->t_fine) / 2) - (int32_t)64000;
 8009960:	0fd3      	lsrs	r3, r2, #31
 8009962:	189b      	adds	r3, r3, r2
 8009964:	4a93      	ldr	r2, [pc, #588]	@ (8009bb4 <bme280_compensate_data+0x294>)
 8009966:	105b      	asrs	r3, r3, #1
 8009968:	4694      	mov	ip, r2
 800996a:	4463      	add	r3, ip
    var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t)calib_data->dig_p6);
 800996c:	17da      	asrs	r2, r3, #31
 800996e:	400a      	ands	r2, r1
 8009970:	2010      	movs	r0, #16
 8009972:	5e21      	ldrsh	r1, [r4, r0]
 8009974:	18d2      	adds	r2, r2, r3
 8009976:	4688      	mov	r8, r1
 8009978:	1092      	asrs	r2, r2, #2
    var2 = var2 + ((var1 * ((int32_t)calib_data->dig_p5)) * 2);
 800997a:	200e      	movs	r0, #14
 800997c:	5e21      	ldrsh	r1, [r4, r0]
    var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t)calib_data->dig_p6);
 800997e:	4352      	muls	r2, r2
    var2 = var2 + ((var1 * ((int32_t)calib_data->dig_p5)) * 2);
 8009980:	4689      	mov	r9, r1
    var2 = (var2 / 4) + (((int32_t)calib_data->dig_p4) * 65536);
 8009982:	200c      	movs	r0, #12
 8009984:	5e21      	ldrsh	r1, [r4, r0]
 8009986:	468c      	mov	ip, r1
    var3 = (calib_data->dig_p3 * (((var1 / 4) * (var1 / 4)) / 8192)) / 8;
 8009988:	210a      	movs	r1, #10
 800998a:	5e60      	ldrsh	r0, [r4, r1]
 800998c:	1351      	asrs	r1, r2, #13
 800998e:	4341      	muls	r1, r0
 8009990:	2007      	movs	r0, #7
 8009992:	468a      	mov	sl, r1
 8009994:	17c9      	asrs	r1, r1, #31
 8009996:	4008      	ands	r0, r1
 8009998:	4450      	add	r0, sl
 800999a:	10c1      	asrs	r1, r0, #3
 800999c:	9101      	str	r1, [sp, #4]
    var4 = (((int32_t)calib_data->dig_p2) * var1) / 2;
 800999e:	2008      	movs	r0, #8
 80099a0:	5e21      	ldrsh	r1, [r4, r0]
 80099a2:	4359      	muls	r1, r3
 80099a4:	468b      	mov	fp, r1
 80099a6:	0fc9      	lsrs	r1, r1, #31
 80099a8:	468a      	mov	sl, r1
 80099aa:	44da      	add	sl, fp
 80099ac:	4651      	mov	r1, sl
 80099ae:	1049      	asrs	r1, r1, #1
 80099b0:	468a      	mov	sl, r1
    var1 = (var3 + var4) / 262144;
 80099b2:	9901      	ldr	r1, [sp, #4]
 80099b4:	468b      	mov	fp, r1
 80099b6:	44da      	add	sl, fp
 80099b8:	4651      	mov	r1, sl
 80099ba:	17c8      	asrs	r0, r1, #31
    var1 = (((32768 + var1)) * ((int32_t)calib_data->dig_p1)) / 32768;
 80099bc:	2180      	movs	r1, #128	@ 0x80
    var1 = (var3 + var4) / 262144;
 80099be:	0380      	lsls	r0, r0, #14
    var1 = (((32768 + var1)) * ((int32_t)calib_data->dig_p1)) / 32768;
 80099c0:	0209      	lsls	r1, r1, #8
    var1 = (var3 + var4) / 262144;
 80099c2:	0b80      	lsrs	r0, r0, #14
 80099c4:	4450      	add	r0, sl
    var1 = (((32768 + var1)) * ((int32_t)calib_data->dig_p1)) / 32768;
 80099c6:	468a      	mov	sl, r1
    var1 = (var3 + var4) / 262144;
 80099c8:	1480      	asrs	r0, r0, #18
    var1 = (((32768 + var1)) * ((int32_t)calib_data->dig_p1)) / 32768;
 80099ca:	88e1      	ldrh	r1, [r4, #6]
 80099cc:	4450      	add	r0, sl
 80099ce:	4348      	muls	r0, r1
 80099d0:	13c0      	asrs	r0, r0, #15
    if (var1)
 80099d2:	d100      	bne.n	80099d6 <bme280_compensate_data+0xb6>
 80099d4:	e0af      	b.n	8009b36 <bme280_compensate_data+0x216>
    var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t)calib_data->dig_p6);
 80099d6:	4641      	mov	r1, r8
 80099d8:	12d2      	asrs	r2, r2, #11
 80099da:	4351      	muls	r1, r2
 80099dc:	000a      	movs	r2, r1
    var2 = var2 + ((var1 * ((int32_t)calib_data->dig_p5)) * 2);
 80099de:	4649      	mov	r1, r9
 80099e0:	434b      	muls	r3, r1
    var2 = (var2 / 4) + (((int32_t)calib_data->dig_p4) * 65536);
 80099e2:	2103      	movs	r1, #3
    var2 = var2 + ((var1 * ((int32_t)calib_data->dig_p5)) * 2);
 80099e4:	005b      	lsls	r3, r3, #1
 80099e6:	189b      	adds	r3, r3, r2
    var2 = (var2 / 4) + (((int32_t)calib_data->dig_p4) * 65536);
 80099e8:	17da      	asrs	r2, r3, #31
 80099ea:	4011      	ands	r1, r2
        var5 = (uint32_t)((uint32_t)1048576) - uncomp_data->pressure;
 80099ec:	2280      	movs	r2, #128	@ 0x80
    var2 = (var2 / 4) + (((int32_t)calib_data->dig_p4) * 65536);
 80099ee:	18c9      	adds	r1, r1, r3
        var5 = (uint32_t)((uint32_t)1048576) - uncomp_data->pressure;
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	0352      	lsls	r2, r2, #13
 80099f4:	1ad2      	subs	r2, r2, r3
    var2 = (var2 / 4) + (((int32_t)calib_data->dig_p4) * 65536);
 80099f6:	4663      	mov	r3, ip
 80099f8:	1089      	asrs	r1, r1, #2
 80099fa:	041b      	lsls	r3, r3, #16
 80099fc:	1859      	adds	r1, r3, r1
        pressure = ((uint32_t)(var5 - (uint32_t)(var2 / 4096))) * 3125;
 80099fe:	17cb      	asrs	r3, r1, #31
 8009a00:	051b      	lsls	r3, r3, #20
 8009a02:	0d1b      	lsrs	r3, r3, #20
 8009a04:	185b      	adds	r3, r3, r1
 8009a06:	131b      	asrs	r3, r3, #12
 8009a08:	1ad3      	subs	r3, r2, r3
 8009a0a:	4a6b      	ldr	r2, [pc, #428]	@ (8009bb8 <bme280_compensate_data+0x298>)
 8009a0c:	435a      	muls	r2, r3
        if (pressure < 0x80000000)
 8009a0e:	2a00      	cmp	r2, #0
 8009a10:	da00      	bge.n	8009a14 <bme280_compensate_data+0xf4>
 8009a12:	e0c1      	b.n	8009b98 <bme280_compensate_data+0x278>
            pressure = (pressure << 1) / ((uint32_t)var1);
 8009a14:	0052      	lsls	r2, r2, #1
 8009a16:	0001      	movs	r1, r0
 8009a18:	0010      	movs	r0, r2
 8009a1a:	f7f6 fb91 	bl	8000140 <__udivsi3>
        var1 = (((int32_t)calib_data->dig_p9) * ((int32_t)(((pressure / 8) * (pressure / 8)) / 8192))) / 4096;
 8009a1e:	08c3      	lsrs	r3, r0, #3
 8009a20:	435b      	muls	r3, r3
 8009a22:	2116      	movs	r1, #22
 8009a24:	5e62      	ldrsh	r2, [r4, r1]
 8009a26:	0b5b      	lsrs	r3, r3, #13
 8009a28:	435a      	muls	r2, r3
 8009a2a:	17d3      	asrs	r3, r2, #31
 8009a2c:	051b      	lsls	r3, r3, #20
 8009a2e:	0d1b      	lsrs	r3, r3, #20
 8009a30:	189a      	adds	r2, r3, r2
        var2 = (((int32_t)(pressure / 4)) * ((int32_t)calib_data->dig_p8)) / 8192;
 8009a32:	0883      	lsrs	r3, r0, #2
 8009a34:	469c      	mov	ip, r3
 8009a36:	2314      	movs	r3, #20
 8009a38:	5ee1      	ldrsh	r1, [r4, r3]
 8009a3a:	4663      	mov	r3, ip
 8009a3c:	4359      	muls	r1, r3
 8009a3e:	17cb      	asrs	r3, r1, #31
 8009a40:	04db      	lsls	r3, r3, #19
 8009a42:	0cdb      	lsrs	r3, r3, #19
 8009a44:	185b      	adds	r3, r3, r1
 8009a46:	135b      	asrs	r3, r3, #13
        var1 = (((int32_t)calib_data->dig_p9) * ((int32_t)(((pressure / 8) * (pressure / 8)) / 8192))) / 4096;
 8009a48:	1312      	asrs	r2, r2, #12
        pressure = (uint32_t)((int32_t)pressure + ((var1 + var2 + calib_data->dig_p7) / 16));
 8009a4a:	18d2      	adds	r2, r2, r3
 8009a4c:	2112      	movs	r1, #18
 8009a4e:	5e63      	ldrsh	r3, [r4, r1]
 8009a50:	18d2      	adds	r2, r2, r3
 8009a52:	230f      	movs	r3, #15
 8009a54:	17d1      	asrs	r1, r2, #31
 8009a56:	400b      	ands	r3, r1
 8009a58:	189b      	adds	r3, r3, r2
 8009a5a:	111b      	asrs	r3, r3, #4
 8009a5c:	1818      	adds	r0, r3, r0
        else if (pressure > pressure_max)
 8009a5e:	4b57      	ldr	r3, [pc, #348]	@ (8009bbc <bme280_compensate_data+0x29c>)
 8009a60:	4298      	cmp	r0, r3
 8009a62:	d900      	bls.n	8009a66 <bme280_compensate_data+0x146>
 8009a64:	0018      	movs	r0, r3
 8009a66:	4b56      	ldr	r3, [pc, #344]	@ (8009bc0 <bme280_compensate_data+0x2a0>)
 8009a68:	4298      	cmp	r0, r3
 8009a6a:	d364      	bcc.n	8009b36 <bme280_compensate_data+0x216>
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8009a6c:	6028      	str	r0, [r5, #0]
        if (sensor_comp & BME280_HUM)
 8009a6e:	0776      	lsls	r6, r6, #29
 8009a70:	d559      	bpl.n	8009b26 <bme280_compensate_data+0x206>
    var1 = calib_data->t_fine - ((int32_t)76800);
 8009a72:	4b54      	ldr	r3, [pc, #336]	@ (8009bc4 <bme280_compensate_data+0x2a4>)
    var3 = (int32_t)(((int32_t)calib_data->dig_h4) * 1048576);
 8009a74:	211e      	movs	r1, #30
 8009a76:	5e62      	ldrsh	r2, [r4, r1]
    var1 = calib_data->t_fine - ((int32_t)76800);
 8009a78:	469c      	mov	ip, r3
    var2 = (int32_t)(uncomp_data->humidity * 16384);
 8009a7a:	68bb      	ldr	r3, [r7, #8]
    var3 = (int32_t)(((int32_t)calib_data->dig_h4) * 1048576);
 8009a7c:	0512      	lsls	r2, r2, #20
    var1 = calib_data->t_fine - ((int32_t)76800);
 8009a7e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
    var2 = (int32_t)(uncomp_data->humidity * 16384);
 8009a80:	039b      	lsls	r3, r3, #14
    var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8009a82:	1a9b      	subs	r3, r3, r2
    var4 = ((int32_t)calib_data->dig_h5) * var1;
 8009a84:	2120      	movs	r1, #32
 8009a86:	5e62      	ldrsh	r2, [r4, r1]
    var1 = calib_data->t_fine - ((int32_t)76800);
 8009a88:	4460      	add	r0, ip
    var4 = ((int32_t)calib_data->dig_h5) * var1;
 8009a8a:	4342      	muls	r2, r0
    var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8009a8c:	1a9b      	subs	r3, r3, r2
 8009a8e:	2280      	movs	r2, #128	@ 0x80
 8009a90:	01d2      	lsls	r2, r2, #7
 8009a92:	4694      	mov	ip, r2
 8009a94:	4463      	add	r3, ip
 8009a96:	17d9      	asrs	r1, r3, #31
 8009a98:	0449      	lsls	r1, r1, #17
 8009a9a:	0c49      	lsrs	r1, r1, #17
 8009a9c:	18c9      	adds	r1, r1, r3
    var3 = (var1 * ((int32_t)calib_data->dig_h3)) / 2048;
 8009a9e:	7f23      	ldrb	r3, [r4, #28]
    var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8009aa0:	13c9      	asrs	r1, r1, #15
    var3 = (var1 * ((int32_t)calib_data->dig_h3)) / 2048;
 8009aa2:	4343      	muls	r3, r0
 8009aa4:	17da      	asrs	r2, r3, #31
 8009aa6:	0552      	lsls	r2, r2, #21
 8009aa8:	0d52      	lsrs	r2, r2, #21
 8009aaa:	18d2      	adds	r2, r2, r3
    var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8009aac:	2380      	movs	r3, #128	@ 0x80
 8009aae:	021b      	lsls	r3, r3, #8
 8009ab0:	469c      	mov	ip, r3
    var2 = (var1 * ((int32_t)calib_data->dig_h6)) / 1024;
 8009ab2:	2322      	movs	r3, #34	@ 0x22
 8009ab4:	56e3      	ldrsb	r3, [r4, r3]
    var3 = (var1 * ((int32_t)calib_data->dig_h3)) / 2048;
 8009ab6:	12d2      	asrs	r2, r2, #11
    var2 = (var1 * ((int32_t)calib_data->dig_h6)) / 1024;
 8009ab8:	4358      	muls	r0, r3
 8009aba:	17c3      	asrs	r3, r0, #31
 8009abc:	059b      	lsls	r3, r3, #22
 8009abe:	0d9b      	lsrs	r3, r3, #22
 8009ac0:	181b      	adds	r3, r3, r0
    var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8009ac2:	4462      	add	r2, ip
    var2 = (var1 * ((int32_t)calib_data->dig_h6)) / 1024;
 8009ac4:	129b      	asrs	r3, r3, #10
    var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8009ac6:	4353      	muls	r3, r2
 8009ac8:	17da      	asrs	r2, r3, #31
 8009aca:	0592      	lsls	r2, r2, #22
 8009acc:	0d92      	lsrs	r2, r2, #22
 8009ace:	18d3      	adds	r3, r2, r3
 8009ad0:	2280      	movs	r2, #128	@ 0x80
 8009ad2:	0392      	lsls	r2, r2, #14
 8009ad4:	4694      	mov	ip, r2
 8009ad6:	129b      	asrs	r3, r3, #10
    var2 = ((var4 * ((int32_t)calib_data->dig_h2)) + 8192) / 16384;
 8009ad8:	201a      	movs	r0, #26
 8009ada:	5e22      	ldrsh	r2, [r4, r0]
    var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8009adc:	4463      	add	r3, ip
    var2 = ((var4 * ((int32_t)calib_data->dig_h2)) + 8192) / 16384;
 8009ade:	435a      	muls	r2, r3
 8009ae0:	2380      	movs	r3, #128	@ 0x80
 8009ae2:	019b      	lsls	r3, r3, #6
 8009ae4:	469c      	mov	ip, r3
 8009ae6:	4462      	add	r2, ip
 8009ae8:	17d3      	asrs	r3, r2, #31
 8009aea:	049b      	lsls	r3, r3, #18
 8009aec:	0c9b      	lsrs	r3, r3, #18
 8009aee:	189b      	adds	r3, r3, r2
 8009af0:	139b      	asrs	r3, r3, #14
    var3 = var5 * var2;
 8009af2:	434b      	muls	r3, r1
    var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8009af4:	17da      	asrs	r2, r3, #31
 8009af6:	0452      	lsls	r2, r2, #17
 8009af8:	0c52      	lsrs	r2, r2, #17
 8009afa:	18d2      	adds	r2, r2, r3
 8009afc:	13d2      	asrs	r2, r2, #15
 8009afe:	4352      	muls	r2, r2
    var5 = var3 - ((var4 * ((int32_t)calib_data->dig_h1)) / 16);
 8009b00:	7e21      	ldrb	r1, [r4, #24]
    var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8009b02:	11d2      	asrs	r2, r2, #7
    var5 = var3 - ((var4 * ((int32_t)calib_data->dig_h1)) / 16);
 8009b04:	4351      	muls	r1, r2
 8009b06:	220f      	movs	r2, #15
 8009b08:	17c8      	asrs	r0, r1, #31
 8009b0a:	4002      	ands	r2, r0
 8009b0c:	1852      	adds	r2, r2, r1
 8009b0e:	1112      	asrs	r2, r2, #4
 8009b10:	1a9b      	subs	r3, r3, r2
    var5 = (var5 < 0 ? 0 : var5);
 8009b12:	43da      	mvns	r2, r3
 8009b14:	17d2      	asrs	r2, r2, #31
 8009b16:	4013      	ands	r3, r2
    var5 = (var5 > 419430400 ? 419430400 : var5);
 8009b18:	22c8      	movs	r2, #200	@ 0xc8
 8009b1a:	0552      	lsls	r2, r2, #21
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	dd00      	ble.n	8009b22 <bme280_compensate_data+0x202>
 8009b20:	0013      	movs	r3, r2
    humidity = (uint32_t)(var5 / 4096);
 8009b22:	131b      	asrs	r3, r3, #12
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8009b24:	60ab      	str	r3, [r5, #8]
    int8_t rslt = BME280_OK;
 8009b26:	2000      	movs	r0, #0
}
 8009b28:	b003      	add	sp, #12
 8009b2a:	bcf0      	pop	{r4, r5, r6, r7}
 8009b2c:	46bb      	mov	fp, r7
 8009b2e:	46b2      	mov	sl, r6
 8009b30:	46a9      	mov	r9, r5
 8009b32:	46a0      	mov	r8, r4
 8009b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pressure = pressure_min;
 8009b36:	4822      	ldr	r0, [pc, #136]	@ (8009bc0 <bme280_compensate_data+0x2a0>)
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8009b38:	6028      	str	r0, [r5, #0]
 8009b3a:	e798      	b.n	8009a6e <bme280_compensate_data+0x14e>
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8009b3c:	684b      	ldr	r3, [r1, #4]
    var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_t1 * 2));
 8009b3e:	8820      	ldrh	r0, [r4, #0]
 8009b40:	08d9      	lsrs	r1, r3, #3
 8009b42:	0042      	lsls	r2, r0, #1
 8009b44:	1a8a      	subs	r2, r1, r2
 8009b46:	4694      	mov	ip, r2
    var1 = (var1 * ((int32_t)calib_data->dig_t2)) / 2048;
 8009b48:	2102      	movs	r1, #2
 8009b4a:	5e62      	ldrsh	r2, [r4, r1]
 8009b4c:	4661      	mov	r1, ip
    var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_t1));
 8009b4e:	091b      	lsrs	r3, r3, #4
 8009b50:	1a1b      	subs	r3, r3, r0
    var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_t3)) / 16384;
 8009b52:	435b      	muls	r3, r3
    var1 = (var1 * ((int32_t)calib_data->dig_t2)) / 2048;
 8009b54:	434a      	muls	r2, r1
    var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_t3)) / 16384;
 8009b56:	2004      	movs	r0, #4
 8009b58:	5e21      	ldrsh	r1, [r4, r0]
 8009b5a:	131b      	asrs	r3, r3, #12
 8009b5c:	4359      	muls	r1, r3
    var1 = (var1 * ((int32_t)calib_data->dig_t2)) / 2048;
 8009b5e:	17d3      	asrs	r3, r2, #31
 8009b60:	055b      	lsls	r3, r3, #21
 8009b62:	0d5b      	lsrs	r3, r3, #21
 8009b64:	189b      	adds	r3, r3, r2
    var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_t3)) / 16384;
 8009b66:	17ca      	asrs	r2, r1, #31
 8009b68:	0492      	lsls	r2, r2, #18
 8009b6a:	0c92      	lsrs	r2, r2, #18
 8009b6c:	1852      	adds	r2, r2, r1
 8009b6e:	1392      	asrs	r2, r2, #14
    var1 = (var1 * ((int32_t)calib_data->dig_t2)) / 2048;
 8009b70:	12db      	asrs	r3, r3, #11
    calib_data->t_fine = var1 + var2;
 8009b72:	189b      	adds	r3, r3, r2
    temperature = (calib_data->t_fine * 5 + 128) / 256;
 8009b74:	009a      	lsls	r2, r3, #2
    calib_data->t_fine = var1 + var2;
 8009b76:	6263      	str	r3, [r4, #36]	@ 0x24
    temperature = (calib_data->t_fine * 5 + 128) / 256;
 8009b78:	18d3      	adds	r3, r2, r3
    if (temperature < temperature_min)
 8009b7a:	4a13      	ldr	r2, [pc, #76]	@ (8009bc8 <bme280_compensate_data+0x2a8>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	db16      	blt.n	8009bae <bme280_compensate_data+0x28e>
    else if (temperature > temperature_max)
 8009b80:	4a12      	ldr	r2, [pc, #72]	@ (8009bcc <bme280_compensate_data+0x2ac>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	dc0e      	bgt.n	8009ba4 <bme280_compensate_data+0x284>
    temperature = (calib_data->t_fine * 5 + 128) / 256;
 8009b86:	22ff      	movs	r2, #255	@ 0xff
 8009b88:	3380      	adds	r3, #128	@ 0x80
 8009b8a:	17d9      	asrs	r1, r3, #31
 8009b8c:	400a      	ands	r2, r1
 8009b8e:	18d3      	adds	r3, r2, r3
 8009b90:	121b      	asrs	r3, r3, #8
    __asm volatile("nop");
 8009b92:	46c0      	nop			@ (mov r8, r8)
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8009b94:	606b      	str	r3, [r5, #4]
 8009b96:	e6de      	b.n	8009956 <bme280_compensate_data+0x36>
            pressure = (pressure / (uint32_t)var1) * 2;
 8009b98:	0001      	movs	r1, r0
 8009b9a:	0010      	movs	r0, r2
 8009b9c:	f7f6 fad0 	bl	8000140 <__udivsi3>
 8009ba0:	0040      	lsls	r0, r0, #1
 8009ba2:	e73c      	b.n	8009a1e <bme280_compensate_data+0xfe>
        temperature = temperature_max;
 8009ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8009bd0 <bme280_compensate_data+0x2b0>)
 8009ba6:	e7f4      	b.n	8009b92 <bme280_compensate_data+0x272>
        rslt = BME280_E_NULL_PTR;
 8009ba8:	2001      	movs	r0, #1
 8009baa:	4240      	negs	r0, r0
 8009bac:	e7bc      	b.n	8009b28 <bme280_compensate_data+0x208>
        temperature = temperature_min;
 8009bae:	4b09      	ldr	r3, [pc, #36]	@ (8009bd4 <bme280_compensate_data+0x2b4>)
 8009bb0:	e7ef      	b.n	8009b92 <bme280_compensate_data+0x272>
 8009bb2:	46c0      	nop			@ (mov r8, r8)
 8009bb4:	ffff0600 	.word	0xffff0600
 8009bb8:	00000c35 	.word	0x00000c35
 8009bbc:	0001adb0 	.word	0x0001adb0
 8009bc0:	00007530 	.word	0x00007530
 8009bc4:	fffed400 	.word	0xfffed400
 8009bc8:	fff05e81 	.word	0xfff05e81
 8009bcc:	0021347f 	.word	0x0021347f
 8009bd0:	00002134 	.word	0x00002134
 8009bd4:	fffff060 	.word	0xfffff060

08009bd8 <bme280_get_sensor_data>:
{
 8009bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bda:	4647      	mov	r7, r8
 8009bdc:	46ce      	mov	lr, r9
 8009bde:	b580      	push	{r7, lr}
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 8009be0:	2700      	movs	r7, #0
{
 8009be2:	b087      	sub	sp, #28
 8009be4:	0014      	movs	r4, r2
 8009be6:	4680      	mov	r8, r0
 8009be8:	000e      	movs	r6, r1
    struct bme280_uncomp_data uncomp_data = {0};
 8009bea:	220c      	movs	r2, #12
 8009bec:	2100      	movs	r1, #0
 8009bee:	a803      	add	r0, sp, #12
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 8009bf0:	9701      	str	r7, [sp, #4]
 8009bf2:	9702      	str	r7, [sp, #8]
    struct bme280_uncomp_data uncomp_data = {0};
 8009bf4:	f002 ffae 	bl	800cb54 <memset>
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8009bf8:	2c00      	cmp	r4, #0
 8009bfa:	d050      	beq.n	8009c9e <bme280_get_sensor_data+0xc6>
 8009bfc:	68e3      	ldr	r3, [r4, #12]
 8009bfe:	4699      	mov	r9, r3
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d04c      	beq.n	8009c9e <bme280_get_sensor_data+0xc6>
 8009c04:	6923      	ldr	r3, [r4, #16]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d049      	beq.n	8009c9e <bme280_get_sensor_data+0xc6>
 8009c0a:	6963      	ldr	r3, [r4, #20]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d046      	beq.n	8009c9e <bme280_get_sensor_data+0xc6>
    if ((rslt == BME280_OK) && (comp_data != NULL))
 8009c10:	2e00      	cmp	r6, #0
 8009c12:	d044      	beq.n	8009c9e <bme280_get_sensor_data+0xc6>
    rslt = null_ptr_check(dev);
 8009c14:	466b      	mov	r3, sp
 8009c16:	1cdd      	adds	r5, r3, #3
 8009c18:	702f      	strb	r7, [r5, #0]
    if ((rslt == BME280_OK) && (reg_data != NULL))
 8009c1a:	782b      	ldrb	r3, [r5, #0]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d00a      	beq.n	8009c36 <bme280_get_sensor_data+0x5e>
        rslt = BME280_E_NULL_PTR; // BME280_E_NULL_PTR = INT8_C(-1)
 8009c20:	23ff      	movs	r3, #255	@ 0xff
 8009c22:	702b      	strb	r3, [r5, #0]
    return rslt;
 8009c24:	782b      	ldrb	r3, [r5, #0]
 8009c26:	b258      	sxtb	r0, r3
        if (rslt == BME280_OK)
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d013      	beq.n	8009c54 <bme280_get_sensor_data+0x7c>
}
 8009c2c:	b007      	add	sp, #28
 8009c2e:	bcc0      	pop	{r6, r7}
 8009c30:	46b9      	mov	r9, r7
 8009c32:	46b0      	mov	r8, r6
 8009c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8009c36:	6863      	ldr	r3, [r4, #4]
 8009c38:	2208      	movs	r2, #8
 8009c3a:	20f7      	movs	r0, #247	@ 0xf7
 8009c3c:	a901      	add	r1, sp, #4
 8009c3e:	47c8      	blx	r9
 8009c40:	2345      	movs	r3, #69	@ 0x45
 8009c42:	54e0      	strb	r0, [r4, r3]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS) // BME280_INTF_RET_SUCCESS = INT8_C(0)
 8009c44:	2800      	cmp	r0, #0
 8009c46:	d0ed      	beq.n	8009c24 <bme280_get_sensor_data+0x4c>
            rslt = BME280_E_COMM_FAIL; // BME280_E_COMM_FAIL = INT8_C(-4)
 8009c48:	33b7      	adds	r3, #183	@ 0xb7
 8009c4a:	702b      	strb	r3, [r5, #0]
    return rslt;
 8009c4c:	782b      	ldrb	r3, [r5, #0]
 8009c4e:	b258      	sxtb	r0, r3
        if (rslt == BME280_OK)
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d1eb      	bne.n	8009c2c <bme280_get_sensor_data+0x54>
    data_msb = (uint32_t)reg_data[0] << 12;
 8009c54:	466b      	mov	r3, sp
    data_lsb = (uint32_t)reg_data[1] << 4;
 8009c56:	466a      	mov	r2, sp
    data_msb = (uint32_t)reg_data[0] << 12;
 8009c58:	791b      	ldrb	r3, [r3, #4]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8009c5a:	7952      	ldrb	r2, [r2, #5]
    data_msb = (uint32_t)reg_data[0] << 12;
 8009c5c:	031b      	lsls	r3, r3, #12
    data_lsb = (uint32_t)reg_data[1] << 4;
 8009c5e:	0112      	lsls	r2, r2, #4
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8009c60:	4313      	orrs	r3, r2
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 8009c62:	466a      	mov	r2, sp
 8009c64:	7992      	ldrb	r2, [r2, #6]
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8009c66:	4640      	mov	r0, r8
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 8009c68:	0912      	lsrs	r2, r2, #4
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	9303      	str	r3, [sp, #12]
    data_lsb = (uint32_t)reg_data[4] << 4;
 8009c6e:	466a      	mov	r2, sp
    data_msb = (uint32_t)reg_data[3] << 12;
 8009c70:	466b      	mov	r3, sp
    data_lsb = (uint32_t)reg_data[4] << 4;
 8009c72:	7a12      	ldrb	r2, [r2, #8]
    data_msb = (uint32_t)reg_data[3] << 12;
 8009c74:	79db      	ldrb	r3, [r3, #7]
    data_lsb = (uint32_t)reg_data[4] << 4;
 8009c76:	0112      	lsls	r2, r2, #4
    data_msb = (uint32_t)reg_data[3] << 12;
 8009c78:	031b      	lsls	r3, r3, #12
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8009c7a:	4313      	orrs	r3, r2
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 8009c7c:	466a      	mov	r2, sp
 8009c7e:	7a52      	ldrb	r2, [r2, #9]
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8009c80:	a903      	add	r1, sp, #12
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 8009c82:	0912      	lsrs	r2, r2, #4
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8009c84:	4313      	orrs	r3, r2
 8009c86:	9304      	str	r3, [sp, #16]
    uncomp_data->humidity = data_msb | data_lsb;
 8009c88:	466b      	mov	r3, sp
 8009c8a:	895b      	ldrh	r3, [r3, #10]
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8009c8c:	0032      	movs	r2, r6
    uncomp_data->humidity = data_msb | data_lsb;
 8009c8e:	ba5b      	rev16	r3, r3
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	9305      	str	r3, [sp, #20]
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8009c94:	0023      	movs	r3, r4
 8009c96:	3318      	adds	r3, #24
 8009c98:	f7ff fe42 	bl	8009920 <bme280_compensate_data>
 8009c9c:	e7c6      	b.n	8009c2c <bme280_get_sensor_data+0x54>
        rslt = BME280_E_NULL_PTR;
 8009c9e:	2001      	movs	r0, #1
 8009ca0:	4240      	negs	r0, r0
 8009ca2:	e7c3      	b.n	8009c2c <bme280_get_sensor_data+0x54>

08009ca4 <bme280_cal_meas_delay>:
{
 8009ca4:	b500      	push	{lr}
    uint8_t osr_sett_to_act_osr[] = {0, 1, 2, 4, 8, 16};
 8009ca6:	4a20      	ldr	r2, [pc, #128]	@ (8009d28 <bme280_cal_meas_delay+0x84>)
{
 8009ca8:	b083      	sub	sp, #12
    uint8_t osr_sett_to_act_osr[] = {0, 1, 2, 4, 8, 16};
 8009caa:	6811      	ldr	r1, [r2, #0]
{
 8009cac:	0003      	movs	r3, r0
    uint8_t osr_sett_to_act_osr[] = {0, 1, 2, 4, 8, 16};
 8009cae:	9100      	str	r1, [sp, #0]
 8009cb0:	4669      	mov	r1, sp
 8009cb2:	8892      	ldrh	r2, [r2, #4]
 8009cb4:	808a      	strh	r2, [r1, #4]
    if (settings->osr_t <= 5)
 8009cb6:	7842      	ldrb	r2, [r0, #1]
 8009cb8:	2a05      	cmp	r2, #5
 8009cba:	d82a      	bhi.n	8009d12 <bme280_cal_meas_delay+0x6e>
        (uint32_t)((BME280_MEAS_OFFSET + (BME280_MEAS_DUR * temp_osr) +
 8009cbc:	5c8a      	ldrb	r2, [r1, r2]
 8009cbe:	00d0      	lsls	r0, r2, #3
 8009cc0:	1880      	adds	r0, r0, r2
 8009cc2:	0180      	lsls	r0, r0, #6
 8009cc4:	1a80      	subs	r0, r0, r2
 8009cc6:	4a19      	ldr	r2, [pc, #100]	@ (8009d2c <bme280_cal_meas_delay+0x88>)
 8009cc8:	0080      	lsls	r0, r0, #2
 8009cca:	4694      	mov	ip, r2
    if (settings->osr_p <= 5)
 8009ccc:	781a      	ldrb	r2, [r3, #0]
        (uint32_t)((BME280_MEAS_OFFSET + (BME280_MEAS_DUR * temp_osr) +
 8009cce:	4460      	add	r0, ip
    if (settings->osr_p <= 5)
 8009cd0:	2a05      	cmp	r2, #5
 8009cd2:	d822      	bhi.n	8009d1a <bme280_cal_meas_delay+0x76>
                    ((BME280_MEAS_DUR * pres_osr) + BME280_PRES_HUM_MEAS_OFFSET) +
 8009cd4:	4669      	mov	r1, sp
 8009cd6:	5c89      	ldrb	r1, [r1, r2]
    if (settings->osr_h <= 5)
 8009cd8:	789b      	ldrb	r3, [r3, #2]
                    ((BME280_MEAS_DUR * pres_osr) + BME280_PRES_HUM_MEAS_OFFSET) +
 8009cda:	00ca      	lsls	r2, r1, #3
 8009cdc:	1852      	adds	r2, r2, r1
 8009cde:	0192      	lsls	r2, r2, #6
 8009ce0:	1a52      	subs	r2, r2, r1
 8009ce2:	4913      	ldr	r1, [pc, #76]	@ (8009d30 <bme280_cal_meas_delay+0x8c>)
 8009ce4:	0092      	lsls	r2, r2, #2
 8009ce6:	468c      	mov	ip, r1
 8009ce8:	4462      	add	r2, ip
    if (settings->osr_h <= 5)
 8009cea:	2b05      	cmp	r3, #5
 8009cec:	d819      	bhi.n	8009d22 <bme280_cal_meas_delay+0x7e>
                    ((BME280_MEAS_DUR * hum_osr) + BME280_PRES_HUM_MEAS_OFFSET)) /
 8009cee:	4669      	mov	r1, sp
 8009cf0:	5cc9      	ldrb	r1, [r1, r3]
 8009cf2:	00cb      	lsls	r3, r1, #3
 8009cf4:	185b      	adds	r3, r3, r1
 8009cf6:	019b      	lsls	r3, r3, #6
 8009cf8:	1a5b      	subs	r3, r3, r1
 8009cfa:	490d      	ldr	r1, [pc, #52]	@ (8009d30 <bme280_cal_meas_delay+0x8c>)
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	468c      	mov	ip, r1
 8009d00:	4463      	add	r3, ip
 8009d02:	21fa      	movs	r1, #250	@ 0xfa
        (uint32_t)((BME280_MEAS_OFFSET + (BME280_MEAS_DUR * temp_osr) +
 8009d04:	1880      	adds	r0, r0, r2
                    ((BME280_MEAS_DUR * pres_osr) + BME280_PRES_HUM_MEAS_OFFSET) +
 8009d06:	18c0      	adds	r0, r0, r3
                    ((BME280_MEAS_DUR * hum_osr) + BME280_PRES_HUM_MEAS_OFFSET)) /
 8009d08:	0089      	lsls	r1, r1, #2
 8009d0a:	f7f6 faa3 	bl	8000254 <__divsi3>
}
 8009d0e:	b003      	add	sp, #12
 8009d10:	bd00      	pop	{pc}
    if (settings->osr_p <= 5)
 8009d12:	781a      	ldrb	r2, [r3, #0]
 8009d14:	4807      	ldr	r0, [pc, #28]	@ (8009d34 <bme280_cal_meas_delay+0x90>)
 8009d16:	2a05      	cmp	r2, #5
 8009d18:	d9dc      	bls.n	8009cd4 <bme280_cal_meas_delay+0x30>
    if (settings->osr_h <= 5)
 8009d1a:	789b      	ldrb	r3, [r3, #2]
 8009d1c:	4a06      	ldr	r2, [pc, #24]	@ (8009d38 <bme280_cal_meas_delay+0x94>)
 8009d1e:	2b05      	cmp	r3, #5
 8009d20:	d9e5      	bls.n	8009cee <bme280_cal_meas_delay+0x4a>
 8009d22:	4b05      	ldr	r3, [pc, #20]	@ (8009d38 <bme280_cal_meas_delay+0x94>)
 8009d24:	e7ed      	b.n	8009d02 <bme280_cal_meas_delay+0x5e>
 8009d26:	46c0      	nop			@ (mov r8, r8)
 8009d28:	0800e998 	.word	0x0800e998
 8009d2c:	000004e2 	.word	0x000004e2
 8009d30:	0000023f 	.word	0x0000023f
 8009d34:	000094a2 	.word	0x000094a2
 8009d38:	000091ff 	.word	0x000091ff

08009d3c <put_device_to_sleep>:
{
 8009d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d3e:	46d6      	mov	lr, sl
 8009d40:	464f      	mov	r7, r9
 8009d42:	4646      	mov	r6, r8
 8009d44:	b5c0      	push	{r6, r7, lr}
 8009d46:	0004      	movs	r4, r0
 8009d48:	b088      	sub	sp, #32
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8009d4a:	2800      	cmp	r0, #0
 8009d4c:	d100      	bne.n	8009d50 <put_device_to_sleep+0x14>
 8009d4e:	e13b      	b.n	8009fc8 <put_device_to_sleep+0x28c>
 8009d50:	68c3      	ldr	r3, [r0, #12]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d100      	bne.n	8009d58 <put_device_to_sleep+0x1c>
 8009d56:	e137      	b.n	8009fc8 <put_device_to_sleep+0x28c>
 8009d58:	6903      	ldr	r3, [r0, #16]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d100      	bne.n	8009d60 <put_device_to_sleep+0x24>
 8009d5e:	e133      	b.n	8009fc8 <put_device_to_sleep+0x28c>
 8009d60:	6943      	ldr	r3, [r0, #20]
 8009d62:	425a      	negs	r2, r3
 8009d64:	4153      	adcs	r3, r2
 8009d66:	425b      	negs	r3, r3
    rslt = null_ptr_check(dev);
 8009d68:	466a      	mov	r2, sp
 8009d6a:	70d3      	strb	r3, [r2, #3]
    if ((rslt == BME280_OK) && (reg_data != NULL))
 8009d6c:	78d3      	ldrb	r3, [r2, #3]
    rslt = null_ptr_check(dev);
 8009d6e:	1cd5      	adds	r5, r2, #3
    if ((rslt == BME280_OK) && (reg_data != NULL))
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d114      	bne.n	8009d9e <put_device_to_sleep+0x62>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8009d74:	6863      	ldr	r3, [r4, #4]
 8009d76:	2204      	movs	r2, #4
 8009d78:	20f2      	movs	r0, #242	@ 0xf2
 8009d7a:	68e6      	ldr	r6, [r4, #12]
 8009d7c:	a902      	add	r1, sp, #8
 8009d7e:	47b0      	blx	r6
 8009d80:	2345      	movs	r3, #69	@ 0x45
 8009d82:	54e0      	strb	r0, [r4, r3]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS) // BME280_INTF_RET_SUCCESS = INT8_C(0)
 8009d84:	2800      	cmp	r0, #0
 8009d86:	d000      	beq.n	8009d8a <put_device_to_sleep+0x4e>
 8009d88:	e097      	b.n	8009eba <put_device_to_sleep+0x17e>
    return rslt;
 8009d8a:	782b      	ldrb	r3, [r5, #0]
 8009d8c:	b258      	sxtb	r0, r3
    if (rslt == BME280_OK)
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d00b      	beq.n	8009daa <put_device_to_sleep+0x6e>
}
 8009d92:	b008      	add	sp, #32
 8009d94:	bce0      	pop	{r5, r6, r7}
 8009d96:	46ba      	mov	sl, r7
 8009d98:	46b1      	mov	r9, r6
 8009d9a:	46a8      	mov	r8, r5
 8009d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rslt = BME280_E_NULL_PTR; // BME280_E_NULL_PTR = INT8_C(-1)
 8009d9e:	23ff      	movs	r3, #255	@ 0xff
 8009da0:	702b      	strb	r3, [r5, #0]
    return rslt;
 8009da2:	782b      	ldrb	r3, [r5, #0]
 8009da4:	b258      	sxtb	r0, r3
    if (rslt == BME280_OK)
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d1f3      	bne.n	8009d92 <put_device_to_sleep+0x56>
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8009daa:	ab02      	add	r3, sp, #8
 8009dac:	781a      	ldrb	r2, [r3, #0]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8009dae:	789d      	ldrb	r5, [r3, #2]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8009db0:	78db      	ldrb	r3, [r3, #3]
        rslt = bme280_soft_reset(dev);
 8009db2:	0020      	movs	r0, r4
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8009db4:	4691      	mov	r9, r2
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8009db6:	4698      	mov	r8, r3
        rslt = bme280_soft_reset(dev);
 8009db8:	f7ff fc5c 	bl	8009674 <bme280_soft_reset>
        if (rslt == BME280_OK)
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	d1e8      	bne.n	8009d92 <put_device_to_sleep+0x56>
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8009dc0:	2c00      	cmp	r4, #0
 8009dc2:	d100      	bne.n	8009dc6 <put_device_to_sleep+0x8a>
 8009dc4:	e12f      	b.n	800a026 <put_device_to_sleep+0x2ea>
 8009dc6:	68e3      	ldr	r3, [r4, #12]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d100      	bne.n	8009dce <put_device_to_sleep+0x92>
 8009dcc:	e12b      	b.n	800a026 <put_device_to_sleep+0x2ea>
 8009dce:	6927      	ldr	r7, [r4, #16]
 8009dd0:	2f00      	cmp	r7, #0
 8009dd2:	d100      	bne.n	8009dd6 <put_device_to_sleep+0x9a>
 8009dd4:	e127      	b.n	800a026 <put_device_to_sleep+0x2ea>
 8009dd6:	6963      	ldr	r3, [r4, #20]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d03e      	beq.n	8009e5a <put_device_to_sleep+0x11e>
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8009ddc:	464a      	mov	r2, r9
 8009dde:	2307      	movs	r3, #7
            temp_buff[0] = reg_data[0];
 8009de0:	ae03      	add	r6, sp, #12
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8009de2:	4013      	ands	r3, r2
            temp_buff[0] = reg_data[0];
 8009de4:	7033      	strb	r3, [r6, #0]
            if (dev->intf != BME280_I2C_INTF)
 8009de6:	7a20      	ldrb	r0, [r4, #8]
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8009de8:	2201      	movs	r2, #1
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8009dea:	3801      	subs	r0, #1
 8009dec:	1e43      	subs	r3, r0, #1
 8009dee:	4198      	sbcs	r0, r3
 8009df0:	237f      	movs	r3, #127	@ 0x7f
 8009df2:	4240      	negs	r0, r0
 8009df4:	4398      	bics	r0, r3
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8009df6:	0031      	movs	r1, r6
 8009df8:	6863      	ldr	r3, [r4, #4]
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8009dfa:	30f2      	adds	r0, #242	@ 0xf2
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8009dfc:	47b8      	blx	r7
 8009dfe:	2345      	movs	r3, #69	@ 0x45
 8009e00:	54e0      	strb	r0, [r4, r3]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8009e02:	68e3      	ldr	r3, [r4, #12]
 8009e04:	4699      	mov	r9, r3
            if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 8009e06:	2800      	cmp	r0, #0
 8009e08:	d122      	bne.n	8009e50 <put_device_to_sleep+0x114>
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d100      	bne.n	8009e10 <put_device_to_sleep+0xd4>
 8009e0e:	e0d8      	b.n	8009fc2 <put_device_to_sleep+0x286>
 8009e10:	6927      	ldr	r7, [r4, #16]
 8009e12:	2f00      	cmp	r7, #0
 8009e14:	d100      	bne.n	8009e18 <put_device_to_sleep+0xdc>
 8009e16:	e0d4      	b.n	8009fc2 <put_device_to_sleep+0x286>
 8009e18:	6963      	ldr	r3, [r4, #20]
 8009e1a:	425a      	negs	r2, r3
 8009e1c:	4153      	adcs	r3, r2
 8009e1e:	425b      	negs	r3, r3
    rslt = null_ptr_check(dev);
 8009e20:	af01      	add	r7, sp, #4
 8009e22:	703b      	strb	r3, [r7, #0]
    if ((rslt == BME280_OK) && (reg_data != NULL))
 8009e24:	783b      	ldrb	r3, [r7, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d000      	beq.n	8009e2c <put_device_to_sleep+0xf0>
 8009e2a:	e0d0      	b.n	8009fce <put_device_to_sleep+0x292>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8009e2c:	4669      	mov	r1, sp
 8009e2e:	6863      	ldr	r3, [r4, #4]
 8009e30:	2201      	movs	r2, #1
 8009e32:	20f4      	movs	r0, #244	@ 0xf4
 8009e34:	3107      	adds	r1, #7
 8009e36:	47c8      	blx	r9
 8009e38:	2345      	movs	r3, #69	@ 0x45
 8009e3a:	54e0      	strb	r0, [r4, r3]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS) // BME280_INTF_RET_SUCCESS = INT8_C(0)
 8009e3c:	2800      	cmp	r0, #0
 8009e3e:	d001      	beq.n	8009e44 <put_device_to_sleep+0x108>
            rslt = BME280_E_COMM_FAIL; // BME280_E_COMM_FAIL = INT8_C(-4)
 8009e40:	23fc      	movs	r3, #252	@ 0xfc
 8009e42:	703b      	strb	r3, [r7, #0]
    return rslt;
 8009e44:	783b      	ldrb	r3, [r7, #0]
        if (rslt == BME280_OK)
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d100      	bne.n	8009e4c <put_device_to_sleep+0x110>
 8009e4a:	e0e6      	b.n	800a01a <put_device_to_sleep+0x2de>
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8009e4c:	68e3      	ldr	r3, [r4, #12]
 8009e4e:	4699      	mov	r9, r3
 8009e50:	464b      	mov	r3, r9
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d100      	bne.n	8009e58 <put_device_to_sleep+0x11c>
 8009e56:	e0e6      	b.n	800a026 <put_device_to_sleep+0x2ea>
 8009e58:	6927      	ldr	r7, [r4, #16]
 8009e5a:	2f00      	cmp	r7, #0
 8009e5c:	d100      	bne.n	8009e60 <put_device_to_sleep+0x124>
 8009e5e:	e0e2      	b.n	800a026 <put_device_to_sleep+0x2ea>
 8009e60:	6963      	ldr	r3, [r4, #20]
 8009e62:	425a      	negs	r2, r3
 8009e64:	4153      	adcs	r3, r2
 8009e66:	425b      	negs	r3, r3
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8009e68:	06ea      	lsls	r2, r5, #27
 8009e6a:	0f52      	lsrs	r2, r2, #29
 8009e6c:	4691      	mov	r9, r2
    rslt = null_ptr_check(dev);
 8009e6e:	466a      	mov	r2, sp
 8009e70:	7153      	strb	r3, [r2, #5]
    if ((rslt == BME280_OK) && (reg_data != NULL))
 8009e72:	7953      	ldrb	r3, [r2, #5]
    rslt = null_ptr_check(dev);
 8009e74:	1d56      	adds	r6, r2, #5
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8009e76:	096d      	lsrs	r5, r5, #5
    if ((rslt == BME280_OK) && (reg_data != NULL))
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d121      	bne.n	8009ec0 <put_device_to_sleep+0x184>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8009e7c:	1dd7      	adds	r7, r2, #7
 8009e7e:	68e2      	ldr	r2, [r4, #12]
 8009e80:	6863      	ldr	r3, [r4, #4]
 8009e82:	4692      	mov	sl, r2
 8009e84:	0039      	movs	r1, r7
 8009e86:	2201      	movs	r2, #1
 8009e88:	20f4      	movs	r0, #244	@ 0xf4
 8009e8a:	47d0      	blx	sl
 8009e8c:	2345      	movs	r3, #69	@ 0x45
 8009e8e:	54e0      	strb	r0, [r4, r3]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS) // BME280_INTF_RET_SUCCESS = INT8_C(0)
 8009e90:	2800      	cmp	r0, #0
 8009e92:	d001      	beq.n	8009e98 <put_device_to_sleep+0x15c>
            rslt = BME280_E_COMM_FAIL; // BME280_E_COMM_FAIL = INT8_C(-4)
 8009e94:	23fc      	movs	r3, #252	@ 0xfc
 8009e96:	7033      	strb	r3, [r6, #0]
    return rslt;
 8009e98:	7833      	ldrb	r3, [r6, #0]
 8009e9a:	b258      	sxtb	r0, r3
    if (rslt == BME280_OK)
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d000      	beq.n	8009ea2 <put_device_to_sleep+0x166>
 8009ea0:	e777      	b.n	8009d92 <put_device_to_sleep+0x56>
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8009ea2:	231c      	movs	r3, #28
 8009ea4:	783a      	ldrb	r2, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8009ea6:	016d      	lsls	r5, r5, #5
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8009ea8:	439a      	bics	r2, r3
 8009eaa:	464b      	mov	r3, r9
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	431a      	orrs	r2, r3
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8009eb0:	231f      	movs	r3, #31
 8009eb2:	4013      	ands	r3, r2
 8009eb4:	432b      	orrs	r3, r5
 8009eb6:	703b      	strb	r3, [r7, #0]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8009eb8:	e018      	b.n	8009eec <put_device_to_sleep+0x1b0>
            rslt = BME280_E_COMM_FAIL; // BME280_E_COMM_FAIL = INT8_C(-4)
 8009eba:	33b7      	adds	r3, #183	@ 0xb7
 8009ebc:	702b      	strb	r3, [r5, #0]
 8009ebe:	e764      	b.n	8009d8a <put_device_to_sleep+0x4e>
        rslt = BME280_E_NULL_PTR; // BME280_E_NULL_PTR = INT8_C(-1)
 8009ec0:	23ff      	movs	r3, #255	@ 0xff
 8009ec2:	7033      	strb	r3, [r6, #0]
    return rslt;
 8009ec4:	7833      	ldrb	r3, [r6, #0]
 8009ec6:	b258      	sxtb	r0, r3
    if (rslt == BME280_OK)
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d000      	beq.n	8009ece <put_device_to_sleep+0x192>
 8009ecc:	e761      	b.n	8009d92 <put_device_to_sleep+0x56>
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8009ece:	231c      	movs	r3, #28
 8009ed0:	1dd7      	adds	r7, r2, #7
 8009ed2:	783a      	ldrb	r2, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8009ed4:	016d      	lsls	r5, r5, #5
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8009ed6:	439a      	bics	r2, r3
 8009ed8:	464b      	mov	r3, r9
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	431a      	orrs	r2, r3
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8009ede:	231f      	movs	r3, #31
 8009ee0:	4013      	ands	r3, r2
 8009ee2:	432b      	orrs	r3, r5
 8009ee4:	703b      	strb	r3, [r7, #0]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8009ee6:	2c00      	cmp	r4, #0
 8009ee8:	d100      	bne.n	8009eec <put_device_to_sleep+0x1b0>
 8009eea:	e099      	b.n	800a020 <put_device_to_sleep+0x2e4>
 8009eec:	68e2      	ldr	r2, [r4, #12]
 8009eee:	2a00      	cmp	r2, #0
 8009ef0:	d100      	bne.n	8009ef4 <put_device_to_sleep+0x1b8>
 8009ef2:	e095      	b.n	800a020 <put_device_to_sleep+0x2e4>
 8009ef4:	6925      	ldr	r5, [r4, #16]
 8009ef6:	2d00      	cmp	r5, #0
 8009ef8:	d100      	bne.n	8009efc <put_device_to_sleep+0x1c0>
 8009efa:	e091      	b.n	800a020 <put_device_to_sleep+0x2e4>
 8009efc:	6962      	ldr	r2, [r4, #20]
 8009efe:	2a00      	cmp	r2, #0
 8009f00:	d100      	bne.n	8009f04 <put_device_to_sleep+0x1c8>
 8009f02:	e08d      	b.n	800a020 <put_device_to_sleep+0x2e4>
            temp_buff[0] = reg_data[0];
 8009f04:	ae03      	add	r6, sp, #12
 8009f06:	7033      	strb	r3, [r6, #0]
            if (dev->intf != BME280_I2C_INTF)
 8009f08:	7a20      	ldrb	r0, [r4, #8]
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8009f0a:	2201      	movs	r2, #1
            if (dev->intf != BME280_I2C_INTF)
 8009f0c:	3801      	subs	r0, #1
 8009f0e:	1e43      	subs	r3, r0, #1
 8009f10:	4198      	sbcs	r0, r3
 8009f12:	237f      	movs	r3, #127	@ 0x7f
 8009f14:	4240      	negs	r0, r0
 8009f16:	4398      	bics	r0, r3
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8009f18:	0031      	movs	r1, r6
 8009f1a:	6863      	ldr	r3, [r4, #4]
            if (dev->intf != BME280_I2C_INTF)
 8009f1c:	30f4      	adds	r0, #244	@ 0xf4
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8009f1e:	47a8      	blx	r5
 8009f20:	2345      	movs	r3, #69	@ 0x45
 8009f22:	54e0      	strb	r0, [r4, r3]
            if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 8009f24:	2800      	cmp	r0, #0
 8009f26:	d149      	bne.n	8009fbc <put_device_to_sleep+0x280>
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8009f28:	68e5      	ldr	r5, [r4, #12]
 8009f2a:	2d00      	cmp	r5, #0
 8009f2c:	d07e      	beq.n	800a02c <put_device_to_sleep+0x2f0>
 8009f2e:	6923      	ldr	r3, [r4, #16]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d07b      	beq.n	800a02c <put_device_to_sleep+0x2f0>
 8009f34:	6963      	ldr	r3, [r4, #20]
 8009f36:	425a      	negs	r2, r3
 8009f38:	4153      	adcs	r3, r2
 8009f3a:	425b      	negs	r3, r3
    rslt = null_ptr_check(dev);
 8009f3c:	703b      	strb	r3, [r7, #0]
    if ((rslt == BME280_OK) && (reg_data != NULL))
 8009f3e:	783b      	ldrb	r3, [r7, #0]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d167      	bne.n	800a014 <put_device_to_sleep+0x2d8>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8009f44:	4669      	mov	r1, sp
 8009f46:	6863      	ldr	r3, [r4, #4]
 8009f48:	2201      	movs	r2, #1
 8009f4a:	20f5      	movs	r0, #245	@ 0xf5
 8009f4c:	3106      	adds	r1, #6
 8009f4e:	47a8      	blx	r5
 8009f50:	2345      	movs	r3, #69	@ 0x45
 8009f52:	54e0      	strb	r0, [r4, r3]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS) // BME280_INTF_RET_SUCCESS = INT8_C(0)
 8009f54:	2800      	cmp	r0, #0
 8009f56:	d001      	beq.n	8009f5c <put_device_to_sleep+0x220>
            rslt = BME280_E_COMM_FAIL; // BME280_E_COMM_FAIL = INT8_C(-4)
 8009f58:	33b7      	adds	r3, #183	@ 0xb7
 8009f5a:	703b      	strb	r3, [r7, #0]
    return rslt;
 8009f5c:	783b      	ldrb	r3, [r7, #0]
 8009f5e:	b258      	sxtb	r0, r3
    if (rslt == BME280_OK)
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d000      	beq.n	8009f66 <put_device_to_sleep+0x22a>
 8009f64:	e715      	b.n	8009d92 <put_device_to_sleep+0x56>
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8009f66:	4643      	mov	r3, r8
 8009f68:	221c      	movs	r2, #28
 8009f6a:	401a      	ands	r2, r3
 8009f6c:	466b      	mov	r3, sp
 8009f6e:	201c      	movs	r0, #28
 8009f70:	1d99      	adds	r1, r3, #6
 8009f72:	799b      	ldrb	r3, [r3, #6]
 8009f74:	4383      	bics	r3, r0
 8009f76:	431a      	orrs	r2, r3
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8009f78:	231f      	movs	r3, #31
 8009f7a:	4013      	ands	r3, r2
 8009f7c:	4642      	mov	r2, r8
 8009f7e:	0952      	lsrs	r2, r2, #5
 8009f80:	0152      	lsls	r2, r2, #5
 8009f82:	4313      	orrs	r3, r2
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8009f84:	68e2      	ldr	r2, [r4, #12]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8009f86:	700b      	strb	r3, [r1, #0]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8009f88:	2a00      	cmp	r2, #0
 8009f8a:	d049      	beq.n	800a020 <put_device_to_sleep+0x2e4>
 8009f8c:	6925      	ldr	r5, [r4, #16]
 8009f8e:	2d00      	cmp	r5, #0
 8009f90:	d046      	beq.n	800a020 <put_device_to_sleep+0x2e4>
 8009f92:	6962      	ldr	r2, [r4, #20]
 8009f94:	2a00      	cmp	r2, #0
 8009f96:	d043      	beq.n	800a020 <put_device_to_sleep+0x2e4>
            temp_buff[0] = reg_data[0];
 8009f98:	7033      	strb	r3, [r6, #0]
            if (dev->intf != BME280_I2C_INTF)
 8009f9a:	7a20      	ldrb	r0, [r4, #8]
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8009f9c:	2201      	movs	r2, #1
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 8009f9e:	3801      	subs	r0, #1
 8009fa0:	1e43      	subs	r3, r0, #1
 8009fa2:	4198      	sbcs	r0, r3
 8009fa4:	237f      	movs	r3, #127	@ 0x7f
 8009fa6:	4240      	negs	r0, r0
 8009fa8:	4398      	bics	r0, r3
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8009faa:	0031      	movs	r1, r6
 8009fac:	6863      	ldr	r3, [r4, #4]
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 8009fae:	30f5      	adds	r0, #245	@ 0xf5
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8009fb0:	47a8      	blx	r5
 8009fb2:	2345      	movs	r3, #69	@ 0x45
 8009fb4:	54e0      	strb	r0, [r4, r3]
            if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	d100      	bne.n	8009fbc <put_device_to_sleep+0x280>
 8009fba:	e6ea      	b.n	8009d92 <put_device_to_sleep+0x56>
                rslt = BME280_E_COMM_FAIL;
 8009fbc:	2004      	movs	r0, #4
 8009fbe:	4240      	negs	r0, r0
    return rslt;
 8009fc0:	e6e7      	b.n	8009d92 <put_device_to_sleep+0x56>
        rslt = BME280_E_NULL_PTR;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	425b      	negs	r3, r3
 8009fc6:	e72b      	b.n	8009e20 <put_device_to_sleep+0xe4>
 8009fc8:	2301      	movs	r3, #1
 8009fca:	425b      	negs	r3, r3
 8009fcc:	e6cc      	b.n	8009d68 <put_device_to_sleep+0x2c>
        rslt = BME280_E_NULL_PTR; // BME280_E_NULL_PTR = INT8_C(-1)
 8009fce:	23ff      	movs	r3, #255	@ 0xff
 8009fd0:	703b      	strb	r3, [r7, #0]
    return rslt;
 8009fd2:	783b      	ldrb	r3, [r7, #0]
        if (rslt == BME280_OK)
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d000      	beq.n	8009fda <put_device_to_sleep+0x29e>
 8009fd8:	e73a      	b.n	8009e50 <put_device_to_sleep+0x114>
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8009fda:	464b      	mov	r3, r9
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d022      	beq.n	800a026 <put_device_to_sleep+0x2ea>
 8009fe0:	6927      	ldr	r7, [r4, #16]
 8009fe2:	2f00      	cmp	r7, #0
 8009fe4:	d01f      	beq.n	800a026 <put_device_to_sleep+0x2ea>
 8009fe6:	6963      	ldr	r3, [r4, #20]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d100      	bne.n	8009fee <put_device_to_sleep+0x2b2>
 8009fec:	e735      	b.n	8009e5a <put_device_to_sleep+0x11e>
            temp_buff[0] = reg_data[0];
 8009fee:	466b      	mov	r3, sp
 8009ff0:	3307      	adds	r3, #7
 8009ff2:	781b      	ldrb	r3, [r3, #0]
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8009ff4:	2201      	movs	r2, #1
            temp_buff[0] = reg_data[0];
 8009ff6:	7033      	strb	r3, [r6, #0]
            if (dev->intf != BME280_I2C_INTF)
 8009ff8:	7a20      	ldrb	r0, [r4, #8]
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8009ffa:	0031      	movs	r1, r6
        reg_addr = BME280_CTRL_MEAS_ADDR;
 8009ffc:	3801      	subs	r0, #1
 8009ffe:	1e43      	subs	r3, r0, #1
 800a000:	4198      	sbcs	r0, r3
 800a002:	237f      	movs	r3, #127	@ 0x7f
 800a004:	4240      	negs	r0, r0
 800a006:	4398      	bics	r0, r3
 800a008:	30f4      	adds	r0, #244	@ 0xf4
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 800a00a:	6863      	ldr	r3, [r4, #4]
 800a00c:	47b8      	blx	r7
 800a00e:	2345      	movs	r3, #69	@ 0x45
 800a010:	54e0      	strb	r0, [r4, r3]
 800a012:	e71b      	b.n	8009e4c <put_device_to_sleep+0x110>
        rslt = BME280_E_NULL_PTR; // BME280_E_NULL_PTR = INT8_C(-1)
 800a014:	23ff      	movs	r3, #255	@ 0xff
 800a016:	703b      	strb	r3, [r7, #0]
 800a018:	e7a0      	b.n	8009f5c <put_device_to_sleep+0x220>
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800a01a:	68e3      	ldr	r3, [r4, #12]
 800a01c:	4699      	mov	r9, r3
 800a01e:	e7dc      	b.n	8009fda <put_device_to_sleep+0x29e>
        rslt = BME280_E_NULL_PTR;
 800a020:	2001      	movs	r0, #1
 800a022:	4240      	negs	r0, r0
 800a024:	e6b5      	b.n	8009d92 <put_device_to_sleep+0x56>
        rslt = BME280_E_NULL_PTR;
 800a026:	2301      	movs	r3, #1
 800a028:	425b      	negs	r3, r3
 800a02a:	e71d      	b.n	8009e68 <put_device_to_sleep+0x12c>
 800a02c:	2301      	movs	r3, #1
 800a02e:	425b      	negs	r3, r3
 800a030:	e784      	b.n	8009f3c <put_device_to_sleep+0x200>
 800a032:	46c0      	nop			@ (mov r8, r8)

0800a034 <bme280_set_sensor_settings>:
{
 800a034:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a036:	4646      	mov	r6, r8
 800a038:	46d6      	mov	lr, sl
 800a03a:	464f      	mov	r7, r9
 800a03c:	b5c0      	push	{r6, r7, lr}
 800a03e:	000c      	movs	r4, r1
 800a040:	0006      	movs	r6, r0
 800a042:	b088      	sub	sp, #32
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800a044:	2900      	cmp	r1, #0
 800a046:	d100      	bne.n	800a04a <bme280_set_sensor_settings+0x16>
 800a048:	e18e      	b.n	800a368 <bme280_set_sensor_settings+0x334>
 800a04a:	68cb      	ldr	r3, [r1, #12]
 800a04c:	4698      	mov	r8, r3
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d100      	bne.n	800a054 <bme280_set_sensor_settings+0x20>
 800a052:	e189      	b.n	800a368 <bme280_set_sensor_settings+0x334>
 800a054:	690b      	ldr	r3, [r1, #16]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d100      	bne.n	800a05c <bme280_set_sensor_settings+0x28>
 800a05a:	e185      	b.n	800a368 <bme280_set_sensor_settings+0x334>
 800a05c:	694b      	ldr	r3, [r1, #20]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d100      	bne.n	800a064 <bme280_set_sensor_settings+0x30>
 800a062:	e181      	b.n	800a368 <bme280_set_sensor_settings+0x334>
    rslt = null_ptr_check(dev);
 800a064:	466b      	mov	r3, sp
 800a066:	1ddd      	adds	r5, r3, #7
 800a068:	2300      	movs	r3, #0
 800a06a:	702b      	strb	r3, [r5, #0]
    if ((rslt == BME280_OK) && (reg_data != NULL))
 800a06c:	782b      	ldrb	r3, [r5, #0]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d100      	bne.n	800a074 <bme280_set_sensor_settings+0x40>
 800a072:	e074      	b.n	800a15e <bme280_set_sensor_settings+0x12a>
        rslt = BME280_E_NULL_PTR; // BME280_E_NULL_PTR = INT8_C(-1)
 800a074:	23ff      	movs	r3, #255	@ 0xff
 800a076:	702b      	strb	r3, [r5, #0]
 800a078:	466b      	mov	r3, sp
 800a07a:	1d9f      	adds	r7, r3, #6
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 800a07c:	2303      	movs	r3, #3
 800a07e:	7839      	ldrb	r1, [r7, #0]
    return rslt;
 800a080:	782a      	ldrb	r2, [r5, #0]
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 800a082:	400b      	ands	r3, r1
    return rslt;
 800a084:	b255      	sxtb	r5, r2
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 800a086:	703b      	strb	r3, [r7, #0]
        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 800a088:	2a00      	cmp	r2, #0
 800a08a:	d161      	bne.n	800a150 <bme280_set_sensor_settings+0x11c>
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d000      	beq.n	800a092 <bme280_set_sensor_settings+0x5e>
 800a090:	e07e      	b.n	800a190 <bme280_set_sensor_settings+0x15c>
    if (sub_settings & desired_settings)
 800a092:	2307      	movs	r3, #7
 800a094:	4233      	tst	r3, r6
 800a096:	d000      	beq.n	800a09a <bme280_set_sensor_settings+0x66>
 800a098:	e070      	b.n	800a17c <bme280_set_sensor_settings+0x148>
 800a09a:	2318      	movs	r3, #24
 800a09c:	4233      	tst	r3, r6
 800a09e:	d057      	beq.n	800a150 <bme280_set_sensor_settings+0x11c>
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800a0a0:	68e7      	ldr	r7, [r4, #12]
 800a0a2:	2f00      	cmp	r7, #0
 800a0a4:	d100      	bne.n	800a0a8 <bme280_set_sensor_settings+0x74>
 800a0a6:	e162      	b.n	800a36e <bme280_set_sensor_settings+0x33a>
 800a0a8:	6923      	ldr	r3, [r4, #16]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d100      	bne.n	800a0b0 <bme280_set_sensor_settings+0x7c>
 800a0ae:	e15e      	b.n	800a36e <bme280_set_sensor_settings+0x33a>
 800a0b0:	6963      	ldr	r3, [r4, #20]
 800a0b2:	425a      	negs	r2, r3
 800a0b4:	4153      	adcs	r3, r2
 800a0b6:	425b      	negs	r3, r3
    rslt = null_ptr_check(dev);
 800a0b8:	250b      	movs	r5, #11
 800a0ba:	446d      	add	r5, sp
 800a0bc:	702b      	strb	r3, [r5, #0]
    if ((rslt == BME280_OK) && (reg_data != NULL))
 800a0be:	782b      	ldrb	r3, [r5, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d06d      	beq.n	800a1a0 <bme280_set_sensor_settings+0x16c>
        rslt = BME280_E_NULL_PTR; // BME280_E_NULL_PTR = INT8_C(-1)
 800a0c4:	23ff      	movs	r3, #255	@ 0xff
 800a0c6:	702b      	strb	r3, [r5, #0]
    return rslt;
 800a0c8:	782b      	ldrb	r3, [r5, #0]
 800a0ca:	b25d      	sxtb	r5, r3
    if (rslt == BME280_OK)
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d13f      	bne.n	800a150 <bme280_set_sensor_settings+0x11c>
        if (desired_settings & BME280_FILTER_SEL)
 800a0d0:	0733      	lsls	r3, r6, #28
 800a0d2:	d50b      	bpl.n	800a0ec <bme280_set_sensor_settings+0xb8>
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 800a0d4:	0023      	movs	r3, r4
 800a0d6:	210a      	movs	r1, #10
 800a0d8:	201c      	movs	r0, #28
 800a0da:	3340      	adds	r3, #64	@ 0x40
 800a0dc:	78db      	ldrb	r3, [r3, #3]
 800a0de:	4469      	add	r1, sp
 800a0e0:	780a      	ldrb	r2, [r1, #0]
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	4003      	ands	r3, r0
 800a0e6:	4382      	bics	r2, r0
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	700b      	strb	r3, [r1, #0]
        if (desired_settings & BME280_STANDBY_SEL)
 800a0ec:	06f6      	lsls	r6, r6, #27
 800a0ee:	d50a      	bpl.n	800a106 <bme280_set_sensor_settings+0xd2>
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 800a0f0:	210a      	movs	r1, #10
 800a0f2:	231f      	movs	r3, #31
 800a0f4:	4469      	add	r1, sp
 800a0f6:	780a      	ldrb	r2, [r1, #0]
 800a0f8:	4013      	ands	r3, r2
 800a0fa:	0022      	movs	r2, r4
 800a0fc:	3240      	adds	r2, #64	@ 0x40
 800a0fe:	7912      	ldrb	r2, [r2, #4]
 800a100:	0152      	lsls	r2, r2, #5
 800a102:	4313      	orrs	r3, r2
 800a104:	700b      	strb	r3, [r1, #0]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800a106:	68e3      	ldr	r3, [r4, #12]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d100      	bne.n	800a10e <bme280_set_sensor_settings+0xda>
 800a10c:	e12c      	b.n	800a368 <bme280_set_sensor_settings+0x334>
 800a10e:	6925      	ldr	r5, [r4, #16]
 800a110:	2d00      	cmp	r5, #0
 800a112:	d100      	bne.n	800a116 <bme280_set_sensor_settings+0xe2>
 800a114:	e128      	b.n	800a368 <bme280_set_sensor_settings+0x334>
 800a116:	6963      	ldr	r3, [r4, #20]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d100      	bne.n	800a11e <bme280_set_sensor_settings+0xea>
 800a11c:	e124      	b.n	800a368 <bme280_set_sensor_settings+0x334>
            temp_buff[0] = reg_data[0];
 800a11e:	ab03      	add	r3, sp, #12
 800a120:	469a      	mov	sl, r3
 800a122:	230a      	movs	r3, #10
 800a124:	4652      	mov	r2, sl
 800a126:	446b      	add	r3, sp
 800a128:	781b      	ldrb	r3, [r3, #0]
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 800a12a:	4651      	mov	r1, sl
            temp_buff[0] = reg_data[0];
 800a12c:	7013      	strb	r3, [r2, #0]
            if (dev->intf != BME280_I2C_INTF)
 800a12e:	7a20      	ldrb	r0, [r4, #8]
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 800a130:	2201      	movs	r2, #1
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 800a132:	3801      	subs	r0, #1
 800a134:	1e43      	subs	r3, r0, #1
 800a136:	4198      	sbcs	r0, r3
 800a138:	237f      	movs	r3, #127	@ 0x7f
 800a13a:	4240      	negs	r0, r0
 800a13c:	4398      	bics	r0, r3
 800a13e:	30f5      	adds	r0, #245	@ 0xf5
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 800a140:	6863      	ldr	r3, [r4, #4]
 800a142:	47a8      	blx	r5
 800a144:	2345      	movs	r3, #69	@ 0x45
 800a146:	1e05      	subs	r5, r0, #0
 800a148:	54e0      	strb	r0, [r4, r3]
            if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 800a14a:	d001      	beq.n	800a150 <bme280_set_sensor_settings+0x11c>
                rslt = BME280_E_COMM_FAIL;
 800a14c:	2504      	movs	r5, #4
 800a14e:	426d      	negs	r5, r5
}
 800a150:	0028      	movs	r0, r5
 800a152:	b008      	add	sp, #32
 800a154:	bce0      	pop	{r5, r6, r7}
 800a156:	46ba      	mov	sl, r7
 800a158:	46b1      	mov	r9, r6
 800a15a:	46a8      	mov	r8, r5
 800a15c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800a15e:	466a      	mov	r2, sp
 800a160:	1d97      	adds	r7, r2, #6
 800a162:	684b      	ldr	r3, [r1, #4]
 800a164:	2201      	movs	r2, #1
 800a166:	0039      	movs	r1, r7
 800a168:	20f4      	movs	r0, #244	@ 0xf4
 800a16a:	47c0      	blx	r8
 800a16c:	2345      	movs	r3, #69	@ 0x45
 800a16e:	54e0      	strb	r0, [r4, r3]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS) // BME280_INTF_RET_SUCCESS = INT8_C(0)
 800a170:	2800      	cmp	r0, #0
 800a172:	d100      	bne.n	800a176 <bme280_set_sensor_settings+0x142>
 800a174:	e782      	b.n	800a07c <bme280_set_sensor_settings+0x48>
            rslt = BME280_E_COMM_FAIL; // BME280_E_COMM_FAIL = INT8_C(-4)
 800a176:	33b7      	adds	r3, #183	@ 0xb7
 800a178:	702b      	strb	r3, [r5, #0]
 800a17a:	e77f      	b.n	800a07c <bme280_set_sensor_settings+0x48>
    if (desired_settings & BME280_OSR_HUM_SEL)
 800a17c:	2203      	movs	r2, #3
 800a17e:	4032      	ands	r2, r6
 800a180:	4691      	mov	r9, r2
 800a182:	0772      	lsls	r2, r6, #29
 800a184:	d41a      	bmi.n	800a1bc <bme280_set_sensor_settings+0x188>
    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 800a186:	464b      	mov	r3, r9
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d15f      	bne.n	800a24c <bme280_set_sensor_settings+0x218>
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 800a18c:	2501      	movs	r5, #1
 800a18e:	e7df      	b.n	800a150 <bme280_set_sensor_settings+0x11c>
            rslt = put_device_to_sleep(dev);
 800a190:	0020      	movs	r0, r4
 800a192:	f7ff fdd3 	bl	8009d3c <put_device_to_sleep>
        if (rslt == BME280_OK)
 800a196:	2800      	cmp	r0, #0
 800a198:	d100      	bne.n	800a19c <bme280_set_sensor_settings+0x168>
 800a19a:	e77a      	b.n	800a092 <bme280_set_sensor_settings+0x5e>
 800a19c:	0005      	movs	r5, r0
 800a19e:	e7d7      	b.n	800a150 <bme280_set_sensor_settings+0x11c>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800a1a0:	210a      	movs	r1, #10
 800a1a2:	6863      	ldr	r3, [r4, #4]
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	20f5      	movs	r0, #245	@ 0xf5
 800a1a8:	4469      	add	r1, sp
 800a1aa:	47b8      	blx	r7
 800a1ac:	2345      	movs	r3, #69	@ 0x45
 800a1ae:	54e0      	strb	r0, [r4, r3]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS) // BME280_INTF_RET_SUCCESS = INT8_C(0)
 800a1b0:	2800      	cmp	r0, #0
 800a1b2:	d100      	bne.n	800a1b6 <bme280_set_sensor_settings+0x182>
 800a1b4:	e788      	b.n	800a0c8 <bme280_set_sensor_settings+0x94>
            rslt = BME280_E_COMM_FAIL; // BME280_E_COMM_FAIL = INT8_C(-4)
 800a1b6:	33b7      	adds	r3, #183	@ 0xb7
 800a1b8:	702b      	strb	r3, [r5, #0]
 800a1ba:	e785      	b.n	800a0c8 <bme280_set_sensor_settings+0x94>
    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 800a1bc:	2242      	movs	r2, #66	@ 0x42
 800a1be:	5ca2      	ldrb	r2, [r4, r2]
 800a1c0:	401a      	ands	r2, r3
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800a1c2:	68e3      	ldr	r3, [r4, #12]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d100      	bne.n	800a1ca <bme280_set_sensor_settings+0x196>
 800a1c8:	e0d4      	b.n	800a374 <bme280_set_sensor_settings+0x340>
 800a1ca:	6927      	ldr	r7, [r4, #16]
 800a1cc:	2f00      	cmp	r7, #0
 800a1ce:	d100      	bne.n	800a1d2 <bme280_set_sensor_settings+0x19e>
 800a1d0:	e0d0      	b.n	800a374 <bme280_set_sensor_settings+0x340>
 800a1d2:	6963      	ldr	r3, [r4, #20]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d100      	bne.n	800a1da <bme280_set_sensor_settings+0x1a6>
 800a1d8:	e0cc      	b.n	800a374 <bme280_set_sensor_settings+0x340>
            temp_buff[0] = reg_data[0];
 800a1da:	ab03      	add	r3, sp, #12
 800a1dc:	701a      	strb	r2, [r3, #0]
            if (dev->intf != BME280_I2C_INTF)
 800a1de:	7a20      	ldrb	r0, [r4, #8]
            temp_buff[0] = reg_data[0];
 800a1e0:	469a      	mov	sl, r3
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 800a1e2:	3801      	subs	r0, #1
 800a1e4:	1e43      	subs	r3, r0, #1
 800a1e6:	4198      	sbcs	r0, r3
 800a1e8:	237f      	movs	r3, #127	@ 0x7f
 800a1ea:	4240      	negs	r0, r0
 800a1ec:	4398      	bics	r0, r3
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	6863      	ldr	r3, [r4, #4]
 800a1f2:	4651      	mov	r1, sl
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 800a1f4:	30f2      	adds	r0, #242	@ 0xf2
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 800a1f6:	47b8      	blx	r7
 800a1f8:	2345      	movs	r3, #69	@ 0x45
 800a1fa:	54e0      	strb	r0, [r4, r3]
            if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	d000      	beq.n	800a202 <bme280_set_sensor_settings+0x1ce>
 800a200:	e0c0      	b.n	800a384 <bme280_set_sensor_settings+0x350>
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800a202:	68e3      	ldr	r3, [r4, #12]
 800a204:	4698      	mov	r8, r3
 800a206:	2b00      	cmp	r3, #0
 800a208:	d100      	bne.n	800a20c <bme280_set_sensor_settings+0x1d8>
 800a20a:	e0c1      	b.n	800a390 <bme280_set_sensor_settings+0x35c>
 800a20c:	6923      	ldr	r3, [r4, #16]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d100      	bne.n	800a214 <bme280_set_sensor_settings+0x1e0>
 800a212:	e0bd      	b.n	800a390 <bme280_set_sensor_settings+0x35c>
 800a214:	6963      	ldr	r3, [r4, #20]
 800a216:	425a      	negs	r2, r3
 800a218:	4153      	adcs	r3, r2
 800a21a:	425b      	negs	r3, r3
    rslt = null_ptr_check(dev);
 800a21c:	af02      	add	r7, sp, #8
 800a21e:	703b      	strb	r3, [r7, #0]
    if ((rslt == BME280_OK) && (reg_data != NULL))
 800a220:	783b      	ldrb	r3, [r7, #0]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d176      	bne.n	800a314 <bme280_set_sensor_settings+0x2e0>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800a226:	210b      	movs	r1, #11
 800a228:	6863      	ldr	r3, [r4, #4]
 800a22a:	2201      	movs	r2, #1
 800a22c:	20f4      	movs	r0, #244	@ 0xf4
 800a22e:	4469      	add	r1, sp
 800a230:	47c0      	blx	r8
 800a232:	2345      	movs	r3, #69	@ 0x45
 800a234:	54e0      	strb	r0, [r4, r3]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS) // BME280_INTF_RET_SUCCESS = INT8_C(0)
 800a236:	2800      	cmp	r0, #0
 800a238:	d001      	beq.n	800a23e <bme280_set_sensor_settings+0x20a>
            rslt = BME280_E_COMM_FAIL; // BME280_E_COMM_FAIL = INT8_C(-4)
 800a23a:	33b7      	adds	r3, #183	@ 0xb7
 800a23c:	703b      	strb	r3, [r7, #0]
    return rslt;
 800a23e:	783b      	ldrb	r3, [r7, #0]
 800a240:	b25a      	sxtb	r2, r3
        if (rslt == BME280_OK)
 800a242:	2b00      	cmp	r3, #0
 800a244:	d069      	beq.n	800a31a <bme280_set_sensor_settings+0x2e6>
    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 800a246:	464b      	mov	r3, r9
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d05e      	beq.n	800a30a <bme280_set_sensor_settings+0x2d6>
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800a24c:	68e3      	ldr	r3, [r4, #12]
 800a24e:	4698      	mov	r8, r3
 800a250:	2b00      	cmp	r3, #0
 800a252:	d100      	bne.n	800a256 <bme280_set_sensor_settings+0x222>
 800a254:	e099      	b.n	800a38a <bme280_set_sensor_settings+0x356>
 800a256:	6923      	ldr	r3, [r4, #16]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d100      	bne.n	800a25e <bme280_set_sensor_settings+0x22a>
 800a25c:	e095      	b.n	800a38a <bme280_set_sensor_settings+0x356>
 800a25e:	6963      	ldr	r3, [r4, #20]
 800a260:	425a      	negs	r2, r3
 800a262:	4153      	adcs	r3, r2
 800a264:	425b      	negs	r3, r3
    rslt = null_ptr_check(dev);
 800a266:	2709      	movs	r7, #9
 800a268:	446f      	add	r7, sp
 800a26a:	703b      	strb	r3, [r7, #0]
    if ((rslt == BME280_OK) && (reg_data != NULL))
 800a26c:	783b      	ldrb	r3, [r7, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d14d      	bne.n	800a30e <bme280_set_sensor_settings+0x2da>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800a272:	210b      	movs	r1, #11
 800a274:	6863      	ldr	r3, [r4, #4]
 800a276:	2201      	movs	r2, #1
 800a278:	20f4      	movs	r0, #244	@ 0xf4
 800a27a:	4469      	add	r1, sp
 800a27c:	47c0      	blx	r8
 800a27e:	2345      	movs	r3, #69	@ 0x45
 800a280:	54e0      	strb	r0, [r4, r3]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS) // BME280_INTF_RET_SUCCESS = INT8_C(0)
 800a282:	2800      	cmp	r0, #0
 800a284:	d001      	beq.n	800a28a <bme280_set_sensor_settings+0x256>
            rslt = BME280_E_COMM_FAIL; // BME280_E_COMM_FAIL = INT8_C(-4)
 800a286:	33b7      	adds	r3, #183	@ 0xb7
 800a288:	703b      	strb	r3, [r7, #0]
    return rslt;
 800a28a:	783b      	ldrb	r3, [r7, #0]
 800a28c:	b25a      	sxtb	r2, r3
    if (rslt == BME280_OK)
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d13b      	bne.n	800a30a <bme280_set_sensor_settings+0x2d6>
        if (desired_settings & BME280_OSR_PRESS_SEL)
 800a292:	07f3      	lsls	r3, r6, #31
 800a294:	d50a      	bpl.n	800a2ac <bme280_set_sensor_settings+0x278>
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 800a296:	220b      	movs	r2, #11
 800a298:	2340      	movs	r3, #64	@ 0x40
 800a29a:	201c      	movs	r0, #28
 800a29c:	446a      	add	r2, sp
 800a29e:	5ce3      	ldrb	r3, [r4, r3]
 800a2a0:	7811      	ldrb	r1, [r2, #0]
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	4003      	ands	r3, r0
 800a2a6:	4381      	bics	r1, r0
 800a2a8:	430b      	orrs	r3, r1
 800a2aa:	7013      	strb	r3, [r2, #0]
        if (desired_settings & BME280_OSR_TEMP_SEL)
 800a2ac:	07b3      	lsls	r3, r6, #30
 800a2ae:	d50a      	bpl.n	800a2c6 <bme280_set_sensor_settings+0x292>
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 800a2b0:	210b      	movs	r1, #11
 800a2b2:	231f      	movs	r3, #31
 800a2b4:	4469      	add	r1, sp
 800a2b6:	780a      	ldrb	r2, [r1, #0]
 800a2b8:	4013      	ands	r3, r2
 800a2ba:	0022      	movs	r2, r4
 800a2bc:	3240      	adds	r2, #64	@ 0x40
 800a2be:	7852      	ldrb	r2, [r2, #1]
 800a2c0:	0152      	lsls	r2, r2, #5
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	700b      	strb	r3, [r1, #0]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800a2c6:	68e3      	ldr	r3, [r4, #12]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d04d      	beq.n	800a368 <bme280_set_sensor_settings+0x334>
 800a2cc:	6927      	ldr	r7, [r4, #16]
 800a2ce:	2f00      	cmp	r7, #0
 800a2d0:	d04a      	beq.n	800a368 <bme280_set_sensor_settings+0x334>
 800a2d2:	6963      	ldr	r3, [r4, #20]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d047      	beq.n	800a368 <bme280_set_sensor_settings+0x334>
            temp_buff[0] = reg_data[0];
 800a2d8:	ab03      	add	r3, sp, #12
 800a2da:	469a      	mov	sl, r3
 800a2dc:	230b      	movs	r3, #11
 800a2de:	4652      	mov	r2, sl
 800a2e0:	446b      	add	r3, sp
 800a2e2:	781b      	ldrb	r3, [r3, #0]
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 800a2e4:	4651      	mov	r1, sl
            temp_buff[0] = reg_data[0];
 800a2e6:	7013      	strb	r3, [r2, #0]
            if (dev->intf != BME280_I2C_INTF)
 800a2e8:	7a20      	ldrb	r0, [r4, #8]
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 800a2ea:	2201      	movs	r2, #1
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 800a2ec:	3801      	subs	r0, #1
 800a2ee:	1e43      	subs	r3, r0, #1
 800a2f0:	4198      	sbcs	r0, r3
 800a2f2:	237f      	movs	r3, #127	@ 0x7f
 800a2f4:	4240      	negs	r0, r0
 800a2f6:	4398      	bics	r0, r3
 800a2f8:	30f4      	adds	r0, #244	@ 0xf4
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 800a2fa:	6863      	ldr	r3, [r4, #4]
 800a2fc:	47b8      	blx	r7
 800a2fe:	2345      	movs	r3, #69	@ 0x45
 800a300:	54e0      	strb	r0, [r4, r3]
            if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 800a302:	2800      	cmp	r0, #0
 800a304:	d100      	bne.n	800a308 <bme280_set_sensor_settings+0x2d4>
 800a306:	e6c8      	b.n	800a09a <bme280_set_sensor_settings+0x66>
 800a308:	e720      	b.n	800a14c <bme280_set_sensor_settings+0x118>
    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800a30a:	0015      	movs	r5, r2
 800a30c:	e720      	b.n	800a150 <bme280_set_sensor_settings+0x11c>
        rslt = BME280_E_NULL_PTR; // BME280_E_NULL_PTR = INT8_C(-1)
 800a30e:	23ff      	movs	r3, #255	@ 0xff
 800a310:	703b      	strb	r3, [r7, #0]
 800a312:	e7ba      	b.n	800a28a <bme280_set_sensor_settings+0x256>
 800a314:	23ff      	movs	r3, #255	@ 0xff
 800a316:	703b      	strb	r3, [r7, #0]
 800a318:	e791      	b.n	800a23e <bme280_set_sensor_settings+0x20a>
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800a31a:	68e3      	ldr	r3, [r4, #12]
 800a31c:	4698      	mov	r8, r3
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d01f      	beq.n	800a362 <bme280_set_sensor_settings+0x32e>
 800a322:	6927      	ldr	r7, [r4, #16]
 800a324:	2f00      	cmp	r7, #0
 800a326:	d01c      	beq.n	800a362 <bme280_set_sensor_settings+0x32e>
 800a328:	6963      	ldr	r3, [r4, #20]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d037      	beq.n	800a39e <bme280_set_sensor_settings+0x36a>
            temp_buff[0] = reg_data[0];
 800a32e:	230b      	movs	r3, #11
 800a330:	4652      	mov	r2, sl
 800a332:	446b      	add	r3, sp
 800a334:	781b      	ldrb	r3, [r3, #0]
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 800a336:	4651      	mov	r1, sl
            temp_buff[0] = reg_data[0];
 800a338:	7013      	strb	r3, [r2, #0]
            if (dev->intf != BME280_I2C_INTF)
 800a33a:	7a20      	ldrb	r0, [r4, #8]
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 800a33c:	2201      	movs	r2, #1
        reg_addr = BME280_CTRL_MEAS_ADDR;
 800a33e:	3801      	subs	r0, #1
 800a340:	1e43      	subs	r3, r0, #1
 800a342:	4198      	sbcs	r0, r3
 800a344:	237f      	movs	r3, #127	@ 0x7f
 800a346:	4240      	negs	r0, r0
 800a348:	4398      	bics	r0, r3
 800a34a:	30f4      	adds	r0, #244	@ 0xf4
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 800a34c:	6863      	ldr	r3, [r4, #4]
 800a34e:	47b8      	blx	r7
 800a350:	2345      	movs	r3, #69	@ 0x45
 800a352:	54e0      	strb	r0, [r4, r3]
    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 800a354:	464b      	mov	r3, r9
            if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 800a356:	2800      	cmp	r0, #0
 800a358:	d11d      	bne.n	800a396 <bme280_set_sensor_settings+0x362>
    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d100      	bne.n	800a360 <bme280_set_sensor_settings+0x32c>
 800a35e:	e69c      	b.n	800a09a <bme280_set_sensor_settings+0x66>
 800a360:	e774      	b.n	800a24c <bme280_set_sensor_settings+0x218>
 800a362:	464b      	mov	r3, r9
 800a364:	2b00      	cmp	r3, #0
 800a366:	d110      	bne.n	800a38a <bme280_set_sensor_settings+0x356>
        rslt = BME280_E_NULL_PTR;
 800a368:	2501      	movs	r5, #1
 800a36a:	426d      	negs	r5, r5
 800a36c:	e6f0      	b.n	800a150 <bme280_set_sensor_settings+0x11c>
        rslt = BME280_E_NULL_PTR;
 800a36e:	2301      	movs	r3, #1
 800a370:	425b      	negs	r3, r3
 800a372:	e6a1      	b.n	800a0b8 <bme280_set_sensor_settings+0x84>
        rslt = BME280_E_NULL_PTR;
 800a374:	2301      	movs	r3, #1
 800a376:	425b      	negs	r3, r3
    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 800a378:	464a      	mov	r2, r9
 800a37a:	2a00      	cmp	r2, #0
 800a37c:	d000      	beq.n	800a380 <bme280_set_sensor_settings+0x34c>
 800a37e:	e765      	b.n	800a24c <bme280_set_sensor_settings+0x218>
 800a380:	001d      	movs	r5, r3
 800a382:	e6e5      	b.n	800a150 <bme280_set_sensor_settings+0x11c>
                rslt = BME280_E_COMM_FAIL;
 800a384:	2304      	movs	r3, #4
 800a386:	425b      	negs	r3, r3
 800a388:	e7f6      	b.n	800a378 <bme280_set_sensor_settings+0x344>
        rslt = BME280_E_NULL_PTR;
 800a38a:	2301      	movs	r3, #1
 800a38c:	425b      	negs	r3, r3
 800a38e:	e76a      	b.n	800a266 <bme280_set_sensor_settings+0x232>
 800a390:	2301      	movs	r3, #1
 800a392:	425b      	negs	r3, r3
 800a394:	e742      	b.n	800a21c <bme280_set_sensor_settings+0x1e8>
    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 800a396:	2b00      	cmp	r3, #0
 800a398:	d100      	bne.n	800a39c <bme280_set_sensor_settings+0x368>
 800a39a:	e6d7      	b.n	800a14c <bme280_set_sensor_settings+0x118>
 800a39c:	e756      	b.n	800a24c <bme280_set_sensor_settings+0x218>
 800a39e:	464a      	mov	r2, r9
 800a3a0:	2a00      	cmp	r2, #0
 800a3a2:	d0e1      	beq.n	800a368 <bme280_set_sensor_settings+0x334>
 800a3a4:	e75c      	b.n	800a260 <bme280_set_sensor_settings+0x22c>
 800a3a6:	46c0      	nop			@ (mov r8, r8)

0800a3a8 <bme280_set_sensor_mode>:
{
 800a3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3aa:	46c6      	mov	lr, r8
 800a3ac:	b500      	push	{lr}
 800a3ae:	4680      	mov	r8, r0
 800a3b0:	000c      	movs	r4, r1
 800a3b2:	b086      	sub	sp, #24
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800a3b4:	2900      	cmp	r1, #0
 800a3b6:	d100      	bne.n	800a3ba <bme280_set_sensor_mode+0x12>
 800a3b8:	e083      	b.n	800a4c2 <bme280_set_sensor_mode+0x11a>
 800a3ba:	68cf      	ldr	r7, [r1, #12]
 800a3bc:	2f00      	cmp	r7, #0
 800a3be:	d100      	bne.n	800a3c2 <bme280_set_sensor_mode+0x1a>
 800a3c0:	e07f      	b.n	800a4c2 <bme280_set_sensor_mode+0x11a>
 800a3c2:	690b      	ldr	r3, [r1, #16]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d100      	bne.n	800a3ca <bme280_set_sensor_mode+0x22>
 800a3c8:	e07b      	b.n	800a4c2 <bme280_set_sensor_mode+0x11a>
 800a3ca:	694b      	ldr	r3, [r1, #20]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d100      	bne.n	800a3d2 <bme280_set_sensor_mode+0x2a>
 800a3d0:	e077      	b.n	800a4c2 <bme280_set_sensor_mode+0x11a>
    rslt = null_ptr_check(dev);
 800a3d2:	466b      	mov	r3, sp
 800a3d4:	1c5d      	adds	r5, r3, #1
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	702b      	strb	r3, [r5, #0]
    if ((rslt == BME280_OK) && (reg_data != NULL))
 800a3da:	782b      	ldrb	r3, [r5, #0]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d051      	beq.n	800a484 <bme280_set_sensor_mode+0xdc>
        rslt = BME280_E_NULL_PTR; // BME280_E_NULL_PTR = INT8_C(-1)
 800a3e0:	23ff      	movs	r3, #255	@ 0xff
 800a3e2:	466e      	mov	r6, sp
 800a3e4:	702b      	strb	r3, [r5, #0]
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 800a3e6:	2303      	movs	r3, #3
 800a3e8:	7831      	ldrb	r1, [r6, #0]
    return rslt;
 800a3ea:	782a      	ldrb	r2, [r5, #0]
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 800a3ec:	400b      	ands	r3, r1
    return rslt;
 800a3ee:	b250      	sxtb	r0, r2
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 800a3f0:	7033      	strb	r3, [r6, #0]
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 800a3f2:	2a00      	cmp	r2, #0
 800a3f4:	d142      	bne.n	800a47c <bme280_set_sensor_mode+0xd4>
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d151      	bne.n	800a49e <bme280_set_sensor_mode+0xf6>
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800a3fa:	68e6      	ldr	r6, [r4, #12]
 800a3fc:	2e00      	cmp	r6, #0
 800a3fe:	d05a      	beq.n	800a4b6 <bme280_set_sensor_mode+0x10e>
 800a400:	6923      	ldr	r3, [r4, #16]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d057      	beq.n	800a4b6 <bme280_set_sensor_mode+0x10e>
 800a406:	6963      	ldr	r3, [r4, #20]
 800a408:	425a      	negs	r2, r3
 800a40a:	4153      	adcs	r3, r2
 800a40c:	425b      	negs	r3, r3
    rslt = null_ptr_check(dev);
 800a40e:	466a      	mov	r2, sp
 800a410:	70d3      	strb	r3, [r2, #3]
    if ((rslt == BME280_OK) && (reg_data != NULL))
 800a412:	78d3      	ldrb	r3, [r2, #3]
    rslt = null_ptr_check(dev);
 800a414:	1cd5      	adds	r5, r2, #3
    if ((rslt == BME280_OK) && (reg_data != NULL))
 800a416:	2b00      	cmp	r3, #0
 800a418:	d147      	bne.n	800a4aa <bme280_set_sensor_mode+0x102>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800a41a:	4669      	mov	r1, sp
 800a41c:	6863      	ldr	r3, [r4, #4]
 800a41e:	2201      	movs	r2, #1
 800a420:	20f4      	movs	r0, #244	@ 0xf4
 800a422:	3102      	adds	r1, #2
 800a424:	47b0      	blx	r6
 800a426:	2345      	movs	r3, #69	@ 0x45
 800a428:	54e0      	strb	r0, [r4, r3]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS) // BME280_INTF_RET_SUCCESS = INT8_C(0)
 800a42a:	2800      	cmp	r0, #0
 800a42c:	d140      	bne.n	800a4b0 <bme280_set_sensor_mode+0x108>
    return rslt;
 800a42e:	782b      	ldrb	r3, [r5, #0]
 800a430:	b258      	sxtb	r0, r3
    if (rslt == BME280_OK)
 800a432:	2b00      	cmp	r3, #0
 800a434:	d122      	bne.n	800a47c <bme280_set_sensor_mode+0xd4>
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 800a436:	466b      	mov	r3, sp
 800a438:	2203      	movs	r2, #3
 800a43a:	4640      	mov	r0, r8
 800a43c:	1c99      	adds	r1, r3, #2
 800a43e:	789b      	ldrb	r3, [r3, #2]
 800a440:	4393      	bics	r3, r2
 800a442:	4002      	ands	r2, r0
 800a444:	4313      	orrs	r3, r2
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800a446:	68e2      	ldr	r2, [r4, #12]
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 800a448:	700b      	strb	r3, [r1, #0]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800a44a:	2a00      	cmp	r2, #0
 800a44c:	d039      	beq.n	800a4c2 <bme280_set_sensor_mode+0x11a>
 800a44e:	6925      	ldr	r5, [r4, #16]
 800a450:	2d00      	cmp	r5, #0
 800a452:	d036      	beq.n	800a4c2 <bme280_set_sensor_mode+0x11a>
 800a454:	6962      	ldr	r2, [r4, #20]
 800a456:	2a00      	cmp	r2, #0
 800a458:	d033      	beq.n	800a4c2 <bme280_set_sensor_mode+0x11a>
            temp_buff[0] = reg_data[0];
 800a45a:	a901      	add	r1, sp, #4
 800a45c:	700b      	strb	r3, [r1, #0]
            if (dev->intf != BME280_I2C_INTF)
 800a45e:	7a20      	ldrb	r0, [r4, #8]
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 800a460:	2201      	movs	r2, #1
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 800a462:	3801      	subs	r0, #1
 800a464:	1e43      	subs	r3, r0, #1
 800a466:	4198      	sbcs	r0, r3
 800a468:	237f      	movs	r3, #127	@ 0x7f
 800a46a:	4240      	negs	r0, r0
 800a46c:	4398      	bics	r0, r3
 800a46e:	30f4      	adds	r0, #244	@ 0xf4
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 800a470:	6863      	ldr	r3, [r4, #4]
 800a472:	47a8      	blx	r5
 800a474:	2345      	movs	r3, #69	@ 0x45
 800a476:	54e0      	strb	r0, [r4, r3]
            if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 800a478:	2800      	cmp	r0, #0
 800a47a:	d11f      	bne.n	800a4bc <bme280_set_sensor_mode+0x114>
}
 800a47c:	b006      	add	sp, #24
 800a47e:	bc80      	pop	{r7}
 800a480:	46b8      	mov	r8, r7
 800a482:	bdf0      	pop	{r4, r5, r6, r7, pc}
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800a484:	466e      	mov	r6, sp
 800a486:	684b      	ldr	r3, [r1, #4]
 800a488:	2201      	movs	r2, #1
 800a48a:	0031      	movs	r1, r6
 800a48c:	20f4      	movs	r0, #244	@ 0xf4
 800a48e:	47b8      	blx	r7
 800a490:	2345      	movs	r3, #69	@ 0x45
 800a492:	54e0      	strb	r0, [r4, r3]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS) // BME280_INTF_RET_SUCCESS = INT8_C(0)
 800a494:	2800      	cmp	r0, #0
 800a496:	d0a6      	beq.n	800a3e6 <bme280_set_sensor_mode+0x3e>
            rslt = BME280_E_COMM_FAIL; // BME280_E_COMM_FAIL = INT8_C(-4)
 800a498:	33b7      	adds	r3, #183	@ 0xb7
 800a49a:	702b      	strb	r3, [r5, #0]
 800a49c:	e7a3      	b.n	800a3e6 <bme280_set_sensor_mode+0x3e>
            rslt = put_device_to_sleep(dev);
 800a49e:	0020      	movs	r0, r4
 800a4a0:	f7ff fc4c 	bl	8009d3c <put_device_to_sleep>
        if (rslt == BME280_OK)
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	d1e9      	bne.n	800a47c <bme280_set_sensor_mode+0xd4>
 800a4a8:	e7a7      	b.n	800a3fa <bme280_set_sensor_mode+0x52>
        rslt = BME280_E_NULL_PTR; // BME280_E_NULL_PTR = INT8_C(-1)
 800a4aa:	23ff      	movs	r3, #255	@ 0xff
 800a4ac:	702b      	strb	r3, [r5, #0]
 800a4ae:	e7be      	b.n	800a42e <bme280_set_sensor_mode+0x86>
            rslt = BME280_E_COMM_FAIL; // BME280_E_COMM_FAIL = INT8_C(-4)
 800a4b0:	33b7      	adds	r3, #183	@ 0xb7
 800a4b2:	702b      	strb	r3, [r5, #0]
 800a4b4:	e7bb      	b.n	800a42e <bme280_set_sensor_mode+0x86>
        rslt = BME280_E_NULL_PTR;
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	425b      	negs	r3, r3
 800a4ba:	e7a8      	b.n	800a40e <bme280_set_sensor_mode+0x66>
                rslt = BME280_E_COMM_FAIL;
 800a4bc:	2004      	movs	r0, #4
 800a4be:	4240      	negs	r0, r0
    return rslt;
 800a4c0:	e7dc      	b.n	800a47c <bme280_set_sensor_mode+0xd4>
        rslt = BME280_E_NULL_PTR;
 800a4c2:	2001      	movs	r0, #1
 800a4c4:	4240      	negs	r0, r0
 800a4c6:	e7d9      	b.n	800a47c <bme280_set_sensor_mode+0xd4>

0800a4c8 <user_delay_us>:
inline static uint8_t SPI1_Readbyte(uint8_t reg_addr);
inline static void SPI1_Writebyte(uint8_t reg_addr, uint8_t val);


void user_delay_us(uint32_t period,void *intf_ptr)
{
 800a4c8:	b510      	push	{r4, lr}
	HAL_Delay(period);
 800a4ca:	f7fc ff35 	bl	8007338 <HAL_Delay>
}
 800a4ce:	bd10      	pop	{r4, pc}

0800a4d0 <user_spi_read>:
}



uint8_t user_spi_read(uint8_t reg_addr, uint8_t* data, uint8_t len, void *intf_ptr)
{
 800a4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4d2:	0015      	movs	r5, r2
	unsigned int i = 0;
	if (!((SPI1)->CR1 & SPI_CR1_SPE)) {SPI1->CR1 |= SPI_CR1_SPE;}
 800a4d4:	2240      	movs	r2, #64	@ 0x40
 800a4d6:	4b19      	ldr	r3, [pc, #100]	@ (800a53c <user_spi_read+0x6c>)
{
 800a4d8:	000e      	movs	r6, r1
	if (!((SPI1)->CR1 & SPI_CR1_SPE)) {SPI1->CR1 |= SPI_CR1_SPE;}
 800a4da:	6819      	ldr	r1, [r3, #0]
 800a4dc:	420a      	tst	r2, r1
 800a4de:	d102      	bne.n	800a4e6 <user_spi_read+0x16>
 800a4e0:	6819      	ldr	r1, [r3, #0]
 800a4e2:	430a      	orrs	r2, r1
 800a4e4:	601a      	str	r2, [r3, #0]
	CSB_L();
 800a4e6:	23a0      	movs	r3, #160	@ 0xa0
 800a4e8:	2280      	movs	r2, #128	@ 0x80
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800a4ea:	2102      	movs	r1, #2
 800a4ec:	04d2      	lsls	r2, r2, #19
 800a4ee:	05db      	lsls	r3, r3, #23
 800a4f0:	619a      	str	r2, [r3, #24]
 800a4f2:	4a12      	ldr	r2, [pc, #72]	@ (800a53c <user_spi_read+0x6c>)
 800a4f4:	6893      	ldr	r3, [r2, #8]
 800a4f6:	4219      	tst	r1, r3
 800a4f8:	d0fc      	beq.n	800a4f4 <user_spi_read+0x24>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800a4fa:	2101      	movs	r1, #1
  *spidr = TxData;
 800a4fc:	7310      	strb	r0, [r2, #12]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800a4fe:	4a0f      	ldr	r2, [pc, #60]	@ (800a53c <user_spi_read+0x6c>)
 800a500:	6893      	ldr	r3, [r2, #8]
 800a502:	4219      	tst	r1, r3
 800a504:	d0fc      	beq.n	800a500 <user_spi_read+0x30>
  return (*((__IO uint8_t *)&SPIx->DR));
 800a506:	7b13      	ldrb	r3, [r2, #12]
	SPI1_SendByte(reg_addr); 	
	while(i < len)
 800a508:	2d00      	cmp	r5, #0
 800a50a:	d010      	beq.n	800a52e <user_spi_read+0x5e>
 800a50c:	2400      	movs	r4, #0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800a50e:	2102      	movs	r1, #2
  *spidr = TxData;
 800a510:	2700      	movs	r7, #0
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800a512:	2201      	movs	r2, #1
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800a514:	4b09      	ldr	r3, [pc, #36]	@ (800a53c <user_spi_read+0x6c>)
 800a516:	6898      	ldr	r0, [r3, #8]
 800a518:	4201      	tst	r1, r0
 800a51a:	d0fc      	beq.n	800a516 <user_spi_read+0x46>
  *spidr = TxData;
 800a51c:	731f      	strb	r7, [r3, #12]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800a51e:	6898      	ldr	r0, [r3, #8]
 800a520:	4202      	tst	r2, r0
 800a522:	d0fc      	beq.n	800a51e <user_spi_read+0x4e>
  return (*((__IO uint8_t *)&SPIx->DR));
 800a524:	7b18      	ldrb	r0, [r3, #12]
	{
		data[i++] = SPI1_SendByte(0x00); 	//Send DUMMY to read data
 800a526:	5530      	strb	r0, [r6, r4]
	while(i < len)
 800a528:	3401      	adds	r4, #1
 800a52a:	42ac      	cmp	r4, r5
 800a52c:	d3f3      	bcc.n	800a516 <user_spi_read+0x46>
	}
	CSB_H();
 800a52e:	23a0      	movs	r3, #160	@ 0xa0
 800a530:	2280      	movs	r2, #128	@ 0x80
 800a532:	05db      	lsls	r3, r3, #23
 800a534:	00d2      	lsls	r2, r2, #3
	return 0;
}
 800a536:	2000      	movs	r0, #0
	CSB_H();
 800a538:	619a      	str	r2, [r3, #24]
}
 800a53a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a53c:	40013000 	.word	0x40013000

0800a540 <user_spi_write>:
}



uint8_t user_spi_write(uint8_t reg_addr, uint8_t* data, uint8_t len, void *intf_ptr)
{
 800a540:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a542:	0016      	movs	r6, r2
	uint8_t i = 0;
	if (!((SPI1)->CR1 & SPI_CR1_SPE)) {SPI1->CR1 |= SPI_CR1_SPE;}
 800a544:	2240      	movs	r2, #64	@ 0x40
 800a546:	4b19      	ldr	r3, [pc, #100]	@ (800a5ac <user_spi_write+0x6c>)
{
 800a548:	000f      	movs	r7, r1
	if (!((SPI1)->CR1 & SPI_CR1_SPE)) {SPI1->CR1 |= SPI_CR1_SPE;}
 800a54a:	6819      	ldr	r1, [r3, #0]
 800a54c:	420a      	tst	r2, r1
 800a54e:	d102      	bne.n	800a556 <user_spi_write+0x16>
 800a550:	6819      	ldr	r1, [r3, #0]
 800a552:	430a      	orrs	r2, r1
 800a554:	601a      	str	r2, [r3, #0]
	CSB_L();
 800a556:	23a0      	movs	r3, #160	@ 0xa0
 800a558:	2280      	movs	r2, #128	@ 0x80
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800a55a:	2102      	movs	r1, #2
 800a55c:	04d2      	lsls	r2, r2, #19
 800a55e:	05db      	lsls	r3, r3, #23
 800a560:	619a      	str	r2, [r3, #24]
 800a562:	4a12      	ldr	r2, [pc, #72]	@ (800a5ac <user_spi_write+0x6c>)
 800a564:	6893      	ldr	r3, [r2, #8]
 800a566:	4219      	tst	r1, r3
 800a568:	d0fc      	beq.n	800a564 <user_spi_write+0x24>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800a56a:	2101      	movs	r1, #1
  *spidr = TxData;
 800a56c:	7310      	strb	r0, [r2, #12]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800a56e:	4a0f      	ldr	r2, [pc, #60]	@ (800a5ac <user_spi_write+0x6c>)
 800a570:	6893      	ldr	r3, [r2, #8]
 800a572:	4219      	tst	r1, r3
 800a574:	d0fc      	beq.n	800a570 <user_spi_write+0x30>
  return (*((__IO uint8_t *)&SPIx->DR));
 800a576:	7b13      	ldrb	r3, [r2, #12]
	SPI1_SendByte(reg_addr); 		
	while(i < len)
 800a578:	2e00      	cmp	r6, #0
 800a57a:	d010      	beq.n	800a59e <user_spi_write+0x5e>
 800a57c:	2400      	movs	r4, #0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800a57e:	2102      	movs	r1, #2
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800a580:	2201      	movs	r2, #1
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800a582:	4b0a      	ldr	r3, [pc, #40]	@ (800a5ac <user_spi_write+0x6c>)
	{
		SPI1_SendByte(data[i++]); 	//Send Data to write
 800a584:	5d3d      	ldrb	r5, [r7, r4]
 800a586:	6898      	ldr	r0, [r3, #8]
 800a588:	4201      	tst	r1, r0
 800a58a:	d0fc      	beq.n	800a586 <user_spi_write+0x46>
  *spidr = TxData;
 800a58c:	731d      	strb	r5, [r3, #12]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800a58e:	6898      	ldr	r0, [r3, #8]
 800a590:	4202      	tst	r2, r0
 800a592:	d0fc      	beq.n	800a58e <user_spi_write+0x4e>
	while(i < len)
 800a594:	3401      	adds	r4, #1
  return (*((__IO uint8_t *)&SPIx->DR));
 800a596:	7b18      	ldrb	r0, [r3, #12]
 800a598:	b2e0      	uxtb	r0, r4
 800a59a:	4286      	cmp	r6, r0
 800a59c:	d8f2      	bhi.n	800a584 <user_spi_write+0x44>
	}
	CSB_H();
 800a59e:	23a0      	movs	r3, #160	@ 0xa0
 800a5a0:	2280      	movs	r2, #128	@ 0x80
 800a5a2:	05db      	lsls	r3, r3, #23
 800a5a4:	00d2      	lsls	r2, r2, #3
	return 0;
}
 800a5a6:	2000      	movs	r0, #0
	CSB_H();
 800a5a8:	619a      	str	r2, [r3, #24]
}
 800a5aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5ac:	40013000 	.word	0x40013000

0800a5b0 <DEV_SPI_WriteByte>:

void DEV_SPI_WriteByte(uint8_t value)
{

	// Check if the SPI is enabled
	if (!((SPI1)->CR1 & SPI_CR1_SPE))
 800a5b0:	2240      	movs	r2, #64	@ 0x40
 800a5b2:	4b0f      	ldr	r3, [pc, #60]	@ (800a5f0 <DEV_SPI_WriteByte+0x40>)
 800a5b4:	6819      	ldr	r1, [r3, #0]
 800a5b6:	420a      	tst	r2, r1
 800a5b8:	d102      	bne.n	800a5c0 <DEV_SPI_WriteByte+0x10>
	{
		SPI1->CR1 |= SPI_CR1_SPE;
 800a5ba:	6819      	ldr	r1, [r3, #0]
 800a5bc:	430a      	orrs	r2, r1
 800a5be:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800a5c0:	2102      	movs	r1, #2
 800a5c2:	4a0b      	ldr	r2, [pc, #44]	@ (800a5f0 <DEV_SPI_WriteByte+0x40>)
 800a5c4:	6893      	ldr	r3, [r2, #8]
 800a5c6:	4219      	tst	r1, r3
 800a5c8:	d0fc      	beq.n	800a5c4 <DEV_SPI_WriteByte+0x14>
	}

	while (LL_SPI_IsActiveFlag_TXE(SPI1) == RESET)
		;

	CS_L();
 800a5ca:	23a0      	movs	r3, #160	@ 0xa0
 800a5cc:	2180      	movs	r1, #128	@ 0x80
 800a5ce:	05db      	lsls	r3, r3, #23
 800a5d0:	0549      	lsls	r1, r1, #21
 800a5d2:	6199      	str	r1, [r3, #24]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800a5d4:	2101      	movs	r1, #1
  *spidr = TxData;
 800a5d6:	7310      	strb	r0, [r2, #12]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800a5d8:	4a05      	ldr	r2, [pc, #20]	@ (800a5f0 <DEV_SPI_WriteByte+0x40>)
 800a5da:	6893      	ldr	r3, [r2, #8]
 800a5dc:	4219      	tst	r1, r3
 800a5de:	d0fc      	beq.n	800a5da <DEV_SPI_WriteByte+0x2a>
  return (*((__IO uint8_t *)&SPIx->DR));
 800a5e0:	7b13      	ldrb	r3, [r2, #12]
	// Wait until the transmission is complete
	while (LL_SPI_IsActiveFlag_RXNE(SPI1) == RESET)
		;
	/* Read data register */
	(void)LL_SPI_ReceiveData8(SPI1);
	CS_H();
 800a5e2:	23a0      	movs	r3, #160	@ 0xa0
 800a5e4:	2280      	movs	r2, #128	@ 0x80
 800a5e6:	05db      	lsls	r3, r3, #23
 800a5e8:	0152      	lsls	r2, r2, #5
 800a5ea:	619a      	str	r2, [r3, #24]
}
 800a5ec:	4770      	bx	lr
 800a5ee:	46c0      	nop			@ (mov r8, r8)
 800a5f0:	40013000 	.word	0x40013000

0800a5f4 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
	DC_L();
 800a5f4:	23a0      	movs	r3, #160	@ 0xa0
 800a5f6:	2280      	movs	r2, #128	@ 0x80
 800a5f8:	05db      	lsls	r3, r3, #23
 800a5fa:	0452      	lsls	r2, r2, #17
 800a5fc:	619a      	str	r2, [r3, #24]
	CS_H();
 800a5fe:	2280      	movs	r2, #128	@ 0x80
 800a600:	0152      	lsls	r2, r2, #5
 800a602:	619a      	str	r2, [r3, #24]
	RST_H(); // The Reset is active low.
 800a604:	2280      	movs	r2, #128	@ 0x80
 800a606:	0112      	lsls	r2, r2, #4
	return 0;
}
 800a608:	2000      	movs	r0, #0
	RST_H(); // The Reset is active low.
 800a60a:	619a      	str	r2, [r3, #24]
}
 800a60c:	4770      	bx	lr
 800a60e:	46c0      	nop			@ (mov r8, r8)

0800a610 <EPD_1IN54_V2_SetLut>:


}

static void EPD_1IN54_V2_SetLut(UBYTE *lut)
{
 800a610:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a612:	46d6      	mov	lr, sl
 800a614:	464f      	mov	r7, r9
 800a616:	4646      	mov	r6, r8
    DC_L();
 800a618:	25a0      	movs	r5, #160	@ 0xa0
{
 800a61a:	b5c0      	push	{r6, r7, lr}
    DC_L();
 800a61c:	2380      	movs	r3, #128	@ 0x80
    CS_L();
 800a61e:	2780      	movs	r7, #128	@ 0x80
    DC_L();
 800a620:	05ed      	lsls	r5, r5, #23
 800a622:	045b      	lsls	r3, r3, #17
    CS_L();
 800a624:	057f      	lsls	r7, r7, #21
{
 800a626:	4682      	mov	sl, r0
    DC_L();
 800a628:	61ab      	str	r3, [r5, #24]
    DEV_SPI_WriteByte(Reg);
 800a62a:	2032      	movs	r0, #50	@ 0x32
    CS_L();
 800a62c:	61af      	str	r7, [r5, #24]
    DEV_SPI_WriteByte(Reg);
 800a62e:	f7ff ffbf 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800a632:	2380      	movs	r3, #128	@ 0x80
 800a634:	015b      	lsls	r3, r3, #5
 800a636:	61ab      	str	r3, [r5, #24]
    for (UBYTE i = 0; i < 153; i++)
 800a638:	2399      	movs	r3, #153	@ 0x99
 800a63a:	4453      	add	r3, sl
 800a63c:	4699      	mov	r9, r3
    DC_H();
 800a63e:	2380      	movs	r3, #128	@ 0x80
 800a640:	005b      	lsls	r3, r3, #1
 800a642:	4654      	mov	r4, sl
 800a644:	4698      	mov	r8, r3
 800a646:	4643      	mov	r3, r8
    CS_H();
 800a648:	2680      	movs	r6, #128	@ 0x80
        EPD_1IN54_V2_SendData(lut[i]);
 800a64a:	7820      	ldrb	r0, [r4, #0]
    CS_H();
 800a64c:	0176      	lsls	r6, r6, #5
    DC_H();
 800a64e:	61ab      	str	r3, [r5, #24]
    for (UBYTE i = 0; i < 153; i++)
 800a650:	3401      	adds	r4, #1
    CS_L();
 800a652:	61af      	str	r7, [r5, #24]
    DEV_SPI_WriteByte(Data);
 800a654:	f7ff ffac 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800a658:	61ae      	str	r6, [r5, #24]
    for (UBYTE i = 0; i < 153; i++)
 800a65a:	454c      	cmp	r4, r9
 800a65c:	d1f3      	bne.n	800a646 <EPD_1IN54_V2_SetLut+0x36>
    DC_L();
 800a65e:	2480      	movs	r4, #128	@ 0x80
 800a660:	0464      	lsls	r4, r4, #17
 800a662:	61ac      	str	r4, [r5, #24]
    DEV_SPI_WriteByte(Reg);
 800a664:	203f      	movs	r0, #63	@ 0x3f
    CS_L();
 800a666:	61af      	str	r7, [r5, #24]
    DEV_SPI_WriteByte(Reg);
 800a668:	f7ff ffa2 	bl	800a5b0 <DEV_SPI_WriteByte>
    EPD_1IN54_V2_Lut(lut);

    EPD_1IN54_V2_SendCommand(0x3f);
    EPD_1IN54_V2_SendData(lut[153]);
 800a66c:	4652      	mov	r2, sl
 800a66e:	2399      	movs	r3, #153	@ 0x99
    CS_H();
 800a670:	61ae      	str	r6, [r5, #24]
    EPD_1IN54_V2_SendData(lut[153]);
 800a672:	5cd0      	ldrb	r0, [r2, r3]
    DC_H();
 800a674:	4643      	mov	r3, r8
 800a676:	61ab      	str	r3, [r5, #24]
    CS_L();
 800a678:	61af      	str	r7, [r5, #24]
    DEV_SPI_WriteByte(Data);
 800a67a:	f7ff ff99 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800a67e:	61ae      	str	r6, [r5, #24]
    DEV_SPI_WriteByte(Reg);
 800a680:	2003      	movs	r0, #3
    DC_L();
 800a682:	61ac      	str	r4, [r5, #24]
    CS_L();
 800a684:	61af      	str	r7, [r5, #24]
    DEV_SPI_WriteByte(Reg);
 800a686:	f7ff ff93 	bl	800a5b0 <DEV_SPI_WriteByte>

    EPD_1IN54_V2_SendCommand(0x03);
    EPD_1IN54_V2_SendData(lut[154]);
 800a68a:	4652      	mov	r2, sl
 800a68c:	239a      	movs	r3, #154	@ 0x9a
    CS_H();
 800a68e:	61ae      	str	r6, [r5, #24]
    EPD_1IN54_V2_SendData(lut[154]);
 800a690:	5cd0      	ldrb	r0, [r2, r3]
    DC_H();
 800a692:	4643      	mov	r3, r8
 800a694:	61ab      	str	r3, [r5, #24]
    CS_L();
 800a696:	61af      	str	r7, [r5, #24]
    DEV_SPI_WriteByte(Data);
 800a698:	f7ff ff8a 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800a69c:	61ae      	str	r6, [r5, #24]
    DEV_SPI_WriteByte(Reg);
 800a69e:	2004      	movs	r0, #4
    DC_L();
 800a6a0:	61ac      	str	r4, [r5, #24]
    CS_L();
 800a6a2:	61af      	str	r7, [r5, #24]
    DEV_SPI_WriteByte(Reg);
 800a6a4:	f7ff ff84 	bl	800a5b0 <DEV_SPI_WriteByte>

    EPD_1IN54_V2_SendCommand(0x04);
    EPD_1IN54_V2_SendData(lut[155]);
 800a6a8:	4652      	mov	r2, sl
 800a6aa:	239b      	movs	r3, #155	@ 0x9b
    CS_H();
 800a6ac:	61ae      	str	r6, [r5, #24]
    EPD_1IN54_V2_SendData(lut[155]);
 800a6ae:	5cd0      	ldrb	r0, [r2, r3]
    DC_H();
 800a6b0:	4643      	mov	r3, r8
 800a6b2:	61ab      	str	r3, [r5, #24]
    CS_L();
 800a6b4:	61af      	str	r7, [r5, #24]
    DEV_SPI_WriteByte(Data);
 800a6b6:	f7ff ff7b 	bl	800a5b0 <DEV_SPI_WriteByte>
    EPD_1IN54_V2_SendData(lut[156]);
 800a6ba:	4652      	mov	r2, sl
 800a6bc:	239c      	movs	r3, #156	@ 0x9c
    CS_H();
 800a6be:	61ae      	str	r6, [r5, #24]
    EPD_1IN54_V2_SendData(lut[156]);
 800a6c0:	5cd0      	ldrb	r0, [r2, r3]
    DC_H();
 800a6c2:	4643      	mov	r3, r8
 800a6c4:	61ab      	str	r3, [r5, #24]
    CS_L();
 800a6c6:	61af      	str	r7, [r5, #24]
    DEV_SPI_WriteByte(Data);
 800a6c8:	f7ff ff72 	bl	800a5b0 <DEV_SPI_WriteByte>
    EPD_1IN54_V2_SendData(lut[157]);
 800a6cc:	4652      	mov	r2, sl
 800a6ce:	239d      	movs	r3, #157	@ 0x9d
    CS_H();
 800a6d0:	61ae      	str	r6, [r5, #24]
    EPD_1IN54_V2_SendData(lut[157]);
 800a6d2:	5cd0      	ldrb	r0, [r2, r3]
    DC_H();
 800a6d4:	4643      	mov	r3, r8
 800a6d6:	61ab      	str	r3, [r5, #24]
    CS_L();
 800a6d8:	61af      	str	r7, [r5, #24]
    DEV_SPI_WriteByte(Data);
 800a6da:	f7ff ff69 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800a6de:	61ae      	str	r6, [r5, #24]
    DEV_SPI_WriteByte(Reg);
 800a6e0:	202c      	movs	r0, #44	@ 0x2c
    DC_L();
 800a6e2:	61ac      	str	r4, [r5, #24]
    CS_L();
 800a6e4:	61af      	str	r7, [r5, #24]
    DEV_SPI_WriteByte(Reg);
 800a6e6:	f7ff ff63 	bl	800a5b0 <DEV_SPI_WriteByte>

    EPD_1IN54_V2_SendCommand(0x2c);
    EPD_1IN54_V2_SendData(lut[158]);
 800a6ea:	4652      	mov	r2, sl
 800a6ec:	239e      	movs	r3, #158	@ 0x9e
    CS_H();
 800a6ee:	61ae      	str	r6, [r5, #24]
    EPD_1IN54_V2_SendData(lut[158]);
 800a6f0:	5cd0      	ldrb	r0, [r2, r3]
    DC_H();
 800a6f2:	4643      	mov	r3, r8
 800a6f4:	61ab      	str	r3, [r5, #24]
    CS_L();
 800a6f6:	61af      	str	r7, [r5, #24]
    DEV_SPI_WriteByte(Data);
 800a6f8:	f7ff ff5a 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800a6fc:	61ae      	str	r6, [r5, #24]
}
 800a6fe:	bce0      	pop	{r5, r6, r7}
 800a700:	46ba      	mov	sl, r7
 800a702:	46b1      	mov	r9, r6
 800a704:	46a8      	mov	r8, r5
 800a706:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a708 <EPD_1IN54_V2_Reset>:
{
 800a708:	b570      	push	{r4, r5, r6, lr}
    RST_L(); // DEV_Digital_Write(EPD_RST_PIN, 0);
 800a70a:	2380      	movs	r3, #128	@ 0x80
    RST_H(); // DEV_Digital_Write(EPD_RST_PIN, 1);
 800a70c:	24a0      	movs	r4, #160	@ 0xa0
 800a70e:	2580      	movs	r5, #128	@ 0x80
 800a710:	05e4      	lsls	r4, r4, #23
 800a712:	012d      	lsls	r5, r5, #4
    RST_L(); // DEV_Digital_Write(EPD_RST_PIN, 0);
 800a714:	051b      	lsls	r3, r3, #20
    RST_H(); // DEV_Digital_Write(EPD_RST_PIN, 1);
 800a716:	61a5      	str	r5, [r4, #24]
    HAL_Delay(2);
 800a718:	2002      	movs	r0, #2
    RST_L(); // DEV_Digital_Write(EPD_RST_PIN, 0);
 800a71a:	61a3      	str	r3, [r4, #24]
    HAL_Delay(2);
 800a71c:	f7fc fe0c 	bl	8007338 <HAL_Delay>
    RST_H(); // DEV_Digital_Write(EPD_RST_PIN, 1);
 800a720:	61a5      	str	r5, [r4, #24]
}
 800a722:	bd70      	pop	{r4, r5, r6, pc}

0800a724 <EPD_1IN54_V2_TurnOnDisplayPart>:
{
 800a724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    DC_L();
 800a726:	24a0      	movs	r4, #160	@ 0xa0
 800a728:	2780      	movs	r7, #128	@ 0x80
    CS_L();
 800a72a:	2680      	movs	r6, #128	@ 0x80
    DC_L();
 800a72c:	05e4      	lsls	r4, r4, #23
 800a72e:	047f      	lsls	r7, r7, #17
    CS_L();
 800a730:	0576      	lsls	r6, r6, #21
    DC_L();
 800a732:	61a7      	str	r7, [r4, #24]
    DEV_SPI_WriteByte(Reg);
 800a734:	2022      	movs	r0, #34	@ 0x22
    CS_L();
 800a736:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Reg);
 800a738:	f7ff ff3a 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800a73c:	2580      	movs	r5, #128	@ 0x80
    DC_H();
 800a73e:	2380      	movs	r3, #128	@ 0x80
    CS_H();
 800a740:	016d      	lsls	r5, r5, #5
    DC_H();
 800a742:	005b      	lsls	r3, r3, #1
    CS_H();
 800a744:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800a746:	20cf      	movs	r0, #207	@ 0xcf
    DC_H();
 800a748:	61a3      	str	r3, [r4, #24]
    CS_L();
 800a74a:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800a74c:	f7ff ff30 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800a750:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Reg);
 800a752:	2020      	movs	r0, #32
    DC_L();
 800a754:	61a7      	str	r7, [r4, #24]
    CS_L();
 800a756:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Reg);
 800a758:	f7ff ff2a 	bl	800a5b0 <DEV_SPI_WriteByte>
    PB6_H();
 800a75c:	2340      	movs	r3, #64	@ 0x40
    CS_H();
 800a75e:	61a5      	str	r5, [r4, #24]
    PB6_H();
 800a760:	4d11      	ldr	r5, [pc, #68]	@ (800a7a8 <EPD_1IN54_V2_TurnOnDisplayPart+0x84>)
    enter_stop2(2330, LL_RTC_WAKEUPCLOCK_DIV_8);
 800a762:	2101      	movs	r1, #1
    PB6_H();
 800a764:	61ab      	str	r3, [r5, #24]
    PB7_H();
 800a766:	3340      	adds	r3, #64	@ 0x40
 800a768:	61ab      	str	r3, [r5, #24]
    enter_stop2(2330, LL_RTC_WAKEUPCLOCK_DIV_8);
 800a76a:	4810      	ldr	r0, [pc, #64]	@ (800a7ac <EPD_1IN54_V2_TurnOnDisplayPart+0x88>)
 800a76c:	f7fa fd56 	bl	800521c <enter_stop2>
    PB6_L();
 800a770:	2380      	movs	r3, #128	@ 0x80
 800a772:	03db      	lsls	r3, r3, #15
 800a774:	61ab      	str	r3, [r5, #24]
    uint32_t time1 = HAL_GetTick();
 800a776:	f7fc fdd9 	bl	800732c <HAL_GetTick>
 800a77a:	0005      	movs	r5, r0
        if ((HAL_GetTick() - time1) > timeout_value)
 800a77c:	4f0c      	ldr	r7, [pc, #48]	@ (800a7b0 <EPD_1IN54_V2_TurnOnDisplayPart+0x8c>)
    while (GPIOA->IDR & 0b0000001000000000)
 800a77e:	2680      	movs	r6, #128	@ 0x80
 800a780:	00b6      	lsls	r6, r6, #2
 800a782:	e004      	b.n	800a78e <EPD_1IN54_V2_TurnOnDisplayPart+0x6a>
        if ((HAL_GetTick() - time1) > timeout_value)
 800a784:	f7fc fdd2 	bl	800732c <HAL_GetTick>
 800a788:	1b40      	subs	r0, r0, r5
 800a78a:	42b8      	cmp	r0, r7
 800a78c:	d807      	bhi.n	800a79e <EPD_1IN54_V2_TurnOnDisplayPart+0x7a>
    while (GPIOA->IDR & 0b0000001000000000)
 800a78e:	6923      	ldr	r3, [r4, #16]
 800a790:	4233      	tst	r3, r6
 800a792:	d1f7      	bne.n	800a784 <EPD_1IN54_V2_TurnOnDisplayPart+0x60>
    PB7_L();
 800a794:	2280      	movs	r2, #128	@ 0x80
 800a796:	4b04      	ldr	r3, [pc, #16]	@ (800a7a8 <EPD_1IN54_V2_TurnOnDisplayPart+0x84>)
 800a798:	0412      	lsls	r2, r2, #16
 800a79a:	619a      	str	r2, [r3, #24]
}
 800a79c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            timeout_reset(__func__, __LINE__);
 800a79e:	218b      	movs	r1, #139	@ 0x8b
 800a7a0:	4804      	ldr	r0, [pc, #16]	@ (800a7b4 <EPD_1IN54_V2_TurnOnDisplayPart+0x90>)
 800a7a2:	f7fa fdcb 	bl	800533c <timeout_reset>
 800a7a6:	e7ea      	b.n	800a77e <EPD_1IN54_V2_TurnOnDisplayPart+0x5a>
 800a7a8:	50000400 	.word	0x50000400
 800a7ac:	0000091a 	.word	0x0000091a
 800a7b0:	00000bb8 	.word	0x00000bb8
 800a7b4:	0800ef2c 	.word	0x0800ef2c

0800a7b8 <EPD_1IN54_V2_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_1IN54_V2_Init(void)
{
 800a7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    RST_L(); // DEV_Digital_Write(EPD_RST_PIN, 0);
 800a7ba:	2380      	movs	r3, #128	@ 0x80
    RST_H(); // DEV_Digital_Write(EPD_RST_PIN, 1);
 800a7bc:	24a0      	movs	r4, #160	@ 0xa0
 800a7be:	2580      	movs	r5, #128	@ 0x80
{
 800a7c0:	46c6      	mov	lr, r8
    RST_H(); // DEV_Digital_Write(EPD_RST_PIN, 1);
 800a7c2:	05e4      	lsls	r4, r4, #23
 800a7c4:	012d      	lsls	r5, r5, #4
    RST_L(); // DEV_Digital_Write(EPD_RST_PIN, 0);
 800a7c6:	051b      	lsls	r3, r3, #20
{
 800a7c8:	b500      	push	{lr}
    HAL_Delay(2);
 800a7ca:	2002      	movs	r0, #2
    RST_H(); // DEV_Digital_Write(EPD_RST_PIN, 1);
 800a7cc:	61a5      	str	r5, [r4, #24]
    RST_L(); // DEV_Digital_Write(EPD_RST_PIN, 0);
 800a7ce:	61a3      	str	r3, [r4, #24]
    HAL_Delay(2);
 800a7d0:	f7fc fdb2 	bl	8007338 <HAL_Delay>
    RST_H(); // DEV_Digital_Write(EPD_RST_PIN, 1);
 800a7d4:	61a5      	str	r5, [r4, #24]
    uint32_t time1 = HAL_GetTick();
 800a7d6:	f7fc fda9 	bl	800732c <HAL_GetTick>
 800a7da:	0005      	movs	r5, r0
        if ((HAL_GetTick() - time1) > timeout_value)
 800a7dc:	4f7f      	ldr	r7, [pc, #508]	@ (800a9dc <EPD_1IN54_V2_Init+0x224>)
    while (GPIOA->IDR & 0b0000001000000000)
 800a7de:	2680      	movs	r6, #128	@ 0x80
 800a7e0:	00b6      	lsls	r6, r6, #2
 800a7e2:	e005      	b.n	800a7f0 <EPD_1IN54_V2_Init+0x38>
        if ((HAL_GetTick() - time1) > timeout_value)
 800a7e4:	f7fc fda2 	bl	800732c <HAL_GetTick>
 800a7e8:	1b40      	subs	r0, r0, r5
 800a7ea:	42b8      	cmp	r0, r7
 800a7ec:	d900      	bls.n	800a7f0 <EPD_1IN54_V2_Init+0x38>
 800a7ee:	e0ea      	b.n	800a9c6 <EPD_1IN54_V2_Init+0x20e>
    while (GPIOA->IDR & 0b0000001000000000)
 800a7f0:	6923      	ldr	r3, [r4, #16]
 800a7f2:	4233      	tst	r3, r6
 800a7f4:	d1f6      	bne.n	800a7e4 <EPD_1IN54_V2_Init+0x2c>
    DC_L();
 800a7f6:	2380      	movs	r3, #128	@ 0x80
 800a7f8:	045b      	lsls	r3, r3, #17
 800a7fa:	61a3      	str	r3, [r4, #24]
    CS_L();
 800a7fc:	2380      	movs	r3, #128	@ 0x80
 800a7fe:	055b      	lsls	r3, r3, #21
 800a800:	61a3      	str	r3, [r4, #24]
    DEV_SPI_WriteByte(Reg);
 800a802:	2012      	movs	r0, #18
 800a804:	f7ff fed4 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800a808:	2380      	movs	r3, #128	@ 0x80
 800a80a:	015b      	lsls	r3, r3, #5
 800a80c:	61a3      	str	r3, [r4, #24]
    uint32_t time1 = HAL_GetTick();
 800a80e:	f7fc fd8d 	bl	800732c <HAL_GetTick>
    while (GPIOA->IDR & 0b0000001000000000)
 800a812:	24a0      	movs	r4, #160	@ 0xa0
    uint32_t time1 = HAL_GetTick();
 800a814:	0005      	movs	r5, r0
        if ((HAL_GetTick() - time1) > timeout_value)
 800a816:	4f71      	ldr	r7, [pc, #452]	@ (800a9dc <EPD_1IN54_V2_Init+0x224>)
    while (GPIOA->IDR & 0b0000001000000000)
 800a818:	05e4      	lsls	r4, r4, #23
 800a81a:	2680      	movs	r6, #128	@ 0x80
 800a81c:	00b6      	lsls	r6, r6, #2
 800a81e:	e005      	b.n	800a82c <EPD_1IN54_V2_Init+0x74>
        if ((HAL_GetTick() - time1) > timeout_value)
 800a820:	f7fc fd84 	bl	800732c <HAL_GetTick>
 800a824:	1b40      	subs	r0, r0, r5
 800a826:	42b8      	cmp	r0, r7
 800a828:	d900      	bls.n	800a82c <EPD_1IN54_V2_Init+0x74>
 800a82a:	e0d1      	b.n	800a9d0 <EPD_1IN54_V2_Init+0x218>
    while (GPIOA->IDR & 0b0000001000000000)
 800a82c:	6923      	ldr	r3, [r4, #16]
 800a82e:	4233      	tst	r3, r6
 800a830:	d1f6      	bne.n	800a820 <EPD_1IN54_V2_Init+0x68>
    DC_L();
 800a832:	2380      	movs	r3, #128	@ 0x80
    CS_L();
 800a834:	2680      	movs	r6, #128	@ 0x80
    CS_H();
 800a836:	2580      	movs	r5, #128	@ 0x80
    DC_H();
 800a838:	2780      	movs	r7, #128	@ 0x80
    DC_L();
 800a83a:	045b      	lsls	r3, r3, #17
 800a83c:	4698      	mov	r8, r3
    CS_L();
 800a83e:	0576      	lsls	r6, r6, #21
    CS_H();
 800a840:	016d      	lsls	r5, r5, #5
    DC_H();
 800a842:	007f      	lsls	r7, r7, #1
    DC_L();
 800a844:	61a3      	str	r3, [r4, #24]
    DEV_SPI_WriteByte(Reg);
 800a846:	2001      	movs	r0, #1
    CS_L();
 800a848:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Reg);
 800a84a:	f7ff feb1 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800a84e:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800a850:	20c7      	movs	r0, #199	@ 0xc7
    DC_H();
 800a852:	61a7      	str	r7, [r4, #24]
    CS_L();
 800a854:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800a856:	f7ff feab 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800a85a:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800a85c:	2000      	movs	r0, #0
    DC_H();
 800a85e:	61a7      	str	r7, [r4, #24]
    CS_L();
 800a860:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800a862:	f7ff fea5 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800a866:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800a868:	2001      	movs	r0, #1
    DC_H();
 800a86a:	61a7      	str	r7, [r4, #24]
    CS_L();
 800a86c:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800a86e:	f7ff fe9f 	bl	800a5b0 <DEV_SPI_WriteByte>
    DC_L();
 800a872:	4643      	mov	r3, r8
    CS_H();
 800a874:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Reg);
 800a876:	2011      	movs	r0, #17
    DC_L();
 800a878:	61a3      	str	r3, [r4, #24]
    CS_L();
 800a87a:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Reg);
 800a87c:	f7ff fe98 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800a880:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800a882:	2001      	movs	r0, #1
    DC_H();
 800a884:	61a7      	str	r7, [r4, #24]
    CS_L();
 800a886:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800a888:	f7ff fe92 	bl	800a5b0 <DEV_SPI_WriteByte>
    DC_L();
 800a88c:	4643      	mov	r3, r8
    CS_H();
 800a88e:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Reg);
 800a890:	2044      	movs	r0, #68	@ 0x44
    DC_L();
 800a892:	61a3      	str	r3, [r4, #24]
    CS_L();
 800a894:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Reg);
 800a896:	f7ff fe8b 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800a89a:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800a89c:	2000      	movs	r0, #0
    DC_H();
 800a89e:	61a7      	str	r7, [r4, #24]
    CS_L();
 800a8a0:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800a8a2:	f7ff fe85 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800a8a6:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800a8a8:	2018      	movs	r0, #24
    DC_H();
 800a8aa:	61a7      	str	r7, [r4, #24]
    CS_L();
 800a8ac:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800a8ae:	f7ff fe7f 	bl	800a5b0 <DEV_SPI_WriteByte>
    DC_L();
 800a8b2:	4643      	mov	r3, r8
    CS_H();
 800a8b4:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Reg);
 800a8b6:	2045      	movs	r0, #69	@ 0x45
    DC_L();
 800a8b8:	61a3      	str	r3, [r4, #24]
    CS_L();
 800a8ba:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Reg);
 800a8bc:	f7ff fe78 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800a8c0:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800a8c2:	20c7      	movs	r0, #199	@ 0xc7
    DC_H();
 800a8c4:	61a7      	str	r7, [r4, #24]
    CS_L();
 800a8c6:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800a8c8:	f7ff fe72 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800a8cc:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800a8ce:	2000      	movs	r0, #0
    DC_H();
 800a8d0:	61a7      	str	r7, [r4, #24]
    CS_L();
 800a8d2:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800a8d4:	f7ff fe6c 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800a8d8:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800a8da:	2000      	movs	r0, #0
    DC_H();
 800a8dc:	61a7      	str	r7, [r4, #24]
    CS_L();
 800a8de:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800a8e0:	f7ff fe66 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800a8e4:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800a8e6:	2000      	movs	r0, #0
    DC_H();
 800a8e8:	61a7      	str	r7, [r4, #24]
    CS_L();
 800a8ea:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800a8ec:	f7ff fe60 	bl	800a5b0 <DEV_SPI_WriteByte>
    DC_L();
 800a8f0:	4643      	mov	r3, r8
    CS_H();
 800a8f2:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Reg);
 800a8f4:	203c      	movs	r0, #60	@ 0x3c
    DC_L();
 800a8f6:	61a3      	str	r3, [r4, #24]
    CS_L();
 800a8f8:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Reg);
 800a8fa:	f7ff fe59 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800a8fe:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800a900:	2001      	movs	r0, #1
    DC_H();
 800a902:	61a7      	str	r7, [r4, #24]
    CS_L();
 800a904:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800a906:	f7ff fe53 	bl	800a5b0 <DEV_SPI_WriteByte>
    DC_L();
 800a90a:	4643      	mov	r3, r8
    CS_H();
 800a90c:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Reg);
 800a90e:	2018      	movs	r0, #24
    DC_L();
 800a910:	61a3      	str	r3, [r4, #24]
    CS_L();
 800a912:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Reg);
 800a914:	f7ff fe4c 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800a918:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800a91a:	2080      	movs	r0, #128	@ 0x80
    DC_H();
 800a91c:	61a7      	str	r7, [r4, #24]
    CS_L();
 800a91e:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800a920:	f7ff fe46 	bl	800a5b0 <DEV_SPI_WriteByte>
    DC_L();
 800a924:	4643      	mov	r3, r8
    CS_H();
 800a926:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Reg);
 800a928:	2022      	movs	r0, #34	@ 0x22
    DC_L();
 800a92a:	61a3      	str	r3, [r4, #24]
    CS_L();
 800a92c:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Reg);
 800a92e:	f7ff fe3f 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800a932:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800a934:	20b1      	movs	r0, #177	@ 0xb1
    DC_H();
 800a936:	61a7      	str	r7, [r4, #24]
    CS_L();
 800a938:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800a93a:	f7ff fe39 	bl	800a5b0 <DEV_SPI_WriteByte>
    DC_L();
 800a93e:	4643      	mov	r3, r8
    CS_H();
 800a940:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Reg);
 800a942:	2020      	movs	r0, #32
    DC_L();
 800a944:	61a3      	str	r3, [r4, #24]
    CS_L();
 800a946:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Reg);
 800a948:	f7ff fe32 	bl	800a5b0 <DEV_SPI_WriteByte>
    DC_L();
 800a94c:	4643      	mov	r3, r8
    CS_H();
 800a94e:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Reg);
 800a950:	204e      	movs	r0, #78	@ 0x4e
    DC_L();
 800a952:	61a3      	str	r3, [r4, #24]
    CS_L();
 800a954:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Reg);
 800a956:	f7ff fe2b 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800a95a:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800a95c:	2000      	movs	r0, #0
    DC_H();
 800a95e:	61a7      	str	r7, [r4, #24]
    CS_L();
 800a960:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800a962:	f7ff fe25 	bl	800a5b0 <DEV_SPI_WriteByte>
    DC_L();
 800a966:	4643      	mov	r3, r8
    CS_H();
 800a968:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Reg);
 800a96a:	204f      	movs	r0, #79	@ 0x4f
    DC_L();
 800a96c:	61a3      	str	r3, [r4, #24]
    CS_L();
 800a96e:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Reg);
 800a970:	f7ff fe1e 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800a974:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800a976:	20c7      	movs	r0, #199	@ 0xc7
    DC_H();
 800a978:	61a7      	str	r7, [r4, #24]
    CS_L();
 800a97a:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800a97c:	f7ff fe18 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800a980:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800a982:	2000      	movs	r0, #0
    DC_H();
 800a984:	61a7      	str	r7, [r4, #24]
    CS_L();
 800a986:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800a988:	f7ff fe12 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800a98c:	61a5      	str	r5, [r4, #24]
    uint32_t time1 = HAL_GetTick();
 800a98e:	f7fc fccd 	bl	800732c <HAL_GetTick>
    while (GPIOA->IDR & 0b0000001000000000)
 800a992:	26a0      	movs	r6, #160	@ 0xa0
    uint32_t time1 = HAL_GetTick();
 800a994:	0004      	movs	r4, r0
        if ((HAL_GetTick() - time1) > timeout_value)
 800a996:	4f11      	ldr	r7, [pc, #68]	@ (800a9dc <EPD_1IN54_V2_Init+0x224>)
    while (GPIOA->IDR & 0b0000001000000000)
 800a998:	05f6      	lsls	r6, r6, #23
 800a99a:	2580      	movs	r5, #128	@ 0x80
 800a99c:	00ad      	lsls	r5, r5, #2
 800a99e:	e004      	b.n	800a9aa <EPD_1IN54_V2_Init+0x1f2>
        if ((HAL_GetTick() - time1) > timeout_value)
 800a9a0:	f7fc fcc4 	bl	800732c <HAL_GetTick>
 800a9a4:	1b00      	subs	r0, r0, r4
 800a9a6:	42b8      	cmp	r0, r7
 800a9a8:	d808      	bhi.n	800a9bc <EPD_1IN54_V2_Init+0x204>
    while (GPIOA->IDR & 0b0000001000000000)
 800a9aa:	6933      	ldr	r3, [r6, #16]
 800a9ac:	422b      	tst	r3, r5
 800a9ae:	d1f7      	bne.n	800a9a0 <EPD_1IN54_V2_Init+0x1e8>
#if (USE_TIME_PROFILING == 1)
    tmp = DWT->CYCCNT - startTick;
    printf("####  EPD_1IN54_V2_Init-3: %d\n", (int)(tmp * 0.0000625));
#endif /* USE_TIME_PROFILING */

    EPD_1IN54_V2_SetLut(WF_Full_1IN54);
 800a9b0:	480b      	ldr	r0, [pc, #44]	@ (800a9e0 <EPD_1IN54_V2_Init+0x228>)
 800a9b2:	f7ff fe2d 	bl	800a610 <EPD_1IN54_V2_SetLut>
}
 800a9b6:	bc80      	pop	{r7}
 800a9b8:	46b8      	mov	r8, r7
 800a9ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
            timeout_reset(__func__, __LINE__);
 800a9bc:	218b      	movs	r1, #139	@ 0x8b
 800a9be:	4809      	ldr	r0, [pc, #36]	@ (800a9e4 <EPD_1IN54_V2_Init+0x22c>)
 800a9c0:	f7fa fcbc 	bl	800533c <timeout_reset>
 800a9c4:	e7e9      	b.n	800a99a <EPD_1IN54_V2_Init+0x1e2>
 800a9c6:	218b      	movs	r1, #139	@ 0x8b
 800a9c8:	4806      	ldr	r0, [pc, #24]	@ (800a9e4 <EPD_1IN54_V2_Init+0x22c>)
 800a9ca:	f7fa fcb7 	bl	800533c <timeout_reset>
 800a9ce:	e706      	b.n	800a7de <EPD_1IN54_V2_Init+0x26>
 800a9d0:	218b      	movs	r1, #139	@ 0x8b
 800a9d2:	4804      	ldr	r0, [pc, #16]	@ (800a9e4 <EPD_1IN54_V2_Init+0x22c>)
 800a9d4:	f7fa fcb2 	bl	800533c <timeout_reset>
 800a9d8:	e71f      	b.n	800a81a <EPD_1IN54_V2_Init+0x62>
 800a9da:	46c0      	nop			@ (mov r8, r8)
 800a9dc:	00000bb8 	.word	0x00000bb8
 800a9e0:	200000b0 	.word	0x200000b0
 800a9e4:	0800ef2c 	.word	0x0800ef2c

0800a9e8 <EPD_1IN54_V2_Init_Partial>:
/******************************************************************************
function :	Initialize the e-Paper register (Partial display)
parameter:
******************************************************************************/
void EPD_1IN54_V2_Init_Partial(void)
{
 800a9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    RST_L(); // DEV_Digital_Write(EPD_RST_PIN, 0);
 800a9ea:	2380      	movs	r3, #128	@ 0x80
    RST_H(); // DEV_Digital_Write(EPD_RST_PIN, 1);
 800a9ec:	24a0      	movs	r4, #160	@ 0xa0
 800a9ee:	2580      	movs	r5, #128	@ 0x80
{
 800a9f0:	46c6      	mov	lr, r8
    RST_H(); // DEV_Digital_Write(EPD_RST_PIN, 1);
 800a9f2:	05e4      	lsls	r4, r4, #23
 800a9f4:	012d      	lsls	r5, r5, #4
    RST_L(); // DEV_Digital_Write(EPD_RST_PIN, 0);
 800a9f6:	051b      	lsls	r3, r3, #20
{
 800a9f8:	b500      	push	{lr}
    HAL_Delay(2);
 800a9fa:	2002      	movs	r0, #2
    RST_H(); // DEV_Digital_Write(EPD_RST_PIN, 1);
 800a9fc:	61a5      	str	r5, [r4, #24]
    RST_L(); // DEV_Digital_Write(EPD_RST_PIN, 0);
 800a9fe:	61a3      	str	r3, [r4, #24]
    HAL_Delay(2);
 800aa00:	f7fc fc9a 	bl	8007338 <HAL_Delay>
    RST_H(); // DEV_Digital_Write(EPD_RST_PIN, 1);
 800aa04:	61a5      	str	r5, [r4, #24]
    uint32_t time1 = HAL_GetTick();
 800aa06:	f7fc fc91 	bl	800732c <HAL_GetTick>
 800aa0a:	0005      	movs	r5, r0
        if ((HAL_GetTick() - time1) > timeout_value)
 800aa0c:	4f4c      	ldr	r7, [pc, #304]	@ (800ab40 <EPD_1IN54_V2_Init_Partial+0x158>)
    while (GPIOA->IDR & 0b0000001000000000)
 800aa0e:	2680      	movs	r6, #128	@ 0x80
 800aa10:	00b6      	lsls	r6, r6, #2
 800aa12:	e005      	b.n	800aa20 <EPD_1IN54_V2_Init_Partial+0x38>
        if ((HAL_GetTick() - time1) > timeout_value)
 800aa14:	f7fc fc8a 	bl	800732c <HAL_GetTick>
 800aa18:	1b40      	subs	r0, r0, r5
 800aa1a:	42b8      	cmp	r0, r7
 800aa1c:	d900      	bls.n	800aa20 <EPD_1IN54_V2_Init_Partial+0x38>
 800aa1e:	e085      	b.n	800ab2c <EPD_1IN54_V2_Init_Partial+0x144>
    while (GPIOA->IDR & 0b0000001000000000)
 800aa20:	6923      	ldr	r3, [r4, #16]
 800aa22:	4233      	tst	r3, r6
 800aa24:	d1f6      	bne.n	800aa14 <EPD_1IN54_V2_Init_Partial+0x2c>
#if (USE_TIME_PROFILING == 1)
    uint32_t tmp = DWT->CYCCNT - startTick;
    printf("####  EPD_1IN54_V2_Init_Partial-1: %d\n", (int)(tmp * 0.0000625));
#endif /* USE_TIME_PROFILING */

    EPD_1IN54_V2_SetLut(WF_PARTIAL_1IN54_0);
 800aa26:	4847      	ldr	r0, [pc, #284]	@ (800ab44 <EPD_1IN54_V2_Init_Partial+0x15c>)
 800aa28:	f7ff fdf2 	bl	800a610 <EPD_1IN54_V2_SetLut>
    DC_L();
 800aa2c:	2380      	movs	r3, #128	@ 0x80
    CS_L();
 800aa2e:	2680      	movs	r6, #128	@ 0x80
    CS_H();
 800aa30:	2580      	movs	r5, #128	@ 0x80
    DC_H();
 800aa32:	2780      	movs	r7, #128	@ 0x80
    DC_L();
 800aa34:	045b      	lsls	r3, r3, #17
 800aa36:	4698      	mov	r8, r3
    CS_L();
 800aa38:	0576      	lsls	r6, r6, #21
    CS_H();
 800aa3a:	016d      	lsls	r5, r5, #5
    DC_L();
 800aa3c:	61a3      	str	r3, [r4, #24]
    DC_H();
 800aa3e:	007f      	lsls	r7, r7, #1
    CS_L();
 800aa40:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Reg);
 800aa42:	2037      	movs	r0, #55	@ 0x37
 800aa44:	f7ff fdb4 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800aa48:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800aa4a:	2000      	movs	r0, #0
    DC_H();
 800aa4c:	61a7      	str	r7, [r4, #24]
    CS_L();
 800aa4e:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800aa50:	f7ff fdae 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800aa54:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800aa56:	2000      	movs	r0, #0
    DC_H();
 800aa58:	61a7      	str	r7, [r4, #24]
    CS_L();
 800aa5a:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800aa5c:	f7ff fda8 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800aa60:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800aa62:	2000      	movs	r0, #0
    DC_H();
 800aa64:	61a7      	str	r7, [r4, #24]
    CS_L();
 800aa66:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800aa68:	f7ff fda2 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800aa6c:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800aa6e:	2000      	movs	r0, #0
    DC_H();
 800aa70:	61a7      	str	r7, [r4, #24]
    CS_L();
 800aa72:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800aa74:	f7ff fd9c 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800aa78:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800aa7a:	2000      	movs	r0, #0
    DC_H();
 800aa7c:	61a7      	str	r7, [r4, #24]
    CS_L();
 800aa7e:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800aa80:	f7ff fd96 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800aa84:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800aa86:	2040      	movs	r0, #64	@ 0x40
    DC_H();
 800aa88:	61a7      	str	r7, [r4, #24]
    CS_L();
 800aa8a:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800aa8c:	f7ff fd90 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800aa90:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800aa92:	2000      	movs	r0, #0
    DC_H();
 800aa94:	61a7      	str	r7, [r4, #24]
    CS_L();
 800aa96:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800aa98:	f7ff fd8a 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800aa9c:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800aa9e:	2000      	movs	r0, #0
    DC_H();
 800aaa0:	61a7      	str	r7, [r4, #24]
    CS_L();
 800aaa2:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800aaa4:	f7ff fd84 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800aaa8:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800aaaa:	2000      	movs	r0, #0
    DC_H();
 800aaac:	61a7      	str	r7, [r4, #24]
    CS_L();
 800aaae:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800aab0:	f7ff fd7e 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800aab4:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800aab6:	2000      	movs	r0, #0
    DC_H();
 800aab8:	61a7      	str	r7, [r4, #24]
    CS_L();
 800aaba:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800aabc:	f7ff fd78 	bl	800a5b0 <DEV_SPI_WriteByte>
    DC_L();
 800aac0:	4643      	mov	r3, r8
    CS_H();
 800aac2:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Reg);
 800aac4:	203c      	movs	r0, #60	@ 0x3c
    DC_L();
 800aac6:	61a3      	str	r3, [r4, #24]
    CS_L();
 800aac8:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Reg);
 800aaca:	f7ff fd71 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800aace:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800aad0:	2080      	movs	r0, #128	@ 0x80
    DC_H();
 800aad2:	61a7      	str	r7, [r4, #24]
    CS_L();
 800aad4:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800aad6:	f7ff fd6b 	bl	800a5b0 <DEV_SPI_WriteByte>
    DC_L();
 800aada:	4643      	mov	r3, r8
    CS_H();
 800aadc:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Reg);
 800aade:	2022      	movs	r0, #34	@ 0x22
    DC_L();
 800aae0:	61a3      	str	r3, [r4, #24]
    CS_L();
 800aae2:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Reg);
 800aae4:	f7ff fd64 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800aae8:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800aaea:	20c0      	movs	r0, #192	@ 0xc0
    DC_H();
 800aaec:	61a7      	str	r7, [r4, #24]
    CS_L();
 800aaee:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800aaf0:	f7ff fd5e 	bl	800a5b0 <DEV_SPI_WriteByte>
    DC_L();
 800aaf4:	4643      	mov	r3, r8
    CS_H();
 800aaf6:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Reg);
 800aaf8:	2020      	movs	r0, #32
    DC_L();
 800aafa:	61a3      	str	r3, [r4, #24]
    CS_L();
 800aafc:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Reg);
 800aafe:	f7ff fd57 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800ab02:	61a5      	str	r5, [r4, #24]
    uint32_t time1 = HAL_GetTick();
 800ab04:	f7fc fc12 	bl	800732c <HAL_GetTick>
    while (GPIOA->IDR & 0b0000001000000000)
 800ab08:	26a0      	movs	r6, #160	@ 0xa0
    uint32_t time1 = HAL_GetTick();
 800ab0a:	0004      	movs	r4, r0
        if ((HAL_GetTick() - time1) > timeout_value)
 800ab0c:	4f0c      	ldr	r7, [pc, #48]	@ (800ab40 <EPD_1IN54_V2_Init_Partial+0x158>)
    while (GPIOA->IDR & 0b0000001000000000)
 800ab0e:	05f6      	lsls	r6, r6, #23
 800ab10:	2580      	movs	r5, #128	@ 0x80
 800ab12:	00ad      	lsls	r5, r5, #2
 800ab14:	e004      	b.n	800ab20 <EPD_1IN54_V2_Init_Partial+0x138>
        if ((HAL_GetTick() - time1) > timeout_value)
 800ab16:	f7fc fc09 	bl	800732c <HAL_GetTick>
 800ab1a:	1b00      	subs	r0, r0, r4
 800ab1c:	42b8      	cmp	r0, r7
 800ab1e:	d80a      	bhi.n	800ab36 <EPD_1IN54_V2_Init_Partial+0x14e>
    while (GPIOA->IDR & 0b0000001000000000)
 800ab20:	6933      	ldr	r3, [r6, #16]
 800ab22:	422b      	tst	r3, r5
 800ab24:	d1f7      	bne.n	800ab16 <EPD_1IN54_V2_Init_Partial+0x12e>
    EPD_1IN54_V2_ReadBusy();
#if (USE_TIME_PROFILING == 1)
    tmp = DWT->CYCCNT - startTick;
    printf("###  EPD_1IN54_V2_Init_Partial-2: %d\n", (int)(tmp * 0.0000625));
#endif /* USE_TIME_PROFILING */
}
 800ab26:	bc80      	pop	{r7}
 800ab28:	46b8      	mov	r8, r7
 800ab2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            timeout_reset(__func__, __LINE__);
 800ab2c:	218b      	movs	r1, #139	@ 0x8b
 800ab2e:	4806      	ldr	r0, [pc, #24]	@ (800ab48 <EPD_1IN54_V2_Init_Partial+0x160>)
 800ab30:	f7fa fc04 	bl	800533c <timeout_reset>
 800ab34:	e76b      	b.n	800aa0e <EPD_1IN54_V2_Init_Partial+0x26>
 800ab36:	218b      	movs	r1, #139	@ 0x8b
 800ab38:	4803      	ldr	r0, [pc, #12]	@ (800ab48 <EPD_1IN54_V2_Init_Partial+0x160>)
 800ab3a:	f7fa fbff 	bl	800533c <timeout_reset>
 800ab3e:	e7e7      	b.n	800ab10 <EPD_1IN54_V2_Init_Partial+0x128>
 800ab40:	00000bb8 	.word	0x00000bb8
 800ab44:	20000010 	.word	0x20000010
 800ab48:	0800ef2c 	.word	0x0800ef2c

0800ab4c <EPD_1IN54_V2_Display>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_1IN54_V2_Display(UBYTE *Image)
{
 800ab4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    DC_L();
 800ab4e:	2380      	movs	r3, #128	@ 0x80
 800ab50:	25a0      	movs	r5, #160	@ 0xa0
{
 800ab52:	46d6      	mov	lr, sl
 800ab54:	464f      	mov	r7, r9
 800ab56:	4646      	mov	r6, r8
    DC_L();
 800ab58:	05ed      	lsls	r5, r5, #23
 800ab5a:	045b      	lsls	r3, r3, #17
{
 800ab5c:	b5c0      	push	{r6, r7, lr}
    DC_L();
 800ab5e:	61ab      	str	r3, [r5, #24]
    CS_L();
 800ab60:	2380      	movs	r3, #128	@ 0x80
 800ab62:	055b      	lsls	r3, r3, #21
{
 800ab64:	0004      	movs	r4, r0
    CS_L();
 800ab66:	61ab      	str	r3, [r5, #24]
    DEV_SPI_WriteByte(Reg);
 800ab68:	2024      	movs	r0, #36	@ 0x24
    CS_L();
 800ab6a:	4698      	mov	r8, r3
    DEV_SPI_WriteByte(Reg);
 800ab6c:	f7ff fd20 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800ab70:	2380      	movs	r3, #128	@ 0x80
 800ab72:	015b      	lsls	r3, r3, #5
 800ab74:	61ab      	str	r3, [r5, #24]
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0) ? (EPD_1IN54_V2_WIDTH / 8) : (EPD_1IN54_V2_WIDTH / 8 + 1);
    Height = EPD_1IN54_V2_HEIGHT;

    UDOUBLE Addr = 0;
    EPD_1IN54_V2_SendCommand(0x24);
    for (UWORD j = 0; j < Height; j++)
 800ab76:	4b27      	ldr	r3, [pc, #156]	@ (800ac14 <EPD_1IN54_V2_Display+0xc8>)
 800ab78:	0027      	movs	r7, r4
 800ab7a:	469a      	mov	sl, r3
    DC_H();
 800ab7c:	2380      	movs	r3, #128	@ 0x80
 800ab7e:	005b      	lsls	r3, r3, #1
 800ab80:	4699      	mov	r9, r3
 800ab82:	3719      	adds	r7, #25
 800ab84:	44a2      	add	sl, r4
    {
        for (UWORD i = 0; i < Width; i++)
 800ab86:	003c      	movs	r4, r7
 800ab88:	3c19      	subs	r4, #25
    DC_H();
 800ab8a:	464b      	mov	r3, r9
        {
            Addr = i + j * Width;
            EPD_1IN54_V2_SendData(Image[Addr]);
 800ab8c:	7820      	ldrb	r0, [r4, #0]
    CS_H();
 800ab8e:	2680      	movs	r6, #128	@ 0x80
    DC_H();
 800ab90:	61ab      	str	r3, [r5, #24]
    CS_L();
 800ab92:	4643      	mov	r3, r8
    CS_H();
 800ab94:	0176      	lsls	r6, r6, #5
    CS_L();
 800ab96:	61ab      	str	r3, [r5, #24]
        for (UWORD i = 0; i < Width; i++)
 800ab98:	3401      	adds	r4, #1
    DEV_SPI_WriteByte(Data);
 800ab9a:	f7ff fd09 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800ab9e:	61ae      	str	r6, [r5, #24]
        for (UWORD i = 0; i < Width; i++)
 800aba0:	42bc      	cmp	r4, r7
 800aba2:	d1f2      	bne.n	800ab8a <EPD_1IN54_V2_Display+0x3e>
    for (UWORD j = 0; j < Height; j++)
 800aba4:	3419      	adds	r4, #25
 800aba6:	0027      	movs	r7, r4
 800aba8:	4554      	cmp	r4, sl
 800abaa:	d1ec      	bne.n	800ab86 <EPD_1IN54_V2_Display+0x3a>
    DC_L();
 800abac:	2480      	movs	r4, #128	@ 0x80
    CS_L();
 800abae:	4643      	mov	r3, r8
    DC_L();
 800abb0:	0464      	lsls	r4, r4, #17
 800abb2:	61ac      	str	r4, [r5, #24]
    DEV_SPI_WriteByte(Reg);
 800abb4:	2022      	movs	r0, #34	@ 0x22
    CS_L();
 800abb6:	61ab      	str	r3, [r5, #24]
    DEV_SPI_WriteByte(Reg);
 800abb8:	f7ff fcfa 	bl	800a5b0 <DEV_SPI_WriteByte>
    DC_H();
 800abbc:	464b      	mov	r3, r9
    CS_H();
 800abbe:	61ae      	str	r6, [r5, #24]
    DC_H();
 800abc0:	61ab      	str	r3, [r5, #24]
    CS_L();
 800abc2:	4643      	mov	r3, r8
    DEV_SPI_WriteByte(Data);
 800abc4:	20c7      	movs	r0, #199	@ 0xc7
    CS_L();
 800abc6:	61ab      	str	r3, [r5, #24]
    DEV_SPI_WriteByte(Data);
 800abc8:	f7ff fcf2 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_L();
 800abcc:	4643      	mov	r3, r8
    CS_H();
 800abce:	61ae      	str	r6, [r5, #24]
    DEV_SPI_WriteByte(Reg);
 800abd0:	2020      	movs	r0, #32
    DC_L();
 800abd2:	61ac      	str	r4, [r5, #24]
    CS_L();
 800abd4:	61ab      	str	r3, [r5, #24]
    DEV_SPI_WriteByte(Reg);
 800abd6:	f7ff fceb 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800abda:	61ae      	str	r6, [r5, #24]
    uint32_t time1 = HAL_GetTick();
 800abdc:	f7fc fba6 	bl	800732c <HAL_GetTick>
    while (GPIOA->IDR & 0b0000001000000000)
 800abe0:	25a0      	movs	r5, #160	@ 0xa0
    uint32_t time1 = HAL_GetTick();
 800abe2:	0004      	movs	r4, r0
        if ((HAL_GetTick() - time1) > timeout_value)
 800abe4:	4f0c      	ldr	r7, [pc, #48]	@ (800ac18 <EPD_1IN54_V2_Display+0xcc>)
    while (GPIOA->IDR & 0b0000001000000000)
 800abe6:	05ed      	lsls	r5, r5, #23
 800abe8:	2680      	movs	r6, #128	@ 0x80
 800abea:	00b6      	lsls	r6, r6, #2
 800abec:	e004      	b.n	800abf8 <EPD_1IN54_V2_Display+0xac>
        if ((HAL_GetTick() - time1) > timeout_value)
 800abee:	f7fc fb9d 	bl	800732c <HAL_GetTick>
 800abf2:	1b00      	subs	r0, r0, r4
 800abf4:	42b8      	cmp	r0, r7
 800abf6:	d807      	bhi.n	800ac08 <EPD_1IN54_V2_Display+0xbc>
    while (GPIOA->IDR & 0b0000001000000000)
 800abf8:	692b      	ldr	r3, [r5, #16]
 800abfa:	4233      	tst	r3, r6
 800abfc:	d1f7      	bne.n	800abee <EPD_1IN54_V2_Display+0xa2>
        }
    }
    EPD_1IN54_V2_TurnOnDisplay();
}
 800abfe:	bce0      	pop	{r5, r6, r7}
 800ac00:	46ba      	mov	sl, r7
 800ac02:	46b1      	mov	r9, r6
 800ac04:	46a8      	mov	r8, r5
 800ac06:	bdf0      	pop	{r4, r5, r6, r7, pc}
            timeout_reset(__func__, __LINE__);
 800ac08:	218b      	movs	r1, #139	@ 0x8b
 800ac0a:	4804      	ldr	r0, [pc, #16]	@ (800ac1c <EPD_1IN54_V2_Display+0xd0>)
 800ac0c:	f7fa fb96 	bl	800533c <timeout_reset>
 800ac10:	e7ea      	b.n	800abe8 <EPD_1IN54_V2_Display+0x9c>
 800ac12:	46c0      	nop			@ (mov r8, r8)
 800ac14:	000013a1 	.word	0x000013a1
 800ac18:	00000bb8 	.word	0x00000bb8
 800ac1c:	0800ef2c 	.word	0x0800ef2c

0800ac20 <EPD_1IN54_V2_DisplayPartBaseImage>:
function :	 The image of the previous frame must be uploaded, otherwise the
                 first few seconds will display an exception.
parameter:
******************************************************************************/
void EPD_1IN54_V2_DisplayPartBaseImage(UBYTE *Image)
{
 800ac20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac22:	46de      	mov	lr, fp
 800ac24:	4657      	mov	r7, sl
 800ac26:	4645      	mov	r5, r8
 800ac28:	464e      	mov	r6, r9
    DC_L();
 800ac2a:	2380      	movs	r3, #128	@ 0x80
{
 800ac2c:	b5e0      	push	{r5, r6, r7, lr}
    DC_L();
 800ac2e:	25a0      	movs	r5, #160	@ 0xa0
 800ac30:	045b      	lsls	r3, r3, #17
 800ac32:	05ed      	lsls	r5, r5, #23
 800ac34:	61ab      	str	r3, [r5, #24]
    CS_L();
 800ac36:	2380      	movs	r3, #128	@ 0x80
 800ac38:	055b      	lsls	r3, r3, #21
{
 800ac3a:	0004      	movs	r4, r0
    CS_L();
 800ac3c:	61ab      	str	r3, [r5, #24]
    DEV_SPI_WriteByte(Reg);
 800ac3e:	2024      	movs	r0, #36	@ 0x24
    CS_L();
 800ac40:	469a      	mov	sl, r3
    DEV_SPI_WriteByte(Reg);
 800ac42:	f7ff fcb5 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800ac46:	2380      	movs	r3, #128	@ 0x80
 800ac48:	015b      	lsls	r3, r3, #5
 800ac4a:	61ab      	str	r3, [r5, #24]
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0) ? (EPD_1IN54_V2_WIDTH / 8) : (EPD_1IN54_V2_WIDTH / 8 + 1);
    Height = EPD_1IN54_V2_HEIGHT;

    UDOUBLE Addr = 0;
    EPD_1IN54_V2_SendCommand(0x24);
    for (UWORD j = 0; j < Height; j++)
 800ac4c:	4b22      	ldr	r3, [pc, #136]	@ (800acd8 <EPD_1IN54_V2_DisplayPartBaseImage+0xb8>)
 800ac4e:	0027      	movs	r7, r4
 800ac50:	4698      	mov	r8, r3
    DC_H();
 800ac52:	2380      	movs	r3, #128	@ 0x80
 800ac54:	3719      	adds	r7, #25
 800ac56:	005b      	lsls	r3, r3, #1
    CS_H();
 800ac58:	46b9      	mov	r9, r7
    DC_H();
 800ac5a:	469b      	mov	fp, r3
 800ac5c:	44a0      	add	r8, r4
    {
        for (UWORD i = 0; i < Width; i++)
 800ac5e:	464c      	mov	r4, r9
 800ac60:	3c19      	subs	r4, #25
    DC_H();
 800ac62:	465b      	mov	r3, fp
        {
            Addr = i + j * Width;
            EPD_1IN54_V2_SendData(Image[Addr]);
 800ac64:	7820      	ldrb	r0, [r4, #0]
    CS_H();
 800ac66:	2680      	movs	r6, #128	@ 0x80
    DC_H();
 800ac68:	61ab      	str	r3, [r5, #24]
    CS_L();
 800ac6a:	4653      	mov	r3, sl
    CS_H();
 800ac6c:	0176      	lsls	r6, r6, #5
    CS_L();
 800ac6e:	61ab      	str	r3, [r5, #24]
        for (UWORD i = 0; i < Width; i++)
 800ac70:	3401      	adds	r4, #1
    DEV_SPI_WriteByte(Data);
 800ac72:	f7ff fc9d 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800ac76:	61ae      	str	r6, [r5, #24]
        for (UWORD i = 0; i < Width; i++)
 800ac78:	454c      	cmp	r4, r9
 800ac7a:	d1f2      	bne.n	800ac62 <EPD_1IN54_V2_DisplayPartBaseImage+0x42>
    for (UWORD j = 0; j < Height; j++)
 800ac7c:	2319      	movs	r3, #25
 800ac7e:	4699      	mov	r9, r3
 800ac80:	44a1      	add	r9, r4
 800ac82:	45c1      	cmp	r9, r8
 800ac84:	d1eb      	bne.n	800ac5e <EPD_1IN54_V2_DisplayPartBaseImage+0x3e>
    DC_L();
 800ac86:	2380      	movs	r3, #128	@ 0x80
 800ac88:	045b      	lsls	r3, r3, #17
 800ac8a:	61ab      	str	r3, [r5, #24]
    CS_L();
 800ac8c:	4653      	mov	r3, sl
    DEV_SPI_WriteByte(Reg);
 800ac8e:	2026      	movs	r0, #38	@ 0x26
    CS_L();
 800ac90:	61ab      	str	r3, [r5, #24]
    DEV_SPI_WriteByte(Reg);
 800ac92:	f7ff fc8d 	bl	800a5b0 <DEV_SPI_WriteByte>
    DC_H();
 800ac96:	2380      	movs	r3, #128	@ 0x80
    CS_H();
 800ac98:	61ae      	str	r6, [r5, #24]
    DC_H();
 800ac9a:	005b      	lsls	r3, r3, #1
 800ac9c:	25a0      	movs	r5, #160	@ 0xa0
    CS_L();
 800ac9e:	2680      	movs	r6, #128	@ 0x80
    DC_H();
 800aca0:	4699      	mov	r9, r3
 800aca2:	05ed      	lsls	r5, r5, #23
    CS_L();
 800aca4:	0576      	lsls	r6, r6, #21
        }
    }
    EPD_1IN54_V2_SendCommand(0x26);
    for (UWORD j = 0; j < Height; j++)
    {
        for (UWORD i = 0; i < Width; i++)
 800aca6:	003c      	movs	r4, r7
 800aca8:	3c19      	subs	r4, #25
    DC_H();
 800acaa:	464b      	mov	r3, r9
        {
            Addr = i + j * Width;
            EPD_1IN54_V2_SendData(Image[Addr]);
 800acac:	7820      	ldrb	r0, [r4, #0]
    DC_H();
 800acae:	61ab      	str	r3, [r5, #24]
    CS_L();
 800acb0:	61ae      	str	r6, [r5, #24]
    DEV_SPI_WriteByte(Data);
 800acb2:	f7ff fc7d 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800acb6:	2380      	movs	r3, #128	@ 0x80
        for (UWORD i = 0; i < Width; i++)
 800acb8:	3401      	adds	r4, #1
    CS_H();
 800acba:	015b      	lsls	r3, r3, #5
 800acbc:	61ab      	str	r3, [r5, #24]
        for (UWORD i = 0; i < Width; i++)
 800acbe:	42a7      	cmp	r7, r4
 800acc0:	d1f3      	bne.n	800acaa <EPD_1IN54_V2_DisplayPartBaseImage+0x8a>
    for (UWORD j = 0; j < Height; j++)
 800acc2:	3719      	adds	r7, #25
 800acc4:	4547      	cmp	r7, r8
 800acc6:	d1ee      	bne.n	800aca6 <EPD_1IN54_V2_DisplayPartBaseImage+0x86>
        }
    }
    EPD_1IN54_V2_TurnOnDisplayPart();
 800acc8:	f7ff fd2c 	bl	800a724 <EPD_1IN54_V2_TurnOnDisplayPart>
}
 800accc:	bcf0      	pop	{r4, r5, r6, r7}
 800acce:	46bb      	mov	fp, r7
 800acd0:	46b2      	mov	sl, r6
 800acd2:	46a9      	mov	r9, r5
 800acd4:	46a0      	mov	r8, r4
 800acd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acd8:	000013a1 	.word	0x000013a1

0800acdc <EPD_1IN54_V2_DisplayPart>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_1IN54_V2_DisplayPart(UBYTE *Image)
{
 800acdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    DC_L();
 800acde:	2380      	movs	r3, #128	@ 0x80
 800ace0:	25a0      	movs	r5, #160	@ 0xa0
{
 800ace2:	46d6      	mov	lr, sl
 800ace4:	464f      	mov	r7, r9
 800ace6:	4646      	mov	r6, r8
    DC_L();
 800ace8:	05ed      	lsls	r5, r5, #23
 800acea:	045b      	lsls	r3, r3, #17
{
 800acec:	b5c0      	push	{r6, r7, lr}
    DC_L();
 800acee:	61ab      	str	r3, [r5, #24]
    CS_L();
 800acf0:	2380      	movs	r3, #128	@ 0x80
 800acf2:	055b      	lsls	r3, r3, #21
{
 800acf4:	0004      	movs	r4, r0
    CS_L();
 800acf6:	61ab      	str	r3, [r5, #24]
    DEV_SPI_WriteByte(Reg);
 800acf8:	2024      	movs	r0, #36	@ 0x24
    CS_L();
 800acfa:	4698      	mov	r8, r3
    DEV_SPI_WriteByte(Reg);
 800acfc:	f7ff fc58 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800ad00:	2380      	movs	r3, #128	@ 0x80
 800ad02:	015b      	lsls	r3, r3, #5
 800ad04:	61ab      	str	r3, [r5, #24]
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0) ? (EPD_1IN54_V2_WIDTH / 8) : (EPD_1IN54_V2_WIDTH / 8 + 1);
    Height = EPD_1IN54_V2_HEIGHT;

    UDOUBLE Addr = 0;
    EPD_1IN54_V2_SendCommand(0x24);
    for (UWORD j = 0; j < Height; j++)
 800ad06:	4b2f      	ldr	r3, [pc, #188]	@ (800adc4 <EPD_1IN54_V2_DisplayPart+0xe8>)
 800ad08:	0027      	movs	r7, r4
 800ad0a:	469a      	mov	sl, r3
    DC_H();
 800ad0c:	2380      	movs	r3, #128	@ 0x80
 800ad0e:	005b      	lsls	r3, r3, #1
 800ad10:	4699      	mov	r9, r3
 800ad12:	3719      	adds	r7, #25
 800ad14:	44a2      	add	sl, r4
    {
        for (UWORD i = 0; i < Width; i++)
 800ad16:	003c      	movs	r4, r7
 800ad18:	3c19      	subs	r4, #25
    DC_H();
 800ad1a:	464b      	mov	r3, r9
        {
            Addr = i + j * Width;
            EPD_1IN54_V2_SendData(Image[Addr]);
 800ad1c:	7820      	ldrb	r0, [r4, #0]
    CS_H();
 800ad1e:	2680      	movs	r6, #128	@ 0x80
    DC_H();
 800ad20:	61ab      	str	r3, [r5, #24]
    CS_L();
 800ad22:	4643      	mov	r3, r8
    CS_H();
 800ad24:	0176      	lsls	r6, r6, #5
    CS_L();
 800ad26:	61ab      	str	r3, [r5, #24]
        for (UWORD i = 0; i < Width; i++)
 800ad28:	3401      	adds	r4, #1
    DEV_SPI_WriteByte(Data);
 800ad2a:	f7ff fc41 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800ad2e:	61ae      	str	r6, [r5, #24]
        for (UWORD i = 0; i < Width; i++)
 800ad30:	42bc      	cmp	r4, r7
 800ad32:	d1f2      	bne.n	800ad1a <EPD_1IN54_V2_DisplayPart+0x3e>
    for (UWORD j = 0; j < Height; j++)
 800ad34:	3419      	adds	r4, #25
 800ad36:	0027      	movs	r7, r4
 800ad38:	4554      	cmp	r4, sl
 800ad3a:	d1ec      	bne.n	800ad16 <EPD_1IN54_V2_DisplayPart+0x3a>
    DC_L();
 800ad3c:	2480      	movs	r4, #128	@ 0x80
    CS_L();
 800ad3e:	4643      	mov	r3, r8
    DC_L();
 800ad40:	0464      	lsls	r4, r4, #17
 800ad42:	61ac      	str	r4, [r5, #24]
    DEV_SPI_WriteByte(Reg);
 800ad44:	2022      	movs	r0, #34	@ 0x22
    CS_L();
 800ad46:	61ab      	str	r3, [r5, #24]
    DEV_SPI_WriteByte(Reg);
 800ad48:	f7ff fc32 	bl	800a5b0 <DEV_SPI_WriteByte>
    DC_H();
 800ad4c:	464b      	mov	r3, r9
    CS_H();
 800ad4e:	61ae      	str	r6, [r5, #24]
    DC_H();
 800ad50:	61ab      	str	r3, [r5, #24]
    CS_L();
 800ad52:	4643      	mov	r3, r8
    DEV_SPI_WriteByte(Data);
 800ad54:	20cf      	movs	r0, #207	@ 0xcf
    CS_L();
 800ad56:	61ab      	str	r3, [r5, #24]
    DEV_SPI_WriteByte(Data);
 800ad58:	f7ff fc2a 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_L();
 800ad5c:	4643      	mov	r3, r8
    CS_H();
 800ad5e:	61ae      	str	r6, [r5, #24]
    DEV_SPI_WriteByte(Reg);
 800ad60:	2020      	movs	r0, #32
    DC_L();
 800ad62:	61ac      	str	r4, [r5, #24]
    CS_L();
 800ad64:	61ab      	str	r3, [r5, #24]
    DEV_SPI_WriteByte(Reg);
 800ad66:	f7ff fc23 	bl	800a5b0 <DEV_SPI_WriteByte>
    PB6_H();
 800ad6a:	2340      	movs	r3, #64	@ 0x40
 800ad6c:	4c16      	ldr	r4, [pc, #88]	@ (800adc8 <EPD_1IN54_V2_DisplayPart+0xec>)
    CS_H();
 800ad6e:	61ae      	str	r6, [r5, #24]
    PB6_H();
 800ad70:	61a3      	str	r3, [r4, #24]
    PB7_H();
 800ad72:	3340      	adds	r3, #64	@ 0x40
 800ad74:	61a3      	str	r3, [r4, #24]
    enter_stop2(2330, LL_RTC_WAKEUPCLOCK_DIV_8);
 800ad76:	2101      	movs	r1, #1
 800ad78:	4814      	ldr	r0, [pc, #80]	@ (800adcc <EPD_1IN54_V2_DisplayPart+0xf0>)
 800ad7a:	f7fa fa4f 	bl	800521c <enter_stop2>
    PB6_L();
 800ad7e:	2380      	movs	r3, #128	@ 0x80
 800ad80:	03db      	lsls	r3, r3, #15
 800ad82:	61a3      	str	r3, [r4, #24]
    uint32_t time1 = HAL_GetTick();
 800ad84:	f7fc fad2 	bl	800732c <HAL_GetTick>
    while (GPIOA->IDR & 0b0000001000000000)
 800ad88:	25a0      	movs	r5, #160	@ 0xa0
    uint32_t time1 = HAL_GetTick();
 800ad8a:	0004      	movs	r4, r0
        if ((HAL_GetTick() - time1) > timeout_value)
 800ad8c:	4f10      	ldr	r7, [pc, #64]	@ (800add0 <EPD_1IN54_V2_DisplayPart+0xf4>)
    while (GPIOA->IDR & 0b0000001000000000)
 800ad8e:	05ed      	lsls	r5, r5, #23
 800ad90:	2680      	movs	r6, #128	@ 0x80
 800ad92:	00b6      	lsls	r6, r6, #2
 800ad94:	e004      	b.n	800ada0 <EPD_1IN54_V2_DisplayPart+0xc4>
        if ((HAL_GetTick() - time1) > timeout_value)
 800ad96:	f7fc fac9 	bl	800732c <HAL_GetTick>
 800ad9a:	1b00      	subs	r0, r0, r4
 800ad9c:	42b8      	cmp	r0, r7
 800ad9e:	d80b      	bhi.n	800adb8 <EPD_1IN54_V2_DisplayPart+0xdc>
    while (GPIOA->IDR & 0b0000001000000000)
 800ada0:	692b      	ldr	r3, [r5, #16]
 800ada2:	4233      	tst	r3, r6
 800ada4:	d1f7      	bne.n	800ad96 <EPD_1IN54_V2_DisplayPart+0xba>
    PB7_L();
 800ada6:	2280      	movs	r2, #128	@ 0x80
 800ada8:	4b07      	ldr	r3, [pc, #28]	@ (800adc8 <EPD_1IN54_V2_DisplayPart+0xec>)
 800adaa:	0412      	lsls	r2, r2, #16
 800adac:	619a      	str	r2, [r3, #24]
        }
    }

    EPD_1IN54_V2_TurnOnDisplayPart();
}
 800adae:	bce0      	pop	{r5, r6, r7}
 800adb0:	46ba      	mov	sl, r7
 800adb2:	46b1      	mov	r9, r6
 800adb4:	46a8      	mov	r8, r5
 800adb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            timeout_reset(__func__, __LINE__);
 800adb8:	218b      	movs	r1, #139	@ 0x8b
 800adba:	4806      	ldr	r0, [pc, #24]	@ (800add4 <EPD_1IN54_V2_DisplayPart+0xf8>)
 800adbc:	f7fa fabe 	bl	800533c <timeout_reset>
 800adc0:	e7e6      	b.n	800ad90 <EPD_1IN54_V2_DisplayPart+0xb4>
 800adc2:	46c0      	nop			@ (mov r8, r8)
 800adc4:	000013a1 	.word	0x000013a1
 800adc8:	50000400 	.word	0x50000400
 800adcc:	0000091a 	.word	0x0000091a
 800add0:	00000bb8 	.word	0x00000bb8
 800add4:	0800ef2c 	.word	0x0800ef2c

0800add8 <EPD_1IN54_V2_Sleep>:
/******************************************************************************
function :	Enter sleep mode
parameter:
******************************************************************************/
void EPD_1IN54_V2_Sleep(void)
{
 800add8:	b570      	push	{r4, r5, r6, lr}
    DC_L();
 800adda:	2380      	movs	r3, #128	@ 0x80
 800addc:	24a0      	movs	r4, #160	@ 0xa0
    CS_L();
 800adde:	2680      	movs	r6, #128	@ 0x80
    DC_L();
 800ade0:	05e4      	lsls	r4, r4, #23
    CS_L();
 800ade2:	0576      	lsls	r6, r6, #21
    DC_L();
 800ade4:	045b      	lsls	r3, r3, #17
 800ade6:	61a3      	str	r3, [r4, #24]
    DEV_SPI_WriteByte(Reg);
 800ade8:	2010      	movs	r0, #16
    CS_L();
 800adea:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Reg);
 800adec:	f7ff fbe0 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800adf0:	2580      	movs	r5, #128	@ 0x80
    DC_H();
 800adf2:	2380      	movs	r3, #128	@ 0x80
    CS_H();
 800adf4:	016d      	lsls	r5, r5, #5
    DC_H();
 800adf6:	005b      	lsls	r3, r3, #1
    CS_H();
 800adf8:	61a5      	str	r5, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800adfa:	2001      	movs	r0, #1
    DC_H();
 800adfc:	61a3      	str	r3, [r4, #24]
    CS_L();
 800adfe:	61a6      	str	r6, [r4, #24]
    DEV_SPI_WriteByte(Data);
 800ae00:	f7ff fbd6 	bl	800a5b0 <DEV_SPI_WriteByte>
    CS_H();
 800ae04:	61a5      	str	r5, [r4, #24]
    EPD_1IN54_V2_SendCommand(0x10); // enter deep sleep
    EPD_1IN54_V2_SendData(0x01);
    //    DEV_Delay_ms(100);
}
 800ae06:	bd70      	pop	{r4, r5, r6, pc}

0800ae08 <Paint_SetPixel.part.0>:
parameter:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
 800ae08:	b570      	push	{r4, r5, r6, lr}
        DE_BUG("Exceeding display boundaries\r\n");
        return;
    }
    UWORD X, Y;

    switch (Paint.Rotate)
 800ae0a:	4d44      	ldr	r5, [pc, #272]	@ (800af1c <Paint_SetPixel.part.0+0x114>)
 800ae0c:	89eb      	ldrh	r3, [r5, #14]
 800ae0e:	2bb4      	cmp	r3, #180	@ 0xb4
 800ae10:	d042      	beq.n	800ae98 <Paint_SetPixel.part.0+0x90>
 800ae12:	d82d      	bhi.n	800ae70 <Paint_SetPixel.part.0+0x68>
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d006      	beq.n	800ae26 <Paint_SetPixel.part.0+0x1e>
 800ae18:	2b5a      	cmp	r3, #90	@ 0x5a
 800ae1a:	d11b      	bne.n	800ae54 <Paint_SetPixel.part.0+0x4c>
    case 0:
        X = Xpoint;
        Y = Ypoint;
        break;
    case 90:
        X = Paint.WidthMemory - Ypoint - 1;
 800ae1c:	892b      	ldrh	r3, [r5, #8]
 800ae1e:	3b01      	subs	r3, #1
 800ae20:	1a5b      	subs	r3, r3, r1
        Y = Xpoint;
 800ae22:	0001      	movs	r1, r0
        X = Paint.WidthMemory - Ypoint - 1;
 800ae24:	b298      	uxth	r0, r3
        break;
    default:
        return;
    }

    switch (Paint.Mirror)
 800ae26:	8a2b      	ldrh	r3, [r5, #16]
 800ae28:	2b02      	cmp	r3, #2
 800ae2a:	d02d      	beq.n	800ae88 <Paint_SetPixel.part.0+0x80>
 800ae2c:	2b02      	cmp	r3, #2
 800ae2e:	d812      	bhi.n	800ae56 <Paint_SetPixel.part.0+0x4e>
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d02d      	beq.n	800ae90 <Paint_SetPixel.part.0+0x88>
    {
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 800ae34:	892b      	ldrh	r3, [r5, #8]
 800ae36:	1e5c      	subs	r4, r3, #1
 800ae38:	1a20      	subs	r0, r4, r0
 800ae3a:	b280      	uxth	r0, r0
        break;
    default:
        return;
    }

    if (X > Paint.WidthMemory || Y > Paint.HeightMemory)
 800ae3c:	4283      	cmp	r3, r0
 800ae3e:	d309      	bcc.n	800ae54 <Paint_SetPixel.part.0+0x4c>
 800ae40:	896b      	ldrh	r3, [r5, #10]
 800ae42:	428b      	cmp	r3, r1
 800ae44:	d306      	bcc.n	800ae54 <Paint_SetPixel.part.0+0x4c>
    {
        DE_BUG("Exceeding display boundaries\r\n");
        return;
    }

    if (Paint.Scale == 2)
 800ae46:	8aeb      	ldrh	r3, [r5, #22]
 800ae48:	2b02      	cmp	r3, #2
 800ae4a:	d02e      	beq.n	800aeaa <Paint_SetPixel.part.0+0xa2>
        if (Color == BLACK)
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
    }
    else if (Paint.Scale == 4)
 800ae4c:	2b04      	cmp	r3, #4
 800ae4e:	d03d      	beq.n	800aecc <Paint_SetPixel.part.0+0xc4>
        UBYTE Rdata = Paint.Image[Addr];

        Rdata = Rdata & (~(0xC0 >> ((X % 4) * 2)));
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4) * 2));
    }
    else if (Paint.Scale == 7)
 800ae50:	2b07      	cmp	r3, #7
 800ae52:	d051      	beq.n	800aef8 <Paint_SetPixel.part.0+0xf0>
        UBYTE Rdata = Paint.Image[Addr];
        Rdata = Rdata & (~(0xF0 >> ((X % 2) * 4))); // Clear first, then set value
        Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2) * 4));
        // printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
    }
}
 800ae54:	bd70      	pop	{r4, r5, r6, pc}
    switch (Paint.Mirror)
 800ae56:	2b03      	cmp	r3, #3
 800ae58:	d1fc      	bne.n	800ae54 <Paint_SetPixel.part.0+0x4c>
        X = Paint.WidthMemory - X - 1;
 800ae5a:	892b      	ldrh	r3, [r5, #8]
 800ae5c:	1e5c      	subs	r4, r3, #1
 800ae5e:	1a20      	subs	r0, r4, r0
        Y = Paint.HeightMemory - Y - 1;
 800ae60:	896c      	ldrh	r4, [r5, #10]
        X = Paint.WidthMemory - X - 1;
 800ae62:	b280      	uxth	r0, r0
        Y = Paint.HeightMemory - Y - 1;
 800ae64:	3c01      	subs	r4, #1
 800ae66:	1a61      	subs	r1, r4, r1
 800ae68:	b289      	uxth	r1, r1
    if (X > Paint.WidthMemory || Y > Paint.HeightMemory)
 800ae6a:	4283      	cmp	r3, r0
 800ae6c:	d2e8      	bcs.n	800ae40 <Paint_SetPixel.part.0+0x38>
 800ae6e:	e7f1      	b.n	800ae54 <Paint_SetPixel.part.0+0x4c>
    switch (Paint.Rotate)
 800ae70:	2487      	movs	r4, #135	@ 0x87
 800ae72:	0064      	lsls	r4, r4, #1
 800ae74:	42a3      	cmp	r3, r4
 800ae76:	d1ed      	bne.n	800ae54 <Paint_SetPixel.part.0+0x4c>
        Y = Paint.HeightMemory - Xpoint - 1;
 800ae78:	896b      	ldrh	r3, [r5, #10]
 800ae7a:	3b01      	subs	r3, #1
 800ae7c:	1a1b      	subs	r3, r3, r0
        X = Ypoint;
 800ae7e:	0008      	movs	r0, r1
        Y = Paint.HeightMemory - Xpoint - 1;
 800ae80:	b299      	uxth	r1, r3
    switch (Paint.Mirror)
 800ae82:	8a2b      	ldrh	r3, [r5, #16]
 800ae84:	2b02      	cmp	r3, #2
 800ae86:	d1d1      	bne.n	800ae2c <Paint_SetPixel.part.0+0x24>
        Y = Paint.HeightMemory - Y - 1;
 800ae88:	896b      	ldrh	r3, [r5, #10]
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	1a59      	subs	r1, r3, r1
 800ae8e:	b289      	uxth	r1, r1
        X = Paint.WidthMemory - Ypoint - 1;
 800ae90:	892b      	ldrh	r3, [r5, #8]
    if (X > Paint.WidthMemory || Y > Paint.HeightMemory)
 800ae92:	4283      	cmp	r3, r0
 800ae94:	d2d4      	bcs.n	800ae40 <Paint_SetPixel.part.0+0x38>
 800ae96:	e7dd      	b.n	800ae54 <Paint_SetPixel.part.0+0x4c>
        X = Paint.WidthMemory - Xpoint - 1;
 800ae98:	892b      	ldrh	r3, [r5, #8]
 800ae9a:	3b01      	subs	r3, #1
 800ae9c:	1a18      	subs	r0, r3, r0
        Y = Paint.HeightMemory - Ypoint - 1;
 800ae9e:	896b      	ldrh	r3, [r5, #10]
        X = Paint.WidthMemory - Xpoint - 1;
 800aea0:	b280      	uxth	r0, r0
        Y = Paint.HeightMemory - Ypoint - 1;
 800aea2:	3b01      	subs	r3, #1
 800aea4:	1a59      	subs	r1, r3, r1
 800aea6:	b289      	uxth	r1, r1
        break;
 800aea8:	e7bd      	b.n	800ae26 <Paint_SetPixel.part.0+0x1e>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 800aeaa:	8a6b      	ldrh	r3, [r5, #18]
 800aeac:	434b      	muls	r3, r1
 800aeae:	08c1      	lsrs	r1, r0, #3
 800aeb0:	b289      	uxth	r1, r1
 800aeb2:	185b      	adds	r3, r3, r1
        UBYTE Rdata = Paint.Image[Addr];
 800aeb4:	6829      	ldr	r1, [r5, #0]
 800aeb6:	18cc      	adds	r4, r1, r3
 800aeb8:	5ccb      	ldrb	r3, [r1, r3]
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 800aeba:	2107      	movs	r1, #7
 800aebc:	4008      	ands	r0, r1
 800aebe:	3179      	adds	r1, #121	@ 0x79
 800aec0:	4101      	asrs	r1, r0
        if (Color == BLACK)
 800aec2:	2a00      	cmp	r2, #0
 800aec4:	d115      	bne.n	800aef2 <Paint_SetPixel.part.0+0xea>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 800aec6:	438b      	bics	r3, r1
 800aec8:	7023      	strb	r3, [r4, #0]
 800aeca:	e7c3      	b.n	800ae54 <Paint_SetPixel.part.0+0x4c>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 800aecc:	8a6b      	ldrh	r3, [r5, #18]
        Rdata = Rdata & (~(0xC0 >> ((X % 4) * 2)));
 800aece:	26c0      	movs	r6, #192	@ 0xc0
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 800aed0:	4359      	muls	r1, r3
 800aed2:	0883      	lsrs	r3, r0, #2
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	18c9      	adds	r1, r1, r3
        Rdata = Rdata & (~(0xC0 >> ((X % 4) * 2)));
 800aed8:	2303      	movs	r3, #3
 800aeda:	4018      	ands	r0, r3
 800aedc:	0040      	lsls	r0, r0, #1
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4) * 2));
 800aede:	4013      	ands	r3, r2
        Rdata = Rdata & (~(0xC0 >> ((X % 4) * 2)));
 800aee0:	4106      	asrs	r6, r0
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4) * 2));
 800aee2:	019b      	lsls	r3, r3, #6
 800aee4:	4103      	asrs	r3, r0
        UBYTE Rdata = Paint.Image[Addr];
 800aee6:	682d      	ldr	r5, [r5, #0]
        Rdata = Rdata & (~(0xC0 >> ((X % 4) * 2)));
 800aee8:	5c6c      	ldrb	r4, [r5, r1]
 800aeea:	43b4      	bics	r4, r6
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4) * 2));
 800aeec:	4323      	orrs	r3, r4
 800aeee:	546b      	strb	r3, [r5, r1]
 800aef0:	e7b0      	b.n	800ae54 <Paint_SetPixel.part.0+0x4c>
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 800aef2:	430b      	orrs	r3, r1
 800aef4:	7023      	strb	r3, [r4, #0]
 800aef6:	e7ad      	b.n	800ae54 <Paint_SetPixel.part.0+0x4c>
        UDOUBLE Addr = X / 2 + Y * Paint.WidthByte;
 800aef8:	8a6b      	ldrh	r3, [r5, #18]
        Rdata = Rdata & (~(0xF0 >> ((X % 2) * 4))); // Clear first, then set value
 800aefa:	24f0      	movs	r4, #240	@ 0xf0
        UDOUBLE Addr = X / 2 + Y * Paint.WidthByte;
 800aefc:	4359      	muls	r1, r3
 800aefe:	0843      	lsrs	r3, r0, #1
 800af00:	b29b      	uxth	r3, r3
 800af02:	18c9      	adds	r1, r1, r3
        Rdata = Rdata & (~(0xF0 >> ((X % 2) * 4))); // Clear first, then set value
 800af04:	2301      	movs	r3, #1
 800af06:	4003      	ands	r3, r0
 800af08:	009b      	lsls	r3, r3, #2
 800af0a:	411c      	asrs	r4, r3
        Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2) * 4));
 800af0c:	0112      	lsls	r2, r2, #4
 800af0e:	411a      	asrs	r2, r3
        UBYTE Rdata = Paint.Image[Addr];
 800af10:	682d      	ldr	r5, [r5, #0]
        Rdata = Rdata & (~(0xF0 >> ((X % 2) * 4))); // Clear first, then set value
 800af12:	5c68      	ldrb	r0, [r5, r1]
 800af14:	43a0      	bics	r0, r4
        Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2) * 4));
 800af16:	4302      	orrs	r2, r0
 800af18:	546a      	strb	r2, [r5, r1]
 800af1a:	e79b      	b.n	800ae54 <Paint_SetPixel.part.0+0x4c>
 800af1c:	2000055c 	.word	0x2000055c

0800af20 <Paint_DrawChar.part.0.isra.0>:
    Acsii_Char       ：To display the English characters
    Font             ：A structure pointer that displays a character size
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
 800af20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af22:	4657      	mov	r7, sl
 800af24:	4645      	mov	r5, r8
 800af26:	46de      	mov	lr, fp
 800af28:	464e      	mov	r6, r9
 800af2a:	b5e0      	push	{r5, r6, r7, lr}
 800af2c:	b087      	sub	sp, #28
 800af2e:	9100      	str	r1, [sp, #0]
 800af30:	000c      	movs	r4, r1
 800af32:	a910      	add	r1, sp, #64	@ 0x40
 800af34:	9004      	str	r0, [sp, #16]
 800af36:	8808      	ldrh	r0, [r1, #0]
 800af38:	a911      	add	r1, sp, #68	@ 0x44
 800af3a:	9003      	str	r0, [sp, #12]
 800af3c:	8808      	ldrh	r0, [r1, #0]
 800af3e:	9001      	str	r0, [sp, #4]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
    {
        DE_BUG("Paint_DrawChar Input exceeds the normal display range\r\n");
        return;
    }
    uint32_t font_Width = (*Font).chars[Acsii_Char - ' '].image->width;
 800af40:	4844      	ldr	r0, [pc, #272]	@ (800b054 <Paint_DrawChar.part.0.isra.0+0x134>)
 800af42:	4684      	mov	ip, r0
 800af44:	4462      	add	r2, ip
 800af46:	00d2      	lsls	r2, r2, #3
 800af48:	189b      	adds	r3, r3, r2
 800af4a:	685a      	ldr	r2, [r3, #4]
 800af4c:	8893      	ldrh	r3, [r2, #4]
    uint32_t font_Height = (*Font).chars[Acsii_Char - ' '].image->height;

    //   uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
    const unsigned char *ptr = (*Font).chars[Acsii_Char - ' '].image->data;
 800af4e:	6817      	ldr	r7, [r2, #0]
    uint32_t font_Width = (*Font).chars[Acsii_Char - ' '].image->width;
 800af50:	4698      	mov	r8, r3
    uint32_t font_Height = (*Font).chars[Acsii_Char - ' '].image->height;
 800af52:	88d3      	ldrh	r3, [r2, #6]

    for (Page = 0; Page < font_Height; Page++)
 800af54:	2b00      	cmp	r3, #0
 800af56:	d075      	beq.n	800b044 <Paint_DrawChar.part.0.isra.0+0x124>
 800af58:	46a4      	mov	ip, r4
 800af5a:	2207      	movs	r2, #7
 800af5c:	4640      	mov	r0, r8
 800af5e:	4463      	add	r3, ip
 800af60:	b29b      	uxth	r3, r3
 800af62:	9302      	str	r3, [sp, #8]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800af64:	4b3c      	ldr	r3, [pc, #240]	@ (800b058 <Paint_DrawChar.part.0.isra.0+0x138>)
 800af66:	4010      	ands	r0, r2
 800af68:	4699      	mov	r9, r3
 800af6a:	9005      	str	r0, [sp, #20]
 800af6c:	e006      	b.n	800af7c <Paint_DrawChar.part.0.isra.0+0x5c>
    for (Page = 0; Page < font_Height; Page++)
 800af6e:	9c00      	ldr	r4, [sp, #0]
 800af70:	9a02      	ldr	r2, [sp, #8]
 800af72:	3401      	adds	r4, #1
 800af74:	b2a3      	uxth	r3, r4
 800af76:	9300      	str	r3, [sp, #0]
 800af78:	429a      	cmp	r2, r3
 800af7a:	d063      	beq.n	800b044 <Paint_DrawChar.part.0.isra.0+0x124>
    {
        for (Column = 0; Column < font_Width; Column++)
 800af7c:	4643      	mov	r3, r8
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d0f5      	beq.n	800af6e <Paint_DrawChar.part.0.isra.0+0x4e>
 800af82:	9b01      	ldr	r3, [sp, #4]
 800af84:	2500      	movs	r5, #0
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
 800af86:	9e04      	ldr	r6, [sp, #16]
 800af88:	2bff      	cmp	r3, #255	@ 0xff
 800af8a:	d02e      	beq.n	800afea <Paint_DrawChar.part.0.isra.0+0xca>
 800af8c:	2307      	movs	r3, #7
 800af8e:	469b      	mov	fp, r3
        {

            // To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background)
            { // this process is to speed up the scan
                if (*ptr & (0x80 >> (Column % 8)))
 800af90:	3379      	adds	r3, #121	@ 0x79
 800af92:	469a      	mov	sl, r3
 800af94:	e014      	b.n	800afc0 <Paint_DrawChar.part.0.isra.0+0xa0>
    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800af96:	428e      	cmp	r6, r1
 800af98:	d808      	bhi.n	800afac <Paint_DrawChar.part.0.isra.0+0x8c>
 800af9a:	464b      	mov	r3, r9
 800af9c:	9900      	ldr	r1, [sp, #0]
 800af9e:	88db      	ldrh	r3, [r3, #6]
 800afa0:	428b      	cmp	r3, r1
 800afa2:	d303      	bcc.n	800afac <Paint_DrawChar.part.0.isra.0+0x8c>
 800afa4:	0030      	movs	r0, r6
 800afa6:	9a01      	ldr	r2, [sp, #4]
 800afa8:	f7ff ff2e 	bl	800ae08 <Paint_SetPixel.part.0>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
                }
            }
            // One pixel is 8 bits
            if (Column % 8 == 7)
                ptr++;
 800afac:	3c07      	subs	r4, #7
 800afae:	4263      	negs	r3, r4
 800afb0:	415c      	adcs	r4, r3
        for (Column = 0; Column < font_Width; Column++)
 800afb2:	3501      	adds	r5, #1
 800afb4:	3601      	adds	r6, #1
 800afb6:	b2ad      	uxth	r5, r5
                ptr++;
 800afb8:	193f      	adds	r7, r7, r4
        for (Column = 0; Column < font_Width; Column++)
 800afba:	b2b6      	uxth	r6, r6
 800afbc:	45a8      	cmp	r8, r5
 800afbe:	d036      	beq.n	800b02e <Paint_DrawChar.part.0.isra.0+0x10e>
    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800afc0:	464b      	mov	r3, r9
 800afc2:	465c      	mov	r4, fp
 800afc4:	8899      	ldrh	r1, [r3, #4]
                if (*ptr & (0x80 >> (Column % 8)))
 800afc6:	4653      	mov	r3, sl
 800afc8:	402c      	ands	r4, r5
 800afca:	4123      	asrs	r3, r4
 800afcc:	783a      	ldrb	r2, [r7, #0]
                if (*ptr & (0x80 >> (Column % 8)))
 800afce:	421a      	tst	r2, r3
 800afd0:	d0e1      	beq.n	800af96 <Paint_DrawChar.part.0.isra.0+0x76>
    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800afd2:	428e      	cmp	r6, r1
 800afd4:	d8ea      	bhi.n	800afac <Paint_DrawChar.part.0.isra.0+0x8c>
 800afd6:	464b      	mov	r3, r9
 800afd8:	9900      	ldr	r1, [sp, #0]
 800afda:	88db      	ldrh	r3, [r3, #6]
 800afdc:	428b      	cmp	r3, r1
 800afde:	d3e5      	bcc.n	800afac <Paint_DrawChar.part.0.isra.0+0x8c>
 800afe0:	0030      	movs	r0, r6
 800afe2:	9a03      	ldr	r2, [sp, #12]
 800afe4:	f7ff ff10 	bl	800ae08 <Paint_SetPixel.part.0>
 800afe8:	e7e0      	b.n	800afac <Paint_DrawChar.part.0.isra.0+0x8c>
 800afea:	2307      	movs	r3, #7
 800afec:	469b      	mov	fp, r3
                if (*ptr & (0x80 >> (Column % 8)))
 800afee:	3379      	adds	r3, #121	@ 0x79
 800aff0:	469a      	mov	sl, r3
            if (FONT_BACKGROUND == Color_Background)
 800aff2:	465c      	mov	r4, fp
                if (*ptr & (0x80 >> (Column % 8)))
 800aff4:	4652      	mov	r2, sl
 800aff6:	402c      	ands	r4, r5
 800aff8:	4122      	asrs	r2, r4
 800affa:	783b      	ldrb	r3, [r7, #0]
 800affc:	421a      	tst	r2, r3
 800affe:	d00c      	beq.n	800b01a <Paint_DrawChar.part.0.isra.0+0xfa>
    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800b000:	464b      	mov	r3, r9
 800b002:	889b      	ldrh	r3, [r3, #4]
 800b004:	42b3      	cmp	r3, r6
 800b006:	d308      	bcc.n	800b01a <Paint_DrawChar.part.0.isra.0+0xfa>
 800b008:	464b      	mov	r3, r9
 800b00a:	9900      	ldr	r1, [sp, #0]
 800b00c:	88db      	ldrh	r3, [r3, #6]
 800b00e:	428b      	cmp	r3, r1
 800b010:	d303      	bcc.n	800b01a <Paint_DrawChar.part.0.isra.0+0xfa>
 800b012:	0030      	movs	r0, r6
 800b014:	9a03      	ldr	r2, [sp, #12]
 800b016:	f7ff fef7 	bl	800ae08 <Paint_SetPixel.part.0>
                ptr++;
 800b01a:	3c07      	subs	r4, #7
 800b01c:	4263      	negs	r3, r4
 800b01e:	415c      	adcs	r4, r3
        for (Column = 0; Column < font_Width; Column++)
 800b020:	3501      	adds	r5, #1
 800b022:	3601      	adds	r6, #1
 800b024:	b2ad      	uxth	r5, r5
                ptr++;
 800b026:	193f      	adds	r7, r7, r4
        for (Column = 0; Column < font_Width; Column++)
 800b028:	b2b6      	uxth	r6, r6
 800b02a:	45a8      	cmp	r8, r5
 800b02c:	d1e1      	bne.n	800aff2 <Paint_DrawChar.part.0.isra.0+0xd2>
        } // Write a line
        if (font_Width % 8 != 0)
 800b02e:	9b05      	ldr	r3, [sp, #20]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d09c      	beq.n	800af6e <Paint_DrawChar.part.0.isra.0+0x4e>
    for (Page = 0; Page < font_Height; Page++)
 800b034:	9b00      	ldr	r3, [sp, #0]
 800b036:	9a02      	ldr	r2, [sp, #8]
 800b038:	3301      	adds	r3, #1
 800b03a:	b29b      	uxth	r3, r3
            ptr++;
 800b03c:	3701      	adds	r7, #1
    for (Page = 0; Page < font_Height; Page++)
 800b03e:	9300      	str	r3, [sp, #0]
 800b040:	429a      	cmp	r2, r3
 800b042:	d19e      	bne.n	800af82 <Paint_DrawChar.part.0.isra.0+0x62>
    } // Write all
}
 800b044:	b007      	add	sp, #28
 800b046:	bcf0      	pop	{r4, r5, r6, r7}
 800b048:	46bb      	mov	fp, r7
 800b04a:	46b2      	mov	sl, r6
 800b04c:	46a9      	mov	r9, r5
 800b04e:	46a0      	mov	r8, r4
 800b050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b052:	46c0      	nop			@ (mov r8, r8)
 800b054:	1fffffe0 	.word	0x1fffffe0
 800b058:	2000055c 	.word	0x2000055c

0800b05c <Paint_DrawLine.part.0>:
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
 800b05c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b05e:	4657      	mov	r7, sl
 800b060:	464e      	mov	r6, r9
 800b062:	4645      	mov	r5, r8
 800b064:	46de      	mov	lr, fp
 800b066:	4688      	mov	r8, r1
 800b068:	b5e0      	push	{r5, r6, r7, lr}
 800b06a:	b095      	sub	sp, #84	@ 0x54
 800b06c:	001d      	movs	r5, r3
 800b06e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b070:	ab1e      	add	r3, sp, #120	@ 0x78
 800b072:	881c      	ldrh	r4, [r3, #0]
 800b074:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b076:	9401      	str	r4, [sp, #4]
 800b078:	781c      	ldrb	r4, [r3, #0]
 800b07a:	ab20      	add	r3, sp, #128	@ 0x80
 800b07c:	46a1      	mov	r9, r4
 800b07e:	781c      	ldrb	r4, [r3, #0]
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 800b080:	1a13      	subs	r3, r2, r0
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
 800b082:	0011      	movs	r1, r2
 800b084:	920f      	str	r2, [sp, #60]	@ 0x3c
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 800b086:	17da      	asrs	r2, r3, #31
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
 800b088:	940a      	str	r4, [sp, #40]	@ 0x28
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 800b08a:	189c      	adds	r4, r3, r2
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 800b08c:	4643      	mov	r3, r8
    int XAddway = Xstart < Xend ? 1 : -1;
 800b08e:	4684      	mov	ip, r0
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 800b090:	1aeb      	subs	r3, r5, r3
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 800b092:	4054      	eors	r4, r2
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 800b094:	17da      	asrs	r2, r3, #31
 800b096:	189e      	adds	r6, r3, r2
 800b098:	4056      	eors	r6, r2
 800b09a:	17da      	asrs	r2, r3, #31
 800b09c:	1ad3      	subs	r3, r2, r3
 800b09e:	4053      	eors	r3, r2
    int XAddway = Xstart < Xend ? 1 : -1;
 800b0a0:	458c      	cmp	ip, r1
 800b0a2:	4192      	sbcs	r2, r2
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 800b0a4:	9309      	str	r3, [sp, #36]	@ 0x24
    int XAddway = Xstart < Xend ? 1 : -1;
 800b0a6:	4b7d      	ldr	r3, [pc, #500]	@ (800b29c <Paint_DrawLine.part.0+0x240>)
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
 800b0a8:	9003      	str	r0, [sp, #12]
    int XAddway = Xstart < Xend ? 1 : -1;
 800b0aa:	401a      	ands	r2, r3
 800b0ac:	0013      	movs	r3, r2
 800b0ae:	4a7c      	ldr	r2, [pc, #496]	@ (800b2a0 <Paint_DrawLine.part.0+0x244>)
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 800b0b0:	940b      	str	r4, [sp, #44]	@ 0x2c
    int XAddway = Xstart < Xend ? 1 : -1;
 800b0b2:	4694      	mov	ip, r2
 800b0b4:	4463      	add	r3, ip
    int YAddway = Ystart < Yend ? 1 : -1;
 800b0b6:	2202      	movs	r2, #2
    int XAddway = Xstart < Xend ? 1 : -1;
 800b0b8:	930e      	str	r3, [sp, #56]	@ 0x38
    int YAddway = Ystart < Yend ? 1 : -1;
 800b0ba:	45a8      	cmp	r8, r5
 800b0bc:	419b      	sbcs	r3, r3
 800b0be:	401a      	ands	r2, r3
 800b0c0:	1e53      	subs	r3, r2, #1
 800b0c2:	9311      	str	r3, [sp, #68]	@ 0x44
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++)
 800b0c4:	464b      	mov	r3, r9
 800b0c6:	005b      	lsls	r3, r3, #1
 800b0c8:	3b01      	subs	r3, #1
 800b0ca:	469a      	mov	sl, r3
    char Dotted_Len = 0;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	9302      	str	r3, [sp, #8]
 800b0d0:	4b74      	ldr	r3, [pc, #464]	@ (800b2a4 <Paint_DrawLine.part.0+0x248>)
    int Esp = dx + dy;
 800b0d2:	1ba2      	subs	r2, r4, r6
 800b0d4:	469b      	mov	fp, r3
 800b0d6:	0053      	lsls	r3, r2, #1
 800b0d8:	9307      	str	r3, [sp, #28]
        printf("Xpoint = %d , Paint.Width = %d  \r\n ", Xpoint, Paint.Width);
 800b0da:	4b73      	ldr	r3, [pc, #460]	@ (800b2a8 <Paint_DrawLine.part.0+0x24c>)
        printf("Ypoint = %d , Paint.Height = %d  \r\n ", Ypoint, Paint.Height);
 800b0dc:	465f      	mov	r7, fp
        printf("Xpoint = %d , Paint.Width = %d  \r\n ", Xpoint, Paint.Width);
 800b0de:	9312      	str	r3, [sp, #72]	@ 0x48
        printf("Ypoint = %d , Paint.Height = %d  \r\n ", Ypoint, Paint.Height);
 800b0e0:	4b72      	ldr	r3, [pc, #456]	@ (800b2ac <Paint_DrawLine.part.0+0x250>)
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 800b0e2:	960d      	str	r6, [sp, #52]	@ 0x34
        printf("Ypoint = %d , Paint.Height = %d  \r\n ", Ypoint, Paint.Height);
 800b0e4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b0e6:	4643      	mov	r3, r8
    int Esp = dx + dy;
 800b0e8:	9208      	str	r2, [sp, #32]
        printf("Ypoint = %d , Paint.Height = %d  \r\n ", Ypoint, Paint.Height);
 800b0ea:	9306      	str	r3, [sp, #24]
        Dotted_Len++;
 800b0ec:	9b02      	ldr	r3, [sp, #8]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800b0ee:	88bc      	ldrh	r4, [r7, #4]
        Dotted_Len++;
 800b0f0:	3301      	adds	r3, #1
 800b0f2:	b2de      	uxtb	r6, r3
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0)
 800b0f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d107      	bne.n	800b10a <Paint_DrawLine.part.0+0xae>
 800b0fa:	2103      	movs	r1, #3
 800b0fc:	0030      	movs	r0, r6
 800b0fe:	f7f5 f8a5 	bl	800024c <__aeabi_uidivmod>
 800b102:	b2cb      	uxtb	r3, r1
 800b104:	9302      	str	r3, [sp, #8]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d074      	beq.n	800b1f4 <Paint_DrawLine.part.0+0x198>
    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800b10a:	9a03      	ldr	r2, [sp, #12]
 800b10c:	42a2      	cmp	r2, r4
 800b10e:	d866      	bhi.n	800b1de <Paint_DrawLine.part.0+0x182>
 800b110:	88fb      	ldrh	r3, [r7, #6]
 800b112:	9906      	ldr	r1, [sp, #24]
 800b114:	428b      	cmp	r3, r1
 800b116:	d362      	bcc.n	800b1de <Paint_DrawLine.part.0+0x182>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++)
 800b118:	4653      	mov	r3, sl
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	dd37      	ble.n	800b18e <Paint_DrawLine.part.0+0x132>
                if (Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 800b11e:	464b      	mov	r3, r9
 800b120:	1ac8      	subs	r0, r1, r3
 800b122:	1ad5      	subs	r5, r2, r3
 800b124:	b282      	uxth	r2, r0
 800b126:	9205      	str	r2, [sp, #20]
 800b128:	464a      	mov	r2, r9
 800b12a:	1a52      	subs	r2, r2, r1
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++)
 800b12c:	2300      	movs	r3, #0
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++)
 800b12e:	3201      	adds	r2, #1
 800b130:	4693      	mov	fp, r2
 800b132:	4688      	mov	r8, r1
                if (Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 800b134:	9004      	str	r0, [sp, #16]
 800b136:	b2ad      	uxth	r5, r5
 800b138:	960c      	str	r6, [sp, #48]	@ 0x30
 800b13a:	9302      	str	r3, [sp, #8]
 800b13c:	9a03      	ldr	r2, [sp, #12]
 800b13e:	4694      	mov	ip, r2
 800b140:	4463      	add	r3, ip
 800b142:	454b      	cmp	r3, r9
 800b144:	db1a      	blt.n	800b17c <Paint_DrawLine.part.0+0x120>
 800b146:	9b04      	ldr	r3, [sp, #16]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	db17      	blt.n	800b17c <Paint_DrawLine.part.0+0x120>
 800b14c:	9c05      	ldr	r4, [sp, #20]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800b14e:	88be      	ldrh	r6, [r7, #4]
 800b150:	42b5      	cmp	r5, r6
 800b152:	d807      	bhi.n	800b164 <Paint_DrawLine.part.0+0x108>
 800b154:	88fb      	ldrh	r3, [r7, #6]
 800b156:	42a3      	cmp	r3, r4
 800b158:	d304      	bcc.n	800b164 <Paint_DrawLine.part.0+0x108>
 800b15a:	0021      	movs	r1, r4
 800b15c:	0028      	movs	r0, r5
 800b15e:	9a01      	ldr	r2, [sp, #4]
 800b160:	f7ff fe52 	bl	800ae08 <Paint_SetPixel.part.0>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++)
 800b164:	465b      	mov	r3, fp
 800b166:	18e3      	adds	r3, r4, r3
 800b168:	b21b      	sxth	r3, r3
 800b16a:	459a      	cmp	sl, r3
 800b16c:	dd06      	ble.n	800b17c <Paint_DrawLine.part.0+0x120>
                if (Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 800b16e:	4443      	add	r3, r8
 800b170:	454b      	cmp	r3, r9
 800b172:	db03      	blt.n	800b17c <Paint_DrawLine.part.0+0x120>
 800b174:	3401      	adds	r4, #1
 800b176:	b2a4      	uxth	r4, r4
 800b178:	42b5      	cmp	r5, r6
 800b17a:	d9e8      	bls.n	800b14e <Paint_DrawLine.part.0+0xf2>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++)
 800b17c:	9e02      	ldr	r6, [sp, #8]
 800b17e:	3501      	adds	r5, #1
 800b180:	3601      	adds	r6, #1
 800b182:	b233      	sxth	r3, r6
 800b184:	9302      	str	r3, [sp, #8]
 800b186:	b2ad      	uxth	r5, r5
 800b188:	459a      	cmp	sl, r3
 800b18a:	dcd7      	bgt.n	800b13c <Paint_DrawLine.part.0+0xe0>
 800b18c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
        Dotted_Len++;
 800b18e:	9602      	str	r6, [sp, #8]
        if (2 * Esp >= dy)
 800b190:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b192:	9a07      	ldr	r2, [sp, #28]
 800b194:	4293      	cmp	r3, r2
 800b196:	dc11      	bgt.n	800b1bc <Paint_DrawLine.part.0+0x160>
            if (Xpoint == Xend)
 800b198:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b19a:	9b03      	ldr	r3, [sp, #12]
 800b19c:	429a      	cmp	r2, r3
 800b19e:	d075      	beq.n	800b28c <Paint_DrawLine.part.0+0x230>
            Esp += dy;
 800b1a0:	9a08      	ldr	r2, [sp, #32]
 800b1a2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b1a4:	1a52      	subs	r2, r2, r1
            Xpoint += XAddway;
 800b1a6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b1a8:	9208      	str	r2, [sp, #32]
 800b1aa:	468c      	mov	ip, r1
 800b1ac:	4463      	add	r3, ip
 800b1ae:	b29b      	uxth	r3, r3
 800b1b0:	9303      	str	r3, [sp, #12]
        if (2 * Esp <= dx)
 800b1b2:	0053      	lsls	r3, r2, #1
 800b1b4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b1b6:	9307      	str	r3, [sp, #28]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	db97      	blt.n	800b0ec <Paint_DrawLine.part.0+0x90>
            if (Ypoint == Yend)
 800b1bc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800b1be:	9b06      	ldr	r3, [sp, #24]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d063      	beq.n	800b28c <Paint_DrawLine.part.0+0x230>
            Esp += dx;
 800b1c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b1c6:	9a08      	ldr	r2, [sp, #32]
 800b1c8:	468c      	mov	ip, r1
            Ypoint += YAddway;
 800b1ca:	9911      	ldr	r1, [sp, #68]	@ 0x44
            Esp += dx;
 800b1cc:	4462      	add	r2, ip
            Ypoint += YAddway;
 800b1ce:	468c      	mov	ip, r1
 800b1d0:	4463      	add	r3, ip
 800b1d2:	b29b      	uxth	r3, r3
 800b1d4:	9306      	str	r3, [sp, #24]
 800b1d6:	0053      	lsls	r3, r2, #1
            Esp += dx;
 800b1d8:	9208      	str	r2, [sp, #32]
            Ypoint += YAddway;
 800b1da:	9307      	str	r3, [sp, #28]
 800b1dc:	e786      	b.n	800b0ec <Paint_DrawLine.part.0+0x90>
        printf("Xpoint = %d , Paint.Width = %d  \r\n ", Xpoint, Paint.Width);
 800b1de:	0022      	movs	r2, r4
 800b1e0:	9903      	ldr	r1, [sp, #12]
 800b1e2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b1e4:	f7fb fe04 	bl	8006df0 <printf_>
        printf("Ypoint = %d , Paint.Height = %d  \r\n ", Ypoint, Paint.Height);
 800b1e8:	88fa      	ldrh	r2, [r7, #6]
 800b1ea:	9906      	ldr	r1, [sp, #24]
 800b1ec:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800b1ee:	f7fb fdff 	bl	8006df0 <printf_>
        return;
 800b1f2:	e7cc      	b.n	800b18e <Paint_DrawLine.part.0+0x132>
    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800b1f4:	9a03      	ldr	r2, [sp, #12]
 800b1f6:	42a2      	cmp	r2, r4
 800b1f8:	d83d      	bhi.n	800b276 <Paint_DrawLine.part.0+0x21a>
 800b1fa:	88fb      	ldrh	r3, [r7, #6]
 800b1fc:	9906      	ldr	r1, [sp, #24]
 800b1fe:	428b      	cmp	r3, r1
 800b200:	d339      	bcc.n	800b276 <Paint_DrawLine.part.0+0x21a>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++)
 800b202:	4653      	mov	r3, sl
 800b204:	2b00      	cmp	r3, #0
 800b206:	ddc3      	ble.n	800b190 <Paint_DrawLine.part.0+0x134>
                if (Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 800b208:	464b      	mov	r3, r9
 800b20a:	1ac8      	subs	r0, r1, r3
 800b20c:	1ad5      	subs	r5, r2, r3
 800b20e:	b282      	uxth	r2, r0
 800b210:	920c      	str	r2, [sp, #48]	@ 0x30
 800b212:	464a      	mov	r2, r9
 800b214:	1a52      	subs	r2, r2, r1
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++)
 800b216:	2300      	movs	r3, #0
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++)
 800b218:	3201      	adds	r2, #1
 800b21a:	4690      	mov	r8, r2
 800b21c:	468b      	mov	fp, r1
                if (Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 800b21e:	9004      	str	r0, [sp, #16]
 800b220:	b2ad      	uxth	r5, r5
 800b222:	9305      	str	r3, [sp, #20]
 800b224:	9a03      	ldr	r2, [sp, #12]
 800b226:	4694      	mov	ip, r2
 800b228:	4463      	add	r3, ip
 800b22a:	454b      	cmp	r3, r9
 800b22c:	db1a      	blt.n	800b264 <Paint_DrawLine.part.0+0x208>
 800b22e:	9b04      	ldr	r3, [sp, #16]
 800b230:	2b00      	cmp	r3, #0
 800b232:	db17      	blt.n	800b264 <Paint_DrawLine.part.0+0x208>
 800b234:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800b236:	88be      	ldrh	r6, [r7, #4]
 800b238:	42ae      	cmp	r6, r5
 800b23a:	d307      	bcc.n	800b24c <Paint_DrawLine.part.0+0x1f0>
 800b23c:	88fb      	ldrh	r3, [r7, #6]
 800b23e:	42a3      	cmp	r3, r4
 800b240:	d304      	bcc.n	800b24c <Paint_DrawLine.part.0+0x1f0>
 800b242:	22ff      	movs	r2, #255	@ 0xff
 800b244:	0021      	movs	r1, r4
 800b246:	0028      	movs	r0, r5
 800b248:	f7ff fdde 	bl	800ae08 <Paint_SetPixel.part.0>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++)
 800b24c:	4643      	mov	r3, r8
 800b24e:	18e3      	adds	r3, r4, r3
 800b250:	b21b      	sxth	r3, r3
 800b252:	4553      	cmp	r3, sl
 800b254:	da06      	bge.n	800b264 <Paint_DrawLine.part.0+0x208>
                if (Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 800b256:	445b      	add	r3, fp
 800b258:	454b      	cmp	r3, r9
 800b25a:	db03      	blt.n	800b264 <Paint_DrawLine.part.0+0x208>
 800b25c:	3401      	adds	r4, #1
 800b25e:	b2a4      	uxth	r4, r4
 800b260:	42ae      	cmp	r6, r5
 800b262:	d2e8      	bcs.n	800b236 <Paint_DrawLine.part.0+0x1da>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++)
 800b264:	9e05      	ldr	r6, [sp, #20]
 800b266:	3501      	adds	r5, #1
 800b268:	3601      	adds	r6, #1
 800b26a:	b233      	sxth	r3, r6
 800b26c:	9305      	str	r3, [sp, #20]
 800b26e:	b2ad      	uxth	r5, r5
 800b270:	4553      	cmp	r3, sl
 800b272:	dbd7      	blt.n	800b224 <Paint_DrawLine.part.0+0x1c8>
 800b274:	e78c      	b.n	800b190 <Paint_DrawLine.part.0+0x134>
        printf("Xpoint = %d , Paint.Width = %d  \r\n ", Xpoint, Paint.Width);
 800b276:	0022      	movs	r2, r4
 800b278:	9903      	ldr	r1, [sp, #12]
 800b27a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b27c:	f7fb fdb8 	bl	8006df0 <printf_>
        printf("Ypoint = %d , Paint.Height = %d  \r\n ", Ypoint, Paint.Height);
 800b280:	88fa      	ldrh	r2, [r7, #6]
 800b282:	9906      	ldr	r1, [sp, #24]
 800b284:	4809      	ldr	r0, [pc, #36]	@ (800b2ac <Paint_DrawLine.part.0+0x250>)
 800b286:	f7fb fdb3 	bl	8006df0 <printf_>
        return;
 800b28a:	e781      	b.n	800b190 <Paint_DrawLine.part.0+0x134>
}
 800b28c:	b015      	add	sp, #84	@ 0x54
 800b28e:	bcf0      	pop	{r4, r5, r6, r7}
 800b290:	46bb      	mov	fp, r7
 800b292:	46b2      	mov	sl, r6
 800b294:	46a9      	mov	r9, r5
 800b296:	46a0      	mov	r8, r4
 800b298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b29a:	46c0      	nop			@ (mov r8, r8)
 800b29c:	ffff0002 	.word	0xffff0002
 800b2a0:	0000ffff 	.word	0x0000ffff
 800b2a4:	2000055c 	.word	0x2000055c
 800b2a8:	0800ef44 	.word	0x0800ef44
 800b2ac:	0800ef68 	.word	0x0800ef68

0800b2b0 <Paint_NewImage>:
{
 800b2b0:	b530      	push	{r4, r5, lr}
 800b2b2:	ac03      	add	r4, sp, #12
 800b2b4:	8825      	ldrh	r5, [r4, #0]
    Paint.Image = image;
 800b2b6:	4c0d      	ldr	r4, [pc, #52]	@ (800b2ec <Paint_NewImage+0x3c>)
 800b2b8:	6020      	str	r0, [r4, #0]
    Paint.Scale = 2;
 800b2ba:	2002      	movs	r0, #2
    Paint.WidthMemory = Width;
 800b2bc:	8121      	strh	r1, [r4, #8]
    Paint.Scale = 2;
 800b2be:	82e0      	strh	r0, [r4, #22]
    Paint.HeightMemory = Height;
 800b2c0:	8162      	strh	r2, [r4, #10]
    Paint.Color = Color;
 800b2c2:	81a5      	strh	r5, [r4, #12]
    Paint.WidthByte = (Width % 8 == 0) ? (Width / 8) : (Width / 8 + 1);
 800b2c4:	08c8      	lsrs	r0, r1, #3
 800b2c6:	074d      	lsls	r5, r1, #29
 800b2c8:	d000      	beq.n	800b2cc <Paint_NewImage+0x1c>
 800b2ca:	3001      	adds	r0, #1
 800b2cc:	8260      	strh	r0, [r4, #18]
    Paint.Mirror = MIRROR_NONE;
 800b2ce:	2000      	movs	r0, #0
    Paint.HeightByte = Height;
 800b2d0:	82a2      	strh	r2, [r4, #20]
    Paint.Rotate = Rotate;
 800b2d2:	81e3      	strh	r3, [r4, #14]
    Paint.Mirror = MIRROR_NONE;
 800b2d4:	8220      	strh	r0, [r4, #16]
    if (Rotate == ROTATE_0 || Rotate == ROTATE_180)
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d004      	beq.n	800b2e4 <Paint_NewImage+0x34>
 800b2da:	2bb4      	cmp	r3, #180	@ 0xb4
 800b2dc:	d002      	beq.n	800b2e4 <Paint_NewImage+0x34>
 800b2de:	000b      	movs	r3, r1
        Paint.Width = Height;
 800b2e0:	0011      	movs	r1, r2
        Paint.Height = Width;
 800b2e2:	001a      	movs	r2, r3
}
 800b2e4:	80e2      	strh	r2, [r4, #6]
 800b2e6:	80a1      	strh	r1, [r4, #4]
 800b2e8:	bd30      	pop	{r4, r5, pc}
 800b2ea:	46c0      	nop			@ (mov r8, r8)
 800b2ec:	2000055c 	.word	0x2000055c

0800b2f0 <Paint_SelectImage>:
    Paint.Image = image;
 800b2f0:	4b01      	ldr	r3, [pc, #4]	@ (800b2f8 <Paint_SelectImage+0x8>)
 800b2f2:	6018      	str	r0, [r3, #0]
}
 800b2f4:	4770      	bx	lr
 800b2f6:	46c0      	nop			@ (mov r8, r8)
 800b2f8:	2000055c 	.word	0x2000055c

0800b2fc <Paint_Clear>:
{
 800b2fc:	b530      	push	{r4, r5, lr}
    if (Paint.Scale == 2 || Paint.Scale == 4)
 800b2fe:	4c1d      	ldr	r4, [pc, #116]	@ (800b374 <Paint_Clear+0x78>)
 800b300:	4a1d      	ldr	r2, [pc, #116]	@ (800b378 <Paint_Clear+0x7c>)
 800b302:	8ae3      	ldrh	r3, [r4, #22]
 800b304:	1e99      	subs	r1, r3, #2
 800b306:	4211      	tst	r1, r2
 800b308:	d002      	beq.n	800b310 <Paint_Clear+0x14>
    else if (Paint.Scale == 7)
 800b30a:	2b07      	cmp	r3, #7
 800b30c:	d018      	beq.n	800b340 <Paint_Clear+0x44>
}
 800b30e:	bd30      	pop	{r4, r5, pc}
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++)
 800b310:	8aa3      	ldrh	r3, [r4, #20]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d0fb      	beq.n	800b30e <Paint_Clear+0x12>
            for (UWORD X = 0; X < Paint.WidthByte; X++)
 800b316:	2500      	movs	r5, #0
 800b318:	8a62      	ldrh	r2, [r4, #18]
                Paint.Image[Addr] = Color;
 800b31a:	b2c0      	uxtb	r0, r0
            for (UWORD X = 0; X < Paint.WidthByte; X++)
 800b31c:	2a00      	cmp	r2, #0
 800b31e:	d0f6      	beq.n	800b30e <Paint_Clear+0x12>
 800b320:	2300      	movs	r3, #0
                UDOUBLE Addr = X + Y * Paint.WidthByte;
 800b322:	436a      	muls	r2, r5
                Paint.Image[Addr] = Color;
 800b324:	6821      	ldr	r1, [r4, #0]
 800b326:	18c9      	adds	r1, r1, r3
 800b328:	5488      	strb	r0, [r1, r2]
            for (UWORD X = 0; X < Paint.WidthByte; X++)
 800b32a:	3301      	adds	r3, #1
 800b32c:	8a62      	ldrh	r2, [r4, #18]
 800b32e:	b29b      	uxth	r3, r3
 800b330:	429a      	cmp	r2, r3
 800b332:	d8f6      	bhi.n	800b322 <Paint_Clear+0x26>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++)
 800b334:	3501      	adds	r5, #1
 800b336:	8aa3      	ldrh	r3, [r4, #20]
 800b338:	b2ad      	uxth	r5, r5
 800b33a:	42ab      	cmp	r3, r5
 800b33c:	d8ee      	bhi.n	800b31c <Paint_Clear+0x20>
 800b33e:	e7e6      	b.n	800b30e <Paint_Clear+0x12>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++)
 800b340:	8aa3      	ldrh	r3, [r4, #20]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d0e3      	beq.n	800b30e <Paint_Clear+0x12>
                Paint.Image[Addr] = (Color << 4) | Color;
 800b346:	0105      	lsls	r5, r0, #4
 800b348:	4305      	orrs	r5, r0
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++)
 800b34a:	2000      	movs	r0, #0
            for (UWORD X = 0; X < Paint.WidthByte; X++)
 800b34c:	8a62      	ldrh	r2, [r4, #18]
                Paint.Image[Addr] = (Color << 4) | Color;
 800b34e:	b2ed      	uxtb	r5, r5
            for (UWORD X = 0; X < Paint.WidthByte; X++)
 800b350:	2a00      	cmp	r2, #0
 800b352:	d0dc      	beq.n	800b30e <Paint_Clear+0x12>
 800b354:	2300      	movs	r3, #0
                UDOUBLE Addr = X + Y * Paint.WidthByte;
 800b356:	4342      	muls	r2, r0
                Paint.Image[Addr] = (Color << 4) | Color;
 800b358:	6821      	ldr	r1, [r4, #0]
 800b35a:	18c9      	adds	r1, r1, r3
 800b35c:	548d      	strb	r5, [r1, r2]
            for (UWORD X = 0; X < Paint.WidthByte; X++)
 800b35e:	3301      	adds	r3, #1
 800b360:	8a62      	ldrh	r2, [r4, #18]
 800b362:	b29b      	uxth	r3, r3
 800b364:	429a      	cmp	r2, r3
 800b366:	d8f6      	bhi.n	800b356 <Paint_Clear+0x5a>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++)
 800b368:	3001      	adds	r0, #1
 800b36a:	8aa3      	ldrh	r3, [r4, #20]
 800b36c:	b280      	uxth	r0, r0
 800b36e:	4283      	cmp	r3, r0
 800b370:	d8ee      	bhi.n	800b350 <Paint_Clear+0x54>
 800b372:	e7cc      	b.n	800b30e <Paint_Clear+0x12>
 800b374:	2000055c 	.word	0x2000055c
 800b378:	0000fffd 	.word	0x0000fffd

0800b37c <Paint_ClearWindows>:
{
 800b37c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b37e:	4657      	mov	r7, sl
 800b380:	464e      	mov	r6, r9
 800b382:	4645      	mov	r5, r8
 800b384:	46de      	mov	lr, fp
 800b386:	b5e0      	push	{r5, r6, r7, lr}
 800b388:	b085      	sub	sp, #20
 800b38a:	001e      	movs	r6, r3
 800b38c:	ab0e      	add	r3, sp, #56	@ 0x38
 800b38e:	881b      	ldrh	r3, [r3, #0]
 800b390:	0007      	movs	r7, r0
 800b392:	0014      	movs	r4, r2
 800b394:	0008      	movs	r0, r1
 800b396:	4698      	mov	r8, r3
    for (Y = Ystart; Y < Yend; Y++)
 800b398:	42b1      	cmp	r1, r6
 800b39a:	d300      	bcc.n	800b39e <Paint_ClearWindows+0x22>
 800b39c:	e097      	b.n	800b4ce <Paint_ClearWindows+0x152>
 800b39e:	4297      	cmp	r7, r2
 800b3a0:	d300      	bcc.n	800b3a4 <Paint_ClearWindows+0x28>
 800b3a2:	e094      	b.n	800b4ce <Paint_ClearWindows+0x152>
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4) * 2));
 800b3a4:	2303      	movs	r3, #3
 800b3a6:	4641      	mov	r1, r8
 800b3a8:	400b      	ands	r3, r1
 800b3aa:	019b      	lsls	r3, r3, #6
 800b3ac:	9302      	str	r3, [sp, #8]
 800b3ae:	0033      	movs	r3, r6
    switch (Paint.Rotate)
 800b3b0:	2587      	movs	r5, #135	@ 0x87
 800b3b2:	0026      	movs	r6, r4
 800b3b4:	0004      	movs	r4, r0
 800b3b6:	0018      	movs	r0, r3
 800b3b8:	4a69      	ldr	r2, [pc, #420]	@ (800b560 <Paint_ClearWindows+0x1e4>)
 800b3ba:	006d      	lsls	r5, r5, #1
 800b3bc:	9701      	str	r7, [sp, #4]
        for (X = Xstart; X < Xend; X++)
 800b3be:	4684      	mov	ip, r0
 800b3c0:	9b01      	ldr	r3, [sp, #4]
 800b3c2:	0010      	movs	r0, r2
 800b3c4:	e044      	b.n	800b450 <Paint_ClearWindows+0xd4>
    switch (Paint.Rotate)
 800b3c6:	295a      	cmp	r1, #90	@ 0x5a
 800b3c8:	d13e      	bne.n	800b448 <Paint_ClearWindows+0xcc>
        break;
 800b3ca:	001a      	movs	r2, r3
        X = Paint.WidthMemory - Ypoint - 1;
 800b3cc:	8901      	ldrh	r1, [r0, #8]
 800b3ce:	3901      	subs	r1, #1
 800b3d0:	1b09      	subs	r1, r1, r4
 800b3d2:	b289      	uxth	r1, r1
    switch (Paint.Mirror)
 800b3d4:	8a07      	ldrh	r7, [r0, #16]
 800b3d6:	2f02      	cmp	r7, #2
 800b3d8:	d04b      	beq.n	800b472 <Paint_ClearWindows+0xf6>
 800b3da:	2f02      	cmp	r7, #2
 800b3dc:	d85d      	bhi.n	800b49a <Paint_ClearWindows+0x11e>
 800b3de:	2f00      	cmp	r7, #0
 800b3e0:	d050      	beq.n	800b484 <Paint_ClearWindows+0x108>
        X = Paint.WidthMemory - X - 1;
 800b3e2:	8907      	ldrh	r7, [r0, #8]
 800b3e4:	46b9      	mov	r9, r7
 800b3e6:	2701      	movs	r7, #1
 800b3e8:	427f      	negs	r7, r7
 800b3ea:	444f      	add	r7, r9
 800b3ec:	1a79      	subs	r1, r7, r1
 800b3ee:	b289      	uxth	r1, r1
    if (X > Paint.WidthMemory || Y > Paint.HeightMemory)
 800b3f0:	4549      	cmp	r1, r9
 800b3f2:	d829      	bhi.n	800b448 <Paint_ClearWindows+0xcc>
 800b3f4:	8947      	ldrh	r7, [r0, #10]
 800b3f6:	4297      	cmp	r7, r2
 800b3f8:	d326      	bcc.n	800b448 <Paint_ClearWindows+0xcc>
    if (Paint.Scale == 2)
 800b3fa:	8ac7      	ldrh	r7, [r0, #22]
 800b3fc:	2f02      	cmp	r7, #2
 800b3fe:	d100      	bne.n	800b402 <Paint_ClearWindows+0x86>
 800b400:	e075      	b.n	800b4ee <Paint_ClearWindows+0x172>
    else if (Paint.Scale == 4)
 800b402:	2f04      	cmp	r7, #4
 800b404:	d100      	bne.n	800b408 <Paint_ClearWindows+0x8c>
 800b406:	e088      	b.n	800b51a <Paint_ClearWindows+0x19e>
    else if (Paint.Scale == 7)
 800b408:	2f07      	cmp	r7, #7
 800b40a:	d11d      	bne.n	800b448 <Paint_ClearWindows+0xcc>
        UDOUBLE Addr = X / 2 + Y * Paint.WidthByte;
 800b40c:	8a47      	ldrh	r7, [r0, #18]
 800b40e:	437a      	muls	r2, r7
 800b410:	084f      	lsrs	r7, r1, #1
 800b412:	b2bf      	uxth	r7, r7
 800b414:	46b9      	mov	r9, r7
        UBYTE Rdata = Paint.Image[Addr];
 800b416:	6807      	ldr	r7, [r0, #0]
        UDOUBLE Addr = X / 2 + Y * Paint.WidthByte;
 800b418:	444a      	add	r2, r9
        UBYTE Rdata = Paint.Image[Addr];
 800b41a:	46b9      	mov	r9, r7
        Rdata = Rdata & (~(0xF0 >> ((X % 2) * 4))); // Clear first, then set value
 800b41c:	2701      	movs	r7, #1
 800b41e:	4039      	ands	r1, r7
 800b420:	0089      	lsls	r1, r1, #2
 800b422:	37ef      	adds	r7, #239	@ 0xef
 800b424:	410f      	asrs	r7, r1
 800b426:	46bb      	mov	fp, r7
 800b428:	464f      	mov	r7, r9
 800b42a:	9203      	str	r2, [sp, #12]
 800b42c:	5cbf      	ldrb	r7, [r7, r2]
 800b42e:	465a      	mov	r2, fp
 800b430:	4397      	bics	r7, r2
        Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2) * 4));
 800b432:	4642      	mov	r2, r8
 800b434:	0112      	lsls	r2, r2, #4
        Rdata = Rdata & (~(0xF0 >> ((X % 2) * 4))); // Clear first, then set value
 800b436:	46ba      	mov	sl, r7
        Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2) * 4));
 800b438:	0017      	movs	r7, r2
 800b43a:	410f      	asrs	r7, r1
 800b43c:	4652      	mov	r2, sl
 800b43e:	0039      	movs	r1, r7
 800b440:	4311      	orrs	r1, r2
 800b442:	464a      	mov	r2, r9
 800b444:	9f03      	ldr	r7, [sp, #12]
 800b446:	55d1      	strb	r1, [r2, r7]
        for (X = Xstart; X < Xend; X++)
 800b448:	3301      	adds	r3, #1
 800b44a:	b29b      	uxth	r3, r3
 800b44c:	429e      	cmp	r6, r3
 800b44e:	d037      	beq.n	800b4c0 <Paint_ClearWindows+0x144>
    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800b450:	8882      	ldrh	r2, [r0, #4]
 800b452:	429a      	cmp	r2, r3
 800b454:	d3f8      	bcc.n	800b448 <Paint_ClearWindows+0xcc>
 800b456:	88c2      	ldrh	r2, [r0, #6]
 800b458:	42a2      	cmp	r2, r4
 800b45a:	d3f5      	bcc.n	800b448 <Paint_ClearWindows+0xcc>
    switch (Paint.Rotate)
 800b45c:	89c1      	ldrh	r1, [r0, #14]
 800b45e:	29b4      	cmp	r1, #180	@ 0xb4
 800b460:	d03c      	beq.n	800b4dc <Paint_ClearWindows+0x160>
 800b462:	d812      	bhi.n	800b48a <Paint_ClearWindows+0x10e>
 800b464:	2900      	cmp	r1, #0
 800b466:	d1ae      	bne.n	800b3c6 <Paint_ClearWindows+0x4a>
    switch (Paint.Mirror)
 800b468:	8a07      	ldrh	r7, [r0, #16]
    switch (Paint.Rotate)
 800b46a:	0022      	movs	r2, r4
 800b46c:	0019      	movs	r1, r3
    switch (Paint.Mirror)
 800b46e:	2f02      	cmp	r7, #2
 800b470:	d1b3      	bne.n	800b3da <Paint_ClearWindows+0x5e>
        Y = Paint.HeightMemory - Y - 1;
 800b472:	8947      	ldrh	r7, [r0, #10]
 800b474:	46b9      	mov	r9, r7
 800b476:	2701      	movs	r7, #1
 800b478:	427f      	negs	r7, r7
 800b47a:	46ba      	mov	sl, r7
 800b47c:	44d1      	add	r9, sl
 800b47e:	464f      	mov	r7, r9
 800b480:	1aba      	subs	r2, r7, r2
 800b482:	b292      	uxth	r2, r2
        X = Paint.WidthMemory - Ypoint - 1;
 800b484:	8907      	ldrh	r7, [r0, #8]
 800b486:	46b9      	mov	r9, r7
        break;
 800b488:	e7b2      	b.n	800b3f0 <Paint_ClearWindows+0x74>
    switch (Paint.Rotate)
 800b48a:	42a9      	cmp	r1, r5
 800b48c:	d1dc      	bne.n	800b448 <Paint_ClearWindows+0xcc>
        Y = Paint.HeightMemory - Xpoint - 1;
 800b48e:	8942      	ldrh	r2, [r0, #10]
        break;
 800b490:	0021      	movs	r1, r4
        Y = Paint.HeightMemory - Xpoint - 1;
 800b492:	3a01      	subs	r2, #1
 800b494:	1ad2      	subs	r2, r2, r3
 800b496:	b292      	uxth	r2, r2
        break;
 800b498:	e79c      	b.n	800b3d4 <Paint_ClearWindows+0x58>
    switch (Paint.Mirror)
 800b49a:	2f03      	cmp	r7, #3
 800b49c:	d1d4      	bne.n	800b448 <Paint_ClearWindows+0xcc>
        X = Paint.WidthMemory - X - 1;
 800b49e:	8907      	ldrh	r7, [r0, #8]
 800b4a0:	46b9      	mov	r9, r7
 800b4a2:	2701      	movs	r7, #1
 800b4a4:	427f      	negs	r7, r7
 800b4a6:	444f      	add	r7, r9
 800b4a8:	1a79      	subs	r1, r7, r1
        Y = Paint.HeightMemory - Y - 1;
 800b4aa:	8947      	ldrh	r7, [r0, #10]
        X = Paint.WidthMemory - X - 1;
 800b4ac:	b289      	uxth	r1, r1
        Y = Paint.HeightMemory - Y - 1;
 800b4ae:	46ba      	mov	sl, r7
 800b4b0:	2701      	movs	r7, #1
 800b4b2:	427f      	negs	r7, r7
 800b4b4:	46bb      	mov	fp, r7
 800b4b6:	44da      	add	sl, fp
 800b4b8:	4657      	mov	r7, sl
 800b4ba:	1aba      	subs	r2, r7, r2
 800b4bc:	b292      	uxth	r2, r2
        break;
 800b4be:	e797      	b.n	800b3f0 <Paint_ClearWindows+0x74>
    for (Y = Ystart; Y < Yend; Y++)
 800b4c0:	0002      	movs	r2, r0
 800b4c2:	4660      	mov	r0, ip
 800b4c4:	3401      	adds	r4, #1
 800b4c6:	b2a4      	uxth	r4, r4
 800b4c8:	42a0      	cmp	r0, r4
 800b4ca:	d000      	beq.n	800b4ce <Paint_ClearWindows+0x152>
 800b4cc:	e777      	b.n	800b3be <Paint_ClearWindows+0x42>
}
 800b4ce:	b005      	add	sp, #20
 800b4d0:	bcf0      	pop	{r4, r5, r6, r7}
 800b4d2:	46bb      	mov	fp, r7
 800b4d4:	46b2      	mov	sl, r6
 800b4d6:	46a9      	mov	r9, r5
 800b4d8:	46a0      	mov	r8, r4
 800b4da:	bdf0      	pop	{r4, r5, r6, r7, pc}
        X = Paint.WidthMemory - Xpoint - 1;
 800b4dc:	8901      	ldrh	r1, [r0, #8]
        Y = Paint.HeightMemory - Ypoint - 1;
 800b4de:	8942      	ldrh	r2, [r0, #10]
        X = Paint.WidthMemory - Xpoint - 1;
 800b4e0:	3901      	subs	r1, #1
        Y = Paint.HeightMemory - Ypoint - 1;
 800b4e2:	3a01      	subs	r2, #1
        X = Paint.WidthMemory - Xpoint - 1;
 800b4e4:	1ac9      	subs	r1, r1, r3
        Y = Paint.HeightMemory - Ypoint - 1;
 800b4e6:	1b12      	subs	r2, r2, r4
        X = Paint.WidthMemory - Xpoint - 1;
 800b4e8:	b289      	uxth	r1, r1
        Y = Paint.HeightMemory - Ypoint - 1;
 800b4ea:	b292      	uxth	r2, r2
        break;
 800b4ec:	e772      	b.n	800b3d4 <Paint_ClearWindows+0x58>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 800b4ee:	8a47      	ldrh	r7, [r0, #18]
 800b4f0:	437a      	muls	r2, r7
 800b4f2:	08cf      	lsrs	r7, r1, #3
 800b4f4:	b2bf      	uxth	r7, r7
 800b4f6:	46b9      	mov	r9, r7
        UBYTE Rdata = Paint.Image[Addr];
 800b4f8:	6807      	ldr	r7, [r0, #0]
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 800b4fa:	444a      	add	r2, r9
        UBYTE Rdata = Paint.Image[Addr];
 800b4fc:	46ba      	mov	sl, r7
 800b4fe:	4691      	mov	r9, r2
 800b500:	5cba      	ldrb	r2, [r7, r2]
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 800b502:	2707      	movs	r7, #7
 800b504:	400f      	ands	r7, r1
 800b506:	2180      	movs	r1, #128	@ 0x80
 800b508:	4139      	asrs	r1, r7
        if (Color == BLACK)
 800b50a:	4647      	mov	r7, r8
        UBYTE Rdata = Paint.Image[Addr];
 800b50c:	44d1      	add	r9, sl
        if (Color == BLACK)
 800b50e:	2f00      	cmp	r7, #0
 800b510:	d122      	bne.n	800b558 <Paint_ClearWindows+0x1dc>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 800b512:	438a      	bics	r2, r1
 800b514:	4649      	mov	r1, r9
 800b516:	700a      	strb	r2, [r1, #0]
 800b518:	e796      	b.n	800b448 <Paint_ClearWindows+0xcc>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 800b51a:	8a47      	ldrh	r7, [r0, #18]
 800b51c:	4357      	muls	r7, r2
 800b51e:	46b9      	mov	r9, r7
 800b520:	088a      	lsrs	r2, r1, #2
        UBYTE Rdata = Paint.Image[Addr];
 800b522:	6807      	ldr	r7, [r0, #0]
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 800b524:	b292      	uxth	r2, r2
 800b526:	444a      	add	r2, r9
        UBYTE Rdata = Paint.Image[Addr];
 800b528:	46b9      	mov	r9, r7
        Rdata = Rdata & (~(0xC0 >> ((X % 4) * 2)));
 800b52a:	2703      	movs	r7, #3
 800b52c:	4039      	ands	r1, r7
 800b52e:	0049      	lsls	r1, r1, #1
 800b530:	468a      	mov	sl, r1
 800b532:	21c0      	movs	r1, #192	@ 0xc0
 800b534:	4657      	mov	r7, sl
 800b536:	4139      	asrs	r1, r7
 800b538:	468b      	mov	fp, r1
 800b53a:	4649      	mov	r1, r9
 800b53c:	465f      	mov	r7, fp
 800b53e:	5c89      	ldrb	r1, [r1, r2]
 800b540:	43b9      	bics	r1, r7
 800b542:	468b      	mov	fp, r1
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4) * 2));
 800b544:	4651      	mov	r1, sl
 800b546:	9f02      	ldr	r7, [sp, #8]
 800b548:	410f      	asrs	r7, r1
 800b54a:	0039      	movs	r1, r7
 800b54c:	465f      	mov	r7, fp
 800b54e:	430f      	orrs	r7, r1
 800b550:	0039      	movs	r1, r7
 800b552:	464f      	mov	r7, r9
 800b554:	54b9      	strb	r1, [r7, r2]
 800b556:	e777      	b.n	800b448 <Paint_ClearWindows+0xcc>
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 800b558:	430a      	orrs	r2, r1
 800b55a:	4649      	mov	r1, r9
 800b55c:	700a      	strb	r2, [r1, #0]
 800b55e:	e773      	b.n	800b448 <Paint_ClearWindows+0xcc>
 800b560:	2000055c 	.word	0x2000055c

0800b564 <Paint_DrawPoint>:
{
 800b564:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b566:	464e      	mov	r6, r9
 800b568:	4645      	mov	r5, r8
 800b56a:	46de      	mov	lr, fp
 800b56c:	4657      	mov	r7, sl
 800b56e:	b5e0      	push	{r5, r6, r7, lr}
    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800b570:	4c98      	ldr	r4, [pc, #608]	@ (800b7d4 <Paint_DrawPoint+0x270>)
{
 800b572:	b087      	sub	sp, #28
 800b574:	4688      	mov	r8, r1
 800b576:	9201      	str	r2, [sp, #4]
 800b578:	a910      	add	r1, sp, #64	@ 0x40
 800b57a:	780e      	ldrb	r6, [r1, #0]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800b57c:	88a1      	ldrh	r1, [r4, #4]
 800b57e:	4281      	cmp	r1, r0
 800b580:	d200      	bcs.n	800b584 <Paint_DrawPoint+0x20>
 800b582:	e0d6      	b.n	800b732 <Paint_DrawPoint+0x1ce>
 800b584:	88e5      	ldrh	r5, [r4, #6]
 800b586:	4545      	cmp	r5, r8
 800b588:	d200      	bcs.n	800b58c <Paint_DrawPoint+0x28>
 800b58a:	e0d2      	b.n	800b732 <Paint_DrawPoint+0x1ce>
    if (Dot_Style == DOT_FILL_AROUND)
 800b58c:	2e01      	cmp	r6, #1
 800b58e:	d100      	bne.n	800b592 <Paint_DrawPoint+0x2e>
 800b590:	e0de      	b.n	800b750 <Paint_DrawPoint+0x1ec>
        for (XDir_Num = 0; XDir_Num < Dot_Pixel; XDir_Num++)
 800b592:	2b00      	cmp	r3, #0
 800b594:	d06c      	beq.n	800b670 <Paint_DrawPoint+0x10c>
 800b596:	4641      	mov	r1, r8
 800b598:	3901      	subs	r1, #1
 800b59a:	b28a      	uxth	r2, r1
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4) * 2));
 800b59c:	2103      	movs	r1, #3
 800b59e:	4690      	mov	r8, r2
 800b5a0:	9a01      	ldr	r2, [sp, #4]
 800b5a2:	1e45      	subs	r5, r0, #1
 800b5a4:	4011      	ands	r1, r2
 800b5a6:	0189      	lsls	r1, r1, #6
 800b5a8:	9102      	str	r1, [sp, #8]
        for (XDir_Num = 0; XDir_Num < Dot_Pixel; XDir_Num++)
 800b5aa:	2102      	movs	r1, #2
 800b5ac:	1a09      	subs	r1, r1, r0
 800b5ae:	4694      	mov	ip, r2
 800b5b0:	000f      	movs	r7, r1
 800b5b2:	4640      	mov	r0, r8
 800b5b4:	b2ad      	uxth	r5, r5
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++)
 800b5b6:	2601      	movs	r6, #1
 800b5b8:	9601      	str	r6, [sp, #4]
 800b5ba:	46b8      	mov	r8, r7
 800b5bc:	001f      	movs	r7, r3
    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800b5be:	88a3      	ldrh	r3, [r4, #4]
 800b5c0:	0002      	movs	r2, r0
 800b5c2:	4681      	mov	r9, r0
 800b5c4:	42ab      	cmp	r3, r5
 800b5c6:	d34a      	bcc.n	800b65e <Paint_DrawPoint+0xfa>
 800b5c8:	88e1      	ldrh	r1, [r4, #6]
 800b5ca:	4291      	cmp	r1, r2
 800b5cc:	d33d      	bcc.n	800b64a <Paint_DrawPoint+0xe6>
    switch (Paint.Rotate)
 800b5ce:	89e1      	ldrh	r1, [r4, #14]
 800b5d0:	29b4      	cmp	r1, #180	@ 0xb4
 800b5d2:	d100      	bne.n	800b5d6 <Paint_DrawPoint+0x72>
 800b5d4:	e078      	b.n	800b6c8 <Paint_DrawPoint+0x164>
 800b5d6:	d852      	bhi.n	800b67e <Paint_DrawPoint+0x11a>
 800b5d8:	2900      	cmp	r1, #0
 800b5da:	d100      	bne.n	800b5de <Paint_DrawPoint+0x7a>
 800b5dc:	e071      	b.n	800b6c2 <Paint_DrawPoint+0x15e>
 800b5de:	295a      	cmp	r1, #90	@ 0x5a
 800b5e0:	d133      	bne.n	800b64a <Paint_DrawPoint+0xe6>
        break;
 800b5e2:	002e      	movs	r6, r5
        X = Paint.WidthMemory - Ypoint - 1;
 800b5e4:	8921      	ldrh	r1, [r4, #8]
 800b5e6:	3901      	subs	r1, #1
 800b5e8:	1a89      	subs	r1, r1, r2
 800b5ea:	b289      	uxth	r1, r1
    switch (Paint.Mirror)
 800b5ec:	8a23      	ldrh	r3, [r4, #16]
 800b5ee:	2b02      	cmp	r3, #2
 800b5f0:	d051      	beq.n	800b696 <Paint_DrawPoint+0x132>
 800b5f2:	2b02      	cmp	r3, #2
 800b5f4:	d855      	bhi.n	800b6a2 <Paint_DrawPoint+0x13e>
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d051      	beq.n	800b69e <Paint_DrawPoint+0x13a>
        X = Paint.WidthMemory - X - 1;
 800b5fa:	8923      	ldrh	r3, [r4, #8]
 800b5fc:	1e58      	subs	r0, r3, #1
 800b5fe:	1a41      	subs	r1, r0, r1
 800b600:	b289      	uxth	r1, r1
    if (X > Paint.WidthMemory || Y > Paint.HeightMemory)
 800b602:	4299      	cmp	r1, r3
 800b604:	d821      	bhi.n	800b64a <Paint_DrawPoint+0xe6>
 800b606:	8963      	ldrh	r3, [r4, #10]
 800b608:	42b3      	cmp	r3, r6
 800b60a:	d31e      	bcc.n	800b64a <Paint_DrawPoint+0xe6>
    if (Paint.Scale == 2)
 800b60c:	8ae3      	ldrh	r3, [r4, #22]
 800b60e:	2b02      	cmp	r3, #2
 800b610:	d063      	beq.n	800b6da <Paint_DrawPoint+0x176>
    else if (Paint.Scale == 4)
 800b612:	2b04      	cmp	r3, #4
 800b614:	d100      	bne.n	800b618 <Paint_DrawPoint+0xb4>
 800b616:	e072      	b.n	800b6fe <Paint_DrawPoint+0x19a>
    else if (Paint.Scale == 7)
 800b618:	2b07      	cmp	r3, #7
 800b61a:	d116      	bne.n	800b64a <Paint_DrawPoint+0xe6>
        UDOUBLE Addr = X / 2 + Y * Paint.WidthByte;
 800b61c:	8a63      	ldrh	r3, [r4, #18]
 800b61e:	435e      	muls	r6, r3
 800b620:	084b      	lsrs	r3, r1, #1
 800b622:	b29b      	uxth	r3, r3
 800b624:	18f6      	adds	r6, r6, r3
        UBYTE Rdata = Paint.Image[Addr];
 800b626:	6823      	ldr	r3, [r4, #0]
 800b628:	469a      	mov	sl, r3
        Rdata = Rdata & (~(0xF0 >> ((X % 2) * 4))); // Clear first, then set value
 800b62a:	2301      	movs	r3, #1
 800b62c:	400b      	ands	r3, r1
 800b62e:	21f0      	movs	r1, #240	@ 0xf0
 800b630:	4650      	mov	r0, sl
 800b632:	009b      	lsls	r3, r3, #2
 800b634:	4119      	asrs	r1, r3
 800b636:	5d80      	ldrb	r0, [r0, r6]
 800b638:	4388      	bics	r0, r1
 800b63a:	0001      	movs	r1, r0
        Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2) * 4));
 800b63c:	4660      	mov	r0, ip
 800b63e:	0100      	lsls	r0, r0, #4
 800b640:	4118      	asrs	r0, r3
 800b642:	0003      	movs	r3, r0
 800b644:	430b      	orrs	r3, r1
 800b646:	4651      	mov	r1, sl
 800b648:	558b      	strb	r3, [r1, r6]
            for (YDir_Num = 0; YDir_Num < Dot_Pixel; YDir_Num++)
 800b64a:	9b01      	ldr	r3, [sp, #4]
 800b64c:	42bb      	cmp	r3, r7
 800b64e:	da06      	bge.n	800b65e <Paint_DrawPoint+0xfa>
 800b650:	3301      	adds	r3, #1
 800b652:	9301      	str	r3, [sp, #4]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800b654:	88a3      	ldrh	r3, [r4, #4]
 800b656:	3201      	adds	r2, #1
 800b658:	b292      	uxth	r2, r2
 800b65a:	42ab      	cmp	r3, r5
 800b65c:	d2b4      	bcs.n	800b5c8 <Paint_DrawPoint+0x64>
 800b65e:	003b      	movs	r3, r7
 800b660:	4647      	mov	r7, r8
        for (XDir_Num = 0; XDir_Num < Dot_Pixel; XDir_Num++)
 800b662:	19ea      	adds	r2, r5, r7
 800b664:	b212      	sxth	r2, r2
 800b666:	3501      	adds	r5, #1
 800b668:	4648      	mov	r0, r9
 800b66a:	b2ad      	uxth	r5, r5
 800b66c:	429a      	cmp	r2, r3
 800b66e:	dba2      	blt.n	800b5b6 <Paint_DrawPoint+0x52>
}
 800b670:	b007      	add	sp, #28
 800b672:	bcf0      	pop	{r4, r5, r6, r7}
 800b674:	46bb      	mov	fp, r7
 800b676:	46b2      	mov	sl, r6
 800b678:	46a9      	mov	r9, r5
 800b67a:	46a0      	mov	r8, r4
 800b67c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (Paint.Rotate)
 800b67e:	2387      	movs	r3, #135	@ 0x87
 800b680:	005b      	lsls	r3, r3, #1
 800b682:	4299      	cmp	r1, r3
 800b684:	d1e1      	bne.n	800b64a <Paint_DrawPoint+0xe6>
        Y = Paint.HeightMemory - Xpoint - 1;
 800b686:	8966      	ldrh	r6, [r4, #10]
    switch (Paint.Mirror)
 800b688:	8a23      	ldrh	r3, [r4, #16]
        Y = Paint.HeightMemory - Xpoint - 1;
 800b68a:	3e01      	subs	r6, #1
 800b68c:	1b76      	subs	r6, r6, r5
        break;
 800b68e:	0011      	movs	r1, r2
        Y = Paint.HeightMemory - Xpoint - 1;
 800b690:	b2b6      	uxth	r6, r6
    switch (Paint.Mirror)
 800b692:	2b02      	cmp	r3, #2
 800b694:	d1ad      	bne.n	800b5f2 <Paint_DrawPoint+0x8e>
        Y = Paint.HeightMemory - Y - 1;
 800b696:	8963      	ldrh	r3, [r4, #10]
 800b698:	3b01      	subs	r3, #1
 800b69a:	1b9e      	subs	r6, r3, r6
 800b69c:	b2b6      	uxth	r6, r6
        X = Paint.WidthMemory - Ypoint - 1;
 800b69e:	8923      	ldrh	r3, [r4, #8]
        break;
 800b6a0:	e7af      	b.n	800b602 <Paint_DrawPoint+0x9e>
    switch (Paint.Mirror)
 800b6a2:	2b03      	cmp	r3, #3
 800b6a4:	d1d1      	bne.n	800b64a <Paint_DrawPoint+0xe6>
        X = Paint.WidthMemory - X - 1;
 800b6a6:	8923      	ldrh	r3, [r4, #8]
 800b6a8:	1e58      	subs	r0, r3, #1
 800b6aa:	1a41      	subs	r1, r0, r1
        Y = Paint.HeightMemory - Y - 1;
 800b6ac:	8960      	ldrh	r0, [r4, #10]
        X = Paint.WidthMemory - X - 1;
 800b6ae:	b289      	uxth	r1, r1
        Y = Paint.HeightMemory - Y - 1;
 800b6b0:	4682      	mov	sl, r0
 800b6b2:	2001      	movs	r0, #1
 800b6b4:	4240      	negs	r0, r0
 800b6b6:	4683      	mov	fp, r0
 800b6b8:	44da      	add	sl, fp
 800b6ba:	4650      	mov	r0, sl
 800b6bc:	1b86      	subs	r6, r0, r6
 800b6be:	b2b6      	uxth	r6, r6
        break;
 800b6c0:	e79f      	b.n	800b602 <Paint_DrawPoint+0x9e>
    switch (Paint.Rotate)
 800b6c2:	0016      	movs	r6, r2
 800b6c4:	0029      	movs	r1, r5
 800b6c6:	e791      	b.n	800b5ec <Paint_DrawPoint+0x88>
        X = Paint.WidthMemory - Xpoint - 1;
 800b6c8:	8921      	ldrh	r1, [r4, #8]
        Y = Paint.HeightMemory - Ypoint - 1;
 800b6ca:	8966      	ldrh	r6, [r4, #10]
        X = Paint.WidthMemory - Xpoint - 1;
 800b6cc:	3901      	subs	r1, #1
        Y = Paint.HeightMemory - Ypoint - 1;
 800b6ce:	3e01      	subs	r6, #1
        X = Paint.WidthMemory - Xpoint - 1;
 800b6d0:	1b49      	subs	r1, r1, r5
        Y = Paint.HeightMemory - Ypoint - 1;
 800b6d2:	1ab6      	subs	r6, r6, r2
        X = Paint.WidthMemory - Xpoint - 1;
 800b6d4:	b289      	uxth	r1, r1
        Y = Paint.HeightMemory - Ypoint - 1;
 800b6d6:	b2b6      	uxth	r6, r6
        break;
 800b6d8:	e788      	b.n	800b5ec <Paint_DrawPoint+0x88>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 800b6da:	8a63      	ldrh	r3, [r4, #18]
        UBYTE Rdata = Paint.Image[Addr];
 800b6dc:	6820      	ldr	r0, [r4, #0]
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 800b6de:	4373      	muls	r3, r6
 800b6e0:	08ce      	lsrs	r6, r1, #3
 800b6e2:	b2b6      	uxth	r6, r6
 800b6e4:	199b      	adds	r3, r3, r6
        UBYTE Rdata = Paint.Image[Addr];
 800b6e6:	18c6      	adds	r6, r0, r3
 800b6e8:	5cc3      	ldrb	r3, [r0, r3]
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 800b6ea:	2007      	movs	r0, #7
 800b6ec:	4008      	ands	r0, r1
 800b6ee:	2180      	movs	r1, #128	@ 0x80
 800b6f0:	4101      	asrs	r1, r0
        if (Color == BLACK)
 800b6f2:	4660      	mov	r0, ip
 800b6f4:	2800      	cmp	r0, #0
 800b6f6:	d128      	bne.n	800b74a <Paint_DrawPoint+0x1e6>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 800b6f8:	438b      	bics	r3, r1
 800b6fa:	7033      	strb	r3, [r6, #0]
 800b6fc:	e7a5      	b.n	800b64a <Paint_DrawPoint+0xe6>
        Rdata = Rdata & (~(0xC0 >> ((X % 4) * 2)));
 800b6fe:	2003      	movs	r0, #3
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 800b700:	8a63      	ldrh	r3, [r4, #18]
 800b702:	4373      	muls	r3, r6
 800b704:	088e      	lsrs	r6, r1, #2
        Rdata = Rdata & (~(0xC0 >> ((X % 4) * 2)));
 800b706:	4001      	ands	r1, r0
 800b708:	0049      	lsls	r1, r1, #1
 800b70a:	468a      	mov	sl, r1
 800b70c:	21c0      	movs	r1, #192	@ 0xc0
 800b70e:	4650      	mov	r0, sl
 800b710:	4101      	asrs	r1, r0
 800b712:	468b      	mov	fp, r1
 800b714:	4658      	mov	r0, fp
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 800b716:	b2b6      	uxth	r6, r6
 800b718:	199b      	adds	r3, r3, r6
        UBYTE Rdata = Paint.Image[Addr];
 800b71a:	6826      	ldr	r6, [r4, #0]
        Rdata = Rdata & (~(0xC0 >> ((X % 4) * 2)));
 800b71c:	5cf1      	ldrb	r1, [r6, r3]
 800b71e:	4381      	bics	r1, r0
 800b720:	468b      	mov	fp, r1
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4) * 2));
 800b722:	4651      	mov	r1, sl
 800b724:	9802      	ldr	r0, [sp, #8]
 800b726:	4108      	asrs	r0, r1
 800b728:	0001      	movs	r1, r0
 800b72a:	4658      	mov	r0, fp
 800b72c:	4308      	orrs	r0, r1
 800b72e:	54f0      	strb	r0, [r6, r3]
 800b730:	e78b      	b.n	800b64a <Paint_DrawPoint+0xe6>
        printf("Xpoint = %d , Paint.Width = %d  \r\n ", Xpoint, Paint.Width);
 800b732:	4b29      	ldr	r3, [pc, #164]	@ (800b7d8 <Paint_DrawPoint+0x274>)
 800b734:	000a      	movs	r2, r1
 800b736:	0001      	movs	r1, r0
 800b738:	0018      	movs	r0, r3
 800b73a:	f7fb fb59 	bl	8006df0 <printf_>
        printf("Ypoint = %d , Paint.Height = %d  \r\n ", Ypoint, Paint.Height);
 800b73e:	4641      	mov	r1, r8
 800b740:	88e2      	ldrh	r2, [r4, #6]
 800b742:	4826      	ldr	r0, [pc, #152]	@ (800b7dc <Paint_DrawPoint+0x278>)
 800b744:	f7fb fb54 	bl	8006df0 <printf_>
        return;
 800b748:	e792      	b.n	800b670 <Paint_DrawPoint+0x10c>
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 800b74a:	430b      	orrs	r3, r1
 800b74c:	7033      	strb	r3, [r6, #0]
 800b74e:	e77c      	b.n	800b64a <Paint_DrawPoint+0xe6>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++)
 800b750:	0059      	lsls	r1, r3, #1
 800b752:	1e4a      	subs	r2, r1, #1
 800b754:	4691      	mov	r9, r2
 800b756:	2a00      	cmp	r2, #0
 800b758:	dc00      	bgt.n	800b75c <Paint_DrawPoint+0x1f8>
 800b75a:	e789      	b.n	800b670 <Paint_DrawPoint+0x10c>
                if (Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 800b75c:	4642      	mov	r2, r8
 800b75e:	1ad2      	subs	r2, r2, r3
 800b760:	4693      	mov	fp, r2
 800b762:	b292      	uxth	r2, r2
 800b764:	9205      	str	r2, [sp, #20]
 800b766:	4642      	mov	r2, r8
 800b768:	1a9a      	subs	r2, r3, r2
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++)
 800b76a:	3201      	adds	r2, #1
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++)
 800b76c:	2700      	movs	r7, #0
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++)
 800b76e:	4692      	mov	sl, r2
 800b770:	465a      	mov	r2, fp
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++)
 800b772:	2500      	movs	r5, #0
 800b774:	469b      	mov	fp, r3
 800b776:	1ac6      	subs	r6, r0, r3
 800b778:	b2b6      	uxth	r6, r6
 800b77a:	9702      	str	r7, [sp, #8]
 800b77c:	9003      	str	r0, [sp, #12]
 800b77e:	9204      	str	r2, [sp, #16]
                if (Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 800b780:	9b03      	ldr	r3, [sp, #12]
 800b782:	469c      	mov	ip, r3
 800b784:	4465      	add	r5, ip
 800b786:	455d      	cmp	r5, fp
 800b788:	db1a      	blt.n	800b7c0 <Paint_DrawPoint+0x25c>
 800b78a:	9b04      	ldr	r3, [sp, #16]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	db17      	blt.n	800b7c0 <Paint_DrawPoint+0x25c>
 800b790:	9d05      	ldr	r5, [sp, #20]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800b792:	88a7      	ldrh	r7, [r4, #4]
 800b794:	42b7      	cmp	r7, r6
 800b796:	d307      	bcc.n	800b7a8 <Paint_DrawPoint+0x244>
 800b798:	88e3      	ldrh	r3, [r4, #6]
 800b79a:	42ab      	cmp	r3, r5
 800b79c:	d304      	bcc.n	800b7a8 <Paint_DrawPoint+0x244>
 800b79e:	0029      	movs	r1, r5
 800b7a0:	0030      	movs	r0, r6
 800b7a2:	9a01      	ldr	r2, [sp, #4]
 800b7a4:	f7ff fb30 	bl	800ae08 <Paint_SetPixel.part.0>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++)
 800b7a8:	4653      	mov	r3, sl
 800b7aa:	18eb      	adds	r3, r5, r3
 800b7ac:	b21b      	sxth	r3, r3
 800b7ae:	454b      	cmp	r3, r9
 800b7b0:	da06      	bge.n	800b7c0 <Paint_DrawPoint+0x25c>
                if (Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 800b7b2:	4443      	add	r3, r8
 800b7b4:	455b      	cmp	r3, fp
 800b7b6:	db03      	blt.n	800b7c0 <Paint_DrawPoint+0x25c>
 800b7b8:	3501      	adds	r5, #1
 800b7ba:	b2ad      	uxth	r5, r5
 800b7bc:	42b7      	cmp	r7, r6
 800b7be:	d2e8      	bcs.n	800b792 <Paint_DrawPoint+0x22e>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++)
 800b7c0:	9f02      	ldr	r7, [sp, #8]
 800b7c2:	3601      	adds	r6, #1
 800b7c4:	3701      	adds	r7, #1
 800b7c6:	b23b      	sxth	r3, r7
 800b7c8:	001d      	movs	r5, r3
 800b7ca:	9302      	str	r3, [sp, #8]
 800b7cc:	b2b6      	uxth	r6, r6
 800b7ce:	454b      	cmp	r3, r9
 800b7d0:	dbd6      	blt.n	800b780 <Paint_DrawPoint+0x21c>
 800b7d2:	e74d      	b.n	800b670 <Paint_DrawPoint+0x10c>
 800b7d4:	2000055c 	.word	0x2000055c
 800b7d8:	0800ef44 	.word	0x0800ef44
 800b7dc:	0800ef68 	.word	0x0800ef68

0800b7e0 <Paint_DrawRectangle>:
{
 800b7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7e2:	4657      	mov	r7, sl
 800b7e4:	464e      	mov	r6, r9
 800b7e6:	4645      	mov	r5, r8
 800b7e8:	46de      	mov	lr, fp
 800b7ea:	b5e0      	push	{r5, r6, r7, lr}
 800b7ec:	b085      	sub	sp, #20
 800b7ee:	001e      	movs	r6, r3
 800b7f0:	ab0e      	add	r3, sp, #56	@ 0x38
 800b7f2:	881b      	ldrh	r3, [r3, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800b7f4:	4f40      	ldr	r7, [pc, #256]	@ (800b8f8 <Paint_DrawRectangle+0x118>)
{
 800b7f6:	4699      	mov	r9, r3
 800b7f8:	ab0f      	add	r3, sp, #60	@ 0x3c
 800b7fa:	781b      	ldrb	r3, [r3, #0]
 800b7fc:	0005      	movs	r5, r0
 800b7fe:	469a      	mov	sl, r3
 800b800:	ab10      	add	r3, sp, #64	@ 0x40
 800b802:	781b      	ldrb	r3, [r3, #0]
 800b804:	000c      	movs	r4, r1
 800b806:	469b      	mov	fp, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800b808:	88bb      	ldrh	r3, [r7, #4]
{
 800b80a:	4690      	mov	r8, r2
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800b80c:	4283      	cmp	r3, r0
 800b80e:	d326      	bcc.n	800b85e <Paint_DrawRectangle+0x7e>
 800b810:	88fa      	ldrh	r2, [r7, #6]
 800b812:	428a      	cmp	r2, r1
 800b814:	d323      	bcc.n	800b85e <Paint_DrawRectangle+0x7e>
 800b816:	4543      	cmp	r3, r8
 800b818:	d321      	bcc.n	800b85e <Paint_DrawRectangle+0x7e>
        Xend > Paint.Width || Yend > Paint.Height)
 800b81a:	42b2      	cmp	r2, r6
 800b81c:	d31f      	bcc.n	800b85e <Paint_DrawRectangle+0x7e>
    if (Draw_Fill)
 800b81e:	465a      	mov	r2, fp
 800b820:	2a00      	cmp	r2, #0
 800b822:	d023      	beq.n	800b86c <Paint_DrawRectangle+0x8c>
        for (Ypoint = Ystart; Ypoint < Yend; Ypoint++)
 800b824:	42b1      	cmp	r1, r6
 800b826:	d21a      	bcs.n	800b85e <Paint_DrawRectangle+0x7e>
 800b828:	2200      	movs	r2, #0
 800b82a:	4693      	mov	fp, r2
 800b82c:	e000      	b.n	800b830 <Paint_DrawRectangle+0x50>
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800b82e:	88bb      	ldrh	r3, [r7, #4]
 800b830:	429d      	cmp	r5, r3
 800b832:	d810      	bhi.n	800b856 <Paint_DrawRectangle+0x76>
 800b834:	88fa      	ldrh	r2, [r7, #6]
 800b836:	42a2      	cmp	r2, r4
 800b838:	d30d      	bcc.n	800b856 <Paint_DrawRectangle+0x76>
 800b83a:	4598      	cmp	r8, r3
 800b83c:	d80b      	bhi.n	800b856 <Paint_DrawRectangle+0x76>
 800b83e:	465b      	mov	r3, fp
 800b840:	9302      	str	r3, [sp, #8]
 800b842:	4653      	mov	r3, sl
 800b844:	9301      	str	r3, [sp, #4]
 800b846:	464b      	mov	r3, r9
 800b848:	4642      	mov	r2, r8
 800b84a:	9300      	str	r3, [sp, #0]
 800b84c:	0021      	movs	r1, r4
 800b84e:	0023      	movs	r3, r4
 800b850:	0028      	movs	r0, r5
 800b852:	f7ff fc03 	bl	800b05c <Paint_DrawLine.part.0>
        for (Ypoint = Ystart; Ypoint < Yend; Ypoint++)
 800b856:	3401      	adds	r4, #1
 800b858:	b2a4      	uxth	r4, r4
 800b85a:	42a6      	cmp	r6, r4
 800b85c:	d1e7      	bne.n	800b82e <Paint_DrawRectangle+0x4e>
}
 800b85e:	b005      	add	sp, #20
 800b860:	bcf0      	pop	{r4, r5, r6, r7}
 800b862:	46bb      	mov	fp, r7
 800b864:	46b2      	mov	sl, r6
 800b866:	46a9      	mov	r9, r5
 800b868:	46a0      	mov	r8, r4
 800b86a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800b86c:	4653      	mov	r3, sl
 800b86e:	9301      	str	r3, [sp, #4]
 800b870:	464b      	mov	r3, r9
 800b872:	9202      	str	r2, [sp, #8]
 800b874:	9300      	str	r3, [sp, #0]
 800b876:	4642      	mov	r2, r8
 800b878:	000b      	movs	r3, r1
 800b87a:	f7ff fbef 	bl	800b05c <Paint_DrawLine.part.0>
 800b87e:	88bb      	ldrh	r3, [r7, #4]
 800b880:	429d      	cmp	r5, r3
 800b882:	d811      	bhi.n	800b8a8 <Paint_DrawRectangle+0xc8>
 800b884:	88fa      	ldrh	r2, [r7, #6]
 800b886:	4294      	cmp	r4, r2
 800b888:	d80e      	bhi.n	800b8a8 <Paint_DrawRectangle+0xc8>
        Xend > Paint.Width || Yend > Paint.Height)
 800b88a:	4296      	cmp	r6, r2
 800b88c:	d80c      	bhi.n	800b8a8 <Paint_DrawRectangle+0xc8>
 800b88e:	465b      	mov	r3, fp
 800b890:	9302      	str	r3, [sp, #8]
 800b892:	4653      	mov	r3, sl
 800b894:	9301      	str	r3, [sp, #4]
 800b896:	464b      	mov	r3, r9
 800b898:	002a      	movs	r2, r5
 800b89a:	9300      	str	r3, [sp, #0]
 800b89c:	0021      	movs	r1, r4
 800b89e:	0033      	movs	r3, r6
 800b8a0:	0028      	movs	r0, r5
 800b8a2:	f7ff fbdb 	bl	800b05c <Paint_DrawLine.part.0>
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800b8a6:	88bb      	ldrh	r3, [r7, #4]
 800b8a8:	4598      	cmp	r8, r3
 800b8aa:	d8d8      	bhi.n	800b85e <Paint_DrawRectangle+0x7e>
 800b8ac:	88fa      	ldrh	r2, [r7, #6]
 800b8ae:	4296      	cmp	r6, r2
 800b8b0:	d8d5      	bhi.n	800b85e <Paint_DrawRectangle+0x7e>
        Xend > Paint.Width || Yend > Paint.Height)
 800b8b2:	4294      	cmp	r4, r2
 800b8b4:	d811      	bhi.n	800b8da <Paint_DrawRectangle+0xfa>
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	9302      	str	r3, [sp, #8]
 800b8ba:	4653      	mov	r3, sl
 800b8bc:	9301      	str	r3, [sp, #4]
 800b8be:	464b      	mov	r3, r9
 800b8c0:	4642      	mov	r2, r8
 800b8c2:	9300      	str	r3, [sp, #0]
 800b8c4:	0031      	movs	r1, r6
 800b8c6:	0023      	movs	r3, r4
 800b8c8:	4640      	mov	r0, r8
 800b8ca:	f7ff fbc7 	bl	800b05c <Paint_DrawLine.part.0>
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800b8ce:	88bb      	ldrh	r3, [r7, #4]
 800b8d0:	4598      	cmp	r8, r3
 800b8d2:	d8c4      	bhi.n	800b85e <Paint_DrawRectangle+0x7e>
 800b8d4:	88fa      	ldrh	r2, [r7, #6]
 800b8d6:	42b2      	cmp	r2, r6
 800b8d8:	d3c1      	bcc.n	800b85e <Paint_DrawRectangle+0x7e>
 800b8da:	429d      	cmp	r5, r3
 800b8dc:	d8bf      	bhi.n	800b85e <Paint_DrawRectangle+0x7e>
 800b8de:	2300      	movs	r3, #0
 800b8e0:	9302      	str	r3, [sp, #8]
 800b8e2:	4653      	mov	r3, sl
 800b8e4:	9301      	str	r3, [sp, #4]
 800b8e6:	464b      	mov	r3, r9
 800b8e8:	002a      	movs	r2, r5
 800b8ea:	9300      	str	r3, [sp, #0]
 800b8ec:	0031      	movs	r1, r6
 800b8ee:	0033      	movs	r3, r6
 800b8f0:	4640      	mov	r0, r8
 800b8f2:	f7ff fbb3 	bl	800b05c <Paint_DrawLine.part.0>
 800b8f6:	e7b2      	b.n	800b85e <Paint_DrawRectangle+0x7e>
 800b8f8:	2000055c 	.word	0x2000055c

0800b8fc <Paint_DrawChar>:
{
 800b8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8fe:	b083      	sub	sp, #12
 800b900:	ac08      	add	r4, sp, #32
 800b902:	8826      	ldrh	r6, [r4, #0]
 800b904:	ac09      	add	r4, sp, #36	@ 0x24
 800b906:	8827      	ldrh	r7, [r4, #0]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800b908:	4c06      	ldr	r4, [pc, #24]	@ (800b924 <Paint_DrawChar+0x28>)
 800b90a:	88a5      	ldrh	r5, [r4, #4]
 800b90c:	4285      	cmp	r5, r0
 800b90e:	d307      	bcc.n	800b920 <Paint_DrawChar+0x24>
 800b910:	88e4      	ldrh	r4, [r4, #6]
 800b912:	428c      	cmp	r4, r1
 800b914:	d304      	bcc.n	800b920 <Paint_DrawChar+0x24>
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	9701      	str	r7, [sp, #4]
 800b91a:	9600      	str	r6, [sp, #0]
 800b91c:	f7ff fb00 	bl	800af20 <Paint_DrawChar.part.0.isra.0>
}
 800b920:	b003      	add	sp, #12
 800b922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b924:	2000055c 	.word	0x2000055c

0800b928 <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char *pString,
                         tFont *Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800b928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b92a:	464f      	mov	r7, r9
 800b92c:	4646      	mov	r6, r8
 800b92e:	46d6      	mov	lr, sl
 800b930:	b5c0      	push	{r6, r7, lr}
 800b932:	b082      	sub	sp, #8
 800b934:	4698      	mov	r8, r3
 800b936:	ab0a      	add	r3, sp, #40	@ 0x28
 800b938:	881b      	ldrh	r3, [r3, #0]
    UWORD Xpoint = Xstart;
    UWORD Ypoint = Ystart;
    //			uint32_t font_Width = (*Font).chars[Acsii_Char - ' '].image->width;
    //		uint32_t font_Height = (*Font).chars[Acsii_Char - ' ' ].image->height;

    if (Xstart > Paint.Width || Ystart > Paint.Height)
 800b93a:	4e1c      	ldr	r6, [pc, #112]	@ (800b9ac <Paint_DrawString_EN+0x84>)
{
 800b93c:	4699      	mov	r9, r3
 800b93e:	ab0b      	add	r3, sp, #44	@ 0x2c
 800b940:	000f      	movs	r7, r1
 800b942:	881b      	ldrh	r3, [r3, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height)
 800b944:	88b1      	ldrh	r1, [r6, #4]
{
 800b946:	0004      	movs	r4, r0
 800b948:	0015      	movs	r5, r2
 800b94a:	469a      	mov	sl, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height)
 800b94c:	4281      	cmp	r1, r0
 800b94e:	d326      	bcc.n	800b99e <Paint_DrawString_EN+0x76>
 800b950:	88f3      	ldrh	r3, [r6, #6]
 800b952:	42bb      	cmp	r3, r7
 800b954:	d323      	bcc.n	800b99e <Paint_DrawString_EN+0x76>
    {
        DE_BUG("Paint_DrawString_EN Input exceeds the normal display range\r\n");
        return;
    }

    while (*pString != '\0')
 800b956:	7812      	ldrb	r2, [r2, #0]
 800b958:	2a00      	cmp	r2, #0
 800b95a:	d020      	beq.n	800b99e <Paint_DrawString_EN+0x76>
 800b95c:	4643      	mov	r3, r8
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	e000      	b.n	800b964 <Paint_DrawString_EN+0x3c>
    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800b962:	88b1      	ldrh	r1, [r6, #4]
 800b964:	428c      	cmp	r4, r1
 800b966:	d80d      	bhi.n	800b984 <Paint_DrawString_EN+0x5c>
 800b968:	88f1      	ldrh	r1, [r6, #6]
 800b96a:	42b9      	cmp	r1, r7
 800b96c:	d30a      	bcc.n	800b984 <Paint_DrawString_EN+0x5c>
 800b96e:	4649      	mov	r1, r9
 800b970:	9101      	str	r1, [sp, #4]
 800b972:	4651      	mov	r1, sl
 800b974:	0020      	movs	r0, r4
 800b976:	9100      	str	r1, [sp, #0]
 800b978:	0039      	movs	r1, r7
 800b97a:	f7ff fad1 	bl	800af20 <Paint_DrawChar.part.0.isra.0>
        //        }
        Paint_DrawChar(Xpoint, Ypoint, *pString, Font, Color_Background, Color_Foreground);

        // The next character of the address

        uint32_t font_Width = (*Font).chars[*pString - ' '].image->width;
 800b97e:	4643      	mov	r3, r8
 800b980:	782a      	ldrb	r2, [r5, #0]
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	490a      	ldr	r1, [pc, #40]	@ (800b9b0 <Paint_DrawString_EN+0x88>)
        // The next word of the abscissa increases the font of the broadband
        Xpoint += font_Width;
        pString++;
 800b986:	3501      	adds	r5, #1
        uint32_t font_Width = (*Font).chars[*pString - ' '].image->width;
 800b988:	468c      	mov	ip, r1
 800b98a:	4462      	add	r2, ip
 800b98c:	00d2      	lsls	r2, r2, #3
 800b98e:	189a      	adds	r2, r3, r2
 800b990:	6852      	ldr	r2, [r2, #4]
        Xpoint += font_Width;
 800b992:	8892      	ldrh	r2, [r2, #4]
 800b994:	18a4      	adds	r4, r4, r2
    while (*pString != '\0')
 800b996:	782a      	ldrb	r2, [r5, #0]
        Xpoint += font_Width;
 800b998:	b2a4      	uxth	r4, r4
    while (*pString != '\0')
 800b99a:	2a00      	cmp	r2, #0
 800b99c:	d1e1      	bne.n	800b962 <Paint_DrawString_EN+0x3a>
    }
}
 800b99e:	b002      	add	sp, #8
 800b9a0:	bce0      	pop	{r5, r6, r7}
 800b9a2:	46ba      	mov	sl, r7
 800b9a4:	46b1      	mov	r9, r6
 800b9a6:	46a8      	mov	r8, r5
 800b9a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9aa:	46c0      	nop			@ (mov r8, r8)
 800b9ac:	2000055c 	.word	0x2000055c
 800b9b0:	1fffffe0 	.word	0x1fffffe0

0800b9b4 <battery_out>:
static const struct X0_Y0 big_0 = {67, 30};		//	Big 1
static const struct X0_Y0 small_0 = {142,46};		//	Small 0

// *************************************************************************************

void battery_out(uint16_t bat){  // Battery voltage out  X.Y
 800b9b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9b6:	0005      	movs	r5, r0
	uint8_t x = 3;
	uint8_t y = 160;
//	const uint16_t Ubat_min = 220;				// Battery min voltage 2.2 V (display).
	
	sprintf(str_array, "%2d", bat);
	Paint_ClearWindows(x, y, x+40, y+29, WHITE);	
 800b9b8:	26ff      	movs	r6, #255	@ 0xff

	Paint_DrawChar(x, y, str_array[0], &calibri_24pts, BLACK, WHITE);	// 	12, 29, 8
 800b9ba:	2700      	movs	r7, #0
void battery_out(uint16_t bat){  // Battery voltage out  X.Y
 800b9bc:	b083      	sub	sp, #12
	printf("**  Vbat out\n");
 800b9be:	4815      	ldr	r0, [pc, #84]	@ (800ba14 <battery_out+0x60>)
 800b9c0:	f7fb fa16 	bl	8006df0 <printf_>
	sprintf(str_array, "%2d", bat);
 800b9c4:	4c14      	ldr	r4, [pc, #80]	@ (800ba18 <battery_out+0x64>)
 800b9c6:	002a      	movs	r2, r5
 800b9c8:	0020      	movs	r0, r4
 800b9ca:	4914      	ldr	r1, [pc, #80]	@ (800ba1c <battery_out+0x68>)
 800b9cc:	f7fb fa24 	bl	8006e18 <sprintf_>
	Paint_ClearWindows(x, y, x+40, y+29, WHITE);	
 800b9d0:	23bd      	movs	r3, #189	@ 0xbd
 800b9d2:	222b      	movs	r2, #43	@ 0x2b
 800b9d4:	21a0      	movs	r1, #160	@ 0xa0
 800b9d6:	2003      	movs	r0, #3
 800b9d8:	9600      	str	r6, [sp, #0]
 800b9da:	f7ff fccf 	bl	800b37c <Paint_ClearWindows>
	Paint_DrawChar(x, y, str_array[0], &calibri_24pts, BLACK, WHITE);	// 	12, 29, 8
 800b9de:	4d10      	ldr	r5, [pc, #64]	@ (800ba20 <battery_out+0x6c>)
 800b9e0:	7822      	ldrb	r2, [r4, #0]
 800b9e2:	002b      	movs	r3, r5
 800b9e4:	21a0      	movs	r1, #160	@ 0xa0
 800b9e6:	2003      	movs	r0, #3
 800b9e8:	9601      	str	r6, [sp, #4]
 800b9ea:	9700      	str	r7, [sp, #0]
 800b9ec:	f7ff ff86 	bl	800b8fc <Paint_DrawChar>
	Paint_DrawChar(x+12, y, str_array[1], &calibri_24pts, BLACK, WHITE);	
 800b9f0:	7862      	ldrb	r2, [r4, #1]
 800b9f2:	002b      	movs	r3, r5
 800b9f4:	21a0      	movs	r1, #160	@ 0xa0
 800b9f6:	200f      	movs	r0, #15
 800b9f8:	9601      	str	r6, [sp, #4]
 800b9fa:	9700      	str	r7, [sp, #0]
 800b9fc:	f7ff ff7e 	bl	800b8fc <Paint_DrawChar>
	Paint_DrawChar(x+12+12, y, str_array[2], &calibri_24pts, BLACK, WHITE);	
 800ba00:	78a2      	ldrb	r2, [r4, #2]
 800ba02:	002b      	movs	r3, r5
 800ba04:	21a0      	movs	r1, #160	@ 0xa0
 800ba06:	201b      	movs	r0, #27
 800ba08:	9601      	str	r6, [sp, #4]
 800ba0a:	9700      	str	r7, [sp, #0]
 800ba0c:	f7ff ff76 	bl	800b8fc <Paint_DrawChar>
	
//		EPD_1IN54_V2_DisplayPart(BlackImage);	
}
 800ba10:	b003      	add	sp, #12
 800ba12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba14:	0801a224 	.word	0x0801a224
 800ba18:	20000574 	.word	0x20000574
 800ba1c:	0801a234 	.word	0x0801a234
 800ba20:	20000160 	.word	0x20000160

0800ba24 <temperature_out>:


void temperature_out(uint16_t tempr){
 800ba24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba26:	0005      	movs	r5, r0
 800ba28:	b083      	sub	sp, #12
	
	printf("**  T out\n");
 800ba2a:	481a      	ldr	r0, [pc, #104]	@ (800ba94 <temperature_out+0x70>)
 800ba2c:	f7fb f9e0 	bl	8006df0 <printf_>
	sprintf(str_array, "%3d", tempr);						
 800ba30:	002a      	movs	r2, r5
	Paint_ClearWindows(big_1.x, big_1.y, 142 + 41, big_1.y + 101, WHITE);	// 40 ms		
 800ba32:	25ff      	movs	r5, #255	@ 0xff

	Paint_DrawChar(big_1.x, big_1.y, str_array[0], &calibri_104pts, BLACK, WHITE); // 15 ms
 800ba34:	2700      	movs	r7, #0
	sprintf(str_array, "%3d", tempr);						
 800ba36:	4c18      	ldr	r4, [pc, #96]	@ (800ba98 <temperature_out+0x74>)
 800ba38:	4918      	ldr	r1, [pc, #96]	@ (800ba9c <temperature_out+0x78>)
 800ba3a:	0020      	movs	r0, r4
 800ba3c:	f7fb f9ec 	bl	8006e18 <sprintf_>
	Paint_ClearWindows(big_1.x, big_1.y, 142 + 41, big_1.y + 101, WHITE);	// 40 ms		
 800ba40:	2383      	movs	r3, #131	@ 0x83
 800ba42:	22b7      	movs	r2, #183	@ 0xb7
 800ba44:	211e      	movs	r1, #30
 800ba46:	200a      	movs	r0, #10
 800ba48:	9500      	str	r5, [sp, #0]
 800ba4a:	f7ff fc97 	bl	800b37c <Paint_ClearWindows>
	Paint_DrawChar(big_1.x, big_1.y, str_array[0], &calibri_104pts, BLACK, WHITE); // 15 ms
 800ba4e:	4e14      	ldr	r6, [pc, #80]	@ (800baa0 <temperature_out+0x7c>)
 800ba50:	7822      	ldrb	r2, [r4, #0]
 800ba52:	0033      	movs	r3, r6
 800ba54:	211e      	movs	r1, #30
 800ba56:	200a      	movs	r0, #10
 800ba58:	9501      	str	r5, [sp, #4]
 800ba5a:	9700      	str	r7, [sp, #0]
 800ba5c:	f7ff ff4e 	bl	800b8fc <Paint_DrawChar>
	Paint_DrawChar(big_0.x, big_0.y, str_array[1], &calibri_104pts, BLACK, WHITE);
 800ba60:	7862      	ldrb	r2, [r4, #1]
 800ba62:	0033      	movs	r3, r6
 800ba64:	211e      	movs	r1, #30
 800ba66:	2043      	movs	r0, #67	@ 0x43
 800ba68:	9501      	str	r5, [sp, #4]
 800ba6a:	9700      	str	r7, [sp, #0]
 800ba6c:	f7ff ff46 	bl	800b8fc <Paint_DrawChar>
	Paint_DrawPoint(131, 100, BLACK, DOT_PIXEL_5X5, DOT_FILL_AROUND); //Draw decimal point
 800ba70:	2301      	movs	r3, #1
 800ba72:	2200      	movs	r2, #0
 800ba74:	9300      	str	r3, [sp, #0]
 800ba76:	2164      	movs	r1, #100	@ 0x64
 800ba78:	2083      	movs	r0, #131	@ 0x83
 800ba7a:	3304      	adds	r3, #4
 800ba7c:	f7ff fd72 	bl	800b564 <Paint_DrawPoint>
	Paint_DrawChar(small_0.x, small_0.y, str_array[2], &calibri_80pts, BLACK, WHITE);					
 800ba80:	78a2      	ldrb	r2, [r4, #2]
 800ba82:	212e      	movs	r1, #46	@ 0x2e
 800ba84:	208e      	movs	r0, #142	@ 0x8e
 800ba86:	4b07      	ldr	r3, [pc, #28]	@ (800baa4 <temperature_out+0x80>)
 800ba88:	9501      	str	r5, [sp, #4]
 800ba8a:	9700      	str	r7, [sp, #0]
 800ba8c:	f7ff ff36 	bl	800b8fc <Paint_DrawChar>

//	EPD_1IN54_V2_DisplayPart(BlackImage);	// 0.84 sec ms
}
 800ba90:	b003      	add	sp, #12
 800ba92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba94:	0801a238 	.word	0x0801a238
 800ba98:	20000574 	.word	0x20000574
 800ba9c:	0801a244 	.word	0x0801a244
 800baa0:	20000150 	.word	0x20000150
 800baa4:	20000170 	.word	0x20000170

0800baa8 <humidity_out>:


void humidity_out(uint16_t hum){
 800baa8:	b570      	push	{r4, r5, r6, lr}
 800baaa:	0005      	movs	r5, r0
 800baac:	b084      	sub	sp, #16

	printf("**  H out\n");
	uint8_t x = 125;
	uint8_t y = 150;
	char pcent = '%';
 800baae:	260f      	movs	r6, #15
	printf("**  H out\n");
 800bab0:	4811      	ldr	r0, [pc, #68]	@ (800baf8 <humidity_out+0x50>)
 800bab2:	f7fb f99d 	bl	8006df0 <printf_>
	char pcent = '%';
 800bab6:	2325      	movs	r3, #37	@ 0x25
	sprintf(str_array, "%2d", hum);
 800bab8:	002a      	movs	r2, r5
	
	/******************************************************************************
	void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,tFont* Font, UWORD Color_Foreground, UWORD Color_Background)
	******************************************************************************/

	Paint_ClearWindows(x, y, 200, 197, WHITE);	// 10^1
 800baba:	25ff      	movs	r5, #255	@ 0xff
	sprintf(str_array, "%2d", hum);
 800babc:	4c0f      	ldr	r4, [pc, #60]	@ (800bafc <humidity_out+0x54>)
	char pcent = '%';
 800babe:	446e      	add	r6, sp
	sprintf(str_array, "%2d", hum);
 800bac0:	0020      	movs	r0, r4
 800bac2:	490f      	ldr	r1, [pc, #60]	@ (800bb00 <humidity_out+0x58>)
	char pcent = '%';
 800bac4:	7033      	strb	r3, [r6, #0]
	sprintf(str_array, "%2d", hum);
 800bac6:	f7fb f9a7 	bl	8006e18 <sprintf_>
    strncat(str_array, &pcent, 1);
 800baca:	0031      	movs	r1, r6
 800bacc:	2201      	movs	r2, #1
 800bace:	0020      	movs	r0, r4
 800bad0:	f001 f848 	bl	800cb64 <strncat>
	Paint_ClearWindows(x, y, 200, 197, WHITE);	// 10^1
 800bad4:	23c5      	movs	r3, #197	@ 0xc5
 800bad6:	22c8      	movs	r2, #200	@ 0xc8
 800bad8:	2196      	movs	r1, #150	@ 0x96
 800bada:	207d      	movs	r0, #125	@ 0x7d
 800badc:	9500      	str	r5, [sp, #0]
 800bade:	f7ff fc4d 	bl	800b37c <Paint_ClearWindows>
	Paint_DrawString_EN(x, y, (char*)str_array, &calibri_36pts, WHITE, BLACK); // 20, 34
 800bae2:	2200      	movs	r2, #0
 800bae4:	2196      	movs	r1, #150	@ 0x96
 800bae6:	9201      	str	r2, [sp, #4]
 800bae8:	207d      	movs	r0, #125	@ 0x7d
 800baea:	0022      	movs	r2, r4
 800baec:	4b05      	ldr	r3, [pc, #20]	@ (800bb04 <humidity_out+0x5c>)
 800baee:	9500      	str	r5, [sp, #0]
 800baf0:	f7ff ff1a 	bl	800b928 <Paint_DrawString_EN>

}
 800baf4:	b004      	add	sp, #16
 800baf6:	bd70      	pop	{r4, r5, r6, pc}
 800baf8:	0801a248 	.word	0x0801a248
 800bafc:	20000574 	.word	0x20000574
 800bb00:	0801a234 	.word	0x0801a234
 800bb04:	20000168 	.word	0x20000168

0800bb08 <ESP_Init>:



//  **************************************************************************************

int ESP_Init(void){ 
 800bb08:	b510      	push	{r4, lr}
	printf("ESP_Init\n");
 800bb0a:	481c      	ldr	r0, [pc, #112]	@ (800bb7c <ESP_Init+0x74>)
int ESP_Init(void){ 
 800bb0c:	b084      	sub	sp, #16
	printf("ESP_Init\n");
 800bb0e:	f7fb f96f 	bl	8006df0 <printf_>
    DEV_Module_Init();		// DC_L();SPI_CS_H();RST_H(); - set initial values
 800bb12:	f7fe fd6f 	bl	800a5f4 <DEV_Module_Init>
    EPD_1IN54_V2_Init();	// Reset pin set low, set LUT etc.
 800bb16:	f7fe fe4f 	bl	800a7b8 <EPD_1IN54_V2_Init>

    //Create a new image cache    
    /* !!!  you have to edit the startup_stm32fxxx.s file and set a heap size = 1400 !!!  */
    UWORD Imagesize = ((EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1)) * EPD_1IN54_V2_HEIGHT;
    if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 800bb1a:	4819      	ldr	r0, [pc, #100]	@ (800bb80 <ESP_Init+0x78>)
 800bb1c:	f000 f9dc 	bl	800bed8 <malloc>
 800bb20:	4c18      	ldr	r4, [pc, #96]	@ (800bb84 <ESP_Init+0x7c>)
 800bb22:	6020      	str	r0, [r4, #0]
 800bb24:	2800      	cmp	r0, #0
 800bb26:	d022      	beq.n	800bb6e <ESP_Init+0x66>
        printf("Failed to apply for black memory...\r\n");
        return -1;
    }
	
	Paint_NewImage(BlackImage, EPD_1IN54_V2_WIDTH, EPD_1IN54_V2_HEIGHT, 0, WHITE);
 800bb28:	23ff      	movs	r3, #255	@ 0xff
 800bb2a:	22c8      	movs	r2, #200	@ 0xc8
 800bb2c:	21c8      	movs	r1, #200	@ 0xc8
 800bb2e:	9300      	str	r3, [sp, #0]
 800bb30:	2300      	movs	r3, #0
 800bb32:	f7ff fbbd 	bl	800b2b0 <Paint_NewImage>
	
//  	Paint_Clear(WHITE);
    Paint_SelectImage(BlackImage);
 800bb36:	6820      	ldr	r0, [r4, #0]
 800bb38:	f7ff fbda 	bl	800b2f0 <Paint_SelectImage>
    Paint_Clear(WHITE);
 800bb3c:	20ff      	movs	r0, #255	@ 0xff
 800bb3e:	f7ff fbdd 	bl	800b2fc <Paint_Clear>
	Paint_DrawRectangle(2, 3, 198, 140, BLACK, DOT_PIXEL_2X2, DRAW_FILL_EMPTY);
 800bb42:	2300      	movs	r3, #0
 800bb44:	2202      	movs	r2, #2
 800bb46:	2103      	movs	r1, #3
 800bb48:	2002      	movs	r0, #2
 800bb4a:	9302      	str	r3, [sp, #8]
 800bb4c:	9201      	str	r2, [sp, #4]
 800bb4e:	9300      	str	r3, [sp, #0]
 800bb50:	32c4      	adds	r2, #196	@ 0xc4
 800bb52:	338c      	adds	r3, #140	@ 0x8c
 800bb54:	f7ff fe44 	bl	800b7e0 <Paint_DrawRectangle>
	
    EPD_1IN54_V2_Display(BlackImage);	// Write data to display's RAM (do you really need it?)
 800bb58:	6820      	ldr	r0, [r4, #0]
 800bb5a:	f7fe fff7 	bl	800ab4c <EPD_1IN54_V2_Display>
	 
    EPD_1IN54_V2_DisplayPartBaseImage(BlackImage);
 800bb5e:	6820      	ldr	r0, [r4, #0]
 800bb60:	f7ff f85e 	bl	800ac20 <EPD_1IN54_V2_DisplayPartBaseImage>
	EPD_1IN54_V2_Init_Partial();
 800bb64:	f7fe ff40 	bl	800a9e8 <EPD_1IN54_V2_Init_Partial>
	
	return 0;
 800bb68:	2000      	movs	r0, #0
}
 800bb6a:	b004      	add	sp, #16
 800bb6c:	bd10      	pop	{r4, pc}
        printf("Failed to apply for black memory...\r\n");
 800bb6e:	4806      	ldr	r0, [pc, #24]	@ (800bb88 <ESP_Init+0x80>)
 800bb70:	f7fb f93e 	bl	8006df0 <printf_>
        return -1;
 800bb74:	2001      	movs	r0, #1
 800bb76:	4240      	negs	r0, r0
 800bb78:	e7f7      	b.n	800bb6a <ESP_Init+0x62>
 800bb7a:	46c0      	nop			@ (mov r8, r8)
 800bb7c:	0801a254 	.word	0x0801a254
 800bb80:	00001388 	.word	0x00001388
 800bb84:	2000057c 	.word	0x2000057c
 800bb88:	0801a260 	.word	0x0801a260

0800bb8c <Show_RTC_Calendar>:
}



void Show_RTC_Calendar(void)
{
 800bb8c:	b5f0      	push	{r4, r5, r6, r7, lr}
__STATIC_INLINE uint32_t LL_RTC_TIME_GetMinute(RTC_TypeDef *RTCx)
{
  register uint32_t temp = 0U;

  temp = READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU));
  return (uint32_t)((((temp & RTC_TR_MNT) >> RTC_TR_MNT_Pos) << 4U) | ((temp & RTC_TR_MNU) >> RTC_TR_MNU_Pos));
 800bb8e:	250f      	movs	r5, #15
  temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU));
 800bb90:	23fc      	movs	r3, #252	@ 0xfc
  temp = READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU));
 800bb92:	24fe      	movs	r4, #254	@ 0xfe
 800bb94:	46c6      	mov	lr, r8
  return (uint32_t)((((temp & RTC_TR_MNT) >> RTC_TR_MNT_Pos) << 4U) | ((temp & RTC_TR_MNU) >> RTC_TR_MNU_Pos));
 800bb96:	46a8      	mov	r8, r5
  temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU));
 800bb98:	4e3f      	ldr	r6, [pc, #252]	@ (800bc98 <Show_RTC_Calendar+0x10c>)
 800bb9a:	039b      	lsls	r3, r3, #14
 800bb9c:	6832      	ldr	r2, [r6, #0]
 800bb9e:	6830      	ldr	r0, [r6, #0]
 800bba0:	401a      	ands	r2, r3
 800bba2:	4018      	ands	r0, r3
  temp = READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU));
 800bba4:	6833      	ldr	r3, [r6, #0]
 800bba6:	01e4      	lsls	r4, r4, #7
 800bba8:	4023      	ands	r3, r4
  /* Note: need to convert in decimal value in using __LL_RTC_CONVERT_BCD2BIN helper macro */
  /* Display time Format : hh:mm:ss */
  sprintf((char*)aEndTime,"%.2d:%.2d:%.2d", __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC)), 
          __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC)), 
 800bbaa:	0b1b      	lsrs	r3, r3, #12
 800bbac:	009d      	lsls	r5, r3, #2
 800bbae:	46ac      	mov	ip, r5
  return (uint32_t)((((temp & RTC_TR_MNT) >> RTC_TR_MNT_Pos) << 4U) | ((temp & RTC_TR_MNU) >> RTC_TR_MNU_Pos));
 800bbb0:	4645      	mov	r5, r8
  temp = READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU));
 800bbb2:	6831      	ldr	r1, [r6, #0]
 800bbb4:	4463      	add	r3, ip
 800bbb6:	4021      	ands	r1, r4
 800bbb8:	005b      	lsls	r3, r3, #1
 800bbba:	469c      	mov	ip, r3
  return (uint32_t)((((temp & RTC_TR_MNT) >> RTC_TR_MNT_Pos) << 4U) | ((temp & RTC_TR_MNU) >> RTC_TR_MNU_Pos));
 800bbbc:	0b0b      	lsrs	r3, r1, #12
 800bbbe:	0a09      	lsrs	r1, r1, #8
 800bbc0:	011b      	lsls	r3, r3, #4
 800bbc2:	4029      	ands	r1, r5
 800bbc4:	4319      	orrs	r1, r3
 800bbc6:	4029      	ands	r1, r5
  sprintf((char*)aEndTime,"%.2d:%.2d:%.2d", __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC)), 
 800bbc8:	000b      	movs	r3, r1
 800bbca:	0d12      	lsrs	r2, r2, #20
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSecond(RTC_TypeDef *RTCx)
{
  register uint32_t temp = 0U;

  temp = READ_BIT(RTCx->TR, (RTC_TR_ST | RTC_TR_SU));
 800bbcc:	6834      	ldr	r4, [r6, #0]
 800bbce:	0091      	lsls	r1, r2, #2
 800bbd0:	1852      	adds	r2, r2, r1
  return (uint32_t)((((temp & RTC_TR_HT) >> RTC_TR_HT_Pos) << 4U) | ((temp & RTC_TR_HU) >> RTC_TR_HU_Pos));
 800bbd2:	0d01      	lsrs	r1, r0, #20
 800bbd4:	0c00      	lsrs	r0, r0, #16
 800bbd6:	0109      	lsls	r1, r1, #4
 800bbd8:	4028      	ands	r0, r5
          __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC)));
 800bbda:	0664      	lsls	r4, r4, #25
 800bbdc:	4308      	orrs	r0, r1
 800bbde:	0f64      	lsrs	r4, r4, #29
  sprintf((char*)aEndTime,"%.2d:%.2d:%.2d", __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC)), 
 800bbe0:	4028      	ands	r0, r5
          __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC)));
 800bbe2:	00a5      	lsls	r5, r4, #2
  sprintf((char*)aEndTime,"%.2d:%.2d:%.2d", __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC)), 
 800bbe4:	4463      	add	r3, ip
          __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC)));
 800bbe6:	46ac      	mov	ip, r5
 800bbe8:	4645      	mov	r5, r8
{
 800bbea:	b500      	push	{lr}
  temp = READ_BIT(RTCx->TR, (RTC_TR_ST | RTC_TR_SU));
 800bbec:	6837      	ldr	r7, [r6, #0]
          __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC)));
 800bbee:	4464      	add	r4, ip
 800bbf0:	402f      	ands	r7, r5
 800bbf2:	0064      	lsls	r4, r4, #1
 800bbf4:	19e4      	adds	r4, r4, r7
  sprintf((char*)aEndTime,"%.2d:%.2d:%.2d", __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC)), 
 800bbf6:	0052      	lsls	r2, r2, #1
{
 800bbf8:	b082      	sub	sp, #8
  sprintf((char*)aEndTime,"%.2d:%.2d:%.2d", __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC)), 
 800bbfa:	1812      	adds	r2, r2, r0
 800bbfc:	b2e4      	uxtb	r4, r4
 800bbfe:	4827      	ldr	r0, [pc, #156]	@ (800bc9c <Show_RTC_Calendar+0x110>)
 800bc00:	9400      	str	r4, [sp, #0]
 800bc02:	4927      	ldr	r1, [pc, #156]	@ (800bca0 <Show_RTC_Calendar+0x114>)
 800bc04:	0007      	movs	r7, r0
 800bc06:	f7fb f907 	bl	8006e18 <sprintf_>
  */
__STATIC_INLINE uint32_t LL_RTC_DATE_GetMonth(RTC_TypeDef *RTCx)
{
  register uint32_t temp = 0U;

  temp = READ_BIT(RTCx->DR, (RTC_DR_MT | RTC_DR_MU));
 800bc0a:	23f8      	movs	r3, #248	@ 0xf8
 800bc0c:	6872      	ldr	r2, [r6, #4]
 800bc0e:	6870      	ldr	r0, [r6, #4]
 800bc10:	015b      	lsls	r3, r3, #5
  */
__STATIC_INLINE uint32_t LL_RTC_DATE_GetDay(RTC_TypeDef *RTCx)
{
  register uint32_t temp = 0U;

  temp = READ_BIT(RTCx->DR, (RTC_DR_DT | RTC_DR_DU));
 800bc12:	6871      	ldr	r1, [r6, #4]
  temp = READ_BIT(RTCx->DR, (RTC_DR_MT | RTC_DR_MU));
 800bc14:	4018      	ands	r0, r3
 800bc16:	401a      	ands	r2, r3
  temp = READ_BIT(RTCx->DR, (RTC_DR_DT | RTC_DR_DU));
 800bc18:	6873      	ldr	r3, [r6, #4]
  
  /* Display date Format : mm-dd-yy */
  sprintf((char*)aEndDate,"%.2d-%.2d-%.2d", __LL_RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC)), 
          __LL_RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetDay(RTC)), 
 800bc1a:	0689      	lsls	r1, r1, #26
 800bc1c:	469c      	mov	ip, r3
  temp = READ_BIT(RTCx->DR, (RTC_DR_YT | RTC_DR_YU));
 800bc1e:	23ff      	movs	r3, #255	@ 0xff
 800bc20:	6874      	ldr	r4, [r6, #4]
 800bc22:	6876      	ldr	r6, [r6, #4]
 800bc24:	041b      	lsls	r3, r3, #16
 800bc26:	0f89      	lsrs	r1, r1, #30
 800bc28:	401e      	ands	r6, r3
 800bc2a:	401c      	ands	r4, r3
 800bc2c:	008b      	lsls	r3, r1, #2
 800bc2e:	18cb      	adds	r3, r1, r3
 800bc30:	4661      	mov	r1, ip
  sprintf((char*)aEndDate,"%.2d-%.2d-%.2d", __LL_RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC)), 
 800bc32:	0b12      	lsrs	r2, r2, #12
          __LL_RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetDay(RTC)), 
 800bc34:	4029      	ands	r1, r5
 800bc36:	005b      	lsls	r3, r3, #1
 800bc38:	185b      	adds	r3, r3, r1
  sprintf((char*)aEndDate,"%.2d-%.2d-%.2d", __LL_RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC)), 
 800bc3a:	0091      	lsls	r1, r2, #2
 800bc3c:	1852      	adds	r2, r2, r1
  return (uint32_t)((((temp & RTC_DR_MT) >> RTC_DR_MT_Pos) << 4U) | ((temp & RTC_DR_MU) >> RTC_DR_MU_Pos));
 800bc3e:	0b01      	lsrs	r1, r0, #12
 800bc40:	0a00      	lsrs	r0, r0, #8
 800bc42:	0109      	lsls	r1, r1, #4
 800bc44:	4028      	ands	r0, r5
 800bc46:	4308      	orrs	r0, r1
          2000 + __LL_RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC)));
 800bc48:	0d24      	lsrs	r4, r4, #20
  sprintf((char*)aEndDate,"%.2d-%.2d-%.2d", __LL_RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC)), 
 800bc4a:	4028      	ands	r0, r5
          2000 + __LL_RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC)));
 800bc4c:	00a5      	lsls	r5, r4, #2
 800bc4e:	46ac      	mov	ip, r5
  return (uint32_t)((((temp & RTC_DR_YT) >> RTC_DR_YT_Pos) << 4U) | ((temp & RTC_DR_YU) >> RTC_DR_YU_Pos));
 800bc50:	0d35      	lsrs	r5, r6, #20
 800bc52:	012d      	lsls	r5, r5, #4
 800bc54:	4464      	add	r4, ip
 800bc56:	46ac      	mov	ip, r5
 800bc58:	4645      	mov	r5, r8
 800bc5a:	0c36      	lsrs	r6, r6, #16
 800bc5c:	402e      	ands	r6, r5
 800bc5e:	4665      	mov	r5, ip
 800bc60:	432e      	orrs	r6, r5
 800bc62:	4645      	mov	r5, r8
 800bc64:	0064      	lsls	r4, r4, #1
 800bc66:	4035      	ands	r5, r6
 800bc68:	1964      	adds	r4, r4, r5
  sprintf((char*)aEndDate,"%.2d-%.2d-%.2d", __LL_RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC)), 
 800bc6a:	25fa      	movs	r5, #250	@ 0xfa
 800bc6c:	00ed      	lsls	r5, r5, #3
 800bc6e:	46ac      	mov	ip, r5
 800bc70:	0052      	lsls	r2, r2, #1
 800bc72:	1812      	adds	r2, r2, r0
          2000 + __LL_RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC)));
 800bc74:	b2e4      	uxtb	r4, r4
  sprintf((char*)aEndDate,"%.2d-%.2d-%.2d", __LL_RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC)), 
 800bc76:	480b      	ldr	r0, [pc, #44]	@ (800bca4 <Show_RTC_Calendar+0x118>)
 800bc78:	4464      	add	r4, ip
 800bc7a:	9400      	str	r4, [sp, #0]
 800bc7c:	0004      	movs	r4, r0
 800bc7e:	b2db      	uxtb	r3, r3
 800bc80:	4909      	ldr	r1, [pc, #36]	@ (800bca8 <Show_RTC_Calendar+0x11c>)
 800bc82:	f7fb f8c9 	bl	8006e18 <sprintf_>
  printf("%s\t %s\n", aEndTime, aEndDate);
 800bc86:	0022      	movs	r2, r4
 800bc88:	0039      	movs	r1, r7
 800bc8a:	4808      	ldr	r0, [pc, #32]	@ (800bcac <Show_RTC_Calendar+0x120>)
 800bc8c:	f7fb f8b0 	bl	8006df0 <printf_>
  
} 
 800bc90:	b002      	add	sp, #8
 800bc92:	bc80      	pop	{r7}
 800bc94:	46b8      	mov	r8, r7
 800bc96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc98:	40002800 	.word	0x40002800
 800bc9c:	20000594 	.word	0x20000594
 800bca0:	0801a288 	.word	0x0801a288
 800bca4:	20000580 	.word	0x20000580
 800bca8:	0801a298 	.word	0x0801a298
 800bcac:	0801a2a8 	.word	0x0801a2a8

0800bcb0 <final_message>:
void final_message(uint16_t bat_voltage){ 	// sleep
 800bcb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcb2:	46c6      	mov	lr, r8
 800bcb4:	0004      	movs	r4, r0
 800bcb6:	b500      	push	{lr}
	Paint_DrawString_EN(Xstart, Ystart, "Vbat:", &calibri_20pts, WHITE, BLACK);			// font size 17,24
 800bcb8:	2600      	movs	r6, #0
 800bcba:	25ff      	movs	r5, #255	@ 0xff
void final_message(uint16_t bat_voltage){ 	// sleep
 800bcbc:	b082      	sub	sp, #8
	ESP_Init();
 800bcbe:	f7ff ff23 	bl	800bb08 <ESP_Init>
	EPD_1IN54_V2_Init();
 800bcc2:	f7fe fd79 	bl	800a7b8 <EPD_1IN54_V2_Init>
	Paint_SelectImage(BlackImage);	// Paint.Image = image;
 800bcc6:	4b21      	ldr	r3, [pc, #132]	@ (800bd4c <final_message+0x9c>)
 800bcc8:	4698      	mov	r8, r3
 800bcca:	6818      	ldr	r0, [r3, #0]
 800bccc:	f7ff fb10 	bl	800b2f0 <Paint_SelectImage>
	Paint_Clear(WHITE);
 800bcd0:	20ff      	movs	r0, #255	@ 0xff
 800bcd2:	f7ff fb13 	bl	800b2fc <Paint_Clear>
	sprintf(str_array, "%d", bat_voltage);	
 800bcd6:	4f1e      	ldr	r7, [pc, #120]	@ (800bd50 <final_message+0xa0>)
 800bcd8:	0022      	movs	r2, r4
 800bcda:	0038      	movs	r0, r7
 800bcdc:	491d      	ldr	r1, [pc, #116]	@ (800bd54 <final_message+0xa4>)
 800bcde:	f7fb f89b 	bl	8006e18 <sprintf_>
	Paint_DrawString_EN(Xstart, Ystart, "Vbat:", &calibri_20pts, WHITE, BLACK);			// font size 17,24
 800bce2:	4c1d      	ldr	r4, [pc, #116]	@ (800bd58 <final_message+0xa8>)
 800bce4:	2102      	movs	r1, #2
 800bce6:	0023      	movs	r3, r4
 800bce8:	2005      	movs	r0, #5
 800bcea:	4a1c      	ldr	r2, [pc, #112]	@ (800bd5c <final_message+0xac>)
 800bcec:	9601      	str	r6, [sp, #4]
 800bcee:	9500      	str	r5, [sp, #0]
 800bcf0:	f7ff fe1a 	bl	800b928 <Paint_DrawString_EN>
	Paint_DrawString_EN(Xstart + 7*10, Ystart, str_array, &calibri_20pts, WHITE, BLACK);
 800bcf4:	0023      	movs	r3, r4
 800bcf6:	003a      	movs	r2, r7
 800bcf8:	2102      	movs	r1, #2
 800bcfa:	204b      	movs	r0, #75	@ 0x4b
 800bcfc:	9601      	str	r6, [sp, #4]
 800bcfe:	9500      	str	r5, [sp, #0]
 800bd00:	f7ff fe12 	bl	800b928 <Paint_DrawString_EN>
	Show_RTC_Calendar();
 800bd04:	f7ff ff42 	bl	800bb8c <Show_RTC_Calendar>
	Paint_DrawString_EN(Xstart, Ystart+ 75, "EndTime:", &calibri_20pts, WHITE, BLACK);
 800bd08:	0023      	movs	r3, r4
 800bd0a:	214d      	movs	r1, #77	@ 0x4d
 800bd0c:	2005      	movs	r0, #5
 800bd0e:	4a14      	ldr	r2, [pc, #80]	@ (800bd60 <final_message+0xb0>)
 800bd10:	9601      	str	r6, [sp, #4]
 800bd12:	9500      	str	r5, [sp, #0]
 800bd14:	f7ff fe08 	bl	800b928 <Paint_DrawString_EN>
	Paint_DrawString_EN(Xstart, Ystart + 100, aEndTime, &calibri_20pts, WHITE, BLACK);
 800bd18:	0023      	movs	r3, r4
 800bd1a:	2166      	movs	r1, #102	@ 0x66
 800bd1c:	2005      	movs	r0, #5
 800bd1e:	4a11      	ldr	r2, [pc, #68]	@ (800bd64 <final_message+0xb4>)
 800bd20:	9601      	str	r6, [sp, #4]
 800bd22:	9500      	str	r5, [sp, #0]
 800bd24:	f7ff fe00 	bl	800b928 <Paint_DrawString_EN>
	Paint_DrawString_EN(Xstart + 6*10 + 20, Ystart + 100, aEndDate, &calibri_20pts, WHITE, BLACK);
 800bd28:	2166      	movs	r1, #102	@ 0x66
 800bd2a:	4a0f      	ldr	r2, [pc, #60]	@ (800bd68 <final_message+0xb8>)
 800bd2c:	0023      	movs	r3, r4
 800bd2e:	2055      	movs	r0, #85	@ 0x55
 800bd30:	9601      	str	r6, [sp, #4]
 800bd32:	9500      	str	r5, [sp, #0]
 800bd34:	f7ff fdf8 	bl	800b928 <Paint_DrawString_EN>
	EPD_1IN54_V2_Display(BlackImage);
 800bd38:	4643      	mov	r3, r8
 800bd3a:	6818      	ldr	r0, [r3, #0]
 800bd3c:	f7fe ff06 	bl	800ab4c <EPD_1IN54_V2_Display>
	EPD_1IN54_V2_Sleep();
 800bd40:	f7ff f84a 	bl	800add8 <EPD_1IN54_V2_Sleep>
}
 800bd44:	b002      	add	sp, #8
 800bd46:	bc80      	pop	{r7}
 800bd48:	46b8      	mov	r8, r7
 800bd4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd4c:	2000057c 	.word	0x2000057c
 800bd50:	20000574 	.word	0x20000574
 800bd54:	0801a2b0 	.word	0x0801a2b0
 800bd58:	20000158 	.word	0x20000158
 800bd5c:	0801a2b4 	.word	0x0801a2b4
 800bd60:	0801a2bc 	.word	0x0801a2bc
 800bd64:	20000594 	.word	0x20000594
 800bd68:	20000580 	.word	0x20000580

0800bd6c <ESP_Init_standby>:

//	**************************___ ESP_Init_after_standby ___**********************
int ESP_Init_standby(void){ 
 800bd6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd6e:	46c6      	mov	lr, r8
 800bd70:	b500      	push	{lr}
	printf("ESP_Init_standby\n");
 800bd72:	484b      	ldr	r0, [pc, #300]	@ (800bea0 <ESP_Init_standby+0x134>)
int ESP_Init_standby(void){ 
 800bd74:	b086      	sub	sp, #24
	printf("ESP_Init_standby\n");
 800bd76:	f7fb f83b 	bl	8006df0 <printf_>
    //Create a new image cache    
    /* !!!  you have to edit the startup_stm32fxxx.s file and set a heap size = 1400 !!!  */
    UWORD Imagesize = ((EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1)) * EPD_1IN54_V2_HEIGHT;
    if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 800bd7a:	484a      	ldr	r0, [pc, #296]	@ (800bea4 <ESP_Init_standby+0x138>)
 800bd7c:	f000 f8ac 	bl	800bed8 <malloc>
 800bd80:	4c49      	ldr	r4, [pc, #292]	@ (800bea8 <ESP_Init_standby+0x13c>)
 800bd82:	6020      	str	r0, [r4, #0]
 800bd84:	2800      	cmp	r0, #0
 800bd86:	d100      	bne.n	800bd8a <ESP_Init_standby+0x1e>
 800bd88:	e084      	b.n	800be94 <ESP_Init_standby+0x128>
        printf("Failed to apply for black memory...\r\n");
        return -1;
    }
		Paint_NewImage(BlackImage, EPD_1IN54_V2_WIDTH, EPD_1IN54_V2_HEIGHT, 0, WHITE);
 800bd8a:	26ff      	movs	r6, #255	@ 0xff
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	22c8      	movs	r2, #200	@ 0xc8
 800bd90:	21c8      	movs	r1, #200	@ 0xc8
 800bd92:	9600      	str	r6, [sp, #0]
 800bd94:	f7ff fa8c 	bl	800b2b0 <Paint_NewImage>
		
	// Drawing on the image ======================================================
//    INFO("Drawing\r\n");

    Paint_SelectImage(BlackImage);	// Paint.Image = image;
 800bd98:	6820      	ldr	r0, [r4, #0]
 800bd9a:	f7ff faa9 	bl	800b2f0 <Paint_SelectImage>
    Paint_Clear(WHITE);
 800bd9e:	20ff      	movs	r0, #255	@ 0xff
	Paint_DrawRectangle(2, 3, 198, 140, BLACK, DOT_PIXEL_2X2, DRAW_FILL_EMPTY);
 800bda0:	2500      	movs	r5, #0
    Paint_Clear(WHITE);
 800bda2:	f7ff faab 	bl	800b2fc <Paint_Clear>
	Paint_DrawRectangle(2, 3, 198, 140, BLACK, DOT_PIXEL_2X2, DRAW_FILL_EMPTY);
 800bda6:	2302      	movs	r3, #2
 800bda8:	22c6      	movs	r2, #198	@ 0xc6
 800bdaa:	2103      	movs	r1, #3
 800bdac:	2002      	movs	r0, #2
 800bdae:	9301      	str	r3, [sp, #4]
 800bdb0:	9502      	str	r5, [sp, #8]
 800bdb2:	338a      	adds	r3, #138	@ 0x8a
 800bdb4:	9500      	str	r5, [sp, #0]
 800bdb6:	f7ff fd13 	bl	800b7e0 <Paint_DrawRectangle>
	
// T	
	sprintf(str_array, "%3d", T_old);
 800bdba:	4c3c      	ldr	r4, [pc, #240]	@ (800beac <ESP_Init_standby+0x140>)
 800bdbc:	4f3c      	ldr	r7, [pc, #240]	@ (800beb0 <ESP_Init_standby+0x144>)
 800bdbe:	4b3d      	ldr	r3, [pc, #244]	@ (800beb4 <ESP_Init_standby+0x148>)
 800bdc0:	0039      	movs	r1, r7
 800bdc2:	881a      	ldrh	r2, [r3, #0]
 800bdc4:	0020      	movs	r0, r4
 800bdc6:	f7fb f827 	bl	8006e18 <sprintf_>
	Paint_DrawChar(big_1.x, big_1.y, str_array[0], &calibri_104pts, BLACK, WHITE); // 15 ms
 800bdca:	4b3b      	ldr	r3, [pc, #236]	@ (800beb8 <ESP_Init_standby+0x14c>)
 800bdcc:	7822      	ldrb	r2, [r4, #0]
 800bdce:	4698      	mov	r8, r3
 800bdd0:	211e      	movs	r1, #30
 800bdd2:	200a      	movs	r0, #10
 800bdd4:	9601      	str	r6, [sp, #4]
 800bdd6:	9500      	str	r5, [sp, #0]
 800bdd8:	f7ff fd90 	bl	800b8fc <Paint_DrawChar>
	Paint_DrawChar(big_0.x, big_0.y, str_array[1], &calibri_104pts, BLACK, WHITE);
 800bddc:	7862      	ldrb	r2, [r4, #1]
 800bdde:	4643      	mov	r3, r8
 800bde0:	211e      	movs	r1, #30
 800bde2:	2043      	movs	r0, #67	@ 0x43
 800bde4:	9601      	str	r6, [sp, #4]
 800bde6:	9500      	str	r5, [sp, #0]
 800bde8:	f7ff fd88 	bl	800b8fc <Paint_DrawChar>
	Paint_DrawPoint(131, 100, BLACK, DOT_PIXEL_5X5, DOT_FILL_AROUND); //Draw decimal point
 800bdec:	2301      	movs	r3, #1
 800bdee:	2200      	movs	r2, #0
 800bdf0:	2164      	movs	r1, #100	@ 0x64
 800bdf2:	2083      	movs	r0, #131	@ 0x83
 800bdf4:	9300      	str	r3, [sp, #0]
 800bdf6:	3304      	adds	r3, #4
 800bdf8:	f7ff fbb4 	bl	800b564 <Paint_DrawPoint>
	Paint_DrawChar(small_0.x, small_0.y, str_array[2], &calibri_80pts, BLACK, WHITE);		
 800bdfc:	78a2      	ldrb	r2, [r4, #2]
 800bdfe:	212e      	movs	r1, #46	@ 0x2e
 800be00:	208e      	movs	r0, #142	@ 0x8e
 800be02:	4b2e      	ldr	r3, [pc, #184]	@ (800bebc <ESP_Init_standby+0x150>)
 800be04:	9601      	str	r6, [sp, #4]
 800be06:	9500      	str	r5, [sp, #0]
 800be08:	f7ff fd78 	bl	800b8fc <Paint_DrawChar>
		
// hum
	uint8_t x = 125;
	uint8_t y = 150;	
	char pcent = '%';
 800be0c:	2317      	movs	r3, #23
 800be0e:	446b      	add	r3, sp
 800be10:	4698      	mov	r8, r3
 800be12:	2325      	movs	r3, #37	@ 0x25
 800be14:	4642      	mov	r2, r8
 800be16:	7013      	strb	r3, [r2, #0]
	sprintf(str_array, "%2d", H_old);
 800be18:	4b29      	ldr	r3, [pc, #164]	@ (800bec0 <ESP_Init_standby+0x154>)
 800be1a:	492a      	ldr	r1, [pc, #168]	@ (800bec4 <ESP_Init_standby+0x158>)
 800be1c:	881a      	ldrh	r2, [r3, #0]
 800be1e:	0020      	movs	r0, r4
 800be20:	f7fa fffa 	bl	8006e18 <sprintf_>
	// append % to string
    strncat(str_array, &pcent, 1);
 800be24:	2201      	movs	r2, #1
 800be26:	4641      	mov	r1, r8
 800be28:	0020      	movs	r0, r4
 800be2a:	f000 fe9b 	bl	800cb64 <strncat>
	Paint_DrawString_EN(x, y, (char*)str_array, &calibri_36pts, WHITE, BLACK); // 20, 34
 800be2e:	0022      	movs	r2, r4
 800be30:	2196      	movs	r1, #150	@ 0x96
 800be32:	207d      	movs	r0, #125	@ 0x7d
 800be34:	4b24      	ldr	r3, [pc, #144]	@ (800bec8 <ESP_Init_standby+0x15c>)
 800be36:	9501      	str	r5, [sp, #4]
 800be38:	9600      	str	r6, [sp, #0]
 800be3a:	f7ff fd75 	bl	800b928 <Paint_DrawString_EN>
	
// battery voltage	
		x = 3;
		y = 160;
		sprintf(str_array, "%3d", vbat_old);
 800be3e:	4b23      	ldr	r3, [pc, #140]	@ (800becc <ESP_Init_standby+0x160>)
 800be40:	0039      	movs	r1, r7
 800be42:	881a      	ldrh	r2, [r3, #0]
 800be44:	0020      	movs	r0, r4
 800be46:	f7fa ffe7 	bl	8006e18 <sprintf_>
		
		Paint_ClearWindows(x, y, x+40, y+29, WHITE);			
 800be4a:	23bd      	movs	r3, #189	@ 0xbd
 800be4c:	222b      	movs	r2, #43	@ 0x2b
 800be4e:	21a0      	movs	r1, #160	@ 0xa0
 800be50:	2003      	movs	r0, #3
 800be52:	9600      	str	r6, [sp, #0]
 800be54:	f7ff fa92 	bl	800b37c <Paint_ClearWindows>
		Paint_DrawChar(x, y, str_array[0], &calibri_24pts, BLACK, WHITE);	// 	12, 29, 8
 800be58:	4f1d      	ldr	r7, [pc, #116]	@ (800bed0 <ESP_Init_standby+0x164>)
 800be5a:	7822      	ldrb	r2, [r4, #0]
 800be5c:	003b      	movs	r3, r7
 800be5e:	21a0      	movs	r1, #160	@ 0xa0
 800be60:	2003      	movs	r0, #3
 800be62:	9601      	str	r6, [sp, #4]
 800be64:	9500      	str	r5, [sp, #0]
 800be66:	f7ff fd49 	bl	800b8fc <Paint_DrawChar>
		Paint_DrawChar(x+12, y, str_array[1], &calibri_24pts, BLACK, WHITE);	
 800be6a:	7862      	ldrb	r2, [r4, #1]
 800be6c:	003b      	movs	r3, r7
 800be6e:	21a0      	movs	r1, #160	@ 0xa0
 800be70:	200f      	movs	r0, #15
 800be72:	9601      	str	r6, [sp, #4]
 800be74:	9500      	str	r5, [sp, #0]
 800be76:	f7ff fd41 	bl	800b8fc <Paint_DrawChar>
		Paint_DrawChar(x+12+12, y, str_array[2], &calibri_24pts, BLACK, WHITE);	
 800be7a:	78a2      	ldrb	r2, [r4, #2]
 800be7c:	201b      	movs	r0, #27
 800be7e:	003b      	movs	r3, r7
 800be80:	21a0      	movs	r1, #160	@ 0xa0
 800be82:	9601      	str	r6, [sp, #4]
 800be84:	9500      	str	r5, [sp, #0]
 800be86:	f7ff fd39 	bl	800b8fc <Paint_DrawChar>
		
//		EPD_1IN54_V2_Display(BlackImage);		
//		EPD_1IN54_V2_DisplayPartBaseImage(BlackImage);
//		EPD_1IN54_V2_Init_Partial();
		
		return 0;
 800be8a:	2000      	movs	r0, #0
}
 800be8c:	b006      	add	sp, #24
 800be8e:	bc80      	pop	{r7}
 800be90:	46b8      	mov	r8, r7
 800be92:	bdf0      	pop	{r4, r5, r6, r7, pc}
        printf("Failed to apply for black memory...\r\n");
 800be94:	480f      	ldr	r0, [pc, #60]	@ (800bed4 <ESP_Init_standby+0x168>)
 800be96:	f7fa ffab 	bl	8006df0 <printf_>
        return -1;
 800be9a:	2001      	movs	r0, #1
 800be9c:	4240      	negs	r0, r0
 800be9e:	e7f5      	b.n	800be8c <ESP_Init_standby+0x120>
 800bea0:	0801a2c8 	.word	0x0801a2c8
 800bea4:	00001388 	.word	0x00001388
 800bea8:	2000057c 	.word	0x2000057c
 800beac:	20000574 	.word	0x20000574
 800beb0:	0801a244 	.word	0x0801a244
 800beb4:	200003cc 	.word	0x200003cc
 800beb8:	20000150 	.word	0x20000150
 800bebc:	20000170 	.word	0x20000170
 800bec0:	200003ce 	.word	0x200003ce
 800bec4:	0801a234 	.word	0x0801a234
 800bec8:	20000168 	.word	0x20000168
 800becc:	200003ca 	.word	0x200003ca
 800bed0:	20000160 	.word	0x20000160
 800bed4:	0801a260 	.word	0x0801a260

0800bed8 <malloc>:
 800bed8:	b510      	push	{r4, lr}
 800beda:	4b03      	ldr	r3, [pc, #12]	@ (800bee8 <malloc+0x10>)
 800bedc:	0001      	movs	r1, r0
 800bede:	6818      	ldr	r0, [r3, #0]
 800bee0:	f000 f826 	bl	800bf30 <_malloc_r>
 800bee4:	bd10      	pop	{r4, pc}
 800bee6:	46c0      	nop			@ (mov r8, r8)
 800bee8:	20000184 	.word	0x20000184

0800beec <sbrk_aligned>:
 800beec:	b570      	push	{r4, r5, r6, lr}
 800beee:	4e0f      	ldr	r6, [pc, #60]	@ (800bf2c <sbrk_aligned+0x40>)
 800bef0:	000d      	movs	r5, r1
 800bef2:	6831      	ldr	r1, [r6, #0]
 800bef4:	0004      	movs	r4, r0
 800bef6:	2900      	cmp	r1, #0
 800bef8:	d102      	bne.n	800bf00 <sbrk_aligned+0x14>
 800befa:	f000 fe87 	bl	800cc0c <_sbrk_r>
 800befe:	6030      	str	r0, [r6, #0]
 800bf00:	0029      	movs	r1, r5
 800bf02:	0020      	movs	r0, r4
 800bf04:	f000 fe82 	bl	800cc0c <_sbrk_r>
 800bf08:	1c43      	adds	r3, r0, #1
 800bf0a:	d103      	bne.n	800bf14 <sbrk_aligned+0x28>
 800bf0c:	2501      	movs	r5, #1
 800bf0e:	426d      	negs	r5, r5
 800bf10:	0028      	movs	r0, r5
 800bf12:	bd70      	pop	{r4, r5, r6, pc}
 800bf14:	2303      	movs	r3, #3
 800bf16:	1cc5      	adds	r5, r0, #3
 800bf18:	439d      	bics	r5, r3
 800bf1a:	42a8      	cmp	r0, r5
 800bf1c:	d0f8      	beq.n	800bf10 <sbrk_aligned+0x24>
 800bf1e:	1a29      	subs	r1, r5, r0
 800bf20:	0020      	movs	r0, r4
 800bf22:	f000 fe73 	bl	800cc0c <_sbrk_r>
 800bf26:	3001      	adds	r0, #1
 800bf28:	d1f2      	bne.n	800bf10 <sbrk_aligned+0x24>
 800bf2a:	e7ef      	b.n	800bf0c <sbrk_aligned+0x20>
 800bf2c:	200005a8 	.word	0x200005a8

0800bf30 <_malloc_r>:
 800bf30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf32:	2203      	movs	r2, #3
 800bf34:	1ccb      	adds	r3, r1, #3
 800bf36:	4393      	bics	r3, r2
 800bf38:	3308      	adds	r3, #8
 800bf3a:	0005      	movs	r5, r0
 800bf3c:	001f      	movs	r7, r3
 800bf3e:	2b0c      	cmp	r3, #12
 800bf40:	d234      	bcs.n	800bfac <_malloc_r+0x7c>
 800bf42:	270c      	movs	r7, #12
 800bf44:	42b9      	cmp	r1, r7
 800bf46:	d833      	bhi.n	800bfb0 <_malloc_r+0x80>
 800bf48:	0028      	movs	r0, r5
 800bf4a:	f000 f871 	bl	800c030 <__malloc_lock>
 800bf4e:	4e37      	ldr	r6, [pc, #220]	@ (800c02c <_malloc_r+0xfc>)
 800bf50:	6833      	ldr	r3, [r6, #0]
 800bf52:	001c      	movs	r4, r3
 800bf54:	2c00      	cmp	r4, #0
 800bf56:	d12f      	bne.n	800bfb8 <_malloc_r+0x88>
 800bf58:	0039      	movs	r1, r7
 800bf5a:	0028      	movs	r0, r5
 800bf5c:	f7ff ffc6 	bl	800beec <sbrk_aligned>
 800bf60:	0004      	movs	r4, r0
 800bf62:	1c43      	adds	r3, r0, #1
 800bf64:	d15f      	bne.n	800c026 <_malloc_r+0xf6>
 800bf66:	6834      	ldr	r4, [r6, #0]
 800bf68:	9400      	str	r4, [sp, #0]
 800bf6a:	9b00      	ldr	r3, [sp, #0]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d14a      	bne.n	800c006 <_malloc_r+0xd6>
 800bf70:	2c00      	cmp	r4, #0
 800bf72:	d052      	beq.n	800c01a <_malloc_r+0xea>
 800bf74:	6823      	ldr	r3, [r4, #0]
 800bf76:	0028      	movs	r0, r5
 800bf78:	18e3      	adds	r3, r4, r3
 800bf7a:	9900      	ldr	r1, [sp, #0]
 800bf7c:	9301      	str	r3, [sp, #4]
 800bf7e:	f000 fe45 	bl	800cc0c <_sbrk_r>
 800bf82:	9b01      	ldr	r3, [sp, #4]
 800bf84:	4283      	cmp	r3, r0
 800bf86:	d148      	bne.n	800c01a <_malloc_r+0xea>
 800bf88:	6823      	ldr	r3, [r4, #0]
 800bf8a:	0028      	movs	r0, r5
 800bf8c:	1aff      	subs	r7, r7, r3
 800bf8e:	0039      	movs	r1, r7
 800bf90:	f7ff ffac 	bl	800beec <sbrk_aligned>
 800bf94:	3001      	adds	r0, #1
 800bf96:	d040      	beq.n	800c01a <_malloc_r+0xea>
 800bf98:	6823      	ldr	r3, [r4, #0]
 800bf9a:	19db      	adds	r3, r3, r7
 800bf9c:	6023      	str	r3, [r4, #0]
 800bf9e:	6833      	ldr	r3, [r6, #0]
 800bfa0:	685a      	ldr	r2, [r3, #4]
 800bfa2:	2a00      	cmp	r2, #0
 800bfa4:	d133      	bne.n	800c00e <_malloc_r+0xde>
 800bfa6:	9b00      	ldr	r3, [sp, #0]
 800bfa8:	6033      	str	r3, [r6, #0]
 800bfaa:	e019      	b.n	800bfe0 <_malloc_r+0xb0>
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	dac9      	bge.n	800bf44 <_malloc_r+0x14>
 800bfb0:	230c      	movs	r3, #12
 800bfb2:	602b      	str	r3, [r5, #0]
 800bfb4:	2000      	movs	r0, #0
 800bfb6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bfb8:	6821      	ldr	r1, [r4, #0]
 800bfba:	1bc9      	subs	r1, r1, r7
 800bfbc:	d420      	bmi.n	800c000 <_malloc_r+0xd0>
 800bfbe:	290b      	cmp	r1, #11
 800bfc0:	d90a      	bls.n	800bfd8 <_malloc_r+0xa8>
 800bfc2:	19e2      	adds	r2, r4, r7
 800bfc4:	6027      	str	r7, [r4, #0]
 800bfc6:	42a3      	cmp	r3, r4
 800bfc8:	d104      	bne.n	800bfd4 <_malloc_r+0xa4>
 800bfca:	6032      	str	r2, [r6, #0]
 800bfcc:	6863      	ldr	r3, [r4, #4]
 800bfce:	6011      	str	r1, [r2, #0]
 800bfd0:	6053      	str	r3, [r2, #4]
 800bfd2:	e005      	b.n	800bfe0 <_malloc_r+0xb0>
 800bfd4:	605a      	str	r2, [r3, #4]
 800bfd6:	e7f9      	b.n	800bfcc <_malloc_r+0x9c>
 800bfd8:	6862      	ldr	r2, [r4, #4]
 800bfda:	42a3      	cmp	r3, r4
 800bfdc:	d10e      	bne.n	800bffc <_malloc_r+0xcc>
 800bfde:	6032      	str	r2, [r6, #0]
 800bfe0:	0028      	movs	r0, r5
 800bfe2:	f000 f82d 	bl	800c040 <__malloc_unlock>
 800bfe6:	0020      	movs	r0, r4
 800bfe8:	2207      	movs	r2, #7
 800bfea:	300b      	adds	r0, #11
 800bfec:	1d23      	adds	r3, r4, #4
 800bfee:	4390      	bics	r0, r2
 800bff0:	1ac2      	subs	r2, r0, r3
 800bff2:	4298      	cmp	r0, r3
 800bff4:	d0df      	beq.n	800bfb6 <_malloc_r+0x86>
 800bff6:	1a1b      	subs	r3, r3, r0
 800bff8:	50a3      	str	r3, [r4, r2]
 800bffa:	e7dc      	b.n	800bfb6 <_malloc_r+0x86>
 800bffc:	605a      	str	r2, [r3, #4]
 800bffe:	e7ef      	b.n	800bfe0 <_malloc_r+0xb0>
 800c000:	0023      	movs	r3, r4
 800c002:	6864      	ldr	r4, [r4, #4]
 800c004:	e7a6      	b.n	800bf54 <_malloc_r+0x24>
 800c006:	9c00      	ldr	r4, [sp, #0]
 800c008:	6863      	ldr	r3, [r4, #4]
 800c00a:	9300      	str	r3, [sp, #0]
 800c00c:	e7ad      	b.n	800bf6a <_malloc_r+0x3a>
 800c00e:	001a      	movs	r2, r3
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	42a3      	cmp	r3, r4
 800c014:	d1fb      	bne.n	800c00e <_malloc_r+0xde>
 800c016:	2300      	movs	r3, #0
 800c018:	e7da      	b.n	800bfd0 <_malloc_r+0xa0>
 800c01a:	230c      	movs	r3, #12
 800c01c:	0028      	movs	r0, r5
 800c01e:	602b      	str	r3, [r5, #0]
 800c020:	f000 f80e 	bl	800c040 <__malloc_unlock>
 800c024:	e7c6      	b.n	800bfb4 <_malloc_r+0x84>
 800c026:	6007      	str	r7, [r0, #0]
 800c028:	e7da      	b.n	800bfe0 <_malloc_r+0xb0>
 800c02a:	46c0      	nop			@ (mov r8, r8)
 800c02c:	200005ac 	.word	0x200005ac

0800c030 <__malloc_lock>:
 800c030:	b510      	push	{r4, lr}
 800c032:	4802      	ldr	r0, [pc, #8]	@ (800c03c <__malloc_lock+0xc>)
 800c034:	f000 fe3b 	bl	800ccae <__retarget_lock_acquire_recursive>
 800c038:	bd10      	pop	{r4, pc}
 800c03a:	46c0      	nop			@ (mov r8, r8)
 800c03c:	200006f0 	.word	0x200006f0

0800c040 <__malloc_unlock>:
 800c040:	b510      	push	{r4, lr}
 800c042:	4802      	ldr	r0, [pc, #8]	@ (800c04c <__malloc_unlock+0xc>)
 800c044:	f000 fe34 	bl	800ccb0 <__retarget_lock_release_recursive>
 800c048:	bd10      	pop	{r4, pc}
 800c04a:	46c0      	nop			@ (mov r8, r8)
 800c04c:	200006f0 	.word	0x200006f0

0800c050 <__cvt>:
 800c050:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c052:	001f      	movs	r7, r3
 800c054:	2300      	movs	r3, #0
 800c056:	0016      	movs	r6, r2
 800c058:	b08b      	sub	sp, #44	@ 0x2c
 800c05a:	429f      	cmp	r7, r3
 800c05c:	da04      	bge.n	800c068 <__cvt+0x18>
 800c05e:	2180      	movs	r1, #128	@ 0x80
 800c060:	0609      	lsls	r1, r1, #24
 800c062:	187b      	adds	r3, r7, r1
 800c064:	001f      	movs	r7, r3
 800c066:	232d      	movs	r3, #45	@ 0x2d
 800c068:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c06a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800c06c:	7013      	strb	r3, [r2, #0]
 800c06e:	2320      	movs	r3, #32
 800c070:	2203      	movs	r2, #3
 800c072:	439d      	bics	r5, r3
 800c074:	2d46      	cmp	r5, #70	@ 0x46
 800c076:	d007      	beq.n	800c088 <__cvt+0x38>
 800c078:	002b      	movs	r3, r5
 800c07a:	3b45      	subs	r3, #69	@ 0x45
 800c07c:	4259      	negs	r1, r3
 800c07e:	414b      	adcs	r3, r1
 800c080:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800c082:	3a01      	subs	r2, #1
 800c084:	18cb      	adds	r3, r1, r3
 800c086:	9310      	str	r3, [sp, #64]	@ 0x40
 800c088:	ab09      	add	r3, sp, #36	@ 0x24
 800c08a:	9304      	str	r3, [sp, #16]
 800c08c:	ab08      	add	r3, sp, #32
 800c08e:	9303      	str	r3, [sp, #12]
 800c090:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c092:	9200      	str	r2, [sp, #0]
 800c094:	9302      	str	r3, [sp, #8]
 800c096:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c098:	0032      	movs	r2, r6
 800c09a:	9301      	str	r3, [sp, #4]
 800c09c:	003b      	movs	r3, r7
 800c09e:	f000 fea1 	bl	800cde4 <_dtoa_r>
 800c0a2:	0004      	movs	r4, r0
 800c0a4:	2d47      	cmp	r5, #71	@ 0x47
 800c0a6:	d11b      	bne.n	800c0e0 <__cvt+0x90>
 800c0a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c0aa:	07db      	lsls	r3, r3, #31
 800c0ac:	d511      	bpl.n	800c0d2 <__cvt+0x82>
 800c0ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c0b0:	18c3      	adds	r3, r0, r3
 800c0b2:	9307      	str	r3, [sp, #28]
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	0030      	movs	r0, r6
 800c0ba:	0039      	movs	r1, r7
 800c0bc:	f7f4 f9c6 	bl	800044c <__aeabi_dcmpeq>
 800c0c0:	2800      	cmp	r0, #0
 800c0c2:	d001      	beq.n	800c0c8 <__cvt+0x78>
 800c0c4:	9b07      	ldr	r3, [sp, #28]
 800c0c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0c8:	2230      	movs	r2, #48	@ 0x30
 800c0ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0cc:	9907      	ldr	r1, [sp, #28]
 800c0ce:	428b      	cmp	r3, r1
 800c0d0:	d320      	bcc.n	800c114 <__cvt+0xc4>
 800c0d2:	0020      	movs	r0, r4
 800c0d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0d6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800c0d8:	1b1b      	subs	r3, r3, r4
 800c0da:	6013      	str	r3, [r2, #0]
 800c0dc:	b00b      	add	sp, #44	@ 0x2c
 800c0de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c0e2:	18c3      	adds	r3, r0, r3
 800c0e4:	9307      	str	r3, [sp, #28]
 800c0e6:	2d46      	cmp	r5, #70	@ 0x46
 800c0e8:	d1e4      	bne.n	800c0b4 <__cvt+0x64>
 800c0ea:	7803      	ldrb	r3, [r0, #0]
 800c0ec:	2b30      	cmp	r3, #48	@ 0x30
 800c0ee:	d10c      	bne.n	800c10a <__cvt+0xba>
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	0030      	movs	r0, r6
 800c0f6:	0039      	movs	r1, r7
 800c0f8:	f7f4 f9a8 	bl	800044c <__aeabi_dcmpeq>
 800c0fc:	2800      	cmp	r0, #0
 800c0fe:	d104      	bne.n	800c10a <__cvt+0xba>
 800c100:	2301      	movs	r3, #1
 800c102:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800c104:	1a9b      	subs	r3, r3, r2
 800c106:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c108:	6013      	str	r3, [r2, #0]
 800c10a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c10c:	9a07      	ldr	r2, [sp, #28]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	18d3      	adds	r3, r2, r3
 800c112:	e7ce      	b.n	800c0b2 <__cvt+0x62>
 800c114:	1c59      	adds	r1, r3, #1
 800c116:	9109      	str	r1, [sp, #36]	@ 0x24
 800c118:	701a      	strb	r2, [r3, #0]
 800c11a:	e7d6      	b.n	800c0ca <__cvt+0x7a>

0800c11c <__exponent>:
 800c11c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c11e:	232b      	movs	r3, #43	@ 0x2b
 800c120:	0005      	movs	r5, r0
 800c122:	000c      	movs	r4, r1
 800c124:	b085      	sub	sp, #20
 800c126:	7002      	strb	r2, [r0, #0]
 800c128:	2900      	cmp	r1, #0
 800c12a:	da01      	bge.n	800c130 <__exponent+0x14>
 800c12c:	424c      	negs	r4, r1
 800c12e:	3302      	adds	r3, #2
 800c130:	706b      	strb	r3, [r5, #1]
 800c132:	2c09      	cmp	r4, #9
 800c134:	dd2c      	ble.n	800c190 <__exponent+0x74>
 800c136:	ab02      	add	r3, sp, #8
 800c138:	1dde      	adds	r6, r3, #7
 800c13a:	0020      	movs	r0, r4
 800c13c:	210a      	movs	r1, #10
 800c13e:	f7f4 f96f 	bl	8000420 <__aeabi_idivmod>
 800c142:	0037      	movs	r7, r6
 800c144:	3130      	adds	r1, #48	@ 0x30
 800c146:	3e01      	subs	r6, #1
 800c148:	0020      	movs	r0, r4
 800c14a:	7031      	strb	r1, [r6, #0]
 800c14c:	210a      	movs	r1, #10
 800c14e:	9401      	str	r4, [sp, #4]
 800c150:	f7f4 f880 	bl	8000254 <__divsi3>
 800c154:	9b01      	ldr	r3, [sp, #4]
 800c156:	0004      	movs	r4, r0
 800c158:	2b63      	cmp	r3, #99	@ 0x63
 800c15a:	dcee      	bgt.n	800c13a <__exponent+0x1e>
 800c15c:	1eba      	subs	r2, r7, #2
 800c15e:	1ca8      	adds	r0, r5, #2
 800c160:	0001      	movs	r1, r0
 800c162:	0013      	movs	r3, r2
 800c164:	3430      	adds	r4, #48	@ 0x30
 800c166:	7014      	strb	r4, [r2, #0]
 800c168:	ac02      	add	r4, sp, #8
 800c16a:	3407      	adds	r4, #7
 800c16c:	429c      	cmp	r4, r3
 800c16e:	d80a      	bhi.n	800c186 <__exponent+0x6a>
 800c170:	2300      	movs	r3, #0
 800c172:	42a2      	cmp	r2, r4
 800c174:	d803      	bhi.n	800c17e <__exponent+0x62>
 800c176:	3309      	adds	r3, #9
 800c178:	aa02      	add	r2, sp, #8
 800c17a:	189b      	adds	r3, r3, r2
 800c17c:	1bdb      	subs	r3, r3, r7
 800c17e:	18c0      	adds	r0, r0, r3
 800c180:	1b40      	subs	r0, r0, r5
 800c182:	b005      	add	sp, #20
 800c184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c186:	781c      	ldrb	r4, [r3, #0]
 800c188:	3301      	adds	r3, #1
 800c18a:	700c      	strb	r4, [r1, #0]
 800c18c:	3101      	adds	r1, #1
 800c18e:	e7eb      	b.n	800c168 <__exponent+0x4c>
 800c190:	2330      	movs	r3, #48	@ 0x30
 800c192:	18e4      	adds	r4, r4, r3
 800c194:	70ab      	strb	r3, [r5, #2]
 800c196:	1d28      	adds	r0, r5, #4
 800c198:	70ec      	strb	r4, [r5, #3]
 800c19a:	e7f1      	b.n	800c180 <__exponent+0x64>

0800c19c <_printf_float>:
 800c19c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c19e:	b097      	sub	sp, #92	@ 0x5c
 800c1a0:	000d      	movs	r5, r1
 800c1a2:	920a      	str	r2, [sp, #40]	@ 0x28
 800c1a4:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800c1a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c1a8:	9009      	str	r0, [sp, #36]	@ 0x24
 800c1aa:	f000 fcf1 	bl	800cb90 <_localeconv_r>
 800c1ae:	6803      	ldr	r3, [r0, #0]
 800c1b0:	0018      	movs	r0, r3
 800c1b2:	930d      	str	r3, [sp, #52]	@ 0x34
 800c1b4:	f7f3 ffa8 	bl	8000108 <strlen>
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	900f      	str	r0, [sp, #60]	@ 0x3c
 800c1bc:	9314      	str	r3, [sp, #80]	@ 0x50
 800c1be:	7e2b      	ldrb	r3, [r5, #24]
 800c1c0:	2207      	movs	r2, #7
 800c1c2:	930c      	str	r3, [sp, #48]	@ 0x30
 800c1c4:	682b      	ldr	r3, [r5, #0]
 800c1c6:	930e      	str	r3, [sp, #56]	@ 0x38
 800c1c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c1ca:	6823      	ldr	r3, [r4, #0]
 800c1cc:	05c9      	lsls	r1, r1, #23
 800c1ce:	d545      	bpl.n	800c25c <_printf_float+0xc0>
 800c1d0:	189b      	adds	r3, r3, r2
 800c1d2:	4393      	bics	r3, r2
 800c1d4:	001a      	movs	r2, r3
 800c1d6:	3208      	adds	r2, #8
 800c1d8:	6022      	str	r2, [r4, #0]
 800c1da:	2201      	movs	r2, #1
 800c1dc:	681e      	ldr	r6, [r3, #0]
 800c1de:	685f      	ldr	r7, [r3, #4]
 800c1e0:	007b      	lsls	r3, r7, #1
 800c1e2:	085b      	lsrs	r3, r3, #1
 800c1e4:	9311      	str	r3, [sp, #68]	@ 0x44
 800c1e6:	9610      	str	r6, [sp, #64]	@ 0x40
 800c1e8:	64ae      	str	r6, [r5, #72]	@ 0x48
 800c1ea:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800c1ec:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800c1ee:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800c1f0:	4ba7      	ldr	r3, [pc, #668]	@ (800c490 <_printf_float+0x2f4>)
 800c1f2:	4252      	negs	r2, r2
 800c1f4:	f7f6 f88c 	bl	8002310 <__aeabi_dcmpun>
 800c1f8:	2800      	cmp	r0, #0
 800c1fa:	d131      	bne.n	800c260 <_printf_float+0xc4>
 800c1fc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800c1fe:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800c200:	2201      	movs	r2, #1
 800c202:	4ba3      	ldr	r3, [pc, #652]	@ (800c490 <_printf_float+0x2f4>)
 800c204:	4252      	negs	r2, r2
 800c206:	f7f4 f931 	bl	800046c <__aeabi_dcmple>
 800c20a:	2800      	cmp	r0, #0
 800c20c:	d128      	bne.n	800c260 <_printf_float+0xc4>
 800c20e:	2200      	movs	r2, #0
 800c210:	2300      	movs	r3, #0
 800c212:	0030      	movs	r0, r6
 800c214:	0039      	movs	r1, r7
 800c216:	f7f4 f91f 	bl	8000458 <__aeabi_dcmplt>
 800c21a:	2800      	cmp	r0, #0
 800c21c:	d003      	beq.n	800c226 <_printf_float+0x8a>
 800c21e:	002b      	movs	r3, r5
 800c220:	222d      	movs	r2, #45	@ 0x2d
 800c222:	3343      	adds	r3, #67	@ 0x43
 800c224:	701a      	strb	r2, [r3, #0]
 800c226:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c228:	4f9a      	ldr	r7, [pc, #616]	@ (800c494 <_printf_float+0x2f8>)
 800c22a:	2b47      	cmp	r3, #71	@ 0x47
 800c22c:	d900      	bls.n	800c230 <_printf_float+0x94>
 800c22e:	4f9a      	ldr	r7, [pc, #616]	@ (800c498 <_printf_float+0x2fc>)
 800c230:	2303      	movs	r3, #3
 800c232:	2400      	movs	r4, #0
 800c234:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c236:	612b      	str	r3, [r5, #16]
 800c238:	3301      	adds	r3, #1
 800c23a:	439a      	bics	r2, r3
 800c23c:	602a      	str	r2, [r5, #0]
 800c23e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c240:	0029      	movs	r1, r5
 800c242:	9300      	str	r3, [sp, #0]
 800c244:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c246:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c248:	aa15      	add	r2, sp, #84	@ 0x54
 800c24a:	f000 f9e5 	bl	800c618 <_printf_common>
 800c24e:	3001      	adds	r0, #1
 800c250:	d000      	beq.n	800c254 <_printf_float+0xb8>
 800c252:	e09f      	b.n	800c394 <_printf_float+0x1f8>
 800c254:	2001      	movs	r0, #1
 800c256:	4240      	negs	r0, r0
 800c258:	b017      	add	sp, #92	@ 0x5c
 800c25a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c25c:	3307      	adds	r3, #7
 800c25e:	e7b8      	b.n	800c1d2 <_printf_float+0x36>
 800c260:	0032      	movs	r2, r6
 800c262:	003b      	movs	r3, r7
 800c264:	0030      	movs	r0, r6
 800c266:	0039      	movs	r1, r7
 800c268:	f7f6 f852 	bl	8002310 <__aeabi_dcmpun>
 800c26c:	2800      	cmp	r0, #0
 800c26e:	d00b      	beq.n	800c288 <_printf_float+0xec>
 800c270:	2f00      	cmp	r7, #0
 800c272:	da03      	bge.n	800c27c <_printf_float+0xe0>
 800c274:	002b      	movs	r3, r5
 800c276:	222d      	movs	r2, #45	@ 0x2d
 800c278:	3343      	adds	r3, #67	@ 0x43
 800c27a:	701a      	strb	r2, [r3, #0]
 800c27c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c27e:	4f87      	ldr	r7, [pc, #540]	@ (800c49c <_printf_float+0x300>)
 800c280:	2b47      	cmp	r3, #71	@ 0x47
 800c282:	d9d5      	bls.n	800c230 <_printf_float+0x94>
 800c284:	4f86      	ldr	r7, [pc, #536]	@ (800c4a0 <_printf_float+0x304>)
 800c286:	e7d3      	b.n	800c230 <_printf_float+0x94>
 800c288:	2220      	movs	r2, #32
 800c28a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800c28c:	686b      	ldr	r3, [r5, #4]
 800c28e:	4394      	bics	r4, r2
 800c290:	1c5a      	adds	r2, r3, #1
 800c292:	d146      	bne.n	800c322 <_printf_float+0x186>
 800c294:	3307      	adds	r3, #7
 800c296:	606b      	str	r3, [r5, #4]
 800c298:	2380      	movs	r3, #128	@ 0x80
 800c29a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c29c:	00db      	lsls	r3, r3, #3
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	602b      	str	r3, [r5, #0]
 800c2a4:	9206      	str	r2, [sp, #24]
 800c2a6:	aa14      	add	r2, sp, #80	@ 0x50
 800c2a8:	9205      	str	r2, [sp, #20]
 800c2aa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c2ac:	a90a      	add	r1, sp, #40	@ 0x28
 800c2ae:	9204      	str	r2, [sp, #16]
 800c2b0:	aa13      	add	r2, sp, #76	@ 0x4c
 800c2b2:	9203      	str	r2, [sp, #12]
 800c2b4:	2223      	movs	r2, #35	@ 0x23
 800c2b6:	1852      	adds	r2, r2, r1
 800c2b8:	9202      	str	r2, [sp, #8]
 800c2ba:	9301      	str	r3, [sp, #4]
 800c2bc:	686b      	ldr	r3, [r5, #4]
 800c2be:	0032      	movs	r2, r6
 800c2c0:	9300      	str	r3, [sp, #0]
 800c2c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c2c4:	003b      	movs	r3, r7
 800c2c6:	f7ff fec3 	bl	800c050 <__cvt>
 800c2ca:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c2cc:	0007      	movs	r7, r0
 800c2ce:	2c47      	cmp	r4, #71	@ 0x47
 800c2d0:	d12d      	bne.n	800c32e <_printf_float+0x192>
 800c2d2:	1cd3      	adds	r3, r2, #3
 800c2d4:	db02      	blt.n	800c2dc <_printf_float+0x140>
 800c2d6:	686b      	ldr	r3, [r5, #4]
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	dd48      	ble.n	800c36e <_printf_float+0x1d2>
 800c2dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c2de:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800c2e0:	3b02      	subs	r3, #2
 800c2e2:	b2db      	uxtb	r3, r3
 800c2e4:	930c      	str	r3, [sp, #48]	@ 0x30
 800c2e6:	0028      	movs	r0, r5
 800c2e8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c2ea:	3901      	subs	r1, #1
 800c2ec:	3050      	adds	r0, #80	@ 0x50
 800c2ee:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c2f0:	f7ff ff14 	bl	800c11c <__exponent>
 800c2f4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c2f6:	0004      	movs	r4, r0
 800c2f8:	1813      	adds	r3, r2, r0
 800c2fa:	612b      	str	r3, [r5, #16]
 800c2fc:	2a01      	cmp	r2, #1
 800c2fe:	dc02      	bgt.n	800c306 <_printf_float+0x16a>
 800c300:	682a      	ldr	r2, [r5, #0]
 800c302:	07d2      	lsls	r2, r2, #31
 800c304:	d501      	bpl.n	800c30a <_printf_float+0x16e>
 800c306:	3301      	adds	r3, #1
 800c308:	612b      	str	r3, [r5, #16]
 800c30a:	2323      	movs	r3, #35	@ 0x23
 800c30c:	aa0a      	add	r2, sp, #40	@ 0x28
 800c30e:	189b      	adds	r3, r3, r2
 800c310:	781b      	ldrb	r3, [r3, #0]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d100      	bne.n	800c318 <_printf_float+0x17c>
 800c316:	e792      	b.n	800c23e <_printf_float+0xa2>
 800c318:	002b      	movs	r3, r5
 800c31a:	222d      	movs	r2, #45	@ 0x2d
 800c31c:	3343      	adds	r3, #67	@ 0x43
 800c31e:	701a      	strb	r2, [r3, #0]
 800c320:	e78d      	b.n	800c23e <_printf_float+0xa2>
 800c322:	2c47      	cmp	r4, #71	@ 0x47
 800c324:	d1b8      	bne.n	800c298 <_printf_float+0xfc>
 800c326:	2b00      	cmp	r3, #0
 800c328:	d1b6      	bne.n	800c298 <_printf_float+0xfc>
 800c32a:	3301      	adds	r3, #1
 800c32c:	e7b3      	b.n	800c296 <_printf_float+0xfa>
 800c32e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c330:	0011      	movs	r1, r2
 800c332:	2b65      	cmp	r3, #101	@ 0x65
 800c334:	d9d7      	bls.n	800c2e6 <_printf_float+0x14a>
 800c336:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c338:	2b66      	cmp	r3, #102	@ 0x66
 800c33a:	d11a      	bne.n	800c372 <_printf_float+0x1d6>
 800c33c:	686b      	ldr	r3, [r5, #4]
 800c33e:	2a00      	cmp	r2, #0
 800c340:	dd09      	ble.n	800c356 <_printf_float+0x1ba>
 800c342:	612a      	str	r2, [r5, #16]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d102      	bne.n	800c34e <_printf_float+0x1b2>
 800c348:	6829      	ldr	r1, [r5, #0]
 800c34a:	07c9      	lsls	r1, r1, #31
 800c34c:	d50b      	bpl.n	800c366 <_printf_float+0x1ca>
 800c34e:	3301      	adds	r3, #1
 800c350:	189b      	adds	r3, r3, r2
 800c352:	612b      	str	r3, [r5, #16]
 800c354:	e007      	b.n	800c366 <_printf_float+0x1ca>
 800c356:	2b00      	cmp	r3, #0
 800c358:	d103      	bne.n	800c362 <_printf_float+0x1c6>
 800c35a:	2201      	movs	r2, #1
 800c35c:	6829      	ldr	r1, [r5, #0]
 800c35e:	4211      	tst	r1, r2
 800c360:	d000      	beq.n	800c364 <_printf_float+0x1c8>
 800c362:	1c9a      	adds	r2, r3, #2
 800c364:	612a      	str	r2, [r5, #16]
 800c366:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c368:	2400      	movs	r4, #0
 800c36a:	65ab      	str	r3, [r5, #88]	@ 0x58
 800c36c:	e7cd      	b.n	800c30a <_printf_float+0x16e>
 800c36e:	2367      	movs	r3, #103	@ 0x67
 800c370:	930c      	str	r3, [sp, #48]	@ 0x30
 800c372:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800c374:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c376:	4299      	cmp	r1, r3
 800c378:	db06      	blt.n	800c388 <_printf_float+0x1ec>
 800c37a:	682b      	ldr	r3, [r5, #0]
 800c37c:	6129      	str	r1, [r5, #16]
 800c37e:	07db      	lsls	r3, r3, #31
 800c380:	d5f1      	bpl.n	800c366 <_printf_float+0x1ca>
 800c382:	3101      	adds	r1, #1
 800c384:	6129      	str	r1, [r5, #16]
 800c386:	e7ee      	b.n	800c366 <_printf_float+0x1ca>
 800c388:	2201      	movs	r2, #1
 800c38a:	2900      	cmp	r1, #0
 800c38c:	dce0      	bgt.n	800c350 <_printf_float+0x1b4>
 800c38e:	1892      	adds	r2, r2, r2
 800c390:	1a52      	subs	r2, r2, r1
 800c392:	e7dd      	b.n	800c350 <_printf_float+0x1b4>
 800c394:	682a      	ldr	r2, [r5, #0]
 800c396:	0553      	lsls	r3, r2, #21
 800c398:	d408      	bmi.n	800c3ac <_printf_float+0x210>
 800c39a:	692b      	ldr	r3, [r5, #16]
 800c39c:	003a      	movs	r2, r7
 800c39e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c3a0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c3a2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800c3a4:	47a0      	blx	r4
 800c3a6:	3001      	adds	r0, #1
 800c3a8:	d129      	bne.n	800c3fe <_printf_float+0x262>
 800c3aa:	e753      	b.n	800c254 <_printf_float+0xb8>
 800c3ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c3ae:	2b65      	cmp	r3, #101	@ 0x65
 800c3b0:	d800      	bhi.n	800c3b4 <_printf_float+0x218>
 800c3b2:	e0da      	b.n	800c56a <_printf_float+0x3ce>
 800c3b4:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800c3b6:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	f7f4 f846 	bl	800044c <__aeabi_dcmpeq>
 800c3c0:	2800      	cmp	r0, #0
 800c3c2:	d033      	beq.n	800c42c <_printf_float+0x290>
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	4a37      	ldr	r2, [pc, #220]	@ (800c4a4 <_printf_float+0x308>)
 800c3c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c3ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c3cc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800c3ce:	47a0      	blx	r4
 800c3d0:	3001      	adds	r0, #1
 800c3d2:	d100      	bne.n	800c3d6 <_printf_float+0x23a>
 800c3d4:	e73e      	b.n	800c254 <_printf_float+0xb8>
 800c3d6:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800c3d8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c3da:	42b3      	cmp	r3, r6
 800c3dc:	db02      	blt.n	800c3e4 <_printf_float+0x248>
 800c3de:	682b      	ldr	r3, [r5, #0]
 800c3e0:	07db      	lsls	r3, r3, #31
 800c3e2:	d50c      	bpl.n	800c3fe <_printf_float+0x262>
 800c3e4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800c3e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c3ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c3ec:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c3ee:	47a0      	blx	r4
 800c3f0:	2400      	movs	r4, #0
 800c3f2:	3001      	adds	r0, #1
 800c3f4:	d100      	bne.n	800c3f8 <_printf_float+0x25c>
 800c3f6:	e72d      	b.n	800c254 <_printf_float+0xb8>
 800c3f8:	1e73      	subs	r3, r6, #1
 800c3fa:	42a3      	cmp	r3, r4
 800c3fc:	dc0a      	bgt.n	800c414 <_printf_float+0x278>
 800c3fe:	682b      	ldr	r3, [r5, #0]
 800c400:	079b      	lsls	r3, r3, #30
 800c402:	d500      	bpl.n	800c406 <_printf_float+0x26a>
 800c404:	e105      	b.n	800c612 <_printf_float+0x476>
 800c406:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c408:	68e8      	ldr	r0, [r5, #12]
 800c40a:	4298      	cmp	r0, r3
 800c40c:	db00      	blt.n	800c410 <_printf_float+0x274>
 800c40e:	e723      	b.n	800c258 <_printf_float+0xbc>
 800c410:	0018      	movs	r0, r3
 800c412:	e721      	b.n	800c258 <_printf_float+0xbc>
 800c414:	002a      	movs	r2, r5
 800c416:	2301      	movs	r3, #1
 800c418:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c41a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c41c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800c41e:	321a      	adds	r2, #26
 800c420:	47b8      	blx	r7
 800c422:	3001      	adds	r0, #1
 800c424:	d100      	bne.n	800c428 <_printf_float+0x28c>
 800c426:	e715      	b.n	800c254 <_printf_float+0xb8>
 800c428:	3401      	adds	r4, #1
 800c42a:	e7e5      	b.n	800c3f8 <_printf_float+0x25c>
 800c42c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c42e:	2b00      	cmp	r3, #0
 800c430:	dc3a      	bgt.n	800c4a8 <_printf_float+0x30c>
 800c432:	2301      	movs	r3, #1
 800c434:	4a1b      	ldr	r2, [pc, #108]	@ (800c4a4 <_printf_float+0x308>)
 800c436:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c438:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c43a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800c43c:	47a0      	blx	r4
 800c43e:	3001      	adds	r0, #1
 800c440:	d100      	bne.n	800c444 <_printf_float+0x2a8>
 800c442:	e707      	b.n	800c254 <_printf_float+0xb8>
 800c444:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800c446:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c448:	4333      	orrs	r3, r6
 800c44a:	d102      	bne.n	800c452 <_printf_float+0x2b6>
 800c44c:	682b      	ldr	r3, [r5, #0]
 800c44e:	07db      	lsls	r3, r3, #31
 800c450:	d5d5      	bpl.n	800c3fe <_printf_float+0x262>
 800c452:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c454:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c456:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c458:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c45a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800c45c:	47a0      	blx	r4
 800c45e:	2300      	movs	r3, #0
 800c460:	3001      	adds	r0, #1
 800c462:	d100      	bne.n	800c466 <_printf_float+0x2ca>
 800c464:	e6f6      	b.n	800c254 <_printf_float+0xb8>
 800c466:	930c      	str	r3, [sp, #48]	@ 0x30
 800c468:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c46a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c46c:	425b      	negs	r3, r3
 800c46e:	4293      	cmp	r3, r2
 800c470:	dc01      	bgt.n	800c476 <_printf_float+0x2da>
 800c472:	0033      	movs	r3, r6
 800c474:	e792      	b.n	800c39c <_printf_float+0x200>
 800c476:	002a      	movs	r2, r5
 800c478:	2301      	movs	r3, #1
 800c47a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c47c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c47e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800c480:	321a      	adds	r2, #26
 800c482:	47a0      	blx	r4
 800c484:	3001      	adds	r0, #1
 800c486:	d100      	bne.n	800c48a <_printf_float+0x2ee>
 800c488:	e6e4      	b.n	800c254 <_printf_float+0xb8>
 800c48a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c48c:	3301      	adds	r3, #1
 800c48e:	e7ea      	b.n	800c466 <_printf_float+0x2ca>
 800c490:	7fefffff 	.word	0x7fefffff
 800c494:	0801a2da 	.word	0x0801a2da
 800c498:	0801a2de 	.word	0x0801a2de
 800c49c:	0801a2e2 	.word	0x0801a2e2
 800c4a0:	0801a2e6 	.word	0x0801a2e6
 800c4a4:	0801a2ea 	.word	0x0801a2ea
 800c4a8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c4aa:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800c4ac:	930c      	str	r3, [sp, #48]	@ 0x30
 800c4ae:	429e      	cmp	r6, r3
 800c4b0:	dd00      	ble.n	800c4b4 <_printf_float+0x318>
 800c4b2:	001e      	movs	r6, r3
 800c4b4:	2e00      	cmp	r6, #0
 800c4b6:	dc31      	bgt.n	800c51c <_printf_float+0x380>
 800c4b8:	43f3      	mvns	r3, r6
 800c4ba:	2400      	movs	r4, #0
 800c4bc:	17db      	asrs	r3, r3, #31
 800c4be:	4033      	ands	r3, r6
 800c4c0:	930e      	str	r3, [sp, #56]	@ 0x38
 800c4c2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800c4c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4c6:	1af3      	subs	r3, r6, r3
 800c4c8:	42a3      	cmp	r3, r4
 800c4ca:	dc30      	bgt.n	800c52e <_printf_float+0x392>
 800c4cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c4ce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c4d0:	429a      	cmp	r2, r3
 800c4d2:	dc38      	bgt.n	800c546 <_printf_float+0x3aa>
 800c4d4:	682b      	ldr	r3, [r5, #0]
 800c4d6:	07db      	lsls	r3, r3, #31
 800c4d8:	d435      	bmi.n	800c546 <_printf_float+0x3aa>
 800c4da:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800c4dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c4de:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c4e0:	1b9b      	subs	r3, r3, r6
 800c4e2:	1b14      	subs	r4, r2, r4
 800c4e4:	429c      	cmp	r4, r3
 800c4e6:	dd00      	ble.n	800c4ea <_printf_float+0x34e>
 800c4e8:	001c      	movs	r4, r3
 800c4ea:	2c00      	cmp	r4, #0
 800c4ec:	dc34      	bgt.n	800c558 <_printf_float+0x3bc>
 800c4ee:	43e3      	mvns	r3, r4
 800c4f0:	2600      	movs	r6, #0
 800c4f2:	17db      	asrs	r3, r3, #31
 800c4f4:	401c      	ands	r4, r3
 800c4f6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c4f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c4fa:	1ad3      	subs	r3, r2, r3
 800c4fc:	1b1b      	subs	r3, r3, r4
 800c4fe:	42b3      	cmp	r3, r6
 800c500:	dc00      	bgt.n	800c504 <_printf_float+0x368>
 800c502:	e77c      	b.n	800c3fe <_printf_float+0x262>
 800c504:	002a      	movs	r2, r5
 800c506:	2301      	movs	r3, #1
 800c508:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c50a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c50c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800c50e:	321a      	adds	r2, #26
 800c510:	47b8      	blx	r7
 800c512:	3001      	adds	r0, #1
 800c514:	d100      	bne.n	800c518 <_printf_float+0x37c>
 800c516:	e69d      	b.n	800c254 <_printf_float+0xb8>
 800c518:	3601      	adds	r6, #1
 800c51a:	e7ec      	b.n	800c4f6 <_printf_float+0x35a>
 800c51c:	0033      	movs	r3, r6
 800c51e:	003a      	movs	r2, r7
 800c520:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c522:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c524:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800c526:	47a0      	blx	r4
 800c528:	3001      	adds	r0, #1
 800c52a:	d1c5      	bne.n	800c4b8 <_printf_float+0x31c>
 800c52c:	e692      	b.n	800c254 <_printf_float+0xb8>
 800c52e:	002a      	movs	r2, r5
 800c530:	2301      	movs	r3, #1
 800c532:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c534:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c536:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c538:	321a      	adds	r2, #26
 800c53a:	47b0      	blx	r6
 800c53c:	3001      	adds	r0, #1
 800c53e:	d100      	bne.n	800c542 <_printf_float+0x3a6>
 800c540:	e688      	b.n	800c254 <_printf_float+0xb8>
 800c542:	3401      	adds	r4, #1
 800c544:	e7bd      	b.n	800c4c2 <_printf_float+0x326>
 800c546:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c548:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c54a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c54c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c54e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800c550:	47a0      	blx	r4
 800c552:	3001      	adds	r0, #1
 800c554:	d1c1      	bne.n	800c4da <_printf_float+0x33e>
 800c556:	e67d      	b.n	800c254 <_printf_float+0xb8>
 800c558:	19ba      	adds	r2, r7, r6
 800c55a:	0023      	movs	r3, r4
 800c55c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c55e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c560:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c562:	47b0      	blx	r6
 800c564:	3001      	adds	r0, #1
 800c566:	d1c2      	bne.n	800c4ee <_printf_float+0x352>
 800c568:	e674      	b.n	800c254 <_printf_float+0xb8>
 800c56a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c56c:	930c      	str	r3, [sp, #48]	@ 0x30
 800c56e:	2b01      	cmp	r3, #1
 800c570:	dc02      	bgt.n	800c578 <_printf_float+0x3dc>
 800c572:	2301      	movs	r3, #1
 800c574:	421a      	tst	r2, r3
 800c576:	d039      	beq.n	800c5ec <_printf_float+0x450>
 800c578:	2301      	movs	r3, #1
 800c57a:	003a      	movs	r2, r7
 800c57c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c57e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c580:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c582:	47b0      	blx	r6
 800c584:	3001      	adds	r0, #1
 800c586:	d100      	bne.n	800c58a <_printf_float+0x3ee>
 800c588:	e664      	b.n	800c254 <_printf_float+0xb8>
 800c58a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c58c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c58e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c590:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c592:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c594:	47b0      	blx	r6
 800c596:	3001      	adds	r0, #1
 800c598:	d100      	bne.n	800c59c <_printf_float+0x400>
 800c59a:	e65b      	b.n	800c254 <_printf_float+0xb8>
 800c59c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800c59e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800c5a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	3b01      	subs	r3, #1
 800c5a6:	930c      	str	r3, [sp, #48]	@ 0x30
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	f7f3 ff4f 	bl	800044c <__aeabi_dcmpeq>
 800c5ae:	2800      	cmp	r0, #0
 800c5b0:	d11a      	bne.n	800c5e8 <_printf_float+0x44c>
 800c5b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c5b4:	1c7a      	adds	r2, r7, #1
 800c5b6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c5b8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c5ba:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c5bc:	47b0      	blx	r6
 800c5be:	3001      	adds	r0, #1
 800c5c0:	d10e      	bne.n	800c5e0 <_printf_float+0x444>
 800c5c2:	e647      	b.n	800c254 <_printf_float+0xb8>
 800c5c4:	002a      	movs	r2, r5
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c5ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c5cc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800c5ce:	321a      	adds	r2, #26
 800c5d0:	47b8      	blx	r7
 800c5d2:	3001      	adds	r0, #1
 800c5d4:	d100      	bne.n	800c5d8 <_printf_float+0x43c>
 800c5d6:	e63d      	b.n	800c254 <_printf_float+0xb8>
 800c5d8:	3601      	adds	r6, #1
 800c5da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c5dc:	429e      	cmp	r6, r3
 800c5de:	dbf1      	blt.n	800c5c4 <_printf_float+0x428>
 800c5e0:	002a      	movs	r2, r5
 800c5e2:	0023      	movs	r3, r4
 800c5e4:	3250      	adds	r2, #80	@ 0x50
 800c5e6:	e6da      	b.n	800c39e <_printf_float+0x202>
 800c5e8:	2600      	movs	r6, #0
 800c5ea:	e7f6      	b.n	800c5da <_printf_float+0x43e>
 800c5ec:	003a      	movs	r2, r7
 800c5ee:	e7e2      	b.n	800c5b6 <_printf_float+0x41a>
 800c5f0:	002a      	movs	r2, r5
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c5f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c5f8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c5fa:	3219      	adds	r2, #25
 800c5fc:	47b0      	blx	r6
 800c5fe:	3001      	adds	r0, #1
 800c600:	d100      	bne.n	800c604 <_printf_float+0x468>
 800c602:	e627      	b.n	800c254 <_printf_float+0xb8>
 800c604:	3401      	adds	r4, #1
 800c606:	68eb      	ldr	r3, [r5, #12]
 800c608:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800c60a:	1a9b      	subs	r3, r3, r2
 800c60c:	42a3      	cmp	r3, r4
 800c60e:	dcef      	bgt.n	800c5f0 <_printf_float+0x454>
 800c610:	e6f9      	b.n	800c406 <_printf_float+0x26a>
 800c612:	2400      	movs	r4, #0
 800c614:	e7f7      	b.n	800c606 <_printf_float+0x46a>
 800c616:	46c0      	nop			@ (mov r8, r8)

0800c618 <_printf_common>:
 800c618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c61a:	0016      	movs	r6, r2
 800c61c:	9301      	str	r3, [sp, #4]
 800c61e:	688a      	ldr	r2, [r1, #8]
 800c620:	690b      	ldr	r3, [r1, #16]
 800c622:	000c      	movs	r4, r1
 800c624:	9000      	str	r0, [sp, #0]
 800c626:	4293      	cmp	r3, r2
 800c628:	da00      	bge.n	800c62c <_printf_common+0x14>
 800c62a:	0013      	movs	r3, r2
 800c62c:	0022      	movs	r2, r4
 800c62e:	6033      	str	r3, [r6, #0]
 800c630:	3243      	adds	r2, #67	@ 0x43
 800c632:	7812      	ldrb	r2, [r2, #0]
 800c634:	2a00      	cmp	r2, #0
 800c636:	d001      	beq.n	800c63c <_printf_common+0x24>
 800c638:	3301      	adds	r3, #1
 800c63a:	6033      	str	r3, [r6, #0]
 800c63c:	6823      	ldr	r3, [r4, #0]
 800c63e:	069b      	lsls	r3, r3, #26
 800c640:	d502      	bpl.n	800c648 <_printf_common+0x30>
 800c642:	6833      	ldr	r3, [r6, #0]
 800c644:	3302      	adds	r3, #2
 800c646:	6033      	str	r3, [r6, #0]
 800c648:	6822      	ldr	r2, [r4, #0]
 800c64a:	2306      	movs	r3, #6
 800c64c:	0015      	movs	r5, r2
 800c64e:	401d      	ands	r5, r3
 800c650:	421a      	tst	r2, r3
 800c652:	d027      	beq.n	800c6a4 <_printf_common+0x8c>
 800c654:	0023      	movs	r3, r4
 800c656:	3343      	adds	r3, #67	@ 0x43
 800c658:	781b      	ldrb	r3, [r3, #0]
 800c65a:	1e5a      	subs	r2, r3, #1
 800c65c:	4193      	sbcs	r3, r2
 800c65e:	6822      	ldr	r2, [r4, #0]
 800c660:	0692      	lsls	r2, r2, #26
 800c662:	d430      	bmi.n	800c6c6 <_printf_common+0xae>
 800c664:	0022      	movs	r2, r4
 800c666:	9901      	ldr	r1, [sp, #4]
 800c668:	9800      	ldr	r0, [sp, #0]
 800c66a:	9d08      	ldr	r5, [sp, #32]
 800c66c:	3243      	adds	r2, #67	@ 0x43
 800c66e:	47a8      	blx	r5
 800c670:	3001      	adds	r0, #1
 800c672:	d025      	beq.n	800c6c0 <_printf_common+0xa8>
 800c674:	2206      	movs	r2, #6
 800c676:	6823      	ldr	r3, [r4, #0]
 800c678:	2500      	movs	r5, #0
 800c67a:	4013      	ands	r3, r2
 800c67c:	2b04      	cmp	r3, #4
 800c67e:	d105      	bne.n	800c68c <_printf_common+0x74>
 800c680:	6833      	ldr	r3, [r6, #0]
 800c682:	68e5      	ldr	r5, [r4, #12]
 800c684:	1aed      	subs	r5, r5, r3
 800c686:	43eb      	mvns	r3, r5
 800c688:	17db      	asrs	r3, r3, #31
 800c68a:	401d      	ands	r5, r3
 800c68c:	68a3      	ldr	r3, [r4, #8]
 800c68e:	6922      	ldr	r2, [r4, #16]
 800c690:	4293      	cmp	r3, r2
 800c692:	dd01      	ble.n	800c698 <_printf_common+0x80>
 800c694:	1a9b      	subs	r3, r3, r2
 800c696:	18ed      	adds	r5, r5, r3
 800c698:	2600      	movs	r6, #0
 800c69a:	42b5      	cmp	r5, r6
 800c69c:	d120      	bne.n	800c6e0 <_printf_common+0xc8>
 800c69e:	2000      	movs	r0, #0
 800c6a0:	e010      	b.n	800c6c4 <_printf_common+0xac>
 800c6a2:	3501      	adds	r5, #1
 800c6a4:	68e3      	ldr	r3, [r4, #12]
 800c6a6:	6832      	ldr	r2, [r6, #0]
 800c6a8:	1a9b      	subs	r3, r3, r2
 800c6aa:	42ab      	cmp	r3, r5
 800c6ac:	ddd2      	ble.n	800c654 <_printf_common+0x3c>
 800c6ae:	0022      	movs	r2, r4
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	9901      	ldr	r1, [sp, #4]
 800c6b4:	9800      	ldr	r0, [sp, #0]
 800c6b6:	9f08      	ldr	r7, [sp, #32]
 800c6b8:	3219      	adds	r2, #25
 800c6ba:	47b8      	blx	r7
 800c6bc:	3001      	adds	r0, #1
 800c6be:	d1f0      	bne.n	800c6a2 <_printf_common+0x8a>
 800c6c0:	2001      	movs	r0, #1
 800c6c2:	4240      	negs	r0, r0
 800c6c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c6c6:	2030      	movs	r0, #48	@ 0x30
 800c6c8:	18e1      	adds	r1, r4, r3
 800c6ca:	3143      	adds	r1, #67	@ 0x43
 800c6cc:	7008      	strb	r0, [r1, #0]
 800c6ce:	0021      	movs	r1, r4
 800c6d0:	1c5a      	adds	r2, r3, #1
 800c6d2:	3145      	adds	r1, #69	@ 0x45
 800c6d4:	7809      	ldrb	r1, [r1, #0]
 800c6d6:	18a2      	adds	r2, r4, r2
 800c6d8:	3243      	adds	r2, #67	@ 0x43
 800c6da:	3302      	adds	r3, #2
 800c6dc:	7011      	strb	r1, [r2, #0]
 800c6de:	e7c1      	b.n	800c664 <_printf_common+0x4c>
 800c6e0:	0022      	movs	r2, r4
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	9901      	ldr	r1, [sp, #4]
 800c6e6:	9800      	ldr	r0, [sp, #0]
 800c6e8:	9f08      	ldr	r7, [sp, #32]
 800c6ea:	321a      	adds	r2, #26
 800c6ec:	47b8      	blx	r7
 800c6ee:	3001      	adds	r0, #1
 800c6f0:	d0e6      	beq.n	800c6c0 <_printf_common+0xa8>
 800c6f2:	3601      	adds	r6, #1
 800c6f4:	e7d1      	b.n	800c69a <_printf_common+0x82>
	...

0800c6f8 <_printf_i>:
 800c6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6fa:	b08b      	sub	sp, #44	@ 0x2c
 800c6fc:	9206      	str	r2, [sp, #24]
 800c6fe:	000a      	movs	r2, r1
 800c700:	3243      	adds	r2, #67	@ 0x43
 800c702:	9307      	str	r3, [sp, #28]
 800c704:	9005      	str	r0, [sp, #20]
 800c706:	9203      	str	r2, [sp, #12]
 800c708:	7e0a      	ldrb	r2, [r1, #24]
 800c70a:	000c      	movs	r4, r1
 800c70c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c70e:	2a78      	cmp	r2, #120	@ 0x78
 800c710:	d809      	bhi.n	800c726 <_printf_i+0x2e>
 800c712:	2a62      	cmp	r2, #98	@ 0x62
 800c714:	d80b      	bhi.n	800c72e <_printf_i+0x36>
 800c716:	2a00      	cmp	r2, #0
 800c718:	d100      	bne.n	800c71c <_printf_i+0x24>
 800c71a:	e0bc      	b.n	800c896 <_printf_i+0x19e>
 800c71c:	497b      	ldr	r1, [pc, #492]	@ (800c90c <_printf_i+0x214>)
 800c71e:	9104      	str	r1, [sp, #16]
 800c720:	2a58      	cmp	r2, #88	@ 0x58
 800c722:	d100      	bne.n	800c726 <_printf_i+0x2e>
 800c724:	e090      	b.n	800c848 <_printf_i+0x150>
 800c726:	0025      	movs	r5, r4
 800c728:	3542      	adds	r5, #66	@ 0x42
 800c72a:	702a      	strb	r2, [r5, #0]
 800c72c:	e022      	b.n	800c774 <_printf_i+0x7c>
 800c72e:	0010      	movs	r0, r2
 800c730:	3863      	subs	r0, #99	@ 0x63
 800c732:	2815      	cmp	r0, #21
 800c734:	d8f7      	bhi.n	800c726 <_printf_i+0x2e>
 800c736:	f7f3 fcf9 	bl	800012c <__gnu_thumb1_case_shi>
 800c73a:	0016      	.short	0x0016
 800c73c:	fff6001f 	.word	0xfff6001f
 800c740:	fff6fff6 	.word	0xfff6fff6
 800c744:	001ffff6 	.word	0x001ffff6
 800c748:	fff6fff6 	.word	0xfff6fff6
 800c74c:	fff6fff6 	.word	0xfff6fff6
 800c750:	003600a1 	.word	0x003600a1
 800c754:	fff60080 	.word	0xfff60080
 800c758:	00b2fff6 	.word	0x00b2fff6
 800c75c:	0036fff6 	.word	0x0036fff6
 800c760:	fff6fff6 	.word	0xfff6fff6
 800c764:	0084      	.short	0x0084
 800c766:	0025      	movs	r5, r4
 800c768:	681a      	ldr	r2, [r3, #0]
 800c76a:	3542      	adds	r5, #66	@ 0x42
 800c76c:	1d11      	adds	r1, r2, #4
 800c76e:	6019      	str	r1, [r3, #0]
 800c770:	6813      	ldr	r3, [r2, #0]
 800c772:	702b      	strb	r3, [r5, #0]
 800c774:	2301      	movs	r3, #1
 800c776:	e0a0      	b.n	800c8ba <_printf_i+0x1c2>
 800c778:	6818      	ldr	r0, [r3, #0]
 800c77a:	6809      	ldr	r1, [r1, #0]
 800c77c:	1d02      	adds	r2, r0, #4
 800c77e:	060d      	lsls	r5, r1, #24
 800c780:	d50b      	bpl.n	800c79a <_printf_i+0xa2>
 800c782:	6806      	ldr	r6, [r0, #0]
 800c784:	601a      	str	r2, [r3, #0]
 800c786:	2e00      	cmp	r6, #0
 800c788:	da03      	bge.n	800c792 <_printf_i+0x9a>
 800c78a:	232d      	movs	r3, #45	@ 0x2d
 800c78c:	9a03      	ldr	r2, [sp, #12]
 800c78e:	4276      	negs	r6, r6
 800c790:	7013      	strb	r3, [r2, #0]
 800c792:	4b5e      	ldr	r3, [pc, #376]	@ (800c90c <_printf_i+0x214>)
 800c794:	270a      	movs	r7, #10
 800c796:	9304      	str	r3, [sp, #16]
 800c798:	e018      	b.n	800c7cc <_printf_i+0xd4>
 800c79a:	6806      	ldr	r6, [r0, #0]
 800c79c:	601a      	str	r2, [r3, #0]
 800c79e:	0649      	lsls	r1, r1, #25
 800c7a0:	d5f1      	bpl.n	800c786 <_printf_i+0x8e>
 800c7a2:	b236      	sxth	r6, r6
 800c7a4:	e7ef      	b.n	800c786 <_printf_i+0x8e>
 800c7a6:	6808      	ldr	r0, [r1, #0]
 800c7a8:	6819      	ldr	r1, [r3, #0]
 800c7aa:	c940      	ldmia	r1!, {r6}
 800c7ac:	0605      	lsls	r5, r0, #24
 800c7ae:	d402      	bmi.n	800c7b6 <_printf_i+0xbe>
 800c7b0:	0640      	lsls	r0, r0, #25
 800c7b2:	d500      	bpl.n	800c7b6 <_printf_i+0xbe>
 800c7b4:	b2b6      	uxth	r6, r6
 800c7b6:	6019      	str	r1, [r3, #0]
 800c7b8:	4b54      	ldr	r3, [pc, #336]	@ (800c90c <_printf_i+0x214>)
 800c7ba:	270a      	movs	r7, #10
 800c7bc:	9304      	str	r3, [sp, #16]
 800c7be:	2a6f      	cmp	r2, #111	@ 0x6f
 800c7c0:	d100      	bne.n	800c7c4 <_printf_i+0xcc>
 800c7c2:	3f02      	subs	r7, #2
 800c7c4:	0023      	movs	r3, r4
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	3343      	adds	r3, #67	@ 0x43
 800c7ca:	701a      	strb	r2, [r3, #0]
 800c7cc:	6863      	ldr	r3, [r4, #4]
 800c7ce:	60a3      	str	r3, [r4, #8]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	db03      	blt.n	800c7dc <_printf_i+0xe4>
 800c7d4:	2104      	movs	r1, #4
 800c7d6:	6822      	ldr	r2, [r4, #0]
 800c7d8:	438a      	bics	r2, r1
 800c7da:	6022      	str	r2, [r4, #0]
 800c7dc:	2e00      	cmp	r6, #0
 800c7de:	d102      	bne.n	800c7e6 <_printf_i+0xee>
 800c7e0:	9d03      	ldr	r5, [sp, #12]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d00c      	beq.n	800c800 <_printf_i+0x108>
 800c7e6:	9d03      	ldr	r5, [sp, #12]
 800c7e8:	0030      	movs	r0, r6
 800c7ea:	0039      	movs	r1, r7
 800c7ec:	f7f3 fd2e 	bl	800024c <__aeabi_uidivmod>
 800c7f0:	9b04      	ldr	r3, [sp, #16]
 800c7f2:	3d01      	subs	r5, #1
 800c7f4:	5c5b      	ldrb	r3, [r3, r1]
 800c7f6:	702b      	strb	r3, [r5, #0]
 800c7f8:	0033      	movs	r3, r6
 800c7fa:	0006      	movs	r6, r0
 800c7fc:	429f      	cmp	r7, r3
 800c7fe:	d9f3      	bls.n	800c7e8 <_printf_i+0xf0>
 800c800:	2f08      	cmp	r7, #8
 800c802:	d109      	bne.n	800c818 <_printf_i+0x120>
 800c804:	6823      	ldr	r3, [r4, #0]
 800c806:	07db      	lsls	r3, r3, #31
 800c808:	d506      	bpl.n	800c818 <_printf_i+0x120>
 800c80a:	6862      	ldr	r2, [r4, #4]
 800c80c:	6923      	ldr	r3, [r4, #16]
 800c80e:	429a      	cmp	r2, r3
 800c810:	dc02      	bgt.n	800c818 <_printf_i+0x120>
 800c812:	2330      	movs	r3, #48	@ 0x30
 800c814:	3d01      	subs	r5, #1
 800c816:	702b      	strb	r3, [r5, #0]
 800c818:	9b03      	ldr	r3, [sp, #12]
 800c81a:	1b5b      	subs	r3, r3, r5
 800c81c:	6123      	str	r3, [r4, #16]
 800c81e:	9b07      	ldr	r3, [sp, #28]
 800c820:	0021      	movs	r1, r4
 800c822:	9300      	str	r3, [sp, #0]
 800c824:	9805      	ldr	r0, [sp, #20]
 800c826:	9b06      	ldr	r3, [sp, #24]
 800c828:	aa09      	add	r2, sp, #36	@ 0x24
 800c82a:	f7ff fef5 	bl	800c618 <_printf_common>
 800c82e:	3001      	adds	r0, #1
 800c830:	d148      	bne.n	800c8c4 <_printf_i+0x1cc>
 800c832:	2001      	movs	r0, #1
 800c834:	4240      	negs	r0, r0
 800c836:	b00b      	add	sp, #44	@ 0x2c
 800c838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c83a:	2220      	movs	r2, #32
 800c83c:	6809      	ldr	r1, [r1, #0]
 800c83e:	430a      	orrs	r2, r1
 800c840:	6022      	str	r2, [r4, #0]
 800c842:	2278      	movs	r2, #120	@ 0x78
 800c844:	4932      	ldr	r1, [pc, #200]	@ (800c910 <_printf_i+0x218>)
 800c846:	9104      	str	r1, [sp, #16]
 800c848:	0021      	movs	r1, r4
 800c84a:	3145      	adds	r1, #69	@ 0x45
 800c84c:	700a      	strb	r2, [r1, #0]
 800c84e:	6819      	ldr	r1, [r3, #0]
 800c850:	6822      	ldr	r2, [r4, #0]
 800c852:	c940      	ldmia	r1!, {r6}
 800c854:	0610      	lsls	r0, r2, #24
 800c856:	d402      	bmi.n	800c85e <_printf_i+0x166>
 800c858:	0650      	lsls	r0, r2, #25
 800c85a:	d500      	bpl.n	800c85e <_printf_i+0x166>
 800c85c:	b2b6      	uxth	r6, r6
 800c85e:	6019      	str	r1, [r3, #0]
 800c860:	07d3      	lsls	r3, r2, #31
 800c862:	d502      	bpl.n	800c86a <_printf_i+0x172>
 800c864:	2320      	movs	r3, #32
 800c866:	4313      	orrs	r3, r2
 800c868:	6023      	str	r3, [r4, #0]
 800c86a:	2e00      	cmp	r6, #0
 800c86c:	d001      	beq.n	800c872 <_printf_i+0x17a>
 800c86e:	2710      	movs	r7, #16
 800c870:	e7a8      	b.n	800c7c4 <_printf_i+0xcc>
 800c872:	2220      	movs	r2, #32
 800c874:	6823      	ldr	r3, [r4, #0]
 800c876:	4393      	bics	r3, r2
 800c878:	6023      	str	r3, [r4, #0]
 800c87a:	e7f8      	b.n	800c86e <_printf_i+0x176>
 800c87c:	681a      	ldr	r2, [r3, #0]
 800c87e:	680d      	ldr	r5, [r1, #0]
 800c880:	1d10      	adds	r0, r2, #4
 800c882:	6949      	ldr	r1, [r1, #20]
 800c884:	6018      	str	r0, [r3, #0]
 800c886:	6813      	ldr	r3, [r2, #0]
 800c888:	062e      	lsls	r6, r5, #24
 800c88a:	d501      	bpl.n	800c890 <_printf_i+0x198>
 800c88c:	6019      	str	r1, [r3, #0]
 800c88e:	e002      	b.n	800c896 <_printf_i+0x19e>
 800c890:	066d      	lsls	r5, r5, #25
 800c892:	d5fb      	bpl.n	800c88c <_printf_i+0x194>
 800c894:	8019      	strh	r1, [r3, #0]
 800c896:	2300      	movs	r3, #0
 800c898:	9d03      	ldr	r5, [sp, #12]
 800c89a:	6123      	str	r3, [r4, #16]
 800c89c:	e7bf      	b.n	800c81e <_printf_i+0x126>
 800c89e:	681a      	ldr	r2, [r3, #0]
 800c8a0:	1d11      	adds	r1, r2, #4
 800c8a2:	6019      	str	r1, [r3, #0]
 800c8a4:	6815      	ldr	r5, [r2, #0]
 800c8a6:	2100      	movs	r1, #0
 800c8a8:	0028      	movs	r0, r5
 800c8aa:	6862      	ldr	r2, [r4, #4]
 800c8ac:	f000 fa01 	bl	800ccb2 <memchr>
 800c8b0:	2800      	cmp	r0, #0
 800c8b2:	d001      	beq.n	800c8b8 <_printf_i+0x1c0>
 800c8b4:	1b40      	subs	r0, r0, r5
 800c8b6:	6060      	str	r0, [r4, #4]
 800c8b8:	6863      	ldr	r3, [r4, #4]
 800c8ba:	6123      	str	r3, [r4, #16]
 800c8bc:	2300      	movs	r3, #0
 800c8be:	9a03      	ldr	r2, [sp, #12]
 800c8c0:	7013      	strb	r3, [r2, #0]
 800c8c2:	e7ac      	b.n	800c81e <_printf_i+0x126>
 800c8c4:	002a      	movs	r2, r5
 800c8c6:	6923      	ldr	r3, [r4, #16]
 800c8c8:	9906      	ldr	r1, [sp, #24]
 800c8ca:	9805      	ldr	r0, [sp, #20]
 800c8cc:	9d07      	ldr	r5, [sp, #28]
 800c8ce:	47a8      	blx	r5
 800c8d0:	3001      	adds	r0, #1
 800c8d2:	d0ae      	beq.n	800c832 <_printf_i+0x13a>
 800c8d4:	6823      	ldr	r3, [r4, #0]
 800c8d6:	079b      	lsls	r3, r3, #30
 800c8d8:	d415      	bmi.n	800c906 <_printf_i+0x20e>
 800c8da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8dc:	68e0      	ldr	r0, [r4, #12]
 800c8de:	4298      	cmp	r0, r3
 800c8e0:	daa9      	bge.n	800c836 <_printf_i+0x13e>
 800c8e2:	0018      	movs	r0, r3
 800c8e4:	e7a7      	b.n	800c836 <_printf_i+0x13e>
 800c8e6:	0022      	movs	r2, r4
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	9906      	ldr	r1, [sp, #24]
 800c8ec:	9805      	ldr	r0, [sp, #20]
 800c8ee:	9e07      	ldr	r6, [sp, #28]
 800c8f0:	3219      	adds	r2, #25
 800c8f2:	47b0      	blx	r6
 800c8f4:	3001      	adds	r0, #1
 800c8f6:	d09c      	beq.n	800c832 <_printf_i+0x13a>
 800c8f8:	3501      	adds	r5, #1
 800c8fa:	68e3      	ldr	r3, [r4, #12]
 800c8fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c8fe:	1a9b      	subs	r3, r3, r2
 800c900:	42ab      	cmp	r3, r5
 800c902:	dcf0      	bgt.n	800c8e6 <_printf_i+0x1ee>
 800c904:	e7e9      	b.n	800c8da <_printf_i+0x1e2>
 800c906:	2500      	movs	r5, #0
 800c908:	e7f7      	b.n	800c8fa <_printf_i+0x202>
 800c90a:	46c0      	nop			@ (mov r8, r8)
 800c90c:	0801a2ec 	.word	0x0801a2ec
 800c910:	0801a2fd 	.word	0x0801a2fd

0800c914 <std>:
 800c914:	2300      	movs	r3, #0
 800c916:	b510      	push	{r4, lr}
 800c918:	0004      	movs	r4, r0
 800c91a:	6003      	str	r3, [r0, #0]
 800c91c:	6043      	str	r3, [r0, #4]
 800c91e:	6083      	str	r3, [r0, #8]
 800c920:	8181      	strh	r1, [r0, #12]
 800c922:	6643      	str	r3, [r0, #100]	@ 0x64
 800c924:	81c2      	strh	r2, [r0, #14]
 800c926:	6103      	str	r3, [r0, #16]
 800c928:	6143      	str	r3, [r0, #20]
 800c92a:	6183      	str	r3, [r0, #24]
 800c92c:	0019      	movs	r1, r3
 800c92e:	2208      	movs	r2, #8
 800c930:	305c      	adds	r0, #92	@ 0x5c
 800c932:	f000 f90f 	bl	800cb54 <memset>
 800c936:	4b0b      	ldr	r3, [pc, #44]	@ (800c964 <std+0x50>)
 800c938:	6224      	str	r4, [r4, #32]
 800c93a:	6263      	str	r3, [r4, #36]	@ 0x24
 800c93c:	4b0a      	ldr	r3, [pc, #40]	@ (800c968 <std+0x54>)
 800c93e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c940:	4b0a      	ldr	r3, [pc, #40]	@ (800c96c <std+0x58>)
 800c942:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c944:	4b0a      	ldr	r3, [pc, #40]	@ (800c970 <std+0x5c>)
 800c946:	6323      	str	r3, [r4, #48]	@ 0x30
 800c948:	4b0a      	ldr	r3, [pc, #40]	@ (800c974 <std+0x60>)
 800c94a:	429c      	cmp	r4, r3
 800c94c:	d005      	beq.n	800c95a <std+0x46>
 800c94e:	4b0a      	ldr	r3, [pc, #40]	@ (800c978 <std+0x64>)
 800c950:	429c      	cmp	r4, r3
 800c952:	d002      	beq.n	800c95a <std+0x46>
 800c954:	4b09      	ldr	r3, [pc, #36]	@ (800c97c <std+0x68>)
 800c956:	429c      	cmp	r4, r3
 800c958:	d103      	bne.n	800c962 <std+0x4e>
 800c95a:	0020      	movs	r0, r4
 800c95c:	3058      	adds	r0, #88	@ 0x58
 800c95e:	f000 f9a5 	bl	800ccac <__retarget_lock_init_recursive>
 800c962:	bd10      	pop	{r4, pc}
 800c964:	0800cabd 	.word	0x0800cabd
 800c968:	0800cae5 	.word	0x0800cae5
 800c96c:	0800cb1d 	.word	0x0800cb1d
 800c970:	0800cb49 	.word	0x0800cb49
 800c974:	200005b0 	.word	0x200005b0
 800c978:	20000618 	.word	0x20000618
 800c97c:	20000680 	.word	0x20000680

0800c980 <stdio_exit_handler>:
 800c980:	b510      	push	{r4, lr}
 800c982:	4a03      	ldr	r2, [pc, #12]	@ (800c990 <stdio_exit_handler+0x10>)
 800c984:	4903      	ldr	r1, [pc, #12]	@ (800c994 <stdio_exit_handler+0x14>)
 800c986:	4804      	ldr	r0, [pc, #16]	@ (800c998 <stdio_exit_handler+0x18>)
 800c988:	f000 f87c 	bl	800ca84 <_fwalk_sglue>
 800c98c:	bd10      	pop	{r4, pc}
 800c98e:	46c0      	nop			@ (mov r8, r8)
 800c990:	20000178 	.word	0x20000178
 800c994:	0800e53d 	.word	0x0800e53d
 800c998:	20000188 	.word	0x20000188

0800c99c <cleanup_stdio>:
 800c99c:	6841      	ldr	r1, [r0, #4]
 800c99e:	4b0b      	ldr	r3, [pc, #44]	@ (800c9cc <cleanup_stdio+0x30>)
 800c9a0:	b510      	push	{r4, lr}
 800c9a2:	0004      	movs	r4, r0
 800c9a4:	4299      	cmp	r1, r3
 800c9a6:	d001      	beq.n	800c9ac <cleanup_stdio+0x10>
 800c9a8:	f001 fdc8 	bl	800e53c <_fflush_r>
 800c9ac:	68a1      	ldr	r1, [r4, #8]
 800c9ae:	4b08      	ldr	r3, [pc, #32]	@ (800c9d0 <cleanup_stdio+0x34>)
 800c9b0:	4299      	cmp	r1, r3
 800c9b2:	d002      	beq.n	800c9ba <cleanup_stdio+0x1e>
 800c9b4:	0020      	movs	r0, r4
 800c9b6:	f001 fdc1 	bl	800e53c <_fflush_r>
 800c9ba:	68e1      	ldr	r1, [r4, #12]
 800c9bc:	4b05      	ldr	r3, [pc, #20]	@ (800c9d4 <cleanup_stdio+0x38>)
 800c9be:	4299      	cmp	r1, r3
 800c9c0:	d002      	beq.n	800c9c8 <cleanup_stdio+0x2c>
 800c9c2:	0020      	movs	r0, r4
 800c9c4:	f001 fdba 	bl	800e53c <_fflush_r>
 800c9c8:	bd10      	pop	{r4, pc}
 800c9ca:	46c0      	nop			@ (mov r8, r8)
 800c9cc:	200005b0 	.word	0x200005b0
 800c9d0:	20000618 	.word	0x20000618
 800c9d4:	20000680 	.word	0x20000680

0800c9d8 <global_stdio_init.part.0>:
 800c9d8:	b510      	push	{r4, lr}
 800c9da:	4b09      	ldr	r3, [pc, #36]	@ (800ca00 <global_stdio_init.part.0+0x28>)
 800c9dc:	4a09      	ldr	r2, [pc, #36]	@ (800ca04 <global_stdio_init.part.0+0x2c>)
 800c9de:	2104      	movs	r1, #4
 800c9e0:	601a      	str	r2, [r3, #0]
 800c9e2:	4809      	ldr	r0, [pc, #36]	@ (800ca08 <global_stdio_init.part.0+0x30>)
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	f7ff ff95 	bl	800c914 <std>
 800c9ea:	2201      	movs	r2, #1
 800c9ec:	2109      	movs	r1, #9
 800c9ee:	4807      	ldr	r0, [pc, #28]	@ (800ca0c <global_stdio_init.part.0+0x34>)
 800c9f0:	f7ff ff90 	bl	800c914 <std>
 800c9f4:	2202      	movs	r2, #2
 800c9f6:	2112      	movs	r1, #18
 800c9f8:	4805      	ldr	r0, [pc, #20]	@ (800ca10 <global_stdio_init.part.0+0x38>)
 800c9fa:	f7ff ff8b 	bl	800c914 <std>
 800c9fe:	bd10      	pop	{r4, pc}
 800ca00:	200006e8 	.word	0x200006e8
 800ca04:	0800c981 	.word	0x0800c981
 800ca08:	200005b0 	.word	0x200005b0
 800ca0c:	20000618 	.word	0x20000618
 800ca10:	20000680 	.word	0x20000680

0800ca14 <__sfp_lock_acquire>:
 800ca14:	b510      	push	{r4, lr}
 800ca16:	4802      	ldr	r0, [pc, #8]	@ (800ca20 <__sfp_lock_acquire+0xc>)
 800ca18:	f000 f949 	bl	800ccae <__retarget_lock_acquire_recursive>
 800ca1c:	bd10      	pop	{r4, pc}
 800ca1e:	46c0      	nop			@ (mov r8, r8)
 800ca20:	200006f1 	.word	0x200006f1

0800ca24 <__sfp_lock_release>:
 800ca24:	b510      	push	{r4, lr}
 800ca26:	4802      	ldr	r0, [pc, #8]	@ (800ca30 <__sfp_lock_release+0xc>)
 800ca28:	f000 f942 	bl	800ccb0 <__retarget_lock_release_recursive>
 800ca2c:	bd10      	pop	{r4, pc}
 800ca2e:	46c0      	nop			@ (mov r8, r8)
 800ca30:	200006f1 	.word	0x200006f1

0800ca34 <__sinit>:
 800ca34:	b510      	push	{r4, lr}
 800ca36:	0004      	movs	r4, r0
 800ca38:	f7ff ffec 	bl	800ca14 <__sfp_lock_acquire>
 800ca3c:	6a23      	ldr	r3, [r4, #32]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d002      	beq.n	800ca48 <__sinit+0x14>
 800ca42:	f7ff ffef 	bl	800ca24 <__sfp_lock_release>
 800ca46:	bd10      	pop	{r4, pc}
 800ca48:	4b04      	ldr	r3, [pc, #16]	@ (800ca5c <__sinit+0x28>)
 800ca4a:	6223      	str	r3, [r4, #32]
 800ca4c:	4b04      	ldr	r3, [pc, #16]	@ (800ca60 <__sinit+0x2c>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d1f6      	bne.n	800ca42 <__sinit+0xe>
 800ca54:	f7ff ffc0 	bl	800c9d8 <global_stdio_init.part.0>
 800ca58:	e7f3      	b.n	800ca42 <__sinit+0xe>
 800ca5a:	46c0      	nop			@ (mov r8, r8)
 800ca5c:	0800c99d 	.word	0x0800c99d
 800ca60:	200006e8 	.word	0x200006e8

0800ca64 <fiprintf>:
 800ca64:	b40e      	push	{r1, r2, r3}
 800ca66:	b517      	push	{r0, r1, r2, r4, lr}
 800ca68:	4c05      	ldr	r4, [pc, #20]	@ (800ca80 <fiprintf+0x1c>)
 800ca6a:	ab05      	add	r3, sp, #20
 800ca6c:	cb04      	ldmia	r3!, {r2}
 800ca6e:	0001      	movs	r1, r0
 800ca70:	6820      	ldr	r0, [r4, #0]
 800ca72:	9301      	str	r3, [sp, #4]
 800ca74:	f001 fbc0 	bl	800e1f8 <_vfiprintf_r>
 800ca78:	bc1e      	pop	{r1, r2, r3, r4}
 800ca7a:	bc08      	pop	{r3}
 800ca7c:	b003      	add	sp, #12
 800ca7e:	4718      	bx	r3
 800ca80:	20000184 	.word	0x20000184

0800ca84 <_fwalk_sglue>:
 800ca84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca86:	0014      	movs	r4, r2
 800ca88:	2600      	movs	r6, #0
 800ca8a:	9000      	str	r0, [sp, #0]
 800ca8c:	9101      	str	r1, [sp, #4]
 800ca8e:	68a5      	ldr	r5, [r4, #8]
 800ca90:	6867      	ldr	r7, [r4, #4]
 800ca92:	3f01      	subs	r7, #1
 800ca94:	d504      	bpl.n	800caa0 <_fwalk_sglue+0x1c>
 800ca96:	6824      	ldr	r4, [r4, #0]
 800ca98:	2c00      	cmp	r4, #0
 800ca9a:	d1f8      	bne.n	800ca8e <_fwalk_sglue+0xa>
 800ca9c:	0030      	movs	r0, r6
 800ca9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800caa0:	89ab      	ldrh	r3, [r5, #12]
 800caa2:	2b01      	cmp	r3, #1
 800caa4:	d908      	bls.n	800cab8 <_fwalk_sglue+0x34>
 800caa6:	220e      	movs	r2, #14
 800caa8:	5eab      	ldrsh	r3, [r5, r2]
 800caaa:	3301      	adds	r3, #1
 800caac:	d004      	beq.n	800cab8 <_fwalk_sglue+0x34>
 800caae:	0029      	movs	r1, r5
 800cab0:	9800      	ldr	r0, [sp, #0]
 800cab2:	9b01      	ldr	r3, [sp, #4]
 800cab4:	4798      	blx	r3
 800cab6:	4306      	orrs	r6, r0
 800cab8:	3568      	adds	r5, #104	@ 0x68
 800caba:	e7ea      	b.n	800ca92 <_fwalk_sglue+0xe>

0800cabc <__sread>:
 800cabc:	b570      	push	{r4, r5, r6, lr}
 800cabe:	000c      	movs	r4, r1
 800cac0:	250e      	movs	r5, #14
 800cac2:	5f49      	ldrsh	r1, [r1, r5]
 800cac4:	f000 f88e 	bl	800cbe4 <_read_r>
 800cac8:	2800      	cmp	r0, #0
 800caca:	db03      	blt.n	800cad4 <__sread+0x18>
 800cacc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800cace:	181b      	adds	r3, r3, r0
 800cad0:	6563      	str	r3, [r4, #84]	@ 0x54
 800cad2:	bd70      	pop	{r4, r5, r6, pc}
 800cad4:	89a3      	ldrh	r3, [r4, #12]
 800cad6:	4a02      	ldr	r2, [pc, #8]	@ (800cae0 <__sread+0x24>)
 800cad8:	4013      	ands	r3, r2
 800cada:	81a3      	strh	r3, [r4, #12]
 800cadc:	e7f9      	b.n	800cad2 <__sread+0x16>
 800cade:	46c0      	nop			@ (mov r8, r8)
 800cae0:	ffffefff 	.word	0xffffefff

0800cae4 <__swrite>:
 800cae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cae6:	001f      	movs	r7, r3
 800cae8:	898b      	ldrh	r3, [r1, #12]
 800caea:	0005      	movs	r5, r0
 800caec:	000c      	movs	r4, r1
 800caee:	0016      	movs	r6, r2
 800caf0:	05db      	lsls	r3, r3, #23
 800caf2:	d505      	bpl.n	800cb00 <__swrite+0x1c>
 800caf4:	230e      	movs	r3, #14
 800caf6:	5ec9      	ldrsh	r1, [r1, r3]
 800caf8:	2200      	movs	r2, #0
 800cafa:	2302      	movs	r3, #2
 800cafc:	f000 f85e 	bl	800cbbc <_lseek_r>
 800cb00:	89a3      	ldrh	r3, [r4, #12]
 800cb02:	4a05      	ldr	r2, [pc, #20]	@ (800cb18 <__swrite+0x34>)
 800cb04:	0028      	movs	r0, r5
 800cb06:	4013      	ands	r3, r2
 800cb08:	81a3      	strh	r3, [r4, #12]
 800cb0a:	0032      	movs	r2, r6
 800cb0c:	230e      	movs	r3, #14
 800cb0e:	5ee1      	ldrsh	r1, [r4, r3]
 800cb10:	003b      	movs	r3, r7
 800cb12:	f000 f88d 	bl	800cc30 <_write_r>
 800cb16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb18:	ffffefff 	.word	0xffffefff

0800cb1c <__sseek>:
 800cb1c:	b570      	push	{r4, r5, r6, lr}
 800cb1e:	000c      	movs	r4, r1
 800cb20:	250e      	movs	r5, #14
 800cb22:	5f49      	ldrsh	r1, [r1, r5]
 800cb24:	f000 f84a 	bl	800cbbc <_lseek_r>
 800cb28:	89a3      	ldrh	r3, [r4, #12]
 800cb2a:	1c42      	adds	r2, r0, #1
 800cb2c:	d103      	bne.n	800cb36 <__sseek+0x1a>
 800cb2e:	4a05      	ldr	r2, [pc, #20]	@ (800cb44 <__sseek+0x28>)
 800cb30:	4013      	ands	r3, r2
 800cb32:	81a3      	strh	r3, [r4, #12]
 800cb34:	bd70      	pop	{r4, r5, r6, pc}
 800cb36:	2280      	movs	r2, #128	@ 0x80
 800cb38:	0152      	lsls	r2, r2, #5
 800cb3a:	4313      	orrs	r3, r2
 800cb3c:	81a3      	strh	r3, [r4, #12]
 800cb3e:	6560      	str	r0, [r4, #84]	@ 0x54
 800cb40:	e7f8      	b.n	800cb34 <__sseek+0x18>
 800cb42:	46c0      	nop			@ (mov r8, r8)
 800cb44:	ffffefff 	.word	0xffffefff

0800cb48 <__sclose>:
 800cb48:	b510      	push	{r4, lr}
 800cb4a:	230e      	movs	r3, #14
 800cb4c:	5ec9      	ldrsh	r1, [r1, r3]
 800cb4e:	f000 f823 	bl	800cb98 <_close_r>
 800cb52:	bd10      	pop	{r4, pc}

0800cb54 <memset>:
 800cb54:	0003      	movs	r3, r0
 800cb56:	1882      	adds	r2, r0, r2
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d100      	bne.n	800cb5e <memset+0xa>
 800cb5c:	4770      	bx	lr
 800cb5e:	7019      	strb	r1, [r3, #0]
 800cb60:	3301      	adds	r3, #1
 800cb62:	e7f9      	b.n	800cb58 <memset+0x4>

0800cb64 <strncat>:
 800cb64:	0003      	movs	r3, r0
 800cb66:	b510      	push	{r4, lr}
 800cb68:	781c      	ldrb	r4, [r3, #0]
 800cb6a:	2c00      	cmp	r4, #0
 800cb6c:	d107      	bne.n	800cb7e <strncat+0x1a>
 800cb6e:	3a01      	subs	r2, #1
 800cb70:	1c54      	adds	r4, r2, #1
 800cb72:	d003      	beq.n	800cb7c <strncat+0x18>
 800cb74:	780c      	ldrb	r4, [r1, #0]
 800cb76:	701c      	strb	r4, [r3, #0]
 800cb78:	2c00      	cmp	r4, #0
 800cb7a:	d102      	bne.n	800cb82 <strncat+0x1e>
 800cb7c:	bd10      	pop	{r4, pc}
 800cb7e:	3301      	adds	r3, #1
 800cb80:	e7f2      	b.n	800cb68 <strncat+0x4>
 800cb82:	2a00      	cmp	r2, #0
 800cb84:	d100      	bne.n	800cb88 <strncat+0x24>
 800cb86:	705a      	strb	r2, [r3, #1]
 800cb88:	3301      	adds	r3, #1
 800cb8a:	3101      	adds	r1, #1
 800cb8c:	e7ef      	b.n	800cb6e <strncat+0xa>
	...

0800cb90 <_localeconv_r>:
 800cb90:	4800      	ldr	r0, [pc, #0]	@ (800cb94 <_localeconv_r+0x4>)
 800cb92:	4770      	bx	lr
 800cb94:	200002c4 	.word	0x200002c4

0800cb98 <_close_r>:
 800cb98:	2300      	movs	r3, #0
 800cb9a:	b570      	push	{r4, r5, r6, lr}
 800cb9c:	4d06      	ldr	r5, [pc, #24]	@ (800cbb8 <_close_r+0x20>)
 800cb9e:	0004      	movs	r4, r0
 800cba0:	0008      	movs	r0, r1
 800cba2:	602b      	str	r3, [r5, #0]
 800cba4:	f7fa fa82 	bl	80070ac <_close>
 800cba8:	1c43      	adds	r3, r0, #1
 800cbaa:	d103      	bne.n	800cbb4 <_close_r+0x1c>
 800cbac:	682b      	ldr	r3, [r5, #0]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d000      	beq.n	800cbb4 <_close_r+0x1c>
 800cbb2:	6023      	str	r3, [r4, #0]
 800cbb4:	bd70      	pop	{r4, r5, r6, pc}
 800cbb6:	46c0      	nop			@ (mov r8, r8)
 800cbb8:	200006ec 	.word	0x200006ec

0800cbbc <_lseek_r>:
 800cbbc:	b570      	push	{r4, r5, r6, lr}
 800cbbe:	0004      	movs	r4, r0
 800cbc0:	0008      	movs	r0, r1
 800cbc2:	0011      	movs	r1, r2
 800cbc4:	001a      	movs	r2, r3
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	4d05      	ldr	r5, [pc, #20]	@ (800cbe0 <_lseek_r+0x24>)
 800cbca:	602b      	str	r3, [r5, #0]
 800cbcc:	f7fa fa7a 	bl	80070c4 <_lseek>
 800cbd0:	1c43      	adds	r3, r0, #1
 800cbd2:	d103      	bne.n	800cbdc <_lseek_r+0x20>
 800cbd4:	682b      	ldr	r3, [r5, #0]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d000      	beq.n	800cbdc <_lseek_r+0x20>
 800cbda:	6023      	str	r3, [r4, #0]
 800cbdc:	bd70      	pop	{r4, r5, r6, pc}
 800cbde:	46c0      	nop			@ (mov r8, r8)
 800cbe0:	200006ec 	.word	0x200006ec

0800cbe4 <_read_r>:
 800cbe4:	b570      	push	{r4, r5, r6, lr}
 800cbe6:	0004      	movs	r4, r0
 800cbe8:	0008      	movs	r0, r1
 800cbea:	0011      	movs	r1, r2
 800cbec:	001a      	movs	r2, r3
 800cbee:	2300      	movs	r3, #0
 800cbf0:	4d05      	ldr	r5, [pc, #20]	@ (800cc08 <_read_r+0x24>)
 800cbf2:	602b      	str	r3, [r5, #0]
 800cbf4:	f7fa fa3e 	bl	8007074 <_read>
 800cbf8:	1c43      	adds	r3, r0, #1
 800cbfa:	d103      	bne.n	800cc04 <_read_r+0x20>
 800cbfc:	682b      	ldr	r3, [r5, #0]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d000      	beq.n	800cc04 <_read_r+0x20>
 800cc02:	6023      	str	r3, [r4, #0]
 800cc04:	bd70      	pop	{r4, r5, r6, pc}
 800cc06:	46c0      	nop			@ (mov r8, r8)
 800cc08:	200006ec 	.word	0x200006ec

0800cc0c <_sbrk_r>:
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	b570      	push	{r4, r5, r6, lr}
 800cc10:	4d06      	ldr	r5, [pc, #24]	@ (800cc2c <_sbrk_r+0x20>)
 800cc12:	0004      	movs	r4, r0
 800cc14:	0008      	movs	r0, r1
 800cc16:	602b      	str	r3, [r5, #0]
 800cc18:	f7fa fa56 	bl	80070c8 <_sbrk>
 800cc1c:	1c43      	adds	r3, r0, #1
 800cc1e:	d103      	bne.n	800cc28 <_sbrk_r+0x1c>
 800cc20:	682b      	ldr	r3, [r5, #0]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d000      	beq.n	800cc28 <_sbrk_r+0x1c>
 800cc26:	6023      	str	r3, [r4, #0]
 800cc28:	bd70      	pop	{r4, r5, r6, pc}
 800cc2a:	46c0      	nop			@ (mov r8, r8)
 800cc2c:	200006ec 	.word	0x200006ec

0800cc30 <_write_r>:
 800cc30:	b570      	push	{r4, r5, r6, lr}
 800cc32:	0004      	movs	r4, r0
 800cc34:	0008      	movs	r0, r1
 800cc36:	0011      	movs	r1, r2
 800cc38:	001a      	movs	r2, r3
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	4d05      	ldr	r5, [pc, #20]	@ (800cc54 <_write_r+0x24>)
 800cc3e:	602b      	str	r3, [r5, #0]
 800cc40:	f7fa fa26 	bl	8007090 <_write>
 800cc44:	1c43      	adds	r3, r0, #1
 800cc46:	d103      	bne.n	800cc50 <_write_r+0x20>
 800cc48:	682b      	ldr	r3, [r5, #0]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d000      	beq.n	800cc50 <_write_r+0x20>
 800cc4e:	6023      	str	r3, [r4, #0]
 800cc50:	bd70      	pop	{r4, r5, r6, pc}
 800cc52:	46c0      	nop			@ (mov r8, r8)
 800cc54:	200006ec 	.word	0x200006ec

0800cc58 <__errno>:
 800cc58:	4b01      	ldr	r3, [pc, #4]	@ (800cc60 <__errno+0x8>)
 800cc5a:	6818      	ldr	r0, [r3, #0]
 800cc5c:	4770      	bx	lr
 800cc5e:	46c0      	nop			@ (mov r8, r8)
 800cc60:	20000184 	.word	0x20000184

0800cc64 <__libc_init_array>:
 800cc64:	b570      	push	{r4, r5, r6, lr}
 800cc66:	2600      	movs	r6, #0
 800cc68:	4c0c      	ldr	r4, [pc, #48]	@ (800cc9c <__libc_init_array+0x38>)
 800cc6a:	4d0d      	ldr	r5, [pc, #52]	@ (800cca0 <__libc_init_array+0x3c>)
 800cc6c:	1b64      	subs	r4, r4, r5
 800cc6e:	10a4      	asrs	r4, r4, #2
 800cc70:	42a6      	cmp	r6, r4
 800cc72:	d109      	bne.n	800cc88 <__libc_init_array+0x24>
 800cc74:	2600      	movs	r6, #0
 800cc76:	f001 fe81 	bl	800e97c <_init>
 800cc7a:	4c0a      	ldr	r4, [pc, #40]	@ (800cca4 <__libc_init_array+0x40>)
 800cc7c:	4d0a      	ldr	r5, [pc, #40]	@ (800cca8 <__libc_init_array+0x44>)
 800cc7e:	1b64      	subs	r4, r4, r5
 800cc80:	10a4      	asrs	r4, r4, #2
 800cc82:	42a6      	cmp	r6, r4
 800cc84:	d105      	bne.n	800cc92 <__libc_init_array+0x2e>
 800cc86:	bd70      	pop	{r4, r5, r6, pc}
 800cc88:	00b3      	lsls	r3, r6, #2
 800cc8a:	58eb      	ldr	r3, [r5, r3]
 800cc8c:	4798      	blx	r3
 800cc8e:	3601      	adds	r6, #1
 800cc90:	e7ee      	b.n	800cc70 <__libc_init_array+0xc>
 800cc92:	00b3      	lsls	r3, r6, #2
 800cc94:	58eb      	ldr	r3, [r5, r3]
 800cc96:	4798      	blx	r3
 800cc98:	3601      	adds	r6, #1
 800cc9a:	e7f2      	b.n	800cc82 <__libc_init_array+0x1e>
 800cc9c:	0801a650 	.word	0x0801a650
 800cca0:	0801a650 	.word	0x0801a650
 800cca4:	0801a654 	.word	0x0801a654
 800cca8:	0801a650 	.word	0x0801a650

0800ccac <__retarget_lock_init_recursive>:
 800ccac:	4770      	bx	lr

0800ccae <__retarget_lock_acquire_recursive>:
 800ccae:	4770      	bx	lr

0800ccb0 <__retarget_lock_release_recursive>:
 800ccb0:	4770      	bx	lr

0800ccb2 <memchr>:
 800ccb2:	b2c9      	uxtb	r1, r1
 800ccb4:	1882      	adds	r2, r0, r2
 800ccb6:	4290      	cmp	r0, r2
 800ccb8:	d101      	bne.n	800ccbe <memchr+0xc>
 800ccba:	2000      	movs	r0, #0
 800ccbc:	4770      	bx	lr
 800ccbe:	7803      	ldrb	r3, [r0, #0]
 800ccc0:	428b      	cmp	r3, r1
 800ccc2:	d0fb      	beq.n	800ccbc <memchr+0xa>
 800ccc4:	3001      	adds	r0, #1
 800ccc6:	e7f6      	b.n	800ccb6 <memchr+0x4>

0800ccc8 <quorem>:
 800ccc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccca:	6902      	ldr	r2, [r0, #16]
 800cccc:	690f      	ldr	r7, [r1, #16]
 800ccce:	b087      	sub	sp, #28
 800ccd0:	0006      	movs	r6, r0
 800ccd2:	000b      	movs	r3, r1
 800ccd4:	2000      	movs	r0, #0
 800ccd6:	9102      	str	r1, [sp, #8]
 800ccd8:	42ba      	cmp	r2, r7
 800ccda:	db6d      	blt.n	800cdb8 <quorem+0xf0>
 800ccdc:	3f01      	subs	r7, #1
 800ccde:	00bc      	lsls	r4, r7, #2
 800cce0:	3314      	adds	r3, #20
 800cce2:	9305      	str	r3, [sp, #20]
 800cce4:	191b      	adds	r3, r3, r4
 800cce6:	9303      	str	r3, [sp, #12]
 800cce8:	0033      	movs	r3, r6
 800ccea:	3314      	adds	r3, #20
 800ccec:	191c      	adds	r4, r3, r4
 800ccee:	9301      	str	r3, [sp, #4]
 800ccf0:	6823      	ldr	r3, [r4, #0]
 800ccf2:	9304      	str	r3, [sp, #16]
 800ccf4:	9b03      	ldr	r3, [sp, #12]
 800ccf6:	9804      	ldr	r0, [sp, #16]
 800ccf8:	681d      	ldr	r5, [r3, #0]
 800ccfa:	3501      	adds	r5, #1
 800ccfc:	0029      	movs	r1, r5
 800ccfe:	f7f3 fa1f 	bl	8000140 <__udivsi3>
 800cd02:	9b04      	ldr	r3, [sp, #16]
 800cd04:	9000      	str	r0, [sp, #0]
 800cd06:	42ab      	cmp	r3, r5
 800cd08:	d32b      	bcc.n	800cd62 <quorem+0x9a>
 800cd0a:	9b05      	ldr	r3, [sp, #20]
 800cd0c:	9d01      	ldr	r5, [sp, #4]
 800cd0e:	469c      	mov	ip, r3
 800cd10:	2300      	movs	r3, #0
 800cd12:	9305      	str	r3, [sp, #20]
 800cd14:	9304      	str	r3, [sp, #16]
 800cd16:	4662      	mov	r2, ip
 800cd18:	ca08      	ldmia	r2!, {r3}
 800cd1a:	6828      	ldr	r0, [r5, #0]
 800cd1c:	4694      	mov	ip, r2
 800cd1e:	9a00      	ldr	r2, [sp, #0]
 800cd20:	b299      	uxth	r1, r3
 800cd22:	4351      	muls	r1, r2
 800cd24:	9a05      	ldr	r2, [sp, #20]
 800cd26:	0c1b      	lsrs	r3, r3, #16
 800cd28:	1889      	adds	r1, r1, r2
 800cd2a:	9a00      	ldr	r2, [sp, #0]
 800cd2c:	4353      	muls	r3, r2
 800cd2e:	0c0a      	lsrs	r2, r1, #16
 800cd30:	189b      	adds	r3, r3, r2
 800cd32:	0c1a      	lsrs	r2, r3, #16
 800cd34:	b289      	uxth	r1, r1
 800cd36:	9205      	str	r2, [sp, #20]
 800cd38:	b282      	uxth	r2, r0
 800cd3a:	1a52      	subs	r2, r2, r1
 800cd3c:	9904      	ldr	r1, [sp, #16]
 800cd3e:	0c00      	lsrs	r0, r0, #16
 800cd40:	1852      	adds	r2, r2, r1
 800cd42:	b29b      	uxth	r3, r3
 800cd44:	1411      	asrs	r1, r2, #16
 800cd46:	1ac3      	subs	r3, r0, r3
 800cd48:	185b      	adds	r3, r3, r1
 800cd4a:	1419      	asrs	r1, r3, #16
 800cd4c:	b292      	uxth	r2, r2
 800cd4e:	041b      	lsls	r3, r3, #16
 800cd50:	431a      	orrs	r2, r3
 800cd52:	9b03      	ldr	r3, [sp, #12]
 800cd54:	9104      	str	r1, [sp, #16]
 800cd56:	c504      	stmia	r5!, {r2}
 800cd58:	4563      	cmp	r3, ip
 800cd5a:	d2dc      	bcs.n	800cd16 <quorem+0x4e>
 800cd5c:	6823      	ldr	r3, [r4, #0]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d030      	beq.n	800cdc4 <quorem+0xfc>
 800cd62:	0030      	movs	r0, r6
 800cd64:	9902      	ldr	r1, [sp, #8]
 800cd66:	f001 f909 	bl	800df7c <__mcmp>
 800cd6a:	2800      	cmp	r0, #0
 800cd6c:	db23      	blt.n	800cdb6 <quorem+0xee>
 800cd6e:	0034      	movs	r4, r6
 800cd70:	2500      	movs	r5, #0
 800cd72:	9902      	ldr	r1, [sp, #8]
 800cd74:	3414      	adds	r4, #20
 800cd76:	3114      	adds	r1, #20
 800cd78:	6823      	ldr	r3, [r4, #0]
 800cd7a:	c901      	ldmia	r1!, {r0}
 800cd7c:	9302      	str	r3, [sp, #8]
 800cd7e:	466b      	mov	r3, sp
 800cd80:	891b      	ldrh	r3, [r3, #8]
 800cd82:	b282      	uxth	r2, r0
 800cd84:	1a9a      	subs	r2, r3, r2
 800cd86:	9b02      	ldr	r3, [sp, #8]
 800cd88:	1952      	adds	r2, r2, r5
 800cd8a:	0c00      	lsrs	r0, r0, #16
 800cd8c:	0c1b      	lsrs	r3, r3, #16
 800cd8e:	1a1b      	subs	r3, r3, r0
 800cd90:	1410      	asrs	r0, r2, #16
 800cd92:	181b      	adds	r3, r3, r0
 800cd94:	141d      	asrs	r5, r3, #16
 800cd96:	b292      	uxth	r2, r2
 800cd98:	041b      	lsls	r3, r3, #16
 800cd9a:	431a      	orrs	r2, r3
 800cd9c:	9b03      	ldr	r3, [sp, #12]
 800cd9e:	c404      	stmia	r4!, {r2}
 800cda0:	428b      	cmp	r3, r1
 800cda2:	d2e9      	bcs.n	800cd78 <quorem+0xb0>
 800cda4:	9a01      	ldr	r2, [sp, #4]
 800cda6:	00bb      	lsls	r3, r7, #2
 800cda8:	18d3      	adds	r3, r2, r3
 800cdaa:	681a      	ldr	r2, [r3, #0]
 800cdac:	2a00      	cmp	r2, #0
 800cdae:	d013      	beq.n	800cdd8 <quorem+0x110>
 800cdb0:	9b00      	ldr	r3, [sp, #0]
 800cdb2:	3301      	adds	r3, #1
 800cdb4:	9300      	str	r3, [sp, #0]
 800cdb6:	9800      	ldr	r0, [sp, #0]
 800cdb8:	b007      	add	sp, #28
 800cdba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdbc:	6823      	ldr	r3, [r4, #0]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d104      	bne.n	800cdcc <quorem+0x104>
 800cdc2:	3f01      	subs	r7, #1
 800cdc4:	9b01      	ldr	r3, [sp, #4]
 800cdc6:	3c04      	subs	r4, #4
 800cdc8:	42a3      	cmp	r3, r4
 800cdca:	d3f7      	bcc.n	800cdbc <quorem+0xf4>
 800cdcc:	6137      	str	r7, [r6, #16]
 800cdce:	e7c8      	b.n	800cd62 <quorem+0x9a>
 800cdd0:	681a      	ldr	r2, [r3, #0]
 800cdd2:	2a00      	cmp	r2, #0
 800cdd4:	d104      	bne.n	800cde0 <quorem+0x118>
 800cdd6:	3f01      	subs	r7, #1
 800cdd8:	9a01      	ldr	r2, [sp, #4]
 800cdda:	3b04      	subs	r3, #4
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d3f7      	bcc.n	800cdd0 <quorem+0x108>
 800cde0:	6137      	str	r7, [r6, #16]
 800cde2:	e7e5      	b.n	800cdb0 <quorem+0xe8>

0800cde4 <_dtoa_r>:
 800cde4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cde6:	0014      	movs	r4, r2
 800cde8:	001d      	movs	r5, r3
 800cdea:	69c6      	ldr	r6, [r0, #28]
 800cdec:	b09d      	sub	sp, #116	@ 0x74
 800cdee:	940a      	str	r4, [sp, #40]	@ 0x28
 800cdf0:	950b      	str	r5, [sp, #44]	@ 0x2c
 800cdf2:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800cdf4:	9003      	str	r0, [sp, #12]
 800cdf6:	2e00      	cmp	r6, #0
 800cdf8:	d10f      	bne.n	800ce1a <_dtoa_r+0x36>
 800cdfa:	2010      	movs	r0, #16
 800cdfc:	f7ff f86c 	bl	800bed8 <malloc>
 800ce00:	9b03      	ldr	r3, [sp, #12]
 800ce02:	1e02      	subs	r2, r0, #0
 800ce04:	61d8      	str	r0, [r3, #28]
 800ce06:	d104      	bne.n	800ce12 <_dtoa_r+0x2e>
 800ce08:	21ef      	movs	r1, #239	@ 0xef
 800ce0a:	4bc7      	ldr	r3, [pc, #796]	@ (800d128 <_dtoa_r+0x344>)
 800ce0c:	48c7      	ldr	r0, [pc, #796]	@ (800d12c <_dtoa_r+0x348>)
 800ce0e:	f001 fc6b 	bl	800e6e8 <__assert_func>
 800ce12:	6046      	str	r6, [r0, #4]
 800ce14:	6086      	str	r6, [r0, #8]
 800ce16:	6006      	str	r6, [r0, #0]
 800ce18:	60c6      	str	r6, [r0, #12]
 800ce1a:	9b03      	ldr	r3, [sp, #12]
 800ce1c:	69db      	ldr	r3, [r3, #28]
 800ce1e:	6819      	ldr	r1, [r3, #0]
 800ce20:	2900      	cmp	r1, #0
 800ce22:	d00b      	beq.n	800ce3c <_dtoa_r+0x58>
 800ce24:	685a      	ldr	r2, [r3, #4]
 800ce26:	2301      	movs	r3, #1
 800ce28:	4093      	lsls	r3, r2
 800ce2a:	604a      	str	r2, [r1, #4]
 800ce2c:	608b      	str	r3, [r1, #8]
 800ce2e:	9803      	ldr	r0, [sp, #12]
 800ce30:	f000 fe5a 	bl	800dae8 <_Bfree>
 800ce34:	2200      	movs	r2, #0
 800ce36:	9b03      	ldr	r3, [sp, #12]
 800ce38:	69db      	ldr	r3, [r3, #28]
 800ce3a:	601a      	str	r2, [r3, #0]
 800ce3c:	2d00      	cmp	r5, #0
 800ce3e:	da1e      	bge.n	800ce7e <_dtoa_r+0x9a>
 800ce40:	2301      	movs	r3, #1
 800ce42:	603b      	str	r3, [r7, #0]
 800ce44:	006b      	lsls	r3, r5, #1
 800ce46:	085b      	lsrs	r3, r3, #1
 800ce48:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ce4a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800ce4c:	4bb8      	ldr	r3, [pc, #736]	@ (800d130 <_dtoa_r+0x34c>)
 800ce4e:	4ab8      	ldr	r2, [pc, #736]	@ (800d130 <_dtoa_r+0x34c>)
 800ce50:	403b      	ands	r3, r7
 800ce52:	4293      	cmp	r3, r2
 800ce54:	d116      	bne.n	800ce84 <_dtoa_r+0xa0>
 800ce56:	4bb7      	ldr	r3, [pc, #732]	@ (800d134 <_dtoa_r+0x350>)
 800ce58:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ce5a:	6013      	str	r3, [r2, #0]
 800ce5c:	033b      	lsls	r3, r7, #12
 800ce5e:	0b1b      	lsrs	r3, r3, #12
 800ce60:	4323      	orrs	r3, r4
 800ce62:	d101      	bne.n	800ce68 <_dtoa_r+0x84>
 800ce64:	f000 fd83 	bl	800d96e <_dtoa_r+0xb8a>
 800ce68:	4bb3      	ldr	r3, [pc, #716]	@ (800d138 <_dtoa_r+0x354>)
 800ce6a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800ce6c:	9308      	str	r3, [sp, #32]
 800ce6e:	2a00      	cmp	r2, #0
 800ce70:	d002      	beq.n	800ce78 <_dtoa_r+0x94>
 800ce72:	4bb2      	ldr	r3, [pc, #712]	@ (800d13c <_dtoa_r+0x358>)
 800ce74:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800ce76:	6013      	str	r3, [r2, #0]
 800ce78:	9808      	ldr	r0, [sp, #32]
 800ce7a:	b01d      	add	sp, #116	@ 0x74
 800ce7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce7e:	2300      	movs	r3, #0
 800ce80:	603b      	str	r3, [r7, #0]
 800ce82:	e7e2      	b.n	800ce4a <_dtoa_r+0x66>
 800ce84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ce86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce88:	9212      	str	r2, [sp, #72]	@ 0x48
 800ce8a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ce8c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800ce8e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ce90:	2200      	movs	r2, #0
 800ce92:	2300      	movs	r3, #0
 800ce94:	f7f3 fada 	bl	800044c <__aeabi_dcmpeq>
 800ce98:	1e06      	subs	r6, r0, #0
 800ce9a:	d00b      	beq.n	800ceb4 <_dtoa_r+0xd0>
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800cea0:	6013      	str	r3, [r2, #0]
 800cea2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d002      	beq.n	800ceae <_dtoa_r+0xca>
 800cea8:	4ba5      	ldr	r3, [pc, #660]	@ (800d140 <_dtoa_r+0x35c>)
 800ceaa:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800ceac:	6013      	str	r3, [r2, #0]
 800ceae:	4ba5      	ldr	r3, [pc, #660]	@ (800d144 <_dtoa_r+0x360>)
 800ceb0:	9308      	str	r3, [sp, #32]
 800ceb2:	e7e1      	b.n	800ce78 <_dtoa_r+0x94>
 800ceb4:	ab1a      	add	r3, sp, #104	@ 0x68
 800ceb6:	9301      	str	r3, [sp, #4]
 800ceb8:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ceba:	9300      	str	r3, [sp, #0]
 800cebc:	9803      	ldr	r0, [sp, #12]
 800cebe:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cec0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cec2:	f001 f911 	bl	800e0e8 <__d2b>
 800cec6:	007a      	lsls	r2, r7, #1
 800cec8:	9005      	str	r0, [sp, #20]
 800ceca:	0d52      	lsrs	r2, r2, #21
 800cecc:	d100      	bne.n	800ced0 <_dtoa_r+0xec>
 800cece:	e07b      	b.n	800cfc8 <_dtoa_r+0x1e4>
 800ced0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ced2:	9618      	str	r6, [sp, #96]	@ 0x60
 800ced4:	0319      	lsls	r1, r3, #12
 800ced6:	4b9c      	ldr	r3, [pc, #624]	@ (800d148 <_dtoa_r+0x364>)
 800ced8:	0b09      	lsrs	r1, r1, #12
 800ceda:	430b      	orrs	r3, r1
 800cedc:	499b      	ldr	r1, [pc, #620]	@ (800d14c <_dtoa_r+0x368>)
 800cede:	1857      	adds	r7, r2, r1
 800cee0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800cee2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800cee4:	0019      	movs	r1, r3
 800cee6:	2200      	movs	r2, #0
 800cee8:	4b99      	ldr	r3, [pc, #612]	@ (800d150 <_dtoa_r+0x36c>)
 800ceea:	f7f4 fe75 	bl	8001bd8 <__aeabi_dsub>
 800ceee:	4a99      	ldr	r2, [pc, #612]	@ (800d154 <_dtoa_r+0x370>)
 800cef0:	4b99      	ldr	r3, [pc, #612]	@ (800d158 <_dtoa_r+0x374>)
 800cef2:	f7f4 fba9 	bl	8001648 <__aeabi_dmul>
 800cef6:	4a99      	ldr	r2, [pc, #612]	@ (800d15c <_dtoa_r+0x378>)
 800cef8:	4b99      	ldr	r3, [pc, #612]	@ (800d160 <_dtoa_r+0x37c>)
 800cefa:	f7f3 fbfd 	bl	80006f8 <__aeabi_dadd>
 800cefe:	0004      	movs	r4, r0
 800cf00:	0038      	movs	r0, r7
 800cf02:	000d      	movs	r5, r1
 800cf04:	f7f5 fa62 	bl	80023cc <__aeabi_i2d>
 800cf08:	4a96      	ldr	r2, [pc, #600]	@ (800d164 <_dtoa_r+0x380>)
 800cf0a:	4b97      	ldr	r3, [pc, #604]	@ (800d168 <_dtoa_r+0x384>)
 800cf0c:	f7f4 fb9c 	bl	8001648 <__aeabi_dmul>
 800cf10:	0002      	movs	r2, r0
 800cf12:	000b      	movs	r3, r1
 800cf14:	0020      	movs	r0, r4
 800cf16:	0029      	movs	r1, r5
 800cf18:	f7f3 fbee 	bl	80006f8 <__aeabi_dadd>
 800cf1c:	0004      	movs	r4, r0
 800cf1e:	000d      	movs	r5, r1
 800cf20:	f7f5 fa18 	bl	8002354 <__aeabi_d2iz>
 800cf24:	2200      	movs	r2, #0
 800cf26:	9004      	str	r0, [sp, #16]
 800cf28:	2300      	movs	r3, #0
 800cf2a:	0020      	movs	r0, r4
 800cf2c:	0029      	movs	r1, r5
 800cf2e:	f7f3 fa93 	bl	8000458 <__aeabi_dcmplt>
 800cf32:	2800      	cmp	r0, #0
 800cf34:	d00b      	beq.n	800cf4e <_dtoa_r+0x16a>
 800cf36:	9804      	ldr	r0, [sp, #16]
 800cf38:	f7f5 fa48 	bl	80023cc <__aeabi_i2d>
 800cf3c:	002b      	movs	r3, r5
 800cf3e:	0022      	movs	r2, r4
 800cf40:	f7f3 fa84 	bl	800044c <__aeabi_dcmpeq>
 800cf44:	4243      	negs	r3, r0
 800cf46:	4158      	adcs	r0, r3
 800cf48:	9b04      	ldr	r3, [sp, #16]
 800cf4a:	1a1b      	subs	r3, r3, r0
 800cf4c:	9304      	str	r3, [sp, #16]
 800cf4e:	2301      	movs	r3, #1
 800cf50:	9315      	str	r3, [sp, #84]	@ 0x54
 800cf52:	9b04      	ldr	r3, [sp, #16]
 800cf54:	2b16      	cmp	r3, #22
 800cf56:	d810      	bhi.n	800cf7a <_dtoa_r+0x196>
 800cf58:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800cf5a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800cf5c:	9a04      	ldr	r2, [sp, #16]
 800cf5e:	4b83      	ldr	r3, [pc, #524]	@ (800d16c <_dtoa_r+0x388>)
 800cf60:	00d2      	lsls	r2, r2, #3
 800cf62:	189b      	adds	r3, r3, r2
 800cf64:	681a      	ldr	r2, [r3, #0]
 800cf66:	685b      	ldr	r3, [r3, #4]
 800cf68:	f7f3 fa76 	bl	8000458 <__aeabi_dcmplt>
 800cf6c:	2800      	cmp	r0, #0
 800cf6e:	d047      	beq.n	800d000 <_dtoa_r+0x21c>
 800cf70:	9b04      	ldr	r3, [sp, #16]
 800cf72:	3b01      	subs	r3, #1
 800cf74:	9304      	str	r3, [sp, #16]
 800cf76:	2300      	movs	r3, #0
 800cf78:	9315      	str	r3, [sp, #84]	@ 0x54
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800cf7e:	9206      	str	r2, [sp, #24]
 800cf80:	1bdb      	subs	r3, r3, r7
 800cf82:	1e5a      	subs	r2, r3, #1
 800cf84:	d53e      	bpl.n	800d004 <_dtoa_r+0x220>
 800cf86:	2201      	movs	r2, #1
 800cf88:	1ad3      	subs	r3, r2, r3
 800cf8a:	9306      	str	r3, [sp, #24]
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	930d      	str	r3, [sp, #52]	@ 0x34
 800cf90:	9b04      	ldr	r3, [sp, #16]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	db38      	blt.n	800d008 <_dtoa_r+0x224>
 800cf96:	9a04      	ldr	r2, [sp, #16]
 800cf98:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cf9a:	4694      	mov	ip, r2
 800cf9c:	4463      	add	r3, ip
 800cf9e:	930d      	str	r3, [sp, #52]	@ 0x34
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	9214      	str	r2, [sp, #80]	@ 0x50
 800cfa4:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cfa6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800cfa8:	2401      	movs	r4, #1
 800cfaa:	2b09      	cmp	r3, #9
 800cfac:	d867      	bhi.n	800d07e <_dtoa_r+0x29a>
 800cfae:	2b05      	cmp	r3, #5
 800cfb0:	dd02      	ble.n	800cfb8 <_dtoa_r+0x1d4>
 800cfb2:	2400      	movs	r4, #0
 800cfb4:	3b04      	subs	r3, #4
 800cfb6:	9322      	str	r3, [sp, #136]	@ 0x88
 800cfb8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800cfba:	1e98      	subs	r0, r3, #2
 800cfbc:	2803      	cmp	r0, #3
 800cfbe:	d867      	bhi.n	800d090 <_dtoa_r+0x2ac>
 800cfc0:	f7f3 f8aa 	bl	8000118 <__gnu_thumb1_case_uqi>
 800cfc4:	5b383a2b 	.word	0x5b383a2b
 800cfc8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800cfca:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800cfcc:	18f6      	adds	r6, r6, r3
 800cfce:	4b68      	ldr	r3, [pc, #416]	@ (800d170 <_dtoa_r+0x38c>)
 800cfd0:	18f2      	adds	r2, r6, r3
 800cfd2:	2a20      	cmp	r2, #32
 800cfd4:	dd0f      	ble.n	800cff6 <_dtoa_r+0x212>
 800cfd6:	2340      	movs	r3, #64	@ 0x40
 800cfd8:	1a9b      	subs	r3, r3, r2
 800cfda:	409f      	lsls	r7, r3
 800cfdc:	4b65      	ldr	r3, [pc, #404]	@ (800d174 <_dtoa_r+0x390>)
 800cfde:	0038      	movs	r0, r7
 800cfe0:	18f3      	adds	r3, r6, r3
 800cfe2:	40dc      	lsrs	r4, r3
 800cfe4:	4320      	orrs	r0, r4
 800cfe6:	f7f5 fa1f 	bl	8002428 <__aeabi_ui2d>
 800cfea:	2201      	movs	r2, #1
 800cfec:	4b62      	ldr	r3, [pc, #392]	@ (800d178 <_dtoa_r+0x394>)
 800cfee:	1e77      	subs	r7, r6, #1
 800cff0:	18cb      	adds	r3, r1, r3
 800cff2:	9218      	str	r2, [sp, #96]	@ 0x60
 800cff4:	e776      	b.n	800cee4 <_dtoa_r+0x100>
 800cff6:	2320      	movs	r3, #32
 800cff8:	0020      	movs	r0, r4
 800cffa:	1a9b      	subs	r3, r3, r2
 800cffc:	4098      	lsls	r0, r3
 800cffe:	e7f2      	b.n	800cfe6 <_dtoa_r+0x202>
 800d000:	9015      	str	r0, [sp, #84]	@ 0x54
 800d002:	e7ba      	b.n	800cf7a <_dtoa_r+0x196>
 800d004:	920d      	str	r2, [sp, #52]	@ 0x34
 800d006:	e7c3      	b.n	800cf90 <_dtoa_r+0x1ac>
 800d008:	9b06      	ldr	r3, [sp, #24]
 800d00a:	9a04      	ldr	r2, [sp, #16]
 800d00c:	1a9b      	subs	r3, r3, r2
 800d00e:	9306      	str	r3, [sp, #24]
 800d010:	4253      	negs	r3, r2
 800d012:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d014:	2300      	movs	r3, #0
 800d016:	9314      	str	r3, [sp, #80]	@ 0x50
 800d018:	e7c5      	b.n	800cfa6 <_dtoa_r+0x1c2>
 800d01a:	2300      	movs	r3, #0
 800d01c:	9310      	str	r3, [sp, #64]	@ 0x40
 800d01e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d020:	930e      	str	r3, [sp, #56]	@ 0x38
 800d022:	9309      	str	r3, [sp, #36]	@ 0x24
 800d024:	2b00      	cmp	r3, #0
 800d026:	dc13      	bgt.n	800d050 <_dtoa_r+0x26c>
 800d028:	2301      	movs	r3, #1
 800d02a:	001a      	movs	r2, r3
 800d02c:	930e      	str	r3, [sp, #56]	@ 0x38
 800d02e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d030:	9223      	str	r2, [sp, #140]	@ 0x8c
 800d032:	e00d      	b.n	800d050 <_dtoa_r+0x26c>
 800d034:	2301      	movs	r3, #1
 800d036:	e7f1      	b.n	800d01c <_dtoa_r+0x238>
 800d038:	2300      	movs	r3, #0
 800d03a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d03c:	9310      	str	r3, [sp, #64]	@ 0x40
 800d03e:	4694      	mov	ip, r2
 800d040:	9b04      	ldr	r3, [sp, #16]
 800d042:	4463      	add	r3, ip
 800d044:	930e      	str	r3, [sp, #56]	@ 0x38
 800d046:	3301      	adds	r3, #1
 800d048:	9309      	str	r3, [sp, #36]	@ 0x24
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	dc00      	bgt.n	800d050 <_dtoa_r+0x26c>
 800d04e:	2301      	movs	r3, #1
 800d050:	9a03      	ldr	r2, [sp, #12]
 800d052:	2100      	movs	r1, #0
 800d054:	69d0      	ldr	r0, [r2, #28]
 800d056:	2204      	movs	r2, #4
 800d058:	0015      	movs	r5, r2
 800d05a:	3514      	adds	r5, #20
 800d05c:	429d      	cmp	r5, r3
 800d05e:	d91b      	bls.n	800d098 <_dtoa_r+0x2b4>
 800d060:	6041      	str	r1, [r0, #4]
 800d062:	9803      	ldr	r0, [sp, #12]
 800d064:	f000 fcfc 	bl	800da60 <_Balloc>
 800d068:	9008      	str	r0, [sp, #32]
 800d06a:	2800      	cmp	r0, #0
 800d06c:	d117      	bne.n	800d09e <_dtoa_r+0x2ba>
 800d06e:	21b0      	movs	r1, #176	@ 0xb0
 800d070:	4b42      	ldr	r3, [pc, #264]	@ (800d17c <_dtoa_r+0x398>)
 800d072:	482e      	ldr	r0, [pc, #184]	@ (800d12c <_dtoa_r+0x348>)
 800d074:	9a08      	ldr	r2, [sp, #32]
 800d076:	31ff      	adds	r1, #255	@ 0xff
 800d078:	e6c9      	b.n	800ce0e <_dtoa_r+0x2a>
 800d07a:	2301      	movs	r3, #1
 800d07c:	e7dd      	b.n	800d03a <_dtoa_r+0x256>
 800d07e:	2300      	movs	r3, #0
 800d080:	9410      	str	r4, [sp, #64]	@ 0x40
 800d082:	9322      	str	r3, [sp, #136]	@ 0x88
 800d084:	3b01      	subs	r3, #1
 800d086:	930e      	str	r3, [sp, #56]	@ 0x38
 800d088:	9309      	str	r3, [sp, #36]	@ 0x24
 800d08a:	2200      	movs	r2, #0
 800d08c:	3313      	adds	r3, #19
 800d08e:	e7cf      	b.n	800d030 <_dtoa_r+0x24c>
 800d090:	2301      	movs	r3, #1
 800d092:	9310      	str	r3, [sp, #64]	@ 0x40
 800d094:	3b02      	subs	r3, #2
 800d096:	e7f6      	b.n	800d086 <_dtoa_r+0x2a2>
 800d098:	3101      	adds	r1, #1
 800d09a:	0052      	lsls	r2, r2, #1
 800d09c:	e7dc      	b.n	800d058 <_dtoa_r+0x274>
 800d09e:	9b03      	ldr	r3, [sp, #12]
 800d0a0:	9a08      	ldr	r2, [sp, #32]
 800d0a2:	69db      	ldr	r3, [r3, #28]
 800d0a4:	601a      	str	r2, [r3, #0]
 800d0a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0a8:	2b0e      	cmp	r3, #14
 800d0aa:	d900      	bls.n	800d0ae <_dtoa_r+0x2ca>
 800d0ac:	e0d9      	b.n	800d262 <_dtoa_r+0x47e>
 800d0ae:	2c00      	cmp	r4, #0
 800d0b0:	d100      	bne.n	800d0b4 <_dtoa_r+0x2d0>
 800d0b2:	e0d6      	b.n	800d262 <_dtoa_r+0x47e>
 800d0b4:	9b04      	ldr	r3, [sp, #16]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	dd64      	ble.n	800d184 <_dtoa_r+0x3a0>
 800d0ba:	210f      	movs	r1, #15
 800d0bc:	9a04      	ldr	r2, [sp, #16]
 800d0be:	4b2b      	ldr	r3, [pc, #172]	@ (800d16c <_dtoa_r+0x388>)
 800d0c0:	400a      	ands	r2, r1
 800d0c2:	00d2      	lsls	r2, r2, #3
 800d0c4:	189b      	adds	r3, r3, r2
 800d0c6:	681e      	ldr	r6, [r3, #0]
 800d0c8:	685f      	ldr	r7, [r3, #4]
 800d0ca:	9b04      	ldr	r3, [sp, #16]
 800d0cc:	2402      	movs	r4, #2
 800d0ce:	111d      	asrs	r5, r3, #4
 800d0d0:	05db      	lsls	r3, r3, #23
 800d0d2:	d50a      	bpl.n	800d0ea <_dtoa_r+0x306>
 800d0d4:	4b2a      	ldr	r3, [pc, #168]	@ (800d180 <_dtoa_r+0x39c>)
 800d0d6:	400d      	ands	r5, r1
 800d0d8:	6a1a      	ldr	r2, [r3, #32]
 800d0da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0dc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800d0de:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800d0e0:	f7f3 fe6e 	bl	8000dc0 <__aeabi_ddiv>
 800d0e4:	900a      	str	r0, [sp, #40]	@ 0x28
 800d0e6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d0e8:	3401      	adds	r4, #1
 800d0ea:	4b25      	ldr	r3, [pc, #148]	@ (800d180 <_dtoa_r+0x39c>)
 800d0ec:	930c      	str	r3, [sp, #48]	@ 0x30
 800d0ee:	2d00      	cmp	r5, #0
 800d0f0:	d108      	bne.n	800d104 <_dtoa_r+0x320>
 800d0f2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d0f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d0f6:	0032      	movs	r2, r6
 800d0f8:	003b      	movs	r3, r7
 800d0fa:	f7f3 fe61 	bl	8000dc0 <__aeabi_ddiv>
 800d0fe:	900a      	str	r0, [sp, #40]	@ 0x28
 800d100:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d102:	e05a      	b.n	800d1ba <_dtoa_r+0x3d6>
 800d104:	2301      	movs	r3, #1
 800d106:	421d      	tst	r5, r3
 800d108:	d009      	beq.n	800d11e <_dtoa_r+0x33a>
 800d10a:	18e4      	adds	r4, r4, r3
 800d10c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d10e:	0030      	movs	r0, r6
 800d110:	681a      	ldr	r2, [r3, #0]
 800d112:	685b      	ldr	r3, [r3, #4]
 800d114:	0039      	movs	r1, r7
 800d116:	f7f4 fa97 	bl	8001648 <__aeabi_dmul>
 800d11a:	0006      	movs	r6, r0
 800d11c:	000f      	movs	r7, r1
 800d11e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d120:	106d      	asrs	r5, r5, #1
 800d122:	3308      	adds	r3, #8
 800d124:	e7e2      	b.n	800d0ec <_dtoa_r+0x308>
 800d126:	46c0      	nop			@ (mov r8, r8)
 800d128:	0801a31b 	.word	0x0801a31b
 800d12c:	0801a332 	.word	0x0801a332
 800d130:	7ff00000 	.word	0x7ff00000
 800d134:	0000270f 	.word	0x0000270f
 800d138:	0801a317 	.word	0x0801a317
 800d13c:	0801a31a 	.word	0x0801a31a
 800d140:	0801a2eb 	.word	0x0801a2eb
 800d144:	0801a2ea 	.word	0x0801a2ea
 800d148:	3ff00000 	.word	0x3ff00000
 800d14c:	fffffc01 	.word	0xfffffc01
 800d150:	3ff80000 	.word	0x3ff80000
 800d154:	636f4361 	.word	0x636f4361
 800d158:	3fd287a7 	.word	0x3fd287a7
 800d15c:	8b60c8b3 	.word	0x8b60c8b3
 800d160:	3fc68a28 	.word	0x3fc68a28
 800d164:	509f79fb 	.word	0x509f79fb
 800d168:	3fd34413 	.word	0x3fd34413
 800d16c:	0801a428 	.word	0x0801a428
 800d170:	00000432 	.word	0x00000432
 800d174:	00000412 	.word	0x00000412
 800d178:	fe100000 	.word	0xfe100000
 800d17c:	0801a38a 	.word	0x0801a38a
 800d180:	0801a400 	.word	0x0801a400
 800d184:	9b04      	ldr	r3, [sp, #16]
 800d186:	2402      	movs	r4, #2
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d016      	beq.n	800d1ba <_dtoa_r+0x3d6>
 800d18c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800d18e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800d190:	220f      	movs	r2, #15
 800d192:	425d      	negs	r5, r3
 800d194:	402a      	ands	r2, r5
 800d196:	4bd7      	ldr	r3, [pc, #860]	@ (800d4f4 <_dtoa_r+0x710>)
 800d198:	00d2      	lsls	r2, r2, #3
 800d19a:	189b      	adds	r3, r3, r2
 800d19c:	681a      	ldr	r2, [r3, #0]
 800d19e:	685b      	ldr	r3, [r3, #4]
 800d1a0:	f7f4 fa52 	bl	8001648 <__aeabi_dmul>
 800d1a4:	2701      	movs	r7, #1
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	900a      	str	r0, [sp, #40]	@ 0x28
 800d1aa:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d1ac:	4ed2      	ldr	r6, [pc, #840]	@ (800d4f8 <_dtoa_r+0x714>)
 800d1ae:	112d      	asrs	r5, r5, #4
 800d1b0:	2d00      	cmp	r5, #0
 800d1b2:	d000      	beq.n	800d1b6 <_dtoa_r+0x3d2>
 800d1b4:	e0ba      	b.n	800d32c <_dtoa_r+0x548>
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d1a1      	bne.n	800d0fe <_dtoa_r+0x31a>
 800d1ba:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d1bc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d1be:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d100      	bne.n	800d1c6 <_dtoa_r+0x3e2>
 800d1c4:	e0bd      	b.n	800d342 <_dtoa_r+0x55e>
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	0030      	movs	r0, r6
 800d1ca:	0039      	movs	r1, r7
 800d1cc:	4bcb      	ldr	r3, [pc, #812]	@ (800d4fc <_dtoa_r+0x718>)
 800d1ce:	f7f3 f943 	bl	8000458 <__aeabi_dcmplt>
 800d1d2:	2800      	cmp	r0, #0
 800d1d4:	d100      	bne.n	800d1d8 <_dtoa_r+0x3f4>
 800d1d6:	e0b4      	b.n	800d342 <_dtoa_r+0x55e>
 800d1d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d100      	bne.n	800d1e0 <_dtoa_r+0x3fc>
 800d1de:	e0b0      	b.n	800d342 <_dtoa_r+0x55e>
 800d1e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	dd39      	ble.n	800d25a <_dtoa_r+0x476>
 800d1e6:	9b04      	ldr	r3, [sp, #16]
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	3b01      	subs	r3, #1
 800d1ec:	930c      	str	r3, [sp, #48]	@ 0x30
 800d1ee:	0030      	movs	r0, r6
 800d1f0:	4bc3      	ldr	r3, [pc, #780]	@ (800d500 <_dtoa_r+0x71c>)
 800d1f2:	0039      	movs	r1, r7
 800d1f4:	f7f4 fa28 	bl	8001648 <__aeabi_dmul>
 800d1f8:	900a      	str	r0, [sp, #40]	@ 0x28
 800d1fa:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d1fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1fe:	3401      	adds	r4, #1
 800d200:	0020      	movs	r0, r4
 800d202:	9311      	str	r3, [sp, #68]	@ 0x44
 800d204:	f7f5 f8e2 	bl	80023cc <__aeabi_i2d>
 800d208:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d20a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d20c:	f7f4 fa1c 	bl	8001648 <__aeabi_dmul>
 800d210:	4bbc      	ldr	r3, [pc, #752]	@ (800d504 <_dtoa_r+0x720>)
 800d212:	2200      	movs	r2, #0
 800d214:	f7f3 fa70 	bl	80006f8 <__aeabi_dadd>
 800d218:	4bbb      	ldr	r3, [pc, #748]	@ (800d508 <_dtoa_r+0x724>)
 800d21a:	0006      	movs	r6, r0
 800d21c:	18cf      	adds	r7, r1, r3
 800d21e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d220:	2b00      	cmp	r3, #0
 800d222:	d000      	beq.n	800d226 <_dtoa_r+0x442>
 800d224:	e091      	b.n	800d34a <_dtoa_r+0x566>
 800d226:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d228:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d22a:	2200      	movs	r2, #0
 800d22c:	4bb7      	ldr	r3, [pc, #732]	@ (800d50c <_dtoa_r+0x728>)
 800d22e:	f7f4 fcd3 	bl	8001bd8 <__aeabi_dsub>
 800d232:	0032      	movs	r2, r6
 800d234:	003b      	movs	r3, r7
 800d236:	0004      	movs	r4, r0
 800d238:	000d      	movs	r5, r1
 800d23a:	f7f3 f921 	bl	8000480 <__aeabi_dcmpgt>
 800d23e:	2800      	cmp	r0, #0
 800d240:	d000      	beq.n	800d244 <_dtoa_r+0x460>
 800d242:	e29d      	b.n	800d780 <_dtoa_r+0x99c>
 800d244:	2180      	movs	r1, #128	@ 0x80
 800d246:	0609      	lsls	r1, r1, #24
 800d248:	187b      	adds	r3, r7, r1
 800d24a:	0032      	movs	r2, r6
 800d24c:	0020      	movs	r0, r4
 800d24e:	0029      	movs	r1, r5
 800d250:	f7f3 f902 	bl	8000458 <__aeabi_dcmplt>
 800d254:	2800      	cmp	r0, #0
 800d256:	d000      	beq.n	800d25a <_dtoa_r+0x476>
 800d258:	e130      	b.n	800d4bc <_dtoa_r+0x6d8>
 800d25a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d25c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800d25e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d260:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d262:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800d264:	2b00      	cmp	r3, #0
 800d266:	da00      	bge.n	800d26a <_dtoa_r+0x486>
 800d268:	e177      	b.n	800d55a <_dtoa_r+0x776>
 800d26a:	9a04      	ldr	r2, [sp, #16]
 800d26c:	2a0e      	cmp	r2, #14
 800d26e:	dd00      	ble.n	800d272 <_dtoa_r+0x48e>
 800d270:	e173      	b.n	800d55a <_dtoa_r+0x776>
 800d272:	4ba0      	ldr	r3, [pc, #640]	@ (800d4f4 <_dtoa_r+0x710>)
 800d274:	00d2      	lsls	r2, r2, #3
 800d276:	189b      	adds	r3, r3, r2
 800d278:	685c      	ldr	r4, [r3, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	9306      	str	r3, [sp, #24]
 800d27e:	9407      	str	r4, [sp, #28]
 800d280:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d282:	2b00      	cmp	r3, #0
 800d284:	da03      	bge.n	800d28e <_dtoa_r+0x4aa>
 800d286:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d288:	2b00      	cmp	r3, #0
 800d28a:	dc00      	bgt.n	800d28e <_dtoa_r+0x4aa>
 800d28c:	e106      	b.n	800d49c <_dtoa_r+0x6b8>
 800d28e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d290:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d294:	9d08      	ldr	r5, [sp, #32]
 800d296:	3b01      	subs	r3, #1
 800d298:	195b      	adds	r3, r3, r5
 800d29a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d29c:	9a06      	ldr	r2, [sp, #24]
 800d29e:	9b07      	ldr	r3, [sp, #28]
 800d2a0:	0030      	movs	r0, r6
 800d2a2:	0039      	movs	r1, r7
 800d2a4:	f7f3 fd8c 	bl	8000dc0 <__aeabi_ddiv>
 800d2a8:	f7f5 f854 	bl	8002354 <__aeabi_d2iz>
 800d2ac:	9009      	str	r0, [sp, #36]	@ 0x24
 800d2ae:	f7f5 f88d 	bl	80023cc <__aeabi_i2d>
 800d2b2:	9a06      	ldr	r2, [sp, #24]
 800d2b4:	9b07      	ldr	r3, [sp, #28]
 800d2b6:	f7f4 f9c7 	bl	8001648 <__aeabi_dmul>
 800d2ba:	0002      	movs	r2, r0
 800d2bc:	000b      	movs	r3, r1
 800d2be:	0030      	movs	r0, r6
 800d2c0:	0039      	movs	r1, r7
 800d2c2:	f7f4 fc89 	bl	8001bd8 <__aeabi_dsub>
 800d2c6:	002b      	movs	r3, r5
 800d2c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d2ca:	3501      	adds	r5, #1
 800d2cc:	3230      	adds	r2, #48	@ 0x30
 800d2ce:	701a      	strb	r2, [r3, #0]
 800d2d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d2d2:	002c      	movs	r4, r5
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d000      	beq.n	800d2da <_dtoa_r+0x4f6>
 800d2d8:	e131      	b.n	800d53e <_dtoa_r+0x75a>
 800d2da:	0002      	movs	r2, r0
 800d2dc:	000b      	movs	r3, r1
 800d2de:	f7f3 fa0b 	bl	80006f8 <__aeabi_dadd>
 800d2e2:	9a06      	ldr	r2, [sp, #24]
 800d2e4:	9b07      	ldr	r3, [sp, #28]
 800d2e6:	0006      	movs	r6, r0
 800d2e8:	000f      	movs	r7, r1
 800d2ea:	f7f3 f8c9 	bl	8000480 <__aeabi_dcmpgt>
 800d2ee:	2800      	cmp	r0, #0
 800d2f0:	d000      	beq.n	800d2f4 <_dtoa_r+0x510>
 800d2f2:	e10f      	b.n	800d514 <_dtoa_r+0x730>
 800d2f4:	9a06      	ldr	r2, [sp, #24]
 800d2f6:	9b07      	ldr	r3, [sp, #28]
 800d2f8:	0030      	movs	r0, r6
 800d2fa:	0039      	movs	r1, r7
 800d2fc:	f7f3 f8a6 	bl	800044c <__aeabi_dcmpeq>
 800d300:	2800      	cmp	r0, #0
 800d302:	d003      	beq.n	800d30c <_dtoa_r+0x528>
 800d304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d306:	07dd      	lsls	r5, r3, #31
 800d308:	d500      	bpl.n	800d30c <_dtoa_r+0x528>
 800d30a:	e103      	b.n	800d514 <_dtoa_r+0x730>
 800d30c:	9905      	ldr	r1, [sp, #20]
 800d30e:	9803      	ldr	r0, [sp, #12]
 800d310:	f000 fbea 	bl	800dae8 <_Bfree>
 800d314:	2300      	movs	r3, #0
 800d316:	7023      	strb	r3, [r4, #0]
 800d318:	9b04      	ldr	r3, [sp, #16]
 800d31a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800d31c:	3301      	adds	r3, #1
 800d31e:	6013      	str	r3, [r2, #0]
 800d320:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800d322:	2b00      	cmp	r3, #0
 800d324:	d100      	bne.n	800d328 <_dtoa_r+0x544>
 800d326:	e5a7      	b.n	800ce78 <_dtoa_r+0x94>
 800d328:	601c      	str	r4, [r3, #0]
 800d32a:	e5a5      	b.n	800ce78 <_dtoa_r+0x94>
 800d32c:	423d      	tst	r5, r7
 800d32e:	d005      	beq.n	800d33c <_dtoa_r+0x558>
 800d330:	6832      	ldr	r2, [r6, #0]
 800d332:	6873      	ldr	r3, [r6, #4]
 800d334:	f7f4 f988 	bl	8001648 <__aeabi_dmul>
 800d338:	003b      	movs	r3, r7
 800d33a:	3401      	adds	r4, #1
 800d33c:	106d      	asrs	r5, r5, #1
 800d33e:	3608      	adds	r6, #8
 800d340:	e736      	b.n	800d1b0 <_dtoa_r+0x3cc>
 800d342:	9b04      	ldr	r3, [sp, #16]
 800d344:	930c      	str	r3, [sp, #48]	@ 0x30
 800d346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d348:	e75a      	b.n	800d200 <_dtoa_r+0x41c>
 800d34a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d34c:	4b69      	ldr	r3, [pc, #420]	@ (800d4f4 <_dtoa_r+0x710>)
 800d34e:	3a01      	subs	r2, #1
 800d350:	00d2      	lsls	r2, r2, #3
 800d352:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800d354:	189b      	adds	r3, r3, r2
 800d356:	681a      	ldr	r2, [r3, #0]
 800d358:	685b      	ldr	r3, [r3, #4]
 800d35a:	2900      	cmp	r1, #0
 800d35c:	d04c      	beq.n	800d3f8 <_dtoa_r+0x614>
 800d35e:	2000      	movs	r0, #0
 800d360:	496b      	ldr	r1, [pc, #428]	@ (800d510 <_dtoa_r+0x72c>)
 800d362:	f7f3 fd2d 	bl	8000dc0 <__aeabi_ddiv>
 800d366:	0032      	movs	r2, r6
 800d368:	003b      	movs	r3, r7
 800d36a:	f7f4 fc35 	bl	8001bd8 <__aeabi_dsub>
 800d36e:	9a08      	ldr	r2, [sp, #32]
 800d370:	0006      	movs	r6, r0
 800d372:	4694      	mov	ip, r2
 800d374:	000f      	movs	r7, r1
 800d376:	9b08      	ldr	r3, [sp, #32]
 800d378:	9316      	str	r3, [sp, #88]	@ 0x58
 800d37a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d37c:	4463      	add	r3, ip
 800d37e:	9311      	str	r3, [sp, #68]	@ 0x44
 800d380:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d382:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d384:	f7f4 ffe6 	bl	8002354 <__aeabi_d2iz>
 800d388:	0005      	movs	r5, r0
 800d38a:	f7f5 f81f 	bl	80023cc <__aeabi_i2d>
 800d38e:	0002      	movs	r2, r0
 800d390:	000b      	movs	r3, r1
 800d392:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d394:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d396:	f7f4 fc1f 	bl	8001bd8 <__aeabi_dsub>
 800d39a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d39c:	3530      	adds	r5, #48	@ 0x30
 800d39e:	1c5c      	adds	r4, r3, #1
 800d3a0:	701d      	strb	r5, [r3, #0]
 800d3a2:	0032      	movs	r2, r6
 800d3a4:	003b      	movs	r3, r7
 800d3a6:	900a      	str	r0, [sp, #40]	@ 0x28
 800d3a8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d3aa:	f7f3 f855 	bl	8000458 <__aeabi_dcmplt>
 800d3ae:	2800      	cmp	r0, #0
 800d3b0:	d16a      	bne.n	800d488 <_dtoa_r+0x6a4>
 800d3b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d3b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d3b6:	2000      	movs	r0, #0
 800d3b8:	4950      	ldr	r1, [pc, #320]	@ (800d4fc <_dtoa_r+0x718>)
 800d3ba:	f7f4 fc0d 	bl	8001bd8 <__aeabi_dsub>
 800d3be:	0032      	movs	r2, r6
 800d3c0:	003b      	movs	r3, r7
 800d3c2:	f7f3 f849 	bl	8000458 <__aeabi_dcmplt>
 800d3c6:	2800      	cmp	r0, #0
 800d3c8:	d000      	beq.n	800d3cc <_dtoa_r+0x5e8>
 800d3ca:	e0a5      	b.n	800d518 <_dtoa_r+0x734>
 800d3cc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d3ce:	42a3      	cmp	r3, r4
 800d3d0:	d100      	bne.n	800d3d4 <_dtoa_r+0x5f0>
 800d3d2:	e742      	b.n	800d25a <_dtoa_r+0x476>
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	0030      	movs	r0, r6
 800d3d8:	0039      	movs	r1, r7
 800d3da:	4b49      	ldr	r3, [pc, #292]	@ (800d500 <_dtoa_r+0x71c>)
 800d3dc:	f7f4 f934 	bl	8001648 <__aeabi_dmul>
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	0006      	movs	r6, r0
 800d3e4:	000f      	movs	r7, r1
 800d3e6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d3e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d3ea:	4b45      	ldr	r3, [pc, #276]	@ (800d500 <_dtoa_r+0x71c>)
 800d3ec:	f7f4 f92c 	bl	8001648 <__aeabi_dmul>
 800d3f0:	9416      	str	r4, [sp, #88]	@ 0x58
 800d3f2:	900a      	str	r0, [sp, #40]	@ 0x28
 800d3f4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d3f6:	e7c3      	b.n	800d380 <_dtoa_r+0x59c>
 800d3f8:	0030      	movs	r0, r6
 800d3fa:	0039      	movs	r1, r7
 800d3fc:	f7f4 f924 	bl	8001648 <__aeabi_dmul>
 800d400:	9d08      	ldr	r5, [sp, #32]
 800d402:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d404:	002b      	movs	r3, r5
 800d406:	4694      	mov	ip, r2
 800d408:	9016      	str	r0, [sp, #88]	@ 0x58
 800d40a:	9117      	str	r1, [sp, #92]	@ 0x5c
 800d40c:	4463      	add	r3, ip
 800d40e:	9319      	str	r3, [sp, #100]	@ 0x64
 800d410:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d412:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d414:	f7f4 ff9e 	bl	8002354 <__aeabi_d2iz>
 800d418:	0004      	movs	r4, r0
 800d41a:	f7f4 ffd7 	bl	80023cc <__aeabi_i2d>
 800d41e:	000b      	movs	r3, r1
 800d420:	0002      	movs	r2, r0
 800d422:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d424:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d426:	f7f4 fbd7 	bl	8001bd8 <__aeabi_dsub>
 800d42a:	3430      	adds	r4, #48	@ 0x30
 800d42c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d42e:	702c      	strb	r4, [r5, #0]
 800d430:	3501      	adds	r5, #1
 800d432:	0006      	movs	r6, r0
 800d434:	000f      	movs	r7, r1
 800d436:	42ab      	cmp	r3, r5
 800d438:	d129      	bne.n	800d48e <_dtoa_r+0x6aa>
 800d43a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800d43c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800d43e:	9b08      	ldr	r3, [sp, #32]
 800d440:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800d442:	469c      	mov	ip, r3
 800d444:	2200      	movs	r2, #0
 800d446:	4b32      	ldr	r3, [pc, #200]	@ (800d510 <_dtoa_r+0x72c>)
 800d448:	4464      	add	r4, ip
 800d44a:	f7f3 f955 	bl	80006f8 <__aeabi_dadd>
 800d44e:	0002      	movs	r2, r0
 800d450:	000b      	movs	r3, r1
 800d452:	0030      	movs	r0, r6
 800d454:	0039      	movs	r1, r7
 800d456:	f7f3 f813 	bl	8000480 <__aeabi_dcmpgt>
 800d45a:	2800      	cmp	r0, #0
 800d45c:	d15c      	bne.n	800d518 <_dtoa_r+0x734>
 800d45e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d460:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d462:	2000      	movs	r0, #0
 800d464:	492a      	ldr	r1, [pc, #168]	@ (800d510 <_dtoa_r+0x72c>)
 800d466:	f7f4 fbb7 	bl	8001bd8 <__aeabi_dsub>
 800d46a:	0002      	movs	r2, r0
 800d46c:	000b      	movs	r3, r1
 800d46e:	0030      	movs	r0, r6
 800d470:	0039      	movs	r1, r7
 800d472:	f7f2 fff1 	bl	8000458 <__aeabi_dcmplt>
 800d476:	2800      	cmp	r0, #0
 800d478:	d100      	bne.n	800d47c <_dtoa_r+0x698>
 800d47a:	e6ee      	b.n	800d25a <_dtoa_r+0x476>
 800d47c:	0023      	movs	r3, r4
 800d47e:	3c01      	subs	r4, #1
 800d480:	7822      	ldrb	r2, [r4, #0]
 800d482:	2a30      	cmp	r2, #48	@ 0x30
 800d484:	d0fa      	beq.n	800d47c <_dtoa_r+0x698>
 800d486:	001c      	movs	r4, r3
 800d488:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d48a:	9304      	str	r3, [sp, #16]
 800d48c:	e73e      	b.n	800d30c <_dtoa_r+0x528>
 800d48e:	2200      	movs	r2, #0
 800d490:	4b1b      	ldr	r3, [pc, #108]	@ (800d500 <_dtoa_r+0x71c>)
 800d492:	f7f4 f8d9 	bl	8001648 <__aeabi_dmul>
 800d496:	900a      	str	r0, [sp, #40]	@ 0x28
 800d498:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d49a:	e7b9      	b.n	800d410 <_dtoa_r+0x62c>
 800d49c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d10c      	bne.n	800d4bc <_dtoa_r+0x6d8>
 800d4a2:	9806      	ldr	r0, [sp, #24]
 800d4a4:	9907      	ldr	r1, [sp, #28]
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	4b18      	ldr	r3, [pc, #96]	@ (800d50c <_dtoa_r+0x728>)
 800d4aa:	f7f4 f8cd 	bl	8001648 <__aeabi_dmul>
 800d4ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d4b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d4b2:	f7f2 ffef 	bl	8000494 <__aeabi_dcmpge>
 800d4b6:	2800      	cmp	r0, #0
 800d4b8:	d100      	bne.n	800d4bc <_dtoa_r+0x6d8>
 800d4ba:	e164      	b.n	800d786 <_dtoa_r+0x9a2>
 800d4bc:	2600      	movs	r6, #0
 800d4be:	0037      	movs	r7, r6
 800d4c0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d4c2:	9c08      	ldr	r4, [sp, #32]
 800d4c4:	43db      	mvns	r3, r3
 800d4c6:	930c      	str	r3, [sp, #48]	@ 0x30
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	9304      	str	r3, [sp, #16]
 800d4cc:	0031      	movs	r1, r6
 800d4ce:	9803      	ldr	r0, [sp, #12]
 800d4d0:	f000 fb0a 	bl	800dae8 <_Bfree>
 800d4d4:	2f00      	cmp	r7, #0
 800d4d6:	d0d7      	beq.n	800d488 <_dtoa_r+0x6a4>
 800d4d8:	9b04      	ldr	r3, [sp, #16]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d005      	beq.n	800d4ea <_dtoa_r+0x706>
 800d4de:	42bb      	cmp	r3, r7
 800d4e0:	d003      	beq.n	800d4ea <_dtoa_r+0x706>
 800d4e2:	0019      	movs	r1, r3
 800d4e4:	9803      	ldr	r0, [sp, #12]
 800d4e6:	f000 faff 	bl	800dae8 <_Bfree>
 800d4ea:	0039      	movs	r1, r7
 800d4ec:	9803      	ldr	r0, [sp, #12]
 800d4ee:	f000 fafb 	bl	800dae8 <_Bfree>
 800d4f2:	e7c9      	b.n	800d488 <_dtoa_r+0x6a4>
 800d4f4:	0801a428 	.word	0x0801a428
 800d4f8:	0801a400 	.word	0x0801a400
 800d4fc:	3ff00000 	.word	0x3ff00000
 800d500:	40240000 	.word	0x40240000
 800d504:	401c0000 	.word	0x401c0000
 800d508:	fcc00000 	.word	0xfcc00000
 800d50c:	40140000 	.word	0x40140000
 800d510:	3fe00000 	.word	0x3fe00000
 800d514:	9b04      	ldr	r3, [sp, #16]
 800d516:	930c      	str	r3, [sp, #48]	@ 0x30
 800d518:	0023      	movs	r3, r4
 800d51a:	001c      	movs	r4, r3
 800d51c:	3b01      	subs	r3, #1
 800d51e:	781a      	ldrb	r2, [r3, #0]
 800d520:	2a39      	cmp	r2, #57	@ 0x39
 800d522:	d108      	bne.n	800d536 <_dtoa_r+0x752>
 800d524:	9a08      	ldr	r2, [sp, #32]
 800d526:	429a      	cmp	r2, r3
 800d528:	d1f7      	bne.n	800d51a <_dtoa_r+0x736>
 800d52a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d52c:	9908      	ldr	r1, [sp, #32]
 800d52e:	3201      	adds	r2, #1
 800d530:	920c      	str	r2, [sp, #48]	@ 0x30
 800d532:	2230      	movs	r2, #48	@ 0x30
 800d534:	700a      	strb	r2, [r1, #0]
 800d536:	781a      	ldrb	r2, [r3, #0]
 800d538:	3201      	adds	r2, #1
 800d53a:	701a      	strb	r2, [r3, #0]
 800d53c:	e7a4      	b.n	800d488 <_dtoa_r+0x6a4>
 800d53e:	2200      	movs	r2, #0
 800d540:	4bc6      	ldr	r3, [pc, #792]	@ (800d85c <_dtoa_r+0xa78>)
 800d542:	f7f4 f881 	bl	8001648 <__aeabi_dmul>
 800d546:	2200      	movs	r2, #0
 800d548:	2300      	movs	r3, #0
 800d54a:	0006      	movs	r6, r0
 800d54c:	000f      	movs	r7, r1
 800d54e:	f7f2 ff7d 	bl	800044c <__aeabi_dcmpeq>
 800d552:	2800      	cmp	r0, #0
 800d554:	d100      	bne.n	800d558 <_dtoa_r+0x774>
 800d556:	e6a1      	b.n	800d29c <_dtoa_r+0x4b8>
 800d558:	e6d8      	b.n	800d30c <_dtoa_r+0x528>
 800d55a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800d55c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800d55e:	9c06      	ldr	r4, [sp, #24]
 800d560:	2f00      	cmp	r7, #0
 800d562:	d014      	beq.n	800d58e <_dtoa_r+0x7aa>
 800d564:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800d566:	2a01      	cmp	r2, #1
 800d568:	dd00      	ble.n	800d56c <_dtoa_r+0x788>
 800d56a:	e0c8      	b.n	800d6fe <_dtoa_r+0x91a>
 800d56c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800d56e:	2a00      	cmp	r2, #0
 800d570:	d100      	bne.n	800d574 <_dtoa_r+0x790>
 800d572:	e0be      	b.n	800d6f2 <_dtoa_r+0x90e>
 800d574:	4aba      	ldr	r2, [pc, #744]	@ (800d860 <_dtoa_r+0xa7c>)
 800d576:	189b      	adds	r3, r3, r2
 800d578:	9a06      	ldr	r2, [sp, #24]
 800d57a:	2101      	movs	r1, #1
 800d57c:	18d2      	adds	r2, r2, r3
 800d57e:	9206      	str	r2, [sp, #24]
 800d580:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d582:	9803      	ldr	r0, [sp, #12]
 800d584:	18d3      	adds	r3, r2, r3
 800d586:	930d      	str	r3, [sp, #52]	@ 0x34
 800d588:	f000 fb66 	bl	800dc58 <__i2b>
 800d58c:	0007      	movs	r7, r0
 800d58e:	2c00      	cmp	r4, #0
 800d590:	d00e      	beq.n	800d5b0 <_dtoa_r+0x7cc>
 800d592:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d594:	2b00      	cmp	r3, #0
 800d596:	dd0b      	ble.n	800d5b0 <_dtoa_r+0x7cc>
 800d598:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d59a:	0023      	movs	r3, r4
 800d59c:	4294      	cmp	r4, r2
 800d59e:	dd00      	ble.n	800d5a2 <_dtoa_r+0x7be>
 800d5a0:	0013      	movs	r3, r2
 800d5a2:	9a06      	ldr	r2, [sp, #24]
 800d5a4:	1ae4      	subs	r4, r4, r3
 800d5a6:	1ad2      	subs	r2, r2, r3
 800d5a8:	9206      	str	r2, [sp, #24]
 800d5aa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d5ac:	1ad3      	subs	r3, r2, r3
 800d5ae:	930d      	str	r3, [sp, #52]	@ 0x34
 800d5b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d01f      	beq.n	800d5f6 <_dtoa_r+0x812>
 800d5b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d100      	bne.n	800d5be <_dtoa_r+0x7da>
 800d5bc:	e0b5      	b.n	800d72a <_dtoa_r+0x946>
 800d5be:	2d00      	cmp	r5, #0
 800d5c0:	d010      	beq.n	800d5e4 <_dtoa_r+0x800>
 800d5c2:	0039      	movs	r1, r7
 800d5c4:	002a      	movs	r2, r5
 800d5c6:	9803      	ldr	r0, [sp, #12]
 800d5c8:	f000 fc10 	bl	800ddec <__pow5mult>
 800d5cc:	9a05      	ldr	r2, [sp, #20]
 800d5ce:	0001      	movs	r1, r0
 800d5d0:	0007      	movs	r7, r0
 800d5d2:	9803      	ldr	r0, [sp, #12]
 800d5d4:	f000 fb58 	bl	800dc88 <__multiply>
 800d5d8:	0006      	movs	r6, r0
 800d5da:	9905      	ldr	r1, [sp, #20]
 800d5dc:	9803      	ldr	r0, [sp, #12]
 800d5de:	f000 fa83 	bl	800dae8 <_Bfree>
 800d5e2:	9605      	str	r6, [sp, #20]
 800d5e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d5e6:	1b5a      	subs	r2, r3, r5
 800d5e8:	42ab      	cmp	r3, r5
 800d5ea:	d004      	beq.n	800d5f6 <_dtoa_r+0x812>
 800d5ec:	9905      	ldr	r1, [sp, #20]
 800d5ee:	9803      	ldr	r0, [sp, #12]
 800d5f0:	f000 fbfc 	bl	800ddec <__pow5mult>
 800d5f4:	9005      	str	r0, [sp, #20]
 800d5f6:	2101      	movs	r1, #1
 800d5f8:	9803      	ldr	r0, [sp, #12]
 800d5fa:	f000 fb2d 	bl	800dc58 <__i2b>
 800d5fe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d600:	0006      	movs	r6, r0
 800d602:	2b00      	cmp	r3, #0
 800d604:	d100      	bne.n	800d608 <_dtoa_r+0x824>
 800d606:	e1bc      	b.n	800d982 <_dtoa_r+0xb9e>
 800d608:	001a      	movs	r2, r3
 800d60a:	0001      	movs	r1, r0
 800d60c:	9803      	ldr	r0, [sp, #12]
 800d60e:	f000 fbed 	bl	800ddec <__pow5mult>
 800d612:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d614:	0006      	movs	r6, r0
 800d616:	2500      	movs	r5, #0
 800d618:	2b01      	cmp	r3, #1
 800d61a:	dc16      	bgt.n	800d64a <_dtoa_r+0x866>
 800d61c:	2500      	movs	r5, #0
 800d61e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d620:	42ab      	cmp	r3, r5
 800d622:	d10e      	bne.n	800d642 <_dtoa_r+0x85e>
 800d624:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d626:	031b      	lsls	r3, r3, #12
 800d628:	42ab      	cmp	r3, r5
 800d62a:	d10a      	bne.n	800d642 <_dtoa_r+0x85e>
 800d62c:	4b8d      	ldr	r3, [pc, #564]	@ (800d864 <_dtoa_r+0xa80>)
 800d62e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d630:	4213      	tst	r3, r2
 800d632:	d006      	beq.n	800d642 <_dtoa_r+0x85e>
 800d634:	9b06      	ldr	r3, [sp, #24]
 800d636:	3501      	adds	r5, #1
 800d638:	3301      	adds	r3, #1
 800d63a:	9306      	str	r3, [sp, #24]
 800d63c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d63e:	3301      	adds	r3, #1
 800d640:	930d      	str	r3, [sp, #52]	@ 0x34
 800d642:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d644:	2001      	movs	r0, #1
 800d646:	2b00      	cmp	r3, #0
 800d648:	d008      	beq.n	800d65c <_dtoa_r+0x878>
 800d64a:	6933      	ldr	r3, [r6, #16]
 800d64c:	3303      	adds	r3, #3
 800d64e:	009b      	lsls	r3, r3, #2
 800d650:	18f3      	adds	r3, r6, r3
 800d652:	6858      	ldr	r0, [r3, #4]
 800d654:	f000 fab0 	bl	800dbb8 <__hi0bits>
 800d658:	2320      	movs	r3, #32
 800d65a:	1a18      	subs	r0, r3, r0
 800d65c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d65e:	1818      	adds	r0, r3, r0
 800d660:	0002      	movs	r2, r0
 800d662:	231f      	movs	r3, #31
 800d664:	401a      	ands	r2, r3
 800d666:	4218      	tst	r0, r3
 800d668:	d065      	beq.n	800d736 <_dtoa_r+0x952>
 800d66a:	3301      	adds	r3, #1
 800d66c:	1a9b      	subs	r3, r3, r2
 800d66e:	2b04      	cmp	r3, #4
 800d670:	dd5d      	ble.n	800d72e <_dtoa_r+0x94a>
 800d672:	231c      	movs	r3, #28
 800d674:	1a9b      	subs	r3, r3, r2
 800d676:	9a06      	ldr	r2, [sp, #24]
 800d678:	18e4      	adds	r4, r4, r3
 800d67a:	18d2      	adds	r2, r2, r3
 800d67c:	9206      	str	r2, [sp, #24]
 800d67e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d680:	18d3      	adds	r3, r2, r3
 800d682:	930d      	str	r3, [sp, #52]	@ 0x34
 800d684:	9b06      	ldr	r3, [sp, #24]
 800d686:	2b00      	cmp	r3, #0
 800d688:	dd05      	ble.n	800d696 <_dtoa_r+0x8b2>
 800d68a:	001a      	movs	r2, r3
 800d68c:	9905      	ldr	r1, [sp, #20]
 800d68e:	9803      	ldr	r0, [sp, #12]
 800d690:	f000 fc08 	bl	800dea4 <__lshift>
 800d694:	9005      	str	r0, [sp, #20]
 800d696:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d698:	2b00      	cmp	r3, #0
 800d69a:	dd05      	ble.n	800d6a8 <_dtoa_r+0x8c4>
 800d69c:	0031      	movs	r1, r6
 800d69e:	001a      	movs	r2, r3
 800d6a0:	9803      	ldr	r0, [sp, #12]
 800d6a2:	f000 fbff 	bl	800dea4 <__lshift>
 800d6a6:	0006      	movs	r6, r0
 800d6a8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d045      	beq.n	800d73a <_dtoa_r+0x956>
 800d6ae:	0031      	movs	r1, r6
 800d6b0:	9805      	ldr	r0, [sp, #20]
 800d6b2:	f000 fc63 	bl	800df7c <__mcmp>
 800d6b6:	2800      	cmp	r0, #0
 800d6b8:	da3f      	bge.n	800d73a <_dtoa_r+0x956>
 800d6ba:	9b04      	ldr	r3, [sp, #16]
 800d6bc:	220a      	movs	r2, #10
 800d6be:	3b01      	subs	r3, #1
 800d6c0:	930c      	str	r3, [sp, #48]	@ 0x30
 800d6c2:	9905      	ldr	r1, [sp, #20]
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	9803      	ldr	r0, [sp, #12]
 800d6c8:	f000 fa32 	bl	800db30 <__multadd>
 800d6cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d6ce:	9005      	str	r0, [sp, #20]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d100      	bne.n	800d6d6 <_dtoa_r+0x8f2>
 800d6d4:	e15c      	b.n	800d990 <_dtoa_r+0xbac>
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	0039      	movs	r1, r7
 800d6da:	220a      	movs	r2, #10
 800d6dc:	9803      	ldr	r0, [sp, #12]
 800d6de:	f000 fa27 	bl	800db30 <__multadd>
 800d6e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6e4:	0007      	movs	r7, r0
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	dc55      	bgt.n	800d796 <_dtoa_r+0x9b2>
 800d6ea:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d6ec:	2b02      	cmp	r3, #2
 800d6ee:	dc2d      	bgt.n	800d74c <_dtoa_r+0x968>
 800d6f0:	e051      	b.n	800d796 <_dtoa_r+0x9b2>
 800d6f2:	2336      	movs	r3, #54	@ 0x36
 800d6f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d6f6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800d6f8:	9c06      	ldr	r4, [sp, #24]
 800d6fa:	1a9b      	subs	r3, r3, r2
 800d6fc:	e73c      	b.n	800d578 <_dtoa_r+0x794>
 800d6fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d700:	1e5d      	subs	r5, r3, #1
 800d702:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d704:	42ab      	cmp	r3, r5
 800d706:	db08      	blt.n	800d71a <_dtoa_r+0x936>
 800d708:	1b5d      	subs	r5, r3, r5
 800d70a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d70c:	9c06      	ldr	r4, [sp, #24]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	db00      	blt.n	800d714 <_dtoa_r+0x930>
 800d712:	e731      	b.n	800d578 <_dtoa_r+0x794>
 800d714:	1ae4      	subs	r4, r4, r3
 800d716:	2300      	movs	r3, #0
 800d718:	e72e      	b.n	800d578 <_dtoa_r+0x794>
 800d71a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d71c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d71e:	1aeb      	subs	r3, r5, r3
 800d720:	18d3      	adds	r3, r2, r3
 800d722:	950f      	str	r5, [sp, #60]	@ 0x3c
 800d724:	9314      	str	r3, [sp, #80]	@ 0x50
 800d726:	2500      	movs	r5, #0
 800d728:	e7ef      	b.n	800d70a <_dtoa_r+0x926>
 800d72a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d72c:	e75e      	b.n	800d5ec <_dtoa_r+0x808>
 800d72e:	2b04      	cmp	r3, #4
 800d730:	d0a8      	beq.n	800d684 <_dtoa_r+0x8a0>
 800d732:	331c      	adds	r3, #28
 800d734:	e79f      	b.n	800d676 <_dtoa_r+0x892>
 800d736:	0013      	movs	r3, r2
 800d738:	e7fb      	b.n	800d732 <_dtoa_r+0x94e>
 800d73a:	9b04      	ldr	r3, [sp, #16]
 800d73c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d73e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d740:	930e      	str	r3, [sp, #56]	@ 0x38
 800d742:	2b00      	cmp	r3, #0
 800d744:	dc23      	bgt.n	800d78e <_dtoa_r+0x9aa>
 800d746:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d748:	2b02      	cmp	r3, #2
 800d74a:	dd20      	ble.n	800d78e <_dtoa_r+0x9aa>
 800d74c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d000      	beq.n	800d754 <_dtoa_r+0x970>
 800d752:	e6b5      	b.n	800d4c0 <_dtoa_r+0x6dc>
 800d754:	0031      	movs	r1, r6
 800d756:	2205      	movs	r2, #5
 800d758:	9803      	ldr	r0, [sp, #12]
 800d75a:	f000 f9e9 	bl	800db30 <__multadd>
 800d75e:	0006      	movs	r6, r0
 800d760:	0001      	movs	r1, r0
 800d762:	9805      	ldr	r0, [sp, #20]
 800d764:	f000 fc0a 	bl	800df7c <__mcmp>
 800d768:	2800      	cmp	r0, #0
 800d76a:	dc00      	bgt.n	800d76e <_dtoa_r+0x98a>
 800d76c:	e6a8      	b.n	800d4c0 <_dtoa_r+0x6dc>
 800d76e:	9b08      	ldr	r3, [sp, #32]
 800d770:	9a08      	ldr	r2, [sp, #32]
 800d772:	1c5c      	adds	r4, r3, #1
 800d774:	2331      	movs	r3, #49	@ 0x31
 800d776:	7013      	strb	r3, [r2, #0]
 800d778:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d77a:	3301      	adds	r3, #1
 800d77c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d77e:	e6a3      	b.n	800d4c8 <_dtoa_r+0x6e4>
 800d780:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800d782:	0037      	movs	r7, r6
 800d784:	e7f3      	b.n	800d76e <_dtoa_r+0x98a>
 800d786:	9b04      	ldr	r3, [sp, #16]
 800d788:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800d78a:	930c      	str	r3, [sp, #48]	@ 0x30
 800d78c:	e7f9      	b.n	800d782 <_dtoa_r+0x99e>
 800d78e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d790:	2b00      	cmp	r3, #0
 800d792:	d100      	bne.n	800d796 <_dtoa_r+0x9b2>
 800d794:	e100      	b.n	800d998 <_dtoa_r+0xbb4>
 800d796:	2c00      	cmp	r4, #0
 800d798:	dd05      	ble.n	800d7a6 <_dtoa_r+0x9c2>
 800d79a:	0039      	movs	r1, r7
 800d79c:	0022      	movs	r2, r4
 800d79e:	9803      	ldr	r0, [sp, #12]
 800d7a0:	f000 fb80 	bl	800dea4 <__lshift>
 800d7a4:	0007      	movs	r7, r0
 800d7a6:	0038      	movs	r0, r7
 800d7a8:	2d00      	cmp	r5, #0
 800d7aa:	d018      	beq.n	800d7de <_dtoa_r+0x9fa>
 800d7ac:	6879      	ldr	r1, [r7, #4]
 800d7ae:	9803      	ldr	r0, [sp, #12]
 800d7b0:	f000 f956 	bl	800da60 <_Balloc>
 800d7b4:	1e04      	subs	r4, r0, #0
 800d7b6:	d105      	bne.n	800d7c4 <_dtoa_r+0x9e0>
 800d7b8:	0022      	movs	r2, r4
 800d7ba:	4b2b      	ldr	r3, [pc, #172]	@ (800d868 <_dtoa_r+0xa84>)
 800d7bc:	482b      	ldr	r0, [pc, #172]	@ (800d86c <_dtoa_r+0xa88>)
 800d7be:	492c      	ldr	r1, [pc, #176]	@ (800d870 <_dtoa_r+0xa8c>)
 800d7c0:	f7ff fb25 	bl	800ce0e <_dtoa_r+0x2a>
 800d7c4:	0039      	movs	r1, r7
 800d7c6:	693a      	ldr	r2, [r7, #16]
 800d7c8:	310c      	adds	r1, #12
 800d7ca:	3202      	adds	r2, #2
 800d7cc:	0092      	lsls	r2, r2, #2
 800d7ce:	300c      	adds	r0, #12
 800d7d0:	f000 ff80 	bl	800e6d4 <memcpy>
 800d7d4:	2201      	movs	r2, #1
 800d7d6:	0021      	movs	r1, r4
 800d7d8:	9803      	ldr	r0, [sp, #12]
 800d7da:	f000 fb63 	bl	800dea4 <__lshift>
 800d7de:	9b08      	ldr	r3, [sp, #32]
 800d7e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d7e2:	9306      	str	r3, [sp, #24]
 800d7e4:	3b01      	subs	r3, #1
 800d7e6:	189b      	adds	r3, r3, r2
 800d7e8:	2201      	movs	r2, #1
 800d7ea:	9704      	str	r7, [sp, #16]
 800d7ec:	0007      	movs	r7, r0
 800d7ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d7f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d7f2:	4013      	ands	r3, r2
 800d7f4:	930e      	str	r3, [sp, #56]	@ 0x38
 800d7f6:	0031      	movs	r1, r6
 800d7f8:	9805      	ldr	r0, [sp, #20]
 800d7fa:	f7ff fa65 	bl	800ccc8 <quorem>
 800d7fe:	9904      	ldr	r1, [sp, #16]
 800d800:	0005      	movs	r5, r0
 800d802:	900a      	str	r0, [sp, #40]	@ 0x28
 800d804:	9805      	ldr	r0, [sp, #20]
 800d806:	f000 fbb9 	bl	800df7c <__mcmp>
 800d80a:	003a      	movs	r2, r7
 800d80c:	900d      	str	r0, [sp, #52]	@ 0x34
 800d80e:	0031      	movs	r1, r6
 800d810:	9803      	ldr	r0, [sp, #12]
 800d812:	f000 fbcf 	bl	800dfb4 <__mdiff>
 800d816:	2201      	movs	r2, #1
 800d818:	68c3      	ldr	r3, [r0, #12]
 800d81a:	0004      	movs	r4, r0
 800d81c:	3530      	adds	r5, #48	@ 0x30
 800d81e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d820:	2b00      	cmp	r3, #0
 800d822:	d104      	bne.n	800d82e <_dtoa_r+0xa4a>
 800d824:	0001      	movs	r1, r0
 800d826:	9805      	ldr	r0, [sp, #20]
 800d828:	f000 fba8 	bl	800df7c <__mcmp>
 800d82c:	9009      	str	r0, [sp, #36]	@ 0x24
 800d82e:	0021      	movs	r1, r4
 800d830:	9803      	ldr	r0, [sp, #12]
 800d832:	f000 f959 	bl	800dae8 <_Bfree>
 800d836:	9b06      	ldr	r3, [sp, #24]
 800d838:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d83a:	1c5c      	adds	r4, r3, #1
 800d83c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d83e:	4313      	orrs	r3, r2
 800d840:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d842:	4313      	orrs	r3, r2
 800d844:	d116      	bne.n	800d874 <_dtoa_r+0xa90>
 800d846:	2d39      	cmp	r5, #57	@ 0x39
 800d848:	d02f      	beq.n	800d8aa <_dtoa_r+0xac6>
 800d84a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	dd01      	ble.n	800d854 <_dtoa_r+0xa70>
 800d850:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800d852:	3531      	adds	r5, #49	@ 0x31
 800d854:	9b06      	ldr	r3, [sp, #24]
 800d856:	701d      	strb	r5, [r3, #0]
 800d858:	e638      	b.n	800d4cc <_dtoa_r+0x6e8>
 800d85a:	46c0      	nop			@ (mov r8, r8)
 800d85c:	40240000 	.word	0x40240000
 800d860:	00000433 	.word	0x00000433
 800d864:	7ff00000 	.word	0x7ff00000
 800d868:	0801a38a 	.word	0x0801a38a
 800d86c:	0801a332 	.word	0x0801a332
 800d870:	000002ef 	.word	0x000002ef
 800d874:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d876:	2b00      	cmp	r3, #0
 800d878:	db04      	blt.n	800d884 <_dtoa_r+0xaa0>
 800d87a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800d87c:	4313      	orrs	r3, r2
 800d87e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d880:	4313      	orrs	r3, r2
 800d882:	d11e      	bne.n	800d8c2 <_dtoa_r+0xade>
 800d884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d886:	2b00      	cmp	r3, #0
 800d888:	dde4      	ble.n	800d854 <_dtoa_r+0xa70>
 800d88a:	9905      	ldr	r1, [sp, #20]
 800d88c:	2201      	movs	r2, #1
 800d88e:	9803      	ldr	r0, [sp, #12]
 800d890:	f000 fb08 	bl	800dea4 <__lshift>
 800d894:	0031      	movs	r1, r6
 800d896:	9005      	str	r0, [sp, #20]
 800d898:	f000 fb70 	bl	800df7c <__mcmp>
 800d89c:	2800      	cmp	r0, #0
 800d89e:	dc02      	bgt.n	800d8a6 <_dtoa_r+0xac2>
 800d8a0:	d1d8      	bne.n	800d854 <_dtoa_r+0xa70>
 800d8a2:	07eb      	lsls	r3, r5, #31
 800d8a4:	d5d6      	bpl.n	800d854 <_dtoa_r+0xa70>
 800d8a6:	2d39      	cmp	r5, #57	@ 0x39
 800d8a8:	d1d2      	bne.n	800d850 <_dtoa_r+0xa6c>
 800d8aa:	2339      	movs	r3, #57	@ 0x39
 800d8ac:	9a06      	ldr	r2, [sp, #24]
 800d8ae:	7013      	strb	r3, [r2, #0]
 800d8b0:	0023      	movs	r3, r4
 800d8b2:	001c      	movs	r4, r3
 800d8b4:	3b01      	subs	r3, #1
 800d8b6:	781a      	ldrb	r2, [r3, #0]
 800d8b8:	2a39      	cmp	r2, #57	@ 0x39
 800d8ba:	d04f      	beq.n	800d95c <_dtoa_r+0xb78>
 800d8bc:	3201      	adds	r2, #1
 800d8be:	701a      	strb	r2, [r3, #0]
 800d8c0:	e604      	b.n	800d4cc <_dtoa_r+0x6e8>
 800d8c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	dd03      	ble.n	800d8d0 <_dtoa_r+0xaec>
 800d8c8:	2d39      	cmp	r5, #57	@ 0x39
 800d8ca:	d0ee      	beq.n	800d8aa <_dtoa_r+0xac6>
 800d8cc:	3501      	adds	r5, #1
 800d8ce:	e7c1      	b.n	800d854 <_dtoa_r+0xa70>
 800d8d0:	9b06      	ldr	r3, [sp, #24]
 800d8d2:	9a06      	ldr	r2, [sp, #24]
 800d8d4:	701d      	strb	r5, [r3, #0]
 800d8d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8d8:	4293      	cmp	r3, r2
 800d8da:	d02a      	beq.n	800d932 <_dtoa_r+0xb4e>
 800d8dc:	2300      	movs	r3, #0
 800d8de:	220a      	movs	r2, #10
 800d8e0:	9905      	ldr	r1, [sp, #20]
 800d8e2:	9803      	ldr	r0, [sp, #12]
 800d8e4:	f000 f924 	bl	800db30 <__multadd>
 800d8e8:	9b04      	ldr	r3, [sp, #16]
 800d8ea:	9005      	str	r0, [sp, #20]
 800d8ec:	42bb      	cmp	r3, r7
 800d8ee:	d109      	bne.n	800d904 <_dtoa_r+0xb20>
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	220a      	movs	r2, #10
 800d8f4:	9904      	ldr	r1, [sp, #16]
 800d8f6:	9803      	ldr	r0, [sp, #12]
 800d8f8:	f000 f91a 	bl	800db30 <__multadd>
 800d8fc:	9004      	str	r0, [sp, #16]
 800d8fe:	0007      	movs	r7, r0
 800d900:	9406      	str	r4, [sp, #24]
 800d902:	e778      	b.n	800d7f6 <_dtoa_r+0xa12>
 800d904:	9904      	ldr	r1, [sp, #16]
 800d906:	2300      	movs	r3, #0
 800d908:	220a      	movs	r2, #10
 800d90a:	9803      	ldr	r0, [sp, #12]
 800d90c:	f000 f910 	bl	800db30 <__multadd>
 800d910:	2300      	movs	r3, #0
 800d912:	9004      	str	r0, [sp, #16]
 800d914:	220a      	movs	r2, #10
 800d916:	0039      	movs	r1, r7
 800d918:	9803      	ldr	r0, [sp, #12]
 800d91a:	f000 f909 	bl	800db30 <__multadd>
 800d91e:	e7ee      	b.n	800d8fe <_dtoa_r+0xb1a>
 800d920:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d922:	2401      	movs	r4, #1
 800d924:	2b00      	cmp	r3, #0
 800d926:	dd00      	ble.n	800d92a <_dtoa_r+0xb46>
 800d928:	001c      	movs	r4, r3
 800d92a:	9b08      	ldr	r3, [sp, #32]
 800d92c:	191c      	adds	r4, r3, r4
 800d92e:	2300      	movs	r3, #0
 800d930:	9304      	str	r3, [sp, #16]
 800d932:	9905      	ldr	r1, [sp, #20]
 800d934:	2201      	movs	r2, #1
 800d936:	9803      	ldr	r0, [sp, #12]
 800d938:	f000 fab4 	bl	800dea4 <__lshift>
 800d93c:	0031      	movs	r1, r6
 800d93e:	9005      	str	r0, [sp, #20]
 800d940:	f000 fb1c 	bl	800df7c <__mcmp>
 800d944:	2800      	cmp	r0, #0
 800d946:	dcb3      	bgt.n	800d8b0 <_dtoa_r+0xacc>
 800d948:	d101      	bne.n	800d94e <_dtoa_r+0xb6a>
 800d94a:	07ed      	lsls	r5, r5, #31
 800d94c:	d4b0      	bmi.n	800d8b0 <_dtoa_r+0xacc>
 800d94e:	0023      	movs	r3, r4
 800d950:	001c      	movs	r4, r3
 800d952:	3b01      	subs	r3, #1
 800d954:	781a      	ldrb	r2, [r3, #0]
 800d956:	2a30      	cmp	r2, #48	@ 0x30
 800d958:	d0fa      	beq.n	800d950 <_dtoa_r+0xb6c>
 800d95a:	e5b7      	b.n	800d4cc <_dtoa_r+0x6e8>
 800d95c:	9a08      	ldr	r2, [sp, #32]
 800d95e:	429a      	cmp	r2, r3
 800d960:	d1a7      	bne.n	800d8b2 <_dtoa_r+0xace>
 800d962:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d964:	3301      	adds	r3, #1
 800d966:	930c      	str	r3, [sp, #48]	@ 0x30
 800d968:	2331      	movs	r3, #49	@ 0x31
 800d96a:	7013      	strb	r3, [r2, #0]
 800d96c:	e5ae      	b.n	800d4cc <_dtoa_r+0x6e8>
 800d96e:	4b15      	ldr	r3, [pc, #84]	@ (800d9c4 <_dtoa_r+0xbe0>)
 800d970:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800d972:	9308      	str	r3, [sp, #32]
 800d974:	4b14      	ldr	r3, [pc, #80]	@ (800d9c8 <_dtoa_r+0xbe4>)
 800d976:	2a00      	cmp	r2, #0
 800d978:	d001      	beq.n	800d97e <_dtoa_r+0xb9a>
 800d97a:	f7ff fa7b 	bl	800ce74 <_dtoa_r+0x90>
 800d97e:	f7ff fa7b 	bl	800ce78 <_dtoa_r+0x94>
 800d982:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d984:	2b01      	cmp	r3, #1
 800d986:	dc00      	bgt.n	800d98a <_dtoa_r+0xba6>
 800d988:	e648      	b.n	800d61c <_dtoa_r+0x838>
 800d98a:	2001      	movs	r0, #1
 800d98c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800d98e:	e665      	b.n	800d65c <_dtoa_r+0x878>
 800d990:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d992:	2b00      	cmp	r3, #0
 800d994:	dc00      	bgt.n	800d998 <_dtoa_r+0xbb4>
 800d996:	e6d6      	b.n	800d746 <_dtoa_r+0x962>
 800d998:	2400      	movs	r4, #0
 800d99a:	0031      	movs	r1, r6
 800d99c:	9805      	ldr	r0, [sp, #20]
 800d99e:	f7ff f993 	bl	800ccc8 <quorem>
 800d9a2:	9b08      	ldr	r3, [sp, #32]
 800d9a4:	3030      	adds	r0, #48	@ 0x30
 800d9a6:	5518      	strb	r0, [r3, r4]
 800d9a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9aa:	3401      	adds	r4, #1
 800d9ac:	0005      	movs	r5, r0
 800d9ae:	429c      	cmp	r4, r3
 800d9b0:	dab6      	bge.n	800d920 <_dtoa_r+0xb3c>
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	220a      	movs	r2, #10
 800d9b6:	9905      	ldr	r1, [sp, #20]
 800d9b8:	9803      	ldr	r0, [sp, #12]
 800d9ba:	f000 f8b9 	bl	800db30 <__multadd>
 800d9be:	9005      	str	r0, [sp, #20]
 800d9c0:	e7eb      	b.n	800d99a <_dtoa_r+0xbb6>
 800d9c2:	46c0      	nop			@ (mov r8, r8)
 800d9c4:	0801a30e 	.word	0x0801a30e
 800d9c8:	0801a316 	.word	0x0801a316

0800d9cc <_free_r>:
 800d9cc:	b570      	push	{r4, r5, r6, lr}
 800d9ce:	0005      	movs	r5, r0
 800d9d0:	1e0c      	subs	r4, r1, #0
 800d9d2:	d010      	beq.n	800d9f6 <_free_r+0x2a>
 800d9d4:	3c04      	subs	r4, #4
 800d9d6:	6823      	ldr	r3, [r4, #0]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	da00      	bge.n	800d9de <_free_r+0x12>
 800d9dc:	18e4      	adds	r4, r4, r3
 800d9de:	0028      	movs	r0, r5
 800d9e0:	f7fe fb26 	bl	800c030 <__malloc_lock>
 800d9e4:	4a1d      	ldr	r2, [pc, #116]	@ (800da5c <_free_r+0x90>)
 800d9e6:	6813      	ldr	r3, [r2, #0]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d105      	bne.n	800d9f8 <_free_r+0x2c>
 800d9ec:	6063      	str	r3, [r4, #4]
 800d9ee:	6014      	str	r4, [r2, #0]
 800d9f0:	0028      	movs	r0, r5
 800d9f2:	f7fe fb25 	bl	800c040 <__malloc_unlock>
 800d9f6:	bd70      	pop	{r4, r5, r6, pc}
 800d9f8:	42a3      	cmp	r3, r4
 800d9fa:	d908      	bls.n	800da0e <_free_r+0x42>
 800d9fc:	6820      	ldr	r0, [r4, #0]
 800d9fe:	1821      	adds	r1, r4, r0
 800da00:	428b      	cmp	r3, r1
 800da02:	d1f3      	bne.n	800d9ec <_free_r+0x20>
 800da04:	6819      	ldr	r1, [r3, #0]
 800da06:	685b      	ldr	r3, [r3, #4]
 800da08:	1809      	adds	r1, r1, r0
 800da0a:	6021      	str	r1, [r4, #0]
 800da0c:	e7ee      	b.n	800d9ec <_free_r+0x20>
 800da0e:	001a      	movs	r2, r3
 800da10:	685b      	ldr	r3, [r3, #4]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d001      	beq.n	800da1a <_free_r+0x4e>
 800da16:	42a3      	cmp	r3, r4
 800da18:	d9f9      	bls.n	800da0e <_free_r+0x42>
 800da1a:	6811      	ldr	r1, [r2, #0]
 800da1c:	1850      	adds	r0, r2, r1
 800da1e:	42a0      	cmp	r0, r4
 800da20:	d10b      	bne.n	800da3a <_free_r+0x6e>
 800da22:	6820      	ldr	r0, [r4, #0]
 800da24:	1809      	adds	r1, r1, r0
 800da26:	1850      	adds	r0, r2, r1
 800da28:	6011      	str	r1, [r2, #0]
 800da2a:	4283      	cmp	r3, r0
 800da2c:	d1e0      	bne.n	800d9f0 <_free_r+0x24>
 800da2e:	6818      	ldr	r0, [r3, #0]
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	1841      	adds	r1, r0, r1
 800da34:	6011      	str	r1, [r2, #0]
 800da36:	6053      	str	r3, [r2, #4]
 800da38:	e7da      	b.n	800d9f0 <_free_r+0x24>
 800da3a:	42a0      	cmp	r0, r4
 800da3c:	d902      	bls.n	800da44 <_free_r+0x78>
 800da3e:	230c      	movs	r3, #12
 800da40:	602b      	str	r3, [r5, #0]
 800da42:	e7d5      	b.n	800d9f0 <_free_r+0x24>
 800da44:	6820      	ldr	r0, [r4, #0]
 800da46:	1821      	adds	r1, r4, r0
 800da48:	428b      	cmp	r3, r1
 800da4a:	d103      	bne.n	800da54 <_free_r+0x88>
 800da4c:	6819      	ldr	r1, [r3, #0]
 800da4e:	685b      	ldr	r3, [r3, #4]
 800da50:	1809      	adds	r1, r1, r0
 800da52:	6021      	str	r1, [r4, #0]
 800da54:	6063      	str	r3, [r4, #4]
 800da56:	6054      	str	r4, [r2, #4]
 800da58:	e7ca      	b.n	800d9f0 <_free_r+0x24>
 800da5a:	46c0      	nop			@ (mov r8, r8)
 800da5c:	200005ac 	.word	0x200005ac

0800da60 <_Balloc>:
 800da60:	b570      	push	{r4, r5, r6, lr}
 800da62:	69c5      	ldr	r5, [r0, #28]
 800da64:	0006      	movs	r6, r0
 800da66:	000c      	movs	r4, r1
 800da68:	2d00      	cmp	r5, #0
 800da6a:	d10e      	bne.n	800da8a <_Balloc+0x2a>
 800da6c:	2010      	movs	r0, #16
 800da6e:	f7fe fa33 	bl	800bed8 <malloc>
 800da72:	1e02      	subs	r2, r0, #0
 800da74:	61f0      	str	r0, [r6, #28]
 800da76:	d104      	bne.n	800da82 <_Balloc+0x22>
 800da78:	216b      	movs	r1, #107	@ 0x6b
 800da7a:	4b19      	ldr	r3, [pc, #100]	@ (800dae0 <_Balloc+0x80>)
 800da7c:	4819      	ldr	r0, [pc, #100]	@ (800dae4 <_Balloc+0x84>)
 800da7e:	f000 fe33 	bl	800e6e8 <__assert_func>
 800da82:	6045      	str	r5, [r0, #4]
 800da84:	6085      	str	r5, [r0, #8]
 800da86:	6005      	str	r5, [r0, #0]
 800da88:	60c5      	str	r5, [r0, #12]
 800da8a:	69f5      	ldr	r5, [r6, #28]
 800da8c:	68eb      	ldr	r3, [r5, #12]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d013      	beq.n	800daba <_Balloc+0x5a>
 800da92:	69f3      	ldr	r3, [r6, #28]
 800da94:	00a2      	lsls	r2, r4, #2
 800da96:	68db      	ldr	r3, [r3, #12]
 800da98:	189b      	adds	r3, r3, r2
 800da9a:	6818      	ldr	r0, [r3, #0]
 800da9c:	2800      	cmp	r0, #0
 800da9e:	d118      	bne.n	800dad2 <_Balloc+0x72>
 800daa0:	2101      	movs	r1, #1
 800daa2:	000d      	movs	r5, r1
 800daa4:	40a5      	lsls	r5, r4
 800daa6:	1d6a      	adds	r2, r5, #5
 800daa8:	0030      	movs	r0, r6
 800daaa:	0092      	lsls	r2, r2, #2
 800daac:	f000 fe3a 	bl	800e724 <_calloc_r>
 800dab0:	2800      	cmp	r0, #0
 800dab2:	d00c      	beq.n	800dace <_Balloc+0x6e>
 800dab4:	6044      	str	r4, [r0, #4]
 800dab6:	6085      	str	r5, [r0, #8]
 800dab8:	e00d      	b.n	800dad6 <_Balloc+0x76>
 800daba:	2221      	movs	r2, #33	@ 0x21
 800dabc:	2104      	movs	r1, #4
 800dabe:	0030      	movs	r0, r6
 800dac0:	f000 fe30 	bl	800e724 <_calloc_r>
 800dac4:	69f3      	ldr	r3, [r6, #28]
 800dac6:	60e8      	str	r0, [r5, #12]
 800dac8:	68db      	ldr	r3, [r3, #12]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d1e1      	bne.n	800da92 <_Balloc+0x32>
 800dace:	2000      	movs	r0, #0
 800dad0:	bd70      	pop	{r4, r5, r6, pc}
 800dad2:	6802      	ldr	r2, [r0, #0]
 800dad4:	601a      	str	r2, [r3, #0]
 800dad6:	2300      	movs	r3, #0
 800dad8:	6103      	str	r3, [r0, #16]
 800dada:	60c3      	str	r3, [r0, #12]
 800dadc:	e7f8      	b.n	800dad0 <_Balloc+0x70>
 800dade:	46c0      	nop			@ (mov r8, r8)
 800dae0:	0801a31b 	.word	0x0801a31b
 800dae4:	0801a39b 	.word	0x0801a39b

0800dae8 <_Bfree>:
 800dae8:	b570      	push	{r4, r5, r6, lr}
 800daea:	69c6      	ldr	r6, [r0, #28]
 800daec:	0005      	movs	r5, r0
 800daee:	000c      	movs	r4, r1
 800daf0:	2e00      	cmp	r6, #0
 800daf2:	d10e      	bne.n	800db12 <_Bfree+0x2a>
 800daf4:	2010      	movs	r0, #16
 800daf6:	f7fe f9ef 	bl	800bed8 <malloc>
 800dafa:	1e02      	subs	r2, r0, #0
 800dafc:	61e8      	str	r0, [r5, #28]
 800dafe:	d104      	bne.n	800db0a <_Bfree+0x22>
 800db00:	218f      	movs	r1, #143	@ 0x8f
 800db02:	4b09      	ldr	r3, [pc, #36]	@ (800db28 <_Bfree+0x40>)
 800db04:	4809      	ldr	r0, [pc, #36]	@ (800db2c <_Bfree+0x44>)
 800db06:	f000 fdef 	bl	800e6e8 <__assert_func>
 800db0a:	6046      	str	r6, [r0, #4]
 800db0c:	6086      	str	r6, [r0, #8]
 800db0e:	6006      	str	r6, [r0, #0]
 800db10:	60c6      	str	r6, [r0, #12]
 800db12:	2c00      	cmp	r4, #0
 800db14:	d007      	beq.n	800db26 <_Bfree+0x3e>
 800db16:	69eb      	ldr	r3, [r5, #28]
 800db18:	6862      	ldr	r2, [r4, #4]
 800db1a:	68db      	ldr	r3, [r3, #12]
 800db1c:	0092      	lsls	r2, r2, #2
 800db1e:	189b      	adds	r3, r3, r2
 800db20:	681a      	ldr	r2, [r3, #0]
 800db22:	6022      	str	r2, [r4, #0]
 800db24:	601c      	str	r4, [r3, #0]
 800db26:	bd70      	pop	{r4, r5, r6, pc}
 800db28:	0801a31b 	.word	0x0801a31b
 800db2c:	0801a39b 	.word	0x0801a39b

0800db30 <__multadd>:
 800db30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db32:	000f      	movs	r7, r1
 800db34:	9001      	str	r0, [sp, #4]
 800db36:	000c      	movs	r4, r1
 800db38:	001e      	movs	r6, r3
 800db3a:	2000      	movs	r0, #0
 800db3c:	690d      	ldr	r5, [r1, #16]
 800db3e:	3714      	adds	r7, #20
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	3001      	adds	r0, #1
 800db44:	b299      	uxth	r1, r3
 800db46:	4351      	muls	r1, r2
 800db48:	0c1b      	lsrs	r3, r3, #16
 800db4a:	4353      	muls	r3, r2
 800db4c:	1989      	adds	r1, r1, r6
 800db4e:	0c0e      	lsrs	r6, r1, #16
 800db50:	199b      	adds	r3, r3, r6
 800db52:	0c1e      	lsrs	r6, r3, #16
 800db54:	b289      	uxth	r1, r1
 800db56:	041b      	lsls	r3, r3, #16
 800db58:	185b      	adds	r3, r3, r1
 800db5a:	c708      	stmia	r7!, {r3}
 800db5c:	4285      	cmp	r5, r0
 800db5e:	dcef      	bgt.n	800db40 <__multadd+0x10>
 800db60:	2e00      	cmp	r6, #0
 800db62:	d022      	beq.n	800dbaa <__multadd+0x7a>
 800db64:	68a3      	ldr	r3, [r4, #8]
 800db66:	42ab      	cmp	r3, r5
 800db68:	dc19      	bgt.n	800db9e <__multadd+0x6e>
 800db6a:	6861      	ldr	r1, [r4, #4]
 800db6c:	9801      	ldr	r0, [sp, #4]
 800db6e:	3101      	adds	r1, #1
 800db70:	f7ff ff76 	bl	800da60 <_Balloc>
 800db74:	1e07      	subs	r7, r0, #0
 800db76:	d105      	bne.n	800db84 <__multadd+0x54>
 800db78:	003a      	movs	r2, r7
 800db7a:	21ba      	movs	r1, #186	@ 0xba
 800db7c:	4b0c      	ldr	r3, [pc, #48]	@ (800dbb0 <__multadd+0x80>)
 800db7e:	480d      	ldr	r0, [pc, #52]	@ (800dbb4 <__multadd+0x84>)
 800db80:	f000 fdb2 	bl	800e6e8 <__assert_func>
 800db84:	0021      	movs	r1, r4
 800db86:	6922      	ldr	r2, [r4, #16]
 800db88:	310c      	adds	r1, #12
 800db8a:	3202      	adds	r2, #2
 800db8c:	0092      	lsls	r2, r2, #2
 800db8e:	300c      	adds	r0, #12
 800db90:	f000 fda0 	bl	800e6d4 <memcpy>
 800db94:	0021      	movs	r1, r4
 800db96:	9801      	ldr	r0, [sp, #4]
 800db98:	f7ff ffa6 	bl	800dae8 <_Bfree>
 800db9c:	003c      	movs	r4, r7
 800db9e:	1d2b      	adds	r3, r5, #4
 800dba0:	009b      	lsls	r3, r3, #2
 800dba2:	18e3      	adds	r3, r4, r3
 800dba4:	3501      	adds	r5, #1
 800dba6:	605e      	str	r6, [r3, #4]
 800dba8:	6125      	str	r5, [r4, #16]
 800dbaa:	0020      	movs	r0, r4
 800dbac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dbae:	46c0      	nop			@ (mov r8, r8)
 800dbb0:	0801a38a 	.word	0x0801a38a
 800dbb4:	0801a39b 	.word	0x0801a39b

0800dbb8 <__hi0bits>:
 800dbb8:	2280      	movs	r2, #128	@ 0x80
 800dbba:	0003      	movs	r3, r0
 800dbbc:	0252      	lsls	r2, r2, #9
 800dbbe:	2000      	movs	r0, #0
 800dbc0:	4293      	cmp	r3, r2
 800dbc2:	d201      	bcs.n	800dbc8 <__hi0bits+0x10>
 800dbc4:	041b      	lsls	r3, r3, #16
 800dbc6:	3010      	adds	r0, #16
 800dbc8:	2280      	movs	r2, #128	@ 0x80
 800dbca:	0452      	lsls	r2, r2, #17
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	d201      	bcs.n	800dbd4 <__hi0bits+0x1c>
 800dbd0:	3008      	adds	r0, #8
 800dbd2:	021b      	lsls	r3, r3, #8
 800dbd4:	2280      	movs	r2, #128	@ 0x80
 800dbd6:	0552      	lsls	r2, r2, #21
 800dbd8:	4293      	cmp	r3, r2
 800dbda:	d201      	bcs.n	800dbe0 <__hi0bits+0x28>
 800dbdc:	3004      	adds	r0, #4
 800dbde:	011b      	lsls	r3, r3, #4
 800dbe0:	2280      	movs	r2, #128	@ 0x80
 800dbe2:	05d2      	lsls	r2, r2, #23
 800dbe4:	4293      	cmp	r3, r2
 800dbe6:	d201      	bcs.n	800dbec <__hi0bits+0x34>
 800dbe8:	3002      	adds	r0, #2
 800dbea:	009b      	lsls	r3, r3, #2
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	db03      	blt.n	800dbf8 <__hi0bits+0x40>
 800dbf0:	3001      	adds	r0, #1
 800dbf2:	4213      	tst	r3, r2
 800dbf4:	d100      	bne.n	800dbf8 <__hi0bits+0x40>
 800dbf6:	2020      	movs	r0, #32
 800dbf8:	4770      	bx	lr

0800dbfa <__lo0bits>:
 800dbfa:	6803      	ldr	r3, [r0, #0]
 800dbfc:	0001      	movs	r1, r0
 800dbfe:	2207      	movs	r2, #7
 800dc00:	0018      	movs	r0, r3
 800dc02:	4010      	ands	r0, r2
 800dc04:	4213      	tst	r3, r2
 800dc06:	d00d      	beq.n	800dc24 <__lo0bits+0x2a>
 800dc08:	3a06      	subs	r2, #6
 800dc0a:	2000      	movs	r0, #0
 800dc0c:	4213      	tst	r3, r2
 800dc0e:	d105      	bne.n	800dc1c <__lo0bits+0x22>
 800dc10:	3002      	adds	r0, #2
 800dc12:	4203      	tst	r3, r0
 800dc14:	d003      	beq.n	800dc1e <__lo0bits+0x24>
 800dc16:	40d3      	lsrs	r3, r2
 800dc18:	0010      	movs	r0, r2
 800dc1a:	600b      	str	r3, [r1, #0]
 800dc1c:	4770      	bx	lr
 800dc1e:	089b      	lsrs	r3, r3, #2
 800dc20:	600b      	str	r3, [r1, #0]
 800dc22:	e7fb      	b.n	800dc1c <__lo0bits+0x22>
 800dc24:	b29a      	uxth	r2, r3
 800dc26:	2a00      	cmp	r2, #0
 800dc28:	d101      	bne.n	800dc2e <__lo0bits+0x34>
 800dc2a:	2010      	movs	r0, #16
 800dc2c:	0c1b      	lsrs	r3, r3, #16
 800dc2e:	b2da      	uxtb	r2, r3
 800dc30:	2a00      	cmp	r2, #0
 800dc32:	d101      	bne.n	800dc38 <__lo0bits+0x3e>
 800dc34:	3008      	adds	r0, #8
 800dc36:	0a1b      	lsrs	r3, r3, #8
 800dc38:	071a      	lsls	r2, r3, #28
 800dc3a:	d101      	bne.n	800dc40 <__lo0bits+0x46>
 800dc3c:	3004      	adds	r0, #4
 800dc3e:	091b      	lsrs	r3, r3, #4
 800dc40:	079a      	lsls	r2, r3, #30
 800dc42:	d101      	bne.n	800dc48 <__lo0bits+0x4e>
 800dc44:	3002      	adds	r0, #2
 800dc46:	089b      	lsrs	r3, r3, #2
 800dc48:	07da      	lsls	r2, r3, #31
 800dc4a:	d4e9      	bmi.n	800dc20 <__lo0bits+0x26>
 800dc4c:	3001      	adds	r0, #1
 800dc4e:	085b      	lsrs	r3, r3, #1
 800dc50:	d1e6      	bne.n	800dc20 <__lo0bits+0x26>
 800dc52:	2020      	movs	r0, #32
 800dc54:	e7e2      	b.n	800dc1c <__lo0bits+0x22>
	...

0800dc58 <__i2b>:
 800dc58:	b510      	push	{r4, lr}
 800dc5a:	000c      	movs	r4, r1
 800dc5c:	2101      	movs	r1, #1
 800dc5e:	f7ff feff 	bl	800da60 <_Balloc>
 800dc62:	2800      	cmp	r0, #0
 800dc64:	d107      	bne.n	800dc76 <__i2b+0x1e>
 800dc66:	2146      	movs	r1, #70	@ 0x46
 800dc68:	4c05      	ldr	r4, [pc, #20]	@ (800dc80 <__i2b+0x28>)
 800dc6a:	0002      	movs	r2, r0
 800dc6c:	4b05      	ldr	r3, [pc, #20]	@ (800dc84 <__i2b+0x2c>)
 800dc6e:	0020      	movs	r0, r4
 800dc70:	31ff      	adds	r1, #255	@ 0xff
 800dc72:	f000 fd39 	bl	800e6e8 <__assert_func>
 800dc76:	2301      	movs	r3, #1
 800dc78:	6144      	str	r4, [r0, #20]
 800dc7a:	6103      	str	r3, [r0, #16]
 800dc7c:	bd10      	pop	{r4, pc}
 800dc7e:	46c0      	nop			@ (mov r8, r8)
 800dc80:	0801a39b 	.word	0x0801a39b
 800dc84:	0801a38a 	.word	0x0801a38a

0800dc88 <__multiply>:
 800dc88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc8a:	0014      	movs	r4, r2
 800dc8c:	690a      	ldr	r2, [r1, #16]
 800dc8e:	6923      	ldr	r3, [r4, #16]
 800dc90:	000d      	movs	r5, r1
 800dc92:	b08b      	sub	sp, #44	@ 0x2c
 800dc94:	429a      	cmp	r2, r3
 800dc96:	db02      	blt.n	800dc9e <__multiply+0x16>
 800dc98:	0023      	movs	r3, r4
 800dc9a:	000c      	movs	r4, r1
 800dc9c:	001d      	movs	r5, r3
 800dc9e:	6927      	ldr	r7, [r4, #16]
 800dca0:	692e      	ldr	r6, [r5, #16]
 800dca2:	6861      	ldr	r1, [r4, #4]
 800dca4:	19bb      	adds	r3, r7, r6
 800dca6:	9303      	str	r3, [sp, #12]
 800dca8:	68a3      	ldr	r3, [r4, #8]
 800dcaa:	19ba      	adds	r2, r7, r6
 800dcac:	4293      	cmp	r3, r2
 800dcae:	da00      	bge.n	800dcb2 <__multiply+0x2a>
 800dcb0:	3101      	adds	r1, #1
 800dcb2:	f7ff fed5 	bl	800da60 <_Balloc>
 800dcb6:	9002      	str	r0, [sp, #8]
 800dcb8:	2800      	cmp	r0, #0
 800dcba:	d106      	bne.n	800dcca <__multiply+0x42>
 800dcbc:	21b1      	movs	r1, #177	@ 0xb1
 800dcbe:	4b49      	ldr	r3, [pc, #292]	@ (800dde4 <__multiply+0x15c>)
 800dcc0:	4849      	ldr	r0, [pc, #292]	@ (800dde8 <__multiply+0x160>)
 800dcc2:	9a02      	ldr	r2, [sp, #8]
 800dcc4:	0049      	lsls	r1, r1, #1
 800dcc6:	f000 fd0f 	bl	800e6e8 <__assert_func>
 800dcca:	9b02      	ldr	r3, [sp, #8]
 800dccc:	2200      	movs	r2, #0
 800dcce:	3314      	adds	r3, #20
 800dcd0:	469c      	mov	ip, r3
 800dcd2:	19bb      	adds	r3, r7, r6
 800dcd4:	009b      	lsls	r3, r3, #2
 800dcd6:	4463      	add	r3, ip
 800dcd8:	9304      	str	r3, [sp, #16]
 800dcda:	4663      	mov	r3, ip
 800dcdc:	9904      	ldr	r1, [sp, #16]
 800dcde:	428b      	cmp	r3, r1
 800dce0:	d32a      	bcc.n	800dd38 <__multiply+0xb0>
 800dce2:	0023      	movs	r3, r4
 800dce4:	00bf      	lsls	r7, r7, #2
 800dce6:	3314      	adds	r3, #20
 800dce8:	3514      	adds	r5, #20
 800dcea:	9308      	str	r3, [sp, #32]
 800dcec:	00b6      	lsls	r6, r6, #2
 800dcee:	19db      	adds	r3, r3, r7
 800dcf0:	9305      	str	r3, [sp, #20]
 800dcf2:	19ab      	adds	r3, r5, r6
 800dcf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dcf6:	2304      	movs	r3, #4
 800dcf8:	9306      	str	r3, [sp, #24]
 800dcfa:	0023      	movs	r3, r4
 800dcfc:	9a05      	ldr	r2, [sp, #20]
 800dcfe:	3315      	adds	r3, #21
 800dd00:	9501      	str	r5, [sp, #4]
 800dd02:	429a      	cmp	r2, r3
 800dd04:	d305      	bcc.n	800dd12 <__multiply+0x8a>
 800dd06:	1b13      	subs	r3, r2, r4
 800dd08:	3b15      	subs	r3, #21
 800dd0a:	089b      	lsrs	r3, r3, #2
 800dd0c:	3301      	adds	r3, #1
 800dd0e:	009b      	lsls	r3, r3, #2
 800dd10:	9306      	str	r3, [sp, #24]
 800dd12:	9b01      	ldr	r3, [sp, #4]
 800dd14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd16:	4293      	cmp	r3, r2
 800dd18:	d310      	bcc.n	800dd3c <__multiply+0xb4>
 800dd1a:	9b03      	ldr	r3, [sp, #12]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	dd05      	ble.n	800dd2c <__multiply+0xa4>
 800dd20:	9b04      	ldr	r3, [sp, #16]
 800dd22:	3b04      	subs	r3, #4
 800dd24:	9304      	str	r3, [sp, #16]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d056      	beq.n	800ddda <__multiply+0x152>
 800dd2c:	9b02      	ldr	r3, [sp, #8]
 800dd2e:	9a03      	ldr	r2, [sp, #12]
 800dd30:	0018      	movs	r0, r3
 800dd32:	611a      	str	r2, [r3, #16]
 800dd34:	b00b      	add	sp, #44	@ 0x2c
 800dd36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd38:	c304      	stmia	r3!, {r2}
 800dd3a:	e7cf      	b.n	800dcdc <__multiply+0x54>
 800dd3c:	9b01      	ldr	r3, [sp, #4]
 800dd3e:	6818      	ldr	r0, [r3, #0]
 800dd40:	b280      	uxth	r0, r0
 800dd42:	2800      	cmp	r0, #0
 800dd44:	d01e      	beq.n	800dd84 <__multiply+0xfc>
 800dd46:	4667      	mov	r7, ip
 800dd48:	2500      	movs	r5, #0
 800dd4a:	9e08      	ldr	r6, [sp, #32]
 800dd4c:	ce02      	ldmia	r6!, {r1}
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	9307      	str	r3, [sp, #28]
 800dd52:	b28b      	uxth	r3, r1
 800dd54:	4343      	muls	r3, r0
 800dd56:	001a      	movs	r2, r3
 800dd58:	466b      	mov	r3, sp
 800dd5a:	0c09      	lsrs	r1, r1, #16
 800dd5c:	8b9b      	ldrh	r3, [r3, #28]
 800dd5e:	4341      	muls	r1, r0
 800dd60:	18d3      	adds	r3, r2, r3
 800dd62:	9a07      	ldr	r2, [sp, #28]
 800dd64:	195b      	adds	r3, r3, r5
 800dd66:	0c12      	lsrs	r2, r2, #16
 800dd68:	1889      	adds	r1, r1, r2
 800dd6a:	0c1a      	lsrs	r2, r3, #16
 800dd6c:	188a      	adds	r2, r1, r2
 800dd6e:	b29b      	uxth	r3, r3
 800dd70:	0c15      	lsrs	r5, r2, #16
 800dd72:	0412      	lsls	r2, r2, #16
 800dd74:	431a      	orrs	r2, r3
 800dd76:	9b05      	ldr	r3, [sp, #20]
 800dd78:	c704      	stmia	r7!, {r2}
 800dd7a:	42b3      	cmp	r3, r6
 800dd7c:	d8e6      	bhi.n	800dd4c <__multiply+0xc4>
 800dd7e:	4663      	mov	r3, ip
 800dd80:	9a06      	ldr	r2, [sp, #24]
 800dd82:	509d      	str	r5, [r3, r2]
 800dd84:	9b01      	ldr	r3, [sp, #4]
 800dd86:	6818      	ldr	r0, [r3, #0]
 800dd88:	0c00      	lsrs	r0, r0, #16
 800dd8a:	d020      	beq.n	800ddce <__multiply+0x146>
 800dd8c:	4663      	mov	r3, ip
 800dd8e:	0025      	movs	r5, r4
 800dd90:	4661      	mov	r1, ip
 800dd92:	2700      	movs	r7, #0
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	3514      	adds	r5, #20
 800dd98:	682a      	ldr	r2, [r5, #0]
 800dd9a:	680e      	ldr	r6, [r1, #0]
 800dd9c:	b292      	uxth	r2, r2
 800dd9e:	4342      	muls	r2, r0
 800dda0:	0c36      	lsrs	r6, r6, #16
 800dda2:	1992      	adds	r2, r2, r6
 800dda4:	19d2      	adds	r2, r2, r7
 800dda6:	0416      	lsls	r6, r2, #16
 800dda8:	b29b      	uxth	r3, r3
 800ddaa:	431e      	orrs	r6, r3
 800ddac:	600e      	str	r6, [r1, #0]
 800ddae:	cd40      	ldmia	r5!, {r6}
 800ddb0:	684b      	ldr	r3, [r1, #4]
 800ddb2:	0c36      	lsrs	r6, r6, #16
 800ddb4:	4346      	muls	r6, r0
 800ddb6:	b29b      	uxth	r3, r3
 800ddb8:	0c12      	lsrs	r2, r2, #16
 800ddba:	18f3      	adds	r3, r6, r3
 800ddbc:	189b      	adds	r3, r3, r2
 800ddbe:	9a05      	ldr	r2, [sp, #20]
 800ddc0:	0c1f      	lsrs	r7, r3, #16
 800ddc2:	3104      	adds	r1, #4
 800ddc4:	42aa      	cmp	r2, r5
 800ddc6:	d8e7      	bhi.n	800dd98 <__multiply+0x110>
 800ddc8:	4662      	mov	r2, ip
 800ddca:	9906      	ldr	r1, [sp, #24]
 800ddcc:	5053      	str	r3, [r2, r1]
 800ddce:	9b01      	ldr	r3, [sp, #4]
 800ddd0:	3304      	adds	r3, #4
 800ddd2:	9301      	str	r3, [sp, #4]
 800ddd4:	2304      	movs	r3, #4
 800ddd6:	449c      	add	ip, r3
 800ddd8:	e79b      	b.n	800dd12 <__multiply+0x8a>
 800ddda:	9b03      	ldr	r3, [sp, #12]
 800dddc:	3b01      	subs	r3, #1
 800ddde:	9303      	str	r3, [sp, #12]
 800dde0:	e79b      	b.n	800dd1a <__multiply+0x92>
 800dde2:	46c0      	nop			@ (mov r8, r8)
 800dde4:	0801a38a 	.word	0x0801a38a
 800dde8:	0801a39b 	.word	0x0801a39b

0800ddec <__pow5mult>:
 800ddec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ddee:	2303      	movs	r3, #3
 800ddf0:	0015      	movs	r5, r2
 800ddf2:	0007      	movs	r7, r0
 800ddf4:	000e      	movs	r6, r1
 800ddf6:	401a      	ands	r2, r3
 800ddf8:	421d      	tst	r5, r3
 800ddfa:	d008      	beq.n	800de0e <__pow5mult+0x22>
 800ddfc:	4925      	ldr	r1, [pc, #148]	@ (800de94 <__pow5mult+0xa8>)
 800ddfe:	3a01      	subs	r2, #1
 800de00:	0092      	lsls	r2, r2, #2
 800de02:	5852      	ldr	r2, [r2, r1]
 800de04:	2300      	movs	r3, #0
 800de06:	0031      	movs	r1, r6
 800de08:	f7ff fe92 	bl	800db30 <__multadd>
 800de0c:	0006      	movs	r6, r0
 800de0e:	10ad      	asrs	r5, r5, #2
 800de10:	d03d      	beq.n	800de8e <__pow5mult+0xa2>
 800de12:	69fc      	ldr	r4, [r7, #28]
 800de14:	2c00      	cmp	r4, #0
 800de16:	d10f      	bne.n	800de38 <__pow5mult+0x4c>
 800de18:	2010      	movs	r0, #16
 800de1a:	f7fe f85d 	bl	800bed8 <malloc>
 800de1e:	1e02      	subs	r2, r0, #0
 800de20:	61f8      	str	r0, [r7, #28]
 800de22:	d105      	bne.n	800de30 <__pow5mult+0x44>
 800de24:	21b4      	movs	r1, #180	@ 0xb4
 800de26:	4b1c      	ldr	r3, [pc, #112]	@ (800de98 <__pow5mult+0xac>)
 800de28:	481c      	ldr	r0, [pc, #112]	@ (800de9c <__pow5mult+0xb0>)
 800de2a:	31ff      	adds	r1, #255	@ 0xff
 800de2c:	f000 fc5c 	bl	800e6e8 <__assert_func>
 800de30:	6044      	str	r4, [r0, #4]
 800de32:	6084      	str	r4, [r0, #8]
 800de34:	6004      	str	r4, [r0, #0]
 800de36:	60c4      	str	r4, [r0, #12]
 800de38:	69fb      	ldr	r3, [r7, #28]
 800de3a:	689c      	ldr	r4, [r3, #8]
 800de3c:	9301      	str	r3, [sp, #4]
 800de3e:	2c00      	cmp	r4, #0
 800de40:	d108      	bne.n	800de54 <__pow5mult+0x68>
 800de42:	0038      	movs	r0, r7
 800de44:	4916      	ldr	r1, [pc, #88]	@ (800dea0 <__pow5mult+0xb4>)
 800de46:	f7ff ff07 	bl	800dc58 <__i2b>
 800de4a:	9b01      	ldr	r3, [sp, #4]
 800de4c:	0004      	movs	r4, r0
 800de4e:	6098      	str	r0, [r3, #8]
 800de50:	2300      	movs	r3, #0
 800de52:	6003      	str	r3, [r0, #0]
 800de54:	2301      	movs	r3, #1
 800de56:	421d      	tst	r5, r3
 800de58:	d00a      	beq.n	800de70 <__pow5mult+0x84>
 800de5a:	0031      	movs	r1, r6
 800de5c:	0022      	movs	r2, r4
 800de5e:	0038      	movs	r0, r7
 800de60:	f7ff ff12 	bl	800dc88 <__multiply>
 800de64:	0031      	movs	r1, r6
 800de66:	9001      	str	r0, [sp, #4]
 800de68:	0038      	movs	r0, r7
 800de6a:	f7ff fe3d 	bl	800dae8 <_Bfree>
 800de6e:	9e01      	ldr	r6, [sp, #4]
 800de70:	106d      	asrs	r5, r5, #1
 800de72:	d00c      	beq.n	800de8e <__pow5mult+0xa2>
 800de74:	6820      	ldr	r0, [r4, #0]
 800de76:	2800      	cmp	r0, #0
 800de78:	d107      	bne.n	800de8a <__pow5mult+0x9e>
 800de7a:	0022      	movs	r2, r4
 800de7c:	0021      	movs	r1, r4
 800de7e:	0038      	movs	r0, r7
 800de80:	f7ff ff02 	bl	800dc88 <__multiply>
 800de84:	2300      	movs	r3, #0
 800de86:	6020      	str	r0, [r4, #0]
 800de88:	6003      	str	r3, [r0, #0]
 800de8a:	0004      	movs	r4, r0
 800de8c:	e7e2      	b.n	800de54 <__pow5mult+0x68>
 800de8e:	0030      	movs	r0, r6
 800de90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800de92:	46c0      	nop			@ (mov r8, r8)
 800de94:	0801a3f4 	.word	0x0801a3f4
 800de98:	0801a31b 	.word	0x0801a31b
 800de9c:	0801a39b 	.word	0x0801a39b
 800dea0:	00000271 	.word	0x00000271

0800dea4 <__lshift>:
 800dea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dea6:	000c      	movs	r4, r1
 800dea8:	0016      	movs	r6, r2
 800deaa:	6923      	ldr	r3, [r4, #16]
 800deac:	1157      	asrs	r7, r2, #5
 800deae:	b085      	sub	sp, #20
 800deb0:	18fb      	adds	r3, r7, r3
 800deb2:	9301      	str	r3, [sp, #4]
 800deb4:	3301      	adds	r3, #1
 800deb6:	9300      	str	r3, [sp, #0]
 800deb8:	6849      	ldr	r1, [r1, #4]
 800deba:	68a3      	ldr	r3, [r4, #8]
 800debc:	9002      	str	r0, [sp, #8]
 800debe:	9a00      	ldr	r2, [sp, #0]
 800dec0:	4293      	cmp	r3, r2
 800dec2:	db10      	blt.n	800dee6 <__lshift+0x42>
 800dec4:	9802      	ldr	r0, [sp, #8]
 800dec6:	f7ff fdcb 	bl	800da60 <_Balloc>
 800deca:	2300      	movs	r3, #0
 800decc:	0001      	movs	r1, r0
 800dece:	0005      	movs	r5, r0
 800ded0:	001a      	movs	r2, r3
 800ded2:	3114      	adds	r1, #20
 800ded4:	4298      	cmp	r0, r3
 800ded6:	d10c      	bne.n	800def2 <__lshift+0x4e>
 800ded8:	21ef      	movs	r1, #239	@ 0xef
 800deda:	002a      	movs	r2, r5
 800dedc:	4b25      	ldr	r3, [pc, #148]	@ (800df74 <__lshift+0xd0>)
 800dede:	4826      	ldr	r0, [pc, #152]	@ (800df78 <__lshift+0xd4>)
 800dee0:	0049      	lsls	r1, r1, #1
 800dee2:	f000 fc01 	bl	800e6e8 <__assert_func>
 800dee6:	3101      	adds	r1, #1
 800dee8:	005b      	lsls	r3, r3, #1
 800deea:	e7e8      	b.n	800debe <__lshift+0x1a>
 800deec:	0098      	lsls	r0, r3, #2
 800deee:	500a      	str	r2, [r1, r0]
 800def0:	3301      	adds	r3, #1
 800def2:	42bb      	cmp	r3, r7
 800def4:	dbfa      	blt.n	800deec <__lshift+0x48>
 800def6:	43fb      	mvns	r3, r7
 800def8:	17db      	asrs	r3, r3, #31
 800defa:	401f      	ands	r7, r3
 800defc:	00bf      	lsls	r7, r7, #2
 800defe:	0023      	movs	r3, r4
 800df00:	201f      	movs	r0, #31
 800df02:	19c9      	adds	r1, r1, r7
 800df04:	0037      	movs	r7, r6
 800df06:	6922      	ldr	r2, [r4, #16]
 800df08:	3314      	adds	r3, #20
 800df0a:	0092      	lsls	r2, r2, #2
 800df0c:	189a      	adds	r2, r3, r2
 800df0e:	4007      	ands	r7, r0
 800df10:	4206      	tst	r6, r0
 800df12:	d029      	beq.n	800df68 <__lshift+0xc4>
 800df14:	3001      	adds	r0, #1
 800df16:	1bc0      	subs	r0, r0, r7
 800df18:	9003      	str	r0, [sp, #12]
 800df1a:	468c      	mov	ip, r1
 800df1c:	2000      	movs	r0, #0
 800df1e:	681e      	ldr	r6, [r3, #0]
 800df20:	40be      	lsls	r6, r7
 800df22:	4306      	orrs	r6, r0
 800df24:	4660      	mov	r0, ip
 800df26:	c040      	stmia	r0!, {r6}
 800df28:	4684      	mov	ip, r0
 800df2a:	9e03      	ldr	r6, [sp, #12]
 800df2c:	cb01      	ldmia	r3!, {r0}
 800df2e:	40f0      	lsrs	r0, r6
 800df30:	429a      	cmp	r2, r3
 800df32:	d8f4      	bhi.n	800df1e <__lshift+0x7a>
 800df34:	0026      	movs	r6, r4
 800df36:	3615      	adds	r6, #21
 800df38:	2304      	movs	r3, #4
 800df3a:	42b2      	cmp	r2, r6
 800df3c:	d304      	bcc.n	800df48 <__lshift+0xa4>
 800df3e:	1b13      	subs	r3, r2, r4
 800df40:	3b15      	subs	r3, #21
 800df42:	089b      	lsrs	r3, r3, #2
 800df44:	3301      	adds	r3, #1
 800df46:	009b      	lsls	r3, r3, #2
 800df48:	50c8      	str	r0, [r1, r3]
 800df4a:	2800      	cmp	r0, #0
 800df4c:	d002      	beq.n	800df54 <__lshift+0xb0>
 800df4e:	9b01      	ldr	r3, [sp, #4]
 800df50:	3302      	adds	r3, #2
 800df52:	9300      	str	r3, [sp, #0]
 800df54:	9b00      	ldr	r3, [sp, #0]
 800df56:	9802      	ldr	r0, [sp, #8]
 800df58:	3b01      	subs	r3, #1
 800df5a:	0021      	movs	r1, r4
 800df5c:	612b      	str	r3, [r5, #16]
 800df5e:	f7ff fdc3 	bl	800dae8 <_Bfree>
 800df62:	0028      	movs	r0, r5
 800df64:	b005      	add	sp, #20
 800df66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df68:	cb01      	ldmia	r3!, {r0}
 800df6a:	c101      	stmia	r1!, {r0}
 800df6c:	429a      	cmp	r2, r3
 800df6e:	d8fb      	bhi.n	800df68 <__lshift+0xc4>
 800df70:	e7f0      	b.n	800df54 <__lshift+0xb0>
 800df72:	46c0      	nop			@ (mov r8, r8)
 800df74:	0801a38a 	.word	0x0801a38a
 800df78:	0801a39b 	.word	0x0801a39b

0800df7c <__mcmp>:
 800df7c:	b530      	push	{r4, r5, lr}
 800df7e:	690b      	ldr	r3, [r1, #16]
 800df80:	6904      	ldr	r4, [r0, #16]
 800df82:	0002      	movs	r2, r0
 800df84:	1ae0      	subs	r0, r4, r3
 800df86:	429c      	cmp	r4, r3
 800df88:	d10f      	bne.n	800dfaa <__mcmp+0x2e>
 800df8a:	3214      	adds	r2, #20
 800df8c:	009b      	lsls	r3, r3, #2
 800df8e:	3114      	adds	r1, #20
 800df90:	0014      	movs	r4, r2
 800df92:	18c9      	adds	r1, r1, r3
 800df94:	18d2      	adds	r2, r2, r3
 800df96:	3a04      	subs	r2, #4
 800df98:	3904      	subs	r1, #4
 800df9a:	6815      	ldr	r5, [r2, #0]
 800df9c:	680b      	ldr	r3, [r1, #0]
 800df9e:	429d      	cmp	r5, r3
 800dfa0:	d004      	beq.n	800dfac <__mcmp+0x30>
 800dfa2:	2001      	movs	r0, #1
 800dfa4:	429d      	cmp	r5, r3
 800dfa6:	d200      	bcs.n	800dfaa <__mcmp+0x2e>
 800dfa8:	3802      	subs	r0, #2
 800dfaa:	bd30      	pop	{r4, r5, pc}
 800dfac:	4294      	cmp	r4, r2
 800dfae:	d3f2      	bcc.n	800df96 <__mcmp+0x1a>
 800dfb0:	e7fb      	b.n	800dfaa <__mcmp+0x2e>
	...

0800dfb4 <__mdiff>:
 800dfb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfb6:	000c      	movs	r4, r1
 800dfb8:	b087      	sub	sp, #28
 800dfba:	9000      	str	r0, [sp, #0]
 800dfbc:	0011      	movs	r1, r2
 800dfbe:	0020      	movs	r0, r4
 800dfc0:	0017      	movs	r7, r2
 800dfc2:	f7ff ffdb 	bl	800df7c <__mcmp>
 800dfc6:	1e05      	subs	r5, r0, #0
 800dfc8:	d110      	bne.n	800dfec <__mdiff+0x38>
 800dfca:	0001      	movs	r1, r0
 800dfcc:	9800      	ldr	r0, [sp, #0]
 800dfce:	f7ff fd47 	bl	800da60 <_Balloc>
 800dfd2:	1e02      	subs	r2, r0, #0
 800dfd4:	d104      	bne.n	800dfe0 <__mdiff+0x2c>
 800dfd6:	4b40      	ldr	r3, [pc, #256]	@ (800e0d8 <__mdiff+0x124>)
 800dfd8:	4840      	ldr	r0, [pc, #256]	@ (800e0dc <__mdiff+0x128>)
 800dfda:	4941      	ldr	r1, [pc, #260]	@ (800e0e0 <__mdiff+0x12c>)
 800dfdc:	f000 fb84 	bl	800e6e8 <__assert_func>
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	6145      	str	r5, [r0, #20]
 800dfe4:	6103      	str	r3, [r0, #16]
 800dfe6:	0010      	movs	r0, r2
 800dfe8:	b007      	add	sp, #28
 800dfea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfec:	2600      	movs	r6, #0
 800dfee:	42b0      	cmp	r0, r6
 800dff0:	da03      	bge.n	800dffa <__mdiff+0x46>
 800dff2:	0023      	movs	r3, r4
 800dff4:	003c      	movs	r4, r7
 800dff6:	001f      	movs	r7, r3
 800dff8:	3601      	adds	r6, #1
 800dffa:	6861      	ldr	r1, [r4, #4]
 800dffc:	9800      	ldr	r0, [sp, #0]
 800dffe:	f7ff fd2f 	bl	800da60 <_Balloc>
 800e002:	1e02      	subs	r2, r0, #0
 800e004:	d103      	bne.n	800e00e <__mdiff+0x5a>
 800e006:	4b34      	ldr	r3, [pc, #208]	@ (800e0d8 <__mdiff+0x124>)
 800e008:	4834      	ldr	r0, [pc, #208]	@ (800e0dc <__mdiff+0x128>)
 800e00a:	4936      	ldr	r1, [pc, #216]	@ (800e0e4 <__mdiff+0x130>)
 800e00c:	e7e6      	b.n	800dfdc <__mdiff+0x28>
 800e00e:	6923      	ldr	r3, [r4, #16]
 800e010:	3414      	adds	r4, #20
 800e012:	9300      	str	r3, [sp, #0]
 800e014:	009b      	lsls	r3, r3, #2
 800e016:	18e3      	adds	r3, r4, r3
 800e018:	0021      	movs	r1, r4
 800e01a:	9401      	str	r4, [sp, #4]
 800e01c:	003c      	movs	r4, r7
 800e01e:	9302      	str	r3, [sp, #8]
 800e020:	693b      	ldr	r3, [r7, #16]
 800e022:	3414      	adds	r4, #20
 800e024:	009b      	lsls	r3, r3, #2
 800e026:	18e3      	adds	r3, r4, r3
 800e028:	9303      	str	r3, [sp, #12]
 800e02a:	0003      	movs	r3, r0
 800e02c:	60c6      	str	r6, [r0, #12]
 800e02e:	468c      	mov	ip, r1
 800e030:	2000      	movs	r0, #0
 800e032:	3314      	adds	r3, #20
 800e034:	9304      	str	r3, [sp, #16]
 800e036:	9305      	str	r3, [sp, #20]
 800e038:	4663      	mov	r3, ip
 800e03a:	cb20      	ldmia	r3!, {r5}
 800e03c:	b2a9      	uxth	r1, r5
 800e03e:	000e      	movs	r6, r1
 800e040:	469c      	mov	ip, r3
 800e042:	cc08      	ldmia	r4!, {r3}
 800e044:	0c2d      	lsrs	r5, r5, #16
 800e046:	b299      	uxth	r1, r3
 800e048:	1a71      	subs	r1, r6, r1
 800e04a:	1809      	adds	r1, r1, r0
 800e04c:	0c1b      	lsrs	r3, r3, #16
 800e04e:	1408      	asrs	r0, r1, #16
 800e050:	1aeb      	subs	r3, r5, r3
 800e052:	181b      	adds	r3, r3, r0
 800e054:	1418      	asrs	r0, r3, #16
 800e056:	b289      	uxth	r1, r1
 800e058:	041b      	lsls	r3, r3, #16
 800e05a:	4319      	orrs	r1, r3
 800e05c:	9b05      	ldr	r3, [sp, #20]
 800e05e:	c302      	stmia	r3!, {r1}
 800e060:	9305      	str	r3, [sp, #20]
 800e062:	9b03      	ldr	r3, [sp, #12]
 800e064:	42a3      	cmp	r3, r4
 800e066:	d8e7      	bhi.n	800e038 <__mdiff+0x84>
 800e068:	0039      	movs	r1, r7
 800e06a:	9c03      	ldr	r4, [sp, #12]
 800e06c:	3115      	adds	r1, #21
 800e06e:	2304      	movs	r3, #4
 800e070:	428c      	cmp	r4, r1
 800e072:	d304      	bcc.n	800e07e <__mdiff+0xca>
 800e074:	1be3      	subs	r3, r4, r7
 800e076:	3b15      	subs	r3, #21
 800e078:	089b      	lsrs	r3, r3, #2
 800e07a:	3301      	adds	r3, #1
 800e07c:	009b      	lsls	r3, r3, #2
 800e07e:	9901      	ldr	r1, [sp, #4]
 800e080:	18cd      	adds	r5, r1, r3
 800e082:	9904      	ldr	r1, [sp, #16]
 800e084:	002e      	movs	r6, r5
 800e086:	18cb      	adds	r3, r1, r3
 800e088:	001f      	movs	r7, r3
 800e08a:	9902      	ldr	r1, [sp, #8]
 800e08c:	428e      	cmp	r6, r1
 800e08e:	d311      	bcc.n	800e0b4 <__mdiff+0x100>
 800e090:	9c02      	ldr	r4, [sp, #8]
 800e092:	1ee9      	subs	r1, r5, #3
 800e094:	2000      	movs	r0, #0
 800e096:	428c      	cmp	r4, r1
 800e098:	d304      	bcc.n	800e0a4 <__mdiff+0xf0>
 800e09a:	0021      	movs	r1, r4
 800e09c:	3103      	adds	r1, #3
 800e09e:	1b49      	subs	r1, r1, r5
 800e0a0:	0889      	lsrs	r1, r1, #2
 800e0a2:	0088      	lsls	r0, r1, #2
 800e0a4:	181b      	adds	r3, r3, r0
 800e0a6:	3b04      	subs	r3, #4
 800e0a8:	6819      	ldr	r1, [r3, #0]
 800e0aa:	2900      	cmp	r1, #0
 800e0ac:	d010      	beq.n	800e0d0 <__mdiff+0x11c>
 800e0ae:	9b00      	ldr	r3, [sp, #0]
 800e0b0:	6113      	str	r3, [r2, #16]
 800e0b2:	e798      	b.n	800dfe6 <__mdiff+0x32>
 800e0b4:	4684      	mov	ip, r0
 800e0b6:	ce02      	ldmia	r6!, {r1}
 800e0b8:	b288      	uxth	r0, r1
 800e0ba:	4460      	add	r0, ip
 800e0bc:	1400      	asrs	r0, r0, #16
 800e0be:	0c0c      	lsrs	r4, r1, #16
 800e0c0:	1904      	adds	r4, r0, r4
 800e0c2:	4461      	add	r1, ip
 800e0c4:	1420      	asrs	r0, r4, #16
 800e0c6:	b289      	uxth	r1, r1
 800e0c8:	0424      	lsls	r4, r4, #16
 800e0ca:	4321      	orrs	r1, r4
 800e0cc:	c702      	stmia	r7!, {r1}
 800e0ce:	e7dc      	b.n	800e08a <__mdiff+0xd6>
 800e0d0:	9900      	ldr	r1, [sp, #0]
 800e0d2:	3901      	subs	r1, #1
 800e0d4:	9100      	str	r1, [sp, #0]
 800e0d6:	e7e6      	b.n	800e0a6 <__mdiff+0xf2>
 800e0d8:	0801a38a 	.word	0x0801a38a
 800e0dc:	0801a39b 	.word	0x0801a39b
 800e0e0:	00000237 	.word	0x00000237
 800e0e4:	00000245 	.word	0x00000245

0800e0e8 <__d2b>:
 800e0e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e0ea:	2101      	movs	r1, #1
 800e0ec:	0016      	movs	r6, r2
 800e0ee:	001f      	movs	r7, r3
 800e0f0:	f7ff fcb6 	bl	800da60 <_Balloc>
 800e0f4:	1e04      	subs	r4, r0, #0
 800e0f6:	d105      	bne.n	800e104 <__d2b+0x1c>
 800e0f8:	0022      	movs	r2, r4
 800e0fa:	4b25      	ldr	r3, [pc, #148]	@ (800e190 <__d2b+0xa8>)
 800e0fc:	4825      	ldr	r0, [pc, #148]	@ (800e194 <__d2b+0xac>)
 800e0fe:	4926      	ldr	r1, [pc, #152]	@ (800e198 <__d2b+0xb0>)
 800e100:	f000 faf2 	bl	800e6e8 <__assert_func>
 800e104:	033b      	lsls	r3, r7, #12
 800e106:	007d      	lsls	r5, r7, #1
 800e108:	0b1b      	lsrs	r3, r3, #12
 800e10a:	0d6d      	lsrs	r5, r5, #21
 800e10c:	d002      	beq.n	800e114 <__d2b+0x2c>
 800e10e:	2280      	movs	r2, #128	@ 0x80
 800e110:	0352      	lsls	r2, r2, #13
 800e112:	4313      	orrs	r3, r2
 800e114:	9301      	str	r3, [sp, #4]
 800e116:	2e00      	cmp	r6, #0
 800e118:	d025      	beq.n	800e166 <__d2b+0x7e>
 800e11a:	4668      	mov	r0, sp
 800e11c:	9600      	str	r6, [sp, #0]
 800e11e:	f7ff fd6c 	bl	800dbfa <__lo0bits>
 800e122:	9b01      	ldr	r3, [sp, #4]
 800e124:	9900      	ldr	r1, [sp, #0]
 800e126:	2800      	cmp	r0, #0
 800e128:	d01b      	beq.n	800e162 <__d2b+0x7a>
 800e12a:	2220      	movs	r2, #32
 800e12c:	001e      	movs	r6, r3
 800e12e:	1a12      	subs	r2, r2, r0
 800e130:	4096      	lsls	r6, r2
 800e132:	0032      	movs	r2, r6
 800e134:	40c3      	lsrs	r3, r0
 800e136:	430a      	orrs	r2, r1
 800e138:	6162      	str	r2, [r4, #20]
 800e13a:	9301      	str	r3, [sp, #4]
 800e13c:	9e01      	ldr	r6, [sp, #4]
 800e13e:	61a6      	str	r6, [r4, #24]
 800e140:	1e73      	subs	r3, r6, #1
 800e142:	419e      	sbcs	r6, r3
 800e144:	3601      	adds	r6, #1
 800e146:	6126      	str	r6, [r4, #16]
 800e148:	2d00      	cmp	r5, #0
 800e14a:	d014      	beq.n	800e176 <__d2b+0x8e>
 800e14c:	2635      	movs	r6, #53	@ 0x35
 800e14e:	4b13      	ldr	r3, [pc, #76]	@ (800e19c <__d2b+0xb4>)
 800e150:	18ed      	adds	r5, r5, r3
 800e152:	9b08      	ldr	r3, [sp, #32]
 800e154:	182d      	adds	r5, r5, r0
 800e156:	601d      	str	r5, [r3, #0]
 800e158:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e15a:	1a36      	subs	r6, r6, r0
 800e15c:	601e      	str	r6, [r3, #0]
 800e15e:	0020      	movs	r0, r4
 800e160:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e162:	6161      	str	r1, [r4, #20]
 800e164:	e7ea      	b.n	800e13c <__d2b+0x54>
 800e166:	a801      	add	r0, sp, #4
 800e168:	f7ff fd47 	bl	800dbfa <__lo0bits>
 800e16c:	9b01      	ldr	r3, [sp, #4]
 800e16e:	2601      	movs	r6, #1
 800e170:	6163      	str	r3, [r4, #20]
 800e172:	3020      	adds	r0, #32
 800e174:	e7e7      	b.n	800e146 <__d2b+0x5e>
 800e176:	4b0a      	ldr	r3, [pc, #40]	@ (800e1a0 <__d2b+0xb8>)
 800e178:	18c0      	adds	r0, r0, r3
 800e17a:	9b08      	ldr	r3, [sp, #32]
 800e17c:	6018      	str	r0, [r3, #0]
 800e17e:	4b09      	ldr	r3, [pc, #36]	@ (800e1a4 <__d2b+0xbc>)
 800e180:	18f3      	adds	r3, r6, r3
 800e182:	009b      	lsls	r3, r3, #2
 800e184:	18e3      	adds	r3, r4, r3
 800e186:	6958      	ldr	r0, [r3, #20]
 800e188:	f7ff fd16 	bl	800dbb8 <__hi0bits>
 800e18c:	0176      	lsls	r6, r6, #5
 800e18e:	e7e3      	b.n	800e158 <__d2b+0x70>
 800e190:	0801a38a 	.word	0x0801a38a
 800e194:	0801a39b 	.word	0x0801a39b
 800e198:	0000030f 	.word	0x0000030f
 800e19c:	fffffbcd 	.word	0xfffffbcd
 800e1a0:	fffffbce 	.word	0xfffffbce
 800e1a4:	3fffffff 	.word	0x3fffffff

0800e1a8 <__sfputc_r>:
 800e1a8:	6893      	ldr	r3, [r2, #8]
 800e1aa:	b510      	push	{r4, lr}
 800e1ac:	3b01      	subs	r3, #1
 800e1ae:	6093      	str	r3, [r2, #8]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	da04      	bge.n	800e1be <__sfputc_r+0x16>
 800e1b4:	6994      	ldr	r4, [r2, #24]
 800e1b6:	42a3      	cmp	r3, r4
 800e1b8:	db07      	blt.n	800e1ca <__sfputc_r+0x22>
 800e1ba:	290a      	cmp	r1, #10
 800e1bc:	d005      	beq.n	800e1ca <__sfputc_r+0x22>
 800e1be:	6813      	ldr	r3, [r2, #0]
 800e1c0:	1c58      	adds	r0, r3, #1
 800e1c2:	6010      	str	r0, [r2, #0]
 800e1c4:	7019      	strb	r1, [r3, #0]
 800e1c6:	0008      	movs	r0, r1
 800e1c8:	bd10      	pop	{r4, pc}
 800e1ca:	f000 f9e2 	bl	800e592 <__swbuf_r>
 800e1ce:	0001      	movs	r1, r0
 800e1d0:	e7f9      	b.n	800e1c6 <__sfputc_r+0x1e>

0800e1d2 <__sfputs_r>:
 800e1d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1d4:	0006      	movs	r6, r0
 800e1d6:	000f      	movs	r7, r1
 800e1d8:	0014      	movs	r4, r2
 800e1da:	18d5      	adds	r5, r2, r3
 800e1dc:	42ac      	cmp	r4, r5
 800e1de:	d101      	bne.n	800e1e4 <__sfputs_r+0x12>
 800e1e0:	2000      	movs	r0, #0
 800e1e2:	e007      	b.n	800e1f4 <__sfputs_r+0x22>
 800e1e4:	7821      	ldrb	r1, [r4, #0]
 800e1e6:	003a      	movs	r2, r7
 800e1e8:	0030      	movs	r0, r6
 800e1ea:	f7ff ffdd 	bl	800e1a8 <__sfputc_r>
 800e1ee:	3401      	adds	r4, #1
 800e1f0:	1c43      	adds	r3, r0, #1
 800e1f2:	d1f3      	bne.n	800e1dc <__sfputs_r+0xa>
 800e1f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e1f8 <_vfiprintf_r>:
 800e1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1fa:	b0a1      	sub	sp, #132	@ 0x84
 800e1fc:	000f      	movs	r7, r1
 800e1fe:	0015      	movs	r5, r2
 800e200:	001e      	movs	r6, r3
 800e202:	9003      	str	r0, [sp, #12]
 800e204:	2800      	cmp	r0, #0
 800e206:	d004      	beq.n	800e212 <_vfiprintf_r+0x1a>
 800e208:	6a03      	ldr	r3, [r0, #32]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d101      	bne.n	800e212 <_vfiprintf_r+0x1a>
 800e20e:	f7fe fc11 	bl	800ca34 <__sinit>
 800e212:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e214:	07db      	lsls	r3, r3, #31
 800e216:	d405      	bmi.n	800e224 <_vfiprintf_r+0x2c>
 800e218:	89bb      	ldrh	r3, [r7, #12]
 800e21a:	059b      	lsls	r3, r3, #22
 800e21c:	d402      	bmi.n	800e224 <_vfiprintf_r+0x2c>
 800e21e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e220:	f7fe fd45 	bl	800ccae <__retarget_lock_acquire_recursive>
 800e224:	89bb      	ldrh	r3, [r7, #12]
 800e226:	071b      	lsls	r3, r3, #28
 800e228:	d502      	bpl.n	800e230 <_vfiprintf_r+0x38>
 800e22a:	693b      	ldr	r3, [r7, #16]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d113      	bne.n	800e258 <_vfiprintf_r+0x60>
 800e230:	0039      	movs	r1, r7
 800e232:	9803      	ldr	r0, [sp, #12]
 800e234:	f000 f9f0 	bl	800e618 <__swsetup_r>
 800e238:	2800      	cmp	r0, #0
 800e23a:	d00d      	beq.n	800e258 <_vfiprintf_r+0x60>
 800e23c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e23e:	07db      	lsls	r3, r3, #31
 800e240:	d503      	bpl.n	800e24a <_vfiprintf_r+0x52>
 800e242:	2001      	movs	r0, #1
 800e244:	4240      	negs	r0, r0
 800e246:	b021      	add	sp, #132	@ 0x84
 800e248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e24a:	89bb      	ldrh	r3, [r7, #12]
 800e24c:	059b      	lsls	r3, r3, #22
 800e24e:	d4f8      	bmi.n	800e242 <_vfiprintf_r+0x4a>
 800e250:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e252:	f7fe fd2d 	bl	800ccb0 <__retarget_lock_release_recursive>
 800e256:	e7f4      	b.n	800e242 <_vfiprintf_r+0x4a>
 800e258:	2300      	movs	r3, #0
 800e25a:	ac08      	add	r4, sp, #32
 800e25c:	6163      	str	r3, [r4, #20]
 800e25e:	3320      	adds	r3, #32
 800e260:	7663      	strb	r3, [r4, #25]
 800e262:	3310      	adds	r3, #16
 800e264:	76a3      	strb	r3, [r4, #26]
 800e266:	9607      	str	r6, [sp, #28]
 800e268:	002e      	movs	r6, r5
 800e26a:	7833      	ldrb	r3, [r6, #0]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d001      	beq.n	800e274 <_vfiprintf_r+0x7c>
 800e270:	2b25      	cmp	r3, #37	@ 0x25
 800e272:	d148      	bne.n	800e306 <_vfiprintf_r+0x10e>
 800e274:	1b73      	subs	r3, r6, r5
 800e276:	9305      	str	r3, [sp, #20]
 800e278:	42ae      	cmp	r6, r5
 800e27a:	d00b      	beq.n	800e294 <_vfiprintf_r+0x9c>
 800e27c:	002a      	movs	r2, r5
 800e27e:	0039      	movs	r1, r7
 800e280:	9803      	ldr	r0, [sp, #12]
 800e282:	f7ff ffa6 	bl	800e1d2 <__sfputs_r>
 800e286:	3001      	adds	r0, #1
 800e288:	d100      	bne.n	800e28c <_vfiprintf_r+0x94>
 800e28a:	e0ae      	b.n	800e3ea <_vfiprintf_r+0x1f2>
 800e28c:	6963      	ldr	r3, [r4, #20]
 800e28e:	9a05      	ldr	r2, [sp, #20]
 800e290:	189b      	adds	r3, r3, r2
 800e292:	6163      	str	r3, [r4, #20]
 800e294:	7833      	ldrb	r3, [r6, #0]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d100      	bne.n	800e29c <_vfiprintf_r+0xa4>
 800e29a:	e0a6      	b.n	800e3ea <_vfiprintf_r+0x1f2>
 800e29c:	2201      	movs	r2, #1
 800e29e:	2300      	movs	r3, #0
 800e2a0:	4252      	negs	r2, r2
 800e2a2:	6062      	str	r2, [r4, #4]
 800e2a4:	a904      	add	r1, sp, #16
 800e2a6:	3254      	adds	r2, #84	@ 0x54
 800e2a8:	1852      	adds	r2, r2, r1
 800e2aa:	1c75      	adds	r5, r6, #1
 800e2ac:	6023      	str	r3, [r4, #0]
 800e2ae:	60e3      	str	r3, [r4, #12]
 800e2b0:	60a3      	str	r3, [r4, #8]
 800e2b2:	7013      	strb	r3, [r2, #0]
 800e2b4:	65a3      	str	r3, [r4, #88]	@ 0x58
 800e2b6:	4b59      	ldr	r3, [pc, #356]	@ (800e41c <_vfiprintf_r+0x224>)
 800e2b8:	2205      	movs	r2, #5
 800e2ba:	0018      	movs	r0, r3
 800e2bc:	7829      	ldrb	r1, [r5, #0]
 800e2be:	9305      	str	r3, [sp, #20]
 800e2c0:	f7fe fcf7 	bl	800ccb2 <memchr>
 800e2c4:	1c6e      	adds	r6, r5, #1
 800e2c6:	2800      	cmp	r0, #0
 800e2c8:	d11f      	bne.n	800e30a <_vfiprintf_r+0x112>
 800e2ca:	6822      	ldr	r2, [r4, #0]
 800e2cc:	06d3      	lsls	r3, r2, #27
 800e2ce:	d504      	bpl.n	800e2da <_vfiprintf_r+0xe2>
 800e2d0:	2353      	movs	r3, #83	@ 0x53
 800e2d2:	a904      	add	r1, sp, #16
 800e2d4:	185b      	adds	r3, r3, r1
 800e2d6:	2120      	movs	r1, #32
 800e2d8:	7019      	strb	r1, [r3, #0]
 800e2da:	0713      	lsls	r3, r2, #28
 800e2dc:	d504      	bpl.n	800e2e8 <_vfiprintf_r+0xf0>
 800e2de:	2353      	movs	r3, #83	@ 0x53
 800e2e0:	a904      	add	r1, sp, #16
 800e2e2:	185b      	adds	r3, r3, r1
 800e2e4:	212b      	movs	r1, #43	@ 0x2b
 800e2e6:	7019      	strb	r1, [r3, #0]
 800e2e8:	782b      	ldrb	r3, [r5, #0]
 800e2ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800e2ec:	d016      	beq.n	800e31c <_vfiprintf_r+0x124>
 800e2ee:	002e      	movs	r6, r5
 800e2f0:	2100      	movs	r1, #0
 800e2f2:	200a      	movs	r0, #10
 800e2f4:	68e3      	ldr	r3, [r4, #12]
 800e2f6:	7832      	ldrb	r2, [r6, #0]
 800e2f8:	1c75      	adds	r5, r6, #1
 800e2fa:	3a30      	subs	r2, #48	@ 0x30
 800e2fc:	2a09      	cmp	r2, #9
 800e2fe:	d950      	bls.n	800e3a2 <_vfiprintf_r+0x1aa>
 800e300:	2900      	cmp	r1, #0
 800e302:	d111      	bne.n	800e328 <_vfiprintf_r+0x130>
 800e304:	e017      	b.n	800e336 <_vfiprintf_r+0x13e>
 800e306:	3601      	adds	r6, #1
 800e308:	e7af      	b.n	800e26a <_vfiprintf_r+0x72>
 800e30a:	9b05      	ldr	r3, [sp, #20]
 800e30c:	6822      	ldr	r2, [r4, #0]
 800e30e:	1ac0      	subs	r0, r0, r3
 800e310:	2301      	movs	r3, #1
 800e312:	4083      	lsls	r3, r0
 800e314:	4313      	orrs	r3, r2
 800e316:	0035      	movs	r5, r6
 800e318:	6023      	str	r3, [r4, #0]
 800e31a:	e7cc      	b.n	800e2b6 <_vfiprintf_r+0xbe>
 800e31c:	9b07      	ldr	r3, [sp, #28]
 800e31e:	1d19      	adds	r1, r3, #4
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	9107      	str	r1, [sp, #28]
 800e324:	2b00      	cmp	r3, #0
 800e326:	db01      	blt.n	800e32c <_vfiprintf_r+0x134>
 800e328:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e32a:	e004      	b.n	800e336 <_vfiprintf_r+0x13e>
 800e32c:	425b      	negs	r3, r3
 800e32e:	60e3      	str	r3, [r4, #12]
 800e330:	2302      	movs	r3, #2
 800e332:	4313      	orrs	r3, r2
 800e334:	6023      	str	r3, [r4, #0]
 800e336:	7833      	ldrb	r3, [r6, #0]
 800e338:	2b2e      	cmp	r3, #46	@ 0x2e
 800e33a:	d10c      	bne.n	800e356 <_vfiprintf_r+0x15e>
 800e33c:	7873      	ldrb	r3, [r6, #1]
 800e33e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e340:	d134      	bne.n	800e3ac <_vfiprintf_r+0x1b4>
 800e342:	9b07      	ldr	r3, [sp, #28]
 800e344:	3602      	adds	r6, #2
 800e346:	1d1a      	adds	r2, r3, #4
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	9207      	str	r2, [sp, #28]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	da01      	bge.n	800e354 <_vfiprintf_r+0x15c>
 800e350:	2301      	movs	r3, #1
 800e352:	425b      	negs	r3, r3
 800e354:	9309      	str	r3, [sp, #36]	@ 0x24
 800e356:	4d32      	ldr	r5, [pc, #200]	@ (800e420 <_vfiprintf_r+0x228>)
 800e358:	2203      	movs	r2, #3
 800e35a:	0028      	movs	r0, r5
 800e35c:	7831      	ldrb	r1, [r6, #0]
 800e35e:	f7fe fca8 	bl	800ccb2 <memchr>
 800e362:	2800      	cmp	r0, #0
 800e364:	d006      	beq.n	800e374 <_vfiprintf_r+0x17c>
 800e366:	2340      	movs	r3, #64	@ 0x40
 800e368:	1b40      	subs	r0, r0, r5
 800e36a:	4083      	lsls	r3, r0
 800e36c:	6822      	ldr	r2, [r4, #0]
 800e36e:	3601      	adds	r6, #1
 800e370:	4313      	orrs	r3, r2
 800e372:	6023      	str	r3, [r4, #0]
 800e374:	7831      	ldrb	r1, [r6, #0]
 800e376:	2206      	movs	r2, #6
 800e378:	482a      	ldr	r0, [pc, #168]	@ (800e424 <_vfiprintf_r+0x22c>)
 800e37a:	1c75      	adds	r5, r6, #1
 800e37c:	7621      	strb	r1, [r4, #24]
 800e37e:	f7fe fc98 	bl	800ccb2 <memchr>
 800e382:	2800      	cmp	r0, #0
 800e384:	d040      	beq.n	800e408 <_vfiprintf_r+0x210>
 800e386:	4b28      	ldr	r3, [pc, #160]	@ (800e428 <_vfiprintf_r+0x230>)
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d122      	bne.n	800e3d2 <_vfiprintf_r+0x1da>
 800e38c:	2207      	movs	r2, #7
 800e38e:	9b07      	ldr	r3, [sp, #28]
 800e390:	3307      	adds	r3, #7
 800e392:	4393      	bics	r3, r2
 800e394:	3308      	adds	r3, #8
 800e396:	9307      	str	r3, [sp, #28]
 800e398:	6963      	ldr	r3, [r4, #20]
 800e39a:	9a04      	ldr	r2, [sp, #16]
 800e39c:	189b      	adds	r3, r3, r2
 800e39e:	6163      	str	r3, [r4, #20]
 800e3a0:	e762      	b.n	800e268 <_vfiprintf_r+0x70>
 800e3a2:	4343      	muls	r3, r0
 800e3a4:	002e      	movs	r6, r5
 800e3a6:	2101      	movs	r1, #1
 800e3a8:	189b      	adds	r3, r3, r2
 800e3aa:	e7a4      	b.n	800e2f6 <_vfiprintf_r+0xfe>
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	200a      	movs	r0, #10
 800e3b0:	0019      	movs	r1, r3
 800e3b2:	3601      	adds	r6, #1
 800e3b4:	6063      	str	r3, [r4, #4]
 800e3b6:	7832      	ldrb	r2, [r6, #0]
 800e3b8:	1c75      	adds	r5, r6, #1
 800e3ba:	3a30      	subs	r2, #48	@ 0x30
 800e3bc:	2a09      	cmp	r2, #9
 800e3be:	d903      	bls.n	800e3c8 <_vfiprintf_r+0x1d0>
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d0c8      	beq.n	800e356 <_vfiprintf_r+0x15e>
 800e3c4:	9109      	str	r1, [sp, #36]	@ 0x24
 800e3c6:	e7c6      	b.n	800e356 <_vfiprintf_r+0x15e>
 800e3c8:	4341      	muls	r1, r0
 800e3ca:	002e      	movs	r6, r5
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	1889      	adds	r1, r1, r2
 800e3d0:	e7f1      	b.n	800e3b6 <_vfiprintf_r+0x1be>
 800e3d2:	aa07      	add	r2, sp, #28
 800e3d4:	9200      	str	r2, [sp, #0]
 800e3d6:	0021      	movs	r1, r4
 800e3d8:	003a      	movs	r2, r7
 800e3da:	4b14      	ldr	r3, [pc, #80]	@ (800e42c <_vfiprintf_r+0x234>)
 800e3dc:	9803      	ldr	r0, [sp, #12]
 800e3de:	f7fd fedd 	bl	800c19c <_printf_float>
 800e3e2:	9004      	str	r0, [sp, #16]
 800e3e4:	9b04      	ldr	r3, [sp, #16]
 800e3e6:	3301      	adds	r3, #1
 800e3e8:	d1d6      	bne.n	800e398 <_vfiprintf_r+0x1a0>
 800e3ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e3ec:	07db      	lsls	r3, r3, #31
 800e3ee:	d405      	bmi.n	800e3fc <_vfiprintf_r+0x204>
 800e3f0:	89bb      	ldrh	r3, [r7, #12]
 800e3f2:	059b      	lsls	r3, r3, #22
 800e3f4:	d402      	bmi.n	800e3fc <_vfiprintf_r+0x204>
 800e3f6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e3f8:	f7fe fc5a 	bl	800ccb0 <__retarget_lock_release_recursive>
 800e3fc:	89bb      	ldrh	r3, [r7, #12]
 800e3fe:	065b      	lsls	r3, r3, #25
 800e400:	d500      	bpl.n	800e404 <_vfiprintf_r+0x20c>
 800e402:	e71e      	b.n	800e242 <_vfiprintf_r+0x4a>
 800e404:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800e406:	e71e      	b.n	800e246 <_vfiprintf_r+0x4e>
 800e408:	aa07      	add	r2, sp, #28
 800e40a:	9200      	str	r2, [sp, #0]
 800e40c:	0021      	movs	r1, r4
 800e40e:	003a      	movs	r2, r7
 800e410:	4b06      	ldr	r3, [pc, #24]	@ (800e42c <_vfiprintf_r+0x234>)
 800e412:	9803      	ldr	r0, [sp, #12]
 800e414:	f7fe f970 	bl	800c6f8 <_printf_i>
 800e418:	e7e3      	b.n	800e3e2 <_vfiprintf_r+0x1ea>
 800e41a:	46c0      	nop			@ (mov r8, r8)
 800e41c:	0801a4f0 	.word	0x0801a4f0
 800e420:	0801a4f6 	.word	0x0801a4f6
 800e424:	0801a4fa 	.word	0x0801a4fa
 800e428:	0800c19d 	.word	0x0800c19d
 800e42c:	0800e1d3 	.word	0x0800e1d3

0800e430 <__sflush_r>:
 800e430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e432:	220c      	movs	r2, #12
 800e434:	5e8b      	ldrsh	r3, [r1, r2]
 800e436:	0005      	movs	r5, r0
 800e438:	000c      	movs	r4, r1
 800e43a:	071a      	lsls	r2, r3, #28
 800e43c:	d456      	bmi.n	800e4ec <__sflush_r+0xbc>
 800e43e:	684a      	ldr	r2, [r1, #4]
 800e440:	2a00      	cmp	r2, #0
 800e442:	dc02      	bgt.n	800e44a <__sflush_r+0x1a>
 800e444:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800e446:	2a00      	cmp	r2, #0
 800e448:	dd4e      	ble.n	800e4e8 <__sflush_r+0xb8>
 800e44a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800e44c:	2f00      	cmp	r7, #0
 800e44e:	d04b      	beq.n	800e4e8 <__sflush_r+0xb8>
 800e450:	2200      	movs	r2, #0
 800e452:	2080      	movs	r0, #128	@ 0x80
 800e454:	682e      	ldr	r6, [r5, #0]
 800e456:	602a      	str	r2, [r5, #0]
 800e458:	001a      	movs	r2, r3
 800e45a:	0140      	lsls	r0, r0, #5
 800e45c:	6a21      	ldr	r1, [r4, #32]
 800e45e:	4002      	ands	r2, r0
 800e460:	4203      	tst	r3, r0
 800e462:	d033      	beq.n	800e4cc <__sflush_r+0x9c>
 800e464:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e466:	89a3      	ldrh	r3, [r4, #12]
 800e468:	075b      	lsls	r3, r3, #29
 800e46a:	d506      	bpl.n	800e47a <__sflush_r+0x4a>
 800e46c:	6863      	ldr	r3, [r4, #4]
 800e46e:	1ad2      	subs	r2, r2, r3
 800e470:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e472:	2b00      	cmp	r3, #0
 800e474:	d001      	beq.n	800e47a <__sflush_r+0x4a>
 800e476:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e478:	1ad2      	subs	r2, r2, r3
 800e47a:	2300      	movs	r3, #0
 800e47c:	0028      	movs	r0, r5
 800e47e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800e480:	6a21      	ldr	r1, [r4, #32]
 800e482:	47b8      	blx	r7
 800e484:	89a2      	ldrh	r2, [r4, #12]
 800e486:	1c43      	adds	r3, r0, #1
 800e488:	d106      	bne.n	800e498 <__sflush_r+0x68>
 800e48a:	6829      	ldr	r1, [r5, #0]
 800e48c:	291d      	cmp	r1, #29
 800e48e:	d846      	bhi.n	800e51e <__sflush_r+0xee>
 800e490:	4b29      	ldr	r3, [pc, #164]	@ (800e538 <__sflush_r+0x108>)
 800e492:	410b      	asrs	r3, r1
 800e494:	07db      	lsls	r3, r3, #31
 800e496:	d442      	bmi.n	800e51e <__sflush_r+0xee>
 800e498:	2300      	movs	r3, #0
 800e49a:	6063      	str	r3, [r4, #4]
 800e49c:	6923      	ldr	r3, [r4, #16]
 800e49e:	6023      	str	r3, [r4, #0]
 800e4a0:	04d2      	lsls	r2, r2, #19
 800e4a2:	d505      	bpl.n	800e4b0 <__sflush_r+0x80>
 800e4a4:	1c43      	adds	r3, r0, #1
 800e4a6:	d102      	bne.n	800e4ae <__sflush_r+0x7e>
 800e4a8:	682b      	ldr	r3, [r5, #0]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d100      	bne.n	800e4b0 <__sflush_r+0x80>
 800e4ae:	6560      	str	r0, [r4, #84]	@ 0x54
 800e4b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e4b2:	602e      	str	r6, [r5, #0]
 800e4b4:	2900      	cmp	r1, #0
 800e4b6:	d017      	beq.n	800e4e8 <__sflush_r+0xb8>
 800e4b8:	0023      	movs	r3, r4
 800e4ba:	3344      	adds	r3, #68	@ 0x44
 800e4bc:	4299      	cmp	r1, r3
 800e4be:	d002      	beq.n	800e4c6 <__sflush_r+0x96>
 800e4c0:	0028      	movs	r0, r5
 800e4c2:	f7ff fa83 	bl	800d9cc <_free_r>
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	6363      	str	r3, [r4, #52]	@ 0x34
 800e4ca:	e00d      	b.n	800e4e8 <__sflush_r+0xb8>
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	0028      	movs	r0, r5
 800e4d0:	47b8      	blx	r7
 800e4d2:	0002      	movs	r2, r0
 800e4d4:	1c43      	adds	r3, r0, #1
 800e4d6:	d1c6      	bne.n	800e466 <__sflush_r+0x36>
 800e4d8:	682b      	ldr	r3, [r5, #0]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d0c3      	beq.n	800e466 <__sflush_r+0x36>
 800e4de:	2b1d      	cmp	r3, #29
 800e4e0:	d001      	beq.n	800e4e6 <__sflush_r+0xb6>
 800e4e2:	2b16      	cmp	r3, #22
 800e4e4:	d11a      	bne.n	800e51c <__sflush_r+0xec>
 800e4e6:	602e      	str	r6, [r5, #0]
 800e4e8:	2000      	movs	r0, #0
 800e4ea:	e01e      	b.n	800e52a <__sflush_r+0xfa>
 800e4ec:	690e      	ldr	r6, [r1, #16]
 800e4ee:	2e00      	cmp	r6, #0
 800e4f0:	d0fa      	beq.n	800e4e8 <__sflush_r+0xb8>
 800e4f2:	680f      	ldr	r7, [r1, #0]
 800e4f4:	600e      	str	r6, [r1, #0]
 800e4f6:	1bba      	subs	r2, r7, r6
 800e4f8:	9201      	str	r2, [sp, #4]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	079b      	lsls	r3, r3, #30
 800e4fe:	d100      	bne.n	800e502 <__sflush_r+0xd2>
 800e500:	694a      	ldr	r2, [r1, #20]
 800e502:	60a2      	str	r2, [r4, #8]
 800e504:	9b01      	ldr	r3, [sp, #4]
 800e506:	2b00      	cmp	r3, #0
 800e508:	ddee      	ble.n	800e4e8 <__sflush_r+0xb8>
 800e50a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800e50c:	0032      	movs	r2, r6
 800e50e:	001f      	movs	r7, r3
 800e510:	0028      	movs	r0, r5
 800e512:	9b01      	ldr	r3, [sp, #4]
 800e514:	6a21      	ldr	r1, [r4, #32]
 800e516:	47b8      	blx	r7
 800e518:	2800      	cmp	r0, #0
 800e51a:	dc07      	bgt.n	800e52c <__sflush_r+0xfc>
 800e51c:	89a2      	ldrh	r2, [r4, #12]
 800e51e:	2340      	movs	r3, #64	@ 0x40
 800e520:	2001      	movs	r0, #1
 800e522:	4313      	orrs	r3, r2
 800e524:	b21b      	sxth	r3, r3
 800e526:	81a3      	strh	r3, [r4, #12]
 800e528:	4240      	negs	r0, r0
 800e52a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e52c:	9b01      	ldr	r3, [sp, #4]
 800e52e:	1836      	adds	r6, r6, r0
 800e530:	1a1b      	subs	r3, r3, r0
 800e532:	9301      	str	r3, [sp, #4]
 800e534:	e7e6      	b.n	800e504 <__sflush_r+0xd4>
 800e536:	46c0      	nop			@ (mov r8, r8)
 800e538:	dfbffffe 	.word	0xdfbffffe

0800e53c <_fflush_r>:
 800e53c:	690b      	ldr	r3, [r1, #16]
 800e53e:	b570      	push	{r4, r5, r6, lr}
 800e540:	0005      	movs	r5, r0
 800e542:	000c      	movs	r4, r1
 800e544:	2b00      	cmp	r3, #0
 800e546:	d102      	bne.n	800e54e <_fflush_r+0x12>
 800e548:	2500      	movs	r5, #0
 800e54a:	0028      	movs	r0, r5
 800e54c:	bd70      	pop	{r4, r5, r6, pc}
 800e54e:	2800      	cmp	r0, #0
 800e550:	d004      	beq.n	800e55c <_fflush_r+0x20>
 800e552:	6a03      	ldr	r3, [r0, #32]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d101      	bne.n	800e55c <_fflush_r+0x20>
 800e558:	f7fe fa6c 	bl	800ca34 <__sinit>
 800e55c:	220c      	movs	r2, #12
 800e55e:	5ea3      	ldrsh	r3, [r4, r2]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d0f1      	beq.n	800e548 <_fflush_r+0xc>
 800e564:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e566:	07d2      	lsls	r2, r2, #31
 800e568:	d404      	bmi.n	800e574 <_fflush_r+0x38>
 800e56a:	059b      	lsls	r3, r3, #22
 800e56c:	d402      	bmi.n	800e574 <_fflush_r+0x38>
 800e56e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e570:	f7fe fb9d 	bl	800ccae <__retarget_lock_acquire_recursive>
 800e574:	0028      	movs	r0, r5
 800e576:	0021      	movs	r1, r4
 800e578:	f7ff ff5a 	bl	800e430 <__sflush_r>
 800e57c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e57e:	0005      	movs	r5, r0
 800e580:	07db      	lsls	r3, r3, #31
 800e582:	d4e2      	bmi.n	800e54a <_fflush_r+0xe>
 800e584:	89a3      	ldrh	r3, [r4, #12]
 800e586:	059b      	lsls	r3, r3, #22
 800e588:	d4df      	bmi.n	800e54a <_fflush_r+0xe>
 800e58a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e58c:	f7fe fb90 	bl	800ccb0 <__retarget_lock_release_recursive>
 800e590:	e7db      	b.n	800e54a <_fflush_r+0xe>

0800e592 <__swbuf_r>:
 800e592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e594:	0006      	movs	r6, r0
 800e596:	000d      	movs	r5, r1
 800e598:	0014      	movs	r4, r2
 800e59a:	2800      	cmp	r0, #0
 800e59c:	d004      	beq.n	800e5a8 <__swbuf_r+0x16>
 800e59e:	6a03      	ldr	r3, [r0, #32]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d101      	bne.n	800e5a8 <__swbuf_r+0x16>
 800e5a4:	f7fe fa46 	bl	800ca34 <__sinit>
 800e5a8:	69a3      	ldr	r3, [r4, #24]
 800e5aa:	60a3      	str	r3, [r4, #8]
 800e5ac:	89a3      	ldrh	r3, [r4, #12]
 800e5ae:	071b      	lsls	r3, r3, #28
 800e5b0:	d502      	bpl.n	800e5b8 <__swbuf_r+0x26>
 800e5b2:	6923      	ldr	r3, [r4, #16]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d109      	bne.n	800e5cc <__swbuf_r+0x3a>
 800e5b8:	0021      	movs	r1, r4
 800e5ba:	0030      	movs	r0, r6
 800e5bc:	f000 f82c 	bl	800e618 <__swsetup_r>
 800e5c0:	2800      	cmp	r0, #0
 800e5c2:	d003      	beq.n	800e5cc <__swbuf_r+0x3a>
 800e5c4:	2501      	movs	r5, #1
 800e5c6:	426d      	negs	r5, r5
 800e5c8:	0028      	movs	r0, r5
 800e5ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5cc:	6923      	ldr	r3, [r4, #16]
 800e5ce:	6820      	ldr	r0, [r4, #0]
 800e5d0:	b2ef      	uxtb	r7, r5
 800e5d2:	1ac0      	subs	r0, r0, r3
 800e5d4:	6963      	ldr	r3, [r4, #20]
 800e5d6:	b2ed      	uxtb	r5, r5
 800e5d8:	4283      	cmp	r3, r0
 800e5da:	dc05      	bgt.n	800e5e8 <__swbuf_r+0x56>
 800e5dc:	0021      	movs	r1, r4
 800e5de:	0030      	movs	r0, r6
 800e5e0:	f7ff ffac 	bl	800e53c <_fflush_r>
 800e5e4:	2800      	cmp	r0, #0
 800e5e6:	d1ed      	bne.n	800e5c4 <__swbuf_r+0x32>
 800e5e8:	68a3      	ldr	r3, [r4, #8]
 800e5ea:	3001      	adds	r0, #1
 800e5ec:	3b01      	subs	r3, #1
 800e5ee:	60a3      	str	r3, [r4, #8]
 800e5f0:	6823      	ldr	r3, [r4, #0]
 800e5f2:	1c5a      	adds	r2, r3, #1
 800e5f4:	6022      	str	r2, [r4, #0]
 800e5f6:	701f      	strb	r7, [r3, #0]
 800e5f8:	6963      	ldr	r3, [r4, #20]
 800e5fa:	4283      	cmp	r3, r0
 800e5fc:	d004      	beq.n	800e608 <__swbuf_r+0x76>
 800e5fe:	89a3      	ldrh	r3, [r4, #12]
 800e600:	07db      	lsls	r3, r3, #31
 800e602:	d5e1      	bpl.n	800e5c8 <__swbuf_r+0x36>
 800e604:	2d0a      	cmp	r5, #10
 800e606:	d1df      	bne.n	800e5c8 <__swbuf_r+0x36>
 800e608:	0021      	movs	r1, r4
 800e60a:	0030      	movs	r0, r6
 800e60c:	f7ff ff96 	bl	800e53c <_fflush_r>
 800e610:	2800      	cmp	r0, #0
 800e612:	d0d9      	beq.n	800e5c8 <__swbuf_r+0x36>
 800e614:	e7d6      	b.n	800e5c4 <__swbuf_r+0x32>
	...

0800e618 <__swsetup_r>:
 800e618:	4b2d      	ldr	r3, [pc, #180]	@ (800e6d0 <__swsetup_r+0xb8>)
 800e61a:	b570      	push	{r4, r5, r6, lr}
 800e61c:	0005      	movs	r5, r0
 800e61e:	6818      	ldr	r0, [r3, #0]
 800e620:	000c      	movs	r4, r1
 800e622:	2800      	cmp	r0, #0
 800e624:	d004      	beq.n	800e630 <__swsetup_r+0x18>
 800e626:	6a03      	ldr	r3, [r0, #32]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d101      	bne.n	800e630 <__swsetup_r+0x18>
 800e62c:	f7fe fa02 	bl	800ca34 <__sinit>
 800e630:	230c      	movs	r3, #12
 800e632:	5ee2      	ldrsh	r2, [r4, r3]
 800e634:	0713      	lsls	r3, r2, #28
 800e636:	d423      	bmi.n	800e680 <__swsetup_r+0x68>
 800e638:	06d3      	lsls	r3, r2, #27
 800e63a:	d407      	bmi.n	800e64c <__swsetup_r+0x34>
 800e63c:	2309      	movs	r3, #9
 800e63e:	602b      	str	r3, [r5, #0]
 800e640:	2340      	movs	r3, #64	@ 0x40
 800e642:	2001      	movs	r0, #1
 800e644:	4313      	orrs	r3, r2
 800e646:	81a3      	strh	r3, [r4, #12]
 800e648:	4240      	negs	r0, r0
 800e64a:	e03a      	b.n	800e6c2 <__swsetup_r+0xaa>
 800e64c:	0752      	lsls	r2, r2, #29
 800e64e:	d513      	bpl.n	800e678 <__swsetup_r+0x60>
 800e650:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e652:	2900      	cmp	r1, #0
 800e654:	d008      	beq.n	800e668 <__swsetup_r+0x50>
 800e656:	0023      	movs	r3, r4
 800e658:	3344      	adds	r3, #68	@ 0x44
 800e65a:	4299      	cmp	r1, r3
 800e65c:	d002      	beq.n	800e664 <__swsetup_r+0x4c>
 800e65e:	0028      	movs	r0, r5
 800e660:	f7ff f9b4 	bl	800d9cc <_free_r>
 800e664:	2300      	movs	r3, #0
 800e666:	6363      	str	r3, [r4, #52]	@ 0x34
 800e668:	2224      	movs	r2, #36	@ 0x24
 800e66a:	89a3      	ldrh	r3, [r4, #12]
 800e66c:	4393      	bics	r3, r2
 800e66e:	81a3      	strh	r3, [r4, #12]
 800e670:	2300      	movs	r3, #0
 800e672:	6063      	str	r3, [r4, #4]
 800e674:	6923      	ldr	r3, [r4, #16]
 800e676:	6023      	str	r3, [r4, #0]
 800e678:	2308      	movs	r3, #8
 800e67a:	89a2      	ldrh	r2, [r4, #12]
 800e67c:	4313      	orrs	r3, r2
 800e67e:	81a3      	strh	r3, [r4, #12]
 800e680:	6923      	ldr	r3, [r4, #16]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d10b      	bne.n	800e69e <__swsetup_r+0x86>
 800e686:	21a0      	movs	r1, #160	@ 0xa0
 800e688:	2280      	movs	r2, #128	@ 0x80
 800e68a:	89a3      	ldrh	r3, [r4, #12]
 800e68c:	0089      	lsls	r1, r1, #2
 800e68e:	0092      	lsls	r2, r2, #2
 800e690:	400b      	ands	r3, r1
 800e692:	4293      	cmp	r3, r2
 800e694:	d003      	beq.n	800e69e <__swsetup_r+0x86>
 800e696:	0021      	movs	r1, r4
 800e698:	0028      	movs	r0, r5
 800e69a:	f000 f8b9 	bl	800e810 <__smakebuf_r>
 800e69e:	230c      	movs	r3, #12
 800e6a0:	5ee2      	ldrsh	r2, [r4, r3]
 800e6a2:	2101      	movs	r1, #1
 800e6a4:	0013      	movs	r3, r2
 800e6a6:	400b      	ands	r3, r1
 800e6a8:	420a      	tst	r2, r1
 800e6aa:	d00b      	beq.n	800e6c4 <__swsetup_r+0xac>
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	60a3      	str	r3, [r4, #8]
 800e6b0:	6963      	ldr	r3, [r4, #20]
 800e6b2:	425b      	negs	r3, r3
 800e6b4:	61a3      	str	r3, [r4, #24]
 800e6b6:	2000      	movs	r0, #0
 800e6b8:	6923      	ldr	r3, [r4, #16]
 800e6ba:	4283      	cmp	r3, r0
 800e6bc:	d101      	bne.n	800e6c2 <__swsetup_r+0xaa>
 800e6be:	0613      	lsls	r3, r2, #24
 800e6c0:	d4be      	bmi.n	800e640 <__swsetup_r+0x28>
 800e6c2:	bd70      	pop	{r4, r5, r6, pc}
 800e6c4:	0791      	lsls	r1, r2, #30
 800e6c6:	d400      	bmi.n	800e6ca <__swsetup_r+0xb2>
 800e6c8:	6963      	ldr	r3, [r4, #20]
 800e6ca:	60a3      	str	r3, [r4, #8]
 800e6cc:	e7f3      	b.n	800e6b6 <__swsetup_r+0x9e>
 800e6ce:	46c0      	nop			@ (mov r8, r8)
 800e6d0:	20000184 	.word	0x20000184

0800e6d4 <memcpy>:
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	b510      	push	{r4, lr}
 800e6d8:	429a      	cmp	r2, r3
 800e6da:	d100      	bne.n	800e6de <memcpy+0xa>
 800e6dc:	bd10      	pop	{r4, pc}
 800e6de:	5ccc      	ldrb	r4, [r1, r3]
 800e6e0:	54c4      	strb	r4, [r0, r3]
 800e6e2:	3301      	adds	r3, #1
 800e6e4:	e7f8      	b.n	800e6d8 <memcpy+0x4>
	...

0800e6e8 <__assert_func>:
 800e6e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e6ea:	0014      	movs	r4, r2
 800e6ec:	001a      	movs	r2, r3
 800e6ee:	4b09      	ldr	r3, [pc, #36]	@ (800e714 <__assert_func+0x2c>)
 800e6f0:	0005      	movs	r5, r0
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	000e      	movs	r6, r1
 800e6f6:	68d8      	ldr	r0, [r3, #12]
 800e6f8:	4b07      	ldr	r3, [pc, #28]	@ (800e718 <__assert_func+0x30>)
 800e6fa:	2c00      	cmp	r4, #0
 800e6fc:	d101      	bne.n	800e702 <__assert_func+0x1a>
 800e6fe:	4b07      	ldr	r3, [pc, #28]	@ (800e71c <__assert_func+0x34>)
 800e700:	001c      	movs	r4, r3
 800e702:	4907      	ldr	r1, [pc, #28]	@ (800e720 <__assert_func+0x38>)
 800e704:	9301      	str	r3, [sp, #4]
 800e706:	9402      	str	r4, [sp, #8]
 800e708:	002b      	movs	r3, r5
 800e70a:	9600      	str	r6, [sp, #0]
 800e70c:	f7fe f9aa 	bl	800ca64 <fiprintf>
 800e710:	f000 f8e4 	bl	800e8dc <abort>
 800e714:	20000184 	.word	0x20000184
 800e718:	0801a50b 	.word	0x0801a50b
 800e71c:	0801a546 	.word	0x0801a546
 800e720:	0801a518 	.word	0x0801a518

0800e724 <_calloc_r>:
 800e724:	b570      	push	{r4, r5, r6, lr}
 800e726:	0c0b      	lsrs	r3, r1, #16
 800e728:	0c15      	lsrs	r5, r2, #16
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d11e      	bne.n	800e76c <_calloc_r+0x48>
 800e72e:	2d00      	cmp	r5, #0
 800e730:	d10c      	bne.n	800e74c <_calloc_r+0x28>
 800e732:	b289      	uxth	r1, r1
 800e734:	b294      	uxth	r4, r2
 800e736:	434c      	muls	r4, r1
 800e738:	0021      	movs	r1, r4
 800e73a:	f7fd fbf9 	bl	800bf30 <_malloc_r>
 800e73e:	1e05      	subs	r5, r0, #0
 800e740:	d01a      	beq.n	800e778 <_calloc_r+0x54>
 800e742:	0022      	movs	r2, r4
 800e744:	2100      	movs	r1, #0
 800e746:	f7fe fa05 	bl	800cb54 <memset>
 800e74a:	e016      	b.n	800e77a <_calloc_r+0x56>
 800e74c:	1c2b      	adds	r3, r5, #0
 800e74e:	1c0c      	adds	r4, r1, #0
 800e750:	b289      	uxth	r1, r1
 800e752:	b292      	uxth	r2, r2
 800e754:	434a      	muls	r2, r1
 800e756:	b29b      	uxth	r3, r3
 800e758:	b2a1      	uxth	r1, r4
 800e75a:	4359      	muls	r1, r3
 800e75c:	0c14      	lsrs	r4, r2, #16
 800e75e:	190c      	adds	r4, r1, r4
 800e760:	0c23      	lsrs	r3, r4, #16
 800e762:	d107      	bne.n	800e774 <_calloc_r+0x50>
 800e764:	0424      	lsls	r4, r4, #16
 800e766:	b292      	uxth	r2, r2
 800e768:	4314      	orrs	r4, r2
 800e76a:	e7e5      	b.n	800e738 <_calloc_r+0x14>
 800e76c:	2d00      	cmp	r5, #0
 800e76e:	d101      	bne.n	800e774 <_calloc_r+0x50>
 800e770:	1c14      	adds	r4, r2, #0
 800e772:	e7ed      	b.n	800e750 <_calloc_r+0x2c>
 800e774:	230c      	movs	r3, #12
 800e776:	6003      	str	r3, [r0, #0]
 800e778:	2500      	movs	r5, #0
 800e77a:	0028      	movs	r0, r5
 800e77c:	bd70      	pop	{r4, r5, r6, pc}

0800e77e <__ascii_mbtowc>:
 800e77e:	b082      	sub	sp, #8
 800e780:	2900      	cmp	r1, #0
 800e782:	d100      	bne.n	800e786 <__ascii_mbtowc+0x8>
 800e784:	a901      	add	r1, sp, #4
 800e786:	1e10      	subs	r0, r2, #0
 800e788:	d006      	beq.n	800e798 <__ascii_mbtowc+0x1a>
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d006      	beq.n	800e79c <__ascii_mbtowc+0x1e>
 800e78e:	7813      	ldrb	r3, [r2, #0]
 800e790:	600b      	str	r3, [r1, #0]
 800e792:	7810      	ldrb	r0, [r2, #0]
 800e794:	1e43      	subs	r3, r0, #1
 800e796:	4198      	sbcs	r0, r3
 800e798:	b002      	add	sp, #8
 800e79a:	4770      	bx	lr
 800e79c:	2002      	movs	r0, #2
 800e79e:	4240      	negs	r0, r0
 800e7a0:	e7fa      	b.n	800e798 <__ascii_mbtowc+0x1a>

0800e7a2 <__ascii_wctomb>:
 800e7a2:	0003      	movs	r3, r0
 800e7a4:	1e08      	subs	r0, r1, #0
 800e7a6:	d005      	beq.n	800e7b4 <__ascii_wctomb+0x12>
 800e7a8:	2aff      	cmp	r2, #255	@ 0xff
 800e7aa:	d904      	bls.n	800e7b6 <__ascii_wctomb+0x14>
 800e7ac:	228a      	movs	r2, #138	@ 0x8a
 800e7ae:	2001      	movs	r0, #1
 800e7b0:	601a      	str	r2, [r3, #0]
 800e7b2:	4240      	negs	r0, r0
 800e7b4:	4770      	bx	lr
 800e7b6:	2001      	movs	r0, #1
 800e7b8:	700a      	strb	r2, [r1, #0]
 800e7ba:	e7fb      	b.n	800e7b4 <__ascii_wctomb+0x12>

0800e7bc <__swhatbuf_r>:
 800e7bc:	b570      	push	{r4, r5, r6, lr}
 800e7be:	000e      	movs	r6, r1
 800e7c0:	001d      	movs	r5, r3
 800e7c2:	230e      	movs	r3, #14
 800e7c4:	5ec9      	ldrsh	r1, [r1, r3]
 800e7c6:	0014      	movs	r4, r2
 800e7c8:	b096      	sub	sp, #88	@ 0x58
 800e7ca:	2900      	cmp	r1, #0
 800e7cc:	da0c      	bge.n	800e7e8 <__swhatbuf_r+0x2c>
 800e7ce:	89b2      	ldrh	r2, [r6, #12]
 800e7d0:	2380      	movs	r3, #128	@ 0x80
 800e7d2:	0011      	movs	r1, r2
 800e7d4:	4019      	ands	r1, r3
 800e7d6:	421a      	tst	r2, r3
 800e7d8:	d114      	bne.n	800e804 <__swhatbuf_r+0x48>
 800e7da:	2380      	movs	r3, #128	@ 0x80
 800e7dc:	00db      	lsls	r3, r3, #3
 800e7de:	2000      	movs	r0, #0
 800e7e0:	6029      	str	r1, [r5, #0]
 800e7e2:	6023      	str	r3, [r4, #0]
 800e7e4:	b016      	add	sp, #88	@ 0x58
 800e7e6:	bd70      	pop	{r4, r5, r6, pc}
 800e7e8:	466a      	mov	r2, sp
 800e7ea:	f000 f853 	bl	800e894 <_fstat_r>
 800e7ee:	2800      	cmp	r0, #0
 800e7f0:	dbed      	blt.n	800e7ce <__swhatbuf_r+0x12>
 800e7f2:	23f0      	movs	r3, #240	@ 0xf0
 800e7f4:	9901      	ldr	r1, [sp, #4]
 800e7f6:	021b      	lsls	r3, r3, #8
 800e7f8:	4019      	ands	r1, r3
 800e7fa:	4b04      	ldr	r3, [pc, #16]	@ (800e80c <__swhatbuf_r+0x50>)
 800e7fc:	18c9      	adds	r1, r1, r3
 800e7fe:	424b      	negs	r3, r1
 800e800:	4159      	adcs	r1, r3
 800e802:	e7ea      	b.n	800e7da <__swhatbuf_r+0x1e>
 800e804:	2100      	movs	r1, #0
 800e806:	2340      	movs	r3, #64	@ 0x40
 800e808:	e7e9      	b.n	800e7de <__swhatbuf_r+0x22>
 800e80a:	46c0      	nop			@ (mov r8, r8)
 800e80c:	ffffe000 	.word	0xffffe000

0800e810 <__smakebuf_r>:
 800e810:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e812:	2602      	movs	r6, #2
 800e814:	898b      	ldrh	r3, [r1, #12]
 800e816:	0005      	movs	r5, r0
 800e818:	000c      	movs	r4, r1
 800e81a:	b085      	sub	sp, #20
 800e81c:	4233      	tst	r3, r6
 800e81e:	d007      	beq.n	800e830 <__smakebuf_r+0x20>
 800e820:	0023      	movs	r3, r4
 800e822:	3347      	adds	r3, #71	@ 0x47
 800e824:	6023      	str	r3, [r4, #0]
 800e826:	6123      	str	r3, [r4, #16]
 800e828:	2301      	movs	r3, #1
 800e82a:	6163      	str	r3, [r4, #20]
 800e82c:	b005      	add	sp, #20
 800e82e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e830:	ab03      	add	r3, sp, #12
 800e832:	aa02      	add	r2, sp, #8
 800e834:	f7ff ffc2 	bl	800e7bc <__swhatbuf_r>
 800e838:	9f02      	ldr	r7, [sp, #8]
 800e83a:	9001      	str	r0, [sp, #4]
 800e83c:	0039      	movs	r1, r7
 800e83e:	0028      	movs	r0, r5
 800e840:	f7fd fb76 	bl	800bf30 <_malloc_r>
 800e844:	2800      	cmp	r0, #0
 800e846:	d108      	bne.n	800e85a <__smakebuf_r+0x4a>
 800e848:	220c      	movs	r2, #12
 800e84a:	5ea3      	ldrsh	r3, [r4, r2]
 800e84c:	059a      	lsls	r2, r3, #22
 800e84e:	d4ed      	bmi.n	800e82c <__smakebuf_r+0x1c>
 800e850:	2203      	movs	r2, #3
 800e852:	4393      	bics	r3, r2
 800e854:	431e      	orrs	r6, r3
 800e856:	81a6      	strh	r6, [r4, #12]
 800e858:	e7e2      	b.n	800e820 <__smakebuf_r+0x10>
 800e85a:	2380      	movs	r3, #128	@ 0x80
 800e85c:	89a2      	ldrh	r2, [r4, #12]
 800e85e:	6020      	str	r0, [r4, #0]
 800e860:	4313      	orrs	r3, r2
 800e862:	81a3      	strh	r3, [r4, #12]
 800e864:	9b03      	ldr	r3, [sp, #12]
 800e866:	6120      	str	r0, [r4, #16]
 800e868:	6167      	str	r7, [r4, #20]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d00c      	beq.n	800e888 <__smakebuf_r+0x78>
 800e86e:	0028      	movs	r0, r5
 800e870:	230e      	movs	r3, #14
 800e872:	5ee1      	ldrsh	r1, [r4, r3]
 800e874:	f000 f820 	bl	800e8b8 <_isatty_r>
 800e878:	2800      	cmp	r0, #0
 800e87a:	d005      	beq.n	800e888 <__smakebuf_r+0x78>
 800e87c:	2303      	movs	r3, #3
 800e87e:	89a2      	ldrh	r2, [r4, #12]
 800e880:	439a      	bics	r2, r3
 800e882:	3b02      	subs	r3, #2
 800e884:	4313      	orrs	r3, r2
 800e886:	81a3      	strh	r3, [r4, #12]
 800e888:	89a3      	ldrh	r3, [r4, #12]
 800e88a:	9a01      	ldr	r2, [sp, #4]
 800e88c:	4313      	orrs	r3, r2
 800e88e:	81a3      	strh	r3, [r4, #12]
 800e890:	e7cc      	b.n	800e82c <__smakebuf_r+0x1c>
	...

0800e894 <_fstat_r>:
 800e894:	2300      	movs	r3, #0
 800e896:	b570      	push	{r4, r5, r6, lr}
 800e898:	4d06      	ldr	r5, [pc, #24]	@ (800e8b4 <_fstat_r+0x20>)
 800e89a:	0004      	movs	r4, r0
 800e89c:	0008      	movs	r0, r1
 800e89e:	0011      	movs	r1, r2
 800e8a0:	602b      	str	r3, [r5, #0]
 800e8a2:	f7f8 fc07 	bl	80070b4 <_fstat>
 800e8a6:	1c43      	adds	r3, r0, #1
 800e8a8:	d103      	bne.n	800e8b2 <_fstat_r+0x1e>
 800e8aa:	682b      	ldr	r3, [r5, #0]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d000      	beq.n	800e8b2 <_fstat_r+0x1e>
 800e8b0:	6023      	str	r3, [r4, #0]
 800e8b2:	bd70      	pop	{r4, r5, r6, pc}
 800e8b4:	200006ec 	.word	0x200006ec

0800e8b8 <_isatty_r>:
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	b570      	push	{r4, r5, r6, lr}
 800e8bc:	4d06      	ldr	r5, [pc, #24]	@ (800e8d8 <_isatty_r+0x20>)
 800e8be:	0004      	movs	r4, r0
 800e8c0:	0008      	movs	r0, r1
 800e8c2:	602b      	str	r3, [r5, #0]
 800e8c4:	f7f8 fbfc 	bl	80070c0 <_isatty>
 800e8c8:	1c43      	adds	r3, r0, #1
 800e8ca:	d103      	bne.n	800e8d4 <_isatty_r+0x1c>
 800e8cc:	682b      	ldr	r3, [r5, #0]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d000      	beq.n	800e8d4 <_isatty_r+0x1c>
 800e8d2:	6023      	str	r3, [r4, #0]
 800e8d4:	bd70      	pop	{r4, r5, r6, pc}
 800e8d6:	46c0      	nop			@ (mov r8, r8)
 800e8d8:	200006ec 	.word	0x200006ec

0800e8dc <abort>:
 800e8dc:	2006      	movs	r0, #6
 800e8de:	b510      	push	{r4, lr}
 800e8e0:	f000 f82c 	bl	800e93c <raise>
 800e8e4:	2001      	movs	r0, #1
 800e8e6:	f7f8 fbbf 	bl	8007068 <_exit>

0800e8ea <_raise_r>:
 800e8ea:	b570      	push	{r4, r5, r6, lr}
 800e8ec:	0004      	movs	r4, r0
 800e8ee:	000d      	movs	r5, r1
 800e8f0:	291f      	cmp	r1, #31
 800e8f2:	d904      	bls.n	800e8fe <_raise_r+0x14>
 800e8f4:	2316      	movs	r3, #22
 800e8f6:	6003      	str	r3, [r0, #0]
 800e8f8:	2001      	movs	r0, #1
 800e8fa:	4240      	negs	r0, r0
 800e8fc:	bd70      	pop	{r4, r5, r6, pc}
 800e8fe:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800e900:	2b00      	cmp	r3, #0
 800e902:	d004      	beq.n	800e90e <_raise_r+0x24>
 800e904:	008a      	lsls	r2, r1, #2
 800e906:	189b      	adds	r3, r3, r2
 800e908:	681a      	ldr	r2, [r3, #0]
 800e90a:	2a00      	cmp	r2, #0
 800e90c:	d108      	bne.n	800e920 <_raise_r+0x36>
 800e90e:	0020      	movs	r0, r4
 800e910:	f000 f830 	bl	800e974 <_getpid_r>
 800e914:	002a      	movs	r2, r5
 800e916:	0001      	movs	r1, r0
 800e918:	0020      	movs	r0, r4
 800e91a:	f000 f819 	bl	800e950 <_kill_r>
 800e91e:	e7ed      	b.n	800e8fc <_raise_r+0x12>
 800e920:	2a01      	cmp	r2, #1
 800e922:	d009      	beq.n	800e938 <_raise_r+0x4e>
 800e924:	1c51      	adds	r1, r2, #1
 800e926:	d103      	bne.n	800e930 <_raise_r+0x46>
 800e928:	2316      	movs	r3, #22
 800e92a:	6003      	str	r3, [r0, #0]
 800e92c:	2001      	movs	r0, #1
 800e92e:	e7e5      	b.n	800e8fc <_raise_r+0x12>
 800e930:	2100      	movs	r1, #0
 800e932:	0028      	movs	r0, r5
 800e934:	6019      	str	r1, [r3, #0]
 800e936:	4790      	blx	r2
 800e938:	2000      	movs	r0, #0
 800e93a:	e7df      	b.n	800e8fc <_raise_r+0x12>

0800e93c <raise>:
 800e93c:	b510      	push	{r4, lr}
 800e93e:	4b03      	ldr	r3, [pc, #12]	@ (800e94c <raise+0x10>)
 800e940:	0001      	movs	r1, r0
 800e942:	6818      	ldr	r0, [r3, #0]
 800e944:	f7ff ffd1 	bl	800e8ea <_raise_r>
 800e948:	bd10      	pop	{r4, pc}
 800e94a:	46c0      	nop			@ (mov r8, r8)
 800e94c:	20000184 	.word	0x20000184

0800e950 <_kill_r>:
 800e950:	2300      	movs	r3, #0
 800e952:	b570      	push	{r4, r5, r6, lr}
 800e954:	4d06      	ldr	r5, [pc, #24]	@ (800e970 <_kill_r+0x20>)
 800e956:	0004      	movs	r4, r0
 800e958:	0008      	movs	r0, r1
 800e95a:	0011      	movs	r1, r2
 800e95c:	602b      	str	r3, [r5, #0]
 800e95e:	f7f8 fb7b 	bl	8007058 <_kill>
 800e962:	1c43      	adds	r3, r0, #1
 800e964:	d103      	bne.n	800e96e <_kill_r+0x1e>
 800e966:	682b      	ldr	r3, [r5, #0]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d000      	beq.n	800e96e <_kill_r+0x1e>
 800e96c:	6023      	str	r3, [r4, #0]
 800e96e:	bd70      	pop	{r4, r5, r6, pc}
 800e970:	200006ec 	.word	0x200006ec

0800e974 <_getpid_r>:
 800e974:	b510      	push	{r4, lr}
 800e976:	f7f8 fb6d 	bl	8007054 <_getpid>
 800e97a:	bd10      	pop	{r4, pc}

0800e97c <_init>:
 800e97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e97e:	46c0      	nop			@ (mov r8, r8)
 800e980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e982:	bc08      	pop	{r3}
 800e984:	469e      	mov	lr, r3
 800e986:	4770      	bx	lr

0800e988 <_fini>:
 800e988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e98a:	46c0      	nop			@ (mov r8, r8)
 800e98c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e98e:	bc08      	pop	{r3}
 800e990:	469e      	mov	lr, r3
 800e992:	4770      	bx	lr
