
e-paper_18x5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f884  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000bdf8  0800f948  0800f948  00010948  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b740  0801b740  0001d340  2**0
                  CONTENTS
  4 .ARM          00000008  0801b740  0801b740  0001c740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b748  0801b748  0001d340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b748  0801b748  0001c748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b74c  0801b74c  0001c74c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000340  20000000  0801b750  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  20000340  0801ba90  0001d340  2**2
                  ALLOC
 10 ._user_heap_stack 00001900  20000748  0801ba90  0001d748  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001d340  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020c4a  00000000  00000000  0001d368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004eac  00000000  00000000  0003dfb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b30  00000000  00000000  00042e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014be  00000000  00000000  00044990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025517  00000000  00000000  00045e4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026483  00000000  00000000  0006b365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5ba9  00000000  00000000  000917e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00167391  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007084  00000000  00000000  001673d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0016e458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000340 	.word	0x20000340
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800f92c 	.word	0x0800f92c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000344 	.word	0x20000344
 8000104:	0800f92c 	.word	0x0800f92c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f891 	bl	8001564 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ffd1 	bl	80013f4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f883 	bl	8001564 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f879 	bl	8001564 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fffb 	bl	800147c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fff1 	bl	800147c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__clzsi2>:
 80004a8:	211c      	movs	r1, #28
 80004aa:	2301      	movs	r3, #1
 80004ac:	041b      	lsls	r3, r3, #16
 80004ae:	4298      	cmp	r0, r3
 80004b0:	d301      	bcc.n	80004b6 <__clzsi2+0xe>
 80004b2:	0c00      	lsrs	r0, r0, #16
 80004b4:	3910      	subs	r1, #16
 80004b6:	0a1b      	lsrs	r3, r3, #8
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d301      	bcc.n	80004c0 <__clzsi2+0x18>
 80004bc:	0a00      	lsrs	r0, r0, #8
 80004be:	3908      	subs	r1, #8
 80004c0:	091b      	lsrs	r3, r3, #4
 80004c2:	4298      	cmp	r0, r3
 80004c4:	d301      	bcc.n	80004ca <__clzsi2+0x22>
 80004c6:	0900      	lsrs	r0, r0, #4
 80004c8:	3904      	subs	r1, #4
 80004ca:	a202      	add	r2, pc, #8	@ (adr r2, 80004d4 <__clzsi2+0x2c>)
 80004cc:	5c10      	ldrb	r0, [r2, r0]
 80004ce:	1840      	adds	r0, r0, r1
 80004d0:	4770      	bx	lr
 80004d2:	46c0      	nop			@ (mov r8, r8)
 80004d4:	02020304 	.word	0x02020304
 80004d8:	01010101 	.word	0x01010101
	...

080004e4 <__aeabi_uldivmod>:
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d111      	bne.n	800050c <__aeabi_uldivmod+0x28>
 80004e8:	2a00      	cmp	r2, #0
 80004ea:	d10f      	bne.n	800050c <__aeabi_uldivmod+0x28>
 80004ec:	2900      	cmp	r1, #0
 80004ee:	d100      	bne.n	80004f2 <__aeabi_uldivmod+0xe>
 80004f0:	2800      	cmp	r0, #0
 80004f2:	d002      	beq.n	80004fa <__aeabi_uldivmod+0x16>
 80004f4:	2100      	movs	r1, #0
 80004f6:	43c9      	mvns	r1, r1
 80004f8:	0008      	movs	r0, r1
 80004fa:	b407      	push	{r0, r1, r2}
 80004fc:	4802      	ldr	r0, [pc, #8]	@ (8000508 <__aeabi_uldivmod+0x24>)
 80004fe:	a102      	add	r1, pc, #8	@ (adr r1, 8000508 <__aeabi_uldivmod+0x24>)
 8000500:	1840      	adds	r0, r0, r1
 8000502:	9002      	str	r0, [sp, #8]
 8000504:	bd03      	pop	{r0, r1, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)
 8000508:	ffffff21 	.word	0xffffff21
 800050c:	b403      	push	{r0, r1}
 800050e:	4668      	mov	r0, sp
 8000510:	b501      	push	{r0, lr}
 8000512:	9802      	ldr	r0, [sp, #8]
 8000514:	f000 f824 	bl	8000560 <__udivmoddi4>
 8000518:	9b01      	ldr	r3, [sp, #4]
 800051a:	469e      	mov	lr, r3
 800051c:	b002      	add	sp, #8
 800051e:	bc0c      	pop	{r2, r3}
 8000520:	4770      	bx	lr
 8000522:	46c0      	nop			@ (mov r8, r8)

08000524 <__aeabi_d2uiz>:
 8000524:	b570      	push	{r4, r5, r6, lr}
 8000526:	2200      	movs	r2, #0
 8000528:	4b0c      	ldr	r3, [pc, #48]	@ (800055c <__aeabi_d2uiz+0x38>)
 800052a:	0004      	movs	r4, r0
 800052c:	000d      	movs	r5, r1
 800052e:	f7ff ffb1 	bl	8000494 <__aeabi_dcmpge>
 8000532:	2800      	cmp	r0, #0
 8000534:	d104      	bne.n	8000540 <__aeabi_d2uiz+0x1c>
 8000536:	0020      	movs	r0, r4
 8000538:	0029      	movs	r1, r5
 800053a:	f001 ff0b 	bl	8002354 <__aeabi_d2iz>
 800053e:	bd70      	pop	{r4, r5, r6, pc}
 8000540:	4b06      	ldr	r3, [pc, #24]	@ (800055c <__aeabi_d2uiz+0x38>)
 8000542:	2200      	movs	r2, #0
 8000544:	0020      	movs	r0, r4
 8000546:	0029      	movs	r1, r5
 8000548:	f001 fb46 	bl	8001bd8 <__aeabi_dsub>
 800054c:	f001 ff02 	bl	8002354 <__aeabi_d2iz>
 8000550:	2380      	movs	r3, #128	@ 0x80
 8000552:	061b      	lsls	r3, r3, #24
 8000554:	469c      	mov	ip, r3
 8000556:	4460      	add	r0, ip
 8000558:	e7f1      	b.n	800053e <__aeabi_d2uiz+0x1a>
 800055a:	46c0      	nop			@ (mov r8, r8)
 800055c:	41e00000 	.word	0x41e00000

08000560 <__udivmoddi4>:
 8000560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000562:	4657      	mov	r7, sl
 8000564:	464e      	mov	r6, r9
 8000566:	4645      	mov	r5, r8
 8000568:	46de      	mov	lr, fp
 800056a:	b5e0      	push	{r5, r6, r7, lr}
 800056c:	0004      	movs	r4, r0
 800056e:	000d      	movs	r5, r1
 8000570:	4692      	mov	sl, r2
 8000572:	4699      	mov	r9, r3
 8000574:	b083      	sub	sp, #12
 8000576:	428b      	cmp	r3, r1
 8000578:	d830      	bhi.n	80005dc <__udivmoddi4+0x7c>
 800057a:	d02d      	beq.n	80005d8 <__udivmoddi4+0x78>
 800057c:	4649      	mov	r1, r9
 800057e:	4650      	mov	r0, sl
 8000580:	f001 ff76 	bl	8002470 <__clzdi2>
 8000584:	0029      	movs	r1, r5
 8000586:	0006      	movs	r6, r0
 8000588:	0020      	movs	r0, r4
 800058a:	f001 ff71 	bl	8002470 <__clzdi2>
 800058e:	1a33      	subs	r3, r6, r0
 8000590:	4698      	mov	r8, r3
 8000592:	3b20      	subs	r3, #32
 8000594:	d434      	bmi.n	8000600 <__udivmoddi4+0xa0>
 8000596:	469b      	mov	fp, r3
 8000598:	4653      	mov	r3, sl
 800059a:	465a      	mov	r2, fp
 800059c:	4093      	lsls	r3, r2
 800059e:	4642      	mov	r2, r8
 80005a0:	001f      	movs	r7, r3
 80005a2:	4653      	mov	r3, sl
 80005a4:	4093      	lsls	r3, r2
 80005a6:	001e      	movs	r6, r3
 80005a8:	42af      	cmp	r7, r5
 80005aa:	d83b      	bhi.n	8000624 <__udivmoddi4+0xc4>
 80005ac:	42af      	cmp	r7, r5
 80005ae:	d100      	bne.n	80005b2 <__udivmoddi4+0x52>
 80005b0:	e079      	b.n	80006a6 <__udivmoddi4+0x146>
 80005b2:	465b      	mov	r3, fp
 80005b4:	1ba4      	subs	r4, r4, r6
 80005b6:	41bd      	sbcs	r5, r7
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	da00      	bge.n	80005be <__udivmoddi4+0x5e>
 80005bc:	e076      	b.n	80006ac <__udivmoddi4+0x14c>
 80005be:	2200      	movs	r2, #0
 80005c0:	2300      	movs	r3, #0
 80005c2:	9200      	str	r2, [sp, #0]
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2301      	movs	r3, #1
 80005c8:	465a      	mov	r2, fp
 80005ca:	4093      	lsls	r3, r2
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2301      	movs	r3, #1
 80005d0:	4642      	mov	r2, r8
 80005d2:	4093      	lsls	r3, r2
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	e029      	b.n	800062c <__udivmoddi4+0xcc>
 80005d8:	4282      	cmp	r2, r0
 80005da:	d9cf      	bls.n	800057c <__udivmoddi4+0x1c>
 80005dc:	2200      	movs	r2, #0
 80005de:	2300      	movs	r3, #0
 80005e0:	9200      	str	r2, [sp, #0]
 80005e2:	9301      	str	r3, [sp, #4]
 80005e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <__udivmoddi4+0x8e>
 80005ea:	601c      	str	r4, [r3, #0]
 80005ec:	605d      	str	r5, [r3, #4]
 80005ee:	9800      	ldr	r0, [sp, #0]
 80005f0:	9901      	ldr	r1, [sp, #4]
 80005f2:	b003      	add	sp, #12
 80005f4:	bcf0      	pop	{r4, r5, r6, r7}
 80005f6:	46bb      	mov	fp, r7
 80005f8:	46b2      	mov	sl, r6
 80005fa:	46a9      	mov	r9, r5
 80005fc:	46a0      	mov	r8, r4
 80005fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000600:	4642      	mov	r2, r8
 8000602:	469b      	mov	fp, r3
 8000604:	2320      	movs	r3, #32
 8000606:	1a9b      	subs	r3, r3, r2
 8000608:	4652      	mov	r2, sl
 800060a:	40da      	lsrs	r2, r3
 800060c:	4641      	mov	r1, r8
 800060e:	0013      	movs	r3, r2
 8000610:	464a      	mov	r2, r9
 8000612:	408a      	lsls	r2, r1
 8000614:	0017      	movs	r7, r2
 8000616:	4642      	mov	r2, r8
 8000618:	431f      	orrs	r7, r3
 800061a:	4653      	mov	r3, sl
 800061c:	4093      	lsls	r3, r2
 800061e:	001e      	movs	r6, r3
 8000620:	42af      	cmp	r7, r5
 8000622:	d9c3      	bls.n	80005ac <__udivmoddi4+0x4c>
 8000624:	2200      	movs	r2, #0
 8000626:	2300      	movs	r3, #0
 8000628:	9200      	str	r2, [sp, #0]
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	4643      	mov	r3, r8
 800062e:	2b00      	cmp	r3, #0
 8000630:	d0d8      	beq.n	80005e4 <__udivmoddi4+0x84>
 8000632:	07fb      	lsls	r3, r7, #31
 8000634:	0872      	lsrs	r2, r6, #1
 8000636:	431a      	orrs	r2, r3
 8000638:	4646      	mov	r6, r8
 800063a:	087b      	lsrs	r3, r7, #1
 800063c:	e00e      	b.n	800065c <__udivmoddi4+0xfc>
 800063e:	42ab      	cmp	r3, r5
 8000640:	d101      	bne.n	8000646 <__udivmoddi4+0xe6>
 8000642:	42a2      	cmp	r2, r4
 8000644:	d80c      	bhi.n	8000660 <__udivmoddi4+0x100>
 8000646:	1aa4      	subs	r4, r4, r2
 8000648:	419d      	sbcs	r5, r3
 800064a:	2001      	movs	r0, #1
 800064c:	1924      	adds	r4, r4, r4
 800064e:	416d      	adcs	r5, r5
 8000650:	2100      	movs	r1, #0
 8000652:	3e01      	subs	r6, #1
 8000654:	1824      	adds	r4, r4, r0
 8000656:	414d      	adcs	r5, r1
 8000658:	2e00      	cmp	r6, #0
 800065a:	d006      	beq.n	800066a <__udivmoddi4+0x10a>
 800065c:	42ab      	cmp	r3, r5
 800065e:	d9ee      	bls.n	800063e <__udivmoddi4+0xde>
 8000660:	3e01      	subs	r6, #1
 8000662:	1924      	adds	r4, r4, r4
 8000664:	416d      	adcs	r5, r5
 8000666:	2e00      	cmp	r6, #0
 8000668:	d1f8      	bne.n	800065c <__udivmoddi4+0xfc>
 800066a:	9800      	ldr	r0, [sp, #0]
 800066c:	9901      	ldr	r1, [sp, #4]
 800066e:	465b      	mov	r3, fp
 8000670:	1900      	adds	r0, r0, r4
 8000672:	4169      	adcs	r1, r5
 8000674:	2b00      	cmp	r3, #0
 8000676:	db24      	blt.n	80006c2 <__udivmoddi4+0x162>
 8000678:	002b      	movs	r3, r5
 800067a:	465a      	mov	r2, fp
 800067c:	4644      	mov	r4, r8
 800067e:	40d3      	lsrs	r3, r2
 8000680:	002a      	movs	r2, r5
 8000682:	40e2      	lsrs	r2, r4
 8000684:	001c      	movs	r4, r3
 8000686:	465b      	mov	r3, fp
 8000688:	0015      	movs	r5, r2
 800068a:	2b00      	cmp	r3, #0
 800068c:	db2a      	blt.n	80006e4 <__udivmoddi4+0x184>
 800068e:	0026      	movs	r6, r4
 8000690:	409e      	lsls	r6, r3
 8000692:	0033      	movs	r3, r6
 8000694:	0026      	movs	r6, r4
 8000696:	4647      	mov	r7, r8
 8000698:	40be      	lsls	r6, r7
 800069a:	0032      	movs	r2, r6
 800069c:	1a80      	subs	r0, r0, r2
 800069e:	4199      	sbcs	r1, r3
 80006a0:	9000      	str	r0, [sp, #0]
 80006a2:	9101      	str	r1, [sp, #4]
 80006a4:	e79e      	b.n	80005e4 <__udivmoddi4+0x84>
 80006a6:	42a3      	cmp	r3, r4
 80006a8:	d8bc      	bhi.n	8000624 <__udivmoddi4+0xc4>
 80006aa:	e782      	b.n	80005b2 <__udivmoddi4+0x52>
 80006ac:	4642      	mov	r2, r8
 80006ae:	2320      	movs	r3, #32
 80006b0:	2100      	movs	r1, #0
 80006b2:	1a9b      	subs	r3, r3, r2
 80006b4:	2200      	movs	r2, #0
 80006b6:	9100      	str	r1, [sp, #0]
 80006b8:	9201      	str	r2, [sp, #4]
 80006ba:	2201      	movs	r2, #1
 80006bc:	40da      	lsrs	r2, r3
 80006be:	9201      	str	r2, [sp, #4]
 80006c0:	e785      	b.n	80005ce <__udivmoddi4+0x6e>
 80006c2:	4642      	mov	r2, r8
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	002a      	movs	r2, r5
 80006ca:	4646      	mov	r6, r8
 80006cc:	409a      	lsls	r2, r3
 80006ce:	0023      	movs	r3, r4
 80006d0:	40f3      	lsrs	r3, r6
 80006d2:	4644      	mov	r4, r8
 80006d4:	4313      	orrs	r3, r2
 80006d6:	002a      	movs	r2, r5
 80006d8:	40e2      	lsrs	r2, r4
 80006da:	001c      	movs	r4, r3
 80006dc:	465b      	mov	r3, fp
 80006de:	0015      	movs	r5, r2
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	dad4      	bge.n	800068e <__udivmoddi4+0x12e>
 80006e4:	4642      	mov	r2, r8
 80006e6:	002f      	movs	r7, r5
 80006e8:	2320      	movs	r3, #32
 80006ea:	0026      	movs	r6, r4
 80006ec:	4097      	lsls	r7, r2
 80006ee:	1a9b      	subs	r3, r3, r2
 80006f0:	40de      	lsrs	r6, r3
 80006f2:	003b      	movs	r3, r7
 80006f4:	4333      	orrs	r3, r6
 80006f6:	e7cd      	b.n	8000694 <__udivmoddi4+0x134>

080006f8 <__aeabi_dadd>:
 80006f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006fa:	4657      	mov	r7, sl
 80006fc:	464e      	mov	r6, r9
 80006fe:	4645      	mov	r5, r8
 8000700:	46de      	mov	lr, fp
 8000702:	b5e0      	push	{r5, r6, r7, lr}
 8000704:	b083      	sub	sp, #12
 8000706:	9000      	str	r0, [sp, #0]
 8000708:	9101      	str	r1, [sp, #4]
 800070a:	030c      	lsls	r4, r1, #12
 800070c:	004f      	lsls	r7, r1, #1
 800070e:	0fce      	lsrs	r6, r1, #31
 8000710:	0a61      	lsrs	r1, r4, #9
 8000712:	9c00      	ldr	r4, [sp, #0]
 8000714:	031d      	lsls	r5, r3, #12
 8000716:	0f64      	lsrs	r4, r4, #29
 8000718:	430c      	orrs	r4, r1
 800071a:	9900      	ldr	r1, [sp, #0]
 800071c:	9200      	str	r2, [sp, #0]
 800071e:	9301      	str	r3, [sp, #4]
 8000720:	00c8      	lsls	r0, r1, #3
 8000722:	0059      	lsls	r1, r3, #1
 8000724:	0d4b      	lsrs	r3, r1, #21
 8000726:	4699      	mov	r9, r3
 8000728:	9a00      	ldr	r2, [sp, #0]
 800072a:	9b01      	ldr	r3, [sp, #4]
 800072c:	0a6d      	lsrs	r5, r5, #9
 800072e:	0fd9      	lsrs	r1, r3, #31
 8000730:	0f53      	lsrs	r3, r2, #29
 8000732:	432b      	orrs	r3, r5
 8000734:	469a      	mov	sl, r3
 8000736:	9b00      	ldr	r3, [sp, #0]
 8000738:	0d7f      	lsrs	r7, r7, #21
 800073a:	00da      	lsls	r2, r3, #3
 800073c:	4694      	mov	ip, r2
 800073e:	464a      	mov	r2, r9
 8000740:	46b0      	mov	r8, r6
 8000742:	1aba      	subs	r2, r7, r2
 8000744:	428e      	cmp	r6, r1
 8000746:	d100      	bne.n	800074a <__aeabi_dadd+0x52>
 8000748:	e0b0      	b.n	80008ac <__aeabi_dadd+0x1b4>
 800074a:	2a00      	cmp	r2, #0
 800074c:	dc00      	bgt.n	8000750 <__aeabi_dadd+0x58>
 800074e:	e078      	b.n	8000842 <__aeabi_dadd+0x14a>
 8000750:	4649      	mov	r1, r9
 8000752:	2900      	cmp	r1, #0
 8000754:	d100      	bne.n	8000758 <__aeabi_dadd+0x60>
 8000756:	e0e9      	b.n	800092c <__aeabi_dadd+0x234>
 8000758:	49c9      	ldr	r1, [pc, #804]	@ (8000a80 <__aeabi_dadd+0x388>)
 800075a:	428f      	cmp	r7, r1
 800075c:	d100      	bne.n	8000760 <__aeabi_dadd+0x68>
 800075e:	e195      	b.n	8000a8c <__aeabi_dadd+0x394>
 8000760:	2501      	movs	r5, #1
 8000762:	2a38      	cmp	r2, #56	@ 0x38
 8000764:	dc16      	bgt.n	8000794 <__aeabi_dadd+0x9c>
 8000766:	2180      	movs	r1, #128	@ 0x80
 8000768:	4653      	mov	r3, sl
 800076a:	0409      	lsls	r1, r1, #16
 800076c:	430b      	orrs	r3, r1
 800076e:	469a      	mov	sl, r3
 8000770:	2a1f      	cmp	r2, #31
 8000772:	dd00      	ble.n	8000776 <__aeabi_dadd+0x7e>
 8000774:	e1e7      	b.n	8000b46 <__aeabi_dadd+0x44e>
 8000776:	2120      	movs	r1, #32
 8000778:	4655      	mov	r5, sl
 800077a:	1a8b      	subs	r3, r1, r2
 800077c:	4661      	mov	r1, ip
 800077e:	409d      	lsls	r5, r3
 8000780:	40d1      	lsrs	r1, r2
 8000782:	430d      	orrs	r5, r1
 8000784:	4661      	mov	r1, ip
 8000786:	4099      	lsls	r1, r3
 8000788:	1e4b      	subs	r3, r1, #1
 800078a:	4199      	sbcs	r1, r3
 800078c:	4653      	mov	r3, sl
 800078e:	40d3      	lsrs	r3, r2
 8000790:	430d      	orrs	r5, r1
 8000792:	1ae4      	subs	r4, r4, r3
 8000794:	1b45      	subs	r5, r0, r5
 8000796:	42a8      	cmp	r0, r5
 8000798:	4180      	sbcs	r0, r0
 800079a:	4240      	negs	r0, r0
 800079c:	1a24      	subs	r4, r4, r0
 800079e:	0223      	lsls	r3, r4, #8
 80007a0:	d400      	bmi.n	80007a4 <__aeabi_dadd+0xac>
 80007a2:	e10f      	b.n	80009c4 <__aeabi_dadd+0x2cc>
 80007a4:	0264      	lsls	r4, r4, #9
 80007a6:	0a64      	lsrs	r4, r4, #9
 80007a8:	2c00      	cmp	r4, #0
 80007aa:	d100      	bne.n	80007ae <__aeabi_dadd+0xb6>
 80007ac:	e139      	b.n	8000a22 <__aeabi_dadd+0x32a>
 80007ae:	0020      	movs	r0, r4
 80007b0:	f7ff fe7a 	bl	80004a8 <__clzsi2>
 80007b4:	0003      	movs	r3, r0
 80007b6:	3b08      	subs	r3, #8
 80007b8:	2120      	movs	r1, #32
 80007ba:	0028      	movs	r0, r5
 80007bc:	1aca      	subs	r2, r1, r3
 80007be:	40d0      	lsrs	r0, r2
 80007c0:	409c      	lsls	r4, r3
 80007c2:	0002      	movs	r2, r0
 80007c4:	409d      	lsls	r5, r3
 80007c6:	4322      	orrs	r2, r4
 80007c8:	429f      	cmp	r7, r3
 80007ca:	dd00      	ble.n	80007ce <__aeabi_dadd+0xd6>
 80007cc:	e173      	b.n	8000ab6 <__aeabi_dadd+0x3be>
 80007ce:	1bd8      	subs	r0, r3, r7
 80007d0:	3001      	adds	r0, #1
 80007d2:	1a09      	subs	r1, r1, r0
 80007d4:	002c      	movs	r4, r5
 80007d6:	408d      	lsls	r5, r1
 80007d8:	40c4      	lsrs	r4, r0
 80007da:	1e6b      	subs	r3, r5, #1
 80007dc:	419d      	sbcs	r5, r3
 80007de:	0013      	movs	r3, r2
 80007e0:	40c2      	lsrs	r2, r0
 80007e2:	408b      	lsls	r3, r1
 80007e4:	4325      	orrs	r5, r4
 80007e6:	2700      	movs	r7, #0
 80007e8:	0014      	movs	r4, r2
 80007ea:	431d      	orrs	r5, r3
 80007ec:	076b      	lsls	r3, r5, #29
 80007ee:	d009      	beq.n	8000804 <__aeabi_dadd+0x10c>
 80007f0:	230f      	movs	r3, #15
 80007f2:	402b      	ands	r3, r5
 80007f4:	2b04      	cmp	r3, #4
 80007f6:	d005      	beq.n	8000804 <__aeabi_dadd+0x10c>
 80007f8:	1d2b      	adds	r3, r5, #4
 80007fa:	42ab      	cmp	r3, r5
 80007fc:	41ad      	sbcs	r5, r5
 80007fe:	426d      	negs	r5, r5
 8000800:	1964      	adds	r4, r4, r5
 8000802:	001d      	movs	r5, r3
 8000804:	0223      	lsls	r3, r4, #8
 8000806:	d400      	bmi.n	800080a <__aeabi_dadd+0x112>
 8000808:	e12d      	b.n	8000a66 <__aeabi_dadd+0x36e>
 800080a:	4a9d      	ldr	r2, [pc, #628]	@ (8000a80 <__aeabi_dadd+0x388>)
 800080c:	3701      	adds	r7, #1
 800080e:	4297      	cmp	r7, r2
 8000810:	d100      	bne.n	8000814 <__aeabi_dadd+0x11c>
 8000812:	e0d3      	b.n	80009bc <__aeabi_dadd+0x2c4>
 8000814:	4646      	mov	r6, r8
 8000816:	499b      	ldr	r1, [pc, #620]	@ (8000a84 <__aeabi_dadd+0x38c>)
 8000818:	08ed      	lsrs	r5, r5, #3
 800081a:	4021      	ands	r1, r4
 800081c:	074a      	lsls	r2, r1, #29
 800081e:	432a      	orrs	r2, r5
 8000820:	057c      	lsls	r4, r7, #21
 8000822:	024d      	lsls	r5, r1, #9
 8000824:	0b2d      	lsrs	r5, r5, #12
 8000826:	0d64      	lsrs	r4, r4, #21
 8000828:	0524      	lsls	r4, r4, #20
 800082a:	432c      	orrs	r4, r5
 800082c:	07f6      	lsls	r6, r6, #31
 800082e:	4334      	orrs	r4, r6
 8000830:	0010      	movs	r0, r2
 8000832:	0021      	movs	r1, r4
 8000834:	b003      	add	sp, #12
 8000836:	bcf0      	pop	{r4, r5, r6, r7}
 8000838:	46bb      	mov	fp, r7
 800083a:	46b2      	mov	sl, r6
 800083c:	46a9      	mov	r9, r5
 800083e:	46a0      	mov	r8, r4
 8000840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000842:	2a00      	cmp	r2, #0
 8000844:	d100      	bne.n	8000848 <__aeabi_dadd+0x150>
 8000846:	e084      	b.n	8000952 <__aeabi_dadd+0x25a>
 8000848:	464a      	mov	r2, r9
 800084a:	1bd2      	subs	r2, r2, r7
 800084c:	2f00      	cmp	r7, #0
 800084e:	d000      	beq.n	8000852 <__aeabi_dadd+0x15a>
 8000850:	e16d      	b.n	8000b2e <__aeabi_dadd+0x436>
 8000852:	0025      	movs	r5, r4
 8000854:	4305      	orrs	r5, r0
 8000856:	d100      	bne.n	800085a <__aeabi_dadd+0x162>
 8000858:	e127      	b.n	8000aaa <__aeabi_dadd+0x3b2>
 800085a:	1e56      	subs	r6, r2, #1
 800085c:	2a01      	cmp	r2, #1
 800085e:	d100      	bne.n	8000862 <__aeabi_dadd+0x16a>
 8000860:	e23b      	b.n	8000cda <__aeabi_dadd+0x5e2>
 8000862:	4d87      	ldr	r5, [pc, #540]	@ (8000a80 <__aeabi_dadd+0x388>)
 8000864:	42aa      	cmp	r2, r5
 8000866:	d100      	bne.n	800086a <__aeabi_dadd+0x172>
 8000868:	e26a      	b.n	8000d40 <__aeabi_dadd+0x648>
 800086a:	2501      	movs	r5, #1
 800086c:	2e38      	cmp	r6, #56	@ 0x38
 800086e:	dc12      	bgt.n	8000896 <__aeabi_dadd+0x19e>
 8000870:	0032      	movs	r2, r6
 8000872:	2a1f      	cmp	r2, #31
 8000874:	dd00      	ble.n	8000878 <__aeabi_dadd+0x180>
 8000876:	e1f8      	b.n	8000c6a <__aeabi_dadd+0x572>
 8000878:	2620      	movs	r6, #32
 800087a:	0025      	movs	r5, r4
 800087c:	1ab6      	subs	r6, r6, r2
 800087e:	0007      	movs	r7, r0
 8000880:	4653      	mov	r3, sl
 8000882:	40b0      	lsls	r0, r6
 8000884:	40d4      	lsrs	r4, r2
 8000886:	40b5      	lsls	r5, r6
 8000888:	40d7      	lsrs	r7, r2
 800088a:	1e46      	subs	r6, r0, #1
 800088c:	41b0      	sbcs	r0, r6
 800088e:	1b1b      	subs	r3, r3, r4
 8000890:	469a      	mov	sl, r3
 8000892:	433d      	orrs	r5, r7
 8000894:	4305      	orrs	r5, r0
 8000896:	4662      	mov	r2, ip
 8000898:	1b55      	subs	r5, r2, r5
 800089a:	45ac      	cmp	ip, r5
 800089c:	4192      	sbcs	r2, r2
 800089e:	4653      	mov	r3, sl
 80008a0:	4252      	negs	r2, r2
 80008a2:	000e      	movs	r6, r1
 80008a4:	464f      	mov	r7, r9
 80008a6:	4688      	mov	r8, r1
 80008a8:	1a9c      	subs	r4, r3, r2
 80008aa:	e778      	b.n	800079e <__aeabi_dadd+0xa6>
 80008ac:	2a00      	cmp	r2, #0
 80008ae:	dc00      	bgt.n	80008b2 <__aeabi_dadd+0x1ba>
 80008b0:	e08e      	b.n	80009d0 <__aeabi_dadd+0x2d8>
 80008b2:	4649      	mov	r1, r9
 80008b4:	2900      	cmp	r1, #0
 80008b6:	d175      	bne.n	80009a4 <__aeabi_dadd+0x2ac>
 80008b8:	4661      	mov	r1, ip
 80008ba:	4653      	mov	r3, sl
 80008bc:	4319      	orrs	r1, r3
 80008be:	d100      	bne.n	80008c2 <__aeabi_dadd+0x1ca>
 80008c0:	e0f6      	b.n	8000ab0 <__aeabi_dadd+0x3b8>
 80008c2:	1e51      	subs	r1, r2, #1
 80008c4:	2a01      	cmp	r2, #1
 80008c6:	d100      	bne.n	80008ca <__aeabi_dadd+0x1d2>
 80008c8:	e191      	b.n	8000bee <__aeabi_dadd+0x4f6>
 80008ca:	4d6d      	ldr	r5, [pc, #436]	@ (8000a80 <__aeabi_dadd+0x388>)
 80008cc:	42aa      	cmp	r2, r5
 80008ce:	d100      	bne.n	80008d2 <__aeabi_dadd+0x1da>
 80008d0:	e0dc      	b.n	8000a8c <__aeabi_dadd+0x394>
 80008d2:	2501      	movs	r5, #1
 80008d4:	2938      	cmp	r1, #56	@ 0x38
 80008d6:	dc14      	bgt.n	8000902 <__aeabi_dadd+0x20a>
 80008d8:	000a      	movs	r2, r1
 80008da:	2a1f      	cmp	r2, #31
 80008dc:	dd00      	ble.n	80008e0 <__aeabi_dadd+0x1e8>
 80008de:	e1a2      	b.n	8000c26 <__aeabi_dadd+0x52e>
 80008e0:	2120      	movs	r1, #32
 80008e2:	4653      	mov	r3, sl
 80008e4:	1a89      	subs	r1, r1, r2
 80008e6:	408b      	lsls	r3, r1
 80008e8:	001d      	movs	r5, r3
 80008ea:	4663      	mov	r3, ip
 80008ec:	40d3      	lsrs	r3, r2
 80008ee:	431d      	orrs	r5, r3
 80008f0:	4663      	mov	r3, ip
 80008f2:	408b      	lsls	r3, r1
 80008f4:	0019      	movs	r1, r3
 80008f6:	1e4b      	subs	r3, r1, #1
 80008f8:	4199      	sbcs	r1, r3
 80008fa:	4653      	mov	r3, sl
 80008fc:	40d3      	lsrs	r3, r2
 80008fe:	430d      	orrs	r5, r1
 8000900:	18e4      	adds	r4, r4, r3
 8000902:	182d      	adds	r5, r5, r0
 8000904:	4285      	cmp	r5, r0
 8000906:	4180      	sbcs	r0, r0
 8000908:	4240      	negs	r0, r0
 800090a:	1824      	adds	r4, r4, r0
 800090c:	0223      	lsls	r3, r4, #8
 800090e:	d559      	bpl.n	80009c4 <__aeabi_dadd+0x2cc>
 8000910:	4b5b      	ldr	r3, [pc, #364]	@ (8000a80 <__aeabi_dadd+0x388>)
 8000912:	3701      	adds	r7, #1
 8000914:	429f      	cmp	r7, r3
 8000916:	d051      	beq.n	80009bc <__aeabi_dadd+0x2c4>
 8000918:	2101      	movs	r1, #1
 800091a:	4b5a      	ldr	r3, [pc, #360]	@ (8000a84 <__aeabi_dadd+0x38c>)
 800091c:	086a      	lsrs	r2, r5, #1
 800091e:	401c      	ands	r4, r3
 8000920:	4029      	ands	r1, r5
 8000922:	430a      	orrs	r2, r1
 8000924:	07e5      	lsls	r5, r4, #31
 8000926:	4315      	orrs	r5, r2
 8000928:	0864      	lsrs	r4, r4, #1
 800092a:	e75f      	b.n	80007ec <__aeabi_dadd+0xf4>
 800092c:	4661      	mov	r1, ip
 800092e:	4653      	mov	r3, sl
 8000930:	4319      	orrs	r1, r3
 8000932:	d100      	bne.n	8000936 <__aeabi_dadd+0x23e>
 8000934:	e0bc      	b.n	8000ab0 <__aeabi_dadd+0x3b8>
 8000936:	1e51      	subs	r1, r2, #1
 8000938:	2a01      	cmp	r2, #1
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x246>
 800093c:	e164      	b.n	8000c08 <__aeabi_dadd+0x510>
 800093e:	4d50      	ldr	r5, [pc, #320]	@ (8000a80 <__aeabi_dadd+0x388>)
 8000940:	42aa      	cmp	r2, r5
 8000942:	d100      	bne.n	8000946 <__aeabi_dadd+0x24e>
 8000944:	e16a      	b.n	8000c1c <__aeabi_dadd+0x524>
 8000946:	2501      	movs	r5, #1
 8000948:	2938      	cmp	r1, #56	@ 0x38
 800094a:	dd00      	ble.n	800094e <__aeabi_dadd+0x256>
 800094c:	e722      	b.n	8000794 <__aeabi_dadd+0x9c>
 800094e:	000a      	movs	r2, r1
 8000950:	e70e      	b.n	8000770 <__aeabi_dadd+0x78>
 8000952:	4a4d      	ldr	r2, [pc, #308]	@ (8000a88 <__aeabi_dadd+0x390>)
 8000954:	1c7d      	adds	r5, r7, #1
 8000956:	4215      	tst	r5, r2
 8000958:	d000      	beq.n	800095c <__aeabi_dadd+0x264>
 800095a:	e0d0      	b.n	8000afe <__aeabi_dadd+0x406>
 800095c:	0025      	movs	r5, r4
 800095e:	4662      	mov	r2, ip
 8000960:	4653      	mov	r3, sl
 8000962:	4305      	orrs	r5, r0
 8000964:	431a      	orrs	r2, r3
 8000966:	2f00      	cmp	r7, #0
 8000968:	d000      	beq.n	800096c <__aeabi_dadd+0x274>
 800096a:	e137      	b.n	8000bdc <__aeabi_dadd+0x4e4>
 800096c:	2d00      	cmp	r5, #0
 800096e:	d100      	bne.n	8000972 <__aeabi_dadd+0x27a>
 8000970:	e1a8      	b.n	8000cc4 <__aeabi_dadd+0x5cc>
 8000972:	2a00      	cmp	r2, #0
 8000974:	d100      	bne.n	8000978 <__aeabi_dadd+0x280>
 8000976:	e16a      	b.n	8000c4e <__aeabi_dadd+0x556>
 8000978:	4663      	mov	r3, ip
 800097a:	1ac5      	subs	r5, r0, r3
 800097c:	4653      	mov	r3, sl
 800097e:	1ae2      	subs	r2, r4, r3
 8000980:	42a8      	cmp	r0, r5
 8000982:	419b      	sbcs	r3, r3
 8000984:	425b      	negs	r3, r3
 8000986:	1ad3      	subs	r3, r2, r3
 8000988:	021a      	lsls	r2, r3, #8
 800098a:	d400      	bmi.n	800098e <__aeabi_dadd+0x296>
 800098c:	e203      	b.n	8000d96 <__aeabi_dadd+0x69e>
 800098e:	4663      	mov	r3, ip
 8000990:	1a1d      	subs	r5, r3, r0
 8000992:	45ac      	cmp	ip, r5
 8000994:	4192      	sbcs	r2, r2
 8000996:	4653      	mov	r3, sl
 8000998:	4252      	negs	r2, r2
 800099a:	1b1c      	subs	r4, r3, r4
 800099c:	000e      	movs	r6, r1
 800099e:	4688      	mov	r8, r1
 80009a0:	1aa4      	subs	r4, r4, r2
 80009a2:	e723      	b.n	80007ec <__aeabi_dadd+0xf4>
 80009a4:	4936      	ldr	r1, [pc, #216]	@ (8000a80 <__aeabi_dadd+0x388>)
 80009a6:	428f      	cmp	r7, r1
 80009a8:	d070      	beq.n	8000a8c <__aeabi_dadd+0x394>
 80009aa:	2501      	movs	r5, #1
 80009ac:	2a38      	cmp	r2, #56	@ 0x38
 80009ae:	dca8      	bgt.n	8000902 <__aeabi_dadd+0x20a>
 80009b0:	2180      	movs	r1, #128	@ 0x80
 80009b2:	4653      	mov	r3, sl
 80009b4:	0409      	lsls	r1, r1, #16
 80009b6:	430b      	orrs	r3, r1
 80009b8:	469a      	mov	sl, r3
 80009ba:	e78e      	b.n	80008da <__aeabi_dadd+0x1e2>
 80009bc:	003c      	movs	r4, r7
 80009be:	2500      	movs	r5, #0
 80009c0:	2200      	movs	r2, #0
 80009c2:	e731      	b.n	8000828 <__aeabi_dadd+0x130>
 80009c4:	2307      	movs	r3, #7
 80009c6:	402b      	ands	r3, r5
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d000      	beq.n	80009ce <__aeabi_dadd+0x2d6>
 80009cc:	e710      	b.n	80007f0 <__aeabi_dadd+0xf8>
 80009ce:	e093      	b.n	8000af8 <__aeabi_dadd+0x400>
 80009d0:	2a00      	cmp	r2, #0
 80009d2:	d074      	beq.n	8000abe <__aeabi_dadd+0x3c6>
 80009d4:	464a      	mov	r2, r9
 80009d6:	1bd2      	subs	r2, r2, r7
 80009d8:	2f00      	cmp	r7, #0
 80009da:	d100      	bne.n	80009de <__aeabi_dadd+0x2e6>
 80009dc:	e0c7      	b.n	8000b6e <__aeabi_dadd+0x476>
 80009de:	4928      	ldr	r1, [pc, #160]	@ (8000a80 <__aeabi_dadd+0x388>)
 80009e0:	4589      	cmp	r9, r1
 80009e2:	d100      	bne.n	80009e6 <__aeabi_dadd+0x2ee>
 80009e4:	e185      	b.n	8000cf2 <__aeabi_dadd+0x5fa>
 80009e6:	2501      	movs	r5, #1
 80009e8:	2a38      	cmp	r2, #56	@ 0x38
 80009ea:	dc12      	bgt.n	8000a12 <__aeabi_dadd+0x31a>
 80009ec:	2180      	movs	r1, #128	@ 0x80
 80009ee:	0409      	lsls	r1, r1, #16
 80009f0:	430c      	orrs	r4, r1
 80009f2:	2a1f      	cmp	r2, #31
 80009f4:	dd00      	ble.n	80009f8 <__aeabi_dadd+0x300>
 80009f6:	e1ab      	b.n	8000d50 <__aeabi_dadd+0x658>
 80009f8:	2120      	movs	r1, #32
 80009fa:	0025      	movs	r5, r4
 80009fc:	1a89      	subs	r1, r1, r2
 80009fe:	0007      	movs	r7, r0
 8000a00:	4088      	lsls	r0, r1
 8000a02:	408d      	lsls	r5, r1
 8000a04:	40d7      	lsrs	r7, r2
 8000a06:	1e41      	subs	r1, r0, #1
 8000a08:	4188      	sbcs	r0, r1
 8000a0a:	40d4      	lsrs	r4, r2
 8000a0c:	433d      	orrs	r5, r7
 8000a0e:	4305      	orrs	r5, r0
 8000a10:	44a2      	add	sl, r4
 8000a12:	4465      	add	r5, ip
 8000a14:	4565      	cmp	r5, ip
 8000a16:	4192      	sbcs	r2, r2
 8000a18:	4252      	negs	r2, r2
 8000a1a:	4452      	add	r2, sl
 8000a1c:	0014      	movs	r4, r2
 8000a1e:	464f      	mov	r7, r9
 8000a20:	e774      	b.n	800090c <__aeabi_dadd+0x214>
 8000a22:	0028      	movs	r0, r5
 8000a24:	f7ff fd40 	bl	80004a8 <__clzsi2>
 8000a28:	0003      	movs	r3, r0
 8000a2a:	3318      	adds	r3, #24
 8000a2c:	2b1f      	cmp	r3, #31
 8000a2e:	dc00      	bgt.n	8000a32 <__aeabi_dadd+0x33a>
 8000a30:	e6c2      	b.n	80007b8 <__aeabi_dadd+0xc0>
 8000a32:	002a      	movs	r2, r5
 8000a34:	3808      	subs	r0, #8
 8000a36:	4082      	lsls	r2, r0
 8000a38:	429f      	cmp	r7, r3
 8000a3a:	dd00      	ble.n	8000a3e <__aeabi_dadd+0x346>
 8000a3c:	e0a9      	b.n	8000b92 <__aeabi_dadd+0x49a>
 8000a3e:	1bdb      	subs	r3, r3, r7
 8000a40:	1c58      	adds	r0, r3, #1
 8000a42:	281f      	cmp	r0, #31
 8000a44:	dc00      	bgt.n	8000a48 <__aeabi_dadd+0x350>
 8000a46:	e1ac      	b.n	8000da2 <__aeabi_dadd+0x6aa>
 8000a48:	0015      	movs	r5, r2
 8000a4a:	3b1f      	subs	r3, #31
 8000a4c:	40dd      	lsrs	r5, r3
 8000a4e:	2820      	cmp	r0, #32
 8000a50:	d005      	beq.n	8000a5e <__aeabi_dadd+0x366>
 8000a52:	2340      	movs	r3, #64	@ 0x40
 8000a54:	1a1b      	subs	r3, r3, r0
 8000a56:	409a      	lsls	r2, r3
 8000a58:	1e53      	subs	r3, r2, #1
 8000a5a:	419a      	sbcs	r2, r3
 8000a5c:	4315      	orrs	r5, r2
 8000a5e:	2307      	movs	r3, #7
 8000a60:	2700      	movs	r7, #0
 8000a62:	402b      	ands	r3, r5
 8000a64:	e7b0      	b.n	80009c8 <__aeabi_dadd+0x2d0>
 8000a66:	08ed      	lsrs	r5, r5, #3
 8000a68:	4b05      	ldr	r3, [pc, #20]	@ (8000a80 <__aeabi_dadd+0x388>)
 8000a6a:	0762      	lsls	r2, r4, #29
 8000a6c:	432a      	orrs	r2, r5
 8000a6e:	08e4      	lsrs	r4, r4, #3
 8000a70:	429f      	cmp	r7, r3
 8000a72:	d00f      	beq.n	8000a94 <__aeabi_dadd+0x39c>
 8000a74:	0324      	lsls	r4, r4, #12
 8000a76:	0b25      	lsrs	r5, r4, #12
 8000a78:	057c      	lsls	r4, r7, #21
 8000a7a:	0d64      	lsrs	r4, r4, #21
 8000a7c:	e6d4      	b.n	8000828 <__aeabi_dadd+0x130>
 8000a7e:	46c0      	nop			@ (mov r8, r8)
 8000a80:	000007ff 	.word	0x000007ff
 8000a84:	ff7fffff 	.word	0xff7fffff
 8000a88:	000007fe 	.word	0x000007fe
 8000a8c:	08c0      	lsrs	r0, r0, #3
 8000a8e:	0762      	lsls	r2, r4, #29
 8000a90:	4302      	orrs	r2, r0
 8000a92:	08e4      	lsrs	r4, r4, #3
 8000a94:	0013      	movs	r3, r2
 8000a96:	4323      	orrs	r3, r4
 8000a98:	d100      	bne.n	8000a9c <__aeabi_dadd+0x3a4>
 8000a9a:	e186      	b.n	8000daa <__aeabi_dadd+0x6b2>
 8000a9c:	2580      	movs	r5, #128	@ 0x80
 8000a9e:	032d      	lsls	r5, r5, #12
 8000aa0:	4325      	orrs	r5, r4
 8000aa2:	032d      	lsls	r5, r5, #12
 8000aa4:	4cc3      	ldr	r4, [pc, #780]	@ (8000db4 <__aeabi_dadd+0x6bc>)
 8000aa6:	0b2d      	lsrs	r5, r5, #12
 8000aa8:	e6be      	b.n	8000828 <__aeabi_dadd+0x130>
 8000aaa:	4660      	mov	r0, ip
 8000aac:	4654      	mov	r4, sl
 8000aae:	000e      	movs	r6, r1
 8000ab0:	0017      	movs	r7, r2
 8000ab2:	08c5      	lsrs	r5, r0, #3
 8000ab4:	e7d8      	b.n	8000a68 <__aeabi_dadd+0x370>
 8000ab6:	4cc0      	ldr	r4, [pc, #768]	@ (8000db8 <__aeabi_dadd+0x6c0>)
 8000ab8:	1aff      	subs	r7, r7, r3
 8000aba:	4014      	ands	r4, r2
 8000abc:	e696      	b.n	80007ec <__aeabi_dadd+0xf4>
 8000abe:	4abf      	ldr	r2, [pc, #764]	@ (8000dbc <__aeabi_dadd+0x6c4>)
 8000ac0:	1c79      	adds	r1, r7, #1
 8000ac2:	4211      	tst	r1, r2
 8000ac4:	d16b      	bne.n	8000b9e <__aeabi_dadd+0x4a6>
 8000ac6:	0022      	movs	r2, r4
 8000ac8:	4302      	orrs	r2, r0
 8000aca:	2f00      	cmp	r7, #0
 8000acc:	d000      	beq.n	8000ad0 <__aeabi_dadd+0x3d8>
 8000ace:	e0db      	b.n	8000c88 <__aeabi_dadd+0x590>
 8000ad0:	2a00      	cmp	r2, #0
 8000ad2:	d100      	bne.n	8000ad6 <__aeabi_dadd+0x3de>
 8000ad4:	e12d      	b.n	8000d32 <__aeabi_dadd+0x63a>
 8000ad6:	4662      	mov	r2, ip
 8000ad8:	4653      	mov	r3, sl
 8000ada:	431a      	orrs	r2, r3
 8000adc:	d100      	bne.n	8000ae0 <__aeabi_dadd+0x3e8>
 8000ade:	e0b6      	b.n	8000c4e <__aeabi_dadd+0x556>
 8000ae0:	4663      	mov	r3, ip
 8000ae2:	18c5      	adds	r5, r0, r3
 8000ae4:	4285      	cmp	r5, r0
 8000ae6:	4180      	sbcs	r0, r0
 8000ae8:	4454      	add	r4, sl
 8000aea:	4240      	negs	r0, r0
 8000aec:	1824      	adds	r4, r4, r0
 8000aee:	0223      	lsls	r3, r4, #8
 8000af0:	d502      	bpl.n	8000af8 <__aeabi_dadd+0x400>
 8000af2:	000f      	movs	r7, r1
 8000af4:	4bb0      	ldr	r3, [pc, #704]	@ (8000db8 <__aeabi_dadd+0x6c0>)
 8000af6:	401c      	ands	r4, r3
 8000af8:	003a      	movs	r2, r7
 8000afa:	0028      	movs	r0, r5
 8000afc:	e7d8      	b.n	8000ab0 <__aeabi_dadd+0x3b8>
 8000afe:	4662      	mov	r2, ip
 8000b00:	1a85      	subs	r5, r0, r2
 8000b02:	42a8      	cmp	r0, r5
 8000b04:	4192      	sbcs	r2, r2
 8000b06:	4653      	mov	r3, sl
 8000b08:	4252      	negs	r2, r2
 8000b0a:	4691      	mov	r9, r2
 8000b0c:	1ae3      	subs	r3, r4, r3
 8000b0e:	001a      	movs	r2, r3
 8000b10:	464b      	mov	r3, r9
 8000b12:	1ad2      	subs	r2, r2, r3
 8000b14:	0013      	movs	r3, r2
 8000b16:	4691      	mov	r9, r2
 8000b18:	021a      	lsls	r2, r3, #8
 8000b1a:	d454      	bmi.n	8000bc6 <__aeabi_dadd+0x4ce>
 8000b1c:	464a      	mov	r2, r9
 8000b1e:	464c      	mov	r4, r9
 8000b20:	432a      	orrs	r2, r5
 8000b22:	d000      	beq.n	8000b26 <__aeabi_dadd+0x42e>
 8000b24:	e640      	b.n	80007a8 <__aeabi_dadd+0xb0>
 8000b26:	2600      	movs	r6, #0
 8000b28:	2400      	movs	r4, #0
 8000b2a:	2500      	movs	r5, #0
 8000b2c:	e67c      	b.n	8000828 <__aeabi_dadd+0x130>
 8000b2e:	4da1      	ldr	r5, [pc, #644]	@ (8000db4 <__aeabi_dadd+0x6bc>)
 8000b30:	45a9      	cmp	r9, r5
 8000b32:	d100      	bne.n	8000b36 <__aeabi_dadd+0x43e>
 8000b34:	e090      	b.n	8000c58 <__aeabi_dadd+0x560>
 8000b36:	2501      	movs	r5, #1
 8000b38:	2a38      	cmp	r2, #56	@ 0x38
 8000b3a:	dd00      	ble.n	8000b3e <__aeabi_dadd+0x446>
 8000b3c:	e6ab      	b.n	8000896 <__aeabi_dadd+0x19e>
 8000b3e:	2580      	movs	r5, #128	@ 0x80
 8000b40:	042d      	lsls	r5, r5, #16
 8000b42:	432c      	orrs	r4, r5
 8000b44:	e695      	b.n	8000872 <__aeabi_dadd+0x17a>
 8000b46:	0011      	movs	r1, r2
 8000b48:	4655      	mov	r5, sl
 8000b4a:	3920      	subs	r1, #32
 8000b4c:	40cd      	lsrs	r5, r1
 8000b4e:	46a9      	mov	r9, r5
 8000b50:	2a20      	cmp	r2, #32
 8000b52:	d006      	beq.n	8000b62 <__aeabi_dadd+0x46a>
 8000b54:	2140      	movs	r1, #64	@ 0x40
 8000b56:	4653      	mov	r3, sl
 8000b58:	1a8a      	subs	r2, r1, r2
 8000b5a:	4093      	lsls	r3, r2
 8000b5c:	4662      	mov	r2, ip
 8000b5e:	431a      	orrs	r2, r3
 8000b60:	4694      	mov	ip, r2
 8000b62:	4665      	mov	r5, ip
 8000b64:	1e6b      	subs	r3, r5, #1
 8000b66:	419d      	sbcs	r5, r3
 8000b68:	464b      	mov	r3, r9
 8000b6a:	431d      	orrs	r5, r3
 8000b6c:	e612      	b.n	8000794 <__aeabi_dadd+0x9c>
 8000b6e:	0021      	movs	r1, r4
 8000b70:	4301      	orrs	r1, r0
 8000b72:	d100      	bne.n	8000b76 <__aeabi_dadd+0x47e>
 8000b74:	e0c4      	b.n	8000d00 <__aeabi_dadd+0x608>
 8000b76:	1e51      	subs	r1, r2, #1
 8000b78:	2a01      	cmp	r2, #1
 8000b7a:	d100      	bne.n	8000b7e <__aeabi_dadd+0x486>
 8000b7c:	e0fb      	b.n	8000d76 <__aeabi_dadd+0x67e>
 8000b7e:	4d8d      	ldr	r5, [pc, #564]	@ (8000db4 <__aeabi_dadd+0x6bc>)
 8000b80:	42aa      	cmp	r2, r5
 8000b82:	d100      	bne.n	8000b86 <__aeabi_dadd+0x48e>
 8000b84:	e0b5      	b.n	8000cf2 <__aeabi_dadd+0x5fa>
 8000b86:	2501      	movs	r5, #1
 8000b88:	2938      	cmp	r1, #56	@ 0x38
 8000b8a:	dd00      	ble.n	8000b8e <__aeabi_dadd+0x496>
 8000b8c:	e741      	b.n	8000a12 <__aeabi_dadd+0x31a>
 8000b8e:	000a      	movs	r2, r1
 8000b90:	e72f      	b.n	80009f2 <__aeabi_dadd+0x2fa>
 8000b92:	4c89      	ldr	r4, [pc, #548]	@ (8000db8 <__aeabi_dadd+0x6c0>)
 8000b94:	1aff      	subs	r7, r7, r3
 8000b96:	4014      	ands	r4, r2
 8000b98:	0762      	lsls	r2, r4, #29
 8000b9a:	08e4      	lsrs	r4, r4, #3
 8000b9c:	e76a      	b.n	8000a74 <__aeabi_dadd+0x37c>
 8000b9e:	4a85      	ldr	r2, [pc, #532]	@ (8000db4 <__aeabi_dadd+0x6bc>)
 8000ba0:	4291      	cmp	r1, r2
 8000ba2:	d100      	bne.n	8000ba6 <__aeabi_dadd+0x4ae>
 8000ba4:	e0e3      	b.n	8000d6e <__aeabi_dadd+0x676>
 8000ba6:	4663      	mov	r3, ip
 8000ba8:	18c2      	adds	r2, r0, r3
 8000baa:	4282      	cmp	r2, r0
 8000bac:	4180      	sbcs	r0, r0
 8000bae:	0023      	movs	r3, r4
 8000bb0:	4240      	negs	r0, r0
 8000bb2:	4453      	add	r3, sl
 8000bb4:	181b      	adds	r3, r3, r0
 8000bb6:	07dd      	lsls	r5, r3, #31
 8000bb8:	085c      	lsrs	r4, r3, #1
 8000bba:	2307      	movs	r3, #7
 8000bbc:	0852      	lsrs	r2, r2, #1
 8000bbe:	4315      	orrs	r5, r2
 8000bc0:	000f      	movs	r7, r1
 8000bc2:	402b      	ands	r3, r5
 8000bc4:	e700      	b.n	80009c8 <__aeabi_dadd+0x2d0>
 8000bc6:	4663      	mov	r3, ip
 8000bc8:	1a1d      	subs	r5, r3, r0
 8000bca:	45ac      	cmp	ip, r5
 8000bcc:	4192      	sbcs	r2, r2
 8000bce:	4653      	mov	r3, sl
 8000bd0:	4252      	negs	r2, r2
 8000bd2:	1b1c      	subs	r4, r3, r4
 8000bd4:	000e      	movs	r6, r1
 8000bd6:	4688      	mov	r8, r1
 8000bd8:	1aa4      	subs	r4, r4, r2
 8000bda:	e5e5      	b.n	80007a8 <__aeabi_dadd+0xb0>
 8000bdc:	2d00      	cmp	r5, #0
 8000bde:	d000      	beq.n	8000be2 <__aeabi_dadd+0x4ea>
 8000be0:	e091      	b.n	8000d06 <__aeabi_dadd+0x60e>
 8000be2:	2a00      	cmp	r2, #0
 8000be4:	d138      	bne.n	8000c58 <__aeabi_dadd+0x560>
 8000be6:	2480      	movs	r4, #128	@ 0x80
 8000be8:	2600      	movs	r6, #0
 8000bea:	0324      	lsls	r4, r4, #12
 8000bec:	e756      	b.n	8000a9c <__aeabi_dadd+0x3a4>
 8000bee:	4663      	mov	r3, ip
 8000bf0:	18c5      	adds	r5, r0, r3
 8000bf2:	4285      	cmp	r5, r0
 8000bf4:	4180      	sbcs	r0, r0
 8000bf6:	4454      	add	r4, sl
 8000bf8:	4240      	negs	r0, r0
 8000bfa:	1824      	adds	r4, r4, r0
 8000bfc:	2701      	movs	r7, #1
 8000bfe:	0223      	lsls	r3, r4, #8
 8000c00:	d400      	bmi.n	8000c04 <__aeabi_dadd+0x50c>
 8000c02:	e6df      	b.n	80009c4 <__aeabi_dadd+0x2cc>
 8000c04:	2702      	movs	r7, #2
 8000c06:	e687      	b.n	8000918 <__aeabi_dadd+0x220>
 8000c08:	4663      	mov	r3, ip
 8000c0a:	1ac5      	subs	r5, r0, r3
 8000c0c:	42a8      	cmp	r0, r5
 8000c0e:	4180      	sbcs	r0, r0
 8000c10:	4653      	mov	r3, sl
 8000c12:	4240      	negs	r0, r0
 8000c14:	1ae4      	subs	r4, r4, r3
 8000c16:	2701      	movs	r7, #1
 8000c18:	1a24      	subs	r4, r4, r0
 8000c1a:	e5c0      	b.n	800079e <__aeabi_dadd+0xa6>
 8000c1c:	0762      	lsls	r2, r4, #29
 8000c1e:	08c0      	lsrs	r0, r0, #3
 8000c20:	4302      	orrs	r2, r0
 8000c22:	08e4      	lsrs	r4, r4, #3
 8000c24:	e736      	b.n	8000a94 <__aeabi_dadd+0x39c>
 8000c26:	0011      	movs	r1, r2
 8000c28:	4653      	mov	r3, sl
 8000c2a:	3920      	subs	r1, #32
 8000c2c:	40cb      	lsrs	r3, r1
 8000c2e:	4699      	mov	r9, r3
 8000c30:	2a20      	cmp	r2, #32
 8000c32:	d006      	beq.n	8000c42 <__aeabi_dadd+0x54a>
 8000c34:	2140      	movs	r1, #64	@ 0x40
 8000c36:	4653      	mov	r3, sl
 8000c38:	1a8a      	subs	r2, r1, r2
 8000c3a:	4093      	lsls	r3, r2
 8000c3c:	4662      	mov	r2, ip
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	4694      	mov	ip, r2
 8000c42:	4665      	mov	r5, ip
 8000c44:	1e6b      	subs	r3, r5, #1
 8000c46:	419d      	sbcs	r5, r3
 8000c48:	464b      	mov	r3, r9
 8000c4a:	431d      	orrs	r5, r3
 8000c4c:	e659      	b.n	8000902 <__aeabi_dadd+0x20a>
 8000c4e:	0762      	lsls	r2, r4, #29
 8000c50:	08c0      	lsrs	r0, r0, #3
 8000c52:	4302      	orrs	r2, r0
 8000c54:	08e4      	lsrs	r4, r4, #3
 8000c56:	e70d      	b.n	8000a74 <__aeabi_dadd+0x37c>
 8000c58:	4653      	mov	r3, sl
 8000c5a:	075a      	lsls	r2, r3, #29
 8000c5c:	4663      	mov	r3, ip
 8000c5e:	08d8      	lsrs	r0, r3, #3
 8000c60:	4653      	mov	r3, sl
 8000c62:	000e      	movs	r6, r1
 8000c64:	4302      	orrs	r2, r0
 8000c66:	08dc      	lsrs	r4, r3, #3
 8000c68:	e714      	b.n	8000a94 <__aeabi_dadd+0x39c>
 8000c6a:	0015      	movs	r5, r2
 8000c6c:	0026      	movs	r6, r4
 8000c6e:	3d20      	subs	r5, #32
 8000c70:	40ee      	lsrs	r6, r5
 8000c72:	2a20      	cmp	r2, #32
 8000c74:	d003      	beq.n	8000c7e <__aeabi_dadd+0x586>
 8000c76:	2540      	movs	r5, #64	@ 0x40
 8000c78:	1aaa      	subs	r2, r5, r2
 8000c7a:	4094      	lsls	r4, r2
 8000c7c:	4320      	orrs	r0, r4
 8000c7e:	1e42      	subs	r2, r0, #1
 8000c80:	4190      	sbcs	r0, r2
 8000c82:	0005      	movs	r5, r0
 8000c84:	4335      	orrs	r5, r6
 8000c86:	e606      	b.n	8000896 <__aeabi_dadd+0x19e>
 8000c88:	2a00      	cmp	r2, #0
 8000c8a:	d07c      	beq.n	8000d86 <__aeabi_dadd+0x68e>
 8000c8c:	4662      	mov	r2, ip
 8000c8e:	4653      	mov	r3, sl
 8000c90:	08c0      	lsrs	r0, r0, #3
 8000c92:	431a      	orrs	r2, r3
 8000c94:	d100      	bne.n	8000c98 <__aeabi_dadd+0x5a0>
 8000c96:	e6fa      	b.n	8000a8e <__aeabi_dadd+0x396>
 8000c98:	0762      	lsls	r2, r4, #29
 8000c9a:	4310      	orrs	r0, r2
 8000c9c:	2280      	movs	r2, #128	@ 0x80
 8000c9e:	08e4      	lsrs	r4, r4, #3
 8000ca0:	0312      	lsls	r2, r2, #12
 8000ca2:	4214      	tst	r4, r2
 8000ca4:	d008      	beq.n	8000cb8 <__aeabi_dadd+0x5c0>
 8000ca6:	08d9      	lsrs	r1, r3, #3
 8000ca8:	4211      	tst	r1, r2
 8000caa:	d105      	bne.n	8000cb8 <__aeabi_dadd+0x5c0>
 8000cac:	4663      	mov	r3, ip
 8000cae:	08d8      	lsrs	r0, r3, #3
 8000cb0:	4653      	mov	r3, sl
 8000cb2:	000c      	movs	r4, r1
 8000cb4:	075b      	lsls	r3, r3, #29
 8000cb6:	4318      	orrs	r0, r3
 8000cb8:	0f42      	lsrs	r2, r0, #29
 8000cba:	00c0      	lsls	r0, r0, #3
 8000cbc:	08c0      	lsrs	r0, r0, #3
 8000cbe:	0752      	lsls	r2, r2, #29
 8000cc0:	4302      	orrs	r2, r0
 8000cc2:	e6e7      	b.n	8000a94 <__aeabi_dadd+0x39c>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	d100      	bne.n	8000cca <__aeabi_dadd+0x5d2>
 8000cc8:	e72d      	b.n	8000b26 <__aeabi_dadd+0x42e>
 8000cca:	4663      	mov	r3, ip
 8000ccc:	08d8      	lsrs	r0, r3, #3
 8000cce:	4653      	mov	r3, sl
 8000cd0:	075a      	lsls	r2, r3, #29
 8000cd2:	000e      	movs	r6, r1
 8000cd4:	4302      	orrs	r2, r0
 8000cd6:	08dc      	lsrs	r4, r3, #3
 8000cd8:	e6cc      	b.n	8000a74 <__aeabi_dadd+0x37c>
 8000cda:	4663      	mov	r3, ip
 8000cdc:	1a1d      	subs	r5, r3, r0
 8000cde:	45ac      	cmp	ip, r5
 8000ce0:	4192      	sbcs	r2, r2
 8000ce2:	4653      	mov	r3, sl
 8000ce4:	4252      	negs	r2, r2
 8000ce6:	1b1c      	subs	r4, r3, r4
 8000ce8:	000e      	movs	r6, r1
 8000cea:	4688      	mov	r8, r1
 8000cec:	1aa4      	subs	r4, r4, r2
 8000cee:	3701      	adds	r7, #1
 8000cf0:	e555      	b.n	800079e <__aeabi_dadd+0xa6>
 8000cf2:	4663      	mov	r3, ip
 8000cf4:	08d9      	lsrs	r1, r3, #3
 8000cf6:	4653      	mov	r3, sl
 8000cf8:	075a      	lsls	r2, r3, #29
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	08dc      	lsrs	r4, r3, #3
 8000cfe:	e6c9      	b.n	8000a94 <__aeabi_dadd+0x39c>
 8000d00:	4660      	mov	r0, ip
 8000d02:	4654      	mov	r4, sl
 8000d04:	e6d4      	b.n	8000ab0 <__aeabi_dadd+0x3b8>
 8000d06:	08c0      	lsrs	r0, r0, #3
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	d100      	bne.n	8000d0e <__aeabi_dadd+0x616>
 8000d0c:	e6bf      	b.n	8000a8e <__aeabi_dadd+0x396>
 8000d0e:	0762      	lsls	r2, r4, #29
 8000d10:	4310      	orrs	r0, r2
 8000d12:	2280      	movs	r2, #128	@ 0x80
 8000d14:	08e4      	lsrs	r4, r4, #3
 8000d16:	0312      	lsls	r2, r2, #12
 8000d18:	4214      	tst	r4, r2
 8000d1a:	d0cd      	beq.n	8000cb8 <__aeabi_dadd+0x5c0>
 8000d1c:	08dd      	lsrs	r5, r3, #3
 8000d1e:	4215      	tst	r5, r2
 8000d20:	d1ca      	bne.n	8000cb8 <__aeabi_dadd+0x5c0>
 8000d22:	4663      	mov	r3, ip
 8000d24:	08d8      	lsrs	r0, r3, #3
 8000d26:	4653      	mov	r3, sl
 8000d28:	075b      	lsls	r3, r3, #29
 8000d2a:	000e      	movs	r6, r1
 8000d2c:	002c      	movs	r4, r5
 8000d2e:	4318      	orrs	r0, r3
 8000d30:	e7c2      	b.n	8000cb8 <__aeabi_dadd+0x5c0>
 8000d32:	4663      	mov	r3, ip
 8000d34:	08d9      	lsrs	r1, r3, #3
 8000d36:	4653      	mov	r3, sl
 8000d38:	075a      	lsls	r2, r3, #29
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	08dc      	lsrs	r4, r3, #3
 8000d3e:	e699      	b.n	8000a74 <__aeabi_dadd+0x37c>
 8000d40:	4663      	mov	r3, ip
 8000d42:	08d8      	lsrs	r0, r3, #3
 8000d44:	4653      	mov	r3, sl
 8000d46:	075a      	lsls	r2, r3, #29
 8000d48:	000e      	movs	r6, r1
 8000d4a:	4302      	orrs	r2, r0
 8000d4c:	08dc      	lsrs	r4, r3, #3
 8000d4e:	e6a1      	b.n	8000a94 <__aeabi_dadd+0x39c>
 8000d50:	0011      	movs	r1, r2
 8000d52:	0027      	movs	r7, r4
 8000d54:	3920      	subs	r1, #32
 8000d56:	40cf      	lsrs	r7, r1
 8000d58:	2a20      	cmp	r2, #32
 8000d5a:	d003      	beq.n	8000d64 <__aeabi_dadd+0x66c>
 8000d5c:	2140      	movs	r1, #64	@ 0x40
 8000d5e:	1a8a      	subs	r2, r1, r2
 8000d60:	4094      	lsls	r4, r2
 8000d62:	4320      	orrs	r0, r4
 8000d64:	1e42      	subs	r2, r0, #1
 8000d66:	4190      	sbcs	r0, r2
 8000d68:	0005      	movs	r5, r0
 8000d6a:	433d      	orrs	r5, r7
 8000d6c:	e651      	b.n	8000a12 <__aeabi_dadd+0x31a>
 8000d6e:	000c      	movs	r4, r1
 8000d70:	2500      	movs	r5, #0
 8000d72:	2200      	movs	r2, #0
 8000d74:	e558      	b.n	8000828 <__aeabi_dadd+0x130>
 8000d76:	4460      	add	r0, ip
 8000d78:	4560      	cmp	r0, ip
 8000d7a:	4192      	sbcs	r2, r2
 8000d7c:	4454      	add	r4, sl
 8000d7e:	4252      	negs	r2, r2
 8000d80:	0005      	movs	r5, r0
 8000d82:	18a4      	adds	r4, r4, r2
 8000d84:	e73a      	b.n	8000bfc <__aeabi_dadd+0x504>
 8000d86:	4653      	mov	r3, sl
 8000d88:	075a      	lsls	r2, r3, #29
 8000d8a:	4663      	mov	r3, ip
 8000d8c:	08d9      	lsrs	r1, r3, #3
 8000d8e:	4653      	mov	r3, sl
 8000d90:	430a      	orrs	r2, r1
 8000d92:	08dc      	lsrs	r4, r3, #3
 8000d94:	e67e      	b.n	8000a94 <__aeabi_dadd+0x39c>
 8000d96:	001a      	movs	r2, r3
 8000d98:	001c      	movs	r4, r3
 8000d9a:	432a      	orrs	r2, r5
 8000d9c:	d000      	beq.n	8000da0 <__aeabi_dadd+0x6a8>
 8000d9e:	e6ab      	b.n	8000af8 <__aeabi_dadd+0x400>
 8000da0:	e6c1      	b.n	8000b26 <__aeabi_dadd+0x42e>
 8000da2:	2120      	movs	r1, #32
 8000da4:	2500      	movs	r5, #0
 8000da6:	1a09      	subs	r1, r1, r0
 8000da8:	e519      	b.n	80007de <__aeabi_dadd+0xe6>
 8000daa:	2200      	movs	r2, #0
 8000dac:	2500      	movs	r5, #0
 8000dae:	4c01      	ldr	r4, [pc, #4]	@ (8000db4 <__aeabi_dadd+0x6bc>)
 8000db0:	e53a      	b.n	8000828 <__aeabi_dadd+0x130>
 8000db2:	46c0      	nop			@ (mov r8, r8)
 8000db4:	000007ff 	.word	0x000007ff
 8000db8:	ff7fffff 	.word	0xff7fffff
 8000dbc:	000007fe 	.word	0x000007fe

08000dc0 <__aeabi_ddiv>:
 8000dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dc2:	46de      	mov	lr, fp
 8000dc4:	4645      	mov	r5, r8
 8000dc6:	4657      	mov	r7, sl
 8000dc8:	464e      	mov	r6, r9
 8000dca:	b5e0      	push	{r5, r6, r7, lr}
 8000dcc:	b087      	sub	sp, #28
 8000dce:	9200      	str	r2, [sp, #0]
 8000dd0:	9301      	str	r3, [sp, #4]
 8000dd2:	030b      	lsls	r3, r1, #12
 8000dd4:	0b1b      	lsrs	r3, r3, #12
 8000dd6:	469b      	mov	fp, r3
 8000dd8:	0fca      	lsrs	r2, r1, #31
 8000dda:	004b      	lsls	r3, r1, #1
 8000ddc:	0004      	movs	r4, r0
 8000dde:	4680      	mov	r8, r0
 8000de0:	0d5b      	lsrs	r3, r3, #21
 8000de2:	9202      	str	r2, [sp, #8]
 8000de4:	d100      	bne.n	8000de8 <__aeabi_ddiv+0x28>
 8000de6:	e16a      	b.n	80010be <__aeabi_ddiv+0x2fe>
 8000de8:	4ad4      	ldr	r2, [pc, #848]	@ (800113c <__aeabi_ddiv+0x37c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d100      	bne.n	8000df0 <__aeabi_ddiv+0x30>
 8000dee:	e18c      	b.n	800110a <__aeabi_ddiv+0x34a>
 8000df0:	4659      	mov	r1, fp
 8000df2:	0f42      	lsrs	r2, r0, #29
 8000df4:	00c9      	lsls	r1, r1, #3
 8000df6:	430a      	orrs	r2, r1
 8000df8:	2180      	movs	r1, #128	@ 0x80
 8000dfa:	0409      	lsls	r1, r1, #16
 8000dfc:	4311      	orrs	r1, r2
 8000dfe:	00c2      	lsls	r2, r0, #3
 8000e00:	4690      	mov	r8, r2
 8000e02:	4acf      	ldr	r2, [pc, #828]	@ (8001140 <__aeabi_ddiv+0x380>)
 8000e04:	4689      	mov	r9, r1
 8000e06:	4692      	mov	sl, r2
 8000e08:	449a      	add	sl, r3
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	2400      	movs	r4, #0
 8000e0e:	9303      	str	r3, [sp, #12]
 8000e10:	9e00      	ldr	r6, [sp, #0]
 8000e12:	9f01      	ldr	r7, [sp, #4]
 8000e14:	033b      	lsls	r3, r7, #12
 8000e16:	0b1b      	lsrs	r3, r3, #12
 8000e18:	469b      	mov	fp, r3
 8000e1a:	007b      	lsls	r3, r7, #1
 8000e1c:	0030      	movs	r0, r6
 8000e1e:	0d5b      	lsrs	r3, r3, #21
 8000e20:	0ffd      	lsrs	r5, r7, #31
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d100      	bne.n	8000e28 <__aeabi_ddiv+0x68>
 8000e26:	e128      	b.n	800107a <__aeabi_ddiv+0x2ba>
 8000e28:	4ac4      	ldr	r2, [pc, #784]	@ (800113c <__aeabi_ddiv+0x37c>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_ddiv+0x70>
 8000e2e:	e177      	b.n	8001120 <__aeabi_ddiv+0x360>
 8000e30:	4659      	mov	r1, fp
 8000e32:	0f72      	lsrs	r2, r6, #29
 8000e34:	00c9      	lsls	r1, r1, #3
 8000e36:	430a      	orrs	r2, r1
 8000e38:	2180      	movs	r1, #128	@ 0x80
 8000e3a:	0409      	lsls	r1, r1, #16
 8000e3c:	4311      	orrs	r1, r2
 8000e3e:	468b      	mov	fp, r1
 8000e40:	49bf      	ldr	r1, [pc, #764]	@ (8001140 <__aeabi_ddiv+0x380>)
 8000e42:	00f2      	lsls	r2, r6, #3
 8000e44:	468c      	mov	ip, r1
 8000e46:	4651      	mov	r1, sl
 8000e48:	4463      	add	r3, ip
 8000e4a:	1acb      	subs	r3, r1, r3
 8000e4c:	469a      	mov	sl, r3
 8000e4e:	2300      	movs	r3, #0
 8000e50:	9e02      	ldr	r6, [sp, #8]
 8000e52:	406e      	eors	r6, r5
 8000e54:	2c0f      	cmp	r4, #15
 8000e56:	d827      	bhi.n	8000ea8 <__aeabi_ddiv+0xe8>
 8000e58:	49ba      	ldr	r1, [pc, #744]	@ (8001144 <__aeabi_ddiv+0x384>)
 8000e5a:	00a4      	lsls	r4, r4, #2
 8000e5c:	5909      	ldr	r1, [r1, r4]
 8000e5e:	468f      	mov	pc, r1
 8000e60:	46cb      	mov	fp, r9
 8000e62:	4642      	mov	r2, r8
 8000e64:	9e02      	ldr	r6, [sp, #8]
 8000e66:	9b03      	ldr	r3, [sp, #12]
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d016      	beq.n	8000e9a <__aeabi_ddiv+0xda>
 8000e6c:	2b03      	cmp	r3, #3
 8000e6e:	d100      	bne.n	8000e72 <__aeabi_ddiv+0xb2>
 8000e70:	e2a6      	b.n	80013c0 <__aeabi_ddiv+0x600>
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d000      	beq.n	8000e78 <__aeabi_ddiv+0xb8>
 8000e76:	e0df      	b.n	8001038 <__aeabi_ddiv+0x278>
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	2400      	movs	r4, #0
 8000e7e:	4690      	mov	r8, r2
 8000e80:	051b      	lsls	r3, r3, #20
 8000e82:	4323      	orrs	r3, r4
 8000e84:	07f6      	lsls	r6, r6, #31
 8000e86:	4333      	orrs	r3, r6
 8000e88:	4640      	mov	r0, r8
 8000e8a:	0019      	movs	r1, r3
 8000e8c:	b007      	add	sp, #28
 8000e8e:	bcf0      	pop	{r4, r5, r6, r7}
 8000e90:	46bb      	mov	fp, r7
 8000e92:	46b2      	mov	sl, r6
 8000e94:	46a9      	mov	r9, r5
 8000e96:	46a0      	mov	r8, r4
 8000e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2400      	movs	r4, #0
 8000e9e:	4690      	mov	r8, r2
 8000ea0:	4ba6      	ldr	r3, [pc, #664]	@ (800113c <__aeabi_ddiv+0x37c>)
 8000ea2:	e7ed      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 8000ea4:	002e      	movs	r6, r5
 8000ea6:	e7df      	b.n	8000e68 <__aeabi_ddiv+0xa8>
 8000ea8:	45cb      	cmp	fp, r9
 8000eaa:	d200      	bcs.n	8000eae <__aeabi_ddiv+0xee>
 8000eac:	e1d4      	b.n	8001258 <__aeabi_ddiv+0x498>
 8000eae:	d100      	bne.n	8000eb2 <__aeabi_ddiv+0xf2>
 8000eb0:	e1cf      	b.n	8001252 <__aeabi_ddiv+0x492>
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	425b      	negs	r3, r3
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	4644      	mov	r4, r8
 8000eba:	4648      	mov	r0, r9
 8000ebc:	2700      	movs	r7, #0
 8000ebe:	44e2      	add	sl, ip
 8000ec0:	465b      	mov	r3, fp
 8000ec2:	0e15      	lsrs	r5, r2, #24
 8000ec4:	021b      	lsls	r3, r3, #8
 8000ec6:	431d      	orrs	r5, r3
 8000ec8:	0c19      	lsrs	r1, r3, #16
 8000eca:	042b      	lsls	r3, r5, #16
 8000ecc:	0212      	lsls	r2, r2, #8
 8000ece:	9500      	str	r5, [sp, #0]
 8000ed0:	0c1d      	lsrs	r5, r3, #16
 8000ed2:	4691      	mov	r9, r2
 8000ed4:	9102      	str	r1, [sp, #8]
 8000ed6:	9503      	str	r5, [sp, #12]
 8000ed8:	f7ff f9b8 	bl	800024c <__aeabi_uidivmod>
 8000edc:	0002      	movs	r2, r0
 8000ede:	436a      	muls	r2, r5
 8000ee0:	040b      	lsls	r3, r1, #16
 8000ee2:	0c21      	lsrs	r1, r4, #16
 8000ee4:	4680      	mov	r8, r0
 8000ee6:	4319      	orrs	r1, r3
 8000ee8:	428a      	cmp	r2, r1
 8000eea:	d909      	bls.n	8000f00 <__aeabi_ddiv+0x140>
 8000eec:	9d00      	ldr	r5, [sp, #0]
 8000eee:	2301      	movs	r3, #1
 8000ef0:	46ac      	mov	ip, r5
 8000ef2:	425b      	negs	r3, r3
 8000ef4:	4461      	add	r1, ip
 8000ef6:	469c      	mov	ip, r3
 8000ef8:	44e0      	add	r8, ip
 8000efa:	428d      	cmp	r5, r1
 8000efc:	d800      	bhi.n	8000f00 <__aeabi_ddiv+0x140>
 8000efe:	e1fb      	b.n	80012f8 <__aeabi_ddiv+0x538>
 8000f00:	1a88      	subs	r0, r1, r2
 8000f02:	9902      	ldr	r1, [sp, #8]
 8000f04:	f7ff f9a2 	bl	800024c <__aeabi_uidivmod>
 8000f08:	9a03      	ldr	r2, [sp, #12]
 8000f0a:	0424      	lsls	r4, r4, #16
 8000f0c:	4342      	muls	r2, r0
 8000f0e:	0409      	lsls	r1, r1, #16
 8000f10:	0c24      	lsrs	r4, r4, #16
 8000f12:	0003      	movs	r3, r0
 8000f14:	430c      	orrs	r4, r1
 8000f16:	42a2      	cmp	r2, r4
 8000f18:	d906      	bls.n	8000f28 <__aeabi_ddiv+0x168>
 8000f1a:	9900      	ldr	r1, [sp, #0]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	468c      	mov	ip, r1
 8000f20:	4464      	add	r4, ip
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	d800      	bhi.n	8000f28 <__aeabi_ddiv+0x168>
 8000f26:	e1e1      	b.n	80012ec <__aeabi_ddiv+0x52c>
 8000f28:	1aa0      	subs	r0, r4, r2
 8000f2a:	4642      	mov	r2, r8
 8000f2c:	0412      	lsls	r2, r2, #16
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	4693      	mov	fp, r2
 8000f32:	464b      	mov	r3, r9
 8000f34:	4659      	mov	r1, fp
 8000f36:	0c1b      	lsrs	r3, r3, #16
 8000f38:	001d      	movs	r5, r3
 8000f3a:	9304      	str	r3, [sp, #16]
 8000f3c:	040b      	lsls	r3, r1, #16
 8000f3e:	4649      	mov	r1, r9
 8000f40:	0409      	lsls	r1, r1, #16
 8000f42:	0c09      	lsrs	r1, r1, #16
 8000f44:	000c      	movs	r4, r1
 8000f46:	0c1b      	lsrs	r3, r3, #16
 8000f48:	435c      	muls	r4, r3
 8000f4a:	0c12      	lsrs	r2, r2, #16
 8000f4c:	436b      	muls	r3, r5
 8000f4e:	4688      	mov	r8, r1
 8000f50:	4351      	muls	r1, r2
 8000f52:	436a      	muls	r2, r5
 8000f54:	0c25      	lsrs	r5, r4, #16
 8000f56:	46ac      	mov	ip, r5
 8000f58:	185b      	adds	r3, r3, r1
 8000f5a:	4463      	add	r3, ip
 8000f5c:	4299      	cmp	r1, r3
 8000f5e:	d903      	bls.n	8000f68 <__aeabi_ddiv+0x1a8>
 8000f60:	2180      	movs	r1, #128	@ 0x80
 8000f62:	0249      	lsls	r1, r1, #9
 8000f64:	468c      	mov	ip, r1
 8000f66:	4462      	add	r2, ip
 8000f68:	0c19      	lsrs	r1, r3, #16
 8000f6a:	0424      	lsls	r4, r4, #16
 8000f6c:	041b      	lsls	r3, r3, #16
 8000f6e:	0c24      	lsrs	r4, r4, #16
 8000f70:	188a      	adds	r2, r1, r2
 8000f72:	191c      	adds	r4, r3, r4
 8000f74:	4290      	cmp	r0, r2
 8000f76:	d302      	bcc.n	8000f7e <__aeabi_ddiv+0x1be>
 8000f78:	d116      	bne.n	8000fa8 <__aeabi_ddiv+0x1e8>
 8000f7a:	42a7      	cmp	r7, r4
 8000f7c:	d214      	bcs.n	8000fa8 <__aeabi_ddiv+0x1e8>
 8000f7e:	465b      	mov	r3, fp
 8000f80:	9d00      	ldr	r5, [sp, #0]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	444f      	add	r7, r9
 8000f86:	9305      	str	r3, [sp, #20]
 8000f88:	454f      	cmp	r7, r9
 8000f8a:	419b      	sbcs	r3, r3
 8000f8c:	46ac      	mov	ip, r5
 8000f8e:	425b      	negs	r3, r3
 8000f90:	4463      	add	r3, ip
 8000f92:	18c0      	adds	r0, r0, r3
 8000f94:	4285      	cmp	r5, r0
 8000f96:	d300      	bcc.n	8000f9a <__aeabi_ddiv+0x1da>
 8000f98:	e1a1      	b.n	80012de <__aeabi_ddiv+0x51e>
 8000f9a:	4282      	cmp	r2, r0
 8000f9c:	d900      	bls.n	8000fa0 <__aeabi_ddiv+0x1e0>
 8000f9e:	e1f6      	b.n	800138e <__aeabi_ddiv+0x5ce>
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_ddiv+0x1e4>
 8000fa2:	e1f1      	b.n	8001388 <__aeabi_ddiv+0x5c8>
 8000fa4:	9b05      	ldr	r3, [sp, #20]
 8000fa6:	469b      	mov	fp, r3
 8000fa8:	1b3c      	subs	r4, r7, r4
 8000faa:	42a7      	cmp	r7, r4
 8000fac:	41bf      	sbcs	r7, r7
 8000fae:	9d00      	ldr	r5, [sp, #0]
 8000fb0:	1a80      	subs	r0, r0, r2
 8000fb2:	427f      	negs	r7, r7
 8000fb4:	1bc0      	subs	r0, r0, r7
 8000fb6:	4285      	cmp	r5, r0
 8000fb8:	d100      	bne.n	8000fbc <__aeabi_ddiv+0x1fc>
 8000fba:	e1d0      	b.n	800135e <__aeabi_ddiv+0x59e>
 8000fbc:	9902      	ldr	r1, [sp, #8]
 8000fbe:	f7ff f945 	bl	800024c <__aeabi_uidivmod>
 8000fc2:	9a03      	ldr	r2, [sp, #12]
 8000fc4:	040b      	lsls	r3, r1, #16
 8000fc6:	4342      	muls	r2, r0
 8000fc8:	0c21      	lsrs	r1, r4, #16
 8000fca:	0007      	movs	r7, r0
 8000fcc:	4319      	orrs	r1, r3
 8000fce:	428a      	cmp	r2, r1
 8000fd0:	d900      	bls.n	8000fd4 <__aeabi_ddiv+0x214>
 8000fd2:	e178      	b.n	80012c6 <__aeabi_ddiv+0x506>
 8000fd4:	1a88      	subs	r0, r1, r2
 8000fd6:	9902      	ldr	r1, [sp, #8]
 8000fd8:	f7ff f938 	bl	800024c <__aeabi_uidivmod>
 8000fdc:	9a03      	ldr	r2, [sp, #12]
 8000fde:	0424      	lsls	r4, r4, #16
 8000fe0:	4342      	muls	r2, r0
 8000fe2:	0409      	lsls	r1, r1, #16
 8000fe4:	0c24      	lsrs	r4, r4, #16
 8000fe6:	0003      	movs	r3, r0
 8000fe8:	430c      	orrs	r4, r1
 8000fea:	42a2      	cmp	r2, r4
 8000fec:	d900      	bls.n	8000ff0 <__aeabi_ddiv+0x230>
 8000fee:	e15d      	b.n	80012ac <__aeabi_ddiv+0x4ec>
 8000ff0:	4641      	mov	r1, r8
 8000ff2:	1aa4      	subs	r4, r4, r2
 8000ff4:	043a      	lsls	r2, r7, #16
 8000ff6:	431a      	orrs	r2, r3
 8000ff8:	9d04      	ldr	r5, [sp, #16]
 8000ffa:	0413      	lsls	r3, r2, #16
 8000ffc:	0c1b      	lsrs	r3, r3, #16
 8000ffe:	4359      	muls	r1, r3
 8001000:	4647      	mov	r7, r8
 8001002:	436b      	muls	r3, r5
 8001004:	469c      	mov	ip, r3
 8001006:	0c10      	lsrs	r0, r2, #16
 8001008:	4347      	muls	r7, r0
 800100a:	0c0b      	lsrs	r3, r1, #16
 800100c:	44bc      	add	ip, r7
 800100e:	4463      	add	r3, ip
 8001010:	4368      	muls	r0, r5
 8001012:	429f      	cmp	r7, r3
 8001014:	d903      	bls.n	800101e <__aeabi_ddiv+0x25e>
 8001016:	2580      	movs	r5, #128	@ 0x80
 8001018:	026d      	lsls	r5, r5, #9
 800101a:	46ac      	mov	ip, r5
 800101c:	4460      	add	r0, ip
 800101e:	0c1f      	lsrs	r7, r3, #16
 8001020:	0409      	lsls	r1, r1, #16
 8001022:	041b      	lsls	r3, r3, #16
 8001024:	0c09      	lsrs	r1, r1, #16
 8001026:	183f      	adds	r7, r7, r0
 8001028:	185b      	adds	r3, r3, r1
 800102a:	42bc      	cmp	r4, r7
 800102c:	d200      	bcs.n	8001030 <__aeabi_ddiv+0x270>
 800102e:	e102      	b.n	8001236 <__aeabi_ddiv+0x476>
 8001030:	d100      	bne.n	8001034 <__aeabi_ddiv+0x274>
 8001032:	e0fd      	b.n	8001230 <__aeabi_ddiv+0x470>
 8001034:	2301      	movs	r3, #1
 8001036:	431a      	orrs	r2, r3
 8001038:	4b43      	ldr	r3, [pc, #268]	@ (8001148 <__aeabi_ddiv+0x388>)
 800103a:	4453      	add	r3, sl
 800103c:	2b00      	cmp	r3, #0
 800103e:	dc00      	bgt.n	8001042 <__aeabi_ddiv+0x282>
 8001040:	e0ae      	b.n	80011a0 <__aeabi_ddiv+0x3e0>
 8001042:	0751      	lsls	r1, r2, #29
 8001044:	d000      	beq.n	8001048 <__aeabi_ddiv+0x288>
 8001046:	e198      	b.n	800137a <__aeabi_ddiv+0x5ba>
 8001048:	4659      	mov	r1, fp
 800104a:	01c9      	lsls	r1, r1, #7
 800104c:	d506      	bpl.n	800105c <__aeabi_ddiv+0x29c>
 800104e:	4659      	mov	r1, fp
 8001050:	4b3e      	ldr	r3, [pc, #248]	@ (800114c <__aeabi_ddiv+0x38c>)
 8001052:	4019      	ands	r1, r3
 8001054:	2380      	movs	r3, #128	@ 0x80
 8001056:	468b      	mov	fp, r1
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	4453      	add	r3, sl
 800105c:	493c      	ldr	r1, [pc, #240]	@ (8001150 <__aeabi_ddiv+0x390>)
 800105e:	428b      	cmp	r3, r1
 8001060:	dd00      	ble.n	8001064 <__aeabi_ddiv+0x2a4>
 8001062:	e71a      	b.n	8000e9a <__aeabi_ddiv+0xda>
 8001064:	4659      	mov	r1, fp
 8001066:	08d2      	lsrs	r2, r2, #3
 8001068:	0749      	lsls	r1, r1, #29
 800106a:	4311      	orrs	r1, r2
 800106c:	465a      	mov	r2, fp
 800106e:	055b      	lsls	r3, r3, #21
 8001070:	0254      	lsls	r4, r2, #9
 8001072:	4688      	mov	r8, r1
 8001074:	0b24      	lsrs	r4, r4, #12
 8001076:	0d5b      	lsrs	r3, r3, #21
 8001078:	e702      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 800107a:	465a      	mov	r2, fp
 800107c:	9b00      	ldr	r3, [sp, #0]
 800107e:	431a      	orrs	r2, r3
 8001080:	d100      	bne.n	8001084 <__aeabi_ddiv+0x2c4>
 8001082:	e07e      	b.n	8001182 <__aeabi_ddiv+0x3c2>
 8001084:	465b      	mov	r3, fp
 8001086:	2b00      	cmp	r3, #0
 8001088:	d100      	bne.n	800108c <__aeabi_ddiv+0x2cc>
 800108a:	e100      	b.n	800128e <__aeabi_ddiv+0x4ce>
 800108c:	4658      	mov	r0, fp
 800108e:	f7ff fa0b 	bl	80004a8 <__clzsi2>
 8001092:	0002      	movs	r2, r0
 8001094:	0003      	movs	r3, r0
 8001096:	3a0b      	subs	r2, #11
 8001098:	271d      	movs	r7, #29
 800109a:	9e00      	ldr	r6, [sp, #0]
 800109c:	1aba      	subs	r2, r7, r2
 800109e:	0019      	movs	r1, r3
 80010a0:	4658      	mov	r0, fp
 80010a2:	40d6      	lsrs	r6, r2
 80010a4:	3908      	subs	r1, #8
 80010a6:	4088      	lsls	r0, r1
 80010a8:	0032      	movs	r2, r6
 80010aa:	4302      	orrs	r2, r0
 80010ac:	4693      	mov	fp, r2
 80010ae:	9a00      	ldr	r2, [sp, #0]
 80010b0:	408a      	lsls	r2, r1
 80010b2:	4928      	ldr	r1, [pc, #160]	@ (8001154 <__aeabi_ddiv+0x394>)
 80010b4:	4453      	add	r3, sl
 80010b6:	468a      	mov	sl, r1
 80010b8:	449a      	add	sl, r3
 80010ba:	2300      	movs	r3, #0
 80010bc:	e6c8      	b.n	8000e50 <__aeabi_ddiv+0x90>
 80010be:	465b      	mov	r3, fp
 80010c0:	4303      	orrs	r3, r0
 80010c2:	4699      	mov	r9, r3
 80010c4:	d056      	beq.n	8001174 <__aeabi_ddiv+0x3b4>
 80010c6:	465b      	mov	r3, fp
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d100      	bne.n	80010ce <__aeabi_ddiv+0x30e>
 80010cc:	e0cd      	b.n	800126a <__aeabi_ddiv+0x4aa>
 80010ce:	4658      	mov	r0, fp
 80010d0:	f7ff f9ea 	bl	80004a8 <__clzsi2>
 80010d4:	230b      	movs	r3, #11
 80010d6:	425b      	negs	r3, r3
 80010d8:	469c      	mov	ip, r3
 80010da:	0002      	movs	r2, r0
 80010dc:	4484      	add	ip, r0
 80010de:	4666      	mov	r6, ip
 80010e0:	231d      	movs	r3, #29
 80010e2:	1b9b      	subs	r3, r3, r6
 80010e4:	0026      	movs	r6, r4
 80010e6:	0011      	movs	r1, r2
 80010e8:	4658      	mov	r0, fp
 80010ea:	40de      	lsrs	r6, r3
 80010ec:	3908      	subs	r1, #8
 80010ee:	4088      	lsls	r0, r1
 80010f0:	0033      	movs	r3, r6
 80010f2:	4303      	orrs	r3, r0
 80010f4:	4699      	mov	r9, r3
 80010f6:	0023      	movs	r3, r4
 80010f8:	408b      	lsls	r3, r1
 80010fa:	4698      	mov	r8, r3
 80010fc:	4b16      	ldr	r3, [pc, #88]	@ (8001158 <__aeabi_ddiv+0x398>)
 80010fe:	2400      	movs	r4, #0
 8001100:	1a9b      	subs	r3, r3, r2
 8001102:	469a      	mov	sl, r3
 8001104:	2300      	movs	r3, #0
 8001106:	9303      	str	r3, [sp, #12]
 8001108:	e682      	b.n	8000e10 <__aeabi_ddiv+0x50>
 800110a:	465a      	mov	r2, fp
 800110c:	4302      	orrs	r2, r0
 800110e:	4691      	mov	r9, r2
 8001110:	d12a      	bne.n	8001168 <__aeabi_ddiv+0x3a8>
 8001112:	2200      	movs	r2, #0
 8001114:	469a      	mov	sl, r3
 8001116:	2302      	movs	r3, #2
 8001118:	4690      	mov	r8, r2
 800111a:	2408      	movs	r4, #8
 800111c:	9303      	str	r3, [sp, #12]
 800111e:	e677      	b.n	8000e10 <__aeabi_ddiv+0x50>
 8001120:	465a      	mov	r2, fp
 8001122:	9b00      	ldr	r3, [sp, #0]
 8001124:	431a      	orrs	r2, r3
 8001126:	4b0d      	ldr	r3, [pc, #52]	@ (800115c <__aeabi_ddiv+0x39c>)
 8001128:	469c      	mov	ip, r3
 800112a:	44e2      	add	sl, ip
 800112c:	2a00      	cmp	r2, #0
 800112e:	d117      	bne.n	8001160 <__aeabi_ddiv+0x3a0>
 8001130:	2302      	movs	r3, #2
 8001132:	431c      	orrs	r4, r3
 8001134:	2300      	movs	r3, #0
 8001136:	469b      	mov	fp, r3
 8001138:	3302      	adds	r3, #2
 800113a:	e689      	b.n	8000e50 <__aeabi_ddiv+0x90>
 800113c:	000007ff 	.word	0x000007ff
 8001140:	fffffc01 	.word	0xfffffc01
 8001144:	0800fde0 	.word	0x0800fde0
 8001148:	000003ff 	.word	0x000003ff
 800114c:	feffffff 	.word	0xfeffffff
 8001150:	000007fe 	.word	0x000007fe
 8001154:	000003f3 	.word	0x000003f3
 8001158:	fffffc0d 	.word	0xfffffc0d
 800115c:	fffff801 	.word	0xfffff801
 8001160:	2303      	movs	r3, #3
 8001162:	0032      	movs	r2, r6
 8001164:	431c      	orrs	r4, r3
 8001166:	e673      	b.n	8000e50 <__aeabi_ddiv+0x90>
 8001168:	469a      	mov	sl, r3
 800116a:	2303      	movs	r3, #3
 800116c:	46d9      	mov	r9, fp
 800116e:	240c      	movs	r4, #12
 8001170:	9303      	str	r3, [sp, #12]
 8001172:	e64d      	b.n	8000e10 <__aeabi_ddiv+0x50>
 8001174:	2300      	movs	r3, #0
 8001176:	4698      	mov	r8, r3
 8001178:	469a      	mov	sl, r3
 800117a:	3301      	adds	r3, #1
 800117c:	2404      	movs	r4, #4
 800117e:	9303      	str	r3, [sp, #12]
 8001180:	e646      	b.n	8000e10 <__aeabi_ddiv+0x50>
 8001182:	2301      	movs	r3, #1
 8001184:	431c      	orrs	r4, r3
 8001186:	2300      	movs	r3, #0
 8001188:	469b      	mov	fp, r3
 800118a:	3301      	adds	r3, #1
 800118c:	e660      	b.n	8000e50 <__aeabi_ddiv+0x90>
 800118e:	2300      	movs	r3, #0
 8001190:	2480      	movs	r4, #128	@ 0x80
 8001192:	4698      	mov	r8, r3
 8001194:	2600      	movs	r6, #0
 8001196:	4b92      	ldr	r3, [pc, #584]	@ (80013e0 <__aeabi_ddiv+0x620>)
 8001198:	0324      	lsls	r4, r4, #12
 800119a:	e671      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 800119c:	2201      	movs	r2, #1
 800119e:	4252      	negs	r2, r2
 80011a0:	2101      	movs	r1, #1
 80011a2:	1ac9      	subs	r1, r1, r3
 80011a4:	2938      	cmp	r1, #56	@ 0x38
 80011a6:	dd00      	ble.n	80011aa <__aeabi_ddiv+0x3ea>
 80011a8:	e666      	b.n	8000e78 <__aeabi_ddiv+0xb8>
 80011aa:	291f      	cmp	r1, #31
 80011ac:	dc00      	bgt.n	80011b0 <__aeabi_ddiv+0x3f0>
 80011ae:	e0ab      	b.n	8001308 <__aeabi_ddiv+0x548>
 80011b0:	201f      	movs	r0, #31
 80011b2:	4240      	negs	r0, r0
 80011b4:	1ac3      	subs	r3, r0, r3
 80011b6:	4658      	mov	r0, fp
 80011b8:	40d8      	lsrs	r0, r3
 80011ba:	0003      	movs	r3, r0
 80011bc:	2920      	cmp	r1, #32
 80011be:	d004      	beq.n	80011ca <__aeabi_ddiv+0x40a>
 80011c0:	4658      	mov	r0, fp
 80011c2:	4988      	ldr	r1, [pc, #544]	@ (80013e4 <__aeabi_ddiv+0x624>)
 80011c4:	4451      	add	r1, sl
 80011c6:	4088      	lsls	r0, r1
 80011c8:	4302      	orrs	r2, r0
 80011ca:	1e51      	subs	r1, r2, #1
 80011cc:	418a      	sbcs	r2, r1
 80011ce:	431a      	orrs	r2, r3
 80011d0:	2307      	movs	r3, #7
 80011d2:	0019      	movs	r1, r3
 80011d4:	2400      	movs	r4, #0
 80011d6:	4011      	ands	r1, r2
 80011d8:	4213      	tst	r3, r2
 80011da:	d00c      	beq.n	80011f6 <__aeabi_ddiv+0x436>
 80011dc:	230f      	movs	r3, #15
 80011de:	4013      	ands	r3, r2
 80011e0:	2b04      	cmp	r3, #4
 80011e2:	d100      	bne.n	80011e6 <__aeabi_ddiv+0x426>
 80011e4:	e0f9      	b.n	80013da <__aeabi_ddiv+0x61a>
 80011e6:	1d11      	adds	r1, r2, #4
 80011e8:	4291      	cmp	r1, r2
 80011ea:	419b      	sbcs	r3, r3
 80011ec:	000a      	movs	r2, r1
 80011ee:	425b      	negs	r3, r3
 80011f0:	0759      	lsls	r1, r3, #29
 80011f2:	025b      	lsls	r3, r3, #9
 80011f4:	0b1c      	lsrs	r4, r3, #12
 80011f6:	08d2      	lsrs	r2, r2, #3
 80011f8:	430a      	orrs	r2, r1
 80011fa:	4690      	mov	r8, r2
 80011fc:	2300      	movs	r3, #0
 80011fe:	e63f      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 8001200:	2480      	movs	r4, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	0324      	lsls	r4, r4, #12
 8001206:	4223      	tst	r3, r4
 8001208:	d009      	beq.n	800121e <__aeabi_ddiv+0x45e>
 800120a:	465b      	mov	r3, fp
 800120c:	4223      	tst	r3, r4
 800120e:	d106      	bne.n	800121e <__aeabi_ddiv+0x45e>
 8001210:	431c      	orrs	r4, r3
 8001212:	0324      	lsls	r4, r4, #12
 8001214:	002e      	movs	r6, r5
 8001216:	4690      	mov	r8, r2
 8001218:	4b71      	ldr	r3, [pc, #452]	@ (80013e0 <__aeabi_ddiv+0x620>)
 800121a:	0b24      	lsrs	r4, r4, #12
 800121c:	e630      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 800121e:	2480      	movs	r4, #128	@ 0x80
 8001220:	464b      	mov	r3, r9
 8001222:	0324      	lsls	r4, r4, #12
 8001224:	431c      	orrs	r4, r3
 8001226:	0324      	lsls	r4, r4, #12
 8001228:	9e02      	ldr	r6, [sp, #8]
 800122a:	4b6d      	ldr	r3, [pc, #436]	@ (80013e0 <__aeabi_ddiv+0x620>)
 800122c:	0b24      	lsrs	r4, r4, #12
 800122e:	e627      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 8001230:	2b00      	cmp	r3, #0
 8001232:	d100      	bne.n	8001236 <__aeabi_ddiv+0x476>
 8001234:	e700      	b.n	8001038 <__aeabi_ddiv+0x278>
 8001236:	9800      	ldr	r0, [sp, #0]
 8001238:	1e51      	subs	r1, r2, #1
 800123a:	4684      	mov	ip, r0
 800123c:	4464      	add	r4, ip
 800123e:	4284      	cmp	r4, r0
 8001240:	d200      	bcs.n	8001244 <__aeabi_ddiv+0x484>
 8001242:	e084      	b.n	800134e <__aeabi_ddiv+0x58e>
 8001244:	42bc      	cmp	r4, r7
 8001246:	d200      	bcs.n	800124a <__aeabi_ddiv+0x48a>
 8001248:	e0ae      	b.n	80013a8 <__aeabi_ddiv+0x5e8>
 800124a:	d100      	bne.n	800124e <__aeabi_ddiv+0x48e>
 800124c:	e0c1      	b.n	80013d2 <__aeabi_ddiv+0x612>
 800124e:	000a      	movs	r2, r1
 8001250:	e6f0      	b.n	8001034 <__aeabi_ddiv+0x274>
 8001252:	4542      	cmp	r2, r8
 8001254:	d900      	bls.n	8001258 <__aeabi_ddiv+0x498>
 8001256:	e62c      	b.n	8000eb2 <__aeabi_ddiv+0xf2>
 8001258:	464b      	mov	r3, r9
 800125a:	07dc      	lsls	r4, r3, #31
 800125c:	0858      	lsrs	r0, r3, #1
 800125e:	4643      	mov	r3, r8
 8001260:	085b      	lsrs	r3, r3, #1
 8001262:	431c      	orrs	r4, r3
 8001264:	4643      	mov	r3, r8
 8001266:	07df      	lsls	r7, r3, #31
 8001268:	e62a      	b.n	8000ec0 <__aeabi_ddiv+0x100>
 800126a:	f7ff f91d 	bl	80004a8 <__clzsi2>
 800126e:	2315      	movs	r3, #21
 8001270:	469c      	mov	ip, r3
 8001272:	4484      	add	ip, r0
 8001274:	0002      	movs	r2, r0
 8001276:	4663      	mov	r3, ip
 8001278:	3220      	adds	r2, #32
 800127a:	2b1c      	cmp	r3, #28
 800127c:	dc00      	bgt.n	8001280 <__aeabi_ddiv+0x4c0>
 800127e:	e72e      	b.n	80010de <__aeabi_ddiv+0x31e>
 8001280:	0023      	movs	r3, r4
 8001282:	3808      	subs	r0, #8
 8001284:	4083      	lsls	r3, r0
 8001286:	4699      	mov	r9, r3
 8001288:	2300      	movs	r3, #0
 800128a:	4698      	mov	r8, r3
 800128c:	e736      	b.n	80010fc <__aeabi_ddiv+0x33c>
 800128e:	f7ff f90b 	bl	80004a8 <__clzsi2>
 8001292:	0002      	movs	r2, r0
 8001294:	0003      	movs	r3, r0
 8001296:	3215      	adds	r2, #21
 8001298:	3320      	adds	r3, #32
 800129a:	2a1c      	cmp	r2, #28
 800129c:	dc00      	bgt.n	80012a0 <__aeabi_ddiv+0x4e0>
 800129e:	e6fb      	b.n	8001098 <__aeabi_ddiv+0x2d8>
 80012a0:	9900      	ldr	r1, [sp, #0]
 80012a2:	3808      	subs	r0, #8
 80012a4:	4081      	lsls	r1, r0
 80012a6:	2200      	movs	r2, #0
 80012a8:	468b      	mov	fp, r1
 80012aa:	e702      	b.n	80010b2 <__aeabi_ddiv+0x2f2>
 80012ac:	9900      	ldr	r1, [sp, #0]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	468c      	mov	ip, r1
 80012b2:	4464      	add	r4, ip
 80012b4:	42a1      	cmp	r1, r4
 80012b6:	d900      	bls.n	80012ba <__aeabi_ddiv+0x4fa>
 80012b8:	e69a      	b.n	8000ff0 <__aeabi_ddiv+0x230>
 80012ba:	42a2      	cmp	r2, r4
 80012bc:	d800      	bhi.n	80012c0 <__aeabi_ddiv+0x500>
 80012be:	e697      	b.n	8000ff0 <__aeabi_ddiv+0x230>
 80012c0:	1e83      	subs	r3, r0, #2
 80012c2:	4464      	add	r4, ip
 80012c4:	e694      	b.n	8000ff0 <__aeabi_ddiv+0x230>
 80012c6:	46ac      	mov	ip, r5
 80012c8:	4461      	add	r1, ip
 80012ca:	3f01      	subs	r7, #1
 80012cc:	428d      	cmp	r5, r1
 80012ce:	d900      	bls.n	80012d2 <__aeabi_ddiv+0x512>
 80012d0:	e680      	b.n	8000fd4 <__aeabi_ddiv+0x214>
 80012d2:	428a      	cmp	r2, r1
 80012d4:	d800      	bhi.n	80012d8 <__aeabi_ddiv+0x518>
 80012d6:	e67d      	b.n	8000fd4 <__aeabi_ddiv+0x214>
 80012d8:	1e87      	subs	r7, r0, #2
 80012da:	4461      	add	r1, ip
 80012dc:	e67a      	b.n	8000fd4 <__aeabi_ddiv+0x214>
 80012de:	4285      	cmp	r5, r0
 80012e0:	d000      	beq.n	80012e4 <__aeabi_ddiv+0x524>
 80012e2:	e65f      	b.n	8000fa4 <__aeabi_ddiv+0x1e4>
 80012e4:	45b9      	cmp	r9, r7
 80012e6:	d900      	bls.n	80012ea <__aeabi_ddiv+0x52a>
 80012e8:	e65c      	b.n	8000fa4 <__aeabi_ddiv+0x1e4>
 80012ea:	e656      	b.n	8000f9a <__aeabi_ddiv+0x1da>
 80012ec:	42a2      	cmp	r2, r4
 80012ee:	d800      	bhi.n	80012f2 <__aeabi_ddiv+0x532>
 80012f0:	e61a      	b.n	8000f28 <__aeabi_ddiv+0x168>
 80012f2:	1e83      	subs	r3, r0, #2
 80012f4:	4464      	add	r4, ip
 80012f6:	e617      	b.n	8000f28 <__aeabi_ddiv+0x168>
 80012f8:	428a      	cmp	r2, r1
 80012fa:	d800      	bhi.n	80012fe <__aeabi_ddiv+0x53e>
 80012fc:	e600      	b.n	8000f00 <__aeabi_ddiv+0x140>
 80012fe:	46ac      	mov	ip, r5
 8001300:	1e83      	subs	r3, r0, #2
 8001302:	4698      	mov	r8, r3
 8001304:	4461      	add	r1, ip
 8001306:	e5fb      	b.n	8000f00 <__aeabi_ddiv+0x140>
 8001308:	4837      	ldr	r0, [pc, #220]	@ (80013e8 <__aeabi_ddiv+0x628>)
 800130a:	0014      	movs	r4, r2
 800130c:	4450      	add	r0, sl
 800130e:	4082      	lsls	r2, r0
 8001310:	465b      	mov	r3, fp
 8001312:	0017      	movs	r7, r2
 8001314:	4083      	lsls	r3, r0
 8001316:	40cc      	lsrs	r4, r1
 8001318:	1e7a      	subs	r2, r7, #1
 800131a:	4197      	sbcs	r7, r2
 800131c:	4323      	orrs	r3, r4
 800131e:	433b      	orrs	r3, r7
 8001320:	001a      	movs	r2, r3
 8001322:	465b      	mov	r3, fp
 8001324:	40cb      	lsrs	r3, r1
 8001326:	0751      	lsls	r1, r2, #29
 8001328:	d009      	beq.n	800133e <__aeabi_ddiv+0x57e>
 800132a:	210f      	movs	r1, #15
 800132c:	4011      	ands	r1, r2
 800132e:	2904      	cmp	r1, #4
 8001330:	d005      	beq.n	800133e <__aeabi_ddiv+0x57e>
 8001332:	1d11      	adds	r1, r2, #4
 8001334:	4291      	cmp	r1, r2
 8001336:	4192      	sbcs	r2, r2
 8001338:	4252      	negs	r2, r2
 800133a:	189b      	adds	r3, r3, r2
 800133c:	000a      	movs	r2, r1
 800133e:	0219      	lsls	r1, r3, #8
 8001340:	d400      	bmi.n	8001344 <__aeabi_ddiv+0x584>
 8001342:	e755      	b.n	80011f0 <__aeabi_ddiv+0x430>
 8001344:	2200      	movs	r2, #0
 8001346:	2301      	movs	r3, #1
 8001348:	2400      	movs	r4, #0
 800134a:	4690      	mov	r8, r2
 800134c:	e598      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 800134e:	000a      	movs	r2, r1
 8001350:	42bc      	cmp	r4, r7
 8001352:	d000      	beq.n	8001356 <__aeabi_ddiv+0x596>
 8001354:	e66e      	b.n	8001034 <__aeabi_ddiv+0x274>
 8001356:	454b      	cmp	r3, r9
 8001358:	d000      	beq.n	800135c <__aeabi_ddiv+0x59c>
 800135a:	e66b      	b.n	8001034 <__aeabi_ddiv+0x274>
 800135c:	e66c      	b.n	8001038 <__aeabi_ddiv+0x278>
 800135e:	4b23      	ldr	r3, [pc, #140]	@ (80013ec <__aeabi_ddiv+0x62c>)
 8001360:	4a23      	ldr	r2, [pc, #140]	@ (80013f0 <__aeabi_ddiv+0x630>)
 8001362:	4453      	add	r3, sl
 8001364:	4592      	cmp	sl, r2
 8001366:	da00      	bge.n	800136a <__aeabi_ddiv+0x5aa>
 8001368:	e718      	b.n	800119c <__aeabi_ddiv+0x3dc>
 800136a:	2101      	movs	r1, #1
 800136c:	4249      	negs	r1, r1
 800136e:	1d0a      	adds	r2, r1, #4
 8001370:	428a      	cmp	r2, r1
 8001372:	4189      	sbcs	r1, r1
 8001374:	4249      	negs	r1, r1
 8001376:	448b      	add	fp, r1
 8001378:	e666      	b.n	8001048 <__aeabi_ddiv+0x288>
 800137a:	210f      	movs	r1, #15
 800137c:	4011      	ands	r1, r2
 800137e:	2904      	cmp	r1, #4
 8001380:	d100      	bne.n	8001384 <__aeabi_ddiv+0x5c4>
 8001382:	e661      	b.n	8001048 <__aeabi_ddiv+0x288>
 8001384:	0011      	movs	r1, r2
 8001386:	e7f2      	b.n	800136e <__aeabi_ddiv+0x5ae>
 8001388:	42bc      	cmp	r4, r7
 800138a:	d800      	bhi.n	800138e <__aeabi_ddiv+0x5ce>
 800138c:	e60a      	b.n	8000fa4 <__aeabi_ddiv+0x1e4>
 800138e:	2302      	movs	r3, #2
 8001390:	425b      	negs	r3, r3
 8001392:	469c      	mov	ip, r3
 8001394:	9900      	ldr	r1, [sp, #0]
 8001396:	444f      	add	r7, r9
 8001398:	454f      	cmp	r7, r9
 800139a:	419b      	sbcs	r3, r3
 800139c:	44e3      	add	fp, ip
 800139e:	468c      	mov	ip, r1
 80013a0:	425b      	negs	r3, r3
 80013a2:	4463      	add	r3, ip
 80013a4:	18c0      	adds	r0, r0, r3
 80013a6:	e5ff      	b.n	8000fa8 <__aeabi_ddiv+0x1e8>
 80013a8:	4649      	mov	r1, r9
 80013aa:	9d00      	ldr	r5, [sp, #0]
 80013ac:	0048      	lsls	r0, r1, #1
 80013ae:	4548      	cmp	r0, r9
 80013b0:	4189      	sbcs	r1, r1
 80013b2:	46ac      	mov	ip, r5
 80013b4:	4249      	negs	r1, r1
 80013b6:	4461      	add	r1, ip
 80013b8:	4681      	mov	r9, r0
 80013ba:	3a02      	subs	r2, #2
 80013bc:	1864      	adds	r4, r4, r1
 80013be:	e7c7      	b.n	8001350 <__aeabi_ddiv+0x590>
 80013c0:	2480      	movs	r4, #128	@ 0x80
 80013c2:	465b      	mov	r3, fp
 80013c4:	0324      	lsls	r4, r4, #12
 80013c6:	431c      	orrs	r4, r3
 80013c8:	0324      	lsls	r4, r4, #12
 80013ca:	4690      	mov	r8, r2
 80013cc:	4b04      	ldr	r3, [pc, #16]	@ (80013e0 <__aeabi_ddiv+0x620>)
 80013ce:	0b24      	lsrs	r4, r4, #12
 80013d0:	e556      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 80013d2:	4599      	cmp	r9, r3
 80013d4:	d3e8      	bcc.n	80013a8 <__aeabi_ddiv+0x5e8>
 80013d6:	000a      	movs	r2, r1
 80013d8:	e7bd      	b.n	8001356 <__aeabi_ddiv+0x596>
 80013da:	2300      	movs	r3, #0
 80013dc:	e708      	b.n	80011f0 <__aeabi_ddiv+0x430>
 80013de:	46c0      	nop			@ (mov r8, r8)
 80013e0:	000007ff 	.word	0x000007ff
 80013e4:	0000043e 	.word	0x0000043e
 80013e8:	0000041e 	.word	0x0000041e
 80013ec:	000003ff 	.word	0x000003ff
 80013f0:	fffffc02 	.word	0xfffffc02

080013f4 <__eqdf2>:
 80013f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f6:	4657      	mov	r7, sl
 80013f8:	46de      	mov	lr, fp
 80013fa:	464e      	mov	r6, r9
 80013fc:	4645      	mov	r5, r8
 80013fe:	b5e0      	push	{r5, r6, r7, lr}
 8001400:	000d      	movs	r5, r1
 8001402:	0004      	movs	r4, r0
 8001404:	0fe8      	lsrs	r0, r5, #31
 8001406:	4683      	mov	fp, r0
 8001408:	0309      	lsls	r1, r1, #12
 800140a:	0fd8      	lsrs	r0, r3, #31
 800140c:	0b09      	lsrs	r1, r1, #12
 800140e:	4682      	mov	sl, r0
 8001410:	4819      	ldr	r0, [pc, #100]	@ (8001478 <__eqdf2+0x84>)
 8001412:	468c      	mov	ip, r1
 8001414:	031f      	lsls	r7, r3, #12
 8001416:	0069      	lsls	r1, r5, #1
 8001418:	005e      	lsls	r6, r3, #1
 800141a:	0d49      	lsrs	r1, r1, #21
 800141c:	0b3f      	lsrs	r7, r7, #12
 800141e:	0d76      	lsrs	r6, r6, #21
 8001420:	4281      	cmp	r1, r0
 8001422:	d018      	beq.n	8001456 <__eqdf2+0x62>
 8001424:	4286      	cmp	r6, r0
 8001426:	d00f      	beq.n	8001448 <__eqdf2+0x54>
 8001428:	2001      	movs	r0, #1
 800142a:	42b1      	cmp	r1, r6
 800142c:	d10d      	bne.n	800144a <__eqdf2+0x56>
 800142e:	45bc      	cmp	ip, r7
 8001430:	d10b      	bne.n	800144a <__eqdf2+0x56>
 8001432:	4294      	cmp	r4, r2
 8001434:	d109      	bne.n	800144a <__eqdf2+0x56>
 8001436:	45d3      	cmp	fp, sl
 8001438:	d01c      	beq.n	8001474 <__eqdf2+0x80>
 800143a:	2900      	cmp	r1, #0
 800143c:	d105      	bne.n	800144a <__eqdf2+0x56>
 800143e:	4660      	mov	r0, ip
 8001440:	4320      	orrs	r0, r4
 8001442:	1e43      	subs	r3, r0, #1
 8001444:	4198      	sbcs	r0, r3
 8001446:	e000      	b.n	800144a <__eqdf2+0x56>
 8001448:	2001      	movs	r0, #1
 800144a:	bcf0      	pop	{r4, r5, r6, r7}
 800144c:	46bb      	mov	fp, r7
 800144e:	46b2      	mov	sl, r6
 8001450:	46a9      	mov	r9, r5
 8001452:	46a0      	mov	r8, r4
 8001454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001456:	2001      	movs	r0, #1
 8001458:	428e      	cmp	r6, r1
 800145a:	d1f6      	bne.n	800144a <__eqdf2+0x56>
 800145c:	4661      	mov	r1, ip
 800145e:	4339      	orrs	r1, r7
 8001460:	000f      	movs	r7, r1
 8001462:	4317      	orrs	r7, r2
 8001464:	4327      	orrs	r7, r4
 8001466:	d1f0      	bne.n	800144a <__eqdf2+0x56>
 8001468:	465b      	mov	r3, fp
 800146a:	4652      	mov	r2, sl
 800146c:	1a98      	subs	r0, r3, r2
 800146e:	1e43      	subs	r3, r0, #1
 8001470:	4198      	sbcs	r0, r3
 8001472:	e7ea      	b.n	800144a <__eqdf2+0x56>
 8001474:	2000      	movs	r0, #0
 8001476:	e7e8      	b.n	800144a <__eqdf2+0x56>
 8001478:	000007ff 	.word	0x000007ff

0800147c <__gedf2>:
 800147c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147e:	4657      	mov	r7, sl
 8001480:	464e      	mov	r6, r9
 8001482:	4645      	mov	r5, r8
 8001484:	46de      	mov	lr, fp
 8001486:	b5e0      	push	{r5, r6, r7, lr}
 8001488:	000d      	movs	r5, r1
 800148a:	030f      	lsls	r7, r1, #12
 800148c:	0b39      	lsrs	r1, r7, #12
 800148e:	b083      	sub	sp, #12
 8001490:	0004      	movs	r4, r0
 8001492:	4680      	mov	r8, r0
 8001494:	9101      	str	r1, [sp, #4]
 8001496:	0058      	lsls	r0, r3, #1
 8001498:	0fe9      	lsrs	r1, r5, #31
 800149a:	4f31      	ldr	r7, [pc, #196]	@ (8001560 <__gedf2+0xe4>)
 800149c:	0d40      	lsrs	r0, r0, #21
 800149e:	468c      	mov	ip, r1
 80014a0:	006e      	lsls	r6, r5, #1
 80014a2:	0319      	lsls	r1, r3, #12
 80014a4:	4682      	mov	sl, r0
 80014a6:	4691      	mov	r9, r2
 80014a8:	0d76      	lsrs	r6, r6, #21
 80014aa:	0b09      	lsrs	r1, r1, #12
 80014ac:	0fd8      	lsrs	r0, r3, #31
 80014ae:	42be      	cmp	r6, r7
 80014b0:	d01f      	beq.n	80014f2 <__gedf2+0x76>
 80014b2:	45ba      	cmp	sl, r7
 80014b4:	d00f      	beq.n	80014d6 <__gedf2+0x5a>
 80014b6:	2e00      	cmp	r6, #0
 80014b8:	d12f      	bne.n	800151a <__gedf2+0x9e>
 80014ba:	4655      	mov	r5, sl
 80014bc:	9e01      	ldr	r6, [sp, #4]
 80014be:	4334      	orrs	r4, r6
 80014c0:	2d00      	cmp	r5, #0
 80014c2:	d127      	bne.n	8001514 <__gedf2+0x98>
 80014c4:	430a      	orrs	r2, r1
 80014c6:	d03a      	beq.n	800153e <__gedf2+0xc2>
 80014c8:	2c00      	cmp	r4, #0
 80014ca:	d145      	bne.n	8001558 <__gedf2+0xdc>
 80014cc:	2800      	cmp	r0, #0
 80014ce:	d11a      	bne.n	8001506 <__gedf2+0x8a>
 80014d0:	2001      	movs	r0, #1
 80014d2:	4240      	negs	r0, r0
 80014d4:	e017      	b.n	8001506 <__gedf2+0x8a>
 80014d6:	4311      	orrs	r1, r2
 80014d8:	d13b      	bne.n	8001552 <__gedf2+0xd6>
 80014da:	2e00      	cmp	r6, #0
 80014dc:	d102      	bne.n	80014e4 <__gedf2+0x68>
 80014de:	9f01      	ldr	r7, [sp, #4]
 80014e0:	4327      	orrs	r7, r4
 80014e2:	d0f3      	beq.n	80014cc <__gedf2+0x50>
 80014e4:	4584      	cmp	ip, r0
 80014e6:	d109      	bne.n	80014fc <__gedf2+0x80>
 80014e8:	4663      	mov	r3, ip
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f0      	beq.n	80014d0 <__gedf2+0x54>
 80014ee:	4660      	mov	r0, ip
 80014f0:	e009      	b.n	8001506 <__gedf2+0x8a>
 80014f2:	9f01      	ldr	r7, [sp, #4]
 80014f4:	4327      	orrs	r7, r4
 80014f6:	d12c      	bne.n	8001552 <__gedf2+0xd6>
 80014f8:	45b2      	cmp	sl, r6
 80014fa:	d024      	beq.n	8001546 <__gedf2+0xca>
 80014fc:	4663      	mov	r3, ip
 80014fe:	2002      	movs	r0, #2
 8001500:	3b01      	subs	r3, #1
 8001502:	4018      	ands	r0, r3
 8001504:	3801      	subs	r0, #1
 8001506:	b003      	add	sp, #12
 8001508:	bcf0      	pop	{r4, r5, r6, r7}
 800150a:	46bb      	mov	fp, r7
 800150c:	46b2      	mov	sl, r6
 800150e:	46a9      	mov	r9, r5
 8001510:	46a0      	mov	r8, r4
 8001512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001514:	2c00      	cmp	r4, #0
 8001516:	d0d9      	beq.n	80014cc <__gedf2+0x50>
 8001518:	e7e4      	b.n	80014e4 <__gedf2+0x68>
 800151a:	4654      	mov	r4, sl
 800151c:	2c00      	cmp	r4, #0
 800151e:	d0ed      	beq.n	80014fc <__gedf2+0x80>
 8001520:	4584      	cmp	ip, r0
 8001522:	d1eb      	bne.n	80014fc <__gedf2+0x80>
 8001524:	4556      	cmp	r6, sl
 8001526:	dce9      	bgt.n	80014fc <__gedf2+0x80>
 8001528:	dbde      	blt.n	80014e8 <__gedf2+0x6c>
 800152a:	9b01      	ldr	r3, [sp, #4]
 800152c:	428b      	cmp	r3, r1
 800152e:	d8e5      	bhi.n	80014fc <__gedf2+0x80>
 8001530:	d1da      	bne.n	80014e8 <__gedf2+0x6c>
 8001532:	45c8      	cmp	r8, r9
 8001534:	d8e2      	bhi.n	80014fc <__gedf2+0x80>
 8001536:	2000      	movs	r0, #0
 8001538:	45c8      	cmp	r8, r9
 800153a:	d2e4      	bcs.n	8001506 <__gedf2+0x8a>
 800153c:	e7d4      	b.n	80014e8 <__gedf2+0x6c>
 800153e:	2000      	movs	r0, #0
 8001540:	2c00      	cmp	r4, #0
 8001542:	d0e0      	beq.n	8001506 <__gedf2+0x8a>
 8001544:	e7da      	b.n	80014fc <__gedf2+0x80>
 8001546:	4311      	orrs	r1, r2
 8001548:	d103      	bne.n	8001552 <__gedf2+0xd6>
 800154a:	4584      	cmp	ip, r0
 800154c:	d1d6      	bne.n	80014fc <__gedf2+0x80>
 800154e:	2000      	movs	r0, #0
 8001550:	e7d9      	b.n	8001506 <__gedf2+0x8a>
 8001552:	2002      	movs	r0, #2
 8001554:	4240      	negs	r0, r0
 8001556:	e7d6      	b.n	8001506 <__gedf2+0x8a>
 8001558:	4584      	cmp	ip, r0
 800155a:	d0e6      	beq.n	800152a <__gedf2+0xae>
 800155c:	e7ce      	b.n	80014fc <__gedf2+0x80>
 800155e:	46c0      	nop			@ (mov r8, r8)
 8001560:	000007ff 	.word	0x000007ff

08001564 <__ledf2>:
 8001564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001566:	4657      	mov	r7, sl
 8001568:	464e      	mov	r6, r9
 800156a:	4645      	mov	r5, r8
 800156c:	46de      	mov	lr, fp
 800156e:	b5e0      	push	{r5, r6, r7, lr}
 8001570:	000d      	movs	r5, r1
 8001572:	030f      	lsls	r7, r1, #12
 8001574:	0004      	movs	r4, r0
 8001576:	4680      	mov	r8, r0
 8001578:	0fe8      	lsrs	r0, r5, #31
 800157a:	0b39      	lsrs	r1, r7, #12
 800157c:	4684      	mov	ip, r0
 800157e:	b083      	sub	sp, #12
 8001580:	0058      	lsls	r0, r3, #1
 8001582:	4f30      	ldr	r7, [pc, #192]	@ (8001644 <__ledf2+0xe0>)
 8001584:	0d40      	lsrs	r0, r0, #21
 8001586:	9101      	str	r1, [sp, #4]
 8001588:	031e      	lsls	r6, r3, #12
 800158a:	0069      	lsls	r1, r5, #1
 800158c:	4682      	mov	sl, r0
 800158e:	4691      	mov	r9, r2
 8001590:	0d49      	lsrs	r1, r1, #21
 8001592:	0b36      	lsrs	r6, r6, #12
 8001594:	0fd8      	lsrs	r0, r3, #31
 8001596:	42b9      	cmp	r1, r7
 8001598:	d020      	beq.n	80015dc <__ledf2+0x78>
 800159a:	45ba      	cmp	sl, r7
 800159c:	d00f      	beq.n	80015be <__ledf2+0x5a>
 800159e:	2900      	cmp	r1, #0
 80015a0:	d12b      	bne.n	80015fa <__ledf2+0x96>
 80015a2:	9901      	ldr	r1, [sp, #4]
 80015a4:	430c      	orrs	r4, r1
 80015a6:	4651      	mov	r1, sl
 80015a8:	2900      	cmp	r1, #0
 80015aa:	d137      	bne.n	800161c <__ledf2+0xb8>
 80015ac:	4332      	orrs	r2, r6
 80015ae:	d038      	beq.n	8001622 <__ledf2+0xbe>
 80015b0:	2c00      	cmp	r4, #0
 80015b2:	d144      	bne.n	800163e <__ledf2+0xda>
 80015b4:	2800      	cmp	r0, #0
 80015b6:	d119      	bne.n	80015ec <__ledf2+0x88>
 80015b8:	2001      	movs	r0, #1
 80015ba:	4240      	negs	r0, r0
 80015bc:	e016      	b.n	80015ec <__ledf2+0x88>
 80015be:	4316      	orrs	r6, r2
 80015c0:	d113      	bne.n	80015ea <__ledf2+0x86>
 80015c2:	2900      	cmp	r1, #0
 80015c4:	d102      	bne.n	80015cc <__ledf2+0x68>
 80015c6:	9f01      	ldr	r7, [sp, #4]
 80015c8:	4327      	orrs	r7, r4
 80015ca:	d0f3      	beq.n	80015b4 <__ledf2+0x50>
 80015cc:	4584      	cmp	ip, r0
 80015ce:	d020      	beq.n	8001612 <__ledf2+0xae>
 80015d0:	4663      	mov	r3, ip
 80015d2:	2002      	movs	r0, #2
 80015d4:	3b01      	subs	r3, #1
 80015d6:	4018      	ands	r0, r3
 80015d8:	3801      	subs	r0, #1
 80015da:	e007      	b.n	80015ec <__ledf2+0x88>
 80015dc:	9f01      	ldr	r7, [sp, #4]
 80015de:	4327      	orrs	r7, r4
 80015e0:	d103      	bne.n	80015ea <__ledf2+0x86>
 80015e2:	458a      	cmp	sl, r1
 80015e4:	d1f4      	bne.n	80015d0 <__ledf2+0x6c>
 80015e6:	4316      	orrs	r6, r2
 80015e8:	d01f      	beq.n	800162a <__ledf2+0xc6>
 80015ea:	2002      	movs	r0, #2
 80015ec:	b003      	add	sp, #12
 80015ee:	bcf0      	pop	{r4, r5, r6, r7}
 80015f0:	46bb      	mov	fp, r7
 80015f2:	46b2      	mov	sl, r6
 80015f4:	46a9      	mov	r9, r5
 80015f6:	46a0      	mov	r8, r4
 80015f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015fa:	4654      	mov	r4, sl
 80015fc:	2c00      	cmp	r4, #0
 80015fe:	d0e7      	beq.n	80015d0 <__ledf2+0x6c>
 8001600:	4584      	cmp	ip, r0
 8001602:	d1e5      	bne.n	80015d0 <__ledf2+0x6c>
 8001604:	4551      	cmp	r1, sl
 8001606:	dce3      	bgt.n	80015d0 <__ledf2+0x6c>
 8001608:	db03      	blt.n	8001612 <__ledf2+0xae>
 800160a:	9b01      	ldr	r3, [sp, #4]
 800160c:	42b3      	cmp	r3, r6
 800160e:	d8df      	bhi.n	80015d0 <__ledf2+0x6c>
 8001610:	d00f      	beq.n	8001632 <__ledf2+0xce>
 8001612:	4663      	mov	r3, ip
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0cf      	beq.n	80015b8 <__ledf2+0x54>
 8001618:	4660      	mov	r0, ip
 800161a:	e7e7      	b.n	80015ec <__ledf2+0x88>
 800161c:	2c00      	cmp	r4, #0
 800161e:	d0c9      	beq.n	80015b4 <__ledf2+0x50>
 8001620:	e7d4      	b.n	80015cc <__ledf2+0x68>
 8001622:	2000      	movs	r0, #0
 8001624:	2c00      	cmp	r4, #0
 8001626:	d0e1      	beq.n	80015ec <__ledf2+0x88>
 8001628:	e7d2      	b.n	80015d0 <__ledf2+0x6c>
 800162a:	4584      	cmp	ip, r0
 800162c:	d1d0      	bne.n	80015d0 <__ledf2+0x6c>
 800162e:	2000      	movs	r0, #0
 8001630:	e7dc      	b.n	80015ec <__ledf2+0x88>
 8001632:	45c8      	cmp	r8, r9
 8001634:	d8cc      	bhi.n	80015d0 <__ledf2+0x6c>
 8001636:	2000      	movs	r0, #0
 8001638:	45c8      	cmp	r8, r9
 800163a:	d2d7      	bcs.n	80015ec <__ledf2+0x88>
 800163c:	e7e9      	b.n	8001612 <__ledf2+0xae>
 800163e:	4584      	cmp	ip, r0
 8001640:	d0e3      	beq.n	800160a <__ledf2+0xa6>
 8001642:	e7c5      	b.n	80015d0 <__ledf2+0x6c>
 8001644:	000007ff 	.word	0x000007ff

08001648 <__aeabi_dmul>:
 8001648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800164a:	4657      	mov	r7, sl
 800164c:	46de      	mov	lr, fp
 800164e:	464e      	mov	r6, r9
 8001650:	4645      	mov	r5, r8
 8001652:	b5e0      	push	{r5, r6, r7, lr}
 8001654:	001f      	movs	r7, r3
 8001656:	030b      	lsls	r3, r1, #12
 8001658:	0b1b      	lsrs	r3, r3, #12
 800165a:	0016      	movs	r6, r2
 800165c:	469a      	mov	sl, r3
 800165e:	0fca      	lsrs	r2, r1, #31
 8001660:	004b      	lsls	r3, r1, #1
 8001662:	0004      	movs	r4, r0
 8001664:	4693      	mov	fp, r2
 8001666:	b087      	sub	sp, #28
 8001668:	0d5b      	lsrs	r3, r3, #21
 800166a:	d100      	bne.n	800166e <__aeabi_dmul+0x26>
 800166c:	e0d5      	b.n	800181a <__aeabi_dmul+0x1d2>
 800166e:	4abb      	ldr	r2, [pc, #748]	@ (800195c <__aeabi_dmul+0x314>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d100      	bne.n	8001676 <__aeabi_dmul+0x2e>
 8001674:	e0f8      	b.n	8001868 <__aeabi_dmul+0x220>
 8001676:	4651      	mov	r1, sl
 8001678:	0f42      	lsrs	r2, r0, #29
 800167a:	00c9      	lsls	r1, r1, #3
 800167c:	430a      	orrs	r2, r1
 800167e:	2180      	movs	r1, #128	@ 0x80
 8001680:	0409      	lsls	r1, r1, #16
 8001682:	4311      	orrs	r1, r2
 8001684:	00c2      	lsls	r2, r0, #3
 8001686:	4691      	mov	r9, r2
 8001688:	4ab5      	ldr	r2, [pc, #724]	@ (8001960 <__aeabi_dmul+0x318>)
 800168a:	468a      	mov	sl, r1
 800168c:	189d      	adds	r5, r3, r2
 800168e:	2300      	movs	r3, #0
 8001690:	4698      	mov	r8, r3
 8001692:	9302      	str	r3, [sp, #8]
 8001694:	033c      	lsls	r4, r7, #12
 8001696:	007b      	lsls	r3, r7, #1
 8001698:	0ffa      	lsrs	r2, r7, #31
 800169a:	0030      	movs	r0, r6
 800169c:	0b24      	lsrs	r4, r4, #12
 800169e:	0d5b      	lsrs	r3, r3, #21
 80016a0:	9200      	str	r2, [sp, #0]
 80016a2:	d100      	bne.n	80016a6 <__aeabi_dmul+0x5e>
 80016a4:	e096      	b.n	80017d4 <__aeabi_dmul+0x18c>
 80016a6:	4aad      	ldr	r2, [pc, #692]	@ (800195c <__aeabi_dmul+0x314>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d031      	beq.n	8001710 <__aeabi_dmul+0xc8>
 80016ac:	0f72      	lsrs	r2, r6, #29
 80016ae:	00e4      	lsls	r4, r4, #3
 80016b0:	4322      	orrs	r2, r4
 80016b2:	2480      	movs	r4, #128	@ 0x80
 80016b4:	0424      	lsls	r4, r4, #16
 80016b6:	4314      	orrs	r4, r2
 80016b8:	4aa9      	ldr	r2, [pc, #676]	@ (8001960 <__aeabi_dmul+0x318>)
 80016ba:	00f0      	lsls	r0, r6, #3
 80016bc:	4694      	mov	ip, r2
 80016be:	4463      	add	r3, ip
 80016c0:	195b      	adds	r3, r3, r5
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	9201      	str	r2, [sp, #4]
 80016c6:	4642      	mov	r2, r8
 80016c8:	2600      	movs	r6, #0
 80016ca:	2a0a      	cmp	r2, #10
 80016cc:	dc42      	bgt.n	8001754 <__aeabi_dmul+0x10c>
 80016ce:	465a      	mov	r2, fp
 80016d0:	9900      	ldr	r1, [sp, #0]
 80016d2:	404a      	eors	r2, r1
 80016d4:	4693      	mov	fp, r2
 80016d6:	4642      	mov	r2, r8
 80016d8:	2a02      	cmp	r2, #2
 80016da:	dc32      	bgt.n	8001742 <__aeabi_dmul+0xfa>
 80016dc:	3a01      	subs	r2, #1
 80016de:	2a01      	cmp	r2, #1
 80016e0:	d900      	bls.n	80016e4 <__aeabi_dmul+0x9c>
 80016e2:	e149      	b.n	8001978 <__aeabi_dmul+0x330>
 80016e4:	2e02      	cmp	r6, #2
 80016e6:	d100      	bne.n	80016ea <__aeabi_dmul+0xa2>
 80016e8:	e0ca      	b.n	8001880 <__aeabi_dmul+0x238>
 80016ea:	2e01      	cmp	r6, #1
 80016ec:	d13d      	bne.n	800176a <__aeabi_dmul+0x122>
 80016ee:	2300      	movs	r3, #0
 80016f0:	2400      	movs	r4, #0
 80016f2:	2200      	movs	r2, #0
 80016f4:	0010      	movs	r0, r2
 80016f6:	465a      	mov	r2, fp
 80016f8:	051b      	lsls	r3, r3, #20
 80016fa:	4323      	orrs	r3, r4
 80016fc:	07d2      	lsls	r2, r2, #31
 80016fe:	4313      	orrs	r3, r2
 8001700:	0019      	movs	r1, r3
 8001702:	b007      	add	sp, #28
 8001704:	bcf0      	pop	{r4, r5, r6, r7}
 8001706:	46bb      	mov	fp, r7
 8001708:	46b2      	mov	sl, r6
 800170a:	46a9      	mov	r9, r5
 800170c:	46a0      	mov	r8, r4
 800170e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001710:	4b92      	ldr	r3, [pc, #584]	@ (800195c <__aeabi_dmul+0x314>)
 8001712:	4326      	orrs	r6, r4
 8001714:	18eb      	adds	r3, r5, r3
 8001716:	2e00      	cmp	r6, #0
 8001718:	d100      	bne.n	800171c <__aeabi_dmul+0xd4>
 800171a:	e0bb      	b.n	8001894 <__aeabi_dmul+0x24c>
 800171c:	2203      	movs	r2, #3
 800171e:	4641      	mov	r1, r8
 8001720:	4311      	orrs	r1, r2
 8001722:	465a      	mov	r2, fp
 8001724:	4688      	mov	r8, r1
 8001726:	9900      	ldr	r1, [sp, #0]
 8001728:	404a      	eors	r2, r1
 800172a:	2180      	movs	r1, #128	@ 0x80
 800172c:	0109      	lsls	r1, r1, #4
 800172e:	468c      	mov	ip, r1
 8001730:	0029      	movs	r1, r5
 8001732:	4461      	add	r1, ip
 8001734:	9101      	str	r1, [sp, #4]
 8001736:	4641      	mov	r1, r8
 8001738:	290a      	cmp	r1, #10
 800173a:	dd00      	ble.n	800173e <__aeabi_dmul+0xf6>
 800173c:	e233      	b.n	8001ba6 <__aeabi_dmul+0x55e>
 800173e:	4693      	mov	fp, r2
 8001740:	2603      	movs	r6, #3
 8001742:	4642      	mov	r2, r8
 8001744:	2701      	movs	r7, #1
 8001746:	4097      	lsls	r7, r2
 8001748:	21a6      	movs	r1, #166	@ 0xa6
 800174a:	003a      	movs	r2, r7
 800174c:	00c9      	lsls	r1, r1, #3
 800174e:	400a      	ands	r2, r1
 8001750:	420f      	tst	r7, r1
 8001752:	d031      	beq.n	80017b8 <__aeabi_dmul+0x170>
 8001754:	9e02      	ldr	r6, [sp, #8]
 8001756:	2e02      	cmp	r6, #2
 8001758:	d100      	bne.n	800175c <__aeabi_dmul+0x114>
 800175a:	e235      	b.n	8001bc8 <__aeabi_dmul+0x580>
 800175c:	2e03      	cmp	r6, #3
 800175e:	d100      	bne.n	8001762 <__aeabi_dmul+0x11a>
 8001760:	e1d2      	b.n	8001b08 <__aeabi_dmul+0x4c0>
 8001762:	4654      	mov	r4, sl
 8001764:	4648      	mov	r0, r9
 8001766:	2e01      	cmp	r6, #1
 8001768:	d0c1      	beq.n	80016ee <__aeabi_dmul+0xa6>
 800176a:	9a01      	ldr	r2, [sp, #4]
 800176c:	4b7d      	ldr	r3, [pc, #500]	@ (8001964 <__aeabi_dmul+0x31c>)
 800176e:	4694      	mov	ip, r2
 8001770:	4463      	add	r3, ip
 8001772:	2b00      	cmp	r3, #0
 8001774:	dc00      	bgt.n	8001778 <__aeabi_dmul+0x130>
 8001776:	e0c0      	b.n	80018fa <__aeabi_dmul+0x2b2>
 8001778:	0742      	lsls	r2, r0, #29
 800177a:	d009      	beq.n	8001790 <__aeabi_dmul+0x148>
 800177c:	220f      	movs	r2, #15
 800177e:	4002      	ands	r2, r0
 8001780:	2a04      	cmp	r2, #4
 8001782:	d005      	beq.n	8001790 <__aeabi_dmul+0x148>
 8001784:	1d02      	adds	r2, r0, #4
 8001786:	4282      	cmp	r2, r0
 8001788:	4180      	sbcs	r0, r0
 800178a:	4240      	negs	r0, r0
 800178c:	1824      	adds	r4, r4, r0
 800178e:	0010      	movs	r0, r2
 8001790:	01e2      	lsls	r2, r4, #7
 8001792:	d506      	bpl.n	80017a2 <__aeabi_dmul+0x15a>
 8001794:	4b74      	ldr	r3, [pc, #464]	@ (8001968 <__aeabi_dmul+0x320>)
 8001796:	9a01      	ldr	r2, [sp, #4]
 8001798:	401c      	ands	r4, r3
 800179a:	2380      	movs	r3, #128	@ 0x80
 800179c:	4694      	mov	ip, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	4463      	add	r3, ip
 80017a2:	4a72      	ldr	r2, [pc, #456]	@ (800196c <__aeabi_dmul+0x324>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	dc6b      	bgt.n	8001880 <__aeabi_dmul+0x238>
 80017a8:	0762      	lsls	r2, r4, #29
 80017aa:	08c0      	lsrs	r0, r0, #3
 80017ac:	0264      	lsls	r4, r4, #9
 80017ae:	055b      	lsls	r3, r3, #21
 80017b0:	4302      	orrs	r2, r0
 80017b2:	0b24      	lsrs	r4, r4, #12
 80017b4:	0d5b      	lsrs	r3, r3, #21
 80017b6:	e79d      	b.n	80016f4 <__aeabi_dmul+0xac>
 80017b8:	2190      	movs	r1, #144	@ 0x90
 80017ba:	0089      	lsls	r1, r1, #2
 80017bc:	420f      	tst	r7, r1
 80017be:	d163      	bne.n	8001888 <__aeabi_dmul+0x240>
 80017c0:	2288      	movs	r2, #136	@ 0x88
 80017c2:	423a      	tst	r2, r7
 80017c4:	d100      	bne.n	80017c8 <__aeabi_dmul+0x180>
 80017c6:	e0d7      	b.n	8001978 <__aeabi_dmul+0x330>
 80017c8:	9b00      	ldr	r3, [sp, #0]
 80017ca:	46a2      	mov	sl, r4
 80017cc:	469b      	mov	fp, r3
 80017ce:	4681      	mov	r9, r0
 80017d0:	9602      	str	r6, [sp, #8]
 80017d2:	e7bf      	b.n	8001754 <__aeabi_dmul+0x10c>
 80017d4:	0023      	movs	r3, r4
 80017d6:	4333      	orrs	r3, r6
 80017d8:	d100      	bne.n	80017dc <__aeabi_dmul+0x194>
 80017da:	e07f      	b.n	80018dc <__aeabi_dmul+0x294>
 80017dc:	2c00      	cmp	r4, #0
 80017de:	d100      	bne.n	80017e2 <__aeabi_dmul+0x19a>
 80017e0:	e1ad      	b.n	8001b3e <__aeabi_dmul+0x4f6>
 80017e2:	0020      	movs	r0, r4
 80017e4:	f7fe fe60 	bl	80004a8 <__clzsi2>
 80017e8:	0002      	movs	r2, r0
 80017ea:	0003      	movs	r3, r0
 80017ec:	3a0b      	subs	r2, #11
 80017ee:	201d      	movs	r0, #29
 80017f0:	0019      	movs	r1, r3
 80017f2:	1a82      	subs	r2, r0, r2
 80017f4:	0030      	movs	r0, r6
 80017f6:	3908      	subs	r1, #8
 80017f8:	40d0      	lsrs	r0, r2
 80017fa:	408c      	lsls	r4, r1
 80017fc:	4304      	orrs	r4, r0
 80017fe:	0030      	movs	r0, r6
 8001800:	4088      	lsls	r0, r1
 8001802:	4a5b      	ldr	r2, [pc, #364]	@ (8001970 <__aeabi_dmul+0x328>)
 8001804:	1aeb      	subs	r3, r5, r3
 8001806:	4694      	mov	ip, r2
 8001808:	4463      	add	r3, ip
 800180a:	1c5a      	adds	r2, r3, #1
 800180c:	9201      	str	r2, [sp, #4]
 800180e:	4642      	mov	r2, r8
 8001810:	2600      	movs	r6, #0
 8001812:	2a0a      	cmp	r2, #10
 8001814:	dc00      	bgt.n	8001818 <__aeabi_dmul+0x1d0>
 8001816:	e75a      	b.n	80016ce <__aeabi_dmul+0x86>
 8001818:	e79c      	b.n	8001754 <__aeabi_dmul+0x10c>
 800181a:	4653      	mov	r3, sl
 800181c:	4303      	orrs	r3, r0
 800181e:	4699      	mov	r9, r3
 8001820:	d054      	beq.n	80018cc <__aeabi_dmul+0x284>
 8001822:	4653      	mov	r3, sl
 8001824:	2b00      	cmp	r3, #0
 8001826:	d100      	bne.n	800182a <__aeabi_dmul+0x1e2>
 8001828:	e177      	b.n	8001b1a <__aeabi_dmul+0x4d2>
 800182a:	4650      	mov	r0, sl
 800182c:	f7fe fe3c 	bl	80004a8 <__clzsi2>
 8001830:	230b      	movs	r3, #11
 8001832:	425b      	negs	r3, r3
 8001834:	469c      	mov	ip, r3
 8001836:	0002      	movs	r2, r0
 8001838:	4484      	add	ip, r0
 800183a:	0011      	movs	r1, r2
 800183c:	4650      	mov	r0, sl
 800183e:	3908      	subs	r1, #8
 8001840:	4088      	lsls	r0, r1
 8001842:	231d      	movs	r3, #29
 8001844:	4680      	mov	r8, r0
 8001846:	4660      	mov	r0, ip
 8001848:	1a1b      	subs	r3, r3, r0
 800184a:	0020      	movs	r0, r4
 800184c:	40d8      	lsrs	r0, r3
 800184e:	0003      	movs	r3, r0
 8001850:	4640      	mov	r0, r8
 8001852:	4303      	orrs	r3, r0
 8001854:	469a      	mov	sl, r3
 8001856:	0023      	movs	r3, r4
 8001858:	408b      	lsls	r3, r1
 800185a:	4699      	mov	r9, r3
 800185c:	2300      	movs	r3, #0
 800185e:	4d44      	ldr	r5, [pc, #272]	@ (8001970 <__aeabi_dmul+0x328>)
 8001860:	4698      	mov	r8, r3
 8001862:	1aad      	subs	r5, r5, r2
 8001864:	9302      	str	r3, [sp, #8]
 8001866:	e715      	b.n	8001694 <__aeabi_dmul+0x4c>
 8001868:	4652      	mov	r2, sl
 800186a:	4302      	orrs	r2, r0
 800186c:	4691      	mov	r9, r2
 800186e:	d126      	bne.n	80018be <__aeabi_dmul+0x276>
 8001870:	2200      	movs	r2, #0
 8001872:	001d      	movs	r5, r3
 8001874:	2302      	movs	r3, #2
 8001876:	4692      	mov	sl, r2
 8001878:	3208      	adds	r2, #8
 800187a:	4690      	mov	r8, r2
 800187c:	9302      	str	r3, [sp, #8]
 800187e:	e709      	b.n	8001694 <__aeabi_dmul+0x4c>
 8001880:	2400      	movs	r4, #0
 8001882:	2200      	movs	r2, #0
 8001884:	4b35      	ldr	r3, [pc, #212]	@ (800195c <__aeabi_dmul+0x314>)
 8001886:	e735      	b.n	80016f4 <__aeabi_dmul+0xac>
 8001888:	2300      	movs	r3, #0
 800188a:	2480      	movs	r4, #128	@ 0x80
 800188c:	469b      	mov	fp, r3
 800188e:	0324      	lsls	r4, r4, #12
 8001890:	4b32      	ldr	r3, [pc, #200]	@ (800195c <__aeabi_dmul+0x314>)
 8001892:	e72f      	b.n	80016f4 <__aeabi_dmul+0xac>
 8001894:	2202      	movs	r2, #2
 8001896:	4641      	mov	r1, r8
 8001898:	4311      	orrs	r1, r2
 800189a:	2280      	movs	r2, #128	@ 0x80
 800189c:	0112      	lsls	r2, r2, #4
 800189e:	4694      	mov	ip, r2
 80018a0:	002a      	movs	r2, r5
 80018a2:	4462      	add	r2, ip
 80018a4:	4688      	mov	r8, r1
 80018a6:	9201      	str	r2, [sp, #4]
 80018a8:	290a      	cmp	r1, #10
 80018aa:	dd00      	ble.n	80018ae <__aeabi_dmul+0x266>
 80018ac:	e752      	b.n	8001754 <__aeabi_dmul+0x10c>
 80018ae:	465a      	mov	r2, fp
 80018b0:	2000      	movs	r0, #0
 80018b2:	9900      	ldr	r1, [sp, #0]
 80018b4:	0004      	movs	r4, r0
 80018b6:	404a      	eors	r2, r1
 80018b8:	4693      	mov	fp, r2
 80018ba:	2602      	movs	r6, #2
 80018bc:	e70b      	b.n	80016d6 <__aeabi_dmul+0x8e>
 80018be:	220c      	movs	r2, #12
 80018c0:	001d      	movs	r5, r3
 80018c2:	2303      	movs	r3, #3
 80018c4:	4681      	mov	r9, r0
 80018c6:	4690      	mov	r8, r2
 80018c8:	9302      	str	r3, [sp, #8]
 80018ca:	e6e3      	b.n	8001694 <__aeabi_dmul+0x4c>
 80018cc:	2300      	movs	r3, #0
 80018ce:	469a      	mov	sl, r3
 80018d0:	3304      	adds	r3, #4
 80018d2:	4698      	mov	r8, r3
 80018d4:	3b03      	subs	r3, #3
 80018d6:	2500      	movs	r5, #0
 80018d8:	9302      	str	r3, [sp, #8]
 80018da:	e6db      	b.n	8001694 <__aeabi_dmul+0x4c>
 80018dc:	4642      	mov	r2, r8
 80018de:	3301      	adds	r3, #1
 80018e0:	431a      	orrs	r2, r3
 80018e2:	002b      	movs	r3, r5
 80018e4:	4690      	mov	r8, r2
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	9201      	str	r2, [sp, #4]
 80018ea:	4642      	mov	r2, r8
 80018ec:	2400      	movs	r4, #0
 80018ee:	2000      	movs	r0, #0
 80018f0:	2601      	movs	r6, #1
 80018f2:	2a0a      	cmp	r2, #10
 80018f4:	dc00      	bgt.n	80018f8 <__aeabi_dmul+0x2b0>
 80018f6:	e6ea      	b.n	80016ce <__aeabi_dmul+0x86>
 80018f8:	e72c      	b.n	8001754 <__aeabi_dmul+0x10c>
 80018fa:	2201      	movs	r2, #1
 80018fc:	1ad2      	subs	r2, r2, r3
 80018fe:	2a38      	cmp	r2, #56	@ 0x38
 8001900:	dd00      	ble.n	8001904 <__aeabi_dmul+0x2bc>
 8001902:	e6f4      	b.n	80016ee <__aeabi_dmul+0xa6>
 8001904:	2a1f      	cmp	r2, #31
 8001906:	dc00      	bgt.n	800190a <__aeabi_dmul+0x2c2>
 8001908:	e12a      	b.n	8001b60 <__aeabi_dmul+0x518>
 800190a:	211f      	movs	r1, #31
 800190c:	4249      	negs	r1, r1
 800190e:	1acb      	subs	r3, r1, r3
 8001910:	0021      	movs	r1, r4
 8001912:	40d9      	lsrs	r1, r3
 8001914:	000b      	movs	r3, r1
 8001916:	2a20      	cmp	r2, #32
 8001918:	d005      	beq.n	8001926 <__aeabi_dmul+0x2de>
 800191a:	4a16      	ldr	r2, [pc, #88]	@ (8001974 <__aeabi_dmul+0x32c>)
 800191c:	9d01      	ldr	r5, [sp, #4]
 800191e:	4694      	mov	ip, r2
 8001920:	4465      	add	r5, ip
 8001922:	40ac      	lsls	r4, r5
 8001924:	4320      	orrs	r0, r4
 8001926:	1e42      	subs	r2, r0, #1
 8001928:	4190      	sbcs	r0, r2
 800192a:	4318      	orrs	r0, r3
 800192c:	2307      	movs	r3, #7
 800192e:	0019      	movs	r1, r3
 8001930:	2400      	movs	r4, #0
 8001932:	4001      	ands	r1, r0
 8001934:	4203      	tst	r3, r0
 8001936:	d00c      	beq.n	8001952 <__aeabi_dmul+0x30a>
 8001938:	230f      	movs	r3, #15
 800193a:	4003      	ands	r3, r0
 800193c:	2b04      	cmp	r3, #4
 800193e:	d100      	bne.n	8001942 <__aeabi_dmul+0x2fa>
 8001940:	e140      	b.n	8001bc4 <__aeabi_dmul+0x57c>
 8001942:	1d03      	adds	r3, r0, #4
 8001944:	4283      	cmp	r3, r0
 8001946:	41a4      	sbcs	r4, r4
 8001948:	0018      	movs	r0, r3
 800194a:	4264      	negs	r4, r4
 800194c:	0761      	lsls	r1, r4, #29
 800194e:	0264      	lsls	r4, r4, #9
 8001950:	0b24      	lsrs	r4, r4, #12
 8001952:	08c2      	lsrs	r2, r0, #3
 8001954:	2300      	movs	r3, #0
 8001956:	430a      	orrs	r2, r1
 8001958:	e6cc      	b.n	80016f4 <__aeabi_dmul+0xac>
 800195a:	46c0      	nop			@ (mov r8, r8)
 800195c:	000007ff 	.word	0x000007ff
 8001960:	fffffc01 	.word	0xfffffc01
 8001964:	000003ff 	.word	0x000003ff
 8001968:	feffffff 	.word	0xfeffffff
 800196c:	000007fe 	.word	0x000007fe
 8001970:	fffffc0d 	.word	0xfffffc0d
 8001974:	0000043e 	.word	0x0000043e
 8001978:	4649      	mov	r1, r9
 800197a:	464a      	mov	r2, r9
 800197c:	0409      	lsls	r1, r1, #16
 800197e:	0c09      	lsrs	r1, r1, #16
 8001980:	000d      	movs	r5, r1
 8001982:	0c16      	lsrs	r6, r2, #16
 8001984:	0c02      	lsrs	r2, r0, #16
 8001986:	0400      	lsls	r0, r0, #16
 8001988:	0c00      	lsrs	r0, r0, #16
 800198a:	4345      	muls	r5, r0
 800198c:	46ac      	mov	ip, r5
 800198e:	0005      	movs	r5, r0
 8001990:	4375      	muls	r5, r6
 8001992:	46a8      	mov	r8, r5
 8001994:	0015      	movs	r5, r2
 8001996:	000f      	movs	r7, r1
 8001998:	4375      	muls	r5, r6
 800199a:	9200      	str	r2, [sp, #0]
 800199c:	9502      	str	r5, [sp, #8]
 800199e:	002a      	movs	r2, r5
 80019a0:	9d00      	ldr	r5, [sp, #0]
 80019a2:	436f      	muls	r7, r5
 80019a4:	4665      	mov	r5, ip
 80019a6:	0c2d      	lsrs	r5, r5, #16
 80019a8:	46a9      	mov	r9, r5
 80019aa:	4447      	add	r7, r8
 80019ac:	444f      	add	r7, r9
 80019ae:	45b8      	cmp	r8, r7
 80019b0:	d905      	bls.n	80019be <__aeabi_dmul+0x376>
 80019b2:	0015      	movs	r5, r2
 80019b4:	2280      	movs	r2, #128	@ 0x80
 80019b6:	0252      	lsls	r2, r2, #9
 80019b8:	4690      	mov	r8, r2
 80019ba:	4445      	add	r5, r8
 80019bc:	9502      	str	r5, [sp, #8]
 80019be:	0c3d      	lsrs	r5, r7, #16
 80019c0:	9503      	str	r5, [sp, #12]
 80019c2:	4665      	mov	r5, ip
 80019c4:	042d      	lsls	r5, r5, #16
 80019c6:	043f      	lsls	r7, r7, #16
 80019c8:	0c2d      	lsrs	r5, r5, #16
 80019ca:	46ac      	mov	ip, r5
 80019cc:	003d      	movs	r5, r7
 80019ce:	4465      	add	r5, ip
 80019d0:	9504      	str	r5, [sp, #16]
 80019d2:	0c25      	lsrs	r5, r4, #16
 80019d4:	0424      	lsls	r4, r4, #16
 80019d6:	0c24      	lsrs	r4, r4, #16
 80019d8:	46ac      	mov	ip, r5
 80019da:	0025      	movs	r5, r4
 80019dc:	4375      	muls	r5, r6
 80019de:	46a8      	mov	r8, r5
 80019e0:	4665      	mov	r5, ip
 80019e2:	000f      	movs	r7, r1
 80019e4:	4369      	muls	r1, r5
 80019e6:	4441      	add	r1, r8
 80019e8:	4689      	mov	r9, r1
 80019ea:	4367      	muls	r7, r4
 80019ec:	0c39      	lsrs	r1, r7, #16
 80019ee:	4449      	add	r1, r9
 80019f0:	436e      	muls	r6, r5
 80019f2:	4588      	cmp	r8, r1
 80019f4:	d903      	bls.n	80019fe <__aeabi_dmul+0x3b6>
 80019f6:	2280      	movs	r2, #128	@ 0x80
 80019f8:	0252      	lsls	r2, r2, #9
 80019fa:	4690      	mov	r8, r2
 80019fc:	4446      	add	r6, r8
 80019fe:	0c0d      	lsrs	r5, r1, #16
 8001a00:	46a8      	mov	r8, r5
 8001a02:	0035      	movs	r5, r6
 8001a04:	4445      	add	r5, r8
 8001a06:	9505      	str	r5, [sp, #20]
 8001a08:	9d03      	ldr	r5, [sp, #12]
 8001a0a:	043f      	lsls	r7, r7, #16
 8001a0c:	46a8      	mov	r8, r5
 8001a0e:	0c3f      	lsrs	r7, r7, #16
 8001a10:	0409      	lsls	r1, r1, #16
 8001a12:	19c9      	adds	r1, r1, r7
 8001a14:	4488      	add	r8, r1
 8001a16:	4645      	mov	r5, r8
 8001a18:	9503      	str	r5, [sp, #12]
 8001a1a:	4655      	mov	r5, sl
 8001a1c:	042e      	lsls	r6, r5, #16
 8001a1e:	0c36      	lsrs	r6, r6, #16
 8001a20:	0c2f      	lsrs	r7, r5, #16
 8001a22:	0035      	movs	r5, r6
 8001a24:	4345      	muls	r5, r0
 8001a26:	4378      	muls	r0, r7
 8001a28:	4681      	mov	r9, r0
 8001a2a:	0038      	movs	r0, r7
 8001a2c:	46a8      	mov	r8, r5
 8001a2e:	0c2d      	lsrs	r5, r5, #16
 8001a30:	46aa      	mov	sl, r5
 8001a32:	9a00      	ldr	r2, [sp, #0]
 8001a34:	4350      	muls	r0, r2
 8001a36:	4372      	muls	r2, r6
 8001a38:	444a      	add	r2, r9
 8001a3a:	4452      	add	r2, sl
 8001a3c:	4591      	cmp	r9, r2
 8001a3e:	d903      	bls.n	8001a48 <__aeabi_dmul+0x400>
 8001a40:	2580      	movs	r5, #128	@ 0x80
 8001a42:	026d      	lsls	r5, r5, #9
 8001a44:	46a9      	mov	r9, r5
 8001a46:	4448      	add	r0, r9
 8001a48:	0c15      	lsrs	r5, r2, #16
 8001a4a:	46a9      	mov	r9, r5
 8001a4c:	4645      	mov	r5, r8
 8001a4e:	042d      	lsls	r5, r5, #16
 8001a50:	0c2d      	lsrs	r5, r5, #16
 8001a52:	46a8      	mov	r8, r5
 8001a54:	4665      	mov	r5, ip
 8001a56:	437d      	muls	r5, r7
 8001a58:	0412      	lsls	r2, r2, #16
 8001a5a:	4448      	add	r0, r9
 8001a5c:	4490      	add	r8, r2
 8001a5e:	46a9      	mov	r9, r5
 8001a60:	0032      	movs	r2, r6
 8001a62:	4665      	mov	r5, ip
 8001a64:	4362      	muls	r2, r4
 8001a66:	436e      	muls	r6, r5
 8001a68:	437c      	muls	r4, r7
 8001a6a:	0c17      	lsrs	r7, r2, #16
 8001a6c:	1936      	adds	r6, r6, r4
 8001a6e:	19bf      	adds	r7, r7, r6
 8001a70:	42bc      	cmp	r4, r7
 8001a72:	d903      	bls.n	8001a7c <__aeabi_dmul+0x434>
 8001a74:	2480      	movs	r4, #128	@ 0x80
 8001a76:	0264      	lsls	r4, r4, #9
 8001a78:	46a4      	mov	ip, r4
 8001a7a:	44e1      	add	r9, ip
 8001a7c:	9c02      	ldr	r4, [sp, #8]
 8001a7e:	9e03      	ldr	r6, [sp, #12]
 8001a80:	46a4      	mov	ip, r4
 8001a82:	9d05      	ldr	r5, [sp, #20]
 8001a84:	4466      	add	r6, ip
 8001a86:	428e      	cmp	r6, r1
 8001a88:	4189      	sbcs	r1, r1
 8001a8a:	46ac      	mov	ip, r5
 8001a8c:	0412      	lsls	r2, r2, #16
 8001a8e:	043c      	lsls	r4, r7, #16
 8001a90:	0c12      	lsrs	r2, r2, #16
 8001a92:	18a2      	adds	r2, r4, r2
 8001a94:	4462      	add	r2, ip
 8001a96:	4249      	negs	r1, r1
 8001a98:	1854      	adds	r4, r2, r1
 8001a9a:	4446      	add	r6, r8
 8001a9c:	46a4      	mov	ip, r4
 8001a9e:	4546      	cmp	r6, r8
 8001aa0:	41a4      	sbcs	r4, r4
 8001aa2:	4682      	mov	sl, r0
 8001aa4:	4264      	negs	r4, r4
 8001aa6:	46a0      	mov	r8, r4
 8001aa8:	42aa      	cmp	r2, r5
 8001aaa:	4192      	sbcs	r2, r2
 8001aac:	458c      	cmp	ip, r1
 8001aae:	4189      	sbcs	r1, r1
 8001ab0:	44e2      	add	sl, ip
 8001ab2:	44d0      	add	r8, sl
 8001ab4:	4249      	negs	r1, r1
 8001ab6:	4252      	negs	r2, r2
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	45a0      	cmp	r8, r4
 8001abc:	41a4      	sbcs	r4, r4
 8001abe:	4582      	cmp	sl, r0
 8001ac0:	4189      	sbcs	r1, r1
 8001ac2:	4264      	negs	r4, r4
 8001ac4:	4249      	negs	r1, r1
 8001ac6:	430c      	orrs	r4, r1
 8001ac8:	4641      	mov	r1, r8
 8001aca:	0c3f      	lsrs	r7, r7, #16
 8001acc:	19d2      	adds	r2, r2, r7
 8001ace:	1912      	adds	r2, r2, r4
 8001ad0:	0dcc      	lsrs	r4, r1, #23
 8001ad2:	9904      	ldr	r1, [sp, #16]
 8001ad4:	0270      	lsls	r0, r6, #9
 8001ad6:	4308      	orrs	r0, r1
 8001ad8:	1e41      	subs	r1, r0, #1
 8001ada:	4188      	sbcs	r0, r1
 8001adc:	4641      	mov	r1, r8
 8001ade:	444a      	add	r2, r9
 8001ae0:	0df6      	lsrs	r6, r6, #23
 8001ae2:	0252      	lsls	r2, r2, #9
 8001ae4:	4330      	orrs	r0, r6
 8001ae6:	0249      	lsls	r1, r1, #9
 8001ae8:	4314      	orrs	r4, r2
 8001aea:	4308      	orrs	r0, r1
 8001aec:	01d2      	lsls	r2, r2, #7
 8001aee:	d535      	bpl.n	8001b5c <__aeabi_dmul+0x514>
 8001af0:	2201      	movs	r2, #1
 8001af2:	0843      	lsrs	r3, r0, #1
 8001af4:	4002      	ands	r2, r0
 8001af6:	4313      	orrs	r3, r2
 8001af8:	07e0      	lsls	r0, r4, #31
 8001afa:	4318      	orrs	r0, r3
 8001afc:	0864      	lsrs	r4, r4, #1
 8001afe:	e634      	b.n	800176a <__aeabi_dmul+0x122>
 8001b00:	9b00      	ldr	r3, [sp, #0]
 8001b02:	46a2      	mov	sl, r4
 8001b04:	469b      	mov	fp, r3
 8001b06:	4681      	mov	r9, r0
 8001b08:	2480      	movs	r4, #128	@ 0x80
 8001b0a:	4653      	mov	r3, sl
 8001b0c:	0324      	lsls	r4, r4, #12
 8001b0e:	431c      	orrs	r4, r3
 8001b10:	0324      	lsls	r4, r4, #12
 8001b12:	464a      	mov	r2, r9
 8001b14:	4b2e      	ldr	r3, [pc, #184]	@ (8001bd0 <__aeabi_dmul+0x588>)
 8001b16:	0b24      	lsrs	r4, r4, #12
 8001b18:	e5ec      	b.n	80016f4 <__aeabi_dmul+0xac>
 8001b1a:	f7fe fcc5 	bl	80004a8 <__clzsi2>
 8001b1e:	2315      	movs	r3, #21
 8001b20:	469c      	mov	ip, r3
 8001b22:	4484      	add	ip, r0
 8001b24:	0002      	movs	r2, r0
 8001b26:	4663      	mov	r3, ip
 8001b28:	3220      	adds	r2, #32
 8001b2a:	2b1c      	cmp	r3, #28
 8001b2c:	dc00      	bgt.n	8001b30 <__aeabi_dmul+0x4e8>
 8001b2e:	e684      	b.n	800183a <__aeabi_dmul+0x1f2>
 8001b30:	2300      	movs	r3, #0
 8001b32:	4699      	mov	r9, r3
 8001b34:	0023      	movs	r3, r4
 8001b36:	3808      	subs	r0, #8
 8001b38:	4083      	lsls	r3, r0
 8001b3a:	469a      	mov	sl, r3
 8001b3c:	e68e      	b.n	800185c <__aeabi_dmul+0x214>
 8001b3e:	f7fe fcb3 	bl	80004a8 <__clzsi2>
 8001b42:	0002      	movs	r2, r0
 8001b44:	0003      	movs	r3, r0
 8001b46:	3215      	adds	r2, #21
 8001b48:	3320      	adds	r3, #32
 8001b4a:	2a1c      	cmp	r2, #28
 8001b4c:	dc00      	bgt.n	8001b50 <__aeabi_dmul+0x508>
 8001b4e:	e64e      	b.n	80017ee <__aeabi_dmul+0x1a6>
 8001b50:	0002      	movs	r2, r0
 8001b52:	0034      	movs	r4, r6
 8001b54:	3a08      	subs	r2, #8
 8001b56:	2000      	movs	r0, #0
 8001b58:	4094      	lsls	r4, r2
 8001b5a:	e652      	b.n	8001802 <__aeabi_dmul+0x1ba>
 8001b5c:	9301      	str	r3, [sp, #4]
 8001b5e:	e604      	b.n	800176a <__aeabi_dmul+0x122>
 8001b60:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd4 <__aeabi_dmul+0x58c>)
 8001b62:	0021      	movs	r1, r4
 8001b64:	469c      	mov	ip, r3
 8001b66:	0003      	movs	r3, r0
 8001b68:	9d01      	ldr	r5, [sp, #4]
 8001b6a:	40d3      	lsrs	r3, r2
 8001b6c:	4465      	add	r5, ip
 8001b6e:	40a9      	lsls	r1, r5
 8001b70:	4319      	orrs	r1, r3
 8001b72:	0003      	movs	r3, r0
 8001b74:	40ab      	lsls	r3, r5
 8001b76:	1e58      	subs	r0, r3, #1
 8001b78:	4183      	sbcs	r3, r0
 8001b7a:	4319      	orrs	r1, r3
 8001b7c:	0008      	movs	r0, r1
 8001b7e:	40d4      	lsrs	r4, r2
 8001b80:	074b      	lsls	r3, r1, #29
 8001b82:	d009      	beq.n	8001b98 <__aeabi_dmul+0x550>
 8001b84:	230f      	movs	r3, #15
 8001b86:	400b      	ands	r3, r1
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d005      	beq.n	8001b98 <__aeabi_dmul+0x550>
 8001b8c:	1d0b      	adds	r3, r1, #4
 8001b8e:	428b      	cmp	r3, r1
 8001b90:	4180      	sbcs	r0, r0
 8001b92:	4240      	negs	r0, r0
 8001b94:	1824      	adds	r4, r4, r0
 8001b96:	0018      	movs	r0, r3
 8001b98:	0223      	lsls	r3, r4, #8
 8001b9a:	d400      	bmi.n	8001b9e <__aeabi_dmul+0x556>
 8001b9c:	e6d6      	b.n	800194c <__aeabi_dmul+0x304>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	2400      	movs	r4, #0
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	e5a6      	b.n	80016f4 <__aeabi_dmul+0xac>
 8001ba6:	290f      	cmp	r1, #15
 8001ba8:	d1aa      	bne.n	8001b00 <__aeabi_dmul+0x4b8>
 8001baa:	2380      	movs	r3, #128	@ 0x80
 8001bac:	4652      	mov	r2, sl
 8001bae:	031b      	lsls	r3, r3, #12
 8001bb0:	421a      	tst	r2, r3
 8001bb2:	d0a9      	beq.n	8001b08 <__aeabi_dmul+0x4c0>
 8001bb4:	421c      	tst	r4, r3
 8001bb6:	d1a7      	bne.n	8001b08 <__aeabi_dmul+0x4c0>
 8001bb8:	431c      	orrs	r4, r3
 8001bba:	9b00      	ldr	r3, [sp, #0]
 8001bbc:	0002      	movs	r2, r0
 8001bbe:	469b      	mov	fp, r3
 8001bc0:	4b03      	ldr	r3, [pc, #12]	@ (8001bd0 <__aeabi_dmul+0x588>)
 8001bc2:	e597      	b.n	80016f4 <__aeabi_dmul+0xac>
 8001bc4:	2400      	movs	r4, #0
 8001bc6:	e6c1      	b.n	800194c <__aeabi_dmul+0x304>
 8001bc8:	2400      	movs	r4, #0
 8001bca:	4b01      	ldr	r3, [pc, #4]	@ (8001bd0 <__aeabi_dmul+0x588>)
 8001bcc:	0022      	movs	r2, r4
 8001bce:	e591      	b.n	80016f4 <__aeabi_dmul+0xac>
 8001bd0:	000007ff 	.word	0x000007ff
 8001bd4:	0000041e 	.word	0x0000041e

08001bd8 <__aeabi_dsub>:
 8001bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bda:	464e      	mov	r6, r9
 8001bdc:	4645      	mov	r5, r8
 8001bde:	46de      	mov	lr, fp
 8001be0:	4657      	mov	r7, sl
 8001be2:	b5e0      	push	{r5, r6, r7, lr}
 8001be4:	b085      	sub	sp, #20
 8001be6:	9000      	str	r0, [sp, #0]
 8001be8:	9101      	str	r1, [sp, #4]
 8001bea:	030c      	lsls	r4, r1, #12
 8001bec:	004f      	lsls	r7, r1, #1
 8001bee:	0fce      	lsrs	r6, r1, #31
 8001bf0:	0a61      	lsrs	r1, r4, #9
 8001bf2:	9c00      	ldr	r4, [sp, #0]
 8001bf4:	46b0      	mov	r8, r6
 8001bf6:	0f64      	lsrs	r4, r4, #29
 8001bf8:	430c      	orrs	r4, r1
 8001bfa:	9900      	ldr	r1, [sp, #0]
 8001bfc:	0d7f      	lsrs	r7, r7, #21
 8001bfe:	00c8      	lsls	r0, r1, #3
 8001c00:	0011      	movs	r1, r2
 8001c02:	001a      	movs	r2, r3
 8001c04:	031b      	lsls	r3, r3, #12
 8001c06:	469c      	mov	ip, r3
 8001c08:	9100      	str	r1, [sp, #0]
 8001c0a:	9201      	str	r2, [sp, #4]
 8001c0c:	0051      	lsls	r1, r2, #1
 8001c0e:	0d4b      	lsrs	r3, r1, #21
 8001c10:	4699      	mov	r9, r3
 8001c12:	9b01      	ldr	r3, [sp, #4]
 8001c14:	9d00      	ldr	r5, [sp, #0]
 8001c16:	0fd9      	lsrs	r1, r3, #31
 8001c18:	4663      	mov	r3, ip
 8001c1a:	0f6a      	lsrs	r2, r5, #29
 8001c1c:	0a5b      	lsrs	r3, r3, #9
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	00ea      	lsls	r2, r5, #3
 8001c22:	4694      	mov	ip, r2
 8001c24:	4693      	mov	fp, r2
 8001c26:	4ac1      	ldr	r2, [pc, #772]	@ (8001f2c <__aeabi_dsub+0x354>)
 8001c28:	9003      	str	r0, [sp, #12]
 8001c2a:	9302      	str	r3, [sp, #8]
 8001c2c:	4591      	cmp	r9, r2
 8001c2e:	d100      	bne.n	8001c32 <__aeabi_dsub+0x5a>
 8001c30:	e0cd      	b.n	8001dce <__aeabi_dsub+0x1f6>
 8001c32:	2501      	movs	r5, #1
 8001c34:	4069      	eors	r1, r5
 8001c36:	464d      	mov	r5, r9
 8001c38:	1b7d      	subs	r5, r7, r5
 8001c3a:	46aa      	mov	sl, r5
 8001c3c:	428e      	cmp	r6, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x6a>
 8001c40:	e080      	b.n	8001d44 <__aeabi_dsub+0x16c>
 8001c42:	2d00      	cmp	r5, #0
 8001c44:	dc00      	bgt.n	8001c48 <__aeabi_dsub+0x70>
 8001c46:	e335      	b.n	80022b4 <__aeabi_dsub+0x6dc>
 8001c48:	4649      	mov	r1, r9
 8001c4a:	2900      	cmp	r1, #0
 8001c4c:	d100      	bne.n	8001c50 <__aeabi_dsub+0x78>
 8001c4e:	e0df      	b.n	8001e10 <__aeabi_dsub+0x238>
 8001c50:	4297      	cmp	r7, r2
 8001c52:	d100      	bne.n	8001c56 <__aeabi_dsub+0x7e>
 8001c54:	e194      	b.n	8001f80 <__aeabi_dsub+0x3a8>
 8001c56:	4652      	mov	r2, sl
 8001c58:	2501      	movs	r5, #1
 8001c5a:	2a38      	cmp	r2, #56	@ 0x38
 8001c5c:	dc19      	bgt.n	8001c92 <__aeabi_dsub+0xba>
 8001c5e:	2280      	movs	r2, #128	@ 0x80
 8001c60:	9b02      	ldr	r3, [sp, #8]
 8001c62:	0412      	lsls	r2, r2, #16
 8001c64:	4313      	orrs	r3, r2
 8001c66:	9302      	str	r3, [sp, #8]
 8001c68:	4652      	mov	r2, sl
 8001c6a:	2a1f      	cmp	r2, #31
 8001c6c:	dd00      	ble.n	8001c70 <__aeabi_dsub+0x98>
 8001c6e:	e1e3      	b.n	8002038 <__aeabi_dsub+0x460>
 8001c70:	4653      	mov	r3, sl
 8001c72:	2220      	movs	r2, #32
 8001c74:	4661      	mov	r1, ip
 8001c76:	9d02      	ldr	r5, [sp, #8]
 8001c78:	1ad2      	subs	r2, r2, r3
 8001c7a:	4095      	lsls	r5, r2
 8001c7c:	40d9      	lsrs	r1, r3
 8001c7e:	430d      	orrs	r5, r1
 8001c80:	4661      	mov	r1, ip
 8001c82:	4091      	lsls	r1, r2
 8001c84:	000a      	movs	r2, r1
 8001c86:	1e51      	subs	r1, r2, #1
 8001c88:	418a      	sbcs	r2, r1
 8001c8a:	4315      	orrs	r5, r2
 8001c8c:	9a02      	ldr	r2, [sp, #8]
 8001c8e:	40da      	lsrs	r2, r3
 8001c90:	1aa4      	subs	r4, r4, r2
 8001c92:	1b45      	subs	r5, r0, r5
 8001c94:	42a8      	cmp	r0, r5
 8001c96:	4180      	sbcs	r0, r0
 8001c98:	4240      	negs	r0, r0
 8001c9a:	1a24      	subs	r4, r4, r0
 8001c9c:	0223      	lsls	r3, r4, #8
 8001c9e:	d400      	bmi.n	8001ca2 <__aeabi_dsub+0xca>
 8001ca0:	e13d      	b.n	8001f1e <__aeabi_dsub+0x346>
 8001ca2:	0264      	lsls	r4, r4, #9
 8001ca4:	0a64      	lsrs	r4, r4, #9
 8001ca6:	2c00      	cmp	r4, #0
 8001ca8:	d100      	bne.n	8001cac <__aeabi_dsub+0xd4>
 8001caa:	e147      	b.n	8001f3c <__aeabi_dsub+0x364>
 8001cac:	0020      	movs	r0, r4
 8001cae:	f7fe fbfb 	bl	80004a8 <__clzsi2>
 8001cb2:	0003      	movs	r3, r0
 8001cb4:	3b08      	subs	r3, #8
 8001cb6:	2120      	movs	r1, #32
 8001cb8:	0028      	movs	r0, r5
 8001cba:	1aca      	subs	r2, r1, r3
 8001cbc:	40d0      	lsrs	r0, r2
 8001cbe:	409c      	lsls	r4, r3
 8001cc0:	0002      	movs	r2, r0
 8001cc2:	409d      	lsls	r5, r3
 8001cc4:	4322      	orrs	r2, r4
 8001cc6:	429f      	cmp	r7, r3
 8001cc8:	dd00      	ble.n	8001ccc <__aeabi_dsub+0xf4>
 8001cca:	e177      	b.n	8001fbc <__aeabi_dsub+0x3e4>
 8001ccc:	1bd8      	subs	r0, r3, r7
 8001cce:	3001      	adds	r0, #1
 8001cd0:	1a09      	subs	r1, r1, r0
 8001cd2:	002c      	movs	r4, r5
 8001cd4:	408d      	lsls	r5, r1
 8001cd6:	40c4      	lsrs	r4, r0
 8001cd8:	1e6b      	subs	r3, r5, #1
 8001cda:	419d      	sbcs	r5, r3
 8001cdc:	0013      	movs	r3, r2
 8001cde:	40c2      	lsrs	r2, r0
 8001ce0:	408b      	lsls	r3, r1
 8001ce2:	4325      	orrs	r5, r4
 8001ce4:	2700      	movs	r7, #0
 8001ce6:	0014      	movs	r4, r2
 8001ce8:	431d      	orrs	r5, r3
 8001cea:	076b      	lsls	r3, r5, #29
 8001cec:	d009      	beq.n	8001d02 <__aeabi_dsub+0x12a>
 8001cee:	230f      	movs	r3, #15
 8001cf0:	402b      	ands	r3, r5
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d005      	beq.n	8001d02 <__aeabi_dsub+0x12a>
 8001cf6:	1d2b      	adds	r3, r5, #4
 8001cf8:	42ab      	cmp	r3, r5
 8001cfa:	41ad      	sbcs	r5, r5
 8001cfc:	426d      	negs	r5, r5
 8001cfe:	1964      	adds	r4, r4, r5
 8001d00:	001d      	movs	r5, r3
 8001d02:	0223      	lsls	r3, r4, #8
 8001d04:	d400      	bmi.n	8001d08 <__aeabi_dsub+0x130>
 8001d06:	e140      	b.n	8001f8a <__aeabi_dsub+0x3b2>
 8001d08:	4a88      	ldr	r2, [pc, #544]	@ (8001f2c <__aeabi_dsub+0x354>)
 8001d0a:	3701      	adds	r7, #1
 8001d0c:	4297      	cmp	r7, r2
 8001d0e:	d100      	bne.n	8001d12 <__aeabi_dsub+0x13a>
 8001d10:	e101      	b.n	8001f16 <__aeabi_dsub+0x33e>
 8001d12:	2601      	movs	r6, #1
 8001d14:	4643      	mov	r3, r8
 8001d16:	4986      	ldr	r1, [pc, #536]	@ (8001f30 <__aeabi_dsub+0x358>)
 8001d18:	08ed      	lsrs	r5, r5, #3
 8001d1a:	4021      	ands	r1, r4
 8001d1c:	074a      	lsls	r2, r1, #29
 8001d1e:	432a      	orrs	r2, r5
 8001d20:	057c      	lsls	r4, r7, #21
 8001d22:	024d      	lsls	r5, r1, #9
 8001d24:	0b2d      	lsrs	r5, r5, #12
 8001d26:	0d64      	lsrs	r4, r4, #21
 8001d28:	401e      	ands	r6, r3
 8001d2a:	0524      	lsls	r4, r4, #20
 8001d2c:	432c      	orrs	r4, r5
 8001d2e:	07f6      	lsls	r6, r6, #31
 8001d30:	4334      	orrs	r4, r6
 8001d32:	0010      	movs	r0, r2
 8001d34:	0021      	movs	r1, r4
 8001d36:	b005      	add	sp, #20
 8001d38:	bcf0      	pop	{r4, r5, r6, r7}
 8001d3a:	46bb      	mov	fp, r7
 8001d3c:	46b2      	mov	sl, r6
 8001d3e:	46a9      	mov	r9, r5
 8001d40:	46a0      	mov	r8, r4
 8001d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d44:	2d00      	cmp	r5, #0
 8001d46:	dc00      	bgt.n	8001d4a <__aeabi_dsub+0x172>
 8001d48:	e2d0      	b.n	80022ec <__aeabi_dsub+0x714>
 8001d4a:	4649      	mov	r1, r9
 8001d4c:	2900      	cmp	r1, #0
 8001d4e:	d000      	beq.n	8001d52 <__aeabi_dsub+0x17a>
 8001d50:	e0d4      	b.n	8001efc <__aeabi_dsub+0x324>
 8001d52:	4661      	mov	r1, ip
 8001d54:	9b02      	ldr	r3, [sp, #8]
 8001d56:	4319      	orrs	r1, r3
 8001d58:	d100      	bne.n	8001d5c <__aeabi_dsub+0x184>
 8001d5a:	e12b      	b.n	8001fb4 <__aeabi_dsub+0x3dc>
 8001d5c:	1e69      	subs	r1, r5, #1
 8001d5e:	2d01      	cmp	r5, #1
 8001d60:	d100      	bne.n	8001d64 <__aeabi_dsub+0x18c>
 8001d62:	e1d9      	b.n	8002118 <__aeabi_dsub+0x540>
 8001d64:	4295      	cmp	r5, r2
 8001d66:	d100      	bne.n	8001d6a <__aeabi_dsub+0x192>
 8001d68:	e10a      	b.n	8001f80 <__aeabi_dsub+0x3a8>
 8001d6a:	2501      	movs	r5, #1
 8001d6c:	2938      	cmp	r1, #56	@ 0x38
 8001d6e:	dc17      	bgt.n	8001da0 <__aeabi_dsub+0x1c8>
 8001d70:	468a      	mov	sl, r1
 8001d72:	4653      	mov	r3, sl
 8001d74:	2b1f      	cmp	r3, #31
 8001d76:	dd00      	ble.n	8001d7a <__aeabi_dsub+0x1a2>
 8001d78:	e1e7      	b.n	800214a <__aeabi_dsub+0x572>
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	1ad2      	subs	r2, r2, r3
 8001d7e:	9b02      	ldr	r3, [sp, #8]
 8001d80:	4661      	mov	r1, ip
 8001d82:	4093      	lsls	r3, r2
 8001d84:	001d      	movs	r5, r3
 8001d86:	4653      	mov	r3, sl
 8001d88:	40d9      	lsrs	r1, r3
 8001d8a:	4663      	mov	r3, ip
 8001d8c:	4093      	lsls	r3, r2
 8001d8e:	001a      	movs	r2, r3
 8001d90:	430d      	orrs	r5, r1
 8001d92:	1e51      	subs	r1, r2, #1
 8001d94:	418a      	sbcs	r2, r1
 8001d96:	4653      	mov	r3, sl
 8001d98:	4315      	orrs	r5, r2
 8001d9a:	9a02      	ldr	r2, [sp, #8]
 8001d9c:	40da      	lsrs	r2, r3
 8001d9e:	18a4      	adds	r4, r4, r2
 8001da0:	182d      	adds	r5, r5, r0
 8001da2:	4285      	cmp	r5, r0
 8001da4:	4180      	sbcs	r0, r0
 8001da6:	4240      	negs	r0, r0
 8001da8:	1824      	adds	r4, r4, r0
 8001daa:	0223      	lsls	r3, r4, #8
 8001dac:	d400      	bmi.n	8001db0 <__aeabi_dsub+0x1d8>
 8001dae:	e0b6      	b.n	8001f1e <__aeabi_dsub+0x346>
 8001db0:	4b5e      	ldr	r3, [pc, #376]	@ (8001f2c <__aeabi_dsub+0x354>)
 8001db2:	3701      	adds	r7, #1
 8001db4:	429f      	cmp	r7, r3
 8001db6:	d100      	bne.n	8001dba <__aeabi_dsub+0x1e2>
 8001db8:	e0ad      	b.n	8001f16 <__aeabi_dsub+0x33e>
 8001dba:	2101      	movs	r1, #1
 8001dbc:	4b5c      	ldr	r3, [pc, #368]	@ (8001f30 <__aeabi_dsub+0x358>)
 8001dbe:	086a      	lsrs	r2, r5, #1
 8001dc0:	401c      	ands	r4, r3
 8001dc2:	4029      	ands	r1, r5
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	07e5      	lsls	r5, r4, #31
 8001dc8:	4315      	orrs	r5, r2
 8001dca:	0864      	lsrs	r4, r4, #1
 8001dcc:	e78d      	b.n	8001cea <__aeabi_dsub+0x112>
 8001dce:	4a59      	ldr	r2, [pc, #356]	@ (8001f34 <__aeabi_dsub+0x35c>)
 8001dd0:	9b02      	ldr	r3, [sp, #8]
 8001dd2:	4692      	mov	sl, r2
 8001dd4:	4662      	mov	r2, ip
 8001dd6:	44ba      	add	sl, r7
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	d02c      	beq.n	8001e36 <__aeabi_dsub+0x25e>
 8001ddc:	428e      	cmp	r6, r1
 8001dde:	d02e      	beq.n	8001e3e <__aeabi_dsub+0x266>
 8001de0:	4652      	mov	r2, sl
 8001de2:	2a00      	cmp	r2, #0
 8001de4:	d060      	beq.n	8001ea8 <__aeabi_dsub+0x2d0>
 8001de6:	2f00      	cmp	r7, #0
 8001de8:	d100      	bne.n	8001dec <__aeabi_dsub+0x214>
 8001dea:	e0db      	b.n	8001fa4 <__aeabi_dsub+0x3cc>
 8001dec:	4663      	mov	r3, ip
 8001dee:	000e      	movs	r6, r1
 8001df0:	9c02      	ldr	r4, [sp, #8]
 8001df2:	08d8      	lsrs	r0, r3, #3
 8001df4:	0762      	lsls	r2, r4, #29
 8001df6:	4302      	orrs	r2, r0
 8001df8:	08e4      	lsrs	r4, r4, #3
 8001dfa:	0013      	movs	r3, r2
 8001dfc:	4323      	orrs	r3, r4
 8001dfe:	d100      	bne.n	8001e02 <__aeabi_dsub+0x22a>
 8001e00:	e254      	b.n	80022ac <__aeabi_dsub+0x6d4>
 8001e02:	2580      	movs	r5, #128	@ 0x80
 8001e04:	032d      	lsls	r5, r5, #12
 8001e06:	4325      	orrs	r5, r4
 8001e08:	032d      	lsls	r5, r5, #12
 8001e0a:	4c48      	ldr	r4, [pc, #288]	@ (8001f2c <__aeabi_dsub+0x354>)
 8001e0c:	0b2d      	lsrs	r5, r5, #12
 8001e0e:	e78c      	b.n	8001d2a <__aeabi_dsub+0x152>
 8001e10:	4661      	mov	r1, ip
 8001e12:	9b02      	ldr	r3, [sp, #8]
 8001e14:	4319      	orrs	r1, r3
 8001e16:	d100      	bne.n	8001e1a <__aeabi_dsub+0x242>
 8001e18:	e0cc      	b.n	8001fb4 <__aeabi_dsub+0x3dc>
 8001e1a:	0029      	movs	r1, r5
 8001e1c:	3901      	subs	r1, #1
 8001e1e:	2d01      	cmp	r5, #1
 8001e20:	d100      	bne.n	8001e24 <__aeabi_dsub+0x24c>
 8001e22:	e188      	b.n	8002136 <__aeabi_dsub+0x55e>
 8001e24:	4295      	cmp	r5, r2
 8001e26:	d100      	bne.n	8001e2a <__aeabi_dsub+0x252>
 8001e28:	e0aa      	b.n	8001f80 <__aeabi_dsub+0x3a8>
 8001e2a:	2501      	movs	r5, #1
 8001e2c:	2938      	cmp	r1, #56	@ 0x38
 8001e2e:	dd00      	ble.n	8001e32 <__aeabi_dsub+0x25a>
 8001e30:	e72f      	b.n	8001c92 <__aeabi_dsub+0xba>
 8001e32:	468a      	mov	sl, r1
 8001e34:	e718      	b.n	8001c68 <__aeabi_dsub+0x90>
 8001e36:	2201      	movs	r2, #1
 8001e38:	4051      	eors	r1, r2
 8001e3a:	428e      	cmp	r6, r1
 8001e3c:	d1d0      	bne.n	8001de0 <__aeabi_dsub+0x208>
 8001e3e:	4653      	mov	r3, sl
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d100      	bne.n	8001e46 <__aeabi_dsub+0x26e>
 8001e44:	e0be      	b.n	8001fc4 <__aeabi_dsub+0x3ec>
 8001e46:	2f00      	cmp	r7, #0
 8001e48:	d000      	beq.n	8001e4c <__aeabi_dsub+0x274>
 8001e4a:	e138      	b.n	80020be <__aeabi_dsub+0x4e6>
 8001e4c:	46ca      	mov	sl, r9
 8001e4e:	0022      	movs	r2, r4
 8001e50:	4302      	orrs	r2, r0
 8001e52:	d100      	bne.n	8001e56 <__aeabi_dsub+0x27e>
 8001e54:	e1e2      	b.n	800221c <__aeabi_dsub+0x644>
 8001e56:	4653      	mov	r3, sl
 8001e58:	1e59      	subs	r1, r3, #1
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d100      	bne.n	8001e60 <__aeabi_dsub+0x288>
 8001e5e:	e20d      	b.n	800227c <__aeabi_dsub+0x6a4>
 8001e60:	4a32      	ldr	r2, [pc, #200]	@ (8001f2c <__aeabi_dsub+0x354>)
 8001e62:	4592      	cmp	sl, r2
 8001e64:	d100      	bne.n	8001e68 <__aeabi_dsub+0x290>
 8001e66:	e1d2      	b.n	800220e <__aeabi_dsub+0x636>
 8001e68:	2701      	movs	r7, #1
 8001e6a:	2938      	cmp	r1, #56	@ 0x38
 8001e6c:	dc13      	bgt.n	8001e96 <__aeabi_dsub+0x2be>
 8001e6e:	291f      	cmp	r1, #31
 8001e70:	dd00      	ble.n	8001e74 <__aeabi_dsub+0x29c>
 8001e72:	e1ee      	b.n	8002252 <__aeabi_dsub+0x67a>
 8001e74:	2220      	movs	r2, #32
 8001e76:	9b02      	ldr	r3, [sp, #8]
 8001e78:	1a52      	subs	r2, r2, r1
 8001e7a:	0025      	movs	r5, r4
 8001e7c:	0007      	movs	r7, r0
 8001e7e:	469a      	mov	sl, r3
 8001e80:	40cc      	lsrs	r4, r1
 8001e82:	4090      	lsls	r0, r2
 8001e84:	4095      	lsls	r5, r2
 8001e86:	40cf      	lsrs	r7, r1
 8001e88:	44a2      	add	sl, r4
 8001e8a:	1e42      	subs	r2, r0, #1
 8001e8c:	4190      	sbcs	r0, r2
 8001e8e:	4653      	mov	r3, sl
 8001e90:	432f      	orrs	r7, r5
 8001e92:	4307      	orrs	r7, r0
 8001e94:	9302      	str	r3, [sp, #8]
 8001e96:	003d      	movs	r5, r7
 8001e98:	4465      	add	r5, ip
 8001e9a:	4565      	cmp	r5, ip
 8001e9c:	4192      	sbcs	r2, r2
 8001e9e:	9b02      	ldr	r3, [sp, #8]
 8001ea0:	4252      	negs	r2, r2
 8001ea2:	464f      	mov	r7, r9
 8001ea4:	18d4      	adds	r4, r2, r3
 8001ea6:	e780      	b.n	8001daa <__aeabi_dsub+0x1d2>
 8001ea8:	4a23      	ldr	r2, [pc, #140]	@ (8001f38 <__aeabi_dsub+0x360>)
 8001eaa:	1c7d      	adds	r5, r7, #1
 8001eac:	4215      	tst	r5, r2
 8001eae:	d000      	beq.n	8001eb2 <__aeabi_dsub+0x2da>
 8001eb0:	e0aa      	b.n	8002008 <__aeabi_dsub+0x430>
 8001eb2:	4662      	mov	r2, ip
 8001eb4:	0025      	movs	r5, r4
 8001eb6:	9b02      	ldr	r3, [sp, #8]
 8001eb8:	4305      	orrs	r5, r0
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	2f00      	cmp	r7, #0
 8001ebe:	d000      	beq.n	8001ec2 <__aeabi_dsub+0x2ea>
 8001ec0:	e0f5      	b.n	80020ae <__aeabi_dsub+0x4d6>
 8001ec2:	2d00      	cmp	r5, #0
 8001ec4:	d100      	bne.n	8001ec8 <__aeabi_dsub+0x2f0>
 8001ec6:	e16b      	b.n	80021a0 <__aeabi_dsub+0x5c8>
 8001ec8:	2a00      	cmp	r2, #0
 8001eca:	d100      	bne.n	8001ece <__aeabi_dsub+0x2f6>
 8001ecc:	e152      	b.n	8002174 <__aeabi_dsub+0x59c>
 8001ece:	4663      	mov	r3, ip
 8001ed0:	1ac5      	subs	r5, r0, r3
 8001ed2:	9b02      	ldr	r3, [sp, #8]
 8001ed4:	1ae2      	subs	r2, r4, r3
 8001ed6:	42a8      	cmp	r0, r5
 8001ed8:	419b      	sbcs	r3, r3
 8001eda:	425b      	negs	r3, r3
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	021a      	lsls	r2, r3, #8
 8001ee0:	d400      	bmi.n	8001ee4 <__aeabi_dsub+0x30c>
 8001ee2:	e1d5      	b.n	8002290 <__aeabi_dsub+0x6b8>
 8001ee4:	4663      	mov	r3, ip
 8001ee6:	1a1d      	subs	r5, r3, r0
 8001ee8:	45ac      	cmp	ip, r5
 8001eea:	4192      	sbcs	r2, r2
 8001eec:	2601      	movs	r6, #1
 8001eee:	9b02      	ldr	r3, [sp, #8]
 8001ef0:	4252      	negs	r2, r2
 8001ef2:	1b1c      	subs	r4, r3, r4
 8001ef4:	4688      	mov	r8, r1
 8001ef6:	1aa4      	subs	r4, r4, r2
 8001ef8:	400e      	ands	r6, r1
 8001efa:	e6f6      	b.n	8001cea <__aeabi_dsub+0x112>
 8001efc:	4297      	cmp	r7, r2
 8001efe:	d03f      	beq.n	8001f80 <__aeabi_dsub+0x3a8>
 8001f00:	4652      	mov	r2, sl
 8001f02:	2501      	movs	r5, #1
 8001f04:	2a38      	cmp	r2, #56	@ 0x38
 8001f06:	dd00      	ble.n	8001f0a <__aeabi_dsub+0x332>
 8001f08:	e74a      	b.n	8001da0 <__aeabi_dsub+0x1c8>
 8001f0a:	2280      	movs	r2, #128	@ 0x80
 8001f0c:	9b02      	ldr	r3, [sp, #8]
 8001f0e:	0412      	lsls	r2, r2, #16
 8001f10:	4313      	orrs	r3, r2
 8001f12:	9302      	str	r3, [sp, #8]
 8001f14:	e72d      	b.n	8001d72 <__aeabi_dsub+0x19a>
 8001f16:	003c      	movs	r4, r7
 8001f18:	2500      	movs	r5, #0
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	e705      	b.n	8001d2a <__aeabi_dsub+0x152>
 8001f1e:	2307      	movs	r3, #7
 8001f20:	402b      	ands	r3, r5
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d000      	beq.n	8001f28 <__aeabi_dsub+0x350>
 8001f26:	e6e2      	b.n	8001cee <__aeabi_dsub+0x116>
 8001f28:	e06b      	b.n	8002002 <__aeabi_dsub+0x42a>
 8001f2a:	46c0      	nop			@ (mov r8, r8)
 8001f2c:	000007ff 	.word	0x000007ff
 8001f30:	ff7fffff 	.word	0xff7fffff
 8001f34:	fffff801 	.word	0xfffff801
 8001f38:	000007fe 	.word	0x000007fe
 8001f3c:	0028      	movs	r0, r5
 8001f3e:	f7fe fab3 	bl	80004a8 <__clzsi2>
 8001f42:	0003      	movs	r3, r0
 8001f44:	3318      	adds	r3, #24
 8001f46:	2b1f      	cmp	r3, #31
 8001f48:	dc00      	bgt.n	8001f4c <__aeabi_dsub+0x374>
 8001f4a:	e6b4      	b.n	8001cb6 <__aeabi_dsub+0xde>
 8001f4c:	002a      	movs	r2, r5
 8001f4e:	3808      	subs	r0, #8
 8001f50:	4082      	lsls	r2, r0
 8001f52:	429f      	cmp	r7, r3
 8001f54:	dd00      	ble.n	8001f58 <__aeabi_dsub+0x380>
 8001f56:	e0b9      	b.n	80020cc <__aeabi_dsub+0x4f4>
 8001f58:	1bdb      	subs	r3, r3, r7
 8001f5a:	1c58      	adds	r0, r3, #1
 8001f5c:	281f      	cmp	r0, #31
 8001f5e:	dc00      	bgt.n	8001f62 <__aeabi_dsub+0x38a>
 8001f60:	e1a0      	b.n	80022a4 <__aeabi_dsub+0x6cc>
 8001f62:	0015      	movs	r5, r2
 8001f64:	3b1f      	subs	r3, #31
 8001f66:	40dd      	lsrs	r5, r3
 8001f68:	2820      	cmp	r0, #32
 8001f6a:	d005      	beq.n	8001f78 <__aeabi_dsub+0x3a0>
 8001f6c:	2340      	movs	r3, #64	@ 0x40
 8001f6e:	1a1b      	subs	r3, r3, r0
 8001f70:	409a      	lsls	r2, r3
 8001f72:	1e53      	subs	r3, r2, #1
 8001f74:	419a      	sbcs	r2, r3
 8001f76:	4315      	orrs	r5, r2
 8001f78:	2307      	movs	r3, #7
 8001f7a:	2700      	movs	r7, #0
 8001f7c:	402b      	ands	r3, r5
 8001f7e:	e7d0      	b.n	8001f22 <__aeabi_dsub+0x34a>
 8001f80:	08c0      	lsrs	r0, r0, #3
 8001f82:	0762      	lsls	r2, r4, #29
 8001f84:	4302      	orrs	r2, r0
 8001f86:	08e4      	lsrs	r4, r4, #3
 8001f88:	e737      	b.n	8001dfa <__aeabi_dsub+0x222>
 8001f8a:	08ea      	lsrs	r2, r5, #3
 8001f8c:	0763      	lsls	r3, r4, #29
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	4bd3      	ldr	r3, [pc, #844]	@ (80022e0 <__aeabi_dsub+0x708>)
 8001f92:	08e4      	lsrs	r4, r4, #3
 8001f94:	429f      	cmp	r7, r3
 8001f96:	d100      	bne.n	8001f9a <__aeabi_dsub+0x3c2>
 8001f98:	e72f      	b.n	8001dfa <__aeabi_dsub+0x222>
 8001f9a:	0324      	lsls	r4, r4, #12
 8001f9c:	0b25      	lsrs	r5, r4, #12
 8001f9e:	057c      	lsls	r4, r7, #21
 8001fa0:	0d64      	lsrs	r4, r4, #21
 8001fa2:	e6c2      	b.n	8001d2a <__aeabi_dsub+0x152>
 8001fa4:	46ca      	mov	sl, r9
 8001fa6:	0022      	movs	r2, r4
 8001fa8:	4302      	orrs	r2, r0
 8001faa:	d158      	bne.n	800205e <__aeabi_dsub+0x486>
 8001fac:	4663      	mov	r3, ip
 8001fae:	000e      	movs	r6, r1
 8001fb0:	9c02      	ldr	r4, [sp, #8]
 8001fb2:	9303      	str	r3, [sp, #12]
 8001fb4:	9b03      	ldr	r3, [sp, #12]
 8001fb6:	4657      	mov	r7, sl
 8001fb8:	08da      	lsrs	r2, r3, #3
 8001fba:	e7e7      	b.n	8001f8c <__aeabi_dsub+0x3b4>
 8001fbc:	4cc9      	ldr	r4, [pc, #804]	@ (80022e4 <__aeabi_dsub+0x70c>)
 8001fbe:	1aff      	subs	r7, r7, r3
 8001fc0:	4014      	ands	r4, r2
 8001fc2:	e692      	b.n	8001cea <__aeabi_dsub+0x112>
 8001fc4:	4dc8      	ldr	r5, [pc, #800]	@ (80022e8 <__aeabi_dsub+0x710>)
 8001fc6:	1c7a      	adds	r2, r7, #1
 8001fc8:	422a      	tst	r2, r5
 8001fca:	d000      	beq.n	8001fce <__aeabi_dsub+0x3f6>
 8001fcc:	e084      	b.n	80020d8 <__aeabi_dsub+0x500>
 8001fce:	0022      	movs	r2, r4
 8001fd0:	4302      	orrs	r2, r0
 8001fd2:	2f00      	cmp	r7, #0
 8001fd4:	d000      	beq.n	8001fd8 <__aeabi_dsub+0x400>
 8001fd6:	e0ef      	b.n	80021b8 <__aeabi_dsub+0x5e0>
 8001fd8:	2a00      	cmp	r2, #0
 8001fda:	d100      	bne.n	8001fde <__aeabi_dsub+0x406>
 8001fdc:	e0e5      	b.n	80021aa <__aeabi_dsub+0x5d2>
 8001fde:	4662      	mov	r2, ip
 8001fe0:	9902      	ldr	r1, [sp, #8]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	d100      	bne.n	8001fe8 <__aeabi_dsub+0x410>
 8001fe6:	e0c5      	b.n	8002174 <__aeabi_dsub+0x59c>
 8001fe8:	4663      	mov	r3, ip
 8001fea:	18c5      	adds	r5, r0, r3
 8001fec:	468c      	mov	ip, r1
 8001fee:	4285      	cmp	r5, r0
 8001ff0:	4180      	sbcs	r0, r0
 8001ff2:	4464      	add	r4, ip
 8001ff4:	4240      	negs	r0, r0
 8001ff6:	1824      	adds	r4, r4, r0
 8001ff8:	0223      	lsls	r3, r4, #8
 8001ffa:	d502      	bpl.n	8002002 <__aeabi_dsub+0x42a>
 8001ffc:	4bb9      	ldr	r3, [pc, #740]	@ (80022e4 <__aeabi_dsub+0x70c>)
 8001ffe:	3701      	adds	r7, #1
 8002000:	401c      	ands	r4, r3
 8002002:	46ba      	mov	sl, r7
 8002004:	9503      	str	r5, [sp, #12]
 8002006:	e7d5      	b.n	8001fb4 <__aeabi_dsub+0x3dc>
 8002008:	4662      	mov	r2, ip
 800200a:	1a85      	subs	r5, r0, r2
 800200c:	42a8      	cmp	r0, r5
 800200e:	4192      	sbcs	r2, r2
 8002010:	4252      	negs	r2, r2
 8002012:	4691      	mov	r9, r2
 8002014:	9b02      	ldr	r3, [sp, #8]
 8002016:	1ae3      	subs	r3, r4, r3
 8002018:	001a      	movs	r2, r3
 800201a:	464b      	mov	r3, r9
 800201c:	1ad2      	subs	r2, r2, r3
 800201e:	0013      	movs	r3, r2
 8002020:	4691      	mov	r9, r2
 8002022:	021a      	lsls	r2, r3, #8
 8002024:	d46c      	bmi.n	8002100 <__aeabi_dsub+0x528>
 8002026:	464a      	mov	r2, r9
 8002028:	464c      	mov	r4, r9
 800202a:	432a      	orrs	r2, r5
 800202c:	d000      	beq.n	8002030 <__aeabi_dsub+0x458>
 800202e:	e63a      	b.n	8001ca6 <__aeabi_dsub+0xce>
 8002030:	2600      	movs	r6, #0
 8002032:	2400      	movs	r4, #0
 8002034:	2500      	movs	r5, #0
 8002036:	e678      	b.n	8001d2a <__aeabi_dsub+0x152>
 8002038:	9902      	ldr	r1, [sp, #8]
 800203a:	4653      	mov	r3, sl
 800203c:	000d      	movs	r5, r1
 800203e:	3a20      	subs	r2, #32
 8002040:	40d5      	lsrs	r5, r2
 8002042:	2b20      	cmp	r3, #32
 8002044:	d006      	beq.n	8002054 <__aeabi_dsub+0x47c>
 8002046:	2240      	movs	r2, #64	@ 0x40
 8002048:	1ad2      	subs	r2, r2, r3
 800204a:	000b      	movs	r3, r1
 800204c:	4093      	lsls	r3, r2
 800204e:	4662      	mov	r2, ip
 8002050:	431a      	orrs	r2, r3
 8002052:	4693      	mov	fp, r2
 8002054:	465b      	mov	r3, fp
 8002056:	1e5a      	subs	r2, r3, #1
 8002058:	4193      	sbcs	r3, r2
 800205a:	431d      	orrs	r5, r3
 800205c:	e619      	b.n	8001c92 <__aeabi_dsub+0xba>
 800205e:	4653      	mov	r3, sl
 8002060:	1e5a      	subs	r2, r3, #1
 8002062:	2b01      	cmp	r3, #1
 8002064:	d100      	bne.n	8002068 <__aeabi_dsub+0x490>
 8002066:	e0c6      	b.n	80021f6 <__aeabi_dsub+0x61e>
 8002068:	4e9d      	ldr	r6, [pc, #628]	@ (80022e0 <__aeabi_dsub+0x708>)
 800206a:	45b2      	cmp	sl, r6
 800206c:	d100      	bne.n	8002070 <__aeabi_dsub+0x498>
 800206e:	e6bd      	b.n	8001dec <__aeabi_dsub+0x214>
 8002070:	4688      	mov	r8, r1
 8002072:	000e      	movs	r6, r1
 8002074:	2501      	movs	r5, #1
 8002076:	2a38      	cmp	r2, #56	@ 0x38
 8002078:	dc10      	bgt.n	800209c <__aeabi_dsub+0x4c4>
 800207a:	2a1f      	cmp	r2, #31
 800207c:	dc7f      	bgt.n	800217e <__aeabi_dsub+0x5a6>
 800207e:	2120      	movs	r1, #32
 8002080:	0025      	movs	r5, r4
 8002082:	1a89      	subs	r1, r1, r2
 8002084:	0007      	movs	r7, r0
 8002086:	4088      	lsls	r0, r1
 8002088:	408d      	lsls	r5, r1
 800208a:	40d7      	lsrs	r7, r2
 800208c:	40d4      	lsrs	r4, r2
 800208e:	1e41      	subs	r1, r0, #1
 8002090:	4188      	sbcs	r0, r1
 8002092:	9b02      	ldr	r3, [sp, #8]
 8002094:	433d      	orrs	r5, r7
 8002096:	1b1b      	subs	r3, r3, r4
 8002098:	4305      	orrs	r5, r0
 800209a:	9302      	str	r3, [sp, #8]
 800209c:	4662      	mov	r2, ip
 800209e:	1b55      	subs	r5, r2, r5
 80020a0:	45ac      	cmp	ip, r5
 80020a2:	4192      	sbcs	r2, r2
 80020a4:	9b02      	ldr	r3, [sp, #8]
 80020a6:	4252      	negs	r2, r2
 80020a8:	464f      	mov	r7, r9
 80020aa:	1a9c      	subs	r4, r3, r2
 80020ac:	e5f6      	b.n	8001c9c <__aeabi_dsub+0xc4>
 80020ae:	2d00      	cmp	r5, #0
 80020b0:	d000      	beq.n	80020b4 <__aeabi_dsub+0x4dc>
 80020b2:	e0b7      	b.n	8002224 <__aeabi_dsub+0x64c>
 80020b4:	2a00      	cmp	r2, #0
 80020b6:	d100      	bne.n	80020ba <__aeabi_dsub+0x4e2>
 80020b8:	e0f0      	b.n	800229c <__aeabi_dsub+0x6c4>
 80020ba:	2601      	movs	r6, #1
 80020bc:	400e      	ands	r6, r1
 80020be:	4663      	mov	r3, ip
 80020c0:	9802      	ldr	r0, [sp, #8]
 80020c2:	08d9      	lsrs	r1, r3, #3
 80020c4:	0742      	lsls	r2, r0, #29
 80020c6:	430a      	orrs	r2, r1
 80020c8:	08c4      	lsrs	r4, r0, #3
 80020ca:	e696      	b.n	8001dfa <__aeabi_dsub+0x222>
 80020cc:	4c85      	ldr	r4, [pc, #532]	@ (80022e4 <__aeabi_dsub+0x70c>)
 80020ce:	1aff      	subs	r7, r7, r3
 80020d0:	4014      	ands	r4, r2
 80020d2:	0762      	lsls	r2, r4, #29
 80020d4:	08e4      	lsrs	r4, r4, #3
 80020d6:	e760      	b.n	8001f9a <__aeabi_dsub+0x3c2>
 80020d8:	4981      	ldr	r1, [pc, #516]	@ (80022e0 <__aeabi_dsub+0x708>)
 80020da:	428a      	cmp	r2, r1
 80020dc:	d100      	bne.n	80020e0 <__aeabi_dsub+0x508>
 80020de:	e0c9      	b.n	8002274 <__aeabi_dsub+0x69c>
 80020e0:	4663      	mov	r3, ip
 80020e2:	18c1      	adds	r1, r0, r3
 80020e4:	4281      	cmp	r1, r0
 80020e6:	4180      	sbcs	r0, r0
 80020e8:	9b02      	ldr	r3, [sp, #8]
 80020ea:	4240      	negs	r0, r0
 80020ec:	18e3      	adds	r3, r4, r3
 80020ee:	181b      	adds	r3, r3, r0
 80020f0:	07dd      	lsls	r5, r3, #31
 80020f2:	085c      	lsrs	r4, r3, #1
 80020f4:	2307      	movs	r3, #7
 80020f6:	0849      	lsrs	r1, r1, #1
 80020f8:	430d      	orrs	r5, r1
 80020fa:	0017      	movs	r7, r2
 80020fc:	402b      	ands	r3, r5
 80020fe:	e710      	b.n	8001f22 <__aeabi_dsub+0x34a>
 8002100:	4663      	mov	r3, ip
 8002102:	1a1d      	subs	r5, r3, r0
 8002104:	45ac      	cmp	ip, r5
 8002106:	4192      	sbcs	r2, r2
 8002108:	2601      	movs	r6, #1
 800210a:	9b02      	ldr	r3, [sp, #8]
 800210c:	4252      	negs	r2, r2
 800210e:	1b1c      	subs	r4, r3, r4
 8002110:	4688      	mov	r8, r1
 8002112:	1aa4      	subs	r4, r4, r2
 8002114:	400e      	ands	r6, r1
 8002116:	e5c6      	b.n	8001ca6 <__aeabi_dsub+0xce>
 8002118:	4663      	mov	r3, ip
 800211a:	18c5      	adds	r5, r0, r3
 800211c:	9b02      	ldr	r3, [sp, #8]
 800211e:	4285      	cmp	r5, r0
 8002120:	4180      	sbcs	r0, r0
 8002122:	469c      	mov	ip, r3
 8002124:	4240      	negs	r0, r0
 8002126:	4464      	add	r4, ip
 8002128:	1824      	adds	r4, r4, r0
 800212a:	2701      	movs	r7, #1
 800212c:	0223      	lsls	r3, r4, #8
 800212e:	d400      	bmi.n	8002132 <__aeabi_dsub+0x55a>
 8002130:	e6f5      	b.n	8001f1e <__aeabi_dsub+0x346>
 8002132:	2702      	movs	r7, #2
 8002134:	e641      	b.n	8001dba <__aeabi_dsub+0x1e2>
 8002136:	4663      	mov	r3, ip
 8002138:	1ac5      	subs	r5, r0, r3
 800213a:	42a8      	cmp	r0, r5
 800213c:	4180      	sbcs	r0, r0
 800213e:	9b02      	ldr	r3, [sp, #8]
 8002140:	4240      	negs	r0, r0
 8002142:	1ae4      	subs	r4, r4, r3
 8002144:	2701      	movs	r7, #1
 8002146:	1a24      	subs	r4, r4, r0
 8002148:	e5a8      	b.n	8001c9c <__aeabi_dsub+0xc4>
 800214a:	9d02      	ldr	r5, [sp, #8]
 800214c:	4652      	mov	r2, sl
 800214e:	002b      	movs	r3, r5
 8002150:	3a20      	subs	r2, #32
 8002152:	40d3      	lsrs	r3, r2
 8002154:	0019      	movs	r1, r3
 8002156:	4653      	mov	r3, sl
 8002158:	2b20      	cmp	r3, #32
 800215a:	d006      	beq.n	800216a <__aeabi_dsub+0x592>
 800215c:	2240      	movs	r2, #64	@ 0x40
 800215e:	1ad2      	subs	r2, r2, r3
 8002160:	002b      	movs	r3, r5
 8002162:	4093      	lsls	r3, r2
 8002164:	4662      	mov	r2, ip
 8002166:	431a      	orrs	r2, r3
 8002168:	4693      	mov	fp, r2
 800216a:	465d      	mov	r5, fp
 800216c:	1e6b      	subs	r3, r5, #1
 800216e:	419d      	sbcs	r5, r3
 8002170:	430d      	orrs	r5, r1
 8002172:	e615      	b.n	8001da0 <__aeabi_dsub+0x1c8>
 8002174:	0762      	lsls	r2, r4, #29
 8002176:	08c0      	lsrs	r0, r0, #3
 8002178:	4302      	orrs	r2, r0
 800217a:	08e4      	lsrs	r4, r4, #3
 800217c:	e70d      	b.n	8001f9a <__aeabi_dsub+0x3c2>
 800217e:	0011      	movs	r1, r2
 8002180:	0027      	movs	r7, r4
 8002182:	3920      	subs	r1, #32
 8002184:	40cf      	lsrs	r7, r1
 8002186:	2a20      	cmp	r2, #32
 8002188:	d005      	beq.n	8002196 <__aeabi_dsub+0x5be>
 800218a:	2140      	movs	r1, #64	@ 0x40
 800218c:	1a8a      	subs	r2, r1, r2
 800218e:	4094      	lsls	r4, r2
 8002190:	0025      	movs	r5, r4
 8002192:	4305      	orrs	r5, r0
 8002194:	9503      	str	r5, [sp, #12]
 8002196:	9d03      	ldr	r5, [sp, #12]
 8002198:	1e6a      	subs	r2, r5, #1
 800219a:	4195      	sbcs	r5, r2
 800219c:	433d      	orrs	r5, r7
 800219e:	e77d      	b.n	800209c <__aeabi_dsub+0x4c4>
 80021a0:	2a00      	cmp	r2, #0
 80021a2:	d100      	bne.n	80021a6 <__aeabi_dsub+0x5ce>
 80021a4:	e744      	b.n	8002030 <__aeabi_dsub+0x458>
 80021a6:	2601      	movs	r6, #1
 80021a8:	400e      	ands	r6, r1
 80021aa:	4663      	mov	r3, ip
 80021ac:	08d9      	lsrs	r1, r3, #3
 80021ae:	9b02      	ldr	r3, [sp, #8]
 80021b0:	075a      	lsls	r2, r3, #29
 80021b2:	430a      	orrs	r2, r1
 80021b4:	08dc      	lsrs	r4, r3, #3
 80021b6:	e6f0      	b.n	8001f9a <__aeabi_dsub+0x3c2>
 80021b8:	2a00      	cmp	r2, #0
 80021ba:	d028      	beq.n	800220e <__aeabi_dsub+0x636>
 80021bc:	4662      	mov	r2, ip
 80021be:	9f02      	ldr	r7, [sp, #8]
 80021c0:	08c0      	lsrs	r0, r0, #3
 80021c2:	433a      	orrs	r2, r7
 80021c4:	d100      	bne.n	80021c8 <__aeabi_dsub+0x5f0>
 80021c6:	e6dc      	b.n	8001f82 <__aeabi_dsub+0x3aa>
 80021c8:	0762      	lsls	r2, r4, #29
 80021ca:	4310      	orrs	r0, r2
 80021cc:	2280      	movs	r2, #128	@ 0x80
 80021ce:	08e4      	lsrs	r4, r4, #3
 80021d0:	0312      	lsls	r2, r2, #12
 80021d2:	4214      	tst	r4, r2
 80021d4:	d009      	beq.n	80021ea <__aeabi_dsub+0x612>
 80021d6:	08fd      	lsrs	r5, r7, #3
 80021d8:	4215      	tst	r5, r2
 80021da:	d106      	bne.n	80021ea <__aeabi_dsub+0x612>
 80021dc:	4663      	mov	r3, ip
 80021de:	2601      	movs	r6, #1
 80021e0:	002c      	movs	r4, r5
 80021e2:	08d8      	lsrs	r0, r3, #3
 80021e4:	077b      	lsls	r3, r7, #29
 80021e6:	4318      	orrs	r0, r3
 80021e8:	400e      	ands	r6, r1
 80021ea:	0f42      	lsrs	r2, r0, #29
 80021ec:	00c0      	lsls	r0, r0, #3
 80021ee:	08c0      	lsrs	r0, r0, #3
 80021f0:	0752      	lsls	r2, r2, #29
 80021f2:	4302      	orrs	r2, r0
 80021f4:	e601      	b.n	8001dfa <__aeabi_dsub+0x222>
 80021f6:	4663      	mov	r3, ip
 80021f8:	1a1d      	subs	r5, r3, r0
 80021fa:	45ac      	cmp	ip, r5
 80021fc:	4192      	sbcs	r2, r2
 80021fe:	9b02      	ldr	r3, [sp, #8]
 8002200:	4252      	negs	r2, r2
 8002202:	1b1c      	subs	r4, r3, r4
 8002204:	000e      	movs	r6, r1
 8002206:	4688      	mov	r8, r1
 8002208:	2701      	movs	r7, #1
 800220a:	1aa4      	subs	r4, r4, r2
 800220c:	e546      	b.n	8001c9c <__aeabi_dsub+0xc4>
 800220e:	4663      	mov	r3, ip
 8002210:	08d9      	lsrs	r1, r3, #3
 8002212:	9b02      	ldr	r3, [sp, #8]
 8002214:	075a      	lsls	r2, r3, #29
 8002216:	430a      	orrs	r2, r1
 8002218:	08dc      	lsrs	r4, r3, #3
 800221a:	e5ee      	b.n	8001dfa <__aeabi_dsub+0x222>
 800221c:	4663      	mov	r3, ip
 800221e:	9c02      	ldr	r4, [sp, #8]
 8002220:	9303      	str	r3, [sp, #12]
 8002222:	e6c7      	b.n	8001fb4 <__aeabi_dsub+0x3dc>
 8002224:	08c0      	lsrs	r0, r0, #3
 8002226:	2a00      	cmp	r2, #0
 8002228:	d100      	bne.n	800222c <__aeabi_dsub+0x654>
 800222a:	e6aa      	b.n	8001f82 <__aeabi_dsub+0x3aa>
 800222c:	0762      	lsls	r2, r4, #29
 800222e:	4310      	orrs	r0, r2
 8002230:	2280      	movs	r2, #128	@ 0x80
 8002232:	08e4      	lsrs	r4, r4, #3
 8002234:	0312      	lsls	r2, r2, #12
 8002236:	4214      	tst	r4, r2
 8002238:	d0d7      	beq.n	80021ea <__aeabi_dsub+0x612>
 800223a:	9f02      	ldr	r7, [sp, #8]
 800223c:	08fd      	lsrs	r5, r7, #3
 800223e:	4215      	tst	r5, r2
 8002240:	d1d3      	bne.n	80021ea <__aeabi_dsub+0x612>
 8002242:	4663      	mov	r3, ip
 8002244:	2601      	movs	r6, #1
 8002246:	08d8      	lsrs	r0, r3, #3
 8002248:	077b      	lsls	r3, r7, #29
 800224a:	002c      	movs	r4, r5
 800224c:	4318      	orrs	r0, r3
 800224e:	400e      	ands	r6, r1
 8002250:	e7cb      	b.n	80021ea <__aeabi_dsub+0x612>
 8002252:	000a      	movs	r2, r1
 8002254:	0027      	movs	r7, r4
 8002256:	3a20      	subs	r2, #32
 8002258:	40d7      	lsrs	r7, r2
 800225a:	2920      	cmp	r1, #32
 800225c:	d005      	beq.n	800226a <__aeabi_dsub+0x692>
 800225e:	2240      	movs	r2, #64	@ 0x40
 8002260:	1a52      	subs	r2, r2, r1
 8002262:	4094      	lsls	r4, r2
 8002264:	0025      	movs	r5, r4
 8002266:	4305      	orrs	r5, r0
 8002268:	9503      	str	r5, [sp, #12]
 800226a:	9d03      	ldr	r5, [sp, #12]
 800226c:	1e6a      	subs	r2, r5, #1
 800226e:	4195      	sbcs	r5, r2
 8002270:	432f      	orrs	r7, r5
 8002272:	e610      	b.n	8001e96 <__aeabi_dsub+0x2be>
 8002274:	0014      	movs	r4, r2
 8002276:	2500      	movs	r5, #0
 8002278:	2200      	movs	r2, #0
 800227a:	e556      	b.n	8001d2a <__aeabi_dsub+0x152>
 800227c:	9b02      	ldr	r3, [sp, #8]
 800227e:	4460      	add	r0, ip
 8002280:	4699      	mov	r9, r3
 8002282:	4560      	cmp	r0, ip
 8002284:	4192      	sbcs	r2, r2
 8002286:	444c      	add	r4, r9
 8002288:	4252      	negs	r2, r2
 800228a:	0005      	movs	r5, r0
 800228c:	18a4      	adds	r4, r4, r2
 800228e:	e74c      	b.n	800212a <__aeabi_dsub+0x552>
 8002290:	001a      	movs	r2, r3
 8002292:	001c      	movs	r4, r3
 8002294:	432a      	orrs	r2, r5
 8002296:	d000      	beq.n	800229a <__aeabi_dsub+0x6c2>
 8002298:	e6b3      	b.n	8002002 <__aeabi_dsub+0x42a>
 800229a:	e6c9      	b.n	8002030 <__aeabi_dsub+0x458>
 800229c:	2480      	movs	r4, #128	@ 0x80
 800229e:	2600      	movs	r6, #0
 80022a0:	0324      	lsls	r4, r4, #12
 80022a2:	e5ae      	b.n	8001e02 <__aeabi_dsub+0x22a>
 80022a4:	2120      	movs	r1, #32
 80022a6:	2500      	movs	r5, #0
 80022a8:	1a09      	subs	r1, r1, r0
 80022aa:	e517      	b.n	8001cdc <__aeabi_dsub+0x104>
 80022ac:	2200      	movs	r2, #0
 80022ae:	2500      	movs	r5, #0
 80022b0:	4c0b      	ldr	r4, [pc, #44]	@ (80022e0 <__aeabi_dsub+0x708>)
 80022b2:	e53a      	b.n	8001d2a <__aeabi_dsub+0x152>
 80022b4:	2d00      	cmp	r5, #0
 80022b6:	d100      	bne.n	80022ba <__aeabi_dsub+0x6e2>
 80022b8:	e5f6      	b.n	8001ea8 <__aeabi_dsub+0x2d0>
 80022ba:	464b      	mov	r3, r9
 80022bc:	1bda      	subs	r2, r3, r7
 80022be:	4692      	mov	sl, r2
 80022c0:	2f00      	cmp	r7, #0
 80022c2:	d100      	bne.n	80022c6 <__aeabi_dsub+0x6ee>
 80022c4:	e66f      	b.n	8001fa6 <__aeabi_dsub+0x3ce>
 80022c6:	2a38      	cmp	r2, #56	@ 0x38
 80022c8:	dc05      	bgt.n	80022d6 <__aeabi_dsub+0x6fe>
 80022ca:	2680      	movs	r6, #128	@ 0x80
 80022cc:	0436      	lsls	r6, r6, #16
 80022ce:	4334      	orrs	r4, r6
 80022d0:	4688      	mov	r8, r1
 80022d2:	000e      	movs	r6, r1
 80022d4:	e6d1      	b.n	800207a <__aeabi_dsub+0x4a2>
 80022d6:	4688      	mov	r8, r1
 80022d8:	000e      	movs	r6, r1
 80022da:	2501      	movs	r5, #1
 80022dc:	e6de      	b.n	800209c <__aeabi_dsub+0x4c4>
 80022de:	46c0      	nop			@ (mov r8, r8)
 80022e0:	000007ff 	.word	0x000007ff
 80022e4:	ff7fffff 	.word	0xff7fffff
 80022e8:	000007fe 	.word	0x000007fe
 80022ec:	2d00      	cmp	r5, #0
 80022ee:	d100      	bne.n	80022f2 <__aeabi_dsub+0x71a>
 80022f0:	e668      	b.n	8001fc4 <__aeabi_dsub+0x3ec>
 80022f2:	464b      	mov	r3, r9
 80022f4:	1bd9      	subs	r1, r3, r7
 80022f6:	2f00      	cmp	r7, #0
 80022f8:	d101      	bne.n	80022fe <__aeabi_dsub+0x726>
 80022fa:	468a      	mov	sl, r1
 80022fc:	e5a7      	b.n	8001e4e <__aeabi_dsub+0x276>
 80022fe:	2701      	movs	r7, #1
 8002300:	2938      	cmp	r1, #56	@ 0x38
 8002302:	dd00      	ble.n	8002306 <__aeabi_dsub+0x72e>
 8002304:	e5c7      	b.n	8001e96 <__aeabi_dsub+0x2be>
 8002306:	2280      	movs	r2, #128	@ 0x80
 8002308:	0412      	lsls	r2, r2, #16
 800230a:	4314      	orrs	r4, r2
 800230c:	e5af      	b.n	8001e6e <__aeabi_dsub+0x296>
 800230e:	46c0      	nop			@ (mov r8, r8)

08002310 <__aeabi_dcmpun>:
 8002310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002312:	46c6      	mov	lr, r8
 8002314:	031e      	lsls	r6, r3, #12
 8002316:	0b36      	lsrs	r6, r6, #12
 8002318:	46b0      	mov	r8, r6
 800231a:	4e0d      	ldr	r6, [pc, #52]	@ (8002350 <__aeabi_dcmpun+0x40>)
 800231c:	030c      	lsls	r4, r1, #12
 800231e:	004d      	lsls	r5, r1, #1
 8002320:	005f      	lsls	r7, r3, #1
 8002322:	b500      	push	{lr}
 8002324:	0b24      	lsrs	r4, r4, #12
 8002326:	0d6d      	lsrs	r5, r5, #21
 8002328:	0d7f      	lsrs	r7, r7, #21
 800232a:	42b5      	cmp	r5, r6
 800232c:	d00b      	beq.n	8002346 <__aeabi_dcmpun+0x36>
 800232e:	4908      	ldr	r1, [pc, #32]	@ (8002350 <__aeabi_dcmpun+0x40>)
 8002330:	2000      	movs	r0, #0
 8002332:	428f      	cmp	r7, r1
 8002334:	d104      	bne.n	8002340 <__aeabi_dcmpun+0x30>
 8002336:	4646      	mov	r6, r8
 8002338:	4316      	orrs	r6, r2
 800233a:	0030      	movs	r0, r6
 800233c:	1e43      	subs	r3, r0, #1
 800233e:	4198      	sbcs	r0, r3
 8002340:	bc80      	pop	{r7}
 8002342:	46b8      	mov	r8, r7
 8002344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002346:	4304      	orrs	r4, r0
 8002348:	2001      	movs	r0, #1
 800234a:	2c00      	cmp	r4, #0
 800234c:	d1f8      	bne.n	8002340 <__aeabi_dcmpun+0x30>
 800234e:	e7ee      	b.n	800232e <__aeabi_dcmpun+0x1e>
 8002350:	000007ff 	.word	0x000007ff

08002354 <__aeabi_d2iz>:
 8002354:	000b      	movs	r3, r1
 8002356:	0002      	movs	r2, r0
 8002358:	b570      	push	{r4, r5, r6, lr}
 800235a:	4d16      	ldr	r5, [pc, #88]	@ (80023b4 <__aeabi_d2iz+0x60>)
 800235c:	030c      	lsls	r4, r1, #12
 800235e:	b082      	sub	sp, #8
 8002360:	0049      	lsls	r1, r1, #1
 8002362:	2000      	movs	r0, #0
 8002364:	9200      	str	r2, [sp, #0]
 8002366:	9301      	str	r3, [sp, #4]
 8002368:	0b24      	lsrs	r4, r4, #12
 800236a:	0d49      	lsrs	r1, r1, #21
 800236c:	0fde      	lsrs	r6, r3, #31
 800236e:	42a9      	cmp	r1, r5
 8002370:	dd04      	ble.n	800237c <__aeabi_d2iz+0x28>
 8002372:	4811      	ldr	r0, [pc, #68]	@ (80023b8 <__aeabi_d2iz+0x64>)
 8002374:	4281      	cmp	r1, r0
 8002376:	dd03      	ble.n	8002380 <__aeabi_d2iz+0x2c>
 8002378:	4b10      	ldr	r3, [pc, #64]	@ (80023bc <__aeabi_d2iz+0x68>)
 800237a:	18f0      	adds	r0, r6, r3
 800237c:	b002      	add	sp, #8
 800237e:	bd70      	pop	{r4, r5, r6, pc}
 8002380:	2080      	movs	r0, #128	@ 0x80
 8002382:	0340      	lsls	r0, r0, #13
 8002384:	4320      	orrs	r0, r4
 8002386:	4c0e      	ldr	r4, [pc, #56]	@ (80023c0 <__aeabi_d2iz+0x6c>)
 8002388:	1a64      	subs	r4, r4, r1
 800238a:	2c1f      	cmp	r4, #31
 800238c:	dd08      	ble.n	80023a0 <__aeabi_d2iz+0x4c>
 800238e:	4b0d      	ldr	r3, [pc, #52]	@ (80023c4 <__aeabi_d2iz+0x70>)
 8002390:	1a5b      	subs	r3, r3, r1
 8002392:	40d8      	lsrs	r0, r3
 8002394:	0003      	movs	r3, r0
 8002396:	4258      	negs	r0, r3
 8002398:	2e00      	cmp	r6, #0
 800239a:	d1ef      	bne.n	800237c <__aeabi_d2iz+0x28>
 800239c:	0018      	movs	r0, r3
 800239e:	e7ed      	b.n	800237c <__aeabi_d2iz+0x28>
 80023a0:	4b09      	ldr	r3, [pc, #36]	@ (80023c8 <__aeabi_d2iz+0x74>)
 80023a2:	9a00      	ldr	r2, [sp, #0]
 80023a4:	469c      	mov	ip, r3
 80023a6:	0003      	movs	r3, r0
 80023a8:	4461      	add	r1, ip
 80023aa:	408b      	lsls	r3, r1
 80023ac:	40e2      	lsrs	r2, r4
 80023ae:	4313      	orrs	r3, r2
 80023b0:	e7f1      	b.n	8002396 <__aeabi_d2iz+0x42>
 80023b2:	46c0      	nop			@ (mov r8, r8)
 80023b4:	000003fe 	.word	0x000003fe
 80023b8:	0000041d 	.word	0x0000041d
 80023bc:	7fffffff 	.word	0x7fffffff
 80023c0:	00000433 	.word	0x00000433
 80023c4:	00000413 	.word	0x00000413
 80023c8:	fffffbed 	.word	0xfffffbed

080023cc <__aeabi_i2d>:
 80023cc:	b570      	push	{r4, r5, r6, lr}
 80023ce:	2800      	cmp	r0, #0
 80023d0:	d016      	beq.n	8002400 <__aeabi_i2d+0x34>
 80023d2:	17c3      	asrs	r3, r0, #31
 80023d4:	18c5      	adds	r5, r0, r3
 80023d6:	405d      	eors	r5, r3
 80023d8:	0fc4      	lsrs	r4, r0, #31
 80023da:	0028      	movs	r0, r5
 80023dc:	f7fe f864 	bl	80004a8 <__clzsi2>
 80023e0:	4b10      	ldr	r3, [pc, #64]	@ (8002424 <__aeabi_i2d+0x58>)
 80023e2:	1a1b      	subs	r3, r3, r0
 80023e4:	055b      	lsls	r3, r3, #21
 80023e6:	0d5b      	lsrs	r3, r3, #21
 80023e8:	280a      	cmp	r0, #10
 80023ea:	dc14      	bgt.n	8002416 <__aeabi_i2d+0x4a>
 80023ec:	0002      	movs	r2, r0
 80023ee:	002e      	movs	r6, r5
 80023f0:	3215      	adds	r2, #21
 80023f2:	4096      	lsls	r6, r2
 80023f4:	220b      	movs	r2, #11
 80023f6:	1a12      	subs	r2, r2, r0
 80023f8:	40d5      	lsrs	r5, r2
 80023fa:	032d      	lsls	r5, r5, #12
 80023fc:	0b2d      	lsrs	r5, r5, #12
 80023fe:	e003      	b.n	8002408 <__aeabi_i2d+0x3c>
 8002400:	2400      	movs	r4, #0
 8002402:	2300      	movs	r3, #0
 8002404:	2500      	movs	r5, #0
 8002406:	2600      	movs	r6, #0
 8002408:	051b      	lsls	r3, r3, #20
 800240a:	432b      	orrs	r3, r5
 800240c:	07e4      	lsls	r4, r4, #31
 800240e:	4323      	orrs	r3, r4
 8002410:	0030      	movs	r0, r6
 8002412:	0019      	movs	r1, r3
 8002414:	bd70      	pop	{r4, r5, r6, pc}
 8002416:	380b      	subs	r0, #11
 8002418:	4085      	lsls	r5, r0
 800241a:	032d      	lsls	r5, r5, #12
 800241c:	2600      	movs	r6, #0
 800241e:	0b2d      	lsrs	r5, r5, #12
 8002420:	e7f2      	b.n	8002408 <__aeabi_i2d+0x3c>
 8002422:	46c0      	nop			@ (mov r8, r8)
 8002424:	0000041e 	.word	0x0000041e

08002428 <__aeabi_ui2d>:
 8002428:	b510      	push	{r4, lr}
 800242a:	1e04      	subs	r4, r0, #0
 800242c:	d010      	beq.n	8002450 <__aeabi_ui2d+0x28>
 800242e:	f7fe f83b 	bl	80004a8 <__clzsi2>
 8002432:	4b0e      	ldr	r3, [pc, #56]	@ (800246c <__aeabi_ui2d+0x44>)
 8002434:	1a1b      	subs	r3, r3, r0
 8002436:	055b      	lsls	r3, r3, #21
 8002438:	0d5b      	lsrs	r3, r3, #21
 800243a:	280a      	cmp	r0, #10
 800243c:	dc0f      	bgt.n	800245e <__aeabi_ui2d+0x36>
 800243e:	220b      	movs	r2, #11
 8002440:	0021      	movs	r1, r4
 8002442:	1a12      	subs	r2, r2, r0
 8002444:	40d1      	lsrs	r1, r2
 8002446:	3015      	adds	r0, #21
 8002448:	030a      	lsls	r2, r1, #12
 800244a:	4084      	lsls	r4, r0
 800244c:	0b12      	lsrs	r2, r2, #12
 800244e:	e001      	b.n	8002454 <__aeabi_ui2d+0x2c>
 8002450:	2300      	movs	r3, #0
 8002452:	2200      	movs	r2, #0
 8002454:	051b      	lsls	r3, r3, #20
 8002456:	4313      	orrs	r3, r2
 8002458:	0020      	movs	r0, r4
 800245a:	0019      	movs	r1, r3
 800245c:	bd10      	pop	{r4, pc}
 800245e:	0022      	movs	r2, r4
 8002460:	380b      	subs	r0, #11
 8002462:	4082      	lsls	r2, r0
 8002464:	0312      	lsls	r2, r2, #12
 8002466:	2400      	movs	r4, #0
 8002468:	0b12      	lsrs	r2, r2, #12
 800246a:	e7f3      	b.n	8002454 <__aeabi_ui2d+0x2c>
 800246c:	0000041e 	.word	0x0000041e

08002470 <__clzdi2>:
 8002470:	b510      	push	{r4, lr}
 8002472:	2900      	cmp	r1, #0
 8002474:	d103      	bne.n	800247e <__clzdi2+0xe>
 8002476:	f7fe f817 	bl	80004a8 <__clzsi2>
 800247a:	3020      	adds	r0, #32
 800247c:	e002      	b.n	8002484 <__clzdi2+0x14>
 800247e:	0008      	movs	r0, r1
 8002480:	f7fe f812 	bl	80004a8 <__clzsi2>
 8002484:	bd10      	pop	{r4, pc}
 8002486:	46c0      	nop			@ (mov r8, r8)

08002488 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2201      	movs	r2, #1
 8002496:	4013      	ands	r3, r2
 8002498:	2b01      	cmp	r3, #1
 800249a:	d101      	bne.n	80024a0 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800249c:	2301      	movs	r3, #1
 800249e:	e000      	b.n	80024a2 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	0018      	movs	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	b002      	add	sp, #8
 80024a8:	bd80      	pop	{r7, pc}

080024aa <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2202      	movs	r2, #2
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d101      	bne.n	80024c2 <LL_SPI_IsActiveFlag_TXE+0x18>
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	0018      	movs	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b002      	add	sp, #8
 80024ca:	bd80      	pop	{r7, pc}

080024cc <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	330c      	adds	r3, #12
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	b2db      	uxtb	r3, r3
}
 80024dc:	0018      	movs	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	b002      	add	sp, #8
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	000a      	movs	r2, r1
 80024ee:	1cfb      	adds	r3, r7, #3
 80024f0:	701a      	strb	r2, [r3, #0]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	330c      	adds	r3, #12
 80024f6:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	1cfa      	adds	r2, r7, #3
 80024fc:	7812      	ldrb	r2, [r2, #0]
 80024fe:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8002500:	46c0      	nop			@ (mov r8, r8)
 8002502:	46bd      	mov	sp, r7
 8002504:	b004      	add	sp, #16
 8002506:	bd80      	pop	{r7, pc}

08002508 <spi_select_slave>:
 * @brief True if we've set the RTC from the cloud time
 */
// bool timeSet = false;

static inline void spi_select_slave(bool select)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	0002      	movs	r2, r0
 8002510:	1dfb      	adds	r3, r7, #7
 8002512:	701a      	strb	r2, [r3, #0]
    if (select)
 8002514:	1dfb      	adds	r3, r7, #7
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d004      	beq.n	8002526 <spi_select_slave+0x1e>
    {
        RTC_H();
 800251c:	4b06      	ldr	r3, [pc, #24]	@ (8002538 <spi_select_slave+0x30>)
 800251e:	2280      	movs	r2, #128	@ 0x80
 8002520:	01d2      	lsls	r2, r2, #7
 8002522:	619a      	str	r2, [r3, #24]
    }
    else
    {
        RTC_L();
    }
}
 8002524:	e003      	b.n	800252e <spi_select_slave+0x26>
        RTC_L();
 8002526:	4b04      	ldr	r3, [pc, #16]	@ (8002538 <spi_select_slave+0x30>)
 8002528:	2280      	movs	r2, #128	@ 0x80
 800252a:	05d2      	lsls	r2, r2, #23
 800252c:	619a      	str	r2, [r3, #24]
}
 800252e:	46c0      	nop			@ (mov r8, r8)
 8002530:	46bd      	mov	sp, r7
 8002532:	b002      	add	sp, #8
 8002534:	bd80      	pop	{r7, pc}
 8002536:	46c0      	nop			@ (mov r8, r8)
 8002538:	50000400 	.word	0x50000400

0800253c <resetConfig>:

    return (value & REG_OSC_STATUS_OMODE) != 0;
}

bool resetConfig(uint32_t flags)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
    printf("resetConfig(0x%08lx)\n", flags);
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	4b3f      	ldr	r3, [pc, #252]	@ (8002644 <resetConfig+0x108>)
 8002548:	0011      	movs	r1, r2
 800254a:	0018      	movs	r0, r3
 800254c:	f003 f892 	bl	8005674 <printf_>

    // Reset configuration registers to default values
    write_rtc_register(REG_STATUS, REG_STATUS_DEFAULT);
 8002550:	230f      	movs	r3, #15
 8002552:	2200      	movs	r2, #0
 8002554:	0011      	movs	r1, r2
 8002556:	0018      	movs	r0, r3
 8002558:	f000 fc54 	bl	8002e04 <write_rtc_register>
    write_rtc_register(REG_CTRL_1, REG_CTRL_1_DEFAULT);
 800255c:	2310      	movs	r3, #16
 800255e:	2212      	movs	r2, #18
 8002560:	0011      	movs	r1, r2
 8002562:	0018      	movs	r0, r3
 8002564:	f000 fc4e 	bl	8002e04 <write_rtc_register>
    write_rtc_register(REG_CTRL_2, REG_CTRL_2_DEFAULT);
 8002568:	2311      	movs	r3, #17
 800256a:	223c      	movs	r2, #60	@ 0x3c
 800256c:	0011      	movs	r1, r2
 800256e:	0018      	movs	r0, r3
 8002570:	f000 fc48 	bl	8002e04 <write_rtc_register>
    write_rtc_register(REG_INT_MASK, REG_INT_MASK_DEFAULT);
 8002574:	2312      	movs	r3, #18
 8002576:	22e0      	movs	r2, #224	@ 0xe0
 8002578:	0011      	movs	r1, r2
 800257a:	0018      	movs	r0, r3
 800257c:	f000 fc42 	bl	8002e04 <write_rtc_register>
    write_rtc_register(REG_SQW, REG_SQW_DEFAULT);
 8002580:	2313      	movs	r3, #19
 8002582:	2226      	movs	r2, #38	@ 0x26
 8002584:	0011      	movs	r1, r2
 8002586:	0018      	movs	r0, r3
 8002588:	f000 fc3c 	bl	8002e04 <write_rtc_register>
    write_rtc_register(REG_SLEEP_CTRL, REG_SLEEP_CTRL_DEFAULT);
 800258c:	2317      	movs	r3, #23
 800258e:	2200      	movs	r2, #0
 8002590:	0011      	movs	r1, r2
 8002592:	0018      	movs	r0, r3
 8002594:	f000 fc36 	bl	8002e04 <write_rtc_register>

    if ((flags & RESET_PRESERVE_REPEATING_TIMER) != 0)
 8002598:	2201      	movs	r2, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4013      	ands	r3, r2
 800259e:	d010      	beq.n	80025c2 <resetConfig+0x86>
    {
        maskRegister(REG_TIMER_CTRL, ~REG_TIMER_CTRL_RPT_MASK, REG_TIMER_CTRL_DEFAULT & ~REG_TIMER_CTRL_RPT_MASK, false);
 80025a0:	2018      	movs	r0, #24
 80025a2:	231c      	movs	r3, #28
 80025a4:	43db      	mvns	r3, r3
 80025a6:	b2d9      	uxtb	r1, r3
 80025a8:	231c      	movs	r3, #28
 80025aa:	b25b      	sxtb	r3, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	b25b      	sxtb	r3, r3
 80025b0:	2223      	movs	r2, #35	@ 0x23
 80025b2:	b252      	sxtb	r2, r2
 80025b4:	4013      	ands	r3, r2
 80025b6:	b25b      	sxtb	r3, r3
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	2300      	movs	r3, #0
 80025bc:	f000 fa54 	bl	8002a68 <maskRegister>
 80025c0:	e005      	b.n	80025ce <resetConfig+0x92>
    }
    else
    {
        write_rtc_register(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
 80025c2:	2318      	movs	r3, #24
 80025c4:	2223      	movs	r2, #35	@ 0x23
 80025c6:	0011      	movs	r1, r2
 80025c8:	0018      	movs	r0, r3
 80025ca:	f000 fc1b 	bl	8002e04 <write_rtc_register>
    }

    write_rtc_register(REG_TIMER, REG_TIMER_DEFAULT);
 80025ce:	2319      	movs	r3, #25
 80025d0:	2200      	movs	r2, #0
 80025d2:	0011      	movs	r1, r2
 80025d4:	0018      	movs	r0, r3
 80025d6:	f000 fc15 	bl	8002e04 <write_rtc_register>
    write_rtc_register(REG_TIMER_INITIAL, REG_TIMER_INITIAL_DEFAULT);
 80025da:	231a      	movs	r3, #26
 80025dc:	2200      	movs	r2, #0
 80025de:	0011      	movs	r1, r2
 80025e0:	0018      	movs	r0, r3
 80025e2:	f000 fc0f 	bl	8002e04 <write_rtc_register>
    write_rtc_register(REG_WDT, REG_WDT_DEFAULT);
 80025e6:	231b      	movs	r3, #27
 80025e8:	2200      	movs	r2, #0
 80025ea:	0011      	movs	r1, r2
 80025ec:	0018      	movs	r0, r3
 80025ee:	f000 fc09 	bl	8002e04 <write_rtc_register>

    uint8_t oscCtrl = REG_OSC_CTRL_DEFAULT;
 80025f2:	200f      	movs	r0, #15
 80025f4:	183b      	adds	r3, r7, r0
 80025f6:	2200      	movs	r2, #0
 80025f8:	701a      	strb	r2, [r3, #0]
    if ((flags & RESET_DISABLE_XT) != 0)
 80025fa:	2202      	movs	r2, #2
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4013      	ands	r3, r2
 8002600:	d008      	beq.n	8002614 <resetConfig+0xd8>
    {
        // If disabling XT oscillator, set OSEL to 1 (RC oscillator)
        // Also enable FOS so if the XT oscillator fails, it will switch to RC (just in case)
        // and ACAL to 0 (however REG_OSC_CTRL_DEFAULT already sets ACAL to 0)
        oscCtrl |= REG_OSC_CTRL_OSEL | REG_OSC_CTRL_FOS;
 8002602:	2280      	movs	r2, #128	@ 0x80
 8002604:	2308      	movs	r3, #8
 8002606:	4313      	orrs	r3, r2
 8002608:	b2d9      	uxtb	r1, r3
 800260a:	183b      	adds	r3, r7, r0
 800260c:	183a      	adds	r2, r7, r0
 800260e:	7812      	ldrb	r2, [r2, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	701a      	strb	r2, [r3, #0]
    }
    // write_rtc_register(REG_OSC_CTRL, oscCtrl);
    // write_rtc_register(REG_TRICKLE, REG_TRICKLE_DEFAULT);
    write_rtc_register(REG_BREF_CTRL, REG_BREF_CTRL_DEFAULT);
 8002614:	2321      	movs	r3, #33	@ 0x21
 8002616:	22f0      	movs	r2, #240	@ 0xf0
 8002618:	0011      	movs	r1, r2
 800261a:	0018      	movs	r0, r3
 800261c:	f000 fbf2 	bl	8002e04 <write_rtc_register>
    write_rtc_register(REG_AFCTRL, REG_AFCTRL_DEFAULT);
 8002620:	2326      	movs	r3, #38	@ 0x26
 8002622:	2200      	movs	r2, #0
 8002624:	0011      	movs	r1, r2
 8002626:	0018      	movs	r0, r3
 8002628:	f000 fbec 	bl	8002e04 <write_rtc_register>
    // write_rtc_register(REG_BATMODE_IO, REG_BATMODE_IO_DEFAULT);
    write_rtc_register(REG_OCTRL, REG_OCTRL_DEFAULT);
 800262c:	2330      	movs	r3, #48	@ 0x30
 800262e:	2200      	movs	r2, #0
 8002630:	0011      	movs	r1, r2
 8002632:	0018      	movs	r0, r3
 8002634:	f000 fbe6 	bl	8002e04 <write_rtc_register>

    return true;
 8002638:	2301      	movs	r3, #1
}
 800263a:	0018      	movs	r0, r3
 800263c:	46bd      	mov	sp, r7
 800263e:	b004      	add	sp, #16
 8002640:	bd80      	pop	{r7, pc}
 8002642:	46c0      	nop			@ (mov r8, r8)
 8002644:	0800f98c 	.word	0x0800f98c

08002648 <setWDT>:

    return true;
}

bool setWDT(int seconds)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
    bool bResult = false;
 8002650:	230f      	movs	r3, #15
 8002652:	18fb      	adds	r3, r7, r3
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
    // printf("setWDT %d\n", seconds);

    if (seconds < 0)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	da02      	bge.n	8002664 <setWDT+0x1c>
    {
        seconds = watchdogSecs;
 800265e:	4b2d      	ldr	r3, [pc, #180]	@ (8002714 <setWDT+0xcc>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	607b      	str	r3, [r7, #4]
    }

    if (seconds == 0)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d112      	bne.n	8002690 <setWDT+0x48>
    {
        // Disable WDT
        bResult = write_rtc_register(REG_WDT, 0x00);
 800266a:	231b      	movs	r3, #27
 800266c:	2100      	movs	r1, #0
 800266e:	0018      	movs	r0, r3
 8002670:	f000 fbc8 	bl	8002e04 <write_rtc_register>
 8002674:	0003      	movs	r3, r0
 8002676:	001a      	movs	r2, r3
 8002678:	230f      	movs	r3, #15
 800267a:	18fb      	adds	r3, r7, r3
 800267c:	1e51      	subs	r1, r2, #1
 800267e:	418a      	sbcs	r2, r1
 8002680:	701a      	strb	r2, [r3, #0]

        watchdogSecs = 0;
 8002682:	4b24      	ldr	r3, [pc, #144]	@ (8002714 <setWDT+0xcc>)
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
        watchdogUpdatePeriod = 0;
 8002688:	4b23      	ldr	r3, [pc, #140]	@ (8002718 <setWDT+0xd0>)
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	e03a      	b.n	8002706 <setWDT+0xbe>
    }
    else
    {
        // Use 1/4 Hz clock
        int fourSecs = seconds / 4;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	da00      	bge.n	8002698 <setWDT+0x50>
 8002696:	3303      	adds	r3, #3
 8002698:	109b      	asrs	r3, r3, #2
 800269a:	60bb      	str	r3, [r7, #8]
        if (fourSecs < 1)
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	dc01      	bgt.n	80026a6 <setWDT+0x5e>
        {
            fourSecs = 1;
 80026a2:	2301      	movs	r3, #1
 80026a4:	60bb      	str	r3, [r7, #8]
        }
        if (fourSecs > 31)
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2b1f      	cmp	r3, #31
 80026aa:	dd01      	ble.n	80026b0 <setWDT+0x68>
        {
            fourSecs = 31;
 80026ac:	231f      	movs	r3, #31
 80026ae:	60bb      	str	r3, [r7, #8]
        }
        bResult = write_rtc_register(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
 80026b0:	201b      	movs	r0, #27
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	b25a      	sxtb	r2, r3
 80026b8:	2380      	movs	r3, #128	@ 0x80
 80026ba:	b25b      	sxtb	r3, r3
 80026bc:	4313      	orrs	r3, r2
 80026be:	b25a      	sxtb	r2, r3
 80026c0:	2303      	movs	r3, #3
 80026c2:	b25b      	sxtb	r3, r3
 80026c4:	4313      	orrs	r3, r2
 80026c6:	b25b      	sxtb	r3, r3
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	0019      	movs	r1, r3
 80026cc:	f000 fb9a 	bl	8002e04 <write_rtc_register>
 80026d0:	0003      	movs	r3, r0
 80026d2:	001a      	movs	r2, r3
 80026d4:	200f      	movs	r0, #15
 80026d6:	183b      	adds	r3, r7, r0
 80026d8:	1e51      	subs	r1, r2, #1
 80026da:	418a      	sbcs	r2, r1
 80026dc:	701a      	strb	r2, [r3, #0]

        printf("watchdog set fourSecs=%d bResult=%d\n", fourSecs, bResult);
 80026de:	183b      	adds	r3, r7, r0
 80026e0:	781a      	ldrb	r2, [r3, #0]
 80026e2:	68b9      	ldr	r1, [r7, #8]
 80026e4:	4b0d      	ldr	r3, [pc, #52]	@ (800271c <setWDT+0xd4>)
 80026e6:	0018      	movs	r0, r3
 80026e8:	f002 ffc4 	bl	8005674 <printf_>

        watchdogSecs = seconds;
 80026ec:	4b09      	ldr	r3, [pc, #36]	@ (8002714 <setWDT+0xcc>)
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	601a      	str	r2, [r3, #0]

        // Update watchdog half way through period
        watchdogUpdatePeriod = (fourSecs * 2000);
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	0013      	movs	r3, r2
 80026f6:	015b      	lsls	r3, r3, #5
 80026f8:	1a9b      	subs	r3, r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	189b      	adds	r3, r3, r2
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	001a      	movs	r2, r3
 8002702:	4b05      	ldr	r3, [pc, #20]	@ (8002718 <setWDT+0xd0>)
 8002704:	601a      	str	r2, [r3, #0]
    }

    return bResult;
 8002706:	230f      	movs	r3, #15
 8002708:	18fb      	adds	r3, r7, r3
 800270a:	781b      	ldrb	r3, [r3, #0]
}
 800270c:	0018      	movs	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	b004      	add	sp, #16
 8002712:	bd80      	pop	{r7, pc}
 8002714:	2000035c 	.word	0x2000035c
 8002718:	20000360 	.word	0x20000360
 800271c:	0800f9ec 	.word	0x0800f9ec

08002720 <deepPowerDown>:

    return true;
}

bool deepPowerDown(int seconds)
{
 8002720:	b5b0      	push	{r4, r5, r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
    const char *errorMsg = "failure in deepPowerDown %d\n";
 8002728:	4b6e      	ldr	r3, [pc, #440]	@ (80028e4 <deepPowerDown+0x1c4>)
 800272a:	617b      	str	r3, [r7, #20]
    bool bResult;

    printf("deepPowerDown %d\n", seconds);
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	4b6e      	ldr	r3, [pc, #440]	@ (80028e8 <deepPowerDown+0x1c8>)
 8002730:	0011      	movs	r1, r2
 8002732:	0018      	movs	r0, r3
 8002734:	f002 ff9e 	bl	8005674 <printf_>

    // Disable watchdog
    bResult = setWDT(0);
 8002738:	2513      	movs	r5, #19
 800273a:	197c      	adds	r4, r7, r5
 800273c:	2000      	movs	r0, #0
 800273e:	f7ff ff83 	bl	8002648 <setWDT>
 8002742:	0003      	movs	r3, r0
 8002744:	7023      	strb	r3, [r4, #0]
    if (!bResult)
 8002746:	197b      	adds	r3, r7, r5
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2201      	movs	r2, #1
 800274c:	4053      	eors	r3, r2
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	d009      	beq.n	8002768 <deepPowerDown+0x48>
    {
        printf(errorMsg, __LINE__);
 8002754:	2346      	movs	r3, #70	@ 0x46
 8002756:	33ff      	adds	r3, #255	@ 0xff
 8002758:	001a      	movs	r2, r3
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	0011      	movs	r1, r2
 800275e:	0018      	movs	r0, r3
 8002760:	f002 ff88 	bl	8005674 <printf_>
        return false;
 8002764:	2300      	movs	r3, #0
 8002766:	e0b8      	b.n	80028da <deepPowerDown+0x1ba>
    }

    bResult = setCountdownTimer(seconds, false);
 8002768:	2513      	movs	r5, #19
 800276a:	197c      	adds	r4, r7, r5
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2100      	movs	r1, #0
 8002770:	0018      	movs	r0, r3
 8002772:	f000 f8bf 	bl	80028f4 <setCountdownTimer>
 8002776:	0003      	movs	r3, r0
 8002778:	7023      	strb	r3, [r4, #0]
    if (!bResult)
 800277a:	197b      	adds	r3, r7, r5
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2201      	movs	r2, #1
 8002780:	4053      	eors	r3, r2
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d008      	beq.n	800279a <deepPowerDown+0x7a>
    {
        printf(errorMsg, __LINE__);
 8002788:	23a6      	movs	r3, #166	@ 0xa6
 800278a:	005a      	lsls	r2, r3, #1
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	0011      	movs	r1, r2
 8002790:	0018      	movs	r0, r3
 8002792:	f002 ff6f 	bl	8005674 <printf_>
        return false;
 8002796:	2300      	movs	r3, #0
 8002798:	e09f      	b.n	80028da <deepPowerDown+0x1ba>
    }

    // Make sure STOP (stop clocking system is 0, otherwise sleep mode cannot be entered)
    // PWR2 = 1 (low resistance power switch)
    // (also would probably work with PWR2 = 0, as nIRQ2 should be high-true for sleep mode)
    bResult = maskRegister(REG_CTRL_1, (uint8_t) ~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2, 0);
 800279a:	2010      	movs	r0, #16
 800279c:	2280      	movs	r2, #128	@ 0x80
 800279e:	2308      	movs	r3, #8
 80027a0:	4313      	orrs	r3, r2
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	b2d9      	uxtb	r1, r3
 80027a8:	2202      	movs	r2, #2
 80027aa:	2513      	movs	r5, #19
 80027ac:	197c      	adds	r4, r7, r5
 80027ae:	2300      	movs	r3, #0
 80027b0:	f000 f95a 	bl	8002a68 <maskRegister>
 80027b4:	0003      	movs	r3, r0
 80027b6:	7023      	strb	r3, [r4, #0]
    if (!bResult)
 80027b8:	197b      	adds	r3, r7, r5
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2201      	movs	r2, #1
 80027be:	4053      	eors	r3, r2
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d008      	beq.n	80027d8 <deepPowerDown+0xb8>
    {
        printf(errorMsg, __LINE__);
 80027c6:	23ab      	movs	r3, #171	@ 0xab
 80027c8:	005a      	lsls	r2, r3, #1
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	0011      	movs	r1, r2
 80027ce:	0018      	movs	r0, r3
 80027d0:	f002 ff50 	bl	8005674 <printf_>
        return false;
 80027d4:	2300      	movs	r3, #0
 80027d6:	e080      	b.n	80028da <deepPowerDown+0x1ba>
    }

    // Disable the I/O interface in sleep
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT, 0);
 80027d8:	231c      	movs	r3, #28
 80027da:	2104      	movs	r1, #4
 80027dc:	2513      	movs	r5, #19
 80027de:	197c      	adds	r4, r7, r5
 80027e0:	2200      	movs	r2, #0
 80027e2:	0018      	movs	r0, r3
 80027e4:	f000 f9a0 	bl	8002b28 <setRegisterBit>
 80027e8:	0003      	movs	r3, r0
 80027ea:	7023      	strb	r3, [r4, #0]
    if (!bResult)
 80027ec:	197b      	adds	r3, r7, r5
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2201      	movs	r2, #1
 80027f2:	4053      	eors	r3, r2
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d008      	beq.n	800280c <deepPowerDown+0xec>
    {
        printf(errorMsg, __LINE__);
 80027fa:	23af      	movs	r3, #175	@ 0xaf
 80027fc:	005a      	lsls	r2, r3, #1
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	0011      	movs	r1, r2
 8002802:	0018      	movs	r0, r3
 8002804:	f002 ff36 	bl	8005674 <printf_>
        return false;
 8002808:	2300      	movs	r3, #0
 800280a:	e066      	b.n	80028da <deepPowerDown+0x1ba>
    }

    // OUT2S = 6 to enable sleep mode
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP, 0);
 800280c:	2011      	movs	r0, #17
 800280e:	231c      	movs	r3, #28
 8002810:	43db      	mvns	r3, r3
 8002812:	b2d9      	uxtb	r1, r3
 8002814:	2218      	movs	r2, #24
 8002816:	2513      	movs	r5, #19
 8002818:	197c      	adds	r4, r7, r5
 800281a:	2300      	movs	r3, #0
 800281c:	f000 f924 	bl	8002a68 <maskRegister>
 8002820:	0003      	movs	r3, r0
 8002822:	7023      	strb	r3, [r4, #0]
    if (!bResult)
 8002824:	197b      	adds	r3, r7, r5
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2201      	movs	r2, #1
 800282a:	4053      	eors	r3, r2
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d008      	beq.n	8002844 <deepPowerDown+0x124>
    {
        printf(errorMsg, __LINE__);
 8002832:	23b3      	movs	r3, #179	@ 0xb3
 8002834:	005a      	lsls	r2, r3, #1
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	0011      	movs	r1, r2
 800283a:	0018      	movs	r0, r3
 800283c:	f002 ff1a 	bl	8005674 <printf_>
        return false;
 8002840:	2300      	movs	r3, #0
 8002842:	e04a      	b.n	80028da <deepPowerDown+0x1ba>
    }
    //    hex_dump();
    HAL_Delay(1);
 8002844:	2001      	movs	r0, #1
 8002846:	f003 fae1 	bl	8005e0c <HAL_Delay>
    // Enter sleep mode
    bResult = write_rtc_register(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES); // REG_SLEEP_CTRL_SLP | 0x01
 800284a:	2017      	movs	r0, #23
 800284c:	2280      	movs	r2, #128	@ 0x80
 800284e:	2340      	movs	r3, #64	@ 0x40
 8002850:	4313      	orrs	r3, r2
 8002852:	b2db      	uxtb	r3, r3
 8002854:	0019      	movs	r1, r3
 8002856:	f000 fad5 	bl	8002e04 <write_rtc_register>
 800285a:	0003      	movs	r3, r0
 800285c:	001a      	movs	r2, r3
 800285e:	2013      	movs	r0, #19
 8002860:	183b      	adds	r3, r7, r0
 8002862:	1e51      	subs	r1, r2, #1
 8002864:	418a      	sbcs	r2, r1
 8002866:	701a      	strb	r2, [r3, #0]
    if (!bResult)
 8002868:	183b      	adds	r3, r7, r0
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2201      	movs	r2, #1
 800286e:	4053      	eors	r3, r2
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d009      	beq.n	800288a <deepPowerDown+0x16a>
    {
        printf(errorMsg, __LINE__);
 8002876:	2370      	movs	r3, #112	@ 0x70
 8002878:	33ff      	adds	r3, #255	@ 0xff
 800287a:	001a      	movs	r2, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	0011      	movs	r1, r2
 8002880:	0018      	movs	r0, r3
 8002882:	f002 fef7 	bl	8005674 <printf_>
        return false;
 8002886:	2300      	movs	r3, #0
 8002888:	e027      	b.n	80028da <deepPowerDown+0x1ba>
    }
    // bResult = write_rtc_register(REG_TIMER_CTRL, 0xc2); // enable
    // _log.trace("delay in case we didn't power down");
    uint32_t start = HAL_GetTick();
 800288a:	f003 fab5 	bl	8005df8 <HAL_GetTick>
 800288e:	0003      	movs	r3, r0
 8002890:	60fb      	str	r3, [r7, #12]
    while ((HAL_GetTick() - start) < (uint32_t)(seconds * 1000))
 8002892:	e00f      	b.n	80028b4 <deepPowerDown+0x194>
    {
        printf("REG_SLEEP_CTRL=0x%2x\n", read_rtc_register(REG_SLEEP_CTRL));
 8002894:	2317      	movs	r3, #23
 8002896:	0018      	movs	r0, r3
 8002898:	f000 fa82 	bl	8002da0 <read_rtc_register>
 800289c:	0003      	movs	r3, r0
 800289e:	001a      	movs	r2, r3
 80028a0:	4b12      	ldr	r3, [pc, #72]	@ (80028ec <deepPowerDown+0x1cc>)
 80028a2:	0011      	movs	r1, r2
 80028a4:	0018      	movs	r0, r3
 80028a6:	f002 fee5 	bl	8005674 <printf_>
        HAL_Delay(1000);
 80028aa:	23fa      	movs	r3, #250	@ 0xfa
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	0018      	movs	r0, r3
 80028b0:	f003 faac 	bl	8005e0c <HAL_Delay>
    while ((HAL_GetTick() - start) < (uint32_t)(seconds * 1000))
 80028b4:	f003 faa0 	bl	8005df8 <HAL_GetTick>
 80028b8:	0002      	movs	r2, r0
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1ad1      	subs	r1, r2, r3
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	0013      	movs	r3, r2
 80028c2:	015b      	lsls	r3, r3, #5
 80028c4:	1a9b      	subs	r3, r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	189b      	adds	r3, r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	4299      	cmp	r1, r3
 80028ce:	d3e1      	bcc.n	8002894 <deepPowerDown+0x174>
    }

    printf("didn't power down\n");
 80028d0:	4b07      	ldr	r3, [pc, #28]	@ (80028f0 <deepPowerDown+0x1d0>)
 80028d2:	0018      	movs	r0, r3
 80028d4:	f002 fece 	bl	8005674 <printf_>

    return true;
 80028d8:	2301      	movs	r3, #1
}
 80028da:	0018      	movs	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	b006      	add	sp, #24
 80028e0:	bdb0      	pop	{r4, r5, r7, pc}
 80028e2:	46c0      	nop			@ (mov r8, r8)
 80028e4:	0800fa64 	.word	0x0800fa64
 80028e8:	0800fa84 	.word	0x0800fa84
 80028ec:	0800fa98 	.word	0x0800fa98
 80028f0:	0800fab0 	.word	0x0800fab0

080028f4 <setCountdownTimer>:

bool setCountdownTimer(int value, bool minutes)
{
 80028f4:	b5b0      	push	{r4, r5, r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	000a      	movs	r2, r1
 80028fe:	1cfb      	adds	r3, r7, #3
 8002900:	701a      	strb	r2, [r3, #0]
    const char *errorMsg = "failure in setCountdownTimer %d\n";
 8002902:	4b58      	ldr	r3, [pc, #352]	@ (8002a64 <setCountdownTimer+0x170>)
 8002904:	60fb      	str	r3, [r7, #12]
    bool bResult;

    // Clear any pending interrupts
    bResult = write_rtc_register(REG_STATUS, REG_STATUS_DEFAULT);
 8002906:	230f      	movs	r3, #15
 8002908:	2200      	movs	r2, #0
 800290a:	0011      	movs	r1, r2
 800290c:	0018      	movs	r0, r3
 800290e:	f000 fa79 	bl	8002e04 <write_rtc_register>
 8002912:	0003      	movs	r3, r0
 8002914:	001a      	movs	r2, r3
 8002916:	200b      	movs	r0, #11
 8002918:	183b      	adds	r3, r7, r0
 800291a:	1e51      	subs	r1, r2, #1
 800291c:	418a      	sbcs	r2, r1
 800291e:	701a      	strb	r2, [r3, #0]
    if (!bResult)
 8002920:	183b      	adds	r3, r7, r0
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2201      	movs	r2, #1
 8002926:	4053      	eors	r3, r2
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d009      	beq.n	8002942 <setCountdownTimer+0x4e>
    {
        printf(errorMsg, __LINE__);
 800292e:	238a      	movs	r3, #138	@ 0x8a
 8002930:	33ff      	adds	r3, #255	@ 0xff
 8002932:	001a      	movs	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	0011      	movs	r1, r2
 8002938:	0018      	movs	r0, r3
 800293a:	f002 fe9b 	bl	8005674 <printf_>
        return false;
 800293e:	2300      	movs	r3, #0
 8002940:	e08c      	b.n	8002a5c <setCountdownTimer+0x168>
    }

    // Stop countdown timer if already running since it can't be set while running
    bResult = write_rtc_register(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
 8002942:	2318      	movs	r3, #24
 8002944:	2223      	movs	r2, #35	@ 0x23
 8002946:	0011      	movs	r1, r2
 8002948:	0018      	movs	r0, r3
 800294a:	f000 fa5b 	bl	8002e04 <write_rtc_register>
 800294e:	0003      	movs	r3, r0
 8002950:	001a      	movs	r2, r3
 8002952:	200b      	movs	r0, #11
 8002954:	183b      	adds	r3, r7, r0
 8002956:	1e51      	subs	r1, r2, #1
 8002958:	418a      	sbcs	r2, r1
 800295a:	701a      	strb	r2, [r3, #0]
    if (!bResult)
 800295c:	183b      	adds	r3, r7, r0
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2201      	movs	r2, #1
 8002962:	4053      	eors	r3, r2
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d009      	beq.n	800297e <setCountdownTimer+0x8a>
    {
        printf(errorMsg, __LINE__);
 800296a:	2392      	movs	r3, #146	@ 0x92
 800296c:	33ff      	adds	r3, #255	@ 0xff
 800296e:	001a      	movs	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	0011      	movs	r1, r2
 8002974:	0018      	movs	r0, r3
 8002976:	f002 fe7d 	bl	8005674 <printf_>
        return false;
 800297a:	2300      	movs	r3, #0
 800297c:	e06e      	b.n	8002a5c <setCountdownTimer+0x168>
    }

    // Set countdown timer duration
    if (value < 1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	dc01      	bgt.n	8002988 <setCountdownTimer+0x94>
    {
        value = 1;
 8002984:	2301      	movs	r3, #1
 8002986:	607b      	str	r3, [r7, #4]
    }
    if (value > 255)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2bff      	cmp	r3, #255	@ 0xff
 800298c:	dd01      	ble.n	8002992 <setCountdownTimer+0x9e>
    {
        value = 255;
 800298e:	23ff      	movs	r3, #255	@ 0xff
 8002990:	607b      	str	r3, [r7, #4]
    }
    bResult = write_rtc_register(REG_TIMER, (uint8_t)value);
 8002992:	2219      	movs	r2, #25
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	b2db      	uxtb	r3, r3
 8002998:	0019      	movs	r1, r3
 800299a:	0010      	movs	r0, r2
 800299c:	f000 fa32 	bl	8002e04 <write_rtc_register>
 80029a0:	0003      	movs	r3, r0
 80029a2:	001a      	movs	r2, r3
 80029a4:	200b      	movs	r0, #11
 80029a6:	183b      	adds	r3, r7, r0
 80029a8:	1e51      	subs	r1, r2, #1
 80029aa:	418a      	sbcs	r2, r1
 80029ac:	701a      	strb	r2, [r3, #0]
    if (!bResult)
 80029ae:	183b      	adds	r3, r7, r0
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2201      	movs	r2, #1
 80029b4:	4053      	eors	r3, r2
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d009      	beq.n	80029d0 <setCountdownTimer+0xdc>
    {
        printf(errorMsg, __LINE__);
 80029bc:	23a2      	movs	r3, #162	@ 0xa2
 80029be:	33ff      	adds	r3, #255	@ 0xff
 80029c0:	001a      	movs	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	0011      	movs	r1, r2
 80029c6:	0018      	movs	r0, r3
 80029c8:	f002 fe54 	bl	8005674 <printf_>
        return false;
 80029cc:	2300      	movs	r3, #0
 80029ce:	e045      	b.n	8002a5c <setCountdownTimer+0x168>
    }

    // Enable countdown timer interrupt (TIE = 1) in IntMask
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE, 0);
 80029d0:	2312      	movs	r3, #18
 80029d2:	2108      	movs	r1, #8
 80029d4:	250b      	movs	r5, #11
 80029d6:	197c      	adds	r4, r7, r5
 80029d8:	2200      	movs	r2, #0
 80029da:	0018      	movs	r0, r3
 80029dc:	f000 f8a4 	bl	8002b28 <setRegisterBit>
 80029e0:	0003      	movs	r3, r0
 80029e2:	7023      	strb	r3, [r4, #0]
    if (!bResult)
 80029e4:	197b      	adds	r3, r7, r5
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2201      	movs	r2, #1
 80029ea:	4053      	eors	r3, r2
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d009      	beq.n	8002a06 <setCountdownTimer+0x112>
    {
        printf(errorMsg, __LINE__);
 80029f2:	23aa      	movs	r3, #170	@ 0xaa
 80029f4:	33ff      	adds	r3, #255	@ 0xff
 80029f6:	001a      	movs	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	0011      	movs	r1, r2
 80029fc:	0018      	movs	r0, r3
 80029fe:	f002 fe39 	bl	8005674 <printf_>
        return false;
 8002a02:	2300      	movs	r3, #0
 8002a04:	e02a      	b.n	8002a5c <setCountdownTimer+0x168>
    }

    // Set the TFS frequency to 1/60 Hz for minutes or 1 Hz for seconds
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
 8002a06:	1cfb      	adds	r3, r7, #3
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <setCountdownTimer+0x11e>
 8002a0e:	2203      	movs	r2, #3
 8002a10:	e000      	b.n	8002a14 <setCountdownTimer+0x120>
 8002a12:	2202      	movs	r2, #2
 8002a14:	210a      	movs	r1, #10
 8002a16:	187b      	adds	r3, r7, r1
 8002a18:	701a      	strb	r2, [r3, #0]

    // Enable countdown timer (TE = 1) in countdown timer control register
    bResult = write_rtc_register(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
 8002a1a:	2018      	movs	r0, #24
 8002a1c:	2280      	movs	r2, #128	@ 0x80
 8002a1e:	187b      	adds	r3, r7, r1
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	0019      	movs	r1, r3
 8002a28:	f000 f9ec 	bl	8002e04 <write_rtc_register>
 8002a2c:	0003      	movs	r3, r0
 8002a2e:	001a      	movs	r2, r3
 8002a30:	200b      	movs	r0, #11
 8002a32:	183b      	adds	r3, r7, r0
 8002a34:	1e51      	subs	r1, r2, #1
 8002a36:	418a      	sbcs	r2, r1
 8002a38:	701a      	strb	r2, [r3, #0]
    // bResult = write_rtc_register(REG_TIMER_CTRL, 0x42); // 0xc2

    if (!bResult)
 8002a3a:	183b      	adds	r3, r7, r0
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	4053      	eors	r3, r2
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d008      	beq.n	8002a5a <setCountdownTimer+0x166>
    {
        printf(errorMsg, __LINE__);
 8002a48:	23db      	movs	r3, #219	@ 0xdb
 8002a4a:	005a      	lsls	r2, r3, #1
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	0011      	movs	r1, r2
 8002a50:	0018      	movs	r0, r3
 8002a52:	f002 fe0f 	bl	8005674 <printf_>
        return false;
 8002a56:	2300      	movs	r3, #0
 8002a58:	e000      	b.n	8002a5c <setCountdownTimer+0x168>
    }

    return true;
 8002a5a:	2301      	movs	r3, #1
}
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	b004      	add	sp, #16
 8002a62:	bdb0      	pop	{r4, r5, r7, pc}
 8002a64:	0800fac4 	.word	0x0800fac4

08002a68 <maskRegister>:

bool maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock)
{
 8002a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	0005      	movs	r5, r0
 8002a70:	000c      	movs	r4, r1
 8002a72:	0010      	movs	r0, r2
 8002a74:	0019      	movs	r1, r3
 8002a76:	1dfb      	adds	r3, r7, #7
 8002a78:	1c2a      	adds	r2, r5, #0
 8002a7a:	701a      	strb	r2, [r3, #0]
 8002a7c:	1dbb      	adds	r3, r7, #6
 8002a7e:	1c22      	adds	r2, r4, #0
 8002a80:	701a      	strb	r2, [r3, #0]
 8002a82:	1d7b      	adds	r3, r7, #5
 8002a84:	1c02      	adds	r2, r0, #0
 8002a86:	701a      	strb	r2, [r3, #0]
 8002a88:	1d3b      	adds	r3, r7, #4
 8002a8a:	1c0a      	adds	r2, r1, #0
 8002a8c:	701a      	strb	r2, [r3, #0]
    bool bResult = false;
 8002a8e:	250f      	movs	r5, #15
 8002a90:	197b      	adds	r3, r7, r5
 8002a92:	2200      	movs	r2, #0
 8002a94:	701a      	strb	r2, [r3, #0]

    uint8_t value;

    value = read_rtc_register(regAddr);
 8002a96:	260e      	movs	r6, #14
 8002a98:	19bc      	adds	r4, r7, r6
 8002a9a:	1dfb      	adds	r3, r7, #7
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f000 f97e 	bl	8002da0 <read_rtc_register>
 8002aa4:	0003      	movs	r3, r0
 8002aa6:	7023      	strb	r3, [r4, #0]

    uint8_t newValue = (value & andValue) | orValue;
 8002aa8:	19bb      	adds	r3, r7, r6
 8002aaa:	1dba      	adds	r2, r7, #6
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	7812      	ldrb	r2, [r2, #0]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	b2d9      	uxtb	r1, r3
 8002ab4:	200d      	movs	r0, #13
 8002ab6:	183b      	adds	r3, r7, r0
 8002ab8:	1d7a      	adds	r2, r7, #5
 8002aba:	7812      	ldrb	r2, [r2, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	701a      	strb	r2, [r3, #0]

    bResult = write_rtc_register(regAddr, newValue);
 8002ac0:	183b      	adds	r3, r7, r0
 8002ac2:	781a      	ldrb	r2, [r3, #0]
 8002ac4:	1dfb      	adds	r3, r7, #7
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	0011      	movs	r1, r2
 8002aca:	0018      	movs	r0, r3
 8002acc:	f000 f99a 	bl	8002e04 <write_rtc_register>
 8002ad0:	0003      	movs	r3, r0
 8002ad2:	001a      	movs	r2, r3
 8002ad4:	197b      	adds	r3, r7, r5
 8002ad6:	1e51      	subs	r1, r2, #1
 8002ad8:	418a      	sbcs	r2, r1
 8002ada:	701a      	strb	r2, [r3, #0]

    return bResult;
 8002adc:	197b      	adds	r3, r7, r5
 8002ade:	781b      	ldrb	r3, [r3, #0]
}
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b005      	add	sp, #20
 8002ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ae8 <clearRegisterBit>:

    return bResult && ((value & bitMask) != 0);
}

bool clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock)
{
 8002ae8:	b590      	push	{r4, r7, lr}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	0004      	movs	r4, r0
 8002af0:	0008      	movs	r0, r1
 8002af2:	0011      	movs	r1, r2
 8002af4:	1dfb      	adds	r3, r7, #7
 8002af6:	1c22      	adds	r2, r4, #0
 8002af8:	701a      	strb	r2, [r3, #0]
 8002afa:	1dbb      	adds	r3, r7, #6
 8002afc:	1c02      	adds	r2, r0, #0
 8002afe:	701a      	strb	r2, [r3, #0]
 8002b00:	1d7b      	adds	r3, r7, #5
 8002b02:	1c0a      	adds	r2, r1, #0
 8002b04:	701a      	strb	r2, [r3, #0]
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
 8002b06:	1dbb      	adds	r3, r7, #6
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	b2d9      	uxtb	r1, r3
 8002b0e:	1d7b      	adds	r3, r7, #5
 8002b10:	781a      	ldrb	r2, [r3, #0]
 8002b12:	1dfb      	adds	r3, r7, #7
 8002b14:	7818      	ldrb	r0, [r3, #0]
 8002b16:	0013      	movs	r3, r2
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f7ff ffa5 	bl	8002a68 <maskRegister>
 8002b1e:	0003      	movs	r3, r0
}
 8002b20:	0018      	movs	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b003      	add	sp, #12
 8002b26:	bd90      	pop	{r4, r7, pc}

08002b28 <setRegisterBit>:

bool setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock)
{
 8002b28:	b590      	push	{r4, r7, lr}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	0004      	movs	r4, r0
 8002b30:	0008      	movs	r0, r1
 8002b32:	0011      	movs	r1, r2
 8002b34:	1dfb      	adds	r3, r7, #7
 8002b36:	1c22      	adds	r2, r4, #0
 8002b38:	701a      	strb	r2, [r3, #0]
 8002b3a:	1dbb      	adds	r3, r7, #6
 8002b3c:	1c02      	adds	r2, r0, #0
 8002b3e:	701a      	strb	r2, [r3, #0]
 8002b40:	1d7b      	adds	r3, r7, #5
 8002b42:	1c0a      	adds	r2, r1, #0
 8002b44:	701a      	strb	r2, [r3, #0]
    return maskRegister(regAddr, 0xff, bitMask, lock);
 8002b46:	1d7b      	adds	r3, r7, #5
 8002b48:	7819      	ldrb	r1, [r3, #0]
 8002b4a:	1dbb      	adds	r3, r7, #6
 8002b4c:	781a      	ldrb	r2, [r3, #0]
 8002b4e:	1dfb      	adds	r3, r7, #7
 8002b50:	7818      	ldrb	r0, [r3, #0]
 8002b52:	000b      	movs	r3, r1
 8002b54:	21ff      	movs	r1, #255	@ 0xff
 8002b56:	f7ff ff87 	bl	8002a68 <maskRegister>
 8002b5a:	0003      	movs	r3, r0
}
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	b003      	add	sp, #12
 8002b62:	bd90      	pop	{r4, r7, pc}

08002b64 <readRam>:
    }
    return bResult;
}

bool readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock)
{
 8002b64:	b5b0      	push	{r4, r5, r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	001a      	movs	r2, r3
 8002b72:	1cfb      	adds	r3, r7, #3
 8002b74:	701a      	strb	r2, [r3, #0]
    bool bResult = true;
 8002b76:	231f      	movs	r3, #31
 8002b78:	18fb      	adds	r3, r7, r3
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	701a      	strb	r2, [r3, #0]

    uint32_t primask_bit = utils_enter_critical_section();
 8002b7e:	f000 f97d 	bl	8002e7c <utils_enter_critical_section>
 8002b82:	0003      	movs	r3, r0
 8002b84:	617b      	str	r3, [r7, #20]

    while (dataLen > 0)
 8002b86:	e047      	b.n	8002c18 <readRam+0xb4>
    {
        size_t count = dataLen;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	61bb      	str	r3, [r7, #24]
        if (count > 32)
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	2b20      	cmp	r3, #32
 8002b90:	d901      	bls.n	8002b96 <readRam+0x32>
        {
            // Too large for a single I2C operation
            count = 32;
 8002b92:	2320      	movs	r3, #32
 8002b94:	61bb      	str	r3, [r7, #24]
        }
        if ((ramAddr < 128) && ((ramAddr + count) > 128))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b9a:	d808      	bhi.n	8002bae <readRam+0x4a>
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	18d3      	adds	r3, r2, r3
 8002ba2:	2b80      	cmp	r3, #128	@ 0x80
 8002ba4:	d903      	bls.n	8002bae <readRam+0x4a>
        {
            // Crossing a page boundary
            count = 128 - ramAddr;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2280      	movs	r2, #128	@ 0x80
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	61bb      	str	r3, [r7, #24]
        }
        if (ramAddr < 128)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2b7f      	cmp	r3, #127	@ 0x7f
 8002bb2:	d806      	bhi.n	8002bc2 <readRam+0x5e>
        {
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA, 0);
 8002bb4:	233f      	movs	r3, #63	@ 0x3f
 8002bb6:	2104      	movs	r1, #4
 8002bb8:	2200      	movs	r2, #0
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f7ff ff94 	bl	8002ae8 <clearRegisterBit>
 8002bc0:	e005      	b.n	8002bce <readRam+0x6a>
        }
        else
        {
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA, 0);
 8002bc2:	233f      	movs	r3, #63	@ 0x3f
 8002bc4:	2104      	movs	r1, #4
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f7ff ffad 	bl	8002b28 <setRegisterBit>
        }

        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count); // !!!!!!!!!
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	227f      	movs	r2, #127	@ 0x7f
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2280      	movs	r2, #128	@ 0x80
 8002bda:	189b      	adds	r3, r3, r2
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	251f      	movs	r5, #31
 8002be4:	197c      	adds	r4, r7, r5
 8002be6:	68b9      	ldr	r1, [r7, #8]
 8002be8:	0018      	movs	r0, r3
 8002bea:	f000 f965 	bl	8002eb8 <readRegisters>
 8002bee:	0003      	movs	r3, r0
 8002bf0:	7023      	strb	r3, [r4, #0]
        if (!bResult)
 8002bf2:	197b      	adds	r3, r7, r5
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	4053      	eors	r3, r2
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10f      	bne.n	8002c20 <readRam+0xbc>
        {
            break;
        }
        ramAddr += count;
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	18d3      	adds	r3, r2, r3
 8002c06:	60fb      	str	r3, [r7, #12]
        dataLen -= count;
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	607b      	str	r3, [r7, #4]
        data += count;
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	18d3      	adds	r3, r2, r3
 8002c16:	60bb      	str	r3, [r7, #8]
    while (dataLen > 0)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1b4      	bne.n	8002b88 <readRam+0x24>
 8002c1e:	e000      	b.n	8002c22 <readRam+0xbe>
            break;
 8002c20:	46c0      	nop			@ (mov r8, r8)
    }

    utils_exit_critical_section(primask_bit);
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	0018      	movs	r0, r3
 8002c26:	f000 f938 	bl	8002e9a <utils_exit_critical_section>

    return bResult;
 8002c2a:	231f      	movs	r3, #31
 8002c2c:	18fb      	adds	r3, r7, r3
 8002c2e:	781b      	ldrb	r3, [r3, #0]
}
 8002c30:	0018      	movs	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	b008      	add	sp, #32
 8002c36:	bdb0      	pop	{r4, r5, r7, pc}

08002c38 <writeRam>:
 * @param data The buffer containing the data to write
 * @param dataLen The number of bytes to write
 * The dataLen can be larger than the maximum I2C write. Multiple writes will be done if necessary.
 */
bool writeRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) // The initial values of the RAM locations are undefined.
{
 8002c38:	b5b0      	push	{r4, r5, r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
 8002c44:	001a      	movs	r2, r3
 8002c46:	1cfb      	adds	r3, r7, #3
 8002c48:	701a      	strb	r2, [r3, #0]
    bool bResult = true;
 8002c4a:	2317      	movs	r3, #23
 8002c4c:	18fb      	adds	r3, r7, r3
 8002c4e:	2201      	movs	r2, #1
 8002c50:	701a      	strb	r2, [r3, #0]

    while (dataLen > 0)
 8002c52:	e047      	b.n	8002ce4 <writeRam+0xac>
    {
        size_t count = dataLen;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	613b      	str	r3, [r7, #16]
        if (count > 31)
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	2b1f      	cmp	r3, #31
 8002c5c:	d901      	bls.n	8002c62 <writeRam+0x2a>
        {
            // Too large for a single I2C operation
            count = 31;
 8002c5e:	231f      	movs	r3, #31
 8002c60:	613b      	str	r3, [r7, #16]
        }
        if ((ramAddr < 128) && ((ramAddr + count) > 128))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c66:	d808      	bhi.n	8002c7a <writeRam+0x42>
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	18d3      	adds	r3, r2, r3
 8002c6e:	2b80      	cmp	r3, #128	@ 0x80
 8002c70:	d903      	bls.n	8002c7a <writeRam+0x42>
        {
            // Crossing a page boundary
            count = 128 - ramAddr;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2280      	movs	r2, #128	@ 0x80
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	613b      	str	r3, [r7, #16]
        }
        if (ramAddr < 128)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c7e:	d806      	bhi.n	8002c8e <writeRam+0x56>
        {
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA, 0);
 8002c80:	233f      	movs	r3, #63	@ 0x3f
 8002c82:	2104      	movs	r1, #4
 8002c84:	2200      	movs	r2, #0
 8002c86:	0018      	movs	r0, r3
 8002c88:	f7ff ff2e 	bl	8002ae8 <clearRegisterBit>
 8002c8c:	e005      	b.n	8002c9a <writeRam+0x62>
        }
        else
        {
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA, 0);
 8002c8e:	233f      	movs	r3, #63	@ 0x3f
 8002c90:	2104      	movs	r1, #4
 8002c92:	2200      	movs	r2, #0
 8002c94:	0018      	movs	r0, r3
 8002c96:	f7ff ff47 	bl	8002b28 <setRegisterBit>
        }

        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	227f      	movs	r2, #127	@ 0x7f
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2280      	movs	r2, #128	@ 0x80
 8002ca6:	189b      	adds	r3, r3, r2
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	2517      	movs	r5, #23
 8002cb0:	197c      	adds	r4, r7, r5
 8002cb2:	68b9      	ldr	r1, [r7, #8]
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f000 f949 	bl	8002f4c <writeRegisters>
 8002cba:	0003      	movs	r3, r0
 8002cbc:	7023      	strb	r3, [r4, #0]
        if (!bResult)
 8002cbe:	197b      	adds	r3, r7, r5
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	4053      	eors	r3, r2
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10f      	bne.n	8002cec <writeRam+0xb4>
        {
            break;
        }
        ramAddr += count;
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	18d3      	adds	r3, r2, r3
 8002cd2:	60fb      	str	r3, [r7, #12]
        dataLen -= count;
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	607b      	str	r3, [r7, #4]
        data += count;
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	18d3      	adds	r3, r2, r3
 8002ce2:	60bb      	str	r3, [r7, #8]
    while (dataLen > 0)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1b4      	bne.n	8002c54 <writeRam+0x1c>
 8002cea:	e000      	b.n	8002cee <writeRam+0xb6>
            break;
 8002cec:	46c0      	nop			@ (mov r8, r8)
    }

    return bResult;
 8002cee:	2317      	movs	r3, #23
 8002cf0:	18fb      	adds	r3, r7, r3
 8002cf2:	781b      	ldrb	r3, [r3, #0]
}
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b006      	add	sp, #24
 8002cfa:	bdb0      	pop	{r4, r5, r7, pc}

08002cfc <SPI1_SendByte>:
{
    return wakeReason;
};

inline static uint8_t SPI1_SendByte(uint8_t data)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	0002      	movs	r2, r0
 8002d04:	1dfb      	adds	r3, r7, #7
 8002d06:	701a      	strb	r2, [r3, #0]
    uint32_t start_time = HAL_GetTick();
 8002d08:	f003 f876 	bl	8005df8 <HAL_GetTick>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	60fb      	str	r3, [r7, #12]
    while (LL_SPI_IsActiveFlag_TXE(SPI1) == RESET)
 8002d10:	e00e      	b.n	8002d30 <SPI1_SendByte+0x34>
    {
        if ((HAL_GetTick() - start_time) > 1000)
 8002d12:	f003 f871 	bl	8005df8 <HAL_GetTick>
 8002d16:	0002      	movs	r2, r0
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	1ad2      	subs	r2, r2, r3
 8002d1c:	23fa      	movs	r3, #250	@ 0xfa
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d905      	bls.n	8002d30 <SPI1_SendByte+0x34>
        {
            print_error(__func__, __LINE__);
 8002d24:	4a1a      	ldr	r2, [pc, #104]	@ (8002d90 <SPI1_SendByte+0x94>)
 8002d26:	4b1b      	ldr	r3, [pc, #108]	@ (8002d94 <SPI1_SendByte+0x98>)
 8002d28:	0011      	movs	r1, r2
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f001 f816 	bl	8003d5c <print_error>
    while (LL_SPI_IsActiveFlag_TXE(SPI1) == RESET)
 8002d30:	4b19      	ldr	r3, [pc, #100]	@ (8002d98 <SPI1_SendByte+0x9c>)
 8002d32:	0018      	movs	r0, r3
 8002d34:	f7ff fbb9 	bl	80024aa <LL_SPI_IsActiveFlag_TXE>
 8002d38:	1e03      	subs	r3, r0, #0
 8002d3a:	d0ea      	beq.n	8002d12 <SPI1_SendByte+0x16>
        }
    }

    LL_SPI_TransmitData8(SPI1, data);
 8002d3c:	1dfb      	adds	r3, r7, #7
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	4a15      	ldr	r2, [pc, #84]	@ (8002d98 <SPI1_SendByte+0x9c>)
 8002d42:	0019      	movs	r1, r3
 8002d44:	0010      	movs	r0, r2
 8002d46:	f7ff fbcd 	bl	80024e4 <LL_SPI_TransmitData8>

    start_time = HAL_GetTick();
 8002d4a:	f003 f855 	bl	8005df8 <HAL_GetTick>
 8002d4e:	0003      	movs	r3, r0
 8002d50:	60fb      	str	r3, [r7, #12]
    while (LL_SPI_IsActiveFlag_RXNE(SPI1) == RESET)
 8002d52:	e00e      	b.n	8002d72 <SPI1_SendByte+0x76>
    {
        if ((HAL_GetTick() - start_time) > 1000)
 8002d54:	f003 f850 	bl	8005df8 <HAL_GetTick>
 8002d58:	0002      	movs	r2, r0
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	1ad2      	subs	r2, r2, r3
 8002d5e:	23fa      	movs	r3, #250	@ 0xfa
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d905      	bls.n	8002d72 <SPI1_SendByte+0x76>
        {
            print_error(__func__, __LINE__);
 8002d66:	4a0d      	ldr	r2, [pc, #52]	@ (8002d9c <SPI1_SendByte+0xa0>)
 8002d68:	4b0a      	ldr	r3, [pc, #40]	@ (8002d94 <SPI1_SendByte+0x98>)
 8002d6a:	0011      	movs	r1, r2
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f000 fff5 	bl	8003d5c <print_error>
    while (LL_SPI_IsActiveFlag_RXNE(SPI1) == RESET)
 8002d72:	4b09      	ldr	r3, [pc, #36]	@ (8002d98 <SPI1_SendByte+0x9c>)
 8002d74:	0018      	movs	r0, r3
 8002d76:	f7ff fb87 	bl	8002488 <LL_SPI_IsActiveFlag_RXNE>
 8002d7a:	1e03      	subs	r3, r0, #0
 8002d7c:	d0ea      	beq.n	8002d54 <SPI1_SendByte+0x58>
        }
    }

    return LL_SPI_ReceiveData8(SPI1);
 8002d7e:	4b06      	ldr	r3, [pc, #24]	@ (8002d98 <SPI1_SendByte+0x9c>)
 8002d80:	0018      	movs	r0, r3
 8002d82:	f7ff fba3 	bl	80024cc <LL_SPI_ReceiveData8>
 8002d86:	0003      	movs	r3, r0
}
 8002d88:	0018      	movs	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b004      	add	sp, #16
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	0000027a 	.word	0x0000027a
 8002d94:	0800fe24 	.word	0x0800fe24
 8002d98:	40013000 	.word	0x40013000
 8002d9c:	00000285 	.word	0x00000285

08002da0 <read_rtc_register>:

inline static uint8_t read_rtc_register(uint8_t reg_addr)
{
 8002da0:	b5b0      	push	{r4, r5, r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	0002      	movs	r2, r0
 8002da8:	1dfb      	adds	r3, r7, #7
 8002daa:	701a      	strb	r2, [r3, #0]
    uint8_t val;
    uint32_t primask_bit = utils_enter_critical_section();
 8002dac:	f000 f866 	bl	8002e7c <utils_enter_critical_section>
 8002db0:	0003      	movs	r3, r0
 8002db2:	60fb      	str	r3, [r7, #12]

    // #define AB1815_SPI_READ(offset) (127 & offset)		127 - 0x7F
    // #define AB1815_SPI_WRITE(offset) (128 | offset)  	128 - 0x80
    uint8_t addr = AB1815_SPI_READ(reg_addr);
 8002db4:	200b      	movs	r0, #11
 8002db6:	183b      	adds	r3, r7, r0
 8002db8:	1dfa      	adds	r2, r7, #7
 8002dba:	7812      	ldrb	r2, [r2, #0]
 8002dbc:	217f      	movs	r1, #127	@ 0x7f
 8002dbe:	400a      	ands	r2, r1
 8002dc0:	701a      	strb	r2, [r3, #0]
    RTC_L();
 8002dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8002e00 <read_rtc_register+0x60>)
 8002dc4:	2280      	movs	r2, #128	@ 0x80
 8002dc6:	05d2      	lsls	r2, r2, #23
 8002dc8:	619a      	str	r2, [r3, #24]
    SPI1_SendByte(addr);
 8002dca:	183b      	adds	r3, r7, r0
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f7ff ff94 	bl	8002cfc <SPI1_SendByte>
    val = SPI1_SendByte(0x00); // Send DUMMY to read data
 8002dd4:	250a      	movs	r5, #10
 8002dd6:	197c      	adds	r4, r7, r5
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f7ff ff8f 	bl	8002cfc <SPI1_SendByte>
 8002dde:	0003      	movs	r3, r0
 8002de0:	7023      	strb	r3, [r4, #0]
    RTC_H();
 8002de2:	4b07      	ldr	r3, [pc, #28]	@ (8002e00 <read_rtc_register+0x60>)
 8002de4:	2280      	movs	r2, #128	@ 0x80
 8002de6:	01d2      	lsls	r2, r2, #7
 8002de8:	619a      	str	r2, [r3, #24]
    utils_exit_critical_section(primask_bit);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	0018      	movs	r0, r3
 8002dee:	f000 f854 	bl	8002e9a <utils_exit_critical_section>

    return val;
 8002df2:	197b      	adds	r3, r7, r5
 8002df4:	781b      	ldrb	r3, [r3, #0]
}
 8002df6:	0018      	movs	r0, r3
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	b004      	add	sp, #16
 8002dfc:	bdb0      	pop	{r4, r5, r7, pc}
 8002dfe:	46c0      	nop			@ (mov r8, r8)
 8002e00:	50000400 	.word	0x50000400

08002e04 <write_rtc_register>:

inline static uint8_t write_rtc_register(uint8_t offset, uint8_t buf)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	0002      	movs	r2, r0
 8002e0c:	1dfb      	adds	r3, r7, #7
 8002e0e:	701a      	strb	r2, [r3, #0]
 8002e10:	1dbb      	adds	r3, r7, #6
 8002e12:	1c0a      	adds	r2, r1, #0
 8002e14:	701a      	strb	r2, [r3, #0]
    // uint8_t address = AB1815_SPI_WRITE(offset);
    uint8_t address = offset | 0x80;
 8002e16:	230f      	movs	r3, #15
 8002e18:	18fb      	adds	r3, r7, r3
 8002e1a:	1dfa      	adds	r2, r7, #7
 8002e1c:	7812      	ldrb	r2, [r2, #0]
 8002e1e:	2180      	movs	r1, #128	@ 0x80
 8002e20:	4249      	negs	r1, r1
 8002e22:	430a      	orrs	r2, r1
 8002e24:	701a      	strb	r2, [r3, #0]
    uint32_t primask_bit = utils_enter_critical_section();
 8002e26:	f000 f829 	bl	8002e7c <utils_enter_critical_section>
 8002e2a:	0003      	movs	r3, r0
 8002e2c:	60bb      	str	r3, [r7, #8]

    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 8002e2e:	4b12      	ldr	r3, [pc, #72]	@ (8002e78 <write_rtc_register+0x74>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2240      	movs	r2, #64	@ 0x40
 8002e34:	4013      	ands	r3, r2
 8002e36:	d105      	bne.n	8002e44 <write_rtc_register+0x40>
    {
        SPI1->CR1 |= SPI_CR1_SPE;
 8002e38:	4b0f      	ldr	r3, [pc, #60]	@ (8002e78 <write_rtc_register+0x74>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002e78 <write_rtc_register+0x74>)
 8002e3e:	2140      	movs	r1, #64	@ 0x40
 8002e40:	430a      	orrs	r2, r1
 8002e42:	601a      	str	r2, [r3, #0]
    }
    spi_select_slave(0);
 8002e44:	2000      	movs	r0, #0
 8002e46:	f7ff fb5f 	bl	8002508 <spi_select_slave>
    SPI1_SendByte(address);
 8002e4a:	230f      	movs	r3, #15
 8002e4c:	18fb      	adds	r3, r7, r3
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	0018      	movs	r0, r3
 8002e52:	f7ff ff53 	bl	8002cfc <SPI1_SendByte>
    SPI1_SendByte(buf); // Send Data to write
 8002e56:	1dbb      	adds	r3, r7, #6
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f7ff ff4e 	bl	8002cfc <SPI1_SendByte>

    spi_select_slave(1);
 8002e60:	2001      	movs	r0, #1
 8002e62:	f7ff fb51 	bl	8002508 <spi_select_slave>
    utils_exit_critical_section(primask_bit);
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f000 f816 	bl	8002e9a <utils_exit_critical_section>
    return 1;
 8002e6e:	2301      	movs	r3, #1
};
 8002e70:	0018      	movs	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b004      	add	sp, #16
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40013000 	.word	0x40013000

08002e7c <utils_enter_critical_section>:
		printf("# 0x%02x: 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x\r\n", pos, buffer[0], buffer[1], buffer[2], buffer[3], buffer[4], buffer[5], buffer[6], buffer[7]);
	}
}

static inline uint32_t utils_enter_critical_section(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e82:	f3ef 8310 	mrs	r3, PRIMASK
 8002e86:	603b      	str	r3, [r7, #0]
  return(result);
 8002e88:	683b      	ldr	r3, [r7, #0]
    uint32_t primask_bit = __get_PRIMASK();
 8002e8a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e8c:	b672      	cpsid	i
}
 8002e8e:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();
    return primask_bit;
 8002e90:	687b      	ldr	r3, [r7, #4]
}
 8002e92:	0018      	movs	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	b002      	add	sp, #8
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <utils_exit_critical_section>:

static inline void utils_exit_critical_section(uint32_t primask_bit)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b084      	sub	sp, #16
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f383 8810 	msr	PRIMASK, r3
}
 8002eac:	46c0      	nop			@ (mov r8, r8)
    __set_PRIMASK(primask_bit);
}
 8002eae:	46c0      	nop			@ (mov r8, r8)
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	b004      	add	sp, #16
 8002eb4:	bd80      	pop	{r7, pc}
	...

08002eb8 <readRegisters>:
};

// #########################################################################

bool readRegisters(uint8_t offset, uint8_t *buf, uint8_t length)
{
 8002eb8:	b590      	push	{r4, r7, lr}
 8002eba:	b087      	sub	sp, #28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6039      	str	r1, [r7, #0]
 8002ec0:	0011      	movs	r1, r2
 8002ec2:	1dfb      	adds	r3, r7, #7
 8002ec4:	1c02      	adds	r2, r0, #0
 8002ec6:	701a      	strb	r2, [r3, #0]
 8002ec8:	1dbb      	adds	r3, r7, #6
 8002eca:	1c0a      	adds	r2, r1, #0
 8002ecc:	701a      	strb	r2, [r3, #0]
    uint8_t address = AB1815_SPI_READ(offset);
 8002ece:	2313      	movs	r3, #19
 8002ed0:	18fb      	adds	r3, r7, r3
 8002ed2:	1dfa      	adds	r2, r7, #7
 8002ed4:	7812      	ldrb	r2, [r2, #0]
 8002ed6:	217f      	movs	r1, #127	@ 0x7f
 8002ed8:	400a      	ands	r2, r1
 8002eda:	701a      	strb	r2, [r3, #0]
    uint32_t primask_bit = utils_enter_critical_section();
 8002edc:	f7ff ffce 	bl	8002e7c <utils_enter_critical_section>
 8002ee0:	0003      	movs	r3, r0
 8002ee2:	60fb      	str	r3, [r7, #12]
    spi_select_slave(0);
 8002ee4:	2000      	movs	r0, #0
 8002ee6:	f7ff fb0f 	bl	8002508 <spi_select_slave>

    unsigned int i = 0;
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 8002eee:	4b16      	ldr	r3, [pc, #88]	@ (8002f48 <readRegisters+0x90>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2240      	movs	r2, #64	@ 0x40
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d105      	bne.n	8002f04 <readRegisters+0x4c>
    {
        SPI1->CR1 |= SPI_CR1_SPE;
 8002ef8:	4b13      	ldr	r3, [pc, #76]	@ (8002f48 <readRegisters+0x90>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	4b12      	ldr	r3, [pc, #72]	@ (8002f48 <readRegisters+0x90>)
 8002efe:	2140      	movs	r1, #64	@ 0x40
 8002f00:	430a      	orrs	r2, r1
 8002f02:	601a      	str	r2, [r3, #0]
    }

    SPI1_SendByte(address);
 8002f04:	2313      	movs	r3, #19
 8002f06:	18fb      	adds	r3, r7, r3
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f7ff fef6 	bl	8002cfc <SPI1_SendByte>
    while (i < length)
 8002f10:	e009      	b.n	8002f26 <readRegisters+0x6e>
    {
        buf[i++] = SPI1_SendByte(0x00); // Send DUMMY to read data
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	617a      	str	r2, [r7, #20]
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	18d4      	adds	r4, r2, r3
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	f7ff feed 	bl	8002cfc <SPI1_SendByte>
 8002f22:	0003      	movs	r3, r0
 8002f24:	7023      	strb	r3, [r4, #0]
    while (i < length)
 8002f26:	1dbb      	adds	r3, r7, #6
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d3f0      	bcc.n	8002f12 <readRegisters+0x5a>
    }

    spi_select_slave(1);
 8002f30:	2001      	movs	r0, #1
 8002f32:	f7ff fae9 	bl	8002508 <spi_select_slave>
    utils_exit_critical_section(primask_bit);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	0018      	movs	r0, r3
 8002f3a:	f7ff ffae 	bl	8002e9a <utils_exit_critical_section>
    return true;
 8002f3e:	2301      	movs	r3, #1
};
 8002f40:	0018      	movs	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b007      	add	sp, #28
 8002f46:	bd90      	pop	{r4, r7, pc}
 8002f48:	40013000 	.word	0x40013000

08002f4c <writeRegisters>:

// ##########################################################################
bool writeRegisters(uint8_t offset, uint8_t *buf, uint8_t length)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6039      	str	r1, [r7, #0]
 8002f54:	0011      	movs	r1, r2
 8002f56:	1dfb      	adds	r3, r7, #7
 8002f58:	1c02      	adds	r2, r0, #0
 8002f5a:	701a      	strb	r2, [r3, #0]
 8002f5c:	1dbb      	adds	r3, r7, #6
 8002f5e:	1c0a      	adds	r2, r1, #0
 8002f60:	701a      	strb	r2, [r3, #0]
    uint8_t address = AB1815_SPI_WRITE(offset);
 8002f62:	230e      	movs	r3, #14
 8002f64:	18fb      	adds	r3, r7, r3
 8002f66:	1dfa      	adds	r2, r7, #7
 8002f68:	7812      	ldrb	r2, [r2, #0]
 8002f6a:	2180      	movs	r1, #128	@ 0x80
 8002f6c:	4249      	negs	r1, r1
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	701a      	strb	r2, [r3, #0]

    uint32_t primask_bit = utils_enter_critical_section();
 8002f72:	f7ff ff83 	bl	8002e7c <utils_enter_critical_section>
 8002f76:	0003      	movs	r3, r0
 8002f78:	60bb      	str	r3, [r7, #8]
    spi_select_slave(0);
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	f7ff fac4 	bl	8002508 <spi_select_slave>

    uint8_t i = 0;
 8002f80:	230f      	movs	r3, #15
 8002f82:	18fb      	adds	r3, r7, r3
 8002f84:	2200      	movs	r2, #0
 8002f86:	701a      	strb	r2, [r3, #0]
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 8002f88:	4b18      	ldr	r3, [pc, #96]	@ (8002fec <writeRegisters+0xa0>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2240      	movs	r2, #64	@ 0x40
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d105      	bne.n	8002f9e <writeRegisters+0x52>
    {
        SPI1->CR1 |= SPI_CR1_SPE;
 8002f92:	4b16      	ldr	r3, [pc, #88]	@ (8002fec <writeRegisters+0xa0>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	4b15      	ldr	r3, [pc, #84]	@ (8002fec <writeRegisters+0xa0>)
 8002f98:	2140      	movs	r1, #64	@ 0x40
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	601a      	str	r2, [r3, #0]
    }

    SPI1_SendByte(address);
 8002f9e:	230e      	movs	r3, #14
 8002fa0:	18fb      	adds	r3, r7, r3
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f7ff fea9 	bl	8002cfc <SPI1_SendByte>
    while (i < length)
 8002faa:	e00c      	b.n	8002fc6 <writeRegisters+0x7a>
    {
        SPI1_SendByte(buf[i++]); // Send Data to write
 8002fac:	220f      	movs	r2, #15
 8002fae:	18bb      	adds	r3, r7, r2
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	18ba      	adds	r2, r7, r2
 8002fb4:	1c59      	adds	r1, r3, #1
 8002fb6:	7011      	strb	r1, [r2, #0]
 8002fb8:	001a      	movs	r2, r3
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	189b      	adds	r3, r3, r2
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	f7ff fe9b 	bl	8002cfc <SPI1_SendByte>
    while (i < length)
 8002fc6:	230f      	movs	r3, #15
 8002fc8:	18fa      	adds	r2, r7, r3
 8002fca:	1dbb      	adds	r3, r7, #6
 8002fcc:	7812      	ldrb	r2, [r2, #0]
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d3eb      	bcc.n	8002fac <writeRegisters+0x60>
    }

    spi_select_slave(1); // set 1
 8002fd4:	2001      	movs	r0, #1
 8002fd6:	f7ff fa97 	bl	8002508 <spi_select_slave>
    utils_exit_critical_section(primask_bit);
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f7ff ff5c 	bl	8002e9a <utils_exit_critical_section>
    return true;
 8002fe2:	2301      	movs	r3, #1
};
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	b004      	add	sp, #16
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40013000 	.word	0x40013000

08002ff0 <read>:
{
    return setWDT(-1);
}

uint8_t read(uint8_t reg)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	0002      	movs	r2, r0
 8002ff8:	1dfb      	adds	r3, r7, #7
 8002ffa:	701a      	strb	r2, [r3, #0]
    return read_rtc_register(reg);
 8002ffc:	1dfb      	adds	r3, r7, #7
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	0018      	movs	r0, r3
 8003002:	f7ff fecd 	bl	8002da0 <read_rtc_register>
 8003006:	0003      	movs	r3, r0
}
 8003008:	0018      	movs	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	b002      	add	sp, #8
 800300e:	bd80      	pop	{r7, pc}

08003010 <write>:

uint8_t write(uint8_t reg, uint8_t value)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	0002      	movs	r2, r0
 8003018:	1dfb      	adds	r3, r7, #7
 800301a:	701a      	strb	r2, [r3, #0]
 800301c:	1dbb      	adds	r3, r7, #6
 800301e:	1c0a      	adds	r2, r1, #0
 8003020:	701a      	strb	r2, [r3, #0]
    return write_rtc_register(reg, value);
 8003022:	1dbb      	adds	r3, r7, #6
 8003024:	781a      	ldrb	r2, [r3, #0]
 8003026:	1dfb      	adds	r3, r7, #7
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	0011      	movs	r1, r2
 800302c:	0018      	movs	r0, r3
 800302e:	f7ff fee9 	bl	8002e04 <write_rtc_register>
 8003032:	0003      	movs	r3, r0
}
 8003034:	0018      	movs	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	b002      	add	sp, #8
 800303a:	bd80      	pop	{r7, pc}

0800303c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	4a05      	ldr	r2, [pc, #20]	@ (8003060 <LL_ADC_EnableInternalRegulator+0x24>)
 800304a:	4013      	ands	r3, r2
 800304c:	2280      	movs	r2, #128	@ 0x80
 800304e:	0552      	lsls	r2, r2, #21
 8003050:	431a      	orrs	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003056:	46c0      	nop			@ (mov r8, r8)
 8003058:	46bd      	mov	sp, r7
 800305a:	b002      	add	sp, #8
 800305c:	bd80      	pop	{r7, pc}
 800305e:	46c0      	nop			@ (mov r8, r8)
 8003060:	6fffffe8 	.word	0x6fffffe8

08003064 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	4a04      	ldr	r2, [pc, #16]	@ (8003084 <LL_ADC_Enable+0x20>)
 8003072:	4013      	ands	r3, r2
 8003074:	2201      	movs	r2, #1
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800307c:	46c0      	nop			@ (mov r8, r8)
 800307e:	46bd      	mov	sp, r7
 8003080:	b002      	add	sp, #8
 8003082:	bd80      	pop	{r7, pc}
 8003084:	7fffffe8 	.word	0x7fffffe8

08003088 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	2201      	movs	r2, #1
 8003096:	4013      	ands	r3, r2
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <LL_ADC_IsEnabled+0x18>
 800309c:	2301      	movs	r3, #1
 800309e:	e000      	b.n	80030a2 <LL_ADC_IsEnabled+0x1a>
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	0018      	movs	r0, r3
 80030a4:	46bd      	mov	sp, r7
 80030a6:	b002      	add	sp, #8
 80030a8:	bd80      	pop	{r7, pc}

080030aa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b082      	sub	sp, #8
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2202      	movs	r2, #2
 80030b8:	4013      	ands	r3, r2
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d101      	bne.n	80030c2 <LL_ADC_IsDisableOngoing+0x18>
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <LL_ADC_IsDisableOngoing+0x1a>
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	0018      	movs	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	b002      	add	sp, #8
 80030ca:	bd80      	pop	{r7, pc}

080030cc <LL_ADC_StartCalibration>:
  * @rmtoll CR       ADCAL          LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	4a05      	ldr	r2, [pc, #20]	@ (80030f0 <LL_ADC_StartCalibration+0x24>)
 80030da:	4013      	ands	r3, r2
 80030dc:	2280      	movs	r2, #128	@ 0x80
 80030de:	0612      	lsls	r2, r2, #24
 80030e0:	431a      	orrs	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL);
}
 80030e6:	46c0      	nop			@ (mov r8, r8)
 80030e8:	46bd      	mov	sp, r7
 80030ea:	b002      	add	sp, #8
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	46c0      	nop			@ (mov r8, r8)
 80030f0:	7fffffe8 	.word	0x7fffffe8

080030f4 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(const ADC_TypeDef *ADCx)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	0fdb      	lsrs	r3, r3, #31
 8003102:	07da      	lsls	r2, r3, #31
 8003104:	2380      	movs	r3, #128	@ 0x80
 8003106:	061b      	lsls	r3, r3, #24
 8003108:	429a      	cmp	r2, r3
 800310a:	d101      	bne.n	8003110 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800310c:	2301      	movs	r3, #1
 800310e:	e000      	b.n	8003112 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8003110:	2300      	movs	r3, #0
}
 8003112:	0018      	movs	r0, r3
 8003114:	46bd      	mov	sp, r7
 8003116:	b002      	add	sp, #8
 8003118:	bd80      	pop	{r7, pc}
	...

0800311c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	4a04      	ldr	r2, [pc, #16]	@ (800313c <LL_ADC_REG_StartConversion+0x20>)
 800312a:	4013      	ands	r3, r2
 800312c:	2204      	movs	r2, #4
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003134:	46c0      	nop			@ (mov r8, r8)
 8003136:	46bd      	mov	sp, r7
 8003138:	b002      	add	sp, #8
 800313a:	bd80      	pop	{r7, pc}
 800313c:	7fffffe8 	.word	0x7fffffe8

08003140 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2204      	movs	r2, #4
 800314e:	4013      	ands	r3, r2
 8003150:	2b04      	cmp	r3, #4
 8003152:	d101      	bne.n	8003158 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003154:	2301      	movs	r3, #1
 8003156:	e000      	b.n	800315a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003158:	2300      	movs	r3, #0
}
 800315a:	0018      	movs	r0, r3
 800315c:	46bd      	mov	sp, r7
 800315e:	b002      	add	sp, #8
 8003160:	bd80      	pop	{r7, pc}

08003162 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       DATA           LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(const ADC_TypeDef *ADCx)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b082      	sub	sp, #8
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA) & 0x00000FFFUL);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316e:	b29b      	uxth	r3, r3
 8003170:	051b      	lsls	r3, r3, #20
 8003172:	0d1b      	lsrs	r3, r3, #20
 8003174:	b29b      	uxth	r3, r3
}
 8003176:	0018      	movs	r0, r3
 8003178:	46bd      	mov	sp, r7
 800317a:	b002      	add	sp, #8
 800317c:	bd80      	pop	{r7, pc}

0800317e <LL_ADC_IsActiveFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(const ADC_TypeDef *ADCx)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b082      	sub	sp, #8
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2201      	movs	r2, #1
 800318c:	4013      	ands	r3, r2
 800318e:	2b01      	cmp	r3, #1
 8003190:	d101      	bne.n	8003196 <LL_ADC_IsActiveFlag_ADRDY+0x18>
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <LL_ADC_IsActiveFlag_ADRDY+0x1a>
 8003196:	2300      	movs	r3, #0
}
 8003198:	0018      	movs	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	b002      	add	sp, #8
 800319e:	bd80      	pop	{r7, pc}

080031a0 <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(const ADC_TypeDef *ADCx)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2204      	movs	r2, #4
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d101      	bne.n	80031b8 <LL_ADC_IsActiveFlag_EOC+0x18>
 80031b4:	2301      	movs	r3, #1
 80031b6:	e000      	b.n	80031ba <LL_ADC_IsActiveFlag_EOC+0x1a>
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	0018      	movs	r0, r3
 80031bc:	46bd      	mov	sp, r7
 80031be:	b002      	add	sp, #8
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b082      	sub	sp, #8
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2204      	movs	r2, #4
 80031ce:	601a      	str	r2, [r3, #0]
}
 80031d0:	46c0      	nop			@ (mov r8, r8)
 80031d2:	46bd      	mov	sp, r7
 80031d4:	b002      	add	sp, #8
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80031de:	1d3b      	adds	r3, r7, #4
 80031e0:	0018      	movs	r0, r3
 80031e2:	230c      	movs	r3, #12
 80031e4:	001a      	movs	r2, r3
 80031e6:	2100      	movs	r1, #0
 80031e8:	f00a fc8c 	bl	800db04 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 80031ec:	4b32      	ldr	r3, [pc, #200]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 80031ee:	4a33      	ldr	r2, [pc, #204]	@ (80032bc <MX_ADC1_Init+0xe4>)
 80031f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80031f2:	4b31      	ldr	r3, [pc, #196]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 80031f4:	22c0      	movs	r2, #192	@ 0xc0
 80031f6:	0612      	lsls	r2, r2, #24
 80031f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80031fa:	4b2f      	ldr	r3, [pc, #188]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003200:	4b2d      	ldr	r3, [pc, #180]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 8003202:	2200      	movs	r2, #0
 8003204:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003206:	4b2c      	ldr	r3, [pc, #176]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 8003208:	2200      	movs	r2, #0
 800320a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800320c:	4b2a      	ldr	r3, [pc, #168]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 800320e:	2204      	movs	r2, #4
 8003210:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003212:	4b29      	ldr	r3, [pc, #164]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 8003214:	2200      	movs	r2, #0
 8003216:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8003218:	4b27      	ldr	r3, [pc, #156]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 800321a:	2200      	movs	r2, #0
 800321c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800321e:	4b26      	ldr	r3, [pc, #152]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 8003220:	2200      	movs	r2, #0
 8003222:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8003224:	4b24      	ldr	r3, [pc, #144]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 8003226:	2201      	movs	r2, #1
 8003228:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800322a:	4b23      	ldr	r3, [pc, #140]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 800322c:	2220      	movs	r2, #32
 800322e:	2100      	movs	r1, #0
 8003230:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003232:	4b21      	ldr	r3, [pc, #132]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 8003234:	2200      	movs	r2, #0
 8003236:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003238:	4b1f      	ldr	r3, [pc, #124]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 800323a:	2200      	movs	r2, #0
 800323c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800323e:	4b1e      	ldr	r3, [pc, #120]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 8003240:	222c      	movs	r2, #44	@ 0x2c
 8003242:	2100      	movs	r1, #0
 8003244:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003246:	4b1c      	ldr	r3, [pc, #112]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 8003248:	2200      	movs	r2, #0
 800324a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_19CYCLES_5;
 800324c:	4b1a      	ldr	r3, [pc, #104]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 800324e:	2204      	movs	r2, #4
 8003250:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 8003252:	4b19      	ldr	r3, [pc, #100]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 8003254:	2206      	movs	r2, #6
 8003256:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = ENABLE;
 8003258:	4b17      	ldr	r3, [pc, #92]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 800325a:	223c      	movs	r2, #60	@ 0x3c
 800325c:	2101      	movs	r1, #1
 800325e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_8;
 8003260:	4b15      	ldr	r3, [pc, #84]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 8003262:	2208      	movs	r2, #8
 8003264:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_3;
 8003266:	4b14      	ldr	r3, [pc, #80]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 8003268:	2260      	movs	r2, #96	@ 0x60
 800326a:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800326c:	4b12      	ldr	r3, [pc, #72]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 800326e:	2200      	movs	r2, #0
 8003270:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003272:	4b11      	ldr	r3, [pc, #68]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 8003274:	2200      	movs	r2, #0
 8003276:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003278:	4b0f      	ldr	r3, [pc, #60]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 800327a:	0018      	movs	r0, r3
 800327c:	f002 fee6 	bl	800604c <HAL_ADC_Init>
 8003280:	1e03      	subs	r3, r0, #0
 8003282:	d001      	beq.n	8003288 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8003284:	f000 fde6 	bl	8003e54 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8003288:	1d3b      	adds	r3, r7, #4
 800328a:	4a0d      	ldr	r2, [pc, #52]	@ (80032c0 <MX_ADC1_Init+0xe8>)
 800328c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800328e:	1d3b      	adds	r3, r7, #4
 8003290:	2200      	movs	r2, #0
 8003292:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003294:	1d3b      	adds	r3, r7, #4
 8003296:	2200      	movs	r2, #0
 8003298:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800329a:	1d3a      	adds	r2, r7, #4
 800329c:	4b06      	ldr	r3, [pc, #24]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 800329e:	0011      	movs	r1, r2
 80032a0:	0018      	movs	r0, r3
 80032a2:	f003 f87b 	bl	800639c <HAL_ADC_ConfigChannel>
 80032a6:	1e03      	subs	r3, r0, #0
 80032a8:	d001      	beq.n	80032ae <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 80032aa:	f000 fdd3 	bl	8003e54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 80032ae:	46c0      	nop			@ (mov r8, r8)
 80032b0:	46bd      	mov	sp, r7
 80032b2:	b004      	add	sp, #16
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	46c0      	nop			@ (mov r8, r8)
 80032b8:	20000364 	.word	0x20000364
 80032bc:	40012400 	.word	0x40012400
 80032c0:	b0001000 	.word	0xb0001000

080032c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{
 80032c4:	b590      	push	{r4, r7, lr}
 80032c6:	b095      	sub	sp, #84	@ 0x54
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032cc:	240c      	movs	r4, #12
 80032ce:	193b      	adds	r3, r7, r4
 80032d0:	0018      	movs	r0, r3
 80032d2:	2344      	movs	r3, #68	@ 0x44
 80032d4:	001a      	movs	r2, r3
 80032d6:	2100      	movs	r1, #0
 80032d8:	f00a fc14 	bl	800db04 <memset>
  if (adcHandle->Instance == ADC1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a11      	ldr	r2, [pc, #68]	@ (8003328 <HAL_ADC_MspInit+0x64>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d11c      	bne.n	8003320 <HAL_ADC_MspInit+0x5c>

    /* USER CODE END ADC1_MspInit 0 */

    /** Initializes the peripherals clocks
     */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80032e6:	193b      	adds	r3, r7, r4
 80032e8:	2280      	movs	r2, #128	@ 0x80
 80032ea:	01d2      	lsls	r2, r2, #7
 80032ec:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80032ee:	193b      	adds	r3, r7, r4
 80032f0:	2200      	movs	r2, #0
 80032f2:	63da      	str	r2, [r3, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032f4:	193b      	adds	r3, r7, r4
 80032f6:	0018      	movs	r0, r3
 80032f8:	f004 fbec 	bl	8007ad4 <HAL_RCCEx_PeriphCLKConfig>
 80032fc:	1e03      	subs	r3, r0, #0
 80032fe:	d001      	beq.n	8003304 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 8003300:	f000 fda8 	bl	8003e54 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003304:	4b09      	ldr	r3, [pc, #36]	@ (800332c <HAL_ADC_MspInit+0x68>)
 8003306:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003308:	4b08      	ldr	r3, [pc, #32]	@ (800332c <HAL_ADC_MspInit+0x68>)
 800330a:	2180      	movs	r1, #128	@ 0x80
 800330c:	0349      	lsls	r1, r1, #13
 800330e:	430a      	orrs	r2, r1
 8003310:	661a      	str	r2, [r3, #96]	@ 0x60
 8003312:	4b06      	ldr	r3, [pc, #24]	@ (800332c <HAL_ADC_MspInit+0x68>)
 8003314:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003316:	2380      	movs	r3, #128	@ 0x80
 8003318:	035b      	lsls	r3, r3, #13
 800331a:	4013      	ands	r3, r2
 800331c:	60bb      	str	r3, [r7, #8]
 800331e:	68bb      	ldr	r3, [r7, #8]
    /* USER CODE BEGIN ADC1_MspInit 1 */

    /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003320:	46c0      	nop			@ (mov r8, r8)
 8003322:	46bd      	mov	sp, r7
 8003324:	b015      	add	sp, #84	@ 0x54
 8003326:	bd90      	pop	{r4, r7, pc}
 8003328:	40012400 	.word	0x40012400
 800332c:	40021000 	.word	0x40021000

08003330 <get_vbat>:
/* USER CODE BEGIN 1 */

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

uint32_t get_vbat(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
  // printf("get_vbat\n");
  uint32_t Vdda;

  if (ubAdcGrpRegularUnitaryConvStatus != 0)
 8003336:	4b15      	ldr	r3, [pc, #84]	@ (800338c <get_vbat+0x5c>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <get_vbat+0x18>
  {
    ubAdcGrpRegularUnitaryConvStatus = 0;
 8003340:	4b12      	ldr	r3, [pc, #72]	@ (800338c <get_vbat+0x5c>)
 8003342:	2200      	movs	r2, #0
 8003344:	701a      	strb	r2, [r3, #0]
 8003346:	e001      	b.n	800334c <get_vbat+0x1c>
  }
  else
  {
    Error_Handler();
 8003348:	f000 fd84 	bl	8003e54 <Error_Handler>
  }

  /* Init variable containing ADC conversion data */
  uhADCxConvertedData = VAR_CONVERTED_DATA_INIT_VALUE; // VAR_CONVERTED_DATA_INIT_VALUE
 800334c:	4b10      	ldr	r3, [pc, #64]	@ (8003390 <get_vbat+0x60>)
 800334e:	2280      	movs	r2, #128	@ 0x80
 8003350:	0152      	lsls	r2, r2, #5
 8003352:	801a      	strh	r2, [r3, #0]

  /* Perform ADC group regular conversion start, poll for conversion        */
  /* completion.                                                            */
  ConversionStartPoll_ADC_GrpRegular();
 8003354:	f000 f874 	bl	8003440 <ConversionStartPoll_ADC_GrpRegular>

  /* Retrieve ADC conversion data */
  /* (data scale corresponds to ADC resolution: 12 bits) */
  uhADCxConvertedData = LL_ADC_REG_ReadConversionData12(ADC1);
 8003358:	4b0e      	ldr	r3, [pc, #56]	@ (8003394 <get_vbat+0x64>)
 800335a:	0018      	movs	r0, r3
 800335c:	f7ff ff01 	bl	8003162 <LL_ADC_REG_ReadConversionData12>
 8003360:	0003      	movs	r3, r0
 8003362:	001a      	movs	r2, r3
 8003364:	4b0a      	ldr	r3, [pc, #40]	@ (8003390 <get_vbat+0x60>)
 8003366:	801a      	strh	r2, [r3, #0]

  /* Update status variable of ADC unitary conversion */
  ubAdcGrpRegularUnitaryConvStatus = 1;
 8003368:	4b08      	ldr	r3, [pc, #32]	@ (800338c <get_vbat+0x5c>)
 800336a:	2201      	movs	r2, #1
 800336c:	701a      	strb	r2, [r3, #0]

  /* Computation of ADC conversions raw data to physical values           */
  /* using LL ADC driver helper macro.                                    */
  // printf("uhADCxConvertedData:  %d\n", uhADCxConvertedData);

  Vdda = 1220 * 4096 / uhADCxConvertedData;
 800336e:	4b08      	ldr	r3, [pc, #32]	@ (8003390 <get_vbat+0x60>)
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	b29b      	uxth	r3, r3
 8003374:	0019      	movs	r1, r3
 8003376:	4808      	ldr	r0, [pc, #32]	@ (8003398 <get_vbat+0x68>)
 8003378:	f7fc ff6c 	bl	8000254 <__divsi3>
 800337c:	0003      	movs	r3, r0
 800337e:	607b      	str	r3, [r7, #4]
  // printf("Vdda = %d\n", Vdda);
  return Vdda;
 8003380:	687b      	ldr	r3, [r7, #4]
}
 8003382:	0018      	movs	r0, r3
 8003384:	46bd      	mov	sp, r7
 8003386:	b002      	add	sp, #8
 8003388:	bd80      	pop	{r7, pc}
 800338a:	46c0      	nop			@ (mov r8, r8)
 800338c:	20000002 	.word	0x20000002
 8003390:	20000000 	.word	0x20000000
 8003394:	40012400 	.word	0x40012400
 8003398:	004c4000 	.word	0x004c4000

0800339c <Activate_ADC>:
 *                 after this function
 * @param  None
 * @retval None
 */
void Activate_ADC(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
  __IO uint32_t wait_loop_index = 0;
 80033a2:	2300      	movs	r3, #0
 80033a4:	607b      	str	r3, [r7, #4]
  /*       implemented anyway to show the best practice usages                */
  /*       corresponding to reference manual procedure.                       */
  /*       Software can be optimized by removing some of these checks, if     */
  /*       they are not relevant considering previous settings and actions    */
  /*       in user application.                                               */
  if (LL_ADC_IsEnabled(ADC1) == 0)
 80033a6:	4b23      	ldr	r3, [pc, #140]	@ (8003434 <Activate_ADC+0x98>)
 80033a8:	0018      	movs	r0, r3
 80033aa:	f7ff fe6d 	bl	8003088 <LL_ADC_IsEnabled>
 80033ae:	1e03      	subs	r3, r0, #0
 80033b0:	d13b      	bne.n	800342a <Activate_ADC+0x8e>
  {
    /* Disable ADC deep power down (enabled by default after reset state) */
    // LL_ADC_DisableDeepPowerDown(ADC1);

    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(ADC1);
 80033b2:	4b20      	ldr	r3, [pc, #128]	@ (8003434 <Activate_ADC+0x98>)
 80033b4:	0018      	movs	r0, r3
 80033b6:	f7ff fe41 	bl	800303c <LL_ADC_EnableInternalRegulator>
    /* Compute number of CPU cycles to wait for, from delay in us.            */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles (depends on compilation optimization).     */
    /* Note: If system core clock frequency is below 200kHz, wait time        */
    /*       is only a few CPU processing cycles.                             */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 80033ba:	4b1f      	ldr	r3, [pc, #124]	@ (8003438 <Activate_ADC+0x9c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	491f      	ldr	r1, [pc, #124]	@ (800343c <Activate_ADC+0xa0>)
 80033c0:	0018      	movs	r0, r3
 80033c2:	f7fc febd 	bl	8000140 <__udivsi3>
 80033c6:	0003      	movs	r3, r0
 80033c8:	001a      	movs	r2, r3
 80033ca:	0013      	movs	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	189b      	adds	r3, r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	210a      	movs	r1, #10
 80033d4:	0018      	movs	r0, r3
 80033d6:	f7fc feb3 	bl	8000140 <__udivsi3>
 80033da:	0003      	movs	r3, r0
 80033dc:	607b      	str	r3, [r7, #4]
    while (wait_loop_index != 0)
 80033de:	e002      	b.n	80033e6 <Activate_ADC+0x4a>
    {
      wait_loop_index--;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3b01      	subs	r3, #1
 80033e4:	607b      	str	r3, [r7, #4]
    while (wait_loop_index != 0)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1f9      	bne.n	80033e0 <Activate_ADC+0x44>
    }

    /* Run ADC self calibration */
    LL_ADC_StartCalibration(ADC1);
 80033ec:	4b11      	ldr	r3, [pc, #68]	@ (8003434 <Activate_ADC+0x98>)
 80033ee:	0018      	movs	r0, r3
 80033f0:	f7ff fe6c 	bl	80030cc <LL_ADC_StartCalibration>
/* Poll for ADC effectively calibrated */
#if (USE_TIMEOUT == 1)
    Timeout = ADC_CALIBRATION_TIMEOUT_MS;
#endif /* USE_TIMEOUT */

    while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0)
 80033f4:	46c0      	nop			@ (mov r8, r8)
 80033f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003434 <Activate_ADC+0x98>)
 80033f8:	0018      	movs	r0, r3
 80033fa:	f7ff fe7b 	bl	80030f4 <LL_ADC_IsCalibrationOnGoing>
 80033fe:	1e03      	subs	r3, r0, #0
 8003400:	d1f9      	bne.n	80033f6 <Activate_ADC+0x5a>
    }

    /* Delay between ADC end of calibration and ADC enable.                   */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles (depends on compilation optimization).     */
    wait_loop_index = (ADC_DELAY_CALIB_ENABLE_CPU_CYCLES >> 1);
 8003402:	2320      	movs	r3, #32
 8003404:	607b      	str	r3, [r7, #4]
    while (wait_loop_index != 0)
 8003406:	e002      	b.n	800340e <Activate_ADC+0x72>
    {
      wait_loop_index--;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3b01      	subs	r3, #1
 800340c:	607b      	str	r3, [r7, #4]
    while (wait_loop_index != 0)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1f9      	bne.n	8003408 <Activate_ADC+0x6c>
    }

    /* Enable ADC */
    LL_ADC_Enable(ADC1);
 8003414:	4b07      	ldr	r3, [pc, #28]	@ (8003434 <Activate_ADC+0x98>)
 8003416:	0018      	movs	r0, r3
 8003418:	f7ff fe24 	bl	8003064 <LL_ADC_Enable>
/* Poll for ADC ready to convert */
#if (USE_TIMEOUT == 1)
    Timeout = ADC_ENABLE_TIMEOUT_MS;
#endif /* USE_TIMEOUT */

    while (LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0)
 800341c:	46c0      	nop			@ (mov r8, r8)
 800341e:	4b05      	ldr	r3, [pc, #20]	@ (8003434 <Activate_ADC+0x98>)
 8003420:	0018      	movs	r0, r3
 8003422:	f7ff feac 	bl	800317e <LL_ADC_IsActiveFlag_ADRDY>
 8003426:	1e03      	subs	r3, r0, #0
 8003428:	d0f9      	beq.n	800341e <Activate_ADC+0x82>
  /*## Operation on ADC hierarchical scope: ADC group injected ###############*/
  /* Note: No operation on ADC group injected performed here.                 */
  /*       ADC group injected conversions to be performed after this function */
  /*       using function:                                                    */
  /*   																		*/
}
 800342a:	46c0      	nop			@ (mov r8, r8)
 800342c:	46bd      	mov	sp, r7
 800342e:	b002      	add	sp, #8
 8003430:	bd80      	pop	{r7, pc}
 8003432:	46c0      	nop			@ (mov r8, r8)
 8003434:	40012400 	.word	0x40012400
 8003438:	20000004 	.word	0x20000004
 800343c:	00030d40 	.word	0x00030d40

08003440 <ConversionStartPoll_ADC_GrpRegular>:
 *         external trigger, ADC group regular conversion stop must be added.
 * @param  None
 * @retval None
 */
void ConversionStartPoll_ADC_GrpRegular(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /*       implemented anyway to show the best practice usages                */
  /*       corresponding to reference manual procedure.                       */
  /*       Software can be optimized by removing some of these checks, if     */
  /*       they are not relevant considering previous settings and actions    */
  /*       in user application.                                               */
  if ((LL_ADC_IsEnabled(ADC1) == 1) &&
 8003444:	4b13      	ldr	r3, [pc, #76]	@ (8003494 <ConversionStartPoll_ADC_GrpRegular+0x54>)
 8003446:	0018      	movs	r0, r3
 8003448:	f7ff fe1e 	bl	8003088 <LL_ADC_IsEnabled>
 800344c:	0003      	movs	r3, r0
 800344e:	2b01      	cmp	r3, #1
 8003450:	d110      	bne.n	8003474 <ConversionStartPoll_ADC_GrpRegular+0x34>
      (LL_ADC_IsDisableOngoing(ADC1) == 0) &&
 8003452:	4b10      	ldr	r3, [pc, #64]	@ (8003494 <ConversionStartPoll_ADC_GrpRegular+0x54>)
 8003454:	0018      	movs	r0, r3
 8003456:	f7ff fe28 	bl	80030aa <LL_ADC_IsDisableOngoing>
 800345a:	1e03      	subs	r3, r0, #0
  if ((LL_ADC_IsEnabled(ADC1) == 1) &&
 800345c:	d10a      	bne.n	8003474 <ConversionStartPoll_ADC_GrpRegular+0x34>
      (LL_ADC_REG_IsConversionOngoing(ADC1) == 0))
 800345e:	4b0d      	ldr	r3, [pc, #52]	@ (8003494 <ConversionStartPoll_ADC_GrpRegular+0x54>)
 8003460:	0018      	movs	r0, r3
 8003462:	f7ff fe6d 	bl	8003140 <LL_ADC_REG_IsConversionOngoing>
 8003466:	1e03      	subs	r3, r0, #0
      (LL_ADC_IsDisableOngoing(ADC1) == 0) &&
 8003468:	d104      	bne.n	8003474 <ConversionStartPoll_ADC_GrpRegular+0x34>
  {
    LL_ADC_REG_StartConversion(ADC1);
 800346a:	4b0a      	ldr	r3, [pc, #40]	@ (8003494 <ConversionStartPoll_ADC_GrpRegular+0x54>)
 800346c:	0018      	movs	r0, r3
 800346e:	f7ff fe55 	bl	800311c <LL_ADC_REG_StartConversion>
 8003472:	e001      	b.n	8003478 <ConversionStartPoll_ADC_GrpRegular+0x38>
  }
  else
  {
    /* Error: ADC conversion start could not be performed */
    Error_Handler();
 8003474:	f000 fcee 	bl	8003e54 <Error_Handler>

#if (USE_TIMEOUT == 1)
  Timeout = ADC_UNITARY_CONVERSION_TIMEOUT_MS;
#endif /* USE_TIMEOUT */

  while (LL_ADC_IsActiveFlag_EOC(ADC1) == 0)
 8003478:	46c0      	nop			@ (mov r8, r8)
 800347a:	4b06      	ldr	r3, [pc, #24]	@ (8003494 <ConversionStartPoll_ADC_GrpRegular+0x54>)
 800347c:	0018      	movs	r0, r3
 800347e:	f7ff fe8f 	bl	80031a0 <LL_ADC_IsActiveFlag_EOC>
 8003482:	1e03      	subs	r3, r0, #0
 8003484:	d0f9      	beq.n	800347a <ConversionStartPoll_ADC_GrpRegular+0x3a>
      }
    }
#endif /* USE_TIMEOUT */
  }

  LL_ADC_ClearFlag_EOC(ADC1);
 8003486:	4b03      	ldr	r3, [pc, #12]	@ (8003494 <ConversionStartPoll_ADC_GrpRegular+0x54>)
 8003488:	0018      	movs	r0, r3
 800348a:	f7ff fe9a 	bl	80031c2 <LL_ADC_ClearFlag_EOC>
}
 800348e:	46c0      	nop			@ (mov r8, r8)
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40012400 	.word	0x40012400

08003498 <MX_GPIO_Init>:
/** Configure pins
     PA13 (SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8003498:	b590      	push	{r4, r7, lr}
 800349a:	b08b      	sub	sp, #44	@ 0x2c
 800349c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800349e:	2414      	movs	r4, #20
 80034a0:	193b      	adds	r3, r7, r4
 80034a2:	0018      	movs	r0, r3
 80034a4:	2314      	movs	r3, #20
 80034a6:	001a      	movs	r2, r3
 80034a8:	2100      	movs	r1, #0
 80034aa:	f00a fb2b 	bl	800db04 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ae:	4b78      	ldr	r3, [pc, #480]	@ (8003690 <MX_GPIO_Init+0x1f8>)
 80034b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034b2:	4b77      	ldr	r3, [pc, #476]	@ (8003690 <MX_GPIO_Init+0x1f8>)
 80034b4:	2104      	movs	r1, #4
 80034b6:	430a      	orrs	r2, r1
 80034b8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80034ba:	4b75      	ldr	r3, [pc, #468]	@ (8003690 <MX_GPIO_Init+0x1f8>)
 80034bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034be:	2204      	movs	r2, #4
 80034c0:	4013      	ands	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80034c6:	4b72      	ldr	r3, [pc, #456]	@ (8003690 <MX_GPIO_Init+0x1f8>)
 80034c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034ca:	4b71      	ldr	r3, [pc, #452]	@ (8003690 <MX_GPIO_Init+0x1f8>)
 80034cc:	2120      	movs	r1, #32
 80034ce:	430a      	orrs	r2, r1
 80034d0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80034d2:	4b6f      	ldr	r3, [pc, #444]	@ (8003690 <MX_GPIO_Init+0x1f8>)
 80034d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034d6:	2220      	movs	r2, #32
 80034d8:	4013      	ands	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034de:	4b6c      	ldr	r3, [pc, #432]	@ (8003690 <MX_GPIO_Init+0x1f8>)
 80034e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034e2:	4b6b      	ldr	r3, [pc, #428]	@ (8003690 <MX_GPIO_Init+0x1f8>)
 80034e4:	2101      	movs	r1, #1
 80034e6:	430a      	orrs	r2, r1
 80034e8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80034ea:	4b69      	ldr	r3, [pc, #420]	@ (8003690 <MX_GPIO_Init+0x1f8>)
 80034ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ee:	2201      	movs	r2, #1
 80034f0:	4013      	ands	r3, r2
 80034f2:	60bb      	str	r3, [r7, #8]
 80034f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034f6:	4b66      	ldr	r3, [pc, #408]	@ (8003690 <MX_GPIO_Init+0x1f8>)
 80034f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034fa:	4b65      	ldr	r3, [pc, #404]	@ (8003690 <MX_GPIO_Init+0x1f8>)
 80034fc:	2102      	movs	r1, #2
 80034fe:	430a      	orrs	r2, r1
 8003500:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003502:	4b63      	ldr	r3, [pc, #396]	@ (8003690 <MX_GPIO_Init+0x1f8>)
 8003504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003506:	2202      	movs	r2, #2
 8003508:	4013      	ands	r3, r2
 800350a:	607b      	str	r3, [r7, #4]
 800350c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|WDI_Pin|PAPER_ON_Pin, GPIO_PIN_RESET);
 800350e:	4961      	ldr	r1, [pc, #388]	@ (8003694 <MX_GPIO_Init+0x1fc>)
 8003510:	4b61      	ldr	r3, [pc, #388]	@ (8003698 <MX_GPIO_Init+0x200>)
 8003512:	2200      	movs	r2, #0
 8003514:	0018      	movs	r0, r3
 8003516:	f003 fad5 	bl	8006ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_RTC_GPIO_Port, CE_RTC_Pin, GPIO_PIN_SET);
 800351a:	2380      	movs	r3, #128	@ 0x80
 800351c:	01db      	lsls	r3, r3, #7
 800351e:	485e      	ldr	r0, [pc, #376]	@ (8003698 <MX_GPIO_Init+0x200>)
 8003520:	2201      	movs	r2, #1
 8003522:	0019      	movs	r1, r3
 8003524:	f003 face 	bl	8006ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D_C_Pin|RST_Pin, GPIO_PIN_RESET);
 8003528:	2390      	movs	r3, #144	@ 0x90
 800352a:	0119      	lsls	r1, r3, #4
 800352c:	23a0      	movs	r3, #160	@ 0xa0
 800352e:	05db      	lsls	r3, r3, #23
 8003530:	2200      	movs	r2, #0
 8003532:	0018      	movs	r0, r3
 8003534:	f003 fac6 	bl	8006ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSB_Pin|CS_Pin, GPIO_PIN_SET);
 8003538:	23a0      	movs	r3, #160	@ 0xa0
 800353a:	0159      	lsls	r1, r3, #5
 800353c:	23a0      	movs	r3, #160	@ 0xa0
 800353e:	05db      	lsls	r3, r3, #23
 8003540:	2201      	movs	r2, #1
 8003542:	0018      	movs	r0, r3
 8003544:	f003 fabe 	bl	8006ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003548:	193b      	adds	r3, r7, r4
 800354a:	22e0      	movs	r2, #224	@ 0xe0
 800354c:	0212      	lsls	r2, r2, #8
 800354e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003550:	193b      	adds	r3, r7, r4
 8003552:	2203      	movs	r2, #3
 8003554:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003556:	193b      	adds	r3, r7, r4
 8003558:	2200      	movs	r2, #0
 800355a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800355c:	193b      	adds	r3, r7, r4
 800355e:	4a4f      	ldr	r2, [pc, #316]	@ (800369c <MX_GPIO_Init+0x204>)
 8003560:	0019      	movs	r1, r3
 8003562:	0010      	movs	r0, r2
 8003564:	f003 f93a 	bl	80067dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003568:	193b      	adds	r3, r7, r4
 800356a:	220f      	movs	r2, #15
 800356c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800356e:	193b      	adds	r3, r7, r4
 8003570:	2203      	movs	r2, #3
 8003572:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003574:	193b      	adds	r3, r7, r4
 8003576:	2200      	movs	r2, #0
 8003578:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800357a:	193b      	adds	r3, r7, r4
 800357c:	4a48      	ldr	r2, [pc, #288]	@ (80036a0 <MX_GPIO_Init+0x208>)
 800357e:	0019      	movs	r1, r3
 8003580:	0010      	movs	r0, r2
 8003582:	f003 f92b 	bl	80067dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15;
 8003586:	193b      	adds	r3, r7, r4
 8003588:	4a46      	ldr	r2, [pc, #280]	@ (80036a4 <MX_GPIO_Init+0x20c>)
 800358a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800358c:	193b      	adds	r3, r7, r4
 800358e:	2203      	movs	r2, #3
 8003590:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003592:	193b      	adds	r3, r7, r4
 8003594:	2200      	movs	r2, #0
 8003596:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003598:	193a      	adds	r2, r7, r4
 800359a:	23a0      	movs	r3, #160	@ 0xa0
 800359c:	05db      	lsls	r3, r3, #23
 800359e:	0011      	movs	r1, r2
 80035a0:	0018      	movs	r0, r3
 80035a2:	f003 f91b 	bl	80067dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB10 PB11
                           PB3 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 80035a6:	193b      	adds	r3, r7, r4
 80035a8:	4a3f      	ldr	r2, [pc, #252]	@ (80036a8 <MX_GPIO_Init+0x210>)
 80035aa:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035ac:	193b      	adds	r3, r7, r4
 80035ae:	2203      	movs	r2, #3
 80035b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b2:	193b      	adds	r3, r7, r4
 80035b4:	2200      	movs	r2, #0
 80035b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035b8:	193b      	adds	r3, r7, r4
 80035ba:	4a37      	ldr	r2, [pc, #220]	@ (8003698 <MX_GPIO_Init+0x200>)
 80035bc:	0019      	movs	r1, r3
 80035be:	0010      	movs	r0, r2
 80035c0:	f003 f90c 	bl	80067dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|WDI_Pin|PAPER_ON_Pin;
 80035c4:	193b      	adds	r3, r7, r4
 80035c6:	4a33      	ldr	r2, [pc, #204]	@ (8003694 <MX_GPIO_Init+0x1fc>)
 80035c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ca:	193b      	adds	r3, r7, r4
 80035cc:	2201      	movs	r2, #1
 80035ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d0:	193b      	adds	r3, r7, r4
 80035d2:	2200      	movs	r2, #0
 80035d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d6:	193b      	adds	r3, r7, r4
 80035d8:	2200      	movs	r2, #0
 80035da:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035dc:	193b      	adds	r3, r7, r4
 80035de:	4a2e      	ldr	r2, [pc, #184]	@ (8003698 <MX_GPIO_Init+0x200>)
 80035e0:	0019      	movs	r1, r3
 80035e2:	0010      	movs	r0, r2
 80035e4:	f003 f8fa 	bl	80067dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NIRQ_Pin;
 80035e8:	0021      	movs	r1, r4
 80035ea:	187b      	adds	r3, r7, r1
 80035ec:	2280      	movs	r2, #128	@ 0x80
 80035ee:	0152      	lsls	r2, r2, #5
 80035f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035f2:	000c      	movs	r4, r1
 80035f4:	193b      	adds	r3, r7, r4
 80035f6:	2200      	movs	r2, #0
 80035f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fa:	193b      	adds	r3, r7, r4
 80035fc:	2200      	movs	r2, #0
 80035fe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NIRQ_GPIO_Port, &GPIO_InitStruct);
 8003600:	193b      	adds	r3, r7, r4
 8003602:	4a25      	ldr	r2, [pc, #148]	@ (8003698 <MX_GPIO_Init+0x200>)
 8003604:	0019      	movs	r1, r3
 8003606:	0010      	movs	r0, r2
 8003608:	f003 f8e8 	bl	80067dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_RTC_Pin;
 800360c:	0021      	movs	r1, r4
 800360e:	187b      	adds	r3, r7, r1
 8003610:	2280      	movs	r2, #128	@ 0x80
 8003612:	01d2      	lsls	r2, r2, #7
 8003614:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003616:	000c      	movs	r4, r1
 8003618:	193b      	adds	r3, r7, r4
 800361a:	2201      	movs	r2, #1
 800361c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361e:	193b      	adds	r3, r7, r4
 8003620:	2200      	movs	r2, #0
 8003622:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003624:	193b      	adds	r3, r7, r4
 8003626:	2201      	movs	r2, #1
 8003628:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CE_RTC_GPIO_Port, &GPIO_InitStruct);
 800362a:	193b      	adds	r3, r7, r4
 800362c:	4a1a      	ldr	r2, [pc, #104]	@ (8003698 <MX_GPIO_Init+0x200>)
 800362e:	0019      	movs	r1, r3
 8003630:	0010      	movs	r0, r2
 8003632:	f003 f8d3 	bl	80067dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = D_C_Pin|CSB_Pin|RST_Pin|CS_Pin;
 8003636:	0021      	movs	r1, r4
 8003638:	187b      	adds	r3, r7, r1
 800363a:	22e8      	movs	r2, #232	@ 0xe8
 800363c:	0152      	lsls	r2, r2, #5
 800363e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003640:	000c      	movs	r4, r1
 8003642:	193b      	adds	r3, r7, r4
 8003644:	2201      	movs	r2, #1
 8003646:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003648:	193b      	adds	r3, r7, r4
 800364a:	2200      	movs	r2, #0
 800364c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800364e:	193b      	adds	r3, r7, r4
 8003650:	2200      	movs	r2, #0
 8003652:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003654:	193a      	adds	r2, r7, r4
 8003656:	23a0      	movs	r3, #160	@ 0xa0
 8003658:	05db      	lsls	r3, r3, #23
 800365a:	0011      	movs	r1, r2
 800365c:	0018      	movs	r0, r3
 800365e:	f003 f8bd 	bl	80067dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 8003662:	0021      	movs	r1, r4
 8003664:	187b      	adds	r3, r7, r1
 8003666:	2280      	movs	r2, #128	@ 0x80
 8003668:	0092      	lsls	r2, r2, #2
 800366a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800366c:	187b      	adds	r3, r7, r1
 800366e:	2200      	movs	r2, #0
 8003670:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003672:	187b      	adds	r3, r7, r1
 8003674:	2200      	movs	r2, #0
 8003676:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 8003678:	187a      	adds	r2, r7, r1
 800367a:	23a0      	movs	r3, #160	@ 0xa0
 800367c:	05db      	lsls	r3, r3, #23
 800367e:	0011      	movs	r1, r2
 8003680:	0018      	movs	r0, r3
 8003682:	f003 f8ab 	bl	80067dc <HAL_GPIO_Init>

}
 8003686:	46c0      	nop			@ (mov r8, r8)
 8003688:	46bd      	mov	sp, r7
 800368a:	b00b      	add	sp, #44	@ 0x2c
 800368c:	bd90      	pop	{r4, r7, pc}
 800368e:	46c0      	nop			@ (mov r8, r8)
 8003690:	40021000 	.word	0x40021000
 8003694:	0000a002 	.word	0x0000a002
 8003698:	50000400 	.word	0x50000400
 800369c:	50000800 	.word	0x50000800
 80036a0:	50001400 	.word	0x50001400
 80036a4:	00008013 	.word	0x00008013
 80036a8:	00000f3d 	.word	0x00000f3d

080036ac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80036b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003720 <MX_I2C1_Init+0x74>)
 80036b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003724 <MX_I2C1_Init+0x78>)
 80036b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80036b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003720 <MX_I2C1_Init+0x74>)
 80036b8:	4a1b      	ldr	r2, [pc, #108]	@ (8003728 <MX_I2C1_Init+0x7c>)
 80036ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80036bc:	4b18      	ldr	r3, [pc, #96]	@ (8003720 <MX_I2C1_Init+0x74>)
 80036be:	2200      	movs	r2, #0
 80036c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036c2:	4b17      	ldr	r3, [pc, #92]	@ (8003720 <MX_I2C1_Init+0x74>)
 80036c4:	2201      	movs	r2, #1
 80036c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80036c8:	4b15      	ldr	r3, [pc, #84]	@ (8003720 <MX_I2C1_Init+0x74>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80036ce:	4b14      	ldr	r3, [pc, #80]	@ (8003720 <MX_I2C1_Init+0x74>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80036d4:	4b12      	ldr	r3, [pc, #72]	@ (8003720 <MX_I2C1_Init+0x74>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80036da:	4b11      	ldr	r3, [pc, #68]	@ (8003720 <MX_I2C1_Init+0x74>)
 80036dc:	2200      	movs	r2, #0
 80036de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80036e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003720 <MX_I2C1_Init+0x74>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80036e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003720 <MX_I2C1_Init+0x74>)
 80036e8:	0018      	movs	r0, r3
 80036ea:	f003 fa09 	bl	8006b00 <HAL_I2C_Init>
 80036ee:	1e03      	subs	r3, r0, #0
 80036f0:	d001      	beq.n	80036f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80036f2:	f000 fbaf 	bl	8003e54 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80036f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003720 <MX_I2C1_Init+0x74>)
 80036f8:	2100      	movs	r1, #0
 80036fa:	0018      	movs	r0, r3
 80036fc:	f003 faa6 	bl	8006c4c <HAL_I2CEx_ConfigAnalogFilter>
 8003700:	1e03      	subs	r3, r0, #0
 8003702:	d001      	beq.n	8003708 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003704:	f000 fba6 	bl	8003e54 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003708:	4b05      	ldr	r3, [pc, #20]	@ (8003720 <MX_I2C1_Init+0x74>)
 800370a:	2100      	movs	r1, #0
 800370c:	0018      	movs	r0, r3
 800370e:	f003 fae9 	bl	8006ce4 <HAL_I2CEx_ConfigDigitalFilter>
 8003712:	1e03      	subs	r3, r0, #0
 8003714:	d001      	beq.n	800371a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003716:	f000 fb9d 	bl	8003e54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800371a:	46c0      	nop			@ (mov r8, r8)
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	200003c8 	.word	0x200003c8
 8003724:	40005400 	.word	0x40005400
 8003728:	00303d5b 	.word	0x00303d5b

0800372c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800372c:	b590      	push	{r4, r7, lr}
 800372e:	b09b      	sub	sp, #108	@ 0x6c
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003734:	2354      	movs	r3, #84	@ 0x54
 8003736:	18fb      	adds	r3, r7, r3
 8003738:	0018      	movs	r0, r3
 800373a:	2314      	movs	r3, #20
 800373c:	001a      	movs	r2, r3
 800373e:	2100      	movs	r1, #0
 8003740:	f00a f9e0 	bl	800db04 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003744:	2410      	movs	r4, #16
 8003746:	193b      	adds	r3, r7, r4
 8003748:	0018      	movs	r0, r3
 800374a:	2344      	movs	r3, #68	@ 0x44
 800374c:	001a      	movs	r2, r3
 800374e:	2100      	movs	r1, #0
 8003750:	f00a f9d8 	bl	800db04 <memset>
  if(i2cHandle->Instance==I2C1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a22      	ldr	r2, [pc, #136]	@ (80037e4 <HAL_I2C_MspInit+0xb8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d13d      	bne.n	80037da <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800375e:	193b      	adds	r3, r7, r4
 8003760:	2220      	movs	r2, #32
 8003762:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003764:	193b      	adds	r3, r7, r4
 8003766:	2200      	movs	r2, #0
 8003768:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800376a:	193b      	adds	r3, r7, r4
 800376c:	0018      	movs	r0, r3
 800376e:	f004 f9b1 	bl	8007ad4 <HAL_RCCEx_PeriphCLKConfig>
 8003772:	1e03      	subs	r3, r0, #0
 8003774:	d001      	beq.n	800377a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003776:	f000 fb6d 	bl	8003e54 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800377a:	4b1b      	ldr	r3, [pc, #108]	@ (80037e8 <HAL_I2C_MspInit+0xbc>)
 800377c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800377e:	4b1a      	ldr	r3, [pc, #104]	@ (80037e8 <HAL_I2C_MspInit+0xbc>)
 8003780:	2102      	movs	r1, #2
 8003782:	430a      	orrs	r2, r1
 8003784:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003786:	4b18      	ldr	r3, [pc, #96]	@ (80037e8 <HAL_I2C_MspInit+0xbc>)
 8003788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800378a:	2202      	movs	r2, #2
 800378c:	4013      	ands	r3, r2
 800378e:	60fb      	str	r3, [r7, #12]
 8003790:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003792:	2154      	movs	r1, #84	@ 0x54
 8003794:	187b      	adds	r3, r7, r1
 8003796:	22c0      	movs	r2, #192	@ 0xc0
 8003798:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800379a:	187b      	adds	r3, r7, r1
 800379c:	2212      	movs	r2, #18
 800379e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a0:	187b      	adds	r3, r7, r1
 80037a2:	2200      	movs	r2, #0
 80037a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a6:	187b      	adds	r3, r7, r1
 80037a8:	2200      	movs	r2, #0
 80037aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80037ac:	187b      	adds	r3, r7, r1
 80037ae:	2204      	movs	r2, #4
 80037b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037b2:	187b      	adds	r3, r7, r1
 80037b4:	4a0d      	ldr	r2, [pc, #52]	@ (80037ec <HAL_I2C_MspInit+0xc0>)
 80037b6:	0019      	movs	r1, r3
 80037b8:	0010      	movs	r0, r2
 80037ba:	f003 f80f 	bl	80067dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80037be:	4b0a      	ldr	r3, [pc, #40]	@ (80037e8 <HAL_I2C_MspInit+0xbc>)
 80037c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80037c2:	4b09      	ldr	r3, [pc, #36]	@ (80037e8 <HAL_I2C_MspInit+0xbc>)
 80037c4:	2180      	movs	r1, #128	@ 0x80
 80037c6:	0389      	lsls	r1, r1, #14
 80037c8:	430a      	orrs	r2, r1
 80037ca:	659a      	str	r2, [r3, #88]	@ 0x58
 80037cc:	4b06      	ldr	r3, [pc, #24]	@ (80037e8 <HAL_I2C_MspInit+0xbc>)
 80037ce:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80037d0:	2380      	movs	r3, #128	@ 0x80
 80037d2:	039b      	lsls	r3, r3, #14
 80037d4:	4013      	ands	r3, r2
 80037d6:	60bb      	str	r3, [r7, #8]
 80037d8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80037da:	46c0      	nop			@ (mov r8, r8)
 80037dc:	46bd      	mov	sp, r7
 80037de:	b01b      	add	sp, #108	@ 0x6c
 80037e0:	bd90      	pop	{r4, r7, pc}
 80037e2:	46c0      	nop			@ (mov r8, r8)
 80037e4:	40005400 	.word	0x40005400
 80037e8:	40021000 	.word	0x40021000
 80037ec:	50000400 	.word	0x50000400

080037f0 <LL_SPI_Enable>:
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2240      	movs	r2, #64	@ 0x40
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	601a      	str	r2, [r3, #0]
}
 8003804:	46c0      	nop			@ (mov r8, r8)
 8003806:	46bd      	mov	sp, r7
 8003808:	b002      	add	sp, #8
 800380a:	bd80      	pop	{r7, pc}

0800380c <LL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @rmtoll DBG_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003810:	4b04      	ldr	r3, [pc, #16]	@ (8003824 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	4b03      	ldr	r3, [pc, #12]	@ (8003824 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8003816:	2102      	movs	r1, #2
 8003818:	438a      	bics	r2, r1
 800381a:	605a      	str	r2, [r3, #4]
}
 800381c:	46c0      	nop			@ (mov r8, r8)
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	46c0      	nop			@ (mov r8, r8)
 8003824:	40015800 	.word	0x40015800

08003828 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800382a:	b08b      	sub	sp, #44	@ 0x2c
 800382c:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */

  volatile int8_t rslt;
  uint8_t dev_addr = 0;
 800382e:	1cbb      	adds	r3, r7, #2
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
  dev.intf_ptr = &dev_addr;
 8003834:	4be0      	ldr	r3, [pc, #896]	@ (8003bb8 <main+0x390>)
 8003836:	1cba      	adds	r2, r7, #2
 8003838:	605a      	str	r2, [r3, #4]
  dev.intf = BME280_SPI_INTF;
 800383a:	4bdf      	ldr	r3, [pc, #892]	@ (8003bb8 <main+0x390>)
 800383c:	2200      	movs	r2, #0
 800383e:	721a      	strb	r2, [r3, #8]
  dev.read = user_spi_read;
 8003840:	4bdd      	ldr	r3, [pc, #884]	@ (8003bb8 <main+0x390>)
 8003842:	4ade      	ldr	r2, [pc, #888]	@ (8003bbc <main+0x394>)
 8003844:	60da      	str	r2, [r3, #12]
  dev.write = user_spi_write;
 8003846:	4bdc      	ldr	r3, [pc, #880]	@ (8003bb8 <main+0x390>)
 8003848:	4add      	ldr	r2, [pc, #884]	@ (8003bc0 <main+0x398>)
 800384a:	611a      	str	r2, [r3, #16]
  dev.delay_us = user_delay_us;
 800384c:	4bda      	ldr	r3, [pc, #872]	@ (8003bb8 <main+0x390>)
 800384e:	4add      	ldr	r2, [pc, #884]	@ (8003bc4 <main+0x39c>)
 8003850:	615a      	str	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003852:	f002 fa60 	bl	8005d16 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint16_t h_;
  uint16_t t_;
  uint16_t vbat_output_flag;
  uint8_t initialized_flag = 0;
 8003856:	2517      	movs	r5, #23
 8003858:	197b      	adds	r3, r7, r5
 800385a:	2200      	movs	r2, #0
 800385c:	701a      	strb	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800385e:	f000 f9dd 	bl	8003c1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003862:	f7ff fe19 	bl	8003498 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003866:	f7ff fcb7 	bl	80031d8 <MX_ADC1_Init>
  MX_I2C1_Init();
 800386a:	f7ff ff1f 	bl	80036ac <MX_I2C1_Init>
  MX_RTC_Init();
 800386e:	f001 ff53 	bl	8005718 <MX_RTC_Init>
  MX_SPI1_Init();
 8003872:	f001 ffcb 	bl	800580c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8003876:	f002 f977 	bl	8005b68 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  LL_DBGMCU_DisableDBGStopMode(); // !!!__ Disable debug in stop mode __!!!
 800387a:	f7ff ffc7 	bl	800380c <LL_DBGMCU_DisableDBGStopMode>
                                  //	LL_DBGMCU_EnableDBGStopMode();
  LED1_ON();
 800387e:	4bd2      	ldr	r3, [pc, #840]	@ (8003bc8 <main+0x3a0>)
 8003880:	2202      	movs	r2, #2
 8003882:	619a      	str	r2, [r3, #24]
  LL_SPI_Enable(SPI1);
 8003884:	4bd1      	ldr	r3, [pc, #836]	@ (8003bcc <main+0x3a4>)
 8003886:	0018      	movs	r0, r3
 8003888:	f7ff ffb2 	bl	80037f0 <LL_SPI_Enable>

  //  ==============___ Power ON __=======================

  uint8_t wdalarm = read(REG_WEEKDAY_ALARM); // REG_WEEKDAY_ALARM  0x0e;
 800388c:	4bd0      	ldr	r3, [pc, #832]	@ (8003bd0 <main+0x3a8>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2616      	movs	r6, #22
 8003892:	19bc      	adds	r4, r7, r6
 8003894:	0018      	movs	r0, r3
 8003896:	f7ff fbab 	bl	8002ff0 <read>
 800389a:	0003      	movs	r3, r0
 800389c:	7023      	strb	r3, [r4, #0]
  if ((wdalarm & 0xf8) != 0xa0)              // ********    Startup from power up.   ********
 800389e:	19bb      	adds	r3, r7, r6
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	22f8      	movs	r2, #248	@ 0xf8
 80038a4:	4013      	ands	r3, r2
 80038a6:	2ba0      	cmp	r3, #160	@ 0xa0
 80038a8:	d02f      	beq.n	800390a <main+0xe2>
  {
    uint32_t clk = HAL_RCC_GetSysClockFreq();
 80038aa:	f003 ffe9 	bl	8007880 <HAL_RCC_GetSysClockFreq>
 80038ae:	0003      	movs	r3, r0
 80038b0:	613b      	str	r3, [r7, #16]
    printf("\nMAIN. First power ON.   %d\n", clk);
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	4bc7      	ldr	r3, [pc, #796]	@ (8003bd4 <main+0x3ac>)
 80038b6:	0011      	movs	r1, r2
 80038b8:	0018      	movs	r0, r3
 80038ba:	f001 fedb 	bl	8005674 <printf_>

    vbat_output_flag = BAT_OUTPUT_PERIOD; // For first time output
 80038be:	003b      	movs	r3, r7
 80038c0:	220f      	movs	r2, #15
 80038c2:	801a      	strh	r2, [r3, #0]
    resetConfig(0);
 80038c4:	2000      	movs	r0, #0
 80038c6:	f7fe fe39 	bl	800253c <resetConfig>
    write(REG_WEEKDAY_ALARM, 0xa0); // Magic 0xa0
 80038ca:	4bc1      	ldr	r3, [pc, #772]	@ (8003bd0 <main+0x3a8>)
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	21a0      	movs	r1, #160	@ 0xa0
 80038d0:	0018      	movs	r0, r3
 80038d2:	f7ff fb9d 	bl	8003010 <write>

    write(H_old_RAM_address, 0);
 80038d6:	2100      	movs	r1, #0
 80038d8:	2040      	movs	r0, #64	@ 0x40
 80038da:	f7ff fb99 	bl	8003010 <write>
    write(T_old_RAM_address, 0);
 80038de:	2100      	movs	r1, #0
 80038e0:	2042      	movs	r0, #66	@ 0x42
 80038e2:	f7ff fb95 	bl	8003010 <write>
    write(vbat_old_RAM_address, 0);
 80038e6:	2100      	movs	r1, #0
 80038e8:	2044      	movs	r0, #68	@ 0x44
 80038ea:	f7ff fb91 	bl	8003010 <write>
    write(vbat_output_flag_address, 0);
 80038ee:	2100      	movs	r1, #0
 80038f0:	2046      	movs	r0, #70	@ 0x46
 80038f2:	f7ff fb8d 	bl	8003010 <write>

    PAPER_ON_H();
 80038f6:	4bb4      	ldr	r3, [pc, #720]	@ (8003bc8 <main+0x3a0>)
 80038f8:	2280      	movs	r2, #128	@ 0x80
 80038fa:	0212      	lsls	r2, r2, #8
 80038fc:	619a      	str	r2, [r3, #24]
    ESP_Init();
 80038fe:	f009 f803 	bl	800c908 <ESP_Init>
    initialized_flag = 1; // Flag that ESP is initialized, to do it only once
 8003902:	197b      	adds	r3, r7, r5
 8003904:	2201      	movs	r2, #1
 8003906:	701a      	strb	r2, [r3, #0]
 8003908:	e021      	b.n	800394e <main+0x126>
  }
  else
  {
    read_RTCRam(vbat_output_flag_address, &vbat_output_flag, 1); // Read vbat_output_flag from RTC RAM
 800390a:	003b      	movs	r3, r7
 800390c:	2201      	movs	r2, #1
 800390e:	0019      	movs	r1, r3
 8003910:	2046      	movs	r0, #70	@ 0x46
 8003912:	f000 f9cb 	bl	8003cac <read_RTCRam>
    vbat_output_flag++;
 8003916:	003b      	movs	r3, r7
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	3301      	adds	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	003b      	movs	r3, r7
 8003920:	801a      	strh	r2, [r3, #0]
    printf("\nMAIN. Startup from RTC\n");
 8003922:	4bad      	ldr	r3, [pc, #692]	@ (8003bd8 <main+0x3b0>)
 8003924:	0018      	movs	r0, r3
 8003926:	f001 fea5 	bl	8005674 <printf_>
    //hex_dump();

    read_RTCRam(H_old_RAM_address, &H_old, 1);
 800392a:	4bac      	ldr	r3, [pc, #688]	@ (8003bdc <main+0x3b4>)
 800392c:	2201      	movs	r2, #1
 800392e:	0019      	movs	r1, r3
 8003930:	2040      	movs	r0, #64	@ 0x40
 8003932:	f000 f9bb 	bl	8003cac <read_RTCRam>
    read_RTCRam(T_old_RAM_address, &T_old, 1);
 8003936:	4baa      	ldr	r3, [pc, #680]	@ (8003be0 <main+0x3b8>)
 8003938:	2201      	movs	r2, #1
 800393a:	0019      	movs	r1, r3
 800393c:	2042      	movs	r0, #66	@ 0x42
 800393e:	f000 f9b5 	bl	8003cac <read_RTCRam>
    read_RTCRam(vbat_old_RAM_address, &vbat_old, 1);
 8003942:	4ba8      	ldr	r3, [pc, #672]	@ (8003be4 <main+0x3bc>)
 8003944:	2201      	movs	r2, #1
 8003946:	0019      	movs	r1, r3
 8003948:	2044      	movs	r0, #68	@ 0x44
 800394a:	f000 f9af 	bl	8003cac <read_RTCRam>
  }


  Activate_ADC();
 800394e:	f7ff fd25 	bl	800339c <Activate_ADC>
  int32_t vBat = get_vbat();
 8003952:	f7ff fced 	bl	8003330 <get_vbat>
 8003956:	0003      	movs	r3, r0
 8003958:	60fb      	str	r3, [r7, #12]
  // printf("vBat = %d\n", vBat);

  // ##################________measureME280_________#########################

  dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 800395a:	4b97      	ldr	r3, [pc, #604]	@ (8003bb8 <main+0x390>)
 800395c:	2242      	movs	r2, #66	@ 0x42
 800395e:	2101      	movs	r1, #1
 8003960:	5499      	strb	r1, [r3, r2]
  dev.settings.osr_p = BME280_NO_OVERSAMPLING; // UINT8_C(0x00)
 8003962:	4b95      	ldr	r3, [pc, #596]	@ (8003bb8 <main+0x390>)
 8003964:	2240      	movs	r2, #64	@ 0x40
 8003966:	2100      	movs	r1, #0
 8003968:	5499      	strb	r1, [r3, r2]
  dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 800396a:	4b93      	ldr	r3, [pc, #588]	@ (8003bb8 <main+0x390>)
 800396c:	2241      	movs	r2, #65	@ 0x41
 800396e:	2102      	movs	r1, #2
 8003970:	5499      	strb	r1, [r3, r2]
  dev.settings.filter = BME280_FILTER_COEFF_OFF;
 8003972:	4b91      	ldr	r3, [pc, #580]	@ (8003bb8 <main+0x390>)
 8003974:	2243      	movs	r2, #67	@ 0x43
 8003976:	2100      	movs	r1, #0
 8003978:	5499      	strb	r1, [r3, r2]

  rslt = bme280_init(&dev);
 800397a:	4b8f      	ldr	r3, [pc, #572]	@ (8003bb8 <main+0x390>)
 800397c:	0018      	movs	r0, r3
 800397e:	f006 f877 	bl	8009a70 <bme280_init>
 8003982:	0003      	movs	r3, r0
 8003984:	001a      	movs	r2, r3
 8003986:	1cfb      	adds	r3, r7, #3
 8003988:	701a      	strb	r2, [r3, #0]
  if (rslt != BME280_OK) // OK = 0
 800398a:	1cfb      	adds	r3, r7, #3
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	b25b      	sxtb	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00a      	beq.n	80039aa <main+0x182>
  {
    printf("Failed to initialize the device (code %+d).\n", rslt);
 8003994:	1cfb      	adds	r3, r7, #3
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	b25b      	sxtb	r3, r3
 800399a:	001a      	movs	r2, r3
 800399c:	4b92      	ldr	r3, [pc, #584]	@ (8003be8 <main+0x3c0>)
 800399e:	0011      	movs	r1, r2
 80039a0:	0018      	movs	r0, r3
 80039a2:	f001 fe67 	bl	8005674 <printf_>
    Error_Handler();
 80039a6:	f000 fa55 	bl	8003e54 <Error_Handler>
  }

  rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 80039aa:	4b83      	ldr	r3, [pc, #524]	@ (8003bb8 <main+0x390>)
 80039ac:	0019      	movs	r1, r3
 80039ae:	200f      	movs	r0, #15
 80039b0:	f006 f9c0 	bl	8009d34 <bme280_set_sensor_settings>
 80039b4:	0003      	movs	r3, r0
 80039b6:	001a      	movs	r2, r3
 80039b8:	1cfb      	adds	r3, r7, #3
 80039ba:	701a      	strb	r2, [r3, #0]
  /*Calculate the minimum delay (ms) required between consecutive measurement based upon the sensor enabled
   *  and the oversampling configuration. */
  req_delay = bme280_cal_meas_delay(&dev.settings);
 80039bc:	4b8b      	ldr	r3, [pc, #556]	@ (8003bec <main+0x3c4>)
 80039be:	0018      	movs	r0, r3
 80039c0:	f006 fbfc 	bl	800a1bc <bme280_cal_meas_delay>
 80039c4:	0002      	movs	r2, r0
 80039c6:	4b8a      	ldr	r3, [pc, #552]	@ (8003bf0 <main+0x3c8>)
 80039c8:	601a      	str	r2, [r3, #0]
  // printf("req_delay = %d\n", req_delay);

  rslt = stream_sensor_data_forced_mode(&dev); // working time = 0.8 sec
 80039ca:	4b7b      	ldr	r3, [pc, #492]	@ (8003bb8 <main+0x390>)
 80039cc:	0018      	movs	r0, r3
 80039ce:	f000 f9fb 	bl	8003dc8 <stream_sensor_data_forced_mode>
 80039d2:	0003      	movs	r3, r0
 80039d4:	001a      	movs	r2, r3
 80039d6:	1cfb      	adds	r3, r7, #3
 80039d8:	701a      	strb	r2, [r3, #0]
  if (rslt != BME280_OK)
 80039da:	1cfb      	adds	r3, r7, #3
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	b25b      	sxtb	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00c      	beq.n	80039fe <main+0x1d6>
  {
    fprintf(stderr, "Failed to stream sensor data (code %+d).", rslt);
 80039e4:	4b83      	ldr	r3, [pc, #524]	@ (8003bf4 <main+0x3cc>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68d8      	ldr	r0, [r3, #12]
 80039ea:	1cfb      	adds	r3, r7, #3
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	b25b      	sxtb	r3, r3
 80039f0:	001a      	movs	r2, r3
 80039f2:	4b81      	ldr	r3, [pc, #516]	@ (8003bf8 <main+0x3d0>)
 80039f4:	0019      	movs	r1, r3
 80039f6:	f00a f80d 	bl	800da14 <fiprintf>
    Error_Handler();
 80039fa:	f000 fa2b 	bl	8003e54 <Error_Handler>
  }
  // h_ = comp_data.humidity / 1000.0;
  h_ = (((uint16_t)comp_data.humidity * 1049 + 500) >> 20); // fast_divide_by_1000
 80039fe:	4b7f      	ldr	r3, [pc, #508]	@ (8003bfc <main+0x3d4>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	001a      	movs	r2, r3
 8003a06:	0013      	movs	r3, r2
 8003a08:	019b      	lsls	r3, r3, #6
 8003a0a:	189b      	adds	r3, r3, r2
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	189b      	adds	r3, r3, r2
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	189b      	adds	r3, r3, r2
 8003a14:	33f5      	adds	r3, #245	@ 0xf5
 8003a16:	33ff      	adds	r3, #255	@ 0xff
 8003a18:	151a      	asrs	r2, r3, #20
 8003a1a:	210a      	movs	r1, #10
 8003a1c:	187b      	adds	r3, r7, r1
 8003a1e:	801a      	strh	r2, [r3, #0]

  // t_ = comp_data.temperature / 10.0;
  t_ = (((uint16_t)comp_data.temperature * 6554 + 2) >> 16); // fast_divide_by_10
 8003a20:	4b76      	ldr	r3, [pc, #472]	@ (8003bfc <main+0x3d4>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	001a      	movs	r2, r3
 8003a28:	4b75      	ldr	r3, [pc, #468]	@ (8003c00 <main+0x3d8>)
 8003a2a:	4353      	muls	r3, r2
 8003a2c:	3302      	adds	r3, #2
 8003a2e:	141a      	asrs	r2, r3, #16
 8003a30:	2608      	movs	r6, #8
 8003a32:	19bb      	adds	r3, r7, r6
 8003a34:	801a      	strh	r2, [r3, #0]

  printf("h_ = %d   h_old = %d   t_ = %d   t_old = %d  vBat = %d, vbat_old = %d\n", h_, H_old, t_, T_old, vBat, vbat_old);
 8003a36:	187b      	adds	r3, r7, r1
 8003a38:	8819      	ldrh	r1, [r3, #0]
 8003a3a:	4b68      	ldr	r3, [pc, #416]	@ (8003bdc <main+0x3b4>)
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	001d      	movs	r5, r3
 8003a40:	19bb      	adds	r3, r7, r6
 8003a42:	881a      	ldrh	r2, [r3, #0]
 8003a44:	4b66      	ldr	r3, [pc, #408]	@ (8003be0 <main+0x3b8>)
 8003a46:	881b      	ldrh	r3, [r3, #0]
 8003a48:	001c      	movs	r4, r3
 8003a4a:	4b66      	ldr	r3, [pc, #408]	@ (8003be4 <main+0x3bc>)
 8003a4c:	881b      	ldrh	r3, [r3, #0]
 8003a4e:	486d      	ldr	r0, [pc, #436]	@ (8003c04 <main+0x3dc>)
 8003a50:	9302      	str	r3, [sp, #8]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	9301      	str	r3, [sp, #4]
 8003a56:	9400      	str	r4, [sp, #0]
 8003a58:	0013      	movs	r3, r2
 8003a5a:	002a      	movs	r2, r5
 8003a5c:	f001 fe0a 	bl	8005674 <printf_>

  // ============================_____END____===================================

  if ((t_ != T_old) | (vbat_output_flag > BAT_OUTPUT_MAX_PERIOD))
 8003a60:	4b5f      	ldr	r3, [pc, #380]	@ (8003be0 <main+0x3b8>)
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	0030      	movs	r0, r6
 8003a66:	183a      	adds	r2, r7, r0
 8003a68:	8812      	ldrh	r2, [r2, #0]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	1e5a      	subs	r2, r3, #1
 8003a6e:	4193      	sbcs	r3, r2
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	003b      	movs	r3, r7
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	211e      	movs	r1, #30
 8003a78:	4299      	cmp	r1, r3
 8003a7a:	419b      	sbcs	r3, r3
 8003a7c:	425b      	negs	r3, r3
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	4313      	orrs	r3, r2
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d100      	bne.n	8003a8a <main+0x262>
 8003a88:	e07c      	b.n	8003b84 <main+0x35c>
  {
    // Temperature need output
    write_ToRTCRam(T_old_RAM_address, t_, 1);
 8003a8a:	183b      	adds	r3, r7, r0
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	0019      	movs	r1, r3
 8003a92:	2042      	movs	r0, #66	@ 0x42
 8003a94:	f000 f939 	bl	8003d0a <write_ToRTCRam>
    printf("** T out,  initialized_flag = %d\n", initialized_flag);
 8003a98:	2417      	movs	r4, #23
 8003a9a:	193b      	adds	r3, r7, r4
 8003a9c:	781a      	ldrb	r2, [r3, #0]
 8003a9e:	4b5a      	ldr	r3, [pc, #360]	@ (8003c08 <main+0x3e0>)
 8003aa0:	0011      	movs	r1, r2
 8003aa2:	0018      	movs	r0, r3
 8003aa4:	f001 fde6 	bl	8005674 <printf_>
    PAPER_ON_H();
 8003aa8:	4b47      	ldr	r3, [pc, #284]	@ (8003bc8 <main+0x3a0>)
 8003aaa:	2280      	movs	r2, #128	@ 0x80
 8003aac:	0212      	lsls	r2, r2, #8
 8003aae:	619a      	str	r2, [r3, #24]
    EPD_1IN54_V2_Reset();
 8003ab0:	f007 fbcf 	bl	800b252 <EPD_1IN54_V2_Reset>
    if (!initialized_flag)
 8003ab4:	193b      	adds	r3, r7, r4
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <main+0x298>
    {
      ESP_Init_standby();
 8003abc:	f009 f8d6 	bl	800cc6c <ESP_Init_standby>
    }
    temperature_out(t_);
 8003ac0:	2308      	movs	r3, #8
 8003ac2:	18fb      	adds	r3, r7, r3
 8003ac4:	881b      	ldrh	r3, [r3, #0]
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f008 fe82 	bl	800c7d0 <temperature_out>

    if (vbat_output_flag > 15) // output Vbat and Hum after every 10 min; (vbat_output_flag >= 10)
 8003acc:	003b      	movs	r3, r7
 8003ace:	881b      	ldrh	r3, [r3, #0]
 8003ad0:	2b0f      	cmp	r3, #15
 8003ad2:	d94c      	bls.n	8003b6e <main+0x346>
    {
      vbat_output_flag = 0;
 8003ad4:	003b      	movs	r3, r7
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	801a      	strh	r2, [r3, #0]

      int32_t vBat = get_vbat();
 8003ada:	f7ff fc29 	bl	8003330 <get_vbat>
 8003ade:	0003      	movs	r3, r0
 8003ae0:	607b      	str	r3, [r7, #4]
      printf("vBat = %d\n", vBat);
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	4b49      	ldr	r3, [pc, #292]	@ (8003c0c <main+0x3e4>)
 8003ae6:	0011      	movs	r1, r2
 8003ae8:	0018      	movs	r0, r3
 8003aea:	f001 fdc3 	bl	8005674 <printf_>
      // vBat = vBat / 10.0; // go with 3 digits
      vBat = ((uint32_t)vBat * 6554 + 2) >> 16; // fast_divide_by_10
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a43      	ldr	r2, [pc, #268]	@ (8003c00 <main+0x3d8>)
 8003af2:	4353      	muls	r3, r2
 8003af4:	3302      	adds	r3, #2
 8003af6:	0c1b      	lsrs	r3, r3, #16
 8003af8:	607b      	str	r3, [r7, #4]

      if (vBat < UNDERVOLTAGE) // #define UNDERVOLTAGE 220
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2bdb      	cmp	r3, #219	@ 0xdb
 8003afe:	dc09      	bgt.n	8003b14 <main+0x2ec>
      {
        final_message(vBat);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	0018      	movs	r0, r3
 8003b06:	f008 ff57 	bl	800c9b8 <final_message>
        go_down(vBat); // shutdown forever  ****  R E W R I T E !!!   *****
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	0018      	movs	r0, r3
 8003b10:	f000 f984 	bl	8003e1c <go_down>
      }

      if (!(vBat == vbat_old)) // it's going to output
 8003b14:	4b33      	ldr	r3, [pc, #204]	@ (8003be4 <main+0x3bc>)
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	001a      	movs	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d00f      	beq.n	8003b40 <main+0x318>
      {
        write_ToRTCRam(vbat_old_RAM_address, vBat, 1); // write vbat_old = vBat
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	2201      	movs	r2, #1
 8003b26:	0019      	movs	r1, r3
 8003b28:	2044      	movs	r0, #68	@ 0x44
 8003b2a:	f000 f8ee 	bl	8003d0a <write_ToRTCRam>
        printf("** Vbat out\n");
 8003b2e:	4b38      	ldr	r3, [pc, #224]	@ (8003c10 <main+0x3e8>)
 8003b30:	0018      	movs	r0, r3
 8003b32:	f001 fd9f 	bl	8005674 <printf_>
        battery_out(vBat);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f008 fde4 	bl	800c708 <battery_out>
      }

      if (h_ != H_old)
 8003b40:	4b26      	ldr	r3, [pc, #152]	@ (8003bdc <main+0x3b4>)
 8003b42:	881b      	ldrh	r3, [r3, #0]
 8003b44:	240a      	movs	r4, #10
 8003b46:	193a      	adds	r2, r7, r4
 8003b48:	8812      	ldrh	r2, [r2, #0]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d00f      	beq.n	8003b6e <main+0x346>
      {
    	write_ToRTCRam(H_old_RAM_address, h_, 1);
 8003b4e:	193b      	adds	r3, r7, r4
 8003b50:	881b      	ldrh	r3, [r3, #0]
 8003b52:	2201      	movs	r2, #1
 8003b54:	0019      	movs	r1, r3
 8003b56:	2040      	movs	r0, #64	@ 0x40
 8003b58:	f000 f8d7 	bl	8003d0a <write_ToRTCRam>
        printf("** H out\n");
 8003b5c:	4b2d      	ldr	r3, [pc, #180]	@ (8003c14 <main+0x3ec>)
 8003b5e:	0018      	movs	r0, r3
 8003b60:	f001 fd88 	bl	8005674 <printf_>
        humidity_out(h_);
 8003b64:	193b      	adds	r3, r7, r4
 8003b66:	881b      	ldrh	r3, [r3, #0]
 8003b68:	0018      	movs	r0, r3
 8003b6a:	f008 fe89 	bl	800c880 <humidity_out>
      }
    }

    EPD_1IN54_V2_DisplayPart(BlackImage);
 8003b6e:	4b2a      	ldr	r3, [pc, #168]	@ (8003c18 <main+0x3f0>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	0018      	movs	r0, r3
 8003b74:	f007 fe3b 	bl	800b7ee <EPD_1IN54_V2_DisplayPart>
    EPD_1IN54_V2_Sleep(); // Deep sleep mode ????
 8003b78:	f007 fe88 	bl	800b88c <EPD_1IN54_V2_Sleep>
    PAPER_ON_L();         // e-Paper OFF
 8003b7c:	4b12      	ldr	r3, [pc, #72]	@ (8003bc8 <main+0x3a0>)
 8003b7e:	2280      	movs	r2, #128	@ 0x80
 8003b80:	0612      	lsls	r2, r2, #24
 8003b82:	619a      	str	r2, [r3, #24]
                          //  hex_dump();
                          //  HAL_Delay(1);
  }

  write_ToRTCRam(vbat_output_flag_address, vbat_output_flag, 1); // save vbat_output_flag
 8003b84:	003b      	movs	r3, r7
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	0019      	movs	r1, r3
 8003b8c:	2046      	movs	r0, #70	@ 0x46
 8003b8e:	f000 f8bc 	bl	8003d0a <write_ToRTCRam>
  deepPowerDown(30);                                             // 30 seconds deep power down
 8003b92:	201e      	movs	r0, #30
 8003b94:	f7fe fdc4 	bl	8002720 <deepPowerDown>
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
    // Never be here
    LED1_ON();
 8003b98:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc8 <main+0x3a0>)
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	619a      	str	r2, [r3, #24]
    HAL_Delay(100);
 8003b9e:	2064      	movs	r0, #100	@ 0x64
 8003ba0:	f002 f934 	bl	8005e0c <HAL_Delay>
    LED1_OFF();
 8003ba4:	4b08      	ldr	r3, [pc, #32]	@ (8003bc8 <main+0x3a0>)
 8003ba6:	2280      	movs	r2, #128	@ 0x80
 8003ba8:	0292      	lsls	r2, r2, #10
 8003baa:	619a      	str	r2, [r3, #24]
    HAL_Delay(100);
 8003bac:	2064      	movs	r0, #100	@ 0x64
 8003bae:	f002 f92d 	bl	8005e0c <HAL_Delay>
    LED1_ON();
 8003bb2:	46c0      	nop			@ (mov r8, r8)
 8003bb4:	e7f0      	b.n	8003b98 <main+0x370>
 8003bb6:	46c0      	nop			@ (mov r8, r8)
 8003bb8:	2000041c 	.word	0x2000041c
 8003bbc:	0800b019 	.word	0x0800b019
 8003bc0:	0800b0a1 	.word	0x0800b0a1
 8003bc4:	0800afb3 	.word	0x0800afb3
 8003bc8:	50000400 	.word	0x50000400
 8003bcc:	40013000 	.word	0x40013000
 8003bd0:	0800fe20 	.word	0x0800fe20
 8003bd4:	0800fb44 	.word	0x0800fb44
 8003bd8:	0800fb64 	.word	0x0800fb64
 8003bdc:	2000046c 	.word	0x2000046c
 8003be0:	2000046e 	.word	0x2000046e
 8003be4:	20000470 	.word	0x20000470
 8003be8:	0800fb80 	.word	0x0800fb80
 8003bec:	2000045c 	.word	0x2000045c
 8003bf0:	20000468 	.word	0x20000468
 8003bf4:	20000184 	.word	0x20000184
 8003bf8:	0800fbb0 	.word	0x0800fbb0
 8003bfc:	200005a4 	.word	0x200005a4
 8003c00:	0000199a 	.word	0x0000199a
 8003c04:	0800fbdc 	.word	0x0800fbdc
 8003c08:	0800fc24 	.word	0x0800fc24
 8003c0c:	0800fc48 	.word	0x0800fc48
 8003c10:	0800fc54 	.word	0x0800fc54
 8003c14:	0800fc64 	.word	0x0800fc64
 8003c18:	200005f0 	.word	0x200005f0

08003c1c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003c1c:	b590      	push	{r4, r7, lr}
 8003c1e:	b099      	sub	sp, #100	@ 0x64
 8003c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c22:	2414      	movs	r4, #20
 8003c24:	193b      	adds	r3, r7, r4
 8003c26:	0018      	movs	r0, r3
 8003c28:	234c      	movs	r3, #76	@ 0x4c
 8003c2a:	001a      	movs	r2, r3
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	f009 ff69 	bl	800db04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c32:	1d3b      	adds	r3, r7, #4
 8003c34:	0018      	movs	r0, r3
 8003c36:	2310      	movs	r3, #16
 8003c38:	001a      	movs	r2, r3
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	f009 ff62 	bl	800db04 <memset>

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c40:	2380      	movs	r3, #128	@ 0x80
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	0018      	movs	r0, r3
 8003c46:	f003 f899 	bl	8006d7c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
 8003c4a:	193b      	adds	r3, r7, r4
 8003c4c:	220a      	movs	r2, #10
 8003c4e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c50:	193b      	adds	r3, r7, r4
 8003c52:	2280      	movs	r2, #128	@ 0x80
 8003c54:	0052      	lsls	r2, r2, #1
 8003c56:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003c58:	193b      	adds	r3, r7, r4
 8003c5a:	2240      	movs	r2, #64	@ 0x40
 8003c5c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003c5e:	193b      	adds	r3, r7, r4
 8003c60:	2201      	movs	r2, #1
 8003c62:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003c64:	193b      	adds	r3, r7, r4
 8003c66:	2200      	movs	r2, #0
 8003c68:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c6a:	193b      	adds	r3, r7, r4
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	f003 f8f1 	bl	8006e54 <HAL_RCC_OscConfig>
 8003c72:	1e03      	subs	r3, r0, #0
 8003c74:	d001      	beq.n	8003c7a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8003c76:	f000 f8ed 	bl	8003e54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8003c7a:	1d3b      	adds	r3, r7, #4
 8003c7c:	2207      	movs	r2, #7
 8003c7e:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003c80:	1d3b      	adds	r3, r7, #4
 8003c82:	2201      	movs	r2, #1
 8003c84:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c86:	1d3b      	adds	r3, r7, #4
 8003c88:	2200      	movs	r2, #0
 8003c8a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003c8c:	1d3b      	adds	r3, r7, #4
 8003c8e:	2200      	movs	r2, #0
 8003c90:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003c92:	1d3b      	adds	r3, r7, #4
 8003c94:	2101      	movs	r1, #1
 8003c96:	0018      	movs	r0, r3
 8003c98:	f003 fd06 	bl	80076a8 <HAL_RCC_ClockConfig>
 8003c9c:	1e03      	subs	r3, r0, #0
 8003c9e:	d001      	beq.n	8003ca4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003ca0:	f000 f8d8 	bl	8003e54 <Error_Handler>
  }
}
 8003ca4:	46c0      	nop			@ (mov r8, r8)
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	b019      	add	sp, #100	@ 0x64
 8003caa:	bd90      	pop	{r4, r7, pc}

08003cac <read_RTCRam>:

/* USER CODE BEGIN 4 */

// Function to read a uint16_t value from RTC RAM
bool read_RTCRam(uint8_t address, uint16_t *read_data, bool lock)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6039      	str	r1, [r7, #0]
 8003cb4:	0011      	movs	r1, r2
 8003cb6:	1dfb      	adds	r3, r7, #7
 8003cb8:	1c02      	adds	r2, r0, #0
 8003cba:	701a      	strb	r2, [r3, #0]
 8003cbc:	1dbb      	adds	r3, r7, #6
 8003cbe:	1c0a      	adds	r2, r1, #0
 8003cc0:	701a      	strb	r2, [r3, #0]
  // Create a buffer to hold the data to be read
  uint8_t data[sizeof(uint16_t)];

  // Call the driver's readRam function
  if (!readRam(address, (uint8_t *)data, sizeof(data), lock))
 8003cc2:	1dfb      	adds	r3, r7, #7
 8003cc4:	7818      	ldrb	r0, [r3, #0]
 8003cc6:	1dbb      	adds	r3, r7, #6
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	220c      	movs	r2, #12
 8003ccc:	18b9      	adds	r1, r7, r2
 8003cce:	2202      	movs	r2, #2
 8003cd0:	f7fe ff48 	bl	8002b64 <readRam>
 8003cd4:	0003      	movs	r3, r0
 8003cd6:	001a      	movs	r2, r3
 8003cd8:	2301      	movs	r3, #1
 8003cda:	4053      	eors	r3, r2
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <read_RTCRam+0x3a>
  {
    // If the read operation fails, return false
    return false;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	e00d      	b.n	8003d02 <read_RTCRam+0x56>
  }

  // Combine the two bytes into a uint16_t value
  *read_data = (uint16_t)data[0] | ((uint16_t)data[1] << 8);
 8003ce6:	210c      	movs	r1, #12
 8003ce8:	187b      	adds	r3, r7, r1
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	b21a      	sxth	r2, r3
 8003cee:	187b      	adds	r3, r7, r1
 8003cf0:	785b      	ldrb	r3, [r3, #1]
 8003cf2:	021b      	lsls	r3, r3, #8
 8003cf4:	b21b      	sxth	r3, r3
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	b21b      	sxth	r3, r3
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	801a      	strh	r2, [r3, #0]

  return true;
 8003d00:	2301      	movs	r3, #1
}
 8003d02:	0018      	movs	r0, r3
 8003d04:	46bd      	mov	sp, r7
 8003d06:	b004      	add	sp, #16
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <write_ToRTCRam>:

// Function to write a uint16_t value to RTC RAM
bool write_ToRTCRam(uint8_t address, uint16_t write_data, bool lock)
{
 8003d0a:	b590      	push	{r4, r7, lr}
 8003d0c:	b085      	sub	sp, #20
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	0004      	movs	r4, r0
 8003d12:	0008      	movs	r0, r1
 8003d14:	0011      	movs	r1, r2
 8003d16:	1dfb      	adds	r3, r7, #7
 8003d18:	1c22      	adds	r2, r4, #0
 8003d1a:	701a      	strb	r2, [r3, #0]
 8003d1c:	1d3b      	adds	r3, r7, #4
 8003d1e:	1c02      	adds	r2, r0, #0
 8003d20:	801a      	strh	r2, [r3, #0]
 8003d22:	1dbb      	adds	r3, r7, #6
 8003d24:	1c0a      	adds	r2, r1, #0
 8003d26:	701a      	strb	r2, [r3, #0]
  // Create a buffer to hold the data to be written
  uint8_t data[sizeof(uint16_t)];

  // Split the uint16_t value into two bytes
  data[0] = (uint8_t)(write_data & 0xFF);        // Lower byte
 8003d28:	1d3b      	adds	r3, r7, #4
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	210c      	movs	r1, #12
 8003d30:	187b      	adds	r3, r7, r1
 8003d32:	701a      	strb	r2, [r3, #0]
  data[1] = (uint8_t)((write_data >> 8) & 0xFF); // Upper byte
 8003d34:	1d3b      	adds	r3, r7, #4
 8003d36:	881b      	ldrh	r3, [r3, #0]
 8003d38:	0a1b      	lsrs	r3, r3, #8
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	187b      	adds	r3, r7, r1
 8003d40:	705a      	strb	r2, [r3, #1]

  // Call the driver's writeRam function
  return writeRam(address, (uint8_t *)data, sizeof(data), lock);
 8003d42:	1dfb      	adds	r3, r7, #7
 8003d44:	7818      	ldrb	r0, [r3, #0]
 8003d46:	1dbb      	adds	r3, r7, #6
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	1879      	adds	r1, r7, r1
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	f7fe ff73 	bl	8002c38 <writeRam>
 8003d52:	0003      	movs	r3, r0
}
 8003d54:	0018      	movs	r0, r3
 8003d56:	46bd      	mov	sp, r7
 8003d58:	b005      	add	sp, #20
 8003d5a:	bd90      	pop	{r4, r7, pc}

08003d5c <print_error>:

void print_error(const char *func, uint32_t line)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  printf(" *** Error:  %s ,   %d\n", func, line);
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	4b09      	ldr	r3, [pc, #36]	@ (8003d90 <print_error+0x34>)
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	f001 fc81 	bl	8005674 <printf_>
  HAL_Delay(100);
 8003d72:	2064      	movs	r0, #100	@ 0x64
 8003d74:	f002 f84a 	bl	8005e0c <HAL_Delay>
  timeout_reset(__func__, __LINE__);
 8003d78:	2378      	movs	r3, #120	@ 0x78
 8003d7a:	33ff      	adds	r3, #255	@ 0xff
 8003d7c:	001a      	movs	r2, r3
 8003d7e:	4b05      	ldr	r3, [pc, #20]	@ (8003d94 <print_error+0x38>)
 8003d80:	0011      	movs	r1, r2
 8003d82:	0018      	movs	r0, r3
 8003d84:	f000 f808 	bl	8003d98 <timeout_reset>
}
 8003d88:	46c0      	nop			@ (mov r8, r8)
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	b002      	add	sp, #8
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	0800fc70 	.word	0x0800fc70
 8003d94:	0800fe34 	.word	0x0800fe34

08003d98 <timeout_reset>:

void timeout_reset(const char *func, uint32_t line)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  printf(" *** timeout_reset:  %s    %d\n", func, line);
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	6879      	ldr	r1, [r7, #4]
 8003da6:	4b07      	ldr	r3, [pc, #28]	@ (8003dc4 <timeout_reset+0x2c>)
 8003da8:	0018      	movs	r0, r3
 8003daa:	f001 fc63 	bl	8005674 <printf_>
  HAL_Delay(10);
 8003dae:	200a      	movs	r0, #10
 8003db0:	f002 f82c 	bl	8005e0c <HAL_Delay>
  deepPowerDown(10);
 8003db4:	200a      	movs	r0, #10
 8003db6:	f7fe fcb3 	bl	8002720 <deepPowerDown>
}
 8003dba:	46c0      	nop			@ (mov r8, r8)
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	b002      	add	sp, #8
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	46c0      	nop			@ (mov r8, r8)
 8003dc4:	0800fc88 	.word	0x0800fc88

08003dc8 <stream_sensor_data_forced_mode>:

// Read BME280 data
int8_t stream_sensor_data_forced_mode(struct bme280_dev *dev)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  reslt = bme280_set_sensor_mode(BME280_FORCED_MODE, dev);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	0019      	movs	r1, r3
 8003dd4:	2001      	movs	r0, #1
 8003dd6:	f006 f818 	bl	8009e0a <bme280_set_sensor_mode>
 8003dda:	0003      	movs	r3, r0
 8003ddc:	001a      	movs	r2, r3
 8003dde:	4b0c      	ldr	r3, [pc, #48]	@ (8003e10 <stream_sensor_data_forced_mode+0x48>)
 8003de0:	701a      	strb	r2, [r3, #0]
  /* Wait for the measurement to complete and print data  */

  HAL_Delay(req_delay); // 9 ms !!!
 8003de2:	4b0c      	ldr	r3, [pc, #48]	@ (8003e14 <stream_sensor_data_forced_mode+0x4c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	0018      	movs	r0, r3
 8003de8:	f002 f810 	bl	8005e0c <HAL_Delay>
  reslt = bme280_get_sensor_data(BME280_TEMP | BME280_HUM, &comp_data, dev);
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	4b0a      	ldr	r3, [pc, #40]	@ (8003e18 <stream_sensor_data_forced_mode+0x50>)
 8003df0:	0019      	movs	r1, r3
 8003df2:	2006      	movs	r0, #6
 8003df4:	f006 f8eb 	bl	8009fce <bme280_get_sensor_data>
 8003df8:	0003      	movs	r3, r0
 8003dfa:	001a      	movs	r2, r3
 8003dfc:	4b04      	ldr	r3, [pc, #16]	@ (8003e10 <stream_sensor_data_forced_mode+0x48>)
 8003dfe:	701a      	strb	r2, [r3, #0]
  return reslt;
 8003e00:	4b03      	ldr	r3, [pc, #12]	@ (8003e10 <stream_sensor_data_forced_mode+0x48>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	b25b      	sxtb	r3, r3
}
 8003e06:	0018      	movs	r0, r3
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	b002      	add	sp, #8
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	46c0      	nop			@ (mov r8, r8)
 8003e10:	20000464 	.word	0x20000464
 8003e14:	20000468 	.word	0x20000468
 8003e18:	200005a4 	.word	0x200005a4

08003e1c <go_down>:
  }
  return true;
}

void go_down(uint16_t vBat)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	0002      	movs	r2, r0
 8003e24:	1dbb      	adds	r3, r7, #6
 8003e26:	801a      	strh	r2, [r3, #0]
  /* S H U T   D O W N */

  printf("Go down\n");
 8003e28:	4b08      	ldr	r3, [pc, #32]	@ (8003e4c <go_down+0x30>)
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	f001 fc22 	bl	8005674 <printf_>
  printf("Clear...\r\n");
 8003e30:	4b07      	ldr	r3, [pc, #28]	@ (8003e50 <go_down+0x34>)
 8003e32:	0018      	movs	r0, r3
 8003e34:	f001 fc1e 	bl	8005674 <printf_>
  final_message(vBat);
 8003e38:	1dbb      	adds	r3, r7, #6
 8003e3a:	881b      	ldrh	r3, [r3, #0]
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	f008 fdbb 	bl	800c9b8 <final_message>

  // Turn all power off, exept the RTC
  // Code must be inserted here !
}
 8003e42:	46c0      	nop			@ (mov r8, r8)
 8003e44:	46bd      	mov	sp, r7
 8003e46:	b002      	add	sp, #8
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	46c0      	nop			@ (mov r8, r8)
 8003e4c:	0800fca8 	.word	0x0800fca8
 8003e50:	0800fcb4 	.word	0x0800fcb4

08003e54 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003e58:	b672      	cpsid	i
}
 8003e5a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e5c:	46c0      	nop			@ (mov r8, r8)
 8003e5e:	e7fd      	b.n	8003e5c <Error_Handler+0x8>

08003e60 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60b9      	str	r1, [r7, #8]
 8003e68:	607a      	str	r2, [r7, #4]
 8003e6a:	603b      	str	r3, [r7, #0]
 8003e6c:	210f      	movs	r1, #15
 8003e6e:	187b      	adds	r3, r7, r1
 8003e70:	1c02      	adds	r2, r0, #0
 8003e72:	701a      	strb	r2, [r3, #0]
  if (idx < maxlen) {
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d205      	bcs.n	8003e88 <_out_buffer+0x28>
    ((char*)buffer)[idx] = character;
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	18d3      	adds	r3, r2, r3
 8003e82:	187a      	adds	r2, r7, r1
 8003e84:	7812      	ldrb	r2, [r2, #0]
 8003e86:	701a      	strb	r2, [r3, #0]
  }
}
 8003e88:	46c0      	nop			@ (mov r8, r8)
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	b004      	add	sp, #16
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	607a      	str	r2, [r7, #4]
 8003e9a:	603b      	str	r3, [r7, #0]
 8003e9c:	230f      	movs	r3, #15
 8003e9e:	18fb      	adds	r3, r7, r3
 8003ea0:	1c02      	adds	r2, r0, #0
 8003ea2:	701a      	strb	r2, [r3, #0]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8003ea4:	46c0      	nop			@ (mov r8, r8)
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	b004      	add	sp, #16
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60b9      	str	r1, [r7, #8]
 8003eb4:	607a      	str	r2, [r7, #4]
 8003eb6:	603b      	str	r3, [r7, #0]
 8003eb8:	210f      	movs	r1, #15
 8003eba:	187b      	adds	r3, r7, r1
 8003ebc:	1c02      	adds	r2, r0, #0
 8003ebe:	701a      	strb	r2, [r3, #0]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8003ec0:	000a      	movs	r2, r1
 8003ec2:	18bb      	adds	r3, r7, r2
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d004      	beq.n	8003ed4 <_out_char+0x28>
    _putchar(character);
 8003eca:	18bb      	adds	r3, r7, r2
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f001 fc0c 	bl	80056ec <_putchar>
  }
}
 8003ed4:	46c0      	nop			@ (mov r8, r8)
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	b004      	add	sp, #16
 8003eda:	bd80      	pop	{r7, pc}

08003edc <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	60fb      	str	r3, [r7, #12]
 8003eea:	e002      	b.n	8003ef2 <_strnlen_s+0x16>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d004      	beq.n	8003f04 <_strnlen_s+0x28>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	1e5a      	subs	r2, r3, #1
 8003efe:	603a      	str	r2, [r7, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1f3      	bne.n	8003eec <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	1ad3      	subs	r3, r2, r3
}
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	b004      	add	sp, #16
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b082      	sub	sp, #8
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	0002      	movs	r2, r0
 8003f1a:	1dfb      	adds	r3, r7, #7
 8003f1c:	701a      	strb	r2, [r3, #0]
  return (ch >= '0') && (ch <= '9');
 8003f1e:	1dfb      	adds	r3, r7, #7
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	2b2f      	cmp	r3, #47	@ 0x2f
 8003f24:	d905      	bls.n	8003f32 <_is_digit+0x20>
 8003f26:	1dfb      	adds	r3, r7, #7
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	2b39      	cmp	r3, #57	@ 0x39
 8003f2c:	d801      	bhi.n	8003f32 <_is_digit+0x20>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <_is_digit+0x22>
 8003f32:	2300      	movs	r3, #0
 8003f34:	1c1a      	adds	r2, r3, #0
 8003f36:	2301      	movs	r3, #1
 8003f38:	4013      	ands	r3, r2
 8003f3a:	b2db      	uxtb	r3, r3
}
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	b002      	add	sp, #8
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8003f50:	e00e      	b.n	8003f70 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	0013      	movs	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	189b      	adds	r3, r3, r2
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	1c59      	adds	r1, r3, #1
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	6011      	str	r1, [r2, #0]
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	18c3      	adds	r3, r0, r3
 8003f6c:	3b30      	subs	r3, #48	@ 0x30
 8003f6e:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	0018      	movs	r0, r3
 8003f78:	f7ff ffcb 	bl	8003f12 <_is_digit>
 8003f7c:	1e03      	subs	r3, r0, #0
 8003f7e:	d1e8      	bne.n	8003f52 <_atoi+0xe>
  }
  return i;
 8003f80:	68fb      	ldr	r3, [r7, #12]
}
 8003f82:	0018      	movs	r0, r3
 8003f84:	46bd      	mov	sp, r7
 8003f86:	b004      	add	sp, #16
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8003f8a:	b590      	push	{r4, r7, lr}
 8003f8c:	b087      	sub	sp, #28
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	60f8      	str	r0, [r7, #12]
 8003f92:	60b9      	str	r1, [r7, #8]
 8003f94:	607a      	str	r2, [r7, #4]
 8003f96:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8003f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	d124      	bne.n	8003fee <_out_rev+0x64>
 8003fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	4013      	ands	r3, r2
 8003faa:	d120      	bne.n	8003fee <_out_rev+0x64>
    for (size_t i = len; i < width; i++) {
 8003fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	e00a      	b.n	8003fc8 <_out_rev+0x3e>
      out(' ', buffer, idx++, maxlen);
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	1c53      	adds	r3, r2, #1
 8003fb6:	607b      	str	r3, [r7, #4]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	68b9      	ldr	r1, [r7, #8]
 8003fbc:	68fc      	ldr	r4, [r7, #12]
 8003fbe:	2020      	movs	r0, #32
 8003fc0:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	617b      	str	r3, [r7, #20]
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d3f0      	bcc.n	8003fb2 <_out_rev+0x28>
    }
  }

  // reverse string
  while (len) {
 8003fd0:	e00d      	b.n	8003fee <_out_rev+0x64>
    out(buf[--len], buffer, idx++, maxlen);
 8003fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fdc:	18d3      	adds	r3, r2, r3
 8003fde:	7818      	ldrb	r0, [r3, #0]
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	1c53      	adds	r3, r2, #1
 8003fe4:	607b      	str	r3, [r7, #4]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68b9      	ldr	r1, [r7, #8]
 8003fea:	68fc      	ldr	r4, [r7, #12]
 8003fec:	47a0      	blx	r4
  while (len) {
 8003fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1ee      	bne.n	8003fd2 <_out_rev+0x48>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8003ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	d00e      	beq.n	800401a <_out_rev+0x90>
    while (idx - start_idx < width) {
 8003ffc:	e007      	b.n	800400e <_out_rev+0x84>
      out(' ', buffer, idx++, maxlen);
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	1c53      	adds	r3, r2, #1
 8004002:	607b      	str	r3, [r7, #4]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	68b9      	ldr	r1, [r7, #8]
 8004008:	68fc      	ldr	r4, [r7, #12]
 800400a:	2020      	movs	r0, #32
 800400c:	47a0      	blx	r4
    while (idx - start_idx < width) {
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004016:	429a      	cmp	r2, r3
 8004018:	d8f1      	bhi.n	8003ffe <_out_rev+0x74>
    }
  }

  return idx;
 800401a:	687b      	ldr	r3, [r7, #4]
}
 800401c:	0018      	movs	r0, r3
 800401e:	46bd      	mov	sp, r7
 8004020:	b007      	add	sp, #28
 8004022:	bd90      	pop	{r4, r7, pc}

08004024 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004024:	b590      	push	{r4, r7, lr}
 8004026:	b089      	sub	sp, #36	@ 0x24
 8004028:	af04      	add	r7, sp, #16
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
 8004030:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8004032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004034:	2202      	movs	r2, #2
 8004036:	4013      	ands	r3, r2
 8004038:	d134      	bne.n	80040a4 <_ntoa_format+0x80>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800403a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800403c:	2b00      	cmp	r3, #0
 800403e:	d017      	beq.n	8004070 <_ntoa_format+0x4c>
 8004040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004042:	2201      	movs	r2, #1
 8004044:	4013      	ands	r3, r2
 8004046:	d013      	beq.n	8004070 <_ntoa_format+0x4c>
 8004048:	2328      	movs	r3, #40	@ 0x28
 800404a:	18fb      	adds	r3, r7, r3
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d103      	bne.n	800405a <_ntoa_format+0x36>
 8004052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004054:	220c      	movs	r2, #12
 8004056:	4013      	ands	r3, r2
 8004058:	d00a      	beq.n	8004070 <_ntoa_format+0x4c>
      width--;
 800405a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800405c:	3b01      	subs	r3, #1
 800405e:	637b      	str	r3, [r7, #52]	@ 0x34
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004060:	e006      	b.n	8004070 <_ntoa_format+0x4c>
      buf[len++] = '0';
 8004062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004064:	1c5a      	adds	r2, r3, #1
 8004066:	627a      	str	r2, [r7, #36]	@ 0x24
 8004068:	6a3a      	ldr	r2, [r7, #32]
 800406a:	18d3      	adds	r3, r2, r3
 800406c:	2230      	movs	r2, #48	@ 0x30
 800406e:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004070:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004074:	429a      	cmp	r2, r3
 8004076:	d20a      	bcs.n	800408e <_ntoa_format+0x6a>
 8004078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407a:	2b1f      	cmp	r3, #31
 800407c:	d9f1      	bls.n	8004062 <_ntoa_format+0x3e>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800407e:	e006      	b.n	800408e <_ntoa_format+0x6a>
      buf[len++] = '0';
 8004080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	627a      	str	r2, [r7, #36]	@ 0x24
 8004086:	6a3a      	ldr	r2, [r7, #32]
 8004088:	18d3      	adds	r3, r2, r3
 800408a:	2230      	movs	r2, #48	@ 0x30
 800408c:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800408e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004090:	2201      	movs	r2, #1
 8004092:	4013      	ands	r3, r2
 8004094:	d006      	beq.n	80040a4 <_ntoa_format+0x80>
 8004096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800409a:	429a      	cmp	r2, r3
 800409c:	d202      	bcs.n	80040a4 <_ntoa_format+0x80>
 800409e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a0:	2b1f      	cmp	r3, #31
 80040a2:	d9ed      	bls.n	8004080 <_ntoa_format+0x5c>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 80040a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040a6:	2210      	movs	r2, #16
 80040a8:	4013      	ands	r3, r2
 80040aa:	d056      	beq.n	800415a <_ntoa_format+0x136>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80040ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80040ae:	2380      	movs	r3, #128	@ 0x80
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	4013      	ands	r3, r2
 80040b4:	d116      	bne.n	80040e4 <_ntoa_format+0xc0>
 80040b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d013      	beq.n	80040e4 <_ntoa_format+0xc0>
 80040bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d003      	beq.n	80040cc <_ntoa_format+0xa8>
 80040c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d10b      	bne.n	80040e4 <_ntoa_format+0xc0>
      len--;
 80040cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ce:	3b01      	subs	r3, #1
 80040d0:	627b      	str	r3, [r7, #36]	@ 0x24
      if (len && (base == 16U)) {
 80040d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d005      	beq.n	80040e4 <_ntoa_format+0xc0>
 80040d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040da:	2b10      	cmp	r3, #16
 80040dc:	d102      	bne.n	80040e4 <_ntoa_format+0xc0>
        len--;
 80040de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e0:	3b01      	subs	r3, #1
 80040e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80040e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040e6:	2b10      	cmp	r3, #16
 80040e8:	d10e      	bne.n	8004108 <_ntoa_format+0xe4>
 80040ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ec:	2220      	movs	r2, #32
 80040ee:	4013      	ands	r3, r2
 80040f0:	d10a      	bne.n	8004108 <_ntoa_format+0xe4>
 80040f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f4:	2b1f      	cmp	r3, #31
 80040f6:	d807      	bhi.n	8004108 <_ntoa_format+0xe4>
      buf[len++] = 'x';
 80040f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fa:	1c5a      	adds	r2, r3, #1
 80040fc:	627a      	str	r2, [r7, #36]	@ 0x24
 80040fe:	6a3a      	ldr	r2, [r7, #32]
 8004100:	18d3      	adds	r3, r2, r3
 8004102:	2278      	movs	r2, #120	@ 0x78
 8004104:	701a      	strb	r2, [r3, #0]
 8004106:	e01e      	b.n	8004146 <_ntoa_format+0x122>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800410a:	2b10      	cmp	r3, #16
 800410c:	d10e      	bne.n	800412c <_ntoa_format+0x108>
 800410e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004110:	2220      	movs	r2, #32
 8004112:	4013      	ands	r3, r2
 8004114:	d00a      	beq.n	800412c <_ntoa_format+0x108>
 8004116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004118:	2b1f      	cmp	r3, #31
 800411a:	d807      	bhi.n	800412c <_ntoa_format+0x108>
      buf[len++] = 'X';
 800411c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411e:	1c5a      	adds	r2, r3, #1
 8004120:	627a      	str	r2, [r7, #36]	@ 0x24
 8004122:	6a3a      	ldr	r2, [r7, #32]
 8004124:	18d3      	adds	r3, r2, r3
 8004126:	2258      	movs	r2, #88	@ 0x58
 8004128:	701a      	strb	r2, [r3, #0]
 800412a:	e00c      	b.n	8004146 <_ntoa_format+0x122>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800412c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800412e:	2b02      	cmp	r3, #2
 8004130:	d109      	bne.n	8004146 <_ntoa_format+0x122>
 8004132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004134:	2b1f      	cmp	r3, #31
 8004136:	d806      	bhi.n	8004146 <_ntoa_format+0x122>
      buf[len++] = 'b';
 8004138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413a:	1c5a      	adds	r2, r3, #1
 800413c:	627a      	str	r2, [r7, #36]	@ 0x24
 800413e:	6a3a      	ldr	r2, [r7, #32]
 8004140:	18d3      	adds	r3, r2, r3
 8004142:	2262      	movs	r2, #98	@ 0x62
 8004144:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8004146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004148:	2b1f      	cmp	r3, #31
 800414a:	d806      	bhi.n	800415a <_ntoa_format+0x136>
      buf[len++] = '0';
 800414c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	627a      	str	r2, [r7, #36]	@ 0x24
 8004152:	6a3a      	ldr	r2, [r7, #32]
 8004154:	18d3      	adds	r3, r2, r3
 8004156:	2230      	movs	r2, #48	@ 0x30
 8004158:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800415a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415c:	2b1f      	cmp	r3, #31
 800415e:	d823      	bhi.n	80041a8 <_ntoa_format+0x184>
    if (negative) {
 8004160:	2328      	movs	r3, #40	@ 0x28
 8004162:	18fb      	adds	r3, r7, r3
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d007      	beq.n	800417a <_ntoa_format+0x156>
      buf[len++] = '-';
 800416a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004170:	6a3a      	ldr	r2, [r7, #32]
 8004172:	18d3      	adds	r3, r2, r3
 8004174:	222d      	movs	r2, #45	@ 0x2d
 8004176:	701a      	strb	r2, [r3, #0]
 8004178:	e016      	b.n	80041a8 <_ntoa_format+0x184>
    }
    else if (flags & FLAGS_PLUS) {
 800417a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800417c:	2204      	movs	r2, #4
 800417e:	4013      	ands	r3, r2
 8004180:	d007      	beq.n	8004192 <_ntoa_format+0x16e>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8004182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	627a      	str	r2, [r7, #36]	@ 0x24
 8004188:	6a3a      	ldr	r2, [r7, #32]
 800418a:	18d3      	adds	r3, r2, r3
 800418c:	222b      	movs	r2, #43	@ 0x2b
 800418e:	701a      	strb	r2, [r3, #0]
 8004190:	e00a      	b.n	80041a8 <_ntoa_format+0x184>
    }
    else if (flags & FLAGS_SPACE) {
 8004192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004194:	2208      	movs	r2, #8
 8004196:	4013      	ands	r3, r2
 8004198:	d006      	beq.n	80041a8 <_ntoa_format+0x184>
      buf[len++] = ' ';
 800419a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419c:	1c5a      	adds	r2, r3, #1
 800419e:	627a      	str	r2, [r7, #36]	@ 0x24
 80041a0:	6a3a      	ldr	r2, [r7, #32]
 80041a2:	18d3      	adds	r3, r2, r3
 80041a4:	2220      	movs	r2, #32
 80041a6:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80041a8:	683c      	ldr	r4, [r7, #0]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	68b9      	ldr	r1, [r7, #8]
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041b2:	9303      	str	r3, [sp, #12]
 80041b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041b6:	9302      	str	r3, [sp, #8]
 80041b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ba:	9301      	str	r3, [sp, #4]
 80041bc:	6a3b      	ldr	r3, [r7, #32]
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	0023      	movs	r3, r4
 80041c2:	f7ff fee2 	bl	8003f8a <_out_rev>
 80041c6:	0003      	movs	r3, r0
}
 80041c8:	0018      	movs	r0, r3
 80041ca:	46bd      	mov	sp, r7
 80041cc:	b005      	add	sp, #20
 80041ce:	bd90      	pop	{r4, r7, pc}

080041d0 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80041d0:	b590      	push	{r4, r7, lr}
 80041d2:	b097      	sub	sp, #92	@ 0x5c
 80041d4:	af08      	add	r7, sp, #32
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80041de:	2300      	movs	r3, #0
 80041e0:	637b      	str	r3, [r7, #52]	@ 0x34

  // no hash for 0 values
  if (!value) {
 80041e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d103      	bne.n	80041f0 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 80041e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041ea:	2210      	movs	r2, #16
 80041ec:	4393      	bics	r3, r2
 80041ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80041f0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80041f2:	2380      	movs	r3, #128	@ 0x80
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	4013      	ands	r3, r2
 80041f8:	d002      	beq.n	8004200 <_ntoa_long+0x30>
 80041fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d033      	beq.n	8004268 <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 8004200:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004202:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004204:	0018      	movs	r0, r3
 8004206:	f7fc f821 	bl	800024c <__aeabi_uidivmod>
 800420a:	000b      	movs	r3, r1
 800420c:	001a      	movs	r2, r3
 800420e:	2133      	movs	r1, #51	@ 0x33
 8004210:	187b      	adds	r3, r7, r1
 8004212:	701a      	strb	r2, [r3, #0]
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8004214:	000a      	movs	r2, r1
 8004216:	18bb      	adds	r3, r7, r2
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b09      	cmp	r3, #9
 800421c:	d804      	bhi.n	8004228 <_ntoa_long+0x58>
 800421e:	18bb      	adds	r3, r7, r2
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	3330      	adds	r3, #48	@ 0x30
 8004224:	b2da      	uxtb	r2, r3
 8004226:	e00d      	b.n	8004244 <_ntoa_long+0x74>
 8004228:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800422a:	2220      	movs	r2, #32
 800422c:	4013      	ands	r3, r2
 800422e:	d001      	beq.n	8004234 <_ntoa_long+0x64>
 8004230:	2341      	movs	r3, #65	@ 0x41
 8004232:	e000      	b.n	8004236 <_ntoa_long+0x66>
 8004234:	2361      	movs	r3, #97	@ 0x61
 8004236:	2233      	movs	r2, #51	@ 0x33
 8004238:	18ba      	adds	r2, r7, r2
 800423a:	7812      	ldrb	r2, [r2, #0]
 800423c:	189b      	adds	r3, r3, r2
 800423e:	b2db      	uxtb	r3, r3
 8004240:	3b0a      	subs	r3, #10
 8004242:	b2da      	uxtb	r2, r3
 8004244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004246:	1c59      	adds	r1, r3, #1
 8004248:	6379      	str	r1, [r7, #52]	@ 0x34
 800424a:	2110      	movs	r1, #16
 800424c:	1879      	adds	r1, r7, r1
 800424e:	54ca      	strb	r2, [r1, r3]
      value /= base;
 8004250:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004252:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8004254:	f7fb ff74 	bl	8000140 <__udivsi3>
 8004258:	0003      	movs	r3, r0
 800425a:	64bb      	str	r3, [r7, #72]	@ 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800425c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800425e:	2b00      	cmp	r3, #0
 8004260:	d002      	beq.n	8004268 <_ntoa_long+0x98>
 8004262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004264:	2b1f      	cmp	r3, #31
 8004266:	d9cb      	bls.n	8004200 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8004268:	683c      	ldr	r4, [r7, #0]
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	68b9      	ldr	r1, [r7, #8]
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004272:	9306      	str	r3, [sp, #24]
 8004274:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004276:	9305      	str	r3, [sp, #20]
 8004278:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800427a:	9304      	str	r3, [sp, #16]
 800427c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800427e:	9303      	str	r3, [sp, #12]
 8004280:	234c      	movs	r3, #76	@ 0x4c
 8004282:	18fb      	adds	r3, r7, r3
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	9302      	str	r3, [sp, #8]
 8004288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800428a:	9301      	str	r3, [sp, #4]
 800428c:	2310      	movs	r3, #16
 800428e:	18fb      	adds	r3, r7, r3
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	0023      	movs	r3, r4
 8004294:	f7ff fec6 	bl	8004024 <_ntoa_format>
 8004298:	0003      	movs	r3, r0
}
 800429a:	0018      	movs	r0, r3
 800429c:	46bd      	mov	sp, r7
 800429e:	b00f      	add	sp, #60	@ 0x3c
 80042a0:	bd90      	pop	{r4, r7, pc}

080042a2 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80042a2:	b5b0      	push	{r4, r5, r7, lr}
 80042a4:	b096      	sub	sp, #88	@ 0x58
 80042a6:	af08      	add	r7, sp, #32
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	607a      	str	r2, [r7, #4]
 80042ae:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	637b      	str	r3, [r7, #52]	@ 0x34

  // no hash for 0 values
  if (!value) {
 80042b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042b8:	4313      	orrs	r3, r2
 80042ba:	d103      	bne.n	80042c4 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 80042bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042be:	2210      	movs	r2, #16
 80042c0:	4393      	bics	r3, r2
 80042c2:	66bb      	str	r3, [r7, #104]	@ 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80042c4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80042c6:	2380      	movs	r3, #128	@ 0x80
 80042c8:	00db      	lsls	r3, r3, #3
 80042ca:	4013      	ands	r3, r2
 80042cc:	d003      	beq.n	80042d6 <_ntoa_long_long+0x34>
 80042ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042d2:	4313      	orrs	r3, r2
 80042d4:	d03a      	beq.n	800434c <_ntoa_long_long+0xaa>
    do {
      const char digit = (char)(value % base);
 80042d6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80042d8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80042da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80042dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042de:	f7fc f901 	bl	80004e4 <__aeabi_uldivmod>
 80042e2:	0010      	movs	r0, r2
 80042e4:	0019      	movs	r1, r3
 80042e6:	2433      	movs	r4, #51	@ 0x33
 80042e8:	193b      	adds	r3, r7, r4
 80042ea:	1c02      	adds	r2, r0, #0
 80042ec:	701a      	strb	r2, [r3, #0]
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80042ee:	0022      	movs	r2, r4
 80042f0:	18bb      	adds	r3, r7, r2
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	2b09      	cmp	r3, #9
 80042f6:	d804      	bhi.n	8004302 <_ntoa_long_long+0x60>
 80042f8:	18bb      	adds	r3, r7, r2
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	3330      	adds	r3, #48	@ 0x30
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	e00d      	b.n	800431e <_ntoa_long_long+0x7c>
 8004302:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004304:	2220      	movs	r2, #32
 8004306:	4013      	ands	r3, r2
 8004308:	d001      	beq.n	800430e <_ntoa_long_long+0x6c>
 800430a:	2341      	movs	r3, #65	@ 0x41
 800430c:	e000      	b.n	8004310 <_ntoa_long_long+0x6e>
 800430e:	2361      	movs	r3, #97	@ 0x61
 8004310:	2233      	movs	r2, #51	@ 0x33
 8004312:	18ba      	adds	r2, r7, r2
 8004314:	7812      	ldrb	r2, [r2, #0]
 8004316:	189b      	adds	r3, r3, r2
 8004318:	b2db      	uxtb	r3, r3
 800431a:	3b0a      	subs	r3, #10
 800431c:	b2da      	uxtb	r2, r3
 800431e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004320:	1c59      	adds	r1, r3, #1
 8004322:	6379      	str	r1, [r7, #52]	@ 0x34
 8004324:	2110      	movs	r1, #16
 8004326:	1879      	adds	r1, r7, r1
 8004328:	54ca      	strb	r2, [r1, r3]
      value /= base;
 800432a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800432c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800432e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8004330:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004332:	f7fc f8d7 	bl	80004e4 <__aeabi_uldivmod>
 8004336:	0002      	movs	r2, r0
 8004338:	000b      	movs	r3, r1
 800433a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800433c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800433e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004340:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004342:	4313      	orrs	r3, r2
 8004344:	d002      	beq.n	800434c <_ntoa_long_long+0xaa>
 8004346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004348:	2b1f      	cmp	r3, #31
 800434a:	d9c4      	bls.n	80042d6 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800434c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800434e:	683d      	ldr	r5, [r7, #0]
 8004350:	687c      	ldr	r4, [r7, #4]
 8004352:	68b9      	ldr	r1, [r7, #8]
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004358:	9206      	str	r2, [sp, #24]
 800435a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800435c:	9205      	str	r2, [sp, #20]
 800435e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004360:	9204      	str	r2, [sp, #16]
 8004362:	9303      	str	r3, [sp, #12]
 8004364:	2350      	movs	r3, #80	@ 0x50
 8004366:	18fb      	adds	r3, r7, r3
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	9302      	str	r3, [sp, #8]
 800436c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800436e:	9301      	str	r3, [sp, #4]
 8004370:	2310      	movs	r3, #16
 8004372:	18fb      	adds	r3, r7, r3
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	002b      	movs	r3, r5
 8004378:	0022      	movs	r2, r4
 800437a:	f7ff fe53 	bl	8004024 <_ntoa_format>
 800437e:	0003      	movs	r3, r0
}
 8004380:	0018      	movs	r0, r3
 8004382:	46bd      	mov	sp, r7
 8004384:	b00e      	add	sp, #56	@ 0x38
 8004386:	bdb0      	pop	{r4, r5, r7, pc}

08004388 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800438a:	b09d      	sub	sp, #116	@ 0x74
 800438c:	af06      	add	r7, sp, #24
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
 8004394:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8004396:	2300      	movs	r3, #0
 8004398:	657b      	str	r3, [r7, #84]	@ 0x54
  double diff = 0.0;
 800439a:	2200      	movs	r2, #0
 800439c:	2300      	movs	r3, #0
 800439e:	63ba      	str	r2, [r7, #56]	@ 0x38
 80043a0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 80043a2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80043a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043a6:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80043a8:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80043aa:	f7fc f84f 	bl	800044c <__aeabi_dcmpeq>
 80043ae:	1e03      	subs	r3, r0, #0
 80043b0:	d112      	bne.n	80043d8 <_ftoa+0x50>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80043b2:	683c      	ldr	r4, [r7, #0]
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	68b9      	ldr	r1, [r7, #8]
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	2380      	movs	r3, #128	@ 0x80
 80043bc:	18fb      	adds	r3, r7, r3
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	9303      	str	r3, [sp, #12]
 80043c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80043c4:	9302      	str	r3, [sp, #8]
 80043c6:	2303      	movs	r3, #3
 80043c8:	9301      	str	r3, [sp, #4]
 80043ca:	4bbf      	ldr	r3, [pc, #764]	@ (80046c8 <_ftoa+0x340>)
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	0023      	movs	r3, r4
 80043d0:	f7ff fddb 	bl	8003f8a <_out_rev>
 80043d4:	0003      	movs	r3, r0
 80043d6:	e211      	b.n	80047fc <_ftoa+0x474>
  if (value < -DBL_MAX)
 80043d8:	2201      	movs	r2, #1
 80043da:	4252      	negs	r2, r2
 80043dc:	4bbb      	ldr	r3, [pc, #748]	@ (80046cc <_ftoa+0x344>)
 80043de:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80043e0:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80043e2:	f7fc f839 	bl	8000458 <__aeabi_dcmplt>
 80043e6:	1e03      	subs	r3, r0, #0
 80043e8:	d012      	beq.n	8004410 <_ftoa+0x88>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80043ea:	683c      	ldr	r4, [r7, #0]
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	68b9      	ldr	r1, [r7, #8]
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	2380      	movs	r3, #128	@ 0x80
 80043f4:	18fb      	adds	r3, r7, r3
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	9303      	str	r3, [sp, #12]
 80043fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80043fc:	9302      	str	r3, [sp, #8]
 80043fe:	2304      	movs	r3, #4
 8004400:	9301      	str	r3, [sp, #4]
 8004402:	4bb3      	ldr	r3, [pc, #716]	@ (80046d0 <_ftoa+0x348>)
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	0023      	movs	r3, r4
 8004408:	f7ff fdbf 	bl	8003f8a <_out_rev>
 800440c:	0003      	movs	r3, r0
 800440e:	e1f5      	b.n	80047fc <_ftoa+0x474>
  if (value > DBL_MAX)
 8004410:	2201      	movs	r2, #1
 8004412:	4252      	negs	r2, r2
 8004414:	4baf      	ldr	r3, [pc, #700]	@ (80046d4 <_ftoa+0x34c>)
 8004416:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8004418:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800441a:	f7fc f831 	bl	8000480 <__aeabi_dcmpgt>
 800441e:	1e03      	subs	r3, r0, #0
 8004420:	d024      	beq.n	800446c <_ftoa+0xe4>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8004422:	2380      	movs	r3, #128	@ 0x80
 8004424:	18fb      	adds	r3, r7, r3
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2204      	movs	r2, #4
 800442a:	4013      	ands	r3, r2
 800442c:	d001      	beq.n	8004432 <_ftoa+0xaa>
 800442e:	4baa      	ldr	r3, [pc, #680]	@ (80046d8 <_ftoa+0x350>)
 8004430:	e000      	b.n	8004434 <_ftoa+0xac>
 8004432:	4baa      	ldr	r3, [pc, #680]	@ (80046dc <_ftoa+0x354>)
 8004434:	2280      	movs	r2, #128	@ 0x80
 8004436:	18ba      	adds	r2, r7, r2
 8004438:	6812      	ldr	r2, [r2, #0]
 800443a:	2104      	movs	r1, #4
 800443c:	400a      	ands	r2, r1
 800443e:	d001      	beq.n	8004444 <_ftoa+0xbc>
 8004440:	2204      	movs	r2, #4
 8004442:	e000      	b.n	8004446 <_ftoa+0xbe>
 8004444:	2203      	movs	r2, #3
 8004446:	683e      	ldr	r6, [r7, #0]
 8004448:	687d      	ldr	r5, [r7, #4]
 800444a:	68bc      	ldr	r4, [r7, #8]
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	2180      	movs	r1, #128	@ 0x80
 8004450:	1879      	adds	r1, r7, r1
 8004452:	6809      	ldr	r1, [r1, #0]
 8004454:	9103      	str	r1, [sp, #12]
 8004456:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004458:	9102      	str	r1, [sp, #8]
 800445a:	9201      	str	r2, [sp, #4]
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	0033      	movs	r3, r6
 8004460:	002a      	movs	r2, r5
 8004462:	0021      	movs	r1, r4
 8004464:	f7ff fd91 	bl	8003f8a <_out_rev>
 8004468:	0003      	movs	r3, r0
 800446a:	e1c7      	b.n	80047fc <_ftoa+0x474>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800446c:	2200      	movs	r2, #0
 800446e:	4b9c      	ldr	r3, [pc, #624]	@ (80046e0 <_ftoa+0x358>)
 8004470:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8004472:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8004474:	f7fc f804 	bl	8000480 <__aeabi_dcmpgt>
 8004478:	1e03      	subs	r3, r0, #0
 800447a:	d107      	bne.n	800448c <_ftoa+0x104>
 800447c:	2200      	movs	r2, #0
 800447e:	4b99      	ldr	r3, [pc, #612]	@ (80046e4 <_ftoa+0x35c>)
 8004480:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8004482:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8004484:	f7fb ffe8 	bl	8000458 <__aeabi_dcmplt>
 8004488:	1e03      	subs	r3, r0, #0
 800448a:	d015      	beq.n	80044b8 <_ftoa+0x130>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800448c:	683d      	ldr	r5, [r7, #0]
 800448e:	687c      	ldr	r4, [r7, #4]
 8004490:	68b9      	ldr	r1, [r7, #8]
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	2380      	movs	r3, #128	@ 0x80
 8004496:	18fb      	adds	r3, r7, r3
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	9304      	str	r3, [sp, #16]
 800449c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800449e:	9303      	str	r3, [sp, #12]
 80044a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044a2:	9302      	str	r3, [sp, #8]
 80044a4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80044a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044a8:	9200      	str	r2, [sp, #0]
 80044aa:	9301      	str	r3, [sp, #4]
 80044ac:	002b      	movs	r3, r5
 80044ae:	0022      	movs	r2, r4
 80044b0:	f000 f9a8 	bl	8004804 <_etoa>
 80044b4:	0003      	movs	r3, r0
 80044b6:	e1a1      	b.n	80047fc <_ftoa+0x474>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 80044b8:	2453      	movs	r4, #83	@ 0x53
 80044ba:	193b      	adds	r3, r7, r4
 80044bc:	2200      	movs	r2, #0
 80044be:	701a      	strb	r2, [r3, #0]
  if (value < 0) {
 80044c0:	2200      	movs	r2, #0
 80044c2:	2300      	movs	r3, #0
 80044c4:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80044c6:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80044c8:	f7fb ffc6 	bl	8000458 <__aeabi_dcmplt>
 80044cc:	1e03      	subs	r3, r0, #0
 80044ce:	d00c      	beq.n	80044ea <_ftoa+0x162>
    negative = true;
 80044d0:	193b      	adds	r3, r7, r4
 80044d2:	2201      	movs	r2, #1
 80044d4:	701a      	strb	r2, [r3, #0]
    value = 0 - value;
 80044d6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80044d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044da:	2000      	movs	r0, #0
 80044dc:	2100      	movs	r1, #0
 80044de:	f7fd fb7b 	bl	8001bd8 <__aeabi_dsub>
 80044e2:	0002      	movs	r2, r0
 80044e4:	000b      	movs	r3, r1
 80044e6:	673a      	str	r2, [r7, #112]	@ 0x70
 80044e8:	677b      	str	r3, [r7, #116]	@ 0x74
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 80044ea:	2380      	movs	r3, #128	@ 0x80
 80044ec:	18fb      	adds	r3, r7, r3
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	2380      	movs	r3, #128	@ 0x80
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	4013      	ands	r3, r2
 80044f6:	d10c      	bne.n	8004512 <_ftoa+0x18a>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80044f8:	2306      	movs	r3, #6
 80044fa:	67bb      	str	r3, [r7, #120]	@ 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80044fc:	e009      	b.n	8004512 <_ftoa+0x18a>
    buf[len++] = '0';
 80044fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004500:	1c5a      	adds	r2, r3, #1
 8004502:	657a      	str	r2, [r7, #84]	@ 0x54
 8004504:	2210      	movs	r2, #16
 8004506:	18ba      	adds	r2, r7, r2
 8004508:	2130      	movs	r1, #48	@ 0x30
 800450a:	54d1      	strb	r1, [r2, r3]
    prec--;
 800450c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800450e:	3b01      	subs	r3, #1
 8004510:	67bb      	str	r3, [r7, #120]	@ 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8004512:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004514:	2b1f      	cmp	r3, #31
 8004516:	d802      	bhi.n	800451e <_ftoa+0x196>
 8004518:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800451a:	2b09      	cmp	r3, #9
 800451c:	d8ef      	bhi.n	80044fe <_ftoa+0x176>
  }

  int whole = (int)value;
 800451e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8004520:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8004522:	f7fd ff17 	bl	8002354 <__aeabi_d2iz>
 8004526:	0003      	movs	r3, r0
 8004528:	64fb      	str	r3, [r7, #76]	@ 0x4c
  double tmp = (value - whole) * pow10[prec];
 800452a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800452c:	f7fd ff4e 	bl	80023cc <__aeabi_i2d>
 8004530:	0002      	movs	r2, r0
 8004532:	000b      	movs	r3, r1
 8004534:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8004536:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8004538:	f7fd fb4e 	bl	8001bd8 <__aeabi_dsub>
 800453c:	0002      	movs	r2, r0
 800453e:	000b      	movs	r3, r1
 8004540:	0010      	movs	r0, r2
 8004542:	0019      	movs	r1, r3
 8004544:	4a68      	ldr	r2, [pc, #416]	@ (80046e8 <_ftoa+0x360>)
 8004546:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004548:	00db      	lsls	r3, r3, #3
 800454a:	18d3      	adds	r3, r2, r3
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f7fd f87a 	bl	8001648 <__aeabi_dmul>
 8004554:	0002      	movs	r2, r0
 8004556:	000b      	movs	r3, r1
 8004558:	633a      	str	r2, [r7, #48]	@ 0x30
 800455a:	637b      	str	r3, [r7, #52]	@ 0x34
  unsigned long frac = (unsigned long)tmp;
 800455c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800455e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004560:	f7fb ffe0 	bl	8000524 <__aeabi_d2uiz>
 8004564:	0003      	movs	r3, r0
 8004566:	64bb      	str	r3, [r7, #72]	@ 0x48
  diff = tmp - frac;
 8004568:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800456a:	f7fd ff5d 	bl	8002428 <__aeabi_ui2d>
 800456e:	0002      	movs	r2, r0
 8004570:	000b      	movs	r3, r1
 8004572:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004574:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004576:	f7fd fb2f 	bl	8001bd8 <__aeabi_dsub>
 800457a:	0002      	movs	r2, r0
 800457c:	000b      	movs	r3, r1
 800457e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004580:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (diff > 0.5) {
 8004582:	2200      	movs	r2, #0
 8004584:	4b59      	ldr	r3, [pc, #356]	@ (80046ec <_ftoa+0x364>)
 8004586:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004588:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800458a:	f7fb ff79 	bl	8000480 <__aeabi_dcmpgt>
 800458e:	1e03      	subs	r3, r0, #0
 8004590:	d015      	beq.n	80045be <_ftoa+0x236>
    ++frac;
 8004592:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004594:	3301      	adds	r3, #1
 8004596:	64bb      	str	r3, [r7, #72]	@ 0x48
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8004598:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800459a:	f7fd ff45 	bl	8002428 <__aeabi_ui2d>
 800459e:	4a52      	ldr	r2, [pc, #328]	@ (80046e8 <_ftoa+0x360>)
 80045a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	18d3      	adds	r3, r2, r3
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f7fb ff73 	bl	8000494 <__aeabi_dcmpge>
 80045ae:	1e03      	subs	r3, r0, #0
 80045b0:	d017      	beq.n	80045e2 <_ftoa+0x25a>
      frac = 0;
 80045b2:	2300      	movs	r3, #0
 80045b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      ++whole;
 80045b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045b8:	3301      	adds	r3, #1
 80045ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045bc:	e011      	b.n	80045e2 <_ftoa+0x25a>
    }
  }
  else if (diff < 0.5) {
 80045be:	2200      	movs	r2, #0
 80045c0:	4b4a      	ldr	r3, [pc, #296]	@ (80046ec <_ftoa+0x364>)
 80045c2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80045c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045c6:	f7fb ff47 	bl	8000458 <__aeabi_dcmplt>
 80045ca:	1e03      	subs	r3, r0, #0
 80045cc:	d109      	bne.n	80045e2 <_ftoa+0x25a>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 80045ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <_ftoa+0x254>
 80045d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045d6:	2201      	movs	r2, #1
 80045d8:	4013      	ands	r3, r2
 80045da:	d002      	beq.n	80045e2 <_ftoa+0x25a>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 80045dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045de:	3301      	adds	r3, #1
 80045e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  }

  if (prec == 0U) {
 80045e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d12f      	bne.n	8004648 <_ftoa+0x2c0>
    diff = value - (double)whole;
 80045e8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80045ea:	f7fd feef 	bl	80023cc <__aeabi_i2d>
 80045ee:	0002      	movs	r2, r0
 80045f0:	000b      	movs	r3, r1
 80045f2:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80045f4:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80045f6:	f7fd faef 	bl	8001bd8 <__aeabi_dsub>
 80045fa:	0002      	movs	r2, r0
 80045fc:	000b      	movs	r3, r1
 80045fe:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004600:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8004602:	2301      	movs	r3, #1
 8004604:	1c1c      	adds	r4, r3, #0
 8004606:	2200      	movs	r2, #0
 8004608:	4b38      	ldr	r3, [pc, #224]	@ (80046ec <_ftoa+0x364>)
 800460a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800460c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800460e:	f7fb ff23 	bl	8000458 <__aeabi_dcmplt>
 8004612:	1e03      	subs	r3, r0, #0
 8004614:	d101      	bne.n	800461a <_ftoa+0x292>
 8004616:	2300      	movs	r3, #0
 8004618:	1c1c      	adds	r4, r3, #0
 800461a:	b2e3      	uxtb	r3, r4
 800461c:	2201      	movs	r2, #1
 800461e:	4053      	eors	r3, r2
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d107      	bne.n	8004636 <_ftoa+0x2ae>
 8004626:	2200      	movs	r2, #0
 8004628:	4b30      	ldr	r3, [pc, #192]	@ (80046ec <_ftoa+0x364>)
 800462a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800462c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800462e:	f7fb ff27 	bl	8000480 <__aeabi_dcmpgt>
 8004632:	1e03      	subs	r3, r0, #0
 8004634:	d046      	beq.n	80046c4 <_ftoa+0x33c>
 8004636:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004638:	2201      	movs	r2, #1
 800463a:	4013      	ands	r3, r2
 800463c:	d100      	bne.n	8004640 <_ftoa+0x2b8>
 800463e:	e070      	b.n	8004722 <_ftoa+0x39a>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8004640:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004642:	3301      	adds	r3, #1
 8004644:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004646:	e06c      	b.n	8004722 <_ftoa+0x39a>
    }
  }
  else {
    unsigned int count = prec;
 8004648:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800464a:	647b      	str	r3, [r7, #68]	@ 0x44
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800464c:	e01b      	b.n	8004686 <_ftoa+0x2fe>
      --count;
 800464e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004650:	3b01      	subs	r3, #1
 8004652:	647b      	str	r3, [r7, #68]	@ 0x44
      buf[len++] = (char)(48U + (frac % 10U));
 8004654:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004656:	210a      	movs	r1, #10
 8004658:	0018      	movs	r0, r3
 800465a:	f7fb fdf7 	bl	800024c <__aeabi_uidivmod>
 800465e:	000b      	movs	r3, r1
 8004660:	b2da      	uxtb	r2, r3
 8004662:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004664:	1c59      	adds	r1, r3, #1
 8004666:	6579      	str	r1, [r7, #84]	@ 0x54
 8004668:	3230      	adds	r2, #48	@ 0x30
 800466a:	b2d1      	uxtb	r1, r2
 800466c:	2210      	movs	r2, #16
 800466e:	18ba      	adds	r2, r7, r2
 8004670:	54d1      	strb	r1, [r2, r3]
      if (!(frac /= 10U)) {
 8004672:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004674:	210a      	movs	r1, #10
 8004676:	0018      	movs	r0, r3
 8004678:	f7fb fd62 	bl	8000140 <__udivsi3>
 800467c:	0003      	movs	r3, r0
 800467e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004680:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <_ftoa+0x306>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004688:	2b1f      	cmp	r3, #31
 800468a:	d9e0      	bls.n	800464e <_ftoa+0x2c6>
 800468c:	e008      	b.n	80046a0 <_ftoa+0x318>
        break;
 800468e:	46c0      	nop			@ (mov r8, r8)
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8004690:	e006      	b.n	80046a0 <_ftoa+0x318>
      buf[len++] = '0';
 8004692:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004694:	1c5a      	adds	r2, r3, #1
 8004696:	657a      	str	r2, [r7, #84]	@ 0x54
 8004698:	2210      	movs	r2, #16
 800469a:	18ba      	adds	r2, r7, r2
 800469c:	2130      	movs	r1, #48	@ 0x30
 800469e:	54d1      	strb	r1, [r2, r3]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80046a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046a2:	2b1f      	cmp	r3, #31
 80046a4:	d804      	bhi.n	80046b0 <_ftoa+0x328>
 80046a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046a8:	1e5a      	subs	r2, r3, #1
 80046aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1f0      	bne.n	8004692 <_ftoa+0x30a>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80046b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046b2:	2b1f      	cmp	r3, #31
 80046b4:	d835      	bhi.n	8004722 <_ftoa+0x39a>
      // add decimal
      buf[len++] = '.';
 80046b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	657a      	str	r2, [r7, #84]	@ 0x54
 80046bc:	2210      	movs	r2, #16
 80046be:	18ba      	adds	r2, r7, r2
 80046c0:	212e      	movs	r1, #46	@ 0x2e
 80046c2:	54d1      	strb	r1, [r2, r3]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80046c4:	e02d      	b.n	8004722 <_ftoa+0x39a>
 80046c6:	46c0      	nop			@ (mov r8, r8)
 80046c8:	0800fcc0 	.word	0x0800fcc0
 80046cc:	ffefffff 	.word	0xffefffff
 80046d0:	0800fcc4 	.word	0x0800fcc4
 80046d4:	7fefffff 	.word	0x7fefffff
 80046d8:	0800fccc 	.word	0x0800fccc
 80046dc:	0800fcd4 	.word	0x0800fcd4
 80046e0:	41cdcd65 	.word	0x41cdcd65
 80046e4:	c1cdcd65 	.word	0xc1cdcd65
 80046e8:	0800ffe0 	.word	0x0800ffe0
 80046ec:	3fe00000 	.word	0x3fe00000
    buf[len++] = (char)(48 + (whole % 10));
 80046f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046f2:	210a      	movs	r1, #10
 80046f4:	0018      	movs	r0, r3
 80046f6:	f7fb fe93 	bl	8000420 <__aeabi_idivmod>
 80046fa:	000b      	movs	r3, r1
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004700:	1c59      	adds	r1, r3, #1
 8004702:	6579      	str	r1, [r7, #84]	@ 0x54
 8004704:	3230      	adds	r2, #48	@ 0x30
 8004706:	b2d1      	uxtb	r1, r2
 8004708:	2210      	movs	r2, #16
 800470a:	18ba      	adds	r2, r7, r2
 800470c:	54d1      	strb	r1, [r2, r3]
    if (!(whole /= 10)) {
 800470e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004710:	210a      	movs	r1, #10
 8004712:	0018      	movs	r0, r3
 8004714:	f7fb fd9e 	bl	8000254 <__divsi3>
 8004718:	0003      	movs	r3, r0
 800471a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800471c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <_ftoa+0x3a2>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004722:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004724:	2b1f      	cmp	r3, #31
 8004726:	d9e3      	bls.n	80046f0 <_ftoa+0x368>
 8004728:	e000      	b.n	800472c <_ftoa+0x3a4>
      break;
 800472a:	46c0      	nop			@ (mov r8, r8)
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800472c:	2180      	movs	r1, #128	@ 0x80
 800472e:	187b      	adds	r3, r7, r1
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2202      	movs	r2, #2
 8004734:	4013      	ands	r3, r2
 8004736:	d123      	bne.n	8004780 <_ftoa+0x3f8>
 8004738:	187b      	adds	r3, r7, r1
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2201      	movs	r2, #1
 800473e:	4013      	ands	r3, r2
 8004740:	d01e      	beq.n	8004780 <_ftoa+0x3f8>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8004742:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004744:	2b00      	cmp	r3, #0
 8004746:	d014      	beq.n	8004772 <_ftoa+0x3ea>
 8004748:	2353      	movs	r3, #83	@ 0x53
 800474a:	18fb      	adds	r3, r7, r3
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d104      	bne.n	800475c <_ftoa+0x3d4>
 8004752:	187b      	adds	r3, r7, r1
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	220c      	movs	r2, #12
 8004758:	4013      	ands	r3, r2
 800475a:	d00a      	beq.n	8004772 <_ftoa+0x3ea>
      width--;
 800475c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800475e:	3b01      	subs	r3, #1
 8004760:	67fb      	str	r3, [r7, #124]	@ 0x7c
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8004762:	e006      	b.n	8004772 <_ftoa+0x3ea>
      buf[len++] = '0';
 8004764:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	657a      	str	r2, [r7, #84]	@ 0x54
 800476a:	2210      	movs	r2, #16
 800476c:	18ba      	adds	r2, r7, r2
 800476e:	2130      	movs	r1, #48	@ 0x30
 8004770:	54d1      	strb	r1, [r2, r3]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8004772:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004774:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004776:	429a      	cmp	r2, r3
 8004778:	d202      	bcs.n	8004780 <_ftoa+0x3f8>
 800477a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800477c:	2b1f      	cmp	r3, #31
 800477e:	d9f1      	bls.n	8004764 <_ftoa+0x3dc>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004780:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004782:	2b1f      	cmp	r3, #31
 8004784:	d827      	bhi.n	80047d6 <_ftoa+0x44e>
    if (negative) {
 8004786:	2353      	movs	r3, #83	@ 0x53
 8004788:	18fb      	adds	r3, r7, r3
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d007      	beq.n	80047a0 <_ftoa+0x418>
      buf[len++] = '-';
 8004790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004792:	1c5a      	adds	r2, r3, #1
 8004794:	657a      	str	r2, [r7, #84]	@ 0x54
 8004796:	2210      	movs	r2, #16
 8004798:	18ba      	adds	r2, r7, r2
 800479a:	212d      	movs	r1, #45	@ 0x2d
 800479c:	54d1      	strb	r1, [r2, r3]
 800479e:	e01a      	b.n	80047d6 <_ftoa+0x44e>
    }
    else if (flags & FLAGS_PLUS) {
 80047a0:	2380      	movs	r3, #128	@ 0x80
 80047a2:	18fb      	adds	r3, r7, r3
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2204      	movs	r2, #4
 80047a8:	4013      	ands	r3, r2
 80047aa:	d007      	beq.n	80047bc <_ftoa+0x434>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80047ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047ae:	1c5a      	adds	r2, r3, #1
 80047b0:	657a      	str	r2, [r7, #84]	@ 0x54
 80047b2:	2210      	movs	r2, #16
 80047b4:	18ba      	adds	r2, r7, r2
 80047b6:	212b      	movs	r1, #43	@ 0x2b
 80047b8:	54d1      	strb	r1, [r2, r3]
 80047ba:	e00c      	b.n	80047d6 <_ftoa+0x44e>
    }
    else if (flags & FLAGS_SPACE) {
 80047bc:	2380      	movs	r3, #128	@ 0x80
 80047be:	18fb      	adds	r3, r7, r3
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2208      	movs	r2, #8
 80047c4:	4013      	ands	r3, r2
 80047c6:	d006      	beq.n	80047d6 <_ftoa+0x44e>
      buf[len++] = ' ';
 80047c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047ca:	1c5a      	adds	r2, r3, #1
 80047cc:	657a      	str	r2, [r7, #84]	@ 0x54
 80047ce:	2210      	movs	r2, #16
 80047d0:	18ba      	adds	r2, r7, r2
 80047d2:	2120      	movs	r1, #32
 80047d4:	54d1      	strb	r1, [r2, r3]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80047d6:	683c      	ldr	r4, [r7, #0]
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	68b9      	ldr	r1, [r7, #8]
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	2380      	movs	r3, #128	@ 0x80
 80047e0:	18fb      	adds	r3, r7, r3
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	9303      	str	r3, [sp, #12]
 80047e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047e8:	9302      	str	r3, [sp, #8]
 80047ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047ec:	9301      	str	r3, [sp, #4]
 80047ee:	2310      	movs	r3, #16
 80047f0:	18fb      	adds	r3, r7, r3
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	0023      	movs	r3, r4
 80047f6:	f7ff fbc8 	bl	8003f8a <_out_rev>
 80047fa:	0003      	movs	r3, r0
}
 80047fc:	0018      	movs	r0, r3
 80047fe:	46bd      	mov	sp, r7
 8004800:	b017      	add	sp, #92	@ 0x5c
 8004802:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004804 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004806:	b0a7      	sub	sp, #156	@ 0x9c
 8004808:	af06      	add	r7, sp, #24
 800480a:	6478      	str	r0, [r7, #68]	@ 0x44
 800480c:	6439      	str	r1, [r7, #64]	@ 0x40
 800480e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004810:	63bb      	str	r3, [r7, #56]	@ 0x38
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8004812:	2698      	movs	r6, #152	@ 0x98
 8004814:	19bb      	adds	r3, r7, r6
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	19b9      	adds	r1, r7, r6
 800481c:	6808      	ldr	r0, [r1, #0]
 800481e:	6849      	ldr	r1, [r1, #4]
 8004820:	f7fb fe14 	bl	800044c <__aeabi_dcmpeq>
 8004824:	1e03      	subs	r3, r0, #0
 8004826:	d013      	beq.n	8004850 <_etoa+0x4c>
 8004828:	2201      	movs	r2, #1
 800482a:	4252      	negs	r2, r2
 800482c:	4bda      	ldr	r3, [pc, #872]	@ (8004b98 <_etoa+0x394>)
 800482e:	19b9      	adds	r1, r7, r6
 8004830:	6808      	ldr	r0, [r1, #0]
 8004832:	6849      	ldr	r1, [r1, #4]
 8004834:	f7fb fe24 	bl	8000480 <__aeabi_dcmpgt>
 8004838:	1e03      	subs	r3, r0, #0
 800483a:	d109      	bne.n	8004850 <_etoa+0x4c>
 800483c:	2201      	movs	r2, #1
 800483e:	4252      	negs	r2, r2
 8004840:	4bd6      	ldr	r3, [pc, #856]	@ (8004b9c <_etoa+0x398>)
 8004842:	19b9      	adds	r1, r7, r6
 8004844:	6808      	ldr	r0, [r1, #0]
 8004846:	6849      	ldr	r1, [r1, #4]
 8004848:	f7fb fe06 	bl	8000458 <__aeabi_dcmplt>
 800484c:	1e03      	subs	r3, r0, #0
 800484e:	d01b      	beq.n	8004888 <_etoa+0x84>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8004850:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 8004852:	6bfc      	ldr	r4, [r7, #60]	@ 0x3c
 8004854:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004856:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8004858:	23a8      	movs	r3, #168	@ 0xa8
 800485a:	18fb      	adds	r3, r7, r3
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	9304      	str	r3, [sp, #16]
 8004860:	23a4      	movs	r3, #164	@ 0xa4
 8004862:	18fb      	adds	r3, r7, r3
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	9303      	str	r3, [sp, #12]
 8004868:	23a0      	movs	r3, #160	@ 0xa0
 800486a:	18fb      	adds	r3, r7, r3
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	9302      	str	r3, [sp, #8]
 8004870:	2398      	movs	r3, #152	@ 0x98
 8004872:	18fb      	adds	r3, r7, r3
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	9200      	str	r2, [sp, #0]
 800487a:	9301      	str	r3, [sp, #4]
 800487c:	002b      	movs	r3, r5
 800487e:	0022      	movs	r2, r4
 8004880:	f7ff fd82 	bl	8004388 <_ftoa>
 8004884:	0003      	movs	r3, r0
 8004886:	e272      	b.n	8004d6e <_etoa+0x56a>
  }

  // determine the sign
  const bool negative = value < 0;
 8004888:	233b      	movs	r3, #59	@ 0x3b
 800488a:	2238      	movs	r2, #56	@ 0x38
 800488c:	189b      	adds	r3, r3, r2
 800488e:	19de      	adds	r6, r3, r7
 8004890:	2301      	movs	r3, #1
 8004892:	73fb      	strb	r3, [r7, #15]
 8004894:	2200      	movs	r2, #0
 8004896:	2300      	movs	r3, #0
 8004898:	2198      	movs	r1, #152	@ 0x98
 800489a:	1879      	adds	r1, r7, r1
 800489c:	6808      	ldr	r0, [r1, #0]
 800489e:	6849      	ldr	r1, [r1, #4]
 80048a0:	f7fb fdda 	bl	8000458 <__aeabi_dcmplt>
 80048a4:	1e03      	subs	r3, r0, #0
 80048a6:	d101      	bne.n	80048ac <_etoa+0xa8>
 80048a8:	2300      	movs	r3, #0
 80048aa:	73fb      	strb	r3, [r7, #15]
 80048ac:	7bfb      	ldrb	r3, [r7, #15]
 80048ae:	7033      	strb	r3, [r6, #0]
  if (negative) {
 80048b0:	233b      	movs	r3, #59	@ 0x3b
 80048b2:	2238      	movs	r2, #56	@ 0x38
 80048b4:	189b      	adds	r3, r3, r2
 80048b6:	19db      	adds	r3, r3, r7
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00f      	beq.n	80048de <_etoa+0xda>
    value = -value;
 80048be:	2198      	movs	r1, #152	@ 0x98
 80048c0:	187b      	adds	r3, r7, r1
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	603b      	str	r3, [r7, #0]
 80048c6:	239c      	movs	r3, #156	@ 0x9c
 80048c8:	18fb      	adds	r3, r7, r3
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	2380      	movs	r3, #128	@ 0x80
 80048ce:	061b      	lsls	r3, r3, #24
 80048d0:	4053      	eors	r3, r2
 80048d2:	607b      	str	r3, [r7, #4]
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	1879      	adds	r1, r7, r1
 80048da:	600a      	str	r2, [r1, #0]
 80048dc:	604b      	str	r3, [r1, #4]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 80048de:	23a8      	movs	r3, #168	@ 0xa8
 80048e0:	18fb      	adds	r3, r7, r3
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	2380      	movs	r3, #128	@ 0x80
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	4013      	ands	r3, r2
 80048ea:	d103      	bne.n	80048f4 <_etoa+0xf0>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80048ec:	2306      	movs	r3, #6
 80048ee:	22a0      	movs	r2, #160	@ 0xa0
 80048f0:	18ba      	adds	r2, r7, r2
 80048f2:	6013      	str	r3, [r2, #0]
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 80048f4:	2698      	movs	r6, #152	@ 0x98
 80048f6:	19bb      	adds	r3, r7, r6
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80048fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8004900:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004902:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004904:	0d1b      	lsrs	r3, r3, #20
 8004906:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004908:	2300      	movs	r3, #0
 800490a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800490c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800490e:	055b      	lsls	r3, r3, #21
 8004910:	0d5b      	lsrs	r3, r3, #21
 8004912:	4aa3      	ldr	r2, [pc, #652]	@ (8004ba0 <_etoa+0x39c>)
 8004914:	4694      	mov	ip, r2
 8004916:	4463      	add	r3, ip
 8004918:	66fb      	str	r3, [r7, #108]	@ 0x6c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800491a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800491c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800491e:	2100      	movs	r1, #0
 8004920:	0010      	movs	r0, r2
 8004922:	4388      	bics	r0, r1
 8004924:	0004      	movs	r4, r0
 8004926:	031b      	lsls	r3, r3, #12
 8004928:	0b1d      	lsrs	r5, r3, #12
 800492a:	2300      	movs	r3, #0
 800492c:	4323      	orrs	r3, r4
 800492e:	623b      	str	r3, [r7, #32]
 8004930:	4b9c      	ldr	r3, [pc, #624]	@ (8004ba4 <_etoa+0x3a0>)
 8004932:	432b      	orrs	r3, r5
 8004934:	627b      	str	r3, [r7, #36]	@ 0x24
 8004936:	6a3b      	ldr	r3, [r7, #32]
 8004938:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800493a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800493c:	64fc      	str	r4, [r7, #76]	@ 0x4c
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800493e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004940:	f7fd fd44 	bl	80023cc <__aeabi_i2d>
 8004944:	4a98      	ldr	r2, [pc, #608]	@ (8004ba8 <_etoa+0x3a4>)
 8004946:	4b99      	ldr	r3, [pc, #612]	@ (8004bac <_etoa+0x3a8>)
 8004948:	f7fc fe7e 	bl	8001648 <__aeabi_dmul>
 800494c:	0002      	movs	r2, r0
 800494e:	000b      	movs	r3, r1
 8004950:	0010      	movs	r0, r2
 8004952:	0019      	movs	r1, r3
 8004954:	4a96      	ldr	r2, [pc, #600]	@ (8004bb0 <_etoa+0x3ac>)
 8004956:	4b97      	ldr	r3, [pc, #604]	@ (8004bb4 <_etoa+0x3b0>)
 8004958:	f7fb fece 	bl	80006f8 <__aeabi_dadd>
 800495c:	0002      	movs	r2, r0
 800495e:	000b      	movs	r3, r1
 8004960:	0014      	movs	r4, r2
 8004962:	001d      	movs	r5, r3
 8004964:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8004966:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004968:	2200      	movs	r2, #0
 800496a:	4b93      	ldr	r3, [pc, #588]	@ (8004bb8 <_etoa+0x3b4>)
 800496c:	f7fd f934 	bl	8001bd8 <__aeabi_dsub>
 8004970:	0002      	movs	r2, r0
 8004972:	000b      	movs	r3, r1
 8004974:	0010      	movs	r0, r2
 8004976:	0019      	movs	r1, r3
 8004978:	4a90      	ldr	r2, [pc, #576]	@ (8004bbc <_etoa+0x3b8>)
 800497a:	4b91      	ldr	r3, [pc, #580]	@ (8004bc0 <_etoa+0x3bc>)
 800497c:	f7fc fe64 	bl	8001648 <__aeabi_dmul>
 8004980:	0002      	movs	r2, r0
 8004982:	000b      	movs	r3, r1
 8004984:	0020      	movs	r0, r4
 8004986:	0029      	movs	r1, r5
 8004988:	f7fb feb6 	bl	80006f8 <__aeabi_dadd>
 800498c:	0002      	movs	r2, r0
 800498e:	000b      	movs	r3, r1
 8004990:	0010      	movs	r0, r2
 8004992:	0019      	movs	r1, r3
 8004994:	f7fd fcde 	bl	8002354 <__aeabi_d2iz>
 8004998:	0003      	movs	r3, r0
 800499a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 800499c:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800499e:	f7fd fd15 	bl	80023cc <__aeabi_i2d>
 80049a2:	4a88      	ldr	r2, [pc, #544]	@ (8004bc4 <_etoa+0x3c0>)
 80049a4:	4b88      	ldr	r3, [pc, #544]	@ (8004bc8 <_etoa+0x3c4>)
 80049a6:	f7fc fe4f 	bl	8001648 <__aeabi_dmul>
 80049aa:	0002      	movs	r2, r0
 80049ac:	000b      	movs	r3, r1
 80049ae:	0010      	movs	r0, r2
 80049b0:	0019      	movs	r1, r3
 80049b2:	2200      	movs	r2, #0
 80049b4:	4b85      	ldr	r3, [pc, #532]	@ (8004bcc <_etoa+0x3c8>)
 80049b6:	f7fb fe9f 	bl	80006f8 <__aeabi_dadd>
 80049ba:	0002      	movs	r2, r0
 80049bc:	000b      	movs	r3, r1
 80049be:	0010      	movs	r0, r2
 80049c0:	0019      	movs	r1, r3
 80049c2:	f7fd fcc7 	bl	8002354 <__aeabi_d2iz>
 80049c6:	0003      	movs	r3, r0
 80049c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 80049ca:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80049cc:	f7fd fcfe 	bl	80023cc <__aeabi_i2d>
 80049d0:	4a7f      	ldr	r2, [pc, #508]	@ (8004bd0 <_etoa+0x3cc>)
 80049d2:	4b80      	ldr	r3, [pc, #512]	@ (8004bd4 <_etoa+0x3d0>)
 80049d4:	f7fc fe38 	bl	8001648 <__aeabi_dmul>
 80049d8:	0002      	movs	r2, r0
 80049da:	000b      	movs	r3, r1
 80049dc:	0014      	movs	r4, r2
 80049de:	001d      	movs	r5, r3
 80049e0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80049e2:	f7fd fcf3 	bl	80023cc <__aeabi_i2d>
 80049e6:	4a7c      	ldr	r2, [pc, #496]	@ (8004bd8 <_etoa+0x3d4>)
 80049e8:	4b7c      	ldr	r3, [pc, #496]	@ (8004bdc <_etoa+0x3d8>)
 80049ea:	f7fc fe2d 	bl	8001648 <__aeabi_dmul>
 80049ee:	0002      	movs	r2, r0
 80049f0:	000b      	movs	r3, r1
 80049f2:	0020      	movs	r0, r4
 80049f4:	0029      	movs	r1, r5
 80049f6:	f7fd f8ef 	bl	8001bd8 <__aeabi_dsub>
 80049fa:	0002      	movs	r2, r0
 80049fc:	000b      	movs	r3, r1
 80049fe:	663a      	str	r2, [r7, #96]	@ 0x60
 8004a00:	667b      	str	r3, [r7, #100]	@ 0x64
  const double z2 = z * z;
 8004a02:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004a04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a06:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8004a08:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8004a0a:	f7fc fe1d 	bl	8001648 <__aeabi_dmul>
 8004a0e:	0002      	movs	r2, r0
 8004a10:	000b      	movs	r3, r1
 8004a12:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004a14:	65fb      	str	r3, [r7, #92]	@ 0x5c
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8004a16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a18:	4a71      	ldr	r2, [pc, #452]	@ (8004be0 <_etoa+0x3dc>)
 8004a1a:	4694      	mov	ip, r2
 8004a1c:	4463      	add	r3, ip
 8004a1e:	61bb      	str	r3, [r7, #24]
 8004a20:	17db      	asrs	r3, r3, #31
 8004a22:	61fb      	str	r3, [r7, #28]
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	051b      	lsls	r3, r3, #20
 8004a28:	617b      	str	r3, [r7, #20]
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	613b      	str	r3, [r7, #16]
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	697c      	ldr	r4, [r7, #20]
 8004a32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a34:	64fc      	str	r4, [r7, #76]	@ 0x4c
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8004a36:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 8004a38:	6cfd      	ldr	r5, [r7, #76]	@ 0x4c
 8004a3a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8004a3c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8004a3e:	0002      	movs	r2, r0
 8004a40:	000b      	movs	r3, r1
 8004a42:	f7fb fe59 	bl	80006f8 <__aeabi_dadd>
 8004a46:	0002      	movs	r2, r0
 8004a48:	000b      	movs	r3, r1
 8004a4a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a4e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004a50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a52:	2000      	movs	r0, #0
 8004a54:	2180      	movs	r1, #128	@ 0x80
 8004a56:	05c9      	lsls	r1, r1, #23
 8004a58:	f7fd f8be 	bl	8001bd8 <__aeabi_dsub>
 8004a5c:	0002      	movs	r2, r0
 8004a5e:	000b      	movs	r3, r1
 8004a60:	623a      	str	r2, [r7, #32]
 8004a62:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a64:	2200      	movs	r2, #0
 8004a66:	4b5f      	ldr	r3, [pc, #380]	@ (8004be4 <_etoa+0x3e0>)
 8004a68:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004a6a:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8004a6c:	f7fc f9a8 	bl	8000dc0 <__aeabi_ddiv>
 8004a70:	0002      	movs	r2, r0
 8004a72:	000b      	movs	r3, r1
 8004a74:	0010      	movs	r0, r2
 8004a76:	0019      	movs	r1, r3
 8004a78:	2200      	movs	r2, #0
 8004a7a:	4b5b      	ldr	r3, [pc, #364]	@ (8004be8 <_etoa+0x3e4>)
 8004a7c:	f7fb fe3c 	bl	80006f8 <__aeabi_dadd>
 8004a80:	0002      	movs	r2, r0
 8004a82:	000b      	movs	r3, r1
 8004a84:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004a86:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8004a88:	f7fc f99a 	bl	8000dc0 <__aeabi_ddiv>
 8004a8c:	0002      	movs	r2, r0
 8004a8e:	000b      	movs	r3, r1
 8004a90:	0010      	movs	r0, r2
 8004a92:	0019      	movs	r1, r3
 8004a94:	2200      	movs	r2, #0
 8004a96:	4b55      	ldr	r3, [pc, #340]	@ (8004bec <_etoa+0x3e8>)
 8004a98:	f7fb fe2e 	bl	80006f8 <__aeabi_dadd>
 8004a9c:	0002      	movs	r2, r0
 8004a9e:	000b      	movs	r3, r1
 8004aa0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004aa2:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8004aa4:	f7fc f98c 	bl	8000dc0 <__aeabi_ddiv>
 8004aa8:	0002      	movs	r2, r0
 8004aaa:	000b      	movs	r3, r1
 8004aac:	6a38      	ldr	r0, [r7, #32]
 8004aae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ab0:	f7fb fe22 	bl	80006f8 <__aeabi_dadd>
 8004ab4:	0002      	movs	r2, r0
 8004ab6:	000b      	movs	r3, r1
 8004ab8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004aba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004abc:	f7fc f980 	bl	8000dc0 <__aeabi_ddiv>
 8004ac0:	0002      	movs	r2, r0
 8004ac2:	000b      	movs	r3, r1
 8004ac4:	0010      	movs	r0, r2
 8004ac6:	0019      	movs	r1, r3
 8004ac8:	2200      	movs	r2, #0
 8004aca:	4b36      	ldr	r3, [pc, #216]	@ (8004ba4 <_etoa+0x3a0>)
 8004acc:	f7fb fe14 	bl	80006f8 <__aeabi_dadd>
 8004ad0:	0002      	movs	r2, r0
 8004ad2:	000b      	movs	r3, r1
 8004ad4:	0020      	movs	r0, r4
 8004ad6:	0029      	movs	r1, r5
 8004ad8:	f7fc fdb6 	bl	8001648 <__aeabi_dmul>
 8004adc:	0002      	movs	r2, r0
 8004ade:	000b      	movs	r3, r1
 8004ae0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  // correct for rounding errors
  if (value < conv.F) {
 8004ae4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ae6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ae8:	19b9      	adds	r1, r7, r6
 8004aea:	6808      	ldr	r0, [r1, #0]
 8004aec:	6849      	ldr	r1, [r1, #4]
 8004aee:	f7fb fcb3 	bl	8000458 <__aeabi_dcmplt>
 8004af2:	1e03      	subs	r3, r0, #0
 8004af4:	d00c      	beq.n	8004b10 <_etoa+0x30c>
    expval--;
 8004af6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004af8:	3b01      	subs	r3, #1
 8004afa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    conv.F /= 10;
 8004afc:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8004afe:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004b00:	2200      	movs	r2, #0
 8004b02:	4b39      	ldr	r3, [pc, #228]	@ (8004be8 <_etoa+0x3e4>)
 8004b04:	f7fc f95c 	bl	8000dc0 <__aeabi_ddiv>
 8004b08:	0002      	movs	r2, r0
 8004b0a:	000b      	movs	r3, r1
 8004b0c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8004b10:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b12:	2b63      	cmp	r3, #99	@ 0x63
 8004b14:	dc04      	bgt.n	8004b20 <_etoa+0x31c>
 8004b16:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b18:	3363      	adds	r3, #99	@ 0x63
 8004b1a:	db01      	blt.n	8004b20 <_etoa+0x31c>
 8004b1c:	2304      	movs	r3, #4
 8004b1e:	e000      	b.n	8004b22 <_etoa+0x31e>
 8004b20:	2305      	movs	r3, #5
 8004b22:	67bb      	str	r3, [r7, #120]	@ 0x78

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8004b24:	23a8      	movs	r3, #168	@ 0xa8
 8004b26:	18fb      	adds	r3, r7, r3
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	2380      	movs	r3, #128	@ 0x80
 8004b2c:	011b      	lsls	r3, r3, #4
 8004b2e:	4013      	ands	r3, r2
 8004b30:	d100      	bne.n	8004b34 <_etoa+0x330>
 8004b32:	e074      	b.n	8004c1e <_etoa+0x41a>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8004b34:	4a2e      	ldr	r2, [pc, #184]	@ (8004bf0 <_etoa+0x3ec>)
 8004b36:	4b2f      	ldr	r3, [pc, #188]	@ (8004bf4 <_etoa+0x3f0>)
 8004b38:	2498      	movs	r4, #152	@ 0x98
 8004b3a:	1939      	adds	r1, r7, r4
 8004b3c:	6808      	ldr	r0, [r1, #0]
 8004b3e:	6849      	ldr	r1, [r1, #4]
 8004b40:	f7fb fca8 	bl	8000494 <__aeabi_dcmpge>
 8004b44:	1e03      	subs	r3, r0, #0
 8004b46:	d059      	beq.n	8004bfc <_etoa+0x3f8>
 8004b48:	2200      	movs	r2, #0
 8004b4a:	4b2b      	ldr	r3, [pc, #172]	@ (8004bf8 <_etoa+0x3f4>)
 8004b4c:	1939      	adds	r1, r7, r4
 8004b4e:	6808      	ldr	r0, [r1, #0]
 8004b50:	6849      	ldr	r1, [r1, #4]
 8004b52:	f7fb fc81 	bl	8000458 <__aeabi_dcmplt>
 8004b56:	1e03      	subs	r3, r0, #0
 8004b58:	d050      	beq.n	8004bfc <_etoa+0x3f8>
      if ((int)prec > expval) {
 8004b5a:	21a0      	movs	r1, #160	@ 0xa0
 8004b5c:	187b      	adds	r3, r7, r1
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004b62:	429a      	cmp	r2, r3
 8004b64:	da07      	bge.n	8004b76 <_etoa+0x372>
        prec = (unsigned)((int)prec - expval - 1);
 8004b66:	187b      	adds	r3, r7, r1
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	187a      	adds	r2, r7, r1
 8004b72:	6013      	str	r3, [r2, #0]
 8004b74:	e003      	b.n	8004b7e <_etoa+0x37a>
      }
      else {
        prec = 0;
 8004b76:	2300      	movs	r3, #0
 8004b78:	22a0      	movs	r2, #160	@ 0xa0
 8004b7a:	18ba      	adds	r2, r7, r2
 8004b7c:	6013      	str	r3, [r2, #0]
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8004b7e:	21a8      	movs	r1, #168	@ 0xa8
 8004b80:	187b      	adds	r3, r7, r1
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2280      	movs	r2, #128	@ 0x80
 8004b86:	00d2      	lsls	r2, r2, #3
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	187a      	adds	r2, r7, r1
 8004b8c:	6013      	str	r3, [r2, #0]
      // no characters in exponent
      minwidth = 0U;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	67bb      	str	r3, [r7, #120]	@ 0x78
      expval   = 0;
 8004b92:	2300      	movs	r3, #0
 8004b94:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b96:	e042      	b.n	8004c1e <_etoa+0x41a>
 8004b98:	7fefffff 	.word	0x7fefffff
 8004b9c:	ffefffff 	.word	0xffefffff
 8004ba0:	fffffc01 	.word	0xfffffc01
 8004ba4:	3ff00000 	.word	0x3ff00000
 8004ba8:	509f79fb 	.word	0x509f79fb
 8004bac:	3fd34413 	.word	0x3fd34413
 8004bb0:	8b60c8b3 	.word	0x8b60c8b3
 8004bb4:	3fc68a28 	.word	0x3fc68a28
 8004bb8:	3ff80000 	.word	0x3ff80000
 8004bbc:	636f4361 	.word	0x636f4361
 8004bc0:	3fd287a7 	.word	0x3fd287a7
 8004bc4:	0979a371 	.word	0x0979a371
 8004bc8:	400a934f 	.word	0x400a934f
 8004bcc:	3fe00000 	.word	0x3fe00000
 8004bd0:	bbb55516 	.word	0xbbb55516
 8004bd4:	40026bb1 	.word	0x40026bb1
 8004bd8:	fefa39ef 	.word	0xfefa39ef
 8004bdc:	3fe62e42 	.word	0x3fe62e42
 8004be0:	000003ff 	.word	0x000003ff
 8004be4:	402c0000 	.word	0x402c0000
 8004be8:	40240000 	.word	0x40240000
 8004bec:	40180000 	.word	0x40180000
 8004bf0:	eb1c432d 	.word	0xeb1c432d
 8004bf4:	3f1a36e2 	.word	0x3f1a36e2
 8004bf8:	412e8480 	.word	0x412e8480
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8004bfc:	21a0      	movs	r1, #160	@ 0xa0
 8004bfe:	187b      	adds	r3, r7, r1
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00b      	beq.n	8004c1e <_etoa+0x41a>
 8004c06:	23a8      	movs	r3, #168	@ 0xa8
 8004c08:	18fb      	adds	r3, r7, r3
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	2380      	movs	r3, #128	@ 0x80
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	4013      	ands	r3, r2
 8004c12:	d004      	beq.n	8004c1e <_etoa+0x41a>
        --prec;
 8004c14:	187b      	adds	r3, r7, r1
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	187a      	adds	r2, r7, r1
 8004c1c:	6013      	str	r3, [r2, #0]
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8004c1e:	22a4      	movs	r2, #164	@ 0xa4
 8004c20:	18bb      	adds	r3, r7, r2
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	677b      	str	r3, [r7, #116]	@ 0x74
  if (width > minwidth) {
 8004c26:	18bb      	adds	r3, r7, r2
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d904      	bls.n	8004c3a <_etoa+0x436>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8004c30:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004c32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	677b      	str	r3, [r7, #116]	@ 0x74
 8004c38:	e001      	b.n	8004c3e <_etoa+0x43a>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	677b      	str	r3, [r7, #116]	@ 0x74
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8004c3e:	23a8      	movs	r3, #168	@ 0xa8
 8004c40:	18fb      	adds	r3, r7, r3
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2202      	movs	r2, #2
 8004c46:	4013      	ands	r3, r2
 8004c48:	d004      	beq.n	8004c54 <_etoa+0x450>
 8004c4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <_etoa+0x450>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	677b      	str	r3, [r7, #116]	@ 0x74
  }

  // rescale the float value
  if (expval) {
 8004c54:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00c      	beq.n	8004c74 <_etoa+0x470>
    value /= conv.F;
 8004c5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c5e:	2498      	movs	r4, #152	@ 0x98
 8004c60:	1939      	adds	r1, r7, r4
 8004c62:	6808      	ldr	r0, [r1, #0]
 8004c64:	6849      	ldr	r1, [r1, #4]
 8004c66:	f7fc f8ab 	bl	8000dc0 <__aeabi_ddiv>
 8004c6a:	0002      	movs	r2, r0
 8004c6c:	000b      	movs	r3, r1
 8004c6e:	1939      	adds	r1, r7, r4
 8004c70:	600a      	str	r2, [r1, #0]
 8004c72:	604b      	str	r3, [r1, #4]
  }

  // output the floating part
  const size_t start_idx = idx;
 8004c74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c76:	657b      	str	r3, [r7, #84]	@ 0x54
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8004c78:	233b      	movs	r3, #59	@ 0x3b
 8004c7a:	2238      	movs	r2, #56	@ 0x38
 8004c7c:	189b      	adds	r3, r3, r2
 8004c7e:	19db      	adds	r3, r3, r7
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00b      	beq.n	8004c9e <_etoa+0x49a>
 8004c86:	2398      	movs	r3, #152	@ 0x98
 8004c88:	18fb      	adds	r3, r7, r3
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c8e:	239c      	movs	r3, #156	@ 0x9c
 8004c90:	18fb      	adds	r3, r7, r3
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2280      	movs	r2, #128	@ 0x80
 8004c96:	0612      	lsls	r2, r2, #24
 8004c98:	405a      	eors	r2, r3
 8004c9a:	637a      	str	r2, [r7, #52]	@ 0x34
 8004c9c:	e005      	b.n	8004caa <_etoa+0x4a6>
 8004c9e:	2398      	movs	r3, #152	@ 0x98
 8004ca0:	18fb      	adds	r3, r7, r3
 8004ca2:	685c      	ldr	r4, [r3, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ca8:	637c      	str	r4, [r7, #52]	@ 0x34
 8004caa:	23a8      	movs	r3, #168	@ 0xa8
 8004cac:	18fa      	adds	r2, r7, r3
 8004cae:	6813      	ldr	r3, [r2, #0]
 8004cb0:	4a31      	ldr	r2, [pc, #196]	@ (8004d78 <_etoa+0x574>)
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8004cb6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004cb8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cba:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8004cbc:	9304      	str	r3, [sp, #16]
 8004cbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cc0:	9303      	str	r3, [sp, #12]
 8004cc2:	25a0      	movs	r5, #160	@ 0xa0
 8004cc4:	197d      	adds	r5, r7, r5
 8004cc6:	682b      	ldr	r3, [r5, #0]
 8004cc8:	9302      	str	r3, [sp, #8]
 8004cca:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
 8004ccc:	6b7e      	ldr	r6, [r7, #52]	@ 0x34
 8004cce:	9500      	str	r5, [sp, #0]
 8004cd0:	9601      	str	r6, [sp, #4]
 8004cd2:	0023      	movs	r3, r4
 8004cd4:	f7ff fb58 	bl	8004388 <_ftoa>
 8004cd8:	0003      	movs	r3, r0
 8004cda:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // output the exponent part
  if (minwidth) {
 8004cdc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d044      	beq.n	8004d6c <_etoa+0x568>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8004ce2:	23a8      	movs	r3, #168	@ 0xa8
 8004ce4:	18fb      	adds	r3, r7, r3
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	4013      	ands	r3, r2
 8004cec:	d001      	beq.n	8004cf2 <_etoa+0x4ee>
 8004cee:	2045      	movs	r0, #69	@ 0x45
 8004cf0:	e000      	b.n	8004cf4 <_etoa+0x4f0>
 8004cf2:	2065      	movs	r0, #101	@ 0x65
 8004cf4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004cf6:	1c53      	adds	r3, r2, #1
 8004cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cfc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cfe:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8004d00:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8004d02:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004d04:	17da      	asrs	r2, r3, #31
 8004d06:	189b      	adds	r3, r3, r2
 8004d08:	4053      	eors	r3, r2
 8004d0a:	469c      	mov	ip, r3
 8004d0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004d0e:	0fdb      	lsrs	r3, r3, #31
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004d14:	3a01      	subs	r2, #1
 8004d16:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 8004d18:	6bfc      	ldr	r4, [r7, #60]	@ 0x3c
 8004d1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d1c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8004d1e:	2605      	movs	r6, #5
 8004d20:	9605      	str	r6, [sp, #20]
 8004d22:	9204      	str	r2, [sp, #16]
 8004d24:	2200      	movs	r2, #0
 8004d26:	9203      	str	r2, [sp, #12]
 8004d28:	220a      	movs	r2, #10
 8004d2a:	9202      	str	r2, [sp, #8]
 8004d2c:	9301      	str	r3, [sp, #4]
 8004d2e:	4663      	mov	r3, ip
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	002b      	movs	r3, r5
 8004d34:	0022      	movs	r2, r4
 8004d36:	f7ff fa4b 	bl	80041d0 <_ntoa_long>
 8004d3a:	0003      	movs	r3, r0
 8004d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8004d3e:	23a8      	movs	r3, #168	@ 0xa8
 8004d40:	18fb      	adds	r3, r7, r3
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2202      	movs	r2, #2
 8004d46:	4013      	ands	r3, r2
 8004d48:	d010      	beq.n	8004d6c <_etoa+0x568>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8004d4a:	e007      	b.n	8004d5c <_etoa+0x558>
 8004d4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004d4e:	1c53      	adds	r3, r2, #1
 8004d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d56:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8004d58:	2020      	movs	r0, #32
 8004d5a:	47a0      	blx	r4
 8004d5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004d5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	22a4      	movs	r2, #164	@ 0xa4
 8004d64:	18ba      	adds	r2, r7, r2
 8004d66:	6812      	ldr	r2, [r2, #0]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d8ef      	bhi.n	8004d4c <_etoa+0x548>
    }
  }
  return idx;
 8004d6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004d6e:	0018      	movs	r0, r3
 8004d70:	46bd      	mov	sp, r7
 8004d72:	b021      	add	sp, #132	@ 0x84
 8004d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d76:	46c0      	nop			@ (mov r8, r8)
 8004d78:	fffff7ff 	.word	0xfffff7ff

08004d7c <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8004d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d7e:	46c6      	mov	lr, r8
 8004d80:	b500      	push	{lr}
 8004d82:	b0a6      	sub	sp, #152	@ 0x98
 8004d84:	af0a      	add	r7, sp, #40	@ 0x28
 8004d86:	6278      	str	r0, [r7, #36]	@ 0x24
 8004d88:	6239      	str	r1, [r7, #32]
 8004d8a:	61fa      	str	r2, [r7, #28]
 8004d8c:	61bb      	str	r3, [r7, #24]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	65fb      	str	r3, [r7, #92]	@ 0x5c

  if (!buffer) {
 8004d92:	6a3b      	ldr	r3, [r7, #32]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d001      	beq.n	8004d9c <_vsnprintf+0x20>
 8004d98:	f000 fc51 	bl	800563e <_vsnprintf+0x8c2>
    // use null output function
    out = _out_null;
 8004d9c:	4bad      	ldr	r3, [pc, #692]	@ (8005054 <_vsnprintf+0x2d8>)
 8004d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  while (*format)
 8004da0:	f000 fc4d 	bl	800563e <_vsnprintf+0x8c2>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	2b25      	cmp	r3, #37	@ 0x25
 8004daa:	d00d      	beq.n	8004dc8 <_vsnprintf+0x4c>
      // no
      out(*format, buffer, idx++, maxlen);
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	7818      	ldrb	r0, [r3, #0]
 8004db0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004db2:	1c53      	adds	r3, r2, #1
 8004db4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	6a39      	ldr	r1, [r7, #32]
 8004dba:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8004dbc:	47a0      	blx	r4
      format++;
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	61bb      	str	r3, [r7, #24]
      continue;
 8004dc4:	f000 fc3b 	bl	800563e <_vsnprintf+0x8c2>
    }
    else {
      // yes, evaluate it
      format++;
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	61bb      	str	r3, [r7, #24]
    }

    // evaluate flags
    flags = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    do {
      switch (*format) {
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	3b20      	subs	r3, #32
 8004dd8:	2b10      	cmp	r3, #16
 8004dda:	d836      	bhi.n	8004e4a <_vsnprintf+0xce>
 8004ddc:	009a      	lsls	r2, r3, #2
 8004dde:	4b9e      	ldr	r3, [pc, #632]	@ (8005058 <_vsnprintf+0x2dc>)
 8004de0:	18d3      	adds	r3, r2, r3
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	469f      	mov	pc, r3
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8004de6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004de8:	2201      	movs	r2, #1
 8004dea:	4313      	orrs	r3, r2
 8004dec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	3301      	adds	r3, #1
 8004df2:	61bb      	str	r3, [r7, #24]
 8004df4:	2301      	movs	r3, #1
 8004df6:	663b      	str	r3, [r7, #96]	@ 0x60
 8004df8:	e02a      	b.n	8004e50 <_vsnprintf+0xd4>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8004dfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004dfc:	2202      	movs	r2, #2
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	3301      	adds	r3, #1
 8004e06:	61bb      	str	r3, [r7, #24]
 8004e08:	2301      	movs	r3, #1
 8004e0a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e0c:	e020      	b.n	8004e50 <_vsnprintf+0xd4>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8004e0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e10:	2204      	movs	r2, #4
 8004e12:	4313      	orrs	r3, r2
 8004e14:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	61bb      	str	r3, [r7, #24]
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e20:	e016      	b.n	8004e50 <_vsnprintf+0xd4>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8004e22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e24:	2208      	movs	r2, #8
 8004e26:	4313      	orrs	r3, r2
 8004e28:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	61bb      	str	r3, [r7, #24]
 8004e30:	2301      	movs	r3, #1
 8004e32:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e34:	e00c      	b.n	8004e50 <_vsnprintf+0xd4>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8004e36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e38:	2210      	movs	r2, #16
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	3301      	adds	r3, #1
 8004e42:	61bb      	str	r3, [r7, #24]
 8004e44:	2301      	movs	r3, #1
 8004e46:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e48:	e002      	b.n	8004e50 <_vsnprintf+0xd4>
        default :                                   n = 0U; break;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e4e:	46c0      	nop			@ (mov r8, r8)
      }
    } while (n);
 8004e50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1bd      	bne.n	8004dd2 <_vsnprintf+0x56>

    // evaluate width field
    width = 0U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (_is_digit(*format)) {
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	0018      	movs	r0, r3
 8004e60:	f7ff f857 	bl	8003f12 <_is_digit>
 8004e64:	1e03      	subs	r3, r0, #0
 8004e66:	d007      	beq.n	8004e78 <_vsnprintf+0xfc>
      width = _atoi(&format);
 8004e68:	2318      	movs	r3, #24
 8004e6a:	18fb      	adds	r3, r7, r3
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	f7ff f869 	bl	8003f44 <_atoi>
 8004e72:	0003      	movs	r3, r0
 8004e74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e76:	e01c      	b.n	8004eb2 <_vsnprintf+0x136>
    }
    else if (*format == '*') {
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e7e:	d118      	bne.n	8004eb2 <_vsnprintf+0x136>
      const int w = va_arg(va, int);
 8004e80:	2388      	movs	r3, #136	@ 0x88
 8004e82:	18fb      	adds	r3, r7, r3
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	1d1a      	adds	r2, r3, #4
 8004e88:	2188      	movs	r1, #136	@ 0x88
 8004e8a:	1879      	adds	r1, r7, r1
 8004e8c:	600a      	str	r2, [r1, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	64bb      	str	r3, [r7, #72]	@ 0x48
      if (w < 0) {
 8004e92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	da07      	bge.n	8004ea8 <_vsnprintf+0x12c>
        flags |= FLAGS_LEFT;    // reverse padding
 8004e98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
        width = (unsigned int)-w;
 8004ea0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ea2:	425b      	negs	r3, r3
 8004ea4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ea6:	e001      	b.n	8004eac <_vsnprintf+0x130>
      }
      else {
        width = (unsigned int)w;
 8004ea8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004eaa:	66bb      	str	r3, [r7, #104]	@ 0x68
      }
      format++;
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	61bb      	str	r3, [r7, #24]
    }

    // evaluate precision field
    precision = 0U;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	667b      	str	r3, [r7, #100]	@ 0x64
    if (*format == '.') {
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ebc:	d12b      	bne.n	8004f16 <_vsnprintf+0x19a>
      flags |= FLAGS_PRECISION;
 8004ebe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ec0:	2280      	movs	r2, #128	@ 0x80
 8004ec2:	00d2      	lsls	r2, r2, #3
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	66fb      	str	r3, [r7, #108]	@ 0x6c
      format++;
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	61bb      	str	r3, [r7, #24]
      if (_is_digit(*format)) {
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	0018      	movs	r0, r3
 8004ed4:	f7ff f81d 	bl	8003f12 <_is_digit>
 8004ed8:	1e03      	subs	r3, r0, #0
 8004eda:	d007      	beq.n	8004eec <_vsnprintf+0x170>
        precision = _atoi(&format);
 8004edc:	2318      	movs	r3, #24
 8004ede:	18fb      	adds	r3, r7, r3
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	f7ff f82f 	bl	8003f44 <_atoi>
 8004ee6:	0003      	movs	r3, r0
 8004ee8:	667b      	str	r3, [r7, #100]	@ 0x64
 8004eea:	e014      	b.n	8004f16 <_vsnprintf+0x19a>
      }
      else if (*format == '*') {
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ef2:	d110      	bne.n	8004f16 <_vsnprintf+0x19a>
        const int prec = (int)va_arg(va, int);
 8004ef4:	2388      	movs	r3, #136	@ 0x88
 8004ef6:	18fb      	adds	r3, r7, r3
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	1d1a      	adds	r2, r3, #4
 8004efc:	2188      	movs	r1, #136	@ 0x88
 8004efe:	1879      	adds	r1, r7, r1
 8004f00:	600a      	str	r2, [r1, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	647b      	str	r3, [r7, #68]	@ 0x44
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8004f06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	da00      	bge.n	8004f0e <_vsnprintf+0x192>
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	667b      	str	r3, [r7, #100]	@ 0x64
        format++;
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	3301      	adds	r3, #1
 8004f14:	61bb      	str	r3, [r7, #24]
      }
    }

    // evaluate length field
    switch (*format) {
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	3b68      	subs	r3, #104	@ 0x68
 8004f1c:	2b12      	cmp	r3, #18
 8004f1e:	d847      	bhi.n	8004fb0 <_vsnprintf+0x234>
 8004f20:	009a      	lsls	r2, r3, #2
 8004f22:	4b4e      	ldr	r3, [pc, #312]	@ (800505c <_vsnprintf+0x2e0>)
 8004f24:	18d3      	adds	r3, r2, r3
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	469f      	mov	pc, r3
      case 'l' :
        flags |= FLAGS_LONG;
 8004f2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f2c:	2280      	movs	r2, #128	@ 0x80
 8004f2e:	0052      	lsls	r2, r2, #1
 8004f30:	4313      	orrs	r3, r2
 8004f32:	66fb      	str	r3, [r7, #108]	@ 0x6c
        format++;
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	3301      	adds	r3, #1
 8004f38:	61bb      	str	r3, [r7, #24]
        if (*format == 'l') {
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	2b6c      	cmp	r3, #108	@ 0x6c
 8004f40:	d138      	bne.n	8004fb4 <_vsnprintf+0x238>
          flags |= FLAGS_LONG_LONG;
 8004f42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f44:	2280      	movs	r2, #128	@ 0x80
 8004f46:	0092      	lsls	r2, r2, #2
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
          format++;
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	61bb      	str	r3, [r7, #24]
        }
        break;
 8004f52:	e02f      	b.n	8004fb4 <_vsnprintf+0x238>
      case 'h' :
        flags |= FLAGS_SHORT;
 8004f54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f56:	2280      	movs	r2, #128	@ 0x80
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
        format++;
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	61bb      	str	r3, [r7, #24]
        if (*format == 'h') {
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	2b68      	cmp	r3, #104	@ 0x68
 8004f68:	d126      	bne.n	8004fb8 <_vsnprintf+0x23c>
          flags |= FLAGS_CHAR;
 8004f6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f6c:	2240      	movs	r2, #64	@ 0x40
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	66fb      	str	r3, [r7, #108]	@ 0x6c
          format++;
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	3301      	adds	r3, #1
 8004f76:	61bb      	str	r3, [r7, #24]
        }
        break;
 8004f78:	e01e      	b.n	8004fb8 <_vsnprintf+0x23c>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004f7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f7c:	2280      	movs	r2, #128	@ 0x80
 8004f7e:	0052      	lsls	r2, r2, #1
 8004f80:	4313      	orrs	r3, r2
 8004f82:	66fb      	str	r3, [r7, #108]	@ 0x6c
        format++;
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	3301      	adds	r3, #1
 8004f88:	61bb      	str	r3, [r7, #24]
        break;
 8004f8a:	e016      	b.n	8004fba <_vsnprintf+0x23e>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004f8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f8e:	2280      	movs	r2, #128	@ 0x80
 8004f90:	0092      	lsls	r2, r2, #2
 8004f92:	4313      	orrs	r3, r2
 8004f94:	66fb      	str	r3, [r7, #108]	@ 0x6c
        format++;
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	61bb      	str	r3, [r7, #24]
        break;
 8004f9c:	e00d      	b.n	8004fba <_vsnprintf+0x23e>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004f9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fa0:	2280      	movs	r2, #128	@ 0x80
 8004fa2:	0052      	lsls	r2, r2, #1
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	66fb      	str	r3, [r7, #108]	@ 0x6c
        format++;
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	3301      	adds	r3, #1
 8004fac:	61bb      	str	r3, [r7, #24]
        break;
 8004fae:	e004      	b.n	8004fba <_vsnprintf+0x23e>
      default :
        break;
 8004fb0:	46c0      	nop			@ (mov r8, r8)
 8004fb2:	e002      	b.n	8004fba <_vsnprintf+0x23e>
        break;
 8004fb4:	46c0      	nop			@ (mov r8, r8)
 8004fb6:	e000      	b.n	8004fba <_vsnprintf+0x23e>
        break;
 8004fb8:	46c0      	nop			@ (mov r8, r8)
    }

    // evaluate specifier
    switch (*format) {
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	2b67      	cmp	r3, #103	@ 0x67
 8004fc0:	dc28      	bgt.n	8005014 <_vsnprintf+0x298>
 8004fc2:	2b25      	cmp	r3, #37	@ 0x25
 8004fc4:	da1d      	bge.n	8005002 <_vsnprintf+0x286>
 8004fc6:	e32d      	b.n	8005624 <_vsnprintf+0x8a8>
 8004fc8:	3b69      	subs	r3, #105	@ 0x69
 8004fca:	2201      	movs	r2, #1
 8004fcc:	409a      	lsls	r2, r3
 8004fce:	0013      	movs	r3, r2
 8004fd0:	4a23      	ldr	r2, [pc, #140]	@ (8005060 <_vsnprintf+0x2e4>)
 8004fd2:	401a      	ands	r2, r3
 8004fd4:	1e51      	subs	r1, r2, #1
 8004fd6:	418a      	sbcs	r2, r1
 8004fd8:	b2d2      	uxtb	r2, r2
 8004fda:	2a00      	cmp	r2, #0
 8004fdc:	d120      	bne.n	8005020 <_vsnprintf+0x2a4>
 8004fde:	2280      	movs	r2, #128	@ 0x80
 8004fe0:	401a      	ands	r2, r3
 8004fe2:	1e51      	subs	r1, r2, #1
 8004fe4:	418a      	sbcs	r2, r1
 8004fe6:	b2d2      	uxtb	r2, r2
 8004fe8:	2a00      	cmp	r2, #0
 8004fea:	d000      	beq.n	8004fee <_vsnprintf+0x272>
 8004fec:	e2b5      	b.n	800555a <_vsnprintf+0x7de>
 8004fee:	2280      	movs	r2, #128	@ 0x80
 8004ff0:	00d2      	lsls	r2, r2, #3
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	1e5a      	subs	r2, r3, #1
 8004ff6:	4193      	sbcs	r3, r2
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d000      	beq.n	8005000 <_vsnprintf+0x284>
 8004ffe:	e246      	b.n	800548e <_vsnprintf+0x712>
 8005000:	e310      	b.n	8005624 <_vsnprintf+0x8a8>
 8005002:	3b25      	subs	r3, #37	@ 0x25
 8005004:	2b42      	cmp	r3, #66	@ 0x42
 8005006:	d900      	bls.n	800500a <_vsnprintf+0x28e>
 8005008:	e30c      	b.n	8005624 <_vsnprintf+0x8a8>
 800500a:	009a      	lsls	r2, r3, #2
 800500c:	4b15      	ldr	r3, [pc, #84]	@ (8005064 <_vsnprintf+0x2e8>)
 800500e:	18d3      	adds	r3, r2, r3
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	469f      	mov	pc, r3
 8005014:	2b78      	cmp	r3, #120	@ 0x78
 8005016:	dd00      	ble.n	800501a <_vsnprintf+0x29e>
 8005018:	e304      	b.n	8005624 <_vsnprintf+0x8a8>
 800501a:	2b69      	cmp	r3, #105	@ 0x69
 800501c:	dad4      	bge.n	8004fc8 <_vsnprintf+0x24c>
 800501e:	e301      	b.n	8005624 <_vsnprintf+0x8a8>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	2b78      	cmp	r3, #120	@ 0x78
 8005026:	d003      	beq.n	8005030 <_vsnprintf+0x2b4>
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	2b58      	cmp	r3, #88	@ 0x58
 800502e:	d102      	bne.n	8005036 <_vsnprintf+0x2ba>
          base = 16U;
 8005030:	2310      	movs	r3, #16
 8005032:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005034:	e01e      	b.n	8005074 <_vsnprintf+0x2f8>
        }
        else if (*format == 'o') {
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	2b6f      	cmp	r3, #111	@ 0x6f
 800503c:	d102      	bne.n	8005044 <_vsnprintf+0x2c8>
          base =  8U;
 800503e:	2308      	movs	r3, #8
 8005040:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005042:	e017      	b.n	8005074 <_vsnprintf+0x2f8>
        }
        else if (*format == 'b') {
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	2b62      	cmp	r3, #98	@ 0x62
 800504a:	d10d      	bne.n	8005068 <_vsnprintf+0x2ec>
          base =  2U;
 800504c:	2302      	movs	r3, #2
 800504e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005050:	e010      	b.n	8005074 <_vsnprintf+0x2f8>
 8005052:	46c0      	nop			@ (mov r8, r8)
 8005054:	08003e91 	.word	0x08003e91
 8005058:	0800fe40 	.word	0x0800fe40
 800505c:	0800fe84 	.word	0x0800fe84
 8005060:	00009041 	.word	0x00009041
 8005064:	0800fed0 	.word	0x0800fed0
        }
        else {
          base = 10U;
 8005068:	230a      	movs	r3, #10
 800506a:	65bb      	str	r3, [r7, #88]	@ 0x58
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800506c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800506e:	2210      	movs	r2, #16
 8005070:	4393      	bics	r3, r2
 8005072:	66fb      	str	r3, [r7, #108]	@ 0x6c
        }
        // uppercase
        if (*format == 'X') {
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	2b58      	cmp	r3, #88	@ 0x58
 800507a:	d103      	bne.n	8005084 <_vsnprintf+0x308>
          flags |= FLAGS_UPPERCASE;
 800507c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800507e:	2220      	movs	r2, #32
 8005080:	4313      	orrs	r3, r2
 8005082:	66fb      	str	r3, [r7, #108]	@ 0x6c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	2b69      	cmp	r3, #105	@ 0x69
 800508a:	d007      	beq.n	800509c <_vsnprintf+0x320>
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	2b64      	cmp	r3, #100	@ 0x64
 8005092:	d003      	beq.n	800509c <_vsnprintf+0x320>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8005094:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005096:	220c      	movs	r2, #12
 8005098:	4393      	bics	r3, r2
 800509a:	66fb      	str	r3, [r7, #108]	@ 0x6c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800509c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800509e:	2380      	movs	r3, #128	@ 0x80
 80050a0:	00db      	lsls	r3, r3, #3
 80050a2:	4013      	ands	r3, r2
 80050a4:	d003      	beq.n	80050ae <_vsnprintf+0x332>
          flags &= ~FLAGS_ZEROPAD;
 80050a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050a8:	2201      	movs	r2, #1
 80050aa:	4393      	bics	r3, r2
 80050ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	2b69      	cmp	r3, #105	@ 0x69
 80050b4:	d004      	beq.n	80050c0 <_vsnprintf+0x344>
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	2b64      	cmp	r3, #100	@ 0x64
 80050bc:	d000      	beq.n	80050c0 <_vsnprintf+0x344>
 80050be:	e0af      	b.n	8005220 <_vsnprintf+0x4a4>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 80050c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80050c2:	2380      	movs	r3, #128	@ 0x80
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4013      	ands	r3, r2
 80050c8:	d03d      	beq.n	8005146 <_vsnprintf+0x3ca>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 80050ca:	2388      	movs	r3, #136	@ 0x88
 80050cc:	18fb      	adds	r3, r7, r3
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	3307      	adds	r3, #7
 80050d2:	2207      	movs	r2, #7
 80050d4:	4393      	bics	r3, r2
 80050d6:	001a      	movs	r2, r3
 80050d8:	3208      	adds	r2, #8
 80050da:	2188      	movs	r1, #136	@ 0x88
 80050dc:	1879      	adds	r1, r7, r1
 80050de:	600a      	str	r2, [r1, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80050e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80050e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	da05      	bge.n	80050fc <_vsnprintf+0x380>
 80050f0:	2000      	movs	r0, #0
 80050f2:	2100      	movs	r1, #0
 80050f4:	1a80      	subs	r0, r0, r2
 80050f6:	4199      	sbcs	r1, r3
 80050f8:	0002      	movs	r2, r0
 80050fa:	000b      	movs	r3, r1
 80050fc:	0010      	movs	r0, r2
 80050fe:	0019      	movs	r1, r3
 8005100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005102:	0fdb      	lsrs	r3, r3, #31
 8005104:	b2da      	uxtb	r2, r3
 8005106:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005108:	613b      	str	r3, [r7, #16]
 800510a:	2300      	movs	r3, #0
 800510c:	617b      	str	r3, [r7, #20]
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	469c      	mov	ip, r3
 8005112:	6dfe      	ldr	r6, [r7, #92]	@ 0x5c
 8005114:	6a3d      	ldr	r5, [r7, #32]
 8005116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005118:	4698      	mov	r8, r3
 800511a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800511c:	9308      	str	r3, [sp, #32]
 800511e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005120:	9307      	str	r3, [sp, #28]
 8005122:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005124:	9306      	str	r3, [sp, #24]
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	697c      	ldr	r4, [r7, #20]
 800512a:	9304      	str	r3, [sp, #16]
 800512c:	9405      	str	r4, [sp, #20]
 800512e:	9202      	str	r2, [sp, #8]
 8005130:	9000      	str	r0, [sp, #0]
 8005132:	9101      	str	r1, [sp, #4]
 8005134:	4663      	mov	r3, ip
 8005136:	0032      	movs	r2, r6
 8005138:	0029      	movs	r1, r5
 800513a:	4640      	mov	r0, r8
 800513c:	f7ff f8b1 	bl	80042a2 <_ntoa_long_long>
 8005140:	0003      	movs	r3, r0
 8005142:	65fb      	str	r3, [r7, #92]	@ 0x5c
          if (flags & FLAGS_LONG_LONG) {
 8005144:	e0fa      	b.n	800533c <_vsnprintf+0x5c0>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8005146:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005148:	2380      	movs	r3, #128	@ 0x80
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	4013      	ands	r3, r2
 800514e:	d025      	beq.n	800519c <_vsnprintf+0x420>
            const long value = va_arg(va, long);
 8005150:	2388      	movs	r3, #136	@ 0x88
 8005152:	18fb      	adds	r3, r7, r3
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	1d1a      	adds	r2, r3, #4
 8005158:	2188      	movs	r1, #136	@ 0x88
 800515a:	1879      	adds	r1, r7, r1
 800515c:	600a      	str	r2, [r1, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	637b      	str	r3, [r7, #52]	@ 0x34
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8005162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005164:	17da      	asrs	r2, r3, #31
 8005166:	189b      	adds	r3, r3, r2
 8005168:	4053      	eors	r3, r2
 800516a:	001e      	movs	r6, r3
 800516c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800516e:	0fdb      	lsrs	r3, r3, #31
 8005170:	b2da      	uxtb	r2, r3
 8005172:	69fd      	ldr	r5, [r7, #28]
 8005174:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 8005176:	6a39      	ldr	r1, [r7, #32]
 8005178:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800517a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800517c:	9305      	str	r3, [sp, #20]
 800517e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005180:	9304      	str	r3, [sp, #16]
 8005182:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005184:	9303      	str	r3, [sp, #12]
 8005186:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005188:	9302      	str	r3, [sp, #8]
 800518a:	9201      	str	r2, [sp, #4]
 800518c:	9600      	str	r6, [sp, #0]
 800518e:	002b      	movs	r3, r5
 8005190:	0022      	movs	r2, r4
 8005192:	f7ff f81d 	bl	80041d0 <_ntoa_long>
 8005196:	0003      	movs	r3, r0
 8005198:	65fb      	str	r3, [r7, #92]	@ 0x5c
          if (flags & FLAGS_LONG_LONG) {
 800519a:	e0cf      	b.n	800533c <_vsnprintf+0x5c0>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800519c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800519e:	2240      	movs	r2, #64	@ 0x40
 80051a0:	4013      	ands	r3, r2
 80051a2:	d009      	beq.n	80051b8 <_vsnprintf+0x43c>
 80051a4:	2388      	movs	r3, #136	@ 0x88
 80051a6:	18fb      	adds	r3, r7, r3
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	1d1a      	adds	r2, r3, #4
 80051ac:	2188      	movs	r1, #136	@ 0x88
 80051ae:	1879      	adds	r1, r7, r1
 80051b0:	600a      	str	r2, [r1, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	e015      	b.n	80051e4 <_vsnprintf+0x468>
 80051b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051ba:	2280      	movs	r2, #128	@ 0x80
 80051bc:	4013      	ands	r3, r2
 80051be:	d009      	beq.n	80051d4 <_vsnprintf+0x458>
 80051c0:	2388      	movs	r3, #136	@ 0x88
 80051c2:	18fb      	adds	r3, r7, r3
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	1d1a      	adds	r2, r3, #4
 80051c8:	2188      	movs	r1, #136	@ 0x88
 80051ca:	1879      	adds	r1, r7, r1
 80051cc:	600a      	str	r2, [r1, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	b21b      	sxth	r3, r3
 80051d2:	e007      	b.n	80051e4 <_vsnprintf+0x468>
 80051d4:	2388      	movs	r3, #136	@ 0x88
 80051d6:	18fb      	adds	r3, r7, r3
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	1d1a      	adds	r2, r3, #4
 80051dc:	2188      	movs	r1, #136	@ 0x88
 80051de:	1879      	adds	r1, r7, r1
 80051e0:	600a      	str	r2, [r1, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	63bb      	str	r3, [r7, #56]	@ 0x38
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80051e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051e8:	17da      	asrs	r2, r3, #31
 80051ea:	189b      	adds	r3, r3, r2
 80051ec:	4053      	eors	r3, r2
 80051ee:	001e      	movs	r6, r3
 80051f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f2:	0fdb      	lsrs	r3, r3, #31
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	69fd      	ldr	r5, [r7, #28]
 80051f8:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 80051fa:	6a39      	ldr	r1, [r7, #32]
 80051fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80051fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005200:	9305      	str	r3, [sp, #20]
 8005202:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005204:	9304      	str	r3, [sp, #16]
 8005206:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005208:	9303      	str	r3, [sp, #12]
 800520a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800520c:	9302      	str	r3, [sp, #8]
 800520e:	9201      	str	r2, [sp, #4]
 8005210:	9600      	str	r6, [sp, #0]
 8005212:	002b      	movs	r3, r5
 8005214:	0022      	movs	r2, r4
 8005216:	f7fe ffdb 	bl	80041d0 <_ntoa_long>
 800521a:	0003      	movs	r3, r0
 800521c:	65fb      	str	r3, [r7, #92]	@ 0x5c
          if (flags & FLAGS_LONG_LONG) {
 800521e:	e08d      	b.n	800533c <_vsnprintf+0x5c0>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8005220:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005222:	2380      	movs	r3, #128	@ 0x80
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4013      	ands	r3, r2
 8005228:	d02b      	beq.n	8005282 <_vsnprintf+0x506>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800522a:	2388      	movs	r3, #136	@ 0x88
 800522c:	18fb      	adds	r3, r7, r3
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	3307      	adds	r3, #7
 8005232:	2207      	movs	r2, #7
 8005234:	4393      	bics	r3, r2
 8005236:	001a      	movs	r2, r3
 8005238:	3208      	adds	r2, #8
 800523a:	2188      	movs	r1, #136	@ 0x88
 800523c:	1879      	adds	r1, r7, r1
 800523e:	600a      	str	r2, [r1, #0]
 8005240:	6818      	ldr	r0, [r3, #0]
 8005242:	6859      	ldr	r1, [r3, #4]
 8005244:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005246:	60bb      	str	r3, [r7, #8]
 8005248:	2300      	movs	r3, #0
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	69fe      	ldr	r6, [r7, #28]
 800524e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005250:	6a3d      	ldr	r5, [r7, #32]
 8005252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005254:	469c      	mov	ip, r3
 8005256:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005258:	9308      	str	r3, [sp, #32]
 800525a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800525c:	9307      	str	r3, [sp, #28]
 800525e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005260:	9306      	str	r3, [sp, #24]
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	68fc      	ldr	r4, [r7, #12]
 8005266:	9304      	str	r3, [sp, #16]
 8005268:	9405      	str	r4, [sp, #20]
 800526a:	2300      	movs	r3, #0
 800526c:	9302      	str	r3, [sp, #8]
 800526e:	9000      	str	r0, [sp, #0]
 8005270:	9101      	str	r1, [sp, #4]
 8005272:	0033      	movs	r3, r6
 8005274:	0029      	movs	r1, r5
 8005276:	4660      	mov	r0, ip
 8005278:	f7ff f813 	bl	80042a2 <_ntoa_long_long>
 800527c:	0003      	movs	r3, r0
 800527e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005280:	e05c      	b.n	800533c <_vsnprintf+0x5c0>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8005282:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005284:	2380      	movs	r3, #128	@ 0x80
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	4013      	ands	r3, r2
 800528a:	d01d      	beq.n	80052c8 <_vsnprintf+0x54c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800528c:	2388      	movs	r3, #136	@ 0x88
 800528e:	18fb      	adds	r3, r7, r3
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	1d1a      	adds	r2, r3, #4
 8005294:	2188      	movs	r1, #136	@ 0x88
 8005296:	1879      	adds	r1, r7, r1
 8005298:	600a      	str	r2, [r1, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	69fd      	ldr	r5, [r7, #28]
 800529e:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 80052a0:	6a39      	ldr	r1, [r7, #32]
 80052a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80052a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80052a6:	9205      	str	r2, [sp, #20]
 80052a8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80052aa:	9204      	str	r2, [sp, #16]
 80052ac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80052ae:	9203      	str	r2, [sp, #12]
 80052b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80052b2:	9202      	str	r2, [sp, #8]
 80052b4:	2200      	movs	r2, #0
 80052b6:	9201      	str	r2, [sp, #4]
 80052b8:	9300      	str	r3, [sp, #0]
 80052ba:	002b      	movs	r3, r5
 80052bc:	0022      	movs	r2, r4
 80052be:	f7fe ff87 	bl	80041d0 <_ntoa_long>
 80052c2:	0003      	movs	r3, r0
 80052c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052c6:	e039      	b.n	800533c <_vsnprintf+0x5c0>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80052c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052ca:	2240      	movs	r2, #64	@ 0x40
 80052cc:	4013      	ands	r3, r2
 80052ce:	d009      	beq.n	80052e4 <_vsnprintf+0x568>
 80052d0:	2388      	movs	r3, #136	@ 0x88
 80052d2:	18fb      	adds	r3, r7, r3
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	1d1a      	adds	r2, r3, #4
 80052d8:	2188      	movs	r1, #136	@ 0x88
 80052da:	1879      	adds	r1, r7, r1
 80052dc:	600a      	str	r2, [r1, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	e015      	b.n	8005310 <_vsnprintf+0x594>
 80052e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052e6:	2280      	movs	r2, #128	@ 0x80
 80052e8:	4013      	ands	r3, r2
 80052ea:	d009      	beq.n	8005300 <_vsnprintf+0x584>
 80052ec:	2388      	movs	r3, #136	@ 0x88
 80052ee:	18fb      	adds	r3, r7, r3
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	1d1a      	adds	r2, r3, #4
 80052f4:	2188      	movs	r1, #136	@ 0x88
 80052f6:	1879      	adds	r1, r7, r1
 80052f8:	600a      	str	r2, [r1, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	e007      	b.n	8005310 <_vsnprintf+0x594>
 8005300:	2388      	movs	r3, #136	@ 0x88
 8005302:	18fb      	adds	r3, r7, r3
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	1d1a      	adds	r2, r3, #4
 8005308:	2188      	movs	r1, #136	@ 0x88
 800530a:	1879      	adds	r1, r7, r1
 800530c:	600a      	str	r2, [r1, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	63fb      	str	r3, [r7, #60]	@ 0x3c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8005312:	69fc      	ldr	r4, [r7, #28]
 8005314:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005316:	6a39      	ldr	r1, [r7, #32]
 8005318:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800531a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800531c:	9305      	str	r3, [sp, #20]
 800531e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005320:	9304      	str	r3, [sp, #16]
 8005322:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005324:	9303      	str	r3, [sp, #12]
 8005326:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005328:	9302      	str	r3, [sp, #8]
 800532a:	2300      	movs	r3, #0
 800532c:	9301      	str	r3, [sp, #4]
 800532e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005330:	9300      	str	r3, [sp, #0]
 8005332:	0023      	movs	r3, r4
 8005334:	f7fe ff4c 	bl	80041d0 <_ntoa_long>
 8005338:	0003      	movs	r3, r0
 800533a:	65fb      	str	r3, [r7, #92]	@ 0x5c
          }
        }
        format++;
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	3301      	adds	r3, #1
 8005340:	61bb      	str	r3, [r7, #24]
        break;
 8005342:	e17c      	b.n	800563e <_vsnprintf+0x8c2>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	2b46      	cmp	r3, #70	@ 0x46
 800534a:	d103      	bne.n	8005354 <_vsnprintf+0x5d8>
 800534c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800534e:	2220      	movs	r2, #32
 8005350:	4313      	orrs	r3, r2
 8005352:	66fb      	str	r3, [r7, #108]	@ 0x6c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8005354:	2388      	movs	r3, #136	@ 0x88
 8005356:	18fb      	adds	r3, r7, r3
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	3307      	adds	r3, #7
 800535c:	2207      	movs	r2, #7
 800535e:	4393      	bics	r3, r2
 8005360:	001a      	movs	r2, r3
 8005362:	3208      	adds	r2, #8
 8005364:	2188      	movs	r1, #136	@ 0x88
 8005366:	1879      	adds	r1, r7, r1
 8005368:	600a      	str	r2, [r1, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	69fe      	ldr	r6, [r7, #28]
 8005370:	6dfd      	ldr	r5, [r7, #92]	@ 0x5c
 8005372:	6a3c      	ldr	r4, [r7, #32]
 8005374:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005376:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8005378:	9104      	str	r1, [sp, #16]
 800537a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800537c:	9103      	str	r1, [sp, #12]
 800537e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8005380:	9102      	str	r1, [sp, #8]
 8005382:	9200      	str	r2, [sp, #0]
 8005384:	9301      	str	r3, [sp, #4]
 8005386:	0033      	movs	r3, r6
 8005388:	002a      	movs	r2, r5
 800538a:	0021      	movs	r1, r4
 800538c:	f7fe fffc 	bl	8004388 <_ftoa>
 8005390:	0003      	movs	r3, r0
 8005392:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	3301      	adds	r3, #1
 8005398:	61bb      	str	r3, [r7, #24]
        break;
 800539a:	e150      	b.n	800563e <_vsnprintf+0x8c2>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	2b67      	cmp	r3, #103	@ 0x67
 80053a2:	d003      	beq.n	80053ac <_vsnprintf+0x630>
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b47      	cmp	r3, #71	@ 0x47
 80053aa:	d104      	bne.n	80053b6 <_vsnprintf+0x63a>
 80053ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053ae:	2280      	movs	r2, #128	@ 0x80
 80053b0:	0112      	lsls	r2, r2, #4
 80053b2:	4313      	orrs	r3, r2
 80053b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	2b45      	cmp	r3, #69	@ 0x45
 80053bc:	d003      	beq.n	80053c6 <_vsnprintf+0x64a>
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	2b47      	cmp	r3, #71	@ 0x47
 80053c4:	d103      	bne.n	80053ce <_vsnprintf+0x652>
 80053c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053c8:	2220      	movs	r2, #32
 80053ca:	4313      	orrs	r3, r2
 80053cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80053ce:	2388      	movs	r3, #136	@ 0x88
 80053d0:	18fb      	adds	r3, r7, r3
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	3307      	adds	r3, #7
 80053d6:	2207      	movs	r2, #7
 80053d8:	4393      	bics	r3, r2
 80053da:	001a      	movs	r2, r3
 80053dc:	3208      	adds	r2, #8
 80053de:	2188      	movs	r1, #136	@ 0x88
 80053e0:	1879      	adds	r1, r7, r1
 80053e2:	600a      	str	r2, [r1, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	69fe      	ldr	r6, [r7, #28]
 80053ea:	6dfd      	ldr	r5, [r7, #92]	@ 0x5c
 80053ec:	6a3c      	ldr	r4, [r7, #32]
 80053ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80053f0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80053f2:	9104      	str	r1, [sp, #16]
 80053f4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80053f6:	9103      	str	r1, [sp, #12]
 80053f8:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80053fa:	9102      	str	r1, [sp, #8]
 80053fc:	9200      	str	r2, [sp, #0]
 80053fe:	9301      	str	r3, [sp, #4]
 8005400:	0033      	movs	r3, r6
 8005402:	002a      	movs	r2, r5
 8005404:	0021      	movs	r1, r4
 8005406:	f7ff f9fd 	bl	8004804 <_etoa>
 800540a:	0003      	movs	r3, r0
 800540c:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	3301      	adds	r3, #1
 8005412:	61bb      	str	r3, [r7, #24]
        break;
 8005414:	e113      	b.n	800563e <_vsnprintf+0x8c2>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8005416:	2301      	movs	r3, #1
 8005418:	657b      	str	r3, [r7, #84]	@ 0x54
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800541a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800541c:	2202      	movs	r2, #2
 800541e:	4013      	ands	r3, r2
 8005420:	d10e      	bne.n	8005440 <_vsnprintf+0x6c4>
          while (l++ < width) {
 8005422:	e007      	b.n	8005434 <_vsnprintf+0x6b8>
            out(' ', buffer, idx++, maxlen);
 8005424:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005426:	1c53      	adds	r3, r2, #1
 8005428:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	6a39      	ldr	r1, [r7, #32]
 800542e:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8005430:	2020      	movs	r0, #32
 8005432:	47a0      	blx	r4
          while (l++ < width) {
 8005434:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005436:	1c5a      	adds	r2, r3, #1
 8005438:	657a      	str	r2, [r7, #84]	@ 0x54
 800543a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800543c:	429a      	cmp	r2, r3
 800543e:	d8f1      	bhi.n	8005424 <_vsnprintf+0x6a8>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8005440:	2388      	movs	r3, #136	@ 0x88
 8005442:	18fb      	adds	r3, r7, r3
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	1d1a      	adds	r2, r3, #4
 8005448:	2188      	movs	r1, #136	@ 0x88
 800544a:	1879      	adds	r1, r7, r1
 800544c:	600a      	str	r2, [r1, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	b2d8      	uxtb	r0, r3
 8005452:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005454:	1c53      	adds	r3, r2, #1
 8005456:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	6a39      	ldr	r1, [r7, #32]
 800545c:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800545e:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8005460:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005462:	2202      	movs	r2, #2
 8005464:	4013      	ands	r3, r2
 8005466:	d00e      	beq.n	8005486 <_vsnprintf+0x70a>
          while (l++ < width) {
 8005468:	e007      	b.n	800547a <_vsnprintf+0x6fe>
            out(' ', buffer, idx++, maxlen);
 800546a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800546c:	1c53      	adds	r3, r2, #1
 800546e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	6a39      	ldr	r1, [r7, #32]
 8005474:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8005476:	2020      	movs	r0, #32
 8005478:	47a0      	blx	r4
          while (l++ < width) {
 800547a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	657a      	str	r2, [r7, #84]	@ 0x54
 8005480:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005482:	429a      	cmp	r2, r3
 8005484:	d8f1      	bhi.n	800546a <_vsnprintf+0x6ee>
          }
        }
        format++;
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	3301      	adds	r3, #1
 800548a:	61bb      	str	r3, [r7, #24]
        break;
 800548c:	e0d7      	b.n	800563e <_vsnprintf+0x8c2>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800548e:	2388      	movs	r3, #136	@ 0x88
 8005490:	18fb      	adds	r3, r7, r3
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	1d1a      	adds	r2, r3, #4
 8005496:	2188      	movs	r1, #136	@ 0x88
 8005498:	1879      	adds	r1, r7, r1
 800549a:	600a      	str	r2, [r1, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	653b      	str	r3, [r7, #80]	@ 0x50
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80054a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <_vsnprintf+0x72e>
 80054a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054a8:	e001      	b.n	80054ae <_vsnprintf+0x732>
 80054aa:	2301      	movs	r3, #1
 80054ac:	425b      	negs	r3, r3
 80054ae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80054b0:	0019      	movs	r1, r3
 80054b2:	0010      	movs	r0, r2
 80054b4:	f7fe fd12 	bl	8003edc <_strnlen_s>
 80054b8:	0003      	movs	r3, r0
 80054ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 80054bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80054be:	2380      	movs	r3, #128	@ 0x80
 80054c0:	00db      	lsls	r3, r3, #3
 80054c2:	4013      	ands	r3, r2
 80054c4:	d005      	beq.n	80054d2 <_vsnprintf+0x756>
          l = (l < precision ? l : precision);
 80054c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d900      	bls.n	80054d0 <_vsnprintf+0x754>
 80054ce:	0013      	movs	r3, r2
 80054d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }
        if (!(flags & FLAGS_LEFT)) {
 80054d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054d4:	2202      	movs	r2, #2
 80054d6:	4013      	ands	r3, r2
 80054d8:	d11a      	bne.n	8005510 <_vsnprintf+0x794>
          while (l++ < width) {
 80054da:	e007      	b.n	80054ec <_vsnprintf+0x770>
            out(' ', buffer, idx++, maxlen);
 80054dc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80054de:	1c53      	adds	r3, r2, #1
 80054e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	6a39      	ldr	r1, [r7, #32]
 80054e6:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80054e8:	2020      	movs	r0, #32
 80054ea:	47a0      	blx	r4
          while (l++ < width) {
 80054ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054ee:	1c5a      	adds	r2, r3, #1
 80054f0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80054f2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d8f1      	bhi.n	80054dc <_vsnprintf+0x760>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80054f8:	e00a      	b.n	8005510 <_vsnprintf+0x794>
          out(*(p++), buffer, idx++, maxlen);
 80054fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054fc:	1c5a      	adds	r2, r3, #1
 80054fe:	653a      	str	r2, [r7, #80]	@ 0x50
 8005500:	7818      	ldrb	r0, [r3, #0]
 8005502:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005504:	1c53      	adds	r3, r2, #1
 8005506:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	6a39      	ldr	r1, [r7, #32]
 800550c:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800550e:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8005510:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d009      	beq.n	800552c <_vsnprintf+0x7b0>
 8005518:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800551a:	2380      	movs	r3, #128	@ 0x80
 800551c:	00db      	lsls	r3, r3, #3
 800551e:	4013      	ands	r3, r2
 8005520:	d0eb      	beq.n	80054fa <_vsnprintf+0x77e>
 8005522:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005524:	1e5a      	subs	r2, r3, #1
 8005526:	667a      	str	r2, [r7, #100]	@ 0x64
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1e6      	bne.n	80054fa <_vsnprintf+0x77e>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800552c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800552e:	2202      	movs	r2, #2
 8005530:	4013      	ands	r3, r2
 8005532:	d00e      	beq.n	8005552 <_vsnprintf+0x7d6>
          while (l++ < width) {
 8005534:	e007      	b.n	8005546 <_vsnprintf+0x7ca>
            out(' ', buffer, idx++, maxlen);
 8005536:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005538:	1c53      	adds	r3, r2, #1
 800553a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	6a39      	ldr	r1, [r7, #32]
 8005540:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8005542:	2020      	movs	r0, #32
 8005544:	47a0      	blx	r4
          while (l++ < width) {
 8005546:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005548:	1c5a      	adds	r2, r3, #1
 800554a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800554c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800554e:	429a      	cmp	r2, r3
 8005550:	d8f1      	bhi.n	8005536 <_vsnprintf+0x7ba>
          }
        }
        format++;
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	3301      	adds	r3, #1
 8005556:	61bb      	str	r3, [r7, #24]
        break;
 8005558:	e071      	b.n	800563e <_vsnprintf+0x8c2>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800555a:	2308      	movs	r3, #8
 800555c:	66bb      	str	r3, [r7, #104]	@ 0x68
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800555e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005560:	2221      	movs	r2, #33	@ 0x21
 8005562:	4313      	orrs	r3, r2
 8005564:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8005566:	212b      	movs	r1, #43	@ 0x2b
 8005568:	2318      	movs	r3, #24
 800556a:	18cb      	adds	r3, r1, r3
 800556c:	19db      	adds	r3, r3, r7
 800556e:	2200      	movs	r2, #0
 8005570:	701a      	strb	r2, [r3, #0]
        if (is_ll) {
 8005572:	2318      	movs	r3, #24
 8005574:	18cb      	adds	r3, r1, r3
 8005576:	19db      	adds	r3, r3, r7
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d025      	beq.n	80055ca <_vsnprintf+0x84e>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 800557e:	2388      	movs	r3, #136	@ 0x88
 8005580:	18fb      	adds	r3, r7, r3
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	1d1a      	adds	r2, r3, #4
 8005586:	2188      	movs	r1, #136	@ 0x88
 8005588:	1879      	adds	r1, r7, r1
 800558a:	600a      	str	r2, [r1, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	603b      	str	r3, [r7, #0]
 8005590:	2300      	movs	r3, #0
 8005592:	607b      	str	r3, [r7, #4]
 8005594:	69fd      	ldr	r5, [r7, #28]
 8005596:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 8005598:	6a39      	ldr	r1, [r7, #32]
 800559a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800559c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800559e:	9308      	str	r3, [sp, #32]
 80055a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055a2:	9307      	str	r3, [sp, #28]
 80055a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055a6:	9306      	str	r3, [sp, #24]
 80055a8:	2210      	movs	r2, #16
 80055aa:	2300      	movs	r3, #0
 80055ac:	9204      	str	r2, [sp, #16]
 80055ae:	9305      	str	r3, [sp, #20]
 80055b0:	2300      	movs	r3, #0
 80055b2:	9302      	str	r3, [sp, #8]
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	9200      	str	r2, [sp, #0]
 80055ba:	9301      	str	r3, [sp, #4]
 80055bc:	002b      	movs	r3, r5
 80055be:	0022      	movs	r2, r4
 80055c0:	f7fe fe6f 	bl	80042a2 <_ntoa_long_long>
 80055c4:	0003      	movs	r3, r0
 80055c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055c8:	e01c      	b.n	8005604 <_vsnprintf+0x888>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80055ca:	2388      	movs	r3, #136	@ 0x88
 80055cc:	18fb      	adds	r3, r7, r3
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	1d1a      	adds	r2, r3, #4
 80055d2:	2188      	movs	r1, #136	@ 0x88
 80055d4:	1879      	adds	r1, r7, r1
 80055d6:	600a      	str	r2, [r1, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	001d      	movs	r5, r3
 80055dc:	69fc      	ldr	r4, [r7, #28]
 80055de:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80055e0:	6a39      	ldr	r1, [r7, #32]
 80055e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80055e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055e6:	9305      	str	r3, [sp, #20]
 80055e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055ea:	9304      	str	r3, [sp, #16]
 80055ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055ee:	9303      	str	r3, [sp, #12]
 80055f0:	2310      	movs	r3, #16
 80055f2:	9302      	str	r3, [sp, #8]
 80055f4:	2300      	movs	r3, #0
 80055f6:	9301      	str	r3, [sp, #4]
 80055f8:	9500      	str	r5, [sp, #0]
 80055fa:	0023      	movs	r3, r4
 80055fc:	f7fe fde8 	bl	80041d0 <_ntoa_long>
 8005600:	0003      	movs	r3, r0
 8005602:	65fb      	str	r3, [r7, #92]	@ 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	3301      	adds	r3, #1
 8005608:	61bb      	str	r3, [r7, #24]
        break;
 800560a:	e018      	b.n	800563e <_vsnprintf+0x8c2>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800560c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800560e:	1c53      	adds	r3, r2, #1
 8005610:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	6a39      	ldr	r1, [r7, #32]
 8005616:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8005618:	2025      	movs	r0, #37	@ 0x25
 800561a:	47a0      	blx	r4
        format++;
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	3301      	adds	r3, #1
 8005620:	61bb      	str	r3, [r7, #24]
        break;
 8005622:	e00c      	b.n	800563e <_vsnprintf+0x8c2>

      default :
        out(*format, buffer, idx++, maxlen);
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	7818      	ldrb	r0, [r3, #0]
 8005628:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800562a:	1c53      	adds	r3, r2, #1
 800562c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	6a39      	ldr	r1, [r7, #32]
 8005632:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8005634:	47a0      	blx	r4
        format++;
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	3301      	adds	r3, #1
 800563a:	61bb      	str	r3, [r7, #24]
        break;
 800563c:	46c0      	nop			@ (mov r8, r8)
  while (*format)
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <_vsnprintf+0x8ce>
 8005646:	f7ff fbad 	bl	8004da4 <_vsnprintf+0x28>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800564a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	429a      	cmp	r2, r3
 8005650:	d302      	bcc.n	8005658 <_vsnprintf+0x8dc>
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	1e5a      	subs	r2, r3, #1
 8005656:	e000      	b.n	800565a <_vsnprintf+0x8de>
 8005658:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	6a39      	ldr	r1, [r7, #32]
 800565e:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8005660:	2000      	movs	r0, #0
 8005662:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8005664:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8005666:	0018      	movs	r0, r3
 8005668:	46bd      	mov	sp, r7
 800566a:	b01c      	add	sp, #112	@ 0x70
 800566c:	bc80      	pop	{r7}
 800566e:	46b8      	mov	r8, r7
 8005670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005672:	46c0      	nop			@ (mov r8, r8)

08005674 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8005674:	b40f      	push	{r0, r1, r2, r3}
 8005676:	b590      	push	{r4, r7, lr}
 8005678:	b087      	sub	sp, #28
 800567a:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 800567c:	2324      	movs	r3, #36	@ 0x24
 800567e:	18fb      	adds	r3, r7, r3
 8005680:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8005682:	6a3c      	ldr	r4, [r7, #32]
 8005684:	2301      	movs	r3, #1
 8005686:	425a      	negs	r2, r3
 8005688:	1d39      	adds	r1, r7, #4
 800568a:	4808      	ldr	r0, [pc, #32]	@ (80056ac <printf_+0x38>)
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	9300      	str	r3, [sp, #0]
 8005690:	0023      	movs	r3, r4
 8005692:	f7ff fb73 	bl	8004d7c <_vsnprintf>
 8005696:	0003      	movs	r3, r0
 8005698:	60fb      	str	r3, [r7, #12]
  va_end(va);
  return ret;
 800569a:	68fb      	ldr	r3, [r7, #12]
}
 800569c:	0018      	movs	r0, r3
 800569e:	46bd      	mov	sp, r7
 80056a0:	b005      	add	sp, #20
 80056a2:	bc90      	pop	{r4, r7}
 80056a4:	bc08      	pop	{r3}
 80056a6:	b004      	add	sp, #16
 80056a8:	4718      	bx	r3
 80056aa:	46c0      	nop			@ (mov r8, r8)
 80056ac:	08003ead 	.word	0x08003ead

080056b0 <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
 80056b0:	b40e      	push	{r1, r2, r3}
 80056b2:	b590      	push	{r4, r7, lr}
 80056b4:	b086      	sub	sp, #24
 80056b6:	af02      	add	r7, sp, #8
 80056b8:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 80056ba:	2320      	movs	r3, #32
 80056bc:	18fb      	adds	r3, r7, r3
 80056be:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 80056c0:	69fc      	ldr	r4, [r7, #28]
 80056c2:	2301      	movs	r3, #1
 80056c4:	425a      	negs	r2, r3
 80056c6:	6879      	ldr	r1, [r7, #4]
 80056c8:	4807      	ldr	r0, [pc, #28]	@ (80056e8 <sprintf_+0x38>)
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	0023      	movs	r3, r4
 80056d0:	f7ff fb54 	bl	8004d7c <_vsnprintf>
 80056d4:	0003      	movs	r3, r0
 80056d6:	60fb      	str	r3, [r7, #12]
  va_end(va);
  return ret;
 80056d8:	68fb      	ldr	r3, [r7, #12]
}
 80056da:	0018      	movs	r0, r3
 80056dc:	46bd      	mov	sp, r7
 80056de:	b004      	add	sp, #16
 80056e0:	bc90      	pop	{r4, r7}
 80056e2:	bc08      	pop	{r3}
 80056e4:	b003      	add	sp, #12
 80056e6:	4718      	bx	r3
 80056e8:	08003e61 	.word	0x08003e61

080056ec <_putchar>:
  va_end(va);
  return ret;
}


void _putchar(char character) {
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	0002      	movs	r2, r0
 80056f4:	1dfb      	adds	r3, r7, #7
 80056f6:	701a      	strb	r2, [r3, #0]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	while( !( USART2->ISR & USART_ISR_TXE_TXFNF ) ) {};
 80056f8:	46c0      	nop			@ (mov r8, r8)
 80056fa:	4b06      	ldr	r3, [pc, #24]	@ (8005714 <_putchar+0x28>)
 80056fc:	69db      	ldr	r3, [r3, #28]
 80056fe:	2280      	movs	r2, #128	@ 0x80
 8005700:	4013      	ands	r3, r2
 8005702:	d0fa      	beq.n	80056fa <_putchar+0xe>
      USART2->TDR = character;
 8005704:	4b03      	ldr	r3, [pc, #12]	@ (8005714 <_putchar+0x28>)
 8005706:	1dfa      	adds	r2, r7, #7
 8005708:	7812      	ldrb	r2, [r2, #0]
 800570a:	629a      	str	r2, [r3, #40]	@ 0x28
		
}
 800570c:	46c0      	nop			@ (mov r8, r8)
 800570e:	46bd      	mov	sp, r7
 8005710:	b002      	add	sp, #8
 8005712:	bd80      	pop	{r7, pc}
 8005714:	40004400 	.word	0x40004400

08005718 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800571c:	4b19      	ldr	r3, [pc, #100]	@ (8005784 <MX_RTC_Init+0x6c>)
 800571e:	4a1a      	ldr	r2, [pc, #104]	@ (8005788 <MX_RTC_Init+0x70>)
 8005720:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005722:	4b18      	ldr	r3, [pc, #96]	@ (8005784 <MX_RTC_Init+0x6c>)
 8005724:	2200      	movs	r2, #0
 8005726:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8005728:	4b16      	ldr	r3, [pc, #88]	@ (8005784 <MX_RTC_Init+0x6c>)
 800572a:	227f      	movs	r2, #127	@ 0x7f
 800572c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800572e:	4b15      	ldr	r3, [pc, #84]	@ (8005784 <MX_RTC_Init+0x6c>)
 8005730:	22ff      	movs	r2, #255	@ 0xff
 8005732:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005734:	4b13      	ldr	r3, [pc, #76]	@ (8005784 <MX_RTC_Init+0x6c>)
 8005736:	2200      	movs	r2, #0
 8005738:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800573a:	4b12      	ldr	r3, [pc, #72]	@ (8005784 <MX_RTC_Init+0x6c>)
 800573c:	2200      	movs	r2, #0
 800573e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005740:	4b10      	ldr	r3, [pc, #64]	@ (8005784 <MX_RTC_Init+0x6c>)
 8005742:	2200      	movs	r2, #0
 8005744:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005746:	4b0f      	ldr	r3, [pc, #60]	@ (8005784 <MX_RTC_Init+0x6c>)
 8005748:	2280      	movs	r2, #128	@ 0x80
 800574a:	05d2      	lsls	r2, r2, #23
 800574c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800574e:	4b0d      	ldr	r3, [pc, #52]	@ (8005784 <MX_RTC_Init+0x6c>)
 8005750:	2200      	movs	r2, #0
 8005752:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8005754:	4b0b      	ldr	r3, [pc, #44]	@ (8005784 <MX_RTC_Init+0x6c>)
 8005756:	2200      	movs	r2, #0
 8005758:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800575a:	4b0a      	ldr	r3, [pc, #40]	@ (8005784 <MX_RTC_Init+0x6c>)
 800575c:	0018      	movs	r0, r3
 800575e:	f003 f9e9 	bl	8008b34 <HAL_RTC_Init>
 8005762:	1e03      	subs	r3, r0, #0
 8005764:	d001      	beq.n	800576a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8005766:	f7fe fb75 	bl	8003e54 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 60, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 800576a:	4b06      	ldr	r3, [pc, #24]	@ (8005784 <MX_RTC_Init+0x6c>)
 800576c:	2204      	movs	r2, #4
 800576e:	213c      	movs	r1, #60	@ 0x3c
 8005770:	0018      	movs	r0, r3
 8005772:	f003 fad7 	bl	8008d24 <HAL_RTCEx_SetWakeUpTimer>
 8005776:	1e03      	subs	r3, r0, #0
 8005778:	d001      	beq.n	800577e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800577a:	f7fe fb6b 	bl	8003e54 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800577e:	46c0      	nop			@ (mov r8, r8)
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	20000474 	.word	0x20000474
 8005788:	40002800 	.word	0x40002800

0800578c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800578c:	b590      	push	{r4, r7, lr}
 800578e:	b095      	sub	sp, #84	@ 0x54
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005794:	240c      	movs	r4, #12
 8005796:	193b      	adds	r3, r7, r4
 8005798:	0018      	movs	r0, r3
 800579a:	2344      	movs	r3, #68	@ 0x44
 800579c:	001a      	movs	r2, r3
 800579e:	2100      	movs	r1, #0
 80057a0:	f008 f9b0 	bl	800db04 <memset>
  if(rtcHandle->Instance==RTC)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a16      	ldr	r2, [pc, #88]	@ (8005804 <HAL_RTC_MspInit+0x78>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d126      	bne.n	80057fc <HAL_RTC_MspInit+0x70>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80057ae:	193b      	adds	r3, r7, r4
 80057b0:	2280      	movs	r2, #128	@ 0x80
 80057b2:	0212      	lsls	r2, r2, #8
 80057b4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80057b6:	193b      	adds	r3, r7, r4
 80057b8:	2280      	movs	r2, #128	@ 0x80
 80057ba:	0092      	lsls	r2, r2, #2
 80057bc:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80057be:	193b      	adds	r3, r7, r4
 80057c0:	0018      	movs	r0, r3
 80057c2:	f002 f987 	bl	8007ad4 <HAL_RCCEx_PeriphCLKConfig>
 80057c6:	1e03      	subs	r3, r0, #0
 80057c8:	d001      	beq.n	80057ce <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80057ca:	f7fe fb43 	bl	8003e54 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80057ce:	4a0e      	ldr	r2, [pc, #56]	@ (8005808 <HAL_RTC_MspInit+0x7c>)
 80057d0:	2390      	movs	r3, #144	@ 0x90
 80057d2:	58d3      	ldr	r3, [r2, r3]
 80057d4:	490c      	ldr	r1, [pc, #48]	@ (8005808 <HAL_RTC_MspInit+0x7c>)
 80057d6:	2280      	movs	r2, #128	@ 0x80
 80057d8:	0212      	lsls	r2, r2, #8
 80057da:	4313      	orrs	r3, r2
 80057dc:	2290      	movs	r2, #144	@ 0x90
 80057de:	508b      	str	r3, [r1, r2]
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80057e0:	4b09      	ldr	r3, [pc, #36]	@ (8005808 <HAL_RTC_MspInit+0x7c>)
 80057e2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80057e4:	4b08      	ldr	r3, [pc, #32]	@ (8005808 <HAL_RTC_MspInit+0x7c>)
 80057e6:	2180      	movs	r1, #128	@ 0x80
 80057e8:	00c9      	lsls	r1, r1, #3
 80057ea:	430a      	orrs	r2, r1
 80057ec:	659a      	str	r2, [r3, #88]	@ 0x58
 80057ee:	4b06      	ldr	r3, [pc, #24]	@ (8005808 <HAL_RTC_MspInit+0x7c>)
 80057f0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80057f2:	2380      	movs	r3, #128	@ 0x80
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	4013      	ands	r3, r2
 80057f8:	60bb      	str	r3, [r7, #8]
 80057fa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80057fc:	46c0      	nop			@ (mov r8, r8)
 80057fe:	46bd      	mov	sp, r7
 8005800:	b015      	add	sp, #84	@ 0x54
 8005802:	bd90      	pop	{r4, r7, pc}
 8005804:	40002800 	.word	0x40002800
 8005808:	40021000 	.word	0x40021000

0800580c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005810:	4b1b      	ldr	r3, [pc, #108]	@ (8005880 <MX_SPI1_Init+0x74>)
 8005812:	4a1c      	ldr	r2, [pc, #112]	@ (8005884 <MX_SPI1_Init+0x78>)
 8005814:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005816:	4b1a      	ldr	r3, [pc, #104]	@ (8005880 <MX_SPI1_Init+0x74>)
 8005818:	2282      	movs	r2, #130	@ 0x82
 800581a:	0052      	lsls	r2, r2, #1
 800581c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800581e:	4b18      	ldr	r3, [pc, #96]	@ (8005880 <MX_SPI1_Init+0x74>)
 8005820:	2200      	movs	r2, #0
 8005822:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005824:	4b16      	ldr	r3, [pc, #88]	@ (8005880 <MX_SPI1_Init+0x74>)
 8005826:	22e0      	movs	r2, #224	@ 0xe0
 8005828:	00d2      	lsls	r2, r2, #3
 800582a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800582c:	4b14      	ldr	r3, [pc, #80]	@ (8005880 <MX_SPI1_Init+0x74>)
 800582e:	2200      	movs	r2, #0
 8005830:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005832:	4b13      	ldr	r3, [pc, #76]	@ (8005880 <MX_SPI1_Init+0x74>)
 8005834:	2200      	movs	r2, #0
 8005836:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005838:	4b11      	ldr	r3, [pc, #68]	@ (8005880 <MX_SPI1_Init+0x74>)
 800583a:	2280      	movs	r2, #128	@ 0x80
 800583c:	0092      	lsls	r2, r2, #2
 800583e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8005840:	4b0f      	ldr	r3, [pc, #60]	@ (8005880 <MX_SPI1_Init+0x74>)
 8005842:	2210      	movs	r2, #16
 8005844:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005846:	4b0e      	ldr	r3, [pc, #56]	@ (8005880 <MX_SPI1_Init+0x74>)
 8005848:	2200      	movs	r2, #0
 800584a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800584c:	4b0c      	ldr	r3, [pc, #48]	@ (8005880 <MX_SPI1_Init+0x74>)
 800584e:	2200      	movs	r2, #0
 8005850:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005852:	4b0b      	ldr	r3, [pc, #44]	@ (8005880 <MX_SPI1_Init+0x74>)
 8005854:	2200      	movs	r2, #0
 8005856:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005858:	4b09      	ldr	r3, [pc, #36]	@ (8005880 <MX_SPI1_Init+0x74>)
 800585a:	2207      	movs	r2, #7
 800585c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800585e:	4b08      	ldr	r3, [pc, #32]	@ (8005880 <MX_SPI1_Init+0x74>)
 8005860:	2200      	movs	r2, #0
 8005862:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005864:	4b06      	ldr	r3, [pc, #24]	@ (8005880 <MX_SPI1_Init+0x74>)
 8005866:	2208      	movs	r2, #8
 8005868:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800586a:	4b05      	ldr	r3, [pc, #20]	@ (8005880 <MX_SPI1_Init+0x74>)
 800586c:	0018      	movs	r0, r3
 800586e:	f003 fadb 	bl	8008e28 <HAL_SPI_Init>
 8005872:	1e03      	subs	r3, r0, #0
 8005874:	d001      	beq.n	800587a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8005876:	f7fe faed 	bl	8003e54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800587a:	46c0      	nop			@ (mov r8, r8)
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	200004a4 	.word	0x200004a4
 8005884:	40013000 	.word	0x40013000

08005888 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005888:	b590      	push	{r4, r7, lr}
 800588a:	b08b      	sub	sp, #44	@ 0x2c
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005890:	2414      	movs	r4, #20
 8005892:	193b      	adds	r3, r7, r4
 8005894:	0018      	movs	r0, r3
 8005896:	2314      	movs	r3, #20
 8005898:	001a      	movs	r2, r3
 800589a:	2100      	movs	r1, #0
 800589c:	f008 f932 	bl	800db04 <memset>
  if(spiHandle->Instance==SPI1)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005914 <HAL_SPI_MspInit+0x8c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d130      	bne.n	800590c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80058aa:	4b1b      	ldr	r3, [pc, #108]	@ (8005918 <HAL_SPI_MspInit+0x90>)
 80058ac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80058ae:	4b1a      	ldr	r3, [pc, #104]	@ (8005918 <HAL_SPI_MspInit+0x90>)
 80058b0:	2180      	movs	r1, #128	@ 0x80
 80058b2:	0149      	lsls	r1, r1, #5
 80058b4:	430a      	orrs	r2, r1
 80058b6:	661a      	str	r2, [r3, #96]	@ 0x60
 80058b8:	4b17      	ldr	r3, [pc, #92]	@ (8005918 <HAL_SPI_MspInit+0x90>)
 80058ba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80058bc:	2380      	movs	r3, #128	@ 0x80
 80058be:	015b      	lsls	r3, r3, #5
 80058c0:	4013      	ands	r3, r2
 80058c2:	613b      	str	r3, [r7, #16]
 80058c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058c6:	4b14      	ldr	r3, [pc, #80]	@ (8005918 <HAL_SPI_MspInit+0x90>)
 80058c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80058ca:	4b13      	ldr	r3, [pc, #76]	@ (8005918 <HAL_SPI_MspInit+0x90>)
 80058cc:	2101      	movs	r1, #1
 80058ce:	430a      	orrs	r2, r1
 80058d0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80058d2:	4b11      	ldr	r3, [pc, #68]	@ (8005918 <HAL_SPI_MspInit+0x90>)
 80058d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058d6:	2201      	movs	r2, #1
 80058d8:	4013      	ands	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80058de:	0021      	movs	r1, r4
 80058e0:	187b      	adds	r3, r7, r1
 80058e2:	22e0      	movs	r2, #224	@ 0xe0
 80058e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058e6:	187b      	adds	r3, r7, r1
 80058e8:	2202      	movs	r2, #2
 80058ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058ec:	187b      	adds	r3, r7, r1
 80058ee:	2200      	movs	r2, #0
 80058f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058f2:	187b      	adds	r3, r7, r1
 80058f4:	2200      	movs	r2, #0
 80058f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80058f8:	187b      	adds	r3, r7, r1
 80058fa:	2205      	movs	r2, #5
 80058fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058fe:	187a      	adds	r2, r7, r1
 8005900:	23a0      	movs	r3, #160	@ 0xa0
 8005902:	05db      	lsls	r3, r3, #23
 8005904:	0011      	movs	r1, r2
 8005906:	0018      	movs	r0, r3
 8005908:	f000 ff68 	bl	80067dc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800590c:	46c0      	nop			@ (mov r8, r8)
 800590e:	46bd      	mov	sp, r7
 8005910:	b00b      	add	sp, #44	@ 0x2c
 8005912:	bd90      	pop	{r4, r7, pc}
 8005914:	40013000 	.word	0x40013000
 8005918:	40021000 	.word	0x40021000

0800591c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005922:	4b0f      	ldr	r3, [pc, #60]	@ (8005960 <HAL_MspInit+0x44>)
 8005924:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005926:	4b0e      	ldr	r3, [pc, #56]	@ (8005960 <HAL_MspInit+0x44>)
 8005928:	2180      	movs	r1, #128	@ 0x80
 800592a:	0549      	lsls	r1, r1, #21
 800592c:	430a      	orrs	r2, r1
 800592e:	659a      	str	r2, [r3, #88]	@ 0x58
 8005930:	4b0b      	ldr	r3, [pc, #44]	@ (8005960 <HAL_MspInit+0x44>)
 8005932:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005934:	2380      	movs	r3, #128	@ 0x80
 8005936:	055b      	lsls	r3, r3, #21
 8005938:	4013      	ands	r3, r2
 800593a:	607b      	str	r3, [r7, #4]
 800593c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800593e:	4b08      	ldr	r3, [pc, #32]	@ (8005960 <HAL_MspInit+0x44>)
 8005940:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005942:	4b07      	ldr	r3, [pc, #28]	@ (8005960 <HAL_MspInit+0x44>)
 8005944:	2101      	movs	r1, #1
 8005946:	430a      	orrs	r2, r1
 8005948:	661a      	str	r2, [r3, #96]	@ 0x60
 800594a:	4b05      	ldr	r3, [pc, #20]	@ (8005960 <HAL_MspInit+0x44>)
 800594c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800594e:	2201      	movs	r2, #1
 8005950:	4013      	ands	r3, r2
 8005952:	603b      	str	r3, [r7, #0]
 8005954:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005956:	46c0      	nop			@ (mov r8, r8)
 8005958:	46bd      	mov	sp, r7
 800595a:	b002      	add	sp, #8
 800595c:	bd80      	pop	{r7, pc}
 800595e:	46c0      	nop			@ (mov r8, r8)
 8005960:	40021000 	.word	0x40021000

08005964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005968:	46c0      	nop			@ (mov r8, r8)
 800596a:	e7fd      	b.n	8005968 <NMI_Handler+0x4>

0800596c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005970:	46c0      	nop			@ (mov r8, r8)
 8005972:	e7fd      	b.n	8005970 <HardFault_Handler+0x4>

08005974 <SVC_Handler>:

/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005978:	46c0      	nop			@ (mov r8, r8)
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005982:	46c0      	nop			@ (mov r8, r8)
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800598c:	f000 fa24 	bl	8005dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005990:	46c0      	nop			@ (mov r8, r8)
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	af00      	add	r7, sp, #0
  return 1;
 800599a:	2301      	movs	r3, #1
}
 800599c:	0018      	movs	r0, r3
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <_kill>:

int _kill(int pid, int sig)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b082      	sub	sp, #8
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80059ac:	f008 f92c 	bl	800dc08 <__errno>
 80059b0:	0003      	movs	r3, r0
 80059b2:	2216      	movs	r2, #22
 80059b4:	601a      	str	r2, [r3, #0]
  return -1;
 80059b6:	2301      	movs	r3, #1
 80059b8:	425b      	negs	r3, r3
}
 80059ba:	0018      	movs	r0, r3
 80059bc:	46bd      	mov	sp, r7
 80059be:	b002      	add	sp, #8
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <_exit>:

void _exit (int status)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b082      	sub	sp, #8
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80059ca:	2301      	movs	r3, #1
 80059cc:	425a      	negs	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	0011      	movs	r1, r2
 80059d2:	0018      	movs	r0, r3
 80059d4:	f7ff ffe5 	bl	80059a2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80059d8:	46c0      	nop			@ (mov r8, r8)
 80059da:	e7fd      	b.n	80059d8 <_exit+0x16>

080059dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059e8:	2300      	movs	r3, #0
 80059ea:	617b      	str	r3, [r7, #20]
 80059ec:	e00a      	b.n	8005a04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80059ee:	e000      	b.n	80059f2 <_read+0x16>
 80059f0:	bf00      	nop
 80059f2:	0001      	movs	r1, r0
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	1c5a      	adds	r2, r3, #1
 80059f8:	60ba      	str	r2, [r7, #8]
 80059fa:	b2ca      	uxtb	r2, r1
 80059fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	3301      	adds	r3, #1
 8005a02:	617b      	str	r3, [r7, #20]
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	dbf0      	blt.n	80059ee <_read+0x12>
  }

  return len;
 8005a0c:	687b      	ldr	r3, [r7, #4]
}
 8005a0e:	0018      	movs	r0, r3
 8005a10:	46bd      	mov	sp, r7
 8005a12:	b006      	add	sp, #24
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b086      	sub	sp, #24
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	60f8      	str	r0, [r7, #12]
 8005a1e:	60b9      	str	r1, [r7, #8]
 8005a20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a22:	2300      	movs	r3, #0
 8005a24:	617b      	str	r3, [r7, #20]
 8005a26:	e009      	b.n	8005a3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	60ba      	str	r2, [r7, #8]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	0018      	movs	r0, r3
 8005a32:	e000      	b.n	8005a36 <_write+0x20>
 8005a34:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	617b      	str	r3, [r7, #20]
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	dbf1      	blt.n	8005a28 <_write+0x12>
  }
  return len;
 8005a44:	687b      	ldr	r3, [r7, #4]
}
 8005a46:	0018      	movs	r0, r3
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	b006      	add	sp, #24
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <_close>:

int _close(int file)
{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b082      	sub	sp, #8
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005a56:	2301      	movs	r3, #1
 8005a58:	425b      	negs	r3, r3
}
 8005a5a:	0018      	movs	r0, r3
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	b002      	add	sp, #8
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b082      	sub	sp, #8
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
 8005a6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	2280      	movs	r2, #128	@ 0x80
 8005a70:	0192      	lsls	r2, r2, #6
 8005a72:	605a      	str	r2, [r3, #4]
  return 0;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	0018      	movs	r0, r3
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	b002      	add	sp, #8
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <_isatty>:

int _isatty(int file)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b082      	sub	sp, #8
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005a86:	2301      	movs	r3, #1
}
 8005a88:	0018      	movs	r0, r3
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	b002      	add	sp, #8
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	0018      	movs	r0, r3
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	b004      	add	sp, #16
 8005aa4:	bd80      	pop	{r7, pc}
	...

08005aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005ab0:	4a14      	ldr	r2, [pc, #80]	@ (8005b04 <_sbrk+0x5c>)
 8005ab2:	4b15      	ldr	r3, [pc, #84]	@ (8005b08 <_sbrk+0x60>)
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005abc:	4b13      	ldr	r3, [pc, #76]	@ (8005b0c <_sbrk+0x64>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d102      	bne.n	8005aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ac4:	4b11      	ldr	r3, [pc, #68]	@ (8005b0c <_sbrk+0x64>)
 8005ac6:	4a12      	ldr	r2, [pc, #72]	@ (8005b10 <_sbrk+0x68>)
 8005ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005aca:	4b10      	ldr	r3, [pc, #64]	@ (8005b0c <_sbrk+0x64>)
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	18d3      	adds	r3, r2, r3
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d207      	bcs.n	8005ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005ad8:	f008 f896 	bl	800dc08 <__errno>
 8005adc:	0003      	movs	r3, r0
 8005ade:	220c      	movs	r2, #12
 8005ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	425b      	negs	r3, r3
 8005ae6:	e009      	b.n	8005afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005ae8:	4b08      	ldr	r3, [pc, #32]	@ (8005b0c <_sbrk+0x64>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005aee:	4b07      	ldr	r3, [pc, #28]	@ (8005b0c <_sbrk+0x64>)
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	18d2      	adds	r2, r2, r3
 8005af6:	4b05      	ldr	r3, [pc, #20]	@ (8005b0c <_sbrk+0x64>)
 8005af8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8005afa:	68fb      	ldr	r3, [r7, #12]
}
 8005afc:	0018      	movs	r0, r3
 8005afe:	46bd      	mov	sp, r7
 8005b00:	b006      	add	sp, #24
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	20008000 	.word	0x20008000
 8005b08:	00000400 	.word	0x00000400
 8005b0c:	20000508 	.word	0x20000508
 8005b10:	20000748 	.word	0x20000748

08005b14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005b18:	4b11      	ldr	r3, [pc, #68]	@ (8005b60 <SystemInit+0x4c>)
 8005b1a:	2280      	movs	r2, #128	@ 0x80
 8005b1c:	0512      	lsls	r2, r2, #20
 8005b1e:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  if (((FLASH->SECR & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)           \
 8005b20:	4a10      	ldr	r2, [pc, #64]	@ (8005b64 <SystemInit+0x50>)
 8005b22:	2380      	movs	r3, #128	@ 0x80
 8005b24:	58d2      	ldr	r2, [r2, r3]
 8005b26:	2380      	movs	r3, #128	@ 0x80
 8005b28:	025b      	lsls	r3, r3, #9
 8005b2a:	401a      	ands	r2, r3
 8005b2c:	2380      	movs	r3, #128	@ 0x80
 8005b2e:	025b      	lsls	r3, r3, #9
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d112      	bne.n	8005b5a <SystemInit+0x46>
      && (((FLASH->OPTR & FLASH_OPTR_RDP) != 0xCCU)                            \
 8005b34:	4b0b      	ldr	r3, [pc, #44]	@ (8005b64 <SystemInit+0x50>)
 8005b36:	6a1b      	ldr	r3, [r3, #32]
 8005b38:	22ff      	movs	r2, #255	@ 0xff
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	2bcc      	cmp	r3, #204	@ 0xcc
 8005b3e:	d00c      	beq.n	8005b5a <SystemInit+0x46>
          && ((FLASH->OPTR & FLASH_OPTR_RDP) != 0xAAU)))
 8005b40:	4b08      	ldr	r3, [pc, #32]	@ (8005b64 <SystemInit+0x50>)
 8005b42:	6a1b      	ldr	r3, [r3, #32]
 8005b44:	22ff      	movs	r2, #255	@ 0xff
 8005b46:	4013      	ands	r3, r2
 8005b48:	2baa      	cmp	r3, #170	@ 0xaa
 8005b4a:	d006      	beq.n	8005b5a <SystemInit+0x46>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 8005b4c:	4b05      	ldr	r3, [pc, #20]	@ (8005b64 <SystemInit+0x50>)
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	4b04      	ldr	r3, [pc, #16]	@ (8005b64 <SystemInit+0x50>)
 8005b52:	2180      	movs	r1, #128	@ 0x80
 8005b54:	02c9      	lsls	r1, r1, #11
 8005b56:	430a      	orrs	r2, r1
 8005b58:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 8005b5a:	46c0      	nop			@ (mov r8, r8)
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	e000ed00 	.word	0xe000ed00
 8005b64:	40022000 	.word	0x40022000

08005b68 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005b6c:	4b22      	ldr	r3, [pc, #136]	@ (8005bf8 <MX_USART2_UART_Init+0x90>)
 8005b6e:	4a23      	ldr	r2, [pc, #140]	@ (8005bfc <MX_USART2_UART_Init+0x94>)
 8005b70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8005b72:	4b21      	ldr	r3, [pc, #132]	@ (8005bf8 <MX_USART2_UART_Init+0x90>)
 8005b74:	4a22      	ldr	r2, [pc, #136]	@ (8005c00 <MX_USART2_UART_Init+0x98>)
 8005b76:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005b78:	4b1f      	ldr	r3, [pc, #124]	@ (8005bf8 <MX_USART2_UART_Init+0x90>)
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8005bf8 <MX_USART2_UART_Init+0x90>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005b84:	4b1c      	ldr	r3, [pc, #112]	@ (8005bf8 <MX_USART2_UART_Init+0x90>)
 8005b86:	2200      	movs	r2, #0
 8005b88:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8005bf8 <MX_USART2_UART_Init+0x90>)
 8005b8c:	220c      	movs	r2, #12
 8005b8e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b90:	4b19      	ldr	r3, [pc, #100]	@ (8005bf8 <MX_USART2_UART_Init+0x90>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b96:	4b18      	ldr	r3, [pc, #96]	@ (8005bf8 <MX_USART2_UART_Init+0x90>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005b9c:	4b16      	ldr	r3, [pc, #88]	@ (8005bf8 <MX_USART2_UART_Init+0x90>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005ba2:	4b15      	ldr	r3, [pc, #84]	@ (8005bf8 <MX_USART2_UART_Init+0x90>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005ba8:	4b13      	ldr	r3, [pc, #76]	@ (8005bf8 <MX_USART2_UART_Init+0x90>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005bae:	4b12      	ldr	r3, [pc, #72]	@ (8005bf8 <MX_USART2_UART_Init+0x90>)
 8005bb0:	0018      	movs	r0, r3
 8005bb2:	f003 f9e7 	bl	8008f84 <HAL_UART_Init>
 8005bb6:	1e03      	subs	r3, r0, #0
 8005bb8:	d001      	beq.n	8005bbe <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8005bba:	f7fe f94b 	bl	8003e54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8005bf8 <MX_USART2_UART_Init+0x90>)
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	0018      	movs	r0, r3
 8005bc4:	f003 fe74 	bl	80098b0 <HAL_UARTEx_SetTxFifoThreshold>
 8005bc8:	1e03      	subs	r3, r0, #0
 8005bca:	d001      	beq.n	8005bd0 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8005bcc:	f7fe f942 	bl	8003e54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005bd0:	4b09      	ldr	r3, [pc, #36]	@ (8005bf8 <MX_USART2_UART_Init+0x90>)
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	0018      	movs	r0, r3
 8005bd6:	f003 feab 	bl	8009930 <HAL_UARTEx_SetRxFifoThreshold>
 8005bda:	1e03      	subs	r3, r0, #0
 8005bdc:	d001      	beq.n	8005be2 <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8005bde:	f7fe f939 	bl	8003e54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005be2:	4b05      	ldr	r3, [pc, #20]	@ (8005bf8 <MX_USART2_UART_Init+0x90>)
 8005be4:	0018      	movs	r0, r3
 8005be6:	f003 fe29 	bl	800983c <HAL_UARTEx_DisableFifoMode>
 8005bea:	1e03      	subs	r3, r0, #0
 8005bec:	d001      	beq.n	8005bf2 <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8005bee:	f7fe f931 	bl	8003e54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005bf2:	46c0      	nop			@ (mov r8, r8)
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	2000050c 	.word	0x2000050c
 8005bfc:	40004400 	.word	0x40004400
 8005c00:	000f4240 	.word	0x000f4240

08005c04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005c04:	b590      	push	{r4, r7, lr}
 8005c06:	b09b      	sub	sp, #108	@ 0x6c
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c0c:	2354      	movs	r3, #84	@ 0x54
 8005c0e:	18fb      	adds	r3, r7, r3
 8005c10:	0018      	movs	r0, r3
 8005c12:	2314      	movs	r3, #20
 8005c14:	001a      	movs	r2, r3
 8005c16:	2100      	movs	r1, #0
 8005c18:	f007 ff74 	bl	800db04 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005c1c:	2410      	movs	r4, #16
 8005c1e:	193b      	adds	r3, r7, r4
 8005c20:	0018      	movs	r0, r3
 8005c22:	2344      	movs	r3, #68	@ 0x44
 8005c24:	001a      	movs	r2, r3
 8005c26:	2100      	movs	r1, #0
 8005c28:	f007 ff6c 	bl	800db04 <memset>
  if(uartHandle->Instance==USART2)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a22      	ldr	r2, [pc, #136]	@ (8005cbc <HAL_UART_MspInit+0xb8>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d13e      	bne.n	8005cb4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005c36:	193b      	adds	r3, r7, r4
 8005c38:	2202      	movs	r2, #2
 8005c3a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005c3c:	193b      	adds	r3, r7, r4
 8005c3e:	2200      	movs	r2, #0
 8005c40:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005c42:	193b      	adds	r3, r7, r4
 8005c44:	0018      	movs	r0, r3
 8005c46:	f001 ff45 	bl	8007ad4 <HAL_RCCEx_PeriphCLKConfig>
 8005c4a:	1e03      	subs	r3, r0, #0
 8005c4c:	d001      	beq.n	8005c52 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005c4e:	f7fe f901 	bl	8003e54 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005c52:	4b1b      	ldr	r3, [pc, #108]	@ (8005cc0 <HAL_UART_MspInit+0xbc>)
 8005c54:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005c56:	4b1a      	ldr	r3, [pc, #104]	@ (8005cc0 <HAL_UART_MspInit+0xbc>)
 8005c58:	2180      	movs	r1, #128	@ 0x80
 8005c5a:	0289      	lsls	r1, r1, #10
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	659a      	str	r2, [r3, #88]	@ 0x58
 8005c60:	4b17      	ldr	r3, [pc, #92]	@ (8005cc0 <HAL_UART_MspInit+0xbc>)
 8005c62:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005c64:	2380      	movs	r3, #128	@ 0x80
 8005c66:	029b      	lsls	r3, r3, #10
 8005c68:	4013      	ands	r3, r2
 8005c6a:	60fb      	str	r3, [r7, #12]
 8005c6c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c6e:	4b14      	ldr	r3, [pc, #80]	@ (8005cc0 <HAL_UART_MspInit+0xbc>)
 8005c70:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005c72:	4b13      	ldr	r3, [pc, #76]	@ (8005cc0 <HAL_UART_MspInit+0xbc>)
 8005c74:	2101      	movs	r1, #1
 8005c76:	430a      	orrs	r2, r1
 8005c78:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005c7a:	4b11      	ldr	r3, [pc, #68]	@ (8005cc0 <HAL_UART_MspInit+0xbc>)
 8005c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c7e:	2201      	movs	r2, #1
 8005c80:	4013      	ands	r3, r2
 8005c82:	60bb      	str	r3, [r7, #8]
 8005c84:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005c86:	2154      	movs	r1, #84	@ 0x54
 8005c88:	187b      	adds	r3, r7, r1
 8005c8a:	220c      	movs	r2, #12
 8005c8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c8e:	187b      	adds	r3, r7, r1
 8005c90:	2202      	movs	r2, #2
 8005c92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c94:	187b      	adds	r3, r7, r1
 8005c96:	2200      	movs	r2, #0
 8005c98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c9a:	187b      	adds	r3, r7, r1
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005ca0:	187b      	adds	r3, r7, r1
 8005ca2:	2207      	movs	r2, #7
 8005ca4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ca6:	187a      	adds	r2, r7, r1
 8005ca8:	23a0      	movs	r3, #160	@ 0xa0
 8005caa:	05db      	lsls	r3, r3, #23
 8005cac:	0011      	movs	r1, r2
 8005cae:	0018      	movs	r0, r3
 8005cb0:	f000 fd94 	bl	80067dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005cb4:	46c0      	nop			@ (mov r8, r8)
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	b01b      	add	sp, #108	@ 0x6c
 8005cba:	bd90      	pop	{r4, r7, pc}
 8005cbc:	40004400 	.word	0x40004400
 8005cc0:	40021000 	.word	0x40021000

08005cc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005cc4:	480d      	ldr	r0, [pc, #52]	@ (8005cfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005cc6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005cc8:	f7ff ff24 	bl	8005b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005ccc:	480c      	ldr	r0, [pc, #48]	@ (8005d00 <LoopForever+0x6>)
  ldr r1, =_edata
 8005cce:	490d      	ldr	r1, [pc, #52]	@ (8005d04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8005d08 <LoopForever+0xe>)
  movs r3, #0
 8005cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005cd4:	e002      	b.n	8005cdc <LoopCopyDataInit>

08005cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005cda:	3304      	adds	r3, #4

08005cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ce0:	d3f9      	bcc.n	8005cd6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8005d0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005ce4:	4c0a      	ldr	r4, [pc, #40]	@ (8005d10 <LoopForever+0x16>)
  movs r3, #0
 8005ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005ce8:	e001      	b.n	8005cee <LoopFillZerobss>

08005cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005cec:	3204      	adds	r2, #4

08005cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005cf0:	d3fb      	bcc.n	8005cea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005cf2:	f007 ff8f 	bl	800dc14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005cf6:	f7fd fd97 	bl	8003828 <main>

08005cfa <LoopForever>:

LoopForever:
  b LoopForever
 8005cfa:	e7fe      	b.n	8005cfa <LoopForever>
  ldr   r0, =_estack
 8005cfc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005d04:	20000340 	.word	0x20000340
  ldr r2, =_sidata
 8005d08:	0801b750 	.word	0x0801b750
  ldr r2, =_sbss
 8005d0c:	20000340 	.word	0x20000340
  ldr r4, =_ebss
 8005d10:	20000748 	.word	0x20000748

08005d14 <ADC_COMP1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005d14:	e7fe      	b.n	8005d14 <ADC_COMP1_2_IRQHandler>

08005d16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b082      	sub	sp, #8
 8005d1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005d1c:	1dfb      	adds	r3, r7, #7
 8005d1e:	2200      	movs	r2, #0
 8005d20:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005d22:	2003      	movs	r0, #3
 8005d24:	f000 f80e 	bl	8005d44 <HAL_InitTick>
 8005d28:	1e03      	subs	r3, r0, #0
 8005d2a:	d003      	beq.n	8005d34 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8005d2c:	1dfb      	adds	r3, r7, #7
 8005d2e:	2201      	movs	r2, #1
 8005d30:	701a      	strb	r2, [r3, #0]
 8005d32:	e001      	b.n	8005d38 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005d34:	f7ff fdf2 	bl	800591c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005d38:	1dfb      	adds	r3, r7, #7
 8005d3a:	781b      	ldrb	r3, [r3, #0]
}
 8005d3c:	0018      	movs	r0, r3
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	b002      	add	sp, #8
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d44:	b590      	push	{r4, r7, lr}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005d4c:	230f      	movs	r3, #15
 8005d4e:	18fb      	adds	r3, r7, r3
 8005d50:	2200      	movs	r2, #0
 8005d52:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8005d54:	4b1d      	ldr	r3, [pc, #116]	@ (8005dcc <HAL_InitTick+0x88>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d02b      	beq.n	8005db4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005d5c:	4b1c      	ldr	r3, [pc, #112]	@ (8005dd0 <HAL_InitTick+0x8c>)
 8005d5e:	681c      	ldr	r4, [r3, #0]
 8005d60:	4b1a      	ldr	r3, [pc, #104]	@ (8005dcc <HAL_InitTick+0x88>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	0019      	movs	r1, r3
 8005d66:	23fa      	movs	r3, #250	@ 0xfa
 8005d68:	0098      	lsls	r0, r3, #2
 8005d6a:	f7fa f9e9 	bl	8000140 <__udivsi3>
 8005d6e:	0003      	movs	r3, r0
 8005d70:	0019      	movs	r1, r3
 8005d72:	0020      	movs	r0, r4
 8005d74:	f7fa f9e4 	bl	8000140 <__udivsi3>
 8005d78:	0003      	movs	r3, r0
 8005d7a:	0018      	movs	r0, r3
 8005d7c:	f000 fd21 	bl	80067c2 <HAL_SYSTICK_Config>
 8005d80:	1e03      	subs	r3, r0, #0
 8005d82:	d112      	bne.n	8005daa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b03      	cmp	r3, #3
 8005d88:	d80a      	bhi.n	8005da0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d8a:	6879      	ldr	r1, [r7, #4]
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	425b      	negs	r3, r3
 8005d90:	2200      	movs	r2, #0
 8005d92:	0018      	movs	r0, r3
 8005d94:	f000 fd00 	bl	8006798 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005d98:	4b0e      	ldr	r3, [pc, #56]	@ (8005dd4 <HAL_InitTick+0x90>)
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	601a      	str	r2, [r3, #0]
 8005d9e:	e00d      	b.n	8005dbc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005da0:	230f      	movs	r3, #15
 8005da2:	18fb      	adds	r3, r7, r3
 8005da4:	2201      	movs	r2, #1
 8005da6:	701a      	strb	r2, [r3, #0]
 8005da8:	e008      	b.n	8005dbc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005daa:	230f      	movs	r3, #15
 8005dac:	18fb      	adds	r3, r7, r3
 8005dae:	2201      	movs	r2, #1
 8005db0:	701a      	strb	r2, [r3, #0]
 8005db2:	e003      	b.n	8005dbc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005db4:	230f      	movs	r3, #15
 8005db6:	18fb      	adds	r3, r7, r3
 8005db8:	2201      	movs	r2, #1
 8005dba:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005dbc:	230f      	movs	r3, #15
 8005dbe:	18fb      	adds	r3, r7, r3
 8005dc0:	781b      	ldrb	r3, [r3, #0]
}
 8005dc2:	0018      	movs	r0, r3
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	b005      	add	sp, #20
 8005dc8:	bd90      	pop	{r4, r7, pc}
 8005dca:	46c0      	nop			@ (mov r8, r8)
 8005dcc:	2000000c 	.word	0x2000000c
 8005dd0:	20000004 	.word	0x20000004
 8005dd4:	20000008 	.word	0x20000008

08005dd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ddc:	4b04      	ldr	r3, [pc, #16]	@ (8005df0 <HAL_IncTick+0x18>)
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	4b04      	ldr	r3, [pc, #16]	@ (8005df4 <HAL_IncTick+0x1c>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	18d2      	adds	r2, r2, r3
 8005de6:	4b02      	ldr	r3, [pc, #8]	@ (8005df0 <HAL_IncTick+0x18>)
 8005de8:	601a      	str	r2, [r3, #0]
}
 8005dea:	46c0      	nop			@ (mov r8, r8)
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	200005a0 	.word	0x200005a0
 8005df4:	2000000c 	.word	0x2000000c

08005df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8005dfc:	4b02      	ldr	r3, [pc, #8]	@ (8005e08 <HAL_GetTick+0x10>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
}
 8005e00:	0018      	movs	r0, r3
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	46c0      	nop			@ (mov r8, r8)
 8005e08:	200005a0 	.word	0x200005a0

08005e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e14:	f7ff fff0 	bl	8005df8 <HAL_GetTick>
 8005e18:	0003      	movs	r3, r0
 8005e1a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	3301      	adds	r3, #1
 8005e24:	d004      	beq.n	8005e30 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e26:	4b09      	ldr	r3, [pc, #36]	@ (8005e4c <HAL_Delay+0x40>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	18d3      	adds	r3, r2, r3
 8005e2e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005e30:	46c0      	nop			@ (mov r8, r8)
 8005e32:	f7ff ffe1 	bl	8005df8 <HAL_GetTick>
 8005e36:	0002      	movs	r2, r0
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d8f7      	bhi.n	8005e32 <HAL_Delay+0x26>
  {
  }
}
 8005e42:	46c0      	nop			@ (mov r8, r8)
 8005e44:	46c0      	nop			@ (mov r8, r8)
 8005e46:	46bd      	mov	sp, r7
 8005e48:	b004      	add	sp, #16
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	2000000c 	.word	0x2000000c

08005e50 <LL_ADC_SetCommonPathInternalCh>:
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a05      	ldr	r2, [pc, #20]	@ (8005e74 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8005e60:	401a      	ands	r2, r3
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	431a      	orrs	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	601a      	str	r2, [r3, #0]
}
 8005e6a:	46c0      	nop			@ (mov r8, r8)
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	b002      	add	sp, #8
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	46c0      	nop			@ (mov r8, r8)
 8005e74:	fe3fffff 	.word	0xfe3fffff

08005e78 <LL_ADC_GetCommonPathInternalCh>:
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	23e0      	movs	r3, #224	@ 0xe0
 8005e86:	045b      	lsls	r3, r3, #17
 8005e88:	4013      	ands	r3, r2
}
 8005e8a:	0018      	movs	r0, r3
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	b002      	add	sp, #8
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <LL_ADC_SetSamplingTimeCommonChannels>:
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b084      	sub	sp, #16
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	60f8      	str	r0, [r7, #12]
 8005e9a:	60b9      	str	r1, [r7, #8]
 8005e9c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	2104      	movs	r1, #4
 8005ea6:	400a      	ands	r2, r1
 8005ea8:	2107      	movs	r1, #7
 8005eaa:	4091      	lsls	r1, r2
 8005eac:	000a      	movs	r2, r1
 8005eae:	43d2      	mvns	r2, r2
 8005eb0:	401a      	ands	r2, r3
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	2104      	movs	r1, #4
 8005eb6:	400b      	ands	r3, r1
 8005eb8:	6879      	ldr	r1, [r7, #4]
 8005eba:	4099      	lsls	r1, r3
 8005ebc:	000b      	movs	r3, r1
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	615a      	str	r2, [r3, #20]
}
 8005ec4:	46c0      	nop			@ (mov r8, r8)
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	b004      	add	sp, #16
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <LL_ADC_GetSamplingTimeCommonChannels>:
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	2104      	movs	r1, #4
 8005ede:	400a      	ands	r2, r1
 8005ee0:	2107      	movs	r1, #7
 8005ee2:	4091      	lsls	r1, r2
 8005ee4:	000a      	movs	r2, r1
 8005ee6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	2104      	movs	r1, #4
 8005eec:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005eee:	40da      	lsrs	r2, r3
 8005ef0:	0013      	movs	r3, r2
}
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	b002      	add	sp, #8
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <LL_ADC_REG_SetSequencerRanks>:
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b084      	sub	sp, #16
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	60f8      	str	r0, [r7, #12]
 8005f02:	60b9      	str	r1, [r7, #8]
 8005f04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CHSELR,
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	211f      	movs	r1, #31
 8005f0e:	400a      	ands	r2, r1
 8005f10:	210f      	movs	r1, #15
 8005f12:	4091      	lsls	r1, r2
 8005f14:	000a      	movs	r2, r1
 8005f16:	43d2      	mvns	r2, r2
 8005f18:	401a      	ands	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	0e9b      	lsrs	r3, r3, #26
 8005f1e:	210f      	movs	r1, #15
 8005f20:	4019      	ands	r1, r3
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	201f      	movs	r0, #31
 8005f26:	4003      	ands	r3, r0
 8005f28:	4099      	lsls	r1, r3
 8005f2a:	000b      	movs	r3, r1
 8005f2c:	431a      	orrs	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005f32:	46c0      	nop			@ (mov r8, r8)
 8005f34:	46bd      	mov	sp, r7
 8005f36:	b004      	add	sp, #16
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <LL_ADC_REG_SetSequencerChAdd>:
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b082      	sub	sp, #8
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
 8005f42:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	025b      	lsls	r3, r3, #9
 8005f4c:	0a5b      	lsrs	r3, r3, #9
 8005f4e:	431a      	orrs	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005f54:	46c0      	nop			@ (mov r8, r8)
 8005f56:	46bd      	mov	sp, r7
 8005f58:	b002      	add	sp, #8
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <LL_ADC_REG_SetSequencerChRem>:
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f6a:	683a      	ldr	r2, [r7, #0]
 8005f6c:	0252      	lsls	r2, r2, #9
 8005f6e:	0a52      	lsrs	r2, r2, #9
 8005f70:	43d2      	mvns	r2, r2
 8005f72:	401a      	ands	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005f78:	46c0      	nop			@ (mov r8, r8)
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	b002      	add	sp, #8
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <LL_ADC_SetChannelSamplingTime>:
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	0212      	lsls	r2, r2, #8
 8005f94:	43d2      	mvns	r2, r2
 8005f96:	401a      	ands	r2, r3
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	021b      	lsls	r3, r3, #8
 8005f9c:	6879      	ldr	r1, [r7, #4]
 8005f9e:	400b      	ands	r3, r1
 8005fa0:	4904      	ldr	r1, [pc, #16]	@ (8005fb4 <LL_ADC_SetChannelSamplingTime+0x34>)
 8005fa2:	400b      	ands	r3, r1
 8005fa4:	431a      	orrs	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	615a      	str	r2, [r3, #20]
}
 8005faa:	46c0      	nop			@ (mov r8, r8)
 8005fac:	46bd      	mov	sp, r7
 8005fae:	b004      	add	sp, #16
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	46c0      	nop			@ (mov r8, r8)
 8005fb4:	7fffff00 	.word	0x7fffff00

08005fb8 <LL_ADC_EnableInternalRegulator>:
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	4a05      	ldr	r2, [pc, #20]	@ (8005fdc <LL_ADC_EnableInternalRegulator+0x24>)
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	2280      	movs	r2, #128	@ 0x80
 8005fca:	0552      	lsls	r2, r2, #21
 8005fcc:	431a      	orrs	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	609a      	str	r2, [r3, #8]
}
 8005fd2:	46c0      	nop			@ (mov r8, r8)
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	b002      	add	sp, #8
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	46c0      	nop			@ (mov r8, r8)
 8005fdc:	6fffffe8 	.word	0x6fffffe8

08005fe0 <LL_ADC_IsInternalRegulatorEnabled>:
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	689a      	ldr	r2, [r3, #8]
 8005fec:	2380      	movs	r3, #128	@ 0x80
 8005fee:	055b      	lsls	r3, r3, #21
 8005ff0:	401a      	ands	r2, r3
 8005ff2:	2380      	movs	r3, #128	@ 0x80
 8005ff4:	055b      	lsls	r3, r3, #21
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d101      	bne.n	8005ffe <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e000      	b.n	8006000 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	0018      	movs	r0, r3
 8006002:	46bd      	mov	sp, r7
 8006004:	b002      	add	sp, #8
 8006006:	bd80      	pop	{r7, pc}

08006008 <LL_ADC_IsEnabled>:
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	2201      	movs	r2, #1
 8006016:	4013      	ands	r3, r2
 8006018:	2b01      	cmp	r3, #1
 800601a:	d101      	bne.n	8006020 <LL_ADC_IsEnabled+0x18>
 800601c:	2301      	movs	r3, #1
 800601e:	e000      	b.n	8006022 <LL_ADC_IsEnabled+0x1a>
 8006020:	2300      	movs	r3, #0
}
 8006022:	0018      	movs	r0, r3
 8006024:	46bd      	mov	sp, r7
 8006026:	b002      	add	sp, #8
 8006028:	bd80      	pop	{r7, pc}

0800602a <LL_ADC_REG_IsConversionOngoing>:
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b082      	sub	sp, #8
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	2204      	movs	r2, #4
 8006038:	4013      	ands	r3, r2
 800603a:	2b04      	cmp	r3, #4
 800603c:	d101      	bne.n	8006042 <LL_ADC_REG_IsConversionOngoing+0x18>
 800603e:	2301      	movs	r3, #1
 8006040:	e000      	b.n	8006044 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006042:	2300      	movs	r3, #0
}
 8006044:	0018      	movs	r0, r3
 8006046:	46bd      	mov	sp, r7
 8006048:	b002      	add	sp, #8
 800604a:	bd80      	pop	{r7, pc}

0800604c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b088      	sub	sp, #32
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006054:	231f      	movs	r3, #31
 8006056:	18fb      	adds	r3, r7, r3
 8006058:	2200      	movs	r2, #0
 800605a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 800605c:	2300      	movs	r3, #0
 800605e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8006060:	2300      	movs	r3, #0
 8006062:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006064:	2300      	movs	r3, #0
 8006066:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e17f      	b.n	8006372 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10a      	bne.n	8006090 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	0018      	movs	r0, r3
 800607e:	f7fd f921 	bl	80032c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2254      	movs	r2, #84	@ 0x54
 800608c:	2100      	movs	r1, #0
 800608e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	0018      	movs	r0, r3
 8006096:	f7ff ffa3 	bl	8005fe0 <LL_ADC_IsInternalRegulatorEnabled>
 800609a:	1e03      	subs	r3, r0, #0
 800609c:	d115      	bne.n	80060ca <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	0018      	movs	r0, r3
 80060a4:	f7ff ff88 	bl	8005fb8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80060a8:	4bb4      	ldr	r3, [pc, #720]	@ (800637c <HAL_ADC_Init+0x330>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	49b4      	ldr	r1, [pc, #720]	@ (8006380 <HAL_ADC_Init+0x334>)
 80060ae:	0018      	movs	r0, r3
 80060b0:	f7fa f846 	bl	8000140 <__udivsi3>
 80060b4:	0003      	movs	r3, r0
 80060b6:	3301      	adds	r3, #1
 80060b8:	005b      	lsls	r3, r3, #1
 80060ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80060bc:	e002      	b.n	80060c4 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	3b01      	subs	r3, #1
 80060c2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1f9      	bne.n	80060be <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	0018      	movs	r0, r3
 80060d0:	f7ff ff86 	bl	8005fe0 <LL_ADC_IsInternalRegulatorEnabled>
 80060d4:	1e03      	subs	r3, r0, #0
 80060d6:	d10f      	bne.n	80060f8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060dc:	2210      	movs	r2, #16
 80060de:	431a      	orrs	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060e8:	2201      	movs	r2, #1
 80060ea:	431a      	orrs	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80060f0:	231f      	movs	r3, #31
 80060f2:	18fb      	adds	r3, r7, r3
 80060f4:	2201      	movs	r2, #1
 80060f6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	0018      	movs	r0, r3
 80060fe:	f7ff ff94 	bl	800602a <LL_ADC_REG_IsConversionOngoing>
 8006102:	0003      	movs	r3, r0
 8006104:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800610a:	2210      	movs	r2, #16
 800610c:	4013      	ands	r3, r2
 800610e:	d000      	beq.n	8006112 <HAL_ADC_Init+0xc6>
 8006110:	e122      	b.n	8006358 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d000      	beq.n	800611a <HAL_ADC_Init+0xce>
 8006118:	e11e      	b.n	8006358 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800611e:	4a99      	ldr	r2, [pc, #612]	@ (8006384 <HAL_ADC_Init+0x338>)
 8006120:	4013      	ands	r3, r2
 8006122:	2202      	movs	r2, #2
 8006124:	431a      	orrs	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	0018      	movs	r0, r3
 8006130:	f7ff ff6a 	bl	8006008 <LL_ADC_IsEnabled>
 8006134:	1e03      	subs	r3, r0, #0
 8006136:	d000      	beq.n	800613a <HAL_ADC_Init+0xee>
 8006138:	e0ad      	b.n	8006296 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	7e1b      	ldrb	r3, [r3, #24]
 8006142:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8006144:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	7e5b      	ldrb	r3, [r3, #25]
 800614a:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800614c:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	7e9b      	ldrb	r3, [r3, #26]
 8006152:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8006154:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800615a:	2b00      	cmp	r3, #0
 800615c:	d002      	beq.n	8006164 <HAL_ADC_Init+0x118>
 800615e:	2380      	movs	r3, #128	@ 0x80
 8006160:	015b      	lsls	r3, r3, #5
 8006162:	e000      	b.n	8006166 <HAL_ADC_Init+0x11a>
 8006164:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8006166:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800616c:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	2b00      	cmp	r3, #0
 8006174:	da04      	bge.n	8006180 <HAL_ADC_Init+0x134>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	005b      	lsls	r3, r3, #1
 800617c:	085b      	lsrs	r3, r3, #1
 800617e:	e001      	b.n	8006184 <HAL_ADC_Init+0x138>
 8006180:	2380      	movs	r3, #128	@ 0x80
 8006182:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8006184:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	212c      	movs	r1, #44	@ 0x2c
 800618a:	5c5b      	ldrb	r3, [r3, r1]
 800618c:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800618e:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	4313      	orrs	r3, r2
 8006194:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2220      	movs	r2, #32
 800619a:	5c9b      	ldrb	r3, [r3, r2]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d115      	bne.n	80061cc <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	7e9b      	ldrb	r3, [r3, #26]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d105      	bne.n	80061b4 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	2280      	movs	r2, #128	@ 0x80
 80061ac:	0252      	lsls	r2, r2, #9
 80061ae:	4313      	orrs	r3, r2
 80061b0:	61bb      	str	r3, [r7, #24]
 80061b2:	e00b      	b.n	80061cc <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061b8:	2220      	movs	r2, #32
 80061ba:	431a      	orrs	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061c4:	2201      	movs	r2, #1
 80061c6:	431a      	orrs	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00a      	beq.n	80061ea <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061d8:	23e0      	movs	r3, #224	@ 0xe0
 80061da:	005b      	lsls	r3, r3, #1
 80061dc:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80061e2:	4313      	orrs	r3, r2
 80061e4:	69ba      	ldr	r2, [r7, #24]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	4a65      	ldr	r2, [pc, #404]	@ (8006388 <HAL_ADC_Init+0x33c>)
 80061f2:	4013      	ands	r3, r2
 80061f4:	0019      	movs	r1, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	69ba      	ldr	r2, [r7, #24]
 80061fc:	430a      	orrs	r2, r1
 80061fe:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	0f9b      	lsrs	r3, r3, #30
 8006206:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800620c:	4313      	orrs	r3, r2
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	4313      	orrs	r3, r2
 8006212:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	223c      	movs	r2, #60	@ 0x3c
 8006218:	5c9b      	ldrb	r3, [r3, r2]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d111      	bne.n	8006242 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	0f9b      	lsrs	r3, r3, #30
 8006224:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800622a:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8006230:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8006236:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	4313      	orrs	r3, r2
 800623c:	2201      	movs	r2, #1
 800623e:	4313      	orrs	r3, r2
 8006240:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	4a50      	ldr	r2, [pc, #320]	@ (800638c <HAL_ADC_Init+0x340>)
 800624a:	4013      	ands	r3, r2
 800624c:	0019      	movs	r1, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	430a      	orrs	r2, r1
 8006256:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	23c0      	movs	r3, #192	@ 0xc0
 800625e:	061b      	lsls	r3, r3, #24
 8006260:	429a      	cmp	r2, r3
 8006262:	d018      	beq.n	8006296 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8006268:	2380      	movs	r3, #128	@ 0x80
 800626a:	05db      	lsls	r3, r3, #23
 800626c:	429a      	cmp	r2, r3
 800626e:	d012      	beq.n	8006296 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8006274:	2380      	movs	r3, #128	@ 0x80
 8006276:	061b      	lsls	r3, r3, #24
 8006278:	429a      	cmp	r2, r3
 800627a:	d00c      	beq.n	8006296 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800627c:	4b44      	ldr	r3, [pc, #272]	@ (8006390 <HAL_ADC_Init+0x344>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a44      	ldr	r2, [pc, #272]	@ (8006394 <HAL_ADC_Init+0x348>)
 8006282:	4013      	ands	r3, r2
 8006284:	0019      	movs	r1, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	23f0      	movs	r3, #240	@ 0xf0
 800628c:	039b      	lsls	r3, r3, #14
 800628e:	401a      	ands	r2, r3
 8006290:	4b3f      	ldr	r3, [pc, #252]	@ (8006390 <HAL_ADC_Init+0x344>)
 8006292:	430a      	orrs	r2, r1
 8006294:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6818      	ldr	r0, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800629e:	001a      	movs	r2, r3
 80062a0:	2100      	movs	r1, #0
 80062a2:	f7ff fdf6 	bl	8005e92 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6818      	ldr	r0, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ae:	493a      	ldr	r1, [pc, #232]	@ (8006398 <HAL_ADC_Init+0x34c>)
 80062b0:	001a      	movs	r2, r3
 80062b2:	f7ff fdee 	bl	8005e92 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d109      	bne.n	80062d2 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2110      	movs	r1, #16
 80062ca:	4249      	negs	r1, r1
 80062cc:	430a      	orrs	r2, r1
 80062ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80062d0:	e018      	b.n	8006304 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	691a      	ldr	r2, [r3, #16]
 80062d6:	2380      	movs	r3, #128	@ 0x80
 80062d8:	039b      	lsls	r3, r3, #14
 80062da:	429a      	cmp	r2, r3
 80062dc:	d112      	bne.n	8006304 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	69db      	ldr	r3, [r3, #28]
 80062e8:	3b01      	subs	r3, #1
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	221c      	movs	r2, #28
 80062ee:	4013      	ands	r3, r2
 80062f0:	2210      	movs	r2, #16
 80062f2:	4252      	negs	r2, r2
 80062f4:	409a      	lsls	r2, r3
 80062f6:	0011      	movs	r1, r2
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	430a      	orrs	r2, r1
 8006302:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2100      	movs	r1, #0
 800630a:	0018      	movs	r0, r3
 800630c:	f7ff fdde 	bl	8005ecc <LL_ADC_GetSamplingTimeCommonChannels>
 8006310:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006316:	429a      	cmp	r2, r3
 8006318:	d10b      	bne.n	8006332 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006324:	2203      	movs	r2, #3
 8006326:	4393      	bics	r3, r2
 8006328:	2201      	movs	r2, #1
 800632a:	431a      	orrs	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006330:	e01c      	b.n	800636c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006336:	2212      	movs	r2, #18
 8006338:	4393      	bics	r3, r2
 800633a:	2210      	movs	r2, #16
 800633c:	431a      	orrs	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006346:	2201      	movs	r2, #1
 8006348:	431a      	orrs	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800634e:	231f      	movs	r3, #31
 8006350:	18fb      	adds	r3, r7, r3
 8006352:	2201      	movs	r2, #1
 8006354:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006356:	e009      	b.n	800636c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800635c:	2210      	movs	r2, #16
 800635e:	431a      	orrs	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006364:	231f      	movs	r3, #31
 8006366:	18fb      	adds	r3, r7, r3
 8006368:	2201      	movs	r2, #1
 800636a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800636c:	231f      	movs	r3, #31
 800636e:	18fb      	adds	r3, r7, r3
 8006370:	781b      	ldrb	r3, [r3, #0]
}
 8006372:	0018      	movs	r0, r3
 8006374:	46bd      	mov	sp, r7
 8006376:	b008      	add	sp, #32
 8006378:	bd80      	pop	{r7, pc}
 800637a:	46c0      	nop			@ (mov r8, r8)
 800637c:	20000004 	.word	0x20000004
 8006380:	00030d40 	.word	0x00030d40
 8006384:	fffffefd 	.word	0xfffffefd
 8006388:	ffde0201 	.word	0xffde0201
 800638c:	1ffffc02 	.word	0x1ffffc02
 8006390:	40012708 	.word	0x40012708
 8006394:	ffc3ffff 	.word	0xffc3ffff
 8006398:	7fffff04 	.word	0x7fffff04

0800639c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800639c:	b590      	push	{r4, r7, lr}
 800639e:	b08b      	sub	sp, #44	@ 0x2c
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063a6:	2327      	movs	r3, #39	@ 0x27
 80063a8:	18fb      	adds	r3, r7, r3
 80063aa:	2200      	movs	r2, #0
 80063ac:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80063ae:	2300      	movs	r3, #0
 80063b0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2254      	movs	r2, #84	@ 0x54
 80063b6:	5c9b      	ldrb	r3, [r3, r2]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d101      	bne.n	80063c0 <HAL_ADC_ConfigChannel+0x24>
 80063bc:	2302      	movs	r3, #2
 80063be:	e141      	b.n	8006644 <HAL_ADC_ConfigChannel+0x2a8>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2254      	movs	r2, #84	@ 0x54
 80063c4:	2101      	movs	r1, #1
 80063c6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	0018      	movs	r0, r3
 80063ce:	f7ff fe2c 	bl	800602a <LL_ADC_REG_IsConversionOngoing>
 80063d2:	1e03      	subs	r3, r0, #0
 80063d4:	d000      	beq.n	80063d8 <HAL_ADC_ConfigChannel+0x3c>
 80063d6:	e124      	b.n	8006622 <HAL_ADC_ConfigChannel+0x286>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d100      	bne.n	80063e2 <HAL_ADC_ConfigChannel+0x46>
 80063e0:	e0d8      	b.n	8006594 <HAL_ADC_ConfigChannel+0x1f8>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	691a      	ldr	r2, [r3, #16]
 80063e6:	2380      	movs	r3, #128	@ 0x80
 80063e8:	061b      	lsls	r3, r3, #24
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d004      	beq.n	80063f8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80063f2:	4a96      	ldr	r2, [pc, #600]	@ (800664c <HAL_ADC_ConfigChannel+0x2b0>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d108      	bne.n	800640a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	0019      	movs	r1, r3
 8006402:	0010      	movs	r0, r2
 8006404:	f7ff fd99 	bl	8005f3a <LL_ADC_REG_SetSequencerChAdd>
 8006408:	e060      	b.n	80064cc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	211f      	movs	r1, #31
 8006414:	400b      	ands	r3, r1
 8006416:	210f      	movs	r1, #15
 8006418:	4099      	lsls	r1, r3
 800641a:	000b      	movs	r3, r1
 800641c:	43db      	mvns	r3, r3
 800641e:	4013      	ands	r3, r2
 8006420:	001c      	movs	r4, r3
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	025b      	lsls	r3, r3, #9
 8006428:	0a5b      	lsrs	r3, r3, #9
 800642a:	d105      	bne.n	8006438 <HAL_ADC_ConfigChannel+0x9c>
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	0e9b      	lsrs	r3, r3, #26
 8006432:	221f      	movs	r2, #31
 8006434:	401a      	ands	r2, r3
 8006436:	e02e      	b.n	8006496 <HAL_ADC_ConfigChannel+0xfa>
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 800643e:	231f      	movs	r3, #31
 8006440:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	085b      	lsrs	r3, r3, #1
 800644a:	61bb      	str	r3, [r7, #24]
 800644c:	e00e      	b.n	800646c <HAL_ADC_ConfigChannel+0xd0>
    result <<= 1U;
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	005b      	lsls	r3, r3, #1
 8006452:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	2201      	movs	r2, #1
 8006458:	4013      	ands	r3, r2
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	4313      	orrs	r3, r2
 800645e:	613b      	str	r3, [r7, #16]
    s--;
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	3b01      	subs	r3, #1
 8006464:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	085b      	lsrs	r3, r3, #1
 800646a:	61bb      	str	r3, [r7, #24]
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1ed      	bne.n	800644e <HAL_ADC_ConfigChannel+0xb2>
  result <<= s;                        /* shift when v's highest bits are zero */
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	409a      	lsls	r2, r3
 8006478:	0013      	movs	r3, r2
 800647a:	613b      	str	r3, [r7, #16]
  return result;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <HAL_ADC_ConfigChannel+0xee>
    return 32U;
 8006486:	2320      	movs	r3, #32
 8006488:	e004      	b.n	8006494 <HAL_ADC_ConfigChannel+0xf8>
  return __builtin_clz(value);
 800648a:	69f8      	ldr	r0, [r7, #28]
 800648c:	f7fa f80c 	bl	80004a8 <__clzsi2>
 8006490:	0003      	movs	r3, r0
 8006492:	b2db      	uxtb	r3, r3
 8006494:	001a      	movs	r2, r3
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	211f      	movs	r1, #31
 800649c:	400b      	ands	r3, r1
 800649e:	409a      	lsls	r2, r3
 80064a0:	0013      	movs	r3, r2
 80064a2:	0022      	movs	r2, r4
 80064a4:	431a      	orrs	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	089b      	lsrs	r3, r3, #2
 80064b0:	1c5a      	adds	r2, r3, #1
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	69db      	ldr	r3, [r3, #28]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d808      	bhi.n	80064cc <HAL_ADC_ConfigChannel+0x130>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6818      	ldr	r0, [r3, #0]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	6859      	ldr	r1, [r3, #4]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	001a      	movs	r2, r3
 80064c8:	f7ff fd17 	bl	8005efa <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6818      	ldr	r0, [r3, #0]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	6819      	ldr	r1, [r3, #0]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	001a      	movs	r2, r3
 80064da:	f7ff fd51 	bl	8005f80 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	db00      	blt.n	80064e8 <HAL_ADC_ConfigChannel+0x14c>
 80064e6:	e0a6      	b.n	8006636 <HAL_ADC_ConfigChannel+0x29a>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80064e8:	4b59      	ldr	r3, [pc, #356]	@ (8006650 <HAL_ADC_ConfigChannel+0x2b4>)
 80064ea:	0018      	movs	r0, r3
 80064ec:	f7ff fcc4 	bl	8005e78 <LL_ADC_GetCommonPathInternalCh>
 80064f0:	0003      	movs	r3, r0
 80064f2:	623b      	str	r3, [r7, #32]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a56      	ldr	r2, [pc, #344]	@ (8006654 <HAL_ADC_ConfigChannel+0x2b8>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d122      	bne.n	8006544 <HAL_ADC_ConfigChannel+0x1a8>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80064fe:	6a3a      	ldr	r2, [r7, #32]
 8006500:	2380      	movs	r3, #128	@ 0x80
 8006502:	041b      	lsls	r3, r3, #16
 8006504:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006506:	d11d      	bne.n	8006544 <HAL_ADC_ConfigChannel+0x1a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	2280      	movs	r2, #128	@ 0x80
 800650c:	0412      	lsls	r2, r2, #16
 800650e:	4313      	orrs	r3, r2
 8006510:	4a4f      	ldr	r2, [pc, #316]	@ (8006650 <HAL_ADC_ConfigChannel+0x2b4>)
 8006512:	0019      	movs	r1, r3
 8006514:	0010      	movs	r0, r2
 8006516:	f7ff fc9b 	bl	8005e50 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800651a:	4b4f      	ldr	r3, [pc, #316]	@ (8006658 <HAL_ADC_ConfigChannel+0x2bc>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	494f      	ldr	r1, [pc, #316]	@ (800665c <HAL_ADC_ConfigChannel+0x2c0>)
 8006520:	0018      	movs	r0, r3
 8006522:	f7f9 fe0d 	bl	8000140 <__udivsi3>
 8006526:	0003      	movs	r3, r0
 8006528:	1c5a      	adds	r2, r3, #1
 800652a:	0013      	movs	r3, r2
 800652c:	005b      	lsls	r3, r3, #1
 800652e:	189b      	adds	r3, r3, r2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006534:	e002      	b.n	800653c <HAL_ADC_ConfigChannel+0x1a0>
          {
            wait_loop_index--;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	3b01      	subs	r3, #1
 800653a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1f9      	bne.n	8006536 <HAL_ADC_ConfigChannel+0x19a>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006542:	e078      	b.n	8006636 <HAL_ADC_ConfigChannel+0x29a>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a45      	ldr	r2, [pc, #276]	@ (8006660 <HAL_ADC_ConfigChannel+0x2c4>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d10e      	bne.n	800656c <HAL_ADC_ConfigChannel+0x1d0>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800654e:	6a3a      	ldr	r2, [r7, #32]
 8006550:	2380      	movs	r3, #128	@ 0x80
 8006552:	045b      	lsls	r3, r3, #17
 8006554:	4013      	ands	r3, r2
 8006556:	d109      	bne.n	800656c <HAL_ADC_ConfigChannel+0x1d0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	2280      	movs	r2, #128	@ 0x80
 800655c:	0452      	lsls	r2, r2, #17
 800655e:	4313      	orrs	r3, r2
 8006560:	4a3b      	ldr	r2, [pc, #236]	@ (8006650 <HAL_ADC_ConfigChannel+0x2b4>)
 8006562:	0019      	movs	r1, r3
 8006564:	0010      	movs	r0, r2
 8006566:	f7ff fc73 	bl	8005e50 <LL_ADC_SetCommonPathInternalCh>
 800656a:	e064      	b.n	8006636 <HAL_ADC_ConfigChannel+0x29a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a3c      	ldr	r2, [pc, #240]	@ (8006664 <HAL_ADC_ConfigChannel+0x2c8>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d15f      	bne.n	8006636 <HAL_ADC_ConfigChannel+0x29a>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006576:	6a3a      	ldr	r2, [r7, #32]
 8006578:	2380      	movs	r3, #128	@ 0x80
 800657a:	03db      	lsls	r3, r3, #15
 800657c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800657e:	d15a      	bne.n	8006636 <HAL_ADC_ConfigChannel+0x29a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006580:	6a3b      	ldr	r3, [r7, #32]
 8006582:	2280      	movs	r2, #128	@ 0x80
 8006584:	03d2      	lsls	r2, r2, #15
 8006586:	4313      	orrs	r3, r2
 8006588:	4a31      	ldr	r2, [pc, #196]	@ (8006650 <HAL_ADC_ConfigChannel+0x2b4>)
 800658a:	0019      	movs	r1, r3
 800658c:	0010      	movs	r0, r2
 800658e:	f7ff fc5f 	bl	8005e50 <LL_ADC_SetCommonPathInternalCh>
 8006592:	e050      	b.n	8006636 <HAL_ADC_ConfigChannel+0x29a>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	691a      	ldr	r2, [r3, #16]
 8006598:	2380      	movs	r3, #128	@ 0x80
 800659a:	061b      	lsls	r3, r3, #24
 800659c:	429a      	cmp	r2, r3
 800659e:	d004      	beq.n	80065aa <HAL_ADC_ConfigChannel+0x20e>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80065a4:	4a29      	ldr	r2, [pc, #164]	@ (800664c <HAL_ADC_ConfigChannel+0x2b0>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d107      	bne.n	80065ba <HAL_ADC_ConfigChannel+0x21e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	0019      	movs	r1, r3
 80065b4:	0010      	movs	r0, r2
 80065b6:	f7ff fcd1 	bl	8005f5c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	da39      	bge.n	8006636 <HAL_ADC_ConfigChannel+0x29a>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80065c2:	4b23      	ldr	r3, [pc, #140]	@ (8006650 <HAL_ADC_ConfigChannel+0x2b4>)
 80065c4:	0018      	movs	r0, r3
 80065c6:	f7ff fc57 	bl	8005e78 <LL_ADC_GetCommonPathInternalCh>
 80065ca:	0003      	movs	r3, r0
 80065cc:	623b      	str	r3, [r7, #32]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a20      	ldr	r2, [pc, #128]	@ (8006654 <HAL_ADC_ConfigChannel+0x2b8>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d108      	bne.n	80065ea <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	4a23      	ldr	r2, [pc, #140]	@ (8006668 <HAL_ADC_ConfigChannel+0x2cc>)
 80065dc:	4013      	ands	r3, r2
 80065de:	4a1c      	ldr	r2, [pc, #112]	@ (8006650 <HAL_ADC_ConfigChannel+0x2b4>)
 80065e0:	0019      	movs	r1, r3
 80065e2:	0010      	movs	r0, r2
 80065e4:	f7ff fc34 	bl	8005e50 <LL_ADC_SetCommonPathInternalCh>
 80065e8:	e025      	b.n	8006636 <HAL_ADC_ConfigChannel+0x29a>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a1c      	ldr	r2, [pc, #112]	@ (8006660 <HAL_ADC_ConfigChannel+0x2c4>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d108      	bne.n	8006606 <HAL_ADC_ConfigChannel+0x26a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80065f4:	6a3b      	ldr	r3, [r7, #32]
 80065f6:	4a1d      	ldr	r2, [pc, #116]	@ (800666c <HAL_ADC_ConfigChannel+0x2d0>)
 80065f8:	4013      	ands	r3, r2
 80065fa:	4a15      	ldr	r2, [pc, #84]	@ (8006650 <HAL_ADC_ConfigChannel+0x2b4>)
 80065fc:	0019      	movs	r1, r3
 80065fe:	0010      	movs	r0, r2
 8006600:	f7ff fc26 	bl	8005e50 <LL_ADC_SetCommonPathInternalCh>
 8006604:	e017      	b.n	8006636 <HAL_ADC_ConfigChannel+0x29a>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a16      	ldr	r2, [pc, #88]	@ (8006664 <HAL_ADC_ConfigChannel+0x2c8>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d112      	bne.n	8006636 <HAL_ADC_ConfigChannel+0x29a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006610:	6a3b      	ldr	r3, [r7, #32]
 8006612:	4a17      	ldr	r2, [pc, #92]	@ (8006670 <HAL_ADC_ConfigChannel+0x2d4>)
 8006614:	4013      	ands	r3, r2
 8006616:	4a0e      	ldr	r2, [pc, #56]	@ (8006650 <HAL_ADC_ConfigChannel+0x2b4>)
 8006618:	0019      	movs	r1, r3
 800661a:	0010      	movs	r0, r2
 800661c:	f7ff fc18 	bl	8005e50 <LL_ADC_SetCommonPathInternalCh>
 8006620:	e009      	b.n	8006636 <HAL_ADC_ConfigChannel+0x29a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006626:	2220      	movs	r2, #32
 8006628:	431a      	orrs	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800662e:	2327      	movs	r3, #39	@ 0x27
 8006630:	18fb      	adds	r3, r7, r3
 8006632:	2201      	movs	r2, #1
 8006634:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2254      	movs	r2, #84	@ 0x54
 800663a:	2100      	movs	r1, #0
 800663c:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800663e:	2327      	movs	r3, #39	@ 0x27
 8006640:	18fb      	adds	r3, r7, r3
 8006642:	781b      	ldrb	r3, [r3, #0]
}
 8006644:	0018      	movs	r0, r3
 8006646:	46bd      	mov	sp, r7
 8006648:	b00b      	add	sp, #44	@ 0x2c
 800664a:	bd90      	pop	{r4, r7, pc}
 800664c:	80000004 	.word	0x80000004
 8006650:	40012708 	.word	0x40012708
 8006654:	ac000800 	.word	0xac000800
 8006658:	20000004 	.word	0x20000004
 800665c:	00030d40 	.word	0x00030d40
 8006660:	b4002000 	.word	0xb4002000
 8006664:	b0001000 	.word	0xb0001000
 8006668:	ff7fffff 	.word	0xff7fffff
 800666c:	feffffff 	.word	0xfeffffff
 8006670:	ffbfffff 	.word	0xffbfffff

08006674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006674:	b590      	push	{r4, r7, lr}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	0002      	movs	r2, r0
 800667c:	6039      	str	r1, [r7, #0]
 800667e:	1dfb      	adds	r3, r7, #7
 8006680:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006682:	1dfb      	adds	r3, r7, #7
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	2b7f      	cmp	r3, #127	@ 0x7f
 8006688:	d828      	bhi.n	80066dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800668a:	4a2f      	ldr	r2, [pc, #188]	@ (8006748 <__NVIC_SetPriority+0xd4>)
 800668c:	1dfb      	adds	r3, r7, #7
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	b25b      	sxtb	r3, r3
 8006692:	089b      	lsrs	r3, r3, #2
 8006694:	33c0      	adds	r3, #192	@ 0xc0
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	589b      	ldr	r3, [r3, r2]
 800669a:	1dfa      	adds	r2, r7, #7
 800669c:	7812      	ldrb	r2, [r2, #0]
 800669e:	0011      	movs	r1, r2
 80066a0:	2203      	movs	r2, #3
 80066a2:	400a      	ands	r2, r1
 80066a4:	00d2      	lsls	r2, r2, #3
 80066a6:	21ff      	movs	r1, #255	@ 0xff
 80066a8:	4091      	lsls	r1, r2
 80066aa:	000a      	movs	r2, r1
 80066ac:	43d2      	mvns	r2, r2
 80066ae:	401a      	ands	r2, r3
 80066b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	019b      	lsls	r3, r3, #6
 80066b6:	22ff      	movs	r2, #255	@ 0xff
 80066b8:	401a      	ands	r2, r3
 80066ba:	1dfb      	adds	r3, r7, #7
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	0018      	movs	r0, r3
 80066c0:	2303      	movs	r3, #3
 80066c2:	4003      	ands	r3, r0
 80066c4:	00db      	lsls	r3, r3, #3
 80066c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80066c8:	481f      	ldr	r0, [pc, #124]	@ (8006748 <__NVIC_SetPriority+0xd4>)
 80066ca:	1dfb      	adds	r3, r7, #7
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	b25b      	sxtb	r3, r3
 80066d0:	089b      	lsrs	r3, r3, #2
 80066d2:	430a      	orrs	r2, r1
 80066d4:	33c0      	adds	r3, #192	@ 0xc0
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80066da:	e031      	b.n	8006740 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80066dc:	4a1b      	ldr	r2, [pc, #108]	@ (800674c <__NVIC_SetPriority+0xd8>)
 80066de:	1dfb      	adds	r3, r7, #7
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	0019      	movs	r1, r3
 80066e4:	230f      	movs	r3, #15
 80066e6:	400b      	ands	r3, r1
 80066e8:	3b08      	subs	r3, #8
 80066ea:	089b      	lsrs	r3, r3, #2
 80066ec:	3306      	adds	r3, #6
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	18d3      	adds	r3, r2, r3
 80066f2:	3304      	adds	r3, #4
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	1dfa      	adds	r2, r7, #7
 80066f8:	7812      	ldrb	r2, [r2, #0]
 80066fa:	0011      	movs	r1, r2
 80066fc:	2203      	movs	r2, #3
 80066fe:	400a      	ands	r2, r1
 8006700:	00d2      	lsls	r2, r2, #3
 8006702:	21ff      	movs	r1, #255	@ 0xff
 8006704:	4091      	lsls	r1, r2
 8006706:	000a      	movs	r2, r1
 8006708:	43d2      	mvns	r2, r2
 800670a:	401a      	ands	r2, r3
 800670c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	019b      	lsls	r3, r3, #6
 8006712:	22ff      	movs	r2, #255	@ 0xff
 8006714:	401a      	ands	r2, r3
 8006716:	1dfb      	adds	r3, r7, #7
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	0018      	movs	r0, r3
 800671c:	2303      	movs	r3, #3
 800671e:	4003      	ands	r3, r0
 8006720:	00db      	lsls	r3, r3, #3
 8006722:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006724:	4809      	ldr	r0, [pc, #36]	@ (800674c <__NVIC_SetPriority+0xd8>)
 8006726:	1dfb      	adds	r3, r7, #7
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	001c      	movs	r4, r3
 800672c:	230f      	movs	r3, #15
 800672e:	4023      	ands	r3, r4
 8006730:	3b08      	subs	r3, #8
 8006732:	089b      	lsrs	r3, r3, #2
 8006734:	430a      	orrs	r2, r1
 8006736:	3306      	adds	r3, #6
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	18c3      	adds	r3, r0, r3
 800673c:	3304      	adds	r3, #4
 800673e:	601a      	str	r2, [r3, #0]
}
 8006740:	46c0      	nop			@ (mov r8, r8)
 8006742:	46bd      	mov	sp, r7
 8006744:	b003      	add	sp, #12
 8006746:	bd90      	pop	{r4, r7, pc}
 8006748:	e000e100 	.word	0xe000e100
 800674c:	e000ed00 	.word	0xe000ed00

08006750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	1e5a      	subs	r2, r3, #1
 800675c:	2380      	movs	r3, #128	@ 0x80
 800675e:	045b      	lsls	r3, r3, #17
 8006760:	429a      	cmp	r2, r3
 8006762:	d301      	bcc.n	8006768 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006764:	2301      	movs	r3, #1
 8006766:	e010      	b.n	800678a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006768:	4b0a      	ldr	r3, [pc, #40]	@ (8006794 <SysTick_Config+0x44>)
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	3a01      	subs	r2, #1
 800676e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006770:	2301      	movs	r3, #1
 8006772:	425b      	negs	r3, r3
 8006774:	2103      	movs	r1, #3
 8006776:	0018      	movs	r0, r3
 8006778:	f7ff ff7c 	bl	8006674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800677c:	4b05      	ldr	r3, [pc, #20]	@ (8006794 <SysTick_Config+0x44>)
 800677e:	2200      	movs	r2, #0
 8006780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006782:	4b04      	ldr	r3, [pc, #16]	@ (8006794 <SysTick_Config+0x44>)
 8006784:	2207      	movs	r2, #7
 8006786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006788:	2300      	movs	r3, #0
}
 800678a:	0018      	movs	r0, r3
 800678c:	46bd      	mov	sp, r7
 800678e:	b002      	add	sp, #8
 8006790:	bd80      	pop	{r7, pc}
 8006792:	46c0      	nop			@ (mov r8, r8)
 8006794:	e000e010 	.word	0xe000e010

08006798 <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	60b9      	str	r1, [r7, #8]
 80067a0:	607a      	str	r2, [r7, #4]
 80067a2:	210f      	movs	r1, #15
 80067a4:	187b      	adds	r3, r7, r1
 80067a6:	1c02      	adds	r2, r0, #0
 80067a8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	187b      	adds	r3, r7, r1
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	b25b      	sxtb	r3, r3
 80067b2:	0011      	movs	r1, r2
 80067b4:	0018      	movs	r0, r3
 80067b6:	f7ff ff5d 	bl	8006674 <__NVIC_SetPriority>
}
 80067ba:	46c0      	nop			@ (mov r8, r8)
 80067bc:	46bd      	mov	sp, r7
 80067be:	b004      	add	sp, #16
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b082      	sub	sp, #8
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	0018      	movs	r0, r3
 80067ce:	f7ff ffbf 	bl	8006750 <SysTick_Config>
 80067d2:	0003      	movs	r3, r0
}
 80067d4:	0018      	movs	r0, r3
 80067d6:	46bd      	mov	sp, r7
 80067d8:	b002      	add	sp, #8
 80067da:	bd80      	pop	{r7, pc}

080067dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b086      	sub	sp, #24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80067e6:	2300      	movs	r3, #0
 80067e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80067ea:	e153      	b.n	8006a94 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2101      	movs	r1, #1
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	4091      	lsls	r1, r2
 80067f6:	000a      	movs	r2, r1
 80067f8:	4013      	ands	r3, r2
 80067fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d100      	bne.n	8006804 <HAL_GPIO_Init+0x28>
 8006802:	e144      	b.n	8006a8e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	2203      	movs	r2, #3
 800680a:	4013      	ands	r3, r2
 800680c:	2b01      	cmp	r3, #1
 800680e:	d005      	beq.n	800681c <HAL_GPIO_Init+0x40>
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	2203      	movs	r2, #3
 8006816:	4013      	ands	r3, r2
 8006818:	2b02      	cmp	r3, #2
 800681a:	d130      	bne.n	800687e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	005b      	lsls	r3, r3, #1
 8006826:	2203      	movs	r2, #3
 8006828:	409a      	lsls	r2, r3
 800682a:	0013      	movs	r3, r2
 800682c:	43da      	mvns	r2, r3
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	4013      	ands	r3, r2
 8006832:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	68da      	ldr	r2, [r3, #12]
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	005b      	lsls	r3, r3, #1
 800683c:	409a      	lsls	r2, r3
 800683e:	0013      	movs	r3, r2
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	4313      	orrs	r3, r2
 8006844:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006852:	2201      	movs	r2, #1
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	409a      	lsls	r2, r3
 8006858:	0013      	movs	r3, r2
 800685a:	43da      	mvns	r2, r3
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	4013      	ands	r3, r2
 8006860:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	091b      	lsrs	r3, r3, #4
 8006868:	2201      	movs	r2, #1
 800686a:	401a      	ands	r2, r3
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	409a      	lsls	r2, r3
 8006870:	0013      	movs	r3, r2
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	4313      	orrs	r3, r2
 8006876:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	2203      	movs	r2, #3
 8006884:	4013      	ands	r3, r2
 8006886:	2b03      	cmp	r3, #3
 8006888:	d017      	beq.n	80068ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	005b      	lsls	r3, r3, #1
 8006894:	2203      	movs	r2, #3
 8006896:	409a      	lsls	r2, r3
 8006898:	0013      	movs	r3, r2
 800689a:	43da      	mvns	r2, r3
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	4013      	ands	r3, r2
 80068a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	689a      	ldr	r2, [r3, #8]
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	005b      	lsls	r3, r3, #1
 80068aa:	409a      	lsls	r2, r3
 80068ac:	0013      	movs	r3, r2
 80068ae:	693a      	ldr	r2, [r7, #16]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	2203      	movs	r2, #3
 80068c0:	4013      	ands	r3, r2
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d123      	bne.n	800690e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	08da      	lsrs	r2, r3, #3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	3208      	adds	r2, #8
 80068ce:	0092      	lsls	r2, r2, #2
 80068d0:	58d3      	ldr	r3, [r2, r3]
 80068d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	2207      	movs	r2, #7
 80068d8:	4013      	ands	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	220f      	movs	r2, #15
 80068de:	409a      	lsls	r2, r3
 80068e0:	0013      	movs	r3, r2
 80068e2:	43da      	mvns	r2, r3
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	4013      	ands	r3, r2
 80068e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	691a      	ldr	r2, [r3, #16]
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	2107      	movs	r1, #7
 80068f2:	400b      	ands	r3, r1
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	409a      	lsls	r2, r3
 80068f8:	0013      	movs	r3, r2
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	08da      	lsrs	r2, r3, #3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	3208      	adds	r2, #8
 8006908:	0092      	lsls	r2, r2, #2
 800690a:	6939      	ldr	r1, [r7, #16]
 800690c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	005b      	lsls	r3, r3, #1
 8006918:	2203      	movs	r2, #3
 800691a:	409a      	lsls	r2, r3
 800691c:	0013      	movs	r3, r2
 800691e:	43da      	mvns	r2, r3
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	4013      	ands	r3, r2
 8006924:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	2203      	movs	r2, #3
 800692c:	401a      	ands	r2, r3
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	005b      	lsls	r3, r3, #1
 8006932:	409a      	lsls	r2, r3
 8006934:	0013      	movs	r3, r2
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	4313      	orrs	r3, r2
 800693a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	23c0      	movs	r3, #192	@ 0xc0
 8006948:	029b      	lsls	r3, r3, #10
 800694a:	4013      	ands	r3, r2
 800694c:	d100      	bne.n	8006950 <HAL_GPIO_Init+0x174>
 800694e:	e09e      	b.n	8006a8e <HAL_GPIO_Init+0x2b2>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8006950:	4a56      	ldr	r2, [pc, #344]	@ (8006aac <HAL_GPIO_Init+0x2d0>)
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	089b      	lsrs	r3, r3, #2
 8006956:	3318      	adds	r3, #24
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	589b      	ldr	r3, [r3, r2]
 800695c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	2203      	movs	r2, #3
 8006962:	4013      	ands	r3, r2
 8006964:	00db      	lsls	r3, r3, #3
 8006966:	220f      	movs	r2, #15
 8006968:	409a      	lsls	r2, r3
 800696a:	0013      	movs	r3, r2
 800696c:	43da      	mvns	r2, r3
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	4013      	ands	r3, r2
 8006972:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	23a0      	movs	r3, #160	@ 0xa0
 8006978:	05db      	lsls	r3, r3, #23
 800697a:	429a      	cmp	r2, r3
 800697c:	d01f      	beq.n	80069be <HAL_GPIO_Init+0x1e2>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a4b      	ldr	r2, [pc, #300]	@ (8006ab0 <HAL_GPIO_Init+0x2d4>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d019      	beq.n	80069ba <HAL_GPIO_Init+0x1de>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a4a      	ldr	r2, [pc, #296]	@ (8006ab4 <HAL_GPIO_Init+0x2d8>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d013      	beq.n	80069b6 <HAL_GPIO_Init+0x1da>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a49      	ldr	r2, [pc, #292]	@ (8006ab8 <HAL_GPIO_Init+0x2dc>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d00d      	beq.n	80069b2 <HAL_GPIO_Init+0x1d6>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a48      	ldr	r2, [pc, #288]	@ (8006abc <HAL_GPIO_Init+0x2e0>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d007      	beq.n	80069ae <HAL_GPIO_Init+0x1d2>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a47      	ldr	r2, [pc, #284]	@ (8006ac0 <HAL_GPIO_Init+0x2e4>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d101      	bne.n	80069aa <HAL_GPIO_Init+0x1ce>
 80069a6:	2305      	movs	r3, #5
 80069a8:	e00a      	b.n	80069c0 <HAL_GPIO_Init+0x1e4>
 80069aa:	2306      	movs	r3, #6
 80069ac:	e008      	b.n	80069c0 <HAL_GPIO_Init+0x1e4>
 80069ae:	2304      	movs	r3, #4
 80069b0:	e006      	b.n	80069c0 <HAL_GPIO_Init+0x1e4>
 80069b2:	2303      	movs	r3, #3
 80069b4:	e004      	b.n	80069c0 <HAL_GPIO_Init+0x1e4>
 80069b6:	2302      	movs	r3, #2
 80069b8:	e002      	b.n	80069c0 <HAL_GPIO_Init+0x1e4>
 80069ba:	2301      	movs	r3, #1
 80069bc:	e000      	b.n	80069c0 <HAL_GPIO_Init+0x1e4>
 80069be:	2300      	movs	r3, #0
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	2103      	movs	r1, #3
 80069c4:	400a      	ands	r2, r1
 80069c6:	00d2      	lsls	r2, r2, #3
 80069c8:	4093      	lsls	r3, r2
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80069d0:	4936      	ldr	r1, [pc, #216]	@ (8006aac <HAL_GPIO_Init+0x2d0>)
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	089b      	lsrs	r3, r3, #2
 80069d6:	3318      	adds	r3, #24
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	693a      	ldr	r2, [r7, #16]
 80069dc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80069de:	4b33      	ldr	r3, [pc, #204]	@ (8006aac <HAL_GPIO_Init+0x2d0>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	43da      	mvns	r2, r3
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	4013      	ands	r3, r2
 80069ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	685a      	ldr	r2, [r3, #4]
 80069f2:	2380      	movs	r3, #128	@ 0x80
 80069f4:	035b      	lsls	r3, r3, #13
 80069f6:	4013      	ands	r3, r2
 80069f8:	d003      	beq.n	8006a02 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80069fa:	693a      	ldr	r2, [r7, #16]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006a02:	4b2a      	ldr	r3, [pc, #168]	@ (8006aac <HAL_GPIO_Init+0x2d0>)
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8006a08:	4b28      	ldr	r3, [pc, #160]	@ (8006aac <HAL_GPIO_Init+0x2d0>)
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	43da      	mvns	r2, r3
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	4013      	ands	r3, r2
 8006a16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	2380      	movs	r3, #128	@ 0x80
 8006a1e:	039b      	lsls	r3, r3, #14
 8006a20:	4013      	ands	r3, r2
 8006a22:	d003      	beq.n	8006a2c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8006aac <HAL_GPIO_Init+0x2d0>)
 8006a2e:	693a      	ldr	r2, [r7, #16]
 8006a30:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006a32:	4a1e      	ldr	r2, [pc, #120]	@ (8006aac <HAL_GPIO_Init+0x2d0>)
 8006a34:	2384      	movs	r3, #132	@ 0x84
 8006a36:	58d3      	ldr	r3, [r2, r3]
 8006a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	43da      	mvns	r2, r3
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	4013      	ands	r3, r2
 8006a42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	685a      	ldr	r2, [r3, #4]
 8006a48:	2380      	movs	r3, #128	@ 0x80
 8006a4a:	029b      	lsls	r3, r3, #10
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	d003      	beq.n	8006a58 <HAL_GPIO_Init+0x27c>
        {
          temp |= iocurrent;
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006a58:	4914      	ldr	r1, [pc, #80]	@ (8006aac <HAL_GPIO_Init+0x2d0>)
 8006a5a:	2284      	movs	r2, #132	@ 0x84
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8006a60:	4a12      	ldr	r2, [pc, #72]	@ (8006aac <HAL_GPIO_Init+0x2d0>)
 8006a62:	2380      	movs	r3, #128	@ 0x80
 8006a64:	58d3      	ldr	r3, [r2, r3]
 8006a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	43da      	mvns	r2, r3
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	4013      	ands	r3, r2
 8006a70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	685a      	ldr	r2, [r3, #4]
 8006a76:	2380      	movs	r3, #128	@ 0x80
 8006a78:	025b      	lsls	r3, r3, #9
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	d003      	beq.n	8006a86 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006a86:	4909      	ldr	r1, [pc, #36]	@ (8006aac <HAL_GPIO_Init+0x2d0>)
 8006a88:	2280      	movs	r2, #128	@ 0x80
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	3301      	adds	r3, #1
 8006a92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	40da      	lsrs	r2, r3
 8006a9c:	1e13      	subs	r3, r2, #0
 8006a9e:	d000      	beq.n	8006aa2 <HAL_GPIO_Init+0x2c6>
 8006aa0:	e6a4      	b.n	80067ec <HAL_GPIO_Init+0x10>
  }
}
 8006aa2:	46c0      	nop			@ (mov r8, r8)
 8006aa4:	46c0      	nop			@ (mov r8, r8)
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	b006      	add	sp, #24
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	40021800 	.word	0x40021800
 8006ab0:	50000400 	.word	0x50000400
 8006ab4:	50000800 	.word	0x50000800
 8006ab8:	50000c00 	.word	0x50000c00
 8006abc:	50001000 	.word	0x50001000
 8006ac0:	50001400 	.word	0x50001400

08006ac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	0008      	movs	r0, r1
 8006ace:	0011      	movs	r1, r2
 8006ad0:	1cbb      	adds	r3, r7, #2
 8006ad2:	1c02      	adds	r2, r0, #0
 8006ad4:	801a      	strh	r2, [r3, #0]
 8006ad6:	1c7b      	adds	r3, r7, #1
 8006ad8:	1c0a      	adds	r2, r1, #0
 8006ada:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006adc:	1c7b      	adds	r3, r7, #1
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d004      	beq.n	8006aee <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006ae4:	1cbb      	adds	r3, r7, #2
 8006ae6:	881a      	ldrh	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006aec:	e003      	b.n	8006af6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006aee:	1cbb      	adds	r3, r7, #2
 8006af0:	881a      	ldrh	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006af6:	46c0      	nop			@ (mov r8, r8)
 8006af8:	46bd      	mov	sp, r7
 8006afa:	b002      	add	sp, #8
 8006afc:	bd80      	pop	{r7, pc}
	...

08006b00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d101      	bne.n	8006b12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e08f      	b.n	8006c32 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2241      	movs	r2, #65	@ 0x41
 8006b16:	5c9b      	ldrb	r3, [r3, r2]
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d107      	bne.n	8006b2e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2240      	movs	r2, #64	@ 0x40
 8006b22:	2100      	movs	r1, #0
 8006b24:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	0018      	movs	r0, r3
 8006b2a:	f7fc fdff 	bl	800372c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2241      	movs	r2, #65	@ 0x41
 8006b32:	2124      	movs	r1, #36	@ 0x24
 8006b34:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2101      	movs	r1, #1
 8006b42:	438a      	bics	r2, r1
 8006b44:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	685a      	ldr	r2, [r3, #4]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	493b      	ldr	r1, [pc, #236]	@ (8006c3c <HAL_I2C_Init+0x13c>)
 8006b50:	400a      	ands	r2, r1
 8006b52:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	689a      	ldr	r2, [r3, #8]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4938      	ldr	r1, [pc, #224]	@ (8006c40 <HAL_I2C_Init+0x140>)
 8006b60:	400a      	ands	r2, r1
 8006b62:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d108      	bne.n	8006b7e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	689a      	ldr	r2, [r3, #8]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2180      	movs	r1, #128	@ 0x80
 8006b76:	0209      	lsls	r1, r1, #8
 8006b78:	430a      	orrs	r2, r1
 8006b7a:	609a      	str	r2, [r3, #8]
 8006b7c:	e007      	b.n	8006b8e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	689a      	ldr	r2, [r3, #8]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2184      	movs	r1, #132	@ 0x84
 8006b88:	0209      	lsls	r1, r1, #8
 8006b8a:	430a      	orrs	r2, r1
 8006b8c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d109      	bne.n	8006baa <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2180      	movs	r1, #128	@ 0x80
 8006ba2:	0109      	lsls	r1, r1, #4
 8006ba4:	430a      	orrs	r2, r1
 8006ba6:	605a      	str	r2, [r3, #4]
 8006ba8:	e007      	b.n	8006bba <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	685a      	ldr	r2, [r3, #4]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4923      	ldr	r1, [pc, #140]	@ (8006c44 <HAL_I2C_Init+0x144>)
 8006bb6:	400a      	ands	r2, r1
 8006bb8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	685a      	ldr	r2, [r3, #4]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4920      	ldr	r1, [pc, #128]	@ (8006c48 <HAL_I2C_Init+0x148>)
 8006bc6:	430a      	orrs	r2, r1
 8006bc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68da      	ldr	r2, [r3, #12]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	491a      	ldr	r1, [pc, #104]	@ (8006c40 <HAL_I2C_Init+0x140>)
 8006bd6:	400a      	ands	r2, r1
 8006bd8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	691a      	ldr	r2, [r3, #16]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	431a      	orrs	r2, r3
 8006be4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	430a      	orrs	r2, r1
 8006bf2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	69d9      	ldr	r1, [r3, #28]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a1a      	ldr	r2, [r3, #32]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	430a      	orrs	r2, r1
 8006c02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2101      	movs	r1, #1
 8006c10:	430a      	orrs	r2, r1
 8006c12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2241      	movs	r2, #65	@ 0x41
 8006c1e:	2120      	movs	r1, #32
 8006c20:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2242      	movs	r2, #66	@ 0x42
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	0018      	movs	r0, r3
 8006c34:	46bd      	mov	sp, r7
 8006c36:	b002      	add	sp, #8
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	46c0      	nop			@ (mov r8, r8)
 8006c3c:	f0ffffff 	.word	0xf0ffffff
 8006c40:	ffff7fff 	.word	0xffff7fff
 8006c44:	fffff7ff 	.word	0xfffff7ff
 8006c48:	02008000 	.word	0x02008000

08006c4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2241      	movs	r2, #65	@ 0x41
 8006c5a:	5c9b      	ldrb	r3, [r3, r2]
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2b20      	cmp	r3, #32
 8006c60:	d138      	bne.n	8006cd4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2240      	movs	r2, #64	@ 0x40
 8006c66:	5c9b      	ldrb	r3, [r3, r2]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d101      	bne.n	8006c70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	e032      	b.n	8006cd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2240      	movs	r2, #64	@ 0x40
 8006c74:	2101      	movs	r1, #1
 8006c76:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2241      	movs	r2, #65	@ 0x41
 8006c7c:	2124      	movs	r1, #36	@ 0x24
 8006c7e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	438a      	bics	r2, r1
 8006c8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4911      	ldr	r1, [pc, #68]	@ (8006ce0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006c9c:	400a      	ands	r2, r1
 8006c9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6819      	ldr	r1, [r3, #0]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	683a      	ldr	r2, [r7, #0]
 8006cac:	430a      	orrs	r2, r1
 8006cae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2101      	movs	r1, #1
 8006cbc:	430a      	orrs	r2, r1
 8006cbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2241      	movs	r2, #65	@ 0x41
 8006cc4:	2120      	movs	r1, #32
 8006cc6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2240      	movs	r2, #64	@ 0x40
 8006ccc:	2100      	movs	r1, #0
 8006cce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	e000      	b.n	8006cd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006cd4:	2302      	movs	r3, #2
  }
}
 8006cd6:	0018      	movs	r0, r3
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	b002      	add	sp, #8
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	46c0      	nop			@ (mov r8, r8)
 8006ce0:	ffffefff 	.word	0xffffefff

08006ce4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2241      	movs	r2, #65	@ 0x41
 8006cf2:	5c9b      	ldrb	r3, [r3, r2]
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b20      	cmp	r3, #32
 8006cf8:	d139      	bne.n	8006d6e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2240      	movs	r2, #64	@ 0x40
 8006cfe:	5c9b      	ldrb	r3, [r3, r2]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d101      	bne.n	8006d08 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d04:	2302      	movs	r3, #2
 8006d06:	e033      	b.n	8006d70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2240      	movs	r2, #64	@ 0x40
 8006d0c:	2101      	movs	r1, #1
 8006d0e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2241      	movs	r2, #65	@ 0x41
 8006d14:	2124      	movs	r1, #36	@ 0x24
 8006d16:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2101      	movs	r1, #1
 8006d24:	438a      	bics	r2, r1
 8006d26:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	4a11      	ldr	r2, [pc, #68]	@ (8006d78 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006d34:	4013      	ands	r3, r2
 8006d36:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	021b      	lsls	r3, r3, #8
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2101      	movs	r1, #1
 8006d56:	430a      	orrs	r2, r1
 8006d58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2241      	movs	r2, #65	@ 0x41
 8006d5e:	2120      	movs	r1, #32
 8006d60:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2240      	movs	r2, #64	@ 0x40
 8006d66:	2100      	movs	r1, #0
 8006d68:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	e000      	b.n	8006d70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006d6e:	2302      	movs	r3, #2
  }
}
 8006d70:	0018      	movs	r0, r3
 8006d72:	46bd      	mov	sp, r7
 8006d74:	b004      	add	sp, #16
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	fffff0ff 	.word	0xfffff0ff

08006d7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	2380      	movs	r3, #128	@ 0x80
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d137      	bne.n	8006dfe <HAL_PWREx_ControlVoltageScaling+0x82>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006d8e:	4b27      	ldr	r3, [pc, #156]	@ (8006e2c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	23c0      	movs	r3, #192	@ 0xc0
 8006d94:	00db      	lsls	r3, r3, #3
 8006d96:	401a      	ands	r2, r3
 8006d98:	2380      	movs	r3, #128	@ 0x80
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d040      	beq.n	8006e22 <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006da0:	4b22      	ldr	r3, [pc, #136]	@ (8006e2c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a22      	ldr	r2, [pc, #136]	@ (8006e30 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8006da6:	401a      	ands	r2, r3
 8006da8:	4b20      	ldr	r3, [pc, #128]	@ (8006e2c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006daa:	2180      	movs	r1, #128	@ 0x80
 8006dac:	0089      	lsls	r1, r1, #2
 8006dae:	430a      	orrs	r2, r1
 8006db0:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006db2:	4b20      	ldr	r3, [pc, #128]	@ (8006e34 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2232      	movs	r2, #50	@ 0x32
 8006db8:	4353      	muls	r3, r2
 8006dba:	491f      	ldr	r1, [pc, #124]	@ (8006e38 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8006dbc:	0018      	movs	r0, r3
 8006dbe:	f7f9 f9bf 	bl	8000140 <__udivsi3>
 8006dc2:	0003      	movs	r3, r0
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006dc8:	e002      	b.n	8006dd0 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        wait_loop_index--;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006dd0:	4b16      	ldr	r3, [pc, #88]	@ (8006e2c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006dd2:	695a      	ldr	r2, [r3, #20]
 8006dd4:	2380      	movs	r3, #128	@ 0x80
 8006dd6:	00db      	lsls	r3, r3, #3
 8006dd8:	401a      	ands	r2, r3
 8006dda:	2380      	movs	r3, #128	@ 0x80
 8006ddc:	00db      	lsls	r3, r3, #3
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d102      	bne.n	8006de8 <HAL_PWREx_ControlVoltageScaling+0x6c>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1f0      	bne.n	8006dca <HAL_PWREx_ControlVoltageScaling+0x4e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006de8:	4b10      	ldr	r3, [pc, #64]	@ (8006e2c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006dea:	695a      	ldr	r2, [r3, #20]
 8006dec:	2380      	movs	r3, #128	@ 0x80
 8006dee:	00db      	lsls	r3, r3, #3
 8006df0:	401a      	ands	r2, r3
 8006df2:	2380      	movs	r3, #128	@ 0x80
 8006df4:	00db      	lsls	r3, r3, #3
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d113      	bne.n	8006e22 <HAL_PWREx_ControlVoltageScaling+0xa6>
      {
        return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e012      	b.n	8006e24 <HAL_PWREx_ControlVoltageScaling+0xa8>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8006e2c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	23c0      	movs	r3, #192	@ 0xc0
 8006e04:	00db      	lsls	r3, r3, #3
 8006e06:	401a      	ands	r2, r3
 8006e08:	2380      	movs	r3, #128	@ 0x80
 8006e0a:	00db      	lsls	r3, r3, #3
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d008      	beq.n	8006e22 <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006e10:	4b06      	ldr	r3, [pc, #24]	@ (8006e2c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a06      	ldr	r2, [pc, #24]	@ (8006e30 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8006e16:	401a      	ands	r2, r3
 8006e18:	4b04      	ldr	r3, [pc, #16]	@ (8006e2c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006e1a:	2180      	movs	r1, #128	@ 0x80
 8006e1c:	00c9      	lsls	r1, r1, #3
 8006e1e:	430a      	orrs	r2, r1
 8006e20:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	0018      	movs	r0, r3
 8006e26:	46bd      	mov	sp, r7
 8006e28:	b004      	add	sp, #16
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	40007000 	.word	0x40007000
 8006e30:	fffff9ff 	.word	0xfffff9ff
 8006e34:	20000004 	.word	0x20000004
 8006e38:	000f4240 	.word	0x000f4240

08006e3c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8006e40:	4b03      	ldr	r3, [pc, #12]	@ (8006e50 <HAL_PWREx_GetVoltageRange+0x14>)
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	23c0      	movs	r3, #192	@ 0xc0
 8006e46:	00db      	lsls	r3, r3, #3
 8006e48:	4013      	ands	r3, r2
}
 8006e4a:	0018      	movs	r0, r3
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	40007000 	.word	0x40007000

08006e54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e54:	b5b0      	push	{r4, r5, r7, lr}
 8006e56:	b088      	sub	sp, #32
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e5c:	4bc9      	ldr	r3, [pc, #804]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	2238      	movs	r2, #56	@ 0x38
 8006e62:	4013      	ands	r3, r2
 8006e64:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e66:	4bc7      	ldr	r3, [pc, #796]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	2203      	movs	r2, #3
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2210      	movs	r2, #16
 8006e76:	4013      	ands	r3, r2
 8006e78:	d100      	bne.n	8006e7c <HAL_RCC_OscConfig+0x28>
 8006e7a:	e0ef      	b.n	800705c <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d007      	beq.n	8006e92 <HAL_RCC_OscConfig+0x3e>
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	2b18      	cmp	r3, #24
 8006e86:	d000      	beq.n	8006e8a <HAL_RCC_OscConfig+0x36>
 8006e88:	e093      	b.n	8006fb2 <HAL_RCC_OscConfig+0x15e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d000      	beq.n	8006e92 <HAL_RCC_OscConfig+0x3e>
 8006e90:	e08f      	b.n	8006fb2 <HAL_RCC_OscConfig+0x15e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006e92:	4bbc      	ldr	r3, [pc, #752]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2202      	movs	r2, #2
 8006e98:	4013      	ands	r3, r2
 8006e9a:	d006      	beq.n	8006eaa <HAL_RCC_OscConfig+0x56>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	69db      	ldr	r3, [r3, #28]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d102      	bne.n	8006eaa <HAL_RCC_OscConfig+0x56>
      {
        return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	f000 fbf2 	bl	800768e <HAL_RCC_OscConfig+0x83a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006eae:	4bb5      	ldr	r3, [pc, #724]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2108      	movs	r1, #8
 8006eb4:	400b      	ands	r3, r1
 8006eb6:	d004      	beq.n	8006ec2 <HAL_RCC_OscConfig+0x6e>
 8006eb8:	4bb2      	ldr	r3, [pc, #712]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	21f0      	movs	r1, #240	@ 0xf0
 8006ebe:	400b      	ands	r3, r1
 8006ec0:	e005      	b.n	8006ece <HAL_RCC_OscConfig+0x7a>
 8006ec2:	49b0      	ldr	r1, [pc, #704]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 8006ec4:	2394      	movs	r3, #148	@ 0x94
 8006ec6:	58cb      	ldr	r3, [r1, r3]
 8006ec8:	091b      	lsrs	r3, r3, #4
 8006eca:	21f0      	movs	r1, #240	@ 0xf0
 8006ecc:	400b      	ands	r3, r1
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d225      	bcs.n	8006f1e <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed6:	0018      	movs	r0, r3
 8006ed8:	f000 fd90 	bl	80079fc <RCC_SetFlashLatencyFromMSIRange>
 8006edc:	1e03      	subs	r3, r0, #0
 8006ede:	d002      	beq.n	8006ee6 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	f000 fbd4 	bl	800768e <HAL_RCC_OscConfig+0x83a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006ee6:	4ba7      	ldr	r3, [pc, #668]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	4ba6      	ldr	r3, [pc, #664]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 8006eec:	2108      	movs	r1, #8
 8006eee:	430a      	orrs	r2, r1
 8006ef0:	601a      	str	r2, [r3, #0]
 8006ef2:	4ba4      	ldr	r3, [pc, #656]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	22f0      	movs	r2, #240	@ 0xf0
 8006ef8:	4393      	bics	r3, r2
 8006efa:	0019      	movs	r1, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f00:	4ba0      	ldr	r3, [pc, #640]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 8006f02:	430a      	orrs	r2, r1
 8006f04:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f06:	4b9f      	ldr	r3, [pc, #636]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	4a9f      	ldr	r2, [pc, #636]	@ (8007188 <HAL_RCC_OscConfig+0x334>)
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	0019      	movs	r1, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a1b      	ldr	r3, [r3, #32]
 8006f14:	021a      	lsls	r2, r3, #8
 8006f16:	4b9b      	ldr	r3, [pc, #620]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 8006f18:	430a      	orrs	r2, r1
 8006f1a:	605a      	str	r2, [r3, #4]
 8006f1c:	e027      	b.n	8006f6e <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f1e:	4b99      	ldr	r3, [pc, #612]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	4b98      	ldr	r3, [pc, #608]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 8006f24:	2108      	movs	r1, #8
 8006f26:	430a      	orrs	r2, r1
 8006f28:	601a      	str	r2, [r3, #0]
 8006f2a:	4b96      	ldr	r3, [pc, #600]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	22f0      	movs	r2, #240	@ 0xf0
 8006f30:	4393      	bics	r3, r2
 8006f32:	0019      	movs	r1, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f38:	4b92      	ldr	r3, [pc, #584]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 8006f3a:	430a      	orrs	r2, r1
 8006f3c:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f3e:	4b91      	ldr	r3, [pc, #580]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	4a91      	ldr	r2, [pc, #580]	@ (8007188 <HAL_RCC_OscConfig+0x334>)
 8006f44:	4013      	ands	r3, r2
 8006f46:	0019      	movs	r1, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a1b      	ldr	r3, [r3, #32]
 8006f4c:	021a      	lsls	r2, r3, #8
 8006f4e:	4b8d      	ldr	r3, [pc, #564]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 8006f50:	430a      	orrs	r2, r1
 8006f52:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d109      	bne.n	8006f6e <HAL_RCC_OscConfig+0x11a>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f5e:	0018      	movs	r0, r3
 8006f60:	f000 fd4c 	bl	80079fc <RCC_SetFlashLatencyFromMSIRange>
 8006f64:	1e03      	subs	r3, r0, #0
 8006f66:	d002      	beq.n	8006f6e <HAL_RCC_OscConfig+0x11a>
            {
              return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	f000 fb90 	bl	800768e <HAL_RCC_OscConfig+0x83a>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8006f6e:	f000 fc87 	bl	8007880 <HAL_RCC_GetSysClockFreq>
 8006f72:	0001      	movs	r1, r0
 8006f74:	4b83      	ldr	r3, [pc, #524]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 8006f76:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006f78:	0a1b      	lsrs	r3, r3, #8
 8006f7a:	220f      	movs	r2, #15
 8006f7c:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8006f7e:	4a83      	ldr	r2, [pc, #524]	@ (800718c <HAL_RCC_OscConfig+0x338>)
 8006f80:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006f82:	001a      	movs	r2, r3
 8006f84:	231f      	movs	r3, #31
 8006f86:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8006f88:	000a      	movs	r2, r1
 8006f8a:	40da      	lsrs	r2, r3
 8006f8c:	4b80      	ldr	r3, [pc, #512]	@ (8007190 <HAL_RCC_OscConfig+0x33c>)
 8006f8e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006f90:	4b80      	ldr	r3, [pc, #512]	@ (8007194 <HAL_RCC_OscConfig+0x340>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	250f      	movs	r5, #15
 8006f96:	197c      	adds	r4, r7, r5
 8006f98:	0018      	movs	r0, r3
 8006f9a:	f7fe fed3 	bl	8005d44 <HAL_InitTick>
 8006f9e:	0003      	movs	r3, r0
 8006fa0:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 8006fa2:	197b      	adds	r3, r7, r5
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d057      	beq.n	800705a <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8006faa:	197b      	adds	r3, r7, r5
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	f000 fb6e 	bl	800768e <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	69db      	ldr	r3, [r3, #28]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d035      	beq.n	8007026 <HAL_RCC_OscConfig+0x1d2>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006fba:	4b72      	ldr	r3, [pc, #456]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	4b71      	ldr	r3, [pc, #452]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 8006fc0:	2101      	movs	r1, #1
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006fc6:	f7fe ff17 	bl	8005df8 <HAL_GetTick>
 8006fca:	0003      	movs	r3, r0
 8006fcc:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006fce:	e009      	b.n	8006fe4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8006fd0:	f7fe ff12 	bl	8005df8 <HAL_GetTick>
 8006fd4:	0002      	movs	r2, r0
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	2b02      	cmp	r3, #2
 8006fdc:	d902      	bls.n	8006fe4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	f000 fb55 	bl	800768e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006fe4:	4b67      	ldr	r3, [pc, #412]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2202      	movs	r2, #2
 8006fea:	4013      	ands	r3, r2
 8006fec:	d0f0      	beq.n	8006fd0 <HAL_RCC_OscConfig+0x17c>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006fee:	4b65      	ldr	r3, [pc, #404]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	4b64      	ldr	r3, [pc, #400]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 8006ff4:	2108      	movs	r1, #8
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	601a      	str	r2, [r3, #0]
 8006ffa:	4b62      	ldr	r3, [pc, #392]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	22f0      	movs	r2, #240	@ 0xf0
 8007000:	4393      	bics	r3, r2
 8007002:	0019      	movs	r1, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007008:	4b5e      	ldr	r3, [pc, #376]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 800700a:	430a      	orrs	r2, r1
 800700c:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800700e:	4b5d      	ldr	r3, [pc, #372]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	4a5d      	ldr	r2, [pc, #372]	@ (8007188 <HAL_RCC_OscConfig+0x334>)
 8007014:	4013      	ands	r3, r2
 8007016:	0019      	movs	r1, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a1b      	ldr	r3, [r3, #32]
 800701c:	021a      	lsls	r2, r3, #8
 800701e:	4b59      	ldr	r3, [pc, #356]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 8007020:	430a      	orrs	r2, r1
 8007022:	605a      	str	r2, [r3, #4]
 8007024:	e01a      	b.n	800705c <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007026:	4b57      	ldr	r3, [pc, #348]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	4b56      	ldr	r3, [pc, #344]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 800702c:	2101      	movs	r1, #1
 800702e:	438a      	bics	r2, r1
 8007030:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007032:	f7fe fee1 	bl	8005df8 <HAL_GetTick>
 8007036:	0003      	movs	r3, r0
 8007038:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800703a:	e008      	b.n	800704e <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 800703c:	f7fe fedc 	bl	8005df8 <HAL_GetTick>
 8007040:	0002      	movs	r2, r0
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	2b02      	cmp	r3, #2
 8007048:	d901      	bls.n	800704e <HAL_RCC_OscConfig+0x1fa>
          {
            return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e31f      	b.n	800768e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800704e:	4b4d      	ldr	r3, [pc, #308]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2202      	movs	r2, #2
 8007054:	4013      	ands	r3, r2
 8007056:	d1f1      	bne.n	800703c <HAL_RCC_OscConfig+0x1e8>
 8007058:	e000      	b.n	800705c <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800705a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2201      	movs	r2, #1
 8007062:	4013      	ands	r3, r2
 8007064:	d100      	bne.n	8007068 <HAL_RCC_OscConfig+0x214>
 8007066:	e065      	b.n	8007134 <HAL_RCC_OscConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	2b10      	cmp	r3, #16
 800706c:	d005      	beq.n	800707a <HAL_RCC_OscConfig+0x226>
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	2b18      	cmp	r3, #24
 8007072:	d10e      	bne.n	8007092 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	2b03      	cmp	r3, #3
 8007078:	d10b      	bne.n	8007092 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800707a:	4b42      	ldr	r3, [pc, #264]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	2380      	movs	r3, #128	@ 0x80
 8007080:	029b      	lsls	r3, r3, #10
 8007082:	4013      	ands	r3, r2
 8007084:	d055      	beq.n	8007132 <HAL_RCC_OscConfig+0x2de>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d151      	bne.n	8007132 <HAL_RCC_OscConfig+0x2de>
      {
        return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e2fd      	b.n	800768e <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	2380      	movs	r3, #128	@ 0x80
 8007098:	025b      	lsls	r3, r3, #9
 800709a:	429a      	cmp	r2, r3
 800709c:	d107      	bne.n	80070ae <HAL_RCC_OscConfig+0x25a>
 800709e:	4b39      	ldr	r3, [pc, #228]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	4b38      	ldr	r3, [pc, #224]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 80070a4:	2180      	movs	r1, #128	@ 0x80
 80070a6:	0249      	lsls	r1, r1, #9
 80070a8:	430a      	orrs	r2, r1
 80070aa:	601a      	str	r2, [r3, #0]
 80070ac:	e013      	b.n	80070d6 <HAL_RCC_OscConfig+0x282>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	685a      	ldr	r2, [r3, #4]
 80070b2:	23a0      	movs	r3, #160	@ 0xa0
 80070b4:	02db      	lsls	r3, r3, #11
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d107      	bne.n	80070ca <HAL_RCC_OscConfig+0x276>
 80070ba:	4b32      	ldr	r3, [pc, #200]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	4b31      	ldr	r3, [pc, #196]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 80070c0:	21a0      	movs	r1, #160	@ 0xa0
 80070c2:	02c9      	lsls	r1, r1, #11
 80070c4:	430a      	orrs	r2, r1
 80070c6:	601a      	str	r2, [r3, #0]
 80070c8:	e005      	b.n	80070d6 <HAL_RCC_OscConfig+0x282>
 80070ca:	4b2e      	ldr	r3, [pc, #184]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	4b2d      	ldr	r3, [pc, #180]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 80070d0:	4931      	ldr	r1, [pc, #196]	@ (8007198 <HAL_RCC_OscConfig+0x344>)
 80070d2:	400a      	ands	r2, r1
 80070d4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d014      	beq.n	8007108 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070de:	f7fe fe8b 	bl	8005df8 <HAL_GetTick>
 80070e2:	0003      	movs	r3, r0
 80070e4:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070e6:	e008      	b.n	80070fa <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80070e8:	f7fe fe86 	bl	8005df8 <HAL_GetTick>
 80070ec:	0002      	movs	r2, r0
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	2b64      	cmp	r3, #100	@ 0x64
 80070f4:	d901      	bls.n	80070fa <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e2c9      	b.n	800768e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070fa:	4b22      	ldr	r3, [pc, #136]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	2380      	movs	r3, #128	@ 0x80
 8007100:	029b      	lsls	r3, r3, #10
 8007102:	4013      	ands	r3, r2
 8007104:	d0f0      	beq.n	80070e8 <HAL_RCC_OscConfig+0x294>
 8007106:	e015      	b.n	8007134 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007108:	f7fe fe76 	bl	8005df8 <HAL_GetTick>
 800710c:	0003      	movs	r3, r0
 800710e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007110:	e008      	b.n	8007124 <HAL_RCC_OscConfig+0x2d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8007112:	f7fe fe71 	bl	8005df8 <HAL_GetTick>
 8007116:	0002      	movs	r2, r0
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	1ad3      	subs	r3, r2, r3
 800711c:	2b64      	cmp	r3, #100	@ 0x64
 800711e:	d901      	bls.n	8007124 <HAL_RCC_OscConfig+0x2d0>
          {
            return HAL_TIMEOUT;
 8007120:	2303      	movs	r3, #3
 8007122:	e2b4      	b.n	800768e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007124:	4b17      	ldr	r3, [pc, #92]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	2380      	movs	r3, #128	@ 0x80
 800712a:	029b      	lsls	r3, r3, #10
 800712c:	4013      	ands	r3, r2
 800712e:	d1f0      	bne.n	8007112 <HAL_RCC_OscConfig+0x2be>
 8007130:	e000      	b.n	8007134 <HAL_RCC_OscConfig+0x2e0>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007132:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2202      	movs	r2, #2
 800713a:	4013      	ands	r3, r2
 800713c:	d100      	bne.n	8007140 <HAL_RCC_OscConfig+0x2ec>
 800713e:	e074      	b.n	800722a <HAL_RCC_OscConfig+0x3d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	2b08      	cmp	r3, #8
 8007144:	d005      	beq.n	8007152 <HAL_RCC_OscConfig+0x2fe>
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	2b18      	cmp	r3, #24
 800714a:	d129      	bne.n	80071a0 <HAL_RCC_OscConfig+0x34c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	2b02      	cmp	r3, #2
 8007150:	d126      	bne.n	80071a0 <HAL_RCC_OscConfig+0x34c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007152:	4b0c      	ldr	r3, [pc, #48]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	2380      	movs	r3, #128	@ 0x80
 8007158:	00db      	lsls	r3, r3, #3
 800715a:	4013      	ands	r3, r2
 800715c:	d005      	beq.n	800716a <HAL_RCC_OscConfig+0x316>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d101      	bne.n	800716a <HAL_RCC_OscConfig+0x316>
      {
        return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e291      	b.n	800768e <HAL_RCC_OscConfig+0x83a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800716a:	4b06      	ldr	r3, [pc, #24]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	4a0b      	ldr	r2, [pc, #44]	@ (800719c <HAL_RCC_OscConfig+0x348>)
 8007170:	4013      	ands	r3, r2
 8007172:	0019      	movs	r1, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	061a      	lsls	r2, r3, #24
 800717a:	4b02      	ldr	r3, [pc, #8]	@ (8007184 <HAL_RCC_OscConfig+0x330>)
 800717c:	430a      	orrs	r2, r1
 800717e:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007180:	e053      	b.n	800722a <HAL_RCC_OscConfig+0x3d6>
 8007182:	46c0      	nop			@ (mov r8, r8)
 8007184:	40021000 	.word	0x40021000
 8007188:	ffff00ff 	.word	0xffff00ff
 800718c:	08010030 	.word	0x08010030
 8007190:	20000004 	.word	0x20000004
 8007194:	20000008 	.word	0x20000008
 8007198:	fffaffff 	.word	0xfffaffff
 800719c:	80ffffff 	.word	0x80ffffff
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d026      	beq.n	80071f6 <HAL_RCC_OscConfig+0x3a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071a8:	4bc7      	ldr	r3, [pc, #796]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	4bc6      	ldr	r3, [pc, #792]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 80071ae:	2180      	movs	r1, #128	@ 0x80
 80071b0:	0049      	lsls	r1, r1, #1
 80071b2:	430a      	orrs	r2, r1
 80071b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b6:	f7fe fe1f 	bl	8005df8 <HAL_GetTick>
 80071ba:	0003      	movs	r3, r0
 80071bc:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071be:	e008      	b.n	80071d2 <HAL_RCC_OscConfig+0x37e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80071c0:	f7fe fe1a 	bl	8005df8 <HAL_GetTick>
 80071c4:	0002      	movs	r2, r0
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d901      	bls.n	80071d2 <HAL_RCC_OscConfig+0x37e>
          {
            return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e25d      	b.n	800768e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071d2:	4bbd      	ldr	r3, [pc, #756]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	2380      	movs	r3, #128	@ 0x80
 80071d8:	00db      	lsls	r3, r3, #3
 80071da:	4013      	ands	r3, r2
 80071dc:	d0f0      	beq.n	80071c0 <HAL_RCC_OscConfig+0x36c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071de:	4bba      	ldr	r3, [pc, #744]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	4aba      	ldr	r2, [pc, #744]	@ (80074cc <HAL_RCC_OscConfig+0x678>)
 80071e4:	4013      	ands	r3, r2
 80071e6:	0019      	movs	r1, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	061a      	lsls	r2, r3, #24
 80071ee:	4bb6      	ldr	r3, [pc, #728]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 80071f0:	430a      	orrs	r2, r1
 80071f2:	605a      	str	r2, [r3, #4]
 80071f4:	e019      	b.n	800722a <HAL_RCC_OscConfig+0x3d6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071f6:	4bb4      	ldr	r3, [pc, #720]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	4bb3      	ldr	r3, [pc, #716]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 80071fc:	49b4      	ldr	r1, [pc, #720]	@ (80074d0 <HAL_RCC_OscConfig+0x67c>)
 80071fe:	400a      	ands	r2, r1
 8007200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007202:	f7fe fdf9 	bl	8005df8 <HAL_GetTick>
 8007206:	0003      	movs	r3, r0
 8007208:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800720a:	e008      	b.n	800721e <HAL_RCC_OscConfig+0x3ca>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800720c:	f7fe fdf4 	bl	8005df8 <HAL_GetTick>
 8007210:	0002      	movs	r2, r0
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	2b02      	cmp	r3, #2
 8007218:	d901      	bls.n	800721e <HAL_RCC_OscConfig+0x3ca>
          {
            return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e237      	b.n	800768e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800721e:	4baa      	ldr	r3, [pc, #680]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	2380      	movs	r3, #128	@ 0x80
 8007224:	00db      	lsls	r3, r3, #3
 8007226:	4013      	ands	r3, r2
 8007228:	d1f0      	bne.n	800720c <HAL_RCC_OscConfig+0x3b8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2208      	movs	r2, #8
 8007230:	4013      	ands	r3, r2
 8007232:	d051      	beq.n	80072d8 <HAL_RCC_OscConfig+0x484>
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	695b      	ldr	r3, [r3, #20]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d031      	beq.n	80072a0 <HAL_RCC_OscConfig+0x44c>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d108      	bne.n	8007256 <HAL_RCC_OscConfig+0x402>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8007244:	4aa0      	ldr	r2, [pc, #640]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 8007246:	2394      	movs	r3, #148	@ 0x94
 8007248:	58d3      	ldr	r3, [r2, r3]
 800724a:	499f      	ldr	r1, [pc, #636]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 800724c:	2204      	movs	r2, #4
 800724e:	4393      	bics	r3, r2
 8007250:	2294      	movs	r2, #148	@ 0x94
 8007252:	508b      	str	r3, [r1, r2]
 8007254:	e007      	b.n	8007266 <HAL_RCC_OscConfig+0x412>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8007256:	4a9c      	ldr	r2, [pc, #624]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 8007258:	2394      	movs	r3, #148	@ 0x94
 800725a:	58d3      	ldr	r3, [r2, r3]
 800725c:	499a      	ldr	r1, [pc, #616]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 800725e:	2204      	movs	r2, #4
 8007260:	4313      	orrs	r3, r2
 8007262:	2294      	movs	r2, #148	@ 0x94
 8007264:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007266:	4a98      	ldr	r2, [pc, #608]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 8007268:	2394      	movs	r3, #148	@ 0x94
 800726a:	58d3      	ldr	r3, [r2, r3]
 800726c:	4996      	ldr	r1, [pc, #600]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 800726e:	2201      	movs	r2, #1
 8007270:	4313      	orrs	r3, r2
 8007272:	2294      	movs	r2, #148	@ 0x94
 8007274:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007276:	f7fe fdbf 	bl	8005df8 <HAL_GetTick>
 800727a:	0003      	movs	r3, r0
 800727c:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800727e:	e008      	b.n	8007292 <HAL_RCC_OscConfig+0x43e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007280:	f7fe fdba 	bl	8005df8 <HAL_GetTick>
 8007284:	0002      	movs	r2, r0
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	2b11      	cmp	r3, #17
 800728c:	d901      	bls.n	8007292 <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e1fd      	b.n	800768e <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007292:	4a8d      	ldr	r2, [pc, #564]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 8007294:	2394      	movs	r3, #148	@ 0x94
 8007296:	58d3      	ldr	r3, [r2, r3]
 8007298:	2202      	movs	r2, #2
 800729a:	4013      	ands	r3, r2
 800729c:	d0f0      	beq.n	8007280 <HAL_RCC_OscConfig+0x42c>
 800729e:	e01b      	b.n	80072d8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072a0:	4a89      	ldr	r2, [pc, #548]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 80072a2:	2394      	movs	r3, #148	@ 0x94
 80072a4:	58d3      	ldr	r3, [r2, r3]
 80072a6:	4988      	ldr	r1, [pc, #544]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 80072a8:	2201      	movs	r2, #1
 80072aa:	4393      	bics	r3, r2
 80072ac:	2294      	movs	r2, #148	@ 0x94
 80072ae:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072b0:	f7fe fda2 	bl	8005df8 <HAL_GetTick>
 80072b4:	0003      	movs	r3, r0
 80072b6:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80072b8:	e008      	b.n	80072cc <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072ba:	f7fe fd9d 	bl	8005df8 <HAL_GetTick>
 80072be:	0002      	movs	r2, r0
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	2b11      	cmp	r3, #17
 80072c6:	d901      	bls.n	80072cc <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80072c8:	2303      	movs	r3, #3
 80072ca:	e1e0      	b.n	800768e <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80072cc:	4a7e      	ldr	r2, [pc, #504]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 80072ce:	2394      	movs	r3, #148	@ 0x94
 80072d0:	58d3      	ldr	r3, [r2, r3]
 80072d2:	2202      	movs	r2, #2
 80072d4:	4013      	ands	r3, r2
 80072d6:	d1f0      	bne.n	80072ba <HAL_RCC_OscConfig+0x466>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2204      	movs	r2, #4
 80072de:	4013      	ands	r3, r2
 80072e0:	d100      	bne.n	80072e4 <HAL_RCC_OscConfig+0x490>
 80072e2:	e10d      	b.n	8007500 <HAL_RCC_OscConfig+0x6ac>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072e4:	201f      	movs	r0, #31
 80072e6:	183b      	adds	r3, r7, r0
 80072e8:	2200      	movs	r2, #0
 80072ea:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 80072ec:	4b76      	ldr	r3, [pc, #472]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 80072ee:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80072f0:	2380      	movs	r3, #128	@ 0x80
 80072f2:	055b      	lsls	r3, r3, #21
 80072f4:	4013      	ands	r3, r2
 80072f6:	d110      	bne.n	800731a <HAL_RCC_OscConfig+0x4c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072f8:	4b73      	ldr	r3, [pc, #460]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 80072fa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80072fc:	4b72      	ldr	r3, [pc, #456]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 80072fe:	2180      	movs	r1, #128	@ 0x80
 8007300:	0549      	lsls	r1, r1, #21
 8007302:	430a      	orrs	r2, r1
 8007304:	659a      	str	r2, [r3, #88]	@ 0x58
 8007306:	4b70      	ldr	r3, [pc, #448]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 8007308:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800730a:	2380      	movs	r3, #128	@ 0x80
 800730c:	055b      	lsls	r3, r3, #21
 800730e:	4013      	ands	r3, r2
 8007310:	60bb      	str	r3, [r7, #8]
 8007312:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007314:	183b      	adds	r3, r7, r0
 8007316:	2201      	movs	r2, #1
 8007318:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800731a:	4b6e      	ldr	r3, [pc, #440]	@ (80074d4 <HAL_RCC_OscConfig+0x680>)
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	2380      	movs	r3, #128	@ 0x80
 8007320:	005b      	lsls	r3, r3, #1
 8007322:	4013      	ands	r3, r2
 8007324:	d11a      	bne.n	800735c <HAL_RCC_OscConfig+0x508>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007326:	4b6b      	ldr	r3, [pc, #428]	@ (80074d4 <HAL_RCC_OscConfig+0x680>)
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	4b6a      	ldr	r3, [pc, #424]	@ (80074d4 <HAL_RCC_OscConfig+0x680>)
 800732c:	2180      	movs	r1, #128	@ 0x80
 800732e:	0049      	lsls	r1, r1, #1
 8007330:	430a      	orrs	r2, r1
 8007332:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007334:	f7fe fd60 	bl	8005df8 <HAL_GetTick>
 8007338:	0003      	movs	r3, r0
 800733a:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800733c:	e008      	b.n	8007350 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800733e:	f7fe fd5b 	bl	8005df8 <HAL_GetTick>
 8007342:	0002      	movs	r2, r0
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	2b02      	cmp	r3, #2
 800734a:	d901      	bls.n	8007350 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800734c:	2303      	movs	r3, #3
 800734e:	e19e      	b.n	800768e <HAL_RCC_OscConfig+0x83a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007350:	4b60      	ldr	r3, [pc, #384]	@ (80074d4 <HAL_RCC_OscConfig+0x680>)
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	2380      	movs	r3, #128	@ 0x80
 8007356:	005b      	lsls	r3, r3, #1
 8007358:	4013      	ands	r3, r2
 800735a:	d0f0      	beq.n	800733e <HAL_RCC_OscConfig+0x4ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	2201      	movs	r2, #1
 8007362:	4013      	ands	r3, r2
 8007364:	d01e      	beq.n	80073a4 <HAL_RCC_OscConfig+0x550>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	2204      	movs	r2, #4
 800736c:	4013      	ands	r3, r2
 800736e:	d010      	beq.n	8007392 <HAL_RCC_OscConfig+0x53e>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007370:	4a55      	ldr	r2, [pc, #340]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 8007372:	2390      	movs	r3, #144	@ 0x90
 8007374:	58d3      	ldr	r3, [r2, r3]
 8007376:	4954      	ldr	r1, [pc, #336]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 8007378:	2204      	movs	r2, #4
 800737a:	4313      	orrs	r3, r2
 800737c:	2290      	movs	r2, #144	@ 0x90
 800737e:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007380:	4a51      	ldr	r2, [pc, #324]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 8007382:	2390      	movs	r3, #144	@ 0x90
 8007384:	58d3      	ldr	r3, [r2, r3]
 8007386:	4950      	ldr	r1, [pc, #320]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 8007388:	2201      	movs	r2, #1
 800738a:	4313      	orrs	r3, r2
 800738c:	2290      	movs	r2, #144	@ 0x90
 800738e:	508b      	str	r3, [r1, r2]
 8007390:	e018      	b.n	80073c4 <HAL_RCC_OscConfig+0x570>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007392:	4a4d      	ldr	r2, [pc, #308]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 8007394:	2390      	movs	r3, #144	@ 0x90
 8007396:	58d3      	ldr	r3, [r2, r3]
 8007398:	494b      	ldr	r1, [pc, #300]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 800739a:	2201      	movs	r2, #1
 800739c:	4313      	orrs	r3, r2
 800739e:	2290      	movs	r2, #144	@ 0x90
 80073a0:	508b      	str	r3, [r1, r2]
 80073a2:	e00f      	b.n	80073c4 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80073a4:	4a48      	ldr	r2, [pc, #288]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 80073a6:	2390      	movs	r3, #144	@ 0x90
 80073a8:	58d3      	ldr	r3, [r2, r3]
 80073aa:	4947      	ldr	r1, [pc, #284]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 80073ac:	2201      	movs	r2, #1
 80073ae:	4393      	bics	r3, r2
 80073b0:	2290      	movs	r2, #144	@ 0x90
 80073b2:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80073b4:	4a44      	ldr	r2, [pc, #272]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 80073b6:	2390      	movs	r3, #144	@ 0x90
 80073b8:	58d3      	ldr	r3, [r2, r3]
 80073ba:	4943      	ldr	r1, [pc, #268]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 80073bc:	2204      	movs	r2, #4
 80073be:	4393      	bics	r3, r2
 80073c0:	2290      	movs	r2, #144	@ 0x90
 80073c2:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d04f      	beq.n	800746c <HAL_RCC_OscConfig+0x618>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073cc:	f7fe fd14 	bl	8005df8 <HAL_GetTick>
 80073d0:	0003      	movs	r3, r0
 80073d2:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073d4:	e009      	b.n	80073ea <HAL_RCC_OscConfig+0x596>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073d6:	f7fe fd0f 	bl	8005df8 <HAL_GetTick>
 80073da:	0002      	movs	r2, r0
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	4a3d      	ldr	r2, [pc, #244]	@ (80074d8 <HAL_RCC_OscConfig+0x684>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d901      	bls.n	80073ea <HAL_RCC_OscConfig+0x596>
        {
          return HAL_TIMEOUT;
 80073e6:	2303      	movs	r3, #3
 80073e8:	e151      	b.n	800768e <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073ea:	4a37      	ldr	r2, [pc, #220]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 80073ec:	2390      	movs	r3, #144	@ 0x90
 80073ee:	58d3      	ldr	r3, [r2, r3]
 80073f0:	2202      	movs	r2, #2
 80073f2:	4013      	ands	r3, r2
 80073f4:	d0ef      	beq.n	80073d6 <HAL_RCC_OscConfig+0x582>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	2280      	movs	r2, #128	@ 0x80
 80073fc:	4013      	ands	r3, r2
 80073fe:	d01a      	beq.n	8007436 <HAL_RCC_OscConfig+0x5e2>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007400:	4a31      	ldr	r2, [pc, #196]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 8007402:	2390      	movs	r3, #144	@ 0x90
 8007404:	58d3      	ldr	r3, [r2, r3]
 8007406:	4930      	ldr	r1, [pc, #192]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 8007408:	2280      	movs	r2, #128	@ 0x80
 800740a:	4313      	orrs	r3, r2
 800740c:	2290      	movs	r2, #144	@ 0x90
 800740e:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007410:	e009      	b.n	8007426 <HAL_RCC_OscConfig+0x5d2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007412:	f7fe fcf1 	bl	8005df8 <HAL_GetTick>
 8007416:	0002      	movs	r2, r0
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	4a2e      	ldr	r2, [pc, #184]	@ (80074d8 <HAL_RCC_OscConfig+0x684>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d901      	bls.n	8007426 <HAL_RCC_OscConfig+0x5d2>
          {
            return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e133      	b.n	800768e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007426:	4a28      	ldr	r2, [pc, #160]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 8007428:	2390      	movs	r3, #144	@ 0x90
 800742a:	58d2      	ldr	r2, [r2, r3]
 800742c:	2380      	movs	r3, #128	@ 0x80
 800742e:	011b      	lsls	r3, r3, #4
 8007430:	4013      	ands	r3, r2
 8007432:	d0ee      	beq.n	8007412 <HAL_RCC_OscConfig+0x5be>
 8007434:	e059      	b.n	80074ea <HAL_RCC_OscConfig+0x696>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007436:	4a24      	ldr	r2, [pc, #144]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 8007438:	2390      	movs	r3, #144	@ 0x90
 800743a:	58d3      	ldr	r3, [r2, r3]
 800743c:	4922      	ldr	r1, [pc, #136]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 800743e:	2280      	movs	r2, #128	@ 0x80
 8007440:	4393      	bics	r3, r2
 8007442:	2290      	movs	r2, #144	@ 0x90
 8007444:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007446:	e009      	b.n	800745c <HAL_RCC_OscConfig+0x608>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007448:	f7fe fcd6 	bl	8005df8 <HAL_GetTick>
 800744c:	0002      	movs	r2, r0
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	4a21      	ldr	r2, [pc, #132]	@ (80074d8 <HAL_RCC_OscConfig+0x684>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d901      	bls.n	800745c <HAL_RCC_OscConfig+0x608>
          {
            return HAL_TIMEOUT;
 8007458:	2303      	movs	r3, #3
 800745a:	e118      	b.n	800768e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800745c:	4a1a      	ldr	r2, [pc, #104]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 800745e:	2390      	movs	r3, #144	@ 0x90
 8007460:	58d2      	ldr	r2, [r2, r3]
 8007462:	2380      	movs	r3, #128	@ 0x80
 8007464:	011b      	lsls	r3, r3, #4
 8007466:	4013      	ands	r3, r2
 8007468:	d1ee      	bne.n	8007448 <HAL_RCC_OscConfig+0x5f4>
 800746a:	e03e      	b.n	80074ea <HAL_RCC_OscConfig+0x696>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800746c:	f7fe fcc4 	bl	8005df8 <HAL_GetTick>
 8007470:	0003      	movs	r3, r0
 8007472:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007474:	e009      	b.n	800748a <HAL_RCC_OscConfig+0x636>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007476:	f7fe fcbf 	bl	8005df8 <HAL_GetTick>
 800747a:	0002      	movs	r2, r0
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	1ad3      	subs	r3, r2, r3
 8007480:	4a15      	ldr	r2, [pc, #84]	@ (80074d8 <HAL_RCC_OscConfig+0x684>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d901      	bls.n	800748a <HAL_RCC_OscConfig+0x636>
        {
          return HAL_TIMEOUT;
 8007486:	2303      	movs	r3, #3
 8007488:	e101      	b.n	800768e <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800748a:	4a0f      	ldr	r2, [pc, #60]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 800748c:	2390      	movs	r3, #144	@ 0x90
 800748e:	58d3      	ldr	r3, [r2, r3]
 8007490:	2202      	movs	r2, #2
 8007492:	4013      	ands	r3, r2
 8007494:	d1ef      	bne.n	8007476 <HAL_RCC_OscConfig+0x622>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8007496:	4a0c      	ldr	r2, [pc, #48]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 8007498:	2390      	movs	r3, #144	@ 0x90
 800749a:	58d3      	ldr	r3, [r2, r3]
 800749c:	2280      	movs	r2, #128	@ 0x80
 800749e:	4013      	ands	r3, r2
 80074a0:	d023      	beq.n	80074ea <HAL_RCC_OscConfig+0x696>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80074a2:	4a09      	ldr	r2, [pc, #36]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 80074a4:	2390      	movs	r3, #144	@ 0x90
 80074a6:	58d3      	ldr	r3, [r2, r3]
 80074a8:	4907      	ldr	r1, [pc, #28]	@ (80074c8 <HAL_RCC_OscConfig+0x674>)
 80074aa:	2280      	movs	r2, #128	@ 0x80
 80074ac:	4393      	bics	r3, r2
 80074ae:	2290      	movs	r2, #144	@ 0x90
 80074b0:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80074b2:	e013      	b.n	80074dc <HAL_RCC_OscConfig+0x688>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074b4:	f7fe fca0 	bl	8005df8 <HAL_GetTick>
 80074b8:	0002      	movs	r2, r0
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	4a06      	ldr	r2, [pc, #24]	@ (80074d8 <HAL_RCC_OscConfig+0x684>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d90b      	bls.n	80074dc <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e0e2      	b.n	800768e <HAL_RCC_OscConfig+0x83a>
 80074c8:	40021000 	.word	0x40021000
 80074cc:	80ffffff 	.word	0x80ffffff
 80074d0:	fffffeff 	.word	0xfffffeff
 80074d4:	40007000 	.word	0x40007000
 80074d8:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80074dc:	4a6e      	ldr	r2, [pc, #440]	@ (8007698 <HAL_RCC_OscConfig+0x844>)
 80074de:	2390      	movs	r3, #144	@ 0x90
 80074e0:	58d2      	ldr	r2, [r2, r3]
 80074e2:	2380      	movs	r3, #128	@ 0x80
 80074e4:	011b      	lsls	r3, r3, #4
 80074e6:	4013      	ands	r3, r2
 80074e8:	d1e4      	bne.n	80074b4 <HAL_RCC_OscConfig+0x660>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80074ea:	231f      	movs	r3, #31
 80074ec:	18fb      	adds	r3, r7, r3
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d105      	bne.n	8007500 <HAL_RCC_OscConfig+0x6ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074f4:	4b68      	ldr	r3, [pc, #416]	@ (8007698 <HAL_RCC_OscConfig+0x844>)
 80074f6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80074f8:	4b67      	ldr	r3, [pc, #412]	@ (8007698 <HAL_RCC_OscConfig+0x844>)
 80074fa:	4968      	ldr	r1, [pc, #416]	@ (800769c <HAL_RCC_OscConfig+0x848>)
 80074fc:	400a      	ands	r2, r1
 80074fe:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
#if defined(RCC_CRRCR_HSI48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2220      	movs	r2, #32
 8007506:	4013      	ands	r3, r2
 8007508:	d03c      	beq.n	8007584 <HAL_RCC_OscConfig+0x730>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800750e:	2b00      	cmp	r3, #0
 8007510:	d01c      	beq.n	800754c <HAL_RCC_OscConfig+0x6f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007512:	4a61      	ldr	r2, [pc, #388]	@ (8007698 <HAL_RCC_OscConfig+0x844>)
 8007514:	2398      	movs	r3, #152	@ 0x98
 8007516:	58d3      	ldr	r3, [r2, r3]
 8007518:	495f      	ldr	r1, [pc, #380]	@ (8007698 <HAL_RCC_OscConfig+0x844>)
 800751a:	2201      	movs	r2, #1
 800751c:	4313      	orrs	r3, r2
 800751e:	2298      	movs	r2, #152	@ 0x98
 8007520:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007522:	f7fe fc69 	bl	8005df8 <HAL_GetTick>
 8007526:	0003      	movs	r3, r0
 8007528:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800752a:	e008      	b.n	800753e <HAL_RCC_OscConfig+0x6ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800752c:	f7fe fc64 	bl	8005df8 <HAL_GetTick>
 8007530:	0002      	movs	r2, r0
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	2b02      	cmp	r3, #2
 8007538:	d901      	bls.n	800753e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_TIMEOUT;
 800753a:	2303      	movs	r3, #3
 800753c:	e0a7      	b.n	800768e <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800753e:	4a56      	ldr	r2, [pc, #344]	@ (8007698 <HAL_RCC_OscConfig+0x844>)
 8007540:	2398      	movs	r3, #152	@ 0x98
 8007542:	58d3      	ldr	r3, [r2, r3]
 8007544:	2202      	movs	r2, #2
 8007546:	4013      	ands	r3, r2
 8007548:	d0f0      	beq.n	800752c <HAL_RCC_OscConfig+0x6d8>
 800754a:	e01b      	b.n	8007584 <HAL_RCC_OscConfig+0x730>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800754c:	4a52      	ldr	r2, [pc, #328]	@ (8007698 <HAL_RCC_OscConfig+0x844>)
 800754e:	2398      	movs	r3, #152	@ 0x98
 8007550:	58d3      	ldr	r3, [r2, r3]
 8007552:	4951      	ldr	r1, [pc, #324]	@ (8007698 <HAL_RCC_OscConfig+0x844>)
 8007554:	2201      	movs	r2, #1
 8007556:	4393      	bics	r3, r2
 8007558:	2298      	movs	r2, #152	@ 0x98
 800755a:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800755c:	f7fe fc4c 	bl	8005df8 <HAL_GetTick>
 8007560:	0003      	movs	r3, r0
 8007562:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 8007564:	e008      	b.n	8007578 <HAL_RCC_OscConfig+0x724>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007566:	f7fe fc47 	bl	8005df8 <HAL_GetTick>
 800756a:	0002      	movs	r2, r0
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	2b02      	cmp	r3, #2
 8007572:	d901      	bls.n	8007578 <HAL_RCC_OscConfig+0x724>
        {
          return HAL_TIMEOUT;
 8007574:	2303      	movs	r3, #3
 8007576:	e08a      	b.n	800768e <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 8007578:	4a47      	ldr	r2, [pc, #284]	@ (8007698 <HAL_RCC_OscConfig+0x844>)
 800757a:	2398      	movs	r3, #152	@ 0x98
 800757c:	58d3      	ldr	r3, [r2, r3]
 800757e:	2202      	movs	r2, #2
 8007580:	4013      	ands	r3, r2
 8007582:	d1f0      	bne.n	8007566 <HAL_RCC_OscConfig+0x712>
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007588:	2b00      	cmp	r3, #0
 800758a:	d100      	bne.n	800758e <HAL_RCC_OscConfig+0x73a>
 800758c:	e07e      	b.n	800768c <HAL_RCC_OscConfig+0x838>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800758e:	4b42      	ldr	r3, [pc, #264]	@ (8007698 <HAL_RCC_OscConfig+0x844>)
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	2238      	movs	r2, #56	@ 0x38
 8007594:	4013      	ands	r3, r2
 8007596:	2b18      	cmp	r3, #24
 8007598:	d100      	bne.n	800759c <HAL_RCC_OscConfig+0x748>
 800759a:	e075      	b.n	8007688 <HAL_RCC_OscConfig+0x834>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d156      	bne.n	8007652 <HAL_RCC_OscConfig+0x7fe>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075a4:	4b3c      	ldr	r3, [pc, #240]	@ (8007698 <HAL_RCC_OscConfig+0x844>)
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	4b3b      	ldr	r3, [pc, #236]	@ (8007698 <HAL_RCC_OscConfig+0x844>)
 80075aa:	493d      	ldr	r1, [pc, #244]	@ (80076a0 <HAL_RCC_OscConfig+0x84c>)
 80075ac:	400a      	ands	r2, r1
 80075ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075b0:	f7fe fc22 	bl	8005df8 <HAL_GetTick>
 80075b4:	0003      	movs	r3, r0
 80075b6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075b8:	e008      	b.n	80075cc <HAL_RCC_OscConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075ba:	f7fe fc1d 	bl	8005df8 <HAL_GetTick>
 80075be:	0002      	movs	r2, r0
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d901      	bls.n	80075cc <HAL_RCC_OscConfig+0x778>
          {
            return HAL_TIMEOUT;
 80075c8:	2303      	movs	r3, #3
 80075ca:	e060      	b.n	800768e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075cc:	4b32      	ldr	r3, [pc, #200]	@ (8007698 <HAL_RCC_OscConfig+0x844>)
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	2380      	movs	r3, #128	@ 0x80
 80075d2:	049b      	lsls	r3, r3, #18
 80075d4:	4013      	ands	r3, r2
 80075d6:	d1f0      	bne.n	80075ba <HAL_RCC_OscConfig+0x766>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80075d8:	4b2f      	ldr	r3, [pc, #188]	@ (8007698 <HAL_RCC_OscConfig+0x844>)
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	4a31      	ldr	r2, [pc, #196]	@ (80076a4 <HAL_RCC_OscConfig+0x850>)
 80075de:	4013      	ands	r3, r2
 80075e0:	0019      	movs	r1, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075ea:	431a      	orrs	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075f0:	021b      	lsls	r3, r3, #8
 80075f2:	431a      	orrs	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f8:	431a      	orrs	r2, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075fe:	431a      	orrs	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007604:	431a      	orrs	r2, r3
 8007606:	4b24      	ldr	r3, [pc, #144]	@ (8007698 <HAL_RCC_OscConfig+0x844>)
 8007608:	430a      	orrs	r2, r1
 800760a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 800760c:	4b22      	ldr	r3, [pc, #136]	@ (8007698 <HAL_RCC_OscConfig+0x844>)
 800760e:	68da      	ldr	r2, [r3, #12]
 8007610:	4b21      	ldr	r3, [pc, #132]	@ (8007698 <HAL_RCC_OscConfig+0x844>)
 8007612:	2180      	movs	r1, #128	@ 0x80
 8007614:	0549      	lsls	r1, r1, #21
 8007616:	430a      	orrs	r2, r1
 8007618:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800761a:	4b1f      	ldr	r3, [pc, #124]	@ (8007698 <HAL_RCC_OscConfig+0x844>)
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	4b1e      	ldr	r3, [pc, #120]	@ (8007698 <HAL_RCC_OscConfig+0x844>)
 8007620:	2180      	movs	r1, #128	@ 0x80
 8007622:	0449      	lsls	r1, r1, #17
 8007624:	430a      	orrs	r2, r1
 8007626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007628:	f7fe fbe6 	bl	8005df8 <HAL_GetTick>
 800762c:	0003      	movs	r3, r0
 800762e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007630:	e008      	b.n	8007644 <HAL_RCC_OscConfig+0x7f0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007632:	f7fe fbe1 	bl	8005df8 <HAL_GetTick>
 8007636:	0002      	movs	r2, r0
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	1ad3      	subs	r3, r2, r3
 800763c:	2b02      	cmp	r3, #2
 800763e:	d901      	bls.n	8007644 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8007640:	2303      	movs	r3, #3
 8007642:	e024      	b.n	800768e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007644:	4b14      	ldr	r3, [pc, #80]	@ (8007698 <HAL_RCC_OscConfig+0x844>)
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	2380      	movs	r3, #128	@ 0x80
 800764a:	049b      	lsls	r3, r3, #18
 800764c:	4013      	ands	r3, r2
 800764e:	d0f0      	beq.n	8007632 <HAL_RCC_OscConfig+0x7de>
 8007650:	e01c      	b.n	800768c <HAL_RCC_OscConfig+0x838>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007652:	4b11      	ldr	r3, [pc, #68]	@ (8007698 <HAL_RCC_OscConfig+0x844>)
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	4b10      	ldr	r3, [pc, #64]	@ (8007698 <HAL_RCC_OscConfig+0x844>)
 8007658:	4911      	ldr	r1, [pc, #68]	@ (80076a0 <HAL_RCC_OscConfig+0x84c>)
 800765a:	400a      	ands	r2, r1
 800765c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800765e:	f7fe fbcb 	bl	8005df8 <HAL_GetTick>
 8007662:	0003      	movs	r3, r0
 8007664:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007666:	e008      	b.n	800767a <HAL_RCC_OscConfig+0x826>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007668:	f7fe fbc6 	bl	8005df8 <HAL_GetTick>
 800766c:	0002      	movs	r2, r0
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	2b02      	cmp	r3, #2
 8007674:	d901      	bls.n	800767a <HAL_RCC_OscConfig+0x826>
          {
            return HAL_TIMEOUT;
 8007676:	2303      	movs	r3, #3
 8007678:	e009      	b.n	800768e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800767a:	4b07      	ldr	r3, [pc, #28]	@ (8007698 <HAL_RCC_OscConfig+0x844>)
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	2380      	movs	r3, #128	@ 0x80
 8007680:	049b      	lsls	r3, r3, #18
 8007682:	4013      	ands	r3, r2
 8007684:	d1f0      	bne.n	8007668 <HAL_RCC_OscConfig+0x814>
 8007686:	e001      	b.n	800768c <HAL_RCC_OscConfig+0x838>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e000      	b.n	800768e <HAL_RCC_OscConfig+0x83a>
    }
  }
  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	0018      	movs	r0, r3
 8007690:	46bd      	mov	sp, r7
 8007692:	b008      	add	sp, #32
 8007694:	bdb0      	pop	{r4, r5, r7, pc}
 8007696:	46c0      	nop			@ (mov r8, r8)
 8007698:	40021000 	.word	0x40021000
 800769c:	efffffff 	.word	0xefffffff
 80076a0:	feffffff 	.word	0xfeffffff
 80076a4:	11c1808c 	.word	0x11c1808c

080076a8 <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 80076a8:	b5b0      	push	{r4, r5, r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80076b2:	4b6c      	ldr	r3, [pc, #432]	@ (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2207      	movs	r2, #7
 80076b8:	4013      	ands	r3, r2
 80076ba:	683a      	ldr	r2, [r7, #0]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d911      	bls.n	80076e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076c0:	4b68      	ldr	r3, [pc, #416]	@ (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2207      	movs	r2, #7
 80076c6:	4393      	bics	r3, r2
 80076c8:	0019      	movs	r1, r3
 80076ca:	4b66      	ldr	r3, [pc, #408]	@ (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 80076cc:	683a      	ldr	r2, [r7, #0]
 80076ce:	430a      	orrs	r2, r1
 80076d0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076d2:	4b64      	ldr	r3, [pc, #400]	@ (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2207      	movs	r2, #7
 80076d8:	4013      	ands	r3, r2
 80076da:	683a      	ldr	r2, [r7, #0]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d001      	beq.n	80076e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e0bb      	b.n	800785c <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2201      	movs	r2, #1
 80076ea:	4013      	ands	r3, r2
 80076ec:	d100      	bne.n	80076f0 <HAL_RCC_ClockConfig+0x48>
 80076ee:	e064      	b.n	80077ba <HAL_RCC_ClockConfig+0x112>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	2b03      	cmp	r3, #3
 80076f6:	d107      	bne.n	8007708 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076f8:	4b5b      	ldr	r3, [pc, #364]	@ (8007868 <HAL_RCC_ClockConfig+0x1c0>)
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	2380      	movs	r3, #128	@ 0x80
 80076fe:	049b      	lsls	r3, r3, #18
 8007700:	4013      	ands	r3, r2
 8007702:	d138      	bne.n	8007776 <HAL_RCC_ClockConfig+0xce>
      {
        return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e0a9      	b.n	800785c <HAL_RCC_ClockConfig+0x1b4>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	2b02      	cmp	r3, #2
 800770e:	d107      	bne.n	8007720 <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007710:	4b55      	ldr	r3, [pc, #340]	@ (8007868 <HAL_RCC_ClockConfig+0x1c0>)
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	2380      	movs	r3, #128	@ 0x80
 8007716:	029b      	lsls	r3, r3, #10
 8007718:	4013      	ands	r3, r2
 800771a:	d12c      	bne.n	8007776 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	e09d      	b.n	800785c <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d106      	bne.n	8007736 <HAL_RCC_ClockConfig+0x8e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007728:	4b4f      	ldr	r3, [pc, #316]	@ (8007868 <HAL_RCC_ClockConfig+0x1c0>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2202      	movs	r2, #2
 800772e:	4013      	ands	r3, r2
 8007730:	d121      	bne.n	8007776 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e092      	b.n	800785c <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	2b01      	cmp	r3, #1
 800773c:	d107      	bne.n	800774e <HAL_RCC_ClockConfig+0xa6>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800773e:	4b4a      	ldr	r3, [pc, #296]	@ (8007868 <HAL_RCC_ClockConfig+0x1c0>)
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	2380      	movs	r3, #128	@ 0x80
 8007744:	00db      	lsls	r3, r3, #3
 8007746:	4013      	ands	r3, r2
 8007748:	d115      	bne.n	8007776 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e086      	b.n	800785c <HAL_RCC_ClockConfig+0x1b4>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	2b04      	cmp	r3, #4
 8007754:	d107      	bne.n	8007766 <HAL_RCC_ClockConfig+0xbe>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007756:	4a44      	ldr	r2, [pc, #272]	@ (8007868 <HAL_RCC_ClockConfig+0x1c0>)
 8007758:	2394      	movs	r3, #148	@ 0x94
 800775a:	58d3      	ldr	r3, [r2, r3]
 800775c:	2202      	movs	r2, #2
 800775e:	4013      	ands	r3, r2
 8007760:	d109      	bne.n	8007776 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e07a      	b.n	800785c <HAL_RCC_ClockConfig+0x1b4>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007766:	4a40      	ldr	r2, [pc, #256]	@ (8007868 <HAL_RCC_ClockConfig+0x1c0>)
 8007768:	2390      	movs	r3, #144	@ 0x90
 800776a:	58d3      	ldr	r3, [r2, r3]
 800776c:	2202      	movs	r2, #2
 800776e:	4013      	ands	r3, r2
 8007770:	d101      	bne.n	8007776 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e072      	b.n	800785c <HAL_RCC_ClockConfig+0x1b4>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007776:	4b3c      	ldr	r3, [pc, #240]	@ (8007868 <HAL_RCC_ClockConfig+0x1c0>)
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	2207      	movs	r2, #7
 800777c:	4393      	bics	r3, r2
 800777e:	0019      	movs	r1, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	685a      	ldr	r2, [r3, #4]
 8007784:	4b38      	ldr	r3, [pc, #224]	@ (8007868 <HAL_RCC_ClockConfig+0x1c0>)
 8007786:	430a      	orrs	r2, r1
 8007788:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800778a:	f7fe fb35 	bl	8005df8 <HAL_GetTick>
 800778e:	0003      	movs	r3, r0
 8007790:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007792:	e009      	b.n	80077a8 <HAL_RCC_ClockConfig+0x100>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007794:	f7fe fb30 	bl	8005df8 <HAL_GetTick>
 8007798:	0002      	movs	r2, r0
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	4a33      	ldr	r2, [pc, #204]	@ (800786c <HAL_RCC_ClockConfig+0x1c4>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d901      	bls.n	80077a8 <HAL_RCC_ClockConfig+0x100>
      {
        return HAL_TIMEOUT;
 80077a4:	2303      	movs	r3, #3
 80077a6:	e059      	b.n	800785c <HAL_RCC_ClockConfig+0x1b4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077a8:	4b2f      	ldr	r3, [pc, #188]	@ (8007868 <HAL_RCC_ClockConfig+0x1c0>)
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	2238      	movs	r2, #56	@ 0x38
 80077ae:	401a      	ands	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	00db      	lsls	r3, r3, #3
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d1ec      	bne.n	8007794 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2202      	movs	r2, #2
 80077c0:	4013      	ands	r3, r2
 80077c2:	d009      	beq.n	80077d8 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077c4:	4b28      	ldr	r3, [pc, #160]	@ (8007868 <HAL_RCC_ClockConfig+0x1c0>)
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	4a29      	ldr	r2, [pc, #164]	@ (8007870 <HAL_RCC_ClockConfig+0x1c8>)
 80077ca:	4013      	ands	r3, r2
 80077cc:	0019      	movs	r1, r3
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	689a      	ldr	r2, [r3, #8]
 80077d2:	4b25      	ldr	r3, [pc, #148]	@ (8007868 <HAL_RCC_ClockConfig+0x1c0>)
 80077d4:	430a      	orrs	r2, r1
 80077d6:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80077d8:	4b22      	ldr	r3, [pc, #136]	@ (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2207      	movs	r2, #7
 80077de:	4013      	ands	r3, r2
 80077e0:	683a      	ldr	r2, [r7, #0]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d211      	bcs.n	800780a <HAL_RCC_ClockConfig+0x162>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077e6:	4b1f      	ldr	r3, [pc, #124]	@ (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2207      	movs	r2, #7
 80077ec:	4393      	bics	r3, r2
 80077ee:	0019      	movs	r1, r3
 80077f0:	4b1c      	ldr	r3, [pc, #112]	@ (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	430a      	orrs	r2, r1
 80077f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077f8:	4b1a      	ldr	r3, [pc, #104]	@ (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2207      	movs	r2, #7
 80077fe:	4013      	ands	r3, r2
 8007800:	683a      	ldr	r2, [r7, #0]
 8007802:	429a      	cmp	r2, r3
 8007804:	d001      	beq.n	800780a <HAL_RCC_ClockConfig+0x162>
    {
      return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e028      	b.n	800785c <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2204      	movs	r2, #4
 8007810:	4013      	ands	r3, r2
 8007812:	d009      	beq.n	8007828 <HAL_RCC_ClockConfig+0x180>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007814:	4b14      	ldr	r3, [pc, #80]	@ (8007868 <HAL_RCC_ClockConfig+0x1c0>)
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	4a16      	ldr	r2, [pc, #88]	@ (8007874 <HAL_RCC_ClockConfig+0x1cc>)
 800781a:	4013      	ands	r3, r2
 800781c:	0019      	movs	r1, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68da      	ldr	r2, [r3, #12]
 8007822:	4b11      	ldr	r3, [pc, #68]	@ (8007868 <HAL_RCC_ClockConfig+0x1c0>)
 8007824:	430a      	orrs	r2, r1
 8007826:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8007828:	f000 f82a 	bl	8007880 <HAL_RCC_GetSysClockFreq>
 800782c:	0001      	movs	r1, r0
 800782e:	4b0e      	ldr	r3, [pc, #56]	@ (8007868 <HAL_RCC_ClockConfig+0x1c0>)
 8007830:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007832:	0a1b      	lsrs	r3, r3, #8
 8007834:	220f      	movs	r2, #15
 8007836:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8007838:	4a0f      	ldr	r2, [pc, #60]	@ (8007878 <HAL_RCC_ClockConfig+0x1d0>)
 800783a:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800783c:	001a      	movs	r2, r3
 800783e:	231f      	movs	r3, #31
 8007840:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8007842:	000a      	movs	r2, r1
 8007844:	40da      	lsrs	r2, r3
 8007846:	4b0d      	ldr	r3, [pc, #52]	@ (800787c <HAL_RCC_ClockConfig+0x1d4>)
 8007848:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 800784a:	250b      	movs	r5, #11
 800784c:	197c      	adds	r4, r7, r5
 800784e:	2003      	movs	r0, #3
 8007850:	f7fe fa78 	bl	8005d44 <HAL_InitTick>
 8007854:	0003      	movs	r3, r0
 8007856:	7023      	strb	r3, [r4, #0]

  return halstatus;
 8007858:	197b      	adds	r3, r7, r5
 800785a:	781b      	ldrb	r3, [r3, #0]
}
 800785c:	0018      	movs	r0, r3
 800785e:	46bd      	mov	sp, r7
 8007860:	b004      	add	sp, #16
 8007862:	bdb0      	pop	{r4, r5, r7, pc}
 8007864:	40022000 	.word	0x40022000
 8007868:	40021000 	.word	0x40021000
 800786c:	00001388 	.word	0x00001388
 8007870:	fffff0ff 	.word	0xfffff0ff
 8007874:	ffff8fff 	.word	0xffff8fff
 8007878:	08010030 	.word	0x08010030
 800787c:	20000004 	.word	0x20000004

08007880 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b08a      	sub	sp, #40	@ 0x28
 8007884:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8007886:	2300      	movs	r3, #0
 8007888:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 800788a:	2300      	movs	r3, #0
 800788c:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800788e:	4b46      	ldr	r3, [pc, #280]	@ (80079a8 <HAL_RCC_GetSysClockFreq+0x128>)
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	2238      	movs	r2, #56	@ 0x38
 8007894:	4013      	ands	r3, r2
 8007896:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007898:	4b43      	ldr	r3, [pc, #268]	@ (80079a8 <HAL_RCC_GetSysClockFreq+0x128>)
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	2203      	movs	r2, #3
 800789e:	4013      	ands	r3, r2
 80078a0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d005      	beq.n	80078b4 <HAL_RCC_GetSysClockFreq+0x34>
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	2b18      	cmp	r3, #24
 80078ac:	d125      	bne.n	80078fa <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d122      	bne.n	80078fa <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80078b4:	4b3c      	ldr	r3, [pc, #240]	@ (80079a8 <HAL_RCC_GetSysClockFreq+0x128>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2208      	movs	r2, #8
 80078ba:	4013      	ands	r3, r2
 80078bc:	d107      	bne.n	80078ce <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 80078be:	4a3a      	ldr	r2, [pc, #232]	@ (80079a8 <HAL_RCC_GetSysClockFreq+0x128>)
 80078c0:	2394      	movs	r3, #148	@ 0x94
 80078c2:	58d3      	ldr	r3, [r2, r3]
 80078c4:	0a1b      	lsrs	r3, r3, #8
 80078c6:	220f      	movs	r2, #15
 80078c8:	4013      	ands	r3, r2
 80078ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80078cc:	e005      	b.n	80078da <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80078ce:	4b36      	ldr	r3, [pc, #216]	@ (80079a8 <HAL_RCC_GetSysClockFreq+0x128>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	091b      	lsrs	r3, r3, #4
 80078d4:	220f      	movs	r2, #15
 80078d6:	4013      	ands	r3, r2
 80078d8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 80078da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078dc:	2b0b      	cmp	r3, #11
 80078de:	d901      	bls.n	80078e4 <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 80078e0:	2300      	movs	r3, #0
 80078e2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 80078e4:	4b31      	ldr	r3, [pc, #196]	@ (80079ac <HAL_RCC_GetSysClockFreq+0x12c>)
 80078e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078e8:	0092      	lsls	r2, r2, #2
 80078ea:	58d3      	ldr	r3, [r2, r3]
 80078ec:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d11b      	bne.n	800792c <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80078f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80078f8:	e018      	b.n	800792c <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	2b08      	cmp	r3, #8
 80078fe:	d102      	bne.n	8007906 <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007900:	4b2b      	ldr	r3, [pc, #172]	@ (80079b0 <HAL_RCC_GetSysClockFreq+0x130>)
 8007902:	623b      	str	r3, [r7, #32]
 8007904:	e012      	b.n	800792c <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	2b10      	cmp	r3, #16
 800790a:	d102      	bne.n	8007912 <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800790c:	4b29      	ldr	r3, [pc, #164]	@ (80079b4 <HAL_RCC_GetSysClockFreq+0x134>)
 800790e:	623b      	str	r3, [r7, #32]
 8007910:	e00c      	b.n	800792c <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	2b20      	cmp	r3, #32
 8007916:	d103      	bne.n	8007920 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8007918:	23fa      	movs	r3, #250	@ 0xfa
 800791a:	01db      	lsls	r3, r3, #7
 800791c:	623b      	str	r3, [r7, #32]
 800791e:	e005      	b.n	800792c <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	2b28      	cmp	r3, #40	@ 0x28
 8007924:	d102      	bne.n	800792c <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8007926:	2380      	movs	r3, #128	@ 0x80
 8007928:	021b      	lsls	r3, r3, #8
 800792a:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	2b18      	cmp	r3, #24
 8007930:	d135      	bne.n	800799e <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007932:	4b1d      	ldr	r3, [pc, #116]	@ (80079a8 <HAL_RCC_GetSysClockFreq+0x128>)
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	2203      	movs	r2, #3
 8007938:	4013      	ands	r3, r2
 800793a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800793c:	4b1a      	ldr	r3, [pc, #104]	@ (80079a8 <HAL_RCC_GetSysClockFreq+0x128>)
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	091b      	lsrs	r3, r3, #4
 8007942:	2207      	movs	r2, #7
 8007944:	4013      	ands	r3, r2
 8007946:	3301      	adds	r3, #1
 8007948:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	2b02      	cmp	r3, #2
 800794e:	d003      	beq.n	8007958 <HAL_RCC_GetSysClockFreq+0xd8>
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	2b03      	cmp	r3, #3
 8007954:	d003      	beq.n	800795e <HAL_RCC_GetSysClockFreq+0xde>
 8007956:	e005      	b.n	8007964 <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 8007958:	4b15      	ldr	r3, [pc, #84]	@ (80079b0 <HAL_RCC_GetSysClockFreq+0x130>)
 800795a:	61fb      	str	r3, [r7, #28]
        break;
 800795c:	e005      	b.n	800796a <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 800795e:	4b15      	ldr	r3, [pc, #84]	@ (80079b4 <HAL_RCC_GetSysClockFreq+0x134>)
 8007960:	61fb      	str	r3, [r7, #28]
        break;
 8007962:	e002      	b.n	800796a <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 8007964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007966:	61fb      	str	r3, [r7, #28]
        break;
 8007968:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 800796a:	4b0f      	ldr	r3, [pc, #60]	@ (80079a8 <HAL_RCC_GetSysClockFreq+0x128>)
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	0a1b      	lsrs	r3, r3, #8
 8007970:	227f      	movs	r2, #127	@ 0x7f
 8007972:	4013      	ands	r3, r2
 8007974:	69fa      	ldr	r2, [r7, #28]
 8007976:	4353      	muls	r3, r2
 8007978:	68f9      	ldr	r1, [r7, #12]
 800797a:	0018      	movs	r0, r3
 800797c:	f7f8 fbe0 	bl	8000140 <__udivsi3>
 8007980:	0003      	movs	r3, r0
 8007982:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8007984:	4b08      	ldr	r3, [pc, #32]	@ (80079a8 <HAL_RCC_GetSysClockFreq+0x128>)
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	0f5b      	lsrs	r3, r3, #29
 800798a:	2207      	movs	r2, #7
 800798c:	4013      	ands	r3, r2
 800798e:	3301      	adds	r3, #1
 8007990:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8007992:	6879      	ldr	r1, [r7, #4]
 8007994:	68b8      	ldr	r0, [r7, #8]
 8007996:	f7f8 fbd3 	bl	8000140 <__udivsi3>
 800799a:	0003      	movs	r3, r0
 800799c:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800799e:	6a3b      	ldr	r3, [r7, #32]
}
 80079a0:	0018      	movs	r0, r3
 80079a2:	46bd      	mov	sp, r7
 80079a4:	b00a      	add	sp, #40	@ 0x28
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	40021000 	.word	0x40021000
 80079ac:	08010048 	.word	0x08010048
 80079b0:	00f42400 	.word	0x00f42400
 80079b4:	003d0900 	.word	0x003d0900

080079b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80079bc:	4b02      	ldr	r3, [pc, #8]	@ (80079c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80079be:	681b      	ldr	r3, [r3, #0]
}
 80079c0:	0018      	movs	r0, r3
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	46c0      	nop			@ (mov r8, r8)
 80079c8:	20000004 	.word	0x20000004

080079cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 80079d0:	f7ff fff2 	bl	80079b8 <HAL_RCC_GetHCLKFreq>
 80079d4:	0001      	movs	r1, r0
 80079d6:	4b07      	ldr	r3, [pc, #28]	@ (80079f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	0b1b      	lsrs	r3, r3, #12
 80079dc:	2207      	movs	r2, #7
 80079de:	4013      	ands	r3, r2
 80079e0:	4a05      	ldr	r2, [pc, #20]	@ (80079f8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80079e2:	5cd3      	ldrb	r3, [r2, r3]
 80079e4:	001a      	movs	r2, r3
 80079e6:	231f      	movs	r3, #31
 80079e8:	4013      	ands	r3, r2
 80079ea:	40d9      	lsrs	r1, r3
 80079ec:	000b      	movs	r3, r1
}
 80079ee:	0018      	movs	r0, r3
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	40021000 	.word	0x40021000
 80079f8:	08010040 	.word	0x08010040

080079fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b086      	sub	sp, #24
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007a04:	2300      	movs	r3, #0
 8007a06:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007a08:	4b2f      	ldr	r3, [pc, #188]	@ (8007ac8 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007a0a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007a0c:	2380      	movs	r3, #128	@ 0x80
 8007a0e:	055b      	lsls	r3, r3, #21
 8007a10:	4013      	ands	r3, r2
 8007a12:	d004      	beq.n	8007a1e <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007a14:	f7ff fa12 	bl	8006e3c <HAL_PWREx_GetVoltageRange>
 8007a18:	0003      	movs	r3, r0
 8007a1a:	617b      	str	r3, [r7, #20]
 8007a1c:	e017      	b.n	8007a4e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a1e:	4b2a      	ldr	r3, [pc, #168]	@ (8007ac8 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007a20:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007a22:	4b29      	ldr	r3, [pc, #164]	@ (8007ac8 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007a24:	2180      	movs	r1, #128	@ 0x80
 8007a26:	0549      	lsls	r1, r1, #21
 8007a28:	430a      	orrs	r2, r1
 8007a2a:	659a      	str	r2, [r3, #88]	@ 0x58
 8007a2c:	4b26      	ldr	r3, [pc, #152]	@ (8007ac8 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007a2e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007a30:	2380      	movs	r3, #128	@ 0x80
 8007a32:	055b      	lsls	r3, r3, #21
 8007a34:	4013      	ands	r3, r2
 8007a36:	60fb      	str	r3, [r7, #12]
 8007a38:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007a3a:	f7ff f9ff 	bl	8006e3c <HAL_PWREx_GetVoltageRange>
 8007a3e:	0003      	movs	r3, r0
 8007a40:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007a42:	4b21      	ldr	r3, [pc, #132]	@ (8007ac8 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007a44:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007a46:	4b20      	ldr	r3, [pc, #128]	@ (8007ac8 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007a48:	4920      	ldr	r1, [pc, #128]	@ (8007acc <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 8007a4a:	400a      	ands	r2, r1
 8007a4c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	2380      	movs	r3, #128	@ 0x80
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d111      	bne.n	8007a7c <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2b80      	cmp	r3, #128	@ 0x80
 8007a5c:	d91c      	bls.n	8007a98 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2bb0      	cmp	r3, #176	@ 0xb0
 8007a62:	d902      	bls.n	8007a6a <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007a64:	2302      	movs	r3, #2
 8007a66:	613b      	str	r3, [r7, #16]
 8007a68:	e016      	b.n	8007a98 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2b90      	cmp	r3, #144	@ 0x90
 8007a6e:	d902      	bls.n	8007a76 <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007a70:	2301      	movs	r3, #1
 8007a72:	613b      	str	r3, [r7, #16]
 8007a74:	e010      	b.n	8007a98 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 8007a76:	2300      	movs	r3, #0
 8007a78:	613b      	str	r3, [r7, #16]
 8007a7a:	e00d      	b.n	8007a98 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007a80:	d902      	bls.n	8007a88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 8007a82:	2302      	movs	r3, #2
 8007a84:	613b      	str	r3, [r7, #16]
 8007a86:	e007      	b.n	8007a98 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2b70      	cmp	r3, #112	@ 0x70
 8007a8c:	d102      	bne.n	8007a94 <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8007a8e:	2301      	movs	r3, #1
 8007a90:	613b      	str	r3, [r7, #16]
 8007a92:	e001      	b.n	8007a98 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8007a94:	2300      	movs	r3, #0
 8007a96:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007a98:	4b0d      	ldr	r3, [pc, #52]	@ (8007ad0 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2207      	movs	r2, #7
 8007a9e:	4393      	bics	r3, r2
 8007aa0:	0019      	movs	r1, r3
 8007aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8007ad0 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8007aa4:	693a      	ldr	r2, [r7, #16]
 8007aa6:	430a      	orrs	r2, r1
 8007aa8:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8007aaa:	4b09      	ldr	r3, [pc, #36]	@ (8007ad0 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2207      	movs	r2, #7
 8007ab0:	4013      	ands	r3, r2
 8007ab2:	693a      	ldr	r2, [r7, #16]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d001      	beq.n	8007abc <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e000      	b.n	8007abe <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	0018      	movs	r0, r3
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	b006      	add	sp, #24
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	46c0      	nop			@ (mov r8, r8)
 8007ac8:	40021000 	.word	0x40021000
 8007acc:	efffffff 	.word	0xefffffff
 8007ad0:	40022000 	.word	0x40022000

08007ad4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b086      	sub	sp, #24
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007adc:	2313      	movs	r3, #19
 8007ade:	18fb      	adds	r3, r7, r3
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007ae4:	2312      	movs	r3, #18
 8007ae6:	18fb      	adds	r3, r7, r3
 8007ae8:	2200      	movs	r2, #0
 8007aea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	2380      	movs	r3, #128	@ 0x80
 8007af2:	021b      	lsls	r3, r3, #8
 8007af4:	4013      	ands	r3, r2
 8007af6:	d100      	bne.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x26>
 8007af8:	e0b7      	b.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007afa:	2011      	movs	r0, #17
 8007afc:	183b      	adds	r3, r7, r0
 8007afe:	2200      	movs	r2, #0
 8007b00:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b02:	4b4c      	ldr	r3, [pc, #304]	@ (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b04:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007b06:	2380      	movs	r3, #128	@ 0x80
 8007b08:	055b      	lsls	r3, r3, #21
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	d110      	bne.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b0e:	4b49      	ldr	r3, [pc, #292]	@ (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b10:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007b12:	4b48      	ldr	r3, [pc, #288]	@ (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b14:	2180      	movs	r1, #128	@ 0x80
 8007b16:	0549      	lsls	r1, r1, #21
 8007b18:	430a      	orrs	r2, r1
 8007b1a:	659a      	str	r2, [r3, #88]	@ 0x58
 8007b1c:	4b45      	ldr	r3, [pc, #276]	@ (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b1e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007b20:	2380      	movs	r3, #128	@ 0x80
 8007b22:	055b      	lsls	r3, r3, #21
 8007b24:	4013      	ands	r3, r2
 8007b26:	60bb      	str	r3, [r7, #8]
 8007b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b2a:	183b      	adds	r3, r7, r0
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b30:	4b41      	ldr	r3, [pc, #260]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	4b40      	ldr	r3, [pc, #256]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007b36:	2180      	movs	r1, #128	@ 0x80
 8007b38:	0049      	lsls	r1, r1, #1
 8007b3a:	430a      	orrs	r2, r1
 8007b3c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b3e:	f7fe f95b 	bl	8005df8 <HAL_GetTick>
 8007b42:	0003      	movs	r3, r0
 8007b44:	60fb      	str	r3, [r7, #12]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007b46:	e00b      	b.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b48:	f7fe f956 	bl	8005df8 <HAL_GetTick>
 8007b4c:	0002      	movs	r2, r0
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	1ad3      	subs	r3, r2, r3
 8007b52:	2b02      	cmp	r3, #2
 8007b54:	d904      	bls.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8007b56:	2313      	movs	r3, #19
 8007b58:	18fb      	adds	r3, r7, r3
 8007b5a:	2203      	movs	r2, #3
 8007b5c:	701a      	strb	r2, [r3, #0]
        break;
 8007b5e:	e005      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007b60:	4b35      	ldr	r3, [pc, #212]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	2380      	movs	r3, #128	@ 0x80
 8007b66:	005b      	lsls	r3, r3, #1
 8007b68:	4013      	ands	r3, r2
 8007b6a:	d0ed      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8007b6c:	2313      	movs	r3, #19
 8007b6e:	18fb      	adds	r3, r7, r3
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d168      	bne.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007b76:	4a2f      	ldr	r2, [pc, #188]	@ (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b78:	2390      	movs	r3, #144	@ 0x90
 8007b7a:	58d2      	ldr	r2, [r2, r3]
 8007b7c:	23c0      	movs	r3, #192	@ 0xc0
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	4013      	ands	r3, r2
 8007b82:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d01f      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b8e:	697a      	ldr	r2, [r7, #20]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d01a      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0xf6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007b94:	4a27      	ldr	r2, [pc, #156]	@ (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b96:	2390      	movs	r3, #144	@ 0x90
 8007b98:	58d3      	ldr	r3, [r2, r3]
 8007b9a:	4a28      	ldr	r2, [pc, #160]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007ba0:	4a24      	ldr	r2, [pc, #144]	@ (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ba2:	2390      	movs	r3, #144	@ 0x90
 8007ba4:	58d3      	ldr	r3, [r2, r3]
 8007ba6:	4923      	ldr	r1, [pc, #140]	@ (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ba8:	2280      	movs	r2, #128	@ 0x80
 8007baa:	0252      	lsls	r2, r2, #9
 8007bac:	4313      	orrs	r3, r2
 8007bae:	2290      	movs	r2, #144	@ 0x90
 8007bb0:	508b      	str	r3, [r1, r2]
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007bb2:	4a20      	ldr	r2, [pc, #128]	@ (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bb4:	2390      	movs	r3, #144	@ 0x90
 8007bb6:	58d3      	ldr	r3, [r2, r3]
 8007bb8:	491e      	ldr	r1, [pc, #120]	@ (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bba:	4a21      	ldr	r2, [pc, #132]	@ (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	2290      	movs	r2, #144	@ 0x90
 8007bc0:	508b      	str	r3, [r1, r2]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007bc2:	491c      	ldr	r1, [pc, #112]	@ (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bc4:	2290      	movs	r2, #144	@ 0x90
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	508b      	str	r3, [r1, r2]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	4013      	ands	r3, r2
 8007bd0:	d017      	beq.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x12e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bd2:	f7fe f911 	bl	8005df8 <HAL_GetTick>
 8007bd6:	0003      	movs	r3, r0
 8007bd8:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bda:	e00c      	b.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bdc:	f7fe f90c 	bl	8005df8 <HAL_GetTick>
 8007be0:	0002      	movs	r2, r0
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	4a17      	ldr	r2, [pc, #92]	@ (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d904      	bls.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x122>
          {
            ret = HAL_TIMEOUT;
 8007bec:	2313      	movs	r3, #19
 8007bee:	18fb      	adds	r3, r7, r3
 8007bf0:	2203      	movs	r2, #3
 8007bf2:	701a      	strb	r2, [r3, #0]
            break;
 8007bf4:	e005      	b.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x12e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bf6:	4a0f      	ldr	r2, [pc, #60]	@ (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bf8:	2390      	movs	r3, #144	@ 0x90
 8007bfa:	58d3      	ldr	r3, [r2, r3]
 8007bfc:	2202      	movs	r2, #2
 8007bfe:	4013      	ands	r3, r2
 8007c00:	d0ec      	beq.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x108>
          }
        }
      }

      if (ret == HAL_OK)
 8007c02:	2313      	movs	r3, #19
 8007c04:	18fb      	adds	r3, r7, r3
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d10b      	bne.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c0c:	4a09      	ldr	r2, [pc, #36]	@ (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c0e:	2390      	movs	r3, #144	@ 0x90
 8007c10:	58d3      	ldr	r3, [r2, r3]
 8007c12:	4a0a      	ldr	r2, [pc, #40]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007c14:	401a      	ands	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c1a:	4906      	ldr	r1, [pc, #24]	@ (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	2290      	movs	r2, #144	@ 0x90
 8007c20:	508b      	str	r3, [r1, r2]
 8007c22:	e017      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c24:	2312      	movs	r3, #18
 8007c26:	18fb      	adds	r3, r7, r3
 8007c28:	2213      	movs	r2, #19
 8007c2a:	18ba      	adds	r2, r7, r2
 8007c2c:	7812      	ldrb	r2, [r2, #0]
 8007c2e:	701a      	strb	r2, [r3, #0]
 8007c30:	e010      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007c32:	46c0      	nop			@ (mov r8, r8)
 8007c34:	40021000 	.word	0x40021000
 8007c38:	40007000 	.word	0x40007000
 8007c3c:	fffffcff 	.word	0xfffffcff
 8007c40:	fffeffff 	.word	0xfffeffff
 8007c44:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c48:	2312      	movs	r3, #18
 8007c4a:	18fb      	adds	r3, r7, r3
 8007c4c:	2213      	movs	r2, #19
 8007c4e:	18ba      	adds	r2, r7, r2
 8007c50:	7812      	ldrb	r2, [r2, #0]
 8007c52:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007c54:	2311      	movs	r3, #17
 8007c56:	18fb      	adds	r3, r7, r3
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d105      	bne.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c5e:	4ba4      	ldr	r3, [pc, #656]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007c60:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007c62:	4ba3      	ldr	r3, [pc, #652]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007c64:	49a3      	ldr	r1, [pc, #652]	@ (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8007c66:	400a      	ands	r2, r1
 8007c68:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	4013      	ands	r3, r2
 8007c72:	d00b      	beq.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c74:	4a9e      	ldr	r2, [pc, #632]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007c76:	2388      	movs	r3, #136	@ 0x88
 8007c78:	58d3      	ldr	r3, [r2, r3]
 8007c7a:	2203      	movs	r2, #3
 8007c7c:	4393      	bics	r3, r2
 8007c7e:	001a      	movs	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	499a      	ldr	r1, [pc, #616]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007c86:	4313      	orrs	r3, r2
 8007c88:	2288      	movs	r2, #136	@ 0x88
 8007c8a:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2202      	movs	r2, #2
 8007c92:	4013      	ands	r3, r2
 8007c94:	d00b      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007c96:	4a96      	ldr	r2, [pc, #600]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007c98:	2388      	movs	r3, #136	@ 0x88
 8007c9a:	58d3      	ldr	r3, [r2, r3]
 8007c9c:	220c      	movs	r2, #12
 8007c9e:	4393      	bics	r3, r2
 8007ca0:	001a      	movs	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	4992      	ldr	r1, [pc, #584]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	2288      	movs	r2, #136	@ 0x88
 8007cac:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2210      	movs	r2, #16
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	d00a      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007cb8:	4a8d      	ldr	r2, [pc, #564]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007cba:	2388      	movs	r3, #136	@ 0x88
 8007cbc:	58d3      	ldr	r3, [r2, r3]
 8007cbe:	4a8e      	ldr	r2, [pc, #568]	@ (8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8007cc0:	401a      	ands	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	695b      	ldr	r3, [r3, #20]
 8007cc6:	498a      	ldr	r1, [pc, #552]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	2288      	movs	r2, #136	@ 0x88
 8007ccc:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2208      	movs	r2, #8
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	d00a      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8007cd8:	4a85      	ldr	r2, [pc, #532]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007cda:	2388      	movs	r3, #136	@ 0x88
 8007cdc:	58d3      	ldr	r3, [r2, r3]
 8007cde:	4a87      	ldr	r2, [pc, #540]	@ (8007efc <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8007ce0:	401a      	ands	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	4982      	ldr	r1, [pc, #520]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	2288      	movs	r2, #136	@ 0x88
 8007cec:	508b      	str	r3, [r1, r2]
  }
#if defined (LPUART3)
  /*-------------------------- LPUART3 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART3) == RCC_PERIPHCLK_LPUART3)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2204      	movs	r2, #4
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	d00b      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART3CLKSOURCE(PeriphClkInit->Lpuart3ClockSelection));

    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
 8007cf8:	4a7d      	ldr	r2, [pc, #500]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007cfa:	2388      	movs	r3, #136	@ 0x88
 8007cfc:	58d3      	ldr	r3, [r2, r3]
 8007cfe:	22c0      	movs	r2, #192	@ 0xc0
 8007d00:	4393      	bics	r3, r2
 8007d02:	001a      	movs	r2, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	4979      	ldr	r1, [pc, #484]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	2288      	movs	r2, #136	@ 0x88
 8007d0e:	508b      	str	r3, [r1, r2]
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2220      	movs	r2, #32
 8007d16:	4013      	ands	r3, r2
 8007d18:	d00a      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007d1a:	4a75      	ldr	r2, [pc, #468]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d1c:	2388      	movs	r3, #136	@ 0x88
 8007d1e:	58d3      	ldr	r3, [r2, r3]
 8007d20:	4a77      	ldr	r2, [pc, #476]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d22:	401a      	ands	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	699b      	ldr	r3, [r3, #24]
 8007d28:	4971      	ldr	r1, [pc, #452]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	2288      	movs	r2, #136	@ 0x88
 8007d2e:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2240      	movs	r2, #64	@ 0x40
 8007d36:	4013      	ands	r3, r2
 8007d38:	d00a      	beq.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007d3a:	4a6d      	ldr	r2, [pc, #436]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d3c:	2388      	movs	r3, #136	@ 0x88
 8007d3e:	58d3      	ldr	r3, [r2, r3]
 8007d40:	4a70      	ldr	r2, [pc, #448]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8007d42:	401a      	ands	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	69db      	ldr	r3, [r3, #28]
 8007d48:	4969      	ldr	r1, [pc, #420]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	2288      	movs	r2, #136	@ 0x88
 8007d4e:	508b      	str	r3, [r1, r2]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2280      	movs	r2, #128	@ 0x80
 8007d56:	4013      	ands	r3, r2
 8007d58:	d00a      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d5a:	4a65      	ldr	r2, [pc, #404]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d5c:	2388      	movs	r3, #136	@ 0x88
 8007d5e:	58d3      	ldr	r3, [r2, r3]
 8007d60:	4a69      	ldr	r2, [pc, #420]	@ (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8007d62:	401a      	ands	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a1b      	ldr	r3, [r3, #32]
 8007d68:	4961      	ldr	r1, [pc, #388]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	2288      	movs	r2, #136	@ 0x88
 8007d6e:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	2380      	movs	r3, #128	@ 0x80
 8007d76:	005b      	lsls	r3, r3, #1
 8007d78:	4013      	ands	r3, r2
 8007d7a:	d00a      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007d7c:	4a5c      	ldr	r2, [pc, #368]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d7e:	2388      	movs	r3, #136	@ 0x88
 8007d80:	58d3      	ldr	r3, [r2, r3]
 8007d82:	4a62      	ldr	r2, [pc, #392]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007d84:	401a      	ands	r2, r3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d8a:	4959      	ldr	r1, [pc, #356]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	2288      	movs	r2, #136	@ 0x88
 8007d90:	508b      	str	r3, [r1, r2]
  }
#if defined (LPTIM3)
  /*----------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	2380      	movs	r3, #128	@ 0x80
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	d00a      	beq.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8007d9e:	4a54      	ldr	r2, [pc, #336]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007da0:	2388      	movs	r3, #136	@ 0x88
 8007da2:	58d3      	ldr	r3, [r2, r3]
 8007da4:	4a5a      	ldr	r2, [pc, #360]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8007da6:	401a      	ands	r2, r3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dac:	4950      	ldr	r1, [pc, #320]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007dae:	4313      	orrs	r3, r2
 8007db0:	2288      	movs	r2, #136	@ 0x88
 8007db2:	508b      	str	r3, [r1, r2]
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	2380      	movs	r3, #128	@ 0x80
 8007dba:	01db      	lsls	r3, r3, #7
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	d017      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007dc4:	2380      	movs	r3, #128	@ 0x80
 8007dc6:	055b      	lsls	r3, r3, #21
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d106      	bne.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x306>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 8007dcc:	4b48      	ldr	r3, [pc, #288]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007dce:	68da      	ldr	r2, [r3, #12]
 8007dd0:	4b47      	ldr	r3, [pc, #284]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007dd2:	2180      	movs	r1, #128	@ 0x80
 8007dd4:	0249      	lsls	r1, r1, #9
 8007dd6:	430a      	orrs	r2, r1
 8007dd8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007dda:	4a45      	ldr	r2, [pc, #276]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007ddc:	2388      	movs	r3, #136	@ 0x88
 8007dde:	58d3      	ldr	r3, [r2, r3]
 8007de0:	4a4c      	ldr	r2, [pc, #304]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x440>)
 8007de2:	401a      	ands	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007de8:	4941      	ldr	r1, [pc, #260]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007dea:	4313      	orrs	r3, r2
 8007dec:	2288      	movs	r2, #136	@ 0x88
 8007dee:	508b      	str	r3, [r1, r2]
  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	2380      	movs	r3, #128	@ 0x80
 8007df6:	015b      	lsls	r3, r3, #5
 8007df8:	4013      	ands	r3, r2
 8007dfa:	d017      	beq.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLQ)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e00:	2380      	movs	r3, #128	@ 0x80
 8007e02:	051b      	lsls	r3, r3, #20
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d106      	bne.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8007e08:	4b39      	ldr	r3, [pc, #228]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e0a:	68da      	ldr	r2, [r3, #12]
 8007e0c:	4b38      	ldr	r3, [pc, #224]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e0e:	2180      	movs	r1, #128	@ 0x80
 8007e10:	0449      	lsls	r1, r1, #17
 8007e12:	430a      	orrs	r2, r1
 8007e14:	60da      	str	r2, [r3, #12]
    }
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007e16:	4a36      	ldr	r2, [pc, #216]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e18:	2388      	movs	r3, #136	@ 0x88
 8007e1a:	58d3      	ldr	r3, [r2, r3]
 8007e1c:	4a3e      	ldr	r2, [pc, #248]	@ (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007e1e:	401a      	ands	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e24:	4932      	ldr	r1, [pc, #200]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e26:	4313      	orrs	r3, r2
 8007e28:	2288      	movs	r2, #136	@ 0x88
 8007e2a:	508b      	str	r3, [r1, r2]

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	2380      	movs	r3, #128	@ 0x80
 8007e32:	019b      	lsls	r3, r3, #6
 8007e34:	4013      	ands	r3, r2
 8007e36:	d017      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e3c:	2380      	movs	r3, #128	@ 0x80
 8007e3e:	051b      	lsls	r3, r3, #20
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d106      	bne.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x37e>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8007e44:	4b2a      	ldr	r3, [pc, #168]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e46:	68da      	ldr	r2, [r3, #12]
 8007e48:	4b29      	ldr	r3, [pc, #164]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e4a:	2180      	movs	r1, #128	@ 0x80
 8007e4c:	0449      	lsls	r1, r1, #17
 8007e4e:	430a      	orrs	r2, r1
 8007e50:	60da      	str	r2, [r3, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e52:	4a27      	ldr	r2, [pc, #156]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e54:	2388      	movs	r3, #136	@ 0x88
 8007e56:	58d3      	ldr	r3, [r2, r3]
 8007e58:	4a2f      	ldr	r2, [pc, #188]	@ (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007e5a:	401a      	ands	r2, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e60:	4923      	ldr	r1, [pc, #140]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e62:	4313      	orrs	r3, r2
 8007e64:	2288      	movs	r2, #136	@ 0x88
 8007e66:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	2380      	movs	r3, #128	@ 0x80
 8007e6e:	00db      	lsls	r3, r3, #3
 8007e70:	4013      	ands	r3, r2
 8007e72:	d017      	beq.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e78:	2380      	movs	r3, #128	@ 0x80
 8007e7a:	045b      	lsls	r3, r3, #17
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d106      	bne.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8007e80:	4b1b      	ldr	r3, [pc, #108]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e82:	68da      	ldr	r2, [r3, #12]
 8007e84:	4b1a      	ldr	r3, [pc, #104]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e86:	2180      	movs	r1, #128	@ 0x80
 8007e88:	0449      	lsls	r1, r1, #17
 8007e8a:	430a      	orrs	r2, r1
 8007e8c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007e8e:	4a18      	ldr	r2, [pc, #96]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e90:	2388      	movs	r3, #136	@ 0x88
 8007e92:	58d3      	ldr	r3, [r2, r3]
 8007e94:	4a21      	ldr	r2, [pc, #132]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8007e96:	401a      	ands	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e9c:	4914      	ldr	r1, [pc, #80]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	2288      	movs	r2, #136	@ 0x88
 8007ea2:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	2380      	movs	r3, #128	@ 0x80
 8007eaa:	011b      	lsls	r3, r3, #4
 8007eac:	4013      	ands	r3, r2
 8007eae:	d017      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007eb4:	2380      	movs	r3, #128	@ 0x80
 8007eb6:	049b      	lsls	r3, r3, #18
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d106      	bne.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8007ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007ebe:	68da      	ldr	r2, [r3, #12]
 8007ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007ec2:	2180      	movs	r1, #128	@ 0x80
 8007ec4:	0449      	lsls	r1, r1, #17
 8007ec6:	430a      	orrs	r2, r1
 8007ec8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007eca:	4a09      	ldr	r2, [pc, #36]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007ecc:	2388      	movs	r3, #136	@ 0x88
 8007ece:	58d3      	ldr	r3, [r2, r3]
 8007ed0:	4a12      	ldr	r2, [pc, #72]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8007ed2:	401a      	ands	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ed8:	4905      	ldr	r1, [pc, #20]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007eda:	4313      	orrs	r3, r2
 8007edc:	2288      	movs	r2, #136	@ 0x88
 8007ede:	508b      	str	r3, [r1, r2]

  }

  return status;
 8007ee0:	2312      	movs	r3, #18
 8007ee2:	18fb      	adds	r3, r7, r3
 8007ee4:	781b      	ldrb	r3, [r3, #0]
}
 8007ee6:	0018      	movs	r0, r3
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	b006      	add	sp, #24
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	46c0      	nop			@ (mov r8, r8)
 8007ef0:	40021000 	.word	0x40021000
 8007ef4:	efffffff 	.word	0xefffffff
 8007ef8:	fffff3ff 	.word	0xfffff3ff
 8007efc:	fffffcff 	.word	0xfffffcff
 8007f00:	ffffcfff 	.word	0xffffcfff
 8007f04:	fffcffff 	.word	0xfffcffff
 8007f08:	fff3ffff 	.word	0xfff3ffff
 8007f0c:	ffcfffff 	.word	0xffcfffff
 8007f10:	ff3fffff 	.word	0xff3fffff
 8007f14:	cfffffff 	.word	0xcfffffff
 8007f18:	f3ffffff 	.word	0xf3ffffff
 8007f1c:	feffffff 	.word	0xfeffffff

08007f20 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM1  TIM1 peripheral clock (only for devices with TIM1)
  *            @arg @ref RCC_PERIPHCLK_TIM15  TIM15 peripheral clock (only for devices with TIM15)
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007f20:	b590      	push	{r4, r7, lr}
 8007f22:	b089      	sub	sp, #36	@ 0x24
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	61fb      	str	r3, [r7, #28]
  PLL_ClocksTypeDef pll_freq;
  uint32_t msirange;
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	2380      	movs	r3, #128	@ 0x80
 8007f30:	021b      	lsls	r3, r3, #8
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d154      	bne.n	8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
  {
    /* Get the current RCC_PERIPHCLK_RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007f36:	4ad5      	ldr	r2, [pc, #852]	@ (800828c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007f38:	2390      	movs	r3, #144	@ 0x90
 8007f3a:	58d2      	ldr	r2, [r2, r3]
 8007f3c:	23c0      	movs	r3, #192	@ 0xc0
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	4013      	ands	r3, r2
 8007f42:	617b      	str	r3, [r7, #20]

    switch (srcclk)
 8007f44:	697a      	ldr	r2, [r7, #20]
 8007f46:	23c0      	movs	r3, #192	@ 0xc0
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d039      	beq.n	8007fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8007f4e:	697a      	ldr	r2, [r7, #20]
 8007f50:	23c0      	movs	r3, #192	@ 0xc0
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d901      	bls.n	8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8007f58:	f000 fd1a 	bl	8008990 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8007f5c:	697a      	ldr	r2, [r7, #20]
 8007f5e:	2380      	movs	r3, #128	@ 0x80
 8007f60:	005b      	lsls	r3, r3, #1
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d006      	beq.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8007f66:	697a      	ldr	r2, [r7, #20]
 8007f68:	2380      	movs	r3, #128	@ 0x80
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d00f      	beq.n	8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 8007f70:	f000 fd0e 	bl	8008990 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007f74:	4ac5      	ldr	r2, [pc, #788]	@ (800828c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007f76:	2390      	movs	r3, #144	@ 0x90
 8007f78:	58d3      	ldr	r3, [r2, r3]
 8007f7a:	2202      	movs	r2, #2
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d001      	beq.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 8007f82:	f000 fd07 	bl	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
          frequency = LSE_VALUE;
 8007f86:	2380      	movs	r3, #128	@ 0x80
 8007f88:	021b      	lsls	r3, r3, #8
 8007f8a:	61fb      	str	r3, [r7, #28]
        break;
 8007f8c:	f000 fd02 	bl	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007f90:	4abe      	ldr	r2, [pc, #760]	@ (800828c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007f92:	2394      	movs	r3, #148	@ 0x94
 8007f94:	58d3      	ldr	r3, [r2, r3]
 8007f96:	2202      	movs	r2, #2
 8007f98:	4013      	ands	r3, r2
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	d001      	beq.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 8007f9e:	f000 fcfb 	bl	8008998 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8007fa2:	4aba      	ldr	r2, [pc, #744]	@ (800828c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007fa4:	2394      	movs	r3, #148	@ 0x94
 8007fa6:	58d3      	ldr	r3, [r2, r3]
 8007fa8:	2204      	movs	r2, #4
 8007faa:	4013      	ands	r3, r2
 8007fac:	2b04      	cmp	r3, #4
 8007fae:	d103      	bne.n	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSI_VALUE / 128U;
 8007fb0:	23fa      	movs	r3, #250	@ 0xfa
 8007fb2:	61fb      	str	r3, [r7, #28]
        break;
 8007fb4:	f000 fcf0 	bl	8008998 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
            frequency = LSI_VALUE;
 8007fb8:	23fa      	movs	r3, #250	@ 0xfa
 8007fba:	01db      	lsls	r3, r3, #7
 8007fbc:	61fb      	str	r3, [r7, #28]
        break;
 8007fbe:	f000 fceb 	bl	8008998 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007fc2:	4bb2      	ldr	r3, [pc, #712]	@ (800828c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	2380      	movs	r3, #128	@ 0x80
 8007fc8:	029b      	lsls	r3, r3, #10
 8007fca:	401a      	ands	r2, r3
 8007fcc:	2380      	movs	r3, #128	@ 0x80
 8007fce:	029b      	lsls	r3, r3, #10
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d001      	beq.n	8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8007fd4:	f000 fce2 	bl	800899c <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
          frequency = HSE_VALUE / 32U;
 8007fd8:	4bad      	ldr	r3, [pc, #692]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 8007fda:	61fb      	str	r3, [r7, #28]
        break;
 8007fdc:	f000 fcde 	bl	800899c <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	2380      	movs	r3, #128	@ 0x80
 8007fe4:	029b      	lsls	r3, r3, #10
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d100      	bne.n	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8007fea:	e11a      	b.n	8008222 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	2380      	movs	r3, #128	@ 0x80
 8007ff0:	029b      	lsls	r3, r3, #10
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d901      	bls.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8007ff6:	f000 fcd3 	bl	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	2380      	movs	r3, #128	@ 0x80
 8007ffe:	025b      	lsls	r3, r3, #9
 8008000:	429a      	cmp	r2, r3
 8008002:	d100      	bne.n	8008006 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8008004:	e10d      	b.n	8008222 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	2380      	movs	r3, #128	@ 0x80
 800800a:	025b      	lsls	r3, r3, #9
 800800c:	429a      	cmp	r2, r3
 800800e:	d901      	bls.n	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008010:	f000 fcc6 	bl	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	2380      	movs	r3, #128	@ 0x80
 8008018:	01db      	lsls	r3, r3, #7
 800801a:	429a      	cmp	r2, r3
 800801c:	d100      	bne.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800801e:	e1eb      	b.n	80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	2380      	movs	r3, #128	@ 0x80
 8008024:	01db      	lsls	r3, r3, #7
 8008026:	429a      	cmp	r2, r3
 8008028:	d901      	bls.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800802a:	f000 fcb9 	bl	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	2380      	movs	r3, #128	@ 0x80
 8008032:	019b      	lsls	r3, r3, #6
 8008034:	429a      	cmp	r2, r3
 8008036:	d101      	bne.n	800803c <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 8008038:	f000 fc50 	bl	80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	2380      	movs	r3, #128	@ 0x80
 8008040:	019b      	lsls	r3, r3, #6
 8008042:	429a      	cmp	r2, r3
 8008044:	d901      	bls.n	800804a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8008046:	f000 fcab 	bl	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	2380      	movs	r3, #128	@ 0x80
 800804e:	015b      	lsls	r3, r3, #5
 8008050:	429a      	cmp	r2, r3
 8008052:	d101      	bne.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008054:	f000 fbe2 	bl	800881c <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	2380      	movs	r3, #128	@ 0x80
 800805c:	015b      	lsls	r3, r3, #5
 800805e:	429a      	cmp	r2, r3
 8008060:	d901      	bls.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8008062:	f000 fc9d 	bl	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	2380      	movs	r3, #128	@ 0x80
 800806a:	011b      	lsls	r3, r3, #4
 800806c:	429a      	cmp	r2, r3
 800806e:	d101      	bne.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8008070:	f000 fba9 	bl	80087c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	2380      	movs	r3, #128	@ 0x80
 8008078:	011b      	lsls	r3, r3, #4
 800807a:	429a      	cmp	r2, r3
 800807c:	d901      	bls.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 800807e:	f000 fc8f 	bl	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	2380      	movs	r3, #128	@ 0x80
 8008086:	00db      	lsls	r3, r3, #3
 8008088:	429a      	cmp	r2, r3
 800808a:	d101      	bne.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 800808c:	f000 fb70 	bl	8008770 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	2380      	movs	r3, #128	@ 0x80
 8008094:	00db      	lsls	r3, r3, #3
 8008096:	429a      	cmp	r2, r3
 8008098:	d901      	bls.n	800809e <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800809a:	f000 fc81 	bl	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	2380      	movs	r3, #128	@ 0x80
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d100      	bne.n	80080aa <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 80080a8:	e305      	b.n	80086b6 <HAL_RCCEx_GetPeriphCLKFreq+0x796>
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	2380      	movs	r3, #128	@ 0x80
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d901      	bls.n	80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 80080b4:	f000 fc74 	bl	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	2380      	movs	r3, #128	@ 0x80
 80080bc:	005b      	lsls	r3, r3, #1
 80080be:	429a      	cmp	r2, r3
 80080c0:	d100      	bne.n	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80080c2:	e29b      	b.n	80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	2380      	movs	r3, #128	@ 0x80
 80080c8:	005b      	lsls	r3, r3, #1
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d901      	bls.n	80080d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 80080ce:	f000 fc67 	bl	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2b80      	cmp	r3, #128	@ 0x80
 80080d6:	d100      	bne.n	80080da <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 80080d8:	e22f      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2b80      	cmp	r3, #128	@ 0x80
 80080de:	d901      	bls.n	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 80080e0:	f000 fc5e 	bl	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2b20      	cmp	r3, #32
 80080e8:	d80f      	bhi.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d101      	bne.n	80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 80080f0:	f000 fc56 	bl	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2b20      	cmp	r3, #32
 80080f8:	d901      	bls.n	80080fe <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 80080fa:	f000 fc51 	bl	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	009a      	lsls	r2, r3, #2
 8008102:	4b64      	ldr	r3, [pc, #400]	@ (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 8008104:	18d3      	adds	r3, r2, r3
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	469f      	mov	pc, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2b40      	cmp	r3, #64	@ 0x40
 800810e:	d100      	bne.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 8008110:	e1df      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            break;
        }
        break;
      }
      default:
        break;
 8008112:	f000 fc45 	bl	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008116:	4a5d      	ldr	r2, [pc, #372]	@ (800828c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8008118:	2388      	movs	r3, #136	@ 0x88
 800811a:	58d3      	ldr	r3, [r2, r3]
 800811c:	2203      	movs	r2, #3
 800811e:	4013      	ands	r3, r2
 8008120:	617b      	str	r3, [r7, #20]
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	2b03      	cmp	r3, #3
 8008126:	d025      	beq.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	2b03      	cmp	r3, #3
 800812c:	d82d      	bhi.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	2b02      	cmp	r3, #2
 8008132:	d013      	beq.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	2b02      	cmp	r3, #2
 8008138:	d827      	bhi.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d003      	beq.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	2b01      	cmp	r3, #1
 8008144:	d005      	beq.n	8008152 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
            break;
 8008146:	e020      	b.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
            frequency = HAL_RCC_GetPCLK1Freq();
 8008148:	f7ff fc40 	bl	80079cc <HAL_RCC_GetPCLK1Freq>
 800814c:	0003      	movs	r3, r0
 800814e:	61fb      	str	r3, [r7, #28]
            break;
 8008150:	e022      	b.n	8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            frequency = HAL_RCC_GetSysClockFreq();
 8008152:	f7ff fb95 	bl	8007880 <HAL_RCC_GetSysClockFreq>
 8008156:	0003      	movs	r3, r0
 8008158:	61fb      	str	r3, [r7, #28]
            break;
 800815a:	e01d      	b.n	8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800815c:	4b4b      	ldr	r3, [pc, #300]	@ (800828c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	2380      	movs	r3, #128	@ 0x80
 8008162:	00db      	lsls	r3, r3, #3
 8008164:	401a      	ands	r2, r3
 8008166:	2380      	movs	r3, #128	@ 0x80
 8008168:	00db      	lsls	r3, r3, #3
 800816a:	429a      	cmp	r2, r3
 800816c:	d110      	bne.n	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
              frequency = HSI_VALUE;
 800816e:	4b4a      	ldr	r3, [pc, #296]	@ (8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 8008170:	61fb      	str	r3, [r7, #28]
            break;
 8008172:	e00d      	b.n	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008174:	4a45      	ldr	r2, [pc, #276]	@ (800828c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8008176:	2390      	movs	r3, #144	@ 0x90
 8008178:	58d3      	ldr	r3, [r2, r3]
 800817a:	2202      	movs	r2, #2
 800817c:	4013      	ands	r3, r2
 800817e:	2b02      	cmp	r3, #2
 8008180:	d109      	bne.n	8008196 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
              frequency = LSE_VALUE;
 8008182:	2380      	movs	r3, #128	@ 0x80
 8008184:	021b      	lsls	r3, r3, #8
 8008186:	61fb      	str	r3, [r7, #28]
            break;
 8008188:	e005      	b.n	8008196 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
            break;
 800818a:	46c0      	nop			@ (mov r8, r8)
 800818c:	f000 fc09 	bl	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008190:	46c0      	nop			@ (mov r8, r8)
 8008192:	f000 fc06 	bl	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008196:	46c0      	nop			@ (mov r8, r8)
        break;
 8008198:	f000 fc03 	bl	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800819c:	4a3b      	ldr	r2, [pc, #236]	@ (800828c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800819e:	2388      	movs	r3, #136	@ 0x88
 80081a0:	58d3      	ldr	r3, [r2, r3]
 80081a2:	220c      	movs	r2, #12
 80081a4:	4013      	ands	r3, r2
 80081a6:	617b      	str	r3, [r7, #20]
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	2b0c      	cmp	r3, #12
 80081ac:	d025      	beq.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x2da>
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	2b0c      	cmp	r3, #12
 80081b2:	d82d      	bhi.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	2b08      	cmp	r3, #8
 80081b8:	d013      	beq.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	2b08      	cmp	r3, #8
 80081be:	d827      	bhi.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d003      	beq.n	80081ce <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	2b04      	cmp	r3, #4
 80081ca:	d005      	beq.n	80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
            break;
 80081cc:	e020      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
            frequency = HAL_RCC_GetPCLK1Freq();
 80081ce:	f7ff fbfd 	bl	80079cc <HAL_RCC_GetPCLK1Freq>
 80081d2:	0003      	movs	r3, r0
 80081d4:	61fb      	str	r3, [r7, #28]
            break;
 80081d6:	e022      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            frequency = HAL_RCC_GetSysClockFreq();
 80081d8:	f7ff fb52 	bl	8007880 <HAL_RCC_GetSysClockFreq>
 80081dc:	0003      	movs	r3, r0
 80081de:	61fb      	str	r3, [r7, #28]
            break;
 80081e0:	e01d      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80081e2:	4b2a      	ldr	r3, [pc, #168]	@ (800828c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	2380      	movs	r3, #128	@ 0x80
 80081e8:	00db      	lsls	r3, r3, #3
 80081ea:	401a      	ands	r2, r3
 80081ec:	2380      	movs	r3, #128	@ 0x80
 80081ee:	00db      	lsls	r3, r3, #3
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d110      	bne.n	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
              frequency = HSI_VALUE;
 80081f4:	4b28      	ldr	r3, [pc, #160]	@ (8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 80081f6:	61fb      	str	r3, [r7, #28]
            break;
 80081f8:	e00d      	b.n	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80081fa:	4a24      	ldr	r2, [pc, #144]	@ (800828c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80081fc:	2390      	movs	r3, #144	@ 0x90
 80081fe:	58d3      	ldr	r3, [r2, r3]
 8008200:	2202      	movs	r2, #2
 8008202:	4013      	ands	r3, r2
 8008204:	2b02      	cmp	r3, #2
 8008206:	d109      	bne.n	800821c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
              frequency = LSE_VALUE;
 8008208:	2380      	movs	r3, #128	@ 0x80
 800820a:	021b      	lsls	r3, r3, #8
 800820c:	61fb      	str	r3, [r7, #28]
            break;
 800820e:	e005      	b.n	800821c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
            break;
 8008210:	46c0      	nop			@ (mov r8, r8)
 8008212:	f000 fbc6 	bl	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008216:	46c0      	nop			@ (mov r8, r8)
 8008218:	f000 fbc3 	bl	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800821c:	46c0      	nop			@ (mov r8, r8)
        break;
 800821e:	f000 fbc0 	bl	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        frequency = HAL_RCC_GetPCLK1Freq();
 8008222:	f7ff fbd3 	bl	80079cc <HAL_RCC_GetPCLK1Freq>
 8008226:	0003      	movs	r3, r0
 8008228:	61fb      	str	r3, [r7, #28]
        break;
 800822a:	f000 fbba 	bl	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800822e:	4a17      	ldr	r2, [pc, #92]	@ (800828c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8008230:	2388      	movs	r3, #136	@ 0x88
 8008232:	58d2      	ldr	r2, [r2, r3]
 8008234:	23c0      	movs	r3, #192	@ 0xc0
 8008236:	011b      	lsls	r3, r3, #4
 8008238:	4013      	ands	r3, r2
 800823a:	617b      	str	r3, [r7, #20]
 800823c:	697a      	ldr	r2, [r7, #20]
 800823e:	23c0      	movs	r3, #192	@ 0xc0
 8008240:	011b      	lsls	r3, r3, #4
 8008242:	429a      	cmp	r2, r3
 8008244:	d036      	beq.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	23c0      	movs	r3, #192	@ 0xc0
 800824a:	011b      	lsls	r3, r3, #4
 800824c:	429a      	cmp	r2, r3
 800824e:	d83c      	bhi.n	80082ca <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8008250:	697a      	ldr	r2, [r7, #20]
 8008252:	2380      	movs	r3, #128	@ 0x80
 8008254:	011b      	lsls	r3, r3, #4
 8008256:	429a      	cmp	r2, r3
 8008258:	d020      	beq.n	800829c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800825a:	697a      	ldr	r2, [r7, #20]
 800825c:	2380      	movs	r3, #128	@ 0x80
 800825e:	011b      	lsls	r3, r3, #4
 8008260:	429a      	cmp	r2, r3
 8008262:	d832      	bhi.n	80082ca <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d005      	beq.n	8008276 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 800826a:	697a      	ldr	r2, [r7, #20]
 800826c:	2380      	movs	r3, #128	@ 0x80
 800826e:	00db      	lsls	r3, r3, #3
 8008270:	429a      	cmp	r2, r3
 8008272:	d005      	beq.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
            break;
 8008274:	e029      	b.n	80082ca <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 8008276:	f7ff fba9 	bl	80079cc <HAL_RCC_GetPCLK1Freq>
 800827a:	0003      	movs	r3, r0
 800827c:	61fb      	str	r3, [r7, #28]
            break;
 800827e:	e02b      	b.n	80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
            frequency = HAL_RCC_GetSysClockFreq();
 8008280:	f7ff fafe 	bl	8007880 <HAL_RCC_GetSysClockFreq>
 8008284:	0003      	movs	r3, r0
 8008286:	61fb      	str	r3, [r7, #28]
            break;
 8008288:	e026      	b.n	80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800828a:	46c0      	nop			@ (mov r8, r8)
 800828c:	40021000 	.word	0x40021000
 8008290:	0001e848 	.word	0x0001e848
 8008294:	08010078 	.word	0x08010078
 8008298:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800829c:	4bbb      	ldr	r3, [pc, #748]	@ (800858c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	2380      	movs	r3, #128	@ 0x80
 80082a2:	00db      	lsls	r3, r3, #3
 80082a4:	401a      	ands	r2, r3
 80082a6:	2380      	movs	r3, #128	@ 0x80
 80082a8:	00db      	lsls	r3, r3, #3
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d110      	bne.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
              frequency = HSI_VALUE;
 80082ae:	4bb8      	ldr	r3, [pc, #736]	@ (8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 80082b0:	61fb      	str	r3, [r7, #28]
            break;
 80082b2:	e00d      	b.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80082b4:	4ab5      	ldr	r2, [pc, #724]	@ (800858c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80082b6:	2390      	movs	r3, #144	@ 0x90
 80082b8:	58d3      	ldr	r3, [r2, r3]
 80082ba:	2202      	movs	r2, #2
 80082bc:	4013      	ands	r3, r2
 80082be:	2b02      	cmp	r3, #2
 80082c0:	d109      	bne.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
              frequency = LSE_VALUE;
 80082c2:	2380      	movs	r3, #128	@ 0x80
 80082c4:	021b      	lsls	r3, r3, #8
 80082c6:	61fb      	str	r3, [r7, #28]
            break;
 80082c8:	e005      	b.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
            break;
 80082ca:	46c0      	nop			@ (mov r8, r8)
 80082cc:	f000 fb69 	bl	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80082d0:	46c0      	nop			@ (mov r8, r8)
 80082d2:	f000 fb66 	bl	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80082d6:	46c0      	nop			@ (mov r8, r8)
        break;
 80082d8:	f000 fb63 	bl	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 80082dc:	4aab      	ldr	r2, [pc, #684]	@ (800858c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80082de:	2388      	movs	r3, #136	@ 0x88
 80082e0:	58d2      	ldr	r2, [r2, r3]
 80082e2:	23c0      	movs	r3, #192	@ 0xc0
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	4013      	ands	r3, r2
 80082e8:	617b      	str	r3, [r7, #20]
 80082ea:	697a      	ldr	r2, [r7, #20]
 80082ec:	23c0      	movs	r3, #192	@ 0xc0
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d02d      	beq.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
 80082f4:	697a      	ldr	r2, [r7, #20]
 80082f6:	23c0      	movs	r3, #192	@ 0xc0
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d833      	bhi.n	8008366 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80082fe:	697a      	ldr	r2, [r7, #20]
 8008300:	2380      	movs	r3, #128	@ 0x80
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	429a      	cmp	r2, r3
 8008306:	d017      	beq.n	8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8008308:	697a      	ldr	r2, [r7, #20]
 800830a:	2380      	movs	r3, #128	@ 0x80
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	429a      	cmp	r2, r3
 8008310:	d829      	bhi.n	8008366 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d005      	beq.n	8008324 <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 8008318:	697a      	ldr	r2, [r7, #20]
 800831a:	2380      	movs	r3, #128	@ 0x80
 800831c:	005b      	lsls	r3, r3, #1
 800831e:	429a      	cmp	r2, r3
 8008320:	d005      	beq.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            break;
 8008322:	e020      	b.n	8008366 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
            frequency = HAL_RCC_GetPCLK1Freq();
 8008324:	f7ff fb52 	bl	80079cc <HAL_RCC_GetPCLK1Freq>
 8008328:	0003      	movs	r3, r0
 800832a:	61fb      	str	r3, [r7, #28]
            break;
 800832c:	e022      	b.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            frequency = HAL_RCC_GetSysClockFreq();
 800832e:	f7ff faa7 	bl	8007880 <HAL_RCC_GetSysClockFreq>
 8008332:	0003      	movs	r3, r0
 8008334:	61fb      	str	r3, [r7, #28]
            break;
 8008336:	e01d      	b.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008338:	4b94      	ldr	r3, [pc, #592]	@ (800858c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	2380      	movs	r3, #128	@ 0x80
 800833e:	00db      	lsls	r3, r3, #3
 8008340:	401a      	ands	r2, r3
 8008342:	2380      	movs	r3, #128	@ 0x80
 8008344:	00db      	lsls	r3, r3, #3
 8008346:	429a      	cmp	r2, r3
 8008348:	d110      	bne.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
              frequency = HSI_VALUE;
 800834a:	4b91      	ldr	r3, [pc, #580]	@ (8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 800834c:	61fb      	str	r3, [r7, #28]
            break;
 800834e:	e00d      	b.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008350:	4a8e      	ldr	r2, [pc, #568]	@ (800858c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8008352:	2390      	movs	r3, #144	@ 0x90
 8008354:	58d3      	ldr	r3, [r2, r3]
 8008356:	2202      	movs	r2, #2
 8008358:	4013      	ands	r3, r2
 800835a:	2b02      	cmp	r3, #2
 800835c:	d109      	bne.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
              frequency = LSE_VALUE;
 800835e:	2380      	movs	r3, #128	@ 0x80
 8008360:	021b      	lsls	r3, r3, #8
 8008362:	61fb      	str	r3, [r7, #28]
            break;
 8008364:	e005      	b.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            break;
 8008366:	46c0      	nop			@ (mov r8, r8)
 8008368:	f000 fb1b 	bl	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800836c:	46c0      	nop			@ (mov r8, r8)
 800836e:	f000 fb18 	bl	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008372:	46c0      	nop			@ (mov r8, r8)
        break;
 8008374:	f000 fb15 	bl	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART3_SOURCE();
 8008378:	4a84      	ldr	r2, [pc, #528]	@ (800858c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800837a:	2388      	movs	r3, #136	@ 0x88
 800837c:	58d3      	ldr	r3, [r2, r3]
 800837e:	22c0      	movs	r2, #192	@ 0xc0
 8008380:	4013      	ands	r3, r2
 8008382:	617b      	str	r3, [r7, #20]
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	2bc0      	cmp	r3, #192	@ 0xc0
 8008388:	d025      	beq.n	80083d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	2bc0      	cmp	r3, #192	@ 0xc0
 800838e:	d82d      	bhi.n	80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	2b80      	cmp	r3, #128	@ 0x80
 8008394:	d013      	beq.n	80083be <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	2b80      	cmp	r3, #128	@ 0x80
 800839a:	d827      	bhi.n	80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d003      	beq.n	80083aa <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	2b40      	cmp	r3, #64	@ 0x40
 80083a6:	d005      	beq.n	80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            break;
 80083a8:	e020      	b.n	80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 80083aa:	f7ff fb0f 	bl	80079cc <HAL_RCC_GetPCLK1Freq>
 80083ae:	0003      	movs	r3, r0
 80083b0:	61fb      	str	r3, [r7, #28]
            break;
 80083b2:	e020      	b.n	80083f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            frequency = HAL_RCC_GetSysClockFreq();
 80083b4:	f7ff fa64 	bl	8007880 <HAL_RCC_GetSysClockFreq>
 80083b8:	0003      	movs	r3, r0
 80083ba:	61fb      	str	r3, [r7, #28]
            break;
 80083bc:	e01b      	b.n	80083f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80083be:	4b73      	ldr	r3, [pc, #460]	@ (800858c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	2380      	movs	r3, #128	@ 0x80
 80083c4:	00db      	lsls	r3, r3, #3
 80083c6:	401a      	ands	r2, r3
 80083c8:	2380      	movs	r3, #128	@ 0x80
 80083ca:	00db      	lsls	r3, r3, #3
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d10f      	bne.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
              frequency = HSI_VALUE;
 80083d0:	4b6f      	ldr	r3, [pc, #444]	@ (8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 80083d2:	61fb      	str	r3, [r7, #28]
            break;
 80083d4:	e00c      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80083d6:	4a6d      	ldr	r2, [pc, #436]	@ (800858c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80083d8:	2390      	movs	r3, #144	@ 0x90
 80083da:	58d3      	ldr	r3, [r2, r3]
 80083dc:	2202      	movs	r2, #2
 80083de:	4013      	ands	r3, r2
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	d107      	bne.n	80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
              frequency = LSE_VALUE;
 80083e4:	2380      	movs	r3, #128	@ 0x80
 80083e6:	021b      	lsls	r3, r3, #8
 80083e8:	61fb      	str	r3, [r7, #28]
            break;
 80083ea:	e003      	b.n	80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
            break;
 80083ec:	46c0      	nop			@ (mov r8, r8)
 80083ee:	e2d8      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80083f0:	46c0      	nop			@ (mov r8, r8)
 80083f2:	e2d6      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80083f4:	46c0      	nop			@ (mov r8, r8)
        break;
 80083f6:	e2d4      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80083f8:	4a64      	ldr	r2, [pc, #400]	@ (800858c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80083fa:	2388      	movs	r3, #136	@ 0x88
 80083fc:	58d2      	ldr	r2, [r2, r3]
 80083fe:	23c0      	movs	r3, #192	@ 0xc0
 8008400:	059b      	lsls	r3, r3, #22
 8008402:	4013      	ands	r3, r2
 8008404:	617b      	str	r3, [r7, #20]
 8008406:	697a      	ldr	r2, [r7, #20]
 8008408:	2380      	movs	r3, #128	@ 0x80
 800840a:	059b      	lsls	r3, r3, #22
 800840c:	429a      	cmp	r2, r3
 800840e:	d012      	beq.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008410:	697a      	ldr	r2, [r7, #20]
 8008412:	2380      	movs	r3, #128	@ 0x80
 8008414:	059b      	lsls	r3, r3, #22
 8008416:	429a      	cmp	r2, r3
 8008418:	d825      	bhi.n	8008466 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d005      	beq.n	800842c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 8008420:	697a      	ldr	r2, [r7, #20]
 8008422:	2380      	movs	r3, #128	@ 0x80
 8008424:	055b      	lsls	r3, r3, #21
 8008426:	429a      	cmp	r2, r3
 8008428:	d014      	beq.n	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
            break;
 800842a:	e01c      	b.n	8008466 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
            frequency = HAL_RCC_GetSysClockFreq();
 800842c:	f7ff fa28 	bl	8007880 <HAL_RCC_GetSysClockFreq>
 8008430:	0003      	movs	r3, r0
 8008432:	61fb      	str	r3, [r7, #28]
            break;
 8008434:	e018      	b.n	8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008436:	4b55      	ldr	r3, [pc, #340]	@ (800858c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	2380      	movs	r3, #128	@ 0x80
 800843c:	00db      	lsls	r3, r3, #3
 800843e:	401a      	ands	r2, r3
 8008440:	2380      	movs	r3, #128	@ 0x80
 8008442:	00db      	lsls	r3, r3, #3
 8008444:	429a      	cmp	r2, r3
 8008446:	d102      	bne.n	800844e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
              frequency = HSI_VALUE;
 8008448:	4b51      	ldr	r3, [pc, #324]	@ (8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 800844a:	61fb      	str	r3, [r7, #28]
            break;
 800844c:	e00c      	b.n	8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
              frequency = 0U;
 800844e:	2300      	movs	r3, #0
 8008450:	61fb      	str	r3, [r7, #28]
            break;
 8008452:	e009      	b.n	8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8008454:	2408      	movs	r4, #8
 8008456:	193b      	adds	r3, r7, r4
 8008458:	0018      	movs	r0, r3
 800845a:	f000 faad 	bl	80089b8 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_P_Frequency;
 800845e:	193b      	adds	r3, r7, r4
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	61fb      	str	r3, [r7, #28]
            break;
 8008464:	e000      	b.n	8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            break;
 8008466:	46c0      	nop			@ (mov r8, r8)
        break;
 8008468:	e29b      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800846a:	4a48      	ldr	r2, [pc, #288]	@ (800858c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800846c:	2388      	movs	r3, #136	@ 0x88
 800846e:	58d2      	ldr	r2, [r2, r3]
 8008470:	23c0      	movs	r3, #192	@ 0xc0
 8008472:	019b      	lsls	r3, r3, #6
 8008474:	4013      	ands	r3, r2
 8008476:	617b      	str	r3, [r7, #20]
 8008478:	697a      	ldr	r2, [r7, #20]
 800847a:	2380      	movs	r3, #128	@ 0x80
 800847c:	019b      	lsls	r3, r3, #6
 800847e:	429a      	cmp	r2, r3
 8008480:	d017      	beq.n	80084b2 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 8008482:	697a      	ldr	r2, [r7, #20]
 8008484:	2380      	movs	r3, #128	@ 0x80
 8008486:	019b      	lsls	r3, r3, #6
 8008488:	429a      	cmp	r2, r3
 800848a:	d81e      	bhi.n	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d005      	beq.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8008492:	697a      	ldr	r2, [r7, #20]
 8008494:	2380      	movs	r3, #128	@ 0x80
 8008496:	015b      	lsls	r3, r3, #5
 8008498:	429a      	cmp	r2, r3
 800849a:	d005      	beq.n	80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
            break;
 800849c:	e015      	b.n	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 800849e:	f7ff fa95 	bl	80079cc <HAL_RCC_GetPCLK1Freq>
 80084a2:	0003      	movs	r3, r0
 80084a4:	61fb      	str	r3, [r7, #28]
            break;
 80084a6:	e013      	b.n	80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            frequency = HAL_RCC_GetSysClockFreq();
 80084a8:	f7ff f9ea 	bl	8007880 <HAL_RCC_GetSysClockFreq>
 80084ac:	0003      	movs	r3, r0
 80084ae:	61fb      	str	r3, [r7, #28]
            break;
 80084b0:	e00e      	b.n	80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80084b2:	4b36      	ldr	r3, [pc, #216]	@ (800858c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	2380      	movs	r3, #128	@ 0x80
 80084b8:	00db      	lsls	r3, r3, #3
 80084ba:	401a      	ands	r2, r3
 80084bc:	2380      	movs	r3, #128	@ 0x80
 80084be:	00db      	lsls	r3, r3, #3
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d104      	bne.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
              frequency = HSI_VALUE;
 80084c4:	4b32      	ldr	r3, [pc, #200]	@ (8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 80084c6:	61fb      	str	r3, [r7, #28]
            break;
 80084c8:	e001      	b.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
            break;
 80084ca:	46c0      	nop			@ (mov r8, r8)
 80084cc:	e269      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80084ce:	46c0      	nop			@ (mov r8, r8)
        break;
 80084d0:	e267      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80084d2:	4a2e      	ldr	r2, [pc, #184]	@ (800858c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80084d4:	2388      	movs	r3, #136	@ 0x88
 80084d6:	58d2      	ldr	r2, [r2, r3]
 80084d8:	23c0      	movs	r3, #192	@ 0xc0
 80084da:	029b      	lsls	r3, r3, #10
 80084dc:	4013      	ands	r3, r2
 80084de:	617b      	str	r3, [r7, #20]
 80084e0:	697a      	ldr	r2, [r7, #20]
 80084e2:	2380      	movs	r3, #128	@ 0x80
 80084e4:	029b      	lsls	r3, r3, #10
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d017      	beq.n	800851a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
 80084ea:	697a      	ldr	r2, [r7, #20]
 80084ec:	2380      	movs	r3, #128	@ 0x80
 80084ee:	029b      	lsls	r3, r3, #10
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d81e      	bhi.n	8008532 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d005      	beq.n	8008506 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 80084fa:	697a      	ldr	r2, [r7, #20]
 80084fc:	2380      	movs	r3, #128	@ 0x80
 80084fe:	025b      	lsls	r3, r3, #9
 8008500:	429a      	cmp	r2, r3
 8008502:	d005      	beq.n	8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
            break;
 8008504:	e015      	b.n	8008532 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
            frequency = HAL_RCC_GetPCLK1Freq();
 8008506:	f7ff fa61 	bl	80079cc <HAL_RCC_GetPCLK1Freq>
 800850a:	0003      	movs	r3, r0
 800850c:	61fb      	str	r3, [r7, #28]
            break;
 800850e:	e013      	b.n	8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HAL_RCC_GetSysClockFreq();
 8008510:	f7ff f9b6 	bl	8007880 <HAL_RCC_GetSysClockFreq>
 8008514:	0003      	movs	r3, r0
 8008516:	61fb      	str	r3, [r7, #28]
            break;
 8008518:	e00e      	b.n	8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800851a:	4b1c      	ldr	r3, [pc, #112]	@ (800858c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	2380      	movs	r3, #128	@ 0x80
 8008520:	00db      	lsls	r3, r3, #3
 8008522:	401a      	ands	r2, r3
 8008524:	2380      	movs	r3, #128	@ 0x80
 8008526:	00db      	lsls	r3, r3, #3
 8008528:	429a      	cmp	r2, r3
 800852a:	d104      	bne.n	8008536 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
              frequency = HSI_VALUE;
 800852c:	4b18      	ldr	r3, [pc, #96]	@ (8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 800852e:	61fb      	str	r3, [r7, #28]
            break;
 8008530:	e001      	b.n	8008536 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
            break;
 8008532:	46c0      	nop			@ (mov r8, r8)
 8008534:	e235      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008536:	46c0      	nop			@ (mov r8, r8)
        break;
 8008538:	e233      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800853a:	4a14      	ldr	r2, [pc, #80]	@ (800858c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800853c:	2388      	movs	r3, #136	@ 0x88
 800853e:	58d2      	ldr	r2, [r2, r3]
 8008540:	23c0      	movs	r3, #192	@ 0xc0
 8008542:	031b      	lsls	r3, r3, #12
 8008544:	4013      	ands	r3, r2
 8008546:	617b      	str	r3, [r7, #20]
 8008548:	697a      	ldr	r2, [r7, #20]
 800854a:	23c0      	movs	r3, #192	@ 0xc0
 800854c:	031b      	lsls	r3, r3, #12
 800854e:	429a      	cmp	r2, r3
 8008550:	d041      	beq.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8008552:	697a      	ldr	r2, [r7, #20]
 8008554:	23c0      	movs	r3, #192	@ 0xc0
 8008556:	031b      	lsls	r3, r3, #12
 8008558:	429a      	cmp	r2, r3
 800855a:	d847      	bhi.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800855c:	697a      	ldr	r2, [r7, #20]
 800855e:	2380      	movs	r3, #128	@ 0x80
 8008560:	031b      	lsls	r3, r3, #12
 8008562:	429a      	cmp	r2, r3
 8008564:	d02b      	beq.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
 8008566:	697a      	ldr	r2, [r7, #20]
 8008568:	2380      	movs	r3, #128	@ 0x80
 800856a:	031b      	lsls	r3, r3, #12
 800856c:	429a      	cmp	r2, r3
 800856e:	d83d      	bhi.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d005      	beq.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 8008576:	697a      	ldr	r2, [r7, #20]
 8008578:	2380      	movs	r3, #128	@ 0x80
 800857a:	02db      	lsls	r3, r3, #11
 800857c:	429a      	cmp	r2, r3
 800857e:	d009      	beq.n	8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            break;
 8008580:	e034      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 8008582:	f7ff fa23 	bl	80079cc <HAL_RCC_GetPCLK1Freq>
 8008586:	0003      	movs	r3, r0
 8008588:	61fb      	str	r3, [r7, #28]
            break;
 800858a:	e036      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800858c:	40021000 	.word	0x40021000
 8008590:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008594:	4abd      	ldr	r2, [pc, #756]	@ (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008596:	2394      	movs	r3, #148	@ 0x94
 8008598:	58d3      	ldr	r3, [r2, r3]
 800859a:	2202      	movs	r2, #2
 800859c:	4013      	ands	r3, r2
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d126      	bne.n	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80085a2:	4aba      	ldr	r2, [pc, #744]	@ (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80085a4:	2394      	movs	r3, #148	@ 0x94
 80085a6:	58d3      	ldr	r3, [r2, r3]
 80085a8:	2204      	movs	r2, #4
 80085aa:	4013      	ands	r3, r2
 80085ac:	2b04      	cmp	r3, #4
 80085ae:	d102      	bne.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
                frequency = LSI_VALUE / 128U;
 80085b0:	23fa      	movs	r3, #250	@ 0xfa
 80085b2:	61fb      	str	r3, [r7, #28]
            break;
 80085b4:	e01c      	b.n	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
                frequency = LSI_VALUE;
 80085b6:	23fa      	movs	r3, #250	@ 0xfa
 80085b8:	01db      	lsls	r3, r3, #7
 80085ba:	61fb      	str	r3, [r7, #28]
            break;
 80085bc:	e018      	b.n	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80085be:	4bb3      	ldr	r3, [pc, #716]	@ (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	2380      	movs	r3, #128	@ 0x80
 80085c4:	00db      	lsls	r3, r3, #3
 80085c6:	401a      	ands	r2, r3
 80085c8:	2380      	movs	r3, #128	@ 0x80
 80085ca:	00db      	lsls	r3, r3, #3
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d111      	bne.n	80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
              frequency = HSI_VALUE;
 80085d0:	4baf      	ldr	r3, [pc, #700]	@ (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 80085d2:	61fb      	str	r3, [r7, #28]
            break;
 80085d4:	e00e      	b.n	80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80085d6:	4aad      	ldr	r2, [pc, #692]	@ (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80085d8:	2390      	movs	r3, #144	@ 0x90
 80085da:	58d3      	ldr	r3, [r2, r3]
 80085dc:	2202      	movs	r2, #2
 80085de:	4013      	ands	r3, r2
 80085e0:	2b02      	cmp	r3, #2
 80085e2:	d109      	bne.n	80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
              frequency = LSE_VALUE;
 80085e4:	2380      	movs	r3, #128	@ 0x80
 80085e6:	021b      	lsls	r3, r3, #8
 80085e8:	61fb      	str	r3, [r7, #28]
            break;
 80085ea:	e005      	b.n	80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
            break;
 80085ec:	46c0      	nop			@ (mov r8, r8)
 80085ee:	e1d8      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80085f0:	46c0      	nop			@ (mov r8, r8)
 80085f2:	e1d6      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80085f4:	46c0      	nop			@ (mov r8, r8)
 80085f6:	e1d4      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80085f8:	46c0      	nop			@ (mov r8, r8)
        break;
 80085fa:	e1d2      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80085fc:	4aa3      	ldr	r2, [pc, #652]	@ (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80085fe:	2388      	movs	r3, #136	@ 0x88
 8008600:	58d2      	ldr	r2, [r2, r3]
 8008602:	23c0      	movs	r3, #192	@ 0xc0
 8008604:	039b      	lsls	r3, r3, #14
 8008606:	4013      	ands	r3, r2
 8008608:	617b      	str	r3, [r7, #20]
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	23c0      	movs	r3, #192	@ 0xc0
 800860e:	039b      	lsls	r3, r3, #14
 8008610:	429a      	cmp	r2, r3
 8008612:	d03d      	beq.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008614:	697a      	ldr	r2, [r7, #20]
 8008616:	23c0      	movs	r3, #192	@ 0xc0
 8008618:	039b      	lsls	r3, r3, #14
 800861a:	429a      	cmp	r2, r3
 800861c:	d843      	bhi.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 800861e:	697a      	ldr	r2, [r7, #20]
 8008620:	2380      	movs	r3, #128	@ 0x80
 8008622:	039b      	lsls	r3, r3, #14
 8008624:	429a      	cmp	r2, r3
 8008626:	d027      	beq.n	8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
 8008628:	697a      	ldr	r2, [r7, #20]
 800862a:	2380      	movs	r3, #128	@ 0x80
 800862c:	039b      	lsls	r3, r3, #14
 800862e:	429a      	cmp	r2, r3
 8008630:	d839      	bhi.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d005      	beq.n	8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008638:	697a      	ldr	r2, [r7, #20]
 800863a:	2380      	movs	r3, #128	@ 0x80
 800863c:	035b      	lsls	r3, r3, #13
 800863e:	429a      	cmp	r2, r3
 8008640:	d005      	beq.n	800864e <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
            break;
 8008642:	e030      	b.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
            frequency = HAL_RCC_GetPCLK1Freq();
 8008644:	f7ff f9c2 	bl	80079cc <HAL_RCC_GetPCLK1Freq>
 8008648:	0003      	movs	r3, r0
 800864a:	61fb      	str	r3, [r7, #28]
            break;
 800864c:	e032      	b.n	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800864e:	4a8f      	ldr	r2, [pc, #572]	@ (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008650:	2394      	movs	r3, #148	@ 0x94
 8008652:	58d3      	ldr	r3, [r2, r3]
 8008654:	2202      	movs	r2, #2
 8008656:	4013      	ands	r3, r2
 8008658:	2b02      	cmp	r3, #2
 800865a:	d126      	bne.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 800865c:	4a8b      	ldr	r2, [pc, #556]	@ (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800865e:	2394      	movs	r3, #148	@ 0x94
 8008660:	58d3      	ldr	r3, [r2, r3]
 8008662:	2204      	movs	r2, #4
 8008664:	4013      	ands	r3, r2
 8008666:	2b04      	cmp	r3, #4
 8008668:	d102      	bne.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
                frequency = LSI_VALUE / 128U;
 800866a:	23fa      	movs	r3, #250	@ 0xfa
 800866c:	61fb      	str	r3, [r7, #28]
            break;
 800866e:	e01c      	b.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
                frequency = LSI_VALUE;
 8008670:	23fa      	movs	r3, #250	@ 0xfa
 8008672:	01db      	lsls	r3, r3, #7
 8008674:	61fb      	str	r3, [r7, #28]
            break;
 8008676:	e018      	b.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008678:	4b84      	ldr	r3, [pc, #528]	@ (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	2380      	movs	r3, #128	@ 0x80
 800867e:	00db      	lsls	r3, r3, #3
 8008680:	401a      	ands	r2, r3
 8008682:	2380      	movs	r3, #128	@ 0x80
 8008684:	00db      	lsls	r3, r3, #3
 8008686:	429a      	cmp	r2, r3
 8008688:	d111      	bne.n	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
              frequency = HSI_VALUE;
 800868a:	4b81      	ldr	r3, [pc, #516]	@ (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 800868c:	61fb      	str	r3, [r7, #28]
            break;
 800868e:	e00e      	b.n	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008690:	4a7e      	ldr	r2, [pc, #504]	@ (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008692:	2390      	movs	r3, #144	@ 0x90
 8008694:	58d3      	ldr	r3, [r2, r3]
 8008696:	2202      	movs	r2, #2
 8008698:	4013      	ands	r3, r2
 800869a:	2b02      	cmp	r3, #2
 800869c:	d109      	bne.n	80086b2 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
              frequency = LSE_VALUE;
 800869e:	2380      	movs	r3, #128	@ 0x80
 80086a0:	021b      	lsls	r3, r3, #8
 80086a2:	61fb      	str	r3, [r7, #28]
            break;
 80086a4:	e005      	b.n	80086b2 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
            break;
 80086a6:	46c0      	nop			@ (mov r8, r8)
 80086a8:	e17b      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80086aa:	46c0      	nop			@ (mov r8, r8)
 80086ac:	e179      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80086ae:	46c0      	nop			@ (mov r8, r8)
 80086b0:	e177      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80086b2:	46c0      	nop			@ (mov r8, r8)
        break;
 80086b4:	e175      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80086b6:	4a75      	ldr	r2, [pc, #468]	@ (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80086b8:	2388      	movs	r3, #136	@ 0x88
 80086ba:	58d2      	ldr	r2, [r2, r3]
 80086bc:	23c0      	movs	r3, #192	@ 0xc0
 80086be:	041b      	lsls	r3, r3, #16
 80086c0:	4013      	ands	r3, r2
 80086c2:	617b      	str	r3, [r7, #20]
 80086c4:	697a      	ldr	r2, [r7, #20]
 80086c6:	23c0      	movs	r3, #192	@ 0xc0
 80086c8:	041b      	lsls	r3, r3, #16
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d03d      	beq.n	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 80086ce:	697a      	ldr	r2, [r7, #20]
 80086d0:	23c0      	movs	r3, #192	@ 0xc0
 80086d2:	041b      	lsls	r3, r3, #16
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d843      	bhi.n	8008760 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80086d8:	697a      	ldr	r2, [r7, #20]
 80086da:	2380      	movs	r3, #128	@ 0x80
 80086dc:	041b      	lsls	r3, r3, #16
 80086de:	429a      	cmp	r2, r3
 80086e0:	d027      	beq.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80086e2:	697a      	ldr	r2, [r7, #20]
 80086e4:	2380      	movs	r3, #128	@ 0x80
 80086e6:	041b      	lsls	r3, r3, #16
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d839      	bhi.n	8008760 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d005      	beq.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 80086f2:	697a      	ldr	r2, [r7, #20]
 80086f4:	2380      	movs	r3, #128	@ 0x80
 80086f6:	03db      	lsls	r3, r3, #15
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d005      	beq.n	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
            break;
 80086fc:	e030      	b.n	8008760 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
            frequency = HAL_RCC_GetPCLK1Freq();
 80086fe:	f7ff f965 	bl	80079cc <HAL_RCC_GetPCLK1Freq>
 8008702:	0003      	movs	r3, r0
 8008704:	61fb      	str	r3, [r7, #28]
            break;
 8008706:	e032      	b.n	800876e <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008708:	4a60      	ldr	r2, [pc, #384]	@ (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800870a:	2394      	movs	r3, #148	@ 0x94
 800870c:	58d3      	ldr	r3, [r2, r3]
 800870e:	2202      	movs	r2, #2
 8008710:	4013      	ands	r3, r2
 8008712:	2b02      	cmp	r3, #2
 8008714:	d126      	bne.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8008716:	4a5d      	ldr	r2, [pc, #372]	@ (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008718:	2394      	movs	r3, #148	@ 0x94
 800871a:	58d3      	ldr	r3, [r2, r3]
 800871c:	2204      	movs	r2, #4
 800871e:	4013      	ands	r3, r2
 8008720:	2b04      	cmp	r3, #4
 8008722:	d102      	bne.n	800872a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
                frequency = LSI_VALUE / 128U;
 8008724:	23fa      	movs	r3, #250	@ 0xfa
 8008726:	61fb      	str	r3, [r7, #28]
            break;
 8008728:	e01c      	b.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
                frequency = LSI_VALUE;
 800872a:	23fa      	movs	r3, #250	@ 0xfa
 800872c:	01db      	lsls	r3, r3, #7
 800872e:	61fb      	str	r3, [r7, #28]
            break;
 8008730:	e018      	b.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008732:	4b56      	ldr	r3, [pc, #344]	@ (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	2380      	movs	r3, #128	@ 0x80
 8008738:	00db      	lsls	r3, r3, #3
 800873a:	401a      	ands	r2, r3
 800873c:	2380      	movs	r3, #128	@ 0x80
 800873e:	00db      	lsls	r3, r3, #3
 8008740:	429a      	cmp	r2, r3
 8008742:	d111      	bne.n	8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
              frequency = HSI_VALUE;
 8008744:	4b52      	ldr	r3, [pc, #328]	@ (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 8008746:	61fb      	str	r3, [r7, #28]
            break;
 8008748:	e00e      	b.n	8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800874a:	4a50      	ldr	r2, [pc, #320]	@ (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800874c:	2390      	movs	r3, #144	@ 0x90
 800874e:	58d3      	ldr	r3, [r2, r3]
 8008750:	2202      	movs	r2, #2
 8008752:	4013      	ands	r3, r2
 8008754:	2b02      	cmp	r3, #2
 8008756:	d109      	bne.n	800876c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
              frequency = LSE_VALUE;
 8008758:	2380      	movs	r3, #128	@ 0x80
 800875a:	021b      	lsls	r3, r3, #8
 800875c:	61fb      	str	r3, [r7, #28]
            break;
 800875e:	e005      	b.n	800876c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
            break;
 8008760:	46c0      	nop			@ (mov r8, r8)
 8008762:	e11e      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008764:	46c0      	nop			@ (mov r8, r8)
 8008766:	e11c      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008768:	46c0      	nop			@ (mov r8, r8)
 800876a:	e11a      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800876c:	46c0      	nop			@ (mov r8, r8)
        break;
 800876e:	e118      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 8008770:	4a46      	ldr	r2, [pc, #280]	@ (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008772:	2388      	movs	r3, #136	@ 0x88
 8008774:	58d2      	ldr	r2, [r2, r3]
 8008776:	2380      	movs	r3, #128	@ 0x80
 8008778:	045b      	lsls	r3, r3, #17
 800877a:	4013      	ands	r3, r2
 800877c:	617b      	str	r3, [r7, #20]
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d005      	beq.n	8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8008784:	697a      	ldr	r2, [r7, #20]
 8008786:	2380      	movs	r3, #128	@ 0x80
 8008788:	045b      	lsls	r3, r3, #17
 800878a:	429a      	cmp	r2, r3
 800878c:	d011      	beq.n	80087b2 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
            break;
 800878e:	e019      	b.n	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8008790:	4b3e      	ldr	r3, [pc, #248]	@ (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008792:	689a      	ldr	r2, [r3, #8]
 8008794:	23e0      	movs	r3, #224	@ 0xe0
 8008796:	01db      	lsls	r3, r3, #7
 8008798:	4013      	ands	r3, r2
 800879a:	d104      	bne.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
              frequency = HAL_RCC_GetPCLK1Freq();
 800879c:	f7ff f916 	bl	80079cc <HAL_RCC_GetPCLK1Freq>
 80087a0:	0003      	movs	r3, r0
 80087a2:	61fb      	str	r3, [r7, #28]
            break;
 80087a4:	e00e      	b.n	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 80087a6:	f7ff f911 	bl	80079cc <HAL_RCC_GetPCLK1Freq>
 80087aa:	0003      	movs	r3, r0
 80087ac:	005b      	lsls	r3, r3, #1
 80087ae:	61fb      	str	r3, [r7, #28]
            break;
 80087b0:	e008      	b.n	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80087b2:	2408      	movs	r4, #8
 80087b4:	193b      	adds	r3, r7, r4
 80087b6:	0018      	movs	r0, r3
 80087b8:	f000 f8fe 	bl	80089b8 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 80087bc:	193b      	adds	r3, r7, r4
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	61fb      	str	r3, [r7, #28]
            break;
 80087c2:	46c0      	nop			@ (mov r8, r8)
        break;
 80087c4:	e0ed      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 80087c6:	4a31      	ldr	r2, [pc, #196]	@ (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80087c8:	2388      	movs	r3, #136	@ 0x88
 80087ca:	58d2      	ldr	r2, [r2, r3]
 80087cc:	2380      	movs	r3, #128	@ 0x80
 80087ce:	049b      	lsls	r3, r3, #18
 80087d0:	4013      	ands	r3, r2
 80087d2:	617b      	str	r3, [r7, #20]
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d005      	beq.n	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 80087da:	697a      	ldr	r2, [r7, #20]
 80087dc:	2380      	movs	r3, #128	@ 0x80
 80087de:	049b      	lsls	r3, r3, #18
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d011      	beq.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
            break;
 80087e4:	e019      	b.n	800881a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 80087e6:	4b29      	ldr	r3, [pc, #164]	@ (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80087e8:	689a      	ldr	r2, [r3, #8]
 80087ea:	23e0      	movs	r3, #224	@ 0xe0
 80087ec:	01db      	lsls	r3, r3, #7
 80087ee:	4013      	ands	r3, r2
 80087f0:	d104      	bne.n	80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
              frequency = HAL_RCC_GetPCLK1Freq();
 80087f2:	f7ff f8eb 	bl	80079cc <HAL_RCC_GetPCLK1Freq>
 80087f6:	0003      	movs	r3, r0
 80087f8:	61fb      	str	r3, [r7, #28]
            break;
 80087fa:	e00e      	b.n	800881a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 80087fc:	f7ff f8e6 	bl	80079cc <HAL_RCC_GetPCLK1Freq>
 8008800:	0003      	movs	r3, r0
 8008802:	005b      	lsls	r3, r3, #1
 8008804:	61fb      	str	r3, [r7, #28]
            break;
 8008806:	e008      	b.n	800881a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8008808:	2408      	movs	r4, #8
 800880a:	193b      	adds	r3, r7, r4
 800880c:	0018      	movs	r0, r3
 800880e:	f000 f8d3 	bl	80089b8 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8008812:	193b      	adds	r3, r7, r4
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	61fb      	str	r3, [r7, #28]
            break;
 8008818:	46c0      	nop			@ (mov r8, r8)
        break;
 800881a:	e0c2      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800881c:	4a1b      	ldr	r2, [pc, #108]	@ (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800881e:	2388      	movs	r3, #136	@ 0x88
 8008820:	58d2      	ldr	r2, [r2, r3]
 8008822:	23c0      	movs	r3, #192	@ 0xc0
 8008824:	051b      	lsls	r3, r3, #20
 8008826:	4013      	ands	r3, r2
 8008828:	617b      	str	r3, [r7, #20]
 800882a:	697a      	ldr	r2, [r7, #20]
 800882c:	23c0      	movs	r3, #192	@ 0xc0
 800882e:	051b      	lsls	r3, r3, #20
 8008830:	429a      	cmp	r2, r3
 8008832:	d017      	beq.n	8008864 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	23c0      	movs	r3, #192	@ 0xc0
 8008838:	051b      	lsls	r3, r3, #20
 800883a:	429a      	cmp	r2, r3
 800883c:	d84a      	bhi.n	80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 800883e:	697a      	ldr	r2, [r7, #20]
 8008840:	2380      	movs	r3, #128	@ 0x80
 8008842:	051b      	lsls	r3, r3, #20
 8008844:	429a      	cmp	r2, r3
 8008846:	d039      	beq.n	80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8008848:	697a      	ldr	r2, [r7, #20]
 800884a:	2380      	movs	r3, #128	@ 0x80
 800884c:	051b      	lsls	r3, r3, #20
 800884e:	429a      	cmp	r2, r3
 8008850:	d840      	bhi.n	80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d03a      	beq.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0x9ae>
 8008858:	697a      	ldr	r2, [r7, #20]
 800885a:	2380      	movs	r3, #128	@ 0x80
 800885c:	04db      	lsls	r3, r3, #19
 800885e:	429a      	cmp	r2, r3
 8008860:	d003      	beq.n	800886a <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
            break;
 8008862:	e037      	b.n	80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
            frequency = HSI48_VALUE;
 8008864:	4b0b      	ldr	r3, [pc, #44]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x974>)
 8008866:	61fb      	str	r3, [r7, #28]
            break;
 8008868:	e037      	b.n	80088da <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800886a:	4b08      	ldr	r3, [pc, #32]	@ (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2202      	movs	r2, #2
 8008870:	4013      	ands	r3, r2
 8008872:	2b02      	cmp	r3, #2
 8008874:	d130      	bne.n	80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8008876:	4b05      	ldr	r3, [pc, #20]	@ (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	2208      	movs	r2, #8
 800887c:	4013      	ands	r3, r2
 800887e:	d00b      	beq.n	8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8008880:	4b02      	ldr	r3, [pc, #8]	@ (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	091b      	lsrs	r3, r3, #4
 8008886:	220f      	movs	r2, #15
 8008888:	4013      	ands	r3, r2
 800888a:	e00b      	b.n	80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
 800888c:	40021000 	.word	0x40021000
 8008890:	00f42400 	.word	0x00f42400
 8008894:	02dc6c00 	.word	0x02dc6c00
 8008898:	4a44      	ldr	r2, [pc, #272]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 800889a:	2394      	movs	r3, #148	@ 0x94
 800889c:	58d3      	ldr	r3, [r2, r3]
 800889e:	0a1b      	lsrs	r3, r3, #8
 80088a0:	220f      	movs	r2, #15
 80088a2:	4013      	ands	r3, r2
 80088a4:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 80088a6:	69bb      	ldr	r3, [r7, #24]
 80088a8:	2b0b      	cmp	r3, #11
 80088aa:	d901      	bls.n	80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
                msirange = 11U;
 80088ac:	230b      	movs	r3, #11
 80088ae:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 80088b0:	4b3f      	ldr	r3, [pc, #252]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 80088b2:	69ba      	ldr	r2, [r7, #24]
 80088b4:	0092      	lsls	r2, r2, #2
 80088b6:	58d3      	ldr	r3, [r2, r3]
 80088b8:	61fb      	str	r3, [r7, #28]
            break;
 80088ba:	e00d      	b.n	80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80088bc:	2408      	movs	r4, #8
 80088be:	193b      	adds	r3, r7, r4
 80088c0:	0018      	movs	r0, r3
 80088c2:	f000 f879 	bl	80089b8 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 80088c6:	193b      	adds	r3, r7, r4
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	61fb      	str	r3, [r7, #28]
            break;
 80088cc:	e005      	b.n	80088da <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            frequency = 0U;
 80088ce:	2300      	movs	r3, #0
 80088d0:	61fb      	str	r3, [r7, #28]
            break;
 80088d2:	e002      	b.n	80088da <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            break;
 80088d4:	46c0      	nop			@ (mov r8, r8)
 80088d6:	e064      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80088d8:	46c0      	nop			@ (mov r8, r8)
        break;
 80088da:	e062      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80088dc:	4a33      	ldr	r2, [pc, #204]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80088de:	2388      	movs	r3, #136	@ 0x88
 80088e0:	58d2      	ldr	r2, [r2, r3]
 80088e2:	23c0      	movs	r3, #192	@ 0xc0
 80088e4:	051b      	lsls	r3, r3, #20
 80088e6:	4013      	ands	r3, r2
 80088e8:	617b      	str	r3, [r7, #20]
 80088ea:	697a      	ldr	r2, [r7, #20]
 80088ec:	23c0      	movs	r3, #192	@ 0xc0
 80088ee:	051b      	lsls	r3, r3, #20
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d017      	beq.n	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0xa04>
 80088f4:	697a      	ldr	r2, [r7, #20]
 80088f6:	23c0      	movs	r3, #192	@ 0xc0
 80088f8:	051b      	lsls	r3, r3, #20
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d844      	bhi.n	8008988 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 80088fe:	697a      	ldr	r2, [r7, #20]
 8008900:	2380      	movs	r3, #128	@ 0x80
 8008902:	051b      	lsls	r3, r3, #20
 8008904:	429a      	cmp	r2, r3
 8008906:	d033      	beq.n	8008970 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8008908:	697a      	ldr	r2, [r7, #20]
 800890a:	2380      	movs	r3, #128	@ 0x80
 800890c:	051b      	lsls	r3, r3, #20
 800890e:	429a      	cmp	r2, r3
 8008910:	d83a      	bhi.n	8008988 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d034      	beq.n	8008982 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8008918:	697a      	ldr	r2, [r7, #20]
 800891a:	2380      	movs	r3, #128	@ 0x80
 800891c:	04db      	lsls	r3, r3, #19
 800891e:	429a      	cmp	r2, r3
 8008920:	d003      	beq.n	800892a <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
            break;
 8008922:	e031      	b.n	8008988 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            frequency = HSI48_VALUE;
 8008924:	4b23      	ldr	r3, [pc, #140]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 8008926:	61fb      	str	r3, [r7, #28]
            break;
 8008928:	e031      	b.n	800898e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800892a:	4b20      	ldr	r3, [pc, #128]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2202      	movs	r2, #2
 8008930:	4013      	ands	r3, r2
 8008932:	2b02      	cmp	r3, #2
 8008934:	d12a      	bne.n	800898c <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8008936:	4b1d      	ldr	r3, [pc, #116]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2208      	movs	r2, #8
 800893c:	4013      	ands	r3, r2
 800893e:	d005      	beq.n	800894c <HAL_RCCEx_GetPeriphCLKFreq+0xa2c>
 8008940:	4b1a      	ldr	r3, [pc, #104]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	091b      	lsrs	r3, r3, #4
 8008946:	220f      	movs	r2, #15
 8008948:	4013      	ands	r3, r2
 800894a:	e005      	b.n	8008958 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 800894c:	4a17      	ldr	r2, [pc, #92]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 800894e:	2394      	movs	r3, #148	@ 0x94
 8008950:	58d3      	ldr	r3, [r2, r3]
 8008952:	0a1b      	lsrs	r3, r3, #8
 8008954:	220f      	movs	r2, #15
 8008956:	4013      	ands	r3, r2
 8008958:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	2b0b      	cmp	r3, #11
 800895e:	d901      	bls.n	8008964 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
                msirange = 11U;
 8008960:	230b      	movs	r3, #11
 8008962:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 8008964:	4b12      	ldr	r3, [pc, #72]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 8008966:	69ba      	ldr	r2, [r7, #24]
 8008968:	0092      	lsls	r2, r2, #2
 800896a:	58d3      	ldr	r3, [r2, r3]
 800896c:	61fb      	str	r3, [r7, #28]
            break;
 800896e:	e00d      	b.n	800898c <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8008970:	2408      	movs	r4, #8
 8008972:	193b      	adds	r3, r7, r4
 8008974:	0018      	movs	r0, r3
 8008976:	f000 f81f 	bl	80089b8 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 800897a:	193b      	adds	r3, r7, r4
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	61fb      	str	r3, [r7, #28]
            break;
 8008980:	e005      	b.n	800898e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = 0U;
 8008982:	2300      	movs	r3, #0
 8008984:	61fb      	str	r3, [r7, #28]
            break;
 8008986:	e002      	b.n	800898e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            break;
 8008988:	46c0      	nop			@ (mov r8, r8)
 800898a:	e00a      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800898c:	46c0      	nop			@ (mov r8, r8)
        break;
 800898e:	e008      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8008990:	46c0      	nop			@ (mov r8, r8)
 8008992:	e006      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8008994:	46c0      	nop			@ (mov r8, r8)
 8008996:	e004      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8008998:	46c0      	nop			@ (mov r8, r8)
 800899a:	e002      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 800899c:	46c0      	nop			@ (mov r8, r8)
 800899e:	e000      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80089a0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return (frequency);
 80089a2:	69fb      	ldr	r3, [r7, #28]
}
 80089a4:	0018      	movs	r0, r3
 80089a6:	46bd      	mov	sp, r7
 80089a8:	b009      	add	sp, #36	@ 0x24
 80089aa:	bd90      	pop	{r4, r7, pc}
 80089ac:	40021000 	.word	0x40021000
 80089b0:	08010048 	.word	0x08010048
 80089b4:	02dc6c00 	.word	0x02dc6c00

080089b8 <HAL_RCCEx_GetPLLClockFreq>:
  * @param  PLL_Clocks structure.
  * @retval None
  */

void HAL_RCCEx_GetPLLClockFreq(PLL_ClocksTypeDef *PLL_Clocks)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b088      	sub	sp, #32
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  uint32_t pllm;
  uint32_t plln;
  uint32_t pllvco;
  uint32_t msirange;

  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80089c0:	4b58      	ldr	r3, [pc, #352]	@ (8008b24 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	0a1b      	lsrs	r3, r3, #8
 80089c6:	227f      	movs	r2, #127	@ 0x7f
 80089c8:	4013      	ands	r3, r2
 80089ca:	617b      	str	r3, [r7, #20]
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80089cc:	4b55      	ldr	r3, [pc, #340]	@ (8008b24 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	2203      	movs	r2, #3
 80089d2:	4013      	ands	r3, r2
 80089d4:	613b      	str	r3, [r7, #16]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 80089d6:	4b53      	ldr	r3, [pc, #332]	@ (8008b24 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	091b      	lsrs	r3, r3, #4
 80089dc:	2207      	movs	r2, #7
 80089de:	4013      	ands	r3, r2
 80089e0:	3301      	adds	r3, #1
 80089e2:	60fb      	str	r3, [r7, #12]
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 80089e4:	4b4f      	ldr	r3, [pc, #316]	@ (8008b24 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2208      	movs	r2, #8
 80089ea:	4013      	ands	r3, r2
 80089ec:	d005      	beq.n	80089fa <HAL_RCCEx_GetPLLClockFreq+0x42>
 80089ee:	4b4d      	ldr	r3, [pc, #308]	@ (8008b24 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	091b      	lsrs	r3, r3, #4
 80089f4:	220f      	movs	r2, #15
 80089f6:	4013      	ands	r3, r2
 80089f8:	e005      	b.n	8008a06 <HAL_RCCEx_GetPLLClockFreq+0x4e>
 80089fa:	4a4a      	ldr	r2, [pc, #296]	@ (8008b24 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80089fc:	2394      	movs	r3, #148	@ 0x94
 80089fe:	58d3      	ldr	r3, [r2, r3]
 8008a00:	0a1b      	lsrs	r3, r3, #8
 8008a02:	220f      	movs	r2, #15
 8008a04:	4013      	ands	r3, r2
 8008a06:	61bb      	str	r3, [r7, #24]
  if (msirange > 11U)
 8008a08:	69bb      	ldr	r3, [r7, #24]
 8008a0a:	2b0b      	cmp	r3, #11
 8008a0c:	d901      	bls.n	8008a12 <HAL_RCCEx_GetPLLClockFreq+0x5a>
  {
    msirange = 11U;
 8008a0e:	230b      	movs	r3, #11
 8008a10:	61bb      	str	r3, [r7, #24]
  }
  switch (pllsource)
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	2b03      	cmp	r3, #3
 8008a16:	d020      	beq.n	8008a5a <HAL_RCCEx_GetPLLClockFreq+0xa2>
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	2b03      	cmp	r3, #3
 8008a1c:	d827      	bhi.n	8008a6e <HAL_RCCEx_GetPLLClockFreq+0xb6>
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d00c      	beq.n	8008a3e <HAL_RCCEx_GetPLLClockFreq+0x86>
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	2b02      	cmp	r3, #2
 8008a28:	d121      	bne.n	8008a6e <HAL_RCCEx_GetPLLClockFreq+0xb6>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * plln;
 8008a2a:	68f9      	ldr	r1, [r7, #12]
 8008a2c:	483e      	ldr	r0, [pc, #248]	@ (8008b28 <HAL_RCCEx_GetPLLClockFreq+0x170>)
 8008a2e:	f7f7 fb87 	bl	8000140 <__udivsi3>
 8008a32:	0003      	movs	r3, r0
 8008a34:	001a      	movs	r2, r3
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	4353      	muls	r3, r2
 8008a3a:	61fb      	str	r3, [r7, #28]
      break;
 8008a3c:	e025      	b.n	8008a8a <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8008a3e:	4b3b      	ldr	r3, [pc, #236]	@ (8008b2c <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8008a40:	69ba      	ldr	r2, [r7, #24]
 8008a42:	0092      	lsls	r2, r2, #2
 8008a44:	58d3      	ldr	r3, [r2, r3]
 8008a46:	68f9      	ldr	r1, [r7, #12]
 8008a48:	0018      	movs	r0, r3
 8008a4a:	f7f7 fb79 	bl	8000140 <__udivsi3>
 8008a4e:	0003      	movs	r3, r0
 8008a50:	001a      	movs	r2, r3
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	4353      	muls	r3, r2
 8008a56:	61fb      	str	r3, [r7, #28]
      break;
 8008a58:	e017      	b.n	8008a8a <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * plln;
 8008a5a:	68f9      	ldr	r1, [r7, #12]
 8008a5c:	4834      	ldr	r0, [pc, #208]	@ (8008b30 <HAL_RCCEx_GetPLLClockFreq+0x178>)
 8008a5e:	f7f7 fb6f 	bl	8000140 <__udivsi3>
 8008a62:	0003      	movs	r3, r0
 8008a64:	001a      	movs	r2, r3
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	4353      	muls	r3, r2
 8008a6a:	61fb      	str	r3, [r7, #28]
      break;
 8008a6c:	e00d      	b.n	8008a8a <HAL_RCCEx_GetPLLClockFreq+0xd2>

    default:
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8008a6e:	4b2f      	ldr	r3, [pc, #188]	@ (8008b2c <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8008a70:	69ba      	ldr	r2, [r7, #24]
 8008a72:	0092      	lsls	r2, r2, #2
 8008a74:	58d3      	ldr	r3, [r2, r3]
 8008a76:	68f9      	ldr	r1, [r7, #12]
 8008a78:	0018      	movs	r0, r3
 8008a7a:	f7f7 fb61 	bl	8000140 <__udivsi3>
 8008a7e:	0003      	movs	r3, r0
 8008a80:	001a      	movs	r2, r3
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	4353      	muls	r3, r2
 8008a86:	61fb      	str	r3, [r7, #28]
      break;
 8008a88:	46c0      	nop			@ (mov r8, r8)
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 8008a8a:	4b26      	ldr	r3, [pc, #152]	@ (8008b24 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008a8c:	68da      	ldr	r2, [r3, #12]
 8008a8e:	2380      	movs	r3, #128	@ 0x80
 8008a90:	025b      	lsls	r3, r3, #9
 8008a92:	4013      	ands	r3, r2
 8008a94:	d00e      	beq.n	8008ab4 <HAL_RCCEx_GetPLLClockFreq+0xfc>
  {
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8008a96:	4b23      	ldr	r3, [pc, #140]	@ (8008b24 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008a98:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLP_Pos) + 1U));
 8008a9a:	0c5b      	lsrs	r3, r3, #17
 8008a9c:	221f      	movs	r2, #31
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	3301      	adds	r3, #1
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8008aa2:	0019      	movs	r1, r3
 8008aa4:	69f8      	ldr	r0, [r7, #28]
 8008aa6:	f7f7 fb4b 	bl	8000140 <__udivsi3>
 8008aaa:	0003      	movs	r3, r0
 8008aac:	001a      	movs	r2, r3
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	601a      	str	r2, [r3, #0]
 8008ab2:	e002      	b.n	8008aba <HAL_RCCEx_GetPLLClockFreq+0x102>
  }
  else
  {
    PLL_Clocks->PLL_P_Frequency = 0;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVQ) != 0U)
 8008aba:	4b1a      	ldr	r3, [pc, #104]	@ (8008b24 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008abc:	68da      	ldr	r2, [r3, #12]
 8008abe:	2380      	movs	r3, #128	@ 0x80
 8008ac0:	045b      	lsls	r3, r3, #17
 8008ac2:	4013      	ands	r3, r2
 8008ac4:	d00e      	beq.n	8008ae4 <HAL_RCCEx_GetPLLClockFreq+0x12c>
  {
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8008ac6:	4b17      	ldr	r3, [pc, #92]	@ (8008b24 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008ac8:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLQ_Pos) + 1U));
 8008aca:	0e5b      	lsrs	r3, r3, #25
 8008acc:	2207      	movs	r2, #7
 8008ace:	4013      	ands	r3, r2
 8008ad0:	3301      	adds	r3, #1
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8008ad2:	0019      	movs	r1, r3
 8008ad4:	69f8      	ldr	r0, [r7, #28]
 8008ad6:	f7f7 fb33 	bl	8000140 <__udivsi3>
 8008ada:	0003      	movs	r3, r0
 8008adc:	001a      	movs	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	605a      	str	r2, [r3, #4]
 8008ae2:	e002      	b.n	8008aea <HAL_RCCEx_GetPLLClockFreq+0x132>
  }
  else
  {
    PLL_Clocks->PLL_Q_Frequency = 0;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVR) != 0U)
 8008aea:	4b0e      	ldr	r3, [pc, #56]	@ (8008b24 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008aec:	68da      	ldr	r2, [r3, #12]
 8008aee:	2380      	movs	r3, #128	@ 0x80
 8008af0:	055b      	lsls	r3, r3, #21
 8008af2:	4013      	ands	r3, r2
 8008af4:	d00e      	beq.n	8008b14 <HAL_RCCEx_GetPLLClockFreq+0x15c>
  {
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8008af6:	4b0b      	ldr	r3, [pc, #44]	@ (8008b24 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008af8:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLR_Pos) + 1U));
 8008afa:	0f5b      	lsrs	r3, r3, #29
 8008afc:	2207      	movs	r2, #7
 8008afe:	4013      	ands	r3, r2
 8008b00:	3301      	adds	r3, #1
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8008b02:	0019      	movs	r1, r3
 8008b04:	69f8      	ldr	r0, [r7, #28]
 8008b06:	f7f7 fb1b 	bl	8000140 <__udivsi3>
 8008b0a:	0003      	movs	r3, r0
 8008b0c:	001a      	movs	r2, r3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL_Clocks->PLL_R_Frequency = 0;
  }
}
 8008b12:	e002      	b.n	8008b1a <HAL_RCCEx_GetPLLClockFreq+0x162>
    PLL_Clocks->PLL_R_Frequency = 0;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	609a      	str	r2, [r3, #8]
}
 8008b1a:	46c0      	nop			@ (mov r8, r8)
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	b008      	add	sp, #32
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	46c0      	nop			@ (mov r8, r8)
 8008b24:	40021000 	.word	0x40021000
 8008b28:	00f42400 	.word	0x00f42400
 8008b2c:	08010048 	.word	0x08010048
 8008b30:	003d0900 	.word	0x003d0900

08008b34 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008b3c:	210f      	movs	r1, #15
 8008b3e:	187b      	adds	r3, r7, r1
 8008b40:	2201      	movs	r2, #1
 8008b42:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d100      	bne.n	8008b4c <HAL_RTC_Init+0x18>
 8008b4a:	e08b      	b.n	8008c64 <HAL_RTC_Init+0x130>
  {
    status = HAL_OK;
 8008b4c:	187b      	adds	r3, r7, r1
 8008b4e:	2200      	movs	r2, #0
 8008b50:	701a      	strb	r2, [r3, #0]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	222d      	movs	r2, #45	@ 0x2d
 8008b56:	5c9b      	ldrb	r3, [r3, r2]
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d107      	bne.n	8008b6e <HAL_RTC_Init+0x3a>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	222c      	movs	r2, #44	@ 0x2c
 8008b62:	2100      	movs	r1, #0
 8008b64:	5499      	strb	r1, [r3, r2]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	0018      	movs	r0, r3
 8008b6a:	f7fc fe0f 	bl	800578c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	222d      	movs	r2, #45	@ 0x2d
 8008b72:	2102      	movs	r1, #2
 8008b74:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b76:	4b3f      	ldr	r3, [pc, #252]	@ (8008c74 <HAL_RTC_Init+0x140>)
 8008b78:	22ca      	movs	r2, #202	@ 0xca
 8008b7a:	625a      	str	r2, [r3, #36]	@ 0x24
 8008b7c:	4b3d      	ldr	r3, [pc, #244]	@ (8008c74 <HAL_RTC_Init+0x140>)
 8008b7e:	2253      	movs	r2, #83	@ 0x53
 8008b80:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	0018      	movs	r0, r3
 8008b86:	f000 f8a1 	bl	8008ccc <RTC_EnterInitMode>
 8008b8a:	1e03      	subs	r3, r0, #0
 8008b8c:	d00b      	beq.n	8008ba6 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b8e:	4b39      	ldr	r3, [pc, #228]	@ (8008c74 <HAL_RTC_Init+0x140>)
 8008b90:	22ff      	movs	r2, #255	@ 0xff
 8008b92:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	222d      	movs	r2, #45	@ 0x2d
 8008b98:	2104      	movs	r1, #4
 8008b9a:	5499      	strb	r1, [r3, r2]

      status = HAL_ERROR;
 8008b9c:	230f      	movs	r3, #15
 8008b9e:	18fb      	adds	r3, r7, r3
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	701a      	strb	r2, [r3, #0]
 8008ba4:	e05e      	b.n	8008c64 <HAL_RTC_Init+0x130>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8008ba6:	4b33      	ldr	r3, [pc, #204]	@ (8008c74 <HAL_RTC_Init+0x140>)
 8008ba8:	699a      	ldr	r2, [r3, #24]
 8008baa:	4b32      	ldr	r3, [pc, #200]	@ (8008c74 <HAL_RTC_Init+0x140>)
 8008bac:	4932      	ldr	r1, [pc, #200]	@ (8008c78 <HAL_RTC_Init+0x144>)
 8008bae:	400a      	ands	r2, r1
 8008bb0:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8008bb2:	4b30      	ldr	r3, [pc, #192]	@ (8008c74 <HAL_RTC_Init+0x140>)
 8008bb4:	6999      	ldr	r1, [r3, #24]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	685a      	ldr	r2, [r3, #4]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	431a      	orrs	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	699b      	ldr	r3, [r3, #24]
 8008bc4:	431a      	orrs	r2, r3
 8008bc6:	4b2b      	ldr	r3, [pc, #172]	@ (8008c74 <HAL_RTC_Init+0x140>)
 8008bc8:	430a      	orrs	r2, r1
 8008bca:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	68d9      	ldr	r1, [r3, #12]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	041a      	lsls	r2, r3, #16
 8008bd6:	4b27      	ldr	r3, [pc, #156]	@ (8008c74 <HAL_RTC_Init+0x140>)
 8008bd8:	430a      	orrs	r2, r1
 8008bda:	611a      	str	r2, [r3, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8008bdc:	4b25      	ldr	r3, [pc, #148]	@ (8008c74 <HAL_RTC_Init+0x140>)
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	4a26      	ldr	r2, [pc, #152]	@ (8008c7c <HAL_RTC_Init+0x148>)
 8008be2:	4013      	ands	r3, r2
 8008be4:	0019      	movs	r1, r3
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bee:	431a      	orrs	r2, r3
 8008bf0:	4b20      	ldr	r3, [pc, #128]	@ (8008c74 <HAL_RTC_Init+0x140>)
 8008bf2:	430a      	orrs	r2, r1
 8008bf4:	60da      	str	r2, [r3, #12]

      /* Exit Initialization mode */
      CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008bf6:	4b1f      	ldr	r3, [pc, #124]	@ (8008c74 <HAL_RTC_Init+0x140>)
 8008bf8:	68da      	ldr	r2, [r3, #12]
 8008bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8008c74 <HAL_RTC_Init+0x140>)
 8008bfc:	2180      	movs	r1, #128	@ 0x80
 8008bfe:	438a      	bics	r2, r1
 8008c00:	60da      	str	r2, [r3, #12]

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008c02:	4b1c      	ldr	r3, [pc, #112]	@ (8008c74 <HAL_RTC_Init+0x140>)
 8008c04:	699b      	ldr	r3, [r3, #24]
 8008c06:	2220      	movs	r2, #32
 8008c08:	4013      	ands	r3, r2
 8008c0a:	d110      	bne.n	8008c2e <HAL_RTC_Init+0xfa>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	0018      	movs	r0, r3
 8008c10:	f000 f836 	bl	8008c80 <HAL_RTC_WaitForSynchro>
 8008c14:	1e03      	subs	r3, r0, #0
 8008c16:	d00a      	beq.n	8008c2e <HAL_RTC_Init+0xfa>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c18:	4b16      	ldr	r3, [pc, #88]	@ (8008c74 <HAL_RTC_Init+0x140>)
 8008c1a:	22ff      	movs	r2, #255	@ 0xff
 8008c1c:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	222d      	movs	r2, #45	@ 0x2d
 8008c22:	2104      	movs	r1, #4
 8008c24:	5499      	strb	r1, [r3, r2]
          status = HAL_ERROR;
 8008c26:	230f      	movs	r3, #15
 8008c28:	18fb      	adds	r3, r7, r3
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	701a      	strb	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 8008c2e:	230f      	movs	r3, #15
 8008c30:	18fb      	adds	r3, r7, r3
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d115      	bne.n	8008c64 <HAL_RTC_Init+0x130>
      {
        MODIFY_REG(RTC->CR, \
 8008c38:	4b0e      	ldr	r3, [pc, #56]	@ (8008c74 <HAL_RTC_Init+0x140>)
 8008c3a:	699b      	ldr	r3, [r3, #24]
 8008c3c:	00db      	lsls	r3, r3, #3
 8008c3e:	08d9      	lsrs	r1, r3, #3
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6a1a      	ldr	r2, [r3, #32]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	69db      	ldr	r3, [r3, #28]
 8008c48:	431a      	orrs	r2, r3
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	695b      	ldr	r3, [r3, #20]
 8008c4e:	431a      	orrs	r2, r3
 8008c50:	4b08      	ldr	r3, [pc, #32]	@ (8008c74 <HAL_RTC_Init+0x140>)
 8008c52:	430a      	orrs	r2, r1
 8008c54:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c56:	4b07      	ldr	r3, [pc, #28]	@ (8008c74 <HAL_RTC_Init+0x140>)
 8008c58:	22ff      	movs	r2, #255	@ 0xff
 8008c5a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	222d      	movs	r2, #45	@ 0x2d
 8008c60:	2101      	movs	r1, #1
 8008c62:	5499      	strb	r1, [r3, r2]
      }
    }
  }

  return status;
 8008c64:	230f      	movs	r3, #15
 8008c66:	18fb      	adds	r3, r7, r3
 8008c68:	781b      	ldrb	r3, [r3, #0]
}
 8008c6a:	0018      	movs	r0, r3
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	b004      	add	sp, #16
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	46c0      	nop			@ (mov r8, r8)
 8008c74:	40002800 	.word	0x40002800
 8008c78:	fb8fffbf 	.word	0xfb8fffbf
 8008c7c:	ffffe0ff 	.word	0xffffe0ff

08008c80 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(const RTC_HandleTypeDef *hrtc)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8008c88:	4b0f      	ldr	r3, [pc, #60]	@ (8008cc8 <HAL_RTC_WaitForSynchro+0x48>)
 8008c8a:	68da      	ldr	r2, [r3, #12]
 8008c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8008cc8 <HAL_RTC_WaitForSynchro+0x48>)
 8008c8e:	2120      	movs	r1, #32
 8008c90:	438a      	bics	r2, r1
 8008c92:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008c94:	f7fd f8b0 	bl	8005df8 <HAL_GetTick>
 8008c98:	0003      	movs	r3, r0
 8008c9a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008c9c:	e00a      	b.n	8008cb4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008c9e:	f7fd f8ab 	bl	8005df8 <HAL_GetTick>
 8008ca2:	0002      	movs	r2, r0
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	1ad2      	subs	r2, r2, r3
 8008ca8:	23fa      	movs	r3, #250	@ 0xfa
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d901      	bls.n	8008cb4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8008cb0:	2303      	movs	r3, #3
 8008cb2:	e005      	b.n	8008cc0 <HAL_RTC_WaitForSynchro+0x40>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008cb4:	4b04      	ldr	r3, [pc, #16]	@ (8008cc8 <HAL_RTC_WaitForSynchro+0x48>)
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	2220      	movs	r2, #32
 8008cba:	4013      	ands	r3, r2
 8008cbc:	d0ef      	beq.n	8008c9e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	0018      	movs	r0, r3
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	b004      	add	sp, #16
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	40002800 	.word	0x40002800

08008ccc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(const RTC_HandleTypeDef *hrtc)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008cd4:	4b12      	ldr	r3, [pc, #72]	@ (8008d20 <RTC_EnterInitMode+0x54>)
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	2240      	movs	r2, #64	@ 0x40
 8008cda:	4013      	ands	r3, r2
 8008cdc:	d11a      	bne.n	8008d14 <RTC_EnterInitMode+0x48>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008cde:	4b10      	ldr	r3, [pc, #64]	@ (8008d20 <RTC_EnterInitMode+0x54>)
 8008ce0:	68da      	ldr	r2, [r3, #12]
 8008ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8008d20 <RTC_EnterInitMode+0x54>)
 8008ce4:	2180      	movs	r1, #128	@ 0x80
 8008ce6:	430a      	orrs	r2, r1
 8008ce8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008cea:	f7fd f885 	bl	8005df8 <HAL_GetTick>
 8008cee:	0003      	movs	r3, r0
 8008cf0:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008cf2:	e00a      	b.n	8008d0a <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008cf4:	f7fd f880 	bl	8005df8 <HAL_GetTick>
 8008cf8:	0002      	movs	r2, r0
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	1ad2      	subs	r2, r2, r3
 8008cfe:	23fa      	movs	r3, #250	@ 0xfa
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d901      	bls.n	8008d0a <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8008d06:	2303      	movs	r3, #3
 8008d08:	e005      	b.n	8008d16 <RTC_EnterInitMode+0x4a>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008d0a:	4b05      	ldr	r3, [pc, #20]	@ (8008d20 <RTC_EnterInitMode+0x54>)
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	2240      	movs	r2, #64	@ 0x40
 8008d10:	4013      	ands	r3, r2
 8008d12:	d0ef      	beq.n	8008cf4 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8008d14:	2300      	movs	r3, #0
}
 8008d16:	0018      	movs	r0, r3
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	b004      	add	sp, #16
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	46c0      	nop			@ (mov r8, r8)
 8008d20:	40002800 	.word	0x40002800

08008d24 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b086      	sub	sp, #24
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	222c      	movs	r2, #44	@ 0x2c
 8008d34:	5c9b      	ldrb	r3, [r3, r2]
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d101      	bne.n	8008d3e <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8008d3a:	2302      	movs	r3, #2
 8008d3c:	e06c      	b.n	8008e18 <HAL_RTCEx_SetWakeUpTimer+0xf4>
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	222c      	movs	r2, #44	@ 0x2c
 8008d42:	2101      	movs	r1, #1
 8008d44:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	222d      	movs	r2, #45	@ 0x2d
 8008d4a:	2102      	movs	r1, #2
 8008d4c:	5499      	strb	r1, [r3, r2]

  /* Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if (READ_BIT(RTC->CR, RTC_CR_WUTE) != 0U)
 8008d4e:	4b34      	ldr	r3, [pc, #208]	@ (8008e20 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008d50:	699a      	ldr	r2, [r3, #24]
 8008d52:	2380      	movs	r3, #128	@ 0x80
 8008d54:	00db      	lsls	r3, r3, #3
 8008d56:	4013      	ands	r3, r2
 8008d58:	d01c      	beq.n	8008d94 <HAL_RTCEx_SetWakeUpTimer+0x70>
  {
    tickstart = HAL_GetTick();
 8008d5a:	f7fd f84d 	bl	8005df8 <HAL_GetTick>
 8008d5e:	0003      	movs	r3, r0
 8008d60:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 8008d62:	e012      	b.n	8008d8a <HAL_RTCEx_SetWakeUpTimer+0x66>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008d64:	f7fd f848 	bl	8005df8 <HAL_GetTick>
 8008d68:	0002      	movs	r2, r0
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	1ad2      	subs	r2, r2, r3
 8008d6e:	23fa      	movs	r3, #250	@ 0xfa
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d909      	bls.n	8008d8a <HAL_RTCEx_SetWakeUpTimer+0x66>
      {
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	222d      	movs	r2, #45	@ 0x2d
 8008d7a:	2103      	movs	r1, #3
 8008d7c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	222c      	movs	r2, #44	@ 0x2c
 8008d82:	2100      	movs	r1, #0
 8008d84:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008d86:	2303      	movs	r3, #3
 8008d88:	e046      	b.n	8008e18 <HAL_RTCEx_SetWakeUpTimer+0xf4>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 8008d8a:	4b25      	ldr	r3, [pc, #148]	@ (8008e20 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	2204      	movs	r2, #4
 8008d90:	4013      	ands	r3, r2
 8008d92:	d1e7      	bne.n	8008d64 <HAL_RTCEx_SetWakeUpTimer+0x40>
      }
    }
  }

  /* Disable Wake Up timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8008d94:	4b22      	ldr	r3, [pc, #136]	@ (8008e20 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008d96:	699a      	ldr	r2, [r3, #24]
 8008d98:	4b21      	ldr	r3, [pc, #132]	@ (8008e20 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008d9a:	4922      	ldr	r1, [pc, #136]	@ (8008e24 <HAL_RTCEx_SetWakeUpTimer+0x100>)
 8008d9c:	400a      	ands	r2, r1
 8008d9e:	619a      	str	r2, [r3, #24]

  tickstart = HAL_GetTick();
 8008da0:	f7fd f82a 	bl	8005df8 <HAL_GetTick>
 8008da4:	0003      	movs	r3, r0
 8008da6:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8008da8:	e012      	b.n	8008dd0 <HAL_RTCEx_SetWakeUpTimer+0xac>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008daa:	f7fd f825 	bl	8005df8 <HAL_GetTick>
 8008dae:	0002      	movs	r2, r0
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	1ad2      	subs	r2, r2, r3
 8008db4:	23fa      	movs	r3, #250	@ 0xfa
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d909      	bls.n	8008dd0 <HAL_RTCEx_SetWakeUpTimer+0xac>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	222d      	movs	r2, #45	@ 0x2d
 8008dc0:	2103      	movs	r1, #3
 8008dc2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	222c      	movs	r2, #44	@ 0x2c
 8008dc8:	2100      	movs	r1, #0
 8008dca:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8008dcc:	2303      	movs	r3, #3
 8008dce:	e023      	b.n	8008e18 <HAL_RTCEx_SetWakeUpTimer+0xf4>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8008dd0:	4b13      	ldr	r3, [pc, #76]	@ (8008e20 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	2204      	movs	r2, #4
 8008dd6:	4013      	ands	r3, r2
 8008dd8:	d0e7      	beq.n	8008daa <HAL_RTCEx_SetWakeUpTimer+0x86>
    }
  }

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8008dda:	4b11      	ldr	r3, [pc, #68]	@ (8008e20 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008ddc:	699b      	ldr	r3, [r3, #24]
 8008dde:	2207      	movs	r2, #7
 8008de0:	4393      	bics	r3, r2
 8008de2:	0019      	movs	r1, r3
 8008de4:	4b0e      	ldr	r3, [pc, #56]	@ (8008e20 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	430a      	orrs	r2, r1
 8008dea:	619a      	str	r2, [r3, #24]

  /* Configure the Wakeup Timer counter */
  WRITE_REG(RTC->WUTR, (uint32_t)WakeUpCounter);
 8008dec:	4b0c      	ldr	r3, [pc, #48]	@ (8008e20 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008dee:	68ba      	ldr	r2, [r7, #8]
 8008df0:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  SET_BIT(RTC->CR, RTC_CR_WUTE);
 8008df2:	4b0b      	ldr	r3, [pc, #44]	@ (8008e20 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008df4:	699a      	ldr	r2, [r3, #24]
 8008df6:	4b0a      	ldr	r3, [pc, #40]	@ (8008e20 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008df8:	2180      	movs	r1, #128	@ 0x80
 8008dfa:	00c9      	lsls	r1, r1, #3
 8008dfc:	430a      	orrs	r2, r1
 8008dfe:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e00:	4b07      	ldr	r3, [pc, #28]	@ (8008e20 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008e02:	22ff      	movs	r2, #255	@ 0xff
 8008e04:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	222d      	movs	r2, #45	@ 0x2d
 8008e0a:	2101      	movs	r1, #1
 8008e0c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	222c      	movs	r2, #44	@ 0x2c
 8008e12:	2100      	movs	r1, #0
 8008e14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	0018      	movs	r0, r3
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	b006      	add	sp, #24
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	40002800 	.word	0x40002800
 8008e24:	fffffbff 	.word	0xfffffbff

08008e28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d101      	bne.n	8008e3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008e36:	2301      	movs	r3, #1
 8008e38:	e0a0      	b.n	8008f7c <HAL_SPI_Init+0x154>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d109      	bne.n	8008e56 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	685a      	ldr	r2, [r3, #4]
 8008e46:	2382      	movs	r3, #130	@ 0x82
 8008e48:	005b      	lsls	r3, r3, #1
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d009      	beq.n	8008e62 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2200      	movs	r2, #0
 8008e52:	61da      	str	r2, [r3, #28]
 8008e54:	e005      	b.n	8008e62 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	225d      	movs	r2, #93	@ 0x5d
 8008e6c:	5c9b      	ldrb	r3, [r3, r2]
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d107      	bne.n	8008e84 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	225c      	movs	r2, #92	@ 0x5c
 8008e78:	2100      	movs	r1, #0
 8008e7a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	0018      	movs	r0, r3
 8008e80:	f7fc fd02 	bl	8005888 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	225d      	movs	r2, #93	@ 0x5d
 8008e88:	2102      	movs	r1, #2
 8008e8a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2140      	movs	r1, #64	@ 0x40
 8008e98:	438a      	bics	r2, r1
 8008e9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	68da      	ldr	r2, [r3, #12]
 8008ea0:	23e0      	movs	r3, #224	@ 0xe0
 8008ea2:	00db      	lsls	r3, r3, #3
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d902      	bls.n	8008eae <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	60fb      	str	r3, [r7, #12]
 8008eac:	e002      	b.n	8008eb4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008eae:	2380      	movs	r3, #128	@ 0x80
 8008eb0:	015b      	lsls	r3, r3, #5
 8008eb2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	68da      	ldr	r2, [r3, #12]
 8008eb8:	23f0      	movs	r3, #240	@ 0xf0
 8008eba:	011b      	lsls	r3, r3, #4
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d008      	beq.n	8008ed2 <HAL_SPI_Init+0xaa>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	68da      	ldr	r2, [r3, #12]
 8008ec4:	23e0      	movs	r3, #224	@ 0xe0
 8008ec6:	00db      	lsls	r3, r3, #3
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d002      	beq.n	8008ed2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	685a      	ldr	r2, [r3, #4]
 8008ed6:	2382      	movs	r3, #130	@ 0x82
 8008ed8:	005b      	lsls	r3, r3, #1
 8008eda:	401a      	ands	r2, r3
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6899      	ldr	r1, [r3, #8]
 8008ee0:	2384      	movs	r3, #132	@ 0x84
 8008ee2:	021b      	lsls	r3, r3, #8
 8008ee4:	400b      	ands	r3, r1
 8008ee6:	431a      	orrs	r2, r3
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	691b      	ldr	r3, [r3, #16]
 8008eec:	2102      	movs	r1, #2
 8008eee:	400b      	ands	r3, r1
 8008ef0:	431a      	orrs	r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	695b      	ldr	r3, [r3, #20]
 8008ef6:	2101      	movs	r1, #1
 8008ef8:	400b      	ands	r3, r1
 8008efa:	431a      	orrs	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6999      	ldr	r1, [r3, #24]
 8008f00:	2380      	movs	r3, #128	@ 0x80
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	400b      	ands	r3, r1
 8008f06:	431a      	orrs	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	69db      	ldr	r3, [r3, #28]
 8008f0c:	2138      	movs	r1, #56	@ 0x38
 8008f0e:	400b      	ands	r3, r1
 8008f10:	431a      	orrs	r2, r3
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6a1b      	ldr	r3, [r3, #32]
 8008f16:	2180      	movs	r1, #128	@ 0x80
 8008f18:	400b      	ands	r3, r1
 8008f1a:	431a      	orrs	r2, r3
 8008f1c:	0011      	movs	r1, r2
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008f22:	2380      	movs	r3, #128	@ 0x80
 8008f24:	019b      	lsls	r3, r3, #6
 8008f26:	401a      	ands	r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	430a      	orrs	r2, r1
 8008f2e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	699b      	ldr	r3, [r3, #24]
 8008f34:	0c1b      	lsrs	r3, r3, #16
 8008f36:	2204      	movs	r2, #4
 8008f38:	401a      	ands	r2, r3
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f3e:	2110      	movs	r1, #16
 8008f40:	400b      	ands	r3, r1
 8008f42:	431a      	orrs	r2, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f48:	2108      	movs	r1, #8
 8008f4a:	400b      	ands	r3, r1
 8008f4c:	431a      	orrs	r2, r3
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	68d9      	ldr	r1, [r3, #12]
 8008f52:	23f0      	movs	r3, #240	@ 0xf0
 8008f54:	011b      	lsls	r3, r3, #4
 8008f56:	400b      	ands	r3, r1
 8008f58:	431a      	orrs	r2, r3
 8008f5a:	0011      	movs	r1, r2
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	2380      	movs	r3, #128	@ 0x80
 8008f60:	015b      	lsls	r3, r3, #5
 8008f62:	401a      	ands	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	430a      	orrs	r2, r1
 8008f6a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	225d      	movs	r2, #93	@ 0x5d
 8008f76:	2101      	movs	r1, #1
 8008f78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008f7a:	2300      	movs	r3, #0
}
 8008f7c:	0018      	movs	r0, r3
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	b004      	add	sp, #16
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d101      	bne.n	8008f96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e046      	b.n	8009024 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2288      	movs	r2, #136	@ 0x88
 8008f9a:	589b      	ldr	r3, [r3, r2]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d107      	bne.n	8008fb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2284      	movs	r2, #132	@ 0x84
 8008fa4:	2100      	movs	r1, #0
 8008fa6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	0018      	movs	r0, r3
 8008fac:	f7fc fe2a 	bl	8005c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2288      	movs	r2, #136	@ 0x88
 8008fb4:	2124      	movs	r1, #36	@ 0x24
 8008fb6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2101      	movs	r1, #1
 8008fc4:	438a      	bics	r2, r1
 8008fc6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d003      	beq.n	8008fd8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	0018      	movs	r0, r3
 8008fd4:	f000 f9fe 	bl	80093d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	0018      	movs	r0, r3
 8008fdc:	f000 f828 	bl	8009030 <UART_SetConfig>
 8008fe0:	0003      	movs	r3, r0
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d101      	bne.n	8008fea <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	e01c      	b.n	8009024 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	685a      	ldr	r2, [r3, #4]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	490d      	ldr	r1, [pc, #52]	@ (800902c <HAL_UART_Init+0xa8>)
 8008ff6:	400a      	ands	r2, r1
 8008ff8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	689a      	ldr	r2, [r3, #8]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	212a      	movs	r1, #42	@ 0x2a
 8009006:	438a      	bics	r2, r1
 8009008:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2101      	movs	r1, #1
 8009016:	430a      	orrs	r2, r1
 8009018:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	0018      	movs	r0, r3
 800901e:	f000 fa8d 	bl	800953c <UART_CheckIdleState>
 8009022:	0003      	movs	r3, r0
}
 8009024:	0018      	movs	r0, r3
 8009026:	46bd      	mov	sp, r7
 8009028:	b002      	add	sp, #8
 800902a:	bd80      	pop	{r7, pc}
 800902c:	ffffb7ff 	.word	0xffffb7ff

08009030 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009030:	b5b0      	push	{r4, r5, r7, lr}
 8009032:	b092      	sub	sp, #72	@ 0x48
 8009034:	af00      	add	r7, sp, #0
 8009036:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009038:	231f      	movs	r3, #31
 800903a:	2220      	movs	r2, #32
 800903c:	189b      	adds	r3, r3, r2
 800903e:	19db      	adds	r3, r3, r7
 8009040:	2200      	movs	r2, #0
 8009042:	701a      	strb	r2, [r3, #0]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4ac8      	ldr	r2, [pc, #800]	@ (800936c <UART_SetConfig+0x33c>)
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800904a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800904c:	689a      	ldr	r2, [r3, #8]
 800904e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009050:	691b      	ldr	r3, [r3, #16]
 8009052:	431a      	orrs	r2, r3
 8009054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009056:	695b      	ldr	r3, [r3, #20]
 8009058:	431a      	orrs	r2, r3
 800905a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800905c:	69db      	ldr	r3, [r3, #28]
 800905e:	4313      	orrs	r3, r2
 8009060:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4ac1      	ldr	r2, [pc, #772]	@ (8009370 <UART_SetConfig+0x340>)
 800906a:	4013      	ands	r3, r2
 800906c:	0019      	movs	r1, r3
 800906e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009074:	430b      	orrs	r3, r1
 8009076:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	4abd      	ldr	r2, [pc, #756]	@ (8009374 <UART_SetConfig+0x344>)
 8009080:	4013      	ands	r3, r2
 8009082:	0018      	movs	r0, r3
 8009084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009086:	68d9      	ldr	r1, [r3, #12]
 8009088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	0003      	movs	r3, r0
 800908e:	430b      	orrs	r3, r1
 8009090:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009094:	699b      	ldr	r3, [r3, #24]
 8009096:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4ab3      	ldr	r2, [pc, #716]	@ (800936c <UART_SetConfig+0x33c>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d00e      	beq.n	80090c0 <UART_SetConfig+0x90>
 80090a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4ab4      	ldr	r2, [pc, #720]	@ (8009378 <UART_SetConfig+0x348>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d009      	beq.n	80090c0 <UART_SetConfig+0x90>
 80090ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4ab2      	ldr	r2, [pc, #712]	@ (800937c <UART_SetConfig+0x34c>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d004      	beq.n	80090c0 <UART_SetConfig+0x90>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80090b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b8:	6a1b      	ldr	r3, [r3, #32]
 80090ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090bc:	4313      	orrs	r3, r2
 80090be:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	4aae      	ldr	r2, [pc, #696]	@ (8009380 <UART_SetConfig+0x350>)
 80090c8:	4013      	ands	r3, r2
 80090ca:	0019      	movs	r1, r3
 80090cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090d2:	430b      	orrs	r3, r1
 80090d4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80090d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090dc:	220f      	movs	r2, #15
 80090de:	4393      	bics	r3, r2
 80090e0:	0018      	movs	r0, r3
 80090e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80090e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	0003      	movs	r3, r0
 80090ec:	430b      	orrs	r3, r1
 80090ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4aa3      	ldr	r2, [pc, #652]	@ (8009384 <UART_SetConfig+0x354>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d102      	bne.n	8009100 <UART_SetConfig+0xd0>
 80090fa:	2301      	movs	r3, #1
 80090fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80090fe:	e033      	b.n	8009168 <UART_SetConfig+0x138>
 8009100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4aa0      	ldr	r2, [pc, #640]	@ (8009388 <UART_SetConfig+0x358>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d102      	bne.n	8009110 <UART_SetConfig+0xe0>
 800910a:	2302      	movs	r3, #2
 800910c:	643b      	str	r3, [r7, #64]	@ 0x40
 800910e:	e02b      	b.n	8009168 <UART_SetConfig+0x138>
 8009110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a9d      	ldr	r2, [pc, #628]	@ (800938c <UART_SetConfig+0x35c>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d103      	bne.n	8009122 <UART_SetConfig+0xf2>
 800911a:	2380      	movs	r3, #128	@ 0x80
 800911c:	025b      	lsls	r3, r3, #9
 800911e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009120:	e022      	b.n	8009168 <UART_SetConfig+0x138>
 8009122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a9a      	ldr	r2, [pc, #616]	@ (8009390 <UART_SetConfig+0x360>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d103      	bne.n	8009134 <UART_SetConfig+0x104>
 800912c:	2380      	movs	r3, #128	@ 0x80
 800912e:	029b      	lsls	r3, r3, #10
 8009130:	643b      	str	r3, [r7, #64]	@ 0x40
 8009132:	e019      	b.n	8009168 <UART_SetConfig+0x138>
 8009134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a8c      	ldr	r2, [pc, #560]	@ (800936c <UART_SetConfig+0x33c>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d102      	bne.n	8009144 <UART_SetConfig+0x114>
 800913e:	2310      	movs	r3, #16
 8009140:	643b      	str	r3, [r7, #64]	@ 0x40
 8009142:	e011      	b.n	8009168 <UART_SetConfig+0x138>
 8009144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a8b      	ldr	r2, [pc, #556]	@ (8009378 <UART_SetConfig+0x348>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d102      	bne.n	8009154 <UART_SetConfig+0x124>
 800914e:	2308      	movs	r3, #8
 8009150:	643b      	str	r3, [r7, #64]	@ 0x40
 8009152:	e009      	b.n	8009168 <UART_SetConfig+0x138>
 8009154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a88      	ldr	r2, [pc, #544]	@ (800937c <UART_SetConfig+0x34c>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d102      	bne.n	8009164 <UART_SetConfig+0x134>
 800915e:	2304      	movs	r3, #4
 8009160:	643b      	str	r3, [r7, #64]	@ 0x40
 8009162:	e001      	b.n	8009168 <UART_SetConfig+0x138>
 8009164:	2300      	movs	r3, #0
 8009166:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a7f      	ldr	r2, [pc, #508]	@ (800936c <UART_SetConfig+0x33c>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d00a      	beq.n	8009188 <UART_SetConfig+0x158>
 8009172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a80      	ldr	r2, [pc, #512]	@ (8009378 <UART_SetConfig+0x348>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d005      	beq.n	8009188 <UART_SetConfig+0x158>
 800917c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a7e      	ldr	r2, [pc, #504]	@ (800937c <UART_SetConfig+0x34c>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d000      	beq.n	8009188 <UART_SetConfig+0x158>
 8009186:	e06f      	b.n	8009268 <UART_SetConfig+0x238>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009188:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800918a:	0018      	movs	r0, r3
 800918c:	f7fe fec8 	bl	8007f20 <HAL_RCCEx_GetPeriphCLKFreq>
 8009190:	0003      	movs	r3, r0
 8009192:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* If proper clock source reported */
    if (pclk != 0U)
 8009194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009196:	2b00      	cmp	r3, #0
 8009198:	d100      	bne.n	800919c <UART_SetConfig+0x16c>
 800919a:	e103      	b.n	80093a4 <UART_SetConfig+0x374>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800919c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800919e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80091a0:	4b7c      	ldr	r3, [pc, #496]	@ (8009394 <UART_SetConfig+0x364>)
 80091a2:	0052      	lsls	r2, r2, #1
 80091a4:	5ad3      	ldrh	r3, [r2, r3]
 80091a6:	0019      	movs	r1, r3
 80091a8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80091aa:	f7f6 ffc9 	bl	8000140 <__udivsi3>
 80091ae:	0003      	movs	r3, r0
 80091b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b4:	685a      	ldr	r2, [r3, #4]
 80091b6:	0013      	movs	r3, r2
 80091b8:	005b      	lsls	r3, r3, #1
 80091ba:	189b      	adds	r3, r3, r2
 80091bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091be:	429a      	cmp	r2, r3
 80091c0:	d305      	bcc.n	80091ce <UART_SetConfig+0x19e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80091c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d906      	bls.n	80091dc <UART_SetConfig+0x1ac>
      {
        ret = HAL_ERROR;
 80091ce:	231f      	movs	r3, #31
 80091d0:	2220      	movs	r2, #32
 80091d2:	189b      	adds	r3, r3, r2
 80091d4:	19db      	adds	r3, r3, r7
 80091d6:	2201      	movs	r2, #1
 80091d8:	701a      	strb	r2, [r3, #0]
 80091da:	e044      	b.n	8009266 <UART_SetConfig+0x236>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091de:	61bb      	str	r3, [r7, #24]
 80091e0:	2300      	movs	r3, #0
 80091e2:	61fb      	str	r3, [r7, #28]
 80091e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80091e8:	4b6a      	ldr	r3, [pc, #424]	@ (8009394 <UART_SetConfig+0x364>)
 80091ea:	0052      	lsls	r2, r2, #1
 80091ec:	5ad3      	ldrh	r3, [r2, r3]
 80091ee:	613b      	str	r3, [r7, #16]
 80091f0:	2300      	movs	r3, #0
 80091f2:	617b      	str	r3, [r7, #20]
 80091f4:	693a      	ldr	r2, [r7, #16]
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	69b8      	ldr	r0, [r7, #24]
 80091fa:	69f9      	ldr	r1, [r7, #28]
 80091fc:	f7f7 f972 	bl	80004e4 <__aeabi_uldivmod>
 8009200:	0002      	movs	r2, r0
 8009202:	000b      	movs	r3, r1
 8009204:	0e11      	lsrs	r1, r2, #24
 8009206:	021d      	lsls	r5, r3, #8
 8009208:	430d      	orrs	r5, r1
 800920a:	0214      	lsls	r4, r2, #8
 800920c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	085b      	lsrs	r3, r3, #1
 8009212:	60bb      	str	r3, [r7, #8]
 8009214:	2300      	movs	r3, #0
 8009216:	60fb      	str	r3, [r7, #12]
 8009218:	68b8      	ldr	r0, [r7, #8]
 800921a:	68f9      	ldr	r1, [r7, #12]
 800921c:	1900      	adds	r0, r0, r4
 800921e:	4169      	adcs	r1, r5
 8009220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	603b      	str	r3, [r7, #0]
 8009226:	2300      	movs	r3, #0
 8009228:	607b      	str	r3, [r7, #4]
 800922a:	683a      	ldr	r2, [r7, #0]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f7f7 f959 	bl	80004e4 <__aeabi_uldivmod>
 8009232:	0002      	movs	r2, r0
 8009234:	000b      	movs	r3, r1
 8009236:	0013      	movs	r3, r2
 8009238:	637b      	str	r3, [r7, #52]	@ 0x34
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800923a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800923c:	23c0      	movs	r3, #192	@ 0xc0
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	429a      	cmp	r2, r3
 8009242:	d309      	bcc.n	8009258 <UART_SetConfig+0x228>
 8009244:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009246:	2380      	movs	r3, #128	@ 0x80
 8009248:	035b      	lsls	r3, r3, #13
 800924a:	429a      	cmp	r2, r3
 800924c:	d204      	bcs.n	8009258 <UART_SetConfig+0x228>
        {
          huart->Instance->BRR = usartdiv;
 800924e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009254:	60da      	str	r2, [r3, #12]
 8009256:	e006      	b.n	8009266 <UART_SetConfig+0x236>
        }
        else
        {
          ret = HAL_ERROR;
 8009258:	231f      	movs	r3, #31
 800925a:	2220      	movs	r2, #32
 800925c:	189b      	adds	r3, r3, r2
 800925e:	19db      	adds	r3, r3, r7
 8009260:	2201      	movs	r2, #1
 8009262:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8009264:	e09e      	b.n	80093a4 <UART_SetConfig+0x374>
 8009266:	e09d      	b.n	80093a4 <UART_SetConfig+0x374>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800926a:	69da      	ldr	r2, [r3, #28]
 800926c:	2380      	movs	r3, #128	@ 0x80
 800926e:	021b      	lsls	r3, r3, #8
 8009270:	429a      	cmp	r2, r3
 8009272:	d14c      	bne.n	800930e <UART_SetConfig+0x2de>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009274:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009276:	0018      	movs	r0, r3
 8009278:	f7fe fe52 	bl	8007f20 <HAL_RCCEx_GetPeriphCLKFreq>
 800927c:	0003      	movs	r3, r0
 800927e:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009282:	2b00      	cmp	r3, #0
 8009284:	d100      	bne.n	8009288 <UART_SetConfig+0x258>
 8009286:	e08d      	b.n	80093a4 <UART_SetConfig+0x374>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800928a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800928c:	4b41      	ldr	r3, [pc, #260]	@ (8009394 <UART_SetConfig+0x364>)
 800928e:	0052      	lsls	r2, r2, #1
 8009290:	5ad3      	ldrh	r3, [r2, r3]
 8009292:	0019      	movs	r1, r3
 8009294:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009296:	f7f6 ff53 	bl	8000140 <__udivsi3>
 800929a:	0003      	movs	r3, r0
 800929c:	005a      	lsls	r2, r3, #1
 800929e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	085b      	lsrs	r3, r3, #1
 80092a4:	18d2      	adds	r2, r2, r3
 80092a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	0019      	movs	r1, r3
 80092ac:	0010      	movs	r0, r2
 80092ae:	f7f6 ff47 	bl	8000140 <__udivsi3>
 80092b2:	0003      	movs	r3, r0
 80092b4:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092b8:	2b0f      	cmp	r3, #15
 80092ba:	d921      	bls.n	8009300 <UART_SetConfig+0x2d0>
 80092bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80092be:	2380      	movs	r3, #128	@ 0x80
 80092c0:	025b      	lsls	r3, r3, #9
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d21c      	bcs.n	8009300 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80092c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092c8:	b29a      	uxth	r2, r3
 80092ca:	2012      	movs	r0, #18
 80092cc:	2420      	movs	r4, #32
 80092ce:	1903      	adds	r3, r0, r4
 80092d0:	19db      	adds	r3, r3, r7
 80092d2:	210f      	movs	r1, #15
 80092d4:	438a      	bics	r2, r1
 80092d6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80092d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092da:	085b      	lsrs	r3, r3, #1
 80092dc:	b29b      	uxth	r3, r3
 80092de:	2207      	movs	r2, #7
 80092e0:	4013      	ands	r3, r2
 80092e2:	b299      	uxth	r1, r3
 80092e4:	1903      	adds	r3, r0, r4
 80092e6:	19db      	adds	r3, r3, r7
 80092e8:	1902      	adds	r2, r0, r4
 80092ea:	19d2      	adds	r2, r2, r7
 80092ec:	8812      	ldrh	r2, [r2, #0]
 80092ee:	430a      	orrs	r2, r1
 80092f0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80092f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	1902      	adds	r2, r0, r4
 80092f8:	19d2      	adds	r2, r2, r7
 80092fa:	8812      	ldrh	r2, [r2, #0]
 80092fc:	60da      	str	r2, [r3, #12]
 80092fe:	e051      	b.n	80093a4 <UART_SetConfig+0x374>
      }
      else
      {
        ret = HAL_ERROR;
 8009300:	231f      	movs	r3, #31
 8009302:	2220      	movs	r2, #32
 8009304:	189b      	adds	r3, r3, r2
 8009306:	19db      	adds	r3, r3, r7
 8009308:	2201      	movs	r2, #1
 800930a:	701a      	strb	r2, [r3, #0]
 800930c:	e04a      	b.n	80093a4 <UART_SetConfig+0x374>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800930e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009310:	0018      	movs	r0, r3
 8009312:	f7fe fe05 	bl	8007f20 <HAL_RCCEx_GetPeriphCLKFreq>
 8009316:	0003      	movs	r3, r0
 8009318:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (pclk != 0U)
 800931a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800931c:	2b00      	cmp	r3, #0
 800931e:	d041      	beq.n	80093a4 <UART_SetConfig+0x374>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009322:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009324:	4b1b      	ldr	r3, [pc, #108]	@ (8009394 <UART_SetConfig+0x364>)
 8009326:	0052      	lsls	r2, r2, #1
 8009328:	5ad3      	ldrh	r3, [r2, r3]
 800932a:	0019      	movs	r1, r3
 800932c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800932e:	f7f6 ff07 	bl	8000140 <__udivsi3>
 8009332:	0003      	movs	r3, r0
 8009334:	001a      	movs	r2, r3
 8009336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	085b      	lsrs	r3, r3, #1
 800933c:	18d2      	adds	r2, r2, r3
 800933e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	0019      	movs	r1, r3
 8009344:	0010      	movs	r0, r2
 8009346:	f7f6 fefb 	bl	8000140 <__udivsi3>
 800934a:	0003      	movs	r3, r0
 800934c:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800934e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009350:	2b0f      	cmp	r3, #15
 8009352:	d921      	bls.n	8009398 <UART_SetConfig+0x368>
 8009354:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009356:	2380      	movs	r3, #128	@ 0x80
 8009358:	025b      	lsls	r3, r3, #9
 800935a:	429a      	cmp	r2, r3
 800935c:	d21c      	bcs.n	8009398 <UART_SetConfig+0x368>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800935e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009360:	b29a      	uxth	r2, r3
 8009362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	60da      	str	r2, [r3, #12]
 8009368:	e01c      	b.n	80093a4 <UART_SetConfig+0x374>
 800936a:	46c0      	nop			@ (mov r8, r8)
 800936c:	40008000 	.word	0x40008000
 8009370:	cfff69f3 	.word	0xcfff69f3
 8009374:	ffffcfff 	.word	0xffffcfff
 8009378:	40008400 	.word	0x40008400
 800937c:	40008c00 	.word	0x40008c00
 8009380:	11fff4ff 	.word	0x11fff4ff
 8009384:	40013800 	.word	0x40013800
 8009388:	40004400 	.word	0x40004400
 800938c:	40004800 	.word	0x40004800
 8009390:	40004c00 	.word	0x40004c00
 8009394:	080100fc 	.word	0x080100fc
      }
      else
      {
        ret = HAL_ERROR;
 8009398:	231f      	movs	r3, #31
 800939a:	2220      	movs	r2, #32
 800939c:	189b      	adds	r3, r3, r2
 800939e:	19db      	adds	r3, r3, r7
 80093a0:	2201      	movs	r2, #1
 80093a2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80093a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093a6:	226a      	movs	r2, #106	@ 0x6a
 80093a8:	2101      	movs	r1, #1
 80093aa:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80093ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ae:	2268      	movs	r2, #104	@ 0x68
 80093b0:	2101      	movs	r1, #1
 80093b2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80093b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b6:	2200      	movs	r2, #0
 80093b8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80093ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093bc:	2200      	movs	r2, #0
 80093be:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80093c0:	231f      	movs	r3, #31
 80093c2:	2220      	movs	r2, #32
 80093c4:	189b      	adds	r3, r3, r2
 80093c6:	19db      	adds	r3, r3, r7
 80093c8:	781b      	ldrb	r3, [r3, #0]
}
 80093ca:	0018      	movs	r0, r3
 80093cc:	46bd      	mov	sp, r7
 80093ce:	b012      	add	sp, #72	@ 0x48
 80093d0:	bdb0      	pop	{r4, r5, r7, pc}
 80093d2:	46c0      	nop			@ (mov r8, r8)

080093d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093e0:	2208      	movs	r2, #8
 80093e2:	4013      	ands	r3, r2
 80093e4:	d00b      	beq.n	80093fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	4a4a      	ldr	r2, [pc, #296]	@ (8009518 <UART_AdvFeatureConfig+0x144>)
 80093ee:	4013      	ands	r3, r2
 80093f0:	0019      	movs	r1, r3
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	430a      	orrs	r2, r1
 80093fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009402:	2201      	movs	r2, #1
 8009404:	4013      	ands	r3, r2
 8009406:	d00b      	beq.n	8009420 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	4a43      	ldr	r2, [pc, #268]	@ (800951c <UART_AdvFeatureConfig+0x148>)
 8009410:	4013      	ands	r3, r2
 8009412:	0019      	movs	r1, r3
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	430a      	orrs	r2, r1
 800941e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009424:	2202      	movs	r2, #2
 8009426:	4013      	ands	r3, r2
 8009428:	d00b      	beq.n	8009442 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	4a3b      	ldr	r2, [pc, #236]	@ (8009520 <UART_AdvFeatureConfig+0x14c>)
 8009432:	4013      	ands	r3, r2
 8009434:	0019      	movs	r1, r3
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	430a      	orrs	r2, r1
 8009440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009446:	2204      	movs	r2, #4
 8009448:	4013      	ands	r3, r2
 800944a:	d00b      	beq.n	8009464 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	4a34      	ldr	r2, [pc, #208]	@ (8009524 <UART_AdvFeatureConfig+0x150>)
 8009454:	4013      	ands	r3, r2
 8009456:	0019      	movs	r1, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	430a      	orrs	r2, r1
 8009462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009468:	2210      	movs	r2, #16
 800946a:	4013      	ands	r3, r2
 800946c:	d00b      	beq.n	8009486 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	4a2c      	ldr	r2, [pc, #176]	@ (8009528 <UART_AdvFeatureConfig+0x154>)
 8009476:	4013      	ands	r3, r2
 8009478:	0019      	movs	r1, r3
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	430a      	orrs	r2, r1
 8009484:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800948a:	2220      	movs	r2, #32
 800948c:	4013      	ands	r3, r2
 800948e:	d00b      	beq.n	80094a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	4a25      	ldr	r2, [pc, #148]	@ (800952c <UART_AdvFeatureConfig+0x158>)
 8009498:	4013      	ands	r3, r2
 800949a:	0019      	movs	r1, r3
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	430a      	orrs	r2, r1
 80094a6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094ac:	2240      	movs	r2, #64	@ 0x40
 80094ae:	4013      	ands	r3, r2
 80094b0:	d01d      	beq.n	80094ee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	4a1d      	ldr	r2, [pc, #116]	@ (8009530 <UART_AdvFeatureConfig+0x15c>)
 80094ba:	4013      	ands	r3, r2
 80094bc:	0019      	movs	r1, r3
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	430a      	orrs	r2, r1
 80094c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80094ce:	2380      	movs	r3, #128	@ 0x80
 80094d0:	035b      	lsls	r3, r3, #13
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d10b      	bne.n	80094ee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	4a15      	ldr	r2, [pc, #84]	@ (8009534 <UART_AdvFeatureConfig+0x160>)
 80094de:	4013      	ands	r3, r2
 80094e0:	0019      	movs	r1, r3
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	430a      	orrs	r2, r1
 80094ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094f2:	2280      	movs	r2, #128	@ 0x80
 80094f4:	4013      	ands	r3, r2
 80094f6:	d00b      	beq.n	8009510 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	4a0e      	ldr	r2, [pc, #56]	@ (8009538 <UART_AdvFeatureConfig+0x164>)
 8009500:	4013      	ands	r3, r2
 8009502:	0019      	movs	r1, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	430a      	orrs	r2, r1
 800950e:	605a      	str	r2, [r3, #4]
  }
}
 8009510:	46c0      	nop			@ (mov r8, r8)
 8009512:	46bd      	mov	sp, r7
 8009514:	b002      	add	sp, #8
 8009516:	bd80      	pop	{r7, pc}
 8009518:	ffff7fff 	.word	0xffff7fff
 800951c:	fffdffff 	.word	0xfffdffff
 8009520:	fffeffff 	.word	0xfffeffff
 8009524:	fffbffff 	.word	0xfffbffff
 8009528:	ffffefff 	.word	0xffffefff
 800952c:	ffffdfff 	.word	0xffffdfff
 8009530:	ffefffff 	.word	0xffefffff
 8009534:	ff9fffff 	.word	0xff9fffff
 8009538:	fff7ffff 	.word	0xfff7ffff

0800953c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b092      	sub	sp, #72	@ 0x48
 8009540:	af02      	add	r7, sp, #8
 8009542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2290      	movs	r2, #144	@ 0x90
 8009548:	2100      	movs	r1, #0
 800954a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800954c:	f7fc fc54 	bl	8005df8 <HAL_GetTick>
 8009550:	0003      	movs	r3, r0
 8009552:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2208      	movs	r2, #8
 800955c:	4013      	ands	r3, r2
 800955e:	2b08      	cmp	r3, #8
 8009560:	d12d      	bne.n	80095be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009564:	2280      	movs	r2, #128	@ 0x80
 8009566:	0391      	lsls	r1, r2, #14
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	4a47      	ldr	r2, [pc, #284]	@ (8009688 <UART_CheckIdleState+0x14c>)
 800956c:	9200      	str	r2, [sp, #0]
 800956e:	2200      	movs	r2, #0
 8009570:	f000 f88e 	bl	8009690 <UART_WaitOnFlagUntilTimeout>
 8009574:	1e03      	subs	r3, r0, #0
 8009576:	d022      	beq.n	80095be <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009578:	f3ef 8310 	mrs	r3, PRIMASK
 800957c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800957e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009580:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009582:	2301      	movs	r3, #1
 8009584:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009588:	f383 8810 	msr	PRIMASK, r3
}
 800958c:	46c0      	nop			@ (mov r8, r8)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	2180      	movs	r1, #128	@ 0x80
 800959a:	438a      	bics	r2, r1
 800959c:	601a      	str	r2, [r3, #0]
 800959e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095a4:	f383 8810 	msr	PRIMASK, r3
}
 80095a8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2288      	movs	r2, #136	@ 0x88
 80095ae:	2120      	movs	r1, #32
 80095b0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2284      	movs	r2, #132	@ 0x84
 80095b6:	2100      	movs	r1, #0
 80095b8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095ba:	2303      	movs	r3, #3
 80095bc:	e060      	b.n	8009680 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2204      	movs	r2, #4
 80095c6:	4013      	ands	r3, r2
 80095c8:	2b04      	cmp	r3, #4
 80095ca:	d146      	bne.n	800965a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095ce:	2280      	movs	r2, #128	@ 0x80
 80095d0:	03d1      	lsls	r1, r2, #15
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	4a2c      	ldr	r2, [pc, #176]	@ (8009688 <UART_CheckIdleState+0x14c>)
 80095d6:	9200      	str	r2, [sp, #0]
 80095d8:	2200      	movs	r2, #0
 80095da:	f000 f859 	bl	8009690 <UART_WaitOnFlagUntilTimeout>
 80095de:	1e03      	subs	r3, r0, #0
 80095e0:	d03b      	beq.n	800965a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80095e2:	f3ef 8310 	mrs	r3, PRIMASK
 80095e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80095e8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80095ec:	2301      	movs	r3, #1
 80095ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	f383 8810 	msr	PRIMASK, r3
}
 80095f6:	46c0      	nop			@ (mov r8, r8)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4922      	ldr	r1, [pc, #136]	@ (800968c <UART_CheckIdleState+0x150>)
 8009604:	400a      	ands	r2, r1
 8009606:	601a      	str	r2, [r3, #0]
 8009608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800960a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	f383 8810 	msr	PRIMASK, r3
}
 8009612:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009614:	f3ef 8310 	mrs	r3, PRIMASK
 8009618:	61bb      	str	r3, [r7, #24]
  return(result);
 800961a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800961c:	633b      	str	r3, [r7, #48]	@ 0x30
 800961e:	2301      	movs	r3, #1
 8009620:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009622:	69fb      	ldr	r3, [r7, #28]
 8009624:	f383 8810 	msr	PRIMASK, r3
}
 8009628:	46c0      	nop			@ (mov r8, r8)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	689a      	ldr	r2, [r3, #8]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	2101      	movs	r1, #1
 8009636:	438a      	bics	r2, r1
 8009638:	609a      	str	r2, [r3, #8]
 800963a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800963c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800963e:	6a3b      	ldr	r3, [r7, #32]
 8009640:	f383 8810 	msr	PRIMASK, r3
}
 8009644:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	228c      	movs	r2, #140	@ 0x8c
 800964a:	2120      	movs	r1, #32
 800964c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2284      	movs	r2, #132	@ 0x84
 8009652:	2100      	movs	r1, #0
 8009654:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009656:	2303      	movs	r3, #3
 8009658:	e012      	b.n	8009680 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2288      	movs	r2, #136	@ 0x88
 800965e:	2120      	movs	r1, #32
 8009660:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	228c      	movs	r2, #140	@ 0x8c
 8009666:	2120      	movs	r1, #32
 8009668:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2284      	movs	r2, #132	@ 0x84
 800967a:	2100      	movs	r1, #0
 800967c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800967e:	2300      	movs	r3, #0
}
 8009680:	0018      	movs	r0, r3
 8009682:	46bd      	mov	sp, r7
 8009684:	b010      	add	sp, #64	@ 0x40
 8009686:	bd80      	pop	{r7, pc}
 8009688:	01ffffff 	.word	0x01ffffff
 800968c:	fffffedf 	.word	0xfffffedf

08009690 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	603b      	str	r3, [r7, #0]
 800969c:	1dfb      	adds	r3, r7, #7
 800969e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096a0:	e051      	b.n	8009746 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096a2:	69bb      	ldr	r3, [r7, #24]
 80096a4:	3301      	adds	r3, #1
 80096a6:	d04e      	beq.n	8009746 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096a8:	f7fc fba6 	bl	8005df8 <HAL_GetTick>
 80096ac:	0002      	movs	r2, r0
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	1ad3      	subs	r3, r2, r3
 80096b2:	69ba      	ldr	r2, [r7, #24]
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d302      	bcc.n	80096be <UART_WaitOnFlagUntilTimeout+0x2e>
 80096b8:	69bb      	ldr	r3, [r7, #24]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d101      	bne.n	80096c2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80096be:	2303      	movs	r3, #3
 80096c0:	e051      	b.n	8009766 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2204      	movs	r2, #4
 80096ca:	4013      	ands	r3, r2
 80096cc:	d03b      	beq.n	8009746 <UART_WaitOnFlagUntilTimeout+0xb6>
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	2b80      	cmp	r3, #128	@ 0x80
 80096d2:	d038      	beq.n	8009746 <UART_WaitOnFlagUntilTimeout+0xb6>
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	2b40      	cmp	r3, #64	@ 0x40
 80096d8:	d035      	beq.n	8009746 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	69db      	ldr	r3, [r3, #28]
 80096e0:	2208      	movs	r2, #8
 80096e2:	4013      	ands	r3, r2
 80096e4:	2b08      	cmp	r3, #8
 80096e6:	d111      	bne.n	800970c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2208      	movs	r2, #8
 80096ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	0018      	movs	r0, r3
 80096f4:	f000 f83c 	bl	8009770 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2290      	movs	r2, #144	@ 0x90
 80096fc:	2108      	movs	r1, #8
 80096fe:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2284      	movs	r2, #132	@ 0x84
 8009704:	2100      	movs	r1, #0
 8009706:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8009708:	2301      	movs	r3, #1
 800970a:	e02c      	b.n	8009766 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	69da      	ldr	r2, [r3, #28]
 8009712:	2380      	movs	r3, #128	@ 0x80
 8009714:	011b      	lsls	r3, r3, #4
 8009716:	401a      	ands	r2, r3
 8009718:	2380      	movs	r3, #128	@ 0x80
 800971a:	011b      	lsls	r3, r3, #4
 800971c:	429a      	cmp	r2, r3
 800971e:	d112      	bne.n	8009746 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2280      	movs	r2, #128	@ 0x80
 8009726:	0112      	lsls	r2, r2, #4
 8009728:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	0018      	movs	r0, r3
 800972e:	f000 f81f 	bl	8009770 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2290      	movs	r2, #144	@ 0x90
 8009736:	2120      	movs	r1, #32
 8009738:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2284      	movs	r2, #132	@ 0x84
 800973e:	2100      	movs	r1, #0
 8009740:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009742:	2303      	movs	r3, #3
 8009744:	e00f      	b.n	8009766 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	69db      	ldr	r3, [r3, #28]
 800974c:	68ba      	ldr	r2, [r7, #8]
 800974e:	4013      	ands	r3, r2
 8009750:	68ba      	ldr	r2, [r7, #8]
 8009752:	1ad3      	subs	r3, r2, r3
 8009754:	425a      	negs	r2, r3
 8009756:	4153      	adcs	r3, r2
 8009758:	b2db      	uxtb	r3, r3
 800975a:	001a      	movs	r2, r3
 800975c:	1dfb      	adds	r3, r7, #7
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	429a      	cmp	r2, r3
 8009762:	d09e      	beq.n	80096a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	0018      	movs	r0, r3
 8009768:	46bd      	mov	sp, r7
 800976a:	b004      	add	sp, #16
 800976c:	bd80      	pop	{r7, pc}
	...

08009770 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b08e      	sub	sp, #56	@ 0x38
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009778:	f3ef 8310 	mrs	r3, PRIMASK
 800977c:	617b      	str	r3, [r7, #20]
  return(result);
 800977e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009780:	637b      	str	r3, [r7, #52]	@ 0x34
 8009782:	2301      	movs	r3, #1
 8009784:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009786:	69bb      	ldr	r3, [r7, #24]
 8009788:	f383 8810 	msr	PRIMASK, r3
}
 800978c:	46c0      	nop			@ (mov r8, r8)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4926      	ldr	r1, [pc, #152]	@ (8009834 <UART_EndRxTransfer+0xc4>)
 800979a:	400a      	ands	r2, r1
 800979c:	601a      	str	r2, [r3, #0]
 800979e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097a2:	69fb      	ldr	r3, [r7, #28]
 80097a4:	f383 8810 	msr	PRIMASK, r3
}
 80097a8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80097aa:	f3ef 8310 	mrs	r3, PRIMASK
 80097ae:	623b      	str	r3, [r7, #32]
  return(result);
 80097b0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80097b4:	2301      	movs	r3, #1
 80097b6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ba:	f383 8810 	msr	PRIMASK, r3
}
 80097be:	46c0      	nop			@ (mov r8, r8)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	689a      	ldr	r2, [r3, #8]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	491b      	ldr	r1, [pc, #108]	@ (8009838 <UART_EndRxTransfer+0xc8>)
 80097cc:	400a      	ands	r2, r1
 80097ce:	609a      	str	r2, [r3, #8]
 80097d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097d6:	f383 8810 	msr	PRIMASK, r3
}
 80097da:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d118      	bne.n	8009816 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80097e4:	f3ef 8310 	mrs	r3, PRIMASK
 80097e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80097ea:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80097ee:	2301      	movs	r3, #1
 80097f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f383 8810 	msr	PRIMASK, r3
}
 80097f8:	46c0      	nop			@ (mov r8, r8)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	681a      	ldr	r2, [r3, #0]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2110      	movs	r1, #16
 8009806:	438a      	bics	r2, r1
 8009808:	601a      	str	r2, [r3, #0]
 800980a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800980c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	f383 8810 	msr	PRIMASK, r3
}
 8009814:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	228c      	movs	r2, #140	@ 0x8c
 800981a:	2120      	movs	r1, #32
 800981c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2200      	movs	r2, #0
 8009822:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800982a:	46c0      	nop			@ (mov r8, r8)
 800982c:	46bd      	mov	sp, r7
 800982e:	b00e      	add	sp, #56	@ 0x38
 8009830:	bd80      	pop	{r7, pc}
 8009832:	46c0      	nop			@ (mov r8, r8)
 8009834:	fffffedf 	.word	0xfffffedf
 8009838:	effffffe 	.word	0xeffffffe

0800983c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2284      	movs	r2, #132	@ 0x84
 8009848:	5c9b      	ldrb	r3, [r3, r2]
 800984a:	2b01      	cmp	r3, #1
 800984c:	d101      	bne.n	8009852 <HAL_UARTEx_DisableFifoMode+0x16>
 800984e:	2302      	movs	r3, #2
 8009850:	e027      	b.n	80098a2 <HAL_UARTEx_DisableFifoMode+0x66>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2284      	movs	r2, #132	@ 0x84
 8009856:	2101      	movs	r1, #1
 8009858:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2288      	movs	r2, #136	@ 0x88
 800985e:	2124      	movs	r1, #36	@ 0x24
 8009860:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2101      	movs	r1, #1
 8009876:	438a      	bics	r2, r1
 8009878:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	4a0b      	ldr	r2, [pc, #44]	@ (80098ac <HAL_UARTEx_DisableFifoMode+0x70>)
 800987e:	4013      	ands	r3, r2
 8009880:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2200      	movs	r2, #0
 8009886:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2288      	movs	r2, #136	@ 0x88
 8009894:	2120      	movs	r1, #32
 8009896:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2284      	movs	r2, #132	@ 0x84
 800989c:	2100      	movs	r1, #0
 800989e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80098a0:	2300      	movs	r3, #0
}
 80098a2:	0018      	movs	r0, r3
 80098a4:	46bd      	mov	sp, r7
 80098a6:	b004      	add	sp, #16
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	46c0      	nop			@ (mov r8, r8)
 80098ac:	dfffffff 	.word	0xdfffffff

080098b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2284      	movs	r2, #132	@ 0x84
 80098be:	5c9b      	ldrb	r3, [r3, r2]
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d101      	bne.n	80098c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80098c4:	2302      	movs	r3, #2
 80098c6:	e02e      	b.n	8009926 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2284      	movs	r2, #132	@ 0x84
 80098cc:	2101      	movs	r1, #1
 80098ce:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2288      	movs	r2, #136	@ 0x88
 80098d4:	2124      	movs	r1, #36	@ 0x24
 80098d6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	2101      	movs	r1, #1
 80098ec:	438a      	bics	r2, r1
 80098ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	00db      	lsls	r3, r3, #3
 80098f8:	08d9      	lsrs	r1, r3, #3
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	683a      	ldr	r2, [r7, #0]
 8009900:	430a      	orrs	r2, r1
 8009902:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	0018      	movs	r0, r3
 8009908:	f000 f854 	bl	80099b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	68fa      	ldr	r2, [r7, #12]
 8009912:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2288      	movs	r2, #136	@ 0x88
 8009918:	2120      	movs	r1, #32
 800991a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2284      	movs	r2, #132	@ 0x84
 8009920:	2100      	movs	r1, #0
 8009922:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009924:	2300      	movs	r3, #0
}
 8009926:	0018      	movs	r0, r3
 8009928:	46bd      	mov	sp, r7
 800992a:	b004      	add	sp, #16
 800992c:	bd80      	pop	{r7, pc}
	...

08009930 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2284      	movs	r2, #132	@ 0x84
 800993e:	5c9b      	ldrb	r3, [r3, r2]
 8009940:	2b01      	cmp	r3, #1
 8009942:	d101      	bne.n	8009948 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009944:	2302      	movs	r3, #2
 8009946:	e02f      	b.n	80099a8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2284      	movs	r2, #132	@ 0x84
 800994c:	2101      	movs	r1, #1
 800994e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2288      	movs	r2, #136	@ 0x88
 8009954:	2124      	movs	r1, #36	@ 0x24
 8009956:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2101      	movs	r1, #1
 800996c:	438a      	bics	r2, r1
 800996e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	4a0e      	ldr	r2, [pc, #56]	@ (80099b0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8009978:	4013      	ands	r3, r2
 800997a:	0019      	movs	r1, r3
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	683a      	ldr	r2, [r7, #0]
 8009982:	430a      	orrs	r2, r1
 8009984:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	0018      	movs	r0, r3
 800998a:	f000 f813 	bl	80099b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	68fa      	ldr	r2, [r7, #12]
 8009994:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2288      	movs	r2, #136	@ 0x88
 800999a:	2120      	movs	r1, #32
 800999c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2284      	movs	r2, #132	@ 0x84
 80099a2:	2100      	movs	r1, #0
 80099a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80099a6:	2300      	movs	r3, #0
}
 80099a8:	0018      	movs	r0, r3
 80099aa:	46bd      	mov	sp, r7
 80099ac:	b004      	add	sp, #16
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	f1ffffff 	.word	0xf1ffffff

080099b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80099b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099b6:	b085      	sub	sp, #20
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d108      	bne.n	80099d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	226a      	movs	r2, #106	@ 0x6a
 80099c8:	2101      	movs	r1, #1
 80099ca:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2268      	movs	r2, #104	@ 0x68
 80099d0:	2101      	movs	r1, #1
 80099d2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80099d4:	e043      	b.n	8009a5e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80099d6:	260f      	movs	r6, #15
 80099d8:	19bb      	adds	r3, r7, r6
 80099da:	2208      	movs	r2, #8
 80099dc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80099de:	200e      	movs	r0, #14
 80099e0:	183b      	adds	r3, r7, r0
 80099e2:	2208      	movs	r2, #8
 80099e4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	0e5b      	lsrs	r3, r3, #25
 80099ee:	b2da      	uxtb	r2, r3
 80099f0:	240d      	movs	r4, #13
 80099f2:	193b      	adds	r3, r7, r4
 80099f4:	2107      	movs	r1, #7
 80099f6:	400a      	ands	r2, r1
 80099f8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	689b      	ldr	r3, [r3, #8]
 8009a00:	0f5b      	lsrs	r3, r3, #29
 8009a02:	b2da      	uxtb	r2, r3
 8009a04:	250c      	movs	r5, #12
 8009a06:	197b      	adds	r3, r7, r5
 8009a08:	2107      	movs	r1, #7
 8009a0a:	400a      	ands	r2, r1
 8009a0c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a0e:	183b      	adds	r3, r7, r0
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	197a      	adds	r2, r7, r5
 8009a14:	7812      	ldrb	r2, [r2, #0]
 8009a16:	4914      	ldr	r1, [pc, #80]	@ (8009a68 <UARTEx_SetNbDataToProcess+0xb4>)
 8009a18:	5c8a      	ldrb	r2, [r1, r2]
 8009a1a:	435a      	muls	r2, r3
 8009a1c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8009a1e:	197b      	adds	r3, r7, r5
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	4a12      	ldr	r2, [pc, #72]	@ (8009a6c <UARTEx_SetNbDataToProcess+0xb8>)
 8009a24:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a26:	0019      	movs	r1, r3
 8009a28:	f7f6 fc14 	bl	8000254 <__divsi3>
 8009a2c:	0003      	movs	r3, r0
 8009a2e:	b299      	uxth	r1, r3
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	226a      	movs	r2, #106	@ 0x6a
 8009a34:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a36:	19bb      	adds	r3, r7, r6
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	193a      	adds	r2, r7, r4
 8009a3c:	7812      	ldrb	r2, [r2, #0]
 8009a3e:	490a      	ldr	r1, [pc, #40]	@ (8009a68 <UARTEx_SetNbDataToProcess+0xb4>)
 8009a40:	5c8a      	ldrb	r2, [r1, r2]
 8009a42:	435a      	muls	r2, r3
 8009a44:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8009a46:	193b      	adds	r3, r7, r4
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	4a08      	ldr	r2, [pc, #32]	@ (8009a6c <UARTEx_SetNbDataToProcess+0xb8>)
 8009a4c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a4e:	0019      	movs	r1, r3
 8009a50:	f7f6 fc00 	bl	8000254 <__divsi3>
 8009a54:	0003      	movs	r3, r0
 8009a56:	b299      	uxth	r1, r3
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2268      	movs	r2, #104	@ 0x68
 8009a5c:	5299      	strh	r1, [r3, r2]
}
 8009a5e:	46c0      	nop			@ (mov r8, r8)
 8009a60:	46bd      	mov	sp, r7
 8009a62:	b005      	add	sp, #20
 8009a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a66:	46c0      	nop			@ (mov r8, r8)
 8009a68:	08010114 	.word	0x08010114
 8009a6c:	0801011c 	.word	0x0801011c

08009a70 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8009a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a72:	b085      	sub	sp, #20
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* chip id read try count */
    uint8_t try_count = 5;
 8009a78:	230e      	movs	r3, #14
 8009a7a:	18fb      	adds	r3, r7, r3
 8009a7c:	2205      	movs	r2, #5
 8009a7e:	701a      	strb	r2, [r3, #0]
    uint8_t chip_id = 0;
 8009a80:	230d      	movs	r3, #13
 8009a82:	18fb      	adds	r3, r7, r3
 8009a84:	2200      	movs	r2, #0
 8009a86:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8009a88:	250f      	movs	r5, #15
 8009a8a:	197c      	adds	r4, r7, r5
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	0018      	movs	r0, r3
 8009a90:	f001 fa2b 	bl	800aeea <null_ptr_check>
 8009a94:	0003      	movs	r3, r0
 8009a96:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8009a98:	197b      	adds	r3, r7, r5
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	b25b      	sxtb	r3, r3
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d154      	bne.n	8009b4c <bme280_init+0xdc>
    {
        while (try_count)
 8009aa2:	e043      	b.n	8009b2c <bme280_init+0xbc>
        {
            /* Read the chip-id of bme280 sensor */
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev); // 0xD0
 8009aa4:	250f      	movs	r5, #15
 8009aa6:	197c      	adds	r4, r7, r5
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	260d      	movs	r6, #13
 8009aac:	19b9      	adds	r1, r7, r6
 8009aae:	2201      	movs	r2, #1
 8009ab0:	20d0      	movs	r0, #208	@ 0xd0
 8009ab2:	f000 f855 	bl	8009b60 <bme280_get_regs>
 8009ab6:	0003      	movs	r3, r0
 8009ab8:	7023      	strb	r3, [r4, #0]
            printf("bme280 chip_id = %x\n", chip_id);
 8009aba:	0034      	movs	r4, r6
 8009abc:	193b      	adds	r3, r7, r4
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	001a      	movs	r2, r3
 8009ac2:	4b26      	ldr	r3, [pc, #152]	@ (8009b5c <bme280_init+0xec>)
 8009ac4:	0011      	movs	r1, r2
 8009ac6:	0018      	movs	r0, r3
 8009ac8:	f7fb fdd4 	bl	8005674 <printf_>
            /* Check for chip id validity */
            if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID))
 8009acc:	0029      	movs	r1, r5
 8009ace:	187b      	adds	r3, r7, r1
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	b25b      	sxtb	r3, r3
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d11c      	bne.n	8009b12 <bme280_init+0xa2>
 8009ad8:	193b      	adds	r3, r7, r4
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	2b60      	cmp	r3, #96	@ 0x60
 8009ade:	d118      	bne.n	8009b12 <bme280_init+0xa2>
            {
                dev->chip_id = chip_id;
 8009ae0:	193b      	adds	r3, r7, r4
 8009ae2:	781a      	ldrb	r2, [r3, #0]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bme280_soft_reset(dev);
 8009ae8:	000d      	movs	r5, r1
 8009aea:	187c      	adds	r4, r7, r1
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	0018      	movs	r0, r3
 8009af0:	f000 fa05 	bl	8009efe <bme280_soft_reset>
 8009af4:	0003      	movs	r3, r0
 8009af6:	7023      	strb	r3, [r4, #0]

                if (rslt == BME280_OK)
 8009af8:	197b      	adds	r3, r7, r5
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	b25b      	sxtb	r3, r3
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d11a      	bne.n	8009b38 <bme280_init+0xc8>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8009b02:	197c      	adds	r4, r7, r5
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	0018      	movs	r0, r3
 8009b08:	f001 f840 	bl	800ab8c <get_calib_data>
 8009b0c:	0003      	movs	r3, r0
 8009b0e:	7023      	strb	r3, [r4, #0]
                }

                break;
 8009b10:	e012      	b.n	8009b38 <bme280_init+0xc8>
            }

            /* Wait for 1 ms */
            dev->delay_us(1, dev->intf_ptr);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	695a      	ldr	r2, [r3, #20]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	0019      	movs	r1, r3
 8009b1c:	2001      	movs	r0, #1
 8009b1e:	4790      	blx	r2
            --try_count;
 8009b20:	220e      	movs	r2, #14
 8009b22:	18bb      	adds	r3, r7, r2
 8009b24:	18ba      	adds	r2, r7, r2
 8009b26:	7812      	ldrb	r2, [r2, #0]
 8009b28:	3a01      	subs	r2, #1
 8009b2a:	701a      	strb	r2, [r3, #0]
        while (try_count)
 8009b2c:	230e      	movs	r3, #14
 8009b2e:	18fb      	adds	r3, r7, r3
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d1b6      	bne.n	8009aa4 <bme280_init+0x34>
 8009b36:	e000      	b.n	8009b3a <bme280_init+0xca>
                break;
 8009b38:	46c0      	nop			@ (mov r8, r8)
        }

        /* Chip id check failed */
        if (!try_count)
 8009b3a:	230e      	movs	r3, #14
 8009b3c:	18fb      	adds	r3, r7, r3
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d103      	bne.n	8009b4c <bme280_init+0xdc>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 8009b44:	230f      	movs	r3, #15
 8009b46:	18fb      	adds	r3, r7, r3
 8009b48:	22fe      	movs	r2, #254	@ 0xfe
 8009b4a:	701a      	strb	r2, [r3, #0]
        }
    }

    return rslt;
 8009b4c:	230f      	movs	r3, #15
 8009b4e:	18fb      	adds	r3, r7, r3
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	b25b      	sxtb	r3, r3
}
 8009b54:	0018      	movs	r0, r3
 8009b56:	46bd      	mov	sp, r7
 8009b58:	b005      	add	sp, #20
 8009b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b5c:	0800fcd8 	.word	0x0800fcd8

08009b60 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme280_dev *dev)
{
 8009b60:	b5b0      	push	{r4, r5, r7, lr}
 8009b62:	b086      	sub	sp, #24
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	60b9      	str	r1, [r7, #8]
 8009b68:	0011      	movs	r1, r2
 8009b6a:	607b      	str	r3, [r7, #4]
 8009b6c:	240f      	movs	r4, #15
 8009b6e:	193b      	adds	r3, r7, r4
 8009b70:	1c02      	adds	r2, r0, #0
 8009b72:	701a      	strb	r2, [r3, #0]
 8009b74:	230c      	movs	r3, #12
 8009b76:	18fb      	adds	r3, r7, r3
 8009b78:	1c0a      	adds	r2, r1, #0
 8009b7a:	801a      	strh	r2, [r3, #0]
    volatile int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	0018      	movs	r0, r3
 8009b80:	f001 f9b3 	bl	800aeea <null_ptr_check>
 8009b84:	0003      	movs	r3, r0
 8009b86:	001a      	movs	r2, r3
 8009b88:	2117      	movs	r1, #23
 8009b8a:	187b      	adds	r3, r7, r1
 8009b8c:	701a      	strb	r2, [r3, #0]

    /* Proceed if null check is fine */
    if ((rslt == BME280_OK) && (reg_data != NULL))
 8009b8e:	187b      	adds	r3, r7, r1
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	b25b      	sxtb	r3, r3
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d129      	bne.n	8009bec <bme280_get_regs+0x8c>
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d026      	beq.n	8009bec <bme280_get_regs+0x8c>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	7a1b      	ldrb	r3, [r3, #8]
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d006      	beq.n	8009bb4 <bme280_get_regs+0x54>
        {
            reg_addr = reg_addr | 0x80;
 8009ba6:	193b      	adds	r3, r7, r4
 8009ba8:	193a      	adds	r2, r7, r4
 8009baa:	7812      	ldrb	r2, [r2, #0]
 8009bac:	2180      	movs	r1, #128	@ 0x80
 8009bae:	4249      	negs	r1, r1
 8009bb0:	430a      	orrs	r2, r1
 8009bb2:	701a      	strb	r2, [r3, #0]

        /* Read the data  */
        /*  void *intf_ptr;Interface function pointer used to enable the device address for I2C
                            and chip selection for SPI */

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	68dc      	ldr	r4, [r3, #12]
 8009bb8:	230c      	movs	r3, #12
 8009bba:	18fb      	adds	r3, r7, r3
 8009bbc:	881a      	ldrh	r2, [r3, #0]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	685d      	ldr	r5, [r3, #4]
 8009bc2:	68b9      	ldr	r1, [r7, #8]
 8009bc4:	230f      	movs	r3, #15
 8009bc6:	18fb      	adds	r3, r7, r3
 8009bc8:	7818      	ldrb	r0, [r3, #0]
 8009bca:	002b      	movs	r3, r5
 8009bcc:	47a0      	blx	r4
 8009bce:	0003      	movs	r3, r0
 8009bd0:	0019      	movs	r1, r3
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2245      	movs	r2, #69	@ 0x45
 8009bd6:	5499      	strb	r1, [r3, r2]

        /* Check for communication error */
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS) // BME280_INTF_RET_SUCCESS = INT8_C(0)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2245      	movs	r2, #69	@ 0x45
 8009bdc:	569b      	ldrsb	r3, [r3, r2]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d008      	beq.n	8009bf4 <bme280_get_regs+0x94>
        {
            rslt = BME280_E_COMM_FAIL; // BME280_E_COMM_FAIL = INT8_C(-4)
 8009be2:	2317      	movs	r3, #23
 8009be4:	18fb      	adds	r3, r7, r3
 8009be6:	22fc      	movs	r2, #252	@ 0xfc
 8009be8:	701a      	strb	r2, [r3, #0]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS) // BME280_INTF_RET_SUCCESS = INT8_C(0)
 8009bea:	e003      	b.n	8009bf4 <bme280_get_regs+0x94>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR; // BME280_E_NULL_PTR = INT8_C(-1)
 8009bec:	2317      	movs	r3, #23
 8009bee:	18fb      	adds	r3, r7, r3
 8009bf0:	22ff      	movs	r2, #255	@ 0xff
 8009bf2:	701a      	strb	r2, [r3, #0]
    }
    //	printf("result => %d\n", rslt);
    return rslt;
 8009bf4:	2317      	movs	r3, #23
 8009bf6:	18fb      	adds	r3, r7, r3
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	b25b      	sxtb	r3, r3
}
 8009bfc:	0018      	movs	r0, r3
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	b006      	add	sp, #24
 8009c02:	bdb0      	pop	{r4, r5, r7, pc}

08009c04 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme280_dev *dev)
{
 8009c04:	b5b0      	push	{r4, r5, r7, lr}
 8009c06:	b08c      	sub	sp, #48	@ 0x30
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	603b      	str	r3, [r7, #0]
 8009c10:	1dfb      	adds	r3, r7, #7
 8009c12:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 8009c14:	1dfb      	adds	r3, r7, #7
 8009c16:	781b      	ldrb	r3, [r3, #0]
 8009c18:	2b0a      	cmp	r3, #10
 8009c1a:	d902      	bls.n	8009c22 <bme280_set_regs+0x1e>
    {
        len = 10;
 8009c1c:	1dfb      	adds	r3, r7, #7
 8009c1e:	220a      	movs	r2, #10
 8009c20:	701a      	strb	r2, [r3, #0]

    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8009c22:	252f      	movs	r5, #47	@ 0x2f
 8009c24:	197c      	adds	r4, r7, r5
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	0018      	movs	r0, r3
 8009c2a:	f001 f95e 	bl	800aeea <null_ptr_check>
 8009c2e:	0003      	movs	r3, r0
 8009c30:	7023      	strb	r3, [r4, #0]

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8009c32:	197b      	adds	r3, r7, r5
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	b25b      	sxtb	r3, r3
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d000      	beq.n	8009c3e <bme280_set_regs+0x3a>
 8009c3c:	e06c      	b.n	8009d18 <bme280_set_regs+0x114>
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d069      	beq.n	8009d18 <bme280_set_regs+0x114>
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d066      	beq.n	8009d18 <bme280_set_regs+0x114>
    {
        if (len != 0)
 8009c4a:	1dfb      	adds	r3, r7, #7
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d05d      	beq.n	8009d0e <bme280_set_regs+0x10a>
        {
            temp_buff[0] = reg_data[0];
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	781a      	ldrb	r2, [r3, #0]
 8009c56:	2314      	movs	r3, #20
 8009c58:	18fb      	adds	r3, r7, r3
 8009c5a:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	7a1b      	ldrb	r3, [r3, #8]
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d01e      	beq.n	8009ca2 <bme280_set_regs+0x9e>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8009c64:	232b      	movs	r3, #43	@ 0x2b
 8009c66:	18fb      	adds	r3, r7, r3
 8009c68:	2200      	movs	r2, #0
 8009c6a:	701a      	strb	r2, [r3, #0]
 8009c6c:	e012      	b.n	8009c94 <bme280_set_regs+0x90>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8009c6e:	202b      	movs	r0, #43	@ 0x2b
 8009c70:	183b      	adds	r3, r7, r0
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	68fa      	ldr	r2, [r7, #12]
 8009c76:	18d3      	adds	r3, r2, r3
 8009c78:	781a      	ldrb	r2, [r3, #0]
 8009c7a:	183b      	adds	r3, r7, r0
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	68f9      	ldr	r1, [r7, #12]
 8009c80:	18cb      	adds	r3, r1, r3
 8009c82:	217f      	movs	r1, #127	@ 0x7f
 8009c84:	400a      	ands	r2, r1
 8009c86:	b2d2      	uxtb	r2, r2
 8009c88:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8009c8a:	183b      	adds	r3, r7, r0
 8009c8c:	781a      	ldrb	r2, [r3, #0]
 8009c8e:	183b      	adds	r3, r7, r0
 8009c90:	3201      	adds	r2, #1
 8009c92:	701a      	strb	r2, [r3, #0]
 8009c94:	232b      	movs	r3, #43	@ 0x2b
 8009c96:	18fa      	adds	r2, r7, r3
 8009c98:	1dfb      	adds	r3, r7, #7
 8009c9a:	7812      	ldrb	r2, [r2, #0]
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d3e5      	bcc.n	8009c6e <bme280_set_regs+0x6a>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8009ca2:	1dfb      	adds	r3, r7, #7
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d911      	bls.n	8009cce <bme280_set_regs+0xca>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8009caa:	1dfb      	adds	r3, r7, #7
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	68ba      	ldr	r2, [r7, #8]
 8009cb0:	2114      	movs	r1, #20
 8009cb2:	1879      	adds	r1, r7, r1
 8009cb4:	68f8      	ldr	r0, [r7, #12]
 8009cb6:	f000 ffb5 	bl	800ac24 <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 8009cba:	1dfb      	adds	r3, r7, #7
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	18db      	adds	r3, r3, r3
 8009cc2:	b29a      	uxth	r2, r3
 8009cc4:	232c      	movs	r3, #44	@ 0x2c
 8009cc6:	18fb      	adds	r3, r7, r3
 8009cc8:	3a01      	subs	r2, #1
 8009cca:	801a      	strh	r2, [r3, #0]
 8009ccc:	e004      	b.n	8009cd8 <bme280_set_regs+0xd4>
            }
            else
            {
                temp_len = len;
 8009cce:	232c      	movs	r3, #44	@ 0x2c
 8009cd0:	18fb      	adds	r3, r7, r3
 8009cd2:	1dfa      	adds	r2, r7, #7
 8009cd4:	7812      	ldrb	r2, [r2, #0]
 8009cd6:	801a      	strh	r2, [r3, #0]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	691c      	ldr	r4, [r3, #16]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	7818      	ldrb	r0, [r3, #0]
 8009ce0:	232c      	movs	r3, #44	@ 0x2c
 8009ce2:	18fb      	adds	r3, r7, r3
 8009ce4:	881a      	ldrh	r2, [r3, #0]
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	2114      	movs	r1, #20
 8009cec:	1879      	adds	r1, r7, r1
 8009cee:	47a0      	blx	r4
 8009cf0:	0003      	movs	r3, r0
 8009cf2:	0019      	movs	r1, r3
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	2245      	movs	r2, #69	@ 0x45
 8009cf8:	5499      	strb	r1, [r3, r2]

            /* Check for communication error */
            if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	2245      	movs	r2, #69	@ 0x45
 8009cfe:	569b      	ldrsb	r3, [r3, r2]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d00e      	beq.n	8009d22 <bme280_set_regs+0x11e>
            {
                rslt = BME280_E_COMM_FAIL;
 8009d04:	232f      	movs	r3, #47	@ 0x2f
 8009d06:	18fb      	adds	r3, r7, r3
 8009d08:	22fc      	movs	r2, #252	@ 0xfc
 8009d0a:	701a      	strb	r2, [r3, #0]
        if (len != 0)
 8009d0c:	e009      	b.n	8009d22 <bme280_set_regs+0x11e>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 8009d0e:	232f      	movs	r3, #47	@ 0x2f
 8009d10:	18fb      	adds	r3, r7, r3
 8009d12:	22fd      	movs	r2, #253	@ 0xfd
 8009d14:	701a      	strb	r2, [r3, #0]
        if (len != 0)
 8009d16:	e004      	b.n	8009d22 <bme280_set_regs+0x11e>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8009d18:	232f      	movs	r3, #47	@ 0x2f
 8009d1a:	18fb      	adds	r3, r7, r3
 8009d1c:	22ff      	movs	r2, #255	@ 0xff
 8009d1e:	701a      	strb	r2, [r3, #0]
 8009d20:	e000      	b.n	8009d24 <bme280_set_regs+0x120>
        if (len != 0)
 8009d22:	46c0      	nop			@ (mov r8, r8)
    }

    return rslt;
 8009d24:	232f      	movs	r3, #47	@ 0x2f
 8009d26:	18fb      	adds	r3, r7, r3
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	b25b      	sxtb	r3, r3
}
 8009d2c:	0018      	movs	r0, r3
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	b00c      	add	sp, #48	@ 0x30
 8009d32:	bdb0      	pop	{r4, r5, r7, pc}

08009d34 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, struct bme280_dev *dev)
{
 8009d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d36:	b085      	sub	sp, #20
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	0002      	movs	r2, r0
 8009d3c:	6039      	str	r1, [r7, #0]
 8009d3e:	1dfb      	adds	r3, r7, #7
 8009d40:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t sensor_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8009d42:	250f      	movs	r5, #15
 8009d44:	197c      	adds	r4, r7, r5
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	0018      	movs	r0, r3
 8009d4a:	f001 f8ce 	bl	800aeea <null_ptr_check>
 8009d4e:	0003      	movs	r3, r0
 8009d50:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8009d52:	197b      	adds	r3, r7, r5
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	b25b      	sxtb	r3, r3
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d14e      	bne.n	8009dfa <bme280_set_sensor_settings+0xc6>
    {
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8009d5c:	197c      	adds	r4, r7, r5
 8009d5e:	683a      	ldr	r2, [r7, #0]
 8009d60:	260e      	movs	r6, #14
 8009d62:	19bb      	adds	r3, r7, r6
 8009d64:	0011      	movs	r1, r2
 8009d66:	0018      	movs	r0, r3
 8009d68:	f000 f896 	bl	8009e98 <bme280_get_sensor_mode>
 8009d6c:	0003      	movs	r3, r0
 8009d6e:	7023      	strb	r3, [r4, #0]

        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8009d70:	002a      	movs	r2, r5
 8009d72:	18bb      	adds	r3, r7, r2
 8009d74:	781b      	ldrb	r3, [r3, #0]
 8009d76:	b25b      	sxtb	r3, r3
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d10a      	bne.n	8009d92 <bme280_set_sensor_settings+0x5e>
 8009d7c:	19bb      	adds	r3, r7, r6
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d006      	beq.n	8009d92 <bme280_set_sensor_settings+0x5e>
        {
            rslt = put_device_to_sleep(dev);
 8009d84:	18bc      	adds	r4, r7, r2
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	0018      	movs	r0, r3
 8009d8a:	f000 fc78 	bl	800a67e <put_device_to_sleep>
 8009d8e:	0003      	movs	r3, r0
 8009d90:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME280_OK)
 8009d92:	240f      	movs	r4, #15
 8009d94:	193b      	adds	r3, r7, r4
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	b25b      	sxtb	r3, r3
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d12d      	bne.n	8009dfa <bme280_set_sensor_settings+0xc6>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8009d9e:	1dfb      	adds	r3, r7, #7
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	0019      	movs	r1, r3
 8009da4:	2007      	movs	r0, #7
 8009da6:	f001 f87c 	bl	800aea2 <are_settings_changed>
 8009daa:	1e03      	subs	r3, r0, #0
 8009dac:	d00b      	beq.n	8009dc6 <bme280_set_sensor_settings+0x92>
            {
                rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	3340      	adds	r3, #64	@ 0x40
 8009db2:	0019      	movs	r1, r3
 8009db4:	193c      	adds	r4, r7, r4
 8009db6:	683a      	ldr	r2, [r7, #0]
 8009db8:	1dfb      	adds	r3, r7, #7
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	0018      	movs	r0, r3
 8009dbe:	f000 fa75 	bl	800a2ac <set_osr_settings>
 8009dc2:	0003      	movs	r3, r0
 8009dc4:	7023      	strb	r3, [r4, #0]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8009dc6:	240f      	movs	r4, #15
 8009dc8:	193b      	adds	r3, r7, r4
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	b25b      	sxtb	r3, r3
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d113      	bne.n	8009dfa <bme280_set_sensor_settings+0xc6>
 8009dd2:	1dfb      	adds	r3, r7, #7
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	0019      	movs	r1, r3
 8009dd8:	2018      	movs	r0, #24
 8009dda:	f001 f862 	bl	800aea2 <are_settings_changed>
 8009dde:	1e03      	subs	r3, r0, #0
 8009de0:	d00b      	beq.n	8009dfa <bme280_set_sensor_settings+0xc6>
            {
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	3340      	adds	r3, #64	@ 0x40
 8009de6:	0019      	movs	r1, r3
 8009de8:	193c      	adds	r4, r7, r4
 8009dea:	683a      	ldr	r2, [r7, #0]
 8009dec:	1dfb      	adds	r3, r7, #7
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	0018      	movs	r0, r3
 8009df2:	f000 fb21 	bl	800a438 <set_filter_standby_settings>
 8009df6:	0003      	movs	r3, r0
 8009df8:	7023      	strb	r3, [r4, #0]
            }
        }
    }

    return rslt;
 8009dfa:	230f      	movs	r3, #15
 8009dfc:	18fb      	adds	r3, r7, r3
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	b25b      	sxtb	r3, r3
}
 8009e02:	0018      	movs	r0, r3
 8009e04:	46bd      	mov	sp, r7
 8009e06:	b005      	add	sp, #20
 8009e08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009e0a <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 8009e0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e0c:	b085      	sub	sp, #20
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	0002      	movs	r2, r0
 8009e12:	6039      	str	r1, [r7, #0]
 8009e14:	1dfb      	adds	r3, r7, #7
 8009e16:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8009e18:	250f      	movs	r5, #15
 8009e1a:	197c      	adds	r4, r7, r5
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	0018      	movs	r0, r3
 8009e20:	f001 f863 	bl	800aeea <null_ptr_check>
 8009e24:	0003      	movs	r3, r0
 8009e26:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 8009e28:	197b      	adds	r3, r7, r5
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	b25b      	sxtb	r3, r3
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d12a      	bne.n	8009e88 <bme280_set_sensor_mode+0x7e>
    {
        rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8009e32:	197c      	adds	r4, r7, r5
 8009e34:	683a      	ldr	r2, [r7, #0]
 8009e36:	260e      	movs	r6, #14
 8009e38:	19bb      	adds	r3, r7, r6
 8009e3a:	0011      	movs	r1, r2
 8009e3c:	0018      	movs	r0, r3
 8009e3e:	f000 f82b 	bl	8009e98 <bme280_get_sensor_mode>
 8009e42:	0003      	movs	r3, r0
 8009e44:	7023      	strb	r3, [r4, #0]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode
         */
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8009e46:	002a      	movs	r2, r5
 8009e48:	18bb      	adds	r3, r7, r2
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	b25b      	sxtb	r3, r3
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d10a      	bne.n	8009e68 <bme280_set_sensor_mode+0x5e>
 8009e52:	19bb      	adds	r3, r7, r6
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d006      	beq.n	8009e68 <bme280_set_sensor_mode+0x5e>
        {
            rslt = put_device_to_sleep(dev);
 8009e5a:	18bc      	adds	r4, r7, r2
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	0018      	movs	r0, r3
 8009e60:	f000 fc0d 	bl	800a67e <put_device_to_sleep>
 8009e64:	0003      	movs	r3, r0
 8009e66:	7023      	strb	r3, [r4, #0]
        }

        /* Set the power mode */
        if (rslt == BME280_OK)
 8009e68:	220f      	movs	r2, #15
 8009e6a:	18bb      	adds	r3, r7, r2
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	b25b      	sxtb	r3, r3
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d109      	bne.n	8009e88 <bme280_set_sensor_mode+0x7e>
        {
            rslt = write_power_mode(sensor_mode, dev);
 8009e74:	18bc      	adds	r4, r7, r2
 8009e76:	683a      	ldr	r2, [r7, #0]
 8009e78:	1dfb      	adds	r3, r7, #7
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	0011      	movs	r1, r2
 8009e7e:	0018      	movs	r0, r3
 8009e80:	f000 fbbd 	bl	800a5fe <write_power_mode>
 8009e84:	0003      	movs	r3, r0
 8009e86:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 8009e88:	230f      	movs	r3, #15
 8009e8a:	18fb      	adds	r3, r7, r3
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	b25b      	sxtb	r3, r3
}
 8009e90:	0018      	movs	r0, r3
 8009e92:	46bd      	mov	sp, r7
 8009e94:	b005      	add	sp, #20
 8009e96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009e98 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, struct bme280_dev *dev)
{
 8009e98:	b5b0      	push	{r4, r5, r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8009ea2:	250f      	movs	r5, #15
 8009ea4:	197c      	adds	r4, r7, r5
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	0018      	movs	r0, r3
 8009eaa:	f001 f81e 	bl	800aeea <null_ptr_check>
 8009eae:	0003      	movs	r3, r0
 8009eb0:	7023      	strb	r3, [r4, #0]

    if ((rslt == BME280_OK) && (sensor_mode != NULL))
 8009eb2:	002a      	movs	r2, r5
 8009eb4:	18bb      	adds	r3, r7, r2
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	b25b      	sxtb	r3, r3
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d113      	bne.n	8009ee6 <bme280_get_sensor_mode+0x4e>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d010      	beq.n	8009ee6 <bme280_get_sensor_mode+0x4e>
    {
        /* Read the power mode register */
        rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8009ec4:	18bc      	adds	r4, r7, r2
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	6879      	ldr	r1, [r7, #4]
 8009eca:	2201      	movs	r2, #1
 8009ecc:	20f4      	movs	r0, #244	@ 0xf4
 8009ece:	f7ff fe47 	bl	8009b60 <bme280_get_regs>
 8009ed2:	0003      	movs	r3, r0
 8009ed4:	7023      	strb	r3, [r4, #0]

        /* Assign the power mode in the device structure */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	2203      	movs	r2, #3
 8009edc:	4013      	ands	r3, r2
 8009ede:	b2da      	uxtb	r2, r3
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	701a      	strb	r2, [r3, #0]
 8009ee4:	e003      	b.n	8009eee <bme280_get_sensor_mode+0x56>
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8009ee6:	230f      	movs	r3, #15
 8009ee8:	18fb      	adds	r3, r7, r3
 8009eea:	22ff      	movs	r2, #255	@ 0xff
 8009eec:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8009eee:	230f      	movs	r3, #15
 8009ef0:	18fb      	adds	r3, r7, r3
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	b25b      	sxtb	r3, r3
}
 8009ef6:	0018      	movs	r0, r3
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	b004      	add	sp, #16
 8009efc:	bdb0      	pop	{r4, r5, r7, pc}

08009efe <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(struct bme280_dev *dev)
{
 8009efe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f00:	b085      	sub	sp, #20
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_RESET_ADDR; // UINT8_C(0xE0)
 8009f06:	260d      	movs	r6, #13
 8009f08:	19bb      	adds	r3, r7, r6
 8009f0a:	22e0      	movs	r2, #224	@ 0xe0
 8009f0c:	701a      	strb	r2, [r3, #0]
    uint8_t status_reg = 0;
 8009f0e:	230c      	movs	r3, #12
 8009f10:	18fb      	adds	r3, r7, r3
 8009f12:	2200      	movs	r2, #0
 8009f14:	701a      	strb	r2, [r3, #0]
    uint8_t try_run = 5;
 8009f16:	230e      	movs	r3, #14
 8009f18:	18fb      	adds	r3, r7, r3
 8009f1a:	2205      	movs	r2, #5
 8009f1c:	701a      	strb	r2, [r3, #0]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 8009f1e:	230b      	movs	r3, #11
 8009f20:	18fb      	adds	r3, r7, r3
 8009f22:	22b6      	movs	r2, #182	@ 0xb6
 8009f24:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8009f26:	250f      	movs	r5, #15
 8009f28:	197c      	adds	r4, r7, r5
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	0018      	movs	r0, r3
 8009f2e:	f000 ffdc 	bl	800aeea <null_ptr_check>
 8009f32:	0003      	movs	r3, r0
 8009f34:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8009f36:	197b      	adds	r3, r7, r5
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	b25b      	sxtb	r3, r3
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d13e      	bne.n	8009fbe <bme280_soft_reset+0xc0>
    {
        /* Write the soft reset command in the sensor */
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8009f40:	197c      	adds	r4, r7, r5
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	220b      	movs	r2, #11
 8009f46:	18b9      	adds	r1, r7, r2
 8009f48:	19b8      	adds	r0, r7, r6
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f7ff fe5a 	bl	8009c04 <bme280_set_regs>
 8009f50:	0003      	movs	r3, r0
 8009f52:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 8009f54:	197b      	adds	r3, r7, r5
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	b25b      	sxtb	r3, r3
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d12f      	bne.n	8009fbe <bme280_soft_reset+0xc0>
        {
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                dev->delay_us(2, dev->intf_ptr);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	695a      	ldr	r2, [r3, #20]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	0019      	movs	r1, r3
 8009f68:	2002      	movs	r0, #2
 8009f6a:	4790      	blx	r2
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 8009f6c:	250f      	movs	r5, #15
 8009f6e:	197c      	adds	r4, r7, r5
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	260c      	movs	r6, #12
 8009f74:	19b9      	adds	r1, r7, r6
 8009f76:	2201      	movs	r2, #1
 8009f78:	20f3      	movs	r0, #243	@ 0xf3
 8009f7a:	f7ff fdf1 	bl	8009b60 <bme280_get_regs>
 8009f7e:	0003      	movs	r3, r0
 8009f80:	7023      	strb	r3, [r4, #0]

            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 8009f82:	197b      	adds	r3, r7, r5
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	b25b      	sxtb	r3, r3
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d10d      	bne.n	8009fa8 <bme280_soft_reset+0xaa>
 8009f8c:	220e      	movs	r2, #14
 8009f8e:	18bb      	adds	r3, r7, r2
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	18ba      	adds	r2, r7, r2
 8009f94:	1e59      	subs	r1, r3, #1
 8009f96:	7011      	strb	r1, [r2, #0]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d005      	beq.n	8009fa8 <bme280_soft_reset+0xaa>
 8009f9c:	19bb      	adds	r3, r7, r6
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	001a      	movs	r2, r3
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	4013      	ands	r3, r2
 8009fa6:	d1da      	bne.n	8009f5e <bme280_soft_reset+0x60>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 8009fa8:	230c      	movs	r3, #12
 8009faa:	18fb      	adds	r3, r7, r3
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	001a      	movs	r2, r3
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	4013      	ands	r3, r2
 8009fb4:	d003      	beq.n	8009fbe <bme280_soft_reset+0xc0>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 8009fb6:	230f      	movs	r3, #15
 8009fb8:	18fb      	adds	r3, r7, r3
 8009fba:	22fa      	movs	r2, #250	@ 0xfa
 8009fbc:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    return rslt;
 8009fbe:	230f      	movs	r3, #15
 8009fc0:	18fb      	adds	r3, r7, r3
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	b25b      	sxtb	r3, r3
}
 8009fc6:	0018      	movs	r0, r3
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	b005      	add	sp, #20
 8009fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009fce <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user../ struct bme280_data
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 8009fce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fd0:	b08b      	sub	sp, #44	@ 0x2c
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	607a      	str	r2, [r7, #4]
 8009fd8:	230f      	movs	r3, #15
 8009fda:	18fb      	adds	r3, r7, r3
 8009fdc:	1c02      	adds	r2, r0, #0
 8009fde:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 8009fe0:	261c      	movs	r6, #28
 8009fe2:	19bb      	adds	r3, r7, r6
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	601a      	str	r2, [r3, #0]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	605a      	str	r2, [r3, #4]
    struct bme280_uncomp_data uncomp_data = {0};
 8009fec:	2310      	movs	r3, #16
 8009fee:	18fb      	adds	r3, r7, r3
 8009ff0:	0018      	movs	r0, r3
 8009ff2:	230c      	movs	r3, #12
 8009ff4:	001a      	movs	r2, r3
 8009ff6:	2100      	movs	r1, #0
 8009ff8:	f003 fd84 	bl	800db04 <memset>

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8009ffc:	2527      	movs	r5, #39	@ 0x27
 8009ffe:	197c      	adds	r4, r7, r5
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	0018      	movs	r0, r3
 800a004:	f000 ff71 	bl	800aeea <null_ptr_check>
 800a008:	0003      	movs	r3, r0
 800a00a:	7023      	strb	r3, [r4, #0]

    if ((rslt == BME280_OK) && (comp_data != NULL))
 800a00c:	197b      	adds	r3, r7, r5
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	b25b      	sxtb	r3, r3
 800a012:	2b00      	cmp	r3, #0
 800a014:	d128      	bne.n	800a068 <bme280_get_sensor_data+0x9a>
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d025      	beq.n	800a068 <bme280_get_sensor_data+0x9a>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 800a01c:	197c      	adds	r4, r7, r5
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	19b9      	adds	r1, r7, r6
 800a022:	2208      	movs	r2, #8
 800a024:	20f7      	movs	r0, #247	@ 0xf7
 800a026:	f7ff fd9b 	bl	8009b60 <bme280_get_regs>
 800a02a:	0003      	movs	r3, r0
 800a02c:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 800a02e:	002c      	movs	r4, r5
 800a030:	193b      	adds	r3, r7, r4
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	b25b      	sxtb	r3, r3
 800a036:	2b00      	cmp	r3, #0
 800a038:	d11a      	bne.n	800a070 <bme280_get_sensor_data+0xa2>
        {
            /* Parse the read data from the sensor */
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 800a03a:	2310      	movs	r3, #16
 800a03c:	18fa      	adds	r2, r7, r3
 800a03e:	19bb      	adds	r3, r7, r6
 800a040:	0011      	movs	r1, r2
 800a042:	0018      	movs	r0, r3
 800a044:	f000 f81c 	bl	800a080 <bme280_parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	001d      	movs	r5, r3
 800a04c:	3518      	adds	r5, #24
 800a04e:	193c      	adds	r4, r7, r4
 800a050:	68ba      	ldr	r2, [r7, #8]
 800a052:	2310      	movs	r3, #16
 800a054:	18f9      	adds	r1, r7, r3
 800a056:	230f      	movs	r3, #15
 800a058:	18fb      	adds	r3, r7, r3
 800a05a:	7818      	ldrb	r0, [r3, #0]
 800a05c:	002b      	movs	r3, r5
 800a05e:	f000 f853 	bl	800a108 <bme280_compensate_data>
 800a062:	0003      	movs	r3, r0
 800a064:	7023      	strb	r3, [r4, #0]
        if (rslt == BME280_OK)
 800a066:	e003      	b.n	800a070 <bme280_get_sensor_data+0xa2>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800a068:	2327      	movs	r3, #39	@ 0x27
 800a06a:	18fb      	adds	r3, r7, r3
 800a06c:	22ff      	movs	r2, #255	@ 0xff
 800a06e:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800a070:	2327      	movs	r3, #39	@ 0x27
 800a072:	18fb      	adds	r3, r7, r3
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	b25b      	sxtb	r3, r3
}
 800a078:	0018      	movs	r0, r3
 800a07a:	46bd      	mov	sp, r7
 800a07c:	b00b      	add	sp, #44	@ 0x2c
 800a07e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a080 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b086      	sub	sp, #24
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	031b      	lsls	r3, r3, #12
 800a090:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	3301      	adds	r3, #1
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	011b      	lsls	r3, r3, #4
 800a09a:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	3302      	adds	r3, #2
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	091b      	lsrs	r3, r3, #4
 800a0a4:	b2db      	uxtb	r3, r3
 800a0a6:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 800a0a8:	697a      	ldr	r2, [r7, #20]
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	431a      	orrs	r2, r3
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	431a      	orrs	r2, r3
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << 12;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	3303      	adds	r3, #3
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	031b      	lsls	r3, r3, #12
 800a0be:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 4;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	3304      	adds	r3, #4
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	011b      	lsls	r3, r3, #4
 800a0c8:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	3305      	adds	r3, #5
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	091b      	lsrs	r3, r3, #4
 800a0d2:	b2db      	uxtb	r3, r3
 800a0d4:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 800a0d6:	697a      	ldr	r2, [r7, #20]
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	431a      	orrs	r2, r3
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	431a      	orrs	r2, r3
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for humidity data */
    data_msb = (uint32_t)reg_data[6] << 8;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	3306      	adds	r3, #6
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	021b      	lsls	r3, r3, #8
 800a0ec:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[7];
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	3307      	adds	r3, #7
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	613b      	str	r3, [r7, #16]
    uncomp_data->humidity = data_msb | data_lsb;
 800a0f6:	697a      	ldr	r2, [r7, #20]
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	431a      	orrs	r2, r3
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	609a      	str	r2, [r3, #8]
}
 800a100:	46c0      	nop			@ (mov r8, r8)
 800a102:	46bd      	mov	sp, r7
 800a104:	b006      	add	sp, #24
 800a106:	bd80      	pop	{r7, pc}

0800a108 <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b086      	sub	sp, #24
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	60b9      	str	r1, [r7, #8]
 800a110:	607a      	str	r2, [r7, #4]
 800a112:	603b      	str	r3, [r7, #0]
 800a114:	210f      	movs	r1, #15
 800a116:	187b      	adds	r3, r7, r1
 800a118:	1c02      	adds	r2, r0, #0
 800a11a:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME280_OK;
 800a11c:	2317      	movs	r3, #23
 800a11e:	18fb      	adds	r3, r7, r3
 800a120:	2200      	movs	r2, #0
 800a122:	701a      	strb	r2, [r3, #0]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d03b      	beq.n	800a1a2 <bme280_compensate_data+0x9a>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d038      	beq.n	800a1a2 <bme280_compensate_data+0x9a>
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d035      	beq.n	800a1a2 <bme280_compensate_data+0x9a>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2200      	movs	r2, #0
 800a13a:	605a      	str	r2, [r3, #4]
        comp_data->pressure = 0;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	601a      	str	r2, [r3, #0]
        comp_data->humidity = 0;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2200      	movs	r2, #0
 800a146:	609a      	str	r2, [r3, #8]

        /* If pressure or temperature component is selected */
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 800a148:	187b      	adds	r3, r7, r1
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	2207      	movs	r2, #7
 800a14e:	4013      	ands	r3, r2
 800a150:	d008      	beq.n	800a164 <bme280_compensate_data+0x5c>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 800a152:	683a      	ldr	r2, [r7, #0]
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	0011      	movs	r1, r2
 800a158:	0018      	movs	r0, r3
 800a15a:	f000 faf1 	bl	800a740 <compensate_temperature>
 800a15e:	0002      	movs	r2, r0
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	605a      	str	r2, [r3, #4]
        }

        if (sensor_comp & BME280_PRESS)
 800a164:	230f      	movs	r3, #15
 800a166:	18fb      	adds	r3, r7, r3
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	2201      	movs	r2, #1
 800a16c:	4013      	ands	r3, r2
 800a16e:	d008      	beq.n	800a182 <bme280_compensate_data+0x7a>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 800a170:	683a      	ldr	r2, [r7, #0]
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	0011      	movs	r1, r2
 800a176:	0018      	movs	r0, r3
 800a178:	f000 fb48 	bl	800a80c <compensate_pressure>
 800a17c:	0002      	movs	r2, r0
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	601a      	str	r2, [r3, #0]
        }

        if (sensor_comp & BME280_HUM)
 800a182:	230f      	movs	r3, #15
 800a184:	18fb      	adds	r3, r7, r3
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	2204      	movs	r2, #4
 800a18a:	4013      	ands	r3, r2
 800a18c:	d00d      	beq.n	800a1aa <bme280_compensate_data+0xa2>
        {
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 800a18e:	683a      	ldr	r2, [r7, #0]
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	0011      	movs	r1, r2
 800a194:	0018      	movs	r0, r3
 800a196:	f000 fc3b 	bl	800aa10 <compensate_humidity>
 800a19a:	0002      	movs	r2, r0
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	609a      	str	r2, [r3, #8]
        if (sensor_comp & BME280_HUM)
 800a1a0:	e003      	b.n	800a1aa <bme280_compensate_data+0xa2>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800a1a2:	2317      	movs	r3, #23
 800a1a4:	18fb      	adds	r3, r7, r3
 800a1a6:	22ff      	movs	r2, #255	@ 0xff
 800a1a8:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800a1aa:	2317      	movs	r3, #23
 800a1ac:	18fb      	adds	r3, r7, r3
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	b25b      	sxtb	r3, r3
}
 800a1b2:	0018      	movs	r0, r3
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	b006      	add	sp, #24
 800a1b8:	bd80      	pop	{r7, pc}
	...

0800a1bc <bme280_cal_meas_delay>:
/*!
 * @brief This API is used to calculate the maximum delay in milliseconds required for the
 * temperature/pressure/humidity(which ever at enabled) measurement to complete.
 */
uint32_t bme280_cal_meas_delay(const struct bme280_settings *settings)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b086      	sub	sp, #24
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
    uint8_t temp_osr;
    uint8_t pres_osr;
    uint8_t hum_osr;

    /*Array to map OSR config register value to actual OSR */
    uint8_t osr_sett_to_act_osr[] = {0, 1, 2, 4, 8, 16};
 800a1c4:	2008      	movs	r0, #8
 800a1c6:	183b      	adds	r3, r7, r0
 800a1c8:	4a35      	ldr	r2, [pc, #212]	@ (800a2a0 <bme280_cal_meas_delay+0xe4>)
 800a1ca:	6811      	ldr	r1, [r2, #0]
 800a1cc:	6019      	str	r1, [r3, #0]
 800a1ce:	8892      	ldrh	r2, [r2, #4]
 800a1d0:	809a      	strh	r2, [r3, #4]

    /* Mapping osr settings to the actual osr values e.g. 0b101 -> osr X16  */
    if (settings->osr_t <= 5)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	785b      	ldrb	r3, [r3, #1]
 800a1d6:	2b05      	cmp	r3, #5
 800a1d8:	d808      	bhi.n	800a1ec <bme280_cal_meas_delay+0x30>
    {
        temp_osr = osr_sett_to_act_osr[settings->osr_t];
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	785b      	ldrb	r3, [r3, #1]
 800a1de:	0019      	movs	r1, r3
 800a1e0:	2317      	movs	r3, #23
 800a1e2:	18fb      	adds	r3, r7, r3
 800a1e4:	183a      	adds	r2, r7, r0
 800a1e6:	5c52      	ldrb	r2, [r2, r1]
 800a1e8:	701a      	strb	r2, [r3, #0]
 800a1ea:	e003      	b.n	800a1f4 <bme280_cal_meas_delay+0x38>
    }
    else
    {
        temp_osr = 16;
 800a1ec:	2317      	movs	r3, #23
 800a1ee:	18fb      	adds	r3, r7, r3
 800a1f0:	2210      	movs	r2, #16
 800a1f2:	701a      	strb	r2, [r3, #0]
    }

    if (settings->osr_p <= 5)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	2b05      	cmp	r3, #5
 800a1fa:	d809      	bhi.n	800a210 <bme280_cal_meas_delay+0x54>
    {
        pres_osr = osr_sett_to_act_osr[settings->osr_p];
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	0019      	movs	r1, r3
 800a202:	2316      	movs	r3, #22
 800a204:	18fb      	adds	r3, r7, r3
 800a206:	2208      	movs	r2, #8
 800a208:	18ba      	adds	r2, r7, r2
 800a20a:	5c52      	ldrb	r2, [r2, r1]
 800a20c:	701a      	strb	r2, [r3, #0]
 800a20e:	e003      	b.n	800a218 <bme280_cal_meas_delay+0x5c>
    }
    else
    {
        pres_osr = 16;
 800a210:	2316      	movs	r3, #22
 800a212:	18fb      	adds	r3, r7, r3
 800a214:	2210      	movs	r2, #16
 800a216:	701a      	strb	r2, [r3, #0]
    }

    if (settings->osr_h <= 5)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	789b      	ldrb	r3, [r3, #2]
 800a21c:	2b05      	cmp	r3, #5
 800a21e:	d809      	bhi.n	800a234 <bme280_cal_meas_delay+0x78>
    {
        hum_osr = osr_sett_to_act_osr[settings->osr_h];
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	789b      	ldrb	r3, [r3, #2]
 800a224:	0019      	movs	r1, r3
 800a226:	2315      	movs	r3, #21
 800a228:	18fb      	adds	r3, r7, r3
 800a22a:	2208      	movs	r2, #8
 800a22c:	18ba      	adds	r2, r7, r2
 800a22e:	5c52      	ldrb	r2, [r2, r1]
 800a230:	701a      	strb	r2, [r3, #0]
 800a232:	e003      	b.n	800a23c <bme280_cal_meas_delay+0x80>
    }
    else
    {
        hum_osr = 16;
 800a234:	2315      	movs	r3, #21
 800a236:	18fb      	adds	r3, r7, r3
 800a238:	2210      	movs	r2, #16
 800a23a:	701a      	strb	r2, [r3, #0]
    }

    max_delay =
        (uint32_t)((BME280_MEAS_OFFSET + (BME280_MEAS_DUR * temp_osr) +
 800a23c:	2317      	movs	r3, #23
 800a23e:	18fb      	adds	r3, r7, r3
 800a240:	781a      	ldrb	r2, [r3, #0]
 800a242:	0013      	movs	r3, r2
 800a244:	00db      	lsls	r3, r3, #3
 800a246:	189b      	adds	r3, r3, r2
 800a248:	019b      	lsls	r3, r3, #6
 800a24a:	1a9b      	subs	r3, r3, r2
 800a24c:	009b      	lsls	r3, r3, #2
 800a24e:	4a15      	ldr	r2, [pc, #84]	@ (800a2a4 <bme280_cal_meas_delay+0xe8>)
 800a250:	1899      	adds	r1, r3, r2
                    ((BME280_MEAS_DUR * pres_osr) + BME280_PRES_HUM_MEAS_OFFSET) +
 800a252:	2316      	movs	r3, #22
 800a254:	18fb      	adds	r3, r7, r3
 800a256:	781a      	ldrb	r2, [r3, #0]
 800a258:	0013      	movs	r3, r2
 800a25a:	00db      	lsls	r3, r3, #3
 800a25c:	189b      	adds	r3, r3, r2
 800a25e:	019b      	lsls	r3, r3, #6
 800a260:	1a9b      	subs	r3, r3, r2
 800a262:	009b      	lsls	r3, r3, #2
 800a264:	4a10      	ldr	r2, [pc, #64]	@ (800a2a8 <bme280_cal_meas_delay+0xec>)
 800a266:	4694      	mov	ip, r2
 800a268:	4463      	add	r3, ip
        (uint32_t)((BME280_MEAS_OFFSET + (BME280_MEAS_DUR * temp_osr) +
 800a26a:	18c9      	adds	r1, r1, r3
                    ((BME280_MEAS_DUR * hum_osr) + BME280_PRES_HUM_MEAS_OFFSET)) /
 800a26c:	2315      	movs	r3, #21
 800a26e:	18fb      	adds	r3, r7, r3
 800a270:	781a      	ldrb	r2, [r3, #0]
 800a272:	0013      	movs	r3, r2
 800a274:	00db      	lsls	r3, r3, #3
 800a276:	189b      	adds	r3, r3, r2
 800a278:	019b      	lsls	r3, r3, #6
 800a27a:	1a9b      	subs	r3, r3, r2
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	4a0a      	ldr	r2, [pc, #40]	@ (800a2a8 <bme280_cal_meas_delay+0xec>)
 800a280:	4694      	mov	ip, r2
 800a282:	4463      	add	r3, ip
                    ((BME280_MEAS_DUR * pres_osr) + BME280_PRES_HUM_MEAS_OFFSET) +
 800a284:	18cb      	adds	r3, r1, r3
                    ((BME280_MEAS_DUR * hum_osr) + BME280_PRES_HUM_MEAS_OFFSET)) /
 800a286:	22fa      	movs	r2, #250	@ 0xfa
 800a288:	0091      	lsls	r1, r2, #2
 800a28a:	0018      	movs	r0, r3
 800a28c:	f7f5 ffe2 	bl	8000254 <__divsi3>
 800a290:	0003      	movs	r3, r0
    max_delay =
 800a292:	613b      	str	r3, [r7, #16]
                   BME280_MEAS_SCALING_FACTOR);

    return max_delay;
 800a294:	693b      	ldr	r3, [r7, #16]
}
 800a296:	0018      	movs	r0, r3
 800a298:	46bd      	mov	sp, r7
 800a29a:	b006      	add	sp, #24
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	46c0      	nop			@ (mov r8, r8)
 800a2a0:	0800fcf0 	.word	0x0800fcf0
 800a2a4:	000004e2 	.word	0x000004e2
 800a2a8:	0000023f 	.word	0x0000023f

0800a2ac <set_osr_settings>:
/*!
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings, struct bme280_dev *dev)
{
 800a2ac:	b590      	push	{r4, r7, lr}
 800a2ae:	b087      	sub	sp, #28
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	60b9      	str	r1, [r7, #8]
 800a2b4:	607a      	str	r2, [r7, #4]
 800a2b6:	210f      	movs	r1, #15
 800a2b8:	187b      	adds	r3, r7, r1
 800a2ba:	1c02      	adds	r2, r0, #0
 800a2bc:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 800a2be:	2017      	movs	r0, #23
 800a2c0:	183b      	adds	r3, r7, r0
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	701a      	strb	r2, [r3, #0]

    if (desired_settings & BME280_OSR_HUM_SEL)
 800a2c6:	187b      	adds	r3, r7, r1
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	2204      	movs	r2, #4
 800a2cc:	4013      	ands	r3, r2
 800a2ce:	d008      	beq.n	800a2e2 <set_osr_settings+0x36>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 800a2d0:	183c      	adds	r4, r7, r0
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	0011      	movs	r1, r2
 800a2d8:	0018      	movs	r0, r3
 800a2da:	f000 f81b 	bl	800a314 <set_osr_humidity_settings>
 800a2de:	0003      	movs	r3, r0
 800a2e0:	7023      	strb	r3, [r4, #0]
    }

    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 800a2e2:	200f      	movs	r0, #15
 800a2e4:	183b      	adds	r3, r7, r0
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	2203      	movs	r2, #3
 800a2ea:	4013      	ands	r3, r2
 800a2ec:	d00a      	beq.n	800a304 <set_osr_settings+0x58>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 800a2ee:	2317      	movs	r3, #23
 800a2f0:	18fc      	adds	r4, r7, r3
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	68b9      	ldr	r1, [r7, #8]
 800a2f6:	183b      	adds	r3, r7, r0
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	0018      	movs	r0, r3
 800a2fc:	f000 f851 	bl	800a3a2 <set_osr_press_temp_settings>
 800a300:	0003      	movs	r3, r0
 800a302:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800a304:	2317      	movs	r3, #23
 800a306:	18fb      	adds	r3, r7, r3
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	b25b      	sxtb	r3, r3
}
 800a30c:	0018      	movs	r0, r3
 800a30e:	46bd      	mov	sp, r7
 800a310:	b007      	add	sp, #28
 800a312:	bd90      	pop	{r4, r7, pc}

0800a314 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 800a314:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a316:	b085      	sub	sp, #20
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 800a31e:	250c      	movs	r5, #12
 800a320:	197b      	adds	r3, r7, r5
 800a322:	22f2      	movs	r2, #242	@ 0xf2
 800a324:	701a      	strb	r2, [r3, #0]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	789b      	ldrb	r3, [r3, #2]
 800a32a:	2207      	movs	r2, #7
 800a32c:	4013      	ands	r3, r2
 800a32e:	b2da      	uxtb	r2, r3
 800a330:	210e      	movs	r1, #14
 800a332:	187b      	adds	r3, r7, r1
 800a334:	701a      	strb	r2, [r3, #0]

    /* Write the humidity control value in the register */
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 800a336:	260f      	movs	r6, #15
 800a338:	19bc      	adds	r4, r7, r6
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	1879      	adds	r1, r7, r1
 800a33e:	1978      	adds	r0, r7, r5
 800a340:	2201      	movs	r2, #1
 800a342:	f7ff fc5f 	bl	8009c04 <bme280_set_regs>
 800a346:	0003      	movs	r3, r0
 800a348:	7023      	strb	r3, [r4, #0]

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 800a34a:	0031      	movs	r1, r6
 800a34c:	187b      	adds	r3, r7, r1
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	b25b      	sxtb	r3, r3
 800a352:	2b00      	cmp	r3, #0
 800a354:	d11d      	bne.n	800a392 <set_osr_humidity_settings+0x7e>
    {
        reg_addr = BME280_CTRL_MEAS_ADDR;
 800a356:	197b      	adds	r3, r7, r5
 800a358:	22f4      	movs	r2, #244	@ 0xf4
 800a35a:	701a      	strb	r2, [r3, #0]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 800a35c:	197b      	adds	r3, r7, r5
 800a35e:	7818      	ldrb	r0, [r3, #0]
 800a360:	000e      	movs	r6, r1
 800a362:	187c      	adds	r4, r7, r1
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	220d      	movs	r2, #13
 800a368:	18b9      	adds	r1, r7, r2
 800a36a:	2201      	movs	r2, #1
 800a36c:	f7ff fbf8 	bl	8009b60 <bme280_get_regs>
 800a370:	0003      	movs	r3, r0
 800a372:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 800a374:	19bb      	adds	r3, r7, r6
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	b25b      	sxtb	r3, r3
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d109      	bne.n	800a392 <set_osr_humidity_settings+0x7e>
        {
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 800a37e:	19bc      	adds	r4, r7, r6
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	220d      	movs	r2, #13
 800a384:	18b9      	adds	r1, r7, r2
 800a386:	1978      	adds	r0, r7, r5
 800a388:	2201      	movs	r2, #1
 800a38a:	f7ff fc3b 	bl	8009c04 <bme280_set_regs>
 800a38e:	0003      	movs	r3, r0
 800a390:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 800a392:	230f      	movs	r3, #15
 800a394:	18fb      	adds	r3, r7, r3
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	b25b      	sxtb	r3, r3
}
 800a39a:	0018      	movs	r0, r3
 800a39c:	46bd      	mov	sp, r7
 800a39e:	b005      	add	sp, #20
 800a3a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a3a2 <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 800a3a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3a4:	b087      	sub	sp, #28
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	60b9      	str	r1, [r7, #8]
 800a3aa:	607a      	str	r2, [r7, #4]
 800a3ac:	250f      	movs	r5, #15
 800a3ae:	197b      	adds	r3, r7, r5
 800a3b0:	1c02      	adds	r2, r0, #0
 800a3b2:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 800a3b4:	2116      	movs	r1, #22
 800a3b6:	187b      	adds	r3, r7, r1
 800a3b8:	22f4      	movs	r2, #244	@ 0xf4
 800a3ba:	701a      	strb	r2, [r3, #0]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800a3bc:	187b      	adds	r3, r7, r1
 800a3be:	7818      	ldrb	r0, [r3, #0]
 800a3c0:	2617      	movs	r6, #23
 800a3c2:	19bc      	adds	r4, r7, r6
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2215      	movs	r2, #21
 800a3c8:	18b9      	adds	r1, r7, r2
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	f7ff fbc8 	bl	8009b60 <bme280_get_regs>
 800a3d0:	0003      	movs	r3, r0
 800a3d2:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 800a3d4:	19bb      	adds	r3, r7, r6
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	b25b      	sxtb	r3, r3
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d124      	bne.n	800a428 <set_osr_press_temp_settings+0x86>
    {
        if (desired_settings & BME280_OSR_PRESS_SEL)
 800a3de:	197b      	adds	r3, r7, r5
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	4013      	ands	r3, r2
 800a3e6:	d006      	beq.n	800a3f6 <set_osr_press_temp_settings+0x54>
        {
            fill_osr_press_settings(&reg_data, settings);
 800a3e8:	68ba      	ldr	r2, [r7, #8]
 800a3ea:	2315      	movs	r3, #21
 800a3ec:	18fb      	adds	r3, r7, r3
 800a3ee:	0011      	movs	r1, r2
 800a3f0:	0018      	movs	r0, r3
 800a3f2:	f000 f89f 	bl	800a534 <fill_osr_press_settings>
        }

        if (desired_settings & BME280_OSR_TEMP_SEL)
 800a3f6:	230f      	movs	r3, #15
 800a3f8:	18fb      	adds	r3, r7, r3
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	2202      	movs	r2, #2
 800a3fe:	4013      	ands	r3, r2
 800a400:	d006      	beq.n	800a410 <set_osr_press_temp_settings+0x6e>
        {
            fill_osr_temp_settings(&reg_data, settings);
 800a402:	68ba      	ldr	r2, [r7, #8]
 800a404:	2315      	movs	r3, #21
 800a406:	18fb      	adds	r3, r7, r3
 800a408:	0011      	movs	r1, r2
 800a40a:	0018      	movs	r0, r3
 800a40c:	f000 f8ad 	bl	800a56a <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800a410:	2317      	movs	r3, #23
 800a412:	18fc      	adds	r4, r7, r3
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2215      	movs	r2, #21
 800a418:	18b9      	adds	r1, r7, r2
 800a41a:	2216      	movs	r2, #22
 800a41c:	18b8      	adds	r0, r7, r2
 800a41e:	2201      	movs	r2, #1
 800a420:	f7ff fbf0 	bl	8009c04 <bme280_set_regs>
 800a424:	0003      	movs	r3, r0
 800a426:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800a428:	2317      	movs	r3, #23
 800a42a:	18fb      	adds	r3, r7, r3
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	b25b      	sxtb	r3, r3
}
 800a430:	0018      	movs	r0, r3
 800a432:	46bd      	mov	sp, r7
 800a434:	b007      	add	sp, #28
 800a436:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a438 <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 800a438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a43a:	b087      	sub	sp, #28
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	60b9      	str	r1, [r7, #8]
 800a440:	607a      	str	r2, [r7, #4]
 800a442:	250f      	movs	r5, #15
 800a444:	197b      	adds	r3, r7, r5
 800a446:	1c02      	adds	r2, r0, #0
 800a448:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 800a44a:	2116      	movs	r1, #22
 800a44c:	187b      	adds	r3, r7, r1
 800a44e:	22f5      	movs	r2, #245	@ 0xf5
 800a450:	701a      	strb	r2, [r3, #0]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800a452:	187b      	adds	r3, r7, r1
 800a454:	7818      	ldrb	r0, [r3, #0]
 800a456:	2617      	movs	r6, #23
 800a458:	19bc      	adds	r4, r7, r6
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2215      	movs	r2, #21
 800a45e:	18b9      	adds	r1, r7, r2
 800a460:	2201      	movs	r2, #1
 800a462:	f7ff fb7d 	bl	8009b60 <bme280_get_regs>
 800a466:	0003      	movs	r3, r0
 800a468:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 800a46a:	19bb      	adds	r3, r7, r6
 800a46c:	781b      	ldrb	r3, [r3, #0]
 800a46e:	b25b      	sxtb	r3, r3
 800a470:	2b00      	cmp	r3, #0
 800a472:	d124      	bne.n	800a4be <set_filter_standby_settings+0x86>
    {
        if (desired_settings & BME280_FILTER_SEL)
 800a474:	197b      	adds	r3, r7, r5
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	2208      	movs	r2, #8
 800a47a:	4013      	ands	r3, r2
 800a47c:	d006      	beq.n	800a48c <set_filter_standby_settings+0x54>
        {
            fill_filter_settings(&reg_data, settings);
 800a47e:	68ba      	ldr	r2, [r7, #8]
 800a480:	2315      	movs	r3, #21
 800a482:	18fb      	adds	r3, r7, r3
 800a484:	0011      	movs	r1, r2
 800a486:	0018      	movs	r0, r3
 800a488:	f000 f821 	bl	800a4ce <fill_filter_settings>
        }

        if (desired_settings & BME280_STANDBY_SEL)
 800a48c:	230f      	movs	r3, #15
 800a48e:	18fb      	adds	r3, r7, r3
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	2210      	movs	r2, #16
 800a494:	4013      	ands	r3, r2
 800a496:	d006      	beq.n	800a4a6 <set_filter_standby_settings+0x6e>
        {
            fill_standby_settings(&reg_data, settings);
 800a498:	68ba      	ldr	r2, [r7, #8]
 800a49a:	2315      	movs	r3, #21
 800a49c:	18fb      	adds	r3, r7, r3
 800a49e:	0011      	movs	r1, r2
 800a4a0:	0018      	movs	r0, r3
 800a4a2:	f000 f82f 	bl	800a504 <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800a4a6:	2317      	movs	r3, #23
 800a4a8:	18fc      	adds	r4, r7, r3
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2215      	movs	r2, #21
 800a4ae:	18b9      	adds	r1, r7, r2
 800a4b0:	2216      	movs	r2, #22
 800a4b2:	18b8      	adds	r0, r7, r2
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	f7ff fba5 	bl	8009c04 <bme280_set_regs>
 800a4ba:	0003      	movs	r3, r0
 800a4bc:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800a4be:	2317      	movs	r3, #23
 800a4c0:	18fb      	adds	r3, r7, r3
 800a4c2:	781b      	ldrb	r3, [r3, #0]
 800a4c4:	b25b      	sxtb	r3, r3
}
 800a4c6:	0018      	movs	r0, r3
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	b007      	add	sp, #28
 800a4cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a4ce <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b082      	sub	sp, #8
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
 800a4d6:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	b25b      	sxtb	r3, r3
 800a4de:	221c      	movs	r2, #28
 800a4e0:	4393      	bics	r3, r2
 800a4e2:	b25a      	sxtb	r2, r3
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	78db      	ldrb	r3, [r3, #3]
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	b25b      	sxtb	r3, r3
 800a4ec:	211c      	movs	r1, #28
 800a4ee:	400b      	ands	r3, r1
 800a4f0:	b25b      	sxtb	r3, r3
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	b25b      	sxtb	r3, r3
 800a4f6:	b2da      	uxtb	r2, r3
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	701a      	strb	r2, [r3, #0]
}
 800a4fc:	46c0      	nop			@ (mov r8, r8)
 800a4fe:	46bd      	mov	sp, r7
 800a500:	b002      	add	sp, #8
 800a502:	bd80      	pop	{r7, pc}

0800a504 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	b25b      	sxtb	r3, r3
 800a514:	221f      	movs	r2, #31
 800a516:	4013      	ands	r3, r2
 800a518:	b25a      	sxtb	r2, r3
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	791b      	ldrb	r3, [r3, #4]
 800a51e:	015b      	lsls	r3, r3, #5
 800a520:	b25b      	sxtb	r3, r3
 800a522:	4313      	orrs	r3, r2
 800a524:	b25b      	sxtb	r3, r3
 800a526:	b2da      	uxtb	r2, r3
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	701a      	strb	r2, [r3, #0]
}
 800a52c:	46c0      	nop			@ (mov r8, r8)
 800a52e:	46bd      	mov	sp, r7
 800a530:	b002      	add	sp, #8
 800a532:	bd80      	pop	{r7, pc}

0800a534 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	b25b      	sxtb	r3, r3
 800a544:	221c      	movs	r2, #28
 800a546:	4393      	bics	r3, r2
 800a548:	b25a      	sxtb	r2, r3
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	009b      	lsls	r3, r3, #2
 800a550:	b25b      	sxtb	r3, r3
 800a552:	211c      	movs	r1, #28
 800a554:	400b      	ands	r3, r1
 800a556:	b25b      	sxtb	r3, r3
 800a558:	4313      	orrs	r3, r2
 800a55a:	b25b      	sxtb	r3, r3
 800a55c:	b2da      	uxtb	r2, r3
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	701a      	strb	r2, [r3, #0]
}
 800a562:	46c0      	nop			@ (mov r8, r8)
 800a564:	46bd      	mov	sp, r7
 800a566:	b002      	add	sp, #8
 800a568:	bd80      	pop	{r7, pc}

0800a56a <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b082      	sub	sp, #8
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
 800a572:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	b25b      	sxtb	r3, r3
 800a57a:	221f      	movs	r2, #31
 800a57c:	4013      	ands	r3, r2
 800a57e:	b25a      	sxtb	r2, r3
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	785b      	ldrb	r3, [r3, #1]
 800a584:	015b      	lsls	r3, r3, #5
 800a586:	b25b      	sxtb	r3, r3
 800a588:	4313      	orrs	r3, r2
 800a58a:	b25b      	sxtb	r3, r3
 800a58c:	b2da      	uxtb	r2, r3
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	701a      	strb	r2, [r3, #0]
}
 800a592:	46c0      	nop			@ (mov r8, r8)
 800a594:	46bd      	mov	sp, r7
 800a596:	b002      	add	sp, #8
 800a598:	bd80      	pop	{r7, pc}

0800a59a <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b082      	sub	sp, #8
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
 800a5a2:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	2207      	movs	r2, #7
 800a5aa:	4013      	ands	r3, r2
 800a5ac:	b2da      	uxtb	r2, r3
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	3302      	adds	r3, #2
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	109b      	asrs	r3, r3, #2
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	2207      	movs	r2, #7
 800a5be:	4013      	ands	r3, r2
 800a5c0:	b2da      	uxtb	r2, r3
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	3302      	adds	r3, #2
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	095b      	lsrs	r3, r3, #5
 800a5ce:	b2da      	uxtb	r2, r3
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	3303      	adds	r3, #3
 800a5d8:	781b      	ldrb	r3, [r3, #0]
 800a5da:	109b      	asrs	r3, r3, #2
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	2207      	movs	r2, #7
 800a5e0:	4013      	ands	r3, r2
 800a5e2:	b2da      	uxtb	r2, r3
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	3303      	adds	r3, #3
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	095b      	lsrs	r3, r3, #5
 800a5f0:	b2da      	uxtb	r2, r3
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	711a      	strb	r2, [r3, #4]
}
 800a5f6:	46c0      	nop			@ (mov r8, r8)
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	b002      	add	sp, #8
 800a5fc:	bd80      	pop	{r7, pc}

0800a5fe <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 800a5fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a600:	b085      	sub	sp, #20
 800a602:	af00      	add	r7, sp, #0
 800a604:	0002      	movs	r2, r0
 800a606:	6039      	str	r1, [r7, #0]
 800a608:	1dfb      	adds	r3, r7, #7
 800a60a:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 800a60c:	260e      	movs	r6, #14
 800a60e:	19bb      	adds	r3, r7, r6
 800a610:	22f4      	movs	r2, #244	@ 0xf4
 800a612:	701a      	strb	r2, [r3, #0]

    /* Variable to store the value read from power mode register */
    uint8_t sensor_mode_reg_val;

    /* Read the power mode register */
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 800a614:	19bb      	adds	r3, r7, r6
 800a616:	7818      	ldrb	r0, [r3, #0]
 800a618:	240f      	movs	r4, #15
 800a61a:	193c      	adds	r4, r7, r4
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	250d      	movs	r5, #13
 800a620:	1979      	adds	r1, r7, r5
 800a622:	2201      	movs	r2, #1
 800a624:	f7ff fa9c 	bl	8009b60 <bme280_get_regs>
 800a628:	0003      	movs	r3, r0
 800a62a:	7023      	strb	r3, [r4, #0]

    /* Set the power mode */
    if (rslt == BME280_OK)
 800a62c:	240f      	movs	r4, #15
 800a62e:	193b      	adds	r3, r7, r4
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	b25b      	sxtb	r3, r3
 800a634:	2b00      	cmp	r3, #0
 800a636:	d11a      	bne.n	800a66e <write_power_mode+0x70>
    {
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 800a638:	0028      	movs	r0, r5
 800a63a:	183b      	adds	r3, r7, r0
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	b25b      	sxtb	r3, r3
 800a640:	2203      	movs	r2, #3
 800a642:	4393      	bics	r3, r2
 800a644:	b25a      	sxtb	r2, r3
 800a646:	1dfb      	adds	r3, r7, #7
 800a648:	781b      	ldrb	r3, [r3, #0]
 800a64a:	b25b      	sxtb	r3, r3
 800a64c:	2103      	movs	r1, #3
 800a64e:	400b      	ands	r3, r1
 800a650:	b25b      	sxtb	r3, r3
 800a652:	4313      	orrs	r3, r2
 800a654:	b25b      	sxtb	r3, r3
 800a656:	b2da      	uxtb	r2, r3
 800a658:	183b      	adds	r3, r7, r0
 800a65a:	701a      	strb	r2, [r3, #0]

        /* Write the power mode in the register */
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 800a65c:	193c      	adds	r4, r7, r4
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	1839      	adds	r1, r7, r0
 800a662:	19b8      	adds	r0, r7, r6
 800a664:	2201      	movs	r2, #1
 800a666:	f7ff facd 	bl	8009c04 <bme280_set_regs>
 800a66a:	0003      	movs	r3, r0
 800a66c:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800a66e:	230f      	movs	r3, #15
 800a670:	18fb      	adds	r3, r7, r3
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	b25b      	sxtb	r3, r3
}
 800a676:	0018      	movs	r0, r3
 800a678:	46bd      	mov	sp, r7
 800a67a:	b005      	add	sp, #20
 800a67c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a67e <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
int8_t put_device_to_sleep(struct bme280_dev *dev)
{
 800a67e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a680:	b087      	sub	sp, #28
 800a682:	af00      	add	r7, sp, #0
 800a684:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];
    struct bme280_settings settings;

    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 800a686:	2517      	movs	r5, #23
 800a688:	197c      	adds	r4, r7, r5
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2610      	movs	r6, #16
 800a68e:	19b9      	adds	r1, r7, r6
 800a690:	2204      	movs	r2, #4
 800a692:	20f2      	movs	r0, #242	@ 0xf2
 800a694:	f7ff fa64 	bl	8009b60 <bme280_get_regs>
 800a698:	0003      	movs	r3, r0
 800a69a:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 800a69c:	002c      	movs	r4, r5
 800a69e:	193b      	adds	r3, r7, r4
 800a6a0:	781b      	ldrb	r3, [r3, #0]
 800a6a2:	b25b      	sxtb	r3, r3
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d11d      	bne.n	800a6e4 <put_device_to_sleep+0x66>
    {
        parse_device_settings(reg_data, &settings);
 800a6a8:	2308      	movs	r3, #8
 800a6aa:	18fa      	adds	r2, r7, r3
 800a6ac:	19bb      	adds	r3, r7, r6
 800a6ae:	0011      	movs	r1, r2
 800a6b0:	0018      	movs	r0, r3
 800a6b2:	f7ff ff72 	bl	800a59a <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 800a6b6:	0025      	movs	r5, r4
 800a6b8:	193c      	adds	r4, r7, r4
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	0018      	movs	r0, r3
 800a6be:	f7ff fc1e 	bl	8009efe <bme280_soft_reset>
 800a6c2:	0003      	movs	r3, r0
 800a6c4:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 800a6c6:	197b      	adds	r3, r7, r5
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	b25b      	sxtb	r3, r3
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d109      	bne.n	800a6e4 <put_device_to_sleep+0x66>
        {
            rslt = reload_device_settings(&settings, dev);
 800a6d0:	197c      	adds	r4, r7, r5
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	2308      	movs	r3, #8
 800a6d6:	18fb      	adds	r3, r7, r3
 800a6d8:	0011      	movs	r1, r2
 800a6da:	0018      	movs	r0, r3
 800a6dc:	f000 f80a 	bl	800a6f4 <reload_device_settings>
 800a6e0:	0003      	movs	r3, r0
 800a6e2:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 800a6e4:	2317      	movs	r3, #23
 800a6e6:	18fb      	adds	r3, r7, r3
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	b25b      	sxtb	r3, r3
}
 800a6ec:	0018      	movs	r0, r3
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	b007      	add	sp, #28
 800a6f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a6f4 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 800a6f4:	b5b0      	push	{r4, r5, r7, lr}
 800a6f6:	b084      	sub	sp, #16
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 800a6fe:	250f      	movs	r5, #15
 800a700:	197c      	adds	r4, r7, r5
 800a702:	683a      	ldr	r2, [r7, #0]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	0019      	movs	r1, r3
 800a708:	201f      	movs	r0, #31
 800a70a:	f7ff fdcf 	bl	800a2ac <set_osr_settings>
 800a70e:	0003      	movs	r3, r0
 800a710:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 800a712:	197b      	adds	r3, r7, r5
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	b25b      	sxtb	r3, r3
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d108      	bne.n	800a72e <reload_device_settings+0x3a>
    {
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 800a71c:	197c      	adds	r4, r7, r5
 800a71e:	683a      	ldr	r2, [r7, #0]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	0019      	movs	r1, r3
 800a724:	201f      	movs	r0, #31
 800a726:	f7ff fe87 	bl	800a438 <set_filter_standby_settings>
 800a72a:	0003      	movs	r3, r0
 800a72c:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800a72e:	230f      	movs	r3, #15
 800a730:	18fb      	adds	r3, r7, r3
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	b25b      	sxtb	r3, r3
}
 800a736:	0018      	movs	r0, r3
 800a738:	46bd      	mov	sp, r7
 800a73a:	b004      	add	sp, #16
 800a73c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a740 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
                                      struct bme280_calib_data *calib_data)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b088      	sub	sp, #32
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	6039      	str	r1, [r7, #0]
    int32_t var1;
    int32_t var2;
    int32_t temperature;
    int32_t temperature_min = -4000;
 800a74a:	4b2b      	ldr	r3, [pc, #172]	@ (800a7f8 <compensate_temperature+0xb8>)
 800a74c:	61bb      	str	r3, [r7, #24]
    int32_t temperature_max = 8500;
 800a74e:	4b2b      	ldr	r3, [pc, #172]	@ (800a7fc <compensate_temperature+0xbc>)
 800a750:	617b      	str	r3, [r7, #20]

    var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_t1 * 2));
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	08db      	lsrs	r3, r3, #3
 800a758:	683a      	ldr	r2, [r7, #0]
 800a75a:	8812      	ldrh	r2, [r2, #0]
 800a75c:	0052      	lsls	r2, r2, #1
 800a75e:	1a9b      	subs	r3, r3, r2
 800a760:	613b      	str	r3, [r7, #16]
    var1 = (var1 * ((int32_t)calib_data->dig_t2)) / 2048;
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	2202      	movs	r2, #2
 800a766:	5e9b      	ldrsh	r3, [r3, r2]
 800a768:	001a      	movs	r2, r3
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	4353      	muls	r3, r2
 800a76e:	2b00      	cmp	r3, #0
 800a770:	da02      	bge.n	800a778 <compensate_temperature+0x38>
 800a772:	4a23      	ldr	r2, [pc, #140]	@ (800a800 <compensate_temperature+0xc0>)
 800a774:	4694      	mov	ip, r2
 800a776:	4463      	add	r3, ip
 800a778:	12db      	asrs	r3, r3, #11
 800a77a:	613b      	str	r3, [r7, #16]
    var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_t1));
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	091b      	lsrs	r3, r3, #4
 800a782:	683a      	ldr	r2, [r7, #0]
 800a784:	8812      	ldrh	r2, [r2, #0]
 800a786:	1a9b      	subs	r3, r3, r2
 800a788:	60fb      	str	r3, [r7, #12]
    var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_t3)) / 16384;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	435b      	muls	r3, r3
 800a78e:	2b00      	cmp	r3, #0
 800a790:	da02      	bge.n	800a798 <compensate_temperature+0x58>
 800a792:	4a1c      	ldr	r2, [pc, #112]	@ (800a804 <compensate_temperature+0xc4>)
 800a794:	4694      	mov	ip, r2
 800a796:	4463      	add	r3, ip
 800a798:	131b      	asrs	r3, r3, #12
 800a79a:	001a      	movs	r2, r3
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	2104      	movs	r1, #4
 800a7a0:	5e5b      	ldrsh	r3, [r3, r1]
 800a7a2:	4353      	muls	r3, r2
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	da02      	bge.n	800a7ae <compensate_temperature+0x6e>
 800a7a8:	4a17      	ldr	r2, [pc, #92]	@ (800a808 <compensate_temperature+0xc8>)
 800a7aa:	4694      	mov	ip, r2
 800a7ac:	4463      	add	r3, ip
 800a7ae:	139b      	asrs	r3, r3, #14
 800a7b0:	60fb      	str	r3, [r7, #12]
    calib_data->t_fine = var1 + var2;
 800a7b2:	693a      	ldr	r2, [r7, #16]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	18d2      	adds	r2, r2, r3
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	625a      	str	r2, [r3, #36]	@ 0x24
    temperature = (calib_data->t_fine * 5 + 128) / 256;
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a7c0:	0013      	movs	r3, r2
 800a7c2:	009b      	lsls	r3, r3, #2
 800a7c4:	189b      	adds	r3, r3, r2
 800a7c6:	3380      	adds	r3, #128	@ 0x80
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	da00      	bge.n	800a7ce <compensate_temperature+0x8e>
 800a7cc:	33ff      	adds	r3, #255	@ 0xff
 800a7ce:	121b      	asrs	r3, r3, #8
 800a7d0:	61fb      	str	r3, [r7, #28]

    if (temperature < temperature_min)
 800a7d2:	69fa      	ldr	r2, [r7, #28]
 800a7d4:	69bb      	ldr	r3, [r7, #24]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	da02      	bge.n	800a7e0 <compensate_temperature+0xa0>
    {
        temperature = temperature_min;
 800a7da:	69bb      	ldr	r3, [r7, #24]
 800a7dc:	61fb      	str	r3, [r7, #28]
 800a7de:	e005      	b.n	800a7ec <compensate_temperature+0xac>
    }
    else if (temperature > temperature_max)
 800a7e0:	69fa      	ldr	r2, [r7, #28]
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	dd01      	ble.n	800a7ec <compensate_temperature+0xac>
    {
        temperature = temperature_max;
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	61fb      	str	r3, [r7, #28]
    }
    __asm volatile("nop");
 800a7ec:	46c0      	nop			@ (mov r8, r8)
    return temperature;
 800a7ee:	69fb      	ldr	r3, [r7, #28]
}
 800a7f0:	0018      	movs	r0, r3
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	b008      	add	sp, #32
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	fffff060 	.word	0xfffff060
 800a7fc:	00002134 	.word	0x00002134
 800a800:	000007ff 	.word	0x000007ff
 800a804:	00000fff 	.word	0x00000fff
 800a808:	00003fff 	.word	0x00003fff

0800a80c <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in integer data type.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                    const struct bme280_calib_data *calib_data)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b08a      	sub	sp, #40	@ 0x28
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	6039      	str	r1, [r7, #0]
    int32_t var2;
    int32_t var3;
    int32_t var4;
    uint32_t var5;
    uint32_t pressure;
    uint32_t pressure_min = 30000;
 800a816:	4b75      	ldr	r3, [pc, #468]	@ (800a9ec <compensate_pressure+0x1e0>)
 800a818:	623b      	str	r3, [r7, #32]
    uint32_t pressure_max = 110000;
 800a81a:	4b75      	ldr	r3, [pc, #468]	@ (800a9f0 <compensate_pressure+0x1e4>)
 800a81c:	61fb      	str	r3, [r7, #28]

    var1 = (((int32_t)calib_data->t_fine) / 2) - (int32_t)64000;
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a822:	2b00      	cmp	r3, #0
 800a824:	da00      	bge.n	800a828 <compensate_pressure+0x1c>
 800a826:	3301      	adds	r3, #1
 800a828:	105b      	asrs	r3, r3, #1
 800a82a:	4a72      	ldr	r2, [pc, #456]	@ (800a9f4 <compensate_pressure+0x1e8>)
 800a82c:	4694      	mov	ip, r2
 800a82e:	4463      	add	r3, ip
 800a830:	61bb      	str	r3, [r7, #24]
    var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t)calib_data->dig_p6);
 800a832:	69bb      	ldr	r3, [r7, #24]
 800a834:	2b00      	cmp	r3, #0
 800a836:	da00      	bge.n	800a83a <compensate_pressure+0x2e>
 800a838:	3303      	adds	r3, #3
 800a83a:	109b      	asrs	r3, r3, #2
 800a83c:	001a      	movs	r2, r3
 800a83e:	69bb      	ldr	r3, [r7, #24]
 800a840:	2b00      	cmp	r3, #0
 800a842:	da00      	bge.n	800a846 <compensate_pressure+0x3a>
 800a844:	3303      	adds	r3, #3
 800a846:	109b      	asrs	r3, r3, #2
 800a848:	4353      	muls	r3, r2
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	da02      	bge.n	800a854 <compensate_pressure+0x48>
 800a84e:	4a6a      	ldr	r2, [pc, #424]	@ (800a9f8 <compensate_pressure+0x1ec>)
 800a850:	4694      	mov	ip, r2
 800a852:	4463      	add	r3, ip
 800a854:	12db      	asrs	r3, r3, #11
 800a856:	001a      	movs	r2, r3
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	2110      	movs	r1, #16
 800a85c:	5e5b      	ldrsh	r3, [r3, r1]
 800a85e:	4353      	muls	r3, r2
 800a860:	617b      	str	r3, [r7, #20]
    var2 = var2 + ((var1 * ((int32_t)calib_data->dig_p5)) * 2);
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	220e      	movs	r2, #14
 800a866:	5e9b      	ldrsh	r3, [r3, r2]
 800a868:	001a      	movs	r2, r3
 800a86a:	69bb      	ldr	r3, [r7, #24]
 800a86c:	4353      	muls	r3, r2
 800a86e:	005b      	lsls	r3, r3, #1
 800a870:	697a      	ldr	r2, [r7, #20]
 800a872:	18d3      	adds	r3, r2, r3
 800a874:	617b      	str	r3, [r7, #20]
    var2 = (var2 / 4) + (((int32_t)calib_data->dig_p4) * 65536);
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	da00      	bge.n	800a87e <compensate_pressure+0x72>
 800a87c:	3303      	adds	r3, #3
 800a87e:	109b      	asrs	r3, r3, #2
 800a880:	001a      	movs	r2, r3
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	210c      	movs	r1, #12
 800a886:	5e5b      	ldrsh	r3, [r3, r1]
 800a888:	041b      	lsls	r3, r3, #16
 800a88a:	18d3      	adds	r3, r2, r3
 800a88c:	617b      	str	r3, [r7, #20]
    var3 = (calib_data->dig_p3 * (((var1 / 4) * (var1 / 4)) / 8192)) / 8;
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	220a      	movs	r2, #10
 800a892:	5e9b      	ldrsh	r3, [r3, r2]
 800a894:	001a      	movs	r2, r3
 800a896:	69bb      	ldr	r3, [r7, #24]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	da00      	bge.n	800a89e <compensate_pressure+0x92>
 800a89c:	3303      	adds	r3, #3
 800a89e:	109b      	asrs	r3, r3, #2
 800a8a0:	0019      	movs	r1, r3
 800a8a2:	69bb      	ldr	r3, [r7, #24]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	da00      	bge.n	800a8aa <compensate_pressure+0x9e>
 800a8a8:	3303      	adds	r3, #3
 800a8aa:	109b      	asrs	r3, r3, #2
 800a8ac:	434b      	muls	r3, r1
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	da02      	bge.n	800a8b8 <compensate_pressure+0xac>
 800a8b2:	4952      	ldr	r1, [pc, #328]	@ (800a9fc <compensate_pressure+0x1f0>)
 800a8b4:	468c      	mov	ip, r1
 800a8b6:	4463      	add	r3, ip
 800a8b8:	135b      	asrs	r3, r3, #13
 800a8ba:	4353      	muls	r3, r2
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	da00      	bge.n	800a8c2 <compensate_pressure+0xb6>
 800a8c0:	3307      	adds	r3, #7
 800a8c2:	10db      	asrs	r3, r3, #3
 800a8c4:	613b      	str	r3, [r7, #16]
    var4 = (((int32_t)calib_data->dig_p2) * var1) / 2;
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	2208      	movs	r2, #8
 800a8ca:	5e9b      	ldrsh	r3, [r3, r2]
 800a8cc:	001a      	movs	r2, r3
 800a8ce:	69bb      	ldr	r3, [r7, #24]
 800a8d0:	4353      	muls	r3, r2
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	da00      	bge.n	800a8d8 <compensate_pressure+0xcc>
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	105b      	asrs	r3, r3, #1
 800a8da:	60fb      	str	r3, [r7, #12]
    var1 = (var3 + var4) / 262144;
 800a8dc:	693a      	ldr	r2, [r7, #16]
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	18d3      	adds	r3, r2, r3
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	da02      	bge.n	800a8ec <compensate_pressure+0xe0>
 800a8e6:	4a46      	ldr	r2, [pc, #280]	@ (800aa00 <compensate_pressure+0x1f4>)
 800a8e8:	4694      	mov	ip, r2
 800a8ea:	4463      	add	r3, ip
 800a8ec:	149b      	asrs	r3, r3, #18
 800a8ee:	61bb      	str	r3, [r7, #24]
    var1 = (((32768 + var1)) * ((int32_t)calib_data->dig_p1)) / 32768;
 800a8f0:	69bb      	ldr	r3, [r7, #24]
 800a8f2:	2280      	movs	r2, #128	@ 0x80
 800a8f4:	0212      	lsls	r2, r2, #8
 800a8f6:	4694      	mov	ip, r2
 800a8f8:	4463      	add	r3, ip
 800a8fa:	683a      	ldr	r2, [r7, #0]
 800a8fc:	88d2      	ldrh	r2, [r2, #6]
 800a8fe:	4353      	muls	r3, r2
 800a900:	2b00      	cmp	r3, #0
 800a902:	da02      	bge.n	800a90a <compensate_pressure+0xfe>
 800a904:	4a3f      	ldr	r2, [pc, #252]	@ (800aa04 <compensate_pressure+0x1f8>)
 800a906:	4694      	mov	ip, r2
 800a908:	4463      	add	r3, ip
 800a90a:	13db      	asrs	r3, r3, #15
 800a90c:	61bb      	str	r3, [r7, #24]

    /* avoid exception caused by division by zero */
    if (var1)
 800a90e:	69bb      	ldr	r3, [r7, #24]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d064      	beq.n	800a9de <compensate_pressure+0x1d2>
    {
        var5 = (uint32_t)((uint32_t)1048576) - uncomp_data->pressure;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	2280      	movs	r2, #128	@ 0x80
 800a91a:	0352      	lsls	r2, r2, #13
 800a91c:	1ad3      	subs	r3, r2, r3
 800a91e:	60bb      	str	r3, [r7, #8]
        pressure = ((uint32_t)(var5 - (uint32_t)(var2 / 4096))) * 3125;
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	2b00      	cmp	r3, #0
 800a924:	da02      	bge.n	800a92c <compensate_pressure+0x120>
 800a926:	4a38      	ldr	r2, [pc, #224]	@ (800aa08 <compensate_pressure+0x1fc>)
 800a928:	4694      	mov	ip, r2
 800a92a:	4463      	add	r3, ip
 800a92c:	131b      	asrs	r3, r3, #12
 800a92e:	001a      	movs	r2, r3
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	1a9b      	subs	r3, r3, r2
 800a934:	4a35      	ldr	r2, [pc, #212]	@ (800aa0c <compensate_pressure+0x200>)
 800a936:	4353      	muls	r3, r2
 800a938:	627b      	str	r3, [r7, #36]	@ 0x24

        if (pressure < 0x80000000)
 800a93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	db09      	blt.n	800a954 <compensate_pressure+0x148>
        {
            pressure = (pressure << 1) / ((uint32_t)var1);
 800a940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a942:	005b      	lsls	r3, r3, #1
 800a944:	69ba      	ldr	r2, [r7, #24]
 800a946:	0011      	movs	r1, r2
 800a948:	0018      	movs	r0, r3
 800a94a:	f7f5 fbf9 	bl	8000140 <__udivsi3>
 800a94e:	0003      	movs	r3, r0
 800a950:	627b      	str	r3, [r7, #36]	@ 0x24
 800a952:	e007      	b.n	800a964 <compensate_pressure+0x158>
        }
        else
        {
            pressure = (pressure / (uint32_t)var1) * 2;
 800a954:	69bb      	ldr	r3, [r7, #24]
 800a956:	0019      	movs	r1, r3
 800a958:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a95a:	f7f5 fbf1 	bl	8000140 <__udivsi3>
 800a95e:	0003      	movs	r3, r0
 800a960:	005b      	lsls	r3, r3, #1
 800a962:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        var1 = (((int32_t)calib_data->dig_p9) * ((int32_t)(((pressure / 8) * (pressure / 8)) / 8192))) / 4096;
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	2216      	movs	r2, #22
 800a968:	5e9b      	ldrsh	r3, [r3, r2]
 800a96a:	0019      	movs	r1, r3
 800a96c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a96e:	08db      	lsrs	r3, r3, #3
 800a970:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a972:	08d2      	lsrs	r2, r2, #3
 800a974:	4353      	muls	r3, r2
 800a976:	0b5b      	lsrs	r3, r3, #13
 800a978:	434b      	muls	r3, r1
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	da02      	bge.n	800a984 <compensate_pressure+0x178>
 800a97e:	4a22      	ldr	r2, [pc, #136]	@ (800aa08 <compensate_pressure+0x1fc>)
 800a980:	4694      	mov	ip, r2
 800a982:	4463      	add	r3, ip
 800a984:	131b      	asrs	r3, r3, #12
 800a986:	61bb      	str	r3, [r7, #24]
        var2 = (((int32_t)(pressure / 4)) * ((int32_t)calib_data->dig_p8)) / 8192;
 800a988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a98a:	089b      	lsrs	r3, r3, #2
 800a98c:	001a      	movs	r2, r3
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	2114      	movs	r1, #20
 800a992:	5e5b      	ldrsh	r3, [r3, r1]
 800a994:	4353      	muls	r3, r2
 800a996:	2b00      	cmp	r3, #0
 800a998:	da02      	bge.n	800a9a0 <compensate_pressure+0x194>
 800a99a:	4a18      	ldr	r2, [pc, #96]	@ (800a9fc <compensate_pressure+0x1f0>)
 800a99c:	4694      	mov	ip, r2
 800a99e:	4463      	add	r3, ip
 800a9a0:	135b      	asrs	r3, r3, #13
 800a9a2:	617b      	str	r3, [r7, #20]
        pressure = (uint32_t)((int32_t)pressure + ((var1 + var2 + calib_data->dig_p7) / 16));
 800a9a4:	69ba      	ldr	r2, [r7, #24]
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	18d3      	adds	r3, r2, r3
 800a9aa:	683a      	ldr	r2, [r7, #0]
 800a9ac:	2112      	movs	r1, #18
 800a9ae:	5e52      	ldrsh	r2, [r2, r1]
 800a9b0:	189b      	adds	r3, r3, r2
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	da00      	bge.n	800a9b8 <compensate_pressure+0x1ac>
 800a9b6:	330f      	adds	r3, #15
 800a9b8:	111b      	asrs	r3, r3, #4
 800a9ba:	001a      	movs	r2, r3
 800a9bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9be:	18d3      	adds	r3, r2, r3
 800a9c0:	627b      	str	r3, [r7, #36]	@ 0x24

        if (pressure < pressure_min)
 800a9c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9c4:	6a3b      	ldr	r3, [r7, #32]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d202      	bcs.n	800a9d0 <compensate_pressure+0x1c4>
        {
            pressure = pressure_min;
 800a9ca:	6a3b      	ldr	r3, [r7, #32]
 800a9cc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9ce:	e008      	b.n	800a9e2 <compensate_pressure+0x1d6>
        }
        else if (pressure > pressure_max)
 800a9d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9d2:	69fb      	ldr	r3, [r7, #28]
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d904      	bls.n	800a9e2 <compensate_pressure+0x1d6>
        {
            pressure = pressure_max;
 800a9d8:	69fb      	ldr	r3, [r7, #28]
 800a9da:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9dc:	e001      	b.n	800a9e2 <compensate_pressure+0x1d6>
        }
    }
    else
    {
        pressure = pressure_min;
 800a9de:	6a3b      	ldr	r3, [r7, #32]
 800a9e0:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return pressure;
 800a9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a9e4:	0018      	movs	r0, r3
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	b00a      	add	sp, #40	@ 0x28
 800a9ea:	bd80      	pop	{r7, pc}
 800a9ec:	00007530 	.word	0x00007530
 800a9f0:	0001adb0 	.word	0x0001adb0
 800a9f4:	ffff0600 	.word	0xffff0600
 800a9f8:	000007ff 	.word	0x000007ff
 800a9fc:	00001fff 	.word	0x00001fff
 800aa00:	0003ffff 	.word	0x0003ffff
 800aa04:	00007fff 	.word	0x00007fff
 800aa08:	00000fff 	.word	0x00000fff
 800aa0c:	00000c35 	.word	0x00000c35

0800aa10 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                    const struct bme280_calib_data *calib_data)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b08a      	sub	sp, #40	@ 0x28
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6039      	str	r1, [r7, #0]
    int32_t var2;
    int32_t var3;
    int32_t var4;
    int32_t var5;
    uint32_t humidity;
    uint32_t humidity_max = 102400;
 800aa1a:	23c8      	movs	r3, #200	@ 0xc8
 800aa1c:	025b      	lsls	r3, r3, #9
 800aa1e:	623b      	str	r3, [r7, #32]

    var1 = calib_data->t_fine - ((int32_t)76800);
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa24:	4a53      	ldr	r2, [pc, #332]	@ (800ab74 <compensate_humidity+0x164>)
 800aa26:	4694      	mov	ip, r2
 800aa28:	4463      	add	r3, ip
 800aa2a:	61fb      	str	r3, [r7, #28]
    var2 = (int32_t)(uncomp_data->humidity * 16384);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	689b      	ldr	r3, [r3, #8]
 800aa30:	039b      	lsls	r3, r3, #14
 800aa32:	61bb      	str	r3, [r7, #24]
    var3 = (int32_t)(((int32_t)calib_data->dig_h4) * 1048576);
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	221e      	movs	r2, #30
 800aa38:	5e9b      	ldrsh	r3, [r3, r2]
 800aa3a:	051b      	lsls	r3, r3, #20
 800aa3c:	617b      	str	r3, [r7, #20]
    var4 = ((int32_t)calib_data->dig_h5) * var1;
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	2220      	movs	r2, #32
 800aa42:	5e9b      	ldrsh	r3, [r3, r2]
 800aa44:	001a      	movs	r2, r3
 800aa46:	69fb      	ldr	r3, [r7, #28]
 800aa48:	4353      	muls	r3, r2
 800aa4a:	613b      	str	r3, [r7, #16]
    var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 800aa4c:	69ba      	ldr	r2, [r7, #24]
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	1ad2      	subs	r2, r2, r3
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	1ad3      	subs	r3, r2, r3
 800aa56:	2280      	movs	r2, #128	@ 0x80
 800aa58:	01d2      	lsls	r2, r2, #7
 800aa5a:	4694      	mov	ip, r2
 800aa5c:	4463      	add	r3, ip
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	da02      	bge.n	800aa68 <compensate_humidity+0x58>
 800aa62:	4a45      	ldr	r2, [pc, #276]	@ (800ab78 <compensate_humidity+0x168>)
 800aa64:	4694      	mov	ip, r2
 800aa66:	4463      	add	r3, ip
 800aa68:	13db      	asrs	r3, r3, #15
 800aa6a:	60fb      	str	r3, [r7, #12]
    var2 = (var1 * ((int32_t)calib_data->dig_h6)) / 1024;
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	2222      	movs	r2, #34	@ 0x22
 800aa70:	569b      	ldrsb	r3, [r3, r2]
 800aa72:	001a      	movs	r2, r3
 800aa74:	69fb      	ldr	r3, [r7, #28]
 800aa76:	4353      	muls	r3, r2
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	da02      	bge.n	800aa82 <compensate_humidity+0x72>
 800aa7c:	4a3f      	ldr	r2, [pc, #252]	@ (800ab7c <compensate_humidity+0x16c>)
 800aa7e:	4694      	mov	ip, r2
 800aa80:	4463      	add	r3, ip
 800aa82:	129b      	asrs	r3, r3, #10
 800aa84:	61bb      	str	r3, [r7, #24]
    var3 = (var1 * ((int32_t)calib_data->dig_h3)) / 2048;
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	7f1b      	ldrb	r3, [r3, #28]
 800aa8a:	001a      	movs	r2, r3
 800aa8c:	69fb      	ldr	r3, [r7, #28]
 800aa8e:	4353      	muls	r3, r2
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	da02      	bge.n	800aa9a <compensate_humidity+0x8a>
 800aa94:	4a3a      	ldr	r2, [pc, #232]	@ (800ab80 <compensate_humidity+0x170>)
 800aa96:	4694      	mov	ip, r2
 800aa98:	4463      	add	r3, ip
 800aa9a:	12db      	asrs	r3, r3, #11
 800aa9c:	617b      	str	r3, [r7, #20]
    var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	2280      	movs	r2, #128	@ 0x80
 800aaa2:	0212      	lsls	r2, r2, #8
 800aaa4:	4694      	mov	ip, r2
 800aaa6:	4463      	add	r3, ip
 800aaa8:	69ba      	ldr	r2, [r7, #24]
 800aaaa:	4353      	muls	r3, r2
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	da02      	bge.n	800aab6 <compensate_humidity+0xa6>
 800aab0:	4a32      	ldr	r2, [pc, #200]	@ (800ab7c <compensate_humidity+0x16c>)
 800aab2:	4694      	mov	ip, r2
 800aab4:	4463      	add	r3, ip
 800aab6:	129b      	asrs	r3, r3, #10
 800aab8:	2280      	movs	r2, #128	@ 0x80
 800aaba:	0392      	lsls	r2, r2, #14
 800aabc:	4694      	mov	ip, r2
 800aabe:	4463      	add	r3, ip
 800aac0:	613b      	str	r3, [r7, #16]
    var2 = ((var4 * ((int32_t)calib_data->dig_h2)) + 8192) / 16384;
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	221a      	movs	r2, #26
 800aac6:	5e9b      	ldrsh	r3, [r3, r2]
 800aac8:	001a      	movs	r2, r3
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	4353      	muls	r3, r2
 800aace:	2280      	movs	r2, #128	@ 0x80
 800aad0:	0192      	lsls	r2, r2, #6
 800aad2:	4694      	mov	ip, r2
 800aad4:	4463      	add	r3, ip
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	da02      	bge.n	800aae0 <compensate_humidity+0xd0>
 800aada:	4a2a      	ldr	r2, [pc, #168]	@ (800ab84 <compensate_humidity+0x174>)
 800aadc:	4694      	mov	ip, r2
 800aade:	4463      	add	r3, ip
 800aae0:	139b      	asrs	r3, r3, #14
 800aae2:	61bb      	str	r3, [r7, #24]
    var3 = var5 * var2;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	69ba      	ldr	r2, [r7, #24]
 800aae8:	4353      	muls	r3, r2
 800aaea:	617b      	str	r3, [r7, #20]
    var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	da02      	bge.n	800aaf8 <compensate_humidity+0xe8>
 800aaf2:	4a21      	ldr	r2, [pc, #132]	@ (800ab78 <compensate_humidity+0x168>)
 800aaf4:	4694      	mov	ip, r2
 800aaf6:	4463      	add	r3, ip
 800aaf8:	13db      	asrs	r3, r3, #15
 800aafa:	001a      	movs	r2, r3
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	da02      	bge.n	800ab08 <compensate_humidity+0xf8>
 800ab02:	491d      	ldr	r1, [pc, #116]	@ (800ab78 <compensate_humidity+0x168>)
 800ab04:	468c      	mov	ip, r1
 800ab06:	4463      	add	r3, ip
 800ab08:	13db      	asrs	r3, r3, #15
 800ab0a:	4353      	muls	r3, r2
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	da00      	bge.n	800ab12 <compensate_humidity+0x102>
 800ab10:	337f      	adds	r3, #127	@ 0x7f
 800ab12:	11db      	asrs	r3, r3, #7
 800ab14:	613b      	str	r3, [r7, #16]
    var5 = var3 - ((var4 * ((int32_t)calib_data->dig_h1)) / 16);
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	7e1b      	ldrb	r3, [r3, #24]
 800ab1a:	001a      	movs	r2, r3
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	4353      	muls	r3, r2
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	da00      	bge.n	800ab26 <compensate_humidity+0x116>
 800ab24:	330f      	adds	r3, #15
 800ab26:	111b      	asrs	r3, r3, #4
 800ab28:	425b      	negs	r3, r3
 800ab2a:	001a      	movs	r2, r3
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	189b      	adds	r3, r3, r2
 800ab30:	60fb      	str	r3, [r7, #12]
    var5 = (var5 < 0 ? 0 : var5);
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	da00      	bge.n	800ab3a <compensate_humidity+0x12a>
 800ab38:	2300      	movs	r3, #0
 800ab3a:	60fb      	str	r3, [r7, #12]
    var5 = (var5 > 419430400 ? 419430400 : var5);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	22c8      	movs	r2, #200	@ 0xc8
 800ab40:	0552      	lsls	r2, r2, #21
 800ab42:	4293      	cmp	r3, r2
 800ab44:	dd01      	ble.n	800ab4a <compensate_humidity+0x13a>
 800ab46:	23c8      	movs	r3, #200	@ 0xc8
 800ab48:	055b      	lsls	r3, r3, #21
 800ab4a:	60fb      	str	r3, [r7, #12]
    humidity = (uint32_t)(var5 / 4096);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	da02      	bge.n	800ab58 <compensate_humidity+0x148>
 800ab52:	4a0d      	ldr	r2, [pc, #52]	@ (800ab88 <compensate_humidity+0x178>)
 800ab54:	4694      	mov	ip, r2
 800ab56:	4463      	add	r3, ip
 800ab58:	131b      	asrs	r3, r3, #12
 800ab5a:	627b      	str	r3, [r7, #36]	@ 0x24

    if (humidity > humidity_max)
 800ab5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab5e:	6a3b      	ldr	r3, [r7, #32]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d901      	bls.n	800ab68 <compensate_humidity+0x158>
    {
        humidity = humidity_max;
 800ab64:	6a3b      	ldr	r3, [r7, #32]
 800ab66:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return humidity;
 800ab68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ab6a:	0018      	movs	r0, r3
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	b00a      	add	sp, #40	@ 0x28
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	46c0      	nop			@ (mov r8, r8)
 800ab74:	fffed400 	.word	0xfffed400
 800ab78:	00007fff 	.word	0x00007fff
 800ab7c:	000003ff 	.word	0x000003ff
 800ab80:	000007ff 	.word	0x000007ff
 800ab84:	00003fff 	.word	0x00003fff
 800ab88:	00000fff 	.word	0x00000fff

0800ab8c <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 800ab8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab8e:	b08b      	sub	sp, #44	@ 0x2c
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 800ab94:	2626      	movs	r6, #38	@ 0x26
 800ab96:	19bb      	adds	r3, r7, r6
 800ab98:	2288      	movs	r2, #136	@ 0x88
 800ab9a:	701a      	strb	r2, [r3, #0]

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 800ab9c:	250c      	movs	r5, #12
 800ab9e:	197b      	adds	r3, r7, r5
 800aba0:	2200      	movs	r2, #0
 800aba2:	601a      	str	r2, [r3, #0]
 800aba4:	3304      	adds	r3, #4
 800aba6:	2216      	movs	r2, #22
 800aba8:	2100      	movs	r1, #0
 800abaa:	0018      	movs	r0, r3
 800abac:	f002 ffaa 	bl	800db04 <memset>

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 800abb0:	2427      	movs	r4, #39	@ 0x27
 800abb2:	193c      	adds	r4, r7, r4
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	1979      	adds	r1, r7, r5
 800abb8:	19bb      	adds	r3, r7, r6
 800abba:	7818      	ldrb	r0, [r3, #0]
 800abbc:	0013      	movs	r3, r2
 800abbe:	221a      	movs	r2, #26
 800abc0:	f7fe ffce 	bl	8009b60 <bme280_get_regs>
 800abc4:	0003      	movs	r3, r0
 800abc6:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 800abc8:	2427      	movs	r4, #39	@ 0x27
 800abca:	193b      	adds	r3, r7, r4
 800abcc:	781b      	ldrb	r3, [r3, #0]
 800abce:	b25b      	sxtb	r3, r3
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d11f      	bne.n	800ac14 <get_calib_data+0x88>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 800abd4:	687a      	ldr	r2, [r7, #4]
 800abd6:	197b      	adds	r3, r7, r5
 800abd8:	0011      	movs	r1, r2
 800abda:	0018      	movs	r0, r3
 800abdc:	f000 f85a 	bl	800ac94 <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 800abe0:	19bb      	adds	r3, r7, r6
 800abe2:	22e1      	movs	r2, #225	@ 0xe1
 800abe4:	701a      	strb	r2, [r3, #0]

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 800abe6:	193c      	adds	r4, r7, r4
 800abe8:	687a      	ldr	r2, [r7, #4]
 800abea:	1979      	adds	r1, r7, r5
 800abec:	19bb      	adds	r3, r7, r6
 800abee:	7818      	ldrb	r0, [r3, #0]
 800abf0:	0013      	movs	r3, r2
 800abf2:	2207      	movs	r2, #7
 800abf4:	f7fe ffb4 	bl	8009b60 <bme280_get_regs>
 800abf8:	0003      	movs	r3, r0
 800abfa:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 800abfc:	2427      	movs	r4, #39	@ 0x27
 800abfe:	193b      	adds	r3, r7, r4
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	b25b      	sxtb	r3, r3
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d105      	bne.n	800ac14 <get_calib_data+0x88>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	197b      	adds	r3, r7, r5
 800ac0c:	0011      	movs	r1, r2
 800ac0e:	0018      	movs	r0, r3
 800ac10:	f000 f8ee 	bl	800adf0 <parse_humidity_calib_data>
        }
    }

    return rslt;
 800ac14:	2327      	movs	r3, #39	@ 0x27
 800ac16:	18fb      	adds	r3, r7, r3
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	b25b      	sxtb	r3, r3
}
 800ac1c:	0018      	movs	r0, r3
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	b00b      	add	sp, #44	@ 0x2c
 800ac22:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac24 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b086      	sub	sp, #24
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	60f8      	str	r0, [r7, #12]
 800ac2c:	60b9      	str	r1, [r7, #8]
 800ac2e:	607a      	str	r2, [r7, #4]
 800ac30:	001a      	movs	r2, r3
 800ac32:	1cfb      	adds	r3, r7, #3
 800ac34:	701a      	strb	r2, [r3, #0]
    uint8_t index;

    for (index = 1; index < len; index++)
 800ac36:	2317      	movs	r3, #23
 800ac38:	18fb      	adds	r3, r7, r3
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	701a      	strb	r2, [r3, #0]
 800ac3e:	e01d      	b.n	800ac7c <interleave_reg_addr+0x58>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 800ac40:	2017      	movs	r0, #23
 800ac42:	183b      	adds	r3, r7, r0
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	68fa      	ldr	r2, [r7, #12]
 800ac48:	18d2      	adds	r2, r2, r3
 800ac4a:	183b      	adds	r3, r7, r0
 800ac4c:	781b      	ldrb	r3, [r3, #0]
 800ac4e:	005b      	lsls	r3, r3, #1
 800ac50:	3b01      	subs	r3, #1
 800ac52:	68b9      	ldr	r1, [r7, #8]
 800ac54:	18cb      	adds	r3, r1, r3
 800ac56:	7812      	ldrb	r2, [r2, #0]
 800ac58:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 800ac5a:	183b      	adds	r3, r7, r0
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	18d2      	adds	r2, r2, r3
 800ac62:	183b      	adds	r3, r7, r0
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	005b      	lsls	r3, r3, #1
 800ac68:	0019      	movs	r1, r3
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	185b      	adds	r3, r3, r1
 800ac6e:	7812      	ldrb	r2, [r2, #0]
 800ac70:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800ac72:	183b      	adds	r3, r7, r0
 800ac74:	781a      	ldrb	r2, [r3, #0]
 800ac76:	183b      	adds	r3, r7, r0
 800ac78:	3201      	adds	r2, #1
 800ac7a:	701a      	strb	r2, [r3, #0]
 800ac7c:	2317      	movs	r3, #23
 800ac7e:	18fa      	adds	r2, r7, r3
 800ac80:	1cfb      	adds	r3, r7, #3
 800ac82:	7812      	ldrb	r2, [r2, #0]
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d3da      	bcc.n	800ac40 <interleave_reg_addr+0x1c>
    }
}
 800ac8a:	46c0      	nop			@ (mov r8, r8)
 800ac8c:	46c0      	nop			@ (mov r8, r8)
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	b006      	add	sp, #24
 800ac92:	bd80      	pop	{r7, pc}

0800ac94 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b084      	sub	sp, #16
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	3318      	adds	r3, #24
 800aca2:	60fb      	str	r3, [r7, #12]

    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	3301      	adds	r3, #1
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	021b      	lsls	r3, r3, #8
 800acac:	b21a      	sxth	r2, r3
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	b21b      	sxth	r3, r3
 800acb4:	4313      	orrs	r3, r2
 800acb6:	b21b      	sxth	r3, r3
 800acb8:	b29a      	uxth	r2, r3
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	801a      	strh	r2, [r3, #0]
    calib_data->dig_t2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	3303      	adds	r3, #3
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	021b      	lsls	r3, r3, #8
 800acc6:	b21a      	sxth	r2, r3
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	3302      	adds	r3, #2
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	b21b      	sxth	r3, r3
 800acd0:	4313      	orrs	r3, r2
 800acd2:	b21a      	sxth	r2, r3
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	805a      	strh	r2, [r3, #2]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	3305      	adds	r3, #5
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	021b      	lsls	r3, r3, #8
 800ace0:	b21a      	sxth	r2, r3
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	3304      	adds	r3, #4
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	b21b      	sxth	r3, r3
 800acea:	4313      	orrs	r3, r2
 800acec:	b21a      	sxth	r2, r3
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	809a      	strh	r2, [r3, #4]
    calib_data->dig_p1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	3307      	adds	r3, #7
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	021b      	lsls	r3, r3, #8
 800acfa:	b21a      	sxth	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	3306      	adds	r3, #6
 800ad00:	781b      	ldrb	r3, [r3, #0]
 800ad02:	b21b      	sxth	r3, r3
 800ad04:	4313      	orrs	r3, r2
 800ad06:	b21b      	sxth	r3, r3
 800ad08:	b29a      	uxth	r2, r3
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	80da      	strh	r2, [r3, #6]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	3309      	adds	r3, #9
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	021b      	lsls	r3, r3, #8
 800ad16:	b21a      	sxth	r2, r3
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	3308      	adds	r3, #8
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	b21b      	sxth	r3, r3
 800ad20:	4313      	orrs	r3, r2
 800ad22:	b21a      	sxth	r2, r3
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	811a      	strh	r2, [r3, #8]
    calib_data->dig_p3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	330b      	adds	r3, #11
 800ad2c:	781b      	ldrb	r3, [r3, #0]
 800ad2e:	021b      	lsls	r3, r3, #8
 800ad30:	b21a      	sxth	r2, r3
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	330a      	adds	r3, #10
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	b21b      	sxth	r3, r3
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	b21a      	sxth	r2, r3
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	815a      	strh	r2, [r3, #10]
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	330d      	adds	r3, #13
 800ad46:	781b      	ldrb	r3, [r3, #0]
 800ad48:	021b      	lsls	r3, r3, #8
 800ad4a:	b21a      	sxth	r2, r3
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	330c      	adds	r3, #12
 800ad50:	781b      	ldrb	r3, [r3, #0]
 800ad52:	b21b      	sxth	r3, r3
 800ad54:	4313      	orrs	r3, r2
 800ad56:	b21a      	sxth	r2, r3
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	819a      	strh	r2, [r3, #12]
    calib_data->dig_p5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	330f      	adds	r3, #15
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	021b      	lsls	r3, r3, #8
 800ad64:	b21a      	sxth	r2, r3
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	330e      	adds	r3, #14
 800ad6a:	781b      	ldrb	r3, [r3, #0]
 800ad6c:	b21b      	sxth	r3, r3
 800ad6e:	4313      	orrs	r3, r2
 800ad70:	b21a      	sxth	r2, r3
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	81da      	strh	r2, [r3, #14]
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	3311      	adds	r3, #17
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	021b      	lsls	r3, r3, #8
 800ad7e:	b21a      	sxth	r2, r3
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	3310      	adds	r3, #16
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	b21b      	sxth	r3, r3
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	b21a      	sxth	r2, r3
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	821a      	strh	r2, [r3, #16]
    calib_data->dig_p7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	3313      	adds	r3, #19
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	021b      	lsls	r3, r3, #8
 800ad98:	b21a      	sxth	r2, r3
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	3312      	adds	r3, #18
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	b21b      	sxth	r3, r3
 800ada2:	4313      	orrs	r3, r2
 800ada4:	b21a      	sxth	r2, r3
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	825a      	strh	r2, [r3, #18]
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	3315      	adds	r3, #21
 800adae:	781b      	ldrb	r3, [r3, #0]
 800adb0:	021b      	lsls	r3, r3, #8
 800adb2:	b21a      	sxth	r2, r3
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	3314      	adds	r3, #20
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	b21b      	sxth	r3, r3
 800adbc:	4313      	orrs	r3, r2
 800adbe:	b21a      	sxth	r2, r3
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	829a      	strh	r2, [r3, #20]
    calib_data->dig_p9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	3317      	adds	r3, #23
 800adc8:	781b      	ldrb	r3, [r3, #0]
 800adca:	021b      	lsls	r3, r3, #8
 800adcc:	b21a      	sxth	r2, r3
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	3316      	adds	r3, #22
 800add2:	781b      	ldrb	r3, [r3, #0]
 800add4:	b21b      	sxth	r3, r3
 800add6:	4313      	orrs	r3, r2
 800add8:	b21a      	sxth	r2, r3
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	82da      	strh	r2, [r3, #22]
    calib_data->dig_h1 = reg_data[25];
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	3319      	adds	r3, #25
 800ade2:	781a      	ldrb	r2, [r3, #0]
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	761a      	strb	r2, [r3, #24]
}
 800ade8:	46c0      	nop			@ (mov r8, r8)
 800adea:	46bd      	mov	sp, r7
 800adec:	b004      	add	sp, #16
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800adf0:	b590      	push	{r4, r7, lr}
 800adf2:	b087      	sub	sp, #28
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	3318      	adds	r3, #24
 800adfe:	617b      	str	r3, [r7, #20]
    int16_t dig_h4_lsb;
    int16_t dig_h4_msb;
    int16_t dig_h5_lsb;
    int16_t dig_h5_msb;

    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	3301      	adds	r3, #1
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	021b      	lsls	r3, r3, #8
 800ae08:	b21a      	sxth	r2, r3
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	781b      	ldrb	r3, [r3, #0]
 800ae0e:	b21b      	sxth	r3, r3
 800ae10:	4313      	orrs	r3, r2
 800ae12:	b21a      	sxth	r2, r3
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	835a      	strh	r2, [r3, #26]
    calib_data->dig_h3 = reg_data[2];
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	3302      	adds	r3, #2
 800ae1c:	781a      	ldrb	r2, [r3, #0]
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	771a      	strb	r2, [r3, #28]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	3303      	adds	r3, #3
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	b25b      	sxtb	r3, r3
 800ae2a:	b29b      	uxth	r3, r3
 800ae2c:	011b      	lsls	r3, r3, #4
 800ae2e:	b29a      	uxth	r2, r3
 800ae30:	2012      	movs	r0, #18
 800ae32:	183b      	adds	r3, r7, r0
 800ae34:	801a      	strh	r2, [r3, #0]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	3304      	adds	r3, #4
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	b21a      	sxth	r2, r3
 800ae3e:	2410      	movs	r4, #16
 800ae40:	193b      	adds	r3, r7, r4
 800ae42:	210f      	movs	r1, #15
 800ae44:	400a      	ands	r2, r1
 800ae46:	801a      	strh	r2, [r3, #0]
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 800ae48:	183a      	adds	r2, r7, r0
 800ae4a:	193b      	adds	r3, r7, r4
 800ae4c:	8812      	ldrh	r2, [r2, #0]
 800ae4e:	881b      	ldrh	r3, [r3, #0]
 800ae50:	4313      	orrs	r3, r2
 800ae52:	b21a      	sxth	r2, r3
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	83da      	strh	r2, [r3, #30]
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	3305      	adds	r3, #5
 800ae5c:	781b      	ldrb	r3, [r3, #0]
 800ae5e:	b25b      	sxtb	r3, r3
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	011b      	lsls	r3, r3, #4
 800ae64:	b29a      	uxth	r2, r3
 800ae66:	210e      	movs	r1, #14
 800ae68:	187b      	adds	r3, r7, r1
 800ae6a:	801a      	strh	r2, [r3, #0]
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	3304      	adds	r3, #4
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	091b      	lsrs	r3, r3, #4
 800ae74:	b2da      	uxtb	r2, r3
 800ae76:	200c      	movs	r0, #12
 800ae78:	183b      	adds	r3, r7, r0
 800ae7a:	801a      	strh	r2, [r3, #0]
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 800ae7c:	187a      	adds	r2, r7, r1
 800ae7e:	183b      	adds	r3, r7, r0
 800ae80:	8812      	ldrh	r2, [r2, #0]
 800ae82:	881b      	ldrh	r3, [r3, #0]
 800ae84:	4313      	orrs	r3, r2
 800ae86:	b21a      	sxth	r2, r3
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	841a      	strh	r2, [r3, #32]
    calib_data->dig_h6 = (int8_t)reg_data[6];
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	3306      	adds	r3, #6
 800ae90:	781b      	ldrb	r3, [r3, #0]
 800ae92:	b259      	sxtb	r1, r3
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	2222      	movs	r2, #34	@ 0x22
 800ae98:	5499      	strb	r1, [r3, r2]
}
 800ae9a:	46c0      	nop			@ (mov r8, r8)
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	b007      	add	sp, #28
 800aea0:	bd90      	pop	{r4, r7, pc}

0800aea2 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b084      	sub	sp, #16
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	0002      	movs	r2, r0
 800aeaa:	1dfb      	adds	r3, r7, #7
 800aeac:	701a      	strb	r2, [r3, #0]
 800aeae:	1dbb      	adds	r3, r7, #6
 800aeb0:	1c0a      	adds	r2, r1, #0
 800aeb2:	701a      	strb	r2, [r3, #0]
    uint8_t settings_changed = FALSE;
 800aeb4:	210f      	movs	r1, #15
 800aeb6:	187b      	adds	r3, r7, r1
 800aeb8:	2200      	movs	r2, #0
 800aeba:	701a      	strb	r2, [r3, #0]

    if (sub_settings & desired_settings)
 800aebc:	1dfb      	adds	r3, r7, #7
 800aebe:	1dba      	adds	r2, r7, #6
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	7812      	ldrb	r2, [r2, #0]
 800aec4:	4013      	ands	r3, r2
 800aec6:	b2db      	uxtb	r3, r3
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d003      	beq.n	800aed4 <are_settings_changed+0x32>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 800aecc:	187b      	adds	r3, r7, r1
 800aece:	2201      	movs	r2, #1
 800aed0:	701a      	strb	r2, [r3, #0]
 800aed2:	e003      	b.n	800aedc <are_settings_changed+0x3a>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 800aed4:	230f      	movs	r3, #15
 800aed6:	18fb      	adds	r3, r7, r3
 800aed8:	2200      	movs	r2, #0
 800aeda:	701a      	strb	r2, [r3, #0]
    }

    return settings_changed;
 800aedc:	230f      	movs	r3, #15
 800aede:	18fb      	adds	r3, r7, r3
 800aee0:	781b      	ldrb	r3, [r3, #0]
}
 800aee2:	0018      	movs	r0, r3
 800aee4:	46bd      	mov	sp, r7
 800aee6:	b004      	add	sp, #16
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b084      	sub	sp, #16
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d00b      	beq.n	800af10 <null_ptr_check+0x26>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	68db      	ldr	r3, [r3, #12]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d007      	beq.n	800af10 <null_ptr_check+0x26>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	691b      	ldr	r3, [r3, #16]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d003      	beq.n	800af10 <null_ptr_check+0x26>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	695b      	ldr	r3, [r3, #20]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d104      	bne.n	800af1a <null_ptr_check+0x30>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 800af10:	230f      	movs	r3, #15
 800af12:	18fb      	adds	r3, r7, r3
 800af14:	22ff      	movs	r2, #255	@ 0xff
 800af16:	701a      	strb	r2, [r3, #0]
 800af18:	e003      	b.n	800af22 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 800af1a:	230f      	movs	r3, #15
 800af1c:	18fb      	adds	r3, r7, r3
 800af1e:	2200      	movs	r2, #0
 800af20:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800af22:	230f      	movs	r3, #15
 800af24:	18fb      	adds	r3, r7, r3
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	b25b      	sxtb	r3, r3
}
 800af2a:	0018      	movs	r0, r3
 800af2c:	46bd      	mov	sp, r7
 800af2e:	b004      	add	sp, #16
 800af30:	bd80      	pop	{r7, pc}

0800af32 <LL_SPI_IsActiveFlag_RXNE>:
{
 800af32:	b580      	push	{r7, lr}
 800af34:	b082      	sub	sp, #8
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	689b      	ldr	r3, [r3, #8]
 800af3e:	2201      	movs	r2, #1
 800af40:	4013      	ands	r3, r2
 800af42:	2b01      	cmp	r3, #1
 800af44:	d101      	bne.n	800af4a <LL_SPI_IsActiveFlag_RXNE+0x18>
 800af46:	2301      	movs	r3, #1
 800af48:	e000      	b.n	800af4c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800af4a:	2300      	movs	r3, #0
}
 800af4c:	0018      	movs	r0, r3
 800af4e:	46bd      	mov	sp, r7
 800af50:	b002      	add	sp, #8
 800af52:	bd80      	pop	{r7, pc}

0800af54 <LL_SPI_IsActiveFlag_TXE>:
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b082      	sub	sp, #8
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	689b      	ldr	r3, [r3, #8]
 800af60:	2202      	movs	r2, #2
 800af62:	4013      	ands	r3, r2
 800af64:	2b02      	cmp	r3, #2
 800af66:	d101      	bne.n	800af6c <LL_SPI_IsActiveFlag_TXE+0x18>
 800af68:	2301      	movs	r3, #1
 800af6a:	e000      	b.n	800af6e <LL_SPI_IsActiveFlag_TXE+0x1a>
 800af6c:	2300      	movs	r3, #0
}
 800af6e:	0018      	movs	r0, r3
 800af70:	46bd      	mov	sp, r7
 800af72:	b002      	add	sp, #8
 800af74:	bd80      	pop	{r7, pc}

0800af76 <LL_SPI_ReceiveData8>:
{
 800af76:	b580      	push	{r7, lr}
 800af78:	b082      	sub	sp, #8
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	330c      	adds	r3, #12
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	b2db      	uxtb	r3, r3
}
 800af86:	0018      	movs	r0, r3
 800af88:	46bd      	mov	sp, r7
 800af8a:	b002      	add	sp, #8
 800af8c:	bd80      	pop	{r7, pc}

0800af8e <LL_SPI_TransmitData8>:
{
 800af8e:	b580      	push	{r7, lr}
 800af90:	b084      	sub	sp, #16
 800af92:	af00      	add	r7, sp, #0
 800af94:	6078      	str	r0, [r7, #4]
 800af96:	000a      	movs	r2, r1
 800af98:	1cfb      	adds	r3, r7, #3
 800af9a:	701a      	strb	r2, [r3, #0]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	330c      	adds	r3, #12
 800afa0:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	1cfa      	adds	r2, r7, #3
 800afa6:	7812      	ldrb	r2, [r2, #0]
 800afa8:	701a      	strb	r2, [r3, #0]
}
 800afaa:	46c0      	nop			@ (mov r8, r8)
 800afac:	46bd      	mov	sp, r7
 800afae:	b004      	add	sp, #16
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <user_delay_us>:
inline static uint8_t SPI1_Readbyte(uint8_t reg_addr);
inline static void SPI1_Writebyte(uint8_t reg_addr, uint8_t val);


void user_delay_us(uint32_t period,void *intf_ptr)
{
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b082      	sub	sp, #8
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
 800afba:	6039      	str	r1, [r7, #0]
	HAL_Delay(period);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	0018      	movs	r0, r3
 800afc0:	f7fa ff24 	bl	8005e0c <HAL_Delay>
}
 800afc4:	46c0      	nop			@ (mov r8, r8)
 800afc6:	46bd      	mov	sp, r7
 800afc8:	b002      	add	sp, #8
 800afca:	bd80      	pop	{r7, pc}

0800afcc <SPI1_SendByte>:


inline static uint8_t SPI1_SendByte(uint8_t data)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	0002      	movs	r2, r0
 800afd4:	1dfb      	adds	r3, r7, #7
 800afd6:	701a      	strb	r2, [r3, #0]
	while(LL_SPI_IsActiveFlag_TXE(SPI1)==RESET);
 800afd8:	46c0      	nop			@ (mov r8, r8)
 800afda:	4b0e      	ldr	r3, [pc, #56]	@ (800b014 <SPI1_SendByte+0x48>)
 800afdc:	0018      	movs	r0, r3
 800afde:	f7ff ffb9 	bl	800af54 <LL_SPI_IsActiveFlag_TXE>
 800afe2:	1e03      	subs	r3, r0, #0
 800afe4:	d0f9      	beq.n	800afda <SPI1_SendByte+0xe>
	LL_SPI_TransmitData8(SPI1, data);
 800afe6:	1dfb      	adds	r3, r7, #7
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	4a0a      	ldr	r2, [pc, #40]	@ (800b014 <SPI1_SendByte+0x48>)
 800afec:	0019      	movs	r1, r3
 800afee:	0010      	movs	r0, r2
 800aff0:	f7ff ffcd 	bl	800af8e <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(SPI1)==RESET);
 800aff4:	46c0      	nop			@ (mov r8, r8)
 800aff6:	4b07      	ldr	r3, [pc, #28]	@ (800b014 <SPI1_SendByte+0x48>)
 800aff8:	0018      	movs	r0, r3
 800affa:	f7ff ff9a 	bl	800af32 <LL_SPI_IsActiveFlag_RXNE>
 800affe:	1e03      	subs	r3, r0, #0
 800b000:	d0f9      	beq.n	800aff6 <SPI1_SendByte+0x2a>
	return LL_SPI_ReceiveData8(SPI1);
 800b002:	4b04      	ldr	r3, [pc, #16]	@ (800b014 <SPI1_SendByte+0x48>)
 800b004:	0018      	movs	r0, r3
 800b006:	f7ff ffb6 	bl	800af76 <LL_SPI_ReceiveData8>
 800b00a:	0003      	movs	r3, r0
}
 800b00c:	0018      	movs	r0, r3
 800b00e:	46bd      	mov	sp, r7
 800b010:	b002      	add	sp, #8
 800b012:	bd80      	pop	{r7, pc}
 800b014:	40013000 	.word	0x40013000

0800b018 <user_spi_read>:
}



uint8_t user_spi_read(uint8_t reg_addr, uint8_t* data, uint8_t len, void *intf_ptr)
{
 800b018:	b590      	push	{r4, r7, lr}
 800b01a:	b087      	sub	sp, #28
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	60b9      	str	r1, [r7, #8]
 800b020:	0011      	movs	r1, r2
 800b022:	607b      	str	r3, [r7, #4]
 800b024:	230f      	movs	r3, #15
 800b026:	18fb      	adds	r3, r7, r3
 800b028:	1c02      	adds	r2, r0, #0
 800b02a:	701a      	strb	r2, [r3, #0]
 800b02c:	230e      	movs	r3, #14
 800b02e:	18fb      	adds	r3, r7, r3
 800b030:	1c0a      	adds	r2, r1, #0
 800b032:	701a      	strb	r2, [r3, #0]
	unsigned int i = 0;
 800b034:	2300      	movs	r3, #0
 800b036:	617b      	str	r3, [r7, #20]
	if (!((SPI1)->CR1 & SPI_CR1_SPE)) {SPI1->CR1 |= SPI_CR1_SPE;}
 800b038:	4b18      	ldr	r3, [pc, #96]	@ (800b09c <user_spi_read+0x84>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	2240      	movs	r2, #64	@ 0x40
 800b03e:	4013      	ands	r3, r2
 800b040:	d105      	bne.n	800b04e <user_spi_read+0x36>
 800b042:	4b16      	ldr	r3, [pc, #88]	@ (800b09c <user_spi_read+0x84>)
 800b044:	681a      	ldr	r2, [r3, #0]
 800b046:	4b15      	ldr	r3, [pc, #84]	@ (800b09c <user_spi_read+0x84>)
 800b048:	2140      	movs	r1, #64	@ 0x40
 800b04a:	430a      	orrs	r2, r1
 800b04c:	601a      	str	r2, [r3, #0]
	CSB_L();
 800b04e:	23a0      	movs	r3, #160	@ 0xa0
 800b050:	05db      	lsls	r3, r3, #23
 800b052:	2280      	movs	r2, #128	@ 0x80
 800b054:	04d2      	lsls	r2, r2, #19
 800b056:	619a      	str	r2, [r3, #24]
	SPI1_SendByte(reg_addr); 	
 800b058:	230f      	movs	r3, #15
 800b05a:	18fb      	adds	r3, r7, r3
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	0018      	movs	r0, r3
 800b060:	f7ff ffb4 	bl	800afcc <SPI1_SendByte>
	while(i < len)
 800b064:	e009      	b.n	800b07a <user_spi_read+0x62>
	{
		data[i++] = SPI1_SendByte(0x00); 	//Send DUMMY to read data
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	1c5a      	adds	r2, r3, #1
 800b06a:	617a      	str	r2, [r7, #20]
 800b06c:	68ba      	ldr	r2, [r7, #8]
 800b06e:	18d4      	adds	r4, r2, r3
 800b070:	2000      	movs	r0, #0
 800b072:	f7ff ffab 	bl	800afcc <SPI1_SendByte>
 800b076:	0003      	movs	r3, r0
 800b078:	7023      	strb	r3, [r4, #0]
	while(i < len)
 800b07a:	230e      	movs	r3, #14
 800b07c:	18fb      	adds	r3, r7, r3
 800b07e:	781b      	ldrb	r3, [r3, #0]
 800b080:	697a      	ldr	r2, [r7, #20]
 800b082:	429a      	cmp	r2, r3
 800b084:	d3ef      	bcc.n	800b066 <user_spi_read+0x4e>
	}
	CSB_H();
 800b086:	23a0      	movs	r3, #160	@ 0xa0
 800b088:	05db      	lsls	r3, r3, #23
 800b08a:	2280      	movs	r2, #128	@ 0x80
 800b08c:	00d2      	lsls	r2, r2, #3
 800b08e:	619a      	str	r2, [r3, #24]
	return 0;
 800b090:	2300      	movs	r3, #0
}
 800b092:	0018      	movs	r0, r3
 800b094:	46bd      	mov	sp, r7
 800b096:	b007      	add	sp, #28
 800b098:	bd90      	pop	{r4, r7, pc}
 800b09a:	46c0      	nop			@ (mov r8, r8)
 800b09c:	40013000 	.word	0x40013000

0800b0a0 <user_spi_write>:
}



uint8_t user_spi_write(uint8_t reg_addr, uint8_t* data, uint8_t len, void *intf_ptr)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b086      	sub	sp, #24
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	60b9      	str	r1, [r7, #8]
 800b0a8:	0011      	movs	r1, r2
 800b0aa:	607b      	str	r3, [r7, #4]
 800b0ac:	230f      	movs	r3, #15
 800b0ae:	18fb      	adds	r3, r7, r3
 800b0b0:	1c02      	adds	r2, r0, #0
 800b0b2:	701a      	strb	r2, [r3, #0]
 800b0b4:	230e      	movs	r3, #14
 800b0b6:	18fb      	adds	r3, r7, r3
 800b0b8:	1c0a      	adds	r2, r1, #0
 800b0ba:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0;
 800b0bc:	2317      	movs	r3, #23
 800b0be:	18fb      	adds	r3, r7, r3
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	701a      	strb	r2, [r3, #0]
	if (!((SPI1)->CR1 & SPI_CR1_SPE)) {SPI1->CR1 |= SPI_CR1_SPE;}
 800b0c4:	4b1a      	ldr	r3, [pc, #104]	@ (800b130 <user_spi_write+0x90>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	2240      	movs	r2, #64	@ 0x40
 800b0ca:	4013      	ands	r3, r2
 800b0cc:	d105      	bne.n	800b0da <user_spi_write+0x3a>
 800b0ce:	4b18      	ldr	r3, [pc, #96]	@ (800b130 <user_spi_write+0x90>)
 800b0d0:	681a      	ldr	r2, [r3, #0]
 800b0d2:	4b17      	ldr	r3, [pc, #92]	@ (800b130 <user_spi_write+0x90>)
 800b0d4:	2140      	movs	r1, #64	@ 0x40
 800b0d6:	430a      	orrs	r2, r1
 800b0d8:	601a      	str	r2, [r3, #0]
	CSB_L();
 800b0da:	23a0      	movs	r3, #160	@ 0xa0
 800b0dc:	05db      	lsls	r3, r3, #23
 800b0de:	2280      	movs	r2, #128	@ 0x80
 800b0e0:	04d2      	lsls	r2, r2, #19
 800b0e2:	619a      	str	r2, [r3, #24]
	SPI1_SendByte(reg_addr); 		
 800b0e4:	230f      	movs	r3, #15
 800b0e6:	18fb      	adds	r3, r7, r3
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	0018      	movs	r0, r3
 800b0ec:	f7ff ff6e 	bl	800afcc <SPI1_SendByte>
	while(i < len)
 800b0f0:	e00c      	b.n	800b10c <user_spi_write+0x6c>
	{
		SPI1_SendByte(data[i++]); 	//Send Data to write
 800b0f2:	2217      	movs	r2, #23
 800b0f4:	18bb      	adds	r3, r7, r2
 800b0f6:	781b      	ldrb	r3, [r3, #0]
 800b0f8:	18ba      	adds	r2, r7, r2
 800b0fa:	1c59      	adds	r1, r3, #1
 800b0fc:	7011      	strb	r1, [r2, #0]
 800b0fe:	001a      	movs	r2, r3
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	189b      	adds	r3, r3, r2
 800b104:	781b      	ldrb	r3, [r3, #0]
 800b106:	0018      	movs	r0, r3
 800b108:	f7ff ff60 	bl	800afcc <SPI1_SendByte>
	while(i < len)
 800b10c:	2317      	movs	r3, #23
 800b10e:	18fa      	adds	r2, r7, r3
 800b110:	230e      	movs	r3, #14
 800b112:	18fb      	adds	r3, r7, r3
 800b114:	7812      	ldrb	r2, [r2, #0]
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	429a      	cmp	r2, r3
 800b11a:	d3ea      	bcc.n	800b0f2 <user_spi_write+0x52>
	}
	CSB_H();
 800b11c:	23a0      	movs	r3, #160	@ 0xa0
 800b11e:	05db      	lsls	r3, r3, #23
 800b120:	2280      	movs	r2, #128	@ 0x80
 800b122:	00d2      	lsls	r2, r2, #3
 800b124:	619a      	str	r2, [r3, #24]
	return 0;
 800b126:	2300      	movs	r3, #0
}
 800b128:	0018      	movs	r0, r3
 800b12a:	46bd      	mov	sp, r7
 800b12c:	b006      	add	sp, #24
 800b12e:	bd80      	pop	{r7, pc}
 800b130:	40013000 	.word	0x40013000

0800b134 <LL_SPI_IsActiveFlag_RXNE>:
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	689b      	ldr	r3, [r3, #8]
 800b140:	2201      	movs	r2, #1
 800b142:	4013      	ands	r3, r2
 800b144:	2b01      	cmp	r3, #1
 800b146:	d101      	bne.n	800b14c <LL_SPI_IsActiveFlag_RXNE+0x18>
 800b148:	2301      	movs	r3, #1
 800b14a:	e000      	b.n	800b14e <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800b14c:	2300      	movs	r3, #0
}
 800b14e:	0018      	movs	r0, r3
 800b150:	46bd      	mov	sp, r7
 800b152:	b002      	add	sp, #8
 800b154:	bd80      	pop	{r7, pc}

0800b156 <LL_SPI_IsActiveFlag_TXE>:
{
 800b156:	b580      	push	{r7, lr}
 800b158:	b082      	sub	sp, #8
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	689b      	ldr	r3, [r3, #8]
 800b162:	2202      	movs	r2, #2
 800b164:	4013      	ands	r3, r2
 800b166:	2b02      	cmp	r3, #2
 800b168:	d101      	bne.n	800b16e <LL_SPI_IsActiveFlag_TXE+0x18>
 800b16a:	2301      	movs	r3, #1
 800b16c:	e000      	b.n	800b170 <LL_SPI_IsActiveFlag_TXE+0x1a>
 800b16e:	2300      	movs	r3, #0
}
 800b170:	0018      	movs	r0, r3
 800b172:	46bd      	mov	sp, r7
 800b174:	b002      	add	sp, #8
 800b176:	bd80      	pop	{r7, pc}

0800b178 <LL_SPI_ReceiveData8>:
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	330c      	adds	r3, #12
 800b184:	781b      	ldrb	r3, [r3, #0]
 800b186:	b2db      	uxtb	r3, r3
}
 800b188:	0018      	movs	r0, r3
 800b18a:	46bd      	mov	sp, r7
 800b18c:	b002      	add	sp, #8
 800b18e:	bd80      	pop	{r7, pc}

0800b190 <LL_SPI_TransmitData8>:
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b084      	sub	sp, #16
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	000a      	movs	r2, r1
 800b19a:	1cfb      	adds	r3, r7, #3
 800b19c:	701a      	strb	r2, [r3, #0]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	330c      	adds	r3, #12
 800b1a2:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	1cfa      	adds	r2, r7, #3
 800b1a8:	7812      	ldrb	r2, [r2, #0]
 800b1aa:	701a      	strb	r2, [r3, #0]
}
 800b1ac:	46c0      	nop			@ (mov r8, r8)
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	b004      	add	sp, #16
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <DEV_SPI_WriteByte>:
#include "main.h"
// #include "stm32l4xx_hal_spi.h"
// extern SPI_HandleTypeDef hspi1;

void DEV_SPI_WriteByte(uint8_t value)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b082      	sub	sp, #8
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	0002      	movs	r2, r0
 800b1bc:	1dfb      	adds	r3, r7, #7
 800b1be:	701a      	strb	r2, [r3, #0]

	// Check if the SPI is enabled
	if (!((SPI1)->CR1 & SPI_CR1_SPE))
 800b1c0:	4b18      	ldr	r3, [pc, #96]	@ (800b224 <DEV_SPI_WriteByte+0x70>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	2240      	movs	r2, #64	@ 0x40
 800b1c6:	4013      	ands	r3, r2
 800b1c8:	d105      	bne.n	800b1d6 <DEV_SPI_WriteByte+0x22>
	{
		SPI1->CR1 |= SPI_CR1_SPE;
 800b1ca:	4b16      	ldr	r3, [pc, #88]	@ (800b224 <DEV_SPI_WriteByte+0x70>)
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	4b15      	ldr	r3, [pc, #84]	@ (800b224 <DEV_SPI_WriteByte+0x70>)
 800b1d0:	2140      	movs	r1, #64	@ 0x40
 800b1d2:	430a      	orrs	r2, r1
 800b1d4:	601a      	str	r2, [r3, #0]
	}

	while (LL_SPI_IsActiveFlag_TXE(SPI1) == RESET)
 800b1d6:	46c0      	nop			@ (mov r8, r8)
 800b1d8:	4b12      	ldr	r3, [pc, #72]	@ (800b224 <DEV_SPI_WriteByte+0x70>)
 800b1da:	0018      	movs	r0, r3
 800b1dc:	f7ff ffbb 	bl	800b156 <LL_SPI_IsActiveFlag_TXE>
 800b1e0:	1e03      	subs	r3, r0, #0
 800b1e2:	d0f9      	beq.n	800b1d8 <DEV_SPI_WriteByte+0x24>
		;

	CS_L();
 800b1e4:	23a0      	movs	r3, #160	@ 0xa0
 800b1e6:	05db      	lsls	r3, r3, #23
 800b1e8:	2280      	movs	r2, #128	@ 0x80
 800b1ea:	0552      	lsls	r2, r2, #21
 800b1ec:	619a      	str	r2, [r3, #24]
	// Send bytes over the SPI
	LL_SPI_TransmitData8(SPI1, value);
 800b1ee:	1dfb      	adds	r3, r7, #7
 800b1f0:	781b      	ldrb	r3, [r3, #0]
 800b1f2:	4a0c      	ldr	r2, [pc, #48]	@ (800b224 <DEV_SPI_WriteByte+0x70>)
 800b1f4:	0019      	movs	r1, r3
 800b1f6:	0010      	movs	r0, r2
 800b1f8:	f7ff ffca 	bl	800b190 <LL_SPI_TransmitData8>

	// Wait until the transmission is complete
	while (LL_SPI_IsActiveFlag_RXNE(SPI1) == RESET)
 800b1fc:	46c0      	nop			@ (mov r8, r8)
 800b1fe:	4b09      	ldr	r3, [pc, #36]	@ (800b224 <DEV_SPI_WriteByte+0x70>)
 800b200:	0018      	movs	r0, r3
 800b202:	f7ff ff97 	bl	800b134 <LL_SPI_IsActiveFlag_RXNE>
 800b206:	1e03      	subs	r3, r0, #0
 800b208:	d0f9      	beq.n	800b1fe <DEV_SPI_WriteByte+0x4a>
		;
	/* Read data register */
	(void)LL_SPI_ReceiveData8(SPI1);
 800b20a:	4b06      	ldr	r3, [pc, #24]	@ (800b224 <DEV_SPI_WriteByte+0x70>)
 800b20c:	0018      	movs	r0, r3
 800b20e:	f7ff ffb3 	bl	800b178 <LL_SPI_ReceiveData8>
	CS_H();
 800b212:	23a0      	movs	r3, #160	@ 0xa0
 800b214:	05db      	lsls	r3, r3, #23
 800b216:	2280      	movs	r2, #128	@ 0x80
 800b218:	0152      	lsls	r2, r2, #5
 800b21a:	619a      	str	r2, [r3, #24]
}
 800b21c:	46c0      	nop			@ (mov r8, r8)
 800b21e:	46bd      	mov	sp, r7
 800b220:	b002      	add	sp, #8
 800b222:	bd80      	pop	{r7, pc}
 800b224:	40013000 	.word	0x40013000

0800b228 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	af00      	add	r7, sp, #0
	DC_L();
 800b22c:	23a0      	movs	r3, #160	@ 0xa0
 800b22e:	05db      	lsls	r3, r3, #23
 800b230:	2280      	movs	r2, #128	@ 0x80
 800b232:	0452      	lsls	r2, r2, #17
 800b234:	619a      	str	r2, [r3, #24]
	CS_H();
 800b236:	23a0      	movs	r3, #160	@ 0xa0
 800b238:	05db      	lsls	r3, r3, #23
 800b23a:	2280      	movs	r2, #128	@ 0x80
 800b23c:	0152      	lsls	r2, r2, #5
 800b23e:	619a      	str	r2, [r3, #24]
	RST_H(); // The Reset is active low.
 800b240:	23a0      	movs	r3, #160	@ 0xa0
 800b242:	05db      	lsls	r3, r3, #23
 800b244:	2280      	movs	r2, #128	@ 0x80
 800b246:	0112      	lsls	r2, r2, #4
 800b248:	619a      	str	r2, [r3, #24]
	return 0;
 800b24a:	2300      	movs	r3, #0
}
 800b24c:	0018      	movs	r0, r3
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}

0800b252 <EPD_1IN54_V2_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
void EPD_1IN54_V2_Reset(void)
{
 800b252:	b580      	push	{r7, lr}
 800b254:	af00      	add	r7, sp, #0
    RST_H(); // DEV_Digital_Write(EPD_RST_PIN, 1);
 800b256:	23a0      	movs	r3, #160	@ 0xa0
 800b258:	05db      	lsls	r3, r3, #23
 800b25a:	2280      	movs	r2, #128	@ 0x80
 800b25c:	0112      	lsls	r2, r2, #4
 800b25e:	619a      	str	r2, [r3, #24]
    RST_L(); // DEV_Digital_Write(EPD_RST_PIN, 0);
 800b260:	23a0      	movs	r3, #160	@ 0xa0
 800b262:	05db      	lsls	r3, r3, #23
 800b264:	2280      	movs	r2, #128	@ 0x80
 800b266:	0512      	lsls	r2, r2, #20
 800b268:	619a      	str	r2, [r3, #24]
    HAL_Delay(2);
 800b26a:	2002      	movs	r0, #2
 800b26c:	f7fa fdce 	bl	8005e0c <HAL_Delay>
    RST_H(); // DEV_Digital_Write(EPD_RST_PIN, 1);
 800b270:	23a0      	movs	r3, #160	@ 0xa0
 800b272:	05db      	lsls	r3, r3, #23
 800b274:	2280      	movs	r2, #128	@ 0x80
 800b276:	0112      	lsls	r2, r2, #4
 800b278:	619a      	str	r2, [r3, #24]
}
 800b27a:	46c0      	nop			@ (mov r8, r8)
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <EPD_1IN54_V2_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_1IN54_V2_SendCommand(UBYTE Reg)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b082      	sub	sp, #8
 800b284:	af00      	add	r7, sp, #0
 800b286:	0002      	movs	r2, r0
 800b288:	1dfb      	adds	r3, r7, #7
 800b28a:	701a      	strb	r2, [r3, #0]
    DC_L();
 800b28c:	23a0      	movs	r3, #160	@ 0xa0
 800b28e:	05db      	lsls	r3, r3, #23
 800b290:	2280      	movs	r2, #128	@ 0x80
 800b292:	0452      	lsls	r2, r2, #17
 800b294:	619a      	str	r2, [r3, #24]
    CS_L();
 800b296:	23a0      	movs	r3, #160	@ 0xa0
 800b298:	05db      	lsls	r3, r3, #23
 800b29a:	2280      	movs	r2, #128	@ 0x80
 800b29c:	0552      	lsls	r2, r2, #21
 800b29e:	619a      	str	r2, [r3, #24]
    DEV_SPI_WriteByte(Reg);
 800b2a0:	1dfb      	adds	r3, r7, #7
 800b2a2:	781b      	ldrb	r3, [r3, #0]
 800b2a4:	0018      	movs	r0, r3
 800b2a6:	f7ff ff85 	bl	800b1b4 <DEV_SPI_WriteByte>
    CS_H();
 800b2aa:	23a0      	movs	r3, #160	@ 0xa0
 800b2ac:	05db      	lsls	r3, r3, #23
 800b2ae:	2280      	movs	r2, #128	@ 0x80
 800b2b0:	0152      	lsls	r2, r2, #5
 800b2b2:	619a      	str	r2, [r3, #24]
}
 800b2b4:	46c0      	nop			@ (mov r8, r8)
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	b002      	add	sp, #8
 800b2ba:	bd80      	pop	{r7, pc}

0800b2bc <EPD_1IN54_V2_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_1IN54_V2_SendData(UBYTE Data)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	0002      	movs	r2, r0
 800b2c4:	1dfb      	adds	r3, r7, #7
 800b2c6:	701a      	strb	r2, [r3, #0]
    DC_H();
 800b2c8:	23a0      	movs	r3, #160	@ 0xa0
 800b2ca:	05db      	lsls	r3, r3, #23
 800b2cc:	2280      	movs	r2, #128	@ 0x80
 800b2ce:	0052      	lsls	r2, r2, #1
 800b2d0:	619a      	str	r2, [r3, #24]
    CS_L();
 800b2d2:	23a0      	movs	r3, #160	@ 0xa0
 800b2d4:	05db      	lsls	r3, r3, #23
 800b2d6:	2280      	movs	r2, #128	@ 0x80
 800b2d8:	0552      	lsls	r2, r2, #21
 800b2da:	619a      	str	r2, [r3, #24]
    DEV_SPI_WriteByte(Data);
 800b2dc:	1dfb      	adds	r3, r7, #7
 800b2de:	781b      	ldrb	r3, [r3, #0]
 800b2e0:	0018      	movs	r0, r3
 800b2e2:	f7ff ff67 	bl	800b1b4 <DEV_SPI_WriteByte>
    CS_H();
 800b2e6:	23a0      	movs	r3, #160	@ 0xa0
 800b2e8:	05db      	lsls	r3, r3, #23
 800b2ea:	2280      	movs	r2, #128	@ 0x80
 800b2ec:	0152      	lsls	r2, r2, #5
 800b2ee:	619a      	str	r2, [r3, #24]
}
 800b2f0:	46c0      	nop			@ (mov r8, r8)
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	b002      	add	sp, #8
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <EPD_1IN54_V2_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
static void EPD_1IN54_V2_ReadBusy(void)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b082      	sub	sp, #8
 800b2fc:	af00      	add	r7, sp, #0

    uint32_t time1 = HAL_GetTick();
 800b2fe:	f7fa fd7b 	bl	8005df8 <HAL_GetTick>
 800b302:	0003      	movs	r3, r0
 800b304:	607b      	str	r3, [r7, #4]
    //	bool result = GPIOA->regs->IDR & 0x0004; //returns true if A2 is HIGH
    while (GPIOA->IDR & 0b0000001000000000)
 800b306:	e00c      	b.n	800b322 <EPD_1IN54_V2_ReadBusy+0x2a>
    { // A9, LOW = idle, HIGH = busy; DEV_Digital_Read(EPD_BUSY_PIN) == 1

        // Timeout check
        if ((HAL_GetTick() - time1) > timeout_value)
 800b308:	f7fa fd76 	bl	8005df8 <HAL_GetTick>
 800b30c:	0002      	movs	r2, r0
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	1ad3      	subs	r3, r2, r3
 800b312:	4a0a      	ldr	r2, [pc, #40]	@ (800b33c <EPD_1IN54_V2_ReadBusy+0x44>)
 800b314:	4293      	cmp	r3, r2
 800b316:	d904      	bls.n	800b322 <EPD_1IN54_V2_ReadBusy+0x2a>
        {
            timeout_reset(__func__, __LINE__);
 800b318:	4b09      	ldr	r3, [pc, #36]	@ (800b340 <EPD_1IN54_V2_ReadBusy+0x48>)
 800b31a:	218b      	movs	r1, #139	@ 0x8b
 800b31c:	0018      	movs	r0, r3
 800b31e:	f7f8 fd3b 	bl	8003d98 <timeout_reset>
    while (GPIOA->IDR & 0b0000001000000000)
 800b322:	23a0      	movs	r3, #160	@ 0xa0
 800b324:	05db      	lsls	r3, r3, #23
 800b326:	691a      	ldr	r2, [r3, #16]
 800b328:	2380      	movs	r3, #128	@ 0x80
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	4013      	ands	r3, r2
 800b32e:	d1eb      	bne.n	800b308 <EPD_1IN54_V2_ReadBusy+0x10>
        }
    }

    //DE_BUG("busy: %d\r\n", (HAL_GetTick() - time1));
}
 800b330:	46c0      	nop			@ (mov r8, r8)
 800b332:	46c0      	nop			@ (mov r8, r8)
 800b334:	46bd      	mov	sp, r7
 800b336:	b002      	add	sp, #8
 800b338:	bd80      	pop	{r7, pc}
 800b33a:	46c0      	nop			@ (mov r8, r8)
 800b33c:	00000bb8 	.word	0x00000bb8
 800b340:	08010124 	.word	0x08010124

0800b344 <EPD_1IN54_V2_TurnOnDisplay>:
/******************************************************************************
function :	Turn On Display full
parameter:
******************************************************************************/
static void EPD_1IN54_V2_TurnOnDisplay(void)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_SendCommand(0x22);
 800b348:	2022      	movs	r0, #34	@ 0x22
 800b34a:	f7ff ff99 	bl	800b280 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xc7);
 800b34e:	20c7      	movs	r0, #199	@ 0xc7
 800b350:	f7ff ffb4 	bl	800b2bc <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 800b354:	2020      	movs	r0, #32
 800b356:	f7ff ff93 	bl	800b280 <EPD_1IN54_V2_SendCommand>

#if (USE_TIME_PROFILING == 1)
    uint32_t startTick = DWT->CYCCNT;
#endif /* USE_TIME_PROFILING */
    EPD_1IN54_V2_ReadBusy();
 800b35a:	f7ff ffcd 	bl	800b2f8 <EPD_1IN54_V2_ReadBusy>
#if (USE_TIME_PROFILING == 1)
    uint32_t tmp = DWT->CYCCNT - startTick;
    printf("####  EPD_1IN54_V2_TurnOnDisplay: %d\n", (int)(tmp * 0.0000625));
#endif /* USE_TIME_PROFILING */
}
 800b35e:	46c0      	nop			@ (mov r8, r8)
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}

0800b364 <EPD_1IN54_V2_TurnOnDisplayPart>:
/******************************************************************************
function :	Turn On Display part
parameter:
******************************************************************************/
void EPD_1IN54_V2_TurnOnDisplayPart(void)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_SendCommand(0x22);
 800b368:	2022      	movs	r0, #34	@ 0x22
 800b36a:	f7ff ff89 	bl	800b280 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xcF);
 800b36e:	20cf      	movs	r0, #207	@ 0xcf
 800b370:	f7ff ffa4 	bl	800b2bc <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 800b374:	2020      	movs	r0, #32
 800b376:	f7ff ff83 	bl	800b280 <EPD_1IN54_V2_SendCommand>

//    enter_stop2(2330, LL_RTC_WAKEUPCLOCK_DIV_8);

    //  *********************   End S L E E P  571 ms !  *********************

    EPD_1IN54_V2_ReadBusy();
 800b37a:	f7ff ffbd 	bl	800b2f8 <EPD_1IN54_V2_ReadBusy>
}
 800b37e:	46c0      	nop			@ (mov r8, r8)
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <EPD_1IN54_V2_Lut>:

static void EPD_1IN54_V2_Lut(UBYTE *lut)
{
 800b384:	b590      	push	{r4, r7, lr}
 800b386:	b085      	sub	sp, #20
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
    EPD_1IN54_V2_SendCommand(0x32);
 800b38c:	2032      	movs	r0, #50	@ 0x32
 800b38e:	f7ff ff77 	bl	800b280 <EPD_1IN54_V2_SendCommand>
    for (UBYTE i = 0; i < 153; i++)
 800b392:	230f      	movs	r3, #15
 800b394:	18fb      	adds	r3, r7, r3
 800b396:	2200      	movs	r2, #0
 800b398:	701a      	strb	r2, [r3, #0]
 800b39a:	e00d      	b.n	800b3b8 <EPD_1IN54_V2_Lut+0x34>
        EPD_1IN54_V2_SendData(lut[i]);
 800b39c:	240f      	movs	r4, #15
 800b39e:	193b      	adds	r3, r7, r4
 800b3a0:	781b      	ldrb	r3, [r3, #0]
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	18d3      	adds	r3, r2, r3
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	0018      	movs	r0, r3
 800b3aa:	f7ff ff87 	bl	800b2bc <EPD_1IN54_V2_SendData>
    for (UBYTE i = 0; i < 153; i++)
 800b3ae:	193b      	adds	r3, r7, r4
 800b3b0:	781a      	ldrb	r2, [r3, #0]
 800b3b2:	193b      	adds	r3, r7, r4
 800b3b4:	3201      	adds	r2, #1
 800b3b6:	701a      	strb	r2, [r3, #0]
 800b3b8:	230f      	movs	r3, #15
 800b3ba:	18fb      	adds	r3, r7, r3
 800b3bc:	781b      	ldrb	r3, [r3, #0]
 800b3be:	2b98      	cmp	r3, #152	@ 0x98
 800b3c0:	d9ec      	bls.n	800b39c <EPD_1IN54_V2_Lut+0x18>

#if (USE_TIME_PROFILING == 1)
    uint32_t startTick = DWT->CYCCNT;
#endif /* USE_TIME_PROFILING */
    EPD_1IN54_V2_ReadBusy();
 800b3c2:	f7ff ff99 	bl	800b2f8 <EPD_1IN54_V2_ReadBusy>
#if (USE_TIME_PROFILING == 1)
    uint32_t tmp = DWT->CYCCNT - startTick;
    printf("####  EPD_1IN54_V2_Lut: %d\n", (int)(tmp * 0.0000625));
#endif /* USE_TIME_PROFILING */
}
 800b3c6:	46c0      	nop			@ (mov r8, r8)
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	b005      	add	sp, #20
 800b3cc:	bd90      	pop	{r4, r7, pc}

0800b3ce <EPD_1IN54_V2_SetLut>:

static void EPD_1IN54_V2_SetLut(UBYTE *lut)
{
 800b3ce:	b580      	push	{r7, lr}
 800b3d0:	b082      	sub	sp, #8
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
    EPD_1IN54_V2_Lut(lut);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	0018      	movs	r0, r3
 800b3da:	f7ff ffd3 	bl	800b384 <EPD_1IN54_V2_Lut>

    EPD_1IN54_V2_SendCommand(0x3f);
 800b3de:	203f      	movs	r0, #63	@ 0x3f
 800b3e0:	f7ff ff4e 	bl	800b280 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(lut[153]);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	3399      	adds	r3, #153	@ 0x99
 800b3e8:	781b      	ldrb	r3, [r3, #0]
 800b3ea:	0018      	movs	r0, r3
 800b3ec:	f7ff ff66 	bl	800b2bc <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x03);
 800b3f0:	2003      	movs	r0, #3
 800b3f2:	f7ff ff45 	bl	800b280 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(lut[154]);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	339a      	adds	r3, #154	@ 0x9a
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	0018      	movs	r0, r3
 800b3fe:	f7ff ff5d 	bl	800b2bc <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x04);
 800b402:	2004      	movs	r0, #4
 800b404:	f7ff ff3c 	bl	800b280 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(lut[155]);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	339b      	adds	r3, #155	@ 0x9b
 800b40c:	781b      	ldrb	r3, [r3, #0]
 800b40e:	0018      	movs	r0, r3
 800b410:	f7ff ff54 	bl	800b2bc <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(lut[156]);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	339c      	adds	r3, #156	@ 0x9c
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	0018      	movs	r0, r3
 800b41c:	f7ff ff4e 	bl	800b2bc <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(lut[157]);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	339d      	adds	r3, #157	@ 0x9d
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	0018      	movs	r0, r3
 800b428:	f7ff ff48 	bl	800b2bc <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x2c);
 800b42c:	202c      	movs	r0, #44	@ 0x2c
 800b42e:	f7ff ff27 	bl	800b280 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(lut[158]);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	339e      	adds	r3, #158	@ 0x9e
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	0018      	movs	r0, r3
 800b43a:	f7ff ff3f 	bl	800b2bc <EPD_1IN54_V2_SendData>
}
 800b43e:	46c0      	nop			@ (mov r8, r8)
 800b440:	46bd      	mov	sp, r7
 800b442:	b002      	add	sp, #8
 800b444:	bd80      	pop	{r7, pc}

0800b446 <EPD_1IN54_V2_SetWindows>:

static void EPD_1IN54_V2_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 800b446:	b5b0      	push	{r4, r5, r7, lr}
 800b448:	b082      	sub	sp, #8
 800b44a:	af00      	add	r7, sp, #0
 800b44c:	0005      	movs	r5, r0
 800b44e:	000c      	movs	r4, r1
 800b450:	0010      	movs	r0, r2
 800b452:	0019      	movs	r1, r3
 800b454:	1dbb      	adds	r3, r7, #6
 800b456:	1c2a      	adds	r2, r5, #0
 800b458:	801a      	strh	r2, [r3, #0]
 800b45a:	1d3b      	adds	r3, r7, #4
 800b45c:	1c22      	adds	r2, r4, #0
 800b45e:	801a      	strh	r2, [r3, #0]
 800b460:	1cbb      	adds	r3, r7, #2
 800b462:	1c02      	adds	r2, r0, #0
 800b464:	801a      	strh	r2, [r3, #0]
 800b466:	003b      	movs	r3, r7
 800b468:	1c0a      	adds	r2, r1, #0
 800b46a:	801a      	strh	r2, [r3, #0]
    EPD_1IN54_V2_SendCommand(0x44); // SET_RAM_X_ADDRESS_START_END_POSITION
 800b46c:	2044      	movs	r0, #68	@ 0x44
 800b46e:	f7ff ff07 	bl	800b280 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData((Xstart >> 3) & 0xFF);
 800b472:	1dbb      	adds	r3, r7, #6
 800b474:	881b      	ldrh	r3, [r3, #0]
 800b476:	08db      	lsrs	r3, r3, #3
 800b478:	b29b      	uxth	r3, r3
 800b47a:	b2db      	uxtb	r3, r3
 800b47c:	0018      	movs	r0, r3
 800b47e:	f7ff ff1d 	bl	800b2bc <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData((Xend >> 3) & 0xFF);
 800b482:	1cbb      	adds	r3, r7, #2
 800b484:	881b      	ldrh	r3, [r3, #0]
 800b486:	08db      	lsrs	r3, r3, #3
 800b488:	b29b      	uxth	r3, r3
 800b48a:	b2db      	uxtb	r3, r3
 800b48c:	0018      	movs	r0, r3
 800b48e:	f7ff ff15 	bl	800b2bc <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x45); // SET_RAM_Y_ADDRESS_START_END_POSITION
 800b492:	2045      	movs	r0, #69	@ 0x45
 800b494:	f7ff fef4 	bl	800b280 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(Ystart & 0xFF);
 800b498:	1d3b      	adds	r3, r7, #4
 800b49a:	881b      	ldrh	r3, [r3, #0]
 800b49c:	b2db      	uxtb	r3, r3
 800b49e:	0018      	movs	r0, r3
 800b4a0:	f7ff ff0c 	bl	800b2bc <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData((Ystart >> 8) & 0xFF);
 800b4a4:	1d3b      	adds	r3, r7, #4
 800b4a6:	881b      	ldrh	r3, [r3, #0]
 800b4a8:	0a1b      	lsrs	r3, r3, #8
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	b2db      	uxtb	r3, r3
 800b4ae:	0018      	movs	r0, r3
 800b4b0:	f7ff ff04 	bl	800b2bc <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(Yend & 0xFF);
 800b4b4:	003b      	movs	r3, r7
 800b4b6:	881b      	ldrh	r3, [r3, #0]
 800b4b8:	b2db      	uxtb	r3, r3
 800b4ba:	0018      	movs	r0, r3
 800b4bc:	f7ff fefe 	bl	800b2bc <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData((Yend >> 8) & 0xFF);
 800b4c0:	003b      	movs	r3, r7
 800b4c2:	881b      	ldrh	r3, [r3, #0]
 800b4c4:	0a1b      	lsrs	r3, r3, #8
 800b4c6:	b29b      	uxth	r3, r3
 800b4c8:	b2db      	uxtb	r3, r3
 800b4ca:	0018      	movs	r0, r3
 800b4cc:	f7ff fef6 	bl	800b2bc <EPD_1IN54_V2_SendData>
}
 800b4d0:	46c0      	nop			@ (mov r8, r8)
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	b002      	add	sp, #8
 800b4d6:	bdb0      	pop	{r4, r5, r7, pc}

0800b4d8 <EPD_1IN54_V2_SetCursor>:

static void EPD_1IN54_V2_SetCursor(UWORD Xstart, UWORD Ystart)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	0002      	movs	r2, r0
 800b4e0:	1dbb      	adds	r3, r7, #6
 800b4e2:	801a      	strh	r2, [r3, #0]
 800b4e4:	1d3b      	adds	r3, r7, #4
 800b4e6:	1c0a      	adds	r2, r1, #0
 800b4e8:	801a      	strh	r2, [r3, #0]
    EPD_1IN54_V2_SendCommand(0x4E); // SET_RAM_X_ADDRESS_COUNTER
 800b4ea:	204e      	movs	r0, #78	@ 0x4e
 800b4ec:	f7ff fec8 	bl	800b280 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(Xstart & 0xFF);
 800b4f0:	1dbb      	adds	r3, r7, #6
 800b4f2:	881b      	ldrh	r3, [r3, #0]
 800b4f4:	b2db      	uxtb	r3, r3
 800b4f6:	0018      	movs	r0, r3
 800b4f8:	f7ff fee0 	bl	800b2bc <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x4F); // SET_RAM_Y_ADDRESS_COUNTER
 800b4fc:	204f      	movs	r0, #79	@ 0x4f
 800b4fe:	f7ff febf 	bl	800b280 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(Ystart & 0xFF);
 800b502:	1d3b      	adds	r3, r7, #4
 800b504:	881b      	ldrh	r3, [r3, #0]
 800b506:	b2db      	uxtb	r3, r3
 800b508:	0018      	movs	r0, r3
 800b50a:	f7ff fed7 	bl	800b2bc <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData((Ystart >> 8) & 0xFF);
 800b50e:	1d3b      	adds	r3, r7, #4
 800b510:	881b      	ldrh	r3, [r3, #0]
 800b512:	0a1b      	lsrs	r3, r3, #8
 800b514:	b29b      	uxth	r3, r3
 800b516:	b2db      	uxtb	r3, r3
 800b518:	0018      	movs	r0, r3
 800b51a:	f7ff fecf 	bl	800b2bc <EPD_1IN54_V2_SendData>
}
 800b51e:	46c0      	nop			@ (mov r8, r8)
 800b520:	46bd      	mov	sp, r7
 800b522:	b002      	add	sp, #8
 800b524:	bd80      	pop	{r7, pc}
	...

0800b528 <EPD_1IN54_V2_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_1IN54_V2_Init(void)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_Reset();
 800b52c:	f7ff fe91 	bl	800b252 <EPD_1IN54_V2_Reset>

#if (USE_TIME_PROFILING == 1)
    uint32_t startTick = DWT->CYCCNT;
#endif /* USE_TIME_PROFILING */
    EPD_1IN54_V2_ReadBusy();
 800b530:	f7ff fee2 	bl	800b2f8 <EPD_1IN54_V2_ReadBusy>
#if (USE_TIME_PROFILING == 1)
    uint32_t tmp = DWT->CYCCNT - startTick;
    printf("####  EPD_1IN54_V2_Init-1: %d\n", (int)(tmp * 0.0000625));
#endif /* USE_TIME_PROFILING */

    EPD_1IN54_V2_SendCommand(0x12); // SWRESET
 800b534:	2012      	movs	r0, #18
 800b536:	f7ff fea3 	bl	800b280 <EPD_1IN54_V2_SendCommand>

#if (USE_TIME_PROFILING == 1)
    startTick = DWT->CYCCNT;
#endif /* USE_TIME_PROFILING */
    EPD_1IN54_V2_ReadBusy();
 800b53a:	f7ff fedd 	bl	800b2f8 <EPD_1IN54_V2_ReadBusy>
#if (USE_TIME_PROFILING == 1)
    tmp = DWT->CYCCNT - startTick;
    printf("####  EPD_1IN54_V2_Init-2: %d\n", (int)(tmp * 0.0000625));
#endif /* USE_TIME_PROFILING */

    EPD_1IN54_V2_SendCommand(0x01); // Driver output control
 800b53e:	2001      	movs	r0, #1
 800b540:	f7ff fe9e 	bl	800b280 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xC7);
 800b544:	20c7      	movs	r0, #199	@ 0xc7
 800b546:	f7ff feb9 	bl	800b2bc <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800b54a:	2000      	movs	r0, #0
 800b54c:	f7ff feb6 	bl	800b2bc <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x01);
 800b550:	2001      	movs	r0, #1
 800b552:	f7ff feb3 	bl	800b2bc <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x11); // data entry mode
 800b556:	2011      	movs	r0, #17
 800b558:	f7ff fe92 	bl	800b280 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x01);
 800b55c:	2001      	movs	r0, #1
 800b55e:	f7ff fead 	bl	800b2bc <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SetWindows(0, EPD_1IN54_V2_HEIGHT - 1, EPD_1IN54_V2_WIDTH - 1, 0);
 800b562:	2300      	movs	r3, #0
 800b564:	22c7      	movs	r2, #199	@ 0xc7
 800b566:	21c7      	movs	r1, #199	@ 0xc7
 800b568:	2000      	movs	r0, #0
 800b56a:	f7ff ff6c 	bl	800b446 <EPD_1IN54_V2_SetWindows>

    EPD_1IN54_V2_SendCommand(0x3C); // BorderWavefrom
 800b56e:	203c      	movs	r0, #60	@ 0x3c
 800b570:	f7ff fe86 	bl	800b280 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x01);
 800b574:	2001      	movs	r0, #1
 800b576:	f7ff fea1 	bl	800b2bc <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x18);
 800b57a:	2018      	movs	r0, #24
 800b57c:	f7ff fe80 	bl	800b280 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x80);
 800b580:	2080      	movs	r0, #128	@ 0x80
 800b582:	f7ff fe9b 	bl	800b2bc <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x22); // Load Temperature and waveform setting.
 800b586:	2022      	movs	r0, #34	@ 0x22
 800b588:	f7ff fe7a 	bl	800b280 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0XB1);
 800b58c:	20b1      	movs	r0, #177	@ 0xb1
 800b58e:	f7ff fe95 	bl	800b2bc <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 800b592:	2020      	movs	r0, #32
 800b594:	f7ff fe74 	bl	800b280 <EPD_1IN54_V2_SendCommand>

    EPD_1IN54_V2_SetCursor(0, EPD_1IN54_V2_HEIGHT - 1);
 800b598:	21c7      	movs	r1, #199	@ 0xc7
 800b59a:	2000      	movs	r0, #0
 800b59c:	f7ff ff9c 	bl	800b4d8 <EPD_1IN54_V2_SetCursor>

#if (USE_TIME_PROFILING == 1)
    startTick = DWT->CYCCNT;
#endif /* USE_TIME_PROFILING */
    EPD_1IN54_V2_ReadBusy();
 800b5a0:	f7ff feaa 	bl	800b2f8 <EPD_1IN54_V2_ReadBusy>
#if (USE_TIME_PROFILING == 1)
    tmp = DWT->CYCCNT - startTick;
    printf("####  EPD_1IN54_V2_Init-3: %d\n", (int)(tmp * 0.0000625));
#endif /* USE_TIME_PROFILING */

    EPD_1IN54_V2_SetLut(WF_Full_1IN54);
 800b5a4:	4b03      	ldr	r3, [pc, #12]	@ (800b5b4 <EPD_1IN54_V2_Init+0x8c>)
 800b5a6:	0018      	movs	r0, r3
 800b5a8:	f7ff ff11 	bl	800b3ce <EPD_1IN54_V2_SetLut>
}
 800b5ac:	46c0      	nop			@ (mov r8, r8)
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	46c0      	nop			@ (mov r8, r8)
 800b5b4:	20000010 	.word	0x20000010

0800b5b8 <EPD_1IN54_V2_Init_Partial>:
/******************************************************************************
function :	Initialize the e-Paper register (Partial display)
parameter:
******************************************************************************/
void EPD_1IN54_V2_Init_Partial(void)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_Reset();
 800b5bc:	f7ff fe49 	bl	800b252 <EPD_1IN54_V2_Reset>

#if (USE_TIME_PROFILING == 1)
    uint32_t startTick = DWT->CYCCNT;
#endif /* USE_TIME_PROFILING */
    EPD_1IN54_V2_ReadBusy();
 800b5c0:	f7ff fe9a 	bl	800b2f8 <EPD_1IN54_V2_ReadBusy>
#if (USE_TIME_PROFILING == 1)
    uint32_t tmp = DWT->CYCCNT - startTick;
    printf("####  EPD_1IN54_V2_Init_Partial-1: %d\n", (int)(tmp * 0.0000625));
#endif /* USE_TIME_PROFILING */

    EPD_1IN54_V2_SetLut(WF_PARTIAL_1IN54_0);
 800b5c4:	4b1c      	ldr	r3, [pc, #112]	@ (800b638 <EPD_1IN54_V2_Init_Partial+0x80>)
 800b5c6:	0018      	movs	r0, r3
 800b5c8:	f7ff ff01 	bl	800b3ce <EPD_1IN54_V2_SetLut>
    EPD_1IN54_V2_SendCommand(0x37);
 800b5cc:	2037      	movs	r0, #55	@ 0x37
 800b5ce:	f7ff fe57 	bl	800b280 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x00);
 800b5d2:	2000      	movs	r0, #0
 800b5d4:	f7ff fe72 	bl	800b2bc <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800b5d8:	2000      	movs	r0, #0
 800b5da:	f7ff fe6f 	bl	800b2bc <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800b5de:	2000      	movs	r0, #0
 800b5e0:	f7ff fe6c 	bl	800b2bc <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800b5e4:	2000      	movs	r0, #0
 800b5e6:	f7ff fe69 	bl	800b2bc <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800b5ea:	2000      	movs	r0, #0
 800b5ec:	f7ff fe66 	bl	800b2bc <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x40);
 800b5f0:	2040      	movs	r0, #64	@ 0x40
 800b5f2:	f7ff fe63 	bl	800b2bc <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800b5f6:	2000      	movs	r0, #0
 800b5f8:	f7ff fe60 	bl	800b2bc <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800b5fc:	2000      	movs	r0, #0
 800b5fe:	f7ff fe5d 	bl	800b2bc <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800b602:	2000      	movs	r0, #0
 800b604:	f7ff fe5a 	bl	800b2bc <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800b608:	2000      	movs	r0, #0
 800b60a:	f7ff fe57 	bl	800b2bc <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x3C); // BorderWavefrom
 800b60e:	203c      	movs	r0, #60	@ 0x3c
 800b610:	f7ff fe36 	bl	800b280 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x80);
 800b614:	2080      	movs	r0, #128	@ 0x80
 800b616:	f7ff fe51 	bl	800b2bc <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x22);
 800b61a:	2022      	movs	r0, #34	@ 0x22
 800b61c:	f7ff fe30 	bl	800b280 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xc0);
 800b620:	20c0      	movs	r0, #192	@ 0xc0
 800b622:	f7ff fe4b 	bl	800b2bc <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 800b626:	2020      	movs	r0, #32
 800b628:	f7ff fe2a 	bl	800b280 <EPD_1IN54_V2_SendCommand>

#if (USE_TIME_PROFILING == 1)
    startTick = DWT->CYCCNT;
#endif /* USE_TIME_PROFILING */
    EPD_1IN54_V2_ReadBusy();
 800b62c:	f7ff fe64 	bl	800b2f8 <EPD_1IN54_V2_ReadBusy>
#if (USE_TIME_PROFILING == 1)
    tmp = DWT->CYCCNT - startTick;
    printf("###  EPD_1IN54_V2_Init_Partial-2: %d\n", (int)(tmp * 0.0000625));
#endif /* USE_TIME_PROFILING */
}
 800b630:	46c0      	nop			@ (mov r8, r8)
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
 800b636:	46c0      	nop			@ (mov r8, r8)
 800b638:	200000b0 	.word	0x200000b0

0800b63c <EPD_1IN54_V2_Display>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_1IN54_V2_Display(UBYTE *Image)
{
 800b63c:	b590      	push	{r4, r7, lr}
 800b63e:	b087      	sub	sp, #28
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0) ? (EPD_1IN54_V2_WIDTH / 8) : (EPD_1IN54_V2_WIDTH / 8 + 1);
 800b644:	2312      	movs	r3, #18
 800b646:	18fb      	adds	r3, r7, r3
 800b648:	2219      	movs	r2, #25
 800b64a:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 800b64c:	2310      	movs	r3, #16
 800b64e:	18fb      	adds	r3, r7, r3
 800b650:	22c8      	movs	r2, #200	@ 0xc8
 800b652:	801a      	strh	r2, [r3, #0]

    UDOUBLE Addr = 0;
 800b654:	2300      	movs	r3, #0
 800b656:	60fb      	str	r3, [r7, #12]
    EPD_1IN54_V2_SendCommand(0x24);
 800b658:	2024      	movs	r0, #36	@ 0x24
 800b65a:	f7ff fe11 	bl	800b280 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++)
 800b65e:	2316      	movs	r3, #22
 800b660:	18fb      	adds	r3, r7, r3
 800b662:	2200      	movs	r2, #0
 800b664:	801a      	strh	r2, [r3, #0]
 800b666:	e02a      	b.n	800b6be <EPD_1IN54_V2_Display+0x82>
    {
        for (UWORD i = 0; i < Width; i++)
 800b668:	2314      	movs	r3, #20
 800b66a:	18fb      	adds	r3, r7, r3
 800b66c:	2200      	movs	r2, #0
 800b66e:	801a      	strh	r2, [r3, #0]
 800b670:	e017      	b.n	800b6a2 <EPD_1IN54_V2_Display+0x66>
        {
            Addr = i + j * Width;
 800b672:	2414      	movs	r4, #20
 800b674:	193b      	adds	r3, r7, r4
 800b676:	881a      	ldrh	r2, [r3, #0]
 800b678:	2316      	movs	r3, #22
 800b67a:	18fb      	adds	r3, r7, r3
 800b67c:	881b      	ldrh	r3, [r3, #0]
 800b67e:	2112      	movs	r1, #18
 800b680:	1879      	adds	r1, r7, r1
 800b682:	8809      	ldrh	r1, [r1, #0]
 800b684:	434b      	muls	r3, r1
 800b686:	18d3      	adds	r3, r2, r3
 800b688:	60fb      	str	r3, [r7, #12]
            EPD_1IN54_V2_SendData(Image[Addr]);
 800b68a:	687a      	ldr	r2, [r7, #4]
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	18d3      	adds	r3, r2, r3
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	0018      	movs	r0, r3
 800b694:	f7ff fe12 	bl	800b2bc <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++)
 800b698:	193b      	adds	r3, r7, r4
 800b69a:	881a      	ldrh	r2, [r3, #0]
 800b69c:	193b      	adds	r3, r7, r4
 800b69e:	3201      	adds	r2, #1
 800b6a0:	801a      	strh	r2, [r3, #0]
 800b6a2:	2314      	movs	r3, #20
 800b6a4:	18fa      	adds	r2, r7, r3
 800b6a6:	2312      	movs	r3, #18
 800b6a8:	18fb      	adds	r3, r7, r3
 800b6aa:	8812      	ldrh	r2, [r2, #0]
 800b6ac:	881b      	ldrh	r3, [r3, #0]
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d3df      	bcc.n	800b672 <EPD_1IN54_V2_Display+0x36>
    for (UWORD j = 0; j < Height; j++)
 800b6b2:	2116      	movs	r1, #22
 800b6b4:	187b      	adds	r3, r7, r1
 800b6b6:	881a      	ldrh	r2, [r3, #0]
 800b6b8:	187b      	adds	r3, r7, r1
 800b6ba:	3201      	adds	r2, #1
 800b6bc:	801a      	strh	r2, [r3, #0]
 800b6be:	2316      	movs	r3, #22
 800b6c0:	18fa      	adds	r2, r7, r3
 800b6c2:	2310      	movs	r3, #16
 800b6c4:	18fb      	adds	r3, r7, r3
 800b6c6:	8812      	ldrh	r2, [r2, #0]
 800b6c8:	881b      	ldrh	r3, [r3, #0]
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d3cc      	bcc.n	800b668 <EPD_1IN54_V2_Display+0x2c>
        }
    }
    EPD_1IN54_V2_TurnOnDisplay();
 800b6ce:	f7ff fe39 	bl	800b344 <EPD_1IN54_V2_TurnOnDisplay>
}
 800b6d2:	46c0      	nop			@ (mov r8, r8)
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	b007      	add	sp, #28
 800b6d8:	bd90      	pop	{r4, r7, pc}

0800b6da <EPD_1IN54_V2_DisplayPartBaseImage>:
function :	 The image of the previous frame must be uploaded, otherwise the
                 first few seconds will display an exception.
parameter:
******************************************************************************/
void EPD_1IN54_V2_DisplayPartBaseImage(UBYTE *Image)
{
 800b6da:	b590      	push	{r4, r7, lr}
 800b6dc:	b087      	sub	sp, #28
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0) ? (EPD_1IN54_V2_WIDTH / 8) : (EPD_1IN54_V2_WIDTH / 8 + 1);
 800b6e2:	230e      	movs	r3, #14
 800b6e4:	18fb      	adds	r3, r7, r3
 800b6e6:	2219      	movs	r2, #25
 800b6e8:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 800b6ea:	230c      	movs	r3, #12
 800b6ec:	18fb      	adds	r3, r7, r3
 800b6ee:	22c8      	movs	r2, #200	@ 0xc8
 800b6f0:	801a      	strh	r2, [r3, #0]

    UDOUBLE Addr = 0;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	60bb      	str	r3, [r7, #8]
    EPD_1IN54_V2_SendCommand(0x24);
 800b6f6:	2024      	movs	r0, #36	@ 0x24
 800b6f8:	f7ff fdc2 	bl	800b280 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++)
 800b6fc:	2316      	movs	r3, #22
 800b6fe:	18fb      	adds	r3, r7, r3
 800b700:	2200      	movs	r2, #0
 800b702:	801a      	strh	r2, [r3, #0]
 800b704:	e02a      	b.n	800b75c <EPD_1IN54_V2_DisplayPartBaseImage+0x82>
    {
        for (UWORD i = 0; i < Width; i++)
 800b706:	2314      	movs	r3, #20
 800b708:	18fb      	adds	r3, r7, r3
 800b70a:	2200      	movs	r2, #0
 800b70c:	801a      	strh	r2, [r3, #0]
 800b70e:	e017      	b.n	800b740 <EPD_1IN54_V2_DisplayPartBaseImage+0x66>
        {
            Addr = i + j * Width;
 800b710:	2414      	movs	r4, #20
 800b712:	193b      	adds	r3, r7, r4
 800b714:	881a      	ldrh	r2, [r3, #0]
 800b716:	2316      	movs	r3, #22
 800b718:	18fb      	adds	r3, r7, r3
 800b71a:	881b      	ldrh	r3, [r3, #0]
 800b71c:	210e      	movs	r1, #14
 800b71e:	1879      	adds	r1, r7, r1
 800b720:	8809      	ldrh	r1, [r1, #0]
 800b722:	434b      	muls	r3, r1
 800b724:	18d3      	adds	r3, r2, r3
 800b726:	60bb      	str	r3, [r7, #8]
            EPD_1IN54_V2_SendData(Image[Addr]);
 800b728:	687a      	ldr	r2, [r7, #4]
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	18d3      	adds	r3, r2, r3
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	0018      	movs	r0, r3
 800b732:	f7ff fdc3 	bl	800b2bc <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++)
 800b736:	193b      	adds	r3, r7, r4
 800b738:	881a      	ldrh	r2, [r3, #0]
 800b73a:	193b      	adds	r3, r7, r4
 800b73c:	3201      	adds	r2, #1
 800b73e:	801a      	strh	r2, [r3, #0]
 800b740:	2314      	movs	r3, #20
 800b742:	18fa      	adds	r2, r7, r3
 800b744:	230e      	movs	r3, #14
 800b746:	18fb      	adds	r3, r7, r3
 800b748:	8812      	ldrh	r2, [r2, #0]
 800b74a:	881b      	ldrh	r3, [r3, #0]
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d3df      	bcc.n	800b710 <EPD_1IN54_V2_DisplayPartBaseImage+0x36>
    for (UWORD j = 0; j < Height; j++)
 800b750:	2116      	movs	r1, #22
 800b752:	187b      	adds	r3, r7, r1
 800b754:	881a      	ldrh	r2, [r3, #0]
 800b756:	187b      	adds	r3, r7, r1
 800b758:	3201      	adds	r2, #1
 800b75a:	801a      	strh	r2, [r3, #0]
 800b75c:	2316      	movs	r3, #22
 800b75e:	18fa      	adds	r2, r7, r3
 800b760:	230c      	movs	r3, #12
 800b762:	18fb      	adds	r3, r7, r3
 800b764:	8812      	ldrh	r2, [r2, #0]
 800b766:	881b      	ldrh	r3, [r3, #0]
 800b768:	429a      	cmp	r2, r3
 800b76a:	d3cc      	bcc.n	800b706 <EPD_1IN54_V2_DisplayPartBaseImage+0x2c>
        }
    }
    EPD_1IN54_V2_SendCommand(0x26);
 800b76c:	2026      	movs	r0, #38	@ 0x26
 800b76e:	f7ff fd87 	bl	800b280 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++)
 800b772:	2312      	movs	r3, #18
 800b774:	18fb      	adds	r3, r7, r3
 800b776:	2200      	movs	r2, #0
 800b778:	801a      	strh	r2, [r3, #0]
 800b77a:	e02a      	b.n	800b7d2 <EPD_1IN54_V2_DisplayPartBaseImage+0xf8>
    {
        for (UWORD i = 0; i < Width; i++)
 800b77c:	2310      	movs	r3, #16
 800b77e:	18fb      	adds	r3, r7, r3
 800b780:	2200      	movs	r2, #0
 800b782:	801a      	strh	r2, [r3, #0]
 800b784:	e017      	b.n	800b7b6 <EPD_1IN54_V2_DisplayPartBaseImage+0xdc>
        {
            Addr = i + j * Width;
 800b786:	2410      	movs	r4, #16
 800b788:	193b      	adds	r3, r7, r4
 800b78a:	881a      	ldrh	r2, [r3, #0]
 800b78c:	2312      	movs	r3, #18
 800b78e:	18fb      	adds	r3, r7, r3
 800b790:	881b      	ldrh	r3, [r3, #0]
 800b792:	210e      	movs	r1, #14
 800b794:	1879      	adds	r1, r7, r1
 800b796:	8809      	ldrh	r1, [r1, #0]
 800b798:	434b      	muls	r3, r1
 800b79a:	18d3      	adds	r3, r2, r3
 800b79c:	60bb      	str	r3, [r7, #8]
            EPD_1IN54_V2_SendData(Image[Addr]);
 800b79e:	687a      	ldr	r2, [r7, #4]
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	18d3      	adds	r3, r2, r3
 800b7a4:	781b      	ldrb	r3, [r3, #0]
 800b7a6:	0018      	movs	r0, r3
 800b7a8:	f7ff fd88 	bl	800b2bc <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++)
 800b7ac:	193b      	adds	r3, r7, r4
 800b7ae:	881a      	ldrh	r2, [r3, #0]
 800b7b0:	193b      	adds	r3, r7, r4
 800b7b2:	3201      	adds	r2, #1
 800b7b4:	801a      	strh	r2, [r3, #0]
 800b7b6:	2310      	movs	r3, #16
 800b7b8:	18fa      	adds	r2, r7, r3
 800b7ba:	230e      	movs	r3, #14
 800b7bc:	18fb      	adds	r3, r7, r3
 800b7be:	8812      	ldrh	r2, [r2, #0]
 800b7c0:	881b      	ldrh	r3, [r3, #0]
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d3df      	bcc.n	800b786 <EPD_1IN54_V2_DisplayPartBaseImage+0xac>
    for (UWORD j = 0; j < Height; j++)
 800b7c6:	2112      	movs	r1, #18
 800b7c8:	187b      	adds	r3, r7, r1
 800b7ca:	881a      	ldrh	r2, [r3, #0]
 800b7cc:	187b      	adds	r3, r7, r1
 800b7ce:	3201      	adds	r2, #1
 800b7d0:	801a      	strh	r2, [r3, #0]
 800b7d2:	2312      	movs	r3, #18
 800b7d4:	18fa      	adds	r2, r7, r3
 800b7d6:	230c      	movs	r3, #12
 800b7d8:	18fb      	adds	r3, r7, r3
 800b7da:	8812      	ldrh	r2, [r2, #0]
 800b7dc:	881b      	ldrh	r3, [r3, #0]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d3cc      	bcc.n	800b77c <EPD_1IN54_V2_DisplayPartBaseImage+0xa2>
        }
    }
    EPD_1IN54_V2_TurnOnDisplayPart();
 800b7e2:	f7ff fdbf 	bl	800b364 <EPD_1IN54_V2_TurnOnDisplayPart>
}
 800b7e6:	46c0      	nop			@ (mov r8, r8)
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	b007      	add	sp, #28
 800b7ec:	bd90      	pop	{r4, r7, pc}

0800b7ee <EPD_1IN54_V2_DisplayPart>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_1IN54_V2_DisplayPart(UBYTE *Image)
{
 800b7ee:	b590      	push	{r4, r7, lr}
 800b7f0:	b087      	sub	sp, #28
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0) ? (EPD_1IN54_V2_WIDTH / 8) : (EPD_1IN54_V2_WIDTH / 8 + 1);
 800b7f6:	2312      	movs	r3, #18
 800b7f8:	18fb      	adds	r3, r7, r3
 800b7fa:	2219      	movs	r2, #25
 800b7fc:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 800b7fe:	2310      	movs	r3, #16
 800b800:	18fb      	adds	r3, r7, r3
 800b802:	22c8      	movs	r2, #200	@ 0xc8
 800b804:	801a      	strh	r2, [r3, #0]

    UDOUBLE Addr = 0;
 800b806:	2300      	movs	r3, #0
 800b808:	60fb      	str	r3, [r7, #12]
    EPD_1IN54_V2_SendCommand(0x24);
 800b80a:	2024      	movs	r0, #36	@ 0x24
 800b80c:	f7ff fd38 	bl	800b280 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++)
 800b810:	2316      	movs	r3, #22
 800b812:	18fb      	adds	r3, r7, r3
 800b814:	2200      	movs	r2, #0
 800b816:	801a      	strh	r2, [r3, #0]
 800b818:	e02a      	b.n	800b870 <EPD_1IN54_V2_DisplayPart+0x82>
    {
        for (UWORD i = 0; i < Width; i++)
 800b81a:	2314      	movs	r3, #20
 800b81c:	18fb      	adds	r3, r7, r3
 800b81e:	2200      	movs	r2, #0
 800b820:	801a      	strh	r2, [r3, #0]
 800b822:	e017      	b.n	800b854 <EPD_1IN54_V2_DisplayPart+0x66>
        {
            Addr = i + j * Width;
 800b824:	2414      	movs	r4, #20
 800b826:	193b      	adds	r3, r7, r4
 800b828:	881a      	ldrh	r2, [r3, #0]
 800b82a:	2316      	movs	r3, #22
 800b82c:	18fb      	adds	r3, r7, r3
 800b82e:	881b      	ldrh	r3, [r3, #0]
 800b830:	2112      	movs	r1, #18
 800b832:	1879      	adds	r1, r7, r1
 800b834:	8809      	ldrh	r1, [r1, #0]
 800b836:	434b      	muls	r3, r1
 800b838:	18d3      	adds	r3, r2, r3
 800b83a:	60fb      	str	r3, [r7, #12]
            EPD_1IN54_V2_SendData(Image[Addr]);
 800b83c:	687a      	ldr	r2, [r7, #4]
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	18d3      	adds	r3, r2, r3
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	0018      	movs	r0, r3
 800b846:	f7ff fd39 	bl	800b2bc <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++)
 800b84a:	193b      	adds	r3, r7, r4
 800b84c:	881a      	ldrh	r2, [r3, #0]
 800b84e:	193b      	adds	r3, r7, r4
 800b850:	3201      	adds	r2, #1
 800b852:	801a      	strh	r2, [r3, #0]
 800b854:	2314      	movs	r3, #20
 800b856:	18fa      	adds	r2, r7, r3
 800b858:	2312      	movs	r3, #18
 800b85a:	18fb      	adds	r3, r7, r3
 800b85c:	8812      	ldrh	r2, [r2, #0]
 800b85e:	881b      	ldrh	r3, [r3, #0]
 800b860:	429a      	cmp	r2, r3
 800b862:	d3df      	bcc.n	800b824 <EPD_1IN54_V2_DisplayPart+0x36>
    for (UWORD j = 0; j < Height; j++)
 800b864:	2116      	movs	r1, #22
 800b866:	187b      	adds	r3, r7, r1
 800b868:	881a      	ldrh	r2, [r3, #0]
 800b86a:	187b      	adds	r3, r7, r1
 800b86c:	3201      	adds	r2, #1
 800b86e:	801a      	strh	r2, [r3, #0]
 800b870:	2316      	movs	r3, #22
 800b872:	18fa      	adds	r2, r7, r3
 800b874:	2310      	movs	r3, #16
 800b876:	18fb      	adds	r3, r7, r3
 800b878:	8812      	ldrh	r2, [r2, #0]
 800b87a:	881b      	ldrh	r3, [r3, #0]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d3cc      	bcc.n	800b81a <EPD_1IN54_V2_DisplayPart+0x2c>
        }
    }

    EPD_1IN54_V2_TurnOnDisplayPart();
 800b880:	f7ff fd70 	bl	800b364 <EPD_1IN54_V2_TurnOnDisplayPart>
}
 800b884:	46c0      	nop			@ (mov r8, r8)
 800b886:	46bd      	mov	sp, r7
 800b888:	b007      	add	sp, #28
 800b88a:	bd90      	pop	{r4, r7, pc}

0800b88c <EPD_1IN54_V2_Sleep>:
/******************************************************************************
function :	Enter sleep mode
parameter:
******************************************************************************/
void EPD_1IN54_V2_Sleep(void)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_SendCommand(0x10); // enter deep sleep
 800b890:	2010      	movs	r0, #16
 800b892:	f7ff fcf5 	bl	800b280 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x01);
 800b896:	2001      	movs	r0, #1
 800b898:	f7ff fd10 	bl	800b2bc <EPD_1IN54_V2_SendData>
    //    DEV_Delay_ms(100);
}
 800b89c:	46c0      	nop			@ (mov r8, r8)
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
	...

0800b8a4 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 800b8a4:	b5b0      	push	{r4, r5, r7, lr}
 800b8a6:	b084      	sub	sp, #16
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	60f8      	str	r0, [r7, #12]
 800b8ac:	000c      	movs	r4, r1
 800b8ae:	0010      	movs	r0, r2
 800b8b0:	0019      	movs	r1, r3
 800b8b2:	250a      	movs	r5, #10
 800b8b4:	197b      	adds	r3, r7, r5
 800b8b6:	1c22      	adds	r2, r4, #0
 800b8b8:	801a      	strh	r2, [r3, #0]
 800b8ba:	2408      	movs	r4, #8
 800b8bc:	193b      	adds	r3, r7, r4
 800b8be:	1c02      	adds	r2, r0, #0
 800b8c0:	801a      	strh	r2, [r3, #0]
 800b8c2:	1dbb      	adds	r3, r7, #6
 800b8c4:	1c0a      	adds	r2, r1, #0
 800b8c6:	801a      	strh	r2, [r3, #0]
    Paint.Image = NULL;
 800b8c8:	4b2c      	ldr	r3, [pc, #176]	@ (800b97c <Paint_NewImage+0xd8>)
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 800b8ce:	4b2b      	ldr	r3, [pc, #172]	@ (800b97c <Paint_NewImage+0xd8>)
 800b8d0:	68fa      	ldr	r2, [r7, #12]
 800b8d2:	601a      	str	r2, [r3, #0]

    Paint.WidthMemory = Width;
 800b8d4:	4b29      	ldr	r3, [pc, #164]	@ (800b97c <Paint_NewImage+0xd8>)
 800b8d6:	0029      	movs	r1, r5
 800b8d8:	187a      	adds	r2, r7, r1
 800b8da:	8812      	ldrh	r2, [r2, #0]
 800b8dc:	811a      	strh	r2, [r3, #8]
    Paint.HeightMemory = Height;
 800b8de:	4b27      	ldr	r3, [pc, #156]	@ (800b97c <Paint_NewImage+0xd8>)
 800b8e0:	193a      	adds	r2, r7, r4
 800b8e2:	8812      	ldrh	r2, [r2, #0]
 800b8e4:	815a      	strh	r2, [r3, #10]
    Paint.Color = Color;
 800b8e6:	4a25      	ldr	r2, [pc, #148]	@ (800b97c <Paint_NewImage+0xd8>)
 800b8e8:	2320      	movs	r3, #32
 800b8ea:	18fb      	adds	r3, r7, r3
 800b8ec:	881b      	ldrh	r3, [r3, #0]
 800b8ee:	8193      	strh	r3, [r2, #12]
    Paint.Scale = 2;
 800b8f0:	4b22      	ldr	r3, [pc, #136]	@ (800b97c <Paint_NewImage+0xd8>)
 800b8f2:	2202      	movs	r2, #2
 800b8f4:	82da      	strh	r2, [r3, #22]

    Paint.WidthByte = (Width % 8 == 0) ? (Width / 8) : (Width / 8 + 1);
 800b8f6:	187b      	adds	r3, r7, r1
 800b8f8:	881b      	ldrh	r3, [r3, #0]
 800b8fa:	2207      	movs	r2, #7
 800b8fc:	4013      	ands	r3, r2
 800b8fe:	b29b      	uxth	r3, r3
 800b900:	2b00      	cmp	r3, #0
 800b902:	d104      	bne.n	800b90e <Paint_NewImage+0x6a>
 800b904:	187b      	adds	r3, r7, r1
 800b906:	881b      	ldrh	r3, [r3, #0]
 800b908:	08db      	lsrs	r3, r3, #3
 800b90a:	b29b      	uxth	r3, r3
 800b90c:	e006      	b.n	800b91c <Paint_NewImage+0x78>
 800b90e:	230a      	movs	r3, #10
 800b910:	18fb      	adds	r3, r7, r3
 800b912:	881b      	ldrh	r3, [r3, #0]
 800b914:	08db      	lsrs	r3, r3, #3
 800b916:	b29b      	uxth	r3, r3
 800b918:	3301      	adds	r3, #1
 800b91a:	b29b      	uxth	r3, r3
 800b91c:	4a17      	ldr	r2, [pc, #92]	@ (800b97c <Paint_NewImage+0xd8>)
 800b91e:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;
 800b920:	4b16      	ldr	r3, [pc, #88]	@ (800b97c <Paint_NewImage+0xd8>)
 800b922:	2208      	movs	r2, #8
 800b924:	18ba      	adds	r2, r7, r2
 800b926:	8812      	ldrh	r2, [r2, #0]
 800b928:	829a      	strh	r2, [r3, #20]
    //    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
    //    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);

    Paint.Rotate = Rotate;
 800b92a:	4b14      	ldr	r3, [pc, #80]	@ (800b97c <Paint_NewImage+0xd8>)
 800b92c:	1dba      	adds	r2, r7, #6
 800b92e:	8812      	ldrh	r2, [r2, #0]
 800b930:	81da      	strh	r2, [r3, #14]
    Paint.Mirror = MIRROR_NONE;
 800b932:	4b12      	ldr	r3, [pc, #72]	@ (800b97c <Paint_NewImage+0xd8>)
 800b934:	2200      	movs	r2, #0
 800b936:	821a      	strh	r2, [r3, #16]

    if (Rotate == ROTATE_0 || Rotate == ROTATE_180)
 800b938:	1dbb      	adds	r3, r7, #6
 800b93a:	881b      	ldrh	r3, [r3, #0]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d003      	beq.n	800b948 <Paint_NewImage+0xa4>
 800b940:	1dbb      	adds	r3, r7, #6
 800b942:	881b      	ldrh	r3, [r3, #0]
 800b944:	2bb4      	cmp	r3, #180	@ 0xb4
 800b946:	d10a      	bne.n	800b95e <Paint_NewImage+0xba>
    {
        Paint.Width = Width;
 800b948:	4b0c      	ldr	r3, [pc, #48]	@ (800b97c <Paint_NewImage+0xd8>)
 800b94a:	220a      	movs	r2, #10
 800b94c:	18ba      	adds	r2, r7, r2
 800b94e:	8812      	ldrh	r2, [r2, #0]
 800b950:	809a      	strh	r2, [r3, #4]
        Paint.Height = Height;
 800b952:	4b0a      	ldr	r3, [pc, #40]	@ (800b97c <Paint_NewImage+0xd8>)
 800b954:	2208      	movs	r2, #8
 800b956:	18ba      	adds	r2, r7, r2
 800b958:	8812      	ldrh	r2, [r2, #0]
 800b95a:	80da      	strh	r2, [r3, #6]
 800b95c:	e00a      	b.n	800b974 <Paint_NewImage+0xd0>
    }
    else
    {
        Paint.Width = Height;
 800b95e:	4b07      	ldr	r3, [pc, #28]	@ (800b97c <Paint_NewImage+0xd8>)
 800b960:	2208      	movs	r2, #8
 800b962:	18ba      	adds	r2, r7, r2
 800b964:	8812      	ldrh	r2, [r2, #0]
 800b966:	809a      	strh	r2, [r3, #4]
        Paint.Height = Width;
 800b968:	4b04      	ldr	r3, [pc, #16]	@ (800b97c <Paint_NewImage+0xd8>)
 800b96a:	220a      	movs	r2, #10
 800b96c:	18ba      	adds	r2, r7, r2
 800b96e:	8812      	ldrh	r2, [r2, #0]
 800b970:	80da      	strh	r2, [r3, #6]
    }
}
 800b972:	46c0      	nop			@ (mov r8, r8)
 800b974:	46c0      	nop			@ (mov r8, r8)
 800b976:	46bd      	mov	sp, r7
 800b978:	b004      	add	sp, #16
 800b97a:	bdb0      	pop	{r4, r5, r7, pc}
 800b97c:	200005b0 	.word	0x200005b0

0800b980 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b082      	sub	sp, #8
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 800b988:	4b03      	ldr	r3, [pc, #12]	@ (800b998 <Paint_SelectImage+0x18>)
 800b98a:	687a      	ldr	r2, [r7, #4]
 800b98c:	601a      	str	r2, [r3, #0]
}
 800b98e:	46c0      	nop			@ (mov r8, r8)
 800b990:	46bd      	mov	sp, r7
 800b992:	b002      	add	sp, #8
 800b994:	bd80      	pop	{r7, pc}
 800b996:	46c0      	nop			@ (mov r8, r8)
 800b998:	200005b0 	.word	0x200005b0

0800b99c <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 800b99c:	b590      	push	{r4, r7, lr}
 800b99e:	b08b      	sub	sp, #44	@ 0x2c
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	0004      	movs	r4, r0
 800b9a4:	0008      	movs	r0, r1
 800b9a6:	0011      	movs	r1, r2
 800b9a8:	1dbb      	adds	r3, r7, #6
 800b9aa:	1c22      	adds	r2, r4, #0
 800b9ac:	801a      	strh	r2, [r3, #0]
 800b9ae:	1d3b      	adds	r3, r7, #4
 800b9b0:	1c02      	adds	r2, r0, #0
 800b9b2:	801a      	strh	r2, [r3, #0]
 800b9b4:	1cbb      	adds	r3, r7, #2
 800b9b6:	1c0a      	adds	r2, r1, #0
 800b9b8:	801a      	strh	r2, [r3, #0]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800b9ba:	4bc4      	ldr	r3, [pc, #784]	@ (800bccc <Paint_SetPixel+0x330>)
 800b9bc:	889b      	ldrh	r3, [r3, #4]
 800b9be:	1dba      	adds	r2, r7, #6
 800b9c0:	8812      	ldrh	r2, [r2, #0]
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d900      	bls.n	800b9c8 <Paint_SetPixel+0x2c>
 800b9c6:	e17b      	b.n	800bcc0 <Paint_SetPixel+0x324>
 800b9c8:	4bc0      	ldr	r3, [pc, #768]	@ (800bccc <Paint_SetPixel+0x330>)
 800b9ca:	88db      	ldrh	r3, [r3, #6]
 800b9cc:	1d3a      	adds	r2, r7, #4
 800b9ce:	8812      	ldrh	r2, [r2, #0]
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	d900      	bls.n	800b9d6 <Paint_SetPixel+0x3a>
 800b9d4:	e174      	b.n	800bcc0 <Paint_SetPixel+0x324>
        DE_BUG("Exceeding display boundaries\r\n");
        return;
    }
    UWORD X, Y;

    switch (Paint.Rotate)
 800b9d6:	4bbd      	ldr	r3, [pc, #756]	@ (800bccc <Paint_SetPixel+0x330>)
 800b9d8:	89db      	ldrh	r3, [r3, #14]
 800b9da:	2287      	movs	r2, #135	@ 0x87
 800b9dc:	0052      	lsls	r2, r2, #1
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d03d      	beq.n	800ba5e <Paint_SetPixel+0xc2>
 800b9e2:	2287      	movs	r2, #135	@ 0x87
 800b9e4:	0052      	lsls	r2, r2, #1
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	dd00      	ble.n	800b9ec <Paint_SetPixel+0x50>
 800b9ea:	e16b      	b.n	800bcc4 <Paint_SetPixel+0x328>
 800b9ec:	2bb4      	cmp	r3, #180	@ 0xb4
 800b9ee:	d021      	beq.n	800ba34 <Paint_SetPixel+0x98>
 800b9f0:	dd00      	ble.n	800b9f4 <Paint_SetPixel+0x58>
 800b9f2:	e167      	b.n	800bcc4 <Paint_SetPixel+0x328>
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d002      	beq.n	800b9fe <Paint_SetPixel+0x62>
 800b9f8:	2b5a      	cmp	r3, #90	@ 0x5a
 800b9fa:	d00b      	beq.n	800ba14 <Paint_SetPixel+0x78>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 800b9fc:	e162      	b.n	800bcc4 <Paint_SetPixel+0x328>
        X = Xpoint;
 800b9fe:	2326      	movs	r3, #38	@ 0x26
 800ba00:	18fb      	adds	r3, r7, r3
 800ba02:	1dba      	adds	r2, r7, #6
 800ba04:	8812      	ldrh	r2, [r2, #0]
 800ba06:	801a      	strh	r2, [r3, #0]
        Y = Ypoint;
 800ba08:	2324      	movs	r3, #36	@ 0x24
 800ba0a:	18fb      	adds	r3, r7, r3
 800ba0c:	1d3a      	adds	r2, r7, #4
 800ba0e:	8812      	ldrh	r2, [r2, #0]
 800ba10:	801a      	strh	r2, [r3, #0]
        break;
 800ba12:	e034      	b.n	800ba7e <Paint_SetPixel+0xe2>
        X = Paint.WidthMemory - Ypoint - 1;
 800ba14:	4bad      	ldr	r3, [pc, #692]	@ (800bccc <Paint_SetPixel+0x330>)
 800ba16:	891a      	ldrh	r2, [r3, #8]
 800ba18:	1d3b      	adds	r3, r7, #4
 800ba1a:	881b      	ldrh	r3, [r3, #0]
 800ba1c:	1ad3      	subs	r3, r2, r3
 800ba1e:	b29a      	uxth	r2, r3
 800ba20:	2326      	movs	r3, #38	@ 0x26
 800ba22:	18fb      	adds	r3, r7, r3
 800ba24:	3a01      	subs	r2, #1
 800ba26:	801a      	strh	r2, [r3, #0]
        Y = Xpoint;
 800ba28:	2324      	movs	r3, #36	@ 0x24
 800ba2a:	18fb      	adds	r3, r7, r3
 800ba2c:	1dba      	adds	r2, r7, #6
 800ba2e:	8812      	ldrh	r2, [r2, #0]
 800ba30:	801a      	strh	r2, [r3, #0]
        break;
 800ba32:	e024      	b.n	800ba7e <Paint_SetPixel+0xe2>
        X = Paint.WidthMemory - Xpoint - 1;
 800ba34:	4ba5      	ldr	r3, [pc, #660]	@ (800bccc <Paint_SetPixel+0x330>)
 800ba36:	891a      	ldrh	r2, [r3, #8]
 800ba38:	1dbb      	adds	r3, r7, #6
 800ba3a:	881b      	ldrh	r3, [r3, #0]
 800ba3c:	1ad3      	subs	r3, r2, r3
 800ba3e:	b29a      	uxth	r2, r3
 800ba40:	2326      	movs	r3, #38	@ 0x26
 800ba42:	18fb      	adds	r3, r7, r3
 800ba44:	3a01      	subs	r2, #1
 800ba46:	801a      	strh	r2, [r3, #0]
        Y = Paint.HeightMemory - Ypoint - 1;
 800ba48:	4ba0      	ldr	r3, [pc, #640]	@ (800bccc <Paint_SetPixel+0x330>)
 800ba4a:	895a      	ldrh	r2, [r3, #10]
 800ba4c:	1d3b      	adds	r3, r7, #4
 800ba4e:	881b      	ldrh	r3, [r3, #0]
 800ba50:	1ad3      	subs	r3, r2, r3
 800ba52:	b29a      	uxth	r2, r3
 800ba54:	2324      	movs	r3, #36	@ 0x24
 800ba56:	18fb      	adds	r3, r7, r3
 800ba58:	3a01      	subs	r2, #1
 800ba5a:	801a      	strh	r2, [r3, #0]
        break;
 800ba5c:	e00f      	b.n	800ba7e <Paint_SetPixel+0xe2>
        X = Ypoint;
 800ba5e:	2326      	movs	r3, #38	@ 0x26
 800ba60:	18fb      	adds	r3, r7, r3
 800ba62:	1d3a      	adds	r2, r7, #4
 800ba64:	8812      	ldrh	r2, [r2, #0]
 800ba66:	801a      	strh	r2, [r3, #0]
        Y = Paint.HeightMemory - Xpoint - 1;
 800ba68:	4b98      	ldr	r3, [pc, #608]	@ (800bccc <Paint_SetPixel+0x330>)
 800ba6a:	895a      	ldrh	r2, [r3, #10]
 800ba6c:	1dbb      	adds	r3, r7, #6
 800ba6e:	881b      	ldrh	r3, [r3, #0]
 800ba70:	1ad3      	subs	r3, r2, r3
 800ba72:	b29a      	uxth	r2, r3
 800ba74:	2324      	movs	r3, #36	@ 0x24
 800ba76:	18fb      	adds	r3, r7, r3
 800ba78:	3a01      	subs	r2, #1
 800ba7a:	801a      	strh	r2, [r3, #0]
        break;
 800ba7c:	46c0      	nop			@ (mov r8, r8)
    }

    switch (Paint.Mirror)
 800ba7e:	4b93      	ldr	r3, [pc, #588]	@ (800bccc <Paint_SetPixel+0x330>)
 800ba80:	8a1b      	ldrh	r3, [r3, #16]
 800ba82:	2b03      	cmp	r3, #3
 800ba84:	d020      	beq.n	800bac8 <Paint_SetPixel+0x12c>
 800ba86:	dd00      	ble.n	800ba8a <Paint_SetPixel+0xee>
 800ba88:	e11e      	b.n	800bcc8 <Paint_SetPixel+0x32c>
 800ba8a:	2b02      	cmp	r3, #2
 800ba8c:	d011      	beq.n	800bab2 <Paint_SetPixel+0x116>
 800ba8e:	dd00      	ble.n	800ba92 <Paint_SetPixel+0xf6>
 800ba90:	e11a      	b.n	800bcc8 <Paint_SetPixel+0x32c>
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d02d      	beq.n	800baf2 <Paint_SetPixel+0x156>
 800ba96:	2b01      	cmp	r3, #1
 800ba98:	d000      	beq.n	800ba9c <Paint_SetPixel+0x100>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
        Y = Paint.HeightMemory - Y - 1;
        break;
    default:
        return;
 800ba9a:	e115      	b.n	800bcc8 <Paint_SetPixel+0x32c>
        X = Paint.WidthMemory - X - 1;
 800ba9c:	4b8b      	ldr	r3, [pc, #556]	@ (800bccc <Paint_SetPixel+0x330>)
 800ba9e:	891a      	ldrh	r2, [r3, #8]
 800baa0:	2126      	movs	r1, #38	@ 0x26
 800baa2:	187b      	adds	r3, r7, r1
 800baa4:	881b      	ldrh	r3, [r3, #0]
 800baa6:	1ad3      	subs	r3, r2, r3
 800baa8:	b29a      	uxth	r2, r3
 800baaa:	187b      	adds	r3, r7, r1
 800baac:	3a01      	subs	r2, #1
 800baae:	801a      	strh	r2, [r3, #0]
        break;
 800bab0:	e020      	b.n	800baf4 <Paint_SetPixel+0x158>
        Y = Paint.HeightMemory - Y - 1;
 800bab2:	4b86      	ldr	r3, [pc, #536]	@ (800bccc <Paint_SetPixel+0x330>)
 800bab4:	895a      	ldrh	r2, [r3, #10]
 800bab6:	2124      	movs	r1, #36	@ 0x24
 800bab8:	187b      	adds	r3, r7, r1
 800baba:	881b      	ldrh	r3, [r3, #0]
 800babc:	1ad3      	subs	r3, r2, r3
 800babe:	b29a      	uxth	r2, r3
 800bac0:	187b      	adds	r3, r7, r1
 800bac2:	3a01      	subs	r2, #1
 800bac4:	801a      	strh	r2, [r3, #0]
        break;
 800bac6:	e015      	b.n	800baf4 <Paint_SetPixel+0x158>
        X = Paint.WidthMemory - X - 1;
 800bac8:	4b80      	ldr	r3, [pc, #512]	@ (800bccc <Paint_SetPixel+0x330>)
 800baca:	891a      	ldrh	r2, [r3, #8]
 800bacc:	2126      	movs	r1, #38	@ 0x26
 800bace:	187b      	adds	r3, r7, r1
 800bad0:	881b      	ldrh	r3, [r3, #0]
 800bad2:	1ad3      	subs	r3, r2, r3
 800bad4:	b29a      	uxth	r2, r3
 800bad6:	187b      	adds	r3, r7, r1
 800bad8:	3a01      	subs	r2, #1
 800bada:	801a      	strh	r2, [r3, #0]
        Y = Paint.HeightMemory - Y - 1;
 800badc:	4b7b      	ldr	r3, [pc, #492]	@ (800bccc <Paint_SetPixel+0x330>)
 800bade:	895a      	ldrh	r2, [r3, #10]
 800bae0:	2124      	movs	r1, #36	@ 0x24
 800bae2:	187b      	adds	r3, r7, r1
 800bae4:	881b      	ldrh	r3, [r3, #0]
 800bae6:	1ad3      	subs	r3, r2, r3
 800bae8:	b29a      	uxth	r2, r3
 800baea:	187b      	adds	r3, r7, r1
 800baec:	3a01      	subs	r2, #1
 800baee:	801a      	strh	r2, [r3, #0]
        break;
 800baf0:	e000      	b.n	800baf4 <Paint_SetPixel+0x158>
        break;
 800baf2:	46c0      	nop			@ (mov r8, r8)
    }

    if (X > Paint.WidthMemory || Y > Paint.HeightMemory)
 800baf4:	4b75      	ldr	r3, [pc, #468]	@ (800bccc <Paint_SetPixel+0x330>)
 800baf6:	891b      	ldrh	r3, [r3, #8]
 800baf8:	2026      	movs	r0, #38	@ 0x26
 800bafa:	183a      	adds	r2, r7, r0
 800bafc:	8812      	ldrh	r2, [r2, #0]
 800bafe:	429a      	cmp	r2, r3
 800bb00:	d900      	bls.n	800bb04 <Paint_SetPixel+0x168>
 800bb02:	e0e5      	b.n	800bcd0 <Paint_SetPixel+0x334>
 800bb04:	4b71      	ldr	r3, [pc, #452]	@ (800bccc <Paint_SetPixel+0x330>)
 800bb06:	895b      	ldrh	r3, [r3, #10]
 800bb08:	2424      	movs	r4, #36	@ 0x24
 800bb0a:	193a      	adds	r2, r7, r4
 800bb0c:	8812      	ldrh	r2, [r2, #0]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d900      	bls.n	800bb14 <Paint_SetPixel+0x178>
 800bb12:	e0dd      	b.n	800bcd0 <Paint_SetPixel+0x334>
    {
        DE_BUG("Exceeding display boundaries\r\n");
        return;
    }

    if (Paint.Scale == 2)
 800bb14:	4b6d      	ldr	r3, [pc, #436]	@ (800bccc <Paint_SetPixel+0x330>)
 800bb16:	8adb      	ldrh	r3, [r3, #22]
 800bb18:	2b02      	cmp	r3, #2
 800bb1a:	d143      	bne.n	800bba4 <Paint_SetPixel+0x208>
    {
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 800bb1c:	183b      	adds	r3, r7, r0
 800bb1e:	881b      	ldrh	r3, [r3, #0]
 800bb20:	08db      	lsrs	r3, r3, #3
 800bb22:	b29b      	uxth	r3, r3
 800bb24:	0019      	movs	r1, r3
 800bb26:	193b      	adds	r3, r7, r4
 800bb28:	881b      	ldrh	r3, [r3, #0]
 800bb2a:	4a68      	ldr	r2, [pc, #416]	@ (800bccc <Paint_SetPixel+0x330>)
 800bb2c:	8a52      	ldrh	r2, [r2, #18]
 800bb2e:	4353      	muls	r3, r2
 800bb30:	18cb      	adds	r3, r1, r3
 800bb32:	613b      	str	r3, [r7, #16]
        UBYTE Rdata = Paint.Image[Addr];
 800bb34:	4b65      	ldr	r3, [pc, #404]	@ (800bccc <Paint_SetPixel+0x330>)
 800bb36:	681a      	ldr	r2, [r3, #0]
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	18d2      	adds	r2, r2, r3
 800bb3c:	210f      	movs	r1, #15
 800bb3e:	187b      	adds	r3, r7, r1
 800bb40:	7812      	ldrb	r2, [r2, #0]
 800bb42:	701a      	strb	r2, [r3, #0]
        if (Color == BLACK)
 800bb44:	1cbb      	adds	r3, r7, #2
 800bb46:	881b      	ldrh	r3, [r3, #0]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d115      	bne.n	800bb78 <Paint_SetPixel+0x1dc>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 800bb4c:	183b      	adds	r3, r7, r0
 800bb4e:	881b      	ldrh	r3, [r3, #0]
 800bb50:	2207      	movs	r2, #7
 800bb52:	4013      	ands	r3, r2
 800bb54:	2280      	movs	r2, #128	@ 0x80
 800bb56:	411a      	asrs	r2, r3
 800bb58:	0013      	movs	r3, r2
 800bb5a:	b25b      	sxtb	r3, r3
 800bb5c:	43db      	mvns	r3, r3
 800bb5e:	b25b      	sxtb	r3, r3
 800bb60:	187a      	adds	r2, r7, r1
 800bb62:	7812      	ldrb	r2, [r2, #0]
 800bb64:	b252      	sxtb	r2, r2
 800bb66:	4013      	ands	r3, r2
 800bb68:	b259      	sxtb	r1, r3
 800bb6a:	4b58      	ldr	r3, [pc, #352]	@ (800bccc <Paint_SetPixel+0x330>)
 800bb6c:	681a      	ldr	r2, [r3, #0]
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	18d3      	adds	r3, r2, r3
 800bb72:	b2ca      	uxtb	r2, r1
 800bb74:	701a      	strb	r2, [r3, #0]
 800bb76:	e0ac      	b.n	800bcd2 <Paint_SetPixel+0x336>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 800bb78:	2326      	movs	r3, #38	@ 0x26
 800bb7a:	18fb      	adds	r3, r7, r3
 800bb7c:	881b      	ldrh	r3, [r3, #0]
 800bb7e:	2207      	movs	r2, #7
 800bb80:	4013      	ands	r3, r2
 800bb82:	2280      	movs	r2, #128	@ 0x80
 800bb84:	411a      	asrs	r2, r3
 800bb86:	0013      	movs	r3, r2
 800bb88:	b25a      	sxtb	r2, r3
 800bb8a:	230f      	movs	r3, #15
 800bb8c:	18fb      	adds	r3, r7, r3
 800bb8e:	781b      	ldrb	r3, [r3, #0]
 800bb90:	b25b      	sxtb	r3, r3
 800bb92:	4313      	orrs	r3, r2
 800bb94:	b259      	sxtb	r1, r3
 800bb96:	4b4d      	ldr	r3, [pc, #308]	@ (800bccc <Paint_SetPixel+0x330>)
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	18d3      	adds	r3, r2, r3
 800bb9e:	b2ca      	uxtb	r2, r1
 800bba0:	701a      	strb	r2, [r3, #0]
 800bba2:	e096      	b.n	800bcd2 <Paint_SetPixel+0x336>
    }
    else if (Paint.Scale == 4)
 800bba4:	4b49      	ldr	r3, [pc, #292]	@ (800bccc <Paint_SetPixel+0x330>)
 800bba6:	8adb      	ldrh	r3, [r3, #22]
 800bba8:	2b04      	cmp	r3, #4
 800bbaa:	d145      	bne.n	800bc38 <Paint_SetPixel+0x29c>
    {
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 800bbac:	2426      	movs	r4, #38	@ 0x26
 800bbae:	193b      	adds	r3, r7, r4
 800bbb0:	881b      	ldrh	r3, [r3, #0]
 800bbb2:	089b      	lsrs	r3, r3, #2
 800bbb4:	b29b      	uxth	r3, r3
 800bbb6:	0019      	movs	r1, r3
 800bbb8:	2324      	movs	r3, #36	@ 0x24
 800bbba:	18fb      	adds	r3, r7, r3
 800bbbc:	881b      	ldrh	r3, [r3, #0]
 800bbbe:	4a43      	ldr	r2, [pc, #268]	@ (800bccc <Paint_SetPixel+0x330>)
 800bbc0:	8a52      	ldrh	r2, [r2, #18]
 800bbc2:	4353      	muls	r3, r2
 800bbc4:	18cb      	adds	r3, r1, r3
 800bbc6:	61bb      	str	r3, [r7, #24]
        Color = Color % 4; // Guaranteed color scale is 4  --- 0~3
 800bbc8:	1cbb      	adds	r3, r7, #2
 800bbca:	1cba      	adds	r2, r7, #2
 800bbcc:	8812      	ldrh	r2, [r2, #0]
 800bbce:	2103      	movs	r1, #3
 800bbd0:	400a      	ands	r2, r1
 800bbd2:	801a      	strh	r2, [r3, #0]
        UBYTE Rdata = Paint.Image[Addr];
 800bbd4:	4b3d      	ldr	r3, [pc, #244]	@ (800bccc <Paint_SetPixel+0x330>)
 800bbd6:	681a      	ldr	r2, [r3, #0]
 800bbd8:	69bb      	ldr	r3, [r7, #24]
 800bbda:	18d2      	adds	r2, r2, r3
 800bbdc:	2017      	movs	r0, #23
 800bbde:	183b      	adds	r3, r7, r0
 800bbe0:	7812      	ldrb	r2, [r2, #0]
 800bbe2:	701a      	strb	r2, [r3, #0]

        Rdata = Rdata & (~(0xC0 >> ((X % 4) * 2)));
 800bbe4:	0021      	movs	r1, r4
 800bbe6:	187b      	adds	r3, r7, r1
 800bbe8:	881b      	ldrh	r3, [r3, #0]
 800bbea:	2203      	movs	r2, #3
 800bbec:	4013      	ands	r3, r2
 800bbee:	005b      	lsls	r3, r3, #1
 800bbf0:	22c0      	movs	r2, #192	@ 0xc0
 800bbf2:	411a      	asrs	r2, r3
 800bbf4:	0013      	movs	r3, r2
 800bbf6:	b25b      	sxtb	r3, r3
 800bbf8:	43db      	mvns	r3, r3
 800bbfa:	b25b      	sxtb	r3, r3
 800bbfc:	183a      	adds	r2, r7, r0
 800bbfe:	7812      	ldrb	r2, [r2, #0]
 800bc00:	b252      	sxtb	r2, r2
 800bc02:	4013      	ands	r3, r2
 800bc04:	b25a      	sxtb	r2, r3
 800bc06:	183b      	adds	r3, r7, r0
 800bc08:	701a      	strb	r2, [r3, #0]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4) * 2));
 800bc0a:	1cbb      	adds	r3, r7, #2
 800bc0c:	881b      	ldrh	r3, [r3, #0]
 800bc0e:	019a      	lsls	r2, r3, #6
 800bc10:	187b      	adds	r3, r7, r1
 800bc12:	881b      	ldrh	r3, [r3, #0]
 800bc14:	2103      	movs	r1, #3
 800bc16:	400b      	ands	r3, r1
 800bc18:	005b      	lsls	r3, r3, #1
 800bc1a:	411a      	asrs	r2, r3
 800bc1c:	0013      	movs	r3, r2
 800bc1e:	b25a      	sxtb	r2, r3
 800bc20:	183b      	adds	r3, r7, r0
 800bc22:	781b      	ldrb	r3, [r3, #0]
 800bc24:	b25b      	sxtb	r3, r3
 800bc26:	4313      	orrs	r3, r2
 800bc28:	b259      	sxtb	r1, r3
 800bc2a:	4b28      	ldr	r3, [pc, #160]	@ (800bccc <Paint_SetPixel+0x330>)
 800bc2c:	681a      	ldr	r2, [r3, #0]
 800bc2e:	69bb      	ldr	r3, [r7, #24]
 800bc30:	18d3      	adds	r3, r2, r3
 800bc32:	b2ca      	uxtb	r2, r1
 800bc34:	701a      	strb	r2, [r3, #0]
 800bc36:	e04c      	b.n	800bcd2 <Paint_SetPixel+0x336>
    }
    else if (Paint.Scale == 7)
 800bc38:	4b24      	ldr	r3, [pc, #144]	@ (800bccc <Paint_SetPixel+0x330>)
 800bc3a:	8adb      	ldrh	r3, [r3, #22]
 800bc3c:	2b07      	cmp	r3, #7
 800bc3e:	d148      	bne.n	800bcd2 <Paint_SetPixel+0x336>
    {
        UDOUBLE Addr = X / 2 + Y * Paint.WidthByte;
 800bc40:	2426      	movs	r4, #38	@ 0x26
 800bc42:	193b      	adds	r3, r7, r4
 800bc44:	881b      	ldrh	r3, [r3, #0]
 800bc46:	085b      	lsrs	r3, r3, #1
 800bc48:	b29b      	uxth	r3, r3
 800bc4a:	0019      	movs	r1, r3
 800bc4c:	2324      	movs	r3, #36	@ 0x24
 800bc4e:	18fb      	adds	r3, r7, r3
 800bc50:	881b      	ldrh	r3, [r3, #0]
 800bc52:	4a1e      	ldr	r2, [pc, #120]	@ (800bccc <Paint_SetPixel+0x330>)
 800bc54:	8a52      	ldrh	r2, [r2, #18]
 800bc56:	4353      	muls	r3, r2
 800bc58:	18cb      	adds	r3, r1, r3
 800bc5a:	623b      	str	r3, [r7, #32]
        UBYTE Rdata = Paint.Image[Addr];
 800bc5c:	4b1b      	ldr	r3, [pc, #108]	@ (800bccc <Paint_SetPixel+0x330>)
 800bc5e:	681a      	ldr	r2, [r3, #0]
 800bc60:	6a3b      	ldr	r3, [r7, #32]
 800bc62:	18d2      	adds	r2, r2, r3
 800bc64:	201f      	movs	r0, #31
 800bc66:	183b      	adds	r3, r7, r0
 800bc68:	7812      	ldrb	r2, [r2, #0]
 800bc6a:	701a      	strb	r2, [r3, #0]
        Rdata = Rdata & (~(0xF0 >> ((X % 2) * 4))); // Clear first, then set value
 800bc6c:	0021      	movs	r1, r4
 800bc6e:	187b      	adds	r3, r7, r1
 800bc70:	881b      	ldrh	r3, [r3, #0]
 800bc72:	2201      	movs	r2, #1
 800bc74:	4013      	ands	r3, r2
 800bc76:	009b      	lsls	r3, r3, #2
 800bc78:	22f0      	movs	r2, #240	@ 0xf0
 800bc7a:	411a      	asrs	r2, r3
 800bc7c:	0013      	movs	r3, r2
 800bc7e:	b25b      	sxtb	r3, r3
 800bc80:	43db      	mvns	r3, r3
 800bc82:	b25b      	sxtb	r3, r3
 800bc84:	183a      	adds	r2, r7, r0
 800bc86:	7812      	ldrb	r2, [r2, #0]
 800bc88:	b252      	sxtb	r2, r2
 800bc8a:	4013      	ands	r3, r2
 800bc8c:	b25a      	sxtb	r2, r3
 800bc8e:	183b      	adds	r3, r7, r0
 800bc90:	701a      	strb	r2, [r3, #0]
        Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2) * 4));
 800bc92:	1cbb      	adds	r3, r7, #2
 800bc94:	881b      	ldrh	r3, [r3, #0]
 800bc96:	011a      	lsls	r2, r3, #4
 800bc98:	187b      	adds	r3, r7, r1
 800bc9a:	881b      	ldrh	r3, [r3, #0]
 800bc9c:	2101      	movs	r1, #1
 800bc9e:	400b      	ands	r3, r1
 800bca0:	009b      	lsls	r3, r3, #2
 800bca2:	411a      	asrs	r2, r3
 800bca4:	0013      	movs	r3, r2
 800bca6:	b25a      	sxtb	r2, r3
 800bca8:	183b      	adds	r3, r7, r0
 800bcaa:	781b      	ldrb	r3, [r3, #0]
 800bcac:	b25b      	sxtb	r3, r3
 800bcae:	4313      	orrs	r3, r2
 800bcb0:	b259      	sxtb	r1, r3
 800bcb2:	4b06      	ldr	r3, [pc, #24]	@ (800bccc <Paint_SetPixel+0x330>)
 800bcb4:	681a      	ldr	r2, [r3, #0]
 800bcb6:	6a3b      	ldr	r3, [r7, #32]
 800bcb8:	18d3      	adds	r3, r2, r3
 800bcba:	b2ca      	uxtb	r2, r1
 800bcbc:	701a      	strb	r2, [r3, #0]
 800bcbe:	e008      	b.n	800bcd2 <Paint_SetPixel+0x336>
        return;
 800bcc0:	46c0      	nop			@ (mov r8, r8)
 800bcc2:	e006      	b.n	800bcd2 <Paint_SetPixel+0x336>
        return;
 800bcc4:	46c0      	nop			@ (mov r8, r8)
 800bcc6:	e004      	b.n	800bcd2 <Paint_SetPixel+0x336>
        return;
 800bcc8:	46c0      	nop			@ (mov r8, r8)
 800bcca:	e002      	b.n	800bcd2 <Paint_SetPixel+0x336>
 800bccc:	200005b0 	.word	0x200005b0
        return;
 800bcd0:	46c0      	nop			@ (mov r8, r8)
        // printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
    }
}
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	b00b      	add	sp, #44	@ 0x2c
 800bcd6:	bd90      	pop	{r4, r7, pc}

0800bcd8 <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b086      	sub	sp, #24
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	0002      	movs	r2, r0
 800bce0:	1dbb      	adds	r3, r7, #6
 800bce2:	801a      	strh	r2, [r3, #0]
    if (Paint.Scale == 2 || Paint.Scale == 4)
 800bce4:	4b42      	ldr	r3, [pc, #264]	@ (800bdf0 <Paint_Clear+0x118>)
 800bce6:	8adb      	ldrh	r3, [r3, #22]
 800bce8:	2b02      	cmp	r3, #2
 800bcea:	d003      	beq.n	800bcf4 <Paint_Clear+0x1c>
 800bcec:	4b40      	ldr	r3, [pc, #256]	@ (800bdf0 <Paint_Clear+0x118>)
 800bcee:	8adb      	ldrh	r3, [r3, #22]
 800bcf0:	2b04      	cmp	r3, #4
 800bcf2:	d136      	bne.n	800bd62 <Paint_Clear+0x8a>
    {
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++)
 800bcf4:	2316      	movs	r3, #22
 800bcf6:	18fb      	adds	r3, r7, r3
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	801a      	strh	r2, [r3, #0]
 800bcfc:	e029      	b.n	800bd52 <Paint_Clear+0x7a>
        {
            for (UWORD X = 0; X < Paint.WidthByte; X++)
 800bcfe:	2314      	movs	r3, #20
 800bd00:	18fb      	adds	r3, r7, r3
 800bd02:	2200      	movs	r2, #0
 800bd04:	801a      	strh	r2, [r3, #0]
 800bd06:	e017      	b.n	800bd38 <Paint_Clear+0x60>
            { // 8 pixel =  1 byte
                UDOUBLE Addr = X + Y * Paint.WidthByte;
 800bd08:	2014      	movs	r0, #20
 800bd0a:	183b      	adds	r3, r7, r0
 800bd0c:	881a      	ldrh	r2, [r3, #0]
 800bd0e:	2316      	movs	r3, #22
 800bd10:	18fb      	adds	r3, r7, r3
 800bd12:	881b      	ldrh	r3, [r3, #0]
 800bd14:	4936      	ldr	r1, [pc, #216]	@ (800bdf0 <Paint_Clear+0x118>)
 800bd16:	8a49      	ldrh	r1, [r1, #18]
 800bd18:	434b      	muls	r3, r1
 800bd1a:	18d3      	adds	r3, r2, r3
 800bd1c:	60bb      	str	r3, [r7, #8]
                Paint.Image[Addr] = Color;
 800bd1e:	4b34      	ldr	r3, [pc, #208]	@ (800bdf0 <Paint_Clear+0x118>)
 800bd20:	681a      	ldr	r2, [r3, #0]
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	18d3      	adds	r3, r2, r3
 800bd26:	1dba      	adds	r2, r7, #6
 800bd28:	8812      	ldrh	r2, [r2, #0]
 800bd2a:	b2d2      	uxtb	r2, r2
 800bd2c:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++)
 800bd2e:	183b      	adds	r3, r7, r0
 800bd30:	881a      	ldrh	r2, [r3, #0]
 800bd32:	183b      	adds	r3, r7, r0
 800bd34:	3201      	adds	r2, #1
 800bd36:	801a      	strh	r2, [r3, #0]
 800bd38:	4b2d      	ldr	r3, [pc, #180]	@ (800bdf0 <Paint_Clear+0x118>)
 800bd3a:	8a5b      	ldrh	r3, [r3, #18]
 800bd3c:	2214      	movs	r2, #20
 800bd3e:	18ba      	adds	r2, r7, r2
 800bd40:	8812      	ldrh	r2, [r2, #0]
 800bd42:	429a      	cmp	r2, r3
 800bd44:	d3e0      	bcc.n	800bd08 <Paint_Clear+0x30>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++)
 800bd46:	2116      	movs	r1, #22
 800bd48:	187b      	adds	r3, r7, r1
 800bd4a:	881a      	ldrh	r2, [r3, #0]
 800bd4c:	187b      	adds	r3, r7, r1
 800bd4e:	3201      	adds	r2, #1
 800bd50:	801a      	strh	r2, [r3, #0]
 800bd52:	4b27      	ldr	r3, [pc, #156]	@ (800bdf0 <Paint_Clear+0x118>)
 800bd54:	8a9b      	ldrh	r3, [r3, #20]
 800bd56:	2216      	movs	r2, #22
 800bd58:	18ba      	adds	r2, r7, r2
 800bd5a:	8812      	ldrh	r2, [r2, #0]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d3ce      	bcc.n	800bcfe <Paint_Clear+0x26>
 800bd60:	e041      	b.n	800bde6 <Paint_Clear+0x10e>
            }
        }
    }
    else if (Paint.Scale == 7)
 800bd62:	4b23      	ldr	r3, [pc, #140]	@ (800bdf0 <Paint_Clear+0x118>)
 800bd64:	8adb      	ldrh	r3, [r3, #22]
 800bd66:	2b07      	cmp	r3, #7
 800bd68:	d13d      	bne.n	800bde6 <Paint_Clear+0x10e>
    {
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++)
 800bd6a:	2312      	movs	r3, #18
 800bd6c:	18fb      	adds	r3, r7, r3
 800bd6e:	2200      	movs	r2, #0
 800bd70:	801a      	strh	r2, [r3, #0]
 800bd72:	e030      	b.n	800bdd6 <Paint_Clear+0xfe>
        {
            for (UWORD X = 0; X < Paint.WidthByte; X++)
 800bd74:	2310      	movs	r3, #16
 800bd76:	18fb      	adds	r3, r7, r3
 800bd78:	2200      	movs	r2, #0
 800bd7a:	801a      	strh	r2, [r3, #0]
 800bd7c:	e01e      	b.n	800bdbc <Paint_Clear+0xe4>
            {
                UDOUBLE Addr = X + Y * Paint.WidthByte;
 800bd7e:	2010      	movs	r0, #16
 800bd80:	183b      	adds	r3, r7, r0
 800bd82:	881a      	ldrh	r2, [r3, #0]
 800bd84:	2312      	movs	r3, #18
 800bd86:	18fb      	adds	r3, r7, r3
 800bd88:	881b      	ldrh	r3, [r3, #0]
 800bd8a:	4919      	ldr	r1, [pc, #100]	@ (800bdf0 <Paint_Clear+0x118>)
 800bd8c:	8a49      	ldrh	r1, [r1, #18]
 800bd8e:	434b      	muls	r3, r1
 800bd90:	18d3      	adds	r3, r2, r3
 800bd92:	60fb      	str	r3, [r7, #12]
                Paint.Image[Addr] = (Color << 4) | Color;
 800bd94:	1dbb      	adds	r3, r7, #6
 800bd96:	881b      	ldrh	r3, [r3, #0]
 800bd98:	011b      	lsls	r3, r3, #4
 800bd9a:	b25a      	sxtb	r2, r3
 800bd9c:	1dbb      	adds	r3, r7, #6
 800bd9e:	881b      	ldrh	r3, [r3, #0]
 800bda0:	b25b      	sxtb	r3, r3
 800bda2:	4313      	orrs	r3, r2
 800bda4:	b259      	sxtb	r1, r3
 800bda6:	4b12      	ldr	r3, [pc, #72]	@ (800bdf0 <Paint_Clear+0x118>)
 800bda8:	681a      	ldr	r2, [r3, #0]
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	18d3      	adds	r3, r2, r3
 800bdae:	b2ca      	uxtb	r2, r1
 800bdb0:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++)
 800bdb2:	183b      	adds	r3, r7, r0
 800bdb4:	881a      	ldrh	r2, [r3, #0]
 800bdb6:	183b      	adds	r3, r7, r0
 800bdb8:	3201      	adds	r2, #1
 800bdba:	801a      	strh	r2, [r3, #0]
 800bdbc:	4b0c      	ldr	r3, [pc, #48]	@ (800bdf0 <Paint_Clear+0x118>)
 800bdbe:	8a5b      	ldrh	r3, [r3, #18]
 800bdc0:	2210      	movs	r2, #16
 800bdc2:	18ba      	adds	r2, r7, r2
 800bdc4:	8812      	ldrh	r2, [r2, #0]
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d3d9      	bcc.n	800bd7e <Paint_Clear+0xa6>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++)
 800bdca:	2112      	movs	r1, #18
 800bdcc:	187b      	adds	r3, r7, r1
 800bdce:	881a      	ldrh	r2, [r3, #0]
 800bdd0:	187b      	adds	r3, r7, r1
 800bdd2:	3201      	adds	r2, #1
 800bdd4:	801a      	strh	r2, [r3, #0]
 800bdd6:	4b06      	ldr	r3, [pc, #24]	@ (800bdf0 <Paint_Clear+0x118>)
 800bdd8:	8a9b      	ldrh	r3, [r3, #20]
 800bdda:	2212      	movs	r2, #18
 800bddc:	18ba      	adds	r2, r7, r2
 800bdde:	8812      	ldrh	r2, [r2, #0]
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d3c7      	bcc.n	800bd74 <Paint_Clear+0x9c>
            }
        }
    }
}
 800bde4:	e7ff      	b.n	800bde6 <Paint_Clear+0x10e>
 800bde6:	46c0      	nop			@ (mov r8, r8)
 800bde8:	46bd      	mov	sp, r7
 800bdea:	b006      	add	sp, #24
 800bdec:	bd80      	pop	{r7, pc}
 800bdee:	46c0      	nop			@ (mov r8, r8)
 800bdf0:	200005b0 	.word	0x200005b0

0800bdf4 <Paint_ClearWindows>:
    Xend   : x end point
    Yend   : y end point
    Color  : Painted colors
******************************************************************************/
void Paint_ClearWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, UWORD Color)
{
 800bdf4:	b5b0      	push	{r4, r5, r7, lr}
 800bdf6:	b084      	sub	sp, #16
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	0005      	movs	r5, r0
 800bdfc:	000c      	movs	r4, r1
 800bdfe:	0010      	movs	r0, r2
 800be00:	0019      	movs	r1, r3
 800be02:	1dbb      	adds	r3, r7, #6
 800be04:	1c2a      	adds	r2, r5, #0
 800be06:	801a      	strh	r2, [r3, #0]
 800be08:	1d3b      	adds	r3, r7, #4
 800be0a:	1c22      	adds	r2, r4, #0
 800be0c:	801a      	strh	r2, [r3, #0]
 800be0e:	1cbb      	adds	r3, r7, #2
 800be10:	1c02      	adds	r2, r0, #0
 800be12:	801a      	strh	r2, [r3, #0]
 800be14:	003b      	movs	r3, r7
 800be16:	1c0a      	adds	r2, r1, #0
 800be18:	801a      	strh	r2, [r3, #0]
    UWORD X, Y;
    for (Y = Ystart; Y < Yend; Y++)
 800be1a:	230c      	movs	r3, #12
 800be1c:	18fb      	adds	r3, r7, r3
 800be1e:	1d3a      	adds	r2, r7, #4
 800be20:	8812      	ldrh	r2, [r2, #0]
 800be22:	801a      	strh	r2, [r3, #0]
 800be24:	e024      	b.n	800be70 <Paint_ClearWindows+0x7c>
    {
        for (X = Xstart; X < Xend; X++)
 800be26:	230e      	movs	r3, #14
 800be28:	18fb      	adds	r3, r7, r3
 800be2a:	1dba      	adds	r2, r7, #6
 800be2c:	8812      	ldrh	r2, [r2, #0]
 800be2e:	801a      	strh	r2, [r3, #0]
 800be30:	e011      	b.n	800be56 <Paint_ClearWindows+0x62>
        { // 8 pixel =  1 byte
            Paint_SetPixel(X, Y, Color);
 800be32:	2320      	movs	r3, #32
 800be34:	18fb      	adds	r3, r7, r3
 800be36:	881a      	ldrh	r2, [r3, #0]
 800be38:	230c      	movs	r3, #12
 800be3a:	18fb      	adds	r3, r7, r3
 800be3c:	8819      	ldrh	r1, [r3, #0]
 800be3e:	240e      	movs	r4, #14
 800be40:	193b      	adds	r3, r7, r4
 800be42:	881b      	ldrh	r3, [r3, #0]
 800be44:	0018      	movs	r0, r3
 800be46:	f7ff fda9 	bl	800b99c <Paint_SetPixel>
        for (X = Xstart; X < Xend; X++)
 800be4a:	0021      	movs	r1, r4
 800be4c:	187b      	adds	r3, r7, r1
 800be4e:	881a      	ldrh	r2, [r3, #0]
 800be50:	187b      	adds	r3, r7, r1
 800be52:	3201      	adds	r2, #1
 800be54:	801a      	strh	r2, [r3, #0]
 800be56:	230e      	movs	r3, #14
 800be58:	18fa      	adds	r2, r7, r3
 800be5a:	1cbb      	adds	r3, r7, #2
 800be5c:	8812      	ldrh	r2, [r2, #0]
 800be5e:	881b      	ldrh	r3, [r3, #0]
 800be60:	429a      	cmp	r2, r3
 800be62:	d3e6      	bcc.n	800be32 <Paint_ClearWindows+0x3e>
    for (Y = Ystart; Y < Yend; Y++)
 800be64:	210c      	movs	r1, #12
 800be66:	187b      	adds	r3, r7, r1
 800be68:	881a      	ldrh	r2, [r3, #0]
 800be6a:	187b      	adds	r3, r7, r1
 800be6c:	3201      	adds	r2, #1
 800be6e:	801a      	strh	r2, [r3, #0]
 800be70:	230c      	movs	r3, #12
 800be72:	18fa      	adds	r2, r7, r3
 800be74:	003b      	movs	r3, r7
 800be76:	8812      	ldrh	r2, [r2, #0]
 800be78:	881b      	ldrh	r3, [r3, #0]
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d3d3      	bcc.n	800be26 <Paint_ClearWindows+0x32>
        }
    }
}
 800be7e:	46c0      	nop			@ (mov r8, r8)
 800be80:	46c0      	nop			@ (mov r8, r8)
 800be82:	46bd      	mov	sp, r7
 800be84:	b004      	add	sp, #16
 800be86:	bdb0      	pop	{r4, r5, r7, pc}

0800be88 <Paint_DrawPoint>:
    Dot_Pixel	: point size
    Dot_Style	: point Style
******************************************************************************/
void Paint_DrawPoint(UWORD Xpoint, UWORD Ypoint, UWORD Color,
                     DOT_PIXEL Dot_Pixel, DOT_STYLE Dot_Style)
{
 800be88:	b5b0      	push	{r4, r5, r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	0005      	movs	r5, r0
 800be90:	000c      	movs	r4, r1
 800be92:	0010      	movs	r0, r2
 800be94:	0019      	movs	r1, r3
 800be96:	1dbb      	adds	r3, r7, #6
 800be98:	1c2a      	adds	r2, r5, #0
 800be9a:	801a      	strh	r2, [r3, #0]
 800be9c:	1d3b      	adds	r3, r7, #4
 800be9e:	1c22      	adds	r2, r4, #0
 800bea0:	801a      	strh	r2, [r3, #0]
 800bea2:	1cbb      	adds	r3, r7, #2
 800bea4:	1c02      	adds	r2, r0, #0
 800bea6:	801a      	strh	r2, [r3, #0]
 800bea8:	1c7b      	adds	r3, r7, #1
 800beaa:	1c0a      	adds	r2, r1, #0
 800beac:	701a      	strb	r2, [r3, #0]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800beae:	4b65      	ldr	r3, [pc, #404]	@ (800c044 <Paint_DrawPoint+0x1bc>)
 800beb0:	889b      	ldrh	r3, [r3, #4]
 800beb2:	1dba      	adds	r2, r7, #6
 800beb4:	8812      	ldrh	r2, [r2, #0]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d805      	bhi.n	800bec6 <Paint_DrawPoint+0x3e>
 800beba:	4b62      	ldr	r3, [pc, #392]	@ (800c044 <Paint_DrawPoint+0x1bc>)
 800bebc:	88db      	ldrh	r3, [r3, #6]
 800bebe:	1d3a      	adds	r2, r7, #4
 800bec0:	8812      	ldrh	r2, [r2, #0]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d912      	bls.n	800beec <Paint_DrawPoint+0x64>
    {
        DE_BUG("Paint_DrawPoint Input exceeds the normal display range\r\n");
        printf("Xpoint = %d , Paint.Width = %d  \r\n ", Xpoint, Paint.Width);
 800bec6:	1dbb      	adds	r3, r7, #6
 800bec8:	8819      	ldrh	r1, [r3, #0]
 800beca:	4b5e      	ldr	r3, [pc, #376]	@ (800c044 <Paint_DrawPoint+0x1bc>)
 800becc:	889b      	ldrh	r3, [r3, #4]
 800bece:	001a      	movs	r2, r3
 800bed0:	4b5d      	ldr	r3, [pc, #372]	@ (800c048 <Paint_DrawPoint+0x1c0>)
 800bed2:	0018      	movs	r0, r3
 800bed4:	f7f9 fbce 	bl	8005674 <printf_>
        printf("Ypoint = %d , Paint.Height = %d  \r\n ", Ypoint, Paint.Height);
 800bed8:	1d3b      	adds	r3, r7, #4
 800beda:	8819      	ldrh	r1, [r3, #0]
 800bedc:	4b59      	ldr	r3, [pc, #356]	@ (800c044 <Paint_DrawPoint+0x1bc>)
 800bede:	88db      	ldrh	r3, [r3, #6]
 800bee0:	001a      	movs	r2, r3
 800bee2:	4b5a      	ldr	r3, [pc, #360]	@ (800c04c <Paint_DrawPoint+0x1c4>)
 800bee4:	0018      	movs	r0, r3
 800bee6:	f7f9 fbc5 	bl	8005674 <printf_>
        return;
 800beea:	e0a8      	b.n	800c03e <Paint_DrawPoint+0x1b6>
    }

    int16_t XDir_Num, YDir_Num;
    if (Dot_Style == DOT_FILL_AROUND)
 800beec:	2320      	movs	r3, #32
 800beee:	18fb      	adds	r3, r7, r3
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d161      	bne.n	800bfba <Paint_DrawPoint+0x132>
    {
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++)
 800bef6:	230e      	movs	r3, #14
 800bef8:	18fb      	adds	r3, r7, r3
 800befa:	2200      	movs	r2, #0
 800befc:	801a      	strh	r2, [r3, #0]
 800befe:	e051      	b.n	800bfa4 <Paint_DrawPoint+0x11c>
        {
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++)
 800bf00:	230c      	movs	r3, #12
 800bf02:	18fb      	adds	r3, r7, r3
 800bf04:	2200      	movs	r2, #0
 800bf06:	801a      	strh	r2, [r3, #0]
 800bf08:	e039      	b.n	800bf7e <Paint_DrawPoint+0xf6>
            {
                if (Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 800bf0a:	1dbb      	adds	r3, r7, #6
 800bf0c:	881a      	ldrh	r2, [r3, #0]
 800bf0e:	200e      	movs	r0, #14
 800bf10:	183b      	adds	r3, r7, r0
 800bf12:	2100      	movs	r1, #0
 800bf14:	5e5b      	ldrsh	r3, [r3, r1]
 800bf16:	18d2      	adds	r2, r2, r3
 800bf18:	1c7b      	adds	r3, r7, #1
 800bf1a:	781b      	ldrb	r3, [r3, #0]
 800bf1c:	1ad3      	subs	r3, r2, r3
 800bf1e:	d438      	bmi.n	800bf92 <Paint_DrawPoint+0x10a>
 800bf20:	1d3b      	adds	r3, r7, #4
 800bf22:	881a      	ldrh	r2, [r3, #0]
 800bf24:	210c      	movs	r1, #12
 800bf26:	187b      	adds	r3, r7, r1
 800bf28:	2400      	movs	r4, #0
 800bf2a:	5f1b      	ldrsh	r3, [r3, r4]
 800bf2c:	18d2      	adds	r2, r2, r3
 800bf2e:	1c7b      	adds	r3, r7, #1
 800bf30:	781b      	ldrb	r3, [r3, #0]
 800bf32:	1ad3      	subs	r3, r2, r3
 800bf34:	d42d      	bmi.n	800bf92 <Paint_DrawPoint+0x10a>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 800bf36:	183b      	adds	r3, r7, r0
 800bf38:	881a      	ldrh	r2, [r3, #0]
 800bf3a:	1dbb      	adds	r3, r7, #6
 800bf3c:	881b      	ldrh	r3, [r3, #0]
 800bf3e:	18d3      	adds	r3, r2, r3
 800bf40:	b29a      	uxth	r2, r3
 800bf42:	1c7b      	adds	r3, r7, #1
 800bf44:	781b      	ldrb	r3, [r3, #0]
 800bf46:	b29b      	uxth	r3, r3
 800bf48:	1ad3      	subs	r3, r2, r3
 800bf4a:	b298      	uxth	r0, r3
 800bf4c:	000c      	movs	r4, r1
 800bf4e:	187b      	adds	r3, r7, r1
 800bf50:	881a      	ldrh	r2, [r3, #0]
 800bf52:	1d3b      	adds	r3, r7, #4
 800bf54:	881b      	ldrh	r3, [r3, #0]
 800bf56:	18d3      	adds	r3, r2, r3
 800bf58:	b29a      	uxth	r2, r3
 800bf5a:	1c7b      	adds	r3, r7, #1
 800bf5c:	781b      	ldrb	r3, [r3, #0]
 800bf5e:	b29b      	uxth	r3, r3
 800bf60:	1ad3      	subs	r3, r2, r3
 800bf62:	b299      	uxth	r1, r3
 800bf64:	1cbb      	adds	r3, r7, #2
 800bf66:	881b      	ldrh	r3, [r3, #0]
 800bf68:	001a      	movs	r2, r3
 800bf6a:	f7ff fd17 	bl	800b99c <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++)
 800bf6e:	193b      	adds	r3, r7, r4
 800bf70:	2200      	movs	r2, #0
 800bf72:	5e9b      	ldrsh	r3, [r3, r2]
 800bf74:	b29b      	uxth	r3, r3
 800bf76:	3301      	adds	r3, #1
 800bf78:	b29a      	uxth	r2, r3
 800bf7a:	193b      	adds	r3, r7, r4
 800bf7c:	801a      	strh	r2, [r3, #0]
 800bf7e:	230c      	movs	r3, #12
 800bf80:	18fb      	adds	r3, r7, r3
 800bf82:	2200      	movs	r2, #0
 800bf84:	5e9a      	ldrsh	r2, [r3, r2]
 800bf86:	1c7b      	adds	r3, r7, #1
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	005b      	lsls	r3, r3, #1
 800bf8c:	3b01      	subs	r3, #1
 800bf8e:	429a      	cmp	r2, r3
 800bf90:	dbbb      	blt.n	800bf0a <Paint_DrawPoint+0x82>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++)
 800bf92:	210e      	movs	r1, #14
 800bf94:	187b      	adds	r3, r7, r1
 800bf96:	2200      	movs	r2, #0
 800bf98:	5e9b      	ldrsh	r3, [r3, r2]
 800bf9a:	b29b      	uxth	r3, r3
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	b29a      	uxth	r2, r3
 800bfa0:	187b      	adds	r3, r7, r1
 800bfa2:	801a      	strh	r2, [r3, #0]
 800bfa4:	230e      	movs	r3, #14
 800bfa6:	18fb      	adds	r3, r7, r3
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	5e9a      	ldrsh	r2, [r3, r2]
 800bfac:	1c7b      	adds	r3, r7, #1
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	005b      	lsls	r3, r3, #1
 800bfb2:	3b01      	subs	r3, #1
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	dba3      	blt.n	800bf00 <Paint_DrawPoint+0x78>
 800bfb8:	e041      	b.n	800c03e <Paint_DrawPoint+0x1b6>
            }
        }
    }
    else
    {
        for (XDir_Num = 0; XDir_Num < Dot_Pixel; XDir_Num++)
 800bfba:	230e      	movs	r3, #14
 800bfbc:	18fb      	adds	r3, r7, r3
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	801a      	strh	r2, [r3, #0]
 800bfc2:	e034      	b.n	800c02e <Paint_DrawPoint+0x1a6>
        {
            for (YDir_Num = 0; YDir_Num < Dot_Pixel; YDir_Num++)
 800bfc4:	230c      	movs	r3, #12
 800bfc6:	18fb      	adds	r3, r7, r3
 800bfc8:	2200      	movs	r2, #0
 800bfca:	801a      	strh	r2, [r3, #0]
 800bfcc:	e01e      	b.n	800c00c <Paint_DrawPoint+0x184>
            {
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 800bfce:	230e      	movs	r3, #14
 800bfd0:	18fb      	adds	r3, r7, r3
 800bfd2:	881a      	ldrh	r2, [r3, #0]
 800bfd4:	1dbb      	adds	r3, r7, #6
 800bfd6:	881b      	ldrh	r3, [r3, #0]
 800bfd8:	18d3      	adds	r3, r2, r3
 800bfda:	b29b      	uxth	r3, r3
 800bfdc:	3b01      	subs	r3, #1
 800bfde:	b298      	uxth	r0, r3
 800bfe0:	240c      	movs	r4, #12
 800bfe2:	193b      	adds	r3, r7, r4
 800bfe4:	881a      	ldrh	r2, [r3, #0]
 800bfe6:	1d3b      	adds	r3, r7, #4
 800bfe8:	881b      	ldrh	r3, [r3, #0]
 800bfea:	18d3      	adds	r3, r2, r3
 800bfec:	b29b      	uxth	r3, r3
 800bfee:	3b01      	subs	r3, #1
 800bff0:	b299      	uxth	r1, r3
 800bff2:	1cbb      	adds	r3, r7, #2
 800bff4:	881b      	ldrh	r3, [r3, #0]
 800bff6:	001a      	movs	r2, r3
 800bff8:	f7ff fcd0 	bl	800b99c <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < Dot_Pixel; YDir_Num++)
 800bffc:	193b      	adds	r3, r7, r4
 800bffe:	2200      	movs	r2, #0
 800c000:	5e9b      	ldrsh	r3, [r3, r2]
 800c002:	b29b      	uxth	r3, r3
 800c004:	3301      	adds	r3, #1
 800c006:	b29a      	uxth	r2, r3
 800c008:	193b      	adds	r3, r7, r4
 800c00a:	801a      	strh	r2, [r3, #0]
 800c00c:	230c      	movs	r3, #12
 800c00e:	18fb      	adds	r3, r7, r3
 800c010:	2200      	movs	r2, #0
 800c012:	5e9a      	ldrsh	r2, [r3, r2]
 800c014:	1c7b      	adds	r3, r7, #1
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	429a      	cmp	r2, r3
 800c01a:	dbd8      	blt.n	800bfce <Paint_DrawPoint+0x146>
        for (XDir_Num = 0; XDir_Num < Dot_Pixel; XDir_Num++)
 800c01c:	210e      	movs	r1, #14
 800c01e:	187b      	adds	r3, r7, r1
 800c020:	2200      	movs	r2, #0
 800c022:	5e9b      	ldrsh	r3, [r3, r2]
 800c024:	b29b      	uxth	r3, r3
 800c026:	3301      	adds	r3, #1
 800c028:	b29a      	uxth	r2, r3
 800c02a:	187b      	adds	r3, r7, r1
 800c02c:	801a      	strh	r2, [r3, #0]
 800c02e:	230e      	movs	r3, #14
 800c030:	18fb      	adds	r3, r7, r3
 800c032:	2200      	movs	r2, #0
 800c034:	5e9a      	ldrsh	r2, [r3, r2]
 800c036:	1c7b      	adds	r3, r7, #1
 800c038:	781b      	ldrb	r3, [r3, #0]
 800c03a:	429a      	cmp	r2, r3
 800c03c:	dbc2      	blt.n	800bfc4 <Paint_DrawPoint+0x13c>
            }
        }
    }
}
 800c03e:	46bd      	mov	sp, r7
 800c040:	b004      	add	sp, #16
 800c042:	bdb0      	pop	{r4, r5, r7, pc}
 800c044:	200005b0 	.word	0x200005b0
 800c048:	0800fcf8 	.word	0x0800fcf8
 800c04c:	0800fd1c 	.word	0x0800fd1c

0800c050 <Paint_DrawLine>:
    Line_width : Line width
    Line_Style: Solid and dotted lines
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 800c050:	b5b0      	push	{r4, r5, r7, lr}
 800c052:	b08c      	sub	sp, #48	@ 0x30
 800c054:	af02      	add	r7, sp, #8
 800c056:	0005      	movs	r5, r0
 800c058:	000c      	movs	r4, r1
 800c05a:	0010      	movs	r0, r2
 800c05c:	0019      	movs	r1, r3
 800c05e:	1dbb      	adds	r3, r7, #6
 800c060:	1c2a      	adds	r2, r5, #0
 800c062:	801a      	strh	r2, [r3, #0]
 800c064:	1d3b      	adds	r3, r7, #4
 800c066:	1c22      	adds	r2, r4, #0
 800c068:	801a      	strh	r2, [r3, #0]
 800c06a:	1cbb      	adds	r3, r7, #2
 800c06c:	1c02      	adds	r2, r0, #0
 800c06e:	801a      	strh	r2, [r3, #0]
 800c070:	003b      	movs	r3, r7
 800c072:	1c0a      	adds	r2, r1, #0
 800c074:	801a      	strh	r2, [r3, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800c076:	4b63      	ldr	r3, [pc, #396]	@ (800c204 <Paint_DrawLine+0x1b4>)
 800c078:	889b      	ldrh	r3, [r3, #4]
 800c07a:	1dba      	adds	r2, r7, #6
 800c07c:	8812      	ldrh	r2, [r2, #0]
 800c07e:	429a      	cmp	r2, r3
 800c080:	d900      	bls.n	800c084 <Paint_DrawLine+0x34>
 800c082:	e0b7      	b.n	800c1f4 <Paint_DrawLine+0x1a4>
 800c084:	4b5f      	ldr	r3, [pc, #380]	@ (800c204 <Paint_DrawLine+0x1b4>)
 800c086:	88db      	ldrh	r3, [r3, #6]
 800c088:	1d3a      	adds	r2, r7, #4
 800c08a:	8812      	ldrh	r2, [r2, #0]
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d900      	bls.n	800c092 <Paint_DrawLine+0x42>
 800c090:	e0b0      	b.n	800c1f4 <Paint_DrawLine+0x1a4>
        Xend > Paint.Width || Yend > Paint.Height)
 800c092:	4b5c      	ldr	r3, [pc, #368]	@ (800c204 <Paint_DrawLine+0x1b4>)
 800c094:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800c096:	1cba      	adds	r2, r7, #2
 800c098:	8812      	ldrh	r2, [r2, #0]
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d900      	bls.n	800c0a0 <Paint_DrawLine+0x50>
 800c09e:	e0a9      	b.n	800c1f4 <Paint_DrawLine+0x1a4>
        Xend > Paint.Width || Yend > Paint.Height)
 800c0a0:	4b58      	ldr	r3, [pc, #352]	@ (800c204 <Paint_DrawLine+0x1b4>)
 800c0a2:	88db      	ldrh	r3, [r3, #6]
 800c0a4:	003a      	movs	r2, r7
 800c0a6:	8812      	ldrh	r2, [r2, #0]
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d900      	bls.n	800c0ae <Paint_DrawLine+0x5e>
 800c0ac:	e0a2      	b.n	800c1f4 <Paint_DrawLine+0x1a4>
    {
        DE_BUG("Paint_DrawLine Input exceeds the normal display range\r\n");
        return;
    }

    UWORD Xpoint = Xstart;
 800c0ae:	2326      	movs	r3, #38	@ 0x26
 800c0b0:	18fb      	adds	r3, r7, r3
 800c0b2:	1dba      	adds	r2, r7, #6
 800c0b4:	8812      	ldrh	r2, [r2, #0]
 800c0b6:	801a      	strh	r2, [r3, #0]
    UWORD Ypoint = Ystart;
 800c0b8:	2324      	movs	r3, #36	@ 0x24
 800c0ba:	18fb      	adds	r3, r7, r3
 800c0bc:	1d3a      	adds	r2, r7, #4
 800c0be:	8812      	ldrh	r2, [r2, #0]
 800c0c0:	801a      	strh	r2, [r3, #0]
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 800c0c2:	1cbb      	adds	r3, r7, #2
 800c0c4:	881a      	ldrh	r2, [r3, #0]
 800c0c6:	1dbb      	adds	r3, r7, #6
 800c0c8:	881b      	ldrh	r3, [r3, #0]
 800c0ca:	1ad3      	subs	r3, r2, r3
 800c0cc:	17da      	asrs	r2, r3, #31
 800c0ce:	189b      	adds	r3, r3, r2
 800c0d0:	4053      	eors	r3, r2
 800c0d2:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 800c0d4:	003b      	movs	r3, r7
 800c0d6:	881a      	ldrh	r2, [r3, #0]
 800c0d8:	1d3b      	adds	r3, r7, #4
 800c0da:	881b      	ldrh	r3, [r3, #0]
 800c0dc:	1ad3      	subs	r3, r2, r3
 800c0de:	17da      	asrs	r2, r3, #31
 800c0e0:	189b      	adds	r3, r3, r2
 800c0e2:	4053      	eors	r3, r2
 800c0e4:	425b      	negs	r3, r3
 800c0e6:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 800c0e8:	1dba      	adds	r2, r7, #6
 800c0ea:	1cbb      	adds	r3, r7, #2
 800c0ec:	8812      	ldrh	r2, [r2, #0]
 800c0ee:	881b      	ldrh	r3, [r3, #0]
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d201      	bcs.n	800c0f8 <Paint_DrawLine+0xa8>
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	e001      	b.n	800c0fc <Paint_DrawLine+0xac>
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	425b      	negs	r3, r3
 800c0fc:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 800c0fe:	1d3a      	adds	r2, r7, #4
 800c100:	003b      	movs	r3, r7
 800c102:	8812      	ldrh	r2, [r2, #0]
 800c104:	881b      	ldrh	r3, [r3, #0]
 800c106:	429a      	cmp	r2, r3
 800c108:	d201      	bcs.n	800c10e <Paint_DrawLine+0xbe>
 800c10a:	2301      	movs	r3, #1
 800c10c:	e001      	b.n	800c112 <Paint_DrawLine+0xc2>
 800c10e:	2301      	movs	r3, #1
 800c110:	425b      	negs	r3, r3
 800c112:	60fb      	str	r3, [r7, #12]

    // Cumulative error
    int Esp = dx + dy;
 800c114:	69ba      	ldr	r2, [r7, #24]
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	18d3      	adds	r3, r2, r3
 800c11a:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 800c11c:	231f      	movs	r3, #31
 800c11e:	18fb      	adds	r3, r7, r3
 800c120:	2200      	movs	r2, #0
 800c122:	701a      	strb	r2, [r3, #0]

    for (;;)
    {
        Dotted_Len++;
 800c124:	241f      	movs	r4, #31
 800c126:	193b      	adds	r3, r7, r4
 800c128:	781a      	ldrb	r2, [r3, #0]
 800c12a:	193b      	adds	r3, r7, r4
 800c12c:	3201      	adds	r2, #1
 800c12e:	701a      	strb	r2, [r3, #0]
        // Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0)
 800c130:	2340      	movs	r3, #64	@ 0x40
 800c132:	18fb      	adds	r3, r7, r3
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	2b01      	cmp	r3, #1
 800c138:	d11c      	bne.n	800c174 <Paint_DrawLine+0x124>
 800c13a:	193b      	adds	r3, r7, r4
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	2103      	movs	r1, #3
 800c140:	0018      	movs	r0, r3
 800c142:	f7f4 f883 	bl	800024c <__aeabi_uidivmod>
 800c146:	000b      	movs	r3, r1
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d112      	bne.n	800c174 <Paint_DrawLine+0x124>
        {
            // DE_BUG("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 800c14e:	233c      	movs	r3, #60	@ 0x3c
 800c150:	18fb      	adds	r3, r7, r3
 800c152:	781a      	ldrb	r2, [r3, #0]
 800c154:	2324      	movs	r3, #36	@ 0x24
 800c156:	18fb      	adds	r3, r7, r3
 800c158:	8819      	ldrh	r1, [r3, #0]
 800c15a:	2326      	movs	r3, #38	@ 0x26
 800c15c:	18fb      	adds	r3, r7, r3
 800c15e:	8818      	ldrh	r0, [r3, #0]
 800c160:	2301      	movs	r3, #1
 800c162:	9300      	str	r3, [sp, #0]
 800c164:	0013      	movs	r3, r2
 800c166:	22ff      	movs	r2, #255	@ 0xff
 800c168:	f7ff fe8e 	bl	800be88 <Paint_DrawPoint>
            Dotted_Len = 0;
 800c16c:	193b      	adds	r3, r7, r4
 800c16e:	2200      	movs	r2, #0
 800c170:	701a      	strb	r2, [r3, #0]
 800c172:	e010      	b.n	800c196 <Paint_DrawLine+0x146>
        }
        else
        {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 800c174:	233c      	movs	r3, #60	@ 0x3c
 800c176:	18fb      	adds	r3, r7, r3
 800c178:	781c      	ldrb	r4, [r3, #0]
 800c17a:	2338      	movs	r3, #56	@ 0x38
 800c17c:	18fb      	adds	r3, r7, r3
 800c17e:	881a      	ldrh	r2, [r3, #0]
 800c180:	2324      	movs	r3, #36	@ 0x24
 800c182:	18fb      	adds	r3, r7, r3
 800c184:	8819      	ldrh	r1, [r3, #0]
 800c186:	2326      	movs	r3, #38	@ 0x26
 800c188:	18fb      	adds	r3, r7, r3
 800c18a:	8818      	ldrh	r0, [r3, #0]
 800c18c:	2301      	movs	r3, #1
 800c18e:	9300      	str	r3, [sp, #0]
 800c190:	0023      	movs	r3, r4
 800c192:	f7ff fe79 	bl	800be88 <Paint_DrawPoint>
        }
        if (2 * Esp >= dy)
 800c196:	6a3b      	ldr	r3, [r7, #32]
 800c198:	005b      	lsls	r3, r3, #1
 800c19a:	697a      	ldr	r2, [r7, #20]
 800c19c:	429a      	cmp	r2, r3
 800c19e:	dc11      	bgt.n	800c1c4 <Paint_DrawLine+0x174>
        {
            if (Xpoint == Xend)
 800c1a0:	2026      	movs	r0, #38	@ 0x26
 800c1a2:	183a      	adds	r2, r7, r0
 800c1a4:	1cbb      	adds	r3, r7, #2
 800c1a6:	8812      	ldrh	r2, [r2, #0]
 800c1a8:	881b      	ldrh	r3, [r3, #0]
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d024      	beq.n	800c1f8 <Paint_DrawLine+0x1a8>
                break;
            Esp += dy;
 800c1ae:	6a3a      	ldr	r2, [r7, #32]
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	18d3      	adds	r3, r2, r3
 800c1b4:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	b299      	uxth	r1, r3
 800c1ba:	183b      	adds	r3, r7, r0
 800c1bc:	183a      	adds	r2, r7, r0
 800c1be:	8812      	ldrh	r2, [r2, #0]
 800c1c0:	188a      	adds	r2, r1, r2
 800c1c2:	801a      	strh	r2, [r3, #0]
        }
        if (2 * Esp <= dx)
 800c1c4:	6a3b      	ldr	r3, [r7, #32]
 800c1c6:	005b      	lsls	r3, r3, #1
 800c1c8:	69ba      	ldr	r2, [r7, #24]
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	dbaa      	blt.n	800c124 <Paint_DrawLine+0xd4>
        {
            if (Ypoint == Yend)
 800c1ce:	2024      	movs	r0, #36	@ 0x24
 800c1d0:	183a      	adds	r2, r7, r0
 800c1d2:	003b      	movs	r3, r7
 800c1d4:	8812      	ldrh	r2, [r2, #0]
 800c1d6:	881b      	ldrh	r3, [r3, #0]
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d00f      	beq.n	800c1fc <Paint_DrawLine+0x1ac>
                break;
            Esp += dx;
 800c1dc:	6a3a      	ldr	r2, [r7, #32]
 800c1de:	69bb      	ldr	r3, [r7, #24]
 800c1e0:	18d3      	adds	r3, r2, r3
 800c1e2:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	b299      	uxth	r1, r3
 800c1e8:	183b      	adds	r3, r7, r0
 800c1ea:	183a      	adds	r2, r7, r0
 800c1ec:	8812      	ldrh	r2, [r2, #0]
 800c1ee:	188a      	adds	r2, r1, r2
 800c1f0:	801a      	strh	r2, [r3, #0]
        Dotted_Len++;
 800c1f2:	e797      	b.n	800c124 <Paint_DrawLine+0xd4>
        return;
 800c1f4:	46c0      	nop			@ (mov r8, r8)
 800c1f6:	e002      	b.n	800c1fe <Paint_DrawLine+0x1ae>
                break;
 800c1f8:	46c0      	nop			@ (mov r8, r8)
 800c1fa:	e000      	b.n	800c1fe <Paint_DrawLine+0x1ae>
                break;
 800c1fc:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 800c1fe:	46bd      	mov	sp, r7
 800c200:	b00a      	add	sp, #40	@ 0x28
 800c202:	bdb0      	pop	{r4, r5, r7, pc}
 800c204:	200005b0 	.word	0x200005b0

0800c208 <Paint_DrawRectangle>:
    Line_width: Line width
    Draw_Fill : Whether to fill the inside of the rectangle
******************************************************************************/
void Paint_DrawRectangle(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                         UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill)
{
 800c208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c20a:	b089      	sub	sp, #36	@ 0x24
 800c20c:	af04      	add	r7, sp, #16
 800c20e:	0005      	movs	r5, r0
 800c210:	000c      	movs	r4, r1
 800c212:	0010      	movs	r0, r2
 800c214:	0019      	movs	r1, r3
 800c216:	1dbb      	adds	r3, r7, #6
 800c218:	1c2a      	adds	r2, r5, #0
 800c21a:	801a      	strh	r2, [r3, #0]
 800c21c:	1d3b      	adds	r3, r7, #4
 800c21e:	1c22      	adds	r2, r4, #0
 800c220:	801a      	strh	r2, [r3, #0]
 800c222:	1cbb      	adds	r3, r7, #2
 800c224:	1c02      	adds	r2, r0, #0
 800c226:	801a      	strh	r2, [r3, #0]
 800c228:	003b      	movs	r3, r7
 800c22a:	1c0a      	adds	r2, r1, #0
 800c22c:	801a      	strh	r2, [r3, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800c22e:	4b59      	ldr	r3, [pc, #356]	@ (800c394 <Paint_DrawRectangle+0x18c>)
 800c230:	889b      	ldrh	r3, [r3, #4]
 800c232:	1dba      	adds	r2, r7, #6
 800c234:	8812      	ldrh	r2, [r2, #0]
 800c236:	429a      	cmp	r2, r3
 800c238:	d900      	bls.n	800c23c <Paint_DrawRectangle+0x34>
 800c23a:	e0a6      	b.n	800c38a <Paint_DrawRectangle+0x182>
 800c23c:	4b55      	ldr	r3, [pc, #340]	@ (800c394 <Paint_DrawRectangle+0x18c>)
 800c23e:	88db      	ldrh	r3, [r3, #6]
 800c240:	1d3a      	adds	r2, r7, #4
 800c242:	8812      	ldrh	r2, [r2, #0]
 800c244:	429a      	cmp	r2, r3
 800c246:	d900      	bls.n	800c24a <Paint_DrawRectangle+0x42>
 800c248:	e09f      	b.n	800c38a <Paint_DrawRectangle+0x182>
        Xend > Paint.Width || Yend > Paint.Height)
 800c24a:	4b52      	ldr	r3, [pc, #328]	@ (800c394 <Paint_DrawRectangle+0x18c>)
 800c24c:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800c24e:	1cba      	adds	r2, r7, #2
 800c250:	8812      	ldrh	r2, [r2, #0]
 800c252:	429a      	cmp	r2, r3
 800c254:	d900      	bls.n	800c258 <Paint_DrawRectangle+0x50>
 800c256:	e098      	b.n	800c38a <Paint_DrawRectangle+0x182>
        Xend > Paint.Width || Yend > Paint.Height)
 800c258:	4b4e      	ldr	r3, [pc, #312]	@ (800c394 <Paint_DrawRectangle+0x18c>)
 800c25a:	88db      	ldrh	r3, [r3, #6]
 800c25c:	003a      	movs	r2, r7
 800c25e:	8812      	ldrh	r2, [r2, #0]
 800c260:	429a      	cmp	r2, r3
 800c262:	d900      	bls.n	800c266 <Paint_DrawRectangle+0x5e>
 800c264:	e091      	b.n	800c38a <Paint_DrawRectangle+0x182>
    {
        DE_BUG("Input exceeds the normal display range\r\n");
        return;
    }

    if (Draw_Fill)
 800c266:	2328      	movs	r3, #40	@ 0x28
 800c268:	2208      	movs	r2, #8
 800c26a:	189b      	adds	r3, r3, r2
 800c26c:	19db      	adds	r3, r3, r7
 800c26e:	781b      	ldrb	r3, [r3, #0]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d02b      	beq.n	800c2cc <Paint_DrawRectangle+0xc4>
    {
        UWORD Ypoint;
        for (Ypoint = Ystart; Ypoint < Yend; Ypoint++)
 800c274:	230e      	movs	r3, #14
 800c276:	18fb      	adds	r3, r7, r3
 800c278:	1d3a      	adds	r2, r7, #4
 800c27a:	8812      	ldrh	r2, [r2, #0]
 800c27c:	801a      	strh	r2, [r3, #0]
 800c27e:	e01d      	b.n	800c2bc <Paint_DrawRectangle+0xb4>
        {
            Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color, Line_width, LINE_STYLE_SOLID);
 800c280:	250e      	movs	r5, #14
 800c282:	197b      	adds	r3, r7, r5
 800c284:	881c      	ldrh	r4, [r3, #0]
 800c286:	1cbb      	adds	r3, r7, #2
 800c288:	881a      	ldrh	r2, [r3, #0]
 800c28a:	197b      	adds	r3, r7, r5
 800c28c:	8819      	ldrh	r1, [r3, #0]
 800c28e:	1dbb      	adds	r3, r7, #6
 800c290:	8818      	ldrh	r0, [r3, #0]
 800c292:	2300      	movs	r3, #0
 800c294:	9302      	str	r3, [sp, #8]
 800c296:	2324      	movs	r3, #36	@ 0x24
 800c298:	2608      	movs	r6, #8
 800c29a:	199b      	adds	r3, r3, r6
 800c29c:	19db      	adds	r3, r3, r7
 800c29e:	781b      	ldrb	r3, [r3, #0]
 800c2a0:	9301      	str	r3, [sp, #4]
 800c2a2:	2320      	movs	r3, #32
 800c2a4:	199b      	adds	r3, r3, r6
 800c2a6:	19db      	adds	r3, r3, r7
 800c2a8:	881b      	ldrh	r3, [r3, #0]
 800c2aa:	9300      	str	r3, [sp, #0]
 800c2ac:	0023      	movs	r3, r4
 800c2ae:	f7ff fecf 	bl	800c050 <Paint_DrawLine>
        for (Ypoint = Ystart; Ypoint < Yend; Ypoint++)
 800c2b2:	197b      	adds	r3, r7, r5
 800c2b4:	881a      	ldrh	r2, [r3, #0]
 800c2b6:	197b      	adds	r3, r7, r5
 800c2b8:	3201      	adds	r2, #1
 800c2ba:	801a      	strh	r2, [r3, #0]
 800c2bc:	230e      	movs	r3, #14
 800c2be:	18fa      	adds	r2, r7, r3
 800c2c0:	003b      	movs	r3, r7
 800c2c2:	8812      	ldrh	r2, [r2, #0]
 800c2c4:	881b      	ldrh	r3, [r3, #0]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d3da      	bcc.n	800c280 <Paint_DrawRectangle+0x78>
 800c2ca:	e05f      	b.n	800c38c <Paint_DrawRectangle+0x184>
        }
    }
    else
    {
        Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 800c2cc:	1d3b      	adds	r3, r7, #4
 800c2ce:	881c      	ldrh	r4, [r3, #0]
 800c2d0:	1cbb      	adds	r3, r7, #2
 800c2d2:	881a      	ldrh	r2, [r3, #0]
 800c2d4:	1d3b      	adds	r3, r7, #4
 800c2d6:	8819      	ldrh	r1, [r3, #0]
 800c2d8:	1dbb      	adds	r3, r7, #6
 800c2da:	8818      	ldrh	r0, [r3, #0]
 800c2dc:	2300      	movs	r3, #0
 800c2de:	9302      	str	r3, [sp, #8]
 800c2e0:	2524      	movs	r5, #36	@ 0x24
 800c2e2:	2308      	movs	r3, #8
 800c2e4:	18ee      	adds	r6, r5, r3
 800c2e6:	19f3      	adds	r3, r6, r7
 800c2e8:	781b      	ldrb	r3, [r3, #0]
 800c2ea:	9301      	str	r3, [sp, #4]
 800c2ec:	2620      	movs	r6, #32
 800c2ee:	2308      	movs	r3, #8
 800c2f0:	18f3      	adds	r3, r6, r3
 800c2f2:	19db      	adds	r3, r3, r7
 800c2f4:	881b      	ldrh	r3, [r3, #0]
 800c2f6:	9300      	str	r3, [sp, #0]
 800c2f8:	0023      	movs	r3, r4
 800c2fa:	f7ff fea9 	bl	800c050 <Paint_DrawLine>
        Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 800c2fe:	003b      	movs	r3, r7
 800c300:	881c      	ldrh	r4, [r3, #0]
 800c302:	1dbb      	adds	r3, r7, #6
 800c304:	881a      	ldrh	r2, [r3, #0]
 800c306:	1d3b      	adds	r3, r7, #4
 800c308:	8819      	ldrh	r1, [r3, #0]
 800c30a:	1dbb      	adds	r3, r7, #6
 800c30c:	8818      	ldrh	r0, [r3, #0]
 800c30e:	2300      	movs	r3, #0
 800c310:	9302      	str	r3, [sp, #8]
 800c312:	2308      	movs	r3, #8
 800c314:	18eb      	adds	r3, r5, r3
 800c316:	19db      	adds	r3, r3, r7
 800c318:	781b      	ldrb	r3, [r3, #0]
 800c31a:	9301      	str	r3, [sp, #4]
 800c31c:	2308      	movs	r3, #8
 800c31e:	18f3      	adds	r3, r6, r3
 800c320:	19db      	adds	r3, r3, r7
 800c322:	881b      	ldrh	r3, [r3, #0]
 800c324:	9300      	str	r3, [sp, #0]
 800c326:	0023      	movs	r3, r4
 800c328:	f7ff fe92 	bl	800c050 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 800c32c:	1d3b      	adds	r3, r7, #4
 800c32e:	881c      	ldrh	r4, [r3, #0]
 800c330:	1cbb      	adds	r3, r7, #2
 800c332:	881a      	ldrh	r2, [r3, #0]
 800c334:	003b      	movs	r3, r7
 800c336:	8819      	ldrh	r1, [r3, #0]
 800c338:	1cbb      	adds	r3, r7, #2
 800c33a:	8818      	ldrh	r0, [r3, #0]
 800c33c:	2300      	movs	r3, #0
 800c33e:	9302      	str	r3, [sp, #8]
 800c340:	2308      	movs	r3, #8
 800c342:	18eb      	adds	r3, r5, r3
 800c344:	19db      	adds	r3, r3, r7
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	9301      	str	r3, [sp, #4]
 800c34a:	2308      	movs	r3, #8
 800c34c:	18f3      	adds	r3, r6, r3
 800c34e:	19db      	adds	r3, r3, r7
 800c350:	881b      	ldrh	r3, [r3, #0]
 800c352:	9300      	str	r3, [sp, #0]
 800c354:	0023      	movs	r3, r4
 800c356:	f7ff fe7b 	bl	800c050 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 800c35a:	003b      	movs	r3, r7
 800c35c:	881c      	ldrh	r4, [r3, #0]
 800c35e:	1dbb      	adds	r3, r7, #6
 800c360:	881a      	ldrh	r2, [r3, #0]
 800c362:	003b      	movs	r3, r7
 800c364:	8819      	ldrh	r1, [r3, #0]
 800c366:	1cbb      	adds	r3, r7, #2
 800c368:	8818      	ldrh	r0, [r3, #0]
 800c36a:	2300      	movs	r3, #0
 800c36c:	9302      	str	r3, [sp, #8]
 800c36e:	2308      	movs	r3, #8
 800c370:	18ed      	adds	r5, r5, r3
 800c372:	19eb      	adds	r3, r5, r7
 800c374:	781b      	ldrb	r3, [r3, #0]
 800c376:	9301      	str	r3, [sp, #4]
 800c378:	2308      	movs	r3, #8
 800c37a:	18f3      	adds	r3, r6, r3
 800c37c:	19db      	adds	r3, r3, r7
 800c37e:	881b      	ldrh	r3, [r3, #0]
 800c380:	9300      	str	r3, [sp, #0]
 800c382:	0023      	movs	r3, r4
 800c384:	f7ff fe64 	bl	800c050 <Paint_DrawLine>
 800c388:	e000      	b.n	800c38c <Paint_DrawRectangle+0x184>
        return;
 800c38a:	46c0      	nop			@ (mov r8, r8)
    }
}
 800c38c:	46bd      	mov	sp, r7
 800c38e:	b005      	add	sp, #20
 800c390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c392:	46c0      	nop			@ (mov r8, r8)
 800c394:	200005b0 	.word	0x200005b0

0800c398 <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    tFont *Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800c398:	b5b0      	push	{r4, r5, r7, lr}
 800c39a:	b088      	sub	sp, #32
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	0004      	movs	r4, r0
 800c3a0:	0008      	movs	r0, r1
 800c3a2:	0011      	movs	r1, r2
 800c3a4:	607b      	str	r3, [r7, #4]
 800c3a6:	250e      	movs	r5, #14
 800c3a8:	197b      	adds	r3, r7, r5
 800c3aa:	1c22      	adds	r2, r4, #0
 800c3ac:	801a      	strh	r2, [r3, #0]
 800c3ae:	240c      	movs	r4, #12
 800c3b0:	193b      	adds	r3, r7, r4
 800c3b2:	1c02      	adds	r2, r0, #0
 800c3b4:	801a      	strh	r2, [r3, #0]
 800c3b6:	200b      	movs	r0, #11
 800c3b8:	183b      	adds	r3, r7, r0
 800c3ba:	1c0a      	adds	r2, r1, #0
 800c3bc:	701a      	strb	r2, [r3, #0]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800c3be:	4b67      	ldr	r3, [pc, #412]	@ (800c55c <Paint_DrawChar+0x1c4>)
 800c3c0:	889b      	ldrh	r3, [r3, #4]
 800c3c2:	197a      	adds	r2, r7, r5
 800c3c4:	8812      	ldrh	r2, [r2, #0]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d900      	bls.n	800c3cc <Paint_DrawChar+0x34>
 800c3ca:	e0c2      	b.n	800c552 <Paint_DrawChar+0x1ba>
 800c3cc:	4b63      	ldr	r3, [pc, #396]	@ (800c55c <Paint_DrawChar+0x1c4>)
 800c3ce:	88db      	ldrh	r3, [r3, #6]
 800c3d0:	193a      	adds	r2, r7, r4
 800c3d2:	8812      	ldrh	r2, [r2, #0]
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d900      	bls.n	800c3da <Paint_DrawChar+0x42>
 800c3d8:	e0bb      	b.n	800c552 <Paint_DrawChar+0x1ba>
    {
        DE_BUG("Paint_DrawChar Input exceeds the normal display range\r\n");
        return;
    }
    uint32_t font_Width = (*Font).chars[Acsii_Char - ' '].image->width;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	685a      	ldr	r2, [r3, #4]
 800c3de:	183b      	adds	r3, r7, r0
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	495f      	ldr	r1, [pc, #380]	@ (800c560 <Paint_DrawChar+0x1c8>)
 800c3e4:	468c      	mov	ip, r1
 800c3e6:	4463      	add	r3, ip
 800c3e8:	00db      	lsls	r3, r3, #3
 800c3ea:	18d3      	adds	r3, r2, r3
 800c3ec:	685b      	ldr	r3, [r3, #4]
 800c3ee:	889b      	ldrh	r3, [r3, #4]
 800c3f0:	617b      	str	r3, [r7, #20]
    uint32_t font_Height = (*Font).chars[Acsii_Char - ' '].image->height;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	685a      	ldr	r2, [r3, #4]
 800c3f6:	183b      	adds	r3, r7, r0
 800c3f8:	781b      	ldrb	r3, [r3, #0]
 800c3fa:	4959      	ldr	r1, [pc, #356]	@ (800c560 <Paint_DrawChar+0x1c8>)
 800c3fc:	468c      	mov	ip, r1
 800c3fe:	4463      	add	r3, ip
 800c400:	00db      	lsls	r3, r3, #3
 800c402:	18d3      	adds	r3, r2, r3
 800c404:	685b      	ldr	r3, [r3, #4]
 800c406:	88db      	ldrh	r3, [r3, #6]
 800c408:	613b      	str	r3, [r7, #16]

    //   uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
    const unsigned char *ptr = (*Font).chars[Acsii_Char - ' '].image->data;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	685a      	ldr	r2, [r3, #4]
 800c40e:	183b      	adds	r3, r7, r0
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	4953      	ldr	r1, [pc, #332]	@ (800c560 <Paint_DrawChar+0x1c8>)
 800c414:	468c      	mov	ip, r1
 800c416:	4463      	add	r3, ip
 800c418:	00db      	lsls	r3, r3, #3
 800c41a:	18d3      	adds	r3, r2, r3
 800c41c:	685b      	ldr	r3, [r3, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < font_Height; Page++)
 800c422:	231e      	movs	r3, #30
 800c424:	18fb      	adds	r3, r7, r3
 800c426:	2200      	movs	r2, #0
 800c428:	801a      	strh	r2, [r3, #0]
 800c42a:	e08a      	b.n	800c542 <Paint_DrawChar+0x1aa>
    {
        for (Column = 0; Column < font_Width; Column++)
 800c42c:	231c      	movs	r3, #28
 800c42e:	18fb      	adds	r3, r7, r3
 800c430:	2200      	movs	r2, #0
 800c432:	801a      	strh	r2, [r3, #0]
 800c434:	e071      	b.n	800c51a <Paint_DrawChar+0x182>
        {

            // To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background)
 800c436:	2334      	movs	r3, #52	@ 0x34
 800c438:	18fb      	adds	r3, r7, r3
 800c43a:	881b      	ldrh	r3, [r3, #0]
 800c43c:	2bff      	cmp	r3, #255	@ 0xff
 800c43e:	d122      	bne.n	800c486 <Paint_DrawChar+0xee>
            { // this process is to speed up the scan
                if (*ptr & (0x80 >> (Column % 8)))
 800c440:	69bb      	ldr	r3, [r7, #24]
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	0019      	movs	r1, r3
 800c446:	201c      	movs	r0, #28
 800c448:	183b      	adds	r3, r7, r0
 800c44a:	881b      	ldrh	r3, [r3, #0]
 800c44c:	2207      	movs	r2, #7
 800c44e:	4013      	ands	r3, r2
 800c450:	2280      	movs	r2, #128	@ 0x80
 800c452:	411a      	asrs	r2, r3
 800c454:	0013      	movs	r3, r2
 800c456:	400b      	ands	r3, r1
 800c458:	d04e      	beq.n	800c4f8 <Paint_DrawChar+0x160>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800c45a:	230e      	movs	r3, #14
 800c45c:	18fa      	adds	r2, r7, r3
 800c45e:	183b      	adds	r3, r7, r0
 800c460:	8812      	ldrh	r2, [r2, #0]
 800c462:	881b      	ldrh	r3, [r3, #0]
 800c464:	18d3      	adds	r3, r2, r3
 800c466:	b298      	uxth	r0, r3
 800c468:	230c      	movs	r3, #12
 800c46a:	18fa      	adds	r2, r7, r3
 800c46c:	231e      	movs	r3, #30
 800c46e:	18fb      	adds	r3, r7, r3
 800c470:	8812      	ldrh	r2, [r2, #0]
 800c472:	881b      	ldrh	r3, [r3, #0]
 800c474:	18d3      	adds	r3, r2, r3
 800c476:	b299      	uxth	r1, r3
 800c478:	2330      	movs	r3, #48	@ 0x30
 800c47a:	18fb      	adds	r3, r7, r3
 800c47c:	881b      	ldrh	r3, [r3, #0]
 800c47e:	001a      	movs	r2, r3
 800c480:	f7ff fa8c 	bl	800b99c <Paint_SetPixel>
 800c484:	e038      	b.n	800c4f8 <Paint_DrawChar+0x160>
            }
            else
            {
                if (*ptr & (0x80 >> (Column % 8)))
 800c486:	69bb      	ldr	r3, [r7, #24]
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	0019      	movs	r1, r3
 800c48c:	201c      	movs	r0, #28
 800c48e:	183b      	adds	r3, r7, r0
 800c490:	881b      	ldrh	r3, [r3, #0]
 800c492:	2207      	movs	r2, #7
 800c494:	4013      	ands	r3, r2
 800c496:	2280      	movs	r2, #128	@ 0x80
 800c498:	411a      	asrs	r2, r3
 800c49a:	0013      	movs	r3, r2
 800c49c:	400b      	ands	r3, r1
 800c49e:	d015      	beq.n	800c4cc <Paint_DrawChar+0x134>
                {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800c4a0:	230e      	movs	r3, #14
 800c4a2:	18fa      	adds	r2, r7, r3
 800c4a4:	183b      	adds	r3, r7, r0
 800c4a6:	8812      	ldrh	r2, [r2, #0]
 800c4a8:	881b      	ldrh	r3, [r3, #0]
 800c4aa:	18d3      	adds	r3, r2, r3
 800c4ac:	b298      	uxth	r0, r3
 800c4ae:	230c      	movs	r3, #12
 800c4b0:	18fa      	adds	r2, r7, r3
 800c4b2:	231e      	movs	r3, #30
 800c4b4:	18fb      	adds	r3, r7, r3
 800c4b6:	8812      	ldrh	r2, [r2, #0]
 800c4b8:	881b      	ldrh	r3, [r3, #0]
 800c4ba:	18d3      	adds	r3, r2, r3
 800c4bc:	b299      	uxth	r1, r3
 800c4be:	2330      	movs	r3, #48	@ 0x30
 800c4c0:	18fb      	adds	r3, r7, r3
 800c4c2:	881b      	ldrh	r3, [r3, #0]
 800c4c4:	001a      	movs	r2, r3
 800c4c6:	f7ff fa69 	bl	800b99c <Paint_SetPixel>
 800c4ca:	e015      	b.n	800c4f8 <Paint_DrawChar+0x160>
                }
                else
                {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 800c4cc:	230e      	movs	r3, #14
 800c4ce:	18fa      	adds	r2, r7, r3
 800c4d0:	231c      	movs	r3, #28
 800c4d2:	18fb      	adds	r3, r7, r3
 800c4d4:	8812      	ldrh	r2, [r2, #0]
 800c4d6:	881b      	ldrh	r3, [r3, #0]
 800c4d8:	18d3      	adds	r3, r2, r3
 800c4da:	b298      	uxth	r0, r3
 800c4dc:	230c      	movs	r3, #12
 800c4de:	18fa      	adds	r2, r7, r3
 800c4e0:	231e      	movs	r3, #30
 800c4e2:	18fb      	adds	r3, r7, r3
 800c4e4:	8812      	ldrh	r2, [r2, #0]
 800c4e6:	881b      	ldrh	r3, [r3, #0]
 800c4e8:	18d3      	adds	r3, r2, r3
 800c4ea:	b299      	uxth	r1, r3
 800c4ec:	2334      	movs	r3, #52	@ 0x34
 800c4ee:	18fb      	adds	r3, r7, r3
 800c4f0:	881b      	ldrh	r3, [r3, #0]
 800c4f2:	001a      	movs	r2, r3
 800c4f4:	f7ff fa52 	bl	800b99c <Paint_SetPixel>
                }
            }
            // One pixel is 8 bits
            if (Column % 8 == 7)
 800c4f8:	231c      	movs	r3, #28
 800c4fa:	18fb      	adds	r3, r7, r3
 800c4fc:	881b      	ldrh	r3, [r3, #0]
 800c4fe:	2207      	movs	r2, #7
 800c500:	4013      	ands	r3, r2
 800c502:	b29b      	uxth	r3, r3
 800c504:	2b07      	cmp	r3, #7
 800c506:	d102      	bne.n	800c50e <Paint_DrawChar+0x176>
                ptr++;
 800c508:	69bb      	ldr	r3, [r7, #24]
 800c50a:	3301      	adds	r3, #1
 800c50c:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < font_Width; Column++)
 800c50e:	211c      	movs	r1, #28
 800c510:	187b      	adds	r3, r7, r1
 800c512:	881a      	ldrh	r2, [r3, #0]
 800c514:	187b      	adds	r3, r7, r1
 800c516:	3201      	adds	r2, #1
 800c518:	801a      	strh	r2, [r3, #0]
 800c51a:	231c      	movs	r3, #28
 800c51c:	18fb      	adds	r3, r7, r3
 800c51e:	881b      	ldrh	r3, [r3, #0]
 800c520:	697a      	ldr	r2, [r7, #20]
 800c522:	429a      	cmp	r2, r3
 800c524:	d900      	bls.n	800c528 <Paint_DrawChar+0x190>
 800c526:	e786      	b.n	800c436 <Paint_DrawChar+0x9e>
        } // Write a line
        if (font_Width % 8 != 0)
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	2207      	movs	r2, #7
 800c52c:	4013      	ands	r3, r2
 800c52e:	d002      	beq.n	800c536 <Paint_DrawChar+0x19e>
            ptr++;
 800c530:	69bb      	ldr	r3, [r7, #24]
 800c532:	3301      	adds	r3, #1
 800c534:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < font_Height; Page++)
 800c536:	211e      	movs	r1, #30
 800c538:	187b      	adds	r3, r7, r1
 800c53a:	881a      	ldrh	r2, [r3, #0]
 800c53c:	187b      	adds	r3, r7, r1
 800c53e:	3201      	adds	r2, #1
 800c540:	801a      	strh	r2, [r3, #0]
 800c542:	231e      	movs	r3, #30
 800c544:	18fb      	adds	r3, r7, r3
 800c546:	881b      	ldrh	r3, [r3, #0]
 800c548:	693a      	ldr	r2, [r7, #16]
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d900      	bls.n	800c550 <Paint_DrawChar+0x1b8>
 800c54e:	e76d      	b.n	800c42c <Paint_DrawChar+0x94>
 800c550:	e000      	b.n	800c554 <Paint_DrawChar+0x1bc>
        return;
 800c552:	46c0      	nop			@ (mov r8, r8)
    } // Write all
}
 800c554:	46bd      	mov	sp, r7
 800c556:	b008      	add	sp, #32
 800c558:	bdb0      	pop	{r4, r5, r7, pc}
 800c55a:	46c0      	nop			@ (mov r8, r8)
 800c55c:	200005b0 	.word	0x200005b0
 800c560:	1fffffe0 	.word	0x1fffffe0

0800c564 <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char *pString,
                         tFont *Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800c564:	b5b0      	push	{r4, r5, r7, lr}
 800c566:	b088      	sub	sp, #32
 800c568:	af02      	add	r7, sp, #8
 800c56a:	60ba      	str	r2, [r7, #8]
 800c56c:	607b      	str	r3, [r7, #4]
 800c56e:	240e      	movs	r4, #14
 800c570:	193b      	adds	r3, r7, r4
 800c572:	1c02      	adds	r2, r0, #0
 800c574:	801a      	strh	r2, [r3, #0]
 800c576:	200c      	movs	r0, #12
 800c578:	183b      	adds	r3, r7, r0
 800c57a:	1c0a      	adds	r2, r1, #0
 800c57c:	801a      	strh	r2, [r3, #0]
    UWORD Xpoint = Xstart;
 800c57e:	2316      	movs	r3, #22
 800c580:	18fb      	adds	r3, r7, r3
 800c582:	0021      	movs	r1, r4
 800c584:	187a      	adds	r2, r7, r1
 800c586:	8812      	ldrh	r2, [r2, #0]
 800c588:	801a      	strh	r2, [r3, #0]
    UWORD Ypoint = Ystart;
 800c58a:	2314      	movs	r3, #20
 800c58c:	18fb      	adds	r3, r7, r3
 800c58e:	183a      	adds	r2, r7, r0
 800c590:	8812      	ldrh	r2, [r2, #0]
 800c592:	801a      	strh	r2, [r3, #0]
    //			uint32_t font_Width = (*Font).chars[Acsii_Char - ' '].image->width;
    //		uint32_t font_Height = (*Font).chars[Acsii_Char - ' ' ].image->height;

    if (Xstart > Paint.Width || Ystart > Paint.Height)
 800c594:	4b1f      	ldr	r3, [pc, #124]	@ (800c614 <Paint_DrawString_EN+0xb0>)
 800c596:	889b      	ldrh	r3, [r3, #4]
 800c598:	187a      	adds	r2, r7, r1
 800c59a:	8812      	ldrh	r2, [r2, #0]
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d835      	bhi.n	800c60c <Paint_DrawString_EN+0xa8>
 800c5a0:	4b1c      	ldr	r3, [pc, #112]	@ (800c614 <Paint_DrawString_EN+0xb0>)
 800c5a2:	88db      	ldrh	r3, [r3, #6]
 800c5a4:	183a      	adds	r2, r7, r0
 800c5a6:	8812      	ldrh	r2, [r2, #0]
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d82f      	bhi.n	800c60c <Paint_DrawString_EN+0xa8>
    {
        DE_BUG("Paint_DrawString_EN Input exceeds the normal display range\r\n");
        return;
    }

    while (*pString != '\0')
 800c5ac:	e029      	b.n	800c602 <Paint_DrawString_EN+0x9e>
        //        // If the Y direction is full, reposition to(Xstart, Ystart)
        //        if ((Ypoint  + Font->Height ) > Paint.Height ) {
        //            Xpoint = Xstart;
        //            Ypoint = Ystart;
        //        }
        Paint_DrawChar(Xpoint, Ypoint, *pString, Font, Color_Background, Color_Foreground);
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	781a      	ldrb	r2, [r3, #0]
 800c5b2:	687c      	ldr	r4, [r7, #4]
 800c5b4:	2314      	movs	r3, #20
 800c5b6:	18fb      	adds	r3, r7, r3
 800c5b8:	8819      	ldrh	r1, [r3, #0]
 800c5ba:	2516      	movs	r5, #22
 800c5bc:	197b      	adds	r3, r7, r5
 800c5be:	8818      	ldrh	r0, [r3, #0]
 800c5c0:	2328      	movs	r3, #40	@ 0x28
 800c5c2:	18fb      	adds	r3, r7, r3
 800c5c4:	881b      	ldrh	r3, [r3, #0]
 800c5c6:	9301      	str	r3, [sp, #4]
 800c5c8:	232c      	movs	r3, #44	@ 0x2c
 800c5ca:	18fb      	adds	r3, r7, r3
 800c5cc:	881b      	ldrh	r3, [r3, #0]
 800c5ce:	9300      	str	r3, [sp, #0]
 800c5d0:	0023      	movs	r3, r4
 800c5d2:	f7ff fee1 	bl	800c398 <Paint_DrawChar>

        // The next character of the address

        uint32_t font_Width = (*Font).chars[*pString - ' '].image->width;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	685a      	ldr	r2, [r3, #4]
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	781b      	ldrb	r3, [r3, #0]
 800c5de:	490e      	ldr	r1, [pc, #56]	@ (800c618 <Paint_DrawString_EN+0xb4>)
 800c5e0:	468c      	mov	ip, r1
 800c5e2:	4463      	add	r3, ip
 800c5e4:	00db      	lsls	r3, r3, #3
 800c5e6:	18d3      	adds	r3, r2, r3
 800c5e8:	685b      	ldr	r3, [r3, #4]
 800c5ea:	889b      	ldrh	r3, [r3, #4]
 800c5ec:	613b      	str	r3, [r7, #16]
        // The next word of the abscissa increases the font of the broadband
        Xpoint += font_Width;
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	b299      	uxth	r1, r3
 800c5f2:	197b      	adds	r3, r7, r5
 800c5f4:	197a      	adds	r2, r7, r5
 800c5f6:	8812      	ldrh	r2, [r2, #0]
 800c5f8:	188a      	adds	r2, r1, r2
 800c5fa:	801a      	strh	r2, [r3, #0]
        pString++;
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	3301      	adds	r3, #1
 800c600:	60bb      	str	r3, [r7, #8]
    while (*pString != '\0')
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	781b      	ldrb	r3, [r3, #0]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d1d1      	bne.n	800c5ae <Paint_DrawString_EN+0x4a>
 800c60a:	e000      	b.n	800c60e <Paint_DrawString_EN+0xaa>
        return;
 800c60c:	46c0      	nop			@ (mov r8, r8)
    }
}
 800c60e:	46bd      	mov	sp, r7
 800c610:	b006      	add	sp, #24
 800c612:	bdb0      	pop	{r4, r5, r7, pc}
 800c614:	200005b0 	.word	0x200005b0
 800c618:	1fffffe0 	.word	0x1fffffe0

0800c61c <LL_RTC_TIME_GetHour>:
  *         RTC_TR           HU            LL_RTC_TIME_GetHour
  * @param  RTCx RTC Instance
  * @retval Value between Min_Data=0x01 and Max_Data=0x12 or between Min_Data=0x00 and Max_Data=0x23
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetHour(RTC_TypeDef *RTCx)
{
 800c61c:	b590      	push	{r4, r7, lr}
 800c61e:	b083      	sub	sp, #12
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  register uint32_t temp = 0U;

  temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU));
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681a      	ldr	r2, [r3, #0]
 800c628:	23fc      	movs	r3, #252	@ 0xfc
 800c62a:	039b      	lsls	r3, r3, #14
 800c62c:	401a      	ands	r2, r3
 800c62e:	0014      	movs	r4, r2
  return (uint32_t)((((temp & RTC_TR_HT) >> RTC_TR_HT_Pos) << 4U) | ((temp & RTC_TR_HU) >> RTC_TR_HU_Pos));
 800c630:	0d23      	lsrs	r3, r4, #20
 800c632:	011b      	lsls	r3, r3, #4
 800c634:	2230      	movs	r2, #48	@ 0x30
 800c636:	401a      	ands	r2, r3
 800c638:	0c23      	lsrs	r3, r4, #16
 800c63a:	210f      	movs	r1, #15
 800c63c:	400b      	ands	r3, r1
 800c63e:	4313      	orrs	r3, r2
}
 800c640:	0018      	movs	r0, r3
 800c642:	46bd      	mov	sp, r7
 800c644:	b003      	add	sp, #12
 800c646:	bd90      	pop	{r4, r7, pc}

0800c648 <LL_RTC_TIME_GetMinute>:
  *         RTC_TR           MNU           LL_RTC_TIME_GetMinute
  * @param  RTCx RTC Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x59
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetMinute(RTC_TypeDef *RTCx)
{
 800c648:	b590      	push	{r4, r7, lr}
 800c64a:	b083      	sub	sp, #12
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
  register uint32_t temp = 0U;

  temp = READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU));
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681a      	ldr	r2, [r3, #0]
 800c654:	23fe      	movs	r3, #254	@ 0xfe
 800c656:	01db      	lsls	r3, r3, #7
 800c658:	401a      	ands	r2, r3
 800c65a:	0014      	movs	r4, r2
  return (uint32_t)((((temp & RTC_TR_MNT) >> RTC_TR_MNT_Pos) << 4U) | ((temp & RTC_TR_MNU) >> RTC_TR_MNU_Pos));
 800c65c:	0b23      	lsrs	r3, r4, #12
 800c65e:	011b      	lsls	r3, r3, #4
 800c660:	2270      	movs	r2, #112	@ 0x70
 800c662:	401a      	ands	r2, r3
 800c664:	0a23      	lsrs	r3, r4, #8
 800c666:	210f      	movs	r1, #15
 800c668:	400b      	ands	r3, r1
 800c66a:	4313      	orrs	r3, r2
}
 800c66c:	0018      	movs	r0, r3
 800c66e:	46bd      	mov	sp, r7
 800c670:	b003      	add	sp, #12
 800c672:	bd90      	pop	{r4, r7, pc}

0800c674 <LL_RTC_TIME_GetSecond>:
  *         RTC_TR           SU            LL_RTC_TIME_GetSecond
  * @param  RTCx RTC Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x59
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSecond(RTC_TypeDef *RTCx)
{
 800c674:	b590      	push	{r4, r7, lr}
 800c676:	b083      	sub	sp, #12
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
  register uint32_t temp = 0U;

  temp = READ_BIT(RTCx->TR, (RTC_TR_ST | RTC_TR_SU));
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	227f      	movs	r2, #127	@ 0x7f
 800c682:	4013      	ands	r3, r2
 800c684:	001c      	movs	r4, r3
  return (uint32_t)((((temp & RTC_TR_ST) >> RTC_TR_ST_Pos) << 4U) | ((temp & RTC_TR_SU) >> RTC_TR_SU_Pos));
 800c686:	237f      	movs	r3, #127	@ 0x7f
 800c688:	4023      	ands	r3, r4
}
 800c68a:	0018      	movs	r0, r3
 800c68c:	46bd      	mov	sp, r7
 800c68e:	b003      	add	sp, #12
 800c690:	bd90      	pop	{r4, r7, pc}

0800c692 <LL_RTC_DATE_GetYear>:
  *         RTC_DR           YU            LL_RTC_DATE_GetYear
  * @param  RTCx RTC Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x99
  */
__STATIC_INLINE uint32_t LL_RTC_DATE_GetYear(RTC_TypeDef *RTCx)
{
 800c692:	b590      	push	{r4, r7, lr}
 800c694:	b083      	sub	sp, #12
 800c696:	af00      	add	r7, sp, #0
 800c698:	6078      	str	r0, [r7, #4]
  register uint32_t temp = 0U;

  temp = READ_BIT(RTCx->DR, (RTC_DR_YT | RTC_DR_YU));
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	685a      	ldr	r2, [r3, #4]
 800c69e:	23ff      	movs	r3, #255	@ 0xff
 800c6a0:	041b      	lsls	r3, r3, #16
 800c6a2:	401a      	ands	r2, r3
 800c6a4:	0014      	movs	r4, r2
  return (uint32_t)((((temp & RTC_DR_YT) >> RTC_DR_YT_Pos) << 4U) | ((temp & RTC_DR_YU) >> RTC_DR_YU_Pos));
 800c6a6:	0d23      	lsrs	r3, r4, #20
 800c6a8:	011b      	lsls	r3, r3, #4
 800c6aa:	22ff      	movs	r2, #255	@ 0xff
 800c6ac:	401a      	ands	r2, r3
 800c6ae:	0c23      	lsrs	r3, r4, #16
 800c6b0:	210f      	movs	r1, #15
 800c6b2:	400b      	ands	r3, r1
 800c6b4:	4313      	orrs	r3, r2
}
 800c6b6:	0018      	movs	r0, r3
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	b003      	add	sp, #12
 800c6bc:	bd90      	pop	{r4, r7, pc}

0800c6be <LL_RTC_DATE_GetMonth>:
  *         @arg @ref LL_RTC_MONTH_OCTOBER
  *         @arg @ref LL_RTC_MONTH_NOVEMBER
  *         @arg @ref LL_RTC_MONTH_DECEMBER
  */
__STATIC_INLINE uint32_t LL_RTC_DATE_GetMonth(RTC_TypeDef *RTCx)
{
 800c6be:	b590      	push	{r4, r7, lr}
 800c6c0:	b083      	sub	sp, #12
 800c6c2:	af00      	add	r7, sp, #0
 800c6c4:	6078      	str	r0, [r7, #4]
  register uint32_t temp = 0U;

  temp = READ_BIT(RTCx->DR, (RTC_DR_MT | RTC_DR_MU));
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	685a      	ldr	r2, [r3, #4]
 800c6ca:	23f8      	movs	r3, #248	@ 0xf8
 800c6cc:	015b      	lsls	r3, r3, #5
 800c6ce:	401a      	ands	r2, r3
 800c6d0:	0014      	movs	r4, r2
  return (uint32_t)((((temp & RTC_DR_MT) >> RTC_DR_MT_Pos) << 4U) | ((temp & RTC_DR_MU) >> RTC_DR_MU_Pos));
 800c6d2:	0b23      	lsrs	r3, r4, #12
 800c6d4:	011b      	lsls	r3, r3, #4
 800c6d6:	2210      	movs	r2, #16
 800c6d8:	401a      	ands	r2, r3
 800c6da:	0a23      	lsrs	r3, r4, #8
 800c6dc:	210f      	movs	r1, #15
 800c6de:	400b      	ands	r3, r1
 800c6e0:	4313      	orrs	r3, r2
}
 800c6e2:	0018      	movs	r0, r3
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	b003      	add	sp, #12
 800c6e8:	bd90      	pop	{r4, r7, pc}

0800c6ea <LL_RTC_DATE_GetDay>:
  *         RTC_DR           DU            LL_RTC_DATE_GetDay
  * @param  RTCx RTC Instance
  * @retval Value between Min_Data=0x01 and Max_Data=0x31
  */
__STATIC_INLINE uint32_t LL_RTC_DATE_GetDay(RTC_TypeDef *RTCx)
{
 800c6ea:	b590      	push	{r4, r7, lr}
 800c6ec:	b083      	sub	sp, #12
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
  register uint32_t temp = 0U;

  temp = READ_BIT(RTCx->DR, (RTC_DR_DT | RTC_DR_DU));
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	223f      	movs	r2, #63	@ 0x3f
 800c6f8:	4013      	ands	r3, r2
 800c6fa:	001c      	movs	r4, r3
  return (uint32_t)((((temp & RTC_DR_DT) >> RTC_DR_DT_Pos) << 4U) | ((temp & RTC_DR_DU) >> RTC_DR_DU_Pos));
 800c6fc:	233f      	movs	r3, #63	@ 0x3f
 800c6fe:	4023      	ands	r3, r4
}
 800c700:	0018      	movs	r0, r3
 800c702:	46bd      	mov	sp, r7
 800c704:	b003      	add	sp, #12
 800c706:	bd90      	pop	{r4, r7, pc}

0800c708 <battery_out>:
static const struct X0_Y0 big_0 = {67, 30};		//	Big 1
static const struct X0_Y0 small_0 = {142,46};		//	Small 0

// *************************************************************************************

void battery_out(uint16_t bat){  // Battery voltage out  X.Y
 800c708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c70a:	b087      	sub	sp, #28
 800c70c:	af02      	add	r7, sp, #8
 800c70e:	0002      	movs	r2, r0
 800c710:	1dbb      	adds	r3, r7, #6
 800c712:	801a      	strh	r2, [r3, #0]
	
	uint8_t x = 3;
 800c714:	250f      	movs	r5, #15
 800c716:	197b      	adds	r3, r7, r5
 800c718:	2203      	movs	r2, #3
 800c71a:	701a      	strb	r2, [r3, #0]
	uint8_t y = 160;
 800c71c:	260e      	movs	r6, #14
 800c71e:	19bb      	adds	r3, r7, r6
 800c720:	22a0      	movs	r2, #160	@ 0xa0
 800c722:	701a      	strb	r2, [r3, #0]
//	const uint16_t Ubat_min = 220;				// Battery min voltage 2.2 V (display).
	
	sprintf(str_array, "%2d", bat);
 800c724:	1dbb      	adds	r3, r7, #6
 800c726:	881a      	ldrh	r2, [r3, #0]
 800c728:	4926      	ldr	r1, [pc, #152]	@ (800c7c4 <battery_out+0xbc>)
 800c72a:	4b27      	ldr	r3, [pc, #156]	@ (800c7c8 <battery_out+0xc0>)
 800c72c:	0018      	movs	r0, r3
 800c72e:	f7f8 ffbf 	bl	80056b0 <sprintf_>
	Paint_ClearWindows(x, y, x+40, y+29, WHITE);	
 800c732:	197b      	adds	r3, r7, r5
 800c734:	781b      	ldrb	r3, [r3, #0]
 800c736:	b298      	uxth	r0, r3
 800c738:	19bb      	adds	r3, r7, r6
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	b299      	uxth	r1, r3
 800c73e:	197b      	adds	r3, r7, r5
 800c740:	781b      	ldrb	r3, [r3, #0]
 800c742:	b29b      	uxth	r3, r3
 800c744:	3328      	adds	r3, #40	@ 0x28
 800c746:	b29a      	uxth	r2, r3
 800c748:	19bb      	adds	r3, r7, r6
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	b29b      	uxth	r3, r3
 800c74e:	331d      	adds	r3, #29
 800c750:	b29b      	uxth	r3, r3
 800c752:	24ff      	movs	r4, #255	@ 0xff
 800c754:	9400      	str	r4, [sp, #0]
 800c756:	f7ff fb4d 	bl	800bdf4 <Paint_ClearWindows>

	Paint_DrawChar(x, y, str_array[0], &calibri_24pts, BLACK, WHITE);	// 	12, 29, 8
 800c75a:	197b      	adds	r3, r7, r5
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	b298      	uxth	r0, r3
 800c760:	19bb      	adds	r3, r7, r6
 800c762:	781b      	ldrb	r3, [r3, #0]
 800c764:	b299      	uxth	r1, r3
 800c766:	4b18      	ldr	r3, [pc, #96]	@ (800c7c8 <battery_out+0xc0>)
 800c768:	781a      	ldrb	r2, [r3, #0]
 800c76a:	4b18      	ldr	r3, [pc, #96]	@ (800c7cc <battery_out+0xc4>)
 800c76c:	24ff      	movs	r4, #255	@ 0xff
 800c76e:	9401      	str	r4, [sp, #4]
 800c770:	2400      	movs	r4, #0
 800c772:	9400      	str	r4, [sp, #0]
 800c774:	f7ff fe10 	bl	800c398 <Paint_DrawChar>
	Paint_DrawChar(x+12, y, str_array[1], &calibri_24pts, BLACK, WHITE);	
 800c778:	197b      	adds	r3, r7, r5
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	b29b      	uxth	r3, r3
 800c77e:	330c      	adds	r3, #12
 800c780:	b298      	uxth	r0, r3
 800c782:	19bb      	adds	r3, r7, r6
 800c784:	781b      	ldrb	r3, [r3, #0]
 800c786:	b299      	uxth	r1, r3
 800c788:	4b0f      	ldr	r3, [pc, #60]	@ (800c7c8 <battery_out+0xc0>)
 800c78a:	785a      	ldrb	r2, [r3, #1]
 800c78c:	4b0f      	ldr	r3, [pc, #60]	@ (800c7cc <battery_out+0xc4>)
 800c78e:	24ff      	movs	r4, #255	@ 0xff
 800c790:	9401      	str	r4, [sp, #4]
 800c792:	2400      	movs	r4, #0
 800c794:	9400      	str	r4, [sp, #0]
 800c796:	f7ff fdff 	bl	800c398 <Paint_DrawChar>
	Paint_DrawChar(x+12+12, y, str_array[2], &calibri_24pts, BLACK, WHITE);	
 800c79a:	197b      	adds	r3, r7, r5
 800c79c:	781b      	ldrb	r3, [r3, #0]
 800c79e:	b29b      	uxth	r3, r3
 800c7a0:	3318      	adds	r3, #24
 800c7a2:	b298      	uxth	r0, r3
 800c7a4:	19bb      	adds	r3, r7, r6
 800c7a6:	781b      	ldrb	r3, [r3, #0]
 800c7a8:	b299      	uxth	r1, r3
 800c7aa:	4b07      	ldr	r3, [pc, #28]	@ (800c7c8 <battery_out+0xc0>)
 800c7ac:	789a      	ldrb	r2, [r3, #2]
 800c7ae:	4b07      	ldr	r3, [pc, #28]	@ (800c7cc <battery_out+0xc4>)
 800c7b0:	24ff      	movs	r4, #255	@ 0xff
 800c7b2:	9401      	str	r4, [sp, #4]
 800c7b4:	2400      	movs	r4, #0
 800c7b6:	9400      	str	r4, [sp, #0]
 800c7b8:	f7ff fdee 	bl	800c398 <Paint_DrawChar>
	
//		EPD_1IN54_V2_DisplayPart(BlackImage);	
}
 800c7bc:	46c0      	nop			@ (mov r8, r8)
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	b005      	add	sp, #20
 800c7c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7c4:	0800fd50 	.word	0x0800fd50
 800c7c8:	200005f4 	.word	0x200005f4
 800c7cc:	20000160 	.word	0x20000160

0800c7d0 <temperature_out>:


void temperature_out(uint16_t tempr){
 800c7d0:	b590      	push	{r4, r7, lr}
 800c7d2:	b085      	sub	sp, #20
 800c7d4:	af02      	add	r7, sp, #8
 800c7d6:	0002      	movs	r2, r0
 800c7d8:	1dbb      	adds	r3, r7, #6
 800c7da:	801a      	strh	r2, [r3, #0]
	
	sprintf(str_array, "%3d", tempr);						
 800c7dc:	1dbb      	adds	r3, r7, #6
 800c7de:	881a      	ldrh	r2, [r3, #0]
 800c7e0:	4923      	ldr	r1, [pc, #140]	@ (800c870 <temperature_out+0xa0>)
 800c7e2:	4b24      	ldr	r3, [pc, #144]	@ (800c874 <temperature_out+0xa4>)
 800c7e4:	0018      	movs	r0, r3
 800c7e6:	f7f8 ff63 	bl	80056b0 <sprintf_>
	Paint_ClearWindows(big_1.x, big_1.y, 142 + 41, big_1.y + 101, WHITE);	// 40 ms		
 800c7ea:	230a      	movs	r3, #10
 800c7ec:	0018      	movs	r0, r3
 800c7ee:	231e      	movs	r3, #30
 800c7f0:	0019      	movs	r1, r3
 800c7f2:	231e      	movs	r3, #30
 800c7f4:	3365      	adds	r3, #101	@ 0x65
 800c7f6:	b29b      	uxth	r3, r3
 800c7f8:	22ff      	movs	r2, #255	@ 0xff
 800c7fa:	9200      	str	r2, [sp, #0]
 800c7fc:	22b7      	movs	r2, #183	@ 0xb7
 800c7fe:	f7ff faf9 	bl	800bdf4 <Paint_ClearWindows>

	Paint_DrawChar(big_1.x, big_1.y, str_array[0], &calibri_104pts, BLACK, WHITE); // 15 ms
 800c802:	230a      	movs	r3, #10
 800c804:	0018      	movs	r0, r3
 800c806:	231e      	movs	r3, #30
 800c808:	001c      	movs	r4, r3
 800c80a:	4b1a      	ldr	r3, [pc, #104]	@ (800c874 <temperature_out+0xa4>)
 800c80c:	781a      	ldrb	r2, [r3, #0]
 800c80e:	4b1a      	ldr	r3, [pc, #104]	@ (800c878 <temperature_out+0xa8>)
 800c810:	21ff      	movs	r1, #255	@ 0xff
 800c812:	9101      	str	r1, [sp, #4]
 800c814:	2100      	movs	r1, #0
 800c816:	9100      	str	r1, [sp, #0]
 800c818:	0021      	movs	r1, r4
 800c81a:	f7ff fdbd 	bl	800c398 <Paint_DrawChar>
	Paint_DrawChar(big_0.x, big_0.y, str_array[1], &calibri_104pts, BLACK, WHITE);
 800c81e:	2343      	movs	r3, #67	@ 0x43
 800c820:	0018      	movs	r0, r3
 800c822:	231e      	movs	r3, #30
 800c824:	001c      	movs	r4, r3
 800c826:	4b13      	ldr	r3, [pc, #76]	@ (800c874 <temperature_out+0xa4>)
 800c828:	785a      	ldrb	r2, [r3, #1]
 800c82a:	4b13      	ldr	r3, [pc, #76]	@ (800c878 <temperature_out+0xa8>)
 800c82c:	21ff      	movs	r1, #255	@ 0xff
 800c82e:	9101      	str	r1, [sp, #4]
 800c830:	2100      	movs	r1, #0
 800c832:	9100      	str	r1, [sp, #0]
 800c834:	0021      	movs	r1, r4
 800c836:	f7ff fdaf 	bl	800c398 <Paint_DrawChar>
	Paint_DrawPoint(131, 100, BLACK, DOT_PIXEL_5X5, DOT_FILL_AROUND); //Draw decimal point
 800c83a:	2301      	movs	r3, #1
 800c83c:	9300      	str	r3, [sp, #0]
 800c83e:	2305      	movs	r3, #5
 800c840:	2200      	movs	r2, #0
 800c842:	2164      	movs	r1, #100	@ 0x64
 800c844:	2083      	movs	r0, #131	@ 0x83
 800c846:	f7ff fb1f 	bl	800be88 <Paint_DrawPoint>
	Paint_DrawChar(small_0.x, small_0.y, str_array[2], &calibri_80pts, BLACK, WHITE);					
 800c84a:	238e      	movs	r3, #142	@ 0x8e
 800c84c:	0018      	movs	r0, r3
 800c84e:	232e      	movs	r3, #46	@ 0x2e
 800c850:	001c      	movs	r4, r3
 800c852:	4b08      	ldr	r3, [pc, #32]	@ (800c874 <temperature_out+0xa4>)
 800c854:	789a      	ldrb	r2, [r3, #2]
 800c856:	4b09      	ldr	r3, [pc, #36]	@ (800c87c <temperature_out+0xac>)
 800c858:	21ff      	movs	r1, #255	@ 0xff
 800c85a:	9101      	str	r1, [sp, #4]
 800c85c:	2100      	movs	r1, #0
 800c85e:	9100      	str	r1, [sp, #0]
 800c860:	0021      	movs	r1, r4
 800c862:	f7ff fd99 	bl	800c398 <Paint_DrawChar>

//	EPD_1IN54_V2_DisplayPart(BlackImage);	// 0.84 sec ms
}
 800c866:	46c0      	nop			@ (mov r8, r8)
 800c868:	46bd      	mov	sp, r7
 800c86a:	b003      	add	sp, #12
 800c86c:	bd90      	pop	{r4, r7, pc}
 800c86e:	46c0      	nop			@ (mov r8, r8)
 800c870:	0800fd54 	.word	0x0800fd54
 800c874:	200005f4 	.word	0x200005f4
 800c878:	20000150 	.word	0x20000150
 800c87c:	20000170 	.word	0x20000170

0800c880 <humidity_out>:


void humidity_out(uint16_t hum){
 800c880:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c882:	b087      	sub	sp, #28
 800c884:	af02      	add	r7, sp, #8
 800c886:	0002      	movs	r2, r0
 800c888:	1dbb      	adds	r3, r7, #6
 800c88a:	801a      	strh	r2, [r3, #0]

	uint8_t x = 125;
 800c88c:	240f      	movs	r4, #15
 800c88e:	193b      	adds	r3, r7, r4
 800c890:	227d      	movs	r2, #125	@ 0x7d
 800c892:	701a      	strb	r2, [r3, #0]
	uint8_t y = 150;
 800c894:	250e      	movs	r5, #14
 800c896:	197b      	adds	r3, r7, r5
 800c898:	2296      	movs	r2, #150	@ 0x96
 800c89a:	701a      	strb	r2, [r3, #0]
	char pcent = '%';
 800c89c:	260d      	movs	r6, #13
 800c89e:	19bb      	adds	r3, r7, r6
 800c8a0:	2225      	movs	r2, #37	@ 0x25
 800c8a2:	701a      	strb	r2, [r3, #0]
	sprintf(str_array, "%2d", hum);
 800c8a4:	1dbb      	adds	r3, r7, #6
 800c8a6:	881a      	ldrh	r2, [r3, #0]
 800c8a8:	4914      	ldr	r1, [pc, #80]	@ (800c8fc <humidity_out+0x7c>)
 800c8aa:	4b15      	ldr	r3, [pc, #84]	@ (800c900 <humidity_out+0x80>)
 800c8ac:	0018      	movs	r0, r3
 800c8ae:	f7f8 feff 	bl	80056b0 <sprintf_>
	// append % to string
    strncat(str_array, &pcent, 1);
 800c8b2:	19b9      	adds	r1, r7, r6
 800c8b4:	4b12      	ldr	r3, [pc, #72]	@ (800c900 <humidity_out+0x80>)
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	0018      	movs	r0, r3
 800c8ba:	f001 f92b 	bl	800db14 <strncat>
	
	/******************************************************************************
	void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,tFont* Font, UWORD Color_Foreground, UWORD Color_Background)
	******************************************************************************/

	Paint_ClearWindows(x, y, 200, 197, WHITE);	// 10^1
 800c8be:	193b      	adds	r3, r7, r4
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	b298      	uxth	r0, r3
 800c8c4:	197b      	adds	r3, r7, r5
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	b299      	uxth	r1, r3
 800c8ca:	23ff      	movs	r3, #255	@ 0xff
 800c8cc:	9300      	str	r3, [sp, #0]
 800c8ce:	23c5      	movs	r3, #197	@ 0xc5
 800c8d0:	22c8      	movs	r2, #200	@ 0xc8
 800c8d2:	f7ff fa8f 	bl	800bdf4 <Paint_ClearWindows>
	Paint_DrawString_EN(x, y, (char*)str_array, &calibri_36pts, WHITE, BLACK); // 20, 34
 800c8d6:	193b      	adds	r3, r7, r4
 800c8d8:	781b      	ldrb	r3, [r3, #0]
 800c8da:	b298      	uxth	r0, r3
 800c8dc:	197b      	adds	r3, r7, r5
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	b299      	uxth	r1, r3
 800c8e2:	4b08      	ldr	r3, [pc, #32]	@ (800c904 <humidity_out+0x84>)
 800c8e4:	4a06      	ldr	r2, [pc, #24]	@ (800c900 <humidity_out+0x80>)
 800c8e6:	2400      	movs	r4, #0
 800c8e8:	9401      	str	r4, [sp, #4]
 800c8ea:	24ff      	movs	r4, #255	@ 0xff
 800c8ec:	9400      	str	r4, [sp, #0]
 800c8ee:	f7ff fe39 	bl	800c564 <Paint_DrawString_EN>

}
 800c8f2:	46c0      	nop			@ (mov r8, r8)
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	b005      	add	sp, #20
 800c8f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8fa:	46c0      	nop			@ (mov r8, r8)
 800c8fc:	0800fd50 	.word	0x0800fd50
 800c900:	200005f4 	.word	0x200005f4
 800c904:	20000168 	.word	0x20000168

0800c908 <ESP_Init>:



//  **************************************************************************************

int ESP_Init(void){ 
 800c908:	b580      	push	{r7, lr}
 800c90a:	b086      	sub	sp, #24
 800c90c:	af04      	add	r7, sp, #16
	printf("ESP_Init\n");
 800c90e:	4b26      	ldr	r3, [pc, #152]	@ (800c9a8 <ESP_Init+0xa0>)
 800c910:	0018      	movs	r0, r3
 800c912:	f7f8 feaf 	bl	8005674 <printf_>
    DEV_Module_Init();		// DC_L();SPI_CS_H();RST_H(); - set initial values
 800c916:	f7fe fc87 	bl	800b228 <DEV_Module_Init>
    EPD_1IN54_V2_Init();	// Reset pin set low, set LUT etc.
 800c91a:	f7fe fe05 	bl	800b528 <EPD_1IN54_V2_Init>

    //Create a new image cache    
    /* !!!  you have to edit the startup_stm32fxxx.s file and set a heap size = 1400 !!!  */
    UWORD Imagesize = ((EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1)) * EPD_1IN54_V2_HEIGHT;
 800c91e:	1dbb      	adds	r3, r7, #6
 800c920:	4a22      	ldr	r2, [pc, #136]	@ (800c9ac <ESP_Init+0xa4>)
 800c922:	801a      	strh	r2, [r3, #0]
    if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 800c924:	1dbb      	adds	r3, r7, #6
 800c926:	881b      	ldrh	r3, [r3, #0]
 800c928:	0018      	movs	r0, r3
 800c92a:	f000 faad 	bl	800ce88 <malloc>
 800c92e:	0003      	movs	r3, r0
 800c930:	001a      	movs	r2, r3
 800c932:	4b1f      	ldr	r3, [pc, #124]	@ (800c9b0 <ESP_Init+0xa8>)
 800c934:	601a      	str	r2, [r3, #0]
 800c936:	4b1e      	ldr	r3, [pc, #120]	@ (800c9b0 <ESP_Init+0xa8>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d106      	bne.n	800c94c <ESP_Init+0x44>
        printf("Failed to apply for black memory...\r\n");
 800c93e:	4b1d      	ldr	r3, [pc, #116]	@ (800c9b4 <ESP_Init+0xac>)
 800c940:	0018      	movs	r0, r3
 800c942:	f7f8 fe97 	bl	8005674 <printf_>
        return -1;
 800c946:	2301      	movs	r3, #1
 800c948:	425b      	negs	r3, r3
 800c94a:	e029      	b.n	800c9a0 <ESP_Init+0x98>
    }
	
	Paint_NewImage(BlackImage, EPD_1IN54_V2_WIDTH, EPD_1IN54_V2_HEIGHT, 0, WHITE);
 800c94c:	4b18      	ldr	r3, [pc, #96]	@ (800c9b0 <ESP_Init+0xa8>)
 800c94e:	6818      	ldr	r0, [r3, #0]
 800c950:	23ff      	movs	r3, #255	@ 0xff
 800c952:	9300      	str	r3, [sp, #0]
 800c954:	2300      	movs	r3, #0
 800c956:	22c8      	movs	r2, #200	@ 0xc8
 800c958:	21c8      	movs	r1, #200	@ 0xc8
 800c95a:	f7fe ffa3 	bl	800b8a4 <Paint_NewImage>
	
//  	Paint_Clear(WHITE);
    Paint_SelectImage(BlackImage);
 800c95e:	4b14      	ldr	r3, [pc, #80]	@ (800c9b0 <ESP_Init+0xa8>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	0018      	movs	r0, r3
 800c964:	f7ff f80c 	bl	800b980 <Paint_SelectImage>
    Paint_Clear(WHITE);
 800c968:	20ff      	movs	r0, #255	@ 0xff
 800c96a:	f7ff f9b5 	bl	800bcd8 <Paint_Clear>
	Paint_DrawRectangle(2, 3, 198, 140, BLACK, DOT_PIXEL_2X2, DRAW_FILL_EMPTY);
 800c96e:	2300      	movs	r3, #0
 800c970:	9302      	str	r3, [sp, #8]
 800c972:	2302      	movs	r3, #2
 800c974:	9301      	str	r3, [sp, #4]
 800c976:	2300      	movs	r3, #0
 800c978:	9300      	str	r3, [sp, #0]
 800c97a:	238c      	movs	r3, #140	@ 0x8c
 800c97c:	22c6      	movs	r2, #198	@ 0xc6
 800c97e:	2103      	movs	r1, #3
 800c980:	2002      	movs	r0, #2
 800c982:	f7ff fc41 	bl	800c208 <Paint_DrawRectangle>
	
    EPD_1IN54_V2_Display(BlackImage);	// Write data to display's RAM (do you really need it?)
 800c986:	4b0a      	ldr	r3, [pc, #40]	@ (800c9b0 <ESP_Init+0xa8>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	0018      	movs	r0, r3
 800c98c:	f7fe fe56 	bl	800b63c <EPD_1IN54_V2_Display>
	 
    EPD_1IN54_V2_DisplayPartBaseImage(BlackImage);
 800c990:	4b07      	ldr	r3, [pc, #28]	@ (800c9b0 <ESP_Init+0xa8>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	0018      	movs	r0, r3
 800c996:	f7fe fea0 	bl	800b6da <EPD_1IN54_V2_DisplayPartBaseImage>
	EPD_1IN54_V2_Init_Partial();
 800c99a:	f7fe fe0d 	bl	800b5b8 <EPD_1IN54_V2_Init_Partial>
	
	return 0;
 800c99e:	2300      	movs	r3, #0
}
 800c9a0:	0018      	movs	r0, r3
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	b002      	add	sp, #8
 800c9a6:	bd80      	pop	{r7, pc}
 800c9a8:	0800fd58 	.word	0x0800fd58
 800c9ac:	00001388 	.word	0x00001388
 800c9b0:	200005f0 	.word	0x200005f0
 800c9b4:	0800fd64 	.word	0x0800fd64

0800c9b8 <final_message>:


void final_message(uint16_t bat_voltage){ 	// sleep
 800c9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9ba:	b087      	sub	sp, #28
 800c9bc:	af02      	add	r7, sp, #8
 800c9be:	0002      	movs	r2, r0
 800c9c0:	1dbb      	adds	r3, r7, #6
 800c9c2:	801a      	strh	r2, [r3, #0]
	
	ESP_Init();
 800c9c4:	f7ff ffa0 	bl	800c908 <ESP_Init>
	uint16_t Xstart = 5;
 800c9c8:	250e      	movs	r5, #14
 800c9ca:	197b      	adds	r3, r7, r5
 800c9cc:	2205      	movs	r2, #5
 800c9ce:	801a      	strh	r2, [r3, #0]
	uint16_t Ystart = 2;
 800c9d0:	260c      	movs	r6, #12
 800c9d2:	19bb      	adds	r3, r7, r6
 800c9d4:	2202      	movs	r2, #2
 800c9d6:	801a      	strh	r2, [r3, #0]
	
	EPD_1IN54_V2_Init();
 800c9d8:	f7fe fda6 	bl	800b528 <EPD_1IN54_V2_Init>
	Paint_SelectImage(BlackImage);	// Paint.Image = image;
 800c9dc:	4b32      	ldr	r3, [pc, #200]	@ (800caa8 <final_message+0xf0>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	0018      	movs	r0, r3
 800c9e2:	f7fe ffcd 	bl	800b980 <Paint_SelectImage>
	Paint_Clear(WHITE);
 800c9e6:	20ff      	movs	r0, #255	@ 0xff
 800c9e8:	f7ff f976 	bl	800bcd8 <Paint_Clear>

	sprintf(str_array, "%d", bat_voltage);	
 800c9ec:	1dbb      	adds	r3, r7, #6
 800c9ee:	881a      	ldrh	r2, [r3, #0]
 800c9f0:	492e      	ldr	r1, [pc, #184]	@ (800caac <final_message+0xf4>)
 800c9f2:	4b2f      	ldr	r3, [pc, #188]	@ (800cab0 <final_message+0xf8>)
 800c9f4:	0018      	movs	r0, r3
 800c9f6:	f7f8 fe5b 	bl	80056b0 <sprintf_>
	Paint_DrawString_EN(Xstart, Ystart, "Vbat:", &calibri_20pts, WHITE, BLACK);			// font size 17,24
 800c9fa:	4c2e      	ldr	r4, [pc, #184]	@ (800cab4 <final_message+0xfc>)
 800c9fc:	4a2e      	ldr	r2, [pc, #184]	@ (800cab8 <final_message+0x100>)
 800c9fe:	19bb      	adds	r3, r7, r6
 800ca00:	8819      	ldrh	r1, [r3, #0]
 800ca02:	197b      	adds	r3, r7, r5
 800ca04:	8818      	ldrh	r0, [r3, #0]
 800ca06:	2300      	movs	r3, #0
 800ca08:	9301      	str	r3, [sp, #4]
 800ca0a:	23ff      	movs	r3, #255	@ 0xff
 800ca0c:	9300      	str	r3, [sp, #0]
 800ca0e:	0023      	movs	r3, r4
 800ca10:	f7ff fda8 	bl	800c564 <Paint_DrawString_EN>
	Paint_DrawString_EN(Xstart + 7*10, Ystart, str_array, &calibri_20pts, WHITE, BLACK);
 800ca14:	197b      	adds	r3, r7, r5
 800ca16:	881b      	ldrh	r3, [r3, #0]
 800ca18:	3346      	adds	r3, #70	@ 0x46
 800ca1a:	b298      	uxth	r0, r3
 800ca1c:	4c25      	ldr	r4, [pc, #148]	@ (800cab4 <final_message+0xfc>)
 800ca1e:	4a24      	ldr	r2, [pc, #144]	@ (800cab0 <final_message+0xf8>)
 800ca20:	19bb      	adds	r3, r7, r6
 800ca22:	8819      	ldrh	r1, [r3, #0]
 800ca24:	2300      	movs	r3, #0
 800ca26:	9301      	str	r3, [sp, #4]
 800ca28:	23ff      	movs	r3, #255	@ 0xff
 800ca2a:	9300      	str	r3, [sp, #0]
 800ca2c:	0023      	movs	r3, r4
 800ca2e:	f7ff fd99 	bl	800c564 <Paint_DrawString_EN>
	
	Show_RTC_Calendar();
 800ca32:	f000 f849 	bl	800cac8 <Show_RTC_Calendar>
	Paint_DrawString_EN(Xstart, Ystart+ 75, "EndTime:", &calibri_20pts, WHITE, BLACK);
 800ca36:	19bb      	adds	r3, r7, r6
 800ca38:	881b      	ldrh	r3, [r3, #0]
 800ca3a:	334b      	adds	r3, #75	@ 0x4b
 800ca3c:	b299      	uxth	r1, r3
 800ca3e:	4c1d      	ldr	r4, [pc, #116]	@ (800cab4 <final_message+0xfc>)
 800ca40:	4a1e      	ldr	r2, [pc, #120]	@ (800cabc <final_message+0x104>)
 800ca42:	197b      	adds	r3, r7, r5
 800ca44:	8818      	ldrh	r0, [r3, #0]
 800ca46:	2300      	movs	r3, #0
 800ca48:	9301      	str	r3, [sp, #4]
 800ca4a:	23ff      	movs	r3, #255	@ 0xff
 800ca4c:	9300      	str	r3, [sp, #0]
 800ca4e:	0023      	movs	r3, r4
 800ca50:	f7ff fd88 	bl	800c564 <Paint_DrawString_EN>
	Paint_DrawString_EN(Xstart, Ystart + 100, aEndTime, &calibri_20pts, WHITE, BLACK);
 800ca54:	19bb      	adds	r3, r7, r6
 800ca56:	881b      	ldrh	r3, [r3, #0]
 800ca58:	3364      	adds	r3, #100	@ 0x64
 800ca5a:	b299      	uxth	r1, r3
 800ca5c:	4c15      	ldr	r4, [pc, #84]	@ (800cab4 <final_message+0xfc>)
 800ca5e:	4a18      	ldr	r2, [pc, #96]	@ (800cac0 <final_message+0x108>)
 800ca60:	197b      	adds	r3, r7, r5
 800ca62:	8818      	ldrh	r0, [r3, #0]
 800ca64:	2300      	movs	r3, #0
 800ca66:	9301      	str	r3, [sp, #4]
 800ca68:	23ff      	movs	r3, #255	@ 0xff
 800ca6a:	9300      	str	r3, [sp, #0]
 800ca6c:	0023      	movs	r3, r4
 800ca6e:	f7ff fd79 	bl	800c564 <Paint_DrawString_EN>
	Paint_DrawString_EN(Xstart + 6*10 + 20, Ystart + 100, aEndDate, &calibri_20pts, WHITE, BLACK);
 800ca72:	197b      	adds	r3, r7, r5
 800ca74:	881b      	ldrh	r3, [r3, #0]
 800ca76:	3350      	adds	r3, #80	@ 0x50
 800ca78:	b298      	uxth	r0, r3
 800ca7a:	19bb      	adds	r3, r7, r6
 800ca7c:	881b      	ldrh	r3, [r3, #0]
 800ca7e:	3364      	adds	r3, #100	@ 0x64
 800ca80:	b299      	uxth	r1, r3
 800ca82:	4b0c      	ldr	r3, [pc, #48]	@ (800cab4 <final_message+0xfc>)
 800ca84:	4a0f      	ldr	r2, [pc, #60]	@ (800cac4 <final_message+0x10c>)
 800ca86:	2400      	movs	r4, #0
 800ca88:	9401      	str	r4, [sp, #4]
 800ca8a:	24ff      	movs	r4, #255	@ 0xff
 800ca8c:	9400      	str	r4, [sp, #0]
 800ca8e:	f7ff fd69 	bl	800c564 <Paint_DrawString_EN>
			
	EPD_1IN54_V2_Display(BlackImage);
 800ca92:	4b05      	ldr	r3, [pc, #20]	@ (800caa8 <final_message+0xf0>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	0018      	movs	r0, r3
 800ca98:	f7fe fdd0 	bl	800b63c <EPD_1IN54_V2_Display>
	EPD_1IN54_V2_Sleep();
 800ca9c:	f7fe fef6 	bl	800b88c <EPD_1IN54_V2_Sleep>
}
 800caa0:	46c0      	nop			@ (mov r8, r8)
 800caa2:	46bd      	mov	sp, r7
 800caa4:	b005      	add	sp, #20
 800caa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800caa8:	200005f0 	.word	0x200005f0
 800caac:	0800fd8c 	.word	0x0800fd8c
 800cab0:	200005f4 	.word	0x200005f4
 800cab4:	20000158 	.word	0x20000158
 800cab8:	0800fd90 	.word	0x0800fd90
 800cabc:	0800fd98 	.word	0x0800fd98
 800cac0:	200005c8 	.word	0x200005c8
 800cac4:	200005dc 	.word	0x200005dc

0800cac8 <Show_RTC_Calendar>:



void Show_RTC_Calendar(void)
{
 800cac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800caca:	b083      	sub	sp, #12
 800cacc:	af02      	add	r7, sp, #8
  /* Note: need to convert in decimal value in using __LL_RTC_CONVERT_BCD2BIN helper macro */
  /* Display time Format : hh:mm:ss */
  sprintf((char*)aEndTime,"%.2d:%.2d:%.2d", __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC)), 
 800cace:	4b61      	ldr	r3, [pc, #388]	@ (800cc54 <Show_RTC_Calendar+0x18c>)
 800cad0:	0018      	movs	r0, r3
 800cad2:	f7ff fda3 	bl	800c61c <LL_RTC_TIME_GetHour>
 800cad6:	0003      	movs	r3, r0
 800cad8:	b2db      	uxtb	r3, r3
 800cada:	111b      	asrs	r3, r3, #4
 800cadc:	b2db      	uxtb	r3, r3
 800cade:	220f      	movs	r2, #15
 800cae0:	4013      	ands	r3, r2
 800cae2:	b2db      	uxtb	r3, r3
 800cae4:	1c1a      	adds	r2, r3, #0
 800cae6:	0092      	lsls	r2, r2, #2
 800cae8:	18d3      	adds	r3, r2, r3
 800caea:	18db      	adds	r3, r3, r3
 800caec:	b2dc      	uxtb	r4, r3
 800caee:	4b59      	ldr	r3, [pc, #356]	@ (800cc54 <Show_RTC_Calendar+0x18c>)
 800caf0:	0018      	movs	r0, r3
 800caf2:	f7ff fd93 	bl	800c61c <LL_RTC_TIME_GetHour>
 800caf6:	0003      	movs	r3, r0
 800caf8:	b2db      	uxtb	r3, r3
 800cafa:	220f      	movs	r2, #15
 800cafc:	4013      	ands	r3, r2
 800cafe:	b2db      	uxtb	r3, r3
 800cb00:	18e3      	adds	r3, r4, r3
 800cb02:	b2db      	uxtb	r3, r3
 800cb04:	001d      	movs	r5, r3
          __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC)), 
 800cb06:	4b53      	ldr	r3, [pc, #332]	@ (800cc54 <Show_RTC_Calendar+0x18c>)
 800cb08:	0018      	movs	r0, r3
 800cb0a:	f7ff fd9d 	bl	800c648 <LL_RTC_TIME_GetMinute>
 800cb0e:	0003      	movs	r3, r0
 800cb10:	b2db      	uxtb	r3, r3
 800cb12:	111b      	asrs	r3, r3, #4
 800cb14:	b2db      	uxtb	r3, r3
 800cb16:	220f      	movs	r2, #15
 800cb18:	4013      	ands	r3, r2
 800cb1a:	b2db      	uxtb	r3, r3
 800cb1c:	1c1a      	adds	r2, r3, #0
 800cb1e:	0092      	lsls	r2, r2, #2
 800cb20:	18d3      	adds	r3, r2, r3
 800cb22:	18db      	adds	r3, r3, r3
 800cb24:	b2dc      	uxtb	r4, r3
 800cb26:	4b4b      	ldr	r3, [pc, #300]	@ (800cc54 <Show_RTC_Calendar+0x18c>)
 800cb28:	0018      	movs	r0, r3
 800cb2a:	f7ff fd8d 	bl	800c648 <LL_RTC_TIME_GetMinute>
 800cb2e:	0003      	movs	r3, r0
 800cb30:	b2db      	uxtb	r3, r3
 800cb32:	220f      	movs	r2, #15
 800cb34:	4013      	ands	r3, r2
 800cb36:	b2db      	uxtb	r3, r3
 800cb38:	18e3      	adds	r3, r4, r3
 800cb3a:	b2db      	uxtb	r3, r3
  sprintf((char*)aEndTime,"%.2d:%.2d:%.2d", __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC)), 
 800cb3c:	001e      	movs	r6, r3
          __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC)));
 800cb3e:	4b45      	ldr	r3, [pc, #276]	@ (800cc54 <Show_RTC_Calendar+0x18c>)
 800cb40:	0018      	movs	r0, r3
 800cb42:	f7ff fd97 	bl	800c674 <LL_RTC_TIME_GetSecond>
 800cb46:	0003      	movs	r3, r0
 800cb48:	b2db      	uxtb	r3, r3
 800cb4a:	111b      	asrs	r3, r3, #4
 800cb4c:	b2db      	uxtb	r3, r3
 800cb4e:	220f      	movs	r2, #15
 800cb50:	4013      	ands	r3, r2
 800cb52:	b2db      	uxtb	r3, r3
 800cb54:	1c1a      	adds	r2, r3, #0
 800cb56:	0092      	lsls	r2, r2, #2
 800cb58:	18d3      	adds	r3, r2, r3
 800cb5a:	18db      	adds	r3, r3, r3
 800cb5c:	b2dc      	uxtb	r4, r3
 800cb5e:	4b3d      	ldr	r3, [pc, #244]	@ (800cc54 <Show_RTC_Calendar+0x18c>)
 800cb60:	0018      	movs	r0, r3
 800cb62:	f7ff fd87 	bl	800c674 <LL_RTC_TIME_GetSecond>
 800cb66:	0003      	movs	r3, r0
 800cb68:	b2db      	uxtb	r3, r3
 800cb6a:	220f      	movs	r2, #15
 800cb6c:	4013      	ands	r3, r2
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	18e3      	adds	r3, r4, r3
 800cb72:	b2db      	uxtb	r3, r3
  sprintf((char*)aEndTime,"%.2d:%.2d:%.2d", __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC)), 
 800cb74:	4938      	ldr	r1, [pc, #224]	@ (800cc58 <Show_RTC_Calendar+0x190>)
 800cb76:	4839      	ldr	r0, [pc, #228]	@ (800cc5c <Show_RTC_Calendar+0x194>)
 800cb78:	9300      	str	r3, [sp, #0]
 800cb7a:	0033      	movs	r3, r6
 800cb7c:	002a      	movs	r2, r5
 800cb7e:	f7f8 fd97 	bl	80056b0 <sprintf_>
  
  /* Display date Format : mm-dd-yy */
  sprintf((char*)aEndDate,"%.2d-%.2d-%.2d", __LL_RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC)), 
 800cb82:	4b34      	ldr	r3, [pc, #208]	@ (800cc54 <Show_RTC_Calendar+0x18c>)
 800cb84:	0018      	movs	r0, r3
 800cb86:	f7ff fd9a 	bl	800c6be <LL_RTC_DATE_GetMonth>
 800cb8a:	0003      	movs	r3, r0
 800cb8c:	b2db      	uxtb	r3, r3
 800cb8e:	111b      	asrs	r3, r3, #4
 800cb90:	b2db      	uxtb	r3, r3
 800cb92:	220f      	movs	r2, #15
 800cb94:	4013      	ands	r3, r2
 800cb96:	b2db      	uxtb	r3, r3
 800cb98:	1c1a      	adds	r2, r3, #0
 800cb9a:	0092      	lsls	r2, r2, #2
 800cb9c:	18d3      	adds	r3, r2, r3
 800cb9e:	18db      	adds	r3, r3, r3
 800cba0:	b2dc      	uxtb	r4, r3
 800cba2:	4b2c      	ldr	r3, [pc, #176]	@ (800cc54 <Show_RTC_Calendar+0x18c>)
 800cba4:	0018      	movs	r0, r3
 800cba6:	f7ff fd8a 	bl	800c6be <LL_RTC_DATE_GetMonth>
 800cbaa:	0003      	movs	r3, r0
 800cbac:	b2db      	uxtb	r3, r3
 800cbae:	220f      	movs	r2, #15
 800cbb0:	4013      	ands	r3, r2
 800cbb2:	b2db      	uxtb	r3, r3
 800cbb4:	18e3      	adds	r3, r4, r3
 800cbb6:	b2db      	uxtb	r3, r3
 800cbb8:	001d      	movs	r5, r3
          __LL_RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetDay(RTC)), 
 800cbba:	4b26      	ldr	r3, [pc, #152]	@ (800cc54 <Show_RTC_Calendar+0x18c>)
 800cbbc:	0018      	movs	r0, r3
 800cbbe:	f7ff fd94 	bl	800c6ea <LL_RTC_DATE_GetDay>
 800cbc2:	0003      	movs	r3, r0
 800cbc4:	b2db      	uxtb	r3, r3
 800cbc6:	111b      	asrs	r3, r3, #4
 800cbc8:	b2db      	uxtb	r3, r3
 800cbca:	220f      	movs	r2, #15
 800cbcc:	4013      	ands	r3, r2
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	1c1a      	adds	r2, r3, #0
 800cbd2:	0092      	lsls	r2, r2, #2
 800cbd4:	18d3      	adds	r3, r2, r3
 800cbd6:	18db      	adds	r3, r3, r3
 800cbd8:	b2dc      	uxtb	r4, r3
 800cbda:	4b1e      	ldr	r3, [pc, #120]	@ (800cc54 <Show_RTC_Calendar+0x18c>)
 800cbdc:	0018      	movs	r0, r3
 800cbde:	f7ff fd84 	bl	800c6ea <LL_RTC_DATE_GetDay>
 800cbe2:	0003      	movs	r3, r0
 800cbe4:	b2db      	uxtb	r3, r3
 800cbe6:	220f      	movs	r2, #15
 800cbe8:	4013      	ands	r3, r2
 800cbea:	b2db      	uxtb	r3, r3
 800cbec:	18e3      	adds	r3, r4, r3
 800cbee:	b2db      	uxtb	r3, r3
  sprintf((char*)aEndDate,"%.2d-%.2d-%.2d", __LL_RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC)), 
 800cbf0:	001e      	movs	r6, r3
          2000 + __LL_RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC)));
 800cbf2:	4b18      	ldr	r3, [pc, #96]	@ (800cc54 <Show_RTC_Calendar+0x18c>)
 800cbf4:	0018      	movs	r0, r3
 800cbf6:	f7ff fd4c 	bl	800c692 <LL_RTC_DATE_GetYear>
 800cbfa:	0003      	movs	r3, r0
 800cbfc:	b2db      	uxtb	r3, r3
 800cbfe:	111b      	asrs	r3, r3, #4
 800cc00:	b2db      	uxtb	r3, r3
 800cc02:	220f      	movs	r2, #15
 800cc04:	4013      	ands	r3, r2
 800cc06:	b2db      	uxtb	r3, r3
 800cc08:	1c1a      	adds	r2, r3, #0
 800cc0a:	0092      	lsls	r2, r2, #2
 800cc0c:	18d3      	adds	r3, r2, r3
 800cc0e:	18db      	adds	r3, r3, r3
 800cc10:	b2dc      	uxtb	r4, r3
 800cc12:	4b10      	ldr	r3, [pc, #64]	@ (800cc54 <Show_RTC_Calendar+0x18c>)
 800cc14:	0018      	movs	r0, r3
 800cc16:	f7ff fd3c 	bl	800c692 <LL_RTC_DATE_GetYear>
 800cc1a:	0003      	movs	r3, r0
 800cc1c:	b2db      	uxtb	r3, r3
 800cc1e:	220f      	movs	r2, #15
 800cc20:	4013      	ands	r3, r2
 800cc22:	b2db      	uxtb	r3, r3
 800cc24:	18e3      	adds	r3, r4, r3
 800cc26:	b2db      	uxtb	r3, r3
  sprintf((char*)aEndDate,"%.2d-%.2d-%.2d", __LL_RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC)), 
 800cc28:	22fa      	movs	r2, #250	@ 0xfa
 800cc2a:	00d2      	lsls	r2, r2, #3
 800cc2c:	4694      	mov	ip, r2
 800cc2e:	4463      	add	r3, ip
 800cc30:	490b      	ldr	r1, [pc, #44]	@ (800cc60 <Show_RTC_Calendar+0x198>)
 800cc32:	480c      	ldr	r0, [pc, #48]	@ (800cc64 <Show_RTC_Calendar+0x19c>)
 800cc34:	9300      	str	r3, [sp, #0]
 800cc36:	0033      	movs	r3, r6
 800cc38:	002a      	movs	r2, r5
 800cc3a:	f7f8 fd39 	bl	80056b0 <sprintf_>
  printf("%s\t %s\n", aEndTime, aEndDate);
 800cc3e:	4a09      	ldr	r2, [pc, #36]	@ (800cc64 <Show_RTC_Calendar+0x19c>)
 800cc40:	4906      	ldr	r1, [pc, #24]	@ (800cc5c <Show_RTC_Calendar+0x194>)
 800cc42:	4b09      	ldr	r3, [pc, #36]	@ (800cc68 <Show_RTC_Calendar+0x1a0>)
 800cc44:	0018      	movs	r0, r3
 800cc46:	f7f8 fd15 	bl	8005674 <printf_>
  
} 
 800cc4a:	46c0      	nop			@ (mov r8, r8)
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	b001      	add	sp, #4
 800cc50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc52:	46c0      	nop			@ (mov r8, r8)
 800cc54:	40002800 	.word	0x40002800
 800cc58:	0800fda4 	.word	0x0800fda4
 800cc5c:	200005c8 	.word	0x200005c8
 800cc60:	0800fdb4 	.word	0x0800fdb4
 800cc64:	200005dc 	.word	0x200005dc
 800cc68:	0800fdc4 	.word	0x0800fdc4

0800cc6c <ESP_Init_standby>:

//	**************************___ ESP_Init_after_standby ___**********************
int ESP_Init_standby(void){ 
 800cc6c:	b590      	push	{r4, r7, lr}
 800cc6e:	b087      	sub	sp, #28
 800cc70:	af04      	add	r7, sp, #16
	printf("ESP_Init_standby\n");
 800cc72:	4b77      	ldr	r3, [pc, #476]	@ (800ce50 <ESP_Init_standby+0x1e4>)
 800cc74:	0018      	movs	r0, r3
 800cc76:	f7f8 fcfd 	bl	8005674 <printf_>
    //Create a new image cache    
    /* !!!  you have to edit the startup_stm32fxxx.s file and set a heap size = 1400 !!!  */
    UWORD Imagesize = ((EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1)) * EPD_1IN54_V2_HEIGHT;
 800cc7a:	1dbb      	adds	r3, r7, #6
 800cc7c:	4a75      	ldr	r2, [pc, #468]	@ (800ce54 <ESP_Init_standby+0x1e8>)
 800cc7e:	801a      	strh	r2, [r3, #0]
    if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 800cc80:	1dbb      	adds	r3, r7, #6
 800cc82:	881b      	ldrh	r3, [r3, #0]
 800cc84:	0018      	movs	r0, r3
 800cc86:	f000 f8ff 	bl	800ce88 <malloc>
 800cc8a:	0003      	movs	r3, r0
 800cc8c:	001a      	movs	r2, r3
 800cc8e:	4b72      	ldr	r3, [pc, #456]	@ (800ce58 <ESP_Init_standby+0x1ec>)
 800cc90:	601a      	str	r2, [r3, #0]
 800cc92:	4b71      	ldr	r3, [pc, #452]	@ (800ce58 <ESP_Init_standby+0x1ec>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d106      	bne.n	800cca8 <ESP_Init_standby+0x3c>
        printf("Failed to apply for black memory...\r\n");
 800cc9a:	4b70      	ldr	r3, [pc, #448]	@ (800ce5c <ESP_Init_standby+0x1f0>)
 800cc9c:	0018      	movs	r0, r3
 800cc9e:	f7f8 fce9 	bl	8005674 <printf_>
        return -1;
 800cca2:	2301      	movs	r3, #1
 800cca4:	425b      	negs	r3, r3
 800cca6:	e0cf      	b.n	800ce48 <ESP_Init_standby+0x1dc>
    }
		Paint_NewImage(BlackImage, EPD_1IN54_V2_WIDTH, EPD_1IN54_V2_HEIGHT, 0, WHITE);
 800cca8:	4b6b      	ldr	r3, [pc, #428]	@ (800ce58 <ESP_Init_standby+0x1ec>)
 800ccaa:	6818      	ldr	r0, [r3, #0]
 800ccac:	23ff      	movs	r3, #255	@ 0xff
 800ccae:	9300      	str	r3, [sp, #0]
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	22c8      	movs	r2, #200	@ 0xc8
 800ccb4:	21c8      	movs	r1, #200	@ 0xc8
 800ccb6:	f7fe fdf5 	bl	800b8a4 <Paint_NewImage>
		
	// Drawing on the image ======================================================
//    INFO("Drawing\r\n");

    Paint_SelectImage(BlackImage);	// Paint.Image = image;
 800ccba:	4b67      	ldr	r3, [pc, #412]	@ (800ce58 <ESP_Init_standby+0x1ec>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	0018      	movs	r0, r3
 800ccc0:	f7fe fe5e 	bl	800b980 <Paint_SelectImage>
    Paint_Clear(WHITE);
 800ccc4:	20ff      	movs	r0, #255	@ 0xff
 800ccc6:	f7ff f807 	bl	800bcd8 <Paint_Clear>
	Paint_DrawRectangle(2, 3, 198, 140, BLACK, DOT_PIXEL_2X2, DRAW_FILL_EMPTY);
 800ccca:	2300      	movs	r3, #0
 800cccc:	9302      	str	r3, [sp, #8]
 800ccce:	2302      	movs	r3, #2
 800ccd0:	9301      	str	r3, [sp, #4]
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	9300      	str	r3, [sp, #0]
 800ccd6:	238c      	movs	r3, #140	@ 0x8c
 800ccd8:	22c6      	movs	r2, #198	@ 0xc6
 800ccda:	2103      	movs	r1, #3
 800ccdc:	2002      	movs	r0, #2
 800ccde:	f7ff fa93 	bl	800c208 <Paint_DrawRectangle>
	
// T	
	sprintf(str_array, "%3d", T_old);
 800cce2:	4b5f      	ldr	r3, [pc, #380]	@ (800ce60 <ESP_Init_standby+0x1f4>)
 800cce4:	881b      	ldrh	r3, [r3, #0]
 800cce6:	001a      	movs	r2, r3
 800cce8:	495e      	ldr	r1, [pc, #376]	@ (800ce64 <ESP_Init_standby+0x1f8>)
 800ccea:	4b5f      	ldr	r3, [pc, #380]	@ (800ce68 <ESP_Init_standby+0x1fc>)
 800ccec:	0018      	movs	r0, r3
 800ccee:	f7f8 fcdf 	bl	80056b0 <sprintf_>
	Paint_DrawChar(big_1.x, big_1.y, str_array[0], &calibri_104pts, BLACK, WHITE); // 15 ms
 800ccf2:	230a      	movs	r3, #10
 800ccf4:	0018      	movs	r0, r3
 800ccf6:	231e      	movs	r3, #30
 800ccf8:	001c      	movs	r4, r3
 800ccfa:	4b5b      	ldr	r3, [pc, #364]	@ (800ce68 <ESP_Init_standby+0x1fc>)
 800ccfc:	781a      	ldrb	r2, [r3, #0]
 800ccfe:	4b5b      	ldr	r3, [pc, #364]	@ (800ce6c <ESP_Init_standby+0x200>)
 800cd00:	21ff      	movs	r1, #255	@ 0xff
 800cd02:	9101      	str	r1, [sp, #4]
 800cd04:	2100      	movs	r1, #0
 800cd06:	9100      	str	r1, [sp, #0]
 800cd08:	0021      	movs	r1, r4
 800cd0a:	f7ff fb45 	bl	800c398 <Paint_DrawChar>
	Paint_DrawChar(big_0.x, big_0.y, str_array[1], &calibri_104pts, BLACK, WHITE);
 800cd0e:	2343      	movs	r3, #67	@ 0x43
 800cd10:	0018      	movs	r0, r3
 800cd12:	231e      	movs	r3, #30
 800cd14:	001c      	movs	r4, r3
 800cd16:	4b54      	ldr	r3, [pc, #336]	@ (800ce68 <ESP_Init_standby+0x1fc>)
 800cd18:	785a      	ldrb	r2, [r3, #1]
 800cd1a:	4b54      	ldr	r3, [pc, #336]	@ (800ce6c <ESP_Init_standby+0x200>)
 800cd1c:	21ff      	movs	r1, #255	@ 0xff
 800cd1e:	9101      	str	r1, [sp, #4]
 800cd20:	2100      	movs	r1, #0
 800cd22:	9100      	str	r1, [sp, #0]
 800cd24:	0021      	movs	r1, r4
 800cd26:	f7ff fb37 	bl	800c398 <Paint_DrawChar>
	Paint_DrawPoint(131, 100, BLACK, DOT_PIXEL_5X5, DOT_FILL_AROUND); //Draw decimal point
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	9300      	str	r3, [sp, #0]
 800cd2e:	2305      	movs	r3, #5
 800cd30:	2200      	movs	r2, #0
 800cd32:	2164      	movs	r1, #100	@ 0x64
 800cd34:	2083      	movs	r0, #131	@ 0x83
 800cd36:	f7ff f8a7 	bl	800be88 <Paint_DrawPoint>
	Paint_DrawChar(small_0.x, small_0.y, str_array[2], &calibri_80pts, BLACK, WHITE);		
 800cd3a:	238e      	movs	r3, #142	@ 0x8e
 800cd3c:	0018      	movs	r0, r3
 800cd3e:	232e      	movs	r3, #46	@ 0x2e
 800cd40:	001c      	movs	r4, r3
 800cd42:	4b49      	ldr	r3, [pc, #292]	@ (800ce68 <ESP_Init_standby+0x1fc>)
 800cd44:	789a      	ldrb	r2, [r3, #2]
 800cd46:	4b4a      	ldr	r3, [pc, #296]	@ (800ce70 <ESP_Init_standby+0x204>)
 800cd48:	21ff      	movs	r1, #255	@ 0xff
 800cd4a:	9101      	str	r1, [sp, #4]
 800cd4c:	2100      	movs	r1, #0
 800cd4e:	9100      	str	r1, [sp, #0]
 800cd50:	0021      	movs	r1, r4
 800cd52:	f7ff fb21 	bl	800c398 <Paint_DrawChar>
		
// hum
	uint8_t x = 125;
 800cd56:	1d7b      	adds	r3, r7, #5
 800cd58:	227d      	movs	r2, #125	@ 0x7d
 800cd5a:	701a      	strb	r2, [r3, #0]
	uint8_t y = 150;	
 800cd5c:	1d3b      	adds	r3, r7, #4
 800cd5e:	2296      	movs	r2, #150	@ 0x96
 800cd60:	701a      	strb	r2, [r3, #0]
	char pcent = '%';
 800cd62:	1cfb      	adds	r3, r7, #3
 800cd64:	2225      	movs	r2, #37	@ 0x25
 800cd66:	701a      	strb	r2, [r3, #0]
	sprintf(str_array, "%2d", H_old);
 800cd68:	4b42      	ldr	r3, [pc, #264]	@ (800ce74 <ESP_Init_standby+0x208>)
 800cd6a:	881b      	ldrh	r3, [r3, #0]
 800cd6c:	001a      	movs	r2, r3
 800cd6e:	4942      	ldr	r1, [pc, #264]	@ (800ce78 <ESP_Init_standby+0x20c>)
 800cd70:	4b3d      	ldr	r3, [pc, #244]	@ (800ce68 <ESP_Init_standby+0x1fc>)
 800cd72:	0018      	movs	r0, r3
 800cd74:	f7f8 fc9c 	bl	80056b0 <sprintf_>
	// append % to string
    strncat(str_array, &pcent, 1);
 800cd78:	1cf9      	adds	r1, r7, #3
 800cd7a:	4b3b      	ldr	r3, [pc, #236]	@ (800ce68 <ESP_Init_standby+0x1fc>)
 800cd7c:	2201      	movs	r2, #1
 800cd7e:	0018      	movs	r0, r3
 800cd80:	f000 fec8 	bl	800db14 <strncat>
	Paint_DrawString_EN(x, y, (char*)str_array, &calibri_36pts, WHITE, BLACK); // 20, 34
 800cd84:	1d7b      	adds	r3, r7, #5
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	b298      	uxth	r0, r3
 800cd8a:	1d3b      	adds	r3, r7, #4
 800cd8c:	781b      	ldrb	r3, [r3, #0]
 800cd8e:	b299      	uxth	r1, r3
 800cd90:	4b3a      	ldr	r3, [pc, #232]	@ (800ce7c <ESP_Init_standby+0x210>)
 800cd92:	4a35      	ldr	r2, [pc, #212]	@ (800ce68 <ESP_Init_standby+0x1fc>)
 800cd94:	2400      	movs	r4, #0
 800cd96:	9401      	str	r4, [sp, #4]
 800cd98:	24ff      	movs	r4, #255	@ 0xff
 800cd9a:	9400      	str	r4, [sp, #0]
 800cd9c:	f7ff fbe2 	bl	800c564 <Paint_DrawString_EN>
	
// battery voltage	
		x = 3;
 800cda0:	1d7b      	adds	r3, r7, #5
 800cda2:	2203      	movs	r2, #3
 800cda4:	701a      	strb	r2, [r3, #0]
		y = 160;
 800cda6:	1d3b      	adds	r3, r7, #4
 800cda8:	22a0      	movs	r2, #160	@ 0xa0
 800cdaa:	701a      	strb	r2, [r3, #0]
		sprintf(str_array, "%3d", vbat_old);
 800cdac:	4b34      	ldr	r3, [pc, #208]	@ (800ce80 <ESP_Init_standby+0x214>)
 800cdae:	881b      	ldrh	r3, [r3, #0]
 800cdb0:	001a      	movs	r2, r3
 800cdb2:	492c      	ldr	r1, [pc, #176]	@ (800ce64 <ESP_Init_standby+0x1f8>)
 800cdb4:	4b2c      	ldr	r3, [pc, #176]	@ (800ce68 <ESP_Init_standby+0x1fc>)
 800cdb6:	0018      	movs	r0, r3
 800cdb8:	f7f8 fc7a 	bl	80056b0 <sprintf_>
		
		Paint_ClearWindows(x, y, x+40, y+29, WHITE);			
 800cdbc:	1d7b      	adds	r3, r7, #5
 800cdbe:	781b      	ldrb	r3, [r3, #0]
 800cdc0:	b298      	uxth	r0, r3
 800cdc2:	1d3b      	adds	r3, r7, #4
 800cdc4:	781b      	ldrb	r3, [r3, #0]
 800cdc6:	b299      	uxth	r1, r3
 800cdc8:	1d7b      	adds	r3, r7, #5
 800cdca:	781b      	ldrb	r3, [r3, #0]
 800cdcc:	b29b      	uxth	r3, r3
 800cdce:	3328      	adds	r3, #40	@ 0x28
 800cdd0:	b29a      	uxth	r2, r3
 800cdd2:	1d3b      	adds	r3, r7, #4
 800cdd4:	781b      	ldrb	r3, [r3, #0]
 800cdd6:	b29b      	uxth	r3, r3
 800cdd8:	331d      	adds	r3, #29
 800cdda:	b29b      	uxth	r3, r3
 800cddc:	24ff      	movs	r4, #255	@ 0xff
 800cdde:	9400      	str	r4, [sp, #0]
 800cde0:	f7ff f808 	bl	800bdf4 <Paint_ClearWindows>
		Paint_DrawChar(x, y, str_array[0], &calibri_24pts, BLACK, WHITE);	// 	12, 29, 8
 800cde4:	1d7b      	adds	r3, r7, #5
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	b298      	uxth	r0, r3
 800cdea:	1d3b      	adds	r3, r7, #4
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	b299      	uxth	r1, r3
 800cdf0:	4b1d      	ldr	r3, [pc, #116]	@ (800ce68 <ESP_Init_standby+0x1fc>)
 800cdf2:	781a      	ldrb	r2, [r3, #0]
 800cdf4:	4b23      	ldr	r3, [pc, #140]	@ (800ce84 <ESP_Init_standby+0x218>)
 800cdf6:	24ff      	movs	r4, #255	@ 0xff
 800cdf8:	9401      	str	r4, [sp, #4]
 800cdfa:	2400      	movs	r4, #0
 800cdfc:	9400      	str	r4, [sp, #0]
 800cdfe:	f7ff facb 	bl	800c398 <Paint_DrawChar>
		Paint_DrawChar(x+12, y, str_array[1], &calibri_24pts, BLACK, WHITE);	
 800ce02:	1d7b      	adds	r3, r7, #5
 800ce04:	781b      	ldrb	r3, [r3, #0]
 800ce06:	b29b      	uxth	r3, r3
 800ce08:	330c      	adds	r3, #12
 800ce0a:	b298      	uxth	r0, r3
 800ce0c:	1d3b      	adds	r3, r7, #4
 800ce0e:	781b      	ldrb	r3, [r3, #0]
 800ce10:	b299      	uxth	r1, r3
 800ce12:	4b15      	ldr	r3, [pc, #84]	@ (800ce68 <ESP_Init_standby+0x1fc>)
 800ce14:	785a      	ldrb	r2, [r3, #1]
 800ce16:	4b1b      	ldr	r3, [pc, #108]	@ (800ce84 <ESP_Init_standby+0x218>)
 800ce18:	24ff      	movs	r4, #255	@ 0xff
 800ce1a:	9401      	str	r4, [sp, #4]
 800ce1c:	2400      	movs	r4, #0
 800ce1e:	9400      	str	r4, [sp, #0]
 800ce20:	f7ff faba 	bl	800c398 <Paint_DrawChar>
		Paint_DrawChar(x+12+12, y, str_array[2], &calibri_24pts, BLACK, WHITE);	
 800ce24:	1d7b      	adds	r3, r7, #5
 800ce26:	781b      	ldrb	r3, [r3, #0]
 800ce28:	b29b      	uxth	r3, r3
 800ce2a:	3318      	adds	r3, #24
 800ce2c:	b298      	uxth	r0, r3
 800ce2e:	1d3b      	adds	r3, r7, #4
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	b299      	uxth	r1, r3
 800ce34:	4b0c      	ldr	r3, [pc, #48]	@ (800ce68 <ESP_Init_standby+0x1fc>)
 800ce36:	789a      	ldrb	r2, [r3, #2]
 800ce38:	4b12      	ldr	r3, [pc, #72]	@ (800ce84 <ESP_Init_standby+0x218>)
 800ce3a:	24ff      	movs	r4, #255	@ 0xff
 800ce3c:	9401      	str	r4, [sp, #4]
 800ce3e:	2400      	movs	r4, #0
 800ce40:	9400      	str	r4, [sp, #0]
 800ce42:	f7ff faa9 	bl	800c398 <Paint_DrawChar>
		
//		EPD_1IN54_V2_Display(BlackImage);		
//		EPD_1IN54_V2_DisplayPartBaseImage(BlackImage);
//		EPD_1IN54_V2_Init_Partial();
		
		return 0;
 800ce46:	2300      	movs	r3, #0
}
 800ce48:	0018      	movs	r0, r3
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	b003      	add	sp, #12
 800ce4e:	bd90      	pop	{r4, r7, pc}
 800ce50:	0800fdcc 	.word	0x0800fdcc
 800ce54:	00001388 	.word	0x00001388
 800ce58:	200005f0 	.word	0x200005f0
 800ce5c:	0800fd64 	.word	0x0800fd64
 800ce60:	2000046e 	.word	0x2000046e
 800ce64:	0800fd54 	.word	0x0800fd54
 800ce68:	200005f4 	.word	0x200005f4
 800ce6c:	20000150 	.word	0x20000150
 800ce70:	20000170 	.word	0x20000170
 800ce74:	2000046c 	.word	0x2000046c
 800ce78:	0800fd50 	.word	0x0800fd50
 800ce7c:	20000168 	.word	0x20000168
 800ce80:	20000470 	.word	0x20000470
 800ce84:	20000160 	.word	0x20000160

0800ce88 <malloc>:
 800ce88:	b510      	push	{r4, lr}
 800ce8a:	4b03      	ldr	r3, [pc, #12]	@ (800ce98 <malloc+0x10>)
 800ce8c:	0001      	movs	r1, r0
 800ce8e:	6818      	ldr	r0, [r3, #0]
 800ce90:	f000 f826 	bl	800cee0 <_malloc_r>
 800ce94:	bd10      	pop	{r4, pc}
 800ce96:	46c0      	nop			@ (mov r8, r8)
 800ce98:	20000184 	.word	0x20000184

0800ce9c <sbrk_aligned>:
 800ce9c:	b570      	push	{r4, r5, r6, lr}
 800ce9e:	4e0f      	ldr	r6, [pc, #60]	@ (800cedc <sbrk_aligned+0x40>)
 800cea0:	000d      	movs	r5, r1
 800cea2:	6831      	ldr	r1, [r6, #0]
 800cea4:	0004      	movs	r4, r0
 800cea6:	2900      	cmp	r1, #0
 800cea8:	d102      	bne.n	800ceb0 <sbrk_aligned+0x14>
 800ceaa:	f000 fe87 	bl	800dbbc <_sbrk_r>
 800ceae:	6030      	str	r0, [r6, #0]
 800ceb0:	0029      	movs	r1, r5
 800ceb2:	0020      	movs	r0, r4
 800ceb4:	f000 fe82 	bl	800dbbc <_sbrk_r>
 800ceb8:	1c43      	adds	r3, r0, #1
 800ceba:	d103      	bne.n	800cec4 <sbrk_aligned+0x28>
 800cebc:	2501      	movs	r5, #1
 800cebe:	426d      	negs	r5, r5
 800cec0:	0028      	movs	r0, r5
 800cec2:	bd70      	pop	{r4, r5, r6, pc}
 800cec4:	2303      	movs	r3, #3
 800cec6:	1cc5      	adds	r5, r0, #3
 800cec8:	439d      	bics	r5, r3
 800ceca:	42a8      	cmp	r0, r5
 800cecc:	d0f8      	beq.n	800cec0 <sbrk_aligned+0x24>
 800cece:	1a29      	subs	r1, r5, r0
 800ced0:	0020      	movs	r0, r4
 800ced2:	f000 fe73 	bl	800dbbc <_sbrk_r>
 800ced6:	3001      	adds	r0, #1
 800ced8:	d1f2      	bne.n	800cec0 <sbrk_aligned+0x24>
 800ceda:	e7ef      	b.n	800cebc <sbrk_aligned+0x20>
 800cedc:	200005fc 	.word	0x200005fc

0800cee0 <_malloc_r>:
 800cee0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cee2:	2203      	movs	r2, #3
 800cee4:	1ccb      	adds	r3, r1, #3
 800cee6:	4393      	bics	r3, r2
 800cee8:	3308      	adds	r3, #8
 800ceea:	0005      	movs	r5, r0
 800ceec:	001f      	movs	r7, r3
 800ceee:	2b0c      	cmp	r3, #12
 800cef0:	d234      	bcs.n	800cf5c <_malloc_r+0x7c>
 800cef2:	270c      	movs	r7, #12
 800cef4:	42b9      	cmp	r1, r7
 800cef6:	d833      	bhi.n	800cf60 <_malloc_r+0x80>
 800cef8:	0028      	movs	r0, r5
 800cefa:	f000 f871 	bl	800cfe0 <__malloc_lock>
 800cefe:	4e37      	ldr	r6, [pc, #220]	@ (800cfdc <_malloc_r+0xfc>)
 800cf00:	6833      	ldr	r3, [r6, #0]
 800cf02:	001c      	movs	r4, r3
 800cf04:	2c00      	cmp	r4, #0
 800cf06:	d12f      	bne.n	800cf68 <_malloc_r+0x88>
 800cf08:	0039      	movs	r1, r7
 800cf0a:	0028      	movs	r0, r5
 800cf0c:	f7ff ffc6 	bl	800ce9c <sbrk_aligned>
 800cf10:	0004      	movs	r4, r0
 800cf12:	1c43      	adds	r3, r0, #1
 800cf14:	d15f      	bne.n	800cfd6 <_malloc_r+0xf6>
 800cf16:	6834      	ldr	r4, [r6, #0]
 800cf18:	9400      	str	r4, [sp, #0]
 800cf1a:	9b00      	ldr	r3, [sp, #0]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d14a      	bne.n	800cfb6 <_malloc_r+0xd6>
 800cf20:	2c00      	cmp	r4, #0
 800cf22:	d052      	beq.n	800cfca <_malloc_r+0xea>
 800cf24:	6823      	ldr	r3, [r4, #0]
 800cf26:	0028      	movs	r0, r5
 800cf28:	18e3      	adds	r3, r4, r3
 800cf2a:	9900      	ldr	r1, [sp, #0]
 800cf2c:	9301      	str	r3, [sp, #4]
 800cf2e:	f000 fe45 	bl	800dbbc <_sbrk_r>
 800cf32:	9b01      	ldr	r3, [sp, #4]
 800cf34:	4283      	cmp	r3, r0
 800cf36:	d148      	bne.n	800cfca <_malloc_r+0xea>
 800cf38:	6823      	ldr	r3, [r4, #0]
 800cf3a:	0028      	movs	r0, r5
 800cf3c:	1aff      	subs	r7, r7, r3
 800cf3e:	0039      	movs	r1, r7
 800cf40:	f7ff ffac 	bl	800ce9c <sbrk_aligned>
 800cf44:	3001      	adds	r0, #1
 800cf46:	d040      	beq.n	800cfca <_malloc_r+0xea>
 800cf48:	6823      	ldr	r3, [r4, #0]
 800cf4a:	19db      	adds	r3, r3, r7
 800cf4c:	6023      	str	r3, [r4, #0]
 800cf4e:	6833      	ldr	r3, [r6, #0]
 800cf50:	685a      	ldr	r2, [r3, #4]
 800cf52:	2a00      	cmp	r2, #0
 800cf54:	d133      	bne.n	800cfbe <_malloc_r+0xde>
 800cf56:	9b00      	ldr	r3, [sp, #0]
 800cf58:	6033      	str	r3, [r6, #0]
 800cf5a:	e019      	b.n	800cf90 <_malloc_r+0xb0>
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	dac9      	bge.n	800cef4 <_malloc_r+0x14>
 800cf60:	230c      	movs	r3, #12
 800cf62:	602b      	str	r3, [r5, #0]
 800cf64:	2000      	movs	r0, #0
 800cf66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cf68:	6821      	ldr	r1, [r4, #0]
 800cf6a:	1bc9      	subs	r1, r1, r7
 800cf6c:	d420      	bmi.n	800cfb0 <_malloc_r+0xd0>
 800cf6e:	290b      	cmp	r1, #11
 800cf70:	d90a      	bls.n	800cf88 <_malloc_r+0xa8>
 800cf72:	19e2      	adds	r2, r4, r7
 800cf74:	6027      	str	r7, [r4, #0]
 800cf76:	42a3      	cmp	r3, r4
 800cf78:	d104      	bne.n	800cf84 <_malloc_r+0xa4>
 800cf7a:	6032      	str	r2, [r6, #0]
 800cf7c:	6863      	ldr	r3, [r4, #4]
 800cf7e:	6011      	str	r1, [r2, #0]
 800cf80:	6053      	str	r3, [r2, #4]
 800cf82:	e005      	b.n	800cf90 <_malloc_r+0xb0>
 800cf84:	605a      	str	r2, [r3, #4]
 800cf86:	e7f9      	b.n	800cf7c <_malloc_r+0x9c>
 800cf88:	6862      	ldr	r2, [r4, #4]
 800cf8a:	42a3      	cmp	r3, r4
 800cf8c:	d10e      	bne.n	800cfac <_malloc_r+0xcc>
 800cf8e:	6032      	str	r2, [r6, #0]
 800cf90:	0028      	movs	r0, r5
 800cf92:	f000 f82d 	bl	800cff0 <__malloc_unlock>
 800cf96:	0020      	movs	r0, r4
 800cf98:	2207      	movs	r2, #7
 800cf9a:	300b      	adds	r0, #11
 800cf9c:	1d23      	adds	r3, r4, #4
 800cf9e:	4390      	bics	r0, r2
 800cfa0:	1ac2      	subs	r2, r0, r3
 800cfa2:	4298      	cmp	r0, r3
 800cfa4:	d0df      	beq.n	800cf66 <_malloc_r+0x86>
 800cfa6:	1a1b      	subs	r3, r3, r0
 800cfa8:	50a3      	str	r3, [r4, r2]
 800cfaa:	e7dc      	b.n	800cf66 <_malloc_r+0x86>
 800cfac:	605a      	str	r2, [r3, #4]
 800cfae:	e7ef      	b.n	800cf90 <_malloc_r+0xb0>
 800cfb0:	0023      	movs	r3, r4
 800cfb2:	6864      	ldr	r4, [r4, #4]
 800cfb4:	e7a6      	b.n	800cf04 <_malloc_r+0x24>
 800cfb6:	9c00      	ldr	r4, [sp, #0]
 800cfb8:	6863      	ldr	r3, [r4, #4]
 800cfba:	9300      	str	r3, [sp, #0]
 800cfbc:	e7ad      	b.n	800cf1a <_malloc_r+0x3a>
 800cfbe:	001a      	movs	r2, r3
 800cfc0:	685b      	ldr	r3, [r3, #4]
 800cfc2:	42a3      	cmp	r3, r4
 800cfc4:	d1fb      	bne.n	800cfbe <_malloc_r+0xde>
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	e7da      	b.n	800cf80 <_malloc_r+0xa0>
 800cfca:	230c      	movs	r3, #12
 800cfcc:	0028      	movs	r0, r5
 800cfce:	602b      	str	r3, [r5, #0]
 800cfd0:	f000 f80e 	bl	800cff0 <__malloc_unlock>
 800cfd4:	e7c6      	b.n	800cf64 <_malloc_r+0x84>
 800cfd6:	6007      	str	r7, [r0, #0]
 800cfd8:	e7da      	b.n	800cf90 <_malloc_r+0xb0>
 800cfda:	46c0      	nop			@ (mov r8, r8)
 800cfdc:	20000600 	.word	0x20000600

0800cfe0 <__malloc_lock>:
 800cfe0:	b510      	push	{r4, lr}
 800cfe2:	4802      	ldr	r0, [pc, #8]	@ (800cfec <__malloc_lock+0xc>)
 800cfe4:	f000 fe3b 	bl	800dc5e <__retarget_lock_acquire_recursive>
 800cfe8:	bd10      	pop	{r4, pc}
 800cfea:	46c0      	nop			@ (mov r8, r8)
 800cfec:	20000744 	.word	0x20000744

0800cff0 <__malloc_unlock>:
 800cff0:	b510      	push	{r4, lr}
 800cff2:	4802      	ldr	r0, [pc, #8]	@ (800cffc <__malloc_unlock+0xc>)
 800cff4:	f000 fe34 	bl	800dc60 <__retarget_lock_release_recursive>
 800cff8:	bd10      	pop	{r4, pc}
 800cffa:	46c0      	nop			@ (mov r8, r8)
 800cffc:	20000744 	.word	0x20000744

0800d000 <__cvt>:
 800d000:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d002:	001f      	movs	r7, r3
 800d004:	2300      	movs	r3, #0
 800d006:	0016      	movs	r6, r2
 800d008:	b08b      	sub	sp, #44	@ 0x2c
 800d00a:	429f      	cmp	r7, r3
 800d00c:	da04      	bge.n	800d018 <__cvt+0x18>
 800d00e:	2180      	movs	r1, #128	@ 0x80
 800d010:	0609      	lsls	r1, r1, #24
 800d012:	187b      	adds	r3, r7, r1
 800d014:	001f      	movs	r7, r3
 800d016:	232d      	movs	r3, #45	@ 0x2d
 800d018:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d01a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800d01c:	7013      	strb	r3, [r2, #0]
 800d01e:	2320      	movs	r3, #32
 800d020:	2203      	movs	r2, #3
 800d022:	439d      	bics	r5, r3
 800d024:	2d46      	cmp	r5, #70	@ 0x46
 800d026:	d007      	beq.n	800d038 <__cvt+0x38>
 800d028:	002b      	movs	r3, r5
 800d02a:	3b45      	subs	r3, #69	@ 0x45
 800d02c:	4259      	negs	r1, r3
 800d02e:	414b      	adcs	r3, r1
 800d030:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800d032:	3a01      	subs	r2, #1
 800d034:	18cb      	adds	r3, r1, r3
 800d036:	9310      	str	r3, [sp, #64]	@ 0x40
 800d038:	ab09      	add	r3, sp, #36	@ 0x24
 800d03a:	9304      	str	r3, [sp, #16]
 800d03c:	ab08      	add	r3, sp, #32
 800d03e:	9303      	str	r3, [sp, #12]
 800d040:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d042:	9200      	str	r2, [sp, #0]
 800d044:	9302      	str	r3, [sp, #8]
 800d046:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d048:	0032      	movs	r2, r6
 800d04a:	9301      	str	r3, [sp, #4]
 800d04c:	003b      	movs	r3, r7
 800d04e:	f000 fea1 	bl	800dd94 <_dtoa_r>
 800d052:	0004      	movs	r4, r0
 800d054:	2d47      	cmp	r5, #71	@ 0x47
 800d056:	d11b      	bne.n	800d090 <__cvt+0x90>
 800d058:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d05a:	07db      	lsls	r3, r3, #31
 800d05c:	d511      	bpl.n	800d082 <__cvt+0x82>
 800d05e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d060:	18c3      	adds	r3, r0, r3
 800d062:	9307      	str	r3, [sp, #28]
 800d064:	2200      	movs	r2, #0
 800d066:	2300      	movs	r3, #0
 800d068:	0030      	movs	r0, r6
 800d06a:	0039      	movs	r1, r7
 800d06c:	f7f3 f9ee 	bl	800044c <__aeabi_dcmpeq>
 800d070:	2800      	cmp	r0, #0
 800d072:	d001      	beq.n	800d078 <__cvt+0x78>
 800d074:	9b07      	ldr	r3, [sp, #28]
 800d076:	9309      	str	r3, [sp, #36]	@ 0x24
 800d078:	2230      	movs	r2, #48	@ 0x30
 800d07a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d07c:	9907      	ldr	r1, [sp, #28]
 800d07e:	428b      	cmp	r3, r1
 800d080:	d320      	bcc.n	800d0c4 <__cvt+0xc4>
 800d082:	0020      	movs	r0, r4
 800d084:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d086:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800d088:	1b1b      	subs	r3, r3, r4
 800d08a:	6013      	str	r3, [r2, #0]
 800d08c:	b00b      	add	sp, #44	@ 0x2c
 800d08e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d090:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d092:	18c3      	adds	r3, r0, r3
 800d094:	9307      	str	r3, [sp, #28]
 800d096:	2d46      	cmp	r5, #70	@ 0x46
 800d098:	d1e4      	bne.n	800d064 <__cvt+0x64>
 800d09a:	7803      	ldrb	r3, [r0, #0]
 800d09c:	2b30      	cmp	r3, #48	@ 0x30
 800d09e:	d10c      	bne.n	800d0ba <__cvt+0xba>
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	0030      	movs	r0, r6
 800d0a6:	0039      	movs	r1, r7
 800d0a8:	f7f3 f9d0 	bl	800044c <__aeabi_dcmpeq>
 800d0ac:	2800      	cmp	r0, #0
 800d0ae:	d104      	bne.n	800d0ba <__cvt+0xba>
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800d0b4:	1a9b      	subs	r3, r3, r2
 800d0b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d0b8:	6013      	str	r3, [r2, #0]
 800d0ba:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d0bc:	9a07      	ldr	r2, [sp, #28]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	18d3      	adds	r3, r2, r3
 800d0c2:	e7ce      	b.n	800d062 <__cvt+0x62>
 800d0c4:	1c59      	adds	r1, r3, #1
 800d0c6:	9109      	str	r1, [sp, #36]	@ 0x24
 800d0c8:	701a      	strb	r2, [r3, #0]
 800d0ca:	e7d6      	b.n	800d07a <__cvt+0x7a>

0800d0cc <__exponent>:
 800d0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0ce:	232b      	movs	r3, #43	@ 0x2b
 800d0d0:	0005      	movs	r5, r0
 800d0d2:	000c      	movs	r4, r1
 800d0d4:	b085      	sub	sp, #20
 800d0d6:	7002      	strb	r2, [r0, #0]
 800d0d8:	2900      	cmp	r1, #0
 800d0da:	da01      	bge.n	800d0e0 <__exponent+0x14>
 800d0dc:	424c      	negs	r4, r1
 800d0de:	3302      	adds	r3, #2
 800d0e0:	706b      	strb	r3, [r5, #1]
 800d0e2:	2c09      	cmp	r4, #9
 800d0e4:	dd2c      	ble.n	800d140 <__exponent+0x74>
 800d0e6:	ab02      	add	r3, sp, #8
 800d0e8:	1dde      	adds	r6, r3, #7
 800d0ea:	0020      	movs	r0, r4
 800d0ec:	210a      	movs	r1, #10
 800d0ee:	f7f3 f997 	bl	8000420 <__aeabi_idivmod>
 800d0f2:	0037      	movs	r7, r6
 800d0f4:	3130      	adds	r1, #48	@ 0x30
 800d0f6:	3e01      	subs	r6, #1
 800d0f8:	0020      	movs	r0, r4
 800d0fa:	7031      	strb	r1, [r6, #0]
 800d0fc:	210a      	movs	r1, #10
 800d0fe:	9401      	str	r4, [sp, #4]
 800d100:	f7f3 f8a8 	bl	8000254 <__divsi3>
 800d104:	9b01      	ldr	r3, [sp, #4]
 800d106:	0004      	movs	r4, r0
 800d108:	2b63      	cmp	r3, #99	@ 0x63
 800d10a:	dcee      	bgt.n	800d0ea <__exponent+0x1e>
 800d10c:	1eba      	subs	r2, r7, #2
 800d10e:	1ca8      	adds	r0, r5, #2
 800d110:	0001      	movs	r1, r0
 800d112:	0013      	movs	r3, r2
 800d114:	3430      	adds	r4, #48	@ 0x30
 800d116:	7014      	strb	r4, [r2, #0]
 800d118:	ac02      	add	r4, sp, #8
 800d11a:	3407      	adds	r4, #7
 800d11c:	429c      	cmp	r4, r3
 800d11e:	d80a      	bhi.n	800d136 <__exponent+0x6a>
 800d120:	2300      	movs	r3, #0
 800d122:	42a2      	cmp	r2, r4
 800d124:	d803      	bhi.n	800d12e <__exponent+0x62>
 800d126:	3309      	adds	r3, #9
 800d128:	aa02      	add	r2, sp, #8
 800d12a:	189b      	adds	r3, r3, r2
 800d12c:	1bdb      	subs	r3, r3, r7
 800d12e:	18c0      	adds	r0, r0, r3
 800d130:	1b40      	subs	r0, r0, r5
 800d132:	b005      	add	sp, #20
 800d134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d136:	781c      	ldrb	r4, [r3, #0]
 800d138:	3301      	adds	r3, #1
 800d13a:	700c      	strb	r4, [r1, #0]
 800d13c:	3101      	adds	r1, #1
 800d13e:	e7eb      	b.n	800d118 <__exponent+0x4c>
 800d140:	2330      	movs	r3, #48	@ 0x30
 800d142:	18e4      	adds	r4, r4, r3
 800d144:	70ab      	strb	r3, [r5, #2]
 800d146:	1d28      	adds	r0, r5, #4
 800d148:	70ec      	strb	r4, [r5, #3]
 800d14a:	e7f1      	b.n	800d130 <__exponent+0x64>

0800d14c <_printf_float>:
 800d14c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d14e:	b097      	sub	sp, #92	@ 0x5c
 800d150:	000d      	movs	r5, r1
 800d152:	920a      	str	r2, [sp, #40]	@ 0x28
 800d154:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800d156:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d158:	9009      	str	r0, [sp, #36]	@ 0x24
 800d15a:	f000 fcf1 	bl	800db40 <_localeconv_r>
 800d15e:	6803      	ldr	r3, [r0, #0]
 800d160:	0018      	movs	r0, r3
 800d162:	930d      	str	r3, [sp, #52]	@ 0x34
 800d164:	f7f2 ffd0 	bl	8000108 <strlen>
 800d168:	2300      	movs	r3, #0
 800d16a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800d16c:	9314      	str	r3, [sp, #80]	@ 0x50
 800d16e:	7e2b      	ldrb	r3, [r5, #24]
 800d170:	2207      	movs	r2, #7
 800d172:	930c      	str	r3, [sp, #48]	@ 0x30
 800d174:	682b      	ldr	r3, [r5, #0]
 800d176:	930e      	str	r3, [sp, #56]	@ 0x38
 800d178:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d17a:	6823      	ldr	r3, [r4, #0]
 800d17c:	05c9      	lsls	r1, r1, #23
 800d17e:	d545      	bpl.n	800d20c <_printf_float+0xc0>
 800d180:	189b      	adds	r3, r3, r2
 800d182:	4393      	bics	r3, r2
 800d184:	001a      	movs	r2, r3
 800d186:	3208      	adds	r2, #8
 800d188:	6022      	str	r2, [r4, #0]
 800d18a:	2201      	movs	r2, #1
 800d18c:	681e      	ldr	r6, [r3, #0]
 800d18e:	685f      	ldr	r7, [r3, #4]
 800d190:	007b      	lsls	r3, r7, #1
 800d192:	085b      	lsrs	r3, r3, #1
 800d194:	9311      	str	r3, [sp, #68]	@ 0x44
 800d196:	9610      	str	r6, [sp, #64]	@ 0x40
 800d198:	64ae      	str	r6, [r5, #72]	@ 0x48
 800d19a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800d19c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d19e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800d1a0:	4ba7      	ldr	r3, [pc, #668]	@ (800d440 <_printf_float+0x2f4>)
 800d1a2:	4252      	negs	r2, r2
 800d1a4:	f7f5 f8b4 	bl	8002310 <__aeabi_dcmpun>
 800d1a8:	2800      	cmp	r0, #0
 800d1aa:	d131      	bne.n	800d210 <_printf_float+0xc4>
 800d1ac:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d1ae:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800d1b0:	2201      	movs	r2, #1
 800d1b2:	4ba3      	ldr	r3, [pc, #652]	@ (800d440 <_printf_float+0x2f4>)
 800d1b4:	4252      	negs	r2, r2
 800d1b6:	f7f3 f959 	bl	800046c <__aeabi_dcmple>
 800d1ba:	2800      	cmp	r0, #0
 800d1bc:	d128      	bne.n	800d210 <_printf_float+0xc4>
 800d1be:	2200      	movs	r2, #0
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	0030      	movs	r0, r6
 800d1c4:	0039      	movs	r1, r7
 800d1c6:	f7f3 f947 	bl	8000458 <__aeabi_dcmplt>
 800d1ca:	2800      	cmp	r0, #0
 800d1cc:	d003      	beq.n	800d1d6 <_printf_float+0x8a>
 800d1ce:	002b      	movs	r3, r5
 800d1d0:	222d      	movs	r2, #45	@ 0x2d
 800d1d2:	3343      	adds	r3, #67	@ 0x43
 800d1d4:	701a      	strb	r2, [r3, #0]
 800d1d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d1d8:	4f9a      	ldr	r7, [pc, #616]	@ (800d444 <_printf_float+0x2f8>)
 800d1da:	2b47      	cmp	r3, #71	@ 0x47
 800d1dc:	d900      	bls.n	800d1e0 <_printf_float+0x94>
 800d1de:	4f9a      	ldr	r7, [pc, #616]	@ (800d448 <_printf_float+0x2fc>)
 800d1e0:	2303      	movs	r3, #3
 800d1e2:	2400      	movs	r4, #0
 800d1e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d1e6:	612b      	str	r3, [r5, #16]
 800d1e8:	3301      	adds	r3, #1
 800d1ea:	439a      	bics	r2, r3
 800d1ec:	602a      	str	r2, [r5, #0]
 800d1ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d1f0:	0029      	movs	r1, r5
 800d1f2:	9300      	str	r3, [sp, #0]
 800d1f4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d1f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1f8:	aa15      	add	r2, sp, #84	@ 0x54
 800d1fa:	f000 f9e5 	bl	800d5c8 <_printf_common>
 800d1fe:	3001      	adds	r0, #1
 800d200:	d000      	beq.n	800d204 <_printf_float+0xb8>
 800d202:	e09f      	b.n	800d344 <_printf_float+0x1f8>
 800d204:	2001      	movs	r0, #1
 800d206:	4240      	negs	r0, r0
 800d208:	b017      	add	sp, #92	@ 0x5c
 800d20a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d20c:	3307      	adds	r3, #7
 800d20e:	e7b8      	b.n	800d182 <_printf_float+0x36>
 800d210:	0032      	movs	r2, r6
 800d212:	003b      	movs	r3, r7
 800d214:	0030      	movs	r0, r6
 800d216:	0039      	movs	r1, r7
 800d218:	f7f5 f87a 	bl	8002310 <__aeabi_dcmpun>
 800d21c:	2800      	cmp	r0, #0
 800d21e:	d00b      	beq.n	800d238 <_printf_float+0xec>
 800d220:	2f00      	cmp	r7, #0
 800d222:	da03      	bge.n	800d22c <_printf_float+0xe0>
 800d224:	002b      	movs	r3, r5
 800d226:	222d      	movs	r2, #45	@ 0x2d
 800d228:	3343      	adds	r3, #67	@ 0x43
 800d22a:	701a      	strb	r2, [r3, #0]
 800d22c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d22e:	4f87      	ldr	r7, [pc, #540]	@ (800d44c <_printf_float+0x300>)
 800d230:	2b47      	cmp	r3, #71	@ 0x47
 800d232:	d9d5      	bls.n	800d1e0 <_printf_float+0x94>
 800d234:	4f86      	ldr	r7, [pc, #536]	@ (800d450 <_printf_float+0x304>)
 800d236:	e7d3      	b.n	800d1e0 <_printf_float+0x94>
 800d238:	2220      	movs	r2, #32
 800d23a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800d23c:	686b      	ldr	r3, [r5, #4]
 800d23e:	4394      	bics	r4, r2
 800d240:	1c5a      	adds	r2, r3, #1
 800d242:	d146      	bne.n	800d2d2 <_printf_float+0x186>
 800d244:	3307      	adds	r3, #7
 800d246:	606b      	str	r3, [r5, #4]
 800d248:	2380      	movs	r3, #128	@ 0x80
 800d24a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d24c:	00db      	lsls	r3, r3, #3
 800d24e:	4313      	orrs	r3, r2
 800d250:	2200      	movs	r2, #0
 800d252:	602b      	str	r3, [r5, #0]
 800d254:	9206      	str	r2, [sp, #24]
 800d256:	aa14      	add	r2, sp, #80	@ 0x50
 800d258:	9205      	str	r2, [sp, #20]
 800d25a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d25c:	a90a      	add	r1, sp, #40	@ 0x28
 800d25e:	9204      	str	r2, [sp, #16]
 800d260:	aa13      	add	r2, sp, #76	@ 0x4c
 800d262:	9203      	str	r2, [sp, #12]
 800d264:	2223      	movs	r2, #35	@ 0x23
 800d266:	1852      	adds	r2, r2, r1
 800d268:	9202      	str	r2, [sp, #8]
 800d26a:	9301      	str	r3, [sp, #4]
 800d26c:	686b      	ldr	r3, [r5, #4]
 800d26e:	0032      	movs	r2, r6
 800d270:	9300      	str	r3, [sp, #0]
 800d272:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d274:	003b      	movs	r3, r7
 800d276:	f7ff fec3 	bl	800d000 <__cvt>
 800d27a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d27c:	0007      	movs	r7, r0
 800d27e:	2c47      	cmp	r4, #71	@ 0x47
 800d280:	d12d      	bne.n	800d2de <_printf_float+0x192>
 800d282:	1cd3      	adds	r3, r2, #3
 800d284:	db02      	blt.n	800d28c <_printf_float+0x140>
 800d286:	686b      	ldr	r3, [r5, #4]
 800d288:	429a      	cmp	r2, r3
 800d28a:	dd48      	ble.n	800d31e <_printf_float+0x1d2>
 800d28c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d28e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800d290:	3b02      	subs	r3, #2
 800d292:	b2db      	uxtb	r3, r3
 800d294:	930c      	str	r3, [sp, #48]	@ 0x30
 800d296:	0028      	movs	r0, r5
 800d298:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d29a:	3901      	subs	r1, #1
 800d29c:	3050      	adds	r0, #80	@ 0x50
 800d29e:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d2a0:	f7ff ff14 	bl	800d0cc <__exponent>
 800d2a4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d2a6:	0004      	movs	r4, r0
 800d2a8:	1813      	adds	r3, r2, r0
 800d2aa:	612b      	str	r3, [r5, #16]
 800d2ac:	2a01      	cmp	r2, #1
 800d2ae:	dc02      	bgt.n	800d2b6 <_printf_float+0x16a>
 800d2b0:	682a      	ldr	r2, [r5, #0]
 800d2b2:	07d2      	lsls	r2, r2, #31
 800d2b4:	d501      	bpl.n	800d2ba <_printf_float+0x16e>
 800d2b6:	3301      	adds	r3, #1
 800d2b8:	612b      	str	r3, [r5, #16]
 800d2ba:	2323      	movs	r3, #35	@ 0x23
 800d2bc:	aa0a      	add	r2, sp, #40	@ 0x28
 800d2be:	189b      	adds	r3, r3, r2
 800d2c0:	781b      	ldrb	r3, [r3, #0]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d100      	bne.n	800d2c8 <_printf_float+0x17c>
 800d2c6:	e792      	b.n	800d1ee <_printf_float+0xa2>
 800d2c8:	002b      	movs	r3, r5
 800d2ca:	222d      	movs	r2, #45	@ 0x2d
 800d2cc:	3343      	adds	r3, #67	@ 0x43
 800d2ce:	701a      	strb	r2, [r3, #0]
 800d2d0:	e78d      	b.n	800d1ee <_printf_float+0xa2>
 800d2d2:	2c47      	cmp	r4, #71	@ 0x47
 800d2d4:	d1b8      	bne.n	800d248 <_printf_float+0xfc>
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d1b6      	bne.n	800d248 <_printf_float+0xfc>
 800d2da:	3301      	adds	r3, #1
 800d2dc:	e7b3      	b.n	800d246 <_printf_float+0xfa>
 800d2de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d2e0:	0011      	movs	r1, r2
 800d2e2:	2b65      	cmp	r3, #101	@ 0x65
 800d2e4:	d9d7      	bls.n	800d296 <_printf_float+0x14a>
 800d2e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d2e8:	2b66      	cmp	r3, #102	@ 0x66
 800d2ea:	d11a      	bne.n	800d322 <_printf_float+0x1d6>
 800d2ec:	686b      	ldr	r3, [r5, #4]
 800d2ee:	2a00      	cmp	r2, #0
 800d2f0:	dd09      	ble.n	800d306 <_printf_float+0x1ba>
 800d2f2:	612a      	str	r2, [r5, #16]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d102      	bne.n	800d2fe <_printf_float+0x1b2>
 800d2f8:	6829      	ldr	r1, [r5, #0]
 800d2fa:	07c9      	lsls	r1, r1, #31
 800d2fc:	d50b      	bpl.n	800d316 <_printf_float+0x1ca>
 800d2fe:	3301      	adds	r3, #1
 800d300:	189b      	adds	r3, r3, r2
 800d302:	612b      	str	r3, [r5, #16]
 800d304:	e007      	b.n	800d316 <_printf_float+0x1ca>
 800d306:	2b00      	cmp	r3, #0
 800d308:	d103      	bne.n	800d312 <_printf_float+0x1c6>
 800d30a:	2201      	movs	r2, #1
 800d30c:	6829      	ldr	r1, [r5, #0]
 800d30e:	4211      	tst	r1, r2
 800d310:	d000      	beq.n	800d314 <_printf_float+0x1c8>
 800d312:	1c9a      	adds	r2, r3, #2
 800d314:	612a      	str	r2, [r5, #16]
 800d316:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d318:	2400      	movs	r4, #0
 800d31a:	65ab      	str	r3, [r5, #88]	@ 0x58
 800d31c:	e7cd      	b.n	800d2ba <_printf_float+0x16e>
 800d31e:	2367      	movs	r3, #103	@ 0x67
 800d320:	930c      	str	r3, [sp, #48]	@ 0x30
 800d322:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800d324:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d326:	4299      	cmp	r1, r3
 800d328:	db06      	blt.n	800d338 <_printf_float+0x1ec>
 800d32a:	682b      	ldr	r3, [r5, #0]
 800d32c:	6129      	str	r1, [r5, #16]
 800d32e:	07db      	lsls	r3, r3, #31
 800d330:	d5f1      	bpl.n	800d316 <_printf_float+0x1ca>
 800d332:	3101      	adds	r1, #1
 800d334:	6129      	str	r1, [r5, #16]
 800d336:	e7ee      	b.n	800d316 <_printf_float+0x1ca>
 800d338:	2201      	movs	r2, #1
 800d33a:	2900      	cmp	r1, #0
 800d33c:	dce0      	bgt.n	800d300 <_printf_float+0x1b4>
 800d33e:	1892      	adds	r2, r2, r2
 800d340:	1a52      	subs	r2, r2, r1
 800d342:	e7dd      	b.n	800d300 <_printf_float+0x1b4>
 800d344:	682a      	ldr	r2, [r5, #0]
 800d346:	0553      	lsls	r3, r2, #21
 800d348:	d408      	bmi.n	800d35c <_printf_float+0x210>
 800d34a:	692b      	ldr	r3, [r5, #16]
 800d34c:	003a      	movs	r2, r7
 800d34e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d350:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d352:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d354:	47a0      	blx	r4
 800d356:	3001      	adds	r0, #1
 800d358:	d129      	bne.n	800d3ae <_printf_float+0x262>
 800d35a:	e753      	b.n	800d204 <_printf_float+0xb8>
 800d35c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d35e:	2b65      	cmp	r3, #101	@ 0x65
 800d360:	d800      	bhi.n	800d364 <_printf_float+0x218>
 800d362:	e0da      	b.n	800d51a <_printf_float+0x3ce>
 800d364:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800d366:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d368:	2200      	movs	r2, #0
 800d36a:	2300      	movs	r3, #0
 800d36c:	f7f3 f86e 	bl	800044c <__aeabi_dcmpeq>
 800d370:	2800      	cmp	r0, #0
 800d372:	d033      	beq.n	800d3dc <_printf_float+0x290>
 800d374:	2301      	movs	r3, #1
 800d376:	4a37      	ldr	r2, [pc, #220]	@ (800d454 <_printf_float+0x308>)
 800d378:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d37a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d37c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d37e:	47a0      	blx	r4
 800d380:	3001      	adds	r0, #1
 800d382:	d100      	bne.n	800d386 <_printf_float+0x23a>
 800d384:	e73e      	b.n	800d204 <_printf_float+0xb8>
 800d386:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800d388:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d38a:	42b3      	cmp	r3, r6
 800d38c:	db02      	blt.n	800d394 <_printf_float+0x248>
 800d38e:	682b      	ldr	r3, [r5, #0]
 800d390:	07db      	lsls	r3, r3, #31
 800d392:	d50c      	bpl.n	800d3ae <_printf_float+0x262>
 800d394:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d396:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d398:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d39a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d39c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d39e:	47a0      	blx	r4
 800d3a0:	2400      	movs	r4, #0
 800d3a2:	3001      	adds	r0, #1
 800d3a4:	d100      	bne.n	800d3a8 <_printf_float+0x25c>
 800d3a6:	e72d      	b.n	800d204 <_printf_float+0xb8>
 800d3a8:	1e73      	subs	r3, r6, #1
 800d3aa:	42a3      	cmp	r3, r4
 800d3ac:	dc0a      	bgt.n	800d3c4 <_printf_float+0x278>
 800d3ae:	682b      	ldr	r3, [r5, #0]
 800d3b0:	079b      	lsls	r3, r3, #30
 800d3b2:	d500      	bpl.n	800d3b6 <_printf_float+0x26a>
 800d3b4:	e105      	b.n	800d5c2 <_printf_float+0x476>
 800d3b6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d3b8:	68e8      	ldr	r0, [r5, #12]
 800d3ba:	4298      	cmp	r0, r3
 800d3bc:	db00      	blt.n	800d3c0 <_printf_float+0x274>
 800d3be:	e723      	b.n	800d208 <_printf_float+0xbc>
 800d3c0:	0018      	movs	r0, r3
 800d3c2:	e721      	b.n	800d208 <_printf_float+0xbc>
 800d3c4:	002a      	movs	r2, r5
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d3ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d3cc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d3ce:	321a      	adds	r2, #26
 800d3d0:	47b8      	blx	r7
 800d3d2:	3001      	adds	r0, #1
 800d3d4:	d100      	bne.n	800d3d8 <_printf_float+0x28c>
 800d3d6:	e715      	b.n	800d204 <_printf_float+0xb8>
 800d3d8:	3401      	adds	r4, #1
 800d3da:	e7e5      	b.n	800d3a8 <_printf_float+0x25c>
 800d3dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	dc3a      	bgt.n	800d458 <_printf_float+0x30c>
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	4a1b      	ldr	r2, [pc, #108]	@ (800d454 <_printf_float+0x308>)
 800d3e6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d3e8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d3ea:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d3ec:	47a0      	blx	r4
 800d3ee:	3001      	adds	r0, #1
 800d3f0:	d100      	bne.n	800d3f4 <_printf_float+0x2a8>
 800d3f2:	e707      	b.n	800d204 <_printf_float+0xb8>
 800d3f4:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800d3f6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d3f8:	4333      	orrs	r3, r6
 800d3fa:	d102      	bne.n	800d402 <_printf_float+0x2b6>
 800d3fc:	682b      	ldr	r3, [r5, #0]
 800d3fe:	07db      	lsls	r3, r3, #31
 800d400:	d5d5      	bpl.n	800d3ae <_printf_float+0x262>
 800d402:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d404:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d406:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d408:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d40a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d40c:	47a0      	blx	r4
 800d40e:	2300      	movs	r3, #0
 800d410:	3001      	adds	r0, #1
 800d412:	d100      	bne.n	800d416 <_printf_float+0x2ca>
 800d414:	e6f6      	b.n	800d204 <_printf_float+0xb8>
 800d416:	930c      	str	r3, [sp, #48]	@ 0x30
 800d418:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d41a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d41c:	425b      	negs	r3, r3
 800d41e:	4293      	cmp	r3, r2
 800d420:	dc01      	bgt.n	800d426 <_printf_float+0x2da>
 800d422:	0033      	movs	r3, r6
 800d424:	e792      	b.n	800d34c <_printf_float+0x200>
 800d426:	002a      	movs	r2, r5
 800d428:	2301      	movs	r3, #1
 800d42a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d42c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d42e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d430:	321a      	adds	r2, #26
 800d432:	47a0      	blx	r4
 800d434:	3001      	adds	r0, #1
 800d436:	d100      	bne.n	800d43a <_printf_float+0x2ee>
 800d438:	e6e4      	b.n	800d204 <_printf_float+0xb8>
 800d43a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d43c:	3301      	adds	r3, #1
 800d43e:	e7ea      	b.n	800d416 <_printf_float+0x2ca>
 800d440:	7fefffff 	.word	0x7fefffff
 800d444:	0801b3d0 	.word	0x0801b3d0
 800d448:	0801b3d4 	.word	0x0801b3d4
 800d44c:	0801b3d8 	.word	0x0801b3d8
 800d450:	0801b3dc 	.word	0x0801b3dc
 800d454:	0801b3e0 	.word	0x0801b3e0
 800d458:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d45a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800d45c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d45e:	429e      	cmp	r6, r3
 800d460:	dd00      	ble.n	800d464 <_printf_float+0x318>
 800d462:	001e      	movs	r6, r3
 800d464:	2e00      	cmp	r6, #0
 800d466:	dc31      	bgt.n	800d4cc <_printf_float+0x380>
 800d468:	43f3      	mvns	r3, r6
 800d46a:	2400      	movs	r4, #0
 800d46c:	17db      	asrs	r3, r3, #31
 800d46e:	4033      	ands	r3, r6
 800d470:	930e      	str	r3, [sp, #56]	@ 0x38
 800d472:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800d474:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d476:	1af3      	subs	r3, r6, r3
 800d478:	42a3      	cmp	r3, r4
 800d47a:	dc30      	bgt.n	800d4de <_printf_float+0x392>
 800d47c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d47e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d480:	429a      	cmp	r2, r3
 800d482:	dc38      	bgt.n	800d4f6 <_printf_float+0x3aa>
 800d484:	682b      	ldr	r3, [r5, #0]
 800d486:	07db      	lsls	r3, r3, #31
 800d488:	d435      	bmi.n	800d4f6 <_printf_float+0x3aa>
 800d48a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800d48c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d48e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d490:	1b9b      	subs	r3, r3, r6
 800d492:	1b14      	subs	r4, r2, r4
 800d494:	429c      	cmp	r4, r3
 800d496:	dd00      	ble.n	800d49a <_printf_float+0x34e>
 800d498:	001c      	movs	r4, r3
 800d49a:	2c00      	cmp	r4, #0
 800d49c:	dc34      	bgt.n	800d508 <_printf_float+0x3bc>
 800d49e:	43e3      	mvns	r3, r4
 800d4a0:	2600      	movs	r6, #0
 800d4a2:	17db      	asrs	r3, r3, #31
 800d4a4:	401c      	ands	r4, r3
 800d4a6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d4a8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d4aa:	1ad3      	subs	r3, r2, r3
 800d4ac:	1b1b      	subs	r3, r3, r4
 800d4ae:	42b3      	cmp	r3, r6
 800d4b0:	dc00      	bgt.n	800d4b4 <_printf_float+0x368>
 800d4b2:	e77c      	b.n	800d3ae <_printf_float+0x262>
 800d4b4:	002a      	movs	r2, r5
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d4ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d4bc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d4be:	321a      	adds	r2, #26
 800d4c0:	47b8      	blx	r7
 800d4c2:	3001      	adds	r0, #1
 800d4c4:	d100      	bne.n	800d4c8 <_printf_float+0x37c>
 800d4c6:	e69d      	b.n	800d204 <_printf_float+0xb8>
 800d4c8:	3601      	adds	r6, #1
 800d4ca:	e7ec      	b.n	800d4a6 <_printf_float+0x35a>
 800d4cc:	0033      	movs	r3, r6
 800d4ce:	003a      	movs	r2, r7
 800d4d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d4d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d4d4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d4d6:	47a0      	blx	r4
 800d4d8:	3001      	adds	r0, #1
 800d4da:	d1c5      	bne.n	800d468 <_printf_float+0x31c>
 800d4dc:	e692      	b.n	800d204 <_printf_float+0xb8>
 800d4de:	002a      	movs	r2, r5
 800d4e0:	2301      	movs	r3, #1
 800d4e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d4e4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d4e6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d4e8:	321a      	adds	r2, #26
 800d4ea:	47b0      	blx	r6
 800d4ec:	3001      	adds	r0, #1
 800d4ee:	d100      	bne.n	800d4f2 <_printf_float+0x3a6>
 800d4f0:	e688      	b.n	800d204 <_printf_float+0xb8>
 800d4f2:	3401      	adds	r4, #1
 800d4f4:	e7bd      	b.n	800d472 <_printf_float+0x326>
 800d4f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d4fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d4fc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d4fe:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d500:	47a0      	blx	r4
 800d502:	3001      	adds	r0, #1
 800d504:	d1c1      	bne.n	800d48a <_printf_float+0x33e>
 800d506:	e67d      	b.n	800d204 <_printf_float+0xb8>
 800d508:	19ba      	adds	r2, r7, r6
 800d50a:	0023      	movs	r3, r4
 800d50c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d50e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d510:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d512:	47b0      	blx	r6
 800d514:	3001      	adds	r0, #1
 800d516:	d1c2      	bne.n	800d49e <_printf_float+0x352>
 800d518:	e674      	b.n	800d204 <_printf_float+0xb8>
 800d51a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d51c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d51e:	2b01      	cmp	r3, #1
 800d520:	dc02      	bgt.n	800d528 <_printf_float+0x3dc>
 800d522:	2301      	movs	r3, #1
 800d524:	421a      	tst	r2, r3
 800d526:	d039      	beq.n	800d59c <_printf_float+0x450>
 800d528:	2301      	movs	r3, #1
 800d52a:	003a      	movs	r2, r7
 800d52c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d52e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d530:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d532:	47b0      	blx	r6
 800d534:	3001      	adds	r0, #1
 800d536:	d100      	bne.n	800d53a <_printf_float+0x3ee>
 800d538:	e664      	b.n	800d204 <_printf_float+0xb8>
 800d53a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d53c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d53e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d540:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d542:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d544:	47b0      	blx	r6
 800d546:	3001      	adds	r0, #1
 800d548:	d100      	bne.n	800d54c <_printf_float+0x400>
 800d54a:	e65b      	b.n	800d204 <_printf_float+0xb8>
 800d54c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800d54e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d550:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d552:	2200      	movs	r2, #0
 800d554:	3b01      	subs	r3, #1
 800d556:	930c      	str	r3, [sp, #48]	@ 0x30
 800d558:	2300      	movs	r3, #0
 800d55a:	f7f2 ff77 	bl	800044c <__aeabi_dcmpeq>
 800d55e:	2800      	cmp	r0, #0
 800d560:	d11a      	bne.n	800d598 <_printf_float+0x44c>
 800d562:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d564:	1c7a      	adds	r2, r7, #1
 800d566:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d568:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d56a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d56c:	47b0      	blx	r6
 800d56e:	3001      	adds	r0, #1
 800d570:	d10e      	bne.n	800d590 <_printf_float+0x444>
 800d572:	e647      	b.n	800d204 <_printf_float+0xb8>
 800d574:	002a      	movs	r2, r5
 800d576:	2301      	movs	r3, #1
 800d578:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d57a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d57c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d57e:	321a      	adds	r2, #26
 800d580:	47b8      	blx	r7
 800d582:	3001      	adds	r0, #1
 800d584:	d100      	bne.n	800d588 <_printf_float+0x43c>
 800d586:	e63d      	b.n	800d204 <_printf_float+0xb8>
 800d588:	3601      	adds	r6, #1
 800d58a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d58c:	429e      	cmp	r6, r3
 800d58e:	dbf1      	blt.n	800d574 <_printf_float+0x428>
 800d590:	002a      	movs	r2, r5
 800d592:	0023      	movs	r3, r4
 800d594:	3250      	adds	r2, #80	@ 0x50
 800d596:	e6da      	b.n	800d34e <_printf_float+0x202>
 800d598:	2600      	movs	r6, #0
 800d59a:	e7f6      	b.n	800d58a <_printf_float+0x43e>
 800d59c:	003a      	movs	r2, r7
 800d59e:	e7e2      	b.n	800d566 <_printf_float+0x41a>
 800d5a0:	002a      	movs	r2, r5
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d5a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d5a8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d5aa:	3219      	adds	r2, #25
 800d5ac:	47b0      	blx	r6
 800d5ae:	3001      	adds	r0, #1
 800d5b0:	d100      	bne.n	800d5b4 <_printf_float+0x468>
 800d5b2:	e627      	b.n	800d204 <_printf_float+0xb8>
 800d5b4:	3401      	adds	r4, #1
 800d5b6:	68eb      	ldr	r3, [r5, #12]
 800d5b8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800d5ba:	1a9b      	subs	r3, r3, r2
 800d5bc:	42a3      	cmp	r3, r4
 800d5be:	dcef      	bgt.n	800d5a0 <_printf_float+0x454>
 800d5c0:	e6f9      	b.n	800d3b6 <_printf_float+0x26a>
 800d5c2:	2400      	movs	r4, #0
 800d5c4:	e7f7      	b.n	800d5b6 <_printf_float+0x46a>
 800d5c6:	46c0      	nop			@ (mov r8, r8)

0800d5c8 <_printf_common>:
 800d5c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d5ca:	0016      	movs	r6, r2
 800d5cc:	9301      	str	r3, [sp, #4]
 800d5ce:	688a      	ldr	r2, [r1, #8]
 800d5d0:	690b      	ldr	r3, [r1, #16]
 800d5d2:	000c      	movs	r4, r1
 800d5d4:	9000      	str	r0, [sp, #0]
 800d5d6:	4293      	cmp	r3, r2
 800d5d8:	da00      	bge.n	800d5dc <_printf_common+0x14>
 800d5da:	0013      	movs	r3, r2
 800d5dc:	0022      	movs	r2, r4
 800d5de:	6033      	str	r3, [r6, #0]
 800d5e0:	3243      	adds	r2, #67	@ 0x43
 800d5e2:	7812      	ldrb	r2, [r2, #0]
 800d5e4:	2a00      	cmp	r2, #0
 800d5e6:	d001      	beq.n	800d5ec <_printf_common+0x24>
 800d5e8:	3301      	adds	r3, #1
 800d5ea:	6033      	str	r3, [r6, #0]
 800d5ec:	6823      	ldr	r3, [r4, #0]
 800d5ee:	069b      	lsls	r3, r3, #26
 800d5f0:	d502      	bpl.n	800d5f8 <_printf_common+0x30>
 800d5f2:	6833      	ldr	r3, [r6, #0]
 800d5f4:	3302      	adds	r3, #2
 800d5f6:	6033      	str	r3, [r6, #0]
 800d5f8:	6822      	ldr	r2, [r4, #0]
 800d5fa:	2306      	movs	r3, #6
 800d5fc:	0015      	movs	r5, r2
 800d5fe:	401d      	ands	r5, r3
 800d600:	421a      	tst	r2, r3
 800d602:	d027      	beq.n	800d654 <_printf_common+0x8c>
 800d604:	0023      	movs	r3, r4
 800d606:	3343      	adds	r3, #67	@ 0x43
 800d608:	781b      	ldrb	r3, [r3, #0]
 800d60a:	1e5a      	subs	r2, r3, #1
 800d60c:	4193      	sbcs	r3, r2
 800d60e:	6822      	ldr	r2, [r4, #0]
 800d610:	0692      	lsls	r2, r2, #26
 800d612:	d430      	bmi.n	800d676 <_printf_common+0xae>
 800d614:	0022      	movs	r2, r4
 800d616:	9901      	ldr	r1, [sp, #4]
 800d618:	9800      	ldr	r0, [sp, #0]
 800d61a:	9d08      	ldr	r5, [sp, #32]
 800d61c:	3243      	adds	r2, #67	@ 0x43
 800d61e:	47a8      	blx	r5
 800d620:	3001      	adds	r0, #1
 800d622:	d025      	beq.n	800d670 <_printf_common+0xa8>
 800d624:	2206      	movs	r2, #6
 800d626:	6823      	ldr	r3, [r4, #0]
 800d628:	2500      	movs	r5, #0
 800d62a:	4013      	ands	r3, r2
 800d62c:	2b04      	cmp	r3, #4
 800d62e:	d105      	bne.n	800d63c <_printf_common+0x74>
 800d630:	6833      	ldr	r3, [r6, #0]
 800d632:	68e5      	ldr	r5, [r4, #12]
 800d634:	1aed      	subs	r5, r5, r3
 800d636:	43eb      	mvns	r3, r5
 800d638:	17db      	asrs	r3, r3, #31
 800d63a:	401d      	ands	r5, r3
 800d63c:	68a3      	ldr	r3, [r4, #8]
 800d63e:	6922      	ldr	r2, [r4, #16]
 800d640:	4293      	cmp	r3, r2
 800d642:	dd01      	ble.n	800d648 <_printf_common+0x80>
 800d644:	1a9b      	subs	r3, r3, r2
 800d646:	18ed      	adds	r5, r5, r3
 800d648:	2600      	movs	r6, #0
 800d64a:	42b5      	cmp	r5, r6
 800d64c:	d120      	bne.n	800d690 <_printf_common+0xc8>
 800d64e:	2000      	movs	r0, #0
 800d650:	e010      	b.n	800d674 <_printf_common+0xac>
 800d652:	3501      	adds	r5, #1
 800d654:	68e3      	ldr	r3, [r4, #12]
 800d656:	6832      	ldr	r2, [r6, #0]
 800d658:	1a9b      	subs	r3, r3, r2
 800d65a:	42ab      	cmp	r3, r5
 800d65c:	ddd2      	ble.n	800d604 <_printf_common+0x3c>
 800d65e:	0022      	movs	r2, r4
 800d660:	2301      	movs	r3, #1
 800d662:	9901      	ldr	r1, [sp, #4]
 800d664:	9800      	ldr	r0, [sp, #0]
 800d666:	9f08      	ldr	r7, [sp, #32]
 800d668:	3219      	adds	r2, #25
 800d66a:	47b8      	blx	r7
 800d66c:	3001      	adds	r0, #1
 800d66e:	d1f0      	bne.n	800d652 <_printf_common+0x8a>
 800d670:	2001      	movs	r0, #1
 800d672:	4240      	negs	r0, r0
 800d674:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d676:	2030      	movs	r0, #48	@ 0x30
 800d678:	18e1      	adds	r1, r4, r3
 800d67a:	3143      	adds	r1, #67	@ 0x43
 800d67c:	7008      	strb	r0, [r1, #0]
 800d67e:	0021      	movs	r1, r4
 800d680:	1c5a      	adds	r2, r3, #1
 800d682:	3145      	adds	r1, #69	@ 0x45
 800d684:	7809      	ldrb	r1, [r1, #0]
 800d686:	18a2      	adds	r2, r4, r2
 800d688:	3243      	adds	r2, #67	@ 0x43
 800d68a:	3302      	adds	r3, #2
 800d68c:	7011      	strb	r1, [r2, #0]
 800d68e:	e7c1      	b.n	800d614 <_printf_common+0x4c>
 800d690:	0022      	movs	r2, r4
 800d692:	2301      	movs	r3, #1
 800d694:	9901      	ldr	r1, [sp, #4]
 800d696:	9800      	ldr	r0, [sp, #0]
 800d698:	9f08      	ldr	r7, [sp, #32]
 800d69a:	321a      	adds	r2, #26
 800d69c:	47b8      	blx	r7
 800d69e:	3001      	adds	r0, #1
 800d6a0:	d0e6      	beq.n	800d670 <_printf_common+0xa8>
 800d6a2:	3601      	adds	r6, #1
 800d6a4:	e7d1      	b.n	800d64a <_printf_common+0x82>
	...

0800d6a8 <_printf_i>:
 800d6a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6aa:	b08b      	sub	sp, #44	@ 0x2c
 800d6ac:	9206      	str	r2, [sp, #24]
 800d6ae:	000a      	movs	r2, r1
 800d6b0:	3243      	adds	r2, #67	@ 0x43
 800d6b2:	9307      	str	r3, [sp, #28]
 800d6b4:	9005      	str	r0, [sp, #20]
 800d6b6:	9203      	str	r2, [sp, #12]
 800d6b8:	7e0a      	ldrb	r2, [r1, #24]
 800d6ba:	000c      	movs	r4, r1
 800d6bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d6be:	2a78      	cmp	r2, #120	@ 0x78
 800d6c0:	d809      	bhi.n	800d6d6 <_printf_i+0x2e>
 800d6c2:	2a62      	cmp	r2, #98	@ 0x62
 800d6c4:	d80b      	bhi.n	800d6de <_printf_i+0x36>
 800d6c6:	2a00      	cmp	r2, #0
 800d6c8:	d100      	bne.n	800d6cc <_printf_i+0x24>
 800d6ca:	e0bc      	b.n	800d846 <_printf_i+0x19e>
 800d6cc:	497b      	ldr	r1, [pc, #492]	@ (800d8bc <_printf_i+0x214>)
 800d6ce:	9104      	str	r1, [sp, #16]
 800d6d0:	2a58      	cmp	r2, #88	@ 0x58
 800d6d2:	d100      	bne.n	800d6d6 <_printf_i+0x2e>
 800d6d4:	e090      	b.n	800d7f8 <_printf_i+0x150>
 800d6d6:	0025      	movs	r5, r4
 800d6d8:	3542      	adds	r5, #66	@ 0x42
 800d6da:	702a      	strb	r2, [r5, #0]
 800d6dc:	e022      	b.n	800d724 <_printf_i+0x7c>
 800d6de:	0010      	movs	r0, r2
 800d6e0:	3863      	subs	r0, #99	@ 0x63
 800d6e2:	2815      	cmp	r0, #21
 800d6e4:	d8f7      	bhi.n	800d6d6 <_printf_i+0x2e>
 800d6e6:	f7f2 fd21 	bl	800012c <__gnu_thumb1_case_shi>
 800d6ea:	0016      	.short	0x0016
 800d6ec:	fff6001f 	.word	0xfff6001f
 800d6f0:	fff6fff6 	.word	0xfff6fff6
 800d6f4:	001ffff6 	.word	0x001ffff6
 800d6f8:	fff6fff6 	.word	0xfff6fff6
 800d6fc:	fff6fff6 	.word	0xfff6fff6
 800d700:	003600a1 	.word	0x003600a1
 800d704:	fff60080 	.word	0xfff60080
 800d708:	00b2fff6 	.word	0x00b2fff6
 800d70c:	0036fff6 	.word	0x0036fff6
 800d710:	fff6fff6 	.word	0xfff6fff6
 800d714:	0084      	.short	0x0084
 800d716:	0025      	movs	r5, r4
 800d718:	681a      	ldr	r2, [r3, #0]
 800d71a:	3542      	adds	r5, #66	@ 0x42
 800d71c:	1d11      	adds	r1, r2, #4
 800d71e:	6019      	str	r1, [r3, #0]
 800d720:	6813      	ldr	r3, [r2, #0]
 800d722:	702b      	strb	r3, [r5, #0]
 800d724:	2301      	movs	r3, #1
 800d726:	e0a0      	b.n	800d86a <_printf_i+0x1c2>
 800d728:	6818      	ldr	r0, [r3, #0]
 800d72a:	6809      	ldr	r1, [r1, #0]
 800d72c:	1d02      	adds	r2, r0, #4
 800d72e:	060d      	lsls	r5, r1, #24
 800d730:	d50b      	bpl.n	800d74a <_printf_i+0xa2>
 800d732:	6806      	ldr	r6, [r0, #0]
 800d734:	601a      	str	r2, [r3, #0]
 800d736:	2e00      	cmp	r6, #0
 800d738:	da03      	bge.n	800d742 <_printf_i+0x9a>
 800d73a:	232d      	movs	r3, #45	@ 0x2d
 800d73c:	9a03      	ldr	r2, [sp, #12]
 800d73e:	4276      	negs	r6, r6
 800d740:	7013      	strb	r3, [r2, #0]
 800d742:	4b5e      	ldr	r3, [pc, #376]	@ (800d8bc <_printf_i+0x214>)
 800d744:	270a      	movs	r7, #10
 800d746:	9304      	str	r3, [sp, #16]
 800d748:	e018      	b.n	800d77c <_printf_i+0xd4>
 800d74a:	6806      	ldr	r6, [r0, #0]
 800d74c:	601a      	str	r2, [r3, #0]
 800d74e:	0649      	lsls	r1, r1, #25
 800d750:	d5f1      	bpl.n	800d736 <_printf_i+0x8e>
 800d752:	b236      	sxth	r6, r6
 800d754:	e7ef      	b.n	800d736 <_printf_i+0x8e>
 800d756:	6808      	ldr	r0, [r1, #0]
 800d758:	6819      	ldr	r1, [r3, #0]
 800d75a:	c940      	ldmia	r1!, {r6}
 800d75c:	0605      	lsls	r5, r0, #24
 800d75e:	d402      	bmi.n	800d766 <_printf_i+0xbe>
 800d760:	0640      	lsls	r0, r0, #25
 800d762:	d500      	bpl.n	800d766 <_printf_i+0xbe>
 800d764:	b2b6      	uxth	r6, r6
 800d766:	6019      	str	r1, [r3, #0]
 800d768:	4b54      	ldr	r3, [pc, #336]	@ (800d8bc <_printf_i+0x214>)
 800d76a:	270a      	movs	r7, #10
 800d76c:	9304      	str	r3, [sp, #16]
 800d76e:	2a6f      	cmp	r2, #111	@ 0x6f
 800d770:	d100      	bne.n	800d774 <_printf_i+0xcc>
 800d772:	3f02      	subs	r7, #2
 800d774:	0023      	movs	r3, r4
 800d776:	2200      	movs	r2, #0
 800d778:	3343      	adds	r3, #67	@ 0x43
 800d77a:	701a      	strb	r2, [r3, #0]
 800d77c:	6863      	ldr	r3, [r4, #4]
 800d77e:	60a3      	str	r3, [r4, #8]
 800d780:	2b00      	cmp	r3, #0
 800d782:	db03      	blt.n	800d78c <_printf_i+0xe4>
 800d784:	2104      	movs	r1, #4
 800d786:	6822      	ldr	r2, [r4, #0]
 800d788:	438a      	bics	r2, r1
 800d78a:	6022      	str	r2, [r4, #0]
 800d78c:	2e00      	cmp	r6, #0
 800d78e:	d102      	bne.n	800d796 <_printf_i+0xee>
 800d790:	9d03      	ldr	r5, [sp, #12]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d00c      	beq.n	800d7b0 <_printf_i+0x108>
 800d796:	9d03      	ldr	r5, [sp, #12]
 800d798:	0030      	movs	r0, r6
 800d79a:	0039      	movs	r1, r7
 800d79c:	f7f2 fd56 	bl	800024c <__aeabi_uidivmod>
 800d7a0:	9b04      	ldr	r3, [sp, #16]
 800d7a2:	3d01      	subs	r5, #1
 800d7a4:	5c5b      	ldrb	r3, [r3, r1]
 800d7a6:	702b      	strb	r3, [r5, #0]
 800d7a8:	0033      	movs	r3, r6
 800d7aa:	0006      	movs	r6, r0
 800d7ac:	429f      	cmp	r7, r3
 800d7ae:	d9f3      	bls.n	800d798 <_printf_i+0xf0>
 800d7b0:	2f08      	cmp	r7, #8
 800d7b2:	d109      	bne.n	800d7c8 <_printf_i+0x120>
 800d7b4:	6823      	ldr	r3, [r4, #0]
 800d7b6:	07db      	lsls	r3, r3, #31
 800d7b8:	d506      	bpl.n	800d7c8 <_printf_i+0x120>
 800d7ba:	6862      	ldr	r2, [r4, #4]
 800d7bc:	6923      	ldr	r3, [r4, #16]
 800d7be:	429a      	cmp	r2, r3
 800d7c0:	dc02      	bgt.n	800d7c8 <_printf_i+0x120>
 800d7c2:	2330      	movs	r3, #48	@ 0x30
 800d7c4:	3d01      	subs	r5, #1
 800d7c6:	702b      	strb	r3, [r5, #0]
 800d7c8:	9b03      	ldr	r3, [sp, #12]
 800d7ca:	1b5b      	subs	r3, r3, r5
 800d7cc:	6123      	str	r3, [r4, #16]
 800d7ce:	9b07      	ldr	r3, [sp, #28]
 800d7d0:	0021      	movs	r1, r4
 800d7d2:	9300      	str	r3, [sp, #0]
 800d7d4:	9805      	ldr	r0, [sp, #20]
 800d7d6:	9b06      	ldr	r3, [sp, #24]
 800d7d8:	aa09      	add	r2, sp, #36	@ 0x24
 800d7da:	f7ff fef5 	bl	800d5c8 <_printf_common>
 800d7de:	3001      	adds	r0, #1
 800d7e0:	d148      	bne.n	800d874 <_printf_i+0x1cc>
 800d7e2:	2001      	movs	r0, #1
 800d7e4:	4240      	negs	r0, r0
 800d7e6:	b00b      	add	sp, #44	@ 0x2c
 800d7e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7ea:	2220      	movs	r2, #32
 800d7ec:	6809      	ldr	r1, [r1, #0]
 800d7ee:	430a      	orrs	r2, r1
 800d7f0:	6022      	str	r2, [r4, #0]
 800d7f2:	2278      	movs	r2, #120	@ 0x78
 800d7f4:	4932      	ldr	r1, [pc, #200]	@ (800d8c0 <_printf_i+0x218>)
 800d7f6:	9104      	str	r1, [sp, #16]
 800d7f8:	0021      	movs	r1, r4
 800d7fa:	3145      	adds	r1, #69	@ 0x45
 800d7fc:	700a      	strb	r2, [r1, #0]
 800d7fe:	6819      	ldr	r1, [r3, #0]
 800d800:	6822      	ldr	r2, [r4, #0]
 800d802:	c940      	ldmia	r1!, {r6}
 800d804:	0610      	lsls	r0, r2, #24
 800d806:	d402      	bmi.n	800d80e <_printf_i+0x166>
 800d808:	0650      	lsls	r0, r2, #25
 800d80a:	d500      	bpl.n	800d80e <_printf_i+0x166>
 800d80c:	b2b6      	uxth	r6, r6
 800d80e:	6019      	str	r1, [r3, #0]
 800d810:	07d3      	lsls	r3, r2, #31
 800d812:	d502      	bpl.n	800d81a <_printf_i+0x172>
 800d814:	2320      	movs	r3, #32
 800d816:	4313      	orrs	r3, r2
 800d818:	6023      	str	r3, [r4, #0]
 800d81a:	2e00      	cmp	r6, #0
 800d81c:	d001      	beq.n	800d822 <_printf_i+0x17a>
 800d81e:	2710      	movs	r7, #16
 800d820:	e7a8      	b.n	800d774 <_printf_i+0xcc>
 800d822:	2220      	movs	r2, #32
 800d824:	6823      	ldr	r3, [r4, #0]
 800d826:	4393      	bics	r3, r2
 800d828:	6023      	str	r3, [r4, #0]
 800d82a:	e7f8      	b.n	800d81e <_printf_i+0x176>
 800d82c:	681a      	ldr	r2, [r3, #0]
 800d82e:	680d      	ldr	r5, [r1, #0]
 800d830:	1d10      	adds	r0, r2, #4
 800d832:	6949      	ldr	r1, [r1, #20]
 800d834:	6018      	str	r0, [r3, #0]
 800d836:	6813      	ldr	r3, [r2, #0]
 800d838:	062e      	lsls	r6, r5, #24
 800d83a:	d501      	bpl.n	800d840 <_printf_i+0x198>
 800d83c:	6019      	str	r1, [r3, #0]
 800d83e:	e002      	b.n	800d846 <_printf_i+0x19e>
 800d840:	066d      	lsls	r5, r5, #25
 800d842:	d5fb      	bpl.n	800d83c <_printf_i+0x194>
 800d844:	8019      	strh	r1, [r3, #0]
 800d846:	2300      	movs	r3, #0
 800d848:	9d03      	ldr	r5, [sp, #12]
 800d84a:	6123      	str	r3, [r4, #16]
 800d84c:	e7bf      	b.n	800d7ce <_printf_i+0x126>
 800d84e:	681a      	ldr	r2, [r3, #0]
 800d850:	1d11      	adds	r1, r2, #4
 800d852:	6019      	str	r1, [r3, #0]
 800d854:	6815      	ldr	r5, [r2, #0]
 800d856:	2100      	movs	r1, #0
 800d858:	0028      	movs	r0, r5
 800d85a:	6862      	ldr	r2, [r4, #4]
 800d85c:	f000 fa01 	bl	800dc62 <memchr>
 800d860:	2800      	cmp	r0, #0
 800d862:	d001      	beq.n	800d868 <_printf_i+0x1c0>
 800d864:	1b40      	subs	r0, r0, r5
 800d866:	6060      	str	r0, [r4, #4]
 800d868:	6863      	ldr	r3, [r4, #4]
 800d86a:	6123      	str	r3, [r4, #16]
 800d86c:	2300      	movs	r3, #0
 800d86e:	9a03      	ldr	r2, [sp, #12]
 800d870:	7013      	strb	r3, [r2, #0]
 800d872:	e7ac      	b.n	800d7ce <_printf_i+0x126>
 800d874:	002a      	movs	r2, r5
 800d876:	6923      	ldr	r3, [r4, #16]
 800d878:	9906      	ldr	r1, [sp, #24]
 800d87a:	9805      	ldr	r0, [sp, #20]
 800d87c:	9d07      	ldr	r5, [sp, #28]
 800d87e:	47a8      	blx	r5
 800d880:	3001      	adds	r0, #1
 800d882:	d0ae      	beq.n	800d7e2 <_printf_i+0x13a>
 800d884:	6823      	ldr	r3, [r4, #0]
 800d886:	079b      	lsls	r3, r3, #30
 800d888:	d415      	bmi.n	800d8b6 <_printf_i+0x20e>
 800d88a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d88c:	68e0      	ldr	r0, [r4, #12]
 800d88e:	4298      	cmp	r0, r3
 800d890:	daa9      	bge.n	800d7e6 <_printf_i+0x13e>
 800d892:	0018      	movs	r0, r3
 800d894:	e7a7      	b.n	800d7e6 <_printf_i+0x13e>
 800d896:	0022      	movs	r2, r4
 800d898:	2301      	movs	r3, #1
 800d89a:	9906      	ldr	r1, [sp, #24]
 800d89c:	9805      	ldr	r0, [sp, #20]
 800d89e:	9e07      	ldr	r6, [sp, #28]
 800d8a0:	3219      	adds	r2, #25
 800d8a2:	47b0      	blx	r6
 800d8a4:	3001      	adds	r0, #1
 800d8a6:	d09c      	beq.n	800d7e2 <_printf_i+0x13a>
 800d8a8:	3501      	adds	r5, #1
 800d8aa:	68e3      	ldr	r3, [r4, #12]
 800d8ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d8ae:	1a9b      	subs	r3, r3, r2
 800d8b0:	42ab      	cmp	r3, r5
 800d8b2:	dcf0      	bgt.n	800d896 <_printf_i+0x1ee>
 800d8b4:	e7e9      	b.n	800d88a <_printf_i+0x1e2>
 800d8b6:	2500      	movs	r5, #0
 800d8b8:	e7f7      	b.n	800d8aa <_printf_i+0x202>
 800d8ba:	46c0      	nop			@ (mov r8, r8)
 800d8bc:	0801b3e2 	.word	0x0801b3e2
 800d8c0:	0801b3f3 	.word	0x0801b3f3

0800d8c4 <std>:
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	b510      	push	{r4, lr}
 800d8c8:	0004      	movs	r4, r0
 800d8ca:	6003      	str	r3, [r0, #0]
 800d8cc:	6043      	str	r3, [r0, #4]
 800d8ce:	6083      	str	r3, [r0, #8]
 800d8d0:	8181      	strh	r1, [r0, #12]
 800d8d2:	6643      	str	r3, [r0, #100]	@ 0x64
 800d8d4:	81c2      	strh	r2, [r0, #14]
 800d8d6:	6103      	str	r3, [r0, #16]
 800d8d8:	6143      	str	r3, [r0, #20]
 800d8da:	6183      	str	r3, [r0, #24]
 800d8dc:	0019      	movs	r1, r3
 800d8de:	2208      	movs	r2, #8
 800d8e0:	305c      	adds	r0, #92	@ 0x5c
 800d8e2:	f000 f90f 	bl	800db04 <memset>
 800d8e6:	4b0b      	ldr	r3, [pc, #44]	@ (800d914 <std+0x50>)
 800d8e8:	6224      	str	r4, [r4, #32]
 800d8ea:	6263      	str	r3, [r4, #36]	@ 0x24
 800d8ec:	4b0a      	ldr	r3, [pc, #40]	@ (800d918 <std+0x54>)
 800d8ee:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d8f0:	4b0a      	ldr	r3, [pc, #40]	@ (800d91c <std+0x58>)
 800d8f2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d8f4:	4b0a      	ldr	r3, [pc, #40]	@ (800d920 <std+0x5c>)
 800d8f6:	6323      	str	r3, [r4, #48]	@ 0x30
 800d8f8:	4b0a      	ldr	r3, [pc, #40]	@ (800d924 <std+0x60>)
 800d8fa:	429c      	cmp	r4, r3
 800d8fc:	d005      	beq.n	800d90a <std+0x46>
 800d8fe:	4b0a      	ldr	r3, [pc, #40]	@ (800d928 <std+0x64>)
 800d900:	429c      	cmp	r4, r3
 800d902:	d002      	beq.n	800d90a <std+0x46>
 800d904:	4b09      	ldr	r3, [pc, #36]	@ (800d92c <std+0x68>)
 800d906:	429c      	cmp	r4, r3
 800d908:	d103      	bne.n	800d912 <std+0x4e>
 800d90a:	0020      	movs	r0, r4
 800d90c:	3058      	adds	r0, #88	@ 0x58
 800d90e:	f000 f9a5 	bl	800dc5c <__retarget_lock_init_recursive>
 800d912:	bd10      	pop	{r4, pc}
 800d914:	0800da6d 	.word	0x0800da6d
 800d918:	0800da95 	.word	0x0800da95
 800d91c:	0800dacd 	.word	0x0800dacd
 800d920:	0800daf9 	.word	0x0800daf9
 800d924:	20000604 	.word	0x20000604
 800d928:	2000066c 	.word	0x2000066c
 800d92c:	200006d4 	.word	0x200006d4

0800d930 <stdio_exit_handler>:
 800d930:	b510      	push	{r4, lr}
 800d932:	4a03      	ldr	r2, [pc, #12]	@ (800d940 <stdio_exit_handler+0x10>)
 800d934:	4903      	ldr	r1, [pc, #12]	@ (800d944 <stdio_exit_handler+0x14>)
 800d936:	4804      	ldr	r0, [pc, #16]	@ (800d948 <stdio_exit_handler+0x18>)
 800d938:	f000 f87c 	bl	800da34 <_fwalk_sglue>
 800d93c:	bd10      	pop	{r4, pc}
 800d93e:	46c0      	nop			@ (mov r8, r8)
 800d940:	20000178 	.word	0x20000178
 800d944:	0800f4ed 	.word	0x0800f4ed
 800d948:	20000188 	.word	0x20000188

0800d94c <cleanup_stdio>:
 800d94c:	6841      	ldr	r1, [r0, #4]
 800d94e:	4b0b      	ldr	r3, [pc, #44]	@ (800d97c <cleanup_stdio+0x30>)
 800d950:	b510      	push	{r4, lr}
 800d952:	0004      	movs	r4, r0
 800d954:	4299      	cmp	r1, r3
 800d956:	d001      	beq.n	800d95c <cleanup_stdio+0x10>
 800d958:	f001 fdc8 	bl	800f4ec <_fflush_r>
 800d95c:	68a1      	ldr	r1, [r4, #8]
 800d95e:	4b08      	ldr	r3, [pc, #32]	@ (800d980 <cleanup_stdio+0x34>)
 800d960:	4299      	cmp	r1, r3
 800d962:	d002      	beq.n	800d96a <cleanup_stdio+0x1e>
 800d964:	0020      	movs	r0, r4
 800d966:	f001 fdc1 	bl	800f4ec <_fflush_r>
 800d96a:	68e1      	ldr	r1, [r4, #12]
 800d96c:	4b05      	ldr	r3, [pc, #20]	@ (800d984 <cleanup_stdio+0x38>)
 800d96e:	4299      	cmp	r1, r3
 800d970:	d002      	beq.n	800d978 <cleanup_stdio+0x2c>
 800d972:	0020      	movs	r0, r4
 800d974:	f001 fdba 	bl	800f4ec <_fflush_r>
 800d978:	bd10      	pop	{r4, pc}
 800d97a:	46c0      	nop			@ (mov r8, r8)
 800d97c:	20000604 	.word	0x20000604
 800d980:	2000066c 	.word	0x2000066c
 800d984:	200006d4 	.word	0x200006d4

0800d988 <global_stdio_init.part.0>:
 800d988:	b510      	push	{r4, lr}
 800d98a:	4b09      	ldr	r3, [pc, #36]	@ (800d9b0 <global_stdio_init.part.0+0x28>)
 800d98c:	4a09      	ldr	r2, [pc, #36]	@ (800d9b4 <global_stdio_init.part.0+0x2c>)
 800d98e:	2104      	movs	r1, #4
 800d990:	601a      	str	r2, [r3, #0]
 800d992:	4809      	ldr	r0, [pc, #36]	@ (800d9b8 <global_stdio_init.part.0+0x30>)
 800d994:	2200      	movs	r2, #0
 800d996:	f7ff ff95 	bl	800d8c4 <std>
 800d99a:	2201      	movs	r2, #1
 800d99c:	2109      	movs	r1, #9
 800d99e:	4807      	ldr	r0, [pc, #28]	@ (800d9bc <global_stdio_init.part.0+0x34>)
 800d9a0:	f7ff ff90 	bl	800d8c4 <std>
 800d9a4:	2202      	movs	r2, #2
 800d9a6:	2112      	movs	r1, #18
 800d9a8:	4805      	ldr	r0, [pc, #20]	@ (800d9c0 <global_stdio_init.part.0+0x38>)
 800d9aa:	f7ff ff8b 	bl	800d8c4 <std>
 800d9ae:	bd10      	pop	{r4, pc}
 800d9b0:	2000073c 	.word	0x2000073c
 800d9b4:	0800d931 	.word	0x0800d931
 800d9b8:	20000604 	.word	0x20000604
 800d9bc:	2000066c 	.word	0x2000066c
 800d9c0:	200006d4 	.word	0x200006d4

0800d9c4 <__sfp_lock_acquire>:
 800d9c4:	b510      	push	{r4, lr}
 800d9c6:	4802      	ldr	r0, [pc, #8]	@ (800d9d0 <__sfp_lock_acquire+0xc>)
 800d9c8:	f000 f949 	bl	800dc5e <__retarget_lock_acquire_recursive>
 800d9cc:	bd10      	pop	{r4, pc}
 800d9ce:	46c0      	nop			@ (mov r8, r8)
 800d9d0:	20000745 	.word	0x20000745

0800d9d4 <__sfp_lock_release>:
 800d9d4:	b510      	push	{r4, lr}
 800d9d6:	4802      	ldr	r0, [pc, #8]	@ (800d9e0 <__sfp_lock_release+0xc>)
 800d9d8:	f000 f942 	bl	800dc60 <__retarget_lock_release_recursive>
 800d9dc:	bd10      	pop	{r4, pc}
 800d9de:	46c0      	nop			@ (mov r8, r8)
 800d9e0:	20000745 	.word	0x20000745

0800d9e4 <__sinit>:
 800d9e4:	b510      	push	{r4, lr}
 800d9e6:	0004      	movs	r4, r0
 800d9e8:	f7ff ffec 	bl	800d9c4 <__sfp_lock_acquire>
 800d9ec:	6a23      	ldr	r3, [r4, #32]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d002      	beq.n	800d9f8 <__sinit+0x14>
 800d9f2:	f7ff ffef 	bl	800d9d4 <__sfp_lock_release>
 800d9f6:	bd10      	pop	{r4, pc}
 800d9f8:	4b04      	ldr	r3, [pc, #16]	@ (800da0c <__sinit+0x28>)
 800d9fa:	6223      	str	r3, [r4, #32]
 800d9fc:	4b04      	ldr	r3, [pc, #16]	@ (800da10 <__sinit+0x2c>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d1f6      	bne.n	800d9f2 <__sinit+0xe>
 800da04:	f7ff ffc0 	bl	800d988 <global_stdio_init.part.0>
 800da08:	e7f3      	b.n	800d9f2 <__sinit+0xe>
 800da0a:	46c0      	nop			@ (mov r8, r8)
 800da0c:	0800d94d 	.word	0x0800d94d
 800da10:	2000073c 	.word	0x2000073c

0800da14 <fiprintf>:
 800da14:	b40e      	push	{r1, r2, r3}
 800da16:	b517      	push	{r0, r1, r2, r4, lr}
 800da18:	4c05      	ldr	r4, [pc, #20]	@ (800da30 <fiprintf+0x1c>)
 800da1a:	ab05      	add	r3, sp, #20
 800da1c:	cb04      	ldmia	r3!, {r2}
 800da1e:	0001      	movs	r1, r0
 800da20:	6820      	ldr	r0, [r4, #0]
 800da22:	9301      	str	r3, [sp, #4]
 800da24:	f001 fbc0 	bl	800f1a8 <_vfiprintf_r>
 800da28:	bc1e      	pop	{r1, r2, r3, r4}
 800da2a:	bc08      	pop	{r3}
 800da2c:	b003      	add	sp, #12
 800da2e:	4718      	bx	r3
 800da30:	20000184 	.word	0x20000184

0800da34 <_fwalk_sglue>:
 800da34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da36:	0014      	movs	r4, r2
 800da38:	2600      	movs	r6, #0
 800da3a:	9000      	str	r0, [sp, #0]
 800da3c:	9101      	str	r1, [sp, #4]
 800da3e:	68a5      	ldr	r5, [r4, #8]
 800da40:	6867      	ldr	r7, [r4, #4]
 800da42:	3f01      	subs	r7, #1
 800da44:	d504      	bpl.n	800da50 <_fwalk_sglue+0x1c>
 800da46:	6824      	ldr	r4, [r4, #0]
 800da48:	2c00      	cmp	r4, #0
 800da4a:	d1f8      	bne.n	800da3e <_fwalk_sglue+0xa>
 800da4c:	0030      	movs	r0, r6
 800da4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800da50:	89ab      	ldrh	r3, [r5, #12]
 800da52:	2b01      	cmp	r3, #1
 800da54:	d908      	bls.n	800da68 <_fwalk_sglue+0x34>
 800da56:	220e      	movs	r2, #14
 800da58:	5eab      	ldrsh	r3, [r5, r2]
 800da5a:	3301      	adds	r3, #1
 800da5c:	d004      	beq.n	800da68 <_fwalk_sglue+0x34>
 800da5e:	0029      	movs	r1, r5
 800da60:	9800      	ldr	r0, [sp, #0]
 800da62:	9b01      	ldr	r3, [sp, #4]
 800da64:	4798      	blx	r3
 800da66:	4306      	orrs	r6, r0
 800da68:	3568      	adds	r5, #104	@ 0x68
 800da6a:	e7ea      	b.n	800da42 <_fwalk_sglue+0xe>

0800da6c <__sread>:
 800da6c:	b570      	push	{r4, r5, r6, lr}
 800da6e:	000c      	movs	r4, r1
 800da70:	250e      	movs	r5, #14
 800da72:	5f49      	ldrsh	r1, [r1, r5]
 800da74:	f000 f88e 	bl	800db94 <_read_r>
 800da78:	2800      	cmp	r0, #0
 800da7a:	db03      	blt.n	800da84 <__sread+0x18>
 800da7c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800da7e:	181b      	adds	r3, r3, r0
 800da80:	6563      	str	r3, [r4, #84]	@ 0x54
 800da82:	bd70      	pop	{r4, r5, r6, pc}
 800da84:	89a3      	ldrh	r3, [r4, #12]
 800da86:	4a02      	ldr	r2, [pc, #8]	@ (800da90 <__sread+0x24>)
 800da88:	4013      	ands	r3, r2
 800da8a:	81a3      	strh	r3, [r4, #12]
 800da8c:	e7f9      	b.n	800da82 <__sread+0x16>
 800da8e:	46c0      	nop			@ (mov r8, r8)
 800da90:	ffffefff 	.word	0xffffefff

0800da94 <__swrite>:
 800da94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da96:	001f      	movs	r7, r3
 800da98:	898b      	ldrh	r3, [r1, #12]
 800da9a:	0005      	movs	r5, r0
 800da9c:	000c      	movs	r4, r1
 800da9e:	0016      	movs	r6, r2
 800daa0:	05db      	lsls	r3, r3, #23
 800daa2:	d505      	bpl.n	800dab0 <__swrite+0x1c>
 800daa4:	230e      	movs	r3, #14
 800daa6:	5ec9      	ldrsh	r1, [r1, r3]
 800daa8:	2200      	movs	r2, #0
 800daaa:	2302      	movs	r3, #2
 800daac:	f000 f85e 	bl	800db6c <_lseek_r>
 800dab0:	89a3      	ldrh	r3, [r4, #12]
 800dab2:	4a05      	ldr	r2, [pc, #20]	@ (800dac8 <__swrite+0x34>)
 800dab4:	0028      	movs	r0, r5
 800dab6:	4013      	ands	r3, r2
 800dab8:	81a3      	strh	r3, [r4, #12]
 800daba:	0032      	movs	r2, r6
 800dabc:	230e      	movs	r3, #14
 800dabe:	5ee1      	ldrsh	r1, [r4, r3]
 800dac0:	003b      	movs	r3, r7
 800dac2:	f000 f88d 	bl	800dbe0 <_write_r>
 800dac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dac8:	ffffefff 	.word	0xffffefff

0800dacc <__sseek>:
 800dacc:	b570      	push	{r4, r5, r6, lr}
 800dace:	000c      	movs	r4, r1
 800dad0:	250e      	movs	r5, #14
 800dad2:	5f49      	ldrsh	r1, [r1, r5]
 800dad4:	f000 f84a 	bl	800db6c <_lseek_r>
 800dad8:	89a3      	ldrh	r3, [r4, #12]
 800dada:	1c42      	adds	r2, r0, #1
 800dadc:	d103      	bne.n	800dae6 <__sseek+0x1a>
 800dade:	4a05      	ldr	r2, [pc, #20]	@ (800daf4 <__sseek+0x28>)
 800dae0:	4013      	ands	r3, r2
 800dae2:	81a3      	strh	r3, [r4, #12]
 800dae4:	bd70      	pop	{r4, r5, r6, pc}
 800dae6:	2280      	movs	r2, #128	@ 0x80
 800dae8:	0152      	lsls	r2, r2, #5
 800daea:	4313      	orrs	r3, r2
 800daec:	81a3      	strh	r3, [r4, #12]
 800daee:	6560      	str	r0, [r4, #84]	@ 0x54
 800daf0:	e7f8      	b.n	800dae4 <__sseek+0x18>
 800daf2:	46c0      	nop			@ (mov r8, r8)
 800daf4:	ffffefff 	.word	0xffffefff

0800daf8 <__sclose>:
 800daf8:	b510      	push	{r4, lr}
 800dafa:	230e      	movs	r3, #14
 800dafc:	5ec9      	ldrsh	r1, [r1, r3]
 800dafe:	f000 f823 	bl	800db48 <_close_r>
 800db02:	bd10      	pop	{r4, pc}

0800db04 <memset>:
 800db04:	0003      	movs	r3, r0
 800db06:	1882      	adds	r2, r0, r2
 800db08:	4293      	cmp	r3, r2
 800db0a:	d100      	bne.n	800db0e <memset+0xa>
 800db0c:	4770      	bx	lr
 800db0e:	7019      	strb	r1, [r3, #0]
 800db10:	3301      	adds	r3, #1
 800db12:	e7f9      	b.n	800db08 <memset+0x4>

0800db14 <strncat>:
 800db14:	0003      	movs	r3, r0
 800db16:	b510      	push	{r4, lr}
 800db18:	781c      	ldrb	r4, [r3, #0]
 800db1a:	2c00      	cmp	r4, #0
 800db1c:	d107      	bne.n	800db2e <strncat+0x1a>
 800db1e:	3a01      	subs	r2, #1
 800db20:	1c54      	adds	r4, r2, #1
 800db22:	d003      	beq.n	800db2c <strncat+0x18>
 800db24:	780c      	ldrb	r4, [r1, #0]
 800db26:	701c      	strb	r4, [r3, #0]
 800db28:	2c00      	cmp	r4, #0
 800db2a:	d102      	bne.n	800db32 <strncat+0x1e>
 800db2c:	bd10      	pop	{r4, pc}
 800db2e:	3301      	adds	r3, #1
 800db30:	e7f2      	b.n	800db18 <strncat+0x4>
 800db32:	2a00      	cmp	r2, #0
 800db34:	d100      	bne.n	800db38 <strncat+0x24>
 800db36:	705a      	strb	r2, [r3, #1]
 800db38:	3301      	adds	r3, #1
 800db3a:	3101      	adds	r1, #1
 800db3c:	e7ef      	b.n	800db1e <strncat+0xa>
	...

0800db40 <_localeconv_r>:
 800db40:	4800      	ldr	r0, [pc, #0]	@ (800db44 <_localeconv_r+0x4>)
 800db42:	4770      	bx	lr
 800db44:	200002c4 	.word	0x200002c4

0800db48 <_close_r>:
 800db48:	2300      	movs	r3, #0
 800db4a:	b570      	push	{r4, r5, r6, lr}
 800db4c:	4d06      	ldr	r5, [pc, #24]	@ (800db68 <_close_r+0x20>)
 800db4e:	0004      	movs	r4, r0
 800db50:	0008      	movs	r0, r1
 800db52:	602b      	str	r3, [r5, #0]
 800db54:	f7f7 ff7b 	bl	8005a4e <_close>
 800db58:	1c43      	adds	r3, r0, #1
 800db5a:	d103      	bne.n	800db64 <_close_r+0x1c>
 800db5c:	682b      	ldr	r3, [r5, #0]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d000      	beq.n	800db64 <_close_r+0x1c>
 800db62:	6023      	str	r3, [r4, #0]
 800db64:	bd70      	pop	{r4, r5, r6, pc}
 800db66:	46c0      	nop			@ (mov r8, r8)
 800db68:	20000740 	.word	0x20000740

0800db6c <_lseek_r>:
 800db6c:	b570      	push	{r4, r5, r6, lr}
 800db6e:	0004      	movs	r4, r0
 800db70:	0008      	movs	r0, r1
 800db72:	0011      	movs	r1, r2
 800db74:	001a      	movs	r2, r3
 800db76:	2300      	movs	r3, #0
 800db78:	4d05      	ldr	r5, [pc, #20]	@ (800db90 <_lseek_r+0x24>)
 800db7a:	602b      	str	r3, [r5, #0]
 800db7c:	f7f7 ff88 	bl	8005a90 <_lseek>
 800db80:	1c43      	adds	r3, r0, #1
 800db82:	d103      	bne.n	800db8c <_lseek_r+0x20>
 800db84:	682b      	ldr	r3, [r5, #0]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d000      	beq.n	800db8c <_lseek_r+0x20>
 800db8a:	6023      	str	r3, [r4, #0]
 800db8c:	bd70      	pop	{r4, r5, r6, pc}
 800db8e:	46c0      	nop			@ (mov r8, r8)
 800db90:	20000740 	.word	0x20000740

0800db94 <_read_r>:
 800db94:	b570      	push	{r4, r5, r6, lr}
 800db96:	0004      	movs	r4, r0
 800db98:	0008      	movs	r0, r1
 800db9a:	0011      	movs	r1, r2
 800db9c:	001a      	movs	r2, r3
 800db9e:	2300      	movs	r3, #0
 800dba0:	4d05      	ldr	r5, [pc, #20]	@ (800dbb8 <_read_r+0x24>)
 800dba2:	602b      	str	r3, [r5, #0]
 800dba4:	f7f7 ff1a 	bl	80059dc <_read>
 800dba8:	1c43      	adds	r3, r0, #1
 800dbaa:	d103      	bne.n	800dbb4 <_read_r+0x20>
 800dbac:	682b      	ldr	r3, [r5, #0]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d000      	beq.n	800dbb4 <_read_r+0x20>
 800dbb2:	6023      	str	r3, [r4, #0]
 800dbb4:	bd70      	pop	{r4, r5, r6, pc}
 800dbb6:	46c0      	nop			@ (mov r8, r8)
 800dbb8:	20000740 	.word	0x20000740

0800dbbc <_sbrk_r>:
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	b570      	push	{r4, r5, r6, lr}
 800dbc0:	4d06      	ldr	r5, [pc, #24]	@ (800dbdc <_sbrk_r+0x20>)
 800dbc2:	0004      	movs	r4, r0
 800dbc4:	0008      	movs	r0, r1
 800dbc6:	602b      	str	r3, [r5, #0]
 800dbc8:	f7f7 ff6e 	bl	8005aa8 <_sbrk>
 800dbcc:	1c43      	adds	r3, r0, #1
 800dbce:	d103      	bne.n	800dbd8 <_sbrk_r+0x1c>
 800dbd0:	682b      	ldr	r3, [r5, #0]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d000      	beq.n	800dbd8 <_sbrk_r+0x1c>
 800dbd6:	6023      	str	r3, [r4, #0]
 800dbd8:	bd70      	pop	{r4, r5, r6, pc}
 800dbda:	46c0      	nop			@ (mov r8, r8)
 800dbdc:	20000740 	.word	0x20000740

0800dbe0 <_write_r>:
 800dbe0:	b570      	push	{r4, r5, r6, lr}
 800dbe2:	0004      	movs	r4, r0
 800dbe4:	0008      	movs	r0, r1
 800dbe6:	0011      	movs	r1, r2
 800dbe8:	001a      	movs	r2, r3
 800dbea:	2300      	movs	r3, #0
 800dbec:	4d05      	ldr	r5, [pc, #20]	@ (800dc04 <_write_r+0x24>)
 800dbee:	602b      	str	r3, [r5, #0]
 800dbf0:	f7f7 ff11 	bl	8005a16 <_write>
 800dbf4:	1c43      	adds	r3, r0, #1
 800dbf6:	d103      	bne.n	800dc00 <_write_r+0x20>
 800dbf8:	682b      	ldr	r3, [r5, #0]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d000      	beq.n	800dc00 <_write_r+0x20>
 800dbfe:	6023      	str	r3, [r4, #0]
 800dc00:	bd70      	pop	{r4, r5, r6, pc}
 800dc02:	46c0      	nop			@ (mov r8, r8)
 800dc04:	20000740 	.word	0x20000740

0800dc08 <__errno>:
 800dc08:	4b01      	ldr	r3, [pc, #4]	@ (800dc10 <__errno+0x8>)
 800dc0a:	6818      	ldr	r0, [r3, #0]
 800dc0c:	4770      	bx	lr
 800dc0e:	46c0      	nop			@ (mov r8, r8)
 800dc10:	20000184 	.word	0x20000184

0800dc14 <__libc_init_array>:
 800dc14:	b570      	push	{r4, r5, r6, lr}
 800dc16:	2600      	movs	r6, #0
 800dc18:	4c0c      	ldr	r4, [pc, #48]	@ (800dc4c <__libc_init_array+0x38>)
 800dc1a:	4d0d      	ldr	r5, [pc, #52]	@ (800dc50 <__libc_init_array+0x3c>)
 800dc1c:	1b64      	subs	r4, r4, r5
 800dc1e:	10a4      	asrs	r4, r4, #2
 800dc20:	42a6      	cmp	r6, r4
 800dc22:	d109      	bne.n	800dc38 <__libc_init_array+0x24>
 800dc24:	2600      	movs	r6, #0
 800dc26:	f001 fe81 	bl	800f92c <_init>
 800dc2a:	4c0a      	ldr	r4, [pc, #40]	@ (800dc54 <__libc_init_array+0x40>)
 800dc2c:	4d0a      	ldr	r5, [pc, #40]	@ (800dc58 <__libc_init_array+0x44>)
 800dc2e:	1b64      	subs	r4, r4, r5
 800dc30:	10a4      	asrs	r4, r4, #2
 800dc32:	42a6      	cmp	r6, r4
 800dc34:	d105      	bne.n	800dc42 <__libc_init_array+0x2e>
 800dc36:	bd70      	pop	{r4, r5, r6, pc}
 800dc38:	00b3      	lsls	r3, r6, #2
 800dc3a:	58eb      	ldr	r3, [r5, r3]
 800dc3c:	4798      	blx	r3
 800dc3e:	3601      	adds	r6, #1
 800dc40:	e7ee      	b.n	800dc20 <__libc_init_array+0xc>
 800dc42:	00b3      	lsls	r3, r6, #2
 800dc44:	58eb      	ldr	r3, [r5, r3]
 800dc46:	4798      	blx	r3
 800dc48:	3601      	adds	r6, #1
 800dc4a:	e7f2      	b.n	800dc32 <__libc_init_array+0x1e>
 800dc4c:	0801b748 	.word	0x0801b748
 800dc50:	0801b748 	.word	0x0801b748
 800dc54:	0801b74c 	.word	0x0801b74c
 800dc58:	0801b748 	.word	0x0801b748

0800dc5c <__retarget_lock_init_recursive>:
 800dc5c:	4770      	bx	lr

0800dc5e <__retarget_lock_acquire_recursive>:
 800dc5e:	4770      	bx	lr

0800dc60 <__retarget_lock_release_recursive>:
 800dc60:	4770      	bx	lr

0800dc62 <memchr>:
 800dc62:	b2c9      	uxtb	r1, r1
 800dc64:	1882      	adds	r2, r0, r2
 800dc66:	4290      	cmp	r0, r2
 800dc68:	d101      	bne.n	800dc6e <memchr+0xc>
 800dc6a:	2000      	movs	r0, #0
 800dc6c:	4770      	bx	lr
 800dc6e:	7803      	ldrb	r3, [r0, #0]
 800dc70:	428b      	cmp	r3, r1
 800dc72:	d0fb      	beq.n	800dc6c <memchr+0xa>
 800dc74:	3001      	adds	r0, #1
 800dc76:	e7f6      	b.n	800dc66 <memchr+0x4>

0800dc78 <quorem>:
 800dc78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc7a:	6902      	ldr	r2, [r0, #16]
 800dc7c:	690f      	ldr	r7, [r1, #16]
 800dc7e:	b087      	sub	sp, #28
 800dc80:	0006      	movs	r6, r0
 800dc82:	000b      	movs	r3, r1
 800dc84:	2000      	movs	r0, #0
 800dc86:	9102      	str	r1, [sp, #8]
 800dc88:	42ba      	cmp	r2, r7
 800dc8a:	db6d      	blt.n	800dd68 <quorem+0xf0>
 800dc8c:	3f01      	subs	r7, #1
 800dc8e:	00bc      	lsls	r4, r7, #2
 800dc90:	3314      	adds	r3, #20
 800dc92:	9305      	str	r3, [sp, #20]
 800dc94:	191b      	adds	r3, r3, r4
 800dc96:	9303      	str	r3, [sp, #12]
 800dc98:	0033      	movs	r3, r6
 800dc9a:	3314      	adds	r3, #20
 800dc9c:	191c      	adds	r4, r3, r4
 800dc9e:	9301      	str	r3, [sp, #4]
 800dca0:	6823      	ldr	r3, [r4, #0]
 800dca2:	9304      	str	r3, [sp, #16]
 800dca4:	9b03      	ldr	r3, [sp, #12]
 800dca6:	9804      	ldr	r0, [sp, #16]
 800dca8:	681d      	ldr	r5, [r3, #0]
 800dcaa:	3501      	adds	r5, #1
 800dcac:	0029      	movs	r1, r5
 800dcae:	f7f2 fa47 	bl	8000140 <__udivsi3>
 800dcb2:	9b04      	ldr	r3, [sp, #16]
 800dcb4:	9000      	str	r0, [sp, #0]
 800dcb6:	42ab      	cmp	r3, r5
 800dcb8:	d32b      	bcc.n	800dd12 <quorem+0x9a>
 800dcba:	9b05      	ldr	r3, [sp, #20]
 800dcbc:	9d01      	ldr	r5, [sp, #4]
 800dcbe:	469c      	mov	ip, r3
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	9305      	str	r3, [sp, #20]
 800dcc4:	9304      	str	r3, [sp, #16]
 800dcc6:	4662      	mov	r2, ip
 800dcc8:	ca08      	ldmia	r2!, {r3}
 800dcca:	6828      	ldr	r0, [r5, #0]
 800dccc:	4694      	mov	ip, r2
 800dcce:	9a00      	ldr	r2, [sp, #0]
 800dcd0:	b299      	uxth	r1, r3
 800dcd2:	4351      	muls	r1, r2
 800dcd4:	9a05      	ldr	r2, [sp, #20]
 800dcd6:	0c1b      	lsrs	r3, r3, #16
 800dcd8:	1889      	adds	r1, r1, r2
 800dcda:	9a00      	ldr	r2, [sp, #0]
 800dcdc:	4353      	muls	r3, r2
 800dcde:	0c0a      	lsrs	r2, r1, #16
 800dce0:	189b      	adds	r3, r3, r2
 800dce2:	0c1a      	lsrs	r2, r3, #16
 800dce4:	b289      	uxth	r1, r1
 800dce6:	9205      	str	r2, [sp, #20]
 800dce8:	b282      	uxth	r2, r0
 800dcea:	1a52      	subs	r2, r2, r1
 800dcec:	9904      	ldr	r1, [sp, #16]
 800dcee:	0c00      	lsrs	r0, r0, #16
 800dcf0:	1852      	adds	r2, r2, r1
 800dcf2:	b29b      	uxth	r3, r3
 800dcf4:	1411      	asrs	r1, r2, #16
 800dcf6:	1ac3      	subs	r3, r0, r3
 800dcf8:	185b      	adds	r3, r3, r1
 800dcfa:	1419      	asrs	r1, r3, #16
 800dcfc:	b292      	uxth	r2, r2
 800dcfe:	041b      	lsls	r3, r3, #16
 800dd00:	431a      	orrs	r2, r3
 800dd02:	9b03      	ldr	r3, [sp, #12]
 800dd04:	9104      	str	r1, [sp, #16]
 800dd06:	c504      	stmia	r5!, {r2}
 800dd08:	4563      	cmp	r3, ip
 800dd0a:	d2dc      	bcs.n	800dcc6 <quorem+0x4e>
 800dd0c:	6823      	ldr	r3, [r4, #0]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d030      	beq.n	800dd74 <quorem+0xfc>
 800dd12:	0030      	movs	r0, r6
 800dd14:	9902      	ldr	r1, [sp, #8]
 800dd16:	f001 f909 	bl	800ef2c <__mcmp>
 800dd1a:	2800      	cmp	r0, #0
 800dd1c:	db23      	blt.n	800dd66 <quorem+0xee>
 800dd1e:	0034      	movs	r4, r6
 800dd20:	2500      	movs	r5, #0
 800dd22:	9902      	ldr	r1, [sp, #8]
 800dd24:	3414      	adds	r4, #20
 800dd26:	3114      	adds	r1, #20
 800dd28:	6823      	ldr	r3, [r4, #0]
 800dd2a:	c901      	ldmia	r1!, {r0}
 800dd2c:	9302      	str	r3, [sp, #8]
 800dd2e:	466b      	mov	r3, sp
 800dd30:	891b      	ldrh	r3, [r3, #8]
 800dd32:	b282      	uxth	r2, r0
 800dd34:	1a9a      	subs	r2, r3, r2
 800dd36:	9b02      	ldr	r3, [sp, #8]
 800dd38:	1952      	adds	r2, r2, r5
 800dd3a:	0c00      	lsrs	r0, r0, #16
 800dd3c:	0c1b      	lsrs	r3, r3, #16
 800dd3e:	1a1b      	subs	r3, r3, r0
 800dd40:	1410      	asrs	r0, r2, #16
 800dd42:	181b      	adds	r3, r3, r0
 800dd44:	141d      	asrs	r5, r3, #16
 800dd46:	b292      	uxth	r2, r2
 800dd48:	041b      	lsls	r3, r3, #16
 800dd4a:	431a      	orrs	r2, r3
 800dd4c:	9b03      	ldr	r3, [sp, #12]
 800dd4e:	c404      	stmia	r4!, {r2}
 800dd50:	428b      	cmp	r3, r1
 800dd52:	d2e9      	bcs.n	800dd28 <quorem+0xb0>
 800dd54:	9a01      	ldr	r2, [sp, #4]
 800dd56:	00bb      	lsls	r3, r7, #2
 800dd58:	18d3      	adds	r3, r2, r3
 800dd5a:	681a      	ldr	r2, [r3, #0]
 800dd5c:	2a00      	cmp	r2, #0
 800dd5e:	d013      	beq.n	800dd88 <quorem+0x110>
 800dd60:	9b00      	ldr	r3, [sp, #0]
 800dd62:	3301      	adds	r3, #1
 800dd64:	9300      	str	r3, [sp, #0]
 800dd66:	9800      	ldr	r0, [sp, #0]
 800dd68:	b007      	add	sp, #28
 800dd6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd6c:	6823      	ldr	r3, [r4, #0]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d104      	bne.n	800dd7c <quorem+0x104>
 800dd72:	3f01      	subs	r7, #1
 800dd74:	9b01      	ldr	r3, [sp, #4]
 800dd76:	3c04      	subs	r4, #4
 800dd78:	42a3      	cmp	r3, r4
 800dd7a:	d3f7      	bcc.n	800dd6c <quorem+0xf4>
 800dd7c:	6137      	str	r7, [r6, #16]
 800dd7e:	e7c8      	b.n	800dd12 <quorem+0x9a>
 800dd80:	681a      	ldr	r2, [r3, #0]
 800dd82:	2a00      	cmp	r2, #0
 800dd84:	d104      	bne.n	800dd90 <quorem+0x118>
 800dd86:	3f01      	subs	r7, #1
 800dd88:	9a01      	ldr	r2, [sp, #4]
 800dd8a:	3b04      	subs	r3, #4
 800dd8c:	429a      	cmp	r2, r3
 800dd8e:	d3f7      	bcc.n	800dd80 <quorem+0x108>
 800dd90:	6137      	str	r7, [r6, #16]
 800dd92:	e7e5      	b.n	800dd60 <quorem+0xe8>

0800dd94 <_dtoa_r>:
 800dd94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd96:	0014      	movs	r4, r2
 800dd98:	001d      	movs	r5, r3
 800dd9a:	69c6      	ldr	r6, [r0, #28]
 800dd9c:	b09d      	sub	sp, #116	@ 0x74
 800dd9e:	940a      	str	r4, [sp, #40]	@ 0x28
 800dda0:	950b      	str	r5, [sp, #44]	@ 0x2c
 800dda2:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800dda4:	9003      	str	r0, [sp, #12]
 800dda6:	2e00      	cmp	r6, #0
 800dda8:	d10f      	bne.n	800ddca <_dtoa_r+0x36>
 800ddaa:	2010      	movs	r0, #16
 800ddac:	f7ff f86c 	bl	800ce88 <malloc>
 800ddb0:	9b03      	ldr	r3, [sp, #12]
 800ddb2:	1e02      	subs	r2, r0, #0
 800ddb4:	61d8      	str	r0, [r3, #28]
 800ddb6:	d104      	bne.n	800ddc2 <_dtoa_r+0x2e>
 800ddb8:	21ef      	movs	r1, #239	@ 0xef
 800ddba:	4bc7      	ldr	r3, [pc, #796]	@ (800e0d8 <_dtoa_r+0x344>)
 800ddbc:	48c7      	ldr	r0, [pc, #796]	@ (800e0dc <_dtoa_r+0x348>)
 800ddbe:	f001 fc6b 	bl	800f698 <__assert_func>
 800ddc2:	6046      	str	r6, [r0, #4]
 800ddc4:	6086      	str	r6, [r0, #8]
 800ddc6:	6006      	str	r6, [r0, #0]
 800ddc8:	60c6      	str	r6, [r0, #12]
 800ddca:	9b03      	ldr	r3, [sp, #12]
 800ddcc:	69db      	ldr	r3, [r3, #28]
 800ddce:	6819      	ldr	r1, [r3, #0]
 800ddd0:	2900      	cmp	r1, #0
 800ddd2:	d00b      	beq.n	800ddec <_dtoa_r+0x58>
 800ddd4:	685a      	ldr	r2, [r3, #4]
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	4093      	lsls	r3, r2
 800ddda:	604a      	str	r2, [r1, #4]
 800dddc:	608b      	str	r3, [r1, #8]
 800ddde:	9803      	ldr	r0, [sp, #12]
 800dde0:	f000 fe5a 	bl	800ea98 <_Bfree>
 800dde4:	2200      	movs	r2, #0
 800dde6:	9b03      	ldr	r3, [sp, #12]
 800dde8:	69db      	ldr	r3, [r3, #28]
 800ddea:	601a      	str	r2, [r3, #0]
 800ddec:	2d00      	cmp	r5, #0
 800ddee:	da1e      	bge.n	800de2e <_dtoa_r+0x9a>
 800ddf0:	2301      	movs	r3, #1
 800ddf2:	603b      	str	r3, [r7, #0]
 800ddf4:	006b      	lsls	r3, r5, #1
 800ddf6:	085b      	lsrs	r3, r3, #1
 800ddf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ddfa:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800ddfc:	4bb8      	ldr	r3, [pc, #736]	@ (800e0e0 <_dtoa_r+0x34c>)
 800ddfe:	4ab8      	ldr	r2, [pc, #736]	@ (800e0e0 <_dtoa_r+0x34c>)
 800de00:	403b      	ands	r3, r7
 800de02:	4293      	cmp	r3, r2
 800de04:	d116      	bne.n	800de34 <_dtoa_r+0xa0>
 800de06:	4bb7      	ldr	r3, [pc, #732]	@ (800e0e4 <_dtoa_r+0x350>)
 800de08:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800de0a:	6013      	str	r3, [r2, #0]
 800de0c:	033b      	lsls	r3, r7, #12
 800de0e:	0b1b      	lsrs	r3, r3, #12
 800de10:	4323      	orrs	r3, r4
 800de12:	d101      	bne.n	800de18 <_dtoa_r+0x84>
 800de14:	f000 fd83 	bl	800e91e <_dtoa_r+0xb8a>
 800de18:	4bb3      	ldr	r3, [pc, #716]	@ (800e0e8 <_dtoa_r+0x354>)
 800de1a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800de1c:	9308      	str	r3, [sp, #32]
 800de1e:	2a00      	cmp	r2, #0
 800de20:	d002      	beq.n	800de28 <_dtoa_r+0x94>
 800de22:	4bb2      	ldr	r3, [pc, #712]	@ (800e0ec <_dtoa_r+0x358>)
 800de24:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800de26:	6013      	str	r3, [r2, #0]
 800de28:	9808      	ldr	r0, [sp, #32]
 800de2a:	b01d      	add	sp, #116	@ 0x74
 800de2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de2e:	2300      	movs	r3, #0
 800de30:	603b      	str	r3, [r7, #0]
 800de32:	e7e2      	b.n	800ddfa <_dtoa_r+0x66>
 800de34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800de36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de38:	9212      	str	r2, [sp, #72]	@ 0x48
 800de3a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800de3c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800de3e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800de40:	2200      	movs	r2, #0
 800de42:	2300      	movs	r3, #0
 800de44:	f7f2 fb02 	bl	800044c <__aeabi_dcmpeq>
 800de48:	1e06      	subs	r6, r0, #0
 800de4a:	d00b      	beq.n	800de64 <_dtoa_r+0xd0>
 800de4c:	2301      	movs	r3, #1
 800de4e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800de50:	6013      	str	r3, [r2, #0]
 800de52:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800de54:	2b00      	cmp	r3, #0
 800de56:	d002      	beq.n	800de5e <_dtoa_r+0xca>
 800de58:	4ba5      	ldr	r3, [pc, #660]	@ (800e0f0 <_dtoa_r+0x35c>)
 800de5a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800de5c:	6013      	str	r3, [r2, #0]
 800de5e:	4ba5      	ldr	r3, [pc, #660]	@ (800e0f4 <_dtoa_r+0x360>)
 800de60:	9308      	str	r3, [sp, #32]
 800de62:	e7e1      	b.n	800de28 <_dtoa_r+0x94>
 800de64:	ab1a      	add	r3, sp, #104	@ 0x68
 800de66:	9301      	str	r3, [sp, #4]
 800de68:	ab1b      	add	r3, sp, #108	@ 0x6c
 800de6a:	9300      	str	r3, [sp, #0]
 800de6c:	9803      	ldr	r0, [sp, #12]
 800de6e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800de70:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800de72:	f001 f911 	bl	800f098 <__d2b>
 800de76:	007a      	lsls	r2, r7, #1
 800de78:	9005      	str	r0, [sp, #20]
 800de7a:	0d52      	lsrs	r2, r2, #21
 800de7c:	d100      	bne.n	800de80 <_dtoa_r+0xec>
 800de7e:	e07b      	b.n	800df78 <_dtoa_r+0x1e4>
 800de80:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800de82:	9618      	str	r6, [sp, #96]	@ 0x60
 800de84:	0319      	lsls	r1, r3, #12
 800de86:	4b9c      	ldr	r3, [pc, #624]	@ (800e0f8 <_dtoa_r+0x364>)
 800de88:	0b09      	lsrs	r1, r1, #12
 800de8a:	430b      	orrs	r3, r1
 800de8c:	499b      	ldr	r1, [pc, #620]	@ (800e0fc <_dtoa_r+0x368>)
 800de8e:	1857      	adds	r7, r2, r1
 800de90:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800de92:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800de94:	0019      	movs	r1, r3
 800de96:	2200      	movs	r2, #0
 800de98:	4b99      	ldr	r3, [pc, #612]	@ (800e100 <_dtoa_r+0x36c>)
 800de9a:	f7f3 fe9d 	bl	8001bd8 <__aeabi_dsub>
 800de9e:	4a99      	ldr	r2, [pc, #612]	@ (800e104 <_dtoa_r+0x370>)
 800dea0:	4b99      	ldr	r3, [pc, #612]	@ (800e108 <_dtoa_r+0x374>)
 800dea2:	f7f3 fbd1 	bl	8001648 <__aeabi_dmul>
 800dea6:	4a99      	ldr	r2, [pc, #612]	@ (800e10c <_dtoa_r+0x378>)
 800dea8:	4b99      	ldr	r3, [pc, #612]	@ (800e110 <_dtoa_r+0x37c>)
 800deaa:	f7f2 fc25 	bl	80006f8 <__aeabi_dadd>
 800deae:	0004      	movs	r4, r0
 800deb0:	0038      	movs	r0, r7
 800deb2:	000d      	movs	r5, r1
 800deb4:	f7f4 fa8a 	bl	80023cc <__aeabi_i2d>
 800deb8:	4a96      	ldr	r2, [pc, #600]	@ (800e114 <_dtoa_r+0x380>)
 800deba:	4b97      	ldr	r3, [pc, #604]	@ (800e118 <_dtoa_r+0x384>)
 800debc:	f7f3 fbc4 	bl	8001648 <__aeabi_dmul>
 800dec0:	0002      	movs	r2, r0
 800dec2:	000b      	movs	r3, r1
 800dec4:	0020      	movs	r0, r4
 800dec6:	0029      	movs	r1, r5
 800dec8:	f7f2 fc16 	bl	80006f8 <__aeabi_dadd>
 800decc:	0004      	movs	r4, r0
 800dece:	000d      	movs	r5, r1
 800ded0:	f7f4 fa40 	bl	8002354 <__aeabi_d2iz>
 800ded4:	2200      	movs	r2, #0
 800ded6:	9004      	str	r0, [sp, #16]
 800ded8:	2300      	movs	r3, #0
 800deda:	0020      	movs	r0, r4
 800dedc:	0029      	movs	r1, r5
 800dede:	f7f2 fabb 	bl	8000458 <__aeabi_dcmplt>
 800dee2:	2800      	cmp	r0, #0
 800dee4:	d00b      	beq.n	800defe <_dtoa_r+0x16a>
 800dee6:	9804      	ldr	r0, [sp, #16]
 800dee8:	f7f4 fa70 	bl	80023cc <__aeabi_i2d>
 800deec:	002b      	movs	r3, r5
 800deee:	0022      	movs	r2, r4
 800def0:	f7f2 faac 	bl	800044c <__aeabi_dcmpeq>
 800def4:	4243      	negs	r3, r0
 800def6:	4158      	adcs	r0, r3
 800def8:	9b04      	ldr	r3, [sp, #16]
 800defa:	1a1b      	subs	r3, r3, r0
 800defc:	9304      	str	r3, [sp, #16]
 800defe:	2301      	movs	r3, #1
 800df00:	9315      	str	r3, [sp, #84]	@ 0x54
 800df02:	9b04      	ldr	r3, [sp, #16]
 800df04:	2b16      	cmp	r3, #22
 800df06:	d810      	bhi.n	800df2a <_dtoa_r+0x196>
 800df08:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800df0a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800df0c:	9a04      	ldr	r2, [sp, #16]
 800df0e:	4b83      	ldr	r3, [pc, #524]	@ (800e11c <_dtoa_r+0x388>)
 800df10:	00d2      	lsls	r2, r2, #3
 800df12:	189b      	adds	r3, r3, r2
 800df14:	681a      	ldr	r2, [r3, #0]
 800df16:	685b      	ldr	r3, [r3, #4]
 800df18:	f7f2 fa9e 	bl	8000458 <__aeabi_dcmplt>
 800df1c:	2800      	cmp	r0, #0
 800df1e:	d047      	beq.n	800dfb0 <_dtoa_r+0x21c>
 800df20:	9b04      	ldr	r3, [sp, #16]
 800df22:	3b01      	subs	r3, #1
 800df24:	9304      	str	r3, [sp, #16]
 800df26:	2300      	movs	r3, #0
 800df28:	9315      	str	r3, [sp, #84]	@ 0x54
 800df2a:	2200      	movs	r2, #0
 800df2c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800df2e:	9206      	str	r2, [sp, #24]
 800df30:	1bdb      	subs	r3, r3, r7
 800df32:	1e5a      	subs	r2, r3, #1
 800df34:	d53e      	bpl.n	800dfb4 <_dtoa_r+0x220>
 800df36:	2201      	movs	r2, #1
 800df38:	1ad3      	subs	r3, r2, r3
 800df3a:	9306      	str	r3, [sp, #24]
 800df3c:	2300      	movs	r3, #0
 800df3e:	930d      	str	r3, [sp, #52]	@ 0x34
 800df40:	9b04      	ldr	r3, [sp, #16]
 800df42:	2b00      	cmp	r3, #0
 800df44:	db38      	blt.n	800dfb8 <_dtoa_r+0x224>
 800df46:	9a04      	ldr	r2, [sp, #16]
 800df48:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800df4a:	4694      	mov	ip, r2
 800df4c:	4463      	add	r3, ip
 800df4e:	930d      	str	r3, [sp, #52]	@ 0x34
 800df50:	2300      	movs	r3, #0
 800df52:	9214      	str	r2, [sp, #80]	@ 0x50
 800df54:	930f      	str	r3, [sp, #60]	@ 0x3c
 800df56:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800df58:	2401      	movs	r4, #1
 800df5a:	2b09      	cmp	r3, #9
 800df5c:	d867      	bhi.n	800e02e <_dtoa_r+0x29a>
 800df5e:	2b05      	cmp	r3, #5
 800df60:	dd02      	ble.n	800df68 <_dtoa_r+0x1d4>
 800df62:	2400      	movs	r4, #0
 800df64:	3b04      	subs	r3, #4
 800df66:	9322      	str	r3, [sp, #136]	@ 0x88
 800df68:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800df6a:	1e98      	subs	r0, r3, #2
 800df6c:	2803      	cmp	r0, #3
 800df6e:	d867      	bhi.n	800e040 <_dtoa_r+0x2ac>
 800df70:	f7f2 f8d2 	bl	8000118 <__gnu_thumb1_case_uqi>
 800df74:	5b383a2b 	.word	0x5b383a2b
 800df78:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800df7a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800df7c:	18f6      	adds	r6, r6, r3
 800df7e:	4b68      	ldr	r3, [pc, #416]	@ (800e120 <_dtoa_r+0x38c>)
 800df80:	18f2      	adds	r2, r6, r3
 800df82:	2a20      	cmp	r2, #32
 800df84:	dd0f      	ble.n	800dfa6 <_dtoa_r+0x212>
 800df86:	2340      	movs	r3, #64	@ 0x40
 800df88:	1a9b      	subs	r3, r3, r2
 800df8a:	409f      	lsls	r7, r3
 800df8c:	4b65      	ldr	r3, [pc, #404]	@ (800e124 <_dtoa_r+0x390>)
 800df8e:	0038      	movs	r0, r7
 800df90:	18f3      	adds	r3, r6, r3
 800df92:	40dc      	lsrs	r4, r3
 800df94:	4320      	orrs	r0, r4
 800df96:	f7f4 fa47 	bl	8002428 <__aeabi_ui2d>
 800df9a:	2201      	movs	r2, #1
 800df9c:	4b62      	ldr	r3, [pc, #392]	@ (800e128 <_dtoa_r+0x394>)
 800df9e:	1e77      	subs	r7, r6, #1
 800dfa0:	18cb      	adds	r3, r1, r3
 800dfa2:	9218      	str	r2, [sp, #96]	@ 0x60
 800dfa4:	e776      	b.n	800de94 <_dtoa_r+0x100>
 800dfa6:	2320      	movs	r3, #32
 800dfa8:	0020      	movs	r0, r4
 800dfaa:	1a9b      	subs	r3, r3, r2
 800dfac:	4098      	lsls	r0, r3
 800dfae:	e7f2      	b.n	800df96 <_dtoa_r+0x202>
 800dfb0:	9015      	str	r0, [sp, #84]	@ 0x54
 800dfb2:	e7ba      	b.n	800df2a <_dtoa_r+0x196>
 800dfb4:	920d      	str	r2, [sp, #52]	@ 0x34
 800dfb6:	e7c3      	b.n	800df40 <_dtoa_r+0x1ac>
 800dfb8:	9b06      	ldr	r3, [sp, #24]
 800dfba:	9a04      	ldr	r2, [sp, #16]
 800dfbc:	1a9b      	subs	r3, r3, r2
 800dfbe:	9306      	str	r3, [sp, #24]
 800dfc0:	4253      	negs	r3, r2
 800dfc2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	9314      	str	r3, [sp, #80]	@ 0x50
 800dfc8:	e7c5      	b.n	800df56 <_dtoa_r+0x1c2>
 800dfca:	2300      	movs	r3, #0
 800dfcc:	9310      	str	r3, [sp, #64]	@ 0x40
 800dfce:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dfd0:	930e      	str	r3, [sp, #56]	@ 0x38
 800dfd2:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	dc13      	bgt.n	800e000 <_dtoa_r+0x26c>
 800dfd8:	2301      	movs	r3, #1
 800dfda:	001a      	movs	r2, r3
 800dfdc:	930e      	str	r3, [sp, #56]	@ 0x38
 800dfde:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfe0:	9223      	str	r2, [sp, #140]	@ 0x8c
 800dfe2:	e00d      	b.n	800e000 <_dtoa_r+0x26c>
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	e7f1      	b.n	800dfcc <_dtoa_r+0x238>
 800dfe8:	2300      	movs	r3, #0
 800dfea:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dfec:	9310      	str	r3, [sp, #64]	@ 0x40
 800dfee:	4694      	mov	ip, r2
 800dff0:	9b04      	ldr	r3, [sp, #16]
 800dff2:	4463      	add	r3, ip
 800dff4:	930e      	str	r3, [sp, #56]	@ 0x38
 800dff6:	3301      	adds	r3, #1
 800dff8:	9309      	str	r3, [sp, #36]	@ 0x24
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	dc00      	bgt.n	800e000 <_dtoa_r+0x26c>
 800dffe:	2301      	movs	r3, #1
 800e000:	9a03      	ldr	r2, [sp, #12]
 800e002:	2100      	movs	r1, #0
 800e004:	69d0      	ldr	r0, [r2, #28]
 800e006:	2204      	movs	r2, #4
 800e008:	0015      	movs	r5, r2
 800e00a:	3514      	adds	r5, #20
 800e00c:	429d      	cmp	r5, r3
 800e00e:	d91b      	bls.n	800e048 <_dtoa_r+0x2b4>
 800e010:	6041      	str	r1, [r0, #4]
 800e012:	9803      	ldr	r0, [sp, #12]
 800e014:	f000 fcfc 	bl	800ea10 <_Balloc>
 800e018:	9008      	str	r0, [sp, #32]
 800e01a:	2800      	cmp	r0, #0
 800e01c:	d117      	bne.n	800e04e <_dtoa_r+0x2ba>
 800e01e:	21b0      	movs	r1, #176	@ 0xb0
 800e020:	4b42      	ldr	r3, [pc, #264]	@ (800e12c <_dtoa_r+0x398>)
 800e022:	482e      	ldr	r0, [pc, #184]	@ (800e0dc <_dtoa_r+0x348>)
 800e024:	9a08      	ldr	r2, [sp, #32]
 800e026:	31ff      	adds	r1, #255	@ 0xff
 800e028:	e6c9      	b.n	800ddbe <_dtoa_r+0x2a>
 800e02a:	2301      	movs	r3, #1
 800e02c:	e7dd      	b.n	800dfea <_dtoa_r+0x256>
 800e02e:	2300      	movs	r3, #0
 800e030:	9410      	str	r4, [sp, #64]	@ 0x40
 800e032:	9322      	str	r3, [sp, #136]	@ 0x88
 800e034:	3b01      	subs	r3, #1
 800e036:	930e      	str	r3, [sp, #56]	@ 0x38
 800e038:	9309      	str	r3, [sp, #36]	@ 0x24
 800e03a:	2200      	movs	r2, #0
 800e03c:	3313      	adds	r3, #19
 800e03e:	e7cf      	b.n	800dfe0 <_dtoa_r+0x24c>
 800e040:	2301      	movs	r3, #1
 800e042:	9310      	str	r3, [sp, #64]	@ 0x40
 800e044:	3b02      	subs	r3, #2
 800e046:	e7f6      	b.n	800e036 <_dtoa_r+0x2a2>
 800e048:	3101      	adds	r1, #1
 800e04a:	0052      	lsls	r2, r2, #1
 800e04c:	e7dc      	b.n	800e008 <_dtoa_r+0x274>
 800e04e:	9b03      	ldr	r3, [sp, #12]
 800e050:	9a08      	ldr	r2, [sp, #32]
 800e052:	69db      	ldr	r3, [r3, #28]
 800e054:	601a      	str	r2, [r3, #0]
 800e056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e058:	2b0e      	cmp	r3, #14
 800e05a:	d900      	bls.n	800e05e <_dtoa_r+0x2ca>
 800e05c:	e0d9      	b.n	800e212 <_dtoa_r+0x47e>
 800e05e:	2c00      	cmp	r4, #0
 800e060:	d100      	bne.n	800e064 <_dtoa_r+0x2d0>
 800e062:	e0d6      	b.n	800e212 <_dtoa_r+0x47e>
 800e064:	9b04      	ldr	r3, [sp, #16]
 800e066:	2b00      	cmp	r3, #0
 800e068:	dd64      	ble.n	800e134 <_dtoa_r+0x3a0>
 800e06a:	210f      	movs	r1, #15
 800e06c:	9a04      	ldr	r2, [sp, #16]
 800e06e:	4b2b      	ldr	r3, [pc, #172]	@ (800e11c <_dtoa_r+0x388>)
 800e070:	400a      	ands	r2, r1
 800e072:	00d2      	lsls	r2, r2, #3
 800e074:	189b      	adds	r3, r3, r2
 800e076:	681e      	ldr	r6, [r3, #0]
 800e078:	685f      	ldr	r7, [r3, #4]
 800e07a:	9b04      	ldr	r3, [sp, #16]
 800e07c:	2402      	movs	r4, #2
 800e07e:	111d      	asrs	r5, r3, #4
 800e080:	05db      	lsls	r3, r3, #23
 800e082:	d50a      	bpl.n	800e09a <_dtoa_r+0x306>
 800e084:	4b2a      	ldr	r3, [pc, #168]	@ (800e130 <_dtoa_r+0x39c>)
 800e086:	400d      	ands	r5, r1
 800e088:	6a1a      	ldr	r2, [r3, #32]
 800e08a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e08c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800e08e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800e090:	f7f2 fe96 	bl	8000dc0 <__aeabi_ddiv>
 800e094:	900a      	str	r0, [sp, #40]	@ 0x28
 800e096:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e098:	3401      	adds	r4, #1
 800e09a:	4b25      	ldr	r3, [pc, #148]	@ (800e130 <_dtoa_r+0x39c>)
 800e09c:	930c      	str	r3, [sp, #48]	@ 0x30
 800e09e:	2d00      	cmp	r5, #0
 800e0a0:	d108      	bne.n	800e0b4 <_dtoa_r+0x320>
 800e0a2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e0a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e0a6:	0032      	movs	r2, r6
 800e0a8:	003b      	movs	r3, r7
 800e0aa:	f7f2 fe89 	bl	8000dc0 <__aeabi_ddiv>
 800e0ae:	900a      	str	r0, [sp, #40]	@ 0x28
 800e0b0:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e0b2:	e05a      	b.n	800e16a <_dtoa_r+0x3d6>
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	421d      	tst	r5, r3
 800e0b8:	d009      	beq.n	800e0ce <_dtoa_r+0x33a>
 800e0ba:	18e4      	adds	r4, r4, r3
 800e0bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e0be:	0030      	movs	r0, r6
 800e0c0:	681a      	ldr	r2, [r3, #0]
 800e0c2:	685b      	ldr	r3, [r3, #4]
 800e0c4:	0039      	movs	r1, r7
 800e0c6:	f7f3 fabf 	bl	8001648 <__aeabi_dmul>
 800e0ca:	0006      	movs	r6, r0
 800e0cc:	000f      	movs	r7, r1
 800e0ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e0d0:	106d      	asrs	r5, r5, #1
 800e0d2:	3308      	adds	r3, #8
 800e0d4:	e7e2      	b.n	800e09c <_dtoa_r+0x308>
 800e0d6:	46c0      	nop			@ (mov r8, r8)
 800e0d8:	0801b411 	.word	0x0801b411
 800e0dc:	0801b428 	.word	0x0801b428
 800e0e0:	7ff00000 	.word	0x7ff00000
 800e0e4:	0000270f 	.word	0x0000270f
 800e0e8:	0801b40d 	.word	0x0801b40d
 800e0ec:	0801b410 	.word	0x0801b410
 800e0f0:	0801b3e1 	.word	0x0801b3e1
 800e0f4:	0801b3e0 	.word	0x0801b3e0
 800e0f8:	3ff00000 	.word	0x3ff00000
 800e0fc:	fffffc01 	.word	0xfffffc01
 800e100:	3ff80000 	.word	0x3ff80000
 800e104:	636f4361 	.word	0x636f4361
 800e108:	3fd287a7 	.word	0x3fd287a7
 800e10c:	8b60c8b3 	.word	0x8b60c8b3
 800e110:	3fc68a28 	.word	0x3fc68a28
 800e114:	509f79fb 	.word	0x509f79fb
 800e118:	3fd34413 	.word	0x3fd34413
 800e11c:	0801b520 	.word	0x0801b520
 800e120:	00000432 	.word	0x00000432
 800e124:	00000412 	.word	0x00000412
 800e128:	fe100000 	.word	0xfe100000
 800e12c:	0801b480 	.word	0x0801b480
 800e130:	0801b4f8 	.word	0x0801b4f8
 800e134:	9b04      	ldr	r3, [sp, #16]
 800e136:	2402      	movs	r4, #2
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d016      	beq.n	800e16a <_dtoa_r+0x3d6>
 800e13c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800e13e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800e140:	220f      	movs	r2, #15
 800e142:	425d      	negs	r5, r3
 800e144:	402a      	ands	r2, r5
 800e146:	4bd7      	ldr	r3, [pc, #860]	@ (800e4a4 <_dtoa_r+0x710>)
 800e148:	00d2      	lsls	r2, r2, #3
 800e14a:	189b      	adds	r3, r3, r2
 800e14c:	681a      	ldr	r2, [r3, #0]
 800e14e:	685b      	ldr	r3, [r3, #4]
 800e150:	f7f3 fa7a 	bl	8001648 <__aeabi_dmul>
 800e154:	2701      	movs	r7, #1
 800e156:	2300      	movs	r3, #0
 800e158:	900a      	str	r0, [sp, #40]	@ 0x28
 800e15a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e15c:	4ed2      	ldr	r6, [pc, #840]	@ (800e4a8 <_dtoa_r+0x714>)
 800e15e:	112d      	asrs	r5, r5, #4
 800e160:	2d00      	cmp	r5, #0
 800e162:	d000      	beq.n	800e166 <_dtoa_r+0x3d2>
 800e164:	e0ba      	b.n	800e2dc <_dtoa_r+0x548>
 800e166:	2b00      	cmp	r3, #0
 800e168:	d1a1      	bne.n	800e0ae <_dtoa_r+0x31a>
 800e16a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e16c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800e16e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e170:	2b00      	cmp	r3, #0
 800e172:	d100      	bne.n	800e176 <_dtoa_r+0x3e2>
 800e174:	e0bd      	b.n	800e2f2 <_dtoa_r+0x55e>
 800e176:	2200      	movs	r2, #0
 800e178:	0030      	movs	r0, r6
 800e17a:	0039      	movs	r1, r7
 800e17c:	4bcb      	ldr	r3, [pc, #812]	@ (800e4ac <_dtoa_r+0x718>)
 800e17e:	f7f2 f96b 	bl	8000458 <__aeabi_dcmplt>
 800e182:	2800      	cmp	r0, #0
 800e184:	d100      	bne.n	800e188 <_dtoa_r+0x3f4>
 800e186:	e0b4      	b.n	800e2f2 <_dtoa_r+0x55e>
 800e188:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d100      	bne.n	800e190 <_dtoa_r+0x3fc>
 800e18e:	e0b0      	b.n	800e2f2 <_dtoa_r+0x55e>
 800e190:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e192:	2b00      	cmp	r3, #0
 800e194:	dd39      	ble.n	800e20a <_dtoa_r+0x476>
 800e196:	9b04      	ldr	r3, [sp, #16]
 800e198:	2200      	movs	r2, #0
 800e19a:	3b01      	subs	r3, #1
 800e19c:	930c      	str	r3, [sp, #48]	@ 0x30
 800e19e:	0030      	movs	r0, r6
 800e1a0:	4bc3      	ldr	r3, [pc, #780]	@ (800e4b0 <_dtoa_r+0x71c>)
 800e1a2:	0039      	movs	r1, r7
 800e1a4:	f7f3 fa50 	bl	8001648 <__aeabi_dmul>
 800e1a8:	900a      	str	r0, [sp, #40]	@ 0x28
 800e1aa:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e1ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1ae:	3401      	adds	r4, #1
 800e1b0:	0020      	movs	r0, r4
 800e1b2:	9311      	str	r3, [sp, #68]	@ 0x44
 800e1b4:	f7f4 f90a 	bl	80023cc <__aeabi_i2d>
 800e1b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e1ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e1bc:	f7f3 fa44 	bl	8001648 <__aeabi_dmul>
 800e1c0:	4bbc      	ldr	r3, [pc, #752]	@ (800e4b4 <_dtoa_r+0x720>)
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	f7f2 fa98 	bl	80006f8 <__aeabi_dadd>
 800e1c8:	4bbb      	ldr	r3, [pc, #748]	@ (800e4b8 <_dtoa_r+0x724>)
 800e1ca:	0006      	movs	r6, r0
 800e1cc:	18cf      	adds	r7, r1, r3
 800e1ce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d000      	beq.n	800e1d6 <_dtoa_r+0x442>
 800e1d4:	e091      	b.n	800e2fa <_dtoa_r+0x566>
 800e1d6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e1d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e1da:	2200      	movs	r2, #0
 800e1dc:	4bb7      	ldr	r3, [pc, #732]	@ (800e4bc <_dtoa_r+0x728>)
 800e1de:	f7f3 fcfb 	bl	8001bd8 <__aeabi_dsub>
 800e1e2:	0032      	movs	r2, r6
 800e1e4:	003b      	movs	r3, r7
 800e1e6:	0004      	movs	r4, r0
 800e1e8:	000d      	movs	r5, r1
 800e1ea:	f7f2 f949 	bl	8000480 <__aeabi_dcmpgt>
 800e1ee:	2800      	cmp	r0, #0
 800e1f0:	d000      	beq.n	800e1f4 <_dtoa_r+0x460>
 800e1f2:	e29d      	b.n	800e730 <_dtoa_r+0x99c>
 800e1f4:	2180      	movs	r1, #128	@ 0x80
 800e1f6:	0609      	lsls	r1, r1, #24
 800e1f8:	187b      	adds	r3, r7, r1
 800e1fa:	0032      	movs	r2, r6
 800e1fc:	0020      	movs	r0, r4
 800e1fe:	0029      	movs	r1, r5
 800e200:	f7f2 f92a 	bl	8000458 <__aeabi_dcmplt>
 800e204:	2800      	cmp	r0, #0
 800e206:	d000      	beq.n	800e20a <_dtoa_r+0x476>
 800e208:	e130      	b.n	800e46c <_dtoa_r+0x6d8>
 800e20a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e20c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800e20e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e210:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e212:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e214:	2b00      	cmp	r3, #0
 800e216:	da00      	bge.n	800e21a <_dtoa_r+0x486>
 800e218:	e177      	b.n	800e50a <_dtoa_r+0x776>
 800e21a:	9a04      	ldr	r2, [sp, #16]
 800e21c:	2a0e      	cmp	r2, #14
 800e21e:	dd00      	ble.n	800e222 <_dtoa_r+0x48e>
 800e220:	e173      	b.n	800e50a <_dtoa_r+0x776>
 800e222:	4ba0      	ldr	r3, [pc, #640]	@ (800e4a4 <_dtoa_r+0x710>)
 800e224:	00d2      	lsls	r2, r2, #3
 800e226:	189b      	adds	r3, r3, r2
 800e228:	685c      	ldr	r4, [r3, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	9306      	str	r3, [sp, #24]
 800e22e:	9407      	str	r4, [sp, #28]
 800e230:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e232:	2b00      	cmp	r3, #0
 800e234:	da03      	bge.n	800e23e <_dtoa_r+0x4aa>
 800e236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e238:	2b00      	cmp	r3, #0
 800e23a:	dc00      	bgt.n	800e23e <_dtoa_r+0x4aa>
 800e23c:	e106      	b.n	800e44c <_dtoa_r+0x6b8>
 800e23e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e240:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800e242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e244:	9d08      	ldr	r5, [sp, #32]
 800e246:	3b01      	subs	r3, #1
 800e248:	195b      	adds	r3, r3, r5
 800e24a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e24c:	9a06      	ldr	r2, [sp, #24]
 800e24e:	9b07      	ldr	r3, [sp, #28]
 800e250:	0030      	movs	r0, r6
 800e252:	0039      	movs	r1, r7
 800e254:	f7f2 fdb4 	bl	8000dc0 <__aeabi_ddiv>
 800e258:	f7f4 f87c 	bl	8002354 <__aeabi_d2iz>
 800e25c:	9009      	str	r0, [sp, #36]	@ 0x24
 800e25e:	f7f4 f8b5 	bl	80023cc <__aeabi_i2d>
 800e262:	9a06      	ldr	r2, [sp, #24]
 800e264:	9b07      	ldr	r3, [sp, #28]
 800e266:	f7f3 f9ef 	bl	8001648 <__aeabi_dmul>
 800e26a:	0002      	movs	r2, r0
 800e26c:	000b      	movs	r3, r1
 800e26e:	0030      	movs	r0, r6
 800e270:	0039      	movs	r1, r7
 800e272:	f7f3 fcb1 	bl	8001bd8 <__aeabi_dsub>
 800e276:	002b      	movs	r3, r5
 800e278:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e27a:	3501      	adds	r5, #1
 800e27c:	3230      	adds	r2, #48	@ 0x30
 800e27e:	701a      	strb	r2, [r3, #0]
 800e280:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e282:	002c      	movs	r4, r5
 800e284:	429a      	cmp	r2, r3
 800e286:	d000      	beq.n	800e28a <_dtoa_r+0x4f6>
 800e288:	e131      	b.n	800e4ee <_dtoa_r+0x75a>
 800e28a:	0002      	movs	r2, r0
 800e28c:	000b      	movs	r3, r1
 800e28e:	f7f2 fa33 	bl	80006f8 <__aeabi_dadd>
 800e292:	9a06      	ldr	r2, [sp, #24]
 800e294:	9b07      	ldr	r3, [sp, #28]
 800e296:	0006      	movs	r6, r0
 800e298:	000f      	movs	r7, r1
 800e29a:	f7f2 f8f1 	bl	8000480 <__aeabi_dcmpgt>
 800e29e:	2800      	cmp	r0, #0
 800e2a0:	d000      	beq.n	800e2a4 <_dtoa_r+0x510>
 800e2a2:	e10f      	b.n	800e4c4 <_dtoa_r+0x730>
 800e2a4:	9a06      	ldr	r2, [sp, #24]
 800e2a6:	9b07      	ldr	r3, [sp, #28]
 800e2a8:	0030      	movs	r0, r6
 800e2aa:	0039      	movs	r1, r7
 800e2ac:	f7f2 f8ce 	bl	800044c <__aeabi_dcmpeq>
 800e2b0:	2800      	cmp	r0, #0
 800e2b2:	d003      	beq.n	800e2bc <_dtoa_r+0x528>
 800e2b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2b6:	07dd      	lsls	r5, r3, #31
 800e2b8:	d500      	bpl.n	800e2bc <_dtoa_r+0x528>
 800e2ba:	e103      	b.n	800e4c4 <_dtoa_r+0x730>
 800e2bc:	9905      	ldr	r1, [sp, #20]
 800e2be:	9803      	ldr	r0, [sp, #12]
 800e2c0:	f000 fbea 	bl	800ea98 <_Bfree>
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	7023      	strb	r3, [r4, #0]
 800e2c8:	9b04      	ldr	r3, [sp, #16]
 800e2ca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800e2cc:	3301      	adds	r3, #1
 800e2ce:	6013      	str	r3, [r2, #0]
 800e2d0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d100      	bne.n	800e2d8 <_dtoa_r+0x544>
 800e2d6:	e5a7      	b.n	800de28 <_dtoa_r+0x94>
 800e2d8:	601c      	str	r4, [r3, #0]
 800e2da:	e5a5      	b.n	800de28 <_dtoa_r+0x94>
 800e2dc:	423d      	tst	r5, r7
 800e2de:	d005      	beq.n	800e2ec <_dtoa_r+0x558>
 800e2e0:	6832      	ldr	r2, [r6, #0]
 800e2e2:	6873      	ldr	r3, [r6, #4]
 800e2e4:	f7f3 f9b0 	bl	8001648 <__aeabi_dmul>
 800e2e8:	003b      	movs	r3, r7
 800e2ea:	3401      	adds	r4, #1
 800e2ec:	106d      	asrs	r5, r5, #1
 800e2ee:	3608      	adds	r6, #8
 800e2f0:	e736      	b.n	800e160 <_dtoa_r+0x3cc>
 800e2f2:	9b04      	ldr	r3, [sp, #16]
 800e2f4:	930c      	str	r3, [sp, #48]	@ 0x30
 800e2f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2f8:	e75a      	b.n	800e1b0 <_dtoa_r+0x41c>
 800e2fa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e2fc:	4b69      	ldr	r3, [pc, #420]	@ (800e4a4 <_dtoa_r+0x710>)
 800e2fe:	3a01      	subs	r2, #1
 800e300:	00d2      	lsls	r2, r2, #3
 800e302:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800e304:	189b      	adds	r3, r3, r2
 800e306:	681a      	ldr	r2, [r3, #0]
 800e308:	685b      	ldr	r3, [r3, #4]
 800e30a:	2900      	cmp	r1, #0
 800e30c:	d04c      	beq.n	800e3a8 <_dtoa_r+0x614>
 800e30e:	2000      	movs	r0, #0
 800e310:	496b      	ldr	r1, [pc, #428]	@ (800e4c0 <_dtoa_r+0x72c>)
 800e312:	f7f2 fd55 	bl	8000dc0 <__aeabi_ddiv>
 800e316:	0032      	movs	r2, r6
 800e318:	003b      	movs	r3, r7
 800e31a:	f7f3 fc5d 	bl	8001bd8 <__aeabi_dsub>
 800e31e:	9a08      	ldr	r2, [sp, #32]
 800e320:	0006      	movs	r6, r0
 800e322:	4694      	mov	ip, r2
 800e324:	000f      	movs	r7, r1
 800e326:	9b08      	ldr	r3, [sp, #32]
 800e328:	9316      	str	r3, [sp, #88]	@ 0x58
 800e32a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e32c:	4463      	add	r3, ip
 800e32e:	9311      	str	r3, [sp, #68]	@ 0x44
 800e330:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e332:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e334:	f7f4 f80e 	bl	8002354 <__aeabi_d2iz>
 800e338:	0005      	movs	r5, r0
 800e33a:	f7f4 f847 	bl	80023cc <__aeabi_i2d>
 800e33e:	0002      	movs	r2, r0
 800e340:	000b      	movs	r3, r1
 800e342:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e344:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e346:	f7f3 fc47 	bl	8001bd8 <__aeabi_dsub>
 800e34a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e34c:	3530      	adds	r5, #48	@ 0x30
 800e34e:	1c5c      	adds	r4, r3, #1
 800e350:	701d      	strb	r5, [r3, #0]
 800e352:	0032      	movs	r2, r6
 800e354:	003b      	movs	r3, r7
 800e356:	900a      	str	r0, [sp, #40]	@ 0x28
 800e358:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e35a:	f7f2 f87d 	bl	8000458 <__aeabi_dcmplt>
 800e35e:	2800      	cmp	r0, #0
 800e360:	d16a      	bne.n	800e438 <_dtoa_r+0x6a4>
 800e362:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e364:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e366:	2000      	movs	r0, #0
 800e368:	4950      	ldr	r1, [pc, #320]	@ (800e4ac <_dtoa_r+0x718>)
 800e36a:	f7f3 fc35 	bl	8001bd8 <__aeabi_dsub>
 800e36e:	0032      	movs	r2, r6
 800e370:	003b      	movs	r3, r7
 800e372:	f7f2 f871 	bl	8000458 <__aeabi_dcmplt>
 800e376:	2800      	cmp	r0, #0
 800e378:	d000      	beq.n	800e37c <_dtoa_r+0x5e8>
 800e37a:	e0a5      	b.n	800e4c8 <_dtoa_r+0x734>
 800e37c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e37e:	42a3      	cmp	r3, r4
 800e380:	d100      	bne.n	800e384 <_dtoa_r+0x5f0>
 800e382:	e742      	b.n	800e20a <_dtoa_r+0x476>
 800e384:	2200      	movs	r2, #0
 800e386:	0030      	movs	r0, r6
 800e388:	0039      	movs	r1, r7
 800e38a:	4b49      	ldr	r3, [pc, #292]	@ (800e4b0 <_dtoa_r+0x71c>)
 800e38c:	f7f3 f95c 	bl	8001648 <__aeabi_dmul>
 800e390:	2200      	movs	r2, #0
 800e392:	0006      	movs	r6, r0
 800e394:	000f      	movs	r7, r1
 800e396:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e398:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e39a:	4b45      	ldr	r3, [pc, #276]	@ (800e4b0 <_dtoa_r+0x71c>)
 800e39c:	f7f3 f954 	bl	8001648 <__aeabi_dmul>
 800e3a0:	9416      	str	r4, [sp, #88]	@ 0x58
 800e3a2:	900a      	str	r0, [sp, #40]	@ 0x28
 800e3a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e3a6:	e7c3      	b.n	800e330 <_dtoa_r+0x59c>
 800e3a8:	0030      	movs	r0, r6
 800e3aa:	0039      	movs	r1, r7
 800e3ac:	f7f3 f94c 	bl	8001648 <__aeabi_dmul>
 800e3b0:	9d08      	ldr	r5, [sp, #32]
 800e3b2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e3b4:	002b      	movs	r3, r5
 800e3b6:	4694      	mov	ip, r2
 800e3b8:	9016      	str	r0, [sp, #88]	@ 0x58
 800e3ba:	9117      	str	r1, [sp, #92]	@ 0x5c
 800e3bc:	4463      	add	r3, ip
 800e3be:	9319      	str	r3, [sp, #100]	@ 0x64
 800e3c0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e3c2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e3c4:	f7f3 ffc6 	bl	8002354 <__aeabi_d2iz>
 800e3c8:	0004      	movs	r4, r0
 800e3ca:	f7f3 ffff 	bl	80023cc <__aeabi_i2d>
 800e3ce:	000b      	movs	r3, r1
 800e3d0:	0002      	movs	r2, r0
 800e3d2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e3d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e3d6:	f7f3 fbff 	bl	8001bd8 <__aeabi_dsub>
 800e3da:	3430      	adds	r4, #48	@ 0x30
 800e3dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e3de:	702c      	strb	r4, [r5, #0]
 800e3e0:	3501      	adds	r5, #1
 800e3e2:	0006      	movs	r6, r0
 800e3e4:	000f      	movs	r7, r1
 800e3e6:	42ab      	cmp	r3, r5
 800e3e8:	d129      	bne.n	800e43e <_dtoa_r+0x6aa>
 800e3ea:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800e3ec:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800e3ee:	9b08      	ldr	r3, [sp, #32]
 800e3f0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800e3f2:	469c      	mov	ip, r3
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	4b32      	ldr	r3, [pc, #200]	@ (800e4c0 <_dtoa_r+0x72c>)
 800e3f8:	4464      	add	r4, ip
 800e3fa:	f7f2 f97d 	bl	80006f8 <__aeabi_dadd>
 800e3fe:	0002      	movs	r2, r0
 800e400:	000b      	movs	r3, r1
 800e402:	0030      	movs	r0, r6
 800e404:	0039      	movs	r1, r7
 800e406:	f7f2 f83b 	bl	8000480 <__aeabi_dcmpgt>
 800e40a:	2800      	cmp	r0, #0
 800e40c:	d15c      	bne.n	800e4c8 <_dtoa_r+0x734>
 800e40e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e410:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e412:	2000      	movs	r0, #0
 800e414:	492a      	ldr	r1, [pc, #168]	@ (800e4c0 <_dtoa_r+0x72c>)
 800e416:	f7f3 fbdf 	bl	8001bd8 <__aeabi_dsub>
 800e41a:	0002      	movs	r2, r0
 800e41c:	000b      	movs	r3, r1
 800e41e:	0030      	movs	r0, r6
 800e420:	0039      	movs	r1, r7
 800e422:	f7f2 f819 	bl	8000458 <__aeabi_dcmplt>
 800e426:	2800      	cmp	r0, #0
 800e428:	d100      	bne.n	800e42c <_dtoa_r+0x698>
 800e42a:	e6ee      	b.n	800e20a <_dtoa_r+0x476>
 800e42c:	0023      	movs	r3, r4
 800e42e:	3c01      	subs	r4, #1
 800e430:	7822      	ldrb	r2, [r4, #0]
 800e432:	2a30      	cmp	r2, #48	@ 0x30
 800e434:	d0fa      	beq.n	800e42c <_dtoa_r+0x698>
 800e436:	001c      	movs	r4, r3
 800e438:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e43a:	9304      	str	r3, [sp, #16]
 800e43c:	e73e      	b.n	800e2bc <_dtoa_r+0x528>
 800e43e:	2200      	movs	r2, #0
 800e440:	4b1b      	ldr	r3, [pc, #108]	@ (800e4b0 <_dtoa_r+0x71c>)
 800e442:	f7f3 f901 	bl	8001648 <__aeabi_dmul>
 800e446:	900a      	str	r0, [sp, #40]	@ 0x28
 800e448:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e44a:	e7b9      	b.n	800e3c0 <_dtoa_r+0x62c>
 800e44c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d10c      	bne.n	800e46c <_dtoa_r+0x6d8>
 800e452:	9806      	ldr	r0, [sp, #24]
 800e454:	9907      	ldr	r1, [sp, #28]
 800e456:	2200      	movs	r2, #0
 800e458:	4b18      	ldr	r3, [pc, #96]	@ (800e4bc <_dtoa_r+0x728>)
 800e45a:	f7f3 f8f5 	bl	8001648 <__aeabi_dmul>
 800e45e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e460:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e462:	f7f2 f817 	bl	8000494 <__aeabi_dcmpge>
 800e466:	2800      	cmp	r0, #0
 800e468:	d100      	bne.n	800e46c <_dtoa_r+0x6d8>
 800e46a:	e164      	b.n	800e736 <_dtoa_r+0x9a2>
 800e46c:	2600      	movs	r6, #0
 800e46e:	0037      	movs	r7, r6
 800e470:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e472:	9c08      	ldr	r4, [sp, #32]
 800e474:	43db      	mvns	r3, r3
 800e476:	930c      	str	r3, [sp, #48]	@ 0x30
 800e478:	2300      	movs	r3, #0
 800e47a:	9304      	str	r3, [sp, #16]
 800e47c:	0031      	movs	r1, r6
 800e47e:	9803      	ldr	r0, [sp, #12]
 800e480:	f000 fb0a 	bl	800ea98 <_Bfree>
 800e484:	2f00      	cmp	r7, #0
 800e486:	d0d7      	beq.n	800e438 <_dtoa_r+0x6a4>
 800e488:	9b04      	ldr	r3, [sp, #16]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d005      	beq.n	800e49a <_dtoa_r+0x706>
 800e48e:	42bb      	cmp	r3, r7
 800e490:	d003      	beq.n	800e49a <_dtoa_r+0x706>
 800e492:	0019      	movs	r1, r3
 800e494:	9803      	ldr	r0, [sp, #12]
 800e496:	f000 faff 	bl	800ea98 <_Bfree>
 800e49a:	0039      	movs	r1, r7
 800e49c:	9803      	ldr	r0, [sp, #12]
 800e49e:	f000 fafb 	bl	800ea98 <_Bfree>
 800e4a2:	e7c9      	b.n	800e438 <_dtoa_r+0x6a4>
 800e4a4:	0801b520 	.word	0x0801b520
 800e4a8:	0801b4f8 	.word	0x0801b4f8
 800e4ac:	3ff00000 	.word	0x3ff00000
 800e4b0:	40240000 	.word	0x40240000
 800e4b4:	401c0000 	.word	0x401c0000
 800e4b8:	fcc00000 	.word	0xfcc00000
 800e4bc:	40140000 	.word	0x40140000
 800e4c0:	3fe00000 	.word	0x3fe00000
 800e4c4:	9b04      	ldr	r3, [sp, #16]
 800e4c6:	930c      	str	r3, [sp, #48]	@ 0x30
 800e4c8:	0023      	movs	r3, r4
 800e4ca:	001c      	movs	r4, r3
 800e4cc:	3b01      	subs	r3, #1
 800e4ce:	781a      	ldrb	r2, [r3, #0]
 800e4d0:	2a39      	cmp	r2, #57	@ 0x39
 800e4d2:	d108      	bne.n	800e4e6 <_dtoa_r+0x752>
 800e4d4:	9a08      	ldr	r2, [sp, #32]
 800e4d6:	429a      	cmp	r2, r3
 800e4d8:	d1f7      	bne.n	800e4ca <_dtoa_r+0x736>
 800e4da:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e4dc:	9908      	ldr	r1, [sp, #32]
 800e4de:	3201      	adds	r2, #1
 800e4e0:	920c      	str	r2, [sp, #48]	@ 0x30
 800e4e2:	2230      	movs	r2, #48	@ 0x30
 800e4e4:	700a      	strb	r2, [r1, #0]
 800e4e6:	781a      	ldrb	r2, [r3, #0]
 800e4e8:	3201      	adds	r2, #1
 800e4ea:	701a      	strb	r2, [r3, #0]
 800e4ec:	e7a4      	b.n	800e438 <_dtoa_r+0x6a4>
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	4bc6      	ldr	r3, [pc, #792]	@ (800e80c <_dtoa_r+0xa78>)
 800e4f2:	f7f3 f8a9 	bl	8001648 <__aeabi_dmul>
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	0006      	movs	r6, r0
 800e4fc:	000f      	movs	r7, r1
 800e4fe:	f7f1 ffa5 	bl	800044c <__aeabi_dcmpeq>
 800e502:	2800      	cmp	r0, #0
 800e504:	d100      	bne.n	800e508 <_dtoa_r+0x774>
 800e506:	e6a1      	b.n	800e24c <_dtoa_r+0x4b8>
 800e508:	e6d8      	b.n	800e2bc <_dtoa_r+0x528>
 800e50a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800e50c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800e50e:	9c06      	ldr	r4, [sp, #24]
 800e510:	2f00      	cmp	r7, #0
 800e512:	d014      	beq.n	800e53e <_dtoa_r+0x7aa>
 800e514:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e516:	2a01      	cmp	r2, #1
 800e518:	dd00      	ble.n	800e51c <_dtoa_r+0x788>
 800e51a:	e0c8      	b.n	800e6ae <_dtoa_r+0x91a>
 800e51c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800e51e:	2a00      	cmp	r2, #0
 800e520:	d100      	bne.n	800e524 <_dtoa_r+0x790>
 800e522:	e0be      	b.n	800e6a2 <_dtoa_r+0x90e>
 800e524:	4aba      	ldr	r2, [pc, #744]	@ (800e810 <_dtoa_r+0xa7c>)
 800e526:	189b      	adds	r3, r3, r2
 800e528:	9a06      	ldr	r2, [sp, #24]
 800e52a:	2101      	movs	r1, #1
 800e52c:	18d2      	adds	r2, r2, r3
 800e52e:	9206      	str	r2, [sp, #24]
 800e530:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e532:	9803      	ldr	r0, [sp, #12]
 800e534:	18d3      	adds	r3, r2, r3
 800e536:	930d      	str	r3, [sp, #52]	@ 0x34
 800e538:	f000 fb66 	bl	800ec08 <__i2b>
 800e53c:	0007      	movs	r7, r0
 800e53e:	2c00      	cmp	r4, #0
 800e540:	d00e      	beq.n	800e560 <_dtoa_r+0x7cc>
 800e542:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e544:	2b00      	cmp	r3, #0
 800e546:	dd0b      	ble.n	800e560 <_dtoa_r+0x7cc>
 800e548:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e54a:	0023      	movs	r3, r4
 800e54c:	4294      	cmp	r4, r2
 800e54e:	dd00      	ble.n	800e552 <_dtoa_r+0x7be>
 800e550:	0013      	movs	r3, r2
 800e552:	9a06      	ldr	r2, [sp, #24]
 800e554:	1ae4      	subs	r4, r4, r3
 800e556:	1ad2      	subs	r2, r2, r3
 800e558:	9206      	str	r2, [sp, #24]
 800e55a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e55c:	1ad3      	subs	r3, r2, r3
 800e55e:	930d      	str	r3, [sp, #52]	@ 0x34
 800e560:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e562:	2b00      	cmp	r3, #0
 800e564:	d01f      	beq.n	800e5a6 <_dtoa_r+0x812>
 800e566:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d100      	bne.n	800e56e <_dtoa_r+0x7da>
 800e56c:	e0b5      	b.n	800e6da <_dtoa_r+0x946>
 800e56e:	2d00      	cmp	r5, #0
 800e570:	d010      	beq.n	800e594 <_dtoa_r+0x800>
 800e572:	0039      	movs	r1, r7
 800e574:	002a      	movs	r2, r5
 800e576:	9803      	ldr	r0, [sp, #12]
 800e578:	f000 fc10 	bl	800ed9c <__pow5mult>
 800e57c:	9a05      	ldr	r2, [sp, #20]
 800e57e:	0001      	movs	r1, r0
 800e580:	0007      	movs	r7, r0
 800e582:	9803      	ldr	r0, [sp, #12]
 800e584:	f000 fb58 	bl	800ec38 <__multiply>
 800e588:	0006      	movs	r6, r0
 800e58a:	9905      	ldr	r1, [sp, #20]
 800e58c:	9803      	ldr	r0, [sp, #12]
 800e58e:	f000 fa83 	bl	800ea98 <_Bfree>
 800e592:	9605      	str	r6, [sp, #20]
 800e594:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e596:	1b5a      	subs	r2, r3, r5
 800e598:	42ab      	cmp	r3, r5
 800e59a:	d004      	beq.n	800e5a6 <_dtoa_r+0x812>
 800e59c:	9905      	ldr	r1, [sp, #20]
 800e59e:	9803      	ldr	r0, [sp, #12]
 800e5a0:	f000 fbfc 	bl	800ed9c <__pow5mult>
 800e5a4:	9005      	str	r0, [sp, #20]
 800e5a6:	2101      	movs	r1, #1
 800e5a8:	9803      	ldr	r0, [sp, #12]
 800e5aa:	f000 fb2d 	bl	800ec08 <__i2b>
 800e5ae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e5b0:	0006      	movs	r6, r0
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d100      	bne.n	800e5b8 <_dtoa_r+0x824>
 800e5b6:	e1bc      	b.n	800e932 <_dtoa_r+0xb9e>
 800e5b8:	001a      	movs	r2, r3
 800e5ba:	0001      	movs	r1, r0
 800e5bc:	9803      	ldr	r0, [sp, #12]
 800e5be:	f000 fbed 	bl	800ed9c <__pow5mult>
 800e5c2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e5c4:	0006      	movs	r6, r0
 800e5c6:	2500      	movs	r5, #0
 800e5c8:	2b01      	cmp	r3, #1
 800e5ca:	dc16      	bgt.n	800e5fa <_dtoa_r+0x866>
 800e5cc:	2500      	movs	r5, #0
 800e5ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5d0:	42ab      	cmp	r3, r5
 800e5d2:	d10e      	bne.n	800e5f2 <_dtoa_r+0x85e>
 800e5d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e5d6:	031b      	lsls	r3, r3, #12
 800e5d8:	42ab      	cmp	r3, r5
 800e5da:	d10a      	bne.n	800e5f2 <_dtoa_r+0x85e>
 800e5dc:	4b8d      	ldr	r3, [pc, #564]	@ (800e814 <_dtoa_r+0xa80>)
 800e5de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e5e0:	4213      	tst	r3, r2
 800e5e2:	d006      	beq.n	800e5f2 <_dtoa_r+0x85e>
 800e5e4:	9b06      	ldr	r3, [sp, #24]
 800e5e6:	3501      	adds	r5, #1
 800e5e8:	3301      	adds	r3, #1
 800e5ea:	9306      	str	r3, [sp, #24]
 800e5ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e5ee:	3301      	adds	r3, #1
 800e5f0:	930d      	str	r3, [sp, #52]	@ 0x34
 800e5f2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e5f4:	2001      	movs	r0, #1
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d008      	beq.n	800e60c <_dtoa_r+0x878>
 800e5fa:	6933      	ldr	r3, [r6, #16]
 800e5fc:	3303      	adds	r3, #3
 800e5fe:	009b      	lsls	r3, r3, #2
 800e600:	18f3      	adds	r3, r6, r3
 800e602:	6858      	ldr	r0, [r3, #4]
 800e604:	f000 fab0 	bl	800eb68 <__hi0bits>
 800e608:	2320      	movs	r3, #32
 800e60a:	1a18      	subs	r0, r3, r0
 800e60c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e60e:	1818      	adds	r0, r3, r0
 800e610:	0002      	movs	r2, r0
 800e612:	231f      	movs	r3, #31
 800e614:	401a      	ands	r2, r3
 800e616:	4218      	tst	r0, r3
 800e618:	d065      	beq.n	800e6e6 <_dtoa_r+0x952>
 800e61a:	3301      	adds	r3, #1
 800e61c:	1a9b      	subs	r3, r3, r2
 800e61e:	2b04      	cmp	r3, #4
 800e620:	dd5d      	ble.n	800e6de <_dtoa_r+0x94a>
 800e622:	231c      	movs	r3, #28
 800e624:	1a9b      	subs	r3, r3, r2
 800e626:	9a06      	ldr	r2, [sp, #24]
 800e628:	18e4      	adds	r4, r4, r3
 800e62a:	18d2      	adds	r2, r2, r3
 800e62c:	9206      	str	r2, [sp, #24]
 800e62e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e630:	18d3      	adds	r3, r2, r3
 800e632:	930d      	str	r3, [sp, #52]	@ 0x34
 800e634:	9b06      	ldr	r3, [sp, #24]
 800e636:	2b00      	cmp	r3, #0
 800e638:	dd05      	ble.n	800e646 <_dtoa_r+0x8b2>
 800e63a:	001a      	movs	r2, r3
 800e63c:	9905      	ldr	r1, [sp, #20]
 800e63e:	9803      	ldr	r0, [sp, #12]
 800e640:	f000 fc08 	bl	800ee54 <__lshift>
 800e644:	9005      	str	r0, [sp, #20]
 800e646:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e648:	2b00      	cmp	r3, #0
 800e64a:	dd05      	ble.n	800e658 <_dtoa_r+0x8c4>
 800e64c:	0031      	movs	r1, r6
 800e64e:	001a      	movs	r2, r3
 800e650:	9803      	ldr	r0, [sp, #12]
 800e652:	f000 fbff 	bl	800ee54 <__lshift>
 800e656:	0006      	movs	r6, r0
 800e658:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d045      	beq.n	800e6ea <_dtoa_r+0x956>
 800e65e:	0031      	movs	r1, r6
 800e660:	9805      	ldr	r0, [sp, #20]
 800e662:	f000 fc63 	bl	800ef2c <__mcmp>
 800e666:	2800      	cmp	r0, #0
 800e668:	da3f      	bge.n	800e6ea <_dtoa_r+0x956>
 800e66a:	9b04      	ldr	r3, [sp, #16]
 800e66c:	220a      	movs	r2, #10
 800e66e:	3b01      	subs	r3, #1
 800e670:	930c      	str	r3, [sp, #48]	@ 0x30
 800e672:	9905      	ldr	r1, [sp, #20]
 800e674:	2300      	movs	r3, #0
 800e676:	9803      	ldr	r0, [sp, #12]
 800e678:	f000 fa32 	bl	800eae0 <__multadd>
 800e67c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e67e:	9005      	str	r0, [sp, #20]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d100      	bne.n	800e686 <_dtoa_r+0x8f2>
 800e684:	e15c      	b.n	800e940 <_dtoa_r+0xbac>
 800e686:	2300      	movs	r3, #0
 800e688:	0039      	movs	r1, r7
 800e68a:	220a      	movs	r2, #10
 800e68c:	9803      	ldr	r0, [sp, #12]
 800e68e:	f000 fa27 	bl	800eae0 <__multadd>
 800e692:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e694:	0007      	movs	r7, r0
 800e696:	2b00      	cmp	r3, #0
 800e698:	dc55      	bgt.n	800e746 <_dtoa_r+0x9b2>
 800e69a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e69c:	2b02      	cmp	r3, #2
 800e69e:	dc2d      	bgt.n	800e6fc <_dtoa_r+0x968>
 800e6a0:	e051      	b.n	800e746 <_dtoa_r+0x9b2>
 800e6a2:	2336      	movs	r3, #54	@ 0x36
 800e6a4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e6a6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800e6a8:	9c06      	ldr	r4, [sp, #24]
 800e6aa:	1a9b      	subs	r3, r3, r2
 800e6ac:	e73c      	b.n	800e528 <_dtoa_r+0x794>
 800e6ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6b0:	1e5d      	subs	r5, r3, #1
 800e6b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e6b4:	42ab      	cmp	r3, r5
 800e6b6:	db08      	blt.n	800e6ca <_dtoa_r+0x936>
 800e6b8:	1b5d      	subs	r5, r3, r5
 800e6ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6bc:	9c06      	ldr	r4, [sp, #24]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	db00      	blt.n	800e6c4 <_dtoa_r+0x930>
 800e6c2:	e731      	b.n	800e528 <_dtoa_r+0x794>
 800e6c4:	1ae4      	subs	r4, r4, r3
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	e72e      	b.n	800e528 <_dtoa_r+0x794>
 800e6ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e6cc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e6ce:	1aeb      	subs	r3, r5, r3
 800e6d0:	18d3      	adds	r3, r2, r3
 800e6d2:	950f      	str	r5, [sp, #60]	@ 0x3c
 800e6d4:	9314      	str	r3, [sp, #80]	@ 0x50
 800e6d6:	2500      	movs	r5, #0
 800e6d8:	e7ef      	b.n	800e6ba <_dtoa_r+0x926>
 800e6da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e6dc:	e75e      	b.n	800e59c <_dtoa_r+0x808>
 800e6de:	2b04      	cmp	r3, #4
 800e6e0:	d0a8      	beq.n	800e634 <_dtoa_r+0x8a0>
 800e6e2:	331c      	adds	r3, #28
 800e6e4:	e79f      	b.n	800e626 <_dtoa_r+0x892>
 800e6e6:	0013      	movs	r3, r2
 800e6e8:	e7fb      	b.n	800e6e2 <_dtoa_r+0x94e>
 800e6ea:	9b04      	ldr	r3, [sp, #16]
 800e6ec:	930c      	str	r3, [sp, #48]	@ 0x30
 800e6ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6f0:	930e      	str	r3, [sp, #56]	@ 0x38
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	dc23      	bgt.n	800e73e <_dtoa_r+0x9aa>
 800e6f6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e6f8:	2b02      	cmp	r3, #2
 800e6fa:	dd20      	ble.n	800e73e <_dtoa_r+0x9aa>
 800e6fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d000      	beq.n	800e704 <_dtoa_r+0x970>
 800e702:	e6b5      	b.n	800e470 <_dtoa_r+0x6dc>
 800e704:	0031      	movs	r1, r6
 800e706:	2205      	movs	r2, #5
 800e708:	9803      	ldr	r0, [sp, #12]
 800e70a:	f000 f9e9 	bl	800eae0 <__multadd>
 800e70e:	0006      	movs	r6, r0
 800e710:	0001      	movs	r1, r0
 800e712:	9805      	ldr	r0, [sp, #20]
 800e714:	f000 fc0a 	bl	800ef2c <__mcmp>
 800e718:	2800      	cmp	r0, #0
 800e71a:	dc00      	bgt.n	800e71e <_dtoa_r+0x98a>
 800e71c:	e6a8      	b.n	800e470 <_dtoa_r+0x6dc>
 800e71e:	9b08      	ldr	r3, [sp, #32]
 800e720:	9a08      	ldr	r2, [sp, #32]
 800e722:	1c5c      	adds	r4, r3, #1
 800e724:	2331      	movs	r3, #49	@ 0x31
 800e726:	7013      	strb	r3, [r2, #0]
 800e728:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e72a:	3301      	adds	r3, #1
 800e72c:	930c      	str	r3, [sp, #48]	@ 0x30
 800e72e:	e6a3      	b.n	800e478 <_dtoa_r+0x6e4>
 800e730:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800e732:	0037      	movs	r7, r6
 800e734:	e7f3      	b.n	800e71e <_dtoa_r+0x98a>
 800e736:	9b04      	ldr	r3, [sp, #16]
 800e738:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800e73a:	930c      	str	r3, [sp, #48]	@ 0x30
 800e73c:	e7f9      	b.n	800e732 <_dtoa_r+0x99e>
 800e73e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e740:	2b00      	cmp	r3, #0
 800e742:	d100      	bne.n	800e746 <_dtoa_r+0x9b2>
 800e744:	e100      	b.n	800e948 <_dtoa_r+0xbb4>
 800e746:	2c00      	cmp	r4, #0
 800e748:	dd05      	ble.n	800e756 <_dtoa_r+0x9c2>
 800e74a:	0039      	movs	r1, r7
 800e74c:	0022      	movs	r2, r4
 800e74e:	9803      	ldr	r0, [sp, #12]
 800e750:	f000 fb80 	bl	800ee54 <__lshift>
 800e754:	0007      	movs	r7, r0
 800e756:	0038      	movs	r0, r7
 800e758:	2d00      	cmp	r5, #0
 800e75a:	d018      	beq.n	800e78e <_dtoa_r+0x9fa>
 800e75c:	6879      	ldr	r1, [r7, #4]
 800e75e:	9803      	ldr	r0, [sp, #12]
 800e760:	f000 f956 	bl	800ea10 <_Balloc>
 800e764:	1e04      	subs	r4, r0, #0
 800e766:	d105      	bne.n	800e774 <_dtoa_r+0x9e0>
 800e768:	0022      	movs	r2, r4
 800e76a:	4b2b      	ldr	r3, [pc, #172]	@ (800e818 <_dtoa_r+0xa84>)
 800e76c:	482b      	ldr	r0, [pc, #172]	@ (800e81c <_dtoa_r+0xa88>)
 800e76e:	492c      	ldr	r1, [pc, #176]	@ (800e820 <_dtoa_r+0xa8c>)
 800e770:	f7ff fb25 	bl	800ddbe <_dtoa_r+0x2a>
 800e774:	0039      	movs	r1, r7
 800e776:	693a      	ldr	r2, [r7, #16]
 800e778:	310c      	adds	r1, #12
 800e77a:	3202      	adds	r2, #2
 800e77c:	0092      	lsls	r2, r2, #2
 800e77e:	300c      	adds	r0, #12
 800e780:	f000 ff80 	bl	800f684 <memcpy>
 800e784:	2201      	movs	r2, #1
 800e786:	0021      	movs	r1, r4
 800e788:	9803      	ldr	r0, [sp, #12]
 800e78a:	f000 fb63 	bl	800ee54 <__lshift>
 800e78e:	9b08      	ldr	r3, [sp, #32]
 800e790:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e792:	9306      	str	r3, [sp, #24]
 800e794:	3b01      	subs	r3, #1
 800e796:	189b      	adds	r3, r3, r2
 800e798:	2201      	movs	r2, #1
 800e79a:	9704      	str	r7, [sp, #16]
 800e79c:	0007      	movs	r7, r0
 800e79e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e7a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e7a2:	4013      	ands	r3, r2
 800e7a4:	930e      	str	r3, [sp, #56]	@ 0x38
 800e7a6:	0031      	movs	r1, r6
 800e7a8:	9805      	ldr	r0, [sp, #20]
 800e7aa:	f7ff fa65 	bl	800dc78 <quorem>
 800e7ae:	9904      	ldr	r1, [sp, #16]
 800e7b0:	0005      	movs	r5, r0
 800e7b2:	900a      	str	r0, [sp, #40]	@ 0x28
 800e7b4:	9805      	ldr	r0, [sp, #20]
 800e7b6:	f000 fbb9 	bl	800ef2c <__mcmp>
 800e7ba:	003a      	movs	r2, r7
 800e7bc:	900d      	str	r0, [sp, #52]	@ 0x34
 800e7be:	0031      	movs	r1, r6
 800e7c0:	9803      	ldr	r0, [sp, #12]
 800e7c2:	f000 fbcf 	bl	800ef64 <__mdiff>
 800e7c6:	2201      	movs	r2, #1
 800e7c8:	68c3      	ldr	r3, [r0, #12]
 800e7ca:	0004      	movs	r4, r0
 800e7cc:	3530      	adds	r5, #48	@ 0x30
 800e7ce:	9209      	str	r2, [sp, #36]	@ 0x24
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d104      	bne.n	800e7de <_dtoa_r+0xa4a>
 800e7d4:	0001      	movs	r1, r0
 800e7d6:	9805      	ldr	r0, [sp, #20]
 800e7d8:	f000 fba8 	bl	800ef2c <__mcmp>
 800e7dc:	9009      	str	r0, [sp, #36]	@ 0x24
 800e7de:	0021      	movs	r1, r4
 800e7e0:	9803      	ldr	r0, [sp, #12]
 800e7e2:	f000 f959 	bl	800ea98 <_Bfree>
 800e7e6:	9b06      	ldr	r3, [sp, #24]
 800e7e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e7ea:	1c5c      	adds	r4, r3, #1
 800e7ec:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e7ee:	4313      	orrs	r3, r2
 800e7f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e7f2:	4313      	orrs	r3, r2
 800e7f4:	d116      	bne.n	800e824 <_dtoa_r+0xa90>
 800e7f6:	2d39      	cmp	r5, #57	@ 0x39
 800e7f8:	d02f      	beq.n	800e85a <_dtoa_r+0xac6>
 800e7fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	dd01      	ble.n	800e804 <_dtoa_r+0xa70>
 800e800:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800e802:	3531      	adds	r5, #49	@ 0x31
 800e804:	9b06      	ldr	r3, [sp, #24]
 800e806:	701d      	strb	r5, [r3, #0]
 800e808:	e638      	b.n	800e47c <_dtoa_r+0x6e8>
 800e80a:	46c0      	nop			@ (mov r8, r8)
 800e80c:	40240000 	.word	0x40240000
 800e810:	00000433 	.word	0x00000433
 800e814:	7ff00000 	.word	0x7ff00000
 800e818:	0801b480 	.word	0x0801b480
 800e81c:	0801b428 	.word	0x0801b428
 800e820:	000002ef 	.word	0x000002ef
 800e824:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e826:	2b00      	cmp	r3, #0
 800e828:	db04      	blt.n	800e834 <_dtoa_r+0xaa0>
 800e82a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e82c:	4313      	orrs	r3, r2
 800e82e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e830:	4313      	orrs	r3, r2
 800e832:	d11e      	bne.n	800e872 <_dtoa_r+0xade>
 800e834:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e836:	2b00      	cmp	r3, #0
 800e838:	dde4      	ble.n	800e804 <_dtoa_r+0xa70>
 800e83a:	9905      	ldr	r1, [sp, #20]
 800e83c:	2201      	movs	r2, #1
 800e83e:	9803      	ldr	r0, [sp, #12]
 800e840:	f000 fb08 	bl	800ee54 <__lshift>
 800e844:	0031      	movs	r1, r6
 800e846:	9005      	str	r0, [sp, #20]
 800e848:	f000 fb70 	bl	800ef2c <__mcmp>
 800e84c:	2800      	cmp	r0, #0
 800e84e:	dc02      	bgt.n	800e856 <_dtoa_r+0xac2>
 800e850:	d1d8      	bne.n	800e804 <_dtoa_r+0xa70>
 800e852:	07eb      	lsls	r3, r5, #31
 800e854:	d5d6      	bpl.n	800e804 <_dtoa_r+0xa70>
 800e856:	2d39      	cmp	r5, #57	@ 0x39
 800e858:	d1d2      	bne.n	800e800 <_dtoa_r+0xa6c>
 800e85a:	2339      	movs	r3, #57	@ 0x39
 800e85c:	9a06      	ldr	r2, [sp, #24]
 800e85e:	7013      	strb	r3, [r2, #0]
 800e860:	0023      	movs	r3, r4
 800e862:	001c      	movs	r4, r3
 800e864:	3b01      	subs	r3, #1
 800e866:	781a      	ldrb	r2, [r3, #0]
 800e868:	2a39      	cmp	r2, #57	@ 0x39
 800e86a:	d04f      	beq.n	800e90c <_dtoa_r+0xb78>
 800e86c:	3201      	adds	r2, #1
 800e86e:	701a      	strb	r2, [r3, #0]
 800e870:	e604      	b.n	800e47c <_dtoa_r+0x6e8>
 800e872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e874:	2b00      	cmp	r3, #0
 800e876:	dd03      	ble.n	800e880 <_dtoa_r+0xaec>
 800e878:	2d39      	cmp	r5, #57	@ 0x39
 800e87a:	d0ee      	beq.n	800e85a <_dtoa_r+0xac6>
 800e87c:	3501      	adds	r5, #1
 800e87e:	e7c1      	b.n	800e804 <_dtoa_r+0xa70>
 800e880:	9b06      	ldr	r3, [sp, #24]
 800e882:	9a06      	ldr	r2, [sp, #24]
 800e884:	701d      	strb	r5, [r3, #0]
 800e886:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e888:	4293      	cmp	r3, r2
 800e88a:	d02a      	beq.n	800e8e2 <_dtoa_r+0xb4e>
 800e88c:	2300      	movs	r3, #0
 800e88e:	220a      	movs	r2, #10
 800e890:	9905      	ldr	r1, [sp, #20]
 800e892:	9803      	ldr	r0, [sp, #12]
 800e894:	f000 f924 	bl	800eae0 <__multadd>
 800e898:	9b04      	ldr	r3, [sp, #16]
 800e89a:	9005      	str	r0, [sp, #20]
 800e89c:	42bb      	cmp	r3, r7
 800e89e:	d109      	bne.n	800e8b4 <_dtoa_r+0xb20>
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	220a      	movs	r2, #10
 800e8a4:	9904      	ldr	r1, [sp, #16]
 800e8a6:	9803      	ldr	r0, [sp, #12]
 800e8a8:	f000 f91a 	bl	800eae0 <__multadd>
 800e8ac:	9004      	str	r0, [sp, #16]
 800e8ae:	0007      	movs	r7, r0
 800e8b0:	9406      	str	r4, [sp, #24]
 800e8b2:	e778      	b.n	800e7a6 <_dtoa_r+0xa12>
 800e8b4:	9904      	ldr	r1, [sp, #16]
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	220a      	movs	r2, #10
 800e8ba:	9803      	ldr	r0, [sp, #12]
 800e8bc:	f000 f910 	bl	800eae0 <__multadd>
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	9004      	str	r0, [sp, #16]
 800e8c4:	220a      	movs	r2, #10
 800e8c6:	0039      	movs	r1, r7
 800e8c8:	9803      	ldr	r0, [sp, #12]
 800e8ca:	f000 f909 	bl	800eae0 <__multadd>
 800e8ce:	e7ee      	b.n	800e8ae <_dtoa_r+0xb1a>
 800e8d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e8d2:	2401      	movs	r4, #1
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	dd00      	ble.n	800e8da <_dtoa_r+0xb46>
 800e8d8:	001c      	movs	r4, r3
 800e8da:	9b08      	ldr	r3, [sp, #32]
 800e8dc:	191c      	adds	r4, r3, r4
 800e8de:	2300      	movs	r3, #0
 800e8e0:	9304      	str	r3, [sp, #16]
 800e8e2:	9905      	ldr	r1, [sp, #20]
 800e8e4:	2201      	movs	r2, #1
 800e8e6:	9803      	ldr	r0, [sp, #12]
 800e8e8:	f000 fab4 	bl	800ee54 <__lshift>
 800e8ec:	0031      	movs	r1, r6
 800e8ee:	9005      	str	r0, [sp, #20]
 800e8f0:	f000 fb1c 	bl	800ef2c <__mcmp>
 800e8f4:	2800      	cmp	r0, #0
 800e8f6:	dcb3      	bgt.n	800e860 <_dtoa_r+0xacc>
 800e8f8:	d101      	bne.n	800e8fe <_dtoa_r+0xb6a>
 800e8fa:	07ed      	lsls	r5, r5, #31
 800e8fc:	d4b0      	bmi.n	800e860 <_dtoa_r+0xacc>
 800e8fe:	0023      	movs	r3, r4
 800e900:	001c      	movs	r4, r3
 800e902:	3b01      	subs	r3, #1
 800e904:	781a      	ldrb	r2, [r3, #0]
 800e906:	2a30      	cmp	r2, #48	@ 0x30
 800e908:	d0fa      	beq.n	800e900 <_dtoa_r+0xb6c>
 800e90a:	e5b7      	b.n	800e47c <_dtoa_r+0x6e8>
 800e90c:	9a08      	ldr	r2, [sp, #32]
 800e90e:	429a      	cmp	r2, r3
 800e910:	d1a7      	bne.n	800e862 <_dtoa_r+0xace>
 800e912:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e914:	3301      	adds	r3, #1
 800e916:	930c      	str	r3, [sp, #48]	@ 0x30
 800e918:	2331      	movs	r3, #49	@ 0x31
 800e91a:	7013      	strb	r3, [r2, #0]
 800e91c:	e5ae      	b.n	800e47c <_dtoa_r+0x6e8>
 800e91e:	4b15      	ldr	r3, [pc, #84]	@ (800e974 <_dtoa_r+0xbe0>)
 800e920:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800e922:	9308      	str	r3, [sp, #32]
 800e924:	4b14      	ldr	r3, [pc, #80]	@ (800e978 <_dtoa_r+0xbe4>)
 800e926:	2a00      	cmp	r2, #0
 800e928:	d001      	beq.n	800e92e <_dtoa_r+0xb9a>
 800e92a:	f7ff fa7b 	bl	800de24 <_dtoa_r+0x90>
 800e92e:	f7ff fa7b 	bl	800de28 <_dtoa_r+0x94>
 800e932:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e934:	2b01      	cmp	r3, #1
 800e936:	dc00      	bgt.n	800e93a <_dtoa_r+0xba6>
 800e938:	e648      	b.n	800e5cc <_dtoa_r+0x838>
 800e93a:	2001      	movs	r0, #1
 800e93c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800e93e:	e665      	b.n	800e60c <_dtoa_r+0x878>
 800e940:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e942:	2b00      	cmp	r3, #0
 800e944:	dc00      	bgt.n	800e948 <_dtoa_r+0xbb4>
 800e946:	e6d6      	b.n	800e6f6 <_dtoa_r+0x962>
 800e948:	2400      	movs	r4, #0
 800e94a:	0031      	movs	r1, r6
 800e94c:	9805      	ldr	r0, [sp, #20]
 800e94e:	f7ff f993 	bl	800dc78 <quorem>
 800e952:	9b08      	ldr	r3, [sp, #32]
 800e954:	3030      	adds	r0, #48	@ 0x30
 800e956:	5518      	strb	r0, [r3, r4]
 800e958:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e95a:	3401      	adds	r4, #1
 800e95c:	0005      	movs	r5, r0
 800e95e:	429c      	cmp	r4, r3
 800e960:	dab6      	bge.n	800e8d0 <_dtoa_r+0xb3c>
 800e962:	2300      	movs	r3, #0
 800e964:	220a      	movs	r2, #10
 800e966:	9905      	ldr	r1, [sp, #20]
 800e968:	9803      	ldr	r0, [sp, #12]
 800e96a:	f000 f8b9 	bl	800eae0 <__multadd>
 800e96e:	9005      	str	r0, [sp, #20]
 800e970:	e7eb      	b.n	800e94a <_dtoa_r+0xbb6>
 800e972:	46c0      	nop			@ (mov r8, r8)
 800e974:	0801b404 	.word	0x0801b404
 800e978:	0801b40c 	.word	0x0801b40c

0800e97c <_free_r>:
 800e97c:	b570      	push	{r4, r5, r6, lr}
 800e97e:	0005      	movs	r5, r0
 800e980:	1e0c      	subs	r4, r1, #0
 800e982:	d010      	beq.n	800e9a6 <_free_r+0x2a>
 800e984:	3c04      	subs	r4, #4
 800e986:	6823      	ldr	r3, [r4, #0]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	da00      	bge.n	800e98e <_free_r+0x12>
 800e98c:	18e4      	adds	r4, r4, r3
 800e98e:	0028      	movs	r0, r5
 800e990:	f7fe fb26 	bl	800cfe0 <__malloc_lock>
 800e994:	4a1d      	ldr	r2, [pc, #116]	@ (800ea0c <_free_r+0x90>)
 800e996:	6813      	ldr	r3, [r2, #0]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d105      	bne.n	800e9a8 <_free_r+0x2c>
 800e99c:	6063      	str	r3, [r4, #4]
 800e99e:	6014      	str	r4, [r2, #0]
 800e9a0:	0028      	movs	r0, r5
 800e9a2:	f7fe fb25 	bl	800cff0 <__malloc_unlock>
 800e9a6:	bd70      	pop	{r4, r5, r6, pc}
 800e9a8:	42a3      	cmp	r3, r4
 800e9aa:	d908      	bls.n	800e9be <_free_r+0x42>
 800e9ac:	6820      	ldr	r0, [r4, #0]
 800e9ae:	1821      	adds	r1, r4, r0
 800e9b0:	428b      	cmp	r3, r1
 800e9b2:	d1f3      	bne.n	800e99c <_free_r+0x20>
 800e9b4:	6819      	ldr	r1, [r3, #0]
 800e9b6:	685b      	ldr	r3, [r3, #4]
 800e9b8:	1809      	adds	r1, r1, r0
 800e9ba:	6021      	str	r1, [r4, #0]
 800e9bc:	e7ee      	b.n	800e99c <_free_r+0x20>
 800e9be:	001a      	movs	r2, r3
 800e9c0:	685b      	ldr	r3, [r3, #4]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d001      	beq.n	800e9ca <_free_r+0x4e>
 800e9c6:	42a3      	cmp	r3, r4
 800e9c8:	d9f9      	bls.n	800e9be <_free_r+0x42>
 800e9ca:	6811      	ldr	r1, [r2, #0]
 800e9cc:	1850      	adds	r0, r2, r1
 800e9ce:	42a0      	cmp	r0, r4
 800e9d0:	d10b      	bne.n	800e9ea <_free_r+0x6e>
 800e9d2:	6820      	ldr	r0, [r4, #0]
 800e9d4:	1809      	adds	r1, r1, r0
 800e9d6:	1850      	adds	r0, r2, r1
 800e9d8:	6011      	str	r1, [r2, #0]
 800e9da:	4283      	cmp	r3, r0
 800e9dc:	d1e0      	bne.n	800e9a0 <_free_r+0x24>
 800e9de:	6818      	ldr	r0, [r3, #0]
 800e9e0:	685b      	ldr	r3, [r3, #4]
 800e9e2:	1841      	adds	r1, r0, r1
 800e9e4:	6011      	str	r1, [r2, #0]
 800e9e6:	6053      	str	r3, [r2, #4]
 800e9e8:	e7da      	b.n	800e9a0 <_free_r+0x24>
 800e9ea:	42a0      	cmp	r0, r4
 800e9ec:	d902      	bls.n	800e9f4 <_free_r+0x78>
 800e9ee:	230c      	movs	r3, #12
 800e9f0:	602b      	str	r3, [r5, #0]
 800e9f2:	e7d5      	b.n	800e9a0 <_free_r+0x24>
 800e9f4:	6820      	ldr	r0, [r4, #0]
 800e9f6:	1821      	adds	r1, r4, r0
 800e9f8:	428b      	cmp	r3, r1
 800e9fa:	d103      	bne.n	800ea04 <_free_r+0x88>
 800e9fc:	6819      	ldr	r1, [r3, #0]
 800e9fe:	685b      	ldr	r3, [r3, #4]
 800ea00:	1809      	adds	r1, r1, r0
 800ea02:	6021      	str	r1, [r4, #0]
 800ea04:	6063      	str	r3, [r4, #4]
 800ea06:	6054      	str	r4, [r2, #4]
 800ea08:	e7ca      	b.n	800e9a0 <_free_r+0x24>
 800ea0a:	46c0      	nop			@ (mov r8, r8)
 800ea0c:	20000600 	.word	0x20000600

0800ea10 <_Balloc>:
 800ea10:	b570      	push	{r4, r5, r6, lr}
 800ea12:	69c5      	ldr	r5, [r0, #28]
 800ea14:	0006      	movs	r6, r0
 800ea16:	000c      	movs	r4, r1
 800ea18:	2d00      	cmp	r5, #0
 800ea1a:	d10e      	bne.n	800ea3a <_Balloc+0x2a>
 800ea1c:	2010      	movs	r0, #16
 800ea1e:	f7fe fa33 	bl	800ce88 <malloc>
 800ea22:	1e02      	subs	r2, r0, #0
 800ea24:	61f0      	str	r0, [r6, #28]
 800ea26:	d104      	bne.n	800ea32 <_Balloc+0x22>
 800ea28:	216b      	movs	r1, #107	@ 0x6b
 800ea2a:	4b19      	ldr	r3, [pc, #100]	@ (800ea90 <_Balloc+0x80>)
 800ea2c:	4819      	ldr	r0, [pc, #100]	@ (800ea94 <_Balloc+0x84>)
 800ea2e:	f000 fe33 	bl	800f698 <__assert_func>
 800ea32:	6045      	str	r5, [r0, #4]
 800ea34:	6085      	str	r5, [r0, #8]
 800ea36:	6005      	str	r5, [r0, #0]
 800ea38:	60c5      	str	r5, [r0, #12]
 800ea3a:	69f5      	ldr	r5, [r6, #28]
 800ea3c:	68eb      	ldr	r3, [r5, #12]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d013      	beq.n	800ea6a <_Balloc+0x5a>
 800ea42:	69f3      	ldr	r3, [r6, #28]
 800ea44:	00a2      	lsls	r2, r4, #2
 800ea46:	68db      	ldr	r3, [r3, #12]
 800ea48:	189b      	adds	r3, r3, r2
 800ea4a:	6818      	ldr	r0, [r3, #0]
 800ea4c:	2800      	cmp	r0, #0
 800ea4e:	d118      	bne.n	800ea82 <_Balloc+0x72>
 800ea50:	2101      	movs	r1, #1
 800ea52:	000d      	movs	r5, r1
 800ea54:	40a5      	lsls	r5, r4
 800ea56:	1d6a      	adds	r2, r5, #5
 800ea58:	0030      	movs	r0, r6
 800ea5a:	0092      	lsls	r2, r2, #2
 800ea5c:	f000 fe3a 	bl	800f6d4 <_calloc_r>
 800ea60:	2800      	cmp	r0, #0
 800ea62:	d00c      	beq.n	800ea7e <_Balloc+0x6e>
 800ea64:	6044      	str	r4, [r0, #4]
 800ea66:	6085      	str	r5, [r0, #8]
 800ea68:	e00d      	b.n	800ea86 <_Balloc+0x76>
 800ea6a:	2221      	movs	r2, #33	@ 0x21
 800ea6c:	2104      	movs	r1, #4
 800ea6e:	0030      	movs	r0, r6
 800ea70:	f000 fe30 	bl	800f6d4 <_calloc_r>
 800ea74:	69f3      	ldr	r3, [r6, #28]
 800ea76:	60e8      	str	r0, [r5, #12]
 800ea78:	68db      	ldr	r3, [r3, #12]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d1e1      	bne.n	800ea42 <_Balloc+0x32>
 800ea7e:	2000      	movs	r0, #0
 800ea80:	bd70      	pop	{r4, r5, r6, pc}
 800ea82:	6802      	ldr	r2, [r0, #0]
 800ea84:	601a      	str	r2, [r3, #0]
 800ea86:	2300      	movs	r3, #0
 800ea88:	6103      	str	r3, [r0, #16]
 800ea8a:	60c3      	str	r3, [r0, #12]
 800ea8c:	e7f8      	b.n	800ea80 <_Balloc+0x70>
 800ea8e:	46c0      	nop			@ (mov r8, r8)
 800ea90:	0801b411 	.word	0x0801b411
 800ea94:	0801b491 	.word	0x0801b491

0800ea98 <_Bfree>:
 800ea98:	b570      	push	{r4, r5, r6, lr}
 800ea9a:	69c6      	ldr	r6, [r0, #28]
 800ea9c:	0005      	movs	r5, r0
 800ea9e:	000c      	movs	r4, r1
 800eaa0:	2e00      	cmp	r6, #0
 800eaa2:	d10e      	bne.n	800eac2 <_Bfree+0x2a>
 800eaa4:	2010      	movs	r0, #16
 800eaa6:	f7fe f9ef 	bl	800ce88 <malloc>
 800eaaa:	1e02      	subs	r2, r0, #0
 800eaac:	61e8      	str	r0, [r5, #28]
 800eaae:	d104      	bne.n	800eaba <_Bfree+0x22>
 800eab0:	218f      	movs	r1, #143	@ 0x8f
 800eab2:	4b09      	ldr	r3, [pc, #36]	@ (800ead8 <_Bfree+0x40>)
 800eab4:	4809      	ldr	r0, [pc, #36]	@ (800eadc <_Bfree+0x44>)
 800eab6:	f000 fdef 	bl	800f698 <__assert_func>
 800eaba:	6046      	str	r6, [r0, #4]
 800eabc:	6086      	str	r6, [r0, #8]
 800eabe:	6006      	str	r6, [r0, #0]
 800eac0:	60c6      	str	r6, [r0, #12]
 800eac2:	2c00      	cmp	r4, #0
 800eac4:	d007      	beq.n	800ead6 <_Bfree+0x3e>
 800eac6:	69eb      	ldr	r3, [r5, #28]
 800eac8:	6862      	ldr	r2, [r4, #4]
 800eaca:	68db      	ldr	r3, [r3, #12]
 800eacc:	0092      	lsls	r2, r2, #2
 800eace:	189b      	adds	r3, r3, r2
 800ead0:	681a      	ldr	r2, [r3, #0]
 800ead2:	6022      	str	r2, [r4, #0]
 800ead4:	601c      	str	r4, [r3, #0]
 800ead6:	bd70      	pop	{r4, r5, r6, pc}
 800ead8:	0801b411 	.word	0x0801b411
 800eadc:	0801b491 	.word	0x0801b491

0800eae0 <__multadd>:
 800eae0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eae2:	000f      	movs	r7, r1
 800eae4:	9001      	str	r0, [sp, #4]
 800eae6:	000c      	movs	r4, r1
 800eae8:	001e      	movs	r6, r3
 800eaea:	2000      	movs	r0, #0
 800eaec:	690d      	ldr	r5, [r1, #16]
 800eaee:	3714      	adds	r7, #20
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	3001      	adds	r0, #1
 800eaf4:	b299      	uxth	r1, r3
 800eaf6:	4351      	muls	r1, r2
 800eaf8:	0c1b      	lsrs	r3, r3, #16
 800eafa:	4353      	muls	r3, r2
 800eafc:	1989      	adds	r1, r1, r6
 800eafe:	0c0e      	lsrs	r6, r1, #16
 800eb00:	199b      	adds	r3, r3, r6
 800eb02:	0c1e      	lsrs	r6, r3, #16
 800eb04:	b289      	uxth	r1, r1
 800eb06:	041b      	lsls	r3, r3, #16
 800eb08:	185b      	adds	r3, r3, r1
 800eb0a:	c708      	stmia	r7!, {r3}
 800eb0c:	4285      	cmp	r5, r0
 800eb0e:	dcef      	bgt.n	800eaf0 <__multadd+0x10>
 800eb10:	2e00      	cmp	r6, #0
 800eb12:	d022      	beq.n	800eb5a <__multadd+0x7a>
 800eb14:	68a3      	ldr	r3, [r4, #8]
 800eb16:	42ab      	cmp	r3, r5
 800eb18:	dc19      	bgt.n	800eb4e <__multadd+0x6e>
 800eb1a:	6861      	ldr	r1, [r4, #4]
 800eb1c:	9801      	ldr	r0, [sp, #4]
 800eb1e:	3101      	adds	r1, #1
 800eb20:	f7ff ff76 	bl	800ea10 <_Balloc>
 800eb24:	1e07      	subs	r7, r0, #0
 800eb26:	d105      	bne.n	800eb34 <__multadd+0x54>
 800eb28:	003a      	movs	r2, r7
 800eb2a:	21ba      	movs	r1, #186	@ 0xba
 800eb2c:	4b0c      	ldr	r3, [pc, #48]	@ (800eb60 <__multadd+0x80>)
 800eb2e:	480d      	ldr	r0, [pc, #52]	@ (800eb64 <__multadd+0x84>)
 800eb30:	f000 fdb2 	bl	800f698 <__assert_func>
 800eb34:	0021      	movs	r1, r4
 800eb36:	6922      	ldr	r2, [r4, #16]
 800eb38:	310c      	adds	r1, #12
 800eb3a:	3202      	adds	r2, #2
 800eb3c:	0092      	lsls	r2, r2, #2
 800eb3e:	300c      	adds	r0, #12
 800eb40:	f000 fda0 	bl	800f684 <memcpy>
 800eb44:	0021      	movs	r1, r4
 800eb46:	9801      	ldr	r0, [sp, #4]
 800eb48:	f7ff ffa6 	bl	800ea98 <_Bfree>
 800eb4c:	003c      	movs	r4, r7
 800eb4e:	1d2b      	adds	r3, r5, #4
 800eb50:	009b      	lsls	r3, r3, #2
 800eb52:	18e3      	adds	r3, r4, r3
 800eb54:	3501      	adds	r5, #1
 800eb56:	605e      	str	r6, [r3, #4]
 800eb58:	6125      	str	r5, [r4, #16]
 800eb5a:	0020      	movs	r0, r4
 800eb5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800eb5e:	46c0      	nop			@ (mov r8, r8)
 800eb60:	0801b480 	.word	0x0801b480
 800eb64:	0801b491 	.word	0x0801b491

0800eb68 <__hi0bits>:
 800eb68:	2280      	movs	r2, #128	@ 0x80
 800eb6a:	0003      	movs	r3, r0
 800eb6c:	0252      	lsls	r2, r2, #9
 800eb6e:	2000      	movs	r0, #0
 800eb70:	4293      	cmp	r3, r2
 800eb72:	d201      	bcs.n	800eb78 <__hi0bits+0x10>
 800eb74:	041b      	lsls	r3, r3, #16
 800eb76:	3010      	adds	r0, #16
 800eb78:	2280      	movs	r2, #128	@ 0x80
 800eb7a:	0452      	lsls	r2, r2, #17
 800eb7c:	4293      	cmp	r3, r2
 800eb7e:	d201      	bcs.n	800eb84 <__hi0bits+0x1c>
 800eb80:	3008      	adds	r0, #8
 800eb82:	021b      	lsls	r3, r3, #8
 800eb84:	2280      	movs	r2, #128	@ 0x80
 800eb86:	0552      	lsls	r2, r2, #21
 800eb88:	4293      	cmp	r3, r2
 800eb8a:	d201      	bcs.n	800eb90 <__hi0bits+0x28>
 800eb8c:	3004      	adds	r0, #4
 800eb8e:	011b      	lsls	r3, r3, #4
 800eb90:	2280      	movs	r2, #128	@ 0x80
 800eb92:	05d2      	lsls	r2, r2, #23
 800eb94:	4293      	cmp	r3, r2
 800eb96:	d201      	bcs.n	800eb9c <__hi0bits+0x34>
 800eb98:	3002      	adds	r0, #2
 800eb9a:	009b      	lsls	r3, r3, #2
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	db03      	blt.n	800eba8 <__hi0bits+0x40>
 800eba0:	3001      	adds	r0, #1
 800eba2:	4213      	tst	r3, r2
 800eba4:	d100      	bne.n	800eba8 <__hi0bits+0x40>
 800eba6:	2020      	movs	r0, #32
 800eba8:	4770      	bx	lr

0800ebaa <__lo0bits>:
 800ebaa:	6803      	ldr	r3, [r0, #0]
 800ebac:	0001      	movs	r1, r0
 800ebae:	2207      	movs	r2, #7
 800ebb0:	0018      	movs	r0, r3
 800ebb2:	4010      	ands	r0, r2
 800ebb4:	4213      	tst	r3, r2
 800ebb6:	d00d      	beq.n	800ebd4 <__lo0bits+0x2a>
 800ebb8:	3a06      	subs	r2, #6
 800ebba:	2000      	movs	r0, #0
 800ebbc:	4213      	tst	r3, r2
 800ebbe:	d105      	bne.n	800ebcc <__lo0bits+0x22>
 800ebc0:	3002      	adds	r0, #2
 800ebc2:	4203      	tst	r3, r0
 800ebc4:	d003      	beq.n	800ebce <__lo0bits+0x24>
 800ebc6:	40d3      	lsrs	r3, r2
 800ebc8:	0010      	movs	r0, r2
 800ebca:	600b      	str	r3, [r1, #0]
 800ebcc:	4770      	bx	lr
 800ebce:	089b      	lsrs	r3, r3, #2
 800ebd0:	600b      	str	r3, [r1, #0]
 800ebd2:	e7fb      	b.n	800ebcc <__lo0bits+0x22>
 800ebd4:	b29a      	uxth	r2, r3
 800ebd6:	2a00      	cmp	r2, #0
 800ebd8:	d101      	bne.n	800ebde <__lo0bits+0x34>
 800ebda:	2010      	movs	r0, #16
 800ebdc:	0c1b      	lsrs	r3, r3, #16
 800ebde:	b2da      	uxtb	r2, r3
 800ebe0:	2a00      	cmp	r2, #0
 800ebe2:	d101      	bne.n	800ebe8 <__lo0bits+0x3e>
 800ebe4:	3008      	adds	r0, #8
 800ebe6:	0a1b      	lsrs	r3, r3, #8
 800ebe8:	071a      	lsls	r2, r3, #28
 800ebea:	d101      	bne.n	800ebf0 <__lo0bits+0x46>
 800ebec:	3004      	adds	r0, #4
 800ebee:	091b      	lsrs	r3, r3, #4
 800ebf0:	079a      	lsls	r2, r3, #30
 800ebf2:	d101      	bne.n	800ebf8 <__lo0bits+0x4e>
 800ebf4:	3002      	adds	r0, #2
 800ebf6:	089b      	lsrs	r3, r3, #2
 800ebf8:	07da      	lsls	r2, r3, #31
 800ebfa:	d4e9      	bmi.n	800ebd0 <__lo0bits+0x26>
 800ebfc:	3001      	adds	r0, #1
 800ebfe:	085b      	lsrs	r3, r3, #1
 800ec00:	d1e6      	bne.n	800ebd0 <__lo0bits+0x26>
 800ec02:	2020      	movs	r0, #32
 800ec04:	e7e2      	b.n	800ebcc <__lo0bits+0x22>
	...

0800ec08 <__i2b>:
 800ec08:	b510      	push	{r4, lr}
 800ec0a:	000c      	movs	r4, r1
 800ec0c:	2101      	movs	r1, #1
 800ec0e:	f7ff feff 	bl	800ea10 <_Balloc>
 800ec12:	2800      	cmp	r0, #0
 800ec14:	d107      	bne.n	800ec26 <__i2b+0x1e>
 800ec16:	2146      	movs	r1, #70	@ 0x46
 800ec18:	4c05      	ldr	r4, [pc, #20]	@ (800ec30 <__i2b+0x28>)
 800ec1a:	0002      	movs	r2, r0
 800ec1c:	4b05      	ldr	r3, [pc, #20]	@ (800ec34 <__i2b+0x2c>)
 800ec1e:	0020      	movs	r0, r4
 800ec20:	31ff      	adds	r1, #255	@ 0xff
 800ec22:	f000 fd39 	bl	800f698 <__assert_func>
 800ec26:	2301      	movs	r3, #1
 800ec28:	6144      	str	r4, [r0, #20]
 800ec2a:	6103      	str	r3, [r0, #16]
 800ec2c:	bd10      	pop	{r4, pc}
 800ec2e:	46c0      	nop			@ (mov r8, r8)
 800ec30:	0801b491 	.word	0x0801b491
 800ec34:	0801b480 	.word	0x0801b480

0800ec38 <__multiply>:
 800ec38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec3a:	0014      	movs	r4, r2
 800ec3c:	690a      	ldr	r2, [r1, #16]
 800ec3e:	6923      	ldr	r3, [r4, #16]
 800ec40:	000d      	movs	r5, r1
 800ec42:	b08b      	sub	sp, #44	@ 0x2c
 800ec44:	429a      	cmp	r2, r3
 800ec46:	db02      	blt.n	800ec4e <__multiply+0x16>
 800ec48:	0023      	movs	r3, r4
 800ec4a:	000c      	movs	r4, r1
 800ec4c:	001d      	movs	r5, r3
 800ec4e:	6927      	ldr	r7, [r4, #16]
 800ec50:	692e      	ldr	r6, [r5, #16]
 800ec52:	6861      	ldr	r1, [r4, #4]
 800ec54:	19bb      	adds	r3, r7, r6
 800ec56:	9303      	str	r3, [sp, #12]
 800ec58:	68a3      	ldr	r3, [r4, #8]
 800ec5a:	19ba      	adds	r2, r7, r6
 800ec5c:	4293      	cmp	r3, r2
 800ec5e:	da00      	bge.n	800ec62 <__multiply+0x2a>
 800ec60:	3101      	adds	r1, #1
 800ec62:	f7ff fed5 	bl	800ea10 <_Balloc>
 800ec66:	9002      	str	r0, [sp, #8]
 800ec68:	2800      	cmp	r0, #0
 800ec6a:	d106      	bne.n	800ec7a <__multiply+0x42>
 800ec6c:	21b1      	movs	r1, #177	@ 0xb1
 800ec6e:	4b49      	ldr	r3, [pc, #292]	@ (800ed94 <__multiply+0x15c>)
 800ec70:	4849      	ldr	r0, [pc, #292]	@ (800ed98 <__multiply+0x160>)
 800ec72:	9a02      	ldr	r2, [sp, #8]
 800ec74:	0049      	lsls	r1, r1, #1
 800ec76:	f000 fd0f 	bl	800f698 <__assert_func>
 800ec7a:	9b02      	ldr	r3, [sp, #8]
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	3314      	adds	r3, #20
 800ec80:	469c      	mov	ip, r3
 800ec82:	19bb      	adds	r3, r7, r6
 800ec84:	009b      	lsls	r3, r3, #2
 800ec86:	4463      	add	r3, ip
 800ec88:	9304      	str	r3, [sp, #16]
 800ec8a:	4663      	mov	r3, ip
 800ec8c:	9904      	ldr	r1, [sp, #16]
 800ec8e:	428b      	cmp	r3, r1
 800ec90:	d32a      	bcc.n	800ece8 <__multiply+0xb0>
 800ec92:	0023      	movs	r3, r4
 800ec94:	00bf      	lsls	r7, r7, #2
 800ec96:	3314      	adds	r3, #20
 800ec98:	3514      	adds	r5, #20
 800ec9a:	9308      	str	r3, [sp, #32]
 800ec9c:	00b6      	lsls	r6, r6, #2
 800ec9e:	19db      	adds	r3, r3, r7
 800eca0:	9305      	str	r3, [sp, #20]
 800eca2:	19ab      	adds	r3, r5, r6
 800eca4:	9309      	str	r3, [sp, #36]	@ 0x24
 800eca6:	2304      	movs	r3, #4
 800eca8:	9306      	str	r3, [sp, #24]
 800ecaa:	0023      	movs	r3, r4
 800ecac:	9a05      	ldr	r2, [sp, #20]
 800ecae:	3315      	adds	r3, #21
 800ecb0:	9501      	str	r5, [sp, #4]
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	d305      	bcc.n	800ecc2 <__multiply+0x8a>
 800ecb6:	1b13      	subs	r3, r2, r4
 800ecb8:	3b15      	subs	r3, #21
 800ecba:	089b      	lsrs	r3, r3, #2
 800ecbc:	3301      	adds	r3, #1
 800ecbe:	009b      	lsls	r3, r3, #2
 800ecc0:	9306      	str	r3, [sp, #24]
 800ecc2:	9b01      	ldr	r3, [sp, #4]
 800ecc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ecc6:	4293      	cmp	r3, r2
 800ecc8:	d310      	bcc.n	800ecec <__multiply+0xb4>
 800ecca:	9b03      	ldr	r3, [sp, #12]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	dd05      	ble.n	800ecdc <__multiply+0xa4>
 800ecd0:	9b04      	ldr	r3, [sp, #16]
 800ecd2:	3b04      	subs	r3, #4
 800ecd4:	9304      	str	r3, [sp, #16]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d056      	beq.n	800ed8a <__multiply+0x152>
 800ecdc:	9b02      	ldr	r3, [sp, #8]
 800ecde:	9a03      	ldr	r2, [sp, #12]
 800ece0:	0018      	movs	r0, r3
 800ece2:	611a      	str	r2, [r3, #16]
 800ece4:	b00b      	add	sp, #44	@ 0x2c
 800ece6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ece8:	c304      	stmia	r3!, {r2}
 800ecea:	e7cf      	b.n	800ec8c <__multiply+0x54>
 800ecec:	9b01      	ldr	r3, [sp, #4]
 800ecee:	6818      	ldr	r0, [r3, #0]
 800ecf0:	b280      	uxth	r0, r0
 800ecf2:	2800      	cmp	r0, #0
 800ecf4:	d01e      	beq.n	800ed34 <__multiply+0xfc>
 800ecf6:	4667      	mov	r7, ip
 800ecf8:	2500      	movs	r5, #0
 800ecfa:	9e08      	ldr	r6, [sp, #32]
 800ecfc:	ce02      	ldmia	r6!, {r1}
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	9307      	str	r3, [sp, #28]
 800ed02:	b28b      	uxth	r3, r1
 800ed04:	4343      	muls	r3, r0
 800ed06:	001a      	movs	r2, r3
 800ed08:	466b      	mov	r3, sp
 800ed0a:	0c09      	lsrs	r1, r1, #16
 800ed0c:	8b9b      	ldrh	r3, [r3, #28]
 800ed0e:	4341      	muls	r1, r0
 800ed10:	18d3      	adds	r3, r2, r3
 800ed12:	9a07      	ldr	r2, [sp, #28]
 800ed14:	195b      	adds	r3, r3, r5
 800ed16:	0c12      	lsrs	r2, r2, #16
 800ed18:	1889      	adds	r1, r1, r2
 800ed1a:	0c1a      	lsrs	r2, r3, #16
 800ed1c:	188a      	adds	r2, r1, r2
 800ed1e:	b29b      	uxth	r3, r3
 800ed20:	0c15      	lsrs	r5, r2, #16
 800ed22:	0412      	lsls	r2, r2, #16
 800ed24:	431a      	orrs	r2, r3
 800ed26:	9b05      	ldr	r3, [sp, #20]
 800ed28:	c704      	stmia	r7!, {r2}
 800ed2a:	42b3      	cmp	r3, r6
 800ed2c:	d8e6      	bhi.n	800ecfc <__multiply+0xc4>
 800ed2e:	4663      	mov	r3, ip
 800ed30:	9a06      	ldr	r2, [sp, #24]
 800ed32:	509d      	str	r5, [r3, r2]
 800ed34:	9b01      	ldr	r3, [sp, #4]
 800ed36:	6818      	ldr	r0, [r3, #0]
 800ed38:	0c00      	lsrs	r0, r0, #16
 800ed3a:	d020      	beq.n	800ed7e <__multiply+0x146>
 800ed3c:	4663      	mov	r3, ip
 800ed3e:	0025      	movs	r5, r4
 800ed40:	4661      	mov	r1, ip
 800ed42:	2700      	movs	r7, #0
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	3514      	adds	r5, #20
 800ed48:	682a      	ldr	r2, [r5, #0]
 800ed4a:	680e      	ldr	r6, [r1, #0]
 800ed4c:	b292      	uxth	r2, r2
 800ed4e:	4342      	muls	r2, r0
 800ed50:	0c36      	lsrs	r6, r6, #16
 800ed52:	1992      	adds	r2, r2, r6
 800ed54:	19d2      	adds	r2, r2, r7
 800ed56:	0416      	lsls	r6, r2, #16
 800ed58:	b29b      	uxth	r3, r3
 800ed5a:	431e      	orrs	r6, r3
 800ed5c:	600e      	str	r6, [r1, #0]
 800ed5e:	cd40      	ldmia	r5!, {r6}
 800ed60:	684b      	ldr	r3, [r1, #4]
 800ed62:	0c36      	lsrs	r6, r6, #16
 800ed64:	4346      	muls	r6, r0
 800ed66:	b29b      	uxth	r3, r3
 800ed68:	0c12      	lsrs	r2, r2, #16
 800ed6a:	18f3      	adds	r3, r6, r3
 800ed6c:	189b      	adds	r3, r3, r2
 800ed6e:	9a05      	ldr	r2, [sp, #20]
 800ed70:	0c1f      	lsrs	r7, r3, #16
 800ed72:	3104      	adds	r1, #4
 800ed74:	42aa      	cmp	r2, r5
 800ed76:	d8e7      	bhi.n	800ed48 <__multiply+0x110>
 800ed78:	4662      	mov	r2, ip
 800ed7a:	9906      	ldr	r1, [sp, #24]
 800ed7c:	5053      	str	r3, [r2, r1]
 800ed7e:	9b01      	ldr	r3, [sp, #4]
 800ed80:	3304      	adds	r3, #4
 800ed82:	9301      	str	r3, [sp, #4]
 800ed84:	2304      	movs	r3, #4
 800ed86:	449c      	add	ip, r3
 800ed88:	e79b      	b.n	800ecc2 <__multiply+0x8a>
 800ed8a:	9b03      	ldr	r3, [sp, #12]
 800ed8c:	3b01      	subs	r3, #1
 800ed8e:	9303      	str	r3, [sp, #12]
 800ed90:	e79b      	b.n	800ecca <__multiply+0x92>
 800ed92:	46c0      	nop			@ (mov r8, r8)
 800ed94:	0801b480 	.word	0x0801b480
 800ed98:	0801b491 	.word	0x0801b491

0800ed9c <__pow5mult>:
 800ed9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed9e:	2303      	movs	r3, #3
 800eda0:	0015      	movs	r5, r2
 800eda2:	0007      	movs	r7, r0
 800eda4:	000e      	movs	r6, r1
 800eda6:	401a      	ands	r2, r3
 800eda8:	421d      	tst	r5, r3
 800edaa:	d008      	beq.n	800edbe <__pow5mult+0x22>
 800edac:	4925      	ldr	r1, [pc, #148]	@ (800ee44 <__pow5mult+0xa8>)
 800edae:	3a01      	subs	r2, #1
 800edb0:	0092      	lsls	r2, r2, #2
 800edb2:	5852      	ldr	r2, [r2, r1]
 800edb4:	2300      	movs	r3, #0
 800edb6:	0031      	movs	r1, r6
 800edb8:	f7ff fe92 	bl	800eae0 <__multadd>
 800edbc:	0006      	movs	r6, r0
 800edbe:	10ad      	asrs	r5, r5, #2
 800edc0:	d03d      	beq.n	800ee3e <__pow5mult+0xa2>
 800edc2:	69fc      	ldr	r4, [r7, #28]
 800edc4:	2c00      	cmp	r4, #0
 800edc6:	d10f      	bne.n	800ede8 <__pow5mult+0x4c>
 800edc8:	2010      	movs	r0, #16
 800edca:	f7fe f85d 	bl	800ce88 <malloc>
 800edce:	1e02      	subs	r2, r0, #0
 800edd0:	61f8      	str	r0, [r7, #28]
 800edd2:	d105      	bne.n	800ede0 <__pow5mult+0x44>
 800edd4:	21b4      	movs	r1, #180	@ 0xb4
 800edd6:	4b1c      	ldr	r3, [pc, #112]	@ (800ee48 <__pow5mult+0xac>)
 800edd8:	481c      	ldr	r0, [pc, #112]	@ (800ee4c <__pow5mult+0xb0>)
 800edda:	31ff      	adds	r1, #255	@ 0xff
 800eddc:	f000 fc5c 	bl	800f698 <__assert_func>
 800ede0:	6044      	str	r4, [r0, #4]
 800ede2:	6084      	str	r4, [r0, #8]
 800ede4:	6004      	str	r4, [r0, #0]
 800ede6:	60c4      	str	r4, [r0, #12]
 800ede8:	69fb      	ldr	r3, [r7, #28]
 800edea:	689c      	ldr	r4, [r3, #8]
 800edec:	9301      	str	r3, [sp, #4]
 800edee:	2c00      	cmp	r4, #0
 800edf0:	d108      	bne.n	800ee04 <__pow5mult+0x68>
 800edf2:	0038      	movs	r0, r7
 800edf4:	4916      	ldr	r1, [pc, #88]	@ (800ee50 <__pow5mult+0xb4>)
 800edf6:	f7ff ff07 	bl	800ec08 <__i2b>
 800edfa:	9b01      	ldr	r3, [sp, #4]
 800edfc:	0004      	movs	r4, r0
 800edfe:	6098      	str	r0, [r3, #8]
 800ee00:	2300      	movs	r3, #0
 800ee02:	6003      	str	r3, [r0, #0]
 800ee04:	2301      	movs	r3, #1
 800ee06:	421d      	tst	r5, r3
 800ee08:	d00a      	beq.n	800ee20 <__pow5mult+0x84>
 800ee0a:	0031      	movs	r1, r6
 800ee0c:	0022      	movs	r2, r4
 800ee0e:	0038      	movs	r0, r7
 800ee10:	f7ff ff12 	bl	800ec38 <__multiply>
 800ee14:	0031      	movs	r1, r6
 800ee16:	9001      	str	r0, [sp, #4]
 800ee18:	0038      	movs	r0, r7
 800ee1a:	f7ff fe3d 	bl	800ea98 <_Bfree>
 800ee1e:	9e01      	ldr	r6, [sp, #4]
 800ee20:	106d      	asrs	r5, r5, #1
 800ee22:	d00c      	beq.n	800ee3e <__pow5mult+0xa2>
 800ee24:	6820      	ldr	r0, [r4, #0]
 800ee26:	2800      	cmp	r0, #0
 800ee28:	d107      	bne.n	800ee3a <__pow5mult+0x9e>
 800ee2a:	0022      	movs	r2, r4
 800ee2c:	0021      	movs	r1, r4
 800ee2e:	0038      	movs	r0, r7
 800ee30:	f7ff ff02 	bl	800ec38 <__multiply>
 800ee34:	2300      	movs	r3, #0
 800ee36:	6020      	str	r0, [r4, #0]
 800ee38:	6003      	str	r3, [r0, #0]
 800ee3a:	0004      	movs	r4, r0
 800ee3c:	e7e2      	b.n	800ee04 <__pow5mult+0x68>
 800ee3e:	0030      	movs	r0, r6
 800ee40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ee42:	46c0      	nop			@ (mov r8, r8)
 800ee44:	0801b4ec 	.word	0x0801b4ec
 800ee48:	0801b411 	.word	0x0801b411
 800ee4c:	0801b491 	.word	0x0801b491
 800ee50:	00000271 	.word	0x00000271

0800ee54 <__lshift>:
 800ee54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee56:	000c      	movs	r4, r1
 800ee58:	0016      	movs	r6, r2
 800ee5a:	6923      	ldr	r3, [r4, #16]
 800ee5c:	1157      	asrs	r7, r2, #5
 800ee5e:	b085      	sub	sp, #20
 800ee60:	18fb      	adds	r3, r7, r3
 800ee62:	9301      	str	r3, [sp, #4]
 800ee64:	3301      	adds	r3, #1
 800ee66:	9300      	str	r3, [sp, #0]
 800ee68:	6849      	ldr	r1, [r1, #4]
 800ee6a:	68a3      	ldr	r3, [r4, #8]
 800ee6c:	9002      	str	r0, [sp, #8]
 800ee6e:	9a00      	ldr	r2, [sp, #0]
 800ee70:	4293      	cmp	r3, r2
 800ee72:	db10      	blt.n	800ee96 <__lshift+0x42>
 800ee74:	9802      	ldr	r0, [sp, #8]
 800ee76:	f7ff fdcb 	bl	800ea10 <_Balloc>
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	0001      	movs	r1, r0
 800ee7e:	0005      	movs	r5, r0
 800ee80:	001a      	movs	r2, r3
 800ee82:	3114      	adds	r1, #20
 800ee84:	4298      	cmp	r0, r3
 800ee86:	d10c      	bne.n	800eea2 <__lshift+0x4e>
 800ee88:	21ef      	movs	r1, #239	@ 0xef
 800ee8a:	002a      	movs	r2, r5
 800ee8c:	4b25      	ldr	r3, [pc, #148]	@ (800ef24 <__lshift+0xd0>)
 800ee8e:	4826      	ldr	r0, [pc, #152]	@ (800ef28 <__lshift+0xd4>)
 800ee90:	0049      	lsls	r1, r1, #1
 800ee92:	f000 fc01 	bl	800f698 <__assert_func>
 800ee96:	3101      	adds	r1, #1
 800ee98:	005b      	lsls	r3, r3, #1
 800ee9a:	e7e8      	b.n	800ee6e <__lshift+0x1a>
 800ee9c:	0098      	lsls	r0, r3, #2
 800ee9e:	500a      	str	r2, [r1, r0]
 800eea0:	3301      	adds	r3, #1
 800eea2:	42bb      	cmp	r3, r7
 800eea4:	dbfa      	blt.n	800ee9c <__lshift+0x48>
 800eea6:	43fb      	mvns	r3, r7
 800eea8:	17db      	asrs	r3, r3, #31
 800eeaa:	401f      	ands	r7, r3
 800eeac:	00bf      	lsls	r7, r7, #2
 800eeae:	0023      	movs	r3, r4
 800eeb0:	201f      	movs	r0, #31
 800eeb2:	19c9      	adds	r1, r1, r7
 800eeb4:	0037      	movs	r7, r6
 800eeb6:	6922      	ldr	r2, [r4, #16]
 800eeb8:	3314      	adds	r3, #20
 800eeba:	0092      	lsls	r2, r2, #2
 800eebc:	189a      	adds	r2, r3, r2
 800eebe:	4007      	ands	r7, r0
 800eec0:	4206      	tst	r6, r0
 800eec2:	d029      	beq.n	800ef18 <__lshift+0xc4>
 800eec4:	3001      	adds	r0, #1
 800eec6:	1bc0      	subs	r0, r0, r7
 800eec8:	9003      	str	r0, [sp, #12]
 800eeca:	468c      	mov	ip, r1
 800eecc:	2000      	movs	r0, #0
 800eece:	681e      	ldr	r6, [r3, #0]
 800eed0:	40be      	lsls	r6, r7
 800eed2:	4306      	orrs	r6, r0
 800eed4:	4660      	mov	r0, ip
 800eed6:	c040      	stmia	r0!, {r6}
 800eed8:	4684      	mov	ip, r0
 800eeda:	9e03      	ldr	r6, [sp, #12]
 800eedc:	cb01      	ldmia	r3!, {r0}
 800eede:	40f0      	lsrs	r0, r6
 800eee0:	429a      	cmp	r2, r3
 800eee2:	d8f4      	bhi.n	800eece <__lshift+0x7a>
 800eee4:	0026      	movs	r6, r4
 800eee6:	3615      	adds	r6, #21
 800eee8:	2304      	movs	r3, #4
 800eeea:	42b2      	cmp	r2, r6
 800eeec:	d304      	bcc.n	800eef8 <__lshift+0xa4>
 800eeee:	1b13      	subs	r3, r2, r4
 800eef0:	3b15      	subs	r3, #21
 800eef2:	089b      	lsrs	r3, r3, #2
 800eef4:	3301      	adds	r3, #1
 800eef6:	009b      	lsls	r3, r3, #2
 800eef8:	50c8      	str	r0, [r1, r3]
 800eefa:	2800      	cmp	r0, #0
 800eefc:	d002      	beq.n	800ef04 <__lshift+0xb0>
 800eefe:	9b01      	ldr	r3, [sp, #4]
 800ef00:	3302      	adds	r3, #2
 800ef02:	9300      	str	r3, [sp, #0]
 800ef04:	9b00      	ldr	r3, [sp, #0]
 800ef06:	9802      	ldr	r0, [sp, #8]
 800ef08:	3b01      	subs	r3, #1
 800ef0a:	0021      	movs	r1, r4
 800ef0c:	612b      	str	r3, [r5, #16]
 800ef0e:	f7ff fdc3 	bl	800ea98 <_Bfree>
 800ef12:	0028      	movs	r0, r5
 800ef14:	b005      	add	sp, #20
 800ef16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef18:	cb01      	ldmia	r3!, {r0}
 800ef1a:	c101      	stmia	r1!, {r0}
 800ef1c:	429a      	cmp	r2, r3
 800ef1e:	d8fb      	bhi.n	800ef18 <__lshift+0xc4>
 800ef20:	e7f0      	b.n	800ef04 <__lshift+0xb0>
 800ef22:	46c0      	nop			@ (mov r8, r8)
 800ef24:	0801b480 	.word	0x0801b480
 800ef28:	0801b491 	.word	0x0801b491

0800ef2c <__mcmp>:
 800ef2c:	b530      	push	{r4, r5, lr}
 800ef2e:	690b      	ldr	r3, [r1, #16]
 800ef30:	6904      	ldr	r4, [r0, #16]
 800ef32:	0002      	movs	r2, r0
 800ef34:	1ae0      	subs	r0, r4, r3
 800ef36:	429c      	cmp	r4, r3
 800ef38:	d10f      	bne.n	800ef5a <__mcmp+0x2e>
 800ef3a:	3214      	adds	r2, #20
 800ef3c:	009b      	lsls	r3, r3, #2
 800ef3e:	3114      	adds	r1, #20
 800ef40:	0014      	movs	r4, r2
 800ef42:	18c9      	adds	r1, r1, r3
 800ef44:	18d2      	adds	r2, r2, r3
 800ef46:	3a04      	subs	r2, #4
 800ef48:	3904      	subs	r1, #4
 800ef4a:	6815      	ldr	r5, [r2, #0]
 800ef4c:	680b      	ldr	r3, [r1, #0]
 800ef4e:	429d      	cmp	r5, r3
 800ef50:	d004      	beq.n	800ef5c <__mcmp+0x30>
 800ef52:	2001      	movs	r0, #1
 800ef54:	429d      	cmp	r5, r3
 800ef56:	d200      	bcs.n	800ef5a <__mcmp+0x2e>
 800ef58:	3802      	subs	r0, #2
 800ef5a:	bd30      	pop	{r4, r5, pc}
 800ef5c:	4294      	cmp	r4, r2
 800ef5e:	d3f2      	bcc.n	800ef46 <__mcmp+0x1a>
 800ef60:	e7fb      	b.n	800ef5a <__mcmp+0x2e>
	...

0800ef64 <__mdiff>:
 800ef64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef66:	000c      	movs	r4, r1
 800ef68:	b087      	sub	sp, #28
 800ef6a:	9000      	str	r0, [sp, #0]
 800ef6c:	0011      	movs	r1, r2
 800ef6e:	0020      	movs	r0, r4
 800ef70:	0017      	movs	r7, r2
 800ef72:	f7ff ffdb 	bl	800ef2c <__mcmp>
 800ef76:	1e05      	subs	r5, r0, #0
 800ef78:	d110      	bne.n	800ef9c <__mdiff+0x38>
 800ef7a:	0001      	movs	r1, r0
 800ef7c:	9800      	ldr	r0, [sp, #0]
 800ef7e:	f7ff fd47 	bl	800ea10 <_Balloc>
 800ef82:	1e02      	subs	r2, r0, #0
 800ef84:	d104      	bne.n	800ef90 <__mdiff+0x2c>
 800ef86:	4b40      	ldr	r3, [pc, #256]	@ (800f088 <__mdiff+0x124>)
 800ef88:	4840      	ldr	r0, [pc, #256]	@ (800f08c <__mdiff+0x128>)
 800ef8a:	4941      	ldr	r1, [pc, #260]	@ (800f090 <__mdiff+0x12c>)
 800ef8c:	f000 fb84 	bl	800f698 <__assert_func>
 800ef90:	2301      	movs	r3, #1
 800ef92:	6145      	str	r5, [r0, #20]
 800ef94:	6103      	str	r3, [r0, #16]
 800ef96:	0010      	movs	r0, r2
 800ef98:	b007      	add	sp, #28
 800ef9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef9c:	2600      	movs	r6, #0
 800ef9e:	42b0      	cmp	r0, r6
 800efa0:	da03      	bge.n	800efaa <__mdiff+0x46>
 800efa2:	0023      	movs	r3, r4
 800efa4:	003c      	movs	r4, r7
 800efa6:	001f      	movs	r7, r3
 800efa8:	3601      	adds	r6, #1
 800efaa:	6861      	ldr	r1, [r4, #4]
 800efac:	9800      	ldr	r0, [sp, #0]
 800efae:	f7ff fd2f 	bl	800ea10 <_Balloc>
 800efb2:	1e02      	subs	r2, r0, #0
 800efb4:	d103      	bne.n	800efbe <__mdiff+0x5a>
 800efb6:	4b34      	ldr	r3, [pc, #208]	@ (800f088 <__mdiff+0x124>)
 800efb8:	4834      	ldr	r0, [pc, #208]	@ (800f08c <__mdiff+0x128>)
 800efba:	4936      	ldr	r1, [pc, #216]	@ (800f094 <__mdiff+0x130>)
 800efbc:	e7e6      	b.n	800ef8c <__mdiff+0x28>
 800efbe:	6923      	ldr	r3, [r4, #16]
 800efc0:	3414      	adds	r4, #20
 800efc2:	9300      	str	r3, [sp, #0]
 800efc4:	009b      	lsls	r3, r3, #2
 800efc6:	18e3      	adds	r3, r4, r3
 800efc8:	0021      	movs	r1, r4
 800efca:	9401      	str	r4, [sp, #4]
 800efcc:	003c      	movs	r4, r7
 800efce:	9302      	str	r3, [sp, #8]
 800efd0:	693b      	ldr	r3, [r7, #16]
 800efd2:	3414      	adds	r4, #20
 800efd4:	009b      	lsls	r3, r3, #2
 800efd6:	18e3      	adds	r3, r4, r3
 800efd8:	9303      	str	r3, [sp, #12]
 800efda:	0003      	movs	r3, r0
 800efdc:	60c6      	str	r6, [r0, #12]
 800efde:	468c      	mov	ip, r1
 800efe0:	2000      	movs	r0, #0
 800efe2:	3314      	adds	r3, #20
 800efe4:	9304      	str	r3, [sp, #16]
 800efe6:	9305      	str	r3, [sp, #20]
 800efe8:	4663      	mov	r3, ip
 800efea:	cb20      	ldmia	r3!, {r5}
 800efec:	b2a9      	uxth	r1, r5
 800efee:	000e      	movs	r6, r1
 800eff0:	469c      	mov	ip, r3
 800eff2:	cc08      	ldmia	r4!, {r3}
 800eff4:	0c2d      	lsrs	r5, r5, #16
 800eff6:	b299      	uxth	r1, r3
 800eff8:	1a71      	subs	r1, r6, r1
 800effa:	1809      	adds	r1, r1, r0
 800effc:	0c1b      	lsrs	r3, r3, #16
 800effe:	1408      	asrs	r0, r1, #16
 800f000:	1aeb      	subs	r3, r5, r3
 800f002:	181b      	adds	r3, r3, r0
 800f004:	1418      	asrs	r0, r3, #16
 800f006:	b289      	uxth	r1, r1
 800f008:	041b      	lsls	r3, r3, #16
 800f00a:	4319      	orrs	r1, r3
 800f00c:	9b05      	ldr	r3, [sp, #20]
 800f00e:	c302      	stmia	r3!, {r1}
 800f010:	9305      	str	r3, [sp, #20]
 800f012:	9b03      	ldr	r3, [sp, #12]
 800f014:	42a3      	cmp	r3, r4
 800f016:	d8e7      	bhi.n	800efe8 <__mdiff+0x84>
 800f018:	0039      	movs	r1, r7
 800f01a:	9c03      	ldr	r4, [sp, #12]
 800f01c:	3115      	adds	r1, #21
 800f01e:	2304      	movs	r3, #4
 800f020:	428c      	cmp	r4, r1
 800f022:	d304      	bcc.n	800f02e <__mdiff+0xca>
 800f024:	1be3      	subs	r3, r4, r7
 800f026:	3b15      	subs	r3, #21
 800f028:	089b      	lsrs	r3, r3, #2
 800f02a:	3301      	adds	r3, #1
 800f02c:	009b      	lsls	r3, r3, #2
 800f02e:	9901      	ldr	r1, [sp, #4]
 800f030:	18cd      	adds	r5, r1, r3
 800f032:	9904      	ldr	r1, [sp, #16]
 800f034:	002e      	movs	r6, r5
 800f036:	18cb      	adds	r3, r1, r3
 800f038:	001f      	movs	r7, r3
 800f03a:	9902      	ldr	r1, [sp, #8]
 800f03c:	428e      	cmp	r6, r1
 800f03e:	d311      	bcc.n	800f064 <__mdiff+0x100>
 800f040:	9c02      	ldr	r4, [sp, #8]
 800f042:	1ee9      	subs	r1, r5, #3
 800f044:	2000      	movs	r0, #0
 800f046:	428c      	cmp	r4, r1
 800f048:	d304      	bcc.n	800f054 <__mdiff+0xf0>
 800f04a:	0021      	movs	r1, r4
 800f04c:	3103      	adds	r1, #3
 800f04e:	1b49      	subs	r1, r1, r5
 800f050:	0889      	lsrs	r1, r1, #2
 800f052:	0088      	lsls	r0, r1, #2
 800f054:	181b      	adds	r3, r3, r0
 800f056:	3b04      	subs	r3, #4
 800f058:	6819      	ldr	r1, [r3, #0]
 800f05a:	2900      	cmp	r1, #0
 800f05c:	d010      	beq.n	800f080 <__mdiff+0x11c>
 800f05e:	9b00      	ldr	r3, [sp, #0]
 800f060:	6113      	str	r3, [r2, #16]
 800f062:	e798      	b.n	800ef96 <__mdiff+0x32>
 800f064:	4684      	mov	ip, r0
 800f066:	ce02      	ldmia	r6!, {r1}
 800f068:	b288      	uxth	r0, r1
 800f06a:	4460      	add	r0, ip
 800f06c:	1400      	asrs	r0, r0, #16
 800f06e:	0c0c      	lsrs	r4, r1, #16
 800f070:	1904      	adds	r4, r0, r4
 800f072:	4461      	add	r1, ip
 800f074:	1420      	asrs	r0, r4, #16
 800f076:	b289      	uxth	r1, r1
 800f078:	0424      	lsls	r4, r4, #16
 800f07a:	4321      	orrs	r1, r4
 800f07c:	c702      	stmia	r7!, {r1}
 800f07e:	e7dc      	b.n	800f03a <__mdiff+0xd6>
 800f080:	9900      	ldr	r1, [sp, #0]
 800f082:	3901      	subs	r1, #1
 800f084:	9100      	str	r1, [sp, #0]
 800f086:	e7e6      	b.n	800f056 <__mdiff+0xf2>
 800f088:	0801b480 	.word	0x0801b480
 800f08c:	0801b491 	.word	0x0801b491
 800f090:	00000237 	.word	0x00000237
 800f094:	00000245 	.word	0x00000245

0800f098 <__d2b>:
 800f098:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f09a:	2101      	movs	r1, #1
 800f09c:	0016      	movs	r6, r2
 800f09e:	001f      	movs	r7, r3
 800f0a0:	f7ff fcb6 	bl	800ea10 <_Balloc>
 800f0a4:	1e04      	subs	r4, r0, #0
 800f0a6:	d105      	bne.n	800f0b4 <__d2b+0x1c>
 800f0a8:	0022      	movs	r2, r4
 800f0aa:	4b25      	ldr	r3, [pc, #148]	@ (800f140 <__d2b+0xa8>)
 800f0ac:	4825      	ldr	r0, [pc, #148]	@ (800f144 <__d2b+0xac>)
 800f0ae:	4926      	ldr	r1, [pc, #152]	@ (800f148 <__d2b+0xb0>)
 800f0b0:	f000 faf2 	bl	800f698 <__assert_func>
 800f0b4:	033b      	lsls	r3, r7, #12
 800f0b6:	007d      	lsls	r5, r7, #1
 800f0b8:	0b1b      	lsrs	r3, r3, #12
 800f0ba:	0d6d      	lsrs	r5, r5, #21
 800f0bc:	d002      	beq.n	800f0c4 <__d2b+0x2c>
 800f0be:	2280      	movs	r2, #128	@ 0x80
 800f0c0:	0352      	lsls	r2, r2, #13
 800f0c2:	4313      	orrs	r3, r2
 800f0c4:	9301      	str	r3, [sp, #4]
 800f0c6:	2e00      	cmp	r6, #0
 800f0c8:	d025      	beq.n	800f116 <__d2b+0x7e>
 800f0ca:	4668      	mov	r0, sp
 800f0cc:	9600      	str	r6, [sp, #0]
 800f0ce:	f7ff fd6c 	bl	800ebaa <__lo0bits>
 800f0d2:	9b01      	ldr	r3, [sp, #4]
 800f0d4:	9900      	ldr	r1, [sp, #0]
 800f0d6:	2800      	cmp	r0, #0
 800f0d8:	d01b      	beq.n	800f112 <__d2b+0x7a>
 800f0da:	2220      	movs	r2, #32
 800f0dc:	001e      	movs	r6, r3
 800f0de:	1a12      	subs	r2, r2, r0
 800f0e0:	4096      	lsls	r6, r2
 800f0e2:	0032      	movs	r2, r6
 800f0e4:	40c3      	lsrs	r3, r0
 800f0e6:	430a      	orrs	r2, r1
 800f0e8:	6162      	str	r2, [r4, #20]
 800f0ea:	9301      	str	r3, [sp, #4]
 800f0ec:	9e01      	ldr	r6, [sp, #4]
 800f0ee:	61a6      	str	r6, [r4, #24]
 800f0f0:	1e73      	subs	r3, r6, #1
 800f0f2:	419e      	sbcs	r6, r3
 800f0f4:	3601      	adds	r6, #1
 800f0f6:	6126      	str	r6, [r4, #16]
 800f0f8:	2d00      	cmp	r5, #0
 800f0fa:	d014      	beq.n	800f126 <__d2b+0x8e>
 800f0fc:	2635      	movs	r6, #53	@ 0x35
 800f0fe:	4b13      	ldr	r3, [pc, #76]	@ (800f14c <__d2b+0xb4>)
 800f100:	18ed      	adds	r5, r5, r3
 800f102:	9b08      	ldr	r3, [sp, #32]
 800f104:	182d      	adds	r5, r5, r0
 800f106:	601d      	str	r5, [r3, #0]
 800f108:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f10a:	1a36      	subs	r6, r6, r0
 800f10c:	601e      	str	r6, [r3, #0]
 800f10e:	0020      	movs	r0, r4
 800f110:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f112:	6161      	str	r1, [r4, #20]
 800f114:	e7ea      	b.n	800f0ec <__d2b+0x54>
 800f116:	a801      	add	r0, sp, #4
 800f118:	f7ff fd47 	bl	800ebaa <__lo0bits>
 800f11c:	9b01      	ldr	r3, [sp, #4]
 800f11e:	2601      	movs	r6, #1
 800f120:	6163      	str	r3, [r4, #20]
 800f122:	3020      	adds	r0, #32
 800f124:	e7e7      	b.n	800f0f6 <__d2b+0x5e>
 800f126:	4b0a      	ldr	r3, [pc, #40]	@ (800f150 <__d2b+0xb8>)
 800f128:	18c0      	adds	r0, r0, r3
 800f12a:	9b08      	ldr	r3, [sp, #32]
 800f12c:	6018      	str	r0, [r3, #0]
 800f12e:	4b09      	ldr	r3, [pc, #36]	@ (800f154 <__d2b+0xbc>)
 800f130:	18f3      	adds	r3, r6, r3
 800f132:	009b      	lsls	r3, r3, #2
 800f134:	18e3      	adds	r3, r4, r3
 800f136:	6958      	ldr	r0, [r3, #20]
 800f138:	f7ff fd16 	bl	800eb68 <__hi0bits>
 800f13c:	0176      	lsls	r6, r6, #5
 800f13e:	e7e3      	b.n	800f108 <__d2b+0x70>
 800f140:	0801b480 	.word	0x0801b480
 800f144:	0801b491 	.word	0x0801b491
 800f148:	0000030f 	.word	0x0000030f
 800f14c:	fffffbcd 	.word	0xfffffbcd
 800f150:	fffffbce 	.word	0xfffffbce
 800f154:	3fffffff 	.word	0x3fffffff

0800f158 <__sfputc_r>:
 800f158:	6893      	ldr	r3, [r2, #8]
 800f15a:	b510      	push	{r4, lr}
 800f15c:	3b01      	subs	r3, #1
 800f15e:	6093      	str	r3, [r2, #8]
 800f160:	2b00      	cmp	r3, #0
 800f162:	da04      	bge.n	800f16e <__sfputc_r+0x16>
 800f164:	6994      	ldr	r4, [r2, #24]
 800f166:	42a3      	cmp	r3, r4
 800f168:	db07      	blt.n	800f17a <__sfputc_r+0x22>
 800f16a:	290a      	cmp	r1, #10
 800f16c:	d005      	beq.n	800f17a <__sfputc_r+0x22>
 800f16e:	6813      	ldr	r3, [r2, #0]
 800f170:	1c58      	adds	r0, r3, #1
 800f172:	6010      	str	r0, [r2, #0]
 800f174:	7019      	strb	r1, [r3, #0]
 800f176:	0008      	movs	r0, r1
 800f178:	bd10      	pop	{r4, pc}
 800f17a:	f000 f9e2 	bl	800f542 <__swbuf_r>
 800f17e:	0001      	movs	r1, r0
 800f180:	e7f9      	b.n	800f176 <__sfputc_r+0x1e>

0800f182 <__sfputs_r>:
 800f182:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f184:	0006      	movs	r6, r0
 800f186:	000f      	movs	r7, r1
 800f188:	0014      	movs	r4, r2
 800f18a:	18d5      	adds	r5, r2, r3
 800f18c:	42ac      	cmp	r4, r5
 800f18e:	d101      	bne.n	800f194 <__sfputs_r+0x12>
 800f190:	2000      	movs	r0, #0
 800f192:	e007      	b.n	800f1a4 <__sfputs_r+0x22>
 800f194:	7821      	ldrb	r1, [r4, #0]
 800f196:	003a      	movs	r2, r7
 800f198:	0030      	movs	r0, r6
 800f19a:	f7ff ffdd 	bl	800f158 <__sfputc_r>
 800f19e:	3401      	adds	r4, #1
 800f1a0:	1c43      	adds	r3, r0, #1
 800f1a2:	d1f3      	bne.n	800f18c <__sfputs_r+0xa>
 800f1a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f1a8 <_vfiprintf_r>:
 800f1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1aa:	b0a1      	sub	sp, #132	@ 0x84
 800f1ac:	000f      	movs	r7, r1
 800f1ae:	0015      	movs	r5, r2
 800f1b0:	001e      	movs	r6, r3
 800f1b2:	9003      	str	r0, [sp, #12]
 800f1b4:	2800      	cmp	r0, #0
 800f1b6:	d004      	beq.n	800f1c2 <_vfiprintf_r+0x1a>
 800f1b8:	6a03      	ldr	r3, [r0, #32]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d101      	bne.n	800f1c2 <_vfiprintf_r+0x1a>
 800f1be:	f7fe fc11 	bl	800d9e4 <__sinit>
 800f1c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f1c4:	07db      	lsls	r3, r3, #31
 800f1c6:	d405      	bmi.n	800f1d4 <_vfiprintf_r+0x2c>
 800f1c8:	89bb      	ldrh	r3, [r7, #12]
 800f1ca:	059b      	lsls	r3, r3, #22
 800f1cc:	d402      	bmi.n	800f1d4 <_vfiprintf_r+0x2c>
 800f1ce:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f1d0:	f7fe fd45 	bl	800dc5e <__retarget_lock_acquire_recursive>
 800f1d4:	89bb      	ldrh	r3, [r7, #12]
 800f1d6:	071b      	lsls	r3, r3, #28
 800f1d8:	d502      	bpl.n	800f1e0 <_vfiprintf_r+0x38>
 800f1da:	693b      	ldr	r3, [r7, #16]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d113      	bne.n	800f208 <_vfiprintf_r+0x60>
 800f1e0:	0039      	movs	r1, r7
 800f1e2:	9803      	ldr	r0, [sp, #12]
 800f1e4:	f000 f9f0 	bl	800f5c8 <__swsetup_r>
 800f1e8:	2800      	cmp	r0, #0
 800f1ea:	d00d      	beq.n	800f208 <_vfiprintf_r+0x60>
 800f1ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f1ee:	07db      	lsls	r3, r3, #31
 800f1f0:	d503      	bpl.n	800f1fa <_vfiprintf_r+0x52>
 800f1f2:	2001      	movs	r0, #1
 800f1f4:	4240      	negs	r0, r0
 800f1f6:	b021      	add	sp, #132	@ 0x84
 800f1f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1fa:	89bb      	ldrh	r3, [r7, #12]
 800f1fc:	059b      	lsls	r3, r3, #22
 800f1fe:	d4f8      	bmi.n	800f1f2 <_vfiprintf_r+0x4a>
 800f200:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f202:	f7fe fd2d 	bl	800dc60 <__retarget_lock_release_recursive>
 800f206:	e7f4      	b.n	800f1f2 <_vfiprintf_r+0x4a>
 800f208:	2300      	movs	r3, #0
 800f20a:	ac08      	add	r4, sp, #32
 800f20c:	6163      	str	r3, [r4, #20]
 800f20e:	3320      	adds	r3, #32
 800f210:	7663      	strb	r3, [r4, #25]
 800f212:	3310      	adds	r3, #16
 800f214:	76a3      	strb	r3, [r4, #26]
 800f216:	9607      	str	r6, [sp, #28]
 800f218:	002e      	movs	r6, r5
 800f21a:	7833      	ldrb	r3, [r6, #0]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d001      	beq.n	800f224 <_vfiprintf_r+0x7c>
 800f220:	2b25      	cmp	r3, #37	@ 0x25
 800f222:	d148      	bne.n	800f2b6 <_vfiprintf_r+0x10e>
 800f224:	1b73      	subs	r3, r6, r5
 800f226:	9305      	str	r3, [sp, #20]
 800f228:	42ae      	cmp	r6, r5
 800f22a:	d00b      	beq.n	800f244 <_vfiprintf_r+0x9c>
 800f22c:	002a      	movs	r2, r5
 800f22e:	0039      	movs	r1, r7
 800f230:	9803      	ldr	r0, [sp, #12]
 800f232:	f7ff ffa6 	bl	800f182 <__sfputs_r>
 800f236:	3001      	adds	r0, #1
 800f238:	d100      	bne.n	800f23c <_vfiprintf_r+0x94>
 800f23a:	e0ae      	b.n	800f39a <_vfiprintf_r+0x1f2>
 800f23c:	6963      	ldr	r3, [r4, #20]
 800f23e:	9a05      	ldr	r2, [sp, #20]
 800f240:	189b      	adds	r3, r3, r2
 800f242:	6163      	str	r3, [r4, #20]
 800f244:	7833      	ldrb	r3, [r6, #0]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d100      	bne.n	800f24c <_vfiprintf_r+0xa4>
 800f24a:	e0a6      	b.n	800f39a <_vfiprintf_r+0x1f2>
 800f24c:	2201      	movs	r2, #1
 800f24e:	2300      	movs	r3, #0
 800f250:	4252      	negs	r2, r2
 800f252:	6062      	str	r2, [r4, #4]
 800f254:	a904      	add	r1, sp, #16
 800f256:	3254      	adds	r2, #84	@ 0x54
 800f258:	1852      	adds	r2, r2, r1
 800f25a:	1c75      	adds	r5, r6, #1
 800f25c:	6023      	str	r3, [r4, #0]
 800f25e:	60e3      	str	r3, [r4, #12]
 800f260:	60a3      	str	r3, [r4, #8]
 800f262:	7013      	strb	r3, [r2, #0]
 800f264:	65a3      	str	r3, [r4, #88]	@ 0x58
 800f266:	4b59      	ldr	r3, [pc, #356]	@ (800f3cc <_vfiprintf_r+0x224>)
 800f268:	2205      	movs	r2, #5
 800f26a:	0018      	movs	r0, r3
 800f26c:	7829      	ldrb	r1, [r5, #0]
 800f26e:	9305      	str	r3, [sp, #20]
 800f270:	f7fe fcf7 	bl	800dc62 <memchr>
 800f274:	1c6e      	adds	r6, r5, #1
 800f276:	2800      	cmp	r0, #0
 800f278:	d11f      	bne.n	800f2ba <_vfiprintf_r+0x112>
 800f27a:	6822      	ldr	r2, [r4, #0]
 800f27c:	06d3      	lsls	r3, r2, #27
 800f27e:	d504      	bpl.n	800f28a <_vfiprintf_r+0xe2>
 800f280:	2353      	movs	r3, #83	@ 0x53
 800f282:	a904      	add	r1, sp, #16
 800f284:	185b      	adds	r3, r3, r1
 800f286:	2120      	movs	r1, #32
 800f288:	7019      	strb	r1, [r3, #0]
 800f28a:	0713      	lsls	r3, r2, #28
 800f28c:	d504      	bpl.n	800f298 <_vfiprintf_r+0xf0>
 800f28e:	2353      	movs	r3, #83	@ 0x53
 800f290:	a904      	add	r1, sp, #16
 800f292:	185b      	adds	r3, r3, r1
 800f294:	212b      	movs	r1, #43	@ 0x2b
 800f296:	7019      	strb	r1, [r3, #0]
 800f298:	782b      	ldrb	r3, [r5, #0]
 800f29a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f29c:	d016      	beq.n	800f2cc <_vfiprintf_r+0x124>
 800f29e:	002e      	movs	r6, r5
 800f2a0:	2100      	movs	r1, #0
 800f2a2:	200a      	movs	r0, #10
 800f2a4:	68e3      	ldr	r3, [r4, #12]
 800f2a6:	7832      	ldrb	r2, [r6, #0]
 800f2a8:	1c75      	adds	r5, r6, #1
 800f2aa:	3a30      	subs	r2, #48	@ 0x30
 800f2ac:	2a09      	cmp	r2, #9
 800f2ae:	d950      	bls.n	800f352 <_vfiprintf_r+0x1aa>
 800f2b0:	2900      	cmp	r1, #0
 800f2b2:	d111      	bne.n	800f2d8 <_vfiprintf_r+0x130>
 800f2b4:	e017      	b.n	800f2e6 <_vfiprintf_r+0x13e>
 800f2b6:	3601      	adds	r6, #1
 800f2b8:	e7af      	b.n	800f21a <_vfiprintf_r+0x72>
 800f2ba:	9b05      	ldr	r3, [sp, #20]
 800f2bc:	6822      	ldr	r2, [r4, #0]
 800f2be:	1ac0      	subs	r0, r0, r3
 800f2c0:	2301      	movs	r3, #1
 800f2c2:	4083      	lsls	r3, r0
 800f2c4:	4313      	orrs	r3, r2
 800f2c6:	0035      	movs	r5, r6
 800f2c8:	6023      	str	r3, [r4, #0]
 800f2ca:	e7cc      	b.n	800f266 <_vfiprintf_r+0xbe>
 800f2cc:	9b07      	ldr	r3, [sp, #28]
 800f2ce:	1d19      	adds	r1, r3, #4
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	9107      	str	r1, [sp, #28]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	db01      	blt.n	800f2dc <_vfiprintf_r+0x134>
 800f2d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f2da:	e004      	b.n	800f2e6 <_vfiprintf_r+0x13e>
 800f2dc:	425b      	negs	r3, r3
 800f2de:	60e3      	str	r3, [r4, #12]
 800f2e0:	2302      	movs	r3, #2
 800f2e2:	4313      	orrs	r3, r2
 800f2e4:	6023      	str	r3, [r4, #0]
 800f2e6:	7833      	ldrb	r3, [r6, #0]
 800f2e8:	2b2e      	cmp	r3, #46	@ 0x2e
 800f2ea:	d10c      	bne.n	800f306 <_vfiprintf_r+0x15e>
 800f2ec:	7873      	ldrb	r3, [r6, #1]
 800f2ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2f0:	d134      	bne.n	800f35c <_vfiprintf_r+0x1b4>
 800f2f2:	9b07      	ldr	r3, [sp, #28]
 800f2f4:	3602      	adds	r6, #2
 800f2f6:	1d1a      	adds	r2, r3, #4
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	9207      	str	r2, [sp, #28]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	da01      	bge.n	800f304 <_vfiprintf_r+0x15c>
 800f300:	2301      	movs	r3, #1
 800f302:	425b      	negs	r3, r3
 800f304:	9309      	str	r3, [sp, #36]	@ 0x24
 800f306:	4d32      	ldr	r5, [pc, #200]	@ (800f3d0 <_vfiprintf_r+0x228>)
 800f308:	2203      	movs	r2, #3
 800f30a:	0028      	movs	r0, r5
 800f30c:	7831      	ldrb	r1, [r6, #0]
 800f30e:	f7fe fca8 	bl	800dc62 <memchr>
 800f312:	2800      	cmp	r0, #0
 800f314:	d006      	beq.n	800f324 <_vfiprintf_r+0x17c>
 800f316:	2340      	movs	r3, #64	@ 0x40
 800f318:	1b40      	subs	r0, r0, r5
 800f31a:	4083      	lsls	r3, r0
 800f31c:	6822      	ldr	r2, [r4, #0]
 800f31e:	3601      	adds	r6, #1
 800f320:	4313      	orrs	r3, r2
 800f322:	6023      	str	r3, [r4, #0]
 800f324:	7831      	ldrb	r1, [r6, #0]
 800f326:	2206      	movs	r2, #6
 800f328:	482a      	ldr	r0, [pc, #168]	@ (800f3d4 <_vfiprintf_r+0x22c>)
 800f32a:	1c75      	adds	r5, r6, #1
 800f32c:	7621      	strb	r1, [r4, #24]
 800f32e:	f7fe fc98 	bl	800dc62 <memchr>
 800f332:	2800      	cmp	r0, #0
 800f334:	d040      	beq.n	800f3b8 <_vfiprintf_r+0x210>
 800f336:	4b28      	ldr	r3, [pc, #160]	@ (800f3d8 <_vfiprintf_r+0x230>)
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d122      	bne.n	800f382 <_vfiprintf_r+0x1da>
 800f33c:	2207      	movs	r2, #7
 800f33e:	9b07      	ldr	r3, [sp, #28]
 800f340:	3307      	adds	r3, #7
 800f342:	4393      	bics	r3, r2
 800f344:	3308      	adds	r3, #8
 800f346:	9307      	str	r3, [sp, #28]
 800f348:	6963      	ldr	r3, [r4, #20]
 800f34a:	9a04      	ldr	r2, [sp, #16]
 800f34c:	189b      	adds	r3, r3, r2
 800f34e:	6163      	str	r3, [r4, #20]
 800f350:	e762      	b.n	800f218 <_vfiprintf_r+0x70>
 800f352:	4343      	muls	r3, r0
 800f354:	002e      	movs	r6, r5
 800f356:	2101      	movs	r1, #1
 800f358:	189b      	adds	r3, r3, r2
 800f35a:	e7a4      	b.n	800f2a6 <_vfiprintf_r+0xfe>
 800f35c:	2300      	movs	r3, #0
 800f35e:	200a      	movs	r0, #10
 800f360:	0019      	movs	r1, r3
 800f362:	3601      	adds	r6, #1
 800f364:	6063      	str	r3, [r4, #4]
 800f366:	7832      	ldrb	r2, [r6, #0]
 800f368:	1c75      	adds	r5, r6, #1
 800f36a:	3a30      	subs	r2, #48	@ 0x30
 800f36c:	2a09      	cmp	r2, #9
 800f36e:	d903      	bls.n	800f378 <_vfiprintf_r+0x1d0>
 800f370:	2b00      	cmp	r3, #0
 800f372:	d0c8      	beq.n	800f306 <_vfiprintf_r+0x15e>
 800f374:	9109      	str	r1, [sp, #36]	@ 0x24
 800f376:	e7c6      	b.n	800f306 <_vfiprintf_r+0x15e>
 800f378:	4341      	muls	r1, r0
 800f37a:	002e      	movs	r6, r5
 800f37c:	2301      	movs	r3, #1
 800f37e:	1889      	adds	r1, r1, r2
 800f380:	e7f1      	b.n	800f366 <_vfiprintf_r+0x1be>
 800f382:	aa07      	add	r2, sp, #28
 800f384:	9200      	str	r2, [sp, #0]
 800f386:	0021      	movs	r1, r4
 800f388:	003a      	movs	r2, r7
 800f38a:	4b14      	ldr	r3, [pc, #80]	@ (800f3dc <_vfiprintf_r+0x234>)
 800f38c:	9803      	ldr	r0, [sp, #12]
 800f38e:	f7fd fedd 	bl	800d14c <_printf_float>
 800f392:	9004      	str	r0, [sp, #16]
 800f394:	9b04      	ldr	r3, [sp, #16]
 800f396:	3301      	adds	r3, #1
 800f398:	d1d6      	bne.n	800f348 <_vfiprintf_r+0x1a0>
 800f39a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f39c:	07db      	lsls	r3, r3, #31
 800f39e:	d405      	bmi.n	800f3ac <_vfiprintf_r+0x204>
 800f3a0:	89bb      	ldrh	r3, [r7, #12]
 800f3a2:	059b      	lsls	r3, r3, #22
 800f3a4:	d402      	bmi.n	800f3ac <_vfiprintf_r+0x204>
 800f3a6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f3a8:	f7fe fc5a 	bl	800dc60 <__retarget_lock_release_recursive>
 800f3ac:	89bb      	ldrh	r3, [r7, #12]
 800f3ae:	065b      	lsls	r3, r3, #25
 800f3b0:	d500      	bpl.n	800f3b4 <_vfiprintf_r+0x20c>
 800f3b2:	e71e      	b.n	800f1f2 <_vfiprintf_r+0x4a>
 800f3b4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800f3b6:	e71e      	b.n	800f1f6 <_vfiprintf_r+0x4e>
 800f3b8:	aa07      	add	r2, sp, #28
 800f3ba:	9200      	str	r2, [sp, #0]
 800f3bc:	0021      	movs	r1, r4
 800f3be:	003a      	movs	r2, r7
 800f3c0:	4b06      	ldr	r3, [pc, #24]	@ (800f3dc <_vfiprintf_r+0x234>)
 800f3c2:	9803      	ldr	r0, [sp, #12]
 800f3c4:	f7fe f970 	bl	800d6a8 <_printf_i>
 800f3c8:	e7e3      	b.n	800f392 <_vfiprintf_r+0x1ea>
 800f3ca:	46c0      	nop			@ (mov r8, r8)
 800f3cc:	0801b5e8 	.word	0x0801b5e8
 800f3d0:	0801b5ee 	.word	0x0801b5ee
 800f3d4:	0801b5f2 	.word	0x0801b5f2
 800f3d8:	0800d14d 	.word	0x0800d14d
 800f3dc:	0800f183 	.word	0x0800f183

0800f3e0 <__sflush_r>:
 800f3e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f3e2:	220c      	movs	r2, #12
 800f3e4:	5e8b      	ldrsh	r3, [r1, r2]
 800f3e6:	0005      	movs	r5, r0
 800f3e8:	000c      	movs	r4, r1
 800f3ea:	071a      	lsls	r2, r3, #28
 800f3ec:	d456      	bmi.n	800f49c <__sflush_r+0xbc>
 800f3ee:	684a      	ldr	r2, [r1, #4]
 800f3f0:	2a00      	cmp	r2, #0
 800f3f2:	dc02      	bgt.n	800f3fa <__sflush_r+0x1a>
 800f3f4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800f3f6:	2a00      	cmp	r2, #0
 800f3f8:	dd4e      	ble.n	800f498 <__sflush_r+0xb8>
 800f3fa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800f3fc:	2f00      	cmp	r7, #0
 800f3fe:	d04b      	beq.n	800f498 <__sflush_r+0xb8>
 800f400:	2200      	movs	r2, #0
 800f402:	2080      	movs	r0, #128	@ 0x80
 800f404:	682e      	ldr	r6, [r5, #0]
 800f406:	602a      	str	r2, [r5, #0]
 800f408:	001a      	movs	r2, r3
 800f40a:	0140      	lsls	r0, r0, #5
 800f40c:	6a21      	ldr	r1, [r4, #32]
 800f40e:	4002      	ands	r2, r0
 800f410:	4203      	tst	r3, r0
 800f412:	d033      	beq.n	800f47c <__sflush_r+0x9c>
 800f414:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f416:	89a3      	ldrh	r3, [r4, #12]
 800f418:	075b      	lsls	r3, r3, #29
 800f41a:	d506      	bpl.n	800f42a <__sflush_r+0x4a>
 800f41c:	6863      	ldr	r3, [r4, #4]
 800f41e:	1ad2      	subs	r2, r2, r3
 800f420:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f422:	2b00      	cmp	r3, #0
 800f424:	d001      	beq.n	800f42a <__sflush_r+0x4a>
 800f426:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f428:	1ad2      	subs	r2, r2, r3
 800f42a:	2300      	movs	r3, #0
 800f42c:	0028      	movs	r0, r5
 800f42e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800f430:	6a21      	ldr	r1, [r4, #32]
 800f432:	47b8      	blx	r7
 800f434:	89a2      	ldrh	r2, [r4, #12]
 800f436:	1c43      	adds	r3, r0, #1
 800f438:	d106      	bne.n	800f448 <__sflush_r+0x68>
 800f43a:	6829      	ldr	r1, [r5, #0]
 800f43c:	291d      	cmp	r1, #29
 800f43e:	d846      	bhi.n	800f4ce <__sflush_r+0xee>
 800f440:	4b29      	ldr	r3, [pc, #164]	@ (800f4e8 <__sflush_r+0x108>)
 800f442:	410b      	asrs	r3, r1
 800f444:	07db      	lsls	r3, r3, #31
 800f446:	d442      	bmi.n	800f4ce <__sflush_r+0xee>
 800f448:	2300      	movs	r3, #0
 800f44a:	6063      	str	r3, [r4, #4]
 800f44c:	6923      	ldr	r3, [r4, #16]
 800f44e:	6023      	str	r3, [r4, #0]
 800f450:	04d2      	lsls	r2, r2, #19
 800f452:	d505      	bpl.n	800f460 <__sflush_r+0x80>
 800f454:	1c43      	adds	r3, r0, #1
 800f456:	d102      	bne.n	800f45e <__sflush_r+0x7e>
 800f458:	682b      	ldr	r3, [r5, #0]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d100      	bne.n	800f460 <__sflush_r+0x80>
 800f45e:	6560      	str	r0, [r4, #84]	@ 0x54
 800f460:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f462:	602e      	str	r6, [r5, #0]
 800f464:	2900      	cmp	r1, #0
 800f466:	d017      	beq.n	800f498 <__sflush_r+0xb8>
 800f468:	0023      	movs	r3, r4
 800f46a:	3344      	adds	r3, #68	@ 0x44
 800f46c:	4299      	cmp	r1, r3
 800f46e:	d002      	beq.n	800f476 <__sflush_r+0x96>
 800f470:	0028      	movs	r0, r5
 800f472:	f7ff fa83 	bl	800e97c <_free_r>
 800f476:	2300      	movs	r3, #0
 800f478:	6363      	str	r3, [r4, #52]	@ 0x34
 800f47a:	e00d      	b.n	800f498 <__sflush_r+0xb8>
 800f47c:	2301      	movs	r3, #1
 800f47e:	0028      	movs	r0, r5
 800f480:	47b8      	blx	r7
 800f482:	0002      	movs	r2, r0
 800f484:	1c43      	adds	r3, r0, #1
 800f486:	d1c6      	bne.n	800f416 <__sflush_r+0x36>
 800f488:	682b      	ldr	r3, [r5, #0]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d0c3      	beq.n	800f416 <__sflush_r+0x36>
 800f48e:	2b1d      	cmp	r3, #29
 800f490:	d001      	beq.n	800f496 <__sflush_r+0xb6>
 800f492:	2b16      	cmp	r3, #22
 800f494:	d11a      	bne.n	800f4cc <__sflush_r+0xec>
 800f496:	602e      	str	r6, [r5, #0]
 800f498:	2000      	movs	r0, #0
 800f49a:	e01e      	b.n	800f4da <__sflush_r+0xfa>
 800f49c:	690e      	ldr	r6, [r1, #16]
 800f49e:	2e00      	cmp	r6, #0
 800f4a0:	d0fa      	beq.n	800f498 <__sflush_r+0xb8>
 800f4a2:	680f      	ldr	r7, [r1, #0]
 800f4a4:	600e      	str	r6, [r1, #0]
 800f4a6:	1bba      	subs	r2, r7, r6
 800f4a8:	9201      	str	r2, [sp, #4]
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	079b      	lsls	r3, r3, #30
 800f4ae:	d100      	bne.n	800f4b2 <__sflush_r+0xd2>
 800f4b0:	694a      	ldr	r2, [r1, #20]
 800f4b2:	60a2      	str	r2, [r4, #8]
 800f4b4:	9b01      	ldr	r3, [sp, #4]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	ddee      	ble.n	800f498 <__sflush_r+0xb8>
 800f4ba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800f4bc:	0032      	movs	r2, r6
 800f4be:	001f      	movs	r7, r3
 800f4c0:	0028      	movs	r0, r5
 800f4c2:	9b01      	ldr	r3, [sp, #4]
 800f4c4:	6a21      	ldr	r1, [r4, #32]
 800f4c6:	47b8      	blx	r7
 800f4c8:	2800      	cmp	r0, #0
 800f4ca:	dc07      	bgt.n	800f4dc <__sflush_r+0xfc>
 800f4cc:	89a2      	ldrh	r2, [r4, #12]
 800f4ce:	2340      	movs	r3, #64	@ 0x40
 800f4d0:	2001      	movs	r0, #1
 800f4d2:	4313      	orrs	r3, r2
 800f4d4:	b21b      	sxth	r3, r3
 800f4d6:	81a3      	strh	r3, [r4, #12]
 800f4d8:	4240      	negs	r0, r0
 800f4da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f4dc:	9b01      	ldr	r3, [sp, #4]
 800f4de:	1836      	adds	r6, r6, r0
 800f4e0:	1a1b      	subs	r3, r3, r0
 800f4e2:	9301      	str	r3, [sp, #4]
 800f4e4:	e7e6      	b.n	800f4b4 <__sflush_r+0xd4>
 800f4e6:	46c0      	nop			@ (mov r8, r8)
 800f4e8:	dfbffffe 	.word	0xdfbffffe

0800f4ec <_fflush_r>:
 800f4ec:	690b      	ldr	r3, [r1, #16]
 800f4ee:	b570      	push	{r4, r5, r6, lr}
 800f4f0:	0005      	movs	r5, r0
 800f4f2:	000c      	movs	r4, r1
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d102      	bne.n	800f4fe <_fflush_r+0x12>
 800f4f8:	2500      	movs	r5, #0
 800f4fa:	0028      	movs	r0, r5
 800f4fc:	bd70      	pop	{r4, r5, r6, pc}
 800f4fe:	2800      	cmp	r0, #0
 800f500:	d004      	beq.n	800f50c <_fflush_r+0x20>
 800f502:	6a03      	ldr	r3, [r0, #32]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d101      	bne.n	800f50c <_fflush_r+0x20>
 800f508:	f7fe fa6c 	bl	800d9e4 <__sinit>
 800f50c:	220c      	movs	r2, #12
 800f50e:	5ea3      	ldrsh	r3, [r4, r2]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d0f1      	beq.n	800f4f8 <_fflush_r+0xc>
 800f514:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f516:	07d2      	lsls	r2, r2, #31
 800f518:	d404      	bmi.n	800f524 <_fflush_r+0x38>
 800f51a:	059b      	lsls	r3, r3, #22
 800f51c:	d402      	bmi.n	800f524 <_fflush_r+0x38>
 800f51e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f520:	f7fe fb9d 	bl	800dc5e <__retarget_lock_acquire_recursive>
 800f524:	0028      	movs	r0, r5
 800f526:	0021      	movs	r1, r4
 800f528:	f7ff ff5a 	bl	800f3e0 <__sflush_r>
 800f52c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f52e:	0005      	movs	r5, r0
 800f530:	07db      	lsls	r3, r3, #31
 800f532:	d4e2      	bmi.n	800f4fa <_fflush_r+0xe>
 800f534:	89a3      	ldrh	r3, [r4, #12]
 800f536:	059b      	lsls	r3, r3, #22
 800f538:	d4df      	bmi.n	800f4fa <_fflush_r+0xe>
 800f53a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f53c:	f7fe fb90 	bl	800dc60 <__retarget_lock_release_recursive>
 800f540:	e7db      	b.n	800f4fa <_fflush_r+0xe>

0800f542 <__swbuf_r>:
 800f542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f544:	0006      	movs	r6, r0
 800f546:	000d      	movs	r5, r1
 800f548:	0014      	movs	r4, r2
 800f54a:	2800      	cmp	r0, #0
 800f54c:	d004      	beq.n	800f558 <__swbuf_r+0x16>
 800f54e:	6a03      	ldr	r3, [r0, #32]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d101      	bne.n	800f558 <__swbuf_r+0x16>
 800f554:	f7fe fa46 	bl	800d9e4 <__sinit>
 800f558:	69a3      	ldr	r3, [r4, #24]
 800f55a:	60a3      	str	r3, [r4, #8]
 800f55c:	89a3      	ldrh	r3, [r4, #12]
 800f55e:	071b      	lsls	r3, r3, #28
 800f560:	d502      	bpl.n	800f568 <__swbuf_r+0x26>
 800f562:	6923      	ldr	r3, [r4, #16]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d109      	bne.n	800f57c <__swbuf_r+0x3a>
 800f568:	0021      	movs	r1, r4
 800f56a:	0030      	movs	r0, r6
 800f56c:	f000 f82c 	bl	800f5c8 <__swsetup_r>
 800f570:	2800      	cmp	r0, #0
 800f572:	d003      	beq.n	800f57c <__swbuf_r+0x3a>
 800f574:	2501      	movs	r5, #1
 800f576:	426d      	negs	r5, r5
 800f578:	0028      	movs	r0, r5
 800f57a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f57c:	6923      	ldr	r3, [r4, #16]
 800f57e:	6820      	ldr	r0, [r4, #0]
 800f580:	b2ef      	uxtb	r7, r5
 800f582:	1ac0      	subs	r0, r0, r3
 800f584:	6963      	ldr	r3, [r4, #20]
 800f586:	b2ed      	uxtb	r5, r5
 800f588:	4283      	cmp	r3, r0
 800f58a:	dc05      	bgt.n	800f598 <__swbuf_r+0x56>
 800f58c:	0021      	movs	r1, r4
 800f58e:	0030      	movs	r0, r6
 800f590:	f7ff ffac 	bl	800f4ec <_fflush_r>
 800f594:	2800      	cmp	r0, #0
 800f596:	d1ed      	bne.n	800f574 <__swbuf_r+0x32>
 800f598:	68a3      	ldr	r3, [r4, #8]
 800f59a:	3001      	adds	r0, #1
 800f59c:	3b01      	subs	r3, #1
 800f59e:	60a3      	str	r3, [r4, #8]
 800f5a0:	6823      	ldr	r3, [r4, #0]
 800f5a2:	1c5a      	adds	r2, r3, #1
 800f5a4:	6022      	str	r2, [r4, #0]
 800f5a6:	701f      	strb	r7, [r3, #0]
 800f5a8:	6963      	ldr	r3, [r4, #20]
 800f5aa:	4283      	cmp	r3, r0
 800f5ac:	d004      	beq.n	800f5b8 <__swbuf_r+0x76>
 800f5ae:	89a3      	ldrh	r3, [r4, #12]
 800f5b0:	07db      	lsls	r3, r3, #31
 800f5b2:	d5e1      	bpl.n	800f578 <__swbuf_r+0x36>
 800f5b4:	2d0a      	cmp	r5, #10
 800f5b6:	d1df      	bne.n	800f578 <__swbuf_r+0x36>
 800f5b8:	0021      	movs	r1, r4
 800f5ba:	0030      	movs	r0, r6
 800f5bc:	f7ff ff96 	bl	800f4ec <_fflush_r>
 800f5c0:	2800      	cmp	r0, #0
 800f5c2:	d0d9      	beq.n	800f578 <__swbuf_r+0x36>
 800f5c4:	e7d6      	b.n	800f574 <__swbuf_r+0x32>
	...

0800f5c8 <__swsetup_r>:
 800f5c8:	4b2d      	ldr	r3, [pc, #180]	@ (800f680 <__swsetup_r+0xb8>)
 800f5ca:	b570      	push	{r4, r5, r6, lr}
 800f5cc:	0005      	movs	r5, r0
 800f5ce:	6818      	ldr	r0, [r3, #0]
 800f5d0:	000c      	movs	r4, r1
 800f5d2:	2800      	cmp	r0, #0
 800f5d4:	d004      	beq.n	800f5e0 <__swsetup_r+0x18>
 800f5d6:	6a03      	ldr	r3, [r0, #32]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d101      	bne.n	800f5e0 <__swsetup_r+0x18>
 800f5dc:	f7fe fa02 	bl	800d9e4 <__sinit>
 800f5e0:	230c      	movs	r3, #12
 800f5e2:	5ee2      	ldrsh	r2, [r4, r3]
 800f5e4:	0713      	lsls	r3, r2, #28
 800f5e6:	d423      	bmi.n	800f630 <__swsetup_r+0x68>
 800f5e8:	06d3      	lsls	r3, r2, #27
 800f5ea:	d407      	bmi.n	800f5fc <__swsetup_r+0x34>
 800f5ec:	2309      	movs	r3, #9
 800f5ee:	602b      	str	r3, [r5, #0]
 800f5f0:	2340      	movs	r3, #64	@ 0x40
 800f5f2:	2001      	movs	r0, #1
 800f5f4:	4313      	orrs	r3, r2
 800f5f6:	81a3      	strh	r3, [r4, #12]
 800f5f8:	4240      	negs	r0, r0
 800f5fa:	e03a      	b.n	800f672 <__swsetup_r+0xaa>
 800f5fc:	0752      	lsls	r2, r2, #29
 800f5fe:	d513      	bpl.n	800f628 <__swsetup_r+0x60>
 800f600:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f602:	2900      	cmp	r1, #0
 800f604:	d008      	beq.n	800f618 <__swsetup_r+0x50>
 800f606:	0023      	movs	r3, r4
 800f608:	3344      	adds	r3, #68	@ 0x44
 800f60a:	4299      	cmp	r1, r3
 800f60c:	d002      	beq.n	800f614 <__swsetup_r+0x4c>
 800f60e:	0028      	movs	r0, r5
 800f610:	f7ff f9b4 	bl	800e97c <_free_r>
 800f614:	2300      	movs	r3, #0
 800f616:	6363      	str	r3, [r4, #52]	@ 0x34
 800f618:	2224      	movs	r2, #36	@ 0x24
 800f61a:	89a3      	ldrh	r3, [r4, #12]
 800f61c:	4393      	bics	r3, r2
 800f61e:	81a3      	strh	r3, [r4, #12]
 800f620:	2300      	movs	r3, #0
 800f622:	6063      	str	r3, [r4, #4]
 800f624:	6923      	ldr	r3, [r4, #16]
 800f626:	6023      	str	r3, [r4, #0]
 800f628:	2308      	movs	r3, #8
 800f62a:	89a2      	ldrh	r2, [r4, #12]
 800f62c:	4313      	orrs	r3, r2
 800f62e:	81a3      	strh	r3, [r4, #12]
 800f630:	6923      	ldr	r3, [r4, #16]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d10b      	bne.n	800f64e <__swsetup_r+0x86>
 800f636:	21a0      	movs	r1, #160	@ 0xa0
 800f638:	2280      	movs	r2, #128	@ 0x80
 800f63a:	89a3      	ldrh	r3, [r4, #12]
 800f63c:	0089      	lsls	r1, r1, #2
 800f63e:	0092      	lsls	r2, r2, #2
 800f640:	400b      	ands	r3, r1
 800f642:	4293      	cmp	r3, r2
 800f644:	d003      	beq.n	800f64e <__swsetup_r+0x86>
 800f646:	0021      	movs	r1, r4
 800f648:	0028      	movs	r0, r5
 800f64a:	f000 f8b9 	bl	800f7c0 <__smakebuf_r>
 800f64e:	230c      	movs	r3, #12
 800f650:	5ee2      	ldrsh	r2, [r4, r3]
 800f652:	2101      	movs	r1, #1
 800f654:	0013      	movs	r3, r2
 800f656:	400b      	ands	r3, r1
 800f658:	420a      	tst	r2, r1
 800f65a:	d00b      	beq.n	800f674 <__swsetup_r+0xac>
 800f65c:	2300      	movs	r3, #0
 800f65e:	60a3      	str	r3, [r4, #8]
 800f660:	6963      	ldr	r3, [r4, #20]
 800f662:	425b      	negs	r3, r3
 800f664:	61a3      	str	r3, [r4, #24]
 800f666:	2000      	movs	r0, #0
 800f668:	6923      	ldr	r3, [r4, #16]
 800f66a:	4283      	cmp	r3, r0
 800f66c:	d101      	bne.n	800f672 <__swsetup_r+0xaa>
 800f66e:	0613      	lsls	r3, r2, #24
 800f670:	d4be      	bmi.n	800f5f0 <__swsetup_r+0x28>
 800f672:	bd70      	pop	{r4, r5, r6, pc}
 800f674:	0791      	lsls	r1, r2, #30
 800f676:	d400      	bmi.n	800f67a <__swsetup_r+0xb2>
 800f678:	6963      	ldr	r3, [r4, #20]
 800f67a:	60a3      	str	r3, [r4, #8]
 800f67c:	e7f3      	b.n	800f666 <__swsetup_r+0x9e>
 800f67e:	46c0      	nop			@ (mov r8, r8)
 800f680:	20000184 	.word	0x20000184

0800f684 <memcpy>:
 800f684:	2300      	movs	r3, #0
 800f686:	b510      	push	{r4, lr}
 800f688:	429a      	cmp	r2, r3
 800f68a:	d100      	bne.n	800f68e <memcpy+0xa>
 800f68c:	bd10      	pop	{r4, pc}
 800f68e:	5ccc      	ldrb	r4, [r1, r3]
 800f690:	54c4      	strb	r4, [r0, r3]
 800f692:	3301      	adds	r3, #1
 800f694:	e7f8      	b.n	800f688 <memcpy+0x4>
	...

0800f698 <__assert_func>:
 800f698:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f69a:	0014      	movs	r4, r2
 800f69c:	001a      	movs	r2, r3
 800f69e:	4b09      	ldr	r3, [pc, #36]	@ (800f6c4 <__assert_func+0x2c>)
 800f6a0:	0005      	movs	r5, r0
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	000e      	movs	r6, r1
 800f6a6:	68d8      	ldr	r0, [r3, #12]
 800f6a8:	4b07      	ldr	r3, [pc, #28]	@ (800f6c8 <__assert_func+0x30>)
 800f6aa:	2c00      	cmp	r4, #0
 800f6ac:	d101      	bne.n	800f6b2 <__assert_func+0x1a>
 800f6ae:	4b07      	ldr	r3, [pc, #28]	@ (800f6cc <__assert_func+0x34>)
 800f6b0:	001c      	movs	r4, r3
 800f6b2:	4907      	ldr	r1, [pc, #28]	@ (800f6d0 <__assert_func+0x38>)
 800f6b4:	9301      	str	r3, [sp, #4]
 800f6b6:	9402      	str	r4, [sp, #8]
 800f6b8:	002b      	movs	r3, r5
 800f6ba:	9600      	str	r6, [sp, #0]
 800f6bc:	f7fe f9aa 	bl	800da14 <fiprintf>
 800f6c0:	f000 f8e4 	bl	800f88c <abort>
 800f6c4:	20000184 	.word	0x20000184
 800f6c8:	0801b603 	.word	0x0801b603
 800f6cc:	0801b63e 	.word	0x0801b63e
 800f6d0:	0801b610 	.word	0x0801b610

0800f6d4 <_calloc_r>:
 800f6d4:	b570      	push	{r4, r5, r6, lr}
 800f6d6:	0c0b      	lsrs	r3, r1, #16
 800f6d8:	0c15      	lsrs	r5, r2, #16
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d11e      	bne.n	800f71c <_calloc_r+0x48>
 800f6de:	2d00      	cmp	r5, #0
 800f6e0:	d10c      	bne.n	800f6fc <_calloc_r+0x28>
 800f6e2:	b289      	uxth	r1, r1
 800f6e4:	b294      	uxth	r4, r2
 800f6e6:	434c      	muls	r4, r1
 800f6e8:	0021      	movs	r1, r4
 800f6ea:	f7fd fbf9 	bl	800cee0 <_malloc_r>
 800f6ee:	1e05      	subs	r5, r0, #0
 800f6f0:	d01a      	beq.n	800f728 <_calloc_r+0x54>
 800f6f2:	0022      	movs	r2, r4
 800f6f4:	2100      	movs	r1, #0
 800f6f6:	f7fe fa05 	bl	800db04 <memset>
 800f6fa:	e016      	b.n	800f72a <_calloc_r+0x56>
 800f6fc:	1c2b      	adds	r3, r5, #0
 800f6fe:	1c0c      	adds	r4, r1, #0
 800f700:	b289      	uxth	r1, r1
 800f702:	b292      	uxth	r2, r2
 800f704:	434a      	muls	r2, r1
 800f706:	b29b      	uxth	r3, r3
 800f708:	b2a1      	uxth	r1, r4
 800f70a:	4359      	muls	r1, r3
 800f70c:	0c14      	lsrs	r4, r2, #16
 800f70e:	190c      	adds	r4, r1, r4
 800f710:	0c23      	lsrs	r3, r4, #16
 800f712:	d107      	bne.n	800f724 <_calloc_r+0x50>
 800f714:	0424      	lsls	r4, r4, #16
 800f716:	b292      	uxth	r2, r2
 800f718:	4314      	orrs	r4, r2
 800f71a:	e7e5      	b.n	800f6e8 <_calloc_r+0x14>
 800f71c:	2d00      	cmp	r5, #0
 800f71e:	d101      	bne.n	800f724 <_calloc_r+0x50>
 800f720:	1c14      	adds	r4, r2, #0
 800f722:	e7ed      	b.n	800f700 <_calloc_r+0x2c>
 800f724:	230c      	movs	r3, #12
 800f726:	6003      	str	r3, [r0, #0]
 800f728:	2500      	movs	r5, #0
 800f72a:	0028      	movs	r0, r5
 800f72c:	bd70      	pop	{r4, r5, r6, pc}

0800f72e <__ascii_mbtowc>:
 800f72e:	b082      	sub	sp, #8
 800f730:	2900      	cmp	r1, #0
 800f732:	d100      	bne.n	800f736 <__ascii_mbtowc+0x8>
 800f734:	a901      	add	r1, sp, #4
 800f736:	1e10      	subs	r0, r2, #0
 800f738:	d006      	beq.n	800f748 <__ascii_mbtowc+0x1a>
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d006      	beq.n	800f74c <__ascii_mbtowc+0x1e>
 800f73e:	7813      	ldrb	r3, [r2, #0]
 800f740:	600b      	str	r3, [r1, #0]
 800f742:	7810      	ldrb	r0, [r2, #0]
 800f744:	1e43      	subs	r3, r0, #1
 800f746:	4198      	sbcs	r0, r3
 800f748:	b002      	add	sp, #8
 800f74a:	4770      	bx	lr
 800f74c:	2002      	movs	r0, #2
 800f74e:	4240      	negs	r0, r0
 800f750:	e7fa      	b.n	800f748 <__ascii_mbtowc+0x1a>

0800f752 <__ascii_wctomb>:
 800f752:	0003      	movs	r3, r0
 800f754:	1e08      	subs	r0, r1, #0
 800f756:	d005      	beq.n	800f764 <__ascii_wctomb+0x12>
 800f758:	2aff      	cmp	r2, #255	@ 0xff
 800f75a:	d904      	bls.n	800f766 <__ascii_wctomb+0x14>
 800f75c:	228a      	movs	r2, #138	@ 0x8a
 800f75e:	2001      	movs	r0, #1
 800f760:	601a      	str	r2, [r3, #0]
 800f762:	4240      	negs	r0, r0
 800f764:	4770      	bx	lr
 800f766:	2001      	movs	r0, #1
 800f768:	700a      	strb	r2, [r1, #0]
 800f76a:	e7fb      	b.n	800f764 <__ascii_wctomb+0x12>

0800f76c <__swhatbuf_r>:
 800f76c:	b570      	push	{r4, r5, r6, lr}
 800f76e:	000e      	movs	r6, r1
 800f770:	001d      	movs	r5, r3
 800f772:	230e      	movs	r3, #14
 800f774:	5ec9      	ldrsh	r1, [r1, r3]
 800f776:	0014      	movs	r4, r2
 800f778:	b096      	sub	sp, #88	@ 0x58
 800f77a:	2900      	cmp	r1, #0
 800f77c:	da0c      	bge.n	800f798 <__swhatbuf_r+0x2c>
 800f77e:	89b2      	ldrh	r2, [r6, #12]
 800f780:	2380      	movs	r3, #128	@ 0x80
 800f782:	0011      	movs	r1, r2
 800f784:	4019      	ands	r1, r3
 800f786:	421a      	tst	r2, r3
 800f788:	d114      	bne.n	800f7b4 <__swhatbuf_r+0x48>
 800f78a:	2380      	movs	r3, #128	@ 0x80
 800f78c:	00db      	lsls	r3, r3, #3
 800f78e:	2000      	movs	r0, #0
 800f790:	6029      	str	r1, [r5, #0]
 800f792:	6023      	str	r3, [r4, #0]
 800f794:	b016      	add	sp, #88	@ 0x58
 800f796:	bd70      	pop	{r4, r5, r6, pc}
 800f798:	466a      	mov	r2, sp
 800f79a:	f000 f853 	bl	800f844 <_fstat_r>
 800f79e:	2800      	cmp	r0, #0
 800f7a0:	dbed      	blt.n	800f77e <__swhatbuf_r+0x12>
 800f7a2:	23f0      	movs	r3, #240	@ 0xf0
 800f7a4:	9901      	ldr	r1, [sp, #4]
 800f7a6:	021b      	lsls	r3, r3, #8
 800f7a8:	4019      	ands	r1, r3
 800f7aa:	4b04      	ldr	r3, [pc, #16]	@ (800f7bc <__swhatbuf_r+0x50>)
 800f7ac:	18c9      	adds	r1, r1, r3
 800f7ae:	424b      	negs	r3, r1
 800f7b0:	4159      	adcs	r1, r3
 800f7b2:	e7ea      	b.n	800f78a <__swhatbuf_r+0x1e>
 800f7b4:	2100      	movs	r1, #0
 800f7b6:	2340      	movs	r3, #64	@ 0x40
 800f7b8:	e7e9      	b.n	800f78e <__swhatbuf_r+0x22>
 800f7ba:	46c0      	nop			@ (mov r8, r8)
 800f7bc:	ffffe000 	.word	0xffffe000

0800f7c0 <__smakebuf_r>:
 800f7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7c2:	2602      	movs	r6, #2
 800f7c4:	898b      	ldrh	r3, [r1, #12]
 800f7c6:	0005      	movs	r5, r0
 800f7c8:	000c      	movs	r4, r1
 800f7ca:	b085      	sub	sp, #20
 800f7cc:	4233      	tst	r3, r6
 800f7ce:	d007      	beq.n	800f7e0 <__smakebuf_r+0x20>
 800f7d0:	0023      	movs	r3, r4
 800f7d2:	3347      	adds	r3, #71	@ 0x47
 800f7d4:	6023      	str	r3, [r4, #0]
 800f7d6:	6123      	str	r3, [r4, #16]
 800f7d8:	2301      	movs	r3, #1
 800f7da:	6163      	str	r3, [r4, #20]
 800f7dc:	b005      	add	sp, #20
 800f7de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7e0:	ab03      	add	r3, sp, #12
 800f7e2:	aa02      	add	r2, sp, #8
 800f7e4:	f7ff ffc2 	bl	800f76c <__swhatbuf_r>
 800f7e8:	9f02      	ldr	r7, [sp, #8]
 800f7ea:	9001      	str	r0, [sp, #4]
 800f7ec:	0039      	movs	r1, r7
 800f7ee:	0028      	movs	r0, r5
 800f7f0:	f7fd fb76 	bl	800cee0 <_malloc_r>
 800f7f4:	2800      	cmp	r0, #0
 800f7f6:	d108      	bne.n	800f80a <__smakebuf_r+0x4a>
 800f7f8:	220c      	movs	r2, #12
 800f7fa:	5ea3      	ldrsh	r3, [r4, r2]
 800f7fc:	059a      	lsls	r2, r3, #22
 800f7fe:	d4ed      	bmi.n	800f7dc <__smakebuf_r+0x1c>
 800f800:	2203      	movs	r2, #3
 800f802:	4393      	bics	r3, r2
 800f804:	431e      	orrs	r6, r3
 800f806:	81a6      	strh	r6, [r4, #12]
 800f808:	e7e2      	b.n	800f7d0 <__smakebuf_r+0x10>
 800f80a:	2380      	movs	r3, #128	@ 0x80
 800f80c:	89a2      	ldrh	r2, [r4, #12]
 800f80e:	6020      	str	r0, [r4, #0]
 800f810:	4313      	orrs	r3, r2
 800f812:	81a3      	strh	r3, [r4, #12]
 800f814:	9b03      	ldr	r3, [sp, #12]
 800f816:	6120      	str	r0, [r4, #16]
 800f818:	6167      	str	r7, [r4, #20]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d00c      	beq.n	800f838 <__smakebuf_r+0x78>
 800f81e:	0028      	movs	r0, r5
 800f820:	230e      	movs	r3, #14
 800f822:	5ee1      	ldrsh	r1, [r4, r3]
 800f824:	f000 f820 	bl	800f868 <_isatty_r>
 800f828:	2800      	cmp	r0, #0
 800f82a:	d005      	beq.n	800f838 <__smakebuf_r+0x78>
 800f82c:	2303      	movs	r3, #3
 800f82e:	89a2      	ldrh	r2, [r4, #12]
 800f830:	439a      	bics	r2, r3
 800f832:	3b02      	subs	r3, #2
 800f834:	4313      	orrs	r3, r2
 800f836:	81a3      	strh	r3, [r4, #12]
 800f838:	89a3      	ldrh	r3, [r4, #12]
 800f83a:	9a01      	ldr	r2, [sp, #4]
 800f83c:	4313      	orrs	r3, r2
 800f83e:	81a3      	strh	r3, [r4, #12]
 800f840:	e7cc      	b.n	800f7dc <__smakebuf_r+0x1c>
	...

0800f844 <_fstat_r>:
 800f844:	2300      	movs	r3, #0
 800f846:	b570      	push	{r4, r5, r6, lr}
 800f848:	4d06      	ldr	r5, [pc, #24]	@ (800f864 <_fstat_r+0x20>)
 800f84a:	0004      	movs	r4, r0
 800f84c:	0008      	movs	r0, r1
 800f84e:	0011      	movs	r1, r2
 800f850:	602b      	str	r3, [r5, #0]
 800f852:	f7f6 f906 	bl	8005a62 <_fstat>
 800f856:	1c43      	adds	r3, r0, #1
 800f858:	d103      	bne.n	800f862 <_fstat_r+0x1e>
 800f85a:	682b      	ldr	r3, [r5, #0]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d000      	beq.n	800f862 <_fstat_r+0x1e>
 800f860:	6023      	str	r3, [r4, #0]
 800f862:	bd70      	pop	{r4, r5, r6, pc}
 800f864:	20000740 	.word	0x20000740

0800f868 <_isatty_r>:
 800f868:	2300      	movs	r3, #0
 800f86a:	b570      	push	{r4, r5, r6, lr}
 800f86c:	4d06      	ldr	r5, [pc, #24]	@ (800f888 <_isatty_r+0x20>)
 800f86e:	0004      	movs	r4, r0
 800f870:	0008      	movs	r0, r1
 800f872:	602b      	str	r3, [r5, #0]
 800f874:	f7f6 f903 	bl	8005a7e <_isatty>
 800f878:	1c43      	adds	r3, r0, #1
 800f87a:	d103      	bne.n	800f884 <_isatty_r+0x1c>
 800f87c:	682b      	ldr	r3, [r5, #0]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d000      	beq.n	800f884 <_isatty_r+0x1c>
 800f882:	6023      	str	r3, [r4, #0]
 800f884:	bd70      	pop	{r4, r5, r6, pc}
 800f886:	46c0      	nop			@ (mov r8, r8)
 800f888:	20000740 	.word	0x20000740

0800f88c <abort>:
 800f88c:	2006      	movs	r0, #6
 800f88e:	b510      	push	{r4, lr}
 800f890:	f000 f82c 	bl	800f8ec <raise>
 800f894:	2001      	movs	r0, #1
 800f896:	f7f6 f894 	bl	80059c2 <_exit>

0800f89a <_raise_r>:
 800f89a:	b570      	push	{r4, r5, r6, lr}
 800f89c:	0004      	movs	r4, r0
 800f89e:	000d      	movs	r5, r1
 800f8a0:	291f      	cmp	r1, #31
 800f8a2:	d904      	bls.n	800f8ae <_raise_r+0x14>
 800f8a4:	2316      	movs	r3, #22
 800f8a6:	6003      	str	r3, [r0, #0]
 800f8a8:	2001      	movs	r0, #1
 800f8aa:	4240      	negs	r0, r0
 800f8ac:	bd70      	pop	{r4, r5, r6, pc}
 800f8ae:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d004      	beq.n	800f8be <_raise_r+0x24>
 800f8b4:	008a      	lsls	r2, r1, #2
 800f8b6:	189b      	adds	r3, r3, r2
 800f8b8:	681a      	ldr	r2, [r3, #0]
 800f8ba:	2a00      	cmp	r2, #0
 800f8bc:	d108      	bne.n	800f8d0 <_raise_r+0x36>
 800f8be:	0020      	movs	r0, r4
 800f8c0:	f000 f830 	bl	800f924 <_getpid_r>
 800f8c4:	002a      	movs	r2, r5
 800f8c6:	0001      	movs	r1, r0
 800f8c8:	0020      	movs	r0, r4
 800f8ca:	f000 f819 	bl	800f900 <_kill_r>
 800f8ce:	e7ed      	b.n	800f8ac <_raise_r+0x12>
 800f8d0:	2a01      	cmp	r2, #1
 800f8d2:	d009      	beq.n	800f8e8 <_raise_r+0x4e>
 800f8d4:	1c51      	adds	r1, r2, #1
 800f8d6:	d103      	bne.n	800f8e0 <_raise_r+0x46>
 800f8d8:	2316      	movs	r3, #22
 800f8da:	6003      	str	r3, [r0, #0]
 800f8dc:	2001      	movs	r0, #1
 800f8de:	e7e5      	b.n	800f8ac <_raise_r+0x12>
 800f8e0:	2100      	movs	r1, #0
 800f8e2:	0028      	movs	r0, r5
 800f8e4:	6019      	str	r1, [r3, #0]
 800f8e6:	4790      	blx	r2
 800f8e8:	2000      	movs	r0, #0
 800f8ea:	e7df      	b.n	800f8ac <_raise_r+0x12>

0800f8ec <raise>:
 800f8ec:	b510      	push	{r4, lr}
 800f8ee:	4b03      	ldr	r3, [pc, #12]	@ (800f8fc <raise+0x10>)
 800f8f0:	0001      	movs	r1, r0
 800f8f2:	6818      	ldr	r0, [r3, #0]
 800f8f4:	f7ff ffd1 	bl	800f89a <_raise_r>
 800f8f8:	bd10      	pop	{r4, pc}
 800f8fa:	46c0      	nop			@ (mov r8, r8)
 800f8fc:	20000184 	.word	0x20000184

0800f900 <_kill_r>:
 800f900:	2300      	movs	r3, #0
 800f902:	b570      	push	{r4, r5, r6, lr}
 800f904:	4d06      	ldr	r5, [pc, #24]	@ (800f920 <_kill_r+0x20>)
 800f906:	0004      	movs	r4, r0
 800f908:	0008      	movs	r0, r1
 800f90a:	0011      	movs	r1, r2
 800f90c:	602b      	str	r3, [r5, #0]
 800f90e:	f7f6 f848 	bl	80059a2 <_kill>
 800f912:	1c43      	adds	r3, r0, #1
 800f914:	d103      	bne.n	800f91e <_kill_r+0x1e>
 800f916:	682b      	ldr	r3, [r5, #0]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d000      	beq.n	800f91e <_kill_r+0x1e>
 800f91c:	6023      	str	r3, [r4, #0]
 800f91e:	bd70      	pop	{r4, r5, r6, pc}
 800f920:	20000740 	.word	0x20000740

0800f924 <_getpid_r>:
 800f924:	b510      	push	{r4, lr}
 800f926:	f7f6 f836 	bl	8005996 <_getpid>
 800f92a:	bd10      	pop	{r4, pc}

0800f92c <_init>:
 800f92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f92e:	46c0      	nop			@ (mov r8, r8)
 800f930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f932:	bc08      	pop	{r3}
 800f934:	469e      	mov	lr, r3
 800f936:	4770      	bx	lr

0800f938 <_fini>:
 800f938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f93a:	46c0      	nop			@ (mov r8, r8)
 800f93c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f93e:	bc08      	pop	{r3}
 800f940:	469e      	mov	lr, r3
 800f942:	4770      	bx	lr
