
e-paper_18x5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f53c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a6f0  0800f600  0800f600  00010600  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019cf0  08019cf0  0001b338  2**0
                  CONTENTS
  4 .ARM          00000008  08019cf0  08019cf0  0001acf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019cf8  08019cf8  0001b338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019cf8  08019cf8  0001acf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019cfc  08019cfc  0001acfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000338  20000000  08019d00  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  20000338  0801a038  0001b338  2**2
                  ALLOC
 10 ._user_heap_stack 00001900  20000718  0801a038  0001b718  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001b338  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fe11  00000000  00000000  0001b360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e14  00000000  00000000  0003b171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b18  00000000  00000000  0003ff88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014bf  00000000  00000000  00041aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025493  00000000  00000000  00042f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026019  00000000  00000000  000683f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4ff9  00000000  00000000  0008e40b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00163404  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007080  00000000  00000000  00163448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0016a4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000338 	.word	0x20000338
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800f5e4 	.word	0x0800f5e4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000033c 	.word	0x2000033c
 8000104:	0800f5e4 	.word	0x0800f5e4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f891 	bl	8001564 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ffd1 	bl	80013f4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f883 	bl	8001564 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f879 	bl	8001564 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fffb 	bl	800147c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fff1 	bl	800147c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__clzsi2>:
 80004a8:	211c      	movs	r1, #28
 80004aa:	2301      	movs	r3, #1
 80004ac:	041b      	lsls	r3, r3, #16
 80004ae:	4298      	cmp	r0, r3
 80004b0:	d301      	bcc.n	80004b6 <__clzsi2+0xe>
 80004b2:	0c00      	lsrs	r0, r0, #16
 80004b4:	3910      	subs	r1, #16
 80004b6:	0a1b      	lsrs	r3, r3, #8
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d301      	bcc.n	80004c0 <__clzsi2+0x18>
 80004bc:	0a00      	lsrs	r0, r0, #8
 80004be:	3908      	subs	r1, #8
 80004c0:	091b      	lsrs	r3, r3, #4
 80004c2:	4298      	cmp	r0, r3
 80004c4:	d301      	bcc.n	80004ca <__clzsi2+0x22>
 80004c6:	0900      	lsrs	r0, r0, #4
 80004c8:	3904      	subs	r1, #4
 80004ca:	a202      	add	r2, pc, #8	@ (adr r2, 80004d4 <__clzsi2+0x2c>)
 80004cc:	5c10      	ldrb	r0, [r2, r0]
 80004ce:	1840      	adds	r0, r0, r1
 80004d0:	4770      	bx	lr
 80004d2:	46c0      	nop			@ (mov r8, r8)
 80004d4:	02020304 	.word	0x02020304
 80004d8:	01010101 	.word	0x01010101
	...

080004e4 <__aeabi_uldivmod>:
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d111      	bne.n	800050c <__aeabi_uldivmod+0x28>
 80004e8:	2a00      	cmp	r2, #0
 80004ea:	d10f      	bne.n	800050c <__aeabi_uldivmod+0x28>
 80004ec:	2900      	cmp	r1, #0
 80004ee:	d100      	bne.n	80004f2 <__aeabi_uldivmod+0xe>
 80004f0:	2800      	cmp	r0, #0
 80004f2:	d002      	beq.n	80004fa <__aeabi_uldivmod+0x16>
 80004f4:	2100      	movs	r1, #0
 80004f6:	43c9      	mvns	r1, r1
 80004f8:	0008      	movs	r0, r1
 80004fa:	b407      	push	{r0, r1, r2}
 80004fc:	4802      	ldr	r0, [pc, #8]	@ (8000508 <__aeabi_uldivmod+0x24>)
 80004fe:	a102      	add	r1, pc, #8	@ (adr r1, 8000508 <__aeabi_uldivmod+0x24>)
 8000500:	1840      	adds	r0, r0, r1
 8000502:	9002      	str	r0, [sp, #8]
 8000504:	bd03      	pop	{r0, r1, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)
 8000508:	ffffff21 	.word	0xffffff21
 800050c:	b403      	push	{r0, r1}
 800050e:	4668      	mov	r0, sp
 8000510:	b501      	push	{r0, lr}
 8000512:	9802      	ldr	r0, [sp, #8]
 8000514:	f000 f824 	bl	8000560 <__udivmoddi4>
 8000518:	9b01      	ldr	r3, [sp, #4]
 800051a:	469e      	mov	lr, r3
 800051c:	b002      	add	sp, #8
 800051e:	bc0c      	pop	{r2, r3}
 8000520:	4770      	bx	lr
 8000522:	46c0      	nop			@ (mov r8, r8)

08000524 <__aeabi_d2uiz>:
 8000524:	b570      	push	{r4, r5, r6, lr}
 8000526:	2200      	movs	r2, #0
 8000528:	4b0c      	ldr	r3, [pc, #48]	@ (800055c <__aeabi_d2uiz+0x38>)
 800052a:	0004      	movs	r4, r0
 800052c:	000d      	movs	r5, r1
 800052e:	f7ff ffb1 	bl	8000494 <__aeabi_dcmpge>
 8000532:	2800      	cmp	r0, #0
 8000534:	d104      	bne.n	8000540 <__aeabi_d2uiz+0x1c>
 8000536:	0020      	movs	r0, r4
 8000538:	0029      	movs	r1, r5
 800053a:	f001 ff0b 	bl	8002354 <__aeabi_d2iz>
 800053e:	bd70      	pop	{r4, r5, r6, pc}
 8000540:	4b06      	ldr	r3, [pc, #24]	@ (800055c <__aeabi_d2uiz+0x38>)
 8000542:	2200      	movs	r2, #0
 8000544:	0020      	movs	r0, r4
 8000546:	0029      	movs	r1, r5
 8000548:	f001 fb46 	bl	8001bd8 <__aeabi_dsub>
 800054c:	f001 ff02 	bl	8002354 <__aeabi_d2iz>
 8000550:	2380      	movs	r3, #128	@ 0x80
 8000552:	061b      	lsls	r3, r3, #24
 8000554:	469c      	mov	ip, r3
 8000556:	4460      	add	r0, ip
 8000558:	e7f1      	b.n	800053e <__aeabi_d2uiz+0x1a>
 800055a:	46c0      	nop			@ (mov r8, r8)
 800055c:	41e00000 	.word	0x41e00000

08000560 <__udivmoddi4>:
 8000560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000562:	4657      	mov	r7, sl
 8000564:	464e      	mov	r6, r9
 8000566:	4645      	mov	r5, r8
 8000568:	46de      	mov	lr, fp
 800056a:	b5e0      	push	{r5, r6, r7, lr}
 800056c:	0004      	movs	r4, r0
 800056e:	000d      	movs	r5, r1
 8000570:	4692      	mov	sl, r2
 8000572:	4699      	mov	r9, r3
 8000574:	b083      	sub	sp, #12
 8000576:	428b      	cmp	r3, r1
 8000578:	d830      	bhi.n	80005dc <__udivmoddi4+0x7c>
 800057a:	d02d      	beq.n	80005d8 <__udivmoddi4+0x78>
 800057c:	4649      	mov	r1, r9
 800057e:	4650      	mov	r0, sl
 8000580:	f001 ff76 	bl	8002470 <__clzdi2>
 8000584:	0029      	movs	r1, r5
 8000586:	0006      	movs	r6, r0
 8000588:	0020      	movs	r0, r4
 800058a:	f001 ff71 	bl	8002470 <__clzdi2>
 800058e:	1a33      	subs	r3, r6, r0
 8000590:	4698      	mov	r8, r3
 8000592:	3b20      	subs	r3, #32
 8000594:	d434      	bmi.n	8000600 <__udivmoddi4+0xa0>
 8000596:	469b      	mov	fp, r3
 8000598:	4653      	mov	r3, sl
 800059a:	465a      	mov	r2, fp
 800059c:	4093      	lsls	r3, r2
 800059e:	4642      	mov	r2, r8
 80005a0:	001f      	movs	r7, r3
 80005a2:	4653      	mov	r3, sl
 80005a4:	4093      	lsls	r3, r2
 80005a6:	001e      	movs	r6, r3
 80005a8:	42af      	cmp	r7, r5
 80005aa:	d83b      	bhi.n	8000624 <__udivmoddi4+0xc4>
 80005ac:	42af      	cmp	r7, r5
 80005ae:	d100      	bne.n	80005b2 <__udivmoddi4+0x52>
 80005b0:	e079      	b.n	80006a6 <__udivmoddi4+0x146>
 80005b2:	465b      	mov	r3, fp
 80005b4:	1ba4      	subs	r4, r4, r6
 80005b6:	41bd      	sbcs	r5, r7
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	da00      	bge.n	80005be <__udivmoddi4+0x5e>
 80005bc:	e076      	b.n	80006ac <__udivmoddi4+0x14c>
 80005be:	2200      	movs	r2, #0
 80005c0:	2300      	movs	r3, #0
 80005c2:	9200      	str	r2, [sp, #0]
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2301      	movs	r3, #1
 80005c8:	465a      	mov	r2, fp
 80005ca:	4093      	lsls	r3, r2
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2301      	movs	r3, #1
 80005d0:	4642      	mov	r2, r8
 80005d2:	4093      	lsls	r3, r2
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	e029      	b.n	800062c <__udivmoddi4+0xcc>
 80005d8:	4282      	cmp	r2, r0
 80005da:	d9cf      	bls.n	800057c <__udivmoddi4+0x1c>
 80005dc:	2200      	movs	r2, #0
 80005de:	2300      	movs	r3, #0
 80005e0:	9200      	str	r2, [sp, #0]
 80005e2:	9301      	str	r3, [sp, #4]
 80005e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <__udivmoddi4+0x8e>
 80005ea:	601c      	str	r4, [r3, #0]
 80005ec:	605d      	str	r5, [r3, #4]
 80005ee:	9800      	ldr	r0, [sp, #0]
 80005f0:	9901      	ldr	r1, [sp, #4]
 80005f2:	b003      	add	sp, #12
 80005f4:	bcf0      	pop	{r4, r5, r6, r7}
 80005f6:	46bb      	mov	fp, r7
 80005f8:	46b2      	mov	sl, r6
 80005fa:	46a9      	mov	r9, r5
 80005fc:	46a0      	mov	r8, r4
 80005fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000600:	4642      	mov	r2, r8
 8000602:	469b      	mov	fp, r3
 8000604:	2320      	movs	r3, #32
 8000606:	1a9b      	subs	r3, r3, r2
 8000608:	4652      	mov	r2, sl
 800060a:	40da      	lsrs	r2, r3
 800060c:	4641      	mov	r1, r8
 800060e:	0013      	movs	r3, r2
 8000610:	464a      	mov	r2, r9
 8000612:	408a      	lsls	r2, r1
 8000614:	0017      	movs	r7, r2
 8000616:	4642      	mov	r2, r8
 8000618:	431f      	orrs	r7, r3
 800061a:	4653      	mov	r3, sl
 800061c:	4093      	lsls	r3, r2
 800061e:	001e      	movs	r6, r3
 8000620:	42af      	cmp	r7, r5
 8000622:	d9c3      	bls.n	80005ac <__udivmoddi4+0x4c>
 8000624:	2200      	movs	r2, #0
 8000626:	2300      	movs	r3, #0
 8000628:	9200      	str	r2, [sp, #0]
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	4643      	mov	r3, r8
 800062e:	2b00      	cmp	r3, #0
 8000630:	d0d8      	beq.n	80005e4 <__udivmoddi4+0x84>
 8000632:	07fb      	lsls	r3, r7, #31
 8000634:	0872      	lsrs	r2, r6, #1
 8000636:	431a      	orrs	r2, r3
 8000638:	4646      	mov	r6, r8
 800063a:	087b      	lsrs	r3, r7, #1
 800063c:	e00e      	b.n	800065c <__udivmoddi4+0xfc>
 800063e:	42ab      	cmp	r3, r5
 8000640:	d101      	bne.n	8000646 <__udivmoddi4+0xe6>
 8000642:	42a2      	cmp	r2, r4
 8000644:	d80c      	bhi.n	8000660 <__udivmoddi4+0x100>
 8000646:	1aa4      	subs	r4, r4, r2
 8000648:	419d      	sbcs	r5, r3
 800064a:	2001      	movs	r0, #1
 800064c:	1924      	adds	r4, r4, r4
 800064e:	416d      	adcs	r5, r5
 8000650:	2100      	movs	r1, #0
 8000652:	3e01      	subs	r6, #1
 8000654:	1824      	adds	r4, r4, r0
 8000656:	414d      	adcs	r5, r1
 8000658:	2e00      	cmp	r6, #0
 800065a:	d006      	beq.n	800066a <__udivmoddi4+0x10a>
 800065c:	42ab      	cmp	r3, r5
 800065e:	d9ee      	bls.n	800063e <__udivmoddi4+0xde>
 8000660:	3e01      	subs	r6, #1
 8000662:	1924      	adds	r4, r4, r4
 8000664:	416d      	adcs	r5, r5
 8000666:	2e00      	cmp	r6, #0
 8000668:	d1f8      	bne.n	800065c <__udivmoddi4+0xfc>
 800066a:	9800      	ldr	r0, [sp, #0]
 800066c:	9901      	ldr	r1, [sp, #4]
 800066e:	465b      	mov	r3, fp
 8000670:	1900      	adds	r0, r0, r4
 8000672:	4169      	adcs	r1, r5
 8000674:	2b00      	cmp	r3, #0
 8000676:	db24      	blt.n	80006c2 <__udivmoddi4+0x162>
 8000678:	002b      	movs	r3, r5
 800067a:	465a      	mov	r2, fp
 800067c:	4644      	mov	r4, r8
 800067e:	40d3      	lsrs	r3, r2
 8000680:	002a      	movs	r2, r5
 8000682:	40e2      	lsrs	r2, r4
 8000684:	001c      	movs	r4, r3
 8000686:	465b      	mov	r3, fp
 8000688:	0015      	movs	r5, r2
 800068a:	2b00      	cmp	r3, #0
 800068c:	db2a      	blt.n	80006e4 <__udivmoddi4+0x184>
 800068e:	0026      	movs	r6, r4
 8000690:	409e      	lsls	r6, r3
 8000692:	0033      	movs	r3, r6
 8000694:	0026      	movs	r6, r4
 8000696:	4647      	mov	r7, r8
 8000698:	40be      	lsls	r6, r7
 800069a:	0032      	movs	r2, r6
 800069c:	1a80      	subs	r0, r0, r2
 800069e:	4199      	sbcs	r1, r3
 80006a0:	9000      	str	r0, [sp, #0]
 80006a2:	9101      	str	r1, [sp, #4]
 80006a4:	e79e      	b.n	80005e4 <__udivmoddi4+0x84>
 80006a6:	42a3      	cmp	r3, r4
 80006a8:	d8bc      	bhi.n	8000624 <__udivmoddi4+0xc4>
 80006aa:	e782      	b.n	80005b2 <__udivmoddi4+0x52>
 80006ac:	4642      	mov	r2, r8
 80006ae:	2320      	movs	r3, #32
 80006b0:	2100      	movs	r1, #0
 80006b2:	1a9b      	subs	r3, r3, r2
 80006b4:	2200      	movs	r2, #0
 80006b6:	9100      	str	r1, [sp, #0]
 80006b8:	9201      	str	r2, [sp, #4]
 80006ba:	2201      	movs	r2, #1
 80006bc:	40da      	lsrs	r2, r3
 80006be:	9201      	str	r2, [sp, #4]
 80006c0:	e785      	b.n	80005ce <__udivmoddi4+0x6e>
 80006c2:	4642      	mov	r2, r8
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	002a      	movs	r2, r5
 80006ca:	4646      	mov	r6, r8
 80006cc:	409a      	lsls	r2, r3
 80006ce:	0023      	movs	r3, r4
 80006d0:	40f3      	lsrs	r3, r6
 80006d2:	4644      	mov	r4, r8
 80006d4:	4313      	orrs	r3, r2
 80006d6:	002a      	movs	r2, r5
 80006d8:	40e2      	lsrs	r2, r4
 80006da:	001c      	movs	r4, r3
 80006dc:	465b      	mov	r3, fp
 80006de:	0015      	movs	r5, r2
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	dad4      	bge.n	800068e <__udivmoddi4+0x12e>
 80006e4:	4642      	mov	r2, r8
 80006e6:	002f      	movs	r7, r5
 80006e8:	2320      	movs	r3, #32
 80006ea:	0026      	movs	r6, r4
 80006ec:	4097      	lsls	r7, r2
 80006ee:	1a9b      	subs	r3, r3, r2
 80006f0:	40de      	lsrs	r6, r3
 80006f2:	003b      	movs	r3, r7
 80006f4:	4333      	orrs	r3, r6
 80006f6:	e7cd      	b.n	8000694 <__udivmoddi4+0x134>

080006f8 <__aeabi_dadd>:
 80006f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006fa:	4657      	mov	r7, sl
 80006fc:	464e      	mov	r6, r9
 80006fe:	4645      	mov	r5, r8
 8000700:	46de      	mov	lr, fp
 8000702:	b5e0      	push	{r5, r6, r7, lr}
 8000704:	b083      	sub	sp, #12
 8000706:	9000      	str	r0, [sp, #0]
 8000708:	9101      	str	r1, [sp, #4]
 800070a:	030c      	lsls	r4, r1, #12
 800070c:	004f      	lsls	r7, r1, #1
 800070e:	0fce      	lsrs	r6, r1, #31
 8000710:	0a61      	lsrs	r1, r4, #9
 8000712:	9c00      	ldr	r4, [sp, #0]
 8000714:	031d      	lsls	r5, r3, #12
 8000716:	0f64      	lsrs	r4, r4, #29
 8000718:	430c      	orrs	r4, r1
 800071a:	9900      	ldr	r1, [sp, #0]
 800071c:	9200      	str	r2, [sp, #0]
 800071e:	9301      	str	r3, [sp, #4]
 8000720:	00c8      	lsls	r0, r1, #3
 8000722:	0059      	lsls	r1, r3, #1
 8000724:	0d4b      	lsrs	r3, r1, #21
 8000726:	4699      	mov	r9, r3
 8000728:	9a00      	ldr	r2, [sp, #0]
 800072a:	9b01      	ldr	r3, [sp, #4]
 800072c:	0a6d      	lsrs	r5, r5, #9
 800072e:	0fd9      	lsrs	r1, r3, #31
 8000730:	0f53      	lsrs	r3, r2, #29
 8000732:	432b      	orrs	r3, r5
 8000734:	469a      	mov	sl, r3
 8000736:	9b00      	ldr	r3, [sp, #0]
 8000738:	0d7f      	lsrs	r7, r7, #21
 800073a:	00da      	lsls	r2, r3, #3
 800073c:	4694      	mov	ip, r2
 800073e:	464a      	mov	r2, r9
 8000740:	46b0      	mov	r8, r6
 8000742:	1aba      	subs	r2, r7, r2
 8000744:	428e      	cmp	r6, r1
 8000746:	d100      	bne.n	800074a <__aeabi_dadd+0x52>
 8000748:	e0b0      	b.n	80008ac <__aeabi_dadd+0x1b4>
 800074a:	2a00      	cmp	r2, #0
 800074c:	dc00      	bgt.n	8000750 <__aeabi_dadd+0x58>
 800074e:	e078      	b.n	8000842 <__aeabi_dadd+0x14a>
 8000750:	4649      	mov	r1, r9
 8000752:	2900      	cmp	r1, #0
 8000754:	d100      	bne.n	8000758 <__aeabi_dadd+0x60>
 8000756:	e0e9      	b.n	800092c <__aeabi_dadd+0x234>
 8000758:	49c9      	ldr	r1, [pc, #804]	@ (8000a80 <__aeabi_dadd+0x388>)
 800075a:	428f      	cmp	r7, r1
 800075c:	d100      	bne.n	8000760 <__aeabi_dadd+0x68>
 800075e:	e195      	b.n	8000a8c <__aeabi_dadd+0x394>
 8000760:	2501      	movs	r5, #1
 8000762:	2a38      	cmp	r2, #56	@ 0x38
 8000764:	dc16      	bgt.n	8000794 <__aeabi_dadd+0x9c>
 8000766:	2180      	movs	r1, #128	@ 0x80
 8000768:	4653      	mov	r3, sl
 800076a:	0409      	lsls	r1, r1, #16
 800076c:	430b      	orrs	r3, r1
 800076e:	469a      	mov	sl, r3
 8000770:	2a1f      	cmp	r2, #31
 8000772:	dd00      	ble.n	8000776 <__aeabi_dadd+0x7e>
 8000774:	e1e7      	b.n	8000b46 <__aeabi_dadd+0x44e>
 8000776:	2120      	movs	r1, #32
 8000778:	4655      	mov	r5, sl
 800077a:	1a8b      	subs	r3, r1, r2
 800077c:	4661      	mov	r1, ip
 800077e:	409d      	lsls	r5, r3
 8000780:	40d1      	lsrs	r1, r2
 8000782:	430d      	orrs	r5, r1
 8000784:	4661      	mov	r1, ip
 8000786:	4099      	lsls	r1, r3
 8000788:	1e4b      	subs	r3, r1, #1
 800078a:	4199      	sbcs	r1, r3
 800078c:	4653      	mov	r3, sl
 800078e:	40d3      	lsrs	r3, r2
 8000790:	430d      	orrs	r5, r1
 8000792:	1ae4      	subs	r4, r4, r3
 8000794:	1b45      	subs	r5, r0, r5
 8000796:	42a8      	cmp	r0, r5
 8000798:	4180      	sbcs	r0, r0
 800079a:	4240      	negs	r0, r0
 800079c:	1a24      	subs	r4, r4, r0
 800079e:	0223      	lsls	r3, r4, #8
 80007a0:	d400      	bmi.n	80007a4 <__aeabi_dadd+0xac>
 80007a2:	e10f      	b.n	80009c4 <__aeabi_dadd+0x2cc>
 80007a4:	0264      	lsls	r4, r4, #9
 80007a6:	0a64      	lsrs	r4, r4, #9
 80007a8:	2c00      	cmp	r4, #0
 80007aa:	d100      	bne.n	80007ae <__aeabi_dadd+0xb6>
 80007ac:	e139      	b.n	8000a22 <__aeabi_dadd+0x32a>
 80007ae:	0020      	movs	r0, r4
 80007b0:	f7ff fe7a 	bl	80004a8 <__clzsi2>
 80007b4:	0003      	movs	r3, r0
 80007b6:	3b08      	subs	r3, #8
 80007b8:	2120      	movs	r1, #32
 80007ba:	0028      	movs	r0, r5
 80007bc:	1aca      	subs	r2, r1, r3
 80007be:	40d0      	lsrs	r0, r2
 80007c0:	409c      	lsls	r4, r3
 80007c2:	0002      	movs	r2, r0
 80007c4:	409d      	lsls	r5, r3
 80007c6:	4322      	orrs	r2, r4
 80007c8:	429f      	cmp	r7, r3
 80007ca:	dd00      	ble.n	80007ce <__aeabi_dadd+0xd6>
 80007cc:	e173      	b.n	8000ab6 <__aeabi_dadd+0x3be>
 80007ce:	1bd8      	subs	r0, r3, r7
 80007d0:	3001      	adds	r0, #1
 80007d2:	1a09      	subs	r1, r1, r0
 80007d4:	002c      	movs	r4, r5
 80007d6:	408d      	lsls	r5, r1
 80007d8:	40c4      	lsrs	r4, r0
 80007da:	1e6b      	subs	r3, r5, #1
 80007dc:	419d      	sbcs	r5, r3
 80007de:	0013      	movs	r3, r2
 80007e0:	40c2      	lsrs	r2, r0
 80007e2:	408b      	lsls	r3, r1
 80007e4:	4325      	orrs	r5, r4
 80007e6:	2700      	movs	r7, #0
 80007e8:	0014      	movs	r4, r2
 80007ea:	431d      	orrs	r5, r3
 80007ec:	076b      	lsls	r3, r5, #29
 80007ee:	d009      	beq.n	8000804 <__aeabi_dadd+0x10c>
 80007f0:	230f      	movs	r3, #15
 80007f2:	402b      	ands	r3, r5
 80007f4:	2b04      	cmp	r3, #4
 80007f6:	d005      	beq.n	8000804 <__aeabi_dadd+0x10c>
 80007f8:	1d2b      	adds	r3, r5, #4
 80007fa:	42ab      	cmp	r3, r5
 80007fc:	41ad      	sbcs	r5, r5
 80007fe:	426d      	negs	r5, r5
 8000800:	1964      	adds	r4, r4, r5
 8000802:	001d      	movs	r5, r3
 8000804:	0223      	lsls	r3, r4, #8
 8000806:	d400      	bmi.n	800080a <__aeabi_dadd+0x112>
 8000808:	e12d      	b.n	8000a66 <__aeabi_dadd+0x36e>
 800080a:	4a9d      	ldr	r2, [pc, #628]	@ (8000a80 <__aeabi_dadd+0x388>)
 800080c:	3701      	adds	r7, #1
 800080e:	4297      	cmp	r7, r2
 8000810:	d100      	bne.n	8000814 <__aeabi_dadd+0x11c>
 8000812:	e0d3      	b.n	80009bc <__aeabi_dadd+0x2c4>
 8000814:	4646      	mov	r6, r8
 8000816:	499b      	ldr	r1, [pc, #620]	@ (8000a84 <__aeabi_dadd+0x38c>)
 8000818:	08ed      	lsrs	r5, r5, #3
 800081a:	4021      	ands	r1, r4
 800081c:	074a      	lsls	r2, r1, #29
 800081e:	432a      	orrs	r2, r5
 8000820:	057c      	lsls	r4, r7, #21
 8000822:	024d      	lsls	r5, r1, #9
 8000824:	0b2d      	lsrs	r5, r5, #12
 8000826:	0d64      	lsrs	r4, r4, #21
 8000828:	0524      	lsls	r4, r4, #20
 800082a:	432c      	orrs	r4, r5
 800082c:	07f6      	lsls	r6, r6, #31
 800082e:	4334      	orrs	r4, r6
 8000830:	0010      	movs	r0, r2
 8000832:	0021      	movs	r1, r4
 8000834:	b003      	add	sp, #12
 8000836:	bcf0      	pop	{r4, r5, r6, r7}
 8000838:	46bb      	mov	fp, r7
 800083a:	46b2      	mov	sl, r6
 800083c:	46a9      	mov	r9, r5
 800083e:	46a0      	mov	r8, r4
 8000840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000842:	2a00      	cmp	r2, #0
 8000844:	d100      	bne.n	8000848 <__aeabi_dadd+0x150>
 8000846:	e084      	b.n	8000952 <__aeabi_dadd+0x25a>
 8000848:	464a      	mov	r2, r9
 800084a:	1bd2      	subs	r2, r2, r7
 800084c:	2f00      	cmp	r7, #0
 800084e:	d000      	beq.n	8000852 <__aeabi_dadd+0x15a>
 8000850:	e16d      	b.n	8000b2e <__aeabi_dadd+0x436>
 8000852:	0025      	movs	r5, r4
 8000854:	4305      	orrs	r5, r0
 8000856:	d100      	bne.n	800085a <__aeabi_dadd+0x162>
 8000858:	e127      	b.n	8000aaa <__aeabi_dadd+0x3b2>
 800085a:	1e56      	subs	r6, r2, #1
 800085c:	2a01      	cmp	r2, #1
 800085e:	d100      	bne.n	8000862 <__aeabi_dadd+0x16a>
 8000860:	e23b      	b.n	8000cda <__aeabi_dadd+0x5e2>
 8000862:	4d87      	ldr	r5, [pc, #540]	@ (8000a80 <__aeabi_dadd+0x388>)
 8000864:	42aa      	cmp	r2, r5
 8000866:	d100      	bne.n	800086a <__aeabi_dadd+0x172>
 8000868:	e26a      	b.n	8000d40 <__aeabi_dadd+0x648>
 800086a:	2501      	movs	r5, #1
 800086c:	2e38      	cmp	r6, #56	@ 0x38
 800086e:	dc12      	bgt.n	8000896 <__aeabi_dadd+0x19e>
 8000870:	0032      	movs	r2, r6
 8000872:	2a1f      	cmp	r2, #31
 8000874:	dd00      	ble.n	8000878 <__aeabi_dadd+0x180>
 8000876:	e1f8      	b.n	8000c6a <__aeabi_dadd+0x572>
 8000878:	2620      	movs	r6, #32
 800087a:	0025      	movs	r5, r4
 800087c:	1ab6      	subs	r6, r6, r2
 800087e:	0007      	movs	r7, r0
 8000880:	4653      	mov	r3, sl
 8000882:	40b0      	lsls	r0, r6
 8000884:	40d4      	lsrs	r4, r2
 8000886:	40b5      	lsls	r5, r6
 8000888:	40d7      	lsrs	r7, r2
 800088a:	1e46      	subs	r6, r0, #1
 800088c:	41b0      	sbcs	r0, r6
 800088e:	1b1b      	subs	r3, r3, r4
 8000890:	469a      	mov	sl, r3
 8000892:	433d      	orrs	r5, r7
 8000894:	4305      	orrs	r5, r0
 8000896:	4662      	mov	r2, ip
 8000898:	1b55      	subs	r5, r2, r5
 800089a:	45ac      	cmp	ip, r5
 800089c:	4192      	sbcs	r2, r2
 800089e:	4653      	mov	r3, sl
 80008a0:	4252      	negs	r2, r2
 80008a2:	000e      	movs	r6, r1
 80008a4:	464f      	mov	r7, r9
 80008a6:	4688      	mov	r8, r1
 80008a8:	1a9c      	subs	r4, r3, r2
 80008aa:	e778      	b.n	800079e <__aeabi_dadd+0xa6>
 80008ac:	2a00      	cmp	r2, #0
 80008ae:	dc00      	bgt.n	80008b2 <__aeabi_dadd+0x1ba>
 80008b0:	e08e      	b.n	80009d0 <__aeabi_dadd+0x2d8>
 80008b2:	4649      	mov	r1, r9
 80008b4:	2900      	cmp	r1, #0
 80008b6:	d175      	bne.n	80009a4 <__aeabi_dadd+0x2ac>
 80008b8:	4661      	mov	r1, ip
 80008ba:	4653      	mov	r3, sl
 80008bc:	4319      	orrs	r1, r3
 80008be:	d100      	bne.n	80008c2 <__aeabi_dadd+0x1ca>
 80008c0:	e0f6      	b.n	8000ab0 <__aeabi_dadd+0x3b8>
 80008c2:	1e51      	subs	r1, r2, #1
 80008c4:	2a01      	cmp	r2, #1
 80008c6:	d100      	bne.n	80008ca <__aeabi_dadd+0x1d2>
 80008c8:	e191      	b.n	8000bee <__aeabi_dadd+0x4f6>
 80008ca:	4d6d      	ldr	r5, [pc, #436]	@ (8000a80 <__aeabi_dadd+0x388>)
 80008cc:	42aa      	cmp	r2, r5
 80008ce:	d100      	bne.n	80008d2 <__aeabi_dadd+0x1da>
 80008d0:	e0dc      	b.n	8000a8c <__aeabi_dadd+0x394>
 80008d2:	2501      	movs	r5, #1
 80008d4:	2938      	cmp	r1, #56	@ 0x38
 80008d6:	dc14      	bgt.n	8000902 <__aeabi_dadd+0x20a>
 80008d8:	000a      	movs	r2, r1
 80008da:	2a1f      	cmp	r2, #31
 80008dc:	dd00      	ble.n	80008e0 <__aeabi_dadd+0x1e8>
 80008de:	e1a2      	b.n	8000c26 <__aeabi_dadd+0x52e>
 80008e0:	2120      	movs	r1, #32
 80008e2:	4653      	mov	r3, sl
 80008e4:	1a89      	subs	r1, r1, r2
 80008e6:	408b      	lsls	r3, r1
 80008e8:	001d      	movs	r5, r3
 80008ea:	4663      	mov	r3, ip
 80008ec:	40d3      	lsrs	r3, r2
 80008ee:	431d      	orrs	r5, r3
 80008f0:	4663      	mov	r3, ip
 80008f2:	408b      	lsls	r3, r1
 80008f4:	0019      	movs	r1, r3
 80008f6:	1e4b      	subs	r3, r1, #1
 80008f8:	4199      	sbcs	r1, r3
 80008fa:	4653      	mov	r3, sl
 80008fc:	40d3      	lsrs	r3, r2
 80008fe:	430d      	orrs	r5, r1
 8000900:	18e4      	adds	r4, r4, r3
 8000902:	182d      	adds	r5, r5, r0
 8000904:	4285      	cmp	r5, r0
 8000906:	4180      	sbcs	r0, r0
 8000908:	4240      	negs	r0, r0
 800090a:	1824      	adds	r4, r4, r0
 800090c:	0223      	lsls	r3, r4, #8
 800090e:	d559      	bpl.n	80009c4 <__aeabi_dadd+0x2cc>
 8000910:	4b5b      	ldr	r3, [pc, #364]	@ (8000a80 <__aeabi_dadd+0x388>)
 8000912:	3701      	adds	r7, #1
 8000914:	429f      	cmp	r7, r3
 8000916:	d051      	beq.n	80009bc <__aeabi_dadd+0x2c4>
 8000918:	2101      	movs	r1, #1
 800091a:	4b5a      	ldr	r3, [pc, #360]	@ (8000a84 <__aeabi_dadd+0x38c>)
 800091c:	086a      	lsrs	r2, r5, #1
 800091e:	401c      	ands	r4, r3
 8000920:	4029      	ands	r1, r5
 8000922:	430a      	orrs	r2, r1
 8000924:	07e5      	lsls	r5, r4, #31
 8000926:	4315      	orrs	r5, r2
 8000928:	0864      	lsrs	r4, r4, #1
 800092a:	e75f      	b.n	80007ec <__aeabi_dadd+0xf4>
 800092c:	4661      	mov	r1, ip
 800092e:	4653      	mov	r3, sl
 8000930:	4319      	orrs	r1, r3
 8000932:	d100      	bne.n	8000936 <__aeabi_dadd+0x23e>
 8000934:	e0bc      	b.n	8000ab0 <__aeabi_dadd+0x3b8>
 8000936:	1e51      	subs	r1, r2, #1
 8000938:	2a01      	cmp	r2, #1
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x246>
 800093c:	e164      	b.n	8000c08 <__aeabi_dadd+0x510>
 800093e:	4d50      	ldr	r5, [pc, #320]	@ (8000a80 <__aeabi_dadd+0x388>)
 8000940:	42aa      	cmp	r2, r5
 8000942:	d100      	bne.n	8000946 <__aeabi_dadd+0x24e>
 8000944:	e16a      	b.n	8000c1c <__aeabi_dadd+0x524>
 8000946:	2501      	movs	r5, #1
 8000948:	2938      	cmp	r1, #56	@ 0x38
 800094a:	dd00      	ble.n	800094e <__aeabi_dadd+0x256>
 800094c:	e722      	b.n	8000794 <__aeabi_dadd+0x9c>
 800094e:	000a      	movs	r2, r1
 8000950:	e70e      	b.n	8000770 <__aeabi_dadd+0x78>
 8000952:	4a4d      	ldr	r2, [pc, #308]	@ (8000a88 <__aeabi_dadd+0x390>)
 8000954:	1c7d      	adds	r5, r7, #1
 8000956:	4215      	tst	r5, r2
 8000958:	d000      	beq.n	800095c <__aeabi_dadd+0x264>
 800095a:	e0d0      	b.n	8000afe <__aeabi_dadd+0x406>
 800095c:	0025      	movs	r5, r4
 800095e:	4662      	mov	r2, ip
 8000960:	4653      	mov	r3, sl
 8000962:	4305      	orrs	r5, r0
 8000964:	431a      	orrs	r2, r3
 8000966:	2f00      	cmp	r7, #0
 8000968:	d000      	beq.n	800096c <__aeabi_dadd+0x274>
 800096a:	e137      	b.n	8000bdc <__aeabi_dadd+0x4e4>
 800096c:	2d00      	cmp	r5, #0
 800096e:	d100      	bne.n	8000972 <__aeabi_dadd+0x27a>
 8000970:	e1a8      	b.n	8000cc4 <__aeabi_dadd+0x5cc>
 8000972:	2a00      	cmp	r2, #0
 8000974:	d100      	bne.n	8000978 <__aeabi_dadd+0x280>
 8000976:	e16a      	b.n	8000c4e <__aeabi_dadd+0x556>
 8000978:	4663      	mov	r3, ip
 800097a:	1ac5      	subs	r5, r0, r3
 800097c:	4653      	mov	r3, sl
 800097e:	1ae2      	subs	r2, r4, r3
 8000980:	42a8      	cmp	r0, r5
 8000982:	419b      	sbcs	r3, r3
 8000984:	425b      	negs	r3, r3
 8000986:	1ad3      	subs	r3, r2, r3
 8000988:	021a      	lsls	r2, r3, #8
 800098a:	d400      	bmi.n	800098e <__aeabi_dadd+0x296>
 800098c:	e203      	b.n	8000d96 <__aeabi_dadd+0x69e>
 800098e:	4663      	mov	r3, ip
 8000990:	1a1d      	subs	r5, r3, r0
 8000992:	45ac      	cmp	ip, r5
 8000994:	4192      	sbcs	r2, r2
 8000996:	4653      	mov	r3, sl
 8000998:	4252      	negs	r2, r2
 800099a:	1b1c      	subs	r4, r3, r4
 800099c:	000e      	movs	r6, r1
 800099e:	4688      	mov	r8, r1
 80009a0:	1aa4      	subs	r4, r4, r2
 80009a2:	e723      	b.n	80007ec <__aeabi_dadd+0xf4>
 80009a4:	4936      	ldr	r1, [pc, #216]	@ (8000a80 <__aeabi_dadd+0x388>)
 80009a6:	428f      	cmp	r7, r1
 80009a8:	d070      	beq.n	8000a8c <__aeabi_dadd+0x394>
 80009aa:	2501      	movs	r5, #1
 80009ac:	2a38      	cmp	r2, #56	@ 0x38
 80009ae:	dca8      	bgt.n	8000902 <__aeabi_dadd+0x20a>
 80009b0:	2180      	movs	r1, #128	@ 0x80
 80009b2:	4653      	mov	r3, sl
 80009b4:	0409      	lsls	r1, r1, #16
 80009b6:	430b      	orrs	r3, r1
 80009b8:	469a      	mov	sl, r3
 80009ba:	e78e      	b.n	80008da <__aeabi_dadd+0x1e2>
 80009bc:	003c      	movs	r4, r7
 80009be:	2500      	movs	r5, #0
 80009c0:	2200      	movs	r2, #0
 80009c2:	e731      	b.n	8000828 <__aeabi_dadd+0x130>
 80009c4:	2307      	movs	r3, #7
 80009c6:	402b      	ands	r3, r5
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d000      	beq.n	80009ce <__aeabi_dadd+0x2d6>
 80009cc:	e710      	b.n	80007f0 <__aeabi_dadd+0xf8>
 80009ce:	e093      	b.n	8000af8 <__aeabi_dadd+0x400>
 80009d0:	2a00      	cmp	r2, #0
 80009d2:	d074      	beq.n	8000abe <__aeabi_dadd+0x3c6>
 80009d4:	464a      	mov	r2, r9
 80009d6:	1bd2      	subs	r2, r2, r7
 80009d8:	2f00      	cmp	r7, #0
 80009da:	d100      	bne.n	80009de <__aeabi_dadd+0x2e6>
 80009dc:	e0c7      	b.n	8000b6e <__aeabi_dadd+0x476>
 80009de:	4928      	ldr	r1, [pc, #160]	@ (8000a80 <__aeabi_dadd+0x388>)
 80009e0:	4589      	cmp	r9, r1
 80009e2:	d100      	bne.n	80009e6 <__aeabi_dadd+0x2ee>
 80009e4:	e185      	b.n	8000cf2 <__aeabi_dadd+0x5fa>
 80009e6:	2501      	movs	r5, #1
 80009e8:	2a38      	cmp	r2, #56	@ 0x38
 80009ea:	dc12      	bgt.n	8000a12 <__aeabi_dadd+0x31a>
 80009ec:	2180      	movs	r1, #128	@ 0x80
 80009ee:	0409      	lsls	r1, r1, #16
 80009f0:	430c      	orrs	r4, r1
 80009f2:	2a1f      	cmp	r2, #31
 80009f4:	dd00      	ble.n	80009f8 <__aeabi_dadd+0x300>
 80009f6:	e1ab      	b.n	8000d50 <__aeabi_dadd+0x658>
 80009f8:	2120      	movs	r1, #32
 80009fa:	0025      	movs	r5, r4
 80009fc:	1a89      	subs	r1, r1, r2
 80009fe:	0007      	movs	r7, r0
 8000a00:	4088      	lsls	r0, r1
 8000a02:	408d      	lsls	r5, r1
 8000a04:	40d7      	lsrs	r7, r2
 8000a06:	1e41      	subs	r1, r0, #1
 8000a08:	4188      	sbcs	r0, r1
 8000a0a:	40d4      	lsrs	r4, r2
 8000a0c:	433d      	orrs	r5, r7
 8000a0e:	4305      	orrs	r5, r0
 8000a10:	44a2      	add	sl, r4
 8000a12:	4465      	add	r5, ip
 8000a14:	4565      	cmp	r5, ip
 8000a16:	4192      	sbcs	r2, r2
 8000a18:	4252      	negs	r2, r2
 8000a1a:	4452      	add	r2, sl
 8000a1c:	0014      	movs	r4, r2
 8000a1e:	464f      	mov	r7, r9
 8000a20:	e774      	b.n	800090c <__aeabi_dadd+0x214>
 8000a22:	0028      	movs	r0, r5
 8000a24:	f7ff fd40 	bl	80004a8 <__clzsi2>
 8000a28:	0003      	movs	r3, r0
 8000a2a:	3318      	adds	r3, #24
 8000a2c:	2b1f      	cmp	r3, #31
 8000a2e:	dc00      	bgt.n	8000a32 <__aeabi_dadd+0x33a>
 8000a30:	e6c2      	b.n	80007b8 <__aeabi_dadd+0xc0>
 8000a32:	002a      	movs	r2, r5
 8000a34:	3808      	subs	r0, #8
 8000a36:	4082      	lsls	r2, r0
 8000a38:	429f      	cmp	r7, r3
 8000a3a:	dd00      	ble.n	8000a3e <__aeabi_dadd+0x346>
 8000a3c:	e0a9      	b.n	8000b92 <__aeabi_dadd+0x49a>
 8000a3e:	1bdb      	subs	r3, r3, r7
 8000a40:	1c58      	adds	r0, r3, #1
 8000a42:	281f      	cmp	r0, #31
 8000a44:	dc00      	bgt.n	8000a48 <__aeabi_dadd+0x350>
 8000a46:	e1ac      	b.n	8000da2 <__aeabi_dadd+0x6aa>
 8000a48:	0015      	movs	r5, r2
 8000a4a:	3b1f      	subs	r3, #31
 8000a4c:	40dd      	lsrs	r5, r3
 8000a4e:	2820      	cmp	r0, #32
 8000a50:	d005      	beq.n	8000a5e <__aeabi_dadd+0x366>
 8000a52:	2340      	movs	r3, #64	@ 0x40
 8000a54:	1a1b      	subs	r3, r3, r0
 8000a56:	409a      	lsls	r2, r3
 8000a58:	1e53      	subs	r3, r2, #1
 8000a5a:	419a      	sbcs	r2, r3
 8000a5c:	4315      	orrs	r5, r2
 8000a5e:	2307      	movs	r3, #7
 8000a60:	2700      	movs	r7, #0
 8000a62:	402b      	ands	r3, r5
 8000a64:	e7b0      	b.n	80009c8 <__aeabi_dadd+0x2d0>
 8000a66:	08ed      	lsrs	r5, r5, #3
 8000a68:	4b05      	ldr	r3, [pc, #20]	@ (8000a80 <__aeabi_dadd+0x388>)
 8000a6a:	0762      	lsls	r2, r4, #29
 8000a6c:	432a      	orrs	r2, r5
 8000a6e:	08e4      	lsrs	r4, r4, #3
 8000a70:	429f      	cmp	r7, r3
 8000a72:	d00f      	beq.n	8000a94 <__aeabi_dadd+0x39c>
 8000a74:	0324      	lsls	r4, r4, #12
 8000a76:	0b25      	lsrs	r5, r4, #12
 8000a78:	057c      	lsls	r4, r7, #21
 8000a7a:	0d64      	lsrs	r4, r4, #21
 8000a7c:	e6d4      	b.n	8000828 <__aeabi_dadd+0x130>
 8000a7e:	46c0      	nop			@ (mov r8, r8)
 8000a80:	000007ff 	.word	0x000007ff
 8000a84:	ff7fffff 	.word	0xff7fffff
 8000a88:	000007fe 	.word	0x000007fe
 8000a8c:	08c0      	lsrs	r0, r0, #3
 8000a8e:	0762      	lsls	r2, r4, #29
 8000a90:	4302      	orrs	r2, r0
 8000a92:	08e4      	lsrs	r4, r4, #3
 8000a94:	0013      	movs	r3, r2
 8000a96:	4323      	orrs	r3, r4
 8000a98:	d100      	bne.n	8000a9c <__aeabi_dadd+0x3a4>
 8000a9a:	e186      	b.n	8000daa <__aeabi_dadd+0x6b2>
 8000a9c:	2580      	movs	r5, #128	@ 0x80
 8000a9e:	032d      	lsls	r5, r5, #12
 8000aa0:	4325      	orrs	r5, r4
 8000aa2:	032d      	lsls	r5, r5, #12
 8000aa4:	4cc3      	ldr	r4, [pc, #780]	@ (8000db4 <__aeabi_dadd+0x6bc>)
 8000aa6:	0b2d      	lsrs	r5, r5, #12
 8000aa8:	e6be      	b.n	8000828 <__aeabi_dadd+0x130>
 8000aaa:	4660      	mov	r0, ip
 8000aac:	4654      	mov	r4, sl
 8000aae:	000e      	movs	r6, r1
 8000ab0:	0017      	movs	r7, r2
 8000ab2:	08c5      	lsrs	r5, r0, #3
 8000ab4:	e7d8      	b.n	8000a68 <__aeabi_dadd+0x370>
 8000ab6:	4cc0      	ldr	r4, [pc, #768]	@ (8000db8 <__aeabi_dadd+0x6c0>)
 8000ab8:	1aff      	subs	r7, r7, r3
 8000aba:	4014      	ands	r4, r2
 8000abc:	e696      	b.n	80007ec <__aeabi_dadd+0xf4>
 8000abe:	4abf      	ldr	r2, [pc, #764]	@ (8000dbc <__aeabi_dadd+0x6c4>)
 8000ac0:	1c79      	adds	r1, r7, #1
 8000ac2:	4211      	tst	r1, r2
 8000ac4:	d16b      	bne.n	8000b9e <__aeabi_dadd+0x4a6>
 8000ac6:	0022      	movs	r2, r4
 8000ac8:	4302      	orrs	r2, r0
 8000aca:	2f00      	cmp	r7, #0
 8000acc:	d000      	beq.n	8000ad0 <__aeabi_dadd+0x3d8>
 8000ace:	e0db      	b.n	8000c88 <__aeabi_dadd+0x590>
 8000ad0:	2a00      	cmp	r2, #0
 8000ad2:	d100      	bne.n	8000ad6 <__aeabi_dadd+0x3de>
 8000ad4:	e12d      	b.n	8000d32 <__aeabi_dadd+0x63a>
 8000ad6:	4662      	mov	r2, ip
 8000ad8:	4653      	mov	r3, sl
 8000ada:	431a      	orrs	r2, r3
 8000adc:	d100      	bne.n	8000ae0 <__aeabi_dadd+0x3e8>
 8000ade:	e0b6      	b.n	8000c4e <__aeabi_dadd+0x556>
 8000ae0:	4663      	mov	r3, ip
 8000ae2:	18c5      	adds	r5, r0, r3
 8000ae4:	4285      	cmp	r5, r0
 8000ae6:	4180      	sbcs	r0, r0
 8000ae8:	4454      	add	r4, sl
 8000aea:	4240      	negs	r0, r0
 8000aec:	1824      	adds	r4, r4, r0
 8000aee:	0223      	lsls	r3, r4, #8
 8000af0:	d502      	bpl.n	8000af8 <__aeabi_dadd+0x400>
 8000af2:	000f      	movs	r7, r1
 8000af4:	4bb0      	ldr	r3, [pc, #704]	@ (8000db8 <__aeabi_dadd+0x6c0>)
 8000af6:	401c      	ands	r4, r3
 8000af8:	003a      	movs	r2, r7
 8000afa:	0028      	movs	r0, r5
 8000afc:	e7d8      	b.n	8000ab0 <__aeabi_dadd+0x3b8>
 8000afe:	4662      	mov	r2, ip
 8000b00:	1a85      	subs	r5, r0, r2
 8000b02:	42a8      	cmp	r0, r5
 8000b04:	4192      	sbcs	r2, r2
 8000b06:	4653      	mov	r3, sl
 8000b08:	4252      	negs	r2, r2
 8000b0a:	4691      	mov	r9, r2
 8000b0c:	1ae3      	subs	r3, r4, r3
 8000b0e:	001a      	movs	r2, r3
 8000b10:	464b      	mov	r3, r9
 8000b12:	1ad2      	subs	r2, r2, r3
 8000b14:	0013      	movs	r3, r2
 8000b16:	4691      	mov	r9, r2
 8000b18:	021a      	lsls	r2, r3, #8
 8000b1a:	d454      	bmi.n	8000bc6 <__aeabi_dadd+0x4ce>
 8000b1c:	464a      	mov	r2, r9
 8000b1e:	464c      	mov	r4, r9
 8000b20:	432a      	orrs	r2, r5
 8000b22:	d000      	beq.n	8000b26 <__aeabi_dadd+0x42e>
 8000b24:	e640      	b.n	80007a8 <__aeabi_dadd+0xb0>
 8000b26:	2600      	movs	r6, #0
 8000b28:	2400      	movs	r4, #0
 8000b2a:	2500      	movs	r5, #0
 8000b2c:	e67c      	b.n	8000828 <__aeabi_dadd+0x130>
 8000b2e:	4da1      	ldr	r5, [pc, #644]	@ (8000db4 <__aeabi_dadd+0x6bc>)
 8000b30:	45a9      	cmp	r9, r5
 8000b32:	d100      	bne.n	8000b36 <__aeabi_dadd+0x43e>
 8000b34:	e090      	b.n	8000c58 <__aeabi_dadd+0x560>
 8000b36:	2501      	movs	r5, #1
 8000b38:	2a38      	cmp	r2, #56	@ 0x38
 8000b3a:	dd00      	ble.n	8000b3e <__aeabi_dadd+0x446>
 8000b3c:	e6ab      	b.n	8000896 <__aeabi_dadd+0x19e>
 8000b3e:	2580      	movs	r5, #128	@ 0x80
 8000b40:	042d      	lsls	r5, r5, #16
 8000b42:	432c      	orrs	r4, r5
 8000b44:	e695      	b.n	8000872 <__aeabi_dadd+0x17a>
 8000b46:	0011      	movs	r1, r2
 8000b48:	4655      	mov	r5, sl
 8000b4a:	3920      	subs	r1, #32
 8000b4c:	40cd      	lsrs	r5, r1
 8000b4e:	46a9      	mov	r9, r5
 8000b50:	2a20      	cmp	r2, #32
 8000b52:	d006      	beq.n	8000b62 <__aeabi_dadd+0x46a>
 8000b54:	2140      	movs	r1, #64	@ 0x40
 8000b56:	4653      	mov	r3, sl
 8000b58:	1a8a      	subs	r2, r1, r2
 8000b5a:	4093      	lsls	r3, r2
 8000b5c:	4662      	mov	r2, ip
 8000b5e:	431a      	orrs	r2, r3
 8000b60:	4694      	mov	ip, r2
 8000b62:	4665      	mov	r5, ip
 8000b64:	1e6b      	subs	r3, r5, #1
 8000b66:	419d      	sbcs	r5, r3
 8000b68:	464b      	mov	r3, r9
 8000b6a:	431d      	orrs	r5, r3
 8000b6c:	e612      	b.n	8000794 <__aeabi_dadd+0x9c>
 8000b6e:	0021      	movs	r1, r4
 8000b70:	4301      	orrs	r1, r0
 8000b72:	d100      	bne.n	8000b76 <__aeabi_dadd+0x47e>
 8000b74:	e0c4      	b.n	8000d00 <__aeabi_dadd+0x608>
 8000b76:	1e51      	subs	r1, r2, #1
 8000b78:	2a01      	cmp	r2, #1
 8000b7a:	d100      	bne.n	8000b7e <__aeabi_dadd+0x486>
 8000b7c:	e0fb      	b.n	8000d76 <__aeabi_dadd+0x67e>
 8000b7e:	4d8d      	ldr	r5, [pc, #564]	@ (8000db4 <__aeabi_dadd+0x6bc>)
 8000b80:	42aa      	cmp	r2, r5
 8000b82:	d100      	bne.n	8000b86 <__aeabi_dadd+0x48e>
 8000b84:	e0b5      	b.n	8000cf2 <__aeabi_dadd+0x5fa>
 8000b86:	2501      	movs	r5, #1
 8000b88:	2938      	cmp	r1, #56	@ 0x38
 8000b8a:	dd00      	ble.n	8000b8e <__aeabi_dadd+0x496>
 8000b8c:	e741      	b.n	8000a12 <__aeabi_dadd+0x31a>
 8000b8e:	000a      	movs	r2, r1
 8000b90:	e72f      	b.n	80009f2 <__aeabi_dadd+0x2fa>
 8000b92:	4c89      	ldr	r4, [pc, #548]	@ (8000db8 <__aeabi_dadd+0x6c0>)
 8000b94:	1aff      	subs	r7, r7, r3
 8000b96:	4014      	ands	r4, r2
 8000b98:	0762      	lsls	r2, r4, #29
 8000b9a:	08e4      	lsrs	r4, r4, #3
 8000b9c:	e76a      	b.n	8000a74 <__aeabi_dadd+0x37c>
 8000b9e:	4a85      	ldr	r2, [pc, #532]	@ (8000db4 <__aeabi_dadd+0x6bc>)
 8000ba0:	4291      	cmp	r1, r2
 8000ba2:	d100      	bne.n	8000ba6 <__aeabi_dadd+0x4ae>
 8000ba4:	e0e3      	b.n	8000d6e <__aeabi_dadd+0x676>
 8000ba6:	4663      	mov	r3, ip
 8000ba8:	18c2      	adds	r2, r0, r3
 8000baa:	4282      	cmp	r2, r0
 8000bac:	4180      	sbcs	r0, r0
 8000bae:	0023      	movs	r3, r4
 8000bb0:	4240      	negs	r0, r0
 8000bb2:	4453      	add	r3, sl
 8000bb4:	181b      	adds	r3, r3, r0
 8000bb6:	07dd      	lsls	r5, r3, #31
 8000bb8:	085c      	lsrs	r4, r3, #1
 8000bba:	2307      	movs	r3, #7
 8000bbc:	0852      	lsrs	r2, r2, #1
 8000bbe:	4315      	orrs	r5, r2
 8000bc0:	000f      	movs	r7, r1
 8000bc2:	402b      	ands	r3, r5
 8000bc4:	e700      	b.n	80009c8 <__aeabi_dadd+0x2d0>
 8000bc6:	4663      	mov	r3, ip
 8000bc8:	1a1d      	subs	r5, r3, r0
 8000bca:	45ac      	cmp	ip, r5
 8000bcc:	4192      	sbcs	r2, r2
 8000bce:	4653      	mov	r3, sl
 8000bd0:	4252      	negs	r2, r2
 8000bd2:	1b1c      	subs	r4, r3, r4
 8000bd4:	000e      	movs	r6, r1
 8000bd6:	4688      	mov	r8, r1
 8000bd8:	1aa4      	subs	r4, r4, r2
 8000bda:	e5e5      	b.n	80007a8 <__aeabi_dadd+0xb0>
 8000bdc:	2d00      	cmp	r5, #0
 8000bde:	d000      	beq.n	8000be2 <__aeabi_dadd+0x4ea>
 8000be0:	e091      	b.n	8000d06 <__aeabi_dadd+0x60e>
 8000be2:	2a00      	cmp	r2, #0
 8000be4:	d138      	bne.n	8000c58 <__aeabi_dadd+0x560>
 8000be6:	2480      	movs	r4, #128	@ 0x80
 8000be8:	2600      	movs	r6, #0
 8000bea:	0324      	lsls	r4, r4, #12
 8000bec:	e756      	b.n	8000a9c <__aeabi_dadd+0x3a4>
 8000bee:	4663      	mov	r3, ip
 8000bf0:	18c5      	adds	r5, r0, r3
 8000bf2:	4285      	cmp	r5, r0
 8000bf4:	4180      	sbcs	r0, r0
 8000bf6:	4454      	add	r4, sl
 8000bf8:	4240      	negs	r0, r0
 8000bfa:	1824      	adds	r4, r4, r0
 8000bfc:	2701      	movs	r7, #1
 8000bfe:	0223      	lsls	r3, r4, #8
 8000c00:	d400      	bmi.n	8000c04 <__aeabi_dadd+0x50c>
 8000c02:	e6df      	b.n	80009c4 <__aeabi_dadd+0x2cc>
 8000c04:	2702      	movs	r7, #2
 8000c06:	e687      	b.n	8000918 <__aeabi_dadd+0x220>
 8000c08:	4663      	mov	r3, ip
 8000c0a:	1ac5      	subs	r5, r0, r3
 8000c0c:	42a8      	cmp	r0, r5
 8000c0e:	4180      	sbcs	r0, r0
 8000c10:	4653      	mov	r3, sl
 8000c12:	4240      	negs	r0, r0
 8000c14:	1ae4      	subs	r4, r4, r3
 8000c16:	2701      	movs	r7, #1
 8000c18:	1a24      	subs	r4, r4, r0
 8000c1a:	e5c0      	b.n	800079e <__aeabi_dadd+0xa6>
 8000c1c:	0762      	lsls	r2, r4, #29
 8000c1e:	08c0      	lsrs	r0, r0, #3
 8000c20:	4302      	orrs	r2, r0
 8000c22:	08e4      	lsrs	r4, r4, #3
 8000c24:	e736      	b.n	8000a94 <__aeabi_dadd+0x39c>
 8000c26:	0011      	movs	r1, r2
 8000c28:	4653      	mov	r3, sl
 8000c2a:	3920      	subs	r1, #32
 8000c2c:	40cb      	lsrs	r3, r1
 8000c2e:	4699      	mov	r9, r3
 8000c30:	2a20      	cmp	r2, #32
 8000c32:	d006      	beq.n	8000c42 <__aeabi_dadd+0x54a>
 8000c34:	2140      	movs	r1, #64	@ 0x40
 8000c36:	4653      	mov	r3, sl
 8000c38:	1a8a      	subs	r2, r1, r2
 8000c3a:	4093      	lsls	r3, r2
 8000c3c:	4662      	mov	r2, ip
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	4694      	mov	ip, r2
 8000c42:	4665      	mov	r5, ip
 8000c44:	1e6b      	subs	r3, r5, #1
 8000c46:	419d      	sbcs	r5, r3
 8000c48:	464b      	mov	r3, r9
 8000c4a:	431d      	orrs	r5, r3
 8000c4c:	e659      	b.n	8000902 <__aeabi_dadd+0x20a>
 8000c4e:	0762      	lsls	r2, r4, #29
 8000c50:	08c0      	lsrs	r0, r0, #3
 8000c52:	4302      	orrs	r2, r0
 8000c54:	08e4      	lsrs	r4, r4, #3
 8000c56:	e70d      	b.n	8000a74 <__aeabi_dadd+0x37c>
 8000c58:	4653      	mov	r3, sl
 8000c5a:	075a      	lsls	r2, r3, #29
 8000c5c:	4663      	mov	r3, ip
 8000c5e:	08d8      	lsrs	r0, r3, #3
 8000c60:	4653      	mov	r3, sl
 8000c62:	000e      	movs	r6, r1
 8000c64:	4302      	orrs	r2, r0
 8000c66:	08dc      	lsrs	r4, r3, #3
 8000c68:	e714      	b.n	8000a94 <__aeabi_dadd+0x39c>
 8000c6a:	0015      	movs	r5, r2
 8000c6c:	0026      	movs	r6, r4
 8000c6e:	3d20      	subs	r5, #32
 8000c70:	40ee      	lsrs	r6, r5
 8000c72:	2a20      	cmp	r2, #32
 8000c74:	d003      	beq.n	8000c7e <__aeabi_dadd+0x586>
 8000c76:	2540      	movs	r5, #64	@ 0x40
 8000c78:	1aaa      	subs	r2, r5, r2
 8000c7a:	4094      	lsls	r4, r2
 8000c7c:	4320      	orrs	r0, r4
 8000c7e:	1e42      	subs	r2, r0, #1
 8000c80:	4190      	sbcs	r0, r2
 8000c82:	0005      	movs	r5, r0
 8000c84:	4335      	orrs	r5, r6
 8000c86:	e606      	b.n	8000896 <__aeabi_dadd+0x19e>
 8000c88:	2a00      	cmp	r2, #0
 8000c8a:	d07c      	beq.n	8000d86 <__aeabi_dadd+0x68e>
 8000c8c:	4662      	mov	r2, ip
 8000c8e:	4653      	mov	r3, sl
 8000c90:	08c0      	lsrs	r0, r0, #3
 8000c92:	431a      	orrs	r2, r3
 8000c94:	d100      	bne.n	8000c98 <__aeabi_dadd+0x5a0>
 8000c96:	e6fa      	b.n	8000a8e <__aeabi_dadd+0x396>
 8000c98:	0762      	lsls	r2, r4, #29
 8000c9a:	4310      	orrs	r0, r2
 8000c9c:	2280      	movs	r2, #128	@ 0x80
 8000c9e:	08e4      	lsrs	r4, r4, #3
 8000ca0:	0312      	lsls	r2, r2, #12
 8000ca2:	4214      	tst	r4, r2
 8000ca4:	d008      	beq.n	8000cb8 <__aeabi_dadd+0x5c0>
 8000ca6:	08d9      	lsrs	r1, r3, #3
 8000ca8:	4211      	tst	r1, r2
 8000caa:	d105      	bne.n	8000cb8 <__aeabi_dadd+0x5c0>
 8000cac:	4663      	mov	r3, ip
 8000cae:	08d8      	lsrs	r0, r3, #3
 8000cb0:	4653      	mov	r3, sl
 8000cb2:	000c      	movs	r4, r1
 8000cb4:	075b      	lsls	r3, r3, #29
 8000cb6:	4318      	orrs	r0, r3
 8000cb8:	0f42      	lsrs	r2, r0, #29
 8000cba:	00c0      	lsls	r0, r0, #3
 8000cbc:	08c0      	lsrs	r0, r0, #3
 8000cbe:	0752      	lsls	r2, r2, #29
 8000cc0:	4302      	orrs	r2, r0
 8000cc2:	e6e7      	b.n	8000a94 <__aeabi_dadd+0x39c>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	d100      	bne.n	8000cca <__aeabi_dadd+0x5d2>
 8000cc8:	e72d      	b.n	8000b26 <__aeabi_dadd+0x42e>
 8000cca:	4663      	mov	r3, ip
 8000ccc:	08d8      	lsrs	r0, r3, #3
 8000cce:	4653      	mov	r3, sl
 8000cd0:	075a      	lsls	r2, r3, #29
 8000cd2:	000e      	movs	r6, r1
 8000cd4:	4302      	orrs	r2, r0
 8000cd6:	08dc      	lsrs	r4, r3, #3
 8000cd8:	e6cc      	b.n	8000a74 <__aeabi_dadd+0x37c>
 8000cda:	4663      	mov	r3, ip
 8000cdc:	1a1d      	subs	r5, r3, r0
 8000cde:	45ac      	cmp	ip, r5
 8000ce0:	4192      	sbcs	r2, r2
 8000ce2:	4653      	mov	r3, sl
 8000ce4:	4252      	negs	r2, r2
 8000ce6:	1b1c      	subs	r4, r3, r4
 8000ce8:	000e      	movs	r6, r1
 8000cea:	4688      	mov	r8, r1
 8000cec:	1aa4      	subs	r4, r4, r2
 8000cee:	3701      	adds	r7, #1
 8000cf0:	e555      	b.n	800079e <__aeabi_dadd+0xa6>
 8000cf2:	4663      	mov	r3, ip
 8000cf4:	08d9      	lsrs	r1, r3, #3
 8000cf6:	4653      	mov	r3, sl
 8000cf8:	075a      	lsls	r2, r3, #29
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	08dc      	lsrs	r4, r3, #3
 8000cfe:	e6c9      	b.n	8000a94 <__aeabi_dadd+0x39c>
 8000d00:	4660      	mov	r0, ip
 8000d02:	4654      	mov	r4, sl
 8000d04:	e6d4      	b.n	8000ab0 <__aeabi_dadd+0x3b8>
 8000d06:	08c0      	lsrs	r0, r0, #3
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	d100      	bne.n	8000d0e <__aeabi_dadd+0x616>
 8000d0c:	e6bf      	b.n	8000a8e <__aeabi_dadd+0x396>
 8000d0e:	0762      	lsls	r2, r4, #29
 8000d10:	4310      	orrs	r0, r2
 8000d12:	2280      	movs	r2, #128	@ 0x80
 8000d14:	08e4      	lsrs	r4, r4, #3
 8000d16:	0312      	lsls	r2, r2, #12
 8000d18:	4214      	tst	r4, r2
 8000d1a:	d0cd      	beq.n	8000cb8 <__aeabi_dadd+0x5c0>
 8000d1c:	08dd      	lsrs	r5, r3, #3
 8000d1e:	4215      	tst	r5, r2
 8000d20:	d1ca      	bne.n	8000cb8 <__aeabi_dadd+0x5c0>
 8000d22:	4663      	mov	r3, ip
 8000d24:	08d8      	lsrs	r0, r3, #3
 8000d26:	4653      	mov	r3, sl
 8000d28:	075b      	lsls	r3, r3, #29
 8000d2a:	000e      	movs	r6, r1
 8000d2c:	002c      	movs	r4, r5
 8000d2e:	4318      	orrs	r0, r3
 8000d30:	e7c2      	b.n	8000cb8 <__aeabi_dadd+0x5c0>
 8000d32:	4663      	mov	r3, ip
 8000d34:	08d9      	lsrs	r1, r3, #3
 8000d36:	4653      	mov	r3, sl
 8000d38:	075a      	lsls	r2, r3, #29
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	08dc      	lsrs	r4, r3, #3
 8000d3e:	e699      	b.n	8000a74 <__aeabi_dadd+0x37c>
 8000d40:	4663      	mov	r3, ip
 8000d42:	08d8      	lsrs	r0, r3, #3
 8000d44:	4653      	mov	r3, sl
 8000d46:	075a      	lsls	r2, r3, #29
 8000d48:	000e      	movs	r6, r1
 8000d4a:	4302      	orrs	r2, r0
 8000d4c:	08dc      	lsrs	r4, r3, #3
 8000d4e:	e6a1      	b.n	8000a94 <__aeabi_dadd+0x39c>
 8000d50:	0011      	movs	r1, r2
 8000d52:	0027      	movs	r7, r4
 8000d54:	3920      	subs	r1, #32
 8000d56:	40cf      	lsrs	r7, r1
 8000d58:	2a20      	cmp	r2, #32
 8000d5a:	d003      	beq.n	8000d64 <__aeabi_dadd+0x66c>
 8000d5c:	2140      	movs	r1, #64	@ 0x40
 8000d5e:	1a8a      	subs	r2, r1, r2
 8000d60:	4094      	lsls	r4, r2
 8000d62:	4320      	orrs	r0, r4
 8000d64:	1e42      	subs	r2, r0, #1
 8000d66:	4190      	sbcs	r0, r2
 8000d68:	0005      	movs	r5, r0
 8000d6a:	433d      	orrs	r5, r7
 8000d6c:	e651      	b.n	8000a12 <__aeabi_dadd+0x31a>
 8000d6e:	000c      	movs	r4, r1
 8000d70:	2500      	movs	r5, #0
 8000d72:	2200      	movs	r2, #0
 8000d74:	e558      	b.n	8000828 <__aeabi_dadd+0x130>
 8000d76:	4460      	add	r0, ip
 8000d78:	4560      	cmp	r0, ip
 8000d7a:	4192      	sbcs	r2, r2
 8000d7c:	4454      	add	r4, sl
 8000d7e:	4252      	negs	r2, r2
 8000d80:	0005      	movs	r5, r0
 8000d82:	18a4      	adds	r4, r4, r2
 8000d84:	e73a      	b.n	8000bfc <__aeabi_dadd+0x504>
 8000d86:	4653      	mov	r3, sl
 8000d88:	075a      	lsls	r2, r3, #29
 8000d8a:	4663      	mov	r3, ip
 8000d8c:	08d9      	lsrs	r1, r3, #3
 8000d8e:	4653      	mov	r3, sl
 8000d90:	430a      	orrs	r2, r1
 8000d92:	08dc      	lsrs	r4, r3, #3
 8000d94:	e67e      	b.n	8000a94 <__aeabi_dadd+0x39c>
 8000d96:	001a      	movs	r2, r3
 8000d98:	001c      	movs	r4, r3
 8000d9a:	432a      	orrs	r2, r5
 8000d9c:	d000      	beq.n	8000da0 <__aeabi_dadd+0x6a8>
 8000d9e:	e6ab      	b.n	8000af8 <__aeabi_dadd+0x400>
 8000da0:	e6c1      	b.n	8000b26 <__aeabi_dadd+0x42e>
 8000da2:	2120      	movs	r1, #32
 8000da4:	2500      	movs	r5, #0
 8000da6:	1a09      	subs	r1, r1, r0
 8000da8:	e519      	b.n	80007de <__aeabi_dadd+0xe6>
 8000daa:	2200      	movs	r2, #0
 8000dac:	2500      	movs	r5, #0
 8000dae:	4c01      	ldr	r4, [pc, #4]	@ (8000db4 <__aeabi_dadd+0x6bc>)
 8000db0:	e53a      	b.n	8000828 <__aeabi_dadd+0x130>
 8000db2:	46c0      	nop			@ (mov r8, r8)
 8000db4:	000007ff 	.word	0x000007ff
 8000db8:	ff7fffff 	.word	0xff7fffff
 8000dbc:	000007fe 	.word	0x000007fe

08000dc0 <__aeabi_ddiv>:
 8000dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dc2:	46de      	mov	lr, fp
 8000dc4:	4645      	mov	r5, r8
 8000dc6:	4657      	mov	r7, sl
 8000dc8:	464e      	mov	r6, r9
 8000dca:	b5e0      	push	{r5, r6, r7, lr}
 8000dcc:	b087      	sub	sp, #28
 8000dce:	9200      	str	r2, [sp, #0]
 8000dd0:	9301      	str	r3, [sp, #4]
 8000dd2:	030b      	lsls	r3, r1, #12
 8000dd4:	0b1b      	lsrs	r3, r3, #12
 8000dd6:	469b      	mov	fp, r3
 8000dd8:	0fca      	lsrs	r2, r1, #31
 8000dda:	004b      	lsls	r3, r1, #1
 8000ddc:	0004      	movs	r4, r0
 8000dde:	4680      	mov	r8, r0
 8000de0:	0d5b      	lsrs	r3, r3, #21
 8000de2:	9202      	str	r2, [sp, #8]
 8000de4:	d100      	bne.n	8000de8 <__aeabi_ddiv+0x28>
 8000de6:	e16a      	b.n	80010be <__aeabi_ddiv+0x2fe>
 8000de8:	4ad4      	ldr	r2, [pc, #848]	@ (800113c <__aeabi_ddiv+0x37c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d100      	bne.n	8000df0 <__aeabi_ddiv+0x30>
 8000dee:	e18c      	b.n	800110a <__aeabi_ddiv+0x34a>
 8000df0:	4659      	mov	r1, fp
 8000df2:	0f42      	lsrs	r2, r0, #29
 8000df4:	00c9      	lsls	r1, r1, #3
 8000df6:	430a      	orrs	r2, r1
 8000df8:	2180      	movs	r1, #128	@ 0x80
 8000dfa:	0409      	lsls	r1, r1, #16
 8000dfc:	4311      	orrs	r1, r2
 8000dfe:	00c2      	lsls	r2, r0, #3
 8000e00:	4690      	mov	r8, r2
 8000e02:	4acf      	ldr	r2, [pc, #828]	@ (8001140 <__aeabi_ddiv+0x380>)
 8000e04:	4689      	mov	r9, r1
 8000e06:	4692      	mov	sl, r2
 8000e08:	449a      	add	sl, r3
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	2400      	movs	r4, #0
 8000e0e:	9303      	str	r3, [sp, #12]
 8000e10:	9e00      	ldr	r6, [sp, #0]
 8000e12:	9f01      	ldr	r7, [sp, #4]
 8000e14:	033b      	lsls	r3, r7, #12
 8000e16:	0b1b      	lsrs	r3, r3, #12
 8000e18:	469b      	mov	fp, r3
 8000e1a:	007b      	lsls	r3, r7, #1
 8000e1c:	0030      	movs	r0, r6
 8000e1e:	0d5b      	lsrs	r3, r3, #21
 8000e20:	0ffd      	lsrs	r5, r7, #31
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d100      	bne.n	8000e28 <__aeabi_ddiv+0x68>
 8000e26:	e128      	b.n	800107a <__aeabi_ddiv+0x2ba>
 8000e28:	4ac4      	ldr	r2, [pc, #784]	@ (800113c <__aeabi_ddiv+0x37c>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_ddiv+0x70>
 8000e2e:	e177      	b.n	8001120 <__aeabi_ddiv+0x360>
 8000e30:	4659      	mov	r1, fp
 8000e32:	0f72      	lsrs	r2, r6, #29
 8000e34:	00c9      	lsls	r1, r1, #3
 8000e36:	430a      	orrs	r2, r1
 8000e38:	2180      	movs	r1, #128	@ 0x80
 8000e3a:	0409      	lsls	r1, r1, #16
 8000e3c:	4311      	orrs	r1, r2
 8000e3e:	468b      	mov	fp, r1
 8000e40:	49bf      	ldr	r1, [pc, #764]	@ (8001140 <__aeabi_ddiv+0x380>)
 8000e42:	00f2      	lsls	r2, r6, #3
 8000e44:	468c      	mov	ip, r1
 8000e46:	4651      	mov	r1, sl
 8000e48:	4463      	add	r3, ip
 8000e4a:	1acb      	subs	r3, r1, r3
 8000e4c:	469a      	mov	sl, r3
 8000e4e:	2300      	movs	r3, #0
 8000e50:	9e02      	ldr	r6, [sp, #8]
 8000e52:	406e      	eors	r6, r5
 8000e54:	2c0f      	cmp	r4, #15
 8000e56:	d827      	bhi.n	8000ea8 <__aeabi_ddiv+0xe8>
 8000e58:	49ba      	ldr	r1, [pc, #744]	@ (8001144 <__aeabi_ddiv+0x384>)
 8000e5a:	00a4      	lsls	r4, r4, #2
 8000e5c:	5909      	ldr	r1, [r1, r4]
 8000e5e:	468f      	mov	pc, r1
 8000e60:	46cb      	mov	fp, r9
 8000e62:	4642      	mov	r2, r8
 8000e64:	9e02      	ldr	r6, [sp, #8]
 8000e66:	9b03      	ldr	r3, [sp, #12]
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d016      	beq.n	8000e9a <__aeabi_ddiv+0xda>
 8000e6c:	2b03      	cmp	r3, #3
 8000e6e:	d100      	bne.n	8000e72 <__aeabi_ddiv+0xb2>
 8000e70:	e2a6      	b.n	80013c0 <__aeabi_ddiv+0x600>
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d000      	beq.n	8000e78 <__aeabi_ddiv+0xb8>
 8000e76:	e0df      	b.n	8001038 <__aeabi_ddiv+0x278>
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	2400      	movs	r4, #0
 8000e7e:	4690      	mov	r8, r2
 8000e80:	051b      	lsls	r3, r3, #20
 8000e82:	4323      	orrs	r3, r4
 8000e84:	07f6      	lsls	r6, r6, #31
 8000e86:	4333      	orrs	r3, r6
 8000e88:	4640      	mov	r0, r8
 8000e8a:	0019      	movs	r1, r3
 8000e8c:	b007      	add	sp, #28
 8000e8e:	bcf0      	pop	{r4, r5, r6, r7}
 8000e90:	46bb      	mov	fp, r7
 8000e92:	46b2      	mov	sl, r6
 8000e94:	46a9      	mov	r9, r5
 8000e96:	46a0      	mov	r8, r4
 8000e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2400      	movs	r4, #0
 8000e9e:	4690      	mov	r8, r2
 8000ea0:	4ba6      	ldr	r3, [pc, #664]	@ (800113c <__aeabi_ddiv+0x37c>)
 8000ea2:	e7ed      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 8000ea4:	002e      	movs	r6, r5
 8000ea6:	e7df      	b.n	8000e68 <__aeabi_ddiv+0xa8>
 8000ea8:	45cb      	cmp	fp, r9
 8000eaa:	d200      	bcs.n	8000eae <__aeabi_ddiv+0xee>
 8000eac:	e1d4      	b.n	8001258 <__aeabi_ddiv+0x498>
 8000eae:	d100      	bne.n	8000eb2 <__aeabi_ddiv+0xf2>
 8000eb0:	e1cf      	b.n	8001252 <__aeabi_ddiv+0x492>
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	425b      	negs	r3, r3
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	4644      	mov	r4, r8
 8000eba:	4648      	mov	r0, r9
 8000ebc:	2700      	movs	r7, #0
 8000ebe:	44e2      	add	sl, ip
 8000ec0:	465b      	mov	r3, fp
 8000ec2:	0e15      	lsrs	r5, r2, #24
 8000ec4:	021b      	lsls	r3, r3, #8
 8000ec6:	431d      	orrs	r5, r3
 8000ec8:	0c19      	lsrs	r1, r3, #16
 8000eca:	042b      	lsls	r3, r5, #16
 8000ecc:	0212      	lsls	r2, r2, #8
 8000ece:	9500      	str	r5, [sp, #0]
 8000ed0:	0c1d      	lsrs	r5, r3, #16
 8000ed2:	4691      	mov	r9, r2
 8000ed4:	9102      	str	r1, [sp, #8]
 8000ed6:	9503      	str	r5, [sp, #12]
 8000ed8:	f7ff f9b8 	bl	800024c <__aeabi_uidivmod>
 8000edc:	0002      	movs	r2, r0
 8000ede:	436a      	muls	r2, r5
 8000ee0:	040b      	lsls	r3, r1, #16
 8000ee2:	0c21      	lsrs	r1, r4, #16
 8000ee4:	4680      	mov	r8, r0
 8000ee6:	4319      	orrs	r1, r3
 8000ee8:	428a      	cmp	r2, r1
 8000eea:	d909      	bls.n	8000f00 <__aeabi_ddiv+0x140>
 8000eec:	9d00      	ldr	r5, [sp, #0]
 8000eee:	2301      	movs	r3, #1
 8000ef0:	46ac      	mov	ip, r5
 8000ef2:	425b      	negs	r3, r3
 8000ef4:	4461      	add	r1, ip
 8000ef6:	469c      	mov	ip, r3
 8000ef8:	44e0      	add	r8, ip
 8000efa:	428d      	cmp	r5, r1
 8000efc:	d800      	bhi.n	8000f00 <__aeabi_ddiv+0x140>
 8000efe:	e1fb      	b.n	80012f8 <__aeabi_ddiv+0x538>
 8000f00:	1a88      	subs	r0, r1, r2
 8000f02:	9902      	ldr	r1, [sp, #8]
 8000f04:	f7ff f9a2 	bl	800024c <__aeabi_uidivmod>
 8000f08:	9a03      	ldr	r2, [sp, #12]
 8000f0a:	0424      	lsls	r4, r4, #16
 8000f0c:	4342      	muls	r2, r0
 8000f0e:	0409      	lsls	r1, r1, #16
 8000f10:	0c24      	lsrs	r4, r4, #16
 8000f12:	0003      	movs	r3, r0
 8000f14:	430c      	orrs	r4, r1
 8000f16:	42a2      	cmp	r2, r4
 8000f18:	d906      	bls.n	8000f28 <__aeabi_ddiv+0x168>
 8000f1a:	9900      	ldr	r1, [sp, #0]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	468c      	mov	ip, r1
 8000f20:	4464      	add	r4, ip
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	d800      	bhi.n	8000f28 <__aeabi_ddiv+0x168>
 8000f26:	e1e1      	b.n	80012ec <__aeabi_ddiv+0x52c>
 8000f28:	1aa0      	subs	r0, r4, r2
 8000f2a:	4642      	mov	r2, r8
 8000f2c:	0412      	lsls	r2, r2, #16
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	4693      	mov	fp, r2
 8000f32:	464b      	mov	r3, r9
 8000f34:	4659      	mov	r1, fp
 8000f36:	0c1b      	lsrs	r3, r3, #16
 8000f38:	001d      	movs	r5, r3
 8000f3a:	9304      	str	r3, [sp, #16]
 8000f3c:	040b      	lsls	r3, r1, #16
 8000f3e:	4649      	mov	r1, r9
 8000f40:	0409      	lsls	r1, r1, #16
 8000f42:	0c09      	lsrs	r1, r1, #16
 8000f44:	000c      	movs	r4, r1
 8000f46:	0c1b      	lsrs	r3, r3, #16
 8000f48:	435c      	muls	r4, r3
 8000f4a:	0c12      	lsrs	r2, r2, #16
 8000f4c:	436b      	muls	r3, r5
 8000f4e:	4688      	mov	r8, r1
 8000f50:	4351      	muls	r1, r2
 8000f52:	436a      	muls	r2, r5
 8000f54:	0c25      	lsrs	r5, r4, #16
 8000f56:	46ac      	mov	ip, r5
 8000f58:	185b      	adds	r3, r3, r1
 8000f5a:	4463      	add	r3, ip
 8000f5c:	4299      	cmp	r1, r3
 8000f5e:	d903      	bls.n	8000f68 <__aeabi_ddiv+0x1a8>
 8000f60:	2180      	movs	r1, #128	@ 0x80
 8000f62:	0249      	lsls	r1, r1, #9
 8000f64:	468c      	mov	ip, r1
 8000f66:	4462      	add	r2, ip
 8000f68:	0c19      	lsrs	r1, r3, #16
 8000f6a:	0424      	lsls	r4, r4, #16
 8000f6c:	041b      	lsls	r3, r3, #16
 8000f6e:	0c24      	lsrs	r4, r4, #16
 8000f70:	188a      	adds	r2, r1, r2
 8000f72:	191c      	adds	r4, r3, r4
 8000f74:	4290      	cmp	r0, r2
 8000f76:	d302      	bcc.n	8000f7e <__aeabi_ddiv+0x1be>
 8000f78:	d116      	bne.n	8000fa8 <__aeabi_ddiv+0x1e8>
 8000f7a:	42a7      	cmp	r7, r4
 8000f7c:	d214      	bcs.n	8000fa8 <__aeabi_ddiv+0x1e8>
 8000f7e:	465b      	mov	r3, fp
 8000f80:	9d00      	ldr	r5, [sp, #0]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	444f      	add	r7, r9
 8000f86:	9305      	str	r3, [sp, #20]
 8000f88:	454f      	cmp	r7, r9
 8000f8a:	419b      	sbcs	r3, r3
 8000f8c:	46ac      	mov	ip, r5
 8000f8e:	425b      	negs	r3, r3
 8000f90:	4463      	add	r3, ip
 8000f92:	18c0      	adds	r0, r0, r3
 8000f94:	4285      	cmp	r5, r0
 8000f96:	d300      	bcc.n	8000f9a <__aeabi_ddiv+0x1da>
 8000f98:	e1a1      	b.n	80012de <__aeabi_ddiv+0x51e>
 8000f9a:	4282      	cmp	r2, r0
 8000f9c:	d900      	bls.n	8000fa0 <__aeabi_ddiv+0x1e0>
 8000f9e:	e1f6      	b.n	800138e <__aeabi_ddiv+0x5ce>
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_ddiv+0x1e4>
 8000fa2:	e1f1      	b.n	8001388 <__aeabi_ddiv+0x5c8>
 8000fa4:	9b05      	ldr	r3, [sp, #20]
 8000fa6:	469b      	mov	fp, r3
 8000fa8:	1b3c      	subs	r4, r7, r4
 8000faa:	42a7      	cmp	r7, r4
 8000fac:	41bf      	sbcs	r7, r7
 8000fae:	9d00      	ldr	r5, [sp, #0]
 8000fb0:	1a80      	subs	r0, r0, r2
 8000fb2:	427f      	negs	r7, r7
 8000fb4:	1bc0      	subs	r0, r0, r7
 8000fb6:	4285      	cmp	r5, r0
 8000fb8:	d100      	bne.n	8000fbc <__aeabi_ddiv+0x1fc>
 8000fba:	e1d0      	b.n	800135e <__aeabi_ddiv+0x59e>
 8000fbc:	9902      	ldr	r1, [sp, #8]
 8000fbe:	f7ff f945 	bl	800024c <__aeabi_uidivmod>
 8000fc2:	9a03      	ldr	r2, [sp, #12]
 8000fc4:	040b      	lsls	r3, r1, #16
 8000fc6:	4342      	muls	r2, r0
 8000fc8:	0c21      	lsrs	r1, r4, #16
 8000fca:	0007      	movs	r7, r0
 8000fcc:	4319      	orrs	r1, r3
 8000fce:	428a      	cmp	r2, r1
 8000fd0:	d900      	bls.n	8000fd4 <__aeabi_ddiv+0x214>
 8000fd2:	e178      	b.n	80012c6 <__aeabi_ddiv+0x506>
 8000fd4:	1a88      	subs	r0, r1, r2
 8000fd6:	9902      	ldr	r1, [sp, #8]
 8000fd8:	f7ff f938 	bl	800024c <__aeabi_uidivmod>
 8000fdc:	9a03      	ldr	r2, [sp, #12]
 8000fde:	0424      	lsls	r4, r4, #16
 8000fe0:	4342      	muls	r2, r0
 8000fe2:	0409      	lsls	r1, r1, #16
 8000fe4:	0c24      	lsrs	r4, r4, #16
 8000fe6:	0003      	movs	r3, r0
 8000fe8:	430c      	orrs	r4, r1
 8000fea:	42a2      	cmp	r2, r4
 8000fec:	d900      	bls.n	8000ff0 <__aeabi_ddiv+0x230>
 8000fee:	e15d      	b.n	80012ac <__aeabi_ddiv+0x4ec>
 8000ff0:	4641      	mov	r1, r8
 8000ff2:	1aa4      	subs	r4, r4, r2
 8000ff4:	043a      	lsls	r2, r7, #16
 8000ff6:	431a      	orrs	r2, r3
 8000ff8:	9d04      	ldr	r5, [sp, #16]
 8000ffa:	0413      	lsls	r3, r2, #16
 8000ffc:	0c1b      	lsrs	r3, r3, #16
 8000ffe:	4359      	muls	r1, r3
 8001000:	4647      	mov	r7, r8
 8001002:	436b      	muls	r3, r5
 8001004:	469c      	mov	ip, r3
 8001006:	0c10      	lsrs	r0, r2, #16
 8001008:	4347      	muls	r7, r0
 800100a:	0c0b      	lsrs	r3, r1, #16
 800100c:	44bc      	add	ip, r7
 800100e:	4463      	add	r3, ip
 8001010:	4368      	muls	r0, r5
 8001012:	429f      	cmp	r7, r3
 8001014:	d903      	bls.n	800101e <__aeabi_ddiv+0x25e>
 8001016:	2580      	movs	r5, #128	@ 0x80
 8001018:	026d      	lsls	r5, r5, #9
 800101a:	46ac      	mov	ip, r5
 800101c:	4460      	add	r0, ip
 800101e:	0c1f      	lsrs	r7, r3, #16
 8001020:	0409      	lsls	r1, r1, #16
 8001022:	041b      	lsls	r3, r3, #16
 8001024:	0c09      	lsrs	r1, r1, #16
 8001026:	183f      	adds	r7, r7, r0
 8001028:	185b      	adds	r3, r3, r1
 800102a:	42bc      	cmp	r4, r7
 800102c:	d200      	bcs.n	8001030 <__aeabi_ddiv+0x270>
 800102e:	e102      	b.n	8001236 <__aeabi_ddiv+0x476>
 8001030:	d100      	bne.n	8001034 <__aeabi_ddiv+0x274>
 8001032:	e0fd      	b.n	8001230 <__aeabi_ddiv+0x470>
 8001034:	2301      	movs	r3, #1
 8001036:	431a      	orrs	r2, r3
 8001038:	4b43      	ldr	r3, [pc, #268]	@ (8001148 <__aeabi_ddiv+0x388>)
 800103a:	4453      	add	r3, sl
 800103c:	2b00      	cmp	r3, #0
 800103e:	dc00      	bgt.n	8001042 <__aeabi_ddiv+0x282>
 8001040:	e0ae      	b.n	80011a0 <__aeabi_ddiv+0x3e0>
 8001042:	0751      	lsls	r1, r2, #29
 8001044:	d000      	beq.n	8001048 <__aeabi_ddiv+0x288>
 8001046:	e198      	b.n	800137a <__aeabi_ddiv+0x5ba>
 8001048:	4659      	mov	r1, fp
 800104a:	01c9      	lsls	r1, r1, #7
 800104c:	d506      	bpl.n	800105c <__aeabi_ddiv+0x29c>
 800104e:	4659      	mov	r1, fp
 8001050:	4b3e      	ldr	r3, [pc, #248]	@ (800114c <__aeabi_ddiv+0x38c>)
 8001052:	4019      	ands	r1, r3
 8001054:	2380      	movs	r3, #128	@ 0x80
 8001056:	468b      	mov	fp, r1
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	4453      	add	r3, sl
 800105c:	493c      	ldr	r1, [pc, #240]	@ (8001150 <__aeabi_ddiv+0x390>)
 800105e:	428b      	cmp	r3, r1
 8001060:	dd00      	ble.n	8001064 <__aeabi_ddiv+0x2a4>
 8001062:	e71a      	b.n	8000e9a <__aeabi_ddiv+0xda>
 8001064:	4659      	mov	r1, fp
 8001066:	08d2      	lsrs	r2, r2, #3
 8001068:	0749      	lsls	r1, r1, #29
 800106a:	4311      	orrs	r1, r2
 800106c:	465a      	mov	r2, fp
 800106e:	055b      	lsls	r3, r3, #21
 8001070:	0254      	lsls	r4, r2, #9
 8001072:	4688      	mov	r8, r1
 8001074:	0b24      	lsrs	r4, r4, #12
 8001076:	0d5b      	lsrs	r3, r3, #21
 8001078:	e702      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 800107a:	465a      	mov	r2, fp
 800107c:	9b00      	ldr	r3, [sp, #0]
 800107e:	431a      	orrs	r2, r3
 8001080:	d100      	bne.n	8001084 <__aeabi_ddiv+0x2c4>
 8001082:	e07e      	b.n	8001182 <__aeabi_ddiv+0x3c2>
 8001084:	465b      	mov	r3, fp
 8001086:	2b00      	cmp	r3, #0
 8001088:	d100      	bne.n	800108c <__aeabi_ddiv+0x2cc>
 800108a:	e100      	b.n	800128e <__aeabi_ddiv+0x4ce>
 800108c:	4658      	mov	r0, fp
 800108e:	f7ff fa0b 	bl	80004a8 <__clzsi2>
 8001092:	0002      	movs	r2, r0
 8001094:	0003      	movs	r3, r0
 8001096:	3a0b      	subs	r2, #11
 8001098:	271d      	movs	r7, #29
 800109a:	9e00      	ldr	r6, [sp, #0]
 800109c:	1aba      	subs	r2, r7, r2
 800109e:	0019      	movs	r1, r3
 80010a0:	4658      	mov	r0, fp
 80010a2:	40d6      	lsrs	r6, r2
 80010a4:	3908      	subs	r1, #8
 80010a6:	4088      	lsls	r0, r1
 80010a8:	0032      	movs	r2, r6
 80010aa:	4302      	orrs	r2, r0
 80010ac:	4693      	mov	fp, r2
 80010ae:	9a00      	ldr	r2, [sp, #0]
 80010b0:	408a      	lsls	r2, r1
 80010b2:	4928      	ldr	r1, [pc, #160]	@ (8001154 <__aeabi_ddiv+0x394>)
 80010b4:	4453      	add	r3, sl
 80010b6:	468a      	mov	sl, r1
 80010b8:	449a      	add	sl, r3
 80010ba:	2300      	movs	r3, #0
 80010bc:	e6c8      	b.n	8000e50 <__aeabi_ddiv+0x90>
 80010be:	465b      	mov	r3, fp
 80010c0:	4303      	orrs	r3, r0
 80010c2:	4699      	mov	r9, r3
 80010c4:	d056      	beq.n	8001174 <__aeabi_ddiv+0x3b4>
 80010c6:	465b      	mov	r3, fp
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d100      	bne.n	80010ce <__aeabi_ddiv+0x30e>
 80010cc:	e0cd      	b.n	800126a <__aeabi_ddiv+0x4aa>
 80010ce:	4658      	mov	r0, fp
 80010d0:	f7ff f9ea 	bl	80004a8 <__clzsi2>
 80010d4:	230b      	movs	r3, #11
 80010d6:	425b      	negs	r3, r3
 80010d8:	469c      	mov	ip, r3
 80010da:	0002      	movs	r2, r0
 80010dc:	4484      	add	ip, r0
 80010de:	4666      	mov	r6, ip
 80010e0:	231d      	movs	r3, #29
 80010e2:	1b9b      	subs	r3, r3, r6
 80010e4:	0026      	movs	r6, r4
 80010e6:	0011      	movs	r1, r2
 80010e8:	4658      	mov	r0, fp
 80010ea:	40de      	lsrs	r6, r3
 80010ec:	3908      	subs	r1, #8
 80010ee:	4088      	lsls	r0, r1
 80010f0:	0033      	movs	r3, r6
 80010f2:	4303      	orrs	r3, r0
 80010f4:	4699      	mov	r9, r3
 80010f6:	0023      	movs	r3, r4
 80010f8:	408b      	lsls	r3, r1
 80010fa:	4698      	mov	r8, r3
 80010fc:	4b16      	ldr	r3, [pc, #88]	@ (8001158 <__aeabi_ddiv+0x398>)
 80010fe:	2400      	movs	r4, #0
 8001100:	1a9b      	subs	r3, r3, r2
 8001102:	469a      	mov	sl, r3
 8001104:	2300      	movs	r3, #0
 8001106:	9303      	str	r3, [sp, #12]
 8001108:	e682      	b.n	8000e10 <__aeabi_ddiv+0x50>
 800110a:	465a      	mov	r2, fp
 800110c:	4302      	orrs	r2, r0
 800110e:	4691      	mov	r9, r2
 8001110:	d12a      	bne.n	8001168 <__aeabi_ddiv+0x3a8>
 8001112:	2200      	movs	r2, #0
 8001114:	469a      	mov	sl, r3
 8001116:	2302      	movs	r3, #2
 8001118:	4690      	mov	r8, r2
 800111a:	2408      	movs	r4, #8
 800111c:	9303      	str	r3, [sp, #12]
 800111e:	e677      	b.n	8000e10 <__aeabi_ddiv+0x50>
 8001120:	465a      	mov	r2, fp
 8001122:	9b00      	ldr	r3, [sp, #0]
 8001124:	431a      	orrs	r2, r3
 8001126:	4b0d      	ldr	r3, [pc, #52]	@ (800115c <__aeabi_ddiv+0x39c>)
 8001128:	469c      	mov	ip, r3
 800112a:	44e2      	add	sl, ip
 800112c:	2a00      	cmp	r2, #0
 800112e:	d117      	bne.n	8001160 <__aeabi_ddiv+0x3a0>
 8001130:	2302      	movs	r3, #2
 8001132:	431c      	orrs	r4, r3
 8001134:	2300      	movs	r3, #0
 8001136:	469b      	mov	fp, r3
 8001138:	3302      	adds	r3, #2
 800113a:	e689      	b.n	8000e50 <__aeabi_ddiv+0x90>
 800113c:	000007ff 	.word	0x000007ff
 8001140:	fffffc01 	.word	0xfffffc01
 8001144:	0800fa58 	.word	0x0800fa58
 8001148:	000003ff 	.word	0x000003ff
 800114c:	feffffff 	.word	0xfeffffff
 8001150:	000007fe 	.word	0x000007fe
 8001154:	000003f3 	.word	0x000003f3
 8001158:	fffffc0d 	.word	0xfffffc0d
 800115c:	fffff801 	.word	0xfffff801
 8001160:	2303      	movs	r3, #3
 8001162:	0032      	movs	r2, r6
 8001164:	431c      	orrs	r4, r3
 8001166:	e673      	b.n	8000e50 <__aeabi_ddiv+0x90>
 8001168:	469a      	mov	sl, r3
 800116a:	2303      	movs	r3, #3
 800116c:	46d9      	mov	r9, fp
 800116e:	240c      	movs	r4, #12
 8001170:	9303      	str	r3, [sp, #12]
 8001172:	e64d      	b.n	8000e10 <__aeabi_ddiv+0x50>
 8001174:	2300      	movs	r3, #0
 8001176:	4698      	mov	r8, r3
 8001178:	469a      	mov	sl, r3
 800117a:	3301      	adds	r3, #1
 800117c:	2404      	movs	r4, #4
 800117e:	9303      	str	r3, [sp, #12]
 8001180:	e646      	b.n	8000e10 <__aeabi_ddiv+0x50>
 8001182:	2301      	movs	r3, #1
 8001184:	431c      	orrs	r4, r3
 8001186:	2300      	movs	r3, #0
 8001188:	469b      	mov	fp, r3
 800118a:	3301      	adds	r3, #1
 800118c:	e660      	b.n	8000e50 <__aeabi_ddiv+0x90>
 800118e:	2300      	movs	r3, #0
 8001190:	2480      	movs	r4, #128	@ 0x80
 8001192:	4698      	mov	r8, r3
 8001194:	2600      	movs	r6, #0
 8001196:	4b92      	ldr	r3, [pc, #584]	@ (80013e0 <__aeabi_ddiv+0x620>)
 8001198:	0324      	lsls	r4, r4, #12
 800119a:	e671      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 800119c:	2201      	movs	r2, #1
 800119e:	4252      	negs	r2, r2
 80011a0:	2101      	movs	r1, #1
 80011a2:	1ac9      	subs	r1, r1, r3
 80011a4:	2938      	cmp	r1, #56	@ 0x38
 80011a6:	dd00      	ble.n	80011aa <__aeabi_ddiv+0x3ea>
 80011a8:	e666      	b.n	8000e78 <__aeabi_ddiv+0xb8>
 80011aa:	291f      	cmp	r1, #31
 80011ac:	dc00      	bgt.n	80011b0 <__aeabi_ddiv+0x3f0>
 80011ae:	e0ab      	b.n	8001308 <__aeabi_ddiv+0x548>
 80011b0:	201f      	movs	r0, #31
 80011b2:	4240      	negs	r0, r0
 80011b4:	1ac3      	subs	r3, r0, r3
 80011b6:	4658      	mov	r0, fp
 80011b8:	40d8      	lsrs	r0, r3
 80011ba:	0003      	movs	r3, r0
 80011bc:	2920      	cmp	r1, #32
 80011be:	d004      	beq.n	80011ca <__aeabi_ddiv+0x40a>
 80011c0:	4658      	mov	r0, fp
 80011c2:	4988      	ldr	r1, [pc, #544]	@ (80013e4 <__aeabi_ddiv+0x624>)
 80011c4:	4451      	add	r1, sl
 80011c6:	4088      	lsls	r0, r1
 80011c8:	4302      	orrs	r2, r0
 80011ca:	1e51      	subs	r1, r2, #1
 80011cc:	418a      	sbcs	r2, r1
 80011ce:	431a      	orrs	r2, r3
 80011d0:	2307      	movs	r3, #7
 80011d2:	0019      	movs	r1, r3
 80011d4:	2400      	movs	r4, #0
 80011d6:	4011      	ands	r1, r2
 80011d8:	4213      	tst	r3, r2
 80011da:	d00c      	beq.n	80011f6 <__aeabi_ddiv+0x436>
 80011dc:	230f      	movs	r3, #15
 80011de:	4013      	ands	r3, r2
 80011e0:	2b04      	cmp	r3, #4
 80011e2:	d100      	bne.n	80011e6 <__aeabi_ddiv+0x426>
 80011e4:	e0f9      	b.n	80013da <__aeabi_ddiv+0x61a>
 80011e6:	1d11      	adds	r1, r2, #4
 80011e8:	4291      	cmp	r1, r2
 80011ea:	419b      	sbcs	r3, r3
 80011ec:	000a      	movs	r2, r1
 80011ee:	425b      	negs	r3, r3
 80011f0:	0759      	lsls	r1, r3, #29
 80011f2:	025b      	lsls	r3, r3, #9
 80011f4:	0b1c      	lsrs	r4, r3, #12
 80011f6:	08d2      	lsrs	r2, r2, #3
 80011f8:	430a      	orrs	r2, r1
 80011fa:	4690      	mov	r8, r2
 80011fc:	2300      	movs	r3, #0
 80011fe:	e63f      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 8001200:	2480      	movs	r4, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	0324      	lsls	r4, r4, #12
 8001206:	4223      	tst	r3, r4
 8001208:	d009      	beq.n	800121e <__aeabi_ddiv+0x45e>
 800120a:	465b      	mov	r3, fp
 800120c:	4223      	tst	r3, r4
 800120e:	d106      	bne.n	800121e <__aeabi_ddiv+0x45e>
 8001210:	431c      	orrs	r4, r3
 8001212:	0324      	lsls	r4, r4, #12
 8001214:	002e      	movs	r6, r5
 8001216:	4690      	mov	r8, r2
 8001218:	4b71      	ldr	r3, [pc, #452]	@ (80013e0 <__aeabi_ddiv+0x620>)
 800121a:	0b24      	lsrs	r4, r4, #12
 800121c:	e630      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 800121e:	2480      	movs	r4, #128	@ 0x80
 8001220:	464b      	mov	r3, r9
 8001222:	0324      	lsls	r4, r4, #12
 8001224:	431c      	orrs	r4, r3
 8001226:	0324      	lsls	r4, r4, #12
 8001228:	9e02      	ldr	r6, [sp, #8]
 800122a:	4b6d      	ldr	r3, [pc, #436]	@ (80013e0 <__aeabi_ddiv+0x620>)
 800122c:	0b24      	lsrs	r4, r4, #12
 800122e:	e627      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 8001230:	2b00      	cmp	r3, #0
 8001232:	d100      	bne.n	8001236 <__aeabi_ddiv+0x476>
 8001234:	e700      	b.n	8001038 <__aeabi_ddiv+0x278>
 8001236:	9800      	ldr	r0, [sp, #0]
 8001238:	1e51      	subs	r1, r2, #1
 800123a:	4684      	mov	ip, r0
 800123c:	4464      	add	r4, ip
 800123e:	4284      	cmp	r4, r0
 8001240:	d200      	bcs.n	8001244 <__aeabi_ddiv+0x484>
 8001242:	e084      	b.n	800134e <__aeabi_ddiv+0x58e>
 8001244:	42bc      	cmp	r4, r7
 8001246:	d200      	bcs.n	800124a <__aeabi_ddiv+0x48a>
 8001248:	e0ae      	b.n	80013a8 <__aeabi_ddiv+0x5e8>
 800124a:	d100      	bne.n	800124e <__aeabi_ddiv+0x48e>
 800124c:	e0c1      	b.n	80013d2 <__aeabi_ddiv+0x612>
 800124e:	000a      	movs	r2, r1
 8001250:	e6f0      	b.n	8001034 <__aeabi_ddiv+0x274>
 8001252:	4542      	cmp	r2, r8
 8001254:	d900      	bls.n	8001258 <__aeabi_ddiv+0x498>
 8001256:	e62c      	b.n	8000eb2 <__aeabi_ddiv+0xf2>
 8001258:	464b      	mov	r3, r9
 800125a:	07dc      	lsls	r4, r3, #31
 800125c:	0858      	lsrs	r0, r3, #1
 800125e:	4643      	mov	r3, r8
 8001260:	085b      	lsrs	r3, r3, #1
 8001262:	431c      	orrs	r4, r3
 8001264:	4643      	mov	r3, r8
 8001266:	07df      	lsls	r7, r3, #31
 8001268:	e62a      	b.n	8000ec0 <__aeabi_ddiv+0x100>
 800126a:	f7ff f91d 	bl	80004a8 <__clzsi2>
 800126e:	2315      	movs	r3, #21
 8001270:	469c      	mov	ip, r3
 8001272:	4484      	add	ip, r0
 8001274:	0002      	movs	r2, r0
 8001276:	4663      	mov	r3, ip
 8001278:	3220      	adds	r2, #32
 800127a:	2b1c      	cmp	r3, #28
 800127c:	dc00      	bgt.n	8001280 <__aeabi_ddiv+0x4c0>
 800127e:	e72e      	b.n	80010de <__aeabi_ddiv+0x31e>
 8001280:	0023      	movs	r3, r4
 8001282:	3808      	subs	r0, #8
 8001284:	4083      	lsls	r3, r0
 8001286:	4699      	mov	r9, r3
 8001288:	2300      	movs	r3, #0
 800128a:	4698      	mov	r8, r3
 800128c:	e736      	b.n	80010fc <__aeabi_ddiv+0x33c>
 800128e:	f7ff f90b 	bl	80004a8 <__clzsi2>
 8001292:	0002      	movs	r2, r0
 8001294:	0003      	movs	r3, r0
 8001296:	3215      	adds	r2, #21
 8001298:	3320      	adds	r3, #32
 800129a:	2a1c      	cmp	r2, #28
 800129c:	dc00      	bgt.n	80012a0 <__aeabi_ddiv+0x4e0>
 800129e:	e6fb      	b.n	8001098 <__aeabi_ddiv+0x2d8>
 80012a0:	9900      	ldr	r1, [sp, #0]
 80012a2:	3808      	subs	r0, #8
 80012a4:	4081      	lsls	r1, r0
 80012a6:	2200      	movs	r2, #0
 80012a8:	468b      	mov	fp, r1
 80012aa:	e702      	b.n	80010b2 <__aeabi_ddiv+0x2f2>
 80012ac:	9900      	ldr	r1, [sp, #0]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	468c      	mov	ip, r1
 80012b2:	4464      	add	r4, ip
 80012b4:	42a1      	cmp	r1, r4
 80012b6:	d900      	bls.n	80012ba <__aeabi_ddiv+0x4fa>
 80012b8:	e69a      	b.n	8000ff0 <__aeabi_ddiv+0x230>
 80012ba:	42a2      	cmp	r2, r4
 80012bc:	d800      	bhi.n	80012c0 <__aeabi_ddiv+0x500>
 80012be:	e697      	b.n	8000ff0 <__aeabi_ddiv+0x230>
 80012c0:	1e83      	subs	r3, r0, #2
 80012c2:	4464      	add	r4, ip
 80012c4:	e694      	b.n	8000ff0 <__aeabi_ddiv+0x230>
 80012c6:	46ac      	mov	ip, r5
 80012c8:	4461      	add	r1, ip
 80012ca:	3f01      	subs	r7, #1
 80012cc:	428d      	cmp	r5, r1
 80012ce:	d900      	bls.n	80012d2 <__aeabi_ddiv+0x512>
 80012d0:	e680      	b.n	8000fd4 <__aeabi_ddiv+0x214>
 80012d2:	428a      	cmp	r2, r1
 80012d4:	d800      	bhi.n	80012d8 <__aeabi_ddiv+0x518>
 80012d6:	e67d      	b.n	8000fd4 <__aeabi_ddiv+0x214>
 80012d8:	1e87      	subs	r7, r0, #2
 80012da:	4461      	add	r1, ip
 80012dc:	e67a      	b.n	8000fd4 <__aeabi_ddiv+0x214>
 80012de:	4285      	cmp	r5, r0
 80012e0:	d000      	beq.n	80012e4 <__aeabi_ddiv+0x524>
 80012e2:	e65f      	b.n	8000fa4 <__aeabi_ddiv+0x1e4>
 80012e4:	45b9      	cmp	r9, r7
 80012e6:	d900      	bls.n	80012ea <__aeabi_ddiv+0x52a>
 80012e8:	e65c      	b.n	8000fa4 <__aeabi_ddiv+0x1e4>
 80012ea:	e656      	b.n	8000f9a <__aeabi_ddiv+0x1da>
 80012ec:	42a2      	cmp	r2, r4
 80012ee:	d800      	bhi.n	80012f2 <__aeabi_ddiv+0x532>
 80012f0:	e61a      	b.n	8000f28 <__aeabi_ddiv+0x168>
 80012f2:	1e83      	subs	r3, r0, #2
 80012f4:	4464      	add	r4, ip
 80012f6:	e617      	b.n	8000f28 <__aeabi_ddiv+0x168>
 80012f8:	428a      	cmp	r2, r1
 80012fa:	d800      	bhi.n	80012fe <__aeabi_ddiv+0x53e>
 80012fc:	e600      	b.n	8000f00 <__aeabi_ddiv+0x140>
 80012fe:	46ac      	mov	ip, r5
 8001300:	1e83      	subs	r3, r0, #2
 8001302:	4698      	mov	r8, r3
 8001304:	4461      	add	r1, ip
 8001306:	e5fb      	b.n	8000f00 <__aeabi_ddiv+0x140>
 8001308:	4837      	ldr	r0, [pc, #220]	@ (80013e8 <__aeabi_ddiv+0x628>)
 800130a:	0014      	movs	r4, r2
 800130c:	4450      	add	r0, sl
 800130e:	4082      	lsls	r2, r0
 8001310:	465b      	mov	r3, fp
 8001312:	0017      	movs	r7, r2
 8001314:	4083      	lsls	r3, r0
 8001316:	40cc      	lsrs	r4, r1
 8001318:	1e7a      	subs	r2, r7, #1
 800131a:	4197      	sbcs	r7, r2
 800131c:	4323      	orrs	r3, r4
 800131e:	433b      	orrs	r3, r7
 8001320:	001a      	movs	r2, r3
 8001322:	465b      	mov	r3, fp
 8001324:	40cb      	lsrs	r3, r1
 8001326:	0751      	lsls	r1, r2, #29
 8001328:	d009      	beq.n	800133e <__aeabi_ddiv+0x57e>
 800132a:	210f      	movs	r1, #15
 800132c:	4011      	ands	r1, r2
 800132e:	2904      	cmp	r1, #4
 8001330:	d005      	beq.n	800133e <__aeabi_ddiv+0x57e>
 8001332:	1d11      	adds	r1, r2, #4
 8001334:	4291      	cmp	r1, r2
 8001336:	4192      	sbcs	r2, r2
 8001338:	4252      	negs	r2, r2
 800133a:	189b      	adds	r3, r3, r2
 800133c:	000a      	movs	r2, r1
 800133e:	0219      	lsls	r1, r3, #8
 8001340:	d400      	bmi.n	8001344 <__aeabi_ddiv+0x584>
 8001342:	e755      	b.n	80011f0 <__aeabi_ddiv+0x430>
 8001344:	2200      	movs	r2, #0
 8001346:	2301      	movs	r3, #1
 8001348:	2400      	movs	r4, #0
 800134a:	4690      	mov	r8, r2
 800134c:	e598      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 800134e:	000a      	movs	r2, r1
 8001350:	42bc      	cmp	r4, r7
 8001352:	d000      	beq.n	8001356 <__aeabi_ddiv+0x596>
 8001354:	e66e      	b.n	8001034 <__aeabi_ddiv+0x274>
 8001356:	454b      	cmp	r3, r9
 8001358:	d000      	beq.n	800135c <__aeabi_ddiv+0x59c>
 800135a:	e66b      	b.n	8001034 <__aeabi_ddiv+0x274>
 800135c:	e66c      	b.n	8001038 <__aeabi_ddiv+0x278>
 800135e:	4b23      	ldr	r3, [pc, #140]	@ (80013ec <__aeabi_ddiv+0x62c>)
 8001360:	4a23      	ldr	r2, [pc, #140]	@ (80013f0 <__aeabi_ddiv+0x630>)
 8001362:	4453      	add	r3, sl
 8001364:	4592      	cmp	sl, r2
 8001366:	da00      	bge.n	800136a <__aeabi_ddiv+0x5aa>
 8001368:	e718      	b.n	800119c <__aeabi_ddiv+0x3dc>
 800136a:	2101      	movs	r1, #1
 800136c:	4249      	negs	r1, r1
 800136e:	1d0a      	adds	r2, r1, #4
 8001370:	428a      	cmp	r2, r1
 8001372:	4189      	sbcs	r1, r1
 8001374:	4249      	negs	r1, r1
 8001376:	448b      	add	fp, r1
 8001378:	e666      	b.n	8001048 <__aeabi_ddiv+0x288>
 800137a:	210f      	movs	r1, #15
 800137c:	4011      	ands	r1, r2
 800137e:	2904      	cmp	r1, #4
 8001380:	d100      	bne.n	8001384 <__aeabi_ddiv+0x5c4>
 8001382:	e661      	b.n	8001048 <__aeabi_ddiv+0x288>
 8001384:	0011      	movs	r1, r2
 8001386:	e7f2      	b.n	800136e <__aeabi_ddiv+0x5ae>
 8001388:	42bc      	cmp	r4, r7
 800138a:	d800      	bhi.n	800138e <__aeabi_ddiv+0x5ce>
 800138c:	e60a      	b.n	8000fa4 <__aeabi_ddiv+0x1e4>
 800138e:	2302      	movs	r3, #2
 8001390:	425b      	negs	r3, r3
 8001392:	469c      	mov	ip, r3
 8001394:	9900      	ldr	r1, [sp, #0]
 8001396:	444f      	add	r7, r9
 8001398:	454f      	cmp	r7, r9
 800139a:	419b      	sbcs	r3, r3
 800139c:	44e3      	add	fp, ip
 800139e:	468c      	mov	ip, r1
 80013a0:	425b      	negs	r3, r3
 80013a2:	4463      	add	r3, ip
 80013a4:	18c0      	adds	r0, r0, r3
 80013a6:	e5ff      	b.n	8000fa8 <__aeabi_ddiv+0x1e8>
 80013a8:	4649      	mov	r1, r9
 80013aa:	9d00      	ldr	r5, [sp, #0]
 80013ac:	0048      	lsls	r0, r1, #1
 80013ae:	4548      	cmp	r0, r9
 80013b0:	4189      	sbcs	r1, r1
 80013b2:	46ac      	mov	ip, r5
 80013b4:	4249      	negs	r1, r1
 80013b6:	4461      	add	r1, ip
 80013b8:	4681      	mov	r9, r0
 80013ba:	3a02      	subs	r2, #2
 80013bc:	1864      	adds	r4, r4, r1
 80013be:	e7c7      	b.n	8001350 <__aeabi_ddiv+0x590>
 80013c0:	2480      	movs	r4, #128	@ 0x80
 80013c2:	465b      	mov	r3, fp
 80013c4:	0324      	lsls	r4, r4, #12
 80013c6:	431c      	orrs	r4, r3
 80013c8:	0324      	lsls	r4, r4, #12
 80013ca:	4690      	mov	r8, r2
 80013cc:	4b04      	ldr	r3, [pc, #16]	@ (80013e0 <__aeabi_ddiv+0x620>)
 80013ce:	0b24      	lsrs	r4, r4, #12
 80013d0:	e556      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 80013d2:	4599      	cmp	r9, r3
 80013d4:	d3e8      	bcc.n	80013a8 <__aeabi_ddiv+0x5e8>
 80013d6:	000a      	movs	r2, r1
 80013d8:	e7bd      	b.n	8001356 <__aeabi_ddiv+0x596>
 80013da:	2300      	movs	r3, #0
 80013dc:	e708      	b.n	80011f0 <__aeabi_ddiv+0x430>
 80013de:	46c0      	nop			@ (mov r8, r8)
 80013e0:	000007ff 	.word	0x000007ff
 80013e4:	0000043e 	.word	0x0000043e
 80013e8:	0000041e 	.word	0x0000041e
 80013ec:	000003ff 	.word	0x000003ff
 80013f0:	fffffc02 	.word	0xfffffc02

080013f4 <__eqdf2>:
 80013f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f6:	4657      	mov	r7, sl
 80013f8:	46de      	mov	lr, fp
 80013fa:	464e      	mov	r6, r9
 80013fc:	4645      	mov	r5, r8
 80013fe:	b5e0      	push	{r5, r6, r7, lr}
 8001400:	000d      	movs	r5, r1
 8001402:	0004      	movs	r4, r0
 8001404:	0fe8      	lsrs	r0, r5, #31
 8001406:	4683      	mov	fp, r0
 8001408:	0309      	lsls	r1, r1, #12
 800140a:	0fd8      	lsrs	r0, r3, #31
 800140c:	0b09      	lsrs	r1, r1, #12
 800140e:	4682      	mov	sl, r0
 8001410:	4819      	ldr	r0, [pc, #100]	@ (8001478 <__eqdf2+0x84>)
 8001412:	468c      	mov	ip, r1
 8001414:	031f      	lsls	r7, r3, #12
 8001416:	0069      	lsls	r1, r5, #1
 8001418:	005e      	lsls	r6, r3, #1
 800141a:	0d49      	lsrs	r1, r1, #21
 800141c:	0b3f      	lsrs	r7, r7, #12
 800141e:	0d76      	lsrs	r6, r6, #21
 8001420:	4281      	cmp	r1, r0
 8001422:	d018      	beq.n	8001456 <__eqdf2+0x62>
 8001424:	4286      	cmp	r6, r0
 8001426:	d00f      	beq.n	8001448 <__eqdf2+0x54>
 8001428:	2001      	movs	r0, #1
 800142a:	42b1      	cmp	r1, r6
 800142c:	d10d      	bne.n	800144a <__eqdf2+0x56>
 800142e:	45bc      	cmp	ip, r7
 8001430:	d10b      	bne.n	800144a <__eqdf2+0x56>
 8001432:	4294      	cmp	r4, r2
 8001434:	d109      	bne.n	800144a <__eqdf2+0x56>
 8001436:	45d3      	cmp	fp, sl
 8001438:	d01c      	beq.n	8001474 <__eqdf2+0x80>
 800143a:	2900      	cmp	r1, #0
 800143c:	d105      	bne.n	800144a <__eqdf2+0x56>
 800143e:	4660      	mov	r0, ip
 8001440:	4320      	orrs	r0, r4
 8001442:	1e43      	subs	r3, r0, #1
 8001444:	4198      	sbcs	r0, r3
 8001446:	e000      	b.n	800144a <__eqdf2+0x56>
 8001448:	2001      	movs	r0, #1
 800144a:	bcf0      	pop	{r4, r5, r6, r7}
 800144c:	46bb      	mov	fp, r7
 800144e:	46b2      	mov	sl, r6
 8001450:	46a9      	mov	r9, r5
 8001452:	46a0      	mov	r8, r4
 8001454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001456:	2001      	movs	r0, #1
 8001458:	428e      	cmp	r6, r1
 800145a:	d1f6      	bne.n	800144a <__eqdf2+0x56>
 800145c:	4661      	mov	r1, ip
 800145e:	4339      	orrs	r1, r7
 8001460:	000f      	movs	r7, r1
 8001462:	4317      	orrs	r7, r2
 8001464:	4327      	orrs	r7, r4
 8001466:	d1f0      	bne.n	800144a <__eqdf2+0x56>
 8001468:	465b      	mov	r3, fp
 800146a:	4652      	mov	r2, sl
 800146c:	1a98      	subs	r0, r3, r2
 800146e:	1e43      	subs	r3, r0, #1
 8001470:	4198      	sbcs	r0, r3
 8001472:	e7ea      	b.n	800144a <__eqdf2+0x56>
 8001474:	2000      	movs	r0, #0
 8001476:	e7e8      	b.n	800144a <__eqdf2+0x56>
 8001478:	000007ff 	.word	0x000007ff

0800147c <__gedf2>:
 800147c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147e:	4657      	mov	r7, sl
 8001480:	464e      	mov	r6, r9
 8001482:	4645      	mov	r5, r8
 8001484:	46de      	mov	lr, fp
 8001486:	b5e0      	push	{r5, r6, r7, lr}
 8001488:	000d      	movs	r5, r1
 800148a:	030f      	lsls	r7, r1, #12
 800148c:	0b39      	lsrs	r1, r7, #12
 800148e:	b083      	sub	sp, #12
 8001490:	0004      	movs	r4, r0
 8001492:	4680      	mov	r8, r0
 8001494:	9101      	str	r1, [sp, #4]
 8001496:	0058      	lsls	r0, r3, #1
 8001498:	0fe9      	lsrs	r1, r5, #31
 800149a:	4f31      	ldr	r7, [pc, #196]	@ (8001560 <__gedf2+0xe4>)
 800149c:	0d40      	lsrs	r0, r0, #21
 800149e:	468c      	mov	ip, r1
 80014a0:	006e      	lsls	r6, r5, #1
 80014a2:	0319      	lsls	r1, r3, #12
 80014a4:	4682      	mov	sl, r0
 80014a6:	4691      	mov	r9, r2
 80014a8:	0d76      	lsrs	r6, r6, #21
 80014aa:	0b09      	lsrs	r1, r1, #12
 80014ac:	0fd8      	lsrs	r0, r3, #31
 80014ae:	42be      	cmp	r6, r7
 80014b0:	d01f      	beq.n	80014f2 <__gedf2+0x76>
 80014b2:	45ba      	cmp	sl, r7
 80014b4:	d00f      	beq.n	80014d6 <__gedf2+0x5a>
 80014b6:	2e00      	cmp	r6, #0
 80014b8:	d12f      	bne.n	800151a <__gedf2+0x9e>
 80014ba:	4655      	mov	r5, sl
 80014bc:	9e01      	ldr	r6, [sp, #4]
 80014be:	4334      	orrs	r4, r6
 80014c0:	2d00      	cmp	r5, #0
 80014c2:	d127      	bne.n	8001514 <__gedf2+0x98>
 80014c4:	430a      	orrs	r2, r1
 80014c6:	d03a      	beq.n	800153e <__gedf2+0xc2>
 80014c8:	2c00      	cmp	r4, #0
 80014ca:	d145      	bne.n	8001558 <__gedf2+0xdc>
 80014cc:	2800      	cmp	r0, #0
 80014ce:	d11a      	bne.n	8001506 <__gedf2+0x8a>
 80014d0:	2001      	movs	r0, #1
 80014d2:	4240      	negs	r0, r0
 80014d4:	e017      	b.n	8001506 <__gedf2+0x8a>
 80014d6:	4311      	orrs	r1, r2
 80014d8:	d13b      	bne.n	8001552 <__gedf2+0xd6>
 80014da:	2e00      	cmp	r6, #0
 80014dc:	d102      	bne.n	80014e4 <__gedf2+0x68>
 80014de:	9f01      	ldr	r7, [sp, #4]
 80014e0:	4327      	orrs	r7, r4
 80014e2:	d0f3      	beq.n	80014cc <__gedf2+0x50>
 80014e4:	4584      	cmp	ip, r0
 80014e6:	d109      	bne.n	80014fc <__gedf2+0x80>
 80014e8:	4663      	mov	r3, ip
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f0      	beq.n	80014d0 <__gedf2+0x54>
 80014ee:	4660      	mov	r0, ip
 80014f0:	e009      	b.n	8001506 <__gedf2+0x8a>
 80014f2:	9f01      	ldr	r7, [sp, #4]
 80014f4:	4327      	orrs	r7, r4
 80014f6:	d12c      	bne.n	8001552 <__gedf2+0xd6>
 80014f8:	45b2      	cmp	sl, r6
 80014fa:	d024      	beq.n	8001546 <__gedf2+0xca>
 80014fc:	4663      	mov	r3, ip
 80014fe:	2002      	movs	r0, #2
 8001500:	3b01      	subs	r3, #1
 8001502:	4018      	ands	r0, r3
 8001504:	3801      	subs	r0, #1
 8001506:	b003      	add	sp, #12
 8001508:	bcf0      	pop	{r4, r5, r6, r7}
 800150a:	46bb      	mov	fp, r7
 800150c:	46b2      	mov	sl, r6
 800150e:	46a9      	mov	r9, r5
 8001510:	46a0      	mov	r8, r4
 8001512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001514:	2c00      	cmp	r4, #0
 8001516:	d0d9      	beq.n	80014cc <__gedf2+0x50>
 8001518:	e7e4      	b.n	80014e4 <__gedf2+0x68>
 800151a:	4654      	mov	r4, sl
 800151c:	2c00      	cmp	r4, #0
 800151e:	d0ed      	beq.n	80014fc <__gedf2+0x80>
 8001520:	4584      	cmp	ip, r0
 8001522:	d1eb      	bne.n	80014fc <__gedf2+0x80>
 8001524:	4556      	cmp	r6, sl
 8001526:	dce9      	bgt.n	80014fc <__gedf2+0x80>
 8001528:	dbde      	blt.n	80014e8 <__gedf2+0x6c>
 800152a:	9b01      	ldr	r3, [sp, #4]
 800152c:	428b      	cmp	r3, r1
 800152e:	d8e5      	bhi.n	80014fc <__gedf2+0x80>
 8001530:	d1da      	bne.n	80014e8 <__gedf2+0x6c>
 8001532:	45c8      	cmp	r8, r9
 8001534:	d8e2      	bhi.n	80014fc <__gedf2+0x80>
 8001536:	2000      	movs	r0, #0
 8001538:	45c8      	cmp	r8, r9
 800153a:	d2e4      	bcs.n	8001506 <__gedf2+0x8a>
 800153c:	e7d4      	b.n	80014e8 <__gedf2+0x6c>
 800153e:	2000      	movs	r0, #0
 8001540:	2c00      	cmp	r4, #0
 8001542:	d0e0      	beq.n	8001506 <__gedf2+0x8a>
 8001544:	e7da      	b.n	80014fc <__gedf2+0x80>
 8001546:	4311      	orrs	r1, r2
 8001548:	d103      	bne.n	8001552 <__gedf2+0xd6>
 800154a:	4584      	cmp	ip, r0
 800154c:	d1d6      	bne.n	80014fc <__gedf2+0x80>
 800154e:	2000      	movs	r0, #0
 8001550:	e7d9      	b.n	8001506 <__gedf2+0x8a>
 8001552:	2002      	movs	r0, #2
 8001554:	4240      	negs	r0, r0
 8001556:	e7d6      	b.n	8001506 <__gedf2+0x8a>
 8001558:	4584      	cmp	ip, r0
 800155a:	d0e6      	beq.n	800152a <__gedf2+0xae>
 800155c:	e7ce      	b.n	80014fc <__gedf2+0x80>
 800155e:	46c0      	nop			@ (mov r8, r8)
 8001560:	000007ff 	.word	0x000007ff

08001564 <__ledf2>:
 8001564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001566:	4657      	mov	r7, sl
 8001568:	464e      	mov	r6, r9
 800156a:	4645      	mov	r5, r8
 800156c:	46de      	mov	lr, fp
 800156e:	b5e0      	push	{r5, r6, r7, lr}
 8001570:	000d      	movs	r5, r1
 8001572:	030f      	lsls	r7, r1, #12
 8001574:	0004      	movs	r4, r0
 8001576:	4680      	mov	r8, r0
 8001578:	0fe8      	lsrs	r0, r5, #31
 800157a:	0b39      	lsrs	r1, r7, #12
 800157c:	4684      	mov	ip, r0
 800157e:	b083      	sub	sp, #12
 8001580:	0058      	lsls	r0, r3, #1
 8001582:	4f30      	ldr	r7, [pc, #192]	@ (8001644 <__ledf2+0xe0>)
 8001584:	0d40      	lsrs	r0, r0, #21
 8001586:	9101      	str	r1, [sp, #4]
 8001588:	031e      	lsls	r6, r3, #12
 800158a:	0069      	lsls	r1, r5, #1
 800158c:	4682      	mov	sl, r0
 800158e:	4691      	mov	r9, r2
 8001590:	0d49      	lsrs	r1, r1, #21
 8001592:	0b36      	lsrs	r6, r6, #12
 8001594:	0fd8      	lsrs	r0, r3, #31
 8001596:	42b9      	cmp	r1, r7
 8001598:	d020      	beq.n	80015dc <__ledf2+0x78>
 800159a:	45ba      	cmp	sl, r7
 800159c:	d00f      	beq.n	80015be <__ledf2+0x5a>
 800159e:	2900      	cmp	r1, #0
 80015a0:	d12b      	bne.n	80015fa <__ledf2+0x96>
 80015a2:	9901      	ldr	r1, [sp, #4]
 80015a4:	430c      	orrs	r4, r1
 80015a6:	4651      	mov	r1, sl
 80015a8:	2900      	cmp	r1, #0
 80015aa:	d137      	bne.n	800161c <__ledf2+0xb8>
 80015ac:	4332      	orrs	r2, r6
 80015ae:	d038      	beq.n	8001622 <__ledf2+0xbe>
 80015b0:	2c00      	cmp	r4, #0
 80015b2:	d144      	bne.n	800163e <__ledf2+0xda>
 80015b4:	2800      	cmp	r0, #0
 80015b6:	d119      	bne.n	80015ec <__ledf2+0x88>
 80015b8:	2001      	movs	r0, #1
 80015ba:	4240      	negs	r0, r0
 80015bc:	e016      	b.n	80015ec <__ledf2+0x88>
 80015be:	4316      	orrs	r6, r2
 80015c0:	d113      	bne.n	80015ea <__ledf2+0x86>
 80015c2:	2900      	cmp	r1, #0
 80015c4:	d102      	bne.n	80015cc <__ledf2+0x68>
 80015c6:	9f01      	ldr	r7, [sp, #4]
 80015c8:	4327      	orrs	r7, r4
 80015ca:	d0f3      	beq.n	80015b4 <__ledf2+0x50>
 80015cc:	4584      	cmp	ip, r0
 80015ce:	d020      	beq.n	8001612 <__ledf2+0xae>
 80015d0:	4663      	mov	r3, ip
 80015d2:	2002      	movs	r0, #2
 80015d4:	3b01      	subs	r3, #1
 80015d6:	4018      	ands	r0, r3
 80015d8:	3801      	subs	r0, #1
 80015da:	e007      	b.n	80015ec <__ledf2+0x88>
 80015dc:	9f01      	ldr	r7, [sp, #4]
 80015de:	4327      	orrs	r7, r4
 80015e0:	d103      	bne.n	80015ea <__ledf2+0x86>
 80015e2:	458a      	cmp	sl, r1
 80015e4:	d1f4      	bne.n	80015d0 <__ledf2+0x6c>
 80015e6:	4316      	orrs	r6, r2
 80015e8:	d01f      	beq.n	800162a <__ledf2+0xc6>
 80015ea:	2002      	movs	r0, #2
 80015ec:	b003      	add	sp, #12
 80015ee:	bcf0      	pop	{r4, r5, r6, r7}
 80015f0:	46bb      	mov	fp, r7
 80015f2:	46b2      	mov	sl, r6
 80015f4:	46a9      	mov	r9, r5
 80015f6:	46a0      	mov	r8, r4
 80015f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015fa:	4654      	mov	r4, sl
 80015fc:	2c00      	cmp	r4, #0
 80015fe:	d0e7      	beq.n	80015d0 <__ledf2+0x6c>
 8001600:	4584      	cmp	ip, r0
 8001602:	d1e5      	bne.n	80015d0 <__ledf2+0x6c>
 8001604:	4551      	cmp	r1, sl
 8001606:	dce3      	bgt.n	80015d0 <__ledf2+0x6c>
 8001608:	db03      	blt.n	8001612 <__ledf2+0xae>
 800160a:	9b01      	ldr	r3, [sp, #4]
 800160c:	42b3      	cmp	r3, r6
 800160e:	d8df      	bhi.n	80015d0 <__ledf2+0x6c>
 8001610:	d00f      	beq.n	8001632 <__ledf2+0xce>
 8001612:	4663      	mov	r3, ip
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0cf      	beq.n	80015b8 <__ledf2+0x54>
 8001618:	4660      	mov	r0, ip
 800161a:	e7e7      	b.n	80015ec <__ledf2+0x88>
 800161c:	2c00      	cmp	r4, #0
 800161e:	d0c9      	beq.n	80015b4 <__ledf2+0x50>
 8001620:	e7d4      	b.n	80015cc <__ledf2+0x68>
 8001622:	2000      	movs	r0, #0
 8001624:	2c00      	cmp	r4, #0
 8001626:	d0e1      	beq.n	80015ec <__ledf2+0x88>
 8001628:	e7d2      	b.n	80015d0 <__ledf2+0x6c>
 800162a:	4584      	cmp	ip, r0
 800162c:	d1d0      	bne.n	80015d0 <__ledf2+0x6c>
 800162e:	2000      	movs	r0, #0
 8001630:	e7dc      	b.n	80015ec <__ledf2+0x88>
 8001632:	45c8      	cmp	r8, r9
 8001634:	d8cc      	bhi.n	80015d0 <__ledf2+0x6c>
 8001636:	2000      	movs	r0, #0
 8001638:	45c8      	cmp	r8, r9
 800163a:	d2d7      	bcs.n	80015ec <__ledf2+0x88>
 800163c:	e7e9      	b.n	8001612 <__ledf2+0xae>
 800163e:	4584      	cmp	ip, r0
 8001640:	d0e3      	beq.n	800160a <__ledf2+0xa6>
 8001642:	e7c5      	b.n	80015d0 <__ledf2+0x6c>
 8001644:	000007ff 	.word	0x000007ff

08001648 <__aeabi_dmul>:
 8001648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800164a:	4657      	mov	r7, sl
 800164c:	46de      	mov	lr, fp
 800164e:	464e      	mov	r6, r9
 8001650:	4645      	mov	r5, r8
 8001652:	b5e0      	push	{r5, r6, r7, lr}
 8001654:	001f      	movs	r7, r3
 8001656:	030b      	lsls	r3, r1, #12
 8001658:	0b1b      	lsrs	r3, r3, #12
 800165a:	0016      	movs	r6, r2
 800165c:	469a      	mov	sl, r3
 800165e:	0fca      	lsrs	r2, r1, #31
 8001660:	004b      	lsls	r3, r1, #1
 8001662:	0004      	movs	r4, r0
 8001664:	4693      	mov	fp, r2
 8001666:	b087      	sub	sp, #28
 8001668:	0d5b      	lsrs	r3, r3, #21
 800166a:	d100      	bne.n	800166e <__aeabi_dmul+0x26>
 800166c:	e0d5      	b.n	800181a <__aeabi_dmul+0x1d2>
 800166e:	4abb      	ldr	r2, [pc, #748]	@ (800195c <__aeabi_dmul+0x314>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d100      	bne.n	8001676 <__aeabi_dmul+0x2e>
 8001674:	e0f8      	b.n	8001868 <__aeabi_dmul+0x220>
 8001676:	4651      	mov	r1, sl
 8001678:	0f42      	lsrs	r2, r0, #29
 800167a:	00c9      	lsls	r1, r1, #3
 800167c:	430a      	orrs	r2, r1
 800167e:	2180      	movs	r1, #128	@ 0x80
 8001680:	0409      	lsls	r1, r1, #16
 8001682:	4311      	orrs	r1, r2
 8001684:	00c2      	lsls	r2, r0, #3
 8001686:	4691      	mov	r9, r2
 8001688:	4ab5      	ldr	r2, [pc, #724]	@ (8001960 <__aeabi_dmul+0x318>)
 800168a:	468a      	mov	sl, r1
 800168c:	189d      	adds	r5, r3, r2
 800168e:	2300      	movs	r3, #0
 8001690:	4698      	mov	r8, r3
 8001692:	9302      	str	r3, [sp, #8]
 8001694:	033c      	lsls	r4, r7, #12
 8001696:	007b      	lsls	r3, r7, #1
 8001698:	0ffa      	lsrs	r2, r7, #31
 800169a:	0030      	movs	r0, r6
 800169c:	0b24      	lsrs	r4, r4, #12
 800169e:	0d5b      	lsrs	r3, r3, #21
 80016a0:	9200      	str	r2, [sp, #0]
 80016a2:	d100      	bne.n	80016a6 <__aeabi_dmul+0x5e>
 80016a4:	e096      	b.n	80017d4 <__aeabi_dmul+0x18c>
 80016a6:	4aad      	ldr	r2, [pc, #692]	@ (800195c <__aeabi_dmul+0x314>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d031      	beq.n	8001710 <__aeabi_dmul+0xc8>
 80016ac:	0f72      	lsrs	r2, r6, #29
 80016ae:	00e4      	lsls	r4, r4, #3
 80016b0:	4322      	orrs	r2, r4
 80016b2:	2480      	movs	r4, #128	@ 0x80
 80016b4:	0424      	lsls	r4, r4, #16
 80016b6:	4314      	orrs	r4, r2
 80016b8:	4aa9      	ldr	r2, [pc, #676]	@ (8001960 <__aeabi_dmul+0x318>)
 80016ba:	00f0      	lsls	r0, r6, #3
 80016bc:	4694      	mov	ip, r2
 80016be:	4463      	add	r3, ip
 80016c0:	195b      	adds	r3, r3, r5
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	9201      	str	r2, [sp, #4]
 80016c6:	4642      	mov	r2, r8
 80016c8:	2600      	movs	r6, #0
 80016ca:	2a0a      	cmp	r2, #10
 80016cc:	dc42      	bgt.n	8001754 <__aeabi_dmul+0x10c>
 80016ce:	465a      	mov	r2, fp
 80016d0:	9900      	ldr	r1, [sp, #0]
 80016d2:	404a      	eors	r2, r1
 80016d4:	4693      	mov	fp, r2
 80016d6:	4642      	mov	r2, r8
 80016d8:	2a02      	cmp	r2, #2
 80016da:	dc32      	bgt.n	8001742 <__aeabi_dmul+0xfa>
 80016dc:	3a01      	subs	r2, #1
 80016de:	2a01      	cmp	r2, #1
 80016e0:	d900      	bls.n	80016e4 <__aeabi_dmul+0x9c>
 80016e2:	e149      	b.n	8001978 <__aeabi_dmul+0x330>
 80016e4:	2e02      	cmp	r6, #2
 80016e6:	d100      	bne.n	80016ea <__aeabi_dmul+0xa2>
 80016e8:	e0ca      	b.n	8001880 <__aeabi_dmul+0x238>
 80016ea:	2e01      	cmp	r6, #1
 80016ec:	d13d      	bne.n	800176a <__aeabi_dmul+0x122>
 80016ee:	2300      	movs	r3, #0
 80016f0:	2400      	movs	r4, #0
 80016f2:	2200      	movs	r2, #0
 80016f4:	0010      	movs	r0, r2
 80016f6:	465a      	mov	r2, fp
 80016f8:	051b      	lsls	r3, r3, #20
 80016fa:	4323      	orrs	r3, r4
 80016fc:	07d2      	lsls	r2, r2, #31
 80016fe:	4313      	orrs	r3, r2
 8001700:	0019      	movs	r1, r3
 8001702:	b007      	add	sp, #28
 8001704:	bcf0      	pop	{r4, r5, r6, r7}
 8001706:	46bb      	mov	fp, r7
 8001708:	46b2      	mov	sl, r6
 800170a:	46a9      	mov	r9, r5
 800170c:	46a0      	mov	r8, r4
 800170e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001710:	4b92      	ldr	r3, [pc, #584]	@ (800195c <__aeabi_dmul+0x314>)
 8001712:	4326      	orrs	r6, r4
 8001714:	18eb      	adds	r3, r5, r3
 8001716:	2e00      	cmp	r6, #0
 8001718:	d100      	bne.n	800171c <__aeabi_dmul+0xd4>
 800171a:	e0bb      	b.n	8001894 <__aeabi_dmul+0x24c>
 800171c:	2203      	movs	r2, #3
 800171e:	4641      	mov	r1, r8
 8001720:	4311      	orrs	r1, r2
 8001722:	465a      	mov	r2, fp
 8001724:	4688      	mov	r8, r1
 8001726:	9900      	ldr	r1, [sp, #0]
 8001728:	404a      	eors	r2, r1
 800172a:	2180      	movs	r1, #128	@ 0x80
 800172c:	0109      	lsls	r1, r1, #4
 800172e:	468c      	mov	ip, r1
 8001730:	0029      	movs	r1, r5
 8001732:	4461      	add	r1, ip
 8001734:	9101      	str	r1, [sp, #4]
 8001736:	4641      	mov	r1, r8
 8001738:	290a      	cmp	r1, #10
 800173a:	dd00      	ble.n	800173e <__aeabi_dmul+0xf6>
 800173c:	e233      	b.n	8001ba6 <__aeabi_dmul+0x55e>
 800173e:	4693      	mov	fp, r2
 8001740:	2603      	movs	r6, #3
 8001742:	4642      	mov	r2, r8
 8001744:	2701      	movs	r7, #1
 8001746:	4097      	lsls	r7, r2
 8001748:	21a6      	movs	r1, #166	@ 0xa6
 800174a:	003a      	movs	r2, r7
 800174c:	00c9      	lsls	r1, r1, #3
 800174e:	400a      	ands	r2, r1
 8001750:	420f      	tst	r7, r1
 8001752:	d031      	beq.n	80017b8 <__aeabi_dmul+0x170>
 8001754:	9e02      	ldr	r6, [sp, #8]
 8001756:	2e02      	cmp	r6, #2
 8001758:	d100      	bne.n	800175c <__aeabi_dmul+0x114>
 800175a:	e235      	b.n	8001bc8 <__aeabi_dmul+0x580>
 800175c:	2e03      	cmp	r6, #3
 800175e:	d100      	bne.n	8001762 <__aeabi_dmul+0x11a>
 8001760:	e1d2      	b.n	8001b08 <__aeabi_dmul+0x4c0>
 8001762:	4654      	mov	r4, sl
 8001764:	4648      	mov	r0, r9
 8001766:	2e01      	cmp	r6, #1
 8001768:	d0c1      	beq.n	80016ee <__aeabi_dmul+0xa6>
 800176a:	9a01      	ldr	r2, [sp, #4]
 800176c:	4b7d      	ldr	r3, [pc, #500]	@ (8001964 <__aeabi_dmul+0x31c>)
 800176e:	4694      	mov	ip, r2
 8001770:	4463      	add	r3, ip
 8001772:	2b00      	cmp	r3, #0
 8001774:	dc00      	bgt.n	8001778 <__aeabi_dmul+0x130>
 8001776:	e0c0      	b.n	80018fa <__aeabi_dmul+0x2b2>
 8001778:	0742      	lsls	r2, r0, #29
 800177a:	d009      	beq.n	8001790 <__aeabi_dmul+0x148>
 800177c:	220f      	movs	r2, #15
 800177e:	4002      	ands	r2, r0
 8001780:	2a04      	cmp	r2, #4
 8001782:	d005      	beq.n	8001790 <__aeabi_dmul+0x148>
 8001784:	1d02      	adds	r2, r0, #4
 8001786:	4282      	cmp	r2, r0
 8001788:	4180      	sbcs	r0, r0
 800178a:	4240      	negs	r0, r0
 800178c:	1824      	adds	r4, r4, r0
 800178e:	0010      	movs	r0, r2
 8001790:	01e2      	lsls	r2, r4, #7
 8001792:	d506      	bpl.n	80017a2 <__aeabi_dmul+0x15a>
 8001794:	4b74      	ldr	r3, [pc, #464]	@ (8001968 <__aeabi_dmul+0x320>)
 8001796:	9a01      	ldr	r2, [sp, #4]
 8001798:	401c      	ands	r4, r3
 800179a:	2380      	movs	r3, #128	@ 0x80
 800179c:	4694      	mov	ip, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	4463      	add	r3, ip
 80017a2:	4a72      	ldr	r2, [pc, #456]	@ (800196c <__aeabi_dmul+0x324>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	dc6b      	bgt.n	8001880 <__aeabi_dmul+0x238>
 80017a8:	0762      	lsls	r2, r4, #29
 80017aa:	08c0      	lsrs	r0, r0, #3
 80017ac:	0264      	lsls	r4, r4, #9
 80017ae:	055b      	lsls	r3, r3, #21
 80017b0:	4302      	orrs	r2, r0
 80017b2:	0b24      	lsrs	r4, r4, #12
 80017b4:	0d5b      	lsrs	r3, r3, #21
 80017b6:	e79d      	b.n	80016f4 <__aeabi_dmul+0xac>
 80017b8:	2190      	movs	r1, #144	@ 0x90
 80017ba:	0089      	lsls	r1, r1, #2
 80017bc:	420f      	tst	r7, r1
 80017be:	d163      	bne.n	8001888 <__aeabi_dmul+0x240>
 80017c0:	2288      	movs	r2, #136	@ 0x88
 80017c2:	423a      	tst	r2, r7
 80017c4:	d100      	bne.n	80017c8 <__aeabi_dmul+0x180>
 80017c6:	e0d7      	b.n	8001978 <__aeabi_dmul+0x330>
 80017c8:	9b00      	ldr	r3, [sp, #0]
 80017ca:	46a2      	mov	sl, r4
 80017cc:	469b      	mov	fp, r3
 80017ce:	4681      	mov	r9, r0
 80017d0:	9602      	str	r6, [sp, #8]
 80017d2:	e7bf      	b.n	8001754 <__aeabi_dmul+0x10c>
 80017d4:	0023      	movs	r3, r4
 80017d6:	4333      	orrs	r3, r6
 80017d8:	d100      	bne.n	80017dc <__aeabi_dmul+0x194>
 80017da:	e07f      	b.n	80018dc <__aeabi_dmul+0x294>
 80017dc:	2c00      	cmp	r4, #0
 80017de:	d100      	bne.n	80017e2 <__aeabi_dmul+0x19a>
 80017e0:	e1ad      	b.n	8001b3e <__aeabi_dmul+0x4f6>
 80017e2:	0020      	movs	r0, r4
 80017e4:	f7fe fe60 	bl	80004a8 <__clzsi2>
 80017e8:	0002      	movs	r2, r0
 80017ea:	0003      	movs	r3, r0
 80017ec:	3a0b      	subs	r2, #11
 80017ee:	201d      	movs	r0, #29
 80017f0:	0019      	movs	r1, r3
 80017f2:	1a82      	subs	r2, r0, r2
 80017f4:	0030      	movs	r0, r6
 80017f6:	3908      	subs	r1, #8
 80017f8:	40d0      	lsrs	r0, r2
 80017fa:	408c      	lsls	r4, r1
 80017fc:	4304      	orrs	r4, r0
 80017fe:	0030      	movs	r0, r6
 8001800:	4088      	lsls	r0, r1
 8001802:	4a5b      	ldr	r2, [pc, #364]	@ (8001970 <__aeabi_dmul+0x328>)
 8001804:	1aeb      	subs	r3, r5, r3
 8001806:	4694      	mov	ip, r2
 8001808:	4463      	add	r3, ip
 800180a:	1c5a      	adds	r2, r3, #1
 800180c:	9201      	str	r2, [sp, #4]
 800180e:	4642      	mov	r2, r8
 8001810:	2600      	movs	r6, #0
 8001812:	2a0a      	cmp	r2, #10
 8001814:	dc00      	bgt.n	8001818 <__aeabi_dmul+0x1d0>
 8001816:	e75a      	b.n	80016ce <__aeabi_dmul+0x86>
 8001818:	e79c      	b.n	8001754 <__aeabi_dmul+0x10c>
 800181a:	4653      	mov	r3, sl
 800181c:	4303      	orrs	r3, r0
 800181e:	4699      	mov	r9, r3
 8001820:	d054      	beq.n	80018cc <__aeabi_dmul+0x284>
 8001822:	4653      	mov	r3, sl
 8001824:	2b00      	cmp	r3, #0
 8001826:	d100      	bne.n	800182a <__aeabi_dmul+0x1e2>
 8001828:	e177      	b.n	8001b1a <__aeabi_dmul+0x4d2>
 800182a:	4650      	mov	r0, sl
 800182c:	f7fe fe3c 	bl	80004a8 <__clzsi2>
 8001830:	230b      	movs	r3, #11
 8001832:	425b      	negs	r3, r3
 8001834:	469c      	mov	ip, r3
 8001836:	0002      	movs	r2, r0
 8001838:	4484      	add	ip, r0
 800183a:	0011      	movs	r1, r2
 800183c:	4650      	mov	r0, sl
 800183e:	3908      	subs	r1, #8
 8001840:	4088      	lsls	r0, r1
 8001842:	231d      	movs	r3, #29
 8001844:	4680      	mov	r8, r0
 8001846:	4660      	mov	r0, ip
 8001848:	1a1b      	subs	r3, r3, r0
 800184a:	0020      	movs	r0, r4
 800184c:	40d8      	lsrs	r0, r3
 800184e:	0003      	movs	r3, r0
 8001850:	4640      	mov	r0, r8
 8001852:	4303      	orrs	r3, r0
 8001854:	469a      	mov	sl, r3
 8001856:	0023      	movs	r3, r4
 8001858:	408b      	lsls	r3, r1
 800185a:	4699      	mov	r9, r3
 800185c:	2300      	movs	r3, #0
 800185e:	4d44      	ldr	r5, [pc, #272]	@ (8001970 <__aeabi_dmul+0x328>)
 8001860:	4698      	mov	r8, r3
 8001862:	1aad      	subs	r5, r5, r2
 8001864:	9302      	str	r3, [sp, #8]
 8001866:	e715      	b.n	8001694 <__aeabi_dmul+0x4c>
 8001868:	4652      	mov	r2, sl
 800186a:	4302      	orrs	r2, r0
 800186c:	4691      	mov	r9, r2
 800186e:	d126      	bne.n	80018be <__aeabi_dmul+0x276>
 8001870:	2200      	movs	r2, #0
 8001872:	001d      	movs	r5, r3
 8001874:	2302      	movs	r3, #2
 8001876:	4692      	mov	sl, r2
 8001878:	3208      	adds	r2, #8
 800187a:	4690      	mov	r8, r2
 800187c:	9302      	str	r3, [sp, #8]
 800187e:	e709      	b.n	8001694 <__aeabi_dmul+0x4c>
 8001880:	2400      	movs	r4, #0
 8001882:	2200      	movs	r2, #0
 8001884:	4b35      	ldr	r3, [pc, #212]	@ (800195c <__aeabi_dmul+0x314>)
 8001886:	e735      	b.n	80016f4 <__aeabi_dmul+0xac>
 8001888:	2300      	movs	r3, #0
 800188a:	2480      	movs	r4, #128	@ 0x80
 800188c:	469b      	mov	fp, r3
 800188e:	0324      	lsls	r4, r4, #12
 8001890:	4b32      	ldr	r3, [pc, #200]	@ (800195c <__aeabi_dmul+0x314>)
 8001892:	e72f      	b.n	80016f4 <__aeabi_dmul+0xac>
 8001894:	2202      	movs	r2, #2
 8001896:	4641      	mov	r1, r8
 8001898:	4311      	orrs	r1, r2
 800189a:	2280      	movs	r2, #128	@ 0x80
 800189c:	0112      	lsls	r2, r2, #4
 800189e:	4694      	mov	ip, r2
 80018a0:	002a      	movs	r2, r5
 80018a2:	4462      	add	r2, ip
 80018a4:	4688      	mov	r8, r1
 80018a6:	9201      	str	r2, [sp, #4]
 80018a8:	290a      	cmp	r1, #10
 80018aa:	dd00      	ble.n	80018ae <__aeabi_dmul+0x266>
 80018ac:	e752      	b.n	8001754 <__aeabi_dmul+0x10c>
 80018ae:	465a      	mov	r2, fp
 80018b0:	2000      	movs	r0, #0
 80018b2:	9900      	ldr	r1, [sp, #0]
 80018b4:	0004      	movs	r4, r0
 80018b6:	404a      	eors	r2, r1
 80018b8:	4693      	mov	fp, r2
 80018ba:	2602      	movs	r6, #2
 80018bc:	e70b      	b.n	80016d6 <__aeabi_dmul+0x8e>
 80018be:	220c      	movs	r2, #12
 80018c0:	001d      	movs	r5, r3
 80018c2:	2303      	movs	r3, #3
 80018c4:	4681      	mov	r9, r0
 80018c6:	4690      	mov	r8, r2
 80018c8:	9302      	str	r3, [sp, #8]
 80018ca:	e6e3      	b.n	8001694 <__aeabi_dmul+0x4c>
 80018cc:	2300      	movs	r3, #0
 80018ce:	469a      	mov	sl, r3
 80018d0:	3304      	adds	r3, #4
 80018d2:	4698      	mov	r8, r3
 80018d4:	3b03      	subs	r3, #3
 80018d6:	2500      	movs	r5, #0
 80018d8:	9302      	str	r3, [sp, #8]
 80018da:	e6db      	b.n	8001694 <__aeabi_dmul+0x4c>
 80018dc:	4642      	mov	r2, r8
 80018de:	3301      	adds	r3, #1
 80018e0:	431a      	orrs	r2, r3
 80018e2:	002b      	movs	r3, r5
 80018e4:	4690      	mov	r8, r2
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	9201      	str	r2, [sp, #4]
 80018ea:	4642      	mov	r2, r8
 80018ec:	2400      	movs	r4, #0
 80018ee:	2000      	movs	r0, #0
 80018f0:	2601      	movs	r6, #1
 80018f2:	2a0a      	cmp	r2, #10
 80018f4:	dc00      	bgt.n	80018f8 <__aeabi_dmul+0x2b0>
 80018f6:	e6ea      	b.n	80016ce <__aeabi_dmul+0x86>
 80018f8:	e72c      	b.n	8001754 <__aeabi_dmul+0x10c>
 80018fa:	2201      	movs	r2, #1
 80018fc:	1ad2      	subs	r2, r2, r3
 80018fe:	2a38      	cmp	r2, #56	@ 0x38
 8001900:	dd00      	ble.n	8001904 <__aeabi_dmul+0x2bc>
 8001902:	e6f4      	b.n	80016ee <__aeabi_dmul+0xa6>
 8001904:	2a1f      	cmp	r2, #31
 8001906:	dc00      	bgt.n	800190a <__aeabi_dmul+0x2c2>
 8001908:	e12a      	b.n	8001b60 <__aeabi_dmul+0x518>
 800190a:	211f      	movs	r1, #31
 800190c:	4249      	negs	r1, r1
 800190e:	1acb      	subs	r3, r1, r3
 8001910:	0021      	movs	r1, r4
 8001912:	40d9      	lsrs	r1, r3
 8001914:	000b      	movs	r3, r1
 8001916:	2a20      	cmp	r2, #32
 8001918:	d005      	beq.n	8001926 <__aeabi_dmul+0x2de>
 800191a:	4a16      	ldr	r2, [pc, #88]	@ (8001974 <__aeabi_dmul+0x32c>)
 800191c:	9d01      	ldr	r5, [sp, #4]
 800191e:	4694      	mov	ip, r2
 8001920:	4465      	add	r5, ip
 8001922:	40ac      	lsls	r4, r5
 8001924:	4320      	orrs	r0, r4
 8001926:	1e42      	subs	r2, r0, #1
 8001928:	4190      	sbcs	r0, r2
 800192a:	4318      	orrs	r0, r3
 800192c:	2307      	movs	r3, #7
 800192e:	0019      	movs	r1, r3
 8001930:	2400      	movs	r4, #0
 8001932:	4001      	ands	r1, r0
 8001934:	4203      	tst	r3, r0
 8001936:	d00c      	beq.n	8001952 <__aeabi_dmul+0x30a>
 8001938:	230f      	movs	r3, #15
 800193a:	4003      	ands	r3, r0
 800193c:	2b04      	cmp	r3, #4
 800193e:	d100      	bne.n	8001942 <__aeabi_dmul+0x2fa>
 8001940:	e140      	b.n	8001bc4 <__aeabi_dmul+0x57c>
 8001942:	1d03      	adds	r3, r0, #4
 8001944:	4283      	cmp	r3, r0
 8001946:	41a4      	sbcs	r4, r4
 8001948:	0018      	movs	r0, r3
 800194a:	4264      	negs	r4, r4
 800194c:	0761      	lsls	r1, r4, #29
 800194e:	0264      	lsls	r4, r4, #9
 8001950:	0b24      	lsrs	r4, r4, #12
 8001952:	08c2      	lsrs	r2, r0, #3
 8001954:	2300      	movs	r3, #0
 8001956:	430a      	orrs	r2, r1
 8001958:	e6cc      	b.n	80016f4 <__aeabi_dmul+0xac>
 800195a:	46c0      	nop			@ (mov r8, r8)
 800195c:	000007ff 	.word	0x000007ff
 8001960:	fffffc01 	.word	0xfffffc01
 8001964:	000003ff 	.word	0x000003ff
 8001968:	feffffff 	.word	0xfeffffff
 800196c:	000007fe 	.word	0x000007fe
 8001970:	fffffc0d 	.word	0xfffffc0d
 8001974:	0000043e 	.word	0x0000043e
 8001978:	4649      	mov	r1, r9
 800197a:	464a      	mov	r2, r9
 800197c:	0409      	lsls	r1, r1, #16
 800197e:	0c09      	lsrs	r1, r1, #16
 8001980:	000d      	movs	r5, r1
 8001982:	0c16      	lsrs	r6, r2, #16
 8001984:	0c02      	lsrs	r2, r0, #16
 8001986:	0400      	lsls	r0, r0, #16
 8001988:	0c00      	lsrs	r0, r0, #16
 800198a:	4345      	muls	r5, r0
 800198c:	46ac      	mov	ip, r5
 800198e:	0005      	movs	r5, r0
 8001990:	4375      	muls	r5, r6
 8001992:	46a8      	mov	r8, r5
 8001994:	0015      	movs	r5, r2
 8001996:	000f      	movs	r7, r1
 8001998:	4375      	muls	r5, r6
 800199a:	9200      	str	r2, [sp, #0]
 800199c:	9502      	str	r5, [sp, #8]
 800199e:	002a      	movs	r2, r5
 80019a0:	9d00      	ldr	r5, [sp, #0]
 80019a2:	436f      	muls	r7, r5
 80019a4:	4665      	mov	r5, ip
 80019a6:	0c2d      	lsrs	r5, r5, #16
 80019a8:	46a9      	mov	r9, r5
 80019aa:	4447      	add	r7, r8
 80019ac:	444f      	add	r7, r9
 80019ae:	45b8      	cmp	r8, r7
 80019b0:	d905      	bls.n	80019be <__aeabi_dmul+0x376>
 80019b2:	0015      	movs	r5, r2
 80019b4:	2280      	movs	r2, #128	@ 0x80
 80019b6:	0252      	lsls	r2, r2, #9
 80019b8:	4690      	mov	r8, r2
 80019ba:	4445      	add	r5, r8
 80019bc:	9502      	str	r5, [sp, #8]
 80019be:	0c3d      	lsrs	r5, r7, #16
 80019c0:	9503      	str	r5, [sp, #12]
 80019c2:	4665      	mov	r5, ip
 80019c4:	042d      	lsls	r5, r5, #16
 80019c6:	043f      	lsls	r7, r7, #16
 80019c8:	0c2d      	lsrs	r5, r5, #16
 80019ca:	46ac      	mov	ip, r5
 80019cc:	003d      	movs	r5, r7
 80019ce:	4465      	add	r5, ip
 80019d0:	9504      	str	r5, [sp, #16]
 80019d2:	0c25      	lsrs	r5, r4, #16
 80019d4:	0424      	lsls	r4, r4, #16
 80019d6:	0c24      	lsrs	r4, r4, #16
 80019d8:	46ac      	mov	ip, r5
 80019da:	0025      	movs	r5, r4
 80019dc:	4375      	muls	r5, r6
 80019de:	46a8      	mov	r8, r5
 80019e0:	4665      	mov	r5, ip
 80019e2:	000f      	movs	r7, r1
 80019e4:	4369      	muls	r1, r5
 80019e6:	4441      	add	r1, r8
 80019e8:	4689      	mov	r9, r1
 80019ea:	4367      	muls	r7, r4
 80019ec:	0c39      	lsrs	r1, r7, #16
 80019ee:	4449      	add	r1, r9
 80019f0:	436e      	muls	r6, r5
 80019f2:	4588      	cmp	r8, r1
 80019f4:	d903      	bls.n	80019fe <__aeabi_dmul+0x3b6>
 80019f6:	2280      	movs	r2, #128	@ 0x80
 80019f8:	0252      	lsls	r2, r2, #9
 80019fa:	4690      	mov	r8, r2
 80019fc:	4446      	add	r6, r8
 80019fe:	0c0d      	lsrs	r5, r1, #16
 8001a00:	46a8      	mov	r8, r5
 8001a02:	0035      	movs	r5, r6
 8001a04:	4445      	add	r5, r8
 8001a06:	9505      	str	r5, [sp, #20]
 8001a08:	9d03      	ldr	r5, [sp, #12]
 8001a0a:	043f      	lsls	r7, r7, #16
 8001a0c:	46a8      	mov	r8, r5
 8001a0e:	0c3f      	lsrs	r7, r7, #16
 8001a10:	0409      	lsls	r1, r1, #16
 8001a12:	19c9      	adds	r1, r1, r7
 8001a14:	4488      	add	r8, r1
 8001a16:	4645      	mov	r5, r8
 8001a18:	9503      	str	r5, [sp, #12]
 8001a1a:	4655      	mov	r5, sl
 8001a1c:	042e      	lsls	r6, r5, #16
 8001a1e:	0c36      	lsrs	r6, r6, #16
 8001a20:	0c2f      	lsrs	r7, r5, #16
 8001a22:	0035      	movs	r5, r6
 8001a24:	4345      	muls	r5, r0
 8001a26:	4378      	muls	r0, r7
 8001a28:	4681      	mov	r9, r0
 8001a2a:	0038      	movs	r0, r7
 8001a2c:	46a8      	mov	r8, r5
 8001a2e:	0c2d      	lsrs	r5, r5, #16
 8001a30:	46aa      	mov	sl, r5
 8001a32:	9a00      	ldr	r2, [sp, #0]
 8001a34:	4350      	muls	r0, r2
 8001a36:	4372      	muls	r2, r6
 8001a38:	444a      	add	r2, r9
 8001a3a:	4452      	add	r2, sl
 8001a3c:	4591      	cmp	r9, r2
 8001a3e:	d903      	bls.n	8001a48 <__aeabi_dmul+0x400>
 8001a40:	2580      	movs	r5, #128	@ 0x80
 8001a42:	026d      	lsls	r5, r5, #9
 8001a44:	46a9      	mov	r9, r5
 8001a46:	4448      	add	r0, r9
 8001a48:	0c15      	lsrs	r5, r2, #16
 8001a4a:	46a9      	mov	r9, r5
 8001a4c:	4645      	mov	r5, r8
 8001a4e:	042d      	lsls	r5, r5, #16
 8001a50:	0c2d      	lsrs	r5, r5, #16
 8001a52:	46a8      	mov	r8, r5
 8001a54:	4665      	mov	r5, ip
 8001a56:	437d      	muls	r5, r7
 8001a58:	0412      	lsls	r2, r2, #16
 8001a5a:	4448      	add	r0, r9
 8001a5c:	4490      	add	r8, r2
 8001a5e:	46a9      	mov	r9, r5
 8001a60:	0032      	movs	r2, r6
 8001a62:	4665      	mov	r5, ip
 8001a64:	4362      	muls	r2, r4
 8001a66:	436e      	muls	r6, r5
 8001a68:	437c      	muls	r4, r7
 8001a6a:	0c17      	lsrs	r7, r2, #16
 8001a6c:	1936      	adds	r6, r6, r4
 8001a6e:	19bf      	adds	r7, r7, r6
 8001a70:	42bc      	cmp	r4, r7
 8001a72:	d903      	bls.n	8001a7c <__aeabi_dmul+0x434>
 8001a74:	2480      	movs	r4, #128	@ 0x80
 8001a76:	0264      	lsls	r4, r4, #9
 8001a78:	46a4      	mov	ip, r4
 8001a7a:	44e1      	add	r9, ip
 8001a7c:	9c02      	ldr	r4, [sp, #8]
 8001a7e:	9e03      	ldr	r6, [sp, #12]
 8001a80:	46a4      	mov	ip, r4
 8001a82:	9d05      	ldr	r5, [sp, #20]
 8001a84:	4466      	add	r6, ip
 8001a86:	428e      	cmp	r6, r1
 8001a88:	4189      	sbcs	r1, r1
 8001a8a:	46ac      	mov	ip, r5
 8001a8c:	0412      	lsls	r2, r2, #16
 8001a8e:	043c      	lsls	r4, r7, #16
 8001a90:	0c12      	lsrs	r2, r2, #16
 8001a92:	18a2      	adds	r2, r4, r2
 8001a94:	4462      	add	r2, ip
 8001a96:	4249      	negs	r1, r1
 8001a98:	1854      	adds	r4, r2, r1
 8001a9a:	4446      	add	r6, r8
 8001a9c:	46a4      	mov	ip, r4
 8001a9e:	4546      	cmp	r6, r8
 8001aa0:	41a4      	sbcs	r4, r4
 8001aa2:	4682      	mov	sl, r0
 8001aa4:	4264      	negs	r4, r4
 8001aa6:	46a0      	mov	r8, r4
 8001aa8:	42aa      	cmp	r2, r5
 8001aaa:	4192      	sbcs	r2, r2
 8001aac:	458c      	cmp	ip, r1
 8001aae:	4189      	sbcs	r1, r1
 8001ab0:	44e2      	add	sl, ip
 8001ab2:	44d0      	add	r8, sl
 8001ab4:	4249      	negs	r1, r1
 8001ab6:	4252      	negs	r2, r2
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	45a0      	cmp	r8, r4
 8001abc:	41a4      	sbcs	r4, r4
 8001abe:	4582      	cmp	sl, r0
 8001ac0:	4189      	sbcs	r1, r1
 8001ac2:	4264      	negs	r4, r4
 8001ac4:	4249      	negs	r1, r1
 8001ac6:	430c      	orrs	r4, r1
 8001ac8:	4641      	mov	r1, r8
 8001aca:	0c3f      	lsrs	r7, r7, #16
 8001acc:	19d2      	adds	r2, r2, r7
 8001ace:	1912      	adds	r2, r2, r4
 8001ad0:	0dcc      	lsrs	r4, r1, #23
 8001ad2:	9904      	ldr	r1, [sp, #16]
 8001ad4:	0270      	lsls	r0, r6, #9
 8001ad6:	4308      	orrs	r0, r1
 8001ad8:	1e41      	subs	r1, r0, #1
 8001ada:	4188      	sbcs	r0, r1
 8001adc:	4641      	mov	r1, r8
 8001ade:	444a      	add	r2, r9
 8001ae0:	0df6      	lsrs	r6, r6, #23
 8001ae2:	0252      	lsls	r2, r2, #9
 8001ae4:	4330      	orrs	r0, r6
 8001ae6:	0249      	lsls	r1, r1, #9
 8001ae8:	4314      	orrs	r4, r2
 8001aea:	4308      	orrs	r0, r1
 8001aec:	01d2      	lsls	r2, r2, #7
 8001aee:	d535      	bpl.n	8001b5c <__aeabi_dmul+0x514>
 8001af0:	2201      	movs	r2, #1
 8001af2:	0843      	lsrs	r3, r0, #1
 8001af4:	4002      	ands	r2, r0
 8001af6:	4313      	orrs	r3, r2
 8001af8:	07e0      	lsls	r0, r4, #31
 8001afa:	4318      	orrs	r0, r3
 8001afc:	0864      	lsrs	r4, r4, #1
 8001afe:	e634      	b.n	800176a <__aeabi_dmul+0x122>
 8001b00:	9b00      	ldr	r3, [sp, #0]
 8001b02:	46a2      	mov	sl, r4
 8001b04:	469b      	mov	fp, r3
 8001b06:	4681      	mov	r9, r0
 8001b08:	2480      	movs	r4, #128	@ 0x80
 8001b0a:	4653      	mov	r3, sl
 8001b0c:	0324      	lsls	r4, r4, #12
 8001b0e:	431c      	orrs	r4, r3
 8001b10:	0324      	lsls	r4, r4, #12
 8001b12:	464a      	mov	r2, r9
 8001b14:	4b2e      	ldr	r3, [pc, #184]	@ (8001bd0 <__aeabi_dmul+0x588>)
 8001b16:	0b24      	lsrs	r4, r4, #12
 8001b18:	e5ec      	b.n	80016f4 <__aeabi_dmul+0xac>
 8001b1a:	f7fe fcc5 	bl	80004a8 <__clzsi2>
 8001b1e:	2315      	movs	r3, #21
 8001b20:	469c      	mov	ip, r3
 8001b22:	4484      	add	ip, r0
 8001b24:	0002      	movs	r2, r0
 8001b26:	4663      	mov	r3, ip
 8001b28:	3220      	adds	r2, #32
 8001b2a:	2b1c      	cmp	r3, #28
 8001b2c:	dc00      	bgt.n	8001b30 <__aeabi_dmul+0x4e8>
 8001b2e:	e684      	b.n	800183a <__aeabi_dmul+0x1f2>
 8001b30:	2300      	movs	r3, #0
 8001b32:	4699      	mov	r9, r3
 8001b34:	0023      	movs	r3, r4
 8001b36:	3808      	subs	r0, #8
 8001b38:	4083      	lsls	r3, r0
 8001b3a:	469a      	mov	sl, r3
 8001b3c:	e68e      	b.n	800185c <__aeabi_dmul+0x214>
 8001b3e:	f7fe fcb3 	bl	80004a8 <__clzsi2>
 8001b42:	0002      	movs	r2, r0
 8001b44:	0003      	movs	r3, r0
 8001b46:	3215      	adds	r2, #21
 8001b48:	3320      	adds	r3, #32
 8001b4a:	2a1c      	cmp	r2, #28
 8001b4c:	dc00      	bgt.n	8001b50 <__aeabi_dmul+0x508>
 8001b4e:	e64e      	b.n	80017ee <__aeabi_dmul+0x1a6>
 8001b50:	0002      	movs	r2, r0
 8001b52:	0034      	movs	r4, r6
 8001b54:	3a08      	subs	r2, #8
 8001b56:	2000      	movs	r0, #0
 8001b58:	4094      	lsls	r4, r2
 8001b5a:	e652      	b.n	8001802 <__aeabi_dmul+0x1ba>
 8001b5c:	9301      	str	r3, [sp, #4]
 8001b5e:	e604      	b.n	800176a <__aeabi_dmul+0x122>
 8001b60:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd4 <__aeabi_dmul+0x58c>)
 8001b62:	0021      	movs	r1, r4
 8001b64:	469c      	mov	ip, r3
 8001b66:	0003      	movs	r3, r0
 8001b68:	9d01      	ldr	r5, [sp, #4]
 8001b6a:	40d3      	lsrs	r3, r2
 8001b6c:	4465      	add	r5, ip
 8001b6e:	40a9      	lsls	r1, r5
 8001b70:	4319      	orrs	r1, r3
 8001b72:	0003      	movs	r3, r0
 8001b74:	40ab      	lsls	r3, r5
 8001b76:	1e58      	subs	r0, r3, #1
 8001b78:	4183      	sbcs	r3, r0
 8001b7a:	4319      	orrs	r1, r3
 8001b7c:	0008      	movs	r0, r1
 8001b7e:	40d4      	lsrs	r4, r2
 8001b80:	074b      	lsls	r3, r1, #29
 8001b82:	d009      	beq.n	8001b98 <__aeabi_dmul+0x550>
 8001b84:	230f      	movs	r3, #15
 8001b86:	400b      	ands	r3, r1
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d005      	beq.n	8001b98 <__aeabi_dmul+0x550>
 8001b8c:	1d0b      	adds	r3, r1, #4
 8001b8e:	428b      	cmp	r3, r1
 8001b90:	4180      	sbcs	r0, r0
 8001b92:	4240      	negs	r0, r0
 8001b94:	1824      	adds	r4, r4, r0
 8001b96:	0018      	movs	r0, r3
 8001b98:	0223      	lsls	r3, r4, #8
 8001b9a:	d400      	bmi.n	8001b9e <__aeabi_dmul+0x556>
 8001b9c:	e6d6      	b.n	800194c <__aeabi_dmul+0x304>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	2400      	movs	r4, #0
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	e5a6      	b.n	80016f4 <__aeabi_dmul+0xac>
 8001ba6:	290f      	cmp	r1, #15
 8001ba8:	d1aa      	bne.n	8001b00 <__aeabi_dmul+0x4b8>
 8001baa:	2380      	movs	r3, #128	@ 0x80
 8001bac:	4652      	mov	r2, sl
 8001bae:	031b      	lsls	r3, r3, #12
 8001bb0:	421a      	tst	r2, r3
 8001bb2:	d0a9      	beq.n	8001b08 <__aeabi_dmul+0x4c0>
 8001bb4:	421c      	tst	r4, r3
 8001bb6:	d1a7      	bne.n	8001b08 <__aeabi_dmul+0x4c0>
 8001bb8:	431c      	orrs	r4, r3
 8001bba:	9b00      	ldr	r3, [sp, #0]
 8001bbc:	0002      	movs	r2, r0
 8001bbe:	469b      	mov	fp, r3
 8001bc0:	4b03      	ldr	r3, [pc, #12]	@ (8001bd0 <__aeabi_dmul+0x588>)
 8001bc2:	e597      	b.n	80016f4 <__aeabi_dmul+0xac>
 8001bc4:	2400      	movs	r4, #0
 8001bc6:	e6c1      	b.n	800194c <__aeabi_dmul+0x304>
 8001bc8:	2400      	movs	r4, #0
 8001bca:	4b01      	ldr	r3, [pc, #4]	@ (8001bd0 <__aeabi_dmul+0x588>)
 8001bcc:	0022      	movs	r2, r4
 8001bce:	e591      	b.n	80016f4 <__aeabi_dmul+0xac>
 8001bd0:	000007ff 	.word	0x000007ff
 8001bd4:	0000041e 	.word	0x0000041e

08001bd8 <__aeabi_dsub>:
 8001bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bda:	464e      	mov	r6, r9
 8001bdc:	4645      	mov	r5, r8
 8001bde:	46de      	mov	lr, fp
 8001be0:	4657      	mov	r7, sl
 8001be2:	b5e0      	push	{r5, r6, r7, lr}
 8001be4:	b085      	sub	sp, #20
 8001be6:	9000      	str	r0, [sp, #0]
 8001be8:	9101      	str	r1, [sp, #4]
 8001bea:	030c      	lsls	r4, r1, #12
 8001bec:	004f      	lsls	r7, r1, #1
 8001bee:	0fce      	lsrs	r6, r1, #31
 8001bf0:	0a61      	lsrs	r1, r4, #9
 8001bf2:	9c00      	ldr	r4, [sp, #0]
 8001bf4:	46b0      	mov	r8, r6
 8001bf6:	0f64      	lsrs	r4, r4, #29
 8001bf8:	430c      	orrs	r4, r1
 8001bfa:	9900      	ldr	r1, [sp, #0]
 8001bfc:	0d7f      	lsrs	r7, r7, #21
 8001bfe:	00c8      	lsls	r0, r1, #3
 8001c00:	0011      	movs	r1, r2
 8001c02:	001a      	movs	r2, r3
 8001c04:	031b      	lsls	r3, r3, #12
 8001c06:	469c      	mov	ip, r3
 8001c08:	9100      	str	r1, [sp, #0]
 8001c0a:	9201      	str	r2, [sp, #4]
 8001c0c:	0051      	lsls	r1, r2, #1
 8001c0e:	0d4b      	lsrs	r3, r1, #21
 8001c10:	4699      	mov	r9, r3
 8001c12:	9b01      	ldr	r3, [sp, #4]
 8001c14:	9d00      	ldr	r5, [sp, #0]
 8001c16:	0fd9      	lsrs	r1, r3, #31
 8001c18:	4663      	mov	r3, ip
 8001c1a:	0f6a      	lsrs	r2, r5, #29
 8001c1c:	0a5b      	lsrs	r3, r3, #9
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	00ea      	lsls	r2, r5, #3
 8001c22:	4694      	mov	ip, r2
 8001c24:	4693      	mov	fp, r2
 8001c26:	4ac1      	ldr	r2, [pc, #772]	@ (8001f2c <__aeabi_dsub+0x354>)
 8001c28:	9003      	str	r0, [sp, #12]
 8001c2a:	9302      	str	r3, [sp, #8]
 8001c2c:	4591      	cmp	r9, r2
 8001c2e:	d100      	bne.n	8001c32 <__aeabi_dsub+0x5a>
 8001c30:	e0cd      	b.n	8001dce <__aeabi_dsub+0x1f6>
 8001c32:	2501      	movs	r5, #1
 8001c34:	4069      	eors	r1, r5
 8001c36:	464d      	mov	r5, r9
 8001c38:	1b7d      	subs	r5, r7, r5
 8001c3a:	46aa      	mov	sl, r5
 8001c3c:	428e      	cmp	r6, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x6a>
 8001c40:	e080      	b.n	8001d44 <__aeabi_dsub+0x16c>
 8001c42:	2d00      	cmp	r5, #0
 8001c44:	dc00      	bgt.n	8001c48 <__aeabi_dsub+0x70>
 8001c46:	e335      	b.n	80022b4 <__aeabi_dsub+0x6dc>
 8001c48:	4649      	mov	r1, r9
 8001c4a:	2900      	cmp	r1, #0
 8001c4c:	d100      	bne.n	8001c50 <__aeabi_dsub+0x78>
 8001c4e:	e0df      	b.n	8001e10 <__aeabi_dsub+0x238>
 8001c50:	4297      	cmp	r7, r2
 8001c52:	d100      	bne.n	8001c56 <__aeabi_dsub+0x7e>
 8001c54:	e194      	b.n	8001f80 <__aeabi_dsub+0x3a8>
 8001c56:	4652      	mov	r2, sl
 8001c58:	2501      	movs	r5, #1
 8001c5a:	2a38      	cmp	r2, #56	@ 0x38
 8001c5c:	dc19      	bgt.n	8001c92 <__aeabi_dsub+0xba>
 8001c5e:	2280      	movs	r2, #128	@ 0x80
 8001c60:	9b02      	ldr	r3, [sp, #8]
 8001c62:	0412      	lsls	r2, r2, #16
 8001c64:	4313      	orrs	r3, r2
 8001c66:	9302      	str	r3, [sp, #8]
 8001c68:	4652      	mov	r2, sl
 8001c6a:	2a1f      	cmp	r2, #31
 8001c6c:	dd00      	ble.n	8001c70 <__aeabi_dsub+0x98>
 8001c6e:	e1e3      	b.n	8002038 <__aeabi_dsub+0x460>
 8001c70:	4653      	mov	r3, sl
 8001c72:	2220      	movs	r2, #32
 8001c74:	4661      	mov	r1, ip
 8001c76:	9d02      	ldr	r5, [sp, #8]
 8001c78:	1ad2      	subs	r2, r2, r3
 8001c7a:	4095      	lsls	r5, r2
 8001c7c:	40d9      	lsrs	r1, r3
 8001c7e:	430d      	orrs	r5, r1
 8001c80:	4661      	mov	r1, ip
 8001c82:	4091      	lsls	r1, r2
 8001c84:	000a      	movs	r2, r1
 8001c86:	1e51      	subs	r1, r2, #1
 8001c88:	418a      	sbcs	r2, r1
 8001c8a:	4315      	orrs	r5, r2
 8001c8c:	9a02      	ldr	r2, [sp, #8]
 8001c8e:	40da      	lsrs	r2, r3
 8001c90:	1aa4      	subs	r4, r4, r2
 8001c92:	1b45      	subs	r5, r0, r5
 8001c94:	42a8      	cmp	r0, r5
 8001c96:	4180      	sbcs	r0, r0
 8001c98:	4240      	negs	r0, r0
 8001c9a:	1a24      	subs	r4, r4, r0
 8001c9c:	0223      	lsls	r3, r4, #8
 8001c9e:	d400      	bmi.n	8001ca2 <__aeabi_dsub+0xca>
 8001ca0:	e13d      	b.n	8001f1e <__aeabi_dsub+0x346>
 8001ca2:	0264      	lsls	r4, r4, #9
 8001ca4:	0a64      	lsrs	r4, r4, #9
 8001ca6:	2c00      	cmp	r4, #0
 8001ca8:	d100      	bne.n	8001cac <__aeabi_dsub+0xd4>
 8001caa:	e147      	b.n	8001f3c <__aeabi_dsub+0x364>
 8001cac:	0020      	movs	r0, r4
 8001cae:	f7fe fbfb 	bl	80004a8 <__clzsi2>
 8001cb2:	0003      	movs	r3, r0
 8001cb4:	3b08      	subs	r3, #8
 8001cb6:	2120      	movs	r1, #32
 8001cb8:	0028      	movs	r0, r5
 8001cba:	1aca      	subs	r2, r1, r3
 8001cbc:	40d0      	lsrs	r0, r2
 8001cbe:	409c      	lsls	r4, r3
 8001cc0:	0002      	movs	r2, r0
 8001cc2:	409d      	lsls	r5, r3
 8001cc4:	4322      	orrs	r2, r4
 8001cc6:	429f      	cmp	r7, r3
 8001cc8:	dd00      	ble.n	8001ccc <__aeabi_dsub+0xf4>
 8001cca:	e177      	b.n	8001fbc <__aeabi_dsub+0x3e4>
 8001ccc:	1bd8      	subs	r0, r3, r7
 8001cce:	3001      	adds	r0, #1
 8001cd0:	1a09      	subs	r1, r1, r0
 8001cd2:	002c      	movs	r4, r5
 8001cd4:	408d      	lsls	r5, r1
 8001cd6:	40c4      	lsrs	r4, r0
 8001cd8:	1e6b      	subs	r3, r5, #1
 8001cda:	419d      	sbcs	r5, r3
 8001cdc:	0013      	movs	r3, r2
 8001cde:	40c2      	lsrs	r2, r0
 8001ce0:	408b      	lsls	r3, r1
 8001ce2:	4325      	orrs	r5, r4
 8001ce4:	2700      	movs	r7, #0
 8001ce6:	0014      	movs	r4, r2
 8001ce8:	431d      	orrs	r5, r3
 8001cea:	076b      	lsls	r3, r5, #29
 8001cec:	d009      	beq.n	8001d02 <__aeabi_dsub+0x12a>
 8001cee:	230f      	movs	r3, #15
 8001cf0:	402b      	ands	r3, r5
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d005      	beq.n	8001d02 <__aeabi_dsub+0x12a>
 8001cf6:	1d2b      	adds	r3, r5, #4
 8001cf8:	42ab      	cmp	r3, r5
 8001cfa:	41ad      	sbcs	r5, r5
 8001cfc:	426d      	negs	r5, r5
 8001cfe:	1964      	adds	r4, r4, r5
 8001d00:	001d      	movs	r5, r3
 8001d02:	0223      	lsls	r3, r4, #8
 8001d04:	d400      	bmi.n	8001d08 <__aeabi_dsub+0x130>
 8001d06:	e140      	b.n	8001f8a <__aeabi_dsub+0x3b2>
 8001d08:	4a88      	ldr	r2, [pc, #544]	@ (8001f2c <__aeabi_dsub+0x354>)
 8001d0a:	3701      	adds	r7, #1
 8001d0c:	4297      	cmp	r7, r2
 8001d0e:	d100      	bne.n	8001d12 <__aeabi_dsub+0x13a>
 8001d10:	e101      	b.n	8001f16 <__aeabi_dsub+0x33e>
 8001d12:	2601      	movs	r6, #1
 8001d14:	4643      	mov	r3, r8
 8001d16:	4986      	ldr	r1, [pc, #536]	@ (8001f30 <__aeabi_dsub+0x358>)
 8001d18:	08ed      	lsrs	r5, r5, #3
 8001d1a:	4021      	ands	r1, r4
 8001d1c:	074a      	lsls	r2, r1, #29
 8001d1e:	432a      	orrs	r2, r5
 8001d20:	057c      	lsls	r4, r7, #21
 8001d22:	024d      	lsls	r5, r1, #9
 8001d24:	0b2d      	lsrs	r5, r5, #12
 8001d26:	0d64      	lsrs	r4, r4, #21
 8001d28:	401e      	ands	r6, r3
 8001d2a:	0524      	lsls	r4, r4, #20
 8001d2c:	432c      	orrs	r4, r5
 8001d2e:	07f6      	lsls	r6, r6, #31
 8001d30:	4334      	orrs	r4, r6
 8001d32:	0010      	movs	r0, r2
 8001d34:	0021      	movs	r1, r4
 8001d36:	b005      	add	sp, #20
 8001d38:	bcf0      	pop	{r4, r5, r6, r7}
 8001d3a:	46bb      	mov	fp, r7
 8001d3c:	46b2      	mov	sl, r6
 8001d3e:	46a9      	mov	r9, r5
 8001d40:	46a0      	mov	r8, r4
 8001d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d44:	2d00      	cmp	r5, #0
 8001d46:	dc00      	bgt.n	8001d4a <__aeabi_dsub+0x172>
 8001d48:	e2d0      	b.n	80022ec <__aeabi_dsub+0x714>
 8001d4a:	4649      	mov	r1, r9
 8001d4c:	2900      	cmp	r1, #0
 8001d4e:	d000      	beq.n	8001d52 <__aeabi_dsub+0x17a>
 8001d50:	e0d4      	b.n	8001efc <__aeabi_dsub+0x324>
 8001d52:	4661      	mov	r1, ip
 8001d54:	9b02      	ldr	r3, [sp, #8]
 8001d56:	4319      	orrs	r1, r3
 8001d58:	d100      	bne.n	8001d5c <__aeabi_dsub+0x184>
 8001d5a:	e12b      	b.n	8001fb4 <__aeabi_dsub+0x3dc>
 8001d5c:	1e69      	subs	r1, r5, #1
 8001d5e:	2d01      	cmp	r5, #1
 8001d60:	d100      	bne.n	8001d64 <__aeabi_dsub+0x18c>
 8001d62:	e1d9      	b.n	8002118 <__aeabi_dsub+0x540>
 8001d64:	4295      	cmp	r5, r2
 8001d66:	d100      	bne.n	8001d6a <__aeabi_dsub+0x192>
 8001d68:	e10a      	b.n	8001f80 <__aeabi_dsub+0x3a8>
 8001d6a:	2501      	movs	r5, #1
 8001d6c:	2938      	cmp	r1, #56	@ 0x38
 8001d6e:	dc17      	bgt.n	8001da0 <__aeabi_dsub+0x1c8>
 8001d70:	468a      	mov	sl, r1
 8001d72:	4653      	mov	r3, sl
 8001d74:	2b1f      	cmp	r3, #31
 8001d76:	dd00      	ble.n	8001d7a <__aeabi_dsub+0x1a2>
 8001d78:	e1e7      	b.n	800214a <__aeabi_dsub+0x572>
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	1ad2      	subs	r2, r2, r3
 8001d7e:	9b02      	ldr	r3, [sp, #8]
 8001d80:	4661      	mov	r1, ip
 8001d82:	4093      	lsls	r3, r2
 8001d84:	001d      	movs	r5, r3
 8001d86:	4653      	mov	r3, sl
 8001d88:	40d9      	lsrs	r1, r3
 8001d8a:	4663      	mov	r3, ip
 8001d8c:	4093      	lsls	r3, r2
 8001d8e:	001a      	movs	r2, r3
 8001d90:	430d      	orrs	r5, r1
 8001d92:	1e51      	subs	r1, r2, #1
 8001d94:	418a      	sbcs	r2, r1
 8001d96:	4653      	mov	r3, sl
 8001d98:	4315      	orrs	r5, r2
 8001d9a:	9a02      	ldr	r2, [sp, #8]
 8001d9c:	40da      	lsrs	r2, r3
 8001d9e:	18a4      	adds	r4, r4, r2
 8001da0:	182d      	adds	r5, r5, r0
 8001da2:	4285      	cmp	r5, r0
 8001da4:	4180      	sbcs	r0, r0
 8001da6:	4240      	negs	r0, r0
 8001da8:	1824      	adds	r4, r4, r0
 8001daa:	0223      	lsls	r3, r4, #8
 8001dac:	d400      	bmi.n	8001db0 <__aeabi_dsub+0x1d8>
 8001dae:	e0b6      	b.n	8001f1e <__aeabi_dsub+0x346>
 8001db0:	4b5e      	ldr	r3, [pc, #376]	@ (8001f2c <__aeabi_dsub+0x354>)
 8001db2:	3701      	adds	r7, #1
 8001db4:	429f      	cmp	r7, r3
 8001db6:	d100      	bne.n	8001dba <__aeabi_dsub+0x1e2>
 8001db8:	e0ad      	b.n	8001f16 <__aeabi_dsub+0x33e>
 8001dba:	2101      	movs	r1, #1
 8001dbc:	4b5c      	ldr	r3, [pc, #368]	@ (8001f30 <__aeabi_dsub+0x358>)
 8001dbe:	086a      	lsrs	r2, r5, #1
 8001dc0:	401c      	ands	r4, r3
 8001dc2:	4029      	ands	r1, r5
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	07e5      	lsls	r5, r4, #31
 8001dc8:	4315      	orrs	r5, r2
 8001dca:	0864      	lsrs	r4, r4, #1
 8001dcc:	e78d      	b.n	8001cea <__aeabi_dsub+0x112>
 8001dce:	4a59      	ldr	r2, [pc, #356]	@ (8001f34 <__aeabi_dsub+0x35c>)
 8001dd0:	9b02      	ldr	r3, [sp, #8]
 8001dd2:	4692      	mov	sl, r2
 8001dd4:	4662      	mov	r2, ip
 8001dd6:	44ba      	add	sl, r7
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	d02c      	beq.n	8001e36 <__aeabi_dsub+0x25e>
 8001ddc:	428e      	cmp	r6, r1
 8001dde:	d02e      	beq.n	8001e3e <__aeabi_dsub+0x266>
 8001de0:	4652      	mov	r2, sl
 8001de2:	2a00      	cmp	r2, #0
 8001de4:	d060      	beq.n	8001ea8 <__aeabi_dsub+0x2d0>
 8001de6:	2f00      	cmp	r7, #0
 8001de8:	d100      	bne.n	8001dec <__aeabi_dsub+0x214>
 8001dea:	e0db      	b.n	8001fa4 <__aeabi_dsub+0x3cc>
 8001dec:	4663      	mov	r3, ip
 8001dee:	000e      	movs	r6, r1
 8001df0:	9c02      	ldr	r4, [sp, #8]
 8001df2:	08d8      	lsrs	r0, r3, #3
 8001df4:	0762      	lsls	r2, r4, #29
 8001df6:	4302      	orrs	r2, r0
 8001df8:	08e4      	lsrs	r4, r4, #3
 8001dfa:	0013      	movs	r3, r2
 8001dfc:	4323      	orrs	r3, r4
 8001dfe:	d100      	bne.n	8001e02 <__aeabi_dsub+0x22a>
 8001e00:	e254      	b.n	80022ac <__aeabi_dsub+0x6d4>
 8001e02:	2580      	movs	r5, #128	@ 0x80
 8001e04:	032d      	lsls	r5, r5, #12
 8001e06:	4325      	orrs	r5, r4
 8001e08:	032d      	lsls	r5, r5, #12
 8001e0a:	4c48      	ldr	r4, [pc, #288]	@ (8001f2c <__aeabi_dsub+0x354>)
 8001e0c:	0b2d      	lsrs	r5, r5, #12
 8001e0e:	e78c      	b.n	8001d2a <__aeabi_dsub+0x152>
 8001e10:	4661      	mov	r1, ip
 8001e12:	9b02      	ldr	r3, [sp, #8]
 8001e14:	4319      	orrs	r1, r3
 8001e16:	d100      	bne.n	8001e1a <__aeabi_dsub+0x242>
 8001e18:	e0cc      	b.n	8001fb4 <__aeabi_dsub+0x3dc>
 8001e1a:	0029      	movs	r1, r5
 8001e1c:	3901      	subs	r1, #1
 8001e1e:	2d01      	cmp	r5, #1
 8001e20:	d100      	bne.n	8001e24 <__aeabi_dsub+0x24c>
 8001e22:	e188      	b.n	8002136 <__aeabi_dsub+0x55e>
 8001e24:	4295      	cmp	r5, r2
 8001e26:	d100      	bne.n	8001e2a <__aeabi_dsub+0x252>
 8001e28:	e0aa      	b.n	8001f80 <__aeabi_dsub+0x3a8>
 8001e2a:	2501      	movs	r5, #1
 8001e2c:	2938      	cmp	r1, #56	@ 0x38
 8001e2e:	dd00      	ble.n	8001e32 <__aeabi_dsub+0x25a>
 8001e30:	e72f      	b.n	8001c92 <__aeabi_dsub+0xba>
 8001e32:	468a      	mov	sl, r1
 8001e34:	e718      	b.n	8001c68 <__aeabi_dsub+0x90>
 8001e36:	2201      	movs	r2, #1
 8001e38:	4051      	eors	r1, r2
 8001e3a:	428e      	cmp	r6, r1
 8001e3c:	d1d0      	bne.n	8001de0 <__aeabi_dsub+0x208>
 8001e3e:	4653      	mov	r3, sl
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d100      	bne.n	8001e46 <__aeabi_dsub+0x26e>
 8001e44:	e0be      	b.n	8001fc4 <__aeabi_dsub+0x3ec>
 8001e46:	2f00      	cmp	r7, #0
 8001e48:	d000      	beq.n	8001e4c <__aeabi_dsub+0x274>
 8001e4a:	e138      	b.n	80020be <__aeabi_dsub+0x4e6>
 8001e4c:	46ca      	mov	sl, r9
 8001e4e:	0022      	movs	r2, r4
 8001e50:	4302      	orrs	r2, r0
 8001e52:	d100      	bne.n	8001e56 <__aeabi_dsub+0x27e>
 8001e54:	e1e2      	b.n	800221c <__aeabi_dsub+0x644>
 8001e56:	4653      	mov	r3, sl
 8001e58:	1e59      	subs	r1, r3, #1
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d100      	bne.n	8001e60 <__aeabi_dsub+0x288>
 8001e5e:	e20d      	b.n	800227c <__aeabi_dsub+0x6a4>
 8001e60:	4a32      	ldr	r2, [pc, #200]	@ (8001f2c <__aeabi_dsub+0x354>)
 8001e62:	4592      	cmp	sl, r2
 8001e64:	d100      	bne.n	8001e68 <__aeabi_dsub+0x290>
 8001e66:	e1d2      	b.n	800220e <__aeabi_dsub+0x636>
 8001e68:	2701      	movs	r7, #1
 8001e6a:	2938      	cmp	r1, #56	@ 0x38
 8001e6c:	dc13      	bgt.n	8001e96 <__aeabi_dsub+0x2be>
 8001e6e:	291f      	cmp	r1, #31
 8001e70:	dd00      	ble.n	8001e74 <__aeabi_dsub+0x29c>
 8001e72:	e1ee      	b.n	8002252 <__aeabi_dsub+0x67a>
 8001e74:	2220      	movs	r2, #32
 8001e76:	9b02      	ldr	r3, [sp, #8]
 8001e78:	1a52      	subs	r2, r2, r1
 8001e7a:	0025      	movs	r5, r4
 8001e7c:	0007      	movs	r7, r0
 8001e7e:	469a      	mov	sl, r3
 8001e80:	40cc      	lsrs	r4, r1
 8001e82:	4090      	lsls	r0, r2
 8001e84:	4095      	lsls	r5, r2
 8001e86:	40cf      	lsrs	r7, r1
 8001e88:	44a2      	add	sl, r4
 8001e8a:	1e42      	subs	r2, r0, #1
 8001e8c:	4190      	sbcs	r0, r2
 8001e8e:	4653      	mov	r3, sl
 8001e90:	432f      	orrs	r7, r5
 8001e92:	4307      	orrs	r7, r0
 8001e94:	9302      	str	r3, [sp, #8]
 8001e96:	003d      	movs	r5, r7
 8001e98:	4465      	add	r5, ip
 8001e9a:	4565      	cmp	r5, ip
 8001e9c:	4192      	sbcs	r2, r2
 8001e9e:	9b02      	ldr	r3, [sp, #8]
 8001ea0:	4252      	negs	r2, r2
 8001ea2:	464f      	mov	r7, r9
 8001ea4:	18d4      	adds	r4, r2, r3
 8001ea6:	e780      	b.n	8001daa <__aeabi_dsub+0x1d2>
 8001ea8:	4a23      	ldr	r2, [pc, #140]	@ (8001f38 <__aeabi_dsub+0x360>)
 8001eaa:	1c7d      	adds	r5, r7, #1
 8001eac:	4215      	tst	r5, r2
 8001eae:	d000      	beq.n	8001eb2 <__aeabi_dsub+0x2da>
 8001eb0:	e0aa      	b.n	8002008 <__aeabi_dsub+0x430>
 8001eb2:	4662      	mov	r2, ip
 8001eb4:	0025      	movs	r5, r4
 8001eb6:	9b02      	ldr	r3, [sp, #8]
 8001eb8:	4305      	orrs	r5, r0
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	2f00      	cmp	r7, #0
 8001ebe:	d000      	beq.n	8001ec2 <__aeabi_dsub+0x2ea>
 8001ec0:	e0f5      	b.n	80020ae <__aeabi_dsub+0x4d6>
 8001ec2:	2d00      	cmp	r5, #0
 8001ec4:	d100      	bne.n	8001ec8 <__aeabi_dsub+0x2f0>
 8001ec6:	e16b      	b.n	80021a0 <__aeabi_dsub+0x5c8>
 8001ec8:	2a00      	cmp	r2, #0
 8001eca:	d100      	bne.n	8001ece <__aeabi_dsub+0x2f6>
 8001ecc:	e152      	b.n	8002174 <__aeabi_dsub+0x59c>
 8001ece:	4663      	mov	r3, ip
 8001ed0:	1ac5      	subs	r5, r0, r3
 8001ed2:	9b02      	ldr	r3, [sp, #8]
 8001ed4:	1ae2      	subs	r2, r4, r3
 8001ed6:	42a8      	cmp	r0, r5
 8001ed8:	419b      	sbcs	r3, r3
 8001eda:	425b      	negs	r3, r3
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	021a      	lsls	r2, r3, #8
 8001ee0:	d400      	bmi.n	8001ee4 <__aeabi_dsub+0x30c>
 8001ee2:	e1d5      	b.n	8002290 <__aeabi_dsub+0x6b8>
 8001ee4:	4663      	mov	r3, ip
 8001ee6:	1a1d      	subs	r5, r3, r0
 8001ee8:	45ac      	cmp	ip, r5
 8001eea:	4192      	sbcs	r2, r2
 8001eec:	2601      	movs	r6, #1
 8001eee:	9b02      	ldr	r3, [sp, #8]
 8001ef0:	4252      	negs	r2, r2
 8001ef2:	1b1c      	subs	r4, r3, r4
 8001ef4:	4688      	mov	r8, r1
 8001ef6:	1aa4      	subs	r4, r4, r2
 8001ef8:	400e      	ands	r6, r1
 8001efa:	e6f6      	b.n	8001cea <__aeabi_dsub+0x112>
 8001efc:	4297      	cmp	r7, r2
 8001efe:	d03f      	beq.n	8001f80 <__aeabi_dsub+0x3a8>
 8001f00:	4652      	mov	r2, sl
 8001f02:	2501      	movs	r5, #1
 8001f04:	2a38      	cmp	r2, #56	@ 0x38
 8001f06:	dd00      	ble.n	8001f0a <__aeabi_dsub+0x332>
 8001f08:	e74a      	b.n	8001da0 <__aeabi_dsub+0x1c8>
 8001f0a:	2280      	movs	r2, #128	@ 0x80
 8001f0c:	9b02      	ldr	r3, [sp, #8]
 8001f0e:	0412      	lsls	r2, r2, #16
 8001f10:	4313      	orrs	r3, r2
 8001f12:	9302      	str	r3, [sp, #8]
 8001f14:	e72d      	b.n	8001d72 <__aeabi_dsub+0x19a>
 8001f16:	003c      	movs	r4, r7
 8001f18:	2500      	movs	r5, #0
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	e705      	b.n	8001d2a <__aeabi_dsub+0x152>
 8001f1e:	2307      	movs	r3, #7
 8001f20:	402b      	ands	r3, r5
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d000      	beq.n	8001f28 <__aeabi_dsub+0x350>
 8001f26:	e6e2      	b.n	8001cee <__aeabi_dsub+0x116>
 8001f28:	e06b      	b.n	8002002 <__aeabi_dsub+0x42a>
 8001f2a:	46c0      	nop			@ (mov r8, r8)
 8001f2c:	000007ff 	.word	0x000007ff
 8001f30:	ff7fffff 	.word	0xff7fffff
 8001f34:	fffff801 	.word	0xfffff801
 8001f38:	000007fe 	.word	0x000007fe
 8001f3c:	0028      	movs	r0, r5
 8001f3e:	f7fe fab3 	bl	80004a8 <__clzsi2>
 8001f42:	0003      	movs	r3, r0
 8001f44:	3318      	adds	r3, #24
 8001f46:	2b1f      	cmp	r3, #31
 8001f48:	dc00      	bgt.n	8001f4c <__aeabi_dsub+0x374>
 8001f4a:	e6b4      	b.n	8001cb6 <__aeabi_dsub+0xde>
 8001f4c:	002a      	movs	r2, r5
 8001f4e:	3808      	subs	r0, #8
 8001f50:	4082      	lsls	r2, r0
 8001f52:	429f      	cmp	r7, r3
 8001f54:	dd00      	ble.n	8001f58 <__aeabi_dsub+0x380>
 8001f56:	e0b9      	b.n	80020cc <__aeabi_dsub+0x4f4>
 8001f58:	1bdb      	subs	r3, r3, r7
 8001f5a:	1c58      	adds	r0, r3, #1
 8001f5c:	281f      	cmp	r0, #31
 8001f5e:	dc00      	bgt.n	8001f62 <__aeabi_dsub+0x38a>
 8001f60:	e1a0      	b.n	80022a4 <__aeabi_dsub+0x6cc>
 8001f62:	0015      	movs	r5, r2
 8001f64:	3b1f      	subs	r3, #31
 8001f66:	40dd      	lsrs	r5, r3
 8001f68:	2820      	cmp	r0, #32
 8001f6a:	d005      	beq.n	8001f78 <__aeabi_dsub+0x3a0>
 8001f6c:	2340      	movs	r3, #64	@ 0x40
 8001f6e:	1a1b      	subs	r3, r3, r0
 8001f70:	409a      	lsls	r2, r3
 8001f72:	1e53      	subs	r3, r2, #1
 8001f74:	419a      	sbcs	r2, r3
 8001f76:	4315      	orrs	r5, r2
 8001f78:	2307      	movs	r3, #7
 8001f7a:	2700      	movs	r7, #0
 8001f7c:	402b      	ands	r3, r5
 8001f7e:	e7d0      	b.n	8001f22 <__aeabi_dsub+0x34a>
 8001f80:	08c0      	lsrs	r0, r0, #3
 8001f82:	0762      	lsls	r2, r4, #29
 8001f84:	4302      	orrs	r2, r0
 8001f86:	08e4      	lsrs	r4, r4, #3
 8001f88:	e737      	b.n	8001dfa <__aeabi_dsub+0x222>
 8001f8a:	08ea      	lsrs	r2, r5, #3
 8001f8c:	0763      	lsls	r3, r4, #29
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	4bd3      	ldr	r3, [pc, #844]	@ (80022e0 <__aeabi_dsub+0x708>)
 8001f92:	08e4      	lsrs	r4, r4, #3
 8001f94:	429f      	cmp	r7, r3
 8001f96:	d100      	bne.n	8001f9a <__aeabi_dsub+0x3c2>
 8001f98:	e72f      	b.n	8001dfa <__aeabi_dsub+0x222>
 8001f9a:	0324      	lsls	r4, r4, #12
 8001f9c:	0b25      	lsrs	r5, r4, #12
 8001f9e:	057c      	lsls	r4, r7, #21
 8001fa0:	0d64      	lsrs	r4, r4, #21
 8001fa2:	e6c2      	b.n	8001d2a <__aeabi_dsub+0x152>
 8001fa4:	46ca      	mov	sl, r9
 8001fa6:	0022      	movs	r2, r4
 8001fa8:	4302      	orrs	r2, r0
 8001faa:	d158      	bne.n	800205e <__aeabi_dsub+0x486>
 8001fac:	4663      	mov	r3, ip
 8001fae:	000e      	movs	r6, r1
 8001fb0:	9c02      	ldr	r4, [sp, #8]
 8001fb2:	9303      	str	r3, [sp, #12]
 8001fb4:	9b03      	ldr	r3, [sp, #12]
 8001fb6:	4657      	mov	r7, sl
 8001fb8:	08da      	lsrs	r2, r3, #3
 8001fba:	e7e7      	b.n	8001f8c <__aeabi_dsub+0x3b4>
 8001fbc:	4cc9      	ldr	r4, [pc, #804]	@ (80022e4 <__aeabi_dsub+0x70c>)
 8001fbe:	1aff      	subs	r7, r7, r3
 8001fc0:	4014      	ands	r4, r2
 8001fc2:	e692      	b.n	8001cea <__aeabi_dsub+0x112>
 8001fc4:	4dc8      	ldr	r5, [pc, #800]	@ (80022e8 <__aeabi_dsub+0x710>)
 8001fc6:	1c7a      	adds	r2, r7, #1
 8001fc8:	422a      	tst	r2, r5
 8001fca:	d000      	beq.n	8001fce <__aeabi_dsub+0x3f6>
 8001fcc:	e084      	b.n	80020d8 <__aeabi_dsub+0x500>
 8001fce:	0022      	movs	r2, r4
 8001fd0:	4302      	orrs	r2, r0
 8001fd2:	2f00      	cmp	r7, #0
 8001fd4:	d000      	beq.n	8001fd8 <__aeabi_dsub+0x400>
 8001fd6:	e0ef      	b.n	80021b8 <__aeabi_dsub+0x5e0>
 8001fd8:	2a00      	cmp	r2, #0
 8001fda:	d100      	bne.n	8001fde <__aeabi_dsub+0x406>
 8001fdc:	e0e5      	b.n	80021aa <__aeabi_dsub+0x5d2>
 8001fde:	4662      	mov	r2, ip
 8001fe0:	9902      	ldr	r1, [sp, #8]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	d100      	bne.n	8001fe8 <__aeabi_dsub+0x410>
 8001fe6:	e0c5      	b.n	8002174 <__aeabi_dsub+0x59c>
 8001fe8:	4663      	mov	r3, ip
 8001fea:	18c5      	adds	r5, r0, r3
 8001fec:	468c      	mov	ip, r1
 8001fee:	4285      	cmp	r5, r0
 8001ff0:	4180      	sbcs	r0, r0
 8001ff2:	4464      	add	r4, ip
 8001ff4:	4240      	negs	r0, r0
 8001ff6:	1824      	adds	r4, r4, r0
 8001ff8:	0223      	lsls	r3, r4, #8
 8001ffa:	d502      	bpl.n	8002002 <__aeabi_dsub+0x42a>
 8001ffc:	4bb9      	ldr	r3, [pc, #740]	@ (80022e4 <__aeabi_dsub+0x70c>)
 8001ffe:	3701      	adds	r7, #1
 8002000:	401c      	ands	r4, r3
 8002002:	46ba      	mov	sl, r7
 8002004:	9503      	str	r5, [sp, #12]
 8002006:	e7d5      	b.n	8001fb4 <__aeabi_dsub+0x3dc>
 8002008:	4662      	mov	r2, ip
 800200a:	1a85      	subs	r5, r0, r2
 800200c:	42a8      	cmp	r0, r5
 800200e:	4192      	sbcs	r2, r2
 8002010:	4252      	negs	r2, r2
 8002012:	4691      	mov	r9, r2
 8002014:	9b02      	ldr	r3, [sp, #8]
 8002016:	1ae3      	subs	r3, r4, r3
 8002018:	001a      	movs	r2, r3
 800201a:	464b      	mov	r3, r9
 800201c:	1ad2      	subs	r2, r2, r3
 800201e:	0013      	movs	r3, r2
 8002020:	4691      	mov	r9, r2
 8002022:	021a      	lsls	r2, r3, #8
 8002024:	d46c      	bmi.n	8002100 <__aeabi_dsub+0x528>
 8002026:	464a      	mov	r2, r9
 8002028:	464c      	mov	r4, r9
 800202a:	432a      	orrs	r2, r5
 800202c:	d000      	beq.n	8002030 <__aeabi_dsub+0x458>
 800202e:	e63a      	b.n	8001ca6 <__aeabi_dsub+0xce>
 8002030:	2600      	movs	r6, #0
 8002032:	2400      	movs	r4, #0
 8002034:	2500      	movs	r5, #0
 8002036:	e678      	b.n	8001d2a <__aeabi_dsub+0x152>
 8002038:	9902      	ldr	r1, [sp, #8]
 800203a:	4653      	mov	r3, sl
 800203c:	000d      	movs	r5, r1
 800203e:	3a20      	subs	r2, #32
 8002040:	40d5      	lsrs	r5, r2
 8002042:	2b20      	cmp	r3, #32
 8002044:	d006      	beq.n	8002054 <__aeabi_dsub+0x47c>
 8002046:	2240      	movs	r2, #64	@ 0x40
 8002048:	1ad2      	subs	r2, r2, r3
 800204a:	000b      	movs	r3, r1
 800204c:	4093      	lsls	r3, r2
 800204e:	4662      	mov	r2, ip
 8002050:	431a      	orrs	r2, r3
 8002052:	4693      	mov	fp, r2
 8002054:	465b      	mov	r3, fp
 8002056:	1e5a      	subs	r2, r3, #1
 8002058:	4193      	sbcs	r3, r2
 800205a:	431d      	orrs	r5, r3
 800205c:	e619      	b.n	8001c92 <__aeabi_dsub+0xba>
 800205e:	4653      	mov	r3, sl
 8002060:	1e5a      	subs	r2, r3, #1
 8002062:	2b01      	cmp	r3, #1
 8002064:	d100      	bne.n	8002068 <__aeabi_dsub+0x490>
 8002066:	e0c6      	b.n	80021f6 <__aeabi_dsub+0x61e>
 8002068:	4e9d      	ldr	r6, [pc, #628]	@ (80022e0 <__aeabi_dsub+0x708>)
 800206a:	45b2      	cmp	sl, r6
 800206c:	d100      	bne.n	8002070 <__aeabi_dsub+0x498>
 800206e:	e6bd      	b.n	8001dec <__aeabi_dsub+0x214>
 8002070:	4688      	mov	r8, r1
 8002072:	000e      	movs	r6, r1
 8002074:	2501      	movs	r5, #1
 8002076:	2a38      	cmp	r2, #56	@ 0x38
 8002078:	dc10      	bgt.n	800209c <__aeabi_dsub+0x4c4>
 800207a:	2a1f      	cmp	r2, #31
 800207c:	dc7f      	bgt.n	800217e <__aeabi_dsub+0x5a6>
 800207e:	2120      	movs	r1, #32
 8002080:	0025      	movs	r5, r4
 8002082:	1a89      	subs	r1, r1, r2
 8002084:	0007      	movs	r7, r0
 8002086:	4088      	lsls	r0, r1
 8002088:	408d      	lsls	r5, r1
 800208a:	40d7      	lsrs	r7, r2
 800208c:	40d4      	lsrs	r4, r2
 800208e:	1e41      	subs	r1, r0, #1
 8002090:	4188      	sbcs	r0, r1
 8002092:	9b02      	ldr	r3, [sp, #8]
 8002094:	433d      	orrs	r5, r7
 8002096:	1b1b      	subs	r3, r3, r4
 8002098:	4305      	orrs	r5, r0
 800209a:	9302      	str	r3, [sp, #8]
 800209c:	4662      	mov	r2, ip
 800209e:	1b55      	subs	r5, r2, r5
 80020a0:	45ac      	cmp	ip, r5
 80020a2:	4192      	sbcs	r2, r2
 80020a4:	9b02      	ldr	r3, [sp, #8]
 80020a6:	4252      	negs	r2, r2
 80020a8:	464f      	mov	r7, r9
 80020aa:	1a9c      	subs	r4, r3, r2
 80020ac:	e5f6      	b.n	8001c9c <__aeabi_dsub+0xc4>
 80020ae:	2d00      	cmp	r5, #0
 80020b0:	d000      	beq.n	80020b4 <__aeabi_dsub+0x4dc>
 80020b2:	e0b7      	b.n	8002224 <__aeabi_dsub+0x64c>
 80020b4:	2a00      	cmp	r2, #0
 80020b6:	d100      	bne.n	80020ba <__aeabi_dsub+0x4e2>
 80020b8:	e0f0      	b.n	800229c <__aeabi_dsub+0x6c4>
 80020ba:	2601      	movs	r6, #1
 80020bc:	400e      	ands	r6, r1
 80020be:	4663      	mov	r3, ip
 80020c0:	9802      	ldr	r0, [sp, #8]
 80020c2:	08d9      	lsrs	r1, r3, #3
 80020c4:	0742      	lsls	r2, r0, #29
 80020c6:	430a      	orrs	r2, r1
 80020c8:	08c4      	lsrs	r4, r0, #3
 80020ca:	e696      	b.n	8001dfa <__aeabi_dsub+0x222>
 80020cc:	4c85      	ldr	r4, [pc, #532]	@ (80022e4 <__aeabi_dsub+0x70c>)
 80020ce:	1aff      	subs	r7, r7, r3
 80020d0:	4014      	ands	r4, r2
 80020d2:	0762      	lsls	r2, r4, #29
 80020d4:	08e4      	lsrs	r4, r4, #3
 80020d6:	e760      	b.n	8001f9a <__aeabi_dsub+0x3c2>
 80020d8:	4981      	ldr	r1, [pc, #516]	@ (80022e0 <__aeabi_dsub+0x708>)
 80020da:	428a      	cmp	r2, r1
 80020dc:	d100      	bne.n	80020e0 <__aeabi_dsub+0x508>
 80020de:	e0c9      	b.n	8002274 <__aeabi_dsub+0x69c>
 80020e0:	4663      	mov	r3, ip
 80020e2:	18c1      	adds	r1, r0, r3
 80020e4:	4281      	cmp	r1, r0
 80020e6:	4180      	sbcs	r0, r0
 80020e8:	9b02      	ldr	r3, [sp, #8]
 80020ea:	4240      	negs	r0, r0
 80020ec:	18e3      	adds	r3, r4, r3
 80020ee:	181b      	adds	r3, r3, r0
 80020f0:	07dd      	lsls	r5, r3, #31
 80020f2:	085c      	lsrs	r4, r3, #1
 80020f4:	2307      	movs	r3, #7
 80020f6:	0849      	lsrs	r1, r1, #1
 80020f8:	430d      	orrs	r5, r1
 80020fa:	0017      	movs	r7, r2
 80020fc:	402b      	ands	r3, r5
 80020fe:	e710      	b.n	8001f22 <__aeabi_dsub+0x34a>
 8002100:	4663      	mov	r3, ip
 8002102:	1a1d      	subs	r5, r3, r0
 8002104:	45ac      	cmp	ip, r5
 8002106:	4192      	sbcs	r2, r2
 8002108:	2601      	movs	r6, #1
 800210a:	9b02      	ldr	r3, [sp, #8]
 800210c:	4252      	negs	r2, r2
 800210e:	1b1c      	subs	r4, r3, r4
 8002110:	4688      	mov	r8, r1
 8002112:	1aa4      	subs	r4, r4, r2
 8002114:	400e      	ands	r6, r1
 8002116:	e5c6      	b.n	8001ca6 <__aeabi_dsub+0xce>
 8002118:	4663      	mov	r3, ip
 800211a:	18c5      	adds	r5, r0, r3
 800211c:	9b02      	ldr	r3, [sp, #8]
 800211e:	4285      	cmp	r5, r0
 8002120:	4180      	sbcs	r0, r0
 8002122:	469c      	mov	ip, r3
 8002124:	4240      	negs	r0, r0
 8002126:	4464      	add	r4, ip
 8002128:	1824      	adds	r4, r4, r0
 800212a:	2701      	movs	r7, #1
 800212c:	0223      	lsls	r3, r4, #8
 800212e:	d400      	bmi.n	8002132 <__aeabi_dsub+0x55a>
 8002130:	e6f5      	b.n	8001f1e <__aeabi_dsub+0x346>
 8002132:	2702      	movs	r7, #2
 8002134:	e641      	b.n	8001dba <__aeabi_dsub+0x1e2>
 8002136:	4663      	mov	r3, ip
 8002138:	1ac5      	subs	r5, r0, r3
 800213a:	42a8      	cmp	r0, r5
 800213c:	4180      	sbcs	r0, r0
 800213e:	9b02      	ldr	r3, [sp, #8]
 8002140:	4240      	negs	r0, r0
 8002142:	1ae4      	subs	r4, r4, r3
 8002144:	2701      	movs	r7, #1
 8002146:	1a24      	subs	r4, r4, r0
 8002148:	e5a8      	b.n	8001c9c <__aeabi_dsub+0xc4>
 800214a:	9d02      	ldr	r5, [sp, #8]
 800214c:	4652      	mov	r2, sl
 800214e:	002b      	movs	r3, r5
 8002150:	3a20      	subs	r2, #32
 8002152:	40d3      	lsrs	r3, r2
 8002154:	0019      	movs	r1, r3
 8002156:	4653      	mov	r3, sl
 8002158:	2b20      	cmp	r3, #32
 800215a:	d006      	beq.n	800216a <__aeabi_dsub+0x592>
 800215c:	2240      	movs	r2, #64	@ 0x40
 800215e:	1ad2      	subs	r2, r2, r3
 8002160:	002b      	movs	r3, r5
 8002162:	4093      	lsls	r3, r2
 8002164:	4662      	mov	r2, ip
 8002166:	431a      	orrs	r2, r3
 8002168:	4693      	mov	fp, r2
 800216a:	465d      	mov	r5, fp
 800216c:	1e6b      	subs	r3, r5, #1
 800216e:	419d      	sbcs	r5, r3
 8002170:	430d      	orrs	r5, r1
 8002172:	e615      	b.n	8001da0 <__aeabi_dsub+0x1c8>
 8002174:	0762      	lsls	r2, r4, #29
 8002176:	08c0      	lsrs	r0, r0, #3
 8002178:	4302      	orrs	r2, r0
 800217a:	08e4      	lsrs	r4, r4, #3
 800217c:	e70d      	b.n	8001f9a <__aeabi_dsub+0x3c2>
 800217e:	0011      	movs	r1, r2
 8002180:	0027      	movs	r7, r4
 8002182:	3920      	subs	r1, #32
 8002184:	40cf      	lsrs	r7, r1
 8002186:	2a20      	cmp	r2, #32
 8002188:	d005      	beq.n	8002196 <__aeabi_dsub+0x5be>
 800218a:	2140      	movs	r1, #64	@ 0x40
 800218c:	1a8a      	subs	r2, r1, r2
 800218e:	4094      	lsls	r4, r2
 8002190:	0025      	movs	r5, r4
 8002192:	4305      	orrs	r5, r0
 8002194:	9503      	str	r5, [sp, #12]
 8002196:	9d03      	ldr	r5, [sp, #12]
 8002198:	1e6a      	subs	r2, r5, #1
 800219a:	4195      	sbcs	r5, r2
 800219c:	433d      	orrs	r5, r7
 800219e:	e77d      	b.n	800209c <__aeabi_dsub+0x4c4>
 80021a0:	2a00      	cmp	r2, #0
 80021a2:	d100      	bne.n	80021a6 <__aeabi_dsub+0x5ce>
 80021a4:	e744      	b.n	8002030 <__aeabi_dsub+0x458>
 80021a6:	2601      	movs	r6, #1
 80021a8:	400e      	ands	r6, r1
 80021aa:	4663      	mov	r3, ip
 80021ac:	08d9      	lsrs	r1, r3, #3
 80021ae:	9b02      	ldr	r3, [sp, #8]
 80021b0:	075a      	lsls	r2, r3, #29
 80021b2:	430a      	orrs	r2, r1
 80021b4:	08dc      	lsrs	r4, r3, #3
 80021b6:	e6f0      	b.n	8001f9a <__aeabi_dsub+0x3c2>
 80021b8:	2a00      	cmp	r2, #0
 80021ba:	d028      	beq.n	800220e <__aeabi_dsub+0x636>
 80021bc:	4662      	mov	r2, ip
 80021be:	9f02      	ldr	r7, [sp, #8]
 80021c0:	08c0      	lsrs	r0, r0, #3
 80021c2:	433a      	orrs	r2, r7
 80021c4:	d100      	bne.n	80021c8 <__aeabi_dsub+0x5f0>
 80021c6:	e6dc      	b.n	8001f82 <__aeabi_dsub+0x3aa>
 80021c8:	0762      	lsls	r2, r4, #29
 80021ca:	4310      	orrs	r0, r2
 80021cc:	2280      	movs	r2, #128	@ 0x80
 80021ce:	08e4      	lsrs	r4, r4, #3
 80021d0:	0312      	lsls	r2, r2, #12
 80021d2:	4214      	tst	r4, r2
 80021d4:	d009      	beq.n	80021ea <__aeabi_dsub+0x612>
 80021d6:	08fd      	lsrs	r5, r7, #3
 80021d8:	4215      	tst	r5, r2
 80021da:	d106      	bne.n	80021ea <__aeabi_dsub+0x612>
 80021dc:	4663      	mov	r3, ip
 80021de:	2601      	movs	r6, #1
 80021e0:	002c      	movs	r4, r5
 80021e2:	08d8      	lsrs	r0, r3, #3
 80021e4:	077b      	lsls	r3, r7, #29
 80021e6:	4318      	orrs	r0, r3
 80021e8:	400e      	ands	r6, r1
 80021ea:	0f42      	lsrs	r2, r0, #29
 80021ec:	00c0      	lsls	r0, r0, #3
 80021ee:	08c0      	lsrs	r0, r0, #3
 80021f0:	0752      	lsls	r2, r2, #29
 80021f2:	4302      	orrs	r2, r0
 80021f4:	e601      	b.n	8001dfa <__aeabi_dsub+0x222>
 80021f6:	4663      	mov	r3, ip
 80021f8:	1a1d      	subs	r5, r3, r0
 80021fa:	45ac      	cmp	ip, r5
 80021fc:	4192      	sbcs	r2, r2
 80021fe:	9b02      	ldr	r3, [sp, #8]
 8002200:	4252      	negs	r2, r2
 8002202:	1b1c      	subs	r4, r3, r4
 8002204:	000e      	movs	r6, r1
 8002206:	4688      	mov	r8, r1
 8002208:	2701      	movs	r7, #1
 800220a:	1aa4      	subs	r4, r4, r2
 800220c:	e546      	b.n	8001c9c <__aeabi_dsub+0xc4>
 800220e:	4663      	mov	r3, ip
 8002210:	08d9      	lsrs	r1, r3, #3
 8002212:	9b02      	ldr	r3, [sp, #8]
 8002214:	075a      	lsls	r2, r3, #29
 8002216:	430a      	orrs	r2, r1
 8002218:	08dc      	lsrs	r4, r3, #3
 800221a:	e5ee      	b.n	8001dfa <__aeabi_dsub+0x222>
 800221c:	4663      	mov	r3, ip
 800221e:	9c02      	ldr	r4, [sp, #8]
 8002220:	9303      	str	r3, [sp, #12]
 8002222:	e6c7      	b.n	8001fb4 <__aeabi_dsub+0x3dc>
 8002224:	08c0      	lsrs	r0, r0, #3
 8002226:	2a00      	cmp	r2, #0
 8002228:	d100      	bne.n	800222c <__aeabi_dsub+0x654>
 800222a:	e6aa      	b.n	8001f82 <__aeabi_dsub+0x3aa>
 800222c:	0762      	lsls	r2, r4, #29
 800222e:	4310      	orrs	r0, r2
 8002230:	2280      	movs	r2, #128	@ 0x80
 8002232:	08e4      	lsrs	r4, r4, #3
 8002234:	0312      	lsls	r2, r2, #12
 8002236:	4214      	tst	r4, r2
 8002238:	d0d7      	beq.n	80021ea <__aeabi_dsub+0x612>
 800223a:	9f02      	ldr	r7, [sp, #8]
 800223c:	08fd      	lsrs	r5, r7, #3
 800223e:	4215      	tst	r5, r2
 8002240:	d1d3      	bne.n	80021ea <__aeabi_dsub+0x612>
 8002242:	4663      	mov	r3, ip
 8002244:	2601      	movs	r6, #1
 8002246:	08d8      	lsrs	r0, r3, #3
 8002248:	077b      	lsls	r3, r7, #29
 800224a:	002c      	movs	r4, r5
 800224c:	4318      	orrs	r0, r3
 800224e:	400e      	ands	r6, r1
 8002250:	e7cb      	b.n	80021ea <__aeabi_dsub+0x612>
 8002252:	000a      	movs	r2, r1
 8002254:	0027      	movs	r7, r4
 8002256:	3a20      	subs	r2, #32
 8002258:	40d7      	lsrs	r7, r2
 800225a:	2920      	cmp	r1, #32
 800225c:	d005      	beq.n	800226a <__aeabi_dsub+0x692>
 800225e:	2240      	movs	r2, #64	@ 0x40
 8002260:	1a52      	subs	r2, r2, r1
 8002262:	4094      	lsls	r4, r2
 8002264:	0025      	movs	r5, r4
 8002266:	4305      	orrs	r5, r0
 8002268:	9503      	str	r5, [sp, #12]
 800226a:	9d03      	ldr	r5, [sp, #12]
 800226c:	1e6a      	subs	r2, r5, #1
 800226e:	4195      	sbcs	r5, r2
 8002270:	432f      	orrs	r7, r5
 8002272:	e610      	b.n	8001e96 <__aeabi_dsub+0x2be>
 8002274:	0014      	movs	r4, r2
 8002276:	2500      	movs	r5, #0
 8002278:	2200      	movs	r2, #0
 800227a:	e556      	b.n	8001d2a <__aeabi_dsub+0x152>
 800227c:	9b02      	ldr	r3, [sp, #8]
 800227e:	4460      	add	r0, ip
 8002280:	4699      	mov	r9, r3
 8002282:	4560      	cmp	r0, ip
 8002284:	4192      	sbcs	r2, r2
 8002286:	444c      	add	r4, r9
 8002288:	4252      	negs	r2, r2
 800228a:	0005      	movs	r5, r0
 800228c:	18a4      	adds	r4, r4, r2
 800228e:	e74c      	b.n	800212a <__aeabi_dsub+0x552>
 8002290:	001a      	movs	r2, r3
 8002292:	001c      	movs	r4, r3
 8002294:	432a      	orrs	r2, r5
 8002296:	d000      	beq.n	800229a <__aeabi_dsub+0x6c2>
 8002298:	e6b3      	b.n	8002002 <__aeabi_dsub+0x42a>
 800229a:	e6c9      	b.n	8002030 <__aeabi_dsub+0x458>
 800229c:	2480      	movs	r4, #128	@ 0x80
 800229e:	2600      	movs	r6, #0
 80022a0:	0324      	lsls	r4, r4, #12
 80022a2:	e5ae      	b.n	8001e02 <__aeabi_dsub+0x22a>
 80022a4:	2120      	movs	r1, #32
 80022a6:	2500      	movs	r5, #0
 80022a8:	1a09      	subs	r1, r1, r0
 80022aa:	e517      	b.n	8001cdc <__aeabi_dsub+0x104>
 80022ac:	2200      	movs	r2, #0
 80022ae:	2500      	movs	r5, #0
 80022b0:	4c0b      	ldr	r4, [pc, #44]	@ (80022e0 <__aeabi_dsub+0x708>)
 80022b2:	e53a      	b.n	8001d2a <__aeabi_dsub+0x152>
 80022b4:	2d00      	cmp	r5, #0
 80022b6:	d100      	bne.n	80022ba <__aeabi_dsub+0x6e2>
 80022b8:	e5f6      	b.n	8001ea8 <__aeabi_dsub+0x2d0>
 80022ba:	464b      	mov	r3, r9
 80022bc:	1bda      	subs	r2, r3, r7
 80022be:	4692      	mov	sl, r2
 80022c0:	2f00      	cmp	r7, #0
 80022c2:	d100      	bne.n	80022c6 <__aeabi_dsub+0x6ee>
 80022c4:	e66f      	b.n	8001fa6 <__aeabi_dsub+0x3ce>
 80022c6:	2a38      	cmp	r2, #56	@ 0x38
 80022c8:	dc05      	bgt.n	80022d6 <__aeabi_dsub+0x6fe>
 80022ca:	2680      	movs	r6, #128	@ 0x80
 80022cc:	0436      	lsls	r6, r6, #16
 80022ce:	4334      	orrs	r4, r6
 80022d0:	4688      	mov	r8, r1
 80022d2:	000e      	movs	r6, r1
 80022d4:	e6d1      	b.n	800207a <__aeabi_dsub+0x4a2>
 80022d6:	4688      	mov	r8, r1
 80022d8:	000e      	movs	r6, r1
 80022da:	2501      	movs	r5, #1
 80022dc:	e6de      	b.n	800209c <__aeabi_dsub+0x4c4>
 80022de:	46c0      	nop			@ (mov r8, r8)
 80022e0:	000007ff 	.word	0x000007ff
 80022e4:	ff7fffff 	.word	0xff7fffff
 80022e8:	000007fe 	.word	0x000007fe
 80022ec:	2d00      	cmp	r5, #0
 80022ee:	d100      	bne.n	80022f2 <__aeabi_dsub+0x71a>
 80022f0:	e668      	b.n	8001fc4 <__aeabi_dsub+0x3ec>
 80022f2:	464b      	mov	r3, r9
 80022f4:	1bd9      	subs	r1, r3, r7
 80022f6:	2f00      	cmp	r7, #0
 80022f8:	d101      	bne.n	80022fe <__aeabi_dsub+0x726>
 80022fa:	468a      	mov	sl, r1
 80022fc:	e5a7      	b.n	8001e4e <__aeabi_dsub+0x276>
 80022fe:	2701      	movs	r7, #1
 8002300:	2938      	cmp	r1, #56	@ 0x38
 8002302:	dd00      	ble.n	8002306 <__aeabi_dsub+0x72e>
 8002304:	e5c7      	b.n	8001e96 <__aeabi_dsub+0x2be>
 8002306:	2280      	movs	r2, #128	@ 0x80
 8002308:	0412      	lsls	r2, r2, #16
 800230a:	4314      	orrs	r4, r2
 800230c:	e5af      	b.n	8001e6e <__aeabi_dsub+0x296>
 800230e:	46c0      	nop			@ (mov r8, r8)

08002310 <__aeabi_dcmpun>:
 8002310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002312:	46c6      	mov	lr, r8
 8002314:	031e      	lsls	r6, r3, #12
 8002316:	0b36      	lsrs	r6, r6, #12
 8002318:	46b0      	mov	r8, r6
 800231a:	4e0d      	ldr	r6, [pc, #52]	@ (8002350 <__aeabi_dcmpun+0x40>)
 800231c:	030c      	lsls	r4, r1, #12
 800231e:	004d      	lsls	r5, r1, #1
 8002320:	005f      	lsls	r7, r3, #1
 8002322:	b500      	push	{lr}
 8002324:	0b24      	lsrs	r4, r4, #12
 8002326:	0d6d      	lsrs	r5, r5, #21
 8002328:	0d7f      	lsrs	r7, r7, #21
 800232a:	42b5      	cmp	r5, r6
 800232c:	d00b      	beq.n	8002346 <__aeabi_dcmpun+0x36>
 800232e:	4908      	ldr	r1, [pc, #32]	@ (8002350 <__aeabi_dcmpun+0x40>)
 8002330:	2000      	movs	r0, #0
 8002332:	428f      	cmp	r7, r1
 8002334:	d104      	bne.n	8002340 <__aeabi_dcmpun+0x30>
 8002336:	4646      	mov	r6, r8
 8002338:	4316      	orrs	r6, r2
 800233a:	0030      	movs	r0, r6
 800233c:	1e43      	subs	r3, r0, #1
 800233e:	4198      	sbcs	r0, r3
 8002340:	bc80      	pop	{r7}
 8002342:	46b8      	mov	r8, r7
 8002344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002346:	4304      	orrs	r4, r0
 8002348:	2001      	movs	r0, #1
 800234a:	2c00      	cmp	r4, #0
 800234c:	d1f8      	bne.n	8002340 <__aeabi_dcmpun+0x30>
 800234e:	e7ee      	b.n	800232e <__aeabi_dcmpun+0x1e>
 8002350:	000007ff 	.word	0x000007ff

08002354 <__aeabi_d2iz>:
 8002354:	000b      	movs	r3, r1
 8002356:	0002      	movs	r2, r0
 8002358:	b570      	push	{r4, r5, r6, lr}
 800235a:	4d16      	ldr	r5, [pc, #88]	@ (80023b4 <__aeabi_d2iz+0x60>)
 800235c:	030c      	lsls	r4, r1, #12
 800235e:	b082      	sub	sp, #8
 8002360:	0049      	lsls	r1, r1, #1
 8002362:	2000      	movs	r0, #0
 8002364:	9200      	str	r2, [sp, #0]
 8002366:	9301      	str	r3, [sp, #4]
 8002368:	0b24      	lsrs	r4, r4, #12
 800236a:	0d49      	lsrs	r1, r1, #21
 800236c:	0fde      	lsrs	r6, r3, #31
 800236e:	42a9      	cmp	r1, r5
 8002370:	dd04      	ble.n	800237c <__aeabi_d2iz+0x28>
 8002372:	4811      	ldr	r0, [pc, #68]	@ (80023b8 <__aeabi_d2iz+0x64>)
 8002374:	4281      	cmp	r1, r0
 8002376:	dd03      	ble.n	8002380 <__aeabi_d2iz+0x2c>
 8002378:	4b10      	ldr	r3, [pc, #64]	@ (80023bc <__aeabi_d2iz+0x68>)
 800237a:	18f0      	adds	r0, r6, r3
 800237c:	b002      	add	sp, #8
 800237e:	bd70      	pop	{r4, r5, r6, pc}
 8002380:	2080      	movs	r0, #128	@ 0x80
 8002382:	0340      	lsls	r0, r0, #13
 8002384:	4320      	orrs	r0, r4
 8002386:	4c0e      	ldr	r4, [pc, #56]	@ (80023c0 <__aeabi_d2iz+0x6c>)
 8002388:	1a64      	subs	r4, r4, r1
 800238a:	2c1f      	cmp	r4, #31
 800238c:	dd08      	ble.n	80023a0 <__aeabi_d2iz+0x4c>
 800238e:	4b0d      	ldr	r3, [pc, #52]	@ (80023c4 <__aeabi_d2iz+0x70>)
 8002390:	1a5b      	subs	r3, r3, r1
 8002392:	40d8      	lsrs	r0, r3
 8002394:	0003      	movs	r3, r0
 8002396:	4258      	negs	r0, r3
 8002398:	2e00      	cmp	r6, #0
 800239a:	d1ef      	bne.n	800237c <__aeabi_d2iz+0x28>
 800239c:	0018      	movs	r0, r3
 800239e:	e7ed      	b.n	800237c <__aeabi_d2iz+0x28>
 80023a0:	4b09      	ldr	r3, [pc, #36]	@ (80023c8 <__aeabi_d2iz+0x74>)
 80023a2:	9a00      	ldr	r2, [sp, #0]
 80023a4:	469c      	mov	ip, r3
 80023a6:	0003      	movs	r3, r0
 80023a8:	4461      	add	r1, ip
 80023aa:	408b      	lsls	r3, r1
 80023ac:	40e2      	lsrs	r2, r4
 80023ae:	4313      	orrs	r3, r2
 80023b0:	e7f1      	b.n	8002396 <__aeabi_d2iz+0x42>
 80023b2:	46c0      	nop			@ (mov r8, r8)
 80023b4:	000003fe 	.word	0x000003fe
 80023b8:	0000041d 	.word	0x0000041d
 80023bc:	7fffffff 	.word	0x7fffffff
 80023c0:	00000433 	.word	0x00000433
 80023c4:	00000413 	.word	0x00000413
 80023c8:	fffffbed 	.word	0xfffffbed

080023cc <__aeabi_i2d>:
 80023cc:	b570      	push	{r4, r5, r6, lr}
 80023ce:	2800      	cmp	r0, #0
 80023d0:	d016      	beq.n	8002400 <__aeabi_i2d+0x34>
 80023d2:	17c3      	asrs	r3, r0, #31
 80023d4:	18c5      	adds	r5, r0, r3
 80023d6:	405d      	eors	r5, r3
 80023d8:	0fc4      	lsrs	r4, r0, #31
 80023da:	0028      	movs	r0, r5
 80023dc:	f7fe f864 	bl	80004a8 <__clzsi2>
 80023e0:	4b10      	ldr	r3, [pc, #64]	@ (8002424 <__aeabi_i2d+0x58>)
 80023e2:	1a1b      	subs	r3, r3, r0
 80023e4:	055b      	lsls	r3, r3, #21
 80023e6:	0d5b      	lsrs	r3, r3, #21
 80023e8:	280a      	cmp	r0, #10
 80023ea:	dc14      	bgt.n	8002416 <__aeabi_i2d+0x4a>
 80023ec:	0002      	movs	r2, r0
 80023ee:	002e      	movs	r6, r5
 80023f0:	3215      	adds	r2, #21
 80023f2:	4096      	lsls	r6, r2
 80023f4:	220b      	movs	r2, #11
 80023f6:	1a12      	subs	r2, r2, r0
 80023f8:	40d5      	lsrs	r5, r2
 80023fa:	032d      	lsls	r5, r5, #12
 80023fc:	0b2d      	lsrs	r5, r5, #12
 80023fe:	e003      	b.n	8002408 <__aeabi_i2d+0x3c>
 8002400:	2400      	movs	r4, #0
 8002402:	2300      	movs	r3, #0
 8002404:	2500      	movs	r5, #0
 8002406:	2600      	movs	r6, #0
 8002408:	051b      	lsls	r3, r3, #20
 800240a:	432b      	orrs	r3, r5
 800240c:	07e4      	lsls	r4, r4, #31
 800240e:	4323      	orrs	r3, r4
 8002410:	0030      	movs	r0, r6
 8002412:	0019      	movs	r1, r3
 8002414:	bd70      	pop	{r4, r5, r6, pc}
 8002416:	380b      	subs	r0, #11
 8002418:	4085      	lsls	r5, r0
 800241a:	032d      	lsls	r5, r5, #12
 800241c:	2600      	movs	r6, #0
 800241e:	0b2d      	lsrs	r5, r5, #12
 8002420:	e7f2      	b.n	8002408 <__aeabi_i2d+0x3c>
 8002422:	46c0      	nop			@ (mov r8, r8)
 8002424:	0000041e 	.word	0x0000041e

08002428 <__aeabi_ui2d>:
 8002428:	b510      	push	{r4, lr}
 800242a:	1e04      	subs	r4, r0, #0
 800242c:	d010      	beq.n	8002450 <__aeabi_ui2d+0x28>
 800242e:	f7fe f83b 	bl	80004a8 <__clzsi2>
 8002432:	4b0e      	ldr	r3, [pc, #56]	@ (800246c <__aeabi_ui2d+0x44>)
 8002434:	1a1b      	subs	r3, r3, r0
 8002436:	055b      	lsls	r3, r3, #21
 8002438:	0d5b      	lsrs	r3, r3, #21
 800243a:	280a      	cmp	r0, #10
 800243c:	dc0f      	bgt.n	800245e <__aeabi_ui2d+0x36>
 800243e:	220b      	movs	r2, #11
 8002440:	0021      	movs	r1, r4
 8002442:	1a12      	subs	r2, r2, r0
 8002444:	40d1      	lsrs	r1, r2
 8002446:	3015      	adds	r0, #21
 8002448:	030a      	lsls	r2, r1, #12
 800244a:	4084      	lsls	r4, r0
 800244c:	0b12      	lsrs	r2, r2, #12
 800244e:	e001      	b.n	8002454 <__aeabi_ui2d+0x2c>
 8002450:	2300      	movs	r3, #0
 8002452:	2200      	movs	r2, #0
 8002454:	051b      	lsls	r3, r3, #20
 8002456:	4313      	orrs	r3, r2
 8002458:	0020      	movs	r0, r4
 800245a:	0019      	movs	r1, r3
 800245c:	bd10      	pop	{r4, pc}
 800245e:	0022      	movs	r2, r4
 8002460:	380b      	subs	r0, #11
 8002462:	4082      	lsls	r2, r0
 8002464:	0312      	lsls	r2, r2, #12
 8002466:	2400      	movs	r4, #0
 8002468:	0b12      	lsrs	r2, r2, #12
 800246a:	e7f3      	b.n	8002454 <__aeabi_ui2d+0x2c>
 800246c:	0000041e 	.word	0x0000041e

08002470 <__clzdi2>:
 8002470:	b510      	push	{r4, lr}
 8002472:	2900      	cmp	r1, #0
 8002474:	d103      	bne.n	800247e <__clzdi2+0xe>
 8002476:	f7fe f817 	bl	80004a8 <__clzsi2>
 800247a:	3020      	adds	r0, #32
 800247c:	e002      	b.n	8002484 <__clzdi2+0x14>
 800247e:	0008      	movs	r0, r1
 8002480:	f7fe f812 	bl	80004a8 <__clzsi2>
 8002484:	bd10      	pop	{r4, pc}
 8002486:	46c0      	nop			@ (mov r8, r8)

08002488 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2201      	movs	r2, #1
 8002496:	4013      	ands	r3, r2
 8002498:	2b01      	cmp	r3, #1
 800249a:	d101      	bne.n	80024a0 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800249c:	2301      	movs	r3, #1
 800249e:	e000      	b.n	80024a2 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	0018      	movs	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	b002      	add	sp, #8
 80024a8:	bd80      	pop	{r7, pc}

080024aa <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2202      	movs	r2, #2
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d101      	bne.n	80024c2 <LL_SPI_IsActiveFlag_TXE+0x18>
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	0018      	movs	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b002      	add	sp, #8
 80024ca:	bd80      	pop	{r7, pc}

080024cc <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	330c      	adds	r3, #12
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	b2db      	uxtb	r3, r3
}
 80024dc:	0018      	movs	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	b002      	add	sp, #8
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	000a      	movs	r2, r1
 80024ee:	1cfb      	adds	r3, r7, #3
 80024f0:	701a      	strb	r2, [r3, #0]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	330c      	adds	r3, #12
 80024f6:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	1cfa      	adds	r2, r7, #3
 80024fc:	7812      	ldrb	r2, [r2, #0]
 80024fe:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8002500:	46c0      	nop			@ (mov r8, r8)
 8002502:	46bd      	mov	sp, r7
 8002504:	b004      	add	sp, #16
 8002506:	bd80      	pop	{r7, pc}

08002508 <spi_select_slave>:
 * @brief True if we've set the RTC from the cloud time
 */
// bool timeSet = false;

static inline void spi_select_slave(bool select)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	0002      	movs	r2, r0
 8002510:	1dfb      	adds	r3, r7, #7
 8002512:	701a      	strb	r2, [r3, #0]
    if (select)
 8002514:	1dfb      	adds	r3, r7, #7
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d004      	beq.n	8002526 <spi_select_slave+0x1e>
    {
        RTC_H();
 800251c:	4b06      	ldr	r3, [pc, #24]	@ (8002538 <spi_select_slave+0x30>)
 800251e:	2280      	movs	r2, #128	@ 0x80
 8002520:	01d2      	lsls	r2, r2, #7
 8002522:	619a      	str	r2, [r3, #24]
    }
    else
    {
        RTC_L();
    }
}
 8002524:	e003      	b.n	800252e <spi_select_slave+0x26>
        RTC_L();
 8002526:	4b04      	ldr	r3, [pc, #16]	@ (8002538 <spi_select_slave+0x30>)
 8002528:	2280      	movs	r2, #128	@ 0x80
 800252a:	05d2      	lsls	r2, r2, #23
 800252c:	619a      	str	r2, [r3, #24]
}
 800252e:	46c0      	nop			@ (mov r8, r8)
 8002530:	46bd      	mov	sp, r7
 8002532:	b002      	add	sp, #8
 8002534:	bd80      	pop	{r7, pc}
 8002536:	46c0      	nop			@ (mov r8, r8)
 8002538:	50000400 	.word	0x50000400

0800253c <resetConfig>:

    return (value & REG_OSC_STATUS_OMODE) != 0;
}

bool resetConfig(uint32_t flags)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
    printf("resetConfig(0x%08lx)\n", flags);
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	4b3f      	ldr	r3, [pc, #252]	@ (8002644 <resetConfig+0x108>)
 8002548:	0011      	movs	r1, r2
 800254a:	0018      	movs	r0, r3
 800254c:	f003 f8be 	bl	80056cc <printf_>

    // Reset configuration registers to default values
    write_rtc_register(REG_STATUS, REG_STATUS_DEFAULT);
 8002550:	230f      	movs	r3, #15
 8002552:	2200      	movs	r2, #0
 8002554:	0011      	movs	r1, r2
 8002556:	0018      	movs	r0, r3
 8002558:	f000 fc54 	bl	8002e04 <write_rtc_register>
    write_rtc_register(REG_CTRL_1, REG_CTRL_1_DEFAULT);
 800255c:	2310      	movs	r3, #16
 800255e:	2212      	movs	r2, #18
 8002560:	0011      	movs	r1, r2
 8002562:	0018      	movs	r0, r3
 8002564:	f000 fc4e 	bl	8002e04 <write_rtc_register>
    write_rtc_register(REG_CTRL_2, REG_CTRL_2_DEFAULT);
 8002568:	2311      	movs	r3, #17
 800256a:	223c      	movs	r2, #60	@ 0x3c
 800256c:	0011      	movs	r1, r2
 800256e:	0018      	movs	r0, r3
 8002570:	f000 fc48 	bl	8002e04 <write_rtc_register>
    write_rtc_register(REG_INT_MASK, REG_INT_MASK_DEFAULT);
 8002574:	2312      	movs	r3, #18
 8002576:	22e0      	movs	r2, #224	@ 0xe0
 8002578:	0011      	movs	r1, r2
 800257a:	0018      	movs	r0, r3
 800257c:	f000 fc42 	bl	8002e04 <write_rtc_register>
    write_rtc_register(REG_SQW, REG_SQW_DEFAULT);
 8002580:	2313      	movs	r3, #19
 8002582:	2226      	movs	r2, #38	@ 0x26
 8002584:	0011      	movs	r1, r2
 8002586:	0018      	movs	r0, r3
 8002588:	f000 fc3c 	bl	8002e04 <write_rtc_register>
    write_rtc_register(REG_SLEEP_CTRL, REG_SLEEP_CTRL_DEFAULT);
 800258c:	2317      	movs	r3, #23
 800258e:	2200      	movs	r2, #0
 8002590:	0011      	movs	r1, r2
 8002592:	0018      	movs	r0, r3
 8002594:	f000 fc36 	bl	8002e04 <write_rtc_register>

    if ((flags & RESET_PRESERVE_REPEATING_TIMER) != 0)
 8002598:	2201      	movs	r2, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4013      	ands	r3, r2
 800259e:	d010      	beq.n	80025c2 <resetConfig+0x86>
    {
        maskRegister(REG_TIMER_CTRL, ~REG_TIMER_CTRL_RPT_MASK, REG_TIMER_CTRL_DEFAULT & ~REG_TIMER_CTRL_RPT_MASK, false);
 80025a0:	2018      	movs	r0, #24
 80025a2:	231c      	movs	r3, #28
 80025a4:	43db      	mvns	r3, r3
 80025a6:	b2d9      	uxtb	r1, r3
 80025a8:	231c      	movs	r3, #28
 80025aa:	b25b      	sxtb	r3, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	b25b      	sxtb	r3, r3
 80025b0:	2223      	movs	r2, #35	@ 0x23
 80025b2:	b252      	sxtb	r2, r2
 80025b4:	4013      	ands	r3, r2
 80025b6:	b25b      	sxtb	r3, r3
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	2300      	movs	r3, #0
 80025bc:	f000 fa54 	bl	8002a68 <maskRegister>
 80025c0:	e005      	b.n	80025ce <resetConfig+0x92>
    }
    else
    {
        write_rtc_register(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
 80025c2:	2318      	movs	r3, #24
 80025c4:	2223      	movs	r2, #35	@ 0x23
 80025c6:	0011      	movs	r1, r2
 80025c8:	0018      	movs	r0, r3
 80025ca:	f000 fc1b 	bl	8002e04 <write_rtc_register>
    }

    write_rtc_register(REG_TIMER, REG_TIMER_DEFAULT);
 80025ce:	2319      	movs	r3, #25
 80025d0:	2200      	movs	r2, #0
 80025d2:	0011      	movs	r1, r2
 80025d4:	0018      	movs	r0, r3
 80025d6:	f000 fc15 	bl	8002e04 <write_rtc_register>
    write_rtc_register(REG_TIMER_INITIAL, REG_TIMER_INITIAL_DEFAULT);
 80025da:	231a      	movs	r3, #26
 80025dc:	2200      	movs	r2, #0
 80025de:	0011      	movs	r1, r2
 80025e0:	0018      	movs	r0, r3
 80025e2:	f000 fc0f 	bl	8002e04 <write_rtc_register>
    write_rtc_register(REG_WDT, REG_WDT_DEFAULT);
 80025e6:	231b      	movs	r3, #27
 80025e8:	2200      	movs	r2, #0
 80025ea:	0011      	movs	r1, r2
 80025ec:	0018      	movs	r0, r3
 80025ee:	f000 fc09 	bl	8002e04 <write_rtc_register>

    uint8_t oscCtrl = REG_OSC_CTRL_DEFAULT;
 80025f2:	200f      	movs	r0, #15
 80025f4:	183b      	adds	r3, r7, r0
 80025f6:	2200      	movs	r2, #0
 80025f8:	701a      	strb	r2, [r3, #0]
    if ((flags & RESET_DISABLE_XT) != 0)
 80025fa:	2202      	movs	r2, #2
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4013      	ands	r3, r2
 8002600:	d008      	beq.n	8002614 <resetConfig+0xd8>
    {
        // If disabling XT oscillator, set OSEL to 1 (RC oscillator)
        // Also enable FOS so if the XT oscillator fails, it will switch to RC (just in case)
        // and ACAL to 0 (however REG_OSC_CTRL_DEFAULT already sets ACAL to 0)
        oscCtrl |= REG_OSC_CTRL_OSEL | REG_OSC_CTRL_FOS;
 8002602:	2280      	movs	r2, #128	@ 0x80
 8002604:	2308      	movs	r3, #8
 8002606:	4313      	orrs	r3, r2
 8002608:	b2d9      	uxtb	r1, r3
 800260a:	183b      	adds	r3, r7, r0
 800260c:	183a      	adds	r2, r7, r0
 800260e:	7812      	ldrb	r2, [r2, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	701a      	strb	r2, [r3, #0]
    }
    // write_rtc_register(REG_OSC_CTRL, oscCtrl);
    // write_rtc_register(REG_TRICKLE, REG_TRICKLE_DEFAULT);
    write_rtc_register(REG_BREF_CTRL, REG_BREF_CTRL_DEFAULT);
 8002614:	2321      	movs	r3, #33	@ 0x21
 8002616:	22f0      	movs	r2, #240	@ 0xf0
 8002618:	0011      	movs	r1, r2
 800261a:	0018      	movs	r0, r3
 800261c:	f000 fbf2 	bl	8002e04 <write_rtc_register>
    write_rtc_register(REG_AFCTRL, REG_AFCTRL_DEFAULT);
 8002620:	2326      	movs	r3, #38	@ 0x26
 8002622:	2200      	movs	r2, #0
 8002624:	0011      	movs	r1, r2
 8002626:	0018      	movs	r0, r3
 8002628:	f000 fbec 	bl	8002e04 <write_rtc_register>
    // write_rtc_register(REG_BATMODE_IO, REG_BATMODE_IO_DEFAULT);
    write_rtc_register(REG_OCTRL, REG_OCTRL_DEFAULT);
 800262c:	2330      	movs	r3, #48	@ 0x30
 800262e:	2200      	movs	r2, #0
 8002630:	0011      	movs	r1, r2
 8002632:	0018      	movs	r0, r3
 8002634:	f000 fbe6 	bl	8002e04 <write_rtc_register>

    return true;
 8002638:	2301      	movs	r3, #1
}
 800263a:	0018      	movs	r0, r3
 800263c:	46bd      	mov	sp, r7
 800263e:	b004      	add	sp, #16
 8002640:	bd80      	pop	{r7, pc}
 8002642:	46c0      	nop			@ (mov r8, r8)
 8002644:	0800f644 	.word	0x0800f644

08002648 <setWDT>:

    return true;
}

bool setWDT(int seconds)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
    bool bResult = false;
 8002650:	230f      	movs	r3, #15
 8002652:	18fb      	adds	r3, r7, r3
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
    // printf("setWDT %d\n", seconds);

    if (seconds < 0)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	da02      	bge.n	8002664 <setWDT+0x1c>
    {
        seconds = watchdogSecs;
 800265e:	4b2d      	ldr	r3, [pc, #180]	@ (8002714 <setWDT+0xcc>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	607b      	str	r3, [r7, #4]
    }

    if (seconds == 0)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d112      	bne.n	8002690 <setWDT+0x48>
    {
        // Disable WDT
        bResult = write_rtc_register(REG_WDT, 0x00);
 800266a:	231b      	movs	r3, #27
 800266c:	2100      	movs	r1, #0
 800266e:	0018      	movs	r0, r3
 8002670:	f000 fbc8 	bl	8002e04 <write_rtc_register>
 8002674:	0003      	movs	r3, r0
 8002676:	001a      	movs	r2, r3
 8002678:	230f      	movs	r3, #15
 800267a:	18fb      	adds	r3, r7, r3
 800267c:	1e51      	subs	r1, r2, #1
 800267e:	418a      	sbcs	r2, r1
 8002680:	701a      	strb	r2, [r3, #0]

        watchdogSecs = 0;
 8002682:	4b24      	ldr	r3, [pc, #144]	@ (8002714 <setWDT+0xcc>)
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
        watchdogUpdatePeriod = 0;
 8002688:	4b23      	ldr	r3, [pc, #140]	@ (8002718 <setWDT+0xd0>)
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	e03a      	b.n	8002706 <setWDT+0xbe>
    }
    else
    {
        // Use 1/4 Hz clock
        int fourSecs = seconds / 4;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	da00      	bge.n	8002698 <setWDT+0x50>
 8002696:	3303      	adds	r3, #3
 8002698:	109b      	asrs	r3, r3, #2
 800269a:	60bb      	str	r3, [r7, #8]
        if (fourSecs < 1)
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	dc01      	bgt.n	80026a6 <setWDT+0x5e>
        {
            fourSecs = 1;
 80026a2:	2301      	movs	r3, #1
 80026a4:	60bb      	str	r3, [r7, #8]
        }
        if (fourSecs > 31)
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2b1f      	cmp	r3, #31
 80026aa:	dd01      	ble.n	80026b0 <setWDT+0x68>
        {
            fourSecs = 31;
 80026ac:	231f      	movs	r3, #31
 80026ae:	60bb      	str	r3, [r7, #8]
        }
        bResult = write_rtc_register(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
 80026b0:	201b      	movs	r0, #27
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	b25a      	sxtb	r2, r3
 80026b8:	2380      	movs	r3, #128	@ 0x80
 80026ba:	b25b      	sxtb	r3, r3
 80026bc:	4313      	orrs	r3, r2
 80026be:	b25a      	sxtb	r2, r3
 80026c0:	2303      	movs	r3, #3
 80026c2:	b25b      	sxtb	r3, r3
 80026c4:	4313      	orrs	r3, r2
 80026c6:	b25b      	sxtb	r3, r3
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	0019      	movs	r1, r3
 80026cc:	f000 fb9a 	bl	8002e04 <write_rtc_register>
 80026d0:	0003      	movs	r3, r0
 80026d2:	001a      	movs	r2, r3
 80026d4:	200f      	movs	r0, #15
 80026d6:	183b      	adds	r3, r7, r0
 80026d8:	1e51      	subs	r1, r2, #1
 80026da:	418a      	sbcs	r2, r1
 80026dc:	701a      	strb	r2, [r3, #0]

        printf("watchdog set fourSecs=%d bResult=%d\n", fourSecs, bResult);
 80026de:	183b      	adds	r3, r7, r0
 80026e0:	781a      	ldrb	r2, [r3, #0]
 80026e2:	68b9      	ldr	r1, [r7, #8]
 80026e4:	4b0d      	ldr	r3, [pc, #52]	@ (800271c <setWDT+0xd4>)
 80026e6:	0018      	movs	r0, r3
 80026e8:	f002 fff0 	bl	80056cc <printf_>

        watchdogSecs = seconds;
 80026ec:	4b09      	ldr	r3, [pc, #36]	@ (8002714 <setWDT+0xcc>)
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	601a      	str	r2, [r3, #0]

        // Update watchdog half way through period
        watchdogUpdatePeriod = (fourSecs * 2000);
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	0013      	movs	r3, r2
 80026f6:	015b      	lsls	r3, r3, #5
 80026f8:	1a9b      	subs	r3, r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	189b      	adds	r3, r3, r2
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	001a      	movs	r2, r3
 8002702:	4b05      	ldr	r3, [pc, #20]	@ (8002718 <setWDT+0xd0>)
 8002704:	601a      	str	r2, [r3, #0]
    }

    return bResult;
 8002706:	230f      	movs	r3, #15
 8002708:	18fb      	adds	r3, r7, r3
 800270a:	781b      	ldrb	r3, [r3, #0]
}
 800270c:	0018      	movs	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	b004      	add	sp, #16
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20000354 	.word	0x20000354
 8002718:	20000358 	.word	0x20000358
 800271c:	0800f6a4 	.word	0x0800f6a4

08002720 <deepPowerDown>:

    return true;
}

bool deepPowerDown(int seconds)
{
 8002720:	b5b0      	push	{r4, r5, r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
    const char *errorMsg = "failure in deepPowerDown %d\n";
 8002728:	4b6e      	ldr	r3, [pc, #440]	@ (80028e4 <deepPowerDown+0x1c4>)
 800272a:	617b      	str	r3, [r7, #20]
    bool bResult;

    printf("deepPowerDown %d\n", seconds);
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	4b6e      	ldr	r3, [pc, #440]	@ (80028e8 <deepPowerDown+0x1c8>)
 8002730:	0011      	movs	r1, r2
 8002732:	0018      	movs	r0, r3
 8002734:	f002 ffca 	bl	80056cc <printf_>

    // Disable watchdog
    bResult = setWDT(0);
 8002738:	2513      	movs	r5, #19
 800273a:	197c      	adds	r4, r7, r5
 800273c:	2000      	movs	r0, #0
 800273e:	f7ff ff83 	bl	8002648 <setWDT>
 8002742:	0003      	movs	r3, r0
 8002744:	7023      	strb	r3, [r4, #0]
    if (!bResult)
 8002746:	197b      	adds	r3, r7, r5
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2201      	movs	r2, #1
 800274c:	4053      	eors	r3, r2
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	d009      	beq.n	8002768 <deepPowerDown+0x48>
    {
        printf(errorMsg, __LINE__);
 8002754:	2346      	movs	r3, #70	@ 0x46
 8002756:	33ff      	adds	r3, #255	@ 0xff
 8002758:	001a      	movs	r2, r3
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	0011      	movs	r1, r2
 800275e:	0018      	movs	r0, r3
 8002760:	f002 ffb4 	bl	80056cc <printf_>
        return false;
 8002764:	2300      	movs	r3, #0
 8002766:	e0b8      	b.n	80028da <deepPowerDown+0x1ba>
    }

    bResult = setCountdownTimer(seconds, false);
 8002768:	2513      	movs	r5, #19
 800276a:	197c      	adds	r4, r7, r5
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2100      	movs	r1, #0
 8002770:	0018      	movs	r0, r3
 8002772:	f000 f8bf 	bl	80028f4 <setCountdownTimer>
 8002776:	0003      	movs	r3, r0
 8002778:	7023      	strb	r3, [r4, #0]
    if (!bResult)
 800277a:	197b      	adds	r3, r7, r5
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2201      	movs	r2, #1
 8002780:	4053      	eors	r3, r2
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d008      	beq.n	800279a <deepPowerDown+0x7a>
    {
        printf(errorMsg, __LINE__);
 8002788:	23a6      	movs	r3, #166	@ 0xa6
 800278a:	005a      	lsls	r2, r3, #1
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	0011      	movs	r1, r2
 8002790:	0018      	movs	r0, r3
 8002792:	f002 ff9b 	bl	80056cc <printf_>
        return false;
 8002796:	2300      	movs	r3, #0
 8002798:	e09f      	b.n	80028da <deepPowerDown+0x1ba>
    }

    // Make sure STOP (stop clocking system is 0, otherwise sleep mode cannot be entered)
    // PWR2 = 1 (low resistance power switch)
    // (also would probably work with PWR2 = 0, as nIRQ2 should be high-true for sleep mode)
    bResult = maskRegister(REG_CTRL_1, (uint8_t) ~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2, 0);
 800279a:	2010      	movs	r0, #16
 800279c:	2280      	movs	r2, #128	@ 0x80
 800279e:	2308      	movs	r3, #8
 80027a0:	4313      	orrs	r3, r2
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	b2d9      	uxtb	r1, r3
 80027a8:	2202      	movs	r2, #2
 80027aa:	2513      	movs	r5, #19
 80027ac:	197c      	adds	r4, r7, r5
 80027ae:	2300      	movs	r3, #0
 80027b0:	f000 f95a 	bl	8002a68 <maskRegister>
 80027b4:	0003      	movs	r3, r0
 80027b6:	7023      	strb	r3, [r4, #0]
    if (!bResult)
 80027b8:	197b      	adds	r3, r7, r5
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2201      	movs	r2, #1
 80027be:	4053      	eors	r3, r2
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d008      	beq.n	80027d8 <deepPowerDown+0xb8>
    {
        printf(errorMsg, __LINE__);
 80027c6:	23ab      	movs	r3, #171	@ 0xab
 80027c8:	005a      	lsls	r2, r3, #1
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	0011      	movs	r1, r2
 80027ce:	0018      	movs	r0, r3
 80027d0:	f002 ff7c 	bl	80056cc <printf_>
        return false;
 80027d4:	2300      	movs	r3, #0
 80027d6:	e080      	b.n	80028da <deepPowerDown+0x1ba>
    }

    // Disable the I/O interface in sleep
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT, 0);
 80027d8:	231c      	movs	r3, #28
 80027da:	2104      	movs	r1, #4
 80027dc:	2513      	movs	r5, #19
 80027de:	197c      	adds	r4, r7, r5
 80027e0:	2200      	movs	r2, #0
 80027e2:	0018      	movs	r0, r3
 80027e4:	f000 f9a0 	bl	8002b28 <setRegisterBit>
 80027e8:	0003      	movs	r3, r0
 80027ea:	7023      	strb	r3, [r4, #0]
    if (!bResult)
 80027ec:	197b      	adds	r3, r7, r5
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2201      	movs	r2, #1
 80027f2:	4053      	eors	r3, r2
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d008      	beq.n	800280c <deepPowerDown+0xec>
    {
        printf(errorMsg, __LINE__);
 80027fa:	23af      	movs	r3, #175	@ 0xaf
 80027fc:	005a      	lsls	r2, r3, #1
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	0011      	movs	r1, r2
 8002802:	0018      	movs	r0, r3
 8002804:	f002 ff62 	bl	80056cc <printf_>
        return false;
 8002808:	2300      	movs	r3, #0
 800280a:	e066      	b.n	80028da <deepPowerDown+0x1ba>
    }

    // OUT2S = 6 to enable sleep mode
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP, 0);
 800280c:	2011      	movs	r0, #17
 800280e:	231c      	movs	r3, #28
 8002810:	43db      	mvns	r3, r3
 8002812:	b2d9      	uxtb	r1, r3
 8002814:	2218      	movs	r2, #24
 8002816:	2513      	movs	r5, #19
 8002818:	197c      	adds	r4, r7, r5
 800281a:	2300      	movs	r3, #0
 800281c:	f000 f924 	bl	8002a68 <maskRegister>
 8002820:	0003      	movs	r3, r0
 8002822:	7023      	strb	r3, [r4, #0]
    if (!bResult)
 8002824:	197b      	adds	r3, r7, r5
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2201      	movs	r2, #1
 800282a:	4053      	eors	r3, r2
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d008      	beq.n	8002844 <deepPowerDown+0x124>
    {
        printf(errorMsg, __LINE__);
 8002832:	23b3      	movs	r3, #179	@ 0xb3
 8002834:	005a      	lsls	r2, r3, #1
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	0011      	movs	r1, r2
 800283a:	0018      	movs	r0, r3
 800283c:	f002 ff46 	bl	80056cc <printf_>
        return false;
 8002840:	2300      	movs	r3, #0
 8002842:	e04a      	b.n	80028da <deepPowerDown+0x1ba>
    }
//    hex_dump();
    HAL_Delay(1);
 8002844:	2001      	movs	r0, #1
 8002846:	f003 fb0d 	bl	8005e64 <HAL_Delay>
    // Enter sleep mode
    bResult = write_rtc_register(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES); // REG_SLEEP_CTRL_SLP | 0x01
 800284a:	2017      	movs	r0, #23
 800284c:	2280      	movs	r2, #128	@ 0x80
 800284e:	2340      	movs	r3, #64	@ 0x40
 8002850:	4313      	orrs	r3, r2
 8002852:	b2db      	uxtb	r3, r3
 8002854:	0019      	movs	r1, r3
 8002856:	f000 fad5 	bl	8002e04 <write_rtc_register>
 800285a:	0003      	movs	r3, r0
 800285c:	001a      	movs	r2, r3
 800285e:	2013      	movs	r0, #19
 8002860:	183b      	adds	r3, r7, r0
 8002862:	1e51      	subs	r1, r2, #1
 8002864:	418a      	sbcs	r2, r1
 8002866:	701a      	strb	r2, [r3, #0]
    if (!bResult)
 8002868:	183b      	adds	r3, r7, r0
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2201      	movs	r2, #1
 800286e:	4053      	eors	r3, r2
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d009      	beq.n	800288a <deepPowerDown+0x16a>
    {
        printf(errorMsg, __LINE__);
 8002876:	2370      	movs	r3, #112	@ 0x70
 8002878:	33ff      	adds	r3, #255	@ 0xff
 800287a:	001a      	movs	r2, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	0011      	movs	r1, r2
 8002880:	0018      	movs	r0, r3
 8002882:	f002 ff23 	bl	80056cc <printf_>
        return false;
 8002886:	2300      	movs	r3, #0
 8002888:	e027      	b.n	80028da <deepPowerDown+0x1ba>
    }
    // bResult = write_rtc_register(REG_TIMER_CTRL, 0xc2); // enable
    // _log.trace("delay in case we didn't power down");
    uint32_t start = HAL_GetTick();
 800288a:	f003 fae1 	bl	8005e50 <HAL_GetTick>
 800288e:	0003      	movs	r3, r0
 8002890:	60fb      	str	r3, [r7, #12]
    while ((HAL_GetTick() - start) < (uint32_t)(seconds * 1000))
 8002892:	e00f      	b.n	80028b4 <deepPowerDown+0x194>
    {
        printf("REG_SLEEP_CTRL=0x%2x\n", read_rtc_register(REG_SLEEP_CTRL));
 8002894:	2317      	movs	r3, #23
 8002896:	0018      	movs	r0, r3
 8002898:	f000 fa82 	bl	8002da0 <read_rtc_register>
 800289c:	0003      	movs	r3, r0
 800289e:	001a      	movs	r2, r3
 80028a0:	4b12      	ldr	r3, [pc, #72]	@ (80028ec <deepPowerDown+0x1cc>)
 80028a2:	0011      	movs	r1, r2
 80028a4:	0018      	movs	r0, r3
 80028a6:	f002 ff11 	bl	80056cc <printf_>
        HAL_Delay(1000);
 80028aa:	23fa      	movs	r3, #250	@ 0xfa
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	0018      	movs	r0, r3
 80028b0:	f003 fad8 	bl	8005e64 <HAL_Delay>
    while ((HAL_GetTick() - start) < (uint32_t)(seconds * 1000))
 80028b4:	f003 facc 	bl	8005e50 <HAL_GetTick>
 80028b8:	0002      	movs	r2, r0
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1ad1      	subs	r1, r2, r3
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	0013      	movs	r3, r2
 80028c2:	015b      	lsls	r3, r3, #5
 80028c4:	1a9b      	subs	r3, r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	189b      	adds	r3, r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	4299      	cmp	r1, r3
 80028ce:	d3e1      	bcc.n	8002894 <deepPowerDown+0x174>
    }

    printf("didn't power down\n");
 80028d0:	4b07      	ldr	r3, [pc, #28]	@ (80028f0 <deepPowerDown+0x1d0>)
 80028d2:	0018      	movs	r0, r3
 80028d4:	f002 fefa 	bl	80056cc <printf_>

    return true;
 80028d8:	2301      	movs	r3, #1
}
 80028da:	0018      	movs	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	b006      	add	sp, #24
 80028e0:	bdb0      	pop	{r4, r5, r7, pc}
 80028e2:	46c0      	nop			@ (mov r8, r8)
 80028e4:	0800f71c 	.word	0x0800f71c
 80028e8:	0800f73c 	.word	0x0800f73c
 80028ec:	0800f750 	.word	0x0800f750
 80028f0:	0800f768 	.word	0x0800f768

080028f4 <setCountdownTimer>:

bool setCountdownTimer(int value, bool minutes)
{
 80028f4:	b5b0      	push	{r4, r5, r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	000a      	movs	r2, r1
 80028fe:	1cfb      	adds	r3, r7, #3
 8002900:	701a      	strb	r2, [r3, #0]
    const char *errorMsg = "failure in setCountdownTimer %d\n";
 8002902:	4b58      	ldr	r3, [pc, #352]	@ (8002a64 <setCountdownTimer+0x170>)
 8002904:	60fb      	str	r3, [r7, #12]
    bool bResult;

    // Clear any pending interrupts
    bResult = write_rtc_register(REG_STATUS, REG_STATUS_DEFAULT);
 8002906:	230f      	movs	r3, #15
 8002908:	2200      	movs	r2, #0
 800290a:	0011      	movs	r1, r2
 800290c:	0018      	movs	r0, r3
 800290e:	f000 fa79 	bl	8002e04 <write_rtc_register>
 8002912:	0003      	movs	r3, r0
 8002914:	001a      	movs	r2, r3
 8002916:	200b      	movs	r0, #11
 8002918:	183b      	adds	r3, r7, r0
 800291a:	1e51      	subs	r1, r2, #1
 800291c:	418a      	sbcs	r2, r1
 800291e:	701a      	strb	r2, [r3, #0]
    if (!bResult)
 8002920:	183b      	adds	r3, r7, r0
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2201      	movs	r2, #1
 8002926:	4053      	eors	r3, r2
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d009      	beq.n	8002942 <setCountdownTimer+0x4e>
    {
        printf(errorMsg, __LINE__);
 800292e:	238a      	movs	r3, #138	@ 0x8a
 8002930:	33ff      	adds	r3, #255	@ 0xff
 8002932:	001a      	movs	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	0011      	movs	r1, r2
 8002938:	0018      	movs	r0, r3
 800293a:	f002 fec7 	bl	80056cc <printf_>
        return false;
 800293e:	2300      	movs	r3, #0
 8002940:	e08c      	b.n	8002a5c <setCountdownTimer+0x168>
    }

    // Stop countdown timer if already running since it can't be set while running
    bResult = write_rtc_register(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
 8002942:	2318      	movs	r3, #24
 8002944:	2223      	movs	r2, #35	@ 0x23
 8002946:	0011      	movs	r1, r2
 8002948:	0018      	movs	r0, r3
 800294a:	f000 fa5b 	bl	8002e04 <write_rtc_register>
 800294e:	0003      	movs	r3, r0
 8002950:	001a      	movs	r2, r3
 8002952:	200b      	movs	r0, #11
 8002954:	183b      	adds	r3, r7, r0
 8002956:	1e51      	subs	r1, r2, #1
 8002958:	418a      	sbcs	r2, r1
 800295a:	701a      	strb	r2, [r3, #0]
    if (!bResult)
 800295c:	183b      	adds	r3, r7, r0
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2201      	movs	r2, #1
 8002962:	4053      	eors	r3, r2
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d009      	beq.n	800297e <setCountdownTimer+0x8a>
    {
        printf(errorMsg, __LINE__);
 800296a:	2392      	movs	r3, #146	@ 0x92
 800296c:	33ff      	adds	r3, #255	@ 0xff
 800296e:	001a      	movs	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	0011      	movs	r1, r2
 8002974:	0018      	movs	r0, r3
 8002976:	f002 fea9 	bl	80056cc <printf_>
        return false;
 800297a:	2300      	movs	r3, #0
 800297c:	e06e      	b.n	8002a5c <setCountdownTimer+0x168>
    }

    // Set countdown timer duration
    if (value < 1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	dc01      	bgt.n	8002988 <setCountdownTimer+0x94>
    {
        value = 1;
 8002984:	2301      	movs	r3, #1
 8002986:	607b      	str	r3, [r7, #4]
    }
    if (value > 255)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2bff      	cmp	r3, #255	@ 0xff
 800298c:	dd01      	ble.n	8002992 <setCountdownTimer+0x9e>
    {
        value = 255;
 800298e:	23ff      	movs	r3, #255	@ 0xff
 8002990:	607b      	str	r3, [r7, #4]
    }
    bResult = write_rtc_register(REG_TIMER, (uint8_t)value);
 8002992:	2219      	movs	r2, #25
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	b2db      	uxtb	r3, r3
 8002998:	0019      	movs	r1, r3
 800299a:	0010      	movs	r0, r2
 800299c:	f000 fa32 	bl	8002e04 <write_rtc_register>
 80029a0:	0003      	movs	r3, r0
 80029a2:	001a      	movs	r2, r3
 80029a4:	200b      	movs	r0, #11
 80029a6:	183b      	adds	r3, r7, r0
 80029a8:	1e51      	subs	r1, r2, #1
 80029aa:	418a      	sbcs	r2, r1
 80029ac:	701a      	strb	r2, [r3, #0]
    if (!bResult)
 80029ae:	183b      	adds	r3, r7, r0
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2201      	movs	r2, #1
 80029b4:	4053      	eors	r3, r2
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d009      	beq.n	80029d0 <setCountdownTimer+0xdc>
    {
        printf(errorMsg, __LINE__);
 80029bc:	23a2      	movs	r3, #162	@ 0xa2
 80029be:	33ff      	adds	r3, #255	@ 0xff
 80029c0:	001a      	movs	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	0011      	movs	r1, r2
 80029c6:	0018      	movs	r0, r3
 80029c8:	f002 fe80 	bl	80056cc <printf_>
        return false;
 80029cc:	2300      	movs	r3, #0
 80029ce:	e045      	b.n	8002a5c <setCountdownTimer+0x168>
    }

    // Enable countdown timer interrupt (TIE = 1) in IntMask
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE, 0);
 80029d0:	2312      	movs	r3, #18
 80029d2:	2108      	movs	r1, #8
 80029d4:	250b      	movs	r5, #11
 80029d6:	197c      	adds	r4, r7, r5
 80029d8:	2200      	movs	r2, #0
 80029da:	0018      	movs	r0, r3
 80029dc:	f000 f8a4 	bl	8002b28 <setRegisterBit>
 80029e0:	0003      	movs	r3, r0
 80029e2:	7023      	strb	r3, [r4, #0]
    if (!bResult)
 80029e4:	197b      	adds	r3, r7, r5
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2201      	movs	r2, #1
 80029ea:	4053      	eors	r3, r2
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d009      	beq.n	8002a06 <setCountdownTimer+0x112>
    {
        printf(errorMsg, __LINE__);
 80029f2:	23aa      	movs	r3, #170	@ 0xaa
 80029f4:	33ff      	adds	r3, #255	@ 0xff
 80029f6:	001a      	movs	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	0011      	movs	r1, r2
 80029fc:	0018      	movs	r0, r3
 80029fe:	f002 fe65 	bl	80056cc <printf_>
        return false;
 8002a02:	2300      	movs	r3, #0
 8002a04:	e02a      	b.n	8002a5c <setCountdownTimer+0x168>
    }

    // Set the TFS frequency to 1/60 Hz for minutes or 1 Hz for seconds
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
 8002a06:	1cfb      	adds	r3, r7, #3
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <setCountdownTimer+0x11e>
 8002a0e:	2203      	movs	r2, #3
 8002a10:	e000      	b.n	8002a14 <setCountdownTimer+0x120>
 8002a12:	2202      	movs	r2, #2
 8002a14:	210a      	movs	r1, #10
 8002a16:	187b      	adds	r3, r7, r1
 8002a18:	701a      	strb	r2, [r3, #0]

    // Enable countdown timer (TE = 1) in countdown timer control register
    bResult = write_rtc_register(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
 8002a1a:	2018      	movs	r0, #24
 8002a1c:	2280      	movs	r2, #128	@ 0x80
 8002a1e:	187b      	adds	r3, r7, r1
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	0019      	movs	r1, r3
 8002a28:	f000 f9ec 	bl	8002e04 <write_rtc_register>
 8002a2c:	0003      	movs	r3, r0
 8002a2e:	001a      	movs	r2, r3
 8002a30:	200b      	movs	r0, #11
 8002a32:	183b      	adds	r3, r7, r0
 8002a34:	1e51      	subs	r1, r2, #1
 8002a36:	418a      	sbcs	r2, r1
 8002a38:	701a      	strb	r2, [r3, #0]
    // bResult = write_rtc_register(REG_TIMER_CTRL, 0x42); // 0xc2

    if (!bResult)
 8002a3a:	183b      	adds	r3, r7, r0
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	4053      	eors	r3, r2
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d008      	beq.n	8002a5a <setCountdownTimer+0x166>
    {
        printf(errorMsg, __LINE__);
 8002a48:	23db      	movs	r3, #219	@ 0xdb
 8002a4a:	005a      	lsls	r2, r3, #1
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	0011      	movs	r1, r2
 8002a50:	0018      	movs	r0, r3
 8002a52:	f002 fe3b 	bl	80056cc <printf_>
        return false;
 8002a56:	2300      	movs	r3, #0
 8002a58:	e000      	b.n	8002a5c <setCountdownTimer+0x168>
    }

    return true;
 8002a5a:	2301      	movs	r3, #1
}
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	b004      	add	sp, #16
 8002a62:	bdb0      	pop	{r4, r5, r7, pc}
 8002a64:	0800f77c 	.word	0x0800f77c

08002a68 <maskRegister>:

bool maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock)
{
 8002a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	0005      	movs	r5, r0
 8002a70:	000c      	movs	r4, r1
 8002a72:	0010      	movs	r0, r2
 8002a74:	0019      	movs	r1, r3
 8002a76:	1dfb      	adds	r3, r7, #7
 8002a78:	1c2a      	adds	r2, r5, #0
 8002a7a:	701a      	strb	r2, [r3, #0]
 8002a7c:	1dbb      	adds	r3, r7, #6
 8002a7e:	1c22      	adds	r2, r4, #0
 8002a80:	701a      	strb	r2, [r3, #0]
 8002a82:	1d7b      	adds	r3, r7, #5
 8002a84:	1c02      	adds	r2, r0, #0
 8002a86:	701a      	strb	r2, [r3, #0]
 8002a88:	1d3b      	adds	r3, r7, #4
 8002a8a:	1c0a      	adds	r2, r1, #0
 8002a8c:	701a      	strb	r2, [r3, #0]
    bool bResult = false;
 8002a8e:	250f      	movs	r5, #15
 8002a90:	197b      	adds	r3, r7, r5
 8002a92:	2200      	movs	r2, #0
 8002a94:	701a      	strb	r2, [r3, #0]

    uint8_t value;

    value = read_rtc_register(regAddr);
 8002a96:	260e      	movs	r6, #14
 8002a98:	19bc      	adds	r4, r7, r6
 8002a9a:	1dfb      	adds	r3, r7, #7
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f000 f97e 	bl	8002da0 <read_rtc_register>
 8002aa4:	0003      	movs	r3, r0
 8002aa6:	7023      	strb	r3, [r4, #0]

    uint8_t newValue = (value & andValue) | orValue;
 8002aa8:	19bb      	adds	r3, r7, r6
 8002aaa:	1dba      	adds	r2, r7, #6
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	7812      	ldrb	r2, [r2, #0]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	b2d9      	uxtb	r1, r3
 8002ab4:	200d      	movs	r0, #13
 8002ab6:	183b      	adds	r3, r7, r0
 8002ab8:	1d7a      	adds	r2, r7, #5
 8002aba:	7812      	ldrb	r2, [r2, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	701a      	strb	r2, [r3, #0]

    bResult = write_rtc_register(regAddr, newValue);
 8002ac0:	183b      	adds	r3, r7, r0
 8002ac2:	781a      	ldrb	r2, [r3, #0]
 8002ac4:	1dfb      	adds	r3, r7, #7
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	0011      	movs	r1, r2
 8002aca:	0018      	movs	r0, r3
 8002acc:	f000 f99a 	bl	8002e04 <write_rtc_register>
 8002ad0:	0003      	movs	r3, r0
 8002ad2:	001a      	movs	r2, r3
 8002ad4:	197b      	adds	r3, r7, r5
 8002ad6:	1e51      	subs	r1, r2, #1
 8002ad8:	418a      	sbcs	r2, r1
 8002ada:	701a      	strb	r2, [r3, #0]

    return bResult;
 8002adc:	197b      	adds	r3, r7, r5
 8002ade:	781b      	ldrb	r3, [r3, #0]
}
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b005      	add	sp, #20
 8002ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ae8 <clearRegisterBit>:

    return bResult && ((value & bitMask) != 0);
}

bool clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock)
{
 8002ae8:	b590      	push	{r4, r7, lr}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	0004      	movs	r4, r0
 8002af0:	0008      	movs	r0, r1
 8002af2:	0011      	movs	r1, r2
 8002af4:	1dfb      	adds	r3, r7, #7
 8002af6:	1c22      	adds	r2, r4, #0
 8002af8:	701a      	strb	r2, [r3, #0]
 8002afa:	1dbb      	adds	r3, r7, #6
 8002afc:	1c02      	adds	r2, r0, #0
 8002afe:	701a      	strb	r2, [r3, #0]
 8002b00:	1d7b      	adds	r3, r7, #5
 8002b02:	1c0a      	adds	r2, r1, #0
 8002b04:	701a      	strb	r2, [r3, #0]
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
 8002b06:	1dbb      	adds	r3, r7, #6
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	b2d9      	uxtb	r1, r3
 8002b0e:	1d7b      	adds	r3, r7, #5
 8002b10:	781a      	ldrb	r2, [r3, #0]
 8002b12:	1dfb      	adds	r3, r7, #7
 8002b14:	7818      	ldrb	r0, [r3, #0]
 8002b16:	0013      	movs	r3, r2
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f7ff ffa5 	bl	8002a68 <maskRegister>
 8002b1e:	0003      	movs	r3, r0
}
 8002b20:	0018      	movs	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b003      	add	sp, #12
 8002b26:	bd90      	pop	{r4, r7, pc}

08002b28 <setRegisterBit>:

bool setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock)
{
 8002b28:	b590      	push	{r4, r7, lr}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	0004      	movs	r4, r0
 8002b30:	0008      	movs	r0, r1
 8002b32:	0011      	movs	r1, r2
 8002b34:	1dfb      	adds	r3, r7, #7
 8002b36:	1c22      	adds	r2, r4, #0
 8002b38:	701a      	strb	r2, [r3, #0]
 8002b3a:	1dbb      	adds	r3, r7, #6
 8002b3c:	1c02      	adds	r2, r0, #0
 8002b3e:	701a      	strb	r2, [r3, #0]
 8002b40:	1d7b      	adds	r3, r7, #5
 8002b42:	1c0a      	adds	r2, r1, #0
 8002b44:	701a      	strb	r2, [r3, #0]
    return maskRegister(regAddr, 0xff, bitMask, lock);
 8002b46:	1d7b      	adds	r3, r7, #5
 8002b48:	7819      	ldrb	r1, [r3, #0]
 8002b4a:	1dbb      	adds	r3, r7, #6
 8002b4c:	781a      	ldrb	r2, [r3, #0]
 8002b4e:	1dfb      	adds	r3, r7, #7
 8002b50:	7818      	ldrb	r0, [r3, #0]
 8002b52:	000b      	movs	r3, r1
 8002b54:	21ff      	movs	r1, #255	@ 0xff
 8002b56:	f7ff ff87 	bl	8002a68 <maskRegister>
 8002b5a:	0003      	movs	r3, r0
}
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	b003      	add	sp, #12
 8002b62:	bd90      	pop	{r4, r7, pc}

08002b64 <readRam>:
    }
    return bResult;
}

bool readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock)
{
 8002b64:	b5b0      	push	{r4, r5, r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	001a      	movs	r2, r3
 8002b72:	1cfb      	adds	r3, r7, #3
 8002b74:	701a      	strb	r2, [r3, #0]
    bool bResult = true;
 8002b76:	231f      	movs	r3, #31
 8002b78:	18fb      	adds	r3, r7, r3
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	701a      	strb	r2, [r3, #0]

    uint32_t primask_bit = utils_enter_critical_section();
 8002b7e:	f000 f9e7 	bl	8002f50 <utils_enter_critical_section>
 8002b82:	0003      	movs	r3, r0
 8002b84:	617b      	str	r3, [r7, #20]

    while (dataLen > 0)
 8002b86:	e047      	b.n	8002c18 <readRam+0xb4>
    {
        size_t count = dataLen;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	61bb      	str	r3, [r7, #24]
        if (count > 32)
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	2b20      	cmp	r3, #32
 8002b90:	d901      	bls.n	8002b96 <readRam+0x32>
        {
            // Too large for a single I2C operation
            count = 32;
 8002b92:	2320      	movs	r3, #32
 8002b94:	61bb      	str	r3, [r7, #24]
        }
        if ((ramAddr < 128) && ((ramAddr + count) > 128))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b9a:	d808      	bhi.n	8002bae <readRam+0x4a>
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	18d3      	adds	r3, r2, r3
 8002ba2:	2b80      	cmp	r3, #128	@ 0x80
 8002ba4:	d903      	bls.n	8002bae <readRam+0x4a>
        {
            // Crossing a page boundary
            count = 128 - ramAddr;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2280      	movs	r2, #128	@ 0x80
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	61bb      	str	r3, [r7, #24]
        }
        if (ramAddr < 128)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2b7f      	cmp	r3, #127	@ 0x7f
 8002bb2:	d806      	bhi.n	8002bc2 <readRam+0x5e>
        {
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA, 0);
 8002bb4:	233f      	movs	r3, #63	@ 0x3f
 8002bb6:	2104      	movs	r1, #4
 8002bb8:	2200      	movs	r2, #0
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f7ff ff94 	bl	8002ae8 <clearRegisterBit>
 8002bc0:	e005      	b.n	8002bce <readRam+0x6a>
        }
        else
        {
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA, 0);
 8002bc2:	233f      	movs	r3, #63	@ 0x3f
 8002bc4:	2104      	movs	r1, #4
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f7ff ffad 	bl	8002b28 <setRegisterBit>
        }

        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count); // !!!!!!!!!
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	227f      	movs	r2, #127	@ 0x7f
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2280      	movs	r2, #128	@ 0x80
 8002bda:	189b      	adds	r3, r3, r2
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	251f      	movs	r5, #31
 8002be4:	197c      	adds	r4, r7, r5
 8002be6:	68b9      	ldr	r1, [r7, #8]
 8002be8:	0018      	movs	r0, r3
 8002bea:	f000 f9cf 	bl	8002f8c <readRegisters>
 8002bee:	0003      	movs	r3, r0
 8002bf0:	7023      	strb	r3, [r4, #0]
        if (!bResult)
 8002bf2:	197b      	adds	r3, r7, r5
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	4053      	eors	r3, r2
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10f      	bne.n	8002c20 <readRam+0xbc>
        {
            break;
        }
        ramAddr += count;
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	18d3      	adds	r3, r2, r3
 8002c06:	60fb      	str	r3, [r7, #12]
        dataLen -= count;
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	607b      	str	r3, [r7, #4]
        data += count;
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	18d3      	adds	r3, r2, r3
 8002c16:	60bb      	str	r3, [r7, #8]
    while (dataLen > 0)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1b4      	bne.n	8002b88 <readRam+0x24>
 8002c1e:	e000      	b.n	8002c22 <readRam+0xbe>
            break;
 8002c20:	46c0      	nop			@ (mov r8, r8)
    }

    utils_exit_critical_section(primask_bit);
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	0018      	movs	r0, r3
 8002c26:	f000 f9a2 	bl	8002f6e <utils_exit_critical_section>

    return bResult;
 8002c2a:	231f      	movs	r3, #31
 8002c2c:	18fb      	adds	r3, r7, r3
 8002c2e:	781b      	ldrb	r3, [r3, #0]
}
 8002c30:	0018      	movs	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	b008      	add	sp, #32
 8002c36:	bdb0      	pop	{r4, r5, r7, pc}

08002c38 <writeRam>:
 * @param data The buffer containing the data to write
 * @param dataLen The number of bytes to write
 * The dataLen can be larger than the maximum I2C write. Multiple writes will be done if necessary.
 */
bool writeRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) // The initial values of the RAM locations are undefined.
{
 8002c38:	b5b0      	push	{r4, r5, r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
 8002c44:	001a      	movs	r2, r3
 8002c46:	1cfb      	adds	r3, r7, #3
 8002c48:	701a      	strb	r2, [r3, #0]
    bool bResult = true;
 8002c4a:	2317      	movs	r3, #23
 8002c4c:	18fb      	adds	r3, r7, r3
 8002c4e:	2201      	movs	r2, #1
 8002c50:	701a      	strb	r2, [r3, #0]

    while (dataLen > 0)
 8002c52:	e047      	b.n	8002ce4 <writeRam+0xac>
    {
        size_t count = dataLen;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	613b      	str	r3, [r7, #16]
        if (count > 31)
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	2b1f      	cmp	r3, #31
 8002c5c:	d901      	bls.n	8002c62 <writeRam+0x2a>
        {
            // Too large for a single I2C operation
            count = 31;
 8002c5e:	231f      	movs	r3, #31
 8002c60:	613b      	str	r3, [r7, #16]
        }
        if ((ramAddr < 128) && ((ramAddr + count) > 128))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c66:	d808      	bhi.n	8002c7a <writeRam+0x42>
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	18d3      	adds	r3, r2, r3
 8002c6e:	2b80      	cmp	r3, #128	@ 0x80
 8002c70:	d903      	bls.n	8002c7a <writeRam+0x42>
        {
            // Crossing a page boundary
            count = 128 - ramAddr;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2280      	movs	r2, #128	@ 0x80
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	613b      	str	r3, [r7, #16]
        }
        if (ramAddr < 128)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c7e:	d806      	bhi.n	8002c8e <writeRam+0x56>
        {
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA, 0);
 8002c80:	233f      	movs	r3, #63	@ 0x3f
 8002c82:	2104      	movs	r1, #4
 8002c84:	2200      	movs	r2, #0
 8002c86:	0018      	movs	r0, r3
 8002c88:	f7ff ff2e 	bl	8002ae8 <clearRegisterBit>
 8002c8c:	e005      	b.n	8002c9a <writeRam+0x62>
        }
        else
        {
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA, 0);
 8002c8e:	233f      	movs	r3, #63	@ 0x3f
 8002c90:	2104      	movs	r1, #4
 8002c92:	2200      	movs	r2, #0
 8002c94:	0018      	movs	r0, r3
 8002c96:	f7ff ff47 	bl	8002b28 <setRegisterBit>
        }

        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	227f      	movs	r2, #127	@ 0x7f
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2280      	movs	r2, #128	@ 0x80
 8002ca6:	189b      	adds	r3, r3, r2
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	2517      	movs	r5, #23
 8002cb0:	197c      	adds	r4, r7, r5
 8002cb2:	68b9      	ldr	r1, [r7, #8]
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f000 f9b3 	bl	8003020 <writeRegisters>
 8002cba:	0003      	movs	r3, r0
 8002cbc:	7023      	strb	r3, [r4, #0]
        if (!bResult)
 8002cbe:	197b      	adds	r3, r7, r5
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	4053      	eors	r3, r2
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10f      	bne.n	8002cec <writeRam+0xb4>
        {
            break;
        }
        ramAddr += count;
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	18d3      	adds	r3, r2, r3
 8002cd2:	60fb      	str	r3, [r7, #12]
        dataLen -= count;
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	607b      	str	r3, [r7, #4]
        data += count;
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	18d3      	adds	r3, r2, r3
 8002ce2:	60bb      	str	r3, [r7, #8]
    while (dataLen > 0)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1b4      	bne.n	8002c54 <writeRam+0x1c>
 8002cea:	e000      	b.n	8002cee <writeRam+0xb6>
            break;
 8002cec:	46c0      	nop			@ (mov r8, r8)
    }

    return bResult;
 8002cee:	2317      	movs	r3, #23
 8002cf0:	18fb      	adds	r3, r7, r3
 8002cf2:	781b      	ldrb	r3, [r3, #0]
}
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b006      	add	sp, #24
 8002cfa:	bdb0      	pop	{r4, r5, r7, pc}

08002cfc <SPI1_SendByte>:
{
    return wakeReason;
};

inline static uint8_t SPI1_SendByte(uint8_t data)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	0002      	movs	r2, r0
 8002d04:	1dfb      	adds	r3, r7, #7
 8002d06:	701a      	strb	r2, [r3, #0]
    uint32_t start_time = HAL_GetTick();
 8002d08:	f003 f8a2 	bl	8005e50 <HAL_GetTick>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	60fb      	str	r3, [r7, #12]
    while (LL_SPI_IsActiveFlag_TXE(SPI1) == RESET)
 8002d10:	e00e      	b.n	8002d30 <SPI1_SendByte+0x34>
    {
        if ((HAL_GetTick() - start_time) > 1000)
 8002d12:	f003 f89d 	bl	8005e50 <HAL_GetTick>
 8002d16:	0002      	movs	r2, r0
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	1ad2      	subs	r2, r2, r3
 8002d1c:	23fa      	movs	r3, #250	@ 0xfa
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d905      	bls.n	8002d30 <SPI1_SendByte+0x34>
        {
            print_error(__func__, __LINE__);
 8002d24:	4a1a      	ldr	r2, [pc, #104]	@ (8002d90 <SPI1_SendByte+0x94>)
 8002d26:	4b1b      	ldr	r3, [pc, #108]	@ (8002d94 <SPI1_SendByte+0x98>)
 8002d28:	0011      	movs	r1, r2
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f001 f81e 	bl	8003d6c <print_error>
    while (LL_SPI_IsActiveFlag_TXE(SPI1) == RESET)
 8002d30:	4b19      	ldr	r3, [pc, #100]	@ (8002d98 <SPI1_SendByte+0x9c>)
 8002d32:	0018      	movs	r0, r3
 8002d34:	f7ff fbb9 	bl	80024aa <LL_SPI_IsActiveFlag_TXE>
 8002d38:	1e03      	subs	r3, r0, #0
 8002d3a:	d0ea      	beq.n	8002d12 <SPI1_SendByte+0x16>
        }
    }

    LL_SPI_TransmitData8(SPI1, data);
 8002d3c:	1dfb      	adds	r3, r7, #7
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	4a15      	ldr	r2, [pc, #84]	@ (8002d98 <SPI1_SendByte+0x9c>)
 8002d42:	0019      	movs	r1, r3
 8002d44:	0010      	movs	r0, r2
 8002d46:	f7ff fbcd 	bl	80024e4 <LL_SPI_TransmitData8>

    start_time = HAL_GetTick();
 8002d4a:	f003 f881 	bl	8005e50 <HAL_GetTick>
 8002d4e:	0003      	movs	r3, r0
 8002d50:	60fb      	str	r3, [r7, #12]
    while (LL_SPI_IsActiveFlag_RXNE(SPI1) == RESET)
 8002d52:	e00e      	b.n	8002d72 <SPI1_SendByte+0x76>
    {
        if ((HAL_GetTick() - start_time) > 1000)
 8002d54:	f003 f87c 	bl	8005e50 <HAL_GetTick>
 8002d58:	0002      	movs	r2, r0
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	1ad2      	subs	r2, r2, r3
 8002d5e:	23fa      	movs	r3, #250	@ 0xfa
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d905      	bls.n	8002d72 <SPI1_SendByte+0x76>
        {
            print_error(__func__, __LINE__);
 8002d66:	4a0d      	ldr	r2, [pc, #52]	@ (8002d9c <SPI1_SendByte+0xa0>)
 8002d68:	4b0a      	ldr	r3, [pc, #40]	@ (8002d94 <SPI1_SendByte+0x98>)
 8002d6a:	0011      	movs	r1, r2
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f000 fffd 	bl	8003d6c <print_error>
    while (LL_SPI_IsActiveFlag_RXNE(SPI1) == RESET)
 8002d72:	4b09      	ldr	r3, [pc, #36]	@ (8002d98 <SPI1_SendByte+0x9c>)
 8002d74:	0018      	movs	r0, r3
 8002d76:	f7ff fb87 	bl	8002488 <LL_SPI_IsActiveFlag_RXNE>
 8002d7a:	1e03      	subs	r3, r0, #0
 8002d7c:	d0ea      	beq.n	8002d54 <SPI1_SendByte+0x58>
        }
    }

    return LL_SPI_ReceiveData8(SPI1);
 8002d7e:	4b06      	ldr	r3, [pc, #24]	@ (8002d98 <SPI1_SendByte+0x9c>)
 8002d80:	0018      	movs	r0, r3
 8002d82:	f7ff fba3 	bl	80024cc <LL_SPI_ReceiveData8>
 8002d86:	0003      	movs	r3, r0
}
 8002d88:	0018      	movs	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b004      	add	sp, #16
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	0000027a 	.word	0x0000027a
 8002d94:	0800fa9c 	.word	0x0800fa9c
 8002d98:	40013000 	.word	0x40013000
 8002d9c:	00000285 	.word	0x00000285

08002da0 <read_rtc_register>:

inline static uint8_t read_rtc_register(uint8_t reg_addr)
{
 8002da0:	b5b0      	push	{r4, r5, r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	0002      	movs	r2, r0
 8002da8:	1dfb      	adds	r3, r7, #7
 8002daa:	701a      	strb	r2, [r3, #0]
    uint8_t val;
    uint32_t primask_bit = utils_enter_critical_section();
 8002dac:	f000 f8d0 	bl	8002f50 <utils_enter_critical_section>
 8002db0:	0003      	movs	r3, r0
 8002db2:	60fb      	str	r3, [r7, #12]

    // #define AB1815_SPI_READ(offset) (127 & offset)		127 - 0x7F
    // #define AB1815_SPI_WRITE(offset) (128 | offset)  	128 - 0x80
    uint8_t addr = AB1815_SPI_READ(reg_addr);
 8002db4:	200b      	movs	r0, #11
 8002db6:	183b      	adds	r3, r7, r0
 8002db8:	1dfa      	adds	r2, r7, #7
 8002dba:	7812      	ldrb	r2, [r2, #0]
 8002dbc:	217f      	movs	r1, #127	@ 0x7f
 8002dbe:	400a      	ands	r2, r1
 8002dc0:	701a      	strb	r2, [r3, #0]
    RTC_L();
 8002dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8002e00 <read_rtc_register+0x60>)
 8002dc4:	2280      	movs	r2, #128	@ 0x80
 8002dc6:	05d2      	lsls	r2, r2, #23
 8002dc8:	619a      	str	r2, [r3, #24]
    SPI1_SendByte(addr);
 8002dca:	183b      	adds	r3, r7, r0
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f7ff ff94 	bl	8002cfc <SPI1_SendByte>
    val = SPI1_SendByte(0x00); // Send DUMMY to read data
 8002dd4:	250a      	movs	r5, #10
 8002dd6:	197c      	adds	r4, r7, r5
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f7ff ff8f 	bl	8002cfc <SPI1_SendByte>
 8002dde:	0003      	movs	r3, r0
 8002de0:	7023      	strb	r3, [r4, #0]
    RTC_H();
 8002de2:	4b07      	ldr	r3, [pc, #28]	@ (8002e00 <read_rtc_register+0x60>)
 8002de4:	2280      	movs	r2, #128	@ 0x80
 8002de6:	01d2      	lsls	r2, r2, #7
 8002de8:	619a      	str	r2, [r3, #24]
    utils_exit_critical_section(primask_bit);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	0018      	movs	r0, r3
 8002dee:	f000 f8be 	bl	8002f6e <utils_exit_critical_section>

    return val;
 8002df2:	197b      	adds	r3, r7, r5
 8002df4:	781b      	ldrb	r3, [r3, #0]
}
 8002df6:	0018      	movs	r0, r3
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	b004      	add	sp, #16
 8002dfc:	bdb0      	pop	{r4, r5, r7, pc}
 8002dfe:	46c0      	nop			@ (mov r8, r8)
 8002e00:	50000400 	.word	0x50000400

08002e04 <write_rtc_register>:

inline static uint8_t write_rtc_register(uint8_t offset, uint8_t buf)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	0002      	movs	r2, r0
 8002e0c:	1dfb      	adds	r3, r7, #7
 8002e0e:	701a      	strb	r2, [r3, #0]
 8002e10:	1dbb      	adds	r3, r7, #6
 8002e12:	1c0a      	adds	r2, r1, #0
 8002e14:	701a      	strb	r2, [r3, #0]
    // uint8_t address = AB1815_SPI_WRITE(offset);
    uint8_t address = offset | 0x80;
 8002e16:	230f      	movs	r3, #15
 8002e18:	18fb      	adds	r3, r7, r3
 8002e1a:	1dfa      	adds	r2, r7, #7
 8002e1c:	7812      	ldrb	r2, [r2, #0]
 8002e1e:	2180      	movs	r1, #128	@ 0x80
 8002e20:	4249      	negs	r1, r1
 8002e22:	430a      	orrs	r2, r1
 8002e24:	701a      	strb	r2, [r3, #0]
    uint32_t primask_bit = utils_enter_critical_section();
 8002e26:	f000 f893 	bl	8002f50 <utils_enter_critical_section>
 8002e2a:	0003      	movs	r3, r0
 8002e2c:	60bb      	str	r3, [r7, #8]

    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 8002e2e:	4b12      	ldr	r3, [pc, #72]	@ (8002e78 <write_rtc_register+0x74>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2240      	movs	r2, #64	@ 0x40
 8002e34:	4013      	ands	r3, r2
 8002e36:	d105      	bne.n	8002e44 <write_rtc_register+0x40>
    {
        SPI1->CR1 |= SPI_CR1_SPE;
 8002e38:	4b0f      	ldr	r3, [pc, #60]	@ (8002e78 <write_rtc_register+0x74>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002e78 <write_rtc_register+0x74>)
 8002e3e:	2140      	movs	r1, #64	@ 0x40
 8002e40:	430a      	orrs	r2, r1
 8002e42:	601a      	str	r2, [r3, #0]
    }
    spi_select_slave(0);
 8002e44:	2000      	movs	r0, #0
 8002e46:	f7ff fb5f 	bl	8002508 <spi_select_slave>
    SPI1_SendByte(address);
 8002e4a:	230f      	movs	r3, #15
 8002e4c:	18fb      	adds	r3, r7, r3
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	0018      	movs	r0, r3
 8002e52:	f7ff ff53 	bl	8002cfc <SPI1_SendByte>
    SPI1_SendByte(buf); // Send Data to write
 8002e56:	1dbb      	adds	r3, r7, #6
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f7ff ff4e 	bl	8002cfc <SPI1_SendByte>

    spi_select_slave(1);
 8002e60:	2001      	movs	r0, #1
 8002e62:	f7ff fb51 	bl	8002508 <spi_select_slave>
    utils_exit_critical_section(primask_bit);
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f000 f880 	bl	8002f6e <utils_exit_critical_section>
    return 1;
 8002e6e:	2301      	movs	r3, #1
};
 8002e70:	0018      	movs	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b004      	add	sp, #16
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40013000 	.word	0x40013000

08002e7c <hex_dump>:

void hex_dump(void)
{
 8002e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e7e:	46ce      	mov	lr, r9
 8002e80:	4647      	mov	r7, r8
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b08b      	sub	sp, #44	@ 0x2c
 8002e86:	af06      	add	r7, sp, #24
    uint8_t buffer[9];
    for (uint8_t pos = 0; pos < 0x7F; pos += 8) // 0x7f
 8002e88:	230f      	movs	r3, #15
 8002e8a:	18fb      	adds	r3, r7, r3
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	701a      	strb	r2, [r3, #0]
 8002e90:	e04e      	b.n	8002f30 <hex_dump+0xb4>
    {

        uint8_t ii = 0;
 8002e92:	210e      	movs	r1, #14
 8002e94:	187b      	adds	r3, r7, r1
 8002e96:	2200      	movs	r2, #0
 8002e98:	701a      	strb	r2, [r3, #0]
        for (ii = 0; ii < 7; ii++)
 8002e9a:	187b      	adds	r3, r7, r1
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	701a      	strb	r2, [r3, #0]
 8002ea0:	e015      	b.n	8002ece <hex_dump+0x52>
        {
            buffer[ii] = read_rtc_register(pos + ii);
 8002ea2:	230f      	movs	r3, #15
 8002ea4:	18fa      	adds	r2, r7, r3
 8002ea6:	250e      	movs	r5, #14
 8002ea8:	197b      	adds	r3, r7, r5
 8002eaa:	7812      	ldrb	r2, [r2, #0]
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	18d3      	adds	r3, r2, r3
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	197b      	adds	r3, r7, r5
 8002eb4:	781c      	ldrb	r4, [r3, #0]
 8002eb6:	0010      	movs	r0, r2
 8002eb8:	f7ff ff72 	bl	8002da0 <read_rtc_register>
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	001a      	movs	r2, r3
 8002ec0:	1d3b      	adds	r3, r7, #4
 8002ec2:	551a      	strb	r2, [r3, r4]
        for (ii = 0; ii < 7; ii++)
 8002ec4:	197b      	adds	r3, r7, r5
 8002ec6:	781a      	ldrb	r2, [r3, #0]
 8002ec8:	197b      	adds	r3, r7, r5
 8002eca:	3201      	adds	r2, #1
 8002ecc:	701a      	strb	r2, [r3, #0]
 8002ece:	230e      	movs	r3, #14
 8002ed0:	18fb      	adds	r3, r7, r3
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	2b06      	cmp	r3, #6
 8002ed6:	d9e4      	bls.n	8002ea2 <hex_dump+0x26>
        }
        printf("# 0x%02x: 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x\r\n", pos, buffer[0], buffer[1], buffer[2], buffer[3], buffer[4], buffer[5], buffer[6], buffer[7]);
 8002ed8:	220f      	movs	r2, #15
 8002eda:	18bb      	adds	r3, r7, r2
 8002edc:	7819      	ldrb	r1, [r3, #0]
 8002ede:	1d3b      	adds	r3, r7, #4
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	4698      	mov	r8, r3
 8002ee4:	1d3b      	adds	r3, r7, #4
 8002ee6:	785b      	ldrb	r3, [r3, #1]
 8002ee8:	4699      	mov	r9, r3
 8002eea:	1d3b      	adds	r3, r7, #4
 8002eec:	789b      	ldrb	r3, [r3, #2]
 8002eee:	001a      	movs	r2, r3
 8002ef0:	1d3b      	adds	r3, r7, #4
 8002ef2:	78db      	ldrb	r3, [r3, #3]
 8002ef4:	001c      	movs	r4, r3
 8002ef6:	1d3b      	adds	r3, r7, #4
 8002ef8:	791b      	ldrb	r3, [r3, #4]
 8002efa:	001d      	movs	r5, r3
 8002efc:	1d3b      	adds	r3, r7, #4
 8002efe:	795b      	ldrb	r3, [r3, #5]
 8002f00:	001e      	movs	r6, r3
 8002f02:	1d3b      	adds	r3, r7, #4
 8002f04:	799b      	ldrb	r3, [r3, #6]
 8002f06:	469c      	mov	ip, r3
 8002f08:	1d3b      	adds	r3, r7, #4
 8002f0a:	79db      	ldrb	r3, [r3, #7]
 8002f0c:	480f      	ldr	r0, [pc, #60]	@ (8002f4c <hex_dump+0xd0>)
 8002f0e:	9305      	str	r3, [sp, #20]
 8002f10:	4663      	mov	r3, ip
 8002f12:	9304      	str	r3, [sp, #16]
 8002f14:	9603      	str	r6, [sp, #12]
 8002f16:	9502      	str	r5, [sp, #8]
 8002f18:	9401      	str	r4, [sp, #4]
 8002f1a:	9200      	str	r2, [sp, #0]
 8002f1c:	464b      	mov	r3, r9
 8002f1e:	4642      	mov	r2, r8
 8002f20:	f002 fbd4 	bl	80056cc <printf_>
    for (uint8_t pos = 0; pos < 0x7F; pos += 8) // 0x7f
 8002f24:	220f      	movs	r2, #15
 8002f26:	18bb      	adds	r3, r7, r2
 8002f28:	18ba      	adds	r2, r7, r2
 8002f2a:	7812      	ldrb	r2, [r2, #0]
 8002f2c:	3208      	adds	r2, #8
 8002f2e:	701a      	strb	r2, [r3, #0]
 8002f30:	230f      	movs	r3, #15
 8002f32:	18fb      	adds	r3, r7, r3
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2b7e      	cmp	r3, #126	@ 0x7e
 8002f38:	d9ab      	bls.n	8002e92 <hex_dump+0x16>
    }
}
 8002f3a:	46c0      	nop			@ (mov r8, r8)
 8002f3c:	46c0      	nop			@ (mov r8, r8)
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	b005      	add	sp, #20
 8002f42:	bcc0      	pop	{r6, r7}
 8002f44:	46b9      	mov	r9, r7
 8002f46:	46b0      	mov	r8, r6
 8002f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f4a:	46c0      	nop			@ (mov r8, r8)
 8002f4c:	0800f7b8 	.word	0x0800f7b8

08002f50 <utils_enter_critical_section>:

static inline uint32_t utils_enter_critical_section(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002f56:	f3ef 8310 	mrs	r3, PRIMASK
 8002f5a:	603b      	str	r3, [r7, #0]
  return(result);
 8002f5c:	683b      	ldr	r3, [r7, #0]
    uint32_t primask_bit = __get_PRIMASK();
 8002f5e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f60:	b672      	cpsid	i
}
 8002f62:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();
    return primask_bit;
 8002f64:	687b      	ldr	r3, [r7, #4]
}
 8002f66:	0018      	movs	r0, r3
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	b002      	add	sp, #8
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <utils_exit_critical_section>:

static inline void utils_exit_critical_section(uint32_t primask_bit)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b084      	sub	sp, #16
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f383 8810 	msr	PRIMASK, r3
}
 8002f80:	46c0      	nop			@ (mov r8, r8)
    __set_PRIMASK(primask_bit);
}
 8002f82:	46c0      	nop			@ (mov r8, r8)
 8002f84:	46bd      	mov	sp, r7
 8002f86:	b004      	add	sp, #16
 8002f88:	bd80      	pop	{r7, pc}
	...

08002f8c <readRegisters>:
};

// #########################################################################

bool readRegisters(uint8_t offset, uint8_t *buf, uint8_t length)
{
 8002f8c:	b590      	push	{r4, r7, lr}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6039      	str	r1, [r7, #0]
 8002f94:	0011      	movs	r1, r2
 8002f96:	1dfb      	adds	r3, r7, #7
 8002f98:	1c02      	adds	r2, r0, #0
 8002f9a:	701a      	strb	r2, [r3, #0]
 8002f9c:	1dbb      	adds	r3, r7, #6
 8002f9e:	1c0a      	adds	r2, r1, #0
 8002fa0:	701a      	strb	r2, [r3, #0]
    uint8_t address = AB1815_SPI_READ(offset);
 8002fa2:	2313      	movs	r3, #19
 8002fa4:	18fb      	adds	r3, r7, r3
 8002fa6:	1dfa      	adds	r2, r7, #7
 8002fa8:	7812      	ldrb	r2, [r2, #0]
 8002faa:	217f      	movs	r1, #127	@ 0x7f
 8002fac:	400a      	ands	r2, r1
 8002fae:	701a      	strb	r2, [r3, #0]
    uint32_t primask_bit = utils_enter_critical_section();
 8002fb0:	f7ff ffce 	bl	8002f50 <utils_enter_critical_section>
 8002fb4:	0003      	movs	r3, r0
 8002fb6:	60fb      	str	r3, [r7, #12]
    spi_select_slave(0);
 8002fb8:	2000      	movs	r0, #0
 8002fba:	f7ff faa5 	bl	8002508 <spi_select_slave>

    unsigned int i = 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	617b      	str	r3, [r7, #20]
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 8002fc2:	4b16      	ldr	r3, [pc, #88]	@ (800301c <readRegisters+0x90>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2240      	movs	r2, #64	@ 0x40
 8002fc8:	4013      	ands	r3, r2
 8002fca:	d105      	bne.n	8002fd8 <readRegisters+0x4c>
    {
        SPI1->CR1 |= SPI_CR1_SPE;
 8002fcc:	4b13      	ldr	r3, [pc, #76]	@ (800301c <readRegisters+0x90>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4b12      	ldr	r3, [pc, #72]	@ (800301c <readRegisters+0x90>)
 8002fd2:	2140      	movs	r1, #64	@ 0x40
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	601a      	str	r2, [r3, #0]
    }

    SPI1_SendByte(address);
 8002fd8:	2313      	movs	r3, #19
 8002fda:	18fb      	adds	r3, r7, r3
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f7ff fe8c 	bl	8002cfc <SPI1_SendByte>
    while (i < length)
 8002fe4:	e009      	b.n	8002ffa <readRegisters+0x6e>
    {
        buf[i++] = SPI1_SendByte(0x00); // Send DUMMY to read data
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	1c5a      	adds	r2, r3, #1
 8002fea:	617a      	str	r2, [r7, #20]
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	18d4      	adds	r4, r2, r3
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	f7ff fe83 	bl	8002cfc <SPI1_SendByte>
 8002ff6:	0003      	movs	r3, r0
 8002ff8:	7023      	strb	r3, [r4, #0]
    while (i < length)
 8002ffa:	1dbb      	adds	r3, r7, #6
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	429a      	cmp	r2, r3
 8003002:	d3f0      	bcc.n	8002fe6 <readRegisters+0x5a>
    }

    spi_select_slave(1);
 8003004:	2001      	movs	r0, #1
 8003006:	f7ff fa7f 	bl	8002508 <spi_select_slave>
    utils_exit_critical_section(primask_bit);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	0018      	movs	r0, r3
 800300e:	f7ff ffae 	bl	8002f6e <utils_exit_critical_section>
    return true;
 8003012:	2301      	movs	r3, #1
};
 8003014:	0018      	movs	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	b007      	add	sp, #28
 800301a:	bd90      	pop	{r4, r7, pc}
 800301c:	40013000 	.word	0x40013000

08003020 <writeRegisters>:

// ##########################################################################
bool writeRegisters(uint8_t offset, uint8_t *buf, uint8_t length)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6039      	str	r1, [r7, #0]
 8003028:	0011      	movs	r1, r2
 800302a:	1dfb      	adds	r3, r7, #7
 800302c:	1c02      	adds	r2, r0, #0
 800302e:	701a      	strb	r2, [r3, #0]
 8003030:	1dbb      	adds	r3, r7, #6
 8003032:	1c0a      	adds	r2, r1, #0
 8003034:	701a      	strb	r2, [r3, #0]
    uint8_t address = AB1815_SPI_WRITE(offset);
 8003036:	230e      	movs	r3, #14
 8003038:	18fb      	adds	r3, r7, r3
 800303a:	1dfa      	adds	r2, r7, #7
 800303c:	7812      	ldrb	r2, [r2, #0]
 800303e:	2180      	movs	r1, #128	@ 0x80
 8003040:	4249      	negs	r1, r1
 8003042:	430a      	orrs	r2, r1
 8003044:	701a      	strb	r2, [r3, #0]

    uint32_t primask_bit = utils_enter_critical_section();
 8003046:	f7ff ff83 	bl	8002f50 <utils_enter_critical_section>
 800304a:	0003      	movs	r3, r0
 800304c:	60bb      	str	r3, [r7, #8]
    spi_select_slave(0);
 800304e:	2000      	movs	r0, #0
 8003050:	f7ff fa5a 	bl	8002508 <spi_select_slave>

    uint8_t i = 0;
 8003054:	230f      	movs	r3, #15
 8003056:	18fb      	adds	r3, r7, r3
 8003058:	2200      	movs	r2, #0
 800305a:	701a      	strb	r2, [r3, #0]
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 800305c:	4b18      	ldr	r3, [pc, #96]	@ (80030c0 <writeRegisters+0xa0>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2240      	movs	r2, #64	@ 0x40
 8003062:	4013      	ands	r3, r2
 8003064:	d105      	bne.n	8003072 <writeRegisters+0x52>
    {
        SPI1->CR1 |= SPI_CR1_SPE;
 8003066:	4b16      	ldr	r3, [pc, #88]	@ (80030c0 <writeRegisters+0xa0>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	4b15      	ldr	r3, [pc, #84]	@ (80030c0 <writeRegisters+0xa0>)
 800306c:	2140      	movs	r1, #64	@ 0x40
 800306e:	430a      	orrs	r2, r1
 8003070:	601a      	str	r2, [r3, #0]
    }

    SPI1_SendByte(address);
 8003072:	230e      	movs	r3, #14
 8003074:	18fb      	adds	r3, r7, r3
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	0018      	movs	r0, r3
 800307a:	f7ff fe3f 	bl	8002cfc <SPI1_SendByte>
    while (i < length)
 800307e:	e00c      	b.n	800309a <writeRegisters+0x7a>
    {
        SPI1_SendByte(buf[i++]); // Send Data to write
 8003080:	220f      	movs	r2, #15
 8003082:	18bb      	adds	r3, r7, r2
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	18ba      	adds	r2, r7, r2
 8003088:	1c59      	adds	r1, r3, #1
 800308a:	7011      	strb	r1, [r2, #0]
 800308c:	001a      	movs	r2, r3
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	189b      	adds	r3, r3, r2
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	0018      	movs	r0, r3
 8003096:	f7ff fe31 	bl	8002cfc <SPI1_SendByte>
    while (i < length)
 800309a:	230f      	movs	r3, #15
 800309c:	18fa      	adds	r2, r7, r3
 800309e:	1dbb      	adds	r3, r7, #6
 80030a0:	7812      	ldrb	r2, [r2, #0]
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d3eb      	bcc.n	8003080 <writeRegisters+0x60>
    }

    spi_select_slave(1); // set 1
 80030a8:	2001      	movs	r0, #1
 80030aa:	f7ff fa2d 	bl	8002508 <spi_select_slave>
    utils_exit_critical_section(primask_bit);
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	0018      	movs	r0, r3
 80030b2:	f7ff ff5c 	bl	8002f6e <utils_exit_critical_section>
    return true;
 80030b6:	2301      	movs	r3, #1
};
 80030b8:	0018      	movs	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	b004      	add	sp, #16
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40013000 	.word	0x40013000

080030c4 <read>:
{
    return setWDT(-1);
}

uint8_t read(uint8_t reg)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	0002      	movs	r2, r0
 80030cc:	1dfb      	adds	r3, r7, #7
 80030ce:	701a      	strb	r2, [r3, #0]
    return read_rtc_register(reg);
 80030d0:	1dfb      	adds	r3, r7, #7
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	0018      	movs	r0, r3
 80030d6:	f7ff fe63 	bl	8002da0 <read_rtc_register>
 80030da:	0003      	movs	r3, r0
}
 80030dc:	0018      	movs	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	b002      	add	sp, #8
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <write>:

uint8_t write(uint8_t reg, uint8_t value)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	0002      	movs	r2, r0
 80030ec:	1dfb      	adds	r3, r7, #7
 80030ee:	701a      	strb	r2, [r3, #0]
 80030f0:	1dbb      	adds	r3, r7, #6
 80030f2:	1c0a      	adds	r2, r1, #0
 80030f4:	701a      	strb	r2, [r3, #0]
    return write_rtc_register(reg, value);
 80030f6:	1dbb      	adds	r3, r7, #6
 80030f8:	781a      	ldrb	r2, [r3, #0]
 80030fa:	1dfb      	adds	r3, r7, #7
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	0011      	movs	r1, r2
 8003100:	0018      	movs	r0, r3
 8003102:	f7ff fe7f 	bl	8002e04 <write_rtc_register>
 8003106:	0003      	movs	r3, r0
}
 8003108:	0018      	movs	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	b002      	add	sp, #8
 800310e:	bd80      	pop	{r7, pc}

08003110 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	4a05      	ldr	r2, [pc, #20]	@ (8003134 <LL_ADC_EnableInternalRegulator+0x24>)
 800311e:	4013      	ands	r3, r2
 8003120:	2280      	movs	r2, #128	@ 0x80
 8003122:	0552      	lsls	r2, r2, #21
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800312a:	46c0      	nop			@ (mov r8, r8)
 800312c:	46bd      	mov	sp, r7
 800312e:	b002      	add	sp, #8
 8003130:	bd80      	pop	{r7, pc}
 8003132:	46c0      	nop			@ (mov r8, r8)
 8003134:	6fffffe8 	.word	0x6fffffe8

08003138 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	4a04      	ldr	r2, [pc, #16]	@ (8003158 <LL_ADC_Enable+0x20>)
 8003146:	4013      	ands	r3, r2
 8003148:	2201      	movs	r2, #1
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003150:	46c0      	nop			@ (mov r8, r8)
 8003152:	46bd      	mov	sp, r7
 8003154:	b002      	add	sp, #8
 8003156:	bd80      	pop	{r7, pc}
 8003158:	7fffffe8 	.word	0x7fffffe8

0800315c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	2201      	movs	r2, #1
 800316a:	4013      	ands	r3, r2
 800316c:	2b01      	cmp	r3, #1
 800316e:	d101      	bne.n	8003174 <LL_ADC_IsEnabled+0x18>
 8003170:	2301      	movs	r3, #1
 8003172:	e000      	b.n	8003176 <LL_ADC_IsEnabled+0x1a>
 8003174:	2300      	movs	r3, #0
}
 8003176:	0018      	movs	r0, r3
 8003178:	46bd      	mov	sp, r7
 800317a:	b002      	add	sp, #8
 800317c:	bd80      	pop	{r7, pc}

0800317e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b082      	sub	sp, #8
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	2202      	movs	r2, #2
 800318c:	4013      	ands	r3, r2
 800318e:	2b02      	cmp	r3, #2
 8003190:	d101      	bne.n	8003196 <LL_ADC_IsDisableOngoing+0x18>
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <LL_ADC_IsDisableOngoing+0x1a>
 8003196:	2300      	movs	r3, #0
}
 8003198:	0018      	movs	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	b002      	add	sp, #8
 800319e:	bd80      	pop	{r7, pc}

080031a0 <LL_ADC_StartCalibration>:
  * @rmtoll CR       ADCAL          LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	4a05      	ldr	r2, [pc, #20]	@ (80031c4 <LL_ADC_StartCalibration+0x24>)
 80031ae:	4013      	ands	r3, r2
 80031b0:	2280      	movs	r2, #128	@ 0x80
 80031b2:	0612      	lsls	r2, r2, #24
 80031b4:	431a      	orrs	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL);
}
 80031ba:	46c0      	nop			@ (mov r8, r8)
 80031bc:	46bd      	mov	sp, r7
 80031be:	b002      	add	sp, #8
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	46c0      	nop			@ (mov r8, r8)
 80031c4:	7fffffe8 	.word	0x7fffffe8

080031c8 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(const ADC_TypeDef *ADCx)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	0fdb      	lsrs	r3, r3, #31
 80031d6:	07da      	lsls	r2, r3, #31
 80031d8:	2380      	movs	r3, #128	@ 0x80
 80031da:	061b      	lsls	r3, r3, #24
 80031dc:	429a      	cmp	r2, r3
 80031de:	d101      	bne.n	80031e4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80031e0:	2301      	movs	r3, #1
 80031e2:	e000      	b.n	80031e6 <LL_ADC_IsCalibrationOnGoing+0x1e>
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	0018      	movs	r0, r3
 80031e8:	46bd      	mov	sp, r7
 80031ea:	b002      	add	sp, #8
 80031ec:	bd80      	pop	{r7, pc}
	...

080031f0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	4a04      	ldr	r2, [pc, #16]	@ (8003210 <LL_ADC_REG_StartConversion+0x20>)
 80031fe:	4013      	ands	r3, r2
 8003200:	2204      	movs	r2, #4
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003208:	46c0      	nop			@ (mov r8, r8)
 800320a:	46bd      	mov	sp, r7
 800320c:	b002      	add	sp, #8
 800320e:	bd80      	pop	{r7, pc}
 8003210:	7fffffe8 	.word	0x7fffffe8

08003214 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	2204      	movs	r2, #4
 8003222:	4013      	ands	r3, r2
 8003224:	2b04      	cmp	r3, #4
 8003226:	d101      	bne.n	800322c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003228:	2301      	movs	r3, #1
 800322a:	e000      	b.n	800322e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800322c:	2300      	movs	r3, #0
}
 800322e:	0018      	movs	r0, r3
 8003230:	46bd      	mov	sp, r7
 8003232:	b002      	add	sp, #8
 8003234:	bd80      	pop	{r7, pc}

08003236 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       DATA           LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(const ADC_TypeDef *ADCx)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA) & 0x00000FFFUL);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003242:	b29b      	uxth	r3, r3
 8003244:	051b      	lsls	r3, r3, #20
 8003246:	0d1b      	lsrs	r3, r3, #20
 8003248:	b29b      	uxth	r3, r3
}
 800324a:	0018      	movs	r0, r3
 800324c:	46bd      	mov	sp, r7
 800324e:	b002      	add	sp, #8
 8003250:	bd80      	pop	{r7, pc}

08003252 <LL_ADC_IsActiveFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(const ADC_TypeDef *ADCx)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b082      	sub	sp, #8
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2201      	movs	r2, #1
 8003260:	4013      	ands	r3, r2
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <LL_ADC_IsActiveFlag_ADRDY+0x18>
 8003266:	2301      	movs	r3, #1
 8003268:	e000      	b.n	800326c <LL_ADC_IsActiveFlag_ADRDY+0x1a>
 800326a:	2300      	movs	r3, #0
}
 800326c:	0018      	movs	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	b002      	add	sp, #8
 8003272:	bd80      	pop	{r7, pc}

08003274 <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(const ADC_TypeDef *ADCx)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2204      	movs	r2, #4
 8003282:	4013      	ands	r3, r2
 8003284:	2b04      	cmp	r3, #4
 8003286:	d101      	bne.n	800328c <LL_ADC_IsActiveFlag_EOC+0x18>
 8003288:	2301      	movs	r3, #1
 800328a:	e000      	b.n	800328e <LL_ADC_IsActiveFlag_EOC+0x1a>
 800328c:	2300      	movs	r3, #0
}
 800328e:	0018      	movs	r0, r3
 8003290:	46bd      	mov	sp, r7
 8003292:	b002      	add	sp, #8
 8003294:	bd80      	pop	{r7, pc}

08003296 <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2204      	movs	r2, #4
 80032a2:	601a      	str	r2, [r3, #0]
}
 80032a4:	46c0      	nop			@ (mov r8, r8)
 80032a6:	46bd      	mov	sp, r7
 80032a8:	b002      	add	sp, #8
 80032aa:	bd80      	pop	{r7, pc}

080032ac <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80032b2:	1d3b      	adds	r3, r7, #4
 80032b4:	0018      	movs	r0, r3
 80032b6:	230c      	movs	r3, #12
 80032b8:	001a      	movs	r2, r3
 80032ba:	2100      	movs	r1, #0
 80032bc:	f00a fa7e 	bl	800d7bc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 80032c0:	4b32      	ldr	r3, [pc, #200]	@ (800338c <MX_ADC1_Init+0xe0>)
 80032c2:	4a33      	ldr	r2, [pc, #204]	@ (8003390 <MX_ADC1_Init+0xe4>)
 80032c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80032c6:	4b31      	ldr	r3, [pc, #196]	@ (800338c <MX_ADC1_Init+0xe0>)
 80032c8:	22c0      	movs	r2, #192	@ 0xc0
 80032ca:	0612      	lsls	r2, r2, #24
 80032cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80032ce:	4b2f      	ldr	r3, [pc, #188]	@ (800338c <MX_ADC1_Init+0xe0>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80032d4:	4b2d      	ldr	r3, [pc, #180]	@ (800338c <MX_ADC1_Init+0xe0>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80032da:	4b2c      	ldr	r3, [pc, #176]	@ (800338c <MX_ADC1_Init+0xe0>)
 80032dc:	2200      	movs	r2, #0
 80032de:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80032e0:	4b2a      	ldr	r3, [pc, #168]	@ (800338c <MX_ADC1_Init+0xe0>)
 80032e2:	2204      	movs	r2, #4
 80032e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80032e6:	4b29      	ldr	r3, [pc, #164]	@ (800338c <MX_ADC1_Init+0xe0>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80032ec:	4b27      	ldr	r3, [pc, #156]	@ (800338c <MX_ADC1_Init+0xe0>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80032f2:	4b26      	ldr	r3, [pc, #152]	@ (800338c <MX_ADC1_Init+0xe0>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80032f8:	4b24      	ldr	r3, [pc, #144]	@ (800338c <MX_ADC1_Init+0xe0>)
 80032fa:	2201      	movs	r2, #1
 80032fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80032fe:	4b23      	ldr	r3, [pc, #140]	@ (800338c <MX_ADC1_Init+0xe0>)
 8003300:	2220      	movs	r2, #32
 8003302:	2100      	movs	r1, #0
 8003304:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003306:	4b21      	ldr	r3, [pc, #132]	@ (800338c <MX_ADC1_Init+0xe0>)
 8003308:	2200      	movs	r2, #0
 800330a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800330c:	4b1f      	ldr	r3, [pc, #124]	@ (800338c <MX_ADC1_Init+0xe0>)
 800330e:	2200      	movs	r2, #0
 8003310:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003312:	4b1e      	ldr	r3, [pc, #120]	@ (800338c <MX_ADC1_Init+0xe0>)
 8003314:	222c      	movs	r2, #44	@ 0x2c
 8003316:	2100      	movs	r1, #0
 8003318:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800331a:	4b1c      	ldr	r3, [pc, #112]	@ (800338c <MX_ADC1_Init+0xe0>)
 800331c:	2200      	movs	r2, #0
 800331e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_19CYCLES_5;
 8003320:	4b1a      	ldr	r3, [pc, #104]	@ (800338c <MX_ADC1_Init+0xe0>)
 8003322:	2204      	movs	r2, #4
 8003324:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 8003326:	4b19      	ldr	r3, [pc, #100]	@ (800338c <MX_ADC1_Init+0xe0>)
 8003328:	2206      	movs	r2, #6
 800332a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = ENABLE;
 800332c:	4b17      	ldr	r3, [pc, #92]	@ (800338c <MX_ADC1_Init+0xe0>)
 800332e:	223c      	movs	r2, #60	@ 0x3c
 8003330:	2101      	movs	r1, #1
 8003332:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_8;
 8003334:	4b15      	ldr	r3, [pc, #84]	@ (800338c <MX_ADC1_Init+0xe0>)
 8003336:	2208      	movs	r2, #8
 8003338:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_3;
 800333a:	4b14      	ldr	r3, [pc, #80]	@ (800338c <MX_ADC1_Init+0xe0>)
 800333c:	2260      	movs	r2, #96	@ 0x60
 800333e:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8003340:	4b12      	ldr	r3, [pc, #72]	@ (800338c <MX_ADC1_Init+0xe0>)
 8003342:	2200      	movs	r2, #0
 8003344:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003346:	4b11      	ldr	r3, [pc, #68]	@ (800338c <MX_ADC1_Init+0xe0>)
 8003348:	2200      	movs	r2, #0
 800334a:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800334c:	4b0f      	ldr	r3, [pc, #60]	@ (800338c <MX_ADC1_Init+0xe0>)
 800334e:	0018      	movs	r0, r3
 8003350:	f002 fea8 	bl	80060a4 <HAL_ADC_Init>
 8003354:	1e03      	subs	r3, r0, #0
 8003356:	d001      	beq.n	800335c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8003358:	f000 fda8 	bl	8003eac <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800335c:	1d3b      	adds	r3, r7, #4
 800335e:	4a0d      	ldr	r2, [pc, #52]	@ (8003394 <MX_ADC1_Init+0xe8>)
 8003360:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003362:	1d3b      	adds	r3, r7, #4
 8003364:	2200      	movs	r2, #0
 8003366:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003368:	1d3b      	adds	r3, r7, #4
 800336a:	2200      	movs	r2, #0
 800336c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800336e:	1d3a      	adds	r2, r7, #4
 8003370:	4b06      	ldr	r3, [pc, #24]	@ (800338c <MX_ADC1_Init+0xe0>)
 8003372:	0011      	movs	r1, r2
 8003374:	0018      	movs	r0, r3
 8003376:	f003 f83d 	bl	80063f4 <HAL_ADC_ConfigChannel>
 800337a:	1e03      	subs	r3, r0, #0
 800337c:	d001      	beq.n	8003382 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 800337e:	f000 fd95 	bl	8003eac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8003382:	46c0      	nop			@ (mov r8, r8)
 8003384:	46bd      	mov	sp, r7
 8003386:	b004      	add	sp, #16
 8003388:	bd80      	pop	{r7, pc}
 800338a:	46c0      	nop			@ (mov r8, r8)
 800338c:	2000035c 	.word	0x2000035c
 8003390:	40012400 	.word	0x40012400
 8003394:	b0001000 	.word	0xb0001000

08003398 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{
 8003398:	b590      	push	{r4, r7, lr}
 800339a:	b095      	sub	sp, #84	@ 0x54
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033a0:	240c      	movs	r4, #12
 80033a2:	193b      	adds	r3, r7, r4
 80033a4:	0018      	movs	r0, r3
 80033a6:	2344      	movs	r3, #68	@ 0x44
 80033a8:	001a      	movs	r2, r3
 80033aa:	2100      	movs	r1, #0
 80033ac:	f00a fa06 	bl	800d7bc <memset>
  if (adcHandle->Instance == ADC1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a11      	ldr	r2, [pc, #68]	@ (80033fc <HAL_ADC_MspInit+0x64>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d11c      	bne.n	80033f4 <HAL_ADC_MspInit+0x5c>

    /* USER CODE END ADC1_MspInit 0 */

    /** Initializes the peripherals clocks
     */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80033ba:	193b      	adds	r3, r7, r4
 80033bc:	2280      	movs	r2, #128	@ 0x80
 80033be:	01d2      	lsls	r2, r2, #7
 80033c0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80033c2:	193b      	adds	r3, r7, r4
 80033c4:	2200      	movs	r2, #0
 80033c6:	63da      	str	r2, [r3, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033c8:	193b      	adds	r3, r7, r4
 80033ca:	0018      	movs	r0, r3
 80033cc:	f004 fbae 	bl	8007b2c <HAL_RCCEx_PeriphCLKConfig>
 80033d0:	1e03      	subs	r3, r0, #0
 80033d2:	d001      	beq.n	80033d8 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 80033d4:	f000 fd6a 	bl	8003eac <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80033d8:	4b09      	ldr	r3, [pc, #36]	@ (8003400 <HAL_ADC_MspInit+0x68>)
 80033da:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80033dc:	4b08      	ldr	r3, [pc, #32]	@ (8003400 <HAL_ADC_MspInit+0x68>)
 80033de:	2180      	movs	r1, #128	@ 0x80
 80033e0:	0349      	lsls	r1, r1, #13
 80033e2:	430a      	orrs	r2, r1
 80033e4:	661a      	str	r2, [r3, #96]	@ 0x60
 80033e6:	4b06      	ldr	r3, [pc, #24]	@ (8003400 <HAL_ADC_MspInit+0x68>)
 80033e8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80033ea:	2380      	movs	r3, #128	@ 0x80
 80033ec:	035b      	lsls	r3, r3, #13
 80033ee:	4013      	ands	r3, r2
 80033f0:	60bb      	str	r3, [r7, #8]
 80033f2:	68bb      	ldr	r3, [r7, #8]
    /* USER CODE BEGIN ADC1_MspInit 1 */

    /* USER CODE END ADC1_MspInit 1 */
  }
}
 80033f4:	46c0      	nop			@ (mov r8, r8)
 80033f6:	46bd      	mov	sp, r7
 80033f8:	b015      	add	sp, #84	@ 0x54
 80033fa:	bd90      	pop	{r4, r7, pc}
 80033fc:	40012400 	.word	0x40012400
 8003400:	40021000 	.word	0x40021000

08003404 <get_vbat>:
/* USER CODE BEGIN 1 */

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

uint32_t get_vbat(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
  // printf("get_vbat\n");
  uint32_t Vdda;

  if (ubAdcGrpRegularUnitaryConvStatus != 0)
 800340a:	4b15      	ldr	r3, [pc, #84]	@ (8003460 <get_vbat+0x5c>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <get_vbat+0x18>
  {
    ubAdcGrpRegularUnitaryConvStatus = 0;
 8003414:	4b12      	ldr	r3, [pc, #72]	@ (8003460 <get_vbat+0x5c>)
 8003416:	2200      	movs	r2, #0
 8003418:	701a      	strb	r2, [r3, #0]
 800341a:	e001      	b.n	8003420 <get_vbat+0x1c>
  }
  else
  {
    Error_Handler();
 800341c:	f000 fd46 	bl	8003eac <Error_Handler>
  }

  /* Init variable containing ADC conversion data */
  uhADCxConvertedData = VAR_CONVERTED_DATA_INIT_VALUE; // VAR_CONVERTED_DATA_INIT_VALUE
 8003420:	4b10      	ldr	r3, [pc, #64]	@ (8003464 <get_vbat+0x60>)
 8003422:	2280      	movs	r2, #128	@ 0x80
 8003424:	0152      	lsls	r2, r2, #5
 8003426:	801a      	strh	r2, [r3, #0]

  /* Perform ADC group regular conversion start, poll for conversion        */
  /* completion.                                                            */
  ConversionStartPoll_ADC_GrpRegular();
 8003428:	f000 f874 	bl	8003514 <ConversionStartPoll_ADC_GrpRegular>

  /* Retrieve ADC conversion data */
  /* (data scale corresponds to ADC resolution: 12 bits) */
  uhADCxConvertedData = LL_ADC_REG_ReadConversionData12(ADC1);
 800342c:	4b0e      	ldr	r3, [pc, #56]	@ (8003468 <get_vbat+0x64>)
 800342e:	0018      	movs	r0, r3
 8003430:	f7ff ff01 	bl	8003236 <LL_ADC_REG_ReadConversionData12>
 8003434:	0003      	movs	r3, r0
 8003436:	001a      	movs	r2, r3
 8003438:	4b0a      	ldr	r3, [pc, #40]	@ (8003464 <get_vbat+0x60>)
 800343a:	801a      	strh	r2, [r3, #0]

  /* Update status variable of ADC unitary conversion */
  ubAdcGrpRegularUnitaryConvStatus = 1;
 800343c:	4b08      	ldr	r3, [pc, #32]	@ (8003460 <get_vbat+0x5c>)
 800343e:	2201      	movs	r2, #1
 8003440:	701a      	strb	r2, [r3, #0]

  /* Computation of ADC conversions raw data to physical values           */
  /* using LL ADC driver helper macro.                                    */
  // printf("uhADCxConvertedData:  %d\n", uhADCxConvertedData);

  Vdda = 1220 * 4096 / uhADCxConvertedData;
 8003442:	4b08      	ldr	r3, [pc, #32]	@ (8003464 <get_vbat+0x60>)
 8003444:	881b      	ldrh	r3, [r3, #0]
 8003446:	b29b      	uxth	r3, r3
 8003448:	0019      	movs	r1, r3
 800344a:	4808      	ldr	r0, [pc, #32]	@ (800346c <get_vbat+0x68>)
 800344c:	f7fc ff02 	bl	8000254 <__divsi3>
 8003450:	0003      	movs	r3, r0
 8003452:	607b      	str	r3, [r7, #4]
  // printf("Vdda = %d\n", Vdda);
  return Vdda;
 8003454:	687b      	ldr	r3, [r7, #4]
}
 8003456:	0018      	movs	r0, r3
 8003458:	46bd      	mov	sp, r7
 800345a:	b002      	add	sp, #8
 800345c:	bd80      	pop	{r7, pc}
 800345e:	46c0      	nop			@ (mov r8, r8)
 8003460:	20000002 	.word	0x20000002
 8003464:	20000000 	.word	0x20000000
 8003468:	40012400 	.word	0x40012400
 800346c:	004c4000 	.word	0x004c4000

08003470 <Activate_ADC>:
 *                 after this function
 * @param  None
 * @retval None
 */
void Activate_ADC(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
  __IO uint32_t wait_loop_index = 0;
 8003476:	2300      	movs	r3, #0
 8003478:	607b      	str	r3, [r7, #4]
  /*       implemented anyway to show the best practice usages                */
  /*       corresponding to reference manual procedure.                       */
  /*       Software can be optimized by removing some of these checks, if     */
  /*       they are not relevant considering previous settings and actions    */
  /*       in user application.                                               */
  if (LL_ADC_IsEnabled(ADC1) == 0)
 800347a:	4b23      	ldr	r3, [pc, #140]	@ (8003508 <Activate_ADC+0x98>)
 800347c:	0018      	movs	r0, r3
 800347e:	f7ff fe6d 	bl	800315c <LL_ADC_IsEnabled>
 8003482:	1e03      	subs	r3, r0, #0
 8003484:	d13b      	bne.n	80034fe <Activate_ADC+0x8e>
  {
    /* Disable ADC deep power down (enabled by default after reset state) */
    // LL_ADC_DisableDeepPowerDown(ADC1);

    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(ADC1);
 8003486:	4b20      	ldr	r3, [pc, #128]	@ (8003508 <Activate_ADC+0x98>)
 8003488:	0018      	movs	r0, r3
 800348a:	f7ff fe41 	bl	8003110 <LL_ADC_EnableInternalRegulator>
    /* Compute number of CPU cycles to wait for, from delay in us.            */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles (depends on compilation optimization).     */
    /* Note: If system core clock frequency is below 200kHz, wait time        */
    /*       is only a few CPU processing cycles.                             */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 800348e:	4b1f      	ldr	r3, [pc, #124]	@ (800350c <Activate_ADC+0x9c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	491f      	ldr	r1, [pc, #124]	@ (8003510 <Activate_ADC+0xa0>)
 8003494:	0018      	movs	r0, r3
 8003496:	f7fc fe53 	bl	8000140 <__udivsi3>
 800349a:	0003      	movs	r3, r0
 800349c:	001a      	movs	r2, r3
 800349e:	0013      	movs	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	189b      	adds	r3, r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	210a      	movs	r1, #10
 80034a8:	0018      	movs	r0, r3
 80034aa:	f7fc fe49 	bl	8000140 <__udivsi3>
 80034ae:	0003      	movs	r3, r0
 80034b0:	607b      	str	r3, [r7, #4]
    while (wait_loop_index != 0)
 80034b2:	e002      	b.n	80034ba <Activate_ADC+0x4a>
    {
      wait_loop_index--;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	607b      	str	r3, [r7, #4]
    while (wait_loop_index != 0)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1f9      	bne.n	80034b4 <Activate_ADC+0x44>
    }

    /* Run ADC self calibration */
    LL_ADC_StartCalibration(ADC1);
 80034c0:	4b11      	ldr	r3, [pc, #68]	@ (8003508 <Activate_ADC+0x98>)
 80034c2:	0018      	movs	r0, r3
 80034c4:	f7ff fe6c 	bl	80031a0 <LL_ADC_StartCalibration>
/* Poll for ADC effectively calibrated */
#if (USE_TIMEOUT == 1)
    Timeout = ADC_CALIBRATION_TIMEOUT_MS;
#endif /* USE_TIMEOUT */

    while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0)
 80034c8:	46c0      	nop			@ (mov r8, r8)
 80034ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003508 <Activate_ADC+0x98>)
 80034cc:	0018      	movs	r0, r3
 80034ce:	f7ff fe7b 	bl	80031c8 <LL_ADC_IsCalibrationOnGoing>
 80034d2:	1e03      	subs	r3, r0, #0
 80034d4:	d1f9      	bne.n	80034ca <Activate_ADC+0x5a>
    }

    /* Delay between ADC end of calibration and ADC enable.                   */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles (depends on compilation optimization).     */
    wait_loop_index = (ADC_DELAY_CALIB_ENABLE_CPU_CYCLES >> 1);
 80034d6:	2320      	movs	r3, #32
 80034d8:	607b      	str	r3, [r7, #4]
    while (wait_loop_index != 0)
 80034da:	e002      	b.n	80034e2 <Activate_ADC+0x72>
    {
      wait_loop_index--;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3b01      	subs	r3, #1
 80034e0:	607b      	str	r3, [r7, #4]
    while (wait_loop_index != 0)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1f9      	bne.n	80034dc <Activate_ADC+0x6c>
    }

    /* Enable ADC */
    LL_ADC_Enable(ADC1);
 80034e8:	4b07      	ldr	r3, [pc, #28]	@ (8003508 <Activate_ADC+0x98>)
 80034ea:	0018      	movs	r0, r3
 80034ec:	f7ff fe24 	bl	8003138 <LL_ADC_Enable>
/* Poll for ADC ready to convert */
#if (USE_TIMEOUT == 1)
    Timeout = ADC_ENABLE_TIMEOUT_MS;
#endif /* USE_TIMEOUT */

    while (LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0)
 80034f0:	46c0      	nop			@ (mov r8, r8)
 80034f2:	4b05      	ldr	r3, [pc, #20]	@ (8003508 <Activate_ADC+0x98>)
 80034f4:	0018      	movs	r0, r3
 80034f6:	f7ff feac 	bl	8003252 <LL_ADC_IsActiveFlag_ADRDY>
 80034fa:	1e03      	subs	r3, r0, #0
 80034fc:	d0f9      	beq.n	80034f2 <Activate_ADC+0x82>
  /*## Operation on ADC hierarchical scope: ADC group injected ###############*/
  /* Note: No operation on ADC group injected performed here.                 */
  /*       ADC group injected conversions to be performed after this function */
  /*       using function:                                                    */
  /*   																		*/
}
 80034fe:	46c0      	nop			@ (mov r8, r8)
 8003500:	46bd      	mov	sp, r7
 8003502:	b002      	add	sp, #8
 8003504:	bd80      	pop	{r7, pc}
 8003506:	46c0      	nop			@ (mov r8, r8)
 8003508:	40012400 	.word	0x40012400
 800350c:	20000004 	.word	0x20000004
 8003510:	00030d40 	.word	0x00030d40

08003514 <ConversionStartPoll_ADC_GrpRegular>:
 *         external trigger, ADC group regular conversion stop must be added.
 * @param  None
 * @retval None
 */
void ConversionStartPoll_ADC_GrpRegular(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /*       implemented anyway to show the best practice usages                */
  /*       corresponding to reference manual procedure.                       */
  /*       Software can be optimized by removing some of these checks, if     */
  /*       they are not relevant considering previous settings and actions    */
  /*       in user application.                                               */
  if ((LL_ADC_IsEnabled(ADC1) == 1) &&
 8003518:	4b13      	ldr	r3, [pc, #76]	@ (8003568 <ConversionStartPoll_ADC_GrpRegular+0x54>)
 800351a:	0018      	movs	r0, r3
 800351c:	f7ff fe1e 	bl	800315c <LL_ADC_IsEnabled>
 8003520:	0003      	movs	r3, r0
 8003522:	2b01      	cmp	r3, #1
 8003524:	d110      	bne.n	8003548 <ConversionStartPoll_ADC_GrpRegular+0x34>
      (LL_ADC_IsDisableOngoing(ADC1) == 0) &&
 8003526:	4b10      	ldr	r3, [pc, #64]	@ (8003568 <ConversionStartPoll_ADC_GrpRegular+0x54>)
 8003528:	0018      	movs	r0, r3
 800352a:	f7ff fe28 	bl	800317e <LL_ADC_IsDisableOngoing>
 800352e:	1e03      	subs	r3, r0, #0
  if ((LL_ADC_IsEnabled(ADC1) == 1) &&
 8003530:	d10a      	bne.n	8003548 <ConversionStartPoll_ADC_GrpRegular+0x34>
      (LL_ADC_REG_IsConversionOngoing(ADC1) == 0))
 8003532:	4b0d      	ldr	r3, [pc, #52]	@ (8003568 <ConversionStartPoll_ADC_GrpRegular+0x54>)
 8003534:	0018      	movs	r0, r3
 8003536:	f7ff fe6d 	bl	8003214 <LL_ADC_REG_IsConversionOngoing>
 800353a:	1e03      	subs	r3, r0, #0
      (LL_ADC_IsDisableOngoing(ADC1) == 0) &&
 800353c:	d104      	bne.n	8003548 <ConversionStartPoll_ADC_GrpRegular+0x34>
  {
    LL_ADC_REG_StartConversion(ADC1);
 800353e:	4b0a      	ldr	r3, [pc, #40]	@ (8003568 <ConversionStartPoll_ADC_GrpRegular+0x54>)
 8003540:	0018      	movs	r0, r3
 8003542:	f7ff fe55 	bl	80031f0 <LL_ADC_REG_StartConversion>
 8003546:	e001      	b.n	800354c <ConversionStartPoll_ADC_GrpRegular+0x38>
  }
  else
  {
    /* Error: ADC conversion start could not be performed */
    Error_Handler();
 8003548:	f000 fcb0 	bl	8003eac <Error_Handler>

#if (USE_TIMEOUT == 1)
  Timeout = ADC_UNITARY_CONVERSION_TIMEOUT_MS;
#endif /* USE_TIMEOUT */

  while (LL_ADC_IsActiveFlag_EOC(ADC1) == 0)
 800354c:	46c0      	nop			@ (mov r8, r8)
 800354e:	4b06      	ldr	r3, [pc, #24]	@ (8003568 <ConversionStartPoll_ADC_GrpRegular+0x54>)
 8003550:	0018      	movs	r0, r3
 8003552:	f7ff fe8f 	bl	8003274 <LL_ADC_IsActiveFlag_EOC>
 8003556:	1e03      	subs	r3, r0, #0
 8003558:	d0f9      	beq.n	800354e <ConversionStartPoll_ADC_GrpRegular+0x3a>
      }
    }
#endif /* USE_TIMEOUT */
  }

  LL_ADC_ClearFlag_EOC(ADC1);
 800355a:	4b03      	ldr	r3, [pc, #12]	@ (8003568 <ConversionStartPoll_ADC_GrpRegular+0x54>)
 800355c:	0018      	movs	r0, r3
 800355e:	f7ff fe9a 	bl	8003296 <LL_ADC_ClearFlag_EOC>
}
 8003562:	46c0      	nop			@ (mov r8, r8)
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40012400 	.word	0x40012400

0800356c <MX_GPIO_Init>:
/** Configure pins
     PA13 (SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 800356c:	b590      	push	{r4, r7, lr}
 800356e:	b08b      	sub	sp, #44	@ 0x2c
 8003570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003572:	2414      	movs	r4, #20
 8003574:	193b      	adds	r3, r7, r4
 8003576:	0018      	movs	r0, r3
 8003578:	2314      	movs	r3, #20
 800357a:	001a      	movs	r2, r3
 800357c:	2100      	movs	r1, #0
 800357e:	f00a f91d 	bl	800d7bc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003582:	4b78      	ldr	r3, [pc, #480]	@ (8003764 <MX_GPIO_Init+0x1f8>)
 8003584:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003586:	4b77      	ldr	r3, [pc, #476]	@ (8003764 <MX_GPIO_Init+0x1f8>)
 8003588:	2104      	movs	r1, #4
 800358a:	430a      	orrs	r2, r1
 800358c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800358e:	4b75      	ldr	r3, [pc, #468]	@ (8003764 <MX_GPIO_Init+0x1f8>)
 8003590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003592:	2204      	movs	r2, #4
 8003594:	4013      	ands	r3, r2
 8003596:	613b      	str	r3, [r7, #16]
 8003598:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800359a:	4b72      	ldr	r3, [pc, #456]	@ (8003764 <MX_GPIO_Init+0x1f8>)
 800359c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800359e:	4b71      	ldr	r3, [pc, #452]	@ (8003764 <MX_GPIO_Init+0x1f8>)
 80035a0:	2120      	movs	r1, #32
 80035a2:	430a      	orrs	r2, r1
 80035a4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80035a6:	4b6f      	ldr	r3, [pc, #444]	@ (8003764 <MX_GPIO_Init+0x1f8>)
 80035a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035aa:	2220      	movs	r2, #32
 80035ac:	4013      	ands	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035b2:	4b6c      	ldr	r3, [pc, #432]	@ (8003764 <MX_GPIO_Init+0x1f8>)
 80035b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80035b6:	4b6b      	ldr	r3, [pc, #428]	@ (8003764 <MX_GPIO_Init+0x1f8>)
 80035b8:	2101      	movs	r1, #1
 80035ba:	430a      	orrs	r2, r1
 80035bc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80035be:	4b69      	ldr	r3, [pc, #420]	@ (8003764 <MX_GPIO_Init+0x1f8>)
 80035c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035c2:	2201      	movs	r2, #1
 80035c4:	4013      	ands	r3, r2
 80035c6:	60bb      	str	r3, [r7, #8]
 80035c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ca:	4b66      	ldr	r3, [pc, #408]	@ (8003764 <MX_GPIO_Init+0x1f8>)
 80035cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80035ce:	4b65      	ldr	r3, [pc, #404]	@ (8003764 <MX_GPIO_Init+0x1f8>)
 80035d0:	2102      	movs	r1, #2
 80035d2:	430a      	orrs	r2, r1
 80035d4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80035d6:	4b63      	ldr	r3, [pc, #396]	@ (8003764 <MX_GPIO_Init+0x1f8>)
 80035d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035da:	2202      	movs	r2, #2
 80035dc:	4013      	ands	r3, r2
 80035de:	607b      	str	r3, [r7, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|WDI_Pin|PAPER_ON_Pin, GPIO_PIN_RESET);
 80035e2:	4961      	ldr	r1, [pc, #388]	@ (8003768 <MX_GPIO_Init+0x1fc>)
 80035e4:	4b61      	ldr	r3, [pc, #388]	@ (800376c <MX_GPIO_Init+0x200>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	0018      	movs	r0, r3
 80035ea:	f003 fa97 	bl	8006b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_RTC_GPIO_Port, CE_RTC_Pin, GPIO_PIN_SET);
 80035ee:	2380      	movs	r3, #128	@ 0x80
 80035f0:	01db      	lsls	r3, r3, #7
 80035f2:	485e      	ldr	r0, [pc, #376]	@ (800376c <MX_GPIO_Init+0x200>)
 80035f4:	2201      	movs	r2, #1
 80035f6:	0019      	movs	r1, r3
 80035f8:	f003 fa90 	bl	8006b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D_C_Pin|RST_Pin, GPIO_PIN_RESET);
 80035fc:	2390      	movs	r3, #144	@ 0x90
 80035fe:	0119      	lsls	r1, r3, #4
 8003600:	23a0      	movs	r3, #160	@ 0xa0
 8003602:	05db      	lsls	r3, r3, #23
 8003604:	2200      	movs	r2, #0
 8003606:	0018      	movs	r0, r3
 8003608:	f003 fa88 	bl	8006b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSB_Pin|CS_Pin, GPIO_PIN_SET);
 800360c:	23a0      	movs	r3, #160	@ 0xa0
 800360e:	0159      	lsls	r1, r3, #5
 8003610:	23a0      	movs	r3, #160	@ 0xa0
 8003612:	05db      	lsls	r3, r3, #23
 8003614:	2201      	movs	r2, #1
 8003616:	0018      	movs	r0, r3
 8003618:	f003 fa80 	bl	8006b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800361c:	193b      	adds	r3, r7, r4
 800361e:	22e0      	movs	r2, #224	@ 0xe0
 8003620:	0212      	lsls	r2, r2, #8
 8003622:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003624:	193b      	adds	r3, r7, r4
 8003626:	2203      	movs	r2, #3
 8003628:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362a:	193b      	adds	r3, r7, r4
 800362c:	2200      	movs	r2, #0
 800362e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003630:	193b      	adds	r3, r7, r4
 8003632:	4a4f      	ldr	r2, [pc, #316]	@ (8003770 <MX_GPIO_Init+0x204>)
 8003634:	0019      	movs	r1, r3
 8003636:	0010      	movs	r0, r2
 8003638:	f003 f8fc 	bl	8006834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800363c:	193b      	adds	r3, r7, r4
 800363e:	220f      	movs	r2, #15
 8003640:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003642:	193b      	adds	r3, r7, r4
 8003644:	2203      	movs	r2, #3
 8003646:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003648:	193b      	adds	r3, r7, r4
 800364a:	2200      	movs	r2, #0
 800364c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800364e:	193b      	adds	r3, r7, r4
 8003650:	4a48      	ldr	r2, [pc, #288]	@ (8003774 <MX_GPIO_Init+0x208>)
 8003652:	0019      	movs	r1, r3
 8003654:	0010      	movs	r0, r2
 8003656:	f003 f8ed 	bl	8006834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15;
 800365a:	193b      	adds	r3, r7, r4
 800365c:	4a46      	ldr	r2, [pc, #280]	@ (8003778 <MX_GPIO_Init+0x20c>)
 800365e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003660:	193b      	adds	r3, r7, r4
 8003662:	2203      	movs	r2, #3
 8003664:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003666:	193b      	adds	r3, r7, r4
 8003668:	2200      	movs	r2, #0
 800366a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800366c:	193a      	adds	r2, r7, r4
 800366e:	23a0      	movs	r3, #160	@ 0xa0
 8003670:	05db      	lsls	r3, r3, #23
 8003672:	0011      	movs	r1, r2
 8003674:	0018      	movs	r0, r3
 8003676:	f003 f8dd 	bl	8006834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB10 PB11
                           PB3 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 800367a:	193b      	adds	r3, r7, r4
 800367c:	4a3f      	ldr	r2, [pc, #252]	@ (800377c <MX_GPIO_Init+0x210>)
 800367e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003680:	193b      	adds	r3, r7, r4
 8003682:	2203      	movs	r2, #3
 8003684:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003686:	193b      	adds	r3, r7, r4
 8003688:	2200      	movs	r2, #0
 800368a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800368c:	193b      	adds	r3, r7, r4
 800368e:	4a37      	ldr	r2, [pc, #220]	@ (800376c <MX_GPIO_Init+0x200>)
 8003690:	0019      	movs	r1, r3
 8003692:	0010      	movs	r0, r2
 8003694:	f003 f8ce 	bl	8006834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|WDI_Pin|PAPER_ON_Pin;
 8003698:	193b      	adds	r3, r7, r4
 800369a:	4a33      	ldr	r2, [pc, #204]	@ (8003768 <MX_GPIO_Init+0x1fc>)
 800369c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800369e:	193b      	adds	r3, r7, r4
 80036a0:	2201      	movs	r2, #1
 80036a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a4:	193b      	adds	r3, r7, r4
 80036a6:	2200      	movs	r2, #0
 80036a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036aa:	193b      	adds	r3, r7, r4
 80036ac:	2200      	movs	r2, #0
 80036ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036b0:	193b      	adds	r3, r7, r4
 80036b2:	4a2e      	ldr	r2, [pc, #184]	@ (800376c <MX_GPIO_Init+0x200>)
 80036b4:	0019      	movs	r1, r3
 80036b6:	0010      	movs	r0, r2
 80036b8:	f003 f8bc 	bl	8006834 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NIRQ_Pin;
 80036bc:	0021      	movs	r1, r4
 80036be:	187b      	adds	r3, r7, r1
 80036c0:	2280      	movs	r2, #128	@ 0x80
 80036c2:	0152      	lsls	r2, r2, #5
 80036c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036c6:	000c      	movs	r4, r1
 80036c8:	193b      	adds	r3, r7, r4
 80036ca:	2200      	movs	r2, #0
 80036cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ce:	193b      	adds	r3, r7, r4
 80036d0:	2200      	movs	r2, #0
 80036d2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NIRQ_GPIO_Port, &GPIO_InitStruct);
 80036d4:	193b      	adds	r3, r7, r4
 80036d6:	4a25      	ldr	r2, [pc, #148]	@ (800376c <MX_GPIO_Init+0x200>)
 80036d8:	0019      	movs	r1, r3
 80036da:	0010      	movs	r0, r2
 80036dc:	f003 f8aa 	bl	8006834 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_RTC_Pin;
 80036e0:	0021      	movs	r1, r4
 80036e2:	187b      	adds	r3, r7, r1
 80036e4:	2280      	movs	r2, #128	@ 0x80
 80036e6:	01d2      	lsls	r2, r2, #7
 80036e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036ea:	000c      	movs	r4, r1
 80036ec:	193b      	adds	r3, r7, r4
 80036ee:	2201      	movs	r2, #1
 80036f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f2:	193b      	adds	r3, r7, r4
 80036f4:	2200      	movs	r2, #0
 80036f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80036f8:	193b      	adds	r3, r7, r4
 80036fa:	2201      	movs	r2, #1
 80036fc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CE_RTC_GPIO_Port, &GPIO_InitStruct);
 80036fe:	193b      	adds	r3, r7, r4
 8003700:	4a1a      	ldr	r2, [pc, #104]	@ (800376c <MX_GPIO_Init+0x200>)
 8003702:	0019      	movs	r1, r3
 8003704:	0010      	movs	r0, r2
 8003706:	f003 f895 	bl	8006834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = D_C_Pin|CSB_Pin|RST_Pin|CS_Pin;
 800370a:	0021      	movs	r1, r4
 800370c:	187b      	adds	r3, r7, r1
 800370e:	22e8      	movs	r2, #232	@ 0xe8
 8003710:	0152      	lsls	r2, r2, #5
 8003712:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003714:	000c      	movs	r4, r1
 8003716:	193b      	adds	r3, r7, r4
 8003718:	2201      	movs	r2, #1
 800371a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371c:	193b      	adds	r3, r7, r4
 800371e:	2200      	movs	r2, #0
 8003720:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003722:	193b      	adds	r3, r7, r4
 8003724:	2200      	movs	r2, #0
 8003726:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003728:	193a      	adds	r2, r7, r4
 800372a:	23a0      	movs	r3, #160	@ 0xa0
 800372c:	05db      	lsls	r3, r3, #23
 800372e:	0011      	movs	r1, r2
 8003730:	0018      	movs	r0, r3
 8003732:	f003 f87f 	bl	8006834 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 8003736:	0021      	movs	r1, r4
 8003738:	187b      	adds	r3, r7, r1
 800373a:	2280      	movs	r2, #128	@ 0x80
 800373c:	0092      	lsls	r2, r2, #2
 800373e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003740:	187b      	adds	r3, r7, r1
 8003742:	2200      	movs	r2, #0
 8003744:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003746:	187b      	adds	r3, r7, r1
 8003748:	2200      	movs	r2, #0
 800374a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 800374c:	187a      	adds	r2, r7, r1
 800374e:	23a0      	movs	r3, #160	@ 0xa0
 8003750:	05db      	lsls	r3, r3, #23
 8003752:	0011      	movs	r1, r2
 8003754:	0018      	movs	r0, r3
 8003756:	f003 f86d 	bl	8006834 <HAL_GPIO_Init>

}
 800375a:	46c0      	nop			@ (mov r8, r8)
 800375c:	46bd      	mov	sp, r7
 800375e:	b00b      	add	sp, #44	@ 0x2c
 8003760:	bd90      	pop	{r4, r7, pc}
 8003762:	46c0      	nop			@ (mov r8, r8)
 8003764:	40021000 	.word	0x40021000
 8003768:	0000a002 	.word	0x0000a002
 800376c:	50000400 	.word	0x50000400
 8003770:	50000800 	.word	0x50000800
 8003774:	50001400 	.word	0x50001400
 8003778:	00008013 	.word	0x00008013
 800377c:	00000f3d 	.word	0x00000f3d

08003780 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003784:	4b1b      	ldr	r3, [pc, #108]	@ (80037f4 <MX_I2C1_Init+0x74>)
 8003786:	4a1c      	ldr	r2, [pc, #112]	@ (80037f8 <MX_I2C1_Init+0x78>)
 8003788:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800378a:	4b1a      	ldr	r3, [pc, #104]	@ (80037f4 <MX_I2C1_Init+0x74>)
 800378c:	4a1b      	ldr	r2, [pc, #108]	@ (80037fc <MX_I2C1_Init+0x7c>)
 800378e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003790:	4b18      	ldr	r3, [pc, #96]	@ (80037f4 <MX_I2C1_Init+0x74>)
 8003792:	2200      	movs	r2, #0
 8003794:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003796:	4b17      	ldr	r3, [pc, #92]	@ (80037f4 <MX_I2C1_Init+0x74>)
 8003798:	2201      	movs	r2, #1
 800379a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800379c:	4b15      	ldr	r3, [pc, #84]	@ (80037f4 <MX_I2C1_Init+0x74>)
 800379e:	2200      	movs	r2, #0
 80037a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80037a2:	4b14      	ldr	r3, [pc, #80]	@ (80037f4 <MX_I2C1_Init+0x74>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80037a8:	4b12      	ldr	r3, [pc, #72]	@ (80037f4 <MX_I2C1_Init+0x74>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80037ae:	4b11      	ldr	r3, [pc, #68]	@ (80037f4 <MX_I2C1_Init+0x74>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80037b4:	4b0f      	ldr	r3, [pc, #60]	@ (80037f4 <MX_I2C1_Init+0x74>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80037ba:	4b0e      	ldr	r3, [pc, #56]	@ (80037f4 <MX_I2C1_Init+0x74>)
 80037bc:	0018      	movs	r0, r3
 80037be:	f003 f9cb 	bl	8006b58 <HAL_I2C_Init>
 80037c2:	1e03      	subs	r3, r0, #0
 80037c4:	d001      	beq.n	80037ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80037c6:	f000 fb71 	bl	8003eac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80037ca:	4b0a      	ldr	r3, [pc, #40]	@ (80037f4 <MX_I2C1_Init+0x74>)
 80037cc:	2100      	movs	r1, #0
 80037ce:	0018      	movs	r0, r3
 80037d0:	f003 fa68 	bl	8006ca4 <HAL_I2CEx_ConfigAnalogFilter>
 80037d4:	1e03      	subs	r3, r0, #0
 80037d6:	d001      	beq.n	80037dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80037d8:	f000 fb68 	bl	8003eac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80037dc:	4b05      	ldr	r3, [pc, #20]	@ (80037f4 <MX_I2C1_Init+0x74>)
 80037de:	2100      	movs	r1, #0
 80037e0:	0018      	movs	r0, r3
 80037e2:	f003 faab 	bl	8006d3c <HAL_I2CEx_ConfigDigitalFilter>
 80037e6:	1e03      	subs	r3, r0, #0
 80037e8:	d001      	beq.n	80037ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80037ea:	f000 fb5f 	bl	8003eac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80037ee:	46c0      	nop			@ (mov r8, r8)
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	200003c0 	.word	0x200003c0
 80037f8:	40005400 	.word	0x40005400
 80037fc:	00303d5b 	.word	0x00303d5b

08003800 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003800:	b590      	push	{r4, r7, lr}
 8003802:	b09b      	sub	sp, #108	@ 0x6c
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003808:	2354      	movs	r3, #84	@ 0x54
 800380a:	18fb      	adds	r3, r7, r3
 800380c:	0018      	movs	r0, r3
 800380e:	2314      	movs	r3, #20
 8003810:	001a      	movs	r2, r3
 8003812:	2100      	movs	r1, #0
 8003814:	f009 ffd2 	bl	800d7bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003818:	2410      	movs	r4, #16
 800381a:	193b      	adds	r3, r7, r4
 800381c:	0018      	movs	r0, r3
 800381e:	2344      	movs	r3, #68	@ 0x44
 8003820:	001a      	movs	r2, r3
 8003822:	2100      	movs	r1, #0
 8003824:	f009 ffca 	bl	800d7bc <memset>
  if(i2cHandle->Instance==I2C1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a22      	ldr	r2, [pc, #136]	@ (80038b8 <HAL_I2C_MspInit+0xb8>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d13d      	bne.n	80038ae <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003832:	193b      	adds	r3, r7, r4
 8003834:	2220      	movs	r2, #32
 8003836:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003838:	193b      	adds	r3, r7, r4
 800383a:	2200      	movs	r2, #0
 800383c:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800383e:	193b      	adds	r3, r7, r4
 8003840:	0018      	movs	r0, r3
 8003842:	f004 f973 	bl	8007b2c <HAL_RCCEx_PeriphCLKConfig>
 8003846:	1e03      	subs	r3, r0, #0
 8003848:	d001      	beq.n	800384e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800384a:	f000 fb2f 	bl	8003eac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800384e:	4b1b      	ldr	r3, [pc, #108]	@ (80038bc <HAL_I2C_MspInit+0xbc>)
 8003850:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003852:	4b1a      	ldr	r3, [pc, #104]	@ (80038bc <HAL_I2C_MspInit+0xbc>)
 8003854:	2102      	movs	r1, #2
 8003856:	430a      	orrs	r2, r1
 8003858:	64da      	str	r2, [r3, #76]	@ 0x4c
 800385a:	4b18      	ldr	r3, [pc, #96]	@ (80038bc <HAL_I2C_MspInit+0xbc>)
 800385c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800385e:	2202      	movs	r2, #2
 8003860:	4013      	ands	r3, r2
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003866:	2154      	movs	r1, #84	@ 0x54
 8003868:	187b      	adds	r3, r7, r1
 800386a:	22c0      	movs	r2, #192	@ 0xc0
 800386c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800386e:	187b      	adds	r3, r7, r1
 8003870:	2212      	movs	r2, #18
 8003872:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003874:	187b      	adds	r3, r7, r1
 8003876:	2200      	movs	r2, #0
 8003878:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800387a:	187b      	adds	r3, r7, r1
 800387c:	2200      	movs	r2, #0
 800387e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003880:	187b      	adds	r3, r7, r1
 8003882:	2204      	movs	r2, #4
 8003884:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003886:	187b      	adds	r3, r7, r1
 8003888:	4a0d      	ldr	r2, [pc, #52]	@ (80038c0 <HAL_I2C_MspInit+0xc0>)
 800388a:	0019      	movs	r1, r3
 800388c:	0010      	movs	r0, r2
 800388e:	f002 ffd1 	bl	8006834 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003892:	4b0a      	ldr	r3, [pc, #40]	@ (80038bc <HAL_I2C_MspInit+0xbc>)
 8003894:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003896:	4b09      	ldr	r3, [pc, #36]	@ (80038bc <HAL_I2C_MspInit+0xbc>)
 8003898:	2180      	movs	r1, #128	@ 0x80
 800389a:	0389      	lsls	r1, r1, #14
 800389c:	430a      	orrs	r2, r1
 800389e:	659a      	str	r2, [r3, #88]	@ 0x58
 80038a0:	4b06      	ldr	r3, [pc, #24]	@ (80038bc <HAL_I2C_MspInit+0xbc>)
 80038a2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80038a4:	2380      	movs	r3, #128	@ 0x80
 80038a6:	039b      	lsls	r3, r3, #14
 80038a8:	4013      	ands	r3, r2
 80038aa:	60bb      	str	r3, [r7, #8]
 80038ac:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80038ae:	46c0      	nop			@ (mov r8, r8)
 80038b0:	46bd      	mov	sp, r7
 80038b2:	b01b      	add	sp, #108	@ 0x6c
 80038b4:	bd90      	pop	{r4, r7, pc}
 80038b6:	46c0      	nop			@ (mov r8, r8)
 80038b8:	40005400 	.word	0x40005400
 80038bc:	40021000 	.word	0x40021000
 80038c0:	50000400 	.word	0x50000400

080038c4 <LL_PWR_ClearFlag_CSB>:
  * @brief  Clear standby and stop Flags
  * @rmtoll SCR          CSBF          LL_PWR_ClearFlag_CSB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_CSB(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CSBF);
 80038c8:	4b03      	ldr	r3, [pc, #12]	@ (80038d8 <LL_PWR_ClearFlag_CSB+0x14>)
 80038ca:	2280      	movs	r2, #128	@ 0x80
 80038cc:	0052      	lsls	r2, r2, #1
 80038ce:	619a      	str	r2, [r3, #24]
}
 80038d0:	46c0      	nop			@ (mov r8, r8)
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	46c0      	nop			@ (mov r8, r8)
 80038d8:	40007000 	.word	0x40007000

080038dc <LL_SPI_Enable>:
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2240      	movs	r2, #64	@ 0x40
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	601a      	str	r2, [r3, #0]
}
 80038f0:	46c0      	nop			@ (mov r8, r8)
 80038f2:	46bd      	mov	sp, r7
 80038f4:	b002      	add	sp, #8
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <LL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @rmtoll DBG_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80038fc:	4b04      	ldr	r3, [pc, #16]	@ (8003910 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	4b03      	ldr	r3, [pc, #12]	@ (8003910 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8003902:	2102      	movs	r1, #2
 8003904:	438a      	bics	r2, r1
 8003906:	605a      	str	r2, [r3, #4]
}
 8003908:	46c0      	nop			@ (mov r8, r8)
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	46c0      	nop			@ (mov r8, r8)
 8003910:	40015800 	.word	0x40015800

08003914 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003916:	b08b      	sub	sp, #44	@ 0x2c
 8003918:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */

  volatile int8_t rslt;
  uint8_t dev_addr = 0;
 800391a:	1dbb      	adds	r3, r7, #6
 800391c:	2200      	movs	r2, #0
 800391e:	701a      	strb	r2, [r3, #0]
  dev.intf_ptr = &dev_addr;
 8003920:	4baa      	ldr	r3, [pc, #680]	@ (8003bcc <main+0x2b8>)
 8003922:	1dba      	adds	r2, r7, #6
 8003924:	605a      	str	r2, [r3, #4]
  dev.intf = BME280_SPI_INTF;
 8003926:	4ba9      	ldr	r3, [pc, #676]	@ (8003bcc <main+0x2b8>)
 8003928:	2200      	movs	r2, #0
 800392a:	721a      	strb	r2, [r3, #8]
  dev.read = user_spi_read;
 800392c:	4ba7      	ldr	r3, [pc, #668]	@ (8003bcc <main+0x2b8>)
 800392e:	4aa8      	ldr	r2, [pc, #672]	@ (8003bd0 <main+0x2bc>)
 8003930:	60da      	str	r2, [r3, #12]
  dev.write = user_spi_write;
 8003932:	4ba6      	ldr	r3, [pc, #664]	@ (8003bcc <main+0x2b8>)
 8003934:	4aa7      	ldr	r2, [pc, #668]	@ (8003bd4 <main+0x2c0>)
 8003936:	611a      	str	r2, [r3, #16]
  dev.delay_us = user_delay_us;
 8003938:	4ba4      	ldr	r3, [pc, #656]	@ (8003bcc <main+0x2b8>)
 800393a:	4aa7      	ldr	r2, [pc, #668]	@ (8003bd8 <main+0x2c4>)
 800393c:	615a      	str	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800393e:	f002 fa16 	bl	8005d6e <HAL_Init>
  uint16_t h_;
  uint16_t t_;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003942:	f000 f973 	bl	8003c2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003946:	f7ff fe11 	bl	800356c <MX_GPIO_Init>
  MX_ADC1_Init();
 800394a:	f7ff fcaf 	bl	80032ac <MX_ADC1_Init>
  MX_I2C1_Init();
 800394e:	f7ff ff17 	bl	8003780 <MX_I2C1_Init>
  MX_RTC_Init();
 8003952:	f001 ff0d 	bl	8005770 <MX_RTC_Init>
  MX_SPI1_Init();
 8003956:	f001 ff85 	bl	8005864 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800395a:	f002 f931 	bl	8005bc0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  LL_DBGMCU_DisableDBGStopMode(); // !!!__ Disable debug in stop mode __!!!
 800395e:	f7ff ffcb 	bl	80038f8 <LL_DBGMCU_DisableDBGStopMode>
                                  //	LL_DBGMCU_EnableDBGStopMode();

  LED1_ON();
 8003962:	4b9e      	ldr	r3, [pc, #632]	@ (8003bdc <main+0x2c8>)
 8003964:	2202      	movs	r2, #2
 8003966:	619a      	str	r2, [r3, #24]
  LL_SPI_Enable(SPI1);
 8003968:	4b9d      	ldr	r3, [pc, #628]	@ (8003be0 <main+0x2cc>)
 800396a:	0018      	movs	r0, r3
 800396c:	f7ff ffb6 	bl	80038dc <LL_SPI_Enable>

  uint8_t wdalarm = read(REG_WEEKDAY_ALARM); // REG_WEEKDAY_ALARM  0x0e;
 8003970:	4b9c      	ldr	r3, [pc, #624]	@ (8003be4 <main+0x2d0>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2517      	movs	r5, #23
 8003976:	197c      	adds	r4, r7, r5
 8003978:	0018      	movs	r0, r3
 800397a:	f7ff fba3 	bl	80030c4 <read>
 800397e:	0003      	movs	r3, r0
 8003980:	7023      	strb	r3, [r4, #0]
  if ((wdalarm & 0xf8) != 0xa0)              // Startup from power up.
 8003982:	197b      	adds	r3, r7, r5
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	22f8      	movs	r2, #248	@ 0xf8
 8003988:	4013      	ands	r3, r2
 800398a:	2ba0      	cmp	r3, #160	@ 0xa0
 800398c:	d01c      	beq.n	80039c8 <main+0xb4>
  {
    uint32_t clk = HAL_RCC_GetSysClockFreq();
 800398e:	f003 ffa3 	bl	80078d8 <HAL_RCC_GetSysClockFreq>
 8003992:	0003      	movs	r3, r0
 8003994:	613b      	str	r3, [r7, #16]
    printf("\nMAIN. First power ON.   %d\n", clk);
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4b93      	ldr	r3, [pc, #588]	@ (8003be8 <main+0x2d4>)
 800399a:	0011      	movs	r1, r2
 800399c:	0018      	movs	r0, r3
 800399e:	f001 fe95 	bl	80056cc <printf_>
    resetConfig(0);
 80039a2:	2000      	movs	r0, #0
 80039a4:	f7fe fdca 	bl	800253c <resetConfig>
    write(REG_WEEKDAY_ALARM, 0xa0); // Magic 0xa0
 80039a8:	4b8e      	ldr	r3, [pc, #568]	@ (8003be4 <main+0x2d0>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	21a0      	movs	r1, #160	@ 0xa0
 80039ae:	0018      	movs	r0, r3
 80039b0:	f7ff fb98 	bl	80030e4 <write>
    clearRTCRam(1);
 80039b4:	2001      	movs	r0, #1
 80039b6:	f000 fa31 	bl	8003e1c <clearRTCRam>
    PAPER_ON_H(); // The initial values of the RAM locations are undefined.
 80039ba:	4b88      	ldr	r3, [pc, #544]	@ (8003bdc <main+0x2c8>)
 80039bc:	2280      	movs	r2, #128	@ 0x80
 80039be:	0212      	lsls	r2, r2, #8
 80039c0:	619a      	str	r2, [r3, #24]
    ESP_Init();
 80039c2:	f008 ff57 	bl	800c874 <ESP_Init>
 80039c6:	e00b      	b.n	80039e0 <main+0xcc>
  }
  else
  {
    PAPER_ON_H();
 80039c8:	4b84      	ldr	r3, [pc, #528]	@ (8003bdc <main+0x2c8>)
 80039ca:	2280      	movs	r2, #128	@ 0x80
 80039cc:	0212      	lsls	r2, r2, #8
 80039ce:	619a      	str	r2, [r3, #24]
    printf("\nMAIN. Startup from RTC\n");
 80039d0:	4b86      	ldr	r3, [pc, #536]	@ (8003bec <main+0x2d8>)
 80039d2:	0018      	movs	r0, r3
 80039d4:	f001 fe7a 	bl	80056cc <printf_>
    EPD_1IN54_V2_Reset();
 80039d8:	f007 fc67 	bl	800b2aa <EPD_1IN54_V2_Reset>
    ESP_Init_standby();
 80039dc:	f008 ffa2 	bl	800c924 <ESP_Init_standby>
  }

  printf("BME280");
 80039e0:	4b83      	ldr	r3, [pc, #524]	@ (8003bf0 <main+0x2dc>)
 80039e2:	0018      	movs	r0, r3
 80039e4:	f001 fe72 	bl	80056cc <printf_>
  dev.settings.osr_h = BME280_OVERSAMPLING_8X;
 80039e8:	4b78      	ldr	r3, [pc, #480]	@ (8003bcc <main+0x2b8>)
 80039ea:	2242      	movs	r2, #66	@ 0x42
 80039ec:	2104      	movs	r1, #4
 80039ee:	5499      	strb	r1, [r3, r2]
  dev.settings.osr_p = BME280_NO_OVERSAMPLING; // UINT8_C(0x00)
 80039f0:	4b76      	ldr	r3, [pc, #472]	@ (8003bcc <main+0x2b8>)
 80039f2:	2240      	movs	r2, #64	@ 0x40
 80039f4:	2100      	movs	r1, #0
 80039f6:	5499      	strb	r1, [r3, r2]
  dev.settings.osr_t = BME280_OVERSAMPLING_8X;
 80039f8:	4b74      	ldr	r3, [pc, #464]	@ (8003bcc <main+0x2b8>)
 80039fa:	2241      	movs	r2, #65	@ 0x41
 80039fc:	2104      	movs	r1, #4
 80039fe:	5499      	strb	r1, [r3, r2]
  dev.settings.filter = BME280_FILTER_COEFF_OFF;
 8003a00:	4b72      	ldr	r3, [pc, #456]	@ (8003bcc <main+0x2b8>)
 8003a02:	2243      	movs	r2, #67	@ 0x43
 8003a04:	2100      	movs	r1, #0
 8003a06:	5499      	strb	r1, [r3, r2]

  rslt = bme280_init(&dev);
 8003a08:	4b70      	ldr	r3, [pc, #448]	@ (8003bcc <main+0x2b8>)
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	f006 f85c 	bl	8009ac8 <bme280_init>
 8003a10:	0003      	movs	r3, r0
 8003a12:	001a      	movs	r2, r3
 8003a14:	1dfb      	adds	r3, r7, #7
 8003a16:	701a      	strb	r2, [r3, #0]
  if (rslt != BME280_OK) // OK = 0
 8003a18:	1dfb      	adds	r3, r7, #7
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	b25b      	sxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00a      	beq.n	8003a38 <main+0x124>
  {
    printf("Failed to initialize the device (code %+d).\n", rslt);
 8003a22:	1dfb      	adds	r3, r7, #7
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	b25b      	sxtb	r3, r3
 8003a28:	001a      	movs	r2, r3
 8003a2a:	4b72      	ldr	r3, [pc, #456]	@ (8003bf4 <main+0x2e0>)
 8003a2c:	0011      	movs	r1, r2
 8003a2e:	0018      	movs	r0, r3
 8003a30:	f001 fe4c 	bl	80056cc <printf_>
    Error_Handler();
 8003a34:	f000 fa3a 	bl	8003eac <Error_Handler>
  }

  // settings_sel = BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL;
  rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8003a38:	4b64      	ldr	r3, [pc, #400]	@ (8003bcc <main+0x2b8>)
 8003a3a:	0019      	movs	r1, r3
 8003a3c:	200f      	movs	r0, #15
 8003a3e:	f006 f9a5 	bl	8009d8c <bme280_set_sensor_settings>
 8003a42:	0003      	movs	r3, r0
 8003a44:	001a      	movs	r2, r3
 8003a46:	1dfb      	adds	r3, r7, #7
 8003a48:	701a      	strb	r2, [r3, #0]
  /*Calculate the minimum delay (ms) required between consecutive measurement based upon the sensor enabled
   *  and the oversampling configuration. */
  req_delay = bme280_cal_meas_delay(&dev.settings);
 8003a4a:	4b6b      	ldr	r3, [pc, #428]	@ (8003bf8 <main+0x2e4>)
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f006 fbe1 	bl	800a214 <bme280_cal_meas_delay>
 8003a52:	0002      	movs	r2, r0
 8003a54:	4b69      	ldr	r3, [pc, #420]	@ (8003bfc <main+0x2e8>)
 8003a56:	601a      	str	r2, [r3, #0]
  printf("req_delay = %d\n", req_delay);
 8003a58:	4b68      	ldr	r3, [pc, #416]	@ (8003bfc <main+0x2e8>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	4b68      	ldr	r3, [pc, #416]	@ (8003c00 <main+0x2ec>)
 8003a5e:	0011      	movs	r1, r2
 8003a60:	0018      	movs	r0, r3
 8003a62:	f001 fe33 	bl	80056cc <printf_>

  Activate_ADC();
 8003a66:	f7ff fd03 	bl	8003470 <Activate_ADC>
  int32_t vBat = get_vbat();
 8003a6a:	f7ff fccb 	bl	8003404 <get_vbat>
 8003a6e:	0003      	movs	r3, r0
 8003a70:	60fb      	str	r3, [r7, #12]
  printf("vBat = %d\n", vBat);
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4b63      	ldr	r3, [pc, #396]	@ (8003c04 <main+0x2f0>)
 8003a76:	0011      	movs	r1, r2
 8003a78:	0018      	movs	r0, r3
 8003a7a:	f001 fe27 	bl	80056cc <printf_>

  // =====================================================================
  rslt = stream_sensor_data_forced_mode(&dev); // working time = 0.8 sec
 8003a7e:	4b53      	ldr	r3, [pc, #332]	@ (8003bcc <main+0x2b8>)
 8003a80:	0018      	movs	r0, r3
 8003a82:	f000 f9a1 	bl	8003dc8 <stream_sensor_data_forced_mode>
 8003a86:	0003      	movs	r3, r0
 8003a88:	001a      	movs	r2, r3
 8003a8a:	1dfb      	adds	r3, r7, #7
 8003a8c:	701a      	strb	r2, [r3, #0]
  if (rslt != BME280_OK)
 8003a8e:	1dfb      	adds	r3, r7, #7
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	b25b      	sxtb	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00c      	beq.n	8003ab2 <main+0x19e>
  {
    fprintf(stderr, "Failed to stream sensor data (code %+d).", rslt);
 8003a98:	4b5b      	ldr	r3, [pc, #364]	@ (8003c08 <main+0x2f4>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68d8      	ldr	r0, [r3, #12]
 8003a9e:	1dfb      	adds	r3, r7, #7
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	b25b      	sxtb	r3, r3
 8003aa4:	001a      	movs	r2, r3
 8003aa6:	4b59      	ldr	r3, [pc, #356]	@ (8003c0c <main+0x2f8>)
 8003aa8:	0019      	movs	r1, r3
 8003aaa:	f009 fe0f 	bl	800d6cc <fiprintf>
    Error_Handler();
 8003aae:	f000 f9fd 	bl	8003eac <Error_Handler>
  }
  // h_ = comp_data.humidity / 1000.0;
  h_ = (((uint16_t)comp_data.humidity * 1049 + 500) >> 20); // fast_divide_by_1000
 8003ab2:	4b57      	ldr	r3, [pc, #348]	@ (8003c10 <main+0x2fc>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	001a      	movs	r2, r3
 8003aba:	0013      	movs	r3, r2
 8003abc:	019b      	lsls	r3, r3, #6
 8003abe:	189b      	adds	r3, r3, r2
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	189b      	adds	r3, r3, r2
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	189b      	adds	r3, r3, r2
 8003ac8:	33f5      	adds	r3, #245	@ 0xf5
 8003aca:	33ff      	adds	r3, #255	@ 0xff
 8003acc:	151a      	asrs	r2, r3, #20
 8003ace:	240a      	movs	r4, #10
 8003ad0:	193b      	adds	r3, r7, r4
 8003ad2:	801a      	strh	r2, [r3, #0]

  // t_ = comp_data.temperature / 10.0;
  t_ = (((uint16_t)comp_data.temperature * 6554 + 2) >> 16); // fast_divide_by_10
 8003ad4:	4b4e      	ldr	r3, [pc, #312]	@ (8003c10 <main+0x2fc>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	001a      	movs	r2, r3
 8003adc:	4b4d      	ldr	r3, [pc, #308]	@ (8003c14 <main+0x300>)
 8003ade:	4353      	muls	r3, r2
 8003ae0:	3302      	adds	r3, #2
 8003ae2:	141a      	asrs	r2, r3, #16
 8003ae4:	2308      	movs	r3, #8
 8003ae6:	18fb      	adds	r3, r7, r3
 8003ae8:	801a      	strh	r2, [r3, #0]

  read_RTCRam(H_old_RAM_address, &H_old, 1);
 8003aea:	4b4b      	ldr	r3, [pc, #300]	@ (8003c18 <main+0x304>)
 8003aec:	2201      	movs	r2, #1
 8003aee:	0019      	movs	r1, r3
 8003af0:	2040      	movs	r0, #64	@ 0x40
 8003af2:	f000 f8e3 	bl	8003cbc <read_RTCRam>
  read_RTCRam(T_old_RAM_address, &T_old, 1);
 8003af6:	4b49      	ldr	r3, [pc, #292]	@ (8003c1c <main+0x308>)
 8003af8:	2201      	movs	r2, #1
 8003afa:	0019      	movs	r1, r3
 8003afc:	2042      	movs	r0, #66	@ 0x42
 8003afe:	f000 f8dd 	bl	8003cbc <read_RTCRam>
  read_RTCRam(vbat_old_RAM_address, &vbat_old, 1);
 8003b02:	4b47      	ldr	r3, [pc, #284]	@ (8003c20 <main+0x30c>)
 8003b04:	2201      	movs	r2, #1
 8003b06:	0019      	movs	r1, r3
 8003b08:	2044      	movs	r0, #68	@ 0x44
 8003b0a:	f000 f8d7 	bl	8003cbc <read_RTCRam>

  printf("h_ = %d   h_old = %d   t_ = %d   t_old = %d  vBat = %d, vbat_old = %d\n", h_, H_old, t_, T_old, vBat, vbat_old);
 8003b0e:	0026      	movs	r6, r4
 8003b10:	193b      	adds	r3, r7, r4
 8003b12:	8819      	ldrh	r1, [r3, #0]
 8003b14:	4b40      	ldr	r3, [pc, #256]	@ (8003c18 <main+0x304>)
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	001d      	movs	r5, r3
 8003b1a:	2308      	movs	r3, #8
 8003b1c:	18fb      	adds	r3, r7, r3
 8003b1e:	881a      	ldrh	r2, [r3, #0]
 8003b20:	4b3e      	ldr	r3, [pc, #248]	@ (8003c1c <main+0x308>)
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	001c      	movs	r4, r3
 8003b26:	4b3e      	ldr	r3, [pc, #248]	@ (8003c20 <main+0x30c>)
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	483e      	ldr	r0, [pc, #248]	@ (8003c24 <main+0x310>)
 8003b2c:	9302      	str	r3, [sp, #8]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	9301      	str	r3, [sp, #4]
 8003b32:	9400      	str	r4, [sp, #0]
 8003b34:	0013      	movs	r3, r2
 8003b36:	002a      	movs	r2, r5
 8003b38:	f001 fdc8 	bl	80056cc <printf_>
  write_ToRTCRam(H_old_RAM_address, h_, 1);
 8003b3c:	19bb      	adds	r3, r7, r6
 8003b3e:	881b      	ldrh	r3, [r3, #0]
 8003b40:	2201      	movs	r2, #1
 8003b42:	0019      	movs	r1, r3
 8003b44:	2040      	movs	r0, #64	@ 0x40
 8003b46:	f000 f8e8 	bl	8003d1a <write_ToRTCRam>
  write_ToRTCRam(T_old_RAM_address, t_, 1);
 8003b4a:	2408      	movs	r4, #8
 8003b4c:	193b      	adds	r3, r7, r4
 8003b4e:	881b      	ldrh	r3, [r3, #0]
 8003b50:	2201      	movs	r2, #1
 8003b52:	0019      	movs	r1, r3
 8003b54:	2042      	movs	r0, #66	@ 0x42
 8003b56:	f000 f8e0 	bl	8003d1a <write_ToRTCRam>
  write_ToRTCRam(vbat_old_RAM_address, vBat, 1);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	2201      	movs	r2, #1
 8003b60:	0019      	movs	r1, r3
 8003b62:	2044      	movs	r0, #68	@ 0x44
 8003b64:	f000 f8d9 	bl	8003d1a <write_ToRTCRam>

  battery_out(vbat_old);
 8003b68:	4b2d      	ldr	r3, [pc, #180]	@ (8003c20 <main+0x30c>)
 8003b6a:	881b      	ldrh	r3, [r3, #0]
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	f008 fd81 	bl	800c674 <battery_out>
  humidity_out(h_);
 8003b72:	19bb      	adds	r3, r7, r6
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	0018      	movs	r0, r3
 8003b78:	f008 fe38 	bl	800c7ec <humidity_out>
  temperature_out(t_);
 8003b7c:	193b      	adds	r3, r7, r4
 8003b7e:	881b      	ldrh	r3, [r3, #0]
 8003b80:	0018      	movs	r0, r3
 8003b82:	f008 fddb 	bl	800c73c <temperature_out>
  EPD_1IN54_V2_DisplayPart(BlackImage);
 8003b86:	4b28      	ldr	r3, [pc, #160]	@ (8003c28 <main+0x314>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f007 fe5b 	bl	800b846 <EPD_1IN54_V2_DisplayPart>
  EPD_1IN54_V2_Sleep(); // Deep sleep mode
 8003b90:	f007 fea8 	bl	800b8e4 <EPD_1IN54_V2_Sleep>

  hex_dump();
 8003b94:	f7ff f972 	bl	8002e7c <hex_dump>
  HAL_Delay(5);
 8003b98:	2005      	movs	r0, #5
 8003b9a:	f002 f963 	bl	8005e64 <HAL_Delay>
  PAPER_ON_L();
 8003b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8003bdc <main+0x2c8>)
 8003ba0:	2280      	movs	r2, #128	@ 0x80
 8003ba2:	0612      	lsls	r2, r2, #24
 8003ba4:	619a      	str	r2, [r3, #24]
  deepPowerDown(30);
 8003ba6:	201e      	movs	r0, #30
 8003ba8:	f7fe fdba 	bl	8002720 <deepPowerDown>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Never be here
    LED1_ON();
 8003bac:	4b0b      	ldr	r3, [pc, #44]	@ (8003bdc <main+0x2c8>)
 8003bae:	2202      	movs	r2, #2
 8003bb0:	619a      	str	r2, [r3, #24]
    HAL_Delay(100);
 8003bb2:	2064      	movs	r0, #100	@ 0x64
 8003bb4:	f002 f956 	bl	8005e64 <HAL_Delay>
    LED1_OFF();
 8003bb8:	4b08      	ldr	r3, [pc, #32]	@ (8003bdc <main+0x2c8>)
 8003bba:	2280      	movs	r2, #128	@ 0x80
 8003bbc:	0292      	lsls	r2, r2, #10
 8003bbe:	619a      	str	r2, [r3, #24]
    HAL_Delay(100);
 8003bc0:	2064      	movs	r0, #100	@ 0x64
 8003bc2:	f002 f94f 	bl	8005e64 <HAL_Delay>
    LED1_ON();
 8003bc6:	46c0      	nop			@ (mov r8, r8)
 8003bc8:	e7f0      	b.n	8003bac <main+0x298>
 8003bca:	46c0      	nop			@ (mov r8, r8)
 8003bcc:	20000414 	.word	0x20000414
 8003bd0:	0800b071 	.word	0x0800b071
 8003bd4:	0800b0f9 	.word	0x0800b0f9
 8003bd8:	0800b00b 	.word	0x0800b00b
 8003bdc:	50000400 	.word	0x50000400
 8003be0:	40013000 	.word	0x40013000
 8003be4:	0800fa98 	.word	0x0800fa98
 8003be8:	0800f7fc 	.word	0x0800f7fc
 8003bec:	0800f81c 	.word	0x0800f81c
 8003bf0:	0800f838 	.word	0x0800f838
 8003bf4:	0800f840 	.word	0x0800f840
 8003bf8:	20000454 	.word	0x20000454
 8003bfc:	20000460 	.word	0x20000460
 8003c00:	0800f870 	.word	0x0800f870
 8003c04:	0800f880 	.word	0x0800f880
 8003c08:	2000017c 	.word	0x2000017c
 8003c0c:	0800f88c 	.word	0x0800f88c
 8003c10:	2000059c 	.word	0x2000059c
 8003c14:	0000199a 	.word	0x0000199a
 8003c18:	20000464 	.word	0x20000464
 8003c1c:	20000466 	.word	0x20000466
 8003c20:	20000468 	.word	0x20000468
 8003c24:	0800f8b8 	.word	0x0800f8b8
 8003c28:	200005c0 	.word	0x200005c0

08003c2c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003c2c:	b590      	push	{r4, r7, lr}
 8003c2e:	b099      	sub	sp, #100	@ 0x64
 8003c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c32:	2414      	movs	r4, #20
 8003c34:	193b      	adds	r3, r7, r4
 8003c36:	0018      	movs	r0, r3
 8003c38:	234c      	movs	r3, #76	@ 0x4c
 8003c3a:	001a      	movs	r2, r3
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	f009 fdbd 	bl	800d7bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c42:	1d3b      	adds	r3, r7, #4
 8003c44:	0018      	movs	r0, r3
 8003c46:	2310      	movs	r3, #16
 8003c48:	001a      	movs	r2, r3
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	f009 fdb6 	bl	800d7bc <memset>

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c50:	2380      	movs	r3, #128	@ 0x80
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	0018      	movs	r0, r3
 8003c56:	f003 f8bd 	bl	8006dd4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
 8003c5a:	193b      	adds	r3, r7, r4
 8003c5c:	220a      	movs	r2, #10
 8003c5e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c60:	193b      	adds	r3, r7, r4
 8003c62:	2280      	movs	r2, #128	@ 0x80
 8003c64:	0052      	lsls	r2, r2, #1
 8003c66:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003c68:	193b      	adds	r3, r7, r4
 8003c6a:	2240      	movs	r2, #64	@ 0x40
 8003c6c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003c6e:	193b      	adds	r3, r7, r4
 8003c70:	2201      	movs	r2, #1
 8003c72:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003c74:	193b      	adds	r3, r7, r4
 8003c76:	2200      	movs	r2, #0
 8003c78:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c7a:	193b      	adds	r3, r7, r4
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	f003 f915 	bl	8006eac <HAL_RCC_OscConfig>
 8003c82:	1e03      	subs	r3, r0, #0
 8003c84:	d001      	beq.n	8003c8a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8003c86:	f000 f911 	bl	8003eac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8003c8a:	1d3b      	adds	r3, r7, #4
 8003c8c:	2207      	movs	r2, #7
 8003c8e:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003c90:	1d3b      	adds	r3, r7, #4
 8003c92:	2201      	movs	r2, #1
 8003c94:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c96:	1d3b      	adds	r3, r7, #4
 8003c98:	2200      	movs	r2, #0
 8003c9a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003c9c:	1d3b      	adds	r3, r7, #4
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003ca2:	1d3b      	adds	r3, r7, #4
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	f003 fd2a 	bl	8007700 <HAL_RCC_ClockConfig>
 8003cac:	1e03      	subs	r3, r0, #0
 8003cae:	d001      	beq.n	8003cb4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003cb0:	f000 f8fc 	bl	8003eac <Error_Handler>
  }
}
 8003cb4:	46c0      	nop			@ (mov r8, r8)
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	b019      	add	sp, #100	@ 0x64
 8003cba:	bd90      	pop	{r4, r7, pc}

08003cbc <read_RTCRam>:

/* USER CODE BEGIN 4 */

// Function to read a uint16_t value from RTC RAM
bool read_RTCRam(uint8_t address, uint16_t *read_data, bool lock)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6039      	str	r1, [r7, #0]
 8003cc4:	0011      	movs	r1, r2
 8003cc6:	1dfb      	adds	r3, r7, #7
 8003cc8:	1c02      	adds	r2, r0, #0
 8003cca:	701a      	strb	r2, [r3, #0]
 8003ccc:	1dbb      	adds	r3, r7, #6
 8003cce:	1c0a      	adds	r2, r1, #0
 8003cd0:	701a      	strb	r2, [r3, #0]
  // Create a buffer to hold the data to be read
  uint8_t data[sizeof(uint16_t)];

  // Call the driver's readRam function
  if (!readRam(address, (uint8_t *)data, sizeof(data), lock))
 8003cd2:	1dfb      	adds	r3, r7, #7
 8003cd4:	7818      	ldrb	r0, [r3, #0]
 8003cd6:	1dbb      	adds	r3, r7, #6
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	220c      	movs	r2, #12
 8003cdc:	18b9      	adds	r1, r7, r2
 8003cde:	2202      	movs	r2, #2
 8003ce0:	f7fe ff40 	bl	8002b64 <readRam>
 8003ce4:	0003      	movs	r3, r0
 8003ce6:	001a      	movs	r2, r3
 8003ce8:	2301      	movs	r3, #1
 8003cea:	4053      	eors	r3, r2
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <read_RTCRam+0x3a>
  {
    // If the read operation fails, return false
    return false;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	e00d      	b.n	8003d12 <read_RTCRam+0x56>
  }

  // Combine the two bytes into a uint16_t value
  *read_data = (uint16_t)data[0] | ((uint16_t)data[1] << 8);
 8003cf6:	210c      	movs	r1, #12
 8003cf8:	187b      	adds	r3, r7, r1
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	b21a      	sxth	r2, r3
 8003cfe:	187b      	adds	r3, r7, r1
 8003d00:	785b      	ldrb	r3, [r3, #1]
 8003d02:	021b      	lsls	r3, r3, #8
 8003d04:	b21b      	sxth	r3, r3
 8003d06:	4313      	orrs	r3, r2
 8003d08:	b21b      	sxth	r3, r3
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	801a      	strh	r2, [r3, #0]

  return true;
 8003d10:	2301      	movs	r3, #1
}
 8003d12:	0018      	movs	r0, r3
 8003d14:	46bd      	mov	sp, r7
 8003d16:	b004      	add	sp, #16
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <write_ToRTCRam>:

// Function to write a uint16_t value to RTC RAM
bool write_ToRTCRam(uint8_t address, uint16_t write_data, bool lock)
{
 8003d1a:	b590      	push	{r4, r7, lr}
 8003d1c:	b085      	sub	sp, #20
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	0004      	movs	r4, r0
 8003d22:	0008      	movs	r0, r1
 8003d24:	0011      	movs	r1, r2
 8003d26:	1dfb      	adds	r3, r7, #7
 8003d28:	1c22      	adds	r2, r4, #0
 8003d2a:	701a      	strb	r2, [r3, #0]
 8003d2c:	1d3b      	adds	r3, r7, #4
 8003d2e:	1c02      	adds	r2, r0, #0
 8003d30:	801a      	strh	r2, [r3, #0]
 8003d32:	1dbb      	adds	r3, r7, #6
 8003d34:	1c0a      	adds	r2, r1, #0
 8003d36:	701a      	strb	r2, [r3, #0]
  // Create a buffer to hold the data to be written
  uint8_t data[sizeof(uint16_t)];

  // Split the uint16_t value into two bytes
  data[0] = (uint8_t)(write_data & 0xFF);        // Lower byte
 8003d38:	1d3b      	adds	r3, r7, #4
 8003d3a:	881b      	ldrh	r3, [r3, #0]
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	210c      	movs	r1, #12
 8003d40:	187b      	adds	r3, r7, r1
 8003d42:	701a      	strb	r2, [r3, #0]
  data[1] = (uint8_t)((write_data >> 8) & 0xFF); // Upper byte
 8003d44:	1d3b      	adds	r3, r7, #4
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	0a1b      	lsrs	r3, r3, #8
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	187b      	adds	r3, r7, r1
 8003d50:	705a      	strb	r2, [r3, #1]

  // Call the driver's writeRam function
  return writeRam(address, (uint8_t *)data, sizeof(data), lock);
 8003d52:	1dfb      	adds	r3, r7, #7
 8003d54:	7818      	ldrb	r0, [r3, #0]
 8003d56:	1dbb      	adds	r3, r7, #6
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	1879      	adds	r1, r7, r1
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	f7fe ff6b 	bl	8002c38 <writeRam>
 8003d62:	0003      	movs	r3, r0
}
 8003d64:	0018      	movs	r0, r3
 8003d66:	46bd      	mov	sp, r7
 8003d68:	b005      	add	sp, #20
 8003d6a:	bd90      	pop	{r4, r7, pc}

08003d6c <print_error>:

void print_error(const char *func, uint32_t line)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  printf(" *** Error:  %s ,   %d\n", func, line);
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	6879      	ldr	r1, [r7, #4]
 8003d7a:	4b07      	ldr	r3, [pc, #28]	@ (8003d98 <print_error+0x2c>)
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	f001 fca5 	bl	80056cc <printf_>
  HAL_Delay(100);
 8003d82:	2064      	movs	r0, #100	@ 0x64
 8003d84:	f002 f86e 	bl	8005e64 <HAL_Delay>
  timeout_reset(__func__, __LINE__);
 8003d88:	239f      	movs	r3, #159	@ 0x9f
 8003d8a:	005a      	lsls	r2, r3, #1
 8003d8c:	4b03      	ldr	r3, [pc, #12]	@ (8003d9c <print_error+0x30>)
 8003d8e:	0011      	movs	r1, r2
 8003d90:	0018      	movs	r0, r3
 8003d92:	f000 f805 	bl	8003da0 <timeout_reset>
 8003d96:	46c0      	nop			@ (mov r8, r8)
 8003d98:	0800f900 	.word	0x0800f900
 8003d9c:	0800faac 	.word	0x0800faac

08003da0 <timeout_reset>:
}

__attribute__((noreturn)) void timeout_reset(const char *func, uint32_t line)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  LL_PWR_ClearFlag_CSB(); // Clear standby flag
 8003daa:	f7ff fd8b 	bl	80038c4 <LL_PWR_ClearFlag_CSB>
  printf(" *** timeout_reset:  %s    %d\n", func, line);
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	6879      	ldr	r1, [r7, #4]
 8003db2:	4b04      	ldr	r3, [pc, #16]	@ (8003dc4 <timeout_reset+0x24>)
 8003db4:	0018      	movs	r0, r3
 8003db6:	f001 fc89 	bl	80056cc <printf_>
  HAL_Delay(100);
 8003dba:	2064      	movs	r0, #100	@ 0x64
 8003dbc:	f002 f852 	bl	8005e64 <HAL_Delay>
  // NVIC_SystemReset();
  while (1)
 8003dc0:	46c0      	nop			@ (mov r8, r8)
 8003dc2:	e7fd      	b.n	8003dc0 <timeout_reset+0x20>
 8003dc4:	0800f918 	.word	0x0800f918

08003dc8 <stream_sensor_data_forced_mode>:
    ;
}

// Read BME280 data
int8_t stream_sensor_data_forced_mode(struct bme280_dev *dev)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  //	reslt = bme280_set_sensor_settings(settings_sel, dev);
  /*Calculate the minimum delay (ms) required between consecutive measurement based upon the sensor enabled
   *  and the oversampling configuration. */
  //	req_delay = bme280_cal_meas_delay(&dev->settings);
  //    printf("************  req_delay = %d\n",req_delay);
  reslt = bme280_set_sensor_mode(BME280_FORCED_MODE, dev);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	0019      	movs	r1, r3
 8003dd4:	2001      	movs	r0, #1
 8003dd6:	f006 f844 	bl	8009e62 <bme280_set_sensor_mode>
 8003dda:	0003      	movs	r3, r0
 8003ddc:	001a      	movs	r2, r3
 8003dde:	4b0c      	ldr	r3, [pc, #48]	@ (8003e10 <stream_sensor_data_forced_mode+0x48>)
 8003de0:	701a      	strb	r2, [r3, #0]
  /* Wait for the measurement to complete and print data  */

  HAL_Delay(req_delay); // 9 ms !!!
 8003de2:	4b0c      	ldr	r3, [pc, #48]	@ (8003e14 <stream_sensor_data_forced_mode+0x4c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	0018      	movs	r0, r3
 8003de8:	f002 f83c 	bl	8005e64 <HAL_Delay>

  reslt = bme280_get_sensor_data(BME280_TEMP | BME280_HUM, &comp_data, dev);
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	4b0a      	ldr	r3, [pc, #40]	@ (8003e18 <stream_sensor_data_forced_mode+0x50>)
 8003df0:	0019      	movs	r1, r3
 8003df2:	2006      	movs	r0, #6
 8003df4:	f006 f917 	bl	800a026 <bme280_get_sensor_data>
 8003df8:	0003      	movs	r3, r0
 8003dfa:	001a      	movs	r2, r3
 8003dfc:	4b04      	ldr	r3, [pc, #16]	@ (8003e10 <stream_sensor_data_forced_mode+0x48>)
 8003dfe:	701a      	strb	r2, [r3, #0]

  return reslt;
 8003e00:	4b03      	ldr	r3, [pc, #12]	@ (8003e10 <stream_sensor_data_forced_mode+0x48>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	b25b      	sxtb	r3, r3
}
 8003e06:	0018      	movs	r0, r3
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	b002      	add	sp, #8
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	46c0      	nop			@ (mov r8, r8)
 8003e10:	2000045c 	.word	0x2000045c
 8003e14:	20000460 	.word	0x20000460
 8003e18:	2000059c 	.word	0x2000059c

08003e1c <clearRTCRam>:

// Function to clear the entire RTC RAM
bool clearRTCRam(bool lock)
{
 8003e1c:	b590      	push	{r4, r7, lr}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	0002      	movs	r2, r0
 8003e24:	1dfb      	adds	r3, r7, #7
 8003e26:	701a      	strb	r2, [r3, #0]
  uint8_t addr = 0;
 8003e28:	210f      	movs	r1, #15
 8003e2a:	187b      	adds	r3, r7, r1
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	701a      	strb	r2, [r3, #0]
  uint8_t clearValue = 0x00;   // Value to write to clear the RAM
 8003e30:	230c      	movs	r3, #12
 8003e32:	18fb      	adds	r3, r7, r3
 8003e34:	2200      	movs	r2, #0
 8003e36:	701a      	strb	r2, [r3, #0]
  uint8_t RTC_RAM_SIZE = 0x80; // Size of the RTC RAM
 8003e38:	240e      	movs	r4, #14
 8003e3a:	193b      	adds	r3, r7, r4
 8003e3c:	2280      	movs	r2, #128	@ 0x80
 8003e3e:	701a      	strb	r2, [r3, #0]
  uint8_t size = addr + RTC_RAM_SIZE;
 8003e40:	230d      	movs	r3, #13
 8003e42:	18fb      	adds	r3, r7, r3
 8003e44:	0008      	movs	r0, r1
 8003e46:	1879      	adds	r1, r7, r1
 8003e48:	193a      	adds	r2, r7, r4
 8003e4a:	7809      	ldrb	r1, [r1, #0]
 8003e4c:	7812      	ldrb	r2, [r2, #0]
 8003e4e:	188a      	adds	r2, r1, r2
 8003e50:	701a      	strb	r2, [r3, #0]
  // Loop through the entire RTC RAM space and write the clear value
  // const uint8_t REG_RAM = 0x40;
  for (addr = REG_RAM; addr < size; ++addr)
 8003e52:	183b      	adds	r3, r7, r0
 8003e54:	4a14      	ldr	r2, [pc, #80]	@ (8003ea8 <clearRTCRam+0x8c>)
 8003e56:	7812      	ldrb	r2, [r2, #0]
 8003e58:	701a      	strb	r2, [r3, #0]
 8003e5a:	e018      	b.n	8003e8e <clearRTCRam+0x72>
  {
    if (!writeRam(addr, &clearValue, sizeof(clearValue), lock))
 8003e5c:	230f      	movs	r3, #15
 8003e5e:	18fb      	adds	r3, r7, r3
 8003e60:	7818      	ldrb	r0, [r3, #0]
 8003e62:	1dfb      	adds	r3, r7, #7
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	220c      	movs	r2, #12
 8003e68:	18b9      	adds	r1, r7, r2
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f7fe fee4 	bl	8002c38 <writeRam>
 8003e70:	0003      	movs	r3, r0
 8003e72:	001a      	movs	r2, r3
 8003e74:	2301      	movs	r3, #1
 8003e76:	4053      	eors	r3, r2
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <clearRTCRam+0x66>
    {
      // If the write operation fails, return false
      return false;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	e00e      	b.n	8003ea0 <clearRTCRam+0x84>
  for (addr = REG_RAM; addr < size; ++addr)
 8003e82:	220f      	movs	r2, #15
 8003e84:	18bb      	adds	r3, r7, r2
 8003e86:	18ba      	adds	r2, r7, r2
 8003e88:	7812      	ldrb	r2, [r2, #0]
 8003e8a:	3201      	adds	r2, #1
 8003e8c:	701a      	strb	r2, [r3, #0]
 8003e8e:	230f      	movs	r3, #15
 8003e90:	18fa      	adds	r2, r7, r3
 8003e92:	230d      	movs	r3, #13
 8003e94:	18fb      	adds	r3, r7, r3
 8003e96:	7812      	ldrb	r2, [r2, #0]
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d3de      	bcc.n	8003e5c <clearRTCRam+0x40>
    }
  }

  return true;
 8003e9e:	2301      	movs	r3, #1
}
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	b005      	add	sp, #20
 8003ea6:	bd90      	pop	{r4, r7, pc}
 8003ea8:	0800fa99 	.word	0x0800fa99

08003eac <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003eb0:	b672      	cpsid	i
}
 8003eb2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003eb4:	46c0      	nop			@ (mov r8, r8)
 8003eb6:	e7fd      	b.n	8003eb4 <Error_Handler+0x8>

08003eb8 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	607a      	str	r2, [r7, #4]
 8003ec2:	603b      	str	r3, [r7, #0]
 8003ec4:	210f      	movs	r1, #15
 8003ec6:	187b      	adds	r3, r7, r1
 8003ec8:	1c02      	adds	r2, r0, #0
 8003eca:	701a      	strb	r2, [r3, #0]
  if (idx < maxlen) {
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d205      	bcs.n	8003ee0 <_out_buffer+0x28>
    ((char*)buffer)[idx] = character;
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	18d3      	adds	r3, r2, r3
 8003eda:	187a      	adds	r2, r7, r1
 8003edc:	7812      	ldrb	r2, [r2, #0]
 8003ede:	701a      	strb	r2, [r3, #0]
  }
}
 8003ee0:	46c0      	nop			@ (mov r8, r8)
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	b004      	add	sp, #16
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60b9      	str	r1, [r7, #8]
 8003ef0:	607a      	str	r2, [r7, #4]
 8003ef2:	603b      	str	r3, [r7, #0]
 8003ef4:	230f      	movs	r3, #15
 8003ef6:	18fb      	adds	r3, r7, r3
 8003ef8:	1c02      	adds	r2, r0, #0
 8003efa:	701a      	strb	r2, [r3, #0]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8003efc:	46c0      	nop			@ (mov r8, r8)
 8003efe:	46bd      	mov	sp, r7
 8003f00:	b004      	add	sp, #16
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60b9      	str	r1, [r7, #8]
 8003f0c:	607a      	str	r2, [r7, #4]
 8003f0e:	603b      	str	r3, [r7, #0]
 8003f10:	210f      	movs	r1, #15
 8003f12:	187b      	adds	r3, r7, r1
 8003f14:	1c02      	adds	r2, r0, #0
 8003f16:	701a      	strb	r2, [r3, #0]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8003f18:	000a      	movs	r2, r1
 8003f1a:	18bb      	adds	r3, r7, r2
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d004      	beq.n	8003f2c <_out_char+0x28>
    _putchar(character);
 8003f22:	18bb      	adds	r3, r7, r2
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	0018      	movs	r0, r3
 8003f28:	f001 fc0c 	bl	8005744 <_putchar>
  }
}
 8003f2c:	46c0      	nop			@ (mov r8, r8)
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	b004      	add	sp, #16
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	e002      	b.n	8003f4a <_strnlen_s+0x16>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	3301      	adds	r3, #1
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d004      	beq.n	8003f5c <_strnlen_s+0x28>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	1e5a      	subs	r2, r3, #1
 8003f56:	603a      	str	r2, [r7, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1f3      	bne.n	8003f44 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	1ad3      	subs	r3, r2, r3
}
 8003f62:	0018      	movs	r0, r3
 8003f64:	46bd      	mov	sp, r7
 8003f66:	b004      	add	sp, #16
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b082      	sub	sp, #8
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	0002      	movs	r2, r0
 8003f72:	1dfb      	adds	r3, r7, #7
 8003f74:	701a      	strb	r2, [r3, #0]
  return (ch >= '0') && (ch <= '9');
 8003f76:	1dfb      	adds	r3, r7, #7
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	2b2f      	cmp	r3, #47	@ 0x2f
 8003f7c:	d905      	bls.n	8003f8a <_is_digit+0x20>
 8003f7e:	1dfb      	adds	r3, r7, #7
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b39      	cmp	r3, #57	@ 0x39
 8003f84:	d801      	bhi.n	8003f8a <_is_digit+0x20>
 8003f86:	2301      	movs	r3, #1
 8003f88:	e000      	b.n	8003f8c <_is_digit+0x22>
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	1c1a      	adds	r2, r3, #0
 8003f8e:	2301      	movs	r3, #1
 8003f90:	4013      	ands	r3, r2
 8003f92:	b2db      	uxtb	r3, r3
}
 8003f94:	0018      	movs	r0, r3
 8003f96:	46bd      	mov	sp, r7
 8003f98:	b002      	add	sp, #8
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8003fa8:	e00e      	b.n	8003fc8 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	0013      	movs	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	189b      	adds	r3, r3, r2
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	1c59      	adds	r1, r3, #1
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6011      	str	r1, [r2, #0]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	18c3      	adds	r3, r0, r3
 8003fc4:	3b30      	subs	r3, #48	@ 0x30
 8003fc6:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	0018      	movs	r0, r3
 8003fd0:	f7ff ffcb 	bl	8003f6a <_is_digit>
 8003fd4:	1e03      	subs	r3, r0, #0
 8003fd6:	d1e8      	bne.n	8003faa <_atoi+0xe>
  }
  return i;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
}
 8003fda:	0018      	movs	r0, r3
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	b004      	add	sp, #16
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8003fe2:	b590      	push	{r4, r7, lr}
 8003fe4:	b087      	sub	sp, #28
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	60f8      	str	r0, [r7, #12]
 8003fea:	60b9      	str	r1, [r7, #8]
 8003fec:	607a      	str	r2, [r7, #4]
 8003fee:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8003ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	d124      	bne.n	8004046 <_out_rev+0x64>
 8003ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ffe:	2201      	movs	r2, #1
 8004000:	4013      	ands	r3, r2
 8004002:	d120      	bne.n	8004046 <_out_rev+0x64>
    for (size_t i = len; i < width; i++) {
 8004004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004006:	617b      	str	r3, [r7, #20]
 8004008:	e00a      	b.n	8004020 <_out_rev+0x3e>
      out(' ', buffer, idx++, maxlen);
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	1c53      	adds	r3, r2, #1
 800400e:	607b      	str	r3, [r7, #4]
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	68b9      	ldr	r1, [r7, #8]
 8004014:	68fc      	ldr	r4, [r7, #12]
 8004016:	2020      	movs	r0, #32
 8004018:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	3301      	adds	r3, #1
 800401e:	617b      	str	r3, [r7, #20]
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004024:	429a      	cmp	r2, r3
 8004026:	d3f0      	bcc.n	800400a <_out_rev+0x28>
    }
  }

  // reverse string
  while (len) {
 8004028:	e00d      	b.n	8004046 <_out_rev+0x64>
    out(buf[--len], buffer, idx++, maxlen);
 800402a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800402c:	3b01      	subs	r3, #1
 800402e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004030:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004034:	18d3      	adds	r3, r2, r3
 8004036:	7818      	ldrb	r0, [r3, #0]
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	1c53      	adds	r3, r2, #1
 800403c:	607b      	str	r3, [r7, #4]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	68b9      	ldr	r1, [r7, #8]
 8004042:	68fc      	ldr	r4, [r7, #12]
 8004044:	47a0      	blx	r4
  while (len) {
 8004046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1ee      	bne.n	800402a <_out_rev+0x48>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800404c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800404e:	2202      	movs	r2, #2
 8004050:	4013      	ands	r3, r2
 8004052:	d00e      	beq.n	8004072 <_out_rev+0x90>
    while (idx - start_idx < width) {
 8004054:	e007      	b.n	8004066 <_out_rev+0x84>
      out(' ', buffer, idx++, maxlen);
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	1c53      	adds	r3, r2, #1
 800405a:	607b      	str	r3, [r7, #4]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	68b9      	ldr	r1, [r7, #8]
 8004060:	68fc      	ldr	r4, [r7, #12]
 8004062:	2020      	movs	r0, #32
 8004064:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800406e:	429a      	cmp	r2, r3
 8004070:	d8f1      	bhi.n	8004056 <_out_rev+0x74>
    }
  }

  return idx;
 8004072:	687b      	ldr	r3, [r7, #4]
}
 8004074:	0018      	movs	r0, r3
 8004076:	46bd      	mov	sp, r7
 8004078:	b007      	add	sp, #28
 800407a:	bd90      	pop	{r4, r7, pc}

0800407c <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800407c:	b590      	push	{r4, r7, lr}
 800407e:	b089      	sub	sp, #36	@ 0x24
 8004080:	af04      	add	r7, sp, #16
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
 8004088:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800408a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800408c:	2202      	movs	r2, #2
 800408e:	4013      	ands	r3, r2
 8004090:	d134      	bne.n	80040fc <_ntoa_format+0x80>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8004092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004094:	2b00      	cmp	r3, #0
 8004096:	d017      	beq.n	80040c8 <_ntoa_format+0x4c>
 8004098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800409a:	2201      	movs	r2, #1
 800409c:	4013      	ands	r3, r2
 800409e:	d013      	beq.n	80040c8 <_ntoa_format+0x4c>
 80040a0:	2328      	movs	r3, #40	@ 0x28
 80040a2:	18fb      	adds	r3, r7, r3
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d103      	bne.n	80040b2 <_ntoa_format+0x36>
 80040aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ac:	220c      	movs	r2, #12
 80040ae:	4013      	ands	r3, r2
 80040b0:	d00a      	beq.n	80040c8 <_ntoa_format+0x4c>
      width--;
 80040b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040b4:	3b01      	subs	r3, #1
 80040b6:	637b      	str	r3, [r7, #52]	@ 0x34
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80040b8:	e006      	b.n	80040c8 <_ntoa_format+0x4c>
      buf[len++] = '0';
 80040ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040bc:	1c5a      	adds	r2, r3, #1
 80040be:	627a      	str	r2, [r7, #36]	@ 0x24
 80040c0:	6a3a      	ldr	r2, [r7, #32]
 80040c2:	18d3      	adds	r3, r2, r3
 80040c4:	2230      	movs	r2, #48	@ 0x30
 80040c6:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80040c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d20a      	bcs.n	80040e6 <_ntoa_format+0x6a>
 80040d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d2:	2b1f      	cmp	r3, #31
 80040d4:	d9f1      	bls.n	80040ba <_ntoa_format+0x3e>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80040d6:	e006      	b.n	80040e6 <_ntoa_format+0x6a>
      buf[len++] = '0';
 80040d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80040de:	6a3a      	ldr	r2, [r7, #32]
 80040e0:	18d3      	adds	r3, r2, r3
 80040e2:	2230      	movs	r2, #48	@ 0x30
 80040e4:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80040e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040e8:	2201      	movs	r2, #1
 80040ea:	4013      	ands	r3, r2
 80040ec:	d006      	beq.n	80040fc <_ntoa_format+0x80>
 80040ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d202      	bcs.n	80040fc <_ntoa_format+0x80>
 80040f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f8:	2b1f      	cmp	r3, #31
 80040fa:	d9ed      	bls.n	80040d8 <_ntoa_format+0x5c>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 80040fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040fe:	2210      	movs	r2, #16
 8004100:	4013      	ands	r3, r2
 8004102:	d056      	beq.n	80041b2 <_ntoa_format+0x136>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8004104:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004106:	2380      	movs	r3, #128	@ 0x80
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	4013      	ands	r3, r2
 800410c:	d116      	bne.n	800413c <_ntoa_format+0xc0>
 800410e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004110:	2b00      	cmp	r3, #0
 8004112:	d013      	beq.n	800413c <_ntoa_format+0xc0>
 8004114:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004118:	429a      	cmp	r2, r3
 800411a:	d003      	beq.n	8004124 <_ntoa_format+0xa8>
 800411c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800411e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004120:	429a      	cmp	r2, r3
 8004122:	d10b      	bne.n	800413c <_ntoa_format+0xc0>
      len--;
 8004124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004126:	3b01      	subs	r3, #1
 8004128:	627b      	str	r3, [r7, #36]	@ 0x24
      if (len && (base == 16U)) {
 800412a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412c:	2b00      	cmp	r3, #0
 800412e:	d005      	beq.n	800413c <_ntoa_format+0xc0>
 8004130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004132:	2b10      	cmp	r3, #16
 8004134:	d102      	bne.n	800413c <_ntoa_format+0xc0>
        len--;
 8004136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004138:	3b01      	subs	r3, #1
 800413a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800413c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800413e:	2b10      	cmp	r3, #16
 8004140:	d10e      	bne.n	8004160 <_ntoa_format+0xe4>
 8004142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004144:	2220      	movs	r2, #32
 8004146:	4013      	ands	r3, r2
 8004148:	d10a      	bne.n	8004160 <_ntoa_format+0xe4>
 800414a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414c:	2b1f      	cmp	r3, #31
 800414e:	d807      	bhi.n	8004160 <_ntoa_format+0xe4>
      buf[len++] = 'x';
 8004150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	627a      	str	r2, [r7, #36]	@ 0x24
 8004156:	6a3a      	ldr	r2, [r7, #32]
 8004158:	18d3      	adds	r3, r2, r3
 800415a:	2278      	movs	r2, #120	@ 0x78
 800415c:	701a      	strb	r2, [r3, #0]
 800415e:	e01e      	b.n	800419e <_ntoa_format+0x122>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004162:	2b10      	cmp	r3, #16
 8004164:	d10e      	bne.n	8004184 <_ntoa_format+0x108>
 8004166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004168:	2220      	movs	r2, #32
 800416a:	4013      	ands	r3, r2
 800416c:	d00a      	beq.n	8004184 <_ntoa_format+0x108>
 800416e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004170:	2b1f      	cmp	r3, #31
 8004172:	d807      	bhi.n	8004184 <_ntoa_format+0x108>
      buf[len++] = 'X';
 8004174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	627a      	str	r2, [r7, #36]	@ 0x24
 800417a:	6a3a      	ldr	r2, [r7, #32]
 800417c:	18d3      	adds	r3, r2, r3
 800417e:	2258      	movs	r2, #88	@ 0x58
 8004180:	701a      	strb	r2, [r3, #0]
 8004182:	e00c      	b.n	800419e <_ntoa_format+0x122>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004186:	2b02      	cmp	r3, #2
 8004188:	d109      	bne.n	800419e <_ntoa_format+0x122>
 800418a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418c:	2b1f      	cmp	r3, #31
 800418e:	d806      	bhi.n	800419e <_ntoa_format+0x122>
      buf[len++] = 'b';
 8004190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	627a      	str	r2, [r7, #36]	@ 0x24
 8004196:	6a3a      	ldr	r2, [r7, #32]
 8004198:	18d3      	adds	r3, r2, r3
 800419a:	2262      	movs	r2, #98	@ 0x62
 800419c:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800419e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a0:	2b1f      	cmp	r3, #31
 80041a2:	d806      	bhi.n	80041b2 <_ntoa_format+0x136>
      buf[len++] = '0';
 80041a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a6:	1c5a      	adds	r2, r3, #1
 80041a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80041aa:	6a3a      	ldr	r2, [r7, #32]
 80041ac:	18d3      	adds	r3, r2, r3
 80041ae:	2230      	movs	r2, #48	@ 0x30
 80041b0:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80041b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b4:	2b1f      	cmp	r3, #31
 80041b6:	d823      	bhi.n	8004200 <_ntoa_format+0x184>
    if (negative) {
 80041b8:	2328      	movs	r3, #40	@ 0x28
 80041ba:	18fb      	adds	r3, r7, r3
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d007      	beq.n	80041d2 <_ntoa_format+0x156>
      buf[len++] = '-';
 80041c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	627a      	str	r2, [r7, #36]	@ 0x24
 80041c8:	6a3a      	ldr	r2, [r7, #32]
 80041ca:	18d3      	adds	r3, r2, r3
 80041cc:	222d      	movs	r2, #45	@ 0x2d
 80041ce:	701a      	strb	r2, [r3, #0]
 80041d0:	e016      	b.n	8004200 <_ntoa_format+0x184>
    }
    else if (flags & FLAGS_PLUS) {
 80041d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d4:	2204      	movs	r2, #4
 80041d6:	4013      	ands	r3, r2
 80041d8:	d007      	beq.n	80041ea <_ntoa_format+0x16e>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80041da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041dc:	1c5a      	adds	r2, r3, #1
 80041de:	627a      	str	r2, [r7, #36]	@ 0x24
 80041e0:	6a3a      	ldr	r2, [r7, #32]
 80041e2:	18d3      	adds	r3, r2, r3
 80041e4:	222b      	movs	r2, #43	@ 0x2b
 80041e6:	701a      	strb	r2, [r3, #0]
 80041e8:	e00a      	b.n	8004200 <_ntoa_format+0x184>
    }
    else if (flags & FLAGS_SPACE) {
 80041ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ec:	2208      	movs	r2, #8
 80041ee:	4013      	ands	r3, r2
 80041f0:	d006      	beq.n	8004200 <_ntoa_format+0x184>
      buf[len++] = ' ';
 80041f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	627a      	str	r2, [r7, #36]	@ 0x24
 80041f8:	6a3a      	ldr	r2, [r7, #32]
 80041fa:	18d3      	adds	r3, r2, r3
 80041fc:	2220      	movs	r2, #32
 80041fe:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8004200:	683c      	ldr	r4, [r7, #0]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	68b9      	ldr	r1, [r7, #8]
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800420a:	9303      	str	r3, [sp, #12]
 800420c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800420e:	9302      	str	r3, [sp, #8]
 8004210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004212:	9301      	str	r3, [sp, #4]
 8004214:	6a3b      	ldr	r3, [r7, #32]
 8004216:	9300      	str	r3, [sp, #0]
 8004218:	0023      	movs	r3, r4
 800421a:	f7ff fee2 	bl	8003fe2 <_out_rev>
 800421e:	0003      	movs	r3, r0
}
 8004220:	0018      	movs	r0, r3
 8004222:	46bd      	mov	sp, r7
 8004224:	b005      	add	sp, #20
 8004226:	bd90      	pop	{r4, r7, pc}

08004228 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004228:	b590      	push	{r4, r7, lr}
 800422a:	b097      	sub	sp, #92	@ 0x5c
 800422c:	af08      	add	r7, sp, #32
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8004236:	2300      	movs	r3, #0
 8004238:	637b      	str	r3, [r7, #52]	@ 0x34

  // no hash for 0 values
  if (!value) {
 800423a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800423c:	2b00      	cmp	r3, #0
 800423e:	d103      	bne.n	8004248 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8004240:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004242:	2210      	movs	r2, #16
 8004244:	4393      	bics	r3, r2
 8004246:	65fb      	str	r3, [r7, #92]	@ 0x5c
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8004248:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800424a:	2380      	movs	r3, #128	@ 0x80
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	4013      	ands	r3, r2
 8004250:	d002      	beq.n	8004258 <_ntoa_long+0x30>
 8004252:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004254:	2b00      	cmp	r3, #0
 8004256:	d033      	beq.n	80042c0 <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 8004258:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800425a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800425c:	0018      	movs	r0, r3
 800425e:	f7fb fff5 	bl	800024c <__aeabi_uidivmod>
 8004262:	000b      	movs	r3, r1
 8004264:	001a      	movs	r2, r3
 8004266:	2133      	movs	r1, #51	@ 0x33
 8004268:	187b      	adds	r3, r7, r1
 800426a:	701a      	strb	r2, [r3, #0]
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800426c:	000a      	movs	r2, r1
 800426e:	18bb      	adds	r3, r7, r2
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b09      	cmp	r3, #9
 8004274:	d804      	bhi.n	8004280 <_ntoa_long+0x58>
 8004276:	18bb      	adds	r3, r7, r2
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	3330      	adds	r3, #48	@ 0x30
 800427c:	b2da      	uxtb	r2, r3
 800427e:	e00d      	b.n	800429c <_ntoa_long+0x74>
 8004280:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004282:	2220      	movs	r2, #32
 8004284:	4013      	ands	r3, r2
 8004286:	d001      	beq.n	800428c <_ntoa_long+0x64>
 8004288:	2341      	movs	r3, #65	@ 0x41
 800428a:	e000      	b.n	800428e <_ntoa_long+0x66>
 800428c:	2361      	movs	r3, #97	@ 0x61
 800428e:	2233      	movs	r2, #51	@ 0x33
 8004290:	18ba      	adds	r2, r7, r2
 8004292:	7812      	ldrb	r2, [r2, #0]
 8004294:	189b      	adds	r3, r3, r2
 8004296:	b2db      	uxtb	r3, r3
 8004298:	3b0a      	subs	r3, #10
 800429a:	b2da      	uxtb	r2, r3
 800429c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800429e:	1c59      	adds	r1, r3, #1
 80042a0:	6379      	str	r1, [r7, #52]	@ 0x34
 80042a2:	2110      	movs	r1, #16
 80042a4:	1879      	adds	r1, r7, r1
 80042a6:	54ca      	strb	r2, [r1, r3]
      value /= base;
 80042a8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80042aa:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80042ac:	f7fb ff48 	bl	8000140 <__udivsi3>
 80042b0:	0003      	movs	r3, r0
 80042b2:	64bb      	str	r3, [r7, #72]	@ 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80042b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <_ntoa_long+0x98>
 80042ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042bc:	2b1f      	cmp	r3, #31
 80042be:	d9cb      	bls.n	8004258 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80042c0:	683c      	ldr	r4, [r7, #0]
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	68b9      	ldr	r1, [r7, #8]
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042ca:	9306      	str	r3, [sp, #24]
 80042cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042ce:	9305      	str	r3, [sp, #20]
 80042d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042d2:	9304      	str	r3, [sp, #16]
 80042d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042d6:	9303      	str	r3, [sp, #12]
 80042d8:	234c      	movs	r3, #76	@ 0x4c
 80042da:	18fb      	adds	r3, r7, r3
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	9302      	str	r3, [sp, #8]
 80042e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042e2:	9301      	str	r3, [sp, #4]
 80042e4:	2310      	movs	r3, #16
 80042e6:	18fb      	adds	r3, r7, r3
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	0023      	movs	r3, r4
 80042ec:	f7ff fec6 	bl	800407c <_ntoa_format>
 80042f0:	0003      	movs	r3, r0
}
 80042f2:	0018      	movs	r0, r3
 80042f4:	46bd      	mov	sp, r7
 80042f6:	b00f      	add	sp, #60	@ 0x3c
 80042f8:	bd90      	pop	{r4, r7, pc}

080042fa <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80042fa:	b5b0      	push	{r4, r5, r7, lr}
 80042fc:	b096      	sub	sp, #88	@ 0x58
 80042fe:	af08      	add	r7, sp, #32
 8004300:	60f8      	str	r0, [r7, #12]
 8004302:	60b9      	str	r1, [r7, #8]
 8004304:	607a      	str	r2, [r7, #4]
 8004306:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	637b      	str	r3, [r7, #52]	@ 0x34

  // no hash for 0 values
  if (!value) {
 800430c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800430e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004310:	4313      	orrs	r3, r2
 8004312:	d103      	bne.n	800431c <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8004314:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004316:	2210      	movs	r2, #16
 8004318:	4393      	bics	r3, r2
 800431a:	66bb      	str	r3, [r7, #104]	@ 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800431c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800431e:	2380      	movs	r3, #128	@ 0x80
 8004320:	00db      	lsls	r3, r3, #3
 8004322:	4013      	ands	r3, r2
 8004324:	d003      	beq.n	800432e <_ntoa_long_long+0x34>
 8004326:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004328:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800432a:	4313      	orrs	r3, r2
 800432c:	d03a      	beq.n	80043a4 <_ntoa_long_long+0xaa>
    do {
      const char digit = (char)(value % base);
 800432e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8004330:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004332:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004334:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004336:	f7fc f8d5 	bl	80004e4 <__aeabi_uldivmod>
 800433a:	0010      	movs	r0, r2
 800433c:	0019      	movs	r1, r3
 800433e:	2433      	movs	r4, #51	@ 0x33
 8004340:	193b      	adds	r3, r7, r4
 8004342:	1c02      	adds	r2, r0, #0
 8004344:	701a      	strb	r2, [r3, #0]
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8004346:	0022      	movs	r2, r4
 8004348:	18bb      	adds	r3, r7, r2
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b09      	cmp	r3, #9
 800434e:	d804      	bhi.n	800435a <_ntoa_long_long+0x60>
 8004350:	18bb      	adds	r3, r7, r2
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	3330      	adds	r3, #48	@ 0x30
 8004356:	b2da      	uxtb	r2, r3
 8004358:	e00d      	b.n	8004376 <_ntoa_long_long+0x7c>
 800435a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800435c:	2220      	movs	r2, #32
 800435e:	4013      	ands	r3, r2
 8004360:	d001      	beq.n	8004366 <_ntoa_long_long+0x6c>
 8004362:	2341      	movs	r3, #65	@ 0x41
 8004364:	e000      	b.n	8004368 <_ntoa_long_long+0x6e>
 8004366:	2361      	movs	r3, #97	@ 0x61
 8004368:	2233      	movs	r2, #51	@ 0x33
 800436a:	18ba      	adds	r2, r7, r2
 800436c:	7812      	ldrb	r2, [r2, #0]
 800436e:	189b      	adds	r3, r3, r2
 8004370:	b2db      	uxtb	r3, r3
 8004372:	3b0a      	subs	r3, #10
 8004374:	b2da      	uxtb	r2, r3
 8004376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004378:	1c59      	adds	r1, r3, #1
 800437a:	6379      	str	r1, [r7, #52]	@ 0x34
 800437c:	2110      	movs	r1, #16
 800437e:	1879      	adds	r1, r7, r1
 8004380:	54ca      	strb	r2, [r1, r3]
      value /= base;
 8004382:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004384:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004386:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8004388:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800438a:	f7fc f8ab 	bl	80004e4 <__aeabi_uldivmod>
 800438e:	0002      	movs	r2, r0
 8004390:	000b      	movs	r3, r1
 8004392:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004394:	64fb      	str	r3, [r7, #76]	@ 0x4c
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8004396:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004398:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800439a:	4313      	orrs	r3, r2
 800439c:	d002      	beq.n	80043a4 <_ntoa_long_long+0xaa>
 800439e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043a0:	2b1f      	cmp	r3, #31
 80043a2:	d9c4      	bls.n	800432e <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80043a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043a6:	683d      	ldr	r5, [r7, #0]
 80043a8:	687c      	ldr	r4, [r7, #4]
 80043aa:	68b9      	ldr	r1, [r7, #8]
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80043b0:	9206      	str	r2, [sp, #24]
 80043b2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80043b4:	9205      	str	r2, [sp, #20]
 80043b6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80043b8:	9204      	str	r2, [sp, #16]
 80043ba:	9303      	str	r3, [sp, #12]
 80043bc:	2350      	movs	r3, #80	@ 0x50
 80043be:	18fb      	adds	r3, r7, r3
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	9302      	str	r3, [sp, #8]
 80043c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043c6:	9301      	str	r3, [sp, #4]
 80043c8:	2310      	movs	r3, #16
 80043ca:	18fb      	adds	r3, r7, r3
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	002b      	movs	r3, r5
 80043d0:	0022      	movs	r2, r4
 80043d2:	f7ff fe53 	bl	800407c <_ntoa_format>
 80043d6:	0003      	movs	r3, r0
}
 80043d8:	0018      	movs	r0, r3
 80043da:	46bd      	mov	sp, r7
 80043dc:	b00e      	add	sp, #56	@ 0x38
 80043de:	bdb0      	pop	{r4, r5, r7, pc}

080043e0 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80043e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043e2:	b09d      	sub	sp, #116	@ 0x74
 80043e4:	af06      	add	r7, sp, #24
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
 80043ec:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	657b      	str	r3, [r7, #84]	@ 0x54
  double diff = 0.0;
 80043f2:	2200      	movs	r2, #0
 80043f4:	2300      	movs	r3, #0
 80043f6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80043f8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 80043fa:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80043fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043fe:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8004400:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8004402:	f7fc f823 	bl	800044c <__aeabi_dcmpeq>
 8004406:	1e03      	subs	r3, r0, #0
 8004408:	d112      	bne.n	8004430 <_ftoa+0x50>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 800440a:	683c      	ldr	r4, [r7, #0]
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	68b9      	ldr	r1, [r7, #8]
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	2380      	movs	r3, #128	@ 0x80
 8004414:	18fb      	adds	r3, r7, r3
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	9303      	str	r3, [sp, #12]
 800441a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800441c:	9302      	str	r3, [sp, #8]
 800441e:	2303      	movs	r3, #3
 8004420:	9301      	str	r3, [sp, #4]
 8004422:	4bbf      	ldr	r3, [pc, #764]	@ (8004720 <_ftoa+0x340>)
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	0023      	movs	r3, r4
 8004428:	f7ff fddb 	bl	8003fe2 <_out_rev>
 800442c:	0003      	movs	r3, r0
 800442e:	e211      	b.n	8004854 <_ftoa+0x474>
  if (value < -DBL_MAX)
 8004430:	2201      	movs	r2, #1
 8004432:	4252      	negs	r2, r2
 8004434:	4bbb      	ldr	r3, [pc, #748]	@ (8004724 <_ftoa+0x344>)
 8004436:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8004438:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800443a:	f7fc f80d 	bl	8000458 <__aeabi_dcmplt>
 800443e:	1e03      	subs	r3, r0, #0
 8004440:	d012      	beq.n	8004468 <_ftoa+0x88>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8004442:	683c      	ldr	r4, [r7, #0]
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	68b9      	ldr	r1, [r7, #8]
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	2380      	movs	r3, #128	@ 0x80
 800444c:	18fb      	adds	r3, r7, r3
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	9303      	str	r3, [sp, #12]
 8004452:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004454:	9302      	str	r3, [sp, #8]
 8004456:	2304      	movs	r3, #4
 8004458:	9301      	str	r3, [sp, #4]
 800445a:	4bb3      	ldr	r3, [pc, #716]	@ (8004728 <_ftoa+0x348>)
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	0023      	movs	r3, r4
 8004460:	f7ff fdbf 	bl	8003fe2 <_out_rev>
 8004464:	0003      	movs	r3, r0
 8004466:	e1f5      	b.n	8004854 <_ftoa+0x474>
  if (value > DBL_MAX)
 8004468:	2201      	movs	r2, #1
 800446a:	4252      	negs	r2, r2
 800446c:	4baf      	ldr	r3, [pc, #700]	@ (800472c <_ftoa+0x34c>)
 800446e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8004470:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8004472:	f7fc f805 	bl	8000480 <__aeabi_dcmpgt>
 8004476:	1e03      	subs	r3, r0, #0
 8004478:	d024      	beq.n	80044c4 <_ftoa+0xe4>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800447a:	2380      	movs	r3, #128	@ 0x80
 800447c:	18fb      	adds	r3, r7, r3
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2204      	movs	r2, #4
 8004482:	4013      	ands	r3, r2
 8004484:	d001      	beq.n	800448a <_ftoa+0xaa>
 8004486:	4baa      	ldr	r3, [pc, #680]	@ (8004730 <_ftoa+0x350>)
 8004488:	e000      	b.n	800448c <_ftoa+0xac>
 800448a:	4baa      	ldr	r3, [pc, #680]	@ (8004734 <_ftoa+0x354>)
 800448c:	2280      	movs	r2, #128	@ 0x80
 800448e:	18ba      	adds	r2, r7, r2
 8004490:	6812      	ldr	r2, [r2, #0]
 8004492:	2104      	movs	r1, #4
 8004494:	400a      	ands	r2, r1
 8004496:	d001      	beq.n	800449c <_ftoa+0xbc>
 8004498:	2204      	movs	r2, #4
 800449a:	e000      	b.n	800449e <_ftoa+0xbe>
 800449c:	2203      	movs	r2, #3
 800449e:	683e      	ldr	r6, [r7, #0]
 80044a0:	687d      	ldr	r5, [r7, #4]
 80044a2:	68bc      	ldr	r4, [r7, #8]
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	2180      	movs	r1, #128	@ 0x80
 80044a8:	1879      	adds	r1, r7, r1
 80044aa:	6809      	ldr	r1, [r1, #0]
 80044ac:	9103      	str	r1, [sp, #12]
 80044ae:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80044b0:	9102      	str	r1, [sp, #8]
 80044b2:	9201      	str	r2, [sp, #4]
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	0033      	movs	r3, r6
 80044b8:	002a      	movs	r2, r5
 80044ba:	0021      	movs	r1, r4
 80044bc:	f7ff fd91 	bl	8003fe2 <_out_rev>
 80044c0:	0003      	movs	r3, r0
 80044c2:	e1c7      	b.n	8004854 <_ftoa+0x474>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 80044c4:	2200      	movs	r2, #0
 80044c6:	4b9c      	ldr	r3, [pc, #624]	@ (8004738 <_ftoa+0x358>)
 80044c8:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80044ca:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80044cc:	f7fb ffd8 	bl	8000480 <__aeabi_dcmpgt>
 80044d0:	1e03      	subs	r3, r0, #0
 80044d2:	d107      	bne.n	80044e4 <_ftoa+0x104>
 80044d4:	2200      	movs	r2, #0
 80044d6:	4b99      	ldr	r3, [pc, #612]	@ (800473c <_ftoa+0x35c>)
 80044d8:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80044da:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80044dc:	f7fb ffbc 	bl	8000458 <__aeabi_dcmplt>
 80044e0:	1e03      	subs	r3, r0, #0
 80044e2:	d015      	beq.n	8004510 <_ftoa+0x130>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80044e4:	683d      	ldr	r5, [r7, #0]
 80044e6:	687c      	ldr	r4, [r7, #4]
 80044e8:	68b9      	ldr	r1, [r7, #8]
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	2380      	movs	r3, #128	@ 0x80
 80044ee:	18fb      	adds	r3, r7, r3
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	9304      	str	r3, [sp, #16]
 80044f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80044f6:	9303      	str	r3, [sp, #12]
 80044f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044fa:	9302      	str	r3, [sp, #8]
 80044fc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80044fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004500:	9200      	str	r2, [sp, #0]
 8004502:	9301      	str	r3, [sp, #4]
 8004504:	002b      	movs	r3, r5
 8004506:	0022      	movs	r2, r4
 8004508:	f000 f9a8 	bl	800485c <_etoa>
 800450c:	0003      	movs	r3, r0
 800450e:	e1a1      	b.n	8004854 <_ftoa+0x474>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8004510:	2453      	movs	r4, #83	@ 0x53
 8004512:	193b      	adds	r3, r7, r4
 8004514:	2200      	movs	r2, #0
 8004516:	701a      	strb	r2, [r3, #0]
  if (value < 0) {
 8004518:	2200      	movs	r2, #0
 800451a:	2300      	movs	r3, #0
 800451c:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800451e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8004520:	f7fb ff9a 	bl	8000458 <__aeabi_dcmplt>
 8004524:	1e03      	subs	r3, r0, #0
 8004526:	d00c      	beq.n	8004542 <_ftoa+0x162>
    negative = true;
 8004528:	193b      	adds	r3, r7, r4
 800452a:	2201      	movs	r2, #1
 800452c:	701a      	strb	r2, [r3, #0]
    value = 0 - value;
 800452e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004530:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004532:	2000      	movs	r0, #0
 8004534:	2100      	movs	r1, #0
 8004536:	f7fd fb4f 	bl	8001bd8 <__aeabi_dsub>
 800453a:	0002      	movs	r2, r0
 800453c:	000b      	movs	r3, r1
 800453e:	673a      	str	r2, [r7, #112]	@ 0x70
 8004540:	677b      	str	r3, [r7, #116]	@ 0x74
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8004542:	2380      	movs	r3, #128	@ 0x80
 8004544:	18fb      	adds	r3, r7, r3
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	2380      	movs	r3, #128	@ 0x80
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	4013      	ands	r3, r2
 800454e:	d10c      	bne.n	800456a <_ftoa+0x18a>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8004550:	2306      	movs	r3, #6
 8004552:	67bb      	str	r3, [r7, #120]	@ 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8004554:	e009      	b.n	800456a <_ftoa+0x18a>
    buf[len++] = '0';
 8004556:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004558:	1c5a      	adds	r2, r3, #1
 800455a:	657a      	str	r2, [r7, #84]	@ 0x54
 800455c:	2210      	movs	r2, #16
 800455e:	18ba      	adds	r2, r7, r2
 8004560:	2130      	movs	r1, #48	@ 0x30
 8004562:	54d1      	strb	r1, [r2, r3]
    prec--;
 8004564:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004566:	3b01      	subs	r3, #1
 8004568:	67bb      	str	r3, [r7, #120]	@ 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800456a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800456c:	2b1f      	cmp	r3, #31
 800456e:	d802      	bhi.n	8004576 <_ftoa+0x196>
 8004570:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004572:	2b09      	cmp	r3, #9
 8004574:	d8ef      	bhi.n	8004556 <_ftoa+0x176>
  }

  int whole = (int)value;
 8004576:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8004578:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800457a:	f7fd feeb 	bl	8002354 <__aeabi_d2iz>
 800457e:	0003      	movs	r3, r0
 8004580:	64fb      	str	r3, [r7, #76]	@ 0x4c
  double tmp = (value - whole) * pow10[prec];
 8004582:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004584:	f7fd ff22 	bl	80023cc <__aeabi_i2d>
 8004588:	0002      	movs	r2, r0
 800458a:	000b      	movs	r3, r1
 800458c:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800458e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8004590:	f7fd fb22 	bl	8001bd8 <__aeabi_dsub>
 8004594:	0002      	movs	r2, r0
 8004596:	000b      	movs	r3, r1
 8004598:	0010      	movs	r0, r2
 800459a:	0019      	movs	r1, r3
 800459c:	4a68      	ldr	r2, [pc, #416]	@ (8004740 <_ftoa+0x360>)
 800459e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045a0:	00db      	lsls	r3, r3, #3
 80045a2:	18d3      	adds	r3, r2, r3
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f7fd f84e 	bl	8001648 <__aeabi_dmul>
 80045ac:	0002      	movs	r2, r0
 80045ae:	000b      	movs	r3, r1
 80045b0:	633a      	str	r2, [r7, #48]	@ 0x30
 80045b2:	637b      	str	r3, [r7, #52]	@ 0x34
  unsigned long frac = (unsigned long)tmp;
 80045b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80045b6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80045b8:	f7fb ffb4 	bl	8000524 <__aeabi_d2uiz>
 80045bc:	0003      	movs	r3, r0
 80045be:	64bb      	str	r3, [r7, #72]	@ 0x48
  diff = tmp - frac;
 80045c0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80045c2:	f7fd ff31 	bl	8002428 <__aeabi_ui2d>
 80045c6:	0002      	movs	r2, r0
 80045c8:	000b      	movs	r3, r1
 80045ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80045cc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80045ce:	f7fd fb03 	bl	8001bd8 <__aeabi_dsub>
 80045d2:	0002      	movs	r2, r0
 80045d4:	000b      	movs	r3, r1
 80045d6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80045d8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (diff > 0.5) {
 80045da:	2200      	movs	r2, #0
 80045dc:	4b59      	ldr	r3, [pc, #356]	@ (8004744 <_ftoa+0x364>)
 80045de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80045e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045e2:	f7fb ff4d 	bl	8000480 <__aeabi_dcmpgt>
 80045e6:	1e03      	subs	r3, r0, #0
 80045e8:	d015      	beq.n	8004616 <_ftoa+0x236>
    ++frac;
 80045ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045ec:	3301      	adds	r3, #1
 80045ee:	64bb      	str	r3, [r7, #72]	@ 0x48
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 80045f0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80045f2:	f7fd ff19 	bl	8002428 <__aeabi_ui2d>
 80045f6:	4a52      	ldr	r2, [pc, #328]	@ (8004740 <_ftoa+0x360>)
 80045f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	18d3      	adds	r3, r2, r3
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f7fb ff47 	bl	8000494 <__aeabi_dcmpge>
 8004606:	1e03      	subs	r3, r0, #0
 8004608:	d017      	beq.n	800463a <_ftoa+0x25a>
      frac = 0;
 800460a:	2300      	movs	r3, #0
 800460c:	64bb      	str	r3, [r7, #72]	@ 0x48
      ++whole;
 800460e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004610:	3301      	adds	r3, #1
 8004612:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004614:	e011      	b.n	800463a <_ftoa+0x25a>
    }
  }
  else if (diff < 0.5) {
 8004616:	2200      	movs	r2, #0
 8004618:	4b4a      	ldr	r3, [pc, #296]	@ (8004744 <_ftoa+0x364>)
 800461a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800461c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800461e:	f7fb ff1b 	bl	8000458 <__aeabi_dcmplt>
 8004622:	1e03      	subs	r3, r0, #0
 8004624:	d109      	bne.n	800463a <_ftoa+0x25a>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8004626:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <_ftoa+0x254>
 800462c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800462e:	2201      	movs	r2, #1
 8004630:	4013      	ands	r3, r2
 8004632:	d002      	beq.n	800463a <_ftoa+0x25a>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8004634:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004636:	3301      	adds	r3, #1
 8004638:	64bb      	str	r3, [r7, #72]	@ 0x48
  }

  if (prec == 0U) {
 800463a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800463c:	2b00      	cmp	r3, #0
 800463e:	d12f      	bne.n	80046a0 <_ftoa+0x2c0>
    diff = value - (double)whole;
 8004640:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004642:	f7fd fec3 	bl	80023cc <__aeabi_i2d>
 8004646:	0002      	movs	r2, r0
 8004648:	000b      	movs	r3, r1
 800464a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800464c:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800464e:	f7fd fac3 	bl	8001bd8 <__aeabi_dsub>
 8004652:	0002      	movs	r2, r0
 8004654:	000b      	movs	r3, r1
 8004656:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004658:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800465a:	2301      	movs	r3, #1
 800465c:	1c1c      	adds	r4, r3, #0
 800465e:	2200      	movs	r2, #0
 8004660:	4b38      	ldr	r3, [pc, #224]	@ (8004744 <_ftoa+0x364>)
 8004662:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004664:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004666:	f7fb fef7 	bl	8000458 <__aeabi_dcmplt>
 800466a:	1e03      	subs	r3, r0, #0
 800466c:	d101      	bne.n	8004672 <_ftoa+0x292>
 800466e:	2300      	movs	r3, #0
 8004670:	1c1c      	adds	r4, r3, #0
 8004672:	b2e3      	uxtb	r3, r4
 8004674:	2201      	movs	r2, #1
 8004676:	4053      	eors	r3, r2
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d107      	bne.n	800468e <_ftoa+0x2ae>
 800467e:	2200      	movs	r2, #0
 8004680:	4b30      	ldr	r3, [pc, #192]	@ (8004744 <_ftoa+0x364>)
 8004682:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004684:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004686:	f7fb fefb 	bl	8000480 <__aeabi_dcmpgt>
 800468a:	1e03      	subs	r3, r0, #0
 800468c:	d046      	beq.n	800471c <_ftoa+0x33c>
 800468e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004690:	2201      	movs	r2, #1
 8004692:	4013      	ands	r3, r2
 8004694:	d100      	bne.n	8004698 <_ftoa+0x2b8>
 8004696:	e070      	b.n	800477a <_ftoa+0x39a>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8004698:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800469a:	3301      	adds	r3, #1
 800469c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800469e:	e06c      	b.n	800477a <_ftoa+0x39a>
    }
  }
  else {
    unsigned int count = prec;
 80046a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046a2:	647b      	str	r3, [r7, #68]	@ 0x44
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80046a4:	e01b      	b.n	80046de <_ftoa+0x2fe>
      --count;
 80046a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046a8:	3b01      	subs	r3, #1
 80046aa:	647b      	str	r3, [r7, #68]	@ 0x44
      buf[len++] = (char)(48U + (frac % 10U));
 80046ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046ae:	210a      	movs	r1, #10
 80046b0:	0018      	movs	r0, r3
 80046b2:	f7fb fdcb 	bl	800024c <__aeabi_uidivmod>
 80046b6:	000b      	movs	r3, r1
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046bc:	1c59      	adds	r1, r3, #1
 80046be:	6579      	str	r1, [r7, #84]	@ 0x54
 80046c0:	3230      	adds	r2, #48	@ 0x30
 80046c2:	b2d1      	uxtb	r1, r2
 80046c4:	2210      	movs	r2, #16
 80046c6:	18ba      	adds	r2, r7, r2
 80046c8:	54d1      	strb	r1, [r2, r3]
      if (!(frac /= 10U)) {
 80046ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046cc:	210a      	movs	r1, #10
 80046ce:	0018      	movs	r0, r3
 80046d0:	f7fb fd36 	bl	8000140 <__udivsi3>
 80046d4:	0003      	movs	r3, r0
 80046d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <_ftoa+0x306>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80046de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046e0:	2b1f      	cmp	r3, #31
 80046e2:	d9e0      	bls.n	80046a6 <_ftoa+0x2c6>
 80046e4:	e008      	b.n	80046f8 <_ftoa+0x318>
        break;
 80046e6:	46c0      	nop			@ (mov r8, r8)
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80046e8:	e006      	b.n	80046f8 <_ftoa+0x318>
      buf[len++] = '0';
 80046ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	657a      	str	r2, [r7, #84]	@ 0x54
 80046f0:	2210      	movs	r2, #16
 80046f2:	18ba      	adds	r2, r7, r2
 80046f4:	2130      	movs	r1, #48	@ 0x30
 80046f6:	54d1      	strb	r1, [r2, r3]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80046f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046fa:	2b1f      	cmp	r3, #31
 80046fc:	d804      	bhi.n	8004708 <_ftoa+0x328>
 80046fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004700:	1e5a      	subs	r2, r3, #1
 8004702:	647a      	str	r2, [r7, #68]	@ 0x44
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1f0      	bne.n	80046ea <_ftoa+0x30a>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004708:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800470a:	2b1f      	cmp	r3, #31
 800470c:	d835      	bhi.n	800477a <_ftoa+0x39a>
      // add decimal
      buf[len++] = '.';
 800470e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004710:	1c5a      	adds	r2, r3, #1
 8004712:	657a      	str	r2, [r7, #84]	@ 0x54
 8004714:	2210      	movs	r2, #16
 8004716:	18ba      	adds	r2, r7, r2
 8004718:	212e      	movs	r1, #46	@ 0x2e
 800471a:	54d1      	strb	r1, [r2, r3]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800471c:	e02d      	b.n	800477a <_ftoa+0x39a>
 800471e:	46c0      	nop			@ (mov r8, r8)
 8004720:	0800f938 	.word	0x0800f938
 8004724:	ffefffff 	.word	0xffefffff
 8004728:	0800f93c 	.word	0x0800f93c
 800472c:	7fefffff 	.word	0x7fefffff
 8004730:	0800f944 	.word	0x0800f944
 8004734:	0800f94c 	.word	0x0800f94c
 8004738:	41cdcd65 	.word	0x41cdcd65
 800473c:	c1cdcd65 	.word	0xc1cdcd65
 8004740:	0800fc58 	.word	0x0800fc58
 8004744:	3fe00000 	.word	0x3fe00000
    buf[len++] = (char)(48 + (whole % 10));
 8004748:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800474a:	210a      	movs	r1, #10
 800474c:	0018      	movs	r0, r3
 800474e:	f7fb fe67 	bl	8000420 <__aeabi_idivmod>
 8004752:	000b      	movs	r3, r1
 8004754:	b2da      	uxtb	r2, r3
 8004756:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004758:	1c59      	adds	r1, r3, #1
 800475a:	6579      	str	r1, [r7, #84]	@ 0x54
 800475c:	3230      	adds	r2, #48	@ 0x30
 800475e:	b2d1      	uxtb	r1, r2
 8004760:	2210      	movs	r2, #16
 8004762:	18ba      	adds	r2, r7, r2
 8004764:	54d1      	strb	r1, [r2, r3]
    if (!(whole /= 10)) {
 8004766:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004768:	210a      	movs	r1, #10
 800476a:	0018      	movs	r0, r3
 800476c:	f7fb fd72 	bl	8000254 <__divsi3>
 8004770:	0003      	movs	r3, r0
 8004772:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004774:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <_ftoa+0x3a2>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800477a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800477c:	2b1f      	cmp	r3, #31
 800477e:	d9e3      	bls.n	8004748 <_ftoa+0x368>
 8004780:	e000      	b.n	8004784 <_ftoa+0x3a4>
      break;
 8004782:	46c0      	nop			@ (mov r8, r8)
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8004784:	2180      	movs	r1, #128	@ 0x80
 8004786:	187b      	adds	r3, r7, r1
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2202      	movs	r2, #2
 800478c:	4013      	ands	r3, r2
 800478e:	d123      	bne.n	80047d8 <_ftoa+0x3f8>
 8004790:	187b      	adds	r3, r7, r1
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2201      	movs	r2, #1
 8004796:	4013      	ands	r3, r2
 8004798:	d01e      	beq.n	80047d8 <_ftoa+0x3f8>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800479a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800479c:	2b00      	cmp	r3, #0
 800479e:	d014      	beq.n	80047ca <_ftoa+0x3ea>
 80047a0:	2353      	movs	r3, #83	@ 0x53
 80047a2:	18fb      	adds	r3, r7, r3
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d104      	bne.n	80047b4 <_ftoa+0x3d4>
 80047aa:	187b      	adds	r3, r7, r1
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	220c      	movs	r2, #12
 80047b0:	4013      	ands	r3, r2
 80047b2:	d00a      	beq.n	80047ca <_ftoa+0x3ea>
      width--;
 80047b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047b6:	3b01      	subs	r3, #1
 80047b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80047ba:	e006      	b.n	80047ca <_ftoa+0x3ea>
      buf[len++] = '0';
 80047bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047be:	1c5a      	adds	r2, r3, #1
 80047c0:	657a      	str	r2, [r7, #84]	@ 0x54
 80047c2:	2210      	movs	r2, #16
 80047c4:	18ba      	adds	r2, r7, r2
 80047c6:	2130      	movs	r1, #48	@ 0x30
 80047c8:	54d1      	strb	r1, [r2, r3]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80047ca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80047cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d202      	bcs.n	80047d8 <_ftoa+0x3f8>
 80047d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047d4:	2b1f      	cmp	r3, #31
 80047d6:	d9f1      	bls.n	80047bc <_ftoa+0x3dc>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80047d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047da:	2b1f      	cmp	r3, #31
 80047dc:	d827      	bhi.n	800482e <_ftoa+0x44e>
    if (negative) {
 80047de:	2353      	movs	r3, #83	@ 0x53
 80047e0:	18fb      	adds	r3, r7, r3
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d007      	beq.n	80047f8 <_ftoa+0x418>
      buf[len++] = '-';
 80047e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047ea:	1c5a      	adds	r2, r3, #1
 80047ec:	657a      	str	r2, [r7, #84]	@ 0x54
 80047ee:	2210      	movs	r2, #16
 80047f0:	18ba      	adds	r2, r7, r2
 80047f2:	212d      	movs	r1, #45	@ 0x2d
 80047f4:	54d1      	strb	r1, [r2, r3]
 80047f6:	e01a      	b.n	800482e <_ftoa+0x44e>
    }
    else if (flags & FLAGS_PLUS) {
 80047f8:	2380      	movs	r3, #128	@ 0x80
 80047fa:	18fb      	adds	r3, r7, r3
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2204      	movs	r2, #4
 8004800:	4013      	ands	r3, r2
 8004802:	d007      	beq.n	8004814 <_ftoa+0x434>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8004804:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004806:	1c5a      	adds	r2, r3, #1
 8004808:	657a      	str	r2, [r7, #84]	@ 0x54
 800480a:	2210      	movs	r2, #16
 800480c:	18ba      	adds	r2, r7, r2
 800480e:	212b      	movs	r1, #43	@ 0x2b
 8004810:	54d1      	strb	r1, [r2, r3]
 8004812:	e00c      	b.n	800482e <_ftoa+0x44e>
    }
    else if (flags & FLAGS_SPACE) {
 8004814:	2380      	movs	r3, #128	@ 0x80
 8004816:	18fb      	adds	r3, r7, r3
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2208      	movs	r2, #8
 800481c:	4013      	ands	r3, r2
 800481e:	d006      	beq.n	800482e <_ftoa+0x44e>
      buf[len++] = ' ';
 8004820:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004822:	1c5a      	adds	r2, r3, #1
 8004824:	657a      	str	r2, [r7, #84]	@ 0x54
 8004826:	2210      	movs	r2, #16
 8004828:	18ba      	adds	r2, r7, r2
 800482a:	2120      	movs	r1, #32
 800482c:	54d1      	strb	r1, [r2, r3]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800482e:	683c      	ldr	r4, [r7, #0]
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	68b9      	ldr	r1, [r7, #8]
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	2380      	movs	r3, #128	@ 0x80
 8004838:	18fb      	adds	r3, r7, r3
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	9303      	str	r3, [sp, #12]
 800483e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004840:	9302      	str	r3, [sp, #8]
 8004842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004844:	9301      	str	r3, [sp, #4]
 8004846:	2310      	movs	r3, #16
 8004848:	18fb      	adds	r3, r7, r3
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	0023      	movs	r3, r4
 800484e:	f7ff fbc8 	bl	8003fe2 <_out_rev>
 8004852:	0003      	movs	r3, r0
}
 8004854:	0018      	movs	r0, r3
 8004856:	46bd      	mov	sp, r7
 8004858:	b017      	add	sp, #92	@ 0x5c
 800485a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800485c <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800485c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800485e:	b0a7      	sub	sp, #156	@ 0x9c
 8004860:	af06      	add	r7, sp, #24
 8004862:	6478      	str	r0, [r7, #68]	@ 0x44
 8004864:	6439      	str	r1, [r7, #64]	@ 0x40
 8004866:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004868:	63bb      	str	r3, [r7, #56]	@ 0x38
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800486a:	2698      	movs	r6, #152	@ 0x98
 800486c:	19bb      	adds	r3, r7, r6
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	19b9      	adds	r1, r7, r6
 8004874:	6808      	ldr	r0, [r1, #0]
 8004876:	6849      	ldr	r1, [r1, #4]
 8004878:	f7fb fde8 	bl	800044c <__aeabi_dcmpeq>
 800487c:	1e03      	subs	r3, r0, #0
 800487e:	d013      	beq.n	80048a8 <_etoa+0x4c>
 8004880:	2201      	movs	r2, #1
 8004882:	4252      	negs	r2, r2
 8004884:	4bda      	ldr	r3, [pc, #872]	@ (8004bf0 <_etoa+0x394>)
 8004886:	19b9      	adds	r1, r7, r6
 8004888:	6808      	ldr	r0, [r1, #0]
 800488a:	6849      	ldr	r1, [r1, #4]
 800488c:	f7fb fdf8 	bl	8000480 <__aeabi_dcmpgt>
 8004890:	1e03      	subs	r3, r0, #0
 8004892:	d109      	bne.n	80048a8 <_etoa+0x4c>
 8004894:	2201      	movs	r2, #1
 8004896:	4252      	negs	r2, r2
 8004898:	4bd6      	ldr	r3, [pc, #856]	@ (8004bf4 <_etoa+0x398>)
 800489a:	19b9      	adds	r1, r7, r6
 800489c:	6808      	ldr	r0, [r1, #0]
 800489e:	6849      	ldr	r1, [r1, #4]
 80048a0:	f7fb fdda 	bl	8000458 <__aeabi_dcmplt>
 80048a4:	1e03      	subs	r3, r0, #0
 80048a6:	d01b      	beq.n	80048e0 <_etoa+0x84>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80048a8:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 80048aa:	6bfc      	ldr	r4, [r7, #60]	@ 0x3c
 80048ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048ae:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80048b0:	23a8      	movs	r3, #168	@ 0xa8
 80048b2:	18fb      	adds	r3, r7, r3
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	9304      	str	r3, [sp, #16]
 80048b8:	23a4      	movs	r3, #164	@ 0xa4
 80048ba:	18fb      	adds	r3, r7, r3
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	9303      	str	r3, [sp, #12]
 80048c0:	23a0      	movs	r3, #160	@ 0xa0
 80048c2:	18fb      	adds	r3, r7, r3
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	9302      	str	r3, [sp, #8]
 80048c8:	2398      	movs	r3, #152	@ 0x98
 80048ca:	18fb      	adds	r3, r7, r3
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	9200      	str	r2, [sp, #0]
 80048d2:	9301      	str	r3, [sp, #4]
 80048d4:	002b      	movs	r3, r5
 80048d6:	0022      	movs	r2, r4
 80048d8:	f7ff fd82 	bl	80043e0 <_ftoa>
 80048dc:	0003      	movs	r3, r0
 80048de:	e272      	b.n	8004dc6 <_etoa+0x56a>
  }

  // determine the sign
  const bool negative = value < 0;
 80048e0:	233b      	movs	r3, #59	@ 0x3b
 80048e2:	2238      	movs	r2, #56	@ 0x38
 80048e4:	189b      	adds	r3, r3, r2
 80048e6:	19de      	adds	r6, r3, r7
 80048e8:	2301      	movs	r3, #1
 80048ea:	73fb      	strb	r3, [r7, #15]
 80048ec:	2200      	movs	r2, #0
 80048ee:	2300      	movs	r3, #0
 80048f0:	2198      	movs	r1, #152	@ 0x98
 80048f2:	1879      	adds	r1, r7, r1
 80048f4:	6808      	ldr	r0, [r1, #0]
 80048f6:	6849      	ldr	r1, [r1, #4]
 80048f8:	f7fb fdae 	bl	8000458 <__aeabi_dcmplt>
 80048fc:	1e03      	subs	r3, r0, #0
 80048fe:	d101      	bne.n	8004904 <_etoa+0xa8>
 8004900:	2300      	movs	r3, #0
 8004902:	73fb      	strb	r3, [r7, #15]
 8004904:	7bfb      	ldrb	r3, [r7, #15]
 8004906:	7033      	strb	r3, [r6, #0]
  if (negative) {
 8004908:	233b      	movs	r3, #59	@ 0x3b
 800490a:	2238      	movs	r2, #56	@ 0x38
 800490c:	189b      	adds	r3, r3, r2
 800490e:	19db      	adds	r3, r3, r7
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00f      	beq.n	8004936 <_etoa+0xda>
    value = -value;
 8004916:	2198      	movs	r1, #152	@ 0x98
 8004918:	187b      	adds	r3, r7, r1
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	603b      	str	r3, [r7, #0]
 800491e:	239c      	movs	r3, #156	@ 0x9c
 8004920:	18fb      	adds	r3, r7, r3
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	2380      	movs	r3, #128	@ 0x80
 8004926:	061b      	lsls	r3, r3, #24
 8004928:	4053      	eors	r3, r2
 800492a:	607b      	str	r3, [r7, #4]
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	1879      	adds	r1, r7, r1
 8004932:	600a      	str	r2, [r1, #0]
 8004934:	604b      	str	r3, [r1, #4]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8004936:	23a8      	movs	r3, #168	@ 0xa8
 8004938:	18fb      	adds	r3, r7, r3
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	2380      	movs	r3, #128	@ 0x80
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	4013      	ands	r3, r2
 8004942:	d103      	bne.n	800494c <_etoa+0xf0>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8004944:	2306      	movs	r3, #6
 8004946:	22a0      	movs	r2, #160	@ 0xa0
 8004948:	18ba      	adds	r2, r7, r2
 800494a:	6013      	str	r3, [r2, #0]
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800494c:	2698      	movs	r6, #152	@ 0x98
 800494e:	19bb      	adds	r3, r7, r6
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004956:	64fb      	str	r3, [r7, #76]	@ 0x4c
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8004958:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800495a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800495c:	0d1b      	lsrs	r3, r3, #20
 800495e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004960:	2300      	movs	r3, #0
 8004962:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004966:	055b      	lsls	r3, r3, #21
 8004968:	0d5b      	lsrs	r3, r3, #21
 800496a:	4aa3      	ldr	r2, [pc, #652]	@ (8004bf8 <_etoa+0x39c>)
 800496c:	4694      	mov	ip, r2
 800496e:	4463      	add	r3, ip
 8004970:	66fb      	str	r3, [r7, #108]	@ 0x6c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8004972:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004974:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004976:	2100      	movs	r1, #0
 8004978:	0010      	movs	r0, r2
 800497a:	4388      	bics	r0, r1
 800497c:	0004      	movs	r4, r0
 800497e:	031b      	lsls	r3, r3, #12
 8004980:	0b1d      	lsrs	r5, r3, #12
 8004982:	2300      	movs	r3, #0
 8004984:	4323      	orrs	r3, r4
 8004986:	623b      	str	r3, [r7, #32]
 8004988:	4b9c      	ldr	r3, [pc, #624]	@ (8004bfc <_etoa+0x3a0>)
 800498a:	432b      	orrs	r3, r5
 800498c:	627b      	str	r3, [r7, #36]	@ 0x24
 800498e:	6a3b      	ldr	r3, [r7, #32]
 8004990:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8004992:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004994:	64fc      	str	r4, [r7, #76]	@ 0x4c
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8004996:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004998:	f7fd fd18 	bl	80023cc <__aeabi_i2d>
 800499c:	4a98      	ldr	r2, [pc, #608]	@ (8004c00 <_etoa+0x3a4>)
 800499e:	4b99      	ldr	r3, [pc, #612]	@ (8004c04 <_etoa+0x3a8>)
 80049a0:	f7fc fe52 	bl	8001648 <__aeabi_dmul>
 80049a4:	0002      	movs	r2, r0
 80049a6:	000b      	movs	r3, r1
 80049a8:	0010      	movs	r0, r2
 80049aa:	0019      	movs	r1, r3
 80049ac:	4a96      	ldr	r2, [pc, #600]	@ (8004c08 <_etoa+0x3ac>)
 80049ae:	4b97      	ldr	r3, [pc, #604]	@ (8004c0c <_etoa+0x3b0>)
 80049b0:	f7fb fea2 	bl	80006f8 <__aeabi_dadd>
 80049b4:	0002      	movs	r2, r0
 80049b6:	000b      	movs	r3, r1
 80049b8:	0014      	movs	r4, r2
 80049ba:	001d      	movs	r5, r3
 80049bc:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80049be:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80049c0:	2200      	movs	r2, #0
 80049c2:	4b93      	ldr	r3, [pc, #588]	@ (8004c10 <_etoa+0x3b4>)
 80049c4:	f7fd f908 	bl	8001bd8 <__aeabi_dsub>
 80049c8:	0002      	movs	r2, r0
 80049ca:	000b      	movs	r3, r1
 80049cc:	0010      	movs	r0, r2
 80049ce:	0019      	movs	r1, r3
 80049d0:	4a90      	ldr	r2, [pc, #576]	@ (8004c14 <_etoa+0x3b8>)
 80049d2:	4b91      	ldr	r3, [pc, #580]	@ (8004c18 <_etoa+0x3bc>)
 80049d4:	f7fc fe38 	bl	8001648 <__aeabi_dmul>
 80049d8:	0002      	movs	r2, r0
 80049da:	000b      	movs	r3, r1
 80049dc:	0020      	movs	r0, r4
 80049de:	0029      	movs	r1, r5
 80049e0:	f7fb fe8a 	bl	80006f8 <__aeabi_dadd>
 80049e4:	0002      	movs	r2, r0
 80049e6:	000b      	movs	r3, r1
 80049e8:	0010      	movs	r0, r2
 80049ea:	0019      	movs	r1, r3
 80049ec:	f7fd fcb2 	bl	8002354 <__aeabi_d2iz>
 80049f0:	0003      	movs	r3, r0
 80049f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 80049f4:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80049f6:	f7fd fce9 	bl	80023cc <__aeabi_i2d>
 80049fa:	4a88      	ldr	r2, [pc, #544]	@ (8004c1c <_etoa+0x3c0>)
 80049fc:	4b88      	ldr	r3, [pc, #544]	@ (8004c20 <_etoa+0x3c4>)
 80049fe:	f7fc fe23 	bl	8001648 <__aeabi_dmul>
 8004a02:	0002      	movs	r2, r0
 8004a04:	000b      	movs	r3, r1
 8004a06:	0010      	movs	r0, r2
 8004a08:	0019      	movs	r1, r3
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	4b85      	ldr	r3, [pc, #532]	@ (8004c24 <_etoa+0x3c8>)
 8004a0e:	f7fb fe73 	bl	80006f8 <__aeabi_dadd>
 8004a12:	0002      	movs	r2, r0
 8004a14:	000b      	movs	r3, r1
 8004a16:	0010      	movs	r0, r2
 8004a18:	0019      	movs	r1, r3
 8004a1a:	f7fd fc9b 	bl	8002354 <__aeabi_d2iz>
 8004a1e:	0003      	movs	r3, r0
 8004a20:	66fb      	str	r3, [r7, #108]	@ 0x6c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8004a22:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8004a24:	f7fd fcd2 	bl	80023cc <__aeabi_i2d>
 8004a28:	4a7f      	ldr	r2, [pc, #508]	@ (8004c28 <_etoa+0x3cc>)
 8004a2a:	4b80      	ldr	r3, [pc, #512]	@ (8004c2c <_etoa+0x3d0>)
 8004a2c:	f7fc fe0c 	bl	8001648 <__aeabi_dmul>
 8004a30:	0002      	movs	r2, r0
 8004a32:	000b      	movs	r3, r1
 8004a34:	0014      	movs	r4, r2
 8004a36:	001d      	movs	r5, r3
 8004a38:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004a3a:	f7fd fcc7 	bl	80023cc <__aeabi_i2d>
 8004a3e:	4a7c      	ldr	r2, [pc, #496]	@ (8004c30 <_etoa+0x3d4>)
 8004a40:	4b7c      	ldr	r3, [pc, #496]	@ (8004c34 <_etoa+0x3d8>)
 8004a42:	f7fc fe01 	bl	8001648 <__aeabi_dmul>
 8004a46:	0002      	movs	r2, r0
 8004a48:	000b      	movs	r3, r1
 8004a4a:	0020      	movs	r0, r4
 8004a4c:	0029      	movs	r1, r5
 8004a4e:	f7fd f8c3 	bl	8001bd8 <__aeabi_dsub>
 8004a52:	0002      	movs	r2, r0
 8004a54:	000b      	movs	r3, r1
 8004a56:	663a      	str	r2, [r7, #96]	@ 0x60
 8004a58:	667b      	str	r3, [r7, #100]	@ 0x64
  const double z2 = z * z;
 8004a5a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004a5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a5e:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8004a60:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8004a62:	f7fc fdf1 	bl	8001648 <__aeabi_dmul>
 8004a66:	0002      	movs	r2, r0
 8004a68:	000b      	movs	r3, r1
 8004a6a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004a6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8004a6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a70:	4a71      	ldr	r2, [pc, #452]	@ (8004c38 <_etoa+0x3dc>)
 8004a72:	4694      	mov	ip, r2
 8004a74:	4463      	add	r3, ip
 8004a76:	61bb      	str	r3, [r7, #24]
 8004a78:	17db      	asrs	r3, r3, #31
 8004a7a:	61fb      	str	r3, [r7, #28]
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	051b      	lsls	r3, r3, #20
 8004a80:	617b      	str	r3, [r7, #20]
 8004a82:	2300      	movs	r3, #0
 8004a84:	613b      	str	r3, [r7, #16]
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	697c      	ldr	r4, [r7, #20]
 8004a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a8c:	64fc      	str	r4, [r7, #76]	@ 0x4c
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8004a8e:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 8004a90:	6cfd      	ldr	r5, [r7, #76]	@ 0x4c
 8004a92:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8004a94:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8004a96:	0002      	movs	r2, r0
 8004a98:	000b      	movs	r3, r1
 8004a9a:	f7fb fe2d 	bl	80006f8 <__aeabi_dadd>
 8004a9e:	0002      	movs	r2, r0
 8004aa0:	000b      	movs	r3, r1
 8004aa2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004aa6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004aa8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004aaa:	2000      	movs	r0, #0
 8004aac:	2180      	movs	r1, #128	@ 0x80
 8004aae:	05c9      	lsls	r1, r1, #23
 8004ab0:	f7fd f892 	bl	8001bd8 <__aeabi_dsub>
 8004ab4:	0002      	movs	r2, r0
 8004ab6:	000b      	movs	r3, r1
 8004ab8:	623a      	str	r2, [r7, #32]
 8004aba:	627b      	str	r3, [r7, #36]	@ 0x24
 8004abc:	2200      	movs	r2, #0
 8004abe:	4b5f      	ldr	r3, [pc, #380]	@ (8004c3c <_etoa+0x3e0>)
 8004ac0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004ac2:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8004ac4:	f7fc f97c 	bl	8000dc0 <__aeabi_ddiv>
 8004ac8:	0002      	movs	r2, r0
 8004aca:	000b      	movs	r3, r1
 8004acc:	0010      	movs	r0, r2
 8004ace:	0019      	movs	r1, r3
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	4b5b      	ldr	r3, [pc, #364]	@ (8004c40 <_etoa+0x3e4>)
 8004ad4:	f7fb fe10 	bl	80006f8 <__aeabi_dadd>
 8004ad8:	0002      	movs	r2, r0
 8004ada:	000b      	movs	r3, r1
 8004adc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004ade:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8004ae0:	f7fc f96e 	bl	8000dc0 <__aeabi_ddiv>
 8004ae4:	0002      	movs	r2, r0
 8004ae6:	000b      	movs	r3, r1
 8004ae8:	0010      	movs	r0, r2
 8004aea:	0019      	movs	r1, r3
 8004aec:	2200      	movs	r2, #0
 8004aee:	4b55      	ldr	r3, [pc, #340]	@ (8004c44 <_etoa+0x3e8>)
 8004af0:	f7fb fe02 	bl	80006f8 <__aeabi_dadd>
 8004af4:	0002      	movs	r2, r0
 8004af6:	000b      	movs	r3, r1
 8004af8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004afa:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8004afc:	f7fc f960 	bl	8000dc0 <__aeabi_ddiv>
 8004b00:	0002      	movs	r2, r0
 8004b02:	000b      	movs	r3, r1
 8004b04:	6a38      	ldr	r0, [r7, #32]
 8004b06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b08:	f7fb fdf6 	bl	80006f8 <__aeabi_dadd>
 8004b0c:	0002      	movs	r2, r0
 8004b0e:	000b      	movs	r3, r1
 8004b10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b14:	f7fc f954 	bl	8000dc0 <__aeabi_ddiv>
 8004b18:	0002      	movs	r2, r0
 8004b1a:	000b      	movs	r3, r1
 8004b1c:	0010      	movs	r0, r2
 8004b1e:	0019      	movs	r1, r3
 8004b20:	2200      	movs	r2, #0
 8004b22:	4b36      	ldr	r3, [pc, #216]	@ (8004bfc <_etoa+0x3a0>)
 8004b24:	f7fb fde8 	bl	80006f8 <__aeabi_dadd>
 8004b28:	0002      	movs	r2, r0
 8004b2a:	000b      	movs	r3, r1
 8004b2c:	0020      	movs	r0, r4
 8004b2e:	0029      	movs	r1, r5
 8004b30:	f7fc fd8a 	bl	8001648 <__aeabi_dmul>
 8004b34:	0002      	movs	r2, r0
 8004b36:	000b      	movs	r3, r1
 8004b38:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  // correct for rounding errors
  if (value < conv.F) {
 8004b3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b40:	19b9      	adds	r1, r7, r6
 8004b42:	6808      	ldr	r0, [r1, #0]
 8004b44:	6849      	ldr	r1, [r1, #4]
 8004b46:	f7fb fc87 	bl	8000458 <__aeabi_dcmplt>
 8004b4a:	1e03      	subs	r3, r0, #0
 8004b4c:	d00c      	beq.n	8004b68 <_etoa+0x30c>
    expval--;
 8004b4e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b50:	3b01      	subs	r3, #1
 8004b52:	67fb      	str	r3, [r7, #124]	@ 0x7c
    conv.F /= 10;
 8004b54:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8004b56:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004b58:	2200      	movs	r2, #0
 8004b5a:	4b39      	ldr	r3, [pc, #228]	@ (8004c40 <_etoa+0x3e4>)
 8004b5c:	f7fc f930 	bl	8000dc0 <__aeabi_ddiv>
 8004b60:	0002      	movs	r2, r0
 8004b62:	000b      	movs	r3, r1
 8004b64:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8004b68:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b6a:	2b63      	cmp	r3, #99	@ 0x63
 8004b6c:	dc04      	bgt.n	8004b78 <_etoa+0x31c>
 8004b6e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b70:	3363      	adds	r3, #99	@ 0x63
 8004b72:	db01      	blt.n	8004b78 <_etoa+0x31c>
 8004b74:	2304      	movs	r3, #4
 8004b76:	e000      	b.n	8004b7a <_etoa+0x31e>
 8004b78:	2305      	movs	r3, #5
 8004b7a:	67bb      	str	r3, [r7, #120]	@ 0x78

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8004b7c:	23a8      	movs	r3, #168	@ 0xa8
 8004b7e:	18fb      	adds	r3, r7, r3
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	2380      	movs	r3, #128	@ 0x80
 8004b84:	011b      	lsls	r3, r3, #4
 8004b86:	4013      	ands	r3, r2
 8004b88:	d100      	bne.n	8004b8c <_etoa+0x330>
 8004b8a:	e074      	b.n	8004c76 <_etoa+0x41a>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8004b8c:	4a2e      	ldr	r2, [pc, #184]	@ (8004c48 <_etoa+0x3ec>)
 8004b8e:	4b2f      	ldr	r3, [pc, #188]	@ (8004c4c <_etoa+0x3f0>)
 8004b90:	2498      	movs	r4, #152	@ 0x98
 8004b92:	1939      	adds	r1, r7, r4
 8004b94:	6808      	ldr	r0, [r1, #0]
 8004b96:	6849      	ldr	r1, [r1, #4]
 8004b98:	f7fb fc7c 	bl	8000494 <__aeabi_dcmpge>
 8004b9c:	1e03      	subs	r3, r0, #0
 8004b9e:	d059      	beq.n	8004c54 <_etoa+0x3f8>
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	4b2b      	ldr	r3, [pc, #172]	@ (8004c50 <_etoa+0x3f4>)
 8004ba4:	1939      	adds	r1, r7, r4
 8004ba6:	6808      	ldr	r0, [r1, #0]
 8004ba8:	6849      	ldr	r1, [r1, #4]
 8004baa:	f7fb fc55 	bl	8000458 <__aeabi_dcmplt>
 8004bae:	1e03      	subs	r3, r0, #0
 8004bb0:	d050      	beq.n	8004c54 <_etoa+0x3f8>
      if ((int)prec > expval) {
 8004bb2:	21a0      	movs	r1, #160	@ 0xa0
 8004bb4:	187b      	adds	r3, r7, r1
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	da07      	bge.n	8004bce <_etoa+0x372>
        prec = (unsigned)((int)prec - expval - 1);
 8004bbe:	187b      	adds	r3, r7, r1
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	187a      	adds	r2, r7, r1
 8004bca:	6013      	str	r3, [r2, #0]
 8004bcc:	e003      	b.n	8004bd6 <_etoa+0x37a>
      }
      else {
        prec = 0;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	22a0      	movs	r2, #160	@ 0xa0
 8004bd2:	18ba      	adds	r2, r7, r2
 8004bd4:	6013      	str	r3, [r2, #0]
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8004bd6:	21a8      	movs	r1, #168	@ 0xa8
 8004bd8:	187b      	adds	r3, r7, r1
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2280      	movs	r2, #128	@ 0x80
 8004bde:	00d2      	lsls	r2, r2, #3
 8004be0:	4313      	orrs	r3, r2
 8004be2:	187a      	adds	r2, r7, r1
 8004be4:	6013      	str	r3, [r2, #0]
      // no characters in exponent
      minwidth = 0U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	67bb      	str	r3, [r7, #120]	@ 0x78
      expval   = 0;
 8004bea:	2300      	movs	r3, #0
 8004bec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004bee:	e042      	b.n	8004c76 <_etoa+0x41a>
 8004bf0:	7fefffff 	.word	0x7fefffff
 8004bf4:	ffefffff 	.word	0xffefffff
 8004bf8:	fffffc01 	.word	0xfffffc01
 8004bfc:	3ff00000 	.word	0x3ff00000
 8004c00:	509f79fb 	.word	0x509f79fb
 8004c04:	3fd34413 	.word	0x3fd34413
 8004c08:	8b60c8b3 	.word	0x8b60c8b3
 8004c0c:	3fc68a28 	.word	0x3fc68a28
 8004c10:	3ff80000 	.word	0x3ff80000
 8004c14:	636f4361 	.word	0x636f4361
 8004c18:	3fd287a7 	.word	0x3fd287a7
 8004c1c:	0979a371 	.word	0x0979a371
 8004c20:	400a934f 	.word	0x400a934f
 8004c24:	3fe00000 	.word	0x3fe00000
 8004c28:	bbb55516 	.word	0xbbb55516
 8004c2c:	40026bb1 	.word	0x40026bb1
 8004c30:	fefa39ef 	.word	0xfefa39ef
 8004c34:	3fe62e42 	.word	0x3fe62e42
 8004c38:	000003ff 	.word	0x000003ff
 8004c3c:	402c0000 	.word	0x402c0000
 8004c40:	40240000 	.word	0x40240000
 8004c44:	40180000 	.word	0x40180000
 8004c48:	eb1c432d 	.word	0xeb1c432d
 8004c4c:	3f1a36e2 	.word	0x3f1a36e2
 8004c50:	412e8480 	.word	0x412e8480
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8004c54:	21a0      	movs	r1, #160	@ 0xa0
 8004c56:	187b      	adds	r3, r7, r1
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00b      	beq.n	8004c76 <_etoa+0x41a>
 8004c5e:	23a8      	movs	r3, #168	@ 0xa8
 8004c60:	18fb      	adds	r3, r7, r3
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	2380      	movs	r3, #128	@ 0x80
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	4013      	ands	r3, r2
 8004c6a:	d004      	beq.n	8004c76 <_etoa+0x41a>
        --prec;
 8004c6c:	187b      	adds	r3, r7, r1
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3b01      	subs	r3, #1
 8004c72:	187a      	adds	r2, r7, r1
 8004c74:	6013      	str	r3, [r2, #0]
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8004c76:	22a4      	movs	r2, #164	@ 0xa4
 8004c78:	18bb      	adds	r3, r7, r2
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (width > minwidth) {
 8004c7e:	18bb      	adds	r3, r7, r2
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d904      	bls.n	8004c92 <_etoa+0x436>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8004c88:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004c8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004c90:	e001      	b.n	8004c96 <_etoa+0x43a>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8004c92:	2300      	movs	r3, #0
 8004c94:	677b      	str	r3, [r7, #116]	@ 0x74
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8004c96:	23a8      	movs	r3, #168	@ 0xa8
 8004c98:	18fb      	adds	r3, r7, r3
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2202      	movs	r2, #2
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	d004      	beq.n	8004cac <_etoa+0x450>
 8004ca2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d001      	beq.n	8004cac <_etoa+0x450>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	677b      	str	r3, [r7, #116]	@ 0x74
  }

  // rescale the float value
  if (expval) {
 8004cac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00c      	beq.n	8004ccc <_etoa+0x470>
    value /= conv.F;
 8004cb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cb6:	2498      	movs	r4, #152	@ 0x98
 8004cb8:	1939      	adds	r1, r7, r4
 8004cba:	6808      	ldr	r0, [r1, #0]
 8004cbc:	6849      	ldr	r1, [r1, #4]
 8004cbe:	f7fc f87f 	bl	8000dc0 <__aeabi_ddiv>
 8004cc2:	0002      	movs	r2, r0
 8004cc4:	000b      	movs	r3, r1
 8004cc6:	1939      	adds	r1, r7, r4
 8004cc8:	600a      	str	r2, [r1, #0]
 8004cca:	604b      	str	r3, [r1, #4]
  }

  // output the floating part
  const size_t start_idx = idx;
 8004ccc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cce:	657b      	str	r3, [r7, #84]	@ 0x54
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8004cd0:	233b      	movs	r3, #59	@ 0x3b
 8004cd2:	2238      	movs	r2, #56	@ 0x38
 8004cd4:	189b      	adds	r3, r3, r2
 8004cd6:	19db      	adds	r3, r3, r7
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00b      	beq.n	8004cf6 <_etoa+0x49a>
 8004cde:	2398      	movs	r3, #152	@ 0x98
 8004ce0:	18fb      	adds	r3, r7, r3
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ce6:	239c      	movs	r3, #156	@ 0x9c
 8004ce8:	18fb      	adds	r3, r7, r3
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2280      	movs	r2, #128	@ 0x80
 8004cee:	0612      	lsls	r2, r2, #24
 8004cf0:	405a      	eors	r2, r3
 8004cf2:	637a      	str	r2, [r7, #52]	@ 0x34
 8004cf4:	e005      	b.n	8004d02 <_etoa+0x4a6>
 8004cf6:	2398      	movs	r3, #152	@ 0x98
 8004cf8:	18fb      	adds	r3, r7, r3
 8004cfa:	685c      	ldr	r4, [r3, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d00:	637c      	str	r4, [r7, #52]	@ 0x34
 8004d02:	23a8      	movs	r3, #168	@ 0xa8
 8004d04:	18fa      	adds	r2, r7, r3
 8004d06:	6813      	ldr	r3, [r2, #0]
 8004d08:	4a31      	ldr	r2, [pc, #196]	@ (8004dd0 <_etoa+0x574>)
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8004d0e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004d10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d12:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8004d14:	9304      	str	r3, [sp, #16]
 8004d16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d18:	9303      	str	r3, [sp, #12]
 8004d1a:	25a0      	movs	r5, #160	@ 0xa0
 8004d1c:	197d      	adds	r5, r7, r5
 8004d1e:	682b      	ldr	r3, [r5, #0]
 8004d20:	9302      	str	r3, [sp, #8]
 8004d22:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
 8004d24:	6b7e      	ldr	r6, [r7, #52]	@ 0x34
 8004d26:	9500      	str	r5, [sp, #0]
 8004d28:	9601      	str	r6, [sp, #4]
 8004d2a:	0023      	movs	r3, r4
 8004d2c:	f7ff fb58 	bl	80043e0 <_ftoa>
 8004d30:	0003      	movs	r3, r0
 8004d32:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // output the exponent part
  if (minwidth) {
 8004d34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d044      	beq.n	8004dc4 <_etoa+0x568>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8004d3a:	23a8      	movs	r3, #168	@ 0xa8
 8004d3c:	18fb      	adds	r3, r7, r3
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2220      	movs	r2, #32
 8004d42:	4013      	ands	r3, r2
 8004d44:	d001      	beq.n	8004d4a <_etoa+0x4ee>
 8004d46:	2045      	movs	r0, #69	@ 0x45
 8004d48:	e000      	b.n	8004d4c <_etoa+0x4f0>
 8004d4a:	2065      	movs	r0, #101	@ 0x65
 8004d4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004d4e:	1c53      	adds	r3, r2, #1
 8004d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d56:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8004d58:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8004d5a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004d5c:	17da      	asrs	r2, r3, #31
 8004d5e:	189b      	adds	r3, r3, r2
 8004d60:	4053      	eors	r3, r2
 8004d62:	469c      	mov	ip, r3
 8004d64:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004d66:	0fdb      	lsrs	r3, r3, #31
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004d6c:	3a01      	subs	r2, #1
 8004d6e:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 8004d70:	6bfc      	ldr	r4, [r7, #60]	@ 0x3c
 8004d72:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d74:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8004d76:	2605      	movs	r6, #5
 8004d78:	9605      	str	r6, [sp, #20]
 8004d7a:	9204      	str	r2, [sp, #16]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	9203      	str	r2, [sp, #12]
 8004d80:	220a      	movs	r2, #10
 8004d82:	9202      	str	r2, [sp, #8]
 8004d84:	9301      	str	r3, [sp, #4]
 8004d86:	4663      	mov	r3, ip
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	002b      	movs	r3, r5
 8004d8c:	0022      	movs	r2, r4
 8004d8e:	f7ff fa4b 	bl	8004228 <_ntoa_long>
 8004d92:	0003      	movs	r3, r0
 8004d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8004d96:	23a8      	movs	r3, #168	@ 0xa8
 8004d98:	18fb      	adds	r3, r7, r3
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	4013      	ands	r3, r2
 8004da0:	d010      	beq.n	8004dc4 <_etoa+0x568>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8004da2:	e007      	b.n	8004db4 <_etoa+0x558>
 8004da4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004da6:	1c53      	adds	r3, r2, #1
 8004da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004dae:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8004db0:	2020      	movs	r0, #32
 8004db2:	47a0      	blx	r4
 8004db4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004db6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	22a4      	movs	r2, #164	@ 0xa4
 8004dbc:	18ba      	adds	r2, r7, r2
 8004dbe:	6812      	ldr	r2, [r2, #0]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d8ef      	bhi.n	8004da4 <_etoa+0x548>
    }
  }
  return idx;
 8004dc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	b021      	add	sp, #132	@ 0x84
 8004dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dce:	46c0      	nop			@ (mov r8, r8)
 8004dd0:	fffff7ff 	.word	0xfffff7ff

08004dd4 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8004dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dd6:	46c6      	mov	lr, r8
 8004dd8:	b500      	push	{lr}
 8004dda:	b0a6      	sub	sp, #152	@ 0x98
 8004ddc:	af0a      	add	r7, sp, #40	@ 0x28
 8004dde:	6278      	str	r0, [r7, #36]	@ 0x24
 8004de0:	6239      	str	r1, [r7, #32]
 8004de2:	61fa      	str	r2, [r7, #28]
 8004de4:	61bb      	str	r3, [r7, #24]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	65fb      	str	r3, [r7, #92]	@ 0x5c

  if (!buffer) {
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <_vsnprintf+0x20>
 8004df0:	f000 fc51 	bl	8005696 <_vsnprintf+0x8c2>
    // use null output function
    out = _out_null;
 8004df4:	4bad      	ldr	r3, [pc, #692]	@ (80050ac <_vsnprintf+0x2d8>)
 8004df6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  while (*format)
 8004df8:	f000 fc4d 	bl	8005696 <_vsnprintf+0x8c2>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b25      	cmp	r3, #37	@ 0x25
 8004e02:	d00d      	beq.n	8004e20 <_vsnprintf+0x4c>
      // no
      out(*format, buffer, idx++, maxlen);
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	7818      	ldrb	r0, [r3, #0]
 8004e08:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004e0a:	1c53      	adds	r3, r2, #1
 8004e0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	6a39      	ldr	r1, [r7, #32]
 8004e12:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8004e14:	47a0      	blx	r4
      format++;
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	61bb      	str	r3, [r7, #24]
      continue;
 8004e1c:	f000 fc3b 	bl	8005696 <_vsnprintf+0x8c2>
    }
    else {
      // yes, evaluate it
      format++;
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	3301      	adds	r3, #1
 8004e24:	61bb      	str	r3, [r7, #24]
    }

    // evaluate flags
    flags = 0U;
 8004e26:	2300      	movs	r3, #0
 8004e28:	66fb      	str	r3, [r7, #108]	@ 0x6c
    do {
      switch (*format) {
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	3b20      	subs	r3, #32
 8004e30:	2b10      	cmp	r3, #16
 8004e32:	d836      	bhi.n	8004ea2 <_vsnprintf+0xce>
 8004e34:	009a      	lsls	r2, r3, #2
 8004e36:	4b9e      	ldr	r3, [pc, #632]	@ (80050b0 <_vsnprintf+0x2dc>)
 8004e38:	18d3      	adds	r3, r2, r3
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	469f      	mov	pc, r3
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8004e3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e40:	2201      	movs	r2, #1
 8004e42:	4313      	orrs	r3, r2
 8004e44:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	61bb      	str	r3, [r7, #24]
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e50:	e02a      	b.n	8004ea8 <_vsnprintf+0xd4>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8004e52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e54:	2202      	movs	r2, #2
 8004e56:	4313      	orrs	r3, r2
 8004e58:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	61bb      	str	r3, [r7, #24]
 8004e60:	2301      	movs	r3, #1
 8004e62:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e64:	e020      	b.n	8004ea8 <_vsnprintf+0xd4>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8004e66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e68:	2204      	movs	r2, #4
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	3301      	adds	r3, #1
 8004e72:	61bb      	str	r3, [r7, #24]
 8004e74:	2301      	movs	r3, #1
 8004e76:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e78:	e016      	b.n	8004ea8 <_vsnprintf+0xd4>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8004e7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e7c:	2208      	movs	r2, #8
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	3301      	adds	r3, #1
 8004e86:	61bb      	str	r3, [r7, #24]
 8004e88:	2301      	movs	r3, #1
 8004e8a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e8c:	e00c      	b.n	8004ea8 <_vsnprintf+0xd4>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8004e8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e90:	2210      	movs	r2, #16
 8004e92:	4313      	orrs	r3, r2
 8004e94:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	61bb      	str	r3, [r7, #24]
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ea0:	e002      	b.n	8004ea8 <_vsnprintf+0xd4>
        default :                                   n = 0U; break;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ea6:	46c0      	nop			@ (mov r8, r8)
      }
    } while (n);
 8004ea8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1bd      	bne.n	8004e2a <_vsnprintf+0x56>

    // evaluate width field
    width = 0U;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (_is_digit(*format)) {
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	0018      	movs	r0, r3
 8004eb8:	f7ff f857 	bl	8003f6a <_is_digit>
 8004ebc:	1e03      	subs	r3, r0, #0
 8004ebe:	d007      	beq.n	8004ed0 <_vsnprintf+0xfc>
      width = _atoi(&format);
 8004ec0:	2318      	movs	r3, #24
 8004ec2:	18fb      	adds	r3, r7, r3
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	f7ff f869 	bl	8003f9c <_atoi>
 8004eca:	0003      	movs	r3, r0
 8004ecc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ece:	e01c      	b.n	8004f0a <_vsnprintf+0x136>
    }
    else if (*format == '*') {
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ed6:	d118      	bne.n	8004f0a <_vsnprintf+0x136>
      const int w = va_arg(va, int);
 8004ed8:	2388      	movs	r3, #136	@ 0x88
 8004eda:	18fb      	adds	r3, r7, r3
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	1d1a      	adds	r2, r3, #4
 8004ee0:	2188      	movs	r1, #136	@ 0x88
 8004ee2:	1879      	adds	r1, r7, r1
 8004ee4:	600a      	str	r2, [r1, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
      if (w < 0) {
 8004eea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	da07      	bge.n	8004f00 <_vsnprintf+0x12c>
        flags |= FLAGS_LEFT;    // reverse padding
 8004ef0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	66fb      	str	r3, [r7, #108]	@ 0x6c
        width = (unsigned int)-w;
 8004ef8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004efa:	425b      	negs	r3, r3
 8004efc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004efe:	e001      	b.n	8004f04 <_vsnprintf+0x130>
      }
      else {
        width = (unsigned int)w;
 8004f00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f02:	66bb      	str	r3, [r7, #104]	@ 0x68
      }
      format++;
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	3301      	adds	r3, #1
 8004f08:	61bb      	str	r3, [r7, #24]
    }

    // evaluate precision field
    precision = 0U;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (*format == '.') {
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f14:	d12b      	bne.n	8004f6e <_vsnprintf+0x19a>
      flags |= FLAGS_PRECISION;
 8004f16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f18:	2280      	movs	r2, #128	@ 0x80
 8004f1a:	00d2      	lsls	r2, r2, #3
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
      format++;
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	3301      	adds	r3, #1
 8004f24:	61bb      	str	r3, [r7, #24]
      if (_is_digit(*format)) {
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	0018      	movs	r0, r3
 8004f2c:	f7ff f81d 	bl	8003f6a <_is_digit>
 8004f30:	1e03      	subs	r3, r0, #0
 8004f32:	d007      	beq.n	8004f44 <_vsnprintf+0x170>
        precision = _atoi(&format);
 8004f34:	2318      	movs	r3, #24
 8004f36:	18fb      	adds	r3, r7, r3
 8004f38:	0018      	movs	r0, r3
 8004f3a:	f7ff f82f 	bl	8003f9c <_atoi>
 8004f3e:	0003      	movs	r3, r0
 8004f40:	667b      	str	r3, [r7, #100]	@ 0x64
 8004f42:	e014      	b.n	8004f6e <_vsnprintf+0x19a>
      }
      else if (*format == '*') {
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f4a:	d110      	bne.n	8004f6e <_vsnprintf+0x19a>
        const int prec = (int)va_arg(va, int);
 8004f4c:	2388      	movs	r3, #136	@ 0x88
 8004f4e:	18fb      	adds	r3, r7, r3
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	1d1a      	adds	r2, r3, #4
 8004f54:	2188      	movs	r1, #136	@ 0x88
 8004f56:	1879      	adds	r1, r7, r1
 8004f58:	600a      	str	r2, [r1, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	647b      	str	r3, [r7, #68]	@ 0x44
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8004f5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	da00      	bge.n	8004f66 <_vsnprintf+0x192>
 8004f64:	2300      	movs	r3, #0
 8004f66:	667b      	str	r3, [r7, #100]	@ 0x64
        format++;
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	61bb      	str	r3, [r7, #24]
      }
    }

    // evaluate length field
    switch (*format) {
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	3b68      	subs	r3, #104	@ 0x68
 8004f74:	2b12      	cmp	r3, #18
 8004f76:	d847      	bhi.n	8005008 <_vsnprintf+0x234>
 8004f78:	009a      	lsls	r2, r3, #2
 8004f7a:	4b4e      	ldr	r3, [pc, #312]	@ (80050b4 <_vsnprintf+0x2e0>)
 8004f7c:	18d3      	adds	r3, r2, r3
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	469f      	mov	pc, r3
      case 'l' :
        flags |= FLAGS_LONG;
 8004f82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f84:	2280      	movs	r2, #128	@ 0x80
 8004f86:	0052      	lsls	r2, r2, #1
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
        format++;
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	61bb      	str	r3, [r7, #24]
        if (*format == 'l') {
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	2b6c      	cmp	r3, #108	@ 0x6c
 8004f98:	d138      	bne.n	800500c <_vsnprintf+0x238>
          flags |= FLAGS_LONG_LONG;
 8004f9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f9c:	2280      	movs	r2, #128	@ 0x80
 8004f9e:	0092      	lsls	r2, r2, #2
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	66fb      	str	r3, [r7, #108]	@ 0x6c
          format++;
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	61bb      	str	r3, [r7, #24]
        }
        break;
 8004faa:	e02f      	b.n	800500c <_vsnprintf+0x238>
      case 'h' :
        flags |= FLAGS_SHORT;
 8004fac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fae:	2280      	movs	r2, #128	@ 0x80
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
        format++;
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	61bb      	str	r3, [r7, #24]
        if (*format == 'h') {
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	2b68      	cmp	r3, #104	@ 0x68
 8004fc0:	d126      	bne.n	8005010 <_vsnprintf+0x23c>
          flags |= FLAGS_CHAR;
 8004fc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fc4:	2240      	movs	r2, #64	@ 0x40
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	66fb      	str	r3, [r7, #108]	@ 0x6c
          format++;
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	61bb      	str	r3, [r7, #24]
        }
        break;
 8004fd0:	e01e      	b.n	8005010 <_vsnprintf+0x23c>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004fd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fd4:	2280      	movs	r2, #128	@ 0x80
 8004fd6:	0052      	lsls	r2, r2, #1
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	66fb      	str	r3, [r7, #108]	@ 0x6c
        format++;
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	61bb      	str	r3, [r7, #24]
        break;
 8004fe2:	e016      	b.n	8005012 <_vsnprintf+0x23e>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004fe4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fe6:	2280      	movs	r2, #128	@ 0x80
 8004fe8:	0092      	lsls	r2, r2, #2
 8004fea:	4313      	orrs	r3, r2
 8004fec:	66fb      	str	r3, [r7, #108]	@ 0x6c
        format++;
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	61bb      	str	r3, [r7, #24]
        break;
 8004ff4:	e00d      	b.n	8005012 <_vsnprintf+0x23e>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004ff6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ff8:	2280      	movs	r2, #128	@ 0x80
 8004ffa:	0052      	lsls	r2, r2, #1
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	66fb      	str	r3, [r7, #108]	@ 0x6c
        format++;
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	3301      	adds	r3, #1
 8005004:	61bb      	str	r3, [r7, #24]
        break;
 8005006:	e004      	b.n	8005012 <_vsnprintf+0x23e>
      default :
        break;
 8005008:	46c0      	nop			@ (mov r8, r8)
 800500a:	e002      	b.n	8005012 <_vsnprintf+0x23e>
        break;
 800500c:	46c0      	nop			@ (mov r8, r8)
 800500e:	e000      	b.n	8005012 <_vsnprintf+0x23e>
        break;
 8005010:	46c0      	nop			@ (mov r8, r8)
    }

    // evaluate specifier
    switch (*format) {
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	2b67      	cmp	r3, #103	@ 0x67
 8005018:	dc28      	bgt.n	800506c <_vsnprintf+0x298>
 800501a:	2b25      	cmp	r3, #37	@ 0x25
 800501c:	da1d      	bge.n	800505a <_vsnprintf+0x286>
 800501e:	e32d      	b.n	800567c <_vsnprintf+0x8a8>
 8005020:	3b69      	subs	r3, #105	@ 0x69
 8005022:	2201      	movs	r2, #1
 8005024:	409a      	lsls	r2, r3
 8005026:	0013      	movs	r3, r2
 8005028:	4a23      	ldr	r2, [pc, #140]	@ (80050b8 <_vsnprintf+0x2e4>)
 800502a:	401a      	ands	r2, r3
 800502c:	1e51      	subs	r1, r2, #1
 800502e:	418a      	sbcs	r2, r1
 8005030:	b2d2      	uxtb	r2, r2
 8005032:	2a00      	cmp	r2, #0
 8005034:	d120      	bne.n	8005078 <_vsnprintf+0x2a4>
 8005036:	2280      	movs	r2, #128	@ 0x80
 8005038:	401a      	ands	r2, r3
 800503a:	1e51      	subs	r1, r2, #1
 800503c:	418a      	sbcs	r2, r1
 800503e:	b2d2      	uxtb	r2, r2
 8005040:	2a00      	cmp	r2, #0
 8005042:	d000      	beq.n	8005046 <_vsnprintf+0x272>
 8005044:	e2b5      	b.n	80055b2 <_vsnprintf+0x7de>
 8005046:	2280      	movs	r2, #128	@ 0x80
 8005048:	00d2      	lsls	r2, r2, #3
 800504a:	4013      	ands	r3, r2
 800504c:	1e5a      	subs	r2, r3, #1
 800504e:	4193      	sbcs	r3, r2
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d000      	beq.n	8005058 <_vsnprintf+0x284>
 8005056:	e246      	b.n	80054e6 <_vsnprintf+0x712>
 8005058:	e310      	b.n	800567c <_vsnprintf+0x8a8>
 800505a:	3b25      	subs	r3, #37	@ 0x25
 800505c:	2b42      	cmp	r3, #66	@ 0x42
 800505e:	d900      	bls.n	8005062 <_vsnprintf+0x28e>
 8005060:	e30c      	b.n	800567c <_vsnprintf+0x8a8>
 8005062:	009a      	lsls	r2, r3, #2
 8005064:	4b15      	ldr	r3, [pc, #84]	@ (80050bc <_vsnprintf+0x2e8>)
 8005066:	18d3      	adds	r3, r2, r3
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	469f      	mov	pc, r3
 800506c:	2b78      	cmp	r3, #120	@ 0x78
 800506e:	dd00      	ble.n	8005072 <_vsnprintf+0x29e>
 8005070:	e304      	b.n	800567c <_vsnprintf+0x8a8>
 8005072:	2b69      	cmp	r3, #105	@ 0x69
 8005074:	dad4      	bge.n	8005020 <_vsnprintf+0x24c>
 8005076:	e301      	b.n	800567c <_vsnprintf+0x8a8>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	2b78      	cmp	r3, #120	@ 0x78
 800507e:	d003      	beq.n	8005088 <_vsnprintf+0x2b4>
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	2b58      	cmp	r3, #88	@ 0x58
 8005086:	d102      	bne.n	800508e <_vsnprintf+0x2ba>
          base = 16U;
 8005088:	2310      	movs	r3, #16
 800508a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800508c:	e01e      	b.n	80050cc <_vsnprintf+0x2f8>
        }
        else if (*format == 'o') {
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b6f      	cmp	r3, #111	@ 0x6f
 8005094:	d102      	bne.n	800509c <_vsnprintf+0x2c8>
          base =  8U;
 8005096:	2308      	movs	r3, #8
 8005098:	65bb      	str	r3, [r7, #88]	@ 0x58
 800509a:	e017      	b.n	80050cc <_vsnprintf+0x2f8>
        }
        else if (*format == 'b') {
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	2b62      	cmp	r3, #98	@ 0x62
 80050a2:	d10d      	bne.n	80050c0 <_vsnprintf+0x2ec>
          base =  2U;
 80050a4:	2302      	movs	r3, #2
 80050a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80050a8:	e010      	b.n	80050cc <_vsnprintf+0x2f8>
 80050aa:	46c0      	nop			@ (mov r8, r8)
 80050ac:	08003ee9 	.word	0x08003ee9
 80050b0:	0800fab8 	.word	0x0800fab8
 80050b4:	0800fafc 	.word	0x0800fafc
 80050b8:	00009041 	.word	0x00009041
 80050bc:	0800fb48 	.word	0x0800fb48
        }
        else {
          base = 10U;
 80050c0:	230a      	movs	r3, #10
 80050c2:	65bb      	str	r3, [r7, #88]	@ 0x58
          flags &= ~FLAGS_HASH;   // no hash for dec format
 80050c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050c6:	2210      	movs	r2, #16
 80050c8:	4393      	bics	r3, r2
 80050ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
        }
        // uppercase
        if (*format == 'X') {
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	2b58      	cmp	r3, #88	@ 0x58
 80050d2:	d103      	bne.n	80050dc <_vsnprintf+0x308>
          flags |= FLAGS_UPPERCASE;
 80050d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050d6:	2220      	movs	r2, #32
 80050d8:	4313      	orrs	r3, r2
 80050da:	66fb      	str	r3, [r7, #108]	@ 0x6c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	2b69      	cmp	r3, #105	@ 0x69
 80050e2:	d007      	beq.n	80050f4 <_vsnprintf+0x320>
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	2b64      	cmp	r3, #100	@ 0x64
 80050ea:	d003      	beq.n	80050f4 <_vsnprintf+0x320>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80050ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050ee:	220c      	movs	r2, #12
 80050f0:	4393      	bics	r3, r2
 80050f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 80050f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80050f6:	2380      	movs	r3, #128	@ 0x80
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	4013      	ands	r3, r2
 80050fc:	d003      	beq.n	8005106 <_vsnprintf+0x332>
          flags &= ~FLAGS_ZEROPAD;
 80050fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005100:	2201      	movs	r2, #1
 8005102:	4393      	bics	r3, r2
 8005104:	66fb      	str	r3, [r7, #108]	@ 0x6c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	2b69      	cmp	r3, #105	@ 0x69
 800510c:	d004      	beq.n	8005118 <_vsnprintf+0x344>
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	2b64      	cmp	r3, #100	@ 0x64
 8005114:	d000      	beq.n	8005118 <_vsnprintf+0x344>
 8005116:	e0af      	b.n	8005278 <_vsnprintf+0x4a4>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8005118:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800511a:	2380      	movs	r3, #128	@ 0x80
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4013      	ands	r3, r2
 8005120:	d03d      	beq.n	800519e <_vsnprintf+0x3ca>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8005122:	2388      	movs	r3, #136	@ 0x88
 8005124:	18fb      	adds	r3, r7, r3
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	3307      	adds	r3, #7
 800512a:	2207      	movs	r2, #7
 800512c:	4393      	bics	r3, r2
 800512e:	001a      	movs	r2, r3
 8005130:	3208      	adds	r2, #8
 8005132:	2188      	movs	r1, #136	@ 0x88
 8005134:	1879      	adds	r1, r7, r1
 8005136:	600a      	str	r2, [r1, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800513e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8005140:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005144:	2b00      	cmp	r3, #0
 8005146:	da05      	bge.n	8005154 <_vsnprintf+0x380>
 8005148:	2000      	movs	r0, #0
 800514a:	2100      	movs	r1, #0
 800514c:	1a80      	subs	r0, r0, r2
 800514e:	4199      	sbcs	r1, r3
 8005150:	0002      	movs	r2, r0
 8005152:	000b      	movs	r3, r1
 8005154:	0010      	movs	r0, r2
 8005156:	0019      	movs	r1, r3
 8005158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800515a:	0fdb      	lsrs	r3, r3, #31
 800515c:	b2da      	uxtb	r2, r3
 800515e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005160:	613b      	str	r3, [r7, #16]
 8005162:	2300      	movs	r3, #0
 8005164:	617b      	str	r3, [r7, #20]
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	469c      	mov	ip, r3
 800516a:	6dfe      	ldr	r6, [r7, #92]	@ 0x5c
 800516c:	6a3d      	ldr	r5, [r7, #32]
 800516e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005170:	4698      	mov	r8, r3
 8005172:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005174:	9308      	str	r3, [sp, #32]
 8005176:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005178:	9307      	str	r3, [sp, #28]
 800517a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800517c:	9306      	str	r3, [sp, #24]
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	697c      	ldr	r4, [r7, #20]
 8005182:	9304      	str	r3, [sp, #16]
 8005184:	9405      	str	r4, [sp, #20]
 8005186:	9202      	str	r2, [sp, #8]
 8005188:	9000      	str	r0, [sp, #0]
 800518a:	9101      	str	r1, [sp, #4]
 800518c:	4663      	mov	r3, ip
 800518e:	0032      	movs	r2, r6
 8005190:	0029      	movs	r1, r5
 8005192:	4640      	mov	r0, r8
 8005194:	f7ff f8b1 	bl	80042fa <_ntoa_long_long>
 8005198:	0003      	movs	r3, r0
 800519a:	65fb      	str	r3, [r7, #92]	@ 0x5c
          if (flags & FLAGS_LONG_LONG) {
 800519c:	e0fa      	b.n	8005394 <_vsnprintf+0x5c0>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800519e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80051a0:	2380      	movs	r3, #128	@ 0x80
 80051a2:	005b      	lsls	r3, r3, #1
 80051a4:	4013      	ands	r3, r2
 80051a6:	d025      	beq.n	80051f4 <_vsnprintf+0x420>
            const long value = va_arg(va, long);
 80051a8:	2388      	movs	r3, #136	@ 0x88
 80051aa:	18fb      	adds	r3, r7, r3
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	1d1a      	adds	r2, r3, #4
 80051b0:	2188      	movs	r1, #136	@ 0x88
 80051b2:	1879      	adds	r1, r7, r1
 80051b4:	600a      	str	r2, [r1, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	637b      	str	r3, [r7, #52]	@ 0x34
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80051ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051bc:	17da      	asrs	r2, r3, #31
 80051be:	189b      	adds	r3, r3, r2
 80051c0:	4053      	eors	r3, r2
 80051c2:	001e      	movs	r6, r3
 80051c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051c6:	0fdb      	lsrs	r3, r3, #31
 80051c8:	b2da      	uxtb	r2, r3
 80051ca:	69fd      	ldr	r5, [r7, #28]
 80051cc:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 80051ce:	6a39      	ldr	r1, [r7, #32]
 80051d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80051d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051d4:	9305      	str	r3, [sp, #20]
 80051d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051d8:	9304      	str	r3, [sp, #16]
 80051da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051dc:	9303      	str	r3, [sp, #12]
 80051de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80051e0:	9302      	str	r3, [sp, #8]
 80051e2:	9201      	str	r2, [sp, #4]
 80051e4:	9600      	str	r6, [sp, #0]
 80051e6:	002b      	movs	r3, r5
 80051e8:	0022      	movs	r2, r4
 80051ea:	f7ff f81d 	bl	8004228 <_ntoa_long>
 80051ee:	0003      	movs	r3, r0
 80051f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
          if (flags & FLAGS_LONG_LONG) {
 80051f2:	e0cf      	b.n	8005394 <_vsnprintf+0x5c0>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80051f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051f6:	2240      	movs	r2, #64	@ 0x40
 80051f8:	4013      	ands	r3, r2
 80051fa:	d009      	beq.n	8005210 <_vsnprintf+0x43c>
 80051fc:	2388      	movs	r3, #136	@ 0x88
 80051fe:	18fb      	adds	r3, r7, r3
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	1d1a      	adds	r2, r3, #4
 8005204:	2188      	movs	r1, #136	@ 0x88
 8005206:	1879      	adds	r1, r7, r1
 8005208:	600a      	str	r2, [r1, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	b2db      	uxtb	r3, r3
 800520e:	e015      	b.n	800523c <_vsnprintf+0x468>
 8005210:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005212:	2280      	movs	r2, #128	@ 0x80
 8005214:	4013      	ands	r3, r2
 8005216:	d009      	beq.n	800522c <_vsnprintf+0x458>
 8005218:	2388      	movs	r3, #136	@ 0x88
 800521a:	18fb      	adds	r3, r7, r3
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	1d1a      	adds	r2, r3, #4
 8005220:	2188      	movs	r1, #136	@ 0x88
 8005222:	1879      	adds	r1, r7, r1
 8005224:	600a      	str	r2, [r1, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	b21b      	sxth	r3, r3
 800522a:	e007      	b.n	800523c <_vsnprintf+0x468>
 800522c:	2388      	movs	r3, #136	@ 0x88
 800522e:	18fb      	adds	r3, r7, r3
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	1d1a      	adds	r2, r3, #4
 8005234:	2188      	movs	r1, #136	@ 0x88
 8005236:	1879      	adds	r1, r7, r1
 8005238:	600a      	str	r2, [r1, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	63bb      	str	r3, [r7, #56]	@ 0x38
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800523e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005240:	17da      	asrs	r2, r3, #31
 8005242:	189b      	adds	r3, r3, r2
 8005244:	4053      	eors	r3, r2
 8005246:	001e      	movs	r6, r3
 8005248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800524a:	0fdb      	lsrs	r3, r3, #31
 800524c:	b2da      	uxtb	r2, r3
 800524e:	69fd      	ldr	r5, [r7, #28]
 8005250:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 8005252:	6a39      	ldr	r1, [r7, #32]
 8005254:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005256:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005258:	9305      	str	r3, [sp, #20]
 800525a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800525c:	9304      	str	r3, [sp, #16]
 800525e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005260:	9303      	str	r3, [sp, #12]
 8005262:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005264:	9302      	str	r3, [sp, #8]
 8005266:	9201      	str	r2, [sp, #4]
 8005268:	9600      	str	r6, [sp, #0]
 800526a:	002b      	movs	r3, r5
 800526c:	0022      	movs	r2, r4
 800526e:	f7fe ffdb 	bl	8004228 <_ntoa_long>
 8005272:	0003      	movs	r3, r0
 8005274:	65fb      	str	r3, [r7, #92]	@ 0x5c
          if (flags & FLAGS_LONG_LONG) {
 8005276:	e08d      	b.n	8005394 <_vsnprintf+0x5c0>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8005278:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800527a:	2380      	movs	r3, #128	@ 0x80
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4013      	ands	r3, r2
 8005280:	d02b      	beq.n	80052da <_vsnprintf+0x506>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8005282:	2388      	movs	r3, #136	@ 0x88
 8005284:	18fb      	adds	r3, r7, r3
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3307      	adds	r3, #7
 800528a:	2207      	movs	r2, #7
 800528c:	4393      	bics	r3, r2
 800528e:	001a      	movs	r2, r3
 8005290:	3208      	adds	r2, #8
 8005292:	2188      	movs	r1, #136	@ 0x88
 8005294:	1879      	adds	r1, r7, r1
 8005296:	600a      	str	r2, [r1, #0]
 8005298:	6818      	ldr	r0, [r3, #0]
 800529a:	6859      	ldr	r1, [r3, #4]
 800529c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800529e:	60bb      	str	r3, [r7, #8]
 80052a0:	2300      	movs	r3, #0
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	69fe      	ldr	r6, [r7, #28]
 80052a6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80052a8:	6a3d      	ldr	r5, [r7, #32]
 80052aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ac:	469c      	mov	ip, r3
 80052ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052b0:	9308      	str	r3, [sp, #32]
 80052b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052b4:	9307      	str	r3, [sp, #28]
 80052b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052b8:	9306      	str	r3, [sp, #24]
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	68fc      	ldr	r4, [r7, #12]
 80052be:	9304      	str	r3, [sp, #16]
 80052c0:	9405      	str	r4, [sp, #20]
 80052c2:	2300      	movs	r3, #0
 80052c4:	9302      	str	r3, [sp, #8]
 80052c6:	9000      	str	r0, [sp, #0]
 80052c8:	9101      	str	r1, [sp, #4]
 80052ca:	0033      	movs	r3, r6
 80052cc:	0029      	movs	r1, r5
 80052ce:	4660      	mov	r0, ip
 80052d0:	f7ff f813 	bl	80042fa <_ntoa_long_long>
 80052d4:	0003      	movs	r3, r0
 80052d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052d8:	e05c      	b.n	8005394 <_vsnprintf+0x5c0>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80052da:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80052dc:	2380      	movs	r3, #128	@ 0x80
 80052de:	005b      	lsls	r3, r3, #1
 80052e0:	4013      	ands	r3, r2
 80052e2:	d01d      	beq.n	8005320 <_vsnprintf+0x54c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80052e4:	2388      	movs	r3, #136	@ 0x88
 80052e6:	18fb      	adds	r3, r7, r3
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	1d1a      	adds	r2, r3, #4
 80052ec:	2188      	movs	r1, #136	@ 0x88
 80052ee:	1879      	adds	r1, r7, r1
 80052f0:	600a      	str	r2, [r1, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	69fd      	ldr	r5, [r7, #28]
 80052f6:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 80052f8:	6a39      	ldr	r1, [r7, #32]
 80052fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80052fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80052fe:	9205      	str	r2, [sp, #20]
 8005300:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005302:	9204      	str	r2, [sp, #16]
 8005304:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005306:	9203      	str	r2, [sp, #12]
 8005308:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800530a:	9202      	str	r2, [sp, #8]
 800530c:	2200      	movs	r2, #0
 800530e:	9201      	str	r2, [sp, #4]
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	002b      	movs	r3, r5
 8005314:	0022      	movs	r2, r4
 8005316:	f7fe ff87 	bl	8004228 <_ntoa_long>
 800531a:	0003      	movs	r3, r0
 800531c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800531e:	e039      	b.n	8005394 <_vsnprintf+0x5c0>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8005320:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005322:	2240      	movs	r2, #64	@ 0x40
 8005324:	4013      	ands	r3, r2
 8005326:	d009      	beq.n	800533c <_vsnprintf+0x568>
 8005328:	2388      	movs	r3, #136	@ 0x88
 800532a:	18fb      	adds	r3, r7, r3
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	1d1a      	adds	r2, r3, #4
 8005330:	2188      	movs	r1, #136	@ 0x88
 8005332:	1879      	adds	r1, r7, r1
 8005334:	600a      	str	r2, [r1, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	b2db      	uxtb	r3, r3
 800533a:	e015      	b.n	8005368 <_vsnprintf+0x594>
 800533c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800533e:	2280      	movs	r2, #128	@ 0x80
 8005340:	4013      	ands	r3, r2
 8005342:	d009      	beq.n	8005358 <_vsnprintf+0x584>
 8005344:	2388      	movs	r3, #136	@ 0x88
 8005346:	18fb      	adds	r3, r7, r3
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	1d1a      	adds	r2, r3, #4
 800534c:	2188      	movs	r1, #136	@ 0x88
 800534e:	1879      	adds	r1, r7, r1
 8005350:	600a      	str	r2, [r1, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	b29b      	uxth	r3, r3
 8005356:	e007      	b.n	8005368 <_vsnprintf+0x594>
 8005358:	2388      	movs	r3, #136	@ 0x88
 800535a:	18fb      	adds	r3, r7, r3
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	1d1a      	adds	r2, r3, #4
 8005360:	2188      	movs	r1, #136	@ 0x88
 8005362:	1879      	adds	r1, r7, r1
 8005364:	600a      	str	r2, [r1, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	63fb      	str	r3, [r7, #60]	@ 0x3c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800536a:	69fc      	ldr	r4, [r7, #28]
 800536c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800536e:	6a39      	ldr	r1, [r7, #32]
 8005370:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005372:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005374:	9305      	str	r3, [sp, #20]
 8005376:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005378:	9304      	str	r3, [sp, #16]
 800537a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800537c:	9303      	str	r3, [sp, #12]
 800537e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005380:	9302      	str	r3, [sp, #8]
 8005382:	2300      	movs	r3, #0
 8005384:	9301      	str	r3, [sp, #4]
 8005386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	0023      	movs	r3, r4
 800538c:	f7fe ff4c 	bl	8004228 <_ntoa_long>
 8005390:	0003      	movs	r3, r0
 8005392:	65fb      	str	r3, [r7, #92]	@ 0x5c
          }
        }
        format++;
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	3301      	adds	r3, #1
 8005398:	61bb      	str	r3, [r7, #24]
        break;
 800539a:	e17c      	b.n	8005696 <_vsnprintf+0x8c2>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	2b46      	cmp	r3, #70	@ 0x46
 80053a2:	d103      	bne.n	80053ac <_vsnprintf+0x5d8>
 80053a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053a6:	2220      	movs	r2, #32
 80053a8:	4313      	orrs	r3, r2
 80053aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80053ac:	2388      	movs	r3, #136	@ 0x88
 80053ae:	18fb      	adds	r3, r7, r3
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	3307      	adds	r3, #7
 80053b4:	2207      	movs	r2, #7
 80053b6:	4393      	bics	r3, r2
 80053b8:	001a      	movs	r2, r3
 80053ba:	3208      	adds	r2, #8
 80053bc:	2188      	movs	r1, #136	@ 0x88
 80053be:	1879      	adds	r1, r7, r1
 80053c0:	600a      	str	r2, [r1, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	69fe      	ldr	r6, [r7, #28]
 80053c8:	6dfd      	ldr	r5, [r7, #92]	@ 0x5c
 80053ca:	6a3c      	ldr	r4, [r7, #32]
 80053cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80053ce:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80053d0:	9104      	str	r1, [sp, #16]
 80053d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80053d4:	9103      	str	r1, [sp, #12]
 80053d6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80053d8:	9102      	str	r1, [sp, #8]
 80053da:	9200      	str	r2, [sp, #0]
 80053dc:	9301      	str	r3, [sp, #4]
 80053de:	0033      	movs	r3, r6
 80053e0:	002a      	movs	r2, r5
 80053e2:	0021      	movs	r1, r4
 80053e4:	f7fe fffc 	bl	80043e0 <_ftoa>
 80053e8:	0003      	movs	r3, r0
 80053ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	3301      	adds	r3, #1
 80053f0:	61bb      	str	r3, [r7, #24]
        break;
 80053f2:	e150      	b.n	8005696 <_vsnprintf+0x8c2>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	2b67      	cmp	r3, #103	@ 0x67
 80053fa:	d003      	beq.n	8005404 <_vsnprintf+0x630>
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	2b47      	cmp	r3, #71	@ 0x47
 8005402:	d104      	bne.n	800540e <_vsnprintf+0x63a>
 8005404:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005406:	2280      	movs	r2, #128	@ 0x80
 8005408:	0112      	lsls	r2, r2, #4
 800540a:	4313      	orrs	r3, r2
 800540c:	66fb      	str	r3, [r7, #108]	@ 0x6c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	2b45      	cmp	r3, #69	@ 0x45
 8005414:	d003      	beq.n	800541e <_vsnprintf+0x64a>
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	2b47      	cmp	r3, #71	@ 0x47
 800541c:	d103      	bne.n	8005426 <_vsnprintf+0x652>
 800541e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005420:	2220      	movs	r2, #32
 8005422:	4313      	orrs	r3, r2
 8005424:	66fb      	str	r3, [r7, #108]	@ 0x6c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8005426:	2388      	movs	r3, #136	@ 0x88
 8005428:	18fb      	adds	r3, r7, r3
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	3307      	adds	r3, #7
 800542e:	2207      	movs	r2, #7
 8005430:	4393      	bics	r3, r2
 8005432:	001a      	movs	r2, r3
 8005434:	3208      	adds	r2, #8
 8005436:	2188      	movs	r1, #136	@ 0x88
 8005438:	1879      	adds	r1, r7, r1
 800543a:	600a      	str	r2, [r1, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	69fe      	ldr	r6, [r7, #28]
 8005442:	6dfd      	ldr	r5, [r7, #92]	@ 0x5c
 8005444:	6a3c      	ldr	r4, [r7, #32]
 8005446:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005448:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800544a:	9104      	str	r1, [sp, #16]
 800544c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800544e:	9103      	str	r1, [sp, #12]
 8005450:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8005452:	9102      	str	r1, [sp, #8]
 8005454:	9200      	str	r2, [sp, #0]
 8005456:	9301      	str	r3, [sp, #4]
 8005458:	0033      	movs	r3, r6
 800545a:	002a      	movs	r2, r5
 800545c:	0021      	movs	r1, r4
 800545e:	f7ff f9fd 	bl	800485c <_etoa>
 8005462:	0003      	movs	r3, r0
 8005464:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	3301      	adds	r3, #1
 800546a:	61bb      	str	r3, [r7, #24]
        break;
 800546c:	e113      	b.n	8005696 <_vsnprintf+0x8c2>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800546e:	2301      	movs	r3, #1
 8005470:	657b      	str	r3, [r7, #84]	@ 0x54
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8005472:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005474:	2202      	movs	r2, #2
 8005476:	4013      	ands	r3, r2
 8005478:	d10e      	bne.n	8005498 <_vsnprintf+0x6c4>
          while (l++ < width) {
 800547a:	e007      	b.n	800548c <_vsnprintf+0x6b8>
            out(' ', buffer, idx++, maxlen);
 800547c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800547e:	1c53      	adds	r3, r2, #1
 8005480:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	6a39      	ldr	r1, [r7, #32]
 8005486:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8005488:	2020      	movs	r0, #32
 800548a:	47a0      	blx	r4
          while (l++ < width) {
 800548c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800548e:	1c5a      	adds	r2, r3, #1
 8005490:	657a      	str	r2, [r7, #84]	@ 0x54
 8005492:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005494:	429a      	cmp	r2, r3
 8005496:	d8f1      	bhi.n	800547c <_vsnprintf+0x6a8>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8005498:	2388      	movs	r3, #136	@ 0x88
 800549a:	18fb      	adds	r3, r7, r3
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	1d1a      	adds	r2, r3, #4
 80054a0:	2188      	movs	r1, #136	@ 0x88
 80054a2:	1879      	adds	r1, r7, r1
 80054a4:	600a      	str	r2, [r1, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	b2d8      	uxtb	r0, r3
 80054aa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80054ac:	1c53      	adds	r3, r2, #1
 80054ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	6a39      	ldr	r1, [r7, #32]
 80054b4:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80054b6:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 80054b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054ba:	2202      	movs	r2, #2
 80054bc:	4013      	ands	r3, r2
 80054be:	d00e      	beq.n	80054de <_vsnprintf+0x70a>
          while (l++ < width) {
 80054c0:	e007      	b.n	80054d2 <_vsnprintf+0x6fe>
            out(' ', buffer, idx++, maxlen);
 80054c2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80054c4:	1c53      	adds	r3, r2, #1
 80054c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	6a39      	ldr	r1, [r7, #32]
 80054cc:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80054ce:	2020      	movs	r0, #32
 80054d0:	47a0      	blx	r4
          while (l++ < width) {
 80054d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054d4:	1c5a      	adds	r2, r3, #1
 80054d6:	657a      	str	r2, [r7, #84]	@ 0x54
 80054d8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80054da:	429a      	cmp	r2, r3
 80054dc:	d8f1      	bhi.n	80054c2 <_vsnprintf+0x6ee>
          }
        }
        format++;
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	3301      	adds	r3, #1
 80054e2:	61bb      	str	r3, [r7, #24]
        break;
 80054e4:	e0d7      	b.n	8005696 <_vsnprintf+0x8c2>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 80054e6:	2388      	movs	r3, #136	@ 0x88
 80054e8:	18fb      	adds	r3, r7, r3
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	1d1a      	adds	r2, r3, #4
 80054ee:	2188      	movs	r1, #136	@ 0x88
 80054f0:	1879      	adds	r1, r7, r1
 80054f2:	600a      	str	r2, [r1, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	653b      	str	r3, [r7, #80]	@ 0x50
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80054f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d001      	beq.n	8005502 <_vsnprintf+0x72e>
 80054fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005500:	e001      	b.n	8005506 <_vsnprintf+0x732>
 8005502:	2301      	movs	r3, #1
 8005504:	425b      	negs	r3, r3
 8005506:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005508:	0019      	movs	r1, r3
 800550a:	0010      	movs	r0, r2
 800550c:	f7fe fd12 	bl	8003f34 <_strnlen_s>
 8005510:	0003      	movs	r3, r0
 8005512:	64fb      	str	r3, [r7, #76]	@ 0x4c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8005514:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005516:	2380      	movs	r3, #128	@ 0x80
 8005518:	00db      	lsls	r3, r3, #3
 800551a:	4013      	ands	r3, r2
 800551c:	d005      	beq.n	800552a <_vsnprintf+0x756>
          l = (l < precision ? l : precision);
 800551e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005520:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005522:	4293      	cmp	r3, r2
 8005524:	d900      	bls.n	8005528 <_vsnprintf+0x754>
 8005526:	0013      	movs	r3, r2
 8005528:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }
        if (!(flags & FLAGS_LEFT)) {
 800552a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800552c:	2202      	movs	r2, #2
 800552e:	4013      	ands	r3, r2
 8005530:	d11a      	bne.n	8005568 <_vsnprintf+0x794>
          while (l++ < width) {
 8005532:	e007      	b.n	8005544 <_vsnprintf+0x770>
            out(' ', buffer, idx++, maxlen);
 8005534:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005536:	1c53      	adds	r3, r2, #1
 8005538:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	6a39      	ldr	r1, [r7, #32]
 800553e:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8005540:	2020      	movs	r0, #32
 8005542:	47a0      	blx	r4
          while (l++ < width) {
 8005544:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005546:	1c5a      	adds	r2, r3, #1
 8005548:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800554a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800554c:	429a      	cmp	r2, r3
 800554e:	d8f1      	bhi.n	8005534 <_vsnprintf+0x760>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8005550:	e00a      	b.n	8005568 <_vsnprintf+0x794>
          out(*(p++), buffer, idx++, maxlen);
 8005552:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005554:	1c5a      	adds	r2, r3, #1
 8005556:	653a      	str	r2, [r7, #80]	@ 0x50
 8005558:	7818      	ldrb	r0, [r3, #0]
 800555a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800555c:	1c53      	adds	r3, r2, #1
 800555e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	6a39      	ldr	r1, [r7, #32]
 8005564:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8005566:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8005568:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d009      	beq.n	8005584 <_vsnprintf+0x7b0>
 8005570:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005572:	2380      	movs	r3, #128	@ 0x80
 8005574:	00db      	lsls	r3, r3, #3
 8005576:	4013      	ands	r3, r2
 8005578:	d0eb      	beq.n	8005552 <_vsnprintf+0x77e>
 800557a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800557c:	1e5a      	subs	r2, r3, #1
 800557e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1e6      	bne.n	8005552 <_vsnprintf+0x77e>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8005584:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005586:	2202      	movs	r2, #2
 8005588:	4013      	ands	r3, r2
 800558a:	d00e      	beq.n	80055aa <_vsnprintf+0x7d6>
          while (l++ < width) {
 800558c:	e007      	b.n	800559e <_vsnprintf+0x7ca>
            out(' ', buffer, idx++, maxlen);
 800558e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005590:	1c53      	adds	r3, r2, #1
 8005592:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	6a39      	ldr	r1, [r7, #32]
 8005598:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800559a:	2020      	movs	r0, #32
 800559c:	47a0      	blx	r4
          while (l++ < width) {
 800559e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055a0:	1c5a      	adds	r2, r3, #1
 80055a2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80055a4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d8f1      	bhi.n	800558e <_vsnprintf+0x7ba>
          }
        }
        format++;
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	3301      	adds	r3, #1
 80055ae:	61bb      	str	r3, [r7, #24]
        break;
 80055b0:	e071      	b.n	8005696 <_vsnprintf+0x8c2>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 80055b2:	2308      	movs	r3, #8
 80055b4:	66bb      	str	r3, [r7, #104]	@ 0x68
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 80055b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055b8:	2221      	movs	r2, #33	@ 0x21
 80055ba:	4313      	orrs	r3, r2
 80055bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 80055be:	212b      	movs	r1, #43	@ 0x2b
 80055c0:	2318      	movs	r3, #24
 80055c2:	18cb      	adds	r3, r1, r3
 80055c4:	19db      	adds	r3, r3, r7
 80055c6:	2200      	movs	r2, #0
 80055c8:	701a      	strb	r2, [r3, #0]
        if (is_ll) {
 80055ca:	2318      	movs	r3, #24
 80055cc:	18cb      	adds	r3, r1, r3
 80055ce:	19db      	adds	r3, r3, r7
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d025      	beq.n	8005622 <_vsnprintf+0x84e>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 80055d6:	2388      	movs	r3, #136	@ 0x88
 80055d8:	18fb      	adds	r3, r7, r3
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	1d1a      	adds	r2, r3, #4
 80055de:	2188      	movs	r1, #136	@ 0x88
 80055e0:	1879      	adds	r1, r7, r1
 80055e2:	600a      	str	r2, [r1, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	603b      	str	r3, [r7, #0]
 80055e8:	2300      	movs	r3, #0
 80055ea:	607b      	str	r3, [r7, #4]
 80055ec:	69fd      	ldr	r5, [r7, #28]
 80055ee:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 80055f0:	6a39      	ldr	r1, [r7, #32]
 80055f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80055f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055f6:	9308      	str	r3, [sp, #32]
 80055f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055fa:	9307      	str	r3, [sp, #28]
 80055fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055fe:	9306      	str	r3, [sp, #24]
 8005600:	2210      	movs	r2, #16
 8005602:	2300      	movs	r3, #0
 8005604:	9204      	str	r2, [sp, #16]
 8005606:	9305      	str	r3, [sp, #20]
 8005608:	2300      	movs	r3, #0
 800560a:	9302      	str	r3, [sp, #8]
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	9200      	str	r2, [sp, #0]
 8005612:	9301      	str	r3, [sp, #4]
 8005614:	002b      	movs	r3, r5
 8005616:	0022      	movs	r2, r4
 8005618:	f7fe fe6f 	bl	80042fa <_ntoa_long_long>
 800561c:	0003      	movs	r3, r0
 800561e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005620:	e01c      	b.n	800565c <_vsnprintf+0x888>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8005622:	2388      	movs	r3, #136	@ 0x88
 8005624:	18fb      	adds	r3, r7, r3
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	1d1a      	adds	r2, r3, #4
 800562a:	2188      	movs	r1, #136	@ 0x88
 800562c:	1879      	adds	r1, r7, r1
 800562e:	600a      	str	r2, [r1, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	001d      	movs	r5, r3
 8005634:	69fc      	ldr	r4, [r7, #28]
 8005636:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005638:	6a39      	ldr	r1, [r7, #32]
 800563a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800563c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800563e:	9305      	str	r3, [sp, #20]
 8005640:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005642:	9304      	str	r3, [sp, #16]
 8005644:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005646:	9303      	str	r3, [sp, #12]
 8005648:	2310      	movs	r3, #16
 800564a:	9302      	str	r3, [sp, #8]
 800564c:	2300      	movs	r3, #0
 800564e:	9301      	str	r3, [sp, #4]
 8005650:	9500      	str	r5, [sp, #0]
 8005652:	0023      	movs	r3, r4
 8005654:	f7fe fde8 	bl	8004228 <_ntoa_long>
 8005658:	0003      	movs	r3, r0
 800565a:	65fb      	str	r3, [r7, #92]	@ 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	3301      	adds	r3, #1
 8005660:	61bb      	str	r3, [r7, #24]
        break;
 8005662:	e018      	b.n	8005696 <_vsnprintf+0x8c2>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8005664:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005666:	1c53      	adds	r3, r2, #1
 8005668:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	6a39      	ldr	r1, [r7, #32]
 800566e:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8005670:	2025      	movs	r0, #37	@ 0x25
 8005672:	47a0      	blx	r4
        format++;
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	3301      	adds	r3, #1
 8005678:	61bb      	str	r3, [r7, #24]
        break;
 800567a:	e00c      	b.n	8005696 <_vsnprintf+0x8c2>

      default :
        out(*format, buffer, idx++, maxlen);
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	7818      	ldrb	r0, [r3, #0]
 8005680:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005682:	1c53      	adds	r3, r2, #1
 8005684:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	6a39      	ldr	r1, [r7, #32]
 800568a:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800568c:	47a0      	blx	r4
        format++;
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	3301      	adds	r3, #1
 8005692:	61bb      	str	r3, [r7, #24]
        break;
 8005694:	46c0      	nop			@ (mov r8, r8)
  while (*format)
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <_vsnprintf+0x8ce>
 800569e:	f7ff fbad 	bl	8004dfc <_vsnprintf+0x28>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 80056a2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d302      	bcc.n	80056b0 <_vsnprintf+0x8dc>
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	1e5a      	subs	r2, r3, #1
 80056ae:	e000      	b.n	80056b2 <_vsnprintf+0x8de>
 80056b0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	6a39      	ldr	r1, [r7, #32]
 80056b6:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80056b8:	2000      	movs	r0, #0
 80056ba:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 80056bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 80056be:	0018      	movs	r0, r3
 80056c0:	46bd      	mov	sp, r7
 80056c2:	b01c      	add	sp, #112	@ 0x70
 80056c4:	bc80      	pop	{r7}
 80056c6:	46b8      	mov	r8, r7
 80056c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056ca:	46c0      	nop			@ (mov r8, r8)

080056cc <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 80056cc:	b40f      	push	{r0, r1, r2, r3}
 80056ce:	b590      	push	{r4, r7, lr}
 80056d0:	b087      	sub	sp, #28
 80056d2:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 80056d4:	2324      	movs	r3, #36	@ 0x24
 80056d6:	18fb      	adds	r3, r7, r3
 80056d8:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 80056da:	6a3c      	ldr	r4, [r7, #32]
 80056dc:	2301      	movs	r3, #1
 80056de:	425a      	negs	r2, r3
 80056e0:	1d39      	adds	r1, r7, #4
 80056e2:	4808      	ldr	r0, [pc, #32]	@ (8005704 <printf_+0x38>)
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	0023      	movs	r3, r4
 80056ea:	f7ff fb73 	bl	8004dd4 <_vsnprintf>
 80056ee:	0003      	movs	r3, r0
 80056f0:	60fb      	str	r3, [r7, #12]
  va_end(va);
  return ret;
 80056f2:	68fb      	ldr	r3, [r7, #12]
}
 80056f4:	0018      	movs	r0, r3
 80056f6:	46bd      	mov	sp, r7
 80056f8:	b005      	add	sp, #20
 80056fa:	bc90      	pop	{r4, r7}
 80056fc:	bc08      	pop	{r3}
 80056fe:	b004      	add	sp, #16
 8005700:	4718      	bx	r3
 8005702:	46c0      	nop			@ (mov r8, r8)
 8005704:	08003f05 	.word	0x08003f05

08005708 <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
 8005708:	b40e      	push	{r1, r2, r3}
 800570a:	b590      	push	{r4, r7, lr}
 800570c:	b086      	sub	sp, #24
 800570e:	af02      	add	r7, sp, #8
 8005710:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 8005712:	2320      	movs	r3, #32
 8005714:	18fb      	adds	r3, r7, r3
 8005716:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8005718:	69fc      	ldr	r4, [r7, #28]
 800571a:	2301      	movs	r3, #1
 800571c:	425a      	negs	r2, r3
 800571e:	6879      	ldr	r1, [r7, #4]
 8005720:	4807      	ldr	r0, [pc, #28]	@ (8005740 <sprintf_+0x38>)
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	9300      	str	r3, [sp, #0]
 8005726:	0023      	movs	r3, r4
 8005728:	f7ff fb54 	bl	8004dd4 <_vsnprintf>
 800572c:	0003      	movs	r3, r0
 800572e:	60fb      	str	r3, [r7, #12]
  va_end(va);
  return ret;
 8005730:	68fb      	ldr	r3, [r7, #12]
}
 8005732:	0018      	movs	r0, r3
 8005734:	46bd      	mov	sp, r7
 8005736:	b004      	add	sp, #16
 8005738:	bc90      	pop	{r4, r7}
 800573a:	bc08      	pop	{r3}
 800573c:	b003      	add	sp, #12
 800573e:	4718      	bx	r3
 8005740:	08003eb9 	.word	0x08003eb9

08005744 <_putchar>:
  va_end(va);
  return ret;
}


void _putchar(char character) {
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	0002      	movs	r2, r0
 800574c:	1dfb      	adds	r3, r7, #7
 800574e:	701a      	strb	r2, [r3, #0]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	while( !( USART2->ISR & USART_ISR_TXE_TXFNF ) ) {};
 8005750:	46c0      	nop			@ (mov r8, r8)
 8005752:	4b06      	ldr	r3, [pc, #24]	@ (800576c <_putchar+0x28>)
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	2280      	movs	r2, #128	@ 0x80
 8005758:	4013      	ands	r3, r2
 800575a:	d0fa      	beq.n	8005752 <_putchar+0xe>
      USART2->TDR = character;
 800575c:	4b03      	ldr	r3, [pc, #12]	@ (800576c <_putchar+0x28>)
 800575e:	1dfa      	adds	r2, r7, #7
 8005760:	7812      	ldrb	r2, [r2, #0]
 8005762:	629a      	str	r2, [r3, #40]	@ 0x28
		
}
 8005764:	46c0      	nop			@ (mov r8, r8)
 8005766:	46bd      	mov	sp, r7
 8005768:	b002      	add	sp, #8
 800576a:	bd80      	pop	{r7, pc}
 800576c:	40004400 	.word	0x40004400

08005770 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8005774:	4b19      	ldr	r3, [pc, #100]	@ (80057dc <MX_RTC_Init+0x6c>)
 8005776:	4a1a      	ldr	r2, [pc, #104]	@ (80057e0 <MX_RTC_Init+0x70>)
 8005778:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800577a:	4b18      	ldr	r3, [pc, #96]	@ (80057dc <MX_RTC_Init+0x6c>)
 800577c:	2200      	movs	r2, #0
 800577e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8005780:	4b16      	ldr	r3, [pc, #88]	@ (80057dc <MX_RTC_Init+0x6c>)
 8005782:	227f      	movs	r2, #127	@ 0x7f
 8005784:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8005786:	4b15      	ldr	r3, [pc, #84]	@ (80057dc <MX_RTC_Init+0x6c>)
 8005788:	22ff      	movs	r2, #255	@ 0xff
 800578a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800578c:	4b13      	ldr	r3, [pc, #76]	@ (80057dc <MX_RTC_Init+0x6c>)
 800578e:	2200      	movs	r2, #0
 8005790:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8005792:	4b12      	ldr	r3, [pc, #72]	@ (80057dc <MX_RTC_Init+0x6c>)
 8005794:	2200      	movs	r2, #0
 8005796:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005798:	4b10      	ldr	r3, [pc, #64]	@ (80057dc <MX_RTC_Init+0x6c>)
 800579a:	2200      	movs	r2, #0
 800579c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800579e:	4b0f      	ldr	r3, [pc, #60]	@ (80057dc <MX_RTC_Init+0x6c>)
 80057a0:	2280      	movs	r2, #128	@ 0x80
 80057a2:	05d2      	lsls	r2, r2, #23
 80057a4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80057a6:	4b0d      	ldr	r3, [pc, #52]	@ (80057dc <MX_RTC_Init+0x6c>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80057ac:	4b0b      	ldr	r3, [pc, #44]	@ (80057dc <MX_RTC_Init+0x6c>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80057b2:	4b0a      	ldr	r3, [pc, #40]	@ (80057dc <MX_RTC_Init+0x6c>)
 80057b4:	0018      	movs	r0, r3
 80057b6:	f003 f9e9 	bl	8008b8c <HAL_RTC_Init>
 80057ba:	1e03      	subs	r3, r0, #0
 80057bc:	d001      	beq.n	80057c2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80057be:	f7fe fb75 	bl	8003eac <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 60, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80057c2:	4b06      	ldr	r3, [pc, #24]	@ (80057dc <MX_RTC_Init+0x6c>)
 80057c4:	2204      	movs	r2, #4
 80057c6:	213c      	movs	r1, #60	@ 0x3c
 80057c8:	0018      	movs	r0, r3
 80057ca:	f003 fad7 	bl	8008d7c <HAL_RTCEx_SetWakeUpTimer>
 80057ce:	1e03      	subs	r3, r0, #0
 80057d0:	d001      	beq.n	80057d6 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80057d2:	f7fe fb6b 	bl	8003eac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80057d6:	46c0      	nop			@ (mov r8, r8)
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	2000046c 	.word	0x2000046c
 80057e0:	40002800 	.word	0x40002800

080057e4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80057e4:	b590      	push	{r4, r7, lr}
 80057e6:	b095      	sub	sp, #84	@ 0x54
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80057ec:	240c      	movs	r4, #12
 80057ee:	193b      	adds	r3, r7, r4
 80057f0:	0018      	movs	r0, r3
 80057f2:	2344      	movs	r3, #68	@ 0x44
 80057f4:	001a      	movs	r2, r3
 80057f6:	2100      	movs	r1, #0
 80057f8:	f007 ffe0 	bl	800d7bc <memset>
  if(rtcHandle->Instance==RTC)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a16      	ldr	r2, [pc, #88]	@ (800585c <HAL_RTC_MspInit+0x78>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d126      	bne.n	8005854 <HAL_RTC_MspInit+0x70>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005806:	193b      	adds	r3, r7, r4
 8005808:	2280      	movs	r2, #128	@ 0x80
 800580a:	0212      	lsls	r2, r2, #8
 800580c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800580e:	193b      	adds	r3, r7, r4
 8005810:	2280      	movs	r2, #128	@ 0x80
 8005812:	0092      	lsls	r2, r2, #2
 8005814:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005816:	193b      	adds	r3, r7, r4
 8005818:	0018      	movs	r0, r3
 800581a:	f002 f987 	bl	8007b2c <HAL_RCCEx_PeriphCLKConfig>
 800581e:	1e03      	subs	r3, r0, #0
 8005820:	d001      	beq.n	8005826 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8005822:	f7fe fb43 	bl	8003eac <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005826:	4a0e      	ldr	r2, [pc, #56]	@ (8005860 <HAL_RTC_MspInit+0x7c>)
 8005828:	2390      	movs	r3, #144	@ 0x90
 800582a:	58d3      	ldr	r3, [r2, r3]
 800582c:	490c      	ldr	r1, [pc, #48]	@ (8005860 <HAL_RTC_MspInit+0x7c>)
 800582e:	2280      	movs	r2, #128	@ 0x80
 8005830:	0212      	lsls	r2, r2, #8
 8005832:	4313      	orrs	r3, r2
 8005834:	2290      	movs	r2, #144	@ 0x90
 8005836:	508b      	str	r3, [r1, r2]
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8005838:	4b09      	ldr	r3, [pc, #36]	@ (8005860 <HAL_RTC_MspInit+0x7c>)
 800583a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800583c:	4b08      	ldr	r3, [pc, #32]	@ (8005860 <HAL_RTC_MspInit+0x7c>)
 800583e:	2180      	movs	r1, #128	@ 0x80
 8005840:	00c9      	lsls	r1, r1, #3
 8005842:	430a      	orrs	r2, r1
 8005844:	659a      	str	r2, [r3, #88]	@ 0x58
 8005846:	4b06      	ldr	r3, [pc, #24]	@ (8005860 <HAL_RTC_MspInit+0x7c>)
 8005848:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800584a:	2380      	movs	r3, #128	@ 0x80
 800584c:	00db      	lsls	r3, r3, #3
 800584e:	4013      	ands	r3, r2
 8005850:	60bb      	str	r3, [r7, #8]
 8005852:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8005854:	46c0      	nop			@ (mov r8, r8)
 8005856:	46bd      	mov	sp, r7
 8005858:	b015      	add	sp, #84	@ 0x54
 800585a:	bd90      	pop	{r4, r7, pc}
 800585c:	40002800 	.word	0x40002800
 8005860:	40021000 	.word	0x40021000

08005864 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005868:	4b1b      	ldr	r3, [pc, #108]	@ (80058d8 <MX_SPI1_Init+0x74>)
 800586a:	4a1c      	ldr	r2, [pc, #112]	@ (80058dc <MX_SPI1_Init+0x78>)
 800586c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800586e:	4b1a      	ldr	r3, [pc, #104]	@ (80058d8 <MX_SPI1_Init+0x74>)
 8005870:	2282      	movs	r2, #130	@ 0x82
 8005872:	0052      	lsls	r2, r2, #1
 8005874:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005876:	4b18      	ldr	r3, [pc, #96]	@ (80058d8 <MX_SPI1_Init+0x74>)
 8005878:	2200      	movs	r2, #0
 800587a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800587c:	4b16      	ldr	r3, [pc, #88]	@ (80058d8 <MX_SPI1_Init+0x74>)
 800587e:	22e0      	movs	r2, #224	@ 0xe0
 8005880:	00d2      	lsls	r2, r2, #3
 8005882:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005884:	4b14      	ldr	r3, [pc, #80]	@ (80058d8 <MX_SPI1_Init+0x74>)
 8005886:	2200      	movs	r2, #0
 8005888:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800588a:	4b13      	ldr	r3, [pc, #76]	@ (80058d8 <MX_SPI1_Init+0x74>)
 800588c:	2200      	movs	r2, #0
 800588e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005890:	4b11      	ldr	r3, [pc, #68]	@ (80058d8 <MX_SPI1_Init+0x74>)
 8005892:	2280      	movs	r2, #128	@ 0x80
 8005894:	0092      	lsls	r2, r2, #2
 8005896:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8005898:	4b0f      	ldr	r3, [pc, #60]	@ (80058d8 <MX_SPI1_Init+0x74>)
 800589a:	2210      	movs	r2, #16
 800589c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800589e:	4b0e      	ldr	r3, [pc, #56]	@ (80058d8 <MX_SPI1_Init+0x74>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80058a4:	4b0c      	ldr	r3, [pc, #48]	@ (80058d8 <MX_SPI1_Init+0x74>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058aa:	4b0b      	ldr	r3, [pc, #44]	@ (80058d8 <MX_SPI1_Init+0x74>)
 80058ac:	2200      	movs	r2, #0
 80058ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80058b0:	4b09      	ldr	r3, [pc, #36]	@ (80058d8 <MX_SPI1_Init+0x74>)
 80058b2:	2207      	movs	r2, #7
 80058b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80058b6:	4b08      	ldr	r3, [pc, #32]	@ (80058d8 <MX_SPI1_Init+0x74>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80058bc:	4b06      	ldr	r3, [pc, #24]	@ (80058d8 <MX_SPI1_Init+0x74>)
 80058be:	2208      	movs	r2, #8
 80058c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80058c2:	4b05      	ldr	r3, [pc, #20]	@ (80058d8 <MX_SPI1_Init+0x74>)
 80058c4:	0018      	movs	r0, r3
 80058c6:	f003 fadb 	bl	8008e80 <HAL_SPI_Init>
 80058ca:	1e03      	subs	r3, r0, #0
 80058cc:	d001      	beq.n	80058d2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80058ce:	f7fe faed 	bl	8003eac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80058d2:	46c0      	nop			@ (mov r8, r8)
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	2000049c 	.word	0x2000049c
 80058dc:	40013000 	.word	0x40013000

080058e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80058e0:	b590      	push	{r4, r7, lr}
 80058e2:	b08b      	sub	sp, #44	@ 0x2c
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058e8:	2414      	movs	r4, #20
 80058ea:	193b      	adds	r3, r7, r4
 80058ec:	0018      	movs	r0, r3
 80058ee:	2314      	movs	r3, #20
 80058f0:	001a      	movs	r2, r3
 80058f2:	2100      	movs	r1, #0
 80058f4:	f007 ff62 	bl	800d7bc <memset>
  if(spiHandle->Instance==SPI1)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a1b      	ldr	r2, [pc, #108]	@ (800596c <HAL_SPI_MspInit+0x8c>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d130      	bne.n	8005964 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005902:	4b1b      	ldr	r3, [pc, #108]	@ (8005970 <HAL_SPI_MspInit+0x90>)
 8005904:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005906:	4b1a      	ldr	r3, [pc, #104]	@ (8005970 <HAL_SPI_MspInit+0x90>)
 8005908:	2180      	movs	r1, #128	@ 0x80
 800590a:	0149      	lsls	r1, r1, #5
 800590c:	430a      	orrs	r2, r1
 800590e:	661a      	str	r2, [r3, #96]	@ 0x60
 8005910:	4b17      	ldr	r3, [pc, #92]	@ (8005970 <HAL_SPI_MspInit+0x90>)
 8005912:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005914:	2380      	movs	r3, #128	@ 0x80
 8005916:	015b      	lsls	r3, r3, #5
 8005918:	4013      	ands	r3, r2
 800591a:	613b      	str	r3, [r7, #16]
 800591c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800591e:	4b14      	ldr	r3, [pc, #80]	@ (8005970 <HAL_SPI_MspInit+0x90>)
 8005920:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005922:	4b13      	ldr	r3, [pc, #76]	@ (8005970 <HAL_SPI_MspInit+0x90>)
 8005924:	2101      	movs	r1, #1
 8005926:	430a      	orrs	r2, r1
 8005928:	64da      	str	r2, [r3, #76]	@ 0x4c
 800592a:	4b11      	ldr	r3, [pc, #68]	@ (8005970 <HAL_SPI_MspInit+0x90>)
 800592c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800592e:	2201      	movs	r2, #1
 8005930:	4013      	ands	r3, r2
 8005932:	60fb      	str	r3, [r7, #12]
 8005934:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005936:	0021      	movs	r1, r4
 8005938:	187b      	adds	r3, r7, r1
 800593a:	22e0      	movs	r2, #224	@ 0xe0
 800593c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800593e:	187b      	adds	r3, r7, r1
 8005940:	2202      	movs	r2, #2
 8005942:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005944:	187b      	adds	r3, r7, r1
 8005946:	2200      	movs	r2, #0
 8005948:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800594a:	187b      	adds	r3, r7, r1
 800594c:	2200      	movs	r2, #0
 800594e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005950:	187b      	adds	r3, r7, r1
 8005952:	2205      	movs	r2, #5
 8005954:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005956:	187a      	adds	r2, r7, r1
 8005958:	23a0      	movs	r3, #160	@ 0xa0
 800595a:	05db      	lsls	r3, r3, #23
 800595c:	0011      	movs	r1, r2
 800595e:	0018      	movs	r0, r3
 8005960:	f000 ff68 	bl	8006834 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005964:	46c0      	nop			@ (mov r8, r8)
 8005966:	46bd      	mov	sp, r7
 8005968:	b00b      	add	sp, #44	@ 0x2c
 800596a:	bd90      	pop	{r4, r7, pc}
 800596c:	40013000 	.word	0x40013000
 8005970:	40021000 	.word	0x40021000

08005974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800597a:	4b0f      	ldr	r3, [pc, #60]	@ (80059b8 <HAL_MspInit+0x44>)
 800597c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800597e:	4b0e      	ldr	r3, [pc, #56]	@ (80059b8 <HAL_MspInit+0x44>)
 8005980:	2180      	movs	r1, #128	@ 0x80
 8005982:	0549      	lsls	r1, r1, #21
 8005984:	430a      	orrs	r2, r1
 8005986:	659a      	str	r2, [r3, #88]	@ 0x58
 8005988:	4b0b      	ldr	r3, [pc, #44]	@ (80059b8 <HAL_MspInit+0x44>)
 800598a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800598c:	2380      	movs	r3, #128	@ 0x80
 800598e:	055b      	lsls	r3, r3, #21
 8005990:	4013      	ands	r3, r2
 8005992:	607b      	str	r3, [r7, #4]
 8005994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005996:	4b08      	ldr	r3, [pc, #32]	@ (80059b8 <HAL_MspInit+0x44>)
 8005998:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800599a:	4b07      	ldr	r3, [pc, #28]	@ (80059b8 <HAL_MspInit+0x44>)
 800599c:	2101      	movs	r1, #1
 800599e:	430a      	orrs	r2, r1
 80059a0:	661a      	str	r2, [r3, #96]	@ 0x60
 80059a2:	4b05      	ldr	r3, [pc, #20]	@ (80059b8 <HAL_MspInit+0x44>)
 80059a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059a6:	2201      	movs	r2, #1
 80059a8:	4013      	ands	r3, r2
 80059aa:	603b      	str	r3, [r7, #0]
 80059ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80059ae:	46c0      	nop			@ (mov r8, r8)
 80059b0:	46bd      	mov	sp, r7
 80059b2:	b002      	add	sp, #8
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	46c0      	nop			@ (mov r8, r8)
 80059b8:	40021000 	.word	0x40021000

080059bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80059c0:	46c0      	nop			@ (mov r8, r8)
 80059c2:	e7fd      	b.n	80059c0 <NMI_Handler+0x4>

080059c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80059c8:	46c0      	nop			@ (mov r8, r8)
 80059ca:	e7fd      	b.n	80059c8 <HardFault_Handler+0x4>

080059cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80059d0:	46c0      	nop			@ (mov r8, r8)
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80059da:	46c0      	nop			@ (mov r8, r8)
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80059e4:	f000 fa24 	bl	8005e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80059e8:	46c0      	nop			@ (mov r8, r8)
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	af00      	add	r7, sp, #0
  return 1;
 80059f2:	2301      	movs	r3, #1
}
 80059f4:	0018      	movs	r0, r3
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <_kill>:

int _kill(int pid, int sig)
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b082      	sub	sp, #8
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
 8005a02:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005a04:	f007 ff5c 	bl	800d8c0 <__errno>
 8005a08:	0003      	movs	r3, r0
 8005a0a:	2216      	movs	r2, #22
 8005a0c:	601a      	str	r2, [r3, #0]
  return -1;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	425b      	negs	r3, r3
}
 8005a12:	0018      	movs	r0, r3
 8005a14:	46bd      	mov	sp, r7
 8005a16:	b002      	add	sp, #8
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <_exit>:

void _exit (int status)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b082      	sub	sp, #8
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005a22:	2301      	movs	r3, #1
 8005a24:	425a      	negs	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	0011      	movs	r1, r2
 8005a2a:	0018      	movs	r0, r3
 8005a2c:	f7ff ffe5 	bl	80059fa <_kill>
  while (1) {}    /* Make sure we hang here */
 8005a30:	46c0      	nop			@ (mov r8, r8)
 8005a32:	e7fd      	b.n	8005a30 <_exit+0x16>

08005a34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a40:	2300      	movs	r3, #0
 8005a42:	617b      	str	r3, [r7, #20]
 8005a44:	e00a      	b.n	8005a5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005a46:	e000      	b.n	8005a4a <_read+0x16>
 8005a48:	bf00      	nop
 8005a4a:	0001      	movs	r1, r0
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	1c5a      	adds	r2, r3, #1
 8005a50:	60ba      	str	r2, [r7, #8]
 8005a52:	b2ca      	uxtb	r2, r1
 8005a54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	3301      	adds	r3, #1
 8005a5a:	617b      	str	r3, [r7, #20]
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	dbf0      	blt.n	8005a46 <_read+0x12>
  }

  return len;
 8005a64:	687b      	ldr	r3, [r7, #4]
}
 8005a66:	0018      	movs	r0, r3
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	b006      	add	sp, #24
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b086      	sub	sp, #24
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	617b      	str	r3, [r7, #20]
 8005a7e:	e009      	b.n	8005a94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	1c5a      	adds	r2, r3, #1
 8005a84:	60ba      	str	r2, [r7, #8]
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	0018      	movs	r0, r3
 8005a8a:	e000      	b.n	8005a8e <_write+0x20>
 8005a8c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	3301      	adds	r3, #1
 8005a92:	617b      	str	r3, [r7, #20]
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	dbf1      	blt.n	8005a80 <_write+0x12>
  }
  return len;
 8005a9c:	687b      	ldr	r3, [r7, #4]
}
 8005a9e:	0018      	movs	r0, r3
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	b006      	add	sp, #24
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <_close>:

int _close(int file)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b082      	sub	sp, #8
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	425b      	negs	r3, r3
}
 8005ab2:	0018      	movs	r0, r3
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	b002      	add	sp, #8
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b082      	sub	sp, #8
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
 8005ac2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	2280      	movs	r2, #128	@ 0x80
 8005ac8:	0192      	lsls	r2, r2, #6
 8005aca:	605a      	str	r2, [r3, #4]
  return 0;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	0018      	movs	r0, r3
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	b002      	add	sp, #8
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <_isatty>:

int _isatty(int file)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b082      	sub	sp, #8
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005ade:	2301      	movs	r3, #1
}
 8005ae0:	0018      	movs	r0, r3
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	b002      	add	sp, #8
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	0018      	movs	r0, r3
 8005af8:	46bd      	mov	sp, r7
 8005afa:	b004      	add	sp, #16
 8005afc:	bd80      	pop	{r7, pc}
	...

08005b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005b08:	4a14      	ldr	r2, [pc, #80]	@ (8005b5c <_sbrk+0x5c>)
 8005b0a:	4b15      	ldr	r3, [pc, #84]	@ (8005b60 <_sbrk+0x60>)
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005b14:	4b13      	ldr	r3, [pc, #76]	@ (8005b64 <_sbrk+0x64>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d102      	bne.n	8005b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005b1c:	4b11      	ldr	r3, [pc, #68]	@ (8005b64 <_sbrk+0x64>)
 8005b1e:	4a12      	ldr	r2, [pc, #72]	@ (8005b68 <_sbrk+0x68>)
 8005b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005b22:	4b10      	ldr	r3, [pc, #64]	@ (8005b64 <_sbrk+0x64>)
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	18d3      	adds	r3, r2, r3
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d207      	bcs.n	8005b40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005b30:	f007 fec6 	bl	800d8c0 <__errno>
 8005b34:	0003      	movs	r3, r0
 8005b36:	220c      	movs	r2, #12
 8005b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	425b      	negs	r3, r3
 8005b3e:	e009      	b.n	8005b54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005b40:	4b08      	ldr	r3, [pc, #32]	@ (8005b64 <_sbrk+0x64>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005b46:	4b07      	ldr	r3, [pc, #28]	@ (8005b64 <_sbrk+0x64>)
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	18d2      	adds	r2, r2, r3
 8005b4e:	4b05      	ldr	r3, [pc, #20]	@ (8005b64 <_sbrk+0x64>)
 8005b50:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8005b52:	68fb      	ldr	r3, [r7, #12]
}
 8005b54:	0018      	movs	r0, r3
 8005b56:	46bd      	mov	sp, r7
 8005b58:	b006      	add	sp, #24
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	20008000 	.word	0x20008000
 8005b60:	00000400 	.word	0x00000400
 8005b64:	20000500 	.word	0x20000500
 8005b68:	20000718 	.word	0x20000718

08005b6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005b70:	4b11      	ldr	r3, [pc, #68]	@ (8005bb8 <SystemInit+0x4c>)
 8005b72:	2280      	movs	r2, #128	@ 0x80
 8005b74:	0512      	lsls	r2, r2, #20
 8005b76:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  if (((FLASH->SECR & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)           \
 8005b78:	4a10      	ldr	r2, [pc, #64]	@ (8005bbc <SystemInit+0x50>)
 8005b7a:	2380      	movs	r3, #128	@ 0x80
 8005b7c:	58d2      	ldr	r2, [r2, r3]
 8005b7e:	2380      	movs	r3, #128	@ 0x80
 8005b80:	025b      	lsls	r3, r3, #9
 8005b82:	401a      	ands	r2, r3
 8005b84:	2380      	movs	r3, #128	@ 0x80
 8005b86:	025b      	lsls	r3, r3, #9
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d112      	bne.n	8005bb2 <SystemInit+0x46>
      && (((FLASH->OPTR & FLASH_OPTR_RDP) != 0xCCU)                            \
 8005b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8005bbc <SystemInit+0x50>)
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	22ff      	movs	r2, #255	@ 0xff
 8005b92:	4013      	ands	r3, r2
 8005b94:	2bcc      	cmp	r3, #204	@ 0xcc
 8005b96:	d00c      	beq.n	8005bb2 <SystemInit+0x46>
          && ((FLASH->OPTR & FLASH_OPTR_RDP) != 0xAAU)))
 8005b98:	4b08      	ldr	r3, [pc, #32]	@ (8005bbc <SystemInit+0x50>)
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	22ff      	movs	r2, #255	@ 0xff
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	2baa      	cmp	r3, #170	@ 0xaa
 8005ba2:	d006      	beq.n	8005bb2 <SystemInit+0x46>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 8005ba4:	4b05      	ldr	r3, [pc, #20]	@ (8005bbc <SystemInit+0x50>)
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	4b04      	ldr	r3, [pc, #16]	@ (8005bbc <SystemInit+0x50>)
 8005baa:	2180      	movs	r1, #128	@ 0x80
 8005bac:	02c9      	lsls	r1, r1, #11
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 8005bb2:	46c0      	nop			@ (mov r8, r8)
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	e000ed00 	.word	0xe000ed00
 8005bbc:	40022000 	.word	0x40022000

08005bc0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005bc4:	4b22      	ldr	r3, [pc, #136]	@ (8005c50 <MX_USART2_UART_Init+0x90>)
 8005bc6:	4a23      	ldr	r2, [pc, #140]	@ (8005c54 <MX_USART2_UART_Init+0x94>)
 8005bc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8005bca:	4b21      	ldr	r3, [pc, #132]	@ (8005c50 <MX_USART2_UART_Init+0x90>)
 8005bcc:	4a22      	ldr	r2, [pc, #136]	@ (8005c58 <MX_USART2_UART_Init+0x98>)
 8005bce:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8005c50 <MX_USART2_UART_Init+0x90>)
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8005c50 <MX_USART2_UART_Init+0x90>)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005bdc:	4b1c      	ldr	r3, [pc, #112]	@ (8005c50 <MX_USART2_UART_Init+0x90>)
 8005bde:	2200      	movs	r2, #0
 8005be0:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005be2:	4b1b      	ldr	r3, [pc, #108]	@ (8005c50 <MX_USART2_UART_Init+0x90>)
 8005be4:	220c      	movs	r2, #12
 8005be6:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005be8:	4b19      	ldr	r3, [pc, #100]	@ (8005c50 <MX_USART2_UART_Init+0x90>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005bee:	4b18      	ldr	r3, [pc, #96]	@ (8005c50 <MX_USART2_UART_Init+0x90>)
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005bf4:	4b16      	ldr	r3, [pc, #88]	@ (8005c50 <MX_USART2_UART_Init+0x90>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005bfa:	4b15      	ldr	r3, [pc, #84]	@ (8005c50 <MX_USART2_UART_Init+0x90>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005c00:	4b13      	ldr	r3, [pc, #76]	@ (8005c50 <MX_USART2_UART_Init+0x90>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005c06:	4b12      	ldr	r3, [pc, #72]	@ (8005c50 <MX_USART2_UART_Init+0x90>)
 8005c08:	0018      	movs	r0, r3
 8005c0a:	f003 f9e7 	bl	8008fdc <HAL_UART_Init>
 8005c0e:	1e03      	subs	r3, r0, #0
 8005c10:	d001      	beq.n	8005c16 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8005c12:	f7fe f94b 	bl	8003eac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005c16:	4b0e      	ldr	r3, [pc, #56]	@ (8005c50 <MX_USART2_UART_Init+0x90>)
 8005c18:	2100      	movs	r1, #0
 8005c1a:	0018      	movs	r0, r3
 8005c1c:	f003 fe74 	bl	8009908 <HAL_UARTEx_SetTxFifoThreshold>
 8005c20:	1e03      	subs	r3, r0, #0
 8005c22:	d001      	beq.n	8005c28 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8005c24:	f7fe f942 	bl	8003eac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005c28:	4b09      	ldr	r3, [pc, #36]	@ (8005c50 <MX_USART2_UART_Init+0x90>)
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	0018      	movs	r0, r3
 8005c2e:	f003 feab 	bl	8009988 <HAL_UARTEx_SetRxFifoThreshold>
 8005c32:	1e03      	subs	r3, r0, #0
 8005c34:	d001      	beq.n	8005c3a <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8005c36:	f7fe f939 	bl	8003eac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005c3a:	4b05      	ldr	r3, [pc, #20]	@ (8005c50 <MX_USART2_UART_Init+0x90>)
 8005c3c:	0018      	movs	r0, r3
 8005c3e:	f003 fe29 	bl	8009894 <HAL_UARTEx_DisableFifoMode>
 8005c42:	1e03      	subs	r3, r0, #0
 8005c44:	d001      	beq.n	8005c4a <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8005c46:	f7fe f931 	bl	8003eac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005c4a:	46c0      	nop			@ (mov r8, r8)
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	20000504 	.word	0x20000504
 8005c54:	40004400 	.word	0x40004400
 8005c58:	000f4240 	.word	0x000f4240

08005c5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005c5c:	b590      	push	{r4, r7, lr}
 8005c5e:	b09b      	sub	sp, #108	@ 0x6c
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c64:	2354      	movs	r3, #84	@ 0x54
 8005c66:	18fb      	adds	r3, r7, r3
 8005c68:	0018      	movs	r0, r3
 8005c6a:	2314      	movs	r3, #20
 8005c6c:	001a      	movs	r2, r3
 8005c6e:	2100      	movs	r1, #0
 8005c70:	f007 fda4 	bl	800d7bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005c74:	2410      	movs	r4, #16
 8005c76:	193b      	adds	r3, r7, r4
 8005c78:	0018      	movs	r0, r3
 8005c7a:	2344      	movs	r3, #68	@ 0x44
 8005c7c:	001a      	movs	r2, r3
 8005c7e:	2100      	movs	r1, #0
 8005c80:	f007 fd9c 	bl	800d7bc <memset>
  if(uartHandle->Instance==USART2)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a22      	ldr	r2, [pc, #136]	@ (8005d14 <HAL_UART_MspInit+0xb8>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d13e      	bne.n	8005d0c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005c8e:	193b      	adds	r3, r7, r4
 8005c90:	2202      	movs	r2, #2
 8005c92:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005c94:	193b      	adds	r3, r7, r4
 8005c96:	2200      	movs	r2, #0
 8005c98:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005c9a:	193b      	adds	r3, r7, r4
 8005c9c:	0018      	movs	r0, r3
 8005c9e:	f001 ff45 	bl	8007b2c <HAL_RCCEx_PeriphCLKConfig>
 8005ca2:	1e03      	subs	r3, r0, #0
 8005ca4:	d001      	beq.n	8005caa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005ca6:	f7fe f901 	bl	8003eac <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005caa:	4b1b      	ldr	r3, [pc, #108]	@ (8005d18 <HAL_UART_MspInit+0xbc>)
 8005cac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005cae:	4b1a      	ldr	r3, [pc, #104]	@ (8005d18 <HAL_UART_MspInit+0xbc>)
 8005cb0:	2180      	movs	r1, #128	@ 0x80
 8005cb2:	0289      	lsls	r1, r1, #10
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	659a      	str	r2, [r3, #88]	@ 0x58
 8005cb8:	4b17      	ldr	r3, [pc, #92]	@ (8005d18 <HAL_UART_MspInit+0xbc>)
 8005cba:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005cbc:	2380      	movs	r3, #128	@ 0x80
 8005cbe:	029b      	lsls	r3, r3, #10
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]
 8005cc4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cc6:	4b14      	ldr	r3, [pc, #80]	@ (8005d18 <HAL_UART_MspInit+0xbc>)
 8005cc8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005cca:	4b13      	ldr	r3, [pc, #76]	@ (8005d18 <HAL_UART_MspInit+0xbc>)
 8005ccc:	2101      	movs	r1, #1
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005cd2:	4b11      	ldr	r3, [pc, #68]	@ (8005d18 <HAL_UART_MspInit+0xbc>)
 8005cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	4013      	ands	r3, r2
 8005cda:	60bb      	str	r3, [r7, #8]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005cde:	2154      	movs	r1, #84	@ 0x54
 8005ce0:	187b      	adds	r3, r7, r1
 8005ce2:	220c      	movs	r2, #12
 8005ce4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ce6:	187b      	adds	r3, r7, r1
 8005ce8:	2202      	movs	r2, #2
 8005cea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cec:	187b      	adds	r3, r7, r1
 8005cee:	2200      	movs	r2, #0
 8005cf0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cf2:	187b      	adds	r3, r7, r1
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005cf8:	187b      	adds	r3, r7, r1
 8005cfa:	2207      	movs	r2, #7
 8005cfc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cfe:	187a      	adds	r2, r7, r1
 8005d00:	23a0      	movs	r3, #160	@ 0xa0
 8005d02:	05db      	lsls	r3, r3, #23
 8005d04:	0011      	movs	r1, r2
 8005d06:	0018      	movs	r0, r3
 8005d08:	f000 fd94 	bl	8006834 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005d0c:	46c0      	nop			@ (mov r8, r8)
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	b01b      	add	sp, #108	@ 0x6c
 8005d12:	bd90      	pop	{r4, r7, pc}
 8005d14:	40004400 	.word	0x40004400
 8005d18:	40021000 	.word	0x40021000

08005d1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005d1c:	480d      	ldr	r0, [pc, #52]	@ (8005d54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005d1e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005d20:	f7ff ff24 	bl	8005b6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005d24:	480c      	ldr	r0, [pc, #48]	@ (8005d58 <LoopForever+0x6>)
  ldr r1, =_edata
 8005d26:	490d      	ldr	r1, [pc, #52]	@ (8005d5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005d28:	4a0d      	ldr	r2, [pc, #52]	@ (8005d60 <LoopForever+0xe>)
  movs r3, #0
 8005d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005d2c:	e002      	b.n	8005d34 <LoopCopyDataInit>

08005d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005d32:	3304      	adds	r3, #4

08005d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005d38:	d3f9      	bcc.n	8005d2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8005d64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005d3c:	4c0a      	ldr	r4, [pc, #40]	@ (8005d68 <LoopForever+0x16>)
  movs r3, #0
 8005d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005d40:	e001      	b.n	8005d46 <LoopFillZerobss>

08005d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005d44:	3204      	adds	r2, #4

08005d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005d48:	d3fb      	bcc.n	8005d42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005d4a:	f007 fdbf 	bl	800d8cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005d4e:	f7fd fde1 	bl	8003914 <main>

08005d52 <LoopForever>:

LoopForever:
  b LoopForever
 8005d52:	e7fe      	b.n	8005d52 <LoopForever>
  ldr   r0, =_estack
 8005d54:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005d5c:	20000338 	.word	0x20000338
  ldr r2, =_sidata
 8005d60:	08019d00 	.word	0x08019d00
  ldr r2, =_sbss
 8005d64:	20000338 	.word	0x20000338
  ldr r4, =_ebss
 8005d68:	20000718 	.word	0x20000718

08005d6c <ADC_COMP1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005d6c:	e7fe      	b.n	8005d6c <ADC_COMP1_2_IRQHandler>

08005d6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b082      	sub	sp, #8
 8005d72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005d74:	1dfb      	adds	r3, r7, #7
 8005d76:	2200      	movs	r2, #0
 8005d78:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005d7a:	2003      	movs	r0, #3
 8005d7c:	f000 f80e 	bl	8005d9c <HAL_InitTick>
 8005d80:	1e03      	subs	r3, r0, #0
 8005d82:	d003      	beq.n	8005d8c <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8005d84:	1dfb      	adds	r3, r7, #7
 8005d86:	2201      	movs	r2, #1
 8005d88:	701a      	strb	r2, [r3, #0]
 8005d8a:	e001      	b.n	8005d90 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005d8c:	f7ff fdf2 	bl	8005974 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005d90:	1dfb      	adds	r3, r7, #7
 8005d92:	781b      	ldrb	r3, [r3, #0]
}
 8005d94:	0018      	movs	r0, r3
 8005d96:	46bd      	mov	sp, r7
 8005d98:	b002      	add	sp, #8
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d9c:	b590      	push	{r4, r7, lr}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005da4:	230f      	movs	r3, #15
 8005da6:	18fb      	adds	r3, r7, r3
 8005da8:	2200      	movs	r2, #0
 8005daa:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8005dac:	4b1d      	ldr	r3, [pc, #116]	@ (8005e24 <HAL_InitTick+0x88>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d02b      	beq.n	8005e0c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005db4:	4b1c      	ldr	r3, [pc, #112]	@ (8005e28 <HAL_InitTick+0x8c>)
 8005db6:	681c      	ldr	r4, [r3, #0]
 8005db8:	4b1a      	ldr	r3, [pc, #104]	@ (8005e24 <HAL_InitTick+0x88>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	0019      	movs	r1, r3
 8005dbe:	23fa      	movs	r3, #250	@ 0xfa
 8005dc0:	0098      	lsls	r0, r3, #2
 8005dc2:	f7fa f9bd 	bl	8000140 <__udivsi3>
 8005dc6:	0003      	movs	r3, r0
 8005dc8:	0019      	movs	r1, r3
 8005dca:	0020      	movs	r0, r4
 8005dcc:	f7fa f9b8 	bl	8000140 <__udivsi3>
 8005dd0:	0003      	movs	r3, r0
 8005dd2:	0018      	movs	r0, r3
 8005dd4:	f000 fd21 	bl	800681a <HAL_SYSTICK_Config>
 8005dd8:	1e03      	subs	r3, r0, #0
 8005dda:	d112      	bne.n	8005e02 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b03      	cmp	r3, #3
 8005de0:	d80a      	bhi.n	8005df8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005de2:	6879      	ldr	r1, [r7, #4]
 8005de4:	2301      	movs	r3, #1
 8005de6:	425b      	negs	r3, r3
 8005de8:	2200      	movs	r2, #0
 8005dea:	0018      	movs	r0, r3
 8005dec:	f000 fd00 	bl	80067f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005df0:	4b0e      	ldr	r3, [pc, #56]	@ (8005e2c <HAL_InitTick+0x90>)
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	601a      	str	r2, [r3, #0]
 8005df6:	e00d      	b.n	8005e14 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005df8:	230f      	movs	r3, #15
 8005dfa:	18fb      	adds	r3, r7, r3
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	701a      	strb	r2, [r3, #0]
 8005e00:	e008      	b.n	8005e14 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005e02:	230f      	movs	r3, #15
 8005e04:	18fb      	adds	r3, r7, r3
 8005e06:	2201      	movs	r2, #1
 8005e08:	701a      	strb	r2, [r3, #0]
 8005e0a:	e003      	b.n	8005e14 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005e0c:	230f      	movs	r3, #15
 8005e0e:	18fb      	adds	r3, r7, r3
 8005e10:	2201      	movs	r2, #1
 8005e12:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005e14:	230f      	movs	r3, #15
 8005e16:	18fb      	adds	r3, r7, r3
 8005e18:	781b      	ldrb	r3, [r3, #0]
}
 8005e1a:	0018      	movs	r0, r3
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	b005      	add	sp, #20
 8005e20:	bd90      	pop	{r4, r7, pc}
 8005e22:	46c0      	nop			@ (mov r8, r8)
 8005e24:	2000000c 	.word	0x2000000c
 8005e28:	20000004 	.word	0x20000004
 8005e2c:	20000008 	.word	0x20000008

08005e30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005e34:	4b04      	ldr	r3, [pc, #16]	@ (8005e48 <HAL_IncTick+0x18>)
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	4b04      	ldr	r3, [pc, #16]	@ (8005e4c <HAL_IncTick+0x1c>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	18d2      	adds	r2, r2, r3
 8005e3e:	4b02      	ldr	r3, [pc, #8]	@ (8005e48 <HAL_IncTick+0x18>)
 8005e40:	601a      	str	r2, [r3, #0]
}
 8005e42:	46c0      	nop			@ (mov r8, r8)
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	20000598 	.word	0x20000598
 8005e4c:	2000000c 	.word	0x2000000c

08005e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	af00      	add	r7, sp, #0
  return uwTick;
 8005e54:	4b02      	ldr	r3, [pc, #8]	@ (8005e60 <HAL_GetTick+0x10>)
 8005e56:	681b      	ldr	r3, [r3, #0]
}
 8005e58:	0018      	movs	r0, r3
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	46c0      	nop			@ (mov r8, r8)
 8005e60:	20000598 	.word	0x20000598

08005e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e6c:	f7ff fff0 	bl	8005e50 <HAL_GetTick>
 8005e70:	0003      	movs	r3, r0
 8005e72:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	d004      	beq.n	8005e88 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e7e:	4b09      	ldr	r3, [pc, #36]	@ (8005ea4 <HAL_Delay+0x40>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	18d3      	adds	r3, r2, r3
 8005e86:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005e88:	46c0      	nop			@ (mov r8, r8)
 8005e8a:	f7ff ffe1 	bl	8005e50 <HAL_GetTick>
 8005e8e:	0002      	movs	r2, r0
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d8f7      	bhi.n	8005e8a <HAL_Delay+0x26>
  {
  }
}
 8005e9a:	46c0      	nop			@ (mov r8, r8)
 8005e9c:	46c0      	nop			@ (mov r8, r8)
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	b004      	add	sp, #16
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	2000000c 	.word	0x2000000c

08005ea8 <LL_ADC_SetCommonPathInternalCh>:
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a05      	ldr	r2, [pc, #20]	@ (8005ecc <LL_ADC_SetCommonPathInternalCh+0x24>)
 8005eb8:	401a      	ands	r2, r3
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	431a      	orrs	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	601a      	str	r2, [r3, #0]
}
 8005ec2:	46c0      	nop			@ (mov r8, r8)
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	b002      	add	sp, #8
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	46c0      	nop			@ (mov r8, r8)
 8005ecc:	fe3fffff 	.word	0xfe3fffff

08005ed0 <LL_ADC_GetCommonPathInternalCh>:
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	23e0      	movs	r3, #224	@ 0xe0
 8005ede:	045b      	lsls	r3, r3, #17
 8005ee0:	4013      	ands	r3, r2
}
 8005ee2:	0018      	movs	r0, r3
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	b002      	add	sp, #8
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <LL_ADC_SetSamplingTimeCommonChannels>:
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b084      	sub	sp, #16
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	60f8      	str	r0, [r7, #12]
 8005ef2:	60b9      	str	r1, [r7, #8]
 8005ef4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	2104      	movs	r1, #4
 8005efe:	400a      	ands	r2, r1
 8005f00:	2107      	movs	r1, #7
 8005f02:	4091      	lsls	r1, r2
 8005f04:	000a      	movs	r2, r1
 8005f06:	43d2      	mvns	r2, r2
 8005f08:	401a      	ands	r2, r3
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2104      	movs	r1, #4
 8005f0e:	400b      	ands	r3, r1
 8005f10:	6879      	ldr	r1, [r7, #4]
 8005f12:	4099      	lsls	r1, r3
 8005f14:	000b      	movs	r3, r1
 8005f16:	431a      	orrs	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	615a      	str	r2, [r3, #20]
}
 8005f1c:	46c0      	nop			@ (mov r8, r8)
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	b004      	add	sp, #16
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <LL_ADC_GetSamplingTimeCommonChannels>:
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	2104      	movs	r1, #4
 8005f36:	400a      	ands	r2, r1
 8005f38:	2107      	movs	r1, #7
 8005f3a:	4091      	lsls	r1, r2
 8005f3c:	000a      	movs	r2, r1
 8005f3e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	2104      	movs	r1, #4
 8005f44:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005f46:	40da      	lsrs	r2, r3
 8005f48:	0013      	movs	r3, r2
}
 8005f4a:	0018      	movs	r0, r3
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	b002      	add	sp, #8
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <LL_ADC_REG_SetSequencerRanks>:
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b084      	sub	sp, #16
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	60f8      	str	r0, [r7, #12]
 8005f5a:	60b9      	str	r1, [r7, #8]
 8005f5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CHSELR,
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	211f      	movs	r1, #31
 8005f66:	400a      	ands	r2, r1
 8005f68:	210f      	movs	r1, #15
 8005f6a:	4091      	lsls	r1, r2
 8005f6c:	000a      	movs	r2, r1
 8005f6e:	43d2      	mvns	r2, r2
 8005f70:	401a      	ands	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	0e9b      	lsrs	r3, r3, #26
 8005f76:	210f      	movs	r1, #15
 8005f78:	4019      	ands	r1, r3
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	201f      	movs	r0, #31
 8005f7e:	4003      	ands	r3, r0
 8005f80:	4099      	lsls	r1, r3
 8005f82:	000b      	movs	r3, r1
 8005f84:	431a      	orrs	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005f8a:	46c0      	nop			@ (mov r8, r8)
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	b004      	add	sp, #16
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <LL_ADC_REG_SetSequencerChAdd>:
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b082      	sub	sp, #8
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
 8005f9a:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	025b      	lsls	r3, r3, #9
 8005fa4:	0a5b      	lsrs	r3, r3, #9
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005fac:	46c0      	nop			@ (mov r8, r8)
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	b002      	add	sp, #8
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <LL_ADC_REG_SetSequencerChRem>:
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	0252      	lsls	r2, r2, #9
 8005fc6:	0a52      	lsrs	r2, r2, #9
 8005fc8:	43d2      	mvns	r2, r2
 8005fca:	401a      	ands	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005fd0:	46c0      	nop			@ (mov r8, r8)
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	b002      	add	sp, #8
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <LL_ADC_SetChannelSamplingTime>:
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	0212      	lsls	r2, r2, #8
 8005fec:	43d2      	mvns	r2, r2
 8005fee:	401a      	ands	r2, r3
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	021b      	lsls	r3, r3, #8
 8005ff4:	6879      	ldr	r1, [r7, #4]
 8005ff6:	400b      	ands	r3, r1
 8005ff8:	4904      	ldr	r1, [pc, #16]	@ (800600c <LL_ADC_SetChannelSamplingTime+0x34>)
 8005ffa:	400b      	ands	r3, r1
 8005ffc:	431a      	orrs	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	615a      	str	r2, [r3, #20]
}
 8006002:	46c0      	nop			@ (mov r8, r8)
 8006004:	46bd      	mov	sp, r7
 8006006:	b004      	add	sp, #16
 8006008:	bd80      	pop	{r7, pc}
 800600a:	46c0      	nop			@ (mov r8, r8)
 800600c:	7fffff00 	.word	0x7fffff00

08006010 <LL_ADC_EnableInternalRegulator>:
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	4a05      	ldr	r2, [pc, #20]	@ (8006034 <LL_ADC_EnableInternalRegulator+0x24>)
 800601e:	4013      	ands	r3, r2
 8006020:	2280      	movs	r2, #128	@ 0x80
 8006022:	0552      	lsls	r2, r2, #21
 8006024:	431a      	orrs	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	609a      	str	r2, [r3, #8]
}
 800602a:	46c0      	nop			@ (mov r8, r8)
 800602c:	46bd      	mov	sp, r7
 800602e:	b002      	add	sp, #8
 8006030:	bd80      	pop	{r7, pc}
 8006032:	46c0      	nop			@ (mov r8, r8)
 8006034:	6fffffe8 	.word	0x6fffffe8

08006038 <LL_ADC_IsInternalRegulatorEnabled>:
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689a      	ldr	r2, [r3, #8]
 8006044:	2380      	movs	r3, #128	@ 0x80
 8006046:	055b      	lsls	r3, r3, #21
 8006048:	401a      	ands	r2, r3
 800604a:	2380      	movs	r3, #128	@ 0x80
 800604c:	055b      	lsls	r3, r3, #21
 800604e:	429a      	cmp	r2, r3
 8006050:	d101      	bne.n	8006056 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8006052:	2301      	movs	r3, #1
 8006054:	e000      	b.n	8006058 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8006056:	2300      	movs	r3, #0
}
 8006058:	0018      	movs	r0, r3
 800605a:	46bd      	mov	sp, r7
 800605c:	b002      	add	sp, #8
 800605e:	bd80      	pop	{r7, pc}

08006060 <LL_ADC_IsEnabled>:
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	2201      	movs	r2, #1
 800606e:	4013      	ands	r3, r2
 8006070:	2b01      	cmp	r3, #1
 8006072:	d101      	bne.n	8006078 <LL_ADC_IsEnabled+0x18>
 8006074:	2301      	movs	r3, #1
 8006076:	e000      	b.n	800607a <LL_ADC_IsEnabled+0x1a>
 8006078:	2300      	movs	r3, #0
}
 800607a:	0018      	movs	r0, r3
 800607c:	46bd      	mov	sp, r7
 800607e:	b002      	add	sp, #8
 8006080:	bd80      	pop	{r7, pc}

08006082 <LL_ADC_REG_IsConversionOngoing>:
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b082      	sub	sp, #8
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	2204      	movs	r2, #4
 8006090:	4013      	ands	r3, r2
 8006092:	2b04      	cmp	r3, #4
 8006094:	d101      	bne.n	800609a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006096:	2301      	movs	r3, #1
 8006098:	e000      	b.n	800609c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800609a:	2300      	movs	r3, #0
}
 800609c:	0018      	movs	r0, r3
 800609e:	46bd      	mov	sp, r7
 80060a0:	b002      	add	sp, #8
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b088      	sub	sp, #32
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060ac:	231f      	movs	r3, #31
 80060ae:	18fb      	adds	r3, r7, r3
 80060b0:	2200      	movs	r2, #0
 80060b2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80060b4:	2300      	movs	r3, #0
 80060b6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80060b8:	2300      	movs	r3, #0
 80060ba:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80060bc:	2300      	movs	r3, #0
 80060be:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e17f      	b.n	80063ca <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10a      	bne.n	80060e8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	0018      	movs	r0, r3
 80060d6:	f7fd f95f 	bl	8003398 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2254      	movs	r2, #84	@ 0x54
 80060e4:	2100      	movs	r1, #0
 80060e6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	0018      	movs	r0, r3
 80060ee:	f7ff ffa3 	bl	8006038 <LL_ADC_IsInternalRegulatorEnabled>
 80060f2:	1e03      	subs	r3, r0, #0
 80060f4:	d115      	bne.n	8006122 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	0018      	movs	r0, r3
 80060fc:	f7ff ff88 	bl	8006010 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006100:	4bb4      	ldr	r3, [pc, #720]	@ (80063d4 <HAL_ADC_Init+0x330>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	49b4      	ldr	r1, [pc, #720]	@ (80063d8 <HAL_ADC_Init+0x334>)
 8006106:	0018      	movs	r0, r3
 8006108:	f7fa f81a 	bl	8000140 <__udivsi3>
 800610c:	0003      	movs	r3, r0
 800610e:	3301      	adds	r3, #1
 8006110:	005b      	lsls	r3, r3, #1
 8006112:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006114:	e002      	b.n	800611c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	3b01      	subs	r3, #1
 800611a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1f9      	bne.n	8006116 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	0018      	movs	r0, r3
 8006128:	f7ff ff86 	bl	8006038 <LL_ADC_IsInternalRegulatorEnabled>
 800612c:	1e03      	subs	r3, r0, #0
 800612e:	d10f      	bne.n	8006150 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006134:	2210      	movs	r2, #16
 8006136:	431a      	orrs	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006140:	2201      	movs	r2, #1
 8006142:	431a      	orrs	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006148:	231f      	movs	r3, #31
 800614a:	18fb      	adds	r3, r7, r3
 800614c:	2201      	movs	r2, #1
 800614e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	0018      	movs	r0, r3
 8006156:	f7ff ff94 	bl	8006082 <LL_ADC_REG_IsConversionOngoing>
 800615a:	0003      	movs	r3, r0
 800615c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006162:	2210      	movs	r2, #16
 8006164:	4013      	ands	r3, r2
 8006166:	d000      	beq.n	800616a <HAL_ADC_Init+0xc6>
 8006168:	e122      	b.n	80063b0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d000      	beq.n	8006172 <HAL_ADC_Init+0xce>
 8006170:	e11e      	b.n	80063b0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006176:	4a99      	ldr	r2, [pc, #612]	@ (80063dc <HAL_ADC_Init+0x338>)
 8006178:	4013      	ands	r3, r2
 800617a:	2202      	movs	r2, #2
 800617c:	431a      	orrs	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	0018      	movs	r0, r3
 8006188:	f7ff ff6a 	bl	8006060 <LL_ADC_IsEnabled>
 800618c:	1e03      	subs	r3, r0, #0
 800618e:	d000      	beq.n	8006192 <HAL_ADC_Init+0xee>
 8006190:	e0ad      	b.n	80062ee <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	7e1b      	ldrb	r3, [r3, #24]
 800619a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800619c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	7e5b      	ldrb	r3, [r3, #25]
 80061a2:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80061a4:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	7e9b      	ldrb	r3, [r3, #26]
 80061aa:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80061ac:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d002      	beq.n	80061bc <HAL_ADC_Init+0x118>
 80061b6:	2380      	movs	r3, #128	@ 0x80
 80061b8:	015b      	lsls	r3, r3, #5
 80061ba:	e000      	b.n	80061be <HAL_ADC_Init+0x11a>
 80061bc:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80061be:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80061c4:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	da04      	bge.n	80061d8 <HAL_ADC_Init+0x134>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	005b      	lsls	r3, r3, #1
 80061d4:	085b      	lsrs	r3, r3, #1
 80061d6:	e001      	b.n	80061dc <HAL_ADC_Init+0x138>
 80061d8:	2380      	movs	r3, #128	@ 0x80
 80061da:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80061dc:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	212c      	movs	r1, #44	@ 0x2c
 80061e2:	5c5b      	ldrb	r3, [r3, r1]
 80061e4:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80061e6:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80061e8:	69ba      	ldr	r2, [r7, #24]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2220      	movs	r2, #32
 80061f2:	5c9b      	ldrb	r3, [r3, r2]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d115      	bne.n	8006224 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	7e9b      	ldrb	r3, [r3, #26]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d105      	bne.n	800620c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	2280      	movs	r2, #128	@ 0x80
 8006204:	0252      	lsls	r2, r2, #9
 8006206:	4313      	orrs	r3, r2
 8006208:	61bb      	str	r3, [r7, #24]
 800620a:	e00b      	b.n	8006224 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006210:	2220      	movs	r2, #32
 8006212:	431a      	orrs	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800621c:	2201      	movs	r2, #1
 800621e:	431a      	orrs	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00a      	beq.n	8006242 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006230:	23e0      	movs	r3, #224	@ 0xe0
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800623a:	4313      	orrs	r3, r2
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	4313      	orrs	r3, r2
 8006240:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	4a65      	ldr	r2, [pc, #404]	@ (80063e0 <HAL_ADC_Init+0x33c>)
 800624a:	4013      	ands	r3, r2
 800624c:	0019      	movs	r1, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	69ba      	ldr	r2, [r7, #24]
 8006254:	430a      	orrs	r2, r1
 8006256:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	0f9b      	lsrs	r3, r3, #30
 800625e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006264:	4313      	orrs	r3, r2
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	4313      	orrs	r3, r2
 800626a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	223c      	movs	r2, #60	@ 0x3c
 8006270:	5c9b      	ldrb	r3, [r3, r2]
 8006272:	2b01      	cmp	r3, #1
 8006274:	d111      	bne.n	800629a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	0f9b      	lsrs	r3, r3, #30
 800627c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006282:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8006288:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800628e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	4313      	orrs	r3, r2
 8006294:	2201      	movs	r2, #1
 8006296:	4313      	orrs	r3, r2
 8006298:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	4a50      	ldr	r2, [pc, #320]	@ (80063e4 <HAL_ADC_Init+0x340>)
 80062a2:	4013      	ands	r3, r2
 80062a4:	0019      	movs	r1, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	430a      	orrs	r2, r1
 80062ae:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685a      	ldr	r2, [r3, #4]
 80062b4:	23c0      	movs	r3, #192	@ 0xc0
 80062b6:	061b      	lsls	r3, r3, #24
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d018      	beq.n	80062ee <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80062c0:	2380      	movs	r3, #128	@ 0x80
 80062c2:	05db      	lsls	r3, r3, #23
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d012      	beq.n	80062ee <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80062cc:	2380      	movs	r3, #128	@ 0x80
 80062ce:	061b      	lsls	r3, r3, #24
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d00c      	beq.n	80062ee <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80062d4:	4b44      	ldr	r3, [pc, #272]	@ (80063e8 <HAL_ADC_Init+0x344>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a44      	ldr	r2, [pc, #272]	@ (80063ec <HAL_ADC_Init+0x348>)
 80062da:	4013      	ands	r3, r2
 80062dc:	0019      	movs	r1, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	23f0      	movs	r3, #240	@ 0xf0
 80062e4:	039b      	lsls	r3, r3, #14
 80062e6:	401a      	ands	r2, r3
 80062e8:	4b3f      	ldr	r3, [pc, #252]	@ (80063e8 <HAL_ADC_Init+0x344>)
 80062ea:	430a      	orrs	r2, r1
 80062ec:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6818      	ldr	r0, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062f6:	001a      	movs	r2, r3
 80062f8:	2100      	movs	r1, #0
 80062fa:	f7ff fdf6 	bl	8005eea <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6818      	ldr	r0, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006306:	493a      	ldr	r1, [pc, #232]	@ (80063f0 <HAL_ADC_Init+0x34c>)
 8006308:	001a      	movs	r2, r3
 800630a:	f7ff fdee 	bl	8005eea <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d109      	bne.n	800632a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2110      	movs	r1, #16
 8006322:	4249      	negs	r1, r1
 8006324:	430a      	orrs	r2, r1
 8006326:	629a      	str	r2, [r3, #40]	@ 0x28
 8006328:	e018      	b.n	800635c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	691a      	ldr	r2, [r3, #16]
 800632e:	2380      	movs	r3, #128	@ 0x80
 8006330:	039b      	lsls	r3, r3, #14
 8006332:	429a      	cmp	r2, r3
 8006334:	d112      	bne.n	800635c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	69db      	ldr	r3, [r3, #28]
 8006340:	3b01      	subs	r3, #1
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	221c      	movs	r2, #28
 8006346:	4013      	ands	r3, r2
 8006348:	2210      	movs	r2, #16
 800634a:	4252      	negs	r2, r2
 800634c:	409a      	lsls	r2, r3
 800634e:	0011      	movs	r1, r2
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	430a      	orrs	r2, r1
 800635a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2100      	movs	r1, #0
 8006362:	0018      	movs	r0, r3
 8006364:	f7ff fdde 	bl	8005f24 <LL_ADC_GetSamplingTimeCommonChannels>
 8006368:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800636e:	429a      	cmp	r2, r3
 8006370:	d10b      	bne.n	800638a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800637c:	2203      	movs	r2, #3
 800637e:	4393      	bics	r3, r2
 8006380:	2201      	movs	r2, #1
 8006382:	431a      	orrs	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006388:	e01c      	b.n	80063c4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800638e:	2212      	movs	r2, #18
 8006390:	4393      	bics	r3, r2
 8006392:	2210      	movs	r2, #16
 8006394:	431a      	orrs	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800639e:	2201      	movs	r2, #1
 80063a0:	431a      	orrs	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80063a6:	231f      	movs	r3, #31
 80063a8:	18fb      	adds	r3, r7, r3
 80063aa:	2201      	movs	r2, #1
 80063ac:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80063ae:	e009      	b.n	80063c4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063b4:	2210      	movs	r2, #16
 80063b6:	431a      	orrs	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80063bc:	231f      	movs	r3, #31
 80063be:	18fb      	adds	r3, r7, r3
 80063c0:	2201      	movs	r2, #1
 80063c2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80063c4:	231f      	movs	r3, #31
 80063c6:	18fb      	adds	r3, r7, r3
 80063c8:	781b      	ldrb	r3, [r3, #0]
}
 80063ca:	0018      	movs	r0, r3
 80063cc:	46bd      	mov	sp, r7
 80063ce:	b008      	add	sp, #32
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	46c0      	nop			@ (mov r8, r8)
 80063d4:	20000004 	.word	0x20000004
 80063d8:	00030d40 	.word	0x00030d40
 80063dc:	fffffefd 	.word	0xfffffefd
 80063e0:	ffde0201 	.word	0xffde0201
 80063e4:	1ffffc02 	.word	0x1ffffc02
 80063e8:	40012708 	.word	0x40012708
 80063ec:	ffc3ffff 	.word	0xffc3ffff
 80063f0:	7fffff04 	.word	0x7fffff04

080063f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80063f4:	b590      	push	{r4, r7, lr}
 80063f6:	b08b      	sub	sp, #44	@ 0x2c
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063fe:	2327      	movs	r3, #39	@ 0x27
 8006400:	18fb      	adds	r3, r7, r3
 8006402:	2200      	movs	r2, #0
 8006404:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006406:	2300      	movs	r3, #0
 8006408:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2254      	movs	r2, #84	@ 0x54
 800640e:	5c9b      	ldrb	r3, [r3, r2]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d101      	bne.n	8006418 <HAL_ADC_ConfigChannel+0x24>
 8006414:	2302      	movs	r3, #2
 8006416:	e141      	b.n	800669c <HAL_ADC_ConfigChannel+0x2a8>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2254      	movs	r2, #84	@ 0x54
 800641c:	2101      	movs	r1, #1
 800641e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	0018      	movs	r0, r3
 8006426:	f7ff fe2c 	bl	8006082 <LL_ADC_REG_IsConversionOngoing>
 800642a:	1e03      	subs	r3, r0, #0
 800642c:	d000      	beq.n	8006430 <HAL_ADC_ConfigChannel+0x3c>
 800642e:	e124      	b.n	800667a <HAL_ADC_ConfigChannel+0x286>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	2b02      	cmp	r3, #2
 8006436:	d100      	bne.n	800643a <HAL_ADC_ConfigChannel+0x46>
 8006438:	e0d8      	b.n	80065ec <HAL_ADC_ConfigChannel+0x1f8>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	691a      	ldr	r2, [r3, #16]
 800643e:	2380      	movs	r3, #128	@ 0x80
 8006440:	061b      	lsls	r3, r3, #24
 8006442:	429a      	cmp	r2, r3
 8006444:	d004      	beq.n	8006450 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800644a:	4a96      	ldr	r2, [pc, #600]	@ (80066a4 <HAL_ADC_ConfigChannel+0x2b0>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d108      	bne.n	8006462 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	0019      	movs	r1, r3
 800645a:	0010      	movs	r0, r2
 800645c:	f7ff fd99 	bl	8005f92 <LL_ADC_REG_SetSequencerChAdd>
 8006460:	e060      	b.n	8006524 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	211f      	movs	r1, #31
 800646c:	400b      	ands	r3, r1
 800646e:	210f      	movs	r1, #15
 8006470:	4099      	lsls	r1, r3
 8006472:	000b      	movs	r3, r1
 8006474:	43db      	mvns	r3, r3
 8006476:	4013      	ands	r3, r2
 8006478:	001c      	movs	r4, r3
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	025b      	lsls	r3, r3, #9
 8006480:	0a5b      	lsrs	r3, r3, #9
 8006482:	d105      	bne.n	8006490 <HAL_ADC_ConfigChannel+0x9c>
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	0e9b      	lsrs	r3, r3, #26
 800648a:	221f      	movs	r2, #31
 800648c:	401a      	ands	r2, r3
 800648e:	e02e      	b.n	80064ee <HAL_ADC_ConfigChannel+0xfa>
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8006496:	231f      	movs	r3, #31
 8006498:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	085b      	lsrs	r3, r3, #1
 80064a2:	61bb      	str	r3, [r7, #24]
 80064a4:	e00e      	b.n	80064c4 <HAL_ADC_ConfigChannel+0xd0>
    result <<= 1U;
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	005b      	lsls	r3, r3, #1
 80064aa:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	2201      	movs	r2, #1
 80064b0:	4013      	ands	r3, r2
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	613b      	str	r3, [r7, #16]
    s--;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	3b01      	subs	r3, #1
 80064bc:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	085b      	lsrs	r3, r3, #1
 80064c2:	61bb      	str	r3, [r7, #24]
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1ed      	bne.n	80064a6 <HAL_ADC_ConfigChannel+0xb2>
  result <<= s;                        /* shift when v's highest bits are zero */
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	409a      	lsls	r2, r3
 80064d0:	0013      	movs	r3, r2
 80064d2:	613b      	str	r3, [r7, #16]
  return result;
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <HAL_ADC_ConfigChannel+0xee>
    return 32U;
 80064de:	2320      	movs	r3, #32
 80064e0:	e004      	b.n	80064ec <HAL_ADC_ConfigChannel+0xf8>
  return __builtin_clz(value);
 80064e2:	69f8      	ldr	r0, [r7, #28]
 80064e4:	f7f9 ffe0 	bl	80004a8 <__clzsi2>
 80064e8:	0003      	movs	r3, r0
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	001a      	movs	r2, r3
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	211f      	movs	r1, #31
 80064f4:	400b      	ands	r3, r1
 80064f6:	409a      	lsls	r2, r3
 80064f8:	0013      	movs	r3, r2
 80064fa:	0022      	movs	r2, r4
 80064fc:	431a      	orrs	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	089b      	lsrs	r3, r3, #2
 8006508:	1c5a      	adds	r2, r3, #1
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	69db      	ldr	r3, [r3, #28]
 800650e:	429a      	cmp	r2, r3
 8006510:	d808      	bhi.n	8006524 <HAL_ADC_ConfigChannel+0x130>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6818      	ldr	r0, [r3, #0]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	6859      	ldr	r1, [r3, #4]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	001a      	movs	r2, r3
 8006520:	f7ff fd17 	bl	8005f52 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6818      	ldr	r0, [r3, #0]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	6819      	ldr	r1, [r3, #0]
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	001a      	movs	r2, r3
 8006532:	f7ff fd51 	bl	8005fd8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	db00      	blt.n	8006540 <HAL_ADC_ConfigChannel+0x14c>
 800653e:	e0a6      	b.n	800668e <HAL_ADC_ConfigChannel+0x29a>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006540:	4b59      	ldr	r3, [pc, #356]	@ (80066a8 <HAL_ADC_ConfigChannel+0x2b4>)
 8006542:	0018      	movs	r0, r3
 8006544:	f7ff fcc4 	bl	8005ed0 <LL_ADC_GetCommonPathInternalCh>
 8006548:	0003      	movs	r3, r0
 800654a:	623b      	str	r3, [r7, #32]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a56      	ldr	r2, [pc, #344]	@ (80066ac <HAL_ADC_ConfigChannel+0x2b8>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d122      	bne.n	800659c <HAL_ADC_ConfigChannel+0x1a8>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006556:	6a3a      	ldr	r2, [r7, #32]
 8006558:	2380      	movs	r3, #128	@ 0x80
 800655a:	041b      	lsls	r3, r3, #16
 800655c:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800655e:	d11d      	bne.n	800659c <HAL_ADC_ConfigChannel+0x1a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006560:	6a3b      	ldr	r3, [r7, #32]
 8006562:	2280      	movs	r2, #128	@ 0x80
 8006564:	0412      	lsls	r2, r2, #16
 8006566:	4313      	orrs	r3, r2
 8006568:	4a4f      	ldr	r2, [pc, #316]	@ (80066a8 <HAL_ADC_ConfigChannel+0x2b4>)
 800656a:	0019      	movs	r1, r3
 800656c:	0010      	movs	r0, r2
 800656e:	f7ff fc9b 	bl	8005ea8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006572:	4b4f      	ldr	r3, [pc, #316]	@ (80066b0 <HAL_ADC_ConfigChannel+0x2bc>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	494f      	ldr	r1, [pc, #316]	@ (80066b4 <HAL_ADC_ConfigChannel+0x2c0>)
 8006578:	0018      	movs	r0, r3
 800657a:	f7f9 fde1 	bl	8000140 <__udivsi3>
 800657e:	0003      	movs	r3, r0
 8006580:	1c5a      	adds	r2, r3, #1
 8006582:	0013      	movs	r3, r2
 8006584:	005b      	lsls	r3, r3, #1
 8006586:	189b      	adds	r3, r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800658c:	e002      	b.n	8006594 <HAL_ADC_ConfigChannel+0x1a0>
          {
            wait_loop_index--;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	3b01      	subs	r3, #1
 8006592:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1f9      	bne.n	800658e <HAL_ADC_ConfigChannel+0x19a>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800659a:	e078      	b.n	800668e <HAL_ADC_ConfigChannel+0x29a>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a45      	ldr	r2, [pc, #276]	@ (80066b8 <HAL_ADC_ConfigChannel+0x2c4>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d10e      	bne.n	80065c4 <HAL_ADC_ConfigChannel+0x1d0>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80065a6:	6a3a      	ldr	r2, [r7, #32]
 80065a8:	2380      	movs	r3, #128	@ 0x80
 80065aa:	045b      	lsls	r3, r3, #17
 80065ac:	4013      	ands	r3, r2
 80065ae:	d109      	bne.n	80065c4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80065b0:	6a3b      	ldr	r3, [r7, #32]
 80065b2:	2280      	movs	r2, #128	@ 0x80
 80065b4:	0452      	lsls	r2, r2, #17
 80065b6:	4313      	orrs	r3, r2
 80065b8:	4a3b      	ldr	r2, [pc, #236]	@ (80066a8 <HAL_ADC_ConfigChannel+0x2b4>)
 80065ba:	0019      	movs	r1, r3
 80065bc:	0010      	movs	r0, r2
 80065be:	f7ff fc73 	bl	8005ea8 <LL_ADC_SetCommonPathInternalCh>
 80065c2:	e064      	b.n	800668e <HAL_ADC_ConfigChannel+0x29a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a3c      	ldr	r2, [pc, #240]	@ (80066bc <HAL_ADC_ConfigChannel+0x2c8>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d15f      	bne.n	800668e <HAL_ADC_ConfigChannel+0x29a>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80065ce:	6a3a      	ldr	r2, [r7, #32]
 80065d0:	2380      	movs	r3, #128	@ 0x80
 80065d2:	03db      	lsls	r3, r3, #15
 80065d4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80065d6:	d15a      	bne.n	800668e <HAL_ADC_ConfigChannel+0x29a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	2280      	movs	r2, #128	@ 0x80
 80065dc:	03d2      	lsls	r2, r2, #15
 80065de:	4313      	orrs	r3, r2
 80065e0:	4a31      	ldr	r2, [pc, #196]	@ (80066a8 <HAL_ADC_ConfigChannel+0x2b4>)
 80065e2:	0019      	movs	r1, r3
 80065e4:	0010      	movs	r0, r2
 80065e6:	f7ff fc5f 	bl	8005ea8 <LL_ADC_SetCommonPathInternalCh>
 80065ea:	e050      	b.n	800668e <HAL_ADC_ConfigChannel+0x29a>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	691a      	ldr	r2, [r3, #16]
 80065f0:	2380      	movs	r3, #128	@ 0x80
 80065f2:	061b      	lsls	r3, r3, #24
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d004      	beq.n	8006602 <HAL_ADC_ConfigChannel+0x20e>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80065fc:	4a29      	ldr	r2, [pc, #164]	@ (80066a4 <HAL_ADC_ConfigChannel+0x2b0>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d107      	bne.n	8006612 <HAL_ADC_ConfigChannel+0x21e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	0019      	movs	r1, r3
 800660c:	0010      	movs	r0, r2
 800660e:	f7ff fcd1 	bl	8005fb4 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	da39      	bge.n	800668e <HAL_ADC_ConfigChannel+0x29a>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800661a:	4b23      	ldr	r3, [pc, #140]	@ (80066a8 <HAL_ADC_ConfigChannel+0x2b4>)
 800661c:	0018      	movs	r0, r3
 800661e:	f7ff fc57 	bl	8005ed0 <LL_ADC_GetCommonPathInternalCh>
 8006622:	0003      	movs	r3, r0
 8006624:	623b      	str	r3, [r7, #32]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a20      	ldr	r2, [pc, #128]	@ (80066ac <HAL_ADC_ConfigChannel+0x2b8>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d108      	bne.n	8006642 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006630:	6a3b      	ldr	r3, [r7, #32]
 8006632:	4a23      	ldr	r2, [pc, #140]	@ (80066c0 <HAL_ADC_ConfigChannel+0x2cc>)
 8006634:	4013      	ands	r3, r2
 8006636:	4a1c      	ldr	r2, [pc, #112]	@ (80066a8 <HAL_ADC_ConfigChannel+0x2b4>)
 8006638:	0019      	movs	r1, r3
 800663a:	0010      	movs	r0, r2
 800663c:	f7ff fc34 	bl	8005ea8 <LL_ADC_SetCommonPathInternalCh>
 8006640:	e025      	b.n	800668e <HAL_ADC_ConfigChannel+0x29a>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a1c      	ldr	r2, [pc, #112]	@ (80066b8 <HAL_ADC_ConfigChannel+0x2c4>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d108      	bne.n	800665e <HAL_ADC_ConfigChannel+0x26a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800664c:	6a3b      	ldr	r3, [r7, #32]
 800664e:	4a1d      	ldr	r2, [pc, #116]	@ (80066c4 <HAL_ADC_ConfigChannel+0x2d0>)
 8006650:	4013      	ands	r3, r2
 8006652:	4a15      	ldr	r2, [pc, #84]	@ (80066a8 <HAL_ADC_ConfigChannel+0x2b4>)
 8006654:	0019      	movs	r1, r3
 8006656:	0010      	movs	r0, r2
 8006658:	f7ff fc26 	bl	8005ea8 <LL_ADC_SetCommonPathInternalCh>
 800665c:	e017      	b.n	800668e <HAL_ADC_ConfigChannel+0x29a>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a16      	ldr	r2, [pc, #88]	@ (80066bc <HAL_ADC_ConfigChannel+0x2c8>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d112      	bne.n	800668e <HAL_ADC_ConfigChannel+0x29a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	4a17      	ldr	r2, [pc, #92]	@ (80066c8 <HAL_ADC_ConfigChannel+0x2d4>)
 800666c:	4013      	ands	r3, r2
 800666e:	4a0e      	ldr	r2, [pc, #56]	@ (80066a8 <HAL_ADC_ConfigChannel+0x2b4>)
 8006670:	0019      	movs	r1, r3
 8006672:	0010      	movs	r0, r2
 8006674:	f7ff fc18 	bl	8005ea8 <LL_ADC_SetCommonPathInternalCh>
 8006678:	e009      	b.n	800668e <HAL_ADC_ConfigChannel+0x29a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800667e:	2220      	movs	r2, #32
 8006680:	431a      	orrs	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006686:	2327      	movs	r3, #39	@ 0x27
 8006688:	18fb      	adds	r3, r7, r3
 800668a:	2201      	movs	r2, #1
 800668c:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2254      	movs	r2, #84	@ 0x54
 8006692:	2100      	movs	r1, #0
 8006694:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8006696:	2327      	movs	r3, #39	@ 0x27
 8006698:	18fb      	adds	r3, r7, r3
 800669a:	781b      	ldrb	r3, [r3, #0]
}
 800669c:	0018      	movs	r0, r3
 800669e:	46bd      	mov	sp, r7
 80066a0:	b00b      	add	sp, #44	@ 0x2c
 80066a2:	bd90      	pop	{r4, r7, pc}
 80066a4:	80000004 	.word	0x80000004
 80066a8:	40012708 	.word	0x40012708
 80066ac:	ac000800 	.word	0xac000800
 80066b0:	20000004 	.word	0x20000004
 80066b4:	00030d40 	.word	0x00030d40
 80066b8:	b4002000 	.word	0xb4002000
 80066bc:	b0001000 	.word	0xb0001000
 80066c0:	ff7fffff 	.word	0xff7fffff
 80066c4:	feffffff 	.word	0xfeffffff
 80066c8:	ffbfffff 	.word	0xffbfffff

080066cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066cc:	b590      	push	{r4, r7, lr}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	0002      	movs	r2, r0
 80066d4:	6039      	str	r1, [r7, #0]
 80066d6:	1dfb      	adds	r3, r7, #7
 80066d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80066da:	1dfb      	adds	r3, r7, #7
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	2b7f      	cmp	r3, #127	@ 0x7f
 80066e0:	d828      	bhi.n	8006734 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80066e2:	4a2f      	ldr	r2, [pc, #188]	@ (80067a0 <__NVIC_SetPriority+0xd4>)
 80066e4:	1dfb      	adds	r3, r7, #7
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	b25b      	sxtb	r3, r3
 80066ea:	089b      	lsrs	r3, r3, #2
 80066ec:	33c0      	adds	r3, #192	@ 0xc0
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	589b      	ldr	r3, [r3, r2]
 80066f2:	1dfa      	adds	r2, r7, #7
 80066f4:	7812      	ldrb	r2, [r2, #0]
 80066f6:	0011      	movs	r1, r2
 80066f8:	2203      	movs	r2, #3
 80066fa:	400a      	ands	r2, r1
 80066fc:	00d2      	lsls	r2, r2, #3
 80066fe:	21ff      	movs	r1, #255	@ 0xff
 8006700:	4091      	lsls	r1, r2
 8006702:	000a      	movs	r2, r1
 8006704:	43d2      	mvns	r2, r2
 8006706:	401a      	ands	r2, r3
 8006708:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	019b      	lsls	r3, r3, #6
 800670e:	22ff      	movs	r2, #255	@ 0xff
 8006710:	401a      	ands	r2, r3
 8006712:	1dfb      	adds	r3, r7, #7
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	0018      	movs	r0, r3
 8006718:	2303      	movs	r3, #3
 800671a:	4003      	ands	r3, r0
 800671c:	00db      	lsls	r3, r3, #3
 800671e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006720:	481f      	ldr	r0, [pc, #124]	@ (80067a0 <__NVIC_SetPriority+0xd4>)
 8006722:	1dfb      	adds	r3, r7, #7
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	b25b      	sxtb	r3, r3
 8006728:	089b      	lsrs	r3, r3, #2
 800672a:	430a      	orrs	r2, r1
 800672c:	33c0      	adds	r3, #192	@ 0xc0
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006732:	e031      	b.n	8006798 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006734:	4a1b      	ldr	r2, [pc, #108]	@ (80067a4 <__NVIC_SetPriority+0xd8>)
 8006736:	1dfb      	adds	r3, r7, #7
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	0019      	movs	r1, r3
 800673c:	230f      	movs	r3, #15
 800673e:	400b      	ands	r3, r1
 8006740:	3b08      	subs	r3, #8
 8006742:	089b      	lsrs	r3, r3, #2
 8006744:	3306      	adds	r3, #6
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	18d3      	adds	r3, r2, r3
 800674a:	3304      	adds	r3, #4
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	1dfa      	adds	r2, r7, #7
 8006750:	7812      	ldrb	r2, [r2, #0]
 8006752:	0011      	movs	r1, r2
 8006754:	2203      	movs	r2, #3
 8006756:	400a      	ands	r2, r1
 8006758:	00d2      	lsls	r2, r2, #3
 800675a:	21ff      	movs	r1, #255	@ 0xff
 800675c:	4091      	lsls	r1, r2
 800675e:	000a      	movs	r2, r1
 8006760:	43d2      	mvns	r2, r2
 8006762:	401a      	ands	r2, r3
 8006764:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	019b      	lsls	r3, r3, #6
 800676a:	22ff      	movs	r2, #255	@ 0xff
 800676c:	401a      	ands	r2, r3
 800676e:	1dfb      	adds	r3, r7, #7
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	0018      	movs	r0, r3
 8006774:	2303      	movs	r3, #3
 8006776:	4003      	ands	r3, r0
 8006778:	00db      	lsls	r3, r3, #3
 800677a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800677c:	4809      	ldr	r0, [pc, #36]	@ (80067a4 <__NVIC_SetPriority+0xd8>)
 800677e:	1dfb      	adds	r3, r7, #7
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	001c      	movs	r4, r3
 8006784:	230f      	movs	r3, #15
 8006786:	4023      	ands	r3, r4
 8006788:	3b08      	subs	r3, #8
 800678a:	089b      	lsrs	r3, r3, #2
 800678c:	430a      	orrs	r2, r1
 800678e:	3306      	adds	r3, #6
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	18c3      	adds	r3, r0, r3
 8006794:	3304      	adds	r3, #4
 8006796:	601a      	str	r2, [r3, #0]
}
 8006798:	46c0      	nop			@ (mov r8, r8)
 800679a:	46bd      	mov	sp, r7
 800679c:	b003      	add	sp, #12
 800679e:	bd90      	pop	{r4, r7, pc}
 80067a0:	e000e100 	.word	0xe000e100
 80067a4:	e000ed00 	.word	0xe000ed00

080067a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	1e5a      	subs	r2, r3, #1
 80067b4:	2380      	movs	r3, #128	@ 0x80
 80067b6:	045b      	lsls	r3, r3, #17
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d301      	bcc.n	80067c0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80067bc:	2301      	movs	r3, #1
 80067be:	e010      	b.n	80067e2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80067c0:	4b0a      	ldr	r3, [pc, #40]	@ (80067ec <SysTick_Config+0x44>)
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	3a01      	subs	r2, #1
 80067c6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80067c8:	2301      	movs	r3, #1
 80067ca:	425b      	negs	r3, r3
 80067cc:	2103      	movs	r1, #3
 80067ce:	0018      	movs	r0, r3
 80067d0:	f7ff ff7c 	bl	80066cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80067d4:	4b05      	ldr	r3, [pc, #20]	@ (80067ec <SysTick_Config+0x44>)
 80067d6:	2200      	movs	r2, #0
 80067d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80067da:	4b04      	ldr	r3, [pc, #16]	@ (80067ec <SysTick_Config+0x44>)
 80067dc:	2207      	movs	r2, #7
 80067de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	0018      	movs	r0, r3
 80067e4:	46bd      	mov	sp, r7
 80067e6:	b002      	add	sp, #8
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	46c0      	nop			@ (mov r8, r8)
 80067ec:	e000e010 	.word	0xe000e010

080067f0 <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60b9      	str	r1, [r7, #8]
 80067f8:	607a      	str	r2, [r7, #4]
 80067fa:	210f      	movs	r1, #15
 80067fc:	187b      	adds	r3, r7, r1
 80067fe:	1c02      	adds	r2, r0, #0
 8006800:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	187b      	adds	r3, r7, r1
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	b25b      	sxtb	r3, r3
 800680a:	0011      	movs	r1, r2
 800680c:	0018      	movs	r0, r3
 800680e:	f7ff ff5d 	bl	80066cc <__NVIC_SetPriority>
}
 8006812:	46c0      	nop			@ (mov r8, r8)
 8006814:	46bd      	mov	sp, r7
 8006816:	b004      	add	sp, #16
 8006818:	bd80      	pop	{r7, pc}

0800681a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b082      	sub	sp, #8
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	0018      	movs	r0, r3
 8006826:	f7ff ffbf 	bl	80067a8 <SysTick_Config>
 800682a:	0003      	movs	r3, r0
}
 800682c:	0018      	movs	r0, r3
 800682e:	46bd      	mov	sp, r7
 8006830:	b002      	add	sp, #8
 8006832:	bd80      	pop	{r7, pc}

08006834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800683e:	2300      	movs	r3, #0
 8006840:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006842:	e153      	b.n	8006aec <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2101      	movs	r1, #1
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	4091      	lsls	r1, r2
 800684e:	000a      	movs	r2, r1
 8006850:	4013      	ands	r3, r2
 8006852:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d100      	bne.n	800685c <HAL_GPIO_Init+0x28>
 800685a:	e144      	b.n	8006ae6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	2203      	movs	r2, #3
 8006862:	4013      	ands	r3, r2
 8006864:	2b01      	cmp	r3, #1
 8006866:	d005      	beq.n	8006874 <HAL_GPIO_Init+0x40>
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	2203      	movs	r2, #3
 800686e:	4013      	ands	r3, r2
 8006870:	2b02      	cmp	r3, #2
 8006872:	d130      	bne.n	80068d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	005b      	lsls	r3, r3, #1
 800687e:	2203      	movs	r2, #3
 8006880:	409a      	lsls	r2, r3
 8006882:	0013      	movs	r3, r2
 8006884:	43da      	mvns	r2, r3
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	4013      	ands	r3, r2
 800688a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	68da      	ldr	r2, [r3, #12]
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	005b      	lsls	r3, r3, #1
 8006894:	409a      	lsls	r2, r3
 8006896:	0013      	movs	r3, r2
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	4313      	orrs	r3, r2
 800689c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	693a      	ldr	r2, [r7, #16]
 80068a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80068aa:	2201      	movs	r2, #1
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	409a      	lsls	r2, r3
 80068b0:	0013      	movs	r3, r2
 80068b2:	43da      	mvns	r2, r3
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	4013      	ands	r3, r2
 80068b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	091b      	lsrs	r3, r3, #4
 80068c0:	2201      	movs	r2, #1
 80068c2:	401a      	ands	r2, r3
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	409a      	lsls	r2, r3
 80068c8:	0013      	movs	r3, r2
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	2203      	movs	r2, #3
 80068dc:	4013      	ands	r3, r2
 80068de:	2b03      	cmp	r3, #3
 80068e0:	d017      	beq.n	8006912 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	005b      	lsls	r3, r3, #1
 80068ec:	2203      	movs	r2, #3
 80068ee:	409a      	lsls	r2, r3
 80068f0:	0013      	movs	r3, r2
 80068f2:	43da      	mvns	r2, r3
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	4013      	ands	r3, r2
 80068f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	689a      	ldr	r2, [r3, #8]
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	005b      	lsls	r3, r3, #1
 8006902:	409a      	lsls	r2, r3
 8006904:	0013      	movs	r3, r2
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	4313      	orrs	r3, r2
 800690a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	2203      	movs	r2, #3
 8006918:	4013      	ands	r3, r2
 800691a:	2b02      	cmp	r3, #2
 800691c:	d123      	bne.n	8006966 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	08da      	lsrs	r2, r3, #3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	3208      	adds	r2, #8
 8006926:	0092      	lsls	r2, r2, #2
 8006928:	58d3      	ldr	r3, [r2, r3]
 800692a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	2207      	movs	r2, #7
 8006930:	4013      	ands	r3, r2
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	220f      	movs	r2, #15
 8006936:	409a      	lsls	r2, r3
 8006938:	0013      	movs	r3, r2
 800693a:	43da      	mvns	r2, r3
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	4013      	ands	r3, r2
 8006940:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	691a      	ldr	r2, [r3, #16]
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	2107      	movs	r1, #7
 800694a:	400b      	ands	r3, r1
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	409a      	lsls	r2, r3
 8006950:	0013      	movs	r3, r2
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	4313      	orrs	r3, r2
 8006956:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	08da      	lsrs	r2, r3, #3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	3208      	adds	r2, #8
 8006960:	0092      	lsls	r2, r2, #2
 8006962:	6939      	ldr	r1, [r7, #16]
 8006964:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	005b      	lsls	r3, r3, #1
 8006970:	2203      	movs	r2, #3
 8006972:	409a      	lsls	r2, r3
 8006974:	0013      	movs	r3, r2
 8006976:	43da      	mvns	r2, r3
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	4013      	ands	r3, r2
 800697c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	2203      	movs	r2, #3
 8006984:	401a      	ands	r2, r3
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	005b      	lsls	r3, r3, #1
 800698a:	409a      	lsls	r2, r3
 800698c:	0013      	movs	r3, r2
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	4313      	orrs	r3, r2
 8006992:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	23c0      	movs	r3, #192	@ 0xc0
 80069a0:	029b      	lsls	r3, r3, #10
 80069a2:	4013      	ands	r3, r2
 80069a4:	d100      	bne.n	80069a8 <HAL_GPIO_Init+0x174>
 80069a6:	e09e      	b.n	8006ae6 <HAL_GPIO_Init+0x2b2>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80069a8:	4a56      	ldr	r2, [pc, #344]	@ (8006b04 <HAL_GPIO_Init+0x2d0>)
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	089b      	lsrs	r3, r3, #2
 80069ae:	3318      	adds	r3, #24
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	589b      	ldr	r3, [r3, r2]
 80069b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	2203      	movs	r2, #3
 80069ba:	4013      	ands	r3, r2
 80069bc:	00db      	lsls	r3, r3, #3
 80069be:	220f      	movs	r2, #15
 80069c0:	409a      	lsls	r2, r3
 80069c2:	0013      	movs	r3, r2
 80069c4:	43da      	mvns	r2, r3
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	4013      	ands	r3, r2
 80069ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	23a0      	movs	r3, #160	@ 0xa0
 80069d0:	05db      	lsls	r3, r3, #23
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d01f      	beq.n	8006a16 <HAL_GPIO_Init+0x1e2>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a4b      	ldr	r2, [pc, #300]	@ (8006b08 <HAL_GPIO_Init+0x2d4>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d019      	beq.n	8006a12 <HAL_GPIO_Init+0x1de>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a4a      	ldr	r2, [pc, #296]	@ (8006b0c <HAL_GPIO_Init+0x2d8>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d013      	beq.n	8006a0e <HAL_GPIO_Init+0x1da>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a49      	ldr	r2, [pc, #292]	@ (8006b10 <HAL_GPIO_Init+0x2dc>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d00d      	beq.n	8006a0a <HAL_GPIO_Init+0x1d6>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a48      	ldr	r2, [pc, #288]	@ (8006b14 <HAL_GPIO_Init+0x2e0>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d007      	beq.n	8006a06 <HAL_GPIO_Init+0x1d2>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a47      	ldr	r2, [pc, #284]	@ (8006b18 <HAL_GPIO_Init+0x2e4>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d101      	bne.n	8006a02 <HAL_GPIO_Init+0x1ce>
 80069fe:	2305      	movs	r3, #5
 8006a00:	e00a      	b.n	8006a18 <HAL_GPIO_Init+0x1e4>
 8006a02:	2306      	movs	r3, #6
 8006a04:	e008      	b.n	8006a18 <HAL_GPIO_Init+0x1e4>
 8006a06:	2304      	movs	r3, #4
 8006a08:	e006      	b.n	8006a18 <HAL_GPIO_Init+0x1e4>
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	e004      	b.n	8006a18 <HAL_GPIO_Init+0x1e4>
 8006a0e:	2302      	movs	r3, #2
 8006a10:	e002      	b.n	8006a18 <HAL_GPIO_Init+0x1e4>
 8006a12:	2301      	movs	r3, #1
 8006a14:	e000      	b.n	8006a18 <HAL_GPIO_Init+0x1e4>
 8006a16:	2300      	movs	r3, #0
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	2103      	movs	r1, #3
 8006a1c:	400a      	ands	r2, r1
 8006a1e:	00d2      	lsls	r2, r2, #3
 8006a20:	4093      	lsls	r3, r2
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8006a28:	4936      	ldr	r1, [pc, #216]	@ (8006b04 <HAL_GPIO_Init+0x2d0>)
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	089b      	lsrs	r3, r3, #2
 8006a2e:	3318      	adds	r3, #24
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006a36:	4b33      	ldr	r3, [pc, #204]	@ (8006b04 <HAL_GPIO_Init+0x2d0>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	43da      	mvns	r2, r3
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	4013      	ands	r3, r2
 8006a44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	685a      	ldr	r2, [r3, #4]
 8006a4a:	2380      	movs	r3, #128	@ 0x80
 8006a4c:	035b      	lsls	r3, r3, #13
 8006a4e:	4013      	ands	r3, r2
 8006a50:	d003      	beq.n	8006a5a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006a5a:	4b2a      	ldr	r3, [pc, #168]	@ (8006b04 <HAL_GPIO_Init+0x2d0>)
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8006a60:	4b28      	ldr	r3, [pc, #160]	@ (8006b04 <HAL_GPIO_Init+0x2d0>)
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	43da      	mvns	r2, r3
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	685a      	ldr	r2, [r3, #4]
 8006a74:	2380      	movs	r3, #128	@ 0x80
 8006a76:	039b      	lsls	r3, r3, #14
 8006a78:	4013      	ands	r3, r2
 8006a7a:	d003      	beq.n	8006a84 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006a84:	4b1f      	ldr	r3, [pc, #124]	@ (8006b04 <HAL_GPIO_Init+0x2d0>)
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006a8a:	4a1e      	ldr	r2, [pc, #120]	@ (8006b04 <HAL_GPIO_Init+0x2d0>)
 8006a8c:	2384      	movs	r3, #132	@ 0x84
 8006a8e:	58d3      	ldr	r3, [r2, r3]
 8006a90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	43da      	mvns	r2, r3
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	4013      	ands	r3, r2
 8006a9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	2380      	movs	r3, #128	@ 0x80
 8006aa2:	029b      	lsls	r3, r3, #10
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	d003      	beq.n	8006ab0 <HAL_GPIO_Init+0x27c>
        {
          temp |= iocurrent;
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006ab0:	4914      	ldr	r1, [pc, #80]	@ (8006b04 <HAL_GPIO_Init+0x2d0>)
 8006ab2:	2284      	movs	r2, #132	@ 0x84
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8006ab8:	4a12      	ldr	r2, [pc, #72]	@ (8006b04 <HAL_GPIO_Init+0x2d0>)
 8006aba:	2380      	movs	r3, #128	@ 0x80
 8006abc:	58d3      	ldr	r3, [r2, r3]
 8006abe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	43da      	mvns	r2, r3
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	685a      	ldr	r2, [r3, #4]
 8006ace:	2380      	movs	r3, #128	@ 0x80
 8006ad0:	025b      	lsls	r3, r3, #9
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	d003      	beq.n	8006ade <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006ade:	4909      	ldr	r1, [pc, #36]	@ (8006b04 <HAL_GPIO_Init+0x2d0>)
 8006ae0:	2280      	movs	r2, #128	@ 0x80
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	40da      	lsrs	r2, r3
 8006af4:	1e13      	subs	r3, r2, #0
 8006af6:	d000      	beq.n	8006afa <HAL_GPIO_Init+0x2c6>
 8006af8:	e6a4      	b.n	8006844 <HAL_GPIO_Init+0x10>
  }
}
 8006afa:	46c0      	nop			@ (mov r8, r8)
 8006afc:	46c0      	nop			@ (mov r8, r8)
 8006afe:	46bd      	mov	sp, r7
 8006b00:	b006      	add	sp, #24
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	40021800 	.word	0x40021800
 8006b08:	50000400 	.word	0x50000400
 8006b0c:	50000800 	.word	0x50000800
 8006b10:	50000c00 	.word	0x50000c00
 8006b14:	50001000 	.word	0x50001000
 8006b18:	50001400 	.word	0x50001400

08006b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	0008      	movs	r0, r1
 8006b26:	0011      	movs	r1, r2
 8006b28:	1cbb      	adds	r3, r7, #2
 8006b2a:	1c02      	adds	r2, r0, #0
 8006b2c:	801a      	strh	r2, [r3, #0]
 8006b2e:	1c7b      	adds	r3, r7, #1
 8006b30:	1c0a      	adds	r2, r1, #0
 8006b32:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006b34:	1c7b      	adds	r3, r7, #1
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d004      	beq.n	8006b46 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006b3c:	1cbb      	adds	r3, r7, #2
 8006b3e:	881a      	ldrh	r2, [r3, #0]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006b44:	e003      	b.n	8006b4e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006b46:	1cbb      	adds	r3, r7, #2
 8006b48:	881a      	ldrh	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006b4e:	46c0      	nop			@ (mov r8, r8)
 8006b50:	46bd      	mov	sp, r7
 8006b52:	b002      	add	sp, #8
 8006b54:	bd80      	pop	{r7, pc}
	...

08006b58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d101      	bne.n	8006b6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e08f      	b.n	8006c8a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2241      	movs	r2, #65	@ 0x41
 8006b6e:	5c9b      	ldrb	r3, [r3, r2]
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d107      	bne.n	8006b86 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2240      	movs	r2, #64	@ 0x40
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	0018      	movs	r0, r3
 8006b82:	f7fc fe3d 	bl	8003800 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2241      	movs	r2, #65	@ 0x41
 8006b8a:	2124      	movs	r1, #36	@ 0x24
 8006b8c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2101      	movs	r1, #1
 8006b9a:	438a      	bics	r2, r1
 8006b9c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685a      	ldr	r2, [r3, #4]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	493b      	ldr	r1, [pc, #236]	@ (8006c94 <HAL_I2C_Init+0x13c>)
 8006ba8:	400a      	ands	r2, r1
 8006baa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689a      	ldr	r2, [r3, #8]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4938      	ldr	r1, [pc, #224]	@ (8006c98 <HAL_I2C_Init+0x140>)
 8006bb8:	400a      	ands	r2, r1
 8006bba:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d108      	bne.n	8006bd6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	689a      	ldr	r2, [r3, #8]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2180      	movs	r1, #128	@ 0x80
 8006bce:	0209      	lsls	r1, r1, #8
 8006bd0:	430a      	orrs	r2, r1
 8006bd2:	609a      	str	r2, [r3, #8]
 8006bd4:	e007      	b.n	8006be6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	689a      	ldr	r2, [r3, #8]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2184      	movs	r1, #132	@ 0x84
 8006be0:	0209      	lsls	r1, r1, #8
 8006be2:	430a      	orrs	r2, r1
 8006be4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d109      	bne.n	8006c02 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	685a      	ldr	r2, [r3, #4]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2180      	movs	r1, #128	@ 0x80
 8006bfa:	0109      	lsls	r1, r1, #4
 8006bfc:	430a      	orrs	r2, r1
 8006bfe:	605a      	str	r2, [r3, #4]
 8006c00:	e007      	b.n	8006c12 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	685a      	ldr	r2, [r3, #4]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4923      	ldr	r1, [pc, #140]	@ (8006c9c <HAL_I2C_Init+0x144>)
 8006c0e:	400a      	ands	r2, r1
 8006c10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	685a      	ldr	r2, [r3, #4]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4920      	ldr	r1, [pc, #128]	@ (8006ca0 <HAL_I2C_Init+0x148>)
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68da      	ldr	r2, [r3, #12]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	491a      	ldr	r1, [pc, #104]	@ (8006c98 <HAL_I2C_Init+0x140>)
 8006c2e:	400a      	ands	r2, r1
 8006c30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	691a      	ldr	r2, [r3, #16]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	430a      	orrs	r2, r1
 8006c4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	69d9      	ldr	r1, [r3, #28]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a1a      	ldr	r2, [r3, #32]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	430a      	orrs	r2, r1
 8006c5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2101      	movs	r1, #1
 8006c68:	430a      	orrs	r2, r1
 8006c6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2241      	movs	r2, #65	@ 0x41
 8006c76:	2120      	movs	r1, #32
 8006c78:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2242      	movs	r2, #66	@ 0x42
 8006c84:	2100      	movs	r1, #0
 8006c86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	0018      	movs	r0, r3
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	b002      	add	sp, #8
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	46c0      	nop			@ (mov r8, r8)
 8006c94:	f0ffffff 	.word	0xf0ffffff
 8006c98:	ffff7fff 	.word	0xffff7fff
 8006c9c:	fffff7ff 	.word	0xfffff7ff
 8006ca0:	02008000 	.word	0x02008000

08006ca4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2241      	movs	r2, #65	@ 0x41
 8006cb2:	5c9b      	ldrb	r3, [r3, r2]
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b20      	cmp	r3, #32
 8006cb8:	d138      	bne.n	8006d2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2240      	movs	r2, #64	@ 0x40
 8006cbe:	5c9b      	ldrb	r3, [r3, r2]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d101      	bne.n	8006cc8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	e032      	b.n	8006d2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2240      	movs	r2, #64	@ 0x40
 8006ccc:	2101      	movs	r1, #1
 8006cce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2241      	movs	r2, #65	@ 0x41
 8006cd4:	2124      	movs	r1, #36	@ 0x24
 8006cd6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2101      	movs	r1, #1
 8006ce4:	438a      	bics	r2, r1
 8006ce6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4911      	ldr	r1, [pc, #68]	@ (8006d38 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006cf4:	400a      	ands	r2, r1
 8006cf6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	6819      	ldr	r1, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	683a      	ldr	r2, [r7, #0]
 8006d04:	430a      	orrs	r2, r1
 8006d06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2101      	movs	r1, #1
 8006d14:	430a      	orrs	r2, r1
 8006d16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2241      	movs	r2, #65	@ 0x41
 8006d1c:	2120      	movs	r1, #32
 8006d1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2240      	movs	r2, #64	@ 0x40
 8006d24:	2100      	movs	r1, #0
 8006d26:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	e000      	b.n	8006d2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d2c:	2302      	movs	r3, #2
  }
}
 8006d2e:	0018      	movs	r0, r3
 8006d30:	46bd      	mov	sp, r7
 8006d32:	b002      	add	sp, #8
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	46c0      	nop			@ (mov r8, r8)
 8006d38:	ffffefff 	.word	0xffffefff

08006d3c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2241      	movs	r2, #65	@ 0x41
 8006d4a:	5c9b      	ldrb	r3, [r3, r2]
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b20      	cmp	r3, #32
 8006d50:	d139      	bne.n	8006dc6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2240      	movs	r2, #64	@ 0x40
 8006d56:	5c9b      	ldrb	r3, [r3, r2]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d101      	bne.n	8006d60 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	e033      	b.n	8006dc8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2240      	movs	r2, #64	@ 0x40
 8006d64:	2101      	movs	r1, #1
 8006d66:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2241      	movs	r2, #65	@ 0x41
 8006d6c:	2124      	movs	r1, #36	@ 0x24
 8006d6e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2101      	movs	r1, #1
 8006d7c:	438a      	bics	r2, r1
 8006d7e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	4a11      	ldr	r2, [pc, #68]	@ (8006dd0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	021b      	lsls	r3, r3, #8
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2101      	movs	r1, #1
 8006dae:	430a      	orrs	r2, r1
 8006db0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2241      	movs	r2, #65	@ 0x41
 8006db6:	2120      	movs	r1, #32
 8006db8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2240      	movs	r2, #64	@ 0x40
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	e000      	b.n	8006dc8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006dc6:	2302      	movs	r3, #2
  }
}
 8006dc8:	0018      	movs	r0, r3
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	b004      	add	sp, #16
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	fffff0ff 	.word	0xfffff0ff

08006dd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	2380      	movs	r3, #128	@ 0x80
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d137      	bne.n	8006e56 <HAL_PWREx_ControlVoltageScaling+0x82>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006de6:	4b27      	ldr	r3, [pc, #156]	@ (8006e84 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	23c0      	movs	r3, #192	@ 0xc0
 8006dec:	00db      	lsls	r3, r3, #3
 8006dee:	401a      	ands	r2, r3
 8006df0:	2380      	movs	r3, #128	@ 0x80
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d040      	beq.n	8006e7a <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006df8:	4b22      	ldr	r3, [pc, #136]	@ (8006e84 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a22      	ldr	r2, [pc, #136]	@ (8006e88 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8006dfe:	401a      	ands	r2, r3
 8006e00:	4b20      	ldr	r3, [pc, #128]	@ (8006e84 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006e02:	2180      	movs	r1, #128	@ 0x80
 8006e04:	0089      	lsls	r1, r1, #2
 8006e06:	430a      	orrs	r2, r1
 8006e08:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006e0a:	4b20      	ldr	r3, [pc, #128]	@ (8006e8c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2232      	movs	r2, #50	@ 0x32
 8006e10:	4353      	muls	r3, r2
 8006e12:	491f      	ldr	r1, [pc, #124]	@ (8006e90 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8006e14:	0018      	movs	r0, r3
 8006e16:	f7f9 f993 	bl	8000140 <__udivsi3>
 8006e1a:	0003      	movs	r3, r0
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e20:	e002      	b.n	8006e28 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        wait_loop_index--;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	3b01      	subs	r3, #1
 8006e26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e28:	4b16      	ldr	r3, [pc, #88]	@ (8006e84 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006e2a:	695a      	ldr	r2, [r3, #20]
 8006e2c:	2380      	movs	r3, #128	@ 0x80
 8006e2e:	00db      	lsls	r3, r3, #3
 8006e30:	401a      	ands	r2, r3
 8006e32:	2380      	movs	r3, #128	@ 0x80
 8006e34:	00db      	lsls	r3, r3, #3
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d102      	bne.n	8006e40 <HAL_PWREx_ControlVoltageScaling+0x6c>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1f0      	bne.n	8006e22 <HAL_PWREx_ControlVoltageScaling+0x4e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006e40:	4b10      	ldr	r3, [pc, #64]	@ (8006e84 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006e42:	695a      	ldr	r2, [r3, #20]
 8006e44:	2380      	movs	r3, #128	@ 0x80
 8006e46:	00db      	lsls	r3, r3, #3
 8006e48:	401a      	ands	r2, r3
 8006e4a:	2380      	movs	r3, #128	@ 0x80
 8006e4c:	00db      	lsls	r3, r3, #3
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d113      	bne.n	8006e7a <HAL_PWREx_ControlVoltageScaling+0xa6>
      {
        return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e012      	b.n	8006e7c <HAL_PWREx_ControlVoltageScaling+0xa8>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e56:	4b0b      	ldr	r3, [pc, #44]	@ (8006e84 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	23c0      	movs	r3, #192	@ 0xc0
 8006e5c:	00db      	lsls	r3, r3, #3
 8006e5e:	401a      	ands	r2, r3
 8006e60:	2380      	movs	r3, #128	@ 0x80
 8006e62:	00db      	lsls	r3, r3, #3
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d008      	beq.n	8006e7a <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006e68:	4b06      	ldr	r3, [pc, #24]	@ (8006e84 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a06      	ldr	r2, [pc, #24]	@ (8006e88 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8006e6e:	401a      	ands	r2, r3
 8006e70:	4b04      	ldr	r3, [pc, #16]	@ (8006e84 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006e72:	2180      	movs	r1, #128	@ 0x80
 8006e74:	00c9      	lsls	r1, r1, #3
 8006e76:	430a      	orrs	r2, r1
 8006e78:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	0018      	movs	r0, r3
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	b004      	add	sp, #16
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	40007000 	.word	0x40007000
 8006e88:	fffff9ff 	.word	0xfffff9ff
 8006e8c:	20000004 	.word	0x20000004
 8006e90:	000f4240 	.word	0x000f4240

08006e94 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8006e98:	4b03      	ldr	r3, [pc, #12]	@ (8006ea8 <HAL_PWREx_GetVoltageRange+0x14>)
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	23c0      	movs	r3, #192	@ 0xc0
 8006e9e:	00db      	lsls	r3, r3, #3
 8006ea0:	4013      	ands	r3, r2
}
 8006ea2:	0018      	movs	r0, r3
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	40007000 	.word	0x40007000

08006eac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006eac:	b5b0      	push	{r4, r5, r7, lr}
 8006eae:	b088      	sub	sp, #32
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006eb4:	4bc9      	ldr	r3, [pc, #804]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	2238      	movs	r2, #56	@ 0x38
 8006eba:	4013      	ands	r3, r2
 8006ebc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ebe:	4bc7      	ldr	r3, [pc, #796]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	2203      	movs	r2, #3
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2210      	movs	r2, #16
 8006ece:	4013      	ands	r3, r2
 8006ed0:	d100      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x28>
 8006ed2:	e0ef      	b.n	80070b4 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d007      	beq.n	8006eea <HAL_RCC_OscConfig+0x3e>
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	2b18      	cmp	r3, #24
 8006ede:	d000      	beq.n	8006ee2 <HAL_RCC_OscConfig+0x36>
 8006ee0:	e093      	b.n	800700a <HAL_RCC_OscConfig+0x15e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d000      	beq.n	8006eea <HAL_RCC_OscConfig+0x3e>
 8006ee8:	e08f      	b.n	800700a <HAL_RCC_OscConfig+0x15e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006eea:	4bbc      	ldr	r3, [pc, #752]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2202      	movs	r2, #2
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	d006      	beq.n	8006f02 <HAL_RCC_OscConfig+0x56>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	69db      	ldr	r3, [r3, #28]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d102      	bne.n	8006f02 <HAL_RCC_OscConfig+0x56>
      {
        return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	f000 fbf2 	bl	80076e6 <HAL_RCC_OscConfig+0x83a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f06:	4bb5      	ldr	r3, [pc, #724]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2108      	movs	r1, #8
 8006f0c:	400b      	ands	r3, r1
 8006f0e:	d004      	beq.n	8006f1a <HAL_RCC_OscConfig+0x6e>
 8006f10:	4bb2      	ldr	r3, [pc, #712]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	21f0      	movs	r1, #240	@ 0xf0
 8006f16:	400b      	ands	r3, r1
 8006f18:	e005      	b.n	8006f26 <HAL_RCC_OscConfig+0x7a>
 8006f1a:	49b0      	ldr	r1, [pc, #704]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 8006f1c:	2394      	movs	r3, #148	@ 0x94
 8006f1e:	58cb      	ldr	r3, [r1, r3]
 8006f20:	091b      	lsrs	r3, r3, #4
 8006f22:	21f0      	movs	r1, #240	@ 0xf0
 8006f24:	400b      	ands	r3, r1
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d225      	bcs.n	8006f76 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2e:	0018      	movs	r0, r3
 8006f30:	f000 fd90 	bl	8007a54 <RCC_SetFlashLatencyFromMSIRange>
 8006f34:	1e03      	subs	r3, r0, #0
 8006f36:	d002      	beq.n	8006f3e <HAL_RCC_OscConfig+0x92>
          {
            return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	f000 fbd4 	bl	80076e6 <HAL_RCC_OscConfig+0x83a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f3e:	4ba7      	ldr	r3, [pc, #668]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	4ba6      	ldr	r3, [pc, #664]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 8006f44:	2108      	movs	r1, #8
 8006f46:	430a      	orrs	r2, r1
 8006f48:	601a      	str	r2, [r3, #0]
 8006f4a:	4ba4      	ldr	r3, [pc, #656]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	22f0      	movs	r2, #240	@ 0xf0
 8006f50:	4393      	bics	r3, r2
 8006f52:	0019      	movs	r1, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f58:	4ba0      	ldr	r3, [pc, #640]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 8006f5a:	430a      	orrs	r2, r1
 8006f5c:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f5e:	4b9f      	ldr	r3, [pc, #636]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	4a9f      	ldr	r2, [pc, #636]	@ (80071e0 <HAL_RCC_OscConfig+0x334>)
 8006f64:	4013      	ands	r3, r2
 8006f66:	0019      	movs	r1, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a1b      	ldr	r3, [r3, #32]
 8006f6c:	021a      	lsls	r2, r3, #8
 8006f6e:	4b9b      	ldr	r3, [pc, #620]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 8006f70:	430a      	orrs	r2, r1
 8006f72:	605a      	str	r2, [r3, #4]
 8006f74:	e027      	b.n	8006fc6 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f76:	4b99      	ldr	r3, [pc, #612]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	4b98      	ldr	r3, [pc, #608]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 8006f7c:	2108      	movs	r1, #8
 8006f7e:	430a      	orrs	r2, r1
 8006f80:	601a      	str	r2, [r3, #0]
 8006f82:	4b96      	ldr	r3, [pc, #600]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	22f0      	movs	r2, #240	@ 0xf0
 8006f88:	4393      	bics	r3, r2
 8006f8a:	0019      	movs	r1, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f90:	4b92      	ldr	r3, [pc, #584]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 8006f92:	430a      	orrs	r2, r1
 8006f94:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f96:	4b91      	ldr	r3, [pc, #580]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	4a91      	ldr	r2, [pc, #580]	@ (80071e0 <HAL_RCC_OscConfig+0x334>)
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	0019      	movs	r1, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6a1b      	ldr	r3, [r3, #32]
 8006fa4:	021a      	lsls	r2, r3, #8
 8006fa6:	4b8d      	ldr	r3, [pc, #564]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d109      	bne.n	8006fc6 <HAL_RCC_OscConfig+0x11a>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb6:	0018      	movs	r0, r3
 8006fb8:	f000 fd4c 	bl	8007a54 <RCC_SetFlashLatencyFromMSIRange>
 8006fbc:	1e03      	subs	r3, r0, #0
 8006fbe:	d002      	beq.n	8006fc6 <HAL_RCC_OscConfig+0x11a>
            {
              return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	f000 fb90 	bl	80076e6 <HAL_RCC_OscConfig+0x83a>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8006fc6:	f000 fc87 	bl	80078d8 <HAL_RCC_GetSysClockFreq>
 8006fca:	0001      	movs	r1, r0
 8006fcc:	4b83      	ldr	r3, [pc, #524]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 8006fce:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006fd0:	0a1b      	lsrs	r3, r3, #8
 8006fd2:	220f      	movs	r2, #15
 8006fd4:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8006fd6:	4a83      	ldr	r2, [pc, #524]	@ (80071e4 <HAL_RCC_OscConfig+0x338>)
 8006fd8:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006fda:	001a      	movs	r2, r3
 8006fdc:	231f      	movs	r3, #31
 8006fde:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8006fe0:	000a      	movs	r2, r1
 8006fe2:	40da      	lsrs	r2, r3
 8006fe4:	4b80      	ldr	r3, [pc, #512]	@ (80071e8 <HAL_RCC_OscConfig+0x33c>)
 8006fe6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006fe8:	4b80      	ldr	r3, [pc, #512]	@ (80071ec <HAL_RCC_OscConfig+0x340>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	250f      	movs	r5, #15
 8006fee:	197c      	adds	r4, r7, r5
 8006ff0:	0018      	movs	r0, r3
 8006ff2:	f7fe fed3 	bl	8005d9c <HAL_InitTick>
 8006ff6:	0003      	movs	r3, r0
 8006ff8:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 8006ffa:	197b      	adds	r3, r7, r5
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d057      	beq.n	80070b2 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8007002:	197b      	adds	r3, r7, r5
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	f000 fb6e 	bl	80076e6 <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	69db      	ldr	r3, [r3, #28]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d035      	beq.n	800707e <HAL_RCC_OscConfig+0x1d2>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007012:	4b72      	ldr	r3, [pc, #456]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	4b71      	ldr	r3, [pc, #452]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 8007018:	2101      	movs	r1, #1
 800701a:	430a      	orrs	r2, r1
 800701c:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800701e:	f7fe ff17 	bl	8005e50 <HAL_GetTick>
 8007022:	0003      	movs	r3, r0
 8007024:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007026:	e009      	b.n	800703c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8007028:	f7fe ff12 	bl	8005e50 <HAL_GetTick>
 800702c:	0002      	movs	r2, r0
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	2b02      	cmp	r3, #2
 8007034:	d902      	bls.n	800703c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	f000 fb55 	bl	80076e6 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800703c:	4b67      	ldr	r3, [pc, #412]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2202      	movs	r2, #2
 8007042:	4013      	ands	r3, r2
 8007044:	d0f0      	beq.n	8007028 <HAL_RCC_OscConfig+0x17c>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007046:	4b65      	ldr	r3, [pc, #404]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	4b64      	ldr	r3, [pc, #400]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 800704c:	2108      	movs	r1, #8
 800704e:	430a      	orrs	r2, r1
 8007050:	601a      	str	r2, [r3, #0]
 8007052:	4b62      	ldr	r3, [pc, #392]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	22f0      	movs	r2, #240	@ 0xf0
 8007058:	4393      	bics	r3, r2
 800705a:	0019      	movs	r1, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007060:	4b5e      	ldr	r3, [pc, #376]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 8007062:	430a      	orrs	r2, r1
 8007064:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007066:	4b5d      	ldr	r3, [pc, #372]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	4a5d      	ldr	r2, [pc, #372]	@ (80071e0 <HAL_RCC_OscConfig+0x334>)
 800706c:	4013      	ands	r3, r2
 800706e:	0019      	movs	r1, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a1b      	ldr	r3, [r3, #32]
 8007074:	021a      	lsls	r2, r3, #8
 8007076:	4b59      	ldr	r3, [pc, #356]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 8007078:	430a      	orrs	r2, r1
 800707a:	605a      	str	r2, [r3, #4]
 800707c:	e01a      	b.n	80070b4 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800707e:	4b57      	ldr	r3, [pc, #348]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	4b56      	ldr	r3, [pc, #344]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 8007084:	2101      	movs	r1, #1
 8007086:	438a      	bics	r2, r1
 8007088:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800708a:	f7fe fee1 	bl	8005e50 <HAL_GetTick>
 800708e:	0003      	movs	r3, r0
 8007090:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007092:	e008      	b.n	80070a6 <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8007094:	f7fe fedc 	bl	8005e50 <HAL_GetTick>
 8007098:	0002      	movs	r2, r0
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d901      	bls.n	80070a6 <HAL_RCC_OscConfig+0x1fa>
          {
            return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e31f      	b.n	80076e6 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80070a6:	4b4d      	ldr	r3, [pc, #308]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2202      	movs	r2, #2
 80070ac:	4013      	ands	r3, r2
 80070ae:	d1f1      	bne.n	8007094 <HAL_RCC_OscConfig+0x1e8>
 80070b0:	e000      	b.n	80070b4 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80070b2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2201      	movs	r2, #1
 80070ba:	4013      	ands	r3, r2
 80070bc:	d100      	bne.n	80070c0 <HAL_RCC_OscConfig+0x214>
 80070be:	e065      	b.n	800718c <HAL_RCC_OscConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	2b10      	cmp	r3, #16
 80070c4:	d005      	beq.n	80070d2 <HAL_RCC_OscConfig+0x226>
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	2b18      	cmp	r3, #24
 80070ca:	d10e      	bne.n	80070ea <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	2b03      	cmp	r3, #3
 80070d0:	d10b      	bne.n	80070ea <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070d2:	4b42      	ldr	r3, [pc, #264]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	2380      	movs	r3, #128	@ 0x80
 80070d8:	029b      	lsls	r3, r3, #10
 80070da:	4013      	ands	r3, r2
 80070dc:	d055      	beq.n	800718a <HAL_RCC_OscConfig+0x2de>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d151      	bne.n	800718a <HAL_RCC_OscConfig+0x2de>
      {
        return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e2fd      	b.n	80076e6 <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	685a      	ldr	r2, [r3, #4]
 80070ee:	2380      	movs	r3, #128	@ 0x80
 80070f0:	025b      	lsls	r3, r3, #9
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d107      	bne.n	8007106 <HAL_RCC_OscConfig+0x25a>
 80070f6:	4b39      	ldr	r3, [pc, #228]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	4b38      	ldr	r3, [pc, #224]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 80070fc:	2180      	movs	r1, #128	@ 0x80
 80070fe:	0249      	lsls	r1, r1, #9
 8007100:	430a      	orrs	r2, r1
 8007102:	601a      	str	r2, [r3, #0]
 8007104:	e013      	b.n	800712e <HAL_RCC_OscConfig+0x282>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	685a      	ldr	r2, [r3, #4]
 800710a:	23a0      	movs	r3, #160	@ 0xa0
 800710c:	02db      	lsls	r3, r3, #11
 800710e:	429a      	cmp	r2, r3
 8007110:	d107      	bne.n	8007122 <HAL_RCC_OscConfig+0x276>
 8007112:	4b32      	ldr	r3, [pc, #200]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	4b31      	ldr	r3, [pc, #196]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 8007118:	21a0      	movs	r1, #160	@ 0xa0
 800711a:	02c9      	lsls	r1, r1, #11
 800711c:	430a      	orrs	r2, r1
 800711e:	601a      	str	r2, [r3, #0]
 8007120:	e005      	b.n	800712e <HAL_RCC_OscConfig+0x282>
 8007122:	4b2e      	ldr	r3, [pc, #184]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	4b2d      	ldr	r3, [pc, #180]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 8007128:	4931      	ldr	r1, [pc, #196]	@ (80071f0 <HAL_RCC_OscConfig+0x344>)
 800712a:	400a      	ands	r2, r1
 800712c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d014      	beq.n	8007160 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007136:	f7fe fe8b 	bl	8005e50 <HAL_GetTick>
 800713a:	0003      	movs	r3, r0
 800713c:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800713e:	e008      	b.n	8007152 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8007140:	f7fe fe86 	bl	8005e50 <HAL_GetTick>
 8007144:	0002      	movs	r2, r0
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	2b64      	cmp	r3, #100	@ 0x64
 800714c:	d901      	bls.n	8007152 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	e2c9      	b.n	80076e6 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007152:	4b22      	ldr	r3, [pc, #136]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	2380      	movs	r3, #128	@ 0x80
 8007158:	029b      	lsls	r3, r3, #10
 800715a:	4013      	ands	r3, r2
 800715c:	d0f0      	beq.n	8007140 <HAL_RCC_OscConfig+0x294>
 800715e:	e015      	b.n	800718c <HAL_RCC_OscConfig+0x2e0>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007160:	f7fe fe76 	bl	8005e50 <HAL_GetTick>
 8007164:	0003      	movs	r3, r0
 8007166:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007168:	e008      	b.n	800717c <HAL_RCC_OscConfig+0x2d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800716a:	f7fe fe71 	bl	8005e50 <HAL_GetTick>
 800716e:	0002      	movs	r2, r0
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	2b64      	cmp	r3, #100	@ 0x64
 8007176:	d901      	bls.n	800717c <HAL_RCC_OscConfig+0x2d0>
          {
            return HAL_TIMEOUT;
 8007178:	2303      	movs	r3, #3
 800717a:	e2b4      	b.n	80076e6 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800717c:	4b17      	ldr	r3, [pc, #92]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	2380      	movs	r3, #128	@ 0x80
 8007182:	029b      	lsls	r3, r3, #10
 8007184:	4013      	ands	r3, r2
 8007186:	d1f0      	bne.n	800716a <HAL_RCC_OscConfig+0x2be>
 8007188:	e000      	b.n	800718c <HAL_RCC_OscConfig+0x2e0>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800718a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2202      	movs	r2, #2
 8007192:	4013      	ands	r3, r2
 8007194:	d100      	bne.n	8007198 <HAL_RCC_OscConfig+0x2ec>
 8007196:	e074      	b.n	8007282 <HAL_RCC_OscConfig+0x3d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	2b08      	cmp	r3, #8
 800719c:	d005      	beq.n	80071aa <HAL_RCC_OscConfig+0x2fe>
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	2b18      	cmp	r3, #24
 80071a2:	d129      	bne.n	80071f8 <HAL_RCC_OscConfig+0x34c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d126      	bne.n	80071f8 <HAL_RCC_OscConfig+0x34c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071aa:	4b0c      	ldr	r3, [pc, #48]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	2380      	movs	r3, #128	@ 0x80
 80071b0:	00db      	lsls	r3, r3, #3
 80071b2:	4013      	ands	r3, r2
 80071b4:	d005      	beq.n	80071c2 <HAL_RCC_OscConfig+0x316>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d101      	bne.n	80071c2 <HAL_RCC_OscConfig+0x316>
      {
        return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e291      	b.n	80076e6 <HAL_RCC_OscConfig+0x83a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071c2:	4b06      	ldr	r3, [pc, #24]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	4a0b      	ldr	r2, [pc, #44]	@ (80071f4 <HAL_RCC_OscConfig+0x348>)
 80071c8:	4013      	ands	r3, r2
 80071ca:	0019      	movs	r1, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	061a      	lsls	r2, r3, #24
 80071d2:	4b02      	ldr	r3, [pc, #8]	@ (80071dc <HAL_RCC_OscConfig+0x330>)
 80071d4:	430a      	orrs	r2, r1
 80071d6:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071d8:	e053      	b.n	8007282 <HAL_RCC_OscConfig+0x3d6>
 80071da:	46c0      	nop			@ (mov r8, r8)
 80071dc:	40021000 	.word	0x40021000
 80071e0:	ffff00ff 	.word	0xffff00ff
 80071e4:	0800fca8 	.word	0x0800fca8
 80071e8:	20000004 	.word	0x20000004
 80071ec:	20000008 	.word	0x20000008
 80071f0:	fffaffff 	.word	0xfffaffff
 80071f4:	80ffffff 	.word	0x80ffffff
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d026      	beq.n	800724e <HAL_RCC_OscConfig+0x3a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007200:	4bc7      	ldr	r3, [pc, #796]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	4bc6      	ldr	r3, [pc, #792]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 8007206:	2180      	movs	r1, #128	@ 0x80
 8007208:	0049      	lsls	r1, r1, #1
 800720a:	430a      	orrs	r2, r1
 800720c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800720e:	f7fe fe1f 	bl	8005e50 <HAL_GetTick>
 8007212:	0003      	movs	r3, r0
 8007214:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007216:	e008      	b.n	800722a <HAL_RCC_OscConfig+0x37e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8007218:	f7fe fe1a 	bl	8005e50 <HAL_GetTick>
 800721c:	0002      	movs	r2, r0
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	2b02      	cmp	r3, #2
 8007224:	d901      	bls.n	800722a <HAL_RCC_OscConfig+0x37e>
          {
            return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e25d      	b.n	80076e6 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800722a:	4bbd      	ldr	r3, [pc, #756]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	2380      	movs	r3, #128	@ 0x80
 8007230:	00db      	lsls	r3, r3, #3
 8007232:	4013      	ands	r3, r2
 8007234:	d0f0      	beq.n	8007218 <HAL_RCC_OscConfig+0x36c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007236:	4bba      	ldr	r3, [pc, #744]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	4aba      	ldr	r2, [pc, #744]	@ (8007524 <HAL_RCC_OscConfig+0x678>)
 800723c:	4013      	ands	r3, r2
 800723e:	0019      	movs	r1, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	061a      	lsls	r2, r3, #24
 8007246:	4bb6      	ldr	r3, [pc, #728]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 8007248:	430a      	orrs	r2, r1
 800724a:	605a      	str	r2, [r3, #4]
 800724c:	e019      	b.n	8007282 <HAL_RCC_OscConfig+0x3d6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800724e:	4bb4      	ldr	r3, [pc, #720]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	4bb3      	ldr	r3, [pc, #716]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 8007254:	49b4      	ldr	r1, [pc, #720]	@ (8007528 <HAL_RCC_OscConfig+0x67c>)
 8007256:	400a      	ands	r2, r1
 8007258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800725a:	f7fe fdf9 	bl	8005e50 <HAL_GetTick>
 800725e:	0003      	movs	r3, r0
 8007260:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007262:	e008      	b.n	8007276 <HAL_RCC_OscConfig+0x3ca>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8007264:	f7fe fdf4 	bl	8005e50 <HAL_GetTick>
 8007268:	0002      	movs	r2, r0
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	2b02      	cmp	r3, #2
 8007270:	d901      	bls.n	8007276 <HAL_RCC_OscConfig+0x3ca>
          {
            return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e237      	b.n	80076e6 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007276:	4baa      	ldr	r3, [pc, #680]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	2380      	movs	r3, #128	@ 0x80
 800727c:	00db      	lsls	r3, r3, #3
 800727e:	4013      	ands	r3, r2
 8007280:	d1f0      	bne.n	8007264 <HAL_RCC_OscConfig+0x3b8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2208      	movs	r2, #8
 8007288:	4013      	ands	r3, r2
 800728a:	d051      	beq.n	8007330 <HAL_RCC_OscConfig+0x484>
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	695b      	ldr	r3, [r3, #20]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d031      	beq.n	80072f8 <HAL_RCC_OscConfig+0x44c>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d108      	bne.n	80072ae <HAL_RCC_OscConfig+0x402>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 800729c:	4aa0      	ldr	r2, [pc, #640]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 800729e:	2394      	movs	r3, #148	@ 0x94
 80072a0:	58d3      	ldr	r3, [r2, r3]
 80072a2:	499f      	ldr	r1, [pc, #636]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 80072a4:	2204      	movs	r2, #4
 80072a6:	4393      	bics	r3, r2
 80072a8:	2294      	movs	r2, #148	@ 0x94
 80072aa:	508b      	str	r3, [r1, r2]
 80072ac:	e007      	b.n	80072be <HAL_RCC_OscConfig+0x412>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 80072ae:	4a9c      	ldr	r2, [pc, #624]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 80072b0:	2394      	movs	r3, #148	@ 0x94
 80072b2:	58d3      	ldr	r3, [r2, r3]
 80072b4:	499a      	ldr	r1, [pc, #616]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 80072b6:	2204      	movs	r2, #4
 80072b8:	4313      	orrs	r3, r2
 80072ba:	2294      	movs	r2, #148	@ 0x94
 80072bc:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072be:	4a98      	ldr	r2, [pc, #608]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 80072c0:	2394      	movs	r3, #148	@ 0x94
 80072c2:	58d3      	ldr	r3, [r2, r3]
 80072c4:	4996      	ldr	r1, [pc, #600]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 80072c6:	2201      	movs	r2, #1
 80072c8:	4313      	orrs	r3, r2
 80072ca:	2294      	movs	r2, #148	@ 0x94
 80072cc:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072ce:	f7fe fdbf 	bl	8005e50 <HAL_GetTick>
 80072d2:	0003      	movs	r3, r0
 80072d4:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80072d6:	e008      	b.n	80072ea <HAL_RCC_OscConfig+0x43e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072d8:	f7fe fdba 	bl	8005e50 <HAL_GetTick>
 80072dc:	0002      	movs	r2, r0
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	2b11      	cmp	r3, #17
 80072e4:	d901      	bls.n	80072ea <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e1fd      	b.n	80076e6 <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80072ea:	4a8d      	ldr	r2, [pc, #564]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 80072ec:	2394      	movs	r3, #148	@ 0x94
 80072ee:	58d3      	ldr	r3, [r2, r3]
 80072f0:	2202      	movs	r2, #2
 80072f2:	4013      	ands	r3, r2
 80072f4:	d0f0      	beq.n	80072d8 <HAL_RCC_OscConfig+0x42c>
 80072f6:	e01b      	b.n	8007330 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072f8:	4a89      	ldr	r2, [pc, #548]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 80072fa:	2394      	movs	r3, #148	@ 0x94
 80072fc:	58d3      	ldr	r3, [r2, r3]
 80072fe:	4988      	ldr	r1, [pc, #544]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 8007300:	2201      	movs	r2, #1
 8007302:	4393      	bics	r3, r2
 8007304:	2294      	movs	r2, #148	@ 0x94
 8007306:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007308:	f7fe fda2 	bl	8005e50 <HAL_GetTick>
 800730c:	0003      	movs	r3, r0
 800730e:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007310:	e008      	b.n	8007324 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007312:	f7fe fd9d 	bl	8005e50 <HAL_GetTick>
 8007316:	0002      	movs	r2, r0
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	2b11      	cmp	r3, #17
 800731e:	d901      	bls.n	8007324 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	e1e0      	b.n	80076e6 <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007324:	4a7e      	ldr	r2, [pc, #504]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 8007326:	2394      	movs	r3, #148	@ 0x94
 8007328:	58d3      	ldr	r3, [r2, r3]
 800732a:	2202      	movs	r2, #2
 800732c:	4013      	ands	r3, r2
 800732e:	d1f0      	bne.n	8007312 <HAL_RCC_OscConfig+0x466>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2204      	movs	r2, #4
 8007336:	4013      	ands	r3, r2
 8007338:	d100      	bne.n	800733c <HAL_RCC_OscConfig+0x490>
 800733a:	e10d      	b.n	8007558 <HAL_RCC_OscConfig+0x6ac>
  {
    FlagStatus       pwrclkchanged = RESET;
 800733c:	201f      	movs	r0, #31
 800733e:	183b      	adds	r3, r7, r0
 8007340:	2200      	movs	r2, #0
 8007342:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8007344:	4b76      	ldr	r3, [pc, #472]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 8007346:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007348:	2380      	movs	r3, #128	@ 0x80
 800734a:	055b      	lsls	r3, r3, #21
 800734c:	4013      	ands	r3, r2
 800734e:	d110      	bne.n	8007372 <HAL_RCC_OscConfig+0x4c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007350:	4b73      	ldr	r3, [pc, #460]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 8007352:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007354:	4b72      	ldr	r3, [pc, #456]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 8007356:	2180      	movs	r1, #128	@ 0x80
 8007358:	0549      	lsls	r1, r1, #21
 800735a:	430a      	orrs	r2, r1
 800735c:	659a      	str	r2, [r3, #88]	@ 0x58
 800735e:	4b70      	ldr	r3, [pc, #448]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 8007360:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007362:	2380      	movs	r3, #128	@ 0x80
 8007364:	055b      	lsls	r3, r3, #21
 8007366:	4013      	ands	r3, r2
 8007368:	60bb      	str	r3, [r7, #8]
 800736a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800736c:	183b      	adds	r3, r7, r0
 800736e:	2201      	movs	r2, #1
 8007370:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007372:	4b6e      	ldr	r3, [pc, #440]	@ (800752c <HAL_RCC_OscConfig+0x680>)
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	2380      	movs	r3, #128	@ 0x80
 8007378:	005b      	lsls	r3, r3, #1
 800737a:	4013      	ands	r3, r2
 800737c:	d11a      	bne.n	80073b4 <HAL_RCC_OscConfig+0x508>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800737e:	4b6b      	ldr	r3, [pc, #428]	@ (800752c <HAL_RCC_OscConfig+0x680>)
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	4b6a      	ldr	r3, [pc, #424]	@ (800752c <HAL_RCC_OscConfig+0x680>)
 8007384:	2180      	movs	r1, #128	@ 0x80
 8007386:	0049      	lsls	r1, r1, #1
 8007388:	430a      	orrs	r2, r1
 800738a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800738c:	f7fe fd60 	bl	8005e50 <HAL_GetTick>
 8007390:	0003      	movs	r3, r0
 8007392:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007394:	e008      	b.n	80073a8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007396:	f7fe fd5b 	bl	8005e50 <HAL_GetTick>
 800739a:	0002      	movs	r2, r0
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d901      	bls.n	80073a8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e19e      	b.n	80076e6 <HAL_RCC_OscConfig+0x83a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073a8:	4b60      	ldr	r3, [pc, #384]	@ (800752c <HAL_RCC_OscConfig+0x680>)
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	2380      	movs	r3, #128	@ 0x80
 80073ae:	005b      	lsls	r3, r3, #1
 80073b0:	4013      	ands	r3, r2
 80073b2:	d0f0      	beq.n	8007396 <HAL_RCC_OscConfig+0x4ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	2201      	movs	r2, #1
 80073ba:	4013      	ands	r3, r2
 80073bc:	d01e      	beq.n	80073fc <HAL_RCC_OscConfig+0x550>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	2204      	movs	r2, #4
 80073c4:	4013      	ands	r3, r2
 80073c6:	d010      	beq.n	80073ea <HAL_RCC_OscConfig+0x53e>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80073c8:	4a55      	ldr	r2, [pc, #340]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 80073ca:	2390      	movs	r3, #144	@ 0x90
 80073cc:	58d3      	ldr	r3, [r2, r3]
 80073ce:	4954      	ldr	r1, [pc, #336]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 80073d0:	2204      	movs	r2, #4
 80073d2:	4313      	orrs	r3, r2
 80073d4:	2290      	movs	r2, #144	@ 0x90
 80073d6:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80073d8:	4a51      	ldr	r2, [pc, #324]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 80073da:	2390      	movs	r3, #144	@ 0x90
 80073dc:	58d3      	ldr	r3, [r2, r3]
 80073de:	4950      	ldr	r1, [pc, #320]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 80073e0:	2201      	movs	r2, #1
 80073e2:	4313      	orrs	r3, r2
 80073e4:	2290      	movs	r2, #144	@ 0x90
 80073e6:	508b      	str	r3, [r1, r2]
 80073e8:	e018      	b.n	800741c <HAL_RCC_OscConfig+0x570>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80073ea:	4a4d      	ldr	r2, [pc, #308]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 80073ec:	2390      	movs	r3, #144	@ 0x90
 80073ee:	58d3      	ldr	r3, [r2, r3]
 80073f0:	494b      	ldr	r1, [pc, #300]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 80073f2:	2201      	movs	r2, #1
 80073f4:	4313      	orrs	r3, r2
 80073f6:	2290      	movs	r2, #144	@ 0x90
 80073f8:	508b      	str	r3, [r1, r2]
 80073fa:	e00f      	b.n	800741c <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80073fc:	4a48      	ldr	r2, [pc, #288]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 80073fe:	2390      	movs	r3, #144	@ 0x90
 8007400:	58d3      	ldr	r3, [r2, r3]
 8007402:	4947      	ldr	r1, [pc, #284]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 8007404:	2201      	movs	r2, #1
 8007406:	4393      	bics	r3, r2
 8007408:	2290      	movs	r2, #144	@ 0x90
 800740a:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800740c:	4a44      	ldr	r2, [pc, #272]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 800740e:	2390      	movs	r3, #144	@ 0x90
 8007410:	58d3      	ldr	r3, [r2, r3]
 8007412:	4943      	ldr	r1, [pc, #268]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 8007414:	2204      	movs	r2, #4
 8007416:	4393      	bics	r3, r2
 8007418:	2290      	movs	r2, #144	@ 0x90
 800741a:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d04f      	beq.n	80074c4 <HAL_RCC_OscConfig+0x618>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007424:	f7fe fd14 	bl	8005e50 <HAL_GetTick>
 8007428:	0003      	movs	r3, r0
 800742a:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800742c:	e009      	b.n	8007442 <HAL_RCC_OscConfig+0x596>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800742e:	f7fe fd0f 	bl	8005e50 <HAL_GetTick>
 8007432:	0002      	movs	r2, r0
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	1ad3      	subs	r3, r2, r3
 8007438:	4a3d      	ldr	r2, [pc, #244]	@ (8007530 <HAL_RCC_OscConfig+0x684>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d901      	bls.n	8007442 <HAL_RCC_OscConfig+0x596>
        {
          return HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	e151      	b.n	80076e6 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007442:	4a37      	ldr	r2, [pc, #220]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 8007444:	2390      	movs	r3, #144	@ 0x90
 8007446:	58d3      	ldr	r3, [r2, r3]
 8007448:	2202      	movs	r2, #2
 800744a:	4013      	ands	r3, r2
 800744c:	d0ef      	beq.n	800742e <HAL_RCC_OscConfig+0x582>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	2280      	movs	r2, #128	@ 0x80
 8007454:	4013      	ands	r3, r2
 8007456:	d01a      	beq.n	800748e <HAL_RCC_OscConfig+0x5e2>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007458:	4a31      	ldr	r2, [pc, #196]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 800745a:	2390      	movs	r3, #144	@ 0x90
 800745c:	58d3      	ldr	r3, [r2, r3]
 800745e:	4930      	ldr	r1, [pc, #192]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 8007460:	2280      	movs	r2, #128	@ 0x80
 8007462:	4313      	orrs	r3, r2
 8007464:	2290      	movs	r2, #144	@ 0x90
 8007466:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007468:	e009      	b.n	800747e <HAL_RCC_OscConfig+0x5d2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800746a:	f7fe fcf1 	bl	8005e50 <HAL_GetTick>
 800746e:	0002      	movs	r2, r0
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	1ad3      	subs	r3, r2, r3
 8007474:	4a2e      	ldr	r2, [pc, #184]	@ (8007530 <HAL_RCC_OscConfig+0x684>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d901      	bls.n	800747e <HAL_RCC_OscConfig+0x5d2>
          {
            return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e133      	b.n	80076e6 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800747e:	4a28      	ldr	r2, [pc, #160]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 8007480:	2390      	movs	r3, #144	@ 0x90
 8007482:	58d2      	ldr	r2, [r2, r3]
 8007484:	2380      	movs	r3, #128	@ 0x80
 8007486:	011b      	lsls	r3, r3, #4
 8007488:	4013      	ands	r3, r2
 800748a:	d0ee      	beq.n	800746a <HAL_RCC_OscConfig+0x5be>
 800748c:	e059      	b.n	8007542 <HAL_RCC_OscConfig+0x696>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800748e:	4a24      	ldr	r2, [pc, #144]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 8007490:	2390      	movs	r3, #144	@ 0x90
 8007492:	58d3      	ldr	r3, [r2, r3]
 8007494:	4922      	ldr	r1, [pc, #136]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 8007496:	2280      	movs	r2, #128	@ 0x80
 8007498:	4393      	bics	r3, r2
 800749a:	2290      	movs	r2, #144	@ 0x90
 800749c:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800749e:	e009      	b.n	80074b4 <HAL_RCC_OscConfig+0x608>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074a0:	f7fe fcd6 	bl	8005e50 <HAL_GetTick>
 80074a4:	0002      	movs	r2, r0
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	4a21      	ldr	r2, [pc, #132]	@ (8007530 <HAL_RCC_OscConfig+0x684>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d901      	bls.n	80074b4 <HAL_RCC_OscConfig+0x608>
          {
            return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e118      	b.n	80076e6 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80074b4:	4a1a      	ldr	r2, [pc, #104]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 80074b6:	2390      	movs	r3, #144	@ 0x90
 80074b8:	58d2      	ldr	r2, [r2, r3]
 80074ba:	2380      	movs	r3, #128	@ 0x80
 80074bc:	011b      	lsls	r3, r3, #4
 80074be:	4013      	ands	r3, r2
 80074c0:	d1ee      	bne.n	80074a0 <HAL_RCC_OscConfig+0x5f4>
 80074c2:	e03e      	b.n	8007542 <HAL_RCC_OscConfig+0x696>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074c4:	f7fe fcc4 	bl	8005e50 <HAL_GetTick>
 80074c8:	0003      	movs	r3, r0
 80074ca:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80074cc:	e009      	b.n	80074e2 <HAL_RCC_OscConfig+0x636>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074ce:	f7fe fcbf 	bl	8005e50 <HAL_GetTick>
 80074d2:	0002      	movs	r2, r0
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	4a15      	ldr	r2, [pc, #84]	@ (8007530 <HAL_RCC_OscConfig+0x684>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d901      	bls.n	80074e2 <HAL_RCC_OscConfig+0x636>
        {
          return HAL_TIMEOUT;
 80074de:	2303      	movs	r3, #3
 80074e0:	e101      	b.n	80076e6 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80074e2:	4a0f      	ldr	r2, [pc, #60]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 80074e4:	2390      	movs	r3, #144	@ 0x90
 80074e6:	58d3      	ldr	r3, [r2, r3]
 80074e8:	2202      	movs	r2, #2
 80074ea:	4013      	ands	r3, r2
 80074ec:	d1ef      	bne.n	80074ce <HAL_RCC_OscConfig+0x622>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80074ee:	4a0c      	ldr	r2, [pc, #48]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 80074f0:	2390      	movs	r3, #144	@ 0x90
 80074f2:	58d3      	ldr	r3, [r2, r3]
 80074f4:	2280      	movs	r2, #128	@ 0x80
 80074f6:	4013      	ands	r3, r2
 80074f8:	d023      	beq.n	8007542 <HAL_RCC_OscConfig+0x696>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80074fa:	4a09      	ldr	r2, [pc, #36]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 80074fc:	2390      	movs	r3, #144	@ 0x90
 80074fe:	58d3      	ldr	r3, [r2, r3]
 8007500:	4907      	ldr	r1, [pc, #28]	@ (8007520 <HAL_RCC_OscConfig+0x674>)
 8007502:	2280      	movs	r2, #128	@ 0x80
 8007504:	4393      	bics	r3, r2
 8007506:	2290      	movs	r2, #144	@ 0x90
 8007508:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800750a:	e013      	b.n	8007534 <HAL_RCC_OscConfig+0x688>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800750c:	f7fe fca0 	bl	8005e50 <HAL_GetTick>
 8007510:	0002      	movs	r2, r0
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	4a06      	ldr	r2, [pc, #24]	@ (8007530 <HAL_RCC_OscConfig+0x684>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d90b      	bls.n	8007534 <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 800751c:	2303      	movs	r3, #3
 800751e:	e0e2      	b.n	80076e6 <HAL_RCC_OscConfig+0x83a>
 8007520:	40021000 	.word	0x40021000
 8007524:	80ffffff 	.word	0x80ffffff
 8007528:	fffffeff 	.word	0xfffffeff
 800752c:	40007000 	.word	0x40007000
 8007530:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007534:	4a6e      	ldr	r2, [pc, #440]	@ (80076f0 <HAL_RCC_OscConfig+0x844>)
 8007536:	2390      	movs	r3, #144	@ 0x90
 8007538:	58d2      	ldr	r2, [r2, r3]
 800753a:	2380      	movs	r3, #128	@ 0x80
 800753c:	011b      	lsls	r3, r3, #4
 800753e:	4013      	ands	r3, r2
 8007540:	d1e4      	bne.n	800750c <HAL_RCC_OscConfig+0x660>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007542:	231f      	movs	r3, #31
 8007544:	18fb      	adds	r3, r7, r3
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d105      	bne.n	8007558 <HAL_RCC_OscConfig+0x6ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800754c:	4b68      	ldr	r3, [pc, #416]	@ (80076f0 <HAL_RCC_OscConfig+0x844>)
 800754e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007550:	4b67      	ldr	r3, [pc, #412]	@ (80076f0 <HAL_RCC_OscConfig+0x844>)
 8007552:	4968      	ldr	r1, [pc, #416]	@ (80076f4 <HAL_RCC_OscConfig+0x848>)
 8007554:	400a      	ands	r2, r1
 8007556:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
#if defined(RCC_CRRCR_HSI48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2220      	movs	r2, #32
 800755e:	4013      	ands	r3, r2
 8007560:	d03c      	beq.n	80075dc <HAL_RCC_OscConfig+0x730>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007566:	2b00      	cmp	r3, #0
 8007568:	d01c      	beq.n	80075a4 <HAL_RCC_OscConfig+0x6f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800756a:	4a61      	ldr	r2, [pc, #388]	@ (80076f0 <HAL_RCC_OscConfig+0x844>)
 800756c:	2398      	movs	r3, #152	@ 0x98
 800756e:	58d3      	ldr	r3, [r2, r3]
 8007570:	495f      	ldr	r1, [pc, #380]	@ (80076f0 <HAL_RCC_OscConfig+0x844>)
 8007572:	2201      	movs	r2, #1
 8007574:	4313      	orrs	r3, r2
 8007576:	2298      	movs	r2, #152	@ 0x98
 8007578:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800757a:	f7fe fc69 	bl	8005e50 <HAL_GetTick>
 800757e:	0003      	movs	r3, r0
 8007580:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007582:	e008      	b.n	8007596 <HAL_RCC_OscConfig+0x6ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007584:	f7fe fc64 	bl	8005e50 <HAL_GetTick>
 8007588:	0002      	movs	r2, r0
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	2b02      	cmp	r3, #2
 8007590:	d901      	bls.n	8007596 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_TIMEOUT;
 8007592:	2303      	movs	r3, #3
 8007594:	e0a7      	b.n	80076e6 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007596:	4a56      	ldr	r2, [pc, #344]	@ (80076f0 <HAL_RCC_OscConfig+0x844>)
 8007598:	2398      	movs	r3, #152	@ 0x98
 800759a:	58d3      	ldr	r3, [r2, r3]
 800759c:	2202      	movs	r2, #2
 800759e:	4013      	ands	r3, r2
 80075a0:	d0f0      	beq.n	8007584 <HAL_RCC_OscConfig+0x6d8>
 80075a2:	e01b      	b.n	80075dc <HAL_RCC_OscConfig+0x730>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80075a4:	4a52      	ldr	r2, [pc, #328]	@ (80076f0 <HAL_RCC_OscConfig+0x844>)
 80075a6:	2398      	movs	r3, #152	@ 0x98
 80075a8:	58d3      	ldr	r3, [r2, r3]
 80075aa:	4951      	ldr	r1, [pc, #324]	@ (80076f0 <HAL_RCC_OscConfig+0x844>)
 80075ac:	2201      	movs	r2, #1
 80075ae:	4393      	bics	r3, r2
 80075b0:	2298      	movs	r2, #152	@ 0x98
 80075b2:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075b4:	f7fe fc4c 	bl	8005e50 <HAL_GetTick>
 80075b8:	0003      	movs	r3, r0
 80075ba:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 80075bc:	e008      	b.n	80075d0 <HAL_RCC_OscConfig+0x724>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80075be:	f7fe fc47 	bl	8005e50 <HAL_GetTick>
 80075c2:	0002      	movs	r2, r0
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d901      	bls.n	80075d0 <HAL_RCC_OscConfig+0x724>
        {
          return HAL_TIMEOUT;
 80075cc:	2303      	movs	r3, #3
 80075ce:	e08a      	b.n	80076e6 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 80075d0:	4a47      	ldr	r2, [pc, #284]	@ (80076f0 <HAL_RCC_OscConfig+0x844>)
 80075d2:	2398      	movs	r3, #152	@ 0x98
 80075d4:	58d3      	ldr	r3, [r2, r3]
 80075d6:	2202      	movs	r2, #2
 80075d8:	4013      	ands	r3, r2
 80075da:	d1f0      	bne.n	80075be <HAL_RCC_OscConfig+0x712>
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d100      	bne.n	80075e6 <HAL_RCC_OscConfig+0x73a>
 80075e4:	e07e      	b.n	80076e4 <HAL_RCC_OscConfig+0x838>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80075e6:	4b42      	ldr	r3, [pc, #264]	@ (80076f0 <HAL_RCC_OscConfig+0x844>)
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	2238      	movs	r2, #56	@ 0x38
 80075ec:	4013      	ands	r3, r2
 80075ee:	2b18      	cmp	r3, #24
 80075f0:	d100      	bne.n	80075f4 <HAL_RCC_OscConfig+0x748>
 80075f2:	e075      	b.n	80076e0 <HAL_RCC_OscConfig+0x834>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d156      	bne.n	80076aa <HAL_RCC_OscConfig+0x7fe>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075fc:	4b3c      	ldr	r3, [pc, #240]	@ (80076f0 <HAL_RCC_OscConfig+0x844>)
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	4b3b      	ldr	r3, [pc, #236]	@ (80076f0 <HAL_RCC_OscConfig+0x844>)
 8007602:	493d      	ldr	r1, [pc, #244]	@ (80076f8 <HAL_RCC_OscConfig+0x84c>)
 8007604:	400a      	ands	r2, r1
 8007606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007608:	f7fe fc22 	bl	8005e50 <HAL_GetTick>
 800760c:	0003      	movs	r3, r0
 800760e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007610:	e008      	b.n	8007624 <HAL_RCC_OscConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007612:	f7fe fc1d 	bl	8005e50 <HAL_GetTick>
 8007616:	0002      	movs	r2, r0
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	2b02      	cmp	r3, #2
 800761e:	d901      	bls.n	8007624 <HAL_RCC_OscConfig+0x778>
          {
            return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e060      	b.n	80076e6 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007624:	4b32      	ldr	r3, [pc, #200]	@ (80076f0 <HAL_RCC_OscConfig+0x844>)
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	2380      	movs	r3, #128	@ 0x80
 800762a:	049b      	lsls	r3, r3, #18
 800762c:	4013      	ands	r3, r2
 800762e:	d1f0      	bne.n	8007612 <HAL_RCC_OscConfig+0x766>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007630:	4b2f      	ldr	r3, [pc, #188]	@ (80076f0 <HAL_RCC_OscConfig+0x844>)
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	4a31      	ldr	r2, [pc, #196]	@ (80076fc <HAL_RCC_OscConfig+0x850>)
 8007636:	4013      	ands	r3, r2
 8007638:	0019      	movs	r1, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007642:	431a      	orrs	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007648:	021b      	lsls	r3, r3, #8
 800764a:	431a      	orrs	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007650:	431a      	orrs	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007656:	431a      	orrs	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800765c:	431a      	orrs	r2, r3
 800765e:	4b24      	ldr	r3, [pc, #144]	@ (80076f0 <HAL_RCC_OscConfig+0x844>)
 8007660:	430a      	orrs	r2, r1
 8007662:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 8007664:	4b22      	ldr	r3, [pc, #136]	@ (80076f0 <HAL_RCC_OscConfig+0x844>)
 8007666:	68da      	ldr	r2, [r3, #12]
 8007668:	4b21      	ldr	r3, [pc, #132]	@ (80076f0 <HAL_RCC_OscConfig+0x844>)
 800766a:	2180      	movs	r1, #128	@ 0x80
 800766c:	0549      	lsls	r1, r1, #21
 800766e:	430a      	orrs	r2, r1
 8007670:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007672:	4b1f      	ldr	r3, [pc, #124]	@ (80076f0 <HAL_RCC_OscConfig+0x844>)
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	4b1e      	ldr	r3, [pc, #120]	@ (80076f0 <HAL_RCC_OscConfig+0x844>)
 8007678:	2180      	movs	r1, #128	@ 0x80
 800767a:	0449      	lsls	r1, r1, #17
 800767c:	430a      	orrs	r2, r1
 800767e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007680:	f7fe fbe6 	bl	8005e50 <HAL_GetTick>
 8007684:	0003      	movs	r3, r0
 8007686:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007688:	e008      	b.n	800769c <HAL_RCC_OscConfig+0x7f0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800768a:	f7fe fbe1 	bl	8005e50 <HAL_GetTick>
 800768e:	0002      	movs	r2, r0
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	2b02      	cmp	r3, #2
 8007696:	d901      	bls.n	800769c <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8007698:	2303      	movs	r3, #3
 800769a:	e024      	b.n	80076e6 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800769c:	4b14      	ldr	r3, [pc, #80]	@ (80076f0 <HAL_RCC_OscConfig+0x844>)
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	2380      	movs	r3, #128	@ 0x80
 80076a2:	049b      	lsls	r3, r3, #18
 80076a4:	4013      	ands	r3, r2
 80076a6:	d0f0      	beq.n	800768a <HAL_RCC_OscConfig+0x7de>
 80076a8:	e01c      	b.n	80076e4 <HAL_RCC_OscConfig+0x838>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076aa:	4b11      	ldr	r3, [pc, #68]	@ (80076f0 <HAL_RCC_OscConfig+0x844>)
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	4b10      	ldr	r3, [pc, #64]	@ (80076f0 <HAL_RCC_OscConfig+0x844>)
 80076b0:	4911      	ldr	r1, [pc, #68]	@ (80076f8 <HAL_RCC_OscConfig+0x84c>)
 80076b2:	400a      	ands	r2, r1
 80076b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076b6:	f7fe fbcb 	bl	8005e50 <HAL_GetTick>
 80076ba:	0003      	movs	r3, r0
 80076bc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80076be:	e008      	b.n	80076d2 <HAL_RCC_OscConfig+0x826>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076c0:	f7fe fbc6 	bl	8005e50 <HAL_GetTick>
 80076c4:	0002      	movs	r2, r0
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	d901      	bls.n	80076d2 <HAL_RCC_OscConfig+0x826>
          {
            return HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	e009      	b.n	80076e6 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80076d2:	4b07      	ldr	r3, [pc, #28]	@ (80076f0 <HAL_RCC_OscConfig+0x844>)
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	2380      	movs	r3, #128	@ 0x80
 80076d8:	049b      	lsls	r3, r3, #18
 80076da:	4013      	ands	r3, r2
 80076dc:	d1f0      	bne.n	80076c0 <HAL_RCC_OscConfig+0x814>
 80076de:	e001      	b.n	80076e4 <HAL_RCC_OscConfig+0x838>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e000      	b.n	80076e6 <HAL_RCC_OscConfig+0x83a>
    }
  }
  return HAL_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	0018      	movs	r0, r3
 80076e8:	46bd      	mov	sp, r7
 80076ea:	b008      	add	sp, #32
 80076ec:	bdb0      	pop	{r4, r5, r7, pc}
 80076ee:	46c0      	nop			@ (mov r8, r8)
 80076f0:	40021000 	.word	0x40021000
 80076f4:	efffffff 	.word	0xefffffff
 80076f8:	feffffff 	.word	0xfeffffff
 80076fc:	11c1808c 	.word	0x11c1808c

08007700 <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 8007700:	b5b0      	push	{r4, r5, r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800770a:	4b6c      	ldr	r3, [pc, #432]	@ (80078bc <HAL_RCC_ClockConfig+0x1bc>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2207      	movs	r2, #7
 8007710:	4013      	ands	r3, r2
 8007712:	683a      	ldr	r2, [r7, #0]
 8007714:	429a      	cmp	r2, r3
 8007716:	d911      	bls.n	800773c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007718:	4b68      	ldr	r3, [pc, #416]	@ (80078bc <HAL_RCC_ClockConfig+0x1bc>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2207      	movs	r2, #7
 800771e:	4393      	bics	r3, r2
 8007720:	0019      	movs	r1, r3
 8007722:	4b66      	ldr	r3, [pc, #408]	@ (80078bc <HAL_RCC_ClockConfig+0x1bc>)
 8007724:	683a      	ldr	r2, [r7, #0]
 8007726:	430a      	orrs	r2, r1
 8007728:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800772a:	4b64      	ldr	r3, [pc, #400]	@ (80078bc <HAL_RCC_ClockConfig+0x1bc>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2207      	movs	r2, #7
 8007730:	4013      	ands	r3, r2
 8007732:	683a      	ldr	r2, [r7, #0]
 8007734:	429a      	cmp	r2, r3
 8007736:	d001      	beq.n	800773c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	e0bb      	b.n	80078b4 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2201      	movs	r2, #1
 8007742:	4013      	ands	r3, r2
 8007744:	d100      	bne.n	8007748 <HAL_RCC_ClockConfig+0x48>
 8007746:	e064      	b.n	8007812 <HAL_RCC_ClockConfig+0x112>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	2b03      	cmp	r3, #3
 800774e:	d107      	bne.n	8007760 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007750:	4b5b      	ldr	r3, [pc, #364]	@ (80078c0 <HAL_RCC_ClockConfig+0x1c0>)
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	2380      	movs	r3, #128	@ 0x80
 8007756:	049b      	lsls	r3, r3, #18
 8007758:	4013      	ands	r3, r2
 800775a:	d138      	bne.n	80077ce <HAL_RCC_ClockConfig+0xce>
      {
        return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e0a9      	b.n	80078b4 <HAL_RCC_ClockConfig+0x1b4>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	2b02      	cmp	r3, #2
 8007766:	d107      	bne.n	8007778 <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007768:	4b55      	ldr	r3, [pc, #340]	@ (80078c0 <HAL_RCC_ClockConfig+0x1c0>)
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	2380      	movs	r3, #128	@ 0x80
 800776e:	029b      	lsls	r3, r3, #10
 8007770:	4013      	ands	r3, r2
 8007772:	d12c      	bne.n	80077ce <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e09d      	b.n	80078b4 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d106      	bne.n	800778e <HAL_RCC_ClockConfig+0x8e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007780:	4b4f      	ldr	r3, [pc, #316]	@ (80078c0 <HAL_RCC_ClockConfig+0x1c0>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2202      	movs	r2, #2
 8007786:	4013      	ands	r3, r2
 8007788:	d121      	bne.n	80077ce <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e092      	b.n	80078b4 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	2b01      	cmp	r3, #1
 8007794:	d107      	bne.n	80077a6 <HAL_RCC_ClockConfig+0xa6>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007796:	4b4a      	ldr	r3, [pc, #296]	@ (80078c0 <HAL_RCC_ClockConfig+0x1c0>)
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	2380      	movs	r3, #128	@ 0x80
 800779c:	00db      	lsls	r3, r3, #3
 800779e:	4013      	ands	r3, r2
 80077a0:	d115      	bne.n	80077ce <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e086      	b.n	80078b4 <HAL_RCC_ClockConfig+0x1b4>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	2b04      	cmp	r3, #4
 80077ac:	d107      	bne.n	80077be <HAL_RCC_ClockConfig+0xbe>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80077ae:	4a44      	ldr	r2, [pc, #272]	@ (80078c0 <HAL_RCC_ClockConfig+0x1c0>)
 80077b0:	2394      	movs	r3, #148	@ 0x94
 80077b2:	58d3      	ldr	r3, [r2, r3]
 80077b4:	2202      	movs	r2, #2
 80077b6:	4013      	ands	r3, r2
 80077b8:	d109      	bne.n	80077ce <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e07a      	b.n	80078b4 <HAL_RCC_ClockConfig+0x1b4>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077be:	4a40      	ldr	r2, [pc, #256]	@ (80078c0 <HAL_RCC_ClockConfig+0x1c0>)
 80077c0:	2390      	movs	r3, #144	@ 0x90
 80077c2:	58d3      	ldr	r3, [r2, r3]
 80077c4:	2202      	movs	r2, #2
 80077c6:	4013      	ands	r3, r2
 80077c8:	d101      	bne.n	80077ce <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e072      	b.n	80078b4 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80077ce:	4b3c      	ldr	r3, [pc, #240]	@ (80078c0 <HAL_RCC_ClockConfig+0x1c0>)
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	2207      	movs	r2, #7
 80077d4:	4393      	bics	r3, r2
 80077d6:	0019      	movs	r1, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	685a      	ldr	r2, [r3, #4]
 80077dc:	4b38      	ldr	r3, [pc, #224]	@ (80078c0 <HAL_RCC_ClockConfig+0x1c0>)
 80077de:	430a      	orrs	r2, r1
 80077e0:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80077e2:	f7fe fb35 	bl	8005e50 <HAL_GetTick>
 80077e6:	0003      	movs	r3, r0
 80077e8:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077ea:	e009      	b.n	8007800 <HAL_RCC_ClockConfig+0x100>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077ec:	f7fe fb30 	bl	8005e50 <HAL_GetTick>
 80077f0:	0002      	movs	r2, r0
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	4a33      	ldr	r2, [pc, #204]	@ (80078c4 <HAL_RCC_ClockConfig+0x1c4>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d901      	bls.n	8007800 <HAL_RCC_ClockConfig+0x100>
      {
        return HAL_TIMEOUT;
 80077fc:	2303      	movs	r3, #3
 80077fe:	e059      	b.n	80078b4 <HAL_RCC_ClockConfig+0x1b4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007800:	4b2f      	ldr	r3, [pc, #188]	@ (80078c0 <HAL_RCC_ClockConfig+0x1c0>)
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	2238      	movs	r2, #56	@ 0x38
 8007806:	401a      	ands	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	00db      	lsls	r3, r3, #3
 800780e:	429a      	cmp	r2, r3
 8007810:	d1ec      	bne.n	80077ec <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2202      	movs	r2, #2
 8007818:	4013      	ands	r3, r2
 800781a:	d009      	beq.n	8007830 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800781c:	4b28      	ldr	r3, [pc, #160]	@ (80078c0 <HAL_RCC_ClockConfig+0x1c0>)
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	4a29      	ldr	r2, [pc, #164]	@ (80078c8 <HAL_RCC_ClockConfig+0x1c8>)
 8007822:	4013      	ands	r3, r2
 8007824:	0019      	movs	r1, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	689a      	ldr	r2, [r3, #8]
 800782a:	4b25      	ldr	r3, [pc, #148]	@ (80078c0 <HAL_RCC_ClockConfig+0x1c0>)
 800782c:	430a      	orrs	r2, r1
 800782e:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007830:	4b22      	ldr	r3, [pc, #136]	@ (80078bc <HAL_RCC_ClockConfig+0x1bc>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2207      	movs	r2, #7
 8007836:	4013      	ands	r3, r2
 8007838:	683a      	ldr	r2, [r7, #0]
 800783a:	429a      	cmp	r2, r3
 800783c:	d211      	bcs.n	8007862 <HAL_RCC_ClockConfig+0x162>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800783e:	4b1f      	ldr	r3, [pc, #124]	@ (80078bc <HAL_RCC_ClockConfig+0x1bc>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2207      	movs	r2, #7
 8007844:	4393      	bics	r3, r2
 8007846:	0019      	movs	r1, r3
 8007848:	4b1c      	ldr	r3, [pc, #112]	@ (80078bc <HAL_RCC_ClockConfig+0x1bc>)
 800784a:	683a      	ldr	r2, [r7, #0]
 800784c:	430a      	orrs	r2, r1
 800784e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007850:	4b1a      	ldr	r3, [pc, #104]	@ (80078bc <HAL_RCC_ClockConfig+0x1bc>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2207      	movs	r2, #7
 8007856:	4013      	ands	r3, r2
 8007858:	683a      	ldr	r2, [r7, #0]
 800785a:	429a      	cmp	r2, r3
 800785c:	d001      	beq.n	8007862 <HAL_RCC_ClockConfig+0x162>
    {
      return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e028      	b.n	80078b4 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2204      	movs	r2, #4
 8007868:	4013      	ands	r3, r2
 800786a:	d009      	beq.n	8007880 <HAL_RCC_ClockConfig+0x180>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800786c:	4b14      	ldr	r3, [pc, #80]	@ (80078c0 <HAL_RCC_ClockConfig+0x1c0>)
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	4a16      	ldr	r2, [pc, #88]	@ (80078cc <HAL_RCC_ClockConfig+0x1cc>)
 8007872:	4013      	ands	r3, r2
 8007874:	0019      	movs	r1, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	68da      	ldr	r2, [r3, #12]
 800787a:	4b11      	ldr	r3, [pc, #68]	@ (80078c0 <HAL_RCC_ClockConfig+0x1c0>)
 800787c:	430a      	orrs	r2, r1
 800787e:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8007880:	f000 f82a 	bl	80078d8 <HAL_RCC_GetSysClockFreq>
 8007884:	0001      	movs	r1, r0
 8007886:	4b0e      	ldr	r3, [pc, #56]	@ (80078c0 <HAL_RCC_ClockConfig+0x1c0>)
 8007888:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800788a:	0a1b      	lsrs	r3, r3, #8
 800788c:	220f      	movs	r2, #15
 800788e:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8007890:	4a0f      	ldr	r2, [pc, #60]	@ (80078d0 <HAL_RCC_ClockConfig+0x1d0>)
 8007892:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007894:	001a      	movs	r2, r3
 8007896:	231f      	movs	r3, #31
 8007898:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 800789a:	000a      	movs	r2, r1
 800789c:	40da      	lsrs	r2, r3
 800789e:	4b0d      	ldr	r3, [pc, #52]	@ (80078d4 <HAL_RCC_ClockConfig+0x1d4>)
 80078a0:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 80078a2:	250b      	movs	r5, #11
 80078a4:	197c      	adds	r4, r7, r5
 80078a6:	2003      	movs	r0, #3
 80078a8:	f7fe fa78 	bl	8005d9c <HAL_InitTick>
 80078ac:	0003      	movs	r3, r0
 80078ae:	7023      	strb	r3, [r4, #0]

  return halstatus;
 80078b0:	197b      	adds	r3, r7, r5
 80078b2:	781b      	ldrb	r3, [r3, #0]
}
 80078b4:	0018      	movs	r0, r3
 80078b6:	46bd      	mov	sp, r7
 80078b8:	b004      	add	sp, #16
 80078ba:	bdb0      	pop	{r4, r5, r7, pc}
 80078bc:	40022000 	.word	0x40022000
 80078c0:	40021000 	.word	0x40021000
 80078c4:	00001388 	.word	0x00001388
 80078c8:	fffff0ff 	.word	0xfffff0ff
 80078cc:	ffff8fff 	.word	0xffff8fff
 80078d0:	0800fca8 	.word	0x0800fca8
 80078d4:	20000004 	.word	0x20000004

080078d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b08a      	sub	sp, #40	@ 0x28
 80078dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80078de:	2300      	movs	r3, #0
 80078e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 80078e2:	2300      	movs	r3, #0
 80078e4:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078e6:	4b46      	ldr	r3, [pc, #280]	@ (8007a00 <HAL_RCC_GetSysClockFreq+0x128>)
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	2238      	movs	r2, #56	@ 0x38
 80078ec:	4013      	ands	r3, r2
 80078ee:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80078f0:	4b43      	ldr	r3, [pc, #268]	@ (8007a00 <HAL_RCC_GetSysClockFreq+0x128>)
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	2203      	movs	r2, #3
 80078f6:	4013      	ands	r3, r2
 80078f8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d005      	beq.n	800790c <HAL_RCC_GetSysClockFreq+0x34>
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	2b18      	cmp	r3, #24
 8007904:	d125      	bne.n	8007952 <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d122      	bne.n	8007952 <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800790c:	4b3c      	ldr	r3, [pc, #240]	@ (8007a00 <HAL_RCC_GetSysClockFreq+0x128>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2208      	movs	r2, #8
 8007912:	4013      	ands	r3, r2
 8007914:	d107      	bne.n	8007926 <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 8007916:	4a3a      	ldr	r2, [pc, #232]	@ (8007a00 <HAL_RCC_GetSysClockFreq+0x128>)
 8007918:	2394      	movs	r3, #148	@ 0x94
 800791a:	58d3      	ldr	r3, [r2, r3]
 800791c:	0a1b      	lsrs	r3, r3, #8
 800791e:	220f      	movs	r2, #15
 8007920:	4013      	ands	r3, r2
 8007922:	627b      	str	r3, [r7, #36]	@ 0x24
 8007924:	e005      	b.n	8007932 <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007926:	4b36      	ldr	r3, [pc, #216]	@ (8007a00 <HAL_RCC_GetSysClockFreq+0x128>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	091b      	lsrs	r3, r3, #4
 800792c:	220f      	movs	r2, #15
 800792e:	4013      	ands	r3, r2
 8007930:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 8007932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007934:	2b0b      	cmp	r3, #11
 8007936:	d901      	bls.n	800793c <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 8007938:	2300      	movs	r3, #0
 800793a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 800793c:	4b31      	ldr	r3, [pc, #196]	@ (8007a04 <HAL_RCC_GetSysClockFreq+0x12c>)
 800793e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007940:	0092      	lsls	r2, r2, #2
 8007942:	58d3      	ldr	r3, [r2, r3]
 8007944:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d11b      	bne.n	8007984 <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800794c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007950:	e018      	b.n	8007984 <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	2b08      	cmp	r3, #8
 8007956:	d102      	bne.n	800795e <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007958:	4b2b      	ldr	r3, [pc, #172]	@ (8007a08 <HAL_RCC_GetSysClockFreq+0x130>)
 800795a:	623b      	str	r3, [r7, #32]
 800795c:	e012      	b.n	8007984 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	2b10      	cmp	r3, #16
 8007962:	d102      	bne.n	800796a <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007964:	4b29      	ldr	r3, [pc, #164]	@ (8007a0c <HAL_RCC_GetSysClockFreq+0x134>)
 8007966:	623b      	str	r3, [r7, #32]
 8007968:	e00c      	b.n	8007984 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	2b20      	cmp	r3, #32
 800796e:	d103      	bne.n	8007978 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8007970:	23fa      	movs	r3, #250	@ 0xfa
 8007972:	01db      	lsls	r3, r3, #7
 8007974:	623b      	str	r3, [r7, #32]
 8007976:	e005      	b.n	8007984 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	2b28      	cmp	r3, #40	@ 0x28
 800797c:	d102      	bne.n	8007984 <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800797e:	2380      	movs	r3, #128	@ 0x80
 8007980:	021b      	lsls	r3, r3, #8
 8007982:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	2b18      	cmp	r3, #24
 8007988:	d135      	bne.n	80079f6 <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800798a:	4b1d      	ldr	r3, [pc, #116]	@ (8007a00 <HAL_RCC_GetSysClockFreq+0x128>)
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	2203      	movs	r2, #3
 8007990:	4013      	ands	r3, r2
 8007992:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007994:	4b1a      	ldr	r3, [pc, #104]	@ (8007a00 <HAL_RCC_GetSysClockFreq+0x128>)
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	091b      	lsrs	r3, r3, #4
 800799a:	2207      	movs	r2, #7
 800799c:	4013      	ands	r3, r2
 800799e:	3301      	adds	r3, #1
 80079a0:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d003      	beq.n	80079b0 <HAL_RCC_GetSysClockFreq+0xd8>
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	2b03      	cmp	r3, #3
 80079ac:	d003      	beq.n	80079b6 <HAL_RCC_GetSysClockFreq+0xde>
 80079ae:	e005      	b.n	80079bc <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 80079b0:	4b15      	ldr	r3, [pc, #84]	@ (8007a08 <HAL_RCC_GetSysClockFreq+0x130>)
 80079b2:	61fb      	str	r3, [r7, #28]
        break;
 80079b4:	e005      	b.n	80079c2 <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 80079b6:	4b15      	ldr	r3, [pc, #84]	@ (8007a0c <HAL_RCC_GetSysClockFreq+0x134>)
 80079b8:	61fb      	str	r3, [r7, #28]
        break;
 80079ba:	e002      	b.n	80079c2 <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 80079bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079be:	61fb      	str	r3, [r7, #28]
        break;
 80079c0:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 80079c2:	4b0f      	ldr	r3, [pc, #60]	@ (8007a00 <HAL_RCC_GetSysClockFreq+0x128>)
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	0a1b      	lsrs	r3, r3, #8
 80079c8:	227f      	movs	r2, #127	@ 0x7f
 80079ca:	4013      	ands	r3, r2
 80079cc:	69fa      	ldr	r2, [r7, #28]
 80079ce:	4353      	muls	r3, r2
 80079d0:	68f9      	ldr	r1, [r7, #12]
 80079d2:	0018      	movs	r0, r3
 80079d4:	f7f8 fbb4 	bl	8000140 <__udivsi3>
 80079d8:	0003      	movs	r3, r0
 80079da:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80079dc:	4b08      	ldr	r3, [pc, #32]	@ (8007a00 <HAL_RCC_GetSysClockFreq+0x128>)
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	0f5b      	lsrs	r3, r3, #29
 80079e2:	2207      	movs	r2, #7
 80079e4:	4013      	ands	r3, r2
 80079e6:	3301      	adds	r3, #1
 80079e8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80079ea:	6879      	ldr	r1, [r7, #4]
 80079ec:	68b8      	ldr	r0, [r7, #8]
 80079ee:	f7f8 fba7 	bl	8000140 <__udivsi3>
 80079f2:	0003      	movs	r3, r0
 80079f4:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80079f6:	6a3b      	ldr	r3, [r7, #32]
}
 80079f8:	0018      	movs	r0, r3
 80079fa:	46bd      	mov	sp, r7
 80079fc:	b00a      	add	sp, #40	@ 0x28
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	40021000 	.word	0x40021000
 8007a04:	0800fcc0 	.word	0x0800fcc0
 8007a08:	00f42400 	.word	0x00f42400
 8007a0c:	003d0900 	.word	0x003d0900

08007a10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a14:	4b02      	ldr	r3, [pc, #8]	@ (8007a20 <HAL_RCC_GetHCLKFreq+0x10>)
 8007a16:	681b      	ldr	r3, [r3, #0]
}
 8007a18:	0018      	movs	r0, r3
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	46c0      	nop			@ (mov r8, r8)
 8007a20:	20000004 	.word	0x20000004

08007a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 8007a28:	f7ff fff2 	bl	8007a10 <HAL_RCC_GetHCLKFreq>
 8007a2c:	0001      	movs	r1, r0
 8007a2e:	4b07      	ldr	r3, [pc, #28]	@ (8007a4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	0b1b      	lsrs	r3, r3, #12
 8007a34:	2207      	movs	r2, #7
 8007a36:	4013      	ands	r3, r2
 8007a38:	4a05      	ldr	r2, [pc, #20]	@ (8007a50 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8007a3a:	5cd3      	ldrb	r3, [r2, r3]
 8007a3c:	001a      	movs	r2, r3
 8007a3e:	231f      	movs	r3, #31
 8007a40:	4013      	ands	r3, r2
 8007a42:	40d9      	lsrs	r1, r3
 8007a44:	000b      	movs	r3, r1
}
 8007a46:	0018      	movs	r0, r3
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	40021000 	.word	0x40021000
 8007a50:	0800fcb8 	.word	0x0800fcb8

08007a54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007a60:	4b2f      	ldr	r3, [pc, #188]	@ (8007b20 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007a62:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007a64:	2380      	movs	r3, #128	@ 0x80
 8007a66:	055b      	lsls	r3, r3, #21
 8007a68:	4013      	ands	r3, r2
 8007a6a:	d004      	beq.n	8007a76 <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007a6c:	f7ff fa12 	bl	8006e94 <HAL_PWREx_GetVoltageRange>
 8007a70:	0003      	movs	r3, r0
 8007a72:	617b      	str	r3, [r7, #20]
 8007a74:	e017      	b.n	8007aa6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a76:	4b2a      	ldr	r3, [pc, #168]	@ (8007b20 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007a78:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007a7a:	4b29      	ldr	r3, [pc, #164]	@ (8007b20 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007a7c:	2180      	movs	r1, #128	@ 0x80
 8007a7e:	0549      	lsls	r1, r1, #21
 8007a80:	430a      	orrs	r2, r1
 8007a82:	659a      	str	r2, [r3, #88]	@ 0x58
 8007a84:	4b26      	ldr	r3, [pc, #152]	@ (8007b20 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007a86:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007a88:	2380      	movs	r3, #128	@ 0x80
 8007a8a:	055b      	lsls	r3, r3, #21
 8007a8c:	4013      	ands	r3, r2
 8007a8e:	60fb      	str	r3, [r7, #12]
 8007a90:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007a92:	f7ff f9ff 	bl	8006e94 <HAL_PWREx_GetVoltageRange>
 8007a96:	0003      	movs	r3, r0
 8007a98:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007a9a:	4b21      	ldr	r3, [pc, #132]	@ (8007b20 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007a9c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007a9e:	4b20      	ldr	r3, [pc, #128]	@ (8007b20 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007aa0:	4920      	ldr	r1, [pc, #128]	@ (8007b24 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 8007aa2:	400a      	ands	r2, r1
 8007aa4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007aa6:	697a      	ldr	r2, [r7, #20]
 8007aa8:	2380      	movs	r3, #128	@ 0x80
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d111      	bne.n	8007ad4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2b80      	cmp	r3, #128	@ 0x80
 8007ab4:	d91c      	bls.n	8007af0 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2bb0      	cmp	r3, #176	@ 0xb0
 8007aba:	d902      	bls.n	8007ac2 <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007abc:	2302      	movs	r3, #2
 8007abe:	613b      	str	r3, [r7, #16]
 8007ac0:	e016      	b.n	8007af0 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2b90      	cmp	r3, #144	@ 0x90
 8007ac6:	d902      	bls.n	8007ace <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007ac8:	2301      	movs	r3, #1
 8007aca:	613b      	str	r3, [r7, #16]
 8007acc:	e010      	b.n	8007af0 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 8007ace:	2300      	movs	r3, #0
 8007ad0:	613b      	str	r3, [r7, #16]
 8007ad2:	e00d      	b.n	8007af0 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2b7f      	cmp	r3, #127	@ 0x7f
 8007ad8:	d902      	bls.n	8007ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 8007ada:	2302      	movs	r3, #2
 8007adc:	613b      	str	r3, [r7, #16]
 8007ade:	e007      	b.n	8007af0 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2b70      	cmp	r3, #112	@ 0x70
 8007ae4:	d102      	bne.n	8007aec <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	613b      	str	r3, [r7, #16]
 8007aea:	e001      	b.n	8007af0 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8007aec:	2300      	movs	r3, #0
 8007aee:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007af0:	4b0d      	ldr	r3, [pc, #52]	@ (8007b28 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2207      	movs	r2, #7
 8007af6:	4393      	bics	r3, r2
 8007af8:	0019      	movs	r1, r3
 8007afa:	4b0b      	ldr	r3, [pc, #44]	@ (8007b28 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	430a      	orrs	r2, r1
 8007b00:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8007b02:	4b09      	ldr	r3, [pc, #36]	@ (8007b28 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2207      	movs	r2, #7
 8007b08:	4013      	ands	r3, r2
 8007b0a:	693a      	ldr	r2, [r7, #16]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d001      	beq.n	8007b14 <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	e000      	b.n	8007b16 <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	0018      	movs	r0, r3
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	b006      	add	sp, #24
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	46c0      	nop			@ (mov r8, r8)
 8007b20:	40021000 	.word	0x40021000
 8007b24:	efffffff 	.word	0xefffffff
 8007b28:	40022000 	.word	0x40022000

08007b2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b086      	sub	sp, #24
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007b34:	2313      	movs	r3, #19
 8007b36:	18fb      	adds	r3, r7, r3
 8007b38:	2200      	movs	r2, #0
 8007b3a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007b3c:	2312      	movs	r3, #18
 8007b3e:	18fb      	adds	r3, r7, r3
 8007b40:	2200      	movs	r2, #0
 8007b42:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	2380      	movs	r3, #128	@ 0x80
 8007b4a:	021b      	lsls	r3, r3, #8
 8007b4c:	4013      	ands	r3, r2
 8007b4e:	d100      	bne.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8007b50:	e0b7      	b.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b52:	2011      	movs	r0, #17
 8007b54:	183b      	adds	r3, r7, r0
 8007b56:	2200      	movs	r2, #0
 8007b58:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b5a:	4b4c      	ldr	r3, [pc, #304]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b5c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007b5e:	2380      	movs	r3, #128	@ 0x80
 8007b60:	055b      	lsls	r3, r3, #21
 8007b62:	4013      	ands	r3, r2
 8007b64:	d110      	bne.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b66:	4b49      	ldr	r3, [pc, #292]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b68:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007b6a:	4b48      	ldr	r3, [pc, #288]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b6c:	2180      	movs	r1, #128	@ 0x80
 8007b6e:	0549      	lsls	r1, r1, #21
 8007b70:	430a      	orrs	r2, r1
 8007b72:	659a      	str	r2, [r3, #88]	@ 0x58
 8007b74:	4b45      	ldr	r3, [pc, #276]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b76:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007b78:	2380      	movs	r3, #128	@ 0x80
 8007b7a:	055b      	lsls	r3, r3, #21
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	60bb      	str	r3, [r7, #8]
 8007b80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b82:	183b      	adds	r3, r7, r0
 8007b84:	2201      	movs	r2, #1
 8007b86:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b88:	4b41      	ldr	r3, [pc, #260]	@ (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	4b40      	ldr	r3, [pc, #256]	@ (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007b8e:	2180      	movs	r1, #128	@ 0x80
 8007b90:	0049      	lsls	r1, r1, #1
 8007b92:	430a      	orrs	r2, r1
 8007b94:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b96:	f7fe f95b 	bl	8005e50 <HAL_GetTick>
 8007b9a:	0003      	movs	r3, r0
 8007b9c:	60fb      	str	r3, [r7, #12]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007b9e:	e00b      	b.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ba0:	f7fe f956 	bl	8005e50 <HAL_GetTick>
 8007ba4:	0002      	movs	r2, r0
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	d904      	bls.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8007bae:	2313      	movs	r3, #19
 8007bb0:	18fb      	adds	r3, r7, r3
 8007bb2:	2203      	movs	r2, #3
 8007bb4:	701a      	strb	r2, [r3, #0]
        break;
 8007bb6:	e005      	b.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007bb8:	4b35      	ldr	r3, [pc, #212]	@ (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	2380      	movs	r3, #128	@ 0x80
 8007bbe:	005b      	lsls	r3, r3, #1
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	d0ed      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8007bc4:	2313      	movs	r3, #19
 8007bc6:	18fb      	adds	r3, r7, r3
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d168      	bne.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007bce:	4a2f      	ldr	r2, [pc, #188]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bd0:	2390      	movs	r3, #144	@ 0x90
 8007bd2:	58d2      	ldr	r2, [r2, r3]
 8007bd4:	23c0      	movs	r3, #192	@ 0xc0
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	4013      	ands	r3, r2
 8007bda:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d01f      	beq.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d01a      	beq.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0xf6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007bec:	4a27      	ldr	r2, [pc, #156]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bee:	2390      	movs	r3, #144	@ 0x90
 8007bf0:	58d3      	ldr	r3, [r2, r3]
 8007bf2:	4a28      	ldr	r2, [pc, #160]	@ (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007bf8:	4a24      	ldr	r2, [pc, #144]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bfa:	2390      	movs	r3, #144	@ 0x90
 8007bfc:	58d3      	ldr	r3, [r2, r3]
 8007bfe:	4923      	ldr	r1, [pc, #140]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c00:	2280      	movs	r2, #128	@ 0x80
 8007c02:	0252      	lsls	r2, r2, #9
 8007c04:	4313      	orrs	r3, r2
 8007c06:	2290      	movs	r2, #144	@ 0x90
 8007c08:	508b      	str	r3, [r1, r2]
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007c0a:	4a20      	ldr	r2, [pc, #128]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c0c:	2390      	movs	r3, #144	@ 0x90
 8007c0e:	58d3      	ldr	r3, [r2, r3]
 8007c10:	491e      	ldr	r1, [pc, #120]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c12:	4a21      	ldr	r2, [pc, #132]	@ (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8007c14:	4013      	ands	r3, r2
 8007c16:	2290      	movs	r2, #144	@ 0x90
 8007c18:	508b      	str	r3, [r1, r2]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007c1a:	491c      	ldr	r1, [pc, #112]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c1c:	2290      	movs	r2, #144	@ 0x90
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	508b      	str	r3, [r1, r2]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	2201      	movs	r2, #1
 8007c26:	4013      	ands	r3, r2
 8007c28:	d017      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x12e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c2a:	f7fe f911 	bl	8005e50 <HAL_GetTick>
 8007c2e:	0003      	movs	r3, r0
 8007c30:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c32:	e00c      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c34:	f7fe f90c 	bl	8005e50 <HAL_GetTick>
 8007c38:	0002      	movs	r2, r0
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	1ad3      	subs	r3, r2, r3
 8007c3e:	4a17      	ldr	r2, [pc, #92]	@ (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d904      	bls.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x122>
          {
            ret = HAL_TIMEOUT;
 8007c44:	2313      	movs	r3, #19
 8007c46:	18fb      	adds	r3, r7, r3
 8007c48:	2203      	movs	r2, #3
 8007c4a:	701a      	strb	r2, [r3, #0]
            break;
 8007c4c:	e005      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x12e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c4e:	4a0f      	ldr	r2, [pc, #60]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c50:	2390      	movs	r3, #144	@ 0x90
 8007c52:	58d3      	ldr	r3, [r2, r3]
 8007c54:	2202      	movs	r2, #2
 8007c56:	4013      	ands	r3, r2
 8007c58:	d0ec      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x108>
          }
        }
      }

      if (ret == HAL_OK)
 8007c5a:	2313      	movs	r3, #19
 8007c5c:	18fb      	adds	r3, r7, r3
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d10b      	bne.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c64:	4a09      	ldr	r2, [pc, #36]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c66:	2390      	movs	r3, #144	@ 0x90
 8007c68:	58d3      	ldr	r3, [r2, r3]
 8007c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007c6c:	401a      	ands	r2, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c72:	4906      	ldr	r1, [pc, #24]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c74:	4313      	orrs	r3, r2
 8007c76:	2290      	movs	r2, #144	@ 0x90
 8007c78:	508b      	str	r3, [r1, r2]
 8007c7a:	e017      	b.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c7c:	2312      	movs	r3, #18
 8007c7e:	18fb      	adds	r3, r7, r3
 8007c80:	2213      	movs	r2, #19
 8007c82:	18ba      	adds	r2, r7, r2
 8007c84:	7812      	ldrb	r2, [r2, #0]
 8007c86:	701a      	strb	r2, [r3, #0]
 8007c88:	e010      	b.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007c8a:	46c0      	nop			@ (mov r8, r8)
 8007c8c:	40021000 	.word	0x40021000
 8007c90:	40007000 	.word	0x40007000
 8007c94:	fffffcff 	.word	0xfffffcff
 8007c98:	fffeffff 	.word	0xfffeffff
 8007c9c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca0:	2312      	movs	r3, #18
 8007ca2:	18fb      	adds	r3, r7, r3
 8007ca4:	2213      	movs	r2, #19
 8007ca6:	18ba      	adds	r2, r7, r2
 8007ca8:	7812      	ldrb	r2, [r2, #0]
 8007caa:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007cac:	2311      	movs	r3, #17
 8007cae:	18fb      	adds	r3, r7, r3
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d105      	bne.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007cb6:	4ba4      	ldr	r3, [pc, #656]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007cb8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007cba:	4ba3      	ldr	r3, [pc, #652]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007cbc:	49a3      	ldr	r1, [pc, #652]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8007cbe:	400a      	ands	r2, r1
 8007cc0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	4013      	ands	r3, r2
 8007cca:	d00b      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007ccc:	4a9e      	ldr	r2, [pc, #632]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007cce:	2388      	movs	r3, #136	@ 0x88
 8007cd0:	58d3      	ldr	r3, [r2, r3]
 8007cd2:	2203      	movs	r2, #3
 8007cd4:	4393      	bics	r3, r2
 8007cd6:	001a      	movs	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	499a      	ldr	r1, [pc, #616]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	2288      	movs	r2, #136	@ 0x88
 8007ce2:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2202      	movs	r2, #2
 8007cea:	4013      	ands	r3, r2
 8007cec:	d00b      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007cee:	4a96      	ldr	r2, [pc, #600]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007cf0:	2388      	movs	r3, #136	@ 0x88
 8007cf2:	58d3      	ldr	r3, [r2, r3]
 8007cf4:	220c      	movs	r2, #12
 8007cf6:	4393      	bics	r3, r2
 8007cf8:	001a      	movs	r2, r3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	4992      	ldr	r1, [pc, #584]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d00:	4313      	orrs	r3, r2
 8007d02:	2288      	movs	r2, #136	@ 0x88
 8007d04:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2210      	movs	r2, #16
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	d00a      	beq.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d10:	4a8d      	ldr	r2, [pc, #564]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d12:	2388      	movs	r3, #136	@ 0x88
 8007d14:	58d3      	ldr	r3, [r2, r3]
 8007d16:	4a8e      	ldr	r2, [pc, #568]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8007d18:	401a      	ands	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	695b      	ldr	r3, [r3, #20]
 8007d1e:	498a      	ldr	r1, [pc, #552]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d20:	4313      	orrs	r3, r2
 8007d22:	2288      	movs	r2, #136	@ 0x88
 8007d24:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2208      	movs	r2, #8
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	d00a      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8007d30:	4a85      	ldr	r2, [pc, #532]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d32:	2388      	movs	r3, #136	@ 0x88
 8007d34:	58d3      	ldr	r3, [r2, r3]
 8007d36:	4a87      	ldr	r2, [pc, #540]	@ (8007f54 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8007d38:	401a      	ands	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	4982      	ldr	r1, [pc, #520]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d40:	4313      	orrs	r3, r2
 8007d42:	2288      	movs	r2, #136	@ 0x88
 8007d44:	508b      	str	r3, [r1, r2]
  }
#if defined (LPUART3)
  /*-------------------------- LPUART3 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART3) == RCC_PERIPHCLK_LPUART3)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2204      	movs	r2, #4
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	d00b      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART3CLKSOURCE(PeriphClkInit->Lpuart3ClockSelection));

    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
 8007d50:	4a7d      	ldr	r2, [pc, #500]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d52:	2388      	movs	r3, #136	@ 0x88
 8007d54:	58d3      	ldr	r3, [r2, r3]
 8007d56:	22c0      	movs	r2, #192	@ 0xc0
 8007d58:	4393      	bics	r3, r2
 8007d5a:	001a      	movs	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	4979      	ldr	r1, [pc, #484]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d62:	4313      	orrs	r3, r2
 8007d64:	2288      	movs	r2, #136	@ 0x88
 8007d66:	508b      	str	r3, [r1, r2]
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2220      	movs	r2, #32
 8007d6e:	4013      	ands	r3, r2
 8007d70:	d00a      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007d72:	4a75      	ldr	r2, [pc, #468]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d74:	2388      	movs	r3, #136	@ 0x88
 8007d76:	58d3      	ldr	r3, [r2, r3]
 8007d78:	4a77      	ldr	r2, [pc, #476]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d7a:	401a      	ands	r2, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	699b      	ldr	r3, [r3, #24]
 8007d80:	4971      	ldr	r1, [pc, #452]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d82:	4313      	orrs	r3, r2
 8007d84:	2288      	movs	r2, #136	@ 0x88
 8007d86:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2240      	movs	r2, #64	@ 0x40
 8007d8e:	4013      	ands	r3, r2
 8007d90:	d00a      	beq.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007d92:	4a6d      	ldr	r2, [pc, #436]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d94:	2388      	movs	r3, #136	@ 0x88
 8007d96:	58d3      	ldr	r3, [r2, r3]
 8007d98:	4a70      	ldr	r2, [pc, #448]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8007d9a:	401a      	ands	r2, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	69db      	ldr	r3, [r3, #28]
 8007da0:	4969      	ldr	r1, [pc, #420]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007da2:	4313      	orrs	r3, r2
 8007da4:	2288      	movs	r2, #136	@ 0x88
 8007da6:	508b      	str	r3, [r1, r2]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2280      	movs	r2, #128	@ 0x80
 8007dae:	4013      	ands	r3, r2
 8007db0:	d00a      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007db2:	4a65      	ldr	r2, [pc, #404]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007db4:	2388      	movs	r3, #136	@ 0x88
 8007db6:	58d3      	ldr	r3, [r2, r3]
 8007db8:	4a69      	ldr	r2, [pc, #420]	@ (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8007dba:	401a      	ands	r2, r3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6a1b      	ldr	r3, [r3, #32]
 8007dc0:	4961      	ldr	r1, [pc, #388]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	2288      	movs	r2, #136	@ 0x88
 8007dc6:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	2380      	movs	r3, #128	@ 0x80
 8007dce:	005b      	lsls	r3, r3, #1
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	d00a      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007dd4:	4a5c      	ldr	r2, [pc, #368]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007dd6:	2388      	movs	r3, #136	@ 0x88
 8007dd8:	58d3      	ldr	r3, [r2, r3]
 8007dda:	4a62      	ldr	r2, [pc, #392]	@ (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007ddc:	401a      	ands	r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007de2:	4959      	ldr	r1, [pc, #356]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007de4:	4313      	orrs	r3, r2
 8007de6:	2288      	movs	r2, #136	@ 0x88
 8007de8:	508b      	str	r3, [r1, r2]
  }
#if defined (LPTIM3)
  /*----------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	2380      	movs	r3, #128	@ 0x80
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	4013      	ands	r3, r2
 8007df4:	d00a      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8007df6:	4a54      	ldr	r2, [pc, #336]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007df8:	2388      	movs	r3, #136	@ 0x88
 8007dfa:	58d3      	ldr	r3, [r2, r3]
 8007dfc:	4a5a      	ldr	r2, [pc, #360]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8007dfe:	401a      	ands	r2, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e04:	4950      	ldr	r1, [pc, #320]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e06:	4313      	orrs	r3, r2
 8007e08:	2288      	movs	r2, #136	@ 0x88
 8007e0a:	508b      	str	r3, [r1, r2]
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	2380      	movs	r3, #128	@ 0x80
 8007e12:	01db      	lsls	r3, r3, #7
 8007e14:	4013      	ands	r3, r2
 8007e16:	d017      	beq.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e1c:	2380      	movs	r3, #128	@ 0x80
 8007e1e:	055b      	lsls	r3, r3, #21
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d106      	bne.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x306>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 8007e24:	4b48      	ldr	r3, [pc, #288]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e26:	68da      	ldr	r2, [r3, #12]
 8007e28:	4b47      	ldr	r3, [pc, #284]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e2a:	2180      	movs	r1, #128	@ 0x80
 8007e2c:	0249      	lsls	r1, r1, #9
 8007e2e:	430a      	orrs	r2, r1
 8007e30:	60da      	str	r2, [r3, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007e32:	4a45      	ldr	r2, [pc, #276]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e34:	2388      	movs	r3, #136	@ 0x88
 8007e36:	58d3      	ldr	r3, [r2, r3]
 8007e38:	4a4c      	ldr	r2, [pc, #304]	@ (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x440>)
 8007e3a:	401a      	ands	r2, r3
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e40:	4941      	ldr	r1, [pc, #260]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e42:	4313      	orrs	r3, r2
 8007e44:	2288      	movs	r2, #136	@ 0x88
 8007e46:	508b      	str	r3, [r1, r2]
  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	2380      	movs	r3, #128	@ 0x80
 8007e4e:	015b      	lsls	r3, r3, #5
 8007e50:	4013      	ands	r3, r2
 8007e52:	d017      	beq.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLQ)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e58:	2380      	movs	r3, #128	@ 0x80
 8007e5a:	051b      	lsls	r3, r3, #20
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d106      	bne.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8007e60:	4b39      	ldr	r3, [pc, #228]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e62:	68da      	ldr	r2, [r3, #12]
 8007e64:	4b38      	ldr	r3, [pc, #224]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e66:	2180      	movs	r1, #128	@ 0x80
 8007e68:	0449      	lsls	r1, r1, #17
 8007e6a:	430a      	orrs	r2, r1
 8007e6c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007e6e:	4a36      	ldr	r2, [pc, #216]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e70:	2388      	movs	r3, #136	@ 0x88
 8007e72:	58d3      	ldr	r3, [r2, r3]
 8007e74:	4a3e      	ldr	r2, [pc, #248]	@ (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007e76:	401a      	ands	r2, r3
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e7c:	4932      	ldr	r1, [pc, #200]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	2288      	movs	r2, #136	@ 0x88
 8007e82:	508b      	str	r3, [r1, r2]

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	2380      	movs	r3, #128	@ 0x80
 8007e8a:	019b      	lsls	r3, r3, #6
 8007e8c:	4013      	ands	r3, r2
 8007e8e:	d017      	beq.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e94:	2380      	movs	r3, #128	@ 0x80
 8007e96:	051b      	lsls	r3, r3, #20
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d106      	bne.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x37e>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8007e9c:	4b2a      	ldr	r3, [pc, #168]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e9e:	68da      	ldr	r2, [r3, #12]
 8007ea0:	4b29      	ldr	r3, [pc, #164]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007ea2:	2180      	movs	r1, #128	@ 0x80
 8007ea4:	0449      	lsls	r1, r1, #17
 8007ea6:	430a      	orrs	r2, r1
 8007ea8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007eaa:	4a27      	ldr	r2, [pc, #156]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007eac:	2388      	movs	r3, #136	@ 0x88
 8007eae:	58d3      	ldr	r3, [r2, r3]
 8007eb0:	4a2f      	ldr	r2, [pc, #188]	@ (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007eb2:	401a      	ands	r2, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eb8:	4923      	ldr	r1, [pc, #140]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	2288      	movs	r2, #136	@ 0x88
 8007ebe:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	2380      	movs	r3, #128	@ 0x80
 8007ec6:	00db      	lsls	r3, r3, #3
 8007ec8:	4013      	ands	r3, r2
 8007eca:	d017      	beq.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ed0:	2380      	movs	r3, #128	@ 0x80
 8007ed2:	045b      	lsls	r3, r3, #17
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d106      	bne.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8007ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007eda:	68da      	ldr	r2, [r3, #12]
 8007edc:	4b1a      	ldr	r3, [pc, #104]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007ede:	2180      	movs	r1, #128	@ 0x80
 8007ee0:	0449      	lsls	r1, r1, #17
 8007ee2:	430a      	orrs	r2, r1
 8007ee4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007ee6:	4a18      	ldr	r2, [pc, #96]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007ee8:	2388      	movs	r3, #136	@ 0x88
 8007eea:	58d3      	ldr	r3, [r2, r3]
 8007eec:	4a21      	ldr	r2, [pc, #132]	@ (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8007eee:	401a      	ands	r2, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ef4:	4914      	ldr	r1, [pc, #80]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	2288      	movs	r2, #136	@ 0x88
 8007efa:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	2380      	movs	r3, #128	@ 0x80
 8007f02:	011b      	lsls	r3, r3, #4
 8007f04:	4013      	ands	r3, r2
 8007f06:	d017      	beq.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f0c:	2380      	movs	r3, #128	@ 0x80
 8007f0e:	049b      	lsls	r3, r3, #18
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d106      	bne.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8007f14:	4b0c      	ldr	r3, [pc, #48]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007f16:	68da      	ldr	r2, [r3, #12]
 8007f18:	4b0b      	ldr	r3, [pc, #44]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007f1a:	2180      	movs	r1, #128	@ 0x80
 8007f1c:	0449      	lsls	r1, r1, #17
 8007f1e:	430a      	orrs	r2, r1
 8007f20:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007f22:	4a09      	ldr	r2, [pc, #36]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007f24:	2388      	movs	r3, #136	@ 0x88
 8007f26:	58d3      	ldr	r3, [r2, r3]
 8007f28:	4a12      	ldr	r2, [pc, #72]	@ (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8007f2a:	401a      	ands	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f30:	4905      	ldr	r1, [pc, #20]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007f32:	4313      	orrs	r3, r2
 8007f34:	2288      	movs	r2, #136	@ 0x88
 8007f36:	508b      	str	r3, [r1, r2]

  }

  return status;
 8007f38:	2312      	movs	r3, #18
 8007f3a:	18fb      	adds	r3, r7, r3
 8007f3c:	781b      	ldrb	r3, [r3, #0]
}
 8007f3e:	0018      	movs	r0, r3
 8007f40:	46bd      	mov	sp, r7
 8007f42:	b006      	add	sp, #24
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	46c0      	nop			@ (mov r8, r8)
 8007f48:	40021000 	.word	0x40021000
 8007f4c:	efffffff 	.word	0xefffffff
 8007f50:	fffff3ff 	.word	0xfffff3ff
 8007f54:	fffffcff 	.word	0xfffffcff
 8007f58:	ffffcfff 	.word	0xffffcfff
 8007f5c:	fffcffff 	.word	0xfffcffff
 8007f60:	fff3ffff 	.word	0xfff3ffff
 8007f64:	ffcfffff 	.word	0xffcfffff
 8007f68:	ff3fffff 	.word	0xff3fffff
 8007f6c:	cfffffff 	.word	0xcfffffff
 8007f70:	f3ffffff 	.word	0xf3ffffff
 8007f74:	feffffff 	.word	0xfeffffff

08007f78 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM1  TIM1 peripheral clock (only for devices with TIM1)
  *            @arg @ref RCC_PERIPHCLK_TIM15  TIM15 peripheral clock (only for devices with TIM15)
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007f78:	b590      	push	{r4, r7, lr}
 8007f7a:	b089      	sub	sp, #36	@ 0x24
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8007f80:	2300      	movs	r3, #0
 8007f82:	61fb      	str	r3, [r7, #28]
  PLL_ClocksTypeDef pll_freq;
  uint32_t msirange;
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	2380      	movs	r3, #128	@ 0x80
 8007f88:	021b      	lsls	r3, r3, #8
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d154      	bne.n	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
  {
    /* Get the current RCC_PERIPHCLK_RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007f8e:	4ad5      	ldr	r2, [pc, #852]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007f90:	2390      	movs	r3, #144	@ 0x90
 8007f92:	58d2      	ldr	r2, [r2, r3]
 8007f94:	23c0      	movs	r3, #192	@ 0xc0
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	4013      	ands	r3, r2
 8007f9a:	617b      	str	r3, [r7, #20]

    switch (srcclk)
 8007f9c:	697a      	ldr	r2, [r7, #20]
 8007f9e:	23c0      	movs	r3, #192	@ 0xc0
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d039      	beq.n	800801a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8007fa6:	697a      	ldr	r2, [r7, #20]
 8007fa8:	23c0      	movs	r3, #192	@ 0xc0
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d901      	bls.n	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8007fb0:	f000 fd1a 	bl	80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8007fb4:	697a      	ldr	r2, [r7, #20]
 8007fb6:	2380      	movs	r3, #128	@ 0x80
 8007fb8:	005b      	lsls	r3, r3, #1
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d006      	beq.n	8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8007fbe:	697a      	ldr	r2, [r7, #20]
 8007fc0:	2380      	movs	r3, #128	@ 0x80
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d00f      	beq.n	8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 8007fc8:	f000 fd0e 	bl	80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007fcc:	4ac5      	ldr	r2, [pc, #788]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007fce:	2390      	movs	r3, #144	@ 0x90
 8007fd0:	58d3      	ldr	r3, [r2, r3]
 8007fd2:	2202      	movs	r2, #2
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d001      	beq.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 8007fda:	f000 fd07 	bl	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
          frequency = LSE_VALUE;
 8007fde:	2380      	movs	r3, #128	@ 0x80
 8007fe0:	021b      	lsls	r3, r3, #8
 8007fe2:	61fb      	str	r3, [r7, #28]
        break;
 8007fe4:	f000 fd02 	bl	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007fe8:	4abe      	ldr	r2, [pc, #760]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007fea:	2394      	movs	r3, #148	@ 0x94
 8007fec:	58d3      	ldr	r3, [r2, r3]
 8007fee:	2202      	movs	r2, #2
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d001      	beq.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 8007ff6:	f000 fcfb 	bl	80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8007ffa:	4aba      	ldr	r2, [pc, #744]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007ffc:	2394      	movs	r3, #148	@ 0x94
 8007ffe:	58d3      	ldr	r3, [r2, r3]
 8008000:	2204      	movs	r2, #4
 8008002:	4013      	ands	r3, r2
 8008004:	2b04      	cmp	r3, #4
 8008006:	d103      	bne.n	8008010 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSI_VALUE / 128U;
 8008008:	23fa      	movs	r3, #250	@ 0xfa
 800800a:	61fb      	str	r3, [r7, #28]
        break;
 800800c:	f000 fcf0 	bl	80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
            frequency = LSI_VALUE;
 8008010:	23fa      	movs	r3, #250	@ 0xfa
 8008012:	01db      	lsls	r3, r3, #7
 8008014:	61fb      	str	r3, [r7, #28]
        break;
 8008016:	f000 fceb 	bl	80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800801a:	4bb2      	ldr	r3, [pc, #712]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	2380      	movs	r3, #128	@ 0x80
 8008020:	029b      	lsls	r3, r3, #10
 8008022:	401a      	ands	r2, r3
 8008024:	2380      	movs	r3, #128	@ 0x80
 8008026:	029b      	lsls	r3, r3, #10
 8008028:	429a      	cmp	r2, r3
 800802a:	d001      	beq.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 800802c:	f000 fce2 	bl	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
          frequency = HSE_VALUE / 32U;
 8008030:	4bad      	ldr	r3, [pc, #692]	@ (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 8008032:	61fb      	str	r3, [r7, #28]
        break;
 8008034:	f000 fcde 	bl	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	2380      	movs	r3, #128	@ 0x80
 800803c:	029b      	lsls	r3, r3, #10
 800803e:	429a      	cmp	r2, r3
 8008040:	d100      	bne.n	8008044 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8008042:	e11a      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	2380      	movs	r3, #128	@ 0x80
 8008048:	029b      	lsls	r3, r3, #10
 800804a:	429a      	cmp	r2, r3
 800804c:	d901      	bls.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800804e:	f000 fcd3 	bl	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	2380      	movs	r3, #128	@ 0x80
 8008056:	025b      	lsls	r3, r3, #9
 8008058:	429a      	cmp	r2, r3
 800805a:	d100      	bne.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800805c:	e10d      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	2380      	movs	r3, #128	@ 0x80
 8008062:	025b      	lsls	r3, r3, #9
 8008064:	429a      	cmp	r2, r3
 8008066:	d901      	bls.n	800806c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008068:	f000 fcc6 	bl	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	2380      	movs	r3, #128	@ 0x80
 8008070:	01db      	lsls	r3, r3, #7
 8008072:	429a      	cmp	r2, r3
 8008074:	d100      	bne.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8008076:	e1eb      	b.n	8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	2380      	movs	r3, #128	@ 0x80
 800807c:	01db      	lsls	r3, r3, #7
 800807e:	429a      	cmp	r2, r3
 8008080:	d901      	bls.n	8008086 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8008082:	f000 fcb9 	bl	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	2380      	movs	r3, #128	@ 0x80
 800808a:	019b      	lsls	r3, r3, #6
 800808c:	429a      	cmp	r2, r3
 800808e:	d101      	bne.n	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 8008090:	f000 fc50 	bl	8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	2380      	movs	r3, #128	@ 0x80
 8008098:	019b      	lsls	r3, r3, #6
 800809a:	429a      	cmp	r2, r3
 800809c:	d901      	bls.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800809e:	f000 fcab 	bl	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	2380      	movs	r3, #128	@ 0x80
 80080a6:	015b      	lsls	r3, r3, #5
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d101      	bne.n	80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80080ac:	f000 fbe2 	bl	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	2380      	movs	r3, #128	@ 0x80
 80080b4:	015b      	lsls	r3, r3, #5
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d901      	bls.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80080ba:	f000 fc9d 	bl	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	2380      	movs	r3, #128	@ 0x80
 80080c2:	011b      	lsls	r3, r3, #4
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d101      	bne.n	80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80080c8:	f000 fba9 	bl	800881e <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	2380      	movs	r3, #128	@ 0x80
 80080d0:	011b      	lsls	r3, r3, #4
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d901      	bls.n	80080da <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 80080d6:	f000 fc8f 	bl	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	2380      	movs	r3, #128	@ 0x80
 80080de:	00db      	lsls	r3, r3, #3
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d101      	bne.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 80080e4:	f000 fb70 	bl	80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	2380      	movs	r3, #128	@ 0x80
 80080ec:	00db      	lsls	r3, r3, #3
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d901      	bls.n	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 80080f2:	f000 fc81 	bl	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	2380      	movs	r3, #128	@ 0x80
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d100      	bne.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 8008100:	e305      	b.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x796>
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	2380      	movs	r3, #128	@ 0x80
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	429a      	cmp	r2, r3
 800810a:	d901      	bls.n	8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 800810c:	f000 fc74 	bl	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	2380      	movs	r3, #128	@ 0x80
 8008114:	005b      	lsls	r3, r3, #1
 8008116:	429a      	cmp	r2, r3
 8008118:	d100      	bne.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800811a:	e29b      	b.n	8008654 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	2380      	movs	r3, #128	@ 0x80
 8008120:	005b      	lsls	r3, r3, #1
 8008122:	429a      	cmp	r2, r3
 8008124:	d901      	bls.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 8008126:	f000 fc67 	bl	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2b80      	cmp	r3, #128	@ 0x80
 800812e:	d100      	bne.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 8008130:	e22f      	b.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2b80      	cmp	r3, #128	@ 0x80
 8008136:	d901      	bls.n	800813c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8008138:	f000 fc5e 	bl	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2b20      	cmp	r3, #32
 8008140:	d80f      	bhi.n	8008162 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d101      	bne.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 8008148:	f000 fc56 	bl	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2b20      	cmp	r3, #32
 8008150:	d901      	bls.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 8008152:	f000 fc51 	bl	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	009a      	lsls	r2, r3, #2
 800815a:	4b64      	ldr	r3, [pc, #400]	@ (80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 800815c:	18d3      	adds	r3, r2, r3
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	469f      	mov	pc, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2b40      	cmp	r3, #64	@ 0x40
 8008166:	d100      	bne.n	800816a <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 8008168:	e1df      	b.n	800852a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            break;
        }
        break;
      }
      default:
        break;
 800816a:	f000 fc45 	bl	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800816e:	4a5d      	ldr	r2, [pc, #372]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8008170:	2388      	movs	r3, #136	@ 0x88
 8008172:	58d3      	ldr	r3, [r2, r3]
 8008174:	2203      	movs	r2, #3
 8008176:	4013      	ands	r3, r2
 8008178:	617b      	str	r3, [r7, #20]
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	2b03      	cmp	r3, #3
 800817e:	d025      	beq.n	80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	2b03      	cmp	r3, #3
 8008184:	d82d      	bhi.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	2b02      	cmp	r3, #2
 800818a:	d013      	beq.n	80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	2b02      	cmp	r3, #2
 8008190:	d827      	bhi.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d003      	beq.n	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	2b01      	cmp	r3, #1
 800819c:	d005      	beq.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x232>
            break;
 800819e:	e020      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
            frequency = HAL_RCC_GetPCLK1Freq();
 80081a0:	f7ff fc40 	bl	8007a24 <HAL_RCC_GetPCLK1Freq>
 80081a4:	0003      	movs	r3, r0
 80081a6:	61fb      	str	r3, [r7, #28]
            break;
 80081a8:	e022      	b.n	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            frequency = HAL_RCC_GetSysClockFreq();
 80081aa:	f7ff fb95 	bl	80078d8 <HAL_RCC_GetSysClockFreq>
 80081ae:	0003      	movs	r3, r0
 80081b0:	61fb      	str	r3, [r7, #28]
            break;
 80081b2:	e01d      	b.n	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80081b4:	4b4b      	ldr	r3, [pc, #300]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	2380      	movs	r3, #128	@ 0x80
 80081ba:	00db      	lsls	r3, r3, #3
 80081bc:	401a      	ands	r2, r3
 80081be:	2380      	movs	r3, #128	@ 0x80
 80081c0:	00db      	lsls	r3, r3, #3
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d110      	bne.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
              frequency = HSI_VALUE;
 80081c6:	4b4a      	ldr	r3, [pc, #296]	@ (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 80081c8:	61fb      	str	r3, [r7, #28]
            break;
 80081ca:	e00d      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80081cc:	4a45      	ldr	r2, [pc, #276]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80081ce:	2390      	movs	r3, #144	@ 0x90
 80081d0:	58d3      	ldr	r3, [r2, r3]
 80081d2:	2202      	movs	r2, #2
 80081d4:	4013      	ands	r3, r2
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	d109      	bne.n	80081ee <HAL_RCCEx_GetPeriphCLKFreq+0x276>
              frequency = LSE_VALUE;
 80081da:	2380      	movs	r3, #128	@ 0x80
 80081dc:	021b      	lsls	r3, r3, #8
 80081de:	61fb      	str	r3, [r7, #28]
            break;
 80081e0:	e005      	b.n	80081ee <HAL_RCCEx_GetPeriphCLKFreq+0x276>
            break;
 80081e2:	46c0      	nop			@ (mov r8, r8)
 80081e4:	f000 fc09 	bl	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80081e8:	46c0      	nop			@ (mov r8, r8)
 80081ea:	f000 fc06 	bl	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80081ee:	46c0      	nop			@ (mov r8, r8)
        break;
 80081f0:	f000 fc03 	bl	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80081f4:	4a3b      	ldr	r2, [pc, #236]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80081f6:	2388      	movs	r3, #136	@ 0x88
 80081f8:	58d3      	ldr	r3, [r2, r3]
 80081fa:	220c      	movs	r2, #12
 80081fc:	4013      	ands	r3, r2
 80081fe:	617b      	str	r3, [r7, #20]
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	2b0c      	cmp	r3, #12
 8008204:	d025      	beq.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x2da>
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	2b0c      	cmp	r3, #12
 800820a:	d82d      	bhi.n	8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	2b08      	cmp	r3, #8
 8008210:	d013      	beq.n	800823a <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	2b08      	cmp	r3, #8
 8008216:	d827      	bhi.n	8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d003      	beq.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	2b04      	cmp	r3, #4
 8008222:	d005      	beq.n	8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
            break;
 8008224:	e020      	b.n	8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
            frequency = HAL_RCC_GetPCLK1Freq();
 8008226:	f7ff fbfd 	bl	8007a24 <HAL_RCC_GetPCLK1Freq>
 800822a:	0003      	movs	r3, r0
 800822c:	61fb      	str	r3, [r7, #28]
            break;
 800822e:	e022      	b.n	8008276 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            frequency = HAL_RCC_GetSysClockFreq();
 8008230:	f7ff fb52 	bl	80078d8 <HAL_RCC_GetSysClockFreq>
 8008234:	0003      	movs	r3, r0
 8008236:	61fb      	str	r3, [r7, #28]
            break;
 8008238:	e01d      	b.n	8008276 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800823a:	4b2a      	ldr	r3, [pc, #168]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	2380      	movs	r3, #128	@ 0x80
 8008240:	00db      	lsls	r3, r3, #3
 8008242:	401a      	ands	r2, r3
 8008244:	2380      	movs	r3, #128	@ 0x80
 8008246:	00db      	lsls	r3, r3, #3
 8008248:	429a      	cmp	r2, r3
 800824a:	d110      	bne.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
              frequency = HSI_VALUE;
 800824c:	4b28      	ldr	r3, [pc, #160]	@ (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 800824e:	61fb      	str	r3, [r7, #28]
            break;
 8008250:	e00d      	b.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008252:	4a24      	ldr	r2, [pc, #144]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8008254:	2390      	movs	r3, #144	@ 0x90
 8008256:	58d3      	ldr	r3, [r2, r3]
 8008258:	2202      	movs	r2, #2
 800825a:	4013      	ands	r3, r2
 800825c:	2b02      	cmp	r3, #2
 800825e:	d109      	bne.n	8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
              frequency = LSE_VALUE;
 8008260:	2380      	movs	r3, #128	@ 0x80
 8008262:	021b      	lsls	r3, r3, #8
 8008264:	61fb      	str	r3, [r7, #28]
            break;
 8008266:	e005      	b.n	8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
            break;
 8008268:	46c0      	nop			@ (mov r8, r8)
 800826a:	f000 fbc6 	bl	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800826e:	46c0      	nop			@ (mov r8, r8)
 8008270:	f000 fbc3 	bl	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008274:	46c0      	nop			@ (mov r8, r8)
        break;
 8008276:	f000 fbc0 	bl	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        frequency = HAL_RCC_GetPCLK1Freq();
 800827a:	f7ff fbd3 	bl	8007a24 <HAL_RCC_GetPCLK1Freq>
 800827e:	0003      	movs	r3, r0
 8008280:	61fb      	str	r3, [r7, #28]
        break;
 8008282:	f000 fbba 	bl	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008286:	4a17      	ldr	r2, [pc, #92]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8008288:	2388      	movs	r3, #136	@ 0x88
 800828a:	58d2      	ldr	r2, [r2, r3]
 800828c:	23c0      	movs	r3, #192	@ 0xc0
 800828e:	011b      	lsls	r3, r3, #4
 8008290:	4013      	ands	r3, r2
 8008292:	617b      	str	r3, [r7, #20]
 8008294:	697a      	ldr	r2, [r7, #20]
 8008296:	23c0      	movs	r3, #192	@ 0xc0
 8008298:	011b      	lsls	r3, r3, #4
 800829a:	429a      	cmp	r2, r3
 800829c:	d036      	beq.n	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 800829e:	697a      	ldr	r2, [r7, #20]
 80082a0:	23c0      	movs	r3, #192	@ 0xc0
 80082a2:	011b      	lsls	r3, r3, #4
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d83c      	bhi.n	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80082a8:	697a      	ldr	r2, [r7, #20]
 80082aa:	2380      	movs	r3, #128	@ 0x80
 80082ac:	011b      	lsls	r3, r3, #4
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d020      	beq.n	80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	2380      	movs	r3, #128	@ 0x80
 80082b6:	011b      	lsls	r3, r3, #4
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d832      	bhi.n	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d005      	beq.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 80082c2:	697a      	ldr	r2, [r7, #20]
 80082c4:	2380      	movs	r3, #128	@ 0x80
 80082c6:	00db      	lsls	r3, r3, #3
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d005      	beq.n	80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
            break;
 80082cc:	e029      	b.n	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 80082ce:	f7ff fba9 	bl	8007a24 <HAL_RCC_GetPCLK1Freq>
 80082d2:	0003      	movs	r3, r0
 80082d4:	61fb      	str	r3, [r7, #28]
            break;
 80082d6:	e02b      	b.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
            frequency = HAL_RCC_GetSysClockFreq();
 80082d8:	f7ff fafe 	bl	80078d8 <HAL_RCC_GetSysClockFreq>
 80082dc:	0003      	movs	r3, r0
 80082de:	61fb      	str	r3, [r7, #28]
            break;
 80082e0:	e026      	b.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80082e2:	46c0      	nop			@ (mov r8, r8)
 80082e4:	40021000 	.word	0x40021000
 80082e8:	0001e848 	.word	0x0001e848
 80082ec:	0800fcf0 	.word	0x0800fcf0
 80082f0:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80082f4:	4bbb      	ldr	r3, [pc, #748]	@ (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	2380      	movs	r3, #128	@ 0x80
 80082fa:	00db      	lsls	r3, r3, #3
 80082fc:	401a      	ands	r2, r3
 80082fe:	2380      	movs	r3, #128	@ 0x80
 8008300:	00db      	lsls	r3, r3, #3
 8008302:	429a      	cmp	r2, r3
 8008304:	d110      	bne.n	8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
              frequency = HSI_VALUE;
 8008306:	4bb8      	ldr	r3, [pc, #736]	@ (80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8008308:	61fb      	str	r3, [r7, #28]
            break;
 800830a:	e00d      	b.n	8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800830c:	4ab5      	ldr	r2, [pc, #724]	@ (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800830e:	2390      	movs	r3, #144	@ 0x90
 8008310:	58d3      	ldr	r3, [r2, r3]
 8008312:	2202      	movs	r2, #2
 8008314:	4013      	ands	r3, r2
 8008316:	2b02      	cmp	r3, #2
 8008318:	d109      	bne.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
              frequency = LSE_VALUE;
 800831a:	2380      	movs	r3, #128	@ 0x80
 800831c:	021b      	lsls	r3, r3, #8
 800831e:	61fb      	str	r3, [r7, #28]
            break;
 8008320:	e005      	b.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
            break;
 8008322:	46c0      	nop			@ (mov r8, r8)
 8008324:	f000 fb69 	bl	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008328:	46c0      	nop			@ (mov r8, r8)
 800832a:	f000 fb66 	bl	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800832e:	46c0      	nop			@ (mov r8, r8)
        break;
 8008330:	f000 fb63 	bl	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 8008334:	4aab      	ldr	r2, [pc, #684]	@ (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8008336:	2388      	movs	r3, #136	@ 0x88
 8008338:	58d2      	ldr	r2, [r2, r3]
 800833a:	23c0      	movs	r3, #192	@ 0xc0
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	4013      	ands	r3, r2
 8008340:	617b      	str	r3, [r7, #20]
 8008342:	697a      	ldr	r2, [r7, #20]
 8008344:	23c0      	movs	r3, #192	@ 0xc0
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	429a      	cmp	r2, r3
 800834a:	d02d      	beq.n	80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
 800834c:	697a      	ldr	r2, [r7, #20]
 800834e:	23c0      	movs	r3, #192	@ 0xc0
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	429a      	cmp	r2, r3
 8008354:	d833      	bhi.n	80083be <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8008356:	697a      	ldr	r2, [r7, #20]
 8008358:	2380      	movs	r3, #128	@ 0x80
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	429a      	cmp	r2, r3
 800835e:	d017      	beq.n	8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8008360:	697a      	ldr	r2, [r7, #20]
 8008362:	2380      	movs	r3, #128	@ 0x80
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	429a      	cmp	r2, r3
 8008368:	d829      	bhi.n	80083be <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d005      	beq.n	800837c <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 8008370:	697a      	ldr	r2, [r7, #20]
 8008372:	2380      	movs	r3, #128	@ 0x80
 8008374:	005b      	lsls	r3, r3, #1
 8008376:	429a      	cmp	r2, r3
 8008378:	d005      	beq.n	8008386 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            break;
 800837a:	e020      	b.n	80083be <HAL_RCCEx_GetPeriphCLKFreq+0x446>
            frequency = HAL_RCC_GetPCLK1Freq();
 800837c:	f7ff fb52 	bl	8007a24 <HAL_RCC_GetPCLK1Freq>
 8008380:	0003      	movs	r3, r0
 8008382:	61fb      	str	r3, [r7, #28]
            break;
 8008384:	e022      	b.n	80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            frequency = HAL_RCC_GetSysClockFreq();
 8008386:	f7ff faa7 	bl	80078d8 <HAL_RCC_GetSysClockFreq>
 800838a:	0003      	movs	r3, r0
 800838c:	61fb      	str	r3, [r7, #28]
            break;
 800838e:	e01d      	b.n	80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008390:	4b94      	ldr	r3, [pc, #592]	@ (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	2380      	movs	r3, #128	@ 0x80
 8008396:	00db      	lsls	r3, r3, #3
 8008398:	401a      	ands	r2, r3
 800839a:	2380      	movs	r3, #128	@ 0x80
 800839c:	00db      	lsls	r3, r3, #3
 800839e:	429a      	cmp	r2, r3
 80083a0:	d110      	bne.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
              frequency = HSI_VALUE;
 80083a2:	4b91      	ldr	r3, [pc, #580]	@ (80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 80083a4:	61fb      	str	r3, [r7, #28]
            break;
 80083a6:	e00d      	b.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80083a8:	4a8e      	ldr	r2, [pc, #568]	@ (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80083aa:	2390      	movs	r3, #144	@ 0x90
 80083ac:	58d3      	ldr	r3, [r2, r3]
 80083ae:	2202      	movs	r2, #2
 80083b0:	4013      	ands	r3, r2
 80083b2:	2b02      	cmp	r3, #2
 80083b4:	d109      	bne.n	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x452>
              frequency = LSE_VALUE;
 80083b6:	2380      	movs	r3, #128	@ 0x80
 80083b8:	021b      	lsls	r3, r3, #8
 80083ba:	61fb      	str	r3, [r7, #28]
            break;
 80083bc:	e005      	b.n	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            break;
 80083be:	46c0      	nop			@ (mov r8, r8)
 80083c0:	f000 fb1b 	bl	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80083c4:	46c0      	nop			@ (mov r8, r8)
 80083c6:	f000 fb18 	bl	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80083ca:	46c0      	nop			@ (mov r8, r8)
        break;
 80083cc:	f000 fb15 	bl	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART3_SOURCE();
 80083d0:	4a84      	ldr	r2, [pc, #528]	@ (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80083d2:	2388      	movs	r3, #136	@ 0x88
 80083d4:	58d3      	ldr	r3, [r2, r3]
 80083d6:	22c0      	movs	r2, #192	@ 0xc0
 80083d8:	4013      	ands	r3, r2
 80083da:	617b      	str	r3, [r7, #20]
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	2bc0      	cmp	r3, #192	@ 0xc0
 80083e0:	d025      	beq.n	800842e <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	2bc0      	cmp	r3, #192	@ 0xc0
 80083e6:	d82d      	bhi.n	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	2b80      	cmp	r3, #128	@ 0x80
 80083ec:	d013      	beq.n	8008416 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	2b80      	cmp	r3, #128	@ 0x80
 80083f2:	d827      	bhi.n	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d003      	beq.n	8008402 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	2b40      	cmp	r3, #64	@ 0x40
 80083fe:	d005      	beq.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            break;
 8008400:	e020      	b.n	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 8008402:	f7ff fb0f 	bl	8007a24 <HAL_RCC_GetPCLK1Freq>
 8008406:	0003      	movs	r3, r0
 8008408:	61fb      	str	r3, [r7, #28]
            break;
 800840a:	e020      	b.n	800844e <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            frequency = HAL_RCC_GetSysClockFreq();
 800840c:	f7ff fa64 	bl	80078d8 <HAL_RCC_GetSysClockFreq>
 8008410:	0003      	movs	r3, r0
 8008412:	61fb      	str	r3, [r7, #28]
            break;
 8008414:	e01b      	b.n	800844e <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008416:	4b73      	ldr	r3, [pc, #460]	@ (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	2380      	movs	r3, #128	@ 0x80
 800841c:	00db      	lsls	r3, r3, #3
 800841e:	401a      	ands	r2, r3
 8008420:	2380      	movs	r3, #128	@ 0x80
 8008422:	00db      	lsls	r3, r3, #3
 8008424:	429a      	cmp	r2, r3
 8008426:	d10f      	bne.n	8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
              frequency = HSI_VALUE;
 8008428:	4b6f      	ldr	r3, [pc, #444]	@ (80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 800842a:	61fb      	str	r3, [r7, #28]
            break;
 800842c:	e00c      	b.n	8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800842e:	4a6d      	ldr	r2, [pc, #436]	@ (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8008430:	2390      	movs	r3, #144	@ 0x90
 8008432:	58d3      	ldr	r3, [r2, r3]
 8008434:	2202      	movs	r2, #2
 8008436:	4013      	ands	r3, r2
 8008438:	2b02      	cmp	r3, #2
 800843a:	d107      	bne.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
              frequency = LSE_VALUE;
 800843c:	2380      	movs	r3, #128	@ 0x80
 800843e:	021b      	lsls	r3, r3, #8
 8008440:	61fb      	str	r3, [r7, #28]
            break;
 8008442:	e003      	b.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
            break;
 8008444:	46c0      	nop			@ (mov r8, r8)
 8008446:	e2d8      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008448:	46c0      	nop			@ (mov r8, r8)
 800844a:	e2d6      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800844c:	46c0      	nop			@ (mov r8, r8)
        break;
 800844e:	e2d4      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008450:	4a64      	ldr	r2, [pc, #400]	@ (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8008452:	2388      	movs	r3, #136	@ 0x88
 8008454:	58d2      	ldr	r2, [r2, r3]
 8008456:	23c0      	movs	r3, #192	@ 0xc0
 8008458:	059b      	lsls	r3, r3, #22
 800845a:	4013      	ands	r3, r2
 800845c:	617b      	str	r3, [r7, #20]
 800845e:	697a      	ldr	r2, [r7, #20]
 8008460:	2380      	movs	r3, #128	@ 0x80
 8008462:	059b      	lsls	r3, r3, #22
 8008464:	429a      	cmp	r2, r3
 8008466:	d012      	beq.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008468:	697a      	ldr	r2, [r7, #20]
 800846a:	2380      	movs	r3, #128	@ 0x80
 800846c:	059b      	lsls	r3, r3, #22
 800846e:	429a      	cmp	r2, r3
 8008470:	d825      	bhi.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d005      	beq.n	8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 8008478:	697a      	ldr	r2, [r7, #20]
 800847a:	2380      	movs	r3, #128	@ 0x80
 800847c:	055b      	lsls	r3, r3, #21
 800847e:	429a      	cmp	r2, r3
 8008480:	d014      	beq.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x534>
            break;
 8008482:	e01c      	b.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0x546>
            frequency = HAL_RCC_GetSysClockFreq();
 8008484:	f7ff fa28 	bl	80078d8 <HAL_RCC_GetSysClockFreq>
 8008488:	0003      	movs	r3, r0
 800848a:	61fb      	str	r3, [r7, #28]
            break;
 800848c:	e018      	b.n	80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800848e:	4b55      	ldr	r3, [pc, #340]	@ (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	2380      	movs	r3, #128	@ 0x80
 8008494:	00db      	lsls	r3, r3, #3
 8008496:	401a      	ands	r2, r3
 8008498:	2380      	movs	r3, #128	@ 0x80
 800849a:	00db      	lsls	r3, r3, #3
 800849c:	429a      	cmp	r2, r3
 800849e:	d102      	bne.n	80084a6 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
              frequency = HSI_VALUE;
 80084a0:	4b51      	ldr	r3, [pc, #324]	@ (80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 80084a2:	61fb      	str	r3, [r7, #28]
            break;
 80084a4:	e00c      	b.n	80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
              frequency = 0U;
 80084a6:	2300      	movs	r3, #0
 80084a8:	61fb      	str	r3, [r7, #28]
            break;
 80084aa:	e009      	b.n	80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80084ac:	2408      	movs	r4, #8
 80084ae:	193b      	adds	r3, r7, r4
 80084b0:	0018      	movs	r0, r3
 80084b2:	f000 faad 	bl	8008a10 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_P_Frequency;
 80084b6:	193b      	adds	r3, r7, r4
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	61fb      	str	r3, [r7, #28]
            break;
 80084bc:	e000      	b.n	80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            break;
 80084be:	46c0      	nop			@ (mov r8, r8)
        break;
 80084c0:	e29b      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80084c2:	4a48      	ldr	r2, [pc, #288]	@ (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80084c4:	2388      	movs	r3, #136	@ 0x88
 80084c6:	58d2      	ldr	r2, [r2, r3]
 80084c8:	23c0      	movs	r3, #192	@ 0xc0
 80084ca:	019b      	lsls	r3, r3, #6
 80084cc:	4013      	ands	r3, r2
 80084ce:	617b      	str	r3, [r7, #20]
 80084d0:	697a      	ldr	r2, [r7, #20]
 80084d2:	2380      	movs	r3, #128	@ 0x80
 80084d4:	019b      	lsls	r3, r3, #6
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d017      	beq.n	800850a <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 80084da:	697a      	ldr	r2, [r7, #20]
 80084dc:	2380      	movs	r3, #128	@ 0x80
 80084de:	019b      	lsls	r3, r3, #6
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d81e      	bhi.n	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d005      	beq.n	80084f6 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 80084ea:	697a      	ldr	r2, [r7, #20]
 80084ec:	2380      	movs	r3, #128	@ 0x80
 80084ee:	015b      	lsls	r3, r3, #5
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d005      	beq.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
            break;
 80084f4:	e015      	b.n	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 80084f6:	f7ff fa95 	bl	8007a24 <HAL_RCC_GetPCLK1Freq>
 80084fa:	0003      	movs	r3, r0
 80084fc:	61fb      	str	r3, [r7, #28]
            break;
 80084fe:	e013      	b.n	8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            frequency = HAL_RCC_GetSysClockFreq();
 8008500:	f7ff f9ea 	bl	80078d8 <HAL_RCC_GetSysClockFreq>
 8008504:	0003      	movs	r3, r0
 8008506:	61fb      	str	r3, [r7, #28]
            break;
 8008508:	e00e      	b.n	8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800850a:	4b36      	ldr	r3, [pc, #216]	@ (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	2380      	movs	r3, #128	@ 0x80
 8008510:	00db      	lsls	r3, r3, #3
 8008512:	401a      	ands	r2, r3
 8008514:	2380      	movs	r3, #128	@ 0x80
 8008516:	00db      	lsls	r3, r3, #3
 8008518:	429a      	cmp	r2, r3
 800851a:	d104      	bne.n	8008526 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
              frequency = HSI_VALUE;
 800851c:	4b32      	ldr	r3, [pc, #200]	@ (80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 800851e:	61fb      	str	r3, [r7, #28]
            break;
 8008520:	e001      	b.n	8008526 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
            break;
 8008522:	46c0      	nop			@ (mov r8, r8)
 8008524:	e269      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008526:	46c0      	nop			@ (mov r8, r8)
        break;
 8008528:	e267      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800852a:	4a2e      	ldr	r2, [pc, #184]	@ (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800852c:	2388      	movs	r3, #136	@ 0x88
 800852e:	58d2      	ldr	r2, [r2, r3]
 8008530:	23c0      	movs	r3, #192	@ 0xc0
 8008532:	029b      	lsls	r3, r3, #10
 8008534:	4013      	ands	r3, r2
 8008536:	617b      	str	r3, [r7, #20]
 8008538:	697a      	ldr	r2, [r7, #20]
 800853a:	2380      	movs	r3, #128	@ 0x80
 800853c:	029b      	lsls	r3, r3, #10
 800853e:	429a      	cmp	r2, r3
 8008540:	d017      	beq.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
 8008542:	697a      	ldr	r2, [r7, #20]
 8008544:	2380      	movs	r3, #128	@ 0x80
 8008546:	029b      	lsls	r3, r3, #10
 8008548:	429a      	cmp	r2, r3
 800854a:	d81e      	bhi.n	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d005      	beq.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8008552:	697a      	ldr	r2, [r7, #20]
 8008554:	2380      	movs	r3, #128	@ 0x80
 8008556:	025b      	lsls	r3, r3, #9
 8008558:	429a      	cmp	r2, r3
 800855a:	d005      	beq.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
            break;
 800855c:	e015      	b.n	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
            frequency = HAL_RCC_GetPCLK1Freq();
 800855e:	f7ff fa61 	bl	8007a24 <HAL_RCC_GetPCLK1Freq>
 8008562:	0003      	movs	r3, r0
 8008564:	61fb      	str	r3, [r7, #28]
            break;
 8008566:	e013      	b.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HAL_RCC_GetSysClockFreq();
 8008568:	f7ff f9b6 	bl	80078d8 <HAL_RCC_GetSysClockFreq>
 800856c:	0003      	movs	r3, r0
 800856e:	61fb      	str	r3, [r7, #28]
            break;
 8008570:	e00e      	b.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008572:	4b1c      	ldr	r3, [pc, #112]	@ (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	2380      	movs	r3, #128	@ 0x80
 8008578:	00db      	lsls	r3, r3, #3
 800857a:	401a      	ands	r2, r3
 800857c:	2380      	movs	r3, #128	@ 0x80
 800857e:	00db      	lsls	r3, r3, #3
 8008580:	429a      	cmp	r2, r3
 8008582:	d104      	bne.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
              frequency = HSI_VALUE;
 8008584:	4b18      	ldr	r3, [pc, #96]	@ (80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8008586:	61fb      	str	r3, [r7, #28]
            break;
 8008588:	e001      	b.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
            break;
 800858a:	46c0      	nop			@ (mov r8, r8)
 800858c:	e235      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800858e:	46c0      	nop			@ (mov r8, r8)
        break;
 8008590:	e233      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008592:	4a14      	ldr	r2, [pc, #80]	@ (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8008594:	2388      	movs	r3, #136	@ 0x88
 8008596:	58d2      	ldr	r2, [r2, r3]
 8008598:	23c0      	movs	r3, #192	@ 0xc0
 800859a:	031b      	lsls	r3, r3, #12
 800859c:	4013      	ands	r3, r2
 800859e:	617b      	str	r3, [r7, #20]
 80085a0:	697a      	ldr	r2, [r7, #20]
 80085a2:	23c0      	movs	r3, #192	@ 0xc0
 80085a4:	031b      	lsls	r3, r3, #12
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d041      	beq.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 80085aa:	697a      	ldr	r2, [r7, #20]
 80085ac:	23c0      	movs	r3, #192	@ 0xc0
 80085ae:	031b      	lsls	r3, r3, #12
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d847      	bhi.n	8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 80085b4:	697a      	ldr	r2, [r7, #20]
 80085b6:	2380      	movs	r3, #128	@ 0x80
 80085b8:	031b      	lsls	r3, r3, #12
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d02b      	beq.n	8008616 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	2380      	movs	r3, #128	@ 0x80
 80085c2:	031b      	lsls	r3, r3, #12
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d83d      	bhi.n	8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d005      	beq.n	80085da <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 80085ce:	697a      	ldr	r2, [r7, #20]
 80085d0:	2380      	movs	r3, #128	@ 0x80
 80085d2:	02db      	lsls	r3, r3, #11
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d009      	beq.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            break;
 80085d8:	e034      	b.n	8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 80085da:	f7ff fa23 	bl	8007a24 <HAL_RCC_GetPCLK1Freq>
 80085de:	0003      	movs	r3, r0
 80085e0:	61fb      	str	r3, [r7, #28]
            break;
 80085e2:	e036      	b.n	8008652 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 80085e4:	40021000 	.word	0x40021000
 80085e8:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80085ec:	4abd      	ldr	r2, [pc, #756]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80085ee:	2394      	movs	r3, #148	@ 0x94
 80085f0:	58d3      	ldr	r3, [r2, r3]
 80085f2:	2202      	movs	r2, #2
 80085f4:	4013      	ands	r3, r2
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	d126      	bne.n	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80085fa:	4aba      	ldr	r2, [pc, #744]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80085fc:	2394      	movs	r3, #148	@ 0x94
 80085fe:	58d3      	ldr	r3, [r2, r3]
 8008600:	2204      	movs	r2, #4
 8008602:	4013      	ands	r3, r2
 8008604:	2b04      	cmp	r3, #4
 8008606:	d102      	bne.n	800860e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
                frequency = LSI_VALUE / 128U;
 8008608:	23fa      	movs	r3, #250	@ 0xfa
 800860a:	61fb      	str	r3, [r7, #28]
            break;
 800860c:	e01c      	b.n	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
                frequency = LSI_VALUE;
 800860e:	23fa      	movs	r3, #250	@ 0xfa
 8008610:	01db      	lsls	r3, r3, #7
 8008612:	61fb      	str	r3, [r7, #28]
            break;
 8008614:	e018      	b.n	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008616:	4bb3      	ldr	r3, [pc, #716]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	2380      	movs	r3, #128	@ 0x80
 800861c:	00db      	lsls	r3, r3, #3
 800861e:	401a      	ands	r2, r3
 8008620:	2380      	movs	r3, #128	@ 0x80
 8008622:	00db      	lsls	r3, r3, #3
 8008624:	429a      	cmp	r2, r3
 8008626:	d111      	bne.n	800864c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
              frequency = HSI_VALUE;
 8008628:	4baf      	ldr	r3, [pc, #700]	@ (80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 800862a:	61fb      	str	r3, [r7, #28]
            break;
 800862c:	e00e      	b.n	800864c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800862e:	4aad      	ldr	r2, [pc, #692]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008630:	2390      	movs	r3, #144	@ 0x90
 8008632:	58d3      	ldr	r3, [r2, r3]
 8008634:	2202      	movs	r2, #2
 8008636:	4013      	ands	r3, r2
 8008638:	2b02      	cmp	r3, #2
 800863a:	d109      	bne.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
              frequency = LSE_VALUE;
 800863c:	2380      	movs	r3, #128	@ 0x80
 800863e:	021b      	lsls	r3, r3, #8
 8008640:	61fb      	str	r3, [r7, #28]
            break;
 8008642:	e005      	b.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
            break;
 8008644:	46c0      	nop			@ (mov r8, r8)
 8008646:	e1d8      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008648:	46c0      	nop			@ (mov r8, r8)
 800864a:	e1d6      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800864c:	46c0      	nop			@ (mov r8, r8)
 800864e:	e1d4      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008650:	46c0      	nop			@ (mov r8, r8)
        break;
 8008652:	e1d2      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008654:	4aa3      	ldr	r2, [pc, #652]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008656:	2388      	movs	r3, #136	@ 0x88
 8008658:	58d2      	ldr	r2, [r2, r3]
 800865a:	23c0      	movs	r3, #192	@ 0xc0
 800865c:	039b      	lsls	r3, r3, #14
 800865e:	4013      	ands	r3, r2
 8008660:	617b      	str	r3, [r7, #20]
 8008662:	697a      	ldr	r2, [r7, #20]
 8008664:	23c0      	movs	r3, #192	@ 0xc0
 8008666:	039b      	lsls	r3, r3, #14
 8008668:	429a      	cmp	r2, r3
 800866a:	d03d      	beq.n	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800866c:	697a      	ldr	r2, [r7, #20]
 800866e:	23c0      	movs	r3, #192	@ 0xc0
 8008670:	039b      	lsls	r3, r3, #14
 8008672:	429a      	cmp	r2, r3
 8008674:	d843      	bhi.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8008676:	697a      	ldr	r2, [r7, #20]
 8008678:	2380      	movs	r3, #128	@ 0x80
 800867a:	039b      	lsls	r3, r3, #14
 800867c:	429a      	cmp	r2, r3
 800867e:	d027      	beq.n	80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
 8008680:	697a      	ldr	r2, [r7, #20]
 8008682:	2380      	movs	r3, #128	@ 0x80
 8008684:	039b      	lsls	r3, r3, #14
 8008686:	429a      	cmp	r2, r3
 8008688:	d839      	bhi.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d005      	beq.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008690:	697a      	ldr	r2, [r7, #20]
 8008692:	2380      	movs	r3, #128	@ 0x80
 8008694:	035b      	lsls	r3, r3, #13
 8008696:	429a      	cmp	r2, r3
 8008698:	d005      	beq.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
            break;
 800869a:	e030      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x786>
            frequency = HAL_RCC_GetPCLK1Freq();
 800869c:	f7ff f9c2 	bl	8007a24 <HAL_RCC_GetPCLK1Freq>
 80086a0:	0003      	movs	r3, r0
 80086a2:	61fb      	str	r3, [r7, #28]
            break;
 80086a4:	e032      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80086a6:	4a8f      	ldr	r2, [pc, #572]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80086a8:	2394      	movs	r3, #148	@ 0x94
 80086aa:	58d3      	ldr	r3, [r2, r3]
 80086ac:	2202      	movs	r2, #2
 80086ae:	4013      	ands	r3, r2
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	d126      	bne.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80086b4:	4a8b      	ldr	r2, [pc, #556]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80086b6:	2394      	movs	r3, #148	@ 0x94
 80086b8:	58d3      	ldr	r3, [r2, r3]
 80086ba:	2204      	movs	r2, #4
 80086bc:	4013      	ands	r3, r2
 80086be:	2b04      	cmp	r3, #4
 80086c0:	d102      	bne.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
                frequency = LSI_VALUE / 128U;
 80086c2:	23fa      	movs	r3, #250	@ 0xfa
 80086c4:	61fb      	str	r3, [r7, #28]
            break;
 80086c6:	e01c      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
                frequency = LSI_VALUE;
 80086c8:	23fa      	movs	r3, #250	@ 0xfa
 80086ca:	01db      	lsls	r3, r3, #7
 80086cc:	61fb      	str	r3, [r7, #28]
            break;
 80086ce:	e018      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80086d0:	4b84      	ldr	r3, [pc, #528]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	2380      	movs	r3, #128	@ 0x80
 80086d6:	00db      	lsls	r3, r3, #3
 80086d8:	401a      	ands	r2, r3
 80086da:	2380      	movs	r3, #128	@ 0x80
 80086dc:	00db      	lsls	r3, r3, #3
 80086de:	429a      	cmp	r2, r3
 80086e0:	d111      	bne.n	8008706 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
              frequency = HSI_VALUE;
 80086e2:	4b81      	ldr	r3, [pc, #516]	@ (80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 80086e4:	61fb      	str	r3, [r7, #28]
            break;
 80086e6:	e00e      	b.n	8008706 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80086e8:	4a7e      	ldr	r2, [pc, #504]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80086ea:	2390      	movs	r3, #144	@ 0x90
 80086ec:	58d3      	ldr	r3, [r2, r3]
 80086ee:	2202      	movs	r2, #2
 80086f0:	4013      	ands	r3, r2
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	d109      	bne.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x792>
              frequency = LSE_VALUE;
 80086f6:	2380      	movs	r3, #128	@ 0x80
 80086f8:	021b      	lsls	r3, r3, #8
 80086fa:	61fb      	str	r3, [r7, #28]
            break;
 80086fc:	e005      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x792>
            break;
 80086fe:	46c0      	nop			@ (mov r8, r8)
 8008700:	e17b      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008702:	46c0      	nop			@ (mov r8, r8)
 8008704:	e179      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008706:	46c0      	nop			@ (mov r8, r8)
 8008708:	e177      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800870a:	46c0      	nop			@ (mov r8, r8)
        break;
 800870c:	e175      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800870e:	4a75      	ldr	r2, [pc, #468]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008710:	2388      	movs	r3, #136	@ 0x88
 8008712:	58d2      	ldr	r2, [r2, r3]
 8008714:	23c0      	movs	r3, #192	@ 0xc0
 8008716:	041b      	lsls	r3, r3, #16
 8008718:	4013      	ands	r3, r2
 800871a:	617b      	str	r3, [r7, #20]
 800871c:	697a      	ldr	r2, [r7, #20]
 800871e:	23c0      	movs	r3, #192	@ 0xc0
 8008720:	041b      	lsls	r3, r3, #16
 8008722:	429a      	cmp	r2, r3
 8008724:	d03d      	beq.n	80087a2 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 8008726:	697a      	ldr	r2, [r7, #20]
 8008728:	23c0      	movs	r3, #192	@ 0xc0
 800872a:	041b      	lsls	r3, r3, #16
 800872c:	429a      	cmp	r2, r3
 800872e:	d843      	bhi.n	80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8008730:	697a      	ldr	r2, [r7, #20]
 8008732:	2380      	movs	r3, #128	@ 0x80
 8008734:	041b      	lsls	r3, r3, #16
 8008736:	429a      	cmp	r2, r3
 8008738:	d027      	beq.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 800873a:	697a      	ldr	r2, [r7, #20]
 800873c:	2380      	movs	r3, #128	@ 0x80
 800873e:	041b      	lsls	r3, r3, #16
 8008740:	429a      	cmp	r2, r3
 8008742:	d839      	bhi.n	80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d005      	beq.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 800874a:	697a      	ldr	r2, [r7, #20]
 800874c:	2380      	movs	r3, #128	@ 0x80
 800874e:	03db      	lsls	r3, r3, #15
 8008750:	429a      	cmp	r2, r3
 8008752:	d005      	beq.n	8008760 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
            break;
 8008754:	e030      	b.n	80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
            frequency = HAL_RCC_GetPCLK1Freq();
 8008756:	f7ff f965 	bl	8007a24 <HAL_RCC_GetPCLK1Freq>
 800875a:	0003      	movs	r3, r0
 800875c:	61fb      	str	r3, [r7, #28]
            break;
 800875e:	e032      	b.n	80087c6 <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008760:	4a60      	ldr	r2, [pc, #384]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008762:	2394      	movs	r3, #148	@ 0x94
 8008764:	58d3      	ldr	r3, [r2, r3]
 8008766:	2202      	movs	r2, #2
 8008768:	4013      	ands	r3, r2
 800876a:	2b02      	cmp	r3, #2
 800876c:	d126      	bne.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 800876e:	4a5d      	ldr	r2, [pc, #372]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008770:	2394      	movs	r3, #148	@ 0x94
 8008772:	58d3      	ldr	r3, [r2, r3]
 8008774:	2204      	movs	r2, #4
 8008776:	4013      	ands	r3, r2
 8008778:	2b04      	cmp	r3, #4
 800877a:	d102      	bne.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
                frequency = LSI_VALUE / 128U;
 800877c:	23fa      	movs	r3, #250	@ 0xfa
 800877e:	61fb      	str	r3, [r7, #28]
            break;
 8008780:	e01c      	b.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
                frequency = LSI_VALUE;
 8008782:	23fa      	movs	r3, #250	@ 0xfa
 8008784:	01db      	lsls	r3, r3, #7
 8008786:	61fb      	str	r3, [r7, #28]
            break;
 8008788:	e018      	b.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800878a:	4b56      	ldr	r3, [pc, #344]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	2380      	movs	r3, #128	@ 0x80
 8008790:	00db      	lsls	r3, r3, #3
 8008792:	401a      	ands	r2, r3
 8008794:	2380      	movs	r3, #128	@ 0x80
 8008796:	00db      	lsls	r3, r3, #3
 8008798:	429a      	cmp	r2, r3
 800879a:	d111      	bne.n	80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
              frequency = HSI_VALUE;
 800879c:	4b52      	ldr	r3, [pc, #328]	@ (80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 800879e:	61fb      	str	r3, [r7, #28]
            break;
 80087a0:	e00e      	b.n	80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80087a2:	4a50      	ldr	r2, [pc, #320]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80087a4:	2390      	movs	r3, #144	@ 0x90
 80087a6:	58d3      	ldr	r3, [r2, r3]
 80087a8:	2202      	movs	r2, #2
 80087aa:	4013      	ands	r3, r2
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	d109      	bne.n	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
              frequency = LSE_VALUE;
 80087b0:	2380      	movs	r3, #128	@ 0x80
 80087b2:	021b      	lsls	r3, r3, #8
 80087b4:	61fb      	str	r3, [r7, #28]
            break;
 80087b6:	e005      	b.n	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
            break;
 80087b8:	46c0      	nop			@ (mov r8, r8)
 80087ba:	e11e      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80087bc:	46c0      	nop			@ (mov r8, r8)
 80087be:	e11c      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80087c0:	46c0      	nop			@ (mov r8, r8)
 80087c2:	e11a      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80087c4:	46c0      	nop			@ (mov r8, r8)
        break;
 80087c6:	e118      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 80087c8:	4a46      	ldr	r2, [pc, #280]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80087ca:	2388      	movs	r3, #136	@ 0x88
 80087cc:	58d2      	ldr	r2, [r2, r3]
 80087ce:	2380      	movs	r3, #128	@ 0x80
 80087d0:	045b      	lsls	r3, r3, #17
 80087d2:	4013      	ands	r3, r2
 80087d4:	617b      	str	r3, [r7, #20]
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d005      	beq.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 80087dc:	697a      	ldr	r2, [r7, #20]
 80087de:	2380      	movs	r3, #128	@ 0x80
 80087e0:	045b      	lsls	r3, r3, #17
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d011      	beq.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x892>
            break;
 80087e6:	e019      	b.n	800881c <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 80087e8:	4b3e      	ldr	r3, [pc, #248]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80087ea:	689a      	ldr	r2, [r3, #8]
 80087ec:	23e0      	movs	r3, #224	@ 0xe0
 80087ee:	01db      	lsls	r3, r3, #7
 80087f0:	4013      	ands	r3, r2
 80087f2:	d104      	bne.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0x886>
              frequency = HAL_RCC_GetPCLK1Freq();
 80087f4:	f7ff f916 	bl	8007a24 <HAL_RCC_GetPCLK1Freq>
 80087f8:	0003      	movs	r3, r0
 80087fa:	61fb      	str	r3, [r7, #28]
            break;
 80087fc:	e00e      	b.n	800881c <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 80087fe:	f7ff f911 	bl	8007a24 <HAL_RCC_GetPCLK1Freq>
 8008802:	0003      	movs	r3, r0
 8008804:	005b      	lsls	r3, r3, #1
 8008806:	61fb      	str	r3, [r7, #28]
            break;
 8008808:	e008      	b.n	800881c <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 800880a:	2408      	movs	r4, #8
 800880c:	193b      	adds	r3, r7, r4
 800880e:	0018      	movs	r0, r3
 8008810:	f000 f8fe 	bl	8008a10 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8008814:	193b      	adds	r3, r7, r4
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	61fb      	str	r3, [r7, #28]
            break;
 800881a:	46c0      	nop			@ (mov r8, r8)
        break;
 800881c:	e0ed      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 800881e:	4a31      	ldr	r2, [pc, #196]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008820:	2388      	movs	r3, #136	@ 0x88
 8008822:	58d2      	ldr	r2, [r2, r3]
 8008824:	2380      	movs	r3, #128	@ 0x80
 8008826:	049b      	lsls	r3, r3, #18
 8008828:	4013      	ands	r3, r2
 800882a:	617b      	str	r3, [r7, #20]
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d005      	beq.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8008832:	697a      	ldr	r2, [r7, #20]
 8008834:	2380      	movs	r3, #128	@ 0x80
 8008836:	049b      	lsls	r3, r3, #18
 8008838:	429a      	cmp	r2, r3
 800883a:	d011      	beq.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
            break;
 800883c:	e019      	b.n	8008872 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 800883e:	4b29      	ldr	r3, [pc, #164]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008840:	689a      	ldr	r2, [r3, #8]
 8008842:	23e0      	movs	r3, #224	@ 0xe0
 8008844:	01db      	lsls	r3, r3, #7
 8008846:	4013      	ands	r3, r2
 8008848:	d104      	bne.n	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
              frequency = HAL_RCC_GetPCLK1Freq();
 800884a:	f7ff f8eb 	bl	8007a24 <HAL_RCC_GetPCLK1Freq>
 800884e:	0003      	movs	r3, r0
 8008850:	61fb      	str	r3, [r7, #28]
            break;
 8008852:	e00e      	b.n	8008872 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8008854:	f7ff f8e6 	bl	8007a24 <HAL_RCC_GetPCLK1Freq>
 8008858:	0003      	movs	r3, r0
 800885a:	005b      	lsls	r3, r3, #1
 800885c:	61fb      	str	r3, [r7, #28]
            break;
 800885e:	e008      	b.n	8008872 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8008860:	2408      	movs	r4, #8
 8008862:	193b      	adds	r3, r7, r4
 8008864:	0018      	movs	r0, r3
 8008866:	f000 f8d3 	bl	8008a10 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 800886a:	193b      	adds	r3, r7, r4
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	61fb      	str	r3, [r7, #28]
            break;
 8008870:	46c0      	nop			@ (mov r8, r8)
        break;
 8008872:	e0c2      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8008874:	4a1b      	ldr	r2, [pc, #108]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008876:	2388      	movs	r3, #136	@ 0x88
 8008878:	58d2      	ldr	r2, [r2, r3]
 800887a:	23c0      	movs	r3, #192	@ 0xc0
 800887c:	051b      	lsls	r3, r3, #20
 800887e:	4013      	ands	r3, r2
 8008880:	617b      	str	r3, [r7, #20]
 8008882:	697a      	ldr	r2, [r7, #20]
 8008884:	23c0      	movs	r3, #192	@ 0xc0
 8008886:	051b      	lsls	r3, r3, #20
 8008888:	429a      	cmp	r2, r3
 800888a:	d017      	beq.n	80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 800888c:	697a      	ldr	r2, [r7, #20]
 800888e:	23c0      	movs	r3, #192	@ 0xc0
 8008890:	051b      	lsls	r3, r3, #20
 8008892:	429a      	cmp	r2, r3
 8008894:	d84a      	bhi.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8008896:	697a      	ldr	r2, [r7, #20]
 8008898:	2380      	movs	r3, #128	@ 0x80
 800889a:	051b      	lsls	r3, r3, #20
 800889c:	429a      	cmp	r2, r3
 800889e:	d039      	beq.n	8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 80088a0:	697a      	ldr	r2, [r7, #20]
 80088a2:	2380      	movs	r3, #128	@ 0x80
 80088a4:	051b      	lsls	r3, r3, #20
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d840      	bhi.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d03a      	beq.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0x9ae>
 80088b0:	697a      	ldr	r2, [r7, #20]
 80088b2:	2380      	movs	r3, #128	@ 0x80
 80088b4:	04db      	lsls	r3, r3, #19
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d003      	beq.n	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
            break;
 80088ba:	e037      	b.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
            frequency = HSI48_VALUE;
 80088bc:	4b0b      	ldr	r3, [pc, #44]	@ (80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x974>)
 80088be:	61fb      	str	r3, [r7, #28]
            break;
 80088c0:	e037      	b.n	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80088c2:	4b08      	ldr	r3, [pc, #32]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2202      	movs	r2, #2
 80088c8:	4013      	ands	r3, r2
 80088ca:	2b02      	cmp	r3, #2
 80088cc:	d130      	bne.n	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 80088ce:	4b05      	ldr	r3, [pc, #20]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2208      	movs	r2, #8
 80088d4:	4013      	ands	r3, r2
 80088d6:	d00b      	beq.n	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 80088d8:	4b02      	ldr	r3, [pc, #8]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	091b      	lsrs	r3, r3, #4
 80088de:	220f      	movs	r2, #15
 80088e0:	4013      	ands	r3, r2
 80088e2:	e00b      	b.n	80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x984>
 80088e4:	40021000 	.word	0x40021000
 80088e8:	00f42400 	.word	0x00f42400
 80088ec:	02dc6c00 	.word	0x02dc6c00
 80088f0:	4a44      	ldr	r2, [pc, #272]	@ (8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80088f2:	2394      	movs	r3, #148	@ 0x94
 80088f4:	58d3      	ldr	r3, [r2, r3]
 80088f6:	0a1b      	lsrs	r3, r3, #8
 80088f8:	220f      	movs	r2, #15
 80088fa:	4013      	ands	r3, r2
 80088fc:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	2b0b      	cmp	r3, #11
 8008902:	d901      	bls.n	8008908 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
                msirange = 11U;
 8008904:	230b      	movs	r3, #11
 8008906:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 8008908:	4b3f      	ldr	r3, [pc, #252]	@ (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 800890a:	69ba      	ldr	r2, [r7, #24]
 800890c:	0092      	lsls	r2, r2, #2
 800890e:	58d3      	ldr	r3, [r2, r3]
 8008910:	61fb      	str	r3, [r7, #28]
            break;
 8008912:	e00d      	b.n	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8008914:	2408      	movs	r4, #8
 8008916:	193b      	adds	r3, r7, r4
 8008918:	0018      	movs	r0, r3
 800891a:	f000 f879 	bl	8008a10 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 800891e:	193b      	adds	r3, r7, r4
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	61fb      	str	r3, [r7, #28]
            break;
 8008924:	e005      	b.n	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            frequency = 0U;
 8008926:	2300      	movs	r3, #0
 8008928:	61fb      	str	r3, [r7, #28]
            break;
 800892a:	e002      	b.n	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            break;
 800892c:	46c0      	nop			@ (mov r8, r8)
 800892e:	e064      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008930:	46c0      	nop			@ (mov r8, r8)
        break;
 8008932:	e062      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008934:	4a33      	ldr	r2, [pc, #204]	@ (8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8008936:	2388      	movs	r3, #136	@ 0x88
 8008938:	58d2      	ldr	r2, [r2, r3]
 800893a:	23c0      	movs	r3, #192	@ 0xc0
 800893c:	051b      	lsls	r3, r3, #20
 800893e:	4013      	ands	r3, r2
 8008940:	617b      	str	r3, [r7, #20]
 8008942:	697a      	ldr	r2, [r7, #20]
 8008944:	23c0      	movs	r3, #192	@ 0xc0
 8008946:	051b      	lsls	r3, r3, #20
 8008948:	429a      	cmp	r2, r3
 800894a:	d017      	beq.n	800897c <HAL_RCCEx_GetPeriphCLKFreq+0xa04>
 800894c:	697a      	ldr	r2, [r7, #20]
 800894e:	23c0      	movs	r3, #192	@ 0xc0
 8008950:	051b      	lsls	r3, r3, #20
 8008952:	429a      	cmp	r2, r3
 8008954:	d844      	bhi.n	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8008956:	697a      	ldr	r2, [r7, #20]
 8008958:	2380      	movs	r3, #128	@ 0x80
 800895a:	051b      	lsls	r3, r3, #20
 800895c:	429a      	cmp	r2, r3
 800895e:	d033      	beq.n	80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8008960:	697a      	ldr	r2, [r7, #20]
 8008962:	2380      	movs	r3, #128	@ 0x80
 8008964:	051b      	lsls	r3, r3, #20
 8008966:	429a      	cmp	r2, r3
 8008968:	d83a      	bhi.n	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d034      	beq.n	80089da <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8008970:	697a      	ldr	r2, [r7, #20]
 8008972:	2380      	movs	r3, #128	@ 0x80
 8008974:	04db      	lsls	r3, r3, #19
 8008976:	429a      	cmp	r2, r3
 8008978:	d003      	beq.n	8008982 <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
            break;
 800897a:	e031      	b.n	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            frequency = HSI48_VALUE;
 800897c:	4b23      	ldr	r3, [pc, #140]	@ (8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 800897e:	61fb      	str	r3, [r7, #28]
            break;
 8008980:	e031      	b.n	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8008982:	4b20      	ldr	r3, [pc, #128]	@ (8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2202      	movs	r2, #2
 8008988:	4013      	ands	r3, r2
 800898a:	2b02      	cmp	r3, #2
 800898c:	d12a      	bne.n	80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 800898e:	4b1d      	ldr	r3, [pc, #116]	@ (8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2208      	movs	r2, #8
 8008994:	4013      	ands	r3, r2
 8008996:	d005      	beq.n	80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa2c>
 8008998:	4b1a      	ldr	r3, [pc, #104]	@ (8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	091b      	lsrs	r3, r3, #4
 800899e:	220f      	movs	r2, #15
 80089a0:	4013      	ands	r3, r2
 80089a2:	e005      	b.n	80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 80089a4:	4a17      	ldr	r2, [pc, #92]	@ (8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80089a6:	2394      	movs	r3, #148	@ 0x94
 80089a8:	58d3      	ldr	r3, [r2, r3]
 80089aa:	0a1b      	lsrs	r3, r3, #8
 80089ac:	220f      	movs	r2, #15
 80089ae:	4013      	ands	r3, r2
 80089b0:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	2b0b      	cmp	r3, #11
 80089b6:	d901      	bls.n	80089bc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
                msirange = 11U;
 80089b8:	230b      	movs	r3, #11
 80089ba:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 80089bc:	4b12      	ldr	r3, [pc, #72]	@ (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 80089be:	69ba      	ldr	r2, [r7, #24]
 80089c0:	0092      	lsls	r2, r2, #2
 80089c2:	58d3      	ldr	r3, [r2, r3]
 80089c4:	61fb      	str	r3, [r7, #28]
            break;
 80089c6:	e00d      	b.n	80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80089c8:	2408      	movs	r4, #8
 80089ca:	193b      	adds	r3, r7, r4
 80089cc:	0018      	movs	r0, r3
 80089ce:	f000 f81f 	bl	8008a10 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 80089d2:	193b      	adds	r3, r7, r4
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	61fb      	str	r3, [r7, #28]
            break;
 80089d8:	e005      	b.n	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = 0U;
 80089da:	2300      	movs	r3, #0
 80089dc:	61fb      	str	r3, [r7, #28]
            break;
 80089de:	e002      	b.n	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            break;
 80089e0:	46c0      	nop			@ (mov r8, r8)
 80089e2:	e00a      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80089e4:	46c0      	nop			@ (mov r8, r8)
        break;
 80089e6:	e008      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80089e8:	46c0      	nop			@ (mov r8, r8)
 80089ea:	e006      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80089ec:	46c0      	nop			@ (mov r8, r8)
 80089ee:	e004      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80089f0:	46c0      	nop			@ (mov r8, r8)
 80089f2:	e002      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80089f4:	46c0      	nop			@ (mov r8, r8)
 80089f6:	e000      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80089f8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return (frequency);
 80089fa:	69fb      	ldr	r3, [r7, #28]
}
 80089fc:	0018      	movs	r0, r3
 80089fe:	46bd      	mov	sp, r7
 8008a00:	b009      	add	sp, #36	@ 0x24
 8008a02:	bd90      	pop	{r4, r7, pc}
 8008a04:	40021000 	.word	0x40021000
 8008a08:	0800fcc0 	.word	0x0800fcc0
 8008a0c:	02dc6c00 	.word	0x02dc6c00

08008a10 <HAL_RCCEx_GetPLLClockFreq>:
  * @param  PLL_Clocks structure.
  * @retval None
  */

void HAL_RCCEx_GetPLLClockFreq(PLL_ClocksTypeDef *PLL_Clocks)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b088      	sub	sp, #32
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  uint32_t pllm;
  uint32_t plln;
  uint32_t pllvco;
  uint32_t msirange;

  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008a18:	4b58      	ldr	r3, [pc, #352]	@ (8008b7c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	0a1b      	lsrs	r3, r3, #8
 8008a1e:	227f      	movs	r2, #127	@ 0x7f
 8008a20:	4013      	ands	r3, r2
 8008a22:	617b      	str	r3, [r7, #20]
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008a24:	4b55      	ldr	r3, [pc, #340]	@ (8008b7c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	2203      	movs	r2, #3
 8008a2a:	4013      	ands	r3, r2
 8008a2c:	613b      	str	r3, [r7, #16]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8008a2e:	4b53      	ldr	r3, [pc, #332]	@ (8008b7c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	091b      	lsrs	r3, r3, #4
 8008a34:	2207      	movs	r2, #7
 8008a36:	4013      	ands	r3, r2
 8008a38:	3301      	adds	r3, #1
 8008a3a:	60fb      	str	r3, [r7, #12]
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8008a3c:	4b4f      	ldr	r3, [pc, #316]	@ (8008b7c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2208      	movs	r2, #8
 8008a42:	4013      	ands	r3, r2
 8008a44:	d005      	beq.n	8008a52 <HAL_RCCEx_GetPLLClockFreq+0x42>
 8008a46:	4b4d      	ldr	r3, [pc, #308]	@ (8008b7c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	091b      	lsrs	r3, r3, #4
 8008a4c:	220f      	movs	r2, #15
 8008a4e:	4013      	ands	r3, r2
 8008a50:	e005      	b.n	8008a5e <HAL_RCCEx_GetPLLClockFreq+0x4e>
 8008a52:	4a4a      	ldr	r2, [pc, #296]	@ (8008b7c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008a54:	2394      	movs	r3, #148	@ 0x94
 8008a56:	58d3      	ldr	r3, [r2, r3]
 8008a58:	0a1b      	lsrs	r3, r3, #8
 8008a5a:	220f      	movs	r2, #15
 8008a5c:	4013      	ands	r3, r2
 8008a5e:	61bb      	str	r3, [r7, #24]
  if (msirange > 11U)
 8008a60:	69bb      	ldr	r3, [r7, #24]
 8008a62:	2b0b      	cmp	r3, #11
 8008a64:	d901      	bls.n	8008a6a <HAL_RCCEx_GetPLLClockFreq+0x5a>
  {
    msirange = 11U;
 8008a66:	230b      	movs	r3, #11
 8008a68:	61bb      	str	r3, [r7, #24]
  }
  switch (pllsource)
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	2b03      	cmp	r3, #3
 8008a6e:	d020      	beq.n	8008ab2 <HAL_RCCEx_GetPLLClockFreq+0xa2>
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	2b03      	cmp	r3, #3
 8008a74:	d827      	bhi.n	8008ac6 <HAL_RCCEx_GetPLLClockFreq+0xb6>
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d00c      	beq.n	8008a96 <HAL_RCCEx_GetPLLClockFreq+0x86>
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	2b02      	cmp	r3, #2
 8008a80:	d121      	bne.n	8008ac6 <HAL_RCCEx_GetPLLClockFreq+0xb6>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * plln;
 8008a82:	68f9      	ldr	r1, [r7, #12]
 8008a84:	483e      	ldr	r0, [pc, #248]	@ (8008b80 <HAL_RCCEx_GetPLLClockFreq+0x170>)
 8008a86:	f7f7 fb5b 	bl	8000140 <__udivsi3>
 8008a8a:	0003      	movs	r3, r0
 8008a8c:	001a      	movs	r2, r3
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	4353      	muls	r3, r2
 8008a92:	61fb      	str	r3, [r7, #28]
      break;
 8008a94:	e025      	b.n	8008ae2 <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8008a96:	4b3b      	ldr	r3, [pc, #236]	@ (8008b84 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8008a98:	69ba      	ldr	r2, [r7, #24]
 8008a9a:	0092      	lsls	r2, r2, #2
 8008a9c:	58d3      	ldr	r3, [r2, r3]
 8008a9e:	68f9      	ldr	r1, [r7, #12]
 8008aa0:	0018      	movs	r0, r3
 8008aa2:	f7f7 fb4d 	bl	8000140 <__udivsi3>
 8008aa6:	0003      	movs	r3, r0
 8008aa8:	001a      	movs	r2, r3
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	4353      	muls	r3, r2
 8008aae:	61fb      	str	r3, [r7, #28]
      break;
 8008ab0:	e017      	b.n	8008ae2 <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * plln;
 8008ab2:	68f9      	ldr	r1, [r7, #12]
 8008ab4:	4834      	ldr	r0, [pc, #208]	@ (8008b88 <HAL_RCCEx_GetPLLClockFreq+0x178>)
 8008ab6:	f7f7 fb43 	bl	8000140 <__udivsi3>
 8008aba:	0003      	movs	r3, r0
 8008abc:	001a      	movs	r2, r3
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	4353      	muls	r3, r2
 8008ac2:	61fb      	str	r3, [r7, #28]
      break;
 8008ac4:	e00d      	b.n	8008ae2 <HAL_RCCEx_GetPLLClockFreq+0xd2>

    default:
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8008ac6:	4b2f      	ldr	r3, [pc, #188]	@ (8008b84 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8008ac8:	69ba      	ldr	r2, [r7, #24]
 8008aca:	0092      	lsls	r2, r2, #2
 8008acc:	58d3      	ldr	r3, [r2, r3]
 8008ace:	68f9      	ldr	r1, [r7, #12]
 8008ad0:	0018      	movs	r0, r3
 8008ad2:	f7f7 fb35 	bl	8000140 <__udivsi3>
 8008ad6:	0003      	movs	r3, r0
 8008ad8:	001a      	movs	r2, r3
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	4353      	muls	r3, r2
 8008ade:	61fb      	str	r3, [r7, #28]
      break;
 8008ae0:	46c0      	nop			@ (mov r8, r8)
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 8008ae2:	4b26      	ldr	r3, [pc, #152]	@ (8008b7c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008ae4:	68da      	ldr	r2, [r3, #12]
 8008ae6:	2380      	movs	r3, #128	@ 0x80
 8008ae8:	025b      	lsls	r3, r3, #9
 8008aea:	4013      	ands	r3, r2
 8008aec:	d00e      	beq.n	8008b0c <HAL_RCCEx_GetPLLClockFreq+0xfc>
  {
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8008aee:	4b23      	ldr	r3, [pc, #140]	@ (8008b7c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008af0:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLP_Pos) + 1U));
 8008af2:	0c5b      	lsrs	r3, r3, #17
 8008af4:	221f      	movs	r2, #31
 8008af6:	4013      	ands	r3, r2
 8008af8:	3301      	adds	r3, #1
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8008afa:	0019      	movs	r1, r3
 8008afc:	69f8      	ldr	r0, [r7, #28]
 8008afe:	f7f7 fb1f 	bl	8000140 <__udivsi3>
 8008b02:	0003      	movs	r3, r0
 8008b04:	001a      	movs	r2, r3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	601a      	str	r2, [r3, #0]
 8008b0a:	e002      	b.n	8008b12 <HAL_RCCEx_GetPLLClockFreq+0x102>
  }
  else
  {
    PLL_Clocks->PLL_P_Frequency = 0;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVQ) != 0U)
 8008b12:	4b1a      	ldr	r3, [pc, #104]	@ (8008b7c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008b14:	68da      	ldr	r2, [r3, #12]
 8008b16:	2380      	movs	r3, #128	@ 0x80
 8008b18:	045b      	lsls	r3, r3, #17
 8008b1a:	4013      	ands	r3, r2
 8008b1c:	d00e      	beq.n	8008b3c <HAL_RCCEx_GetPLLClockFreq+0x12c>
  {
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8008b1e:	4b17      	ldr	r3, [pc, #92]	@ (8008b7c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008b20:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLQ_Pos) + 1U));
 8008b22:	0e5b      	lsrs	r3, r3, #25
 8008b24:	2207      	movs	r2, #7
 8008b26:	4013      	ands	r3, r2
 8008b28:	3301      	adds	r3, #1
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8008b2a:	0019      	movs	r1, r3
 8008b2c:	69f8      	ldr	r0, [r7, #28]
 8008b2e:	f7f7 fb07 	bl	8000140 <__udivsi3>
 8008b32:	0003      	movs	r3, r0
 8008b34:	001a      	movs	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	605a      	str	r2, [r3, #4]
 8008b3a:	e002      	b.n	8008b42 <HAL_RCCEx_GetPLLClockFreq+0x132>
  }
  else
  {
    PLL_Clocks->PLL_Q_Frequency = 0;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVR) != 0U)
 8008b42:	4b0e      	ldr	r3, [pc, #56]	@ (8008b7c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008b44:	68da      	ldr	r2, [r3, #12]
 8008b46:	2380      	movs	r3, #128	@ 0x80
 8008b48:	055b      	lsls	r3, r3, #21
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	d00e      	beq.n	8008b6c <HAL_RCCEx_GetPLLClockFreq+0x15c>
  {
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8008b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8008b7c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008b50:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLR_Pos) + 1U));
 8008b52:	0f5b      	lsrs	r3, r3, #29
 8008b54:	2207      	movs	r2, #7
 8008b56:	4013      	ands	r3, r2
 8008b58:	3301      	adds	r3, #1
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8008b5a:	0019      	movs	r1, r3
 8008b5c:	69f8      	ldr	r0, [r7, #28]
 8008b5e:	f7f7 faef 	bl	8000140 <__udivsi3>
 8008b62:	0003      	movs	r3, r0
 8008b64:	001a      	movs	r2, r3
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL_Clocks->PLL_R_Frequency = 0;
  }
}
 8008b6a:	e002      	b.n	8008b72 <HAL_RCCEx_GetPLLClockFreq+0x162>
    PLL_Clocks->PLL_R_Frequency = 0;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	609a      	str	r2, [r3, #8]
}
 8008b72:	46c0      	nop			@ (mov r8, r8)
 8008b74:	46bd      	mov	sp, r7
 8008b76:	b008      	add	sp, #32
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	46c0      	nop			@ (mov r8, r8)
 8008b7c:	40021000 	.word	0x40021000
 8008b80:	00f42400 	.word	0x00f42400
 8008b84:	0800fcc0 	.word	0x0800fcc0
 8008b88:	003d0900 	.word	0x003d0900

08008b8c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008b94:	210f      	movs	r1, #15
 8008b96:	187b      	adds	r3, r7, r1
 8008b98:	2201      	movs	r2, #1
 8008b9a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d100      	bne.n	8008ba4 <HAL_RTC_Init+0x18>
 8008ba2:	e08b      	b.n	8008cbc <HAL_RTC_Init+0x130>
  {
    status = HAL_OK;
 8008ba4:	187b      	adds	r3, r7, r1
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	701a      	strb	r2, [r3, #0]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	222d      	movs	r2, #45	@ 0x2d
 8008bae:	5c9b      	ldrb	r3, [r3, r2]
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d107      	bne.n	8008bc6 <HAL_RTC_Init+0x3a>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	222c      	movs	r2, #44	@ 0x2c
 8008bba:	2100      	movs	r1, #0
 8008bbc:	5499      	strb	r1, [r3, r2]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	0018      	movs	r0, r3
 8008bc2:	f7fc fe0f 	bl	80057e4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	222d      	movs	r2, #45	@ 0x2d
 8008bca:	2102      	movs	r1, #2
 8008bcc:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008bce:	4b3f      	ldr	r3, [pc, #252]	@ (8008ccc <HAL_RTC_Init+0x140>)
 8008bd0:	22ca      	movs	r2, #202	@ 0xca
 8008bd2:	625a      	str	r2, [r3, #36]	@ 0x24
 8008bd4:	4b3d      	ldr	r3, [pc, #244]	@ (8008ccc <HAL_RTC_Init+0x140>)
 8008bd6:	2253      	movs	r2, #83	@ 0x53
 8008bd8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	0018      	movs	r0, r3
 8008bde:	f000 f8a1 	bl	8008d24 <RTC_EnterInitMode>
 8008be2:	1e03      	subs	r3, r0, #0
 8008be4:	d00b      	beq.n	8008bfe <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008be6:	4b39      	ldr	r3, [pc, #228]	@ (8008ccc <HAL_RTC_Init+0x140>)
 8008be8:	22ff      	movs	r2, #255	@ 0xff
 8008bea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	222d      	movs	r2, #45	@ 0x2d
 8008bf0:	2104      	movs	r1, #4
 8008bf2:	5499      	strb	r1, [r3, r2]

      status = HAL_ERROR;
 8008bf4:	230f      	movs	r3, #15
 8008bf6:	18fb      	adds	r3, r7, r3
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	701a      	strb	r2, [r3, #0]
 8008bfc:	e05e      	b.n	8008cbc <HAL_RTC_Init+0x130>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8008bfe:	4b33      	ldr	r3, [pc, #204]	@ (8008ccc <HAL_RTC_Init+0x140>)
 8008c00:	699a      	ldr	r2, [r3, #24]
 8008c02:	4b32      	ldr	r3, [pc, #200]	@ (8008ccc <HAL_RTC_Init+0x140>)
 8008c04:	4932      	ldr	r1, [pc, #200]	@ (8008cd0 <HAL_RTC_Init+0x144>)
 8008c06:	400a      	ands	r2, r1
 8008c08:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8008c0a:	4b30      	ldr	r3, [pc, #192]	@ (8008ccc <HAL_RTC_Init+0x140>)
 8008c0c:	6999      	ldr	r1, [r3, #24]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	685a      	ldr	r2, [r3, #4]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	691b      	ldr	r3, [r3, #16]
 8008c16:	431a      	orrs	r2, r3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	699b      	ldr	r3, [r3, #24]
 8008c1c:	431a      	orrs	r2, r3
 8008c1e:	4b2b      	ldr	r3, [pc, #172]	@ (8008ccc <HAL_RTC_Init+0x140>)
 8008c20:	430a      	orrs	r2, r1
 8008c22:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	68d9      	ldr	r1, [r3, #12]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	041a      	lsls	r2, r3, #16
 8008c2e:	4b27      	ldr	r3, [pc, #156]	@ (8008ccc <HAL_RTC_Init+0x140>)
 8008c30:	430a      	orrs	r2, r1
 8008c32:	611a      	str	r2, [r3, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8008c34:	4b25      	ldr	r3, [pc, #148]	@ (8008ccc <HAL_RTC_Init+0x140>)
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	4a26      	ldr	r2, [pc, #152]	@ (8008cd4 <HAL_RTC_Init+0x148>)
 8008c3a:	4013      	ands	r3, r2
 8008c3c:	0019      	movs	r1, r3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c46:	431a      	orrs	r2, r3
 8008c48:	4b20      	ldr	r3, [pc, #128]	@ (8008ccc <HAL_RTC_Init+0x140>)
 8008c4a:	430a      	orrs	r2, r1
 8008c4c:	60da      	str	r2, [r3, #12]

      /* Exit Initialization mode */
      CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008c4e:	4b1f      	ldr	r3, [pc, #124]	@ (8008ccc <HAL_RTC_Init+0x140>)
 8008c50:	68da      	ldr	r2, [r3, #12]
 8008c52:	4b1e      	ldr	r3, [pc, #120]	@ (8008ccc <HAL_RTC_Init+0x140>)
 8008c54:	2180      	movs	r1, #128	@ 0x80
 8008c56:	438a      	bics	r2, r1
 8008c58:	60da      	str	r2, [r3, #12]

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008c5a:	4b1c      	ldr	r3, [pc, #112]	@ (8008ccc <HAL_RTC_Init+0x140>)
 8008c5c:	699b      	ldr	r3, [r3, #24]
 8008c5e:	2220      	movs	r2, #32
 8008c60:	4013      	ands	r3, r2
 8008c62:	d110      	bne.n	8008c86 <HAL_RTC_Init+0xfa>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	0018      	movs	r0, r3
 8008c68:	f000 f836 	bl	8008cd8 <HAL_RTC_WaitForSynchro>
 8008c6c:	1e03      	subs	r3, r0, #0
 8008c6e:	d00a      	beq.n	8008c86 <HAL_RTC_Init+0xfa>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c70:	4b16      	ldr	r3, [pc, #88]	@ (8008ccc <HAL_RTC_Init+0x140>)
 8008c72:	22ff      	movs	r2, #255	@ 0xff
 8008c74:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	222d      	movs	r2, #45	@ 0x2d
 8008c7a:	2104      	movs	r1, #4
 8008c7c:	5499      	strb	r1, [r3, r2]
          status = HAL_ERROR;
 8008c7e:	230f      	movs	r3, #15
 8008c80:	18fb      	adds	r3, r7, r3
 8008c82:	2201      	movs	r2, #1
 8008c84:	701a      	strb	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 8008c86:	230f      	movs	r3, #15
 8008c88:	18fb      	adds	r3, r7, r3
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d115      	bne.n	8008cbc <HAL_RTC_Init+0x130>
      {
        MODIFY_REG(RTC->CR, \
 8008c90:	4b0e      	ldr	r3, [pc, #56]	@ (8008ccc <HAL_RTC_Init+0x140>)
 8008c92:	699b      	ldr	r3, [r3, #24]
 8008c94:	00db      	lsls	r3, r3, #3
 8008c96:	08d9      	lsrs	r1, r3, #3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6a1a      	ldr	r2, [r3, #32]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	69db      	ldr	r3, [r3, #28]
 8008ca0:	431a      	orrs	r2, r3
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	695b      	ldr	r3, [r3, #20]
 8008ca6:	431a      	orrs	r2, r3
 8008ca8:	4b08      	ldr	r3, [pc, #32]	@ (8008ccc <HAL_RTC_Init+0x140>)
 8008caa:	430a      	orrs	r2, r1
 8008cac:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008cae:	4b07      	ldr	r3, [pc, #28]	@ (8008ccc <HAL_RTC_Init+0x140>)
 8008cb0:	22ff      	movs	r2, #255	@ 0xff
 8008cb2:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	222d      	movs	r2, #45	@ 0x2d
 8008cb8:	2101      	movs	r1, #1
 8008cba:	5499      	strb	r1, [r3, r2]
      }
    }
  }

  return status;
 8008cbc:	230f      	movs	r3, #15
 8008cbe:	18fb      	adds	r3, r7, r3
 8008cc0:	781b      	ldrb	r3, [r3, #0]
}
 8008cc2:	0018      	movs	r0, r3
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	b004      	add	sp, #16
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	46c0      	nop			@ (mov r8, r8)
 8008ccc:	40002800 	.word	0x40002800
 8008cd0:	fb8fffbf 	.word	0xfb8fffbf
 8008cd4:	ffffe0ff 	.word	0xffffe0ff

08008cd8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(const RTC_HandleTypeDef *hrtc)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8008ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8008d20 <HAL_RTC_WaitForSynchro+0x48>)
 8008ce2:	68da      	ldr	r2, [r3, #12]
 8008ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8008d20 <HAL_RTC_WaitForSynchro+0x48>)
 8008ce6:	2120      	movs	r1, #32
 8008ce8:	438a      	bics	r2, r1
 8008cea:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008cec:	f7fd f8b0 	bl	8005e50 <HAL_GetTick>
 8008cf0:	0003      	movs	r3, r0
 8008cf2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008cf4:	e00a      	b.n	8008d0c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008cf6:	f7fd f8ab 	bl	8005e50 <HAL_GetTick>
 8008cfa:	0002      	movs	r2, r0
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	1ad2      	subs	r2, r2, r3
 8008d00:	23fa      	movs	r3, #250	@ 0xfa
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d901      	bls.n	8008d0c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8008d08:	2303      	movs	r3, #3
 8008d0a:	e005      	b.n	8008d18 <HAL_RTC_WaitForSynchro+0x40>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008d0c:	4b04      	ldr	r3, [pc, #16]	@ (8008d20 <HAL_RTC_WaitForSynchro+0x48>)
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	2220      	movs	r2, #32
 8008d12:	4013      	ands	r3, r2
 8008d14:	d0ef      	beq.n	8008cf6 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8008d16:	2300      	movs	r3, #0
}
 8008d18:	0018      	movs	r0, r3
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	b004      	add	sp, #16
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	40002800 	.word	0x40002800

08008d24 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(const RTC_HandleTypeDef *hrtc)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008d2c:	4b12      	ldr	r3, [pc, #72]	@ (8008d78 <RTC_EnterInitMode+0x54>)
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	2240      	movs	r2, #64	@ 0x40
 8008d32:	4013      	ands	r3, r2
 8008d34:	d11a      	bne.n	8008d6c <RTC_EnterInitMode+0x48>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008d36:	4b10      	ldr	r3, [pc, #64]	@ (8008d78 <RTC_EnterInitMode+0x54>)
 8008d38:	68da      	ldr	r2, [r3, #12]
 8008d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8008d78 <RTC_EnterInitMode+0x54>)
 8008d3c:	2180      	movs	r1, #128	@ 0x80
 8008d3e:	430a      	orrs	r2, r1
 8008d40:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008d42:	f7fd f885 	bl	8005e50 <HAL_GetTick>
 8008d46:	0003      	movs	r3, r0
 8008d48:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008d4a:	e00a      	b.n	8008d62 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008d4c:	f7fd f880 	bl	8005e50 <HAL_GetTick>
 8008d50:	0002      	movs	r2, r0
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	1ad2      	subs	r2, r2, r3
 8008d56:	23fa      	movs	r3, #250	@ 0xfa
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d901      	bls.n	8008d62 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	e005      	b.n	8008d6e <RTC_EnterInitMode+0x4a>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008d62:	4b05      	ldr	r3, [pc, #20]	@ (8008d78 <RTC_EnterInitMode+0x54>)
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	2240      	movs	r2, #64	@ 0x40
 8008d68:	4013      	ands	r3, r2
 8008d6a:	d0ef      	beq.n	8008d4c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	0018      	movs	r0, r3
 8008d70:	46bd      	mov	sp, r7
 8008d72:	b004      	add	sp, #16
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	46c0      	nop			@ (mov r8, r8)
 8008d78:	40002800 	.word	0x40002800

08008d7c <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b086      	sub	sp, #24
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	222c      	movs	r2, #44	@ 0x2c
 8008d8c:	5c9b      	ldrb	r3, [r3, r2]
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d101      	bne.n	8008d96 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8008d92:	2302      	movs	r3, #2
 8008d94:	e06c      	b.n	8008e70 <HAL_RTCEx_SetWakeUpTimer+0xf4>
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	222c      	movs	r2, #44	@ 0x2c
 8008d9a:	2101      	movs	r1, #1
 8008d9c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	222d      	movs	r2, #45	@ 0x2d
 8008da2:	2102      	movs	r1, #2
 8008da4:	5499      	strb	r1, [r3, r2]

  /* Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if (READ_BIT(RTC->CR, RTC_CR_WUTE) != 0U)
 8008da6:	4b34      	ldr	r3, [pc, #208]	@ (8008e78 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008da8:	699a      	ldr	r2, [r3, #24]
 8008daa:	2380      	movs	r3, #128	@ 0x80
 8008dac:	00db      	lsls	r3, r3, #3
 8008dae:	4013      	ands	r3, r2
 8008db0:	d01c      	beq.n	8008dec <HAL_RTCEx_SetWakeUpTimer+0x70>
  {
    tickstart = HAL_GetTick();
 8008db2:	f7fd f84d 	bl	8005e50 <HAL_GetTick>
 8008db6:	0003      	movs	r3, r0
 8008db8:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 8008dba:	e012      	b.n	8008de2 <HAL_RTCEx_SetWakeUpTimer+0x66>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008dbc:	f7fd f848 	bl	8005e50 <HAL_GetTick>
 8008dc0:	0002      	movs	r2, r0
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	1ad2      	subs	r2, r2, r3
 8008dc6:	23fa      	movs	r3, #250	@ 0xfa
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d909      	bls.n	8008de2 <HAL_RTCEx_SetWakeUpTimer+0x66>
      {
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	222d      	movs	r2, #45	@ 0x2d
 8008dd2:	2103      	movs	r1, #3
 8008dd4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	222c      	movs	r2, #44	@ 0x2c
 8008dda:	2100      	movs	r1, #0
 8008ddc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008dde:	2303      	movs	r3, #3
 8008de0:	e046      	b.n	8008e70 <HAL_RTCEx_SetWakeUpTimer+0xf4>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 8008de2:	4b25      	ldr	r3, [pc, #148]	@ (8008e78 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	2204      	movs	r2, #4
 8008de8:	4013      	ands	r3, r2
 8008dea:	d1e7      	bne.n	8008dbc <HAL_RTCEx_SetWakeUpTimer+0x40>
      }
    }
  }

  /* Disable Wake Up timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8008dec:	4b22      	ldr	r3, [pc, #136]	@ (8008e78 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008dee:	699a      	ldr	r2, [r3, #24]
 8008df0:	4b21      	ldr	r3, [pc, #132]	@ (8008e78 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008df2:	4922      	ldr	r1, [pc, #136]	@ (8008e7c <HAL_RTCEx_SetWakeUpTimer+0x100>)
 8008df4:	400a      	ands	r2, r1
 8008df6:	619a      	str	r2, [r3, #24]

  tickstart = HAL_GetTick();
 8008df8:	f7fd f82a 	bl	8005e50 <HAL_GetTick>
 8008dfc:	0003      	movs	r3, r0
 8008dfe:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8008e00:	e012      	b.n	8008e28 <HAL_RTCEx_SetWakeUpTimer+0xac>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008e02:	f7fd f825 	bl	8005e50 <HAL_GetTick>
 8008e06:	0002      	movs	r2, r0
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	1ad2      	subs	r2, r2, r3
 8008e0c:	23fa      	movs	r3, #250	@ 0xfa
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d909      	bls.n	8008e28 <HAL_RTCEx_SetWakeUpTimer+0xac>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	222d      	movs	r2, #45	@ 0x2d
 8008e18:	2103      	movs	r1, #3
 8008e1a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	222c      	movs	r2, #44	@ 0x2c
 8008e20:	2100      	movs	r1, #0
 8008e22:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8008e24:	2303      	movs	r3, #3
 8008e26:	e023      	b.n	8008e70 <HAL_RTCEx_SetWakeUpTimer+0xf4>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8008e28:	4b13      	ldr	r3, [pc, #76]	@ (8008e78 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	2204      	movs	r2, #4
 8008e2e:	4013      	ands	r3, r2
 8008e30:	d0e7      	beq.n	8008e02 <HAL_RTCEx_SetWakeUpTimer+0x86>
    }
  }

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8008e32:	4b11      	ldr	r3, [pc, #68]	@ (8008e78 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008e34:	699b      	ldr	r3, [r3, #24]
 8008e36:	2207      	movs	r2, #7
 8008e38:	4393      	bics	r3, r2
 8008e3a:	0019      	movs	r1, r3
 8008e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8008e78 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	430a      	orrs	r2, r1
 8008e42:	619a      	str	r2, [r3, #24]

  /* Configure the Wakeup Timer counter */
  WRITE_REG(RTC->WUTR, (uint32_t)WakeUpCounter);
 8008e44:	4b0c      	ldr	r3, [pc, #48]	@ (8008e78 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008e46:	68ba      	ldr	r2, [r7, #8]
 8008e48:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  SET_BIT(RTC->CR, RTC_CR_WUTE);
 8008e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8008e78 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008e4c:	699a      	ldr	r2, [r3, #24]
 8008e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8008e78 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008e50:	2180      	movs	r1, #128	@ 0x80
 8008e52:	00c9      	lsls	r1, r1, #3
 8008e54:	430a      	orrs	r2, r1
 8008e56:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e58:	4b07      	ldr	r3, [pc, #28]	@ (8008e78 <HAL_RTCEx_SetWakeUpTimer+0xfc>)
 8008e5a:	22ff      	movs	r2, #255	@ 0xff
 8008e5c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	222d      	movs	r2, #45	@ 0x2d
 8008e62:	2101      	movs	r1, #1
 8008e64:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	222c      	movs	r2, #44	@ 0x2c
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008e6e:	2300      	movs	r3, #0
}
 8008e70:	0018      	movs	r0, r3
 8008e72:	46bd      	mov	sp, r7
 8008e74:	b006      	add	sp, #24
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	40002800 	.word	0x40002800
 8008e7c:	fffffbff 	.word	0xfffffbff

08008e80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d101      	bne.n	8008e92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e0a0      	b.n	8008fd4 <HAL_SPI_Init+0x154>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d109      	bne.n	8008eae <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	685a      	ldr	r2, [r3, #4]
 8008e9e:	2382      	movs	r3, #130	@ 0x82
 8008ea0:	005b      	lsls	r3, r3, #1
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d009      	beq.n	8008eba <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	61da      	str	r2, [r3, #28]
 8008eac:	e005      	b.n	8008eba <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	225d      	movs	r2, #93	@ 0x5d
 8008ec4:	5c9b      	ldrb	r3, [r3, r2]
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d107      	bne.n	8008edc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	225c      	movs	r2, #92	@ 0x5c
 8008ed0:	2100      	movs	r1, #0
 8008ed2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	0018      	movs	r0, r3
 8008ed8:	f7fc fd02 	bl	80058e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	225d      	movs	r2, #93	@ 0x5d
 8008ee0:	2102      	movs	r1, #2
 8008ee2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2140      	movs	r1, #64	@ 0x40
 8008ef0:	438a      	bics	r2, r1
 8008ef2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	68da      	ldr	r2, [r3, #12]
 8008ef8:	23e0      	movs	r3, #224	@ 0xe0
 8008efa:	00db      	lsls	r3, r3, #3
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d902      	bls.n	8008f06 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008f00:	2300      	movs	r3, #0
 8008f02:	60fb      	str	r3, [r7, #12]
 8008f04:	e002      	b.n	8008f0c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008f06:	2380      	movs	r3, #128	@ 0x80
 8008f08:	015b      	lsls	r3, r3, #5
 8008f0a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	68da      	ldr	r2, [r3, #12]
 8008f10:	23f0      	movs	r3, #240	@ 0xf0
 8008f12:	011b      	lsls	r3, r3, #4
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d008      	beq.n	8008f2a <HAL_SPI_Init+0xaa>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	68da      	ldr	r2, [r3, #12]
 8008f1c:	23e0      	movs	r3, #224	@ 0xe0
 8008f1e:	00db      	lsls	r3, r3, #3
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d002      	beq.n	8008f2a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	685a      	ldr	r2, [r3, #4]
 8008f2e:	2382      	movs	r3, #130	@ 0x82
 8008f30:	005b      	lsls	r3, r3, #1
 8008f32:	401a      	ands	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6899      	ldr	r1, [r3, #8]
 8008f38:	2384      	movs	r3, #132	@ 0x84
 8008f3a:	021b      	lsls	r3, r3, #8
 8008f3c:	400b      	ands	r3, r1
 8008f3e:	431a      	orrs	r2, r3
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	691b      	ldr	r3, [r3, #16]
 8008f44:	2102      	movs	r1, #2
 8008f46:	400b      	ands	r3, r1
 8008f48:	431a      	orrs	r2, r3
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	695b      	ldr	r3, [r3, #20]
 8008f4e:	2101      	movs	r1, #1
 8008f50:	400b      	ands	r3, r1
 8008f52:	431a      	orrs	r2, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6999      	ldr	r1, [r3, #24]
 8008f58:	2380      	movs	r3, #128	@ 0x80
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	400b      	ands	r3, r1
 8008f5e:	431a      	orrs	r2, r3
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	69db      	ldr	r3, [r3, #28]
 8008f64:	2138      	movs	r1, #56	@ 0x38
 8008f66:	400b      	ands	r3, r1
 8008f68:	431a      	orrs	r2, r3
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6a1b      	ldr	r3, [r3, #32]
 8008f6e:	2180      	movs	r1, #128	@ 0x80
 8008f70:	400b      	ands	r3, r1
 8008f72:	431a      	orrs	r2, r3
 8008f74:	0011      	movs	r1, r2
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008f7a:	2380      	movs	r3, #128	@ 0x80
 8008f7c:	019b      	lsls	r3, r3, #6
 8008f7e:	401a      	ands	r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	430a      	orrs	r2, r1
 8008f86:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	699b      	ldr	r3, [r3, #24]
 8008f8c:	0c1b      	lsrs	r3, r3, #16
 8008f8e:	2204      	movs	r2, #4
 8008f90:	401a      	ands	r2, r3
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f96:	2110      	movs	r1, #16
 8008f98:	400b      	ands	r3, r1
 8008f9a:	431a      	orrs	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fa0:	2108      	movs	r1, #8
 8008fa2:	400b      	ands	r3, r1
 8008fa4:	431a      	orrs	r2, r3
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	68d9      	ldr	r1, [r3, #12]
 8008faa:	23f0      	movs	r3, #240	@ 0xf0
 8008fac:	011b      	lsls	r3, r3, #4
 8008fae:	400b      	ands	r3, r1
 8008fb0:	431a      	orrs	r2, r3
 8008fb2:	0011      	movs	r1, r2
 8008fb4:	68fa      	ldr	r2, [r7, #12]
 8008fb6:	2380      	movs	r3, #128	@ 0x80
 8008fb8:	015b      	lsls	r3, r3, #5
 8008fba:	401a      	ands	r2, r3
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	430a      	orrs	r2, r1
 8008fc2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	225d      	movs	r2, #93	@ 0x5d
 8008fce:	2101      	movs	r1, #1
 8008fd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008fd2:	2300      	movs	r3, #0
}
 8008fd4:	0018      	movs	r0, r3
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	b004      	add	sp, #16
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d101      	bne.n	8008fee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	e046      	b.n	800907c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2288      	movs	r2, #136	@ 0x88
 8008ff2:	589b      	ldr	r3, [r3, r2]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d107      	bne.n	8009008 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2284      	movs	r2, #132	@ 0x84
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	0018      	movs	r0, r3
 8009004:	f7fc fe2a 	bl	8005c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2288      	movs	r2, #136	@ 0x88
 800900c:	2124      	movs	r1, #36	@ 0x24
 800900e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2101      	movs	r1, #1
 800901c:	438a      	bics	r2, r1
 800901e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009024:	2b00      	cmp	r3, #0
 8009026:	d003      	beq.n	8009030 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	0018      	movs	r0, r3
 800902c:	f000 f9fe 	bl	800942c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	0018      	movs	r0, r3
 8009034:	f000 f828 	bl	8009088 <UART_SetConfig>
 8009038:	0003      	movs	r3, r0
 800903a:	2b01      	cmp	r3, #1
 800903c:	d101      	bne.n	8009042 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800903e:	2301      	movs	r3, #1
 8009040:	e01c      	b.n	800907c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	685a      	ldr	r2, [r3, #4]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	490d      	ldr	r1, [pc, #52]	@ (8009084 <HAL_UART_Init+0xa8>)
 800904e:	400a      	ands	r2, r1
 8009050:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	689a      	ldr	r2, [r3, #8]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	212a      	movs	r1, #42	@ 0x2a
 800905e:	438a      	bics	r2, r1
 8009060:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2101      	movs	r1, #1
 800906e:	430a      	orrs	r2, r1
 8009070:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	0018      	movs	r0, r3
 8009076:	f000 fa8d 	bl	8009594 <UART_CheckIdleState>
 800907a:	0003      	movs	r3, r0
}
 800907c:	0018      	movs	r0, r3
 800907e:	46bd      	mov	sp, r7
 8009080:	b002      	add	sp, #8
 8009082:	bd80      	pop	{r7, pc}
 8009084:	ffffb7ff 	.word	0xffffb7ff

08009088 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009088:	b5b0      	push	{r4, r5, r7, lr}
 800908a:	b092      	sub	sp, #72	@ 0x48
 800908c:	af00      	add	r7, sp, #0
 800908e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009090:	231f      	movs	r3, #31
 8009092:	2220      	movs	r2, #32
 8009094:	189b      	adds	r3, r3, r2
 8009096:	19db      	adds	r3, r3, r7
 8009098:	2200      	movs	r2, #0
 800909a:	701a      	strb	r2, [r3, #0]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800909c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4ac8      	ldr	r2, [pc, #800]	@ (80093c4 <UART_SetConfig+0x33c>)
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80090a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a4:	689a      	ldr	r2, [r3, #8]
 80090a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a8:	691b      	ldr	r3, [r3, #16]
 80090aa:	431a      	orrs	r2, r3
 80090ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ae:	695b      	ldr	r3, [r3, #20]
 80090b0:	431a      	orrs	r2, r3
 80090b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b4:	69db      	ldr	r3, [r3, #28]
 80090b6:	4313      	orrs	r3, r2
 80090b8:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4ac1      	ldr	r2, [pc, #772]	@ (80093c8 <UART_SetConfig+0x340>)
 80090c2:	4013      	ands	r3, r2
 80090c4:	0019      	movs	r1, r3
 80090c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090cc:	430b      	orrs	r3, r1
 80090ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	4abd      	ldr	r2, [pc, #756]	@ (80093cc <UART_SetConfig+0x344>)
 80090d8:	4013      	ands	r3, r2
 80090da:	0018      	movs	r0, r3
 80090dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090de:	68d9      	ldr	r1, [r3, #12]
 80090e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	0003      	movs	r3, r0
 80090e6:	430b      	orrs	r3, r1
 80090e8:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80090ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ec:	699b      	ldr	r3, [r3, #24]
 80090ee:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80090f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4ab3      	ldr	r2, [pc, #716]	@ (80093c4 <UART_SetConfig+0x33c>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d00e      	beq.n	8009118 <UART_SetConfig+0x90>
 80090fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4ab4      	ldr	r2, [pc, #720]	@ (80093d0 <UART_SetConfig+0x348>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d009      	beq.n	8009118 <UART_SetConfig+0x90>
 8009104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4ab2      	ldr	r2, [pc, #712]	@ (80093d4 <UART_SetConfig+0x34c>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d004      	beq.n	8009118 <UART_SetConfig+0x90>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800910e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009110:	6a1b      	ldr	r3, [r3, #32]
 8009112:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009114:	4313      	orrs	r3, r2
 8009116:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	4aae      	ldr	r2, [pc, #696]	@ (80093d8 <UART_SetConfig+0x350>)
 8009120:	4013      	ands	r3, r2
 8009122:	0019      	movs	r1, r3
 8009124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800912a:	430b      	orrs	r3, r1
 800912c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800912e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009134:	220f      	movs	r2, #15
 8009136:	4393      	bics	r3, r2
 8009138:	0018      	movs	r0, r3
 800913a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800913c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800913e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	0003      	movs	r3, r0
 8009144:	430b      	orrs	r3, r1
 8009146:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4aa3      	ldr	r2, [pc, #652]	@ (80093dc <UART_SetConfig+0x354>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d102      	bne.n	8009158 <UART_SetConfig+0xd0>
 8009152:	2301      	movs	r3, #1
 8009154:	643b      	str	r3, [r7, #64]	@ 0x40
 8009156:	e033      	b.n	80091c0 <UART_SetConfig+0x138>
 8009158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4aa0      	ldr	r2, [pc, #640]	@ (80093e0 <UART_SetConfig+0x358>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d102      	bne.n	8009168 <UART_SetConfig+0xe0>
 8009162:	2302      	movs	r3, #2
 8009164:	643b      	str	r3, [r7, #64]	@ 0x40
 8009166:	e02b      	b.n	80091c0 <UART_SetConfig+0x138>
 8009168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a9d      	ldr	r2, [pc, #628]	@ (80093e4 <UART_SetConfig+0x35c>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d103      	bne.n	800917a <UART_SetConfig+0xf2>
 8009172:	2380      	movs	r3, #128	@ 0x80
 8009174:	025b      	lsls	r3, r3, #9
 8009176:	643b      	str	r3, [r7, #64]	@ 0x40
 8009178:	e022      	b.n	80091c0 <UART_SetConfig+0x138>
 800917a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a9a      	ldr	r2, [pc, #616]	@ (80093e8 <UART_SetConfig+0x360>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d103      	bne.n	800918c <UART_SetConfig+0x104>
 8009184:	2380      	movs	r3, #128	@ 0x80
 8009186:	029b      	lsls	r3, r3, #10
 8009188:	643b      	str	r3, [r7, #64]	@ 0x40
 800918a:	e019      	b.n	80091c0 <UART_SetConfig+0x138>
 800918c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a8c      	ldr	r2, [pc, #560]	@ (80093c4 <UART_SetConfig+0x33c>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d102      	bne.n	800919c <UART_SetConfig+0x114>
 8009196:	2310      	movs	r3, #16
 8009198:	643b      	str	r3, [r7, #64]	@ 0x40
 800919a:	e011      	b.n	80091c0 <UART_SetConfig+0x138>
 800919c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a8b      	ldr	r2, [pc, #556]	@ (80093d0 <UART_SetConfig+0x348>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d102      	bne.n	80091ac <UART_SetConfig+0x124>
 80091a6:	2308      	movs	r3, #8
 80091a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80091aa:	e009      	b.n	80091c0 <UART_SetConfig+0x138>
 80091ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a88      	ldr	r2, [pc, #544]	@ (80093d4 <UART_SetConfig+0x34c>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d102      	bne.n	80091bc <UART_SetConfig+0x134>
 80091b6:	2304      	movs	r3, #4
 80091b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80091ba:	e001      	b.n	80091c0 <UART_SetConfig+0x138>
 80091bc:	2300      	movs	r3, #0
 80091be:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80091c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a7f      	ldr	r2, [pc, #508]	@ (80093c4 <UART_SetConfig+0x33c>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d00a      	beq.n	80091e0 <UART_SetConfig+0x158>
 80091ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a80      	ldr	r2, [pc, #512]	@ (80093d0 <UART_SetConfig+0x348>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d005      	beq.n	80091e0 <UART_SetConfig+0x158>
 80091d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a7e      	ldr	r2, [pc, #504]	@ (80093d4 <UART_SetConfig+0x34c>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d000      	beq.n	80091e0 <UART_SetConfig+0x158>
 80091de:	e06f      	b.n	80092c0 <UART_SetConfig+0x238>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80091e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091e2:	0018      	movs	r0, r3
 80091e4:	f7fe fec8 	bl	8007f78 <HAL_RCCEx_GetPeriphCLKFreq>
 80091e8:	0003      	movs	r3, r0
 80091ea:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* If proper clock source reported */
    if (pclk != 0U)
 80091ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d100      	bne.n	80091f4 <UART_SetConfig+0x16c>
 80091f2:	e103      	b.n	80093fc <UART_SetConfig+0x374>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80091f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80091f8:	4b7c      	ldr	r3, [pc, #496]	@ (80093ec <UART_SetConfig+0x364>)
 80091fa:	0052      	lsls	r2, r2, #1
 80091fc:	5ad3      	ldrh	r3, [r2, r3]
 80091fe:	0019      	movs	r1, r3
 8009200:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009202:	f7f6 ff9d 	bl	8000140 <__udivsi3>
 8009206:	0003      	movs	r3, r0
 8009208:	62fb      	str	r3, [r7, #44]	@ 0x2c

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800920a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800920c:	685a      	ldr	r2, [r3, #4]
 800920e:	0013      	movs	r3, r2
 8009210:	005b      	lsls	r3, r3, #1
 8009212:	189b      	adds	r3, r3, r2
 8009214:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009216:	429a      	cmp	r2, r3
 8009218:	d305      	bcc.n	8009226 <UART_SetConfig+0x19e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800921a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009220:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009222:	429a      	cmp	r2, r3
 8009224:	d906      	bls.n	8009234 <UART_SetConfig+0x1ac>
      {
        ret = HAL_ERROR;
 8009226:	231f      	movs	r3, #31
 8009228:	2220      	movs	r2, #32
 800922a:	189b      	adds	r3, r3, r2
 800922c:	19db      	adds	r3, r3, r7
 800922e:	2201      	movs	r2, #1
 8009230:	701a      	strb	r2, [r3, #0]
 8009232:	e044      	b.n	80092be <UART_SetConfig+0x236>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009236:	61bb      	str	r3, [r7, #24]
 8009238:	2300      	movs	r3, #0
 800923a:	61fb      	str	r3, [r7, #28]
 800923c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800923e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009240:	4b6a      	ldr	r3, [pc, #424]	@ (80093ec <UART_SetConfig+0x364>)
 8009242:	0052      	lsls	r2, r2, #1
 8009244:	5ad3      	ldrh	r3, [r2, r3]
 8009246:	613b      	str	r3, [r7, #16]
 8009248:	2300      	movs	r3, #0
 800924a:	617b      	str	r3, [r7, #20]
 800924c:	693a      	ldr	r2, [r7, #16]
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	69b8      	ldr	r0, [r7, #24]
 8009252:	69f9      	ldr	r1, [r7, #28]
 8009254:	f7f7 f946 	bl	80004e4 <__aeabi_uldivmod>
 8009258:	0002      	movs	r2, r0
 800925a:	000b      	movs	r3, r1
 800925c:	0e11      	lsrs	r1, r2, #24
 800925e:	021d      	lsls	r5, r3, #8
 8009260:	430d      	orrs	r5, r1
 8009262:	0214      	lsls	r4, r2, #8
 8009264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	085b      	lsrs	r3, r3, #1
 800926a:	60bb      	str	r3, [r7, #8]
 800926c:	2300      	movs	r3, #0
 800926e:	60fb      	str	r3, [r7, #12]
 8009270:	68b8      	ldr	r0, [r7, #8]
 8009272:	68f9      	ldr	r1, [r7, #12]
 8009274:	1900      	adds	r0, r0, r4
 8009276:	4169      	adcs	r1, r5
 8009278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	603b      	str	r3, [r7, #0]
 800927e:	2300      	movs	r3, #0
 8009280:	607b      	str	r3, [r7, #4]
 8009282:	683a      	ldr	r2, [r7, #0]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f7f7 f92d 	bl	80004e4 <__aeabi_uldivmod>
 800928a:	0002      	movs	r2, r0
 800928c:	000b      	movs	r3, r1
 800928e:	0013      	movs	r3, r2
 8009290:	637b      	str	r3, [r7, #52]	@ 0x34
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009292:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009294:	23c0      	movs	r3, #192	@ 0xc0
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	429a      	cmp	r2, r3
 800929a:	d309      	bcc.n	80092b0 <UART_SetConfig+0x228>
 800929c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800929e:	2380      	movs	r3, #128	@ 0x80
 80092a0:	035b      	lsls	r3, r3, #13
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d204      	bcs.n	80092b0 <UART_SetConfig+0x228>
        {
          huart->Instance->BRR = usartdiv;
 80092a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80092ac:	60da      	str	r2, [r3, #12]
 80092ae:	e006      	b.n	80092be <UART_SetConfig+0x236>
        }
        else
        {
          ret = HAL_ERROR;
 80092b0:	231f      	movs	r3, #31
 80092b2:	2220      	movs	r2, #32
 80092b4:	189b      	adds	r3, r3, r2
 80092b6:	19db      	adds	r3, r3, r7
 80092b8:	2201      	movs	r2, #1
 80092ba:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80092bc:	e09e      	b.n	80093fc <UART_SetConfig+0x374>
 80092be:	e09d      	b.n	80093fc <UART_SetConfig+0x374>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c2:	69da      	ldr	r2, [r3, #28]
 80092c4:	2380      	movs	r3, #128	@ 0x80
 80092c6:	021b      	lsls	r3, r3, #8
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d14c      	bne.n	8009366 <UART_SetConfig+0x2de>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80092cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092ce:	0018      	movs	r0, r3
 80092d0:	f7fe fe52 	bl	8007f78 <HAL_RCCEx_GetPeriphCLKFreq>
 80092d4:	0003      	movs	r3, r0
 80092d6:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80092d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d100      	bne.n	80092e0 <UART_SetConfig+0x258>
 80092de:	e08d      	b.n	80093fc <UART_SetConfig+0x374>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80092e4:	4b41      	ldr	r3, [pc, #260]	@ (80093ec <UART_SetConfig+0x364>)
 80092e6:	0052      	lsls	r2, r2, #1
 80092e8:	5ad3      	ldrh	r3, [r2, r3]
 80092ea:	0019      	movs	r1, r3
 80092ec:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80092ee:	f7f6 ff27 	bl	8000140 <__udivsi3>
 80092f2:	0003      	movs	r3, r0
 80092f4:	005a      	lsls	r2, r3, #1
 80092f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	085b      	lsrs	r3, r3, #1
 80092fc:	18d2      	adds	r2, r2, r3
 80092fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	0019      	movs	r1, r3
 8009304:	0010      	movs	r0, r2
 8009306:	f7f6 ff1b 	bl	8000140 <__udivsi3>
 800930a:	0003      	movs	r3, r0
 800930c:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800930e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009310:	2b0f      	cmp	r3, #15
 8009312:	d921      	bls.n	8009358 <UART_SetConfig+0x2d0>
 8009314:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009316:	2380      	movs	r3, #128	@ 0x80
 8009318:	025b      	lsls	r3, r3, #9
 800931a:	429a      	cmp	r2, r3
 800931c:	d21c      	bcs.n	8009358 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800931e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009320:	b29a      	uxth	r2, r3
 8009322:	2012      	movs	r0, #18
 8009324:	2420      	movs	r4, #32
 8009326:	1903      	adds	r3, r0, r4
 8009328:	19db      	adds	r3, r3, r7
 800932a:	210f      	movs	r1, #15
 800932c:	438a      	bics	r2, r1
 800932e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009332:	085b      	lsrs	r3, r3, #1
 8009334:	b29b      	uxth	r3, r3
 8009336:	2207      	movs	r2, #7
 8009338:	4013      	ands	r3, r2
 800933a:	b299      	uxth	r1, r3
 800933c:	1903      	adds	r3, r0, r4
 800933e:	19db      	adds	r3, r3, r7
 8009340:	1902      	adds	r2, r0, r4
 8009342:	19d2      	adds	r2, r2, r7
 8009344:	8812      	ldrh	r2, [r2, #0]
 8009346:	430a      	orrs	r2, r1
 8009348:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800934a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	1902      	adds	r2, r0, r4
 8009350:	19d2      	adds	r2, r2, r7
 8009352:	8812      	ldrh	r2, [r2, #0]
 8009354:	60da      	str	r2, [r3, #12]
 8009356:	e051      	b.n	80093fc <UART_SetConfig+0x374>
      }
      else
      {
        ret = HAL_ERROR;
 8009358:	231f      	movs	r3, #31
 800935a:	2220      	movs	r2, #32
 800935c:	189b      	adds	r3, r3, r2
 800935e:	19db      	adds	r3, r3, r7
 8009360:	2201      	movs	r2, #1
 8009362:	701a      	strb	r2, [r3, #0]
 8009364:	e04a      	b.n	80093fc <UART_SetConfig+0x374>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009366:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009368:	0018      	movs	r0, r3
 800936a:	f7fe fe05 	bl	8007f78 <HAL_RCCEx_GetPeriphCLKFreq>
 800936e:	0003      	movs	r3, r0
 8009370:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (pclk != 0U)
 8009372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009374:	2b00      	cmp	r3, #0
 8009376:	d041      	beq.n	80093fc <UART_SetConfig+0x374>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800937a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800937c:	4b1b      	ldr	r3, [pc, #108]	@ (80093ec <UART_SetConfig+0x364>)
 800937e:	0052      	lsls	r2, r2, #1
 8009380:	5ad3      	ldrh	r3, [r2, r3]
 8009382:	0019      	movs	r1, r3
 8009384:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009386:	f7f6 fedb 	bl	8000140 <__udivsi3>
 800938a:	0003      	movs	r3, r0
 800938c:	001a      	movs	r2, r3
 800938e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	085b      	lsrs	r3, r3, #1
 8009394:	18d2      	adds	r2, r2, r3
 8009396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	0019      	movs	r1, r3
 800939c:	0010      	movs	r0, r2
 800939e:	f7f6 fecf 	bl	8000140 <__udivsi3>
 80093a2:	0003      	movs	r3, r0
 80093a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093a8:	2b0f      	cmp	r3, #15
 80093aa:	d921      	bls.n	80093f0 <UART_SetConfig+0x368>
 80093ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80093ae:	2380      	movs	r3, #128	@ 0x80
 80093b0:	025b      	lsls	r3, r3, #9
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d21c      	bcs.n	80093f0 <UART_SetConfig+0x368>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80093b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093b8:	b29a      	uxth	r2, r3
 80093ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	60da      	str	r2, [r3, #12]
 80093c0:	e01c      	b.n	80093fc <UART_SetConfig+0x374>
 80093c2:	46c0      	nop			@ (mov r8, r8)
 80093c4:	40008000 	.word	0x40008000
 80093c8:	cfff69f3 	.word	0xcfff69f3
 80093cc:	ffffcfff 	.word	0xffffcfff
 80093d0:	40008400 	.word	0x40008400
 80093d4:	40008c00 	.word	0x40008c00
 80093d8:	11fff4ff 	.word	0x11fff4ff
 80093dc:	40013800 	.word	0x40013800
 80093e0:	40004400 	.word	0x40004400
 80093e4:	40004800 	.word	0x40004800
 80093e8:	40004c00 	.word	0x40004c00
 80093ec:	0800fd74 	.word	0x0800fd74
      }
      else
      {
        ret = HAL_ERROR;
 80093f0:	231f      	movs	r3, #31
 80093f2:	2220      	movs	r2, #32
 80093f4:	189b      	adds	r3, r3, r2
 80093f6:	19db      	adds	r3, r3, r7
 80093f8:	2201      	movs	r2, #1
 80093fa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80093fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093fe:	226a      	movs	r2, #106	@ 0x6a
 8009400:	2101      	movs	r1, #1
 8009402:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8009404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009406:	2268      	movs	r2, #104	@ 0x68
 8009408:	2101      	movs	r1, #1
 800940a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800940c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800940e:	2200      	movs	r2, #0
 8009410:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009414:	2200      	movs	r2, #0
 8009416:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009418:	231f      	movs	r3, #31
 800941a:	2220      	movs	r2, #32
 800941c:	189b      	adds	r3, r3, r2
 800941e:	19db      	adds	r3, r3, r7
 8009420:	781b      	ldrb	r3, [r3, #0]
}
 8009422:	0018      	movs	r0, r3
 8009424:	46bd      	mov	sp, r7
 8009426:	b012      	add	sp, #72	@ 0x48
 8009428:	bdb0      	pop	{r4, r5, r7, pc}
 800942a:	46c0      	nop			@ (mov r8, r8)

0800942c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009438:	2208      	movs	r2, #8
 800943a:	4013      	ands	r3, r2
 800943c:	d00b      	beq.n	8009456 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	4a4a      	ldr	r2, [pc, #296]	@ (8009570 <UART_AdvFeatureConfig+0x144>)
 8009446:	4013      	ands	r3, r2
 8009448:	0019      	movs	r1, r3
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	430a      	orrs	r2, r1
 8009454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800945a:	2201      	movs	r2, #1
 800945c:	4013      	ands	r3, r2
 800945e:	d00b      	beq.n	8009478 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	4a43      	ldr	r2, [pc, #268]	@ (8009574 <UART_AdvFeatureConfig+0x148>)
 8009468:	4013      	ands	r3, r2
 800946a:	0019      	movs	r1, r3
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	430a      	orrs	r2, r1
 8009476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800947c:	2202      	movs	r2, #2
 800947e:	4013      	ands	r3, r2
 8009480:	d00b      	beq.n	800949a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	4a3b      	ldr	r2, [pc, #236]	@ (8009578 <UART_AdvFeatureConfig+0x14c>)
 800948a:	4013      	ands	r3, r2
 800948c:	0019      	movs	r1, r3
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	430a      	orrs	r2, r1
 8009498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800949e:	2204      	movs	r2, #4
 80094a0:	4013      	ands	r3, r2
 80094a2:	d00b      	beq.n	80094bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	4a34      	ldr	r2, [pc, #208]	@ (800957c <UART_AdvFeatureConfig+0x150>)
 80094ac:	4013      	ands	r3, r2
 80094ae:	0019      	movs	r1, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	430a      	orrs	r2, r1
 80094ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094c0:	2210      	movs	r2, #16
 80094c2:	4013      	ands	r3, r2
 80094c4:	d00b      	beq.n	80094de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	4a2c      	ldr	r2, [pc, #176]	@ (8009580 <UART_AdvFeatureConfig+0x154>)
 80094ce:	4013      	ands	r3, r2
 80094d0:	0019      	movs	r1, r3
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	430a      	orrs	r2, r1
 80094dc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094e2:	2220      	movs	r2, #32
 80094e4:	4013      	ands	r3, r2
 80094e6:	d00b      	beq.n	8009500 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	4a25      	ldr	r2, [pc, #148]	@ (8009584 <UART_AdvFeatureConfig+0x158>)
 80094f0:	4013      	ands	r3, r2
 80094f2:	0019      	movs	r1, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	430a      	orrs	r2, r1
 80094fe:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009504:	2240      	movs	r2, #64	@ 0x40
 8009506:	4013      	ands	r3, r2
 8009508:	d01d      	beq.n	8009546 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	4a1d      	ldr	r2, [pc, #116]	@ (8009588 <UART_AdvFeatureConfig+0x15c>)
 8009512:	4013      	ands	r3, r2
 8009514:	0019      	movs	r1, r3
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	430a      	orrs	r2, r1
 8009520:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009526:	2380      	movs	r3, #128	@ 0x80
 8009528:	035b      	lsls	r3, r3, #13
 800952a:	429a      	cmp	r2, r3
 800952c:	d10b      	bne.n	8009546 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	4a15      	ldr	r2, [pc, #84]	@ (800958c <UART_AdvFeatureConfig+0x160>)
 8009536:	4013      	ands	r3, r2
 8009538:	0019      	movs	r1, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	430a      	orrs	r2, r1
 8009544:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800954a:	2280      	movs	r2, #128	@ 0x80
 800954c:	4013      	ands	r3, r2
 800954e:	d00b      	beq.n	8009568 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	4a0e      	ldr	r2, [pc, #56]	@ (8009590 <UART_AdvFeatureConfig+0x164>)
 8009558:	4013      	ands	r3, r2
 800955a:	0019      	movs	r1, r3
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	430a      	orrs	r2, r1
 8009566:	605a      	str	r2, [r3, #4]
  }
}
 8009568:	46c0      	nop			@ (mov r8, r8)
 800956a:	46bd      	mov	sp, r7
 800956c:	b002      	add	sp, #8
 800956e:	bd80      	pop	{r7, pc}
 8009570:	ffff7fff 	.word	0xffff7fff
 8009574:	fffdffff 	.word	0xfffdffff
 8009578:	fffeffff 	.word	0xfffeffff
 800957c:	fffbffff 	.word	0xfffbffff
 8009580:	ffffefff 	.word	0xffffefff
 8009584:	ffffdfff 	.word	0xffffdfff
 8009588:	ffefffff 	.word	0xffefffff
 800958c:	ff9fffff 	.word	0xff9fffff
 8009590:	fff7ffff 	.word	0xfff7ffff

08009594 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b092      	sub	sp, #72	@ 0x48
 8009598:	af02      	add	r7, sp, #8
 800959a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2290      	movs	r2, #144	@ 0x90
 80095a0:	2100      	movs	r1, #0
 80095a2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80095a4:	f7fc fc54 	bl	8005e50 <HAL_GetTick>
 80095a8:	0003      	movs	r3, r0
 80095aa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2208      	movs	r2, #8
 80095b4:	4013      	ands	r3, r2
 80095b6:	2b08      	cmp	r3, #8
 80095b8:	d12d      	bne.n	8009616 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095bc:	2280      	movs	r2, #128	@ 0x80
 80095be:	0391      	lsls	r1, r2, #14
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	4a47      	ldr	r2, [pc, #284]	@ (80096e0 <UART_CheckIdleState+0x14c>)
 80095c4:	9200      	str	r2, [sp, #0]
 80095c6:	2200      	movs	r2, #0
 80095c8:	f000 f88e 	bl	80096e8 <UART_WaitOnFlagUntilTimeout>
 80095cc:	1e03      	subs	r3, r0, #0
 80095ce:	d022      	beq.n	8009616 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80095d0:	f3ef 8310 	mrs	r3, PRIMASK
 80095d4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80095d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80095d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80095da:	2301      	movs	r3, #1
 80095dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095e0:	f383 8810 	msr	PRIMASK, r3
}
 80095e4:	46c0      	nop			@ (mov r8, r8)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2180      	movs	r1, #128	@ 0x80
 80095f2:	438a      	bics	r2, r1
 80095f4:	601a      	str	r2, [r3, #0]
 80095f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095fc:	f383 8810 	msr	PRIMASK, r3
}
 8009600:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2288      	movs	r2, #136	@ 0x88
 8009606:	2120      	movs	r1, #32
 8009608:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2284      	movs	r2, #132	@ 0x84
 800960e:	2100      	movs	r1, #0
 8009610:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009612:	2303      	movs	r3, #3
 8009614:	e060      	b.n	80096d8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	2204      	movs	r2, #4
 800961e:	4013      	ands	r3, r2
 8009620:	2b04      	cmp	r3, #4
 8009622:	d146      	bne.n	80096b2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009626:	2280      	movs	r2, #128	@ 0x80
 8009628:	03d1      	lsls	r1, r2, #15
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	4a2c      	ldr	r2, [pc, #176]	@ (80096e0 <UART_CheckIdleState+0x14c>)
 800962e:	9200      	str	r2, [sp, #0]
 8009630:	2200      	movs	r2, #0
 8009632:	f000 f859 	bl	80096e8 <UART_WaitOnFlagUntilTimeout>
 8009636:	1e03      	subs	r3, r0, #0
 8009638:	d03b      	beq.n	80096b2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800963a:	f3ef 8310 	mrs	r3, PRIMASK
 800963e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009640:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009642:	637b      	str	r3, [r7, #52]	@ 0x34
 8009644:	2301      	movs	r3, #1
 8009646:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	f383 8810 	msr	PRIMASK, r3
}
 800964e:	46c0      	nop			@ (mov r8, r8)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4922      	ldr	r1, [pc, #136]	@ (80096e4 <UART_CheckIdleState+0x150>)
 800965c:	400a      	ands	r2, r1
 800965e:	601a      	str	r2, [r3, #0]
 8009660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009662:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	f383 8810 	msr	PRIMASK, r3
}
 800966a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800966c:	f3ef 8310 	mrs	r3, PRIMASK
 8009670:	61bb      	str	r3, [r7, #24]
  return(result);
 8009672:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009674:	633b      	str	r3, [r7, #48]	@ 0x30
 8009676:	2301      	movs	r3, #1
 8009678:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800967a:	69fb      	ldr	r3, [r7, #28]
 800967c:	f383 8810 	msr	PRIMASK, r3
}
 8009680:	46c0      	nop			@ (mov r8, r8)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	689a      	ldr	r2, [r3, #8]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2101      	movs	r1, #1
 800968e:	438a      	bics	r2, r1
 8009690:	609a      	str	r2, [r3, #8]
 8009692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009694:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009696:	6a3b      	ldr	r3, [r7, #32]
 8009698:	f383 8810 	msr	PRIMASK, r3
}
 800969c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	228c      	movs	r2, #140	@ 0x8c
 80096a2:	2120      	movs	r1, #32
 80096a4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2284      	movs	r2, #132	@ 0x84
 80096aa:	2100      	movs	r1, #0
 80096ac:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096ae:	2303      	movs	r3, #3
 80096b0:	e012      	b.n	80096d8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2288      	movs	r2, #136	@ 0x88
 80096b6:	2120      	movs	r1, #32
 80096b8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	228c      	movs	r2, #140	@ 0x8c
 80096be:	2120      	movs	r1, #32
 80096c0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2200      	movs	r2, #0
 80096c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2284      	movs	r2, #132	@ 0x84
 80096d2:	2100      	movs	r1, #0
 80096d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	0018      	movs	r0, r3
 80096da:	46bd      	mov	sp, r7
 80096dc:	b010      	add	sp, #64	@ 0x40
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	01ffffff 	.word	0x01ffffff
 80096e4:	fffffedf 	.word	0xfffffedf

080096e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	603b      	str	r3, [r7, #0]
 80096f4:	1dfb      	adds	r3, r7, #7
 80096f6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096f8:	e051      	b.n	800979e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096fa:	69bb      	ldr	r3, [r7, #24]
 80096fc:	3301      	adds	r3, #1
 80096fe:	d04e      	beq.n	800979e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009700:	f7fc fba6 	bl	8005e50 <HAL_GetTick>
 8009704:	0002      	movs	r2, r0
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	1ad3      	subs	r3, r2, r3
 800970a:	69ba      	ldr	r2, [r7, #24]
 800970c:	429a      	cmp	r2, r3
 800970e:	d302      	bcc.n	8009716 <UART_WaitOnFlagUntilTimeout+0x2e>
 8009710:	69bb      	ldr	r3, [r7, #24]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d101      	bne.n	800971a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8009716:	2303      	movs	r3, #3
 8009718:	e051      	b.n	80097be <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2204      	movs	r2, #4
 8009722:	4013      	ands	r3, r2
 8009724:	d03b      	beq.n	800979e <UART_WaitOnFlagUntilTimeout+0xb6>
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	2b80      	cmp	r3, #128	@ 0x80
 800972a:	d038      	beq.n	800979e <UART_WaitOnFlagUntilTimeout+0xb6>
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	2b40      	cmp	r3, #64	@ 0x40
 8009730:	d035      	beq.n	800979e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	69db      	ldr	r3, [r3, #28]
 8009738:	2208      	movs	r2, #8
 800973a:	4013      	ands	r3, r2
 800973c:	2b08      	cmp	r3, #8
 800973e:	d111      	bne.n	8009764 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2208      	movs	r2, #8
 8009746:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	0018      	movs	r0, r3
 800974c:	f000 f83c 	bl	80097c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2290      	movs	r2, #144	@ 0x90
 8009754:	2108      	movs	r1, #8
 8009756:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2284      	movs	r2, #132	@ 0x84
 800975c:	2100      	movs	r1, #0
 800975e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8009760:	2301      	movs	r3, #1
 8009762:	e02c      	b.n	80097be <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	69da      	ldr	r2, [r3, #28]
 800976a:	2380      	movs	r3, #128	@ 0x80
 800976c:	011b      	lsls	r3, r3, #4
 800976e:	401a      	ands	r2, r3
 8009770:	2380      	movs	r3, #128	@ 0x80
 8009772:	011b      	lsls	r3, r3, #4
 8009774:	429a      	cmp	r2, r3
 8009776:	d112      	bne.n	800979e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	2280      	movs	r2, #128	@ 0x80
 800977e:	0112      	lsls	r2, r2, #4
 8009780:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	0018      	movs	r0, r3
 8009786:	f000 f81f 	bl	80097c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2290      	movs	r2, #144	@ 0x90
 800978e:	2120      	movs	r1, #32
 8009790:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2284      	movs	r2, #132	@ 0x84
 8009796:	2100      	movs	r1, #0
 8009798:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800979a:	2303      	movs	r3, #3
 800979c:	e00f      	b.n	80097be <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	69db      	ldr	r3, [r3, #28]
 80097a4:	68ba      	ldr	r2, [r7, #8]
 80097a6:	4013      	ands	r3, r2
 80097a8:	68ba      	ldr	r2, [r7, #8]
 80097aa:	1ad3      	subs	r3, r2, r3
 80097ac:	425a      	negs	r2, r3
 80097ae:	4153      	adcs	r3, r2
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	001a      	movs	r2, r3
 80097b4:	1dfb      	adds	r3, r7, #7
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d09e      	beq.n	80096fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80097bc:	2300      	movs	r3, #0
}
 80097be:	0018      	movs	r0, r3
 80097c0:	46bd      	mov	sp, r7
 80097c2:	b004      	add	sp, #16
 80097c4:	bd80      	pop	{r7, pc}
	...

080097c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b08e      	sub	sp, #56	@ 0x38
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80097d0:	f3ef 8310 	mrs	r3, PRIMASK
 80097d4:	617b      	str	r3, [r7, #20]
  return(result);
 80097d6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80097da:	2301      	movs	r3, #1
 80097dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097de:	69bb      	ldr	r3, [r7, #24]
 80097e0:	f383 8810 	msr	PRIMASK, r3
}
 80097e4:	46c0      	nop			@ (mov r8, r8)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4926      	ldr	r1, [pc, #152]	@ (800988c <UART_EndRxTransfer+0xc4>)
 80097f2:	400a      	ands	r2, r1
 80097f4:	601a      	str	r2, [r3, #0]
 80097f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097fa:	69fb      	ldr	r3, [r7, #28]
 80097fc:	f383 8810 	msr	PRIMASK, r3
}
 8009800:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009802:	f3ef 8310 	mrs	r3, PRIMASK
 8009806:	623b      	str	r3, [r7, #32]
  return(result);
 8009808:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800980a:	633b      	str	r3, [r7, #48]	@ 0x30
 800980c:	2301      	movs	r3, #1
 800980e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009812:	f383 8810 	msr	PRIMASK, r3
}
 8009816:	46c0      	nop			@ (mov r8, r8)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	689a      	ldr	r2, [r3, #8]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	491b      	ldr	r1, [pc, #108]	@ (8009890 <UART_EndRxTransfer+0xc8>)
 8009824:	400a      	ands	r2, r1
 8009826:	609a      	str	r2, [r3, #8]
 8009828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800982a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800982c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800982e:	f383 8810 	msr	PRIMASK, r3
}
 8009832:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009838:	2b01      	cmp	r3, #1
 800983a:	d118      	bne.n	800986e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800983c:	f3ef 8310 	mrs	r3, PRIMASK
 8009840:	60bb      	str	r3, [r7, #8]
  return(result);
 8009842:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009844:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009846:	2301      	movs	r3, #1
 8009848:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f383 8810 	msr	PRIMASK, r3
}
 8009850:	46c0      	nop			@ (mov r8, r8)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2110      	movs	r1, #16
 800985e:	438a      	bics	r2, r1
 8009860:	601a      	str	r2, [r3, #0]
 8009862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009864:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	f383 8810 	msr	PRIMASK, r3
}
 800986c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	228c      	movs	r2, #140	@ 0x8c
 8009872:	2120      	movs	r1, #32
 8009874:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009882:	46c0      	nop			@ (mov r8, r8)
 8009884:	46bd      	mov	sp, r7
 8009886:	b00e      	add	sp, #56	@ 0x38
 8009888:	bd80      	pop	{r7, pc}
 800988a:	46c0      	nop			@ (mov r8, r8)
 800988c:	fffffedf 	.word	0xfffffedf
 8009890:	effffffe 	.word	0xeffffffe

08009894 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2284      	movs	r2, #132	@ 0x84
 80098a0:	5c9b      	ldrb	r3, [r3, r2]
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d101      	bne.n	80098aa <HAL_UARTEx_DisableFifoMode+0x16>
 80098a6:	2302      	movs	r3, #2
 80098a8:	e027      	b.n	80098fa <HAL_UARTEx_DisableFifoMode+0x66>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2284      	movs	r2, #132	@ 0x84
 80098ae:	2101      	movs	r1, #1
 80098b0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2288      	movs	r2, #136	@ 0x88
 80098b6:	2124      	movs	r1, #36	@ 0x24
 80098b8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2101      	movs	r1, #1
 80098ce:	438a      	bics	r2, r1
 80098d0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	4a0b      	ldr	r2, [pc, #44]	@ (8009904 <HAL_UARTEx_DisableFifoMode+0x70>)
 80098d6:	4013      	ands	r3, r2
 80098d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2200      	movs	r2, #0
 80098de:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	68fa      	ldr	r2, [r7, #12]
 80098e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2288      	movs	r2, #136	@ 0x88
 80098ec:	2120      	movs	r1, #32
 80098ee:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2284      	movs	r2, #132	@ 0x84
 80098f4:	2100      	movs	r1, #0
 80098f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	0018      	movs	r0, r3
 80098fc:	46bd      	mov	sp, r7
 80098fe:	b004      	add	sp, #16
 8009900:	bd80      	pop	{r7, pc}
 8009902:	46c0      	nop			@ (mov r8, r8)
 8009904:	dfffffff 	.word	0xdfffffff

08009908 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2284      	movs	r2, #132	@ 0x84
 8009916:	5c9b      	ldrb	r3, [r3, r2]
 8009918:	2b01      	cmp	r3, #1
 800991a:	d101      	bne.n	8009920 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800991c:	2302      	movs	r3, #2
 800991e:	e02e      	b.n	800997e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2284      	movs	r2, #132	@ 0x84
 8009924:	2101      	movs	r1, #1
 8009926:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2288      	movs	r2, #136	@ 0x88
 800992c:	2124      	movs	r1, #36	@ 0x24
 800992e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	2101      	movs	r1, #1
 8009944:	438a      	bics	r2, r1
 8009946:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	00db      	lsls	r3, r3, #3
 8009950:	08d9      	lsrs	r1, r3, #3
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	683a      	ldr	r2, [r7, #0]
 8009958:	430a      	orrs	r2, r1
 800995a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	0018      	movs	r0, r3
 8009960:	f000 f854 	bl	8009a0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	68fa      	ldr	r2, [r7, #12]
 800996a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2288      	movs	r2, #136	@ 0x88
 8009970:	2120      	movs	r1, #32
 8009972:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2284      	movs	r2, #132	@ 0x84
 8009978:	2100      	movs	r1, #0
 800997a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800997c:	2300      	movs	r3, #0
}
 800997e:	0018      	movs	r0, r3
 8009980:	46bd      	mov	sp, r7
 8009982:	b004      	add	sp, #16
 8009984:	bd80      	pop	{r7, pc}
	...

08009988 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2284      	movs	r2, #132	@ 0x84
 8009996:	5c9b      	ldrb	r3, [r3, r2]
 8009998:	2b01      	cmp	r3, #1
 800999a:	d101      	bne.n	80099a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800999c:	2302      	movs	r3, #2
 800999e:	e02f      	b.n	8009a00 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2284      	movs	r2, #132	@ 0x84
 80099a4:	2101      	movs	r1, #1
 80099a6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2288      	movs	r2, #136	@ 0x88
 80099ac:	2124      	movs	r1, #36	@ 0x24
 80099ae:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2101      	movs	r1, #1
 80099c4:	438a      	bics	r2, r1
 80099c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	4a0e      	ldr	r2, [pc, #56]	@ (8009a08 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80099d0:	4013      	ands	r3, r2
 80099d2:	0019      	movs	r1, r3
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	683a      	ldr	r2, [r7, #0]
 80099da:	430a      	orrs	r2, r1
 80099dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	0018      	movs	r0, r3
 80099e2:	f000 f813 	bl	8009a0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	68fa      	ldr	r2, [r7, #12]
 80099ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2288      	movs	r2, #136	@ 0x88
 80099f2:	2120      	movs	r1, #32
 80099f4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2284      	movs	r2, #132	@ 0x84
 80099fa:	2100      	movs	r1, #0
 80099fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80099fe:	2300      	movs	r3, #0
}
 8009a00:	0018      	movs	r0, r3
 8009a02:	46bd      	mov	sp, r7
 8009a04:	b004      	add	sp, #16
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	f1ffffff 	.word	0xf1ffffff

08009a0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a0e:	b085      	sub	sp, #20
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d108      	bne.n	8009a2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	226a      	movs	r2, #106	@ 0x6a
 8009a20:	2101      	movs	r1, #1
 8009a22:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2268      	movs	r2, #104	@ 0x68
 8009a28:	2101      	movs	r1, #1
 8009a2a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009a2c:	e043      	b.n	8009ab6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009a2e:	260f      	movs	r6, #15
 8009a30:	19bb      	adds	r3, r7, r6
 8009a32:	2208      	movs	r2, #8
 8009a34:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009a36:	200e      	movs	r0, #14
 8009a38:	183b      	adds	r3, r7, r0
 8009a3a:	2208      	movs	r2, #8
 8009a3c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	0e5b      	lsrs	r3, r3, #25
 8009a46:	b2da      	uxtb	r2, r3
 8009a48:	240d      	movs	r4, #13
 8009a4a:	193b      	adds	r3, r7, r4
 8009a4c:	2107      	movs	r1, #7
 8009a4e:	400a      	ands	r2, r1
 8009a50:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	0f5b      	lsrs	r3, r3, #29
 8009a5a:	b2da      	uxtb	r2, r3
 8009a5c:	250c      	movs	r5, #12
 8009a5e:	197b      	adds	r3, r7, r5
 8009a60:	2107      	movs	r1, #7
 8009a62:	400a      	ands	r2, r1
 8009a64:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a66:	183b      	adds	r3, r7, r0
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	197a      	adds	r2, r7, r5
 8009a6c:	7812      	ldrb	r2, [r2, #0]
 8009a6e:	4914      	ldr	r1, [pc, #80]	@ (8009ac0 <UARTEx_SetNbDataToProcess+0xb4>)
 8009a70:	5c8a      	ldrb	r2, [r1, r2]
 8009a72:	435a      	muls	r2, r3
 8009a74:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8009a76:	197b      	adds	r3, r7, r5
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	4a12      	ldr	r2, [pc, #72]	@ (8009ac4 <UARTEx_SetNbDataToProcess+0xb8>)
 8009a7c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a7e:	0019      	movs	r1, r3
 8009a80:	f7f6 fbe8 	bl	8000254 <__divsi3>
 8009a84:	0003      	movs	r3, r0
 8009a86:	b299      	uxth	r1, r3
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	226a      	movs	r2, #106	@ 0x6a
 8009a8c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a8e:	19bb      	adds	r3, r7, r6
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	193a      	adds	r2, r7, r4
 8009a94:	7812      	ldrb	r2, [r2, #0]
 8009a96:	490a      	ldr	r1, [pc, #40]	@ (8009ac0 <UARTEx_SetNbDataToProcess+0xb4>)
 8009a98:	5c8a      	ldrb	r2, [r1, r2]
 8009a9a:	435a      	muls	r2, r3
 8009a9c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8009a9e:	193b      	adds	r3, r7, r4
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	4a08      	ldr	r2, [pc, #32]	@ (8009ac4 <UARTEx_SetNbDataToProcess+0xb8>)
 8009aa4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009aa6:	0019      	movs	r1, r3
 8009aa8:	f7f6 fbd4 	bl	8000254 <__divsi3>
 8009aac:	0003      	movs	r3, r0
 8009aae:	b299      	uxth	r1, r3
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2268      	movs	r2, #104	@ 0x68
 8009ab4:	5299      	strh	r1, [r3, r2]
}
 8009ab6:	46c0      	nop			@ (mov r8, r8)
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	b005      	add	sp, #20
 8009abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009abe:	46c0      	nop			@ (mov r8, r8)
 8009ac0:	0800fd8c 	.word	0x0800fd8c
 8009ac4:	0800fd94 	.word	0x0800fd94

08009ac8 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8009ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* chip id read try count */
    uint8_t try_count = 5;
 8009ad0:	230e      	movs	r3, #14
 8009ad2:	18fb      	adds	r3, r7, r3
 8009ad4:	2205      	movs	r2, #5
 8009ad6:	701a      	strb	r2, [r3, #0]
    uint8_t chip_id = 0;
 8009ad8:	230d      	movs	r3, #13
 8009ada:	18fb      	adds	r3, r7, r3
 8009adc:	2200      	movs	r2, #0
 8009ade:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8009ae0:	250f      	movs	r5, #15
 8009ae2:	197c      	adds	r4, r7, r5
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	0018      	movs	r0, r3
 8009ae8:	f001 fa2b 	bl	800af42 <null_ptr_check>
 8009aec:	0003      	movs	r3, r0
 8009aee:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8009af0:	197b      	adds	r3, r7, r5
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	b25b      	sxtb	r3, r3
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d154      	bne.n	8009ba4 <bme280_init+0xdc>
    {
        while (try_count)
 8009afa:	e043      	b.n	8009b84 <bme280_init+0xbc>
        {
            /* Read the chip-id of bme280 sensor */
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev); // 0xD0
 8009afc:	250f      	movs	r5, #15
 8009afe:	197c      	adds	r4, r7, r5
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	260d      	movs	r6, #13
 8009b04:	19b9      	adds	r1, r7, r6
 8009b06:	2201      	movs	r2, #1
 8009b08:	20d0      	movs	r0, #208	@ 0xd0
 8009b0a:	f000 f855 	bl	8009bb8 <bme280_get_regs>
 8009b0e:	0003      	movs	r3, r0
 8009b10:	7023      	strb	r3, [r4, #0]
            printf("bme280 chip_id = %x\n", chip_id);
 8009b12:	0034      	movs	r4, r6
 8009b14:	193b      	adds	r3, r7, r4
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	001a      	movs	r2, r3
 8009b1a:	4b26      	ldr	r3, [pc, #152]	@ (8009bb4 <bme280_init+0xec>)
 8009b1c:	0011      	movs	r1, r2
 8009b1e:	0018      	movs	r0, r3
 8009b20:	f7fb fdd4 	bl	80056cc <printf_>
            /* Check for chip id validity */
            if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID))
 8009b24:	0029      	movs	r1, r5
 8009b26:	187b      	adds	r3, r7, r1
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	b25b      	sxtb	r3, r3
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d11c      	bne.n	8009b6a <bme280_init+0xa2>
 8009b30:	193b      	adds	r3, r7, r4
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	2b60      	cmp	r3, #96	@ 0x60
 8009b36:	d118      	bne.n	8009b6a <bme280_init+0xa2>
            {
                dev->chip_id = chip_id;
 8009b38:	193b      	adds	r3, r7, r4
 8009b3a:	781a      	ldrb	r2, [r3, #0]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bme280_soft_reset(dev);
 8009b40:	000d      	movs	r5, r1
 8009b42:	187c      	adds	r4, r7, r1
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	0018      	movs	r0, r3
 8009b48:	f000 fa05 	bl	8009f56 <bme280_soft_reset>
 8009b4c:	0003      	movs	r3, r0
 8009b4e:	7023      	strb	r3, [r4, #0]

                if (rslt == BME280_OK)
 8009b50:	197b      	adds	r3, r7, r5
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	b25b      	sxtb	r3, r3
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d11a      	bne.n	8009b90 <bme280_init+0xc8>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8009b5a:	197c      	adds	r4, r7, r5
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	0018      	movs	r0, r3
 8009b60:	f001 f840 	bl	800abe4 <get_calib_data>
 8009b64:	0003      	movs	r3, r0
 8009b66:	7023      	strb	r3, [r4, #0]
                }

                break;
 8009b68:	e012      	b.n	8009b90 <bme280_init+0xc8>
            }

            /* Wait for 1 ms */
            dev->delay_us(1, dev->intf_ptr);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	695a      	ldr	r2, [r3, #20]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	0019      	movs	r1, r3
 8009b74:	2001      	movs	r0, #1
 8009b76:	4790      	blx	r2
            --try_count;
 8009b78:	220e      	movs	r2, #14
 8009b7a:	18bb      	adds	r3, r7, r2
 8009b7c:	18ba      	adds	r2, r7, r2
 8009b7e:	7812      	ldrb	r2, [r2, #0]
 8009b80:	3a01      	subs	r2, #1
 8009b82:	701a      	strb	r2, [r3, #0]
        while (try_count)
 8009b84:	230e      	movs	r3, #14
 8009b86:	18fb      	adds	r3, r7, r3
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d1b6      	bne.n	8009afc <bme280_init+0x34>
 8009b8e:	e000      	b.n	8009b92 <bme280_init+0xca>
                break;
 8009b90:	46c0      	nop			@ (mov r8, r8)
        }

        /* Chip id check failed */
        if (!try_count)
 8009b92:	230e      	movs	r3, #14
 8009b94:	18fb      	adds	r3, r7, r3
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d103      	bne.n	8009ba4 <bme280_init+0xdc>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 8009b9c:	230f      	movs	r3, #15
 8009b9e:	18fb      	adds	r3, r7, r3
 8009ba0:	22fe      	movs	r2, #254	@ 0xfe
 8009ba2:	701a      	strb	r2, [r3, #0]
        }
    }

    return rslt;
 8009ba4:	230f      	movs	r3, #15
 8009ba6:	18fb      	adds	r3, r7, r3
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	b25b      	sxtb	r3, r3
}
 8009bac:	0018      	movs	r0, r3
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	b005      	add	sp, #20
 8009bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bb4:	0800f950 	.word	0x0800f950

08009bb8 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme280_dev *dev)
{
 8009bb8:	b5b0      	push	{r4, r5, r7, lr}
 8009bba:	b086      	sub	sp, #24
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	60b9      	str	r1, [r7, #8]
 8009bc0:	0011      	movs	r1, r2
 8009bc2:	607b      	str	r3, [r7, #4]
 8009bc4:	240f      	movs	r4, #15
 8009bc6:	193b      	adds	r3, r7, r4
 8009bc8:	1c02      	adds	r2, r0, #0
 8009bca:	701a      	strb	r2, [r3, #0]
 8009bcc:	230c      	movs	r3, #12
 8009bce:	18fb      	adds	r3, r7, r3
 8009bd0:	1c0a      	adds	r2, r1, #0
 8009bd2:	801a      	strh	r2, [r3, #0]
    volatile int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	0018      	movs	r0, r3
 8009bd8:	f001 f9b3 	bl	800af42 <null_ptr_check>
 8009bdc:	0003      	movs	r3, r0
 8009bde:	001a      	movs	r2, r3
 8009be0:	2117      	movs	r1, #23
 8009be2:	187b      	adds	r3, r7, r1
 8009be4:	701a      	strb	r2, [r3, #0]

    /* Proceed if null check is fine */
    if ((rslt == BME280_OK) && (reg_data != NULL))
 8009be6:	187b      	adds	r3, r7, r1
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	b25b      	sxtb	r3, r3
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d129      	bne.n	8009c44 <bme280_get_regs+0x8c>
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d026      	beq.n	8009c44 <bme280_get_regs+0x8c>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	7a1b      	ldrb	r3, [r3, #8]
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d006      	beq.n	8009c0c <bme280_get_regs+0x54>
        {
            reg_addr = reg_addr | 0x80;
 8009bfe:	193b      	adds	r3, r7, r4
 8009c00:	193a      	adds	r2, r7, r4
 8009c02:	7812      	ldrb	r2, [r2, #0]
 8009c04:	2180      	movs	r1, #128	@ 0x80
 8009c06:	4249      	negs	r1, r1
 8009c08:	430a      	orrs	r2, r1
 8009c0a:	701a      	strb	r2, [r3, #0]

        /* Read the data  */
        /*  void *intf_ptr;Interface function pointer used to enable the device address for I2C
                            and chip selection for SPI */

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	68dc      	ldr	r4, [r3, #12]
 8009c10:	230c      	movs	r3, #12
 8009c12:	18fb      	adds	r3, r7, r3
 8009c14:	881a      	ldrh	r2, [r3, #0]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	685d      	ldr	r5, [r3, #4]
 8009c1a:	68b9      	ldr	r1, [r7, #8]
 8009c1c:	230f      	movs	r3, #15
 8009c1e:	18fb      	adds	r3, r7, r3
 8009c20:	7818      	ldrb	r0, [r3, #0]
 8009c22:	002b      	movs	r3, r5
 8009c24:	47a0      	blx	r4
 8009c26:	0003      	movs	r3, r0
 8009c28:	0019      	movs	r1, r3
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2245      	movs	r2, #69	@ 0x45
 8009c2e:	5499      	strb	r1, [r3, r2]

        /* Check for communication error */
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS) // BME280_INTF_RET_SUCCESS = INT8_C(0)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2245      	movs	r2, #69	@ 0x45
 8009c34:	569b      	ldrsb	r3, [r3, r2]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d008      	beq.n	8009c4c <bme280_get_regs+0x94>
        {
            rslt = BME280_E_COMM_FAIL; // BME280_E_COMM_FAIL = INT8_C(-4)
 8009c3a:	2317      	movs	r3, #23
 8009c3c:	18fb      	adds	r3, r7, r3
 8009c3e:	22fc      	movs	r2, #252	@ 0xfc
 8009c40:	701a      	strb	r2, [r3, #0]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS) // BME280_INTF_RET_SUCCESS = INT8_C(0)
 8009c42:	e003      	b.n	8009c4c <bme280_get_regs+0x94>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR; // BME280_E_NULL_PTR = INT8_C(-1)
 8009c44:	2317      	movs	r3, #23
 8009c46:	18fb      	adds	r3, r7, r3
 8009c48:	22ff      	movs	r2, #255	@ 0xff
 8009c4a:	701a      	strb	r2, [r3, #0]
    }
    //	printf("result => %d\n", rslt);
    return rslt;
 8009c4c:	2317      	movs	r3, #23
 8009c4e:	18fb      	adds	r3, r7, r3
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	b25b      	sxtb	r3, r3
}
 8009c54:	0018      	movs	r0, r3
 8009c56:	46bd      	mov	sp, r7
 8009c58:	b006      	add	sp, #24
 8009c5a:	bdb0      	pop	{r4, r5, r7, pc}

08009c5c <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme280_dev *dev)
{
 8009c5c:	b5b0      	push	{r4, r5, r7, lr}
 8009c5e:	b08c      	sub	sp, #48	@ 0x30
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	603b      	str	r3, [r7, #0]
 8009c68:	1dfb      	adds	r3, r7, #7
 8009c6a:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 8009c6c:	1dfb      	adds	r3, r7, #7
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	2b0a      	cmp	r3, #10
 8009c72:	d902      	bls.n	8009c7a <bme280_set_regs+0x1e>
    {
        len = 10;
 8009c74:	1dfb      	adds	r3, r7, #7
 8009c76:	220a      	movs	r2, #10
 8009c78:	701a      	strb	r2, [r3, #0]

    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8009c7a:	252f      	movs	r5, #47	@ 0x2f
 8009c7c:	197c      	adds	r4, r7, r5
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	0018      	movs	r0, r3
 8009c82:	f001 f95e 	bl	800af42 <null_ptr_check>
 8009c86:	0003      	movs	r3, r0
 8009c88:	7023      	strb	r3, [r4, #0]

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8009c8a:	197b      	adds	r3, r7, r5
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	b25b      	sxtb	r3, r3
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d000      	beq.n	8009c96 <bme280_set_regs+0x3a>
 8009c94:	e06c      	b.n	8009d70 <bme280_set_regs+0x114>
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d069      	beq.n	8009d70 <bme280_set_regs+0x114>
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d066      	beq.n	8009d70 <bme280_set_regs+0x114>
    {
        if (len != 0)
 8009ca2:	1dfb      	adds	r3, r7, #7
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d05d      	beq.n	8009d66 <bme280_set_regs+0x10a>
        {
            temp_buff[0] = reg_data[0];
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	781a      	ldrb	r2, [r3, #0]
 8009cae:	2314      	movs	r3, #20
 8009cb0:	18fb      	adds	r3, r7, r3
 8009cb2:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	7a1b      	ldrb	r3, [r3, #8]
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d01e      	beq.n	8009cfa <bme280_set_regs+0x9e>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8009cbc:	232b      	movs	r3, #43	@ 0x2b
 8009cbe:	18fb      	adds	r3, r7, r3
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	701a      	strb	r2, [r3, #0]
 8009cc4:	e012      	b.n	8009cec <bme280_set_regs+0x90>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8009cc6:	202b      	movs	r0, #43	@ 0x2b
 8009cc8:	183b      	adds	r3, r7, r0
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	68fa      	ldr	r2, [r7, #12]
 8009cce:	18d3      	adds	r3, r2, r3
 8009cd0:	781a      	ldrb	r2, [r3, #0]
 8009cd2:	183b      	adds	r3, r7, r0
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	68f9      	ldr	r1, [r7, #12]
 8009cd8:	18cb      	adds	r3, r1, r3
 8009cda:	217f      	movs	r1, #127	@ 0x7f
 8009cdc:	400a      	ands	r2, r1
 8009cde:	b2d2      	uxtb	r2, r2
 8009ce0:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8009ce2:	183b      	adds	r3, r7, r0
 8009ce4:	781a      	ldrb	r2, [r3, #0]
 8009ce6:	183b      	adds	r3, r7, r0
 8009ce8:	3201      	adds	r2, #1
 8009cea:	701a      	strb	r2, [r3, #0]
 8009cec:	232b      	movs	r3, #43	@ 0x2b
 8009cee:	18fa      	adds	r2, r7, r3
 8009cf0:	1dfb      	adds	r3, r7, #7
 8009cf2:	7812      	ldrb	r2, [r2, #0]
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d3e5      	bcc.n	8009cc6 <bme280_set_regs+0x6a>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8009cfa:	1dfb      	adds	r3, r7, #7
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d911      	bls.n	8009d26 <bme280_set_regs+0xca>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8009d02:	1dfb      	adds	r3, r7, #7
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	68ba      	ldr	r2, [r7, #8]
 8009d08:	2114      	movs	r1, #20
 8009d0a:	1879      	adds	r1, r7, r1
 8009d0c:	68f8      	ldr	r0, [r7, #12]
 8009d0e:	f000 ffb5 	bl	800ac7c <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 8009d12:	1dfb      	adds	r3, r7, #7
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	18db      	adds	r3, r3, r3
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	232c      	movs	r3, #44	@ 0x2c
 8009d1e:	18fb      	adds	r3, r7, r3
 8009d20:	3a01      	subs	r2, #1
 8009d22:	801a      	strh	r2, [r3, #0]
 8009d24:	e004      	b.n	8009d30 <bme280_set_regs+0xd4>
            }
            else
            {
                temp_len = len;
 8009d26:	232c      	movs	r3, #44	@ 0x2c
 8009d28:	18fb      	adds	r3, r7, r3
 8009d2a:	1dfa      	adds	r2, r7, #7
 8009d2c:	7812      	ldrb	r2, [r2, #0]
 8009d2e:	801a      	strh	r2, [r3, #0]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	691c      	ldr	r4, [r3, #16]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	7818      	ldrb	r0, [r3, #0]
 8009d38:	232c      	movs	r3, #44	@ 0x2c
 8009d3a:	18fb      	adds	r3, r7, r3
 8009d3c:	881a      	ldrh	r2, [r3, #0]
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	2114      	movs	r1, #20
 8009d44:	1879      	adds	r1, r7, r1
 8009d46:	47a0      	blx	r4
 8009d48:	0003      	movs	r3, r0
 8009d4a:	0019      	movs	r1, r3
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	2245      	movs	r2, #69	@ 0x45
 8009d50:	5499      	strb	r1, [r3, r2]

            /* Check for communication error */
            if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	2245      	movs	r2, #69	@ 0x45
 8009d56:	569b      	ldrsb	r3, [r3, r2]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d00e      	beq.n	8009d7a <bme280_set_regs+0x11e>
            {
                rslt = BME280_E_COMM_FAIL;
 8009d5c:	232f      	movs	r3, #47	@ 0x2f
 8009d5e:	18fb      	adds	r3, r7, r3
 8009d60:	22fc      	movs	r2, #252	@ 0xfc
 8009d62:	701a      	strb	r2, [r3, #0]
        if (len != 0)
 8009d64:	e009      	b.n	8009d7a <bme280_set_regs+0x11e>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 8009d66:	232f      	movs	r3, #47	@ 0x2f
 8009d68:	18fb      	adds	r3, r7, r3
 8009d6a:	22fd      	movs	r2, #253	@ 0xfd
 8009d6c:	701a      	strb	r2, [r3, #0]
        if (len != 0)
 8009d6e:	e004      	b.n	8009d7a <bme280_set_regs+0x11e>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8009d70:	232f      	movs	r3, #47	@ 0x2f
 8009d72:	18fb      	adds	r3, r7, r3
 8009d74:	22ff      	movs	r2, #255	@ 0xff
 8009d76:	701a      	strb	r2, [r3, #0]
 8009d78:	e000      	b.n	8009d7c <bme280_set_regs+0x120>
        if (len != 0)
 8009d7a:	46c0      	nop			@ (mov r8, r8)
    }

    return rslt;
 8009d7c:	232f      	movs	r3, #47	@ 0x2f
 8009d7e:	18fb      	adds	r3, r7, r3
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	b25b      	sxtb	r3, r3
}
 8009d84:	0018      	movs	r0, r3
 8009d86:	46bd      	mov	sp, r7
 8009d88:	b00c      	add	sp, #48	@ 0x30
 8009d8a:	bdb0      	pop	{r4, r5, r7, pc}

08009d8c <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, struct bme280_dev *dev)
{
 8009d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d8e:	b085      	sub	sp, #20
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	0002      	movs	r2, r0
 8009d94:	6039      	str	r1, [r7, #0]
 8009d96:	1dfb      	adds	r3, r7, #7
 8009d98:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t sensor_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8009d9a:	250f      	movs	r5, #15
 8009d9c:	197c      	adds	r4, r7, r5
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	0018      	movs	r0, r3
 8009da2:	f001 f8ce 	bl	800af42 <null_ptr_check>
 8009da6:	0003      	movs	r3, r0
 8009da8:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8009daa:	197b      	adds	r3, r7, r5
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	b25b      	sxtb	r3, r3
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d14e      	bne.n	8009e52 <bme280_set_sensor_settings+0xc6>
    {
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8009db4:	197c      	adds	r4, r7, r5
 8009db6:	683a      	ldr	r2, [r7, #0]
 8009db8:	260e      	movs	r6, #14
 8009dba:	19bb      	adds	r3, r7, r6
 8009dbc:	0011      	movs	r1, r2
 8009dbe:	0018      	movs	r0, r3
 8009dc0:	f000 f896 	bl	8009ef0 <bme280_get_sensor_mode>
 8009dc4:	0003      	movs	r3, r0
 8009dc6:	7023      	strb	r3, [r4, #0]

        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8009dc8:	002a      	movs	r2, r5
 8009dca:	18bb      	adds	r3, r7, r2
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	b25b      	sxtb	r3, r3
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d10a      	bne.n	8009dea <bme280_set_sensor_settings+0x5e>
 8009dd4:	19bb      	adds	r3, r7, r6
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d006      	beq.n	8009dea <bme280_set_sensor_settings+0x5e>
        {
            rslt = put_device_to_sleep(dev);
 8009ddc:	18bc      	adds	r4, r7, r2
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	0018      	movs	r0, r3
 8009de2:	f000 fc78 	bl	800a6d6 <put_device_to_sleep>
 8009de6:	0003      	movs	r3, r0
 8009de8:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME280_OK)
 8009dea:	240f      	movs	r4, #15
 8009dec:	193b      	adds	r3, r7, r4
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	b25b      	sxtb	r3, r3
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d12d      	bne.n	8009e52 <bme280_set_sensor_settings+0xc6>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8009df6:	1dfb      	adds	r3, r7, #7
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	0019      	movs	r1, r3
 8009dfc:	2007      	movs	r0, #7
 8009dfe:	f001 f87c 	bl	800aefa <are_settings_changed>
 8009e02:	1e03      	subs	r3, r0, #0
 8009e04:	d00b      	beq.n	8009e1e <bme280_set_sensor_settings+0x92>
            {
                rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	3340      	adds	r3, #64	@ 0x40
 8009e0a:	0019      	movs	r1, r3
 8009e0c:	193c      	adds	r4, r7, r4
 8009e0e:	683a      	ldr	r2, [r7, #0]
 8009e10:	1dfb      	adds	r3, r7, #7
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	0018      	movs	r0, r3
 8009e16:	f000 fa75 	bl	800a304 <set_osr_settings>
 8009e1a:	0003      	movs	r3, r0
 8009e1c:	7023      	strb	r3, [r4, #0]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8009e1e:	240f      	movs	r4, #15
 8009e20:	193b      	adds	r3, r7, r4
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	b25b      	sxtb	r3, r3
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d113      	bne.n	8009e52 <bme280_set_sensor_settings+0xc6>
 8009e2a:	1dfb      	adds	r3, r7, #7
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	0019      	movs	r1, r3
 8009e30:	2018      	movs	r0, #24
 8009e32:	f001 f862 	bl	800aefa <are_settings_changed>
 8009e36:	1e03      	subs	r3, r0, #0
 8009e38:	d00b      	beq.n	8009e52 <bme280_set_sensor_settings+0xc6>
            {
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	3340      	adds	r3, #64	@ 0x40
 8009e3e:	0019      	movs	r1, r3
 8009e40:	193c      	adds	r4, r7, r4
 8009e42:	683a      	ldr	r2, [r7, #0]
 8009e44:	1dfb      	adds	r3, r7, #7
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	0018      	movs	r0, r3
 8009e4a:	f000 fb21 	bl	800a490 <set_filter_standby_settings>
 8009e4e:	0003      	movs	r3, r0
 8009e50:	7023      	strb	r3, [r4, #0]
            }
        }
    }

    return rslt;
 8009e52:	230f      	movs	r3, #15
 8009e54:	18fb      	adds	r3, r7, r3
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	b25b      	sxtb	r3, r3
}
 8009e5a:	0018      	movs	r0, r3
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	b005      	add	sp, #20
 8009e60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009e62 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 8009e62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e64:	b085      	sub	sp, #20
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	0002      	movs	r2, r0
 8009e6a:	6039      	str	r1, [r7, #0]
 8009e6c:	1dfb      	adds	r3, r7, #7
 8009e6e:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8009e70:	250f      	movs	r5, #15
 8009e72:	197c      	adds	r4, r7, r5
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	0018      	movs	r0, r3
 8009e78:	f001 f863 	bl	800af42 <null_ptr_check>
 8009e7c:	0003      	movs	r3, r0
 8009e7e:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 8009e80:	197b      	adds	r3, r7, r5
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	b25b      	sxtb	r3, r3
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d12a      	bne.n	8009ee0 <bme280_set_sensor_mode+0x7e>
    {
        rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8009e8a:	197c      	adds	r4, r7, r5
 8009e8c:	683a      	ldr	r2, [r7, #0]
 8009e8e:	260e      	movs	r6, #14
 8009e90:	19bb      	adds	r3, r7, r6
 8009e92:	0011      	movs	r1, r2
 8009e94:	0018      	movs	r0, r3
 8009e96:	f000 f82b 	bl	8009ef0 <bme280_get_sensor_mode>
 8009e9a:	0003      	movs	r3, r0
 8009e9c:	7023      	strb	r3, [r4, #0]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode
         */
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8009e9e:	002a      	movs	r2, r5
 8009ea0:	18bb      	adds	r3, r7, r2
 8009ea2:	781b      	ldrb	r3, [r3, #0]
 8009ea4:	b25b      	sxtb	r3, r3
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d10a      	bne.n	8009ec0 <bme280_set_sensor_mode+0x5e>
 8009eaa:	19bb      	adds	r3, r7, r6
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d006      	beq.n	8009ec0 <bme280_set_sensor_mode+0x5e>
        {
            rslt = put_device_to_sleep(dev);
 8009eb2:	18bc      	adds	r4, r7, r2
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	0018      	movs	r0, r3
 8009eb8:	f000 fc0d 	bl	800a6d6 <put_device_to_sleep>
 8009ebc:	0003      	movs	r3, r0
 8009ebe:	7023      	strb	r3, [r4, #0]
        }

        /* Set the power mode */
        if (rslt == BME280_OK)
 8009ec0:	220f      	movs	r2, #15
 8009ec2:	18bb      	adds	r3, r7, r2
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	b25b      	sxtb	r3, r3
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d109      	bne.n	8009ee0 <bme280_set_sensor_mode+0x7e>
        {
            rslt = write_power_mode(sensor_mode, dev);
 8009ecc:	18bc      	adds	r4, r7, r2
 8009ece:	683a      	ldr	r2, [r7, #0]
 8009ed0:	1dfb      	adds	r3, r7, #7
 8009ed2:	781b      	ldrb	r3, [r3, #0]
 8009ed4:	0011      	movs	r1, r2
 8009ed6:	0018      	movs	r0, r3
 8009ed8:	f000 fbbd 	bl	800a656 <write_power_mode>
 8009edc:	0003      	movs	r3, r0
 8009ede:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 8009ee0:	230f      	movs	r3, #15
 8009ee2:	18fb      	adds	r3, r7, r3
 8009ee4:	781b      	ldrb	r3, [r3, #0]
 8009ee6:	b25b      	sxtb	r3, r3
}
 8009ee8:	0018      	movs	r0, r3
 8009eea:	46bd      	mov	sp, r7
 8009eec:	b005      	add	sp, #20
 8009eee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009ef0 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, struct bme280_dev *dev)
{
 8009ef0:	b5b0      	push	{r4, r5, r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8009efa:	250f      	movs	r5, #15
 8009efc:	197c      	adds	r4, r7, r5
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	0018      	movs	r0, r3
 8009f02:	f001 f81e 	bl	800af42 <null_ptr_check>
 8009f06:	0003      	movs	r3, r0
 8009f08:	7023      	strb	r3, [r4, #0]

    if ((rslt == BME280_OK) && (sensor_mode != NULL))
 8009f0a:	002a      	movs	r2, r5
 8009f0c:	18bb      	adds	r3, r7, r2
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	b25b      	sxtb	r3, r3
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d113      	bne.n	8009f3e <bme280_get_sensor_mode+0x4e>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d010      	beq.n	8009f3e <bme280_get_sensor_mode+0x4e>
    {
        /* Read the power mode register */
        rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8009f1c:	18bc      	adds	r4, r7, r2
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	6879      	ldr	r1, [r7, #4]
 8009f22:	2201      	movs	r2, #1
 8009f24:	20f4      	movs	r0, #244	@ 0xf4
 8009f26:	f7ff fe47 	bl	8009bb8 <bme280_get_regs>
 8009f2a:	0003      	movs	r3, r0
 8009f2c:	7023      	strb	r3, [r4, #0]

        /* Assign the power mode in the device structure */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	2203      	movs	r2, #3
 8009f34:	4013      	ands	r3, r2
 8009f36:	b2da      	uxtb	r2, r3
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	701a      	strb	r2, [r3, #0]
 8009f3c:	e003      	b.n	8009f46 <bme280_get_sensor_mode+0x56>
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8009f3e:	230f      	movs	r3, #15
 8009f40:	18fb      	adds	r3, r7, r3
 8009f42:	22ff      	movs	r2, #255	@ 0xff
 8009f44:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8009f46:	230f      	movs	r3, #15
 8009f48:	18fb      	adds	r3, r7, r3
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	b25b      	sxtb	r3, r3
}
 8009f4e:	0018      	movs	r0, r3
 8009f50:	46bd      	mov	sp, r7
 8009f52:	b004      	add	sp, #16
 8009f54:	bdb0      	pop	{r4, r5, r7, pc}

08009f56 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(struct bme280_dev *dev)
{
 8009f56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f58:	b085      	sub	sp, #20
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_RESET_ADDR; // UINT8_C(0xE0)
 8009f5e:	260d      	movs	r6, #13
 8009f60:	19bb      	adds	r3, r7, r6
 8009f62:	22e0      	movs	r2, #224	@ 0xe0
 8009f64:	701a      	strb	r2, [r3, #0]
    uint8_t status_reg = 0;
 8009f66:	230c      	movs	r3, #12
 8009f68:	18fb      	adds	r3, r7, r3
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	701a      	strb	r2, [r3, #0]
    uint8_t try_run = 5;
 8009f6e:	230e      	movs	r3, #14
 8009f70:	18fb      	adds	r3, r7, r3
 8009f72:	2205      	movs	r2, #5
 8009f74:	701a      	strb	r2, [r3, #0]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 8009f76:	230b      	movs	r3, #11
 8009f78:	18fb      	adds	r3, r7, r3
 8009f7a:	22b6      	movs	r2, #182	@ 0xb6
 8009f7c:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8009f7e:	250f      	movs	r5, #15
 8009f80:	197c      	adds	r4, r7, r5
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	0018      	movs	r0, r3
 8009f86:	f000 ffdc 	bl	800af42 <null_ptr_check>
 8009f8a:	0003      	movs	r3, r0
 8009f8c:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8009f8e:	197b      	adds	r3, r7, r5
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	b25b      	sxtb	r3, r3
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d13e      	bne.n	800a016 <bme280_soft_reset+0xc0>
    {
        /* Write the soft reset command in the sensor */
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8009f98:	197c      	adds	r4, r7, r5
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	220b      	movs	r2, #11
 8009f9e:	18b9      	adds	r1, r7, r2
 8009fa0:	19b8      	adds	r0, r7, r6
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f7ff fe5a 	bl	8009c5c <bme280_set_regs>
 8009fa8:	0003      	movs	r3, r0
 8009faa:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 8009fac:	197b      	adds	r3, r7, r5
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	b25b      	sxtb	r3, r3
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d12f      	bne.n	800a016 <bme280_soft_reset+0xc0>
        {
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                dev->delay_us(2, dev->intf_ptr);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	695a      	ldr	r2, [r3, #20]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	0019      	movs	r1, r3
 8009fc0:	2002      	movs	r0, #2
 8009fc2:	4790      	blx	r2
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 8009fc4:	250f      	movs	r5, #15
 8009fc6:	197c      	adds	r4, r7, r5
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	260c      	movs	r6, #12
 8009fcc:	19b9      	adds	r1, r7, r6
 8009fce:	2201      	movs	r2, #1
 8009fd0:	20f3      	movs	r0, #243	@ 0xf3
 8009fd2:	f7ff fdf1 	bl	8009bb8 <bme280_get_regs>
 8009fd6:	0003      	movs	r3, r0
 8009fd8:	7023      	strb	r3, [r4, #0]

            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 8009fda:	197b      	adds	r3, r7, r5
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	b25b      	sxtb	r3, r3
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d10d      	bne.n	800a000 <bme280_soft_reset+0xaa>
 8009fe4:	220e      	movs	r2, #14
 8009fe6:	18bb      	adds	r3, r7, r2
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	18ba      	adds	r2, r7, r2
 8009fec:	1e59      	subs	r1, r3, #1
 8009fee:	7011      	strb	r1, [r2, #0]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d005      	beq.n	800a000 <bme280_soft_reset+0xaa>
 8009ff4:	19bb      	adds	r3, r7, r6
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	001a      	movs	r2, r3
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	4013      	ands	r3, r2
 8009ffe:	d1da      	bne.n	8009fb6 <bme280_soft_reset+0x60>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 800a000:	230c      	movs	r3, #12
 800a002:	18fb      	adds	r3, r7, r3
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	001a      	movs	r2, r3
 800a008:	2301      	movs	r3, #1
 800a00a:	4013      	ands	r3, r2
 800a00c:	d003      	beq.n	800a016 <bme280_soft_reset+0xc0>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 800a00e:	230f      	movs	r3, #15
 800a010:	18fb      	adds	r3, r7, r3
 800a012:	22fa      	movs	r2, #250	@ 0xfa
 800a014:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    return rslt;
 800a016:	230f      	movs	r3, #15
 800a018:	18fb      	adds	r3, r7, r3
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	b25b      	sxtb	r3, r3
}
 800a01e:	0018      	movs	r0, r3
 800a020:	46bd      	mov	sp, r7
 800a022:	b005      	add	sp, #20
 800a024:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a026 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user../ struct bme280_data
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 800a026:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a028:	b08b      	sub	sp, #44	@ 0x2c
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	607a      	str	r2, [r7, #4]
 800a030:	230f      	movs	r3, #15
 800a032:	18fb      	adds	r3, r7, r3
 800a034:	1c02      	adds	r2, r0, #0
 800a036:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 800a038:	261c      	movs	r6, #28
 800a03a:	19bb      	adds	r3, r7, r6
 800a03c:	2200      	movs	r2, #0
 800a03e:	601a      	str	r2, [r3, #0]
 800a040:	2200      	movs	r2, #0
 800a042:	605a      	str	r2, [r3, #4]
    struct bme280_uncomp_data uncomp_data = {0};
 800a044:	2310      	movs	r3, #16
 800a046:	18fb      	adds	r3, r7, r3
 800a048:	0018      	movs	r0, r3
 800a04a:	230c      	movs	r3, #12
 800a04c:	001a      	movs	r2, r3
 800a04e:	2100      	movs	r1, #0
 800a050:	f003 fbb4 	bl	800d7bc <memset>

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800a054:	2527      	movs	r5, #39	@ 0x27
 800a056:	197c      	adds	r4, r7, r5
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	0018      	movs	r0, r3
 800a05c:	f000 ff71 	bl	800af42 <null_ptr_check>
 800a060:	0003      	movs	r3, r0
 800a062:	7023      	strb	r3, [r4, #0]

    if ((rslt == BME280_OK) && (comp_data != NULL))
 800a064:	197b      	adds	r3, r7, r5
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	b25b      	sxtb	r3, r3
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d128      	bne.n	800a0c0 <bme280_get_sensor_data+0x9a>
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d025      	beq.n	800a0c0 <bme280_get_sensor_data+0x9a>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 800a074:	197c      	adds	r4, r7, r5
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	19b9      	adds	r1, r7, r6
 800a07a:	2208      	movs	r2, #8
 800a07c:	20f7      	movs	r0, #247	@ 0xf7
 800a07e:	f7ff fd9b 	bl	8009bb8 <bme280_get_regs>
 800a082:	0003      	movs	r3, r0
 800a084:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 800a086:	002c      	movs	r4, r5
 800a088:	193b      	adds	r3, r7, r4
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	b25b      	sxtb	r3, r3
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d11a      	bne.n	800a0c8 <bme280_get_sensor_data+0xa2>
        {
            /* Parse the read data from the sensor */
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 800a092:	2310      	movs	r3, #16
 800a094:	18fa      	adds	r2, r7, r3
 800a096:	19bb      	adds	r3, r7, r6
 800a098:	0011      	movs	r1, r2
 800a09a:	0018      	movs	r0, r3
 800a09c:	f000 f81c 	bl	800a0d8 <bme280_parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	001d      	movs	r5, r3
 800a0a4:	3518      	adds	r5, #24
 800a0a6:	193c      	adds	r4, r7, r4
 800a0a8:	68ba      	ldr	r2, [r7, #8]
 800a0aa:	2310      	movs	r3, #16
 800a0ac:	18f9      	adds	r1, r7, r3
 800a0ae:	230f      	movs	r3, #15
 800a0b0:	18fb      	adds	r3, r7, r3
 800a0b2:	7818      	ldrb	r0, [r3, #0]
 800a0b4:	002b      	movs	r3, r5
 800a0b6:	f000 f853 	bl	800a160 <bme280_compensate_data>
 800a0ba:	0003      	movs	r3, r0
 800a0bc:	7023      	strb	r3, [r4, #0]
        if (rslt == BME280_OK)
 800a0be:	e003      	b.n	800a0c8 <bme280_get_sensor_data+0xa2>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800a0c0:	2327      	movs	r3, #39	@ 0x27
 800a0c2:	18fb      	adds	r3, r7, r3
 800a0c4:	22ff      	movs	r2, #255	@ 0xff
 800a0c6:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800a0c8:	2327      	movs	r3, #39	@ 0x27
 800a0ca:	18fb      	adds	r3, r7, r3
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	b25b      	sxtb	r3, r3
}
 800a0d0:	0018      	movs	r0, r3
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	b00b      	add	sp, #44	@ 0x2c
 800a0d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a0d8 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b086      	sub	sp, #24
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	031b      	lsls	r3, r3, #12
 800a0e8:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	011b      	lsls	r3, r3, #4
 800a0f2:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	3302      	adds	r3, #2
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	091b      	lsrs	r3, r3, #4
 800a0fc:	b2db      	uxtb	r3, r3
 800a0fe:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 800a100:	697a      	ldr	r2, [r7, #20]
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	431a      	orrs	r2, r3
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	431a      	orrs	r2, r3
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << 12;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	3303      	adds	r3, #3
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	031b      	lsls	r3, r3, #12
 800a116:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 4;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	3304      	adds	r3, #4
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	011b      	lsls	r3, r3, #4
 800a120:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	3305      	adds	r3, #5
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	091b      	lsrs	r3, r3, #4
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 800a12e:	697a      	ldr	r2, [r7, #20]
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	431a      	orrs	r2, r3
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	431a      	orrs	r2, r3
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for humidity data */
    data_msb = (uint32_t)reg_data[6] << 8;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	3306      	adds	r3, #6
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	021b      	lsls	r3, r3, #8
 800a144:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[7];
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	3307      	adds	r3, #7
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	613b      	str	r3, [r7, #16]
    uncomp_data->humidity = data_msb | data_lsb;
 800a14e:	697a      	ldr	r2, [r7, #20]
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	431a      	orrs	r2, r3
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	609a      	str	r2, [r3, #8]
}
 800a158:	46c0      	nop			@ (mov r8, r8)
 800a15a:	46bd      	mov	sp, r7
 800a15c:	b006      	add	sp, #24
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b086      	sub	sp, #24
 800a164:	af00      	add	r7, sp, #0
 800a166:	60b9      	str	r1, [r7, #8]
 800a168:	607a      	str	r2, [r7, #4]
 800a16a:	603b      	str	r3, [r7, #0]
 800a16c:	210f      	movs	r1, #15
 800a16e:	187b      	adds	r3, r7, r1
 800a170:	1c02      	adds	r2, r0, #0
 800a172:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME280_OK;
 800a174:	2317      	movs	r3, #23
 800a176:	18fb      	adds	r3, r7, r3
 800a178:	2200      	movs	r2, #0
 800a17a:	701a      	strb	r2, [r3, #0]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d03b      	beq.n	800a1fa <bme280_compensate_data+0x9a>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d038      	beq.n	800a1fa <bme280_compensate_data+0x9a>
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d035      	beq.n	800a1fa <bme280_compensate_data+0x9a>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2200      	movs	r2, #0
 800a192:	605a      	str	r2, [r3, #4]
        comp_data->pressure = 0;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	601a      	str	r2, [r3, #0]
        comp_data->humidity = 0;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	609a      	str	r2, [r3, #8]

        /* If pressure or temperature component is selected */
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 800a1a0:	187b      	adds	r3, r7, r1
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	2207      	movs	r2, #7
 800a1a6:	4013      	ands	r3, r2
 800a1a8:	d008      	beq.n	800a1bc <bme280_compensate_data+0x5c>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 800a1aa:	683a      	ldr	r2, [r7, #0]
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	0011      	movs	r1, r2
 800a1b0:	0018      	movs	r0, r3
 800a1b2:	f000 faf1 	bl	800a798 <compensate_temperature>
 800a1b6:	0002      	movs	r2, r0
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	605a      	str	r2, [r3, #4]
        }

        if (sensor_comp & BME280_PRESS)
 800a1bc:	230f      	movs	r3, #15
 800a1be:	18fb      	adds	r3, r7, r3
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	4013      	ands	r3, r2
 800a1c6:	d008      	beq.n	800a1da <bme280_compensate_data+0x7a>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 800a1c8:	683a      	ldr	r2, [r7, #0]
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	0011      	movs	r1, r2
 800a1ce:	0018      	movs	r0, r3
 800a1d0:	f000 fb48 	bl	800a864 <compensate_pressure>
 800a1d4:	0002      	movs	r2, r0
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	601a      	str	r2, [r3, #0]
        }

        if (sensor_comp & BME280_HUM)
 800a1da:	230f      	movs	r3, #15
 800a1dc:	18fb      	adds	r3, r7, r3
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	2204      	movs	r2, #4
 800a1e2:	4013      	ands	r3, r2
 800a1e4:	d00d      	beq.n	800a202 <bme280_compensate_data+0xa2>
        {
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 800a1e6:	683a      	ldr	r2, [r7, #0]
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	0011      	movs	r1, r2
 800a1ec:	0018      	movs	r0, r3
 800a1ee:	f000 fc3b 	bl	800aa68 <compensate_humidity>
 800a1f2:	0002      	movs	r2, r0
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	609a      	str	r2, [r3, #8]
        if (sensor_comp & BME280_HUM)
 800a1f8:	e003      	b.n	800a202 <bme280_compensate_data+0xa2>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800a1fa:	2317      	movs	r3, #23
 800a1fc:	18fb      	adds	r3, r7, r3
 800a1fe:	22ff      	movs	r2, #255	@ 0xff
 800a200:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800a202:	2317      	movs	r3, #23
 800a204:	18fb      	adds	r3, r7, r3
 800a206:	781b      	ldrb	r3, [r3, #0]
 800a208:	b25b      	sxtb	r3, r3
}
 800a20a:	0018      	movs	r0, r3
 800a20c:	46bd      	mov	sp, r7
 800a20e:	b006      	add	sp, #24
 800a210:	bd80      	pop	{r7, pc}
	...

0800a214 <bme280_cal_meas_delay>:
/*!
 * @brief This API is used to calculate the maximum delay in milliseconds required for the
 * temperature/pressure/humidity(which ever at enabled) measurement to complete.
 */
uint32_t bme280_cal_meas_delay(const struct bme280_settings *settings)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b086      	sub	sp, #24
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
    uint8_t temp_osr;
    uint8_t pres_osr;
    uint8_t hum_osr;

    /*Array to map OSR config register value to actual OSR */
    uint8_t osr_sett_to_act_osr[] = {0, 1, 2, 4, 8, 16};
 800a21c:	2008      	movs	r0, #8
 800a21e:	183b      	adds	r3, r7, r0
 800a220:	4a35      	ldr	r2, [pc, #212]	@ (800a2f8 <bme280_cal_meas_delay+0xe4>)
 800a222:	6811      	ldr	r1, [r2, #0]
 800a224:	6019      	str	r1, [r3, #0]
 800a226:	8892      	ldrh	r2, [r2, #4]
 800a228:	809a      	strh	r2, [r3, #4]

    /* Mapping osr settings to the actual osr values e.g. 0b101 -> osr X16  */
    if (settings->osr_t <= 5)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	785b      	ldrb	r3, [r3, #1]
 800a22e:	2b05      	cmp	r3, #5
 800a230:	d808      	bhi.n	800a244 <bme280_cal_meas_delay+0x30>
    {
        temp_osr = osr_sett_to_act_osr[settings->osr_t];
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	785b      	ldrb	r3, [r3, #1]
 800a236:	0019      	movs	r1, r3
 800a238:	2317      	movs	r3, #23
 800a23a:	18fb      	adds	r3, r7, r3
 800a23c:	183a      	adds	r2, r7, r0
 800a23e:	5c52      	ldrb	r2, [r2, r1]
 800a240:	701a      	strb	r2, [r3, #0]
 800a242:	e003      	b.n	800a24c <bme280_cal_meas_delay+0x38>
    }
    else
    {
        temp_osr = 16;
 800a244:	2317      	movs	r3, #23
 800a246:	18fb      	adds	r3, r7, r3
 800a248:	2210      	movs	r2, #16
 800a24a:	701a      	strb	r2, [r3, #0]
    }

    if (settings->osr_p <= 5)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	2b05      	cmp	r3, #5
 800a252:	d809      	bhi.n	800a268 <bme280_cal_meas_delay+0x54>
    {
        pres_osr = osr_sett_to_act_osr[settings->osr_p];
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	0019      	movs	r1, r3
 800a25a:	2316      	movs	r3, #22
 800a25c:	18fb      	adds	r3, r7, r3
 800a25e:	2208      	movs	r2, #8
 800a260:	18ba      	adds	r2, r7, r2
 800a262:	5c52      	ldrb	r2, [r2, r1]
 800a264:	701a      	strb	r2, [r3, #0]
 800a266:	e003      	b.n	800a270 <bme280_cal_meas_delay+0x5c>
    }
    else
    {
        pres_osr = 16;
 800a268:	2316      	movs	r3, #22
 800a26a:	18fb      	adds	r3, r7, r3
 800a26c:	2210      	movs	r2, #16
 800a26e:	701a      	strb	r2, [r3, #0]
    }

    if (settings->osr_h <= 5)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	789b      	ldrb	r3, [r3, #2]
 800a274:	2b05      	cmp	r3, #5
 800a276:	d809      	bhi.n	800a28c <bme280_cal_meas_delay+0x78>
    {
        hum_osr = osr_sett_to_act_osr[settings->osr_h];
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	789b      	ldrb	r3, [r3, #2]
 800a27c:	0019      	movs	r1, r3
 800a27e:	2315      	movs	r3, #21
 800a280:	18fb      	adds	r3, r7, r3
 800a282:	2208      	movs	r2, #8
 800a284:	18ba      	adds	r2, r7, r2
 800a286:	5c52      	ldrb	r2, [r2, r1]
 800a288:	701a      	strb	r2, [r3, #0]
 800a28a:	e003      	b.n	800a294 <bme280_cal_meas_delay+0x80>
    }
    else
    {
        hum_osr = 16;
 800a28c:	2315      	movs	r3, #21
 800a28e:	18fb      	adds	r3, r7, r3
 800a290:	2210      	movs	r2, #16
 800a292:	701a      	strb	r2, [r3, #0]
    }

    max_delay =
        (uint32_t)((BME280_MEAS_OFFSET + (BME280_MEAS_DUR * temp_osr) +
 800a294:	2317      	movs	r3, #23
 800a296:	18fb      	adds	r3, r7, r3
 800a298:	781a      	ldrb	r2, [r3, #0]
 800a29a:	0013      	movs	r3, r2
 800a29c:	00db      	lsls	r3, r3, #3
 800a29e:	189b      	adds	r3, r3, r2
 800a2a0:	019b      	lsls	r3, r3, #6
 800a2a2:	1a9b      	subs	r3, r3, r2
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	4a15      	ldr	r2, [pc, #84]	@ (800a2fc <bme280_cal_meas_delay+0xe8>)
 800a2a8:	1899      	adds	r1, r3, r2
                    ((BME280_MEAS_DUR * pres_osr) + BME280_PRES_HUM_MEAS_OFFSET) +
 800a2aa:	2316      	movs	r3, #22
 800a2ac:	18fb      	adds	r3, r7, r3
 800a2ae:	781a      	ldrb	r2, [r3, #0]
 800a2b0:	0013      	movs	r3, r2
 800a2b2:	00db      	lsls	r3, r3, #3
 800a2b4:	189b      	adds	r3, r3, r2
 800a2b6:	019b      	lsls	r3, r3, #6
 800a2b8:	1a9b      	subs	r3, r3, r2
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	4a10      	ldr	r2, [pc, #64]	@ (800a300 <bme280_cal_meas_delay+0xec>)
 800a2be:	4694      	mov	ip, r2
 800a2c0:	4463      	add	r3, ip
        (uint32_t)((BME280_MEAS_OFFSET + (BME280_MEAS_DUR * temp_osr) +
 800a2c2:	18c9      	adds	r1, r1, r3
                    ((BME280_MEAS_DUR * hum_osr) + BME280_PRES_HUM_MEAS_OFFSET)) /
 800a2c4:	2315      	movs	r3, #21
 800a2c6:	18fb      	adds	r3, r7, r3
 800a2c8:	781a      	ldrb	r2, [r3, #0]
 800a2ca:	0013      	movs	r3, r2
 800a2cc:	00db      	lsls	r3, r3, #3
 800a2ce:	189b      	adds	r3, r3, r2
 800a2d0:	019b      	lsls	r3, r3, #6
 800a2d2:	1a9b      	subs	r3, r3, r2
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	4a0a      	ldr	r2, [pc, #40]	@ (800a300 <bme280_cal_meas_delay+0xec>)
 800a2d8:	4694      	mov	ip, r2
 800a2da:	4463      	add	r3, ip
                    ((BME280_MEAS_DUR * pres_osr) + BME280_PRES_HUM_MEAS_OFFSET) +
 800a2dc:	18cb      	adds	r3, r1, r3
                    ((BME280_MEAS_DUR * hum_osr) + BME280_PRES_HUM_MEAS_OFFSET)) /
 800a2de:	22fa      	movs	r2, #250	@ 0xfa
 800a2e0:	0091      	lsls	r1, r2, #2
 800a2e2:	0018      	movs	r0, r3
 800a2e4:	f7f5 ffb6 	bl	8000254 <__divsi3>
 800a2e8:	0003      	movs	r3, r0
    max_delay =
 800a2ea:	613b      	str	r3, [r7, #16]
                   BME280_MEAS_SCALING_FACTOR);

    return max_delay;
 800a2ec:	693b      	ldr	r3, [r7, #16]
}
 800a2ee:	0018      	movs	r0, r3
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	b006      	add	sp, #24
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	46c0      	nop			@ (mov r8, r8)
 800a2f8:	0800f968 	.word	0x0800f968
 800a2fc:	000004e2 	.word	0x000004e2
 800a300:	0000023f 	.word	0x0000023f

0800a304 <set_osr_settings>:
/*!
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings, struct bme280_dev *dev)
{
 800a304:	b590      	push	{r4, r7, lr}
 800a306:	b087      	sub	sp, #28
 800a308:	af00      	add	r7, sp, #0
 800a30a:	60b9      	str	r1, [r7, #8]
 800a30c:	607a      	str	r2, [r7, #4]
 800a30e:	210f      	movs	r1, #15
 800a310:	187b      	adds	r3, r7, r1
 800a312:	1c02      	adds	r2, r0, #0
 800a314:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 800a316:	2017      	movs	r0, #23
 800a318:	183b      	adds	r3, r7, r0
 800a31a:	2201      	movs	r2, #1
 800a31c:	701a      	strb	r2, [r3, #0]

    if (desired_settings & BME280_OSR_HUM_SEL)
 800a31e:	187b      	adds	r3, r7, r1
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	2204      	movs	r2, #4
 800a324:	4013      	ands	r3, r2
 800a326:	d008      	beq.n	800a33a <set_osr_settings+0x36>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 800a328:	183c      	adds	r4, r7, r0
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	0011      	movs	r1, r2
 800a330:	0018      	movs	r0, r3
 800a332:	f000 f81b 	bl	800a36c <set_osr_humidity_settings>
 800a336:	0003      	movs	r3, r0
 800a338:	7023      	strb	r3, [r4, #0]
    }

    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 800a33a:	200f      	movs	r0, #15
 800a33c:	183b      	adds	r3, r7, r0
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	2203      	movs	r2, #3
 800a342:	4013      	ands	r3, r2
 800a344:	d00a      	beq.n	800a35c <set_osr_settings+0x58>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 800a346:	2317      	movs	r3, #23
 800a348:	18fc      	adds	r4, r7, r3
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	68b9      	ldr	r1, [r7, #8]
 800a34e:	183b      	adds	r3, r7, r0
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	0018      	movs	r0, r3
 800a354:	f000 f851 	bl	800a3fa <set_osr_press_temp_settings>
 800a358:	0003      	movs	r3, r0
 800a35a:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800a35c:	2317      	movs	r3, #23
 800a35e:	18fb      	adds	r3, r7, r3
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	b25b      	sxtb	r3, r3
}
 800a364:	0018      	movs	r0, r3
 800a366:	46bd      	mov	sp, r7
 800a368:	b007      	add	sp, #28
 800a36a:	bd90      	pop	{r4, r7, pc}

0800a36c <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 800a36c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a36e:	b085      	sub	sp, #20
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 800a376:	250c      	movs	r5, #12
 800a378:	197b      	adds	r3, r7, r5
 800a37a:	22f2      	movs	r2, #242	@ 0xf2
 800a37c:	701a      	strb	r2, [r3, #0]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	789b      	ldrb	r3, [r3, #2]
 800a382:	2207      	movs	r2, #7
 800a384:	4013      	ands	r3, r2
 800a386:	b2da      	uxtb	r2, r3
 800a388:	210e      	movs	r1, #14
 800a38a:	187b      	adds	r3, r7, r1
 800a38c:	701a      	strb	r2, [r3, #0]

    /* Write the humidity control value in the register */
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 800a38e:	260f      	movs	r6, #15
 800a390:	19bc      	adds	r4, r7, r6
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	1879      	adds	r1, r7, r1
 800a396:	1978      	adds	r0, r7, r5
 800a398:	2201      	movs	r2, #1
 800a39a:	f7ff fc5f 	bl	8009c5c <bme280_set_regs>
 800a39e:	0003      	movs	r3, r0
 800a3a0:	7023      	strb	r3, [r4, #0]

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 800a3a2:	0031      	movs	r1, r6
 800a3a4:	187b      	adds	r3, r7, r1
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	b25b      	sxtb	r3, r3
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d11d      	bne.n	800a3ea <set_osr_humidity_settings+0x7e>
    {
        reg_addr = BME280_CTRL_MEAS_ADDR;
 800a3ae:	197b      	adds	r3, r7, r5
 800a3b0:	22f4      	movs	r2, #244	@ 0xf4
 800a3b2:	701a      	strb	r2, [r3, #0]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 800a3b4:	197b      	adds	r3, r7, r5
 800a3b6:	7818      	ldrb	r0, [r3, #0]
 800a3b8:	000e      	movs	r6, r1
 800a3ba:	187c      	adds	r4, r7, r1
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	220d      	movs	r2, #13
 800a3c0:	18b9      	adds	r1, r7, r2
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	f7ff fbf8 	bl	8009bb8 <bme280_get_regs>
 800a3c8:	0003      	movs	r3, r0
 800a3ca:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 800a3cc:	19bb      	adds	r3, r7, r6
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	b25b      	sxtb	r3, r3
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d109      	bne.n	800a3ea <set_osr_humidity_settings+0x7e>
        {
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 800a3d6:	19bc      	adds	r4, r7, r6
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	220d      	movs	r2, #13
 800a3dc:	18b9      	adds	r1, r7, r2
 800a3de:	1978      	adds	r0, r7, r5
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	f7ff fc3b 	bl	8009c5c <bme280_set_regs>
 800a3e6:	0003      	movs	r3, r0
 800a3e8:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 800a3ea:	230f      	movs	r3, #15
 800a3ec:	18fb      	adds	r3, r7, r3
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	b25b      	sxtb	r3, r3
}
 800a3f2:	0018      	movs	r0, r3
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	b005      	add	sp, #20
 800a3f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a3fa <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 800a3fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3fc:	b087      	sub	sp, #28
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	60b9      	str	r1, [r7, #8]
 800a402:	607a      	str	r2, [r7, #4]
 800a404:	250f      	movs	r5, #15
 800a406:	197b      	adds	r3, r7, r5
 800a408:	1c02      	adds	r2, r0, #0
 800a40a:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 800a40c:	2116      	movs	r1, #22
 800a40e:	187b      	adds	r3, r7, r1
 800a410:	22f4      	movs	r2, #244	@ 0xf4
 800a412:	701a      	strb	r2, [r3, #0]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800a414:	187b      	adds	r3, r7, r1
 800a416:	7818      	ldrb	r0, [r3, #0]
 800a418:	2617      	movs	r6, #23
 800a41a:	19bc      	adds	r4, r7, r6
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2215      	movs	r2, #21
 800a420:	18b9      	adds	r1, r7, r2
 800a422:	2201      	movs	r2, #1
 800a424:	f7ff fbc8 	bl	8009bb8 <bme280_get_regs>
 800a428:	0003      	movs	r3, r0
 800a42a:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 800a42c:	19bb      	adds	r3, r7, r6
 800a42e:	781b      	ldrb	r3, [r3, #0]
 800a430:	b25b      	sxtb	r3, r3
 800a432:	2b00      	cmp	r3, #0
 800a434:	d124      	bne.n	800a480 <set_osr_press_temp_settings+0x86>
    {
        if (desired_settings & BME280_OSR_PRESS_SEL)
 800a436:	197b      	adds	r3, r7, r5
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	2201      	movs	r2, #1
 800a43c:	4013      	ands	r3, r2
 800a43e:	d006      	beq.n	800a44e <set_osr_press_temp_settings+0x54>
        {
            fill_osr_press_settings(&reg_data, settings);
 800a440:	68ba      	ldr	r2, [r7, #8]
 800a442:	2315      	movs	r3, #21
 800a444:	18fb      	adds	r3, r7, r3
 800a446:	0011      	movs	r1, r2
 800a448:	0018      	movs	r0, r3
 800a44a:	f000 f89f 	bl	800a58c <fill_osr_press_settings>
        }

        if (desired_settings & BME280_OSR_TEMP_SEL)
 800a44e:	230f      	movs	r3, #15
 800a450:	18fb      	adds	r3, r7, r3
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	2202      	movs	r2, #2
 800a456:	4013      	ands	r3, r2
 800a458:	d006      	beq.n	800a468 <set_osr_press_temp_settings+0x6e>
        {
            fill_osr_temp_settings(&reg_data, settings);
 800a45a:	68ba      	ldr	r2, [r7, #8]
 800a45c:	2315      	movs	r3, #21
 800a45e:	18fb      	adds	r3, r7, r3
 800a460:	0011      	movs	r1, r2
 800a462:	0018      	movs	r0, r3
 800a464:	f000 f8ad 	bl	800a5c2 <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800a468:	2317      	movs	r3, #23
 800a46a:	18fc      	adds	r4, r7, r3
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2215      	movs	r2, #21
 800a470:	18b9      	adds	r1, r7, r2
 800a472:	2216      	movs	r2, #22
 800a474:	18b8      	adds	r0, r7, r2
 800a476:	2201      	movs	r2, #1
 800a478:	f7ff fbf0 	bl	8009c5c <bme280_set_regs>
 800a47c:	0003      	movs	r3, r0
 800a47e:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800a480:	2317      	movs	r3, #23
 800a482:	18fb      	adds	r3, r7, r3
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	b25b      	sxtb	r3, r3
}
 800a488:	0018      	movs	r0, r3
 800a48a:	46bd      	mov	sp, r7
 800a48c:	b007      	add	sp, #28
 800a48e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a490 <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 800a490:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a492:	b087      	sub	sp, #28
 800a494:	af00      	add	r7, sp, #0
 800a496:	60b9      	str	r1, [r7, #8]
 800a498:	607a      	str	r2, [r7, #4]
 800a49a:	250f      	movs	r5, #15
 800a49c:	197b      	adds	r3, r7, r5
 800a49e:	1c02      	adds	r2, r0, #0
 800a4a0:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 800a4a2:	2116      	movs	r1, #22
 800a4a4:	187b      	adds	r3, r7, r1
 800a4a6:	22f5      	movs	r2, #245	@ 0xf5
 800a4a8:	701a      	strb	r2, [r3, #0]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800a4aa:	187b      	adds	r3, r7, r1
 800a4ac:	7818      	ldrb	r0, [r3, #0]
 800a4ae:	2617      	movs	r6, #23
 800a4b0:	19bc      	adds	r4, r7, r6
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2215      	movs	r2, #21
 800a4b6:	18b9      	adds	r1, r7, r2
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	f7ff fb7d 	bl	8009bb8 <bme280_get_regs>
 800a4be:	0003      	movs	r3, r0
 800a4c0:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 800a4c2:	19bb      	adds	r3, r7, r6
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	b25b      	sxtb	r3, r3
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d124      	bne.n	800a516 <set_filter_standby_settings+0x86>
    {
        if (desired_settings & BME280_FILTER_SEL)
 800a4cc:	197b      	adds	r3, r7, r5
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	2208      	movs	r2, #8
 800a4d2:	4013      	ands	r3, r2
 800a4d4:	d006      	beq.n	800a4e4 <set_filter_standby_settings+0x54>
        {
            fill_filter_settings(&reg_data, settings);
 800a4d6:	68ba      	ldr	r2, [r7, #8]
 800a4d8:	2315      	movs	r3, #21
 800a4da:	18fb      	adds	r3, r7, r3
 800a4dc:	0011      	movs	r1, r2
 800a4de:	0018      	movs	r0, r3
 800a4e0:	f000 f821 	bl	800a526 <fill_filter_settings>
        }

        if (desired_settings & BME280_STANDBY_SEL)
 800a4e4:	230f      	movs	r3, #15
 800a4e6:	18fb      	adds	r3, r7, r3
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	2210      	movs	r2, #16
 800a4ec:	4013      	ands	r3, r2
 800a4ee:	d006      	beq.n	800a4fe <set_filter_standby_settings+0x6e>
        {
            fill_standby_settings(&reg_data, settings);
 800a4f0:	68ba      	ldr	r2, [r7, #8]
 800a4f2:	2315      	movs	r3, #21
 800a4f4:	18fb      	adds	r3, r7, r3
 800a4f6:	0011      	movs	r1, r2
 800a4f8:	0018      	movs	r0, r3
 800a4fa:	f000 f82f 	bl	800a55c <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800a4fe:	2317      	movs	r3, #23
 800a500:	18fc      	adds	r4, r7, r3
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2215      	movs	r2, #21
 800a506:	18b9      	adds	r1, r7, r2
 800a508:	2216      	movs	r2, #22
 800a50a:	18b8      	adds	r0, r7, r2
 800a50c:	2201      	movs	r2, #1
 800a50e:	f7ff fba5 	bl	8009c5c <bme280_set_regs>
 800a512:	0003      	movs	r3, r0
 800a514:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800a516:	2317      	movs	r3, #23
 800a518:	18fb      	adds	r3, r7, r3
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	b25b      	sxtb	r3, r3
}
 800a51e:	0018      	movs	r0, r3
 800a520:	46bd      	mov	sp, r7
 800a522:	b007      	add	sp, #28
 800a524:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a526 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800a526:	b580      	push	{r7, lr}
 800a528:	b082      	sub	sp, #8
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	6078      	str	r0, [r7, #4]
 800a52e:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	b25b      	sxtb	r3, r3
 800a536:	221c      	movs	r2, #28
 800a538:	4393      	bics	r3, r2
 800a53a:	b25a      	sxtb	r2, r3
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	78db      	ldrb	r3, [r3, #3]
 800a540:	009b      	lsls	r3, r3, #2
 800a542:	b25b      	sxtb	r3, r3
 800a544:	211c      	movs	r1, #28
 800a546:	400b      	ands	r3, r1
 800a548:	b25b      	sxtb	r3, r3
 800a54a:	4313      	orrs	r3, r2
 800a54c:	b25b      	sxtb	r3, r3
 800a54e:	b2da      	uxtb	r2, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	701a      	strb	r2, [r3, #0]
}
 800a554:	46c0      	nop			@ (mov r8, r8)
 800a556:	46bd      	mov	sp, r7
 800a558:	b002      	add	sp, #8
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b082      	sub	sp, #8
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	b25b      	sxtb	r3, r3
 800a56c:	221f      	movs	r2, #31
 800a56e:	4013      	ands	r3, r2
 800a570:	b25a      	sxtb	r2, r3
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	791b      	ldrb	r3, [r3, #4]
 800a576:	015b      	lsls	r3, r3, #5
 800a578:	b25b      	sxtb	r3, r3
 800a57a:	4313      	orrs	r3, r2
 800a57c:	b25b      	sxtb	r3, r3
 800a57e:	b2da      	uxtb	r2, r3
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	701a      	strb	r2, [r3, #0]
}
 800a584:	46c0      	nop			@ (mov r8, r8)
 800a586:	46bd      	mov	sp, r7
 800a588:	b002      	add	sp, #8
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b082      	sub	sp, #8
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	b25b      	sxtb	r3, r3
 800a59c:	221c      	movs	r2, #28
 800a59e:	4393      	bics	r3, r2
 800a5a0:	b25a      	sxtb	r2, r3
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	009b      	lsls	r3, r3, #2
 800a5a8:	b25b      	sxtb	r3, r3
 800a5aa:	211c      	movs	r1, #28
 800a5ac:	400b      	ands	r3, r1
 800a5ae:	b25b      	sxtb	r3, r3
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	b25b      	sxtb	r3, r3
 800a5b4:	b2da      	uxtb	r2, r3
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	701a      	strb	r2, [r3, #0]
}
 800a5ba:	46c0      	nop			@ (mov r8, r8)
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	b002      	add	sp, #8
 800a5c0:	bd80      	pop	{r7, pc}

0800a5c2 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800a5c2:	b580      	push	{r7, lr}
 800a5c4:	b082      	sub	sp, #8
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
 800a5ca:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	b25b      	sxtb	r3, r3
 800a5d2:	221f      	movs	r2, #31
 800a5d4:	4013      	ands	r3, r2
 800a5d6:	b25a      	sxtb	r2, r3
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	785b      	ldrb	r3, [r3, #1]
 800a5dc:	015b      	lsls	r3, r3, #5
 800a5de:	b25b      	sxtb	r3, r3
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	b25b      	sxtb	r3, r3
 800a5e4:	b2da      	uxtb	r2, r3
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	701a      	strb	r2, [r3, #0]
}
 800a5ea:	46c0      	nop			@ (mov r8, r8)
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	b002      	add	sp, #8
 800a5f0:	bd80      	pop	{r7, pc}

0800a5f2 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 800a5f2:	b580      	push	{r7, lr}
 800a5f4:	b082      	sub	sp, #8
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
 800a5fa:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	2207      	movs	r2, #7
 800a602:	4013      	ands	r3, r2
 800a604:	b2da      	uxtb	r2, r3
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	3302      	adds	r3, #2
 800a60e:	781b      	ldrb	r3, [r3, #0]
 800a610:	109b      	asrs	r3, r3, #2
 800a612:	b2db      	uxtb	r3, r3
 800a614:	2207      	movs	r2, #7
 800a616:	4013      	ands	r3, r2
 800a618:	b2da      	uxtb	r2, r3
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	3302      	adds	r3, #2
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	095b      	lsrs	r3, r3, #5
 800a626:	b2da      	uxtb	r2, r3
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	3303      	adds	r3, #3
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	109b      	asrs	r3, r3, #2
 800a634:	b2db      	uxtb	r3, r3
 800a636:	2207      	movs	r2, #7
 800a638:	4013      	ands	r3, r2
 800a63a:	b2da      	uxtb	r2, r3
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	3303      	adds	r3, #3
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	095b      	lsrs	r3, r3, #5
 800a648:	b2da      	uxtb	r2, r3
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	711a      	strb	r2, [r3, #4]
}
 800a64e:	46c0      	nop			@ (mov r8, r8)
 800a650:	46bd      	mov	sp, r7
 800a652:	b002      	add	sp, #8
 800a654:	bd80      	pop	{r7, pc}

0800a656 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 800a656:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a658:	b085      	sub	sp, #20
 800a65a:	af00      	add	r7, sp, #0
 800a65c:	0002      	movs	r2, r0
 800a65e:	6039      	str	r1, [r7, #0]
 800a660:	1dfb      	adds	r3, r7, #7
 800a662:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 800a664:	260e      	movs	r6, #14
 800a666:	19bb      	adds	r3, r7, r6
 800a668:	22f4      	movs	r2, #244	@ 0xf4
 800a66a:	701a      	strb	r2, [r3, #0]

    /* Variable to store the value read from power mode register */
    uint8_t sensor_mode_reg_val;

    /* Read the power mode register */
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 800a66c:	19bb      	adds	r3, r7, r6
 800a66e:	7818      	ldrb	r0, [r3, #0]
 800a670:	240f      	movs	r4, #15
 800a672:	193c      	adds	r4, r7, r4
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	250d      	movs	r5, #13
 800a678:	1979      	adds	r1, r7, r5
 800a67a:	2201      	movs	r2, #1
 800a67c:	f7ff fa9c 	bl	8009bb8 <bme280_get_regs>
 800a680:	0003      	movs	r3, r0
 800a682:	7023      	strb	r3, [r4, #0]

    /* Set the power mode */
    if (rslt == BME280_OK)
 800a684:	240f      	movs	r4, #15
 800a686:	193b      	adds	r3, r7, r4
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	b25b      	sxtb	r3, r3
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d11a      	bne.n	800a6c6 <write_power_mode+0x70>
    {
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 800a690:	0028      	movs	r0, r5
 800a692:	183b      	adds	r3, r7, r0
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	b25b      	sxtb	r3, r3
 800a698:	2203      	movs	r2, #3
 800a69a:	4393      	bics	r3, r2
 800a69c:	b25a      	sxtb	r2, r3
 800a69e:	1dfb      	adds	r3, r7, #7
 800a6a0:	781b      	ldrb	r3, [r3, #0]
 800a6a2:	b25b      	sxtb	r3, r3
 800a6a4:	2103      	movs	r1, #3
 800a6a6:	400b      	ands	r3, r1
 800a6a8:	b25b      	sxtb	r3, r3
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	b25b      	sxtb	r3, r3
 800a6ae:	b2da      	uxtb	r2, r3
 800a6b0:	183b      	adds	r3, r7, r0
 800a6b2:	701a      	strb	r2, [r3, #0]

        /* Write the power mode in the register */
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 800a6b4:	193c      	adds	r4, r7, r4
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	1839      	adds	r1, r7, r0
 800a6ba:	19b8      	adds	r0, r7, r6
 800a6bc:	2201      	movs	r2, #1
 800a6be:	f7ff facd 	bl	8009c5c <bme280_set_regs>
 800a6c2:	0003      	movs	r3, r0
 800a6c4:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800a6c6:	230f      	movs	r3, #15
 800a6c8:	18fb      	adds	r3, r7, r3
 800a6ca:	781b      	ldrb	r3, [r3, #0]
 800a6cc:	b25b      	sxtb	r3, r3
}
 800a6ce:	0018      	movs	r0, r3
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	b005      	add	sp, #20
 800a6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a6d6 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
int8_t put_device_to_sleep(struct bme280_dev *dev)
{
 800a6d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6d8:	b087      	sub	sp, #28
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];
    struct bme280_settings settings;

    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 800a6de:	2517      	movs	r5, #23
 800a6e0:	197c      	adds	r4, r7, r5
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2610      	movs	r6, #16
 800a6e6:	19b9      	adds	r1, r7, r6
 800a6e8:	2204      	movs	r2, #4
 800a6ea:	20f2      	movs	r0, #242	@ 0xf2
 800a6ec:	f7ff fa64 	bl	8009bb8 <bme280_get_regs>
 800a6f0:	0003      	movs	r3, r0
 800a6f2:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 800a6f4:	002c      	movs	r4, r5
 800a6f6:	193b      	adds	r3, r7, r4
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	b25b      	sxtb	r3, r3
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d11d      	bne.n	800a73c <put_device_to_sleep+0x66>
    {
        parse_device_settings(reg_data, &settings);
 800a700:	2308      	movs	r3, #8
 800a702:	18fa      	adds	r2, r7, r3
 800a704:	19bb      	adds	r3, r7, r6
 800a706:	0011      	movs	r1, r2
 800a708:	0018      	movs	r0, r3
 800a70a:	f7ff ff72 	bl	800a5f2 <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 800a70e:	0025      	movs	r5, r4
 800a710:	193c      	adds	r4, r7, r4
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	0018      	movs	r0, r3
 800a716:	f7ff fc1e 	bl	8009f56 <bme280_soft_reset>
 800a71a:	0003      	movs	r3, r0
 800a71c:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 800a71e:	197b      	adds	r3, r7, r5
 800a720:	781b      	ldrb	r3, [r3, #0]
 800a722:	b25b      	sxtb	r3, r3
 800a724:	2b00      	cmp	r3, #0
 800a726:	d109      	bne.n	800a73c <put_device_to_sleep+0x66>
        {
            rslt = reload_device_settings(&settings, dev);
 800a728:	197c      	adds	r4, r7, r5
 800a72a:	687a      	ldr	r2, [r7, #4]
 800a72c:	2308      	movs	r3, #8
 800a72e:	18fb      	adds	r3, r7, r3
 800a730:	0011      	movs	r1, r2
 800a732:	0018      	movs	r0, r3
 800a734:	f000 f80a 	bl	800a74c <reload_device_settings>
 800a738:	0003      	movs	r3, r0
 800a73a:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 800a73c:	2317      	movs	r3, #23
 800a73e:	18fb      	adds	r3, r7, r3
 800a740:	781b      	ldrb	r3, [r3, #0]
 800a742:	b25b      	sxtb	r3, r3
}
 800a744:	0018      	movs	r0, r3
 800a746:	46bd      	mov	sp, r7
 800a748:	b007      	add	sp, #28
 800a74a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a74c <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 800a74c:	b5b0      	push	{r4, r5, r7, lr}
 800a74e:	b084      	sub	sp, #16
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 800a756:	250f      	movs	r5, #15
 800a758:	197c      	adds	r4, r7, r5
 800a75a:	683a      	ldr	r2, [r7, #0]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	0019      	movs	r1, r3
 800a760:	201f      	movs	r0, #31
 800a762:	f7ff fdcf 	bl	800a304 <set_osr_settings>
 800a766:	0003      	movs	r3, r0
 800a768:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 800a76a:	197b      	adds	r3, r7, r5
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	b25b      	sxtb	r3, r3
 800a770:	2b00      	cmp	r3, #0
 800a772:	d108      	bne.n	800a786 <reload_device_settings+0x3a>
    {
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 800a774:	197c      	adds	r4, r7, r5
 800a776:	683a      	ldr	r2, [r7, #0]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	0019      	movs	r1, r3
 800a77c:	201f      	movs	r0, #31
 800a77e:	f7ff fe87 	bl	800a490 <set_filter_standby_settings>
 800a782:	0003      	movs	r3, r0
 800a784:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800a786:	230f      	movs	r3, #15
 800a788:	18fb      	adds	r3, r7, r3
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	b25b      	sxtb	r3, r3
}
 800a78e:	0018      	movs	r0, r3
 800a790:	46bd      	mov	sp, r7
 800a792:	b004      	add	sp, #16
 800a794:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a798 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
                                      struct bme280_calib_data *calib_data)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b088      	sub	sp, #32
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
    int32_t var1;
    int32_t var2;
    int32_t temperature;
    int32_t temperature_min = -4000;
 800a7a2:	4b2b      	ldr	r3, [pc, #172]	@ (800a850 <compensate_temperature+0xb8>)
 800a7a4:	61bb      	str	r3, [r7, #24]
    int32_t temperature_max = 8500;
 800a7a6:	4b2b      	ldr	r3, [pc, #172]	@ (800a854 <compensate_temperature+0xbc>)
 800a7a8:	617b      	str	r3, [r7, #20]

    var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_t1 * 2));
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	08db      	lsrs	r3, r3, #3
 800a7b0:	683a      	ldr	r2, [r7, #0]
 800a7b2:	8812      	ldrh	r2, [r2, #0]
 800a7b4:	0052      	lsls	r2, r2, #1
 800a7b6:	1a9b      	subs	r3, r3, r2
 800a7b8:	613b      	str	r3, [r7, #16]
    var1 = (var1 * ((int32_t)calib_data->dig_t2)) / 2048;
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	2202      	movs	r2, #2
 800a7be:	5e9b      	ldrsh	r3, [r3, r2]
 800a7c0:	001a      	movs	r2, r3
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	4353      	muls	r3, r2
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	da02      	bge.n	800a7d0 <compensate_temperature+0x38>
 800a7ca:	4a23      	ldr	r2, [pc, #140]	@ (800a858 <compensate_temperature+0xc0>)
 800a7cc:	4694      	mov	ip, r2
 800a7ce:	4463      	add	r3, ip
 800a7d0:	12db      	asrs	r3, r3, #11
 800a7d2:	613b      	str	r3, [r7, #16]
    var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_t1));
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	091b      	lsrs	r3, r3, #4
 800a7da:	683a      	ldr	r2, [r7, #0]
 800a7dc:	8812      	ldrh	r2, [r2, #0]
 800a7de:	1a9b      	subs	r3, r3, r2
 800a7e0:	60fb      	str	r3, [r7, #12]
    var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_t3)) / 16384;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	435b      	muls	r3, r3
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	da02      	bge.n	800a7f0 <compensate_temperature+0x58>
 800a7ea:	4a1c      	ldr	r2, [pc, #112]	@ (800a85c <compensate_temperature+0xc4>)
 800a7ec:	4694      	mov	ip, r2
 800a7ee:	4463      	add	r3, ip
 800a7f0:	131b      	asrs	r3, r3, #12
 800a7f2:	001a      	movs	r2, r3
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	2104      	movs	r1, #4
 800a7f8:	5e5b      	ldrsh	r3, [r3, r1]
 800a7fa:	4353      	muls	r3, r2
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	da02      	bge.n	800a806 <compensate_temperature+0x6e>
 800a800:	4a17      	ldr	r2, [pc, #92]	@ (800a860 <compensate_temperature+0xc8>)
 800a802:	4694      	mov	ip, r2
 800a804:	4463      	add	r3, ip
 800a806:	139b      	asrs	r3, r3, #14
 800a808:	60fb      	str	r3, [r7, #12]
    calib_data->t_fine = var1 + var2;
 800a80a:	693a      	ldr	r2, [r7, #16]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	18d2      	adds	r2, r2, r3
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	625a      	str	r2, [r3, #36]	@ 0x24
    temperature = (calib_data->t_fine * 5 + 128) / 256;
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a818:	0013      	movs	r3, r2
 800a81a:	009b      	lsls	r3, r3, #2
 800a81c:	189b      	adds	r3, r3, r2
 800a81e:	3380      	adds	r3, #128	@ 0x80
 800a820:	2b00      	cmp	r3, #0
 800a822:	da00      	bge.n	800a826 <compensate_temperature+0x8e>
 800a824:	33ff      	adds	r3, #255	@ 0xff
 800a826:	121b      	asrs	r3, r3, #8
 800a828:	61fb      	str	r3, [r7, #28]

    if (temperature < temperature_min)
 800a82a:	69fa      	ldr	r2, [r7, #28]
 800a82c:	69bb      	ldr	r3, [r7, #24]
 800a82e:	429a      	cmp	r2, r3
 800a830:	da02      	bge.n	800a838 <compensate_temperature+0xa0>
    {
        temperature = temperature_min;
 800a832:	69bb      	ldr	r3, [r7, #24]
 800a834:	61fb      	str	r3, [r7, #28]
 800a836:	e005      	b.n	800a844 <compensate_temperature+0xac>
    }
    else if (temperature > temperature_max)
 800a838:	69fa      	ldr	r2, [r7, #28]
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	429a      	cmp	r2, r3
 800a83e:	dd01      	ble.n	800a844 <compensate_temperature+0xac>
    {
        temperature = temperature_max;
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	61fb      	str	r3, [r7, #28]
    }
    __asm volatile("nop");
 800a844:	46c0      	nop			@ (mov r8, r8)
    return temperature;
 800a846:	69fb      	ldr	r3, [r7, #28]
}
 800a848:	0018      	movs	r0, r3
 800a84a:	46bd      	mov	sp, r7
 800a84c:	b008      	add	sp, #32
 800a84e:	bd80      	pop	{r7, pc}
 800a850:	fffff060 	.word	0xfffff060
 800a854:	00002134 	.word	0x00002134
 800a858:	000007ff 	.word	0x000007ff
 800a85c:	00000fff 	.word	0x00000fff
 800a860:	00003fff 	.word	0x00003fff

0800a864 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in integer data type.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                    const struct bme280_calib_data *calib_data)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b08a      	sub	sp, #40	@ 0x28
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	6039      	str	r1, [r7, #0]
    int32_t var2;
    int32_t var3;
    int32_t var4;
    uint32_t var5;
    uint32_t pressure;
    uint32_t pressure_min = 30000;
 800a86e:	4b75      	ldr	r3, [pc, #468]	@ (800aa44 <compensate_pressure+0x1e0>)
 800a870:	623b      	str	r3, [r7, #32]
    uint32_t pressure_max = 110000;
 800a872:	4b75      	ldr	r3, [pc, #468]	@ (800aa48 <compensate_pressure+0x1e4>)
 800a874:	61fb      	str	r3, [r7, #28]

    var1 = (((int32_t)calib_data->t_fine) / 2) - (int32_t)64000;
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	da00      	bge.n	800a880 <compensate_pressure+0x1c>
 800a87e:	3301      	adds	r3, #1
 800a880:	105b      	asrs	r3, r3, #1
 800a882:	4a72      	ldr	r2, [pc, #456]	@ (800aa4c <compensate_pressure+0x1e8>)
 800a884:	4694      	mov	ip, r2
 800a886:	4463      	add	r3, ip
 800a888:	61bb      	str	r3, [r7, #24]
    var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t)calib_data->dig_p6);
 800a88a:	69bb      	ldr	r3, [r7, #24]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	da00      	bge.n	800a892 <compensate_pressure+0x2e>
 800a890:	3303      	adds	r3, #3
 800a892:	109b      	asrs	r3, r3, #2
 800a894:	001a      	movs	r2, r3
 800a896:	69bb      	ldr	r3, [r7, #24]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	da00      	bge.n	800a89e <compensate_pressure+0x3a>
 800a89c:	3303      	adds	r3, #3
 800a89e:	109b      	asrs	r3, r3, #2
 800a8a0:	4353      	muls	r3, r2
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	da02      	bge.n	800a8ac <compensate_pressure+0x48>
 800a8a6:	4a6a      	ldr	r2, [pc, #424]	@ (800aa50 <compensate_pressure+0x1ec>)
 800a8a8:	4694      	mov	ip, r2
 800a8aa:	4463      	add	r3, ip
 800a8ac:	12db      	asrs	r3, r3, #11
 800a8ae:	001a      	movs	r2, r3
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	2110      	movs	r1, #16
 800a8b4:	5e5b      	ldrsh	r3, [r3, r1]
 800a8b6:	4353      	muls	r3, r2
 800a8b8:	617b      	str	r3, [r7, #20]
    var2 = var2 + ((var1 * ((int32_t)calib_data->dig_p5)) * 2);
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	220e      	movs	r2, #14
 800a8be:	5e9b      	ldrsh	r3, [r3, r2]
 800a8c0:	001a      	movs	r2, r3
 800a8c2:	69bb      	ldr	r3, [r7, #24]
 800a8c4:	4353      	muls	r3, r2
 800a8c6:	005b      	lsls	r3, r3, #1
 800a8c8:	697a      	ldr	r2, [r7, #20]
 800a8ca:	18d3      	adds	r3, r2, r3
 800a8cc:	617b      	str	r3, [r7, #20]
    var2 = (var2 / 4) + (((int32_t)calib_data->dig_p4) * 65536);
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	da00      	bge.n	800a8d6 <compensate_pressure+0x72>
 800a8d4:	3303      	adds	r3, #3
 800a8d6:	109b      	asrs	r3, r3, #2
 800a8d8:	001a      	movs	r2, r3
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	210c      	movs	r1, #12
 800a8de:	5e5b      	ldrsh	r3, [r3, r1]
 800a8e0:	041b      	lsls	r3, r3, #16
 800a8e2:	18d3      	adds	r3, r2, r3
 800a8e4:	617b      	str	r3, [r7, #20]
    var3 = (calib_data->dig_p3 * (((var1 / 4) * (var1 / 4)) / 8192)) / 8;
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	220a      	movs	r2, #10
 800a8ea:	5e9b      	ldrsh	r3, [r3, r2]
 800a8ec:	001a      	movs	r2, r3
 800a8ee:	69bb      	ldr	r3, [r7, #24]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	da00      	bge.n	800a8f6 <compensate_pressure+0x92>
 800a8f4:	3303      	adds	r3, #3
 800a8f6:	109b      	asrs	r3, r3, #2
 800a8f8:	0019      	movs	r1, r3
 800a8fa:	69bb      	ldr	r3, [r7, #24]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	da00      	bge.n	800a902 <compensate_pressure+0x9e>
 800a900:	3303      	adds	r3, #3
 800a902:	109b      	asrs	r3, r3, #2
 800a904:	434b      	muls	r3, r1
 800a906:	2b00      	cmp	r3, #0
 800a908:	da02      	bge.n	800a910 <compensate_pressure+0xac>
 800a90a:	4952      	ldr	r1, [pc, #328]	@ (800aa54 <compensate_pressure+0x1f0>)
 800a90c:	468c      	mov	ip, r1
 800a90e:	4463      	add	r3, ip
 800a910:	135b      	asrs	r3, r3, #13
 800a912:	4353      	muls	r3, r2
 800a914:	2b00      	cmp	r3, #0
 800a916:	da00      	bge.n	800a91a <compensate_pressure+0xb6>
 800a918:	3307      	adds	r3, #7
 800a91a:	10db      	asrs	r3, r3, #3
 800a91c:	613b      	str	r3, [r7, #16]
    var4 = (((int32_t)calib_data->dig_p2) * var1) / 2;
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	2208      	movs	r2, #8
 800a922:	5e9b      	ldrsh	r3, [r3, r2]
 800a924:	001a      	movs	r2, r3
 800a926:	69bb      	ldr	r3, [r7, #24]
 800a928:	4353      	muls	r3, r2
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	da00      	bge.n	800a930 <compensate_pressure+0xcc>
 800a92e:	3301      	adds	r3, #1
 800a930:	105b      	asrs	r3, r3, #1
 800a932:	60fb      	str	r3, [r7, #12]
    var1 = (var3 + var4) / 262144;
 800a934:	693a      	ldr	r2, [r7, #16]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	18d3      	adds	r3, r2, r3
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	da02      	bge.n	800a944 <compensate_pressure+0xe0>
 800a93e:	4a46      	ldr	r2, [pc, #280]	@ (800aa58 <compensate_pressure+0x1f4>)
 800a940:	4694      	mov	ip, r2
 800a942:	4463      	add	r3, ip
 800a944:	149b      	asrs	r3, r3, #18
 800a946:	61bb      	str	r3, [r7, #24]
    var1 = (((32768 + var1)) * ((int32_t)calib_data->dig_p1)) / 32768;
 800a948:	69bb      	ldr	r3, [r7, #24]
 800a94a:	2280      	movs	r2, #128	@ 0x80
 800a94c:	0212      	lsls	r2, r2, #8
 800a94e:	4694      	mov	ip, r2
 800a950:	4463      	add	r3, ip
 800a952:	683a      	ldr	r2, [r7, #0]
 800a954:	88d2      	ldrh	r2, [r2, #6]
 800a956:	4353      	muls	r3, r2
 800a958:	2b00      	cmp	r3, #0
 800a95a:	da02      	bge.n	800a962 <compensate_pressure+0xfe>
 800a95c:	4a3f      	ldr	r2, [pc, #252]	@ (800aa5c <compensate_pressure+0x1f8>)
 800a95e:	4694      	mov	ip, r2
 800a960:	4463      	add	r3, ip
 800a962:	13db      	asrs	r3, r3, #15
 800a964:	61bb      	str	r3, [r7, #24]

    /* avoid exception caused by division by zero */
    if (var1)
 800a966:	69bb      	ldr	r3, [r7, #24]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d064      	beq.n	800aa36 <compensate_pressure+0x1d2>
    {
        var5 = (uint32_t)((uint32_t)1048576) - uncomp_data->pressure;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2280      	movs	r2, #128	@ 0x80
 800a972:	0352      	lsls	r2, r2, #13
 800a974:	1ad3      	subs	r3, r2, r3
 800a976:	60bb      	str	r3, [r7, #8]
        pressure = ((uint32_t)(var5 - (uint32_t)(var2 / 4096))) * 3125;
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	da02      	bge.n	800a984 <compensate_pressure+0x120>
 800a97e:	4a38      	ldr	r2, [pc, #224]	@ (800aa60 <compensate_pressure+0x1fc>)
 800a980:	4694      	mov	ip, r2
 800a982:	4463      	add	r3, ip
 800a984:	131b      	asrs	r3, r3, #12
 800a986:	001a      	movs	r2, r3
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	1a9b      	subs	r3, r3, r2
 800a98c:	4a35      	ldr	r2, [pc, #212]	@ (800aa64 <compensate_pressure+0x200>)
 800a98e:	4353      	muls	r3, r2
 800a990:	627b      	str	r3, [r7, #36]	@ 0x24

        if (pressure < 0x80000000)
 800a992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a994:	2b00      	cmp	r3, #0
 800a996:	db09      	blt.n	800a9ac <compensate_pressure+0x148>
        {
            pressure = (pressure << 1) / ((uint32_t)var1);
 800a998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a99a:	005b      	lsls	r3, r3, #1
 800a99c:	69ba      	ldr	r2, [r7, #24]
 800a99e:	0011      	movs	r1, r2
 800a9a0:	0018      	movs	r0, r3
 800a9a2:	f7f5 fbcd 	bl	8000140 <__udivsi3>
 800a9a6:	0003      	movs	r3, r0
 800a9a8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9aa:	e007      	b.n	800a9bc <compensate_pressure+0x158>
        }
        else
        {
            pressure = (pressure / (uint32_t)var1) * 2;
 800a9ac:	69bb      	ldr	r3, [r7, #24]
 800a9ae:	0019      	movs	r1, r3
 800a9b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a9b2:	f7f5 fbc5 	bl	8000140 <__udivsi3>
 800a9b6:	0003      	movs	r3, r0
 800a9b8:	005b      	lsls	r3, r3, #1
 800a9ba:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        var1 = (((int32_t)calib_data->dig_p9) * ((int32_t)(((pressure / 8) * (pressure / 8)) / 8192))) / 4096;
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	2216      	movs	r2, #22
 800a9c0:	5e9b      	ldrsh	r3, [r3, r2]
 800a9c2:	0019      	movs	r1, r3
 800a9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c6:	08db      	lsrs	r3, r3, #3
 800a9c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9ca:	08d2      	lsrs	r2, r2, #3
 800a9cc:	4353      	muls	r3, r2
 800a9ce:	0b5b      	lsrs	r3, r3, #13
 800a9d0:	434b      	muls	r3, r1
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	da02      	bge.n	800a9dc <compensate_pressure+0x178>
 800a9d6:	4a22      	ldr	r2, [pc, #136]	@ (800aa60 <compensate_pressure+0x1fc>)
 800a9d8:	4694      	mov	ip, r2
 800a9da:	4463      	add	r3, ip
 800a9dc:	131b      	asrs	r3, r3, #12
 800a9de:	61bb      	str	r3, [r7, #24]
        var2 = (((int32_t)(pressure / 4)) * ((int32_t)calib_data->dig_p8)) / 8192;
 800a9e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e2:	089b      	lsrs	r3, r3, #2
 800a9e4:	001a      	movs	r2, r3
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	2114      	movs	r1, #20
 800a9ea:	5e5b      	ldrsh	r3, [r3, r1]
 800a9ec:	4353      	muls	r3, r2
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	da02      	bge.n	800a9f8 <compensate_pressure+0x194>
 800a9f2:	4a18      	ldr	r2, [pc, #96]	@ (800aa54 <compensate_pressure+0x1f0>)
 800a9f4:	4694      	mov	ip, r2
 800a9f6:	4463      	add	r3, ip
 800a9f8:	135b      	asrs	r3, r3, #13
 800a9fa:	617b      	str	r3, [r7, #20]
        pressure = (uint32_t)((int32_t)pressure + ((var1 + var2 + calib_data->dig_p7) / 16));
 800a9fc:	69ba      	ldr	r2, [r7, #24]
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	18d3      	adds	r3, r2, r3
 800aa02:	683a      	ldr	r2, [r7, #0]
 800aa04:	2112      	movs	r1, #18
 800aa06:	5e52      	ldrsh	r2, [r2, r1]
 800aa08:	189b      	adds	r3, r3, r2
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	da00      	bge.n	800aa10 <compensate_pressure+0x1ac>
 800aa0e:	330f      	adds	r3, #15
 800aa10:	111b      	asrs	r3, r3, #4
 800aa12:	001a      	movs	r2, r3
 800aa14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa16:	18d3      	adds	r3, r2, r3
 800aa18:	627b      	str	r3, [r7, #36]	@ 0x24

        if (pressure < pressure_min)
 800aa1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa1c:	6a3b      	ldr	r3, [r7, #32]
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d202      	bcs.n	800aa28 <compensate_pressure+0x1c4>
        {
            pressure = pressure_min;
 800aa22:	6a3b      	ldr	r3, [r7, #32]
 800aa24:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa26:	e008      	b.n	800aa3a <compensate_pressure+0x1d6>
        }
        else if (pressure > pressure_max)
 800aa28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa2a:	69fb      	ldr	r3, [r7, #28]
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d904      	bls.n	800aa3a <compensate_pressure+0x1d6>
        {
            pressure = pressure_max;
 800aa30:	69fb      	ldr	r3, [r7, #28]
 800aa32:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa34:	e001      	b.n	800aa3a <compensate_pressure+0x1d6>
        }
    }
    else
    {
        pressure = pressure_min;
 800aa36:	6a3b      	ldr	r3, [r7, #32]
 800aa38:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return pressure;
 800aa3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aa3c:	0018      	movs	r0, r3
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	b00a      	add	sp, #40	@ 0x28
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	00007530 	.word	0x00007530
 800aa48:	0001adb0 	.word	0x0001adb0
 800aa4c:	ffff0600 	.word	0xffff0600
 800aa50:	000007ff 	.word	0x000007ff
 800aa54:	00001fff 	.word	0x00001fff
 800aa58:	0003ffff 	.word	0x0003ffff
 800aa5c:	00007fff 	.word	0x00007fff
 800aa60:	00000fff 	.word	0x00000fff
 800aa64:	00000c35 	.word	0x00000c35

0800aa68 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                    const struct bme280_calib_data *calib_data)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b08a      	sub	sp, #40	@ 0x28
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
    int32_t var2;
    int32_t var3;
    int32_t var4;
    int32_t var5;
    uint32_t humidity;
    uint32_t humidity_max = 102400;
 800aa72:	23c8      	movs	r3, #200	@ 0xc8
 800aa74:	025b      	lsls	r3, r3, #9
 800aa76:	623b      	str	r3, [r7, #32]

    var1 = calib_data->t_fine - ((int32_t)76800);
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa7c:	4a53      	ldr	r2, [pc, #332]	@ (800abcc <compensate_humidity+0x164>)
 800aa7e:	4694      	mov	ip, r2
 800aa80:	4463      	add	r3, ip
 800aa82:	61fb      	str	r3, [r7, #28]
    var2 = (int32_t)(uncomp_data->humidity * 16384);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	689b      	ldr	r3, [r3, #8]
 800aa88:	039b      	lsls	r3, r3, #14
 800aa8a:	61bb      	str	r3, [r7, #24]
    var3 = (int32_t)(((int32_t)calib_data->dig_h4) * 1048576);
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	221e      	movs	r2, #30
 800aa90:	5e9b      	ldrsh	r3, [r3, r2]
 800aa92:	051b      	lsls	r3, r3, #20
 800aa94:	617b      	str	r3, [r7, #20]
    var4 = ((int32_t)calib_data->dig_h5) * var1;
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	2220      	movs	r2, #32
 800aa9a:	5e9b      	ldrsh	r3, [r3, r2]
 800aa9c:	001a      	movs	r2, r3
 800aa9e:	69fb      	ldr	r3, [r7, #28]
 800aaa0:	4353      	muls	r3, r2
 800aaa2:	613b      	str	r3, [r7, #16]
    var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 800aaa4:	69ba      	ldr	r2, [r7, #24]
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	1ad2      	subs	r2, r2, r3
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	1ad3      	subs	r3, r2, r3
 800aaae:	2280      	movs	r2, #128	@ 0x80
 800aab0:	01d2      	lsls	r2, r2, #7
 800aab2:	4694      	mov	ip, r2
 800aab4:	4463      	add	r3, ip
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	da02      	bge.n	800aac0 <compensate_humidity+0x58>
 800aaba:	4a45      	ldr	r2, [pc, #276]	@ (800abd0 <compensate_humidity+0x168>)
 800aabc:	4694      	mov	ip, r2
 800aabe:	4463      	add	r3, ip
 800aac0:	13db      	asrs	r3, r3, #15
 800aac2:	60fb      	str	r3, [r7, #12]
    var2 = (var1 * ((int32_t)calib_data->dig_h6)) / 1024;
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	2222      	movs	r2, #34	@ 0x22
 800aac8:	569b      	ldrsb	r3, [r3, r2]
 800aaca:	001a      	movs	r2, r3
 800aacc:	69fb      	ldr	r3, [r7, #28]
 800aace:	4353      	muls	r3, r2
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	da02      	bge.n	800aada <compensate_humidity+0x72>
 800aad4:	4a3f      	ldr	r2, [pc, #252]	@ (800abd4 <compensate_humidity+0x16c>)
 800aad6:	4694      	mov	ip, r2
 800aad8:	4463      	add	r3, ip
 800aada:	129b      	asrs	r3, r3, #10
 800aadc:	61bb      	str	r3, [r7, #24]
    var3 = (var1 * ((int32_t)calib_data->dig_h3)) / 2048;
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	7f1b      	ldrb	r3, [r3, #28]
 800aae2:	001a      	movs	r2, r3
 800aae4:	69fb      	ldr	r3, [r7, #28]
 800aae6:	4353      	muls	r3, r2
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	da02      	bge.n	800aaf2 <compensate_humidity+0x8a>
 800aaec:	4a3a      	ldr	r2, [pc, #232]	@ (800abd8 <compensate_humidity+0x170>)
 800aaee:	4694      	mov	ip, r2
 800aaf0:	4463      	add	r3, ip
 800aaf2:	12db      	asrs	r3, r3, #11
 800aaf4:	617b      	str	r3, [r7, #20]
    var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	2280      	movs	r2, #128	@ 0x80
 800aafa:	0212      	lsls	r2, r2, #8
 800aafc:	4694      	mov	ip, r2
 800aafe:	4463      	add	r3, ip
 800ab00:	69ba      	ldr	r2, [r7, #24]
 800ab02:	4353      	muls	r3, r2
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	da02      	bge.n	800ab0e <compensate_humidity+0xa6>
 800ab08:	4a32      	ldr	r2, [pc, #200]	@ (800abd4 <compensate_humidity+0x16c>)
 800ab0a:	4694      	mov	ip, r2
 800ab0c:	4463      	add	r3, ip
 800ab0e:	129b      	asrs	r3, r3, #10
 800ab10:	2280      	movs	r2, #128	@ 0x80
 800ab12:	0392      	lsls	r2, r2, #14
 800ab14:	4694      	mov	ip, r2
 800ab16:	4463      	add	r3, ip
 800ab18:	613b      	str	r3, [r7, #16]
    var2 = ((var4 * ((int32_t)calib_data->dig_h2)) + 8192) / 16384;
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	221a      	movs	r2, #26
 800ab1e:	5e9b      	ldrsh	r3, [r3, r2]
 800ab20:	001a      	movs	r2, r3
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	4353      	muls	r3, r2
 800ab26:	2280      	movs	r2, #128	@ 0x80
 800ab28:	0192      	lsls	r2, r2, #6
 800ab2a:	4694      	mov	ip, r2
 800ab2c:	4463      	add	r3, ip
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	da02      	bge.n	800ab38 <compensate_humidity+0xd0>
 800ab32:	4a2a      	ldr	r2, [pc, #168]	@ (800abdc <compensate_humidity+0x174>)
 800ab34:	4694      	mov	ip, r2
 800ab36:	4463      	add	r3, ip
 800ab38:	139b      	asrs	r3, r3, #14
 800ab3a:	61bb      	str	r3, [r7, #24]
    var3 = var5 * var2;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	69ba      	ldr	r2, [r7, #24]
 800ab40:	4353      	muls	r3, r2
 800ab42:	617b      	str	r3, [r7, #20]
    var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	da02      	bge.n	800ab50 <compensate_humidity+0xe8>
 800ab4a:	4a21      	ldr	r2, [pc, #132]	@ (800abd0 <compensate_humidity+0x168>)
 800ab4c:	4694      	mov	ip, r2
 800ab4e:	4463      	add	r3, ip
 800ab50:	13db      	asrs	r3, r3, #15
 800ab52:	001a      	movs	r2, r3
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	da02      	bge.n	800ab60 <compensate_humidity+0xf8>
 800ab5a:	491d      	ldr	r1, [pc, #116]	@ (800abd0 <compensate_humidity+0x168>)
 800ab5c:	468c      	mov	ip, r1
 800ab5e:	4463      	add	r3, ip
 800ab60:	13db      	asrs	r3, r3, #15
 800ab62:	4353      	muls	r3, r2
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	da00      	bge.n	800ab6a <compensate_humidity+0x102>
 800ab68:	337f      	adds	r3, #127	@ 0x7f
 800ab6a:	11db      	asrs	r3, r3, #7
 800ab6c:	613b      	str	r3, [r7, #16]
    var5 = var3 - ((var4 * ((int32_t)calib_data->dig_h1)) / 16);
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	7e1b      	ldrb	r3, [r3, #24]
 800ab72:	001a      	movs	r2, r3
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	4353      	muls	r3, r2
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	da00      	bge.n	800ab7e <compensate_humidity+0x116>
 800ab7c:	330f      	adds	r3, #15
 800ab7e:	111b      	asrs	r3, r3, #4
 800ab80:	425b      	negs	r3, r3
 800ab82:	001a      	movs	r2, r3
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	189b      	adds	r3, r3, r2
 800ab88:	60fb      	str	r3, [r7, #12]
    var5 = (var5 < 0 ? 0 : var5);
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	da00      	bge.n	800ab92 <compensate_humidity+0x12a>
 800ab90:	2300      	movs	r3, #0
 800ab92:	60fb      	str	r3, [r7, #12]
    var5 = (var5 > 419430400 ? 419430400 : var5);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	22c8      	movs	r2, #200	@ 0xc8
 800ab98:	0552      	lsls	r2, r2, #21
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	dd01      	ble.n	800aba2 <compensate_humidity+0x13a>
 800ab9e:	23c8      	movs	r3, #200	@ 0xc8
 800aba0:	055b      	lsls	r3, r3, #21
 800aba2:	60fb      	str	r3, [r7, #12]
    humidity = (uint32_t)(var5 / 4096);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	da02      	bge.n	800abb0 <compensate_humidity+0x148>
 800abaa:	4a0d      	ldr	r2, [pc, #52]	@ (800abe0 <compensate_humidity+0x178>)
 800abac:	4694      	mov	ip, r2
 800abae:	4463      	add	r3, ip
 800abb0:	131b      	asrs	r3, r3, #12
 800abb2:	627b      	str	r3, [r7, #36]	@ 0x24

    if (humidity > humidity_max)
 800abb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abb6:	6a3b      	ldr	r3, [r7, #32]
 800abb8:	429a      	cmp	r2, r3
 800abba:	d901      	bls.n	800abc0 <compensate_humidity+0x158>
    {
        humidity = humidity_max;
 800abbc:	6a3b      	ldr	r3, [r7, #32]
 800abbe:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return humidity;
 800abc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800abc2:	0018      	movs	r0, r3
 800abc4:	46bd      	mov	sp, r7
 800abc6:	b00a      	add	sp, #40	@ 0x28
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	46c0      	nop			@ (mov r8, r8)
 800abcc:	fffed400 	.word	0xfffed400
 800abd0:	00007fff 	.word	0x00007fff
 800abd4:	000003ff 	.word	0x000003ff
 800abd8:	000007ff 	.word	0x000007ff
 800abdc:	00003fff 	.word	0x00003fff
 800abe0:	00000fff 	.word	0x00000fff

0800abe4 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 800abe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abe6:	b08b      	sub	sp, #44	@ 0x2c
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 800abec:	2626      	movs	r6, #38	@ 0x26
 800abee:	19bb      	adds	r3, r7, r6
 800abf0:	2288      	movs	r2, #136	@ 0x88
 800abf2:	701a      	strb	r2, [r3, #0]

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 800abf4:	250c      	movs	r5, #12
 800abf6:	197b      	adds	r3, r7, r5
 800abf8:	2200      	movs	r2, #0
 800abfa:	601a      	str	r2, [r3, #0]
 800abfc:	3304      	adds	r3, #4
 800abfe:	2216      	movs	r2, #22
 800ac00:	2100      	movs	r1, #0
 800ac02:	0018      	movs	r0, r3
 800ac04:	f002 fdda 	bl	800d7bc <memset>

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 800ac08:	2427      	movs	r4, #39	@ 0x27
 800ac0a:	193c      	adds	r4, r7, r4
 800ac0c:	687a      	ldr	r2, [r7, #4]
 800ac0e:	1979      	adds	r1, r7, r5
 800ac10:	19bb      	adds	r3, r7, r6
 800ac12:	7818      	ldrb	r0, [r3, #0]
 800ac14:	0013      	movs	r3, r2
 800ac16:	221a      	movs	r2, #26
 800ac18:	f7fe ffce 	bl	8009bb8 <bme280_get_regs>
 800ac1c:	0003      	movs	r3, r0
 800ac1e:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 800ac20:	2427      	movs	r4, #39	@ 0x27
 800ac22:	193b      	adds	r3, r7, r4
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	b25b      	sxtb	r3, r3
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d11f      	bne.n	800ac6c <get_calib_data+0x88>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	197b      	adds	r3, r7, r5
 800ac30:	0011      	movs	r1, r2
 800ac32:	0018      	movs	r0, r3
 800ac34:	f000 f85a 	bl	800acec <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 800ac38:	19bb      	adds	r3, r7, r6
 800ac3a:	22e1      	movs	r2, #225	@ 0xe1
 800ac3c:	701a      	strb	r2, [r3, #0]

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 800ac3e:	193c      	adds	r4, r7, r4
 800ac40:	687a      	ldr	r2, [r7, #4]
 800ac42:	1979      	adds	r1, r7, r5
 800ac44:	19bb      	adds	r3, r7, r6
 800ac46:	7818      	ldrb	r0, [r3, #0]
 800ac48:	0013      	movs	r3, r2
 800ac4a:	2207      	movs	r2, #7
 800ac4c:	f7fe ffb4 	bl	8009bb8 <bme280_get_regs>
 800ac50:	0003      	movs	r3, r0
 800ac52:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 800ac54:	2427      	movs	r4, #39	@ 0x27
 800ac56:	193b      	adds	r3, r7, r4
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	b25b      	sxtb	r3, r3
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d105      	bne.n	800ac6c <get_calib_data+0x88>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	197b      	adds	r3, r7, r5
 800ac64:	0011      	movs	r1, r2
 800ac66:	0018      	movs	r0, r3
 800ac68:	f000 f8ee 	bl	800ae48 <parse_humidity_calib_data>
        }
    }

    return rslt;
 800ac6c:	2327      	movs	r3, #39	@ 0x27
 800ac6e:	18fb      	adds	r3, r7, r3
 800ac70:	781b      	ldrb	r3, [r3, #0]
 800ac72:	b25b      	sxtb	r3, r3
}
 800ac74:	0018      	movs	r0, r3
 800ac76:	46bd      	mov	sp, r7
 800ac78:	b00b      	add	sp, #44	@ 0x2c
 800ac7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac7c <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b086      	sub	sp, #24
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	607a      	str	r2, [r7, #4]
 800ac88:	001a      	movs	r2, r3
 800ac8a:	1cfb      	adds	r3, r7, #3
 800ac8c:	701a      	strb	r2, [r3, #0]
    uint8_t index;

    for (index = 1; index < len; index++)
 800ac8e:	2317      	movs	r3, #23
 800ac90:	18fb      	adds	r3, r7, r3
 800ac92:	2201      	movs	r2, #1
 800ac94:	701a      	strb	r2, [r3, #0]
 800ac96:	e01d      	b.n	800acd4 <interleave_reg_addr+0x58>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 800ac98:	2017      	movs	r0, #23
 800ac9a:	183b      	adds	r3, r7, r0
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	68fa      	ldr	r2, [r7, #12]
 800aca0:	18d2      	adds	r2, r2, r3
 800aca2:	183b      	adds	r3, r7, r0
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	005b      	lsls	r3, r3, #1
 800aca8:	3b01      	subs	r3, #1
 800acaa:	68b9      	ldr	r1, [r7, #8]
 800acac:	18cb      	adds	r3, r1, r3
 800acae:	7812      	ldrb	r2, [r2, #0]
 800acb0:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 800acb2:	183b      	adds	r3, r7, r0
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	687a      	ldr	r2, [r7, #4]
 800acb8:	18d2      	adds	r2, r2, r3
 800acba:	183b      	adds	r3, r7, r0
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	005b      	lsls	r3, r3, #1
 800acc0:	0019      	movs	r1, r3
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	185b      	adds	r3, r3, r1
 800acc6:	7812      	ldrb	r2, [r2, #0]
 800acc8:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800acca:	183b      	adds	r3, r7, r0
 800accc:	781a      	ldrb	r2, [r3, #0]
 800acce:	183b      	adds	r3, r7, r0
 800acd0:	3201      	adds	r2, #1
 800acd2:	701a      	strb	r2, [r3, #0]
 800acd4:	2317      	movs	r3, #23
 800acd6:	18fa      	adds	r2, r7, r3
 800acd8:	1cfb      	adds	r3, r7, #3
 800acda:	7812      	ldrb	r2, [r2, #0]
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	429a      	cmp	r2, r3
 800ace0:	d3da      	bcc.n	800ac98 <interleave_reg_addr+0x1c>
    }
}
 800ace2:	46c0      	nop			@ (mov r8, r8)
 800ace4:	46c0      	nop			@ (mov r8, r8)
 800ace6:	46bd      	mov	sp, r7
 800ace8:	b006      	add	sp, #24
 800acea:	bd80      	pop	{r7, pc}

0800acec <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	3318      	adds	r3, #24
 800acfa:	60fb      	str	r3, [r7, #12]

    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	3301      	adds	r3, #1
 800ad00:	781b      	ldrb	r3, [r3, #0]
 800ad02:	021b      	lsls	r3, r3, #8
 800ad04:	b21a      	sxth	r2, r3
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	781b      	ldrb	r3, [r3, #0]
 800ad0a:	b21b      	sxth	r3, r3
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	b21b      	sxth	r3, r3
 800ad10:	b29a      	uxth	r2, r3
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	801a      	strh	r2, [r3, #0]
    calib_data->dig_t2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	3303      	adds	r3, #3
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	021b      	lsls	r3, r3, #8
 800ad1e:	b21a      	sxth	r2, r3
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	3302      	adds	r3, #2
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	b21b      	sxth	r3, r3
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	b21a      	sxth	r2, r3
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	805a      	strh	r2, [r3, #2]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	3305      	adds	r3, #5
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	021b      	lsls	r3, r3, #8
 800ad38:	b21a      	sxth	r2, r3
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	3304      	adds	r3, #4
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	b21b      	sxth	r3, r3
 800ad42:	4313      	orrs	r3, r2
 800ad44:	b21a      	sxth	r2, r3
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	809a      	strh	r2, [r3, #4]
    calib_data->dig_p1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	3307      	adds	r3, #7
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	021b      	lsls	r3, r3, #8
 800ad52:	b21a      	sxth	r2, r3
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	3306      	adds	r3, #6
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	b21b      	sxth	r3, r3
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	b21b      	sxth	r3, r3
 800ad60:	b29a      	uxth	r2, r3
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	80da      	strh	r2, [r3, #6]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	3309      	adds	r3, #9
 800ad6a:	781b      	ldrb	r3, [r3, #0]
 800ad6c:	021b      	lsls	r3, r3, #8
 800ad6e:	b21a      	sxth	r2, r3
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	3308      	adds	r3, #8
 800ad74:	781b      	ldrb	r3, [r3, #0]
 800ad76:	b21b      	sxth	r3, r3
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	b21a      	sxth	r2, r3
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	811a      	strh	r2, [r3, #8]
    calib_data->dig_p3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	330b      	adds	r3, #11
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	021b      	lsls	r3, r3, #8
 800ad88:	b21a      	sxth	r2, r3
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	330a      	adds	r3, #10
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	b21b      	sxth	r3, r3
 800ad92:	4313      	orrs	r3, r2
 800ad94:	b21a      	sxth	r2, r3
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	815a      	strh	r2, [r3, #10]
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	330d      	adds	r3, #13
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	021b      	lsls	r3, r3, #8
 800ada2:	b21a      	sxth	r2, r3
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	330c      	adds	r3, #12
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	b21b      	sxth	r3, r3
 800adac:	4313      	orrs	r3, r2
 800adae:	b21a      	sxth	r2, r3
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	819a      	strh	r2, [r3, #12]
    calib_data->dig_p5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	330f      	adds	r3, #15
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	021b      	lsls	r3, r3, #8
 800adbc:	b21a      	sxth	r2, r3
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	330e      	adds	r3, #14
 800adc2:	781b      	ldrb	r3, [r3, #0]
 800adc4:	b21b      	sxth	r3, r3
 800adc6:	4313      	orrs	r3, r2
 800adc8:	b21a      	sxth	r2, r3
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	81da      	strh	r2, [r3, #14]
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	3311      	adds	r3, #17
 800add2:	781b      	ldrb	r3, [r3, #0]
 800add4:	021b      	lsls	r3, r3, #8
 800add6:	b21a      	sxth	r2, r3
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	3310      	adds	r3, #16
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	b21b      	sxth	r3, r3
 800ade0:	4313      	orrs	r3, r2
 800ade2:	b21a      	sxth	r2, r3
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	821a      	strh	r2, [r3, #16]
    calib_data->dig_p7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	3313      	adds	r3, #19
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	021b      	lsls	r3, r3, #8
 800adf0:	b21a      	sxth	r2, r3
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	3312      	adds	r3, #18
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	b21b      	sxth	r3, r3
 800adfa:	4313      	orrs	r3, r2
 800adfc:	b21a      	sxth	r2, r3
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	825a      	strh	r2, [r3, #18]
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	3315      	adds	r3, #21
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	021b      	lsls	r3, r3, #8
 800ae0a:	b21a      	sxth	r2, r3
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	3314      	adds	r3, #20
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	b21b      	sxth	r3, r3
 800ae14:	4313      	orrs	r3, r2
 800ae16:	b21a      	sxth	r2, r3
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	829a      	strh	r2, [r3, #20]
    calib_data->dig_p9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	3317      	adds	r3, #23
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	021b      	lsls	r3, r3, #8
 800ae24:	b21a      	sxth	r2, r3
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	3316      	adds	r3, #22
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	b21b      	sxth	r3, r3
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	b21a      	sxth	r2, r3
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	82da      	strh	r2, [r3, #22]
    calib_data->dig_h1 = reg_data[25];
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	3319      	adds	r3, #25
 800ae3a:	781a      	ldrb	r2, [r3, #0]
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	761a      	strb	r2, [r3, #24]
}
 800ae40:	46c0      	nop			@ (mov r8, r8)
 800ae42:	46bd      	mov	sp, r7
 800ae44:	b004      	add	sp, #16
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800ae48:	b590      	push	{r4, r7, lr}
 800ae4a:	b087      	sub	sp, #28
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	3318      	adds	r3, #24
 800ae56:	617b      	str	r3, [r7, #20]
    int16_t dig_h4_lsb;
    int16_t dig_h4_msb;
    int16_t dig_h5_lsb;
    int16_t dig_h5_msb;

    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	781b      	ldrb	r3, [r3, #0]
 800ae5e:	021b      	lsls	r3, r3, #8
 800ae60:	b21a      	sxth	r2, r3
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	b21b      	sxth	r3, r3
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	b21a      	sxth	r2, r3
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	835a      	strh	r2, [r3, #26]
    calib_data->dig_h3 = reg_data[2];
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	3302      	adds	r3, #2
 800ae74:	781a      	ldrb	r2, [r3, #0]
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	771a      	strb	r2, [r3, #28]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	3303      	adds	r3, #3
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	b25b      	sxtb	r3, r3
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	011b      	lsls	r3, r3, #4
 800ae86:	b29a      	uxth	r2, r3
 800ae88:	2012      	movs	r0, #18
 800ae8a:	183b      	adds	r3, r7, r0
 800ae8c:	801a      	strh	r2, [r3, #0]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	3304      	adds	r3, #4
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	b21a      	sxth	r2, r3
 800ae96:	2410      	movs	r4, #16
 800ae98:	193b      	adds	r3, r7, r4
 800ae9a:	210f      	movs	r1, #15
 800ae9c:	400a      	ands	r2, r1
 800ae9e:	801a      	strh	r2, [r3, #0]
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 800aea0:	183a      	adds	r2, r7, r0
 800aea2:	193b      	adds	r3, r7, r4
 800aea4:	8812      	ldrh	r2, [r2, #0]
 800aea6:	881b      	ldrh	r3, [r3, #0]
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	b21a      	sxth	r2, r3
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	83da      	strh	r2, [r3, #30]
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	3305      	adds	r3, #5
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	b25b      	sxtb	r3, r3
 800aeb8:	b29b      	uxth	r3, r3
 800aeba:	011b      	lsls	r3, r3, #4
 800aebc:	b29a      	uxth	r2, r3
 800aebe:	210e      	movs	r1, #14
 800aec0:	187b      	adds	r3, r7, r1
 800aec2:	801a      	strh	r2, [r3, #0]
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	3304      	adds	r3, #4
 800aec8:	781b      	ldrb	r3, [r3, #0]
 800aeca:	091b      	lsrs	r3, r3, #4
 800aecc:	b2da      	uxtb	r2, r3
 800aece:	200c      	movs	r0, #12
 800aed0:	183b      	adds	r3, r7, r0
 800aed2:	801a      	strh	r2, [r3, #0]
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 800aed4:	187a      	adds	r2, r7, r1
 800aed6:	183b      	adds	r3, r7, r0
 800aed8:	8812      	ldrh	r2, [r2, #0]
 800aeda:	881b      	ldrh	r3, [r3, #0]
 800aedc:	4313      	orrs	r3, r2
 800aede:	b21a      	sxth	r2, r3
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	841a      	strh	r2, [r3, #32]
    calib_data->dig_h6 = (int8_t)reg_data[6];
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	3306      	adds	r3, #6
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	b259      	sxtb	r1, r3
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	2222      	movs	r2, #34	@ 0x22
 800aef0:	5499      	strb	r1, [r3, r2]
}
 800aef2:	46c0      	nop			@ (mov r8, r8)
 800aef4:	46bd      	mov	sp, r7
 800aef6:	b007      	add	sp, #28
 800aef8:	bd90      	pop	{r4, r7, pc}

0800aefa <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 800aefa:	b580      	push	{r7, lr}
 800aefc:	b084      	sub	sp, #16
 800aefe:	af00      	add	r7, sp, #0
 800af00:	0002      	movs	r2, r0
 800af02:	1dfb      	adds	r3, r7, #7
 800af04:	701a      	strb	r2, [r3, #0]
 800af06:	1dbb      	adds	r3, r7, #6
 800af08:	1c0a      	adds	r2, r1, #0
 800af0a:	701a      	strb	r2, [r3, #0]
    uint8_t settings_changed = FALSE;
 800af0c:	210f      	movs	r1, #15
 800af0e:	187b      	adds	r3, r7, r1
 800af10:	2200      	movs	r2, #0
 800af12:	701a      	strb	r2, [r3, #0]

    if (sub_settings & desired_settings)
 800af14:	1dfb      	adds	r3, r7, #7
 800af16:	1dba      	adds	r2, r7, #6
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	7812      	ldrb	r2, [r2, #0]
 800af1c:	4013      	ands	r3, r2
 800af1e:	b2db      	uxtb	r3, r3
 800af20:	2b00      	cmp	r3, #0
 800af22:	d003      	beq.n	800af2c <are_settings_changed+0x32>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 800af24:	187b      	adds	r3, r7, r1
 800af26:	2201      	movs	r2, #1
 800af28:	701a      	strb	r2, [r3, #0]
 800af2a:	e003      	b.n	800af34 <are_settings_changed+0x3a>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 800af2c:	230f      	movs	r3, #15
 800af2e:	18fb      	adds	r3, r7, r3
 800af30:	2200      	movs	r2, #0
 800af32:	701a      	strb	r2, [r3, #0]
    }

    return settings_changed;
 800af34:	230f      	movs	r3, #15
 800af36:	18fb      	adds	r3, r7, r3
 800af38:	781b      	ldrb	r3, [r3, #0]
}
 800af3a:	0018      	movs	r0, r3
 800af3c:	46bd      	mov	sp, r7
 800af3e:	b004      	add	sp, #16
 800af40:	bd80      	pop	{r7, pc}

0800af42 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 800af42:	b580      	push	{r7, lr}
 800af44:	b084      	sub	sp, #16
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d00b      	beq.n	800af68 <null_ptr_check+0x26>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	68db      	ldr	r3, [r3, #12]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d007      	beq.n	800af68 <null_ptr_check+0x26>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	691b      	ldr	r3, [r3, #16]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d003      	beq.n	800af68 <null_ptr_check+0x26>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	695b      	ldr	r3, [r3, #20]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d104      	bne.n	800af72 <null_ptr_check+0x30>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 800af68:	230f      	movs	r3, #15
 800af6a:	18fb      	adds	r3, r7, r3
 800af6c:	22ff      	movs	r2, #255	@ 0xff
 800af6e:	701a      	strb	r2, [r3, #0]
 800af70:	e003      	b.n	800af7a <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 800af72:	230f      	movs	r3, #15
 800af74:	18fb      	adds	r3, r7, r3
 800af76:	2200      	movs	r2, #0
 800af78:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800af7a:	230f      	movs	r3, #15
 800af7c:	18fb      	adds	r3, r7, r3
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	b25b      	sxtb	r3, r3
}
 800af82:	0018      	movs	r0, r3
 800af84:	46bd      	mov	sp, r7
 800af86:	b004      	add	sp, #16
 800af88:	bd80      	pop	{r7, pc}

0800af8a <LL_SPI_IsActiveFlag_RXNE>:
{
 800af8a:	b580      	push	{r7, lr}
 800af8c:	b082      	sub	sp, #8
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	689b      	ldr	r3, [r3, #8]
 800af96:	2201      	movs	r2, #1
 800af98:	4013      	ands	r3, r2
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d101      	bne.n	800afa2 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800af9e:	2301      	movs	r3, #1
 800afa0:	e000      	b.n	800afa4 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800afa2:	2300      	movs	r3, #0
}
 800afa4:	0018      	movs	r0, r3
 800afa6:	46bd      	mov	sp, r7
 800afa8:	b002      	add	sp, #8
 800afaa:	bd80      	pop	{r7, pc}

0800afac <LL_SPI_IsActiveFlag_TXE>:
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b082      	sub	sp, #8
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	689b      	ldr	r3, [r3, #8]
 800afb8:	2202      	movs	r2, #2
 800afba:	4013      	ands	r3, r2
 800afbc:	2b02      	cmp	r3, #2
 800afbe:	d101      	bne.n	800afc4 <LL_SPI_IsActiveFlag_TXE+0x18>
 800afc0:	2301      	movs	r3, #1
 800afc2:	e000      	b.n	800afc6 <LL_SPI_IsActiveFlag_TXE+0x1a>
 800afc4:	2300      	movs	r3, #0
}
 800afc6:	0018      	movs	r0, r3
 800afc8:	46bd      	mov	sp, r7
 800afca:	b002      	add	sp, #8
 800afcc:	bd80      	pop	{r7, pc}

0800afce <LL_SPI_ReceiveData8>:
{
 800afce:	b580      	push	{r7, lr}
 800afd0:	b082      	sub	sp, #8
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	330c      	adds	r3, #12
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	b2db      	uxtb	r3, r3
}
 800afde:	0018      	movs	r0, r3
 800afe0:	46bd      	mov	sp, r7
 800afe2:	b002      	add	sp, #8
 800afe4:	bd80      	pop	{r7, pc}

0800afe6 <LL_SPI_TransmitData8>:
{
 800afe6:	b580      	push	{r7, lr}
 800afe8:	b084      	sub	sp, #16
 800afea:	af00      	add	r7, sp, #0
 800afec:	6078      	str	r0, [r7, #4]
 800afee:	000a      	movs	r2, r1
 800aff0:	1cfb      	adds	r3, r7, #3
 800aff2:	701a      	strb	r2, [r3, #0]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	330c      	adds	r3, #12
 800aff8:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	1cfa      	adds	r2, r7, #3
 800affe:	7812      	ldrb	r2, [r2, #0]
 800b000:	701a      	strb	r2, [r3, #0]
}
 800b002:	46c0      	nop			@ (mov r8, r8)
 800b004:	46bd      	mov	sp, r7
 800b006:	b004      	add	sp, #16
 800b008:	bd80      	pop	{r7, pc}

0800b00a <user_delay_us>:
inline static uint8_t SPI1_Readbyte(uint8_t reg_addr);
inline static void SPI1_Writebyte(uint8_t reg_addr, uint8_t val);


void user_delay_us(uint32_t period,void *intf_ptr)
{
 800b00a:	b580      	push	{r7, lr}
 800b00c:	b082      	sub	sp, #8
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
 800b012:	6039      	str	r1, [r7, #0]
	HAL_Delay(period);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	0018      	movs	r0, r3
 800b018:	f7fa ff24 	bl	8005e64 <HAL_Delay>
}
 800b01c:	46c0      	nop			@ (mov r8, r8)
 800b01e:	46bd      	mov	sp, r7
 800b020:	b002      	add	sp, #8
 800b022:	bd80      	pop	{r7, pc}

0800b024 <SPI1_SendByte>:


inline static uint8_t SPI1_SendByte(uint8_t data)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
 800b02a:	0002      	movs	r2, r0
 800b02c:	1dfb      	adds	r3, r7, #7
 800b02e:	701a      	strb	r2, [r3, #0]
	while(LL_SPI_IsActiveFlag_TXE(SPI1)==RESET);
 800b030:	46c0      	nop			@ (mov r8, r8)
 800b032:	4b0e      	ldr	r3, [pc, #56]	@ (800b06c <SPI1_SendByte+0x48>)
 800b034:	0018      	movs	r0, r3
 800b036:	f7ff ffb9 	bl	800afac <LL_SPI_IsActiveFlag_TXE>
 800b03a:	1e03      	subs	r3, r0, #0
 800b03c:	d0f9      	beq.n	800b032 <SPI1_SendByte+0xe>
	LL_SPI_TransmitData8(SPI1, data);
 800b03e:	1dfb      	adds	r3, r7, #7
 800b040:	781b      	ldrb	r3, [r3, #0]
 800b042:	4a0a      	ldr	r2, [pc, #40]	@ (800b06c <SPI1_SendByte+0x48>)
 800b044:	0019      	movs	r1, r3
 800b046:	0010      	movs	r0, r2
 800b048:	f7ff ffcd 	bl	800afe6 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(SPI1)==RESET);
 800b04c:	46c0      	nop			@ (mov r8, r8)
 800b04e:	4b07      	ldr	r3, [pc, #28]	@ (800b06c <SPI1_SendByte+0x48>)
 800b050:	0018      	movs	r0, r3
 800b052:	f7ff ff9a 	bl	800af8a <LL_SPI_IsActiveFlag_RXNE>
 800b056:	1e03      	subs	r3, r0, #0
 800b058:	d0f9      	beq.n	800b04e <SPI1_SendByte+0x2a>
	return LL_SPI_ReceiveData8(SPI1);
 800b05a:	4b04      	ldr	r3, [pc, #16]	@ (800b06c <SPI1_SendByte+0x48>)
 800b05c:	0018      	movs	r0, r3
 800b05e:	f7ff ffb6 	bl	800afce <LL_SPI_ReceiveData8>
 800b062:	0003      	movs	r3, r0
}
 800b064:	0018      	movs	r0, r3
 800b066:	46bd      	mov	sp, r7
 800b068:	b002      	add	sp, #8
 800b06a:	bd80      	pop	{r7, pc}
 800b06c:	40013000 	.word	0x40013000

0800b070 <user_spi_read>:
}



uint8_t user_spi_read(uint8_t reg_addr, uint8_t* data, uint8_t len, void *intf_ptr)
{
 800b070:	b590      	push	{r4, r7, lr}
 800b072:	b087      	sub	sp, #28
 800b074:	af00      	add	r7, sp, #0
 800b076:	60b9      	str	r1, [r7, #8]
 800b078:	0011      	movs	r1, r2
 800b07a:	607b      	str	r3, [r7, #4]
 800b07c:	230f      	movs	r3, #15
 800b07e:	18fb      	adds	r3, r7, r3
 800b080:	1c02      	adds	r2, r0, #0
 800b082:	701a      	strb	r2, [r3, #0]
 800b084:	230e      	movs	r3, #14
 800b086:	18fb      	adds	r3, r7, r3
 800b088:	1c0a      	adds	r2, r1, #0
 800b08a:	701a      	strb	r2, [r3, #0]
	unsigned int i = 0;
 800b08c:	2300      	movs	r3, #0
 800b08e:	617b      	str	r3, [r7, #20]
	if (!((SPI1)->CR1 & SPI_CR1_SPE)) {SPI1->CR1 |= SPI_CR1_SPE;}
 800b090:	4b18      	ldr	r3, [pc, #96]	@ (800b0f4 <user_spi_read+0x84>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	2240      	movs	r2, #64	@ 0x40
 800b096:	4013      	ands	r3, r2
 800b098:	d105      	bne.n	800b0a6 <user_spi_read+0x36>
 800b09a:	4b16      	ldr	r3, [pc, #88]	@ (800b0f4 <user_spi_read+0x84>)
 800b09c:	681a      	ldr	r2, [r3, #0]
 800b09e:	4b15      	ldr	r3, [pc, #84]	@ (800b0f4 <user_spi_read+0x84>)
 800b0a0:	2140      	movs	r1, #64	@ 0x40
 800b0a2:	430a      	orrs	r2, r1
 800b0a4:	601a      	str	r2, [r3, #0]
	CSB_L();
 800b0a6:	23a0      	movs	r3, #160	@ 0xa0
 800b0a8:	05db      	lsls	r3, r3, #23
 800b0aa:	2280      	movs	r2, #128	@ 0x80
 800b0ac:	04d2      	lsls	r2, r2, #19
 800b0ae:	619a      	str	r2, [r3, #24]
	SPI1_SendByte(reg_addr); 	
 800b0b0:	230f      	movs	r3, #15
 800b0b2:	18fb      	adds	r3, r7, r3
 800b0b4:	781b      	ldrb	r3, [r3, #0]
 800b0b6:	0018      	movs	r0, r3
 800b0b8:	f7ff ffb4 	bl	800b024 <SPI1_SendByte>
	while(i < len)
 800b0bc:	e009      	b.n	800b0d2 <user_spi_read+0x62>
	{
		data[i++] = SPI1_SendByte(0x00); 	//Send DUMMY to read data
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	1c5a      	adds	r2, r3, #1
 800b0c2:	617a      	str	r2, [r7, #20]
 800b0c4:	68ba      	ldr	r2, [r7, #8]
 800b0c6:	18d4      	adds	r4, r2, r3
 800b0c8:	2000      	movs	r0, #0
 800b0ca:	f7ff ffab 	bl	800b024 <SPI1_SendByte>
 800b0ce:	0003      	movs	r3, r0
 800b0d0:	7023      	strb	r3, [r4, #0]
	while(i < len)
 800b0d2:	230e      	movs	r3, #14
 800b0d4:	18fb      	adds	r3, r7, r3
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	697a      	ldr	r2, [r7, #20]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d3ef      	bcc.n	800b0be <user_spi_read+0x4e>
	}
	CSB_H();
 800b0de:	23a0      	movs	r3, #160	@ 0xa0
 800b0e0:	05db      	lsls	r3, r3, #23
 800b0e2:	2280      	movs	r2, #128	@ 0x80
 800b0e4:	00d2      	lsls	r2, r2, #3
 800b0e6:	619a      	str	r2, [r3, #24]
	return 0;
 800b0e8:	2300      	movs	r3, #0
}
 800b0ea:	0018      	movs	r0, r3
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	b007      	add	sp, #28
 800b0f0:	bd90      	pop	{r4, r7, pc}
 800b0f2:	46c0      	nop			@ (mov r8, r8)
 800b0f4:	40013000 	.word	0x40013000

0800b0f8 <user_spi_write>:
}



uint8_t user_spi_write(uint8_t reg_addr, uint8_t* data, uint8_t len, void *intf_ptr)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b086      	sub	sp, #24
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	60b9      	str	r1, [r7, #8]
 800b100:	0011      	movs	r1, r2
 800b102:	607b      	str	r3, [r7, #4]
 800b104:	230f      	movs	r3, #15
 800b106:	18fb      	adds	r3, r7, r3
 800b108:	1c02      	adds	r2, r0, #0
 800b10a:	701a      	strb	r2, [r3, #0]
 800b10c:	230e      	movs	r3, #14
 800b10e:	18fb      	adds	r3, r7, r3
 800b110:	1c0a      	adds	r2, r1, #0
 800b112:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0;
 800b114:	2317      	movs	r3, #23
 800b116:	18fb      	adds	r3, r7, r3
 800b118:	2200      	movs	r2, #0
 800b11a:	701a      	strb	r2, [r3, #0]
	if (!((SPI1)->CR1 & SPI_CR1_SPE)) {SPI1->CR1 |= SPI_CR1_SPE;}
 800b11c:	4b1a      	ldr	r3, [pc, #104]	@ (800b188 <user_spi_write+0x90>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	2240      	movs	r2, #64	@ 0x40
 800b122:	4013      	ands	r3, r2
 800b124:	d105      	bne.n	800b132 <user_spi_write+0x3a>
 800b126:	4b18      	ldr	r3, [pc, #96]	@ (800b188 <user_spi_write+0x90>)
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	4b17      	ldr	r3, [pc, #92]	@ (800b188 <user_spi_write+0x90>)
 800b12c:	2140      	movs	r1, #64	@ 0x40
 800b12e:	430a      	orrs	r2, r1
 800b130:	601a      	str	r2, [r3, #0]
	CSB_L();
 800b132:	23a0      	movs	r3, #160	@ 0xa0
 800b134:	05db      	lsls	r3, r3, #23
 800b136:	2280      	movs	r2, #128	@ 0x80
 800b138:	04d2      	lsls	r2, r2, #19
 800b13a:	619a      	str	r2, [r3, #24]
	SPI1_SendByte(reg_addr); 		
 800b13c:	230f      	movs	r3, #15
 800b13e:	18fb      	adds	r3, r7, r3
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	0018      	movs	r0, r3
 800b144:	f7ff ff6e 	bl	800b024 <SPI1_SendByte>
	while(i < len)
 800b148:	e00c      	b.n	800b164 <user_spi_write+0x6c>
	{
		SPI1_SendByte(data[i++]); 	//Send Data to write
 800b14a:	2217      	movs	r2, #23
 800b14c:	18bb      	adds	r3, r7, r2
 800b14e:	781b      	ldrb	r3, [r3, #0]
 800b150:	18ba      	adds	r2, r7, r2
 800b152:	1c59      	adds	r1, r3, #1
 800b154:	7011      	strb	r1, [r2, #0]
 800b156:	001a      	movs	r2, r3
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	189b      	adds	r3, r3, r2
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	0018      	movs	r0, r3
 800b160:	f7ff ff60 	bl	800b024 <SPI1_SendByte>
	while(i < len)
 800b164:	2317      	movs	r3, #23
 800b166:	18fa      	adds	r2, r7, r3
 800b168:	230e      	movs	r3, #14
 800b16a:	18fb      	adds	r3, r7, r3
 800b16c:	7812      	ldrb	r2, [r2, #0]
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	429a      	cmp	r2, r3
 800b172:	d3ea      	bcc.n	800b14a <user_spi_write+0x52>
	}
	CSB_H();
 800b174:	23a0      	movs	r3, #160	@ 0xa0
 800b176:	05db      	lsls	r3, r3, #23
 800b178:	2280      	movs	r2, #128	@ 0x80
 800b17a:	00d2      	lsls	r2, r2, #3
 800b17c:	619a      	str	r2, [r3, #24]
	return 0;
 800b17e:	2300      	movs	r3, #0
}
 800b180:	0018      	movs	r0, r3
 800b182:	46bd      	mov	sp, r7
 800b184:	b006      	add	sp, #24
 800b186:	bd80      	pop	{r7, pc}
 800b188:	40013000 	.word	0x40013000

0800b18c <LL_SPI_IsActiveFlag_RXNE>:
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b082      	sub	sp, #8
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	689b      	ldr	r3, [r3, #8]
 800b198:	2201      	movs	r2, #1
 800b19a:	4013      	ands	r3, r2
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d101      	bne.n	800b1a4 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	e000      	b.n	800b1a6 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800b1a4:	2300      	movs	r3, #0
}
 800b1a6:	0018      	movs	r0, r3
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	b002      	add	sp, #8
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <LL_SPI_IsActiveFlag_TXE>:
{
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b082      	sub	sp, #8
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	689b      	ldr	r3, [r3, #8]
 800b1ba:	2202      	movs	r2, #2
 800b1bc:	4013      	ands	r3, r2
 800b1be:	2b02      	cmp	r3, #2
 800b1c0:	d101      	bne.n	800b1c6 <LL_SPI_IsActiveFlag_TXE+0x18>
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	e000      	b.n	800b1c8 <LL_SPI_IsActiveFlag_TXE+0x1a>
 800b1c6:	2300      	movs	r3, #0
}
 800b1c8:	0018      	movs	r0, r3
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	b002      	add	sp, #8
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <LL_SPI_ReceiveData8>:
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	330c      	adds	r3, #12
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	b2db      	uxtb	r3, r3
}
 800b1e0:	0018      	movs	r0, r3
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	b002      	add	sp, #8
 800b1e6:	bd80      	pop	{r7, pc}

0800b1e8 <LL_SPI_TransmitData8>:
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b084      	sub	sp, #16
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	000a      	movs	r2, r1
 800b1f2:	1cfb      	adds	r3, r7, #3
 800b1f4:	701a      	strb	r2, [r3, #0]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	330c      	adds	r3, #12
 800b1fa:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	1cfa      	adds	r2, r7, #3
 800b200:	7812      	ldrb	r2, [r2, #0]
 800b202:	701a      	strb	r2, [r3, #0]
}
 800b204:	46c0      	nop			@ (mov r8, r8)
 800b206:	46bd      	mov	sp, r7
 800b208:	b004      	add	sp, #16
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <DEV_SPI_WriteByte>:
#include "main.h"
// #include "stm32l4xx_hal_spi.h"
// extern SPI_HandleTypeDef hspi1;

void DEV_SPI_WriteByte(uint8_t value)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b082      	sub	sp, #8
 800b210:	af00      	add	r7, sp, #0
 800b212:	0002      	movs	r2, r0
 800b214:	1dfb      	adds	r3, r7, #7
 800b216:	701a      	strb	r2, [r3, #0]

	// Check if the SPI is enabled
	if (!((SPI1)->CR1 & SPI_CR1_SPE))
 800b218:	4b18      	ldr	r3, [pc, #96]	@ (800b27c <DEV_SPI_WriteByte+0x70>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	2240      	movs	r2, #64	@ 0x40
 800b21e:	4013      	ands	r3, r2
 800b220:	d105      	bne.n	800b22e <DEV_SPI_WriteByte+0x22>
	{
		SPI1->CR1 |= SPI_CR1_SPE;
 800b222:	4b16      	ldr	r3, [pc, #88]	@ (800b27c <DEV_SPI_WriteByte+0x70>)
 800b224:	681a      	ldr	r2, [r3, #0]
 800b226:	4b15      	ldr	r3, [pc, #84]	@ (800b27c <DEV_SPI_WriteByte+0x70>)
 800b228:	2140      	movs	r1, #64	@ 0x40
 800b22a:	430a      	orrs	r2, r1
 800b22c:	601a      	str	r2, [r3, #0]
	}

	while (LL_SPI_IsActiveFlag_TXE(SPI1) == RESET)
 800b22e:	46c0      	nop			@ (mov r8, r8)
 800b230:	4b12      	ldr	r3, [pc, #72]	@ (800b27c <DEV_SPI_WriteByte+0x70>)
 800b232:	0018      	movs	r0, r3
 800b234:	f7ff ffbb 	bl	800b1ae <LL_SPI_IsActiveFlag_TXE>
 800b238:	1e03      	subs	r3, r0, #0
 800b23a:	d0f9      	beq.n	800b230 <DEV_SPI_WriteByte+0x24>
		;

	CS_L();
 800b23c:	23a0      	movs	r3, #160	@ 0xa0
 800b23e:	05db      	lsls	r3, r3, #23
 800b240:	2280      	movs	r2, #128	@ 0x80
 800b242:	0552      	lsls	r2, r2, #21
 800b244:	619a      	str	r2, [r3, #24]
	// Send bytes over the SPI
	LL_SPI_TransmitData8(SPI1, value);
 800b246:	1dfb      	adds	r3, r7, #7
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	4a0c      	ldr	r2, [pc, #48]	@ (800b27c <DEV_SPI_WriteByte+0x70>)
 800b24c:	0019      	movs	r1, r3
 800b24e:	0010      	movs	r0, r2
 800b250:	f7ff ffca 	bl	800b1e8 <LL_SPI_TransmitData8>

	// Wait until the transmission is complete
	while (LL_SPI_IsActiveFlag_RXNE(SPI1) == RESET)
 800b254:	46c0      	nop			@ (mov r8, r8)
 800b256:	4b09      	ldr	r3, [pc, #36]	@ (800b27c <DEV_SPI_WriteByte+0x70>)
 800b258:	0018      	movs	r0, r3
 800b25a:	f7ff ff97 	bl	800b18c <LL_SPI_IsActiveFlag_RXNE>
 800b25e:	1e03      	subs	r3, r0, #0
 800b260:	d0f9      	beq.n	800b256 <DEV_SPI_WriteByte+0x4a>
		;
	/* Read data register */
	(void)LL_SPI_ReceiveData8(SPI1);
 800b262:	4b06      	ldr	r3, [pc, #24]	@ (800b27c <DEV_SPI_WriteByte+0x70>)
 800b264:	0018      	movs	r0, r3
 800b266:	f7ff ffb3 	bl	800b1d0 <LL_SPI_ReceiveData8>
	CS_H();
 800b26a:	23a0      	movs	r3, #160	@ 0xa0
 800b26c:	05db      	lsls	r3, r3, #23
 800b26e:	2280      	movs	r2, #128	@ 0x80
 800b270:	0152      	lsls	r2, r2, #5
 800b272:	619a      	str	r2, [r3, #24]
}
 800b274:	46c0      	nop			@ (mov r8, r8)
 800b276:	46bd      	mov	sp, r7
 800b278:	b002      	add	sp, #8
 800b27a:	bd80      	pop	{r7, pc}
 800b27c:	40013000 	.word	0x40013000

0800b280 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	af00      	add	r7, sp, #0
	DC_L();
 800b284:	23a0      	movs	r3, #160	@ 0xa0
 800b286:	05db      	lsls	r3, r3, #23
 800b288:	2280      	movs	r2, #128	@ 0x80
 800b28a:	0452      	lsls	r2, r2, #17
 800b28c:	619a      	str	r2, [r3, #24]
	CS_H();
 800b28e:	23a0      	movs	r3, #160	@ 0xa0
 800b290:	05db      	lsls	r3, r3, #23
 800b292:	2280      	movs	r2, #128	@ 0x80
 800b294:	0152      	lsls	r2, r2, #5
 800b296:	619a      	str	r2, [r3, #24]
	RST_H(); // The Reset is active low.
 800b298:	23a0      	movs	r3, #160	@ 0xa0
 800b29a:	05db      	lsls	r3, r3, #23
 800b29c:	2280      	movs	r2, #128	@ 0x80
 800b29e:	0112      	lsls	r2, r2, #4
 800b2a0:	619a      	str	r2, [r3, #24]
	return 0;
 800b2a2:	2300      	movs	r3, #0
}
 800b2a4:	0018      	movs	r0, r3
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}

0800b2aa <EPD_1IN54_V2_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
void EPD_1IN54_V2_Reset(void)
{
 800b2aa:	b580      	push	{r7, lr}
 800b2ac:	af00      	add	r7, sp, #0
    RST_H(); // DEV_Digital_Write(EPD_RST_PIN, 1);
 800b2ae:	23a0      	movs	r3, #160	@ 0xa0
 800b2b0:	05db      	lsls	r3, r3, #23
 800b2b2:	2280      	movs	r2, #128	@ 0x80
 800b2b4:	0112      	lsls	r2, r2, #4
 800b2b6:	619a      	str	r2, [r3, #24]
    RST_L(); // DEV_Digital_Write(EPD_RST_PIN, 0);
 800b2b8:	23a0      	movs	r3, #160	@ 0xa0
 800b2ba:	05db      	lsls	r3, r3, #23
 800b2bc:	2280      	movs	r2, #128	@ 0x80
 800b2be:	0512      	lsls	r2, r2, #20
 800b2c0:	619a      	str	r2, [r3, #24]
    HAL_Delay(2);
 800b2c2:	2002      	movs	r0, #2
 800b2c4:	f7fa fdce 	bl	8005e64 <HAL_Delay>
    RST_H(); // DEV_Digital_Write(EPD_RST_PIN, 1);
 800b2c8:	23a0      	movs	r3, #160	@ 0xa0
 800b2ca:	05db      	lsls	r3, r3, #23
 800b2cc:	2280      	movs	r2, #128	@ 0x80
 800b2ce:	0112      	lsls	r2, r2, #4
 800b2d0:	619a      	str	r2, [r3, #24]
}
 800b2d2:	46c0      	nop			@ (mov r8, r8)
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <EPD_1IN54_V2_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_1IN54_V2_SendCommand(UBYTE Reg)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	0002      	movs	r2, r0
 800b2e0:	1dfb      	adds	r3, r7, #7
 800b2e2:	701a      	strb	r2, [r3, #0]
    DC_L();
 800b2e4:	23a0      	movs	r3, #160	@ 0xa0
 800b2e6:	05db      	lsls	r3, r3, #23
 800b2e8:	2280      	movs	r2, #128	@ 0x80
 800b2ea:	0452      	lsls	r2, r2, #17
 800b2ec:	619a      	str	r2, [r3, #24]
    CS_L();
 800b2ee:	23a0      	movs	r3, #160	@ 0xa0
 800b2f0:	05db      	lsls	r3, r3, #23
 800b2f2:	2280      	movs	r2, #128	@ 0x80
 800b2f4:	0552      	lsls	r2, r2, #21
 800b2f6:	619a      	str	r2, [r3, #24]
    DEV_SPI_WriteByte(Reg);
 800b2f8:	1dfb      	adds	r3, r7, #7
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	0018      	movs	r0, r3
 800b2fe:	f7ff ff85 	bl	800b20c <DEV_SPI_WriteByte>
    CS_H();
 800b302:	23a0      	movs	r3, #160	@ 0xa0
 800b304:	05db      	lsls	r3, r3, #23
 800b306:	2280      	movs	r2, #128	@ 0x80
 800b308:	0152      	lsls	r2, r2, #5
 800b30a:	619a      	str	r2, [r3, #24]
}
 800b30c:	46c0      	nop			@ (mov r8, r8)
 800b30e:	46bd      	mov	sp, r7
 800b310:	b002      	add	sp, #8
 800b312:	bd80      	pop	{r7, pc}

0800b314 <EPD_1IN54_V2_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_1IN54_V2_SendData(UBYTE Data)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b082      	sub	sp, #8
 800b318:	af00      	add	r7, sp, #0
 800b31a:	0002      	movs	r2, r0
 800b31c:	1dfb      	adds	r3, r7, #7
 800b31e:	701a      	strb	r2, [r3, #0]
    DC_H();
 800b320:	23a0      	movs	r3, #160	@ 0xa0
 800b322:	05db      	lsls	r3, r3, #23
 800b324:	2280      	movs	r2, #128	@ 0x80
 800b326:	0052      	lsls	r2, r2, #1
 800b328:	619a      	str	r2, [r3, #24]
    CS_L();
 800b32a:	23a0      	movs	r3, #160	@ 0xa0
 800b32c:	05db      	lsls	r3, r3, #23
 800b32e:	2280      	movs	r2, #128	@ 0x80
 800b330:	0552      	lsls	r2, r2, #21
 800b332:	619a      	str	r2, [r3, #24]
    DEV_SPI_WriteByte(Data);
 800b334:	1dfb      	adds	r3, r7, #7
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	0018      	movs	r0, r3
 800b33a:	f7ff ff67 	bl	800b20c <DEV_SPI_WriteByte>
    CS_H();
 800b33e:	23a0      	movs	r3, #160	@ 0xa0
 800b340:	05db      	lsls	r3, r3, #23
 800b342:	2280      	movs	r2, #128	@ 0x80
 800b344:	0152      	lsls	r2, r2, #5
 800b346:	619a      	str	r2, [r3, #24]
}
 800b348:	46c0      	nop			@ (mov r8, r8)
 800b34a:	46bd      	mov	sp, r7
 800b34c:	b002      	add	sp, #8
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <EPD_1IN54_V2_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
static void EPD_1IN54_V2_ReadBusy(void)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0

    uint32_t time1 = HAL_GetTick();
 800b356:	f7fa fd7b 	bl	8005e50 <HAL_GetTick>
 800b35a:	0003      	movs	r3, r0
 800b35c:	607b      	str	r3, [r7, #4]
    //	bool result = GPIOA->regs->IDR & 0x0004; //returns true if A2 is HIGH
    while (GPIOA->IDR & 0b0000001000000000)
 800b35e:	e00c      	b.n	800b37a <EPD_1IN54_V2_ReadBusy+0x2a>
    { // A9, LOW = idle, HIGH = busy; DEV_Digital_Read(EPD_BUSY_PIN) == 1

        // Timeout check
        if ((HAL_GetTick() - time1) > timeout_value)
 800b360:	f7fa fd76 	bl	8005e50 <HAL_GetTick>
 800b364:	0002      	movs	r2, r0
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	1ad3      	subs	r3, r2, r3
 800b36a:	4a0a      	ldr	r2, [pc, #40]	@ (800b394 <EPD_1IN54_V2_ReadBusy+0x44>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d904      	bls.n	800b37a <EPD_1IN54_V2_ReadBusy+0x2a>
        {
            timeout_reset(__func__, __LINE__);
 800b370:	4b09      	ldr	r3, [pc, #36]	@ (800b398 <EPD_1IN54_V2_ReadBusy+0x48>)
 800b372:	218b      	movs	r1, #139	@ 0x8b
 800b374:	0018      	movs	r0, r3
 800b376:	f7f8 fd13 	bl	8003da0 <timeout_reset>
    while (GPIOA->IDR & 0b0000001000000000)
 800b37a:	23a0      	movs	r3, #160	@ 0xa0
 800b37c:	05db      	lsls	r3, r3, #23
 800b37e:	691a      	ldr	r2, [r3, #16]
 800b380:	2380      	movs	r3, #128	@ 0x80
 800b382:	009b      	lsls	r3, r3, #2
 800b384:	4013      	ands	r3, r2
 800b386:	d1eb      	bne.n	800b360 <EPD_1IN54_V2_ReadBusy+0x10>
        }
    }

    DE_BUG("busy: %d\r\n", (HAL_GetTick() - time1));
}
 800b388:	46c0      	nop			@ (mov r8, r8)
 800b38a:	46c0      	nop			@ (mov r8, r8)
 800b38c:	46bd      	mov	sp, r7
 800b38e:	b002      	add	sp, #8
 800b390:	bd80      	pop	{r7, pc}
 800b392:	46c0      	nop			@ (mov r8, r8)
 800b394:	00000bb8 	.word	0x00000bb8
 800b398:	0800fd9c 	.word	0x0800fd9c

0800b39c <EPD_1IN54_V2_TurnOnDisplay>:
/******************************************************************************
function :	Turn On Display full
parameter:
******************************************************************************/
static void EPD_1IN54_V2_TurnOnDisplay(void)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_SendCommand(0x22);
 800b3a0:	2022      	movs	r0, #34	@ 0x22
 800b3a2:	f7ff ff99 	bl	800b2d8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xc7);
 800b3a6:	20c7      	movs	r0, #199	@ 0xc7
 800b3a8:	f7ff ffb4 	bl	800b314 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 800b3ac:	2020      	movs	r0, #32
 800b3ae:	f7ff ff93 	bl	800b2d8 <EPD_1IN54_V2_SendCommand>

#if (USE_TIME_PROFILING == 1)
    uint32_t startTick = DWT->CYCCNT;
#endif /* USE_TIME_PROFILING */
    EPD_1IN54_V2_ReadBusy();
 800b3b2:	f7ff ffcd 	bl	800b350 <EPD_1IN54_V2_ReadBusy>
#if (USE_TIME_PROFILING == 1)
    uint32_t tmp = DWT->CYCCNT - startTick;
    printf("####  EPD_1IN54_V2_TurnOnDisplay: %d\n", (int)(tmp * 0.0000625));
#endif /* USE_TIME_PROFILING */
}
 800b3b6:	46c0      	nop			@ (mov r8, r8)
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <EPD_1IN54_V2_TurnOnDisplayPart>:
/******************************************************************************
function :	Turn On Display part
parameter:
******************************************************************************/
void EPD_1IN54_V2_TurnOnDisplayPart(void)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_SendCommand(0x22);
 800b3c0:	2022      	movs	r0, #34	@ 0x22
 800b3c2:	f7ff ff89 	bl	800b2d8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xcF);
 800b3c6:	20cf      	movs	r0, #207	@ 0xcf
 800b3c8:	f7ff ffa4 	bl	800b314 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 800b3cc:	2020      	movs	r0, #32
 800b3ce:	f7ff ff83 	bl	800b2d8 <EPD_1IN54_V2_SendCommand>

//    enter_stop2(2330, LL_RTC_WAKEUPCLOCK_DIV_8);

    //  *********************   End S L E E P  571 ms !  *********************

    EPD_1IN54_V2_ReadBusy();
 800b3d2:	f7ff ffbd 	bl	800b350 <EPD_1IN54_V2_ReadBusy>
}
 800b3d6:	46c0      	nop			@ (mov r8, r8)
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <EPD_1IN54_V2_Lut>:

static void EPD_1IN54_V2_Lut(UBYTE *lut)
{
 800b3dc:	b590      	push	{r4, r7, lr}
 800b3de:	b085      	sub	sp, #20
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
    EPD_1IN54_V2_SendCommand(0x32);
 800b3e4:	2032      	movs	r0, #50	@ 0x32
 800b3e6:	f7ff ff77 	bl	800b2d8 <EPD_1IN54_V2_SendCommand>
    for (UBYTE i = 0; i < 153; i++)
 800b3ea:	230f      	movs	r3, #15
 800b3ec:	18fb      	adds	r3, r7, r3
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	701a      	strb	r2, [r3, #0]
 800b3f2:	e00d      	b.n	800b410 <EPD_1IN54_V2_Lut+0x34>
        EPD_1IN54_V2_SendData(lut[i]);
 800b3f4:	240f      	movs	r4, #15
 800b3f6:	193b      	adds	r3, r7, r4
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	687a      	ldr	r2, [r7, #4]
 800b3fc:	18d3      	adds	r3, r2, r3
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	0018      	movs	r0, r3
 800b402:	f7ff ff87 	bl	800b314 <EPD_1IN54_V2_SendData>
    for (UBYTE i = 0; i < 153; i++)
 800b406:	193b      	adds	r3, r7, r4
 800b408:	781a      	ldrb	r2, [r3, #0]
 800b40a:	193b      	adds	r3, r7, r4
 800b40c:	3201      	adds	r2, #1
 800b40e:	701a      	strb	r2, [r3, #0]
 800b410:	230f      	movs	r3, #15
 800b412:	18fb      	adds	r3, r7, r3
 800b414:	781b      	ldrb	r3, [r3, #0]
 800b416:	2b98      	cmp	r3, #152	@ 0x98
 800b418:	d9ec      	bls.n	800b3f4 <EPD_1IN54_V2_Lut+0x18>

#if (USE_TIME_PROFILING == 1)
    uint32_t startTick = DWT->CYCCNT;
#endif /* USE_TIME_PROFILING */
    EPD_1IN54_V2_ReadBusy();
 800b41a:	f7ff ff99 	bl	800b350 <EPD_1IN54_V2_ReadBusy>
#if (USE_TIME_PROFILING == 1)
    uint32_t tmp = DWT->CYCCNT - startTick;
    printf("####  EPD_1IN54_V2_Lut: %d\n", (int)(tmp * 0.0000625));
#endif /* USE_TIME_PROFILING */
}
 800b41e:	46c0      	nop			@ (mov r8, r8)
 800b420:	46bd      	mov	sp, r7
 800b422:	b005      	add	sp, #20
 800b424:	bd90      	pop	{r4, r7, pc}

0800b426 <EPD_1IN54_V2_SetLut>:

static void EPD_1IN54_V2_SetLut(UBYTE *lut)
{
 800b426:	b580      	push	{r7, lr}
 800b428:	b082      	sub	sp, #8
 800b42a:	af00      	add	r7, sp, #0
 800b42c:	6078      	str	r0, [r7, #4]
    EPD_1IN54_V2_Lut(lut);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	0018      	movs	r0, r3
 800b432:	f7ff ffd3 	bl	800b3dc <EPD_1IN54_V2_Lut>

    EPD_1IN54_V2_SendCommand(0x3f);
 800b436:	203f      	movs	r0, #63	@ 0x3f
 800b438:	f7ff ff4e 	bl	800b2d8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(lut[153]);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	3399      	adds	r3, #153	@ 0x99
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	0018      	movs	r0, r3
 800b444:	f7ff ff66 	bl	800b314 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x03);
 800b448:	2003      	movs	r0, #3
 800b44a:	f7ff ff45 	bl	800b2d8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(lut[154]);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	339a      	adds	r3, #154	@ 0x9a
 800b452:	781b      	ldrb	r3, [r3, #0]
 800b454:	0018      	movs	r0, r3
 800b456:	f7ff ff5d 	bl	800b314 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x04);
 800b45a:	2004      	movs	r0, #4
 800b45c:	f7ff ff3c 	bl	800b2d8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(lut[155]);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	339b      	adds	r3, #155	@ 0x9b
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	0018      	movs	r0, r3
 800b468:	f7ff ff54 	bl	800b314 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(lut[156]);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	339c      	adds	r3, #156	@ 0x9c
 800b470:	781b      	ldrb	r3, [r3, #0]
 800b472:	0018      	movs	r0, r3
 800b474:	f7ff ff4e 	bl	800b314 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(lut[157]);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	339d      	adds	r3, #157	@ 0x9d
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	0018      	movs	r0, r3
 800b480:	f7ff ff48 	bl	800b314 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x2c);
 800b484:	202c      	movs	r0, #44	@ 0x2c
 800b486:	f7ff ff27 	bl	800b2d8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(lut[158]);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	339e      	adds	r3, #158	@ 0x9e
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	0018      	movs	r0, r3
 800b492:	f7ff ff3f 	bl	800b314 <EPD_1IN54_V2_SendData>
}
 800b496:	46c0      	nop			@ (mov r8, r8)
 800b498:	46bd      	mov	sp, r7
 800b49a:	b002      	add	sp, #8
 800b49c:	bd80      	pop	{r7, pc}

0800b49e <EPD_1IN54_V2_SetWindows>:

static void EPD_1IN54_V2_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 800b49e:	b5b0      	push	{r4, r5, r7, lr}
 800b4a0:	b082      	sub	sp, #8
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	0005      	movs	r5, r0
 800b4a6:	000c      	movs	r4, r1
 800b4a8:	0010      	movs	r0, r2
 800b4aa:	0019      	movs	r1, r3
 800b4ac:	1dbb      	adds	r3, r7, #6
 800b4ae:	1c2a      	adds	r2, r5, #0
 800b4b0:	801a      	strh	r2, [r3, #0]
 800b4b2:	1d3b      	adds	r3, r7, #4
 800b4b4:	1c22      	adds	r2, r4, #0
 800b4b6:	801a      	strh	r2, [r3, #0]
 800b4b8:	1cbb      	adds	r3, r7, #2
 800b4ba:	1c02      	adds	r2, r0, #0
 800b4bc:	801a      	strh	r2, [r3, #0]
 800b4be:	003b      	movs	r3, r7
 800b4c0:	1c0a      	adds	r2, r1, #0
 800b4c2:	801a      	strh	r2, [r3, #0]
    EPD_1IN54_V2_SendCommand(0x44); // SET_RAM_X_ADDRESS_START_END_POSITION
 800b4c4:	2044      	movs	r0, #68	@ 0x44
 800b4c6:	f7ff ff07 	bl	800b2d8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData((Xstart >> 3) & 0xFF);
 800b4ca:	1dbb      	adds	r3, r7, #6
 800b4cc:	881b      	ldrh	r3, [r3, #0]
 800b4ce:	08db      	lsrs	r3, r3, #3
 800b4d0:	b29b      	uxth	r3, r3
 800b4d2:	b2db      	uxtb	r3, r3
 800b4d4:	0018      	movs	r0, r3
 800b4d6:	f7ff ff1d 	bl	800b314 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData((Xend >> 3) & 0xFF);
 800b4da:	1cbb      	adds	r3, r7, #2
 800b4dc:	881b      	ldrh	r3, [r3, #0]
 800b4de:	08db      	lsrs	r3, r3, #3
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	b2db      	uxtb	r3, r3
 800b4e4:	0018      	movs	r0, r3
 800b4e6:	f7ff ff15 	bl	800b314 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x45); // SET_RAM_Y_ADDRESS_START_END_POSITION
 800b4ea:	2045      	movs	r0, #69	@ 0x45
 800b4ec:	f7ff fef4 	bl	800b2d8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(Ystart & 0xFF);
 800b4f0:	1d3b      	adds	r3, r7, #4
 800b4f2:	881b      	ldrh	r3, [r3, #0]
 800b4f4:	b2db      	uxtb	r3, r3
 800b4f6:	0018      	movs	r0, r3
 800b4f8:	f7ff ff0c 	bl	800b314 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData((Ystart >> 8) & 0xFF);
 800b4fc:	1d3b      	adds	r3, r7, #4
 800b4fe:	881b      	ldrh	r3, [r3, #0]
 800b500:	0a1b      	lsrs	r3, r3, #8
 800b502:	b29b      	uxth	r3, r3
 800b504:	b2db      	uxtb	r3, r3
 800b506:	0018      	movs	r0, r3
 800b508:	f7ff ff04 	bl	800b314 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(Yend & 0xFF);
 800b50c:	003b      	movs	r3, r7
 800b50e:	881b      	ldrh	r3, [r3, #0]
 800b510:	b2db      	uxtb	r3, r3
 800b512:	0018      	movs	r0, r3
 800b514:	f7ff fefe 	bl	800b314 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData((Yend >> 8) & 0xFF);
 800b518:	003b      	movs	r3, r7
 800b51a:	881b      	ldrh	r3, [r3, #0]
 800b51c:	0a1b      	lsrs	r3, r3, #8
 800b51e:	b29b      	uxth	r3, r3
 800b520:	b2db      	uxtb	r3, r3
 800b522:	0018      	movs	r0, r3
 800b524:	f7ff fef6 	bl	800b314 <EPD_1IN54_V2_SendData>
}
 800b528:	46c0      	nop			@ (mov r8, r8)
 800b52a:	46bd      	mov	sp, r7
 800b52c:	b002      	add	sp, #8
 800b52e:	bdb0      	pop	{r4, r5, r7, pc}

0800b530 <EPD_1IN54_V2_SetCursor>:

static void EPD_1IN54_V2_SetCursor(UWORD Xstart, UWORD Ystart)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b082      	sub	sp, #8
 800b534:	af00      	add	r7, sp, #0
 800b536:	0002      	movs	r2, r0
 800b538:	1dbb      	adds	r3, r7, #6
 800b53a:	801a      	strh	r2, [r3, #0]
 800b53c:	1d3b      	adds	r3, r7, #4
 800b53e:	1c0a      	adds	r2, r1, #0
 800b540:	801a      	strh	r2, [r3, #0]
    EPD_1IN54_V2_SendCommand(0x4E); // SET_RAM_X_ADDRESS_COUNTER
 800b542:	204e      	movs	r0, #78	@ 0x4e
 800b544:	f7ff fec8 	bl	800b2d8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(Xstart & 0xFF);
 800b548:	1dbb      	adds	r3, r7, #6
 800b54a:	881b      	ldrh	r3, [r3, #0]
 800b54c:	b2db      	uxtb	r3, r3
 800b54e:	0018      	movs	r0, r3
 800b550:	f7ff fee0 	bl	800b314 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x4F); // SET_RAM_Y_ADDRESS_COUNTER
 800b554:	204f      	movs	r0, #79	@ 0x4f
 800b556:	f7ff febf 	bl	800b2d8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(Ystart & 0xFF);
 800b55a:	1d3b      	adds	r3, r7, #4
 800b55c:	881b      	ldrh	r3, [r3, #0]
 800b55e:	b2db      	uxtb	r3, r3
 800b560:	0018      	movs	r0, r3
 800b562:	f7ff fed7 	bl	800b314 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData((Ystart >> 8) & 0xFF);
 800b566:	1d3b      	adds	r3, r7, #4
 800b568:	881b      	ldrh	r3, [r3, #0]
 800b56a:	0a1b      	lsrs	r3, r3, #8
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	b2db      	uxtb	r3, r3
 800b570:	0018      	movs	r0, r3
 800b572:	f7ff fecf 	bl	800b314 <EPD_1IN54_V2_SendData>
}
 800b576:	46c0      	nop			@ (mov r8, r8)
 800b578:	46bd      	mov	sp, r7
 800b57a:	b002      	add	sp, #8
 800b57c:	bd80      	pop	{r7, pc}
	...

0800b580 <EPD_1IN54_V2_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_1IN54_V2_Init(void)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_Reset();
 800b584:	f7ff fe91 	bl	800b2aa <EPD_1IN54_V2_Reset>

#if (USE_TIME_PROFILING == 1)
    uint32_t startTick = DWT->CYCCNT;
#endif /* USE_TIME_PROFILING */
    EPD_1IN54_V2_ReadBusy();
 800b588:	f7ff fee2 	bl	800b350 <EPD_1IN54_V2_ReadBusy>
#if (USE_TIME_PROFILING == 1)
    uint32_t tmp = DWT->CYCCNT - startTick;
    printf("####  EPD_1IN54_V2_Init-1: %d\n", (int)(tmp * 0.0000625));
#endif /* USE_TIME_PROFILING */

    EPD_1IN54_V2_SendCommand(0x12); // SWRESET
 800b58c:	2012      	movs	r0, #18
 800b58e:	f7ff fea3 	bl	800b2d8 <EPD_1IN54_V2_SendCommand>

#if (USE_TIME_PROFILING == 1)
    startTick = DWT->CYCCNT;
#endif /* USE_TIME_PROFILING */
    EPD_1IN54_V2_ReadBusy();
 800b592:	f7ff fedd 	bl	800b350 <EPD_1IN54_V2_ReadBusy>
#if (USE_TIME_PROFILING == 1)
    tmp = DWT->CYCCNT - startTick;
    printf("####  EPD_1IN54_V2_Init-2: %d\n", (int)(tmp * 0.0000625));
#endif /* USE_TIME_PROFILING */

    EPD_1IN54_V2_SendCommand(0x01); // Driver output control
 800b596:	2001      	movs	r0, #1
 800b598:	f7ff fe9e 	bl	800b2d8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xC7);
 800b59c:	20c7      	movs	r0, #199	@ 0xc7
 800b59e:	f7ff feb9 	bl	800b314 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800b5a2:	2000      	movs	r0, #0
 800b5a4:	f7ff feb6 	bl	800b314 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x01);
 800b5a8:	2001      	movs	r0, #1
 800b5aa:	f7ff feb3 	bl	800b314 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x11); // data entry mode
 800b5ae:	2011      	movs	r0, #17
 800b5b0:	f7ff fe92 	bl	800b2d8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x01);
 800b5b4:	2001      	movs	r0, #1
 800b5b6:	f7ff fead 	bl	800b314 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SetWindows(0, EPD_1IN54_V2_HEIGHT - 1, EPD_1IN54_V2_WIDTH - 1, 0);
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	22c7      	movs	r2, #199	@ 0xc7
 800b5be:	21c7      	movs	r1, #199	@ 0xc7
 800b5c0:	2000      	movs	r0, #0
 800b5c2:	f7ff ff6c 	bl	800b49e <EPD_1IN54_V2_SetWindows>

    EPD_1IN54_V2_SendCommand(0x3C); // BorderWavefrom
 800b5c6:	203c      	movs	r0, #60	@ 0x3c
 800b5c8:	f7ff fe86 	bl	800b2d8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x01);
 800b5cc:	2001      	movs	r0, #1
 800b5ce:	f7ff fea1 	bl	800b314 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x18);
 800b5d2:	2018      	movs	r0, #24
 800b5d4:	f7ff fe80 	bl	800b2d8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x80);
 800b5d8:	2080      	movs	r0, #128	@ 0x80
 800b5da:	f7ff fe9b 	bl	800b314 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x22); // Load Temperature and waveform setting.
 800b5de:	2022      	movs	r0, #34	@ 0x22
 800b5e0:	f7ff fe7a 	bl	800b2d8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0XB1);
 800b5e4:	20b1      	movs	r0, #177	@ 0xb1
 800b5e6:	f7ff fe95 	bl	800b314 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 800b5ea:	2020      	movs	r0, #32
 800b5ec:	f7ff fe74 	bl	800b2d8 <EPD_1IN54_V2_SendCommand>

    EPD_1IN54_V2_SetCursor(0, EPD_1IN54_V2_HEIGHT - 1);
 800b5f0:	21c7      	movs	r1, #199	@ 0xc7
 800b5f2:	2000      	movs	r0, #0
 800b5f4:	f7ff ff9c 	bl	800b530 <EPD_1IN54_V2_SetCursor>

#if (USE_TIME_PROFILING == 1)
    startTick = DWT->CYCCNT;
#endif /* USE_TIME_PROFILING */
    EPD_1IN54_V2_ReadBusy();
 800b5f8:	f7ff feaa 	bl	800b350 <EPD_1IN54_V2_ReadBusy>
#if (USE_TIME_PROFILING == 1)
    tmp = DWT->CYCCNT - startTick;
    printf("####  EPD_1IN54_V2_Init-3: %d\n", (int)(tmp * 0.0000625));
#endif /* USE_TIME_PROFILING */

    EPD_1IN54_V2_SetLut(WF_Full_1IN54);
 800b5fc:	4b03      	ldr	r3, [pc, #12]	@ (800b60c <EPD_1IN54_V2_Init+0x8c>)
 800b5fe:	0018      	movs	r0, r3
 800b600:	f7ff ff11 	bl	800b426 <EPD_1IN54_V2_SetLut>
}
 800b604:	46c0      	nop			@ (mov r8, r8)
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}
 800b60a:	46c0      	nop			@ (mov r8, r8)
 800b60c:	20000010 	.word	0x20000010

0800b610 <EPD_1IN54_V2_Init_Partial>:
/******************************************************************************
function :	Initialize the e-Paper register (Partial display)
parameter:
******************************************************************************/
void EPD_1IN54_V2_Init_Partial(void)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_Reset();
 800b614:	f7ff fe49 	bl	800b2aa <EPD_1IN54_V2_Reset>

#if (USE_TIME_PROFILING == 1)
    uint32_t startTick = DWT->CYCCNT;
#endif /* USE_TIME_PROFILING */
    EPD_1IN54_V2_ReadBusy();
 800b618:	f7ff fe9a 	bl	800b350 <EPD_1IN54_V2_ReadBusy>
#if (USE_TIME_PROFILING == 1)
    uint32_t tmp = DWT->CYCCNT - startTick;
    printf("####  EPD_1IN54_V2_Init_Partial-1: %d\n", (int)(tmp * 0.0000625));
#endif /* USE_TIME_PROFILING */

    EPD_1IN54_V2_SetLut(WF_PARTIAL_1IN54_0);
 800b61c:	4b1c      	ldr	r3, [pc, #112]	@ (800b690 <EPD_1IN54_V2_Init_Partial+0x80>)
 800b61e:	0018      	movs	r0, r3
 800b620:	f7ff ff01 	bl	800b426 <EPD_1IN54_V2_SetLut>
    EPD_1IN54_V2_SendCommand(0x37);
 800b624:	2037      	movs	r0, #55	@ 0x37
 800b626:	f7ff fe57 	bl	800b2d8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x00);
 800b62a:	2000      	movs	r0, #0
 800b62c:	f7ff fe72 	bl	800b314 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800b630:	2000      	movs	r0, #0
 800b632:	f7ff fe6f 	bl	800b314 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800b636:	2000      	movs	r0, #0
 800b638:	f7ff fe6c 	bl	800b314 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800b63c:	2000      	movs	r0, #0
 800b63e:	f7ff fe69 	bl	800b314 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800b642:	2000      	movs	r0, #0
 800b644:	f7ff fe66 	bl	800b314 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x40);
 800b648:	2040      	movs	r0, #64	@ 0x40
 800b64a:	f7ff fe63 	bl	800b314 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800b64e:	2000      	movs	r0, #0
 800b650:	f7ff fe60 	bl	800b314 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800b654:	2000      	movs	r0, #0
 800b656:	f7ff fe5d 	bl	800b314 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800b65a:	2000      	movs	r0, #0
 800b65c:	f7ff fe5a 	bl	800b314 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800b660:	2000      	movs	r0, #0
 800b662:	f7ff fe57 	bl	800b314 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x3C); // BorderWavefrom
 800b666:	203c      	movs	r0, #60	@ 0x3c
 800b668:	f7ff fe36 	bl	800b2d8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x80);
 800b66c:	2080      	movs	r0, #128	@ 0x80
 800b66e:	f7ff fe51 	bl	800b314 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x22);
 800b672:	2022      	movs	r0, #34	@ 0x22
 800b674:	f7ff fe30 	bl	800b2d8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xc0);
 800b678:	20c0      	movs	r0, #192	@ 0xc0
 800b67a:	f7ff fe4b 	bl	800b314 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 800b67e:	2020      	movs	r0, #32
 800b680:	f7ff fe2a 	bl	800b2d8 <EPD_1IN54_V2_SendCommand>

#if (USE_TIME_PROFILING == 1)
    startTick = DWT->CYCCNT;
#endif /* USE_TIME_PROFILING */
    EPD_1IN54_V2_ReadBusy();
 800b684:	f7ff fe64 	bl	800b350 <EPD_1IN54_V2_ReadBusy>
#if (USE_TIME_PROFILING == 1)
    tmp = DWT->CYCCNT - startTick;
    printf("###  EPD_1IN54_V2_Init_Partial-2: %d\n", (int)(tmp * 0.0000625));
#endif /* USE_TIME_PROFILING */
}
 800b688:	46c0      	nop			@ (mov r8, r8)
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	46c0      	nop			@ (mov r8, r8)
 800b690:	200000b0 	.word	0x200000b0

0800b694 <EPD_1IN54_V2_Display>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_1IN54_V2_Display(UBYTE *Image)
{
 800b694:	b590      	push	{r4, r7, lr}
 800b696:	b087      	sub	sp, #28
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0) ? (EPD_1IN54_V2_WIDTH / 8) : (EPD_1IN54_V2_WIDTH / 8 + 1);
 800b69c:	2312      	movs	r3, #18
 800b69e:	18fb      	adds	r3, r7, r3
 800b6a0:	2219      	movs	r2, #25
 800b6a2:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 800b6a4:	2310      	movs	r3, #16
 800b6a6:	18fb      	adds	r3, r7, r3
 800b6a8:	22c8      	movs	r2, #200	@ 0xc8
 800b6aa:	801a      	strh	r2, [r3, #0]

    UDOUBLE Addr = 0;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	60fb      	str	r3, [r7, #12]
    EPD_1IN54_V2_SendCommand(0x24);
 800b6b0:	2024      	movs	r0, #36	@ 0x24
 800b6b2:	f7ff fe11 	bl	800b2d8 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++)
 800b6b6:	2316      	movs	r3, #22
 800b6b8:	18fb      	adds	r3, r7, r3
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	801a      	strh	r2, [r3, #0]
 800b6be:	e02a      	b.n	800b716 <EPD_1IN54_V2_Display+0x82>
    {
        for (UWORD i = 0; i < Width; i++)
 800b6c0:	2314      	movs	r3, #20
 800b6c2:	18fb      	adds	r3, r7, r3
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	801a      	strh	r2, [r3, #0]
 800b6c8:	e017      	b.n	800b6fa <EPD_1IN54_V2_Display+0x66>
        {
            Addr = i + j * Width;
 800b6ca:	2414      	movs	r4, #20
 800b6cc:	193b      	adds	r3, r7, r4
 800b6ce:	881a      	ldrh	r2, [r3, #0]
 800b6d0:	2316      	movs	r3, #22
 800b6d2:	18fb      	adds	r3, r7, r3
 800b6d4:	881b      	ldrh	r3, [r3, #0]
 800b6d6:	2112      	movs	r1, #18
 800b6d8:	1879      	adds	r1, r7, r1
 800b6da:	8809      	ldrh	r1, [r1, #0]
 800b6dc:	434b      	muls	r3, r1
 800b6de:	18d3      	adds	r3, r2, r3
 800b6e0:	60fb      	str	r3, [r7, #12]
            EPD_1IN54_V2_SendData(Image[Addr]);
 800b6e2:	687a      	ldr	r2, [r7, #4]
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	18d3      	adds	r3, r2, r3
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	0018      	movs	r0, r3
 800b6ec:	f7ff fe12 	bl	800b314 <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++)
 800b6f0:	193b      	adds	r3, r7, r4
 800b6f2:	881a      	ldrh	r2, [r3, #0]
 800b6f4:	193b      	adds	r3, r7, r4
 800b6f6:	3201      	adds	r2, #1
 800b6f8:	801a      	strh	r2, [r3, #0]
 800b6fa:	2314      	movs	r3, #20
 800b6fc:	18fa      	adds	r2, r7, r3
 800b6fe:	2312      	movs	r3, #18
 800b700:	18fb      	adds	r3, r7, r3
 800b702:	8812      	ldrh	r2, [r2, #0]
 800b704:	881b      	ldrh	r3, [r3, #0]
 800b706:	429a      	cmp	r2, r3
 800b708:	d3df      	bcc.n	800b6ca <EPD_1IN54_V2_Display+0x36>
    for (UWORD j = 0; j < Height; j++)
 800b70a:	2116      	movs	r1, #22
 800b70c:	187b      	adds	r3, r7, r1
 800b70e:	881a      	ldrh	r2, [r3, #0]
 800b710:	187b      	adds	r3, r7, r1
 800b712:	3201      	adds	r2, #1
 800b714:	801a      	strh	r2, [r3, #0]
 800b716:	2316      	movs	r3, #22
 800b718:	18fa      	adds	r2, r7, r3
 800b71a:	2310      	movs	r3, #16
 800b71c:	18fb      	adds	r3, r7, r3
 800b71e:	8812      	ldrh	r2, [r2, #0]
 800b720:	881b      	ldrh	r3, [r3, #0]
 800b722:	429a      	cmp	r2, r3
 800b724:	d3cc      	bcc.n	800b6c0 <EPD_1IN54_V2_Display+0x2c>
        }
    }
    EPD_1IN54_V2_TurnOnDisplay();
 800b726:	f7ff fe39 	bl	800b39c <EPD_1IN54_V2_TurnOnDisplay>
}
 800b72a:	46c0      	nop			@ (mov r8, r8)
 800b72c:	46bd      	mov	sp, r7
 800b72e:	b007      	add	sp, #28
 800b730:	bd90      	pop	{r4, r7, pc}

0800b732 <EPD_1IN54_V2_DisplayPartBaseImage>:
function :	 The image of the previous frame must be uploaded, otherwise the
                 first few seconds will display an exception.
parameter:
******************************************************************************/
void EPD_1IN54_V2_DisplayPartBaseImage(UBYTE *Image)
{
 800b732:	b590      	push	{r4, r7, lr}
 800b734:	b087      	sub	sp, #28
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0) ? (EPD_1IN54_V2_WIDTH / 8) : (EPD_1IN54_V2_WIDTH / 8 + 1);
 800b73a:	230e      	movs	r3, #14
 800b73c:	18fb      	adds	r3, r7, r3
 800b73e:	2219      	movs	r2, #25
 800b740:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 800b742:	230c      	movs	r3, #12
 800b744:	18fb      	adds	r3, r7, r3
 800b746:	22c8      	movs	r2, #200	@ 0xc8
 800b748:	801a      	strh	r2, [r3, #0]

    UDOUBLE Addr = 0;
 800b74a:	2300      	movs	r3, #0
 800b74c:	60bb      	str	r3, [r7, #8]
    EPD_1IN54_V2_SendCommand(0x24);
 800b74e:	2024      	movs	r0, #36	@ 0x24
 800b750:	f7ff fdc2 	bl	800b2d8 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++)
 800b754:	2316      	movs	r3, #22
 800b756:	18fb      	adds	r3, r7, r3
 800b758:	2200      	movs	r2, #0
 800b75a:	801a      	strh	r2, [r3, #0]
 800b75c:	e02a      	b.n	800b7b4 <EPD_1IN54_V2_DisplayPartBaseImage+0x82>
    {
        for (UWORD i = 0; i < Width; i++)
 800b75e:	2314      	movs	r3, #20
 800b760:	18fb      	adds	r3, r7, r3
 800b762:	2200      	movs	r2, #0
 800b764:	801a      	strh	r2, [r3, #0]
 800b766:	e017      	b.n	800b798 <EPD_1IN54_V2_DisplayPartBaseImage+0x66>
        {
            Addr = i + j * Width;
 800b768:	2414      	movs	r4, #20
 800b76a:	193b      	adds	r3, r7, r4
 800b76c:	881a      	ldrh	r2, [r3, #0]
 800b76e:	2316      	movs	r3, #22
 800b770:	18fb      	adds	r3, r7, r3
 800b772:	881b      	ldrh	r3, [r3, #0]
 800b774:	210e      	movs	r1, #14
 800b776:	1879      	adds	r1, r7, r1
 800b778:	8809      	ldrh	r1, [r1, #0]
 800b77a:	434b      	muls	r3, r1
 800b77c:	18d3      	adds	r3, r2, r3
 800b77e:	60bb      	str	r3, [r7, #8]
            EPD_1IN54_V2_SendData(Image[Addr]);
 800b780:	687a      	ldr	r2, [r7, #4]
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	18d3      	adds	r3, r2, r3
 800b786:	781b      	ldrb	r3, [r3, #0]
 800b788:	0018      	movs	r0, r3
 800b78a:	f7ff fdc3 	bl	800b314 <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++)
 800b78e:	193b      	adds	r3, r7, r4
 800b790:	881a      	ldrh	r2, [r3, #0]
 800b792:	193b      	adds	r3, r7, r4
 800b794:	3201      	adds	r2, #1
 800b796:	801a      	strh	r2, [r3, #0]
 800b798:	2314      	movs	r3, #20
 800b79a:	18fa      	adds	r2, r7, r3
 800b79c:	230e      	movs	r3, #14
 800b79e:	18fb      	adds	r3, r7, r3
 800b7a0:	8812      	ldrh	r2, [r2, #0]
 800b7a2:	881b      	ldrh	r3, [r3, #0]
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d3df      	bcc.n	800b768 <EPD_1IN54_V2_DisplayPartBaseImage+0x36>
    for (UWORD j = 0; j < Height; j++)
 800b7a8:	2116      	movs	r1, #22
 800b7aa:	187b      	adds	r3, r7, r1
 800b7ac:	881a      	ldrh	r2, [r3, #0]
 800b7ae:	187b      	adds	r3, r7, r1
 800b7b0:	3201      	adds	r2, #1
 800b7b2:	801a      	strh	r2, [r3, #0]
 800b7b4:	2316      	movs	r3, #22
 800b7b6:	18fa      	adds	r2, r7, r3
 800b7b8:	230c      	movs	r3, #12
 800b7ba:	18fb      	adds	r3, r7, r3
 800b7bc:	8812      	ldrh	r2, [r2, #0]
 800b7be:	881b      	ldrh	r3, [r3, #0]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d3cc      	bcc.n	800b75e <EPD_1IN54_V2_DisplayPartBaseImage+0x2c>
        }
    }
    EPD_1IN54_V2_SendCommand(0x26);
 800b7c4:	2026      	movs	r0, #38	@ 0x26
 800b7c6:	f7ff fd87 	bl	800b2d8 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++)
 800b7ca:	2312      	movs	r3, #18
 800b7cc:	18fb      	adds	r3, r7, r3
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	801a      	strh	r2, [r3, #0]
 800b7d2:	e02a      	b.n	800b82a <EPD_1IN54_V2_DisplayPartBaseImage+0xf8>
    {
        for (UWORD i = 0; i < Width; i++)
 800b7d4:	2310      	movs	r3, #16
 800b7d6:	18fb      	adds	r3, r7, r3
 800b7d8:	2200      	movs	r2, #0
 800b7da:	801a      	strh	r2, [r3, #0]
 800b7dc:	e017      	b.n	800b80e <EPD_1IN54_V2_DisplayPartBaseImage+0xdc>
        {
            Addr = i + j * Width;
 800b7de:	2410      	movs	r4, #16
 800b7e0:	193b      	adds	r3, r7, r4
 800b7e2:	881a      	ldrh	r2, [r3, #0]
 800b7e4:	2312      	movs	r3, #18
 800b7e6:	18fb      	adds	r3, r7, r3
 800b7e8:	881b      	ldrh	r3, [r3, #0]
 800b7ea:	210e      	movs	r1, #14
 800b7ec:	1879      	adds	r1, r7, r1
 800b7ee:	8809      	ldrh	r1, [r1, #0]
 800b7f0:	434b      	muls	r3, r1
 800b7f2:	18d3      	adds	r3, r2, r3
 800b7f4:	60bb      	str	r3, [r7, #8]
            EPD_1IN54_V2_SendData(Image[Addr]);
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	18d3      	adds	r3, r2, r3
 800b7fc:	781b      	ldrb	r3, [r3, #0]
 800b7fe:	0018      	movs	r0, r3
 800b800:	f7ff fd88 	bl	800b314 <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++)
 800b804:	193b      	adds	r3, r7, r4
 800b806:	881a      	ldrh	r2, [r3, #0]
 800b808:	193b      	adds	r3, r7, r4
 800b80a:	3201      	adds	r2, #1
 800b80c:	801a      	strh	r2, [r3, #0]
 800b80e:	2310      	movs	r3, #16
 800b810:	18fa      	adds	r2, r7, r3
 800b812:	230e      	movs	r3, #14
 800b814:	18fb      	adds	r3, r7, r3
 800b816:	8812      	ldrh	r2, [r2, #0]
 800b818:	881b      	ldrh	r3, [r3, #0]
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d3df      	bcc.n	800b7de <EPD_1IN54_V2_DisplayPartBaseImage+0xac>
    for (UWORD j = 0; j < Height; j++)
 800b81e:	2112      	movs	r1, #18
 800b820:	187b      	adds	r3, r7, r1
 800b822:	881a      	ldrh	r2, [r3, #0]
 800b824:	187b      	adds	r3, r7, r1
 800b826:	3201      	adds	r2, #1
 800b828:	801a      	strh	r2, [r3, #0]
 800b82a:	2312      	movs	r3, #18
 800b82c:	18fa      	adds	r2, r7, r3
 800b82e:	230c      	movs	r3, #12
 800b830:	18fb      	adds	r3, r7, r3
 800b832:	8812      	ldrh	r2, [r2, #0]
 800b834:	881b      	ldrh	r3, [r3, #0]
 800b836:	429a      	cmp	r2, r3
 800b838:	d3cc      	bcc.n	800b7d4 <EPD_1IN54_V2_DisplayPartBaseImage+0xa2>
        }
    }
    EPD_1IN54_V2_TurnOnDisplayPart();
 800b83a:	f7ff fdbf 	bl	800b3bc <EPD_1IN54_V2_TurnOnDisplayPart>
}
 800b83e:	46c0      	nop			@ (mov r8, r8)
 800b840:	46bd      	mov	sp, r7
 800b842:	b007      	add	sp, #28
 800b844:	bd90      	pop	{r4, r7, pc}

0800b846 <EPD_1IN54_V2_DisplayPart>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_1IN54_V2_DisplayPart(UBYTE *Image)
{
 800b846:	b590      	push	{r4, r7, lr}
 800b848:	b087      	sub	sp, #28
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0) ? (EPD_1IN54_V2_WIDTH / 8) : (EPD_1IN54_V2_WIDTH / 8 + 1);
 800b84e:	2312      	movs	r3, #18
 800b850:	18fb      	adds	r3, r7, r3
 800b852:	2219      	movs	r2, #25
 800b854:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 800b856:	2310      	movs	r3, #16
 800b858:	18fb      	adds	r3, r7, r3
 800b85a:	22c8      	movs	r2, #200	@ 0xc8
 800b85c:	801a      	strh	r2, [r3, #0]

    UDOUBLE Addr = 0;
 800b85e:	2300      	movs	r3, #0
 800b860:	60fb      	str	r3, [r7, #12]
    EPD_1IN54_V2_SendCommand(0x24);
 800b862:	2024      	movs	r0, #36	@ 0x24
 800b864:	f7ff fd38 	bl	800b2d8 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++)
 800b868:	2316      	movs	r3, #22
 800b86a:	18fb      	adds	r3, r7, r3
 800b86c:	2200      	movs	r2, #0
 800b86e:	801a      	strh	r2, [r3, #0]
 800b870:	e02a      	b.n	800b8c8 <EPD_1IN54_V2_DisplayPart+0x82>
    {
        for (UWORD i = 0; i < Width; i++)
 800b872:	2314      	movs	r3, #20
 800b874:	18fb      	adds	r3, r7, r3
 800b876:	2200      	movs	r2, #0
 800b878:	801a      	strh	r2, [r3, #0]
 800b87a:	e017      	b.n	800b8ac <EPD_1IN54_V2_DisplayPart+0x66>
        {
            Addr = i + j * Width;
 800b87c:	2414      	movs	r4, #20
 800b87e:	193b      	adds	r3, r7, r4
 800b880:	881a      	ldrh	r2, [r3, #0]
 800b882:	2316      	movs	r3, #22
 800b884:	18fb      	adds	r3, r7, r3
 800b886:	881b      	ldrh	r3, [r3, #0]
 800b888:	2112      	movs	r1, #18
 800b88a:	1879      	adds	r1, r7, r1
 800b88c:	8809      	ldrh	r1, [r1, #0]
 800b88e:	434b      	muls	r3, r1
 800b890:	18d3      	adds	r3, r2, r3
 800b892:	60fb      	str	r3, [r7, #12]
            EPD_1IN54_V2_SendData(Image[Addr]);
 800b894:	687a      	ldr	r2, [r7, #4]
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	18d3      	adds	r3, r2, r3
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	0018      	movs	r0, r3
 800b89e:	f7ff fd39 	bl	800b314 <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++)
 800b8a2:	193b      	adds	r3, r7, r4
 800b8a4:	881a      	ldrh	r2, [r3, #0]
 800b8a6:	193b      	adds	r3, r7, r4
 800b8a8:	3201      	adds	r2, #1
 800b8aa:	801a      	strh	r2, [r3, #0]
 800b8ac:	2314      	movs	r3, #20
 800b8ae:	18fa      	adds	r2, r7, r3
 800b8b0:	2312      	movs	r3, #18
 800b8b2:	18fb      	adds	r3, r7, r3
 800b8b4:	8812      	ldrh	r2, [r2, #0]
 800b8b6:	881b      	ldrh	r3, [r3, #0]
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d3df      	bcc.n	800b87c <EPD_1IN54_V2_DisplayPart+0x36>
    for (UWORD j = 0; j < Height; j++)
 800b8bc:	2116      	movs	r1, #22
 800b8be:	187b      	adds	r3, r7, r1
 800b8c0:	881a      	ldrh	r2, [r3, #0]
 800b8c2:	187b      	adds	r3, r7, r1
 800b8c4:	3201      	adds	r2, #1
 800b8c6:	801a      	strh	r2, [r3, #0]
 800b8c8:	2316      	movs	r3, #22
 800b8ca:	18fa      	adds	r2, r7, r3
 800b8cc:	2310      	movs	r3, #16
 800b8ce:	18fb      	adds	r3, r7, r3
 800b8d0:	8812      	ldrh	r2, [r2, #0]
 800b8d2:	881b      	ldrh	r3, [r3, #0]
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d3cc      	bcc.n	800b872 <EPD_1IN54_V2_DisplayPart+0x2c>
        }
    }

    EPD_1IN54_V2_TurnOnDisplayPart();
 800b8d8:	f7ff fd70 	bl	800b3bc <EPD_1IN54_V2_TurnOnDisplayPart>
}
 800b8dc:	46c0      	nop			@ (mov r8, r8)
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	b007      	add	sp, #28
 800b8e2:	bd90      	pop	{r4, r7, pc}

0800b8e4 <EPD_1IN54_V2_Sleep>:
/******************************************************************************
function :	Enter sleep mode
parameter:
******************************************************************************/
void EPD_1IN54_V2_Sleep(void)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_SendCommand(0x10); // enter deep sleep
 800b8e8:	2010      	movs	r0, #16
 800b8ea:	f7ff fcf5 	bl	800b2d8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x01);
 800b8ee:	2001      	movs	r0, #1
 800b8f0:	f7ff fd10 	bl	800b314 <EPD_1IN54_V2_SendData>
    //    DEV_Delay_ms(100);
}
 800b8f4:	46c0      	nop			@ (mov r8, r8)
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
	...

0800b8fc <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 800b8fc:	b5b0      	push	{r4, r5, r7, lr}
 800b8fe:	b084      	sub	sp, #16
 800b900:	af00      	add	r7, sp, #0
 800b902:	60f8      	str	r0, [r7, #12]
 800b904:	000c      	movs	r4, r1
 800b906:	0010      	movs	r0, r2
 800b908:	0019      	movs	r1, r3
 800b90a:	250a      	movs	r5, #10
 800b90c:	197b      	adds	r3, r7, r5
 800b90e:	1c22      	adds	r2, r4, #0
 800b910:	801a      	strh	r2, [r3, #0]
 800b912:	2408      	movs	r4, #8
 800b914:	193b      	adds	r3, r7, r4
 800b916:	1c02      	adds	r2, r0, #0
 800b918:	801a      	strh	r2, [r3, #0]
 800b91a:	1dbb      	adds	r3, r7, #6
 800b91c:	1c0a      	adds	r2, r1, #0
 800b91e:	801a      	strh	r2, [r3, #0]
    Paint.Image = NULL;
 800b920:	4b2c      	ldr	r3, [pc, #176]	@ (800b9d4 <Paint_NewImage+0xd8>)
 800b922:	2200      	movs	r2, #0
 800b924:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 800b926:	4b2b      	ldr	r3, [pc, #172]	@ (800b9d4 <Paint_NewImage+0xd8>)
 800b928:	68fa      	ldr	r2, [r7, #12]
 800b92a:	601a      	str	r2, [r3, #0]

    Paint.WidthMemory = Width;
 800b92c:	4b29      	ldr	r3, [pc, #164]	@ (800b9d4 <Paint_NewImage+0xd8>)
 800b92e:	0029      	movs	r1, r5
 800b930:	187a      	adds	r2, r7, r1
 800b932:	8812      	ldrh	r2, [r2, #0]
 800b934:	811a      	strh	r2, [r3, #8]
    Paint.HeightMemory = Height;
 800b936:	4b27      	ldr	r3, [pc, #156]	@ (800b9d4 <Paint_NewImage+0xd8>)
 800b938:	193a      	adds	r2, r7, r4
 800b93a:	8812      	ldrh	r2, [r2, #0]
 800b93c:	815a      	strh	r2, [r3, #10]
    Paint.Color = Color;    
 800b93e:	4a25      	ldr	r2, [pc, #148]	@ (800b9d4 <Paint_NewImage+0xd8>)
 800b940:	2320      	movs	r3, #32
 800b942:	18fb      	adds	r3, r7, r3
 800b944:	881b      	ldrh	r3, [r3, #0]
 800b946:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 800b948:	4b22      	ldr	r3, [pc, #136]	@ (800b9d4 <Paint_NewImage+0xd8>)
 800b94a:	2202      	movs	r2, #2
 800b94c:	82da      	strh	r2, [r3, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 800b94e:	187b      	adds	r3, r7, r1
 800b950:	881b      	ldrh	r3, [r3, #0]
 800b952:	2207      	movs	r2, #7
 800b954:	4013      	ands	r3, r2
 800b956:	b29b      	uxth	r3, r3
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d104      	bne.n	800b966 <Paint_NewImage+0x6a>
 800b95c:	187b      	adds	r3, r7, r1
 800b95e:	881b      	ldrh	r3, [r3, #0]
 800b960:	08db      	lsrs	r3, r3, #3
 800b962:	b29b      	uxth	r3, r3
 800b964:	e006      	b.n	800b974 <Paint_NewImage+0x78>
 800b966:	230a      	movs	r3, #10
 800b968:	18fb      	adds	r3, r7, r3
 800b96a:	881b      	ldrh	r3, [r3, #0]
 800b96c:	08db      	lsrs	r3, r3, #3
 800b96e:	b29b      	uxth	r3, r3
 800b970:	3301      	adds	r3, #1
 800b972:	b29b      	uxth	r3, r3
 800b974:	4a17      	ldr	r2, [pc, #92]	@ (800b9d4 <Paint_NewImage+0xd8>)
 800b976:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 800b978:	4b16      	ldr	r3, [pc, #88]	@ (800b9d4 <Paint_NewImage+0xd8>)
 800b97a:	2208      	movs	r2, #8
 800b97c:	18ba      	adds	r2, r7, r2
 800b97e:	8812      	ldrh	r2, [r2, #0]
 800b980:	829a      	strh	r2, [r3, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 800b982:	4b14      	ldr	r3, [pc, #80]	@ (800b9d4 <Paint_NewImage+0xd8>)
 800b984:	1dba      	adds	r2, r7, #6
 800b986:	8812      	ldrh	r2, [r2, #0]
 800b988:	81da      	strh	r2, [r3, #14]
    Paint.Mirror = MIRROR_NONE;
 800b98a:	4b12      	ldr	r3, [pc, #72]	@ (800b9d4 <Paint_NewImage+0xd8>)
 800b98c:	2200      	movs	r2, #0
 800b98e:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 800b990:	1dbb      	adds	r3, r7, #6
 800b992:	881b      	ldrh	r3, [r3, #0]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d003      	beq.n	800b9a0 <Paint_NewImage+0xa4>
 800b998:	1dbb      	adds	r3, r7, #6
 800b99a:	881b      	ldrh	r3, [r3, #0]
 800b99c:	2bb4      	cmp	r3, #180	@ 0xb4
 800b99e:	d10a      	bne.n	800b9b6 <Paint_NewImage+0xba>
        Paint.Width = Width;
 800b9a0:	4b0c      	ldr	r3, [pc, #48]	@ (800b9d4 <Paint_NewImage+0xd8>)
 800b9a2:	220a      	movs	r2, #10
 800b9a4:	18ba      	adds	r2, r7, r2
 800b9a6:	8812      	ldrh	r2, [r2, #0]
 800b9a8:	809a      	strh	r2, [r3, #4]
        Paint.Height = Height;
 800b9aa:	4b0a      	ldr	r3, [pc, #40]	@ (800b9d4 <Paint_NewImage+0xd8>)
 800b9ac:	2208      	movs	r2, #8
 800b9ae:	18ba      	adds	r2, r7, r2
 800b9b0:	8812      	ldrh	r2, [r2, #0]
 800b9b2:	80da      	strh	r2, [r3, #6]
 800b9b4:	e00a      	b.n	800b9cc <Paint_NewImage+0xd0>
    } else {
        Paint.Width = Height;
 800b9b6:	4b07      	ldr	r3, [pc, #28]	@ (800b9d4 <Paint_NewImage+0xd8>)
 800b9b8:	2208      	movs	r2, #8
 800b9ba:	18ba      	adds	r2, r7, r2
 800b9bc:	8812      	ldrh	r2, [r2, #0]
 800b9be:	809a      	strh	r2, [r3, #4]
        Paint.Height = Width;
 800b9c0:	4b04      	ldr	r3, [pc, #16]	@ (800b9d4 <Paint_NewImage+0xd8>)
 800b9c2:	220a      	movs	r2, #10
 800b9c4:	18ba      	adds	r2, r7, r2
 800b9c6:	8812      	ldrh	r2, [r2, #0]
 800b9c8:	80da      	strh	r2, [r3, #6]
    }
}
 800b9ca:	46c0      	nop			@ (mov r8, r8)
 800b9cc:	46c0      	nop			@ (mov r8, r8)
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	b004      	add	sp, #16
 800b9d2:	bdb0      	pop	{r4, r5, r7, pc}
 800b9d4:	200005a8 	.word	0x200005a8

0800b9d8 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b082      	sub	sp, #8
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 800b9e0:	4b03      	ldr	r3, [pc, #12]	@ (800b9f0 <Paint_SelectImage+0x18>)
 800b9e2:	687a      	ldr	r2, [r7, #4]
 800b9e4:	601a      	str	r2, [r3, #0]
}
 800b9e6:	46c0      	nop			@ (mov r8, r8)
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	b002      	add	sp, #8
 800b9ec:	bd80      	pop	{r7, pc}
 800b9ee:	46c0      	nop			@ (mov r8, r8)
 800b9f0:	200005a8 	.word	0x200005a8

0800b9f4 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 800b9f4:	b590      	push	{r4, r7, lr}
 800b9f6:	b08b      	sub	sp, #44	@ 0x2c
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	0004      	movs	r4, r0
 800b9fc:	0008      	movs	r0, r1
 800b9fe:	0011      	movs	r1, r2
 800ba00:	1dbb      	adds	r3, r7, #6
 800ba02:	1c22      	adds	r2, r4, #0
 800ba04:	801a      	strh	r2, [r3, #0]
 800ba06:	1d3b      	adds	r3, r7, #4
 800ba08:	1c02      	adds	r2, r0, #0
 800ba0a:	801a      	strh	r2, [r3, #0]
 800ba0c:	1cbb      	adds	r3, r7, #2
 800ba0e:	1c0a      	adds	r2, r1, #0
 800ba10:	801a      	strh	r2, [r3, #0]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 800ba12:	4bc4      	ldr	r3, [pc, #784]	@ (800bd24 <Paint_SetPixel+0x330>)
 800ba14:	889b      	ldrh	r3, [r3, #4]
 800ba16:	1dba      	adds	r2, r7, #6
 800ba18:	8812      	ldrh	r2, [r2, #0]
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d900      	bls.n	800ba20 <Paint_SetPixel+0x2c>
 800ba1e:	e17b      	b.n	800bd18 <Paint_SetPixel+0x324>
 800ba20:	4bc0      	ldr	r3, [pc, #768]	@ (800bd24 <Paint_SetPixel+0x330>)
 800ba22:	88db      	ldrh	r3, [r3, #6]
 800ba24:	1d3a      	adds	r2, r7, #4
 800ba26:	8812      	ldrh	r2, [r2, #0]
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d900      	bls.n	800ba2e <Paint_SetPixel+0x3a>
 800ba2c:	e174      	b.n	800bd18 <Paint_SetPixel+0x324>
        DE_BUG("Exceeding display boundaries\r\n");
        return;
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 800ba2e:	4bbd      	ldr	r3, [pc, #756]	@ (800bd24 <Paint_SetPixel+0x330>)
 800ba30:	89db      	ldrh	r3, [r3, #14]
 800ba32:	2287      	movs	r2, #135	@ 0x87
 800ba34:	0052      	lsls	r2, r2, #1
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d03d      	beq.n	800bab6 <Paint_SetPixel+0xc2>
 800ba3a:	2287      	movs	r2, #135	@ 0x87
 800ba3c:	0052      	lsls	r2, r2, #1
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	dd00      	ble.n	800ba44 <Paint_SetPixel+0x50>
 800ba42:	e16b      	b.n	800bd1c <Paint_SetPixel+0x328>
 800ba44:	2bb4      	cmp	r3, #180	@ 0xb4
 800ba46:	d021      	beq.n	800ba8c <Paint_SetPixel+0x98>
 800ba48:	dd00      	ble.n	800ba4c <Paint_SetPixel+0x58>
 800ba4a:	e167      	b.n	800bd1c <Paint_SetPixel+0x328>
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d002      	beq.n	800ba56 <Paint_SetPixel+0x62>
 800ba50:	2b5a      	cmp	r3, #90	@ 0x5a
 800ba52:	d00b      	beq.n	800ba6c <Paint_SetPixel+0x78>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 800ba54:	e162      	b.n	800bd1c <Paint_SetPixel+0x328>
        X = Xpoint;
 800ba56:	2326      	movs	r3, #38	@ 0x26
 800ba58:	18fb      	adds	r3, r7, r3
 800ba5a:	1dba      	adds	r2, r7, #6
 800ba5c:	8812      	ldrh	r2, [r2, #0]
 800ba5e:	801a      	strh	r2, [r3, #0]
        Y = Ypoint;  
 800ba60:	2324      	movs	r3, #36	@ 0x24
 800ba62:	18fb      	adds	r3, r7, r3
 800ba64:	1d3a      	adds	r2, r7, #4
 800ba66:	8812      	ldrh	r2, [r2, #0]
 800ba68:	801a      	strh	r2, [r3, #0]
        break;
 800ba6a:	e034      	b.n	800bad6 <Paint_SetPixel+0xe2>
        X = Paint.WidthMemory - Ypoint - 1;
 800ba6c:	4bad      	ldr	r3, [pc, #692]	@ (800bd24 <Paint_SetPixel+0x330>)
 800ba6e:	891a      	ldrh	r2, [r3, #8]
 800ba70:	1d3b      	adds	r3, r7, #4
 800ba72:	881b      	ldrh	r3, [r3, #0]
 800ba74:	1ad3      	subs	r3, r2, r3
 800ba76:	b29a      	uxth	r2, r3
 800ba78:	2326      	movs	r3, #38	@ 0x26
 800ba7a:	18fb      	adds	r3, r7, r3
 800ba7c:	3a01      	subs	r2, #1
 800ba7e:	801a      	strh	r2, [r3, #0]
        Y = Xpoint;
 800ba80:	2324      	movs	r3, #36	@ 0x24
 800ba82:	18fb      	adds	r3, r7, r3
 800ba84:	1dba      	adds	r2, r7, #6
 800ba86:	8812      	ldrh	r2, [r2, #0]
 800ba88:	801a      	strh	r2, [r3, #0]
        break;
 800ba8a:	e024      	b.n	800bad6 <Paint_SetPixel+0xe2>
        X = Paint.WidthMemory - Xpoint - 1;
 800ba8c:	4ba5      	ldr	r3, [pc, #660]	@ (800bd24 <Paint_SetPixel+0x330>)
 800ba8e:	891a      	ldrh	r2, [r3, #8]
 800ba90:	1dbb      	adds	r3, r7, #6
 800ba92:	881b      	ldrh	r3, [r3, #0]
 800ba94:	1ad3      	subs	r3, r2, r3
 800ba96:	b29a      	uxth	r2, r3
 800ba98:	2326      	movs	r3, #38	@ 0x26
 800ba9a:	18fb      	adds	r3, r7, r3
 800ba9c:	3a01      	subs	r2, #1
 800ba9e:	801a      	strh	r2, [r3, #0]
        Y = Paint.HeightMemory - Ypoint - 1;
 800baa0:	4ba0      	ldr	r3, [pc, #640]	@ (800bd24 <Paint_SetPixel+0x330>)
 800baa2:	895a      	ldrh	r2, [r3, #10]
 800baa4:	1d3b      	adds	r3, r7, #4
 800baa6:	881b      	ldrh	r3, [r3, #0]
 800baa8:	1ad3      	subs	r3, r2, r3
 800baaa:	b29a      	uxth	r2, r3
 800baac:	2324      	movs	r3, #36	@ 0x24
 800baae:	18fb      	adds	r3, r7, r3
 800bab0:	3a01      	subs	r2, #1
 800bab2:	801a      	strh	r2, [r3, #0]
        break;
 800bab4:	e00f      	b.n	800bad6 <Paint_SetPixel+0xe2>
        X = Ypoint;
 800bab6:	2326      	movs	r3, #38	@ 0x26
 800bab8:	18fb      	adds	r3, r7, r3
 800baba:	1d3a      	adds	r2, r7, #4
 800babc:	8812      	ldrh	r2, [r2, #0]
 800babe:	801a      	strh	r2, [r3, #0]
        Y = Paint.HeightMemory - Xpoint - 1;
 800bac0:	4b98      	ldr	r3, [pc, #608]	@ (800bd24 <Paint_SetPixel+0x330>)
 800bac2:	895a      	ldrh	r2, [r3, #10]
 800bac4:	1dbb      	adds	r3, r7, #6
 800bac6:	881b      	ldrh	r3, [r3, #0]
 800bac8:	1ad3      	subs	r3, r2, r3
 800baca:	b29a      	uxth	r2, r3
 800bacc:	2324      	movs	r3, #36	@ 0x24
 800bace:	18fb      	adds	r3, r7, r3
 800bad0:	3a01      	subs	r2, #1
 800bad2:	801a      	strh	r2, [r3, #0]
        break;
 800bad4:	46c0      	nop			@ (mov r8, r8)
    }
    
    switch(Paint.Mirror) {
 800bad6:	4b93      	ldr	r3, [pc, #588]	@ (800bd24 <Paint_SetPixel+0x330>)
 800bad8:	8a1b      	ldrh	r3, [r3, #16]
 800bada:	2b03      	cmp	r3, #3
 800badc:	d020      	beq.n	800bb20 <Paint_SetPixel+0x12c>
 800bade:	dd00      	ble.n	800bae2 <Paint_SetPixel+0xee>
 800bae0:	e11e      	b.n	800bd20 <Paint_SetPixel+0x32c>
 800bae2:	2b02      	cmp	r3, #2
 800bae4:	d011      	beq.n	800bb0a <Paint_SetPixel+0x116>
 800bae6:	dd00      	ble.n	800baea <Paint_SetPixel+0xf6>
 800bae8:	e11a      	b.n	800bd20 <Paint_SetPixel+0x32c>
 800baea:	2b00      	cmp	r3, #0
 800baec:	d02d      	beq.n	800bb4a <Paint_SetPixel+0x156>
 800baee:	2b01      	cmp	r3, #1
 800baf0:	d000      	beq.n	800baf4 <Paint_SetPixel+0x100>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
        Y = Paint.HeightMemory - Y - 1;
        break;
    default:
        return;
 800baf2:	e115      	b.n	800bd20 <Paint_SetPixel+0x32c>
        X = Paint.WidthMemory - X - 1;
 800baf4:	4b8b      	ldr	r3, [pc, #556]	@ (800bd24 <Paint_SetPixel+0x330>)
 800baf6:	891a      	ldrh	r2, [r3, #8]
 800baf8:	2126      	movs	r1, #38	@ 0x26
 800bafa:	187b      	adds	r3, r7, r1
 800bafc:	881b      	ldrh	r3, [r3, #0]
 800bafe:	1ad3      	subs	r3, r2, r3
 800bb00:	b29a      	uxth	r2, r3
 800bb02:	187b      	adds	r3, r7, r1
 800bb04:	3a01      	subs	r2, #1
 800bb06:	801a      	strh	r2, [r3, #0]
        break;
 800bb08:	e020      	b.n	800bb4c <Paint_SetPixel+0x158>
        Y = Paint.HeightMemory - Y - 1;
 800bb0a:	4b86      	ldr	r3, [pc, #536]	@ (800bd24 <Paint_SetPixel+0x330>)
 800bb0c:	895a      	ldrh	r2, [r3, #10]
 800bb0e:	2124      	movs	r1, #36	@ 0x24
 800bb10:	187b      	adds	r3, r7, r1
 800bb12:	881b      	ldrh	r3, [r3, #0]
 800bb14:	1ad3      	subs	r3, r2, r3
 800bb16:	b29a      	uxth	r2, r3
 800bb18:	187b      	adds	r3, r7, r1
 800bb1a:	3a01      	subs	r2, #1
 800bb1c:	801a      	strh	r2, [r3, #0]
        break;
 800bb1e:	e015      	b.n	800bb4c <Paint_SetPixel+0x158>
        X = Paint.WidthMemory - X - 1;
 800bb20:	4b80      	ldr	r3, [pc, #512]	@ (800bd24 <Paint_SetPixel+0x330>)
 800bb22:	891a      	ldrh	r2, [r3, #8]
 800bb24:	2126      	movs	r1, #38	@ 0x26
 800bb26:	187b      	adds	r3, r7, r1
 800bb28:	881b      	ldrh	r3, [r3, #0]
 800bb2a:	1ad3      	subs	r3, r2, r3
 800bb2c:	b29a      	uxth	r2, r3
 800bb2e:	187b      	adds	r3, r7, r1
 800bb30:	3a01      	subs	r2, #1
 800bb32:	801a      	strh	r2, [r3, #0]
        Y = Paint.HeightMemory - Y - 1;
 800bb34:	4b7b      	ldr	r3, [pc, #492]	@ (800bd24 <Paint_SetPixel+0x330>)
 800bb36:	895a      	ldrh	r2, [r3, #10]
 800bb38:	2124      	movs	r1, #36	@ 0x24
 800bb3a:	187b      	adds	r3, r7, r1
 800bb3c:	881b      	ldrh	r3, [r3, #0]
 800bb3e:	1ad3      	subs	r3, r2, r3
 800bb40:	b29a      	uxth	r2, r3
 800bb42:	187b      	adds	r3, r7, r1
 800bb44:	3a01      	subs	r2, #1
 800bb46:	801a      	strh	r2, [r3, #0]
        break;
 800bb48:	e000      	b.n	800bb4c <Paint_SetPixel+0x158>
        break;
 800bb4a:	46c0      	nop			@ (mov r8, r8)
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 800bb4c:	4b75      	ldr	r3, [pc, #468]	@ (800bd24 <Paint_SetPixel+0x330>)
 800bb4e:	891b      	ldrh	r3, [r3, #8]
 800bb50:	2026      	movs	r0, #38	@ 0x26
 800bb52:	183a      	adds	r2, r7, r0
 800bb54:	8812      	ldrh	r2, [r2, #0]
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d900      	bls.n	800bb5c <Paint_SetPixel+0x168>
 800bb5a:	e0e5      	b.n	800bd28 <Paint_SetPixel+0x334>
 800bb5c:	4b71      	ldr	r3, [pc, #452]	@ (800bd24 <Paint_SetPixel+0x330>)
 800bb5e:	895b      	ldrh	r3, [r3, #10]
 800bb60:	2424      	movs	r4, #36	@ 0x24
 800bb62:	193a      	adds	r2, r7, r4
 800bb64:	8812      	ldrh	r2, [r2, #0]
 800bb66:	429a      	cmp	r2, r3
 800bb68:	d900      	bls.n	800bb6c <Paint_SetPixel+0x178>
 800bb6a:	e0dd      	b.n	800bd28 <Paint_SetPixel+0x334>
        DE_BUG("Exceeding display boundaries\r\n");
        return;
    }
    
    if(Paint.Scale == 2){
 800bb6c:	4b6d      	ldr	r3, [pc, #436]	@ (800bd24 <Paint_SetPixel+0x330>)
 800bb6e:	8adb      	ldrh	r3, [r3, #22]
 800bb70:	2b02      	cmp	r3, #2
 800bb72:	d143      	bne.n	800bbfc <Paint_SetPixel+0x208>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 800bb74:	183b      	adds	r3, r7, r0
 800bb76:	881b      	ldrh	r3, [r3, #0]
 800bb78:	08db      	lsrs	r3, r3, #3
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	0019      	movs	r1, r3
 800bb7e:	193b      	adds	r3, r7, r4
 800bb80:	881b      	ldrh	r3, [r3, #0]
 800bb82:	4a68      	ldr	r2, [pc, #416]	@ (800bd24 <Paint_SetPixel+0x330>)
 800bb84:	8a52      	ldrh	r2, [r2, #18]
 800bb86:	4353      	muls	r3, r2
 800bb88:	18cb      	adds	r3, r1, r3
 800bb8a:	613b      	str	r3, [r7, #16]
        UBYTE Rdata = Paint.Image[Addr];
 800bb8c:	4b65      	ldr	r3, [pc, #404]	@ (800bd24 <Paint_SetPixel+0x330>)
 800bb8e:	681a      	ldr	r2, [r3, #0]
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	18d2      	adds	r2, r2, r3
 800bb94:	210f      	movs	r1, #15
 800bb96:	187b      	adds	r3, r7, r1
 800bb98:	7812      	ldrb	r2, [r2, #0]
 800bb9a:	701a      	strb	r2, [r3, #0]
        if(Color == BLACK)
 800bb9c:	1cbb      	adds	r3, r7, #2
 800bb9e:	881b      	ldrh	r3, [r3, #0]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d115      	bne.n	800bbd0 <Paint_SetPixel+0x1dc>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 800bba4:	183b      	adds	r3, r7, r0
 800bba6:	881b      	ldrh	r3, [r3, #0]
 800bba8:	2207      	movs	r2, #7
 800bbaa:	4013      	ands	r3, r2
 800bbac:	2280      	movs	r2, #128	@ 0x80
 800bbae:	411a      	asrs	r2, r3
 800bbb0:	0013      	movs	r3, r2
 800bbb2:	b25b      	sxtb	r3, r3
 800bbb4:	43db      	mvns	r3, r3
 800bbb6:	b25b      	sxtb	r3, r3
 800bbb8:	187a      	adds	r2, r7, r1
 800bbba:	7812      	ldrb	r2, [r2, #0]
 800bbbc:	b252      	sxtb	r2, r2
 800bbbe:	4013      	ands	r3, r2
 800bbc0:	b259      	sxtb	r1, r3
 800bbc2:	4b58      	ldr	r3, [pc, #352]	@ (800bd24 <Paint_SetPixel+0x330>)
 800bbc4:	681a      	ldr	r2, [r3, #0]
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	18d3      	adds	r3, r2, r3
 800bbca:	b2ca      	uxtb	r2, r1
 800bbcc:	701a      	strb	r2, [r3, #0]
 800bbce:	e0ac      	b.n	800bd2a <Paint_SetPixel+0x336>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 800bbd0:	2326      	movs	r3, #38	@ 0x26
 800bbd2:	18fb      	adds	r3, r7, r3
 800bbd4:	881b      	ldrh	r3, [r3, #0]
 800bbd6:	2207      	movs	r2, #7
 800bbd8:	4013      	ands	r3, r2
 800bbda:	2280      	movs	r2, #128	@ 0x80
 800bbdc:	411a      	asrs	r2, r3
 800bbde:	0013      	movs	r3, r2
 800bbe0:	b25a      	sxtb	r2, r3
 800bbe2:	230f      	movs	r3, #15
 800bbe4:	18fb      	adds	r3, r7, r3
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	b25b      	sxtb	r3, r3
 800bbea:	4313      	orrs	r3, r2
 800bbec:	b259      	sxtb	r1, r3
 800bbee:	4b4d      	ldr	r3, [pc, #308]	@ (800bd24 <Paint_SetPixel+0x330>)
 800bbf0:	681a      	ldr	r2, [r3, #0]
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	18d3      	adds	r3, r2, r3
 800bbf6:	b2ca      	uxtb	r2, r1
 800bbf8:	701a      	strb	r2, [r3, #0]
 800bbfa:	e096      	b.n	800bd2a <Paint_SetPixel+0x336>
    }else if(Paint.Scale == 4){
 800bbfc:	4b49      	ldr	r3, [pc, #292]	@ (800bd24 <Paint_SetPixel+0x330>)
 800bbfe:	8adb      	ldrh	r3, [r3, #22]
 800bc00:	2b04      	cmp	r3, #4
 800bc02:	d145      	bne.n	800bc90 <Paint_SetPixel+0x29c>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 800bc04:	2426      	movs	r4, #38	@ 0x26
 800bc06:	193b      	adds	r3, r7, r4
 800bc08:	881b      	ldrh	r3, [r3, #0]
 800bc0a:	089b      	lsrs	r3, r3, #2
 800bc0c:	b29b      	uxth	r3, r3
 800bc0e:	0019      	movs	r1, r3
 800bc10:	2324      	movs	r3, #36	@ 0x24
 800bc12:	18fb      	adds	r3, r7, r3
 800bc14:	881b      	ldrh	r3, [r3, #0]
 800bc16:	4a43      	ldr	r2, [pc, #268]	@ (800bd24 <Paint_SetPixel+0x330>)
 800bc18:	8a52      	ldrh	r2, [r2, #18]
 800bc1a:	4353      	muls	r3, r2
 800bc1c:	18cb      	adds	r3, r1, r3
 800bc1e:	61bb      	str	r3, [r7, #24]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 800bc20:	1cbb      	adds	r3, r7, #2
 800bc22:	1cba      	adds	r2, r7, #2
 800bc24:	8812      	ldrh	r2, [r2, #0]
 800bc26:	2103      	movs	r1, #3
 800bc28:	400a      	ands	r2, r1
 800bc2a:	801a      	strh	r2, [r3, #0]
        UBYTE Rdata = Paint.Image[Addr];
 800bc2c:	4b3d      	ldr	r3, [pc, #244]	@ (800bd24 <Paint_SetPixel+0x330>)
 800bc2e:	681a      	ldr	r2, [r3, #0]
 800bc30:	69bb      	ldr	r3, [r7, #24]
 800bc32:	18d2      	adds	r2, r2, r3
 800bc34:	2017      	movs	r0, #23
 800bc36:	183b      	adds	r3, r7, r0
 800bc38:	7812      	ldrb	r2, [r2, #0]
 800bc3a:	701a      	strb	r2, [r3, #0]
        
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 800bc3c:	0021      	movs	r1, r4
 800bc3e:	187b      	adds	r3, r7, r1
 800bc40:	881b      	ldrh	r3, [r3, #0]
 800bc42:	2203      	movs	r2, #3
 800bc44:	4013      	ands	r3, r2
 800bc46:	005b      	lsls	r3, r3, #1
 800bc48:	22c0      	movs	r2, #192	@ 0xc0
 800bc4a:	411a      	asrs	r2, r3
 800bc4c:	0013      	movs	r3, r2
 800bc4e:	b25b      	sxtb	r3, r3
 800bc50:	43db      	mvns	r3, r3
 800bc52:	b25b      	sxtb	r3, r3
 800bc54:	183a      	adds	r2, r7, r0
 800bc56:	7812      	ldrb	r2, [r2, #0]
 800bc58:	b252      	sxtb	r2, r2
 800bc5a:	4013      	ands	r3, r2
 800bc5c:	b25a      	sxtb	r2, r3
 800bc5e:	183b      	adds	r3, r7, r0
 800bc60:	701a      	strb	r2, [r3, #0]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 800bc62:	1cbb      	adds	r3, r7, #2
 800bc64:	881b      	ldrh	r3, [r3, #0]
 800bc66:	019a      	lsls	r2, r3, #6
 800bc68:	187b      	adds	r3, r7, r1
 800bc6a:	881b      	ldrh	r3, [r3, #0]
 800bc6c:	2103      	movs	r1, #3
 800bc6e:	400b      	ands	r3, r1
 800bc70:	005b      	lsls	r3, r3, #1
 800bc72:	411a      	asrs	r2, r3
 800bc74:	0013      	movs	r3, r2
 800bc76:	b25a      	sxtb	r2, r3
 800bc78:	183b      	adds	r3, r7, r0
 800bc7a:	781b      	ldrb	r3, [r3, #0]
 800bc7c:	b25b      	sxtb	r3, r3
 800bc7e:	4313      	orrs	r3, r2
 800bc80:	b259      	sxtb	r1, r3
 800bc82:	4b28      	ldr	r3, [pc, #160]	@ (800bd24 <Paint_SetPixel+0x330>)
 800bc84:	681a      	ldr	r2, [r3, #0]
 800bc86:	69bb      	ldr	r3, [r7, #24]
 800bc88:	18d3      	adds	r3, r2, r3
 800bc8a:	b2ca      	uxtb	r2, r1
 800bc8c:	701a      	strb	r2, [r3, #0]
 800bc8e:	e04c      	b.n	800bd2a <Paint_SetPixel+0x336>
    }else if(Paint.Scale == 7){
 800bc90:	4b24      	ldr	r3, [pc, #144]	@ (800bd24 <Paint_SetPixel+0x330>)
 800bc92:	8adb      	ldrh	r3, [r3, #22]
 800bc94:	2b07      	cmp	r3, #7
 800bc96:	d148      	bne.n	800bd2a <Paint_SetPixel+0x336>
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 800bc98:	2426      	movs	r4, #38	@ 0x26
 800bc9a:	193b      	adds	r3, r7, r4
 800bc9c:	881b      	ldrh	r3, [r3, #0]
 800bc9e:	085b      	lsrs	r3, r3, #1
 800bca0:	b29b      	uxth	r3, r3
 800bca2:	0019      	movs	r1, r3
 800bca4:	2324      	movs	r3, #36	@ 0x24
 800bca6:	18fb      	adds	r3, r7, r3
 800bca8:	881b      	ldrh	r3, [r3, #0]
 800bcaa:	4a1e      	ldr	r2, [pc, #120]	@ (800bd24 <Paint_SetPixel+0x330>)
 800bcac:	8a52      	ldrh	r2, [r2, #18]
 800bcae:	4353      	muls	r3, r2
 800bcb0:	18cb      	adds	r3, r1, r3
 800bcb2:	623b      	str	r3, [r7, #32]
		UBYTE Rdata = Paint.Image[Addr];
 800bcb4:	4b1b      	ldr	r3, [pc, #108]	@ (800bd24 <Paint_SetPixel+0x330>)
 800bcb6:	681a      	ldr	r2, [r3, #0]
 800bcb8:	6a3b      	ldr	r3, [r7, #32]
 800bcba:	18d2      	adds	r2, r2, r3
 800bcbc:	201f      	movs	r0, #31
 800bcbe:	183b      	adds	r3, r7, r0
 800bcc0:	7812      	ldrb	r2, [r2, #0]
 800bcc2:	701a      	strb	r2, [r3, #0]
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 800bcc4:	0021      	movs	r1, r4
 800bcc6:	187b      	adds	r3, r7, r1
 800bcc8:	881b      	ldrh	r3, [r3, #0]
 800bcca:	2201      	movs	r2, #1
 800bccc:	4013      	ands	r3, r2
 800bcce:	009b      	lsls	r3, r3, #2
 800bcd0:	22f0      	movs	r2, #240	@ 0xf0
 800bcd2:	411a      	asrs	r2, r3
 800bcd4:	0013      	movs	r3, r2
 800bcd6:	b25b      	sxtb	r3, r3
 800bcd8:	43db      	mvns	r3, r3
 800bcda:	b25b      	sxtb	r3, r3
 800bcdc:	183a      	adds	r2, r7, r0
 800bcde:	7812      	ldrb	r2, [r2, #0]
 800bce0:	b252      	sxtb	r2, r2
 800bce2:	4013      	ands	r3, r2
 800bce4:	b25a      	sxtb	r2, r3
 800bce6:	183b      	adds	r3, r7, r0
 800bce8:	701a      	strb	r2, [r3, #0]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 800bcea:	1cbb      	adds	r3, r7, #2
 800bcec:	881b      	ldrh	r3, [r3, #0]
 800bcee:	011a      	lsls	r2, r3, #4
 800bcf0:	187b      	adds	r3, r7, r1
 800bcf2:	881b      	ldrh	r3, [r3, #0]
 800bcf4:	2101      	movs	r1, #1
 800bcf6:	400b      	ands	r3, r1
 800bcf8:	009b      	lsls	r3, r3, #2
 800bcfa:	411a      	asrs	r2, r3
 800bcfc:	0013      	movs	r3, r2
 800bcfe:	b25a      	sxtb	r2, r3
 800bd00:	183b      	adds	r3, r7, r0
 800bd02:	781b      	ldrb	r3, [r3, #0]
 800bd04:	b25b      	sxtb	r3, r3
 800bd06:	4313      	orrs	r3, r2
 800bd08:	b259      	sxtb	r1, r3
 800bd0a:	4b06      	ldr	r3, [pc, #24]	@ (800bd24 <Paint_SetPixel+0x330>)
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	6a3b      	ldr	r3, [r7, #32]
 800bd10:	18d3      	adds	r3, r2, r3
 800bd12:	b2ca      	uxtb	r2, r1
 800bd14:	701a      	strb	r2, [r3, #0]
 800bd16:	e008      	b.n	800bd2a <Paint_SetPixel+0x336>
        return;
 800bd18:	46c0      	nop			@ (mov r8, r8)
 800bd1a:	e006      	b.n	800bd2a <Paint_SetPixel+0x336>
        return;
 800bd1c:	46c0      	nop			@ (mov r8, r8)
 800bd1e:	e004      	b.n	800bd2a <Paint_SetPixel+0x336>
        return;
 800bd20:	46c0      	nop			@ (mov r8, r8)
 800bd22:	e002      	b.n	800bd2a <Paint_SetPixel+0x336>
 800bd24:	200005a8 	.word	0x200005a8
        return;
 800bd28:	46c0      	nop			@ (mov r8, r8)
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
		}
}
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	b00b      	add	sp, #44	@ 0x2c
 800bd2e:	bd90      	pop	{r4, r7, pc}

0800bd30 <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b086      	sub	sp, #24
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	0002      	movs	r2, r0
 800bd38:	1dbb      	adds	r3, r7, #6
 800bd3a:	801a      	strh	r2, [r3, #0]
	if(Paint.Scale == 2 || Paint.Scale == 4){
 800bd3c:	4b42      	ldr	r3, [pc, #264]	@ (800be48 <Paint_Clear+0x118>)
 800bd3e:	8adb      	ldrh	r3, [r3, #22]
 800bd40:	2b02      	cmp	r3, #2
 800bd42:	d003      	beq.n	800bd4c <Paint_Clear+0x1c>
 800bd44:	4b40      	ldr	r3, [pc, #256]	@ (800be48 <Paint_Clear+0x118>)
 800bd46:	8adb      	ldrh	r3, [r3, #22]
 800bd48:	2b04      	cmp	r3, #4
 800bd4a:	d136      	bne.n	800bdba <Paint_Clear+0x8a>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800bd4c:	2316      	movs	r3, #22
 800bd4e:	18fb      	adds	r3, r7, r3
 800bd50:	2200      	movs	r2, #0
 800bd52:	801a      	strh	r2, [r3, #0]
 800bd54:	e029      	b.n	800bdaa <Paint_Clear+0x7a>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800bd56:	2314      	movs	r3, #20
 800bd58:	18fb      	adds	r3, r7, r3
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	801a      	strh	r2, [r3, #0]
 800bd5e:	e017      	b.n	800bd90 <Paint_Clear+0x60>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 800bd60:	2014      	movs	r0, #20
 800bd62:	183b      	adds	r3, r7, r0
 800bd64:	881a      	ldrh	r2, [r3, #0]
 800bd66:	2316      	movs	r3, #22
 800bd68:	18fb      	adds	r3, r7, r3
 800bd6a:	881b      	ldrh	r3, [r3, #0]
 800bd6c:	4936      	ldr	r1, [pc, #216]	@ (800be48 <Paint_Clear+0x118>)
 800bd6e:	8a49      	ldrh	r1, [r1, #18]
 800bd70:	434b      	muls	r3, r1
 800bd72:	18d3      	adds	r3, r2, r3
 800bd74:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 800bd76:	4b34      	ldr	r3, [pc, #208]	@ (800be48 <Paint_Clear+0x118>)
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	18d3      	adds	r3, r2, r3
 800bd7e:	1dba      	adds	r2, r7, #6
 800bd80:	8812      	ldrh	r2, [r2, #0]
 800bd82:	b2d2      	uxtb	r2, r2
 800bd84:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800bd86:	183b      	adds	r3, r7, r0
 800bd88:	881a      	ldrh	r2, [r3, #0]
 800bd8a:	183b      	adds	r3, r7, r0
 800bd8c:	3201      	adds	r2, #1
 800bd8e:	801a      	strh	r2, [r3, #0]
 800bd90:	4b2d      	ldr	r3, [pc, #180]	@ (800be48 <Paint_Clear+0x118>)
 800bd92:	8a5b      	ldrh	r3, [r3, #18]
 800bd94:	2214      	movs	r2, #20
 800bd96:	18ba      	adds	r2, r7, r2
 800bd98:	8812      	ldrh	r2, [r2, #0]
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d3e0      	bcc.n	800bd60 <Paint_Clear+0x30>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800bd9e:	2116      	movs	r1, #22
 800bda0:	187b      	adds	r3, r7, r1
 800bda2:	881a      	ldrh	r2, [r3, #0]
 800bda4:	187b      	adds	r3, r7, r1
 800bda6:	3201      	adds	r2, #1
 800bda8:	801a      	strh	r2, [r3, #0]
 800bdaa:	4b27      	ldr	r3, [pc, #156]	@ (800be48 <Paint_Clear+0x118>)
 800bdac:	8a9b      	ldrh	r3, [r3, #20]
 800bdae:	2216      	movs	r2, #22
 800bdb0:	18ba      	adds	r2, r7, r2
 800bdb2:	8812      	ldrh	r2, [r2, #0]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d3ce      	bcc.n	800bd56 <Paint_Clear+0x26>
 800bdb8:	e041      	b.n	800be3e <Paint_Clear+0x10e>
			}
		}		
	}else if(Paint.Scale == 7){
 800bdba:	4b23      	ldr	r3, [pc, #140]	@ (800be48 <Paint_Clear+0x118>)
 800bdbc:	8adb      	ldrh	r3, [r3, #22]
 800bdbe:	2b07      	cmp	r3, #7
 800bdc0:	d13d      	bne.n	800be3e <Paint_Clear+0x10e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800bdc2:	2312      	movs	r3, #18
 800bdc4:	18fb      	adds	r3, r7, r3
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	801a      	strh	r2, [r3, #0]
 800bdca:	e030      	b.n	800be2e <Paint_Clear+0xfe>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 800bdcc:	2310      	movs	r3, #16
 800bdce:	18fb      	adds	r3, r7, r3
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	801a      	strh	r2, [r3, #0]
 800bdd4:	e01e      	b.n	800be14 <Paint_Clear+0xe4>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 800bdd6:	2010      	movs	r0, #16
 800bdd8:	183b      	adds	r3, r7, r0
 800bdda:	881a      	ldrh	r2, [r3, #0]
 800bddc:	2312      	movs	r3, #18
 800bdde:	18fb      	adds	r3, r7, r3
 800bde0:	881b      	ldrh	r3, [r3, #0]
 800bde2:	4919      	ldr	r1, [pc, #100]	@ (800be48 <Paint_Clear+0x118>)
 800bde4:	8a49      	ldrh	r1, [r1, #18]
 800bde6:	434b      	muls	r3, r1
 800bde8:	18d3      	adds	r3, r2, r3
 800bdea:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color<<4)|Color;
 800bdec:	1dbb      	adds	r3, r7, #6
 800bdee:	881b      	ldrh	r3, [r3, #0]
 800bdf0:	011b      	lsls	r3, r3, #4
 800bdf2:	b25a      	sxtb	r2, r3
 800bdf4:	1dbb      	adds	r3, r7, #6
 800bdf6:	881b      	ldrh	r3, [r3, #0]
 800bdf8:	b25b      	sxtb	r3, r3
 800bdfa:	4313      	orrs	r3, r2
 800bdfc:	b259      	sxtb	r1, r3
 800bdfe:	4b12      	ldr	r3, [pc, #72]	@ (800be48 <Paint_Clear+0x118>)
 800be00:	681a      	ldr	r2, [r3, #0]
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	18d3      	adds	r3, r2, r3
 800be06:	b2ca      	uxtb	r2, r1
 800be08:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 800be0a:	183b      	adds	r3, r7, r0
 800be0c:	881a      	ldrh	r2, [r3, #0]
 800be0e:	183b      	adds	r3, r7, r0
 800be10:	3201      	adds	r2, #1
 800be12:	801a      	strh	r2, [r3, #0]
 800be14:	4b0c      	ldr	r3, [pc, #48]	@ (800be48 <Paint_Clear+0x118>)
 800be16:	8a5b      	ldrh	r3, [r3, #18]
 800be18:	2210      	movs	r2, #16
 800be1a:	18ba      	adds	r2, r7, r2
 800be1c:	8812      	ldrh	r2, [r2, #0]
 800be1e:	429a      	cmp	r2, r3
 800be20:	d3d9      	bcc.n	800bdd6 <Paint_Clear+0xa6>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800be22:	2112      	movs	r1, #18
 800be24:	187b      	adds	r3, r7, r1
 800be26:	881a      	ldrh	r2, [r3, #0]
 800be28:	187b      	adds	r3, r7, r1
 800be2a:	3201      	adds	r2, #1
 800be2c:	801a      	strh	r2, [r3, #0]
 800be2e:	4b06      	ldr	r3, [pc, #24]	@ (800be48 <Paint_Clear+0x118>)
 800be30:	8a9b      	ldrh	r3, [r3, #20]
 800be32:	2212      	movs	r2, #18
 800be34:	18ba      	adds	r2, r7, r2
 800be36:	8812      	ldrh	r2, [r2, #0]
 800be38:	429a      	cmp	r2, r3
 800be3a:	d3c7      	bcc.n	800bdcc <Paint_Clear+0x9c>
			}
		}		
	}
}
 800be3c:	e7ff      	b.n	800be3e <Paint_Clear+0x10e>
 800be3e:	46c0      	nop			@ (mov r8, r8)
 800be40:	46bd      	mov	sp, r7
 800be42:	b006      	add	sp, #24
 800be44:	bd80      	pop	{r7, pc}
 800be46:	46c0      	nop			@ (mov r8, r8)
 800be48:	200005a8 	.word	0x200005a8

0800be4c <Paint_ClearWindows>:
    Xend   : x end point
    Yend   : y end point
    Color  : Painted colors
******************************************************************************/
void Paint_ClearWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, UWORD Color)
{
 800be4c:	b5b0      	push	{r4, r5, r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	0005      	movs	r5, r0
 800be54:	000c      	movs	r4, r1
 800be56:	0010      	movs	r0, r2
 800be58:	0019      	movs	r1, r3
 800be5a:	1dbb      	adds	r3, r7, #6
 800be5c:	1c2a      	adds	r2, r5, #0
 800be5e:	801a      	strh	r2, [r3, #0]
 800be60:	1d3b      	adds	r3, r7, #4
 800be62:	1c22      	adds	r2, r4, #0
 800be64:	801a      	strh	r2, [r3, #0]
 800be66:	1cbb      	adds	r3, r7, #2
 800be68:	1c02      	adds	r2, r0, #0
 800be6a:	801a      	strh	r2, [r3, #0]
 800be6c:	003b      	movs	r3, r7
 800be6e:	1c0a      	adds	r2, r1, #0
 800be70:	801a      	strh	r2, [r3, #0]
    UWORD X, Y;
    for (Y = Ystart; Y < Yend; Y++) {
 800be72:	230c      	movs	r3, #12
 800be74:	18fb      	adds	r3, r7, r3
 800be76:	1d3a      	adds	r2, r7, #4
 800be78:	8812      	ldrh	r2, [r2, #0]
 800be7a:	801a      	strh	r2, [r3, #0]
 800be7c:	e024      	b.n	800bec8 <Paint_ClearWindows+0x7c>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 800be7e:	230e      	movs	r3, #14
 800be80:	18fb      	adds	r3, r7, r3
 800be82:	1dba      	adds	r2, r7, #6
 800be84:	8812      	ldrh	r2, [r2, #0]
 800be86:	801a      	strh	r2, [r3, #0]
 800be88:	e011      	b.n	800beae <Paint_ClearWindows+0x62>
            Paint_SetPixel(X, Y, Color);
 800be8a:	2320      	movs	r3, #32
 800be8c:	18fb      	adds	r3, r7, r3
 800be8e:	881a      	ldrh	r2, [r3, #0]
 800be90:	230c      	movs	r3, #12
 800be92:	18fb      	adds	r3, r7, r3
 800be94:	8819      	ldrh	r1, [r3, #0]
 800be96:	240e      	movs	r4, #14
 800be98:	193b      	adds	r3, r7, r4
 800be9a:	881b      	ldrh	r3, [r3, #0]
 800be9c:	0018      	movs	r0, r3
 800be9e:	f7ff fda9 	bl	800b9f4 <Paint_SetPixel>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 800bea2:	0021      	movs	r1, r4
 800bea4:	187b      	adds	r3, r7, r1
 800bea6:	881a      	ldrh	r2, [r3, #0]
 800bea8:	187b      	adds	r3, r7, r1
 800beaa:	3201      	adds	r2, #1
 800beac:	801a      	strh	r2, [r3, #0]
 800beae:	230e      	movs	r3, #14
 800beb0:	18fa      	adds	r2, r7, r3
 800beb2:	1cbb      	adds	r3, r7, #2
 800beb4:	8812      	ldrh	r2, [r2, #0]
 800beb6:	881b      	ldrh	r3, [r3, #0]
 800beb8:	429a      	cmp	r2, r3
 800beba:	d3e6      	bcc.n	800be8a <Paint_ClearWindows+0x3e>
    for (Y = Ystart; Y < Yend; Y++) {
 800bebc:	210c      	movs	r1, #12
 800bebe:	187b      	adds	r3, r7, r1
 800bec0:	881a      	ldrh	r2, [r3, #0]
 800bec2:	187b      	adds	r3, r7, r1
 800bec4:	3201      	adds	r2, #1
 800bec6:	801a      	strh	r2, [r3, #0]
 800bec8:	230c      	movs	r3, #12
 800beca:	18fa      	adds	r2, r7, r3
 800becc:	003b      	movs	r3, r7
 800bece:	8812      	ldrh	r2, [r2, #0]
 800bed0:	881b      	ldrh	r3, [r3, #0]
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d3d3      	bcc.n	800be7e <Paint_ClearWindows+0x32>
        }
    }
}
 800bed6:	46c0      	nop			@ (mov r8, r8)
 800bed8:	46c0      	nop			@ (mov r8, r8)
 800beda:	46bd      	mov	sp, r7
 800bedc:	b004      	add	sp, #16
 800bede:	bdb0      	pop	{r4, r5, r7, pc}

0800bee0 <Paint_DrawPoint>:
    Dot_Pixel	: point size
    Dot_Style	: point Style
******************************************************************************/
void Paint_DrawPoint(UWORD Xpoint, UWORD Ypoint, UWORD Color,
                     DOT_PIXEL Dot_Pixel, DOT_STYLE Dot_Style)
{
 800bee0:	b5b0      	push	{r4, r5, r7, lr}
 800bee2:	b084      	sub	sp, #16
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	0005      	movs	r5, r0
 800bee8:	000c      	movs	r4, r1
 800beea:	0010      	movs	r0, r2
 800beec:	0019      	movs	r1, r3
 800beee:	1dbb      	adds	r3, r7, #6
 800bef0:	1c2a      	adds	r2, r5, #0
 800bef2:	801a      	strh	r2, [r3, #0]
 800bef4:	1d3b      	adds	r3, r7, #4
 800bef6:	1c22      	adds	r2, r4, #0
 800bef8:	801a      	strh	r2, [r3, #0]
 800befa:	1cbb      	adds	r3, r7, #2
 800befc:	1c02      	adds	r2, r0, #0
 800befe:	801a      	strh	r2, [r3, #0]
 800bf00:	1c7b      	adds	r3, r7, #1
 800bf02:	1c0a      	adds	r2, r1, #0
 800bf04:	701a      	strb	r2, [r3, #0]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800bf06:	4b65      	ldr	r3, [pc, #404]	@ (800c09c <Paint_DrawPoint+0x1bc>)
 800bf08:	889b      	ldrh	r3, [r3, #4]
 800bf0a:	1dba      	adds	r2, r7, #6
 800bf0c:	8812      	ldrh	r2, [r2, #0]
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d805      	bhi.n	800bf1e <Paint_DrawPoint+0x3e>
 800bf12:	4b62      	ldr	r3, [pc, #392]	@ (800c09c <Paint_DrawPoint+0x1bc>)
 800bf14:	88db      	ldrh	r3, [r3, #6]
 800bf16:	1d3a      	adds	r2, r7, #4
 800bf18:	8812      	ldrh	r2, [r2, #0]
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d912      	bls.n	800bf44 <Paint_DrawPoint+0x64>
        DE_BUG("Paint_DrawPoint Input exceeds the normal display range\r\n");
				printf("Xpoint = %d , Paint.Width = %d  \r\n ",Xpoint,Paint.Width);
 800bf1e:	1dbb      	adds	r3, r7, #6
 800bf20:	8819      	ldrh	r1, [r3, #0]
 800bf22:	4b5e      	ldr	r3, [pc, #376]	@ (800c09c <Paint_DrawPoint+0x1bc>)
 800bf24:	889b      	ldrh	r3, [r3, #4]
 800bf26:	001a      	movs	r2, r3
 800bf28:	4b5d      	ldr	r3, [pc, #372]	@ (800c0a0 <Paint_DrawPoint+0x1c0>)
 800bf2a:	0018      	movs	r0, r3
 800bf2c:	f7f9 fbce 	bl	80056cc <printf_>
				printf("Ypoint = %d , Paint.Height = %d  \r\n ",Ypoint,Paint.Height);
 800bf30:	1d3b      	adds	r3, r7, #4
 800bf32:	8819      	ldrh	r1, [r3, #0]
 800bf34:	4b59      	ldr	r3, [pc, #356]	@ (800c09c <Paint_DrawPoint+0x1bc>)
 800bf36:	88db      	ldrh	r3, [r3, #6]
 800bf38:	001a      	movs	r2, r3
 800bf3a:	4b5a      	ldr	r3, [pc, #360]	@ (800c0a4 <Paint_DrawPoint+0x1c4>)
 800bf3c:	0018      	movs	r0, r3
 800bf3e:	f7f9 fbc5 	bl	80056cc <printf_>
        return;
 800bf42:	e0a8      	b.n	800c096 <Paint_DrawPoint+0x1b6>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_Style == DOT_FILL_AROUND) {
 800bf44:	2320      	movs	r3, #32
 800bf46:	18fb      	adds	r3, r7, r3
 800bf48:	781b      	ldrb	r3, [r3, #0]
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	d161      	bne.n	800c012 <Paint_DrawPoint+0x132>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 800bf4e:	230e      	movs	r3, #14
 800bf50:	18fb      	adds	r3, r7, r3
 800bf52:	2200      	movs	r2, #0
 800bf54:	801a      	strh	r2, [r3, #0]
 800bf56:	e051      	b.n	800bffc <Paint_DrawPoint+0x11c>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 800bf58:	230c      	movs	r3, #12
 800bf5a:	18fb      	adds	r3, r7, r3
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	801a      	strh	r2, [r3, #0]
 800bf60:	e039      	b.n	800bfd6 <Paint_DrawPoint+0xf6>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 800bf62:	1dbb      	adds	r3, r7, #6
 800bf64:	881a      	ldrh	r2, [r3, #0]
 800bf66:	200e      	movs	r0, #14
 800bf68:	183b      	adds	r3, r7, r0
 800bf6a:	2100      	movs	r1, #0
 800bf6c:	5e5b      	ldrsh	r3, [r3, r1]
 800bf6e:	18d2      	adds	r2, r2, r3
 800bf70:	1c7b      	adds	r3, r7, #1
 800bf72:	781b      	ldrb	r3, [r3, #0]
 800bf74:	1ad3      	subs	r3, r2, r3
 800bf76:	d438      	bmi.n	800bfea <Paint_DrawPoint+0x10a>
 800bf78:	1d3b      	adds	r3, r7, #4
 800bf7a:	881a      	ldrh	r2, [r3, #0]
 800bf7c:	210c      	movs	r1, #12
 800bf7e:	187b      	adds	r3, r7, r1
 800bf80:	2400      	movs	r4, #0
 800bf82:	5f1b      	ldrsh	r3, [r3, r4]
 800bf84:	18d2      	adds	r2, r2, r3
 800bf86:	1c7b      	adds	r3, r7, #1
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	1ad3      	subs	r3, r2, r3
 800bf8c:	d42d      	bmi.n	800bfea <Paint_DrawPoint+0x10a>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 800bf8e:	183b      	adds	r3, r7, r0
 800bf90:	881a      	ldrh	r2, [r3, #0]
 800bf92:	1dbb      	adds	r3, r7, #6
 800bf94:	881b      	ldrh	r3, [r3, #0]
 800bf96:	18d3      	adds	r3, r2, r3
 800bf98:	b29a      	uxth	r2, r3
 800bf9a:	1c7b      	adds	r3, r7, #1
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	b29b      	uxth	r3, r3
 800bfa0:	1ad3      	subs	r3, r2, r3
 800bfa2:	b298      	uxth	r0, r3
 800bfa4:	000c      	movs	r4, r1
 800bfa6:	187b      	adds	r3, r7, r1
 800bfa8:	881a      	ldrh	r2, [r3, #0]
 800bfaa:	1d3b      	adds	r3, r7, #4
 800bfac:	881b      	ldrh	r3, [r3, #0]
 800bfae:	18d3      	adds	r3, r2, r3
 800bfb0:	b29a      	uxth	r2, r3
 800bfb2:	1c7b      	adds	r3, r7, #1
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	b29b      	uxth	r3, r3
 800bfb8:	1ad3      	subs	r3, r2, r3
 800bfba:	b299      	uxth	r1, r3
 800bfbc:	1cbb      	adds	r3, r7, #2
 800bfbe:	881b      	ldrh	r3, [r3, #0]
 800bfc0:	001a      	movs	r2, r3
 800bfc2:	f7ff fd17 	bl	800b9f4 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 800bfc6:	193b      	adds	r3, r7, r4
 800bfc8:	2200      	movs	r2, #0
 800bfca:	5e9b      	ldrsh	r3, [r3, r2]
 800bfcc:	b29b      	uxth	r3, r3
 800bfce:	3301      	adds	r3, #1
 800bfd0:	b29a      	uxth	r2, r3
 800bfd2:	193b      	adds	r3, r7, r4
 800bfd4:	801a      	strh	r2, [r3, #0]
 800bfd6:	230c      	movs	r3, #12
 800bfd8:	18fb      	adds	r3, r7, r3
 800bfda:	2200      	movs	r2, #0
 800bfdc:	5e9a      	ldrsh	r2, [r3, r2]
 800bfde:	1c7b      	adds	r3, r7, #1
 800bfe0:	781b      	ldrb	r3, [r3, #0]
 800bfe2:	005b      	lsls	r3, r3, #1
 800bfe4:	3b01      	subs	r3, #1
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	dbbb      	blt.n	800bf62 <Paint_DrawPoint+0x82>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 800bfea:	210e      	movs	r1, #14
 800bfec:	187b      	adds	r3, r7, r1
 800bfee:	2200      	movs	r2, #0
 800bff0:	5e9b      	ldrsh	r3, [r3, r2]
 800bff2:	b29b      	uxth	r3, r3
 800bff4:	3301      	adds	r3, #1
 800bff6:	b29a      	uxth	r2, r3
 800bff8:	187b      	adds	r3, r7, r1
 800bffa:	801a      	strh	r2, [r3, #0]
 800bffc:	230e      	movs	r3, #14
 800bffe:	18fb      	adds	r3, r7, r3
 800c000:	2200      	movs	r2, #0
 800c002:	5e9a      	ldrsh	r2, [r3, r2]
 800c004:	1c7b      	adds	r3, r7, #1
 800c006:	781b      	ldrb	r3, [r3, #0]
 800c008:	005b      	lsls	r3, r3, #1
 800c00a:	3b01      	subs	r3, #1
 800c00c:	429a      	cmp	r2, r3
 800c00e:	dba3      	blt.n	800bf58 <Paint_DrawPoint+0x78>
 800c010:	e041      	b.n	800c096 <Paint_DrawPoint+0x1b6>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 800c012:	230e      	movs	r3, #14
 800c014:	18fb      	adds	r3, r7, r3
 800c016:	2200      	movs	r2, #0
 800c018:	801a      	strh	r2, [r3, #0]
 800c01a:	e034      	b.n	800c086 <Paint_DrawPoint+0x1a6>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800c01c:	230c      	movs	r3, #12
 800c01e:	18fb      	adds	r3, r7, r3
 800c020:	2200      	movs	r2, #0
 800c022:	801a      	strh	r2, [r3, #0]
 800c024:	e01e      	b.n	800c064 <Paint_DrawPoint+0x184>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 800c026:	230e      	movs	r3, #14
 800c028:	18fb      	adds	r3, r7, r3
 800c02a:	881a      	ldrh	r2, [r3, #0]
 800c02c:	1dbb      	adds	r3, r7, #6
 800c02e:	881b      	ldrh	r3, [r3, #0]
 800c030:	18d3      	adds	r3, r2, r3
 800c032:	b29b      	uxth	r3, r3
 800c034:	3b01      	subs	r3, #1
 800c036:	b298      	uxth	r0, r3
 800c038:	240c      	movs	r4, #12
 800c03a:	193b      	adds	r3, r7, r4
 800c03c:	881a      	ldrh	r2, [r3, #0]
 800c03e:	1d3b      	adds	r3, r7, #4
 800c040:	881b      	ldrh	r3, [r3, #0]
 800c042:	18d3      	adds	r3, r2, r3
 800c044:	b29b      	uxth	r3, r3
 800c046:	3b01      	subs	r3, #1
 800c048:	b299      	uxth	r1, r3
 800c04a:	1cbb      	adds	r3, r7, #2
 800c04c:	881b      	ldrh	r3, [r3, #0]
 800c04e:	001a      	movs	r2, r3
 800c050:	f7ff fcd0 	bl	800b9f4 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800c054:	193b      	adds	r3, r7, r4
 800c056:	2200      	movs	r2, #0
 800c058:	5e9b      	ldrsh	r3, [r3, r2]
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	3301      	adds	r3, #1
 800c05e:	b29a      	uxth	r2, r3
 800c060:	193b      	adds	r3, r7, r4
 800c062:	801a      	strh	r2, [r3, #0]
 800c064:	230c      	movs	r3, #12
 800c066:	18fb      	adds	r3, r7, r3
 800c068:	2200      	movs	r2, #0
 800c06a:	5e9a      	ldrsh	r2, [r3, r2]
 800c06c:	1c7b      	adds	r3, r7, #1
 800c06e:	781b      	ldrb	r3, [r3, #0]
 800c070:	429a      	cmp	r2, r3
 800c072:	dbd8      	blt.n	800c026 <Paint_DrawPoint+0x146>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 800c074:	210e      	movs	r1, #14
 800c076:	187b      	adds	r3, r7, r1
 800c078:	2200      	movs	r2, #0
 800c07a:	5e9b      	ldrsh	r3, [r3, r2]
 800c07c:	b29b      	uxth	r3, r3
 800c07e:	3301      	adds	r3, #1
 800c080:	b29a      	uxth	r2, r3
 800c082:	187b      	adds	r3, r7, r1
 800c084:	801a      	strh	r2, [r3, #0]
 800c086:	230e      	movs	r3, #14
 800c088:	18fb      	adds	r3, r7, r3
 800c08a:	2200      	movs	r2, #0
 800c08c:	5e9a      	ldrsh	r2, [r3, r2]
 800c08e:	1c7b      	adds	r3, r7, #1
 800c090:	781b      	ldrb	r3, [r3, #0]
 800c092:	429a      	cmp	r2, r3
 800c094:	dbc2      	blt.n	800c01c <Paint_DrawPoint+0x13c>
            }
        }
    }
}
 800c096:	46bd      	mov	sp, r7
 800c098:	b004      	add	sp, #16
 800c09a:	bdb0      	pop	{r4, r5, r7, pc}
 800c09c:	200005a8 	.word	0x200005a8
 800c0a0:	0800f970 	.word	0x0800f970
 800c0a4:	0800f994 	.word	0x0800f994

0800c0a8 <Paint_DrawLine>:
    Line_width : Line width
    Line_Style: Solid and dotted lines
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 800c0a8:	b5b0      	push	{r4, r5, r7, lr}
 800c0aa:	b08c      	sub	sp, #48	@ 0x30
 800c0ac:	af02      	add	r7, sp, #8
 800c0ae:	0005      	movs	r5, r0
 800c0b0:	000c      	movs	r4, r1
 800c0b2:	0010      	movs	r0, r2
 800c0b4:	0019      	movs	r1, r3
 800c0b6:	1dbb      	adds	r3, r7, #6
 800c0b8:	1c2a      	adds	r2, r5, #0
 800c0ba:	801a      	strh	r2, [r3, #0]
 800c0bc:	1d3b      	adds	r3, r7, #4
 800c0be:	1c22      	adds	r2, r4, #0
 800c0c0:	801a      	strh	r2, [r3, #0]
 800c0c2:	1cbb      	adds	r3, r7, #2
 800c0c4:	1c02      	adds	r2, r0, #0
 800c0c6:	801a      	strh	r2, [r3, #0]
 800c0c8:	003b      	movs	r3, r7
 800c0ca:	1c0a      	adds	r2, r1, #0
 800c0cc:	801a      	strh	r2, [r3, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800c0ce:	4b63      	ldr	r3, [pc, #396]	@ (800c25c <Paint_DrawLine+0x1b4>)
 800c0d0:	889b      	ldrh	r3, [r3, #4]
 800c0d2:	1dba      	adds	r2, r7, #6
 800c0d4:	8812      	ldrh	r2, [r2, #0]
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d900      	bls.n	800c0dc <Paint_DrawLine+0x34>
 800c0da:	e0b7      	b.n	800c24c <Paint_DrawLine+0x1a4>
 800c0dc:	4b5f      	ldr	r3, [pc, #380]	@ (800c25c <Paint_DrawLine+0x1b4>)
 800c0de:	88db      	ldrh	r3, [r3, #6]
 800c0e0:	1d3a      	adds	r2, r7, #4
 800c0e2:	8812      	ldrh	r2, [r2, #0]
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d900      	bls.n	800c0ea <Paint_DrawLine+0x42>
 800c0e8:	e0b0      	b.n	800c24c <Paint_DrawLine+0x1a4>
        Xend > Paint.Width || Yend > Paint.Height) {
 800c0ea:	4b5c      	ldr	r3, [pc, #368]	@ (800c25c <Paint_DrawLine+0x1b4>)
 800c0ec:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800c0ee:	1cba      	adds	r2, r7, #2
 800c0f0:	8812      	ldrh	r2, [r2, #0]
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d900      	bls.n	800c0f8 <Paint_DrawLine+0x50>
 800c0f6:	e0a9      	b.n	800c24c <Paint_DrawLine+0x1a4>
        Xend > Paint.Width || Yend > Paint.Height) {
 800c0f8:	4b58      	ldr	r3, [pc, #352]	@ (800c25c <Paint_DrawLine+0x1b4>)
 800c0fa:	88db      	ldrh	r3, [r3, #6]
 800c0fc:	003a      	movs	r2, r7
 800c0fe:	8812      	ldrh	r2, [r2, #0]
 800c100:	429a      	cmp	r2, r3
 800c102:	d900      	bls.n	800c106 <Paint_DrawLine+0x5e>
 800c104:	e0a2      	b.n	800c24c <Paint_DrawLine+0x1a4>
        DE_BUG("Paint_DrawLine Input exceeds the normal display range\r\n");
        return;
    }

    UWORD Xpoint = Xstart;
 800c106:	2326      	movs	r3, #38	@ 0x26
 800c108:	18fb      	adds	r3, r7, r3
 800c10a:	1dba      	adds	r2, r7, #6
 800c10c:	8812      	ldrh	r2, [r2, #0]
 800c10e:	801a      	strh	r2, [r3, #0]
    UWORD Ypoint = Ystart;
 800c110:	2324      	movs	r3, #36	@ 0x24
 800c112:	18fb      	adds	r3, r7, r3
 800c114:	1d3a      	adds	r2, r7, #4
 800c116:	8812      	ldrh	r2, [r2, #0]
 800c118:	801a      	strh	r2, [r3, #0]
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 800c11a:	1cbb      	adds	r3, r7, #2
 800c11c:	881a      	ldrh	r2, [r3, #0]
 800c11e:	1dbb      	adds	r3, r7, #6
 800c120:	881b      	ldrh	r3, [r3, #0]
 800c122:	1ad3      	subs	r3, r2, r3
 800c124:	17da      	asrs	r2, r3, #31
 800c126:	189b      	adds	r3, r3, r2
 800c128:	4053      	eors	r3, r2
 800c12a:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 800c12c:	003b      	movs	r3, r7
 800c12e:	881a      	ldrh	r2, [r3, #0]
 800c130:	1d3b      	adds	r3, r7, #4
 800c132:	881b      	ldrh	r3, [r3, #0]
 800c134:	1ad3      	subs	r3, r2, r3
 800c136:	17da      	asrs	r2, r3, #31
 800c138:	189b      	adds	r3, r3, r2
 800c13a:	4053      	eors	r3, r2
 800c13c:	425b      	negs	r3, r3
 800c13e:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 800c140:	1dba      	adds	r2, r7, #6
 800c142:	1cbb      	adds	r3, r7, #2
 800c144:	8812      	ldrh	r2, [r2, #0]
 800c146:	881b      	ldrh	r3, [r3, #0]
 800c148:	429a      	cmp	r2, r3
 800c14a:	d201      	bcs.n	800c150 <Paint_DrawLine+0xa8>
 800c14c:	2301      	movs	r3, #1
 800c14e:	e001      	b.n	800c154 <Paint_DrawLine+0xac>
 800c150:	2301      	movs	r3, #1
 800c152:	425b      	negs	r3, r3
 800c154:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 800c156:	1d3a      	adds	r2, r7, #4
 800c158:	003b      	movs	r3, r7
 800c15a:	8812      	ldrh	r2, [r2, #0]
 800c15c:	881b      	ldrh	r3, [r3, #0]
 800c15e:	429a      	cmp	r2, r3
 800c160:	d201      	bcs.n	800c166 <Paint_DrawLine+0xbe>
 800c162:	2301      	movs	r3, #1
 800c164:	e001      	b.n	800c16a <Paint_DrawLine+0xc2>
 800c166:	2301      	movs	r3, #1
 800c168:	425b      	negs	r3, r3
 800c16a:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 800c16c:	69ba      	ldr	r2, [r7, #24]
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	18d3      	adds	r3, r2, r3
 800c172:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 800c174:	231f      	movs	r3, #31
 800c176:	18fb      	adds	r3, r7, r3
 800c178:	2200      	movs	r2, #0
 800c17a:	701a      	strb	r2, [r3, #0]

    for (;;) {
        Dotted_Len++;
 800c17c:	241f      	movs	r4, #31
 800c17e:	193b      	adds	r3, r7, r4
 800c180:	781a      	ldrb	r2, [r3, #0]
 800c182:	193b      	adds	r3, r7, r4
 800c184:	3201      	adds	r2, #1
 800c186:	701a      	strb	r2, [r3, #0]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 800c188:	2340      	movs	r3, #64	@ 0x40
 800c18a:	18fb      	adds	r3, r7, r3
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	2b01      	cmp	r3, #1
 800c190:	d11c      	bne.n	800c1cc <Paint_DrawLine+0x124>
 800c192:	193b      	adds	r3, r7, r4
 800c194:	781b      	ldrb	r3, [r3, #0]
 800c196:	2103      	movs	r1, #3
 800c198:	0018      	movs	r0, r3
 800c19a:	f7f4 f857 	bl	800024c <__aeabi_uidivmod>
 800c19e:	000b      	movs	r3, r1
 800c1a0:	b2db      	uxtb	r3, r3
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d112      	bne.n	800c1cc <Paint_DrawLine+0x124>
            //DE_BUG("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 800c1a6:	233c      	movs	r3, #60	@ 0x3c
 800c1a8:	18fb      	adds	r3, r7, r3
 800c1aa:	781a      	ldrb	r2, [r3, #0]
 800c1ac:	2324      	movs	r3, #36	@ 0x24
 800c1ae:	18fb      	adds	r3, r7, r3
 800c1b0:	8819      	ldrh	r1, [r3, #0]
 800c1b2:	2326      	movs	r3, #38	@ 0x26
 800c1b4:	18fb      	adds	r3, r7, r3
 800c1b6:	8818      	ldrh	r0, [r3, #0]
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	9300      	str	r3, [sp, #0]
 800c1bc:	0013      	movs	r3, r2
 800c1be:	22ff      	movs	r2, #255	@ 0xff
 800c1c0:	f7ff fe8e 	bl	800bee0 <Paint_DrawPoint>
            Dotted_Len = 0;
 800c1c4:	193b      	adds	r3, r7, r4
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	701a      	strb	r2, [r3, #0]
 800c1ca:	e010      	b.n	800c1ee <Paint_DrawLine+0x146>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 800c1cc:	233c      	movs	r3, #60	@ 0x3c
 800c1ce:	18fb      	adds	r3, r7, r3
 800c1d0:	781c      	ldrb	r4, [r3, #0]
 800c1d2:	2338      	movs	r3, #56	@ 0x38
 800c1d4:	18fb      	adds	r3, r7, r3
 800c1d6:	881a      	ldrh	r2, [r3, #0]
 800c1d8:	2324      	movs	r3, #36	@ 0x24
 800c1da:	18fb      	adds	r3, r7, r3
 800c1dc:	8819      	ldrh	r1, [r3, #0]
 800c1de:	2326      	movs	r3, #38	@ 0x26
 800c1e0:	18fb      	adds	r3, r7, r3
 800c1e2:	8818      	ldrh	r0, [r3, #0]
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	9300      	str	r3, [sp, #0]
 800c1e8:	0023      	movs	r3, r4
 800c1ea:	f7ff fe79 	bl	800bee0 <Paint_DrawPoint>
        }
        if (2 * Esp >= dy) {
 800c1ee:	6a3b      	ldr	r3, [r7, #32]
 800c1f0:	005b      	lsls	r3, r3, #1
 800c1f2:	697a      	ldr	r2, [r7, #20]
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	dc11      	bgt.n	800c21c <Paint_DrawLine+0x174>
            if (Xpoint == Xend)
 800c1f8:	2026      	movs	r0, #38	@ 0x26
 800c1fa:	183a      	adds	r2, r7, r0
 800c1fc:	1cbb      	adds	r3, r7, #2
 800c1fe:	8812      	ldrh	r2, [r2, #0]
 800c200:	881b      	ldrh	r3, [r3, #0]
 800c202:	429a      	cmp	r2, r3
 800c204:	d024      	beq.n	800c250 <Paint_DrawLine+0x1a8>
                break;
            Esp += dy;
 800c206:	6a3a      	ldr	r2, [r7, #32]
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	18d3      	adds	r3, r2, r3
 800c20c:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	b299      	uxth	r1, r3
 800c212:	183b      	adds	r3, r7, r0
 800c214:	183a      	adds	r2, r7, r0
 800c216:	8812      	ldrh	r2, [r2, #0]
 800c218:	188a      	adds	r2, r1, r2
 800c21a:	801a      	strh	r2, [r3, #0]
        }
        if (2 * Esp <= dx) {
 800c21c:	6a3b      	ldr	r3, [r7, #32]
 800c21e:	005b      	lsls	r3, r3, #1
 800c220:	69ba      	ldr	r2, [r7, #24]
 800c222:	429a      	cmp	r2, r3
 800c224:	dbaa      	blt.n	800c17c <Paint_DrawLine+0xd4>
            if (Ypoint == Yend)
 800c226:	2024      	movs	r0, #36	@ 0x24
 800c228:	183a      	adds	r2, r7, r0
 800c22a:	003b      	movs	r3, r7
 800c22c:	8812      	ldrh	r2, [r2, #0]
 800c22e:	881b      	ldrh	r3, [r3, #0]
 800c230:	429a      	cmp	r2, r3
 800c232:	d00f      	beq.n	800c254 <Paint_DrawLine+0x1ac>
                break;
            Esp += dx;
 800c234:	6a3a      	ldr	r2, [r7, #32]
 800c236:	69bb      	ldr	r3, [r7, #24]
 800c238:	18d3      	adds	r3, r2, r3
 800c23a:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	b299      	uxth	r1, r3
 800c240:	183b      	adds	r3, r7, r0
 800c242:	183a      	adds	r2, r7, r0
 800c244:	8812      	ldrh	r2, [r2, #0]
 800c246:	188a      	adds	r2, r1, r2
 800c248:	801a      	strh	r2, [r3, #0]
        Dotted_Len++;
 800c24a:	e797      	b.n	800c17c <Paint_DrawLine+0xd4>
        return;
 800c24c:	46c0      	nop			@ (mov r8, r8)
 800c24e:	e002      	b.n	800c256 <Paint_DrawLine+0x1ae>
                break;
 800c250:	46c0      	nop			@ (mov r8, r8)
 800c252:	e000      	b.n	800c256 <Paint_DrawLine+0x1ae>
                break;
 800c254:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 800c256:	46bd      	mov	sp, r7
 800c258:	b00a      	add	sp, #40	@ 0x28
 800c25a:	bdb0      	pop	{r4, r5, r7, pc}
 800c25c:	200005a8 	.word	0x200005a8

0800c260 <Paint_DrawRectangle>:
    Line_width: Line width
    Draw_Fill : Whether to fill the inside of the rectangle
******************************************************************************/
void Paint_DrawRectangle(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                         UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill)
{
 800c260:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c262:	b089      	sub	sp, #36	@ 0x24
 800c264:	af04      	add	r7, sp, #16
 800c266:	0005      	movs	r5, r0
 800c268:	000c      	movs	r4, r1
 800c26a:	0010      	movs	r0, r2
 800c26c:	0019      	movs	r1, r3
 800c26e:	1dbb      	adds	r3, r7, #6
 800c270:	1c2a      	adds	r2, r5, #0
 800c272:	801a      	strh	r2, [r3, #0]
 800c274:	1d3b      	adds	r3, r7, #4
 800c276:	1c22      	adds	r2, r4, #0
 800c278:	801a      	strh	r2, [r3, #0]
 800c27a:	1cbb      	adds	r3, r7, #2
 800c27c:	1c02      	adds	r2, r0, #0
 800c27e:	801a      	strh	r2, [r3, #0]
 800c280:	003b      	movs	r3, r7
 800c282:	1c0a      	adds	r2, r1, #0
 800c284:	801a      	strh	r2, [r3, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800c286:	4b59      	ldr	r3, [pc, #356]	@ (800c3ec <Paint_DrawRectangle+0x18c>)
 800c288:	889b      	ldrh	r3, [r3, #4]
 800c28a:	1dba      	adds	r2, r7, #6
 800c28c:	8812      	ldrh	r2, [r2, #0]
 800c28e:	429a      	cmp	r2, r3
 800c290:	d900      	bls.n	800c294 <Paint_DrawRectangle+0x34>
 800c292:	e0a6      	b.n	800c3e2 <Paint_DrawRectangle+0x182>
 800c294:	4b55      	ldr	r3, [pc, #340]	@ (800c3ec <Paint_DrawRectangle+0x18c>)
 800c296:	88db      	ldrh	r3, [r3, #6]
 800c298:	1d3a      	adds	r2, r7, #4
 800c29a:	8812      	ldrh	r2, [r2, #0]
 800c29c:	429a      	cmp	r2, r3
 800c29e:	d900      	bls.n	800c2a2 <Paint_DrawRectangle+0x42>
 800c2a0:	e09f      	b.n	800c3e2 <Paint_DrawRectangle+0x182>
        Xend > Paint.Width || Yend > Paint.Height) {
 800c2a2:	4b52      	ldr	r3, [pc, #328]	@ (800c3ec <Paint_DrawRectangle+0x18c>)
 800c2a4:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800c2a6:	1cba      	adds	r2, r7, #2
 800c2a8:	8812      	ldrh	r2, [r2, #0]
 800c2aa:	429a      	cmp	r2, r3
 800c2ac:	d900      	bls.n	800c2b0 <Paint_DrawRectangle+0x50>
 800c2ae:	e098      	b.n	800c3e2 <Paint_DrawRectangle+0x182>
        Xend > Paint.Width || Yend > Paint.Height) {
 800c2b0:	4b4e      	ldr	r3, [pc, #312]	@ (800c3ec <Paint_DrawRectangle+0x18c>)
 800c2b2:	88db      	ldrh	r3, [r3, #6]
 800c2b4:	003a      	movs	r2, r7
 800c2b6:	8812      	ldrh	r2, [r2, #0]
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d900      	bls.n	800c2be <Paint_DrawRectangle+0x5e>
 800c2bc:	e091      	b.n	800c3e2 <Paint_DrawRectangle+0x182>
        DE_BUG("Input exceeds the normal display range\r\n");
        return;
    }

    if (Draw_Fill) {
 800c2be:	2328      	movs	r3, #40	@ 0x28
 800c2c0:	2208      	movs	r2, #8
 800c2c2:	189b      	adds	r3, r3, r2
 800c2c4:	19db      	adds	r3, r3, r7
 800c2c6:	781b      	ldrb	r3, [r3, #0]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d02b      	beq.n	800c324 <Paint_DrawRectangle+0xc4>
        UWORD Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 800c2cc:	230e      	movs	r3, #14
 800c2ce:	18fb      	adds	r3, r7, r3
 800c2d0:	1d3a      	adds	r2, r7, #4
 800c2d2:	8812      	ldrh	r2, [r2, #0]
 800c2d4:	801a      	strh	r2, [r3, #0]
 800c2d6:	e01d      	b.n	800c314 <Paint_DrawRectangle+0xb4>
            Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color , Line_width, LINE_STYLE_SOLID);
 800c2d8:	250e      	movs	r5, #14
 800c2da:	197b      	adds	r3, r7, r5
 800c2dc:	881c      	ldrh	r4, [r3, #0]
 800c2de:	1cbb      	adds	r3, r7, #2
 800c2e0:	881a      	ldrh	r2, [r3, #0]
 800c2e2:	197b      	adds	r3, r7, r5
 800c2e4:	8819      	ldrh	r1, [r3, #0]
 800c2e6:	1dbb      	adds	r3, r7, #6
 800c2e8:	8818      	ldrh	r0, [r3, #0]
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	9302      	str	r3, [sp, #8]
 800c2ee:	2324      	movs	r3, #36	@ 0x24
 800c2f0:	2608      	movs	r6, #8
 800c2f2:	199b      	adds	r3, r3, r6
 800c2f4:	19db      	adds	r3, r3, r7
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	9301      	str	r3, [sp, #4]
 800c2fa:	2320      	movs	r3, #32
 800c2fc:	199b      	adds	r3, r3, r6
 800c2fe:	19db      	adds	r3, r3, r7
 800c300:	881b      	ldrh	r3, [r3, #0]
 800c302:	9300      	str	r3, [sp, #0]
 800c304:	0023      	movs	r3, r4
 800c306:	f7ff fecf 	bl	800c0a8 <Paint_DrawLine>
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 800c30a:	197b      	adds	r3, r7, r5
 800c30c:	881a      	ldrh	r2, [r3, #0]
 800c30e:	197b      	adds	r3, r7, r5
 800c310:	3201      	adds	r2, #1
 800c312:	801a      	strh	r2, [r3, #0]
 800c314:	230e      	movs	r3, #14
 800c316:	18fa      	adds	r2, r7, r3
 800c318:	003b      	movs	r3, r7
 800c31a:	8812      	ldrh	r2, [r2, #0]
 800c31c:	881b      	ldrh	r3, [r3, #0]
 800c31e:	429a      	cmp	r2, r3
 800c320:	d3da      	bcc.n	800c2d8 <Paint_DrawRectangle+0x78>
 800c322:	e05f      	b.n	800c3e4 <Paint_DrawRectangle+0x184>
        }
    } else {
        Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 800c324:	1d3b      	adds	r3, r7, #4
 800c326:	881c      	ldrh	r4, [r3, #0]
 800c328:	1cbb      	adds	r3, r7, #2
 800c32a:	881a      	ldrh	r2, [r3, #0]
 800c32c:	1d3b      	adds	r3, r7, #4
 800c32e:	8819      	ldrh	r1, [r3, #0]
 800c330:	1dbb      	adds	r3, r7, #6
 800c332:	8818      	ldrh	r0, [r3, #0]
 800c334:	2300      	movs	r3, #0
 800c336:	9302      	str	r3, [sp, #8]
 800c338:	2524      	movs	r5, #36	@ 0x24
 800c33a:	2308      	movs	r3, #8
 800c33c:	18ee      	adds	r6, r5, r3
 800c33e:	19f3      	adds	r3, r6, r7
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	9301      	str	r3, [sp, #4]
 800c344:	2620      	movs	r6, #32
 800c346:	2308      	movs	r3, #8
 800c348:	18f3      	adds	r3, r6, r3
 800c34a:	19db      	adds	r3, r3, r7
 800c34c:	881b      	ldrh	r3, [r3, #0]
 800c34e:	9300      	str	r3, [sp, #0]
 800c350:	0023      	movs	r3, r4
 800c352:	f7ff fea9 	bl	800c0a8 <Paint_DrawLine>
        Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 800c356:	003b      	movs	r3, r7
 800c358:	881c      	ldrh	r4, [r3, #0]
 800c35a:	1dbb      	adds	r3, r7, #6
 800c35c:	881a      	ldrh	r2, [r3, #0]
 800c35e:	1d3b      	adds	r3, r7, #4
 800c360:	8819      	ldrh	r1, [r3, #0]
 800c362:	1dbb      	adds	r3, r7, #6
 800c364:	8818      	ldrh	r0, [r3, #0]
 800c366:	2300      	movs	r3, #0
 800c368:	9302      	str	r3, [sp, #8]
 800c36a:	2308      	movs	r3, #8
 800c36c:	18eb      	adds	r3, r5, r3
 800c36e:	19db      	adds	r3, r3, r7
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	9301      	str	r3, [sp, #4]
 800c374:	2308      	movs	r3, #8
 800c376:	18f3      	adds	r3, r6, r3
 800c378:	19db      	adds	r3, r3, r7
 800c37a:	881b      	ldrh	r3, [r3, #0]
 800c37c:	9300      	str	r3, [sp, #0]
 800c37e:	0023      	movs	r3, r4
 800c380:	f7ff fe92 	bl	800c0a8 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 800c384:	1d3b      	adds	r3, r7, #4
 800c386:	881c      	ldrh	r4, [r3, #0]
 800c388:	1cbb      	adds	r3, r7, #2
 800c38a:	881a      	ldrh	r2, [r3, #0]
 800c38c:	003b      	movs	r3, r7
 800c38e:	8819      	ldrh	r1, [r3, #0]
 800c390:	1cbb      	adds	r3, r7, #2
 800c392:	8818      	ldrh	r0, [r3, #0]
 800c394:	2300      	movs	r3, #0
 800c396:	9302      	str	r3, [sp, #8]
 800c398:	2308      	movs	r3, #8
 800c39a:	18eb      	adds	r3, r5, r3
 800c39c:	19db      	adds	r3, r3, r7
 800c39e:	781b      	ldrb	r3, [r3, #0]
 800c3a0:	9301      	str	r3, [sp, #4]
 800c3a2:	2308      	movs	r3, #8
 800c3a4:	18f3      	adds	r3, r6, r3
 800c3a6:	19db      	adds	r3, r3, r7
 800c3a8:	881b      	ldrh	r3, [r3, #0]
 800c3aa:	9300      	str	r3, [sp, #0]
 800c3ac:	0023      	movs	r3, r4
 800c3ae:	f7ff fe7b 	bl	800c0a8 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 800c3b2:	003b      	movs	r3, r7
 800c3b4:	881c      	ldrh	r4, [r3, #0]
 800c3b6:	1dbb      	adds	r3, r7, #6
 800c3b8:	881a      	ldrh	r2, [r3, #0]
 800c3ba:	003b      	movs	r3, r7
 800c3bc:	8819      	ldrh	r1, [r3, #0]
 800c3be:	1cbb      	adds	r3, r7, #2
 800c3c0:	8818      	ldrh	r0, [r3, #0]
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	9302      	str	r3, [sp, #8]
 800c3c6:	2308      	movs	r3, #8
 800c3c8:	18ed      	adds	r5, r5, r3
 800c3ca:	19eb      	adds	r3, r5, r7
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	9301      	str	r3, [sp, #4]
 800c3d0:	2308      	movs	r3, #8
 800c3d2:	18f3      	adds	r3, r6, r3
 800c3d4:	19db      	adds	r3, r3, r7
 800c3d6:	881b      	ldrh	r3, [r3, #0]
 800c3d8:	9300      	str	r3, [sp, #0]
 800c3da:	0023      	movs	r3, r4
 800c3dc:	f7ff fe64 	bl	800c0a8 <Paint_DrawLine>
 800c3e0:	e000      	b.n	800c3e4 <Paint_DrawRectangle+0x184>
        return;
 800c3e2:	46c0      	nop			@ (mov r8, r8)
    }
}
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	b005      	add	sp, #20
 800c3e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3ea:	46c0      	nop			@ (mov r8, r8)
 800c3ec:	200005a8 	.word	0x200005a8

0800c3f0 <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    tFont* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800c3f0:	b5b0      	push	{r4, r5, r7, lr}
 800c3f2:	b088      	sub	sp, #32
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	0004      	movs	r4, r0
 800c3f8:	0008      	movs	r0, r1
 800c3fa:	0011      	movs	r1, r2
 800c3fc:	607b      	str	r3, [r7, #4]
 800c3fe:	250e      	movs	r5, #14
 800c400:	197b      	adds	r3, r7, r5
 800c402:	1c22      	adds	r2, r4, #0
 800c404:	801a      	strh	r2, [r3, #0]
 800c406:	240c      	movs	r4, #12
 800c408:	193b      	adds	r3, r7, r4
 800c40a:	1c02      	adds	r2, r0, #0
 800c40c:	801a      	strh	r2, [r3, #0]
 800c40e:	200b      	movs	r0, #11
 800c410:	183b      	adds	r3, r7, r0
 800c412:	1c0a      	adds	r2, r1, #0
 800c414:	701a      	strb	r2, [r3, #0]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800c416:	4b67      	ldr	r3, [pc, #412]	@ (800c5b4 <Paint_DrawChar+0x1c4>)
 800c418:	889b      	ldrh	r3, [r3, #4]
 800c41a:	197a      	adds	r2, r7, r5
 800c41c:	8812      	ldrh	r2, [r2, #0]
 800c41e:	429a      	cmp	r2, r3
 800c420:	d900      	bls.n	800c424 <Paint_DrawChar+0x34>
 800c422:	e0c2      	b.n	800c5aa <Paint_DrawChar+0x1ba>
 800c424:	4b63      	ldr	r3, [pc, #396]	@ (800c5b4 <Paint_DrawChar+0x1c4>)
 800c426:	88db      	ldrh	r3, [r3, #6]
 800c428:	193a      	adds	r2, r7, r4
 800c42a:	8812      	ldrh	r2, [r2, #0]
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d900      	bls.n	800c432 <Paint_DrawChar+0x42>
 800c430:	e0bb      	b.n	800c5aa <Paint_DrawChar+0x1ba>
        DE_BUG("Paint_DrawChar Input exceeds the normal display range\r\n");
        return;
    }
		uint32_t font_Width = (*Font).chars[Acsii_Char - ' '].image->width;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	685a      	ldr	r2, [r3, #4]
 800c436:	183b      	adds	r3, r7, r0
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	495f      	ldr	r1, [pc, #380]	@ (800c5b8 <Paint_DrawChar+0x1c8>)
 800c43c:	468c      	mov	ip, r1
 800c43e:	4463      	add	r3, ip
 800c440:	00db      	lsls	r3, r3, #3
 800c442:	18d3      	adds	r3, r2, r3
 800c444:	685b      	ldr	r3, [r3, #4]
 800c446:	889b      	ldrh	r3, [r3, #4]
 800c448:	617b      	str	r3, [r7, #20]
		uint32_t font_Height = (*Font).chars[Acsii_Char - ' ' ].image->height;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	685a      	ldr	r2, [r3, #4]
 800c44e:	183b      	adds	r3, r7, r0
 800c450:	781b      	ldrb	r3, [r3, #0]
 800c452:	4959      	ldr	r1, [pc, #356]	@ (800c5b8 <Paint_DrawChar+0x1c8>)
 800c454:	468c      	mov	ip, r1
 800c456:	4463      	add	r3, ip
 800c458:	00db      	lsls	r3, r3, #3
 800c45a:	18d3      	adds	r3, r2, r3
 800c45c:	685b      	ldr	r3, [r3, #4]
 800c45e:	88db      	ldrh	r3, [r3, #6]
 800c460:	613b      	str	r3, [r7, #16]
		
 //   uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
    const unsigned char *ptr = (*Font).chars[Acsii_Char - ' '].image->data;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	685a      	ldr	r2, [r3, #4]
 800c466:	183b      	adds	r3, r7, r0
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	4953      	ldr	r1, [pc, #332]	@ (800c5b8 <Paint_DrawChar+0x1c8>)
 800c46c:	468c      	mov	ip, r1
 800c46e:	4463      	add	r3, ip
 800c470:	00db      	lsls	r3, r3, #3
 800c472:	18d3      	adds	r3, r2, r3
 800c474:	685b      	ldr	r3, [r3, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < font_Height; Page ++ ) {
 800c47a:	231e      	movs	r3, #30
 800c47c:	18fb      	adds	r3, r7, r3
 800c47e:	2200      	movs	r2, #0
 800c480:	801a      	strh	r2, [r3, #0]
 800c482:	e08a      	b.n	800c59a <Paint_DrawChar+0x1aa>
        for (Column = 0; Column < font_Width; Column ++ ) {
 800c484:	231c      	movs	r3, #28
 800c486:	18fb      	adds	r3, r7, r3
 800c488:	2200      	movs	r2, #0
 800c48a:	801a      	strh	r2, [r3, #0]
 800c48c:	e071      	b.n	800c572 <Paint_DrawChar+0x182>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 800c48e:	2334      	movs	r3, #52	@ 0x34
 800c490:	18fb      	adds	r3, r7, r3
 800c492:	881b      	ldrh	r3, [r3, #0]
 800c494:	2bff      	cmp	r3, #255	@ 0xff
 800c496:	d122      	bne.n	800c4de <Paint_DrawChar+0xee>
                if (*ptr & (0x80 >> (Column % 8)))
 800c498:	69bb      	ldr	r3, [r7, #24]
 800c49a:	781b      	ldrb	r3, [r3, #0]
 800c49c:	0019      	movs	r1, r3
 800c49e:	201c      	movs	r0, #28
 800c4a0:	183b      	adds	r3, r7, r0
 800c4a2:	881b      	ldrh	r3, [r3, #0]
 800c4a4:	2207      	movs	r2, #7
 800c4a6:	4013      	ands	r3, r2
 800c4a8:	2280      	movs	r2, #128	@ 0x80
 800c4aa:	411a      	asrs	r2, r3
 800c4ac:	0013      	movs	r3, r2
 800c4ae:	400b      	ands	r3, r1
 800c4b0:	d04e      	beq.n	800c550 <Paint_DrawChar+0x160>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800c4b2:	230e      	movs	r3, #14
 800c4b4:	18fa      	adds	r2, r7, r3
 800c4b6:	183b      	adds	r3, r7, r0
 800c4b8:	8812      	ldrh	r2, [r2, #0]
 800c4ba:	881b      	ldrh	r3, [r3, #0]
 800c4bc:	18d3      	adds	r3, r2, r3
 800c4be:	b298      	uxth	r0, r3
 800c4c0:	230c      	movs	r3, #12
 800c4c2:	18fa      	adds	r2, r7, r3
 800c4c4:	231e      	movs	r3, #30
 800c4c6:	18fb      	adds	r3, r7, r3
 800c4c8:	8812      	ldrh	r2, [r2, #0]
 800c4ca:	881b      	ldrh	r3, [r3, #0]
 800c4cc:	18d3      	adds	r3, r2, r3
 800c4ce:	b299      	uxth	r1, r3
 800c4d0:	2330      	movs	r3, #48	@ 0x30
 800c4d2:	18fb      	adds	r3, r7, r3
 800c4d4:	881b      	ldrh	r3, [r3, #0]
 800c4d6:	001a      	movs	r2, r3
 800c4d8:	f7ff fa8c 	bl	800b9f4 <Paint_SetPixel>
 800c4dc:	e038      	b.n	800c550 <Paint_DrawChar+0x160>

            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 800c4de:	69bb      	ldr	r3, [r7, #24]
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	0019      	movs	r1, r3
 800c4e4:	201c      	movs	r0, #28
 800c4e6:	183b      	adds	r3, r7, r0
 800c4e8:	881b      	ldrh	r3, [r3, #0]
 800c4ea:	2207      	movs	r2, #7
 800c4ec:	4013      	ands	r3, r2
 800c4ee:	2280      	movs	r2, #128	@ 0x80
 800c4f0:	411a      	asrs	r2, r3
 800c4f2:	0013      	movs	r3, r2
 800c4f4:	400b      	ands	r3, r1
 800c4f6:	d015      	beq.n	800c524 <Paint_DrawChar+0x134>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800c4f8:	230e      	movs	r3, #14
 800c4fa:	18fa      	adds	r2, r7, r3
 800c4fc:	183b      	adds	r3, r7, r0
 800c4fe:	8812      	ldrh	r2, [r2, #0]
 800c500:	881b      	ldrh	r3, [r3, #0]
 800c502:	18d3      	adds	r3, r2, r3
 800c504:	b298      	uxth	r0, r3
 800c506:	230c      	movs	r3, #12
 800c508:	18fa      	adds	r2, r7, r3
 800c50a:	231e      	movs	r3, #30
 800c50c:	18fb      	adds	r3, r7, r3
 800c50e:	8812      	ldrh	r2, [r2, #0]
 800c510:	881b      	ldrh	r3, [r3, #0]
 800c512:	18d3      	adds	r3, r2, r3
 800c514:	b299      	uxth	r1, r3
 800c516:	2330      	movs	r3, #48	@ 0x30
 800c518:	18fb      	adds	r3, r7, r3
 800c51a:	881b      	ldrh	r3, [r3, #0]
 800c51c:	001a      	movs	r2, r3
 800c51e:	f7ff fa69 	bl	800b9f4 <Paint_SetPixel>
 800c522:	e015      	b.n	800c550 <Paint_DrawChar+0x160>

                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 800c524:	230e      	movs	r3, #14
 800c526:	18fa      	adds	r2, r7, r3
 800c528:	231c      	movs	r3, #28
 800c52a:	18fb      	adds	r3, r7, r3
 800c52c:	8812      	ldrh	r2, [r2, #0]
 800c52e:	881b      	ldrh	r3, [r3, #0]
 800c530:	18d3      	adds	r3, r2, r3
 800c532:	b298      	uxth	r0, r3
 800c534:	230c      	movs	r3, #12
 800c536:	18fa      	adds	r2, r7, r3
 800c538:	231e      	movs	r3, #30
 800c53a:	18fb      	adds	r3, r7, r3
 800c53c:	8812      	ldrh	r2, [r2, #0]
 800c53e:	881b      	ldrh	r3, [r3, #0]
 800c540:	18d3      	adds	r3, r2, r3
 800c542:	b299      	uxth	r1, r3
 800c544:	2334      	movs	r3, #52	@ 0x34
 800c546:	18fb      	adds	r3, r7, r3
 800c548:	881b      	ldrh	r3, [r3, #0]
 800c54a:	001a      	movs	r2, r3
 800c54c:	f7ff fa52 	bl	800b9f4 <Paint_SetPixel>
 
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 800c550:	231c      	movs	r3, #28
 800c552:	18fb      	adds	r3, r7, r3
 800c554:	881b      	ldrh	r3, [r3, #0]
 800c556:	2207      	movs	r2, #7
 800c558:	4013      	ands	r3, r2
 800c55a:	b29b      	uxth	r3, r3
 800c55c:	2b07      	cmp	r3, #7
 800c55e:	d102      	bne.n	800c566 <Paint_DrawChar+0x176>
                ptr++;
 800c560:	69bb      	ldr	r3, [r7, #24]
 800c562:	3301      	adds	r3, #1
 800c564:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < font_Width; Column ++ ) {
 800c566:	211c      	movs	r1, #28
 800c568:	187b      	adds	r3, r7, r1
 800c56a:	881a      	ldrh	r2, [r3, #0]
 800c56c:	187b      	adds	r3, r7, r1
 800c56e:	3201      	adds	r2, #1
 800c570:	801a      	strh	r2, [r3, #0]
 800c572:	231c      	movs	r3, #28
 800c574:	18fb      	adds	r3, r7, r3
 800c576:	881b      	ldrh	r3, [r3, #0]
 800c578:	697a      	ldr	r2, [r7, #20]
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d900      	bls.n	800c580 <Paint_DrawChar+0x190>
 800c57e:	e786      	b.n	800c48e <Paint_DrawChar+0x9e>
        }// Write a line
        if (font_Width % 8 != 0)
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	2207      	movs	r2, #7
 800c584:	4013      	ands	r3, r2
 800c586:	d002      	beq.n	800c58e <Paint_DrawChar+0x19e>
            ptr++;
 800c588:	69bb      	ldr	r3, [r7, #24]
 800c58a:	3301      	adds	r3, #1
 800c58c:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < font_Height; Page ++ ) {
 800c58e:	211e      	movs	r1, #30
 800c590:	187b      	adds	r3, r7, r1
 800c592:	881a      	ldrh	r2, [r3, #0]
 800c594:	187b      	adds	r3, r7, r1
 800c596:	3201      	adds	r2, #1
 800c598:	801a      	strh	r2, [r3, #0]
 800c59a:	231e      	movs	r3, #30
 800c59c:	18fb      	adds	r3, r7, r3
 800c59e:	881b      	ldrh	r3, [r3, #0]
 800c5a0:	693a      	ldr	r2, [r7, #16]
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d900      	bls.n	800c5a8 <Paint_DrawChar+0x1b8>
 800c5a6:	e76d      	b.n	800c484 <Paint_DrawChar+0x94>
 800c5a8:	e000      	b.n	800c5ac <Paint_DrawChar+0x1bc>
        return;
 800c5aa:	46c0      	nop			@ (mov r8, r8)
    }// Write all
}
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	b008      	add	sp, #32
 800c5b0:	bdb0      	pop	{r4, r5, r7, pc}
 800c5b2:	46c0      	nop			@ (mov r8, r8)
 800c5b4:	200005a8 	.word	0x200005a8
 800c5b8:	1fffffe0 	.word	0x1fffffe0

0800c5bc <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         tFont* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800c5bc:	b5b0      	push	{r4, r5, r7, lr}
 800c5be:	b088      	sub	sp, #32
 800c5c0:	af02      	add	r7, sp, #8
 800c5c2:	60ba      	str	r2, [r7, #8]
 800c5c4:	607b      	str	r3, [r7, #4]
 800c5c6:	240e      	movs	r4, #14
 800c5c8:	193b      	adds	r3, r7, r4
 800c5ca:	1c02      	adds	r2, r0, #0
 800c5cc:	801a      	strh	r2, [r3, #0]
 800c5ce:	200c      	movs	r0, #12
 800c5d0:	183b      	adds	r3, r7, r0
 800c5d2:	1c0a      	adds	r2, r1, #0
 800c5d4:	801a      	strh	r2, [r3, #0]
    UWORD Xpoint = Xstart;
 800c5d6:	2316      	movs	r3, #22
 800c5d8:	18fb      	adds	r3, r7, r3
 800c5da:	0021      	movs	r1, r4
 800c5dc:	187a      	adds	r2, r7, r1
 800c5de:	8812      	ldrh	r2, [r2, #0]
 800c5e0:	801a      	strh	r2, [r3, #0]
    UWORD Ypoint = Ystart;
 800c5e2:	2314      	movs	r3, #20
 800c5e4:	18fb      	adds	r3, r7, r3
 800c5e6:	183a      	adds	r2, r7, r0
 800c5e8:	8812      	ldrh	r2, [r2, #0]
 800c5ea:	801a      	strh	r2, [r3, #0]
//			uint32_t font_Width = (*Font).chars[Acsii_Char - ' '].image->width;
//		uint32_t font_Height = (*Font).chars[Acsii_Char - ' ' ].image->height;

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 800c5ec:	4b1f      	ldr	r3, [pc, #124]	@ (800c66c <Paint_DrawString_EN+0xb0>)
 800c5ee:	889b      	ldrh	r3, [r3, #4]
 800c5f0:	187a      	adds	r2, r7, r1
 800c5f2:	8812      	ldrh	r2, [r2, #0]
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	d835      	bhi.n	800c664 <Paint_DrawString_EN+0xa8>
 800c5f8:	4b1c      	ldr	r3, [pc, #112]	@ (800c66c <Paint_DrawString_EN+0xb0>)
 800c5fa:	88db      	ldrh	r3, [r3, #6]
 800c5fc:	183a      	adds	r2, r7, r0
 800c5fe:	8812      	ldrh	r2, [r2, #0]
 800c600:	429a      	cmp	r2, r3
 800c602:	d82f      	bhi.n	800c664 <Paint_DrawString_EN+0xa8>
        DE_BUG("Paint_DrawString_EN Input exceeds the normal display range\r\n");
        return;
    }

    while (* pString != '\0') {
 800c604:	e029      	b.n	800c65a <Paint_DrawString_EN+0x9e>
//        // If the Y direction is full, reposition to(Xstart, Ystart)
//        if ((Ypoint  + Font->Height ) > Paint.Height ) {
//            Xpoint = Xstart;
//            Ypoint = Ystart;
//        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	781a      	ldrb	r2, [r3, #0]
 800c60a:	687c      	ldr	r4, [r7, #4]
 800c60c:	2314      	movs	r3, #20
 800c60e:	18fb      	adds	r3, r7, r3
 800c610:	8819      	ldrh	r1, [r3, #0]
 800c612:	2516      	movs	r5, #22
 800c614:	197b      	adds	r3, r7, r5
 800c616:	8818      	ldrh	r0, [r3, #0]
 800c618:	2328      	movs	r3, #40	@ 0x28
 800c61a:	18fb      	adds	r3, r7, r3
 800c61c:	881b      	ldrh	r3, [r3, #0]
 800c61e:	9301      	str	r3, [sp, #4]
 800c620:	232c      	movs	r3, #44	@ 0x2c
 800c622:	18fb      	adds	r3, r7, r3
 800c624:	881b      	ldrh	r3, [r3, #0]
 800c626:	9300      	str	r3, [sp, #0]
 800c628:	0023      	movs	r3, r4
 800c62a:	f7ff fee1 	bl	800c3f0 <Paint_DrawChar>

        //The next character of the address
        
			uint32_t font_Width = (*Font).chars[* pString - ' '].image->width;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	685a      	ldr	r2, [r3, #4]
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	490e      	ldr	r1, [pc, #56]	@ (800c670 <Paint_DrawString_EN+0xb4>)
 800c638:	468c      	mov	ip, r1
 800c63a:	4463      	add	r3, ip
 800c63c:	00db      	lsls	r3, r3, #3
 800c63e:	18d3      	adds	r3, r2, r3
 800c640:	685b      	ldr	r3, [r3, #4]
 800c642:	889b      	ldrh	r3, [r3, #4]
 800c644:	613b      	str	r3, [r7, #16]
        //The next word of the abscissa increases the font of the broadband
        Xpoint += font_Width;
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	b299      	uxth	r1, r3
 800c64a:	197b      	adds	r3, r7, r5
 800c64c:	197a      	adds	r2, r7, r5
 800c64e:	8812      	ldrh	r2, [r2, #0]
 800c650:	188a      	adds	r2, r1, r2
 800c652:	801a      	strh	r2, [r3, #0]
		pString ++;
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	3301      	adds	r3, #1
 800c658:	60bb      	str	r3, [r7, #8]
    while (* pString != '\0') {
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	781b      	ldrb	r3, [r3, #0]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d1d1      	bne.n	800c606 <Paint_DrawString_EN+0x4a>
 800c662:	e000      	b.n	800c666 <Paint_DrawString_EN+0xaa>
        return;
 800c664:	46c0      	nop			@ (mov r8, r8)
    }
}
 800c666:	46bd      	mov	sp, r7
 800c668:	b006      	add	sp, #24
 800c66a:	bdb0      	pop	{r4, r5, r7, pc}
 800c66c:	200005a8 	.word	0x200005a8
 800c670:	1fffffe0 	.word	0x1fffffe0

0800c674 <battery_out>:
static const struct X0_Y0 big_0 = {67, 30};		//	Big 1
static const struct X0_Y0 small_0 = {142,46};		//	Small 0

// *************************************************************************************

void battery_out(uint16_t bat){  // Battery voltage out  X.Y
 800c674:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c676:	b087      	sub	sp, #28
 800c678:	af02      	add	r7, sp, #8
 800c67a:	0002      	movs	r2, r0
 800c67c:	1dbb      	adds	r3, r7, #6
 800c67e:	801a      	strh	r2, [r3, #0]
	
	uint8_t x = 3;
 800c680:	250f      	movs	r5, #15
 800c682:	197b      	adds	r3, r7, r5
 800c684:	2203      	movs	r2, #3
 800c686:	701a      	strb	r2, [r3, #0]
	uint8_t y = 160;
 800c688:	260e      	movs	r6, #14
 800c68a:	19bb      	adds	r3, r7, r6
 800c68c:	22a0      	movs	r2, #160	@ 0xa0
 800c68e:	701a      	strb	r2, [r3, #0]
//	const uint16_t Ubat_min = 220;				// Battery min voltage 2.2 V (display).
	
	sprintf(str_array, "%2d", bat);
 800c690:	1dbb      	adds	r3, r7, #6
 800c692:	881a      	ldrh	r2, [r3, #0]
 800c694:	4926      	ldr	r1, [pc, #152]	@ (800c730 <battery_out+0xbc>)
 800c696:	4b27      	ldr	r3, [pc, #156]	@ (800c734 <battery_out+0xc0>)
 800c698:	0018      	movs	r0, r3
 800c69a:	f7f9 f835 	bl	8005708 <sprintf_>
	Paint_ClearWindows(x, y, x+40, y+29, WHITE);	
 800c69e:	197b      	adds	r3, r7, r5
 800c6a0:	781b      	ldrb	r3, [r3, #0]
 800c6a2:	b298      	uxth	r0, r3
 800c6a4:	19bb      	adds	r3, r7, r6
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	b299      	uxth	r1, r3
 800c6aa:	197b      	adds	r3, r7, r5
 800c6ac:	781b      	ldrb	r3, [r3, #0]
 800c6ae:	b29b      	uxth	r3, r3
 800c6b0:	3328      	adds	r3, #40	@ 0x28
 800c6b2:	b29a      	uxth	r2, r3
 800c6b4:	19bb      	adds	r3, r7, r6
 800c6b6:	781b      	ldrb	r3, [r3, #0]
 800c6b8:	b29b      	uxth	r3, r3
 800c6ba:	331d      	adds	r3, #29
 800c6bc:	b29b      	uxth	r3, r3
 800c6be:	24ff      	movs	r4, #255	@ 0xff
 800c6c0:	9400      	str	r4, [sp, #0]
 800c6c2:	f7ff fbc3 	bl	800be4c <Paint_ClearWindows>

	Paint_DrawChar(x, y, str_array[0], &calibri_24pts, BLACK, WHITE);	// 	12, 29, 8
 800c6c6:	197b      	adds	r3, r7, r5
 800c6c8:	781b      	ldrb	r3, [r3, #0]
 800c6ca:	b298      	uxth	r0, r3
 800c6cc:	19bb      	adds	r3, r7, r6
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	b299      	uxth	r1, r3
 800c6d2:	4b18      	ldr	r3, [pc, #96]	@ (800c734 <battery_out+0xc0>)
 800c6d4:	781a      	ldrb	r2, [r3, #0]
 800c6d6:	4b18      	ldr	r3, [pc, #96]	@ (800c738 <battery_out+0xc4>)
 800c6d8:	24ff      	movs	r4, #255	@ 0xff
 800c6da:	9401      	str	r4, [sp, #4]
 800c6dc:	2400      	movs	r4, #0
 800c6de:	9400      	str	r4, [sp, #0]
 800c6e0:	f7ff fe86 	bl	800c3f0 <Paint_DrawChar>
	Paint_DrawChar(x+12, y, str_array[1], &calibri_24pts, BLACK, WHITE);	
 800c6e4:	197b      	adds	r3, r7, r5
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	b29b      	uxth	r3, r3
 800c6ea:	330c      	adds	r3, #12
 800c6ec:	b298      	uxth	r0, r3
 800c6ee:	19bb      	adds	r3, r7, r6
 800c6f0:	781b      	ldrb	r3, [r3, #0]
 800c6f2:	b299      	uxth	r1, r3
 800c6f4:	4b0f      	ldr	r3, [pc, #60]	@ (800c734 <battery_out+0xc0>)
 800c6f6:	785a      	ldrb	r2, [r3, #1]
 800c6f8:	4b0f      	ldr	r3, [pc, #60]	@ (800c738 <battery_out+0xc4>)
 800c6fa:	24ff      	movs	r4, #255	@ 0xff
 800c6fc:	9401      	str	r4, [sp, #4]
 800c6fe:	2400      	movs	r4, #0
 800c700:	9400      	str	r4, [sp, #0]
 800c702:	f7ff fe75 	bl	800c3f0 <Paint_DrawChar>
	Paint_DrawChar(x+12+12, y, str_array[2], &calibri_24pts, BLACK, WHITE);	
 800c706:	197b      	adds	r3, r7, r5
 800c708:	781b      	ldrb	r3, [r3, #0]
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	3318      	adds	r3, #24
 800c70e:	b298      	uxth	r0, r3
 800c710:	19bb      	adds	r3, r7, r6
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	b299      	uxth	r1, r3
 800c716:	4b07      	ldr	r3, [pc, #28]	@ (800c734 <battery_out+0xc0>)
 800c718:	789a      	ldrb	r2, [r3, #2]
 800c71a:	4b07      	ldr	r3, [pc, #28]	@ (800c738 <battery_out+0xc4>)
 800c71c:	24ff      	movs	r4, #255	@ 0xff
 800c71e:	9401      	str	r4, [sp, #4]
 800c720:	2400      	movs	r4, #0
 800c722:	9400      	str	r4, [sp, #0]
 800c724:	f7ff fe64 	bl	800c3f0 <Paint_DrawChar>
	
//		EPD_1IN54_V2_DisplayPart(BlackImage);	
}
 800c728:	46c0      	nop			@ (mov r8, r8)
 800c72a:	46bd      	mov	sp, r7
 800c72c:	b005      	add	sp, #20
 800c72e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c730:	0800f9c8 	.word	0x0800f9c8
 800c734:	200005c4 	.word	0x200005c4
 800c738:	20000158 	.word	0x20000158

0800c73c <temperature_out>:


void temperature_out(uint16_t tempr){
 800c73c:	b590      	push	{r4, r7, lr}
 800c73e:	b085      	sub	sp, #20
 800c740:	af02      	add	r7, sp, #8
 800c742:	0002      	movs	r2, r0
 800c744:	1dbb      	adds	r3, r7, #6
 800c746:	801a      	strh	r2, [r3, #0]
	
	sprintf(str_array, "%3d", tempr);						
 800c748:	1dbb      	adds	r3, r7, #6
 800c74a:	881a      	ldrh	r2, [r3, #0]
 800c74c:	4923      	ldr	r1, [pc, #140]	@ (800c7dc <temperature_out+0xa0>)
 800c74e:	4b24      	ldr	r3, [pc, #144]	@ (800c7e0 <temperature_out+0xa4>)
 800c750:	0018      	movs	r0, r3
 800c752:	f7f8 ffd9 	bl	8005708 <sprintf_>
	Paint_ClearWindows(big_1.x, big_1.y, 142 + 41, big_1.y + 101, WHITE);	// 40 ms		
 800c756:	230a      	movs	r3, #10
 800c758:	0018      	movs	r0, r3
 800c75a:	231e      	movs	r3, #30
 800c75c:	0019      	movs	r1, r3
 800c75e:	231e      	movs	r3, #30
 800c760:	3365      	adds	r3, #101	@ 0x65
 800c762:	b29b      	uxth	r3, r3
 800c764:	22ff      	movs	r2, #255	@ 0xff
 800c766:	9200      	str	r2, [sp, #0]
 800c768:	22b7      	movs	r2, #183	@ 0xb7
 800c76a:	f7ff fb6f 	bl	800be4c <Paint_ClearWindows>

	Paint_DrawChar(big_1.x, big_1.y, str_array[0], &calibri_104pts, BLACK, WHITE); // 15 ms
 800c76e:	230a      	movs	r3, #10
 800c770:	0018      	movs	r0, r3
 800c772:	231e      	movs	r3, #30
 800c774:	001c      	movs	r4, r3
 800c776:	4b1a      	ldr	r3, [pc, #104]	@ (800c7e0 <temperature_out+0xa4>)
 800c778:	781a      	ldrb	r2, [r3, #0]
 800c77a:	4b1a      	ldr	r3, [pc, #104]	@ (800c7e4 <temperature_out+0xa8>)
 800c77c:	21ff      	movs	r1, #255	@ 0xff
 800c77e:	9101      	str	r1, [sp, #4]
 800c780:	2100      	movs	r1, #0
 800c782:	9100      	str	r1, [sp, #0]
 800c784:	0021      	movs	r1, r4
 800c786:	f7ff fe33 	bl	800c3f0 <Paint_DrawChar>
	Paint_DrawChar(big_0.x, big_0.y, str_array[1], &calibri_104pts, BLACK, WHITE);
 800c78a:	2343      	movs	r3, #67	@ 0x43
 800c78c:	0018      	movs	r0, r3
 800c78e:	231e      	movs	r3, #30
 800c790:	001c      	movs	r4, r3
 800c792:	4b13      	ldr	r3, [pc, #76]	@ (800c7e0 <temperature_out+0xa4>)
 800c794:	785a      	ldrb	r2, [r3, #1]
 800c796:	4b13      	ldr	r3, [pc, #76]	@ (800c7e4 <temperature_out+0xa8>)
 800c798:	21ff      	movs	r1, #255	@ 0xff
 800c79a:	9101      	str	r1, [sp, #4]
 800c79c:	2100      	movs	r1, #0
 800c79e:	9100      	str	r1, [sp, #0]
 800c7a0:	0021      	movs	r1, r4
 800c7a2:	f7ff fe25 	bl	800c3f0 <Paint_DrawChar>
	Paint_DrawPoint(131, 100, BLACK, DOT_PIXEL_5X5, DOT_FILL_AROUND); //Draw decimal point
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	9300      	str	r3, [sp, #0]
 800c7aa:	2305      	movs	r3, #5
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	2164      	movs	r1, #100	@ 0x64
 800c7b0:	2083      	movs	r0, #131	@ 0x83
 800c7b2:	f7ff fb95 	bl	800bee0 <Paint_DrawPoint>
	Paint_DrawChar(small_0.x, small_0.y, str_array[2], &calibri_80pts, BLACK, WHITE);					
 800c7b6:	238e      	movs	r3, #142	@ 0x8e
 800c7b8:	0018      	movs	r0, r3
 800c7ba:	232e      	movs	r3, #46	@ 0x2e
 800c7bc:	001c      	movs	r4, r3
 800c7be:	4b08      	ldr	r3, [pc, #32]	@ (800c7e0 <temperature_out+0xa4>)
 800c7c0:	789a      	ldrb	r2, [r3, #2]
 800c7c2:	4b09      	ldr	r3, [pc, #36]	@ (800c7e8 <temperature_out+0xac>)
 800c7c4:	21ff      	movs	r1, #255	@ 0xff
 800c7c6:	9101      	str	r1, [sp, #4]
 800c7c8:	2100      	movs	r1, #0
 800c7ca:	9100      	str	r1, [sp, #0]
 800c7cc:	0021      	movs	r1, r4
 800c7ce:	f7ff fe0f 	bl	800c3f0 <Paint_DrawChar>

//	EPD_1IN54_V2_DisplayPart(BlackImage);	// 0.84 sec ms
}
 800c7d2:	46c0      	nop			@ (mov r8, r8)
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	b003      	add	sp, #12
 800c7d8:	bd90      	pop	{r4, r7, pc}
 800c7da:	46c0      	nop			@ (mov r8, r8)
 800c7dc:	0800f9cc 	.word	0x0800f9cc
 800c7e0:	200005c4 	.word	0x200005c4
 800c7e4:	20000150 	.word	0x20000150
 800c7e8:	20000168 	.word	0x20000168

0800c7ec <humidity_out>:


void humidity_out(uint16_t hum){
 800c7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7ee:	b087      	sub	sp, #28
 800c7f0:	af02      	add	r7, sp, #8
 800c7f2:	0002      	movs	r2, r0
 800c7f4:	1dbb      	adds	r3, r7, #6
 800c7f6:	801a      	strh	r2, [r3, #0]

	uint8_t x = 125;
 800c7f8:	240f      	movs	r4, #15
 800c7fa:	193b      	adds	r3, r7, r4
 800c7fc:	227d      	movs	r2, #125	@ 0x7d
 800c7fe:	701a      	strb	r2, [r3, #0]
	uint8_t y = 150;
 800c800:	250e      	movs	r5, #14
 800c802:	197b      	adds	r3, r7, r5
 800c804:	2296      	movs	r2, #150	@ 0x96
 800c806:	701a      	strb	r2, [r3, #0]
	char pcent = '%';
 800c808:	260d      	movs	r6, #13
 800c80a:	19bb      	adds	r3, r7, r6
 800c80c:	2225      	movs	r2, #37	@ 0x25
 800c80e:	701a      	strb	r2, [r3, #0]
	sprintf(str_array, "%2d", hum);
 800c810:	1dbb      	adds	r3, r7, #6
 800c812:	881a      	ldrh	r2, [r3, #0]
 800c814:	4914      	ldr	r1, [pc, #80]	@ (800c868 <humidity_out+0x7c>)
 800c816:	4b15      	ldr	r3, [pc, #84]	@ (800c86c <humidity_out+0x80>)
 800c818:	0018      	movs	r0, r3
 800c81a:	f7f8 ff75 	bl	8005708 <sprintf_>
	// append % to string
    strncat(str_array, &pcent, 1);
 800c81e:	19b9      	adds	r1, r7, r6
 800c820:	4b12      	ldr	r3, [pc, #72]	@ (800c86c <humidity_out+0x80>)
 800c822:	2201      	movs	r2, #1
 800c824:	0018      	movs	r0, r3
 800c826:	f000 ffd1 	bl	800d7cc <strncat>
	
	/******************************************************************************
	void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,tFont* Font, UWORD Color_Foreground, UWORD Color_Background)
	******************************************************************************/

	Paint_ClearWindows(x, y, 200, 197, WHITE);	// 10^1
 800c82a:	193b      	adds	r3, r7, r4
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	b298      	uxth	r0, r3
 800c830:	197b      	adds	r3, r7, r5
 800c832:	781b      	ldrb	r3, [r3, #0]
 800c834:	b299      	uxth	r1, r3
 800c836:	23ff      	movs	r3, #255	@ 0xff
 800c838:	9300      	str	r3, [sp, #0]
 800c83a:	23c5      	movs	r3, #197	@ 0xc5
 800c83c:	22c8      	movs	r2, #200	@ 0xc8
 800c83e:	f7ff fb05 	bl	800be4c <Paint_ClearWindows>
	Paint_DrawString_EN(x, y, (char*)str_array, &calibri_36pts, WHITE, BLACK); // 20, 34
 800c842:	193b      	adds	r3, r7, r4
 800c844:	781b      	ldrb	r3, [r3, #0]
 800c846:	b298      	uxth	r0, r3
 800c848:	197b      	adds	r3, r7, r5
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	b299      	uxth	r1, r3
 800c84e:	4b08      	ldr	r3, [pc, #32]	@ (800c870 <humidity_out+0x84>)
 800c850:	4a06      	ldr	r2, [pc, #24]	@ (800c86c <humidity_out+0x80>)
 800c852:	2400      	movs	r4, #0
 800c854:	9401      	str	r4, [sp, #4]
 800c856:	24ff      	movs	r4, #255	@ 0xff
 800c858:	9400      	str	r4, [sp, #0]
 800c85a:	f7ff feaf 	bl	800c5bc <Paint_DrawString_EN>

}
 800c85e:	46c0      	nop			@ (mov r8, r8)
 800c860:	46bd      	mov	sp, r7
 800c862:	b005      	add	sp, #20
 800c864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c866:	46c0      	nop			@ (mov r8, r8)
 800c868:	0800f9c8 	.word	0x0800f9c8
 800c86c:	200005c4 	.word	0x200005c4
 800c870:	20000160 	.word	0x20000160

0800c874 <ESP_Init>:



//  **************************************************************************************

int ESP_Init(void){ 
 800c874:	b580      	push	{r7, lr}
 800c876:	b086      	sub	sp, #24
 800c878:	af04      	add	r7, sp, #16
	printf("ESP_Init\n");
 800c87a:	4b26      	ldr	r3, [pc, #152]	@ (800c914 <ESP_Init+0xa0>)
 800c87c:	0018      	movs	r0, r3
 800c87e:	f7f8 ff25 	bl	80056cc <printf_>
    DEV_Module_Init();		// DC_L();SPI_CS_H();RST_H(); - set initial values
 800c882:	f7fe fcfd 	bl	800b280 <DEV_Module_Init>
    EPD_1IN54_V2_Init();	// Reset pin set low, set LUT etc.
 800c886:	f7fe fe7b 	bl	800b580 <EPD_1IN54_V2_Init>

    //Create a new image cache    
    /* !!!  you have to edit the startup_stm32fxxx.s file and set a heap size = 1400 !!!  */
    UWORD Imagesize = ((EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1)) * EPD_1IN54_V2_HEIGHT;
 800c88a:	1dbb      	adds	r3, r7, #6
 800c88c:	4a22      	ldr	r2, [pc, #136]	@ (800c918 <ESP_Init+0xa4>)
 800c88e:	801a      	strh	r2, [r3, #0]
    if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 800c890:	1dbb      	adds	r3, r7, #6
 800c892:	881b      	ldrh	r3, [r3, #0]
 800c894:	0018      	movs	r0, r3
 800c896:	f000 f953 	bl	800cb40 <malloc>
 800c89a:	0003      	movs	r3, r0
 800c89c:	001a      	movs	r2, r3
 800c89e:	4b1f      	ldr	r3, [pc, #124]	@ (800c91c <ESP_Init+0xa8>)
 800c8a0:	601a      	str	r2, [r3, #0]
 800c8a2:	4b1e      	ldr	r3, [pc, #120]	@ (800c91c <ESP_Init+0xa8>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d106      	bne.n	800c8b8 <ESP_Init+0x44>
        printf("Failed to apply for black memory...\r\n");
 800c8aa:	4b1d      	ldr	r3, [pc, #116]	@ (800c920 <ESP_Init+0xac>)
 800c8ac:	0018      	movs	r0, r3
 800c8ae:	f7f8 ff0d 	bl	80056cc <printf_>
        return -1;
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	425b      	negs	r3, r3
 800c8b6:	e029      	b.n	800c90c <ESP_Init+0x98>
    }
	
	Paint_NewImage(BlackImage, EPD_1IN54_V2_WIDTH, EPD_1IN54_V2_HEIGHT, 0, WHITE);
 800c8b8:	4b18      	ldr	r3, [pc, #96]	@ (800c91c <ESP_Init+0xa8>)
 800c8ba:	6818      	ldr	r0, [r3, #0]
 800c8bc:	23ff      	movs	r3, #255	@ 0xff
 800c8be:	9300      	str	r3, [sp, #0]
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	22c8      	movs	r2, #200	@ 0xc8
 800c8c4:	21c8      	movs	r1, #200	@ 0xc8
 800c8c6:	f7ff f819 	bl	800b8fc <Paint_NewImage>
	
//  	Paint_Clear(WHITE);
    Paint_SelectImage(BlackImage);
 800c8ca:	4b14      	ldr	r3, [pc, #80]	@ (800c91c <ESP_Init+0xa8>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	0018      	movs	r0, r3
 800c8d0:	f7ff f882 	bl	800b9d8 <Paint_SelectImage>
    Paint_Clear(WHITE);
 800c8d4:	20ff      	movs	r0, #255	@ 0xff
 800c8d6:	f7ff fa2b 	bl	800bd30 <Paint_Clear>
	Paint_DrawRectangle(2, 3, 198, 140, BLACK, DOT_PIXEL_2X2, DRAW_FILL_EMPTY);
 800c8da:	2300      	movs	r3, #0
 800c8dc:	9302      	str	r3, [sp, #8]
 800c8de:	2302      	movs	r3, #2
 800c8e0:	9301      	str	r3, [sp, #4]
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	9300      	str	r3, [sp, #0]
 800c8e6:	238c      	movs	r3, #140	@ 0x8c
 800c8e8:	22c6      	movs	r2, #198	@ 0xc6
 800c8ea:	2103      	movs	r1, #3
 800c8ec:	2002      	movs	r0, #2
 800c8ee:	f7ff fcb7 	bl	800c260 <Paint_DrawRectangle>
	
    EPD_1IN54_V2_Display(BlackImage);	// Write data to display's RAM (do you really need it?)
 800c8f2:	4b0a      	ldr	r3, [pc, #40]	@ (800c91c <ESP_Init+0xa8>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	0018      	movs	r0, r3
 800c8f8:	f7fe fecc 	bl	800b694 <EPD_1IN54_V2_Display>
	 
    EPD_1IN54_V2_DisplayPartBaseImage(BlackImage);
 800c8fc:	4b07      	ldr	r3, [pc, #28]	@ (800c91c <ESP_Init+0xa8>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	0018      	movs	r0, r3
 800c902:	f7fe ff16 	bl	800b732 <EPD_1IN54_V2_DisplayPartBaseImage>
	EPD_1IN54_V2_Init_Partial();
 800c906:	f7fe fe83 	bl	800b610 <EPD_1IN54_V2_Init_Partial>
	
	return 0;
 800c90a:	2300      	movs	r3, #0
}
 800c90c:	0018      	movs	r0, r3
 800c90e:	46bd      	mov	sp, r7
 800c910:	b002      	add	sp, #8
 800c912:	bd80      	pop	{r7, pc}
 800c914:	0800f9d0 	.word	0x0800f9d0
 800c918:	00001388 	.word	0x00001388
 800c91c:	200005c0 	.word	0x200005c0
 800c920:	0800f9dc 	.word	0x0800f9dc

0800c924 <ESP_Init_standby>:
  printf("%s\t %s\n", aEndTime, aEndDate);
  
} 

//	**************************___ ESP_Init_after_standby ___**********************
int ESP_Init_standby(void){ 
 800c924:	b590      	push	{r4, r7, lr}
 800c926:	b087      	sub	sp, #28
 800c928:	af04      	add	r7, sp, #16
	printf("ESP_Init_standby\n");
 800c92a:	4b77      	ldr	r3, [pc, #476]	@ (800cb08 <ESP_Init_standby+0x1e4>)
 800c92c:	0018      	movs	r0, r3
 800c92e:	f7f8 fecd 	bl	80056cc <printf_>
    //Create a new image cache    
    /* !!!  you have to edit the startup_stm32fxxx.s file and set a heap size = 1400 !!!  */
    UWORD Imagesize = ((EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1)) * EPD_1IN54_V2_HEIGHT;
 800c932:	1dbb      	adds	r3, r7, #6
 800c934:	4a75      	ldr	r2, [pc, #468]	@ (800cb0c <ESP_Init_standby+0x1e8>)
 800c936:	801a      	strh	r2, [r3, #0]
    if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 800c938:	1dbb      	adds	r3, r7, #6
 800c93a:	881b      	ldrh	r3, [r3, #0]
 800c93c:	0018      	movs	r0, r3
 800c93e:	f000 f8ff 	bl	800cb40 <malloc>
 800c942:	0003      	movs	r3, r0
 800c944:	001a      	movs	r2, r3
 800c946:	4b72      	ldr	r3, [pc, #456]	@ (800cb10 <ESP_Init_standby+0x1ec>)
 800c948:	601a      	str	r2, [r3, #0]
 800c94a:	4b71      	ldr	r3, [pc, #452]	@ (800cb10 <ESP_Init_standby+0x1ec>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d106      	bne.n	800c960 <ESP_Init_standby+0x3c>
        printf("Failed to apply for black memory...\r\n");
 800c952:	4b70      	ldr	r3, [pc, #448]	@ (800cb14 <ESP_Init_standby+0x1f0>)
 800c954:	0018      	movs	r0, r3
 800c956:	f7f8 feb9 	bl	80056cc <printf_>
        return -1;
 800c95a:	2301      	movs	r3, #1
 800c95c:	425b      	negs	r3, r3
 800c95e:	e0cf      	b.n	800cb00 <ESP_Init_standby+0x1dc>
    }
		Paint_NewImage(BlackImage, EPD_1IN54_V2_WIDTH, EPD_1IN54_V2_HEIGHT, 0, WHITE);
 800c960:	4b6b      	ldr	r3, [pc, #428]	@ (800cb10 <ESP_Init_standby+0x1ec>)
 800c962:	6818      	ldr	r0, [r3, #0]
 800c964:	23ff      	movs	r3, #255	@ 0xff
 800c966:	9300      	str	r3, [sp, #0]
 800c968:	2300      	movs	r3, #0
 800c96a:	22c8      	movs	r2, #200	@ 0xc8
 800c96c:	21c8      	movs	r1, #200	@ 0xc8
 800c96e:	f7fe ffc5 	bl	800b8fc <Paint_NewImage>
		
	// Drawing on the image ======================================================
//    INFO("Drawing\r\n");

    Paint_SelectImage(BlackImage);	// Paint.Image = image;
 800c972:	4b67      	ldr	r3, [pc, #412]	@ (800cb10 <ESP_Init_standby+0x1ec>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	0018      	movs	r0, r3
 800c978:	f7ff f82e 	bl	800b9d8 <Paint_SelectImage>
    Paint_Clear(WHITE);
 800c97c:	20ff      	movs	r0, #255	@ 0xff
 800c97e:	f7ff f9d7 	bl	800bd30 <Paint_Clear>
	Paint_DrawRectangle(2, 3, 198, 140, BLACK, DOT_PIXEL_2X2, DRAW_FILL_EMPTY);
 800c982:	2300      	movs	r3, #0
 800c984:	9302      	str	r3, [sp, #8]
 800c986:	2302      	movs	r3, #2
 800c988:	9301      	str	r3, [sp, #4]
 800c98a:	2300      	movs	r3, #0
 800c98c:	9300      	str	r3, [sp, #0]
 800c98e:	238c      	movs	r3, #140	@ 0x8c
 800c990:	22c6      	movs	r2, #198	@ 0xc6
 800c992:	2103      	movs	r1, #3
 800c994:	2002      	movs	r0, #2
 800c996:	f7ff fc63 	bl	800c260 <Paint_DrawRectangle>
	
// T	
	sprintf(str_array, "%3d", T_old);
 800c99a:	4b5f      	ldr	r3, [pc, #380]	@ (800cb18 <ESP_Init_standby+0x1f4>)
 800c99c:	881b      	ldrh	r3, [r3, #0]
 800c99e:	001a      	movs	r2, r3
 800c9a0:	495e      	ldr	r1, [pc, #376]	@ (800cb1c <ESP_Init_standby+0x1f8>)
 800c9a2:	4b5f      	ldr	r3, [pc, #380]	@ (800cb20 <ESP_Init_standby+0x1fc>)
 800c9a4:	0018      	movs	r0, r3
 800c9a6:	f7f8 feaf 	bl	8005708 <sprintf_>
	Paint_DrawChar(big_1.x, big_1.y, str_array[0], &calibri_104pts, BLACK, WHITE); // 15 ms
 800c9aa:	230a      	movs	r3, #10
 800c9ac:	0018      	movs	r0, r3
 800c9ae:	231e      	movs	r3, #30
 800c9b0:	001c      	movs	r4, r3
 800c9b2:	4b5b      	ldr	r3, [pc, #364]	@ (800cb20 <ESP_Init_standby+0x1fc>)
 800c9b4:	781a      	ldrb	r2, [r3, #0]
 800c9b6:	4b5b      	ldr	r3, [pc, #364]	@ (800cb24 <ESP_Init_standby+0x200>)
 800c9b8:	21ff      	movs	r1, #255	@ 0xff
 800c9ba:	9101      	str	r1, [sp, #4]
 800c9bc:	2100      	movs	r1, #0
 800c9be:	9100      	str	r1, [sp, #0]
 800c9c0:	0021      	movs	r1, r4
 800c9c2:	f7ff fd15 	bl	800c3f0 <Paint_DrawChar>
	Paint_DrawChar(big_0.x, big_0.y, str_array[1], &calibri_104pts, BLACK, WHITE);
 800c9c6:	2343      	movs	r3, #67	@ 0x43
 800c9c8:	0018      	movs	r0, r3
 800c9ca:	231e      	movs	r3, #30
 800c9cc:	001c      	movs	r4, r3
 800c9ce:	4b54      	ldr	r3, [pc, #336]	@ (800cb20 <ESP_Init_standby+0x1fc>)
 800c9d0:	785a      	ldrb	r2, [r3, #1]
 800c9d2:	4b54      	ldr	r3, [pc, #336]	@ (800cb24 <ESP_Init_standby+0x200>)
 800c9d4:	21ff      	movs	r1, #255	@ 0xff
 800c9d6:	9101      	str	r1, [sp, #4]
 800c9d8:	2100      	movs	r1, #0
 800c9da:	9100      	str	r1, [sp, #0]
 800c9dc:	0021      	movs	r1, r4
 800c9de:	f7ff fd07 	bl	800c3f0 <Paint_DrawChar>
	Paint_DrawPoint(131, 100, BLACK, DOT_PIXEL_5X5, DOT_FILL_AROUND); //Draw decimal point
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	9300      	str	r3, [sp, #0]
 800c9e6:	2305      	movs	r3, #5
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	2164      	movs	r1, #100	@ 0x64
 800c9ec:	2083      	movs	r0, #131	@ 0x83
 800c9ee:	f7ff fa77 	bl	800bee0 <Paint_DrawPoint>
	Paint_DrawChar(small_0.x, small_0.y, str_array[2], &calibri_80pts, BLACK, WHITE);		
 800c9f2:	238e      	movs	r3, #142	@ 0x8e
 800c9f4:	0018      	movs	r0, r3
 800c9f6:	232e      	movs	r3, #46	@ 0x2e
 800c9f8:	001c      	movs	r4, r3
 800c9fa:	4b49      	ldr	r3, [pc, #292]	@ (800cb20 <ESP_Init_standby+0x1fc>)
 800c9fc:	789a      	ldrb	r2, [r3, #2]
 800c9fe:	4b4a      	ldr	r3, [pc, #296]	@ (800cb28 <ESP_Init_standby+0x204>)
 800ca00:	21ff      	movs	r1, #255	@ 0xff
 800ca02:	9101      	str	r1, [sp, #4]
 800ca04:	2100      	movs	r1, #0
 800ca06:	9100      	str	r1, [sp, #0]
 800ca08:	0021      	movs	r1, r4
 800ca0a:	f7ff fcf1 	bl	800c3f0 <Paint_DrawChar>
		
// hum
	uint8_t x = 125;
 800ca0e:	1d7b      	adds	r3, r7, #5
 800ca10:	227d      	movs	r2, #125	@ 0x7d
 800ca12:	701a      	strb	r2, [r3, #0]
	uint8_t y = 150;	
 800ca14:	1d3b      	adds	r3, r7, #4
 800ca16:	2296      	movs	r2, #150	@ 0x96
 800ca18:	701a      	strb	r2, [r3, #0]
	char pcent = '%';
 800ca1a:	1cfb      	adds	r3, r7, #3
 800ca1c:	2225      	movs	r2, #37	@ 0x25
 800ca1e:	701a      	strb	r2, [r3, #0]
	sprintf(str_array, "%2d", H_old);
 800ca20:	4b42      	ldr	r3, [pc, #264]	@ (800cb2c <ESP_Init_standby+0x208>)
 800ca22:	881b      	ldrh	r3, [r3, #0]
 800ca24:	001a      	movs	r2, r3
 800ca26:	4942      	ldr	r1, [pc, #264]	@ (800cb30 <ESP_Init_standby+0x20c>)
 800ca28:	4b3d      	ldr	r3, [pc, #244]	@ (800cb20 <ESP_Init_standby+0x1fc>)
 800ca2a:	0018      	movs	r0, r3
 800ca2c:	f7f8 fe6c 	bl	8005708 <sprintf_>
	// append % to string
    strncat(str_array, &pcent, 1);
 800ca30:	1cf9      	adds	r1, r7, #3
 800ca32:	4b3b      	ldr	r3, [pc, #236]	@ (800cb20 <ESP_Init_standby+0x1fc>)
 800ca34:	2201      	movs	r2, #1
 800ca36:	0018      	movs	r0, r3
 800ca38:	f000 fec8 	bl	800d7cc <strncat>
	Paint_DrawString_EN(x, y, (char*)str_array, &calibri_36pts, WHITE, BLACK); // 20, 34
 800ca3c:	1d7b      	adds	r3, r7, #5
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	b298      	uxth	r0, r3
 800ca42:	1d3b      	adds	r3, r7, #4
 800ca44:	781b      	ldrb	r3, [r3, #0]
 800ca46:	b299      	uxth	r1, r3
 800ca48:	4b3a      	ldr	r3, [pc, #232]	@ (800cb34 <ESP_Init_standby+0x210>)
 800ca4a:	4a35      	ldr	r2, [pc, #212]	@ (800cb20 <ESP_Init_standby+0x1fc>)
 800ca4c:	2400      	movs	r4, #0
 800ca4e:	9401      	str	r4, [sp, #4]
 800ca50:	24ff      	movs	r4, #255	@ 0xff
 800ca52:	9400      	str	r4, [sp, #0]
 800ca54:	f7ff fdb2 	bl	800c5bc <Paint_DrawString_EN>
	
// battery voltage	
		x = 3;
 800ca58:	1d7b      	adds	r3, r7, #5
 800ca5a:	2203      	movs	r2, #3
 800ca5c:	701a      	strb	r2, [r3, #0]
		y = 160;
 800ca5e:	1d3b      	adds	r3, r7, #4
 800ca60:	22a0      	movs	r2, #160	@ 0xa0
 800ca62:	701a      	strb	r2, [r3, #0]
		sprintf(str_array, "%3d", vbat_old);
 800ca64:	4b34      	ldr	r3, [pc, #208]	@ (800cb38 <ESP_Init_standby+0x214>)
 800ca66:	881b      	ldrh	r3, [r3, #0]
 800ca68:	001a      	movs	r2, r3
 800ca6a:	492c      	ldr	r1, [pc, #176]	@ (800cb1c <ESP_Init_standby+0x1f8>)
 800ca6c:	4b2c      	ldr	r3, [pc, #176]	@ (800cb20 <ESP_Init_standby+0x1fc>)
 800ca6e:	0018      	movs	r0, r3
 800ca70:	f7f8 fe4a 	bl	8005708 <sprintf_>
		
		Paint_ClearWindows(x, y, x+40, y+29, WHITE);			
 800ca74:	1d7b      	adds	r3, r7, #5
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	b298      	uxth	r0, r3
 800ca7a:	1d3b      	adds	r3, r7, #4
 800ca7c:	781b      	ldrb	r3, [r3, #0]
 800ca7e:	b299      	uxth	r1, r3
 800ca80:	1d7b      	adds	r3, r7, #5
 800ca82:	781b      	ldrb	r3, [r3, #0]
 800ca84:	b29b      	uxth	r3, r3
 800ca86:	3328      	adds	r3, #40	@ 0x28
 800ca88:	b29a      	uxth	r2, r3
 800ca8a:	1d3b      	adds	r3, r7, #4
 800ca8c:	781b      	ldrb	r3, [r3, #0]
 800ca8e:	b29b      	uxth	r3, r3
 800ca90:	331d      	adds	r3, #29
 800ca92:	b29b      	uxth	r3, r3
 800ca94:	24ff      	movs	r4, #255	@ 0xff
 800ca96:	9400      	str	r4, [sp, #0]
 800ca98:	f7ff f9d8 	bl	800be4c <Paint_ClearWindows>
		Paint_DrawChar(x, y, str_array[0], &calibri_24pts, BLACK, WHITE);	// 	12, 29, 8
 800ca9c:	1d7b      	adds	r3, r7, #5
 800ca9e:	781b      	ldrb	r3, [r3, #0]
 800caa0:	b298      	uxth	r0, r3
 800caa2:	1d3b      	adds	r3, r7, #4
 800caa4:	781b      	ldrb	r3, [r3, #0]
 800caa6:	b299      	uxth	r1, r3
 800caa8:	4b1d      	ldr	r3, [pc, #116]	@ (800cb20 <ESP_Init_standby+0x1fc>)
 800caaa:	781a      	ldrb	r2, [r3, #0]
 800caac:	4b23      	ldr	r3, [pc, #140]	@ (800cb3c <ESP_Init_standby+0x218>)
 800caae:	24ff      	movs	r4, #255	@ 0xff
 800cab0:	9401      	str	r4, [sp, #4]
 800cab2:	2400      	movs	r4, #0
 800cab4:	9400      	str	r4, [sp, #0]
 800cab6:	f7ff fc9b 	bl	800c3f0 <Paint_DrawChar>
		Paint_DrawChar(x+12, y, str_array[1], &calibri_24pts, BLACK, WHITE);	
 800caba:	1d7b      	adds	r3, r7, #5
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	b29b      	uxth	r3, r3
 800cac0:	330c      	adds	r3, #12
 800cac2:	b298      	uxth	r0, r3
 800cac4:	1d3b      	adds	r3, r7, #4
 800cac6:	781b      	ldrb	r3, [r3, #0]
 800cac8:	b299      	uxth	r1, r3
 800caca:	4b15      	ldr	r3, [pc, #84]	@ (800cb20 <ESP_Init_standby+0x1fc>)
 800cacc:	785a      	ldrb	r2, [r3, #1]
 800cace:	4b1b      	ldr	r3, [pc, #108]	@ (800cb3c <ESP_Init_standby+0x218>)
 800cad0:	24ff      	movs	r4, #255	@ 0xff
 800cad2:	9401      	str	r4, [sp, #4]
 800cad4:	2400      	movs	r4, #0
 800cad6:	9400      	str	r4, [sp, #0]
 800cad8:	f7ff fc8a 	bl	800c3f0 <Paint_DrawChar>
		Paint_DrawChar(x+12+12, y, str_array[2], &calibri_24pts, BLACK, WHITE);	
 800cadc:	1d7b      	adds	r3, r7, #5
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	b29b      	uxth	r3, r3
 800cae2:	3318      	adds	r3, #24
 800cae4:	b298      	uxth	r0, r3
 800cae6:	1d3b      	adds	r3, r7, #4
 800cae8:	781b      	ldrb	r3, [r3, #0]
 800caea:	b299      	uxth	r1, r3
 800caec:	4b0c      	ldr	r3, [pc, #48]	@ (800cb20 <ESP_Init_standby+0x1fc>)
 800caee:	789a      	ldrb	r2, [r3, #2]
 800caf0:	4b12      	ldr	r3, [pc, #72]	@ (800cb3c <ESP_Init_standby+0x218>)
 800caf2:	24ff      	movs	r4, #255	@ 0xff
 800caf4:	9401      	str	r4, [sp, #4]
 800caf6:	2400      	movs	r4, #0
 800caf8:	9400      	str	r4, [sp, #0]
 800cafa:	f7ff fc79 	bl	800c3f0 <Paint_DrawChar>
		
//		EPD_1IN54_V2_Display(BlackImage);		
//		EPD_1IN54_V2_DisplayPartBaseImage(BlackImage);
//		EPD_1IN54_V2_Init_Partial();
		
		return 0;
 800cafe:	2300      	movs	r3, #0
}
 800cb00:	0018      	movs	r0, r3
 800cb02:	46bd      	mov	sp, r7
 800cb04:	b003      	add	sp, #12
 800cb06:	bd90      	pop	{r4, r7, pc}
 800cb08:	0800fa44 	.word	0x0800fa44
 800cb0c:	00001388 	.word	0x00001388
 800cb10:	200005c0 	.word	0x200005c0
 800cb14:	0800f9dc 	.word	0x0800f9dc
 800cb18:	20000466 	.word	0x20000466
 800cb1c:	0800f9cc 	.word	0x0800f9cc
 800cb20:	200005c4 	.word	0x200005c4
 800cb24:	20000150 	.word	0x20000150
 800cb28:	20000168 	.word	0x20000168
 800cb2c:	20000464 	.word	0x20000464
 800cb30:	0800f9c8 	.word	0x0800f9c8
 800cb34:	20000160 	.word	0x20000160
 800cb38:	20000468 	.word	0x20000468
 800cb3c:	20000158 	.word	0x20000158

0800cb40 <malloc>:
 800cb40:	b510      	push	{r4, lr}
 800cb42:	4b03      	ldr	r3, [pc, #12]	@ (800cb50 <malloc+0x10>)
 800cb44:	0001      	movs	r1, r0
 800cb46:	6818      	ldr	r0, [r3, #0]
 800cb48:	f000 f826 	bl	800cb98 <_malloc_r>
 800cb4c:	bd10      	pop	{r4, pc}
 800cb4e:	46c0      	nop			@ (mov r8, r8)
 800cb50:	2000017c 	.word	0x2000017c

0800cb54 <sbrk_aligned>:
 800cb54:	b570      	push	{r4, r5, r6, lr}
 800cb56:	4e0f      	ldr	r6, [pc, #60]	@ (800cb94 <sbrk_aligned+0x40>)
 800cb58:	000d      	movs	r5, r1
 800cb5a:	6831      	ldr	r1, [r6, #0]
 800cb5c:	0004      	movs	r4, r0
 800cb5e:	2900      	cmp	r1, #0
 800cb60:	d102      	bne.n	800cb68 <sbrk_aligned+0x14>
 800cb62:	f000 fe87 	bl	800d874 <_sbrk_r>
 800cb66:	6030      	str	r0, [r6, #0]
 800cb68:	0029      	movs	r1, r5
 800cb6a:	0020      	movs	r0, r4
 800cb6c:	f000 fe82 	bl	800d874 <_sbrk_r>
 800cb70:	1c43      	adds	r3, r0, #1
 800cb72:	d103      	bne.n	800cb7c <sbrk_aligned+0x28>
 800cb74:	2501      	movs	r5, #1
 800cb76:	426d      	negs	r5, r5
 800cb78:	0028      	movs	r0, r5
 800cb7a:	bd70      	pop	{r4, r5, r6, pc}
 800cb7c:	2303      	movs	r3, #3
 800cb7e:	1cc5      	adds	r5, r0, #3
 800cb80:	439d      	bics	r5, r3
 800cb82:	42a8      	cmp	r0, r5
 800cb84:	d0f8      	beq.n	800cb78 <sbrk_aligned+0x24>
 800cb86:	1a29      	subs	r1, r5, r0
 800cb88:	0020      	movs	r0, r4
 800cb8a:	f000 fe73 	bl	800d874 <_sbrk_r>
 800cb8e:	3001      	adds	r0, #1
 800cb90:	d1f2      	bne.n	800cb78 <sbrk_aligned+0x24>
 800cb92:	e7ef      	b.n	800cb74 <sbrk_aligned+0x20>
 800cb94:	200005cc 	.word	0x200005cc

0800cb98 <_malloc_r>:
 800cb98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb9a:	2203      	movs	r2, #3
 800cb9c:	1ccb      	adds	r3, r1, #3
 800cb9e:	4393      	bics	r3, r2
 800cba0:	3308      	adds	r3, #8
 800cba2:	0005      	movs	r5, r0
 800cba4:	001f      	movs	r7, r3
 800cba6:	2b0c      	cmp	r3, #12
 800cba8:	d234      	bcs.n	800cc14 <_malloc_r+0x7c>
 800cbaa:	270c      	movs	r7, #12
 800cbac:	42b9      	cmp	r1, r7
 800cbae:	d833      	bhi.n	800cc18 <_malloc_r+0x80>
 800cbb0:	0028      	movs	r0, r5
 800cbb2:	f000 f871 	bl	800cc98 <__malloc_lock>
 800cbb6:	4e37      	ldr	r6, [pc, #220]	@ (800cc94 <_malloc_r+0xfc>)
 800cbb8:	6833      	ldr	r3, [r6, #0]
 800cbba:	001c      	movs	r4, r3
 800cbbc:	2c00      	cmp	r4, #0
 800cbbe:	d12f      	bne.n	800cc20 <_malloc_r+0x88>
 800cbc0:	0039      	movs	r1, r7
 800cbc2:	0028      	movs	r0, r5
 800cbc4:	f7ff ffc6 	bl	800cb54 <sbrk_aligned>
 800cbc8:	0004      	movs	r4, r0
 800cbca:	1c43      	adds	r3, r0, #1
 800cbcc:	d15f      	bne.n	800cc8e <_malloc_r+0xf6>
 800cbce:	6834      	ldr	r4, [r6, #0]
 800cbd0:	9400      	str	r4, [sp, #0]
 800cbd2:	9b00      	ldr	r3, [sp, #0]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d14a      	bne.n	800cc6e <_malloc_r+0xd6>
 800cbd8:	2c00      	cmp	r4, #0
 800cbda:	d052      	beq.n	800cc82 <_malloc_r+0xea>
 800cbdc:	6823      	ldr	r3, [r4, #0]
 800cbde:	0028      	movs	r0, r5
 800cbe0:	18e3      	adds	r3, r4, r3
 800cbe2:	9900      	ldr	r1, [sp, #0]
 800cbe4:	9301      	str	r3, [sp, #4]
 800cbe6:	f000 fe45 	bl	800d874 <_sbrk_r>
 800cbea:	9b01      	ldr	r3, [sp, #4]
 800cbec:	4283      	cmp	r3, r0
 800cbee:	d148      	bne.n	800cc82 <_malloc_r+0xea>
 800cbf0:	6823      	ldr	r3, [r4, #0]
 800cbf2:	0028      	movs	r0, r5
 800cbf4:	1aff      	subs	r7, r7, r3
 800cbf6:	0039      	movs	r1, r7
 800cbf8:	f7ff ffac 	bl	800cb54 <sbrk_aligned>
 800cbfc:	3001      	adds	r0, #1
 800cbfe:	d040      	beq.n	800cc82 <_malloc_r+0xea>
 800cc00:	6823      	ldr	r3, [r4, #0]
 800cc02:	19db      	adds	r3, r3, r7
 800cc04:	6023      	str	r3, [r4, #0]
 800cc06:	6833      	ldr	r3, [r6, #0]
 800cc08:	685a      	ldr	r2, [r3, #4]
 800cc0a:	2a00      	cmp	r2, #0
 800cc0c:	d133      	bne.n	800cc76 <_malloc_r+0xde>
 800cc0e:	9b00      	ldr	r3, [sp, #0]
 800cc10:	6033      	str	r3, [r6, #0]
 800cc12:	e019      	b.n	800cc48 <_malloc_r+0xb0>
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	dac9      	bge.n	800cbac <_malloc_r+0x14>
 800cc18:	230c      	movs	r3, #12
 800cc1a:	602b      	str	r3, [r5, #0]
 800cc1c:	2000      	movs	r0, #0
 800cc1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cc20:	6821      	ldr	r1, [r4, #0]
 800cc22:	1bc9      	subs	r1, r1, r7
 800cc24:	d420      	bmi.n	800cc68 <_malloc_r+0xd0>
 800cc26:	290b      	cmp	r1, #11
 800cc28:	d90a      	bls.n	800cc40 <_malloc_r+0xa8>
 800cc2a:	19e2      	adds	r2, r4, r7
 800cc2c:	6027      	str	r7, [r4, #0]
 800cc2e:	42a3      	cmp	r3, r4
 800cc30:	d104      	bne.n	800cc3c <_malloc_r+0xa4>
 800cc32:	6032      	str	r2, [r6, #0]
 800cc34:	6863      	ldr	r3, [r4, #4]
 800cc36:	6011      	str	r1, [r2, #0]
 800cc38:	6053      	str	r3, [r2, #4]
 800cc3a:	e005      	b.n	800cc48 <_malloc_r+0xb0>
 800cc3c:	605a      	str	r2, [r3, #4]
 800cc3e:	e7f9      	b.n	800cc34 <_malloc_r+0x9c>
 800cc40:	6862      	ldr	r2, [r4, #4]
 800cc42:	42a3      	cmp	r3, r4
 800cc44:	d10e      	bne.n	800cc64 <_malloc_r+0xcc>
 800cc46:	6032      	str	r2, [r6, #0]
 800cc48:	0028      	movs	r0, r5
 800cc4a:	f000 f82d 	bl	800cca8 <__malloc_unlock>
 800cc4e:	0020      	movs	r0, r4
 800cc50:	2207      	movs	r2, #7
 800cc52:	300b      	adds	r0, #11
 800cc54:	1d23      	adds	r3, r4, #4
 800cc56:	4390      	bics	r0, r2
 800cc58:	1ac2      	subs	r2, r0, r3
 800cc5a:	4298      	cmp	r0, r3
 800cc5c:	d0df      	beq.n	800cc1e <_malloc_r+0x86>
 800cc5e:	1a1b      	subs	r3, r3, r0
 800cc60:	50a3      	str	r3, [r4, r2]
 800cc62:	e7dc      	b.n	800cc1e <_malloc_r+0x86>
 800cc64:	605a      	str	r2, [r3, #4]
 800cc66:	e7ef      	b.n	800cc48 <_malloc_r+0xb0>
 800cc68:	0023      	movs	r3, r4
 800cc6a:	6864      	ldr	r4, [r4, #4]
 800cc6c:	e7a6      	b.n	800cbbc <_malloc_r+0x24>
 800cc6e:	9c00      	ldr	r4, [sp, #0]
 800cc70:	6863      	ldr	r3, [r4, #4]
 800cc72:	9300      	str	r3, [sp, #0]
 800cc74:	e7ad      	b.n	800cbd2 <_malloc_r+0x3a>
 800cc76:	001a      	movs	r2, r3
 800cc78:	685b      	ldr	r3, [r3, #4]
 800cc7a:	42a3      	cmp	r3, r4
 800cc7c:	d1fb      	bne.n	800cc76 <_malloc_r+0xde>
 800cc7e:	2300      	movs	r3, #0
 800cc80:	e7da      	b.n	800cc38 <_malloc_r+0xa0>
 800cc82:	230c      	movs	r3, #12
 800cc84:	0028      	movs	r0, r5
 800cc86:	602b      	str	r3, [r5, #0]
 800cc88:	f000 f80e 	bl	800cca8 <__malloc_unlock>
 800cc8c:	e7c6      	b.n	800cc1c <_malloc_r+0x84>
 800cc8e:	6007      	str	r7, [r0, #0]
 800cc90:	e7da      	b.n	800cc48 <_malloc_r+0xb0>
 800cc92:	46c0      	nop			@ (mov r8, r8)
 800cc94:	200005d0 	.word	0x200005d0

0800cc98 <__malloc_lock>:
 800cc98:	b510      	push	{r4, lr}
 800cc9a:	4802      	ldr	r0, [pc, #8]	@ (800cca4 <__malloc_lock+0xc>)
 800cc9c:	f000 fe3b 	bl	800d916 <__retarget_lock_acquire_recursive>
 800cca0:	bd10      	pop	{r4, pc}
 800cca2:	46c0      	nop			@ (mov r8, r8)
 800cca4:	20000714 	.word	0x20000714

0800cca8 <__malloc_unlock>:
 800cca8:	b510      	push	{r4, lr}
 800ccaa:	4802      	ldr	r0, [pc, #8]	@ (800ccb4 <__malloc_unlock+0xc>)
 800ccac:	f000 fe34 	bl	800d918 <__retarget_lock_release_recursive>
 800ccb0:	bd10      	pop	{r4, pc}
 800ccb2:	46c0      	nop			@ (mov r8, r8)
 800ccb4:	20000714 	.word	0x20000714

0800ccb8 <__cvt>:
 800ccb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccba:	001f      	movs	r7, r3
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	0016      	movs	r6, r2
 800ccc0:	b08b      	sub	sp, #44	@ 0x2c
 800ccc2:	429f      	cmp	r7, r3
 800ccc4:	da04      	bge.n	800ccd0 <__cvt+0x18>
 800ccc6:	2180      	movs	r1, #128	@ 0x80
 800ccc8:	0609      	lsls	r1, r1, #24
 800ccca:	187b      	adds	r3, r7, r1
 800cccc:	001f      	movs	r7, r3
 800ccce:	232d      	movs	r3, #45	@ 0x2d
 800ccd0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ccd2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800ccd4:	7013      	strb	r3, [r2, #0]
 800ccd6:	2320      	movs	r3, #32
 800ccd8:	2203      	movs	r2, #3
 800ccda:	439d      	bics	r5, r3
 800ccdc:	2d46      	cmp	r5, #70	@ 0x46
 800ccde:	d007      	beq.n	800ccf0 <__cvt+0x38>
 800cce0:	002b      	movs	r3, r5
 800cce2:	3b45      	subs	r3, #69	@ 0x45
 800cce4:	4259      	negs	r1, r3
 800cce6:	414b      	adcs	r3, r1
 800cce8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800ccea:	3a01      	subs	r2, #1
 800ccec:	18cb      	adds	r3, r1, r3
 800ccee:	9310      	str	r3, [sp, #64]	@ 0x40
 800ccf0:	ab09      	add	r3, sp, #36	@ 0x24
 800ccf2:	9304      	str	r3, [sp, #16]
 800ccf4:	ab08      	add	r3, sp, #32
 800ccf6:	9303      	str	r3, [sp, #12]
 800ccf8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ccfa:	9200      	str	r2, [sp, #0]
 800ccfc:	9302      	str	r3, [sp, #8]
 800ccfe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cd00:	0032      	movs	r2, r6
 800cd02:	9301      	str	r3, [sp, #4]
 800cd04:	003b      	movs	r3, r7
 800cd06:	f000 fea1 	bl	800da4c <_dtoa_r>
 800cd0a:	0004      	movs	r4, r0
 800cd0c:	2d47      	cmp	r5, #71	@ 0x47
 800cd0e:	d11b      	bne.n	800cd48 <__cvt+0x90>
 800cd10:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cd12:	07db      	lsls	r3, r3, #31
 800cd14:	d511      	bpl.n	800cd3a <__cvt+0x82>
 800cd16:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cd18:	18c3      	adds	r3, r0, r3
 800cd1a:	9307      	str	r3, [sp, #28]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	2300      	movs	r3, #0
 800cd20:	0030      	movs	r0, r6
 800cd22:	0039      	movs	r1, r7
 800cd24:	f7f3 fb92 	bl	800044c <__aeabi_dcmpeq>
 800cd28:	2800      	cmp	r0, #0
 800cd2a:	d001      	beq.n	800cd30 <__cvt+0x78>
 800cd2c:	9b07      	ldr	r3, [sp, #28]
 800cd2e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd30:	2230      	movs	r2, #48	@ 0x30
 800cd32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd34:	9907      	ldr	r1, [sp, #28]
 800cd36:	428b      	cmp	r3, r1
 800cd38:	d320      	bcc.n	800cd7c <__cvt+0xc4>
 800cd3a:	0020      	movs	r0, r4
 800cd3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd3e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800cd40:	1b1b      	subs	r3, r3, r4
 800cd42:	6013      	str	r3, [r2, #0]
 800cd44:	b00b      	add	sp, #44	@ 0x2c
 800cd46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd48:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cd4a:	18c3      	adds	r3, r0, r3
 800cd4c:	9307      	str	r3, [sp, #28]
 800cd4e:	2d46      	cmp	r5, #70	@ 0x46
 800cd50:	d1e4      	bne.n	800cd1c <__cvt+0x64>
 800cd52:	7803      	ldrb	r3, [r0, #0]
 800cd54:	2b30      	cmp	r3, #48	@ 0x30
 800cd56:	d10c      	bne.n	800cd72 <__cvt+0xba>
 800cd58:	2200      	movs	r2, #0
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	0030      	movs	r0, r6
 800cd5e:	0039      	movs	r1, r7
 800cd60:	f7f3 fb74 	bl	800044c <__aeabi_dcmpeq>
 800cd64:	2800      	cmp	r0, #0
 800cd66:	d104      	bne.n	800cd72 <__cvt+0xba>
 800cd68:	2301      	movs	r3, #1
 800cd6a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800cd6c:	1a9b      	subs	r3, r3, r2
 800cd6e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cd70:	6013      	str	r3, [r2, #0]
 800cd72:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cd74:	9a07      	ldr	r2, [sp, #28]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	18d3      	adds	r3, r2, r3
 800cd7a:	e7ce      	b.n	800cd1a <__cvt+0x62>
 800cd7c:	1c59      	adds	r1, r3, #1
 800cd7e:	9109      	str	r1, [sp, #36]	@ 0x24
 800cd80:	701a      	strb	r2, [r3, #0]
 800cd82:	e7d6      	b.n	800cd32 <__cvt+0x7a>

0800cd84 <__exponent>:
 800cd84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd86:	232b      	movs	r3, #43	@ 0x2b
 800cd88:	0005      	movs	r5, r0
 800cd8a:	000c      	movs	r4, r1
 800cd8c:	b085      	sub	sp, #20
 800cd8e:	7002      	strb	r2, [r0, #0]
 800cd90:	2900      	cmp	r1, #0
 800cd92:	da01      	bge.n	800cd98 <__exponent+0x14>
 800cd94:	424c      	negs	r4, r1
 800cd96:	3302      	adds	r3, #2
 800cd98:	706b      	strb	r3, [r5, #1]
 800cd9a:	2c09      	cmp	r4, #9
 800cd9c:	dd2c      	ble.n	800cdf8 <__exponent+0x74>
 800cd9e:	ab02      	add	r3, sp, #8
 800cda0:	1dde      	adds	r6, r3, #7
 800cda2:	0020      	movs	r0, r4
 800cda4:	210a      	movs	r1, #10
 800cda6:	f7f3 fb3b 	bl	8000420 <__aeabi_idivmod>
 800cdaa:	0037      	movs	r7, r6
 800cdac:	3130      	adds	r1, #48	@ 0x30
 800cdae:	3e01      	subs	r6, #1
 800cdb0:	0020      	movs	r0, r4
 800cdb2:	7031      	strb	r1, [r6, #0]
 800cdb4:	210a      	movs	r1, #10
 800cdb6:	9401      	str	r4, [sp, #4]
 800cdb8:	f7f3 fa4c 	bl	8000254 <__divsi3>
 800cdbc:	9b01      	ldr	r3, [sp, #4]
 800cdbe:	0004      	movs	r4, r0
 800cdc0:	2b63      	cmp	r3, #99	@ 0x63
 800cdc2:	dcee      	bgt.n	800cda2 <__exponent+0x1e>
 800cdc4:	1eba      	subs	r2, r7, #2
 800cdc6:	1ca8      	adds	r0, r5, #2
 800cdc8:	0001      	movs	r1, r0
 800cdca:	0013      	movs	r3, r2
 800cdcc:	3430      	adds	r4, #48	@ 0x30
 800cdce:	7014      	strb	r4, [r2, #0]
 800cdd0:	ac02      	add	r4, sp, #8
 800cdd2:	3407      	adds	r4, #7
 800cdd4:	429c      	cmp	r4, r3
 800cdd6:	d80a      	bhi.n	800cdee <__exponent+0x6a>
 800cdd8:	2300      	movs	r3, #0
 800cdda:	42a2      	cmp	r2, r4
 800cddc:	d803      	bhi.n	800cde6 <__exponent+0x62>
 800cdde:	3309      	adds	r3, #9
 800cde0:	aa02      	add	r2, sp, #8
 800cde2:	189b      	adds	r3, r3, r2
 800cde4:	1bdb      	subs	r3, r3, r7
 800cde6:	18c0      	adds	r0, r0, r3
 800cde8:	1b40      	subs	r0, r0, r5
 800cdea:	b005      	add	sp, #20
 800cdec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdee:	781c      	ldrb	r4, [r3, #0]
 800cdf0:	3301      	adds	r3, #1
 800cdf2:	700c      	strb	r4, [r1, #0]
 800cdf4:	3101      	adds	r1, #1
 800cdf6:	e7eb      	b.n	800cdd0 <__exponent+0x4c>
 800cdf8:	2330      	movs	r3, #48	@ 0x30
 800cdfa:	18e4      	adds	r4, r4, r3
 800cdfc:	70ab      	strb	r3, [r5, #2]
 800cdfe:	1d28      	adds	r0, r5, #4
 800ce00:	70ec      	strb	r4, [r5, #3]
 800ce02:	e7f1      	b.n	800cde8 <__exponent+0x64>

0800ce04 <_printf_float>:
 800ce04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce06:	b097      	sub	sp, #92	@ 0x5c
 800ce08:	000d      	movs	r5, r1
 800ce0a:	920a      	str	r2, [sp, #40]	@ 0x28
 800ce0c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800ce0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ce10:	9009      	str	r0, [sp, #36]	@ 0x24
 800ce12:	f000 fcf1 	bl	800d7f8 <_localeconv_r>
 800ce16:	6803      	ldr	r3, [r0, #0]
 800ce18:	0018      	movs	r0, r3
 800ce1a:	930d      	str	r3, [sp, #52]	@ 0x34
 800ce1c:	f7f3 f974 	bl	8000108 <strlen>
 800ce20:	2300      	movs	r3, #0
 800ce22:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ce24:	9314      	str	r3, [sp, #80]	@ 0x50
 800ce26:	7e2b      	ldrb	r3, [r5, #24]
 800ce28:	2207      	movs	r2, #7
 800ce2a:	930c      	str	r3, [sp, #48]	@ 0x30
 800ce2c:	682b      	ldr	r3, [r5, #0]
 800ce2e:	930e      	str	r3, [sp, #56]	@ 0x38
 800ce30:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ce32:	6823      	ldr	r3, [r4, #0]
 800ce34:	05c9      	lsls	r1, r1, #23
 800ce36:	d545      	bpl.n	800cec4 <_printf_float+0xc0>
 800ce38:	189b      	adds	r3, r3, r2
 800ce3a:	4393      	bics	r3, r2
 800ce3c:	001a      	movs	r2, r3
 800ce3e:	3208      	adds	r2, #8
 800ce40:	6022      	str	r2, [r4, #0]
 800ce42:	2201      	movs	r2, #1
 800ce44:	681e      	ldr	r6, [r3, #0]
 800ce46:	685f      	ldr	r7, [r3, #4]
 800ce48:	007b      	lsls	r3, r7, #1
 800ce4a:	085b      	lsrs	r3, r3, #1
 800ce4c:	9311      	str	r3, [sp, #68]	@ 0x44
 800ce4e:	9610      	str	r6, [sp, #64]	@ 0x40
 800ce50:	64ae      	str	r6, [r5, #72]	@ 0x48
 800ce52:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800ce54:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ce56:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800ce58:	4ba7      	ldr	r3, [pc, #668]	@ (800d0f8 <_printf_float+0x2f4>)
 800ce5a:	4252      	negs	r2, r2
 800ce5c:	f7f5 fa58 	bl	8002310 <__aeabi_dcmpun>
 800ce60:	2800      	cmp	r0, #0
 800ce62:	d131      	bne.n	800cec8 <_printf_float+0xc4>
 800ce64:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ce66:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800ce68:	2201      	movs	r2, #1
 800ce6a:	4ba3      	ldr	r3, [pc, #652]	@ (800d0f8 <_printf_float+0x2f4>)
 800ce6c:	4252      	negs	r2, r2
 800ce6e:	f7f3 fafd 	bl	800046c <__aeabi_dcmple>
 800ce72:	2800      	cmp	r0, #0
 800ce74:	d128      	bne.n	800cec8 <_printf_float+0xc4>
 800ce76:	2200      	movs	r2, #0
 800ce78:	2300      	movs	r3, #0
 800ce7a:	0030      	movs	r0, r6
 800ce7c:	0039      	movs	r1, r7
 800ce7e:	f7f3 faeb 	bl	8000458 <__aeabi_dcmplt>
 800ce82:	2800      	cmp	r0, #0
 800ce84:	d003      	beq.n	800ce8e <_printf_float+0x8a>
 800ce86:	002b      	movs	r3, r5
 800ce88:	222d      	movs	r2, #45	@ 0x2d
 800ce8a:	3343      	adds	r3, #67	@ 0x43
 800ce8c:	701a      	strb	r2, [r3, #0]
 800ce8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ce90:	4f9a      	ldr	r7, [pc, #616]	@ (800d0fc <_printf_float+0x2f8>)
 800ce92:	2b47      	cmp	r3, #71	@ 0x47
 800ce94:	d900      	bls.n	800ce98 <_printf_float+0x94>
 800ce96:	4f9a      	ldr	r7, [pc, #616]	@ (800d100 <_printf_float+0x2fc>)
 800ce98:	2303      	movs	r3, #3
 800ce9a:	2400      	movs	r4, #0
 800ce9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ce9e:	612b      	str	r3, [r5, #16]
 800cea0:	3301      	adds	r3, #1
 800cea2:	439a      	bics	r2, r3
 800cea4:	602a      	str	r2, [r5, #0]
 800cea6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cea8:	0029      	movs	r1, r5
 800ceaa:	9300      	str	r3, [sp, #0]
 800ceac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ceae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ceb0:	aa15      	add	r2, sp, #84	@ 0x54
 800ceb2:	f000 f9e5 	bl	800d280 <_printf_common>
 800ceb6:	3001      	adds	r0, #1
 800ceb8:	d000      	beq.n	800cebc <_printf_float+0xb8>
 800ceba:	e09f      	b.n	800cffc <_printf_float+0x1f8>
 800cebc:	2001      	movs	r0, #1
 800cebe:	4240      	negs	r0, r0
 800cec0:	b017      	add	sp, #92	@ 0x5c
 800cec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cec4:	3307      	adds	r3, #7
 800cec6:	e7b8      	b.n	800ce3a <_printf_float+0x36>
 800cec8:	0032      	movs	r2, r6
 800ceca:	003b      	movs	r3, r7
 800cecc:	0030      	movs	r0, r6
 800cece:	0039      	movs	r1, r7
 800ced0:	f7f5 fa1e 	bl	8002310 <__aeabi_dcmpun>
 800ced4:	2800      	cmp	r0, #0
 800ced6:	d00b      	beq.n	800cef0 <_printf_float+0xec>
 800ced8:	2f00      	cmp	r7, #0
 800ceda:	da03      	bge.n	800cee4 <_printf_float+0xe0>
 800cedc:	002b      	movs	r3, r5
 800cede:	222d      	movs	r2, #45	@ 0x2d
 800cee0:	3343      	adds	r3, #67	@ 0x43
 800cee2:	701a      	strb	r2, [r3, #0]
 800cee4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cee6:	4f87      	ldr	r7, [pc, #540]	@ (800d104 <_printf_float+0x300>)
 800cee8:	2b47      	cmp	r3, #71	@ 0x47
 800ceea:	d9d5      	bls.n	800ce98 <_printf_float+0x94>
 800ceec:	4f86      	ldr	r7, [pc, #536]	@ (800d108 <_printf_float+0x304>)
 800ceee:	e7d3      	b.n	800ce98 <_printf_float+0x94>
 800cef0:	2220      	movs	r2, #32
 800cef2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800cef4:	686b      	ldr	r3, [r5, #4]
 800cef6:	4394      	bics	r4, r2
 800cef8:	1c5a      	adds	r2, r3, #1
 800cefa:	d146      	bne.n	800cf8a <_printf_float+0x186>
 800cefc:	3307      	adds	r3, #7
 800cefe:	606b      	str	r3, [r5, #4]
 800cf00:	2380      	movs	r3, #128	@ 0x80
 800cf02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cf04:	00db      	lsls	r3, r3, #3
 800cf06:	4313      	orrs	r3, r2
 800cf08:	2200      	movs	r2, #0
 800cf0a:	602b      	str	r3, [r5, #0]
 800cf0c:	9206      	str	r2, [sp, #24]
 800cf0e:	aa14      	add	r2, sp, #80	@ 0x50
 800cf10:	9205      	str	r2, [sp, #20]
 800cf12:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cf14:	a90a      	add	r1, sp, #40	@ 0x28
 800cf16:	9204      	str	r2, [sp, #16]
 800cf18:	aa13      	add	r2, sp, #76	@ 0x4c
 800cf1a:	9203      	str	r2, [sp, #12]
 800cf1c:	2223      	movs	r2, #35	@ 0x23
 800cf1e:	1852      	adds	r2, r2, r1
 800cf20:	9202      	str	r2, [sp, #8]
 800cf22:	9301      	str	r3, [sp, #4]
 800cf24:	686b      	ldr	r3, [r5, #4]
 800cf26:	0032      	movs	r2, r6
 800cf28:	9300      	str	r3, [sp, #0]
 800cf2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf2c:	003b      	movs	r3, r7
 800cf2e:	f7ff fec3 	bl	800ccb8 <__cvt>
 800cf32:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cf34:	0007      	movs	r7, r0
 800cf36:	2c47      	cmp	r4, #71	@ 0x47
 800cf38:	d12d      	bne.n	800cf96 <_printf_float+0x192>
 800cf3a:	1cd3      	adds	r3, r2, #3
 800cf3c:	db02      	blt.n	800cf44 <_printf_float+0x140>
 800cf3e:	686b      	ldr	r3, [r5, #4]
 800cf40:	429a      	cmp	r2, r3
 800cf42:	dd48      	ble.n	800cfd6 <_printf_float+0x1d2>
 800cf44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cf46:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800cf48:	3b02      	subs	r3, #2
 800cf4a:	b2db      	uxtb	r3, r3
 800cf4c:	930c      	str	r3, [sp, #48]	@ 0x30
 800cf4e:	0028      	movs	r0, r5
 800cf50:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cf52:	3901      	subs	r1, #1
 800cf54:	3050      	adds	r0, #80	@ 0x50
 800cf56:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cf58:	f7ff ff14 	bl	800cd84 <__exponent>
 800cf5c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800cf5e:	0004      	movs	r4, r0
 800cf60:	1813      	adds	r3, r2, r0
 800cf62:	612b      	str	r3, [r5, #16]
 800cf64:	2a01      	cmp	r2, #1
 800cf66:	dc02      	bgt.n	800cf6e <_printf_float+0x16a>
 800cf68:	682a      	ldr	r2, [r5, #0]
 800cf6a:	07d2      	lsls	r2, r2, #31
 800cf6c:	d501      	bpl.n	800cf72 <_printf_float+0x16e>
 800cf6e:	3301      	adds	r3, #1
 800cf70:	612b      	str	r3, [r5, #16]
 800cf72:	2323      	movs	r3, #35	@ 0x23
 800cf74:	aa0a      	add	r2, sp, #40	@ 0x28
 800cf76:	189b      	adds	r3, r3, r2
 800cf78:	781b      	ldrb	r3, [r3, #0]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d100      	bne.n	800cf80 <_printf_float+0x17c>
 800cf7e:	e792      	b.n	800cea6 <_printf_float+0xa2>
 800cf80:	002b      	movs	r3, r5
 800cf82:	222d      	movs	r2, #45	@ 0x2d
 800cf84:	3343      	adds	r3, #67	@ 0x43
 800cf86:	701a      	strb	r2, [r3, #0]
 800cf88:	e78d      	b.n	800cea6 <_printf_float+0xa2>
 800cf8a:	2c47      	cmp	r4, #71	@ 0x47
 800cf8c:	d1b8      	bne.n	800cf00 <_printf_float+0xfc>
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d1b6      	bne.n	800cf00 <_printf_float+0xfc>
 800cf92:	3301      	adds	r3, #1
 800cf94:	e7b3      	b.n	800cefe <_printf_float+0xfa>
 800cf96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cf98:	0011      	movs	r1, r2
 800cf9a:	2b65      	cmp	r3, #101	@ 0x65
 800cf9c:	d9d7      	bls.n	800cf4e <_printf_float+0x14a>
 800cf9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cfa0:	2b66      	cmp	r3, #102	@ 0x66
 800cfa2:	d11a      	bne.n	800cfda <_printf_float+0x1d6>
 800cfa4:	686b      	ldr	r3, [r5, #4]
 800cfa6:	2a00      	cmp	r2, #0
 800cfa8:	dd09      	ble.n	800cfbe <_printf_float+0x1ba>
 800cfaa:	612a      	str	r2, [r5, #16]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d102      	bne.n	800cfb6 <_printf_float+0x1b2>
 800cfb0:	6829      	ldr	r1, [r5, #0]
 800cfb2:	07c9      	lsls	r1, r1, #31
 800cfb4:	d50b      	bpl.n	800cfce <_printf_float+0x1ca>
 800cfb6:	3301      	adds	r3, #1
 800cfb8:	189b      	adds	r3, r3, r2
 800cfba:	612b      	str	r3, [r5, #16]
 800cfbc:	e007      	b.n	800cfce <_printf_float+0x1ca>
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d103      	bne.n	800cfca <_printf_float+0x1c6>
 800cfc2:	2201      	movs	r2, #1
 800cfc4:	6829      	ldr	r1, [r5, #0]
 800cfc6:	4211      	tst	r1, r2
 800cfc8:	d000      	beq.n	800cfcc <_printf_float+0x1c8>
 800cfca:	1c9a      	adds	r2, r3, #2
 800cfcc:	612a      	str	r2, [r5, #16]
 800cfce:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cfd0:	2400      	movs	r4, #0
 800cfd2:	65ab      	str	r3, [r5, #88]	@ 0x58
 800cfd4:	e7cd      	b.n	800cf72 <_printf_float+0x16e>
 800cfd6:	2367      	movs	r3, #103	@ 0x67
 800cfd8:	930c      	str	r3, [sp, #48]	@ 0x30
 800cfda:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800cfdc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cfde:	4299      	cmp	r1, r3
 800cfe0:	db06      	blt.n	800cff0 <_printf_float+0x1ec>
 800cfe2:	682b      	ldr	r3, [r5, #0]
 800cfe4:	6129      	str	r1, [r5, #16]
 800cfe6:	07db      	lsls	r3, r3, #31
 800cfe8:	d5f1      	bpl.n	800cfce <_printf_float+0x1ca>
 800cfea:	3101      	adds	r1, #1
 800cfec:	6129      	str	r1, [r5, #16]
 800cfee:	e7ee      	b.n	800cfce <_printf_float+0x1ca>
 800cff0:	2201      	movs	r2, #1
 800cff2:	2900      	cmp	r1, #0
 800cff4:	dce0      	bgt.n	800cfb8 <_printf_float+0x1b4>
 800cff6:	1892      	adds	r2, r2, r2
 800cff8:	1a52      	subs	r2, r2, r1
 800cffa:	e7dd      	b.n	800cfb8 <_printf_float+0x1b4>
 800cffc:	682a      	ldr	r2, [r5, #0]
 800cffe:	0553      	lsls	r3, r2, #21
 800d000:	d408      	bmi.n	800d014 <_printf_float+0x210>
 800d002:	692b      	ldr	r3, [r5, #16]
 800d004:	003a      	movs	r2, r7
 800d006:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d008:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d00a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d00c:	47a0      	blx	r4
 800d00e:	3001      	adds	r0, #1
 800d010:	d129      	bne.n	800d066 <_printf_float+0x262>
 800d012:	e753      	b.n	800cebc <_printf_float+0xb8>
 800d014:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d016:	2b65      	cmp	r3, #101	@ 0x65
 800d018:	d800      	bhi.n	800d01c <_printf_float+0x218>
 800d01a:	e0da      	b.n	800d1d2 <_printf_float+0x3ce>
 800d01c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800d01e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d020:	2200      	movs	r2, #0
 800d022:	2300      	movs	r3, #0
 800d024:	f7f3 fa12 	bl	800044c <__aeabi_dcmpeq>
 800d028:	2800      	cmp	r0, #0
 800d02a:	d033      	beq.n	800d094 <_printf_float+0x290>
 800d02c:	2301      	movs	r3, #1
 800d02e:	4a37      	ldr	r2, [pc, #220]	@ (800d10c <_printf_float+0x308>)
 800d030:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d032:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d034:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d036:	47a0      	blx	r4
 800d038:	3001      	adds	r0, #1
 800d03a:	d100      	bne.n	800d03e <_printf_float+0x23a>
 800d03c:	e73e      	b.n	800cebc <_printf_float+0xb8>
 800d03e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800d040:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d042:	42b3      	cmp	r3, r6
 800d044:	db02      	blt.n	800d04c <_printf_float+0x248>
 800d046:	682b      	ldr	r3, [r5, #0]
 800d048:	07db      	lsls	r3, r3, #31
 800d04a:	d50c      	bpl.n	800d066 <_printf_float+0x262>
 800d04c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d04e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d050:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d052:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d054:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d056:	47a0      	blx	r4
 800d058:	2400      	movs	r4, #0
 800d05a:	3001      	adds	r0, #1
 800d05c:	d100      	bne.n	800d060 <_printf_float+0x25c>
 800d05e:	e72d      	b.n	800cebc <_printf_float+0xb8>
 800d060:	1e73      	subs	r3, r6, #1
 800d062:	42a3      	cmp	r3, r4
 800d064:	dc0a      	bgt.n	800d07c <_printf_float+0x278>
 800d066:	682b      	ldr	r3, [r5, #0]
 800d068:	079b      	lsls	r3, r3, #30
 800d06a:	d500      	bpl.n	800d06e <_printf_float+0x26a>
 800d06c:	e105      	b.n	800d27a <_printf_float+0x476>
 800d06e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d070:	68e8      	ldr	r0, [r5, #12]
 800d072:	4298      	cmp	r0, r3
 800d074:	db00      	blt.n	800d078 <_printf_float+0x274>
 800d076:	e723      	b.n	800cec0 <_printf_float+0xbc>
 800d078:	0018      	movs	r0, r3
 800d07a:	e721      	b.n	800cec0 <_printf_float+0xbc>
 800d07c:	002a      	movs	r2, r5
 800d07e:	2301      	movs	r3, #1
 800d080:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d082:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d084:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d086:	321a      	adds	r2, #26
 800d088:	47b8      	blx	r7
 800d08a:	3001      	adds	r0, #1
 800d08c:	d100      	bne.n	800d090 <_printf_float+0x28c>
 800d08e:	e715      	b.n	800cebc <_printf_float+0xb8>
 800d090:	3401      	adds	r4, #1
 800d092:	e7e5      	b.n	800d060 <_printf_float+0x25c>
 800d094:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d096:	2b00      	cmp	r3, #0
 800d098:	dc3a      	bgt.n	800d110 <_printf_float+0x30c>
 800d09a:	2301      	movs	r3, #1
 800d09c:	4a1b      	ldr	r2, [pc, #108]	@ (800d10c <_printf_float+0x308>)
 800d09e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d0a0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d0a2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d0a4:	47a0      	blx	r4
 800d0a6:	3001      	adds	r0, #1
 800d0a8:	d100      	bne.n	800d0ac <_printf_float+0x2a8>
 800d0aa:	e707      	b.n	800cebc <_printf_float+0xb8>
 800d0ac:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800d0ae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d0b0:	4333      	orrs	r3, r6
 800d0b2:	d102      	bne.n	800d0ba <_printf_float+0x2b6>
 800d0b4:	682b      	ldr	r3, [r5, #0]
 800d0b6:	07db      	lsls	r3, r3, #31
 800d0b8:	d5d5      	bpl.n	800d066 <_printf_float+0x262>
 800d0ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d0be:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d0c0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d0c2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d0c4:	47a0      	blx	r4
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	3001      	adds	r0, #1
 800d0ca:	d100      	bne.n	800d0ce <_printf_float+0x2ca>
 800d0cc:	e6f6      	b.n	800cebc <_printf_float+0xb8>
 800d0ce:	930c      	str	r3, [sp, #48]	@ 0x30
 800d0d0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d0d2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d0d4:	425b      	negs	r3, r3
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	dc01      	bgt.n	800d0de <_printf_float+0x2da>
 800d0da:	0033      	movs	r3, r6
 800d0dc:	e792      	b.n	800d004 <_printf_float+0x200>
 800d0de:	002a      	movs	r2, r5
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d0e4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d0e6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d0e8:	321a      	adds	r2, #26
 800d0ea:	47a0      	blx	r4
 800d0ec:	3001      	adds	r0, #1
 800d0ee:	d100      	bne.n	800d0f2 <_printf_float+0x2ee>
 800d0f0:	e6e4      	b.n	800cebc <_printf_float+0xb8>
 800d0f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d0f4:	3301      	adds	r3, #1
 800d0f6:	e7ea      	b.n	800d0ce <_printf_float+0x2ca>
 800d0f8:	7fefffff 	.word	0x7fefffff
 800d0fc:	0801997c 	.word	0x0801997c
 800d100:	08019980 	.word	0x08019980
 800d104:	08019984 	.word	0x08019984
 800d108:	08019988 	.word	0x08019988
 800d10c:	0801998c 	.word	0x0801998c
 800d110:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d112:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800d114:	930c      	str	r3, [sp, #48]	@ 0x30
 800d116:	429e      	cmp	r6, r3
 800d118:	dd00      	ble.n	800d11c <_printf_float+0x318>
 800d11a:	001e      	movs	r6, r3
 800d11c:	2e00      	cmp	r6, #0
 800d11e:	dc31      	bgt.n	800d184 <_printf_float+0x380>
 800d120:	43f3      	mvns	r3, r6
 800d122:	2400      	movs	r4, #0
 800d124:	17db      	asrs	r3, r3, #31
 800d126:	4033      	ands	r3, r6
 800d128:	930e      	str	r3, [sp, #56]	@ 0x38
 800d12a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800d12c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d12e:	1af3      	subs	r3, r6, r3
 800d130:	42a3      	cmp	r3, r4
 800d132:	dc30      	bgt.n	800d196 <_printf_float+0x392>
 800d134:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d136:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d138:	429a      	cmp	r2, r3
 800d13a:	dc38      	bgt.n	800d1ae <_printf_float+0x3aa>
 800d13c:	682b      	ldr	r3, [r5, #0]
 800d13e:	07db      	lsls	r3, r3, #31
 800d140:	d435      	bmi.n	800d1ae <_printf_float+0x3aa>
 800d142:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800d144:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d146:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d148:	1b9b      	subs	r3, r3, r6
 800d14a:	1b14      	subs	r4, r2, r4
 800d14c:	429c      	cmp	r4, r3
 800d14e:	dd00      	ble.n	800d152 <_printf_float+0x34e>
 800d150:	001c      	movs	r4, r3
 800d152:	2c00      	cmp	r4, #0
 800d154:	dc34      	bgt.n	800d1c0 <_printf_float+0x3bc>
 800d156:	43e3      	mvns	r3, r4
 800d158:	2600      	movs	r6, #0
 800d15a:	17db      	asrs	r3, r3, #31
 800d15c:	401c      	ands	r4, r3
 800d15e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d160:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d162:	1ad3      	subs	r3, r2, r3
 800d164:	1b1b      	subs	r3, r3, r4
 800d166:	42b3      	cmp	r3, r6
 800d168:	dc00      	bgt.n	800d16c <_printf_float+0x368>
 800d16a:	e77c      	b.n	800d066 <_printf_float+0x262>
 800d16c:	002a      	movs	r2, r5
 800d16e:	2301      	movs	r3, #1
 800d170:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d172:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d174:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d176:	321a      	adds	r2, #26
 800d178:	47b8      	blx	r7
 800d17a:	3001      	adds	r0, #1
 800d17c:	d100      	bne.n	800d180 <_printf_float+0x37c>
 800d17e:	e69d      	b.n	800cebc <_printf_float+0xb8>
 800d180:	3601      	adds	r6, #1
 800d182:	e7ec      	b.n	800d15e <_printf_float+0x35a>
 800d184:	0033      	movs	r3, r6
 800d186:	003a      	movs	r2, r7
 800d188:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d18a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d18c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d18e:	47a0      	blx	r4
 800d190:	3001      	adds	r0, #1
 800d192:	d1c5      	bne.n	800d120 <_printf_float+0x31c>
 800d194:	e692      	b.n	800cebc <_printf_float+0xb8>
 800d196:	002a      	movs	r2, r5
 800d198:	2301      	movs	r3, #1
 800d19a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d19c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d19e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d1a0:	321a      	adds	r2, #26
 800d1a2:	47b0      	blx	r6
 800d1a4:	3001      	adds	r0, #1
 800d1a6:	d100      	bne.n	800d1aa <_printf_float+0x3a6>
 800d1a8:	e688      	b.n	800cebc <_printf_float+0xb8>
 800d1aa:	3401      	adds	r4, #1
 800d1ac:	e7bd      	b.n	800d12a <_printf_float+0x326>
 800d1ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d1b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d1b4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d1b6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d1b8:	47a0      	blx	r4
 800d1ba:	3001      	adds	r0, #1
 800d1bc:	d1c1      	bne.n	800d142 <_printf_float+0x33e>
 800d1be:	e67d      	b.n	800cebc <_printf_float+0xb8>
 800d1c0:	19ba      	adds	r2, r7, r6
 800d1c2:	0023      	movs	r3, r4
 800d1c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d1c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d1c8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d1ca:	47b0      	blx	r6
 800d1cc:	3001      	adds	r0, #1
 800d1ce:	d1c2      	bne.n	800d156 <_printf_float+0x352>
 800d1d0:	e674      	b.n	800cebc <_printf_float+0xb8>
 800d1d2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d1d4:	930c      	str	r3, [sp, #48]	@ 0x30
 800d1d6:	2b01      	cmp	r3, #1
 800d1d8:	dc02      	bgt.n	800d1e0 <_printf_float+0x3dc>
 800d1da:	2301      	movs	r3, #1
 800d1dc:	421a      	tst	r2, r3
 800d1de:	d039      	beq.n	800d254 <_printf_float+0x450>
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	003a      	movs	r2, r7
 800d1e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d1e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d1e8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d1ea:	47b0      	blx	r6
 800d1ec:	3001      	adds	r0, #1
 800d1ee:	d100      	bne.n	800d1f2 <_printf_float+0x3ee>
 800d1f0:	e664      	b.n	800cebc <_printf_float+0xb8>
 800d1f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d1f6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d1f8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d1fa:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d1fc:	47b0      	blx	r6
 800d1fe:	3001      	adds	r0, #1
 800d200:	d100      	bne.n	800d204 <_printf_float+0x400>
 800d202:	e65b      	b.n	800cebc <_printf_float+0xb8>
 800d204:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800d206:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d208:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d20a:	2200      	movs	r2, #0
 800d20c:	3b01      	subs	r3, #1
 800d20e:	930c      	str	r3, [sp, #48]	@ 0x30
 800d210:	2300      	movs	r3, #0
 800d212:	f7f3 f91b 	bl	800044c <__aeabi_dcmpeq>
 800d216:	2800      	cmp	r0, #0
 800d218:	d11a      	bne.n	800d250 <_printf_float+0x44c>
 800d21a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d21c:	1c7a      	adds	r2, r7, #1
 800d21e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d220:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d222:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d224:	47b0      	blx	r6
 800d226:	3001      	adds	r0, #1
 800d228:	d10e      	bne.n	800d248 <_printf_float+0x444>
 800d22a:	e647      	b.n	800cebc <_printf_float+0xb8>
 800d22c:	002a      	movs	r2, r5
 800d22e:	2301      	movs	r3, #1
 800d230:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d232:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d234:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d236:	321a      	adds	r2, #26
 800d238:	47b8      	blx	r7
 800d23a:	3001      	adds	r0, #1
 800d23c:	d100      	bne.n	800d240 <_printf_float+0x43c>
 800d23e:	e63d      	b.n	800cebc <_printf_float+0xb8>
 800d240:	3601      	adds	r6, #1
 800d242:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d244:	429e      	cmp	r6, r3
 800d246:	dbf1      	blt.n	800d22c <_printf_float+0x428>
 800d248:	002a      	movs	r2, r5
 800d24a:	0023      	movs	r3, r4
 800d24c:	3250      	adds	r2, #80	@ 0x50
 800d24e:	e6da      	b.n	800d006 <_printf_float+0x202>
 800d250:	2600      	movs	r6, #0
 800d252:	e7f6      	b.n	800d242 <_printf_float+0x43e>
 800d254:	003a      	movs	r2, r7
 800d256:	e7e2      	b.n	800d21e <_printf_float+0x41a>
 800d258:	002a      	movs	r2, r5
 800d25a:	2301      	movs	r3, #1
 800d25c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d25e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d260:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d262:	3219      	adds	r2, #25
 800d264:	47b0      	blx	r6
 800d266:	3001      	adds	r0, #1
 800d268:	d100      	bne.n	800d26c <_printf_float+0x468>
 800d26a:	e627      	b.n	800cebc <_printf_float+0xb8>
 800d26c:	3401      	adds	r4, #1
 800d26e:	68eb      	ldr	r3, [r5, #12]
 800d270:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800d272:	1a9b      	subs	r3, r3, r2
 800d274:	42a3      	cmp	r3, r4
 800d276:	dcef      	bgt.n	800d258 <_printf_float+0x454>
 800d278:	e6f9      	b.n	800d06e <_printf_float+0x26a>
 800d27a:	2400      	movs	r4, #0
 800d27c:	e7f7      	b.n	800d26e <_printf_float+0x46a>
 800d27e:	46c0      	nop			@ (mov r8, r8)

0800d280 <_printf_common>:
 800d280:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d282:	0016      	movs	r6, r2
 800d284:	9301      	str	r3, [sp, #4]
 800d286:	688a      	ldr	r2, [r1, #8]
 800d288:	690b      	ldr	r3, [r1, #16]
 800d28a:	000c      	movs	r4, r1
 800d28c:	9000      	str	r0, [sp, #0]
 800d28e:	4293      	cmp	r3, r2
 800d290:	da00      	bge.n	800d294 <_printf_common+0x14>
 800d292:	0013      	movs	r3, r2
 800d294:	0022      	movs	r2, r4
 800d296:	6033      	str	r3, [r6, #0]
 800d298:	3243      	adds	r2, #67	@ 0x43
 800d29a:	7812      	ldrb	r2, [r2, #0]
 800d29c:	2a00      	cmp	r2, #0
 800d29e:	d001      	beq.n	800d2a4 <_printf_common+0x24>
 800d2a0:	3301      	adds	r3, #1
 800d2a2:	6033      	str	r3, [r6, #0]
 800d2a4:	6823      	ldr	r3, [r4, #0]
 800d2a6:	069b      	lsls	r3, r3, #26
 800d2a8:	d502      	bpl.n	800d2b0 <_printf_common+0x30>
 800d2aa:	6833      	ldr	r3, [r6, #0]
 800d2ac:	3302      	adds	r3, #2
 800d2ae:	6033      	str	r3, [r6, #0]
 800d2b0:	6822      	ldr	r2, [r4, #0]
 800d2b2:	2306      	movs	r3, #6
 800d2b4:	0015      	movs	r5, r2
 800d2b6:	401d      	ands	r5, r3
 800d2b8:	421a      	tst	r2, r3
 800d2ba:	d027      	beq.n	800d30c <_printf_common+0x8c>
 800d2bc:	0023      	movs	r3, r4
 800d2be:	3343      	adds	r3, #67	@ 0x43
 800d2c0:	781b      	ldrb	r3, [r3, #0]
 800d2c2:	1e5a      	subs	r2, r3, #1
 800d2c4:	4193      	sbcs	r3, r2
 800d2c6:	6822      	ldr	r2, [r4, #0]
 800d2c8:	0692      	lsls	r2, r2, #26
 800d2ca:	d430      	bmi.n	800d32e <_printf_common+0xae>
 800d2cc:	0022      	movs	r2, r4
 800d2ce:	9901      	ldr	r1, [sp, #4]
 800d2d0:	9800      	ldr	r0, [sp, #0]
 800d2d2:	9d08      	ldr	r5, [sp, #32]
 800d2d4:	3243      	adds	r2, #67	@ 0x43
 800d2d6:	47a8      	blx	r5
 800d2d8:	3001      	adds	r0, #1
 800d2da:	d025      	beq.n	800d328 <_printf_common+0xa8>
 800d2dc:	2206      	movs	r2, #6
 800d2de:	6823      	ldr	r3, [r4, #0]
 800d2e0:	2500      	movs	r5, #0
 800d2e2:	4013      	ands	r3, r2
 800d2e4:	2b04      	cmp	r3, #4
 800d2e6:	d105      	bne.n	800d2f4 <_printf_common+0x74>
 800d2e8:	6833      	ldr	r3, [r6, #0]
 800d2ea:	68e5      	ldr	r5, [r4, #12]
 800d2ec:	1aed      	subs	r5, r5, r3
 800d2ee:	43eb      	mvns	r3, r5
 800d2f0:	17db      	asrs	r3, r3, #31
 800d2f2:	401d      	ands	r5, r3
 800d2f4:	68a3      	ldr	r3, [r4, #8]
 800d2f6:	6922      	ldr	r2, [r4, #16]
 800d2f8:	4293      	cmp	r3, r2
 800d2fa:	dd01      	ble.n	800d300 <_printf_common+0x80>
 800d2fc:	1a9b      	subs	r3, r3, r2
 800d2fe:	18ed      	adds	r5, r5, r3
 800d300:	2600      	movs	r6, #0
 800d302:	42b5      	cmp	r5, r6
 800d304:	d120      	bne.n	800d348 <_printf_common+0xc8>
 800d306:	2000      	movs	r0, #0
 800d308:	e010      	b.n	800d32c <_printf_common+0xac>
 800d30a:	3501      	adds	r5, #1
 800d30c:	68e3      	ldr	r3, [r4, #12]
 800d30e:	6832      	ldr	r2, [r6, #0]
 800d310:	1a9b      	subs	r3, r3, r2
 800d312:	42ab      	cmp	r3, r5
 800d314:	ddd2      	ble.n	800d2bc <_printf_common+0x3c>
 800d316:	0022      	movs	r2, r4
 800d318:	2301      	movs	r3, #1
 800d31a:	9901      	ldr	r1, [sp, #4]
 800d31c:	9800      	ldr	r0, [sp, #0]
 800d31e:	9f08      	ldr	r7, [sp, #32]
 800d320:	3219      	adds	r2, #25
 800d322:	47b8      	blx	r7
 800d324:	3001      	adds	r0, #1
 800d326:	d1f0      	bne.n	800d30a <_printf_common+0x8a>
 800d328:	2001      	movs	r0, #1
 800d32a:	4240      	negs	r0, r0
 800d32c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d32e:	2030      	movs	r0, #48	@ 0x30
 800d330:	18e1      	adds	r1, r4, r3
 800d332:	3143      	adds	r1, #67	@ 0x43
 800d334:	7008      	strb	r0, [r1, #0]
 800d336:	0021      	movs	r1, r4
 800d338:	1c5a      	adds	r2, r3, #1
 800d33a:	3145      	adds	r1, #69	@ 0x45
 800d33c:	7809      	ldrb	r1, [r1, #0]
 800d33e:	18a2      	adds	r2, r4, r2
 800d340:	3243      	adds	r2, #67	@ 0x43
 800d342:	3302      	adds	r3, #2
 800d344:	7011      	strb	r1, [r2, #0]
 800d346:	e7c1      	b.n	800d2cc <_printf_common+0x4c>
 800d348:	0022      	movs	r2, r4
 800d34a:	2301      	movs	r3, #1
 800d34c:	9901      	ldr	r1, [sp, #4]
 800d34e:	9800      	ldr	r0, [sp, #0]
 800d350:	9f08      	ldr	r7, [sp, #32]
 800d352:	321a      	adds	r2, #26
 800d354:	47b8      	blx	r7
 800d356:	3001      	adds	r0, #1
 800d358:	d0e6      	beq.n	800d328 <_printf_common+0xa8>
 800d35a:	3601      	adds	r6, #1
 800d35c:	e7d1      	b.n	800d302 <_printf_common+0x82>
	...

0800d360 <_printf_i>:
 800d360:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d362:	b08b      	sub	sp, #44	@ 0x2c
 800d364:	9206      	str	r2, [sp, #24]
 800d366:	000a      	movs	r2, r1
 800d368:	3243      	adds	r2, #67	@ 0x43
 800d36a:	9307      	str	r3, [sp, #28]
 800d36c:	9005      	str	r0, [sp, #20]
 800d36e:	9203      	str	r2, [sp, #12]
 800d370:	7e0a      	ldrb	r2, [r1, #24]
 800d372:	000c      	movs	r4, r1
 800d374:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d376:	2a78      	cmp	r2, #120	@ 0x78
 800d378:	d809      	bhi.n	800d38e <_printf_i+0x2e>
 800d37a:	2a62      	cmp	r2, #98	@ 0x62
 800d37c:	d80b      	bhi.n	800d396 <_printf_i+0x36>
 800d37e:	2a00      	cmp	r2, #0
 800d380:	d100      	bne.n	800d384 <_printf_i+0x24>
 800d382:	e0bc      	b.n	800d4fe <_printf_i+0x19e>
 800d384:	497b      	ldr	r1, [pc, #492]	@ (800d574 <_printf_i+0x214>)
 800d386:	9104      	str	r1, [sp, #16]
 800d388:	2a58      	cmp	r2, #88	@ 0x58
 800d38a:	d100      	bne.n	800d38e <_printf_i+0x2e>
 800d38c:	e090      	b.n	800d4b0 <_printf_i+0x150>
 800d38e:	0025      	movs	r5, r4
 800d390:	3542      	adds	r5, #66	@ 0x42
 800d392:	702a      	strb	r2, [r5, #0]
 800d394:	e022      	b.n	800d3dc <_printf_i+0x7c>
 800d396:	0010      	movs	r0, r2
 800d398:	3863      	subs	r0, #99	@ 0x63
 800d39a:	2815      	cmp	r0, #21
 800d39c:	d8f7      	bhi.n	800d38e <_printf_i+0x2e>
 800d39e:	f7f2 fec5 	bl	800012c <__gnu_thumb1_case_shi>
 800d3a2:	0016      	.short	0x0016
 800d3a4:	fff6001f 	.word	0xfff6001f
 800d3a8:	fff6fff6 	.word	0xfff6fff6
 800d3ac:	001ffff6 	.word	0x001ffff6
 800d3b0:	fff6fff6 	.word	0xfff6fff6
 800d3b4:	fff6fff6 	.word	0xfff6fff6
 800d3b8:	003600a1 	.word	0x003600a1
 800d3bc:	fff60080 	.word	0xfff60080
 800d3c0:	00b2fff6 	.word	0x00b2fff6
 800d3c4:	0036fff6 	.word	0x0036fff6
 800d3c8:	fff6fff6 	.word	0xfff6fff6
 800d3cc:	0084      	.short	0x0084
 800d3ce:	0025      	movs	r5, r4
 800d3d0:	681a      	ldr	r2, [r3, #0]
 800d3d2:	3542      	adds	r5, #66	@ 0x42
 800d3d4:	1d11      	adds	r1, r2, #4
 800d3d6:	6019      	str	r1, [r3, #0]
 800d3d8:	6813      	ldr	r3, [r2, #0]
 800d3da:	702b      	strb	r3, [r5, #0]
 800d3dc:	2301      	movs	r3, #1
 800d3de:	e0a0      	b.n	800d522 <_printf_i+0x1c2>
 800d3e0:	6818      	ldr	r0, [r3, #0]
 800d3e2:	6809      	ldr	r1, [r1, #0]
 800d3e4:	1d02      	adds	r2, r0, #4
 800d3e6:	060d      	lsls	r5, r1, #24
 800d3e8:	d50b      	bpl.n	800d402 <_printf_i+0xa2>
 800d3ea:	6806      	ldr	r6, [r0, #0]
 800d3ec:	601a      	str	r2, [r3, #0]
 800d3ee:	2e00      	cmp	r6, #0
 800d3f0:	da03      	bge.n	800d3fa <_printf_i+0x9a>
 800d3f2:	232d      	movs	r3, #45	@ 0x2d
 800d3f4:	9a03      	ldr	r2, [sp, #12]
 800d3f6:	4276      	negs	r6, r6
 800d3f8:	7013      	strb	r3, [r2, #0]
 800d3fa:	4b5e      	ldr	r3, [pc, #376]	@ (800d574 <_printf_i+0x214>)
 800d3fc:	270a      	movs	r7, #10
 800d3fe:	9304      	str	r3, [sp, #16]
 800d400:	e018      	b.n	800d434 <_printf_i+0xd4>
 800d402:	6806      	ldr	r6, [r0, #0]
 800d404:	601a      	str	r2, [r3, #0]
 800d406:	0649      	lsls	r1, r1, #25
 800d408:	d5f1      	bpl.n	800d3ee <_printf_i+0x8e>
 800d40a:	b236      	sxth	r6, r6
 800d40c:	e7ef      	b.n	800d3ee <_printf_i+0x8e>
 800d40e:	6808      	ldr	r0, [r1, #0]
 800d410:	6819      	ldr	r1, [r3, #0]
 800d412:	c940      	ldmia	r1!, {r6}
 800d414:	0605      	lsls	r5, r0, #24
 800d416:	d402      	bmi.n	800d41e <_printf_i+0xbe>
 800d418:	0640      	lsls	r0, r0, #25
 800d41a:	d500      	bpl.n	800d41e <_printf_i+0xbe>
 800d41c:	b2b6      	uxth	r6, r6
 800d41e:	6019      	str	r1, [r3, #0]
 800d420:	4b54      	ldr	r3, [pc, #336]	@ (800d574 <_printf_i+0x214>)
 800d422:	270a      	movs	r7, #10
 800d424:	9304      	str	r3, [sp, #16]
 800d426:	2a6f      	cmp	r2, #111	@ 0x6f
 800d428:	d100      	bne.n	800d42c <_printf_i+0xcc>
 800d42a:	3f02      	subs	r7, #2
 800d42c:	0023      	movs	r3, r4
 800d42e:	2200      	movs	r2, #0
 800d430:	3343      	adds	r3, #67	@ 0x43
 800d432:	701a      	strb	r2, [r3, #0]
 800d434:	6863      	ldr	r3, [r4, #4]
 800d436:	60a3      	str	r3, [r4, #8]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	db03      	blt.n	800d444 <_printf_i+0xe4>
 800d43c:	2104      	movs	r1, #4
 800d43e:	6822      	ldr	r2, [r4, #0]
 800d440:	438a      	bics	r2, r1
 800d442:	6022      	str	r2, [r4, #0]
 800d444:	2e00      	cmp	r6, #0
 800d446:	d102      	bne.n	800d44e <_printf_i+0xee>
 800d448:	9d03      	ldr	r5, [sp, #12]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d00c      	beq.n	800d468 <_printf_i+0x108>
 800d44e:	9d03      	ldr	r5, [sp, #12]
 800d450:	0030      	movs	r0, r6
 800d452:	0039      	movs	r1, r7
 800d454:	f7f2 fefa 	bl	800024c <__aeabi_uidivmod>
 800d458:	9b04      	ldr	r3, [sp, #16]
 800d45a:	3d01      	subs	r5, #1
 800d45c:	5c5b      	ldrb	r3, [r3, r1]
 800d45e:	702b      	strb	r3, [r5, #0]
 800d460:	0033      	movs	r3, r6
 800d462:	0006      	movs	r6, r0
 800d464:	429f      	cmp	r7, r3
 800d466:	d9f3      	bls.n	800d450 <_printf_i+0xf0>
 800d468:	2f08      	cmp	r7, #8
 800d46a:	d109      	bne.n	800d480 <_printf_i+0x120>
 800d46c:	6823      	ldr	r3, [r4, #0]
 800d46e:	07db      	lsls	r3, r3, #31
 800d470:	d506      	bpl.n	800d480 <_printf_i+0x120>
 800d472:	6862      	ldr	r2, [r4, #4]
 800d474:	6923      	ldr	r3, [r4, #16]
 800d476:	429a      	cmp	r2, r3
 800d478:	dc02      	bgt.n	800d480 <_printf_i+0x120>
 800d47a:	2330      	movs	r3, #48	@ 0x30
 800d47c:	3d01      	subs	r5, #1
 800d47e:	702b      	strb	r3, [r5, #0]
 800d480:	9b03      	ldr	r3, [sp, #12]
 800d482:	1b5b      	subs	r3, r3, r5
 800d484:	6123      	str	r3, [r4, #16]
 800d486:	9b07      	ldr	r3, [sp, #28]
 800d488:	0021      	movs	r1, r4
 800d48a:	9300      	str	r3, [sp, #0]
 800d48c:	9805      	ldr	r0, [sp, #20]
 800d48e:	9b06      	ldr	r3, [sp, #24]
 800d490:	aa09      	add	r2, sp, #36	@ 0x24
 800d492:	f7ff fef5 	bl	800d280 <_printf_common>
 800d496:	3001      	adds	r0, #1
 800d498:	d148      	bne.n	800d52c <_printf_i+0x1cc>
 800d49a:	2001      	movs	r0, #1
 800d49c:	4240      	negs	r0, r0
 800d49e:	b00b      	add	sp, #44	@ 0x2c
 800d4a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4a2:	2220      	movs	r2, #32
 800d4a4:	6809      	ldr	r1, [r1, #0]
 800d4a6:	430a      	orrs	r2, r1
 800d4a8:	6022      	str	r2, [r4, #0]
 800d4aa:	2278      	movs	r2, #120	@ 0x78
 800d4ac:	4932      	ldr	r1, [pc, #200]	@ (800d578 <_printf_i+0x218>)
 800d4ae:	9104      	str	r1, [sp, #16]
 800d4b0:	0021      	movs	r1, r4
 800d4b2:	3145      	adds	r1, #69	@ 0x45
 800d4b4:	700a      	strb	r2, [r1, #0]
 800d4b6:	6819      	ldr	r1, [r3, #0]
 800d4b8:	6822      	ldr	r2, [r4, #0]
 800d4ba:	c940      	ldmia	r1!, {r6}
 800d4bc:	0610      	lsls	r0, r2, #24
 800d4be:	d402      	bmi.n	800d4c6 <_printf_i+0x166>
 800d4c0:	0650      	lsls	r0, r2, #25
 800d4c2:	d500      	bpl.n	800d4c6 <_printf_i+0x166>
 800d4c4:	b2b6      	uxth	r6, r6
 800d4c6:	6019      	str	r1, [r3, #0]
 800d4c8:	07d3      	lsls	r3, r2, #31
 800d4ca:	d502      	bpl.n	800d4d2 <_printf_i+0x172>
 800d4cc:	2320      	movs	r3, #32
 800d4ce:	4313      	orrs	r3, r2
 800d4d0:	6023      	str	r3, [r4, #0]
 800d4d2:	2e00      	cmp	r6, #0
 800d4d4:	d001      	beq.n	800d4da <_printf_i+0x17a>
 800d4d6:	2710      	movs	r7, #16
 800d4d8:	e7a8      	b.n	800d42c <_printf_i+0xcc>
 800d4da:	2220      	movs	r2, #32
 800d4dc:	6823      	ldr	r3, [r4, #0]
 800d4de:	4393      	bics	r3, r2
 800d4e0:	6023      	str	r3, [r4, #0]
 800d4e2:	e7f8      	b.n	800d4d6 <_printf_i+0x176>
 800d4e4:	681a      	ldr	r2, [r3, #0]
 800d4e6:	680d      	ldr	r5, [r1, #0]
 800d4e8:	1d10      	adds	r0, r2, #4
 800d4ea:	6949      	ldr	r1, [r1, #20]
 800d4ec:	6018      	str	r0, [r3, #0]
 800d4ee:	6813      	ldr	r3, [r2, #0]
 800d4f0:	062e      	lsls	r6, r5, #24
 800d4f2:	d501      	bpl.n	800d4f8 <_printf_i+0x198>
 800d4f4:	6019      	str	r1, [r3, #0]
 800d4f6:	e002      	b.n	800d4fe <_printf_i+0x19e>
 800d4f8:	066d      	lsls	r5, r5, #25
 800d4fa:	d5fb      	bpl.n	800d4f4 <_printf_i+0x194>
 800d4fc:	8019      	strh	r1, [r3, #0]
 800d4fe:	2300      	movs	r3, #0
 800d500:	9d03      	ldr	r5, [sp, #12]
 800d502:	6123      	str	r3, [r4, #16]
 800d504:	e7bf      	b.n	800d486 <_printf_i+0x126>
 800d506:	681a      	ldr	r2, [r3, #0]
 800d508:	1d11      	adds	r1, r2, #4
 800d50a:	6019      	str	r1, [r3, #0]
 800d50c:	6815      	ldr	r5, [r2, #0]
 800d50e:	2100      	movs	r1, #0
 800d510:	0028      	movs	r0, r5
 800d512:	6862      	ldr	r2, [r4, #4]
 800d514:	f000 fa01 	bl	800d91a <memchr>
 800d518:	2800      	cmp	r0, #0
 800d51a:	d001      	beq.n	800d520 <_printf_i+0x1c0>
 800d51c:	1b40      	subs	r0, r0, r5
 800d51e:	6060      	str	r0, [r4, #4]
 800d520:	6863      	ldr	r3, [r4, #4]
 800d522:	6123      	str	r3, [r4, #16]
 800d524:	2300      	movs	r3, #0
 800d526:	9a03      	ldr	r2, [sp, #12]
 800d528:	7013      	strb	r3, [r2, #0]
 800d52a:	e7ac      	b.n	800d486 <_printf_i+0x126>
 800d52c:	002a      	movs	r2, r5
 800d52e:	6923      	ldr	r3, [r4, #16]
 800d530:	9906      	ldr	r1, [sp, #24]
 800d532:	9805      	ldr	r0, [sp, #20]
 800d534:	9d07      	ldr	r5, [sp, #28]
 800d536:	47a8      	blx	r5
 800d538:	3001      	adds	r0, #1
 800d53a:	d0ae      	beq.n	800d49a <_printf_i+0x13a>
 800d53c:	6823      	ldr	r3, [r4, #0]
 800d53e:	079b      	lsls	r3, r3, #30
 800d540:	d415      	bmi.n	800d56e <_printf_i+0x20e>
 800d542:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d544:	68e0      	ldr	r0, [r4, #12]
 800d546:	4298      	cmp	r0, r3
 800d548:	daa9      	bge.n	800d49e <_printf_i+0x13e>
 800d54a:	0018      	movs	r0, r3
 800d54c:	e7a7      	b.n	800d49e <_printf_i+0x13e>
 800d54e:	0022      	movs	r2, r4
 800d550:	2301      	movs	r3, #1
 800d552:	9906      	ldr	r1, [sp, #24]
 800d554:	9805      	ldr	r0, [sp, #20]
 800d556:	9e07      	ldr	r6, [sp, #28]
 800d558:	3219      	adds	r2, #25
 800d55a:	47b0      	blx	r6
 800d55c:	3001      	adds	r0, #1
 800d55e:	d09c      	beq.n	800d49a <_printf_i+0x13a>
 800d560:	3501      	adds	r5, #1
 800d562:	68e3      	ldr	r3, [r4, #12]
 800d564:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d566:	1a9b      	subs	r3, r3, r2
 800d568:	42ab      	cmp	r3, r5
 800d56a:	dcf0      	bgt.n	800d54e <_printf_i+0x1ee>
 800d56c:	e7e9      	b.n	800d542 <_printf_i+0x1e2>
 800d56e:	2500      	movs	r5, #0
 800d570:	e7f7      	b.n	800d562 <_printf_i+0x202>
 800d572:	46c0      	nop			@ (mov r8, r8)
 800d574:	0801998e 	.word	0x0801998e
 800d578:	0801999f 	.word	0x0801999f

0800d57c <std>:
 800d57c:	2300      	movs	r3, #0
 800d57e:	b510      	push	{r4, lr}
 800d580:	0004      	movs	r4, r0
 800d582:	6003      	str	r3, [r0, #0]
 800d584:	6043      	str	r3, [r0, #4]
 800d586:	6083      	str	r3, [r0, #8]
 800d588:	8181      	strh	r1, [r0, #12]
 800d58a:	6643      	str	r3, [r0, #100]	@ 0x64
 800d58c:	81c2      	strh	r2, [r0, #14]
 800d58e:	6103      	str	r3, [r0, #16]
 800d590:	6143      	str	r3, [r0, #20]
 800d592:	6183      	str	r3, [r0, #24]
 800d594:	0019      	movs	r1, r3
 800d596:	2208      	movs	r2, #8
 800d598:	305c      	adds	r0, #92	@ 0x5c
 800d59a:	f000 f90f 	bl	800d7bc <memset>
 800d59e:	4b0b      	ldr	r3, [pc, #44]	@ (800d5cc <std+0x50>)
 800d5a0:	6224      	str	r4, [r4, #32]
 800d5a2:	6263      	str	r3, [r4, #36]	@ 0x24
 800d5a4:	4b0a      	ldr	r3, [pc, #40]	@ (800d5d0 <std+0x54>)
 800d5a6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d5a8:	4b0a      	ldr	r3, [pc, #40]	@ (800d5d4 <std+0x58>)
 800d5aa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d5ac:	4b0a      	ldr	r3, [pc, #40]	@ (800d5d8 <std+0x5c>)
 800d5ae:	6323      	str	r3, [r4, #48]	@ 0x30
 800d5b0:	4b0a      	ldr	r3, [pc, #40]	@ (800d5dc <std+0x60>)
 800d5b2:	429c      	cmp	r4, r3
 800d5b4:	d005      	beq.n	800d5c2 <std+0x46>
 800d5b6:	4b0a      	ldr	r3, [pc, #40]	@ (800d5e0 <std+0x64>)
 800d5b8:	429c      	cmp	r4, r3
 800d5ba:	d002      	beq.n	800d5c2 <std+0x46>
 800d5bc:	4b09      	ldr	r3, [pc, #36]	@ (800d5e4 <std+0x68>)
 800d5be:	429c      	cmp	r4, r3
 800d5c0:	d103      	bne.n	800d5ca <std+0x4e>
 800d5c2:	0020      	movs	r0, r4
 800d5c4:	3058      	adds	r0, #88	@ 0x58
 800d5c6:	f000 f9a5 	bl	800d914 <__retarget_lock_init_recursive>
 800d5ca:	bd10      	pop	{r4, pc}
 800d5cc:	0800d725 	.word	0x0800d725
 800d5d0:	0800d74d 	.word	0x0800d74d
 800d5d4:	0800d785 	.word	0x0800d785
 800d5d8:	0800d7b1 	.word	0x0800d7b1
 800d5dc:	200005d4 	.word	0x200005d4
 800d5e0:	2000063c 	.word	0x2000063c
 800d5e4:	200006a4 	.word	0x200006a4

0800d5e8 <stdio_exit_handler>:
 800d5e8:	b510      	push	{r4, lr}
 800d5ea:	4a03      	ldr	r2, [pc, #12]	@ (800d5f8 <stdio_exit_handler+0x10>)
 800d5ec:	4903      	ldr	r1, [pc, #12]	@ (800d5fc <stdio_exit_handler+0x14>)
 800d5ee:	4804      	ldr	r0, [pc, #16]	@ (800d600 <stdio_exit_handler+0x18>)
 800d5f0:	f000 f87c 	bl	800d6ec <_fwalk_sglue>
 800d5f4:	bd10      	pop	{r4, pc}
 800d5f6:	46c0      	nop			@ (mov r8, r8)
 800d5f8:	20000170 	.word	0x20000170
 800d5fc:	0800f1a5 	.word	0x0800f1a5
 800d600:	20000180 	.word	0x20000180

0800d604 <cleanup_stdio>:
 800d604:	6841      	ldr	r1, [r0, #4]
 800d606:	4b0b      	ldr	r3, [pc, #44]	@ (800d634 <cleanup_stdio+0x30>)
 800d608:	b510      	push	{r4, lr}
 800d60a:	0004      	movs	r4, r0
 800d60c:	4299      	cmp	r1, r3
 800d60e:	d001      	beq.n	800d614 <cleanup_stdio+0x10>
 800d610:	f001 fdc8 	bl	800f1a4 <_fflush_r>
 800d614:	68a1      	ldr	r1, [r4, #8]
 800d616:	4b08      	ldr	r3, [pc, #32]	@ (800d638 <cleanup_stdio+0x34>)
 800d618:	4299      	cmp	r1, r3
 800d61a:	d002      	beq.n	800d622 <cleanup_stdio+0x1e>
 800d61c:	0020      	movs	r0, r4
 800d61e:	f001 fdc1 	bl	800f1a4 <_fflush_r>
 800d622:	68e1      	ldr	r1, [r4, #12]
 800d624:	4b05      	ldr	r3, [pc, #20]	@ (800d63c <cleanup_stdio+0x38>)
 800d626:	4299      	cmp	r1, r3
 800d628:	d002      	beq.n	800d630 <cleanup_stdio+0x2c>
 800d62a:	0020      	movs	r0, r4
 800d62c:	f001 fdba 	bl	800f1a4 <_fflush_r>
 800d630:	bd10      	pop	{r4, pc}
 800d632:	46c0      	nop			@ (mov r8, r8)
 800d634:	200005d4 	.word	0x200005d4
 800d638:	2000063c 	.word	0x2000063c
 800d63c:	200006a4 	.word	0x200006a4

0800d640 <global_stdio_init.part.0>:
 800d640:	b510      	push	{r4, lr}
 800d642:	4b09      	ldr	r3, [pc, #36]	@ (800d668 <global_stdio_init.part.0+0x28>)
 800d644:	4a09      	ldr	r2, [pc, #36]	@ (800d66c <global_stdio_init.part.0+0x2c>)
 800d646:	2104      	movs	r1, #4
 800d648:	601a      	str	r2, [r3, #0]
 800d64a:	4809      	ldr	r0, [pc, #36]	@ (800d670 <global_stdio_init.part.0+0x30>)
 800d64c:	2200      	movs	r2, #0
 800d64e:	f7ff ff95 	bl	800d57c <std>
 800d652:	2201      	movs	r2, #1
 800d654:	2109      	movs	r1, #9
 800d656:	4807      	ldr	r0, [pc, #28]	@ (800d674 <global_stdio_init.part.0+0x34>)
 800d658:	f7ff ff90 	bl	800d57c <std>
 800d65c:	2202      	movs	r2, #2
 800d65e:	2112      	movs	r1, #18
 800d660:	4805      	ldr	r0, [pc, #20]	@ (800d678 <global_stdio_init.part.0+0x38>)
 800d662:	f7ff ff8b 	bl	800d57c <std>
 800d666:	bd10      	pop	{r4, pc}
 800d668:	2000070c 	.word	0x2000070c
 800d66c:	0800d5e9 	.word	0x0800d5e9
 800d670:	200005d4 	.word	0x200005d4
 800d674:	2000063c 	.word	0x2000063c
 800d678:	200006a4 	.word	0x200006a4

0800d67c <__sfp_lock_acquire>:
 800d67c:	b510      	push	{r4, lr}
 800d67e:	4802      	ldr	r0, [pc, #8]	@ (800d688 <__sfp_lock_acquire+0xc>)
 800d680:	f000 f949 	bl	800d916 <__retarget_lock_acquire_recursive>
 800d684:	bd10      	pop	{r4, pc}
 800d686:	46c0      	nop			@ (mov r8, r8)
 800d688:	20000715 	.word	0x20000715

0800d68c <__sfp_lock_release>:
 800d68c:	b510      	push	{r4, lr}
 800d68e:	4802      	ldr	r0, [pc, #8]	@ (800d698 <__sfp_lock_release+0xc>)
 800d690:	f000 f942 	bl	800d918 <__retarget_lock_release_recursive>
 800d694:	bd10      	pop	{r4, pc}
 800d696:	46c0      	nop			@ (mov r8, r8)
 800d698:	20000715 	.word	0x20000715

0800d69c <__sinit>:
 800d69c:	b510      	push	{r4, lr}
 800d69e:	0004      	movs	r4, r0
 800d6a0:	f7ff ffec 	bl	800d67c <__sfp_lock_acquire>
 800d6a4:	6a23      	ldr	r3, [r4, #32]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d002      	beq.n	800d6b0 <__sinit+0x14>
 800d6aa:	f7ff ffef 	bl	800d68c <__sfp_lock_release>
 800d6ae:	bd10      	pop	{r4, pc}
 800d6b0:	4b04      	ldr	r3, [pc, #16]	@ (800d6c4 <__sinit+0x28>)
 800d6b2:	6223      	str	r3, [r4, #32]
 800d6b4:	4b04      	ldr	r3, [pc, #16]	@ (800d6c8 <__sinit+0x2c>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d1f6      	bne.n	800d6aa <__sinit+0xe>
 800d6bc:	f7ff ffc0 	bl	800d640 <global_stdio_init.part.0>
 800d6c0:	e7f3      	b.n	800d6aa <__sinit+0xe>
 800d6c2:	46c0      	nop			@ (mov r8, r8)
 800d6c4:	0800d605 	.word	0x0800d605
 800d6c8:	2000070c 	.word	0x2000070c

0800d6cc <fiprintf>:
 800d6cc:	b40e      	push	{r1, r2, r3}
 800d6ce:	b517      	push	{r0, r1, r2, r4, lr}
 800d6d0:	4c05      	ldr	r4, [pc, #20]	@ (800d6e8 <fiprintf+0x1c>)
 800d6d2:	ab05      	add	r3, sp, #20
 800d6d4:	cb04      	ldmia	r3!, {r2}
 800d6d6:	0001      	movs	r1, r0
 800d6d8:	6820      	ldr	r0, [r4, #0]
 800d6da:	9301      	str	r3, [sp, #4]
 800d6dc:	f001 fbc0 	bl	800ee60 <_vfiprintf_r>
 800d6e0:	bc1e      	pop	{r1, r2, r3, r4}
 800d6e2:	bc08      	pop	{r3}
 800d6e4:	b003      	add	sp, #12
 800d6e6:	4718      	bx	r3
 800d6e8:	2000017c 	.word	0x2000017c

0800d6ec <_fwalk_sglue>:
 800d6ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6ee:	0014      	movs	r4, r2
 800d6f0:	2600      	movs	r6, #0
 800d6f2:	9000      	str	r0, [sp, #0]
 800d6f4:	9101      	str	r1, [sp, #4]
 800d6f6:	68a5      	ldr	r5, [r4, #8]
 800d6f8:	6867      	ldr	r7, [r4, #4]
 800d6fa:	3f01      	subs	r7, #1
 800d6fc:	d504      	bpl.n	800d708 <_fwalk_sglue+0x1c>
 800d6fe:	6824      	ldr	r4, [r4, #0]
 800d700:	2c00      	cmp	r4, #0
 800d702:	d1f8      	bne.n	800d6f6 <_fwalk_sglue+0xa>
 800d704:	0030      	movs	r0, r6
 800d706:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d708:	89ab      	ldrh	r3, [r5, #12]
 800d70a:	2b01      	cmp	r3, #1
 800d70c:	d908      	bls.n	800d720 <_fwalk_sglue+0x34>
 800d70e:	220e      	movs	r2, #14
 800d710:	5eab      	ldrsh	r3, [r5, r2]
 800d712:	3301      	adds	r3, #1
 800d714:	d004      	beq.n	800d720 <_fwalk_sglue+0x34>
 800d716:	0029      	movs	r1, r5
 800d718:	9800      	ldr	r0, [sp, #0]
 800d71a:	9b01      	ldr	r3, [sp, #4]
 800d71c:	4798      	blx	r3
 800d71e:	4306      	orrs	r6, r0
 800d720:	3568      	adds	r5, #104	@ 0x68
 800d722:	e7ea      	b.n	800d6fa <_fwalk_sglue+0xe>

0800d724 <__sread>:
 800d724:	b570      	push	{r4, r5, r6, lr}
 800d726:	000c      	movs	r4, r1
 800d728:	250e      	movs	r5, #14
 800d72a:	5f49      	ldrsh	r1, [r1, r5]
 800d72c:	f000 f88e 	bl	800d84c <_read_r>
 800d730:	2800      	cmp	r0, #0
 800d732:	db03      	blt.n	800d73c <__sread+0x18>
 800d734:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800d736:	181b      	adds	r3, r3, r0
 800d738:	6563      	str	r3, [r4, #84]	@ 0x54
 800d73a:	bd70      	pop	{r4, r5, r6, pc}
 800d73c:	89a3      	ldrh	r3, [r4, #12]
 800d73e:	4a02      	ldr	r2, [pc, #8]	@ (800d748 <__sread+0x24>)
 800d740:	4013      	ands	r3, r2
 800d742:	81a3      	strh	r3, [r4, #12]
 800d744:	e7f9      	b.n	800d73a <__sread+0x16>
 800d746:	46c0      	nop			@ (mov r8, r8)
 800d748:	ffffefff 	.word	0xffffefff

0800d74c <__swrite>:
 800d74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d74e:	001f      	movs	r7, r3
 800d750:	898b      	ldrh	r3, [r1, #12]
 800d752:	0005      	movs	r5, r0
 800d754:	000c      	movs	r4, r1
 800d756:	0016      	movs	r6, r2
 800d758:	05db      	lsls	r3, r3, #23
 800d75a:	d505      	bpl.n	800d768 <__swrite+0x1c>
 800d75c:	230e      	movs	r3, #14
 800d75e:	5ec9      	ldrsh	r1, [r1, r3]
 800d760:	2200      	movs	r2, #0
 800d762:	2302      	movs	r3, #2
 800d764:	f000 f85e 	bl	800d824 <_lseek_r>
 800d768:	89a3      	ldrh	r3, [r4, #12]
 800d76a:	4a05      	ldr	r2, [pc, #20]	@ (800d780 <__swrite+0x34>)
 800d76c:	0028      	movs	r0, r5
 800d76e:	4013      	ands	r3, r2
 800d770:	81a3      	strh	r3, [r4, #12]
 800d772:	0032      	movs	r2, r6
 800d774:	230e      	movs	r3, #14
 800d776:	5ee1      	ldrsh	r1, [r4, r3]
 800d778:	003b      	movs	r3, r7
 800d77a:	f000 f88d 	bl	800d898 <_write_r>
 800d77e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d780:	ffffefff 	.word	0xffffefff

0800d784 <__sseek>:
 800d784:	b570      	push	{r4, r5, r6, lr}
 800d786:	000c      	movs	r4, r1
 800d788:	250e      	movs	r5, #14
 800d78a:	5f49      	ldrsh	r1, [r1, r5]
 800d78c:	f000 f84a 	bl	800d824 <_lseek_r>
 800d790:	89a3      	ldrh	r3, [r4, #12]
 800d792:	1c42      	adds	r2, r0, #1
 800d794:	d103      	bne.n	800d79e <__sseek+0x1a>
 800d796:	4a05      	ldr	r2, [pc, #20]	@ (800d7ac <__sseek+0x28>)
 800d798:	4013      	ands	r3, r2
 800d79a:	81a3      	strh	r3, [r4, #12]
 800d79c:	bd70      	pop	{r4, r5, r6, pc}
 800d79e:	2280      	movs	r2, #128	@ 0x80
 800d7a0:	0152      	lsls	r2, r2, #5
 800d7a2:	4313      	orrs	r3, r2
 800d7a4:	81a3      	strh	r3, [r4, #12]
 800d7a6:	6560      	str	r0, [r4, #84]	@ 0x54
 800d7a8:	e7f8      	b.n	800d79c <__sseek+0x18>
 800d7aa:	46c0      	nop			@ (mov r8, r8)
 800d7ac:	ffffefff 	.word	0xffffefff

0800d7b0 <__sclose>:
 800d7b0:	b510      	push	{r4, lr}
 800d7b2:	230e      	movs	r3, #14
 800d7b4:	5ec9      	ldrsh	r1, [r1, r3]
 800d7b6:	f000 f823 	bl	800d800 <_close_r>
 800d7ba:	bd10      	pop	{r4, pc}

0800d7bc <memset>:
 800d7bc:	0003      	movs	r3, r0
 800d7be:	1882      	adds	r2, r0, r2
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	d100      	bne.n	800d7c6 <memset+0xa>
 800d7c4:	4770      	bx	lr
 800d7c6:	7019      	strb	r1, [r3, #0]
 800d7c8:	3301      	adds	r3, #1
 800d7ca:	e7f9      	b.n	800d7c0 <memset+0x4>

0800d7cc <strncat>:
 800d7cc:	0003      	movs	r3, r0
 800d7ce:	b510      	push	{r4, lr}
 800d7d0:	781c      	ldrb	r4, [r3, #0]
 800d7d2:	2c00      	cmp	r4, #0
 800d7d4:	d107      	bne.n	800d7e6 <strncat+0x1a>
 800d7d6:	3a01      	subs	r2, #1
 800d7d8:	1c54      	adds	r4, r2, #1
 800d7da:	d003      	beq.n	800d7e4 <strncat+0x18>
 800d7dc:	780c      	ldrb	r4, [r1, #0]
 800d7de:	701c      	strb	r4, [r3, #0]
 800d7e0:	2c00      	cmp	r4, #0
 800d7e2:	d102      	bne.n	800d7ea <strncat+0x1e>
 800d7e4:	bd10      	pop	{r4, pc}
 800d7e6:	3301      	adds	r3, #1
 800d7e8:	e7f2      	b.n	800d7d0 <strncat+0x4>
 800d7ea:	2a00      	cmp	r2, #0
 800d7ec:	d100      	bne.n	800d7f0 <strncat+0x24>
 800d7ee:	705a      	strb	r2, [r3, #1]
 800d7f0:	3301      	adds	r3, #1
 800d7f2:	3101      	adds	r1, #1
 800d7f4:	e7ef      	b.n	800d7d6 <strncat+0xa>
	...

0800d7f8 <_localeconv_r>:
 800d7f8:	4800      	ldr	r0, [pc, #0]	@ (800d7fc <_localeconv_r+0x4>)
 800d7fa:	4770      	bx	lr
 800d7fc:	200002bc 	.word	0x200002bc

0800d800 <_close_r>:
 800d800:	2300      	movs	r3, #0
 800d802:	b570      	push	{r4, r5, r6, lr}
 800d804:	4d06      	ldr	r5, [pc, #24]	@ (800d820 <_close_r+0x20>)
 800d806:	0004      	movs	r4, r0
 800d808:	0008      	movs	r0, r1
 800d80a:	602b      	str	r3, [r5, #0]
 800d80c:	f7f8 f94b 	bl	8005aa6 <_close>
 800d810:	1c43      	adds	r3, r0, #1
 800d812:	d103      	bne.n	800d81c <_close_r+0x1c>
 800d814:	682b      	ldr	r3, [r5, #0]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d000      	beq.n	800d81c <_close_r+0x1c>
 800d81a:	6023      	str	r3, [r4, #0]
 800d81c:	bd70      	pop	{r4, r5, r6, pc}
 800d81e:	46c0      	nop			@ (mov r8, r8)
 800d820:	20000710 	.word	0x20000710

0800d824 <_lseek_r>:
 800d824:	b570      	push	{r4, r5, r6, lr}
 800d826:	0004      	movs	r4, r0
 800d828:	0008      	movs	r0, r1
 800d82a:	0011      	movs	r1, r2
 800d82c:	001a      	movs	r2, r3
 800d82e:	2300      	movs	r3, #0
 800d830:	4d05      	ldr	r5, [pc, #20]	@ (800d848 <_lseek_r+0x24>)
 800d832:	602b      	str	r3, [r5, #0]
 800d834:	f7f8 f958 	bl	8005ae8 <_lseek>
 800d838:	1c43      	adds	r3, r0, #1
 800d83a:	d103      	bne.n	800d844 <_lseek_r+0x20>
 800d83c:	682b      	ldr	r3, [r5, #0]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d000      	beq.n	800d844 <_lseek_r+0x20>
 800d842:	6023      	str	r3, [r4, #0]
 800d844:	bd70      	pop	{r4, r5, r6, pc}
 800d846:	46c0      	nop			@ (mov r8, r8)
 800d848:	20000710 	.word	0x20000710

0800d84c <_read_r>:
 800d84c:	b570      	push	{r4, r5, r6, lr}
 800d84e:	0004      	movs	r4, r0
 800d850:	0008      	movs	r0, r1
 800d852:	0011      	movs	r1, r2
 800d854:	001a      	movs	r2, r3
 800d856:	2300      	movs	r3, #0
 800d858:	4d05      	ldr	r5, [pc, #20]	@ (800d870 <_read_r+0x24>)
 800d85a:	602b      	str	r3, [r5, #0]
 800d85c:	f7f8 f8ea 	bl	8005a34 <_read>
 800d860:	1c43      	adds	r3, r0, #1
 800d862:	d103      	bne.n	800d86c <_read_r+0x20>
 800d864:	682b      	ldr	r3, [r5, #0]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d000      	beq.n	800d86c <_read_r+0x20>
 800d86a:	6023      	str	r3, [r4, #0]
 800d86c:	bd70      	pop	{r4, r5, r6, pc}
 800d86e:	46c0      	nop			@ (mov r8, r8)
 800d870:	20000710 	.word	0x20000710

0800d874 <_sbrk_r>:
 800d874:	2300      	movs	r3, #0
 800d876:	b570      	push	{r4, r5, r6, lr}
 800d878:	4d06      	ldr	r5, [pc, #24]	@ (800d894 <_sbrk_r+0x20>)
 800d87a:	0004      	movs	r4, r0
 800d87c:	0008      	movs	r0, r1
 800d87e:	602b      	str	r3, [r5, #0]
 800d880:	f7f8 f93e 	bl	8005b00 <_sbrk>
 800d884:	1c43      	adds	r3, r0, #1
 800d886:	d103      	bne.n	800d890 <_sbrk_r+0x1c>
 800d888:	682b      	ldr	r3, [r5, #0]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d000      	beq.n	800d890 <_sbrk_r+0x1c>
 800d88e:	6023      	str	r3, [r4, #0]
 800d890:	bd70      	pop	{r4, r5, r6, pc}
 800d892:	46c0      	nop			@ (mov r8, r8)
 800d894:	20000710 	.word	0x20000710

0800d898 <_write_r>:
 800d898:	b570      	push	{r4, r5, r6, lr}
 800d89a:	0004      	movs	r4, r0
 800d89c:	0008      	movs	r0, r1
 800d89e:	0011      	movs	r1, r2
 800d8a0:	001a      	movs	r2, r3
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	4d05      	ldr	r5, [pc, #20]	@ (800d8bc <_write_r+0x24>)
 800d8a6:	602b      	str	r3, [r5, #0]
 800d8a8:	f7f8 f8e1 	bl	8005a6e <_write>
 800d8ac:	1c43      	adds	r3, r0, #1
 800d8ae:	d103      	bne.n	800d8b8 <_write_r+0x20>
 800d8b0:	682b      	ldr	r3, [r5, #0]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d000      	beq.n	800d8b8 <_write_r+0x20>
 800d8b6:	6023      	str	r3, [r4, #0]
 800d8b8:	bd70      	pop	{r4, r5, r6, pc}
 800d8ba:	46c0      	nop			@ (mov r8, r8)
 800d8bc:	20000710 	.word	0x20000710

0800d8c0 <__errno>:
 800d8c0:	4b01      	ldr	r3, [pc, #4]	@ (800d8c8 <__errno+0x8>)
 800d8c2:	6818      	ldr	r0, [r3, #0]
 800d8c4:	4770      	bx	lr
 800d8c6:	46c0      	nop			@ (mov r8, r8)
 800d8c8:	2000017c 	.word	0x2000017c

0800d8cc <__libc_init_array>:
 800d8cc:	b570      	push	{r4, r5, r6, lr}
 800d8ce:	2600      	movs	r6, #0
 800d8d0:	4c0c      	ldr	r4, [pc, #48]	@ (800d904 <__libc_init_array+0x38>)
 800d8d2:	4d0d      	ldr	r5, [pc, #52]	@ (800d908 <__libc_init_array+0x3c>)
 800d8d4:	1b64      	subs	r4, r4, r5
 800d8d6:	10a4      	asrs	r4, r4, #2
 800d8d8:	42a6      	cmp	r6, r4
 800d8da:	d109      	bne.n	800d8f0 <__libc_init_array+0x24>
 800d8dc:	2600      	movs	r6, #0
 800d8de:	f001 fe81 	bl	800f5e4 <_init>
 800d8e2:	4c0a      	ldr	r4, [pc, #40]	@ (800d90c <__libc_init_array+0x40>)
 800d8e4:	4d0a      	ldr	r5, [pc, #40]	@ (800d910 <__libc_init_array+0x44>)
 800d8e6:	1b64      	subs	r4, r4, r5
 800d8e8:	10a4      	asrs	r4, r4, #2
 800d8ea:	42a6      	cmp	r6, r4
 800d8ec:	d105      	bne.n	800d8fa <__libc_init_array+0x2e>
 800d8ee:	bd70      	pop	{r4, r5, r6, pc}
 800d8f0:	00b3      	lsls	r3, r6, #2
 800d8f2:	58eb      	ldr	r3, [r5, r3]
 800d8f4:	4798      	blx	r3
 800d8f6:	3601      	adds	r6, #1
 800d8f8:	e7ee      	b.n	800d8d8 <__libc_init_array+0xc>
 800d8fa:	00b3      	lsls	r3, r6, #2
 800d8fc:	58eb      	ldr	r3, [r5, r3]
 800d8fe:	4798      	blx	r3
 800d900:	3601      	adds	r6, #1
 800d902:	e7f2      	b.n	800d8ea <__libc_init_array+0x1e>
 800d904:	08019cf8 	.word	0x08019cf8
 800d908:	08019cf8 	.word	0x08019cf8
 800d90c:	08019cfc 	.word	0x08019cfc
 800d910:	08019cf8 	.word	0x08019cf8

0800d914 <__retarget_lock_init_recursive>:
 800d914:	4770      	bx	lr

0800d916 <__retarget_lock_acquire_recursive>:
 800d916:	4770      	bx	lr

0800d918 <__retarget_lock_release_recursive>:
 800d918:	4770      	bx	lr

0800d91a <memchr>:
 800d91a:	b2c9      	uxtb	r1, r1
 800d91c:	1882      	adds	r2, r0, r2
 800d91e:	4290      	cmp	r0, r2
 800d920:	d101      	bne.n	800d926 <memchr+0xc>
 800d922:	2000      	movs	r0, #0
 800d924:	4770      	bx	lr
 800d926:	7803      	ldrb	r3, [r0, #0]
 800d928:	428b      	cmp	r3, r1
 800d92a:	d0fb      	beq.n	800d924 <memchr+0xa>
 800d92c:	3001      	adds	r0, #1
 800d92e:	e7f6      	b.n	800d91e <memchr+0x4>

0800d930 <quorem>:
 800d930:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d932:	6902      	ldr	r2, [r0, #16]
 800d934:	690f      	ldr	r7, [r1, #16]
 800d936:	b087      	sub	sp, #28
 800d938:	0006      	movs	r6, r0
 800d93a:	000b      	movs	r3, r1
 800d93c:	2000      	movs	r0, #0
 800d93e:	9102      	str	r1, [sp, #8]
 800d940:	42ba      	cmp	r2, r7
 800d942:	db6d      	blt.n	800da20 <quorem+0xf0>
 800d944:	3f01      	subs	r7, #1
 800d946:	00bc      	lsls	r4, r7, #2
 800d948:	3314      	adds	r3, #20
 800d94a:	9305      	str	r3, [sp, #20]
 800d94c:	191b      	adds	r3, r3, r4
 800d94e:	9303      	str	r3, [sp, #12]
 800d950:	0033      	movs	r3, r6
 800d952:	3314      	adds	r3, #20
 800d954:	191c      	adds	r4, r3, r4
 800d956:	9301      	str	r3, [sp, #4]
 800d958:	6823      	ldr	r3, [r4, #0]
 800d95a:	9304      	str	r3, [sp, #16]
 800d95c:	9b03      	ldr	r3, [sp, #12]
 800d95e:	9804      	ldr	r0, [sp, #16]
 800d960:	681d      	ldr	r5, [r3, #0]
 800d962:	3501      	adds	r5, #1
 800d964:	0029      	movs	r1, r5
 800d966:	f7f2 fbeb 	bl	8000140 <__udivsi3>
 800d96a:	9b04      	ldr	r3, [sp, #16]
 800d96c:	9000      	str	r0, [sp, #0]
 800d96e:	42ab      	cmp	r3, r5
 800d970:	d32b      	bcc.n	800d9ca <quorem+0x9a>
 800d972:	9b05      	ldr	r3, [sp, #20]
 800d974:	9d01      	ldr	r5, [sp, #4]
 800d976:	469c      	mov	ip, r3
 800d978:	2300      	movs	r3, #0
 800d97a:	9305      	str	r3, [sp, #20]
 800d97c:	9304      	str	r3, [sp, #16]
 800d97e:	4662      	mov	r2, ip
 800d980:	ca08      	ldmia	r2!, {r3}
 800d982:	6828      	ldr	r0, [r5, #0]
 800d984:	4694      	mov	ip, r2
 800d986:	9a00      	ldr	r2, [sp, #0]
 800d988:	b299      	uxth	r1, r3
 800d98a:	4351      	muls	r1, r2
 800d98c:	9a05      	ldr	r2, [sp, #20]
 800d98e:	0c1b      	lsrs	r3, r3, #16
 800d990:	1889      	adds	r1, r1, r2
 800d992:	9a00      	ldr	r2, [sp, #0]
 800d994:	4353      	muls	r3, r2
 800d996:	0c0a      	lsrs	r2, r1, #16
 800d998:	189b      	adds	r3, r3, r2
 800d99a:	0c1a      	lsrs	r2, r3, #16
 800d99c:	b289      	uxth	r1, r1
 800d99e:	9205      	str	r2, [sp, #20]
 800d9a0:	b282      	uxth	r2, r0
 800d9a2:	1a52      	subs	r2, r2, r1
 800d9a4:	9904      	ldr	r1, [sp, #16]
 800d9a6:	0c00      	lsrs	r0, r0, #16
 800d9a8:	1852      	adds	r2, r2, r1
 800d9aa:	b29b      	uxth	r3, r3
 800d9ac:	1411      	asrs	r1, r2, #16
 800d9ae:	1ac3      	subs	r3, r0, r3
 800d9b0:	185b      	adds	r3, r3, r1
 800d9b2:	1419      	asrs	r1, r3, #16
 800d9b4:	b292      	uxth	r2, r2
 800d9b6:	041b      	lsls	r3, r3, #16
 800d9b8:	431a      	orrs	r2, r3
 800d9ba:	9b03      	ldr	r3, [sp, #12]
 800d9bc:	9104      	str	r1, [sp, #16]
 800d9be:	c504      	stmia	r5!, {r2}
 800d9c0:	4563      	cmp	r3, ip
 800d9c2:	d2dc      	bcs.n	800d97e <quorem+0x4e>
 800d9c4:	6823      	ldr	r3, [r4, #0]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d030      	beq.n	800da2c <quorem+0xfc>
 800d9ca:	0030      	movs	r0, r6
 800d9cc:	9902      	ldr	r1, [sp, #8]
 800d9ce:	f001 f909 	bl	800ebe4 <__mcmp>
 800d9d2:	2800      	cmp	r0, #0
 800d9d4:	db23      	blt.n	800da1e <quorem+0xee>
 800d9d6:	0034      	movs	r4, r6
 800d9d8:	2500      	movs	r5, #0
 800d9da:	9902      	ldr	r1, [sp, #8]
 800d9dc:	3414      	adds	r4, #20
 800d9de:	3114      	adds	r1, #20
 800d9e0:	6823      	ldr	r3, [r4, #0]
 800d9e2:	c901      	ldmia	r1!, {r0}
 800d9e4:	9302      	str	r3, [sp, #8]
 800d9e6:	466b      	mov	r3, sp
 800d9e8:	891b      	ldrh	r3, [r3, #8]
 800d9ea:	b282      	uxth	r2, r0
 800d9ec:	1a9a      	subs	r2, r3, r2
 800d9ee:	9b02      	ldr	r3, [sp, #8]
 800d9f0:	1952      	adds	r2, r2, r5
 800d9f2:	0c00      	lsrs	r0, r0, #16
 800d9f4:	0c1b      	lsrs	r3, r3, #16
 800d9f6:	1a1b      	subs	r3, r3, r0
 800d9f8:	1410      	asrs	r0, r2, #16
 800d9fa:	181b      	adds	r3, r3, r0
 800d9fc:	141d      	asrs	r5, r3, #16
 800d9fe:	b292      	uxth	r2, r2
 800da00:	041b      	lsls	r3, r3, #16
 800da02:	431a      	orrs	r2, r3
 800da04:	9b03      	ldr	r3, [sp, #12]
 800da06:	c404      	stmia	r4!, {r2}
 800da08:	428b      	cmp	r3, r1
 800da0a:	d2e9      	bcs.n	800d9e0 <quorem+0xb0>
 800da0c:	9a01      	ldr	r2, [sp, #4]
 800da0e:	00bb      	lsls	r3, r7, #2
 800da10:	18d3      	adds	r3, r2, r3
 800da12:	681a      	ldr	r2, [r3, #0]
 800da14:	2a00      	cmp	r2, #0
 800da16:	d013      	beq.n	800da40 <quorem+0x110>
 800da18:	9b00      	ldr	r3, [sp, #0]
 800da1a:	3301      	adds	r3, #1
 800da1c:	9300      	str	r3, [sp, #0]
 800da1e:	9800      	ldr	r0, [sp, #0]
 800da20:	b007      	add	sp, #28
 800da22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da24:	6823      	ldr	r3, [r4, #0]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d104      	bne.n	800da34 <quorem+0x104>
 800da2a:	3f01      	subs	r7, #1
 800da2c:	9b01      	ldr	r3, [sp, #4]
 800da2e:	3c04      	subs	r4, #4
 800da30:	42a3      	cmp	r3, r4
 800da32:	d3f7      	bcc.n	800da24 <quorem+0xf4>
 800da34:	6137      	str	r7, [r6, #16]
 800da36:	e7c8      	b.n	800d9ca <quorem+0x9a>
 800da38:	681a      	ldr	r2, [r3, #0]
 800da3a:	2a00      	cmp	r2, #0
 800da3c:	d104      	bne.n	800da48 <quorem+0x118>
 800da3e:	3f01      	subs	r7, #1
 800da40:	9a01      	ldr	r2, [sp, #4]
 800da42:	3b04      	subs	r3, #4
 800da44:	429a      	cmp	r2, r3
 800da46:	d3f7      	bcc.n	800da38 <quorem+0x108>
 800da48:	6137      	str	r7, [r6, #16]
 800da4a:	e7e5      	b.n	800da18 <quorem+0xe8>

0800da4c <_dtoa_r>:
 800da4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da4e:	0014      	movs	r4, r2
 800da50:	001d      	movs	r5, r3
 800da52:	69c6      	ldr	r6, [r0, #28]
 800da54:	b09d      	sub	sp, #116	@ 0x74
 800da56:	940a      	str	r4, [sp, #40]	@ 0x28
 800da58:	950b      	str	r5, [sp, #44]	@ 0x2c
 800da5a:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800da5c:	9003      	str	r0, [sp, #12]
 800da5e:	2e00      	cmp	r6, #0
 800da60:	d10f      	bne.n	800da82 <_dtoa_r+0x36>
 800da62:	2010      	movs	r0, #16
 800da64:	f7ff f86c 	bl	800cb40 <malloc>
 800da68:	9b03      	ldr	r3, [sp, #12]
 800da6a:	1e02      	subs	r2, r0, #0
 800da6c:	61d8      	str	r0, [r3, #28]
 800da6e:	d104      	bne.n	800da7a <_dtoa_r+0x2e>
 800da70:	21ef      	movs	r1, #239	@ 0xef
 800da72:	4bc7      	ldr	r3, [pc, #796]	@ (800dd90 <_dtoa_r+0x344>)
 800da74:	48c7      	ldr	r0, [pc, #796]	@ (800dd94 <_dtoa_r+0x348>)
 800da76:	f001 fc6b 	bl	800f350 <__assert_func>
 800da7a:	6046      	str	r6, [r0, #4]
 800da7c:	6086      	str	r6, [r0, #8]
 800da7e:	6006      	str	r6, [r0, #0]
 800da80:	60c6      	str	r6, [r0, #12]
 800da82:	9b03      	ldr	r3, [sp, #12]
 800da84:	69db      	ldr	r3, [r3, #28]
 800da86:	6819      	ldr	r1, [r3, #0]
 800da88:	2900      	cmp	r1, #0
 800da8a:	d00b      	beq.n	800daa4 <_dtoa_r+0x58>
 800da8c:	685a      	ldr	r2, [r3, #4]
 800da8e:	2301      	movs	r3, #1
 800da90:	4093      	lsls	r3, r2
 800da92:	604a      	str	r2, [r1, #4]
 800da94:	608b      	str	r3, [r1, #8]
 800da96:	9803      	ldr	r0, [sp, #12]
 800da98:	f000 fe5a 	bl	800e750 <_Bfree>
 800da9c:	2200      	movs	r2, #0
 800da9e:	9b03      	ldr	r3, [sp, #12]
 800daa0:	69db      	ldr	r3, [r3, #28]
 800daa2:	601a      	str	r2, [r3, #0]
 800daa4:	2d00      	cmp	r5, #0
 800daa6:	da1e      	bge.n	800dae6 <_dtoa_r+0x9a>
 800daa8:	2301      	movs	r3, #1
 800daaa:	603b      	str	r3, [r7, #0]
 800daac:	006b      	lsls	r3, r5, #1
 800daae:	085b      	lsrs	r3, r3, #1
 800dab0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dab2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800dab4:	4bb8      	ldr	r3, [pc, #736]	@ (800dd98 <_dtoa_r+0x34c>)
 800dab6:	4ab8      	ldr	r2, [pc, #736]	@ (800dd98 <_dtoa_r+0x34c>)
 800dab8:	403b      	ands	r3, r7
 800daba:	4293      	cmp	r3, r2
 800dabc:	d116      	bne.n	800daec <_dtoa_r+0xa0>
 800dabe:	4bb7      	ldr	r3, [pc, #732]	@ (800dd9c <_dtoa_r+0x350>)
 800dac0:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800dac2:	6013      	str	r3, [r2, #0]
 800dac4:	033b      	lsls	r3, r7, #12
 800dac6:	0b1b      	lsrs	r3, r3, #12
 800dac8:	4323      	orrs	r3, r4
 800daca:	d101      	bne.n	800dad0 <_dtoa_r+0x84>
 800dacc:	f000 fd83 	bl	800e5d6 <_dtoa_r+0xb8a>
 800dad0:	4bb3      	ldr	r3, [pc, #716]	@ (800dda0 <_dtoa_r+0x354>)
 800dad2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800dad4:	9308      	str	r3, [sp, #32]
 800dad6:	2a00      	cmp	r2, #0
 800dad8:	d002      	beq.n	800dae0 <_dtoa_r+0x94>
 800dada:	4bb2      	ldr	r3, [pc, #712]	@ (800dda4 <_dtoa_r+0x358>)
 800dadc:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800dade:	6013      	str	r3, [r2, #0]
 800dae0:	9808      	ldr	r0, [sp, #32]
 800dae2:	b01d      	add	sp, #116	@ 0x74
 800dae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dae6:	2300      	movs	r3, #0
 800dae8:	603b      	str	r3, [r7, #0]
 800daea:	e7e2      	b.n	800dab2 <_dtoa_r+0x66>
 800daec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800daee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800daf0:	9212      	str	r2, [sp, #72]	@ 0x48
 800daf2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800daf4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800daf6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800daf8:	2200      	movs	r2, #0
 800dafa:	2300      	movs	r3, #0
 800dafc:	f7f2 fca6 	bl	800044c <__aeabi_dcmpeq>
 800db00:	1e06      	subs	r6, r0, #0
 800db02:	d00b      	beq.n	800db1c <_dtoa_r+0xd0>
 800db04:	2301      	movs	r3, #1
 800db06:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800db08:	6013      	str	r3, [r2, #0]
 800db0a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d002      	beq.n	800db16 <_dtoa_r+0xca>
 800db10:	4ba5      	ldr	r3, [pc, #660]	@ (800dda8 <_dtoa_r+0x35c>)
 800db12:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800db14:	6013      	str	r3, [r2, #0]
 800db16:	4ba5      	ldr	r3, [pc, #660]	@ (800ddac <_dtoa_r+0x360>)
 800db18:	9308      	str	r3, [sp, #32]
 800db1a:	e7e1      	b.n	800dae0 <_dtoa_r+0x94>
 800db1c:	ab1a      	add	r3, sp, #104	@ 0x68
 800db1e:	9301      	str	r3, [sp, #4]
 800db20:	ab1b      	add	r3, sp, #108	@ 0x6c
 800db22:	9300      	str	r3, [sp, #0]
 800db24:	9803      	ldr	r0, [sp, #12]
 800db26:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800db28:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800db2a:	f001 f911 	bl	800ed50 <__d2b>
 800db2e:	007a      	lsls	r2, r7, #1
 800db30:	9005      	str	r0, [sp, #20]
 800db32:	0d52      	lsrs	r2, r2, #21
 800db34:	d100      	bne.n	800db38 <_dtoa_r+0xec>
 800db36:	e07b      	b.n	800dc30 <_dtoa_r+0x1e4>
 800db38:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800db3a:	9618      	str	r6, [sp, #96]	@ 0x60
 800db3c:	0319      	lsls	r1, r3, #12
 800db3e:	4b9c      	ldr	r3, [pc, #624]	@ (800ddb0 <_dtoa_r+0x364>)
 800db40:	0b09      	lsrs	r1, r1, #12
 800db42:	430b      	orrs	r3, r1
 800db44:	499b      	ldr	r1, [pc, #620]	@ (800ddb4 <_dtoa_r+0x368>)
 800db46:	1857      	adds	r7, r2, r1
 800db48:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800db4a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800db4c:	0019      	movs	r1, r3
 800db4e:	2200      	movs	r2, #0
 800db50:	4b99      	ldr	r3, [pc, #612]	@ (800ddb8 <_dtoa_r+0x36c>)
 800db52:	f7f4 f841 	bl	8001bd8 <__aeabi_dsub>
 800db56:	4a99      	ldr	r2, [pc, #612]	@ (800ddbc <_dtoa_r+0x370>)
 800db58:	4b99      	ldr	r3, [pc, #612]	@ (800ddc0 <_dtoa_r+0x374>)
 800db5a:	f7f3 fd75 	bl	8001648 <__aeabi_dmul>
 800db5e:	4a99      	ldr	r2, [pc, #612]	@ (800ddc4 <_dtoa_r+0x378>)
 800db60:	4b99      	ldr	r3, [pc, #612]	@ (800ddc8 <_dtoa_r+0x37c>)
 800db62:	f7f2 fdc9 	bl	80006f8 <__aeabi_dadd>
 800db66:	0004      	movs	r4, r0
 800db68:	0038      	movs	r0, r7
 800db6a:	000d      	movs	r5, r1
 800db6c:	f7f4 fc2e 	bl	80023cc <__aeabi_i2d>
 800db70:	4a96      	ldr	r2, [pc, #600]	@ (800ddcc <_dtoa_r+0x380>)
 800db72:	4b97      	ldr	r3, [pc, #604]	@ (800ddd0 <_dtoa_r+0x384>)
 800db74:	f7f3 fd68 	bl	8001648 <__aeabi_dmul>
 800db78:	0002      	movs	r2, r0
 800db7a:	000b      	movs	r3, r1
 800db7c:	0020      	movs	r0, r4
 800db7e:	0029      	movs	r1, r5
 800db80:	f7f2 fdba 	bl	80006f8 <__aeabi_dadd>
 800db84:	0004      	movs	r4, r0
 800db86:	000d      	movs	r5, r1
 800db88:	f7f4 fbe4 	bl	8002354 <__aeabi_d2iz>
 800db8c:	2200      	movs	r2, #0
 800db8e:	9004      	str	r0, [sp, #16]
 800db90:	2300      	movs	r3, #0
 800db92:	0020      	movs	r0, r4
 800db94:	0029      	movs	r1, r5
 800db96:	f7f2 fc5f 	bl	8000458 <__aeabi_dcmplt>
 800db9a:	2800      	cmp	r0, #0
 800db9c:	d00b      	beq.n	800dbb6 <_dtoa_r+0x16a>
 800db9e:	9804      	ldr	r0, [sp, #16]
 800dba0:	f7f4 fc14 	bl	80023cc <__aeabi_i2d>
 800dba4:	002b      	movs	r3, r5
 800dba6:	0022      	movs	r2, r4
 800dba8:	f7f2 fc50 	bl	800044c <__aeabi_dcmpeq>
 800dbac:	4243      	negs	r3, r0
 800dbae:	4158      	adcs	r0, r3
 800dbb0:	9b04      	ldr	r3, [sp, #16]
 800dbb2:	1a1b      	subs	r3, r3, r0
 800dbb4:	9304      	str	r3, [sp, #16]
 800dbb6:	2301      	movs	r3, #1
 800dbb8:	9315      	str	r3, [sp, #84]	@ 0x54
 800dbba:	9b04      	ldr	r3, [sp, #16]
 800dbbc:	2b16      	cmp	r3, #22
 800dbbe:	d810      	bhi.n	800dbe2 <_dtoa_r+0x196>
 800dbc0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800dbc2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800dbc4:	9a04      	ldr	r2, [sp, #16]
 800dbc6:	4b83      	ldr	r3, [pc, #524]	@ (800ddd4 <_dtoa_r+0x388>)
 800dbc8:	00d2      	lsls	r2, r2, #3
 800dbca:	189b      	adds	r3, r3, r2
 800dbcc:	681a      	ldr	r2, [r3, #0]
 800dbce:	685b      	ldr	r3, [r3, #4]
 800dbd0:	f7f2 fc42 	bl	8000458 <__aeabi_dcmplt>
 800dbd4:	2800      	cmp	r0, #0
 800dbd6:	d047      	beq.n	800dc68 <_dtoa_r+0x21c>
 800dbd8:	9b04      	ldr	r3, [sp, #16]
 800dbda:	3b01      	subs	r3, #1
 800dbdc:	9304      	str	r3, [sp, #16]
 800dbde:	2300      	movs	r3, #0
 800dbe0:	9315      	str	r3, [sp, #84]	@ 0x54
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800dbe6:	9206      	str	r2, [sp, #24]
 800dbe8:	1bdb      	subs	r3, r3, r7
 800dbea:	1e5a      	subs	r2, r3, #1
 800dbec:	d53e      	bpl.n	800dc6c <_dtoa_r+0x220>
 800dbee:	2201      	movs	r2, #1
 800dbf0:	1ad3      	subs	r3, r2, r3
 800dbf2:	9306      	str	r3, [sp, #24]
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	930d      	str	r3, [sp, #52]	@ 0x34
 800dbf8:	9b04      	ldr	r3, [sp, #16]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	db38      	blt.n	800dc70 <_dtoa_r+0x224>
 800dbfe:	9a04      	ldr	r2, [sp, #16]
 800dc00:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dc02:	4694      	mov	ip, r2
 800dc04:	4463      	add	r3, ip
 800dc06:	930d      	str	r3, [sp, #52]	@ 0x34
 800dc08:	2300      	movs	r3, #0
 800dc0a:	9214      	str	r2, [sp, #80]	@ 0x50
 800dc0c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dc0e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800dc10:	2401      	movs	r4, #1
 800dc12:	2b09      	cmp	r3, #9
 800dc14:	d867      	bhi.n	800dce6 <_dtoa_r+0x29a>
 800dc16:	2b05      	cmp	r3, #5
 800dc18:	dd02      	ble.n	800dc20 <_dtoa_r+0x1d4>
 800dc1a:	2400      	movs	r4, #0
 800dc1c:	3b04      	subs	r3, #4
 800dc1e:	9322      	str	r3, [sp, #136]	@ 0x88
 800dc20:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800dc22:	1e98      	subs	r0, r3, #2
 800dc24:	2803      	cmp	r0, #3
 800dc26:	d867      	bhi.n	800dcf8 <_dtoa_r+0x2ac>
 800dc28:	f7f2 fa76 	bl	8000118 <__gnu_thumb1_case_uqi>
 800dc2c:	5b383a2b 	.word	0x5b383a2b
 800dc30:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800dc32:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800dc34:	18f6      	adds	r6, r6, r3
 800dc36:	4b68      	ldr	r3, [pc, #416]	@ (800ddd8 <_dtoa_r+0x38c>)
 800dc38:	18f2      	adds	r2, r6, r3
 800dc3a:	2a20      	cmp	r2, #32
 800dc3c:	dd0f      	ble.n	800dc5e <_dtoa_r+0x212>
 800dc3e:	2340      	movs	r3, #64	@ 0x40
 800dc40:	1a9b      	subs	r3, r3, r2
 800dc42:	409f      	lsls	r7, r3
 800dc44:	4b65      	ldr	r3, [pc, #404]	@ (800dddc <_dtoa_r+0x390>)
 800dc46:	0038      	movs	r0, r7
 800dc48:	18f3      	adds	r3, r6, r3
 800dc4a:	40dc      	lsrs	r4, r3
 800dc4c:	4320      	orrs	r0, r4
 800dc4e:	f7f4 fbeb 	bl	8002428 <__aeabi_ui2d>
 800dc52:	2201      	movs	r2, #1
 800dc54:	4b62      	ldr	r3, [pc, #392]	@ (800dde0 <_dtoa_r+0x394>)
 800dc56:	1e77      	subs	r7, r6, #1
 800dc58:	18cb      	adds	r3, r1, r3
 800dc5a:	9218      	str	r2, [sp, #96]	@ 0x60
 800dc5c:	e776      	b.n	800db4c <_dtoa_r+0x100>
 800dc5e:	2320      	movs	r3, #32
 800dc60:	0020      	movs	r0, r4
 800dc62:	1a9b      	subs	r3, r3, r2
 800dc64:	4098      	lsls	r0, r3
 800dc66:	e7f2      	b.n	800dc4e <_dtoa_r+0x202>
 800dc68:	9015      	str	r0, [sp, #84]	@ 0x54
 800dc6a:	e7ba      	b.n	800dbe2 <_dtoa_r+0x196>
 800dc6c:	920d      	str	r2, [sp, #52]	@ 0x34
 800dc6e:	e7c3      	b.n	800dbf8 <_dtoa_r+0x1ac>
 800dc70:	9b06      	ldr	r3, [sp, #24]
 800dc72:	9a04      	ldr	r2, [sp, #16]
 800dc74:	1a9b      	subs	r3, r3, r2
 800dc76:	9306      	str	r3, [sp, #24]
 800dc78:	4253      	negs	r3, r2
 800dc7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	9314      	str	r3, [sp, #80]	@ 0x50
 800dc80:	e7c5      	b.n	800dc0e <_dtoa_r+0x1c2>
 800dc82:	2300      	movs	r3, #0
 800dc84:	9310      	str	r3, [sp, #64]	@ 0x40
 800dc86:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dc88:	930e      	str	r3, [sp, #56]	@ 0x38
 800dc8a:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	dc13      	bgt.n	800dcb8 <_dtoa_r+0x26c>
 800dc90:	2301      	movs	r3, #1
 800dc92:	001a      	movs	r2, r3
 800dc94:	930e      	str	r3, [sp, #56]	@ 0x38
 800dc96:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc98:	9223      	str	r2, [sp, #140]	@ 0x8c
 800dc9a:	e00d      	b.n	800dcb8 <_dtoa_r+0x26c>
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	e7f1      	b.n	800dc84 <_dtoa_r+0x238>
 800dca0:	2300      	movs	r3, #0
 800dca2:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dca4:	9310      	str	r3, [sp, #64]	@ 0x40
 800dca6:	4694      	mov	ip, r2
 800dca8:	9b04      	ldr	r3, [sp, #16]
 800dcaa:	4463      	add	r3, ip
 800dcac:	930e      	str	r3, [sp, #56]	@ 0x38
 800dcae:	3301      	adds	r3, #1
 800dcb0:	9309      	str	r3, [sp, #36]	@ 0x24
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	dc00      	bgt.n	800dcb8 <_dtoa_r+0x26c>
 800dcb6:	2301      	movs	r3, #1
 800dcb8:	9a03      	ldr	r2, [sp, #12]
 800dcba:	2100      	movs	r1, #0
 800dcbc:	69d0      	ldr	r0, [r2, #28]
 800dcbe:	2204      	movs	r2, #4
 800dcc0:	0015      	movs	r5, r2
 800dcc2:	3514      	adds	r5, #20
 800dcc4:	429d      	cmp	r5, r3
 800dcc6:	d91b      	bls.n	800dd00 <_dtoa_r+0x2b4>
 800dcc8:	6041      	str	r1, [r0, #4]
 800dcca:	9803      	ldr	r0, [sp, #12]
 800dccc:	f000 fcfc 	bl	800e6c8 <_Balloc>
 800dcd0:	9008      	str	r0, [sp, #32]
 800dcd2:	2800      	cmp	r0, #0
 800dcd4:	d117      	bne.n	800dd06 <_dtoa_r+0x2ba>
 800dcd6:	21b0      	movs	r1, #176	@ 0xb0
 800dcd8:	4b42      	ldr	r3, [pc, #264]	@ (800dde4 <_dtoa_r+0x398>)
 800dcda:	482e      	ldr	r0, [pc, #184]	@ (800dd94 <_dtoa_r+0x348>)
 800dcdc:	9a08      	ldr	r2, [sp, #32]
 800dcde:	31ff      	adds	r1, #255	@ 0xff
 800dce0:	e6c9      	b.n	800da76 <_dtoa_r+0x2a>
 800dce2:	2301      	movs	r3, #1
 800dce4:	e7dd      	b.n	800dca2 <_dtoa_r+0x256>
 800dce6:	2300      	movs	r3, #0
 800dce8:	9410      	str	r4, [sp, #64]	@ 0x40
 800dcea:	9322      	str	r3, [sp, #136]	@ 0x88
 800dcec:	3b01      	subs	r3, #1
 800dcee:	930e      	str	r3, [sp, #56]	@ 0x38
 800dcf0:	9309      	str	r3, [sp, #36]	@ 0x24
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	3313      	adds	r3, #19
 800dcf6:	e7cf      	b.n	800dc98 <_dtoa_r+0x24c>
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	9310      	str	r3, [sp, #64]	@ 0x40
 800dcfc:	3b02      	subs	r3, #2
 800dcfe:	e7f6      	b.n	800dcee <_dtoa_r+0x2a2>
 800dd00:	3101      	adds	r1, #1
 800dd02:	0052      	lsls	r2, r2, #1
 800dd04:	e7dc      	b.n	800dcc0 <_dtoa_r+0x274>
 800dd06:	9b03      	ldr	r3, [sp, #12]
 800dd08:	9a08      	ldr	r2, [sp, #32]
 800dd0a:	69db      	ldr	r3, [r3, #28]
 800dd0c:	601a      	str	r2, [r3, #0]
 800dd0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd10:	2b0e      	cmp	r3, #14
 800dd12:	d900      	bls.n	800dd16 <_dtoa_r+0x2ca>
 800dd14:	e0d9      	b.n	800deca <_dtoa_r+0x47e>
 800dd16:	2c00      	cmp	r4, #0
 800dd18:	d100      	bne.n	800dd1c <_dtoa_r+0x2d0>
 800dd1a:	e0d6      	b.n	800deca <_dtoa_r+0x47e>
 800dd1c:	9b04      	ldr	r3, [sp, #16]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	dd64      	ble.n	800ddec <_dtoa_r+0x3a0>
 800dd22:	210f      	movs	r1, #15
 800dd24:	9a04      	ldr	r2, [sp, #16]
 800dd26:	4b2b      	ldr	r3, [pc, #172]	@ (800ddd4 <_dtoa_r+0x388>)
 800dd28:	400a      	ands	r2, r1
 800dd2a:	00d2      	lsls	r2, r2, #3
 800dd2c:	189b      	adds	r3, r3, r2
 800dd2e:	681e      	ldr	r6, [r3, #0]
 800dd30:	685f      	ldr	r7, [r3, #4]
 800dd32:	9b04      	ldr	r3, [sp, #16]
 800dd34:	2402      	movs	r4, #2
 800dd36:	111d      	asrs	r5, r3, #4
 800dd38:	05db      	lsls	r3, r3, #23
 800dd3a:	d50a      	bpl.n	800dd52 <_dtoa_r+0x306>
 800dd3c:	4b2a      	ldr	r3, [pc, #168]	@ (800dde8 <_dtoa_r+0x39c>)
 800dd3e:	400d      	ands	r5, r1
 800dd40:	6a1a      	ldr	r2, [r3, #32]
 800dd42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd44:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800dd46:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800dd48:	f7f3 f83a 	bl	8000dc0 <__aeabi_ddiv>
 800dd4c:	900a      	str	r0, [sp, #40]	@ 0x28
 800dd4e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800dd50:	3401      	adds	r4, #1
 800dd52:	4b25      	ldr	r3, [pc, #148]	@ (800dde8 <_dtoa_r+0x39c>)
 800dd54:	930c      	str	r3, [sp, #48]	@ 0x30
 800dd56:	2d00      	cmp	r5, #0
 800dd58:	d108      	bne.n	800dd6c <_dtoa_r+0x320>
 800dd5a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800dd5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dd5e:	0032      	movs	r2, r6
 800dd60:	003b      	movs	r3, r7
 800dd62:	f7f3 f82d 	bl	8000dc0 <__aeabi_ddiv>
 800dd66:	900a      	str	r0, [sp, #40]	@ 0x28
 800dd68:	910b      	str	r1, [sp, #44]	@ 0x2c
 800dd6a:	e05a      	b.n	800de22 <_dtoa_r+0x3d6>
 800dd6c:	2301      	movs	r3, #1
 800dd6e:	421d      	tst	r5, r3
 800dd70:	d009      	beq.n	800dd86 <_dtoa_r+0x33a>
 800dd72:	18e4      	adds	r4, r4, r3
 800dd74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dd76:	0030      	movs	r0, r6
 800dd78:	681a      	ldr	r2, [r3, #0]
 800dd7a:	685b      	ldr	r3, [r3, #4]
 800dd7c:	0039      	movs	r1, r7
 800dd7e:	f7f3 fc63 	bl	8001648 <__aeabi_dmul>
 800dd82:	0006      	movs	r6, r0
 800dd84:	000f      	movs	r7, r1
 800dd86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dd88:	106d      	asrs	r5, r5, #1
 800dd8a:	3308      	adds	r3, #8
 800dd8c:	e7e2      	b.n	800dd54 <_dtoa_r+0x308>
 800dd8e:	46c0      	nop			@ (mov r8, r8)
 800dd90:	080199bd 	.word	0x080199bd
 800dd94:	080199d4 	.word	0x080199d4
 800dd98:	7ff00000 	.word	0x7ff00000
 800dd9c:	0000270f 	.word	0x0000270f
 800dda0:	080199b9 	.word	0x080199b9
 800dda4:	080199bc 	.word	0x080199bc
 800dda8:	0801998d 	.word	0x0801998d
 800ddac:	0801998c 	.word	0x0801998c
 800ddb0:	3ff00000 	.word	0x3ff00000
 800ddb4:	fffffc01 	.word	0xfffffc01
 800ddb8:	3ff80000 	.word	0x3ff80000
 800ddbc:	636f4361 	.word	0x636f4361
 800ddc0:	3fd287a7 	.word	0x3fd287a7
 800ddc4:	8b60c8b3 	.word	0x8b60c8b3
 800ddc8:	3fc68a28 	.word	0x3fc68a28
 800ddcc:	509f79fb 	.word	0x509f79fb
 800ddd0:	3fd34413 	.word	0x3fd34413
 800ddd4:	08019ad0 	.word	0x08019ad0
 800ddd8:	00000432 	.word	0x00000432
 800dddc:	00000412 	.word	0x00000412
 800dde0:	fe100000 	.word	0xfe100000
 800dde4:	08019a2c 	.word	0x08019a2c
 800dde8:	08019aa8 	.word	0x08019aa8
 800ddec:	9b04      	ldr	r3, [sp, #16]
 800ddee:	2402      	movs	r4, #2
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d016      	beq.n	800de22 <_dtoa_r+0x3d6>
 800ddf4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800ddf6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ddf8:	220f      	movs	r2, #15
 800ddfa:	425d      	negs	r5, r3
 800ddfc:	402a      	ands	r2, r5
 800ddfe:	4bd7      	ldr	r3, [pc, #860]	@ (800e15c <_dtoa_r+0x710>)
 800de00:	00d2      	lsls	r2, r2, #3
 800de02:	189b      	adds	r3, r3, r2
 800de04:	681a      	ldr	r2, [r3, #0]
 800de06:	685b      	ldr	r3, [r3, #4]
 800de08:	f7f3 fc1e 	bl	8001648 <__aeabi_dmul>
 800de0c:	2701      	movs	r7, #1
 800de0e:	2300      	movs	r3, #0
 800de10:	900a      	str	r0, [sp, #40]	@ 0x28
 800de12:	910b      	str	r1, [sp, #44]	@ 0x2c
 800de14:	4ed2      	ldr	r6, [pc, #840]	@ (800e160 <_dtoa_r+0x714>)
 800de16:	112d      	asrs	r5, r5, #4
 800de18:	2d00      	cmp	r5, #0
 800de1a:	d000      	beq.n	800de1e <_dtoa_r+0x3d2>
 800de1c:	e0ba      	b.n	800df94 <_dtoa_r+0x548>
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d1a1      	bne.n	800dd66 <_dtoa_r+0x31a>
 800de22:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800de24:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800de26:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d100      	bne.n	800de2e <_dtoa_r+0x3e2>
 800de2c:	e0bd      	b.n	800dfaa <_dtoa_r+0x55e>
 800de2e:	2200      	movs	r2, #0
 800de30:	0030      	movs	r0, r6
 800de32:	0039      	movs	r1, r7
 800de34:	4bcb      	ldr	r3, [pc, #812]	@ (800e164 <_dtoa_r+0x718>)
 800de36:	f7f2 fb0f 	bl	8000458 <__aeabi_dcmplt>
 800de3a:	2800      	cmp	r0, #0
 800de3c:	d100      	bne.n	800de40 <_dtoa_r+0x3f4>
 800de3e:	e0b4      	b.n	800dfaa <_dtoa_r+0x55e>
 800de40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de42:	2b00      	cmp	r3, #0
 800de44:	d100      	bne.n	800de48 <_dtoa_r+0x3fc>
 800de46:	e0b0      	b.n	800dfaa <_dtoa_r+0x55e>
 800de48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	dd39      	ble.n	800dec2 <_dtoa_r+0x476>
 800de4e:	9b04      	ldr	r3, [sp, #16]
 800de50:	2200      	movs	r2, #0
 800de52:	3b01      	subs	r3, #1
 800de54:	930c      	str	r3, [sp, #48]	@ 0x30
 800de56:	0030      	movs	r0, r6
 800de58:	4bc3      	ldr	r3, [pc, #780]	@ (800e168 <_dtoa_r+0x71c>)
 800de5a:	0039      	movs	r1, r7
 800de5c:	f7f3 fbf4 	bl	8001648 <__aeabi_dmul>
 800de60:	900a      	str	r0, [sp, #40]	@ 0x28
 800de62:	910b      	str	r1, [sp, #44]	@ 0x2c
 800de64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de66:	3401      	adds	r4, #1
 800de68:	0020      	movs	r0, r4
 800de6a:	9311      	str	r3, [sp, #68]	@ 0x44
 800de6c:	f7f4 faae 	bl	80023cc <__aeabi_i2d>
 800de70:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800de72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de74:	f7f3 fbe8 	bl	8001648 <__aeabi_dmul>
 800de78:	4bbc      	ldr	r3, [pc, #752]	@ (800e16c <_dtoa_r+0x720>)
 800de7a:	2200      	movs	r2, #0
 800de7c:	f7f2 fc3c 	bl	80006f8 <__aeabi_dadd>
 800de80:	4bbb      	ldr	r3, [pc, #748]	@ (800e170 <_dtoa_r+0x724>)
 800de82:	0006      	movs	r6, r0
 800de84:	18cf      	adds	r7, r1, r3
 800de86:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d000      	beq.n	800de8e <_dtoa_r+0x442>
 800de8c:	e091      	b.n	800dfb2 <_dtoa_r+0x566>
 800de8e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800de90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800de92:	2200      	movs	r2, #0
 800de94:	4bb7      	ldr	r3, [pc, #732]	@ (800e174 <_dtoa_r+0x728>)
 800de96:	f7f3 fe9f 	bl	8001bd8 <__aeabi_dsub>
 800de9a:	0032      	movs	r2, r6
 800de9c:	003b      	movs	r3, r7
 800de9e:	0004      	movs	r4, r0
 800dea0:	000d      	movs	r5, r1
 800dea2:	f7f2 faed 	bl	8000480 <__aeabi_dcmpgt>
 800dea6:	2800      	cmp	r0, #0
 800dea8:	d000      	beq.n	800deac <_dtoa_r+0x460>
 800deaa:	e29d      	b.n	800e3e8 <_dtoa_r+0x99c>
 800deac:	2180      	movs	r1, #128	@ 0x80
 800deae:	0609      	lsls	r1, r1, #24
 800deb0:	187b      	adds	r3, r7, r1
 800deb2:	0032      	movs	r2, r6
 800deb4:	0020      	movs	r0, r4
 800deb6:	0029      	movs	r1, r5
 800deb8:	f7f2 face 	bl	8000458 <__aeabi_dcmplt>
 800debc:	2800      	cmp	r0, #0
 800debe:	d000      	beq.n	800dec2 <_dtoa_r+0x476>
 800dec0:	e130      	b.n	800e124 <_dtoa_r+0x6d8>
 800dec2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dec4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800dec6:	930a      	str	r3, [sp, #40]	@ 0x28
 800dec8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800deca:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800decc:	2b00      	cmp	r3, #0
 800dece:	da00      	bge.n	800ded2 <_dtoa_r+0x486>
 800ded0:	e177      	b.n	800e1c2 <_dtoa_r+0x776>
 800ded2:	9a04      	ldr	r2, [sp, #16]
 800ded4:	2a0e      	cmp	r2, #14
 800ded6:	dd00      	ble.n	800deda <_dtoa_r+0x48e>
 800ded8:	e173      	b.n	800e1c2 <_dtoa_r+0x776>
 800deda:	4ba0      	ldr	r3, [pc, #640]	@ (800e15c <_dtoa_r+0x710>)
 800dedc:	00d2      	lsls	r2, r2, #3
 800dede:	189b      	adds	r3, r3, r2
 800dee0:	685c      	ldr	r4, [r3, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	9306      	str	r3, [sp, #24]
 800dee6:	9407      	str	r4, [sp, #28]
 800dee8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800deea:	2b00      	cmp	r3, #0
 800deec:	da03      	bge.n	800def6 <_dtoa_r+0x4aa>
 800deee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800def0:	2b00      	cmp	r3, #0
 800def2:	dc00      	bgt.n	800def6 <_dtoa_r+0x4aa>
 800def4:	e106      	b.n	800e104 <_dtoa_r+0x6b8>
 800def6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800def8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800defa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800defc:	9d08      	ldr	r5, [sp, #32]
 800defe:	3b01      	subs	r3, #1
 800df00:	195b      	adds	r3, r3, r5
 800df02:	930a      	str	r3, [sp, #40]	@ 0x28
 800df04:	9a06      	ldr	r2, [sp, #24]
 800df06:	9b07      	ldr	r3, [sp, #28]
 800df08:	0030      	movs	r0, r6
 800df0a:	0039      	movs	r1, r7
 800df0c:	f7f2 ff58 	bl	8000dc0 <__aeabi_ddiv>
 800df10:	f7f4 fa20 	bl	8002354 <__aeabi_d2iz>
 800df14:	9009      	str	r0, [sp, #36]	@ 0x24
 800df16:	f7f4 fa59 	bl	80023cc <__aeabi_i2d>
 800df1a:	9a06      	ldr	r2, [sp, #24]
 800df1c:	9b07      	ldr	r3, [sp, #28]
 800df1e:	f7f3 fb93 	bl	8001648 <__aeabi_dmul>
 800df22:	0002      	movs	r2, r0
 800df24:	000b      	movs	r3, r1
 800df26:	0030      	movs	r0, r6
 800df28:	0039      	movs	r1, r7
 800df2a:	f7f3 fe55 	bl	8001bd8 <__aeabi_dsub>
 800df2e:	002b      	movs	r3, r5
 800df30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df32:	3501      	adds	r5, #1
 800df34:	3230      	adds	r2, #48	@ 0x30
 800df36:	701a      	strb	r2, [r3, #0]
 800df38:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800df3a:	002c      	movs	r4, r5
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d000      	beq.n	800df42 <_dtoa_r+0x4f6>
 800df40:	e131      	b.n	800e1a6 <_dtoa_r+0x75a>
 800df42:	0002      	movs	r2, r0
 800df44:	000b      	movs	r3, r1
 800df46:	f7f2 fbd7 	bl	80006f8 <__aeabi_dadd>
 800df4a:	9a06      	ldr	r2, [sp, #24]
 800df4c:	9b07      	ldr	r3, [sp, #28]
 800df4e:	0006      	movs	r6, r0
 800df50:	000f      	movs	r7, r1
 800df52:	f7f2 fa95 	bl	8000480 <__aeabi_dcmpgt>
 800df56:	2800      	cmp	r0, #0
 800df58:	d000      	beq.n	800df5c <_dtoa_r+0x510>
 800df5a:	e10f      	b.n	800e17c <_dtoa_r+0x730>
 800df5c:	9a06      	ldr	r2, [sp, #24]
 800df5e:	9b07      	ldr	r3, [sp, #28]
 800df60:	0030      	movs	r0, r6
 800df62:	0039      	movs	r1, r7
 800df64:	f7f2 fa72 	bl	800044c <__aeabi_dcmpeq>
 800df68:	2800      	cmp	r0, #0
 800df6a:	d003      	beq.n	800df74 <_dtoa_r+0x528>
 800df6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df6e:	07dd      	lsls	r5, r3, #31
 800df70:	d500      	bpl.n	800df74 <_dtoa_r+0x528>
 800df72:	e103      	b.n	800e17c <_dtoa_r+0x730>
 800df74:	9905      	ldr	r1, [sp, #20]
 800df76:	9803      	ldr	r0, [sp, #12]
 800df78:	f000 fbea 	bl	800e750 <_Bfree>
 800df7c:	2300      	movs	r3, #0
 800df7e:	7023      	strb	r3, [r4, #0]
 800df80:	9b04      	ldr	r3, [sp, #16]
 800df82:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800df84:	3301      	adds	r3, #1
 800df86:	6013      	str	r3, [r2, #0]
 800df88:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d100      	bne.n	800df90 <_dtoa_r+0x544>
 800df8e:	e5a7      	b.n	800dae0 <_dtoa_r+0x94>
 800df90:	601c      	str	r4, [r3, #0]
 800df92:	e5a5      	b.n	800dae0 <_dtoa_r+0x94>
 800df94:	423d      	tst	r5, r7
 800df96:	d005      	beq.n	800dfa4 <_dtoa_r+0x558>
 800df98:	6832      	ldr	r2, [r6, #0]
 800df9a:	6873      	ldr	r3, [r6, #4]
 800df9c:	f7f3 fb54 	bl	8001648 <__aeabi_dmul>
 800dfa0:	003b      	movs	r3, r7
 800dfa2:	3401      	adds	r4, #1
 800dfa4:	106d      	asrs	r5, r5, #1
 800dfa6:	3608      	adds	r6, #8
 800dfa8:	e736      	b.n	800de18 <_dtoa_r+0x3cc>
 800dfaa:	9b04      	ldr	r3, [sp, #16]
 800dfac:	930c      	str	r3, [sp, #48]	@ 0x30
 800dfae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfb0:	e75a      	b.n	800de68 <_dtoa_r+0x41c>
 800dfb2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dfb4:	4b69      	ldr	r3, [pc, #420]	@ (800e15c <_dtoa_r+0x710>)
 800dfb6:	3a01      	subs	r2, #1
 800dfb8:	00d2      	lsls	r2, r2, #3
 800dfba:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800dfbc:	189b      	adds	r3, r3, r2
 800dfbe:	681a      	ldr	r2, [r3, #0]
 800dfc0:	685b      	ldr	r3, [r3, #4]
 800dfc2:	2900      	cmp	r1, #0
 800dfc4:	d04c      	beq.n	800e060 <_dtoa_r+0x614>
 800dfc6:	2000      	movs	r0, #0
 800dfc8:	496b      	ldr	r1, [pc, #428]	@ (800e178 <_dtoa_r+0x72c>)
 800dfca:	f7f2 fef9 	bl	8000dc0 <__aeabi_ddiv>
 800dfce:	0032      	movs	r2, r6
 800dfd0:	003b      	movs	r3, r7
 800dfd2:	f7f3 fe01 	bl	8001bd8 <__aeabi_dsub>
 800dfd6:	9a08      	ldr	r2, [sp, #32]
 800dfd8:	0006      	movs	r6, r0
 800dfda:	4694      	mov	ip, r2
 800dfdc:	000f      	movs	r7, r1
 800dfde:	9b08      	ldr	r3, [sp, #32]
 800dfe0:	9316      	str	r3, [sp, #88]	@ 0x58
 800dfe2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dfe4:	4463      	add	r3, ip
 800dfe6:	9311      	str	r3, [sp, #68]	@ 0x44
 800dfe8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800dfea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dfec:	f7f4 f9b2 	bl	8002354 <__aeabi_d2iz>
 800dff0:	0005      	movs	r5, r0
 800dff2:	f7f4 f9eb 	bl	80023cc <__aeabi_i2d>
 800dff6:	0002      	movs	r2, r0
 800dff8:	000b      	movs	r3, r1
 800dffa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800dffc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dffe:	f7f3 fdeb 	bl	8001bd8 <__aeabi_dsub>
 800e002:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e004:	3530      	adds	r5, #48	@ 0x30
 800e006:	1c5c      	adds	r4, r3, #1
 800e008:	701d      	strb	r5, [r3, #0]
 800e00a:	0032      	movs	r2, r6
 800e00c:	003b      	movs	r3, r7
 800e00e:	900a      	str	r0, [sp, #40]	@ 0x28
 800e010:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e012:	f7f2 fa21 	bl	8000458 <__aeabi_dcmplt>
 800e016:	2800      	cmp	r0, #0
 800e018:	d16a      	bne.n	800e0f0 <_dtoa_r+0x6a4>
 800e01a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e01c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e01e:	2000      	movs	r0, #0
 800e020:	4950      	ldr	r1, [pc, #320]	@ (800e164 <_dtoa_r+0x718>)
 800e022:	f7f3 fdd9 	bl	8001bd8 <__aeabi_dsub>
 800e026:	0032      	movs	r2, r6
 800e028:	003b      	movs	r3, r7
 800e02a:	f7f2 fa15 	bl	8000458 <__aeabi_dcmplt>
 800e02e:	2800      	cmp	r0, #0
 800e030:	d000      	beq.n	800e034 <_dtoa_r+0x5e8>
 800e032:	e0a5      	b.n	800e180 <_dtoa_r+0x734>
 800e034:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e036:	42a3      	cmp	r3, r4
 800e038:	d100      	bne.n	800e03c <_dtoa_r+0x5f0>
 800e03a:	e742      	b.n	800dec2 <_dtoa_r+0x476>
 800e03c:	2200      	movs	r2, #0
 800e03e:	0030      	movs	r0, r6
 800e040:	0039      	movs	r1, r7
 800e042:	4b49      	ldr	r3, [pc, #292]	@ (800e168 <_dtoa_r+0x71c>)
 800e044:	f7f3 fb00 	bl	8001648 <__aeabi_dmul>
 800e048:	2200      	movs	r2, #0
 800e04a:	0006      	movs	r6, r0
 800e04c:	000f      	movs	r7, r1
 800e04e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e050:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e052:	4b45      	ldr	r3, [pc, #276]	@ (800e168 <_dtoa_r+0x71c>)
 800e054:	f7f3 faf8 	bl	8001648 <__aeabi_dmul>
 800e058:	9416      	str	r4, [sp, #88]	@ 0x58
 800e05a:	900a      	str	r0, [sp, #40]	@ 0x28
 800e05c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e05e:	e7c3      	b.n	800dfe8 <_dtoa_r+0x59c>
 800e060:	0030      	movs	r0, r6
 800e062:	0039      	movs	r1, r7
 800e064:	f7f3 faf0 	bl	8001648 <__aeabi_dmul>
 800e068:	9d08      	ldr	r5, [sp, #32]
 800e06a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e06c:	002b      	movs	r3, r5
 800e06e:	4694      	mov	ip, r2
 800e070:	9016      	str	r0, [sp, #88]	@ 0x58
 800e072:	9117      	str	r1, [sp, #92]	@ 0x5c
 800e074:	4463      	add	r3, ip
 800e076:	9319      	str	r3, [sp, #100]	@ 0x64
 800e078:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e07a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e07c:	f7f4 f96a 	bl	8002354 <__aeabi_d2iz>
 800e080:	0004      	movs	r4, r0
 800e082:	f7f4 f9a3 	bl	80023cc <__aeabi_i2d>
 800e086:	000b      	movs	r3, r1
 800e088:	0002      	movs	r2, r0
 800e08a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e08c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e08e:	f7f3 fda3 	bl	8001bd8 <__aeabi_dsub>
 800e092:	3430      	adds	r4, #48	@ 0x30
 800e094:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e096:	702c      	strb	r4, [r5, #0]
 800e098:	3501      	adds	r5, #1
 800e09a:	0006      	movs	r6, r0
 800e09c:	000f      	movs	r7, r1
 800e09e:	42ab      	cmp	r3, r5
 800e0a0:	d129      	bne.n	800e0f6 <_dtoa_r+0x6aa>
 800e0a2:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800e0a4:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800e0a6:	9b08      	ldr	r3, [sp, #32]
 800e0a8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800e0aa:	469c      	mov	ip, r3
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	4b32      	ldr	r3, [pc, #200]	@ (800e178 <_dtoa_r+0x72c>)
 800e0b0:	4464      	add	r4, ip
 800e0b2:	f7f2 fb21 	bl	80006f8 <__aeabi_dadd>
 800e0b6:	0002      	movs	r2, r0
 800e0b8:	000b      	movs	r3, r1
 800e0ba:	0030      	movs	r0, r6
 800e0bc:	0039      	movs	r1, r7
 800e0be:	f7f2 f9df 	bl	8000480 <__aeabi_dcmpgt>
 800e0c2:	2800      	cmp	r0, #0
 800e0c4:	d15c      	bne.n	800e180 <_dtoa_r+0x734>
 800e0c6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e0c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e0ca:	2000      	movs	r0, #0
 800e0cc:	492a      	ldr	r1, [pc, #168]	@ (800e178 <_dtoa_r+0x72c>)
 800e0ce:	f7f3 fd83 	bl	8001bd8 <__aeabi_dsub>
 800e0d2:	0002      	movs	r2, r0
 800e0d4:	000b      	movs	r3, r1
 800e0d6:	0030      	movs	r0, r6
 800e0d8:	0039      	movs	r1, r7
 800e0da:	f7f2 f9bd 	bl	8000458 <__aeabi_dcmplt>
 800e0de:	2800      	cmp	r0, #0
 800e0e0:	d100      	bne.n	800e0e4 <_dtoa_r+0x698>
 800e0e2:	e6ee      	b.n	800dec2 <_dtoa_r+0x476>
 800e0e4:	0023      	movs	r3, r4
 800e0e6:	3c01      	subs	r4, #1
 800e0e8:	7822      	ldrb	r2, [r4, #0]
 800e0ea:	2a30      	cmp	r2, #48	@ 0x30
 800e0ec:	d0fa      	beq.n	800e0e4 <_dtoa_r+0x698>
 800e0ee:	001c      	movs	r4, r3
 800e0f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e0f2:	9304      	str	r3, [sp, #16]
 800e0f4:	e73e      	b.n	800df74 <_dtoa_r+0x528>
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	4b1b      	ldr	r3, [pc, #108]	@ (800e168 <_dtoa_r+0x71c>)
 800e0fa:	f7f3 faa5 	bl	8001648 <__aeabi_dmul>
 800e0fe:	900a      	str	r0, [sp, #40]	@ 0x28
 800e100:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e102:	e7b9      	b.n	800e078 <_dtoa_r+0x62c>
 800e104:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e106:	2b00      	cmp	r3, #0
 800e108:	d10c      	bne.n	800e124 <_dtoa_r+0x6d8>
 800e10a:	9806      	ldr	r0, [sp, #24]
 800e10c:	9907      	ldr	r1, [sp, #28]
 800e10e:	2200      	movs	r2, #0
 800e110:	4b18      	ldr	r3, [pc, #96]	@ (800e174 <_dtoa_r+0x728>)
 800e112:	f7f3 fa99 	bl	8001648 <__aeabi_dmul>
 800e116:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e118:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e11a:	f7f2 f9bb 	bl	8000494 <__aeabi_dcmpge>
 800e11e:	2800      	cmp	r0, #0
 800e120:	d100      	bne.n	800e124 <_dtoa_r+0x6d8>
 800e122:	e164      	b.n	800e3ee <_dtoa_r+0x9a2>
 800e124:	2600      	movs	r6, #0
 800e126:	0037      	movs	r7, r6
 800e128:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e12a:	9c08      	ldr	r4, [sp, #32]
 800e12c:	43db      	mvns	r3, r3
 800e12e:	930c      	str	r3, [sp, #48]	@ 0x30
 800e130:	2300      	movs	r3, #0
 800e132:	9304      	str	r3, [sp, #16]
 800e134:	0031      	movs	r1, r6
 800e136:	9803      	ldr	r0, [sp, #12]
 800e138:	f000 fb0a 	bl	800e750 <_Bfree>
 800e13c:	2f00      	cmp	r7, #0
 800e13e:	d0d7      	beq.n	800e0f0 <_dtoa_r+0x6a4>
 800e140:	9b04      	ldr	r3, [sp, #16]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d005      	beq.n	800e152 <_dtoa_r+0x706>
 800e146:	42bb      	cmp	r3, r7
 800e148:	d003      	beq.n	800e152 <_dtoa_r+0x706>
 800e14a:	0019      	movs	r1, r3
 800e14c:	9803      	ldr	r0, [sp, #12]
 800e14e:	f000 faff 	bl	800e750 <_Bfree>
 800e152:	0039      	movs	r1, r7
 800e154:	9803      	ldr	r0, [sp, #12]
 800e156:	f000 fafb 	bl	800e750 <_Bfree>
 800e15a:	e7c9      	b.n	800e0f0 <_dtoa_r+0x6a4>
 800e15c:	08019ad0 	.word	0x08019ad0
 800e160:	08019aa8 	.word	0x08019aa8
 800e164:	3ff00000 	.word	0x3ff00000
 800e168:	40240000 	.word	0x40240000
 800e16c:	401c0000 	.word	0x401c0000
 800e170:	fcc00000 	.word	0xfcc00000
 800e174:	40140000 	.word	0x40140000
 800e178:	3fe00000 	.word	0x3fe00000
 800e17c:	9b04      	ldr	r3, [sp, #16]
 800e17e:	930c      	str	r3, [sp, #48]	@ 0x30
 800e180:	0023      	movs	r3, r4
 800e182:	001c      	movs	r4, r3
 800e184:	3b01      	subs	r3, #1
 800e186:	781a      	ldrb	r2, [r3, #0]
 800e188:	2a39      	cmp	r2, #57	@ 0x39
 800e18a:	d108      	bne.n	800e19e <_dtoa_r+0x752>
 800e18c:	9a08      	ldr	r2, [sp, #32]
 800e18e:	429a      	cmp	r2, r3
 800e190:	d1f7      	bne.n	800e182 <_dtoa_r+0x736>
 800e192:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e194:	9908      	ldr	r1, [sp, #32]
 800e196:	3201      	adds	r2, #1
 800e198:	920c      	str	r2, [sp, #48]	@ 0x30
 800e19a:	2230      	movs	r2, #48	@ 0x30
 800e19c:	700a      	strb	r2, [r1, #0]
 800e19e:	781a      	ldrb	r2, [r3, #0]
 800e1a0:	3201      	adds	r2, #1
 800e1a2:	701a      	strb	r2, [r3, #0]
 800e1a4:	e7a4      	b.n	800e0f0 <_dtoa_r+0x6a4>
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	4bc6      	ldr	r3, [pc, #792]	@ (800e4c4 <_dtoa_r+0xa78>)
 800e1aa:	f7f3 fa4d 	bl	8001648 <__aeabi_dmul>
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	0006      	movs	r6, r0
 800e1b4:	000f      	movs	r7, r1
 800e1b6:	f7f2 f949 	bl	800044c <__aeabi_dcmpeq>
 800e1ba:	2800      	cmp	r0, #0
 800e1bc:	d100      	bne.n	800e1c0 <_dtoa_r+0x774>
 800e1be:	e6a1      	b.n	800df04 <_dtoa_r+0x4b8>
 800e1c0:	e6d8      	b.n	800df74 <_dtoa_r+0x528>
 800e1c2:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800e1c4:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800e1c6:	9c06      	ldr	r4, [sp, #24]
 800e1c8:	2f00      	cmp	r7, #0
 800e1ca:	d014      	beq.n	800e1f6 <_dtoa_r+0x7aa>
 800e1cc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e1ce:	2a01      	cmp	r2, #1
 800e1d0:	dd00      	ble.n	800e1d4 <_dtoa_r+0x788>
 800e1d2:	e0c8      	b.n	800e366 <_dtoa_r+0x91a>
 800e1d4:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800e1d6:	2a00      	cmp	r2, #0
 800e1d8:	d100      	bne.n	800e1dc <_dtoa_r+0x790>
 800e1da:	e0be      	b.n	800e35a <_dtoa_r+0x90e>
 800e1dc:	4aba      	ldr	r2, [pc, #744]	@ (800e4c8 <_dtoa_r+0xa7c>)
 800e1de:	189b      	adds	r3, r3, r2
 800e1e0:	9a06      	ldr	r2, [sp, #24]
 800e1e2:	2101      	movs	r1, #1
 800e1e4:	18d2      	adds	r2, r2, r3
 800e1e6:	9206      	str	r2, [sp, #24]
 800e1e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e1ea:	9803      	ldr	r0, [sp, #12]
 800e1ec:	18d3      	adds	r3, r2, r3
 800e1ee:	930d      	str	r3, [sp, #52]	@ 0x34
 800e1f0:	f000 fb66 	bl	800e8c0 <__i2b>
 800e1f4:	0007      	movs	r7, r0
 800e1f6:	2c00      	cmp	r4, #0
 800e1f8:	d00e      	beq.n	800e218 <_dtoa_r+0x7cc>
 800e1fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	dd0b      	ble.n	800e218 <_dtoa_r+0x7cc>
 800e200:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e202:	0023      	movs	r3, r4
 800e204:	4294      	cmp	r4, r2
 800e206:	dd00      	ble.n	800e20a <_dtoa_r+0x7be>
 800e208:	0013      	movs	r3, r2
 800e20a:	9a06      	ldr	r2, [sp, #24]
 800e20c:	1ae4      	subs	r4, r4, r3
 800e20e:	1ad2      	subs	r2, r2, r3
 800e210:	9206      	str	r2, [sp, #24]
 800e212:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e214:	1ad3      	subs	r3, r2, r3
 800e216:	930d      	str	r3, [sp, #52]	@ 0x34
 800e218:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d01f      	beq.n	800e25e <_dtoa_r+0x812>
 800e21e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e220:	2b00      	cmp	r3, #0
 800e222:	d100      	bne.n	800e226 <_dtoa_r+0x7da>
 800e224:	e0b5      	b.n	800e392 <_dtoa_r+0x946>
 800e226:	2d00      	cmp	r5, #0
 800e228:	d010      	beq.n	800e24c <_dtoa_r+0x800>
 800e22a:	0039      	movs	r1, r7
 800e22c:	002a      	movs	r2, r5
 800e22e:	9803      	ldr	r0, [sp, #12]
 800e230:	f000 fc10 	bl	800ea54 <__pow5mult>
 800e234:	9a05      	ldr	r2, [sp, #20]
 800e236:	0001      	movs	r1, r0
 800e238:	0007      	movs	r7, r0
 800e23a:	9803      	ldr	r0, [sp, #12]
 800e23c:	f000 fb58 	bl	800e8f0 <__multiply>
 800e240:	0006      	movs	r6, r0
 800e242:	9905      	ldr	r1, [sp, #20]
 800e244:	9803      	ldr	r0, [sp, #12]
 800e246:	f000 fa83 	bl	800e750 <_Bfree>
 800e24a:	9605      	str	r6, [sp, #20]
 800e24c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e24e:	1b5a      	subs	r2, r3, r5
 800e250:	42ab      	cmp	r3, r5
 800e252:	d004      	beq.n	800e25e <_dtoa_r+0x812>
 800e254:	9905      	ldr	r1, [sp, #20]
 800e256:	9803      	ldr	r0, [sp, #12]
 800e258:	f000 fbfc 	bl	800ea54 <__pow5mult>
 800e25c:	9005      	str	r0, [sp, #20]
 800e25e:	2101      	movs	r1, #1
 800e260:	9803      	ldr	r0, [sp, #12]
 800e262:	f000 fb2d 	bl	800e8c0 <__i2b>
 800e266:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e268:	0006      	movs	r6, r0
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d100      	bne.n	800e270 <_dtoa_r+0x824>
 800e26e:	e1bc      	b.n	800e5ea <_dtoa_r+0xb9e>
 800e270:	001a      	movs	r2, r3
 800e272:	0001      	movs	r1, r0
 800e274:	9803      	ldr	r0, [sp, #12]
 800e276:	f000 fbed 	bl	800ea54 <__pow5mult>
 800e27a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e27c:	0006      	movs	r6, r0
 800e27e:	2500      	movs	r5, #0
 800e280:	2b01      	cmp	r3, #1
 800e282:	dc16      	bgt.n	800e2b2 <_dtoa_r+0x866>
 800e284:	2500      	movs	r5, #0
 800e286:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e288:	42ab      	cmp	r3, r5
 800e28a:	d10e      	bne.n	800e2aa <_dtoa_r+0x85e>
 800e28c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e28e:	031b      	lsls	r3, r3, #12
 800e290:	42ab      	cmp	r3, r5
 800e292:	d10a      	bne.n	800e2aa <_dtoa_r+0x85e>
 800e294:	4b8d      	ldr	r3, [pc, #564]	@ (800e4cc <_dtoa_r+0xa80>)
 800e296:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e298:	4213      	tst	r3, r2
 800e29a:	d006      	beq.n	800e2aa <_dtoa_r+0x85e>
 800e29c:	9b06      	ldr	r3, [sp, #24]
 800e29e:	3501      	adds	r5, #1
 800e2a0:	3301      	adds	r3, #1
 800e2a2:	9306      	str	r3, [sp, #24]
 800e2a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e2a6:	3301      	adds	r3, #1
 800e2a8:	930d      	str	r3, [sp, #52]	@ 0x34
 800e2aa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e2ac:	2001      	movs	r0, #1
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d008      	beq.n	800e2c4 <_dtoa_r+0x878>
 800e2b2:	6933      	ldr	r3, [r6, #16]
 800e2b4:	3303      	adds	r3, #3
 800e2b6:	009b      	lsls	r3, r3, #2
 800e2b8:	18f3      	adds	r3, r6, r3
 800e2ba:	6858      	ldr	r0, [r3, #4]
 800e2bc:	f000 fab0 	bl	800e820 <__hi0bits>
 800e2c0:	2320      	movs	r3, #32
 800e2c2:	1a18      	subs	r0, r3, r0
 800e2c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e2c6:	1818      	adds	r0, r3, r0
 800e2c8:	0002      	movs	r2, r0
 800e2ca:	231f      	movs	r3, #31
 800e2cc:	401a      	ands	r2, r3
 800e2ce:	4218      	tst	r0, r3
 800e2d0:	d065      	beq.n	800e39e <_dtoa_r+0x952>
 800e2d2:	3301      	adds	r3, #1
 800e2d4:	1a9b      	subs	r3, r3, r2
 800e2d6:	2b04      	cmp	r3, #4
 800e2d8:	dd5d      	ble.n	800e396 <_dtoa_r+0x94a>
 800e2da:	231c      	movs	r3, #28
 800e2dc:	1a9b      	subs	r3, r3, r2
 800e2de:	9a06      	ldr	r2, [sp, #24]
 800e2e0:	18e4      	adds	r4, r4, r3
 800e2e2:	18d2      	adds	r2, r2, r3
 800e2e4:	9206      	str	r2, [sp, #24]
 800e2e6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e2e8:	18d3      	adds	r3, r2, r3
 800e2ea:	930d      	str	r3, [sp, #52]	@ 0x34
 800e2ec:	9b06      	ldr	r3, [sp, #24]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	dd05      	ble.n	800e2fe <_dtoa_r+0x8b2>
 800e2f2:	001a      	movs	r2, r3
 800e2f4:	9905      	ldr	r1, [sp, #20]
 800e2f6:	9803      	ldr	r0, [sp, #12]
 800e2f8:	f000 fc08 	bl	800eb0c <__lshift>
 800e2fc:	9005      	str	r0, [sp, #20]
 800e2fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e300:	2b00      	cmp	r3, #0
 800e302:	dd05      	ble.n	800e310 <_dtoa_r+0x8c4>
 800e304:	0031      	movs	r1, r6
 800e306:	001a      	movs	r2, r3
 800e308:	9803      	ldr	r0, [sp, #12]
 800e30a:	f000 fbff 	bl	800eb0c <__lshift>
 800e30e:	0006      	movs	r6, r0
 800e310:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e312:	2b00      	cmp	r3, #0
 800e314:	d045      	beq.n	800e3a2 <_dtoa_r+0x956>
 800e316:	0031      	movs	r1, r6
 800e318:	9805      	ldr	r0, [sp, #20]
 800e31a:	f000 fc63 	bl	800ebe4 <__mcmp>
 800e31e:	2800      	cmp	r0, #0
 800e320:	da3f      	bge.n	800e3a2 <_dtoa_r+0x956>
 800e322:	9b04      	ldr	r3, [sp, #16]
 800e324:	220a      	movs	r2, #10
 800e326:	3b01      	subs	r3, #1
 800e328:	930c      	str	r3, [sp, #48]	@ 0x30
 800e32a:	9905      	ldr	r1, [sp, #20]
 800e32c:	2300      	movs	r3, #0
 800e32e:	9803      	ldr	r0, [sp, #12]
 800e330:	f000 fa32 	bl	800e798 <__multadd>
 800e334:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e336:	9005      	str	r0, [sp, #20]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d100      	bne.n	800e33e <_dtoa_r+0x8f2>
 800e33c:	e15c      	b.n	800e5f8 <_dtoa_r+0xbac>
 800e33e:	2300      	movs	r3, #0
 800e340:	0039      	movs	r1, r7
 800e342:	220a      	movs	r2, #10
 800e344:	9803      	ldr	r0, [sp, #12]
 800e346:	f000 fa27 	bl	800e798 <__multadd>
 800e34a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e34c:	0007      	movs	r7, r0
 800e34e:	2b00      	cmp	r3, #0
 800e350:	dc55      	bgt.n	800e3fe <_dtoa_r+0x9b2>
 800e352:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e354:	2b02      	cmp	r3, #2
 800e356:	dc2d      	bgt.n	800e3b4 <_dtoa_r+0x968>
 800e358:	e051      	b.n	800e3fe <_dtoa_r+0x9b2>
 800e35a:	2336      	movs	r3, #54	@ 0x36
 800e35c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e35e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800e360:	9c06      	ldr	r4, [sp, #24]
 800e362:	1a9b      	subs	r3, r3, r2
 800e364:	e73c      	b.n	800e1e0 <_dtoa_r+0x794>
 800e366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e368:	1e5d      	subs	r5, r3, #1
 800e36a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e36c:	42ab      	cmp	r3, r5
 800e36e:	db08      	blt.n	800e382 <_dtoa_r+0x936>
 800e370:	1b5d      	subs	r5, r3, r5
 800e372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e374:	9c06      	ldr	r4, [sp, #24]
 800e376:	2b00      	cmp	r3, #0
 800e378:	db00      	blt.n	800e37c <_dtoa_r+0x930>
 800e37a:	e731      	b.n	800e1e0 <_dtoa_r+0x794>
 800e37c:	1ae4      	subs	r4, r4, r3
 800e37e:	2300      	movs	r3, #0
 800e380:	e72e      	b.n	800e1e0 <_dtoa_r+0x794>
 800e382:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e384:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e386:	1aeb      	subs	r3, r5, r3
 800e388:	18d3      	adds	r3, r2, r3
 800e38a:	950f      	str	r5, [sp, #60]	@ 0x3c
 800e38c:	9314      	str	r3, [sp, #80]	@ 0x50
 800e38e:	2500      	movs	r5, #0
 800e390:	e7ef      	b.n	800e372 <_dtoa_r+0x926>
 800e392:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e394:	e75e      	b.n	800e254 <_dtoa_r+0x808>
 800e396:	2b04      	cmp	r3, #4
 800e398:	d0a8      	beq.n	800e2ec <_dtoa_r+0x8a0>
 800e39a:	331c      	adds	r3, #28
 800e39c:	e79f      	b.n	800e2de <_dtoa_r+0x892>
 800e39e:	0013      	movs	r3, r2
 800e3a0:	e7fb      	b.n	800e39a <_dtoa_r+0x94e>
 800e3a2:	9b04      	ldr	r3, [sp, #16]
 800e3a4:	930c      	str	r3, [sp, #48]	@ 0x30
 800e3a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3a8:	930e      	str	r3, [sp, #56]	@ 0x38
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	dc23      	bgt.n	800e3f6 <_dtoa_r+0x9aa>
 800e3ae:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e3b0:	2b02      	cmp	r3, #2
 800e3b2:	dd20      	ble.n	800e3f6 <_dtoa_r+0x9aa>
 800e3b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d000      	beq.n	800e3bc <_dtoa_r+0x970>
 800e3ba:	e6b5      	b.n	800e128 <_dtoa_r+0x6dc>
 800e3bc:	0031      	movs	r1, r6
 800e3be:	2205      	movs	r2, #5
 800e3c0:	9803      	ldr	r0, [sp, #12]
 800e3c2:	f000 f9e9 	bl	800e798 <__multadd>
 800e3c6:	0006      	movs	r6, r0
 800e3c8:	0001      	movs	r1, r0
 800e3ca:	9805      	ldr	r0, [sp, #20]
 800e3cc:	f000 fc0a 	bl	800ebe4 <__mcmp>
 800e3d0:	2800      	cmp	r0, #0
 800e3d2:	dc00      	bgt.n	800e3d6 <_dtoa_r+0x98a>
 800e3d4:	e6a8      	b.n	800e128 <_dtoa_r+0x6dc>
 800e3d6:	9b08      	ldr	r3, [sp, #32]
 800e3d8:	9a08      	ldr	r2, [sp, #32]
 800e3da:	1c5c      	adds	r4, r3, #1
 800e3dc:	2331      	movs	r3, #49	@ 0x31
 800e3de:	7013      	strb	r3, [r2, #0]
 800e3e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e3e2:	3301      	adds	r3, #1
 800e3e4:	930c      	str	r3, [sp, #48]	@ 0x30
 800e3e6:	e6a3      	b.n	800e130 <_dtoa_r+0x6e4>
 800e3e8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800e3ea:	0037      	movs	r7, r6
 800e3ec:	e7f3      	b.n	800e3d6 <_dtoa_r+0x98a>
 800e3ee:	9b04      	ldr	r3, [sp, #16]
 800e3f0:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800e3f2:	930c      	str	r3, [sp, #48]	@ 0x30
 800e3f4:	e7f9      	b.n	800e3ea <_dtoa_r+0x99e>
 800e3f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d100      	bne.n	800e3fe <_dtoa_r+0x9b2>
 800e3fc:	e100      	b.n	800e600 <_dtoa_r+0xbb4>
 800e3fe:	2c00      	cmp	r4, #0
 800e400:	dd05      	ble.n	800e40e <_dtoa_r+0x9c2>
 800e402:	0039      	movs	r1, r7
 800e404:	0022      	movs	r2, r4
 800e406:	9803      	ldr	r0, [sp, #12]
 800e408:	f000 fb80 	bl	800eb0c <__lshift>
 800e40c:	0007      	movs	r7, r0
 800e40e:	0038      	movs	r0, r7
 800e410:	2d00      	cmp	r5, #0
 800e412:	d018      	beq.n	800e446 <_dtoa_r+0x9fa>
 800e414:	6879      	ldr	r1, [r7, #4]
 800e416:	9803      	ldr	r0, [sp, #12]
 800e418:	f000 f956 	bl	800e6c8 <_Balloc>
 800e41c:	1e04      	subs	r4, r0, #0
 800e41e:	d105      	bne.n	800e42c <_dtoa_r+0x9e0>
 800e420:	0022      	movs	r2, r4
 800e422:	4b2b      	ldr	r3, [pc, #172]	@ (800e4d0 <_dtoa_r+0xa84>)
 800e424:	482b      	ldr	r0, [pc, #172]	@ (800e4d4 <_dtoa_r+0xa88>)
 800e426:	492c      	ldr	r1, [pc, #176]	@ (800e4d8 <_dtoa_r+0xa8c>)
 800e428:	f7ff fb25 	bl	800da76 <_dtoa_r+0x2a>
 800e42c:	0039      	movs	r1, r7
 800e42e:	693a      	ldr	r2, [r7, #16]
 800e430:	310c      	adds	r1, #12
 800e432:	3202      	adds	r2, #2
 800e434:	0092      	lsls	r2, r2, #2
 800e436:	300c      	adds	r0, #12
 800e438:	f000 ff80 	bl	800f33c <memcpy>
 800e43c:	2201      	movs	r2, #1
 800e43e:	0021      	movs	r1, r4
 800e440:	9803      	ldr	r0, [sp, #12]
 800e442:	f000 fb63 	bl	800eb0c <__lshift>
 800e446:	9b08      	ldr	r3, [sp, #32]
 800e448:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e44a:	9306      	str	r3, [sp, #24]
 800e44c:	3b01      	subs	r3, #1
 800e44e:	189b      	adds	r3, r3, r2
 800e450:	2201      	movs	r2, #1
 800e452:	9704      	str	r7, [sp, #16]
 800e454:	0007      	movs	r7, r0
 800e456:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e458:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e45a:	4013      	ands	r3, r2
 800e45c:	930e      	str	r3, [sp, #56]	@ 0x38
 800e45e:	0031      	movs	r1, r6
 800e460:	9805      	ldr	r0, [sp, #20]
 800e462:	f7ff fa65 	bl	800d930 <quorem>
 800e466:	9904      	ldr	r1, [sp, #16]
 800e468:	0005      	movs	r5, r0
 800e46a:	900a      	str	r0, [sp, #40]	@ 0x28
 800e46c:	9805      	ldr	r0, [sp, #20]
 800e46e:	f000 fbb9 	bl	800ebe4 <__mcmp>
 800e472:	003a      	movs	r2, r7
 800e474:	900d      	str	r0, [sp, #52]	@ 0x34
 800e476:	0031      	movs	r1, r6
 800e478:	9803      	ldr	r0, [sp, #12]
 800e47a:	f000 fbcf 	bl	800ec1c <__mdiff>
 800e47e:	2201      	movs	r2, #1
 800e480:	68c3      	ldr	r3, [r0, #12]
 800e482:	0004      	movs	r4, r0
 800e484:	3530      	adds	r5, #48	@ 0x30
 800e486:	9209      	str	r2, [sp, #36]	@ 0x24
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d104      	bne.n	800e496 <_dtoa_r+0xa4a>
 800e48c:	0001      	movs	r1, r0
 800e48e:	9805      	ldr	r0, [sp, #20]
 800e490:	f000 fba8 	bl	800ebe4 <__mcmp>
 800e494:	9009      	str	r0, [sp, #36]	@ 0x24
 800e496:	0021      	movs	r1, r4
 800e498:	9803      	ldr	r0, [sp, #12]
 800e49a:	f000 f959 	bl	800e750 <_Bfree>
 800e49e:	9b06      	ldr	r3, [sp, #24]
 800e4a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e4a2:	1c5c      	adds	r4, r3, #1
 800e4a4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e4a6:	4313      	orrs	r3, r2
 800e4a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e4aa:	4313      	orrs	r3, r2
 800e4ac:	d116      	bne.n	800e4dc <_dtoa_r+0xa90>
 800e4ae:	2d39      	cmp	r5, #57	@ 0x39
 800e4b0:	d02f      	beq.n	800e512 <_dtoa_r+0xac6>
 800e4b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	dd01      	ble.n	800e4bc <_dtoa_r+0xa70>
 800e4b8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800e4ba:	3531      	adds	r5, #49	@ 0x31
 800e4bc:	9b06      	ldr	r3, [sp, #24]
 800e4be:	701d      	strb	r5, [r3, #0]
 800e4c0:	e638      	b.n	800e134 <_dtoa_r+0x6e8>
 800e4c2:	46c0      	nop			@ (mov r8, r8)
 800e4c4:	40240000 	.word	0x40240000
 800e4c8:	00000433 	.word	0x00000433
 800e4cc:	7ff00000 	.word	0x7ff00000
 800e4d0:	08019a2c 	.word	0x08019a2c
 800e4d4:	080199d4 	.word	0x080199d4
 800e4d8:	000002ef 	.word	0x000002ef
 800e4dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	db04      	blt.n	800e4ec <_dtoa_r+0xaa0>
 800e4e2:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e4e4:	4313      	orrs	r3, r2
 800e4e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e4e8:	4313      	orrs	r3, r2
 800e4ea:	d11e      	bne.n	800e52a <_dtoa_r+0xade>
 800e4ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	dde4      	ble.n	800e4bc <_dtoa_r+0xa70>
 800e4f2:	9905      	ldr	r1, [sp, #20]
 800e4f4:	2201      	movs	r2, #1
 800e4f6:	9803      	ldr	r0, [sp, #12]
 800e4f8:	f000 fb08 	bl	800eb0c <__lshift>
 800e4fc:	0031      	movs	r1, r6
 800e4fe:	9005      	str	r0, [sp, #20]
 800e500:	f000 fb70 	bl	800ebe4 <__mcmp>
 800e504:	2800      	cmp	r0, #0
 800e506:	dc02      	bgt.n	800e50e <_dtoa_r+0xac2>
 800e508:	d1d8      	bne.n	800e4bc <_dtoa_r+0xa70>
 800e50a:	07eb      	lsls	r3, r5, #31
 800e50c:	d5d6      	bpl.n	800e4bc <_dtoa_r+0xa70>
 800e50e:	2d39      	cmp	r5, #57	@ 0x39
 800e510:	d1d2      	bne.n	800e4b8 <_dtoa_r+0xa6c>
 800e512:	2339      	movs	r3, #57	@ 0x39
 800e514:	9a06      	ldr	r2, [sp, #24]
 800e516:	7013      	strb	r3, [r2, #0]
 800e518:	0023      	movs	r3, r4
 800e51a:	001c      	movs	r4, r3
 800e51c:	3b01      	subs	r3, #1
 800e51e:	781a      	ldrb	r2, [r3, #0]
 800e520:	2a39      	cmp	r2, #57	@ 0x39
 800e522:	d04f      	beq.n	800e5c4 <_dtoa_r+0xb78>
 800e524:	3201      	adds	r2, #1
 800e526:	701a      	strb	r2, [r3, #0]
 800e528:	e604      	b.n	800e134 <_dtoa_r+0x6e8>
 800e52a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	dd03      	ble.n	800e538 <_dtoa_r+0xaec>
 800e530:	2d39      	cmp	r5, #57	@ 0x39
 800e532:	d0ee      	beq.n	800e512 <_dtoa_r+0xac6>
 800e534:	3501      	adds	r5, #1
 800e536:	e7c1      	b.n	800e4bc <_dtoa_r+0xa70>
 800e538:	9b06      	ldr	r3, [sp, #24]
 800e53a:	9a06      	ldr	r2, [sp, #24]
 800e53c:	701d      	strb	r5, [r3, #0]
 800e53e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e540:	4293      	cmp	r3, r2
 800e542:	d02a      	beq.n	800e59a <_dtoa_r+0xb4e>
 800e544:	2300      	movs	r3, #0
 800e546:	220a      	movs	r2, #10
 800e548:	9905      	ldr	r1, [sp, #20]
 800e54a:	9803      	ldr	r0, [sp, #12]
 800e54c:	f000 f924 	bl	800e798 <__multadd>
 800e550:	9b04      	ldr	r3, [sp, #16]
 800e552:	9005      	str	r0, [sp, #20]
 800e554:	42bb      	cmp	r3, r7
 800e556:	d109      	bne.n	800e56c <_dtoa_r+0xb20>
 800e558:	2300      	movs	r3, #0
 800e55a:	220a      	movs	r2, #10
 800e55c:	9904      	ldr	r1, [sp, #16]
 800e55e:	9803      	ldr	r0, [sp, #12]
 800e560:	f000 f91a 	bl	800e798 <__multadd>
 800e564:	9004      	str	r0, [sp, #16]
 800e566:	0007      	movs	r7, r0
 800e568:	9406      	str	r4, [sp, #24]
 800e56a:	e778      	b.n	800e45e <_dtoa_r+0xa12>
 800e56c:	9904      	ldr	r1, [sp, #16]
 800e56e:	2300      	movs	r3, #0
 800e570:	220a      	movs	r2, #10
 800e572:	9803      	ldr	r0, [sp, #12]
 800e574:	f000 f910 	bl	800e798 <__multadd>
 800e578:	2300      	movs	r3, #0
 800e57a:	9004      	str	r0, [sp, #16]
 800e57c:	220a      	movs	r2, #10
 800e57e:	0039      	movs	r1, r7
 800e580:	9803      	ldr	r0, [sp, #12]
 800e582:	f000 f909 	bl	800e798 <__multadd>
 800e586:	e7ee      	b.n	800e566 <_dtoa_r+0xb1a>
 800e588:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e58a:	2401      	movs	r4, #1
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	dd00      	ble.n	800e592 <_dtoa_r+0xb46>
 800e590:	001c      	movs	r4, r3
 800e592:	9b08      	ldr	r3, [sp, #32]
 800e594:	191c      	adds	r4, r3, r4
 800e596:	2300      	movs	r3, #0
 800e598:	9304      	str	r3, [sp, #16]
 800e59a:	9905      	ldr	r1, [sp, #20]
 800e59c:	2201      	movs	r2, #1
 800e59e:	9803      	ldr	r0, [sp, #12]
 800e5a0:	f000 fab4 	bl	800eb0c <__lshift>
 800e5a4:	0031      	movs	r1, r6
 800e5a6:	9005      	str	r0, [sp, #20]
 800e5a8:	f000 fb1c 	bl	800ebe4 <__mcmp>
 800e5ac:	2800      	cmp	r0, #0
 800e5ae:	dcb3      	bgt.n	800e518 <_dtoa_r+0xacc>
 800e5b0:	d101      	bne.n	800e5b6 <_dtoa_r+0xb6a>
 800e5b2:	07ed      	lsls	r5, r5, #31
 800e5b4:	d4b0      	bmi.n	800e518 <_dtoa_r+0xacc>
 800e5b6:	0023      	movs	r3, r4
 800e5b8:	001c      	movs	r4, r3
 800e5ba:	3b01      	subs	r3, #1
 800e5bc:	781a      	ldrb	r2, [r3, #0]
 800e5be:	2a30      	cmp	r2, #48	@ 0x30
 800e5c0:	d0fa      	beq.n	800e5b8 <_dtoa_r+0xb6c>
 800e5c2:	e5b7      	b.n	800e134 <_dtoa_r+0x6e8>
 800e5c4:	9a08      	ldr	r2, [sp, #32]
 800e5c6:	429a      	cmp	r2, r3
 800e5c8:	d1a7      	bne.n	800e51a <_dtoa_r+0xace>
 800e5ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e5cc:	3301      	adds	r3, #1
 800e5ce:	930c      	str	r3, [sp, #48]	@ 0x30
 800e5d0:	2331      	movs	r3, #49	@ 0x31
 800e5d2:	7013      	strb	r3, [r2, #0]
 800e5d4:	e5ae      	b.n	800e134 <_dtoa_r+0x6e8>
 800e5d6:	4b15      	ldr	r3, [pc, #84]	@ (800e62c <_dtoa_r+0xbe0>)
 800e5d8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800e5da:	9308      	str	r3, [sp, #32]
 800e5dc:	4b14      	ldr	r3, [pc, #80]	@ (800e630 <_dtoa_r+0xbe4>)
 800e5de:	2a00      	cmp	r2, #0
 800e5e0:	d001      	beq.n	800e5e6 <_dtoa_r+0xb9a>
 800e5e2:	f7ff fa7b 	bl	800dadc <_dtoa_r+0x90>
 800e5e6:	f7ff fa7b 	bl	800dae0 <_dtoa_r+0x94>
 800e5ea:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e5ec:	2b01      	cmp	r3, #1
 800e5ee:	dc00      	bgt.n	800e5f2 <_dtoa_r+0xba6>
 800e5f0:	e648      	b.n	800e284 <_dtoa_r+0x838>
 800e5f2:	2001      	movs	r0, #1
 800e5f4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800e5f6:	e665      	b.n	800e2c4 <_dtoa_r+0x878>
 800e5f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	dc00      	bgt.n	800e600 <_dtoa_r+0xbb4>
 800e5fe:	e6d6      	b.n	800e3ae <_dtoa_r+0x962>
 800e600:	2400      	movs	r4, #0
 800e602:	0031      	movs	r1, r6
 800e604:	9805      	ldr	r0, [sp, #20]
 800e606:	f7ff f993 	bl	800d930 <quorem>
 800e60a:	9b08      	ldr	r3, [sp, #32]
 800e60c:	3030      	adds	r0, #48	@ 0x30
 800e60e:	5518      	strb	r0, [r3, r4]
 800e610:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e612:	3401      	adds	r4, #1
 800e614:	0005      	movs	r5, r0
 800e616:	429c      	cmp	r4, r3
 800e618:	dab6      	bge.n	800e588 <_dtoa_r+0xb3c>
 800e61a:	2300      	movs	r3, #0
 800e61c:	220a      	movs	r2, #10
 800e61e:	9905      	ldr	r1, [sp, #20]
 800e620:	9803      	ldr	r0, [sp, #12]
 800e622:	f000 f8b9 	bl	800e798 <__multadd>
 800e626:	9005      	str	r0, [sp, #20]
 800e628:	e7eb      	b.n	800e602 <_dtoa_r+0xbb6>
 800e62a:	46c0      	nop			@ (mov r8, r8)
 800e62c:	080199b0 	.word	0x080199b0
 800e630:	080199b8 	.word	0x080199b8

0800e634 <_free_r>:
 800e634:	b570      	push	{r4, r5, r6, lr}
 800e636:	0005      	movs	r5, r0
 800e638:	1e0c      	subs	r4, r1, #0
 800e63a:	d010      	beq.n	800e65e <_free_r+0x2a>
 800e63c:	3c04      	subs	r4, #4
 800e63e:	6823      	ldr	r3, [r4, #0]
 800e640:	2b00      	cmp	r3, #0
 800e642:	da00      	bge.n	800e646 <_free_r+0x12>
 800e644:	18e4      	adds	r4, r4, r3
 800e646:	0028      	movs	r0, r5
 800e648:	f7fe fb26 	bl	800cc98 <__malloc_lock>
 800e64c:	4a1d      	ldr	r2, [pc, #116]	@ (800e6c4 <_free_r+0x90>)
 800e64e:	6813      	ldr	r3, [r2, #0]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d105      	bne.n	800e660 <_free_r+0x2c>
 800e654:	6063      	str	r3, [r4, #4]
 800e656:	6014      	str	r4, [r2, #0]
 800e658:	0028      	movs	r0, r5
 800e65a:	f7fe fb25 	bl	800cca8 <__malloc_unlock>
 800e65e:	bd70      	pop	{r4, r5, r6, pc}
 800e660:	42a3      	cmp	r3, r4
 800e662:	d908      	bls.n	800e676 <_free_r+0x42>
 800e664:	6820      	ldr	r0, [r4, #0]
 800e666:	1821      	adds	r1, r4, r0
 800e668:	428b      	cmp	r3, r1
 800e66a:	d1f3      	bne.n	800e654 <_free_r+0x20>
 800e66c:	6819      	ldr	r1, [r3, #0]
 800e66e:	685b      	ldr	r3, [r3, #4]
 800e670:	1809      	adds	r1, r1, r0
 800e672:	6021      	str	r1, [r4, #0]
 800e674:	e7ee      	b.n	800e654 <_free_r+0x20>
 800e676:	001a      	movs	r2, r3
 800e678:	685b      	ldr	r3, [r3, #4]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d001      	beq.n	800e682 <_free_r+0x4e>
 800e67e:	42a3      	cmp	r3, r4
 800e680:	d9f9      	bls.n	800e676 <_free_r+0x42>
 800e682:	6811      	ldr	r1, [r2, #0]
 800e684:	1850      	adds	r0, r2, r1
 800e686:	42a0      	cmp	r0, r4
 800e688:	d10b      	bne.n	800e6a2 <_free_r+0x6e>
 800e68a:	6820      	ldr	r0, [r4, #0]
 800e68c:	1809      	adds	r1, r1, r0
 800e68e:	1850      	adds	r0, r2, r1
 800e690:	6011      	str	r1, [r2, #0]
 800e692:	4283      	cmp	r3, r0
 800e694:	d1e0      	bne.n	800e658 <_free_r+0x24>
 800e696:	6818      	ldr	r0, [r3, #0]
 800e698:	685b      	ldr	r3, [r3, #4]
 800e69a:	1841      	adds	r1, r0, r1
 800e69c:	6011      	str	r1, [r2, #0]
 800e69e:	6053      	str	r3, [r2, #4]
 800e6a0:	e7da      	b.n	800e658 <_free_r+0x24>
 800e6a2:	42a0      	cmp	r0, r4
 800e6a4:	d902      	bls.n	800e6ac <_free_r+0x78>
 800e6a6:	230c      	movs	r3, #12
 800e6a8:	602b      	str	r3, [r5, #0]
 800e6aa:	e7d5      	b.n	800e658 <_free_r+0x24>
 800e6ac:	6820      	ldr	r0, [r4, #0]
 800e6ae:	1821      	adds	r1, r4, r0
 800e6b0:	428b      	cmp	r3, r1
 800e6b2:	d103      	bne.n	800e6bc <_free_r+0x88>
 800e6b4:	6819      	ldr	r1, [r3, #0]
 800e6b6:	685b      	ldr	r3, [r3, #4]
 800e6b8:	1809      	adds	r1, r1, r0
 800e6ba:	6021      	str	r1, [r4, #0]
 800e6bc:	6063      	str	r3, [r4, #4]
 800e6be:	6054      	str	r4, [r2, #4]
 800e6c0:	e7ca      	b.n	800e658 <_free_r+0x24>
 800e6c2:	46c0      	nop			@ (mov r8, r8)
 800e6c4:	200005d0 	.word	0x200005d0

0800e6c8 <_Balloc>:
 800e6c8:	b570      	push	{r4, r5, r6, lr}
 800e6ca:	69c5      	ldr	r5, [r0, #28]
 800e6cc:	0006      	movs	r6, r0
 800e6ce:	000c      	movs	r4, r1
 800e6d0:	2d00      	cmp	r5, #0
 800e6d2:	d10e      	bne.n	800e6f2 <_Balloc+0x2a>
 800e6d4:	2010      	movs	r0, #16
 800e6d6:	f7fe fa33 	bl	800cb40 <malloc>
 800e6da:	1e02      	subs	r2, r0, #0
 800e6dc:	61f0      	str	r0, [r6, #28]
 800e6de:	d104      	bne.n	800e6ea <_Balloc+0x22>
 800e6e0:	216b      	movs	r1, #107	@ 0x6b
 800e6e2:	4b19      	ldr	r3, [pc, #100]	@ (800e748 <_Balloc+0x80>)
 800e6e4:	4819      	ldr	r0, [pc, #100]	@ (800e74c <_Balloc+0x84>)
 800e6e6:	f000 fe33 	bl	800f350 <__assert_func>
 800e6ea:	6045      	str	r5, [r0, #4]
 800e6ec:	6085      	str	r5, [r0, #8]
 800e6ee:	6005      	str	r5, [r0, #0]
 800e6f0:	60c5      	str	r5, [r0, #12]
 800e6f2:	69f5      	ldr	r5, [r6, #28]
 800e6f4:	68eb      	ldr	r3, [r5, #12]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d013      	beq.n	800e722 <_Balloc+0x5a>
 800e6fa:	69f3      	ldr	r3, [r6, #28]
 800e6fc:	00a2      	lsls	r2, r4, #2
 800e6fe:	68db      	ldr	r3, [r3, #12]
 800e700:	189b      	adds	r3, r3, r2
 800e702:	6818      	ldr	r0, [r3, #0]
 800e704:	2800      	cmp	r0, #0
 800e706:	d118      	bne.n	800e73a <_Balloc+0x72>
 800e708:	2101      	movs	r1, #1
 800e70a:	000d      	movs	r5, r1
 800e70c:	40a5      	lsls	r5, r4
 800e70e:	1d6a      	adds	r2, r5, #5
 800e710:	0030      	movs	r0, r6
 800e712:	0092      	lsls	r2, r2, #2
 800e714:	f000 fe3a 	bl	800f38c <_calloc_r>
 800e718:	2800      	cmp	r0, #0
 800e71a:	d00c      	beq.n	800e736 <_Balloc+0x6e>
 800e71c:	6044      	str	r4, [r0, #4]
 800e71e:	6085      	str	r5, [r0, #8]
 800e720:	e00d      	b.n	800e73e <_Balloc+0x76>
 800e722:	2221      	movs	r2, #33	@ 0x21
 800e724:	2104      	movs	r1, #4
 800e726:	0030      	movs	r0, r6
 800e728:	f000 fe30 	bl	800f38c <_calloc_r>
 800e72c:	69f3      	ldr	r3, [r6, #28]
 800e72e:	60e8      	str	r0, [r5, #12]
 800e730:	68db      	ldr	r3, [r3, #12]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d1e1      	bne.n	800e6fa <_Balloc+0x32>
 800e736:	2000      	movs	r0, #0
 800e738:	bd70      	pop	{r4, r5, r6, pc}
 800e73a:	6802      	ldr	r2, [r0, #0]
 800e73c:	601a      	str	r2, [r3, #0]
 800e73e:	2300      	movs	r3, #0
 800e740:	6103      	str	r3, [r0, #16]
 800e742:	60c3      	str	r3, [r0, #12]
 800e744:	e7f8      	b.n	800e738 <_Balloc+0x70>
 800e746:	46c0      	nop			@ (mov r8, r8)
 800e748:	080199bd 	.word	0x080199bd
 800e74c:	08019a3d 	.word	0x08019a3d

0800e750 <_Bfree>:
 800e750:	b570      	push	{r4, r5, r6, lr}
 800e752:	69c6      	ldr	r6, [r0, #28]
 800e754:	0005      	movs	r5, r0
 800e756:	000c      	movs	r4, r1
 800e758:	2e00      	cmp	r6, #0
 800e75a:	d10e      	bne.n	800e77a <_Bfree+0x2a>
 800e75c:	2010      	movs	r0, #16
 800e75e:	f7fe f9ef 	bl	800cb40 <malloc>
 800e762:	1e02      	subs	r2, r0, #0
 800e764:	61e8      	str	r0, [r5, #28]
 800e766:	d104      	bne.n	800e772 <_Bfree+0x22>
 800e768:	218f      	movs	r1, #143	@ 0x8f
 800e76a:	4b09      	ldr	r3, [pc, #36]	@ (800e790 <_Bfree+0x40>)
 800e76c:	4809      	ldr	r0, [pc, #36]	@ (800e794 <_Bfree+0x44>)
 800e76e:	f000 fdef 	bl	800f350 <__assert_func>
 800e772:	6046      	str	r6, [r0, #4]
 800e774:	6086      	str	r6, [r0, #8]
 800e776:	6006      	str	r6, [r0, #0]
 800e778:	60c6      	str	r6, [r0, #12]
 800e77a:	2c00      	cmp	r4, #0
 800e77c:	d007      	beq.n	800e78e <_Bfree+0x3e>
 800e77e:	69eb      	ldr	r3, [r5, #28]
 800e780:	6862      	ldr	r2, [r4, #4]
 800e782:	68db      	ldr	r3, [r3, #12]
 800e784:	0092      	lsls	r2, r2, #2
 800e786:	189b      	adds	r3, r3, r2
 800e788:	681a      	ldr	r2, [r3, #0]
 800e78a:	6022      	str	r2, [r4, #0]
 800e78c:	601c      	str	r4, [r3, #0]
 800e78e:	bd70      	pop	{r4, r5, r6, pc}
 800e790:	080199bd 	.word	0x080199bd
 800e794:	08019a3d 	.word	0x08019a3d

0800e798 <__multadd>:
 800e798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e79a:	000f      	movs	r7, r1
 800e79c:	9001      	str	r0, [sp, #4]
 800e79e:	000c      	movs	r4, r1
 800e7a0:	001e      	movs	r6, r3
 800e7a2:	2000      	movs	r0, #0
 800e7a4:	690d      	ldr	r5, [r1, #16]
 800e7a6:	3714      	adds	r7, #20
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	3001      	adds	r0, #1
 800e7ac:	b299      	uxth	r1, r3
 800e7ae:	4351      	muls	r1, r2
 800e7b0:	0c1b      	lsrs	r3, r3, #16
 800e7b2:	4353      	muls	r3, r2
 800e7b4:	1989      	adds	r1, r1, r6
 800e7b6:	0c0e      	lsrs	r6, r1, #16
 800e7b8:	199b      	adds	r3, r3, r6
 800e7ba:	0c1e      	lsrs	r6, r3, #16
 800e7bc:	b289      	uxth	r1, r1
 800e7be:	041b      	lsls	r3, r3, #16
 800e7c0:	185b      	adds	r3, r3, r1
 800e7c2:	c708      	stmia	r7!, {r3}
 800e7c4:	4285      	cmp	r5, r0
 800e7c6:	dcef      	bgt.n	800e7a8 <__multadd+0x10>
 800e7c8:	2e00      	cmp	r6, #0
 800e7ca:	d022      	beq.n	800e812 <__multadd+0x7a>
 800e7cc:	68a3      	ldr	r3, [r4, #8]
 800e7ce:	42ab      	cmp	r3, r5
 800e7d0:	dc19      	bgt.n	800e806 <__multadd+0x6e>
 800e7d2:	6861      	ldr	r1, [r4, #4]
 800e7d4:	9801      	ldr	r0, [sp, #4]
 800e7d6:	3101      	adds	r1, #1
 800e7d8:	f7ff ff76 	bl	800e6c8 <_Balloc>
 800e7dc:	1e07      	subs	r7, r0, #0
 800e7de:	d105      	bne.n	800e7ec <__multadd+0x54>
 800e7e0:	003a      	movs	r2, r7
 800e7e2:	21ba      	movs	r1, #186	@ 0xba
 800e7e4:	4b0c      	ldr	r3, [pc, #48]	@ (800e818 <__multadd+0x80>)
 800e7e6:	480d      	ldr	r0, [pc, #52]	@ (800e81c <__multadd+0x84>)
 800e7e8:	f000 fdb2 	bl	800f350 <__assert_func>
 800e7ec:	0021      	movs	r1, r4
 800e7ee:	6922      	ldr	r2, [r4, #16]
 800e7f0:	310c      	adds	r1, #12
 800e7f2:	3202      	adds	r2, #2
 800e7f4:	0092      	lsls	r2, r2, #2
 800e7f6:	300c      	adds	r0, #12
 800e7f8:	f000 fda0 	bl	800f33c <memcpy>
 800e7fc:	0021      	movs	r1, r4
 800e7fe:	9801      	ldr	r0, [sp, #4]
 800e800:	f7ff ffa6 	bl	800e750 <_Bfree>
 800e804:	003c      	movs	r4, r7
 800e806:	1d2b      	adds	r3, r5, #4
 800e808:	009b      	lsls	r3, r3, #2
 800e80a:	18e3      	adds	r3, r4, r3
 800e80c:	3501      	adds	r5, #1
 800e80e:	605e      	str	r6, [r3, #4]
 800e810:	6125      	str	r5, [r4, #16]
 800e812:	0020      	movs	r0, r4
 800e814:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e816:	46c0      	nop			@ (mov r8, r8)
 800e818:	08019a2c 	.word	0x08019a2c
 800e81c:	08019a3d 	.word	0x08019a3d

0800e820 <__hi0bits>:
 800e820:	2280      	movs	r2, #128	@ 0x80
 800e822:	0003      	movs	r3, r0
 800e824:	0252      	lsls	r2, r2, #9
 800e826:	2000      	movs	r0, #0
 800e828:	4293      	cmp	r3, r2
 800e82a:	d201      	bcs.n	800e830 <__hi0bits+0x10>
 800e82c:	041b      	lsls	r3, r3, #16
 800e82e:	3010      	adds	r0, #16
 800e830:	2280      	movs	r2, #128	@ 0x80
 800e832:	0452      	lsls	r2, r2, #17
 800e834:	4293      	cmp	r3, r2
 800e836:	d201      	bcs.n	800e83c <__hi0bits+0x1c>
 800e838:	3008      	adds	r0, #8
 800e83a:	021b      	lsls	r3, r3, #8
 800e83c:	2280      	movs	r2, #128	@ 0x80
 800e83e:	0552      	lsls	r2, r2, #21
 800e840:	4293      	cmp	r3, r2
 800e842:	d201      	bcs.n	800e848 <__hi0bits+0x28>
 800e844:	3004      	adds	r0, #4
 800e846:	011b      	lsls	r3, r3, #4
 800e848:	2280      	movs	r2, #128	@ 0x80
 800e84a:	05d2      	lsls	r2, r2, #23
 800e84c:	4293      	cmp	r3, r2
 800e84e:	d201      	bcs.n	800e854 <__hi0bits+0x34>
 800e850:	3002      	adds	r0, #2
 800e852:	009b      	lsls	r3, r3, #2
 800e854:	2b00      	cmp	r3, #0
 800e856:	db03      	blt.n	800e860 <__hi0bits+0x40>
 800e858:	3001      	adds	r0, #1
 800e85a:	4213      	tst	r3, r2
 800e85c:	d100      	bne.n	800e860 <__hi0bits+0x40>
 800e85e:	2020      	movs	r0, #32
 800e860:	4770      	bx	lr

0800e862 <__lo0bits>:
 800e862:	6803      	ldr	r3, [r0, #0]
 800e864:	0001      	movs	r1, r0
 800e866:	2207      	movs	r2, #7
 800e868:	0018      	movs	r0, r3
 800e86a:	4010      	ands	r0, r2
 800e86c:	4213      	tst	r3, r2
 800e86e:	d00d      	beq.n	800e88c <__lo0bits+0x2a>
 800e870:	3a06      	subs	r2, #6
 800e872:	2000      	movs	r0, #0
 800e874:	4213      	tst	r3, r2
 800e876:	d105      	bne.n	800e884 <__lo0bits+0x22>
 800e878:	3002      	adds	r0, #2
 800e87a:	4203      	tst	r3, r0
 800e87c:	d003      	beq.n	800e886 <__lo0bits+0x24>
 800e87e:	40d3      	lsrs	r3, r2
 800e880:	0010      	movs	r0, r2
 800e882:	600b      	str	r3, [r1, #0]
 800e884:	4770      	bx	lr
 800e886:	089b      	lsrs	r3, r3, #2
 800e888:	600b      	str	r3, [r1, #0]
 800e88a:	e7fb      	b.n	800e884 <__lo0bits+0x22>
 800e88c:	b29a      	uxth	r2, r3
 800e88e:	2a00      	cmp	r2, #0
 800e890:	d101      	bne.n	800e896 <__lo0bits+0x34>
 800e892:	2010      	movs	r0, #16
 800e894:	0c1b      	lsrs	r3, r3, #16
 800e896:	b2da      	uxtb	r2, r3
 800e898:	2a00      	cmp	r2, #0
 800e89a:	d101      	bne.n	800e8a0 <__lo0bits+0x3e>
 800e89c:	3008      	adds	r0, #8
 800e89e:	0a1b      	lsrs	r3, r3, #8
 800e8a0:	071a      	lsls	r2, r3, #28
 800e8a2:	d101      	bne.n	800e8a8 <__lo0bits+0x46>
 800e8a4:	3004      	adds	r0, #4
 800e8a6:	091b      	lsrs	r3, r3, #4
 800e8a8:	079a      	lsls	r2, r3, #30
 800e8aa:	d101      	bne.n	800e8b0 <__lo0bits+0x4e>
 800e8ac:	3002      	adds	r0, #2
 800e8ae:	089b      	lsrs	r3, r3, #2
 800e8b0:	07da      	lsls	r2, r3, #31
 800e8b2:	d4e9      	bmi.n	800e888 <__lo0bits+0x26>
 800e8b4:	3001      	adds	r0, #1
 800e8b6:	085b      	lsrs	r3, r3, #1
 800e8b8:	d1e6      	bne.n	800e888 <__lo0bits+0x26>
 800e8ba:	2020      	movs	r0, #32
 800e8bc:	e7e2      	b.n	800e884 <__lo0bits+0x22>
	...

0800e8c0 <__i2b>:
 800e8c0:	b510      	push	{r4, lr}
 800e8c2:	000c      	movs	r4, r1
 800e8c4:	2101      	movs	r1, #1
 800e8c6:	f7ff feff 	bl	800e6c8 <_Balloc>
 800e8ca:	2800      	cmp	r0, #0
 800e8cc:	d107      	bne.n	800e8de <__i2b+0x1e>
 800e8ce:	2146      	movs	r1, #70	@ 0x46
 800e8d0:	4c05      	ldr	r4, [pc, #20]	@ (800e8e8 <__i2b+0x28>)
 800e8d2:	0002      	movs	r2, r0
 800e8d4:	4b05      	ldr	r3, [pc, #20]	@ (800e8ec <__i2b+0x2c>)
 800e8d6:	0020      	movs	r0, r4
 800e8d8:	31ff      	adds	r1, #255	@ 0xff
 800e8da:	f000 fd39 	bl	800f350 <__assert_func>
 800e8de:	2301      	movs	r3, #1
 800e8e0:	6144      	str	r4, [r0, #20]
 800e8e2:	6103      	str	r3, [r0, #16]
 800e8e4:	bd10      	pop	{r4, pc}
 800e8e6:	46c0      	nop			@ (mov r8, r8)
 800e8e8:	08019a3d 	.word	0x08019a3d
 800e8ec:	08019a2c 	.word	0x08019a2c

0800e8f0 <__multiply>:
 800e8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8f2:	0014      	movs	r4, r2
 800e8f4:	690a      	ldr	r2, [r1, #16]
 800e8f6:	6923      	ldr	r3, [r4, #16]
 800e8f8:	000d      	movs	r5, r1
 800e8fa:	b08b      	sub	sp, #44	@ 0x2c
 800e8fc:	429a      	cmp	r2, r3
 800e8fe:	db02      	blt.n	800e906 <__multiply+0x16>
 800e900:	0023      	movs	r3, r4
 800e902:	000c      	movs	r4, r1
 800e904:	001d      	movs	r5, r3
 800e906:	6927      	ldr	r7, [r4, #16]
 800e908:	692e      	ldr	r6, [r5, #16]
 800e90a:	6861      	ldr	r1, [r4, #4]
 800e90c:	19bb      	adds	r3, r7, r6
 800e90e:	9303      	str	r3, [sp, #12]
 800e910:	68a3      	ldr	r3, [r4, #8]
 800e912:	19ba      	adds	r2, r7, r6
 800e914:	4293      	cmp	r3, r2
 800e916:	da00      	bge.n	800e91a <__multiply+0x2a>
 800e918:	3101      	adds	r1, #1
 800e91a:	f7ff fed5 	bl	800e6c8 <_Balloc>
 800e91e:	9002      	str	r0, [sp, #8]
 800e920:	2800      	cmp	r0, #0
 800e922:	d106      	bne.n	800e932 <__multiply+0x42>
 800e924:	21b1      	movs	r1, #177	@ 0xb1
 800e926:	4b49      	ldr	r3, [pc, #292]	@ (800ea4c <__multiply+0x15c>)
 800e928:	4849      	ldr	r0, [pc, #292]	@ (800ea50 <__multiply+0x160>)
 800e92a:	9a02      	ldr	r2, [sp, #8]
 800e92c:	0049      	lsls	r1, r1, #1
 800e92e:	f000 fd0f 	bl	800f350 <__assert_func>
 800e932:	9b02      	ldr	r3, [sp, #8]
 800e934:	2200      	movs	r2, #0
 800e936:	3314      	adds	r3, #20
 800e938:	469c      	mov	ip, r3
 800e93a:	19bb      	adds	r3, r7, r6
 800e93c:	009b      	lsls	r3, r3, #2
 800e93e:	4463      	add	r3, ip
 800e940:	9304      	str	r3, [sp, #16]
 800e942:	4663      	mov	r3, ip
 800e944:	9904      	ldr	r1, [sp, #16]
 800e946:	428b      	cmp	r3, r1
 800e948:	d32a      	bcc.n	800e9a0 <__multiply+0xb0>
 800e94a:	0023      	movs	r3, r4
 800e94c:	00bf      	lsls	r7, r7, #2
 800e94e:	3314      	adds	r3, #20
 800e950:	3514      	adds	r5, #20
 800e952:	9308      	str	r3, [sp, #32]
 800e954:	00b6      	lsls	r6, r6, #2
 800e956:	19db      	adds	r3, r3, r7
 800e958:	9305      	str	r3, [sp, #20]
 800e95a:	19ab      	adds	r3, r5, r6
 800e95c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e95e:	2304      	movs	r3, #4
 800e960:	9306      	str	r3, [sp, #24]
 800e962:	0023      	movs	r3, r4
 800e964:	9a05      	ldr	r2, [sp, #20]
 800e966:	3315      	adds	r3, #21
 800e968:	9501      	str	r5, [sp, #4]
 800e96a:	429a      	cmp	r2, r3
 800e96c:	d305      	bcc.n	800e97a <__multiply+0x8a>
 800e96e:	1b13      	subs	r3, r2, r4
 800e970:	3b15      	subs	r3, #21
 800e972:	089b      	lsrs	r3, r3, #2
 800e974:	3301      	adds	r3, #1
 800e976:	009b      	lsls	r3, r3, #2
 800e978:	9306      	str	r3, [sp, #24]
 800e97a:	9b01      	ldr	r3, [sp, #4]
 800e97c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e97e:	4293      	cmp	r3, r2
 800e980:	d310      	bcc.n	800e9a4 <__multiply+0xb4>
 800e982:	9b03      	ldr	r3, [sp, #12]
 800e984:	2b00      	cmp	r3, #0
 800e986:	dd05      	ble.n	800e994 <__multiply+0xa4>
 800e988:	9b04      	ldr	r3, [sp, #16]
 800e98a:	3b04      	subs	r3, #4
 800e98c:	9304      	str	r3, [sp, #16]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d056      	beq.n	800ea42 <__multiply+0x152>
 800e994:	9b02      	ldr	r3, [sp, #8]
 800e996:	9a03      	ldr	r2, [sp, #12]
 800e998:	0018      	movs	r0, r3
 800e99a:	611a      	str	r2, [r3, #16]
 800e99c:	b00b      	add	sp, #44	@ 0x2c
 800e99e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9a0:	c304      	stmia	r3!, {r2}
 800e9a2:	e7cf      	b.n	800e944 <__multiply+0x54>
 800e9a4:	9b01      	ldr	r3, [sp, #4]
 800e9a6:	6818      	ldr	r0, [r3, #0]
 800e9a8:	b280      	uxth	r0, r0
 800e9aa:	2800      	cmp	r0, #0
 800e9ac:	d01e      	beq.n	800e9ec <__multiply+0xfc>
 800e9ae:	4667      	mov	r7, ip
 800e9b0:	2500      	movs	r5, #0
 800e9b2:	9e08      	ldr	r6, [sp, #32]
 800e9b4:	ce02      	ldmia	r6!, {r1}
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	9307      	str	r3, [sp, #28]
 800e9ba:	b28b      	uxth	r3, r1
 800e9bc:	4343      	muls	r3, r0
 800e9be:	001a      	movs	r2, r3
 800e9c0:	466b      	mov	r3, sp
 800e9c2:	0c09      	lsrs	r1, r1, #16
 800e9c4:	8b9b      	ldrh	r3, [r3, #28]
 800e9c6:	4341      	muls	r1, r0
 800e9c8:	18d3      	adds	r3, r2, r3
 800e9ca:	9a07      	ldr	r2, [sp, #28]
 800e9cc:	195b      	adds	r3, r3, r5
 800e9ce:	0c12      	lsrs	r2, r2, #16
 800e9d0:	1889      	adds	r1, r1, r2
 800e9d2:	0c1a      	lsrs	r2, r3, #16
 800e9d4:	188a      	adds	r2, r1, r2
 800e9d6:	b29b      	uxth	r3, r3
 800e9d8:	0c15      	lsrs	r5, r2, #16
 800e9da:	0412      	lsls	r2, r2, #16
 800e9dc:	431a      	orrs	r2, r3
 800e9de:	9b05      	ldr	r3, [sp, #20]
 800e9e0:	c704      	stmia	r7!, {r2}
 800e9e2:	42b3      	cmp	r3, r6
 800e9e4:	d8e6      	bhi.n	800e9b4 <__multiply+0xc4>
 800e9e6:	4663      	mov	r3, ip
 800e9e8:	9a06      	ldr	r2, [sp, #24]
 800e9ea:	509d      	str	r5, [r3, r2]
 800e9ec:	9b01      	ldr	r3, [sp, #4]
 800e9ee:	6818      	ldr	r0, [r3, #0]
 800e9f0:	0c00      	lsrs	r0, r0, #16
 800e9f2:	d020      	beq.n	800ea36 <__multiply+0x146>
 800e9f4:	4663      	mov	r3, ip
 800e9f6:	0025      	movs	r5, r4
 800e9f8:	4661      	mov	r1, ip
 800e9fa:	2700      	movs	r7, #0
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	3514      	adds	r5, #20
 800ea00:	682a      	ldr	r2, [r5, #0]
 800ea02:	680e      	ldr	r6, [r1, #0]
 800ea04:	b292      	uxth	r2, r2
 800ea06:	4342      	muls	r2, r0
 800ea08:	0c36      	lsrs	r6, r6, #16
 800ea0a:	1992      	adds	r2, r2, r6
 800ea0c:	19d2      	adds	r2, r2, r7
 800ea0e:	0416      	lsls	r6, r2, #16
 800ea10:	b29b      	uxth	r3, r3
 800ea12:	431e      	orrs	r6, r3
 800ea14:	600e      	str	r6, [r1, #0]
 800ea16:	cd40      	ldmia	r5!, {r6}
 800ea18:	684b      	ldr	r3, [r1, #4]
 800ea1a:	0c36      	lsrs	r6, r6, #16
 800ea1c:	4346      	muls	r6, r0
 800ea1e:	b29b      	uxth	r3, r3
 800ea20:	0c12      	lsrs	r2, r2, #16
 800ea22:	18f3      	adds	r3, r6, r3
 800ea24:	189b      	adds	r3, r3, r2
 800ea26:	9a05      	ldr	r2, [sp, #20]
 800ea28:	0c1f      	lsrs	r7, r3, #16
 800ea2a:	3104      	adds	r1, #4
 800ea2c:	42aa      	cmp	r2, r5
 800ea2e:	d8e7      	bhi.n	800ea00 <__multiply+0x110>
 800ea30:	4662      	mov	r2, ip
 800ea32:	9906      	ldr	r1, [sp, #24]
 800ea34:	5053      	str	r3, [r2, r1]
 800ea36:	9b01      	ldr	r3, [sp, #4]
 800ea38:	3304      	adds	r3, #4
 800ea3a:	9301      	str	r3, [sp, #4]
 800ea3c:	2304      	movs	r3, #4
 800ea3e:	449c      	add	ip, r3
 800ea40:	e79b      	b.n	800e97a <__multiply+0x8a>
 800ea42:	9b03      	ldr	r3, [sp, #12]
 800ea44:	3b01      	subs	r3, #1
 800ea46:	9303      	str	r3, [sp, #12]
 800ea48:	e79b      	b.n	800e982 <__multiply+0x92>
 800ea4a:	46c0      	nop			@ (mov r8, r8)
 800ea4c:	08019a2c 	.word	0x08019a2c
 800ea50:	08019a3d 	.word	0x08019a3d

0800ea54 <__pow5mult>:
 800ea54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ea56:	2303      	movs	r3, #3
 800ea58:	0015      	movs	r5, r2
 800ea5a:	0007      	movs	r7, r0
 800ea5c:	000e      	movs	r6, r1
 800ea5e:	401a      	ands	r2, r3
 800ea60:	421d      	tst	r5, r3
 800ea62:	d008      	beq.n	800ea76 <__pow5mult+0x22>
 800ea64:	4925      	ldr	r1, [pc, #148]	@ (800eafc <__pow5mult+0xa8>)
 800ea66:	3a01      	subs	r2, #1
 800ea68:	0092      	lsls	r2, r2, #2
 800ea6a:	5852      	ldr	r2, [r2, r1]
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	0031      	movs	r1, r6
 800ea70:	f7ff fe92 	bl	800e798 <__multadd>
 800ea74:	0006      	movs	r6, r0
 800ea76:	10ad      	asrs	r5, r5, #2
 800ea78:	d03d      	beq.n	800eaf6 <__pow5mult+0xa2>
 800ea7a:	69fc      	ldr	r4, [r7, #28]
 800ea7c:	2c00      	cmp	r4, #0
 800ea7e:	d10f      	bne.n	800eaa0 <__pow5mult+0x4c>
 800ea80:	2010      	movs	r0, #16
 800ea82:	f7fe f85d 	bl	800cb40 <malloc>
 800ea86:	1e02      	subs	r2, r0, #0
 800ea88:	61f8      	str	r0, [r7, #28]
 800ea8a:	d105      	bne.n	800ea98 <__pow5mult+0x44>
 800ea8c:	21b4      	movs	r1, #180	@ 0xb4
 800ea8e:	4b1c      	ldr	r3, [pc, #112]	@ (800eb00 <__pow5mult+0xac>)
 800ea90:	481c      	ldr	r0, [pc, #112]	@ (800eb04 <__pow5mult+0xb0>)
 800ea92:	31ff      	adds	r1, #255	@ 0xff
 800ea94:	f000 fc5c 	bl	800f350 <__assert_func>
 800ea98:	6044      	str	r4, [r0, #4]
 800ea9a:	6084      	str	r4, [r0, #8]
 800ea9c:	6004      	str	r4, [r0, #0]
 800ea9e:	60c4      	str	r4, [r0, #12]
 800eaa0:	69fb      	ldr	r3, [r7, #28]
 800eaa2:	689c      	ldr	r4, [r3, #8]
 800eaa4:	9301      	str	r3, [sp, #4]
 800eaa6:	2c00      	cmp	r4, #0
 800eaa8:	d108      	bne.n	800eabc <__pow5mult+0x68>
 800eaaa:	0038      	movs	r0, r7
 800eaac:	4916      	ldr	r1, [pc, #88]	@ (800eb08 <__pow5mult+0xb4>)
 800eaae:	f7ff ff07 	bl	800e8c0 <__i2b>
 800eab2:	9b01      	ldr	r3, [sp, #4]
 800eab4:	0004      	movs	r4, r0
 800eab6:	6098      	str	r0, [r3, #8]
 800eab8:	2300      	movs	r3, #0
 800eaba:	6003      	str	r3, [r0, #0]
 800eabc:	2301      	movs	r3, #1
 800eabe:	421d      	tst	r5, r3
 800eac0:	d00a      	beq.n	800ead8 <__pow5mult+0x84>
 800eac2:	0031      	movs	r1, r6
 800eac4:	0022      	movs	r2, r4
 800eac6:	0038      	movs	r0, r7
 800eac8:	f7ff ff12 	bl	800e8f0 <__multiply>
 800eacc:	0031      	movs	r1, r6
 800eace:	9001      	str	r0, [sp, #4]
 800ead0:	0038      	movs	r0, r7
 800ead2:	f7ff fe3d 	bl	800e750 <_Bfree>
 800ead6:	9e01      	ldr	r6, [sp, #4]
 800ead8:	106d      	asrs	r5, r5, #1
 800eada:	d00c      	beq.n	800eaf6 <__pow5mult+0xa2>
 800eadc:	6820      	ldr	r0, [r4, #0]
 800eade:	2800      	cmp	r0, #0
 800eae0:	d107      	bne.n	800eaf2 <__pow5mult+0x9e>
 800eae2:	0022      	movs	r2, r4
 800eae4:	0021      	movs	r1, r4
 800eae6:	0038      	movs	r0, r7
 800eae8:	f7ff ff02 	bl	800e8f0 <__multiply>
 800eaec:	2300      	movs	r3, #0
 800eaee:	6020      	str	r0, [r4, #0]
 800eaf0:	6003      	str	r3, [r0, #0]
 800eaf2:	0004      	movs	r4, r0
 800eaf4:	e7e2      	b.n	800eabc <__pow5mult+0x68>
 800eaf6:	0030      	movs	r0, r6
 800eaf8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800eafa:	46c0      	nop			@ (mov r8, r8)
 800eafc:	08019a98 	.word	0x08019a98
 800eb00:	080199bd 	.word	0x080199bd
 800eb04:	08019a3d 	.word	0x08019a3d
 800eb08:	00000271 	.word	0x00000271

0800eb0c <__lshift>:
 800eb0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb0e:	000c      	movs	r4, r1
 800eb10:	0016      	movs	r6, r2
 800eb12:	6923      	ldr	r3, [r4, #16]
 800eb14:	1157      	asrs	r7, r2, #5
 800eb16:	b085      	sub	sp, #20
 800eb18:	18fb      	adds	r3, r7, r3
 800eb1a:	9301      	str	r3, [sp, #4]
 800eb1c:	3301      	adds	r3, #1
 800eb1e:	9300      	str	r3, [sp, #0]
 800eb20:	6849      	ldr	r1, [r1, #4]
 800eb22:	68a3      	ldr	r3, [r4, #8]
 800eb24:	9002      	str	r0, [sp, #8]
 800eb26:	9a00      	ldr	r2, [sp, #0]
 800eb28:	4293      	cmp	r3, r2
 800eb2a:	db10      	blt.n	800eb4e <__lshift+0x42>
 800eb2c:	9802      	ldr	r0, [sp, #8]
 800eb2e:	f7ff fdcb 	bl	800e6c8 <_Balloc>
 800eb32:	2300      	movs	r3, #0
 800eb34:	0001      	movs	r1, r0
 800eb36:	0005      	movs	r5, r0
 800eb38:	001a      	movs	r2, r3
 800eb3a:	3114      	adds	r1, #20
 800eb3c:	4298      	cmp	r0, r3
 800eb3e:	d10c      	bne.n	800eb5a <__lshift+0x4e>
 800eb40:	21ef      	movs	r1, #239	@ 0xef
 800eb42:	002a      	movs	r2, r5
 800eb44:	4b25      	ldr	r3, [pc, #148]	@ (800ebdc <__lshift+0xd0>)
 800eb46:	4826      	ldr	r0, [pc, #152]	@ (800ebe0 <__lshift+0xd4>)
 800eb48:	0049      	lsls	r1, r1, #1
 800eb4a:	f000 fc01 	bl	800f350 <__assert_func>
 800eb4e:	3101      	adds	r1, #1
 800eb50:	005b      	lsls	r3, r3, #1
 800eb52:	e7e8      	b.n	800eb26 <__lshift+0x1a>
 800eb54:	0098      	lsls	r0, r3, #2
 800eb56:	500a      	str	r2, [r1, r0]
 800eb58:	3301      	adds	r3, #1
 800eb5a:	42bb      	cmp	r3, r7
 800eb5c:	dbfa      	blt.n	800eb54 <__lshift+0x48>
 800eb5e:	43fb      	mvns	r3, r7
 800eb60:	17db      	asrs	r3, r3, #31
 800eb62:	401f      	ands	r7, r3
 800eb64:	00bf      	lsls	r7, r7, #2
 800eb66:	0023      	movs	r3, r4
 800eb68:	201f      	movs	r0, #31
 800eb6a:	19c9      	adds	r1, r1, r7
 800eb6c:	0037      	movs	r7, r6
 800eb6e:	6922      	ldr	r2, [r4, #16]
 800eb70:	3314      	adds	r3, #20
 800eb72:	0092      	lsls	r2, r2, #2
 800eb74:	189a      	adds	r2, r3, r2
 800eb76:	4007      	ands	r7, r0
 800eb78:	4206      	tst	r6, r0
 800eb7a:	d029      	beq.n	800ebd0 <__lshift+0xc4>
 800eb7c:	3001      	adds	r0, #1
 800eb7e:	1bc0      	subs	r0, r0, r7
 800eb80:	9003      	str	r0, [sp, #12]
 800eb82:	468c      	mov	ip, r1
 800eb84:	2000      	movs	r0, #0
 800eb86:	681e      	ldr	r6, [r3, #0]
 800eb88:	40be      	lsls	r6, r7
 800eb8a:	4306      	orrs	r6, r0
 800eb8c:	4660      	mov	r0, ip
 800eb8e:	c040      	stmia	r0!, {r6}
 800eb90:	4684      	mov	ip, r0
 800eb92:	9e03      	ldr	r6, [sp, #12]
 800eb94:	cb01      	ldmia	r3!, {r0}
 800eb96:	40f0      	lsrs	r0, r6
 800eb98:	429a      	cmp	r2, r3
 800eb9a:	d8f4      	bhi.n	800eb86 <__lshift+0x7a>
 800eb9c:	0026      	movs	r6, r4
 800eb9e:	3615      	adds	r6, #21
 800eba0:	2304      	movs	r3, #4
 800eba2:	42b2      	cmp	r2, r6
 800eba4:	d304      	bcc.n	800ebb0 <__lshift+0xa4>
 800eba6:	1b13      	subs	r3, r2, r4
 800eba8:	3b15      	subs	r3, #21
 800ebaa:	089b      	lsrs	r3, r3, #2
 800ebac:	3301      	adds	r3, #1
 800ebae:	009b      	lsls	r3, r3, #2
 800ebb0:	50c8      	str	r0, [r1, r3]
 800ebb2:	2800      	cmp	r0, #0
 800ebb4:	d002      	beq.n	800ebbc <__lshift+0xb0>
 800ebb6:	9b01      	ldr	r3, [sp, #4]
 800ebb8:	3302      	adds	r3, #2
 800ebba:	9300      	str	r3, [sp, #0]
 800ebbc:	9b00      	ldr	r3, [sp, #0]
 800ebbe:	9802      	ldr	r0, [sp, #8]
 800ebc0:	3b01      	subs	r3, #1
 800ebc2:	0021      	movs	r1, r4
 800ebc4:	612b      	str	r3, [r5, #16]
 800ebc6:	f7ff fdc3 	bl	800e750 <_Bfree>
 800ebca:	0028      	movs	r0, r5
 800ebcc:	b005      	add	sp, #20
 800ebce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebd0:	cb01      	ldmia	r3!, {r0}
 800ebd2:	c101      	stmia	r1!, {r0}
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d8fb      	bhi.n	800ebd0 <__lshift+0xc4>
 800ebd8:	e7f0      	b.n	800ebbc <__lshift+0xb0>
 800ebda:	46c0      	nop			@ (mov r8, r8)
 800ebdc:	08019a2c 	.word	0x08019a2c
 800ebe0:	08019a3d 	.word	0x08019a3d

0800ebe4 <__mcmp>:
 800ebe4:	b530      	push	{r4, r5, lr}
 800ebe6:	690b      	ldr	r3, [r1, #16]
 800ebe8:	6904      	ldr	r4, [r0, #16]
 800ebea:	0002      	movs	r2, r0
 800ebec:	1ae0      	subs	r0, r4, r3
 800ebee:	429c      	cmp	r4, r3
 800ebf0:	d10f      	bne.n	800ec12 <__mcmp+0x2e>
 800ebf2:	3214      	adds	r2, #20
 800ebf4:	009b      	lsls	r3, r3, #2
 800ebf6:	3114      	adds	r1, #20
 800ebf8:	0014      	movs	r4, r2
 800ebfa:	18c9      	adds	r1, r1, r3
 800ebfc:	18d2      	adds	r2, r2, r3
 800ebfe:	3a04      	subs	r2, #4
 800ec00:	3904      	subs	r1, #4
 800ec02:	6815      	ldr	r5, [r2, #0]
 800ec04:	680b      	ldr	r3, [r1, #0]
 800ec06:	429d      	cmp	r5, r3
 800ec08:	d004      	beq.n	800ec14 <__mcmp+0x30>
 800ec0a:	2001      	movs	r0, #1
 800ec0c:	429d      	cmp	r5, r3
 800ec0e:	d200      	bcs.n	800ec12 <__mcmp+0x2e>
 800ec10:	3802      	subs	r0, #2
 800ec12:	bd30      	pop	{r4, r5, pc}
 800ec14:	4294      	cmp	r4, r2
 800ec16:	d3f2      	bcc.n	800ebfe <__mcmp+0x1a>
 800ec18:	e7fb      	b.n	800ec12 <__mcmp+0x2e>
	...

0800ec1c <__mdiff>:
 800ec1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec1e:	000c      	movs	r4, r1
 800ec20:	b087      	sub	sp, #28
 800ec22:	9000      	str	r0, [sp, #0]
 800ec24:	0011      	movs	r1, r2
 800ec26:	0020      	movs	r0, r4
 800ec28:	0017      	movs	r7, r2
 800ec2a:	f7ff ffdb 	bl	800ebe4 <__mcmp>
 800ec2e:	1e05      	subs	r5, r0, #0
 800ec30:	d110      	bne.n	800ec54 <__mdiff+0x38>
 800ec32:	0001      	movs	r1, r0
 800ec34:	9800      	ldr	r0, [sp, #0]
 800ec36:	f7ff fd47 	bl	800e6c8 <_Balloc>
 800ec3a:	1e02      	subs	r2, r0, #0
 800ec3c:	d104      	bne.n	800ec48 <__mdiff+0x2c>
 800ec3e:	4b40      	ldr	r3, [pc, #256]	@ (800ed40 <__mdiff+0x124>)
 800ec40:	4840      	ldr	r0, [pc, #256]	@ (800ed44 <__mdiff+0x128>)
 800ec42:	4941      	ldr	r1, [pc, #260]	@ (800ed48 <__mdiff+0x12c>)
 800ec44:	f000 fb84 	bl	800f350 <__assert_func>
 800ec48:	2301      	movs	r3, #1
 800ec4a:	6145      	str	r5, [r0, #20]
 800ec4c:	6103      	str	r3, [r0, #16]
 800ec4e:	0010      	movs	r0, r2
 800ec50:	b007      	add	sp, #28
 800ec52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec54:	2600      	movs	r6, #0
 800ec56:	42b0      	cmp	r0, r6
 800ec58:	da03      	bge.n	800ec62 <__mdiff+0x46>
 800ec5a:	0023      	movs	r3, r4
 800ec5c:	003c      	movs	r4, r7
 800ec5e:	001f      	movs	r7, r3
 800ec60:	3601      	adds	r6, #1
 800ec62:	6861      	ldr	r1, [r4, #4]
 800ec64:	9800      	ldr	r0, [sp, #0]
 800ec66:	f7ff fd2f 	bl	800e6c8 <_Balloc>
 800ec6a:	1e02      	subs	r2, r0, #0
 800ec6c:	d103      	bne.n	800ec76 <__mdiff+0x5a>
 800ec6e:	4b34      	ldr	r3, [pc, #208]	@ (800ed40 <__mdiff+0x124>)
 800ec70:	4834      	ldr	r0, [pc, #208]	@ (800ed44 <__mdiff+0x128>)
 800ec72:	4936      	ldr	r1, [pc, #216]	@ (800ed4c <__mdiff+0x130>)
 800ec74:	e7e6      	b.n	800ec44 <__mdiff+0x28>
 800ec76:	6923      	ldr	r3, [r4, #16]
 800ec78:	3414      	adds	r4, #20
 800ec7a:	9300      	str	r3, [sp, #0]
 800ec7c:	009b      	lsls	r3, r3, #2
 800ec7e:	18e3      	adds	r3, r4, r3
 800ec80:	0021      	movs	r1, r4
 800ec82:	9401      	str	r4, [sp, #4]
 800ec84:	003c      	movs	r4, r7
 800ec86:	9302      	str	r3, [sp, #8]
 800ec88:	693b      	ldr	r3, [r7, #16]
 800ec8a:	3414      	adds	r4, #20
 800ec8c:	009b      	lsls	r3, r3, #2
 800ec8e:	18e3      	adds	r3, r4, r3
 800ec90:	9303      	str	r3, [sp, #12]
 800ec92:	0003      	movs	r3, r0
 800ec94:	60c6      	str	r6, [r0, #12]
 800ec96:	468c      	mov	ip, r1
 800ec98:	2000      	movs	r0, #0
 800ec9a:	3314      	adds	r3, #20
 800ec9c:	9304      	str	r3, [sp, #16]
 800ec9e:	9305      	str	r3, [sp, #20]
 800eca0:	4663      	mov	r3, ip
 800eca2:	cb20      	ldmia	r3!, {r5}
 800eca4:	b2a9      	uxth	r1, r5
 800eca6:	000e      	movs	r6, r1
 800eca8:	469c      	mov	ip, r3
 800ecaa:	cc08      	ldmia	r4!, {r3}
 800ecac:	0c2d      	lsrs	r5, r5, #16
 800ecae:	b299      	uxth	r1, r3
 800ecb0:	1a71      	subs	r1, r6, r1
 800ecb2:	1809      	adds	r1, r1, r0
 800ecb4:	0c1b      	lsrs	r3, r3, #16
 800ecb6:	1408      	asrs	r0, r1, #16
 800ecb8:	1aeb      	subs	r3, r5, r3
 800ecba:	181b      	adds	r3, r3, r0
 800ecbc:	1418      	asrs	r0, r3, #16
 800ecbe:	b289      	uxth	r1, r1
 800ecc0:	041b      	lsls	r3, r3, #16
 800ecc2:	4319      	orrs	r1, r3
 800ecc4:	9b05      	ldr	r3, [sp, #20]
 800ecc6:	c302      	stmia	r3!, {r1}
 800ecc8:	9305      	str	r3, [sp, #20]
 800ecca:	9b03      	ldr	r3, [sp, #12]
 800eccc:	42a3      	cmp	r3, r4
 800ecce:	d8e7      	bhi.n	800eca0 <__mdiff+0x84>
 800ecd0:	0039      	movs	r1, r7
 800ecd2:	9c03      	ldr	r4, [sp, #12]
 800ecd4:	3115      	adds	r1, #21
 800ecd6:	2304      	movs	r3, #4
 800ecd8:	428c      	cmp	r4, r1
 800ecda:	d304      	bcc.n	800ece6 <__mdiff+0xca>
 800ecdc:	1be3      	subs	r3, r4, r7
 800ecde:	3b15      	subs	r3, #21
 800ece0:	089b      	lsrs	r3, r3, #2
 800ece2:	3301      	adds	r3, #1
 800ece4:	009b      	lsls	r3, r3, #2
 800ece6:	9901      	ldr	r1, [sp, #4]
 800ece8:	18cd      	adds	r5, r1, r3
 800ecea:	9904      	ldr	r1, [sp, #16]
 800ecec:	002e      	movs	r6, r5
 800ecee:	18cb      	adds	r3, r1, r3
 800ecf0:	001f      	movs	r7, r3
 800ecf2:	9902      	ldr	r1, [sp, #8]
 800ecf4:	428e      	cmp	r6, r1
 800ecf6:	d311      	bcc.n	800ed1c <__mdiff+0x100>
 800ecf8:	9c02      	ldr	r4, [sp, #8]
 800ecfa:	1ee9      	subs	r1, r5, #3
 800ecfc:	2000      	movs	r0, #0
 800ecfe:	428c      	cmp	r4, r1
 800ed00:	d304      	bcc.n	800ed0c <__mdiff+0xf0>
 800ed02:	0021      	movs	r1, r4
 800ed04:	3103      	adds	r1, #3
 800ed06:	1b49      	subs	r1, r1, r5
 800ed08:	0889      	lsrs	r1, r1, #2
 800ed0a:	0088      	lsls	r0, r1, #2
 800ed0c:	181b      	adds	r3, r3, r0
 800ed0e:	3b04      	subs	r3, #4
 800ed10:	6819      	ldr	r1, [r3, #0]
 800ed12:	2900      	cmp	r1, #0
 800ed14:	d010      	beq.n	800ed38 <__mdiff+0x11c>
 800ed16:	9b00      	ldr	r3, [sp, #0]
 800ed18:	6113      	str	r3, [r2, #16]
 800ed1a:	e798      	b.n	800ec4e <__mdiff+0x32>
 800ed1c:	4684      	mov	ip, r0
 800ed1e:	ce02      	ldmia	r6!, {r1}
 800ed20:	b288      	uxth	r0, r1
 800ed22:	4460      	add	r0, ip
 800ed24:	1400      	asrs	r0, r0, #16
 800ed26:	0c0c      	lsrs	r4, r1, #16
 800ed28:	1904      	adds	r4, r0, r4
 800ed2a:	4461      	add	r1, ip
 800ed2c:	1420      	asrs	r0, r4, #16
 800ed2e:	b289      	uxth	r1, r1
 800ed30:	0424      	lsls	r4, r4, #16
 800ed32:	4321      	orrs	r1, r4
 800ed34:	c702      	stmia	r7!, {r1}
 800ed36:	e7dc      	b.n	800ecf2 <__mdiff+0xd6>
 800ed38:	9900      	ldr	r1, [sp, #0]
 800ed3a:	3901      	subs	r1, #1
 800ed3c:	9100      	str	r1, [sp, #0]
 800ed3e:	e7e6      	b.n	800ed0e <__mdiff+0xf2>
 800ed40:	08019a2c 	.word	0x08019a2c
 800ed44:	08019a3d 	.word	0x08019a3d
 800ed48:	00000237 	.word	0x00000237
 800ed4c:	00000245 	.word	0x00000245

0800ed50 <__d2b>:
 800ed50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed52:	2101      	movs	r1, #1
 800ed54:	0016      	movs	r6, r2
 800ed56:	001f      	movs	r7, r3
 800ed58:	f7ff fcb6 	bl	800e6c8 <_Balloc>
 800ed5c:	1e04      	subs	r4, r0, #0
 800ed5e:	d105      	bne.n	800ed6c <__d2b+0x1c>
 800ed60:	0022      	movs	r2, r4
 800ed62:	4b25      	ldr	r3, [pc, #148]	@ (800edf8 <__d2b+0xa8>)
 800ed64:	4825      	ldr	r0, [pc, #148]	@ (800edfc <__d2b+0xac>)
 800ed66:	4926      	ldr	r1, [pc, #152]	@ (800ee00 <__d2b+0xb0>)
 800ed68:	f000 faf2 	bl	800f350 <__assert_func>
 800ed6c:	033b      	lsls	r3, r7, #12
 800ed6e:	007d      	lsls	r5, r7, #1
 800ed70:	0b1b      	lsrs	r3, r3, #12
 800ed72:	0d6d      	lsrs	r5, r5, #21
 800ed74:	d002      	beq.n	800ed7c <__d2b+0x2c>
 800ed76:	2280      	movs	r2, #128	@ 0x80
 800ed78:	0352      	lsls	r2, r2, #13
 800ed7a:	4313      	orrs	r3, r2
 800ed7c:	9301      	str	r3, [sp, #4]
 800ed7e:	2e00      	cmp	r6, #0
 800ed80:	d025      	beq.n	800edce <__d2b+0x7e>
 800ed82:	4668      	mov	r0, sp
 800ed84:	9600      	str	r6, [sp, #0]
 800ed86:	f7ff fd6c 	bl	800e862 <__lo0bits>
 800ed8a:	9b01      	ldr	r3, [sp, #4]
 800ed8c:	9900      	ldr	r1, [sp, #0]
 800ed8e:	2800      	cmp	r0, #0
 800ed90:	d01b      	beq.n	800edca <__d2b+0x7a>
 800ed92:	2220      	movs	r2, #32
 800ed94:	001e      	movs	r6, r3
 800ed96:	1a12      	subs	r2, r2, r0
 800ed98:	4096      	lsls	r6, r2
 800ed9a:	0032      	movs	r2, r6
 800ed9c:	40c3      	lsrs	r3, r0
 800ed9e:	430a      	orrs	r2, r1
 800eda0:	6162      	str	r2, [r4, #20]
 800eda2:	9301      	str	r3, [sp, #4]
 800eda4:	9e01      	ldr	r6, [sp, #4]
 800eda6:	61a6      	str	r6, [r4, #24]
 800eda8:	1e73      	subs	r3, r6, #1
 800edaa:	419e      	sbcs	r6, r3
 800edac:	3601      	adds	r6, #1
 800edae:	6126      	str	r6, [r4, #16]
 800edb0:	2d00      	cmp	r5, #0
 800edb2:	d014      	beq.n	800edde <__d2b+0x8e>
 800edb4:	2635      	movs	r6, #53	@ 0x35
 800edb6:	4b13      	ldr	r3, [pc, #76]	@ (800ee04 <__d2b+0xb4>)
 800edb8:	18ed      	adds	r5, r5, r3
 800edba:	9b08      	ldr	r3, [sp, #32]
 800edbc:	182d      	adds	r5, r5, r0
 800edbe:	601d      	str	r5, [r3, #0]
 800edc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edc2:	1a36      	subs	r6, r6, r0
 800edc4:	601e      	str	r6, [r3, #0]
 800edc6:	0020      	movs	r0, r4
 800edc8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800edca:	6161      	str	r1, [r4, #20]
 800edcc:	e7ea      	b.n	800eda4 <__d2b+0x54>
 800edce:	a801      	add	r0, sp, #4
 800edd0:	f7ff fd47 	bl	800e862 <__lo0bits>
 800edd4:	9b01      	ldr	r3, [sp, #4]
 800edd6:	2601      	movs	r6, #1
 800edd8:	6163      	str	r3, [r4, #20]
 800edda:	3020      	adds	r0, #32
 800eddc:	e7e7      	b.n	800edae <__d2b+0x5e>
 800edde:	4b0a      	ldr	r3, [pc, #40]	@ (800ee08 <__d2b+0xb8>)
 800ede0:	18c0      	adds	r0, r0, r3
 800ede2:	9b08      	ldr	r3, [sp, #32]
 800ede4:	6018      	str	r0, [r3, #0]
 800ede6:	4b09      	ldr	r3, [pc, #36]	@ (800ee0c <__d2b+0xbc>)
 800ede8:	18f3      	adds	r3, r6, r3
 800edea:	009b      	lsls	r3, r3, #2
 800edec:	18e3      	adds	r3, r4, r3
 800edee:	6958      	ldr	r0, [r3, #20]
 800edf0:	f7ff fd16 	bl	800e820 <__hi0bits>
 800edf4:	0176      	lsls	r6, r6, #5
 800edf6:	e7e3      	b.n	800edc0 <__d2b+0x70>
 800edf8:	08019a2c 	.word	0x08019a2c
 800edfc:	08019a3d 	.word	0x08019a3d
 800ee00:	0000030f 	.word	0x0000030f
 800ee04:	fffffbcd 	.word	0xfffffbcd
 800ee08:	fffffbce 	.word	0xfffffbce
 800ee0c:	3fffffff 	.word	0x3fffffff

0800ee10 <__sfputc_r>:
 800ee10:	6893      	ldr	r3, [r2, #8]
 800ee12:	b510      	push	{r4, lr}
 800ee14:	3b01      	subs	r3, #1
 800ee16:	6093      	str	r3, [r2, #8]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	da04      	bge.n	800ee26 <__sfputc_r+0x16>
 800ee1c:	6994      	ldr	r4, [r2, #24]
 800ee1e:	42a3      	cmp	r3, r4
 800ee20:	db07      	blt.n	800ee32 <__sfputc_r+0x22>
 800ee22:	290a      	cmp	r1, #10
 800ee24:	d005      	beq.n	800ee32 <__sfputc_r+0x22>
 800ee26:	6813      	ldr	r3, [r2, #0]
 800ee28:	1c58      	adds	r0, r3, #1
 800ee2a:	6010      	str	r0, [r2, #0]
 800ee2c:	7019      	strb	r1, [r3, #0]
 800ee2e:	0008      	movs	r0, r1
 800ee30:	bd10      	pop	{r4, pc}
 800ee32:	f000 f9e2 	bl	800f1fa <__swbuf_r>
 800ee36:	0001      	movs	r1, r0
 800ee38:	e7f9      	b.n	800ee2e <__sfputc_r+0x1e>

0800ee3a <__sfputs_r>:
 800ee3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee3c:	0006      	movs	r6, r0
 800ee3e:	000f      	movs	r7, r1
 800ee40:	0014      	movs	r4, r2
 800ee42:	18d5      	adds	r5, r2, r3
 800ee44:	42ac      	cmp	r4, r5
 800ee46:	d101      	bne.n	800ee4c <__sfputs_r+0x12>
 800ee48:	2000      	movs	r0, #0
 800ee4a:	e007      	b.n	800ee5c <__sfputs_r+0x22>
 800ee4c:	7821      	ldrb	r1, [r4, #0]
 800ee4e:	003a      	movs	r2, r7
 800ee50:	0030      	movs	r0, r6
 800ee52:	f7ff ffdd 	bl	800ee10 <__sfputc_r>
 800ee56:	3401      	adds	r4, #1
 800ee58:	1c43      	adds	r3, r0, #1
 800ee5a:	d1f3      	bne.n	800ee44 <__sfputs_r+0xa>
 800ee5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ee60 <_vfiprintf_r>:
 800ee60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee62:	b0a1      	sub	sp, #132	@ 0x84
 800ee64:	000f      	movs	r7, r1
 800ee66:	0015      	movs	r5, r2
 800ee68:	001e      	movs	r6, r3
 800ee6a:	9003      	str	r0, [sp, #12]
 800ee6c:	2800      	cmp	r0, #0
 800ee6e:	d004      	beq.n	800ee7a <_vfiprintf_r+0x1a>
 800ee70:	6a03      	ldr	r3, [r0, #32]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d101      	bne.n	800ee7a <_vfiprintf_r+0x1a>
 800ee76:	f7fe fc11 	bl	800d69c <__sinit>
 800ee7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ee7c:	07db      	lsls	r3, r3, #31
 800ee7e:	d405      	bmi.n	800ee8c <_vfiprintf_r+0x2c>
 800ee80:	89bb      	ldrh	r3, [r7, #12]
 800ee82:	059b      	lsls	r3, r3, #22
 800ee84:	d402      	bmi.n	800ee8c <_vfiprintf_r+0x2c>
 800ee86:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800ee88:	f7fe fd45 	bl	800d916 <__retarget_lock_acquire_recursive>
 800ee8c:	89bb      	ldrh	r3, [r7, #12]
 800ee8e:	071b      	lsls	r3, r3, #28
 800ee90:	d502      	bpl.n	800ee98 <_vfiprintf_r+0x38>
 800ee92:	693b      	ldr	r3, [r7, #16]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d113      	bne.n	800eec0 <_vfiprintf_r+0x60>
 800ee98:	0039      	movs	r1, r7
 800ee9a:	9803      	ldr	r0, [sp, #12]
 800ee9c:	f000 f9f0 	bl	800f280 <__swsetup_r>
 800eea0:	2800      	cmp	r0, #0
 800eea2:	d00d      	beq.n	800eec0 <_vfiprintf_r+0x60>
 800eea4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eea6:	07db      	lsls	r3, r3, #31
 800eea8:	d503      	bpl.n	800eeb2 <_vfiprintf_r+0x52>
 800eeaa:	2001      	movs	r0, #1
 800eeac:	4240      	negs	r0, r0
 800eeae:	b021      	add	sp, #132	@ 0x84
 800eeb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eeb2:	89bb      	ldrh	r3, [r7, #12]
 800eeb4:	059b      	lsls	r3, r3, #22
 800eeb6:	d4f8      	bmi.n	800eeaa <_vfiprintf_r+0x4a>
 800eeb8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800eeba:	f7fe fd2d 	bl	800d918 <__retarget_lock_release_recursive>
 800eebe:	e7f4      	b.n	800eeaa <_vfiprintf_r+0x4a>
 800eec0:	2300      	movs	r3, #0
 800eec2:	ac08      	add	r4, sp, #32
 800eec4:	6163      	str	r3, [r4, #20]
 800eec6:	3320      	adds	r3, #32
 800eec8:	7663      	strb	r3, [r4, #25]
 800eeca:	3310      	adds	r3, #16
 800eecc:	76a3      	strb	r3, [r4, #26]
 800eece:	9607      	str	r6, [sp, #28]
 800eed0:	002e      	movs	r6, r5
 800eed2:	7833      	ldrb	r3, [r6, #0]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d001      	beq.n	800eedc <_vfiprintf_r+0x7c>
 800eed8:	2b25      	cmp	r3, #37	@ 0x25
 800eeda:	d148      	bne.n	800ef6e <_vfiprintf_r+0x10e>
 800eedc:	1b73      	subs	r3, r6, r5
 800eede:	9305      	str	r3, [sp, #20]
 800eee0:	42ae      	cmp	r6, r5
 800eee2:	d00b      	beq.n	800eefc <_vfiprintf_r+0x9c>
 800eee4:	002a      	movs	r2, r5
 800eee6:	0039      	movs	r1, r7
 800eee8:	9803      	ldr	r0, [sp, #12]
 800eeea:	f7ff ffa6 	bl	800ee3a <__sfputs_r>
 800eeee:	3001      	adds	r0, #1
 800eef0:	d100      	bne.n	800eef4 <_vfiprintf_r+0x94>
 800eef2:	e0ae      	b.n	800f052 <_vfiprintf_r+0x1f2>
 800eef4:	6963      	ldr	r3, [r4, #20]
 800eef6:	9a05      	ldr	r2, [sp, #20]
 800eef8:	189b      	adds	r3, r3, r2
 800eefa:	6163      	str	r3, [r4, #20]
 800eefc:	7833      	ldrb	r3, [r6, #0]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d100      	bne.n	800ef04 <_vfiprintf_r+0xa4>
 800ef02:	e0a6      	b.n	800f052 <_vfiprintf_r+0x1f2>
 800ef04:	2201      	movs	r2, #1
 800ef06:	2300      	movs	r3, #0
 800ef08:	4252      	negs	r2, r2
 800ef0a:	6062      	str	r2, [r4, #4]
 800ef0c:	a904      	add	r1, sp, #16
 800ef0e:	3254      	adds	r2, #84	@ 0x54
 800ef10:	1852      	adds	r2, r2, r1
 800ef12:	1c75      	adds	r5, r6, #1
 800ef14:	6023      	str	r3, [r4, #0]
 800ef16:	60e3      	str	r3, [r4, #12]
 800ef18:	60a3      	str	r3, [r4, #8]
 800ef1a:	7013      	strb	r3, [r2, #0]
 800ef1c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800ef1e:	4b59      	ldr	r3, [pc, #356]	@ (800f084 <_vfiprintf_r+0x224>)
 800ef20:	2205      	movs	r2, #5
 800ef22:	0018      	movs	r0, r3
 800ef24:	7829      	ldrb	r1, [r5, #0]
 800ef26:	9305      	str	r3, [sp, #20]
 800ef28:	f7fe fcf7 	bl	800d91a <memchr>
 800ef2c:	1c6e      	adds	r6, r5, #1
 800ef2e:	2800      	cmp	r0, #0
 800ef30:	d11f      	bne.n	800ef72 <_vfiprintf_r+0x112>
 800ef32:	6822      	ldr	r2, [r4, #0]
 800ef34:	06d3      	lsls	r3, r2, #27
 800ef36:	d504      	bpl.n	800ef42 <_vfiprintf_r+0xe2>
 800ef38:	2353      	movs	r3, #83	@ 0x53
 800ef3a:	a904      	add	r1, sp, #16
 800ef3c:	185b      	adds	r3, r3, r1
 800ef3e:	2120      	movs	r1, #32
 800ef40:	7019      	strb	r1, [r3, #0]
 800ef42:	0713      	lsls	r3, r2, #28
 800ef44:	d504      	bpl.n	800ef50 <_vfiprintf_r+0xf0>
 800ef46:	2353      	movs	r3, #83	@ 0x53
 800ef48:	a904      	add	r1, sp, #16
 800ef4a:	185b      	adds	r3, r3, r1
 800ef4c:	212b      	movs	r1, #43	@ 0x2b
 800ef4e:	7019      	strb	r1, [r3, #0]
 800ef50:	782b      	ldrb	r3, [r5, #0]
 800ef52:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef54:	d016      	beq.n	800ef84 <_vfiprintf_r+0x124>
 800ef56:	002e      	movs	r6, r5
 800ef58:	2100      	movs	r1, #0
 800ef5a:	200a      	movs	r0, #10
 800ef5c:	68e3      	ldr	r3, [r4, #12]
 800ef5e:	7832      	ldrb	r2, [r6, #0]
 800ef60:	1c75      	adds	r5, r6, #1
 800ef62:	3a30      	subs	r2, #48	@ 0x30
 800ef64:	2a09      	cmp	r2, #9
 800ef66:	d950      	bls.n	800f00a <_vfiprintf_r+0x1aa>
 800ef68:	2900      	cmp	r1, #0
 800ef6a:	d111      	bne.n	800ef90 <_vfiprintf_r+0x130>
 800ef6c:	e017      	b.n	800ef9e <_vfiprintf_r+0x13e>
 800ef6e:	3601      	adds	r6, #1
 800ef70:	e7af      	b.n	800eed2 <_vfiprintf_r+0x72>
 800ef72:	9b05      	ldr	r3, [sp, #20]
 800ef74:	6822      	ldr	r2, [r4, #0]
 800ef76:	1ac0      	subs	r0, r0, r3
 800ef78:	2301      	movs	r3, #1
 800ef7a:	4083      	lsls	r3, r0
 800ef7c:	4313      	orrs	r3, r2
 800ef7e:	0035      	movs	r5, r6
 800ef80:	6023      	str	r3, [r4, #0]
 800ef82:	e7cc      	b.n	800ef1e <_vfiprintf_r+0xbe>
 800ef84:	9b07      	ldr	r3, [sp, #28]
 800ef86:	1d19      	adds	r1, r3, #4
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	9107      	str	r1, [sp, #28]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	db01      	blt.n	800ef94 <_vfiprintf_r+0x134>
 800ef90:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ef92:	e004      	b.n	800ef9e <_vfiprintf_r+0x13e>
 800ef94:	425b      	negs	r3, r3
 800ef96:	60e3      	str	r3, [r4, #12]
 800ef98:	2302      	movs	r3, #2
 800ef9a:	4313      	orrs	r3, r2
 800ef9c:	6023      	str	r3, [r4, #0]
 800ef9e:	7833      	ldrb	r3, [r6, #0]
 800efa0:	2b2e      	cmp	r3, #46	@ 0x2e
 800efa2:	d10c      	bne.n	800efbe <_vfiprintf_r+0x15e>
 800efa4:	7873      	ldrb	r3, [r6, #1]
 800efa6:	2b2a      	cmp	r3, #42	@ 0x2a
 800efa8:	d134      	bne.n	800f014 <_vfiprintf_r+0x1b4>
 800efaa:	9b07      	ldr	r3, [sp, #28]
 800efac:	3602      	adds	r6, #2
 800efae:	1d1a      	adds	r2, r3, #4
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	9207      	str	r2, [sp, #28]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	da01      	bge.n	800efbc <_vfiprintf_r+0x15c>
 800efb8:	2301      	movs	r3, #1
 800efba:	425b      	negs	r3, r3
 800efbc:	9309      	str	r3, [sp, #36]	@ 0x24
 800efbe:	4d32      	ldr	r5, [pc, #200]	@ (800f088 <_vfiprintf_r+0x228>)
 800efc0:	2203      	movs	r2, #3
 800efc2:	0028      	movs	r0, r5
 800efc4:	7831      	ldrb	r1, [r6, #0]
 800efc6:	f7fe fca8 	bl	800d91a <memchr>
 800efca:	2800      	cmp	r0, #0
 800efcc:	d006      	beq.n	800efdc <_vfiprintf_r+0x17c>
 800efce:	2340      	movs	r3, #64	@ 0x40
 800efd0:	1b40      	subs	r0, r0, r5
 800efd2:	4083      	lsls	r3, r0
 800efd4:	6822      	ldr	r2, [r4, #0]
 800efd6:	3601      	adds	r6, #1
 800efd8:	4313      	orrs	r3, r2
 800efda:	6023      	str	r3, [r4, #0]
 800efdc:	7831      	ldrb	r1, [r6, #0]
 800efde:	2206      	movs	r2, #6
 800efe0:	482a      	ldr	r0, [pc, #168]	@ (800f08c <_vfiprintf_r+0x22c>)
 800efe2:	1c75      	adds	r5, r6, #1
 800efe4:	7621      	strb	r1, [r4, #24]
 800efe6:	f7fe fc98 	bl	800d91a <memchr>
 800efea:	2800      	cmp	r0, #0
 800efec:	d040      	beq.n	800f070 <_vfiprintf_r+0x210>
 800efee:	4b28      	ldr	r3, [pc, #160]	@ (800f090 <_vfiprintf_r+0x230>)
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d122      	bne.n	800f03a <_vfiprintf_r+0x1da>
 800eff4:	2207      	movs	r2, #7
 800eff6:	9b07      	ldr	r3, [sp, #28]
 800eff8:	3307      	adds	r3, #7
 800effa:	4393      	bics	r3, r2
 800effc:	3308      	adds	r3, #8
 800effe:	9307      	str	r3, [sp, #28]
 800f000:	6963      	ldr	r3, [r4, #20]
 800f002:	9a04      	ldr	r2, [sp, #16]
 800f004:	189b      	adds	r3, r3, r2
 800f006:	6163      	str	r3, [r4, #20]
 800f008:	e762      	b.n	800eed0 <_vfiprintf_r+0x70>
 800f00a:	4343      	muls	r3, r0
 800f00c:	002e      	movs	r6, r5
 800f00e:	2101      	movs	r1, #1
 800f010:	189b      	adds	r3, r3, r2
 800f012:	e7a4      	b.n	800ef5e <_vfiprintf_r+0xfe>
 800f014:	2300      	movs	r3, #0
 800f016:	200a      	movs	r0, #10
 800f018:	0019      	movs	r1, r3
 800f01a:	3601      	adds	r6, #1
 800f01c:	6063      	str	r3, [r4, #4]
 800f01e:	7832      	ldrb	r2, [r6, #0]
 800f020:	1c75      	adds	r5, r6, #1
 800f022:	3a30      	subs	r2, #48	@ 0x30
 800f024:	2a09      	cmp	r2, #9
 800f026:	d903      	bls.n	800f030 <_vfiprintf_r+0x1d0>
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d0c8      	beq.n	800efbe <_vfiprintf_r+0x15e>
 800f02c:	9109      	str	r1, [sp, #36]	@ 0x24
 800f02e:	e7c6      	b.n	800efbe <_vfiprintf_r+0x15e>
 800f030:	4341      	muls	r1, r0
 800f032:	002e      	movs	r6, r5
 800f034:	2301      	movs	r3, #1
 800f036:	1889      	adds	r1, r1, r2
 800f038:	e7f1      	b.n	800f01e <_vfiprintf_r+0x1be>
 800f03a:	aa07      	add	r2, sp, #28
 800f03c:	9200      	str	r2, [sp, #0]
 800f03e:	0021      	movs	r1, r4
 800f040:	003a      	movs	r2, r7
 800f042:	4b14      	ldr	r3, [pc, #80]	@ (800f094 <_vfiprintf_r+0x234>)
 800f044:	9803      	ldr	r0, [sp, #12]
 800f046:	f7fd fedd 	bl	800ce04 <_printf_float>
 800f04a:	9004      	str	r0, [sp, #16]
 800f04c:	9b04      	ldr	r3, [sp, #16]
 800f04e:	3301      	adds	r3, #1
 800f050:	d1d6      	bne.n	800f000 <_vfiprintf_r+0x1a0>
 800f052:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f054:	07db      	lsls	r3, r3, #31
 800f056:	d405      	bmi.n	800f064 <_vfiprintf_r+0x204>
 800f058:	89bb      	ldrh	r3, [r7, #12]
 800f05a:	059b      	lsls	r3, r3, #22
 800f05c:	d402      	bmi.n	800f064 <_vfiprintf_r+0x204>
 800f05e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f060:	f7fe fc5a 	bl	800d918 <__retarget_lock_release_recursive>
 800f064:	89bb      	ldrh	r3, [r7, #12]
 800f066:	065b      	lsls	r3, r3, #25
 800f068:	d500      	bpl.n	800f06c <_vfiprintf_r+0x20c>
 800f06a:	e71e      	b.n	800eeaa <_vfiprintf_r+0x4a>
 800f06c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800f06e:	e71e      	b.n	800eeae <_vfiprintf_r+0x4e>
 800f070:	aa07      	add	r2, sp, #28
 800f072:	9200      	str	r2, [sp, #0]
 800f074:	0021      	movs	r1, r4
 800f076:	003a      	movs	r2, r7
 800f078:	4b06      	ldr	r3, [pc, #24]	@ (800f094 <_vfiprintf_r+0x234>)
 800f07a:	9803      	ldr	r0, [sp, #12]
 800f07c:	f7fe f970 	bl	800d360 <_printf_i>
 800f080:	e7e3      	b.n	800f04a <_vfiprintf_r+0x1ea>
 800f082:	46c0      	nop			@ (mov r8, r8)
 800f084:	08019b98 	.word	0x08019b98
 800f088:	08019b9e 	.word	0x08019b9e
 800f08c:	08019ba2 	.word	0x08019ba2
 800f090:	0800ce05 	.word	0x0800ce05
 800f094:	0800ee3b 	.word	0x0800ee3b

0800f098 <__sflush_r>:
 800f098:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f09a:	220c      	movs	r2, #12
 800f09c:	5e8b      	ldrsh	r3, [r1, r2]
 800f09e:	0005      	movs	r5, r0
 800f0a0:	000c      	movs	r4, r1
 800f0a2:	071a      	lsls	r2, r3, #28
 800f0a4:	d456      	bmi.n	800f154 <__sflush_r+0xbc>
 800f0a6:	684a      	ldr	r2, [r1, #4]
 800f0a8:	2a00      	cmp	r2, #0
 800f0aa:	dc02      	bgt.n	800f0b2 <__sflush_r+0x1a>
 800f0ac:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800f0ae:	2a00      	cmp	r2, #0
 800f0b0:	dd4e      	ble.n	800f150 <__sflush_r+0xb8>
 800f0b2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800f0b4:	2f00      	cmp	r7, #0
 800f0b6:	d04b      	beq.n	800f150 <__sflush_r+0xb8>
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	2080      	movs	r0, #128	@ 0x80
 800f0bc:	682e      	ldr	r6, [r5, #0]
 800f0be:	602a      	str	r2, [r5, #0]
 800f0c0:	001a      	movs	r2, r3
 800f0c2:	0140      	lsls	r0, r0, #5
 800f0c4:	6a21      	ldr	r1, [r4, #32]
 800f0c6:	4002      	ands	r2, r0
 800f0c8:	4203      	tst	r3, r0
 800f0ca:	d033      	beq.n	800f134 <__sflush_r+0x9c>
 800f0cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f0ce:	89a3      	ldrh	r3, [r4, #12]
 800f0d0:	075b      	lsls	r3, r3, #29
 800f0d2:	d506      	bpl.n	800f0e2 <__sflush_r+0x4a>
 800f0d4:	6863      	ldr	r3, [r4, #4]
 800f0d6:	1ad2      	subs	r2, r2, r3
 800f0d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d001      	beq.n	800f0e2 <__sflush_r+0x4a>
 800f0de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f0e0:	1ad2      	subs	r2, r2, r3
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	0028      	movs	r0, r5
 800f0e6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800f0e8:	6a21      	ldr	r1, [r4, #32]
 800f0ea:	47b8      	blx	r7
 800f0ec:	89a2      	ldrh	r2, [r4, #12]
 800f0ee:	1c43      	adds	r3, r0, #1
 800f0f0:	d106      	bne.n	800f100 <__sflush_r+0x68>
 800f0f2:	6829      	ldr	r1, [r5, #0]
 800f0f4:	291d      	cmp	r1, #29
 800f0f6:	d846      	bhi.n	800f186 <__sflush_r+0xee>
 800f0f8:	4b29      	ldr	r3, [pc, #164]	@ (800f1a0 <__sflush_r+0x108>)
 800f0fa:	410b      	asrs	r3, r1
 800f0fc:	07db      	lsls	r3, r3, #31
 800f0fe:	d442      	bmi.n	800f186 <__sflush_r+0xee>
 800f100:	2300      	movs	r3, #0
 800f102:	6063      	str	r3, [r4, #4]
 800f104:	6923      	ldr	r3, [r4, #16]
 800f106:	6023      	str	r3, [r4, #0]
 800f108:	04d2      	lsls	r2, r2, #19
 800f10a:	d505      	bpl.n	800f118 <__sflush_r+0x80>
 800f10c:	1c43      	adds	r3, r0, #1
 800f10e:	d102      	bne.n	800f116 <__sflush_r+0x7e>
 800f110:	682b      	ldr	r3, [r5, #0]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d100      	bne.n	800f118 <__sflush_r+0x80>
 800f116:	6560      	str	r0, [r4, #84]	@ 0x54
 800f118:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f11a:	602e      	str	r6, [r5, #0]
 800f11c:	2900      	cmp	r1, #0
 800f11e:	d017      	beq.n	800f150 <__sflush_r+0xb8>
 800f120:	0023      	movs	r3, r4
 800f122:	3344      	adds	r3, #68	@ 0x44
 800f124:	4299      	cmp	r1, r3
 800f126:	d002      	beq.n	800f12e <__sflush_r+0x96>
 800f128:	0028      	movs	r0, r5
 800f12a:	f7ff fa83 	bl	800e634 <_free_r>
 800f12e:	2300      	movs	r3, #0
 800f130:	6363      	str	r3, [r4, #52]	@ 0x34
 800f132:	e00d      	b.n	800f150 <__sflush_r+0xb8>
 800f134:	2301      	movs	r3, #1
 800f136:	0028      	movs	r0, r5
 800f138:	47b8      	blx	r7
 800f13a:	0002      	movs	r2, r0
 800f13c:	1c43      	adds	r3, r0, #1
 800f13e:	d1c6      	bne.n	800f0ce <__sflush_r+0x36>
 800f140:	682b      	ldr	r3, [r5, #0]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d0c3      	beq.n	800f0ce <__sflush_r+0x36>
 800f146:	2b1d      	cmp	r3, #29
 800f148:	d001      	beq.n	800f14e <__sflush_r+0xb6>
 800f14a:	2b16      	cmp	r3, #22
 800f14c:	d11a      	bne.n	800f184 <__sflush_r+0xec>
 800f14e:	602e      	str	r6, [r5, #0]
 800f150:	2000      	movs	r0, #0
 800f152:	e01e      	b.n	800f192 <__sflush_r+0xfa>
 800f154:	690e      	ldr	r6, [r1, #16]
 800f156:	2e00      	cmp	r6, #0
 800f158:	d0fa      	beq.n	800f150 <__sflush_r+0xb8>
 800f15a:	680f      	ldr	r7, [r1, #0]
 800f15c:	600e      	str	r6, [r1, #0]
 800f15e:	1bba      	subs	r2, r7, r6
 800f160:	9201      	str	r2, [sp, #4]
 800f162:	2200      	movs	r2, #0
 800f164:	079b      	lsls	r3, r3, #30
 800f166:	d100      	bne.n	800f16a <__sflush_r+0xd2>
 800f168:	694a      	ldr	r2, [r1, #20]
 800f16a:	60a2      	str	r2, [r4, #8]
 800f16c:	9b01      	ldr	r3, [sp, #4]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	ddee      	ble.n	800f150 <__sflush_r+0xb8>
 800f172:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800f174:	0032      	movs	r2, r6
 800f176:	001f      	movs	r7, r3
 800f178:	0028      	movs	r0, r5
 800f17a:	9b01      	ldr	r3, [sp, #4]
 800f17c:	6a21      	ldr	r1, [r4, #32]
 800f17e:	47b8      	blx	r7
 800f180:	2800      	cmp	r0, #0
 800f182:	dc07      	bgt.n	800f194 <__sflush_r+0xfc>
 800f184:	89a2      	ldrh	r2, [r4, #12]
 800f186:	2340      	movs	r3, #64	@ 0x40
 800f188:	2001      	movs	r0, #1
 800f18a:	4313      	orrs	r3, r2
 800f18c:	b21b      	sxth	r3, r3
 800f18e:	81a3      	strh	r3, [r4, #12]
 800f190:	4240      	negs	r0, r0
 800f192:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f194:	9b01      	ldr	r3, [sp, #4]
 800f196:	1836      	adds	r6, r6, r0
 800f198:	1a1b      	subs	r3, r3, r0
 800f19a:	9301      	str	r3, [sp, #4]
 800f19c:	e7e6      	b.n	800f16c <__sflush_r+0xd4>
 800f19e:	46c0      	nop			@ (mov r8, r8)
 800f1a0:	dfbffffe 	.word	0xdfbffffe

0800f1a4 <_fflush_r>:
 800f1a4:	690b      	ldr	r3, [r1, #16]
 800f1a6:	b570      	push	{r4, r5, r6, lr}
 800f1a8:	0005      	movs	r5, r0
 800f1aa:	000c      	movs	r4, r1
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d102      	bne.n	800f1b6 <_fflush_r+0x12>
 800f1b0:	2500      	movs	r5, #0
 800f1b2:	0028      	movs	r0, r5
 800f1b4:	bd70      	pop	{r4, r5, r6, pc}
 800f1b6:	2800      	cmp	r0, #0
 800f1b8:	d004      	beq.n	800f1c4 <_fflush_r+0x20>
 800f1ba:	6a03      	ldr	r3, [r0, #32]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d101      	bne.n	800f1c4 <_fflush_r+0x20>
 800f1c0:	f7fe fa6c 	bl	800d69c <__sinit>
 800f1c4:	220c      	movs	r2, #12
 800f1c6:	5ea3      	ldrsh	r3, [r4, r2]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d0f1      	beq.n	800f1b0 <_fflush_r+0xc>
 800f1cc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f1ce:	07d2      	lsls	r2, r2, #31
 800f1d0:	d404      	bmi.n	800f1dc <_fflush_r+0x38>
 800f1d2:	059b      	lsls	r3, r3, #22
 800f1d4:	d402      	bmi.n	800f1dc <_fflush_r+0x38>
 800f1d6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f1d8:	f7fe fb9d 	bl	800d916 <__retarget_lock_acquire_recursive>
 800f1dc:	0028      	movs	r0, r5
 800f1de:	0021      	movs	r1, r4
 800f1e0:	f7ff ff5a 	bl	800f098 <__sflush_r>
 800f1e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f1e6:	0005      	movs	r5, r0
 800f1e8:	07db      	lsls	r3, r3, #31
 800f1ea:	d4e2      	bmi.n	800f1b2 <_fflush_r+0xe>
 800f1ec:	89a3      	ldrh	r3, [r4, #12]
 800f1ee:	059b      	lsls	r3, r3, #22
 800f1f0:	d4df      	bmi.n	800f1b2 <_fflush_r+0xe>
 800f1f2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f1f4:	f7fe fb90 	bl	800d918 <__retarget_lock_release_recursive>
 800f1f8:	e7db      	b.n	800f1b2 <_fflush_r+0xe>

0800f1fa <__swbuf_r>:
 800f1fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1fc:	0006      	movs	r6, r0
 800f1fe:	000d      	movs	r5, r1
 800f200:	0014      	movs	r4, r2
 800f202:	2800      	cmp	r0, #0
 800f204:	d004      	beq.n	800f210 <__swbuf_r+0x16>
 800f206:	6a03      	ldr	r3, [r0, #32]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d101      	bne.n	800f210 <__swbuf_r+0x16>
 800f20c:	f7fe fa46 	bl	800d69c <__sinit>
 800f210:	69a3      	ldr	r3, [r4, #24]
 800f212:	60a3      	str	r3, [r4, #8]
 800f214:	89a3      	ldrh	r3, [r4, #12]
 800f216:	071b      	lsls	r3, r3, #28
 800f218:	d502      	bpl.n	800f220 <__swbuf_r+0x26>
 800f21a:	6923      	ldr	r3, [r4, #16]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d109      	bne.n	800f234 <__swbuf_r+0x3a>
 800f220:	0021      	movs	r1, r4
 800f222:	0030      	movs	r0, r6
 800f224:	f000 f82c 	bl	800f280 <__swsetup_r>
 800f228:	2800      	cmp	r0, #0
 800f22a:	d003      	beq.n	800f234 <__swbuf_r+0x3a>
 800f22c:	2501      	movs	r5, #1
 800f22e:	426d      	negs	r5, r5
 800f230:	0028      	movs	r0, r5
 800f232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f234:	6923      	ldr	r3, [r4, #16]
 800f236:	6820      	ldr	r0, [r4, #0]
 800f238:	b2ef      	uxtb	r7, r5
 800f23a:	1ac0      	subs	r0, r0, r3
 800f23c:	6963      	ldr	r3, [r4, #20]
 800f23e:	b2ed      	uxtb	r5, r5
 800f240:	4283      	cmp	r3, r0
 800f242:	dc05      	bgt.n	800f250 <__swbuf_r+0x56>
 800f244:	0021      	movs	r1, r4
 800f246:	0030      	movs	r0, r6
 800f248:	f7ff ffac 	bl	800f1a4 <_fflush_r>
 800f24c:	2800      	cmp	r0, #0
 800f24e:	d1ed      	bne.n	800f22c <__swbuf_r+0x32>
 800f250:	68a3      	ldr	r3, [r4, #8]
 800f252:	3001      	adds	r0, #1
 800f254:	3b01      	subs	r3, #1
 800f256:	60a3      	str	r3, [r4, #8]
 800f258:	6823      	ldr	r3, [r4, #0]
 800f25a:	1c5a      	adds	r2, r3, #1
 800f25c:	6022      	str	r2, [r4, #0]
 800f25e:	701f      	strb	r7, [r3, #0]
 800f260:	6963      	ldr	r3, [r4, #20]
 800f262:	4283      	cmp	r3, r0
 800f264:	d004      	beq.n	800f270 <__swbuf_r+0x76>
 800f266:	89a3      	ldrh	r3, [r4, #12]
 800f268:	07db      	lsls	r3, r3, #31
 800f26a:	d5e1      	bpl.n	800f230 <__swbuf_r+0x36>
 800f26c:	2d0a      	cmp	r5, #10
 800f26e:	d1df      	bne.n	800f230 <__swbuf_r+0x36>
 800f270:	0021      	movs	r1, r4
 800f272:	0030      	movs	r0, r6
 800f274:	f7ff ff96 	bl	800f1a4 <_fflush_r>
 800f278:	2800      	cmp	r0, #0
 800f27a:	d0d9      	beq.n	800f230 <__swbuf_r+0x36>
 800f27c:	e7d6      	b.n	800f22c <__swbuf_r+0x32>
	...

0800f280 <__swsetup_r>:
 800f280:	4b2d      	ldr	r3, [pc, #180]	@ (800f338 <__swsetup_r+0xb8>)
 800f282:	b570      	push	{r4, r5, r6, lr}
 800f284:	0005      	movs	r5, r0
 800f286:	6818      	ldr	r0, [r3, #0]
 800f288:	000c      	movs	r4, r1
 800f28a:	2800      	cmp	r0, #0
 800f28c:	d004      	beq.n	800f298 <__swsetup_r+0x18>
 800f28e:	6a03      	ldr	r3, [r0, #32]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d101      	bne.n	800f298 <__swsetup_r+0x18>
 800f294:	f7fe fa02 	bl	800d69c <__sinit>
 800f298:	230c      	movs	r3, #12
 800f29a:	5ee2      	ldrsh	r2, [r4, r3]
 800f29c:	0713      	lsls	r3, r2, #28
 800f29e:	d423      	bmi.n	800f2e8 <__swsetup_r+0x68>
 800f2a0:	06d3      	lsls	r3, r2, #27
 800f2a2:	d407      	bmi.n	800f2b4 <__swsetup_r+0x34>
 800f2a4:	2309      	movs	r3, #9
 800f2a6:	602b      	str	r3, [r5, #0]
 800f2a8:	2340      	movs	r3, #64	@ 0x40
 800f2aa:	2001      	movs	r0, #1
 800f2ac:	4313      	orrs	r3, r2
 800f2ae:	81a3      	strh	r3, [r4, #12]
 800f2b0:	4240      	negs	r0, r0
 800f2b2:	e03a      	b.n	800f32a <__swsetup_r+0xaa>
 800f2b4:	0752      	lsls	r2, r2, #29
 800f2b6:	d513      	bpl.n	800f2e0 <__swsetup_r+0x60>
 800f2b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f2ba:	2900      	cmp	r1, #0
 800f2bc:	d008      	beq.n	800f2d0 <__swsetup_r+0x50>
 800f2be:	0023      	movs	r3, r4
 800f2c0:	3344      	adds	r3, #68	@ 0x44
 800f2c2:	4299      	cmp	r1, r3
 800f2c4:	d002      	beq.n	800f2cc <__swsetup_r+0x4c>
 800f2c6:	0028      	movs	r0, r5
 800f2c8:	f7ff f9b4 	bl	800e634 <_free_r>
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	6363      	str	r3, [r4, #52]	@ 0x34
 800f2d0:	2224      	movs	r2, #36	@ 0x24
 800f2d2:	89a3      	ldrh	r3, [r4, #12]
 800f2d4:	4393      	bics	r3, r2
 800f2d6:	81a3      	strh	r3, [r4, #12]
 800f2d8:	2300      	movs	r3, #0
 800f2da:	6063      	str	r3, [r4, #4]
 800f2dc:	6923      	ldr	r3, [r4, #16]
 800f2de:	6023      	str	r3, [r4, #0]
 800f2e0:	2308      	movs	r3, #8
 800f2e2:	89a2      	ldrh	r2, [r4, #12]
 800f2e4:	4313      	orrs	r3, r2
 800f2e6:	81a3      	strh	r3, [r4, #12]
 800f2e8:	6923      	ldr	r3, [r4, #16]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d10b      	bne.n	800f306 <__swsetup_r+0x86>
 800f2ee:	21a0      	movs	r1, #160	@ 0xa0
 800f2f0:	2280      	movs	r2, #128	@ 0x80
 800f2f2:	89a3      	ldrh	r3, [r4, #12]
 800f2f4:	0089      	lsls	r1, r1, #2
 800f2f6:	0092      	lsls	r2, r2, #2
 800f2f8:	400b      	ands	r3, r1
 800f2fa:	4293      	cmp	r3, r2
 800f2fc:	d003      	beq.n	800f306 <__swsetup_r+0x86>
 800f2fe:	0021      	movs	r1, r4
 800f300:	0028      	movs	r0, r5
 800f302:	f000 f8b9 	bl	800f478 <__smakebuf_r>
 800f306:	230c      	movs	r3, #12
 800f308:	5ee2      	ldrsh	r2, [r4, r3]
 800f30a:	2101      	movs	r1, #1
 800f30c:	0013      	movs	r3, r2
 800f30e:	400b      	ands	r3, r1
 800f310:	420a      	tst	r2, r1
 800f312:	d00b      	beq.n	800f32c <__swsetup_r+0xac>
 800f314:	2300      	movs	r3, #0
 800f316:	60a3      	str	r3, [r4, #8]
 800f318:	6963      	ldr	r3, [r4, #20]
 800f31a:	425b      	negs	r3, r3
 800f31c:	61a3      	str	r3, [r4, #24]
 800f31e:	2000      	movs	r0, #0
 800f320:	6923      	ldr	r3, [r4, #16]
 800f322:	4283      	cmp	r3, r0
 800f324:	d101      	bne.n	800f32a <__swsetup_r+0xaa>
 800f326:	0613      	lsls	r3, r2, #24
 800f328:	d4be      	bmi.n	800f2a8 <__swsetup_r+0x28>
 800f32a:	bd70      	pop	{r4, r5, r6, pc}
 800f32c:	0791      	lsls	r1, r2, #30
 800f32e:	d400      	bmi.n	800f332 <__swsetup_r+0xb2>
 800f330:	6963      	ldr	r3, [r4, #20]
 800f332:	60a3      	str	r3, [r4, #8]
 800f334:	e7f3      	b.n	800f31e <__swsetup_r+0x9e>
 800f336:	46c0      	nop			@ (mov r8, r8)
 800f338:	2000017c 	.word	0x2000017c

0800f33c <memcpy>:
 800f33c:	2300      	movs	r3, #0
 800f33e:	b510      	push	{r4, lr}
 800f340:	429a      	cmp	r2, r3
 800f342:	d100      	bne.n	800f346 <memcpy+0xa>
 800f344:	bd10      	pop	{r4, pc}
 800f346:	5ccc      	ldrb	r4, [r1, r3]
 800f348:	54c4      	strb	r4, [r0, r3]
 800f34a:	3301      	adds	r3, #1
 800f34c:	e7f8      	b.n	800f340 <memcpy+0x4>
	...

0800f350 <__assert_func>:
 800f350:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f352:	0014      	movs	r4, r2
 800f354:	001a      	movs	r2, r3
 800f356:	4b09      	ldr	r3, [pc, #36]	@ (800f37c <__assert_func+0x2c>)
 800f358:	0005      	movs	r5, r0
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	000e      	movs	r6, r1
 800f35e:	68d8      	ldr	r0, [r3, #12]
 800f360:	4b07      	ldr	r3, [pc, #28]	@ (800f380 <__assert_func+0x30>)
 800f362:	2c00      	cmp	r4, #0
 800f364:	d101      	bne.n	800f36a <__assert_func+0x1a>
 800f366:	4b07      	ldr	r3, [pc, #28]	@ (800f384 <__assert_func+0x34>)
 800f368:	001c      	movs	r4, r3
 800f36a:	4907      	ldr	r1, [pc, #28]	@ (800f388 <__assert_func+0x38>)
 800f36c:	9301      	str	r3, [sp, #4]
 800f36e:	9402      	str	r4, [sp, #8]
 800f370:	002b      	movs	r3, r5
 800f372:	9600      	str	r6, [sp, #0]
 800f374:	f7fe f9aa 	bl	800d6cc <fiprintf>
 800f378:	f000 f8e4 	bl	800f544 <abort>
 800f37c:	2000017c 	.word	0x2000017c
 800f380:	08019bb3 	.word	0x08019bb3
 800f384:	08019bee 	.word	0x08019bee
 800f388:	08019bc0 	.word	0x08019bc0

0800f38c <_calloc_r>:
 800f38c:	b570      	push	{r4, r5, r6, lr}
 800f38e:	0c0b      	lsrs	r3, r1, #16
 800f390:	0c15      	lsrs	r5, r2, #16
 800f392:	2b00      	cmp	r3, #0
 800f394:	d11e      	bne.n	800f3d4 <_calloc_r+0x48>
 800f396:	2d00      	cmp	r5, #0
 800f398:	d10c      	bne.n	800f3b4 <_calloc_r+0x28>
 800f39a:	b289      	uxth	r1, r1
 800f39c:	b294      	uxth	r4, r2
 800f39e:	434c      	muls	r4, r1
 800f3a0:	0021      	movs	r1, r4
 800f3a2:	f7fd fbf9 	bl	800cb98 <_malloc_r>
 800f3a6:	1e05      	subs	r5, r0, #0
 800f3a8:	d01a      	beq.n	800f3e0 <_calloc_r+0x54>
 800f3aa:	0022      	movs	r2, r4
 800f3ac:	2100      	movs	r1, #0
 800f3ae:	f7fe fa05 	bl	800d7bc <memset>
 800f3b2:	e016      	b.n	800f3e2 <_calloc_r+0x56>
 800f3b4:	1c2b      	adds	r3, r5, #0
 800f3b6:	1c0c      	adds	r4, r1, #0
 800f3b8:	b289      	uxth	r1, r1
 800f3ba:	b292      	uxth	r2, r2
 800f3bc:	434a      	muls	r2, r1
 800f3be:	b29b      	uxth	r3, r3
 800f3c0:	b2a1      	uxth	r1, r4
 800f3c2:	4359      	muls	r1, r3
 800f3c4:	0c14      	lsrs	r4, r2, #16
 800f3c6:	190c      	adds	r4, r1, r4
 800f3c8:	0c23      	lsrs	r3, r4, #16
 800f3ca:	d107      	bne.n	800f3dc <_calloc_r+0x50>
 800f3cc:	0424      	lsls	r4, r4, #16
 800f3ce:	b292      	uxth	r2, r2
 800f3d0:	4314      	orrs	r4, r2
 800f3d2:	e7e5      	b.n	800f3a0 <_calloc_r+0x14>
 800f3d4:	2d00      	cmp	r5, #0
 800f3d6:	d101      	bne.n	800f3dc <_calloc_r+0x50>
 800f3d8:	1c14      	adds	r4, r2, #0
 800f3da:	e7ed      	b.n	800f3b8 <_calloc_r+0x2c>
 800f3dc:	230c      	movs	r3, #12
 800f3de:	6003      	str	r3, [r0, #0]
 800f3e0:	2500      	movs	r5, #0
 800f3e2:	0028      	movs	r0, r5
 800f3e4:	bd70      	pop	{r4, r5, r6, pc}

0800f3e6 <__ascii_mbtowc>:
 800f3e6:	b082      	sub	sp, #8
 800f3e8:	2900      	cmp	r1, #0
 800f3ea:	d100      	bne.n	800f3ee <__ascii_mbtowc+0x8>
 800f3ec:	a901      	add	r1, sp, #4
 800f3ee:	1e10      	subs	r0, r2, #0
 800f3f0:	d006      	beq.n	800f400 <__ascii_mbtowc+0x1a>
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d006      	beq.n	800f404 <__ascii_mbtowc+0x1e>
 800f3f6:	7813      	ldrb	r3, [r2, #0]
 800f3f8:	600b      	str	r3, [r1, #0]
 800f3fa:	7810      	ldrb	r0, [r2, #0]
 800f3fc:	1e43      	subs	r3, r0, #1
 800f3fe:	4198      	sbcs	r0, r3
 800f400:	b002      	add	sp, #8
 800f402:	4770      	bx	lr
 800f404:	2002      	movs	r0, #2
 800f406:	4240      	negs	r0, r0
 800f408:	e7fa      	b.n	800f400 <__ascii_mbtowc+0x1a>

0800f40a <__ascii_wctomb>:
 800f40a:	0003      	movs	r3, r0
 800f40c:	1e08      	subs	r0, r1, #0
 800f40e:	d005      	beq.n	800f41c <__ascii_wctomb+0x12>
 800f410:	2aff      	cmp	r2, #255	@ 0xff
 800f412:	d904      	bls.n	800f41e <__ascii_wctomb+0x14>
 800f414:	228a      	movs	r2, #138	@ 0x8a
 800f416:	2001      	movs	r0, #1
 800f418:	601a      	str	r2, [r3, #0]
 800f41a:	4240      	negs	r0, r0
 800f41c:	4770      	bx	lr
 800f41e:	2001      	movs	r0, #1
 800f420:	700a      	strb	r2, [r1, #0]
 800f422:	e7fb      	b.n	800f41c <__ascii_wctomb+0x12>

0800f424 <__swhatbuf_r>:
 800f424:	b570      	push	{r4, r5, r6, lr}
 800f426:	000e      	movs	r6, r1
 800f428:	001d      	movs	r5, r3
 800f42a:	230e      	movs	r3, #14
 800f42c:	5ec9      	ldrsh	r1, [r1, r3]
 800f42e:	0014      	movs	r4, r2
 800f430:	b096      	sub	sp, #88	@ 0x58
 800f432:	2900      	cmp	r1, #0
 800f434:	da0c      	bge.n	800f450 <__swhatbuf_r+0x2c>
 800f436:	89b2      	ldrh	r2, [r6, #12]
 800f438:	2380      	movs	r3, #128	@ 0x80
 800f43a:	0011      	movs	r1, r2
 800f43c:	4019      	ands	r1, r3
 800f43e:	421a      	tst	r2, r3
 800f440:	d114      	bne.n	800f46c <__swhatbuf_r+0x48>
 800f442:	2380      	movs	r3, #128	@ 0x80
 800f444:	00db      	lsls	r3, r3, #3
 800f446:	2000      	movs	r0, #0
 800f448:	6029      	str	r1, [r5, #0]
 800f44a:	6023      	str	r3, [r4, #0]
 800f44c:	b016      	add	sp, #88	@ 0x58
 800f44e:	bd70      	pop	{r4, r5, r6, pc}
 800f450:	466a      	mov	r2, sp
 800f452:	f000 f853 	bl	800f4fc <_fstat_r>
 800f456:	2800      	cmp	r0, #0
 800f458:	dbed      	blt.n	800f436 <__swhatbuf_r+0x12>
 800f45a:	23f0      	movs	r3, #240	@ 0xf0
 800f45c:	9901      	ldr	r1, [sp, #4]
 800f45e:	021b      	lsls	r3, r3, #8
 800f460:	4019      	ands	r1, r3
 800f462:	4b04      	ldr	r3, [pc, #16]	@ (800f474 <__swhatbuf_r+0x50>)
 800f464:	18c9      	adds	r1, r1, r3
 800f466:	424b      	negs	r3, r1
 800f468:	4159      	adcs	r1, r3
 800f46a:	e7ea      	b.n	800f442 <__swhatbuf_r+0x1e>
 800f46c:	2100      	movs	r1, #0
 800f46e:	2340      	movs	r3, #64	@ 0x40
 800f470:	e7e9      	b.n	800f446 <__swhatbuf_r+0x22>
 800f472:	46c0      	nop			@ (mov r8, r8)
 800f474:	ffffe000 	.word	0xffffe000

0800f478 <__smakebuf_r>:
 800f478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f47a:	2602      	movs	r6, #2
 800f47c:	898b      	ldrh	r3, [r1, #12]
 800f47e:	0005      	movs	r5, r0
 800f480:	000c      	movs	r4, r1
 800f482:	b085      	sub	sp, #20
 800f484:	4233      	tst	r3, r6
 800f486:	d007      	beq.n	800f498 <__smakebuf_r+0x20>
 800f488:	0023      	movs	r3, r4
 800f48a:	3347      	adds	r3, #71	@ 0x47
 800f48c:	6023      	str	r3, [r4, #0]
 800f48e:	6123      	str	r3, [r4, #16]
 800f490:	2301      	movs	r3, #1
 800f492:	6163      	str	r3, [r4, #20]
 800f494:	b005      	add	sp, #20
 800f496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f498:	ab03      	add	r3, sp, #12
 800f49a:	aa02      	add	r2, sp, #8
 800f49c:	f7ff ffc2 	bl	800f424 <__swhatbuf_r>
 800f4a0:	9f02      	ldr	r7, [sp, #8]
 800f4a2:	9001      	str	r0, [sp, #4]
 800f4a4:	0039      	movs	r1, r7
 800f4a6:	0028      	movs	r0, r5
 800f4a8:	f7fd fb76 	bl	800cb98 <_malloc_r>
 800f4ac:	2800      	cmp	r0, #0
 800f4ae:	d108      	bne.n	800f4c2 <__smakebuf_r+0x4a>
 800f4b0:	220c      	movs	r2, #12
 800f4b2:	5ea3      	ldrsh	r3, [r4, r2]
 800f4b4:	059a      	lsls	r2, r3, #22
 800f4b6:	d4ed      	bmi.n	800f494 <__smakebuf_r+0x1c>
 800f4b8:	2203      	movs	r2, #3
 800f4ba:	4393      	bics	r3, r2
 800f4bc:	431e      	orrs	r6, r3
 800f4be:	81a6      	strh	r6, [r4, #12]
 800f4c0:	e7e2      	b.n	800f488 <__smakebuf_r+0x10>
 800f4c2:	2380      	movs	r3, #128	@ 0x80
 800f4c4:	89a2      	ldrh	r2, [r4, #12]
 800f4c6:	6020      	str	r0, [r4, #0]
 800f4c8:	4313      	orrs	r3, r2
 800f4ca:	81a3      	strh	r3, [r4, #12]
 800f4cc:	9b03      	ldr	r3, [sp, #12]
 800f4ce:	6120      	str	r0, [r4, #16]
 800f4d0:	6167      	str	r7, [r4, #20]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d00c      	beq.n	800f4f0 <__smakebuf_r+0x78>
 800f4d6:	0028      	movs	r0, r5
 800f4d8:	230e      	movs	r3, #14
 800f4da:	5ee1      	ldrsh	r1, [r4, r3]
 800f4dc:	f000 f820 	bl	800f520 <_isatty_r>
 800f4e0:	2800      	cmp	r0, #0
 800f4e2:	d005      	beq.n	800f4f0 <__smakebuf_r+0x78>
 800f4e4:	2303      	movs	r3, #3
 800f4e6:	89a2      	ldrh	r2, [r4, #12]
 800f4e8:	439a      	bics	r2, r3
 800f4ea:	3b02      	subs	r3, #2
 800f4ec:	4313      	orrs	r3, r2
 800f4ee:	81a3      	strh	r3, [r4, #12]
 800f4f0:	89a3      	ldrh	r3, [r4, #12]
 800f4f2:	9a01      	ldr	r2, [sp, #4]
 800f4f4:	4313      	orrs	r3, r2
 800f4f6:	81a3      	strh	r3, [r4, #12]
 800f4f8:	e7cc      	b.n	800f494 <__smakebuf_r+0x1c>
	...

0800f4fc <_fstat_r>:
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	b570      	push	{r4, r5, r6, lr}
 800f500:	4d06      	ldr	r5, [pc, #24]	@ (800f51c <_fstat_r+0x20>)
 800f502:	0004      	movs	r4, r0
 800f504:	0008      	movs	r0, r1
 800f506:	0011      	movs	r1, r2
 800f508:	602b      	str	r3, [r5, #0]
 800f50a:	f7f6 fad6 	bl	8005aba <_fstat>
 800f50e:	1c43      	adds	r3, r0, #1
 800f510:	d103      	bne.n	800f51a <_fstat_r+0x1e>
 800f512:	682b      	ldr	r3, [r5, #0]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d000      	beq.n	800f51a <_fstat_r+0x1e>
 800f518:	6023      	str	r3, [r4, #0]
 800f51a:	bd70      	pop	{r4, r5, r6, pc}
 800f51c:	20000710 	.word	0x20000710

0800f520 <_isatty_r>:
 800f520:	2300      	movs	r3, #0
 800f522:	b570      	push	{r4, r5, r6, lr}
 800f524:	4d06      	ldr	r5, [pc, #24]	@ (800f540 <_isatty_r+0x20>)
 800f526:	0004      	movs	r4, r0
 800f528:	0008      	movs	r0, r1
 800f52a:	602b      	str	r3, [r5, #0]
 800f52c:	f7f6 fad3 	bl	8005ad6 <_isatty>
 800f530:	1c43      	adds	r3, r0, #1
 800f532:	d103      	bne.n	800f53c <_isatty_r+0x1c>
 800f534:	682b      	ldr	r3, [r5, #0]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d000      	beq.n	800f53c <_isatty_r+0x1c>
 800f53a:	6023      	str	r3, [r4, #0]
 800f53c:	bd70      	pop	{r4, r5, r6, pc}
 800f53e:	46c0      	nop			@ (mov r8, r8)
 800f540:	20000710 	.word	0x20000710

0800f544 <abort>:
 800f544:	2006      	movs	r0, #6
 800f546:	b510      	push	{r4, lr}
 800f548:	f000 f82c 	bl	800f5a4 <raise>
 800f54c:	2001      	movs	r0, #1
 800f54e:	f7f6 fa64 	bl	8005a1a <_exit>

0800f552 <_raise_r>:
 800f552:	b570      	push	{r4, r5, r6, lr}
 800f554:	0004      	movs	r4, r0
 800f556:	000d      	movs	r5, r1
 800f558:	291f      	cmp	r1, #31
 800f55a:	d904      	bls.n	800f566 <_raise_r+0x14>
 800f55c:	2316      	movs	r3, #22
 800f55e:	6003      	str	r3, [r0, #0]
 800f560:	2001      	movs	r0, #1
 800f562:	4240      	negs	r0, r0
 800f564:	bd70      	pop	{r4, r5, r6, pc}
 800f566:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d004      	beq.n	800f576 <_raise_r+0x24>
 800f56c:	008a      	lsls	r2, r1, #2
 800f56e:	189b      	adds	r3, r3, r2
 800f570:	681a      	ldr	r2, [r3, #0]
 800f572:	2a00      	cmp	r2, #0
 800f574:	d108      	bne.n	800f588 <_raise_r+0x36>
 800f576:	0020      	movs	r0, r4
 800f578:	f000 f830 	bl	800f5dc <_getpid_r>
 800f57c:	002a      	movs	r2, r5
 800f57e:	0001      	movs	r1, r0
 800f580:	0020      	movs	r0, r4
 800f582:	f000 f819 	bl	800f5b8 <_kill_r>
 800f586:	e7ed      	b.n	800f564 <_raise_r+0x12>
 800f588:	2a01      	cmp	r2, #1
 800f58a:	d009      	beq.n	800f5a0 <_raise_r+0x4e>
 800f58c:	1c51      	adds	r1, r2, #1
 800f58e:	d103      	bne.n	800f598 <_raise_r+0x46>
 800f590:	2316      	movs	r3, #22
 800f592:	6003      	str	r3, [r0, #0]
 800f594:	2001      	movs	r0, #1
 800f596:	e7e5      	b.n	800f564 <_raise_r+0x12>
 800f598:	2100      	movs	r1, #0
 800f59a:	0028      	movs	r0, r5
 800f59c:	6019      	str	r1, [r3, #0]
 800f59e:	4790      	blx	r2
 800f5a0:	2000      	movs	r0, #0
 800f5a2:	e7df      	b.n	800f564 <_raise_r+0x12>

0800f5a4 <raise>:
 800f5a4:	b510      	push	{r4, lr}
 800f5a6:	4b03      	ldr	r3, [pc, #12]	@ (800f5b4 <raise+0x10>)
 800f5a8:	0001      	movs	r1, r0
 800f5aa:	6818      	ldr	r0, [r3, #0]
 800f5ac:	f7ff ffd1 	bl	800f552 <_raise_r>
 800f5b0:	bd10      	pop	{r4, pc}
 800f5b2:	46c0      	nop			@ (mov r8, r8)
 800f5b4:	2000017c 	.word	0x2000017c

0800f5b8 <_kill_r>:
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	b570      	push	{r4, r5, r6, lr}
 800f5bc:	4d06      	ldr	r5, [pc, #24]	@ (800f5d8 <_kill_r+0x20>)
 800f5be:	0004      	movs	r4, r0
 800f5c0:	0008      	movs	r0, r1
 800f5c2:	0011      	movs	r1, r2
 800f5c4:	602b      	str	r3, [r5, #0]
 800f5c6:	f7f6 fa18 	bl	80059fa <_kill>
 800f5ca:	1c43      	adds	r3, r0, #1
 800f5cc:	d103      	bne.n	800f5d6 <_kill_r+0x1e>
 800f5ce:	682b      	ldr	r3, [r5, #0]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d000      	beq.n	800f5d6 <_kill_r+0x1e>
 800f5d4:	6023      	str	r3, [r4, #0]
 800f5d6:	bd70      	pop	{r4, r5, r6, pc}
 800f5d8:	20000710 	.word	0x20000710

0800f5dc <_getpid_r>:
 800f5dc:	b510      	push	{r4, lr}
 800f5de:	f7f6 fa06 	bl	80059ee <_getpid>
 800f5e2:	bd10      	pop	{r4, pc}

0800f5e4 <_init>:
 800f5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5e6:	46c0      	nop			@ (mov r8, r8)
 800f5e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5ea:	bc08      	pop	{r3}
 800f5ec:	469e      	mov	lr, r3
 800f5ee:	4770      	bx	lr

0800f5f0 <_fini>:
 800f5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5f2:	46c0      	nop			@ (mov r8, r8)
 800f5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5f6:	bc08      	pop	{r3}
 800f5f8:	469e      	mov	lr, r3
 800f5fa:	4770      	bx	lr
